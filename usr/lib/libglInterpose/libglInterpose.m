void breakpoint_break(uint64_t a1, volatile int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  void *v12;
  NSArray *v13;
  id v14;
  id v15;
  void *v16;
  DYTransportMessage *v17;
  uint64_t v18;
  uint64_t v19;
  dispatch_queue_s *v20;
  unsigned int *v21;
  unsigned int v22;
  if (!gIgnoreAllBreakpoints)
  {
    if (a5)
    {
      v9 = (unsigned int *)(a5 + 4640);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
    }

    v11 = GPUTools::DYLockUtils::Lock((GPUTools::DYLockUtils *)&breakpoint_lock, a2);
    [(id)DYGetGLGuestAppClient(v11) lockGraphicsAndWaitForThreads:0];
    v12 = objc_autoreleasePoolPush();
    v13 = +[NSThread callStackReturnAddresses](&OBJC_CLASS___NSThread, "callStackReturnAddresses");
    v14 = objc_alloc(&OBJC_CLASS___DYBreakpoint);
    if (a1) {
      v15 = [v14 _initWithPbuf:a1 type:a3 backtrace:v13 error:a4];
    }
    else {
      v15 = [v14 _initWithType:a3 backtrace:v13 error:a4];
    }
    v16 = v15;
    v17 = +[DYTransportMessage messageWithKind:objectPayload:]( &OBJC_CLASS___DYTransportMessage,  "messageWithKind:objectPayload:",  512LL,  v15);

    [(id)DYGetGLGuestAppClient(v18) sendMessage:v17];
    objc_autoreleasePoolPop(v12);
    v20 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v19) graphicsLockWaitQueue];
    dispatch_sync_f(v20, 0LL, (dispatch_function_t)do_nothing);
    if (a5)
    {
      v21 = (unsigned int *)(a5 + 4640);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 + 1, v21));
    }
  }
}

uint64_t breakpoint_continue(uint64_t a1)
{
  return GPUTools::DYLockUtils::Unlock((GPUTools::DYLockUtils *)&breakpoint_lock, v1);
}

uint64_t has_client_memory_vertex_arrays(ContextInfo *a1)
{
  uint64_t v2 = *((void *)a1 + 2);
  uint64_t v3 = *((void *)a1 + 4);
  if (*((_DWORD *)a1 + 864) != 1)
  {
    (*(void (**)(void, uint64_t, unsigned int *))(v3 + 832))(*((void *)a1 + 2), 34921LL, &v31);
    if (v31)
    {
      unint64_t v4 = 0LL;
      v5 = (char *)a1 + 184;
      do
      {
        (*(void (**)(uint64_t, unint64_t, uint64_t, char *))(v3 + 4128))(v2, v4, 34975LL, v5);
        (*(void (**)(uint64_t, unint64_t, uint64_t, int *))(v3 + 4128))(v2, v4, 34338LL, &v30);
        int v6 = v30;
        v5[22] = v30 != 0;
        if (v6 && !*(_DWORD *)v5) {
          return 1LL;
        }
        ++v4;
        v5 += 32;
      }

      while (v4 < v31);
    }
  }

  if (!*((_BYTE *)a1 + 4858)) {
    return 0LL;
  }
  v27 = a1;
  unint64_t v7 = 0LL;
  int v8 = 0;
  unsigned int v28 = *((_DWORD *)v27 + 858);
  while (1)
  {
    int v29 = v8;
    v9 = (char *)&gVertexArrays + 120 * v7;
    uint64_t v10 = *((void *)v9 + 9);
    if (!*(void *)v9) {
      break;
    }
    v11 = (char *)&gVertexArrays + 120 * v7;
    int v14 = *((_DWORD *)v11 + 28);
    v13 = (BOOL *)(v11 + 112);
    int v12 = v14;
    if (v14 == -1)
    {
      BOOL v25 = is_extension_available((uint64_t)v27, *(const char **)v9);
      BOOL *v13 = v25;
      if (v25) {
        break;
      }
    }

    else if (v12)
    {
      break;
    }

LABEL_10:
    unint64_t v7 = (v29 + 1);
    int v8 = v29 + 1;
    if (v7 >= 7)
    {
      (*(void (**)(uint64_t, void))(v3 + 2728))(v2, *((unsigned int *)v27 + 519));
      return 0LL;
    }
  }

  v15 = (char *)&gVertexArrays + 120 * v7;
  int v17 = *((_DWORD *)v15 + 21);
  v16 = v15 + 84;
  unsigned int v18 = v28;
  if (v17 != 32888) {
    unsigned int v18 = 1;
  }
  if (!v18) {
    goto LABEL_10;
  }
  uint64_t v19 = 0LL;
  v20 = (char *)v27 + v10 + 176;
  v21 = (unsigned int *)((char *)&gVertexArrays + 120 * v7 + 92);
  uint64_t v22 = 32LL * v18;
  uint64_t v23 = 33984LL;
  while (1)
  {
    if (*v16 == 32888)
    {
      (*(void (**)(uint64_t, uint64_t))(v3 + 2728))(v2, v23);
      v20 += v19;
    }

    (*(void (**)(uint64_t, void, char *))(v3 + 832))(v2, *v21, v20 + 8);
    int v24 = (*(uint64_t (**)(uint64_t, void))(v3 + 1144))(v2, *v16);
    v20[30] = v24 != 0;
    if (v24)
    {
      if (!*((_DWORD *)v20 + 2)) {
        break;
      }
    }

    v19 += 32LL;
    uint64_t v23 = (v23 + 1);
    if (v22 == v19) {
      goto LABEL_10;
    }
  }

  (*(void (**)(uint64_t, void))(v3 + 2728))(v2, *((unsigned int *)v27 + 519));
  return 1LL;
}

  (*(void (**)(void, uint64_t, char *))(*((void *)this + 4) + 832LL))( *(void *)(*((void *)this + 3) + 16LL),  35375LL,  (char *)this + 116);
  int v12 = *((void *)this + 2);
  v13 = *(_DWORD *)(v12 + 3456);
  int v14 = *((void *)this + 4);
  if (!v13) {
    goto LABEL_11;
  }
LABEL_6:
  *((void *)this + 16) = *(void *)(v14 + 6144);
  *((void *)this + 15) = 0x34800000346LL;
  switch(v13)
  {
    case 1:
      v15 = 0;
      *((_BYTE *)this + 256) = 0;
      *((_BYTE *)this + 268) = 0;
      goto LABEL_14;
    case 2:
    case 4:
      v15 = 0;
      *((_BYTE *)this + 256) = 1;
      *((_BYTE *)this + 268) = 1;
      goto LABEL_14;
    case 3:
      v15 = 1;
      *((_BYTE *)this + 256) = 1;
      *((_BYTE *)this + 268) = 1;
      goto LABEL_14;
    default:
      break;
  }

        uint64_t v22 = *v8;
        v41 = *a2;
        v42 = v22;
        std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,GPUTools::array_iterator<GPUTools::NameTargetTuple>,BOOL({block_pointer}&)(GPUTools::NameTargetTuple const&,GPUTools::NameTargetTuple const&)>( &v42,  &v41,  a3,  (uint64_t)&v43);
        uint64_t v23 = v43;
        if (!v44) {
          goto LABEL_17;
        }
        int v24 = *v8;
        v39 = v43;
        v40 = v24;
        BOOL v25 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(GPUTools::NameTargetTuple const&,GPUTools::NameTargetTuple const&),GPUTools::array_iterator<GPUTools::NameTargetTuple>>( &v40,  &v39,  (uint64_t)a3);
        v37 = *a2;
        v38 = v23 + 1;
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(GPUTools::NameTargetTuple const&,GPUTools::NameTargetTuple const&),GPUTools::array_iterator<GPUTools::NameTargetTuple>>( &v38,  &v37,  (uint64_t)a3);
        if (!(_DWORD)result)
        {
          if (v25)
          {
            *int v8 = v23 + 1;
            goto LABEL_19;
          }

uint64_t copyout_vertex_arrays2(ContextInfo *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a1;
  v147 = (char *)a1 + 4854;
  bzero(v156, 0x3C00uLL);
  uint64_t v150 = (uint64_t)v4;
  if (*((_DWORD *)v4 + 864) != 1 && *((_DWORD *)v4 + 863))
  {
    uint64_t v10 = 0LL;
    uint64_t v135 = 0LL;
    uint64_t v11 = *((void *)v4 + 2);
    int v12 = (char *)v4 + 176;
    uint64_t v13 = *((void *)v4 + 4);
    while (1)
    {
      unsigned int v18 = &v12[32 * v10];
      (*(void (**)(uint64_t, uint64_t, uint64_t, char *))(v13 + 4128))(v11, v10, 34975LL, v18 + 8);
      NSUInteger location = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v13 + 4128))(v11, v10, 34338LL, &v155);
      int v19 = v155;
      v18[30] = v155 != 0;
      if (v19) {
        break;
      }
LABEL_6:
      unint64_t v4 = (ContextInfo *)v150;
LABEL_7:
    }

    unint64_t v4 = (ContextInfo *)v150;
    if (*((_DWORD *)v18 + 2)) {
      goto LABEL_7;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, char *))(v13 + 4136))(v11, v10, 34373LL, &v12[32 * v10]);
    int v153 = 0;
    v20 = &v12[32 * v10];
    (*(void (**)(uint64_t, uint64_t, uint64_t, char *))(v13 + 4128))(v11, v10, 34339LL, v20 + 16);
    v21 = (void (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(v13 + 4128);
    if (*((_DWORD *)v20 + 4) == 32993) {
      int v22 = 4;
    }
    else {
      int v22 = *((_DWORD *)v20 + 4);
    }
    uint64_t v23 = (unsigned int *)(v20 + 12);
    (*v21)(v11, v10, 34341LL, v23);
    int v24 = (unsigned int *)&v12[32 * v10 + 20];
    (*v21)(v11, v10, 34340LL, v24);
    (*v21)(v11, v10, 34922LL, (unsigned int *)&v154);
    v26 = &v12[32 * v10];
    v26[28] = v154 != 0;
    if (*v147) {
      (*(void (**)(uint64_t, uint64_t, uint64_t, char *))(v13 + 4128))(v11, v10, 35070LL, v26 + 24);
    }
    if (*(int *)(v150 + 3460) >= 2)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, int *))(v13 + 4128))(v11, v10, 35069LL, &v153);
      v12[32 * v10 + 29] = v153 != 0;
    }

    NSUInteger location = GPUTools::GL::dy_type_size((GPUTools::GL *)*v23, v25);
    unsigned int v27 = location * v22;
    LODWORD(v28) = *v24;
    if (*v24) {
      uint64_t v28 = v28;
    }
    else {
      uint64_t v28 = v27;
    }
    unint64_t v29 = *(unsigned int *)&v12[32 * v10 + 24];
    if ((_DWORD)v29)
    {
      if (a4 >= 1)
      {
        NSUInteger v30 = (a4 - 1) / v29 * v28 + v27;
        NSUInteger v145 = 0LL;
        NSUInteger v31 = *(void *)v18;
        if (v135) {
          goto LABEL_23;
        }
LABEL_31:
        uint64_t v15 = 0LL;
        goto LABEL_34;
      }

      NSUInteger v30 = 0LL;
      NSUInteger v145 = 0LL;
      NSUInteger v31 = *(void *)v18;
      if (!v135) {
        goto LABEL_31;
      }
    }

    else
    {
      uint64_t v36 = (a3 - 1) * v28 + v27;
      if (a3 <= 0) {
        NSUInteger v30 = 0LL;
      }
      else {
        NSUInteger v30 = v36;
      }
      NSUInteger v145 = v28 * a2;
      NSUInteger v31 = v28 * a2 + *(void *)v18;
      if (!v135) {
        goto LABEL_31;
      }
    }

LABEL_23:
    uint64_t v15 = 0LL;
    v32 = (NSUInteger *)v157;
    while (1)
    {
      NSUInteger v33 = *(v32 - 1);
      NSUInteger v34 = *v32;
      v158.NSUInteger location = v31;
      v158.length = v30;
      v162.NSUInteger location = v33;
      v162.length = *v32;
      NSRange v35 = NSIntersectionRange(v158, v162);
      NSUInteger location = v35.location;
      if (v35 != 0uLL) {
        break;
      }
      ++v15;
      v32 += 60;
      if (v135 == v15) {
        goto LABEL_4;
      }
    }

    v159.NSUInteger location = v31;
    v159.length = v30;
    v163.NSUInteger location = v33;
    v163.length = v34;
    NSRange v37 = NSUnionRange(v159, v163);
    NSUInteger location = v37.location;
    *(NSRange *)(v32 - 1) = v37;
    if (v37.location == v31) {
      v32[1] = v145;
    }
LABEL_34:
    if (v15 == v135)
    {
LABEL_4:
      int v14 = (NSUInteger *)&v156[480 * v135];
      *int v14 = v31;
      v14[1] = v30;
      v14[2] = v145;
      uint64_t v15 = v135++;
    }

    v16 = &v156[480 * v15];
    uint64_t v17 = v16[473];
    *(_DWORD *)&v16[4 * v17 + 408] = v10;
    v16[473] = v17 + 1;
    goto LABEL_6;
  }

  uint64_t v135 = 0LL;
LABEL_39:
  if (v147[4])
  {
    uint64_t v38 = *((void *)v4 + 2);
    uint64_t v39 = *((void *)v4 + 4);
    uint64_t v40 = 0LL;
    uint64_t v151 = 0LL;
    unsigned int v129 = 0;
    unsigned int v128 = *((_DWORD *)v4 + 858);
    v127 = (char *)v4 + 176;
    while (1)
    {
      v41 = (char *)&gVertexArrays + 120 * v40;
      uint64_t v42 = *((void *)v41 + 9);
      v139 = v41;
      if (!*(void *)v41) {
        break;
      }
      v43 = (char *)&gVertexArrays + 120 * v40;
      int v46 = *((_DWORD *)v43 + 28);
      v45 = (BOOL *)(v43 + 112);
      int v44 = v46;
      if (v46 == -1)
      {
        BOOL v72 = is_extension_available(v150, *(const char **)v41);
        BOOL *v45 = v72;
        if (v72) {
          break;
        }
      }

      else if (v44)
      {
        break;
      }

      *(v11 - 6) = 0;
      if ((_DWORD)v9 != *(v11 - 7))
      {
LABEL_14:
        if ((_DWORD)v9 != *(v11 - 4)) {
          goto LABEL_15;
        }
        goto LABEL_25;
      }

      *((_DWORD *)a1 + 516) = 0;
      uint64_t v11 = v9[3];
      if (!*(void *)&v11) {
        goto LABEL_3;
      }
LABEL_24:
      int v12 = (uint8x8_t)vcnt_s8(v11);
      v12.i16[0] = vaddlv_u8(v12);
      if (v12.u32[0] > 1uLL)
      {
        uint64_t v13 = v10;
        if (*(void *)&v11 <= v10) {
          uint64_t v13 = v10 % *(void *)&v11;
        }
      }

      else
      {
        uint64_t v13 = (v11.i32[0] - 1) & v10;
      }

      int v14 = *(uint64_t ***)(*(void *)&v9[2] + 8 * v13);
      if (v14)
      {
        uint64_t v7 = *v14;
        if (*v14)
        {
          if (v12.u32[0] < 2uLL)
          {
            uint64_t v15 = *(void *)&v11 - 1LL;
            while (1)
            {
              uint64_t v17 = v7[1];
              if (v17 == v10)
              {
                if (*((_DWORD *)v7 + 4) == (_DWORD)v10) {
                  goto LABEL_44;
                }
              }

              else if ((v17 & v15) != v13)
              {
                goto LABEL_3;
              }

              uint64_t v7 = (uint64_t *)*v7;
              if (!v7) {
                goto LABEL_3;
              }
            }
          }

          do
          {
            v16 = v7[1];
            if (v16 == v10)
            {
              if (*((_DWORD *)v7 + 4) == (_DWORD)v10)
              {
LABEL_44:
                std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<ShaderInfo>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<ShaderInfo>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<ShaderInfo>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<ShaderInfo>>>>::remove( &v9[2],  v7,  (uint64_t)&__p);
                unsigned int v18 = __p;
                __p = 0LL;
                if (v18) {
                  operator delete(v18);
                }
                break;
              }
            }

            else
            {
              if (v16 >= *(void *)&v11) {
                v16 %= *(void *)&v11;
              }
              if (v16 != v13) {
                break;
              }
            }

            uint64_t v7 = (uint64_t *)*v7;
          }

          while (v7);
        }
      }

  int v14 = operator new(0x18uLL);
  *int v14 = 0LL;
  v14[1] = v6;
  v14[2] = *a3;
  uint64_t v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    uint64_t v6 = v3;
  }

  else
  {
    uint64_t v17 = 1LL;
    if (v7 >= 3) {
      uint64_t v17 = (v7 & (v7 - 1)) != 0;
    }
    unsigned int v18 = v17 | (2 * v7);
    int v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      prime = v19;
    }
    else {
      prime = v18;
    }
    if (prime == 1)
    {
      prime = 2LL;
    }

    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      uint64_t v7 = *(void *)(a1 + 8);
    }

    if (prime > v7) {
      goto LABEL_36;
    }
    if (prime < v7)
    {
      v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (int v22 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        v21 = std::__next_prime(v21);
      }

      else
      {
        uint64_t v23 = 1LL << -(char)__clz(v21 - 1);
        if (v21 >= 2) {
          v21 = v23;
        }
      }

      if (prime <= v21) {
        prime = v21;
      }
      if (prime < v7) {
LABEL_36:
      }
        std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__do_rehash<true>( a1,  prime);
    }

    uint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        v6 %= v7;
      }
    }

    else
    {
      uint64_t v6 = ((_DWORD)v7 - 1) & v6;
    }
  }

  int v24 = *(void *)a1;
  unsigned int v25 = *(void **)(*(void *)a1 + 8 * v6);
  if (v25)
  {
    *int v14 = *v25;
LABEL_59:
    *unsigned int v25 = v14;
    goto LABEL_60;
  }

  *int v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v24 + 8 * v6) = a1 + 16;
  if (*v14)
  {
    v26 = *(void *)(*v14 + 8LL);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v26 >= v7) {
        v26 %= v7;
      }
    }

    else
    {
      v26 &= v7 - 1;
    }

    unsigned int v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_59;
  }

  uint64_t v13 = (void *)(a1 + 16);
  uint64_t v10 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v10 = 0LL;
  *((void *)v10 + 1) = v6;
  *((_DWORD *)v10 + 4) = *(_DWORD *)a3;
  *(_OWORD *)(v10 + 24) = *(_OWORD *)(a3 + 8);
  *(void *)(a3 + 8) = 0LL;
  *(void *)(a3 + 16) = 0LL;
  int v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  uint64_t v15 = *(float *)(a1 + 32);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    v16 = *(void *)a1;
    uint64_t v17 = *(void **)(*(void *)a1 + 8 * v3);
    if (v17)
    {
LABEL_26:
      *(void *)uint64_t v10 = *v17;
LABEL_61:
      *uint64_t v17 = v10;
      goto LABEL_62;
    }
  }

  else
  {
    unsigned int v18 = 1LL;
    if (v7 >= 3) {
      unsigned int v18 = (v7 & (v7 - 1)) != 0;
    }
    int v19 = v18 | (2 * v7);
    v20 = vcvtps_u32_f32(v14 / v15);
    if (v19 <= v20) {
      prime = v20;
    }
    else {
      prime = v19;
    }
    if (prime == 1)
    {
      prime = 2LL;
    }

    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }

    int v22 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v22) {
      goto LABEL_37;
    }
    if (prime < *(void *)&v22)
    {
      uint64_t v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v22 < 3uLL || (int v24 = (uint8x8_t)vcnt_s8(v22), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        uint64_t v23 = std::__next_prime(v23);
      }

      else
      {
        unsigned int v25 = 1LL << -(char)__clz(v23 - 1);
        if (v23 >= 2) {
          uint64_t v23 = v25;
        }
      }

      if (prime <= v23) {
        prime = v23;
      }
      if (prime < *(void *)&v22) {
LABEL_37:
      }
        std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__do_rehash<true>( a1,  prime);
    }

    uint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
      {
        uint64_t v3 = v6 % v7;
        v16 = *(void *)a1;
        uint64_t v17 = *(void **)(*(void *)a1 + 8 * (v6 % v7));
        if (v17) {
          goto LABEL_26;
        }
      }

      else
      {
        uint64_t v3 = v6;
        v16 = *(void *)a1;
        uint64_t v17 = *(void **)(*(void *)a1 + 8 * v6);
        if (v17) {
          goto LABEL_26;
        }
      }
    }

    else
    {
      uint64_t v3 = ((_DWORD)v7 - 1) & v6;
      v16 = *(void *)a1;
      uint64_t v17 = *(void **)(*(void *)a1 + 8 * v3);
      if (v17) {
        goto LABEL_26;
      }
    }
  }

  *(void *)uint64_t v10 = *v13;
  BOOL *v13 = v10;
  *(void *)(v16 + 8 * v3) = v13;
  if (*(void *)v10)
  {
    v26 = *(void *)(*(void *)v10 + 8LL);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v26 >= v7) {
        v26 %= v7;
      }
    }

    else
    {
      v26 &= v7 - 1;
    }

    uint64_t v17 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_61;
  }

  uint64_t v13 = (void *)(a1 + 16);
  uint64_t v10 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v10 = 0LL;
  *((void *)v10 + 1) = v6;
  *((_DWORD *)v10 + 4) = *(_DWORD *)a3;
  *(_OWORD *)(v10 + 24) = *(_OWORD *)(a3 + 8);
  *(void *)(a3 + 8) = 0LL;
  *(void *)(a3 + 16) = 0LL;
  int v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  uint64_t v15 = *(float *)(a1 + 32);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    v16 = *(void *)a1;
    uint64_t v17 = *(void **)(*(void *)a1 + 8 * v3);
    if (v17)
    {
LABEL_26:
      *(void *)uint64_t v10 = *v17;
LABEL_61:
      *uint64_t v17 = v10;
      goto LABEL_62;
    }
  }

  else
  {
    unsigned int v18 = 1LL;
    if (v7 >= 3) {
      unsigned int v18 = (v7 & (v7 - 1)) != 0;
    }
    int v19 = v18 | (2 * v7);
    v20 = vcvtps_u32_f32(v14 / v15);
    if (v19 <= v20) {
      prime = v20;
    }
    else {
      prime = v19;
    }
    if (prime == 1)
    {
      prime = 2LL;
    }

    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }

    int v22 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v22) {
      goto LABEL_37;
    }
    if (prime < *(void *)&v22)
    {
      uint64_t v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v22 < 3uLL || (int v24 = (uint8x8_t)vcnt_s8(v22), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        uint64_t v23 = std::__next_prime(v23);
      }

      else
      {
        unsigned int v25 = 1LL << -(char)__clz(v23 - 1);
        if (v23 >= 2) {
          uint64_t v23 = v25;
        }
      }

      if (prime <= v23) {
        prime = v23;
      }
      if (prime < *(void *)&v22) {
LABEL_37:
      }
        std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__do_rehash<true>( a1,  prime);
    }

    uint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
      {
        uint64_t v3 = v6 % v7;
        v16 = *(void *)a1;
        uint64_t v17 = *(void **)(*(void *)a1 + 8 * (v6 % v7));
        if (v17) {
          goto LABEL_26;
        }
      }

      else
      {
        uint64_t v3 = v6;
        v16 = *(void *)a1;
        uint64_t v17 = *(void **)(*(void *)a1 + 8 * v6);
        if (v17) {
          goto LABEL_26;
        }
      }
    }

    else
    {
      uint64_t v3 = ((_DWORD)v7 - 1) & v6;
      v16 = *(void *)a1;
      uint64_t v17 = *(void **)(*(void *)a1 + 8 * v3);
      if (v17) {
        goto LABEL_26;
      }
    }
  }

  *(void *)uint64_t v10 = *v13;
  BOOL *v13 = v10;
  *(void *)(v16 + 8 * v3) = v13;
  if (*(void *)v10)
  {
    v26 = *(void *)(*(void *)v10 + 8LL);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v26 >= v7) {
        v26 %= v7;
      }
    }

    else
    {
      v26 &= v7 - 1;
    }

    uint64_t v17 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_61;
  }

  uint64_t v15 = operator new(0x20uLL);
  char *v15 = 0LL;
  v15[1] = v7;
  *((_DWORD *)v15 + 4) = **a4;
  *(void *)((char *)v15 + 20) = 0LL;
  v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  uint64_t v17 = *(float *)(a1 + 32);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    uint64_t v7 = v4;
  }

  else
  {
    unsigned int v18 = 1LL;
    if (v8 >= 3) {
      unsigned int v18 = (v8 & (v8 - 1)) != 0;
    }
    int v19 = v18 | (2 * v8);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      prime = v20;
    }
    else {
      prime = v19;
    }
    if (prime == 1)
    {
      prime = 2LL;
    }

    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      uint64_t v8 = *(void *)(a1 + 8);
    }

    if (prime > v8) {
      goto LABEL_36;
    }
    if (prime < v8)
    {
      int v22 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (uint64_t v23 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
      {
        int v22 = std::__next_prime(v22);
      }

      else
      {
        int v24 = 1LL << -(char)__clz(v22 - 1);
        if (v22 >= 2) {
          int v22 = v24;
        }
      }

      if (prime <= v22) {
        prime = v22;
      }
      if (prime < v8) {
LABEL_36:
      }
        std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__do_rehash<true>( a1,  prime);
    }

    uint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        v7 %= v8;
      }
    }

    else
    {
      uint64_t v7 = ((_DWORD)v8 - 1) & v7;
    }
  }

  unsigned int v25 = *(void *)a1;
  v26 = *(void **)(*(void *)a1 + 8 * v7);
  if (v26)
  {
    char *v15 = *v26;
LABEL_59:
    char *v26 = v15;
    goto LABEL_60;
  }

  char *v15 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v15;
  *(void *)(v25 + 8 * v7) = a1 + 16;
  if (*v15)
  {
    unsigned int v27 = *(void *)(*v15 + 8LL);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v27 >= v8) {
        v27 %= v8;
      }
    }

    else
    {
      v27 &= v8 - 1;
    }

    v26 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_59;
  }

  uint64_t v15 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v15 = 0LL;
  *((void *)v15 + 1) = v7;
  *((_DWORD *)v15 + 4) = **a4;
  *((void *)v15 + 7) = 0LL;
  *(_OWORD *)(v15 + 40) = 0u;
  *(_OWORD *)(v15 + 24) = 0u;
  v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  uint64_t v17 = *(float *)(a1 + 32);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    uint64_t v7 = v4;
  }

  else
  {
    unsigned int v18 = 1LL;
    if (v8 >= 3) {
      unsigned int v18 = (v8 & (v8 - 1)) != 0;
    }
    int v19 = v18 | (2 * v8);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      prime = v20;
    }
    else {
      prime = v19;
    }
    if (prime == 1)
    {
      prime = 2LL;
    }

    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      uint64_t v8 = *(void *)(a1 + 8);
    }

    if (prime > v8) {
      goto LABEL_36;
    }
    if (prime < v8)
    {
      int v22 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (uint64_t v23 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
      {
        int v22 = std::__next_prime(v22);
      }

      else
      {
        int v24 = 1LL << -(char)__clz(v22 - 1);
        if (v22 >= 2) {
          int v22 = v24;
        }
      }

      if (prime <= v22) {
        prime = v22;
      }
      if (prime < v8) {
LABEL_36:
      }
        std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__do_rehash<true>( a1,  prime);
    }

    uint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        v7 %= v8;
      }
    }

    else
    {
      uint64_t v7 = ((_DWORD)v8 - 1) & v7;
    }
  }

  unsigned int v25 = *(void *)a1;
  v26 = *(void **)(*(void *)a1 + 8 * v7);
  if (v26)
  {
    *(void *)uint64_t v15 = *v26;
LABEL_59:
    char *v26 = v15;
    goto LABEL_60;
  }

  *(void *)uint64_t v15 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v15;
  *(void *)(v25 + 8 * v7) = a1 + 16;
  if (*(void *)v15)
  {
    unsigned int v27 = *(void *)(*(void *)v15 + 8LL);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v27 >= v8) {
        v27 %= v8;
      }
    }

    else
    {
      v27 &= v8 - 1;
    }

    v26 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_59;
  }

  uint64_t v15 = operator new(0x18uLL);
  char *v15 = 0LL;
  v15[1] = v7;
  *((_DWORD *)v15 + 4) = **a4;
  *((_DWORD *)v15 + 5) = 0;
  v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  uint64_t v17 = *(float *)(a1 + 32);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    uint64_t v7 = v4;
  }

  else
  {
    unsigned int v18 = 1LL;
    if (v8 >= 3) {
      unsigned int v18 = (v8 & (v8 - 1)) != 0;
    }
    int v19 = v18 | (2 * v8);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      prime = v20;
    }
    else {
      prime = v19;
    }
    if (prime == 1)
    {
      prime = 2LL;
    }

    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      uint64_t v8 = *(void *)(a1 + 8);
    }

    if (prime > v8) {
      goto LABEL_36;
    }
    if (prime < v8)
    {
      int v22 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (uint64_t v23 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
      {
        int v22 = std::__next_prime(v22);
      }

      else
      {
        int v24 = 1LL << -(char)__clz(v22 - 1);
        if (v22 >= 2) {
          int v22 = v24;
        }
      }

      if (prime <= v22) {
        prime = v22;
      }
      if (prime < v8) {
LABEL_36:
      }
        std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__do_rehash<true>( a1,  prime);
    }

    uint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        v7 %= v8;
      }
    }

    else
    {
      uint64_t v7 = ((_DWORD)v8 - 1) & v7;
    }
  }

  unsigned int v25 = *(void *)a1;
  v26 = *(void **)(*(void *)a1 + 8 * v7);
  if (v26)
  {
    char *v15 = *v26;
LABEL_59:
    char *v26 = v15;
    goto LABEL_60;
  }

  char *v15 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v15;
  *(void *)(v25 + 8 * v7) = a1 + 16;
  if (*v15)
  {
    unsigned int v27 = *(void *)(*v15 + 8LL);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v27 >= v8) {
        v27 %= v8;
      }
    }

    else
    {
      v27 &= v8 - 1;
    }

    v26 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_59;
  }

  uint64_t v15 = operator new(0x18uLL);
  char *v15 = 0LL;
  v15[1] = v7;
  *((_DWORD *)v15 + 4) = **a4;
  *((_BYTE *)v15 + 20) = 0;
  v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  uint64_t v17 = *(float *)(a1 + 32);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    uint64_t v7 = v4;
  }

  else
  {
    unsigned int v18 = 1LL;
    if (v8 >= 3) {
      unsigned int v18 = (v8 & (v8 - 1)) != 0;
    }
    int v19 = v18 | (2 * v8);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      prime = v20;
    }
    else {
      prime = v19;
    }
    if (prime == 1)
    {
      prime = 2LL;
    }

    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      uint64_t v8 = *(void *)(a1 + 8);
    }

    if (prime > v8) {
      goto LABEL_36;
    }
    if (prime < v8)
    {
      int v22 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (uint64_t v23 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
      {
        int v22 = std::__next_prime(v22);
      }

      else
      {
        int v24 = 1LL << -(char)__clz(v22 - 1);
        if (v22 >= 2) {
          int v22 = v24;
        }
      }

      if (prime <= v22) {
        prime = v22;
      }
      if (prime < v8) {
LABEL_36:
      }
        std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__do_rehash<true>( a1,  prime);
    }

    uint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        v7 %= v8;
      }
    }

    else
    {
      uint64_t v7 = ((_DWORD)v8 - 1) & v7;
    }
  }

  unsigned int v25 = *(void *)a1;
  v26 = *(void **)(*(void *)a1 + 8 * v7);
  if (v26)
  {
    char *v15 = *v26;
LABEL_59:
    char *v26 = v15;
    goto LABEL_60;
  }

  char *v15 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v15;
  *(void *)(v25 + 8 * v7) = a1 + 16;
  if (*v15)
  {
    unsigned int v27 = *(void *)(*v15 + 8LL);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v27 >= v8) {
        v27 %= v8;
      }
    }

    else
    {
      v27 &= v8 - 1;
    }

    v26 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_59;
  }

  v19[0] = 0;
  uint64_t v17 = pthread_self();
  result = (dispatch_queue_s *)pthread_getname_np(v17, v19, 0x100uLL);
  if (v19[0]) {
    return (dispatch_queue_s *)std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::__emplace_unique_key_args<unsigned long long,unsigned long long &,char (&)[256]>( (uint64_t)a2,  (uint64_t *)(*(void *)a3 + 8LL),  (void *)(*(void *)a3 + 8LL),  v19);
  }
  return result;
}

  std::__hash_table<std::__hash_value_type<void const*,std::string>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,std::string>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,std::string>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,std::string>>>::__construct_node_hash<void const*&,char const*&>( a1,  v9,  a3,  a4,  (uint64_t)&v29);
  v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  uint64_t v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    int v19 = 1LL;
    if (v10 >= 3) {
      int v19 = (v10 & (v10 - 1)) != 0;
    }
    v20 = v19 | (2 * v10);
    v21 = vcvtps_u32_f32(v16 / v17);
    if (v20 <= v21) {
      prime = v21;
    }
    else {
      prime = v20;
    }
    if (prime == 1)
    {
      prime = 2LL;
    }

    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }

    uint64_t v23 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v23) {
      goto LABEL_37;
    }
    if (prime < *(void *)&v23)
    {
      int v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v23 < 3uLL || (unsigned int v25 = (uint8x8_t)vcnt_s8(v23), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        int v24 = std::__next_prime(v24);
      }

      else
      {
        v26 = 1LL << -(char)__clz(v24 - 1);
        if (v24 >= 2) {
          int v24 = v26;
        }
      }

      if (prime <= v24) {
        prime = v24;
      }
      if (prime < *(void *)&v23) {
LABEL_37:
      }
        std::__hash_table<std::__hash_value_type<void const*,std::string>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,std::string>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,std::string>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,std::string>>>::__do_rehash<true>( a1,  prime);
    }

    uint64_t v10 = *(void *)(a1 + 8);
    unsigned int v27 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        unint64_t v4 = v9 % v10;
        unsigned int v18 = *(void **)(*(void *)a1 + 8 * (v9 % v10));
        if (v18) {
          goto LABEL_26;
        }
      }

      else
      {
        unint64_t v4 = v9;
        unsigned int v18 = *(void **)(*(void *)a1 + 8 * v9);
        if (v18) {
          goto LABEL_26;
        }
      }
    }

    else
    {
      unint64_t v4 = v27 & v9;
      unsigned int v18 = *(void **)(*(void *)a1 + 8 * (v27 & v9));
      if (v18) {
        goto LABEL_26;
      }
    }

  std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::__construct_node_hash<unsigned long long &,char (&)[256]>( a1,  *a2,  a3,  a4,  (uint64_t)&v26);
  uint64_t v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  int v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v16 = 1LL;
    if (v7 >= 3) {
      v16 = (v7 & (v7 - 1)) != 0;
    }
    uint64_t v17 = v16 | (2 * v7);
    unsigned int v18 = vcvtps_u32_f32(v13 / v14);
    if (v17 <= v18) {
      prime = v18;
    }
    else {
      prime = v17;
    }
    if (prime == 1)
    {
      prime = 2LL;
    }

    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }

    v20 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v20) {
      goto LABEL_37;
    }
    if (prime < *(void *)&v20)
    {
      v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v20 < 3uLL || (int v22 = (uint8x8_t)vcnt_s8(v20), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        v21 = std::__next_prime(v21);
      }

      else
      {
        uint64_t v23 = 1LL << -(char)__clz(v21 - 1);
        if (v21 >= 2) {
          v21 = v23;
        }
      }

      if (prime <= v21) {
        prime = v21;
      }
      if (prime < *(void *)&v20) {
LABEL_37:
      }
        std::__hash_table<std::__hash_value_type<void const*,std::string>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,std::string>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,std::string>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,std::string>>>::__do_rehash<true>( a1,  prime);
    }

    uint64_t v7 = *(void *)(a1 + 8);
    int v24 = v7 - 1;
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
      {
        unint64_t v4 = v6 % v7;
        uint64_t v15 = *(void **)(*(void *)a1 + 8 * (v6 % v7));
        if (v15) {
          goto LABEL_26;
        }
      }

      else
      {
        unint64_t v4 = v6;
        uint64_t v15 = *(void **)(*(void *)a1 + 8 * v6);
        if (v15) {
          goto LABEL_26;
        }
      }
    }

    else
    {
      unint64_t v4 = v24 & v6;
      uint64_t v15 = *(void **)(*(void *)a1 + 8 * (v24 & v6));
      if (v15) {
        goto LABEL_26;
      }
    }

  unsigned int v18 = operator new(0x20uLL);
  *unsigned int v18 = 0LL;
  v18[1] = v10;
  v18[2] = **a4;
  v18[3] = 0LL;
  int v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  v20 = *(float *)(a1 + 32);
  if (v11 && (float)(v20 * (float)v11) >= v19)
  {
    v21 = *(void *)a1;
    int v22 = *(void **)(*(void *)a1 + 8 * v4);
    if (v22)
    {
LABEL_26:
      *unsigned int v18 = *v22;
LABEL_61:
      *int v22 = v18;
      goto LABEL_62;
    }
  }

  else
  {
    uint64_t v23 = 1LL;
    if (v11 >= 3) {
      uint64_t v23 = (v11 & (v11 - 1)) != 0;
    }
    int v24 = v23 | (2 * v11);
    unsigned int v25 = vcvtps_u32_f32(v19 / v20);
    if (v24 <= v25) {
      prime = v25;
    }
    else {
      prime = v24;
    }
    if (prime == 1)
    {
      prime = 2LL;
    }

    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      uint64_t v11 = *(void *)(a1 + 8);
    }

    if (prime > v11) {
      goto LABEL_37;
    }
    if (prime < v11)
    {
      unsigned int v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (uint64_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        unsigned int v27 = std::__next_prime(v27);
      }

      else
      {
        unint64_t v29 = 1LL << -(char)__clz(v27 - 1);
        if (v27 >= 2) {
          unsigned int v27 = v29;
        }
      }

      if (prime <= v27) {
        prime = v27;
      }
      if (prime < v11) {
LABEL_37:
      }
        std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__do_rehash<true>( a1,  prime);
    }

    uint64_t v11 = *(void *)(a1 + 8);
    NSUInteger v30 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v4 = v10 % v11;
        v21 = *(void *)a1;
        int v22 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        if (v22) {
          goto LABEL_26;
        }
      }

      else
      {
        unint64_t v4 = v10;
        v21 = *(void *)a1;
        int v22 = *(void **)(*(void *)a1 + 8 * v10);
        if (v22) {
          goto LABEL_26;
        }
      }
    }

    else
    {
      unint64_t v4 = v30 & v10;
      v21 = *(void *)a1;
      int v22 = *(void **)(*(void *)a1 + 8 * (v30 & v10));
      if (v22) {
        goto LABEL_26;
      }
    }
  }

  *unsigned int v18 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v18;
  *(void *)(v21 + 8 * v4) = a1 + 16;
  if (*v18)
  {
    NSUInteger v31 = *(void *)(*v18 + 8LL);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v31 >= v11) {
        v31 %= v11;
      }
    }

    else
    {
      v31 &= v11 - 1;
    }

    int v22 = (void *)(*(void *)a1 + 8 * v31);
    goto LABEL_61;
  }

  int v14 = operator new(0x30uLL);
  *int v14 = 0LL;
  v14[1] = v6;
  uint64_t v15 = a3[1];
  *((_OWORD *)v14 + 1) = *a3;
  *((_OWORD *)v14 + 2) = v15;
  v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  uint64_t v17 = *(float *)(a1 + 32);
  if (v7 && (float)(v17 * (float)v7) >= v16)
  {
    uint64_t v6 = v3;
  }

  else
  {
    unsigned int v18 = 1LL;
    if (v7 >= 3) {
      unsigned int v18 = (v7 & (v7 - 1)) != 0;
    }
    int v19 = v18 | (2 * v7);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      prime = v20;
    }
    else {
      prime = v19;
    }
    if (prime == 1)
    {
      prime = 2LL;
    }

    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      uint64_t v7 = *(void *)(a1 + 8);
    }

    if (prime > v7) {
      goto LABEL_36;
    }
    if (prime < v7)
    {
      int v22 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (uint64_t v23 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
      {
        int v22 = std::__next_prime(v22);
      }

      else
      {
        int v24 = 1LL << -(char)__clz(v22 - 1);
        if (v22 >= 2) {
          int v22 = v24;
        }
      }

      if (prime <= v22) {
        prime = v22;
      }
      if (prime < v7) {
LABEL_36:
      }
        std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__do_rehash<true>( a1,  prime);
    }

    uint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        v6 %= v7;
      }
    }

    else
    {
      uint64_t v6 = ((_DWORD)v7 - 1) & v6;
    }
  }

  unsigned int v25 = *(void *)a1;
  v26 = *(void **)(*(void *)a1 + 8 * v6);
  if (v26)
  {
    *int v14 = *v26;
LABEL_59:
    char *v26 = v14;
    goto LABEL_60;
  }

  *int v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v25 + 8 * v6) = a1 + 16;
  if (*v14)
  {
    unsigned int v27 = *(void *)(*v14 + 8LL);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v27 >= v7) {
        v27 %= v7;
      }
    }

    else
    {
      v27 &= v7 - 1;
    }

    v26 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_59;
  }

  uint64_t v17 = operator new(0x18uLL);
  *uint64_t v17 = 0LL;
  v17[1] = v9;
  v17[2] = *a3;
  unsigned int v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  int v19 = *(float *)(a1 + 32);
  if (v10 && (float)(v19 * (float)v10) >= v18)
  {
    v20 = *(void *)a1;
    v21 = *(void **)(*(void *)a1 + 8 * v3);
    if (v21)
    {
LABEL_26:
      *uint64_t v17 = *v21;
LABEL_61:
      unsigned int *v21 = v17;
      goto LABEL_62;
    }
  }

  else
  {
    int v22 = 1LL;
    if (v10 >= 3) {
      int v22 = (v10 & (v10 - 1)) != 0;
    }
    uint64_t v23 = v22 | (2 * v10);
    int v24 = vcvtps_u32_f32(v18 / v19);
    if (v23 <= v24) {
      prime = v24;
    }
    else {
      prime = v23;
    }
    if (prime == 1)
    {
      prime = 2LL;
    }

    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      uint64_t v10 = *(void *)(a1 + 8);
    }

    if (prime > v10) {
      goto LABEL_37;
    }
    if (prime < v10)
    {
      v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (unsigned int v27 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }

      else
      {
        uint64_t v28 = 1LL << -(char)__clz(v26 - 1);
        if (v26 >= 2) {
          v26 = v28;
        }
      }

      if (prime <= v26) {
        prime = v26;
      }
      if (prime < v10) {
LABEL_37:
      }
        std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__do_rehash<true>( a1,  prime);
    }

    uint64_t v10 = *(void *)(a1 + 8);
    unint64_t v29 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        uint64_t v3 = v9 % v10;
        v20 = *(void *)a1;
        v21 = *(void **)(*(void *)a1 + 8 * (v9 % v10));
        if (v21) {
          goto LABEL_26;
        }
      }

      else
      {
        uint64_t v3 = v9;
        v20 = *(void *)a1;
        v21 = *(void **)(*(void *)a1 + 8 * v9);
        if (v21) {
          goto LABEL_26;
        }
      }
    }

    else
    {
      uint64_t v3 = v29 & v9;
      v20 = *(void *)a1;
      v21 = *(void **)(*(void *)a1 + 8 * (v29 & v9));
      if (v21) {
        goto LABEL_26;
      }
    }
  }

  *uint64_t v17 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v17;
  *(void *)(v20 + 8 * v3) = a1 + 16;
  if (*v17)
  {
    NSUInteger v30 = *(void *)(*v17 + 8LL);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v30 >= v10) {
        v30 %= v10;
      }
    }

    else
    {
      v30 &= v10 - 1;
    }

    v21 = (void *)(*(void *)a1 + 8 * v30);
    goto LABEL_61;
  }

LABEL_41:
      uint64_t v40 = ++v129;
      if (v129 >= 7uLL)
      {
        (*(void (**)(uint64_t, void))(v39 + 2728))(v38, *(unsigned int *)(v150 + 2076));
        NSUInteger location = (*(uint64_t (**)(uint64_t, void))(v39 + 2736))(v38, *(unsigned int *)(v150 + 2072));
        unint64_t v4 = (ContextInfo *)v150;
        v135 += v151;
        goto LABEL_88;
      }
    }

    v148 = (_DWORD *)((char *)&gVertexArrays + 120 * v40 + 84);
    if (*v148 == 32888) {
      uint64_t v47 = v128;
    }
    else {
      uint64_t v47 = 1LL;
    }
    uint64_t v146 = v47;
    if ((_DWORD)v47)
    {
      uint64_t v48 = 0LL;
      v49 = &v127[v42];
      v50 = (unsigned int *)((char *)&gVertexArrays + 120 * v40);
      v144 = v50 + 23;
      v136 = v50 + 24;
      v137 = v50 + 22;
      v130 = v50 + 26;
      v131 = (int *)(v50 + 25);
      while (1)
      {
        if (*v148 == 32888)
        {
          (*(void (**)(uint64_t, void))(v39 + 2736))(v38, (v48 + 33984));
          (*(void (**)(uint64_t, void))(v39 + 2728))(v38, (v48 + 33984));
          v49 += 32 * v48;
        }

        (*(void (**)(uint64_t, void, char *))(v39 + 832))(v38, *v144, v49 + 8);
        int v51 = (*(uint64_t (**)(uint64_t, void))(v39 + 1144))(v38, *v148);
        v49[30] = v51 != 0;
        if (v51 && !*((_DWORD *)v49 + 2))
        {
          (*(void (**)(uint64_t, void, char *))(v39 + 920))(v38, *v137, v49);
          v52 = (int *)(v49 + 16);
          if ((*v136 & 0x80000000) != 0)
          {
            int v53 = 0;
            int *v52 = *v136 & 0x7FFFFFFF;
            int v54 = *v131;
            v55 = (int *)(v49 + 12);
            if ((*v131 & 0x80000000) == 0) {
              goto LABEL_62;
            }
          }

          else
          {
            (*(void (**)(uint64_t))(v39 + 832))(v38);
            if (*v52 == 32993) {
              int v53 = 4;
            }
            else {
              int v53 = *v52;
            }
            int v54 = *v131;
            v55 = (int *)(v49 + 12);
            if ((*v131 & 0x80000000) == 0)
            {
LABEL_62:
              (*(void (**)(uint64_t))(v39 + 832))(v38);
              unsigned int v56 = *v130;
              v57 = (unsigned int *)(v49 + 20);
              if ((*v130 & 0x80000000) == 0) {
                goto LABEL_63;
              }
LABEL_66:
              unsigned int *v57 = v56 & 0x7FFFFFFF;
              goto LABEL_67;
            }
          }

          int *v55 = v54 & 0x7FFFFFFF;
          unsigned int v56 = *v130;
          v57 = (unsigned int *)(v49 + 20);
          if ((*v130 & 0x80000000) != 0) {
            goto LABEL_66;
          }
LABEL_63:
          (*(void (**)(uint64_t))(v39 + 832))(v38);
LABEL_67:
          uint64_t v58 = GPUTools::GL::dy_type_size((GPUTools::GL *)*((unsigned int *)v49 + 3), v56) * v53;
          LODWORD(v59) = *((_DWORD *)v49 + 5);
          if ((_DWORD)v59) {
            uint64_t v59 = v59;
          }
          else {
            uint64_t v59 = v58;
          }
          NSUInteger v141 = v59 * a2;
          NSUInteger v60 = v59 * a2 + *(void *)v49;
          NSUInteger v61 = v58 + (a3 - 1) * v59;
          if (a3) {
            NSUInteger v62 = v61;
          }
          else {
            NSUInteger v62 = 0LL;
          }
          if (v151)
          {
            uint64_t v63 = 0LL;
            v64 = (NSUInteger *)v157;
            while (1)
            {
              NSUInteger v65 = *(v64 - 1);
              NSUInteger v66 = *v64;
              v160.NSUInteger location = v60;
              v160.length = v62;
              v164.NSUInteger location = v65;
              v164.length = *v64;
              if (NSIntersectionRange(v160, v164) != 0uLL) {
                break;
              }
              ++v63;
              v64 += 60;
              if (v151 == v63) {
                goto LABEL_82;
              }
            }

            v161.NSUInteger location = v60;
            v161.length = v62;
            v165.NSUInteger location = v65;
            v165.length = v66;
            NSRange v67 = NSUnionRange(v161, v165);
            *(NSRange *)(v64 - 1) = v67;
            if (v67.location == v60) {
              v64[1] = v141;
            }
          }

          else
          {
            uint64_t v63 = 0LL;
          }

          if (v63 == v151)
          {
LABEL_82:
            v68 = (NSUInteger *)&v156[480 * v151];
            NSUInteger *v68 = v60;
            v68[1] = v62;
            v68[2] = v141;
            uint64_t v63 = v151++;
          }

          v69 = &v156[480 * v63];
          unsigned int v70 = v69[472];
          v71 = &v69[24 * v69[472]];
          *((void *)v71 + 3) = v139;
          *((void *)v71 + 4) = v49;
          if (*v148 == 32888) {
            *(_DWORD *)&v156[480 * v63 + 40 + 24 * v70] = v48 + 33984;
          }
          v69[472] = v70 + 1;
        }

LABEL_51:
        if (++v48 == v146) {
          goto LABEL_41;
        }
      }
    }

    goto LABEL_41;
  }

    unsigned int v18 = (_Unwind_Exception *)dy_abort("unsupported or unknown buffer target: 0x%04X", (_DWORD)a2);
    GPUTools::DYLockUtils::Unlock(v2, v19);
    _Unwind_Resume(v18);
  }

  if ((int)a2 > 35050)
  {
    if ((_DWORD)a2 == 35051)
    {
      v5 = *(unsigned int *)(result + 2040);
      if (!(_DWORD)v5) {
        return result;
      }
      goto LABEL_27;
    }

    if ((_DWORD)a2 == 35052)
    {
      v5 = *(unsigned int *)(result + 2044);
      if (!(_DWORD)v5) {
        return result;
      }
      goto LABEL_27;
    }

    goto LABEL_51;
  }

  if ((_DWORD)a2 == 34962)
  {
    v5 = *(unsigned int *)(result + 2032);
    if (!(_DWORD)v5) {
      return result;
    }
    goto LABEL_27;
  }

  if ((_DWORD)a2 != 34963) {
    goto LABEL_51;
  }
  v5 = *(unsigned int *)(result + 2036);
  if (!(_DWORD)v5) {
    return result;
  }
LABEL_27:
  uint64_t v6 = (GPUTools::DYLockUtils *)(*(void *)(result + 40) + 56LL);
  GPUTools::DYLockUtils::Lock(v6, a2);
  uint64_t v8 = *(int8x8_t **)(v4 + 40);
  uint64_t v9 = v8 + 2;
  uint64_t v10 = v8[3];
  if (!*(void *)&v10) {
    goto LABEL_47;
  }
  uint64_t v11 = (uint8x8_t)vcnt_s8(v10);
  v11.i16[0] = vaddlv_u8(v11);
  if (v11.u32[0] > 1uLL)
  {
    int v12 = v5;
    if (*(void *)&v10 <= v5) {
      int v12 = v5 % *(void *)&v10;
    }
  }

  else
  {
    int v12 = (v10.i32[0] - 1) & v5;
  }

  uint64_t v13 = *(uint64_t ***)(*(void *)v9 + 8 * v12);
  if (!v13 || (int v14 = *v13) == 0LL)
  {
LABEL_47:
    v20 = __PAIR64__(v3, v5);
    std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,unsigned int>>( (uint64_t)v9,  (unsigned int *)&v20,  &v20);
    return GPUTools::DYLockUtils::Unlock(v6, v7);
  }

  if (v11.u32[0] < 2uLL)
  {
    uint64_t v15 = *(void *)&v10 - 1LL;
    while (1)
    {
      uint64_t v17 = v14[1];
      if (v17 == v5)
      {
        if (*((_DWORD *)v14 + 4) == (_DWORD)v5) {
          goto LABEL_50;
        }
      }

      else if ((v17 & v15) != v12)
      {
        goto LABEL_47;
      }

      int v14 = (uint64_t *)*v14;
      if (!v14) {
        goto LABEL_47;
      }
    }
  }

  while (1)
  {
    v16 = v14[1];
    if (v16 == v5) {
      break;
    }
    if (v16 >= *(void *)&v10) {
      v16 %= *(void *)&v10;
    }
    if (v16 != v12) {
      goto LABEL_47;
    }
LABEL_37:
    int v14 = (uint64_t *)*v14;
    if (!v14) {
      goto LABEL_47;
    }
  }

  if (*((_DWORD *)v14 + 4) != (_DWORD)v5) {
    goto LABEL_37;
  }
LABEL_50:
  *((_DWORD *)v14 + 5) = v3;
  return GPUTools::DYLockUtils::Unlock(v6, v7);
}

        __p = v41;
        v143 = (char *)v33;
        v144 = &v40[4 * v39];
        if (v34) {
          operator delete(v34);
        }
        goto LABEL_53;
      }

      *(_DWORD *)v143 = HIDWORD(v137);
      NSUInteger v33 = (uint64_t)(v32 + 4);
LABEL_53:
      v143 = (char *)v33;
LABEL_54:
      int v51 = v138;
      if (!v138) {
        goto LABEL_77;
      }
      v52 = v143;
      if (v143 >= v144)
      {
        int v54 = (char *)__p;
        v55 = v143 - (_BYTE *)__p;
        unsigned int v56 = (v143 - (_BYTE *)__p) >> 2;
        v57 = v56 + 1;
        uint64_t v58 = v144 - (_BYTE *)__p;
        if ((v144 - (_BYTE *)__p) >> 1 > v57) {
          v57 = v58 >> 1;
        }
        else {
          uint64_t v59 = v57;
        }
        if (v59)
        {
          if (v59 >> 62) {
            goto LABEL_150;
          }
          NSUInteger v60 = (char *)operator new(4 * v59);
          NSUInteger v61 = &v60[4 * v56];
          *(_DWORD *)NSUInteger v61 = v51;
          int v53 = (uint64_t)(v61 + 4);
          if (v52 == v54) {
            goto LABEL_74;
          }
LABEL_68:
          NSUInteger v62 = v52 - 4 - v54;
          if (v62 < 0x2C) {
            goto LABEL_155;
          }
          uint64_t v63 = (v62 >> 2) + 1;
          v64 = 4 * (v63 & 0x7FFFFFFFFFFFFFF8LL);
          NSUInteger v65 = &v52[-v64];
          v61 -= v64;
          NSUInteger v66 = &v60[4 * v56 - 16];
          NSRange v67 = v52 - 16;
          v68 = v63 & 0x7FFFFFFFFFFFFFF8LL;
          do
          {
            v69 = *(_OWORD *)v67;
            *((_OWORD *)v66 - 1) = *((_OWORD *)v67 - 1);
            *(_OWORD *)NSUInteger v66 = v69;
            v66 -= 32;
            v67 -= 32;
            v68 -= 8LL;
          }

          while (v68);
          v52 = v65;
          if (v63 != (v63 & 0x7FFFFFFFFFFFFFF8LL))
          {
LABEL_155:
            do
            {
              unsigned int v70 = *((_DWORD *)v52 - 1);
              v52 -= 4;
              *((_DWORD *)v61 - 1) = v70;
              v61 -= 4;
            }

            while (v52 != v54);
          }
        }

        else
        {
          NSUInteger v60 = 0LL;
          NSUInteger v61 = (char *)(4 * v56);
          *(_DWORD *)(4 * v56) = v138;
          int v53 = 4 * v56 + 4;
          if (v52 != v54) {
            goto LABEL_68;
          }
        }

LABEL_88:
  if (*((_DWORD *)v4 + 508) && v135)
  {
    v73 = (ContextInfo *)((char *)v4 + 120);
    GPUTools::FB::Encode((uint64_t)v4 + 120, 12LL, 4LL, (uint64_t)"Ceui", v6, v7, v8, v9, *(void *)v4);
    v75 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v74) defaultFbufStream];
    v76 = (unsigned int *)((char *)v75 + 56);
    do
      unsigned int v77 = __ldaxr(v76);
    while (__stlxr(1u, v76));
    if (v77 == 1)
    {
      do
      {
        while (*v76 == 1)
          ;
        do
          unsigned int v78 = __ldaxr(v76);
        while (__stlxr(1u, v76));
      }

      while (v78 == 1);
    }

    NSUInteger location = GPUTools::FB::Stream::Write_nolock(v75, v73, **(unsigned int **)v73, 1);
    atomic_store(0, v76);
    unint64_t v4 = (ContextInfo *)v150;
  }

  if (v135)
  {
    char v140 = 0;
    uint64_t v79 = 0LL;
    v138 = (char *)v4 + 176;
    v132 = (char *)v4 + 4644;
    v152 = (ContextInfo *)((char *)v4 + 120);
    do
    {
      v81 = &v156[480 * v79];
      uint64_t v82 = *(void *)v81;
      if (*(void *)v81)
      {
        uint64_t v149 = v79;
        uint64_t v83 = *((unsigned int *)v81 + 2);
        uint64_t v84 = DYGetGLGuestAppClient(location);
        GPUTools::Interpose::DYSavePointer(v84, v83, v82, v132, 65LL, 0LL, 1LL, 0LL, 0LL);
        GPUTools::FB::Encode( (uint64_t)v152,  4294955019LL,  4LL,  (uint64_t)"CUulbuiui",  v85,  v86,  v87,  v88,  *(void *)v150);
        v90 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v89) defaultFbufStream];
        v91 = (unsigned int *)((char *)v90 + 56);
        do
          unsigned int v92 = __ldaxr(v91);
        while (__stlxr(1u, v91));
        while (v92 == 1)
        {
          while (*v91 == 1)
            ;
          do
            unsigned int v92 = __ldaxr(v91);
          while (__stlxr(1u, v91));
        }

        NSUInteger location = GPUTools::FB::Stream::Write_nolock(v90, v152, **(unsigned int **)v152, 1);
        atomic_store(0, v91);
        v93 = &v156[480 * v149];
        if (v93[473])
        {
          unint64_t v94 = 0LL;
          v95 = (unsigned __int8 *)(v93 + 473);
          do
          {
            uint64_t v96 = *(void *)v150;
            else {
              GPUTools::FB::Encode((uint64_t)v152, 4294955020LL, 4LL, (uint64_t)"Cuiieubiului", v6, v7, v8, v9, v96);
            }
            v98 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v97) defaultFbufStream];
            v99 = (unsigned int *)((char *)v98 + 56);
            do
              unsigned int v100 = __ldaxr(v99);
            while (__stlxr(1u, v99));
            while (v100 == 1)
            {
              while (*v99 == 1)
                ;
              do
                unsigned int v100 = __ldaxr(v99);
              while (__stlxr(1u, v99));
            }

            NSUInteger location = GPUTools::FB::Stream::Write_nolock(v98, v152, **(unsigned int **)v152, 1);
            atomic_store(0, v99);
            ++v94;
          }

          while (v94 < *v95);
        }

        v101 = &v156[480 * v149];
        uint64_t v80 = v150;
        if (v101[472])
        {
          unint64_t v102 = 0LL;
          v142 = (unsigned __int8 *)(v101 + 472);
          uint64_t v79 = v149;
          while (1)
          {
            v103 = &v156[480 * v79 + 24 * v102];
            v104 = (_DWORD *)*((void *)v103 + 3);
            int v105 = v104[24];
            int v106 = v104[25];
            int v107 = v104[26];
            if (v104[21] != 32888) {
              goto LABEL_131;
            }
            if ((*(_DWORD *)(v80 + 2076) != *((_DWORD *)v103 + 10)) | v140 & 1) {
              break;
            }
            char v140 = 0;
            if (v105 < 0) {
              goto LABEL_137;
            }
LABEL_134:
            if (v106 < 0 || v107 < 0)
            {
LABEL_137:
              if (v106 < 0 || v107 < 0)
              {
                if (v107 < 0)
                {
                  if (v106 < 0)
                  {
                    dy_abort("unsupported vertex array parameter configuration");
                    __break(1u);
                  }

                  GPUTools::FB::Encode( (uint64_t)v152,  4294955020LL,  4LL,  (uint64_t)"Ceului",  v6,  v7,  v8,  v9,  *(void *)v80);
                }

                else
                {
                  GPUTools::FB::Encode( (uint64_t)v152,  4294955020LL,  4LL,  (uint64_t)"Ciului",  v6,  v7,  v8,  v9,  *(void *)v80);
                }
              }

              else
              {
                GPUTools::FB::Encode( (uint64_t)v152,  4294955020LL,  4LL,  (uint64_t)"Ceiului",  v6,  v7,  v8,  v9,  *(void *)v80);
              }

              goto LABEL_144;
            }

            GPUTools::FB::Encode((uint64_t)v152, 4294955020LL, 4LL, (uint64_t)"Cieiului", v6, v7, v8, v9, *(void *)v80);
LABEL_144:
            v113 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v112) defaultFbufStream];
            v114 = (unsigned int *)((char *)v113 + 56);
            do
              unsigned int v115 = __ldaxr(v114);
            while (__stlxr(1u, v114));
            while (v115 == 1)
            {
              while (*v114 == 1)
                ;
              do
                unsigned int v115 = __ldaxr(v114);
              while (__stlxr(1u, v114));
            }

            NSUInteger location = GPUTools::FB::Stream::Write_nolock(v113, v152, **(unsigned int **)v152, 1);
            atomic_store(0, v114);
            ++v102;
            uint64_t v79 = v149;
            uint64_t v80 = v150;
            if (v102 >= *v142) {
              goto LABEL_100;
            }
          }

          GPUTools::FB::Encode((uint64_t)v152, 44LL, 4LL, (uint64_t)"Ce", v6, v7, v8, v9, *(void *)v80);
          v109 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v108) defaultFbufStream];
          v110 = (unsigned int *)((char *)v109 + 56);
          do
            unsigned int v111 = __ldaxr(v110);
          while (__stlxr(1u, v110));
          while (v111 == 1)
          {
            while (*v110 == 1)
              ;
            do
              unsigned int v111 = __ldaxr(v110);
            while (__stlxr(1u, v110));
          }

          GPUTools::FB::Stream::Write_nolock(v109, v152, **(unsigned int **)v152, 1);
          atomic_store(0, v110);
          char v140 = 1;
          uint64_t v80 = v150;
LABEL_131:
          if (v105 < 0) {
            goto LABEL_137;
          }
          goto LABEL_134;
        }

        uint64_t v79 = v149;
      }

      else
      {
        uint64_t v80 = v150;
      }

LABEL_100:
      ++v79;
    }

    while (v79 != v135);
    if ((v140 & 1) != 0)
    {
      GPUTools::FB::Encode((uint64_t)v152, 44LL, 4LL, (uint64_t)"Ce", v6, v7, v8, v9, *(void *)v80);
      v117 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v116) defaultFbufStream];
      v118 = (unsigned int *)((char *)v117 + 56);
      do
        unsigned int v119 = __ldaxr(v118);
      while (__stlxr(1u, v118));
      if (v119 == 1)
      {
        do
        {
          while (*v118 == 1)
            ;
          do
            unsigned int v120 = __ldaxr(v118);
          while (__stlxr(1u, v118));
        }

        while (v120 == 1);
      }

      GPUTools::FB::Stream::Write_nolock(v117, v152, **(unsigned int **)v152, 1);
      atomic_store(0, v118);
      uint64_t v80 = v150;
    }

    if (*(_DWORD *)(v80 + 2032))
    {
      GPUTools::FB::Encode((uint64_t)v152, 12LL, 4LL, (uint64_t)"Ceui", v6, v7, v8, v9, *(void *)v80);
      v122 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v121) defaultFbufStream];
      v123 = (unsigned int *)((char *)v122 + 56);
      do
        unsigned int v124 = __ldaxr(v123);
      while (__stlxr(1u, v123));
      if (v124 == 1)
      {
        do
        {
          while (*v123 == 1)
            ;
          do
            unsigned int v125 = __ldaxr(v123);
          while (__stlxr(1u, v123));
        }

        while (v125 == 1);
      }

      GPUTools::FB::Stream::Write_nolock(v122, v152, **(unsigned int **)v152, 1);
      atomic_store(0, v123);
    }
  }

  return v135;
}

void sub_23E0(_Unwind_Exception *a1)
{
}

void sub_23E8(_Unwind_Exception *a1)
{
}

void sub_23F0(_Unwind_Exception *a1)
{
}

void sub_23F8(_Unwind_Exception *a1)
{
}

void sub_2400(_Unwind_Exception *a1)
{
}

void sub_2408(_Unwind_Exception *a1)
{
}

void sub_2410(_Unwind_Exception *a1)
{
}

void GPUTools::FB::Encode( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  int v14 = &a9;
  GPUTools::FB::VAListArgumentProvider::VAListArgumentProvider((GPUTools::FB::VAListArgumentProvider *)v13, &a9);
  GPUTools::FB::Encode(a1, a2, a3, a4, v13);
  GPUTools::FB::VAListArgumentProvider::~VAListArgumentProvider((GPUTools::FB::VAListArgumentProvider *)v13);
}

{
  _BYTE v12[16];
  char *v13;
  uint64_t v13 = &a9;
  GPUTools::FB::VAListArgumentProvider::VAListArgumentProvider((GPUTools::FB::VAListArgumentProvider *)v12, &a9);
  GPUTools::FB::Encode(a1, a2, 0LL, a3, v12);
  GPUTools::FB::VAListArgumentProvider::~VAListArgumentProvider((GPUTools::FB::VAListArgumentProvider *)v12);
}

void sub_2488(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t determine_element_range( ContextInfo *a1, const int *a2, int a3, const void **a4, const int *a5, int a6)
{
  if (*((_DWORD *)a1 + 509))
  {
    if (*((_BYTE *)a1 + 4844))
    {
      uint64_t v12 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*((void *)a1 + 4) + 5192LL))( *((void *)a1 + 2),  34963LL,  35000LL);
      if (a3 == 5121)
      {
LABEL_62:
        if (a6 >= 1)
        {
          uint64_t v75 = 0LL;
          unsigned int v76 = 0;
          unsigned int v15 = -1;
          while (1)
          {
            unsigned int v77 = (uint8x16_t *)((char *)a4[v75] + v12);
            if (!v12) {
              unsigned int v77 = (uint8x16_t *)a4[v75];
            }
            if (a5)
            {
              unsigned int v78 = a5[v75];
              uint64_t v79 = a2[v75];
            }

            else
            {
              unsigned int v78 = 0;
              uint64_t v79 = a2[v75];
            }

            if (v79 < 8)
            {
              uint64_t v80 = 0LL;
LABEL_83:
              v110 = &v77->i8[v80];
              uint64_t v111 = v79 - v80;
              do
              {
                int v112 = *v110++;
                unsigned int v113 = v78 + v112;
                if (v78 + v112 < v15) {
                  unsigned int v15 = v113;
                }
                if (v113 > v76) {
                  unsigned int v76 = v113;
                }
                --v111;
              }

              while (v111);
              goto LABEL_64;
            }

            uint32x4_t v81 = (uint32x4_t)vdupq_n_s32(v78);
            if (v79 >= 0x10)
            {
              uint64_t v80 = v79 & 0x7FFFFFF0;
              uint32x4_t v93 = (uint32x4_t)vdupq_n_s32(v15);
              uint64_t v94 = v79 & 0xFFFFFFF0;
              v95 = v77;
              uint32x4_t v96 = v93;
              uint32x4_t v97 = v93;
              uint32x4_t v98 = (uint32x4_t)vdupq_n_s32(v76);
              uint32x4_t v99 = v93;
              uint32x4_t v100 = v98;
              uint32x4_t v101 = v98;
              uint32x4_t v102 = v98;
              do
              {
                uint8x16_t v103 = *v95++;
                uint16x8_t v104 = vmovl_high_u8(v103);
                uint16x8_t v105 = vmovl_u8(*(uint8x8_t *)v103.i8);
                uint32x4_t v106 = vaddw_u16(v81, *(uint16x4_t *)v105.i8);
                uint32x4_t v107 = vaddw_high_u16(v81, v105);
                uint32x4_t v108 = vaddw_u16(v81, *(uint16x4_t *)v104.i8);
                uint32x4_t v109 = vaddw_high_u16(v81, v104);
                uint32x4_t v99 = vminq_u32(v109, v99);
                uint32x4_t v97 = vminq_u32(v108, v97);
                uint32x4_t v96 = vminq_u32(v107, v96);
                uint32x4_t v93 = vminq_u32(v106, v93);
                uint32x4_t v102 = vmaxq_u32(v109, v102);
                uint32x4_t v101 = vmaxq_u32(v108, v101);
                uint32x4_t v100 = vmaxq_u32(v107, v100);
                uint32x4_t v98 = vmaxq_u32(v106, v98);
                v94 -= 16LL;
              }

              while (v94);
              unsigned int v76 = vmaxvq_u32(vmaxq_u32(vmaxq_u32(v98, v101), vmaxq_u32(v100, v102)));
              unsigned int v15 = vminvq_u32(vminq_u32(vminq_u32(v93, v97), vminq_u32(v96, v99)));
              if (v80 == v79) {
                goto LABEL_64;
              }
              if ((v79 & 8) == 0) {
                goto LABEL_83;
              }
            }

            else
            {
              uint64_t v80 = 0LL;
            }

            uint64_t v82 = v80;
            uint64_t v80 = v79 & 0xFFFFFFF8;
            uint32x4_t v83 = (uint32x4_t)vdupq_n_s32(v15);
            uint32x4_t v84 = (uint32x4_t)vdupq_n_s32(v76);
            uint64_t v85 = (uint8x8_t *)&v77->i8[v82];
            uint64_t v86 = v82 - v80;
            uint32x4_t v87 = v83;
            uint32x4_t v88 = v84;
            do
            {
              uint8x8_t v89 = *v85++;
              uint16x8_t v90 = vmovl_u8(v89);
              uint32x4_t v91 = vaddw_u16(v81, *(uint16x4_t *)v90.i8);
              uint32x4_t v92 = vaddw_high_u16(v81, v90);
              uint32x4_t v87 = vminq_u32(v92, v87);
              uint32x4_t v83 = vminq_u32(v91, v83);
              uint32x4_t v88 = vmaxq_u32(v92, v88);
              uint32x4_t v84 = vmaxq_u32(v91, v84);
              v86 += 8LL;
            }

            while (v86);
            unsigned int v76 = vmaxvq_u32(vmaxq_u32(v84, v88));
            unsigned int v15 = vminvq_u32(vminq_u32(v83, v87));
            if (v80 != v79) {
              goto LABEL_83;
            }
LABEL_64:
            if (++v75 == a6) {
              goto LABEL_91;
            }
          }
        }

        goto LABEL_90;
      }
    }

    else
    {
      uint64_t v73 = *((void *)a1 + 4);
      v147[0] = a1;
      v147[1] = v73;
      uint64_t BufferSize = GPUTools::GL::GetBufferSize(v147, *((unsigned int *)a1 + 864), 34963LL);
      uint64_t v12 = (*(uint64_t (**)(void, uint64_t, void, uint64_t, uint64_t))(*((void *)a1 + 4) + 6360LL))( *((void *)a1 + 2),  34963LL,  0LL,  BufferSize,  1LL);
      if (a3 == 5121) {
        goto LABEL_62;
      }
    }
  }

  else
  {
    uint64_t v12 = 0LL;
    if (a3 == 5121) {
      goto LABEL_62;
    }
  }

  if (a3 == 5123)
  {
    if (a6 < 1) {
      goto LABEL_90;
    }
    uint64_t v47 = 0LL;
    unsigned int v48 = 0;
    unsigned int v15 = -1;
    while (1)
    {
      v49 = (uint16x4_t *)((char *)a4[v47] + v12);
      if (!v12) {
        v49 = (uint16x4_t *)a4[v47];
      }
      if (a5)
      {
        unsigned int v50 = a5[v47];
        uint64_t v51 = a2[v47];
      }

      else
      {
        unsigned int v50 = 0;
        uint64_t v51 = a2[v47];
      }

      if (v51 < 0x10)
      {
        uint64_t v52 = 0LL;
LABEL_54:
        v69 = (char *)v49 + 2 * v52;
        uint64_t v70 = v51 - v52;
        do
        {
          int v71 = *(unsigned __int16 *)v69;
          v69 += 2;
          unsigned int v72 = v50 + v71;
          if (v50 + v71 < v15) {
            unsigned int v15 = v72;
          }
          if (v72 > v48) {
            unsigned int v48 = v72;
          }
          --v70;
        }

        while (v70);
        goto LABEL_42;
      }

      uint64_t v52 = v51 & 0x7FFFFFF0;
      uint32x4_t v53 = (uint32x4_t)vdupq_n_s32(v15);
      uint32x4_t v54 = (uint32x4_t)vdupq_n_s32(v48);
      v55 = v49 + 2;
      uint64_t v56 = v51 & 0xFFFFFFF0;
      uint32x4_t v57 = v53;
      uint32x4_t v58 = v53;
      uint32x4_t v59 = (uint32x4_t)vdupq_n_s32(v50);
      uint32x4_t v60 = v53;
      uint32x4_t v61 = v54;
      uint32x4_t v62 = v54;
      uint32x4_t v63 = v54;
      do
      {
        uint16x8_t v64 = *(uint16x8_t *)v55[-2].i8;
        uint32x4_t v65 = vaddw_u16(v59, *(uint16x4_t *)v64.i8);
        uint32x4_t v66 = vaddw_high_u16(v59, v64);
        uint32x4_t v67 = vaddw_u16(v59, *v55);
        uint32x4_t v68 = vaddw_high_u16(v59, *(uint16x8_t *)v55->i8);
        uint32x4_t v57 = vminq_u32(v66, v57);
        uint32x4_t v53 = vminq_u32(v65, v53);
        uint32x4_t v60 = vminq_u32(v68, v60);
        uint32x4_t v58 = vminq_u32(v67, v58);
        uint32x4_t v61 = vmaxq_u32(v66, v61);
        uint32x4_t v54 = vmaxq_u32(v65, v54);
        uint32x4_t v63 = vmaxq_u32(v68, v63);
        uint32x4_t v62 = vmaxq_u32(v67, v62);
        v55 += 4;
        v56 -= 16LL;
      }

      while (v56);
      unsigned int v48 = vmaxvq_u32(vmaxq_u32(vmaxq_u32(v54, v62), vmaxq_u32(v61, v63)));
      unsigned int v15 = vminvq_u32(vminq_u32(vminq_u32(v53, v58), vminq_u32(v57, v60)));
      if (v52 != v51) {
        goto LABEL_54;
      }
LABEL_42:
      if (++v47 == a6) {
        goto LABEL_91;
      }
    }
  }

  if (a3 != 5125)
  {
    uint64_t v146 = (__GLIContextRec **)dy_abort("unknown element indices type: 0x%04X", a3);
    return apocalypse_now(v146);
  }

  if (a6 >= 1)
  {
    uint64_t v13 = 0LL;
    unsigned int v14 = 0;
    unsigned int v15 = -1;
    if (v12)
    {
      if (!a5)
      {
        while (1)
        {
          uint64_t v33 = a2[v13];
          if ((int)v33 >= 1)
          {
            NSUInteger v34 = (uint32x4_t *)((char *)a4[v13] + v12);
            if (v33 < 8)
            {
              uint64_t v35 = 0LL;
LABEL_33:
              v43 = &v34->i8[4 * v35];
              uint64_t v44 = v33 - v35;
              do
              {
                unsigned int v46 = *(_DWORD *)v43;
                v43 += 4;
                unsigned int v45 = v46;
                if (v46 < v15) {
                  unsigned int v15 = v45;
                }
                if (v45 > v14) {
                  unsigned int v14 = v45;
                }
                --v44;
              }

              while (v44);
              goto LABEL_26;
            }

            uint64_t v35 = v33 & 0x7FFFFFF8;
            uint32x4_t v36 = (uint32x4_t)vdupq_n_s32(v15);
            uint32x4_t v37 = (uint32x4_t)vdupq_n_s32(v14);
            uint64_t v38 = v34 + 1;
            uint64_t v39 = v33 & 0xFFFFFFF8;
            uint32x4_t v40 = v36;
            uint32x4_t v41 = v37;
            do
            {
              uint32x4_t v42 = v38[-1];
              uint32x4_t v36 = vminq_u32(v42, v36);
              uint32x4_t v40 = vminq_u32(*v38, v40);
              uint32x4_t v37 = vmaxq_u32(v42, v37);
              uint32x4_t v41 = vmaxq_u32(*v38, v41);
              v38 += 2;
              v39 -= 8LL;
            }

            while (v39);
            unsigned int v14 = vmaxvq_u32(vmaxq_u32(v37, v41));
            unsigned int v15 = vminvq_u32(vminq_u32(v36, v40));
            if (v35 != v33) {
              goto LABEL_33;
            }
          }

LABEL_26:
          if (++v13 == a6) {
            goto LABEL_91;
          }
        }
      }

      while (1)
      {
        uint64_t v16 = a2[v13];
        if ((int)v16 >= 1)
        {
          uint64_t v17 = (int32x4_t *)((char *)a4[v13] + v12);
          unsigned int v18 = a5[v13];
          if (v16 < 8)
          {
            uint64_t v19 = 0LL;
LABEL_19:
            unint64_t v29 = &v17->i8[4 * v19];
            uint64_t v30 = v16 - v19;
            do
            {
              int v31 = *(_DWORD *)v29;
              v29 += 4;
              unsigned int v32 = v31 + v18;
              if (v31 + v18 < v15) {
                unsigned int v15 = v32;
              }
              if (v32 > v14) {
                unsigned int v14 = v32;
              }
              --v30;
            }

            while (v30);
            goto LABEL_12;
          }

          uint64_t v19 = v16 & 0x7FFFFFF8;
          uint32x4_t v20 = (uint32x4_t)vdupq_n_s32(v15);
          uint32x4_t v21 = (uint32x4_t)vdupq_n_s32(v14);
          int32x4_t v22 = vdupq_n_s32(v18);
          uint64_t v23 = v17 + 1;
          uint64_t v24 = v16 & 0xFFFFFFF8;
          uint32x4_t v25 = v20;
          uint32x4_t v26 = v21;
          do
          {
            uint32x4_t v27 = (uint32x4_t)vaddq_s32(v23[-1], v22);
            uint32x4_t v28 = (uint32x4_t)vaddq_s32(*v23, v22);
            uint32x4_t v20 = vminq_u32(v27, v20);
            uint32x4_t v25 = vminq_u32(v28, v25);
            uint32x4_t v21 = vmaxq_u32(v27, v21);
            uint32x4_t v26 = vmaxq_u32(v28, v26);
            v23 += 2;
            v24 -= 8LL;
          }

          while (v24);
          unsigned int v14 = vmaxvq_u32(vmaxq_u32(v21, v26));
          unsigned int v15 = vminvq_u32(vminq_u32(v20, v25));
          if (v19 != v16) {
            goto LABEL_19;
          }
        }

      *(v11 - 3) = 0;
      if ((_DWORD)v9 != *(v11 - 2))
      {
LABEL_17:
        if ((_DWORD)v9 != *(v11 - 1)) {
          goto LABEL_18;
        }
        goto LABEL_28;
      }

        ((void (*)(int8x8_t *, void, uint64_t, int *))a1[4][657])( a1[2],  *(unsigned int *)(v43 + 4 * i),  35663LL,  &v41);
        uint32x4_t v21 = *((void *)v8 + 3);
        if (v41 == 36313)
        {
          v21 += 48LL;
        }

        else if (v41 != 35633)
        {
          if (v41 != 35632)
          {
            result = (id)dy_abort("unknown shader type: 0x%04x", v41);
            __break(1u);
            return result;
          }

          v21 += 24LL;
        }

        ProgramShaderInfo::ProgramShaderInfo((ProgramShaderInfo *)&v37, v12, (const ShaderInfo *)v17[3]);
        int32x4_t v22 = *(void *)(v21 + 8);
        if (v22 >= *(void *)(v21 + 16))
        {
          uint64_t v24 = std::vector<ProgramShaderInfo>::__push_back_slow_path<ProgramShaderInfo>((char **)v21, (uint64_t)&v37);
          uint32x4_t v25 = (std::__shared_weak_count *)*((void *)&v40 + 1);
          *(void *)(v21 + 8) = v24;
          if (!v25) {
            goto LABEL_38;
          }
          p_shared_owners = (unint64_t *)&v25->__shared_owners_;
          do
            uint32x4_t v27 = __ldaxr(p_shared_owners);
          while (__stlxr(v27 - 1, p_shared_owners));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
            uint64_t v23 = (std::__shared_weak_count *)*((void *)&v39 + 1);
            if (*((void *)&v39 + 1))
            {
LABEL_39:
              uint32x4_t v28 = (unint64_t *)&v23->__shared_owners_;
              do
                unint64_t v29 = __ldaxr(v28);
              while (__stlxr(v29 - 1, v28));
              if (!v29)
              {
                ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
                std::__shared_weak_count::__release_weak(v23);
              }
            }
          }

          else
          {
LABEL_38:
            uint64_t v23 = (std::__shared_weak_count *)*((void *)&v39 + 1);
            if (*((void *)&v39 + 1)) {
              goto LABEL_39;
            }
          }
        }

        else
        {
          *(_DWORD *)int32x4_t v22 = v37;
          *(_OWORD *)(v22 + 8) = v38;
          uint64_t v38 = 0uLL;
          *(_OWORD *)(v22 + 24) = v39;
          uint64_t v39 = 0uLL;
          *(_OWORD *)(v22 + 40) = v40;
          uint32x4_t v40 = 0uLL;
          *(void *)(v21 + 8) = v22 + 56;
          uint64_t v23 = (std::__shared_weak_count *)*((void *)&v39 + 1);
          if (*((void *)&v39 + 1)) {
            goto LABEL_39;
          }
        }

        uint64_t v30 = (std::__shared_weak_count *)*((void *)&v38 + 1);
        if (*((void *)&v38 + 1))
        {
          int v31 = (unint64_t *)(*((void *)&v38 + 1) + 8LL);
          do
            unsigned int v32 = __ldaxr(v31);
          while (__stlxr(v32 - 1, v31));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
      }
    }

    if (*((_BYTE *)a1 + 4846))
    {
      ((void (*)(int8x8_t *, void, uint64_t, int *))a1[4][658])(a1[2], v35, 33368LL, &v37);
      *(void *)(*((void *)v8 + 3) + 136LL) = *(void *)(*((void *)v8 + 3) + 136LL) & 0xFFFFFFFFFFFFFFFELL | (v37 != 0);
    }

    if (*((_DWORD *)a1 + 864) == 4)
    {
      ((void (*)(int8x8_t *, void, uint64_t, int *))a1[4][658])(a1[2], v35, 33367LL, &v37);
      *(void *)(*((void *)v8 + 3) + 136LL) = *(void *)(*((void *)v8 + 3) + 136LL) & 0xFFFFFFFFFFFFFFFDLL | (2LL * (v37 != 0));
    }

    if (a3)
    {
      ProgramPipelineInfo::operator=((uint64_t *)(*((void *)v8 + 3) + 144LL), *((uint64_t **)v8 + 3));
      uint64_t v33 = *((void *)v8 + 3);
      *(_BYTE *)(v33 + 376) = 0;
      ProgramXfb::clear((ProgramXfb *)(v33 + 288));
    }

    else if (gCheckGLErrors)
    {
      handle_link_program_failure((uint64_t)a1, v35, 0);
    }

    ObjectNameArray::~ObjectNameArray((ObjectNameArray *)v42);
    return (id)GPUTools::DYLockUtils::Unlock(v36, v34);
  }

  return result;
}

  uint64_t v24 = objc_msgSend(objc_msgSend((id)DYGetGLGuestAppClient(v19), "activeCaptureDescriptor"), "includeBacktraceInFbufs");
  if ((_DWORD)v24) {
    uint64_t v24 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v43, v25);
  }
  uint32x4_t v27 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v7 + 3404);
  if ((_DWORD)v27) {
    uint64_t v24 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v43, v27, v26);
  }
  if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v24), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
    encode_driver_events((id *)v7, (uint64_t)v43);
  }
  uint32x4_t v28 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v7 + 3480),  (GPUTools::FB::Fbuf *)(v7 + 3520),  (GPUTools::FB *)v43);
  unint64_t v29 = *(unsigned int *)(v7 + 3404);
  if ((_DWORD)v29 && gBreakOnError)
  {
    uint64_t v39 = 3LL;
    uint32x4_t v40 = 0xFFFFFFFFLL;
  }

  else
  {
    if ((v18 & 2) == 0) {
      goto LABEL_35;
    }
    uint64_t v39 = 2LL;
    uint32x4_t v40 = 898LL;
  }

  breakpoint_break((uint64_t)v43, (volatile int *)v40, v39, v29, v7);
LABEL_35:
  uint64_t v30 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v28) defaultFbufStream];
  int v31 = (unsigned int *)((char *)v30 + 56);
  do
    unsigned int v32 = __ldaxr(v31);
  while (__stlxr(1u, v31));
  if (v32 == 1)
  {
    do
    {
      while (*v31 == 1)
        ;
      do
        uint64_t v33 = __ldaxr(v31);
      while (__stlxr(1u, v31));
    }

    while (v33 == 1);
  }

  GPUTools::FB::Stream::Write_nolock(v30, (GPUTools::FB::Fbuf *)v43, *(unsigned int *)v43[0], 1);
  atomic_store(0, v31);
  wrapper_pop_group_marker(v7);
  do
  {
    NSUInteger v34 = __ldaxr(v8);
    uint64_t v35 = v34 - 1;
  }

  while (__stlxr(v35, v8));
  if (gCheckGLErrors) {
    uint32x4_t v36 = v35 < 1;
  }
  else {
    uint32x4_t v36 = 1;
  }
  if (!v36) {
    handle_opengl_thread_conflict((const void **)v7);
  }
LABEL_48:
  if (v43[0]) {
    free(v43[0]);
  }
}

  uint64_t v24 = objc_msgSend(objc_msgSend((id)DYGetGLGuestAppClient(v19), "activeCaptureDescriptor"), "includeBacktraceInFbufs");
  if ((_DWORD)v24) {
    uint64_t v24 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v43, v25);
  }
  uint32x4_t v27 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v7 + 3404);
  if ((_DWORD)v27) {
    uint64_t v24 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v43, v27, v26);
  }
  if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v24), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
    encode_driver_events((id *)v7, (uint64_t)v43);
  }
  uint32x4_t v28 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v7 + 3480),  (GPUTools::FB::Fbuf *)(v7 + 3520),  (GPUTools::FB *)v43);
  unint64_t v29 = *(unsigned int *)(v7 + 3404);
  if ((_DWORD)v29 && gBreakOnError)
  {
    uint64_t v39 = 3LL;
    uint32x4_t v40 = 0xFFFFFFFFLL;
  }

  else
  {
    if ((v18 & 2) == 0) {
      goto LABEL_35;
    }
    uint64_t v39 = 2LL;
    uint32x4_t v40 = 898LL;
  }

  breakpoint_break((uint64_t)v43, (volatile int *)v40, v39, v29, v7);
LABEL_35:
  uint64_t v30 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v28) defaultFbufStream];
  int v31 = (unsigned int *)((char *)v30 + 56);
  do
    unsigned int v32 = __ldaxr(v31);
  while (__stlxr(1u, v31));
  if (v32 == 1)
  {
    do
    {
      while (*v31 == 1)
        ;
      do
        uint64_t v33 = __ldaxr(v31);
      while (__stlxr(1u, v31));
    }

    while (v33 == 1);
  }

  GPUTools::FB::Stream::Write_nolock(v30, (GPUTools::FB::Fbuf *)v43, *(unsigned int *)v43[0], 1);
  atomic_store(0, v31);
  wrapper_pop_group_marker(v7);
  do
  {
    NSUInteger v34 = __ldaxr(v8);
    uint64_t v35 = v34 - 1;
  }

  while (__stlxr(v35, v8));
  if (gCheckGLErrors) {
    uint32x4_t v36 = v35 < 1;
  }
  else {
    uint32x4_t v36 = 1;
  }
  if (!v36) {
    handle_opengl_thread_conflict((const void **)v7);
  }
LABEL_48:
  if (v43[0]) {
    free(v43[0]);
  }
}

LABEL_12:
        if (++v13 == a6) {
          goto LABEL_91;
        }
      }
    }

    if (!a5)
    {
      while (1)
      {
        uint64_t v132 = a2[v13];
        if ((int)v132 >= 1)
        {
          v133 = (uint32x4_t *)a4[v13];
          if (v132 < 8)
          {
            uint64_t v134 = 0LL;
LABEL_117:
            v142 = (unsigned int *)v133 + v134;
            uint64_t v143 = v132 - v134;
            do
            {
              unsigned int v145 = *v142++;
              unsigned int v144 = v145;
              if (v145 < v15) {
                unsigned int v15 = v144;
              }
              if (v144 > v14) {
                unsigned int v14 = v144;
              }
              --v143;
            }

            while (v143);
            goto LABEL_110;
          }

          uint64_t v134 = v132 & 0x7FFFFFF8;
          uint32x4_t v135 = (uint32x4_t)vdupq_n_s32(v15);
          uint32x4_t v136 = (uint32x4_t)vdupq_n_s32(v14);
          v137 = v133 + 1;
          uint64_t v138 = v132 & 0xFFFFFFF8;
          uint32x4_t v139 = v135;
          uint32x4_t v140 = v136;
          do
          {
            uint32x4_t v141 = v137[-1];
            uint32x4_t v135 = vminq_u32(v141, v135);
            uint32x4_t v139 = vminq_u32(*v137, v139);
            uint32x4_t v136 = vmaxq_u32(v141, v136);
            uint32x4_t v140 = vmaxq_u32(*v137, v140);
            v137 += 2;
            v138 -= 8LL;
          }

          while (v138);
          unsigned int v14 = vmaxvq_u32(vmaxq_u32(v136, v140));
          unsigned int v15 = vminvq_u32(vminq_u32(v135, v139));
          if (v134 != v132) {
            goto LABEL_117;
          }
        }

LABEL_110:
        if (++v13 == a6) {
          goto LABEL_91;
        }
      }
    }

    while (1)
    {
      uint64_t v115 = a2[v13];
      if ((int)v115 >= 1)
      {
        uint64_t v116 = (int32x4_t *)a4[v13];
        unsigned int v117 = a5[v13];
        if (v115 < 8)
        {
          uint64_t v118 = 0LL;
LABEL_103:
          unsigned int v128 = &v116->i32[v118];
          uint64_t v129 = v115 - v118;
          do
          {
            int v130 = *v128++;
            unsigned int v131 = v130 + v117;
            if (v130 + v117 < v15) {
              unsigned int v15 = v131;
            }
            if (v131 > v14) {
              unsigned int v14 = v131;
            }
            --v129;
          }

          while (v129);
          goto LABEL_96;
        }

        uint64_t v118 = v115 & 0x7FFFFFF8;
        uint32x4_t v119 = (uint32x4_t)vdupq_n_s32(v15);
        uint32x4_t v120 = (uint32x4_t)vdupq_n_s32(v14);
        int32x4_t v121 = vdupq_n_s32(v117);
        v122 = v116 + 1;
        uint64_t v123 = v115 & 0xFFFFFFF8;
        uint32x4_t v124 = v119;
        uint32x4_t v125 = v120;
        do
        {
          uint32x4_t v126 = (uint32x4_t)vaddq_s32(v122[-1], v121);
          uint32x4_t v127 = (uint32x4_t)vaddq_s32(*v122, v121);
          uint32x4_t v119 = vminq_u32(v126, v119);
          uint32x4_t v124 = vminq_u32(v127, v124);
          uint32x4_t v120 = vmaxq_u32(v126, v120);
          uint32x4_t v125 = vmaxq_u32(v127, v125);
          v122 += 2;
          v123 -= 8LL;
        }

        while (v123);
        unsigned int v14 = vmaxvq_u32(vmaxq_u32(v120, v125));
        unsigned int v15 = vminvq_u32(vminq_u32(v119, v124));
        if (v118 != v115) {
          goto LABEL_103;
        }
      }

LABEL_96:
      if (++v13 == a6) {
        goto LABEL_91;
      }
    }
  }

LABEL_90:
  unsigned int v15 = -1;
LABEL_91:
  if (*((_DWORD *)a1 + 509)) {
    (*(void (**)(void, uint64_t))(*((void *)a1 + 4) + 5200LL))(*((void *)a1 + 2), 34963LL);
  }
  return v15;
}

void apocalypse_now(__GLIContextRec **a1)
{
  stru_20.segname[2] = 42;
}

const char *GetStringToEncode(int a1, const char *a2)
{
  uint64_t v2 = a2;
  if (a1 < 1 || !a2) {
    return v2;
  }
  int v4 = a1 + 1;
  v5 = (char *)malloc((a1 + 1));
  if (v5)
  {
    uint64_t v6 = v5;
    strlcpy(v5, v2, a1);
    v6[a1] = 0;
    return v6;
  }

  uint64_t v8 = (char *)dy_abort("GetStringToEncode: Unable to allocate %d bytes", v4);
  return (const char *)ReleaseStringToEncode(v8, v9);
}

void ReleaseStringToEncode(void *a1, const char *a2)
{
  if (a1 != a2) {
    free(a1);
  }
}

char *wrapper_handle_marker_event(ContextInfo *a1, unsigned int *a2, char *__s1)
{
  if ((_DWORD)a2) {
    size_t v6 = (int)a2;
  }
  else {
    size_t v6 = strlen(__s1);
  }
  if (!strncmp(__s1, GPUTools::Interpose::kEventMarkerDebugFrame, v6))
  {
    uint64_t v9 = (unsigned int *)((char *)a1 + 4640);
    do
      unsigned int v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    uint64_t v11 = objc_alloc_init(&OBJC_CLASS___DYGLESCaptureDescriptor);
    [(id)DYGetGLGuestAppClient(v11) startCaptureWithDescriptor:v11];

    do
      unsigned int v12 = __ldaxr(v9);
    while (__stlxr(v12 + 1, v9));
    return (_BYTE *)(&dword_0 + 1);
  }

  if (!strncmp(__s1, kEventMarkerAnalyzeFrame[0], v6))
  {
    breakpoint_break(0LL, (volatile int *)0xFFFFFFFFLL, 5LL, 0LL, (uint64_t)a1);
    return (_BYTE *)(&dword_0 + 1);
  }

  uint64_t v7 = strnstr(__s1, kEventMarkerDrawableCreate, v6);
  if (v7 || (uint64_t v7 = strnstr(__s1, kEventMarkerContextCreate[0], v6)) != 0LL)
  {
    uint64_t v8 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v7) startup0Stream];
    EncodeMarkerOnStream(a1, v8, a2, __s1);
    return (_BYTE *)(&dword_0 + 1);
  }

  result = strnstr(__s1, kEventMarkerFrameBoundaryEnd[0], v6);
  if (result)
  {
    id v14 = [(id)DYGetGLGuestAppClient(result) traceMode];
    if ((int)v14 >= 4)
    {
      unsigned int v15 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v14) defaultFbufStream];
      EncodeMarkerOnStream(a1, v15, a2, __s1);
    }

    uint64_t v16 = (unsigned int *)((char *)a1 + 4640);
    do
      unsigned int v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    handle_frame_boundary((uint64_t)a1);
    do
      unsigned int v18 = __ldaxr(v16);
    while (__stlxr(v18 + 1, v16));
    return (_BYTE *)(&dword_0 + 1);
  }

  return result;
}

void EncodeMarkerOnStream(ContextInfo *a1, GPUTools::FB::Stream *a2, unsigned int *a3, char *a4)
{
  uint64_t v8 = a4;
  if ((int)a3 >= 1)
  {
    uint64_t v8 = a4;
    if (a4)
    {
      uint64_t v9 = (char *)malloc(((_DWORD)a3 + 1));
      if (!v9)
      {
        int32x4_t v22 = (_Unwind_Exception *)dy_abort("GetStringToEncode: Unable to allocate %d bytes", (int)a3 + 1);
        atomic_store(0, a3);
        _Unwind_Resume(v22);
      }

      uint64_t v8 = v9;
      strlcpy(v9, a4, a3);
      v8[a3] = 0;
    }
  }

  unsigned int v10 = (char *)a1 + 4709;
  uint64_t v11 = 83LL;
  if (!v8) {
    uint64_t v11 = 116LL;
  }
  snprintf((char *)a1 + 4709, 0x40uLL, "Ci%c", v11);
  uint64_t v13 = *(void *)a1;
  unsigned int v12 = (ContextInfo *)((char *)a1 + 120);
  GPUTools::FB::Encode((uint64_t)v12, 895LL, 2LL, (uint64_t)v10, v14, v15, v16, v17, v13);
  uint64_t v18 = mach_absolute_time();
  if (g_DYTimebaseInfo != *((_DWORD *)&g_DYTimebaseInfo + 1)) {
    uint64_t v18 = __udivti3(g_DYTimebaseInfo * v18, (g_DYTimebaseInfo * (unsigned __int128)v18) >> 64);
  }
  *(void *)(*(void *)v12 + 16LL) = v18;
  *(void *)(*(void *)v12 + 24LL) = 0LL;
  uint64_t v19 = (unsigned int *)((char *)a2 + 56);
  do
    unsigned int v20 = __ldaxr(v19);
  while (__stlxr(1u, v19));
  if (v20 == 1)
  {
    do
    {
      while (*v19 == 1)
        ;
      do
        unsigned int v21 = __ldaxr(v19);
      while (__stlxr(1u, v19));
    }

    while (v21 == 1);
  }

  GPUTools::FB::Stream::Write_nolock(a2, v12, **(unsigned int **)v12, 1);
  atomic_store(0, v19);
  if (v8 != a4) {
    free(v8);
  }
}

uint64_t wrapper_cache_texture_binding(uint64_t result, int a2, int a3)
{
  unsigned int v3 = *(_DWORD *)(result + 2072) - 33984;
  if (v3 <= 0x1F)
  {
    if (a2 > 35863)
    {
      if (a2 <= 35881)
      {
        if (a2 == 35864)
        {
          *(_DWORD *)(result + 40LL * v3 + 2100) = a3;
          return result;
        }

        if (a2 == 35866)
        {
          *(_DWORD *)(result + 40LL * v3 + 2104) = a3;
          return result;
        }
      }

      else
      {
        switch(a2)
        {
          case 35882:
            *(_DWORD *)(result + 40LL * v3 + 2116) = a3;
            return result;
          case 37120:
            *(_DWORD *)(result + 40LL * v3 + 2108) = a3;
            return result;
          case 37122:
            *(_DWORD *)(result + 40LL * v3 + 2112) = a3;
            return result;
        }
      }
    }

    else if (a2 <= 32878)
    {
      if (a2 == 3552)
      {
        *(_DWORD *)(result + 40LL * v3 + 2080) = a3;
        return result;
      }

      if (a2 == 3553)
      {
        *(_DWORD *)(result + 40LL * v3 + 2084) = a3;
        return result;
      }
    }

    else
    {
      switch(a2)
      {
        case 32879:
          *(_DWORD *)(result + 40LL * v3 + 2092) = a3;
          return result;
        case 34037:
          *(_DWORD *)(result + 40LL * v3 + 2088) = a3;
          return result;
        case 34067:
          *(_DWORD *)(result + 40LL * v3 + 2096) = a3;
          return result;
      }
    }

    int v4 = (ContextInfo *)dy_abort("unknown texture target 0x%04X", a2);
    return wrapper_cache_texture_binding(v4, v5, v6, v7);
  }

  return result;
}

uint64_t wrapper_cache_texture_binding(uint64_t result, unsigned int a2, int a3, int a4)
{
  if (a3 > 35863)
  {
    if (a3 <= 35881)
    {
      if (a3 == 35864)
      {
        *(_DWORD *)(result + 40LL * a2 + 2100) = a4;
        return result;
      }

      if (a3 == 35866)
      {
        *(_DWORD *)(result + 40LL * a2 + 2104) = a4;
        return result;
      }
    }

    else
    {
      switch(a3)
      {
        case 35882:
          *(_DWORD *)(result + 40LL * a2 + 2116) = a4;
          return result;
        case 37120:
          *(_DWORD *)(result + 40LL * a2 + 2108) = a4;
          return result;
        case 37122:
          *(_DWORD *)(result + 40LL * a2 + 2112) = a4;
          return result;
      }
    }
  }

  else if (a3 <= 32878)
  {
    if (a3 == 3552)
    {
      *(_DWORD *)(result + 40LL * a2 + 2080) = a4;
      return result;
    }

    if (a3 == 3553)
    {
      *(_DWORD *)(result + 40LL * a2 + 2084) = a4;
      return result;
    }
  }

  else
  {
    switch(a3)
    {
      case 32879:
        *(_DWORD *)(result + 40LL * a2 + 2092) = a4;
        return result;
      case 34037:
        *(_DWORD *)(result + 40LL * a2 + 2088) = a4;
        return result;
      case 34067:
        *(_DWORD *)(result + 40LL * a2 + 2096) = a4;
        return result;
    }
  }

  int v4 = (ContextInfo *)dy_abort("unknown texture target 0x%04X", a3);
  return wrapper_cache_get_bound_texture(v4, v5, v6);
}

uint64_t wrapper_cache_get_bound_texture(ContextInfo *a1, unsigned int a2, int a3)
{
  if (a3 > 35863)
  {
    if (a3 <= 35881)
    {
      if (a3 == 35864) {
        return *((unsigned int *)a1 + 10 * a2 + 525);
      }
      if (a3 == 35866) {
        return *((unsigned int *)a1 + 10 * a2 + 526);
      }
    }

    else
    {
      switch(a3)
      {
        case 35882:
          return *((unsigned int *)a1 + 10 * a2 + 529);
        case 37120:
          return *((unsigned int *)a1 + 10 * a2 + 527);
        case 37122:
          return *((unsigned int *)a1 + 10 * a2 + 528);
      }
    }
  }

  else if (a3 <= 32878)
  {
    if (a3 == 3552) {
      return *((unsigned int *)a1 + 10 * a2 + 520);
    }
    if (a3 == 3553) {
      return *((unsigned int *)a1 + 10 * a2 + 521);
    }
  }

  else
  {
    switch(a3)
    {
      case 32879:
        return *((unsigned int *)a1 + 10 * a2 + 523);
      case 34037:
        return *((unsigned int *)a1 + 10 * a2 + 522);
      case 34067:
        return *((unsigned int *)a1 + 10 * a2 + 524);
    }
  }

  int v4 = (ContextInfo *)dy_abort("unknown texture target 0x%04X", a3);
  return wrapper_cache_texture_binding_delete(v4, v5, v6);
}

uint64_t wrapper_cache_texture_binding_delete(ContextInfo *a1, volatile int *a2, const unsigned int *a3)
{
  int v4 = (int)a2;
  unsigned int v6 = (GPUTools::DYLockUtils *)(*((void *)a1 + 5) + 368LL);
  GPUTools::DYLockUtils::Lock(v6, a2);
  if (v4 >= 1)
  {
    uint64_t v8 = 0LL;
    while (1)
    {
      unint64_t v9 = a3[v8];
      uint64_t v10 = *((unsigned int *)a1 + 861);
      uint64_t v11 = (_DWORD *)((char *)a1 + 2116);
      if ((_DWORD)v10) {
        break;
      }
LABEL_5:
      unsigned int v12 = (int8x8_t *)*((void *)a1 + 5);
      int8x8_t v13 = v12[39];
      if (v13)
      {
        uint8x8_t v14 = (uint8x8_t)vcnt_s8(v13);
        v14.i16[0] = vaddlv_u8(v14);
        if (v14.u32[0] > 1uLL)
        {
          unint64_t v15 = v9;
          if (*(void *)&v13 <= v9) {
            unint64_t v15 = v9 % *(void *)&v13;
          }
        }

        else
        {
          unint64_t v15 = (v13.i32[0] - 1) & v9;
        }

        uint64_t v16 = v12 + 38;
        uint64_t v17 = *(uint64_t ***)(*(void *)&v12[38] + 8 * v15);
        if (v17)
        {
          unsigned int v7 = *v17;
          if (*v17)
          {
            if (v14.u32[0] < 2uLL)
            {
              uint64_t v18 = *(void *)&v13 - 1LL;
              while (1)
              {
                uint64_t v20 = v7[1];
                if (v20 == v9)
                {
                  if (*((_DWORD *)v7 + 4) == (_DWORD)v9) {
                    goto LABEL_48;
                  }
                }

                else if ((v20 & v18) != v15)
                {
                  goto LABEL_3;
                }

                unsigned int v7 = (uint64_t *)*v7;
                if (!v7) {
                  goto LABEL_3;
                }
              }
            }

            do
            {
              unint64_t v19 = v7[1];
              if (v19 == v9)
              {
                if (*((_DWORD *)v7 + 4) == (_DWORD)v9)
                {
LABEL_48:
                  std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<ShaderInfo>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<ShaderInfo>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<ShaderInfo>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<ShaderInfo>>>>::remove( v16,  v7,  (uint64_t)&__p);
                  unsigned int v21 = __p;
                  __p = 0LL;
                  if (v21) {
                    operator delete(v21);
                  }
                  break;
                }
              }

              else
              {
                if (v19 >= *(void *)&v13) {
                  v19 %= *(void *)&v13;
                }
                if (v19 != v15) {
                  break;
                }
              }

              unsigned int v7 = (uint64_t *)*v7;
            }

            while (v7);
          }
        }
      }

LABEL_3:
      if (++v8 == v4) {
        return GPUTools::DYLockUtils::Unlock(v6, (volatile int *)v7);
      }
    }

    while (1)
    {
      if ((_DWORD)v9 == *(v11 - 9))
      {
        *(v11 - 9) = 0;
        if ((_DWORD)v9 != *(v11 - 8))
        {
LABEL_11:
          if ((_DWORD)v9 != *(v11 - 5)) {
            goto LABEL_12;
          }
          goto LABEL_22;
        }
      }

      else if ((_DWORD)v9 != *(v11 - 8))
      {
        goto LABEL_11;
      }

      *(v11 - 8) = 0;
      if ((_DWORD)v9 != *(v11 - 5))
      {
LABEL_12:
        if ((_DWORD)v9 != *(v11 - 6)) {
          goto LABEL_13;
        }
        goto LABEL_23;
      }

      ++v8;
    }

    while (v8 != v4);
  }

  return GPUTools::DYLockUtils::Unlock(v6, (volatile int *)v7);
}

    *(_BYTE *)(v2 + 24) = 1;
    a2 = v3;
    *((_BYTE *)v3 + 24) = v3 == result;
    char *v5 = 1;
    if (v3 == result) {
      return result;
    }
  }

  if (v4)
  {
    unsigned int v6 = *(unsigned __int8 *)(v4 + 24);
    int v5 = (_BYTE *)(v4 + 24);
    if (!v6) {
      goto LABEL_3;
    }
  }

  if (*(uint64_t **)v2 == a2)
  {
    unsigned int v12 = a2[1];
    *(void *)uint64_t v2 = v12;
    if (v12)
    {
      *(void *)(v12 + 16) = v2;
      unsigned int v3 = *(uint64_t **)(v2 + 16);
    }

    a2[2] = (uint64_t)v3;
    *(void *)(*(void *)(v2 + 16) + 8LL * (**(void **)(v2 + 16) != v2)) = a2;
    a2[1] = v2;
    *(void *)(v2 + 16) = a2;
    unsigned int v3 = (uint64_t *)a2[2];
  }

  else
  {
    a2 = (uint64_t *)a2[2];
  }

  *((_BYTE *)a2 + 24) = 1;
  *((_BYTE *)v3 + 24) = 0;
  int8x8_t v13 = (uint64_t *)v3[1];
  uint8x8_t v14 = *v13;
  v3[1] = *v13;
  if (v14) {
    *(void *)(v14 + 16) = v3;
  }
  v13[2] = v3[2];
  *(void *)(v3[2] + 8LL * (*(void *)v3[2] != (void)v3)) = v13;
  BOOL *v13 = (uint64_t)v3;
  v3[2] = (uint64_t)v13;
  return result;
}

LABEL_22:
      *(v11 - 5) = 0;
      if ((_DWORD)v9 != *(v11 - 6))
      {
LABEL_13:
        if ((_DWORD)v9 != *(v11 - 7)) {
          goto LABEL_14;
        }
        goto LABEL_24;
      }

      *((_DWORD *)a1 + 515) = 0;
      if ((_DWORD)v10 != *((_DWORD *)a1 + 516))
      {
LABEL_13:
        uint64_t v11 = v9[3];
        if (!*(void *)&v11) {
          goto LABEL_3;
        }
        goto LABEL_24;
      }

  uint64_t v35 = v13;
  uint64_t v17 = v8[14];
  if (v17)
  {
    uint64_t v18 = (uint8x8_t)vcnt_s8((int8x8_t)v17);
    v18.i16[0] = vaddlv_u8(v18);
    if (v18.u32[0] > 1uLL)
    {
      unint64_t v19 = a2;
    }

    else
    {
      unint64_t v19 = ((_DWORD)v17 - 1) & a2;
    }

    uint64_t v20 = *(uint64_t ***)(v8[13] + 8 * v19);
    if (v20)
    {
      unsigned int v21 = *v20;
      if (v21)
      {
        if (v18.u32[0] < 2uLL)
        {
          int32x4_t v22 = v17 - 1;
          while (1)
          {
            uint64_t v24 = v21[1];
            if (v24 == a2)
            {
              if (*((_DWORD *)v21 + 4) == (_DWORD)a2) {
                goto LABEL_43;
              }
            }

            else if ((v24 & v22) != v19)
            {
              return GPUTools::DYLockUtils::Unlock(v6, v7);
            }

            unsigned int v21 = (uint64_t *)*v21;
            if (!v21) {
              return GPUTools::DYLockUtils::Unlock(v6, v7);
            }
          }
        }

        do
        {
          uint64_t v23 = v21[1];
          if (v23 == a2)
          {
            if (*((_DWORD *)v21 + 4) == (_DWORD)a2)
            {
LABEL_43:
              if (v13)
              {
                (*(void (**)(void, volatile int *, uint64_t, unsigned int *))(*((void *)a1 + 4) + 5264LL))( *((void *)a1 + 2),  a2,  35717LL,  &v34);
                ObjectNameArray::ObjectNameArray((ObjectNameArray *)v32, v34);
                (*(void (**)(void, volatile int *, void, void, __int32 *))(*((void *)a1 + 4) + 6072LL))( *((void *)a1 + 2),  a2,  v34,  0LL,  v33);
                uint32x4_t v25 = &v33[v34];
                uint32x4_t v26 = wmemchr(v33, a3, v34);
                if (v26) {
                  uint32x4_t v27 = v26;
                }
                else {
                  uint32x4_t v27 = v25;
                }
                if (v27 != &v33[v34])
                {
                  uint32x4_t v28 = v13[3];
                  unint64_t v29 = *(_DWORD *)(v28 + 48) - 1;
                  *(_DWORD *)(v28 + 48) = v29;
                  if (!v29)
                  {
                    (*(void (**)(void, uint64_t, uint64_t, int *))(*((void *)a1 + 4) + 5256LL))( *((void *)a1 + 2),  a3,  35712LL,  &v31);
                    if (v31 == 1) {
                      remove_shader_info_cache(a1, &v35, a3);
                    }
                  }
                }

                ObjectNameArray::~ObjectNameArray((ObjectNameArray *)v32);
              }

              return GPUTools::DYLockUtils::Unlock(v6, v7);
            }
          }

          else
          {
            if (v23 >= v17) {
              v23 %= v17;
            }
            if (v23 != v19) {
              return GPUTools::DYLockUtils::Unlock(v6, v7);
            }
          }

          unsigned int v21 = (uint64_t *)*v21;
        }

        while (v21);
      }
    }
  }

  return GPUTools::DYLockUtils::Unlock(v6, v7);
}

  uint64_t v16 = ShaderInfo::ShaderInfo((ShaderInfo *)&v54, *((ContextInfo **)this + 2), a2);
  if (!v12)
  {
    uint64_t v17 = &v54;
    uint64_t v18 = *v54;
    if (!*v54) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }

  uint64_t v17 = (const char ***)v12[3];
  uint64_t v18 = **v17;
  if (v18)
  {
LABEL_26:
    unint64_t v19 = strlen(v18);
    uint64_t v20 = *((void *)this + 1);
    unsigned int v21 = *((void *)this + 2);
    int32x4_t v22 = *((unsigned __int8 *)this + 591);
    uint64_t v23 = DYGetGLGuestAppClient(v19);
    GPUTools::Interpose::DYSavePointer(v23, v19 + 1, v18, v21 + 4644, 65LL, v20, v22 != 0, 0LL, 0LL);
    uint64_t v24 = (void *)*((void *)this + 2);
    uint32x4_t v66 = (char *)v24 + 4644;
    ContextHarvester::encode(this, 540LL, 128LL, "Culi@1U<cb>t", *v24, a2, 1LL, &v66, 0LL);
    ContextHarvester::encode(this, 93LL, 128LL, "Cul", **((void **)this + 2), a2);
  }

LABEL_24:
      *(v11 - 7) = 0;
      if ((_DWORD)v9 != *(v11 - 4))
      {
LABEL_15:
        if ((_DWORD)v9 != *(v11 - 3)) {
          goto LABEL_16;
        }
        goto LABEL_26;
      }

  ContextHarvester::encodeCommand(this, 4294955016LL, 0, v11, v12);
  if (*(void *)((char *)&v36[2] + 4))
  {
    *(void *)((char *)&v36[3] + 4) = *(void *)((char *)&v36[2] + 4);
    operator delete(*(void **)((char *)&v36[2] + 4));
  }

  ContextHarvester::encodeCommand(this, 4294955016LL, 0, v8, v9);
}

  uint64_t v23 = *((void *)this + 2);
  if (*(int *)(v23 + 3460) >= 1 && *(_DWORD *)(v23 + 3452))
  {
    uint64_t v24 = 0LL;
    do
    {
      ContextHarvester::getGenericVertexAttrib(this, v24);
      uint64_t v24 = (v24 + 1);
    }

    while (v24 < *(_DWORD *)(*((void *)this + 2) + 3452LL));
  }

  (*(void (**)(void, uint64_t, float *))(*((void *)this + 4) + 824LL))( *(void *)(*((void *)this + 3) + 16LL),  2928LL,  v159);
  ContextHarvester::encodeCommand(this, 767LL, 2u, v25, v26, 5126LL, v159[0], 5126LL, v159[1]);
  uint32x4_t v28 = *((void *)this + 2);
  if (*(_DWORD *)(v28 + 3456) == 3)
  {
    if ((*(unsigned int (**)(void, uint64_t))(*((void *)this + 4) + 1144LL))( *(void *)(*((void *)this + 3) + 16LL),  34383LL))
    {
      int v31 = 151LL;
    }

    else
    {
      int v31 = 134LL;
    }

    ContextHarvester::encodeCommand(this, v31, 1u, v29, v30, 529413LL, 34383LL);
  }

  else if (!*(_BYTE *)(v28 + 4873))
  {
    goto LABEL_42;
  }

  (*(void (**)(void, uint64_t, float *))(*((void *)this + 4) + 832LL))( *(void *)(*((void *)this + 3) + 16LL),  3378LL,  &v158);
  if (v158 != 0.0)
  {
    unsigned int v32 = 0;
    do
    {
      if ((*(unsigned int (**)(void, void))(*((void *)this + 4) + 1144LL))( *(void *)(*((void *)this + 3) + 16LL),  v32 + 12288))
      {
        uint64_t v35 = 151LL;
      }

      else
      {
        uint64_t v35 = 134LL;
      }

      ContextHarvester::encodeCommand(this, v35, 1u, v33, v34, 529413LL, v32 + 12288);
      ++v32;
    }

    while (v32 < LODWORD(v158));
  }

  uint32x4_t v28 = *((void *)this + 2);
  if (*(_DWORD *)(v28 + 3456) == 3)
  {
    ContextHarvester::getGlobalState( this,  35100LL,  529413,  1LL,  v27,  *(void (**)(__GLIContextRec *, unsigned int, void *))(*((void *)this + 4) + 832LL),  35LL,  2,  0);
    ContextHarvester::getGlobalState( this,  36431LL,  529413,  1LL,  v36,  *(void (**)(__GLIContextRec *, unsigned int, void *))(*((void *)this + 4) + 832LL),  822LL,  1,  0);
    uint32x4_t v28 = *((void *)this + 2);
  }

LABEL_25:
      *(v11 - 4) = 0;
      if ((_DWORD)v9 != *(v11 - 3))
      {
LABEL_16:
        if ((_DWORD)v9 != *(v11 - 2)) {
          goto LABEL_17;
        }
        goto LABEL_27;
      }

LABEL_27:
      *(v11 - 2) = 0;
      if ((_DWORD)v9 != *(v11 - 1))
      {
LABEL_18:
        if ((_DWORD)v9 == *v11) {
          goto LABEL_29;
        }
        goto LABEL_8;
      }

  if (v18) {
    uint32x4_t v25 = 1;
  }
  else {
    uint32x4_t v25 = *((_BYTE *)v17 + 52) == 0;
  }
  uint32x4_t v26 = !v25;
  uint32x4_t v27 = v58;
  uint32x4_t v28 = v60;
  unint64_t v29 = *((void *)this + 1);
  uint64_t v30 = *((void *)this + 2);
  int v31 = *((unsigned __int8 *)this + 591);
  unsigned int v32 = DYGetGLGuestAppClient(v16);
  GPUTools::Interpose::DYSavePointer(v32, v28, v27, v30 + 4644, 65LL, v29, v31 != 0, 0LL, 0LL);
  uint64_t v33 = (void *)*((void *)this + 2);
  uint32x4_t v66 = (char *)v33 + 4644;
  ContextHarvester::encode(this, 540LL, 0LL, "Culi@1U<cb>t", *v33, a2, 1LL, &v66, 0LL);
  if (v26) {
    ContextHarvester::encode(this, 93LL, 128LL, "Cul", **((void **)this + 2), a2);
  }
  uint64_t v35 = v59;
  uint32x4_t v36 = v62;
  uint32x4_t v37 = v61;
  uint64_t v38 = v63;
  uint64_t v39 = (void *)*((void *)this + 2);
  if (v61 < 0x401)
  {
    ContextHarvester::encode(this, 4294955024LL, 0LL, "CiuiiSii", *v39, 13LL, a2, v61, v59, v63 != 0, v62 != 0);
  }

  else
  {
    uint32x4_t v40 = *((void *)this + 1);
    uint32x4_t v41 = *((unsigned __int8 *)this + 591);
    uint32x4_t v42 = DYGetGLGuestAppClient(v34);
    GPUTools::Interpose::DYSavePointer(v42, v37, v35, (char *)v39 + 4644, 65LL, v40, v41 != 0, 0LL, 0LL);
    ContextHarvester::encode( this,  4294955024LL,  0LL,  "CiuiiU<cb>ii",  **((void **)this + 2),  13LL,  a2,  v37,  *((void *)this + 2) + 4644LL,  v38 != 0,  v36 != 0);
  }

  unsigned int v45 = v57;
  if (v57)
  {
    p_shared_owners = (unint64_t *)&v57->__shared_owners_;
    do
      uint64_t v47 = __ldaxr(p_shared_owners);
    while (__stlxr(v47 - 1, p_shared_owners));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }

  unsigned int v48 = v56;
  if (v56)
  {
    v49 = (unint64_t *)&v56->__shared_owners_;
    do
      unsigned int v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }

  uint64_t v51 = v55;
  if (v55)
  {
    uint64_t v52 = (unint64_t *)&v55->__shared_owners_;
    do
      uint32x4_t v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }

  ContextHarvester::encodeCommand(v64, 4294955016LL, 0, v43, v44);
}

  unint64_t v15 = *(void *)this;
  if (*(_BYTE *)(*(void *)this + 4846LL))
  {
    (*(void (**)(void, uint64_t, uint64_t, std::string *))(*((void *)this + 2) + 5264LL))( *(void *)(*((void *)this + 1) + 16LL),  a2,  33368LL,  &__p);
    (*(void (**)(void, uint64_t, uint64_t, void))(*((void *)this + 2) + 5512LL))( *(void *)(*((void *)this + 1) + 16LL),  a4,  33368LL,  LODWORD(__p.__r_.__value_.__l.__data_));
    unint64_t v15 = *(void *)this;
  }

  if (*(int *)(v15 + 3460) >= 3)
  {
    GPUTools::GL::CopyProgramTransformFeedbackVaryings(v8, a2, a4);
    (*(void (**)(void, uint64_t, uint64_t, std::string *))(*((void *)this + 2) + 5264LL))( *(void *)(*((void *)this + 1) + 16LL),  a2,  33367LL,  &__p);
    (*(void (**)(void, uint64_t, uint64_t, void))(*((void *)this + 2) + 5512LL))( *(void *)(*((void *)this + 1) + 16LL),  a4,  33367LL,  LODWORD(__p.__r_.__value_.__l.__data_));
  }

  (*(void (**)(void, void))(*((void *)this + 2) + 4792LL))( *(void *)(*((void *)this + 1) + 16LL),  a4);
  (*(void (**)(void, void, void))(*((void *)this + 2) + 4744LL))( *(void *)(*((void *)this + 1) + 16LL),  a4,  v9);
  (*(void (**)(void, void, void))(*((void *)this + 2) + 4744LL))( *(void *)(*((void *)this + 1) + 16LL),  a4,  v10);
  GPUTools::GL::CopyProgramActiveUniforms(v8, *(unsigned int *)(*(void *)this + 3456LL), a2, a4, 0LL);
LABEL_33:
  (*(void (**)(void, void))(*((void *)this + 2) + 4728LL))( *(void *)(*((void *)this + 1) + 16LL),  v10);
  return (*(uint64_t (**)(void, void))(*((void *)this + 2) + 4728LL))( *(void *)(*((void *)this + 1) + 16LL),  v9);
}

LABEL_28:
      *(v11 - 1) = 0;
      if ((_DWORD)v9 == *v11) {
LABEL_29:
      }
        _DWORD *v11 = 0;
LABEL_8:
      v11 += 10;
      if (!--v10) {
        goto LABEL_5;
      }
    }
  }

  return GPUTools::DYLockUtils::Unlock(v6, (volatile int *)v7);
}

      std::string::append(&v105, v17);
      std::string::push_back(&v105, 10);
      goto LABEL_29;
    }

    if (*(_DWORD *)a1 == 1) {
      ContextHarvester::harvestGLSLShader((ContextHarvester *)a1, *v14);
    }
    uint64_t v30 = *v14;
    int v31 = *a4;
    ContextHarvester::encode((ContextHarvester *)a1, 6LL, 128LL, "Culul", **(void **)(a1 + 16), v99, v30);
    ContextHarvester::encode( (ContextHarvester *)a1,  4294955024LL,  0LL,  "Ciuieuiui",  **(void **)(a1 + 16),  4LL,  v30,  v31,  a2,  0LL);
    uint64_t v33 = a5[1];
    unsigned int v32 = (unint64_t)a5[2];
    if ((unint64_t)v33 >= v32)
    {
      uint64_t v35 = *a5;
      uint32x4_t v36 = v33 - *a5;
      uint32x4_t v37 = v36 >> 2;
      uint64_t v38 = (v36 >> 2) + 1;
      if (v38 >> 62) {
        std::vector<ProgramShaderInfo>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v39 = v32 - (void)v35;
      if (v39 >> 1 > v38) {
        uint64_t v38 = v39 >> 1;
      }
      else {
        uint32x4_t v40 = v38;
      }
      if (v40)
      {
        uint32x4_t v97 = (char *)(v33 - *a5);
        uint32x4_t v98 = v36 >> 2;
        if (v40 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint32x4_t v41 = v40;
        uint32x4_t v42 = operator new(4 * v40);
        uint32x4_t v40 = v41;
        uint32x4_t v36 = (uint64_t)v97;
        uint32x4_t v37 = v98;
      }

      else
      {
        uint32x4_t v42 = 0LL;
      }

      v43 = (unsigned int *)&v42[4 * v37];
      char *v43 = *v14;
      NSUInteger v34 = (char *)(v43 + 1);
      if (v33 != v35)
      {
        uint64_t v44 = v33 - 4 - v35;
        if (v44 < 0x2C) {
          goto LABEL_116;
        }
        unsigned int v45 = (v44 >> 2) + 1;
        unsigned int v46 = 4 * (v45 & 0x7FFFFFFFFFFFFFF8LL);
        uint64_t v47 = &v33[-v46];
        v43 = (unsigned int *)((char *)v43 - v46);
        unsigned int v48 = &v42[4 * v37 - 16];
        v49 = v33 - 16;
        unsigned int v50 = v45 & 0x7FFFFFFFFFFFFFF8LL;
        do
        {
          uint64_t v51 = *(_OWORD *)v49;
          *(v48 - 1) = *((_OWORD *)v49 - 1);
          *unsigned int v48 = v51;
          v48 -= 2;
          v49 -= 32;
          v50 -= 8LL;
        }

        while (v50);
        uint64_t v33 = v47;
        if (v45 != (v45 & 0x7FFFFFFFFFFFFFF8LL))
        {
LABEL_116:
          do
          {
            uint64_t v52 = *((_DWORD *)v33 - 1);
            v33 -= 4;
            *--v43 = v52;
          }

          while (v33 != v35);
        }
      }

      *a5 = (char *)v43;
      a5[1] = v34;
      a5[2] = &v42[4 * v40];
      if (v35) {
        operator delete(v35);
      }
    }

    else
    {
      *(_DWORD *)uint64_t v33 = *v14;
      NSUInteger v34 = v33 + 4;
    }

    a5[1] = v34;
    uint32x4_t v53 = **((void **)v14 + 5);
    if (v53) {
      ContextHarvester::encode( (ContextHarvester *)a1,  897LL,  2LL,  "CeuiicS",  **(void **)(a1 + 16),  35656LL,  *v14,  0LL,  v53);
    }
LABEL_32:
    v14 += 14;
  }

  while (v14 != v13);
  size = v105.__r_.__value_.__s.__size_;
  if ((v105.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    size = v105.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    uint64_t v56 = *a4;
    v55 = a4[1];
    ContextHarvester::encode((ContextHarvester *)a1, 6LL, 128LL, "Culul", **(void **)(a1 + 16), v99, v55);
    ContextHarvester::encode( (ContextHarvester *)a1,  4294955024LL,  0LL,  "Ciuieuiui",  **(void **)(a1 + 16),  4LL,  v55,  v56,  a2,  v15);
    uint32x4_t v59 = a5[1];
    uint32x4_t v58 = (unint64_t)a5[2];
    if ((unint64_t)v59 >= v58)
    {
      uint32x4_t v61 = *a5;
      uint32x4_t v62 = v59 - *a5;
      uint32x4_t v63 = v62 >> 2;
      uint16x8_t v64 = (v62 >> 2) + 1;
      if (v64 >> 62) {
        std::vector<ProgramShaderInfo>::__throw_length_error[abi:ne180100]();
      }
      uint32x4_t v65 = v58 - (void)v61;
      if (v65 >> 1 > v64) {
        uint16x8_t v64 = v65 >> 1;
      }
      else {
        uint32x4_t v66 = v64;
      }
      if (v66)
      {
        if (v66 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint32x4_t v57 = operator new(4 * v66);
      }

      else
      {
        uint32x4_t v57 = 0LL;
      }

      uint32x4_t v67 = &v57[4 * v63];
      uint32x4_t v68 = &v57[4 * v66];
      *(_DWORD *)uint32x4_t v67 = a4[1];
      uint32x4_t v60 = v67 + 4;
      if (v59 != v61)
      {
        v69 = v59 - v61 - 4;
        if (v69 < 0x2C) {
          goto LABEL_117;
        }
        uint64_t v70 = (v69 >> 2) + 1;
        int v71 = 4 * (v70 & 0x7FFFFFFFFFFFFFF8LL);
        unsigned int v72 = &v59[-v71];
        v67 -= v71;
        uint64_t v73 = &v57[4 * v63 - 16];
        uint64_t v74 = v59 - 16;
        uint64_t v75 = v70 & 0x7FFFFFFFFFFFFFF8LL;
        do
        {
          unsigned int v76 = *(_OWORD *)v74;
          *(v73 - 1) = *((_OWORD *)v74 - 1);
          GPUTools::FB::Fbuf *v73 = v76;
          v73 -= 2;
          v74 -= 32;
          v75 -= 8LL;
        }

        while (v75);
        uint32x4_t v59 = v72;
        if (v70 != (v70 & 0x7FFFFFFFFFFFFFF8LL))
        {
LABEL_117:
          do
          {
            unsigned int v77 = *((_DWORD *)v59 - 1);
            v59 -= 4;
            *((_DWORD *)v67 - 1) = v77;
            v67 -= 4;
          }

          while (v59 != v61);
        }
      }

      *a5 = v67;
      a5[1] = v60;
      a5[2] = v68;
      if (v61) {
        operator delete(v61);
      }
    }

    else
    {
      *(_DWORD *)uint32x4_t v59 = a4[1];
      uint32x4_t v60 = v59 + 4;
    }

    a5[1] = v60;
    unsigned int v78 = a4[1];
    uint64_t v79 = v105.__r_.__value_.__s.__size_;
    uint64_t v80 = *(_OWORD *)&v105.__r_.__value_.__l.__data_;
    uint32x4_t v81 = *(void *)(a1 + 8);
    uint64_t v82 = *(void *)(a1 + 16);
    uint32x4_t v83 = *(unsigned __int8 *)(a1 + 591);
    uint32x4_t v84 = DYGetGLGuestAppClient(v57);
    if ((v79 & 0x80u) == 0LL) {
      uint64_t v85 = v79;
    }
    else {
      uint64_t v85 = *((void *)&v80 + 1);
    }
    if ((v79 & 0x80u) == 0LL) {
      uint64_t v86 = &v105;
    }
    else {
      uint64_t v86 = (std::string *)v80;
    }
    GPUTools::Interpose::DYSavePointer(v84, v85 + 1, v86, v82 + 4644, 65LL, v81, v83 != 0, 0LL, 0LL);
    uint32x4_t v87 = *(void *)(a1 + 16);
    v107[0] = (char *)(v87 + 4644);
    ContextHarvester::encode((ContextHarvester *)a1, 540LL, 128LL, "Culi@1U<cb>t", *(void *)v87, v78, 1LL, v107, 0LL);
    ContextHarvester::encode((ContextHarvester *)a1, 93LL, 128LL, "Cul", **(void **)(a1 + 16), v78);
    uint8x8_t v89 = a4[1];
    uint16x8_t v90 = v104.__r_.__value_.__s.__size_;
    if ((v104.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint32x4_t v91 = &v104;
    }
    else {
      uint32x4_t v91 = (std::string *)v104.__r_.__value_.__r.__words[0];
    }
    if ((v104.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      uint16x8_t v90 = v104.__r_.__value_.__l.__size_;
    }
    uint32x4_t v92 = v90 + 1;
    uint32x4_t v93 = *(void **)(a1 + 16);
    if (v90 + 1 < 0x401)
    {
      ContextHarvester::encode( (ContextHarvester *)a1,  4294955024LL,  0LL,  "CiuiiSii",  *v93,  13LL,  v89,  v92,  v91,  1LL,  0LL);
    }

    else
    {
      uint64_t v94 = *(void *)(a1 + 8);
      v95 = *(unsigned __int8 *)(a1 + 591);
      uint32x4_t v96 = DYGetGLGuestAppClient(v88);
      GPUTools::Interpose::DYSavePointer(v96, v92, v91, (char *)v93 + 4644, 65LL, v94, v95 != 0, 0LL, 0LL);
      ContextHarvester::encode( (ContextHarvester *)a1,  4294955024LL,  0LL,  "CiuiiU<cb>ii",  **(void **)(a1 + 16),  13LL,  v89,  v92,  *(void *)(a1 + 16) + 4644LL,  1LL,  0LL);
    }
  }

    uint32x4_t v28 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v23), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v28) {
      uint32x4_t v28 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v65, v29);
    }
    int v31 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v31) {
      uint32x4_t v28 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v65, v31, v30);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)v65);
    }
    unsigned int v32 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)v65);
    uint64_t v33 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v33 && gBreakOnError)
    {
      uint32x4_t v61 = 3LL;
      uint32x4_t v62 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v22 & 2) == 0) {
        goto LABEL_37;
      }
      uint32x4_t v61 = 2LL;
      uint32x4_t v62 = 20LL;
    }

    breakpoint_break((uint64_t)v65, (volatile int *)v62, v61, v33, v11);
LABEL_37:
    NSUInteger v34 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v32) defaultFbufStream];
    uint64_t v35 = (unsigned int *)((char *)v34 + 56);
    do
      uint32x4_t v36 = __ldaxr(v35);
    while (__stlxr(1u, v35));
    if (v36 == 1)
    {
      do
      {
        while (*v35 == 1)
          ;
        do
          uint32x4_t v37 = __ldaxr(v35);
        while (__stlxr(1u, v35));
      }

      while (v37 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v34, (GPUTools::FB::Fbuf *)v65, *(unsigned int *)v65[0], 1);
    atomic_store(0, v35);
    if (!gCheckGLErrors) {
      check_errors(v11);
    }
    if (!*(_DWORD *)(v11 + 3404))
    {
      wrapper_cache_texture_binding(v11, a2, a3);
      uint64_t v38 = (GPUTools::DYLockUtils *)(*(void *)(v11 + 40) + 368LL);
      GPUTools::DYLockUtils::Lock(v38, v39);
      uint32x4_t v41 = *(void *)(v11 + 40);
      uint32x4_t v42 = *(void *)(v41 + 312);
      if (v42)
      {
        v43 = (uint8x8_t)vcnt_s8((int8x8_t)v42);
        v43.i16[0] = vaddlv_u8(v43);
        if (v43.u32[0] > 1uLL)
        {
          uint64_t v44 = a3;
        }

        else
        {
          uint64_t v44 = ((_DWORD)v42 - 1) & a3;
        }

        unsigned int v45 = *(uint64_t ***)(*(void *)(v41 + 304) + 8 * v44);
        if (v45)
        {
          unsigned int v46 = *v45;
          if (*v45)
          {
            if (v43.u32[0] < 2uLL)
            {
              uint64_t v47 = v42 - 1;
              while (1)
              {
                v49 = v46[1];
                if (v49 == a3)
                {
                  if (*((_DWORD *)v46 + 4) == (_DWORD)a3) {
                    goto LABEL_67;
                  }
                }

                else if ((v49 & v47) != v44)
                {
                  goto LABEL_71;
                }

                unsigned int v46 = (uint64_t *)*v46;
                if (!v46) {
                  goto LABEL_71;
                }
              }
            }

            do
            {
              unsigned int v48 = v46[1];
              if (v48 == a3)
              {
                if (*((_DWORD *)v46 + 4) == (_DWORD)a3)
                {
LABEL_67:
                  unsigned int v50 = IOSurfaceLookup(*((_DWORD *)v46 + 6));
                  uint64_t v51 = v50;
                  if (v50)
                  {
                    Seed = IOSurfaceGetSeed(v50);
                    if (Seed != *((_DWORD *)v46 + 7))
                    {
                      *((_DWORD *)v46 + 7) = Seed;
                      copyout_iosurface_texture_encode_teximage((uint64_t *)v11, a2, a3, v51, v46[5], 1, 1LL);
                    }

                    CFRelease(v51);
                  }

                  break;
                }
              }

              else
              {
                if (v48 >= v42) {
                  v48 %= v42;
                }
                if (v48 != v44) {
                  break;
                }
              }

              unsigned int v46 = (uint64_t *)*v46;
            }

            while (v46);
          }
        }
      }

    uint64_t v33 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v33) {
      uint64_t v33 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v55, v34);
    }
    uint32x4_t v36 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v15 + 3404);
    if ((_DWORD)v36) {
      uint64_t v33 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v55, v36, v35);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v15, (uint64_t)v55);
    }
    uint32x4_t v37 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v15 + 3480),  (GPUTools::FB::Fbuf *)(v15 + 3520),  (GPUTools::FB *)v55);
    uint64_t v38 = *(unsigned int *)(v15 + 3404);
    if ((_DWORD)v38 && gBreakOnError)
    {
      uint64_t v51 = 3LL;
      uint64_t v52 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v27 & 2) == 0) {
        goto LABEL_37;
      }
      uint64_t v51 = 2LL;
      uint64_t v52 = 81LL;
    }

    breakpoint_break((uint64_t)v55, (volatile int *)v52, v51, v38, v15);
LABEL_37:
    uint64_t v39 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v37) defaultFbufStream];
    uint32x4_t v40 = (unsigned int *)((char *)v39 + 56);
    do
      uint32x4_t v41 = __ldaxr(v40);
    while (__stlxr(1u, v40));
    if (v41 == 1)
    {
      do
      {
        while (*v40 == 1)
          ;
        do
          uint32x4_t v42 = __ldaxr(v40);
        while (__stlxr(1u, v40));
      }

      while (v42 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v39, (GPUTools::FB::Fbuf *)v55, *(unsigned int *)v55[0], 1);
    atomic_store(0, v40);
    do
    {
      v43 = __ldaxr(v16);
      uint64_t v44 = v43 - 1;
    }

    while (__stlxr(v44, v16));
    if (gCheckGLErrors) {
      unsigned int v45 = v44 < 1;
    }
    else {
      unsigned int v45 = 1;
    }
    if (!v45) {
      handle_opengl_thread_conflict((const void **)v15);
    }
    goto LABEL_50;
  }

  do
    unsigned int v46 = __ldaxr(v16);
  while (__stlxr(v46 - 1, v16));
  [(id)DYGetGLGuestAppClient(v24) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, const void *))(*(void *)(v15 + 24) + 408LL))( a1,  a2,  a3,  a4,  a5);
LABEL_50:
  if (v55[0]) {
    free(v55[0]);
  }
}

    uint32x4_t v28 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v23), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v28) {
      uint32x4_t v28 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v50, v29);
    }
    int v31 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v31) {
      uint32x4_t v28 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v50, v31, v30);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)v50);
    }
    unsigned int v32 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)v50);
    uint64_t v33 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v33 && gBreakOnError)
    {
      unsigned int v46 = 3LL;
      uint64_t v47 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v22 & 2) == 0) {
        goto LABEL_37;
      }
      unsigned int v46 = 2LL;
      uint64_t v47 = 127LL;
    }

    breakpoint_break((uint64_t)v50, (volatile int *)v47, v46, v33, v11);
LABEL_37:
    NSUInteger v34 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v32) defaultFbufStream];
    uint64_t v35 = (unsigned int *)((char *)v34 + 56);
    do
      uint32x4_t v36 = __ldaxr(v35);
    while (__stlxr(1u, v35));
    if (v36 == 1)
    {
      do
      {
        while (*v35 == 1)
          ;
        do
          uint32x4_t v37 = __ldaxr(v35);
        while (__stlxr(1u, v35));
      }

      while (v37 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v34, (GPUTools::FB::Fbuf *)v50, *(unsigned int *)v50[0], 1);
    atomic_store(0, v35);
    wrapper_cache_texture_binding_delete((ContextInfo *)v11, a2, a3);
    do
    {
      uint64_t v38 = __ldaxr(v12);
      uint64_t v39 = v38 - 1;
    }

    while (__stlxr(v39, v12));
    if (gCheckGLErrors) {
      uint32x4_t v40 = v39 < 1;
    }
    else {
      uint32x4_t v40 = 1;
    }
    if (!v40) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    goto LABEL_50;
  }

  do
    uint32x4_t v41 = __ldaxr(v12);
  while (__stlxr(v41 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, volatile int *, const unsigned int *))(*(void *)(v11 + 24) + 472LL))( a1,  a2,  a3);
LABEL_50:
  if (v50[0]) {
    free(v50[0]);
  }
}

    unsigned int v32 = v57;
    uint64_t v56 = *((_OWORD *)v57 + 1);
    uint32x4_t v58 = v57;
    if (v59 >= 0x24)
    {
      *((_DWORD *)v57 + 8) = 0;
      NSUInteger *v32 = 0u;
      v32[1] = 0u;
    }

    GPUTools::FB::Encode((uint64_t)&v57, 208LL, 0LL, v11 + 4709, v24, v25, v26, v27, *(void *)v11);
    *((_OWORD *)v57 + 1) = v56;
    NSUInteger v34 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v34) {
      NSUInteger v34 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v57, v35);
    }
    uint32x4_t v37 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v37) {
      NSUInteger v34 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v57, v37, v36);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v34), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)&v57);
    }
    uint64_t v38 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v57);
    uint64_t v39 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v39 && gBreakOnError)
    {
      uint64_t v52 = 3LL;
      uint32x4_t v53 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v23 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v52 = 2LL;
      uint32x4_t v53 = 208LL;
    }

    breakpoint_break((uint64_t)&v57, (volatile int *)v53, v52, v39, v11);
LABEL_39:
    uint32x4_t v40 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v38) defaultFbufStream];
    uint32x4_t v41 = (unsigned int *)((char *)v40 + 56);
    do
      uint32x4_t v42 = __ldaxr(v41);
    while (__stlxr(1u, v41));
    if (v42 == 1)
    {
      do
      {
        while (*v41 == 1)
          ;
        do
          v43 = __ldaxr(v41);
        while (__stlxr(1u, v41));
      }

      while (v43 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v40, (GPUTools::FB::Fbuf *)&v57, *(unsigned int *)v57, 1);
    atomic_store(0, v41);
    do
    {
      uint64_t v44 = __ldaxr(v12);
      unsigned int v45 = v44 - 1;
    }

    while (__stlxr(v45, v12));
    if (gCheckGLErrors) {
      unsigned int v46 = v45 < 1;
    }
    else {
      unsigned int v46 = 1;
    }
    if (!v46) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    goto LABEL_52;
  }

  do
    uint64_t v47 = __ldaxr(v12);
  while (__stlxr(v47 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, unsigned int *))(*(void *)(v11 + 24) + 784LL))(a1, a2, a3);
LABEL_52:
  if (v57) {
    free(v57);
  }
}

    unsigned int v32 = v58;
    uint64_t v56 = *((_OWORD *)v58 + 1);
    uint32x4_t v59 = v58;
    if (v60 >= 0x24)
    {
      *((_DWORD *)v58 + 8) = 0;
      NSUInteger *v32 = 0u;
      v32[1] = 0u;
    }

    GPUTools::FB::Encode((uint64_t)&v58, 217LL, 256LL, v11 + 4709, v24, v25, v26, v27, *(void *)v11);
    *((_OWORD *)v58 + 1) = v56;
    NSUInteger v34 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v34) {
      NSUInteger v34 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v58, v35);
    }
    uint32x4_t v37 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v37) {
      NSUInteger v34 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v58, v37, v36);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v34), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)&v58);
    }
    uint64_t v38 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v58);
    uint64_t v39 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v39 && gBreakOnError)
    {
      uint64_t v52 = 3LL;
      uint32x4_t v53 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v23 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v52 = 2LL;
      uint32x4_t v53 = 217LL;
    }

    breakpoint_break((uint64_t)&v58, (volatile int *)v53, v52, v39, v11);
LABEL_39:
    uint32x4_t v40 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v38) defaultFbufStream];
    uint32x4_t v41 = (unsigned int *)((char *)v40 + 56);
    do
      uint32x4_t v42 = __ldaxr(v41);
    while (__stlxr(1u, v41));
    if (v42 == 1)
    {
      do
      {
        while (*v41 == 1)
          ;
        do
          v43 = __ldaxr(v41);
        while (__stlxr(1u, v41));
      }

      while (v43 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v40, (GPUTools::FB::Fbuf *)&v58, *(unsigned int *)v58, 1);
    atomic_store(0, v41);
    do
    {
      uint64_t v44 = __ldaxr(v12);
      unsigned int v45 = v44 - 1;
    }

    while (__stlxr(v45, v12));
    if (gCheckGLErrors) {
      unsigned int v46 = v45 < 1;
    }
    else {
      unsigned int v46 = 1;
    }
    if (!v46) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    goto LABEL_52;
  }

  do
    uint64_t v47 = __ldaxr(v12);
  while (__stlxr(v47 - 1, v12));
  [(id)DYGetGLGuestAppClient(v17) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, GPUTools::GL *, unsigned __int8 *))(*(void *)(v11 + 24) + 792LL))( a1,  a2,  a3);
LABEL_52:
  if (v58) {
    free(v58);
  }
}

    int v31 = v56;
    v55 = *((_OWORD *)v56 + 1);
    uint32x4_t v57 = v56;
    if (v58 >= 0x24)
    {
      *((_DWORD *)v56 + 8) = 0;
      *int v31 = 0u;
      v31[1] = 0u;
    }

    GPUTools::FB::Encode((uint64_t)&v56, 264LL, 256LL, (uint64_t)"Ce@1t", v23, v24, v25, v26, *(void *)v11);
    *((_OWORD *)v56 + 1) = v55;
    uint64_t v33 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v33) {
      uint64_t v33 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v56, v34);
    }
    uint32x4_t v36 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v36) {
      uint64_t v33 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v56, v36, v35);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)&v56);
    }
    uint32x4_t v37 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v56);
    uint64_t v38 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v38 && gBreakOnError)
    {
      uint64_t v51 = 3LL;
      uint64_t v52 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v22 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v51 = 2LL;
      uint64_t v52 = 264LL;
    }

    breakpoint_break((uint64_t)&v56, (volatile int *)v52, v51, v38, v11);
LABEL_39:
    uint64_t v39 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v37) defaultFbufStream];
    uint32x4_t v40 = (unsigned int *)((char *)v39 + 56);
    do
      uint32x4_t v41 = __ldaxr(v40);
    while (__stlxr(1u, v40));
    if (v41 == 1)
    {
      do
      {
        while (*v40 == 1)
          ;
        do
          uint32x4_t v42 = __ldaxr(v40);
        while (__stlxr(1u, v40));
      }

      while (v42 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v39, (GPUTools::FB::Fbuf *)&v56, *(unsigned int *)v56, 1);
    atomic_store(0, v40);
    do
    {
      v43 = __ldaxr(v12);
      uint64_t v44 = v43 - 1;
    }

    while (__stlxr(v44, v12));
    if (gCheckGLErrors) {
      unsigned int v45 = v44 < 1;
    }
    else {
      unsigned int v45 = 1;
    }
    if (!v45) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    goto LABEL_52;
  }

  do
    unsigned int v46 = __ldaxr(v12);
  while (__stlxr(v46 - 1, v12));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, void **))(*(void *)(v11 + 24) + 920LL))(a1, a2, a3);
LABEL_52:
  if (v56) {
    free(v56);
  }
}

    unsigned int v32 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v32) {
      unsigned int v32 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v54, v33);
    }
    uint64_t v35 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v35) {
      unsigned int v32 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v54, v35, v34);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v54);
    }
    uint32x4_t v36 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v54);
    uint32x4_t v37 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v37 && gBreakOnError)
    {
      unsigned int v50 = 3LL;
      uint64_t v51 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v26 & 2) == 0) {
        goto LABEL_37;
      }
      unsigned int v50 = 2LL;
      uint64_t v51 = 344LL;
    }

    breakpoint_break((uint64_t)v54, (volatile int *)v51, v50, v37, v13);
LABEL_37:
    uint64_t v38 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v36) defaultFbufStream];
    uint64_t v39 = (unsigned int *)((char *)v38 + 56);
    do
      uint32x4_t v40 = __ldaxr(v39);
    while (__stlxr(1u, v39));
    if (v40 == 1)
    {
      do
      {
        while (*v39 == 1)
          ;
        do
          uint32x4_t v41 = __ldaxr(v39);
        while (__stlxr(1u, v39));
      }

      while (v41 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v38, (GPUTools::FB::Fbuf *)v54, *(unsigned int *)v54[0], 1);
    atomic_store(0, v39);
    do
    {
      uint32x4_t v42 = __ldaxr(v14);
      v43 = v42 - 1;
    }

    while (__stlxr(v43, v14));
    if (gCheckGLErrors) {
      uint64_t v44 = v43 < 1;
    }
    else {
      uint64_t v44 = 1;
    }
    if (!v44) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    goto LABEL_50;
  }

  do
    unsigned int v45 = __ldaxr(v14);
  while (__stlxr(v45 - 1, v14));
  [(id)DYGetGLGuestAppClient(v19) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, GPUTools::GL *, const float *))(*(void *)(v13 + 24) + 1208LL))( a1,  a2,  a3,  a4);
LABEL_50:
  if (v54[0]) {
    free(v54[0]);
  }
}

    unsigned int v32 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v32) {
      unsigned int v32 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v54, v33);
    }
    uint64_t v35 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v35) {
      unsigned int v32 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v54, v35, v34);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v54);
    }
    uint32x4_t v36 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v54);
    uint32x4_t v37 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v37 && gBreakOnError)
    {
      unsigned int v50 = 3LL;
      uint64_t v51 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v26 & 2) == 0) {
        goto LABEL_37;
      }
      unsigned int v50 = 2LL;
      uint64_t v51 = 373LL;
    }

    breakpoint_break((uint64_t)v54, (volatile int *)v51, v50, v37, v13);
LABEL_37:
    uint64_t v38 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v36) defaultFbufStream];
    uint64_t v39 = (unsigned int *)((char *)v38 + 56);
    do
      uint32x4_t v40 = __ldaxr(v39);
    while (__stlxr(1u, v39));
    if (v40 == 1)
    {
      do
      {
        while (*v39 == 1)
          ;
        do
          uint32x4_t v41 = __ldaxr(v39);
        while (__stlxr(1u, v39));
      }

      while (v41 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v38, (GPUTools::FB::Fbuf *)v54, *(unsigned int *)v54[0], 1);
    atomic_store(0, v39);
    do
    {
      uint32x4_t v42 = __ldaxr(v14);
      v43 = v42 - 1;
    }

    while (__stlxr(v43, v14));
    if (gCheckGLErrors) {
      uint64_t v44 = v43 < 1;
    }
    else {
      uint64_t v44 = 1;
    }
    if (!v44) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    goto LABEL_50;
  }

  do
    unsigned int v45 = __ldaxr(v14);
  while (__stlxr(v45 - 1, v14));
  [(id)DYGetGLGuestAppClient(v19) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, GPUTools::GL *, const float *))(*(void *)(v13 + 24) + 1368LL))( a1,  a2,  a3,  a4);
LABEL_50:
  if (v54[0]) {
    free(v54[0]);
  }
}

    int v31 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v26), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v31) {
      int v31 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v53, v32);
    }
    NSUInteger v34 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v34) {
      int v31 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v53, v34, v33);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v31), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v53);
    }
    uint64_t v35 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v53);
    uint32x4_t v36 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v36 && gBreakOnError)
    {
      v49 = 3LL;
      unsigned int v50 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v25 & 2) == 0) {
        goto LABEL_37;
      }
      v49 = 2LL;
      unsigned int v50 = 429LL;
    }

    breakpoint_break((uint64_t)v53, (volatile int *)v50, v49, v36, v13);
LABEL_37:
    uint32x4_t v37 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v35) defaultFbufStream];
    uint64_t v38 = (unsigned int *)((char *)v37 + 56);
    do
      uint64_t v39 = __ldaxr(v38);
    while (__stlxr(1u, v38));
    if (v39 == 1)
    {
      do
      {
        while (*v38 == 1)
          ;
        do
          uint32x4_t v40 = __ldaxr(v38);
        while (__stlxr(1u, v38));
      }

      while (v40 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v37, (GPUTools::FB::Fbuf *)v53, *(unsigned int *)v53[0], 1);
    atomic_store(0, v38);
    do
    {
      uint32x4_t v41 = __ldaxr(v14);
      uint32x4_t v42 = v41 - 1;
    }

    while (__stlxr(v42, v14));
    if (gCheckGLErrors) {
      v43 = v42 < 1;
    }
    else {
      v43 = 1;
    }
    if (!v43) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    goto LABEL_50;
  }

  do
    uint64_t v44 = __ldaxr(v14);
  while (__stlxr(v44 - 1, v14));
  [(id)DYGetGLGuestAppClient(v22) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, const void *))(*(void *)(v13 + 24) + 1504LL))( a1,  a2,  a3,  a4);
LABEL_50:
  if (v53[0]) {
    free(v53[0]);
  }
}

    NSUInteger v34 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v34) {
      NSUInteger v34 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v56, v35);
    }
    uint32x4_t v37 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v15 + 3404);
    if ((_DWORD)v37) {
      NSUInteger v34 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v56, v37, v36);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v34), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v15, (uint64_t)v56);
    }
    uint64_t v38 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v15 + 3480),  (GPUTools::FB::Fbuf *)(v15 + 3520),  (GPUTools::FB *)v56);
    uint64_t v39 = *(unsigned int *)(v15 + 3404);
    if ((_DWORD)v39 && gBreakOnError)
    {
      uint64_t v52 = 3LL;
      uint32x4_t v53 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v28 & 2) == 0) {
        goto LABEL_37;
      }
      uint64_t v52 = 2LL;
      uint32x4_t v53 = 582LL;
    }

    breakpoint_break((uint64_t)v56, (volatile int *)v53, v52, v39, v15);
LABEL_37:
    uint32x4_t v40 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v38) defaultFbufStream];
    uint32x4_t v41 = (unsigned int *)((char *)v40 + 56);
    do
      uint32x4_t v42 = __ldaxr(v41);
    while (__stlxr(1u, v41));
    if (v42 == 1)
    {
      do
      {
        while (*v41 == 1)
          ;
        do
          v43 = __ldaxr(v41);
        while (__stlxr(1u, v41));
      }

      while (v43 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v40, (GPUTools::FB::Fbuf *)v56, *(unsigned int *)v56[0], 1);
    atomic_store(0, v41);
    do
    {
      uint64_t v44 = __ldaxr(v16);
      unsigned int v45 = v44 - 1;
    }

    while (__stlxr(v45, v16));
    if (gCheckGLErrors) {
      unsigned int v46 = v45 < 1;
    }
    else {
      unsigned int v46 = 1;
    }
    if (!v46) {
      handle_opengl_thread_conflict((const void **)v15);
    }
    goto LABEL_50;
  }

  do
    uint64_t v47 = __ldaxr(v16);
  while (__stlxr(v47 - 1, v16));
  [(id)DYGetGLGuestAppClient(v24) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, const void *))(*(void *)(v15 + 24) + 2312LL))( a1,  a2,  a3,  a4,  a5);
LABEL_50:
  if (v56[0]) {
    free(v56[0]);
  }
}

    uint64_t v33 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v33) {
      uint64_t v33 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v55, v34);
    }
    uint32x4_t v36 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v15 + 3404);
    if ((_DWORD)v36) {
      uint64_t v33 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v55, v36, v35);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v15, (uint64_t)v55);
    }
    uint32x4_t v37 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v15 + 3480),  (GPUTools::FB::Fbuf *)(v15 + 3520),  (GPUTools::FB *)v55);
    uint64_t v38 = *(unsigned int *)(v15 + 3404);
    if ((_DWORD)v38 && gBreakOnError)
    {
      uint64_t v51 = 3LL;
      uint64_t v52 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v27 & 2) == 0) {
        goto LABEL_37;
      }
      uint64_t v51 = 2LL;
      uint64_t v52 = 732LL;
    }

    breakpoint_break((uint64_t)v55, (volatile int *)v52, v51, v38, v15);
LABEL_37:
    uint64_t v39 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v37) defaultFbufStream];
    uint32x4_t v40 = (unsigned int *)((char *)v39 + 56);
    do
      uint32x4_t v41 = __ldaxr(v40);
    while (__stlxr(1u, v40));
    if (v41 == 1)
    {
      do
      {
        while (*v40 == 1)
          ;
        do
          uint32x4_t v42 = __ldaxr(v40);
        while (__stlxr(1u, v40));
      }

      while (v42 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v39, (GPUTools::FB::Fbuf *)v55, *(unsigned int *)v55[0], 1);
    atomic_store(0, v40);
    do
    {
      v43 = __ldaxr(v16);
      uint64_t v44 = v43 - 1;
    }

    while (__stlxr(v44, v16));
    if (gCheckGLErrors) {
      unsigned int v45 = v44 < 1;
    }
    else {
      unsigned int v45 = 1;
    }
    if (!v45) {
      handle_opengl_thread_conflict((const void **)v15);
    }
    goto LABEL_50;
  }

  do
    unsigned int v46 = __ldaxr(v16);
  while (__stlxr(v46 - 1, v16));
  [(id)DYGetGLGuestAppClient(v24) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, const void *))(*(void *)(v15 + 24) + 2672LL))( a1,  a2,  a3,  a4,  a5);
LABEL_50:
  if (v55[0]) {
    free(v55[0]);
  }
}

    uint32x4_t v26 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v21), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v26) {
      uint32x4_t v26 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v48, v27);
    }
    unint64_t v29 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
    if ((_DWORD)v29) {
      uint32x4_t v26 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v48, v29, v28);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v26), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v9, (uint64_t)v48);
    }
    uint64_t v30 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)v48);
    int v31 = *(unsigned int *)(v9 + 3404);
    if ((_DWORD)v31 && gBreakOnError)
    {
      uint64_t v44 = 3LL;
      unsigned int v45 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v20 & 2) == 0) {
        goto LABEL_37;
      }
      uint64_t v44 = 2LL;
      unsigned int v45 = 44LL;
    }

    breakpoint_break((uint64_t)v48, (volatile int *)v45, v44, v31, v9);
LABEL_37:
    unsigned int v32 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v30) defaultFbufStream];
    uint64_t v33 = (unsigned int *)((char *)v32 + 56);
    do
      NSUInteger v34 = __ldaxr(v33);
    while (__stlxr(1u, v33));
    if (v34 == 1)
    {
      do
      {
        while (*v33 == 1)
          ;
        do
          uint64_t v35 = __ldaxr(v33);
        while (__stlxr(1u, v33));
      }

      while (v35 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v32, (GPUTools::FB::Fbuf *)v48, *(unsigned int *)v48[0], 1);
    atomic_store(0, v33);
    *(_DWORD *)(v9 + 2076) = a2;
    do
    {
      uint32x4_t v36 = __ldaxr(v10);
      uint32x4_t v37 = v36 - 1;
    }

    while (__stlxr(v37, v10));
    if (gCheckGLErrors) {
      uint64_t v38 = v37 < 1;
    }
    else {
      uint64_t v38 = 1;
    }
    if (!v38) {
      handle_opengl_thread_conflict((const void **)v9);
    }
    goto LABEL_50;
  }

  do
    uint64_t v39 = __ldaxr(v10);
  while (__stlxr(v39 - 1, v10));
  [(id)DYGetGLGuestAppClient(v18) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 2728LL))(a1, a2);
LABEL_50:
  if (v48[0]) {
    free(v48[0]);
  }
}

    uint32x4_t v26 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v21), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v26) {
      uint32x4_t v26 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v48, v27);
    }
    unint64_t v29 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
    if ((_DWORD)v29) {
      uint32x4_t v26 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v48, v29, v28);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v26), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v9, (uint64_t)v48);
    }
    uint64_t v30 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)v48);
    int v31 = *(unsigned int *)(v9 + 3404);
    if ((_DWORD)v31 && gBreakOnError)
    {
      uint64_t v44 = 3LL;
      unsigned int v45 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v20 & 2) == 0) {
        goto LABEL_37;
      }
      unsigned int v45 = 2LL;
      uint64_t v44 = 2LL;
    }

    breakpoint_break((uint64_t)v48, (volatile int *)v45, v44, v31, v9);
LABEL_37:
    unsigned int v32 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v30) defaultFbufStream];
    uint64_t v33 = (unsigned int *)((char *)v32 + 56);
    do
      NSUInteger v34 = __ldaxr(v33);
    while (__stlxr(1u, v33));
    if (v34 == 1)
    {
      do
      {
        while (*v33 == 1)
          ;
        do
          uint64_t v35 = __ldaxr(v33);
        while (__stlxr(1u, v33));
      }

      while (v35 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v32, (GPUTools::FB::Fbuf *)v48, *(unsigned int *)v48[0], 1);
    atomic_store(0, v33);
    *(_DWORD *)(v9 + 2072) = a2;
    do
    {
      uint32x4_t v36 = __ldaxr(v10);
      uint32x4_t v37 = v36 - 1;
    }

    while (__stlxr(v37, v10));
    if (gCheckGLErrors) {
      uint64_t v38 = v37 < 1;
    }
    else {
      uint64_t v38 = 1;
    }
    if (!v38) {
      handle_opengl_thread_conflict((const void **)v9);
    }
    goto LABEL_50;
  }

  do
    uint64_t v39 = __ldaxr(v10);
  while (__stlxr(v39 - 1, v10));
  [(id)DYGetGLGuestAppClient(v18) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 2736LL))(a1, a2);
LABEL_50:
  if (v48[0]) {
    free(v48[0]);
  }
}

    int v31 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v26), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v31) {
      int v31 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v53, v32);
    }
    NSUInteger v34 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v34) {
      int v31 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v53, v34, v33);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v31), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v53);
    }
    uint64_t v35 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v53);
    uint32x4_t v36 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v36 && gBreakOnError)
    {
      v49 = 3LL;
      unsigned int v50 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v25 & 2) == 0) {
        goto LABEL_37;
      }
      v49 = 2LL;
      unsigned int v50 = 832LL;
    }

    breakpoint_break((uint64_t)v53, (volatile int *)v50, v49, v36, v13);
LABEL_37:
    uint32x4_t v37 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v35) defaultFbufStream];
    uint64_t v38 = (unsigned int *)((char *)v37 + 56);
    do
      uint64_t v39 = __ldaxr(v38);
    while (__stlxr(1u, v38));
    if (v39 == 1)
    {
      do
      {
        while (*v38 == 1)
          ;
        do
          uint32x4_t v40 = __ldaxr(v38);
        while (__stlxr(1u, v38));
      }

      while (v40 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v37, (GPUTools::FB::Fbuf *)v53, *(unsigned int *)v53[0], 1);
    atomic_store(0, v38);
    do
    {
      uint32x4_t v41 = __ldaxr(v14);
      uint32x4_t v42 = v41 - 1;
    }

    while (__stlxr(v42, v14));
    if (gCheckGLErrors) {
      v43 = v42 < 1;
    }
    else {
      v43 = 1;
    }
    if (!v43) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    goto LABEL_50;
  }

  do
    uint64_t v44 = __ldaxr(v14);
  while (__stlxr(v44 - 1, v14));
  [(id)DYGetGLGuestAppClient(v18) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 + 24) + 3576LL))( a1,  a2,  a3,  a4);
LABEL_50:
  if (v53[0]) {
    free(v53[0]);
  }
}

    unsigned int v32 = v57;
    uint64_t v56 = *((_OWORD *)v57 + 1);
    uint32x4_t v58 = v57;
    if (v59 >= 0x24)
    {
      *((_DWORD *)v57 + 8) = 0;
      NSUInteger *v32 = 0u;
      v32[1] = 0u;
    }

    GPUTools::FB::Encode((uint64_t)&v57, 202LL, 0LL, v11 + 4709, v24, v25, v26, v27, *(void *)v11);
    *((_OWORD *)v57 + 1) = v56;
    NSUInteger v34 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v34) {
      NSUInteger v34 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v57, v35);
    }
    uint32x4_t v37 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v37) {
      NSUInteger v34 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v57, v37, v36);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v34), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)&v57);
    }
    uint64_t v38 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v57);
    uint64_t v39 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v39 && gBreakOnError)
    {
      uint64_t v52 = 3LL;
      uint32x4_t v53 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v23 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v52 = 2LL;
      uint32x4_t v53 = 202LL;
    }

    breakpoint_break((uint64_t)&v57, (volatile int *)v53, v52, v39, v11);
LABEL_39:
    uint32x4_t v40 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v38) defaultFbufStream];
    uint32x4_t v41 = (unsigned int *)((char *)v40 + 56);
    do
      uint32x4_t v42 = __ldaxr(v41);
    while (__stlxr(1u, v41));
    if (v42 == 1)
    {
      do
      {
        while (*v41 == 1)
          ;
        do
          v43 = __ldaxr(v41);
        while (__stlxr(1u, v41));
      }

      while (v43 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v40, (GPUTools::FB::Fbuf *)&v57, *(unsigned int *)v57, 1);
    atomic_store(0, v41);
    do
    {
      uint64_t v44 = __ldaxr(v12);
      unsigned int v45 = v44 - 1;
    }

    while (__stlxr(v45, v12));
    if (gCheckGLErrors) {
      unsigned int v46 = v45 < 1;
    }
    else {
      unsigned int v46 = 1;
    }
    if (!v46) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    goto LABEL_52;
  }

  do
    uint64_t v47 = __ldaxr(v12);
  while (__stlxr(v47 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, unsigned int *))(*(void *)(v11 + 24) + 3704LL))(a1, a2, a3);
LABEL_52:
  if (v57) {
    free(v57);
  }
}

    uint32x4_t v28 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v23), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v28) {
      uint32x4_t v28 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v50, v29);
    }
    int v31 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v31) {
      uint32x4_t v28 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v50, v31, v30);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)v50);
    }
    unsigned int v32 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)v50);
    uint64_t v33 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v33 && gBreakOnError)
    {
      unsigned int v46 = 3LL;
      uint64_t v47 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v22 & 2) == 0) {
        goto LABEL_37;
      }
      unsigned int v46 = 2LL;
      uint64_t v47 = 120LL;
    }

    breakpoint_break((uint64_t)v50, (volatile int *)v47, v46, v33, v11);
LABEL_37:
    NSUInteger v34 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v32) defaultFbufStream];
    uint64_t v35 = (unsigned int *)((char *)v34 + 56);
    do
      uint32x4_t v36 = __ldaxr(v35);
    while (__stlxr(1u, v35));
    if (v36 == 1)
    {
      do
      {
        while (*v35 == 1)
          ;
        do
          uint32x4_t v37 = __ldaxr(v35);
        while (__stlxr(1u, v35));
      }

      while (v37 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v34, (GPUTools::FB::Fbuf *)v50, *(unsigned int *)v50[0], 1);
    atomic_store(0, v35);
    do
    {
      uint64_t v38 = __ldaxr(v12);
      uint64_t v39 = v38 - 1;
    }

    while (__stlxr(v39, v12));
    if (gCheckGLErrors) {
      uint32x4_t v40 = v39 < 1;
    }
    else {
      uint32x4_t v40 = 1;
    }
    if (!v40) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    goto LABEL_50;
  }

  do
    uint32x4_t v41 = __ldaxr(v12);
  while (__stlxr(v41 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, const unsigned int *))(*(void *)(v11 + 24) + 3712LL))( a1,  a2,  a3);
LABEL_50:
  if (v50[0]) {
    free(v50[0]);
  }
}

    uint32x4_t v28 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v23), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v28) {
      uint32x4_t v28 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v50, v29);
    }
    int v31 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v31) {
      uint32x4_t v28 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v50, v31, v30);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)v50);
    }
    unsigned int v32 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)v50);
    uint64_t v33 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v33 && gBreakOnError)
    {
      unsigned int v46 = 3LL;
      uint64_t v47 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v22 & 2) == 0) {
        goto LABEL_37;
      }
      unsigned int v46 = 2LL;
      uint64_t v47 = 675LL;
    }

    breakpoint_break((uint64_t)v50, (volatile int *)v47, v46, v33, v11);
LABEL_37:
    NSUInteger v34 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v32) defaultFbufStream];
    uint64_t v35 = (unsigned int *)((char *)v34 + 56);
    do
      uint32x4_t v36 = __ldaxr(v35);
    while (__stlxr(1u, v35));
    if (v36 == 1)
    {
      do
      {
        while (*v35 == 1)
          ;
        do
          uint32x4_t v37 = __ldaxr(v35);
        while (__stlxr(1u, v35));
      }

      while (v37 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v34, (GPUTools::FB::Fbuf *)v50, *(unsigned int *)v50[0], 1);
    atomic_store(0, v35);
    wrapper_cache_vertex_attrib((char *)v11, a2, 5126, a3, 0.0, 0.0, 1.0);
    do
    {
      uint64_t v38 = __ldaxr(v12);
      uint64_t v39 = v38 - 1;
    }

    while (__stlxr(v39, v12));
    if (gCheckGLErrors) {
      uint32x4_t v40 = v39 < 1;
    }
    else {
      uint32x4_t v40 = 1;
    }
    if (!v40) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    goto LABEL_50;
  }

  do
    uint32x4_t v41 = __ldaxr(v12);
  while (__stlxr(v41 - 1, v12));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, float))(*(void *)(v11 + 24) + 3808LL))(a1, a2, a3);
LABEL_50:
  if (v50[0]) {
    free(v50[0]);
  }
}

    uint64_t v30 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v25), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v30) {
      uint64_t v30 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v52, v31);
    }
    uint64_t v33 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v33) {
      uint64_t v30 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v52, v33, v32);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v30), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v52);
    }
    NSUInteger v34 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v52);
    uint64_t v35 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v35 && gBreakOnError)
    {
      unsigned int v48 = 3LL;
      v49 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v24 & 2) == 0) {
        goto LABEL_37;
      }
      unsigned int v48 = 2LL;
      v49 = 681LL;
    }

    breakpoint_break((uint64_t)v52, (volatile int *)v49, v48, v35, v13);
LABEL_37:
    uint32x4_t v36 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v34) defaultFbufStream];
    uint32x4_t v37 = (unsigned int *)((char *)v36 + 56);
    do
      uint64_t v38 = __ldaxr(v37);
    while (__stlxr(1u, v37));
    if (v38 == 1)
    {
      do
      {
        while (*v37 == 1)
          ;
        do
          uint64_t v39 = __ldaxr(v37);
        while (__stlxr(1u, v37));
      }

      while (v39 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v36, (GPUTools::FB::Fbuf *)v52, *(unsigned int *)v52[0], 1);
    atomic_store(0, v37);
    wrapper_cache_vertex_attrib((char *)v13, a2, 5126, a3, a4, 0.0, 1.0);
    do
    {
      uint32x4_t v40 = __ldaxr(v14);
      uint32x4_t v41 = v40 - 1;
    }

    while (__stlxr(v41, v14));
    if (gCheckGLErrors) {
      uint32x4_t v42 = v41 < 1;
    }
    else {
      uint32x4_t v42 = 1;
    }
    if (!v42) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    goto LABEL_50;
  }

  do
    v43 = __ldaxr(v14);
  while (__stlxr(v43 - 1, v14));
  [(id)DYGetGLGuestAppClient(v22) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, float, float))(*(void *)(v13 + 24) + 3832LL))(a1, a2, a3, a4);
LABEL_50:
  if (v52[0]) {
    free(v52[0]);
  }
}

    unsigned int v32 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v32) {
      unsigned int v32 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v54, v33);
    }
    uint64_t v35 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v15 + 3404);
    if ((_DWORD)v35) {
      unsigned int v32 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v54, v35, v34);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v15, (uint64_t)v54);
    }
    uint32x4_t v36 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v15 + 3480),  (GPUTools::FB::Fbuf *)(v15 + 3520),  (GPUTools::FB *)v54);
    uint32x4_t v37 = *(unsigned int *)(v15 + 3404);
    if ((_DWORD)v37 && gBreakOnError)
    {
      unsigned int v50 = 3LL;
      uint64_t v51 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v26 & 2) == 0) {
        goto LABEL_37;
      }
      unsigned int v50 = 2LL;
      uint64_t v51 = 687LL;
    }

    breakpoint_break((uint64_t)v54, (volatile int *)v51, v50, v37, v15);
LABEL_37:
    uint64_t v38 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v36) defaultFbufStream];
    uint64_t v39 = (unsigned int *)((char *)v38 + 56);
    do
      uint32x4_t v40 = __ldaxr(v39);
    while (__stlxr(1u, v39));
    if (v40 == 1)
    {
      do
      {
        while (*v39 == 1)
          ;
        do
          uint32x4_t v41 = __ldaxr(v39);
        while (__stlxr(1u, v39));
      }

      while (v41 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v38, (GPUTools::FB::Fbuf *)v54, *(unsigned int *)v54[0], 1);
    atomic_store(0, v39);
    wrapper_cache_vertex_attrib((char *)v15, a2, 5126, a3, a4, a5, 1.0);
    do
    {
      uint32x4_t v42 = __ldaxr(v16);
      v43 = v42 - 1;
    }

    while (__stlxr(v43, v16));
    if (gCheckGLErrors) {
      uint64_t v44 = v43 < 1;
    }
    else {
      uint64_t v44 = 1;
    }
    if (!v44) {
      handle_opengl_thread_conflict((const void **)v15);
    }
    goto LABEL_50;
  }

  do
    unsigned int v45 = __ldaxr(v16);
  while (__stlxr(v45 - 1, v16));
  [(id)DYGetGLGuestAppClient(v24) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, float, float, float))(*(void *)(v15 + 24) + 3856LL))( a1,  a2,  a3,  a4,  a5);
LABEL_50:
  if (v54[0]) {
    free(v54[0]);
  }
}

    NSUInteger v34 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v34) {
      NSUInteger v34 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v56, v35);
    }
    uint32x4_t v37 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v17 + 3404);
    if ((_DWORD)v37) {
      NSUInteger v34 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v56, v37, v36);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v34), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v17, (uint64_t)v56);
    }
    uint64_t v38 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v17 + 3480),  (GPUTools::FB::Fbuf *)(v17 + 3520),  (GPUTools::FB *)v56);
    uint64_t v39 = *(unsigned int *)(v17 + 3404);
    if ((_DWORD)v39 && gBreakOnError)
    {
      uint64_t v52 = 3LL;
      uint32x4_t v53 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v28 & 2) == 0) {
        goto LABEL_37;
      }
      uint64_t v52 = 2LL;
      uint32x4_t v53 = 701LL;
    }

    breakpoint_break((uint64_t)v56, (volatile int *)v53, v52, v39, v17);
LABEL_37:
    uint32x4_t v40 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v38) defaultFbufStream];
    uint32x4_t v41 = (unsigned int *)((char *)v40 + 56);
    do
      uint32x4_t v42 = __ldaxr(v41);
    while (__stlxr(1u, v41));
    if (v42 == 1)
    {
      do
      {
        while (*v41 == 1)
          ;
        do
          v43 = __ldaxr(v41);
        while (__stlxr(1u, v41));
      }

      while (v43 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v40, (GPUTools::FB::Fbuf *)v56, *(unsigned int *)v56[0], 1);
    atomic_store(0, v41);
    wrapper_cache_vertex_attrib((char *)v17, a2, 5126, a3, a4, a5, a6);
    do
    {
      uint64_t v44 = __ldaxr(v18);
      unsigned int v45 = v44 - 1;
    }

    while (__stlxr(v45, v18));
    if (gCheckGLErrors) {
      unsigned int v46 = v45 < 1;
    }
    else {
      unsigned int v46 = 1;
    }
    if (!v46) {
      handle_opengl_thread_conflict((const void **)v17);
    }
    goto LABEL_50;
  }

  do
    uint64_t v47 = __ldaxr(v18);
  while (__stlxr(v47 - 1, v18));
  [(id)DYGetGLGuestAppClient(v26) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, float, float, float, float))(*(void *)(v17 + 24) + 3880LL))( a1,  a2,  a3,  a4,  a5,  a6);
LABEL_50:
  if (v56[0]) {
    free(v56[0]);
  }
}

    uint32x4_t v28 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v23), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v28) {
      uint32x4_t v28 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v50, v29);
    }
    int v31 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v31) {
      uint32x4_t v28 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v50, v31, v30);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)v50);
    }
    unsigned int v32 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)v50);
    uint64_t v33 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v33 && gBreakOnError)
    {
      unsigned int v46 = 3LL;
      uint64_t v47 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v22 & 2) == 0) {
        goto LABEL_37;
      }
      unsigned int v46 = 2LL;
      uint64_t v47 = 676LL;
    }

    breakpoint_break((uint64_t)v50, (volatile int *)v47, v46, v33, v11);
LABEL_37:
    NSUInteger v34 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v32) defaultFbufStream];
    uint64_t v35 = (unsigned int *)((char *)v34 + 56);
    do
      uint32x4_t v36 = __ldaxr(v35);
    while (__stlxr(1u, v35));
    if (v36 == 1)
    {
      do
      {
        while (*v35 == 1)
          ;
        do
          uint32x4_t v37 = __ldaxr(v35);
        while (__stlxr(1u, v35));
      }

      while (v37 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v34, (GPUTools::FB::Fbuf *)v50, *(unsigned int *)v50[0], 1);
    atomic_store(0, v35);
    wrapper_cache_vertex_attrib((char *)v11, a2, 5126, *a3, 0.0, 0.0, 1.0);
    do
    {
      uint64_t v38 = __ldaxr(v12);
      uint64_t v39 = v38 - 1;
    }

    while (__stlxr(v39, v12));
    if (gCheckGLErrors) {
      uint32x4_t v40 = v39 < 1;
    }
    else {
      uint32x4_t v40 = 1;
    }
    if (!v40) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    goto LABEL_50;
  }

  do
    uint32x4_t v41 = __ldaxr(v12);
  while (__stlxr(v41 - 1, v12));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, const float *))(*(void *)(v11 + 24) + 3912LL))(a1, a2, a3);
LABEL_50:
  if (v50[0]) {
    free(v50[0]);
  }
}

    uint32x4_t v28 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v23), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v28) {
      uint32x4_t v28 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v50, v29);
    }
    int v31 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v31) {
      uint32x4_t v28 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v50, v31, v30);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)v50);
    }
    unsigned int v32 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)v50);
    uint64_t v33 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v33 && gBreakOnError)
    {
      unsigned int v46 = 3LL;
      uint64_t v47 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v22 & 2) == 0) {
        goto LABEL_37;
      }
      unsigned int v46 = 2LL;
      uint64_t v47 = 682LL;
    }

    breakpoint_break((uint64_t)v50, (volatile int *)v47, v46, v33, v11);
LABEL_37:
    NSUInteger v34 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v32) defaultFbufStream];
    uint64_t v35 = (unsigned int *)((char *)v34 + 56);
    do
      uint32x4_t v36 = __ldaxr(v35);
    while (__stlxr(1u, v35));
    if (v36 == 1)
    {
      do
      {
        while (*v35 == 1)
          ;
        do
          uint32x4_t v37 = __ldaxr(v35);
        while (__stlxr(1u, v35));
      }

      while (v37 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v34, (GPUTools::FB::Fbuf *)v50, *(unsigned int *)v50[0], 1);
    atomic_store(0, v35);
    wrapper_cache_vertex_attrib((char *)v11, a2, 5126, *a3, a3[1], 0.0, 1.0);
    do
    {
      uint64_t v38 = __ldaxr(v12);
      uint64_t v39 = v38 - 1;
    }

    while (__stlxr(v39, v12));
    if (gCheckGLErrors) {
      uint32x4_t v40 = v39 < 1;
    }
    else {
      uint32x4_t v40 = 1;
    }
    if (!v40) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    goto LABEL_50;
  }

  do
    uint32x4_t v41 = __ldaxr(v12);
  while (__stlxr(v41 - 1, v12));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, const float *))(*(void *)(v11 + 24) + 3936LL))(a1, a2, a3);
LABEL_50:
  if (v50[0]) {
    free(v50[0]);
  }
}

    uint32x4_t v28 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v23), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v28) {
      uint32x4_t v28 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v50, v29);
    }
    int v31 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v31) {
      uint32x4_t v28 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v50, v31, v30);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)v50);
    }
    unsigned int v32 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)v50);
    uint64_t v33 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v33 && gBreakOnError)
    {
      unsigned int v46 = 3LL;
      uint64_t v47 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v22 & 2) == 0) {
        goto LABEL_37;
      }
      unsigned int v46 = 2LL;
      uint64_t v47 = 688LL;
    }

    breakpoint_break((uint64_t)v50, (volatile int *)v47, v46, v33, v11);
LABEL_37:
    NSUInteger v34 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v32) defaultFbufStream];
    uint64_t v35 = (unsigned int *)((char *)v34 + 56);
    do
      uint32x4_t v36 = __ldaxr(v35);
    while (__stlxr(1u, v35));
    if (v36 == 1)
    {
      do
      {
        while (*v35 == 1)
          ;
        do
          uint32x4_t v37 = __ldaxr(v35);
        while (__stlxr(1u, v35));
      }

      while (v37 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v34, (GPUTools::FB::Fbuf *)v50, *(unsigned int *)v50[0], 1);
    atomic_store(0, v35);
    wrapper_cache_vertex_attrib((char *)v11, a2, 5126, *a3, a3[1], a3[2], 1.0);
    do
    {
      uint64_t v38 = __ldaxr(v12);
      uint64_t v39 = v38 - 1;
    }

    while (__stlxr(v39, v12));
    if (gCheckGLErrors) {
      uint32x4_t v40 = v39 < 1;
    }
    else {
      uint32x4_t v40 = 1;
    }
    if (!v40) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    goto LABEL_50;
  }

  do
    uint32x4_t v41 = __ldaxr(v12);
  while (__stlxr(v41 - 1, v12));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, const float *))(*(void *)(v11 + 24) + 3960LL))(a1, a2, a3);
LABEL_50:
  if (v50[0]) {
    free(v50[0]);
  }
}

    uint32x4_t v28 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v23), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v28) {
      uint32x4_t v28 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v50, v29);
    }
    int v31 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v31) {
      uint32x4_t v28 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v50, v31, v30);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)v50);
    }
    unsigned int v32 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)v50);
    uint64_t v33 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v33 && gBreakOnError)
    {
      unsigned int v46 = 3LL;
      uint64_t v47 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v22 & 2) == 0) {
        goto LABEL_37;
      }
      unsigned int v46 = 2LL;
      uint64_t v47 = 702LL;
    }

    breakpoint_break((uint64_t)v50, (volatile int *)v47, v46, v33, v11);
LABEL_37:
    NSUInteger v34 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v32) defaultFbufStream];
    uint64_t v35 = (unsigned int *)((char *)v34 + 56);
    do
      uint32x4_t v36 = __ldaxr(v35);
    while (__stlxr(1u, v35));
    if (v36 == 1)
    {
      do
      {
        while (*v35 == 1)
          ;
        do
          uint32x4_t v37 = __ldaxr(v35);
        while (__stlxr(1u, v35));
      }

      while (v37 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v34, (GPUTools::FB::Fbuf *)v50, *(unsigned int *)v50[0], 1);
    atomic_store(0, v35);
    wrapper_cache_vertex_attrib((char *)v11, a2, 5126, *a3, a3[1], a3[2], a3[3]);
    do
    {
      uint64_t v38 = __ldaxr(v12);
      uint64_t v39 = v38 - 1;
    }

    while (__stlxr(v39, v12));
    if (gCheckGLErrors) {
      uint32x4_t v40 = v39 < 1;
    }
    else {
      uint32x4_t v40 = 1;
    }
    if (!v40) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    goto LABEL_50;
  }

  do
    uint32x4_t v41 = __ldaxr(v12);
  while (__stlxr(v41 - 1, v12));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, const float *))(*(void *)(v11 + 24) + 4024LL))(a1, a2, a3);
LABEL_50:
  if (v50[0]) {
    free(v50[0]);
  }
}

    uint64_t v33 = v58;
    uint32x4_t v57 = *((_OWORD *)v58 + 1);
    uint32x4_t v59 = v58;
    if (v60 >= 0x24)
    {
      *((_DWORD *)v58 + 8) = 0;
      *uint64_t v33 = 0u;
      v33[1] = 0u;
    }

    GPUTools::FB::Encode((uint64_t)&v58, 305LL, 256LL, (uint64_t)"Cuie@1t", v25, v26, v27, v28, *(void *)v13);
    *((_OWORD *)v58 + 1) = v57;
    uint64_t v35 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v34), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v35) {
      uint64_t v35 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v58, v36);
    }
    uint64_t v38 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v38) {
      uint64_t v35 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v58, v38, v37);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v35), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)&v58);
    }
    uint64_t v39 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)&v58);
    uint32x4_t v40 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v40 && gBreakOnError)
    {
      uint32x4_t v53 = 3LL;
      uint32x4_t v54 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v24 & 2) == 0) {
        goto LABEL_39;
      }
      uint32x4_t v53 = 2LL;
      uint32x4_t v54 = 305LL;
    }

    breakpoint_break((uint64_t)&v58, (volatile int *)v54, v53, v40, v13);
LABEL_39:
    uint32x4_t v41 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v39) defaultFbufStream];
    uint32x4_t v42 = (unsigned int *)((char *)v41 + 56);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(1u, v42));
    if (v43 == 1)
    {
      do
      {
        while (*v42 == 1)
          ;
        do
          uint64_t v44 = __ldaxr(v42);
        while (__stlxr(1u, v42));
      }

      while (v44 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v41, (GPUTools::FB::Fbuf *)&v58, *(unsigned int *)v58, 1);
    atomic_store(0, v42);
    do
    {
      unsigned int v45 = __ldaxr(v14);
      unsigned int v46 = v45 - 1;
    }

    while (__stlxr(v46, v14));
    if (gCheckGLErrors) {
      uint64_t v47 = v46 < 1;
    }
    else {
      uint64_t v47 = 1;
    }
    if (!v47) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    goto LABEL_52;
  }

  do
    unsigned int v48 = __ldaxr(v14);
  while (__stlxr(v48 - 1, v14));
  [(id)DYGetGLGuestAppClient(v22) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, void **))(*(void *)(v13 + 24) + 4136LL))( a1,  a2,  a3,  a4);
LABEL_52:
  if (v58) {
    free(v58);
  }
}

    uint32x4_t v27 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v22), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v27) {
      uint32x4_t v27 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v49, v28);
    }
    uint64_t v30 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
    if ((_DWORD)v30) {
      uint32x4_t v27 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v49, v30, v29);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v9, (uint64_t)v49);
    }
    int v31 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)v49);
    unsigned int v32 = *(unsigned int *)(v9 + 3404);
    if ((_DWORD)v32 && gBreakOnError)
    {
      unsigned int v45 = 3LL;
      unsigned int v46 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v21 & 2) == 0) {
        goto LABEL_37;
      }
      unsigned int v45 = 2LL;
      unsigned int v46 = 123LL;
    }

    breakpoint_break((uint64_t)v49, (volatile int *)v46, v45, v32, v9);
LABEL_37:
    uint64_t v33 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v31) defaultFbufStream];
    NSUInteger v34 = (unsigned int *)((char *)v33 + 56);
    do
      uint64_t v35 = __ldaxr(v34);
    while (__stlxr(1u, v34));
    if (v35 == 1)
    {
      do
      {
        while (*v34 == 1)
          ;
        do
          uint32x4_t v36 = __ldaxr(v34);
        while (__stlxr(1u, v34));
      }

      while (v36 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v33, (GPUTools::FB::Fbuf *)v49, *(unsigned int *)v49[0], 1);
    atomic_store(0, v34);
    do
    {
      uint32x4_t v37 = __ldaxr(v10);
      uint64_t v38 = v37 - 1;
    }

    while (__stlxr(v38, v10));
    if (gCheckGLErrors) {
      uint64_t v39 = v38 < 1;
    }
    else {
      uint64_t v39 = 1;
    }
    if (!v39) {
      handle_opengl_thread_conflict((const void **)v9);
    }
    goto LABEL_50;
  }

  do
    uint32x4_t v40 = __ldaxr(v10);
  while (__stlxr(v40 - 1, v10));
  [(id)DYGetGLGuestAppClient(v19) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, volatile int *))(*(void *)(v9 + 24) + 4728LL))(a1, a2);
LABEL_50:
  if (v49[0]) {
    free(v49[0]);
  }
}

    unint64_t v29 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v24), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v29) {
      unint64_t v29 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v51, v30);
    }
    unsigned int v32 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v32) {
      unint64_t v29 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v51, v32, v31);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)v51);
    }
    uint64_t v33 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)v51);
    NSUInteger v34 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v34 && gBreakOnError)
    {
      uint64_t v47 = 3LL;
      unsigned int v48 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v23 & 2) == 0) {
        goto LABEL_37;
      }
      uint64_t v47 = 2LL;
      unsigned int v48 = 133LL;
    }

    breakpoint_break((uint64_t)v51, (volatile int *)v48, v47, v34, v11);
LABEL_37:
    uint64_t v35 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v33) defaultFbufStream];
    uint32x4_t v36 = (unsigned int *)((char *)v35 + 56);
    do
      uint32x4_t v37 = __ldaxr(v36);
    while (__stlxr(1u, v36));
    if (v37 == 1)
    {
      do
      {
        while (*v36 == 1)
          ;
        do
          uint64_t v38 = __ldaxr(v36);
        while (__stlxr(1u, v36));
      }

      while (v38 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v35, (GPUTools::FB::Fbuf *)v51, *(unsigned int *)v51[0], 1);
    atomic_store(0, v36);
    do
    {
      uint64_t v39 = __ldaxr(v12);
      uint32x4_t v40 = v39 - 1;
    }

    while (__stlxr(v40, v12));
    if (gCheckGLErrors) {
      uint32x4_t v41 = v40 < 1;
    }
    else {
      uint32x4_t v41 = 1;
    }
    if (!v41) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    goto LABEL_50;
  }

  do
    uint32x4_t v42 = __ldaxr(v12);
  while (__stlxr(v42 - 1, v12));
  [(id)DYGetGLGuestAppClient(v21) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, volatile int *, uint64_t))(*(void *)(v11 + 24) + 4744LL))(a1, a2, a3);
LABEL_50:
  if (v51[0]) {
    free(v51[0]);
  }
}

    uint32x4_t v27 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v22), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v27) {
      uint32x4_t v27 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v67, v28);
    }
    uint64_t v30 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
    if ((_DWORD)v30) {
      uint32x4_t v27 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v67, v30, v29);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v9, (uint64_t)v67);
    }
    int v31 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)v67);
    unsigned int v32 = *(unsigned int *)(v9 + 3404);
    if ((_DWORD)v32 && gBreakOnError)
    {
      uint32x4_t v60 = 3LL;
      uint32x4_t v61 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v21 & 2) == 0) {
        goto LABEL_37;
      }
      uint32x4_t v60 = 2LL;
      uint32x4_t v61 = 93LL;
    }

    breakpoint_break((uint64_t)v67, (volatile int *)v61, v60, v32, v9);
LABEL_37:
    uint64_t v33 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v31) defaultFbufStream];
    NSUInteger v34 = (unsigned int *)((char *)v33 + 56);
    do
      uint64_t v35 = __ldaxr(v34);
    while (__stlxr(1u, v34));
    if (v35 == 1)
    {
      do
      {
        while (*v34 == 1)
          ;
        do
          uint32x4_t v36 = __ldaxr(v34);
        while (__stlxr(1u, v34));
      }

      while (v36 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v33, (GPUTools::FB::Fbuf *)v67, *(unsigned int *)v67[0], 1);
    atomic_store(0, v34);
    if (!gCheckGLErrors) {
      check_errors(v9);
    }
    if (!*(_DWORD *)(v9 + 3404))
    {
      wrapper_cache_shader_post_compile((ContextInfo *)v9, a2);
      info_log = (char *)query_info_log( v9,  a2,  *(void (**)(void, uint64_t, uint64_t, int *))(*(void *)(v9 + 32) + 5256LL),  *(void (**)(void, uint64_t, size_t, void, void *))(*(void *)(v9 + 32) + 5272LL),  (int *)&v66);
      uint64_t v38 = info_log;
      uint64_t v39 = (int)v66;
      if (v66 < 0x401)
      {
        if (v66) {
          info_log[v66 - 1] = 0;
        }
        uint32x4_t v41 = "CiuiiSii";
      }

      else
      {
        uint32x4_t v40 = DYGetGLGuestAppClient(info_log);
        GPUTools::Interpose::DYSavePointer(v40, v39, v38, v9 + 4644, 65LL, 0LL, 1LL, 0LL, 0LL);
        uint32x4_t v41 = "CiuiiU<cb>ii";
      }

      (*(void (**)(void, uint64_t, uint64_t, int *))(*(void *)(v9 + 32) + 5256LL))( *(void *)(v9 + 16),  a2,  35713LL,  &v65);
      (*(void (**)(void, uint64_t, uint64_t, int *))(*(void *)(v9 + 32) + 5256LL))( *(void *)(v9 + 16),  a2,  35712LL,  &v64);
      GPUTools::FB::Encode((uint64_t)v67, 4294955024LL, (uint64_t)v41, v42, v43, v44, v45, v46, *(void *)v9);
      unsigned int v48 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v47) defaultFbufStream];
      v49 = (unsigned int *)((char *)v48 + 56);
      do
        unsigned int v50 = __ldaxr(v49);
      while (__stlxr(1u, v49));
      if (v50 == 1)
      {
        do
        {
          while (*v49 == 1)
            ;
          do
            uint64_t v51 = __ldaxr(v49);
          while (__stlxr(1u, v49));
        }

        while (v51 == 1);
      }

      GPUTools::FB::Stream::Write_nolock(v48, (GPUTools::FB::Fbuf *)v67, *(unsigned int *)v67[0], 1);
      atomic_store(0, v49);
      free(v38);
    }

    do
    {
      uint64_t v52 = __ldaxr(v10);
      uint32x4_t v53 = v52 - 1;
    }

    while (__stlxr(v53, v10));
    if (gCheckGLErrors) {
      uint32x4_t v54 = v53 < 1;
    }
    else {
      uint32x4_t v54 = 1;
    }
    if (!v54) {
      handle_opengl_thread_conflict((const void **)v9);
    }
    goto LABEL_64;
  }

  do
    v55 = __ldaxr(v10);
  while (__stlxr(v55 - 1, v10));
  [(id)DYGetGLGuestAppClient(v19) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 4768LL))(a1, a2);
LABEL_64:
  if (v67[0]) {
    free(v67[0]);
  }
}

    unint64_t v29 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v24), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v29) {
      unint64_t v29 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v51, v30);
    }
    unsigned int v32 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v32) {
      unint64_t v29 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v51, v32, v31);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)v51);
    }
    uint64_t v33 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)v51);
    NSUInteger v34 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v34 && gBreakOnError)
    {
      uint64_t v47 = 3LL;
      unsigned int v48 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v23 & 2) == 0) {
        goto LABEL_37;
      }
      uint64_t v47 = 2LL;
      unsigned int v48 = 6LL;
    }

    breakpoint_break((uint64_t)v51, (volatile int *)v48, v47, v34, v11);
LABEL_37:
    uint64_t v35 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v33) defaultFbufStream];
    uint32x4_t v36 = (unsigned int *)((char *)v35 + 56);
    do
      uint32x4_t v37 = __ldaxr(v36);
    while (__stlxr(1u, v36));
    if (v37 == 1)
    {
      do
      {
        while (*v36 == 1)
          ;
        do
          uint64_t v38 = __ldaxr(v36);
        while (__stlxr(1u, v36));
      }

      while (v38 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v35, (GPUTools::FB::Fbuf *)v51, *(unsigned int *)v51[0], 1);
    atomic_store(0, v36);
    if (!gCheckGLErrors) {
      check_errors(v11);
    }
    if (!*(_DWORD *)(v11 + 3404)) {
      wrapper_cache_shader_post_attach((ContextInfo *)v11, a2, a3);
    }
    do
    {
      uint64_t v39 = __ldaxr(v12);
      uint32x4_t v40 = v39 - 1;
    }

    while (__stlxr(v40, v12));
    if (gCheckGLErrors) {
      uint32x4_t v41 = v40 < 1;
    }
    else {
      uint32x4_t v41 = 1;
    }
    if (!v41) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    goto LABEL_53;
  }

  do
    uint32x4_t v42 = __ldaxr(v12);
  while (__stlxr(v42 - 1, v12));
  [(id)DYGetGLGuestAppClient(v21) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, void *, void *))(*(void *)(v11 + 24) + 4784LL))(a1, a2, a3);
LABEL_53:
  if (v51[0]) {
    free(v51[0]);
  }
}

    check_errors(v9);
    goto LABEL_29;
  }

  do
    uint64_t v74 = __ldaxr(v10);
  while (__stlxr(v74 - 1, v10));
  [(id)DYGetGLGuestAppClient(v19) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 4792LL))(a1, a2);
LABEL_76:
  _Block_object_dispose(&v101, 8);
  if (v107) {
    free(v107);
  }
}

    uint32x4_t v27 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v22), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v27) {
      uint32x4_t v27 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v49, v28);
    }
    uint64_t v30 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
    if ((_DWORD)v30) {
      uint32x4_t v27 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v49, v30, v29);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v9, (uint64_t)v49);
    }
    int v31 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)v49);
    unsigned int v32 = *(unsigned int *)(v9 + 3404);
    if ((_DWORD)v32 && gBreakOnError)
    {
      unsigned int v45 = 3LL;
      unsigned int v46 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v21 & 2) == 0) {
        goto LABEL_37;
      }
      unsigned int v45 = 2LL;
      unsigned int v46 = 645LL;
    }

    breakpoint_break((uint64_t)v49, (volatile int *)v46, v45, v32, v9);
LABEL_37:
    uint64_t v33 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v31) defaultFbufStream];
    NSUInteger v34 = (unsigned int *)((char *)v33 + 56);
    do
      uint64_t v35 = __ldaxr(v34);
    while (__stlxr(1u, v34));
    if (v35 == 1)
    {
      do
      {
        while (*v34 == 1)
          ;
        do
          uint32x4_t v36 = __ldaxr(v34);
        while (__stlxr(1u, v34));
      }

      while (v36 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v33, (GPUTools::FB::Fbuf *)v49, *(unsigned int *)v49[0], 1);
    atomic_store(0, v34);
    if (!gCheckGLErrors) {
      check_errors(v9);
    }
    if (!*(_DWORD *)(v9 + 3404)) {
      wrapper_cache_program_use((ContextInfo *)v9, a2);
    }
    do
    {
      uint32x4_t v37 = __ldaxr(v10);
      uint64_t v38 = v37 - 1;
    }

    while (__stlxr(v38, v10));
    if (gCheckGLErrors) {
      uint64_t v39 = v38 < 1;
    }
    else {
      uint64_t v39 = 1;
    }
    if (!v39) {
      handle_opengl_thread_conflict((const void **)v9);
    }
    goto LABEL_53;
  }

  do
    uint32x4_t v40 = __ldaxr(v10);
  while (__stlxr(v40 - 1, v10));
  [(id)DYGetGLGuestAppClient(v19) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, void *))(*(void *)(v9 + 24) + 4800LL))(a1, a2);
LABEL_53:
  if (v49[0]) {
    free(v49[0]);
  }
}

    uint32x4_t v27 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v22), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v27) {
      uint32x4_t v27 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v49, v28);
    }
    uint64_t v30 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
    if ((_DWORD)v30) {
      uint32x4_t v27 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v49, v30, v29);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v9, (uint64_t)v49);
    }
    int v31 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)v49);
    unsigned int v32 = *(unsigned int *)(v9 + 3404);
    if ((_DWORD)v32 && gBreakOnError)
    {
      unsigned int v45 = 3LL;
      unsigned int v46 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v21 & 2) == 0) {
        goto LABEL_37;
      }
      unsigned int v45 = 2LL;
      unsigned int v46 = 646LL;
    }

    breakpoint_break((uint64_t)v49, (volatile int *)v46, v45, v32, v9);
LABEL_37:
    uint64_t v33 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v31) defaultFbufStream];
    NSUInteger v34 = (unsigned int *)((char *)v33 + 56);
    do
      uint64_t v35 = __ldaxr(v34);
    while (__stlxr(1u, v34));
    if (v35 == 1)
    {
      do
      {
        while (*v34 == 1)
          ;
        do
          uint32x4_t v36 = __ldaxr(v34);
        while (__stlxr(1u, v34));
      }

      while (v36 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v33, (GPUTools::FB::Fbuf *)v49, *(unsigned int *)v49[0], 1);
    atomic_store(0, v34);
    do
    {
      uint32x4_t v37 = __ldaxr(v10);
      uint64_t v38 = v37 - 1;
    }

    while (__stlxr(v38, v10));
    if (gCheckGLErrors) {
      uint64_t v39 = v38 < 1;
    }
    else {
      uint64_t v39 = 1;
    }
    if (!v39) {
      handle_opengl_thread_conflict((const void **)v9);
    }
    goto LABEL_50;
  }

  do
    uint32x4_t v40 = __ldaxr(v10);
  while (__stlxr(v40 - 1, v10));
  [(id)DYGetGLGuestAppClient(v19) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, void *))(*(void *)(v9 + 24) + 4808LL))(a1, a2);
LABEL_50:
  if (v49[0]) {
    free(v49[0]);
  }
}

    int v31 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v26), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v31) {
      int v31 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v53, v32);
    }
    NSUInteger v34 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v34) {
      int v31 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v53, v34, v33);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v31), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v53);
    }
    uint64_t v35 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v53);
    uint32x4_t v36 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v36 && gBreakOnError)
    {
      v49 = 3LL;
      unsigned int v50 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v25 & 2) == 0) {
        goto LABEL_37;
      }
      v49 = 2LL;
      unsigned int v50 = 11LL;
    }

    breakpoint_break((uint64_t)v53, (volatile int *)v50, v49, v36, v13);
LABEL_37:
    uint32x4_t v37 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v35) defaultFbufStream];
    uint64_t v38 = (unsigned int *)((char *)v37 + 56);
    do
      uint64_t v39 = __ldaxr(v38);
    while (__stlxr(1u, v38));
    if (v39 == 1)
    {
      do
      {
        while (*v38 == 1)
          ;
        do
          uint32x4_t v40 = __ldaxr(v38);
        while (__stlxr(1u, v38));
      }

      while (v40 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v37, (GPUTools::FB::Fbuf *)v53, *(unsigned int *)v53[0], 1);
    atomic_store(0, v38);
    do
    {
      uint32x4_t v41 = __ldaxr(v14);
      uint32x4_t v42 = v41 - 1;
    }

    while (__stlxr(v42, v14));
    if (gCheckGLErrors) {
      v43 = v42 < 1;
    }
    else {
      v43 = 1;
    }
    if (!v43) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    goto LABEL_50;
  }

  do
    uint64_t v44 = __ldaxr(v14);
  while (__stlxr(v44 - 1, v14));
  [(id)DYGetGLGuestAppClient(v23) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, void *, uint64_t, const char *))(*(void *)(v13 + 24) + 5040LL))( a1,  a2,  a3,  a4);
LABEL_50:
  if (v53[0]) {
    free(v53[0]);
  }
}

    int v31 = v56;
    v55 = *((_OWORD *)v56 + 1);
    uint32x4_t v57 = v56;
    if (v58 >= 0x24)
    {
      *((_DWORD *)v56 + 8) = 0;
      *int v31 = 0u;
      v31[1] = 0u;
    }

    GPUTools::FB::Encode((uint64_t)&v56, 206LL, 256LL, v11 + 4709, v23, v24, v25, v26, *(void *)v11);
    *((_OWORD *)v56 + 1) = v55;
    uint64_t v33 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v33) {
      uint64_t v33 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v56, v34);
    }
    uint32x4_t v36 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v36) {
      uint64_t v33 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v56, v36, v35);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)&v56);
    }
    uint32x4_t v37 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v56);
    uint64_t v38 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v38 && gBreakOnError)
    {
      uint64_t v51 = 3LL;
      uint64_t v52 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v22 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v51 = 2LL;
      uint64_t v52 = 206LL;
    }

    breakpoint_break((uint64_t)&v56, (volatile int *)v52, v51, v38, v11);
LABEL_39:
    uint64_t v39 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v37) defaultFbufStream];
    uint32x4_t v40 = (unsigned int *)((char *)v39 + 56);
    do
      uint32x4_t v41 = __ldaxr(v40);
    while (__stlxr(1u, v40));
    if (v41 == 1)
    {
      do
      {
        while (*v40 == 1)
          ;
        do
          uint32x4_t v42 = __ldaxr(v40);
        while (__stlxr(1u, v40));
      }

      while (v42 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v39, (GPUTools::FB::Fbuf *)&v56, *(unsigned int *)v56, 1);
    atomic_store(0, v40);
    do
    {
      v43 = __ldaxr(v12);
      uint64_t v44 = v43 - 1;
    }

    while (__stlxr(v44, v12));
    if (gCheckGLErrors) {
      unsigned int v45 = v44 < 1;
    }
    else {
      unsigned int v45 = 1;
    }
    if (!v45) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    goto LABEL_52;
  }

  do
    unsigned int v46 = __ldaxr(v12);
  while (__stlxr(v46 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, unsigned int *))(*(void *)(v11 + 24) + 5072LL))(a1, a2, a3);
LABEL_52:
  if (v56) {
    free(v56);
  }
}

    uint32x4_t v28 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v23), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v28) {
      uint32x4_t v28 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v50, v29);
    }
    int v31 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v31) {
      uint32x4_t v28 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v50, v31, v30);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)v50);
    }
    unsigned int v32 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)v50);
    uint64_t v33 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v33 && gBreakOnError)
    {
      unsigned int v46 = 3LL;
      uint64_t v47 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v22 & 2) == 0) {
        goto LABEL_37;
      }
      unsigned int v46 = 2LL;
      uint64_t v47 = 125LL;
    }

    breakpoint_break((uint64_t)v50, (volatile int *)v47, v46, v33, v11);
LABEL_37:
    NSUInteger v34 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v32) defaultFbufStream];
    uint64_t v35 = (unsigned int *)((char *)v34 + 56);
    do
      uint32x4_t v36 = __ldaxr(v35);
    while (__stlxr(1u, v35));
    if (v36 == 1)
    {
      do
      {
        while (*v35 == 1)
          ;
        do
          uint32x4_t v37 = __ldaxr(v35);
        while (__stlxr(1u, v35));
      }

      while (v37 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v34, (GPUTools::FB::Fbuf *)v50, *(unsigned int *)v50[0], 1);
    atomic_store(0, v35);
    do
    {
      uint64_t v38 = __ldaxr(v12);
      uint64_t v39 = v38 - 1;
    }

    while (__stlxr(v39, v12));
    if (gCheckGLErrors) {
      uint32x4_t v40 = v39 < 1;
    }
    else {
      uint32x4_t v40 = 1;
    }
    if (!v40) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    goto LABEL_50;
  }

  do
    uint32x4_t v41 = __ldaxr(v12);
  while (__stlxr(v41 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, const unsigned int *))(*(void *)(v11 + 24) + 5080LL))( a1,  a2,  a3);
LABEL_50:
  if (v50[0]) {
    free(v50[0]);
  }
}

    uint32x4_t v28 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v23), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v28) {
      uint32x4_t v28 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v50, v29);
    }
    int v31 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v31) {
      uint32x4_t v28 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v50, v31, v30);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)v50);
    }
    unsigned int v32 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)v50);
    uint64_t v33 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v33 && gBreakOnError)
    {
      unsigned int v46 = 3LL;
      uint64_t v47 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v22 & 2) == 0) {
        goto LABEL_37;
      }
      unsigned int v46 = 2LL;
      uint64_t v47 = 12LL;
    }

    breakpoint_break((uint64_t)v50, (volatile int *)v47, v46, v33, v11);
LABEL_37:
    NSUInteger v34 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v32) defaultFbufStream];
    uint64_t v35 = (unsigned int *)((char *)v34 + 56);
    do
      uint32x4_t v36 = __ldaxr(v35);
    while (__stlxr(1u, v35));
    if (v36 == 1)
    {
      do
      {
        while (*v35 == 1)
          ;
        do
          uint32x4_t v37 = __ldaxr(v35);
        while (__stlxr(1u, v35));
      }

      while (v37 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v34, (GPUTools::FB::Fbuf *)v50, *(unsigned int *)v50[0], 1);
    atomic_store(0, v35);
    if (!gCheckGLErrors) {
      check_errors(v11);
    }
    if (!*(_DWORD *)(v11 + 3404)) {
      wrapper_cache_buffer_binding((_DWORD *)v11, a2, a3);
    }
    do
    {
      uint64_t v38 = __ldaxr(v12);
      uint64_t v39 = v38 - 1;
    }

    while (__stlxr(v39, v12));
    if (gCheckGLErrors) {
      uint32x4_t v40 = v39 < 1;
    }
    else {
      uint32x4_t v40 = 1;
    }
    if (!v40) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    goto LABEL_53;
  }

  do
    uint32x4_t v41 = __ldaxr(v12);
  while (__stlxr(v41 - 1, v12));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t))(*(void *)(v11 + 24) + 5136LL))(a1, a2, a3);
LABEL_53:
  if (v50[0]) {
    free(v50[0]);
  }
}

    uint32x4_t v28 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v23), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v28) {
      uint32x4_t v28 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v50, v29);
    }
    int v31 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v31) {
      uint32x4_t v28 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v50, v31, v30);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)v50);
    }
    unsigned int v32 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)v50);
    uint64_t v33 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v33 && gBreakOnError)
    {
      unsigned int v46 = 3LL;
      uint64_t v47 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v22 & 2) == 0) {
        goto LABEL_37;
      }
      unsigned int v46 = 2LL;
      uint64_t v47 = 119LL;
    }

    breakpoint_break((uint64_t)v50, (volatile int *)v47, v46, v33, v11);
LABEL_37:
    NSUInteger v34 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v32) defaultFbufStream];
    uint64_t v35 = (unsigned int *)((char *)v34 + 56);
    do
      uint32x4_t v36 = __ldaxr(v35);
    while (__stlxr(1u, v35));
    if (v36 == 1)
    {
      do
      {
        while (*v35 == 1)
          ;
        do
          uint32x4_t v37 = __ldaxr(v35);
        while (__stlxr(1u, v35));
      }

      while (v37 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v34, (GPUTools::FB::Fbuf *)v50, *(unsigned int *)v50[0], 1);
    atomic_store(0, v35);
    wrapper_cache_buffer_binding_delete((ContextInfo *)v11, a2, a3);
    do
    {
      uint64_t v38 = __ldaxr(v12);
      uint64_t v39 = v38 - 1;
    }

    while (__stlxr(v39, v12));
    if (gCheckGLErrors) {
      uint32x4_t v40 = v39 < 1;
    }
    else {
      uint32x4_t v40 = 1;
    }
    if (!v40) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    goto LABEL_50;
  }

  do
    uint32x4_t v41 = __ldaxr(v12);
  while (__stlxr(v41 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, volatile int *, const unsigned int *))(*(void *)(v11 + 24) + 5144LL))( a1,  a2,  a3);
LABEL_50:
  if (v50[0]) {
    free(v50[0]);
  }
}

    unsigned int v32 = v57;
    uint64_t v56 = *((_OWORD *)v57 + 1);
    uint32x4_t v58 = v57;
    if (v59 >= 0x24)
    {
      *((_DWORD *)v57 + 8) = 0;
      NSUInteger *v32 = 0u;
      v32[1] = 0u;
    }

    GPUTools::FB::Encode((uint64_t)&v57, 201LL, 0LL, v11 + 4709, v24, v25, v26, v27, *(void *)v11);
    *((_OWORD *)v57 + 1) = v56;
    NSUInteger v34 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v34) {
      NSUInteger v34 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v57, v35);
    }
    uint32x4_t v37 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v37) {
      NSUInteger v34 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v57, v37, v36);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v34), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)&v57);
    }
    uint64_t v38 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v57);
    uint64_t v39 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v39 && gBreakOnError)
    {
      uint64_t v52 = 3LL;
      uint32x4_t v53 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v23 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v52 = 2LL;
      uint32x4_t v53 = 201LL;
    }

    breakpoint_break((uint64_t)&v57, (volatile int *)v53, v52, v39, v11);
LABEL_39:
    uint32x4_t v40 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v38) defaultFbufStream];
    uint32x4_t v41 = (unsigned int *)((char *)v40 + 56);
    do
      uint32x4_t v42 = __ldaxr(v41);
    while (__stlxr(1u, v41));
    if (v42 == 1)
    {
      do
      {
        while (*v41 == 1)
          ;
        do
          v43 = __ldaxr(v41);
        while (__stlxr(1u, v41));
      }

      while (v43 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v40, (GPUTools::FB::Fbuf *)&v57, *(unsigned int *)v57, 1);
    atomic_store(0, v41);
    do
    {
      uint64_t v44 = __ldaxr(v12);
      unsigned int v45 = v44 - 1;
    }

    while (__stlxr(v45, v12));
    if (gCheckGLErrors) {
      unsigned int v46 = v45 < 1;
    }
    else {
      unsigned int v46 = 1;
    }
    if (!v46) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    goto LABEL_52;
  }

  do
    uint64_t v47 = __ldaxr(v12);
  while (__stlxr(v47 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, unsigned int *))(*(void *)(v11 + 24) + 5152LL))(a1, a2, a3);
LABEL_52:
  if (v57) {
    free(v57);
  }
}

    NSUInteger v34 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v34) {
      NSUInteger v34 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v56, v35);
    }
    uint32x4_t v37 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v15 + 3404);
    if ((_DWORD)v37) {
      NSUInteger v34 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v56, v37, v36);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v34), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v15, (uint64_t)v56);
    }
    uint64_t v38 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v15 + 3480),  (GPUTools::FB::Fbuf *)(v15 + 3520),  (GPUTools::FB *)v56);
    uint64_t v39 = *(unsigned int *)(v15 + 3404);
    if ((_DWORD)v39 && gBreakOnError)
    {
      uint64_t v52 = 3LL;
      uint32x4_t v53 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v28 & 2) == 0) {
        goto LABEL_37;
      }
      uint64_t v52 = 2LL;
      uint32x4_t v53 = 31LL;
    }

    breakpoint_break((uint64_t)v56, (volatile int *)v53, v52, v39, v15);
LABEL_37:
    uint32x4_t v40 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v38) defaultFbufStream];
    uint32x4_t v41 = (unsigned int *)((char *)v40 + 56);
    do
      uint32x4_t v42 = __ldaxr(v41);
    while (__stlxr(1u, v41));
    if (v42 == 1)
    {
      do
      {
        while (*v41 == 1)
          ;
        do
          v43 = __ldaxr(v41);
        while (__stlxr(1u, v41));
      }

      while (v43 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v40, (GPUTools::FB::Fbuf *)v56, *(unsigned int *)v56[0], 1);
    atomic_store(0, v41);
    do
    {
      uint64_t v44 = __ldaxr(v16);
      unsigned int v45 = v44 - 1;
    }

    while (__stlxr(v45, v16));
    if (gCheckGLErrors) {
      unsigned int v46 = v45 < 1;
    }
    else {
      unsigned int v46 = 1;
    }
    if (!v46) {
      handle_opengl_thread_conflict((const void **)v15);
    }
    goto LABEL_50;
  }

  do
    uint64_t v47 = __ldaxr(v16);
  while (__stlxr(v47 - 1, v16));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, const void *))(*(void *)(v15 + 24) + 5176LL))( a1,  a2,  a3,  a4,  a5);
LABEL_50:
  if (v56[0]) {
    free(v56[0]);
  }
}

    uint64_t v33 = v58;
    uint32x4_t v57 = *((_OWORD *)v58 + 1);
    uint32x4_t v59 = v58;
    if (v60 >= 0x24)
    {
      *((_DWORD *)v58 + 8) = 0;
      *uint64_t v33 = 0u;
      v33[1] = 0u;
    }

    GPUTools::FB::Encode((uint64_t)&v58, 219LL, 256LL, (uint64_t)"Cee@1t", v25, v26, v27, v28, *(void *)v13);
    *((_OWORD *)v58 + 1) = v57;
    uint64_t v35 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v34), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v35) {
      uint64_t v35 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v58, v36);
    }
    uint64_t v38 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v38) {
      uint64_t v35 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v58, v38, v37);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v35), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)&v58);
    }
    uint64_t v39 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)&v58);
    uint32x4_t v40 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v40 && gBreakOnError)
    {
      uint32x4_t v53 = 3LL;
      uint32x4_t v54 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v24 & 2) == 0) {
        goto LABEL_39;
      }
      uint32x4_t v53 = 2LL;
      uint32x4_t v54 = 219LL;
    }

    breakpoint_break((uint64_t)&v58, (volatile int *)v54, v53, v40, v13);
LABEL_39:
    uint32x4_t v41 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v39) defaultFbufStream];
    uint32x4_t v42 = (unsigned int *)((char *)v41 + 56);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(1u, v42));
    if (v43 == 1)
    {
      do
      {
        while (*v42 == 1)
          ;
        do
          uint64_t v44 = __ldaxr(v42);
        while (__stlxr(1u, v42));
      }

      while (v44 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v41, (GPUTools::FB::Fbuf *)&v58, *(unsigned int *)v58, 1);
    atomic_store(0, v42);
    do
    {
      unsigned int v45 = __ldaxr(v14);
      unsigned int v46 = v45 - 1;
    }

    while (__stlxr(v46, v14));
    if (gCheckGLErrors) {
      uint64_t v47 = v46 < 1;
    }
    else {
      uint64_t v47 = 1;
    }
    if (!v47) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    goto LABEL_52;
  }

  do
    unsigned int v48 = __ldaxr(v14);
  while (__stlxr(v48 - 1, v14));
  [(id)DYGetGLGuestAppClient(v22) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, void **))(*(void *)(v13 + 24) + 5216LL))( a1,  a2,  a3,  a4);
LABEL_52:
  if (v58) {
    free(v58);
  }
}

    uint32x4_t v28 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v23), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v28) {
      uint32x4_t v28 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v50, v29);
    }
    int v31 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v31) {
      uint32x4_t v28 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v50, v31, v30);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)v50);
    }
    unsigned int v32 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)v50);
    uint64_t v33 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v33 && gBreakOnError)
    {
      unsigned int v46 = 3LL;
      uint64_t v47 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v22 & 2) == 0) {
        goto LABEL_37;
      }
      unsigned int v46 = 2LL;
      uint64_t v47 = 141LL;
    }

    breakpoint_break((uint64_t)v50, (volatile int *)v47, v46, v33, v11);
LABEL_37:
    NSUInteger v34 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v32) defaultFbufStream];
    uint64_t v35 = (unsigned int *)((char *)v34 + 56);
    do
      uint32x4_t v36 = __ldaxr(v35);
    while (__stlxr(1u, v35));
    if (v36 == 1)
    {
      do
      {
        while (*v35 == 1)
          ;
        do
          uint32x4_t v37 = __ldaxr(v35);
        while (__stlxr(1u, v35));
      }

      while (v37 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v34, (GPUTools::FB::Fbuf *)v50, *(unsigned int *)v50[0], 1);
    atomic_store(0, v35);
    do
    {
      uint64_t v38 = __ldaxr(v12);
      uint64_t v39 = v38 - 1;
    }

    while (__stlxr(v39, v12));
    if (gCheckGLErrors) {
      uint32x4_t v40 = v39 < 1;
    }
    else {
      uint32x4_t v40 = 1;
    }
    if (!v40) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    goto LABEL_50;
  }

  do
    uint32x4_t v41 = __ldaxr(v12);
  while (__stlxr(v41 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, const unsigned int *))(*(void *)(v11 + 24) + 5232LL))( a1,  a2,  a3);
LABEL_50:
  if (v50[0]) {
    free(v50[0]);
  }
}

    uint32x4_t v28 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v23), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v28) {
      uint32x4_t v28 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v50, v29);
    }
    int v31 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v31) {
      uint32x4_t v28 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v50, v31, v30);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)v50);
    }
    unsigned int v32 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)v50);
    uint64_t v33 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v33 && gBreakOnError)
    {
      unsigned int v46 = 3LL;
      uint64_t v47 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v22 & 2) == 0) {
        goto LABEL_37;
      }
      unsigned int v46 = 2LL;
      uint64_t v47 = 126LL;
    }

    breakpoint_break((uint64_t)v50, (volatile int *)v47, v46, v33, v11);
LABEL_37:
    NSUInteger v34 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v32) defaultFbufStream];
    uint64_t v35 = (unsigned int *)((char *)v34 + 56);
    do
      uint32x4_t v36 = __ldaxr(v35);
    while (__stlxr(1u, v35));
    if (v36 == 1)
    {
      do
      {
        while (*v35 == 1)
          ;
        do
          uint32x4_t v37 = __ldaxr(v35);
        while (__stlxr(1u, v35));
      }

      while (v37 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v34, (GPUTools::FB::Fbuf *)v50, *(unsigned int *)v50[0], 1);
    atomic_store(0, v35);
    do
    {
      uint64_t v38 = __ldaxr(v12);
      uint64_t v39 = v38 - 1;
    }

    while (__stlxr(v39, v12));
    if (gCheckGLErrors) {
      uint32x4_t v40 = v39 < 1;
    }
    else {
      uint32x4_t v40 = 1;
    }
    if (!v40) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    goto LABEL_50;
  }

  do
    uint32x4_t v41 = __ldaxr(v12);
  while (__stlxr(v41 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, const unsigned int *))(*(void *)(v11 + 24) + 5336LL))( a1,  a2,  a3);
LABEL_50:
  if (v50[0]) {
    free(v50[0]);
  }
}

    unsigned int v32 = v57;
    uint64_t v56 = *((_OWORD *)v57 + 1);
    uint32x4_t v58 = v57;
    if (v59 >= 0x24)
    {
      *((_DWORD *)v57 + 8) = 0;
      NSUInteger *v32 = 0u;
      v32[1] = 0u;
    }

    GPUTools::FB::Encode((uint64_t)&v57, 207LL, 0LL, v11 + 4709, v24, v25, v26, v27, *(void *)v11);
    *((_OWORD *)v57 + 1) = v56;
    NSUInteger v34 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v34) {
      NSUInteger v34 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v57, v35);
    }
    uint32x4_t v37 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v37) {
      NSUInteger v34 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v57, v37, v36);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v34), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)&v57);
    }
    uint64_t v38 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v57);
    uint64_t v39 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v39 && gBreakOnError)
    {
      uint64_t v52 = 3LL;
      uint32x4_t v53 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v23 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v52 = 2LL;
      uint32x4_t v53 = 207LL;
    }

    breakpoint_break((uint64_t)&v57, (volatile int *)v53, v52, v39, v11);
LABEL_39:
    uint32x4_t v40 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v38) defaultFbufStream];
    uint32x4_t v41 = (unsigned int *)((char *)v40 + 56);
    do
      uint32x4_t v42 = __ldaxr(v41);
    while (__stlxr(1u, v41));
    if (v42 == 1)
    {
      do
      {
        while (*v41 == 1)
          ;
        do
          v43 = __ldaxr(v41);
        while (__stlxr(1u, v41));
      }

      while (v43 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v40, (GPUTools::FB::Fbuf *)&v57, *(unsigned int *)v57, 1);
    atomic_store(0, v41);
    do
    {
      uint64_t v44 = __ldaxr(v12);
      unsigned int v45 = v44 - 1;
    }

    while (__stlxr(v45, v12));
    if (gCheckGLErrors) {
      unsigned int v46 = v45 < 1;
    }
    else {
      unsigned int v46 = 1;
    }
    if (!v46) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    goto LABEL_52;
  }

  do
    uint64_t v47 = __ldaxr(v12);
  while (__stlxr(v47 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, unsigned int *))(*(void *)(v11 + 24) + 5344LL))(a1, a2, a3);
LABEL_52:
  if (v57) {
    free(v57);
  }
}

    uint32x4_t v28 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v23), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v28) {
      uint32x4_t v28 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v50, v29);
    }
    int v31 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v31) {
      uint32x4_t v28 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v50, v31, v30);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)v50);
    }
    unsigned int v32 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)v50);
    uint64_t v33 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v33 && gBreakOnError)
    {
      unsigned int v46 = 3LL;
      uint64_t v47 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v22 & 2) == 0) {
        goto LABEL_37;
      }
      unsigned int v46 = 2LL;
      uint64_t v47 = 121LL;
    }

    breakpoint_break((uint64_t)v50, (volatile int *)v47, v46, v33, v11);
LABEL_37:
    NSUInteger v34 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v32) defaultFbufStream];
    uint64_t v35 = (unsigned int *)((char *)v34 + 56);
    do
      uint32x4_t v36 = __ldaxr(v35);
    while (__stlxr(1u, v35));
    if (v36 == 1)
    {
      do
      {
        while (*v35 == 1)
          ;
        do
          uint32x4_t v37 = __ldaxr(v35);
        while (__stlxr(1u, v35));
      }

      while (v37 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v34, (GPUTools::FB::Fbuf *)v50, *(unsigned int *)v50[0], 1);
    atomic_store(0, v35);
    do
    {
      uint64_t v38 = __ldaxr(v12);
      uint64_t v39 = v38 - 1;
    }

    while (__stlxr(v39, v12));
    if (gCheckGLErrors) {
      uint32x4_t v40 = v39 < 1;
    }
    else {
      uint32x4_t v40 = 1;
    }
    if (!v40) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    goto LABEL_50;
  }

  do
    uint32x4_t v41 = __ldaxr(v12);
  while (__stlxr(v41 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, const unsigned int *))(*(void *)(v11 + 24) + 5384LL))( a1,  a2,  a3);
LABEL_50:
  if (v50[0]) {
    free(v50[0]);
  }
}

    unsigned int v32 = v57;
    uint64_t v56 = *((_OWORD *)v57 + 1);
    uint32x4_t v58 = v57;
    if (v59 >= 0x24)
    {
      *((_DWORD *)v57 + 8) = 0;
      NSUInteger *v32 = 0u;
      v32[1] = 0u;
    }

    GPUTools::FB::Encode((uint64_t)&v57, 203LL, 0LL, v11 + 4709, v24, v25, v26, v27, *(void *)v11);
    *((_OWORD *)v57 + 1) = v56;
    NSUInteger v34 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v34) {
      NSUInteger v34 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v57, v35);
    }
    uint32x4_t v37 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v37) {
      NSUInteger v34 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v57, v37, v36);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v34), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)&v57);
    }
    uint64_t v38 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v57);
    uint64_t v39 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v39 && gBreakOnError)
    {
      uint64_t v52 = 3LL;
      uint32x4_t v53 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v23 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v52 = 2LL;
      uint32x4_t v53 = 203LL;
    }

    breakpoint_break((uint64_t)&v57, (volatile int *)v53, v52, v39, v11);
LABEL_39:
    uint32x4_t v40 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v38) defaultFbufStream];
    uint32x4_t v41 = (unsigned int *)((char *)v40 + 56);
    do
      uint32x4_t v42 = __ldaxr(v41);
    while (__stlxr(1u, v41));
    if (v42 == 1)
    {
      do
      {
        while (*v41 == 1)
          ;
        do
          v43 = __ldaxr(v41);
        while (__stlxr(1u, v41));
      }

      while (v43 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v40, (GPUTools::FB::Fbuf *)&v57, *(unsigned int *)v57, 1);
    atomic_store(0, v41);
    do
    {
      uint64_t v44 = __ldaxr(v12);
      unsigned int v45 = v44 - 1;
    }

    while (__stlxr(v45, v12));
    if (gCheckGLErrors) {
      unsigned int v46 = v45 < 1;
    }
    else {
      unsigned int v46 = 1;
    }
    if (!v46) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    goto LABEL_52;
  }

  do
    uint64_t v47 = __ldaxr(v12);
  while (__stlxr(v47 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, unsigned int *))(*(void *)(v11 + 24) + 5392LL))(a1, a2, a3);
LABEL_52:
  if (v57) {
    free(v57);
  }
}

    NSUInteger v34 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v34) {
      NSUInteger v34 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v56, v35);
    }
    uint32x4_t v37 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v17 + 3404);
    if ((_DWORD)v37) {
      NSUInteger v34 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v56, v37, v36);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v34), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v17, (uint64_t)v56);
    }
    uint64_t v38 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v17 + 3480),  (GPUTools::FB::Fbuf *)(v17 + 3520),  (GPUTools::FB *)v56);
    uint64_t v39 = *(unsigned int *)(v17 + 3404);
    if ((_DWORD)v39 && gBreakOnError)
    {
      uint64_t v52 = 3LL;
      uint32x4_t v53 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v28 & 2) == 0) {
        goto LABEL_37;
      }
      uint64_t v52 = 2LL;
      uint32x4_t v53 = 15LL;
    }

    breakpoint_break((uint64_t)v56, (volatile int *)v53, v52, v39, v17);
LABEL_37:
    uint32x4_t v40 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v38) defaultFbufStream];
    uint32x4_t v41 = (unsigned int *)((char *)v40 + 56);
    do
      uint32x4_t v42 = __ldaxr(v41);
    while (__stlxr(1u, v41));
    if (v42 == 1)
    {
      do
      {
        while (*v41 == 1)
          ;
        do
          v43 = __ldaxr(v41);
        while (__stlxr(1u, v41));
      }

      while (v43 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v40, (GPUTools::FB::Fbuf *)v56, *(unsigned int *)v56[0], 1);
    atomic_store(0, v41);
    if (!gCheckGLErrors) {
      check_errors(v17);
    }
    if (!*(_DWORD *)(v17 + 3404)) {
      wrapper_cache_buffer_binding((_DWORD *)v17, a2, a4);
    }
    do
    {
      uint64_t v44 = __ldaxr(v18);
      unsigned int v45 = v44 - 1;
    }

    while (__stlxr(v45, v18));
    if (gCheckGLErrors) {
      unsigned int v46 = v45 < 1;
    }
    else {
      unsigned int v46 = 1;
    }
    if (!v46) {
      handle_opengl_thread_conflict((const void **)v17);
    }
    goto LABEL_53;
  }

  do
    uint64_t v47 = __ldaxr(v18);
  while (__stlxr(v47 - 1, v18));
  [(id)DYGetGLGuestAppClient(v26) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 + 24) + 5544LL))( a1,  a2,  a3,  a4,  a5,  a6);
LABEL_53:
  if (v56[0]) {
    free(v56[0]);
  }
}

    uint64_t v30 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v25), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v30) {
      uint64_t v30 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v52, v31);
    }
    uint64_t v33 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v33) {
      uint64_t v30 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v52, v33, v32);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v30), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v52);
    }
    NSUInteger v34 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v52);
    uint64_t v35 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v35 && gBreakOnError)
    {
      unsigned int v48 = 3LL;
      v49 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v24 & 2) == 0) {
        goto LABEL_37;
      }
      unsigned int v48 = 2LL;
      v49 = 13LL;
    }

    breakpoint_break((uint64_t)v52, (volatile int *)v49, v48, v35, v13);
LABEL_37:
    uint32x4_t v36 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v34) defaultFbufStream];
    uint32x4_t v37 = (unsigned int *)((char *)v36 + 56);
    do
      uint64_t v38 = __ldaxr(v37);
    while (__stlxr(1u, v37));
    if (v38 == 1)
    {
      do
      {
        while (*v37 == 1)
          ;
        do
          uint64_t v39 = __ldaxr(v37);
        while (__stlxr(1u, v37));
      }

      while (v39 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v36, (GPUTools::FB::Fbuf *)v52, *(unsigned int *)v52[0], 1);
    atomic_store(0, v37);
    if (!gCheckGLErrors) {
      check_errors(v13);
    }
    if (!*(_DWORD *)(v13 + 3404)) {
      wrapper_cache_buffer_binding((_DWORD *)v13, a2, a4);
    }
    do
    {
      uint32x4_t v40 = __ldaxr(v14);
      uint32x4_t v41 = v40 - 1;
    }

    while (__stlxr(v41, v14));
    if (gCheckGLErrors) {
      uint32x4_t v42 = v41 < 1;
    }
    else {
      uint32x4_t v42 = 1;
    }
    if (!v42) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    goto LABEL_53;
  }

  do
    v43 = __ldaxr(v14);
  while (__stlxr(v43 - 1, v14));
  [(id)DYGetGLGuestAppClient(v22) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 + 24) + 5560LL))( a1,  a2,  a3,  a4);
LABEL_53:
  if (v52[0]) {
    free(v52[0]);
  }
}

    uint32x4_t v26 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v21), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v26) {
      uint32x4_t v26 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v48, v27);
    }
    unint64_t v29 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
    if ((_DWORD)v29) {
      uint32x4_t v26 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v48, v29, v28);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v26), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v9, (uint64_t)v48);
    }
    uint64_t v30 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)v48);
    int v31 = *(unsigned int *)(v9 + 3404);
    if ((_DWORD)v31 && gBreakOnError)
    {
      uint64_t v44 = 3LL;
      unsigned int v45 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v20 & 2) == 0) {
        goto LABEL_37;
      }
      uint64_t v44 = 2LL;
      unsigned int v45 = 10LL;
    }

    breakpoint_break((uint64_t)v48, (volatile int *)v45, v44, v31, v9);
LABEL_37:
    unsigned int v32 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v30) defaultFbufStream];
    uint64_t v33 = (unsigned int *)((char *)v32 + 56);
    do
      NSUInteger v34 = __ldaxr(v33);
    while (__stlxr(1u, v33));
    if (v34 == 1)
    {
      do
      {
        while (*v33 == 1)
          ;
        do
          uint64_t v35 = __ldaxr(v33);
        while (__stlxr(1u, v33));
      }

      while (v35 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v32, (GPUTools::FB::Fbuf *)v48, *(unsigned int *)v48[0], 1);
    atomic_store(0, v33);
    if (!gCheckGLErrors) {
      check_errors(v9);
    }
    if (!*(_DWORD *)(v9 + 3404)) {
      wrapper_cache_active_transform_feedback((ContextInfo *)v9);
    }
    do
    {
      uint32x4_t v36 = __ldaxr(v10);
      uint32x4_t v37 = v36 - 1;
    }

    while (__stlxr(v37, v10));
    if (gCheckGLErrors) {
      uint64_t v38 = v37 < 1;
    }
    else {
      uint64_t v38 = 1;
    }
    if (!v38) {
      handle_opengl_thread_conflict((const void **)v9);
    }
    goto LABEL_53;
  }

  do
    uint64_t v39 = __ldaxr(v10);
  while (__stlxr(v39 - 1, v10));
  [(id)DYGetGLGuestAppClient(v18) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 5568LL))(a1, a2);
LABEL_53:
  if (v48[0]) {
    free(v48[0]);
  }
}

    uint64_t v33 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v33) {
      uint64_t v33 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v55, v34);
    }
    uint32x4_t v36 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v15 + 3404);
    if ((_DWORD)v36) {
      uint64_t v33 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v55, v36, v35);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v15, (uint64_t)v55);
    }
    uint32x4_t v37 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v15 + 3480),  (GPUTools::FB::Fbuf *)(v15 + 3520),  (GPUTools::FB *)v55);
    uint64_t v38 = *(unsigned int *)(v15 + 3404);
    if ((_DWORD)v38 && gBreakOnError)
    {
      uint64_t v51 = 3LL;
      uint64_t v52 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v27 & 2) == 0) {
        goto LABEL_37;
      }
      uint64_t v51 = 2LL;
      uint64_t v52 = 606LL;
    }

    breakpoint_break((uint64_t)v55, (volatile int *)v52, v51, v38, v15);
LABEL_37:
    uint64_t v39 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v37) defaultFbufStream];
    uint32x4_t v40 = (unsigned int *)((char *)v39 + 56);
    do
      uint32x4_t v41 = __ldaxr(v40);
    while (__stlxr(1u, v40));
    if (v41 == 1)
    {
      do
      {
        while (*v40 == 1)
          ;
        do
          uint32x4_t v42 = __ldaxr(v40);
        while (__stlxr(1u, v40));
      }

      while (v42 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v39, (GPUTools::FB::Fbuf *)v55, *(unsigned int *)v55[0], 1);
    atomic_store(0, v40);
    do
    {
      v43 = __ldaxr(v16);
      uint64_t v44 = v43 - 1;
    }

    while (__stlxr(v44, v16));
    if (gCheckGLErrors) {
      unsigned int v45 = v44 < 1;
    }
    else {
      unsigned int v45 = 1;
    }
    if (!v45) {
      handle_opengl_thread_conflict((const void **)v15);
    }
    goto LABEL_50;
  }

  do
    unsigned int v46 = __ldaxr(v16);
  while (__stlxr(v46 - 1, v16));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, const char *const *, uint64_t))(*(void *)(v15 + 24)
                                                                                            + 5584LL))( a1,  a2,  a3,  a4,  a5);
LABEL_50:
  if (v55[0]) {
    free(v55[0]);
  }
}

    uint32x4_t v28 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v23), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v28) {
      uint32x4_t v28 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v50, v29);
    }
    int v31 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v31) {
      uint32x4_t v28 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v50, v31, v30);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)v50);
    }
    unsigned int v32 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)v50);
    uint64_t v33 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v33 && gBreakOnError)
    {
      unsigned int v46 = 3LL;
      uint64_t v47 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v22 & 2) == 0) {
        goto LABEL_37;
      }
      unsigned int v46 = 2LL;
      uint64_t v47 = 723LL;
    }

    breakpoint_break((uint64_t)v50, (volatile int *)v47, v46, v33, v11);
LABEL_37:
    NSUInteger v34 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v32) defaultFbufStream];
    uint64_t v35 = (unsigned int *)((char *)v34 + 56);
    do
      uint32x4_t v36 = __ldaxr(v35);
    while (__stlxr(1u, v35));
    if (v36 == 1)
    {
      do
      {
        while (*v35 == 1)
          ;
        do
          uint32x4_t v37 = __ldaxr(v35);
        while (__stlxr(1u, v35));
      }

      while (v37 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v34, (GPUTools::FB::Fbuf *)v50, *(unsigned int *)v50[0], 1);
    atomic_store(0, v35);
    wrapper_cache_vertex_attrib((char *)v11, a2, 5124, (double)*a3, (double)a3[1], (double)a3[2], (double)a3[3]);
    do
    {
      uint64_t v38 = __ldaxr(v12);
      uint64_t v39 = v38 - 1;
    }

    while (__stlxr(v39, v12));
    if (gCheckGLErrors) {
      uint32x4_t v40 = v39 < 1;
    }
    else {
      uint32x4_t v40 = 1;
    }
    if (!v40) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    goto LABEL_50;
  }

  do
    uint32x4_t v41 = __ldaxr(v12);
  while (__stlxr(v41 - 1, v12));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, const int *))(*(void *)(v11 + 24) + 5776LL))(a1, a2, a3);
LABEL_50:
  if (v50[0]) {
    free(v50[0]);
  }
}

    uint32x4_t v28 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v23), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v28) {
      uint32x4_t v28 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v54, v29);
    }
    int v31 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v31) {
      uint32x4_t v28 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v54, v31, v30);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)v54);
    }
    unsigned int v32 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)v54);
    uint64_t v33 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v33 && gBreakOnError)
    {
      unsigned int v50 = 3LL;
      uint64_t v51 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v22 & 2) == 0) {
        goto LABEL_37;
      }
      unsigned int v50 = 2LL;
      uint64_t v51 = 727LL;
    }

    breakpoint_break((uint64_t)v54, (volatile int *)v51, v50, v33, v11);
LABEL_37:
    NSUInteger v34 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v32) defaultFbufStream];
    uint64_t v35 = (unsigned int *)((char *)v34 + 56);
    do
      uint32x4_t v36 = __ldaxr(v35);
    while (__stlxr(1u, v35));
    if (v36 == 1)
    {
      do
      {
        while (*v35 == 1)
          ;
        do
          uint32x4_t v37 = __ldaxr(v35);
        while (__stlxr(1u, v35));
      }

      while (v37 == 1);
    }

    uint64_t v38 = GPUTools::FB::Stream::Write_nolock(v34, (GPUTools::FB::Fbuf *)v54, *(unsigned int *)v54[0], 1);
    atomic_store(0, v35);
    v38.n128_u32[0] = *a3;
    LODWORD(v39) = a3[1];
    LODWORD(v40) = a3[2];
    LODWORD(v41) = a3[3];
    wrapper_cache_vertex_attrib((char *)v11, a2, 5125, (double)v38.n128_u64[0], (double)v39, (double)v40, (double)v41);
    do
    {
      uint32x4_t v42 = __ldaxr(v12);
      v43 = v42 - 1;
    }

    while (__stlxr(v43, v12));
    if (gCheckGLErrors) {
      uint64_t v44 = v43 < 1;
    }
    else {
      uint64_t v44 = 1;
    }
    if (!v44) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    goto LABEL_50;
  }

  do
    unsigned int v45 = __ldaxr(v12);
  while (__stlxr(v45 - 1, v12));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, unsigned __int32 *))(*(void *)(v11 + 24) + 5808LL))(a1, a2, a3);
LABEL_50:
  if (v54[0]) {
    free(v54[0]);
  }
}

    uint32x4_t v26 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v21), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v26) {
      uint32x4_t v26 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v49, v27);
    }
    unint64_t v29 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
    if ((_DWORD)v29) {
      uint32x4_t v26 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v49, v29, v28);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v26), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v9, (uint64_t)v49);
    }
    uint64_t v30 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)v49);
    int v31 = *(unsigned int *)(v9 + 3404);
    if ((_DWORD)v31 && gBreakOnError)
    {
      unsigned int v45 = 3LL;
      unsigned int v46 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v20 & 2) == 0) {
        goto LABEL_37;
      }
      unsigned int v45 = 2LL;
      unsigned int v46 = 838LL;
    }

    breakpoint_break((uint64_t)v49, (volatile int *)v46, v45, v31, v9);
LABEL_37:
    unsigned int v32 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v30) defaultFbufStream];
    uint64_t v33 = (unsigned int *)((char *)v32 + 56);
    do
      NSUInteger v34 = __ldaxr(v33);
    while (__stlxr(1u, v33));
    if (v34 == 1)
    {
      do
      {
        while (*v33 == 1)
          ;
        do
          uint64_t v35 = __ldaxr(v33);
        while (__stlxr(1u, v33));
      }

      while (v35 == 1);
    }

    uint32x4_t v36 = GPUTools::FB::Stream::Write_nolock(v32, (GPUTools::FB::Fbuf *)v49, *(unsigned int *)v49[0], 1);
    atomic_store(0, v33);
    (*(void (**)(void, uint64_t, uint64_t, __n128))(*(void *)(v9 + 32) + 832LL))( *(void *)(v9 + 16),  34964LL,  v9 + 2032,  v36);
    (*(void (**)(void, uint64_t, uint64_t))(*(void *)(v9 + 32) + 832LL))( *(void *)(v9 + 16),  34965LL,  v9 + 2036);
    do
    {
      uint32x4_t v37 = __ldaxr(v10);
      uint64_t v38 = v37 - 1;
    }

    while (__stlxr(v38, v10));
    if (gCheckGLErrors) {
      uint64_t v39 = v38 < 1;
    }
    else {
      uint64_t v39 = 1;
    }
    if (!v39) {
      handle_opengl_thread_conflict((const void **)v9);
    }
    goto LABEL_50;
  }

  do
    uint32x4_t v40 = __ldaxr(v10);
  while (__stlxr(v40 - 1, v10));
  [(id)DYGetGLGuestAppClient(v18) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 6144LL))(a1, a2);
LABEL_50:
  if (v49[0]) {
    free(v49[0]);
  }
}

    uint32x4_t v28 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v23), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v28) {
      uint32x4_t v28 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v51, v29);
    }
    int v31 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v31) {
      uint32x4_t v28 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v51, v31, v30);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)v51);
    }
    unsigned int v32 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)v51);
    uint64_t v33 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v33 && gBreakOnError)
    {
      uint64_t v47 = 3LL;
      unsigned int v48 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v22 & 2) == 0) {
        goto LABEL_37;
      }
      uint64_t v47 = 2LL;
      unsigned int v48 = 839LL;
    }

    breakpoint_break((uint64_t)v51, (volatile int *)v48, v47, v33, v11);
LABEL_37:
    NSUInteger v34 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v32) defaultFbufStream];
    uint64_t v35 = (unsigned int *)((char *)v34 + 56);
    do
      uint32x4_t v36 = __ldaxr(v35);
    while (__stlxr(1u, v35));
    if (v36 == 1)
    {
      do
      {
        while (*v35 == 1)
          ;
        do
          uint32x4_t v37 = __ldaxr(v35);
        while (__stlxr(1u, v35));
      }

      while (v37 == 1);
    }

    uint64_t v38 = GPUTools::FB::Stream::Write_nolock(v34, (GPUTools::FB::Fbuf *)v51, *(unsigned int *)v51[0], 1);
    atomic_store(0, v35);
    (*(void (**)(void, uint64_t, uint64_t, __n128))(*(void *)(v11 + 32) + 832LL))( *(void *)(v11 + 16),  34964LL,  v11 + 2032,  v38);
    (*(void (**)(void, uint64_t, uint64_t))(*(void *)(v11 + 32) + 832LL))( *(void *)(v11 + 16),  34965LL,  v11 + 2036);
    do
    {
      uint64_t v39 = __ldaxr(v12);
      uint32x4_t v40 = v39 - 1;
    }

    while (__stlxr(v40, v12));
    if (gCheckGLErrors) {
      uint32x4_t v41 = v40 < 1;
    }
    else {
      uint32x4_t v41 = 1;
    }
    if (!v41) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    goto LABEL_50;
  }

  do
    uint32x4_t v42 = __ldaxr(v12);
  while (__stlxr(v42 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, const unsigned int *))(*(void *)(v11 + 24) + 6152LL))( a1,  a2,  a3);
LABEL_50:
  if (v51[0]) {
    free(v51[0]);
  }
}

    unsigned int v32 = v57;
    uint64_t v56 = *((_OWORD *)v57 + 1);
    uint32x4_t v58 = v57;
    if (v59 >= 0x24)
    {
      *((_DWORD *)v57 + 8) = 0;
      NSUInteger *v32 = 0u;
      v32[1] = 0u;
    }

    GPUTools::FB::Encode((uint64_t)&v57, 840LL, 0LL, v11 + 4709, v24, v25, v26, v27, *(void *)v11);
    *((_OWORD *)v57 + 1) = v56;
    NSUInteger v34 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v34) {
      NSUInteger v34 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v57, v35);
    }
    uint32x4_t v37 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v37) {
      NSUInteger v34 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v57, v37, v36);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v34), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)&v57);
    }
    uint64_t v38 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v57);
    uint64_t v39 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v39 && gBreakOnError)
    {
      uint64_t v52 = 3LL;
      uint32x4_t v53 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v23 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v52 = 2LL;
      uint32x4_t v53 = 840LL;
    }

    breakpoint_break((uint64_t)&v57, (volatile int *)v53, v52, v39, v11);
LABEL_39:
    uint32x4_t v40 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v38) defaultFbufStream];
    uint32x4_t v41 = (unsigned int *)((char *)v40 + 56);
    do
      uint32x4_t v42 = __ldaxr(v41);
    while (__stlxr(1u, v41));
    if (v42 == 1)
    {
      do
      {
        while (*v41 == 1)
          ;
        do
          v43 = __ldaxr(v41);
        while (__stlxr(1u, v41));
      }

      while (v43 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v40, (GPUTools::FB::Fbuf *)&v57, *(unsigned int *)v57, 1);
    atomic_store(0, v41);
    do
    {
      uint64_t v44 = __ldaxr(v12);
      unsigned int v45 = v44 - 1;
    }

    while (__stlxr(v45, v12));
    if (gCheckGLErrors) {
      unsigned int v46 = v45 < 1;
    }
    else {
      unsigned int v46 = 1;
    }
    if (!v46) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    goto LABEL_52;
  }

  do
    uint64_t v47 = __ldaxr(v12);
  while (__stlxr(v47 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, unsigned int *))(*(void *)(v11 + 24) + 6160LL))(a1, a2, a3);
LABEL_52:
  if (v57) {
    free(v57);
  }
}

    int v31 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v26), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v31) {
      int v31 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v53, v32);
    }
    NSUInteger v34 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v34) {
      int v31 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v53, v34, v33);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v31), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v53);
    }
    uint64_t v35 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v53);
    uint32x4_t v36 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v36 && gBreakOnError)
    {
      v49 = 3LL;
      unsigned int v50 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v25 & 2) == 0) {
        goto LABEL_37;
      }
      v49 = 2LL;
      unsigned int v50 = 806LL;
    }

    breakpoint_break((uint64_t)v53, (volatile int *)v50, v49, v36, v13);
LABEL_37:
    uint32x4_t v37 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v35) defaultFbufStream];
    uint64_t v38 = (unsigned int *)((char *)v37 + 56);
    do
      uint64_t v39 = __ldaxr(v38);
    while (__stlxr(1u, v38));
    if (v39 == 1)
    {
      do
      {
        while (*v38 == 1)
          ;
        do
          uint32x4_t v40 = __ldaxr(v38);
        while (__stlxr(1u, v38));
      }

      while (v40 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v37, (GPUTools::FB::Fbuf *)v53, *(unsigned int *)v53[0], 1);
    atomic_store(0, v38);
    do
    {
      uint32x4_t v41 = __ldaxr(v14);
      uint32x4_t v42 = v41 - 1;
    }

    while (__stlxr(v42, v14));
    if (gCheckGLErrors) {
      v43 = v42 < 1;
    }
    else {
      v43 = 1;
    }
    if (!v43) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    goto LABEL_50;
  }

  do
    uint64_t v44 = __ldaxr(v14);
  while (__stlxr(v44 - 1, v14));
  [(id)DYGetGLGuestAppClient(v22) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, const void *))(*(void *)(v13 + 24) + 6176LL))( a1,  a2,  a3,  a4);
LABEL_50:
  if (v53[0]) {
    free(v53[0]);
  }
}

    uint64_t v30 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v25), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v30) {
      uint64_t v30 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v52, v31);
    }
    uint64_t v33 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v33) {
      uint64_t v30 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v52, v33, v32);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v30), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v52);
    }
    NSUInteger v34 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v52);
    uint64_t v35 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v35 && gBreakOnError)
    {
      unsigned int v48 = 3LL;
      v49 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v24 & 2) == 0) {
        goto LABEL_37;
      }
      unsigned int v48 = 2LL;
      v49 = 857LL;
    }

    breakpoint_break((uint64_t)v52, (volatile int *)v49, v48, v35, v13);
LABEL_37:
    uint32x4_t v36 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v34) defaultFbufStream];
    uint32x4_t v37 = (unsigned int *)((char *)v36 + 56);
    do
      uint64_t v38 = __ldaxr(v37);
    while (__stlxr(1u, v37));
    if (v38 == 1)
    {
      do
      {
        while (*v37 == 1)
          ;
        do
          uint64_t v39 = __ldaxr(v37);
        while (__stlxr(1u, v37));
      }

      while (v39 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v36, (GPUTools::FB::Fbuf *)v52, *(unsigned int *)v52[0], 1);
    atomic_store(0, v37);
    do
    {
      uint32x4_t v40 = __ldaxr(v14);
      uint32x4_t v41 = v40 - 1;
    }

    while (__stlxr(v41, v14));
    if (gCheckGLErrors) {
      uint32x4_t v42 = v41 < 1;
    }
    else {
      uint32x4_t v42 = 1;
    }
    if (!v42) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    goto LABEL_50;
  }

  do
    v43 = __ldaxr(v14);
  while (__stlxr(v43 - 1, v14));
  [(id)DYGetGLGuestAppClient(v18) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 + 24) + 6368LL))( a1,  a2,  a3,  a4);
LABEL_50:
  if (v52[0]) {
    free(v52[0]);
  }
}

    unsigned int v32 = v57;
    uint64_t v56 = *((_OWORD *)v57 + 1);
    uint32x4_t v58 = v57;
    if (v59 >= 0x24)
    {
      *((_DWORD *)v57 + 8) = 0;
      NSUInteger *v32 = 0u;
      v32[1] = 0u;
    }

    GPUTools::FB::Encode((uint64_t)&v57, 858LL, 0LL, v11 + 4709, v24, v25, v26, v27, *(void *)v11);
    *((_OWORD *)v57 + 1) = v56;
    NSUInteger v34 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v34) {
      NSUInteger v34 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v57, v35);
    }
    uint32x4_t v37 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v37) {
      NSUInteger v34 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v57, v37, v36);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v34), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)&v57);
    }
    uint64_t v38 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v57);
    uint64_t v39 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v39 && gBreakOnError)
    {
      uint64_t v52 = 3LL;
      uint32x4_t v53 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v23 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v52 = 2LL;
      uint32x4_t v53 = 858LL;
    }

    breakpoint_break((uint64_t)&v57, (volatile int *)v53, v52, v39, v11);
LABEL_39:
    uint32x4_t v40 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v38) defaultFbufStream];
    uint32x4_t v41 = (unsigned int *)((char *)v40 + 56);
    do
      uint32x4_t v42 = __ldaxr(v41);
    while (__stlxr(1u, v41));
    if (v42 == 1)
    {
      do
      {
        while (*v41 == 1)
          ;
        do
          v43 = __ldaxr(v41);
        while (__stlxr(1u, v41));
      }

      while (v43 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v40, (GPUTools::FB::Fbuf *)&v57, *(unsigned int *)v57, 1);
    atomic_store(0, v41);
    do
    {
      uint64_t v44 = __ldaxr(v12);
      unsigned int v45 = v44 - 1;
    }

    while (__stlxr(v45, v12));
    if (gCheckGLErrors) {
      unsigned int v46 = v45 < 1;
    }
    else {
      unsigned int v46 = 1;
    }
    if (!v46) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    goto LABEL_52;
  }

  do
    uint64_t v47 = __ldaxr(v12);
  while (__stlxr(v47 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, unsigned int *))(*(void *)(v11 + 24) + 6400LL))(a1, a2, a3);
LABEL_52:
  if (v57) {
    free(v57);
  }
}

    uint32x4_t v28 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v23), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v28) {
      uint32x4_t v28 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v50, v29);
    }
    int v31 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v31) {
      uint32x4_t v28 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v50, v31, v30);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)v50);
    }
    unsigned int v32 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)v50);
    uint64_t v33 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v33 && gBreakOnError)
    {
      unsigned int v46 = 3LL;
      uint64_t v47 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v22 & 2) == 0) {
        goto LABEL_37;
      }
      unsigned int v46 = 2LL;
      uint64_t v47 = 856LL;
    }

    breakpoint_break((uint64_t)v50, (volatile int *)v47, v46, v33, v11);
LABEL_37:
    NSUInteger v34 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v32) defaultFbufStream];
    uint64_t v35 = (unsigned int *)((char *)v34 + 56);
    do
      uint32x4_t v36 = __ldaxr(v35);
    while (__stlxr(1u, v35));
    if (v36 == 1)
    {
      do
      {
        while (*v35 == 1)
          ;
        do
          uint32x4_t v37 = __ldaxr(v35);
        while (__stlxr(1u, v35));
      }

      while (v37 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v34, (GPUTools::FB::Fbuf *)v50, *(unsigned int *)v50[0], 1);
    atomic_store(0, v35);
    do
    {
      uint64_t v38 = __ldaxr(v12);
      uint64_t v39 = v38 - 1;
    }

    while (__stlxr(v39, v12));
    if (gCheckGLErrors) {
      uint32x4_t v40 = v39 < 1;
    }
    else {
      uint32x4_t v40 = 1;
    }
    if (!v40) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    goto LABEL_50;
  }

  do
    uint32x4_t v41 = __ldaxr(v12);
  while (__stlxr(v41 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, const unsigned int *))(*(void *)(v11 + 24) + 6408LL))( a1,  a2,  a3);
LABEL_50:
  if (v50[0]) {
    free(v50[0]);
  }
}

    NSUInteger v34 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v34) {
      NSUInteger v34 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v56, v35);
    }
    uint32x4_t v37 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v17 + 3404);
    if ((_DWORD)v37) {
      NSUInteger v34 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v56, v37, v36);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v34), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v17, (uint64_t)v56);
    }
    uint64_t v38 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v17 + 3480),  (GPUTools::FB::Fbuf *)(v17 + 3520),  (GPUTools::FB *)v56);
    uint64_t v39 = *(unsigned int *)(v17 + 3404);
    if ((_DWORD)v39 && gBreakOnError)
    {
      uint64_t v52 = 3LL;
      uint32x4_t v53 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v28 & 2) == 0) {
        goto LABEL_37;
      }
      uint64_t v52 = 2LL;
      uint32x4_t v53 = 892LL;
    }

    breakpoint_break((uint64_t)v56, (volatile int *)v53, v52, v39, v17);
LABEL_37:
    uint32x4_t v40 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v38) defaultFbufStream];
    uint32x4_t v41 = (unsigned int *)((char *)v40 + 56);
    do
      uint32x4_t v42 = __ldaxr(v41);
    while (__stlxr(1u, v41));
    if (v42 == 1)
    {
      do
      {
        while (*v41 == 1)
          ;
        do
          v43 = __ldaxr(v41);
        while (__stlxr(1u, v41));
      }

      while (v43 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v40, (GPUTools::FB::Fbuf *)v56, *(unsigned int *)v56[0], 1);
    atomic_store(0, v41);
    do
    {
      uint64_t v44 = __ldaxr(v18);
      unsigned int v45 = v44 - 1;
    }

    while (__stlxr(v45, v18));
    if (gCheckGLErrors) {
      unsigned int v46 = v45 < 1;
    }
    else {
      unsigned int v46 = 1;
    }
    if (!v46) {
      handle_opengl_thread_conflict((const void **)v17);
    }
    goto LABEL_50;
  }

  do
    uint64_t v47 = __ldaxr(v18);
  while (__stlxr(v47 - 1, v18));
  [(id)DYGetGLGuestAppClient(v26) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, int *, char *))(*(void *)(v17 + 24) + 6520LL))( a1,  a2,  a3,  a4,  a5,  a6);
LABEL_50:
  if (v56[0]) {
    free(v56[0]);
  }
}

  uint64_t v30 = objc_msgSend(objc_msgSend((id)DYGetGLGuestAppClient(v25), "activeCaptureDescriptor"), "includeBacktraceInFbufs");
  if ((_DWORD)v30) {
    uint64_t v30 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v49, v31);
  }
  uint64_t v33 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
  if ((_DWORD)v33) {
    uint64_t v30 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v49, v33, v32);
  }
  if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v30), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
    encode_driver_events((id *)v11, (uint64_t)v49);
  }
  NSUInteger v34 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)v49);
  uint64_t v35 = *(unsigned int *)(v11 + 3404);
  if ((_DWORD)v35 && gBreakOnError)
  {
    unsigned int v45 = 3LL;
    unsigned int v46 = 0xFFFFFFFFLL;
  }

  else
  {
    if ((v24 & 2) == 0) {
      goto LABEL_37;
    }
    unsigned int v45 = 2LL;
    unsigned int v46 = 919LL;
  }

  breakpoint_break((uint64_t)v49, (volatile int *)v46, v45, v35, v11);
LABEL_37:
  uint32x4_t v36 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v34) defaultFbufStream];
  uint32x4_t v37 = (unsigned int *)((char *)v36 + 56);
  do
    uint64_t v38 = __ldaxr(v37);
  while (__stlxr(1u, v37));
  if (v38 == 1)
  {
    do
    {
      while (*v37 == 1)
        ;
      do
        uint64_t v39 = __ldaxr(v37);
      while (__stlxr(1u, v37));
    }

    while (v39 == 1);
  }

  GPUTools::FB::Stream::Write_nolock(v36, (GPUTools::FB::Fbuf *)v49, *(unsigned int *)v49[0], 1);
  atomic_store(0, v37);
  wrapper_push_group_marker((ContextInfo *)v11, a2, a3);
  ReleaseStringToEncode(StringToEncode, a3);
  do
  {
    uint32x4_t v40 = __ldaxr(v12);
    uint32x4_t v41 = v40 - 1;
  }

  while (__stlxr(v41, v12));
  if (gCheckGLErrors) {
    uint32x4_t v42 = v41 < 1;
  }
  else {
    uint32x4_t v42 = 1;
  }
  if (!v42) {
    handle_opengl_thread_conflict((const void **)v11);
  }
LABEL_50:
  if (v49[0]) {
    free(v49[0]);
  }
}

    uint64_t v30 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v25), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v30) {
      uint64_t v30 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v53, v31);
    }
    uint64_t v33 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v33) {
      uint64_t v30 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v53, v33, v32);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v30), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v53);
    }
    NSUInteger v34 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v53);
    uint64_t v35 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v35 && gBreakOnError)
    {
      unsigned int v48 = 3LL;
      v49 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v24 & 2) == 0) {
        goto LABEL_37;
      }
      unsigned int v48 = 2LL;
      v49 = 920LL;
    }

    breakpoint_break((uint64_t)v53, (volatile int *)v49, v48, v35, v13);
LABEL_37:
    uint32x4_t v36 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v34) defaultFbufStream];
    uint32x4_t v37 = (unsigned int *)((char *)v36 + 56);
    do
      uint64_t v38 = __ldaxr(v37);
    while (__stlxr(1u, v37));
    if (v38 == 1)
    {
      do
      {
        while (*v37 == 1)
          ;
        do
          uint64_t v39 = __ldaxr(v37);
        while (__stlxr(1u, v37));
      }

      while (v39 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v36, (GPUTools::FB::Fbuf *)v53, *(unsigned int *)v53[0], 1);
    atomic_store(0, v37);
    if (!gCheckGLErrors) {
      check_errors(v13);
    }
    if ((_DWORD)a3 && !*(_DWORD *)(v13 + 3404)) {
      wrapper_cache_pipeline_use_stages((void *)v13, a2, a3, a4, v52, 1);
    }
    do
    {
      uint32x4_t v40 = __ldaxr(v14);
      uint32x4_t v41 = v40 - 1;
    }

    while (__stlxr(v41, v14));
    if (gCheckGLErrors) {
      uint32x4_t v42 = v41 < 1;
    }
    else {
      uint32x4_t v42 = 1;
    }
    if (!v42) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    goto LABEL_54;
  }

  do
    v43 = __ldaxr(v14);
  while (__stlxr(v43 - 1, v14));
  [(id)DYGetGLGuestAppClient(v22) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 + 24) + 6552LL))( a1,  a2,  a3,  a4);
LABEL_54:
  if (v53[0]) {
    free(v53[0]);
  }
}

    unsigned int v32 = v57;
    uint64_t v56 = *((_OWORD *)v57 + 1);
    uint32x4_t v58 = v57;
    if (v59 >= 0x24)
    {
      *((_DWORD *)v57 + 8) = 0;
      NSUInteger *v32 = 0u;
      v32[1] = 0u;
    }

    GPUTools::FB::Encode((uint64_t)&v57, 890LL, 0LL, v11 + 4709, v24, v25, v26, v27, *(void *)v11);
    *((_OWORD *)v57 + 1) = v56;
    NSUInteger v34 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v34) {
      NSUInteger v34 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v57, v35);
    }
    uint32x4_t v37 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v37) {
      NSUInteger v34 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v57, v37, v36);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v34), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)&v57);
    }
    uint64_t v38 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v57);
    uint64_t v39 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v39 && gBreakOnError)
    {
      uint64_t v52 = 3LL;
      uint32x4_t v53 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v23 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v52 = 2LL;
      uint32x4_t v53 = 890LL;
    }

    breakpoint_break((uint64_t)&v57, (volatile int *)v53, v52, v39, v11);
LABEL_39:
    uint32x4_t v40 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v38) defaultFbufStream];
    uint32x4_t v41 = (unsigned int *)((char *)v40 + 56);
    do
      uint32x4_t v42 = __ldaxr(v41);
    while (__stlxr(1u, v41));
    if (v42 == 1)
    {
      do
      {
        while (*v41 == 1)
          ;
        do
          v43 = __ldaxr(v41);
        while (__stlxr(1u, v41));
      }

      while (v43 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v40, (GPUTools::FB::Fbuf *)&v57, *(unsigned int *)v57, 1);
    atomic_store(0, v41);
    do
    {
      uint64_t v44 = __ldaxr(v12);
      unsigned int v45 = v44 - 1;
    }

    while (__stlxr(v45, v12));
    if (gCheckGLErrors) {
      unsigned int v46 = v45 < 1;
    }
    else {
      unsigned int v46 = 1;
    }
    if (!v46) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    goto LABEL_52;
  }

  do
    uint64_t v47 = __ldaxr(v12);
  while (__stlxr(v47 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, unsigned int *))(*(void *)(v11 + 24) + 6592LL))(a1, a2, a3);
LABEL_52:
  if (v57) {
    free(v57);
  }
}

    uint32x4_t v26 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v21), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v26) {
      uint32x4_t v26 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v65, v27);
    }
    unint64_t v29 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
    if ((_DWORD)v29) {
      uint32x4_t v26 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v65, v29, v28);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v26), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v9, (uint64_t)v65);
    }
    uint64_t v30 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)v65);
    int v31 = *(unsigned int *)(v9 + 3404);
    if ((_DWORD)v31 && gBreakOnError)
    {
      uint32x4_t v59 = 3LL;
      uint32x4_t v60 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v20 & 2) == 0) {
        goto LABEL_37;
      }
      uint32x4_t v59 = 2LL;
      uint32x4_t v60 = 921LL;
    }

    breakpoint_break((uint64_t)v65, (volatile int *)v60, v59, v31, v9);
LABEL_37:
    unsigned int v32 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v30) defaultFbufStream];
    uint64_t v33 = (unsigned int *)((char *)v32 + 56);
    do
      NSUInteger v34 = __ldaxr(v33);
    while (__stlxr(1u, v33));
    if (v34 == 1)
    {
      do
      {
        while (*v33 == 1)
          ;
        do
          uint64_t v35 = __ldaxr(v33);
        while (__stlxr(1u, v33));
      }

      while (v35 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v32, (GPUTools::FB::Fbuf *)v65, *(unsigned int *)v65[0], 1);
    atomic_store(0, v33);
    info_log = (char *)query_info_log( v9,  a2,  *(void (**)(void, uint64_t, uint64_t, int *))(*(void *)(v9 + 32) + 6608LL),  *(void (**)(void, uint64_t, size_t, void, void *))(*(void *)(v9 + 32) + 6624LL),  (int *)&v64);
    uint32x4_t v37 = info_log;
    uint64_t v38 = (int)v64;
    if (v64 < 0x401)
    {
      if (v64) {
        info_log[v64 - 1] = 0;
      }
      uint32x4_t v40 = "CiuiiSi";
    }

    else
    {
      uint64_t v39 = DYGetGLGuestAppClient(info_log);
      GPUTools::Interpose::DYSavePointer(v39, v38, v37, v9 + 4644, 65LL, 0LL, 1LL, 0LL, 0LL);
      uint32x4_t v40 = "CiuiiU<cb>i";
    }

    (*(void (**)(void, uint64_t, uint64_t, int *))(*(void *)(v9 + 32) + 6608LL))( *(void *)(v9 + 16),  a2,  35715LL,  &v63);
    GPUTools::FB::Encode((uint64_t)v65, 4294955024LL, (uint64_t)v40, v41, v42, v43, v44, v45, *(void *)v9);
    uint64_t v47 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v46) defaultFbufStream];
    unsigned int v48 = (unsigned int *)((char *)v47 + 56);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(1u, v48));
    if (v49 == 1)
    {
      do
      {
        while (*v48 == 1)
          ;
        do
          unsigned int v50 = __ldaxr(v48);
        while (__stlxr(1u, v48));
      }

      while (v50 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v47, (GPUTools::FB::Fbuf *)v65, *(unsigned int *)v65[0], 1);
    atomic_store(0, v48);
    free(v37);
    do
    {
      uint64_t v51 = __ldaxr(v10);
      uint64_t v52 = v51 - 1;
    }

    while (__stlxr(v52, v10));
    if (gCheckGLErrors) {
      uint32x4_t v53 = v52 < 1;
    }
    else {
      uint32x4_t v53 = 1;
    }
    if (!v53) {
      handle_opengl_thread_conflict((const void **)v9);
    }
    goto LABEL_61;
  }

  do
    uint32x4_t v54 = __ldaxr(v10);
  while (__stlxr(v54 - 1, v10));
  [(id)DYGetGLGuestAppClient(v18) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 6616LL))(a1, a2);
LABEL_61:
  if (v65[0]) {
    free(v65[0]);
  }
}

    unsigned int v32 = v57;
    uint64_t v56 = *((_OWORD *)v57 + 1);
    uint32x4_t v58 = v57;
    if (v59 >= 0x24)
    {
      *((_DWORD *)v57 + 8) = 0;
      NSUInteger *v32 = 0u;
      v32[1] = 0u;
    }

    GPUTools::FB::Encode((uint64_t)&v57, 987LL, 0LL, v11 + 4709, v24, v25, v26, v27, *(void *)v11);
    *((_OWORD *)v57 + 1) = v56;
    NSUInteger v34 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v34) {
      NSUInteger v34 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v57, v35);
    }
    uint32x4_t v37 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v37) {
      NSUInteger v34 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v57, v37, v36);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v34), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)&v57);
    }
    uint64_t v38 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v57);
    uint64_t v39 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v39 && gBreakOnError)
    {
      uint64_t v52 = 3LL;
      uint32x4_t v53 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v23 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v52 = 2LL;
      uint32x4_t v53 = 987LL;
    }

    breakpoint_break((uint64_t)&v57, (volatile int *)v53, v52, v39, v11);
LABEL_39:
    uint32x4_t v40 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v38) defaultFbufStream];
    uint32x4_t v41 = (unsigned int *)((char *)v40 + 56);
    do
      uint32x4_t v42 = __ldaxr(v41);
    while (__stlxr(1u, v41));
    if (v42 == 1)
    {
      do
      {
        while (*v41 == 1)
          ;
        do
          v43 = __ldaxr(v41);
        while (__stlxr(1u, v41));
      }

      while (v43 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v40, (GPUTools::FB::Fbuf *)&v57, *(unsigned int *)v57, 1);
    atomic_store(0, v41);
    do
    {
      uint64_t v44 = __ldaxr(v12);
      unsigned int v45 = v44 - 1;
    }

    while (__stlxr(v45, v12));
    if (gCheckGLErrors) {
      unsigned int v46 = v45 < 1;
    }
    else {
      unsigned int v46 = 1;
    }
    if (!v46) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    goto LABEL_52;
  }

  do
    uint64_t v47 = __ldaxr(v12);
  while (__stlxr(v47 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, unsigned int *))(*(void *)(v11 + 24) + 7240LL))(a1, a2, a3);
LABEL_52:
  if (v57) {
    free(v57);
  }
}

    uint32x4_t v28 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v23), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v28) {
      uint32x4_t v28 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v50, v29);
    }
    int v31 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v31) {
      uint32x4_t v28 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v50, v31, v30);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)v50);
    }
    unsigned int v32 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)v50);
    uint64_t v33 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v33 && gBreakOnError)
    {
      unsigned int v46 = 3LL;
      uint64_t v47 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v22 & 2) == 0) {
        goto LABEL_37;
      }
      unsigned int v46 = 2LL;
      uint64_t v47 = 981LL;
    }

    breakpoint_break((uint64_t)v50, (volatile int *)v47, v46, v33, v11);
LABEL_37:
    NSUInteger v34 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v32) defaultFbufStream];
    uint64_t v35 = (unsigned int *)((char *)v34 + 56);
    do
      uint32x4_t v36 = __ldaxr(v35);
    while (__stlxr(1u, v35));
    if (v36 == 1)
    {
      do
      {
        while (*v35 == 1)
          ;
        do
          uint32x4_t v37 = __ldaxr(v35);
        while (__stlxr(1u, v35));
      }

      while (v37 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v34, (GPUTools::FB::Fbuf *)v50, *(unsigned int *)v50[0], 1);
    atomic_store(0, v35);
    do
    {
      uint64_t v38 = __ldaxr(v12);
      uint64_t v39 = v38 - 1;
    }

    while (__stlxr(v39, v12));
    if (gCheckGLErrors) {
      uint32x4_t v40 = v39 < 1;
    }
    else {
      uint32x4_t v40 = 1;
    }
    if (!v40) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    goto LABEL_50;
  }

  do
    uint32x4_t v41 = __ldaxr(v12);
  while (__stlxr(v41 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, const unsigned int *))(*(void *)(v11 + 24) + 7248LL))( a1,  a2,  a3);
LABEL_50:
  if (v50[0]) {
    free(v50[0]);
  }
}

    int v31 = v56;
    v55 = *((_OWORD *)v56 + 1);
    uint32x4_t v57 = v56;
    if (v58 >= 0x24)
    {
      *((_DWORD *)v56 + 8) = 0;
      *int v31 = 0u;
      v31[1] = 0u;
    }

    GPUTools::FB::Encode((uint64_t)&v56, 781LL, 256LL, (uint64_t)"Ce@4f", v23, v24, v25, v26, *(void *)v11);
    *((_OWORD *)v56 + 1) = v55;
    uint64_t v33 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v33) {
      uint64_t v33 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v56, v34);
    }
    uint32x4_t v36 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v36) {
      uint64_t v33 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v56, v36, v35);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)&v56);
    }
    uint32x4_t v37 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v56);
    uint64_t v38 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v38 && gBreakOnError)
    {
      uint64_t v51 = 3LL;
      uint64_t v52 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v22 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v51 = 2LL;
      uint64_t v52 = 781LL;
    }

    breakpoint_break((uint64_t)&v56, (volatile int *)v52, v51, v38, v11);
LABEL_39:
    uint64_t v39 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v37) defaultFbufStream];
    uint32x4_t v40 = (unsigned int *)((char *)v39 + 56);
    do
      uint32x4_t v41 = __ldaxr(v40);
    while (__stlxr(1u, v40));
    if (v41 == 1)
    {
      do
      {
        while (*v40 == 1)
          ;
        do
          uint32x4_t v42 = __ldaxr(v40);
        while (__stlxr(1u, v40));
      }

      while (v42 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v39, (GPUTools::FB::Fbuf *)&v56, *(unsigned int *)v56, 1);
    atomic_store(0, v40);
    do
    {
      v43 = __ldaxr(v12);
      uint64_t v44 = v43 - 1;
    }

    while (__stlxr(v44, v12));
    if (gCheckGLErrors) {
      unsigned int v45 = v44 < 1;
    }
    else {
      unsigned int v45 = 1;
    }
    if (!v45) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    goto LABEL_52;
  }

  do
    unsigned int v46 = __ldaxr(v12);
  while (__stlxr(v46 - 1, v12));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, float *))(*(void *)(v11 + 24) + 7832LL))(a1, a2, a3);
LABEL_52:
  if (v56) {
    free(v56);
  }
}

    int v31 = v56;
    v55 = *((_OWORD *)v56 + 1);
    uint32x4_t v57 = v56;
    if (v58 >= 0x24)
    {
      *((_DWORD *)v56 + 8) = 0;
      *int v31 = 0u;
      v31[1] = 0u;
    }

    GPUTools::FB::Encode((uint64_t)&v56, 782LL, 256LL, (uint64_t)"Ce@4x", v23, v24, v25, v26, *(void *)v11);
    *((_OWORD *)v56 + 1) = v55;
    uint64_t v33 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v33) {
      uint64_t v33 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v56, v34);
    }
    uint32x4_t v36 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v36) {
      uint64_t v33 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v56, v36, v35);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)&v56);
    }
    uint32x4_t v37 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v56);
    uint64_t v38 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v38 && gBreakOnError)
    {
      uint64_t v51 = 3LL;
      uint64_t v52 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v22 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v51 = 2LL;
      uint64_t v52 = 782LL;
    }

    breakpoint_break((uint64_t)&v56, (volatile int *)v52, v51, v38, v11);
LABEL_39:
    uint64_t v39 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v37) defaultFbufStream];
    uint32x4_t v40 = (unsigned int *)((char *)v39 + 56);
    do
      uint32x4_t v41 = __ldaxr(v40);
    while (__stlxr(1u, v40));
    if (v41 == 1)
    {
      do
      {
        while (*v40 == 1)
          ;
        do
          uint32x4_t v42 = __ldaxr(v40);
        while (__stlxr(1u, v40));
      }

      while (v42 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v39, (GPUTools::FB::Fbuf *)&v56, *(unsigned int *)v56, 1);
    atomic_store(0, v40);
    do
    {
      v43 = __ldaxr(v12);
      uint64_t v44 = v43 - 1;
    }

    while (__stlxr(v44, v12));
    if (gCheckGLErrors) {
      unsigned int v45 = v44 < 1;
    }
    else {
      unsigned int v45 = 1;
    }
    if (!v45) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    goto LABEL_52;
  }

  do
    unsigned int v46 = __ldaxr(v12);
  while (__stlxr(v46 - 1, v12));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, int *))(*(void *)(v11 + 24) + 7840LL))(a1, a2, a3);
LABEL_52:
  if (v56) {
    free(v56);
  }
}

    unsigned int v32 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v32) {
      unsigned int v32 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v54, v33);
    }
    uint64_t v35 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v35) {
      unsigned int v32 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v54, v35, v34);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v54);
    }
    uint32x4_t v36 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v54);
    uint32x4_t v37 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v37 && gBreakOnError)
    {
      unsigned int v50 = 3LL;
      uint64_t v51 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v26 & 2) == 0) {
        goto LABEL_37;
      }
      unsigned int v50 = 2LL;
      uint64_t v51 = 792LL;
    }

    breakpoint_break((uint64_t)v54, (volatile int *)v51, v50, v37, v13);
LABEL_37:
    uint64_t v38 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v36) defaultFbufStream];
    uint64_t v39 = (unsigned int *)((char *)v38 + 56);
    do
      uint32x4_t v40 = __ldaxr(v39);
    while (__stlxr(1u, v39));
    if (v40 == 1)
    {
      do
      {
        while (*v39 == 1)
          ;
        do
          uint32x4_t v41 = __ldaxr(v39);
        while (__stlxr(1u, v39));
      }

      while (v41 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v38, (GPUTools::FB::Fbuf *)v54, *(unsigned int *)v54[0], 1);
    atomic_store(0, v39);
    do
    {
      uint32x4_t v42 = __ldaxr(v14);
      v43 = v42 - 1;
    }

    while (__stlxr(v43, v14));
    if (gCheckGLErrors) {
      uint64_t v44 = v43 < 1;
    }
    else {
      uint64_t v44 = 1;
    }
    if (!v44) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    goto LABEL_50;
  }

  do
    unsigned int v45 = __ldaxr(v14);
  while (__stlxr(v45 - 1, v14));
  [(id)DYGetGLGuestAppClient(v19) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, GPUTools::GL *, const int *))(*(void *)(v13 + 24) + 7912LL))( a1,  a2,  a3,  a4);
LABEL_50:
  if (v54[0]) {
    free(v54[0]);
  }
}

    unsigned int v32 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v32) {
      unsigned int v32 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v54, v33);
    }
    uint64_t v35 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v35) {
      unsigned int v32 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v54, v35, v34);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v54);
    }
    uint32x4_t v36 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v54);
    uint32x4_t v37 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v37 && gBreakOnError)
    {
      unsigned int v50 = 3LL;
      uint64_t v51 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v26 & 2) == 0) {
        goto LABEL_37;
      }
      unsigned int v50 = 2LL;
      uint64_t v51 = 797LL;
    }

    breakpoint_break((uint64_t)v54, (volatile int *)v51, v50, v37, v13);
LABEL_37:
    uint64_t v38 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v36) defaultFbufStream];
    uint64_t v39 = (unsigned int *)((char *)v38 + 56);
    do
      uint32x4_t v40 = __ldaxr(v39);
    while (__stlxr(1u, v39));
    if (v40 == 1)
    {
      do
      {
        while (*v39 == 1)
          ;
        do
          uint32x4_t v41 = __ldaxr(v39);
        while (__stlxr(1u, v39));
      }

      while (v41 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v38, (GPUTools::FB::Fbuf *)v54, *(unsigned int *)v54[0], 1);
    atomic_store(0, v39);
    do
    {
      uint32x4_t v42 = __ldaxr(v14);
      v43 = v42 - 1;
    }

    while (__stlxr(v43, v14));
    if (gCheckGLErrors) {
      uint64_t v44 = v43 < 1;
    }
    else {
      uint64_t v44 = 1;
    }
    if (!v44) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    goto LABEL_50;
  }

  do
    unsigned int v45 = __ldaxr(v14);
  while (__stlxr(v45 - 1, v14));
  [(id)DYGetGLGuestAppClient(v19) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, GPUTools::GL *, const int *))(*(void *)(v13 + 24) + 7944LL))( a1,  a2,  a3,  a4);
LABEL_50:
  if (v54[0]) {
    free(v54[0]);
  }
}

    uint64_t v33 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v33) {
      uint64_t v33 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v55, v34);
    }
    uint32x4_t v36 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v15 + 3404);
    if ((_DWORD)v36) {
      uint64_t v33 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v55, v36, v35);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v15, (uint64_t)v55);
    }
    uint32x4_t v37 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v15 + 3480),  (GPUTools::FB::Fbuf *)(v15 + 3520),  (GPUTools::FB *)v55);
    uint64_t v38 = *(unsigned int *)(v15 + 3404);
    if ((_DWORD)v38 && gBreakOnError)
    {
      uint64_t v51 = 3LL;
      uint64_t v52 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v27 & 2) == 0) {
        goto LABEL_37;
      }
      uint64_t v51 = 2LL;
      uint64_t v52 = 798LL;
    }

    breakpoint_break((uint64_t)v55, (volatile int *)v52, v51, v38, v15);
LABEL_37:
    uint64_t v39 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v37) defaultFbufStream];
    uint32x4_t v40 = (unsigned int *)((char *)v39 + 56);
    do
      uint32x4_t v41 = __ldaxr(v40);
    while (__stlxr(1u, v40));
    if (v41 == 1)
    {
      do
      {
        while (*v40 == 1)
          ;
        do
          uint32x4_t v42 = __ldaxr(v40);
        while (__stlxr(1u, v40));
      }

      while (v42 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v39, (GPUTools::FB::Fbuf *)v55, *(unsigned int *)v55[0], 1);
    atomic_store(0, v40);
    do
    {
      v43 = __ldaxr(v16);
      uint64_t v44 = v43 - 1;
    }

    while (__stlxr(v44, v16));
    if (gCheckGLErrors) {
      unsigned int v45 = v44 < 1;
    }
    else {
      unsigned int v45 = 1;
    }
    if (!v45) {
      handle_opengl_thread_conflict((const void **)v15);
    }
    goto LABEL_50;
  }

  do
    unsigned int v46 = __ldaxr(v16);
  while (__stlxr(v46 - 1, v16));
  [(id)DYGetGLGuestAppClient(v24) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, const void *))(*(void *)(v15 + 24) + 8104LL))( a1,  a2,  a3,  a4,  a5);
LABEL_50:
  if (v55[0]) {
    free(v55[0]);
  }
}

    uint64_t v33 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v33) {
      uint64_t v33 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v55, v34);
    }
    uint32x4_t v36 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v15 + 3404);
    if ((_DWORD)v36) {
      uint64_t v33 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v55, v36, v35);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v15, (uint64_t)v55);
    }
    uint32x4_t v37 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v15 + 3480),  (GPUTools::FB::Fbuf *)(v15 + 3520),  (GPUTools::FB *)v55);
    uint64_t v38 = *(unsigned int *)(v15 + 3404);
    if ((_DWORD)v38 && gBreakOnError)
    {
      uint64_t v51 = 3LL;
      uint64_t v52 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v27 & 2) == 0) {
        goto LABEL_37;
      }
      uint64_t v51 = 2LL;
      uint64_t v52 = 819LL;
    }

    breakpoint_break((uint64_t)v55, (volatile int *)v52, v51, v38, v15);
LABEL_37:
    uint64_t v39 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v37) defaultFbufStream];
    uint32x4_t v40 = (unsigned int *)((char *)v39 + 56);
    do
      uint32x4_t v41 = __ldaxr(v40);
    while (__stlxr(1u, v40));
    if (v41 == 1)
    {
      do
      {
        while (*v40 == 1)
          ;
        do
          uint32x4_t v42 = __ldaxr(v40);
        while (__stlxr(1u, v40));
      }

      while (v42 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v39, (GPUTools::FB::Fbuf *)v55, *(unsigned int *)v55[0], 1);
    atomic_store(0, v40);
    do
    {
      v43 = __ldaxr(v16);
      uint64_t v44 = v43 - 1;
    }

    while (__stlxr(v44, v16));
    if (gCheckGLErrors) {
      unsigned int v45 = v44 < 1;
    }
    else {
      unsigned int v45 = 1;
    }
    if (!v45) {
      handle_opengl_thread_conflict((const void **)v15);
    }
    goto LABEL_50;
  }

  do
    unsigned int v46 = __ldaxr(v16);
  while (__stlxr(v46 - 1, v16));
  [(id)DYGetGLGuestAppClient(v24) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, const void *))(*(void *)(v15 + 24) + 8112LL))( a1,  a2,  a3,  a4,  a5);
LABEL_50:
  if (v55[0]) {
    free(v55[0]);
  }
}

    uint64_t v30 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v25), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v30) {
      uint64_t v30 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v52, v31);
    }
    uint64_t v33 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v33) {
      uint64_t v30 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v52, v33, v32);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v30), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v52);
    }
    NSUInteger v34 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v52);
    uint64_t v35 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v35 && gBreakOnError)
    {
      unsigned int v48 = 3LL;
      v49 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v24 & 2) == 0) {
        goto LABEL_37;
      }
      unsigned int v48 = 2LL;
      v49 = 835LL;
    }

    breakpoint_break((uint64_t)v52, (volatile int *)v49, v48, v35, v13);
LABEL_37:
    uint32x4_t v36 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v34) defaultFbufStream];
    uint32x4_t v37 = (unsigned int *)((char *)v36 + 56);
    do
      uint64_t v38 = __ldaxr(v37);
    while (__stlxr(1u, v37));
    if (v38 == 1)
    {
      do
      {
        while (*v37 == 1)
          ;
        do
          uint64_t v39 = __ldaxr(v37);
        while (__stlxr(1u, v37));
      }

      while (v39 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v36, (GPUTools::FB::Fbuf *)v52, *(unsigned int *)v52[0], 1);
    atomic_store(0, v37);
    do
    {
      uint32x4_t v40 = __ldaxr(v14);
      uint32x4_t v41 = v40 - 1;
    }

    while (__stlxr(v41, v14));
    if (gCheckGLErrors) {
      uint32x4_t v42 = v41 < 1;
    }
    else {
      uint32x4_t v42 = 1;
    }
    if (!v42) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    goto LABEL_50;
  }

  do
    v43 = __ldaxr(v14);
  while (__stlxr(v43 - 1, v14));
  [(id)DYGetGLGuestAppClient(v18) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, const unsigned int *))(*(void *)(v13 + 24) + 8184LL))( a1,  a2,  a3,  a4);
LABEL_50:
  if (v52[0]) {
    free(v52[0]);
  }
}

    uint32x4_t v36 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v31), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v36) {
      uint32x4_t v36 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v60, v37);
    }
    uint64_t v39 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v19 + 3404);
    if ((_DWORD)v39) {
      uint32x4_t v36 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v60, v39, v38);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v36), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v19, (uint64_t)v60);
    }
    uint32x4_t v40 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v19 + 3480),  (GPUTools::FB::Fbuf *)(v19 + 3520),  (GPUTools::FB *)v60);
    uint32x4_t v41 = *(unsigned int *)(v19 + 3404);
    if ((_DWORD)v41 && gBreakOnError)
    {
      uint32x4_t v54 = 3LL;
      v55 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v30 & 2) == 0) {
        goto LABEL_37;
      }
      uint32x4_t v54 = 2LL;
      v55 = 1044LL;
    }

    breakpoint_break((uint64_t)v60, (volatile int *)v55, v54, v41, v19);
LABEL_37:
    uint32x4_t v42 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v40) defaultFbufStream];
    v43 = (unsigned int *)((char *)v42 + 56);
    do
      uint64_t v44 = __ldaxr(v43);
    while (__stlxr(1u, v43));
    if (v44 == 1)
    {
      do
      {
        while (*v43 == 1)
          ;
        do
          unsigned int v45 = __ldaxr(v43);
        while (__stlxr(1u, v43));
      }

      while (v45 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v42, (GPUTools::FB::Fbuf *)v60, *(unsigned int *)v60[0], 1);
    atomic_store(0, v43);
    do
    {
      unsigned int v46 = __ldaxr(v20);
      uint64_t v47 = v46 - 1;
    }

    while (__stlxr(v47, v20));
    if (gCheckGLErrors) {
      unsigned int v48 = v47 < 1;
    }
    else {
      unsigned int v48 = 1;
    }
    if (!v48) {
      handle_opengl_thread_conflict((const void **)v19);
    }
    goto LABEL_50;
  }

  do
    v49 = __ldaxr(v20);
  while (__stlxr(v49 - 1, v20));
  [(id)DYGetGLGuestAppClient(v24) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, const unsigned int *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 + 24) + 8224LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);
LABEL_50:
  if (v60[0]) {
    free(v60[0]);
  }
}

    NSUInteger v34 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v34) {
      NSUInteger v34 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v56, v35);
    }
    uint32x4_t v37 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v17 + 3404);
    if ((_DWORD)v37) {
      NSUInteger v34 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v56, v37, v36);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v34), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v17, (uint64_t)v56);
    }
    uint64_t v38 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v17 + 3480),  (GPUTools::FB::Fbuf *)(v17 + 3520),  (GPUTools::FB *)v56);
    uint64_t v39 = *(unsigned int *)(v17 + 3404);
    if ((_DWORD)v39 && gBreakOnError)
    {
      uint64_t v52 = 3LL;
      uint32x4_t v53 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v28 & 2) == 0) {
        goto LABEL_37;
      }
      uint64_t v52 = 2LL;
      uint32x4_t v53 = 1040LL;
    }

    breakpoint_break((uint64_t)v56, (volatile int *)v53, v52, v39, v17);
LABEL_37:
    uint32x4_t v40 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v38) defaultFbufStream];
    uint32x4_t v41 = (unsigned int *)((char *)v40 + 56);
    do
      uint32x4_t v42 = __ldaxr(v41);
    while (__stlxr(1u, v41));
    if (v42 == 1)
    {
      do
      {
        while (*v41 == 1)
          ;
        do
          v43 = __ldaxr(v41);
        while (__stlxr(1u, v41));
      }

      while (v43 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v40, (GPUTools::FB::Fbuf *)v56, *(unsigned int *)v56[0], 1);
    atomic_store(0, v41);
    wrapper_encode_texture_format_info((ContextInfo *)v17, a2, 0, 0LL);
    do
    {
      uint64_t v44 = __ldaxr(v18);
      unsigned int v45 = v44 - 1;
    }

    while (__stlxr(v45, v18));
    if (gCheckGLErrors) {
      unsigned int v46 = v45 < 1;
    }
    else {
      unsigned int v46 = 1;
    }
    if (!v46) {
      handle_opengl_thread_conflict((const void **)v17);
    }
    goto LABEL_50;
  }

  do
    uint64_t v47 = __ldaxr(v18);
  while (__stlxr(v47 - 1, v18));
  [(id)DYGetGLGuestAppClient(v26) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 + 24) + 8248LL))( a1,  a2,  a3,  a4,  a5,  a6);
LABEL_50:
  if (v56[0]) {
    free(v56[0]);
  }
}

    uint64_t v35 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v30), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v35) {
      uint64_t v35 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v58, v36);
    }
    uint64_t v38 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v19 + 3404);
    if ((_DWORD)v38) {
      uint64_t v35 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v58, v38, v37);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v35), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v19, (uint64_t)v58);
    }
    uint64_t v39 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v19 + 3480),  (GPUTools::FB::Fbuf *)(v19 + 3520),  (GPUTools::FB *)v58);
    uint32x4_t v40 = *(unsigned int *)(v19 + 3404);
    if ((_DWORD)v40 && gBreakOnError)
    {
      uint32x4_t v53 = 3LL;
      uint32x4_t v54 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v57 & 2) == 0) {
        goto LABEL_37;
      }
      uint32x4_t v53 = 2LL;
      uint32x4_t v54 = 1042LL;
    }

    breakpoint_break((uint64_t)v58, (volatile int *)v54, v53, v40, v19);
LABEL_37:
    uint32x4_t v41 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v39) defaultFbufStream];
    uint32x4_t v42 = (unsigned int *)((char *)v41 + 56);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(1u, v42));
    if (v43 == 1)
    {
      do
      {
        while (*v42 == 1)
          ;
        do
          uint64_t v44 = __ldaxr(v42);
        while (__stlxr(1u, v42));
      }

      while (v44 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v41, (GPUTools::FB::Fbuf *)v58, *(unsigned int *)v58[0], 1);
    atomic_store(0, v42);
    wrapper_encode_texture_format_info((ContextInfo *)v19, a2, 0, 0LL);
    do
    {
      unsigned int v45 = __ldaxr(v20);
      unsigned int v46 = v45 - 1;
    }

    while (__stlxr(v46, v20));
    if (gCheckGLErrors) {
      uint64_t v47 = v46 < 1;
    }
    else {
      uint64_t v47 = 1;
    }
    if (!v47) {
      handle_opengl_thread_conflict((const void **)v19);
    }
    goto LABEL_50;
  }

  do
    unsigned int v48 = __ldaxr(v20);
  while (__stlxr(v48 - 1, v20));
  [(id)DYGetGLGuestAppClient(v28) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 + 24)
                                                                                                  + 8256LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7);
LABEL_50:
  if (v58[0]) {
    free(v58[0]);
  }
}

    uint32x4_t v28 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v23), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v28) {
      uint32x4_t v28 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v50, v29);
    }
    int v31 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v31) {
      uint32x4_t v28 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v50, v31, v30);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)v50);
    }
    unsigned int v32 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)v50);
    uint64_t v33 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v33 && gBreakOnError)
    {
      unsigned int v46 = 3LL;
      uint64_t v47 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v22 & 2) == 0) {
        goto LABEL_37;
      }
      unsigned int v46 = 2LL;
      uint64_t v47 = 20LL;
    }

    breakpoint_break((uint64_t)v50, (volatile int *)v47, v46, v33, v11);
LABEL_37:
    NSUInteger v34 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v32) defaultFbufStream];
    uint64_t v35 = (unsigned int *)((char *)v34 + 56);
    do
      uint32x4_t v36 = __ldaxr(v35);
    while (__stlxr(1u, v35));
    if (v36 == 1)
    {
      do
      {
        while (*v35 == 1)
          ;
        do
          uint32x4_t v37 = __ldaxr(v35);
        while (__stlxr(1u, v35));
      }

      while (v37 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v34, (GPUTools::FB::Fbuf *)v50, *(unsigned int *)v50[0], 1);
    atomic_store(0, v35);
    if (!gCheckGLErrors) {
      check_errors(v11);
    }
    if (!*(_DWORD *)(v11 + 3404)) {
      wrapper_cache_texture_binding(v11, a2, a3);
    }
    do
    {
      uint64_t v38 = __ldaxr(v12);
      uint64_t v39 = v38 - 1;
    }

    while (__stlxr(v39, v12));
    if (gCheckGLErrors) {
      uint32x4_t v40 = v39 < 1;
    }
    else {
      uint32x4_t v40 = 1;
    }
    if (!v40) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    goto LABEL_53;
  }

  do
    uint32x4_t v41 = __ldaxr(v12);
  while (__stlxr(v41 - 1, v12));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t))(*(void *)(v11 + 24) + 40LL))(a1, a2, a3);
LABEL_53:
  if (v50[0]) {
    free(v50[0]);
  }
}

    uint64_t v33 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v33) {
      uint64_t v33 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v55, v34);
    }
    uint32x4_t v36 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v15 + 3404);
    if ((_DWORD)v36) {
      uint64_t v33 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v55, v36, v35);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v15, (uint64_t)v55);
    }
    uint32x4_t v37 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v15 + 3480),  (GPUTools::FB::Fbuf *)(v15 + 3520),  (GPUTools::FB *)v55);
    uint64_t v38 = *(unsigned int *)(v15 + 3404);
    if ((_DWORD)v38 && gBreakOnError)
    {
      uint64_t v51 = 3LL;
      uint64_t v52 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v27 & 2) == 0) {
        goto LABEL_37;
      }
      uint64_t v51 = 2LL;
      uint64_t v52 = 81LL;
    }

    breakpoint_break((uint64_t)v55, (volatile int *)v52, v51, v38, v15);
LABEL_37:
    uint64_t v39 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v37) defaultFbufStream];
    uint32x4_t v40 = (unsigned int *)((char *)v39 + 56);
    do
      uint32x4_t v41 = __ldaxr(v40);
    while (__stlxr(1u, v40));
    if (v41 == 1)
    {
      do
      {
        while (*v40 == 1)
          ;
        do
          uint32x4_t v42 = __ldaxr(v40);
        while (__stlxr(1u, v40));
      }

      while (v42 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v39, (GPUTools::FB::Fbuf *)v55, *(unsigned int *)v55[0], 1);
    atomic_store(0, v40);
    do
    {
      v43 = __ldaxr(v16);
      uint64_t v44 = v43 - 1;
    }

    while (__stlxr(v44, v16));
    if (gCheckGLErrors) {
      unsigned int v45 = v44 < 1;
    }
    else {
      unsigned int v45 = 1;
    }
    if (!v45) {
      handle_opengl_thread_conflict((const void **)v15);
    }
    goto LABEL_50;
  }

  do
    unsigned int v46 = __ldaxr(v16);
  while (__stlxr(v46 - 1, v16));
  [(id)DYGetGLGuestAppClient(v24) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, const void *))(*(void *)(v15 + 24) + 408LL))( a1,  a2,  a3,  a4,  a5);
LABEL_50:
  if (v55[0]) {
    free(v55[0]);
  }
}

    uint32x4_t v28 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v23), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v28) {
      uint32x4_t v28 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v50, v29);
    }
    int v31 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v31) {
      uint32x4_t v28 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v50, v31, v30);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)v50);
    }
    unsigned int v32 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)v50);
    uint64_t v33 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v33 && gBreakOnError)
    {
      unsigned int v46 = 3LL;
      uint64_t v47 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v22 & 2) == 0) {
        goto LABEL_37;
      }
      unsigned int v46 = 2LL;
      uint64_t v47 = 127LL;
    }

    breakpoint_break((uint64_t)v50, (volatile int *)v47, v46, v33, v11);
LABEL_37:
    NSUInteger v34 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v32) defaultFbufStream];
    uint64_t v35 = (unsigned int *)((char *)v34 + 56);
    do
      uint32x4_t v36 = __ldaxr(v35);
    while (__stlxr(1u, v35));
    if (v36 == 1)
    {
      do
      {
        while (*v35 == 1)
          ;
        do
          uint32x4_t v37 = __ldaxr(v35);
        while (__stlxr(1u, v35));
      }

      while (v37 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v34, (GPUTools::FB::Fbuf *)v50, *(unsigned int *)v50[0], 1);
    atomic_store(0, v35);
    wrapper_cache_texture_binding_delete((ContextInfo *)v11, a2, a3);
    do
    {
      uint64_t v38 = __ldaxr(v12);
      uint64_t v39 = v38 - 1;
    }

    while (__stlxr(v39, v12));
    if (gCheckGLErrors) {
      uint32x4_t v40 = v39 < 1;
    }
    else {
      uint32x4_t v40 = 1;
    }
    if (!v40) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    goto LABEL_50;
  }

  do
    uint32x4_t v41 = __ldaxr(v12);
  while (__stlxr(v41 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, volatile int *, const unsigned int *))(*(void *)(v11 + 24) + 472LL))( a1,  a2,  a3);
LABEL_50:
  if (v50[0]) {
    free(v50[0]);
  }
}

    unsigned int v32 = v57;
    uint64_t v56 = *((_OWORD *)v57 + 1);
    uint32x4_t v58 = v57;
    if (v59 >= 0x24)
    {
      *((_DWORD *)v57 + 8) = 0;
      NSUInteger *v32 = 0u;
      v32[1] = 0u;
    }

    GPUTools::FB::Encode((uint64_t)&v57, 208LL, 0LL, v11 + 4709, v24, v25, v26, v27, *(void *)v11);
    *((_OWORD *)v57 + 1) = v56;
    NSUInteger v34 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v34) {
      NSUInteger v34 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v57, v35);
    }
    uint32x4_t v37 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v37) {
      NSUInteger v34 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v57, v37, v36);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v34), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)&v57);
    }
    uint64_t v38 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v57);
    uint64_t v39 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v39 && gBreakOnError)
    {
      uint64_t v52 = 3LL;
      uint32x4_t v53 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v23 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v52 = 2LL;
      uint32x4_t v53 = 208LL;
    }

    breakpoint_break((uint64_t)&v57, (volatile int *)v53, v52, v39, v11);
LABEL_39:
    uint32x4_t v40 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v38) defaultFbufStream];
    uint32x4_t v41 = (unsigned int *)((char *)v40 + 56);
    do
      uint32x4_t v42 = __ldaxr(v41);
    while (__stlxr(1u, v41));
    if (v42 == 1)
    {
      do
      {
        while (*v41 == 1)
          ;
        do
          v43 = __ldaxr(v41);
        while (__stlxr(1u, v41));
      }

      while (v43 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v40, (GPUTools::FB::Fbuf *)&v57, *(unsigned int *)v57, 1);
    atomic_store(0, v41);
    do
    {
      uint64_t v44 = __ldaxr(v12);
      unsigned int v45 = v44 - 1;
    }

    while (__stlxr(v45, v12));
    if (gCheckGLErrors) {
      unsigned int v46 = v45 < 1;
    }
    else {
      unsigned int v46 = 1;
    }
    if (!v46) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    goto LABEL_52;
  }

  do
    uint64_t v47 = __ldaxr(v12);
  while (__stlxr(v47 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, unsigned int *))(*(void *)(v11 + 24) + 784LL))(a1, a2, a3);
LABEL_52:
  if (v57) {
    free(v57);
  }
}

    unsigned int v32 = v58;
    uint64_t v56 = *((_OWORD *)v58 + 1);
    uint32x4_t v59 = v58;
    if (v60 >= 0x24)
    {
      *((_DWORD *)v58 + 8) = 0;
      NSUInteger *v32 = 0u;
      v32[1] = 0u;
    }

    GPUTools::FB::Encode((uint64_t)&v58, 217LL, 256LL, v11 + 4709, v24, v25, v26, v27, *(void *)v11);
    *((_OWORD *)v58 + 1) = v56;
    NSUInteger v34 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v34) {
      NSUInteger v34 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v58, v35);
    }
    uint32x4_t v37 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v37) {
      NSUInteger v34 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v58, v37, v36);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v34), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)&v58);
    }
    uint64_t v38 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v58);
    uint64_t v39 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v39 && gBreakOnError)
    {
      uint64_t v52 = 3LL;
      uint32x4_t v53 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v23 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v52 = 2LL;
      uint32x4_t v53 = 217LL;
    }

    breakpoint_break((uint64_t)&v58, (volatile int *)v53, v52, v39, v11);
LABEL_39:
    uint32x4_t v40 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v38) defaultFbufStream];
    uint32x4_t v41 = (unsigned int *)((char *)v40 + 56);
    do
      uint32x4_t v42 = __ldaxr(v41);
    while (__stlxr(1u, v41));
    if (v42 == 1)
    {
      do
      {
        while (*v41 == 1)
          ;
        do
          v43 = __ldaxr(v41);
        while (__stlxr(1u, v41));
      }

      while (v43 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v40, (GPUTools::FB::Fbuf *)&v58, *(unsigned int *)v58, 1);
    atomic_store(0, v41);
    do
    {
      uint64_t v44 = __ldaxr(v12);
      unsigned int v45 = v44 - 1;
    }

    while (__stlxr(v45, v12));
    if (gCheckGLErrors) {
      unsigned int v46 = v45 < 1;
    }
    else {
      unsigned int v46 = 1;
    }
    if (!v46) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    goto LABEL_52;
  }

  do
    uint64_t v47 = __ldaxr(v12);
  while (__stlxr(v47 - 1, v12));
  [(id)DYGetGLGuestAppClient(v17) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, GPUTools::GL *, unsigned __int8 *))(*(void *)(v11 + 24) + 792LL))( a1,  a2,  a3);
LABEL_52:
  if (v58) {
    free(v58);
  }
}

    int v31 = v56;
    v55 = *((_OWORD *)v56 + 1);
    uint32x4_t v57 = v56;
    if (v58 >= 0x24)
    {
      *((_DWORD *)v56 + 8) = 0;
      *int v31 = 0u;
      v31[1] = 0u;
    }

    GPUTools::FB::Encode((uint64_t)&v56, 264LL, 256LL, (uint64_t)"Ce@1t", v23, v24, v25, v26, *(void *)v11);
    *((_OWORD *)v56 + 1) = v55;
    uint64_t v33 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v33) {
      uint64_t v33 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v56, v34);
    }
    uint32x4_t v36 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v36) {
      uint64_t v33 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v56, v36, v35);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)&v56);
    }
    uint32x4_t v37 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v56);
    uint64_t v38 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v38 && gBreakOnError)
    {
      uint64_t v51 = 3LL;
      uint64_t v52 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v22 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v51 = 2LL;
      uint64_t v52 = 264LL;
    }

    breakpoint_break((uint64_t)&v56, (volatile int *)v52, v51, v38, v11);
LABEL_39:
    uint64_t v39 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v37) defaultFbufStream];
    uint32x4_t v40 = (unsigned int *)((char *)v39 + 56);
    do
      uint32x4_t v41 = __ldaxr(v40);
    while (__stlxr(1u, v40));
    if (v41 == 1)
    {
      do
      {
        while (*v40 == 1)
          ;
        do
          uint32x4_t v42 = __ldaxr(v40);
        while (__stlxr(1u, v40));
      }

      while (v42 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v39, (GPUTools::FB::Fbuf *)&v56, *(unsigned int *)v56, 1);
    atomic_store(0, v40);
    do
    {
      v43 = __ldaxr(v12);
      uint64_t v44 = v43 - 1;
    }

    while (__stlxr(v44, v12));
    if (gCheckGLErrors) {
      unsigned int v45 = v44 < 1;
    }
    else {
      unsigned int v45 = 1;
    }
    if (!v45) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    goto LABEL_52;
  }

  do
    unsigned int v46 = __ldaxr(v12);
  while (__stlxr(v46 - 1, v12));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, void **))(*(void *)(v11 + 24) + 920LL))(a1, a2, a3);
LABEL_52:
  if (v56) {
    free(v56);
  }
}

    unsigned int v32 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v32) {
      unsigned int v32 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v54, v33);
    }
    uint64_t v35 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v35) {
      unsigned int v32 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v54, v35, v34);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v54);
    }
    uint32x4_t v36 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v54);
    uint32x4_t v37 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v37 && gBreakOnError)
    {
      unsigned int v50 = 3LL;
      uint64_t v51 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v26 & 2) == 0) {
        goto LABEL_37;
      }
      unsigned int v50 = 2LL;
      uint64_t v51 = 344LL;
    }

    breakpoint_break((uint64_t)v54, (volatile int *)v51, v50, v37, v13);
LABEL_37:
    uint64_t v38 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v36) defaultFbufStream];
    uint64_t v39 = (unsigned int *)((char *)v38 + 56);
    do
      uint32x4_t v40 = __ldaxr(v39);
    while (__stlxr(1u, v39));
    if (v40 == 1)
    {
      do
      {
        while (*v39 == 1)
          ;
        do
          uint32x4_t v41 = __ldaxr(v39);
        while (__stlxr(1u, v39));
      }

      while (v41 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v38, (GPUTools::FB::Fbuf *)v54, *(unsigned int *)v54[0], 1);
    atomic_store(0, v39);
    do
    {
      uint32x4_t v42 = __ldaxr(v14);
      v43 = v42 - 1;
    }

    while (__stlxr(v43, v14));
    if (gCheckGLErrors) {
      uint64_t v44 = v43 < 1;
    }
    else {
      uint64_t v44 = 1;
    }
    if (!v44) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    goto LABEL_50;
  }

  do
    unsigned int v45 = __ldaxr(v14);
  while (__stlxr(v45 - 1, v14));
  [(id)DYGetGLGuestAppClient(v19) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, GPUTools::GL *, const float *))(*(void *)(v13 + 24) + 1208LL))( a1,  a2,  a3,  a4);
LABEL_50:
  if (v54[0]) {
    free(v54[0]);
  }
}

    unsigned int v32 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v32) {
      unsigned int v32 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v54, v33);
    }
    uint64_t v35 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v35) {
      unsigned int v32 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v54, v35, v34);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v54);
    }
    uint32x4_t v36 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v54);
    uint32x4_t v37 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v37 && gBreakOnError)
    {
      unsigned int v50 = 3LL;
      uint64_t v51 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v26 & 2) == 0) {
        goto LABEL_37;
      }
      unsigned int v50 = 2LL;
      uint64_t v51 = 373LL;
    }

    breakpoint_break((uint64_t)v54, (volatile int *)v51, v50, v37, v13);
LABEL_37:
    uint64_t v38 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v36) defaultFbufStream];
    uint64_t v39 = (unsigned int *)((char *)v38 + 56);
    do
      uint32x4_t v40 = __ldaxr(v39);
    while (__stlxr(1u, v39));
    if (v40 == 1)
    {
      do
      {
        while (*v39 == 1)
          ;
        do
          uint32x4_t v41 = __ldaxr(v39);
        while (__stlxr(1u, v39));
      }

      while (v41 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v38, (GPUTools::FB::Fbuf *)v54, *(unsigned int *)v54[0], 1);
    atomic_store(0, v39);
    do
    {
      uint32x4_t v42 = __ldaxr(v14);
      v43 = v42 - 1;
    }

    while (__stlxr(v43, v14));
    if (gCheckGLErrors) {
      uint64_t v44 = v43 < 1;
    }
    else {
      uint64_t v44 = 1;
    }
    if (!v44) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    goto LABEL_50;
  }

  do
    unsigned int v45 = __ldaxr(v14);
  while (__stlxr(v45 - 1, v14));
  [(id)DYGetGLGuestAppClient(v19) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, GPUTools::GL *, const float *))(*(void *)(v13 + 24) + 1368LL))( a1,  a2,  a3,  a4);
LABEL_50:
  if (v54[0]) {
    free(v54[0]);
  }
}

    int v31 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v26), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v31) {
      int v31 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v53, v32);
    }
    NSUInteger v34 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v34) {
      int v31 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v53, v34, v33);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v31), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v53);
    }
    uint64_t v35 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v53);
    uint32x4_t v36 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v36 && gBreakOnError)
    {
      v49 = 3LL;
      unsigned int v50 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v25 & 2) == 0) {
        goto LABEL_37;
      }
      v49 = 2LL;
      unsigned int v50 = 429LL;
    }

    breakpoint_break((uint64_t)v53, (volatile int *)v50, v49, v36, v13);
LABEL_37:
    uint32x4_t v37 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v35) defaultFbufStream];
    uint64_t v38 = (unsigned int *)((char *)v37 + 56);
    do
      uint64_t v39 = __ldaxr(v38);
    while (__stlxr(1u, v38));
    if (v39 == 1)
    {
      do
      {
        while (*v38 == 1)
          ;
        do
          uint32x4_t v40 = __ldaxr(v38);
        while (__stlxr(1u, v38));
      }

      while (v40 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v37, (GPUTools::FB::Fbuf *)v53, *(unsigned int *)v53[0], 1);
    atomic_store(0, v38);
    do
    {
      uint32x4_t v41 = __ldaxr(v14);
      uint32x4_t v42 = v41 - 1;
    }

    while (__stlxr(v42, v14));
    if (gCheckGLErrors) {
      v43 = v42 < 1;
    }
    else {
      v43 = 1;
    }
    if (!v43) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    goto LABEL_50;
  }

  do
    uint64_t v44 = __ldaxr(v14);
  while (__stlxr(v44 - 1, v14));
  [(id)DYGetGLGuestAppClient(v22) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, const void *))(*(void *)(v13 + 24) + 1504LL))( a1,  a2,  a3,  a4);
LABEL_50:
  if (v53[0]) {
    free(v53[0]);
  }
}

    NSUInteger v34 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v34) {
      NSUInteger v34 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v56, v35);
    }
    uint32x4_t v37 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v15 + 3404);
    if ((_DWORD)v37) {
      NSUInteger v34 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v56, v37, v36);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v34), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v15, (uint64_t)v56);
    }
    uint64_t v38 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v15 + 3480),  (GPUTools::FB::Fbuf *)(v15 + 3520),  (GPUTools::FB *)v56);
    uint64_t v39 = *(unsigned int *)(v15 + 3404);
    if ((_DWORD)v39 && gBreakOnError)
    {
      uint64_t v52 = 3LL;
      uint32x4_t v53 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v28 & 2) == 0) {
        goto LABEL_37;
      }
      uint64_t v52 = 2LL;
      uint32x4_t v53 = 582LL;
    }

    breakpoint_break((uint64_t)v56, (volatile int *)v53, v52, v39, v15);
LABEL_37:
    uint32x4_t v40 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v38) defaultFbufStream];
    uint32x4_t v41 = (unsigned int *)((char *)v40 + 56);
    do
      uint32x4_t v42 = __ldaxr(v41);
    while (__stlxr(1u, v41));
    if (v42 == 1)
    {
      do
      {
        while (*v41 == 1)
          ;
        do
          v43 = __ldaxr(v41);
        while (__stlxr(1u, v41));
      }

      while (v43 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v40, (GPUTools::FB::Fbuf *)v56, *(unsigned int *)v56[0], 1);
    atomic_store(0, v41);
    do
    {
      uint64_t v44 = __ldaxr(v16);
      unsigned int v45 = v44 - 1;
    }

    while (__stlxr(v45, v16));
    if (gCheckGLErrors) {
      unsigned int v46 = v45 < 1;
    }
    else {
      unsigned int v46 = 1;
    }
    if (!v46) {
      handle_opengl_thread_conflict((const void **)v15);
    }
    goto LABEL_50;
  }

  do
    uint64_t v47 = __ldaxr(v16);
  while (__stlxr(v47 - 1, v16));
  [(id)DYGetGLGuestAppClient(v24) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, const void *))(*(void *)(v15 + 24) + 2312LL))( a1,  a2,  a3,  a4,  a5);
LABEL_50:
  if (v56[0]) {
    free(v56[0]);
  }
}

    uint64_t v33 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v33) {
      uint64_t v33 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v55, v34);
    }
    uint32x4_t v36 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v15 + 3404);
    if ((_DWORD)v36) {
      uint64_t v33 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v55, v36, v35);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v15, (uint64_t)v55);
    }
    uint32x4_t v37 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v15 + 3480),  (GPUTools::FB::Fbuf *)(v15 + 3520),  (GPUTools::FB *)v55);
    uint64_t v38 = *(unsigned int *)(v15 + 3404);
    if ((_DWORD)v38 && gBreakOnError)
    {
      uint64_t v51 = 3LL;
      uint64_t v52 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v27 & 2) == 0) {
        goto LABEL_37;
      }
      uint64_t v51 = 2LL;
      uint64_t v52 = 732LL;
    }

    breakpoint_break((uint64_t)v55, (volatile int *)v52, v51, v38, v15);
LABEL_37:
    uint64_t v39 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v37) defaultFbufStream];
    uint32x4_t v40 = (unsigned int *)((char *)v39 + 56);
    do
      uint32x4_t v41 = __ldaxr(v40);
    while (__stlxr(1u, v40));
    if (v41 == 1)
    {
      do
      {
        while (*v40 == 1)
          ;
        do
          uint32x4_t v42 = __ldaxr(v40);
        while (__stlxr(1u, v40));
      }

      while (v42 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v39, (GPUTools::FB::Fbuf *)v55, *(unsigned int *)v55[0], 1);
    atomic_store(0, v40);
    do
    {
      v43 = __ldaxr(v16);
      uint64_t v44 = v43 - 1;
    }

    while (__stlxr(v44, v16));
    if (gCheckGLErrors) {
      unsigned int v45 = v44 < 1;
    }
    else {
      unsigned int v45 = 1;
    }
    if (!v45) {
      handle_opengl_thread_conflict((const void **)v15);
    }
    goto LABEL_50;
  }

  do
    unsigned int v46 = __ldaxr(v16);
  while (__stlxr(v46 - 1, v16));
  [(id)DYGetGLGuestAppClient(v24) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, const void *))(*(void *)(v15 + 24) + 2672LL))( a1,  a2,  a3,  a4,  a5);
LABEL_50:
  if (v55[0]) {
    free(v55[0]);
  }
}

    uint32x4_t v26 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v21), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v26) {
      uint32x4_t v26 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v48, v27);
    }
    unint64_t v29 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
    if ((_DWORD)v29) {
      uint32x4_t v26 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v48, v29, v28);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v26), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v9, (uint64_t)v48);
    }
    uint64_t v30 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)v48);
    int v31 = *(unsigned int *)(v9 + 3404);
    if ((_DWORD)v31 && gBreakOnError)
    {
      uint64_t v44 = 3LL;
      unsigned int v45 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v20 & 2) == 0) {
        goto LABEL_37;
      }
      uint64_t v44 = 2LL;
      unsigned int v45 = 44LL;
    }

    breakpoint_break((uint64_t)v48, (volatile int *)v45, v44, v31, v9);
LABEL_37:
    unsigned int v32 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v30) defaultFbufStream];
    uint64_t v33 = (unsigned int *)((char *)v32 + 56);
    do
      NSUInteger v34 = __ldaxr(v33);
    while (__stlxr(1u, v33));
    if (v34 == 1)
    {
      do
      {
        while (*v33 == 1)
          ;
        do
          uint64_t v35 = __ldaxr(v33);
        while (__stlxr(1u, v33));
      }

      while (v35 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v32, (GPUTools::FB::Fbuf *)v48, *(unsigned int *)v48[0], 1);
    atomic_store(0, v33);
    *(_DWORD *)(v9 + 2076) = a2;
    do
    {
      uint32x4_t v36 = __ldaxr(v10);
      uint32x4_t v37 = v36 - 1;
    }

    while (__stlxr(v37, v10));
    if (gCheckGLErrors) {
      uint64_t v38 = v37 < 1;
    }
    else {
      uint64_t v38 = 1;
    }
    if (!v38) {
      handle_opengl_thread_conflict((const void **)v9);
    }
    goto LABEL_50;
  }

  do
    uint64_t v39 = __ldaxr(v10);
  while (__stlxr(v39 - 1, v10));
  [(id)DYGetGLGuestAppClient(v18) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 2728LL))(a1, a2);
LABEL_50:
  if (v48[0]) {
    free(v48[0]);
  }
}

    uint32x4_t v26 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v21), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v26) {
      uint32x4_t v26 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v48, v27);
    }
    unint64_t v29 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
    if ((_DWORD)v29) {
      uint32x4_t v26 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v48, v29, v28);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v26), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v9, (uint64_t)v48);
    }
    uint64_t v30 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)v48);
    int v31 = *(unsigned int *)(v9 + 3404);
    if ((_DWORD)v31 && gBreakOnError)
    {
      uint64_t v44 = 3LL;
      unsigned int v45 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v20 & 2) == 0) {
        goto LABEL_37;
      }
      unsigned int v45 = 2LL;
      uint64_t v44 = 2LL;
    }

    breakpoint_break((uint64_t)v48, (volatile int *)v45, v44, v31, v9);
LABEL_37:
    unsigned int v32 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v30) defaultFbufStream];
    uint64_t v33 = (unsigned int *)((char *)v32 + 56);
    do
      NSUInteger v34 = __ldaxr(v33);
    while (__stlxr(1u, v33));
    if (v34 == 1)
    {
      do
      {
        while (*v33 == 1)
          ;
        do
          uint64_t v35 = __ldaxr(v33);
        while (__stlxr(1u, v33));
      }

      while (v35 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v32, (GPUTools::FB::Fbuf *)v48, *(unsigned int *)v48[0], 1);
    atomic_store(0, v33);
    *(_DWORD *)(v9 + 2072) = a2;
    do
    {
      uint32x4_t v36 = __ldaxr(v10);
      uint32x4_t v37 = v36 - 1;
    }

    while (__stlxr(v37, v10));
    if (gCheckGLErrors) {
      uint64_t v38 = v37 < 1;
    }
    else {
      uint64_t v38 = 1;
    }
    if (!v38) {
      handle_opengl_thread_conflict((const void **)v9);
    }
    goto LABEL_50;
  }

  do
    uint64_t v39 = __ldaxr(v10);
  while (__stlxr(v39 - 1, v10));
  [(id)DYGetGLGuestAppClient(v18) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 2736LL))(a1, a2);
LABEL_50:
  if (v48[0]) {
    free(v48[0]);
  }
}

    unsigned int v32 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v32) {
      unsigned int v32 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v54, v33);
    }
    uint64_t v35 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v15 + 3404);
    if ((_DWORD)v35) {
      unsigned int v32 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v54, v35, v34);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v15, (uint64_t)v54);
    }
    uint32x4_t v36 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v15 + 3480),  (GPUTools::FB::Fbuf *)(v15 + 3520),  (GPUTools::FB *)v54);
    uint32x4_t v37 = *(unsigned int *)(v15 + 3404);
    if ((_DWORD)v37 && gBreakOnError)
    {
      unsigned int v50 = 3LL;
      uint64_t v51 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v26 & 2) == 0) {
        goto LABEL_37;
      }
      unsigned int v50 = 2LL;
      uint64_t v51 = 831LL;
    }

    breakpoint_break((uint64_t)v54, (volatile int *)v51, v50, v37, v15);
LABEL_37:
    uint64_t v38 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v36) defaultFbufStream];
    uint64_t v39 = (unsigned int *)((char *)v38 + 56);
    do
      uint32x4_t v40 = __ldaxr(v39);
    while (__stlxr(1u, v39));
    if (v40 == 1)
    {
      do
      {
        while (*v39 == 1)
          ;
        do
          uint32x4_t v41 = __ldaxr(v39);
        while (__stlxr(1u, v39));
      }

      while (v41 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v38, (GPUTools::FB::Fbuf *)v54, *(unsigned int *)v54[0], 1);
    atomic_store(0, v39);
    do
    {
      uint32x4_t v42 = __ldaxr(v16);
      v43 = v42 - 1;
    }

    while (__stlxr(v43, v16));
    if (gCheckGLErrors) {
      uint64_t v44 = v43 < 1;
    }
    else {
      uint64_t v44 = 1;
    }
    if (!v44) {
      handle_opengl_thread_conflict((const void **)v15);
    }
    goto LABEL_50;
  }

  do
    unsigned int v45 = __ldaxr(v16);
  while (__stlxr(v45 - 1, v16));
  [(id)DYGetGLGuestAppClient(v24) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, const char *const *, unsigned int *))(*(void *)(v15 + 24) + 3528LL))( a1,  a2,  a3,  a4,  a5);
LABEL_50:
  if (v54[0]) {
    free(v54[0]);
  }
}

    NSUInteger v34 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v34) {
      NSUInteger v34 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v56, v35);
    }
    uint32x4_t v37 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v17 + 3404);
    if ((_DWORD)v37) {
      NSUInteger v34 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v56, v37, v36);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v34), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v17, (uint64_t)v56);
    }
    uint64_t v38 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v17 + 3480),  (GPUTools::FB::Fbuf *)(v17 + 3520),  (GPUTools::FB *)v56);
    uint64_t v39 = *(unsigned int *)(v17 + 3404);
    if ((_DWORD)v39 && gBreakOnError)
    {
      uint64_t v52 = 3LL;
      uint32x4_t v53 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v28 & 2) == 0) {
        goto LABEL_37;
      }
      uint64_t v52 = 2LL;
      uint32x4_t v53 = 829LL;
    }

    breakpoint_break((uint64_t)v56, (volatile int *)v53, v52, v39, v17);
LABEL_37:
    uint32x4_t v40 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v38) defaultFbufStream];
    uint32x4_t v41 = (unsigned int *)((char *)v40 + 56);
    do
      uint32x4_t v42 = __ldaxr(v41);
    while (__stlxr(1u, v41));
    if (v42 == 1)
    {
      do
      {
        while (*v41 == 1)
          ;
        do
          v43 = __ldaxr(v41);
        while (__stlxr(1u, v41));
      }

      while (v43 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v40, (GPUTools::FB::Fbuf *)v56, *(unsigned int *)v56[0], 1);
    atomic_store(0, v41);
    do
    {
      uint64_t v44 = __ldaxr(v18);
      unsigned int v45 = v44 - 1;
    }

    while (__stlxr(v45, v18));
    if (gCheckGLErrors) {
      unsigned int v46 = v45 < 1;
    }
    else {
      unsigned int v46 = 1;
    }
    if (!v46) {
      handle_opengl_thread_conflict((const void **)v17);
    }
    goto LABEL_50;
  }

  do
    uint64_t v47 = __ldaxr(v18);
  while (__stlxr(v47 - 1, v18));
  [(id)DYGetGLGuestAppClient(v26) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, const unsigned int *, uint64_t, int *))(*(void *)(v17 + 24) + 3536LL))( a1,  a2,  a3,  a4,  a5,  a6);
LABEL_50:
  if (v56[0]) {
    free(v56[0]);
  }
}

    unsigned int v32 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v32) {
      unsigned int v32 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v54, v33);
    }
    uint64_t v35 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v15 + 3404);
    if ((_DWORD)v35) {
      unsigned int v32 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v54, v35, v34);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v15, (uint64_t)v54);
    }
    uint32x4_t v36 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v15 + 3480),  (GPUTools::FB::Fbuf *)(v15 + 3520),  (GPUTools::FB *)v54);
    uint32x4_t v37 = *(unsigned int *)(v15 + 3404);
    if ((_DWORD)v37 && gBreakOnError)
    {
      unsigned int v50 = 3LL;
      uint64_t v51 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v26 & 2) == 0) {
        goto LABEL_37;
      }
      unsigned int v50 = 2LL;
      uint64_t v51 = 827LL;
    }

    breakpoint_break((uint64_t)v54, (volatile int *)v51, v50, v37, v15);
LABEL_37:
    uint64_t v38 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v36) defaultFbufStream];
    uint64_t v39 = (unsigned int *)((char *)v38 + 56);
    do
      uint32x4_t v40 = __ldaxr(v39);
    while (__stlxr(1u, v39));
    if (v40 == 1)
    {
      do
      {
        while (*v39 == 1)
          ;
        do
          uint32x4_t v41 = __ldaxr(v39);
        while (__stlxr(1u, v39));
      }

      while (v41 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v38, (GPUTools::FB::Fbuf *)v54, *(unsigned int *)v54[0], 1);
    atomic_store(0, v39);
    do
    {
      uint32x4_t v42 = __ldaxr(v16);
      v43 = v42 - 1;
    }

    while (__stlxr(v43, v16));
    if (gCheckGLErrors) {
      uint64_t v44 = v43 < 1;
    }
    else {
      uint64_t v44 = 1;
    }
    if (!v44) {
      handle_opengl_thread_conflict((const void **)v15);
    }
    goto LABEL_50;
  }

  do
    unsigned int v45 = __ldaxr(v16);
  while (__stlxr(v45 - 1, v16));
  [(id)DYGetGLGuestAppClient(v24) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, int *))(*(void *)(v15 + 24) + 3560LL))( a1,  a2,  a3,  a4,  a5);
LABEL_50:
  if (v54[0]) {
    free(v54[0]);
  }
}

    NSUInteger v34 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v34) {
      NSUInteger v34 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v56, v35);
    }
    uint32x4_t v37 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v17 + 3404);
    if ((_DWORD)v37) {
      NSUInteger v34 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v56, v37, v36);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v34), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v17, (uint64_t)v56);
    }
    uint64_t v38 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v17 + 3480),  (GPUTools::FB::Fbuf *)(v17 + 3520),  (GPUTools::FB *)v56);
    uint64_t v39 = *(unsigned int *)(v17 + 3404);
    if ((_DWORD)v39 && gBreakOnError)
    {
      uint64_t v52 = 3LL;
      uint32x4_t v53 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v28 & 2) == 0) {
        goto LABEL_37;
      }
      uint64_t v52 = 2LL;
      uint32x4_t v53 = 826LL;
    }

    breakpoint_break((uint64_t)v56, (volatile int *)v53, v52, v39, v17);
LABEL_37:
    uint32x4_t v40 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v38) defaultFbufStream];
    uint32x4_t v41 = (unsigned int *)((char *)v40 + 56);
    do
      uint32x4_t v42 = __ldaxr(v41);
    while (__stlxr(1u, v41));
    if (v42 == 1)
    {
      do
      {
        while (*v41 == 1)
          ;
        do
          v43 = __ldaxr(v41);
        while (__stlxr(1u, v41));
      }

      while (v43 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v40, (GPUTools::FB::Fbuf *)v56, *(unsigned int *)v56[0], 1);
    atomic_store(0, v41);
    do
    {
      uint64_t v44 = __ldaxr(v18);
      unsigned int v45 = v44 - 1;
    }

    while (__stlxr(v45, v18));
    if (gCheckGLErrors) {
      unsigned int v46 = v45 < 1;
    }
    else {
      unsigned int v46 = 1;
    }
    if (!v46) {
      handle_opengl_thread_conflict((const void **)v17);
    }
    goto LABEL_50;
  }

  do
    uint64_t v47 = __ldaxr(v18);
  while (__stlxr(v47 - 1, v18));
  [(id)DYGetGLGuestAppClient(v26) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, int *, char *))(*(void *)(v17 + 24) + 3568LL))( a1,  a2,  a3,  a4,  a5,  a6);
LABEL_50:
  if (v56[0]) {
    free(v56[0]);
  }
}

    int v31 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v26), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v31) {
      int v31 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v53, v32);
    }
    NSUInteger v34 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v34) {
      int v31 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v53, v34, v33);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v31), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v53);
    }
    uint64_t v35 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v53);
    uint32x4_t v36 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v36 && gBreakOnError)
    {
      v49 = 3LL;
      unsigned int v50 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v25 & 2) == 0) {
        goto LABEL_37;
      }
      v49 = 2LL;
      unsigned int v50 = 832LL;
    }

    breakpoint_break((uint64_t)v53, (volatile int *)v50, v49, v36, v13);
LABEL_37:
    uint32x4_t v37 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v35) defaultFbufStream];
    uint64_t v38 = (unsigned int *)((char *)v37 + 56);
    do
      uint64_t v39 = __ldaxr(v38);
    while (__stlxr(1u, v38));
    if (v39 == 1)
    {
      do
      {
        while (*v38 == 1)
          ;
        do
          uint32x4_t v40 = __ldaxr(v38);
        while (__stlxr(1u, v38));
      }

      while (v40 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v37, (GPUTools::FB::Fbuf *)v53, *(unsigned int *)v53[0], 1);
    atomic_store(0, v38);
    do
    {
      uint32x4_t v41 = __ldaxr(v14);
      uint32x4_t v42 = v41 - 1;
    }

    while (__stlxr(v42, v14));
    if (gCheckGLErrors) {
      v43 = v42 < 1;
    }
    else {
      v43 = 1;
    }
    if (!v43) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    goto LABEL_50;
  }

  do
    uint64_t v44 = __ldaxr(v14);
  while (__stlxr(v44 - 1, v14));
  [(id)DYGetGLGuestAppClient(v23) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 + 24) + 3576LL))( a1,  a2,  a3,  a4);
LABEL_50:
  if (v53[0]) {
    free(v53[0]);
  }
}

    unsigned int v32 = v57;
    uint64_t v56 = *((_OWORD *)v57 + 1);
    uint32x4_t v58 = v57;
    if (v59 >= 0x24)
    {
      *((_DWORD *)v57 + 8) = 0;
      NSUInteger *v32 = 0u;
      v32[1] = 0u;
    }

    GPUTools::FB::Encode((uint64_t)&v57, 202LL, 0LL, v11 + 4709, v24, v25, v26, v27, *(void *)v11);
    *((_OWORD *)v57 + 1) = v56;
    NSUInteger v34 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v34) {
      NSUInteger v34 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v57, v35);
    }
    uint32x4_t v37 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v37) {
      NSUInteger v34 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v57, v37, v36);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v34), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)&v57);
    }
    uint64_t v38 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v57);
    uint64_t v39 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v39 && gBreakOnError)
    {
      uint64_t v52 = 3LL;
      uint32x4_t v53 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v23 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v52 = 2LL;
      uint32x4_t v53 = 202LL;
    }

    breakpoint_break((uint64_t)&v57, (volatile int *)v53, v52, v39, v11);
LABEL_39:
    uint32x4_t v40 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v38) defaultFbufStream];
    uint32x4_t v41 = (unsigned int *)((char *)v40 + 56);
    do
      uint32x4_t v42 = __ldaxr(v41);
    while (__stlxr(1u, v41));
    if (v42 == 1)
    {
      do
      {
        while (*v41 == 1)
          ;
        do
          v43 = __ldaxr(v41);
        while (__stlxr(1u, v41));
      }

      while (v43 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v40, (GPUTools::FB::Fbuf *)&v57, *(unsigned int *)v57, 1);
    atomic_store(0, v41);
    do
    {
      uint64_t v44 = __ldaxr(v12);
      unsigned int v45 = v44 - 1;
    }

    while (__stlxr(v45, v12));
    if (gCheckGLErrors) {
      unsigned int v46 = v45 < 1;
    }
    else {
      unsigned int v46 = 1;
    }
    if (!v46) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    goto LABEL_52;
  }

  do
    uint64_t v47 = __ldaxr(v12);
  while (__stlxr(v47 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, unsigned int *))(*(void *)(v11 + 24) + 3704LL))(a1, a2, a3);
LABEL_52:
  if (v57) {
    free(v57);
  }
}

    uint32x4_t v28 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v23), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v28) {
      uint32x4_t v28 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v50, v29);
    }
    int v31 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v31) {
      uint32x4_t v28 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v50, v31, v30);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)v50);
    }
    unsigned int v32 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)v50);
    uint64_t v33 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v33 && gBreakOnError)
    {
      unsigned int v46 = 3LL;
      uint64_t v47 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v22 & 2) == 0) {
        goto LABEL_37;
      }
      unsigned int v46 = 2LL;
      uint64_t v47 = 120LL;
    }

    breakpoint_break((uint64_t)v50, (volatile int *)v47, v46, v33, v11);
LABEL_37:
    NSUInteger v34 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v32) defaultFbufStream];
    uint64_t v35 = (unsigned int *)((char *)v34 + 56);
    do
      uint32x4_t v36 = __ldaxr(v35);
    while (__stlxr(1u, v35));
    if (v36 == 1)
    {
      do
      {
        while (*v35 == 1)
          ;
        do
          uint32x4_t v37 = __ldaxr(v35);
        while (__stlxr(1u, v35));
      }

      while (v37 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v34, (GPUTools::FB::Fbuf *)v50, *(unsigned int *)v50[0], 1);
    atomic_store(0, v35);
    do
    {
      uint64_t v38 = __ldaxr(v12);
      uint64_t v39 = v38 - 1;
    }

    while (__stlxr(v39, v12));
    if (gCheckGLErrors) {
      uint32x4_t v40 = v39 < 1;
    }
    else {
      uint32x4_t v40 = 1;
    }
    if (!v40) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    goto LABEL_50;
  }

  do
    uint32x4_t v41 = __ldaxr(v12);
  while (__stlxr(v41 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, const unsigned int *))(*(void *)(v11 + 24) + 3712LL))( a1,  a2,  a3);
LABEL_50:
  if (v50[0]) {
    free(v50[0]);
  }
}

    uint32x4_t v28 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v23), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v28) {
      uint32x4_t v28 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v50, v29);
    }
    int v31 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v31) {
      uint32x4_t v28 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v50, v31, v30);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)v50);
    }
    unsigned int v32 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)v50);
    uint64_t v33 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v33 && gBreakOnError)
    {
      unsigned int v46 = 3LL;
      uint64_t v47 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v22 & 2) == 0) {
        goto LABEL_37;
      }
      unsigned int v46 = 2LL;
      uint64_t v47 = 675LL;
    }

    breakpoint_break((uint64_t)v50, (volatile int *)v47, v46, v33, v11);
LABEL_37:
    NSUInteger v34 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v32) defaultFbufStream];
    uint64_t v35 = (unsigned int *)((char *)v34 + 56);
    do
      uint32x4_t v36 = __ldaxr(v35);
    while (__stlxr(1u, v35));
    if (v36 == 1)
    {
      do
      {
        while (*v35 == 1)
          ;
        do
          uint32x4_t v37 = __ldaxr(v35);
        while (__stlxr(1u, v35));
      }

      while (v37 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v34, (GPUTools::FB::Fbuf *)v50, *(unsigned int *)v50[0], 1);
    atomic_store(0, v35);
    wrapper_cache_vertex_attrib((char *)v11, a2, 5126, a3, 0.0, 0.0, 1.0);
    do
    {
      uint64_t v38 = __ldaxr(v12);
      uint64_t v39 = v38 - 1;
    }

    while (__stlxr(v39, v12));
    if (gCheckGLErrors) {
      uint32x4_t v40 = v39 < 1;
    }
    else {
      uint32x4_t v40 = 1;
    }
    if (!v40) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    goto LABEL_50;
  }

  do
    uint32x4_t v41 = __ldaxr(v12);
  while (__stlxr(v41 - 1, v12));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, float))(*(void *)(v11 + 24) + 3808LL))(a1, a2, a3);
LABEL_50:
  if (v50[0]) {
    free(v50[0]);
  }
}

    uint64_t v30 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v25), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v30) {
      uint64_t v30 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v52, v31);
    }
    uint64_t v33 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v33) {
      uint64_t v30 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v52, v33, v32);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v30), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v52);
    }
    NSUInteger v34 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v52);
    uint64_t v35 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v35 && gBreakOnError)
    {
      unsigned int v48 = 3LL;
      v49 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v24 & 2) == 0) {
        goto LABEL_37;
      }
      unsigned int v48 = 2LL;
      v49 = 681LL;
    }

    breakpoint_break((uint64_t)v52, (volatile int *)v49, v48, v35, v13);
LABEL_37:
    uint32x4_t v36 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v34) defaultFbufStream];
    uint32x4_t v37 = (unsigned int *)((char *)v36 + 56);
    do
      uint64_t v38 = __ldaxr(v37);
    while (__stlxr(1u, v37));
    if (v38 == 1)
    {
      do
      {
        while (*v37 == 1)
          ;
        do
          uint64_t v39 = __ldaxr(v37);
        while (__stlxr(1u, v37));
      }

      while (v39 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v36, (GPUTools::FB::Fbuf *)v52, *(unsigned int *)v52[0], 1);
    atomic_store(0, v37);
    wrapper_cache_vertex_attrib((char *)v13, a2, 5126, a3, a4, 0.0, 1.0);
    do
    {
      uint32x4_t v40 = __ldaxr(v14);
      uint32x4_t v41 = v40 - 1;
    }

    while (__stlxr(v41, v14));
    if (gCheckGLErrors) {
      uint32x4_t v42 = v41 < 1;
    }
    else {
      uint32x4_t v42 = 1;
    }
    if (!v42) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    goto LABEL_50;
  }

  do
    v43 = __ldaxr(v14);
  while (__stlxr(v43 - 1, v14));
  [(id)DYGetGLGuestAppClient(v22) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, float, float))(*(void *)(v13 + 24) + 3832LL))(a1, a2, a3, a4);
LABEL_50:
  if (v52[0]) {
    free(v52[0]);
  }
}

    unsigned int v32 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v32) {
      unsigned int v32 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v54, v33);
    }
    uint64_t v35 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v15 + 3404);
    if ((_DWORD)v35) {
      unsigned int v32 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v54, v35, v34);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v15, (uint64_t)v54);
    }
    uint32x4_t v36 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v15 + 3480),  (GPUTools::FB::Fbuf *)(v15 + 3520),  (GPUTools::FB *)v54);
    uint32x4_t v37 = *(unsigned int *)(v15 + 3404);
    if ((_DWORD)v37 && gBreakOnError)
    {
      unsigned int v50 = 3LL;
      uint64_t v51 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v26 & 2) == 0) {
        goto LABEL_37;
      }
      unsigned int v50 = 2LL;
      uint64_t v51 = 687LL;
    }

    breakpoint_break((uint64_t)v54, (volatile int *)v51, v50, v37, v15);
LABEL_37:
    uint64_t v38 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v36) defaultFbufStream];
    uint64_t v39 = (unsigned int *)((char *)v38 + 56);
    do
      uint32x4_t v40 = __ldaxr(v39);
    while (__stlxr(1u, v39));
    if (v40 == 1)
    {
      do
      {
        while (*v39 == 1)
          ;
        do
          uint32x4_t v41 = __ldaxr(v39);
        while (__stlxr(1u, v39));
      }

      while (v41 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v38, (GPUTools::FB::Fbuf *)v54, *(unsigned int *)v54[0], 1);
    atomic_store(0, v39);
    wrapper_cache_vertex_attrib((char *)v15, a2, 5126, a3, a4, a5, 1.0);
    do
    {
      uint32x4_t v42 = __ldaxr(v16);
      v43 = v42 - 1;
    }

    while (__stlxr(v43, v16));
    if (gCheckGLErrors) {
      uint64_t v44 = v43 < 1;
    }
    else {
      uint64_t v44 = 1;
    }
    if (!v44) {
      handle_opengl_thread_conflict((const void **)v15);
    }
    goto LABEL_50;
  }

  do
    unsigned int v45 = __ldaxr(v16);
  while (__stlxr(v45 - 1, v16));
  [(id)DYGetGLGuestAppClient(v24) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, float, float, float))(*(void *)(v15 + 24) + 3856LL))( a1,  a2,  a3,  a4,  a5);
LABEL_50:
  if (v54[0]) {
    free(v54[0]);
  }
}

    NSUInteger v34 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v34) {
      NSUInteger v34 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v56, v35);
    }
    uint32x4_t v37 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v17 + 3404);
    if ((_DWORD)v37) {
      NSUInteger v34 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v56, v37, v36);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v34), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v17, (uint64_t)v56);
    }
    uint64_t v38 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v17 + 3480),  (GPUTools::FB::Fbuf *)(v17 + 3520),  (GPUTools::FB *)v56);
    uint64_t v39 = *(unsigned int *)(v17 + 3404);
    if ((_DWORD)v39 && gBreakOnError)
    {
      uint64_t v52 = 3LL;
      uint32x4_t v53 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v28 & 2) == 0) {
        goto LABEL_37;
      }
      uint64_t v52 = 2LL;
      uint32x4_t v53 = 701LL;
    }

    breakpoint_break((uint64_t)v56, (volatile int *)v53, v52, v39, v17);
LABEL_37:
    uint32x4_t v40 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v38) defaultFbufStream];
    uint32x4_t v41 = (unsigned int *)((char *)v40 + 56);
    do
      uint32x4_t v42 = __ldaxr(v41);
    while (__stlxr(1u, v41));
    if (v42 == 1)
    {
      do
      {
        while (*v41 == 1)
          ;
        do
          v43 = __ldaxr(v41);
        while (__stlxr(1u, v41));
      }

      while (v43 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v40, (GPUTools::FB::Fbuf *)v56, *(unsigned int *)v56[0], 1);
    atomic_store(0, v41);
    wrapper_cache_vertex_attrib((char *)v17, a2, 5126, a3, a4, a5, a6);
    do
    {
      uint64_t v44 = __ldaxr(v18);
      unsigned int v45 = v44 - 1;
    }

    while (__stlxr(v45, v18));
    if (gCheckGLErrors) {
      unsigned int v46 = v45 < 1;
    }
    else {
      unsigned int v46 = 1;
    }
    if (!v46) {
      handle_opengl_thread_conflict((const void **)v17);
    }
    goto LABEL_50;
  }

  do
    uint64_t v47 = __ldaxr(v18);
  while (__stlxr(v47 - 1, v18));
  [(id)DYGetGLGuestAppClient(v26) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, float, float, float, float))(*(void *)(v17 + 24) + 3880LL))( a1,  a2,  a3,  a4,  a5,  a6);
LABEL_50:
  if (v56[0]) {
    free(v56[0]);
  }
}

    uint32x4_t v28 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v23), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v28) {
      uint32x4_t v28 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v50, v29);
    }
    int v31 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v31) {
      uint32x4_t v28 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v50, v31, v30);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)v50);
    }
    unsigned int v32 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)v50);
    uint64_t v33 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v33 && gBreakOnError)
    {
      unsigned int v46 = 3LL;
      uint64_t v47 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v22 & 2) == 0) {
        goto LABEL_37;
      }
      unsigned int v46 = 2LL;
      uint64_t v47 = 676LL;
    }

    breakpoint_break((uint64_t)v50, (volatile int *)v47, v46, v33, v11);
LABEL_37:
    NSUInteger v34 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v32) defaultFbufStream];
    uint64_t v35 = (unsigned int *)((char *)v34 + 56);
    do
      uint32x4_t v36 = __ldaxr(v35);
    while (__stlxr(1u, v35));
    if (v36 == 1)
    {
      do
      {
        while (*v35 == 1)
          ;
        do
          uint32x4_t v37 = __ldaxr(v35);
        while (__stlxr(1u, v35));
      }

      while (v37 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v34, (GPUTools::FB::Fbuf *)v50, *(unsigned int *)v50[0], 1);
    atomic_store(0, v35);
    wrapper_cache_vertex_attrib((char *)v11, a2, 5126, *a3, 0.0, 0.0, 1.0);
    do
    {
      uint64_t v38 = __ldaxr(v12);
      uint64_t v39 = v38 - 1;
    }

    while (__stlxr(v39, v12));
    if (gCheckGLErrors) {
      uint32x4_t v40 = v39 < 1;
    }
    else {
      uint32x4_t v40 = 1;
    }
    if (!v40) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    goto LABEL_50;
  }

  do
    uint32x4_t v41 = __ldaxr(v12);
  while (__stlxr(v41 - 1, v12));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, const float *))(*(void *)(v11 + 24) + 3912LL))(a1, a2, a3);
LABEL_50:
  if (v50[0]) {
    free(v50[0]);
  }
}

    uint32x4_t v28 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v23), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v28) {
      uint32x4_t v28 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v50, v29);
    }
    int v31 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v31) {
      uint32x4_t v28 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v50, v31, v30);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)v50);
    }
    unsigned int v32 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)v50);
    uint64_t v33 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v33 && gBreakOnError)
    {
      unsigned int v46 = 3LL;
      uint64_t v47 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v22 & 2) == 0) {
        goto LABEL_37;
      }
      unsigned int v46 = 2LL;
      uint64_t v47 = 682LL;
    }

    breakpoint_break((uint64_t)v50, (volatile int *)v47, v46, v33, v11);
LABEL_37:
    NSUInteger v34 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v32) defaultFbufStream];
    uint64_t v35 = (unsigned int *)((char *)v34 + 56);
    do
      uint32x4_t v36 = __ldaxr(v35);
    while (__stlxr(1u, v35));
    if (v36 == 1)
    {
      do
      {
        while (*v35 == 1)
          ;
        do
          uint32x4_t v37 = __ldaxr(v35);
        while (__stlxr(1u, v35));
      }

      while (v37 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v34, (GPUTools::FB::Fbuf *)v50, *(unsigned int *)v50[0], 1);
    atomic_store(0, v35);
    wrapper_cache_vertex_attrib((char *)v11, a2, 5126, *a3, a3[1], 0.0, 1.0);
    do
    {
      uint64_t v38 = __ldaxr(v12);
      uint64_t v39 = v38 - 1;
    }

    while (__stlxr(v39, v12));
    if (gCheckGLErrors) {
      uint32x4_t v40 = v39 < 1;
    }
    else {
      uint32x4_t v40 = 1;
    }
    if (!v40) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    goto LABEL_50;
  }

  do
    uint32x4_t v41 = __ldaxr(v12);
  while (__stlxr(v41 - 1, v12));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, const float *))(*(void *)(v11 + 24) + 3936LL))(a1, a2, a3);
LABEL_50:
  if (v50[0]) {
    free(v50[0]);
  }
}

    uint32x4_t v28 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v23), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v28) {
      uint32x4_t v28 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v50, v29);
    }
    int v31 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v31) {
      uint32x4_t v28 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v50, v31, v30);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)v50);
    }
    unsigned int v32 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)v50);
    uint64_t v33 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v33 && gBreakOnError)
    {
      unsigned int v46 = 3LL;
      uint64_t v47 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v22 & 2) == 0) {
        goto LABEL_37;
      }
      unsigned int v46 = 2LL;
      uint64_t v47 = 688LL;
    }

    breakpoint_break((uint64_t)v50, (volatile int *)v47, v46, v33, v11);
LABEL_37:
    NSUInteger v34 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v32) defaultFbufStream];
    uint64_t v35 = (unsigned int *)((char *)v34 + 56);
    do
      uint32x4_t v36 = __ldaxr(v35);
    while (__stlxr(1u, v35));
    if (v36 == 1)
    {
      do
      {
        while (*v35 == 1)
          ;
        do
          uint32x4_t v37 = __ldaxr(v35);
        while (__stlxr(1u, v35));
      }

      while (v37 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v34, (GPUTools::FB::Fbuf *)v50, *(unsigned int *)v50[0], 1);
    atomic_store(0, v35);
    wrapper_cache_vertex_attrib((char *)v11, a2, 5126, *a3, a3[1], a3[2], 1.0);
    do
    {
      uint64_t v38 = __ldaxr(v12);
      uint64_t v39 = v38 - 1;
    }

    while (__stlxr(v39, v12));
    if (gCheckGLErrors) {
      uint32x4_t v40 = v39 < 1;
    }
    else {
      uint32x4_t v40 = 1;
    }
    if (!v40) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    goto LABEL_50;
  }

  do
    uint32x4_t v41 = __ldaxr(v12);
  while (__stlxr(v41 - 1, v12));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, const float *))(*(void *)(v11 + 24) + 3960LL))(a1, a2, a3);
LABEL_50:
  if (v50[0]) {
    free(v50[0]);
  }
}

    uint32x4_t v28 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v23), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v28) {
      uint32x4_t v28 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v50, v29);
    }
    int v31 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v31) {
      uint32x4_t v28 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v50, v31, v30);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)v50);
    }
    unsigned int v32 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)v50);
    uint64_t v33 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v33 && gBreakOnError)
    {
      unsigned int v46 = 3LL;
      uint64_t v47 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v22 & 2) == 0) {
        goto LABEL_37;
      }
      unsigned int v46 = 2LL;
      uint64_t v47 = 702LL;
    }

    breakpoint_break((uint64_t)v50, (volatile int *)v47, v46, v33, v11);
LABEL_37:
    NSUInteger v34 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v32) defaultFbufStream];
    uint64_t v35 = (unsigned int *)((char *)v34 + 56);
    do
      uint32x4_t v36 = __ldaxr(v35);
    while (__stlxr(1u, v35));
    if (v36 == 1)
    {
      do
      {
        while (*v35 == 1)
          ;
        do
          uint32x4_t v37 = __ldaxr(v35);
        while (__stlxr(1u, v35));
      }

      while (v37 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v34, (GPUTools::FB::Fbuf *)v50, *(unsigned int *)v50[0], 1);
    atomic_store(0, v35);
    wrapper_cache_vertex_attrib((char *)v11, a2, 5126, *a3, a3[1], a3[2], a3[3]);
    do
    {
      uint64_t v38 = __ldaxr(v12);
      uint64_t v39 = v38 - 1;
    }

    while (__stlxr(v39, v12));
    if (gCheckGLErrors) {
      uint32x4_t v40 = v39 < 1;
    }
    else {
      uint32x4_t v40 = 1;
    }
    if (!v40) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    goto LABEL_50;
  }

  do
    uint32x4_t v41 = __ldaxr(v12);
  while (__stlxr(v41 - 1, v12));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, const float *))(*(void *)(v11 + 24) + 4024LL))(a1, a2, a3);
LABEL_50:
  if (v50[0]) {
    free(v50[0]);
  }
}

    uint64_t v33 = v58;
    uint32x4_t v57 = *((_OWORD *)v58 + 1);
    uint32x4_t v59 = v58;
    if (v60 >= 0x24)
    {
      *((_DWORD *)v58 + 8) = 0;
      *uint64_t v33 = 0u;
      v33[1] = 0u;
    }

    GPUTools::FB::Encode((uint64_t)&v58, 305LL, 256LL, (uint64_t)"Cuie@1t", v25, v26, v27, v28, *(void *)v13);
    *((_OWORD *)v58 + 1) = v57;
    uint64_t v35 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v34), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v35) {
      uint64_t v35 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v58, v36);
    }
    uint64_t v38 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v38) {
      uint64_t v35 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v58, v38, v37);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v35), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)&v58);
    }
    uint64_t v39 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)&v58);
    uint32x4_t v40 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v40 && gBreakOnError)
    {
      uint32x4_t v53 = 3LL;
      uint32x4_t v54 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v24 & 2) == 0) {
        goto LABEL_39;
      }
      uint32x4_t v53 = 2LL;
      uint32x4_t v54 = 305LL;
    }

    breakpoint_break((uint64_t)&v58, (volatile int *)v54, v53, v40, v13);
LABEL_39:
    uint32x4_t v41 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v39) defaultFbufStream];
    uint32x4_t v42 = (unsigned int *)((char *)v41 + 56);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(1u, v42));
    if (v43 == 1)
    {
      do
      {
        while (*v42 == 1)
          ;
        do
          uint64_t v44 = __ldaxr(v42);
        while (__stlxr(1u, v42));
      }

      while (v44 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v41, (GPUTools::FB::Fbuf *)&v58, *(unsigned int *)v58, 1);
    atomic_store(0, v42);
    do
    {
      unsigned int v45 = __ldaxr(v14);
      unsigned int v46 = v45 - 1;
    }

    while (__stlxr(v46, v14));
    if (gCheckGLErrors) {
      uint64_t v47 = v46 < 1;
    }
    else {
      uint64_t v47 = 1;
    }
    if (!v47) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    goto LABEL_52;
  }

  do
    unsigned int v48 = __ldaxr(v14);
  while (__stlxr(v48 - 1, v14));
  [(id)DYGetGLGuestAppClient(v22) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, void **))(*(void *)(v13 + 24) + 4136LL))( a1,  a2,  a3,  a4);
LABEL_52:
  if (v58) {
    free(v58);
  }
}

    uint32x4_t v27 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v22), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v27) {
      uint32x4_t v27 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v49, v28);
    }
    uint64_t v30 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
    if ((_DWORD)v30) {
      uint32x4_t v27 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v49, v30, v29);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v9, (uint64_t)v49);
    }
    int v31 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)v49);
    unsigned int v32 = *(unsigned int *)(v9 + 3404);
    if ((_DWORD)v32 && gBreakOnError)
    {
      unsigned int v45 = 3LL;
      unsigned int v46 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v21 & 2) == 0) {
        goto LABEL_37;
      }
      unsigned int v45 = 2LL;
      unsigned int v46 = 123LL;
    }

    breakpoint_break((uint64_t)v49, (volatile int *)v46, v45, v32, v9);
LABEL_37:
    uint64_t v33 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v31) defaultFbufStream];
    NSUInteger v34 = (unsigned int *)((char *)v33 + 56);
    do
      uint64_t v35 = __ldaxr(v34);
    while (__stlxr(1u, v34));
    if (v35 == 1)
    {
      do
      {
        while (*v34 == 1)
          ;
        do
          uint32x4_t v36 = __ldaxr(v34);
        while (__stlxr(1u, v34));
      }

      while (v36 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v33, (GPUTools::FB::Fbuf *)v49, *(unsigned int *)v49[0], 1);
    atomic_store(0, v34);
    do
    {
      uint32x4_t v37 = __ldaxr(v10);
      uint64_t v38 = v37 - 1;
    }

    while (__stlxr(v38, v10));
    if (gCheckGLErrors) {
      uint64_t v39 = v38 < 1;
    }
    else {
      uint64_t v39 = 1;
    }
    if (!v39) {
      handle_opengl_thread_conflict((const void **)v9);
    }
    goto LABEL_50;
  }

  do
    uint32x4_t v40 = __ldaxr(v10);
  while (__stlxr(v40 - 1, v10));
  [(id)DYGetGLGuestAppClient(v19) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, volatile int *))(*(void *)(v9 + 24) + 4728LL))(a1, a2);
LABEL_50:
  if (v49[0]) {
    free(v49[0]);
  }
}

    unint64_t v29 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v24), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v29) {
      unint64_t v29 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v51, v30);
    }
    unsigned int v32 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v32) {
      unint64_t v29 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v51, v32, v31);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)v51);
    }
    uint64_t v33 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)v51);
    NSUInteger v34 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v34 && gBreakOnError)
    {
      uint64_t v47 = 3LL;
      unsigned int v48 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v23 & 2) == 0) {
        goto LABEL_37;
      }
      uint64_t v47 = 2LL;
      unsigned int v48 = 133LL;
    }

    breakpoint_break((uint64_t)v51, (volatile int *)v48, v47, v34, v11);
LABEL_37:
    uint64_t v35 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v33) defaultFbufStream];
    uint32x4_t v36 = (unsigned int *)((char *)v35 + 56);
    do
      uint32x4_t v37 = __ldaxr(v36);
    while (__stlxr(1u, v36));
    if (v37 == 1)
    {
      do
      {
        while (*v36 == 1)
          ;
        do
          uint64_t v38 = __ldaxr(v36);
        while (__stlxr(1u, v36));
      }

      while (v38 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v35, (GPUTools::FB::Fbuf *)v51, *(unsigned int *)v51[0], 1);
    atomic_store(0, v36);
    do
    {
      uint64_t v39 = __ldaxr(v12);
      uint32x4_t v40 = v39 - 1;
    }

    while (__stlxr(v40, v12));
    if (gCheckGLErrors) {
      uint32x4_t v41 = v40 < 1;
    }
    else {
      uint32x4_t v41 = 1;
    }
    if (!v41) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    goto LABEL_50;
  }

  do
    uint32x4_t v42 = __ldaxr(v12);
  while (__stlxr(v42 - 1, v12));
  [(id)DYGetGLGuestAppClient(v21) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, volatile int *, uint64_t))(*(void *)(v11 + 24) + 4744LL))(a1, a2, a3);
LABEL_50:
  if (v51[0]) {
    free(v51[0]);
  }
}

    uint64_t v33 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v33) {
      uint64_t v33 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v55, v34);
    }
    uint32x4_t v36 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v15 + 3404);
    if ((_DWORD)v36) {
      uint64_t v33 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v55, v36, v35);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v15, (uint64_t)v55);
    }
    uint32x4_t v37 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v15 + 3480),  (GPUTools::FB::Fbuf *)(v15 + 3520),  (GPUTools::FB *)v55);
    uint64_t v38 = *(unsigned int *)(v15 + 3404);
    if ((_DWORD)v38 && gBreakOnError)
    {
      uint64_t v51 = 3LL;
      uint64_t v52 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v27 & 2) == 0) {
        goto LABEL_37;
      }
      uint64_t v51 = 2LL;
      uint64_t v52 = 540LL;
    }

    breakpoint_break((uint64_t)v55, (volatile int *)v52, v51, v38, v15);
LABEL_37:
    uint64_t v39 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v37) defaultFbufStream];
    uint32x4_t v40 = (unsigned int *)((char *)v39 + 56);
    do
      uint32x4_t v41 = __ldaxr(v40);
    while (__stlxr(1u, v40));
    if (v41 == 1)
    {
      do
      {
        while (*v40 == 1)
          ;
        do
          uint32x4_t v42 = __ldaxr(v40);
        while (__stlxr(1u, v40));
      }

      while (v42 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v39, (GPUTools::FB::Fbuf *)v55, *(unsigned int *)v55[0], 1);
    atomic_store(0, v40);
    do
    {
      v43 = __ldaxr(v16);
      uint64_t v44 = v43 - 1;
    }

    while (__stlxr(v44, v16));
    if (gCheckGLErrors) {
      unsigned int v45 = v44 < 1;
    }
    else {
      unsigned int v45 = 1;
    }
    if (!v45) {
      handle_opengl_thread_conflict((const void **)v15);
    }
    goto LABEL_50;
  }

  do
    unsigned int v46 = __ldaxr(v16);
  while (__stlxr(v46 - 1, v16));
  [(id)DYGetGLGuestAppClient(v25) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, const char *const *, const int *))(*(void *)(v15 + 24)
                                                                                                + 4760LL))( a1,  a2,  a3,  a4,  a5);
LABEL_50:
  if (v55[0]) {
    free(v55[0]);
  }
}

    uint32x4_t v27 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v22), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v27) {
      uint32x4_t v27 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v65, v28);
    }
    uint64_t v30 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
    if ((_DWORD)v30) {
      uint32x4_t v27 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v65, v30, v29);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v9, (uint64_t)v65);
    }
    int v31 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)v65);
    unsigned int v32 = *(unsigned int *)(v9 + 3404);
    if ((_DWORD)v32 && gBreakOnError)
    {
      uint32x4_t v58 = 3LL;
      uint32x4_t v59 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v21 & 2) == 0) {
        goto LABEL_37;
      }
      uint32x4_t v58 = 2LL;
      uint32x4_t v59 = 93LL;
    }

    breakpoint_break((uint64_t)v65, (volatile int *)v59, v58, v32, v9);
LABEL_37:
    uint64_t v33 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v31) defaultFbufStream];
    NSUInteger v34 = (unsigned int *)((char *)v33 + 56);
    do
      uint64_t v35 = __ldaxr(v34);
    while (__stlxr(1u, v34));
    if (v35 == 1)
    {
      do
      {
        while (*v34 == 1)
          ;
        do
          uint32x4_t v36 = __ldaxr(v34);
        while (__stlxr(1u, v34));
      }

      while (v36 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v33, (GPUTools::FB::Fbuf *)v65, *(unsigned int *)v65[0], 1);
    atomic_store(0, v34);
    if (!gCheckGLErrors) {
      check_errors(v9);
    }
    if (!*(_DWORD *)(v9 + 3404))
    {
      wrapper_cache_shader_post_compile((ContextInfo *)v9, a2);
      info_log = (char *)query_info_log( v9,  a2,  *(void (**)(void, uint64_t, uint64_t, int *))(*(void *)(v9 + 32) + 5256LL),  *(void (**)(void, uint64_t, size_t, void, void *))(*(void *)(v9 + 32) + 5272LL),  (int *)&v64);
      uint64_t v38 = info_log;
      if (v64)
      {
        if (v64 >= 0x400) {
          uint64_t v39 = 1024LL;
        }
        else {
          uint64_t v39 = v64;
        }
        info_log[v39 - 1] = 0;
      }

      (*(void (**)(void, uint64_t, uint64_t, int *))(*(void *)(v9 + 32) + 5256LL))( *(void *)(v9 + 16),  a2,  35713LL,  &v63);
      (*(void (**)(void, uint64_t, uint64_t, int *))(*(void *)(v9 + 32) + 5256LL))( *(void *)(v9 + 16),  a2,  35712LL,  &v62);
      GPUTools::FB::Encode((uint64_t)v65, 4294955024LL, (uint64_t)"CiuiiSii", v40, v41, v42, v43, v44, *(void *)v9);
      unsigned int v46 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v45) defaultFbufStream];
      uint64_t v47 = (unsigned int *)((char *)v46 + 56);
      do
        unsigned int v48 = __ldaxr(v47);
      while (__stlxr(1u, v47));
      if (v48 == 1)
      {
        do
        {
          while (*v47 == 1)
            ;
          do
            v49 = __ldaxr(v47);
          while (__stlxr(1u, v47));
        }

        while (v49 == 1);
      }

      GPUTools::FB::Stream::Write_nolock(v46, (GPUTools::FB::Fbuf *)v65, *(unsigned int *)v65[0], 1);
      atomic_store(0, v47);
      free(v38);
    }

    do
    {
      unsigned int v50 = __ldaxr(v10);
      uint64_t v51 = v50 - 1;
    }

    while (__stlxr(v51, v10));
    if (gCheckGLErrors) {
      uint64_t v52 = v51 < 1;
    }
    else {
      uint64_t v52 = 1;
    }
    if (!v52) {
      handle_opengl_thread_conflict((const void **)v9);
    }
    goto LABEL_64;
  }

  do
    uint32x4_t v53 = __ldaxr(v10);
  while (__stlxr(v53 - 1, v10));
  [(id)DYGetGLGuestAppClient(v19) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 4768LL))(a1, a2);
LABEL_64:
  if (v65[0]) {
    free(v65[0]);
  }
}

    unint64_t v29 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v24), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v29) {
      unint64_t v29 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v51, v30);
    }
    unsigned int v32 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v32) {
      unint64_t v29 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v51, v32, v31);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)v51);
    }
    uint64_t v33 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)v51);
    NSUInteger v34 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v34 && gBreakOnError)
    {
      uint64_t v47 = 3LL;
      unsigned int v48 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v23 & 2) == 0) {
        goto LABEL_37;
      }
      uint64_t v47 = 2LL;
      unsigned int v48 = 6LL;
    }

    breakpoint_break((uint64_t)v51, (volatile int *)v48, v47, v34, v11);
LABEL_37:
    uint64_t v35 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v33) defaultFbufStream];
    uint32x4_t v36 = (unsigned int *)((char *)v35 + 56);
    do
      uint32x4_t v37 = __ldaxr(v36);
    while (__stlxr(1u, v36));
    if (v37 == 1)
    {
      do
      {
        while (*v36 == 1)
          ;
        do
          uint64_t v38 = __ldaxr(v36);
        while (__stlxr(1u, v36));
      }

      while (v38 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v35, (GPUTools::FB::Fbuf *)v51, *(unsigned int *)v51[0], 1);
    atomic_store(0, v36);
    if (!gCheckGLErrors) {
      check_errors(v11);
    }
    if (!*(_DWORD *)(v11 + 3404)) {
      wrapper_cache_shader_post_attach((ContextInfo *)v11, a2, a3);
    }
    do
    {
      uint64_t v39 = __ldaxr(v12);
      uint32x4_t v40 = v39 - 1;
    }

    while (__stlxr(v40, v12));
    if (gCheckGLErrors) {
      uint32x4_t v41 = v40 < 1;
    }
    else {
      uint32x4_t v41 = 1;
    }
    if (!v41) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    goto LABEL_53;
  }

  do
    uint32x4_t v42 = __ldaxr(v12);
  while (__stlxr(v42 - 1, v12));
  [(id)DYGetGLGuestAppClient(v21) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, void *, void *))(*(void *)(v11 + 24) + 4784LL))(a1, a2, a3);
LABEL_53:
  if (v51[0]) {
    free(v51[0]);
  }
}

    check_errors(v9);
    goto LABEL_29;
  }

  do
    int v71 = __ldaxr(v10);
  while (__stlxr(v71 - 1, v10));
  [(id)DYGetGLGuestAppClient(v19) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 4792LL))(a1, a2);
LABEL_74:
  _Block_object_dispose(&v97, 8);
  if (v103) {
    free(v103);
  }
}

    uint32x4_t v27 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v22), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v27) {
      uint32x4_t v27 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v49, v28);
    }
    uint64_t v30 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
    if ((_DWORD)v30) {
      uint32x4_t v27 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v49, v30, v29);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v9, (uint64_t)v49);
    }
    int v31 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)v49);
    unsigned int v32 = *(unsigned int *)(v9 + 3404);
    if ((_DWORD)v32 && gBreakOnError)
    {
      unsigned int v45 = 3LL;
      unsigned int v46 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v21 & 2) == 0) {
        goto LABEL_37;
      }
      unsigned int v45 = 2LL;
      unsigned int v46 = 645LL;
    }

    breakpoint_break((uint64_t)v49, (volatile int *)v46, v45, v32, v9);
LABEL_37:
    uint64_t v33 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v31) defaultFbufStream];
    NSUInteger v34 = (unsigned int *)((char *)v33 + 56);
    do
      uint64_t v35 = __ldaxr(v34);
    while (__stlxr(1u, v34));
    if (v35 == 1)
    {
      do
      {
        while (*v34 == 1)
          ;
        do
          uint32x4_t v36 = __ldaxr(v34);
        while (__stlxr(1u, v34));
      }

      while (v36 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v33, (GPUTools::FB::Fbuf *)v49, *(unsigned int *)v49[0], 1);
    atomic_store(0, v34);
    if (!gCheckGLErrors) {
      check_errors(v9);
    }
    if (!*(_DWORD *)(v9 + 3404)) {
      wrapper_cache_program_use((ContextInfo *)v9, a2);
    }
    do
    {
      uint32x4_t v37 = __ldaxr(v10);
      uint64_t v38 = v37 - 1;
    }

    while (__stlxr(v38, v10));
    if (gCheckGLErrors) {
      uint64_t v39 = v38 < 1;
    }
    else {
      uint64_t v39 = 1;
    }
    if (!v39) {
      handle_opengl_thread_conflict((const void **)v9);
    }
    goto LABEL_53;
  }

  do
    uint32x4_t v40 = __ldaxr(v10);
  while (__stlxr(v40 - 1, v10));
  [(id)DYGetGLGuestAppClient(v19) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, void *))(*(void *)(v9 + 24) + 4800LL))(a1, a2);
LABEL_53:
  if (v49[0]) {
    free(v49[0]);
  }
}

    uint32x4_t v27 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v22), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v27) {
      uint32x4_t v27 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v49, v28);
    }
    uint64_t v30 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
    if ((_DWORD)v30) {
      uint32x4_t v27 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v49, v30, v29);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v9, (uint64_t)v49);
    }
    int v31 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)v49);
    unsigned int v32 = *(unsigned int *)(v9 + 3404);
    if ((_DWORD)v32 && gBreakOnError)
    {
      unsigned int v45 = 3LL;
      unsigned int v46 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v21 & 2) == 0) {
        goto LABEL_37;
      }
      unsigned int v45 = 2LL;
      unsigned int v46 = 646LL;
    }

    breakpoint_break((uint64_t)v49, (volatile int *)v46, v45, v32, v9);
LABEL_37:
    uint64_t v33 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v31) defaultFbufStream];
    NSUInteger v34 = (unsigned int *)((char *)v33 + 56);
    do
      uint64_t v35 = __ldaxr(v34);
    while (__stlxr(1u, v34));
    if (v35 == 1)
    {
      do
      {
        while (*v34 == 1)
          ;
        do
          uint32x4_t v36 = __ldaxr(v34);
        while (__stlxr(1u, v34));
      }

      while (v36 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v33, (GPUTools::FB::Fbuf *)v49, *(unsigned int *)v49[0], 1);
    atomic_store(0, v34);
    do
    {
      uint32x4_t v37 = __ldaxr(v10);
      uint64_t v38 = v37 - 1;
    }

    while (__stlxr(v38, v10));
    if (gCheckGLErrors) {
      uint64_t v39 = v38 < 1;
    }
    else {
      uint64_t v39 = 1;
    }
    if (!v39) {
      handle_opengl_thread_conflict((const void **)v9);
    }
    goto LABEL_50;
  }

  do
    uint32x4_t v40 = __ldaxr(v10);
  while (__stlxr(v40 - 1, v10));
  [(id)DYGetGLGuestAppClient(v19) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, void *))(*(void *)(v9 + 24) + 4808LL))(a1, a2);
LABEL_50:
  if (v49[0]) {
    free(v49[0]);
  }
}

    uint32x4_t v37 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v37) {
      uint32x4_t v37 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v61, v38);
    }
    uint32x4_t v40 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v60 + 3404);
    if ((_DWORD)v40) {
      uint32x4_t v37 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v61, v40, v39);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v37), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v60, (uint64_t)v61);
    }
    uint32x4_t v41 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v60 + 3480),  (GPUTools::FB::Fbuf *)(v60 + 3520),  (GPUTools::FB *)v61);
    uint32x4_t v42 = *(unsigned int *)(v60 + 3404);
    if ((_DWORD)v42 && gBreakOnError)
    {
      v55 = 3LL;
      uint64_t v56 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v59 & 2) == 0) {
        goto LABEL_37;
      }
      v55 = 2LL;
      uint64_t v56 = 212LL;
    }

    breakpoint_break((uint64_t)v61, (volatile int *)v56, v55, v42, v60);
LABEL_37:
    v43 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v41) defaultFbufStream];
    uint64_t v44 = (unsigned int *)((char *)v43 + 56);
    do
      unsigned int v45 = __ldaxr(v44);
    while (__stlxr(1u, v44));
    if (v45 == 1)
    {
      do
      {
        while (*v44 == 1)
          ;
        do
          unsigned int v46 = __ldaxr(v44);
        while (__stlxr(1u, v44));
      }

      while (v46 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v43, (GPUTools::FB::Fbuf *)v61, *(unsigned int *)v61[0], 1);
    atomic_store(0, v44);
    do
    {
      uint64_t v47 = __ldaxr(v22);
      unsigned int v48 = v47 - 1;
    }

    while (__stlxr(v48, v22));
    if (gCheckGLErrors) {
      v49 = v48 < 1;
    }
    else {
      v49 = 1;
    }
    if (!v49) {
      handle_opengl_thread_conflict((const void **)v60);
    }
    goto LABEL_50;
  }

  do
    unsigned int v50 = __ldaxr(v22);
  while (__stlxr(v50 - 1, v22));
  [(id)DYGetGLGuestAppClient(v30) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, void *, uint64_t, uint64_t, int *, int *, unsigned int *, char *))(*(void *)(v21 + 24) + 5008LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);
LABEL_50:
  if (v61[0]) {
    free(v61[0]);
  }
}

    uint64_t v30 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v25), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v30) {
      uint64_t v30 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v52, v31);
    }
    uint64_t v33 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v33) {
      uint64_t v30 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v52, v33, v32);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v30), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v52);
    }
    NSUInteger v34 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v52);
    uint64_t v35 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v35 && gBreakOnError)
    {
      unsigned int v48 = 3LL;
      v49 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v24 & 2) == 0) {
        goto LABEL_37;
      }
      unsigned int v48 = 2LL;
      v49 = 300LL;
    }

    breakpoint_break((uint64_t)v52, (volatile int *)v49, v48, v35, v13);
LABEL_37:
    uint32x4_t v36 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v34) defaultFbufStream];
    uint32x4_t v37 = (unsigned int *)((char *)v36 + 56);
    do
      uint64_t v38 = __ldaxr(v37);
    while (__stlxr(1u, v37));
    if (v38 == 1)
    {
      do
      {
        while (*v37 == 1)
          ;
        do
          uint64_t v39 = __ldaxr(v37);
        while (__stlxr(1u, v37));
      }

      while (v39 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v36, (GPUTools::FB::Fbuf *)v52, *(unsigned int *)v52[0], 1);
    atomic_store(0, v37);
    do
    {
      uint32x4_t v40 = __ldaxr(v14);
      uint32x4_t v41 = v40 - 1;
    }

    while (__stlxr(v41, v14));
    if (gCheckGLErrors) {
      uint32x4_t v42 = v41 < 1;
    }
    else {
      uint32x4_t v42 = 1;
    }
    if (!v42) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    goto LABEL_50;
  }

  do
    v43 = __ldaxr(v14);
  while (__stlxr(v43 - 1, v14));
  [(id)DYGetGLGuestAppClient(v22) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, void *, uint64_t, float *))(*(void *)(v13 + 24) + 5016LL))(a1, a2, a3, a4);
LABEL_50:
  if (v52[0]) {
    free(v52[0]);
  }
}

    uint64_t v30 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v25), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v30) {
      uint64_t v30 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v52, v31);
    }
    uint64_t v33 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v33) {
      uint64_t v30 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v52, v33, v32);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v30), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v52);
    }
    NSUInteger v34 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v52);
    uint64_t v35 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v35 && gBreakOnError)
    {
      unsigned int v48 = 3LL;
      v49 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v24 & 2) == 0) {
        goto LABEL_37;
      }
      unsigned int v48 = 2LL;
      v49 = 301LL;
    }

    breakpoint_break((uint64_t)v52, (volatile int *)v49, v48, v35, v13);
LABEL_37:
    uint32x4_t v36 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v34) defaultFbufStream];
    uint32x4_t v37 = (unsigned int *)((char *)v36 + 56);
    do
      uint64_t v38 = __ldaxr(v37);
    while (__stlxr(1u, v37));
    if (v38 == 1)
    {
      do
      {
        while (*v37 == 1)
          ;
        do
          uint64_t v39 = __ldaxr(v37);
        while (__stlxr(1u, v37));
      }

      while (v39 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v36, (GPUTools::FB::Fbuf *)v52, *(unsigned int *)v52[0], 1);
    atomic_store(0, v37);
    do
    {
      uint32x4_t v40 = __ldaxr(v14);
      uint32x4_t v41 = v40 - 1;
    }

    while (__stlxr(v41, v14));
    if (gCheckGLErrors) {
      uint32x4_t v42 = v41 < 1;
    }
    else {
      uint32x4_t v42 = 1;
    }
    if (!v42) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    goto LABEL_50;
  }

  do
    v43 = __ldaxr(v14);
  while (__stlxr(v43 - 1, v14));
  [(id)DYGetGLGuestAppClient(v22) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, void *, uint64_t, int *))(*(void *)(v13 + 24) + 5024LL))(a1, a2, a3, a4);
LABEL_50:
  if (v52[0]) {
    free(v52[0]);
  }
}

    unsigned int v32 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v32) {
      unsigned int v32 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v54, v33);
    }
    uint64_t v35 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v15 + 3404);
    if ((_DWORD)v35) {
      unsigned int v32 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v54, v35, v34);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v15, (uint64_t)v54);
    }
    uint32x4_t v36 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v15 + 3480),  (GPUTools::FB::Fbuf *)(v15 + 3520),  (GPUTools::FB *)v54);
    uint32x4_t v37 = *(unsigned int *)(v15 + 3404);
    if ((_DWORD)v37 && gBreakOnError)
    {
      unsigned int v50 = 3LL;
      uint64_t v51 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v26 & 2) == 0) {
        goto LABEL_37;
      }
      unsigned int v50 = 2LL;
      uint64_t v51 = 280LL;
    }

    breakpoint_break((uint64_t)v54, (volatile int *)v51, v50, v37, v15);
LABEL_37:
    uint64_t v38 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v36) defaultFbufStream];
    uint64_t v39 = (unsigned int *)((char *)v38 + 56);
    do
      uint32x4_t v40 = __ldaxr(v39);
    while (__stlxr(1u, v39));
    if (v40 == 1)
    {
      do
      {
        while (*v39 == 1)
          ;
        do
          uint32x4_t v41 = __ldaxr(v39);
        while (__stlxr(1u, v39));
      }

      while (v41 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v38, (GPUTools::FB::Fbuf *)v54, *(unsigned int *)v54[0], 1);
    atomic_store(0, v39);
    do
    {
      uint32x4_t v42 = __ldaxr(v16);
      v43 = v42 - 1;
    }

    while (__stlxr(v43, v16));
    if (gCheckGLErrors) {
      uint64_t v44 = v43 < 1;
    }
    else {
      uint64_t v44 = 1;
    }
    if (!v44) {
      handle_opengl_thread_conflict((const void **)v15);
    }
    goto LABEL_50;
  }

  do
    unsigned int v45 = __ldaxr(v16);
  while (__stlxr(v45 - 1, v16));
  [(id)DYGetGLGuestAppClient(v24) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, void *, uint64_t, int *, char *))(*(void *)(v15 + 24) + 5032LL))( a1,  a2,  a3,  a4,  a5);
LABEL_50:
  if (v54[0]) {
    free(v54[0]);
  }
}

    int v31 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v26), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v31) {
      int v31 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v53, v32);
    }
    NSUInteger v34 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v34) {
      int v31 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v53, v34, v33);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v31), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v53);
    }
    uint64_t v35 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v53);
    uint32x4_t v36 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v36 && gBreakOnError)
    {
      v49 = 3LL;
      unsigned int v50 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v25 & 2) == 0) {
        goto LABEL_37;
      }
      v49 = 2LL;
      unsigned int v50 = 11LL;
    }

    breakpoint_break((uint64_t)v53, (volatile int *)v50, v49, v36, v13);
LABEL_37:
    uint32x4_t v37 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v35) defaultFbufStream];
    uint64_t v38 = (unsigned int *)((char *)v37 + 56);
    do
      uint64_t v39 = __ldaxr(v38);
    while (__stlxr(1u, v38));
    if (v39 == 1)
    {
      do
      {
        while (*v38 == 1)
          ;
        do
          uint32x4_t v40 = __ldaxr(v38);
        while (__stlxr(1u, v38));
      }

      while (v40 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v37, (GPUTools::FB::Fbuf *)v53, *(unsigned int *)v53[0], 1);
    atomic_store(0, v38);
    do
    {
      uint32x4_t v41 = __ldaxr(v14);
      uint32x4_t v42 = v41 - 1;
    }

    while (__stlxr(v42, v14));
    if (gCheckGLErrors) {
      v43 = v42 < 1;
    }
    else {
      v43 = 1;
    }
    if (!v43) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    goto LABEL_50;
  }

  do
    uint64_t v44 = __ldaxr(v14);
  while (__stlxr(v44 - 1, v14));
  [(id)DYGetGLGuestAppClient(v23) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, void *, uint64_t, const char *))(*(void *)(v13 + 24) + 5040LL))( a1,  a2,  a3,  a4);
LABEL_50:
  if (v53[0]) {
    free(v53[0]);
  }
}

    uint32x4_t v37 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v37) {
      uint32x4_t v37 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v61, v38);
    }
    uint32x4_t v40 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v60 + 3404);
    if ((_DWORD)v40) {
      uint32x4_t v37 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v61, v40, v39);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v37), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v60, (uint64_t)v61);
    }
    uint32x4_t v41 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v60 + 3480),  (GPUTools::FB::Fbuf *)(v60 + 3520),  (GPUTools::FB *)v61);
    uint32x4_t v42 = *(unsigned int *)(v60 + 3404);
    if ((_DWORD)v42 && gBreakOnError)
    {
      v55 = 3LL;
      uint64_t v56 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v59 & 2) == 0) {
        goto LABEL_37;
      }
      v55 = 2LL;
      uint64_t v56 = 211LL;
    }

    breakpoint_break((uint64_t)v61, (volatile int *)v56, v55, v42, v60);
LABEL_37:
    v43 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v41) defaultFbufStream];
    uint64_t v44 = (unsigned int *)((char *)v43 + 56);
    do
      unsigned int v45 = __ldaxr(v44);
    while (__stlxr(1u, v44));
    if (v45 == 1)
    {
      do
      {
        while (*v44 == 1)
          ;
        do
          unsigned int v46 = __ldaxr(v44);
        while (__stlxr(1u, v44));
      }

      while (v46 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v43, (GPUTools::FB::Fbuf *)v61, *(unsigned int *)v61[0], 1);
    atomic_store(0, v44);
    do
    {
      uint64_t v47 = __ldaxr(v22);
      unsigned int v48 = v47 - 1;
    }

    while (__stlxr(v48, v22));
    if (gCheckGLErrors) {
      v49 = v48 < 1;
    }
    else {
      v49 = 1;
    }
    if (!v49) {
      handle_opengl_thread_conflict((const void **)v60);
    }
    goto LABEL_50;
  }

  do
    unsigned int v50 = __ldaxr(v22);
  while (__stlxr(v50 - 1, v22));
  [(id)DYGetGLGuestAppClient(v30) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, void *, uint64_t, uint64_t, int *, int *, unsigned int *, char *))(*(void *)(v21 + 24) + 5048LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);
LABEL_50:
  if (v61[0]) {
    free(v61[0]);
  }
}

    int v31 = v56;
    v55 = *((_OWORD *)v56 + 1);
    uint32x4_t v57 = v56;
    if (v58 >= 0x24)
    {
      *((_DWORD *)v56 + 8) = 0;
      *int v31 = 0u;
      v31[1] = 0u;
    }

    GPUTools::FB::Encode((uint64_t)&v56, 206LL, 256LL, v11 + 4709, v23, v24, v25, v26, *(void *)v11);
    *((_OWORD *)v56 + 1) = v55;
    uint64_t v33 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v33) {
      uint64_t v33 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v56, v34);
    }
    uint32x4_t v36 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v36) {
      uint64_t v33 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v56, v36, v35);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)&v56);
    }
    uint32x4_t v37 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v56);
    uint64_t v38 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v38 && gBreakOnError)
    {
      uint64_t v51 = 3LL;
      uint64_t v52 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v22 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v51 = 2LL;
      uint64_t v52 = 206LL;
    }

    breakpoint_break((uint64_t)&v56, (volatile int *)v52, v51, v38, v11);
LABEL_39:
    uint64_t v39 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v37) defaultFbufStream];
    uint32x4_t v40 = (unsigned int *)((char *)v39 + 56);
    do
      uint32x4_t v41 = __ldaxr(v40);
    while (__stlxr(1u, v40));
    if (v41 == 1)
    {
      do
      {
        while (*v40 == 1)
          ;
        do
          uint32x4_t v42 = __ldaxr(v40);
        while (__stlxr(1u, v40));
      }

      while (v42 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v39, (GPUTools::FB::Fbuf *)&v56, *(unsigned int *)v56, 1);
    atomic_store(0, v40);
    do
    {
      v43 = __ldaxr(v12);
      uint64_t v44 = v43 - 1;
    }

    while (__stlxr(v44, v12));
    if (gCheckGLErrors) {
      unsigned int v45 = v44 < 1;
    }
    else {
      unsigned int v45 = 1;
    }
    if (!v45) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    goto LABEL_52;
  }

  do
    unsigned int v46 = __ldaxr(v12);
  while (__stlxr(v46 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, unsigned int *))(*(void *)(v11 + 24) + 5072LL))(a1, a2, a3);
LABEL_52:
  if (v56) {
    free(v56);
  }
}

    uint32x4_t v28 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v23), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v28) {
      uint32x4_t v28 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v50, v29);
    }
    int v31 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v31) {
      uint32x4_t v28 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v50, v31, v30);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)v50);
    }
    unsigned int v32 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)v50);
    uint64_t v33 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v33 && gBreakOnError)
    {
      unsigned int v46 = 3LL;
      uint64_t v47 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v22 & 2) == 0) {
        goto LABEL_37;
      }
      unsigned int v46 = 2LL;
      uint64_t v47 = 125LL;
    }

    breakpoint_break((uint64_t)v50, (volatile int *)v47, v46, v33, v11);
LABEL_37:
    NSUInteger v34 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v32) defaultFbufStream];
    uint64_t v35 = (unsigned int *)((char *)v34 + 56);
    do
      uint32x4_t v36 = __ldaxr(v35);
    while (__stlxr(1u, v35));
    if (v36 == 1)
    {
      do
      {
        while (*v35 == 1)
          ;
        do
          uint32x4_t v37 = __ldaxr(v35);
        while (__stlxr(1u, v35));
      }

      while (v37 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v34, (GPUTools::FB::Fbuf *)v50, *(unsigned int *)v50[0], 1);
    atomic_store(0, v35);
    do
    {
      uint64_t v38 = __ldaxr(v12);
      uint64_t v39 = v38 - 1;
    }

    while (__stlxr(v39, v12));
    if (gCheckGLErrors) {
      uint32x4_t v40 = v39 < 1;
    }
    else {
      uint32x4_t v40 = 1;
    }
    if (!v40) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    goto LABEL_50;
  }

  do
    uint32x4_t v41 = __ldaxr(v12);
  while (__stlxr(v41 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, const unsigned int *))(*(void *)(v11 + 24) + 5080LL))( a1,  a2,  a3);
LABEL_50:
  if (v50[0]) {
    free(v50[0]);
  }
}

    uint32x4_t v28 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v23), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v28) {
      uint32x4_t v28 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v50, v29);
    }
    int v31 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v31) {
      uint32x4_t v28 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v50, v31, v30);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)v50);
    }
    unsigned int v32 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)v50);
    uint64_t v33 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v33 && gBreakOnError)
    {
      unsigned int v46 = 3LL;
      uint64_t v47 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v22 & 2) == 0) {
        goto LABEL_37;
      }
      unsigned int v46 = 2LL;
      uint64_t v47 = 12LL;
    }

    breakpoint_break((uint64_t)v50, (volatile int *)v47, v46, v33, v11);
LABEL_37:
    NSUInteger v34 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v32) defaultFbufStream];
    uint64_t v35 = (unsigned int *)((char *)v34 + 56);
    do
      uint32x4_t v36 = __ldaxr(v35);
    while (__stlxr(1u, v35));
    if (v36 == 1)
    {
      do
      {
        while (*v35 == 1)
          ;
        do
          uint32x4_t v37 = __ldaxr(v35);
        while (__stlxr(1u, v35));
      }

      while (v37 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v34, (GPUTools::FB::Fbuf *)v50, *(unsigned int *)v50[0], 1);
    atomic_store(0, v35);
    if (!gCheckGLErrors) {
      check_errors(v11);
    }
    if (!*(_DWORD *)(v11 + 3404)) {
      wrapper_cache_buffer_binding((_DWORD *)v11, a2, a3);
    }
    do
    {
      uint64_t v38 = __ldaxr(v12);
      uint64_t v39 = v38 - 1;
    }

    while (__stlxr(v39, v12));
    if (gCheckGLErrors) {
      uint32x4_t v40 = v39 < 1;
    }
    else {
      uint32x4_t v40 = 1;
    }
    if (!v40) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    goto LABEL_53;
  }

  do
    uint32x4_t v41 = __ldaxr(v12);
  while (__stlxr(v41 - 1, v12));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t))(*(void *)(v11 + 24) + 5136LL))(a1, a2, a3);
LABEL_53:
  if (v50[0]) {
    free(v50[0]);
  }
}

    uint32x4_t v28 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v23), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v28) {
      uint32x4_t v28 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v50, v29);
    }
    int v31 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v31) {
      uint32x4_t v28 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v50, v31, v30);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)v50);
    }
    unsigned int v32 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)v50);
    uint64_t v33 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v33 && gBreakOnError)
    {
      unsigned int v46 = 3LL;
      uint64_t v47 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v22 & 2) == 0) {
        goto LABEL_37;
      }
      unsigned int v46 = 2LL;
      uint64_t v47 = 119LL;
    }

    breakpoint_break((uint64_t)v50, (volatile int *)v47, v46, v33, v11);
LABEL_37:
    NSUInteger v34 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v32) defaultFbufStream];
    uint64_t v35 = (unsigned int *)((char *)v34 + 56);
    do
      uint32x4_t v36 = __ldaxr(v35);
    while (__stlxr(1u, v35));
    if (v36 == 1)
    {
      do
      {
        while (*v35 == 1)
          ;
        do
          uint32x4_t v37 = __ldaxr(v35);
        while (__stlxr(1u, v35));
      }

      while (v37 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v34, (GPUTools::FB::Fbuf *)v50, *(unsigned int *)v50[0], 1);
    atomic_store(0, v35);
    wrapper_cache_buffer_binding_delete((ContextInfo *)v11, a2, a3);
    do
    {
      uint64_t v38 = __ldaxr(v12);
      uint64_t v39 = v38 - 1;
    }

    while (__stlxr(v39, v12));
    if (gCheckGLErrors) {
      uint32x4_t v40 = v39 < 1;
    }
    else {
      uint32x4_t v40 = 1;
    }
    if (!v40) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    goto LABEL_50;
  }

  do
    uint32x4_t v41 = __ldaxr(v12);
  while (__stlxr(v41 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, volatile int *, const unsigned int *))(*(void *)(v11 + 24) + 5144LL))( a1,  a2,  a3);
LABEL_50:
  if (v50[0]) {
    free(v50[0]);
  }
}

    unsigned int v32 = v57;
    uint64_t v56 = *((_OWORD *)v57 + 1);
    uint32x4_t v58 = v57;
    if (v59 >= 0x24)
    {
      *((_DWORD *)v57 + 8) = 0;
      NSUInteger *v32 = 0u;
      v32[1] = 0u;
    }

    GPUTools::FB::Encode((uint64_t)&v57, 201LL, 0LL, v11 + 4709, v24, v25, v26, v27, *(void *)v11);
    *((_OWORD *)v57 + 1) = v56;
    NSUInteger v34 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v34) {
      NSUInteger v34 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v57, v35);
    }
    uint32x4_t v37 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v37) {
      NSUInteger v34 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v57, v37, v36);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v34), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)&v57);
    }
    uint64_t v38 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v57);
    uint64_t v39 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v39 && gBreakOnError)
    {
      uint64_t v52 = 3LL;
      uint32x4_t v53 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v23 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v52 = 2LL;
      uint32x4_t v53 = 201LL;
    }

    breakpoint_break((uint64_t)&v57, (volatile int *)v53, v52, v39, v11);
LABEL_39:
    uint32x4_t v40 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v38) defaultFbufStream];
    uint32x4_t v41 = (unsigned int *)((char *)v40 + 56);
    do
      uint32x4_t v42 = __ldaxr(v41);
    while (__stlxr(1u, v41));
    if (v42 == 1)
    {
      do
      {
        while (*v41 == 1)
          ;
        do
          v43 = __ldaxr(v41);
        while (__stlxr(1u, v41));
      }

      while (v43 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v40, (GPUTools::FB::Fbuf *)&v57, *(unsigned int *)v57, 1);
    atomic_store(0, v41);
    do
    {
      uint64_t v44 = __ldaxr(v12);
      unsigned int v45 = v44 - 1;
    }

    while (__stlxr(v45, v12));
    if (gCheckGLErrors) {
      unsigned int v46 = v45 < 1;
    }
    else {
      unsigned int v46 = 1;
    }
    if (!v46) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    goto LABEL_52;
  }

  do
    uint64_t v47 = __ldaxr(v12);
  while (__stlxr(v47 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, unsigned int *))(*(void *)(v11 + 24) + 5152LL))(a1, a2, a3);
LABEL_52:
  if (v57) {
    free(v57);
  }
}

    uint64_t v33 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v33) {
      uint64_t v33 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v55, v34);
    }
    uint32x4_t v36 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v15 + 3404);
    if ((_DWORD)v36) {
      uint64_t v33 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v55, v36, v35);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v15, (uint64_t)v55);
    }
    uint32x4_t v37 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v15 + 3480),  (GPUTools::FB::Fbuf *)(v15 + 3520),  (GPUTools::FB *)v55);
    uint64_t v38 = *(unsigned int *)(v15 + 3404);
    if ((_DWORD)v38 && gBreakOnError)
    {
      uint64_t v51 = 3LL;
      uint64_t v52 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v27 & 2) == 0) {
        goto LABEL_37;
      }
      uint64_t v51 = 2LL;
      uint64_t v52 = 29LL;
    }

    breakpoint_break((uint64_t)v55, (volatile int *)v52, v51, v38, v15);
LABEL_37:
    uint64_t v39 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v37) defaultFbufStream];
    uint32x4_t v40 = (unsigned int *)((char *)v39 + 56);
    do
      uint32x4_t v41 = __ldaxr(v40);
    while (__stlxr(1u, v40));
    if (v41 == 1)
    {
      do
      {
        while (*v40 == 1)
          ;
        do
          uint32x4_t v42 = __ldaxr(v40);
        while (__stlxr(1u, v40));
      }

      while (v42 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v39, (GPUTools::FB::Fbuf *)v55, *(unsigned int *)v55[0], 1);
    atomic_store(0, v40);
    if (!gCheckGLErrors) {
      check_errors(v15);
    }
    if (!*(_DWORD *)(v15 + 3404)) {
      wrapper_cache_buffer_target(v15, a2);
    }
    do
    {
      v43 = __ldaxr(v16);
      uint64_t v44 = v43 - 1;
    }

    while (__stlxr(v44, v16));
    if (gCheckGLErrors) {
      unsigned int v45 = v44 < 1;
    }
    else {
      unsigned int v45 = 1;
    }
    if (!v45) {
      handle_opengl_thread_conflict((const void **)v15);
    }
    goto LABEL_53;
  }

  do
    unsigned int v46 = __ldaxr(v16);
  while (__stlxr(v46 - 1, v16));
  [(id)DYGetGLGuestAppClient(v25) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, volatile int *, uint64_t, const void *, uint64_t))(*(void *)(v15 + 24)
                                                                                            + 5168LL))( a1,  a2,  a3,  a4,  a5);
LABEL_53:
  if (v55[0]) {
    free(v55[0]);
  }
}

    uint64_t v33 = v58;
    uint32x4_t v57 = *((_OWORD *)v58 + 1);
    uint32x4_t v59 = v58;
    if (v60 >= 0x24)
    {
      *((_DWORD *)v58 + 8) = 0;
      *uint64_t v33 = 0u;
      v33[1] = 0u;
    }

    GPUTools::FB::Encode((uint64_t)&v58, 219LL, 256LL, (uint64_t)"Cee@1t", v25, v26, v27, v28, *(void *)v13);
    *((_OWORD *)v58 + 1) = v57;
    uint64_t v35 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v34), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v35) {
      uint64_t v35 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v58, v36);
    }
    uint64_t v38 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v38) {
      uint64_t v35 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v58, v38, v37);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v35), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)&v58);
    }
    uint64_t v39 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)&v58);
    uint32x4_t v40 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v40 && gBreakOnError)
    {
      uint32x4_t v53 = 3LL;
      uint32x4_t v54 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v24 & 2) == 0) {
        goto LABEL_39;
      }
      uint32x4_t v53 = 2LL;
      uint32x4_t v54 = 219LL;
    }

    breakpoint_break((uint64_t)&v58, (volatile int *)v54, v53, v40, v13);
LABEL_39:
    uint32x4_t v41 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v39) defaultFbufStream];
    uint32x4_t v42 = (unsigned int *)((char *)v41 + 56);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(1u, v42));
    if (v43 == 1)
    {
      do
      {
        while (*v42 == 1)
          ;
        do
          uint64_t v44 = __ldaxr(v42);
        while (__stlxr(1u, v42));
      }

      while (v44 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v41, (GPUTools::FB::Fbuf *)&v58, *(unsigned int *)v58, 1);
    atomic_store(0, v42);
    do
    {
      unsigned int v45 = __ldaxr(v14);
      unsigned int v46 = v45 - 1;
    }

    while (__stlxr(v46, v14));
    if (gCheckGLErrors) {
      uint64_t v47 = v46 < 1;
    }
    else {
      uint64_t v47 = 1;
    }
    if (!v47) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    goto LABEL_52;
  }

  do
    unsigned int v48 = __ldaxr(v14);
  while (__stlxr(v48 - 1, v14));
  [(id)DYGetGLGuestAppClient(v22) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, void **))(*(void *)(v13 + 24) + 5216LL))( a1,  a2,  a3,  a4);
LABEL_52:
  if (v58) {
    free(v58);
  }
}

    uint32x4_t v28 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v23), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v28) {
      uint32x4_t v28 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v50, v29);
    }
    int v31 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v31) {
      uint32x4_t v28 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v50, v31, v30);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)v50);
    }
    unsigned int v32 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)v50);
    uint64_t v33 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v33 && gBreakOnError)
    {
      unsigned int v46 = 3LL;
      uint64_t v47 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v22 & 2) == 0) {
        goto LABEL_37;
      }
      unsigned int v46 = 2LL;
      uint64_t v47 = 141LL;
    }

    breakpoint_break((uint64_t)v50, (volatile int *)v47, v46, v33, v11);
LABEL_37:
    NSUInteger v34 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v32) defaultFbufStream];
    uint64_t v35 = (unsigned int *)((char *)v34 + 56);
    do
      uint32x4_t v36 = __ldaxr(v35);
    while (__stlxr(1u, v35));
    if (v36 == 1)
    {
      do
      {
        while (*v35 == 1)
          ;
        do
          uint32x4_t v37 = __ldaxr(v35);
        while (__stlxr(1u, v35));
      }

      while (v37 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v34, (GPUTools::FB::Fbuf *)v50, *(unsigned int *)v50[0], 1);
    atomic_store(0, v35);
    do
    {
      uint64_t v38 = __ldaxr(v12);
      uint64_t v39 = v38 - 1;
    }

    while (__stlxr(v39, v12));
    if (gCheckGLErrors) {
      uint32x4_t v40 = v39 < 1;
    }
    else {
      uint32x4_t v40 = 1;
    }
    if (!v40) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    goto LABEL_50;
  }

  do
    uint32x4_t v41 = __ldaxr(v12);
  while (__stlxr(v41 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, const unsigned int *))(*(void *)(v11 + 24) + 5232LL))( a1,  a2,  a3);
LABEL_50:
  if (v50[0]) {
    free(v50[0]);
  }
}

    uint64_t v30 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v25), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v30) {
      uint64_t v30 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v52, v31);
    }
    uint64_t v33 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v33) {
      uint64_t v30 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v52, v33, v32);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v30), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v52);
    }
    NSUInteger v34 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v52);
    uint64_t v35 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v35 && gBreakOnError)
    {
      unsigned int v48 = 3LL;
      v49 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v24 & 2) == 0) {
        goto LABEL_37;
      }
      unsigned int v48 = 2LL;
      v49 = 281LL;
    }

    breakpoint_break((uint64_t)v52, (volatile int *)v49, v48, v35, v13);
LABEL_37:
    uint32x4_t v36 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v34) defaultFbufStream];
    uint32x4_t v37 = (unsigned int *)((char *)v36 + 56);
    do
      uint64_t v38 = __ldaxr(v37);
    while (__stlxr(1u, v37));
    if (v38 == 1)
    {
      do
      {
        while (*v37 == 1)
          ;
        do
          uint64_t v39 = __ldaxr(v37);
        while (__stlxr(1u, v37));
      }

      while (v39 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v36, (GPUTools::FB::Fbuf *)v52, *(unsigned int *)v52[0], 1);
    atomic_store(0, v37);
    do
    {
      uint32x4_t v40 = __ldaxr(v14);
      uint32x4_t v41 = v40 - 1;
    }

    while (__stlxr(v41, v14));
    if (gCheckGLErrors) {
      uint32x4_t v42 = v41 < 1;
    }
    else {
      uint32x4_t v42 = 1;
    }
    if (!v42) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    goto LABEL_50;
  }

  do
    v43 = __ldaxr(v14);
  while (__stlxr(v43 - 1, v14));
  [(id)DYGetGLGuestAppClient(v22) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, int *))(*(void *)(v13 + 24) + 5256LL))(a1, a2, a3, a4);
LABEL_50:
  if (v52[0]) {
    free(v52[0]);
  }
}

    uint64_t v30 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v25), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v30) {
      uint64_t v30 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v52, v31);
    }
    uint64_t v33 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v33) {
      uint64_t v30 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v52, v33, v32);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v30), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v52);
    }
    NSUInteger v34 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v52);
    uint64_t v35 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v35 && gBreakOnError)
    {
      unsigned int v48 = 3LL;
      v49 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v24 & 2) == 0) {
        goto LABEL_37;
      }
      unsigned int v48 = 2LL;
      v49 = 272LL;
    }

    breakpoint_break((uint64_t)v52, (volatile int *)v49, v48, v35, v13);
LABEL_37:
    uint32x4_t v36 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v34) defaultFbufStream];
    uint32x4_t v37 = (unsigned int *)((char *)v36 + 56);
    do
      uint64_t v38 = __ldaxr(v37);
    while (__stlxr(1u, v37));
    if (v38 == 1)
    {
      do
      {
        while (*v37 == 1)
          ;
        do
          uint64_t v39 = __ldaxr(v37);
        while (__stlxr(1u, v37));
      }

      while (v39 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v36, (GPUTools::FB::Fbuf *)v52, *(unsigned int *)v52[0], 1);
    atomic_store(0, v37);
    do
    {
      uint32x4_t v40 = __ldaxr(v14);
      uint32x4_t v41 = v40 - 1;
    }

    while (__stlxr(v41, v14));
    if (gCheckGLErrors) {
      uint32x4_t v42 = v41 < 1;
    }
    else {
      uint32x4_t v42 = 1;
    }
    if (!v42) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    goto LABEL_50;
  }

  do
    v43 = __ldaxr(v14);
  while (__stlxr(v43 - 1, v14));
  [(id)DYGetGLGuestAppClient(v22) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, int *))(*(void *)(v13 + 24) + 5264LL))(a1, a2, a3, a4);
LABEL_50:
  if (v52[0]) {
    free(v52[0]);
  }
}

    unsigned int v32 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v32) {
      unsigned int v32 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v54, v33);
    }
    uint64_t v35 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v15 + 3404);
    if ((_DWORD)v35) {
      unsigned int v32 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v54, v35, v34);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v15, (uint64_t)v54);
    }
    uint32x4_t v36 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v15 + 3480),  (GPUTools::FB::Fbuf *)(v15 + 3520),  (GPUTools::FB *)v54);
    uint32x4_t v37 = *(unsigned int *)(v15 + 3404);
    if ((_DWORD)v37 && gBreakOnError)
    {
      unsigned int v50 = 3LL;
      uint64_t v51 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v26 & 2) == 0) {
        goto LABEL_37;
      }
      unsigned int v50 = 2LL;
      uint64_t v51 = 279LL;
    }

    breakpoint_break((uint64_t)v54, (volatile int *)v51, v50, v37, v15);
LABEL_37:
    uint64_t v38 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v36) defaultFbufStream];
    uint64_t v39 = (unsigned int *)((char *)v38 + 56);
    do
      uint32x4_t v40 = __ldaxr(v39);
    while (__stlxr(1u, v39));
    if (v40 == 1)
    {
      do
      {
        while (*v39 == 1)
          ;
        do
          uint32x4_t v41 = __ldaxr(v39);
        while (__stlxr(1u, v39));
      }

      while (v41 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v38, (GPUTools::FB::Fbuf *)v54, *(unsigned int *)v54[0], 1);
    atomic_store(0, v39);
    do
    {
      uint32x4_t v42 = __ldaxr(v16);
      v43 = v42 - 1;
    }

    while (__stlxr(v43, v16));
    if (gCheckGLErrors) {
      uint64_t v44 = v43 < 1;
    }
    else {
      uint64_t v44 = 1;
    }
    if (!v44) {
      handle_opengl_thread_conflict((const void **)v15);
    }
    goto LABEL_50;
  }

  do
    unsigned int v45 = __ldaxr(v16);
  while (__stlxr(v45 - 1, v16));
  [(id)DYGetGLGuestAppClient(v24) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, int *, char *))(*(void *)(v15 + 24) + 5272LL))( a1,  a2,  a3,  a4,  a5);
LABEL_50:
  if (v54[0]) {
    free(v54[0]);
  }
}

    unsigned int v32 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v32) {
      unsigned int v32 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v54, v33);
    }
    uint64_t v35 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v15 + 3404);
    if ((_DWORD)v35) {
      unsigned int v32 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v54, v35, v34);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v15, (uint64_t)v54);
    }
    uint32x4_t v36 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v15 + 3480),  (GPUTools::FB::Fbuf *)(v15 + 3520),  (GPUTools::FB *)v54);
    uint32x4_t v37 = *(unsigned int *)(v15 + 3404);
    if ((_DWORD)v37 && gBreakOnError)
    {
      unsigned int v50 = 3LL;
      uint64_t v51 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v26 & 2) == 0) {
        goto LABEL_37;
      }
      unsigned int v50 = 2LL;
      uint64_t v51 = 268LL;
    }

    breakpoint_break((uint64_t)v54, (volatile int *)v51, v50, v37, v15);
LABEL_37:
    uint64_t v38 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v36) defaultFbufStream];
    uint64_t v39 = (unsigned int *)((char *)v38 + 56);
    do
      uint32x4_t v40 = __ldaxr(v39);
    while (__stlxr(1u, v39));
    if (v40 == 1)
    {
      do
      {
        while (*v39 == 1)
          ;
        do
          uint32x4_t v41 = __ldaxr(v39);
        while (__stlxr(1u, v39));
      }

      while (v41 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v38, (GPUTools::FB::Fbuf *)v54, *(unsigned int *)v54[0], 1);
    atomic_store(0, v39);
    do
    {
      uint32x4_t v42 = __ldaxr(v16);
      v43 = v42 - 1;
    }

    while (__stlxr(v43, v16));
    if (gCheckGLErrors) {
      uint64_t v44 = v43 < 1;
    }
    else {
      uint64_t v44 = 1;
    }
    if (!v44) {
      handle_opengl_thread_conflict((const void **)v15);
    }
    goto LABEL_50;
  }

  do
    unsigned int v45 = __ldaxr(v16);
  while (__stlxr(v45 - 1, v16));
  [(id)DYGetGLGuestAppClient(v24) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, int *, char *))(*(void *)(v15 + 24) + 5280LL))( a1,  a2,  a3,  a4,  a5);
LABEL_50:
  if (v54[0]) {
    free(v54[0]);
  }
}

    uint32x4_t v28 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v23), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v28) {
      uint32x4_t v28 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v50, v29);
    }
    int v31 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v31) {
      uint32x4_t v28 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v50, v31, v30);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)v50);
    }
    unsigned int v32 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)v50);
    uint64_t v33 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v33 && gBreakOnError)
    {
      unsigned int v46 = 3LL;
      uint64_t v47 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v22 & 2) == 0) {
        goto LABEL_37;
      }
      unsigned int v46 = 2LL;
      uint64_t v47 = 126LL;
    }

    breakpoint_break((uint64_t)v50, (volatile int *)v47, v46, v33, v11);
LABEL_37:
    NSUInteger v34 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v32) defaultFbufStream];
    uint64_t v35 = (unsigned int *)((char *)v34 + 56);
    do
      uint32x4_t v36 = __ldaxr(v35);
    while (__stlxr(1u, v35));
    if (v36 == 1)
    {
      do
      {
        while (*v35 == 1)
          ;
        do
          uint32x4_t v37 = __ldaxr(v35);
        while (__stlxr(1u, v35));
      }

      while (v37 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v34, (GPUTools::FB::Fbuf *)v50, *(unsigned int *)v50[0], 1);
    atomic_store(0, v35);
    do
    {
      uint64_t v38 = __ldaxr(v12);
      uint64_t v39 = v38 - 1;
    }

    while (__stlxr(v39, v12));
    if (gCheckGLErrors) {
      uint32x4_t v40 = v39 < 1;
    }
    else {
      uint32x4_t v40 = 1;
    }
    if (!v40) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    goto LABEL_50;
  }

  do
    uint32x4_t v41 = __ldaxr(v12);
  while (__stlxr(v41 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, const unsigned int *))(*(void *)(v11 + 24) + 5336LL))( a1,  a2,  a3);
LABEL_50:
  if (v50[0]) {
    free(v50[0]);
  }
}

    unsigned int v32 = v57;
    uint64_t v56 = *((_OWORD *)v57 + 1);
    uint32x4_t v58 = v57;
    if (v59 >= 0x24)
    {
      *((_DWORD *)v57 + 8) = 0;
      NSUInteger *v32 = 0u;
      v32[1] = 0u;
    }

    GPUTools::FB::Encode((uint64_t)&v57, 207LL, 0LL, v11 + 4709, v24, v25, v26, v27, *(void *)v11);
    *((_OWORD *)v57 + 1) = v56;
    NSUInteger v34 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v34) {
      NSUInteger v34 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v57, v35);
    }
    uint32x4_t v37 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v37) {
      NSUInteger v34 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v57, v37, v36);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v34), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)&v57);
    }
    uint64_t v38 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v57);
    uint64_t v39 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v39 && gBreakOnError)
    {
      uint64_t v52 = 3LL;
      uint32x4_t v53 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v23 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v52 = 2LL;
      uint32x4_t v53 = 207LL;
    }

    breakpoint_break((uint64_t)&v57, (volatile int *)v53, v52, v39, v11);
LABEL_39:
    uint32x4_t v40 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v38) defaultFbufStream];
    uint32x4_t v41 = (unsigned int *)((char *)v40 + 56);
    do
      uint32x4_t v42 = __ldaxr(v41);
    while (__stlxr(1u, v41));
    if (v42 == 1)
    {
      do
      {
        while (*v41 == 1)
          ;
        do
          v43 = __ldaxr(v41);
        while (__stlxr(1u, v41));
      }

      while (v43 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v40, (GPUTools::FB::Fbuf *)&v57, *(unsigned int *)v57, 1);
    atomic_store(0, v41);
    do
    {
      uint64_t v44 = __ldaxr(v12);
      unsigned int v45 = v44 - 1;
    }

    while (__stlxr(v45, v12));
    if (gCheckGLErrors) {
      unsigned int v46 = v45 < 1;
    }
    else {
      unsigned int v46 = 1;
    }
    if (!v46) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    goto LABEL_52;
  }

  do
    uint64_t v47 = __ldaxr(v12);
  while (__stlxr(v47 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, unsigned int *))(*(void *)(v11 + 24) + 5344LL))(a1, a2, a3);
LABEL_52:
  if (v57) {
    free(v57);
  }
}

    uint32x4_t v28 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v23), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v28) {
      uint32x4_t v28 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v50, v29);
    }
    int v31 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v31) {
      uint32x4_t v28 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v50, v31, v30);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)v50);
    }
    unsigned int v32 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)v50);
    uint64_t v33 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v33 && gBreakOnError)
    {
      unsigned int v46 = 3LL;
      uint64_t v47 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v22 & 2) == 0) {
        goto LABEL_37;
      }
      unsigned int v46 = 2LL;
      uint64_t v47 = 121LL;
    }

    breakpoint_break((uint64_t)v50, (volatile int *)v47, v46, v33, v11);
LABEL_37:
    NSUInteger v34 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v32) defaultFbufStream];
    uint64_t v35 = (unsigned int *)((char *)v34 + 56);
    do
      uint32x4_t v36 = __ldaxr(v35);
    while (__stlxr(1u, v35));
    if (v36 == 1)
    {
      do
      {
        while (*v35 == 1)
          ;
        do
          uint32x4_t v37 = __ldaxr(v35);
        while (__stlxr(1u, v35));
      }

      while (v37 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v34, (GPUTools::FB::Fbuf *)v50, *(unsigned int *)v50[0], 1);
    atomic_store(0, v35);
    do
    {
      uint64_t v38 = __ldaxr(v12);
      uint64_t v39 = v38 - 1;
    }

    while (__stlxr(v39, v12));
    if (gCheckGLErrors) {
      uint32x4_t v40 = v39 < 1;
    }
    else {
      uint32x4_t v40 = 1;
    }
    if (!v40) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    goto LABEL_50;
  }

  do
    uint32x4_t v41 = __ldaxr(v12);
  while (__stlxr(v41 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, const unsigned int *))(*(void *)(v11 + 24) + 5384LL))( a1,  a2,  a3);
LABEL_50:
  if (v50[0]) {
    free(v50[0]);
  }
}

    unsigned int v32 = v57;
    uint64_t v56 = *((_OWORD *)v57 + 1);
    uint32x4_t v58 = v57;
    if (v59 >= 0x24)
    {
      *((_DWORD *)v57 + 8) = 0;
      NSUInteger *v32 = 0u;
      v32[1] = 0u;
    }

    GPUTools::FB::Encode((uint64_t)&v57, 203LL, 0LL, v11 + 4709, v24, v25, v26, v27, *(void *)v11);
    *((_OWORD *)v57 + 1) = v56;
    NSUInteger v34 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v34) {
      NSUInteger v34 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v57, v35);
    }
    uint32x4_t v37 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v37) {
      NSUInteger v34 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v57, v37, v36);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v34), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)&v57);
    }
    uint64_t v38 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v57);
    uint64_t v39 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v39 && gBreakOnError)
    {
      uint64_t v52 = 3LL;
      uint32x4_t v53 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v23 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v52 = 2LL;
      uint32x4_t v53 = 203LL;
    }

    breakpoint_break((uint64_t)&v57, (volatile int *)v53, v52, v39, v11);
LABEL_39:
    uint32x4_t v40 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v38) defaultFbufStream];
    uint32x4_t v41 = (unsigned int *)((char *)v40 + 56);
    do
      uint32x4_t v42 = __ldaxr(v41);
    while (__stlxr(1u, v41));
    if (v42 == 1)
    {
      do
      {
        while (*v41 == 1)
          ;
        do
          v43 = __ldaxr(v41);
        while (__stlxr(1u, v41));
      }

      while (v43 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v40, (GPUTools::FB::Fbuf *)&v57, *(unsigned int *)v57, 1);
    atomic_store(0, v41);
    do
    {
      uint64_t v44 = __ldaxr(v12);
      unsigned int v45 = v44 - 1;
    }

    while (__stlxr(v45, v12));
    if (gCheckGLErrors) {
      unsigned int v46 = v45 < 1;
    }
    else {
      unsigned int v46 = 1;
    }
    if (!v46) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    goto LABEL_52;
  }

  do
    uint64_t v47 = __ldaxr(v12);
  while (__stlxr(v47 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, unsigned int *))(*(void *)(v11 + 24) + 5392LL))(a1, a2, a3);
LABEL_52:
  if (v57) {
    free(v57);
  }
}

    NSUInteger v34 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v34) {
      NSUInteger v34 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v56, v35);
    }
    uint32x4_t v37 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v17 + 3404);
    if ((_DWORD)v37) {
      NSUInteger v34 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v56, v37, v36);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v34), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v17, (uint64_t)v56);
    }
    uint64_t v38 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v17 + 3480),  (GPUTools::FB::Fbuf *)(v17 + 3520),  (GPUTools::FB *)v56);
    uint64_t v39 = *(unsigned int *)(v17 + 3404);
    if ((_DWORD)v39 && gBreakOnError)
    {
      uint64_t v52 = 3LL;
      uint32x4_t v53 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v28 & 2) == 0) {
        goto LABEL_37;
      }
      uint64_t v52 = 2LL;
      uint32x4_t v53 = 15LL;
    }

    breakpoint_break((uint64_t)v56, (volatile int *)v53, v52, v39, v17);
LABEL_37:
    uint32x4_t v40 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v38) defaultFbufStream];
    uint32x4_t v41 = (unsigned int *)((char *)v40 + 56);
    do
      uint32x4_t v42 = __ldaxr(v41);
    while (__stlxr(1u, v41));
    if (v42 == 1)
    {
      do
      {
        while (*v41 == 1)
          ;
        do
          v43 = __ldaxr(v41);
        while (__stlxr(1u, v41));
      }

      while (v43 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v40, (GPUTools::FB::Fbuf *)v56, *(unsigned int *)v56[0], 1);
    atomic_store(0, v41);
    if (!gCheckGLErrors) {
      check_errors(v17);
    }
    if (!*(_DWORD *)(v17 + 3404)) {
      wrapper_cache_buffer_binding((_DWORD *)v17, a2, a4);
    }
    do
    {
      uint64_t v44 = __ldaxr(v18);
      unsigned int v45 = v44 - 1;
    }

    while (__stlxr(v45, v18));
    if (gCheckGLErrors) {
      unsigned int v46 = v45 < 1;
    }
    else {
      unsigned int v46 = 1;
    }
    if (!v46) {
      handle_opengl_thread_conflict((const void **)v17);
    }
    goto LABEL_53;
  }

  do
    uint64_t v47 = __ldaxr(v18);
  while (__stlxr(v47 - 1, v18));
  [(id)DYGetGLGuestAppClient(v26) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 + 24) + 5544LL))( a1,  a2,  a3,  a4,  a5,  a6);
LABEL_53:
  if (v56[0]) {
    free(v56[0]);
  }
}

    uint64_t v30 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v25), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v30) {
      uint64_t v30 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v52, v31);
    }
    uint64_t v33 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v33) {
      uint64_t v30 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v52, v33, v32);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v30), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v52);
    }
    NSUInteger v34 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v52);
    uint64_t v35 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v35 && gBreakOnError)
    {
      unsigned int v48 = 3LL;
      v49 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v24 & 2) == 0) {
        goto LABEL_37;
      }
      unsigned int v48 = 2LL;
      v49 = 13LL;
    }

    breakpoint_break((uint64_t)v52, (volatile int *)v49, v48, v35, v13);
LABEL_37:
    uint32x4_t v36 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v34) defaultFbufStream];
    uint32x4_t v37 = (unsigned int *)((char *)v36 + 56);
    do
      uint64_t v38 = __ldaxr(v37);
    while (__stlxr(1u, v37));
    if (v38 == 1)
    {
      do
      {
        while (*v37 == 1)
          ;
        do
          uint64_t v39 = __ldaxr(v37);
        while (__stlxr(1u, v37));
      }

      while (v39 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v36, (GPUTools::FB::Fbuf *)v52, *(unsigned int *)v52[0], 1);
    atomic_store(0, v37);
    if (!gCheckGLErrors) {
      check_errors(v13);
    }
    if (!*(_DWORD *)(v13 + 3404)) {
      wrapper_cache_buffer_binding((_DWORD *)v13, a2, a4);
    }
    do
    {
      uint32x4_t v40 = __ldaxr(v14);
      uint32x4_t v41 = v40 - 1;
    }

    while (__stlxr(v41, v14));
    if (gCheckGLErrors) {
      uint32x4_t v42 = v41 < 1;
    }
    else {
      uint32x4_t v42 = 1;
    }
    if (!v42) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    goto LABEL_53;
  }

  do
    v43 = __ldaxr(v14);
  while (__stlxr(v43 - 1, v14));
  [(id)DYGetGLGuestAppClient(v22) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 + 24) + 5560LL))( a1,  a2,  a3,  a4);
LABEL_53:
  if (v52[0]) {
    free(v52[0]);
  }
}

    uint32x4_t v26 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v21), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v26) {
      uint32x4_t v26 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v48, v27);
    }
    unint64_t v29 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
    if ((_DWORD)v29) {
      uint32x4_t v26 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v48, v29, v28);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v26), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v9, (uint64_t)v48);
    }
    uint64_t v30 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)v48);
    int v31 = *(unsigned int *)(v9 + 3404);
    if ((_DWORD)v31 && gBreakOnError)
    {
      uint64_t v44 = 3LL;
      unsigned int v45 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v20 & 2) == 0) {
        goto LABEL_37;
      }
      uint64_t v44 = 2LL;
      unsigned int v45 = 10LL;
    }

    breakpoint_break((uint64_t)v48, (volatile int *)v45, v44, v31, v9);
LABEL_37:
    unsigned int v32 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v30) defaultFbufStream];
    uint64_t v33 = (unsigned int *)((char *)v32 + 56);
    do
      NSUInteger v34 = __ldaxr(v33);
    while (__stlxr(1u, v33));
    if (v34 == 1)
    {
      do
      {
        while (*v33 == 1)
          ;
        do
          uint64_t v35 = __ldaxr(v33);
        while (__stlxr(1u, v33));
      }

      while (v35 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v32, (GPUTools::FB::Fbuf *)v48, *(unsigned int *)v48[0], 1);
    atomic_store(0, v33);
    if (!gCheckGLErrors) {
      check_errors(v9);
    }
    if (!*(_DWORD *)(v9 + 3404)) {
      wrapper_cache_active_transform_feedback((ContextInfo *)v9);
    }
    do
    {
      uint32x4_t v36 = __ldaxr(v10);
      uint32x4_t v37 = v36 - 1;
    }

    while (__stlxr(v37, v10));
    if (gCheckGLErrors) {
      uint64_t v38 = v37 < 1;
    }
    else {
      uint64_t v38 = 1;
    }
    if (!v38) {
      handle_opengl_thread_conflict((const void **)v9);
    }
    goto LABEL_53;
  }

  do
    uint64_t v39 = __ldaxr(v10);
  while (__stlxr(v39 - 1, v10));
  [(id)DYGetGLGuestAppClient(v18) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 5568LL))(a1, a2);
LABEL_53:
  if (v48[0]) {
    free(v48[0]);
  }
}

    uint64_t v33 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v33) {
      uint64_t v33 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v55, v34);
    }
    uint32x4_t v36 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v15 + 3404);
    if ((_DWORD)v36) {
      uint64_t v33 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v55, v36, v35);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v15, (uint64_t)v55);
    }
    uint32x4_t v37 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v15 + 3480),  (GPUTools::FB::Fbuf *)(v15 + 3520),  (GPUTools::FB *)v55);
    uint64_t v38 = *(unsigned int *)(v15 + 3404);
    if ((_DWORD)v38 && gBreakOnError)
    {
      uint64_t v51 = 3LL;
      uint64_t v52 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v27 & 2) == 0) {
        goto LABEL_37;
      }
      uint64_t v51 = 2LL;
      uint64_t v52 = 606LL;
    }

    breakpoint_break((uint64_t)v55, (volatile int *)v52, v51, v38, v15);
LABEL_37:
    uint64_t v39 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v37) defaultFbufStream];
    uint32x4_t v40 = (unsigned int *)((char *)v39 + 56);
    do
      uint32x4_t v41 = __ldaxr(v40);
    while (__stlxr(1u, v40));
    if (v41 == 1)
    {
      do
      {
        while (*v40 == 1)
          ;
        do
          uint32x4_t v42 = __ldaxr(v40);
        while (__stlxr(1u, v40));
      }

      while (v42 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v39, (GPUTools::FB::Fbuf *)v55, *(unsigned int *)v55[0], 1);
    atomic_store(0, v40);
    do
    {
      v43 = __ldaxr(v16);
      uint64_t v44 = v43 - 1;
    }

    while (__stlxr(v44, v16));
    if (gCheckGLErrors) {
      unsigned int v45 = v44 < 1;
    }
    else {
      unsigned int v45 = 1;
    }
    if (!v45) {
      handle_opengl_thread_conflict((const void **)v15);
    }
    goto LABEL_50;
  }

  do
    unsigned int v46 = __ldaxr(v16);
  while (__stlxr(v46 - 1, v16));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, const char *const *, uint64_t))(*(void *)(v15 + 24)
                                                                                            + 5584LL))( a1,  a2,  a3,  a4,  a5);
LABEL_50:
  if (v55[0]) {
    free(v55[0]);
  }
}

    uint32x4_t v37 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v37) {
      uint32x4_t v37 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v61, v38);
    }
    uint32x4_t v40 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v60 + 3404);
    if ((_DWORD)v40) {
      uint32x4_t v37 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v61, v40, v39);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v37), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v60, (uint64_t)v61);
    }
    uint32x4_t v41 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v60 + 3480),  (GPUTools::FB::Fbuf *)(v60 + 3520),  (GPUTools::FB *)v61);
    uint32x4_t v42 = *(unsigned int *)(v60 + 3404);
    if ((_DWORD)v42 && gBreakOnError)
    {
      v55 = 3LL;
      uint64_t v56 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v59 & 2) == 0) {
        goto LABEL_37;
      }
      v55 = 2LL;
      uint64_t v56 = 296LL;
    }

    breakpoint_break((uint64_t)v61, (volatile int *)v56, v55, v42, v60);
LABEL_37:
    v43 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v41) defaultFbufStream];
    uint64_t v44 = (unsigned int *)((char *)v43 + 56);
    do
      unsigned int v45 = __ldaxr(v44);
    while (__stlxr(1u, v44));
    if (v45 == 1)
    {
      do
      {
        while (*v44 == 1)
          ;
        do
          unsigned int v46 = __ldaxr(v44);
        while (__stlxr(1u, v44));
      }

      while (v46 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v43, (GPUTools::FB::Fbuf *)v61, *(unsigned int *)v61[0], 1);
    atomic_store(0, v44);
    do
    {
      uint64_t v47 = __ldaxr(v22);
      unsigned int v48 = v47 - 1;
    }

    while (__stlxr(v48, v22));
    if (gCheckGLErrors) {
      v49 = v48 < 1;
    }
    else {
      v49 = 1;
    }
    if (!v49) {
      handle_opengl_thread_conflict((const void **)v60);
    }
    goto LABEL_50;
  }

  do
    unsigned int v50 = __ldaxr(v22);
  while (__stlxr(v50 - 1, v22));
  [(id)DYGetGLGuestAppClient(v30) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, int *, int *, unsigned int *, char *))(*(void *)(v21 + 24) + 5592LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);
LABEL_50:
  if (v61[0]) {
    free(v61[0]);
  }
}

    uint32x4_t v28 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v23), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v28) {
      uint32x4_t v28 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v50, v29);
    }
    int v31 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v31) {
      uint32x4_t v28 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v50, v31, v30);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)v50);
    }
    unsigned int v32 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)v50);
    uint64_t v33 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v33 && gBreakOnError)
    {
      unsigned int v46 = 3LL;
      uint64_t v47 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v22 & 2) == 0) {
        goto LABEL_37;
      }
      unsigned int v46 = 2LL;
      uint64_t v47 = 723LL;
    }

    breakpoint_break((uint64_t)v50, (volatile int *)v47, v46, v33, v11);
LABEL_37:
    NSUInteger v34 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v32) defaultFbufStream];
    uint64_t v35 = (unsigned int *)((char *)v34 + 56);
    do
      uint32x4_t v36 = __ldaxr(v35);
    while (__stlxr(1u, v35));
    if (v36 == 1)
    {
      do
      {
        while (*v35 == 1)
          ;
        do
          uint32x4_t v37 = __ldaxr(v35);
        while (__stlxr(1u, v35));
      }

      while (v37 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v34, (GPUTools::FB::Fbuf *)v50, *(unsigned int *)v50[0], 1);
    atomic_store(0, v35);
    wrapper_cache_vertex_attrib((char *)v11, a2, 5124, (double)*a3, (double)a3[1], (double)a3[2], (double)a3[3]);
    do
    {
      uint64_t v38 = __ldaxr(v12);
      uint64_t v39 = v38 - 1;
    }

    while (__stlxr(v39, v12));
    if (gCheckGLErrors) {
      uint32x4_t v40 = v39 < 1;
    }
    else {
      uint32x4_t v40 = 1;
    }
    if (!v40) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    goto LABEL_50;
  }

  do
    uint32x4_t v41 = __ldaxr(v12);
  while (__stlxr(v41 - 1, v12));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, const int *))(*(void *)(v11 + 24) + 5776LL))(a1, a2, a3);
LABEL_50:
  if (v50[0]) {
    free(v50[0]);
  }
}

    uint32x4_t v28 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v23), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v28) {
      uint32x4_t v28 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v54, v29);
    }
    int v31 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v31) {
      uint32x4_t v28 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v54, v31, v30);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)v54);
    }
    unsigned int v32 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)v54);
    uint64_t v33 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v33 && gBreakOnError)
    {
      unsigned int v50 = 3LL;
      uint64_t v51 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v22 & 2) == 0) {
        goto LABEL_37;
      }
      unsigned int v50 = 2LL;
      uint64_t v51 = 723LL;
    }

    breakpoint_break((uint64_t)v54, (volatile int *)v51, v50, v33, v11);
LABEL_37:
    NSUInteger v34 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v32) defaultFbufStream];
    uint64_t v35 = (unsigned int *)((char *)v34 + 56);
    do
      uint32x4_t v36 = __ldaxr(v35);
    while (__stlxr(1u, v35));
    if (v36 == 1)
    {
      do
      {
        while (*v35 == 1)
          ;
        do
          uint32x4_t v37 = __ldaxr(v35);
        while (__stlxr(1u, v35));
      }

      while (v37 == 1);
    }

    uint64_t v38 = GPUTools::FB::Stream::Write_nolock(v34, (GPUTools::FB::Fbuf *)v54, *(unsigned int *)v54[0], 1);
    atomic_store(0, v35);
    v38.n128_u32[0] = *a3;
    LODWORD(v39) = a3[1];
    LODWORD(v40) = a3[2];
    LODWORD(v41) = a3[3];
    wrapper_cache_vertex_attrib((char *)v11, a2, 5125, (double)v38.n128_u64[0], (double)v39, (double)v40, (double)v41);
    do
    {
      uint32x4_t v42 = __ldaxr(v12);
      v43 = v42 - 1;
    }

    while (__stlxr(v43, v12));
    if (gCheckGLErrors) {
      uint64_t v44 = v43 < 1;
    }
    else {
      uint64_t v44 = 1;
    }
    if (!v44) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    goto LABEL_50;
  }

  do
    unsigned int v45 = __ldaxr(v12);
  while (__stlxr(v45 - 1, v12));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, unsigned __int32 *))(*(void *)(v11 + 24) + 5808LL))(a1, a2, a3);
LABEL_50:
  if (v54[0]) {
    free(v54[0]);
  }
}

    unsigned int v32 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v32) {
      unsigned int v32 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v54, v33);
    }
    uint64_t v35 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v15 + 3404);
    if ((_DWORD)v35) {
      unsigned int v32 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v54, v35, v34);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v15, (uint64_t)v54);
    }
    uint32x4_t v36 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v15 + 3480),  (GPUTools::FB::Fbuf *)(v15 + 3520),  (GPUTools::FB *)v54);
    uint32x4_t v37 = *(unsigned int *)(v15 + 3404);
    if ((_DWORD)v37 && gBreakOnError)
    {
      unsigned int v50 = 3LL;
      uint64_t v51 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v26 & 2) == 0) {
        goto LABEL_37;
      }
      unsigned int v50 = 2LL;
      uint64_t v51 = 214LL;
    }

    breakpoint_break((uint64_t)v54, (volatile int *)v51, v50, v37, v15);
LABEL_37:
    uint64_t v38 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v36) defaultFbufStream];
    uint64_t v39 = (unsigned int *)((char *)v38 + 56);
    do
      uint32x4_t v40 = __ldaxr(v39);
    while (__stlxr(1u, v39));
    if (v40 == 1)
    {
      do
      {
        while (*v39 == 1)
          ;
        do
          uint32x4_t v41 = __ldaxr(v39);
        while (__stlxr(1u, v39));
      }

      while (v41 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v38, (GPUTools::FB::Fbuf *)v54, *(unsigned int *)v54[0], 1);
    atomic_store(0, v39);
    do
    {
      uint32x4_t v42 = __ldaxr(v16);
      v43 = v42 - 1;
    }

    while (__stlxr(v43, v16));
    if (gCheckGLErrors) {
      uint64_t v44 = v43 < 1;
    }
    else {
      uint64_t v44 = 1;
    }
    if (!v44) {
      handle_opengl_thread_conflict((const void **)v15);
    }
    goto LABEL_50;
  }

  do
    unsigned int v45 = __ldaxr(v16);
  while (__stlxr(v45 - 1, v16));
  [(id)DYGetGLGuestAppClient(v24) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, int *, unsigned int *))(*(void *)(v15 + 24) + 6072LL))( a1,  a2,  a3,  a4,  a5);
LABEL_50:
  if (v54[0]) {
    free(v54[0]);
  }
}

    uint32x4_t v26 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v21), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v26) {
      uint32x4_t v26 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v49, v27);
    }
    unint64_t v29 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
    if ((_DWORD)v29) {
      uint32x4_t v26 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v49, v29, v28);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v26), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v9, (uint64_t)v49);
    }
    uint64_t v30 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)v49);
    int v31 = *(unsigned int *)(v9 + 3404);
    if ((_DWORD)v31 && gBreakOnError)
    {
      unsigned int v45 = 3LL;
      unsigned int v46 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v20 & 2) == 0) {
        goto LABEL_37;
      }
      unsigned int v45 = 2LL;
      unsigned int v46 = 838LL;
    }

    breakpoint_break((uint64_t)v49, (volatile int *)v46, v45, v31, v9);
LABEL_37:
    unsigned int v32 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v30) defaultFbufStream];
    uint64_t v33 = (unsigned int *)((char *)v32 + 56);
    do
      NSUInteger v34 = __ldaxr(v33);
    while (__stlxr(1u, v33));
    if (v34 == 1)
    {
      do
      {
        while (*v33 == 1)
          ;
        do
          uint64_t v35 = __ldaxr(v33);
        while (__stlxr(1u, v33));
      }

      while (v35 == 1);
    }

    uint32x4_t v36 = GPUTools::FB::Stream::Write_nolock(v32, (GPUTools::FB::Fbuf *)v49, *(unsigned int *)v49[0], 1);
    atomic_store(0, v33);
    (*(void (**)(void, uint64_t, uint64_t, __n128))(*(void *)(v9 + 32) + 832LL))( *(void *)(v9 + 16),  34964LL,  v9 + 2032,  v36);
    (*(void (**)(void, uint64_t, uint64_t))(*(void *)(v9 + 32) + 832LL))( *(void *)(v9 + 16),  34965LL,  v9 + 2036);
    do
    {
      uint32x4_t v37 = __ldaxr(v10);
      uint64_t v38 = v37 - 1;
    }

    while (__stlxr(v38, v10));
    if (gCheckGLErrors) {
      uint64_t v39 = v38 < 1;
    }
    else {
      uint64_t v39 = 1;
    }
    if (!v39) {
      handle_opengl_thread_conflict((const void **)v9);
    }
    goto LABEL_50;
  }

  do
    uint32x4_t v40 = __ldaxr(v10);
  while (__stlxr(v40 - 1, v10));
  [(id)DYGetGLGuestAppClient(v18) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 6144LL))(a1, a2);
LABEL_50:
  if (v49[0]) {
    free(v49[0]);
  }
}

    uint32x4_t v28 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v23), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v28) {
      uint32x4_t v28 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v51, v29);
    }
    int v31 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v31) {
      uint32x4_t v28 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v51, v31, v30);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)v51);
    }
    unsigned int v32 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)v51);
    uint64_t v33 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v33 && gBreakOnError)
    {
      uint64_t v47 = 3LL;
      unsigned int v48 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v22 & 2) == 0) {
        goto LABEL_37;
      }
      uint64_t v47 = 2LL;
      unsigned int v48 = 839LL;
    }

    breakpoint_break((uint64_t)v51, (volatile int *)v48, v47, v33, v11);
LABEL_37:
    NSUInteger v34 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v32) defaultFbufStream];
    uint64_t v35 = (unsigned int *)((char *)v34 + 56);
    do
      uint32x4_t v36 = __ldaxr(v35);
    while (__stlxr(1u, v35));
    if (v36 == 1)
    {
      do
      {
        while (*v35 == 1)
          ;
        do
          uint32x4_t v37 = __ldaxr(v35);
        while (__stlxr(1u, v35));
      }

      while (v37 == 1);
    }

    uint64_t v38 = GPUTools::FB::Stream::Write_nolock(v34, (GPUTools::FB::Fbuf *)v51, *(unsigned int *)v51[0], 1);
    atomic_store(0, v35);
    (*(void (**)(void, uint64_t, uint64_t, __n128))(*(void *)(v11 + 32) + 832LL))( *(void *)(v11 + 16),  34964LL,  v11 + 2032,  v38);
    (*(void (**)(void, uint64_t, uint64_t))(*(void *)(v11 + 32) + 832LL))( *(void *)(v11 + 16),  34965LL,  v11 + 2036);
    do
    {
      uint64_t v39 = __ldaxr(v12);
      uint32x4_t v40 = v39 - 1;
    }

    while (__stlxr(v40, v12));
    if (gCheckGLErrors) {
      uint32x4_t v41 = v40 < 1;
    }
    else {
      uint32x4_t v41 = 1;
    }
    if (!v41) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    goto LABEL_50;
  }

  do
    uint32x4_t v42 = __ldaxr(v12);
  while (__stlxr(v42 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, const unsigned int *))(*(void *)(v11 + 24) + 6152LL))( a1,  a2,  a3);
LABEL_50:
  if (v51[0]) {
    free(v51[0]);
  }
}

    unsigned int v32 = v57;
    uint64_t v56 = *((_OWORD *)v57 + 1);
    uint32x4_t v58 = v57;
    if (v59 >= 0x24)
    {
      *((_DWORD *)v57 + 8) = 0;
      NSUInteger *v32 = 0u;
      v32[1] = 0u;
    }

    GPUTools::FB::Encode((uint64_t)&v57, 840LL, 0LL, v11 + 4709, v24, v25, v26, v27, *(void *)v11);
    *((_OWORD *)v57 + 1) = v56;
    NSUInteger v34 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v34) {
      NSUInteger v34 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v57, v35);
    }
    uint32x4_t v37 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v37) {
      NSUInteger v34 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v57, v37, v36);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v34), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)&v57);
    }
    uint64_t v38 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v57);
    uint64_t v39 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v39 && gBreakOnError)
    {
      uint64_t v52 = 3LL;
      uint32x4_t v53 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v23 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v52 = 2LL;
      uint32x4_t v53 = 840LL;
    }

    breakpoint_break((uint64_t)&v57, (volatile int *)v53, v52, v39, v11);
LABEL_39:
    uint32x4_t v40 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v38) defaultFbufStream];
    uint32x4_t v41 = (unsigned int *)((char *)v40 + 56);
    do
      uint32x4_t v42 = __ldaxr(v41);
    while (__stlxr(1u, v41));
    if (v42 == 1)
    {
      do
      {
        while (*v41 == 1)
          ;
        do
          v43 = __ldaxr(v41);
        while (__stlxr(1u, v41));
      }

      while (v43 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v40, (GPUTools::FB::Fbuf *)&v57, *(unsigned int *)v57, 1);
    atomic_store(0, v41);
    do
    {
      uint64_t v44 = __ldaxr(v12);
      unsigned int v45 = v44 - 1;
    }

    while (__stlxr(v45, v12));
    if (gCheckGLErrors) {
      unsigned int v46 = v45 < 1;
    }
    else {
      unsigned int v46 = 1;
    }
    if (!v46) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    goto LABEL_52;
  }

  do
    uint64_t v47 = __ldaxr(v12);
  while (__stlxr(v47 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, unsigned int *))(*(void *)(v11 + 24) + 6160LL))(a1, a2, a3);
LABEL_52:
  if (v57) {
    free(v57);
  }
}

    int v31 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v26), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v31) {
      int v31 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v53, v32);
    }
    NSUInteger v34 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v34) {
      int v31 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v53, v34, v33);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v31), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v53);
    }
    uint64_t v35 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v53);
    uint32x4_t v36 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v36 && gBreakOnError)
    {
      v49 = 3LL;
      unsigned int v50 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v25 & 2) == 0) {
        goto LABEL_37;
      }
      v49 = 2LL;
      unsigned int v50 = 806LL;
    }

    breakpoint_break((uint64_t)v53, (volatile int *)v50, v49, v36, v13);
LABEL_37:
    uint32x4_t v37 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v35) defaultFbufStream];
    uint64_t v38 = (unsigned int *)((char *)v37 + 56);
    do
      uint64_t v39 = __ldaxr(v38);
    while (__stlxr(1u, v38));
    if (v39 == 1)
    {
      do
      {
        while (*v38 == 1)
          ;
        do
          uint32x4_t v40 = __ldaxr(v38);
        while (__stlxr(1u, v38));
      }

      while (v40 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v37, (GPUTools::FB::Fbuf *)v53, *(unsigned int *)v53[0], 1);
    atomic_store(0, v38);
    do
    {
      uint32x4_t v41 = __ldaxr(v14);
      uint32x4_t v42 = v41 - 1;
    }

    while (__stlxr(v42, v14));
    if (gCheckGLErrors) {
      v43 = v42 < 1;
    }
    else {
      v43 = 1;
    }
    if (!v43) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    goto LABEL_50;
  }

  do
    uint64_t v44 = __ldaxr(v14);
  while (__stlxr(v44 - 1, v14));
  [(id)DYGetGLGuestAppClient(v22) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, const void *))(*(void *)(v13 + 24) + 6176LL))( a1,  a2,  a3,  a4);
LABEL_50:
  if (v53[0]) {
    free(v53[0]);
  }
}

    unsigned int v32 = v57;
    uint64_t v56 = *((_OWORD *)v57 + 1);
    uint32x4_t v58 = v57;
    if (v59 >= 0x24)
    {
      *((_DWORD *)v57 + 8) = 0;
      NSUInteger *v32 = 0u;
      v32[1] = 0u;
    }

    GPUTools::FB::Encode((uint64_t)&v57, 858LL, 0LL, v11 + 4709, v24, v25, v26, v27, *(void *)v11);
    *((_OWORD *)v57 + 1) = v56;
    NSUInteger v34 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v34) {
      NSUInteger v34 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v57, v35);
    }
    uint32x4_t v37 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v37) {
      NSUInteger v34 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v57, v37, v36);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v34), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)&v57);
    }
    uint64_t v38 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v57);
    uint64_t v39 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v39 && gBreakOnError)
    {
      uint64_t v52 = 3LL;
      uint32x4_t v53 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v23 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v52 = 2LL;
      uint32x4_t v53 = 858LL;
    }

    breakpoint_break((uint64_t)&v57, (volatile int *)v53, v52, v39, v11);
LABEL_39:
    uint32x4_t v40 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v38) defaultFbufStream];
    uint32x4_t v41 = (unsigned int *)((char *)v40 + 56);
    do
      uint32x4_t v42 = __ldaxr(v41);
    while (__stlxr(1u, v41));
    if (v42 == 1)
    {
      do
      {
        while (*v41 == 1)
          ;
        do
          v43 = __ldaxr(v41);
        while (__stlxr(1u, v41));
      }

      while (v43 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v40, (GPUTools::FB::Fbuf *)&v57, *(unsigned int *)v57, 1);
    atomic_store(0, v41);
    do
    {
      uint64_t v44 = __ldaxr(v12);
      unsigned int v45 = v44 - 1;
    }

    while (__stlxr(v45, v12));
    if (gCheckGLErrors) {
      unsigned int v46 = v45 < 1;
    }
    else {
      unsigned int v46 = 1;
    }
    if (!v46) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    goto LABEL_52;
  }

  do
    uint64_t v47 = __ldaxr(v12);
  while (__stlxr(v47 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, unsigned int *))(*(void *)(v11 + 24) + 6400LL))(a1, a2, a3);
LABEL_52:
  if (v57) {
    free(v57);
  }
}

    uint32x4_t v28 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v23), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v28) {
      uint32x4_t v28 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v50, v29);
    }
    int v31 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v31) {
      uint32x4_t v28 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v50, v31, v30);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)v50);
    }
    unsigned int v32 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)v50);
    uint64_t v33 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v33 && gBreakOnError)
    {
      unsigned int v46 = 3LL;
      uint64_t v47 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v22 & 2) == 0) {
        goto LABEL_37;
      }
      unsigned int v46 = 2LL;
      uint64_t v47 = 856LL;
    }

    breakpoint_break((uint64_t)v50, (volatile int *)v47, v46, v33, v11);
LABEL_37:
    NSUInteger v34 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v32) defaultFbufStream];
    uint64_t v35 = (unsigned int *)((char *)v34 + 56);
    do
      uint32x4_t v36 = __ldaxr(v35);
    while (__stlxr(1u, v35));
    if (v36 == 1)
    {
      do
      {
        while (*v35 == 1)
          ;
        do
          uint32x4_t v37 = __ldaxr(v35);
        while (__stlxr(1u, v35));
      }

      while (v37 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v34, (GPUTools::FB::Fbuf *)v50, *(unsigned int *)v50[0], 1);
    atomic_store(0, v35);
    do
    {
      uint64_t v38 = __ldaxr(v12);
      uint64_t v39 = v38 - 1;
    }

    while (__stlxr(v39, v12));
    if (gCheckGLErrors) {
      uint32x4_t v40 = v39 < 1;
    }
    else {
      uint32x4_t v40 = 1;
    }
    if (!v40) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    goto LABEL_50;
  }

  do
    uint32x4_t v41 = __ldaxr(v12);
  while (__stlxr(v41 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, const unsigned int *))(*(void *)(v11 + 24) + 6408LL))( a1,  a2,  a3);
LABEL_50:
  if (v50[0]) {
    free(v50[0]);
  }
}

    NSUInteger v34 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v34) {
      NSUInteger v34 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v56, v35);
    }
    uint32x4_t v37 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v17 + 3404);
    if ((_DWORD)v37) {
      NSUInteger v34 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v56, v37, v36);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v34), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v17, (uint64_t)v56);
    }
    uint64_t v38 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v17 + 3480),  (GPUTools::FB::Fbuf *)(v17 + 3520),  (GPUTools::FB *)v56);
    uint64_t v39 = *(unsigned int *)(v17 + 3404);
    if ((_DWORD)v39 && gBreakOnError)
    {
      uint64_t v52 = 3LL;
      uint32x4_t v53 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v28 & 2) == 0) {
        goto LABEL_37;
      }
      uint64_t v52 = 2LL;
      uint32x4_t v53 = 892LL;
    }

    breakpoint_break((uint64_t)v56, (volatile int *)v53, v52, v39, v17);
LABEL_37:
    uint32x4_t v40 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v38) defaultFbufStream];
    uint32x4_t v41 = (unsigned int *)((char *)v40 + 56);
    do
      uint32x4_t v42 = __ldaxr(v41);
    while (__stlxr(1u, v41));
    if (v42 == 1)
    {
      do
      {
        while (*v41 == 1)
          ;
        do
          v43 = __ldaxr(v41);
        while (__stlxr(1u, v41));
      }

      while (v43 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v40, (GPUTools::FB::Fbuf *)v56, *(unsigned int *)v56[0], 1);
    atomic_store(0, v41);
    do
    {
      uint64_t v44 = __ldaxr(v18);
      unsigned int v45 = v44 - 1;
    }

    while (__stlxr(v45, v18));
    if (gCheckGLErrors) {
      unsigned int v46 = v45 < 1;
    }
    else {
      unsigned int v46 = 1;
    }
    if (!v46) {
      handle_opengl_thread_conflict((const void **)v17);
    }
    goto LABEL_50;
  }

  do
    uint64_t v47 = __ldaxr(v18);
  while (__stlxr(v47 - 1, v18));
  [(id)DYGetGLGuestAppClient(v26) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, int *, char *))(*(void *)(v17 + 24) + 6520LL))( a1,  a2,  a3,  a4,  a5,  a6);
LABEL_50:
  if (v56[0]) {
    free(v56[0]);
  }
}

  uint64_t v30 = objc_msgSend(objc_msgSend((id)DYGetGLGuestAppClient(v25), "activeCaptureDescriptor"), "includeBacktraceInFbufs");
  if ((_DWORD)v30) {
    uint64_t v30 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v49, v31);
  }
  uint64_t v33 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
  if ((_DWORD)v33) {
    uint64_t v30 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v49, v33, v32);
  }
  if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v30), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
    encode_driver_events((id *)v11, (uint64_t)v49);
  }
  NSUInteger v34 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)v49);
  uint64_t v35 = *(unsigned int *)(v11 + 3404);
  if ((_DWORD)v35 && gBreakOnError)
  {
    unsigned int v45 = 3LL;
    unsigned int v46 = 0xFFFFFFFFLL;
  }

  else
  {
    if ((v24 & 2) == 0) {
      goto LABEL_37;
    }
    unsigned int v45 = 2LL;
    unsigned int v46 = 919LL;
  }

  breakpoint_break((uint64_t)v49, (volatile int *)v46, v45, v35, v11);
LABEL_37:
  uint32x4_t v36 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v34) defaultFbufStream];
  uint32x4_t v37 = (unsigned int *)((char *)v36 + 56);
  do
    uint64_t v38 = __ldaxr(v37);
  while (__stlxr(1u, v37));
  if (v38 == 1)
  {
    do
    {
      while (*v37 == 1)
        ;
      do
        uint64_t v39 = __ldaxr(v37);
      while (__stlxr(1u, v37));
    }

    while (v39 == 1);
  }

  GPUTools::FB::Stream::Write_nolock(v36, (GPUTools::FB::Fbuf *)v49, *(unsigned int *)v49[0], 1);
  atomic_store(0, v37);
  wrapper_push_group_marker((ContextInfo *)v11, a2, a3);
  ReleaseStringToEncode(StringToEncode, a3);
  do
  {
    uint32x4_t v40 = __ldaxr(v12);
    uint32x4_t v41 = v40 - 1;
  }

  while (__stlxr(v41, v12));
  if (gCheckGLErrors) {
    uint32x4_t v42 = v41 < 1;
  }
  else {
    uint32x4_t v42 = 1;
  }
  if (!v42) {
    handle_opengl_thread_conflict((const void **)v11);
  }
LABEL_50:
  if (v49[0]) {
    free(v49[0]);
  }
}

    uint64_t v30 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v25), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v30) {
      uint64_t v30 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v53, v31);
    }
    uint64_t v33 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v33) {
      uint64_t v30 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v53, v33, v32);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v30), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v53);
    }
    NSUInteger v34 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v53);
    uint64_t v35 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v35 && gBreakOnError)
    {
      unsigned int v48 = 3LL;
      v49 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v24 & 2) == 0) {
        goto LABEL_37;
      }
      unsigned int v48 = 2LL;
      v49 = 920LL;
    }

    breakpoint_break((uint64_t)v53, (volatile int *)v49, v48, v35, v13);
LABEL_37:
    uint32x4_t v36 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v34) defaultFbufStream];
    uint32x4_t v37 = (unsigned int *)((char *)v36 + 56);
    do
      uint64_t v38 = __ldaxr(v37);
    while (__stlxr(1u, v37));
    if (v38 == 1)
    {
      do
      {
        while (*v37 == 1)
          ;
        do
          uint64_t v39 = __ldaxr(v37);
        while (__stlxr(1u, v37));
      }

      while (v39 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v36, (GPUTools::FB::Fbuf *)v53, *(unsigned int *)v53[0], 1);
    atomic_store(0, v37);
    if (!gCheckGLErrors) {
      check_errors(v13);
    }
    if ((_DWORD)a3 && !*(_DWORD *)(v13 + 3404)) {
      wrapper_cache_pipeline_use_stages((void *)v13, a2, a3, a4, v52, 1);
    }
    do
    {
      uint32x4_t v40 = __ldaxr(v14);
      uint32x4_t v41 = v40 - 1;
    }

    while (__stlxr(v41, v14));
    if (gCheckGLErrors) {
      uint32x4_t v42 = v41 < 1;
    }
    else {
      uint32x4_t v42 = 1;
    }
    if (!v42) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    goto LABEL_54;
  }

  do
    v43 = __ldaxr(v14);
  while (__stlxr(v43 - 1, v14));
  [(id)DYGetGLGuestAppClient(v22) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 + 24) + 6552LL))( a1,  a2,  a3,  a4);
LABEL_54:
  if (v53[0]) {
    free(v53[0]);
  }
}

    unsigned int v32 = v57;
    uint64_t v56 = *((_OWORD *)v57 + 1);
    uint32x4_t v58 = v57;
    if (v59 >= 0x24)
    {
      *((_DWORD *)v57 + 8) = 0;
      NSUInteger *v32 = 0u;
      v32[1] = 0u;
    }

    GPUTools::FB::Encode((uint64_t)&v57, 890LL, 0LL, v11 + 4709, v24, v25, v26, v27, *(void *)v11);
    *((_OWORD *)v57 + 1) = v56;
    NSUInteger v34 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v34) {
      NSUInteger v34 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v57, v35);
    }
    uint32x4_t v37 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v37) {
      NSUInteger v34 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v57, v37, v36);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v34), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)&v57);
    }
    uint64_t v38 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v57);
    uint64_t v39 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v39 && gBreakOnError)
    {
      uint64_t v52 = 3LL;
      uint32x4_t v53 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v23 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v52 = 2LL;
      uint32x4_t v53 = 890LL;
    }

    breakpoint_break((uint64_t)&v57, (volatile int *)v53, v52, v39, v11);
LABEL_39:
    uint32x4_t v40 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v38) defaultFbufStream];
    uint32x4_t v41 = (unsigned int *)((char *)v40 + 56);
    do
      uint32x4_t v42 = __ldaxr(v41);
    while (__stlxr(1u, v41));
    if (v42 == 1)
    {
      do
      {
        while (*v41 == 1)
          ;
        do
          v43 = __ldaxr(v41);
        while (__stlxr(1u, v41));
      }

      while (v43 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v40, (GPUTools::FB::Fbuf *)&v57, *(unsigned int *)v57, 1);
    atomic_store(0, v41);
    do
    {
      uint64_t v44 = __ldaxr(v12);
      unsigned int v45 = v44 - 1;
    }

    while (__stlxr(v45, v12));
    if (gCheckGLErrors) {
      unsigned int v46 = v45 < 1;
    }
    else {
      unsigned int v46 = 1;
    }
    if (!v46) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    goto LABEL_52;
  }

  do
    uint64_t v47 = __ldaxr(v12);
  while (__stlxr(v47 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, unsigned int *))(*(void *)(v11 + 24) + 6592LL))(a1, a2, a3);
LABEL_52:
  if (v57) {
    free(v57);
  }
}

    uint32x4_t v26 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v21), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v26) {
      uint32x4_t v26 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v63, v27);
    }
    unint64_t v29 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
    if ((_DWORD)v29) {
      uint32x4_t v26 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v63, v29, v28);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v26), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v9, (uint64_t)v63);
    }
    uint64_t v30 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)v63);
    int v31 = *(unsigned int *)(v9 + 3404);
    if ((_DWORD)v31 && gBreakOnError)
    {
      uint32x4_t v57 = 3LL;
      uint32x4_t v58 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v20 & 2) == 0) {
        goto LABEL_37;
      }
      uint32x4_t v57 = 2LL;
      uint32x4_t v58 = 921LL;
    }

    breakpoint_break((uint64_t)v63, (volatile int *)v58, v57, v31, v9);
LABEL_37:
    unsigned int v32 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v30) defaultFbufStream];
    uint64_t v33 = (unsigned int *)((char *)v32 + 56);
    do
      NSUInteger v34 = __ldaxr(v33);
    while (__stlxr(1u, v33));
    if (v34 == 1)
    {
      do
      {
        while (*v33 == 1)
          ;
        do
          uint64_t v35 = __ldaxr(v33);
        while (__stlxr(1u, v33));
      }

      while (v35 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v32, (GPUTools::FB::Fbuf *)v63, *(unsigned int *)v63[0], 1);
    atomic_store(0, v33);
    info_log = (char *)query_info_log( v9,  a2,  *(void (**)(void, uint64_t, uint64_t, int *))(*(void *)(v9 + 32) + 6608LL),  *(void (**)(void, uint64_t, size_t, void, void *))(*(void *)(v9 + 32) + 6624LL),  (int *)&v62);
    uint32x4_t v37 = info_log;
    if (v62)
    {
      if (v62 >= 0x400) {
        uint64_t v38 = 1024LL;
      }
      else {
        uint64_t v38 = v62;
      }
      info_log[v38 - 1] = 0;
    }

    (*(void (**)(void, uint64_t, uint64_t, int *))(*(void *)(v9 + 32) + 6608LL))( *(void *)(v9 + 16),  a2,  35715LL,  &v61);
    GPUTools::FB::Encode((uint64_t)v63, 4294955024LL, (uint64_t)"CiuiiSi", v39, v40, v41, v42, v43, *(void *)v9);
    unsigned int v45 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v44) defaultFbufStream];
    unsigned int v46 = (unsigned int *)((char *)v45 + 56);
    do
      uint64_t v47 = __ldaxr(v46);
    while (__stlxr(1u, v46));
    if (v47 == 1)
    {
      do
      {
        while (*v46 == 1)
          ;
        do
          unsigned int v48 = __ldaxr(v46);
        while (__stlxr(1u, v46));
      }

      while (v48 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v45, (GPUTools::FB::Fbuf *)v63, *(unsigned int *)v63[0], 1);
    atomic_store(0, v46);
    free(v37);
    do
    {
      v49 = __ldaxr(v10);
      unsigned int v50 = v49 - 1;
    }

    while (__stlxr(v50, v10));
    if (gCheckGLErrors) {
      uint64_t v51 = v50 < 1;
    }
    else {
      uint64_t v51 = 1;
    }
    if (!v51) {
      handle_opengl_thread_conflict((const void **)v9);
    }
    goto LABEL_61;
  }

  do
    uint64_t v52 = __ldaxr(v10);
  while (__stlxr(v52 - 1, v10));
  [(id)DYGetGLGuestAppClient(v18) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 6616LL))(a1, a2);
LABEL_61:
  if (v63[0]) {
    free(v63[0]);
  }
}

    NSUInteger v34 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v34) {
      NSUInteger v34 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v56, v35);
    }
    uint32x4_t v37 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v17 + 3404);
    if ((_DWORD)v37) {
      NSUInteger v34 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v56, v37, v36);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v34), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v17, (uint64_t)v56);
    }
    uint64_t v38 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v17 + 3480),  (GPUTools::FB::Fbuf *)(v17 + 3520),  (GPUTools::FB *)v56);
    uint64_t v39 = *(unsigned int *)(v17 + 3404);
    if ((_DWORD)v39 && gBreakOnError)
    {
      uint64_t v52 = 3LL;
      uint32x4_t v53 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v28 & 2) == 0) {
        goto LABEL_37;
      }
      uint64_t v52 = 2LL;
      uint32x4_t v53 = 934LL;
    }

    breakpoint_break((uint64_t)v56, (volatile int *)v53, v52, v39, v17);
LABEL_37:
    uint32x4_t v40 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v38) defaultFbufStream];
    uint32x4_t v41 = (unsigned int *)((char *)v40 + 56);
    do
      uint32x4_t v42 = __ldaxr(v41);
    while (__stlxr(1u, v41));
    if (v42 == 1)
    {
      do
      {
        while (*v41 == 1)
          ;
        do
          v43 = __ldaxr(v41);
        while (__stlxr(1u, v41));
      }

      while (v43 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v40, (GPUTools::FB::Fbuf *)v56, *(unsigned int *)v56[0], 1);
    atomic_store(0, v41);
    do
    {
      uint64_t v44 = __ldaxr(v18);
      unsigned int v45 = v44 - 1;
    }

    while (__stlxr(v45, v18));
    if (gCheckGLErrors) {
      unsigned int v46 = v45 < 1;
    }
    else {
      unsigned int v46 = 1;
    }
    if (!v46) {
      handle_opengl_thread_conflict((const void **)v17);
    }
    goto LABEL_50;
  }

  do
    uint64_t v47 = __ldaxr(v18);
  while (__stlxr(v47 - 1, v18));
  [(id)DYGetGLGuestAppClient(v26) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, int *, unsigned int *, void *))(*(void *)(v17 + 24)
                                                                                             + 7096LL))( a1,  a2,  a3,  a4,  a5,  a6);
LABEL_50:
  if (v56[0]) {
    free(v56[0]);
  }
}

    unsigned int v32 = v57;
    uint64_t v56 = *((_OWORD *)v57 + 1);
    uint32x4_t v58 = v57;
    if (v59 >= 0x24)
    {
      *((_DWORD *)v57 + 8) = 0;
      NSUInteger *v32 = 0u;
      v32[1] = 0u;
    }

    GPUTools::FB::Encode((uint64_t)&v57, 987LL, 0LL, v11 + 4709, v24, v25, v26, v27, *(void *)v11);
    *((_OWORD *)v57 + 1) = v56;
    NSUInteger v34 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v34) {
      NSUInteger v34 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v57, v35);
    }
    uint32x4_t v37 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v37) {
      NSUInteger v34 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v57, v37, v36);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v34), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)&v57);
    }
    uint64_t v38 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v57);
    uint64_t v39 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v39 && gBreakOnError)
    {
      uint64_t v52 = 3LL;
      uint32x4_t v53 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v23 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v52 = 2LL;
      uint32x4_t v53 = 987LL;
    }

    breakpoint_break((uint64_t)&v57, (volatile int *)v53, v52, v39, v11);
LABEL_39:
    uint32x4_t v40 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v38) defaultFbufStream];
    uint32x4_t v41 = (unsigned int *)((char *)v40 + 56);
    do
      uint32x4_t v42 = __ldaxr(v41);
    while (__stlxr(1u, v41));
    if (v42 == 1)
    {
      do
      {
        while (*v41 == 1)
          ;
        do
          v43 = __ldaxr(v41);
        while (__stlxr(1u, v41));
      }

      while (v43 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v40, (GPUTools::FB::Fbuf *)&v57, *(unsigned int *)v57, 1);
    atomic_store(0, v41);
    do
    {
      uint64_t v44 = __ldaxr(v12);
      unsigned int v45 = v44 - 1;
    }

    while (__stlxr(v45, v12));
    if (gCheckGLErrors) {
      unsigned int v46 = v45 < 1;
    }
    else {
      unsigned int v46 = 1;
    }
    if (!v46) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    goto LABEL_52;
  }

  do
    uint64_t v47 = __ldaxr(v12);
  while (__stlxr(v47 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, unsigned int *))(*(void *)(v11 + 24) + 7240LL))(a1, a2, a3);
LABEL_52:
  if (v57) {
    free(v57);
  }
}

    uint32x4_t v28 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v23), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v28) {
      uint32x4_t v28 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v50, v29);
    }
    int v31 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v31) {
      uint32x4_t v28 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v50, v31, v30);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)v50);
    }
    unsigned int v32 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)v50);
    uint64_t v33 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v33 && gBreakOnError)
    {
      unsigned int v46 = 3LL;
      uint64_t v47 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v22 & 2) == 0) {
        goto LABEL_37;
      }
      unsigned int v46 = 2LL;
      uint64_t v47 = 981LL;
    }

    breakpoint_break((uint64_t)v50, (volatile int *)v47, v46, v33, v11);
LABEL_37:
    NSUInteger v34 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v32) defaultFbufStream];
    uint64_t v35 = (unsigned int *)((char *)v34 + 56);
    do
      uint32x4_t v36 = __ldaxr(v35);
    while (__stlxr(1u, v35));
    if (v36 == 1)
    {
      do
      {
        while (*v35 == 1)
          ;
        do
          uint32x4_t v37 = __ldaxr(v35);
        while (__stlxr(1u, v35));
      }

      while (v37 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v34, (GPUTools::FB::Fbuf *)v50, *(unsigned int *)v50[0], 1);
    atomic_store(0, v35);
    do
    {
      uint64_t v38 = __ldaxr(v12);
      uint64_t v39 = v38 - 1;
    }

    while (__stlxr(v39, v12));
    if (gCheckGLErrors) {
      uint32x4_t v40 = v39 < 1;
    }
    else {
      uint32x4_t v40 = 1;
    }
    if (!v40) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    goto LABEL_50;
  }

  do
    uint32x4_t v41 = __ldaxr(v12);
  while (__stlxr(v41 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, const unsigned int *))(*(void *)(v11 + 24) + 7248LL))( a1,  a2,  a3);
LABEL_50:
  if (v50[0]) {
    free(v50[0]);
  }
}

    int v31 = v56;
    v55 = *((_OWORD *)v56 + 1);
    uint32x4_t v57 = v56;
    if (v58 >= 0x24)
    {
      *((_DWORD *)v56 + 8) = 0;
      *int v31 = 0u;
      v31[1] = 0u;
    }

    GPUTools::FB::Encode((uint64_t)&v56, 781LL, 256LL, (uint64_t)"Ce@4f", v23, v24, v25, v26, *(void *)v11);
    *((_OWORD *)v56 + 1) = v55;
    uint64_t v33 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v33) {
      uint64_t v33 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v56, v34);
    }
    uint32x4_t v36 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v36) {
      uint64_t v33 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v56, v36, v35);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)&v56);
    }
    uint32x4_t v37 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v56);
    uint64_t v38 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v38 && gBreakOnError)
    {
      uint64_t v51 = 3LL;
      uint64_t v52 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v22 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v51 = 2LL;
      uint64_t v52 = 781LL;
    }

    breakpoint_break((uint64_t)&v56, (volatile int *)v52, v51, v38, v11);
LABEL_39:
    uint64_t v39 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v37) defaultFbufStream];
    uint32x4_t v40 = (unsigned int *)((char *)v39 + 56);
    do
      uint32x4_t v41 = __ldaxr(v40);
    while (__stlxr(1u, v40));
    if (v41 == 1)
    {
      do
      {
        while (*v40 == 1)
          ;
        do
          uint32x4_t v42 = __ldaxr(v40);
        while (__stlxr(1u, v40));
      }

      while (v42 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v39, (GPUTools::FB::Fbuf *)&v56, *(unsigned int *)v56, 1);
    atomic_store(0, v40);
    do
    {
      v43 = __ldaxr(v12);
      uint64_t v44 = v43 - 1;
    }

    while (__stlxr(v44, v12));
    if (gCheckGLErrors) {
      unsigned int v45 = v44 < 1;
    }
    else {
      unsigned int v45 = 1;
    }
    if (!v45) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    goto LABEL_52;
  }

  do
    unsigned int v46 = __ldaxr(v12);
  while (__stlxr(v46 - 1, v12));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, float *))(*(void *)(v11 + 24) + 7832LL))(a1, a2, a3);
LABEL_52:
  if (v56) {
    free(v56);
  }
}

    int v31 = v56;
    v55 = *((_OWORD *)v56 + 1);
    uint32x4_t v57 = v56;
    if (v58 >= 0x24)
    {
      *((_DWORD *)v56 + 8) = 0;
      *int v31 = 0u;
      v31[1] = 0u;
    }

    GPUTools::FB::Encode((uint64_t)&v56, 782LL, 256LL, (uint64_t)"Ce@4x", v23, v24, v25, v26, *(void *)v11);
    *((_OWORD *)v56 + 1) = v55;
    uint64_t v33 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v33) {
      uint64_t v33 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v56, v34);
    }
    uint32x4_t v36 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v36) {
      uint64_t v33 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v56, v36, v35);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)&v56);
    }
    uint32x4_t v37 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v56);
    uint64_t v38 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v38 && gBreakOnError)
    {
      uint64_t v51 = 3LL;
      uint64_t v52 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v22 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v51 = 2LL;
      uint64_t v52 = 782LL;
    }

    breakpoint_break((uint64_t)&v56, (volatile int *)v52, v51, v38, v11);
LABEL_39:
    uint64_t v39 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v37) defaultFbufStream];
    uint32x4_t v40 = (unsigned int *)((char *)v39 + 56);
    do
      uint32x4_t v41 = __ldaxr(v40);
    while (__stlxr(1u, v40));
    if (v41 == 1)
    {
      do
      {
        while (*v40 == 1)
          ;
        do
          uint32x4_t v42 = __ldaxr(v40);
        while (__stlxr(1u, v40));
      }

      while (v42 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v39, (GPUTools::FB::Fbuf *)&v56, *(unsigned int *)v56, 1);
    atomic_store(0, v40);
    do
    {
      v43 = __ldaxr(v12);
      uint64_t v44 = v43 - 1;
    }

    while (__stlxr(v44, v12));
    if (gCheckGLErrors) {
      unsigned int v45 = v44 < 1;
    }
    else {
      unsigned int v45 = 1;
    }
    if (!v45) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    goto LABEL_52;
  }

  do
    unsigned int v46 = __ldaxr(v12);
  while (__stlxr(v46 - 1, v12));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, int *))(*(void *)(v11 + 24) + 7840LL))(a1, a2, a3);
LABEL_52:
  if (v56) {
    free(v56);
  }
}

    unsigned int v32 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v32) {
      unsigned int v32 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v54, v33);
    }
    uint64_t v35 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v35) {
      unsigned int v32 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v54, v35, v34);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v54);
    }
    uint32x4_t v36 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v54);
    uint32x4_t v37 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v37 && gBreakOnError)
    {
      unsigned int v50 = 3LL;
      uint64_t v51 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v26 & 2) == 0) {
        goto LABEL_37;
      }
      unsigned int v50 = 2LL;
      uint64_t v51 = 792LL;
    }

    breakpoint_break((uint64_t)v54, (volatile int *)v51, v50, v37, v13);
LABEL_37:
    uint64_t v38 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v36) defaultFbufStream];
    uint64_t v39 = (unsigned int *)((char *)v38 + 56);
    do
      uint32x4_t v40 = __ldaxr(v39);
    while (__stlxr(1u, v39));
    if (v40 == 1)
    {
      do
      {
        while (*v39 == 1)
          ;
        do
          uint32x4_t v41 = __ldaxr(v39);
        while (__stlxr(1u, v39));
      }

      while (v41 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v38, (GPUTools::FB::Fbuf *)v54, *(unsigned int *)v54[0], 1);
    atomic_store(0, v39);
    do
    {
      uint32x4_t v42 = __ldaxr(v14);
      v43 = v42 - 1;
    }

    while (__stlxr(v43, v14));
    if (gCheckGLErrors) {
      uint64_t v44 = v43 < 1;
    }
    else {
      uint64_t v44 = 1;
    }
    if (!v44) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    goto LABEL_50;
  }

  do
    unsigned int v45 = __ldaxr(v14);
  while (__stlxr(v45 - 1, v14));
  [(id)DYGetGLGuestAppClient(v19) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, GPUTools::GL *, const int *))(*(void *)(v13 + 24) + 7912LL))( a1,  a2,  a3,  a4);
LABEL_50:
  if (v54[0]) {
    free(v54[0]);
  }
}

    unsigned int v32 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v32) {
      unsigned int v32 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v54, v33);
    }
    uint64_t v35 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v35) {
      unsigned int v32 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v54, v35, v34);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v54);
    }
    uint32x4_t v36 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v54);
    uint32x4_t v37 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v37 && gBreakOnError)
    {
      unsigned int v50 = 3LL;
      uint64_t v51 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v26 & 2) == 0) {
        goto LABEL_37;
      }
      unsigned int v50 = 2LL;
      uint64_t v51 = 797LL;
    }

    breakpoint_break((uint64_t)v54, (volatile int *)v51, v50, v37, v13);
LABEL_37:
    uint64_t v38 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v36) defaultFbufStream];
    uint64_t v39 = (unsigned int *)((char *)v38 + 56);
    do
      uint32x4_t v40 = __ldaxr(v39);
    while (__stlxr(1u, v39));
    if (v40 == 1)
    {
      do
      {
        while (*v39 == 1)
          ;
        do
          uint32x4_t v41 = __ldaxr(v39);
        while (__stlxr(1u, v39));
      }

      while (v41 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v38, (GPUTools::FB::Fbuf *)v54, *(unsigned int *)v54[0], 1);
    atomic_store(0, v39);
    do
    {
      uint32x4_t v42 = __ldaxr(v14);
      v43 = v42 - 1;
    }

    while (__stlxr(v43, v14));
    if (gCheckGLErrors) {
      uint64_t v44 = v43 < 1;
    }
    else {
      uint64_t v44 = 1;
    }
    if (!v44) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    goto LABEL_50;
  }

  do
    unsigned int v45 = __ldaxr(v14);
  while (__stlxr(v45 - 1, v14));
  [(id)DYGetGLGuestAppClient(v19) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, GPUTools::GL *, const int *))(*(void *)(v13 + 24) + 7944LL))( a1,  a2,  a3,  a4);
LABEL_50:
  if (v54[0]) {
    free(v54[0]);
  }
}

    uint64_t v33 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v33) {
      uint64_t v33 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v55, v34);
    }
    uint32x4_t v36 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v15 + 3404);
    if ((_DWORD)v36) {
      uint64_t v33 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v55, v36, v35);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v15, (uint64_t)v55);
    }
    uint32x4_t v37 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v15 + 3480),  (GPUTools::FB::Fbuf *)(v15 + 3520),  (GPUTools::FB *)v55);
    uint64_t v38 = *(unsigned int *)(v15 + 3404);
    if ((_DWORD)v38 && gBreakOnError)
    {
      uint64_t v51 = 3LL;
      uint64_t v52 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v27 & 2) == 0) {
        goto LABEL_37;
      }
      uint64_t v51 = 2LL;
      uint64_t v52 = 798LL;
    }

    breakpoint_break((uint64_t)v55, (volatile int *)v52, v51, v38, v15);
LABEL_37:
    uint64_t v39 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v37) defaultFbufStream];
    uint32x4_t v40 = (unsigned int *)((char *)v39 + 56);
    do
      uint32x4_t v41 = __ldaxr(v40);
    while (__stlxr(1u, v40));
    if (v41 == 1)
    {
      do
      {
        while (*v40 == 1)
          ;
        do
          uint32x4_t v42 = __ldaxr(v40);
        while (__stlxr(1u, v40));
      }

      while (v42 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v39, (GPUTools::FB::Fbuf *)v55, *(unsigned int *)v55[0], 1);
    atomic_store(0, v40);
    do
    {
      v43 = __ldaxr(v16);
      uint64_t v44 = v43 - 1;
    }

    while (__stlxr(v44, v16));
    if (gCheckGLErrors) {
      unsigned int v45 = v44 < 1;
    }
    else {
      unsigned int v45 = 1;
    }
    if (!v45) {
      handle_opengl_thread_conflict((const void **)v15);
    }
    goto LABEL_50;
  }

  do
    unsigned int v46 = __ldaxr(v16);
  while (__stlxr(v46 - 1, v16));
  [(id)DYGetGLGuestAppClient(v24) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, const void *))(*(void *)(v15 + 24) + 8104LL))( a1,  a2,  a3,  a4,  a5);
LABEL_50:
  if (v55[0]) {
    free(v55[0]);
  }
}

    uint64_t v33 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v33) {
      uint64_t v33 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v55, v34);
    }
    uint32x4_t v36 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v15 + 3404);
    if ((_DWORD)v36) {
      uint64_t v33 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v55, v36, v35);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v15, (uint64_t)v55);
    }
    uint32x4_t v37 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v15 + 3480),  (GPUTools::FB::Fbuf *)(v15 + 3520),  (GPUTools::FB *)v55);
    uint64_t v38 = *(unsigned int *)(v15 + 3404);
    if ((_DWORD)v38 && gBreakOnError)
    {
      uint64_t v51 = 3LL;
      uint64_t v52 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v27 & 2) == 0) {
        goto LABEL_37;
      }
      uint64_t v51 = 2LL;
      uint64_t v52 = 819LL;
    }

    breakpoint_break((uint64_t)v55, (volatile int *)v52, v51, v38, v15);
LABEL_37:
    uint64_t v39 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v37) defaultFbufStream];
    uint32x4_t v40 = (unsigned int *)((char *)v39 + 56);
    do
      uint32x4_t v41 = __ldaxr(v40);
    while (__stlxr(1u, v40));
    if (v41 == 1)
    {
      do
      {
        while (*v40 == 1)
          ;
        do
          uint32x4_t v42 = __ldaxr(v40);
        while (__stlxr(1u, v40));
      }

      while (v42 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v39, (GPUTools::FB::Fbuf *)v55, *(unsigned int *)v55[0], 1);
    atomic_store(0, v40);
    do
    {
      v43 = __ldaxr(v16);
      uint64_t v44 = v43 - 1;
    }

    while (__stlxr(v44, v16));
    if (gCheckGLErrors) {
      unsigned int v45 = v44 < 1;
    }
    else {
      unsigned int v45 = 1;
    }
    if (!v45) {
      handle_opengl_thread_conflict((const void **)v15);
    }
    goto LABEL_50;
  }

  do
    unsigned int v46 = __ldaxr(v16);
  while (__stlxr(v46 - 1, v16));
  [(id)DYGetGLGuestAppClient(v24) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, const void *))(*(void *)(v15 + 24) + 8112LL))( a1,  a2,  a3,  a4,  a5);
LABEL_50:
  if (v55[0]) {
    free(v55[0]);
  }
}

    uint64_t v30 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v25), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v30) {
      uint64_t v30 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v52, v31);
    }
    uint64_t v33 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v33) {
      uint64_t v30 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v52, v33, v32);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v30), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v52);
    }
    NSUInteger v34 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v52);
    uint64_t v35 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v35 && gBreakOnError)
    {
      unsigned int v48 = 3LL;
      v49 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v24 & 2) == 0) {
        goto LABEL_37;
      }
      unsigned int v48 = 2LL;
      v49 = 835LL;
    }

    breakpoint_break((uint64_t)v52, (volatile int *)v49, v48, v35, v13);
LABEL_37:
    uint32x4_t v36 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v34) defaultFbufStream];
    uint32x4_t v37 = (unsigned int *)((char *)v36 + 56);
    do
      uint64_t v38 = __ldaxr(v37);
    while (__stlxr(1u, v37));
    if (v38 == 1)
    {
      do
      {
        while (*v37 == 1)
          ;
        do
          uint64_t v39 = __ldaxr(v37);
        while (__stlxr(1u, v37));
      }

      while (v39 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v36, (GPUTools::FB::Fbuf *)v52, *(unsigned int *)v52[0], 1);
    atomic_store(0, v37);
    do
    {
      uint32x4_t v40 = __ldaxr(v14);
      uint32x4_t v41 = v40 - 1;
    }

    while (__stlxr(v41, v14));
    if (gCheckGLErrors) {
      uint32x4_t v42 = v41 < 1;
    }
    else {
      uint32x4_t v42 = 1;
    }
    if (!v42) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    goto LABEL_50;
  }

  do
    v43 = __ldaxr(v14);
  while (__stlxr(v43 - 1, v14));
  [(id)DYGetGLGuestAppClient(v18) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, const unsigned int *))(*(void *)(v13 + 24) + 8184LL))( a1,  a2,  a3,  a4);
LABEL_50:
  if (v52[0]) {
    free(v52[0]);
  }
}

    uint32x4_t v36 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v31), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v36) {
      uint32x4_t v36 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v60, v37);
    }
    uint64_t v39 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v19 + 3404);
    if ((_DWORD)v39) {
      uint32x4_t v36 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v60, v39, v38);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v36), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v19, (uint64_t)v60);
    }
    uint32x4_t v40 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v19 + 3480),  (GPUTools::FB::Fbuf *)(v19 + 3520),  (GPUTools::FB *)v60);
    uint32x4_t v41 = *(unsigned int *)(v19 + 3404);
    if ((_DWORD)v41 && gBreakOnError)
    {
      uint32x4_t v54 = 3LL;
      v55 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v30 & 2) == 0) {
        goto LABEL_37;
      }
      uint32x4_t v54 = 2LL;
      v55 = 1044LL;
    }

    breakpoint_break((uint64_t)v60, (volatile int *)v55, v54, v41, v19);
LABEL_37:
    uint32x4_t v42 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v40) defaultFbufStream];
    v43 = (unsigned int *)((char *)v42 + 56);
    do
      uint64_t v44 = __ldaxr(v43);
    while (__stlxr(1u, v43));
    if (v44 == 1)
    {
      do
      {
        while (*v43 == 1)
          ;
        do
          unsigned int v45 = __ldaxr(v43);
        while (__stlxr(1u, v43));
      }

      while (v45 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v42, (GPUTools::FB::Fbuf *)v60, *(unsigned int *)v60[0], 1);
    atomic_store(0, v43);
    do
    {
      unsigned int v46 = __ldaxr(v20);
      uint64_t v47 = v46 - 1;
    }

    while (__stlxr(v47, v20));
    if (gCheckGLErrors) {
      unsigned int v48 = v47 < 1;
    }
    else {
      unsigned int v48 = 1;
    }
    if (!v48) {
      handle_opengl_thread_conflict((const void **)v19);
    }
    goto LABEL_50;
  }

  do
    v49 = __ldaxr(v20);
  while (__stlxr(v49 - 1, v20));
  [(id)DYGetGLGuestAppClient(v24) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, const unsigned int *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 + 24) + 8224LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);
LABEL_50:
  if (v60[0]) {
    free(v60[0]);
  }
}

    NSUInteger v34 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v34) {
      NSUInteger v34 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v56, v35);
    }
    uint32x4_t v37 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v17 + 3404);
    if ((_DWORD)v37) {
      NSUInteger v34 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v56, v37, v36);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v34), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v17, (uint64_t)v56);
    }
    uint64_t v38 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v17 + 3480),  (GPUTools::FB::Fbuf *)(v17 + 3520),  (GPUTools::FB *)v56);
    uint64_t v39 = *(unsigned int *)(v17 + 3404);
    if ((_DWORD)v39 && gBreakOnError)
    {
      uint64_t v52 = 3LL;
      uint32x4_t v53 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v28 & 2) == 0) {
        goto LABEL_37;
      }
      uint64_t v52 = 2LL;
      uint32x4_t v53 = 1043LL;
    }

    breakpoint_break((uint64_t)v56, (volatile int *)v53, v52, v39, v17);
LABEL_37:
    uint32x4_t v40 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v38) defaultFbufStream];
    uint32x4_t v41 = (unsigned int *)((char *)v40 + 56);
    do
      uint32x4_t v42 = __ldaxr(v41);
    while (__stlxr(1u, v41));
    if (v42 == 1)
    {
      do
      {
        while (*v41 == 1)
          ;
        do
          v43 = __ldaxr(v41);
        while (__stlxr(1u, v41));
      }

      while (v43 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v40, (GPUTools::FB::Fbuf *)v56, *(unsigned int *)v56[0], 1);
    atomic_store(0, v41);
    do
    {
      uint64_t v44 = __ldaxr(v18);
      unsigned int v45 = v44 - 1;
    }

    while (__stlxr(v45, v18));
    if (gCheckGLErrors) {
      unsigned int v46 = v45 < 1;
    }
    else {
      unsigned int v46 = 1;
    }
    if (!v46) {
      handle_opengl_thread_conflict((const void **)v17);
    }
    goto LABEL_50;
  }

  do
    uint64_t v47 = __ldaxr(v18);
  while (__stlxr(v47 - 1, v18));
  [(id)DYGetGLGuestAppClient(v26) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t, int *))(*(void *)(v17 + 24) + 8232LL))( a1,  a2,  a3,  a4,  a5,  a6);
LABEL_50:
  if (v56[0]) {
    free(v56[0]);
  }
}

    NSUInteger v34 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v34) {
      NSUInteger v34 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v56, v35);
    }
    uint32x4_t v37 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v17 + 3404);
    if ((_DWORD)v37) {
      NSUInteger v34 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v56, v37, v36);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v34), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v17, (uint64_t)v56);
    }
    uint64_t v38 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v17 + 3480),  (GPUTools::FB::Fbuf *)(v17 + 3520),  (GPUTools::FB *)v56);
    uint64_t v39 = *(unsigned int *)(v17 + 3404);
    if ((_DWORD)v39 && gBreakOnError)
    {
      uint64_t v52 = 3LL;
      uint32x4_t v53 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v28 & 2) == 0) {
        goto LABEL_37;
      }
      uint64_t v52 = 2LL;
      uint32x4_t v53 = 1040LL;
    }

    breakpoint_break((uint64_t)v56, (volatile int *)v53, v52, v39, v17);
LABEL_37:
    uint32x4_t v40 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v38) defaultFbufStream];
    uint32x4_t v41 = (unsigned int *)((char *)v40 + 56);
    do
      uint32x4_t v42 = __ldaxr(v41);
    while (__stlxr(1u, v41));
    if (v42 == 1)
    {
      do
      {
        while (*v41 == 1)
          ;
        do
          v43 = __ldaxr(v41);
        while (__stlxr(1u, v41));
      }

      while (v43 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v40, (GPUTools::FB::Fbuf *)v56, *(unsigned int *)v56[0], 1);
    atomic_store(0, v41);
    wrapper_encode_texture_format_info((ContextInfo *)v17, a2, 0, 0LL);
    do
    {
      uint64_t v44 = __ldaxr(v18);
      unsigned int v45 = v44 - 1;
    }

    while (__stlxr(v45, v18));
    if (gCheckGLErrors) {
      unsigned int v46 = v45 < 1;
    }
    else {
      unsigned int v46 = 1;
    }
    if (!v46) {
      handle_opengl_thread_conflict((const void **)v17);
    }
    goto LABEL_50;
  }

  do
    uint64_t v47 = __ldaxr(v18);
  while (__stlxr(v47 - 1, v18));
  [(id)DYGetGLGuestAppClient(v26) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 + 24) + 8248LL))( a1,  a2,  a3,  a4,  a5,  a6);
LABEL_50:
  if (v56[0]) {
    free(v56[0]);
  }
}

    uint64_t v35 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v30), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v35) {
      uint64_t v35 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v58, v36);
    }
    uint64_t v38 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v19 + 3404);
    if ((_DWORD)v38) {
      uint64_t v35 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v58, v38, v37);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v35), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v19, (uint64_t)v58);
    }
    uint64_t v39 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v19 + 3480),  (GPUTools::FB::Fbuf *)(v19 + 3520),  (GPUTools::FB *)v58);
    uint32x4_t v40 = *(unsigned int *)(v19 + 3404);
    if ((_DWORD)v40 && gBreakOnError)
    {
      uint32x4_t v53 = 3LL;
      uint32x4_t v54 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v57 & 2) == 0) {
        goto LABEL_37;
      }
      uint32x4_t v53 = 2LL;
      uint32x4_t v54 = 1042LL;
    }

    breakpoint_break((uint64_t)v58, (volatile int *)v54, v53, v40, v19);
LABEL_37:
    uint32x4_t v41 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v39) defaultFbufStream];
    uint32x4_t v42 = (unsigned int *)((char *)v41 + 56);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(1u, v42));
    if (v43 == 1)
    {
      do
      {
        while (*v42 == 1)
          ;
        do
          uint64_t v44 = __ldaxr(v42);
        while (__stlxr(1u, v42));
      }

      while (v44 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v41, (GPUTools::FB::Fbuf *)v58, *(unsigned int *)v58[0], 1);
    atomic_store(0, v42);
    wrapper_encode_texture_format_info((ContextInfo *)v19, a2, 0, 0LL);
    do
    {
      unsigned int v45 = __ldaxr(v20);
      unsigned int v46 = v45 - 1;
    }

    while (__stlxr(v46, v20));
    if (gCheckGLErrors) {
      uint64_t v47 = v46 < 1;
    }
    else {
      uint64_t v47 = 1;
    }
    if (!v47) {
      handle_opengl_thread_conflict((const void **)v19);
    }
    goto LABEL_50;
  }

  do
    unsigned int v48 = __ldaxr(v20);
  while (__stlxr(v48 - 1, v20));
  [(id)DYGetGLGuestAppClient(v28) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 + 24)
                                                                                                  + 8256LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7);
LABEL_50:
  if (v58[0]) {
    free(v58[0]);
  }
}

_DWORD *wrapper_cache_buffer_binding(_DWORD *result, int a2, int a3)
{
  if (a2 > 35344)
  {
    if (a2 > 36661)
    {
      if (a2 == 36662)
      {
        result[512] = a3;
        return result;
      }

      if (a2 == 36663)
      {
        result[513] = a3;
        return result;
      }
    }

    else
    {
      if (a2 == 35345)
      {
        result[516] = a3;
        return result;
      }

      if (a2 == 35982)
      {
        result[515] = a3;
        return result;
      }
    }
  }

  else if (a2 > 35050)
  {
    if (a2 == 35051)
    {
      result[510] = a3;
      return result;
    }

    if (a2 == 35052)
    {
      result[511] = a3;
      return result;
    }
  }

  else
  {
    if (a2 == 34962)
    {
      result[508] = a3;
      return result;
    }

    if (a2 == 34963)
    {
      result[509] = a3;
      return result;
    }
  }

  unsigned int v3 = (ContextInfo *)dy_abort("unsupported or unknown buffer target: 0x%04X", a2);
  return (_DWORD *)wrapper_cache_get_bound_buffer(v3, v4);
}

uint64_t wrapper_cache_get_bound_buffer(ContextInfo *a1, int a2)
{
  if (a2 > 35344)
  {
    if (a2 > 36661)
    {
      if (a2 == 36662) {
        return *((unsigned int *)a1 + 512);
      }
      if (a2 == 36663) {
        return *((unsigned int *)a1 + 513);
      }
    }

    else
    {
      if (a2 == 35345) {
        return *((unsigned int *)a1 + 516);
      }
      if (a2 == 35982) {
        return *((unsigned int *)a1 + 515);
      }
    }
  }

  else if (a2 > 35050)
  {
    if (a2 == 35051) {
      return *((unsigned int *)a1 + 510);
    }
    if (a2 == 35052) {
      return *((unsigned int *)a1 + 511);
    }
  }

  else
  {
    if (a2 == 34962) {
      return *((unsigned int *)a1 + 508);
    }
    if (a2 == 34963) {
      return *((unsigned int *)a1 + 509);
    }
  }

  unsigned int v3 = (ContextInfo *)dy_abort("unsupported or unknown buffer target: 0x%04X", a2);
  return wrapper_cache_buffer_binding_delete(v3, v4, v5);
}

uint64_t wrapper_cache_buffer_binding_delete(ContextInfo *a1, volatile int *a2, const unsigned int *a3)
{
  int v4 = (int)a2;
  unsigned int v6 = (GPUTools::DYLockUtils *)(*((void *)a1 + 5) + 56LL);
  GPUTools::DYLockUtils::Lock(v6, a2);
  if (v4 >= 1)
  {
    uint64_t v8 = 0LL;
    unint64_t v9 = (int8x8_t *)*((void *)a1 + 5);
    do
    {
      unint64_t v10 = a3[v8];
      if ((_DWORD)v10 == *((_DWORD *)a1 + 508))
      {
        *((_DWORD *)a1 + 508) = 0;
        if ((_DWORD)v10 != *((_DWORD *)a1 + 509))
        {
LABEL_6:
          if ((_DWORD)v10 != *((_DWORD *)a1 + 510)) {
            goto LABEL_7;
          }
          goto LABEL_17;
        }
      }

      else if ((_DWORD)v10 != *((_DWORD *)a1 + 509))
      {
        goto LABEL_6;
      }

      *((_DWORD *)a1 + 509) = 0;
      if ((_DWORD)v10 != *((_DWORD *)a1 + 510))
      {
LABEL_7:
        if ((_DWORD)v10 != *((_DWORD *)a1 + 511)) {
          goto LABEL_8;
        }
        goto LABEL_18;
      }

LABEL_17:
      *((_DWORD *)a1 + 510) = 0;
      if ((_DWORD)v10 != *((_DWORD *)a1 + 511))
      {
LABEL_8:
        if ((_DWORD)v10 != *((_DWORD *)a1 + 512)) {
          goto LABEL_9;
        }
        goto LABEL_19;
      }

          uint32x4_t v28 = *v8;
          uint64_t v35 = v23;
          uint32x4_t v36 = v28;
          result = std::__introsort<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(GPUTools::NameTargetTuple const&,GPUTools::NameTargetTuple const&),GPUTools::array_iterator<GPUTools::NameTargetTuple>,false>( &v36,  &v35,  a3,  v9,  a5 & 1);
          a5 = 0;
          uint32x4_t v27 = v23 + 1;
          goto LABEL_18;
        }

        if (!v25)
        {
          *a2 = v23;
LABEL_19:
          --v9;
          continue;
        }

        return result;
    }
  }

LABEL_18:
      *((_DWORD *)a1 + 511) = 0;
      if ((_DWORD)v10 != *((_DWORD *)a1 + 512))
      {
LABEL_9:
        if ((_DWORD)v10 != *((_DWORD *)a1 + 513)) {
          goto LABEL_10;
        }
        goto LABEL_20;
      }

LABEL_19:
      *((_DWORD *)a1 + 512) = 0;
      if ((_DWORD)v10 != *((_DWORD *)a1 + 513))
      {
LABEL_10:
        if ((_DWORD)v10 != *((_DWORD *)a1 + 514)) {
          goto LABEL_11;
        }
        goto LABEL_21;
      }

      (*(void (**)(void, uint64_t, unsigned int *))(*((void *)this + 4) + 832LL))( *(void *)(*((void *)this + 3) + 16LL),  v27,  &v43);
LABEL_23:
      (*(void (**)(void, void, uint64_t *))(*((void *)this + 4) + 920LL))( *(void *)(*((void *)this + 3) + 16LL),  *v37,  &v42);
      uint32x4_t v28 = v46;
      if (v46
        && !(*(unsigned int (**)(void, void))(*((void *)this + 4) + 5160LL))( *(void *)(*((void *)this + 3) + 16LL),  v46))
      {
        unint64_t v29 = (GPUTools::FB::Fbuf *)(&stru_4C0 + 66);
      }

      else
      {
        unint64_t v29 = 0LL;
      }

      uint64_t v30 = (2 * v24);
      ContextHarvester::encodeWithError( this,  12LL,  v30 | 0x80,  v29,  "Ceui",  **((void **)this + 2),  34962LL,  v28);
      if (((v26 | v25 | v27) & 0x80000000) != 0)
      {
        if (((v27 | v26) & 0x80000000) != 0)
        {
          if ((int)(v27 & v26) < 0 != v31)
          {
            dy_abort( "unsupported vertex array parameter configuration: has_size=%d, has_type=%d, has_stride=%d",  v25 >= 0,  0,  0);
            __break(1u);
            return;
          }

          else {
            NSUInteger v34 = "Cit";
          }
          uint64_t v35 = &v44;
          ContextHarvester::encode(this, *v36, v30, v34, **((void **)this + 2), *v35, v42);
        }

        else
        {
          ContextHarvester::encode(this, *v36, v30, "Ceit", **((void **)this + 2), v44, v43, v42);
        }
      }

      else
      {
        ContextHarvester::encode(this, *v36, v30, "Cieit", **((void **)this + 2), v45, v44, v43, v42);
      }

      if (*v14 == 32888) {
        ContextHarvester::encode(this, 4294955014LL, 128LL, "C", **((void **)this + 2));
      }
      ContextHarvester::encodeCommand(this, 4294955016LL, 0, v32, v33);
      ++v17;
    }

    while (v19 != v17);
  }

LABEL_20:
      *((_DWORD *)a1 + 513) = 0;
      if ((_DWORD)v10 != *((_DWORD *)a1 + 514))
      {
LABEL_11:
        if ((_DWORD)v10 != *((_DWORD *)a1 + 515)) {
          goto LABEL_12;
        }
        goto LABEL_22;
      }

        if (BYTE12(v17) == 7)
        {
          unint64_t v10 = (void **)&kIOSurfaceTransferFunction_SMPTE_240M_1995;
        }

        else
        {
          if (BYTE12(v17) != 1) {
            goto LABEL_3;
          }
          unint64_t v10 = (void **)&kIOSurfaceTransferFunction_ITU_R_709_2;
        }

        unsigned int v6 = *v10;
        goto LABEL_25;
    }

    int v4 = *v7;
    int v5 = 0LL;
    uint64_t v8 = BYTE11(v17) - 1;
    if (v8 > 0xB) {
      goto LABEL_20;
    }
    goto LABEL_13;
  }

  int v4 = 0LL;
  int v5 = 0LL;
LABEL_3:
  unsigned int v6 = 0LL;
LABEL_25:
  IOSurfaceGetPixelFormat(a2);
  [v4 UTF8String];
  [v5 UTF8String];
  [v6 UTF8String];
  GPUTools::FB::Encode(a1 + 120, 4294955024LL, 0LL, (uint64_t)"CipuiuiSSS", v11, v12, v13, v14, (char)a2);
}

LABEL_21:
      *((_DWORD *)a1 + 514) = 0;
      if ((_DWORD)v10 != *((_DWORD *)a1 + 515))
      {
LABEL_12:
        if ((_DWORD)v10 != *((_DWORD *)a1 + 516)) {
          goto LABEL_13;
        }
        goto LABEL_23;
      }

  if (!a4) {
    return 0LL;
  }
  if (!a3) {
    __assert_rtn( "typename T::iterator find_info(ContextInfo *, T &, GLuint, BOOL) [T = std::unordered_map<unsigned int, std::shared _ptr<ShaderInfo>>]",  (const char *)&unk_1F0B16,  0,  "object != 0");
  }
  uint64_t v15 = (std::__shared_weak_count *)operator new(0x50uLL);
  v15->__shared_owners_ = 0LL;
  p_shared_owners = (unint64_t *)&v15->__shared_owners_;
  v15->__shared_weak_owners_ = 0LL;
  v15->__vftable = (std::__shared_weak_count_vtbl *)off_1F8C60;
  uint32x4_t v28 = ShaderInfo::ShaderInfo((ShaderInfo *)&v15[1], a1, a3);
  unint64_t v29 = v15;
  uint32x4_t v25 = a3;
  uint32x4_t v26 = v28;
  uint32x4_t v27 = v15;
  do
    uint64_t v17 = __ldxr(p_shared_owners);
  while (__stxr(v17 + 1, p_shared_owners));
  int8x8_t v11 = std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<ShaderInfo>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<ShaderInfo>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<ShaderInfo>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<ShaderInfo>>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,std::shared_ptr<ShaderInfo>>>( (uint64_t)a2,  &v25,  (uint64_t)&v25);
  uint64_t v18 = v27;
  if (v27)
  {
    unint64_t v19 = (unint64_t *)&v27->__shared_owners_;
    do
      uint64_t v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }

  unsigned int v21 = v29;
  if (v29)
  {
    int32x4_t v22 = (unint64_t *)&v29->__shared_owners_;
    do
      uint64_t v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }

  return v11;
}

  if (!a4) {
    return 0LL;
  }
  if (!a3) {
    __assert_rtn( "typename T::iterator find_info(ContextInfo *, T &, GLuint, BOOL) [T = std::unordered_map<unsigned int, std::shared _ptr<ProgramInfo>>]",  (const char *)&unk_1F0B16,  0,  "object != 0");
  }
  uint64_t v15 = (std::__shared_weak_count *)operator new(0x198uLL);
  v15->__shared_owners_ = 0LL;
  p_shared_owners = (unint64_t *)&v15->__shared_owners_;
  v15->__shared_weak_owners_ = 0LL;
  v15->__vftable = (std::__shared_weak_count_vtbl *)off_1F8CD0;
  uint32x4_t v28 = ProgramInfo::ProgramInfo((ProgramInfo *)&v15[1], a1, a3);
  unint64_t v29 = v15;
  uint32x4_t v25 = a3;
  uint32x4_t v26 = v28;
  uint32x4_t v27 = v15;
  do
    uint64_t v17 = __ldxr(p_shared_owners);
  while (__stxr(v17 + 1, p_shared_owners));
  int8x8_t v11 = std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<ProgramInfo>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<ProgramInfo>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<ProgramInfo>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<ProgramInfo>>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,std::shared_ptr<ProgramInfo>>>( (uint64_t)a2,  &v25,  (uint64_t)&v25);
  uint64_t v18 = v27;
  if (v27)
  {
    unint64_t v19 = (unint64_t *)&v27->__shared_owners_;
    do
      uint64_t v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }

  unsigned int v21 = v29;
  if (v29)
  {
    int32x4_t v22 = (unint64_t *)&v29->__shared_owners_;
    do
      uint64_t v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }

  return v11;
}

uint64_t wrapper_cache_buffer_target(uint64_t result, volatile int *a2)
{
  unsigned int v3 = a2;
  uint64_t v4 = result;
  if ((int)a2 > 35344)
  {
    if ((int)a2 > 36661)
    {
      if ((_DWORD)a2 == 36662)
      {
        unint64_t v5 = *(unsigned int *)(result + 2048);
        if (!(_DWORD)v5) {
          return result;
        }
        goto LABEL_27;
      }

      if ((_DWORD)a2 == 36663)
      {
        unint64_t v5 = *(unsigned int *)(result + 2052);
        if (!(_DWORD)v5) {
          return result;
        }
        goto LABEL_27;
      }
    }

    else
    {
      if ((_DWORD)a2 == 35345)
      {
        unint64_t v5 = *(unsigned int *)(result + 2064);
        if (!(_DWORD)v5) {
          return result;
        }
        goto LABEL_27;
      }

      if ((_DWORD)a2 == 35982)
      {
        unint64_t v5 = *(unsigned int *)(result + 2060);
        if (!(_DWORD)v5) {
          return result;
        }
        goto LABEL_27;
      }
    }

void wrapper_push_group_marker(ContextInfo *a1, size_t __n, const char *__s)
{
  if (__s)
  {
    if ((int)__n < 1)
    {
      size_t v5 = strlen(__s) + 1;
      if (v5 >= 0x7FFFFFFFFFFFFFF8LL) {
        std::string::__throw_length_error[abi:ne180100]();
      }
    }

    else
    {
      size_t v5 = __n;
    }

    if (v5 >= 0x17)
    {
      uint64_t v9 = (v5 & 0x7FFFFFFFFFFFFFF8LL) + 8;
      if ((v5 | 7) != 0x17) {
        uint64_t v9 = v5 | 7;
      }
      uint64_t v10 = v9 + 1;
      p_dst = (__int128 *)operator new(v9 + 1);
      *((void *)&__dst + 1) = v5;
      unint64_t v14 = v10 | 0x8000000000000000LL;
      *(void *)&__int128 __dst = p_dst;
    }

    else
    {
      HIBYTE(v14) = v5;
      p_dst = &__dst;
      if (!v5)
      {
        LOBYTE(__dst) = 0;
        unint64_t v7 = *((void *)a1 + 13);
        if (v7 < *((void *)a1 + 14))
        {
LABEL_8:
          __int128 v8 = __dst;
          *(void *)(v7 + 16) = v14;
          *(_OWORD *)unint64_t v7 = v8;
LABEL_9:
          *((void *)a1 + 13) = v7 + 24;
          return;
        }

        goto LABEL_15;
      }
    }

    memcpy(p_dst, __s, v5);
    *((_BYTE *)p_dst + v5) = 0;
    unint64_t v7 = *((void *)a1 + 13);
    if (v7 < *((void *)a1 + 14)) {
      goto LABEL_8;
    }
LABEL_15:
    uint8x8_t v11 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)a1 + 12, (uint64_t)&__dst);
    goto LABEL_16;
  }

  __int128 __dst = 0uLL;
  unint64_t v14 = 0LL;
  unint64_t v7 = *((void *)a1 + 13);
  if (v7 < *((void *)a1 + 14))
  {
    *(void *)unint64_t v7 = 0LL;
    *(void *)(v7 + 8) = 0LL;
    *(void *)(v7 + 16) = 0LL;
    goto LABEL_9;
  }

  uint8x8_t v11 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)a1 + 12, (uint64_t)&__dst);
LABEL_16:
  int v12 = SHIBYTE(v14);
  *((void *)a1 + 13) = v11;
  if (v12 < 0) {
    operator delete((void *)__dst);
  }
}

void sub_4038( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_pop_group_marker(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 104);
  if (v1 != *(void *)(a1 + 96))
  {
    unsigned int v3 = (void **)(v1 - 24);
    *(void *)(a1 + 104) = v3;
  }

uint64_t wrapper_cache_shader_source(ContextInfo *a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void))(*((void *)a1 + 4) + 5240LL))(*((void *)a1 + 2));
  if ((_DWORD)result)
  {
    unsigned int v6 = (GPUTools::DYLockUtils *)(*((void *)a1 + 5) + 144LL);
    GPUTools::DYLockUtils::Lock(v6, v5);
    uint64_t v8 = *((void *)find_info<std::unordered_map<unsigned int,std::shared_ptr<ShaderInfo>>>( a1,  (void *)(*((void *)a1 + 5) + 64LL),  a2,  1)
         + 3);
    uint64_t v9 = *(void ***)v8;
    if (!**(void **)v8 && *(_BYTE *)(v8 + 52))
    {
      (*(void (**)(void, uint64_t, uint64_t, size_t *))(*((void *)a1 + 4) + 5256LL))( *((void *)a1 + 2),  a2,  35720LL,  &__size);
      if ((_DWORD)__size)
      {
        StringBuffer::reserve(v9, (int)__size);
        (*(void (**)(void, void, void, void, void *))(*((void *)a1 + 4) + 5032LL))( *((void *)a1 + 2),  a2,  __size,  0LL,  *v9);
      }

      else
      {
        StringBuffer::reserve(v9, 1uLL);
        *(_BYTE *)int8x8_t *v9 = 0;
      }
    }

    return GPUTools::DYLockUtils::Unlock(v6, v7);
  }

  return result;
}

void sub_4188(_Unwind_Exception *a1, volatile int *a2)
{
}

char *find_info<std::unordered_map<unsigned int,std::shared_ptr<ShaderInfo>>>( ContextInfo *a1, void *a2, unsigned int a3, int a4)
{
  unint64_t v7 = a2[1];
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v9 = a3;
      if (v7 <= a3) {
        unint64_t v9 = a3 % v7;
      }
    }

    else
    {
      unint64_t v9 = ((_DWORD)v7 - 1) & a3;
    }

    uint64_t v10 = *(char ***)(*a2 + 8 * v9);
    if (v10)
    {
      uint8x8_t v11 = *v10;
      if (*v10)
      {
        if (v8.u32[0] < 2uLL)
        {
          unint64_t v12 = v7 - 1;
          while (1)
          {
            uint64_t v14 = *((void *)v11 + 1);
            if (v14 == a3)
            {
              if (*((_DWORD *)v11 + 4) == a3) {
                return v11;
              }
            }

            else if ((v14 & v12) != v9)
            {
              goto LABEL_21;
            }

            uint8x8_t v11 = *(char **)v11;
            if (!v11) {
              goto LABEL_21;
            }
          }
        }

        do
        {
          unint64_t v13 = *((void *)v11 + 1);
          if (v13 == a3)
          {
            if (*((_DWORD *)v11 + 4) == a3) {
              return v11;
            }
          }

          else
          {
            if (v13 >= v7) {
              v13 %= v7;
            }
            if (v13 != v9) {
              break;
            }
          }

          uint8x8_t v11 = *(char **)v11;
        }

        while (v11);
      }
    }
  }

void sub_43B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  std::pair<unsigned int const,std::shared_ptr<ShaderInfo>>::~pair((uint64_t)va);
  std::shared_ptr<ShaderInfo>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_43D4(_Unwind_Exception *a1)
{
}

uint64_t wrapper_cache_shader_pre_compile(ContextInfo *a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void))(*((void *)a1 + 4) + 5240LL))(*((void *)a1 + 2));
  if ((_DWORD)result)
  {
    uint64_t v6 = (GPUTools::DYLockUtils *)(*((void *)a1 + 5) + 144LL);
    GPUTools::DYLockUtils::Lock(v6, v5);
    uint8x8_t v8 = find_info<std::unordered_map<unsigned int,std::shared_ptr<ShaderInfo>>>( a1,  (void *)(*((void *)a1 + 5) + 64LL),  a2,  1);
    uint64_t v9 = *((void *)v8 + 3);
    uint64_t v10 = *(void *)(v9 + 24);
    if (!v10 || *(void *)(v10 + 8))
    {
      uint8x8_t v11 = *(void ***)(v9 + 16);
      (*(void (**)(void, uint64_t, uint64_t, size_t *))(*((void *)a1 + 4) + 5256LL))( *((void *)a1 + 2),  a2,  35716LL,  &__size);
      if ((_DWORD)__size)
      {
        StringBuffer::reserve(v11, (int)__size);
        (*(void (**)(void, uint64_t, void, void, void *))(*((void *)a1 + 4) + 5272LL))( *((void *)a1 + 2),  a2,  __size,  0LL,  *v11);
      }

      else
      {
        StringBuffer::reserve(v11, 1uLL);
        *(_BYTE *)char *v11 = 0;
      }

      unint64_t v12 = operator new(0x28uLL);
      v12[1] = 0LL;
      v12[2] = 0LL;
      *unint64_t v12 = off_1F8C98;
      StringBuffer::StringBuffer((StringBuffer *)(v12 + 3));
      uint64_t v13 = *((void *)v8 + 3);
      uint64_t v14 = *(std::__shared_weak_count **)(v13 + 24);
      *(void *)(v13 + 16) = v15;
      *(void *)(v13 + 24) = v12;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          unint64_t v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
    }

    return GPUTools::DYLockUtils::Unlock(v6, v7);
  }

  return result;
}

void sub_4548(_Unwind_Exception *a1)
{
}

uint64_t wrapper_cache_shader_post_compile(ContextInfo *a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void))(*((void *)a1 + 4) + 5240LL))(*((void *)a1 + 2));
  if ((_DWORD)result)
  {
    uint64_t v6 = (GPUTools::DYLockUtils *)(*((void *)a1 + 5) + 144LL);
    GPUTools::DYLockUtils::Lock(v6, v5);
    unint64_t v7 = find_info<std::unordered_map<unsigned int,std::shared_ptr<ShaderInfo>>>( a1,  (void *)(*((void *)a1 + 5) + 64LL),  a2,  1);
    uint64_t v8 = *((void *)v7 + 3);
    uint64_t v9 = *(void *)(v8 + 8);
    if (v9 && !*(void *)(v9 + 8))
    {
      StringBuffer::reserve(*(void ***)v8, 0LL);
    }

    else if (**(void **)v8)
    {
      uint64_t v10 = operator new(0x28uLL);
      v10[1] = 0LL;
      v10[2] = 0LL;
      *uint64_t v10 = off_1F8C98;
      StringBuffer::StringBuffer((StringBuffer *)(v10 + 3));
      uint8x8_t v11 = (void *)*((void *)v7 + 3);
      unint64_t v12 = (std::__shared_weak_count *)v11[1];
      void *v11 = v13;
      v11[1] = v10;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          unint64_t v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }

    *(_BYTE *)(*((void *)v7 + 3) + 52LL) = 1;
    (*(void (**)(void, uint64_t, uint64_t, int *))(*((void *)a1 + 4) + 5256LL))( *((void *)a1 + 2),  a2,  35713LL,  &v18);
    if (gCheckGLErrors) {
      BOOL v17 = v18 == 0;
    }
    else {
      BOOL v17 = 0;
    }
    if (v17) {
      handle_compile_shader_failure((uint64_t)a1, a2);
    }
    return GPUTools::DYLockUtils::Unlock(v6, v16);
  }

  return result;
}

void sub_46E0(_Unwind_Exception *a1, volatile int *a2)
{
}

uint64_t wrapper_cache_shader_label(ContextInfo *a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void))(*((void *)a1 + 4) + 5240LL))(*((void *)a1 + 2));
  if ((_DWORD)result)
  {
    uint64_t v6 = (GPUTools::DYLockUtils *)(*((void *)a1 + 5) + 144LL);
    GPUTools::DYLockUtils::Lock(v6, v5);
    uint64_t v8 = find_info<std::unordered_map<unsigned int,std::shared_ptr<ShaderInfo>>>( a1,  (void *)(*((void *)a1 + 5) + 64LL),  a2,  1);
    uint64_t v9 = *((void *)v8 + 3);
    uint64_t v10 = *(void *)(v9 + 40);
    if (!v10 || *(void *)(v10 + 8))
    {
      uint8x8_t v11 = *(void ***)(v9 + 32);
      (*(void (**)(void, uint64_t, uint64_t, void, unsigned int *, void))(*((void *)a1 + 4) + 6520LL))( *((void *)a1 + 2),  35656LL,  a2,  0LL,  &v19,  0LL);
      size_t v12 = (int)v19++ + 1LL;
      StringBuffer::reserve(v11, v12);
      (*(void (**)(void, uint64_t, uint64_t, void, void, void *))(*((void *)a1 + 4) + 6520LL))( *((void *)a1 + 2),  35656LL,  a2,  v19,  0LL,  *v11);
      uint64_t v13 = operator new(0x28uLL);
      v13[1] = 0LL;
      v13[2] = 0LL;
      void *v13 = off_1F8C98;
      StringBuffer::StringBuffer((StringBuffer *)(v13 + 3));
      uint64_t v14 = *((void *)v8 + 3);
      unint64_t v15 = *(std::__shared_weak_count **)(v14 + 40);
      *(void *)(v14 + 32) = v16;
      *(void *)(v14 + 40) = v13;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          unint64_t v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
    }

    return GPUTools::DYLockUtils::Unlock(v6, v7);
  }

  return result;
}

void sub_4870(_Unwind_Exception *a1)
{
}

id wrapper_cache_shader_post_attach(ContextInfo *a1, unsigned int a2, unsigned int a3)
{
  id result = [(id)DYGetGLGuestAppClient(a1) traceMode];
  if ((_DWORD)result != 6)
  {
    uint64_t v8 = (GPUTools::DYLockUtils *)(*((void *)a1 + 5) + 144LL);
    GPUTools::DYLockUtils::Lock(v8, v7);
    find_info<std::unordered_map<unsigned int,std::shared_ptr<ProgramInfo>>>( a1,  (void *)(*((void *)a1 + 5) + 104LL),  a2,  1);
    uint64_t v9 = find_info<std::unordered_map<unsigned int,std::shared_ptr<ShaderInfo>>>( a1,  (void *)(*((void *)a1 + 5) + 64LL),  a3,  1);
    ++*(_DWORD *)(*((void *)v9 + 3) + 48LL);
    return (id)GPUTools::DYLockUtils::Unlock(v8, v10);
  }

  return result;
}

void sub_4940(_Unwind_Exception *a1, volatile int *a2)
{
}

char *find_info<std::unordered_map<unsigned int,std::shared_ptr<ProgramInfo>>>( ContextInfo *a1, void *a2, unsigned int a3, int a4)
{
  unint64_t v7 = a2[1];
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v9 = a3;
      if (v7 <= a3) {
        unint64_t v9 = a3 % v7;
      }
    }

    else
    {
      unint64_t v9 = ((_DWORD)v7 - 1) & a3;
    }

    uint64_t v10 = *(char ***)(*a2 + 8 * v9);
    if (v10)
    {
      uint8x8_t v11 = *v10;
      if (*v10)
      {
        if (v8.u32[0] < 2uLL)
        {
          unint64_t v12 = v7 - 1;
          while (1)
          {
            uint64_t v14 = *((void *)v11 + 1);
            if (v14 == a3)
            {
              if (*((_DWORD *)v11 + 4) == a3) {
                return v11;
              }
            }

            else if ((v14 & v12) != v9)
            {
              goto LABEL_21;
            }

            uint8x8_t v11 = *(char **)v11;
            if (!v11) {
              goto LABEL_21;
            }
          }
        }

        do
        {
          unint64_t v13 = *((void *)v11 + 1);
          if (v13 == a3)
          {
            if (*((_DWORD *)v11 + 4) == a3) {
              return v11;
            }
          }

          else
          {
            if (v13 >= v7) {
              v13 %= v7;
            }
            if (v13 != v9) {
              break;
            }
          }

          uint8x8_t v11 = *(char **)v11;
        }

        while (v11);
      }
    }
  }

void sub_4B6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  std::pair<unsigned int const,std::shared_ptr<ShaderInfo>>::~pair((uint64_t)va);
  std::shared_ptr<ShaderInfo>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_4B88(_Unwind_Exception *a1)
{
}

uint64_t wrapper_cache_shader_pre_detach(ContextInfo *a1, volatile int *a2, uint64_t a3)
{
  uint64_t v6 = (GPUTools::DYLockUtils *)(*((void *)a1 + 5) + 144LL);
  GPUTools::DYLockUtils::Lock(v6, a2);
  uint8x8_t v8 = (void *)*((void *)a1 + 5);
  unint64_t v9 = v8[9];
  if (!v9) {
    goto LABEL_21;
  }
  uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    unint64_t v11 = a3;
  }

  else
  {
    unint64_t v11 = ((_DWORD)v9 - 1) & a3;
  }

  unint64_t v12 = *(uint64_t ***)(v8[8] + 8 * v11);
  if (v12)
  {
    unint64_t v13 = *v12;
    if (*v12)
    {
      if (v10.u32[0] < 2uLL)
      {
        unint64_t v14 = v9 - 1;
        while (1)
        {
          uint64_t v16 = v13[1];
          if (v16 == a3)
          {
            if (*((_DWORD *)v13 + 4) == (_DWORD)a3) {
              goto LABEL_22;
            }
          }

          else if ((v16 & v14) != v11)
          {
            goto LABEL_21;
          }

          unint64_t v13 = (uint64_t *)*v13;
          if (!v13) {
            goto LABEL_22;
          }
        }
      }

      do
      {
        unint64_t v15 = v13[1];
        if (v15 == a3)
        {
          if (*((_DWORD *)v13 + 4) == (_DWORD)a3) {
            break;
          }
        }

        else
        {
          if (v15 >= v9) {
            v15 %= v9;
          }
          if (v15 != v11) {
            goto LABEL_21;
          }
        }

        unint64_t v13 = (uint64_t *)*v13;
      }

      while (v13);
    }
  }

  else
  {
LABEL_21:
    unint64_t v13 = 0LL;
  }

void sub_4E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void remove_shader_info_cache(void *a1, void **a2, uint64_t a3)
{
  uint64_t v6 = (uint64_t)*a2;
  uint64_t v7 = (*a2)[3];
  uint64_t v8 = *(void *)(v7 + 8);
  if (v8 && !*(void *)(v8 + 8) || (unint64_t v9 = *(void ***)v7, **(void **)v7))
  {
    uint64_t v10 = *(void *)(v7 + 24);
    if (!v10) {
      goto LABEL_9;
    }
  }

  else
  {
    (*(void (**)(void, uint64_t, uint64_t, void **))(a1[4] + 5256LL))(a1[2], a3, 35720LL, __p);
    if (LODWORD(__p[0]))
    {
      StringBuffer::reserve(v9, SLODWORD(__p[0]));
      (*(void (**)(void, void, void, void, void *))(a1[4] + 5032LL))( a1[2],  a3,  LODWORD(__p[0]),  0LL,  *v9);
      uint64_t v7 = *(void *)(v6 + 24);
      uint64_t v10 = *(void *)(v7 + 24);
      if (!v10) {
        goto LABEL_9;
      }
    }

    else
    {
      StringBuffer::reserve(v9, 1uLL);
      *(_BYTE *)char *v9 = 0;
      uint64_t v7 = *(void *)(v6 + 24);
      uint64_t v10 = *(void *)(v7 + 24);
      if (!v10) {
        goto LABEL_9;
      }
    }
  }

  if (!*(void *)(v10 + 8)) {
    goto LABEL_10;
  }
LABEL_9:
  unint64_t v11 = *(void ***)(v7 + 16);
  if (*v11)
  {
LABEL_10:
    uint64_t v12 = *(void *)(v7 + 40);
    if (!v12) {
      goto LABEL_15;
    }
LABEL_14:
    if (!*(void *)(v12 + 8)) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }

  (*(void (**)(void, uint64_t, uint64_t, void **))(a1[4] + 5256LL))(a1[2], a3, 35716LL, __p);
  if (!LODWORD(__p[0]))
  {
    StringBuffer::reserve(v11, 1uLL);
    *(_BYTE *)char *v11 = 0;
    uint64_t v7 = *(void *)(v6 + 24);
    uint64_t v12 = *(void *)(v7 + 40);
    if (!v12) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }

  StringBuffer::reserve(v11, SLODWORD(__p[0]));
  (*(void (**)(void, uint64_t, void, void, void *))(a1[4] + 5272LL))( a1[2],  a3,  LODWORD(__p[0]),  0LL,  *v11);
  uint64_t v7 = *(void *)(v6 + 24);
  uint64_t v12 = *(void *)(v7 + 40);
  if (v12) {
    goto LABEL_14;
  }
LABEL_15:
  unint64_t v13 = *(void ***)(v7 + 32);
  (*(void (**)(void, uint64_t, uint64_t, void, void **, void))(a1[4] + 6520LL))( a1[2],  35656LL,  a3,  0LL,  __p,  0LL);
  size_t v14 = SLODWORD(__p[0]) + 1LL;
  ++LODWORD(__p[0]);
  StringBuffer::reserve(v13, v14);
  (*(void (**)(void, uint64_t, uint64_t, void, void, void *))(a1[4] + 6520LL))( a1[2],  35656LL,  a3,  LODWORD(__p[0]),  0LL,  *v13);
LABEL_16:
  std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<ShaderInfo>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<ShaderInfo>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<ShaderInfo>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<ShaderInfo>>>>::remove( (void *)(a1[5] + 64LL),  *a2,  (uint64_t)__p);
  unint64_t v15 = __p[0];
  __p[0] = 0LL;
  if (v15)
  {
    if (v20)
    {
      uint64_t v16 = (std::__shared_weak_count *)v15[4];
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          unint64_t v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
    }

    operator delete(v15);
  }

uint64_t wrapper_cache_shader_delete(ContextInfo *a1, volatile int *a2)
{
  uint64_t v4 = (GPUTools::DYLockUtils *)(*((void *)a1 + 5) + 144LL);
  GPUTools::DYLockUtils::Lock(v4, a2);
  uint64_t v6 = *((void *)a1 + 5);
  unint64_t v7 = *(void *)(v6 + 72);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v9 = a2;
    }

    else
    {
      unint64_t v9 = ((_DWORD)v7 - 1) & a2;
    }

    uint64_t v10 = *(uint64_t ***)(*(void *)(v6 + 64) + 8 * v9);
    if (v10)
    {
      unint64_t v11 = *v10;
      if (v11)
      {
        if (v8.u32[0] < 2uLL)
        {
          unint64_t v12 = v7 - 1;
          while (1)
          {
            uint64_t v14 = v11[1];
            if (v14 == a2)
            {
              if (*((_DWORD *)v11 + 4) == (_DWORD)a2) {
                goto LABEL_22;
              }
            }

            else if ((v14 & v12) != v9)
            {
              return GPUTools::DYLockUtils::Unlock(v4, v5);
            }

            unint64_t v11 = (uint64_t *)*v11;
            if (!v11) {
              return GPUTools::DYLockUtils::Unlock(v4, v5);
            }
          }
        }

        do
        {
          unint64_t v13 = v11[1];
          if (v13 == a2)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)a2)
            {
LABEL_22:
              uint64_t v16 = v11;
              if (!*(_DWORD *)(v11[3] + 48)) {
                remove_shader_info_cache(a1, &v16, (uint64_t)a2);
              }
              return GPUTools::DYLockUtils::Unlock(v4, v5);
            }
          }

          else
          {
            if (v13 >= v7) {
              v13 %= v7;
            }
            if (v13 != v9) {
              return GPUTools::DYLockUtils::Unlock(v4, v5);
            }
          }

          unint64_t v11 = (uint64_t *)*v11;
        }

        while (v11);
      }
    }
  }

  return GPUTools::DYLockUtils::Unlock(v4, v5);
}

void sub_523C(_Unwind_Exception *a1, volatile int *a2)
{
}

id wrapper_cache_program_use(ContextInfo *a1, unsigned int a2)
{
  id result = [(id)DYGetGLGuestAppClient(a1) traceMode];
  if ((_DWORD)result != 6)
  {
    uint64_t v6 = (GPUTools::DYLockUtils *)(*((void *)a1 + 5) + 144LL);
    GPUTools::DYLockUtils::Lock(v6, v5);
    uint64_t v7 = *((unsigned int *)a1 + 517);
    if ((_DWORD)v7 != a2)
    {
      detach_program(a1, v7);
      *((_DWORD *)a1 + 517) = a2;
      if (a2)
      {
        uint8x8_t v8 = find_info<std::unordered_map<unsigned int,std::shared_ptr<ProgramInfo>>>( a1,  (void *)(*((void *)a1 + 5) + 104LL),  a2,  1);
        ++*(_DWORD *)(*((void *)v8 + 3) + 372LL);
      }
    }

    return (id)GPUTools::DYLockUtils::Unlock(v6, (volatile int *)v7);
  }

  return result;
}

void sub_52EC(_Unwind_Exception *a1, volatile int *a2)
{
}

void detach_program(ContextInfo *a1, uint64_t a2)
{
  if ([(id)DYGetGLGuestAppClient(a1) traceMode] != 6)
  {
    uint64_t v4 = *((void *)a1 + 5);
    unint64_t v5 = *(void *)(v4 + 112);
    if (v5)
    {
      uint64_t v6 = (void *)(v4 + 104);
      uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
      v7.i16[0] = vaddlv_u8(v7);
      if (v7.u32[0] > 1uLL)
      {
        unint64_t v8 = a2;
      }

      else
      {
        unint64_t v8 = ((_DWORD)v5 - 1) & a2;
      }

      unint64_t v9 = *(uint64_t ***)(*v6 + 8 * v8);
      if (v9)
      {
        uint64_t v10 = *v9;
        if (*v9)
        {
          if (v7.u32[0] < 2uLL)
          {
            unint64_t v11 = v5 - 1;
            while (1)
            {
              uint64_t v13 = v10[1];
              if (v13 == a2)
              {
                if (*((_DWORD *)v10 + 4) == (_DWORD)a2) {
                  goto LABEL_23;
                }
              }

              else if ((v13 & v11) != v8)
              {
                return;
              }

              uint64_t v10 = (uint64_t *)*v10;
              if (!v10) {
                return;
              }
            }
          }

          do
          {
            unint64_t v12 = v10[1];
            if (v12 == a2)
            {
              if (*((_DWORD *)v10 + 4) == (_DWORD)a2)
              {
LABEL_23:
                --*(_DWORD *)(v10[3] + 372);
                if ((*(unsigned int (**)(void, uint64_t))(*((void *)a1 + 4) + 5248LL))( *((void *)a1 + 2),  a2))
                {
                  (*(void (**)(void, uint64_t, uint64_t, int *))(*((void *)a1 + 4) + 5264LL))( *((void *)a1 + 2),  a2,  35714LL,  &v20);
                  if (!v20 && !*(_DWORD *)(v10[3] + 372))
                  {
                    ProgramPipelineInfo::ProgramPipelineInfo((ProgramPipelineInfo *)__p);
                    ProgramPipelineInfo::operator=(v10[3] + 144, (uint64_t)__p);
                    ProgramPipelineInfo::~ProgramPipelineInfo((ProgramPipelineInfo *)__p);
                  }
                }

                else
                {
                  std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<ShaderInfo>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<ShaderInfo>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<ShaderInfo>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<ShaderInfo>>>>::remove( v6,  v10,  (uint64_t)__p);
                  uint64_t v14 = __p[0];
                  __p[0] = 0LL;
                  if (v14)
                  {
                    if (v19)
                    {
                      unint64_t v15 = (std::__shared_weak_count *)v14[4];
                      if (v15)
                      {
                        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
                        do
                          unint64_t v17 = __ldaxr(p_shared_owners);
                        while (__stlxr(v17 - 1, p_shared_owners));
                        if (!v17)
                        {
                          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
                          std::__shared_weak_count::__release_weak(v15);
                        }
                      }
                    }

                    operator delete(v14);
                  }
                }

                return;
              }
            }

            else
            {
              if (v12 >= v5) {
                v12 %= v5;
              }
              if (v12 != v8) {
                return;
              }
            }

            uint64_t v10 = (uint64_t *)*v10;
          }

          while (v10);
        }
      }
    }
  }

uint64_t wrapper_cache_program_delete(ContextInfo *a1, volatile int *a2)
{
  unsigned int v2 = a2;
  uint64_t v4 = (GPUTools::DYLockUtils *)(*((void *)a1 + 5) + 144LL);
  GPUTools::DYLockUtils::Lock(v4, a2);
  uint64_t v6 = *((void *)a1 + 5);
  unint64_t v7 = *(void *)(v6 + 112);
  if (v7)
  {
    unint64_t v8 = (void *)(v6 + 104);
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v10 = v2;
      if (v7 <= v2) {
        unint64_t v10 = v2 % v7;
      }
    }

    else
    {
      unint64_t v10 = ((_DWORD)v7 - 1) & v2;
    }

    unint64_t v11 = *(uint64_t ***)(*v8 + 8 * v10);
    if (v11)
    {
      unint64_t v5 = *v11;
      if (*v11)
      {
        if (v9.u32[0] < 2uLL)
        {
          unint64_t v12 = v7 - 1;
          while (1)
          {
            uint64_t v14 = v5[1];
            if (v14 == v2)
            {
              if (*((_DWORD *)v5 + 4) == v2) {
                goto LABEL_22;
              }
            }

            else if ((v14 & v12) != v10)
            {
              return GPUTools::DYLockUtils::Unlock(v4, (volatile int *)v5);
            }

            unint64_t v5 = (uint64_t *)*v5;
            if (!v5) {
              return GPUTools::DYLockUtils::Unlock(v4, (volatile int *)v5);
            }
          }
        }

        do
        {
          unint64_t v13 = v5[1];
          if (v13 == v2)
          {
            if (*((_DWORD *)v5 + 4) == v2)
            {
LABEL_22:
              if (!*(_DWORD *)(v5[3] + 372))
              {
                std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<ShaderInfo>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<ShaderInfo>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<ShaderInfo>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<ShaderInfo>>>>::remove( v8,  v5,  (uint64_t)&__p);
                unint64_t v15 = __p;
                __p = 0LL;
                if (v15)
                {
                  if (v21)
                  {
                    uint64_t v16 = (std::__shared_weak_count *)v15[4];
                    if (v16)
                    {
                      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
                      do
                        unint64_t v18 = __ldaxr(p_shared_owners);
                      while (__stlxr(v18 - 1, p_shared_owners));
                      if (!v18)
                      {
                        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
                        std::__shared_weak_count::__release_weak(v16);
                      }
                    }
                  }

                  operator delete(v15);
                }
              }

              return GPUTools::DYLockUtils::Unlock(v4, (volatile int *)v5);
            }
          }

          else
          {
            if (v13 >= v7) {
              v13 %= v7;
            }
            if (v13 != v10) {
              return GPUTools::DYLockUtils::Unlock(v4, (volatile int *)v5);
            }
          }

          unint64_t v5 = (uint64_t *)*v5;
        }

        while (v5);
      }
    }
  }

  return GPUTools::DYLockUtils::Unlock(v4, (volatile int *)v5);
}

uint64_t wrapper_cache_program_xfb_varyings(ContextInfo *a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void))(*((void *)a1 + 4) + 5248LL))(*((void *)a1 + 2));
  if ((_DWORD)result)
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, int *))(*((void *)a1 + 4) + 5264LL))( *((void *)a1 + 2),  a2,  35714LL,  &v9);
    if (v9)
    {
      uint64_t v6 = (GPUTools::DYLockUtils *)(*((void *)a1 + 5) + 144LL);
      GPUTools::DYLockUtils::Lock(v6, v5);
      uint64_t v8 = *((void *)find_info<std::unordered_map<unsigned int,std::shared_ptr<ProgramInfo>>>( a1,  (void *)(*((void *)a1 + 5) + 104LL),  a2,  1)
           + 3);
      if (!*(_BYTE *)(v8 + 320)) {
        ProgramXfb::update((ProgramXfb *)(v8 + 288), a1, a2);
      }
      return GPUTools::DYLockUtils::Unlock(v6, v7);
    }
  }

  return result;
}

void sub_5764(_Unwind_Exception *a1, volatile int *a2)
{
}

uint64_t wrapper_cache_program_pre_link(ContextInfo *a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void))(*((void *)a1 + 4) + 5248LL))(*((void *)a1 + 2));
  if ((_DWORD)result)
  {
    uint64_t v6 = (GPUTools::DYLockUtils *)(*((void *)a1 + 5) + 144LL);
    GPUTools::DYLockUtils::Lock(v6, v5);
    uint64_t v8 = find_info<std::unordered_map<unsigned int,std::shared_ptr<ProgramInfo>>>( a1,  (void *)(*((void *)a1 + 5) + 104LL),  a2,  1);
    uint64_t v9 = *((void *)v8 + 3);
    uint64_t v10 = *(void *)(v9 + 128);
    if (!v10 || *(void *)(v10 + 8))
    {
      unint64_t v11 = *(void ***)(v9 + 120);
      (*(void (**)(void, uint64_t, uint64_t, size_t *))(*((void *)a1 + 4) + 5264LL))( *((void *)a1 + 2),  a2,  35716LL,  &__size);
      if ((_DWORD)__size)
      {
        StringBuffer::reserve(v11, (int)__size);
        (*(void (**)(void, uint64_t, void, void, void *))(*((void *)a1 + 4) + 5280LL))( *((void *)a1 + 2),  a2,  __size,  0LL,  *v11);
      }

      else
      {
        StringBuffer::reserve(v11, 1uLL);
        *(_BYTE *)uint64_t *v11 = 0;
      }

      unint64_t v12 = operator new(0x28uLL);
      v12[1] = 0LL;
      v12[2] = 0LL;
      *unint64_t v12 = off_1F8C98;
      StringBuffer::StringBuffer((StringBuffer *)(v12 + 3));
      uint64_t v13 = *((void *)v8 + 3);
      uint64_t v14 = *(std::__shared_weak_count **)(v13 + 128);
      *(void *)(v13 + 120) = v15;
      *(void *)(v13 + 128) = v12;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          unint64_t v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
    }

    return GPUTools::DYLockUtils::Unlock(v6, v7);
  }

  return result;
}

void sub_58E0(_Unwind_Exception *a1)
{
}

id wrapper_cache_program_link(int8x8_t **a1, uint64_t a2, int a3)
{
  id result = [(id)DYGetGLGuestAppClient(a1) traceMode];
  if ((_DWORD)result != 6)
  {
    uint32x4_t v36 = (GPUTools::DYLockUtils *)&a1[5][18];
    GPUTools::DYLockUtils::Lock(v36, v7);
    uint64_t v8 = find_info<std::unordered_map<unsigned int,std::shared_ptr<ProgramInfo>>>((ContextInfo *)a1, &a1[5][13], a2, 1);
    uint64_t v9 = (uint64_t *)*((void *)v8 + 3);
    std::vector<ProgramShaderInfo>::__clear[abi:ne180100](v9);
    std::vector<ProgramShaderInfo>::__clear[abi:ne180100](v9 + 3);
    std::vector<ProgramShaderInfo>::__clear[abi:ne180100](v9 + 6);
    std::vector<ProgramShaderInfo>::__clear[abi:ne180100](v9 + 9);
    std::vector<ProgramShaderInfo>::__clear[abi:ne180100](v9 + 12);
    *(_BYTE *)(*((void *)v8 + 3) + 377LL) = 1;
    uint64_t v10 = a1[5];
    ((void (*)(int8x8_t *, uint64_t, uint64_t, unsigned int *))a1[4][658])(a1[2], a2, 35717LL, &v44);
    ObjectNameArray::ObjectNameArray((ObjectNameArray *)v42, v44);
    unsigned int v35 = a2;
    ((void (*)(int8x8_t *, uint64_t, void, void, uint64_t))a1[4][759])(a1[2], a2, v44, 0LL, v43);
    if (v44)
    {
      for (unint64_t i = 0LL; i < v44; ++i)
      {
        unint64_t v12 = *(unsigned int *)(v43 + 4 * i);
        int8x8_t v13 = v10[9];
        if (!*(void *)&v13) {
          goto LABEL_25;
        }
        uint8x8_t v14 = (uint8x8_t)vcnt_s8(v13);
        v14.i16[0] = vaddlv_u8(v14);
        if (v14.u32[0] > 1uLL)
        {
          unint64_t v15 = *(unsigned int *)(v43 + 4 * i);
          if (*(void *)&v13 <= v12) {
            unint64_t v15 = v12 % *(void *)&v13;
          }
        }

        else
        {
          unint64_t v15 = (v13.i32[0] - 1) & v12;
        }

        uint64_t v16 = *(uint64_t ***)(*(void *)&v10[8] + 8 * v15);
        if (v16)
        {
          unint64_t v17 = *v16;
          if (*v16)
          {
            if (v14.u32[0] < 2uLL)
            {
              uint64_t v18 = *(void *)&v13 - 1LL;
              while (1)
              {
                uint64_t v20 = v17[1];
                if (v20 == v12)
                {
                  if (*((_DWORD *)v17 + 4) == (_DWORD)v12) {
                    goto LABEL_26;
                  }
                }

                else if ((v20 & v18) != v15)
                {
                  goto LABEL_25;
                }

                unint64_t v17 = (uint64_t *)*v17;
                if (!v17) {
                  goto LABEL_26;
                }
              }
            }

            do
            {
              unint64_t v19 = v17[1];
              if (v19 == v12)
              {
                if (*((_DWORD *)v17 + 4) == (_DWORD)v12) {
                  break;
                }
              }

              else
              {
                if (v19 >= *(void *)&v13) {
                  v19 %= *(void *)&v13;
                }
                if (v19 != v15) {
                  goto LABEL_25;
                }
              }

              unint64_t v17 = (uint64_t *)*v17;
            }

            while (v17);
          }
        }

        else
        {
LABEL_25:
          unint64_t v17 = 0LL;
        }

void sub_5DA0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, GPUTools::DYLockUtils *a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
}

void ProgramShaderInfo::~ProgramShaderInfo(ProgramShaderInfo *this)
{
  unsigned int v2 = (std::__shared_weak_count *)*((void *)this + 6);
  if (!v2) {
    goto LABEL_5;
  }
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    unint64_t v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    unint64_t v5 = (std::__shared_weak_count *)*((void *)this + 4);
    if (!v5) {
      goto LABEL_11;
    }
  }

  else
  {
LABEL_5:
    unint64_t v5 = (std::__shared_weak_count *)*((void *)this + 4);
    if (!v5) {
      goto LABEL_11;
    }
  }

  uint64_t v6 = (unint64_t *)&v5->__shared_owners_;
  do
    unint64_t v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }

LABEL_11:
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v8)
  {
    uint64_t v9 = (unint64_t *)&v8->__shared_owners_;
    do
      unint64_t v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v8)
  {
    uint64_t v9 = (unint64_t *)&v8->__shared_owners_;
    do
      unint64_t v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  uint64_t v8 = (std::__shared_weak_count *)a1[4];
  if (v8)
  {
    uint64_t v9 = (unint64_t *)&v8->__shared_owners_;
    do
      unint64_t v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  (*(void (**)(void, void, void))(v4 + 2680))( *(void *)(a1 + 16),  (int)((double)(*(_DWORD *)(a1 + 3368)
                               - (int)(kDYOverrideDefaultViewport[0] * (double)*(int *)(a1 + 3368)))
                      * 0.5),
    (int)((double)(*(_DWORD *)(a1 + 3372)
  if ((v2 & 0x200000) != 0) {
    goto LABEL_12;
  }
LABEL_5:
  if ((v2 & 0x20) == 0) {
    return;
  }
LABEL_15:
  unint64_t v7 = a1 + 4860;
  uint64_t v8 = *(void **)(a1 + 40);
  GPUTools::DYLockUtils::Lock((GPUTools::DYLockUtils *)(v8 + 37), a2);
  *(void *)(a1 + 3648) = *(void *)(a1 + 3640);
  uint64_t v74 = (std::vector<unsigned int> *)(v8 + 34);
  int v71 = v8;
  if (v8[34] != v8[35]) {
    goto LABEL_40;
  }
  unint64_t v10 = *(unsigned int **)(a1 + 3408);
  uint64_t v70 = *(unsigned int **)(a1 + 3416);
  if (v10 == v70) {
    goto LABEL_40;
  }
  do
  {
    unsigned int v72 = v10;
    unint64_t v11 = *v10;
    unint64_t v12 = *(void *)(a1 + 32);
    uint64_t v82 = a1;
    uint32x4_t v83 = v12;
    int8x8_t v13 = v71[35] - v71[34];
    std::vector<unsigned int>::resize(v74, (v13 >> 2) + 4);
    (*(void (**)(void, uint64_t, uint64_t))(v12 + 784))(*(void *)(a1 + 16), 4LL, v71[34] + v13);
    unsigned int v78 = xmmword_1F2D60;
    uint64_t v79 = 0LL;
    uint64_t v80 = 0LL;
    uint32x4_t v81 = 0;
    GPUTools::GL::SavePixelStoreUnpackState(&v82, *(unsigned int *)(a1 + 3456), *(unsigned __int8 *)(v7 + 1), &v78);
    uint8x8_t v14 = *(unsigned int *)(a1 + 3456);
    unint64_t v15 = *(unsigned __int8 *)(v7 + 1);
    memset(v76, 0, sizeof(v76));
    unsigned int v77 = 0;
    HIDWORD(v76[0]) = 1;
    GPUTools::GL::ApplyPixelStoreUnpackState(&v82, v14, v15, v76);
    uint64_t v16 = 0LL;
    unint64_t v17 = v13 >> 2;
    do
    {
      if (*(_DWORD *)(a1 + 3460) >= *(_DWORD *)((char *)&sReplacementTexInfos + v16 + 28)
        && ((_DWORD)v11 != 32879 || v16 != 32))
      {
        (*(void (**)(void, uint64_t, void))(v83 + 40))(*(void *)(v82 + 16), v11, v74->__begin_[v17]);
        (*(void (**)(void, uint64_t, uint64_t, void))(v83 + 2432))( *(void *)(v82 + 16),  v11,  10241LL,  *(unsigned int *)((char *)&sReplacementTexInfos + v16 + 20));
        (*(void (**)(void, uint64_t, uint64_t, uint64_t))(v83 + 2432))( *(void *)(v82 + 16),  v11,  10240LL,  9728LL);
        if (v16 == 32 && *(_DWORD *)(a1 + 3460) == 3) {
          uint64_t v18 = 35056LL;
        }
        else {
          uint64_t v18 = *(unsigned int *)((char *)&sReplacementTexInfos + v16 + 16);
        }
        if ((int)v11 > 34066)
        {
          if ((_DWORD)v11 == 34067)
          {
            unint64_t v29 = *(unsigned int *)((char *)&sReplacementTexInfos + v16 + 8);
            uint64_t v28 = *(_DWORD *)((char *)&sReplacementTexInfos + v16 + 12);
            uint64_t v30 = *(uint64_t *)((char *)&sReplacementTexInfos + v16);
            (*(void (**)(void, uint64_t, void, uint64_t, uint64_t, uint64_t, void, uint64_t, int, uint64_t))(v83 + 2408))( *(void *)(v82 + 16),  34070LL,  0LL,  v18,  2LL,  2LL,  0LL,  v29,  v28,  v30);
            (*(void (**)(void, uint64_t, void, uint64_t, uint64_t, uint64_t, void, uint64_t, int, uint64_t))(v83 + 2408))( *(void *)(v82 + 16),  34069LL,  0LL,  v18,  2LL,  2LL,  0LL,  v29,  v28,  v30);
            (*(void (**)(void, uint64_t, void, uint64_t, uint64_t, uint64_t, void, uint64_t, int, uint64_t))(v83 + 2408))( *(void *)(v82 + 16),  34072LL,  0LL,  v18,  2LL,  2LL,  0LL,  v29,  v28,  v30);
            (*(void (**)(void, uint64_t, void, uint64_t, uint64_t, uint64_t, void, uint64_t, int, uint64_t))(v83 + 2408))( *(void *)(v82 + 16),  34071LL,  0LL,  v18,  2LL,  2LL,  0LL,  v29,  v28,  v30);
            (*(void (**)(void, uint64_t, void, uint64_t, uint64_t, uint64_t, void, uint64_t, int, uint64_t))(v83 + 2408))( *(void *)(v82 + 16),  34074LL,  0LL,  v18,  2LL,  2LL,  0LL,  v29,  v28,  v30);
            (*(void (**)(void, uint64_t, void, uint64_t, uint64_t, uint64_t, void, uint64_t, int, uint64_t))(v83 + 2408))( *(void *)(v82 + 16),  34073LL,  0LL,  v18,  2LL,  2LL,  0LL,  v29,  v28,  v30);
            (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, int, uint64_t))(v83 + 2408))( *(void *)(v82 + 16),  34070LL,  1LL,  v18,  1LL,  1LL,  0LL,  v29,  v28,  v30);
            (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, int, uint64_t))(v83 + 2408))( *(void *)(v82 + 16),  34069LL,  1LL,  v18,  1LL,  1LL,  0LL,  v29,  v28,  v30);
            (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, int, uint64_t))(v83 + 2408))( *(void *)(v82 + 16),  34072LL,  1LL,  v18,  1LL,  1LL,  0LL,  v29,  v28,  v30);
            (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, int, uint64_t))(v83 + 2408))( *(void *)(v82 + 16),  34071LL,  1LL,  v18,  1LL,  1LL,  0LL,  v29,  v28,  v30);
            (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, int, uint64_t))(v83 + 2408))( *(void *)(v82 + 16),  34074LL,  1LL,  v18,  1LL,  1LL,  0LL,  v29,  v28,  v30);
            (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, int, uint64_t))(v83 + 2408))( *(void *)(v82 + 16),  34073LL,  1LL,  v18,  1LL,  1LL,  0LL,  v29,  v28,  v30);
          }

          else
          {
            if ((_DWORD)v11 != 35866)
            {
LABEL_86:
              uint32x4_t v59 = dy_abort("unsupported or unknown texture target: 0x%04X", v11);
              unapply_draw_overrides(v59);
              return;
            }

            unint64_t v22 = *(_DWORD *)((char *)&sReplacementTexInfos + v16 + 8);
            unint64_t v23 = *(_DWORD *)((char *)&sReplacementTexInfos + v16 + 12);
            (*(void (**)(void, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void))(v83 + 3504))( *(void *)(v82 + 16),  35866LL,  0LL,  v18,  2LL,  2LL,  2LL,  0LL,  *(_UNKNOWN **)((char *)&sReplacementTexInfos + v16 + 8),  0LL);
            uint64_t v24 = *(uint64_t *)((char *)&sReplacementTexInfos + v16);
            HIDWORD(v62) = v22;
            LODWORD(v67) = v23;
            LODWORD(v62) = 1;
            (*(void (**)(void, uint64_t, void, void, void, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v83 + 3512))( *(void *)(v82 + 16),  35866LL,  0LL,  0LL,  0LL,  0LL,  2LL,  2LL,  v62,  v67,  v24);
            HIDWORD(v63) = v22;
            LODWORD(v63) = 1;
            (*(void (**)(void, uint64_t, void, void, void, uint64_t, uint64_t, uint64_t, uint64_t, unsigned int, uint64_t))(v83 + 3512))( *(void *)(v82 + 16),  35866LL,  0LL,  0LL,  0LL,  1LL,  2LL,  2LL,  v63,  v23,  v24);
            (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, unint64_t, void))(v83 + 3504))( *(void *)(v82 + 16),  35866LL,  1LL,  v18,  1LL,  1LL,  2LL,  0LL,  __PAIR64__(v23, v22),  0LL);
            HIDWORD(v64) = v22;
            LODWORD(v64) = 1;
            (*(void (**)(void, uint64_t, uint64_t, void, void, void, uint64_t, uint64_t, uint64_t, unsigned int, uint64_t))(v83 + 3512))( *(void *)(v82 + 16),  35866LL,  1LL,  0LL,  0LL,  0LL,  1LL,  1LL,  v64,  v23,  v24);
            HIDWORD(v65) = v22;
            LODWORD(v68) = v23;
            LODWORD(v65) = 1;
            (*(void (**)(void, uint64_t, uint64_t, void, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v83 + 3512))( *(void *)(v82 + 16),  35866LL,  1LL,  0LL,  0LL,  1LL,  1LL,  1LL,  v65,  v68,  v24);
          }
        }

        else if ((_DWORD)v11 == 3553)
        {
          uint32x4_t v26 = *(unsigned int *)((char *)&sReplacementTexInfos + v16 + 8);
          unsigned int v25 = *(_DWORD *)((char *)&sReplacementTexInfos + v16 + 12);
          unint64_t v27 = *(uint64_t *)((char *)&sReplacementTexInfos + v16);
          (*(void (**)(void, uint64_t, void, uint64_t, uint64_t, uint64_t, void, uint64_t, int, uint64_t))(v83 + 2408))( *(void *)(v82 + 16),  3553LL,  0LL,  v18,  2LL,  2LL,  0LL,  v26,  v25,  v27);
          (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, int, uint64_t))(v83 + 2408))( *(void *)(v82 + 16),  3553LL,  1LL,  v18,  1LL,  1LL,  0LL,  v26,  v25,  v27);
        }

        else
        {
          if ((_DWORD)v11 != 32879) {
            goto LABEL_86;
          }
          unint64_t v19 = *(_DWORD *)((char *)&sReplacementTexInfos + v16 + 8);
          uint64_t v20 = *(_DWORD *)((char *)&sReplacementTexInfos + v16 + 12);
          (*(void (**)(void, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void))(v83 + 3504))( *(void *)(v82 + 16),  32879LL,  0LL,  v18,  2LL,  2LL,  2LL,  0LL,  *(_UNKNOWN **)((char *)&sReplacementTexInfos + v16 + 8),  0LL);
          uint64_t v21 = *(uint64_t *)((char *)&sReplacementTexInfos + v16);
          HIDWORD(v60) = v19;
          LODWORD(v66) = v20;
          LODWORD(v60) = 1;
          (*(void (**)(void, uint64_t, void, void, void, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v83 + 3512))( *(void *)(v82 + 16),  32879LL,  0LL,  0LL,  0LL,  0LL,  2LL,  2LL,  v60,  v66,  v21);
          HIDWORD(v61) = v19;
          LODWORD(v61) = 1;
          (*(void (**)(void, uint64_t, void, void, void, uint64_t, uint64_t, uint64_t, uint64_t, unsigned int, uint64_t))(v83 + 3512))( *(void *)(v82 + 16),  32879LL,  0LL,  0LL,  0LL,  1LL,  2LL,  2LL,  v61,  v20,  v21);
          (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, unint64_t, uint64_t, uint64_t))(v83 + 3504))( *(void *)(v82 + 16),  32879LL,  1LL,  v18,  1LL,  1LL,  1LL,  0LL,  __PAIR64__(v20, v19),  v21,  v69);
        }
      }

      v16 += 32LL;
      ++v17;
    }

    while (v16 != 128);
    if (*(int *)(a1 + 3460) > 1) {
      (*(void (**)(void, uint64_t, void))(v83 + 5136))( *(void *)(v82 + 16),  35052LL,  *(unsigned int *)(a1 + 2044));
    }
    unint64_t v7 = a1 + 4860;
    GPUTools::GL::ApplyPixelStoreUnpackState(&v82, *(unsigned int *)(a1 + 3456), *(unsigned __int8 *)(a1 + 4861), &v78);
    unint64_t v10 = v72 + 1;
  }

  while (v72 + 1 != v70);
LABEL_40:
  if (*(_DWORD *)(a1 + 3444))
  {
    int v31 = 0;
    unint64_t v32 = 0;
    uint64_t v73 = (char **)(a1 + 3640);
    while (1)
    {
      (*(void (**)(void, void))(v4 + 2736))(*(void *)(a1 + 16), (v31 + 33984));
      uint64_t v33 = *(void *)(a1 + 3408);
      if (*(void *)(a1 + 3416) != v33) {
        break;
      }
LABEL_82:
      int v31 = ++v32;
    }

    unsigned int v34 = 0LL;
    while (2)
    {
      unsigned int v35 = *(unsigned int *)(v33 + 4 * v34);
      if ((_DWORD)v35 == 34067) {
        uint32x4_t v36 = 34069LL;
      }
      else {
        uint32x4_t v36 = v35;
      }
      (*(void (**)(void, uint64_t, void, uint64_t, __int128 *))(v4 + 1000))( *(void *)(a1 + 16),  v36,  0LL,  4096LL,  &v78);
      if ((_DWORD)v78)
      {
        (*(void (**)(void, uint64_t, void, uint64_t, _OWORD *))(v4 + 1000))( *(void *)(a1 + 16),  v36,  0LL,  4097LL,  v76);
        if (LODWORD(v76[0]))
        {
          (*(void (**)(void, uint64_t, void, uint64_t, uint64_t *))(v4 + 1000))( *(void *)(a1 + 16),  v36,  0LL,  4099LL,  &v82);
          __int128 v39 = 0;
          ImageUploadFormatInfo = GPUTools::GL::GetImageUploadFormatInfo((GPUTools::GL *)v82, 0, v38);
          unsigned int v45 = v44;
          unsigned int v46 = (GPUTools::GL *)HIDWORD(ImageUploadFormatInfo);
          __int128 v39 = 1;
          if ((int)v46 > 35055)
          {
            if (((_DWORD)v46 - 36166) >= 4 && ((_DWORD)v46 - 36012) >= 2)
            {
              uint64_t v47 = 35056;
              goto LABEL_76;
            }
          }

          else if (((_DWORD)v46 - 33189) >= 3 && ((_DWORD)v46 - 6401) >= 2)
          {
            uint64_t v47 = 34041;
LABEL_76:
            if ((_DWORD)v46 != v47)
            {
              if (GPUTools::GL::IsIntegerFormat(v46, v44))
              {
                else {
                  __int128 v39 = 3;
                }
              }

              else
              {
                __int128 v39 = 0;
              }
            }
          }

        uint8x8_t v14 = dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", (const void *)v13, 4uLL);
        GPUTools::FB::EncodeThreadQueueInfo(v14);
        return;
      }
    }

    else
    {
      int8x8_t v13 = (uint64_t)malloc((v11 + v9));
      *this = (char *)v13;
      if (v13) {
        goto LABEL_7;
      }
    }

    int8x8_t v13 = dy_abort("failed to allocate fbuf buffer");
    goto LABEL_11;
  }

uint64_t *ProgramPipelineInfo::operator=(uint64_t *a1, uint64_t *a2)
{
  if (a1 != a2)
  {
    std::vector<ProgramShaderInfo>::__assign_with_size[abi:ne180100]<ProgramShaderInfo*,ProgramShaderInfo*>( a1,  *a2,  a2[1],  0x6DB6DB6DB6DB6DB7LL * ((a2[1] - *a2) >> 3));
    std::vector<ProgramShaderInfo>::__assign_with_size[abi:ne180100]<ProgramShaderInfo*,ProgramShaderInfo*>( a1 + 3,  a2[3],  a2[4],  0x6DB6DB6DB6DB6DB7LL * ((a2[4] - a2[3]) >> 3));
    std::vector<ProgramShaderInfo>::__assign_with_size[abi:ne180100]<ProgramShaderInfo*,ProgramShaderInfo*>( a1 + 6,  a2[6],  a2[7],  0x6DB6DB6DB6DB6DB7LL * ((a2[7] - a2[6]) >> 3));
    std::vector<ProgramShaderInfo>::__assign_with_size[abi:ne180100]<ProgramShaderInfo*,ProgramShaderInfo*>( a1 + 9,  a2[9],  a2[10],  0x6DB6DB6DB6DB6DB7LL * ((a2[10] - a2[9]) >> 3));
    std::vector<ProgramShaderInfo>::__assign_with_size[abi:ne180100]<ProgramShaderInfo*,ProgramShaderInfo*>( a1 + 12,  a2[12],  a2[13],  0x6DB6DB6DB6DB6DB7LL * ((a2[13] - a2[12]) >> 3));
  }

  uint64_t v5 = a2[15];
  uint64_t v4 = a2[16];
  if (v4)
  {
    uint64_t v6 = (unint64_t *)(v4 + 8);
    do
      unint64_t v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }

  uint64_t v8 = (std::__shared_weak_count *)a1[16];
  a1[15] = v5;
  a1[16] = v4;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      unint64_t v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  a1[17] = a2[17];
  return a1;
}

uint64_t *wrapper_cache_active_transform_feedback(ContextInfo *a1)
{
  uint64_t v4 = 0LL;
  (*(void (**)(void, uint64_t, uint64_t *))(*((void *)a1 + 4) + 832LL))(*((void *)a1 + 2), 35725LL, &v4);
  if (!(_DWORD)v4)
  {
    (*(void (**)(void, uint64_t, char *))(*((void *)a1 + 4) + 832LL))( *((void *)a1 + 2),  33370LL,  (char *)&v4 + 4);
    unsigned int v3 = 0;
    if (*((_DWORD *)a1 + 864) != 4) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  unsigned int v3 = 0;
  if (*((_DWORD *)a1 + 864) == 4) {
LABEL_3:
  }
    (*(void (**)(void, uint64_t, unsigned int *))(*((void *)a1 + 4) + 832LL))( *((void *)a1 + 2),  36389LL,  &v3);
LABEL_4:
  uint64_t v5 = &v3;
  id result = std::__hash_table<std::__hash_value_type<unsigned int,ActiveTransformFeedbackInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ActiveTransformFeedbackInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ActiveTransformFeedbackInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ActiveTransformFeedbackInfo>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>( (uint64_t)a1 + 3560,  &v3,  (uint64_t)&std::piecewise_construct,  &v5);
  *(uint64_t *)((char *)result + 20) = v4;
  return result;
}

id wrapper_cache_pipeline_use_stages( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, int a6)
{
  id result = [(id)DYGetGLGuestAppClient(a1) traceMode];
  if ((_DWORD)result != 6)
  {
    int8x8_t v13 = (GPUTools::DYLockUtils *)(a1[5] + 144LL);
    GPUTools::DYLockUtils::Lock(v13, v12);
    if ((_DWORD)a4) {
      uint8x8_t v14 = find_info<std::unordered_map<unsigned int,std::shared_ptr<ProgramInfo>>>( (ContextInfo *)a1,  (void *)(a1[5] + 104LL),  a4,  1);
    }
    else {
      uint8x8_t v14 = 0LL;
    }
    query_pipeline_programs((uint64_t)a1, a2, &v31);
    uint64_t v19 = a5[1];
    if ((_DWORD)v19 != HIDWORD(v31))
    {
      detach_program((ContextInfo *)a1, v19);
      if ((_DWORD)a4)
      {
        if (HIDWORD(v31) == (_DWORD)a4) {
          ++*(_DWORD *)(*((void *)v14 + 3) + 372LL);
        }
      }
    }

    uint64_t v20 = a5[2];
    if ((_DWORD)v20 != v32)
    {
      detach_program((ContextInfo *)a1, v20);
      if ((_DWORD)a4)
      {
        if (v32 == (_DWORD)a4) {
          ++*(_DWORD *)(*((void *)v14 + 3) + 372LL);
        }
      }
    }

    uint64_t v21 = a5[3];
    if ((_DWORD)v21 != v33)
    {
      detach_program((ContextInfo *)a1, v21);
      if ((_DWORD)a4)
      {
        if (v33 == (_DWORD)a4) {
          ++*(_DWORD *)(*((void *)v14 + 3) + 372LL);
        }
      }
    }

    uint64_t v22 = a5[4];
    if ((_DWORD)v22 != v34)
    {
      detach_program((ContextInfo *)a1, v22);
      if ((_DWORD)a4)
      {
        if (v34 == (_DWORD)a4) {
          ++*(_DWORD *)(*((void *)v14 + 3) + 372LL);
        }
      }
    }

    uint64_t v23 = a5[5];
    if ((_DWORD)v23 != v35)
    {
      detach_program((ContextInfo *)a1, v23);
      uint64_t v23 = v35;
      if ((_DWORD)a4)
      {
        if (v35 == (_DWORD)a4)
        {
          ++*(_DWORD *)(*((void *)v14 + 3) + 372LL);
          uint64_t v23 = a4;
        }
      }
    }

    if (a6)
    {
      uint64_t v25 = *a1;
      uint64_t v24 = (GPUTools::FB::Fbuf *)(a1 + 15);
      GPUTools::FB::Encode((uint64_t)v24, 4294955024LL, 0LL, (uint64_t)"Ciuiuiuiuiuiui", v15, v16, v17, v18, v25);
      unint64_t v27 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v26) defaultFbufStream];
      uint64_t v28 = (unsigned int *)((char *)v27 + 56);
      do
        unsigned int v29 = __ldaxr(v28);
      while (__stlxr(1u, v28));
      if (v29 == 1)
      {
        do
        {
          while (*v28 == 1)
            ;
          do
            unsigned int v30 = __ldaxr(v28);
          while (__stlxr(1u, v28));
        }

        while (v30 == 1);
      }

      GPUTools::FB::Stream::Write_nolock(v27, v24, **(unsigned int **)v24, 1);
      atomic_store(0, v28);
    }

    return (id)GPUTools::DYLockUtils::Unlock(v13, (volatile int *)v23);
  }

  return result;
}

void sub_6328(_Unwind_Exception *a1, volatile int *a2)
{
}

id wrapper_cache_pipeline_active_shader_program(ContextInfo *a1, uint64_t a2, unsigned int a3, _DWORD *a4)
{
  id result = [(id)DYGetGLGuestAppClient(a1) traceMode];
  if ((_DWORD)result != 6 && *a4 != a3)
  {
    unint64_t v10 = (GPUTools::DYLockUtils *)(*((void *)a1 + 5) + 144LL);
    GPUTools::DYLockUtils::Lock(v10, v8);
    detach_program(a1, *a4);
    unint64_t v11 = find_info<std::unordered_map<unsigned int,std::shared_ptr<ProgramInfo>>>( a1,  (void *)(*((void *)a1 + 5) + 104LL),  a3,  1);
    ++*(_DWORD *)(*((void *)v11 + 3) + 372LL);
    return (id)GPUTools::DYLockUtils::Unlock(v10, v12);
  }

  return result;
}

void sub_63E8(_Unwind_Exception *a1, volatile int *a2)
{
}

void wrapper_cache_pipeline_delete(ContextInfo *a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  __p = 0LL;
  uint64_t v143 = 0LL;
  unsigned int v144 = 0LL;
  if (a2)
  {
    if ((a2 & 0x80000000) != 0) {
      std::vector<ProgramShaderInfo>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (int)(2 * a2);
    uint64_t v7 = 0LL;
    __p = operator new(4 * v6);
    uint64_t v143 = (char *)__p;
    unsigned int v144 = (char *)__p + 4 * v6;
    uint64_t v8 = a2;
    while (1)
    {
      uint64_t v10 = *(unsigned int *)(a3 + 4 * v7);
      query_pipeline_programs((uint64_t)a1, v10, &v137);
      int v11 = v137;
      if ((_DWORD)v137) {
        break;
      }
LABEL_31:
      int v31 = HIDWORD(v137);
      if (!HIDWORD(v137)) {
        goto LABEL_54;
      }
      int v32 = v143;
      if (v143 >= v144)
      {
        int v34 = (char *)__p;
        int64_t v35 = v143 - (_BYTE *)__p;
        uint64_t v36 = (v143 - (_BYTE *)__p) >> 2;
        unint64_t v37 = v36 + 1;
        uint64_t v38 = v144 - (_BYTE *)__p;
        if ((v144 - (_BYTE *)__p) >> 1 > v37) {
          unint64_t v37 = v38 >> 1;
        }
        else {
          unint64_t v39 = v37;
        }
        if (v39)
        {
          if (v39 >> 62) {
            goto LABEL_150;
          }
          __int128 v40 = (char *)operator new(4 * v39);
          int v41 = &v40[4 * v36];
          *(_DWORD *)int v41 = v31;
          uint64_t v33 = (uint64_t)(v41 + 4);
          if (v32 == v34) {
            goto LABEL_51;
          }
LABEL_45:
          unint64_t v42 = v32 - 4 - v34;
          if (v42 < 0x2C) {
            goto LABEL_154;
          }
          uint64_t v43 = (v42 >> 2) + 1;
          uint64_t v44 = 4 * (v43 & 0x7FFFFFFFFFFFFFF8LL);
          unsigned int v45 = &v32[-v44];
          v41 -= v44;
          unsigned int v46 = &v40[4 * v36 - 16];
          uint64_t v47 = v32 - 16;
          uint64_t v48 = v43 & 0x7FFFFFFFFFFFFFF8LL;
          do
          {
            __int128 v49 = *(_OWORD *)v47;
            *((_OWORD *)v46 - 1) = *((_OWORD *)v47 - 1);
            *(_OWORD *)unsigned int v46 = v49;
            v46 -= 32;
            v47 -= 32;
            v48 -= 8LL;
          }

          while (v48);
          int v32 = v45;
          if (v43 != (v43 & 0x7FFFFFFFFFFFFFF8LL))
          {
LABEL_154:
            do
            {
              int v50 = *((_DWORD *)v32 - 1);
              v32 -= 4;
              *((_DWORD *)v41 - 1) = v50;
              v41 -= 4;
            }

            while (v32 != v34);
          }
        }

        else
        {
          __int128 v40 = 0LL;
          int v41 = (char *)(4 * v36);
          *(_DWORD *)(4 * v36) = HIDWORD(v137);
          uint64_t v33 = 4 * v36 + 4;
          if (v32 != v34) {
            goto LABEL_45;
          }
        }

LABEL_74:
        __p = v61;
        uint64_t v143 = (char *)v53;
        unsigned int v144 = &v60[4 * v59];
        if (v54) {
          operator delete(v54);
        }
        goto LABEL_76;
      }

      *(_DWORD *)uint64_t v143 = v138;
      uint64_t v53 = (uint64_t)(v52 + 4);
LABEL_76:
      uint64_t v143 = (char *)v53;
LABEL_77:
      int v71 = v139;
      if (!v139) {
        goto LABEL_100;
      }
      unsigned int v72 = v143;
      if (v143 >= v144)
      {
        uint64_t v74 = (char *)__p;
        int64_t v75 = v143 - (_BYTE *)__p;
        uint64_t v76 = (v143 - (_BYTE *)__p) >> 2;
        unint64_t v77 = v76 + 1;
        uint64_t v78 = v144 - (_BYTE *)__p;
        if ((v144 - (_BYTE *)__p) >> 1 > v77) {
          unint64_t v77 = v78 >> 1;
        }
        else {
          unint64_t v79 = v77;
        }
        if (v79)
        {
          if (v79 >> 62) {
            goto LABEL_150;
          }
          uint64_t v80 = (char *)operator new(4 * v79);
          uint32x4_t v81 = &v80[4 * v76];
          *(_DWORD *)uint32x4_t v81 = v71;
          uint64_t v73 = (uint64_t)(v81 + 4);
          if (v72 == v74) {
            goto LABEL_97;
          }
LABEL_91:
          unint64_t v82 = v72 - 4 - v74;
          if (v82 < 0x2C) {
            goto LABEL_156;
          }
          uint64_t v83 = (v82 >> 2) + 1;
          uint64_t v84 = 4 * (v83 & 0x7FFFFFFFFFFFFFF8LL);
          uint64_t v85 = &v72[-v84];
          v81 -= v84;
          uint64_t v86 = &v80[4 * v76 - 16];
          uint32x4_t v87 = v72 - 16;
          uint64_t v88 = v83 & 0x7FFFFFFFFFFFFFF8LL;
          do
          {
            __int128 v89 = *(_OWORD *)v87;
            *((_OWORD *)v86 - 1) = *((_OWORD *)v87 - 1);
            *(_OWORD *)uint64_t v86 = v89;
            v86 -= 32;
            v87 -= 32;
            v88 -= 8LL;
          }

          while (v88);
          unsigned int v72 = v85;
          if (v83 != (v83 & 0x7FFFFFFFFFFFFFF8LL))
          {
LABEL_156:
            do
            {
              int v90 = *((_DWORD *)v72 - 1);
              v72 -= 4;
              *((_DWORD *)v81 - 1) = v90;
              v81 -= 4;
            }

            while (v72 != v74);
          }
        }

        else
        {
          uint64_t v80 = 0LL;
          uint32x4_t v81 = (char *)(4 * v76);
          *(_DWORD *)(4 * v76) = v139;
          uint64_t v73 = 4 * v76 + 4;
          if (v72 != v74) {
            goto LABEL_91;
          }
        }

LABEL_97:
        __p = v81;
        uint64_t v143 = (char *)v73;
        unsigned int v144 = &v80[4 * v79];
        if (v74) {
          operator delete(v74);
        }
        goto LABEL_99;
      }

      *(_DWORD *)uint64_t v143 = v139;
      uint64_t v73 = (uint64_t)(v72 + 4);
LABEL_99:
      uint64_t v143 = (char *)v73;
LABEL_100:
      int v91 = v140;
      if (!v140) {
        goto LABEL_123;
      }
      uint32x4_t v92 = v143;
      if (v143 >= v144)
      {
        uint64_t v94 = (char *)__p;
        int64_t v95 = v143 - (_BYTE *)__p;
        uint64_t v96 = (v143 - (_BYTE *)__p) >> 2;
        unint64_t v97 = v96 + 1;
        uint64_t v98 = v144 - (_BYTE *)__p;
        if ((v144 - (_BYTE *)__p) >> 1 > v97) {
          unint64_t v97 = v98 >> 1;
        }
        else {
          unint64_t v99 = v97;
        }
        if (v99)
        {
          if (v99 >> 62) {
            goto LABEL_150;
          }
          uint32x4_t v100 = (char *)operator new(4 * v99);
          uint32x4_t v101 = &v100[4 * v96];
          *(_DWORD *)uint32x4_t v101 = v91;
          uint64_t v93 = (uint64_t)(v101 + 4);
          if (v92 == v94) {
            goto LABEL_120;
          }
LABEL_114:
          unint64_t v102 = v92 - 4 - v94;
          if (v102 < 0x2C) {
            goto LABEL_157;
          }
          uint64_t v103 = (v102 >> 2) + 1;
          uint64_t v104 = 4 * (v103 & 0x7FFFFFFFFFFFFFF8LL);
          uint16x8_t v105 = &v92[-v104];
          v101 -= v104;
          uint32x4_t v106 = &v100[4 * v96 - 16];
          uint32x4_t v107 = v92 - 16;
          uint64_t v108 = v103 & 0x7FFFFFFFFFFFFFF8LL;
          do
          {
            __int128 v109 = *(_OWORD *)v107;
            *((_OWORD *)v106 - 1) = *((_OWORD *)v107 - 1);
            *(_OWORD *)uint32x4_t v106 = v109;
            v106 -= 32;
            v107 -= 32;
            v108 -= 8LL;
          }

          while (v108);
          uint32x4_t v92 = v105;
          if (v103 != (v103 & 0x7FFFFFFFFFFFFFF8LL))
          {
LABEL_157:
            do
            {
              int v110 = *((_DWORD *)v92 - 1);
              v92 -= 4;
              *((_DWORD *)v101 - 1) = v110;
              v101 -= 4;
            }

            while (v92 != v94);
          }
        }

        else
        {
          uint32x4_t v100 = 0LL;
          uint32x4_t v101 = (char *)(4 * v96);
          *(_DWORD *)(4 * v96) = v140;
          uint64_t v93 = 4 * v96 + 4;
          if (v92 != v94) {
            goto LABEL_114;
          }
        }

LABEL_120:
        __p = v101;
        uint64_t v143 = (char *)v93;
        unsigned int v144 = &v100[4 * v99];
        if (v94) {
          operator delete(v94);
        }
        goto LABEL_122;
      }

      *(_DWORD *)uint64_t v143 = v140;
      uint64_t v93 = (uint64_t)(v92 + 4);
LABEL_122:
      uint64_t v143 = (char *)v93;
LABEL_123:
      int v111 = v141;
      if (!v141) {
        goto LABEL_6;
      }
      int v112 = v143;
      if (v143 >= v144)
      {
        unsigned int v113 = (char *)__p;
        int64_t v114 = v143 - (_BYTE *)__p;
        uint64_t v115 = (v143 - (_BYTE *)__p) >> 2;
        unint64_t v116 = v115 + 1;
        if ((unint64_t)(v115 + 1) >> 62) {
LABEL_149:
        }
          std::vector<ProgramShaderInfo>::__throw_length_error[abi:ne180100]();
        uint64_t v117 = v144 - (_BYTE *)__p;
        if ((v144 - (_BYTE *)__p) >> 1 > v116) {
          unint64_t v116 = v117 >> 1;
        }
        else {
          unint64_t v118 = v116;
        }
        if (v118)
        {
          if (v118 >> 62) {
LABEL_150:
          }
            std::__throw_bad_array_new_length[abi:ne180100]();
          uint32x4_t v119 = (char *)operator new(4 * v118);
          uint32x4_t v120 = &v119[4 * v115];
          *(_DWORD *)uint32x4_t v120 = v111;
          uint64_t v9 = (uint64_t)(v120 + 4);
          if (v112 == v113) {
            goto LABEL_142;
          }
LABEL_136:
          unint64_t v121 = v112 - 4 - v113;
          if (v121 < 0x2C) {
            goto LABEL_158;
          }
          uint64_t v122 = (v121 >> 2) + 1;
          uint64_t v123 = 4 * (v122 & 0x7FFFFFFFFFFFFFF8LL);
          uint32x4_t v124 = &v112[-v123];
          v120 -= v123;
          uint32x4_t v125 = &v119[4 * v115 - 16];
          uint32x4_t v126 = v112 - 16;
          uint64_t v127 = v122 & 0x7FFFFFFFFFFFFFF8LL;
          do
          {
            __int128 v128 = *(_OWORD *)v126;
            *((_OWORD *)v125 - 1) = *((_OWORD *)v126 - 1);
            *(_OWORD *)uint32x4_t v125 = v128;
            v125 -= 32;
            v126 -= 32;
            v127 -= 8LL;
          }

          while (v127);
          int v112 = v124;
          if (v122 != (v122 & 0x7FFFFFFFFFFFFFF8LL))
          {
LABEL_158:
            do
            {
              int v129 = *((_DWORD *)v112 - 1);
              v112 -= 4;
              *((_DWORD *)v120 - 1) = v129;
              v120 -= 4;
            }

            while (v112 != v113);
          }
        }

        else
        {
          uint32x4_t v119 = 0LL;
          uint32x4_t v120 = (char *)(4 * v115);
          *(_DWORD *)(4 * v115) = v141;
          uint64_t v9 = 4 * v115 + 4;
          if (v112 != v113) {
            goto LABEL_136;
          }
        }

            free(v190);
            do
            {
              v176 = __ldaxr(v12);
              v177 = v176 - 1;
            }

            while (__stlxr(v177, v12));
            if (gCheckGLErrors) {
              v178 = v177 < 1;
            }
            else {
              v178 = 1;
            }
            if (!v178) {
              handle_opengl_thread_conflict((const void **)v11);
            }
            goto LABEL_127;
          }
        }

        LODWORD(v192) = v37;
        [*(id *)v11 getParameter:611 to:&v192];
        goto LABEL_56;
      }

      v185 = 2LL;
      v186 = 888LL;
    }

    breakpoint_break((uint64_t)(v210 + 6), (volatile int *)v186, v185, v47, v11);
    goto LABEL_40;
  }

  do
    v180 = __ldaxr(v12);
  while (__stlxr(v180 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  unint64_t v37 = (*(uint64_t (**)(__GLIContextRec *, uint64_t, uint64_t, const char **))(*(void *)(v11 + 24) + 6568LL))( a1,  a2,  a3,  a4);
LABEL_127:
  _Block_object_dispose(&v209, 8);
  if (v215) {
    free(v215);
  }
  return v37;
}

LABEL_142:
        __p = v120;
        uint64_t v143 = (char *)v9;
        unsigned int v144 = &v119[4 * v118];
        if (v113) {
          operator delete(v113);
        }
        goto LABEL_5;
      }

      *(_DWORD *)uint64_t v143 = v141;
      uint64_t v9 = (uint64_t)(v112 + 4);
LABEL_5:
      uint64_t v143 = (char *)v9;
LABEL_6:
      if (++v7 == v8) {
        goto LABEL_144;
      }
    }

    unint64_t v12 = v143;
    if (v143 < v144)
    {
      *(_DWORD *)uint64_t v143 = v137;
      uint64_t v13 = (uint64_t)(v12 + 4);
LABEL_30:
      uint64_t v143 = (char *)v13;
      goto LABEL_31;
    }

    uint8x8_t v14 = (char *)__p;
    int64_t v15 = v143 - (_BYTE *)__p;
    uint64_t v16 = (v143 - (_BYTE *)__p) >> 2;
    unint64_t v17 = v16 + 1;
    uint64_t v18 = v144 - (_BYTE *)__p;
    if ((v144 - (_BYTE *)__p) >> 1 > v17) {
      unint64_t v17 = v18 >> 1;
    }
    else {
      unint64_t v19 = v17;
    }
    if (v19)
    {
      if (v19 >> 62) {
        goto LABEL_150;
      }
      uint64_t v20 = (char *)operator new(4 * v19);
      uint64_t v21 = &v20[4 * v16];
      *(_DWORD *)uint64_t v21 = v11;
      uint64_t v13 = (uint64_t)(v21 + 4);
      if (v12 == v14) {
        goto LABEL_28;
      }
    }

    else
    {
      uint64_t v20 = 0LL;
      uint64_t v21 = (char *)(4 * v16);
      *(_DWORD *)(4 * v16) = v137;
      uint64_t v13 = 4 * v16 + 4;
      if (v12 == v14)
      {
LABEL_28:
        __p = v21;
        uint64_t v143 = (char *)v13;
        unsigned int v144 = &v20[4 * v19];
        if (v14) {
          operator delete(v14);
        }
        goto LABEL_30;
      }
    }

    unint64_t v22 = v12 - 4 - v14;
    if (v22 < 0x2C) {
      goto LABEL_159;
    }
    uint64_t v23 = (v22 >> 2) + 1;
    uint64_t v24 = 4 * (v23 & 0x7FFFFFFFFFFFFFF8LL);
    uint64_t v25 = &v12[-v24];
    v21 -= v24;
    uint64_t v26 = &v20[4 * v16 - 16];
    unint64_t v27 = v12 - 16;
    uint64_t v28 = v23 & 0x7FFFFFFFFFFFFFF8LL;
    do
    {
      __int128 v29 = *(_OWORD *)v27;
      *((_OWORD *)v26 - 1) = *((_OWORD *)v27 - 1);
      *(_OWORD *)uint64_t v26 = v29;
      v26 -= 32;
      v27 -= 32;
      v28 -= 8LL;
    }

    while (v28);
    unint64_t v12 = v25;
    if (v23 != (v23 & 0x7FFFFFFFFFFFFFF8LL))
    {
LABEL_159:
      do
      {
        int v30 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v21 - 1) = v30;
        v21 -= 4;
      }

      while (v12 != v14);
    }

    goto LABEL_28;
  }

LABEL_144:
  (*(void (**)(void))(a4 + 16))();
  int v130 = (GPUTools::DYLockUtils *)(*((void *)a1 + 5) + 144LL);
  GPUTools::DYLockUtils::Lock(v130, v131);
  v133 = (unsigned int *)__p;
  uint64_t v134 = (unsigned int *)v143;
  if (__p != v143)
  {
    do
      detach_program(a1, *v133++);
    while (v133 != v134);
  }

  GPUTools::DYLockUtils::Unlock(v130, v132);
  if (__p)
  {
    uint64_t v143 = (char *)__p;
    operator delete(__p);
  }

void sub_6C90( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_cache_pipeline_create_shader_program( ContextInfo *a1, uint64_t a2, int a3, unint64_t a4, const char **a5)
{
  if ([(id)DYGetGLGuestAppClient(a1) traceMode] != 6)
  {
    ShaderInfo::ShaderInfo((ShaderInfo *)&v53, a1, 0);
    StringBuffer::reserve((void **)v55, 1uLL);
    if (a4 >> 61) {
      size_t v10 = -1LL;
    }
    else {
      size_t v10 = 8 * a4;
    }
    int v11 = (size_t *)operator new[](v10);
    unint64_t v12 = v11;
    uint64_t v13 = 0LL;
    if (a4)
    {
      uint8x8_t v14 = a5;
      int64_t v15 = v11;
      unint64_t v16 = a4;
      do
      {
        unint64_t v17 = *v14++;
        size_t v18 = strlen(v17);
        *v15++ = v18;
        v13 += v18 + 1;
        --v16;
      }

      while (v16);
    }

    StringBuffer::reserve((void **)v53, v13 + 1);
    unint64_t v19 = *(_BYTE **)v53;
    if (a4)
    {
      uint64_t v20 = v12;
      do
      {
        uint64_t v21 = *a5++;
        memcpy(v19, v21, *v20);
        size_t v22 = *v20++;
        uint64_t v23 = &v19[v22];
        *uint64_t v23 = 10;
        unint64_t v19 = v23 + 1;
        --a4;
      }

      while (a4);
    }

    *unint64_t v19 = 0;
    operator delete[](v12);
    uint64_t v24 = (GPUTools::DYLockUtils *)(*((void *)a1 + 5) + 144LL);
    GPUTools::DYLockUtils::Lock(v24, v25);
    uint64_t v26 = find_info<std::unordered_map<unsigned int,std::shared_ptr<ProgramInfo>>>( a1,  (void *)(*((void *)a1 + 5) + 104LL),  a2,  1);
    uint64_t v27 = *((void *)v26 + 3);
    *(_BYTE *)(v27 + 377) = 1;
    if (a3 == 36313)
    {
      v27 += 48LL;
    }

    else if (a3 != 35633)
    {
      if (a3 != 35632)
      {
        dy_abort("unknown shader type: 0x%04x", a3);
        __break(1u);
        return;
      }

      v27 += 24LL;
    }

    ProgramShaderInfo::ProgramShaderInfo((ProgramShaderInfo *)&v49, 0, (const ShaderInfo *)&v53);
    unint64_t v28 = *(void *)(v27 + 8);
    if (v28 >= *(void *)(v27 + 16))
    {
      __int128 v29 = std::vector<ProgramShaderInfo>::__push_back_slow_path<ProgramShaderInfo>((char **)v27, (uint64_t)&v49);
      int v30 = (std::__shared_weak_count *)*((void *)&v52 + 1);
      *(void *)(v27 + 8) = v29;
      if (v30)
      {
        p_shared_owners = (unint64_t *)&v30->__shared_owners_;
        do
          unint64_t v32 = __ldaxr(p_shared_owners);
        while (__stlxr(v32 - 1, p_shared_owners));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
    }

    else
    {
      *(_DWORD *)unint64_t v28 = v49;
      *(_OWORD *)(v28 + 8) = v50;
      __int128 v50 = 0uLL;
      *(_OWORD *)(v28 + 24) = v51;
      __int128 v51 = 0uLL;
      *(_OWORD *)(v28 + 40) = v52;
      __int128 v52 = 0uLL;
      *(void *)(v27 + 8) = v28 + 56;
    }

    uint64_t v33 = (std::__shared_weak_count *)*((void *)&v51 + 1);
    if (*((void *)&v51 + 1))
    {
      int v34 = (unint64_t *)(*((void *)&v51 + 1) + 8LL);
      do
        unint64_t v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }

    uint64_t v36 = (std::__shared_weak_count *)*((void *)&v50 + 1);
    if (*((void *)&v50 + 1))
    {
      unint64_t v37 = (unint64_t *)(*((void *)&v50 + 1) + 8LL);
      do
        unint64_t v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }

    (*(void (**)(void, uint64_t, uint64_t, int *))(*((void *)a1 + 4) + 5264LL))( *((void *)a1 + 2),  a2,  35714LL,  &v49);
    if (v49)
    {
      ProgramPipelineInfo::operator=((uint64_t *)(*((void *)v26 + 3) + 144LL), *((uint64_t **)v26 + 3));
    }

    else if (gCheckGLErrors)
    {
      handle_link_program_failure((uint64_t)a1, a2, 1);
    }

    GPUTools::DYLockUtils::Unlock(v24, v39);
    __int128 v40 = v57;
    if (v57)
    {
      int v41 = (unint64_t *)&v57->__shared_owners_;
      do
        unint64_t v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }

    uint64_t v43 = v56;
    if (v56)
    {
      uint64_t v44 = (unint64_t *)&v56->__shared_owners_;
      do
        unint64_t v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }

    unsigned int v46 = v54;
    if (v54)
    {
      uint64_t v47 = (unint64_t *)&v54->__shared_owners_;
      do
        unint64_t v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
  }

void sub_7074( _Unwind_Exception *a1, volatile int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void ShaderInfo::~ShaderInfo(ShaderInfo *this)
{
  unsigned int v2 = (std::__shared_weak_count *)*((void *)this + 5);
  if (!v2) {
    goto LABEL_5;
  }
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    unint64_t v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 3);
    if (!v5) {
      goto LABEL_11;
    }
  }

  else
  {
LABEL_5:
    uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 3);
    if (!v5) {
      goto LABEL_11;
    }
  }

  uint64_t v6 = (unint64_t *)&v5->__shared_owners_;
  do
    unint64_t v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }

char *wrapper_cache_vertex_attrib( char *result, unsigned int a2, int a3, double a4, double a5, double a6, double a7)
{
  unsigned int v12 = a2;
  if (*((_DWORD *)result + 863) > a2 && !*((_DWORD *)result + 851))
  {
    uint64_t v13 = &v12;
    id result = std::__hash_table<std::__hash_value_type<unsigned int,VertexAttribInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,VertexAttribInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,VertexAttribInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,VertexAttribInfo>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>( (uint64_t)(result + 3600),  &v12,  (uint64_t)&std::piecewise_construct,  &v13);
    *((_DWORD *)result + 6) = a3;
    *((double *)result + 4) = a4;
    *((double *)result + 5) = a5;
    *((double *)result + 6) = a6;
    *((double *)result + 7) = a7;
  }

  return result;
}

void __clang_call_terminate(void *a1)
{
}

void *std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<ShaderInfo>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<ShaderInfo>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<ShaderInfo>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<ShaderInfo>>>>::remove@<X0>( void *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }

  else
  {
    v4 &= *(void *)&v3 - 1LL;
  }

  uint64_t v6 = *(void **)(*result + 8 * v4);
  do
  {
    unint64_t v7 = v6;
    uint64_t v6 = (void *)*v6;
  }

  while (v6 != a2);
  if (v7 == result + 2) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }

  else
  {
    v8 &= *(void *)&v3 - 1LL;
  }

  if (v8 != v4)
  {
LABEL_18:
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*a2 + 8LL);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }

    else
    {
      v9 &= *(void *)&v3 - 1LL;
    }

    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*result + 8 * v4) = 0LL;
  }

  uint64_t v10 = *a2;
  if (*a2)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }

    else
    {
      v11 &= *(void *)&v3 - 1LL;
    }

    if (v11 != v4)
    {
      *(void *)(*result + 8 * v11) = v7;
      uint64_t v10 = *a2;
    }
  }

  *unint64_t v7 = v10;
  *a2 = 0LL;
  --result[3];
  *(void *)a3 = a2;
  *(void *)(a3 + 8) = result + 2;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::shared_ptr<ShaderInfo>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::shared_ptr<ShaderInfo>>,void *>>>>::~unique_ptr[abi:ne180100]( uint64_t a1)
{
  unsigned int v2 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      int8x8_t v3 = (std::__shared_weak_count *)v2[4];
      if (v3)
      {
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          unint64_t v5 = __ldaxr(p_shared_owners);
        while (__stlxr(v5 - 1, p_shared_owners));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
    }

    operator delete(v2);
  }

  return a1;
}

uint64_t std::pair<unsigned int const,std::shared_ptr<ShaderInfo>>::~pair(uint64_t result)
{
  uint64_t v1 = result;
  unsigned int v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      unint64_t v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }

  return result;
}

uint64_t std::shared_ptr<ShaderInfo>::~shared_ptr[abi:ne180100](uint64_t result)
{
  uint64_t v1 = result;
  unsigned int v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      unint64_t v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }

  return result;
}

uint64_t ProgramPipelineInfo::operator=(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1)
  {
    std::vector<ProgramShaderInfo>::__clear[abi:ne180100]((uint64_t *)a1);
    operator delete(*(void **)a1);
    *(void *)a1 = 0LL;
    *(void *)(a1 + 8) = 0LL;
    *(void *)(a1 + 16) = 0LL;
  }

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0LL;
  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  unint64_t v4 = (void **)(a1 + 24);
  if (*(void *)(a1 + 24))
  {
    std::vector<ProgramShaderInfo>::__clear[abi:ne180100]((uint64_t *)(a1 + 24));
    operator delete(*v4);
    *unint64_t v4 = 0LL;
    *(void *)(a1 + 32) = 0LL;
    *(void *)(a1 + 40) = 0LL;
  }

  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0LL;
  *(void *)(a2 + 32) = 0LL;
  *(void *)(a2 + 40) = 0LL;
  unint64_t v5 = (void **)(a1 + 48);
  if (*(void *)(a1 + 48))
  {
    std::vector<ProgramShaderInfo>::__clear[abi:ne180100]((uint64_t *)(a1 + 48));
    operator delete(*v5);
    std::__shared_weak_count *v5 = 0LL;
    *(void *)(a1 + 56) = 0LL;
    *(void *)(a1 + 64) = 0LL;
  }

  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 48) = 0LL;
  *(void *)(a2 + 56) = 0LL;
  *(void *)(a2 + 64) = 0LL;
  uint64_t v6 = (void **)(a1 + 72);
  if (*(void *)(a1 + 72))
  {
    std::vector<ProgramShaderInfo>::__clear[abi:ne180100]((uint64_t *)(a1 + 72));
    operator delete(*v6);
    *uint64_t v6 = 0LL;
    *(void *)(a1 + 80) = 0LL;
    *(void *)(a1 + 88) = 0LL;
  }

  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a2 + 72) = 0LL;
  *(void *)(a2 + 80) = 0LL;
  *(void *)(a2 + 88) = 0LL;
  unint64_t v7 = (void **)(a1 + 96);
  if (*(void *)(a1 + 96))
  {
    std::vector<ProgramShaderInfo>::__clear[abi:ne180100]((uint64_t *)(a1 + 96));
    operator delete(*v7);
    *unint64_t v7 = 0LL;
    *(void *)(a1 + 104) = 0LL;
    *(void *)(a1 + 112) = 0LL;
  }

  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 96) = 0LL;
  *(void *)(a2 + 104) = 0LL;
  *(void *)(a2 + 112) = 0LL;
  __int128 v8 = *(_OWORD *)(a2 + 120);
  *(void *)(a2 + 120) = 0LL;
  *(void *)(a2 + 128) = 0LL;
  unint64_t v9 = *(std::__shared_weak_count **)(a1 + 128);
  *(_OWORD *)(a1 + 120) = v8;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }

  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  return a1;
}

void std::vector<ProgramShaderInfo>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 56LL)
  {
    unint64_t v4 = *(std::__shared_weak_count **)(i - 8);
    if (!v4) {
      goto LABEL_8;
    }
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      unint64_t v7 = *(std::__shared_weak_count **)(i - 24);
      if (!v7) {
        goto LABEL_14;
      }
    }

    else
    {
LABEL_8:
      unint64_t v7 = *(std::__shared_weak_count **)(i - 24);
      if (!v7) {
        goto LABEL_14;
      }
    }

    __int128 v8 = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }

LABEL_14:
    uint64_t v10 = *(std::__shared_weak_count **)(i - 40);
    if (v10)
    {
      unint64_t v11 = (unint64_t *)&v10->__shared_owners_;
      do
        unint64_t v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }

  a1[1] = v2;
}

  GPUTools::ResourceUpdater::_GetCombinedLinkedShaderSource((uint64_t)this, a3 + 21, &__p);
  if ((char)__p.__r_.__value_.__s.__size_ < 0)
  {
    if (!__p.__r_.__value_.__l.__size_) {
      goto LABEL_21;
    }
    uint64_t v13 = (std::string *)__p.__r_.__value_.__r.__words[0];
LABEL_19:
    if (!GPUTools::ResourceUpdater::_UpdateShader(this, v10, (const char *)v13, 0LL, 0LL))
    {
      uint8x8_t v14 = 0;
LABEL_23:
      if ((char)__p.__r_.__value_.__s.__size_ < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (!v14) {
          goto LABEL_33;
        }
      }

      else if (!v14)
      {
        goto LABEL_33;
      }

      goto LABEL_27;
    }

    (*(void (**)(void, void, void))(*((void *)this + 2) + 4784LL))( *(void *)(*((void *)this + 1) + 16LL),  a4,  v10);
LABEL_21:
    uint8x8_t v14 = 1;
    goto LABEL_23;
  }

  if (__p.__r_.__value_.__s.__size_)
  {
    uint64_t v13 = &__p;
    goto LABEL_19;
  }

  ++result[3];
  return result;
}

void ProgramPipelineInfo::~ProgramPipelineInfo(ProgramPipelineInfo *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 16);
  if (!v2) {
    goto LABEL_5;
  }
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    unint64_t v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    unint64_t v5 = (uint64_t *)((char *)this + 96);
    if (!*((void *)this + 12)) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }

  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  unint64_t v5 = (uint64_t *)((char *)this + 96);
  if (*((void *)this + 12))
  {
LABEL_6:
    std::vector<ProgramShaderInfo>::__clear[abi:ne180100](v5);
    operator delete((void *)*v5);
  }

LABEL_7:
  if (*((void *)this + 9))
  {
    std::vector<ProgramShaderInfo>::__clear[abi:ne180100]((uint64_t *)this + 9);
    operator delete(*((void **)this + 9));
  }

  if (*((void *)this + 6))
  {
    std::vector<ProgramShaderInfo>::__clear[abi:ne180100]((uint64_t *)this + 6);
    operator delete(*((void **)this + 6));
  }

  if (*((void *)this + 3))
  {
    std::vector<ProgramShaderInfo>::__clear[abi:ne180100]((uint64_t *)this + 3);
    operator delete(*((void **)this + 3));
  }

  if (*(void *)this)
  {
    std::vector<ProgramShaderInfo>::__clear[abi:ne180100]((uint64_t *)this);
    operator delete(*(void **)this);
  }

void std::vector<ProgramShaderInfo>::__assign_with_size[abi:ne180100]<ProgramShaderInfo*,ProgramShaderInfo*>( uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  uint64_t v9 = *a1;
  if (0x6DB6DB6DB6DB6DB7LL * ((v8 - *a1) >> 3) < a4)
  {
    if (v9)
    {
      std::vector<ProgramShaderInfo>::__clear[abi:ne180100](a1);
      operator delete((void *)*a1);
      uint64_t v8 = 0LL;
      *a1 = 0LL;
      a1[1] = 0LL;
      a1[2] = 0LL;
    }

    if (a4 > 0x492492492492492LL) {
      goto LABEL_67;
    }
    unint64_t v10 = 0x6DB6DB6DB6DB6DB7LL * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    unint64_t v12 = v10 >= 0x249249249249249LL ? 0x492492492492492LL : v11;
    if (v12 > 0x492492492492492LL) {
LABEL_67:
    }
      std::vector<ProgramShaderInfo>::__throw_length_error[abi:ne180100]();
    uint64_t v13 = 7 * v12;
    uint8x8_t v14 = operator new(56 * v12);
    *a1 = (uint64_t)v14;
    a1[1] = (uint64_t)v14;
    a1[2] = (uint64_t)&v14[v13];
    while (v6 != a3)
    {
      *(_DWORD *)uint8x8_t v14 = *(_DWORD *)v6;
      uint64_t v15 = *(void *)(v6 + 16);
      v14[1] = *(void *)(v6 + 8);
      v14[2] = v15;
      if (v15)
      {
        unint64_t v16 = (unint64_t *)(v15 + 8);
        do
          unint64_t v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }

      uint64_t v18 = *(void *)(v6 + 32);
      v14[3] = *(void *)(v6 + 24);
      v14[4] = v18;
      if (v18)
      {
        unint64_t v19 = (unint64_t *)(v18 + 8);
        do
          unint64_t v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }

      uint64_t v21 = *(void *)(v6 + 48);
      v14[5] = *(void *)(v6 + 40);
      v14[6] = v21;
      if (v21)
      {
        size_t v22 = (unint64_t *)(v21 + 8);
        do
          unint64_t v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }

      v6 += 56LL;
      v14 += 7;
    }

    a1[1] = (uint64_t)v14;
    return;
  }

  uint64_t v24 = a1[1];
  if (0x6DB6DB6DB6DB6DB7LL * ((v24 - v9) >> 3) >= a4)
  {
    if (a2 == a3)
    {
      uint64_t v37 = *a1;
    }

    else
    {
      uint64_t v37 = *a1;
      do
      {
        ProgramShaderInfo::operator=(v9, v6);
        v6 += 56LL;
        v9 += 56LL;
        v37 += 56LL;
      }

      while (v6 != a3);
      uint64_t v24 = a1[1];
    }

    while (1)
    {
      if (v24 == v37)
      {
        a1[1] = v37;
        return;
      }

      unint64_t v38 = *(std::__shared_weak_count **)(v24 - 8);
      if (!v38) {
        goto LABEL_55;
      }
      p_shared_owners = (unint64_t *)&v38->__shared_owners_;
      do
        unint64_t v40 = __ldaxr(p_shared_owners);
      while (__stlxr(v40 - 1, p_shared_owners));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
        int v41 = *(std::__shared_weak_count **)(v24 - 24);
        if (!v41) {
          goto LABEL_61;
        }
      }

      else
      {
LABEL_55:
        int v41 = *(std::__shared_weak_count **)(v24 - 24);
        if (!v41) {
          goto LABEL_61;
        }
      }

      unint64_t v42 = (unint64_t *)&v41->__shared_owners_;
      do
        unint64_t v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }

LABEL_61:
      uint64_t v44 = *(std::__shared_weak_count **)(v24 - 40);
      if (v44)
      {
        unint64_t v45 = (unint64_t *)&v44->__shared_owners_;
        do
          unint64_t v46 = __ldaxr(v45);
        while (__stlxr(v46 - 1, v45));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
        }
      }

      v24 -= 56LL;
    }
  }

  uint64_t v25 = a2 + 8 * ((v24 - v9) >> 3);
  if (v24 != v9)
  {
    uint64_t v26 = 8 * ((v24 - v9) >> 3);
    do
    {
      ProgramShaderInfo::operator=(v9, v6);
      v6 += 56LL;
      v9 += 56LL;
      v26 -= 56LL;
    }

    while (v26);
    uint64_t v9 = a1[1];
  }

  uint64_t v27 = v9;
  if (v25 != a3)
  {
    uint64_t v27 = v9;
    do
    {
      *(_DWORD *)uint64_t v27 = *(_DWORD *)v25;
      uint64_t v28 = *(void *)(v25 + 16);
      *(void *)(v27 + 8) = *(void *)(v25 + 8);
      *(void *)(v27 + 16) = v28;
      if (v28)
      {
        __int128 v29 = (unint64_t *)(v28 + 8);
        do
          unint64_t v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
      }

      uint64_t v31 = *(void *)(v25 + 32);
      *(void *)(v27 + 24) = *(void *)(v25 + 24);
      *(void *)(v27 + 32) = v31;
      if (v31)
      {
        unint64_t v32 = (unint64_t *)(v31 + 8);
        do
          unint64_t v33 = __ldxr(v32);
        while (__stxr(v33 + 1, v32));
      }

      uint64_t v34 = *(void *)(v25 + 48);
      *(void *)(v27 + 40) = *(void *)(v25 + 40);
      *(void *)(v27 + 48) = v34;
      if (v34)
      {
        unint64_t v35 = (unint64_t *)(v34 + 8);
        do
          unint64_t v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }

      v25 += 56LL;
      v27 += 56LL;
    }

    while (v25 != a3);
  }

  a1[1] = v27;
}

uint64_t ProgramShaderInfo::operator=(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4)
  {
    uint64_t v6 = (unint64_t *)(v4 + 8);
    do
      unint64_t v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }

  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 16);
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v4;
  if (!v8) {
    goto LABEL_8;
  }
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    unint64_t v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    uint64_t v12 = *(void *)(a2 + 24);
    uint64_t v11 = *(void *)(a2 + 32);
    if (!v11) {
      goto LABEL_11;
    }
  }

  else
  {
LABEL_8:
    uint64_t v12 = *(void *)(a2 + 24);
    uint64_t v11 = *(void *)(a2 + 32);
    if (!v11) {
      goto LABEL_11;
    }
  }

  uint64_t v13 = (unint64_t *)(v11 + 8);
  do
    unint64_t v14 = __ldxr(v13);
  while (__stxr(v14 + 1, v13));
LABEL_11:
  uint64_t v15 = *(std::__shared_weak_count **)(a1 + 32);
  *(void *)(a1 + 24) = v12;
  *(void *)(a1 + 32) = v11;
  if (!v15) {
    goto LABEL_15;
  }
  unint64_t v16 = (unint64_t *)&v15->__shared_owners_;
  do
    unint64_t v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    uint64_t v19 = *(void *)(a2 + 40);
    uint64_t v18 = *(void *)(a2 + 48);
    if (!v18) {
      goto LABEL_18;
    }
  }

  else
  {
LABEL_15:
    uint64_t v19 = *(void *)(a2 + 40);
    uint64_t v18 = *(void *)(a2 + 48);
    if (!v18) {
      goto LABEL_18;
    }
  }

  unint64_t v20 = (unint64_t *)(v18 + 8);
  do
    unint64_t v21 = __ldxr(v20);
  while (__stxr(v21 + 1, v20));
LABEL_18:
  size_t v22 = *(std::__shared_weak_count **)(a1 + 48);
  *(void *)(a1 + 40) = v19;
  *(void *)(a1 + 48) = v18;
  if (!v22) {
    return a1;
  }
  unint64_t v23 = (unint64_t *)&v22->__shared_owners_;
  do
    unint64_t v24 = __ldaxr(v23);
  while (__stlxr(v24 - 1, v23));
  if (v24) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
  std::__shared_weak_count::__release_weak(v22);
  return a1;
}

void std::vector<ProgramShaderInfo>::__throw_length_error[abi:ne180100]()
{
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
}

void sub_7DB0(_Unwind_Exception *a1)
{
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  id result = std::logic_error::logic_error(a1, a2);
  return result;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,unsigned int>>( uint64_t a1, unsigned int *a2, void *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }

    else
    {
      unint64_t v3 = ((_DWORD)v7 - 1) & v6;
    }

    uint64_t v9 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      unint64_t v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == v6)
            {
              if (*((_DWORD *)v10 + 4) == (_DWORD)v6) {
                return v10;
              }
            }

            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }

            unint64_t v10 = (uint64_t *)*v10;
            if (!v10) {
              goto LABEL_23;
            }
          }
        }

        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6) {
              return v10;
            }
          }

          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }

          unint64_t v10 = (uint64_t *)*v10;
        }

        while (v10);
      }
    }
  }

LABEL_60:
  ++*(void *)(a1 + 24);
  return v14;
}

  ++*(void *)(a1 + 24);
  return v15;
}

  ++*(void *)(a1 + 24);
  return v15;
}

  ++*(void *)(a1 + 24);
  return v15;
}

  ++*(void *)(a1 + 24);
  return v15;
}

    unint64_t v40 = 0xFFFFFFFFLL;
    GPUTools::FB::Encode((uint64_t)v64, 4294955008LL, (uint64_t)"i", v24, v25, v26, v27, v28, -1);
LABEL_30:
    int v41 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v39), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v41) {
      int v41 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v64, v42);
    }
    uint64_t v44 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v44) {
      int v41 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v64, v44, v43);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v41), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)v64);
    }
    unint64_t v45 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)v64);
    unint64_t v46 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v46 && gBreakOnError)
    {
      uint32x4_t v60 = 3LL;
      uint32x4_t v61 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v23 & 2) == 0) {
        goto LABEL_39;
      }
      uint32x4_t v60 = 2LL;
      uint32x4_t v61 = 299LL;
    }

    breakpoint_break((uint64_t)v64, (volatile int *)v61, v60, v46, v11);
LABEL_39:
    uint64_t v47 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v45) defaultFbufStream];
    unint64_t v48 = (unsigned int *)((char *)v47 + 56);
    do
      int v49 = __ldaxr(v48);
    while (__stlxr(1u, v48));
    if (v49 == 1)
    {
      do
      {
        while (*v48 == 1)
          ;
        do
          __int128 v50 = __ldaxr(v48);
        while (__stlxr(1u, v48));
      }

      while (v50 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v47, (GPUTools::FB::Fbuf *)v64, *(unsigned int *)v64[0], 1);
    atomic_store(0, v48);
    do
    {
      __int128 v51 = __ldaxr(v12);
      __int128 v52 = v51 - 1;
    }

    while (__stlxr(v52, v12));
    if (gCheckGLErrors) {
      uint64_t v53 = v52 < 1;
    }
    else {
      uint64_t v53 = 1;
    }
    if (!v53) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    goto LABEL_52;
  }

  do
    int64_t v55 = __ldaxr(v12);
  while (__stlxr(v55 - 1, v12));
  [(id)DYGetGLGuestAppClient(v21) triggerArmedCapture];
  unint64_t v40 = (*(uint64_t (**)(__GLIContextRec *, void *, const char *))(*(void *)(v11 + 24) + 5000LL))( a1,  a2,  a3);
LABEL_52:
  if (v64[0]) {
    free(v64[0]);
  }
  return v40;
}

  ++*(void *)(a1 + 24);
  return v14;
}

void sub_8110(_Unwind_Exception *a1)
{
}

void std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__do_rehash<true>( uint64_t a1, unint64_t a2)
{
  if (!a2)
  {
    float v15 = *(void **)a1;
    *(void *)a1 = 0LL;
    if (v15) {
      operator delete(v15);
    }
    *(void *)(a1 + 8) = 0LL;
    return;
  }

  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v4 = operator new(8 * a2);
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = 0LL;
  *(void *)(a1 + 8) = a2;
  do
    *(void *)(*(void *)a1 + 8 * v6++) = 0LL;
  while (a2 != v6);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void **)(a1 + 16);
  if (v7)
  {
    unint64_t v9 = v7[1];
    unint64_t v10 = a2 - 1;
    if ((a2 & (a2 - 1)) == 0)
    {
      uint64_t v11 = v9 & v10;
      *(void *)(*(void *)a1 + 8 * v11) = v8;
      while (1)
      {
        uint64_t v12 = (void *)*v7;
        if (!*v7) {
          break;
        }
        uint64_t v13 = v12[1] & v10;
        if (v13 == v11)
        {
          unint64_t v7 = (void *)*v7;
        }

        else if (*(void *)(*(void *)a1 + 8 * v13))
        {
          *unint64_t v7 = *v12;
          uint64_t v14 = 8 * v13;
          *uint64_t v12 = **(void **)(*(void *)a1 + v14);
          **(void **)(*(void *)a1 + v14) = v12;
        }

        else
        {
          *(void *)(*(void *)a1 + 8 * v13) = v7;
          unint64_t v7 = v12;
          uint64_t v11 = v13;
        }
      }

      return;
    }

    if (v9 >= a2) {
      v9 %= a2;
    }
    *(void *)(*(void *)a1 + 8 * v9) = v8;
    float v16 = (void *)*v7;
    if (*v7)
    {
      while (1)
      {
        unint64_t v18 = v16[1];
        if (v18 >= a2) {
          v18 %= a2;
        }
        if (v18 == v9) {
          goto LABEL_25;
        }
        if (*(void *)(*(void *)a1 + 8 * v18))
        {
          *unint64_t v7 = *v16;
          uint64_t v17 = 8 * v18;
          void *v16 = **(void **)(*(void *)a1 + v17);
          **(void **)(*(void *)a1 + v17) = v16;
          float v16 = v7;
LABEL_25:
          unint64_t v7 = v16;
          float v16 = (void *)*v16;
          if (!v16) {
            return;
          }
        }

        else
        {
          *(void *)(*(void *)a1 + 8 * v18) = v7;
          unint64_t v7 = v16;
          float v16 = (void *)*v16;
          unint64_t v9 = v18;
          if (!v16) {
            return;
          }
        }
      }
    }
  }

char *std::vector<std::string>::__push_back_slow_path<std::string>(void **a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<ProgramShaderInfo>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556LL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4) {
    unint64_t v4 = 0x5555555555555556LL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555LL) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v7 = (char *)operator new(24 * v6);
  }

  else
  {
    unint64_t v7 = 0LL;
  }

  uint64_t v8 = &v7[24 * v3];
  unint64_t v9 = &v7[24 * v6];
  *(_OWORD *)uint64_t v8 = *(_OWORD *)a2;
  *((void *)v8 + 2) = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)a2 = 0LL;
  unint64_t v10 = v8 + 24;
  uint64_t v11 = (char *)*a1;
  uint64_t v12 = (char *)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    if (!v12) {
      return v10;
    }
    goto LABEL_20;
  }

  do
  {
    __int128 v13 = *(_OWORD *)(v12 - 24);
    *((void *)v8 - 1) = *((void *)v12 - 1);
    *(_OWORD *)(v8 - 24) = v13;
    v8 -= 24;
    *((void *)v12 - 2) = 0LL;
    *((void *)v12 - 1) = 0LL;
    *((void *)v12 - 3) = 0LL;
    v12 -= 24;
  }

  while (v12 != v11);
  uint64_t v14 = (char *)*a1;
  uint64_t v12 = (char *)a1[1];
  *a1 = v8;
  a1[1] = v10;
  a1[2] = v9;
  if (v12 != v14)
  {
    do
    {
      if (*(v12 - 1) < 0) {
        operator delete(*((void **)v12 - 3));
      }
      v12 -= 24;
    }

    while (v12 != v14);
    uint64_t v12 = v14;
  }

  if (v12) {
LABEL_20:
  }
    operator delete(v12);
  return v10;
}

void std::__shared_ptr_emplace<ShaderInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1F8C60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ShaderInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1F8C60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<ShaderInfo>::__on_zero_shared(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[8];
  if (!v2) {
    goto LABEL_5;
  }
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    unint64_t v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v5 = (std::__shared_weak_count *)a1[6];
    if (!v5) {
      goto LABEL_11;
    }
  }

  else
  {
LABEL_5:
    uint64_t v5 = (std::__shared_weak_count *)a1[6];
    if (!v5) {
      goto LABEL_11;
    }
  }

  unint64_t v6 = (unint64_t *)&v5->__shared_owners_;
  do
    unint64_t v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }

char *std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<ShaderInfo>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<ShaderInfo>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<ShaderInfo>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<ShaderInfo>>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,std::shared_ptr<ShaderInfo>>>( uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }

    else
    {
      unint64_t v3 = ((_DWORD)v7 - 1) & v6;
    }

    unint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      unint64_t v10 = (char *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = *((void *)v10 + 1);
            if (v12 == v6)
            {
              if (*((_DWORD *)v10 + 4) == (_DWORD)v6) {
                return v10;
              }
            }

            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }

            unint64_t v10 = *(char **)v10;
            if (!v10) {
              goto LABEL_23;
            }
          }
        }

        do
        {
          unint64_t v11 = *((void *)v10 + 1);
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6) {
              return v10;
            }
          }

          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }

          unint64_t v10 = *(char **)v10;
        }

        while (v10);
      }
    }
  }

LABEL_62:
  ++*(void *)(a1 + 24);
  return v10;
}

  ++*(void *)(a1 + 24);
  return v10;
}

  ++*(void *)(a1 + 24);
  return v18;
}

  ++*(void *)(a1 + 24);
  return v17;
}

void sub_8868(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void std::__shared_ptr_emplace<StringBuffer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1F8C98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<StringBuffer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1F8C98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<StringBuffer>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<ProgramInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1F8CD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ProgramInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1F8CD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<ProgramInfo>::__on_zero_shared(uint64_t a1)
{
}

void std::allocator<ProgramInfo>::destroy[abi:ne180100](uint64_t a1, void *a2)
{
  unint64_t v3 = (void *)a2[43];
  if (v3)
  {
    do
    {
      unint64_t v4 = (void *)*v3;
      operator delete(v3);
      unint64_t v3 = v4;
    }

    while (v4);
  }

  uint64_t v5 = (void *)a2[41];
  a2[41] = 0LL;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = a2[37];
  if (v6)
  {
    uint64_t v7 = a2[38];
    uint8x8_t v8 = (void *)a2[37];
    if (v7 != v6)
    {
      do
      {
        v7 -= 24LL;
      }

      while (v7 != v6);
      uint8x8_t v8 = (void *)a2[37];
    }

    a2[38] = v6;
    operator delete(v8);
  }

  ProgramPipelineInfo::~ProgramPipelineInfo((ProgramPipelineInfo *)(a2 + 18));
  ProgramPipelineInfo::~ProgramPipelineInfo((ProgramPipelineInfo *)a2);
}

char *std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<ProgramInfo>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<ProgramInfo>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<ProgramInfo>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<ProgramInfo>>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,std::shared_ptr<ProgramInfo>>>( uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }

    else
    {
      unint64_t v3 = ((_DWORD)v7 - 1) & v6;
    }

    unint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      unint64_t v10 = (char *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = *((void *)v10 + 1);
            if (v12 == v6)
            {
              if (*((_DWORD *)v10 + 4) == (_DWORD)v6) {
                return v10;
              }
            }

            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }

            unint64_t v10 = *(char **)v10;
            if (!v10) {
              goto LABEL_23;
            }
          }
        }

        do
        {
          unint64_t v11 = *((void *)v10 + 1);
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6) {
              return v10;
            }
          }

          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }

          unint64_t v10 = *(char **)v10;
        }

        while (v10);
      }
    }
  }

void sub_8CD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

char *std::vector<ProgramShaderInfo>::__push_back_slow_path<ProgramShaderInfo>(char **a1, uint64_t a2)
{
  uint64_t v3 = 0x6DB6DB6DB6DB6DB7LL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3);
  }
  else {
    unint64_t v5 = v4;
  }
  if (v5 > 0x492492492492492LL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v7 = 56 * v5;
  uint8x8_t v8 = (char *)operator new(56 * v5);
  unint64_t v9 = &v8[56 * v3];
  *(_DWORD *)unint64_t v9 = *(_DWORD *)a2;
  unint64_t v10 = &v8[v7];
  *(_OWORD *)(v9 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(_OWORD *)(v9 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a2 + 24) = 0LL;
  *(void *)(a2 + 32) = 0LL;
  *(_OWORD *)(v9 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  *(void *)(a2 + 48) = 0LL;
  unint64_t v11 = v9 + 56;
  uint64_t v12 = *a1;
  __int128 v13 = a1[1];
  if (v13 == *a1)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
    if (!v13) {
      return v11;
    }
    goto LABEL_30;
  }

  do
  {
    int v14 = *((_DWORD *)v13 - 14);
    v13 -= 56;
    *((_DWORD *)v9 - 14) = v14;
    v9 -= 56;
    *(_OWORD *)(v9 + 8) = *(_OWORD *)(v13 + 8);
    *((void *)v13 + 1) = 0LL;
    *((void *)v13 + 2) = 0LL;
    *(_OWORD *)(v9 + 24) = *(_OWORD *)(v13 + 24);
    *((void *)v13 + 3) = 0LL;
    *((void *)v13 + 4) = 0LL;
    *(_OWORD *)(v9 + 40) = *(_OWORD *)(v13 + 40);
    *((void *)v13 + 5) = 0LL;
    *((void *)v13 + 6) = 0LL;
  }

  while (v13 != v12);
  float v15 = *a1;
  __int128 v13 = a1[1];
  *a1 = v9;
  a1[1] = v11;
  a1[2] = v10;
  if (v13 != v15)
  {
    while (1)
    {
      uint64_t v16 = (std::__shared_weak_count *)*((void *)v13 - 1);
      if (!v16) {
        goto LABEL_17;
      }
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        unint64_t v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
        unint64_t v19 = (std::__shared_weak_count *)*((void *)v13 - 3);
        if (v19)
        {
LABEL_18:
          unint64_t v20 = (unint64_t *)&v19->__shared_owners_;
          do
            unint64_t v21 = __ldaxr(v20);
          while (__stlxr(v21 - 1, v20));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
      }

      else
      {
LABEL_17:
        unint64_t v19 = (std::__shared_weak_count *)*((void *)v13 - 3);
        if (v19) {
          goto LABEL_18;
        }
      }

      int8x8_t v22 = (std::__shared_weak_count *)*((void *)v13 - 5);
      if (v22)
      {
        unint64_t v23 = (unint64_t *)&v22->__shared_owners_;
        do
          unint64_t v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }

      v13 -= 56;
      if (v13 == v15)
      {
        __int128 v13 = v15;
        break;
      }
    }
  }

  if (v13) {
LABEL_30:
  }
    operator delete(v13);
  return v11;
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,ActiveTransformFeedbackInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ActiveTransformFeedbackInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ActiveTransformFeedbackInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ActiveTransformFeedbackInfo>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>( uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }

    else
    {
      unint64_t v4 = ((_DWORD)v8 - 1) & v7;
    }

    unint64_t v10 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      unint64_t v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v13 = v11[1];
            if (v13 == v7)
            {
              if (*((_DWORD *)v11 + 4) == (_DWORD)v7) {
                return v11;
              }
            }

            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }

            unint64_t v11 = (uint64_t *)*v11;
            if (!v11) {
              goto LABEL_23;
            }
          }
        }

        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7) {
              return v11;
            }
          }

          else
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
            if (v12 != v4) {
              break;
            }
          }

          unint64_t v11 = (uint64_t *)*v11;
        }

        while (v11);
      }
    }
  }

void sub_9214(_Unwind_Exception *a1)
{
}

char *std::__hash_table<std::__hash_value_type<unsigned int,VertexAttribInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,VertexAttribInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,VertexAttribInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,VertexAttribInfo>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>( uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }

    else
    {
      unint64_t v4 = ((_DWORD)v8 - 1) & v7;
    }

    unint64_t v10 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      unint64_t v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v13 = v11[1];
            if (v13 == v7)
            {
              if (*((_DWORD *)v11 + 4) == (_DWORD)v7) {
                return (char *)v11;
              }
            }

            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }

            unint64_t v11 = (uint64_t *)*v11;
            if (!v11) {
              goto LABEL_23;
            }
          }
        }

        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7) {
              return (char *)v11;
            }
          }

          else
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
            if (v12 != v4) {
              break;
            }
          }

          unint64_t v11 = (uint64_t *)*v11;
        }

        while (v11);
      }
    }
  }

void sub_9528(_Unwind_Exception *a1)
{
}

void DYGLCommonInit()
{
  v0 = (GPUTools::Interpose *)pthread_key_create((pthread_key_t *)&qword_207320, 0LL);
  char v1 = (GPUTools::Interpose *)GPUTools::Interpose::DYFetchSandboxEntitlements(v0);
  uint64_t v2 = (ContextInfo *)GPUTools::Interpose::DYFetchSandboxEntitlements(v1);
  ContextInfo::initialize(v2);
  init_vertex_arrays();
}

uint64_t validate_inbound_context_id(uint64_t a1)
{
  if (gDYContextRemappingBlock) {
    uint64_t v2 = (*(uint64_t (**)(void))(gDYContextRemappingBlock + 16))();
  }
  else {
    uint64_t v2 = a1;
  }
  uint64_t v5 = 0LL;
  unint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000LL;
  char v8 = 0;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = __validate_inbound_context_id_block_invoke;
  v4[3] = &unk_1F8D00;
  v4[4] = v2;
  v4[5] = &v5;
  iter_contexts((uint64_t)v4);
  if (*((_BYTE *)v6 + 24))
  {
    _Block_object_dispose(&v5, 8);
    return v2;
  }

  else
  {
    uint64_t result = dy_abort("invalid context identifier: %llu", a1);
    __break(1u);
  }

  return result;
}

void sub_964C(_Unwind_Exception *a1)
{
}

uint64_t iter_contexts(uint64_t a1)
{
  uint64_t v2 = (dispatch_semaphore_s *)[(id)DYGetGLGuestAppClient(a1) graphicsSemaphore];
  dispatch_semaphore_wait(v2, 0xFFFFFFFFFFFFFFFFLL);
  char v9 = 0;
  uint64_t v3 = ContextInfo::activeCtxInfoMap + 8;
  unint64_t v4 = *(void **)ContextInfo::activeCtxInfoMap;
  if (*(void *)ContextInfo::activeCtxInfoMap != ContextInfo::activeCtxInfoMap + 8)
  {
    do
    {
      (*(void (**)(uint64_t, void, char *))(a1 + 16))(a1, v4[5], &v9);
      if (v9) {
        break;
      }
      unint64_t v6 = (void *)v4[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          unint64_t v6 = (void *)*v6;
        }

        while (v6);
      }

      else
      {
        do
        {
          uint64_t v7 = (void *)v4[2];
          BOOL v8 = *v7 == (void)v4;
          unint64_t v4 = v7;
        }

        while (!v8);
      }

      unint64_t v4 = v7;
    }

    while (v7 != (void *)v3);
  }

  return dispatch_semaphore_signal(v2);
}

void sub_9720(_Unwind_Exception *a1)
{
}

uint64_t __validate_inbound_context_id_block_invoke(uint64_t result, void *a2, _BYTE *a3)
{
  if (*(void *)(result + 32) == *a2)
  {
    *a3 = 1;
    *(_BYTE *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = 1;
  }

  return result;
}

uint64_t (**choose_dispatch_table(uint64_t a1))(__GLIContextRec **)
{
  id v1 = [(id)DYGetGLGuestAppClient(a1) traceMode];
  int v2 = (_DWORD)v1 - 1;
  unsigned int v4 = [(id)DYGetGLGuestAppClient(v1) traceMode];
  uint64_t v5 = dy_abort("unknown trace mode: %d", v4);
  return (uint64_t (**)(__GLIContextRec **))update_dispatch_table(v5);
}

uint64_t update_dispatch_table(uint64_t a1)
{
  id v2 = [(id)DYGetGLGuestAppClient(a1) traceMode];
  int v3 = (_DWORD)v2 - 1;
  unsigned int v5 = [(id)DYGetGLGuestAppClient(v2) traceMode];
  uint64_t v6 = dy_abort("unknown trace mode: %d", v5);
  return disable_buffer_swaps(v6);
}

uint64_t disable_buffer_swaps(uint64_t result)
{
  gDisableBufferSwaps = result;
  return result;
}

uint64_t context_enable_capturing(uint64_t result)
{
  if (!*(_BYTE *)(result + 4837))
  {
    *(_BYTE *)(result + 4837) = 1;
    return install_dispatch_table(*(void *)result, (uint64_t)&gCaptureDispatchTable);
  }

  return result;
}

void harvest_contexts(uint64_t a1, char a2)
{
  CFMutableSetRef Mutable = CFSetCreateMutable(kCFAllocatorDefault, 0LL, 0LL);
  GPUTools::FB::Stream::Stream(v8, &__block_literal_global, 0LL);
  v7[0] = 0LL;
  v7[1] = v7;
  v7[2] = 0x2020000000LL;
  v7[3] = v8;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = __harvest_contexts_block_invoke_2;
  v5[3] = &unk_1F8D68;
  v5[5] = v7;
  v5[6] = Mutable;
  v5[4] = a1;
  char v6 = a2;
  iter_contexts((uint64_t)v5);
  CFRelease(Mutable);
  _Block_object_dispose(v7, 8);
  GPUTools::FB::Stream::~Stream((GPUTools::FB::Stream *)v8);
}

void sub_993C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  GPUTools::FB::Stream::~Stream((GPUTools::FB::Stream *)va1);
  _Unwind_Resume(a1);
}

void __harvest_contexts_block_invoke(id a1, Stream *a2)
{
  int v3 = (GPUTools::Interpose *)DYGetGLGuestAppClient(a1);
  GPUTools::Interpose::DYFlushFbufStream(v3, (DYGuestAppClient *)a2, v4);
}

void __harvest_contexts_block_invoke_2(uint64_t a1, ContextInfo *a2)
{
  unsigned int v4 = (const void *)**((void **)a2 + 5);
  int v5 = CFSetContainsValue(*(CFSetRef *)(a1 + 48), v4);
  if (!v5) {
    CFSetAddValue(*(CFMutableSetRef *)(a1 + 48), v4);
  }
  char v6 = (uint64_t *)&kDYFunctionStreamNameSharegroup;
  if (v5) {
    char v6 = (uint64_t *)&kDYFunctionStreamNameState;
  }
  uint64_t v7 = *v6;
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)a2;
  if (v8) {
    uint64_t v10 = +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@-%@-%p", v8, v7, v9);
  }
  else {
    uint64_t v10 = +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@-%p", v7, v9, v15);
  }
  GPUTools::FB::Stream::Open(*(GPUTools::FB::Stream **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL), v10);
  ContextHarvester::ContextHarvester( (ContextHarvester *)v16,  a2,  *(GPUTools::FB::Stream **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL));
  ContextHarvester::HarvestAll((ContextHarvester *)v16, v5 == 0, *(_BYTE *)(a1 + 56));
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
  uint64_t v12 = (unsigned int *)(v11 + 56);
  do
    unsigned int v13 = __ldaxr(v12);
  while (__stlxr(1u, v12));
  if (v13 == 1)
  {
    do
    {
      while (*v12 == 1)
        ;
      do
        unsigned int v14 = __ldaxr(v12);
      while (__stlxr(1u, v12));
    }

    while (v14 == 1);
  }

  (*(void (**)(void))(*(void *)(v11 + 40) + 16LL))();
  *(void *)(v11 + 16) = *(void *)(v11 + 8) + 8LL;
  *(_BYTE *)(v11 + 60) = 1;
  atomic_store(0, (unsigned int *)(v11 + 56));
  GPUTools::FB::Stream::Close(*(GPUTools::FB::Stream **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL));
  ContextHarvester::~ContextHarvester((ContextHarvester *)v16);
}

void sub_9B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void sub_9B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

id handle_frame_boundary(uint64_t a1)
{
  uint64_t v2 = a1 + 4837;
  id v3 = [(id)DYGetGLGuestAppClient(a1) incrementGlobalFrameCounter];
  int v4 = (int)v3;
  if (*(_BYTE *)v2)
  {
    ++*(_DWORD *)(a1 + 168);
  }

  uint64_t v5 = mach_absolute_time();
  *(void *)(a1 + 3720) = v5;
  *(_WORD *)(v2 + 1) = 0;
  if ((gProfilingFlags & 3) != 0)
  {
    GPUTools::DYLockUtils::Lock((GPUTools::DYLockUtils *)&unk_207314, v6);
    unint64_t v7 = *(void *)(a1 + 3720) - qword_207330;
    if (g_DYTimebaseInfo == *((_DWORD *)&g_DYTimebaseInfo + 1))
    {
      uint64_t v8 = objc_autoreleasePoolPush();
      char v9 = gProfilingFlags;
      if ((gProfilingFlags & 2) == 0)
      {
LABEL_7:
        uint64_t v10 = 0LL;
        int v11 = 0;
        if ((v9 & 1) == 0 || v7 <= gProfilingSendPeriod) {
          goto LABEL_18;
        }
LABEL_16:
        unsigned int v14 = copy_profiling_data_dictionary((ContextInfo *)a1, v4, v7);
        uint64_t v10 = v14;
LABEL_17:
        objc_msgSend( (id)DYGetGLGuestAppClient(v14),  "sendMessage:",  +[DYTransportMessage messageWithKind:plistPayload:]( DYTransportMessage,  "messageWithKind:plistPayload:",  1541,  v10));
        int v11 = 1;
LABEL_18:

        objc_autoreleasePoolPop(v8);
        if (v11) {
          qword_207330 = mach_absolute_time();
        }
        uint64_t v5 = GPUTools::DYLockUtils::Unlock((GPUTools::DYLockUtils *)&unk_207314, v15);
        return [(id)DYGetGLGuestAppClient(v5) handleFrameBoundaryCommon];
      }
    }

    else
    {
      unint64_t v7 = __udivti3(v7 * g_DYTimebaseInfo, (v7 * (unsigned __int128)g_DYTimebaseInfo) >> 64);
      uint64_t v8 = objc_autoreleasePoolPush();
      char v9 = gProfilingFlags;
      if ((gProfilingFlags & 2) == 0) {
        goto LABEL_7;
      }
    }

    uint64_t v10 = copy_profiling_data_dictionary((ContextInfo *)a1, v4, v7);
    GPUTools::DYLockUtils::Lock((GPUTools::DYLockUtils *)&_MergedGlobals, v12);
    if ((NSMutableDictionary *)qword_207328 != v10)
    {

      qword_207328 = v10;
    }

    unsigned int v14 = (NSMutableDictionary *)GPUTools::DYLockUtils::Unlock((GPUTools::DYLockUtils *)&_MergedGlobals, v13);
    int v11 = 1;
    if ((gProfilingFlags & 1) == 0 || v7 <= gProfilingSendPeriod) {
      goto LABEL_18;
    }
    if (v10) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }

  return [(id)DYGetGLGuestAppClient(v5) handleFrameBoundaryCommon];
}

void sub_9D2C(_Unwind_Exception *a1, volatile int *a2)
{
}

uint64_t save_texture( uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, GPUTools::GL *this, unsigned int a6, int a7, int a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  uint64_t v17 = *(void *)(a1 + 32);
  uint64_t v33 = 0LL;
  *(void *)uint64_t v34 = 0LL;
  uint64_t v31 = 0LL;
  uint64_t v32 = 0LL;
  BOOL v18 = (GPUTools::GL *)GPUTools::GL::dy_pixel_group_size(this, a4, a3);
  if (!*(_BYTE *)(a1 + 4861)
    || ((*(void (**)(uint64_t, uint64_t, char *))(v17 + 832))(a2, 35350LL, (char *)&v31 + 4),
        uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(v17 + 832))(a2, 35352LL, &v31),
        !HIDWORD(v31)))
  {
    (*(void (**)(uint64_t, uint64_t, int *))(v17 + 832))(a2, 3317LL, &v34[1]);
    int v21 = 0;
    unsigned int v22 = *(_DWORD *)(a1 + 3456);
    if (v22 <= 4 && ((1 << v22) & 0x19) != 0)
    {
      (*(void (**)(uint64_t, uint64_t, int *))(v17 + 832))(a2, 3314LL, v34);
      int v21 = v34[0];
    }

    uint64_t v19 = GPUTools::GL::dy_pixel_row_bytes(v18, a6, v21, v34[1], v20);
    HIDWORD(v31) = v19;
  }

  unsigned int v23 = *(_DWORD *)(a1 + 3456);
  if (v23 > 4 || ((1 << v23) & 0x19) == 0) {
    goto LABEL_14;
  }
  (*(void (**)(uint64_t, uint64_t, char *))(v17 + 832))(a2, 32878LL, (char *)&v33 + 4);
  if (a9) {
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(v17 + 832))(a2, 32877LL, &v32);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(v17 + 832))(a2, 3315LL, &v33);
  uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t, char *))(v17 + 832))(a2, 3316LL, (char *)&v32 + 4);
  int v24 = HIDWORD(v33);
  if (!HIDWORD(v33))
  {
LABEL_14:
    HIDWORD(v33) = a7;
    int v24 = a7;
    int v26 = v31;
    int v25 = HIDWORD(v31);
    if ((_DWORD)v31) {
      goto LABEL_13;
    }
LABEL_15:
    int v26 = v25 * v24;
    LODWORD(v31) = v25 * v24;
    goto LABEL_13;
  }

  int v26 = v31;
  int v25 = HIDWORD(v31);
  if (!(_DWORD)v31) {
    goto LABEL_15;
  }
LABEL_13:
  uint64_t v27 = (a8 + (_DWORD)v32 - 1) * v26 + (a7 + (_DWORD)v33 - 1) * v25 + (HIDWORD(v32) + a6) * v18;
  uint64_t v28 = DYGetGLGuestAppClient(v19);
  return GPUTools::Interpose::DYSavePointer(v28, v27, a10, a11, a12, 0LL, a13, 0LL, 0LL);
}

BOOL is_extension_available(uint64_t a1, const char *a2)
{
  CFStringRef v3 = CFStringCreateWithCStringNoCopy(kCFAllocatorDefault, a2, 0x600u, kCFAllocatorNull);
  BOOL v4 = CFSetGetValue(*(CFSetRef *)(a1 + 64), v3) != 0LL;
  CFRelease(v3);
  return v4;
}

uint64_t query_texture_unit_limits(uint64_t result, _DWORD *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 3456);
  if ((v4 - 2) >= 3)
  {
    if (v4)
    {
      if (v4 != 1) {
        return result;
      }
      int v5 = 34018;
      uint64_t result = (*(uint64_t (**)(void, uint64_t, _DWORD *))(*(void *)(result + 32) + 832LL))( *(void *)(result + 16),  34018LL,  a2 + 2);
      int v7 = a2[2];
      *a2 = v7;
      a2[3] = v7;
      int v6 = 34018;
    }

    else
    {
      int v5 = 34929;
      (*(void (**)(void, uint64_t, _DWORD *))(*(void *)(result + 32) + 832LL))( *(void *)(result + 16),  34929LL,  a2);
      (*(void (**)(void, uint64_t, _DWORD *))(*(void *)(v3 + 32) + 832LL))( *(void *)(v3 + 16),  34018LL,  a2 + 2);
      uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, _DWORD *))(*(void *)(v3 + 32) + 832LL);
      uint64_t v9 = *(void *)(v3 + 16);
      int v6 = 35661;
      uint64_t result = v8(v9, 35661LL, a2 + 3);
    }
  }

  else
  {
    int v5 = 35661;
    uint64_t result = (*(uint64_t (**)(void, uint64_t, _DWORD *))(*(void *)(result + 32) + 832LL))( *(void *)(result + 16),  35661LL,  a2 + 3);
    *a2 = 0;
    a2[2] = 0;
    int v6 = 35661;
  }

  a2[1] = v5;
  a2[4] = v6;
  return result;
}

uint64_t update_context_state_cache(uint64_t a1)
{
  if (*(int *)(a1 + 3460) >= 2)
  {
    (*(void (**)(void, uint64_t, uint64_t))(*(void *)(a1 + 32) + 832LL))( *(void *)(a1 + 16),  35055LL,  a1 + 2044);
    (*(void (**)(void, uint64_t, uint64_t))(*(void *)(a1 + 32) + 832LL))( *(void *)(a1 + 16),  35053LL,  a1 + 2040);
    if (*(int *)(a1 + 3460) >= 3)
    {
      (*(void (**)(void, uint64_t, uint64_t))(*(void *)(a1 + 32) + 832LL))( *(void *)(a1 + 16),  36662LL,  a1 + 2048);
      (*(void (**)(void, uint64_t, uint64_t))(*(void *)(a1 + 32) + 832LL))( *(void *)(a1 + 16),  36663LL,  a1 + 2052);
      (*(void (**)(void, uint64_t, uint64_t))(*(void *)(a1 + 32) + 832LL))( *(void *)(a1 + 16),  35983LL,  a1 + 2060);
      (*(void (**)(void, uint64_t, uint64_t))(*(void *)(a1 + 32) + 832LL))( *(void *)(a1 + 16),  35368LL,  a1 + 2064);
    }
  }

  (*(void (**)(void, uint64_t, uint64_t))(*(void *)(a1 + 32) + 832LL))( *(void *)(a1 + 16),  34016LL,  a1 + 2072);
  if (*(_BYTE *)(a1 + 4858)) {
    (*(void (**)(void, uint64_t, uint64_t))(*(void *)(a1 + 32) + 832LL))( *(void *)(a1 + 16),  34017LL,  a1 + 2076);
  }
  if (*(_DWORD *)(a1 + 3444))
  {
    unsigned int v2 = 0;
    int v3 = 0;
    do
    {
      (*(void (**)(void, void))(*(void *)(a1 + 32) + 2736LL))(*(void *)(a1 + 16), v2 + 33984);
      int v4 = *(unsigned int **)(a1 + 3408);
      int v5 = *(unsigned int **)(a1 + 3416);
      while (v4 != v5)
      {
        unsigned int v6 = *v4++;
        *(void *)((char *)v9 + 7) = 0LL;
        v9[0] = 0LL;
        GPUTools::GL::DYGetTextureTargetInfo(v6, v9);
        (*(void (**)(void, void, unsigned int *))(*(void *)(a1 + 32) + 832LL))( *(void *)(a1 + 16),  HIDWORD(v9[0]),  &v8);
        wrapper_cache_texture_binding(a1, v2, v6, v8);
      }

      unsigned int v2 = ++v3;
    }

    while (*(_DWORD *)(a1 + 3444) > v3);
  }

  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 2736LL))( *(void *)(a1 + 16),  *(unsigned int *)(a1 + 2072));
}

uint64_t query_pipeline_programs(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = 0LL;
  a3[2] = 0LL;
  a3[1] = 0LL;
  unsigned int v6 = a3 + 1;
  (*(void (**)(void, uint64_t, uint64_t, void *))(*(void *)(a1 + 32) + 6608LL))( *(void *)(a1 + 16),  a2,  33369LL,  a3);
  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 32) + 6608LL))( *(void *)(a1 + 16),  a2,  35633LL,  (uint64_t)a3 + 4);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, void *))(*(void *)(a1 + 32) + 6608LL))( *(void *)(a1 + 16),  a2,  35632LL,  v6);
}

void *query_info_log( uint64_t a1, uint64_t a2, void (*a3)(void, uint64_t, uint64_t, int *), void (*a4)(void, uint64_t, size_t, void, void *), int *a5)
{
  size_t v9 = *a5;
  if (!(_DWORD)v9) {
    return 0LL;
  }
  uint64_t v10 = malloc(v9);
  a4(*(void *)(a1 + 16), a2, v9, 0LL, v10);
  return v10;
}

void __GPUTOOLS_HAS_DETECTED_AN_OPENGL_ERROR__()
{
  if (gTrapOnGLError) {
    __break(1u);
  }
}

uint64_t __GPUTOOLS_GET_OPENGL_ERROR__()
{
  return *(unsigned int *)pthread_getspecific(qword_207318);
}

void *__GPUTOOLS_GET_OPENGL_ERROR_LOG__()
{
  uint64_t result = pthread_getspecific(qword_207320);
  if (!result) {
    return &unk_1F0B16;
  }
  return result;
}

uint64_t handle_opengl_error(int a1, const void *a2)
{
  int v4 = a1;
  pthread_setspecific(qword_207318, &v4);
  pthread_setspecific(qword_207320, a2);
  __GPUTOOLS_HAS_DETECTED_AN_OPENGL_ERROR__();
  pthread_setspecific(qword_207318, 0LL);
  return pthread_setspecific(qword_207320, 0LL);
}

uint64_t handle_opengl_thread_conflict(const void **a1)
{
  int v2 = -4;
  pthread_setspecific(qword_207318, &v2);
  pthread_setspecific(qword_207320, __str);
  __GPUTOOLS_HAS_DETECTED_AN_OPENGL_ERROR__();
  pthread_setspecific(qword_207318, 0LL);
  return pthread_setspecific(qword_207320, 0LL);
}

void handle_compile_shader_failure(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  int v5 = *(void (**)(void, uint64_t, uint64_t, void, void *))(v4 + 5272);
  (*(void (**)(void, uint64_t, uint64_t, int *))(v4 + 5256))(*(void *)(a1 + 16), a2, 35716LL, &__size);
  uint64_t v6 = __size;
  if (__size)
  {
    int v7 = malloc(__size);
    v5(*(void *)(a1 + 16), a2, v6, 0LL, v7);
  }

  else
  {
    int v7 = 0LL;
  }

  int __size_4 = -1;
  pthread_setspecific(qword_207318, &__size_4);
  pthread_setspecific(qword_207320, v7);
  __GPUTOOLS_HAS_DETECTED_AN_OPENGL_ERROR__();
  pthread_setspecific(qword_207318, 0LL);
  pthread_setspecific(qword_207320, 0LL);
  free(v7);
}

void handle_link_program_failure(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = *(void *)(a1 + 32);
  int v7 = *(void (**)(void, uint64_t, uint64_t, void, void *))(v6 + 5280);
  (*(void (**)(void, uint64_t, uint64_t, int *))(v6 + 5264))(*(void *)(a1 + 16), a2, 35716LL, &__size);
  uint64_t v8 = __size;
  if (__size)
  {
    size_t v9 = malloc(__size);
    v7(*(void *)(a1 + 16), a2, v8, 0LL, v9);
  }

  else
  {
    size_t v9 = 0LL;
  }

  if (a3) {
    int v10 = -3;
  }
  else {
    int v10 = -2;
  }
  int __size_4 = v10;
  pthread_setspecific(qword_207318, &__size_4);
  pthread_setspecific(qword_207320, v9);
  __GPUTOOLS_HAS_DETECTED_AN_OPENGL_ERROR__();
  pthread_setspecific(qword_207318, 0LL);
  pthread_setspecific(qword_207320, 0LL);
  free(v9);
}

BOOL check_errors(uint64_t a1)
{
  int v2 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 816LL))(*(void *)(a1 + 16));
  int v3 = v2;
  *(_DWORD *)(a1 + 3404) = v2;
  if (!v2) {
    return 0LL;
  }
  if (!*(_DWORD *)(a1 + 3400)) {
    *(_DWORD *)(a1 + 3400) = v2;
  }
  handle_opengl_error(v2, 0LL);
  return v3 != 0;
}

double clear_errors(void *a1)
{
  double result = 0.0;
  a1[425] = 0LL;
  return result;
}

id ReserveGLShader(void *a1, int a2, int a3)
{
  v4[0] = a3;
  v4[1] = a2;
  return [a1 setParameter:1613 to:v4];
}

id ReserveGLObjectsAPI(void *a1, int a2, int *a3, int a4)
{
  LODWORD(v4) = a4;
  id result = [(id)DYGetGLGuestAppClient(a1) traceMode];
  if ((_DWORD)result != 6)
  {
    v10[0] = a2;
    if ((int)v4 >= 1)
    {
      uint64_t v4 = v4;
      do
      {
        int v9 = *a3++;
        v10[1] = v9;
        id result = [a1 setParameter:1612 to:v10];
        --v4;
      }

      while (v4);
    }
  }

  return result;
}

id ReserveGLVAOsAPI(void *a1, int *a2, int a3)
{
  LODWORD(GPUTools::DYLockUtils::Unlock((GPUTools::DYLockUtils *)&unk_207314, v3) = a3;
  id result = [(id)DYGetGLGuestAppClient(a1) traceMode];
  if ((_DWORD)result != 6)
  {
    v8[0] = 2501;
    if ((int)v3 >= 1)
    {
      uint64_t v3 = v3;
      do
      {
        int v7 = *a2++;
        v8[1] = v7;
        id result = [a1 setParameter:1615 to:v8];
        --v3;
      }

      while (v3);
    }
  }

  return result;
}

id ReserveGLProgramAPI(void *a1, int a2)
{
  id result = [(id)DYGetGLGuestAppClient(a1) traceMode];
  if ((_DWORD)result != 6)
  {
    int v5 = a2;
    return [a1 setParameter:1614 to:&v5];
  }

  return result;
}

id ReserveGLShaderAPI(void *a1, int a2, int a3)
{
  id result = [(id)DYGetGLGuestAppClient(a1) traceMode];
  if ((_DWORD)result != 6)
  {
    v7[0] = a3;
    v7[1] = a2;
    return [a1 setParameter:1613 to:v7];
  }

  return result;
}

id ReserveGLFenceSyncAPI(void *a1, int a2, int a3, int a4)
{
  id result = [(id)DYGetGLGuestAppClient(a1) traceMode];
  if ((_DWORD)result != 6)
  {
    v9[0] = 1616;
    v9[1] = a2;
    void v9[2] = a3;
    v9[3] = a4;
    return [a1 setParameter:1612 to:v9];
  }

  return result;
}

uint64_t CreatePrivateGLProgram(void *a1)
{
  unint64_t v2 = GLIContextFromEAGLContext(a1);
  uint64_t v3 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v3) {
    goto LABEL_12;
  }
  uint64_t v4 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v5 = v3[4];
    BOOL v6 = v5 >= v2;
    if (v5 >= v2) {
      int v7 = v3;
    }
    else {
      int v7 = v3 + 1;
    }
    if (v6) {
      uint64_t v4 = (uint64_t)v3;
    }
    uint64_t v3 = (void *)*v7;
  }

  while (*v7);
  if (v4 == ContextInfo::activeCtxInfoMap + 8 || v2 < *(void *)(v4 + 32)) {
LABEL_12:
  }
    uint64_t v4 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v8 = *(void *)(*(void *)(v4 + 40) + 40LL);
  unsigned int v13 = 35648;
  unsigned int v14 = &v13;
  int v9 = (unsigned int *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int volatile>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int volatile>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int volatile>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int volatile>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>( v8 + 232,  &v13,  (uint64_t)&std::piecewise_construct,  &v14)
     + 5;
  do
  {
    unsigned int v10 = __ldxr(v9);
    uint64_t v11 = v10 - 1;
  }

  while (__stxr(v11, v9));
  LODWORD(v14) = v10 - 1;
  [a1 setParameter:1614 to:&v14];
  return v11;
}

uint64_t NewInterposeGLObject(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (a2 == 35656) {
    int v3 = 35648;
  }
  else {
    int v3 = a2;
  }
  unsigned int v7 = v3;
  uint64_t v8 = &v7;
  uint64_t v4 = (unsigned int *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int volatile>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int volatile>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int volatile>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int volatile>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>( v2 + 232,  &v7,  (uint64_t)&std::piecewise_construct,  &v8)
     + 5;
  do
  {
    unsigned int v5 = __ldxr(v4);
    uint64_t result = v5 - 1;
  }

  while (__stxr(result, v4));
  return result;
}

uint64_t CreatePrivateGLShader(void *a1, int a2)
{
  unint64_t v4 = GLIContextFromEAGLContext();
  unsigned int v5 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v5) {
    goto LABEL_12;
  }
  uint64_t v6 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v7 = v5[4];
    BOOL v8 = v7 >= v4;
    if (v7 >= v4) {
      int v9 = v5;
    }
    else {
      int v9 = v5 + 1;
    }
    if (v8) {
      uint64_t v6 = (uint64_t)v5;
    }
    unsigned int v5 = (void *)*v9;
  }

  while (*v9);
  if (v6 == ContextInfo::activeCtxInfoMap + 8 || v4 < *(void *)(v6 + 32)) {
LABEL_12:
  }
    uint64_t v6 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v10 = *(void *)(*(void *)(v6 + 40) + 40LL);
  unsigned int v15 = 35648;
  float v16 = &v15;
  uint64_t v11 = (unsigned int *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int volatile>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int volatile>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int volatile>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int volatile>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>( v10 + 232,  &v15,  (uint64_t)&std::piecewise_construct,  &v16)
      + 5;
  do
  {
    unsigned int v12 = __ldxr(v11);
    uint64_t v13 = v12 - 1;
  }

  while (__stxr(v13, v11));
  LODWORD(v16) = a2;
  HIDWORD(v16) = v12 - 1;
  [a1 setParameter:1613 to:&v16];
  return v13;
}

uint64_t CreatePrivateGLProgramPipeline(void *a1)
{
  unint64_t v2 = GLIContextFromEAGLContext();
  int v3 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v3) {
    goto LABEL_12;
  }
  uint64_t v4 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v5 = v3[4];
    BOOL v6 = v5 >= v2;
    if (v5 >= v2) {
      unint64_t v7 = v3;
    }
    else {
      unint64_t v7 = v3 + 1;
    }
    if (v6) {
      uint64_t v4 = (uint64_t)v3;
    }
    int v3 = (void *)*v7;
  }

  while (*v7);
  if (v4 == ContextInfo::activeCtxInfoMap + 8 || v2 < *(void *)(v4 + 32)) {
LABEL_12:
  }
    uint64_t v4 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v8 = *(void *)(*(void *)(v4 + 40) + 40LL);
  unsigned int v13 = 35407;
  unsigned int v14 = &v13;
  int v9 = (unsigned int *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int volatile>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int volatile>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int volatile>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int volatile>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>( v8 + 232,  &v13,  (uint64_t)&std::piecewise_construct,  &v14)
     + 5;
  do
  {
    unsigned int v10 = __ldxr(v9);
    uint64_t v11 = v10 - 1;
  }

  while (__stxr(v11, v9));
  LODWORD(v14) = 1610;
  HIDWORD(v14) = v10 - 1;
  [a1 setParameter:1612 to:&v14];
  return v11;
}

id HarvestResourceNames(void *a1)
{
  id v2 = [a1 attributes];
  unsigned int v3 = objc_msgSend(objc_msgSend(v2, "objectForKey:", kDYResourceTypeKey), "unsignedIntValue");
  if (v3 - 47 <= 0xFFFFFFD1) {
    __assert_rtn( "DYResourceType ValidateIncomingResource(uint32_t)",  (const char *)&unk_1F0B16,  0,  "unsafeResourceType > 0 && unsafeResourceType < kDYMaxResourceTypes");
  }
  unsigned int v4 = v3;
  unint64_t v5 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  BOOL v6 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  [(id)DYGetGLGuestAppClient(v6) lockGraphicsAndWaitForThreads:1];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = __HarvestResourceNames_block_invoke;
  v11[3] = &unk_1F8D90;
  unsigned int v12 = v4;
  v11[4] = v6;
  v11[5] = v5;
  iter_contexts((uint64_t)v11);

  id v7 = objc_msgSend( [DYTransportMessage alloc],  "initWithKind:attributes:objectPayload:",  objc_msgSend(a1, "kind"),  0,  v5);
  [(id)DYGetGLGuestAppClient(v8) sendMessage:v7 inReplyTo:a1];

  return [(id)DYGetGLGuestAppClient(v9) unlockGraphics];
}

void __HarvestResourceNames_block_invoke(uint64_t a1, ContextInfo *a2)
{
  int v4 = *(_DWORD *)(a1 + 48);
  if (v4 != 3 && v4 != 9)
  {
    BOOL v6 = -[NSNumber initWithUnsignedLongLong:]( objc_alloc(&OBJC_CLASS___NSNumber),  "initWithUnsignedLongLong:",  **((void **)a2 + 5));
    if (objc_msgSend(*(id *)(a1 + 32), "containsObject:"))
    {

      return;
    }

    [*(id *)(a1 + 32) addObject:v6];
  }

  ContextHarvester::ContextHarvester((ContextHarvester *)v8, a2, 0LL);
  v7[0] = 0LL;
  v7[1] = 0LL;
  ContextHarvester::HarvestObjectNames((uint64_t)v8, *(_DWORD *)(a1 + 48), v7);
  if (v7[0]) {
    objc_msgSend( *(id *)(a1 + 40),  "setObject:forKey:",  GPUTools::NameTargetTupleArray::gut((GPUTools::NameTargetTupleArray *)v7),  +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(void *)a2));
  }
  GPUTools::NameTargetTupleArray::reset((GPUTools::NameTargetTupleArray *)v7);
  ContextHarvester::~ContextHarvester((ContextHarvester *)v8);
}

void sub_B03C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  GPUTools::NameTargetTupleArray::reset((GPUTools::NameTargetTupleArray *)va);
  ContextHarvester::~ContextHarvester((ContextHarvester *)va1);
  _Unwind_Resume(a1);
}

void HarvestRenderbuffer(uint64_t a1, uint64_t a2)
{
  id v4 = +[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary");
  unint64_t v5 = +[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", a1);
  [v4 setObject:v5 forKey:kDYResourceContextKey];
  uint64_t v6 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", 4LL);
  [v4 setObject:v6 forKey:kDYResourceTypeKey];
  id v7 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a2);
  [v4 setObject:v7 forKey:kDYResourceObjectKey];
  HarvestResourceObject(v4, 0LL);
}

void HarvestResourceObject(void *a1, uint64_t a2)
{
  id v4 = [(id)DYGetGLGuestAppClient(a1) lockGraphicsAndWaitForThreads:1];
  [(id)DYGetGLGuestAppClient(v4) invalidateSavePointerMap:0];
  unint64_t v5 = (void *)validate_inbound_context_id((uint64_t)objc_msgSend( objc_msgSend(a1, "objectForKey:", kDYResourceContextKey),  "unsignedLongLongValue"));
  uint64_t v6 = objc_opt_new(&OBJC_CLASS___NSMutableData);
  GPUTools::FB::Stream::Stream((GPUTools::FB::Stream *)v37, (__CFData *)v6);
  GPUTools::FB::Stream::Open((GPUTools::FB::Stream *)v37, @"resource-stream");
  unsigned int v7 = objc_msgSend(objc_msgSend(a1, "objectForKey:", kDYResourceTypeKey), "unsignedIntValue");
  if (v7 - 47 <= 0xFFFFFFD1) {
    __assert_rtn( "DYResourceType ValidateIncomingResource(uint32_t)",  (const char *)&unk_1F0B16,  0,  "unsafeResourceType > 0 && unsafeResourceType < kDYMaxResourceTypes");
  }
  id v8 = objc_msgSend(objc_msgSend(a1, "objectForKey:", kDYResourceObjectKey), "unsignedIntValue");
  unsigned int v35 = objc_msgSend(objc_msgSend(a1, "objectForKey:", kDYResourceTargetKey), "unsignedIntValue");
  v45[0] = off_1F8EF8;
  v45[1] = &internal_context;
  v45[3] = v45;
  uint64_t v47 = v46;
  v46[0] = off_1F8EF8;
  v46[1] = &internal_context;
  internal_context = 0LL;
  unint64_t v9 = GLIContextFromEAGLContext(v5);
  unsigned int v10 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v10) {
    goto LABEL_13;
  }
  uint64_t v11 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v12 = v10[4];
    BOOL v13 = v12 >= v9;
    if (v12 >= v9) {
      unsigned int v14 = v10;
    }
    else {
      unsigned int v14 = v10 + 1;
    }
    if (v13) {
      uint64_t v11 = (uint64_t)v10;
    }
    unsigned int v10 = (void *)*v14;
  }

  while (*v14);
  if (v11 == ContextInfo::activeCtxInfoMap + 8 || v9 < *(void *)(v11 + 32)) {
LABEL_13:
  }
    uint64_t v11 = ContextInfo::activeCtxInfoMap + 8;
  unsigned int v15 = *(void **)(v11 + 40);
  uint64_t v16 = v15[4];
  if (v7 == 4)
  {
    BOOL v18 = v15 + 2;
    (*(void (**)(void, uint64_t, unsigned int *))(v16 + 832))(v15[2], 36007LL, &v44);
    uint64_t v19 = 5320LL;
    goto LABEL_20;
  }

  if (v7 == 2)
  {
    BOOL v18 = v15 + 2;
    (*(void (**)(void, uint64_t, unsigned int *))(v16 + 832))(v15[2], 34964LL, &v44);
    uint64_t v19 = 5160LL;
LABEL_20:
    int v17 = (*(uint64_t (**)(void, void))(v16 + v19))(*v18, v44);
    goto LABEL_21;
  }

  if (v7 != 1)
  {
    dy_abort("Unsupported resource type: %u", v7);
    __break(1u);
    return;
  }

  *(void *)((char *)v43 + 7) = 0LL;
  v43[0] = 0LL;
  GPUTools::GL::DYGetTextureTargetInfo(v35, v43);
  (*(void (**)(void, void, unsigned int *))(v16 + 832))(v15[2], HIDWORD(v43[0]), &v44);
  int v17 = (*(uint64_t (**)(void, void))(v16 + 1160))(v15[2], v44);
LABEL_21:
  if (v44 != (_DWORD)v8 && !v17)
  {
    internal_context = create_internal_context(v5);
    unint64_t v20 = GLIContextFromEAGLContext(internal_context);
    int v21 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
    if (!v21) {
      goto LABEL_34;
    }
    uint64_t v22 = ContextInfo::activeCtxInfoMap + 8;
    do
    {
      unint64_t v23 = v21[4];
      BOOL v24 = v23 >= v20;
      if (v23 >= v20) {
        int v25 = v21;
      }
      else {
        int v25 = v21 + 1;
      }
      if (v24) {
        uint64_t v22 = (uint64_t)v21;
      }
      int v21 = (void *)*v25;
    }

    while (*v25);
    if (v22 == ContextInfo::activeCtxInfoMap + 8 || v20 < *(void *)(v22 + 32)) {
LABEL_34:
    }
      uint64_t v22 = ContextInfo::activeCtxInfoMap + 8;
    unsigned int v15 = *(void **)(v22 + 40);
  }

  int v26 = (ContextHarvester *)operator new(0x250uLL);
  ContextHarvester::ContextHarvester(v26, (ContextInfo *)v15, (GPUTools::FB::Stream *)v37);
  if (v7 == 1)
  {
    ContextHarvester::HarvestTextureObject((uint64_t)v26, v35, (uint64_t)v8, a2);
  }

  else if (v7 == 2)
  {
    unsigned int v27 = objc_msgSend(objc_msgSend(a1, "objectForKey:", kDYResourceBufferOffsetKey), "unsignedIntValue");
    ContextHarvester::HarvestBufferObject( (uint64_t)v26,  v8,  v27,  objc_msgSend(objc_msgSend(a1, "objectForKey:", kDYResourceBufferSizeKey), "unsignedIntValue"),  a2);
  }

  else
  {
    ContextHarvester::HarvestRenderbufferObject((uint64_t)v26, (uint64_t)v8, a2);
  }

  ContextHarvester::~ContextHarvester(v26);
  operator delete(v28);
  if (!v47) {
    goto LABEL_47;
  }
  (*(void (**)(void *))(*v47 + 48LL))(v47);
  __int128 v29 = v47;
  if (v47 == v46)
  {
    uint64_t v30 = 4LL;
    __int128 v29 = v46;
    goto LABEL_46;
  }

  if (v47)
  {
    uint64_t v30 = 5LL;
LABEL_46:
    (*(void (**)(void))(*v29 + 8 * v30))();
    goto LABEL_47;
  }

  do
LABEL_47:
    unsigned int v31 = __ldaxr(&v41);
  while (__stlxr(1u, &v41));
  if (v31 == 1)
  {
    do
    {
      while (v41 == 1)
        ;
      do
        unsigned int v32 = __ldaxr(&v41);
      while (__stlxr(1u, &v41));
    }

    while (v32 == 1);
  }

  (*(void (**)(uint64_t, _BYTE *))(v40 + 16))(v40, v37);
  uint64_t v39 = v38 + 8;
  char v42 = 1;
  atomic_store(0, &v41);
  id v33 = [[DYTransportMessage alloc] initWithKind:1026 attributes:0 payload:v6];
  [(id)DYGetGLGuestAppClient(v33) sendMessage:v33 inReplyTo:a2];

  [(id)DYGetGLGuestAppClient(v34) unlockGraphics];
  GPUTools::FB::Stream::~Stream((GPUTools::FB::Stream *)v37);
}

void sub_B5E4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_B658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

void sub_B66C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

void sub_B69C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

void sub_B6B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

void HarvestRenderbufferInfo(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a4)
  {
    id v8 = [(id)DYGetGLGuestAppClient(a1) lockGraphicsAndWaitForThreads:1];
    [(id)DYGetGLGuestAppClient(v8) invalidateSavePointerMap:0];
    uint64_t v9 = validate_inbound_context_id(a1);
    unint64_t v10 = GLIContextFromEAGLContext(v9);
    uint64_t v11 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
    if (!v11) {
      goto LABEL_13;
    }
    uint64_t v12 = ContextInfo::activeCtxInfoMap + 8;
    do
    {
      unint64_t v13 = v11[4];
      BOOL v14 = v13 >= v10;
      if (v13 >= v10) {
        unsigned int v15 = v11;
      }
      else {
        unsigned int v15 = v11 + 1;
      }
      if (v14) {
        uint64_t v12 = (uint64_t)v11;
      }
      uint64_t v11 = (void *)*v15;
    }

    while (*v15);
    if (v12 == ContextInfo::activeCtxInfoMap + 8 || v10 < *(void *)(v12 + 32)) {
LABEL_13:
    }
      uint64_t v12 = ContextInfo::activeCtxInfoMap + 8;
    ContextHarvester::ContextHarvester((ContextHarvester *)v17, *(ContextInfo **)(v12 + 40), 0LL);
    uint64_t v16 = ContextHarvester::HarvestRenderbufferInfo((uint64_t)v17, a2, a3, a4);
    [(id)DYGetGLGuestAppClient(v16) unlockGraphics];
    ContextHarvester::~ContextHarvester((ContextHarvester *)v17);
  }

void sub_B7AC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

ContextHarvester **std::unique_ptr<ContextHarvester>::~unique_ptr[abi:ne180100](ContextHarvester **a1)
{
  id v2 = *a1;
  *a1 = 0LL;
  if (v2)
  {
    ContextHarvester::~ContextHarvester(v2);
    operator delete(v3);
  }

  return a1;
}

void GPUTools::ScopeFunction::~ScopeFunction(GPUTools::ScopeFunction *this)
{
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 48LL))(v2);
    unsigned int v3 = (GPUTools::ScopeFunction *)*((void *)this + 3);
    if (v3 == this)
    {
      uint64_t v4 = 4LL;
      unsigned int v3 = this;
    }

    else
    {
      if (!v3) {
        return;
      }
      uint64_t v4 = 5LL;
    }

    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

{
  uint64_t v2;
  GPUTools::ScopeFunction *v3;
  uint64_t v4;
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 48LL))(v2);
    unsigned int v3 = (GPUTools::ScopeFunction *)*((void *)this + 3);
    if (v3 == this)
    {
      uint64_t v4 = 4LL;
      unsigned int v3 = this;
    }

    else
    {
      if (!v3) {
        return;
      }
      uint64_t v4 = 5LL;
    }

    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

void HarvestState(void *a1)
{
  uint64_t v2 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
  [(id)DYGetGLGuestAppClient(v2) lockGraphicsAndWaitForThreads:1];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = __HarvestState_block_invoke;
  v6[3] = &unk_1F8DB8;
  v6[4] = v2;
  uint64_t v3 = iter_contexts((uint64_t)v6);
  [(id)DYGetGLGuestAppClient(v3) unlockGraphics];
  id v4 = objc_msgSend( [DYTransportMessage alloc],  "initWithKind:attributes:objectPayload:",  objc_msgSend(a1, "kind"),  0,  v2);

  [(id)DYGetGLGuestAppClient(v5) sendMessage:v4 inReplyTo:a1];
}

void __HarvestState_block_invoke(uint64_t a1, ContextInfo *a2)
{
  id v4 = objc_opt_new(&OBJC_CLASS___NSMutableData);
  GPUTools::FB::Stream::Stream((GPUTools::FB::Stream *)v9, (__CFData *)v4);
  GPUTools::FB::Stream::Open( (GPUTools::FB::Stream *)v9,  (const __CFString *)+[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-%p",  kDYFunctionStreamNameState,  *(void *)a2));
  ContextHarvester::ContextHarvester((ContextHarvester *)v8, a2, (GPUTools::FB::Stream *)v9);
  ContextHarvester::HarvestAll((ContextHarvester *)v8, 0, 1);
  do
    unsigned int v5 = __ldaxr(&v13);
  while (__stlxr(1u, &v13));
  if (v5 == 1)
  {
    do
    {
      while (v13 == 1)
        ;
      do
        unsigned int v6 = __ldaxr(&v13);
      while (__stlxr(1u, &v13));
    }

    while (v6 == 1);
  }

  (*(void (**)(uint64_t, _BYTE *))(v12 + 16))(v12, v9);
  uint64_t v11 = v10 + 8;
  char v14 = 1;
  atomic_store(0, &v13);
  unsigned int v7 = -[NSNumber initWithUnsignedLongLong:]( objc_alloc(&OBJC_CLASS___NSNumber),  "initWithUnsignedLongLong:",  *(void *)a2);
  [*(id *)(a1 + 32) setObject:v4 forKey:v7];

  ContextHarvester::~ContextHarvester((ContextHarvester *)v8);
  GPUTools::FB::Stream::~Stream((GPUTools::FB::Stream *)v9);
}

void sub_BA84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_BAA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void UpdateResourceObject(void *a1)
{
  uint64_t v2 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
  id v3 = [a1 attributes];
  uint64_t v4 = kDYResourceContextKey;
  id v5 = [v3 objectForKey:kDYResourceContextKey];
  -[NSMutableDictionary setObject:forKey:](v2, "setObject:forKey:", v5, v4);
  uint64_t v6 = validate_inbound_context_id((uint64_t)[v5 unsignedLongLongValue]);
  unint64_t v7 = GLIContextFromEAGLContext(v6);
  id v8 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v8) {
    goto LABEL_12;
  }
  uint64_t v9 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v10 = v8[4];
    BOOL v11 = v10 >= v7;
    if (v10 >= v7) {
      uint64_t v12 = v8;
    }
    else {
      uint64_t v12 = v8 + 1;
    }
    if (v11) {
      uint64_t v9 = (uint64_t)v8;
    }
    id v8 = (void *)*v12;
  }

  while (*v12);
  if (v9 == ContextInfo::activeCtxInfoMap + 8 || v7 < *(void *)(v9 + 32)) {
LABEL_12:
  }
    uint64_t v9 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v13 = *(void *)(v9 + 40);
  id v14 = [a1 attributes];
  uint64_t v15 = kDYResourceTypeKey;
  id v16 = [v14 objectForKey:kDYResourceTypeKey];
  -[NSMutableDictionary setObject:forKey:](v2, "setObject:forKey:", v16, v15);
  id v17 = [a1 attributes];
  uint64_t v18 = kDYResourceObjectKey;
  id v19 = [v17 objectForKey:kDYResourceObjectKey];
  -[NSMutableDictionary setObject:forKey:](v2, "setObject:forKey:", v19, v18);
  unsigned int v20 = [v16 unsignedIntValue];
  if (v20 > 0xA) {
    goto LABEL_24;
  }
  if (v20 != 1)
  {
    if (v20 == 7)
    {
      uint64_t updated = GPUTools::ResourceUpdater::UpdateProgram( *(uint64_t ***)(v13 + 3472),  [v19 unsignedIntValue],  (NSDictionary *)objc_msgSend(a1, "attributes"),  v2);
      goto LABEL_18;
    }

    if (((1 << v20) & 0x77C) != 0) {
      dy_abort("unsupported resource type: %u", [v16 unsignedIntValue]);
    }
LABEL_24:
    __int128 v29 = (_Unwind_Exception *)dy_abort( "unknown resource type: %u",  [v16 unsignedIntValue]);
    _Block_object_dispose(&v31, 8);
    _Unwind_Resume(v29);
  }

  uint64_t updated = GPUTools::ResourceUpdater::UpdateTexture( *(uint64_t ***)(v13 + 3472),  [v19 unsignedIntValue],  (NSDictionary *)objc_msgSend(a1, "attributes"),  v2);
LABEL_18:
  uint64_t v22 = updated;
  uint64_t v31 = 0LL;
  unsigned int v32 = &v31;
  uint64_t v33 = 0x2020000000LL;
  char v34 = 0;
  v30[0] = _NSConcreteStackBlock;
  v30[1] = 3221225472LL;
  v30[2] = __UpdateResourceObject_block_invoke;
  v30[3] = &unk_1F8DE0;
  v30[4] = &v31;
  uint64_t v23 = iter_contexts((uint64_t)v30);
  if (*((_BYTE *)v32 + 24))
  {
    BOOL v24 = (void *)DYGetGLGuestAppClient(v23);
    unint64_t v25 = [v24 overrideFlags] | 0x100;
  }

  else
  {
    BOOL v24 = (void *)DYGetGLGuestAppClient(v23);
    unint64_t v25 = (unint64_t)[v24 overrideFlags] & 0xFFFFFEFF;
  }

  objc_msgSend((id)DYGetGLGuestAppClient(objc_msgSend(v24, "setOverrideFlags:", v25)), "unlockGraphics");
  int v26 = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v22);
  -[NSMutableDictionary setObject:forKey:](v2, "setObject:forKey:", v26, kDYResourceUpdateSucceededKey);
  id v27 = objc_msgSend( [DYTransportMessage alloc],  "initWithKind:attributes:objectPayload:",  objc_msgSend(a1, "kind"),  0,  v2);

  [(id)DYGetGLGuestAppClient(v28) sendMessage:v27 inReplyTo:a1];
  _Block_object_dispose(&v31, 8);
}

void sub_BE18( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

BOOL __UpdateResourceObject_block_invoke(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  BOOL result = GPUTools::ResourceUpdater::HasDrawOverride(*(GPUTools::ResourceUpdater **)(a2 + 3472));
  if (result)
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
    *a3 = 1;
  }

  return result;
}

void ClearResourceOverrides(void *a1)
{
  id v2 = [(id)DYGetGLGuestAppClient(a1) lockGraphicsAndWaitForThreads:1];
  id v3 = (void *)DYGetGLGuestAppClient(v2);
  objc_msgSend(v3, "setOverrideFlags:", (unint64_t)objc_msgSend(v3, "overrideFlags") & 0xFFFFFEFF);
  uint64_t v4 = iter_contexts((uint64_t)&__block_literal_global_19);
  [(id)DYGetGLGuestAppClient(v4) unlockGraphics];
  id v5 = objc_msgSend( [DYTransportMessage alloc],  "initWithKind:attributes:objectPayload:",  objc_msgSend(a1, "kind"),  0,  0);
  [(id)DYGetGLGuestAppClient(v5) sendMessage:v5 inReplyTo:a1];
}

BOOL IsInterposeGLObject(uint64_t a1, int a2, unsigned int a3)
{
  BOOL result = 0LL;
  unsigned int v5 = a2;
  if (a2 > 35647)
  {
    if (a2 != 35648)
    {
      if (a2 != 35656) {
        return result;
      }
      unsigned int v5 = 35648;
    }

LABEL_8:
    uint64_t v6 = &v5;
    return *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int volatile>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int volatile>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int volatile>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int volatile>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>( a1 + 232,  &v5,  (uint64_t)&std::piecewise_construct,  &v6)
           + 5) <= a3;
  }

  if (a2 == 5890 || a2 == 35407) {
    goto LABEL_8;
  }
  return result;
}

id reset_graphics_timing(uint64_t a1)
{
  uint64_t v1 = iter_contexts((uint64_t)&__block_literal_global_20);
  return [(id)DYGetGLGuestAppClient(v1) unlockGraphics];
}

void __reset_graphics_timing_block_invoke(id a1, void *a2, BOOL *a3)
{
  *((void *)a2 + 464) = 0LL;
  *((_OWORD *)a2 + 231) = 0u;
  bzero((char *)a2 + 3736, 0x388uLL);
}

void get_graphics_timing(uint64_t *a1, void *a2, void *a3)
{
  uint64_t v17 = 0LL;
  uint64_t v18 = &v17;
  uint64_t v19 = 0x2020000000LL;
  uint64_t v20 = 0LL;
  uint64_t v13 = 0LL;
  id v14 = &v13;
  uint64_t v15 = 0x2020000000LL;
  uint64_t v16 = 0LL;
  uint64_t v9 = 0LL;
  unint64_t v10 = &v9;
  uint64_t v11 = 0x2020000000LL;
  uint64_t v12 = 0LL;
  [(id)DYGetGLGuestAppClient(a1) lockGraphicsAndWaitForThreads:1];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _DWORD v8[2] = __get_graphics_timing_block_invoke;
  v8[3] = &unk_1F8E68;
  v8[4] = &v17;
  v8[5] = &v13;
  v8[6] = &v9;
  uint64_t v6 = iter_contexts((uint64_t)v8);
  [(id)DYGetGLGuestAppClient(v6) unlockGraphics];
  uint64_t v7 = v18[3];
  if (g_DYTimebaseInfo != *((_DWORD *)&g_DYTimebaseInfo + 1)) {
    uint64_t v7 = __udivti3(g_DYTimebaseInfo * v7, (g_DYTimebaseInfo * (unsigned __int128)(unint64_t)v7) >> 64);
  }
  *a1 = v7;
  *a2 = v14[3];
  *a3 = v10[3];
  _Block_object_dispose(&v9, 8);
  _Block_object_dispose(&v13, 8);
  _Block_object_dispose(&v17, 8);
}

void sub_C14C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

void *__get_graphics_timing_block_invoke(void *result, void *a2)
{
  *(void *)(*(void *)(result[4] + 8LL) + 24LL) += a2[462];
  *(void *)(*(void *)(result[5] + 8LL) + 24LL) += a2[463];
  *(void *)(*(void *)(result[6] + 8LL) + 24LL) += a2[464];
  return result;
}

id get_profiling_data(uint64_t a1, volatile int *a2)
{
  id v2 = (id)qword_207328;
  GPUTools::DYLockUtils::Unlock((GPUTools::DYLockUtils *)&_MergedGlobals, v3);
  return v2;
}

void sub_C214(_Unwind_Exception *a1, volatile int *a2)
{
}

NSMutableDictionary *copy_profiling_data_dictionary(ContextInfo *a1, int a2, uint64_t a3)
{
  id v3 = -[NSMutableDictionary initWithObjectsAndKeys:]( objc_alloc(&OBJC_CLASS___NSMutableDictionary),  "initWithObjectsAndKeys:",  +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", (a2 - 1)),  @"frame index",  +[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", a3),  @"frame duration",  +[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", *(void *)a1),  @"context",  +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *((void *)a1 + 579)),  @"cpu idle time",  0LL);
  *(void *)host_info_outCnt = 0LL;
  unint64_t v36 = host_info_outCnt;
  uint64_t v37 = 0x2020000000LL;
  uint64_t v38 = 0LL;
  uint64_t v31 = 0LL;
  unsigned int v32 = &v31;
  uint64_t v33 = 0x2020000000LL;
  uint64_t v34 = 0LL;
  uint64_t v27 = 0LL;
  uint64_t v28 = &v27;
  uint64_t v29 = 0x2020000000LL;
  uint64_t v30 = 0LL;
  bzero(&v39, 0x380uLL);
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 3221225472LL;
  v26[2] = ___ZL30copy_profiling_data_dictionaryP11ContextInfojy_block_invoke;
  v26[3] = &unk_1F8E90;
  v26[4] = host_info_outCnt;
  v26[5] = &v31;
  v26[6] = &v27;
  v26[7] = &v39;
  v26[8] = &v40;
  v26[9] = &v41;
  v26[10] = &v42;
  iter_contexts((uint64_t)v26);
  uint64_t v4 = v36;
  uint64_t v5 = *((void *)v36 + 3);
  if (g_DYTimebaseInfo == *((_DWORD *)&g_DYTimebaseInfo + 1))
  {
    *((void *)v36 + 3) = v5;
    char v6 = gProfilingFlags;
    if ((gProfilingFlags & 4) == 0) {
      goto LABEL_3;
    }
  }

  else
  {
    uint64_t v5 = __udivti3(g_DYTimebaseInfo * v5, (g_DYTimebaseInfo * (unsigned __int128)(unint64_t)v5) >> 64);
    *((void *)v4 + 3) = v5;
    char v6 = gProfilingFlags;
    if ((gProfilingFlags & 4) == 0)
    {
LABEL_3:
      if ((v6 & 8) == 0) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
  }

  -[NSMutableDictionary setObject:forKey:]( v3,  "setObject:forKey:",  +[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", v5),  @"total GL time");
LABEL_7:
  -[NSMutableDictionary setObject:forKey:]( v3,  "setObject:forKey:",  +[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", v28[3]),  @"total platform time");
LABEL_8:
  -[NSMutableDictionary setObject:forKey:]( v3,  "setObject:forKey:",  +[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", v32[3]),  @"total GL command");
  uint64_t v22 = v3;
  unint64_t v25 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
  uint64_t v7 = 0LL;
  id v8 = copy_profiling_data_dictionary(ContextInfo *,unsigned int,unsigned long long)::modeList;
  do
  {
    if (*(__darwin_time_t *)((char *)&v39.ru_utime.tv_sec + v7)) {
      -[NSMutableDictionary setObject:forKey:]( v25,  "setObject:forKey:",  +[NSDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjectsAndKeys:",  +[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:"),  @"commands num",  +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(void *)((char *)&v39.ru_utime.tv_usec + v7)),  @"vertices num",  +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(__darwin_time_t *)((char *)&v39.ru_stime.tv_sec + v7)),  @"primitives num",  +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(void *)((char *)&v39.ru_stime.tv_usec + v7)),  @"instances num",  0LL),  *v8);
    }
    ++v8;
    v7 += 32LL;
  }

  while (v7 != 224);
  BOOL v24 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
  uint64_t v9 = copy_profiling_data_dictionary(ContextInfo *,unsigned int,unsigned long long)::modeList;
  for (uint64_t i = 224LL; i != 448; i += 32LL)
  {
    if (*(__darwin_time_t *)((char *)&v39.ru_utime.tv_sec + i)) {
      -[NSMutableDictionary setObject:forKey:]( v24,  "setObject:forKey:",  +[NSDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjectsAndKeys:",  +[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:"),  @"commands num",  +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(void *)((char *)&v39.ru_utime.tv_usec + i)),  @"vertices num",  +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(__darwin_time_t *)((char *)&v39.ru_stime.tv_sec + i)),  @"primitives num",  +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(void *)((char *)&v39.ru_stime.tv_usec + i)),  @"instances num",  0LL),  *v9);
    }
    ++v9;
  }

  uint64_t v23 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
  uint64_t v11 = copy_profiling_data_dictionary(ContextInfo *,unsigned int,unsigned long long)::modeList;
  for (uint64_t j = 448LL; j != 672; j += 32LL)
  {
    if (*(__darwin_time_t *)((char *)&v39.ru_utime.tv_sec + j)) {
      -[NSMutableDictionary setObject:forKey:]( v23,  "setObject:forKey:",  +[NSDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjectsAndKeys:",  +[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:"),  @"commands num",  +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(void *)((char *)&v39.ru_utime.tv_usec + j)),  @"vertices num",  +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(__darwin_time_t *)((char *)&v39.ru_stime.tv_sec + j)),  @"primitives num",  +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(void *)((char *)&v39.ru_stime.tv_usec + j)),  @"instances num",  0LL),  *v11);
    }
    ++v11;
  }

  uint64_t v13 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
  uint64_t v14 = copy_profiling_data_dictionary(ContextInfo *,unsigned int,unsigned long long)::modeList;
  for (uint64_t k = 672LL; k != 896; k += 32LL)
  {
    if (*(__darwin_time_t *)((char *)&v39.ru_utime.tv_sec + k)) {
      -[NSMutableDictionary setObject:forKey:]( v13,  "setObject:forKey:",  +[NSDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjectsAndKeys:",  +[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:"),  @"commands num",  +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(void *)((char *)&v39.ru_utime.tv_usec + k)),  @"vertices num",  +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(__darwin_time_t *)((char *)&v39.ru_stime.tv_sec + k)),  @"primitives num",  +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(void *)((char *)&v39.ru_stime.tv_usec + k)),  @"instances num",  0LL),  *v14);
    }
    ++v14;
  }

  -[NSMutableDictionary setObject:forKey:]( v22,  "setObject:forKey:",  +[NSDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjectsAndKeys:",  v25,  @"index",  v24,  @"array",  v23,  @"index instanced",  v13,  @"array instanced",  0LL),  @"GL draw command statistics");

  _Block_object_dispose(&v27, 8);
  _Block_object_dispose(&v31, 8);
  _Block_object_dispose(host_info_outCnt, 8);
  char v16 = gProfilingFlags;
  if ((gProfilingFlags & 0x20) != 0)
  {
    getrusage(0, &v39);
    -[NSMutableDictionary setObject:forKey:]( v22,  "setObject:forKey:",  +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  1000000000 * v39.ru_utime.tv_sec + 1000LL * v39.ru_utime.tv_usec),  @"user time");
    -[NSMutableDictionary setObject:forKey:]( v22,  "setObject:forKey:",  +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  1000000000 * v39.ru_stime.tv_sec + 1000LL * v39.ru_stime.tv_usec),  @"system time");
    char v16 = gProfilingFlags;
  }

  if ((v16 & 0x10) != 0)
  {
    host_info_outCnt[0] = 38;
    if (!host_statistics(GPUTools::Interpose::gHostPort, 2, (host_info_t)&v39, host_info_outCnt))
    {
      uint64_t v17 = (const void *)DYCreateDictionaryFromVMStatistics(&v39);
      if (v17)
      {
        -[NSMutableDictionary setObject:forKey:](v22, "setObject:forKey:", v17, @"vm statistics");
        CFRelease(v17);
      }
    }

    -[NSMutableDictionary setObject:forKey:]( v22,  "setObject:forKey:",  +[NSNumber numberWithUnsignedLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLong:", vm_page_size),  @"vm page size");
  }

  collect_global_profiling_data((id *)a1, (__CFDictionary *)v22);
  collect_all_context_profiling_data(v22);
  uint64_t v18 = mach_absolute_time();
  uint64_t v19 = v18;
  if (g_DYTimebaseInfo != *((_DWORD *)&g_DYTimebaseInfo + 1)) {
    uint64_t v19 = __udivti3(g_DYTimebaseInfo * v18, (g_DYTimebaseInfo * (unsigned __int128)v18) >> 64);
  }
  -[NSMutableDictionary setObject:forKey:]( v22,  "setObject:forKey:",  +[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", v19),  @"timestamp");
  return v22;
}

void sub_C9F4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, char a33, uint64_t a34, uint64_t a35, uint64_t a36, char a37, uint64_t a38, uint64_t a39, uint64_t a40, char a41)
{
}

void ___ZL30copy_profiling_data_dictionaryP11ContextInfojy_block_invoke(void *a1, uint64_t a2)
{
  *(void *)(*(void *)(a1[4] + 8LL) + 24LL) += *(void *)(a2 + 3696);
  *(void *)(*(void *)(a1[5] + 8LL) + 24LL) += *(void *)(a2 + 3704);
  *(void *)(*(void *)(a1[6] + 8LL) + 24LL) += *(void *)(a2 + 3712);
  *(void *)(a2 + 4632) = 0LL;
  *(void *)(a2 + 3696) = 0LL;
  *(void *)(a2 + 3712) = 0LL;
  *(void *)(a2 + 3704) = 0LL;
  id v3 = (int64x2_t *)a1[9];
  id v2 = (int64x2_t *)a1[10];
  uint64_t v4 = (int64x2_t *)a1[7];
  uint64_t v5 = (int64x2_t *)a1[8];
  int64x2_t v6 = v4[1];
  *uint64_t v4 = vaddq_s64(*v4, *(int64x2_t *)(a2 + 3736));
  v4[1] = vaddq_s64(v6, *(int64x2_t *)(a2 + 3752));
  int64x2_t v7 = v5[1];
  int64x2_t *v5 = vaddq_s64(*v5, *(int64x2_t *)(a2 + 3960));
  v5[1] = vaddq_s64(v7, *(int64x2_t *)(a2 + 3976));
  int64x2_t v8 = v3[1];
  *id v3 = vaddq_s64(*v3, *(int64x2_t *)(a2 + 4184));
  v3[1] = vaddq_s64(v8, *(int64x2_t *)(a2 + 4200));
  int64x2_t v9 = v2[1];
  *id v2 = vaddq_s64(*v2, *(int64x2_t *)(a2 + 4408));
  v2[1] = vaddq_s64(v9, *(int64x2_t *)(a2 + 4424));
  int64x2_t v10 = v4[3];
  _DWORD v4[2] = vaddq_s64(v4[2], *(int64x2_t *)(a2 + 3768));
  v4[3] = vaddq_s64(v10, *(int64x2_t *)(a2 + 3784));
  int64x2_t v11 = v5[3];
  v5[2] = vaddq_s64(v5[2], *(int64x2_t *)(a2 + 3992));
  v5[3] = vaddq_s64(v11, *(int64x2_t *)(a2 + 4008));
  int64x2_t v12 = v3[3];
  v3[2] = vaddq_s64(v3[2], *(int64x2_t *)(a2 + 4216));
  v3[3] = vaddq_s64(v12, *(int64x2_t *)(a2 + 4232));
  int64x2_t v13 = v2[3];
  v2[2] = vaddq_s64(v2[2], *(int64x2_t *)(a2 + 4440));
  v2[3] = vaddq_s64(v13, *(int64x2_t *)(a2 + 4456));
  int64x2_t v14 = v4[5];
  v4[4] = vaddq_s64(v4[4], *(int64x2_t *)(a2 + 3800));
  v4[5] = vaddq_s64(v14, *(int64x2_t *)(a2 + 3816));
  int64x2_t v15 = v5[5];
  v5[4] = vaddq_s64(v5[4], *(int64x2_t *)(a2 + 4024));
  v5[5] = vaddq_s64(v15, *(int64x2_t *)(a2 + 4040));
  int64x2_t v16 = v3[5];
  v3[4] = vaddq_s64(v3[4], *(int64x2_t *)(a2 + 4248));
  v3[5] = vaddq_s64(v16, *(int64x2_t *)(a2 + 4264));
  int64x2_t v17 = v2[5];
  v2[4] = vaddq_s64(v2[4], *(int64x2_t *)(a2 + 4472));
  v2[5] = vaddq_s64(v17, *(int64x2_t *)(a2 + 4488));
  int64x2_t v18 = v4[7];
  void v4[6] = vaddq_s64(v4[6], *(int64x2_t *)(a2 + 3832));
  v4[7] = vaddq_s64(v18, *(int64x2_t *)(a2 + 3848));
  int64x2_t v19 = v5[7];
  v5[6] = vaddq_s64(v5[6], *(int64x2_t *)(a2 + 4056));
  void v5[7] = vaddq_s64(v19, *(int64x2_t *)(a2 + 4072));
  int64x2_t v20 = v3[7];
  v3[6] = vaddq_s64(v3[6], *(int64x2_t *)(a2 + 4280));
  v3[7] = vaddq_s64(v20, *(int64x2_t *)(a2 + 4296));
  int64x2_t v21 = v2[7];
  v2[6] = vaddq_s64(v2[6], *(int64x2_t *)(a2 + 4504));
  v2[7] = vaddq_s64(v21, *(int64x2_t *)(a2 + 4520));
  int64x2_t v22 = v4[9];
  v4[8] = vaddq_s64(v4[8], *(int64x2_t *)(a2 + 3864));
  v4[9] = vaddq_s64(v22, *(int64x2_t *)(a2 + 3880));
  int64x2_t v23 = v5[9];
  v5[8] = vaddq_s64(v5[8], *(int64x2_t *)(a2 + 4088));
  v5[9] = vaddq_s64(v23, *(int64x2_t *)(a2 + 4104));
  int64x2_t v24 = v3[9];
  v3[8] = vaddq_s64(v3[8], *(int64x2_t *)(a2 + 4312));
  v3[9] = vaddq_s64(v24, *(int64x2_t *)(a2 + 4328));
  int64x2_t v25 = v2[9];
  v2[8] = vaddq_s64(v2[8], *(int64x2_t *)(a2 + 4536));
  v2[9] = vaddq_s64(v25, *(int64x2_t *)(a2 + 4552));
  int64x2_t v26 = v4[11];
  v4[10] = vaddq_s64(v4[10], *(int64x2_t *)(a2 + 3896));
  v4[11] = vaddq_s64(v26, *(int64x2_t *)(a2 + 3912));
  int64x2_t v27 = v5[11];
  v5[10] = vaddq_s64(v5[10], *(int64x2_t *)(a2 + 4120));
  v5[11] = vaddq_s64(v27, *(int64x2_t *)(a2 + 4136));
  int64x2_t v28 = v3[11];
  v3[10] = vaddq_s64(v3[10], *(int64x2_t *)(a2 + 4344));
  v3[11] = vaddq_s64(v28, *(int64x2_t *)(a2 + 4360));
  int64x2_t v29 = v2[11];
  v2[10] = vaddq_s64(v2[10], *(int64x2_t *)(a2 + 4568));
  v2[11] = vaddq_s64(v29, *(int64x2_t *)(a2 + 4584));
  int64x2_t v30 = v4[13];
  v4[12] = vaddq_s64(v4[12], *(int64x2_t *)(a2 + 3928));
  v4[13] = vaddq_s64(v30, *(int64x2_t *)(a2 + 3944));
  int64x2_t v31 = v5[13];
  v5[12] = vaddq_s64(v5[12], *(int64x2_t *)(a2 + 4152));
  v5[13] = vaddq_s64(v31, *(int64x2_t *)(a2 + 4168));
  int64x2_t v32 = v3[13];
  v3[12] = vaddq_s64(v3[12], *(int64x2_t *)(a2 + 4376));
  v3[13] = vaddq_s64(v32, *(int64x2_t *)(a2 + 4392));
  int64x2_t v33 = v2[13];
  v2[12] = vaddq_s64(v2[12], *(int64x2_t *)(a2 + 4600));
  v2[13] = vaddq_s64(v33, *(int64x2_t *)(a2 + 4616));
  bzero((void *)(a2 + 3736), 0x380uLL);
}

void *std::__function::__func<HarvestResourceObject::$_0,std::allocator<HarvestResourceObject::$_0>,void ()(void)>::__clone( uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1F8EF8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<HarvestResourceObject::$_0,std::allocator<HarvestResourceObject::$_0>,void ()(void)>::__clone( uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1F8EF8;
  a2[1] = v2;
  return result;
}

unint64_t std::__function::__func<HarvestResourceObject::$_0,std::allocator<HarvestResourceObject::$_0>,void ()(void)>::operator()( uint64_t a1)
{
  unint64_t result = **(void **)(a1 + 8);
  if (result) {
    return destroy_internal_context(result);
  }
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,unsigned int volatile>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int volatile>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int volatile>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int volatile>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>( uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }

    else
    {
      unint64_t v4 = ((_DWORD)v8 - 1) & v7;
    }

    int64x2_t v10 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      int64x2_t v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v13 = v11[1];
            if (v13 == v7)
            {
              if (*((_DWORD *)v11 + 4) == (_DWORD)v7) {
                return v11;
              }
            }

            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }

            int64x2_t v11 = (uint64_t *)*v11;
            if (!v11) {
              goto LABEL_23;
            }
          }
        }

        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7) {
              return v11;
            }
          }

          else
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
            if (v12 != v4) {
              break;
            }
          }

          int64x2_t v11 = (uint64_t *)*v11;
        }

        while (v11);
      }
    }
  }

void sub_D124(_Unwind_Exception *a1)
{
}

void init_vertex_arrays()
{
  uint64_t v0 = &stru_68.sectname[8];
  do
  {
    *(_DWORD *)((char *)&gVertexArrays + v0) = -1;
    v0 += 120LL;
  }

  while (v0 != 952);
}

void sub_DCAC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_DE00( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void std::__hash_table<std::__hash_value_type<void const*,std::string>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,std::string>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,std::string>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,std::string>>>::clear( uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<void const*,std::string>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,std::string>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,std::string>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,std::string>>>::__deallocate_node( a1,  *(void ***)(a1 + 16));
    *(void *)(a1 + 16) = 0LL;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0LL; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0LL;
    }

    *(void *)(a1 + 24) = 0LL;
  }

void std::__hash_table<std::__hash_value_type<void const*,std::string>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,std::string>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,std::string>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,std::string>>>::__deallocate_node( int a1, void **__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      uint64_t v3 = (void **)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }

    while (v3);
  }

void *std::__hash_table<std::__hash_value_type<void const*,std::string>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,std::string>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,std::string>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,std::string>>>::__emplace_unique_key_args<void const*,std::pair<void const* const,std::string> const&>( uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v5 = 0x9DDFEA08EB382D69LL * ((8 * *a2 + 8LL) ^ HIDWORD(*a2));
  unint64_t v6 = 0x9DDFEA08EB382D69LL * (HIDWORD(*a2) ^ (v5 >> 47) ^ v5);
  std::string::size_type v7 = 0x9DDFEA08EB382D69LL * (v6 ^ (v6 >> 47));
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69LL * (v6 ^ (v6 >> 47));
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
    }

    else
    {
      unint64_t v3 = v7 & (v8 - 1);
    }

    int64x2_t v10 = *(void **)(*(void *)a1 + 8 * v3);
    if (v10)
    {
      unint64_t result = (void *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = result[1];
          if (v12 == v7)
          {
            if (result[2] == *a2) {
              return result;
            }
          }

          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }

            else
            {
              v12 &= v8 - 1;
            }

            if (v12 != v3) {
              break;
            }
          }

          unint64_t result = (void *)*result;
        }

        while (result);
      }
    }
  }

  std::__hash_table<std::__hash_value_type<void const*,std::string>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,std::string>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,std::string>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,std::string>>>::__construct_node_hash<std::pair<void const* const,std::string> const&>( a1,  v7,  a3,  (uint64_t)&v21);
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1LL;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<void const*,std::string>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,std::string>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,std::string>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,std::string>>>::__rehash<true>( a1,  v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
      else {
        unint64_t v3 = v7;
      }
    }

    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
  }

  unint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    void *v21 = *v19;
    *unint64_t v19 = v21;
  }

  else
  {
    void *v21 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v21;
    *(void *)(*(void *)a1 + 8 * GPUTools::DYLockUtils::Unlock((GPUTools::DYLockUtils *)&unk_207314, v3) = a1 + 16;
    if (*v21)
    {
      unint64_t v20 = *(void *)(*v21 + 8LL);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v20 >= v8) {
          v20 %= v8;
        }
      }

      else
      {
        v20 &= v8 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v20) = v21;
    }
  }

  unint64_t result = v21;
  ++*(void *)(a1 + 24);
  return result;
}

void sub_E460( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<void const*,std::string>,void *>>>::operator()[abi:ne180100]( (uint64_t)&a11,  __p);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<void const*,std::string>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,std::string>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,std::string>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,std::string>>>::__construct_node_hash<std::pair<void const* const,std::string> const&>( uint64_t a1@<X0>, std::string::size_type a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (std::string *)operator new(0x30uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + _Block_object_dispose(va, 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  v8->__r_.__value_.__r.__words[0] = 0LL;
  v8->__r_.__value_.__l.__size_ = a2;
  v8->__r_.__value_.__l.__cap_ = *(void *)a3;
  uint8x8_t v9 = v8 + 1;
  if (*(char *)(a3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)(a3 + 8), *(void *)(a3 + 16));
  }

  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)(a3 + 8);
    v9->__r_.__value_.__l.__cap_ = *(void *)(a3 + 24);
  }

  *(_BYTE *)(a4 + 16) = 1;
}

void sub_E518(_Unwind_Exception *a1)
{
  void *v1 = 0LL;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<void const*,std::string>,void *>>>::operator()[abi:ne180100]( v3,  v2);
  _Unwind_Resume(a1);
}

void std::string::__init_copy_ctor_external( std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  unint64_t v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8LL) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8LL) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    unint64_t v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__l.__cap_ = v7 | 0x8000000000000000LL;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    unint64_t v5 = v8;
  }

  else
  {
    this->__r_.__value_.__s.__size_ = __sz;
  }

  memmove(v5, __s, __sz + 1);
}

void std::__hash_table<std::__hash_value_type<void const*,std::string>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,std::string>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,std::string>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,std::string>>>::__rehash<true>( uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2LL;
  }

  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }

  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }

    else
    {
      uint64_t v7 = 1LL << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }

    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4) {
LABEL_16:
    }
      std::__hash_table<std::__hash_value_type<void const*,std::string>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,std::string>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,std::string>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,std::string>>>::__do_rehash<true>( a1,  prime);
  }

void std::__hash_table<std::__hash_value_type<void const*,std::string>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,std::string>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,std::string>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,std::string>>>::__do_rehash<true>( uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0LL;
    *(void *)(a1 + _Block_object_dispose(va, 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0LL;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }

      else
      {
        v8 &= a2 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v_Block_object_dispose(va, 8) = a1 + 16;
      int64x2_t v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }

          else
          {
            v12 &= a2 - 1;
          }

          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }

            *uint64_t v7 = *v11;
            void *v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = v11;
            int64x2_t v11 = v7;
          }

          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          int64x2_t v11 = (void *)*v11;
          unint64_t v8 = v12;
        }

        while (v11);
      }
    }
  }

  else
  {
    int64x2_t v10 = *(void **)a1;
    *(void *)a1 = 0LL;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  }

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<void const*,std::string>,void *>>>::operator()[abi:ne180100]( uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
  }

  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long const,std::string> const&>( uint64_t a1, std::string::size_type *a2, uint64_t a3)
{
  std::string::size_type v5 = *a2;
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      std::string::size_type v3 = *a2;
      if (v5 >= v6) {
        std::string::size_type v3 = v5 % v6;
      }
    }

    else
    {
      std::string::size_type v3 = (v6 - 1) & v5;
    }

    unint64_t v8 = *(void **)(*(void *)a1 + 8 * v3);
    if (v8)
    {
      unint64_t result = (void *)*v8;
      if (*v8)
      {
        do
        {
          unint64_t v10 = result[1];
          if (v10 == v5)
          {
            if (result[2] == v5) {
              return result;
            }
          }

          else
          {
            if (v7.u32[0] > 1uLL)
            {
              if (v10 >= v6) {
                v10 %= v6;
              }
            }

            else
            {
              v10 &= v6 - 1;
            }

            if (v10 != v3) {
              break;
            }
          }

          unint64_t result = (void *)*result;
        }

        while (result);
      }
    }
  }

  std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::__construct_node_hash<std::pair<unsigned long long const,std::string> const&>( a1,  *a2,  a3,  (uint64_t)&v19);
  float v11 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v12 = *(float *)(a1 + 32);
  if (!v6 || (float)(v12 * (float)v6) < v11)
  {
    BOOL v13 = 1LL;
    if (v6 >= 3) {
      BOOL v13 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v14 = v13 | (2 * v6);
    unint64_t v15 = vcvtps_u32_f32(v11 / v12);
    if (v14 <= v15) {
      size_t v16 = v15;
    }
    else {
      size_t v16 = v14;
    }
    std::__hash_table<std::__hash_value_type<void const*,std::string>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,std::string>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,std::string>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,std::string>>>::__rehash<true>( a1,  v16);
    unint64_t v6 = *(void *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v5 >= v6) {
        std::string::size_type v3 = v5 % v6;
      }
      else {
        std::string::size_type v3 = v5;
      }
    }

    else
    {
      std::string::size_type v3 = (v6 - 1) & v5;
    }
  }

  unint64_t v17 = *(void **)(*(void *)a1 + 8 * v3);
  if (v17)
  {
    *unint64_t v19 = *v17;
    *unint64_t v17 = v19;
  }

  else
  {
    *unint64_t v19 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v19;
    *(void *)(*(void *)a1 + 8 * GPUTools::DYLockUtils::Unlock((GPUTools::DYLockUtils *)&unk_207314, v3) = a1 + 16;
    if (*v19)
    {
      unint64_t v18 = *(void *)(*v19 + 8LL);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v18 >= v6) {
          v18 %= v6;
        }
      }

      else
      {
        v18 &= v6 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v1_Block_object_dispose(va, 8) = v19;
    }
  }

  unint64_t result = v19;
  ++*(void *)(a1 + 24);
  return result;
}

void sub_EA50( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<void const*,std::string>,void *>>>::operator()[abi:ne180100]( (uint64_t)&a11,  __p);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::__construct_node_hash<std::pair<unsigned long long const,std::string> const&>( uint64_t a1@<X0>, std::string::size_type a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (std::string *)operator new(0x30uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + _Block_object_dispose(va, 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  v8->__r_.__value_.__r.__words[0] = 0LL;
  v8->__r_.__value_.__l.__size_ = a2;
  v8->__r_.__value_.__l.__cap_ = *(void *)a3;
  uint8x8_t v9 = v8 + 1;
  if (*(char *)(a3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)(a3 + 8), *(void *)(a3 + 16));
  }

  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)(a3 + 8);
    v9->__r_.__value_.__l.__cap_ = *(void *)(a3 + 24);
  }

  *(_BYTE *)(a4 + 16) = 1;
}

void sub_EB08(_Unwind_Exception *a1)
{
  void *v1 = 0LL;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<void const*,std::string>,void *>>>::operator()[abi:ne180100]( v3,  v2);
  _Unwind_Resume(a1);
}

uint64_t DYGLInitInterpose(uint64_t a1, uint64_t a2, int a3)
{
  return GPUTools::Interpose::DYInitInterpose((GPUTools::Interpose *)DYGLInitPlatform, 0LL, a3);
}

void apply_draw_overrides(uint64_t a1, volatile int *a2)
{
  int v2 = (int)a2;
  uint64_t v4 = *(void *)(a1 + 32);
  if (((unsigned __int16)a2 & 0x100) != 0)
  {
    GPUTools::ResourceUpdater::ApplyDrawOverrides(*(uint64_t ***)(a1 + 3472));
    if ((v2 & 4) == 0)
    {
LABEL_3:
      if ((v2 & 0x100000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }

  else if ((a2 & 4) == 0)
  {
    goto LABEL_3;
  }

  (*(void (**)(void, uint64_t, uint64_t))(v4 + 832))(*(void *)(a1 + 16), 3088LL, a1 + 3380);
  (*(void (**)(void, void, void, uint64_t, uint64_t))(v4 + 2008))( *(void *)(a1 + 16),  0LL,  0LL,  1LL,  1LL);
  int v5 = (*(uint64_t (**)(void, uint64_t))(v4 + 1144))(*(void *)(a1 + 16), 3089LL);
  char v6 = v5;
  if (!v5) {
    (*(void (**)(void, uint64_t))(v4 + 576))(*(void *)(a1 + 16), 3089LL);
  }
  *(_BYTE *)(a1 + 3396) = v6;
  if ((v2 & 0x100000) == 0)
  {
LABEL_4:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_5;
    }
LABEL_12:
    *(_DWORD *)(a1 + 3376) |= 1u;
    if ((v2 & 0x20) == 0) {
      return;
    }
    goto LABEL_15;
  }

LABEL_50:
          (*(void (**)(void, uint64_t, void))(v4 + 40))( *(void *)(a1 + 16),  v35,  *(unsigned int *)((char *)v74->__begin_ + ((16 * v34) | (4LL * v39))));
          if (v39 == 1 && *(_BYTE *)(a1 + 4860))
          {
            (*(void (**)(void, uint64_t, uint64_t, unsigned int *))(v4 + 1016))( *(void *)(a1 + 16),  v35,  34893LL,  &v75);
            (*(void (**)(void, uint64_t, uint64_t, void))(v4 + 2432))( *(void *)(a1 + 16),  v35,  34893LL,  v75);
            (*(void (**)(void, uint64_t, uint64_t, unsigned int *))(v4 + 1016))( *(void *)(a1 + 16),  v35,  34892LL,  &v75);
            (*(void (**)(void, uint64_t, uint64_t, void))(v4 + 2432))( *(void *)(a1 + 16),  v35,  34892LL,  v75);
          }

          uint64_t v40 = *(_DWORD **)(a1 + 3648);
          unint64_t v41 = *(void *)(a1 + 3656);
          if ((unint64_t)v40 >= v41)
          {
            uint64_t v48 = ((char *)v40 - *v73) >> 3;
            unint64_t v49 = v48 + 1;
            uint64_t v50 = v41 - (void)*v73;
            if (v50 >> 2 > v49) {
              unint64_t v49 = v50 >> 2;
            }
            else {
              unint64_t v51 = v49;
            }
            __int128 v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned int,unsigned int>>>( a1 + 3656,  v51);
            uint64_t v53 = &v52[8 * v48];
            *(_DWORD *)uint64_t v53 = v31;
            *((_DWORD *)v53 + 1) = v35;
            uint32x4_t v54 = *(char **)(a1 + 3648);
            int64_t v55 = *(char **)(a1 + 3640);
            uint64_t v56 = v53;
            if (v54 != v55)
            {
              do
              {
                uint64_t v57 = *((void *)v54 - 1);
                v54 -= 8;
                *((void *)v56 - 1) = v57;
                v56 -= 8;
              }

              while (v54 != v55);
              uint32x4_t v54 = *v73;
            }

            *(void *)(a1 + 3640) = v56;
            uint64_t v42 = v53 + 8;
            *(void *)(a1 + 364_Block_object_dispose(va, 8) = v53 + 8;
            *(void *)(a1 + 3656) = &v52[8 * (void)v9];
            if (v54) {
              operator delete(v54);
            }
          }

          else
          {
            *uint64_t v40 = v31;
            v40[1] = v35;
            uint64_t v42 = v40 + 2;
          }

          *(void *)(a1 + 364_Block_object_dispose(va, 8) = v42;
        }
      }

      ++v34;
      uint64_t v33 = *(void *)(a1 + 3408);
      if (v34 >= (*(void *)(a1 + 3416) - v33) >> 2) {
        goto LABEL_82;
      }
      continue;
    }
  }

    *uint64_t v29 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v29;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*v29)
    {
      int v28 = *(void *)(*v29 + 8LL);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v28 >= v10) {
          v28 %= v10;
        }
      }

      else
      {
        v28 &= v10 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v2_Block_object_dispose(va, 8) = v29;
    }

    goto LABEL_61;
  }

  uint64_t v18 = *(void **)(*(void *)a1 + 8 * v4);
  if (!v18) {
    goto LABEL_50;
  }
LABEL_26:
  *uint64_t v29 = *v18;
  *uint64_t v18 = v29;
LABEL_61:
  unint64_t result = v29;
  ++*(void *)(a1 + 24);
  return result;
}

    void *v26 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*v26)
    {
      int v25 = *(void *)(*v26 + 8LL);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v25 >= v7) {
          v25 %= v7;
        }
      }

      else
      {
        v25 &= v7 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v25) = v26;
    }

    goto LABEL_61;
  }

  uint64_t v15 = *(void **)(*(void *)a1 + 8 * v4);
  if (!v15) {
    goto LABEL_50;
  }
LABEL_26:
  void *v26 = *v15;
  void *v15 = v26;
LABEL_61:
  unint64_t result = v26;
  ++*(void *)(a1 + 24);
  return result;
}

LABEL_83:
  GPUTools::DYLockUtils::Unlock((GPUTools::DYLockUtils *)(*(void *)(a1 + 40) + 296LL), v9);
}

void unapply_draw_overrides(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if ((a2 & 4) != 0
    && ((*(void (**)(void, void, void, void, void))(v4 + 2008))( *(void *)(a1 + 16),  *(unsigned int *)(a1 + 3380),  *(unsigned int *)(a1 + 3384),  *(unsigned int *)(a1 + 3388),  *(unsigned int *)(a1 + 3392)),  !*(_BYTE *)(a1 + 3396)))
  {
    (*(void (**)(void, uint64_t))(v4 + 504))(*(void *)(a1 + 16), 3089LL);
    if ((a2 & 0x100000) == 0) {
      goto LABEL_7;
    }
  }

  else if ((a2 & 0x100000) == 0)
  {
    goto LABEL_7;
  }

  (*(void (**)(void, void, void, void, void))(v4 + 2680))( *(void *)(a1 + 16),  *(unsigned int *)(a1 + 3360),  *(unsigned int *)(a1 + 3364),  *(unsigned int *)(a1 + 3368),  *(unsigned int *)(a1 + 3372));
  (*(void (**)(void, void, void, void, void))(v4 + 2008))( *(void *)(a1 + 16),  *(unsigned int *)(a1 + 3380),  *(unsigned int *)(a1 + 3384),  *(unsigned int *)(a1 + 3388),  *(unsigned int *)(a1 + 3392));
  if (!*(_BYTE *)(a1 + 3396)) {
    (*(void (**)(void, uint64_t))(v4 + 504))(*(void *)(a1 + 16), 3089LL);
  }
LABEL_7:
  if ((a2 & 0x200000) != 0 && (*(_BYTE *)(a1 + 3376) & 1) != 0) {
    (*(void (**)(void, uint64_t))(v4 + 576))(*(void *)(a1 + 16), 3042LL);
  }
  if ((a2 & 0x20) != 0)
  {
    int v5 = *(unsigned int **)(a1 + 3640);
    for (uint64_t i = *(unsigned int **)(a1 + 3648); v5 != i; v5 += 2)
    {
      (*(void (**)(void, void))(v4 + 2736))(*(void *)(a1 + 16), *v5 + 33984);
      int v7 = v5[1];
      if (v7 > 34066)
      {
        if (v7 == 34067)
        {
          (*(void (**)(void, uint64_t, void))(v4 + 40))( *(void *)(a1 + 16),  34067LL,  *(unsigned int *)(a1 + 40LL * *v5 + 2096));
        }

        else
        {
          if (v7 != 35866)
          {
LABEL_25:
            unint64_t v8 = (std::vector<unsigned int> *)dy_abort("unsupported or unknown texture target: 0x%04X", v5[1]);
            std::vector<unsigned int>::resize(v8, v9);
            return;
          }

          (*(void (**)(void, uint64_t, void))(v4 + 40))( *(void *)(a1 + 16),  35866LL,  *(unsigned int *)(a1 + 40LL * *v5 + 2104));
        }
      }

      else if (v7 == 3553)
      {
        (*(void (**)(void, uint64_t, void))(v4 + 40))( *(void *)(a1 + 16),  3553LL,  *(unsigned int *)(a1 + 40LL * *v5 + 2084));
      }

      else
      {
        if (v7 != 32879) {
          goto LABEL_25;
        }
        (*(void (**)(void, uint64_t, void))(v4 + 40))( *(void *)(a1 + 16),  32879LL,  *(unsigned int *)(a1 + 40LL * *v5 + 2092));
      }
    }

    (*(void (**)(void, void))(v4 + 2736))(*(void *)(a1 + 16), *(unsigned int *)(a1 + 2072));
  }

  if ((a2 & 0x100) != 0) {
    GPUTools::ResourceUpdater::RemoveDrawOverrides(*(uint64_t ***)(a1 + 3472));
  }
}

void std::vector<unsigned int>::resize( std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __sz)
{
  std::vector<unsigned int>::size_type v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2) {
      this->__end_ = &this->__begin_[__sz];
    }
  }

  else
  {
    std::vector<unsigned int>::__append(this, __sz - v2);
  }

void std::vector<unsigned int>::__append( std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  int v5 = value;
  end = p_end_cap[-1].__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      bzero(p_end_cap[-1].__value_, 4 * __n);
      end += __n;
    }

    this->__end_ = end;
  }

  else
  {
    std::vector<unsigned int>::pointer begin = this->__begin_;
    uint64_t v9 = (char *)end - (char *)this->__begin_;
    unint64_t v10 = __n + (v9 >> 2);
    if (v10 >> 62) {
      std::vector<ProgramShaderInfo>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 2;
    uint64_t v12 = (char *)v5 - (char *)begin;
    if (v12 >> 1 > v10) {
      unint64_t v10 = v12 >> 1;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)p_end_cap, v13);
      std::vector<unsigned int>::pointer begin = this->__begin_;
      end = this->__end_;
    }

    else
    {
      uint64_t v14 = 0LL;
    }

    uint64_t v15 = &v14[4 * v11];
    uint64_t v16 = (unsigned int *)&v14[4 * v13];
    bzero(v15, 4 * __n);
    uint64_t v17 = (unsigned int *)&v15[4 * __n];
    while (end != begin)
    {
      int v18 = *--end;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }

    this->__begin_ = (std::vector<unsigned int>::pointer)v15;
    this->__end_ = v17;
    this->__end_cap_.__value_ = v16;
    if (begin) {
      operator delete(begin);
    }
  }

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(4 * a2);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned int,unsigned int>>>( uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a2);
}

void ContextHarvester::ContextHarvester(ContextHarvester *this, ContextInfo *a2, GPUTools::FB::Stream *a3)
{
  *(_DWORD *)this = 0;
  *((void *)this + 1) = 0LL;
  *((void *)this + 2) = a2;
  uint64_t v4 = *((void *)a2 + 4);
  *((void *)this + 3) = a2;
  int v5 = (char *)this + 24;
  *((void *)this + 4) = v4;
  *((void *)this + 5) = a3;
  *((void *)this + 6) = *((void *)a2 + 5) + 104LL;
  *((void *)this + 7) = *((void *)a2 + 5) + 64LL;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((void *)this + 13) = 0x100000001LL;
  char v6 = (void *)((char *)this + 104);
  *((_DWORD *)this + 24) = 1065353216;
  *((_DWORD *)this + 37) = 0;
  *((_OWORD *)this + 11) = xmmword_1F2D60;
  *((void *)this + 24) = 0LL;
  *((void *)this + 25) = 0LL;
  *((_WORD *)this + 104) = 0;
  *(_OWORD *)((char *)this + 212) = xmmword_1F2D60;
  *(void *)((char *)this + 236) = 0LL;
  *(void *)((char *)this + 22_Block_object_dispose(va, 8) = 0LL;
  *((_WORD *)this + 122) = 0;
  *((void *)this + 31) = 35633LL;
  *((_BYTE *)this + 256) = 0;
  *(void *)((char *)this + 260) = 35632LL;
  *((_BYTE *)this + 26_Block_object_dispose(va, 8) = 0;
  *((void *)this + 34) = 36313LL;
  *((_BYTE *)this + 280) = 0;
  *(void *)((char *)this + 284) = 36488LL;
  *((_BYTE *)this + 292) = 0;
  *((void *)this + 37) = 36487LL;
  *((_BYTE *)this + 304) = 0;
  *(_OWORD *)((char *)this + 504) = 0u;
  *(_OWORD *)((char *)this + 520) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *(_OWORD *)((char *)this + 48_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)((char *)this + 440) = 0u;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 40_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 32_Block_object_dispose(va, 8) = 0u;
  GPUTools::VMBuffer::VMBuffer((ContextHarvester *)((char *)this + 536), 0LL, 0LL);
  *((_BYTE *)this + 591) = 1;
  *((_DWORD *)this + 35) = 0;
  *((_DWORD *)this + 36) = 0;
  *((void *)this + 20) = 0LL;
  *((void *)this + 21) = 0LL;
  clear_errors(*((void **)this + 2));
  wrapper_cache_program_parameter(*((ContextInfo **)this + 2), v7, v8, v9);
  int v16 = 1;
  [**((id **)this + 2) setParameter:1501 to:&v16];
  *((_BYTE *)this + 590) = GPUTools::GL::ShouldUseGLIReadTextureData(v5);
  update_context_state_cache(*((void *)this + 2));
  if (*((void *)this + 68) <= 0x10uLL) {
    __assert_rtn("void GPUTools::VMBuffer::set_alignment(size_t)", (const char *)&unk_1F0B16, 0, "alignment < _size");
  }
  unint64_t v10 = *((void *)this + 67);
  int64x2_t v11 = (int64x2_t)vandq_s8( (int8x16_t)vaddq_s64(vdupq_n_s64(v10 + 15), *((int64x2_t *)this + 35)),  (int8x16_t)vdupq_n_s64(0xFFFFFFFFFFFFFFF0LL));
  *((void *)this + 72) = 16LL;
  *((int64x2_t *)this + 35) = vsubq_s64(v11, vdupq_n_s64(v10));
  uint64_t v12 = *((void *)this + 2);
  if (*(int *)(v12 + 3460) < 2)
  {
    *char v6 = 0x100000001LL;
    if (!*(_BYTE *)(v12 + 4862))
    {
LABEL_4:
      *((_DWORD *)this + 2_Block_object_dispose(va, 8) = 0;
      goto LABEL_10;
    }
  }

  else
  {
    (*(void (**)(void, uint64_t, void *))(*((void *)this + 4) + 832LL))( *(void *)(*((void *)this + 3) + 16LL),  36063LL,  v6);
    (*(void (**)(void, uint64_t, char *))(*((void *)this + 4) + 832LL))( *(void *)(*((void *)this + 3) + 16LL),  34852LL,  (char *)this + 108);
    uint64_t v12 = *((void *)this + 2);
    if (!*(_BYTE *)(v12 + 4862)) {
      goto LABEL_4;
    }
  }

  (*(void (**)(void, uint64_t, char *))(*((void *)this + 4) + 832LL))( *(void *)(*((void *)this + 3) + 16LL),  35979LL,  (char *)this + 112);
  uint64_t v12 = *((void *)this + 2);
  if (*(int *)(v12 + 3460) < 3)
  {
LABEL_5:
    *((_DWORD *)this + 29) = 0;
    int v13 = *(_DWORD *)(v12 + 3456);
    uint64_t v14 = *((void *)this + 4);
    if (v13) {
      goto LABEL_6;
    }
LABEL_11:
    *((void *)this + 16) = *(void *)(v14 + 4400);
    *((void *)this + 15) = 0xD100000015LL;
    *((_BYTE *)this + 256) = 1;
    *((_BYTE *)this + 26_Block_object_dispose(va, 8) = 1;
    char v15 = *(_BYTE *)(v12 + 4845);
LABEL_14:
    *((_BYTE *)this + 280) = v15;
    *((_BYTE *)this + 292) = 0;
    *((_BYTE *)this + 304) = 0;
    goto LABEL_15;
  }

LABEL_15:
  if (*((void *)this + 5)) {
    ContextHarvester::encode(this, 4294955024LL, 0LL, "Ciui", *(void *)v12, 7LL, 6LL);
  }
}

    v11 += 8;
    v18 -= 32LL;
    if (!v18) {
      goto LABEL_51;
    }
  }

  if (!(_DWORD)v19)
  {
    ContextHarvester::encode( (ContextHarvester *)this,  192LL,  0LL,  "Ceeeui",  *(void *)this[2],  36160LL,  *v11,  36161LL,  0LL);
    goto LABEL_15;
  }

  if ((_DWORD)v19 != 5890) {
    goto LABEL_57;
  }
  GPUTools::NameTargetTupleArray::find(this + 39, v11[1], v37);
  if (v37[0] == &this[40][2 * *this[39]]) {
    unsigned int v20 = (GPUTools::FB::Fbuf *)(&stru_4C0 + 65);
  }
  else {
    unsigned int v20 = (GPUTools::FB::Fbuf *)v17;
  }
  if (v11[7])
  {
    ContextHarvester::encodeWithError( (ContextHarvester *)this,  196LL,  0LL,  v20,  "Ceeuii",  *(void *)this[2],  36160LL,  *v11,  v11[1],  v11[5]);
    goto LABEL_15;
  }

  unsigned int v22 = v11[3];
  if ((int)v22 <= 34066)
  {
    if ((int)v22 > 32878)
    {
      if ((_DWORD)v22 == 32879) {
        goto LABEL_45;
      }
      if ((_DWORD)v22 != 34037) {
        goto LABEL_58;
      }
    }

    else
    {
      if ((_DWORD)v22 == 3552)
      {
        uint64_t v24 = v11 + 5;
        unsigned int v22 = 3552LL;
        int v25 = 193LL;
LABEL_49:
        ContextHarvester::encodeWithError( (ContextHarvester *)this,  v25,  0LL,  v20,  "Ceeeuii",  *(void *)this[2],  36160LL,  *v11,  v22,  v11[1],  *v24);
        goto LABEL_15;
      }

      if ((_DWORD)v22 != 3553) {
        goto LABEL_58;
      }
    }

  uint64_t v14 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v11) defaultFbufStream];
  char v15 = (GPUTools::FB::Fbuf *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 48LL);
  int v16 = (unsigned int *)((char *)v14 + 56);
  do
    uint64_t v17 = __ldaxr(v16);
  while (__stlxr(1u, v16));
  if (v17 == 1)
  {
    do
    {
      while (*v16 == 1)
        ;
      do
        int v18 = __ldaxr(v16);
      while (__stlxr(1u, v16));
    }

    while (v18 == 1);
  }

  GPUTools::FB::Stream::Write_nolock(v14, v15, **(unsigned int **)v15, 1);
  atomic_store(0, v16);
}

  uint64_t v14 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v11) defaultFbufStream];
  char v15 = (GPUTools::FB::Fbuf *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 48LL);
  int v16 = (unsigned int *)((char *)v14 + 56);
  do
    uint64_t v17 = __ldaxr(v16);
  while (__stlxr(1u, v16));
  if (v17 == 1)
  {
    do
    {
      while (*v16 == 1)
        ;
      do
        int v18 = __ldaxr(v16);
      while (__stlxr(1u, v16));
    }

    while (v18 == 1);
  }

  GPUTools::FB::Stream::Write_nolock(v14, v15, **(unsigned int **)v15, 1);
  atomic_store(0, v16);
}

void sub_FEBC(_Unwind_Exception *a1)
{
}

void ContextHarvester::encode(ContextHarvester *this, uint64_t a2, uint64_t a3, const char *a4, ...)
{
  unsigned int v8 = (GPUTools::FB::Stream *)*((void *)this + 5);
  int v9 = (GPUTools::FB::Fbuf *)(*((void *)this + 2) + 120LL);
  unint64_t v10 = (unsigned int *)((char *)v8 + 56);
  do
    unsigned int v11 = __ldaxr(v10);
  while (__stlxr(1u, v10));
  if (v11 == 1)
  {
    do
    {
      while (*v10 == 1)
        ;
      do
        unsigned int v12 = __ldaxr(v10);
      while (__stlxr(1u, v10));
    }

    while (v12 == 1);
  }

  GPUTools::FB::Stream::Write_nolock(v8, v9, **(unsigned int **)v9, 1);
  atomic_store(0, v10);
  GPUTools::FB::VAListArgumentProvider::~VAListArgumentProvider((GPUTools::FB::VAListArgumentProvider *)v13);
}

void sub_1005C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_10074(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t std::unordered_map<unsigned int,BOOL>::~unordered_map[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }

    while (v3);
  }

  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void ContextHarvester::~ContextHarvester(ContextHarvester *this)
{
  int v8 = 0;
  [**((id **)this + 2) setParameter:1501 to:&v8];
  GPUTools::VMBuffer::~VMBuffer((ContextHarvester *)((char *)this + 536));
  GPUTools::NameTargetTupleArray::reset((ContextHarvester *)((char *)this + 520));
  GPUTools::NameTargetTupleArray::reset((ContextHarvester *)((char *)this + 504));
  GPUTools::NameTargetTupleArray::reset((ContextHarvester *)((char *)this + 488));
  GPUTools::NameTargetTupleArray::reset((ContextHarvester *)((char *)this + 472));
  GPUTools::NameTargetTupleArray::reset((ContextHarvester *)((char *)this + 456));
  GPUTools::NameTargetTupleArray::reset((ContextHarvester *)((char *)this + 440));
  GPUTools::NameTargetTupleArray::reset((ContextHarvester *)((char *)this + 424));
  GPUTools::NameTargetTupleArray::reset((ContextHarvester *)((char *)this + 408));
  GPUTools::NameTargetTupleArray::reset((ContextHarvester *)((char *)this + 392));
  GPUTools::NameTargetTupleArray::reset((ContextHarvester *)((char *)this + 376));
  GPUTools::NameTargetTupleArray::reset((ContextHarvester *)((char *)this + 360));
  GPUTools::NameTargetTupleArray::reset((ContextHarvester *)((char *)this + 344));
  GPUTools::NameTargetTupleArray::reset((ContextHarvester *)((char *)this + 328));
  GPUTools::NameTargetTupleArray::reset((ContextHarvester *)((char *)this + 312));
  int v5 = (void *)*((void *)this + 10);
  if (v5)
  {
    do
    {
      char v6 = (void *)*v5;
      operator delete(v5);
      int v5 = v6;
    }

    while (v6);
  }

  unsigned int v7 = (void *)*((void *)this + 8);
  *((void *)this + _Block_object_dispose(va, 8) = 0LL;
  if (v7) {
    operator delete(v7);
  }
}

void ContextHarvester::HarvestObjectNames(uint64_t a1, int a2, void **a3)
{
  int v5 = (GPUTools::NameTargetTupleArray *)(&stru_600 + 64);
  switch(a2)
  {
    case 1:
      goto LABEL_7;
    case 2:
      int v5 = (GPUTools::NameTargetTupleArray *)((char *)&stru_600.reserved1 + 1);
LABEL_7:
      GPUTools::NameTargetTupleArray::querySpecificObjectList(*(id **)(a1 + 16), a3, v5);
      break;
    case 3:
      GPUTools::NameTargetTupleArray::querySpecificObjectList( *(id **)(a1 + 16),  a3,  (GPUTools::NameTargetTupleArray *)&stru_600.reserved1);
      break;
    case 4:
      GPUTools::NameTargetTupleArray::querySpecificObjectList( *(id **)(a1 + 16),  a3,  (GPUTools::NameTargetTupleArray *)((char *)&stru_600.reserved2 + 1));
      break;
    case 5:
      GPUTools::NameTargetTupleArray::querySpecificObjectList( *(id **)(a1 + 16),  a3,  (GPUTools::NameTargetTupleArray *)&stru_600.reserved2);
      break;
    case 6:
      GPUTools::NameTargetTupleArray::querySpecificObjectList( *(id **)(a1 + 16),  a3,  (GPUTools::NameTargetTupleArray *)((char *)&stru_600.reserved2 + 2));
      break;
    case 7:
    case 8:
      v8[0] = 0LL;
      v8[1] = 0LL;
      GPUTools::NameTargetTupleArray::querySpecificObjectList( *(id **)(a1 + 16),  v8,  (GPUTools::NameTargetTupleArray *)((char *)&stru_600.flags + 3));
      if (a2 == 7) {
        int v6 = 35648;
      }
      else {
        int v6 = 35656;
      }
      GPUTools::NameTargetTupleArray::split((GPUTools::NameTargetTupleArray *)v8, v6, a3, 0LL);
      GPUTools::NameTargetTupleArray::reset((GPUTools::NameTargetTupleArray *)v8);
      break;
    case 9:
      GPUTools::NameTargetTupleArray::querySpecificObjectList( *(id **)(a1 + 16),  a3,  (GPUTools::NameTargetTupleArray *)((char *)&stru_600.reserved1 + 2));
      break;
    case 10:
      GPUTools::NameTargetTupleArray::querySpecificObjectList( *(id **)(a1 + 16),  a3,  (GPUTools::NameTargetTupleArray *)&stru_650);
      break;
    case 11:
      GPUTools::NameTargetTupleArray::querySpecificObjectList( *(id **)(a1 + 16),  a3,  (GPUTools::NameTargetTupleArray *)((char *)&stru_600.reserved2 + 3));
      break;
    case 12:
      GPUTools::NameTargetTupleArray::querySpecificObjectList( *(id **)(a1 + 16),  a3,  (GPUTools::NameTargetTupleArray *)((char *)&stru_650.cmd + 1));
      break;
    default:
      unsigned int v7 = (void *)dy_abort("unsupported resource type: %d", a2);
      __clang_call_terminate(v7);
  }

void sub_103A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t ContextHarvester::HarvestBufferObject( uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(_DWORD *)a1 = 1;
  *(void *)(a1 + _Block_object_dispose(va, 8) = a5;
  ContextHarvester::harvestBufferObject( (GPUTools::FB::Stream **)a1,  (GPUTools::GL *)((char *)&loc_8890 + 2),  a2,  a3,  a4,  0);
  uint64_t bound_buffer = wrapper_cache_get_bound_buffer(*(ContextInfo **)(a1 + 16), 34962);
  uint64_t v8 = GPUTools::GL::DYGetBufferBindingEnum((GPUTools::GL *)((char *)&loc_8890 + 2), v7);
  uint64_t v9 = *(void *)(a1 + 32);
  unint64_t v10 = *(uint64_t (**)(void, uint64_t, uint64_t))(v9 + 5136);
  uint64_t result = (*(uint64_t (**)(void, uint64_t, int *))(v9 + 832))( *(void *)(*(void *)(a1 + 24) + 16LL),  v8,  &v12);
  if (v12 != (_DWORD)bound_buffer) {
    return v10(*(void *)(*(void *)(a1 + 24) + 16LL), 34962LL, bound_buffer);
  }
  return result;
}

void ContextHarvester::harvestBufferObject( GPUTools::FB::Stream **this, GPUTools::GL *a2, unsigned int a3, uint64_t a4, uint64_t a5, int a6)
{
  unsigned int v106 = a3;
  if (!(_DWORD)a2) {
    __assert_rtn( "void ContextHarvester::harvestBufferObject(GLenum, GLuint, intptr_t, intptr_t, BOOL)",  (const char *)&unk_1F0B16,  0,  "target != 0u");
  }
  uint64_t v6 = a4;
  if (a4 < 0) {
    __assert_rtn( "void ContextHarvester::harvestBufferObject(GLenum, GLuint, intptr_t, intptr_t, BOOL)",  (const char *)&unk_1F0B16,  0,  "offset >= 0l");
  }
  if (a5 < 0) {
    __assert_rtn( "void ContextHarvester::harvestBufferObject(GLenum, GLuint, intptr_t, intptr_t, BOOL)",  (const char *)&unk_1F0B16,  0,  "size >= 0l");
  }
  if (!a3) {
    __assert_rtn( "void ContextHarvester::harvestBufferObject(GLenum, GLuint, intptr_t, intptr_t, BOOL)",  (const char *)&unk_1F0B16,  0,  "objectID != 0");
  }
  uint16x8_t v105 = this;
  ContextHarvester::encodeCommand( (ContextHarvester *)this,  4294955015LL,  3u,  a4,  a5,  65028LL,  kDYStateGroupBuffer,  65030LL,  a3,  65030LL,  0LL);
  uint64_t v12 = GPUTools::GL::DYGetBufferBindingEnum(a2, v11);
  int v13 = this[4];
  va_list v14 = (void (*)(void, GPUTools::GL *, uint64_t))*((void *)v13 + 642);
  uint64_t v15 = v106;
  (*((void (**)(void, uint64_t, void *))v13 + 104))(*((void *)this[3] + 2), v12, v100);
  if (LODWORD(v100[0]) != (_DWORD)v15) {
    v14(*((void *)this[3] + 2), a2, v15);
  }
  ContextHarvester::encode((ContextHarvester *)this, 201LL, 0LL, "Ci@1ui", *(void *)this[2], 1LL, &v106);
  ContextHarvester::encode((ContextHarvester *)this, 12LL, 128LL, "Ceui", *(void *)this[2], a2, v106);
  ContextHarvester::harvestObjectLabel((ContextHarvester *)this, 0x9151u, v106);
  if (*((int *)this[2] + 865) < 3)
  {
    (*((void (**)(void, GPUTools::GL *, uint64_t, void *))this[4] + 651))( *((void *)this[3] + 2),  a2,  34660LL,  v100);
    uint64_t v16 = SLODWORD(v100[0]);
  }

  else
  {
    (*((void (**)(void, GPUTools::GL *, uint64_t, void *))this[4] + 799))( *((void *)this[3] + 2),  a2,  34660LL,  v100);
    uint64_t v16 = v100[0];
  }

  (*((void (**)(void, GPUTools::GL *, uint64_t, int *))this[4] + 651))( *((void *)this[3] + 2),  a2,  34661LL,  &v104);
  (*((void (**)(void, GPUTools::GL *, uint64_t, int *))this[4] + 651))( *((void *)this[3] + 2),  a2,  35003LL,  &v103);
  (*((void (**)(void, GPUTools::GL *, uint64_t, int *))this[4] + 651))( *((void *)this[3] + 2),  a2,  35004LL,  &v102);
  if (*((_BYTE *)this[2] + 4849))
  {
    (*((void (**)(void, GPUTools::GL *, uint64_t, void *))this[4] + 651))( *((void *)this[3] + 2),  a2,  35346LL,  v100);
    (*((void (**)(void, GPUTools::GL *, uint64_t, uint64_t *))this[4] + 651))( *((void *)this[3] + 2),  a2,  35347LL,  &v101);
    ContextHarvester::encodeCommand( (ContextHarvester *)this,  30LL,  3u,  v22,  v23,  529413LL,  a2,  529413LL,  35346LL,  1053700LL,  LODWORD(v100[0]));
    ContextHarvester::encodeCommand( (ContextHarvester *)this,  30LL,  3u,  v24,  v25,  529413LL,  a2,  529413LL,  35347LL,  1053700LL,  v101);
  }

  if (!v16) {
    goto LABEL_104;
  }
  if (!v102)
  {
    uint64_t v28 = 0LL;
    uint64_t v29 = v16 - v6;
    if (v16 >= v6) {
      goto LABEL_26;
    }
    goto LABEL_21;
  }

  uint64_t v26 = this[2];
  if (*((_BYTE *)v26 + 4850)) {
    uint64_t v27 = 37152LL;
  }
  else {
    uint64_t v27 = 34660LL;
  }
  if (*((int *)v26 + 865) < 3)
  {
    (*((void (**)(void, GPUTools::GL *, uint64_t, void *))this[4] + 651))( *((void *)this[3] + 2),  a2,  v27,  v100);
    uint64_t v28 = SLODWORD(v100[0]);
    uint64_t v29 = v16 - v6;
    if (v16 >= v6) {
      goto LABEL_26;
    }
LABEL_21:
    uint64_t v30 = 0LL;
    uint64_t v6 = v16;
    if (!v102)
    {
LABEL_36:
      uint64_t v35 = this[2];
      if (*((_BYTE *)v35 + 4844))
      {
        uint64_t v31 = (*((uint64_t (**)(void, GPUTools::GL *, uint64_t))this[4] + 649))( *((void *)this[3] + 2),  a2,  35000LL);
      }

      else
      {
        uint64_t v40 = *((void *)v35 + 4);
        v100[0] = this[2];
        v100[1] = v40;
        uint64_t BufferSize = GPUTools::GL::GetBufferSize(v100, *((unsigned int *)v35 + 864), a2);
        uint64_t v31 = (*((uint64_t (**)(void, GPUTools::GL *, void, uint64_t, uint64_t))this[4] + 795))( *((void *)this[3] + 2),  a2,  0LL,  BufferSize,  1LL);
      }

      uint64_t v32 = v31;
      uint64_t v101 = v31;
LABEL_43:
      if (!v32) {
        __assert_rtn( "void ContextHarvester::harvestBufferObject(GLenum, GLuint, intptr_t, intptr_t, BOOL)",  (const char *)&unk_1F0B16,  0,  "mapPointer");
      }
      uint64_t v42 = this[1];
      unint64_t v43 = this[2];
      int v44 = *((unsigned __int8 *)this + 591);
      uint64_t v45 = DYGetGLGuestAppClient(v31);
      GPUTools::Interpose::DYSavePointer(v45, v30, v6 + v32, (char *)v43 + 4644, 65LL, v42, v44 != 0, 0LL, 0LL);
      uint64_t v50 = this[2];
      uint64_t v53 = *(void *)v50;
      uint64_t v51 = (uint64_t)v50 + 120;
      char v52 = v53;
      if (v6 < 1) {
        GPUTools::FB::Encode(v51, 29LL, 0LL, (uint64_t)"CelUe", v46, v47, v48, v49, v52);
      }
      else {
        GPUTools::FB::Encode(v51, 31LL, 0LL, (uint64_t)"CellU", v46, v47, v48, v49, v52);
      }
      uint32x4_t v54 = this[5];
      int64_t v55 = (GPUTools::FB::Stream *)((char *)this[2] + 120);
      uint64_t v56 = (unsigned int *)((char *)v54 + 56);
      do
        unsigned int v57 = __ldaxr(v56);
      while (__stlxr(1u, v56));
      if (v57 == 1)
      {
        do
        {
          while (*v56 == 1)
            ;
          do
            unsigned int v58 = __ldaxr(v56);
          while (__stlxr(1u, v56));
        }

        while (v58 == 1);
      }

      GPUTools::FB::Stream::Write_nolock(v54, v55, **(unsigned int **)v55, 1);
      atomic_store(0, v56);
      if (!v102) {
        (*((void (**)(void, GPUTools::GL *))this[4] + 650))(*((void *)this[3] + 2), a2);
      }
      if (!v102) {
        goto LABEL_104;
      }
LABEL_87:
      LODWORD(v101) = 0;
      if (*((_BYTE *)this[2] + 4850))
      {
        (*((void (**)(void, GPUTools::GL *, uint64_t, uint64_t *))this[4] + 651))( *((void *)this[3] + 2),  a2,  37151LL,  &v101);
        BOOL v89 = v101 < 4;
        int v90 = this[2];
        if (v28 != v16) {
          goto LABEL_93;
        }
      }

      else
      {
        BOOL v89 = 1;
        int v90 = this[2];
        if (v28 != v16) {
          goto LABEL_93;
        }
      }

      if (v89)
      {
        GPUTools::FB::Encode((uint64_t)v90 + 120, 363LL, 0LL, (uint64_t)"Cee", v18, v59, v60, v61, *(void *)v90);
LABEL_97:
        int64_t v95 = this[5];
        uint64_t v96 = (GPUTools::FB::Stream *)((char *)this[2] + 120);
        unint64_t v97 = (unsigned int *)((char *)v95 + 56);
        do
          unsigned int v98 = __ldaxr(v97);
        while (__stlxr(1u, v97));
        if (v98 == 1)
        {
          do
          {
            while (*v97 == 1)
              ;
            do
              unsigned int v99 = __ldaxr(v97);
            while (__stlxr(1u, v97));
          }

          while (v99 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v95, v96, **(unsigned int **)v96, 1);
        atomic_store(0, v97);
        goto LABEL_104;
      }

LABEL_93:
      if (*((int *)v90 + 865) < 3) {
        (*((void (**)(void, GPUTools::GL *, uint64_t, void *))this[4] + 651))( *((void *)this[3] + 2),  a2,  37153LL,  v100);
      }
      else {
        (*((void (**)(void, GPUTools::GL *, uint64_t, void *))this[4] + 799))( *((void *)this[3] + 2),  a2,  37153LL,  v100);
      }
      GPUTools::FB::Encode((uint64_t)this[2] + 120, 865LL, 0LL, (uint64_t)"Celle", v91, v92, v93, v94, *(void *)this[2]);
      goto LABEL_97;
    }

    goto LABEL_22;
  }

  (*((void (**)(void, GPUTools::GL *, uint64_t, void *))this[4] + 799))( *((void *)this[3] + 2),  a2,  v27,  v100);
  uint64_t v28 = v100[0];
  uint64_t v29 = v16 - v6;
  if (v16 < v6) {
    goto LABEL_21;
  }
LABEL_26:
  if (a5) {
    uint64_t v33 = a5;
  }
  else {
    uint64_t v33 = v16;
  }
  if (v33 + v6 > v16 || (v6 ^ 0x7FFFFFFFFFFFFFFFLL) < v33) {
    uint64_t v30 = v29;
  }
  else {
    uint64_t v30 = v33;
  }
  if (!v102) {
    goto LABEL_36;
  }
LABEL_22:
  if ((v103 - 35003) <= 0xFFFFFFFD && v28 == v16)
  {
    uint64_t v31 = (*((uint64_t (**)(void, GPUTools::GL *, uint64_t, uint64_t *))this[4] + 652))( *((void *)this[3] + 2),  a2,  35005LL,  &v101);
    uint64_t v32 = v101;
    goto LABEL_43;
  }

  if (a6)
  {
    uint64_t v36 = this[2];
    BOOL v38 = (unsigned int *)*((void *)v36 + 10);
    unint64_t v37 = *((void *)v36 + 11);
    if ((unint64_t)v38 >= v37)
    {
      uint64_t v62 = (unsigned int *)*((void *)v36 + 9);
      int64_t v63 = (char *)v38 - (char *)v62;
      uint64_t v64 = v38 - v62;
      unint64_t v65 = v64 + 1;
      uint64_t v66 = v37 - (void)v62;
      if (v66 >> 1 > v65) {
        unint64_t v65 = v66 >> 1;
      }
      else {
        unint64_t v67 = v65;
      }
      if (v67)
      {
        if (v67 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v68 = operator new(4 * v67);
        int64_t v63 = (char *)v38 - (char *)v62;
        uint64_t v64 = v38 - v62;
      }

      else
      {
        uint64_t v68 = 0LL;
      }

      uint64_t v69 = (unsigned int *)&v68[4 * v64];
      int v70 = &v68[4 * v67];
      unsigned int *v69 = v106;
      unsigned int v39 = v69 + 1;
      if (v38 != v62)
      {
        unint64_t v71 = (char *)v38 - (char *)v62 - 4;
        if (v71 < 0x2C) {
          goto LABEL_114;
        }
        uint64_t v72 = (v71 >> 2) + 1;
        uint64_t v73 = 4 * (v72 & 0x7FFFFFFFFFFFFFF8LL);
        uint64_t v74 = &v38[v73 / 0xFFFFFFFFFFFFFFFCLL];
        uint64_t v69 = (unsigned int *)((char *)v69 - v73);
        unsigned int v75 = &v68[4 * v64 - 16];
        uint64_t v76 = v38 - 4;
        uint64_t v77 = v72 & 0x7FFFFFFFFFFFFFF8LL;
        do
        {
          __int128 v78 = *(_OWORD *)v76;
          *(v75 - 1) = *((_OWORD *)v76 - 1);
          _OWORD *v75 = v78;
          v75 -= 2;
          v76 -= 8;
          v77 -= 8LL;
        }

        while (v77);
        BOOL v38 = v74;
        if (v72 != (v72 & 0x7FFFFFFFFFFFFFF8LL))
        {
LABEL_114:
          do
          {
            unsigned int v79 = *--v38;
            *--uint64_t v69 = v79;
          }

          while (v38 != v62);
        }
      }

      *((void *)v36 + 9) = v69;
      *((void *)v36 + 10) = v39;
      *((void *)v36 + 11) = v70;
      if (v62) {
        operator delete(v62);
      }
    }

    else
    {
      *BOOL v38 = v106;
      unsigned int v39 = v38 + 1;
    }

    *((void *)v36 + 10) = v39;
  }

  uint64_t v80 = this[2];
  uint64_t v83 = *(void *)v80;
  uint64_t v81 = (uint64_t)v80 + 120;
  char v82 = v83;
  if (v6 < 1) {
    GPUTools::FB::Encode(v81, 29LL, 0LL, (uint64_t)"Celte", v18, v19, v20, v21, v82);
  }
  else {
    GPUTools::FB::Encode(v81, 31LL, 0LL, (uint64_t)"Cellt", v18, v19, v20, v21, v82);
  }
  uint64_t v84 = this[5];
  uint64_t v85 = (GPUTools::FB::Stream *)((char *)this[2] + 120);
  uint64_t v86 = (unsigned int *)((char *)v84 + 56);
  do
    unsigned int v87 = __ldaxr(v86);
  while (__stlxr(1u, v86));
  if (v87 == 1)
  {
    do
    {
      while (*v86 == 1)
        ;
      do
        unsigned int v88 = __ldaxr(v86);
      while (__stlxr(1u, v86));
    }

    while (v88 == 1);
  }

  GPUTools::FB::Stream::Write_nolock(v84, v85, **(unsigned int **)v85, 1);
  atomic_store(0, v86);
  if (v102) {
    goto LABEL_87;
  }
LABEL_104:
  ContextHarvester::encodeCommand((ContextHarvester *)v105, 4294955016LL, 0, v17, v18);
}

  GPUTools::ScopeFunction::~ScopeFunction((GPUTools::ScopeFunction *)v94);
  GPUTools::ScopeFunction::~ScopeFunction((GPUTools::ScopeFunction *)&v97);
  return v47;
}

void sub_10DB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
}

void sub_10DC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
}

void sub_10DD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
}

void sub_10DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
}

void sub_10E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
}

void sub_10E14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
}

void sub_10E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
}

void sub_10E98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
}

void sub_10EAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
}

void sub_10EC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
}

void sub_10ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
}

void sub_10EEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
}

void sub_10F00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
}

void ContextHarvester::harvestGLSLShader(ContextHarvester *this, uint64_t a2)
{
  unint64_t v4 = a2;
  (*(void (**)(void))(*((void *)this + 4) + 5256LL))(*(void *)(*((void *)this + 3) + 16LL));
  uint64_t v64 = this;
  ContextHarvester::encodeCommand( this,  4294955015LL,  3u,  v5,  v6,  65028LL,  kDYStateGroupGLSLShader,  65030LL,  v4,  65030LL,  v65);
  ContextHarvester::encode_r(this, 117LL, 0LL, (void *)v4, "Ce", **((void **)this + 2), v65);
  (*(void (**)(void, uint64_t, uint64_t, int *))(*((void *)this + 4) + 5256LL))( *(void *)(*((void *)this + 3) + 16LL),  a2,  35713LL,  &v63);
  (*(void (**)(void, uint64_t, uint64_t, int *))(*((void *)this + 4) + 5256LL))( *(void *)(*((void *)this + 3) + 16LL),  a2,  35712LL,  &v62);
  ContextHarvester::copyCurrentShaderTextAndLog(this, a2, &v58, &v60, &v59, &v61);
  unsigned int v7 = (void *)*((void *)this + 7);
  int8x8_t v8 = (int8x8_t)v7[1];
  if (!*(void *)&v8) {
    goto LABEL_21;
  }
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v8);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v4;
    if (*(void *)&v8 <= v4) {
      unint64_t v10 = v4 % *(void *)&v8;
    }
  }

  else
  {
    unint64_t v10 = (v8.i32[0] - 1) & v4;
  }

  unsigned int v11 = *(uint64_t ***)(*v7 + 8 * v10);
  if (v11)
  {
    uint64_t v12 = *v11;
    if (*v11)
    {
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v13 = *(void *)&v8 - 1LL;
        while (1)
        {
          unint64_t v15 = v12[1];
          if (v15 == v4)
          {
            if (*((_DWORD *)v12 + 4) == (_DWORD)a2) {
              goto LABEL_22;
            }
          }

          else if ((v15 & v13) != v10)
          {
            goto LABEL_21;
          }

          uint64_t v12 = (uint64_t *)*v12;
          if (!v12) {
            goto LABEL_22;
          }
        }
      }

      do
      {
        unint64_t v14 = v12[1];
        if (v14 == v4)
        {
          if (*((_DWORD *)v12 + 4) == (_DWORD)a2) {
            break;
          }
        }

        else
        {
          if (v14 >= *(void *)&v8) {
            v14 %= *(void *)&v8;
          }
          if (v14 != v10) {
            goto LABEL_21;
          }
        }

        uint64_t v12 = (uint64_t *)*v12;
      }

      while (v12);
    }
  }

  else
  {
LABEL_21:
    uint64_t v12 = 0LL;
  }

void sub_11404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
}

void sub_11418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
}

void sub_1142C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
}

void sub_11440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
}

void sub_11454( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void ContextHarvester::getVertexArrays(ContextHarvester *this, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v15 = 0LL;
  uint64_t v6 = *((void *)this + 2);
  if (*(_BYTE *)(v6 + 4852))
  {
    (*(void (**)(void, uint64_t, char *))(*((void *)this + 4) + 832LL))( *(void *)(*((void *)this + 3) + 16LL),  34964LL,  (char *)&v15 + 4);
    (*(void (**)(void, uint64_t, uint64_t *))(*((void *)this + 4) + 832LL))( *(void *)(*((void *)this + 3) + 16LL),  34965LL,  &v15);
    uint64_t v6 = *((void *)this + 2);
  }

  if (*(_BYTE *)(v6 + 4858))
  {
    LODWORD(v7) = 0;
    do
    {
      ContextHarvester::getFixedFunctionVertexArrays(this, v7, a3, a4, a5);
      unint64_t v7 = (v7 + 1);
    }

    while (v7 < 7);
    uint64_t v6 = *((void *)this + 2);
  }

  if (*(_DWORD *)(v6 + 3456) != 1 && *(_DWORD *)(v6 + 3452))
  {
    uint64_t v8 = 0LL;
    do
    {
      ContextHarvester::getGenericVertexArrays((uint64_t **)this, v8, a3, a4, a5);
      uint64_t v8 = (v8 + 1);
      uint64_t v6 = *((void *)this + 2);
    }

    while (v8 < *(_DWORD *)(v6 + 3452));
  }

  if (*(_BYTE *)(v6 + 4852))
  {
    if (HIDWORD(v15))
    {
      int v9 = (*(uint64_t (**)(void))(*((void *)this + 4) + 5160LL))(*(void *)(*((void *)this + 3) + 16LL));
      uint64_t v10 = HIDWORD(v15);
      if (!v9)
      {
        uint64_t v11 = (GPUTools::FB::Fbuf *)(&stru_4C0 + 66);
        goto LABEL_17;
      }
    }

    else
    {
      uint64_t v10 = 0LL;
    }

    uint64_t v11 = 0LL;
LABEL_17:
    ContextHarvester::encodeWithError(this, 12LL, 128LL, v11, "Ceui", **((void **)this + 2), 34962LL, v10);
    if ((_DWORD)v15)
    {
      int v12 = (*(uint64_t (**)(void))(*((void *)this + 4) + 5160LL))(*(void *)(*((void *)this + 3) + 16LL));
      uint64_t v13 = v15;
      if (!v12)
      {
        uint64_t v14 = (GPUTools::FB::Fbuf *)(&stru_4C0 + 66);
LABEL_22:
        ContextHarvester::encodeWithError(this, 12LL, 128LL, v14, "Ceui", **((void **)this + 2), 34963LL, v13);
        return;
      }
    }

    else
    {
      uint64_t v13 = 0LL;
    }

    uint64_t v14 = 0LL;
    goto LABEL_22;
  }

void ContextHarvester::restoreVAOBindings(ContextHarvester *this, int a2)
{
  uint64_t v4 = *((void *)this + 2);
  if (*(_BYTE *)(v4 + 4852))
  {
    uint64_t v5 = *((unsigned int *)this + 34);
    (*((void (**)(void, uint64_t))this + 16))(*(void *)(*((void *)this + 3) + 16LL), v5);
    uint64_t v4 = *((void *)this + 2);
    if (a2)
    {
      ContextHarvester::encode(this, *((unsigned int *)this + 30), 128LL, "Cui", *(void *)v4, v5);
      ContextHarvester::harvestObjectLabel(this, 0x9154u, v5);
      uint64_t v4 = *((void *)this + 2);
    }
  }

  if (*(_BYTE *)(v4 + 4858))
  {
    (*(void (**)(void, void))(*((void *)this + 4) + 2728LL))( *(void *)(*((void *)this + 3) + 16LL),  *(unsigned int *)(v4 + 2076));
    if (a2) {
      ContextHarvester::encode( this,  44LL,  128LL,  "Ce",  **((void **)this + 2),  *(unsigned int *)(*((void *)this + 2) + 2076LL));
    }
  }

void ContextHarvester::harvestFramebuffer(unsigned int **this, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v5 = a2;
  unsigned int v36 = a2;
  uint64_t v35 = this;
  ContextHarvester::encodeCommand( (ContextHarvester *)this,  4294955015LL,  3u,  a4,  a5,  65028LL,  kDYStateGroupFramebuffer,  65030LL,  a2,  65030LL,  0LL);
  unint64_t v7 = this[4];
  uint64_t v8 = (void (*)(void, uint64_t, uint64_t))*((void *)v7 + 672);
  (*((void (**)(void, uint64_t, unsigned int **))v7 + 104))(*((void *)this[3] + 2), 36006LL, v37);
  if (LODWORD(v37[0]) != (_DWORD)v5)
  {
    v8(*((void *)this[3] + 2), 36160LL, v5);
    LODWORD(atomic_store(0, v5) = v36;
  }

  if ((_DWORD)v5)
  {
    ContextHarvester::encode((ContextHarvester *)this, 203LL, 0LL, "Ci@1ui", *(void *)this[2], 1LL, &v36);
    uint64_t v9 = v36;
  }

  else
  {
    uint64_t v9 = 0LL;
  }

  ContextHarvester::encode((ContextHarvester *)this, 17LL, 128LL, "Ceui", *(void *)this[2], 36160LL, v9);
  ContextHarvester::harvestObjectLabel((ContextHarvester *)this, 0x8D40u, v36);
  (*((void (**)(void, uint64_t, uint64_t, _BYTE *))this[4] + 1025))( *((void *)this[3] + 2),  36160LL,  35449LL,  v34);
  ContextHarvester::encode((ContextHarvester *)this, 825LL, 0LL, "Cee@1e", *(void *)this[2], 36160LL, 35449LL, v34);
  uint64_t v10 = (*((_DWORD *)this + 26) + 2);
  __chkstk_darwin();
  uint64_t v11 = (unsigned int *)((char *)v31 - v12);
  LODWORD(v12) = *((_DWORD *)this + 26);
  if ((_DWORD)v12)
  {
    unint64_t v13 = 0LL;
    uint64_t v14 = v11;
    do
    {
      GPUTools::GL::GetFramebufferAttachmentInfo(this + 3, this[2][864], 36160LL, (v13++ + 36064), v14);
      unint64_t v12 = *((unsigned int *)this + 26);
      v14 += 8;
    }

    while (v13 < v12);
  }

  GPUTools::GL::GetFramebufferAttachmentInfo(this + 3, this[2][864], 36160LL, 36096LL, &v11[8 * v12]);
  GPUTools::GL::GetFramebufferAttachmentInfo( this + 3,  this[2][864],  36160LL,  36128LL,  &v11[8 * (*((_DWORD *)this + 26) + 1)]);
  v31[1] = v31;
  else {
    unsigned int v17 = 1281;
  }
  if (!(_DWORD)v10)
  {
LABEL_51:
    if (*((_BYTE *)this[2] + 4870))
    {
      (*((void (**)(void, uint64_t, unsigned int *))this[4] + 104))(*((void *)this[3] + 2), 3074LL, &v33);
      ContextHarvester::encode((ContextHarvester *)this, 497LL, 0LL, "Ce", *(void *)this[2], v33);
      LODWORD(v26) = *((_DWORD *)this + 27);
      if ((_DWORD)v26)
      {
        unint64_t v27 = 0LL;
        uint64_t v28 = v37;
        do
        {
          (*((void (**)(void, void, unsigned int **))this[4] + 104))( *((void *)this[3] + 2),  (v27++ + 34853),  v28);
          unint64_t v26 = *((unsigned int *)this + 27);
          uint64_t v28 = (unsigned int **)((char *)v28 + 4);
        }

        while (v27 < v26);
      }

      snprintf((char *)this[2] + 4709, 0x40uLL, "Ci@%de", v26);
      ContextHarvester::encode( (ContextHarvester *)this,  141LL,  0LL,  (const char *)this[2] + 4709,  *(void *)this[2],  *((unsigned int *)this + 27),  v37);
    }

    ContextHarvester::encodeCommand((ContextHarvester *)this, 4294955016LL, 0, v15, v16);
    return;
  }

  uint64_t v32 = this + 47;
  uint64_t v18 = 32 * v10;
  while (1)
  {
    uint64_t v19 = v11[2];
    if ((_DWORD)v19 != 33304)
    {
      if ((_DWORD)v19 != 36161)
      {
LABEL_57:
        uint64_t v29 = (const char *)dy_string_from_enum(v19);
        dy_abort("unknown framebuffer attachment type: %s", v29);
        goto LABEL_59;
      }

      GPUTools::NameTargetTupleArray::find(v32, v11[1], v37);
      if (v37[0] == &this[48][2 * *this[47]]) {
        uint64_t v21 = (GPUTools::FB::Fbuf *)(&stru_4C0 + 65);
      }
      else {
        uint64_t v21 = (GPUTools::FB::Fbuf *)v17;
      }
      ContextHarvester::encodeWithError( (ContextHarvester *)this,  192LL,  0LL,  v21,  "Ceeeui",  *(void *)this[2],  36160LL,  *v11,  v11[3],  v11[1]);
    }

LABEL_48:
    char v24 = v11 + 5;
    uint64_t v25 = 194LL;
    goto LABEL_49;
  }

  if ((int)v22 <= 35865)
  {
    if ((_DWORD)v22 != 34067)
    {
      int v23 = 35864;
      goto LABEL_44;
    }

    uint64_t v22 = v11[4];
    goto LABEL_48;
  }

  if ((_DWORD)v22 == 37122) {
    goto LABEL_45;
  }
  if ((_DWORD)v22 == 37120) {
    goto LABEL_48;
  }
  int v23 = 35866;
LABEL_44:
  if ((_DWORD)v22 == v23)
  {
LABEL_45:
    ContextHarvester::encodeWithError( (ContextHarvester *)this,  198LL,  0LL,  v20,  "Ceeuiii",  *(void *)this[2],  36160LL,  *v11,  v11[1],  v11[5],  v11[6]);
    goto LABEL_15;
  }

    *a3 = v21;
    return v5;
  }

  if (v11)
  {
    *a3 = a4;
  }

  else
  {
    *a3 = a2;
    return a2 + 1;
  }

  return a4;
}

LABEL_58:
  uint64_t v30 = (const char *)dy_string_from_enum(v22);
  dy_abort("unknown texture target: %s", v30);
LABEL_59:
  __break(1u);
}

    *((void *)&v80 + 1) = 0LL;
    uint64_t v81 = 0LL;
    *(void *)char v82 = 0LL;
    LODWORD(v80) = v79[0];
    int v60 = std::__hash_table<std::__hash_value_type<unsigned int,IOSurfaceInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,IOSurfaceInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,IOSurfaceInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,IOSurfaceInfo>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,IOSurfaceInfo>>( (uint64_t)v55,  (unsigned int *)&v80,  &v80);
LABEL_59:
    *((_DWORD *)v60 + 6) = IOSurfaceGetID(a3);
    *((_DWORD *)v60 + 7) = IOSurfaceGetSeed(a3);
    *((_BYTE *)v60 + 32) = a11;
    v60[5] = a10;
    GPUTools::DYLockUtils::Unlock(v53, v64);
  }

  return v31;
}

void sub_11D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
}

void ContextHarvester::restoreFramebufferBindings(ContextHarvester *this, int a2)
{
  uint64_t v4 = *((unsigned int *)this + 35);
  uint64_t v5 = *((void *)this + 4);
  uint64_t v6 = *(void (**)(void, uint64_t, uint64_t))(v5 + 5376);
  if ((_DWORD)v4 == *((_DWORD *)this + 36))
  {
    (*(void (**)(void, uint64_t, int *))(v5 + 832))( *(void *)(*((void *)this + 3) + 16LL),  36006LL,  &v18);
    if (v18 != (_DWORD)v4) {
      v6(*(void *)(*((void *)this + 3) + 16LL), 36160LL, v4);
    }
    if (a2)
    {
      uint64_t v7 = *((unsigned int *)this + 35);
      if ((_DWORD)v7
        && !(*(unsigned int (**)(void, void))(*((void *)this + 4) + 5368LL))( *(void *)(*((void *)this + 3) + 16LL),  *((unsigned int *)this + 35)))
      {
        uint64_t v8 = (GPUTools::FB::Fbuf *)(&stru_4C0 + 66);
      }

      else
      {
        uint64_t v8 = 0LL;
      }

      ContextHarvester::encodeWithError(this, 17LL, 128LL, v8, "Ceui", **((void **)this + 2), 36160LL, v7);
    }
  }

  else
  {
    (*(void (**)(void, uint64_t, int *))(v5 + 832))( *(void *)(*((void *)this + 3) + 16LL),  36006LL,  &v16);
    if (v16 != (_DWORD)v4) {
      v6(*(void *)(*((void *)this + 3) + 16LL), 36009LL, v4);
    }
    uint64_t v9 = *((void *)this + 4);
    uint64_t v10 = *(void (**)(void, uint64_t, uint64_t))(v9 + 5376);
    uint64_t v11 = *((unsigned int *)this + 36);
    (*(void (**)(void, uint64_t, int *))(v9 + 832))( *(void *)(*((void *)this + 3) + 16LL),  36010LL,  &v17);
    if (v17 != (_DWORD)v11) {
      v10(*(void *)(*((void *)this + 3) + 16LL), 36008LL, v11);
    }
    if (a2)
    {
      uint64_t v12 = *((unsigned int *)this + 35);
      if ((_DWORD)v12
        && !(*(unsigned int (**)(void, void))(*((void *)this + 4) + 5368LL))( *(void *)(*((void *)this + 3) + 16LL),  *((unsigned int *)this + 35)))
      {
        unint64_t v13 = (GPUTools::FB::Fbuf *)(&stru_4C0 + 66);
      }

      else
      {
        unint64_t v13 = 0LL;
      }

      ContextHarvester::encodeWithError(this, 17LL, 128LL, v13, "Ceui", **((void **)this + 2), 36009LL, v12);
      uint64_t v14 = *((unsigned int *)this + 36);
      if ((_DWORD)v14
        && !(*(unsigned int (**)(void, void))(*((void *)this + 4) + 5368LL))( *(void *)(*((void *)this + 3) + 16LL),  *((unsigned int *)this + 36)))
      {
        char v15 = (GPUTools::FB::Fbuf *)(&stru_4C0 + 66);
      }

      else
      {
        char v15 = 0LL;
      }

      ContextHarvester::encodeWithError(this, 17LL, 128LL, v15, "Ceui", **((void **)this + 2), 36008LL, v14);
    }
  }

uint64_t ContextHarvester::HarvestRenderbufferObject(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = 1;
  *(void *)(a1 + _Block_object_dispose(va, 8) = a3;
  uint64_t v5 = a1 + 24;
  (*(void (**)(void, uint64_t, uint64_t))(*(void *)(a1 + 32) + 832LL))( *(void *)(*(void *)(a1 + 24) + 16LL),  2978LL,  a1 + 160);
  (*(void (**)(void, uint64_t, uint64_t))(*(void *)(a1 + 32) + 832LL))( *(void *)(*(void *)v5 + 16LL),  36007LL,  a1 + 148);
  GPUTools::GL::SavePixelStoreState( v5,  *(unsigned int *)(*(void *)(a1 + 16) + 3456LL),  *(unsigned __int8 *)(*(void *)(a1 + 16) + 4861LL),  a1 + 176,  a1 + 212);
  __int128 v12 = xmmword_1F2D60;
  uint64_t v13 = 0LL;
  uint64_t v14 = 0LL;
  __int16 v15 = 0;
  GPUTools::GL::ApplyPixelStoreState( v5,  *(unsigned int *)(*(void *)(a1 + 16) + 3456LL),  *(unsigned __int8 *)(*(void *)(a1 + 16) + 4861LL),  &v12,  &v12);
  if (*(int *)(*(void *)(a1 + 16) + 3460LL) >= 2)
  {
    (*(void (**)(void, uint64_t, void))(*(void *)(a1 + 32) + 5136LL))( *(void *)(*(void *)(a1 + 24) + 16LL),  35052LL,  0LL);
    (*(void (**)(void, uint64_t, void))(*(void *)(a1 + 32) + 5136LL))( *(void *)(*(void *)(a1 + 24) + 16LL),  35051LL,  0LL);
  }

  ContextHarvester::harvestRenderbufferObject((ContextHarvester *)a1, a2, 1);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void (**)(void, uint64_t, uint64_t))(v6 + 5328);
  uint64_t v8 = *(unsigned int *)(a1 + 148);
  (*(void (**)(void, uint64_t, __int128 *))(v6 + 832))( *(void *)(*(void *)(a1 + 24) + 16LL),  36007LL,  &v12);
  if ((_DWORD)v12 != (_DWORD)v8) {
    v7(*(void *)(*(void *)v5 + 16LL), 36161LL, v8);
  }
  (*(void (**)(void, void, void, void, void))(*(void *)(a1 + 32) + 2680LL))( *(void *)(*(void *)(a1 + 24) + 16LL),  *(unsigned int *)(a1 + 160),  *(unsigned int *)(a1 + 164),  *(unsigned int *)(a1 + 168),  *(unsigned int *)(a1 + 172));
  uint64_t result = GPUTools::GL::ApplyPixelStoreState( v5,  *(unsigned int *)(*(void *)(a1 + 16) + 3456LL),  *(unsigned __int8 *)(*(void *)(a1 + 16) + 4861LL),  a1 + 176,  a1 + 212);
  uint64_t v10 = *(void *)(a1 + 16);
  if (*(int *)(v10 + 3460) >= 2)
  {
    uint64_t v11 = *(unsigned int *)(v10 + 2040);
    (*(void (**)(void, uint64_t, void))(*(void *)(a1 + 32) + 5136LL))( *(void *)(*(void *)(a1 + 24) + 16LL),  35052LL,  *(unsigned int *)(v10 + 2044));
    return (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)(a1 + 32) + 5136LL))( *(void *)(*(void *)(a1 + 24) + 16LL),  35051LL,  v11);
  }

  return result;
}

void ContextHarvester::harvestRenderbufferObject(ContextHarvester *this, uint64_t a2, int a3)
{
  unsigned int v38 = a2;
  if (!(_DWORD)a2) {
    __assert_rtn( "void ContextHarvester::harvestRenderbufferObject(GLuint, BOOL)",  (const char *)&unk_1F0B16,  0,  "name != 0");
  }
  uint64_t v6 = *((void *)this + 4);
  uint64_t v7 = *(void (**)(void, uint64_t, uint64_t))(v6 + 5328);
  uint64_t v8 = (char *)this + 24;
  (*(void (**)(void, uint64_t, uint64_t *))(v6 + 832))( *(void *)(*((void *)this + 3) + 16LL),  36007LL,  &v31);
  if ((_DWORD)v31 != (_DWORD)a2) {
    v7(*(void *)(*(void *)v8 + 16LL), 36161LL, a2);
  }
  uint64_t v31 = 0LL;
  uint64_t v32 = 0LL;
  unsigned int v34 = 0;
  uint64_t v33 = 0LL;
  uint64_t v35 = 0x100000001LL;
  v36[0] = 0LL;
  *(void *)((char *)v36 + 5) = 0LL;
  memset(&v36[2], 0, 24);
  int v37 = 0;
  GPUTools::GL::GetImageInfo(v8, *(unsigned int *)(*((void *)this + 2) + 3456LL), 36161LL, 0LL, &v31);
  ContextHarvester::encodeCommand( this,  4294955015LL,  3u,  v9,  v10,  65028LL,  kDYStateGroupRenderbuffer,  65030LL,  v38,  65030LL,  0LL);
  ContextHarvester::encode(this, 207LL, 0LL, "Ci@1ui", **((void **)this + 2), 1LL, &v38);
  ContextHarvester::encode(this, 19LL, 128LL, "Ceui", **((void **)this + 2), 36161LL, v38);
  ContextHarvester::harvestObjectLabel(this, 0x8D41u, v38);
  uint64_t v13 = (void *)*((void *)this + 2);
  uint64_t v14 = v13[5];
  uint64_t v15 = *(void *)(v14 + 352);
  if (!v15) {
    goto LABEL_16;
  }
  uint64_t v16 = v14 + 352;
  uint64_t v17 = v14 + 352;
  do
  {
    unsigned int v18 = *(_DWORD *)(v15 + 32);
    BOOL v19 = v18 >= v38;
    if (v18 >= v38) {
      uint64_t v20 = (uint64_t *)v15;
    }
    else {
      uint64_t v20 = (uint64_t *)(v15 + 8);
    }
    if (v19) {
      uint64_t v17 = v15;
    }
    uint64_t v15 = *v20;
  }

  while (*v20);
  if (v17 != v16 && v38 >= *(_DWORD *)(v17 + 32))
  {
    ContextHarvester::encode(this, 4294959107LL, 0LL, "Cep", *v13, 36161LL, *(void *)(v17 + 40));
  }

  else
  {
LABEL_16:
    if (!v34 || !(_DWORD)v35) {
      goto LABEL_24;
    }
    if (*((_BYTE *)v13 + 4848) && SHIDWORD(v36[0]) >= 1) {
      ContextHarvester::encode( this,  509LL,  0LL,  "Ceieii",  *v13,  36161LL,  HIDWORD(v36[0]),  v31,  v34,  v35);
    }
    else {
      ContextHarvester::encode(this, 508LL, 0LL, "Ceeii", *v13, 36161LL, v31, v34, v35);
    }
  }

  ContextHarvester::encode( this,  4294955024LL,  0LL,  "Cieieiii",  **((void **)this + 2),  1LL,  36161LL,  HIDWORD(v36[0]),  HIDWORD(v32),  v34,  v35,  0LL);
  if (a3)
  {
    uint64_t v21 = ContextHarvester::harvestRenderbufferImage((uint64_t)this, v38, (unsigned int *)&v31);
    uint64_t v22 = LODWORD(v36[2]);
    uint64_t v23 = *((void *)this + 67);
    uint64_t v24 = *((void *)this + 70);
    uint64_t v25 = *((void *)this + 1);
    uint64_t v26 = *((void *)this + 2);
    int v27 = *((unsigned __int8 *)this + 591);
    uint64_t v28 = DYGetGLGuestAppClient(v21);
    GPUTools::Interpose::DYSavePointer(v28, v22, v24 + v23, v26 + 4644, 65LL, v25, v27 != 0, 0LL, 0LL);
    ContextHarvester::encodeCommand( this,  4294955011LL,  7u,  v29,  v30,  529413LL,  v31,  5125LL,  v34,  5125LL,  v35,  529413LL,  HIDWORD(v36[0]),  529413LL,  HIDWORD(v31),  529413LL,  v32,  65025LL,  *((void *)this + 2) + 4644LL);
  }

void sub_12578( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, void *__p, uint64_t a32)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ContextHarvester::HarvestRenderbufferInfo(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v7 = result;
    *(_DWORD *)uint64_t result = 1;
    uint64_t v8 = result + 24;
    (*(void (**)(void, uint64_t, uint64_t))(*(void *)(result + 32) + 832LL))( *(void *)(*(void *)(result + 24) + 16LL),  2978LL,  result + 160);
    (*(void (**)(void, uint64_t, uint64_t))(*(void *)(v7 + 32) + 832LL))( *(void *)(*(void *)v8 + 16LL),  36007LL,  v7 + 148);
    GPUTools::GL::SavePixelStoreState( v8,  *(unsigned int *)(*(void *)(v7 + 16) + 3456LL),  *(unsigned __int8 *)(*(void *)(v7 + 16) + 4861LL),  v7 + 176,  v7 + 212);
    __int128 v20 = xmmword_1F2D60;
    uint64_t v21 = 0LL;
    uint64_t v22 = 0LL;
    __int16 v23 = 0;
    GPUTools::GL::ApplyPixelStoreState( v8,  *(unsigned int *)(*(void *)(v7 + 16) + 3456LL),  *(unsigned __int8 *)(*(void *)(v7 + 16) + 4861LL),  &v20,  &v20);
    if (*(int *)(*(void *)(v7 + 16) + 3460LL) >= 2)
    {
      (*(void (**)(void, uint64_t, void))(*(void *)(v7 + 32) + 5136LL))( *(void *)(*(void *)(v7 + 24) + 16LL),  35052LL,  0LL);
      (*(void (**)(void, uint64_t, void))(*(void *)(v7 + 32) + 5136LL))( *(void *)(*(void *)(v7 + 24) + 16LL),  35051LL,  0LL);
    }

    uint64_t v9 = *(void *)(v7 + 32);
    uint64_t v10 = *(void (**)(void, uint64_t, uint64_t))(v9 + 5328);
    (*(void (**)(void, uint64_t, __int128 *))(v9 + 832))( *(void *)(*(void *)(v7 + 24) + 16LL),  36007LL,  &v20);
    if ((_DWORD)v20 != (_DWORD)a2) {
      v10(*(void *)(*(void *)v8 + 16LL), 36161LL, a2);
    }
    GPUTools::GL::GetImageInfo(v8, *(unsigned int *)(*(void *)(v7 + 16) + 3456LL), 36161LL, 0LL, a4);
    if (a3)
    {
      ContextHarvester::harvestRenderbufferImage(v7, a2, (unsigned int *)a4);
      size_t v11 = *(unsigned int *)(a4 + 52);
      if ((_DWORD)v11)
      {
        uint64_t v12 = *(char **)(a4 + 56);
        unint64_t v13 = (v11 + 3) >> 2;
        unint64_t v14 = (uint64_t)(*(void *)(a4 + 64) - (void)v12) >> 2;
        if (v13 <= v14)
        {
          if (v13 < v14) {
            *(void *)(a4 + 64) = &v12[4 * v13];
          }
        }

        else
        {
          std::vector<unsigned int>::__append((std::vector<unsigned int> *)(a4 + 56), v13 - v14);
          uint64_t v12 = *(char **)(a4 + 56);
          size_t v11 = *(unsigned int *)(a4 + 52);
        }

        memcpy(v12, (const void *)(*(void *)(v7 + 560) + *(void *)(v7 + 536)), v11);
      }
    }

    uint64_t v15 = *(void *)(v7 + 32);
    uint64_t v16 = *(void (**)(void, uint64_t, uint64_t))(v15 + 5328);
    uint64_t v17 = *(unsigned int *)(v7 + 148);
    (*(void (**)(void, uint64_t, __int128 *))(v15 + 832))( *(void *)(*(void *)(v7 + 24) + 16LL),  36007LL,  &v20);
    if ((_DWORD)v20 != (_DWORD)v17) {
      v16(*(void *)(*(void *)v8 + 16LL), 36161LL, v17);
    }
    (*(void (**)(void, void, void, void, void))(*(void *)(v7 + 32) + 2680LL))( *(void *)(*(void *)(v7 + 24) + 16LL),  *(unsigned int *)(v7 + 160),  *(unsigned int *)(v7 + 164),  *(unsigned int *)(v7 + 168),  *(unsigned int *)(v7 + 172));
    uint64_t result = GPUTools::GL::ApplyPixelStoreState( v8,  *(unsigned int *)(*(void *)(v7 + 16) + 3456LL),  *(unsigned __int8 *)(*(void *)(v7 + 16) + 4861LL),  v7 + 176,  v7 + 212);
    uint64_t v18 = *(void *)(v7 + 16);
    if (*(int *)(v18 + 3460) >= 2)
    {
      uint64_t v19 = *(unsigned int *)(v18 + 2040);
      (*(void (**)(void, uint64_t, void))(*(void *)(v7 + 32) + 5136LL))( *(void *)(*(void *)(v7 + 24) + 16LL),  35052LL,  *(unsigned int *)(v18 + 2044));
      return (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)(v7 + 32) + 5136LL))( *(void *)(*(void *)(v7 + 24) + 16LL),  35051LL,  v19);
    }
  }

  return result;
}

uint64_t ContextHarvester::harvestRenderbufferImage(uint64_t a1, int a2, unsigned int *a3)
{
  if (!a2) {
    __assert_rtn( "void ContextHarvester::harvestRenderbufferImage(GLuint, GPUTools::GL::RenderbufferInfo *)",  (const char *)&unk_1F0B16,  0,  "renderbuffer != 0");
  }
  unsigned int v5 = GPUTools::GL::ComputePackedClientImageSize(a3);
  a3[13] = v5;
  uint64_t v6 = v5;
  if (*(void *)(a1 + 544) >= (unint64_t)v5
    || (GPUTools::VMBuffer::alloc((GPUTools::VMBuffer *)(a1 + 536), v5, 0LL) & 1) != 0)
  {
    uint64_t v7 = ((*(void *)(a1 + 536) + *(void *)(a1 + 576) - 1LL) & -*(void *)(a1 + 576)) - *(void *)(a1 + 536);
    *(void *)(a1 + 560) = v7;
    *(void *)(a1 + 56_Block_object_dispose(va, 8) = v7;
    return GPUTools::GL::GetImageData(a1 + 24, 36161LL, 0LL, a3[1], a3[2], *(unsigned __int8 *)(a1 + 590));
  }

  else
  {
    uint64_t v9 = (ContextHarvester *)dy_abort("VMBuffer::resize failed: size=%lu", v6);
    return ContextHarvester::harvestGLSLProgramPipeline(v9, v10);
  }

void ContextHarvester::harvestGLSLProgramPipeline( ContextHarvester *this, unsigned int a2, uint64_t a3, char a4, uint64_t a5)
{
  unsigned int v23 = a2;
  if (!a2) {
    __assert_rtn( "void ContextHarvester::harvestGLSLProgramPipeline(GLuint)",  (const char *)&unk_1F0B16,  0,  "pipeline != 0");
  }
  uint64_t v22 = this;
  ContextHarvester::encodeCommand( this,  4294955015LL,  3u,  a4,  a5,  65028LL,  kDYStateGroupGLSLProgramPipeline,  65030LL,  a2,  65030LL,  0LL);
  ContextHarvester::encode(this, 890LL, 0LL, "Ci@1ui", **((void **)this + 2), 1LL, &v23);
  ContextHarvester::encode(this, 887LL, 128LL, "Cui", **((void **)this + 2), v23);
  ContextHarvester::harvestObjectLabel(this, 0x8A4Fu, v23);
  query_pipeline_programs(*((void *)this + 2), v23, &v17);
  ContextHarvester::encode(this, 920LL, 512LL, "Cuiuiui", **((void **)this + 2), v23, 1LL, HIDWORD(v17));
  ContextHarvester::encode(this, 920LL, 512LL, "Cuiuiui", **((void **)this + 2), v23, 2LL, v18);
  ContextHarvester::encode(this, 886LL, 0LL, "Cuiui", **((void **)this + 2), v23, v17);
  uint64_t v6 = v23;
  uint64_t v7 = *((void *)this + 4);
  uint64_t v8 = *(void (**)(void, uint64_t, uint64_t, void))(v7 + 6624);
  (*(void (**)(void, void, uint64_t, unsigned int *))(v7 + 6608))( *(void *)(*((void *)this + 3) + 16LL),  v23,  35716LL,  &v16);
  uint64_t v9 = v16;
  if (!v16)
  {
    uint64_t v12 = 0LL;
    goto LABEL_8;
  }

  uint64_t v10 = (int)v16;
  if (*((void *)this + 68) >= (unint64_t)(int)v16)
  {
LABEL_6:
    uint64_t v11 = ((*((void *)this + 67) + *((void *)this + 72) - 1LL) & -*((void *)this + 72)) - *((void *)this + 67);
    *((void *)this + 70) = v11;
    *((void *)this + 71) = v11;
    v8(*(void *)(*((void *)this + 3) + 16LL), v6, v9, 0LL);
    uint64_t v12 = *((void *)this + 70) + *((void *)this + 67);
LABEL_8:
    (*(void (**)(void, void))(*((void *)this + 4) + 6616LL))( *(void *)(*((void *)this + 3) + 16LL),  v23);
    (*(void (**)(void, void, uint64_t, unsigned int *))(*((void *)this + 4) + 6608LL))( *(void *)(*((void *)this + 3) + 16LL),  v23,  35715LL,  &v15);
    ContextHarvester::encode(this, 4294955024LL, 0LL, "CiuiiSi", **((void **)this + 2), 14LL, v23, v16, v12, v15);
    ContextHarvester::encode( this,  4294955024LL,  0LL,  "Ciuiuiuiuiuiui",  **((void **)this + 2),  15LL,  v23,  HIDWORD(v17),  v18,  v19,  v20,  v21);
    ContextHarvester::encodeCommand(this, 4294955016LL, 0, v13, v14);
    return;
  }

  if (GPUTools::VMBuffer::alloc((ContextHarvester *)((char *)this + 536), (int)v16, 0LL))
  {
    uint64_t v9 = v16;
    goto LABEL_6;
  }

  dy_abort("VMBuffer::resize failed: size=%lu", v10);
  __break(1u);
}

void sub_12C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
}

void sub_12C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
}

void sub_12C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
}

void sub_12C70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
}

void ContextHarvester::harvestGLSLProgramLinkedState( ContextHarvester *this, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  unint64_t v7 = a2;
  ContextHarvester::encodeCommand( this,  4294955015LL,  3u,  a4,  a5,  65028LL,  kDYStateGroupGLSLProgram,  65030LL,  a2,  65030LL,  0LL);
  ContextHarvester::encode_r(this, 116LL, 0LL, (void *)v7, "C", **((void **)this + 2));
  ContextHarvester::harvestObjectLabel(this, 0x8B40u, a2);
  uint64_t v10 = (void *)*((void *)this + 6);
  int8x8_t v11 = (int8x8_t)v10[1];
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8(v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v13 = v7;
      if (*(void *)&v11 <= v7) {
        unint64_t v13 = v7 % *(void *)&v11;
      }
    }

    else
    {
      unint64_t v13 = (v11.i32[0] - 1) & v7;
    }

    uint64_t v14 = *(uint64_t ***)(*v10 + 8 * v13);
    if (v14)
    {
      unsigned int v15 = *v14;
      if (v15)
      {
        if (v12.u32[0] < 2uLL)
        {
          uint64_t v16 = *(void *)&v11 - 1LL;
          while (1)
          {
            unint64_t v18 = v15[1];
            if (v18 == v7)
            {
              if (*((_DWORD *)v15 + 4) == (_DWORD)a2) {
                goto LABEL_22;
              }
            }

            else if ((v18 & v16) != v13)
            {
              goto LABEL_24;
            }

            unsigned int v15 = (uint64_t *)*v15;
            if (!v15) {
              goto LABEL_24;
            }
          }
        }

        do
        {
          unint64_t v17 = v15[1];
          if (v17 == v7)
          {
            if (*((_DWORD *)v15 + 4) == (_DWORD)a2)
            {
LABEL_22:
              if (ContextHarvester::encodeProgramLinkSequence( this,  a2,  (const ProgramInfo *)v15[3],  1,  v9)) {
                ContextHarvester::harvestGLSLProgramUniforms(this, a2, v19, v8, v9);
              }
              break;
            }
          }

          else
          {
            if (v17 >= *(void *)&v11) {
              v17 %= *(void *)&v11;
            }
            if (v17 != v13) {
              break;
            }
          }

          unsigned int v15 = (uint64_t *)*v15;
        }

        while (v15);
      }
    }
  }

void sub_12E2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
}

void sub_12E44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
}

void ContextHarvester::harvestGLSLProgramCurrentState( ContextInfo **this, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  unint64_t v7 = a2;
  uint64_t v44 = this;
  ContextHarvester::encodeCommand( (ContextHarvester *)this,  4294955015LL,  3u,  a4,  a5,  65028LL,  kDYStateGroupGLSLProgram,  65030LL,  a2,  65030LL,  0LL);
  ProgramInfo::ProgramInfo((ProgramInfo *)v38, this[2], a2);
  uint64_t v9 = this[6];
  int8x8_t v10 = *(int8x8_t *)((char *)v9 + 8);
  if (!*(void *)&v10) {
    goto LABEL_21;
  }
  uint8x8_t v11 = (uint8x8_t)vcnt_s8(v10);
  v11.i16[0] = vaddlv_u8(v11);
  if (v11.u32[0] > 1uLL)
  {
    unint64_t v12 = v7;
    if (*(void *)&v10 <= v7) {
      unint64_t v12 = v7 % *(void *)&v10;
    }
  }

  else
  {
    unint64_t v12 = (v10.i32[0] - 1) & v7;
  }

  unint64_t v13 = *(uint64_t ***)(*(void *)v9 + 8 * v12);
  if (!v13 || (uint64_t v14 = *v13) == 0LL)
  {
LABEL_21:
    unint64_t v18 = (const ProgramInfo *)v38;
    goto LABEL_22;
  }

  if (v11.u32[0] < 2uLL)
  {
    uint64_t v15 = *(void *)&v10 - 1LL;
    while (1)
    {
      uint64_t v17 = v14[1];
      if (v17 == v7)
      {
        if (*((_DWORD *)v14 + 4) == (_DWORD)a2) {
          goto LABEL_38;
        }
      }

      else if ((v17 & v15) != v12)
      {
        goto LABEL_21;
      }

      uint64_t v14 = (uint64_t *)*v14;
      if (!v14) {
        goto LABEL_21;
      }
    }
  }

  while (1)
  {
    unint64_t v16 = v14[1];
    if (v16 == v7) {
      break;
    }
    if (v16 >= *(void *)&v10) {
      v16 %= *(void *)&v10;
    }
    if (v16 != v12) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v14 = (uint64_t *)*v14;
    if (!v14) {
      goto LABEL_21;
    }
  }

  if (*((_DWORD *)v14 + 4) != (_DWORD)a2) {
    goto LABEL_11;
  }
LABEL_38:
  unint64_t v18 = (const ProgramInfo *)v14[3];
LABEL_22:
  ContextHarvester::encodeProgramLinkSequence((ContextHarvester *)this, a2, v18, 0, v8);
  (*((void (**)(void, uint64_t, uint64_t, unsigned int *))this[4] + 658))( *((void *)this[3] + 2),  a2,  35717LL,  &v37);
  ObjectNameArray::ObjectNameArray((ObjectNameArray *)v34, v37);
  (*((void (**)(void, uint64_t, void, void, uint64_t))this[4] + 759))( *((void *)this[3] + 2),  a2,  v37,  0LL,  v35);
  uint64_t v21 = v36;
  if (v36)
  {
    uint64_t v22 = 0LL;
    do
    {
      (*((void (**)(void, void, uint64_t, unsigned int *))this[4] + 657))( *((void *)this[3] + 2),  *(unsigned int *)(v35 + 4 * v22),  35663LL,  &v33);
      uint64_t v23 = *(unsigned int *)(v35 + 4 * v22);
      uint64_t v24 = v33;
      ContextHarvester::encode((ContextHarvester *)this, 6LL, 128LL, "Culul", *(void *)this[2], v7, v23);
      ContextHarvester::encode( (ContextHarvester *)this,  4294955024LL,  0LL,  "Ciuieuiui",  *(void *)this[2],  4LL,  v23,  v24,  a2,  0LL);
      ++v22;
    }

    while (v21 != v22);
  }

  ContextHarvester::encodeProgramParameters((ContextHarvester *)this, a2, v19, (const ProgramPipelineInfo *)v38, v20);
  ObjectNameArray::~ObjectNameArray((ObjectNameArray *)v34);
  uint64_t v25 = v43;
  if (v43)
  {
    do
    {
      uint64_t v26 = (void *)*v25;
      operator delete(v25);
      uint64_t v25 = v26;
    }

    while (v26);
  }

  int v27 = v42;
  uint64_t v42 = 0LL;
  if (v27) {
    operator delete(v27);
  }
  uint64_t v28 = v40;
  if (v40)
  {
    char v29 = v41;
    uint64_t v30 = v40;
    if (v41 != v40)
    {
      do
      {
        v29 -= 3;
      }

      while (v29 != v28);
      uint64_t v30 = v40;
    }

    int v41 = v28;
    operator delete(v30);
  }

  ProgramPipelineInfo::~ProgramPipelineInfo((ProgramPipelineInfo *)&v39);
  ProgramPipelineInfo::~ProgramPipelineInfo((ProgramPipelineInfo *)v38);
  ContextHarvester::encodeCommand((ContextHarvester *)this, 4294955016LL, 0, v31, v32);
}

void sub_13174( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

void sub_13198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
}

void sub_131AC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v14 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  uint64_t v21 = va_arg(va1, void);
  ObjectNameArray::~ObjectNameArray((ObjectNameArray *)va);
  ProgramInfo::~ProgramInfo((ProgramInfo *)va1);
  AutoStateGroup::~AutoStateGroup((ContextHarvester **)(v8 - 96), v10, v11, v12, v13);
  _Unwind_Resume(a1);
}

uint64_t ContextHarvester::HarvestTextureObject(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_DWORD *)a1 = 1;
  *(void *)(a1 + _Block_object_dispose(va, 8) = a4;
  uint64_t v7 = a1 + 24;
  uint64_t v8 = a1 + 176;
  uint64_t v9 = a1 + 212;
  GPUTools::GL::SavePixelStoreState( a1 + 24,  *(unsigned int *)(*(void *)(a1 + 16) + 3456LL),  *(unsigned __int8 *)(*(void *)(a1 + 16) + 4861LL),  a1 + 176,  a1 + 212);
  __int128 v18 = xmmword_1F2D60;
  uint64_t v19 = 0LL;
  uint64_t v20 = 0LL;
  __int16 v21 = 0;
  GPUTools::GL::ApplyPixelStoreState( v7,  *(unsigned int *)(*(void *)(a1 + 16) + 3456LL),  *(unsigned __int8 *)(*(void *)(a1 + 16) + 4861LL),  &v18,  &v18);
  if (*(int *)(*(void *)(a1 + 16) + 3460LL) >= 2)
  {
    (*(void (**)(void, uint64_t, void))(*(void *)(a1 + 32) + 5136LL))( *(void *)(*(void *)(a1 + 24) + 16LL),  35052LL,  0LL);
    (*(void (**)(void, uint64_t, void))(*(void *)(a1 + 32) + 5136LL))( *(void *)(*(void *)(a1 + 24) + 16LL),  35051LL,  0LL);
  }

  (*(void (**)(void, uint64_t))(*(void *)(a1 + 32) + 2736LL))( *(void *)(*(void *)(a1 + 24) + 16LL),  33984LL);
  ContextHarvester::harvestTexture((ContextHarvester *)a1, a2, a3, v10, v11);
  uint64_t bound_texture = wrapper_cache_get_bound_texture(*(ContextInfo **)(a1 + 16), 0, a2);
  *(void *)((char *)&v18 + 7) = 0LL;
  *(void *)&__int128 v18 = 0LL;
  GPUTools::GL::DYGetTextureTargetInfo(a2, &v18);
  uint64_t v13 = *(void *)(a1 + 32);
  uint64_t v14 = *(void (**)(void, uint64_t, uint64_t))(v13 + 40);
  (*(void (**)(void, void, int *))(v13 + 832))( *(void *)(*(void *)(a1 + 24) + 16LL),  DWORD1(v18),  &v22);
  if (v22 != (_DWORD)bound_texture) {
    v14(*(void *)(*(void *)v7 + 16LL), a2, bound_texture);
  }
  (*(void (**)(void, void))(*(void *)(a1 + 32) + 2736LL))( *(void *)(*(void *)(a1 + 24) + 16LL),  *(unsigned int *)(*(void *)(a1 + 16) + 2072LL));
  uint64_t result = GPUTools::GL::ApplyPixelStoreState( v7,  *(unsigned int *)(*(void *)(a1 + 16) + 3456LL),  *(unsigned __int8 *)(*(void *)(a1 + 16) + 4861LL),  v8,  v9);
  uint64_t v16 = *(void *)(a1 + 16);
  if (*(int *)(v16 + 3460) >= 2)
  {
    uint64_t v17 = *(unsigned int *)(v16 + 2040);
    (*(void (**)(void, uint64_t, void))(*(void *)(a1 + 32) + 5136LL))( *(void *)(*(void *)(a1 + 24) + 16LL),  35052LL,  *(unsigned int *)(v16 + 2044));
    return (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)(a1 + 32) + 5136LL))( *(void *)(*(void *)(a1 + 24) + 16LL),  35051LL,  v17);
  }

  return result;
}

void ContextHarvester::harvestTexture(ContextHarvester *this, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  unsigned int v104 = a3;
  int v103 = this;
  ContextHarvester::encodeCommand( this,  4294955015LL,  3u,  a4,  a5,  65028LL,  kDYStateGroupTexture,  65030LL,  a3,  65030LL,  a2);
  memset(v102, 0, 15);
  GPUTools::GL::DYGetTextureTargetInfo(a2, v102);
  uint64_t v8 = *((void *)this + 4);
  uint64_t v9 = *(void (**)(void, uint64_t, uint64_t))(v8 + 40);
  int64_t v95 = (char *)this + 24;
  (*(void (**)(void, void, char **))(v8 + 832))( *(void *)(*((void *)this + 3) + 16LL),  HIDWORD(v102[0]),  &v105);
  if ((_DWORD)v105 != (_DWORD)a3) {
    v9(*(void *)(*(void *)v95 + 16LL), a2, a3);
  }
  uint64_t v10 = v104;
  if (v104)
  {
    ContextHarvester::encode(this, 208LL, 0LL, "Ci@1ui", **((void **)this + 2), 1LL, &v104);
    uint64_t v10 = v104;
  }

  ContextHarvester::encode(this, 20LL, 128LL, "Ceui", **((void **)this + 2), a2, v10);
  int v101 = 0;
  if (*(_BYTE *)(*((void *)this + 2) + 4867LL))
  {
    (*(void (**)(void, uint64_t, uint64_t, int *))(*((void *)this + 4) + 1016LL))( *(void *)(*((void *)this + 3) + 16LL),  a2,  37167LL,  &v101);
    if (v101 == 1)
    {
      *(_OWORD *)&v96[1] = xmmword_1F2D60;
      LODWORD(v97) = 1;
      GPUTools::GL::GetTexStorageInfo(v95, a2, v102, &v96[1]);
      switch(LOBYTE(v102[1]))
      {
        case 1u:
          GPUTools::FB::Encode( *((void *)this + 2) + 120LL,  1041LL,  4096LL,  (uint64_t)"Ceiei",  v11,  v12,  v13,  v14,  **((void **)this + 2));
          break;
        case 2u:
          GPUTools::FB::Encode( *((void *)this + 2) + 120LL,  1040LL,  4096LL,  (uint64_t)"Ceieii",  v11,  v12,  v13,  v14,  **((void **)this + 2));
          break;
        case 3u:
          GPUTools::FB::Encode( *((void *)this + 2) + 120LL,  1042LL,  4096LL,  (uint64_t)"Ceieiii",  v11,  v12,  v13,  v14,  **((void **)this + 2));
          break;
        default:
          BOOL v89 = (const char *)dy_string_from_enum(a2);
          dy_abort("unknown texture target dimensions: target=%s, dimensions=%d", v89, LOBYTE(v102[1]));
LABEL_137:
          __break(1u);
          return;
      }

      uint16x8_t v105 = 0LL;
      __int128 v106 = 0uLL;
      v107[0] = 0;
      *(void *)&v107[1] = 0x100000001LL;
      *(void *)&v107[3] = 0LL;
      *(void *)((char *)&v107[4] + 1) = 0LL;
      GPUTools::GL::GetImageInfo(v95, *(unsigned int *)(*((void *)this + 2) + 3456LL), a2, 0LL, &v105);
      GPUTools::FB::Encode( *((void *)this + 2) + 144LL,  4294955024LL,  0x2000LL,  (uint64_t)"Cietee",  v15,  v16,  v17,  v18,  **((void **)this + 2));
      GPUTools::FB::Stream::Writev_nopartial( *((GPUTools::FB::Stream **)this + 5),  (GPUTools::FB::Fbuf *)(*((void *)this + 2) + 120LL),  2uLL,  1);
    }
  }

  ContextHarvester::harvestObjectLabel(this, 0x1702u, v104);
  if (BYTE6(v102[1]))
  {
    *(void *)&v96[1] = this;
    v96[3] = a2;
    ContextHarvester::harvestSamplingParameters<TextureParameterEncoder>((uint64_t)this, &v96[1]);
    uint64_t v21 = *((void *)this + 2);
    if (*(_BYTE *)(v21 + 4857))
    {
      (*(void (**)(void, void, uint64_t, char **))(*(void *)(*(void *)&v96[1] + 32LL) + 1016LL))( *(void *)(*(void *)(*(void *)&v96[1] + 24LL) + 16LL),  v96[3],  33084LL,  &v105);
      ContextHarvester::encode( *(ContextHarvester **)&v96[1],  600LL,  0LL,  "Ceei",  **(void **)(*(void *)&v96[1] + 16LL),  v96[3],  33084LL,  v105);
      uint64_t v21 = *((void *)this + 2);
    }

    if (*(_BYTE *)(v21 + 4856))
    {
      (*(void (**)(void, void, uint64_t, char **))(*(void *)(*(void *)&v96[1] + 32LL) + 1016LL))( *(void *)(*(void *)(*(void *)&v96[1] + 24LL) + 16LL),  v96[3],  33085LL,  &v105);
      ContextHarvester::encode( *(ContextHarvester **)&v96[1],  600LL,  0LL,  "Ceei",  **(void **)(*(void *)&v96[1] + 16LL),  v96[3],  33085LL,  v105);
      uint64_t v21 = *((void *)this + 2);
    }

    if (*(_BYTE *)(v21 + 4866))
    {
      (*(void (**)(void, void, uint64_t, char **))(*(void *)(*(void *)&v96[1] + 32LL) + 1016LL))( *(void *)(*(void *)(*(void *)&v96[1] + 24LL) + 16LL),  v96[3],  36418LL,  &v105);
      ContextHarvester::encode( *(ContextHarvester **)&v96[1],  600LL,  0LL,  "Ceee",  **(void **)(*(void *)&v96[1] + 16LL),  v96[3],  36418LL,  v105);
      (*(void (**)(void, void, uint64_t, char **))(*(void *)(*(void *)&v96[1] + 32LL) + 1016LL))( *(void *)(*(void *)(*(void *)&v96[1] + 24LL) + 16LL),  v96[3],  36419LL,  &v105);
      ContextHarvester::encode( *(ContextHarvester **)&v96[1],  600LL,  0LL,  "Ceee",  **(void **)(*(void *)&v96[1] + 16LL),  v96[3],  36419LL,  v105);
      (*(void (**)(void, void, uint64_t, char **))(*(void *)(*(void *)&v96[1] + 32LL) + 1016LL))( *(void *)(*(void *)(*(void *)&v96[1] + 24LL) + 16LL),  v96[3],  36420LL,  &v105);
      ContextHarvester::encode( *(ContextHarvester **)&v96[1],  600LL,  0LL,  "Ceee",  **(void **)(*(void *)&v96[1] + 16LL),  v96[3],  36420LL,  v105);
      (*(void (**)(void, void, uint64_t, char **))(*(void *)(*(void *)&v96[1] + 32LL) + 1016LL))( *(void *)(*(void *)(*(void *)&v96[1] + 24LL) + 16LL),  v96[3],  36421LL,  &v105);
      ContextHarvester::encode( *(ContextHarvester **)&v96[1],  600LL,  0LL,  "Ceee",  **(void **)(*(void *)&v96[1] + 16LL),  v96[3],  36421LL,  v105);
      uint64_t v21 = *((void *)this + 2);
    }

    if (*(_BYTE *)(v21 + 4851))
    {
      (*(void (**)(void, void, uint64_t, char **))(*(void *)(*(void *)&v96[1] + 32LL) + 1016LL))( *(void *)(*(void *)(*(void *)&v96[1] + 24LL) + 16LL),  v96[3],  33169LL,  &v105);
      ContextHarvester::encode( *(ContextHarvester **)&v96[1],  600LL,  0LL,  "Ceee",  **(void **)(*(void *)&v96[1] + 16LL),  v96[3],  33169LL,  v105);
      uint64_t v21 = *((void *)this + 2);
    }

    if (!*(_DWORD *)(v21 + 3456))
    {
      (*(void (**)(void, void, uint64_t, char **))(*(void *)(*(void *)&v96[1] + 32LL) + 1016LL))( *(void *)(*(void *)(*(void *)&v96[1] + 24LL) + 16LL),  v96[3],  34891LL,  &v105);
      ContextHarvester::encode( *(ContextHarvester **)&v96[1],  600LL,  0LL,  "Ceee",  **(void **)(*(void *)&v96[1] + 16LL),  v96[3],  34891LL,  v105);
      (*(void (**)(void, void, uint64_t, char **))(*(void *)(*(void *)&v96[1] + 32LL) + 1008LL))( *(void *)(*(void *)(*(void *)&v96[1] + 24LL) + 16LL),  v96[3],  32870LL,  &v105);
      ContextHarvester::encode( *(ContextHarvester **)&v96[1],  598LL,  0LL,  "Ceef",  **(void **)(*(void *)&v96[1] + 16LL),  v96[3],  32870LL,  *(float *)&v105);
      uint64_t v21 = *((void *)this + 2);
    }

    if (is_extension_available(v21, "GL_APPLE_texture_range"))
    {
      (*(void (**)(void, void, uint64_t, char **))(*(void *)(*(void *)&v96[1] + 32LL) + 1016LL))( *(void *)(*(void *)(*(void *)&v96[1] + 24LL) + 16LL),  v96[3],  34236LL,  &v105);
      ContextHarvester::encode( *(ContextHarvester **)&v96[1],  600LL,  0LL,  "Ceee",  **(void **)(*(void *)&v96[1] + 16LL),  v96[3],  34236LL,  v105);
    }

    if (is_extension_available(*((void *)this + 2), "GL_OES_draw_texture"))
    {
      (*(void (**)(void, void, uint64_t, char **))(*(void *)(*(void *)&v96[1] + 32LL) + 1016LL))( *(void *)(*(void *)(*(void *)&v96[1] + 24LL) + 16LL),  v96[3],  35741LL,  &v105);
      ContextHarvester::encode( *(ContextHarvester **)&v96[1],  601LL,  0LL,  "Cee@4i",  **(void **)(*(void *)&v96[1] + 16LL),  v96[3],  35741LL,  &v105);
    }
  }

  uint64_t v109 = 0x851A00008519LL;
  __int128 v108 = xmmword_1F2E2C;
  if ((_DWORD)a2 == 34067)
  {
    uint64_t v91 = 6LL;
    uint64_t v22 = *(void *)(*((void *)this + 2) + 40LL);
    unint64_t v23 = *(void *)(v22 + 312);
    if (!v23) {
      goto LABEL_64;
    }
  }

  else
  {
    LODWORD(v10_Block_object_dispose(va, 8) = a2;
    uint64_t v91 = 1LL;
    uint64_t v22 = *(void *)(*((void *)this + 2) + 40LL);
    unint64_t v23 = *(void *)(v22 + 312);
    if (!v23) {
      goto LABEL_64;
    }
  }

  uint8x8_t v24 = (uint8x8_t)vcnt_s8((int8x8_t)v23);
  v24.i16[0] = vaddlv_u8(v24);
  if (v24.u32[0] > 1uLL)
  {
    unint64_t v25 = v104;
    if (v23 <= v104) {
      unint64_t v25 = v104 % v23;
    }
  }

  else
  {
    unint64_t v25 = ((_DWORD)v23 - 1) & v104;
  }

  uint64_t v26 = *(uint64_t ***)(*(void *)(v22 + 304) + 8 * v25);
  if (v26)
  {
    int v27 = *v26;
    if (*v26)
    {
      if (v24.u32[0] < 2uLL)
      {
        unint64_t v28 = v23 - 1;
        while (1)
        {
          uint64_t v30 = v27[1];
          if (v30 == v104)
          {
            if (*((_DWORD *)v27 + 4) == v104) {
              goto LABEL_53;
            }
          }

          else if ((v30 & v28) != v25)
          {
            goto LABEL_64;
          }

          int v27 = (uint64_t *)*v27;
          if (!v27) {
            goto LABEL_64;
          }
        }
      }

      do
      {
        unint64_t v29 = v27[1];
        if (v29 == v104)
        {
          if (*((_DWORD *)v27 + 4) == v104)
          {
LABEL_53:
            char v31 = IOSurfaceLookup(*((_DWORD *)v27 + 6));
            uint64_t v32 = v31;
            if (v31)
            {
              *((_DWORD *)v27 + 7) = IOSurfaceGetSeed(v31);
              ContextHarvester::encodeCommand( this,  4294959109LL,  3u,  v33,  v34,  529413LL,  a2,  65024LL,  v32,  35670LL,  *((unsigned __int8 *)v27 + 32));
              uint16x8_t v105 = 0LL;
              __int128 v106 = 0uLL;
              v107[0] = 0;
              *(void *)&v107[1] = 0x100000001LL;
              *(void *)&v107[3] = 0LL;
              *(void *)((char *)&v107[4] + 1) = 0LL;
              copyout_iosurface_texture( *((void *)this + 2),  a2,  v32,  v27[5],  (uint64_t)&v105,  *((unsigned __int8 *)this + 591));
              uint64_t v39 = (uint64_t *)*((void *)this + 2);
              uint64_t v42 = *v39;
              uint64_t v40 = (uint64_t)(v39 + 15);
              char v41 = v42;
              if (v101 == 1)
              {
                uint64_t v43 = 603LL;
                uint64_t v44 = "CeiiiiieeU";
              }

              else
              {
                uint64_t v44 = "CeieiiieeU";
                uint64_t v43 = 594LL;
              }

              GPUTools::FB::Encode(v40, v43, 4096LL, (uint64_t)v44, v35, v36, v37, v38, v41);
              uint64_t v45 = (GPUTools::FB::Stream *)*((void *)this + 5);
              uint64_t v46 = (GPUTools::FB::Fbuf *)(*((void *)this + 2) + 120LL);
              unint64_t v47 = (unsigned int *)((char *)v45 + 56);
              do
                unsigned int v48 = __ldaxr(v47);
              while (__stlxr(1u, v47));
              if (v48 == 1)
              {
                do
                {
                  while (*v47 == 1)
                    ;
                  do
                    unsigned int v49 = __ldaxr(v47);
                  while (__stlxr(1u, v47));
                }

                while (v49 == 1);
              }

              GPUTools::FB::Stream::Write_nolock(v45, v46, **(unsigned int **)v46, 1);
              atomic_store(0, v47);
              encode_iosurface_info(*((void *)this + 2), v32);
              GPUTools::FB::Encode( *((void *)this + 2) + 144LL,  4294955024LL,  0x2000LL,  (uint64_t)"Cietee",  v50,  v51,  v52,  v53,  **((void **)this + 2));
              GPUTools::FB::Stream::Writev_nopartial( *((GPUTools::FB::Stream **)this + 5),  (GPUTools::FB::Fbuf *)(*((void *)this + 2) + 120LL),  2uLL,  1);
              CFRelease(v32);
              uint64_t v91 = 0LL;
            }

            break;
          }
        }

        else
        {
          if (v29 >= v23) {
            v29 %= v23;
          }
          if (v29 != v25) {
            break;
          }
        }

        int v27 = (uint64_t *)*v27;
      }

      while (v27);
    }
  }

LABEL_64:
  int v54 = BYTE1(v102[1]);
  uint64_t v90 = a2;
  if (BYTE1(v102[1]))
  {
    (*(void (**)(void, void, char **))(*((void *)this + 4) + 832LL))( *(void *)(*((void *)this + 3) + 16LL),  LODWORD(v102[0]),  &v105);
    unsigned int v55 = v105;
    int v56 = 16 * (v105 >> 16 != 0);
    if (v55 > 0xFF)
    {
      v55 >>= 8;
      int v56 = (16 * (v105 >> 16 != 0)) | 8;
    }

    if (v55 > 0xF)
    {
      v55 >>= 4;
      v56 |= 4u;
    }

    if (v55 > 3)
    {
      v55 >>= 2;
      v56 |= 2u;
    }

    int v54 = v56 | (v55 > 1);
  }

  if (v91)
  {
    uint64_t v57 = 0LL;
    int v58 = v54 + 1;
    int v93 = v54 + 1;
LABEL_77:
    uint64_t v59 = 0LL;
    uint64_t v92 = v57;
    uint64_t v60 = *((unsigned int *)&v108 + v57);
    while (1)
    {
      *(_OWORD *)&v96[1] = 0uLL;
      int v98 = 0;
      uint64_t v97 = 0LL;
      *(void *)unsigned int v99 = 0x100000001LL;
      v100[0] = 0LL;
      *(void *)((char *)v100 + 5) = 0LL;
      GPUTools::GL::GetImageInfo(v95, *(unsigned int *)(*((void *)this + 2) + 3456LL), v60, v59, &v96[1]);
      if (!v98 || !v99[0] || !v99[1]) {
        goto LABEL_78;
      }
      v96[0] = 0;
      if (LODWORD(v100[0]))
      {
        switch(LOBYTE(v102[1]))
        {
          case 3u:
            BOOL v61 = v101 == 1;
            int v62 = 96;
            int v63 = 99;
            break;
          case 2u:
            BOOL v61 = v101 == 1;
            int v62 = 95;
            int v63 = 98;
            break;
          case 1u:
            BOOL v61 = v101 == 1;
            int v62 = 94;
            int v63 = 97;
            break;
          default:
            goto LABEL_134;
        }

        if (v61) {
          int v62 = v63;
        }
        unsigned int v94 = v62;
        (*(void (**)(void, uint64_t, uint64_t, uint64_t, _DWORD *))(*((void *)this + 4) + 1000LL))( *(void *)(*((void *)this + 3) + 16LL),  v60,  v59,  34464LL,  v96);
        unint64_t v67 = v96[0];
      }

      else
      {
        switch(LOBYTE(v102[1]))
        {
          case 3u:
            BOOL v64 = v101 == 1;
            int v65 = 595;
            int v66 = 604;
            break;
          case 2u:
            BOOL v64 = v101 == 1;
            int v65 = 594;
            int v66 = 603;
            break;
          case 1u:
            BOOL v64 = v101 == 1;
            int v65 = 593;
            int v66 = 602;
            break;
          default:
            goto LABEL_134;
        }

        if (v64) {
          int v65 = v66;
        }
        unsigned int v94 = v65;
        v96[0] = GPUTools::GL::ComputePackedClientImageSize(&v96[1]);
        unint64_t v67 = v96[0];
        if (*((void *)this + 68) < (unint64_t)v96[0])
        {
LABEL_102:
          if ((GPUTools::VMBuffer::alloc((ContextHarvester *)((char *)this + 536), v67, 0LL) & 1) == 0)
          {
            dy_abort("VMBuffer::resize failed: size=%lu", v67);
            goto LABEL_137;
          }
        }
      }

      uint64_t v68 = *((void *)this + 67);
      uint64_t v69 = (v68 + *((void *)this + 72) - 1) & -*((void *)this + 72);
      uint64_t v70 = v69 - v68;
      *((void *)this + 70) = v70;
      *((void *)this + 71) = v70;
      if (LODWORD(v100[0]))
      {
        uint64_t ImageData = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*((void *)this + 4) + 3080LL))( *(void *)(*((void *)this + 3) + 16LL),  v60,  v59,  v69);
      }

      else
      {
        if (!v96[0]) {
          goto LABEL_109;
        }
        uint64_t ImageData = GPUTools::GL::GetImageData(v95, v60, v59, v96[2], v96[3], *((unsigned __int8 *)this + 590));
      }

      uint64_t v72 = v96[0];
      if (!v96[0])
      {
LABEL_109:
        *(_BYTE *)(*((void *)this + 2) + 4644LL) = 0;
        goto LABEL_110;
      }

      uint64_t v73 = *((void *)this + 67);
      uint64_t v74 = *((void *)this + 70);
      uint64_t v75 = *((void *)this + 1);
      uint64_t v76 = *((void *)this + 2);
      int v77 = *((unsigned __int8 *)this + 591);
      uint64_t v78 = DYGetGLGuestAppClient(ImageData);
      GPUTools::Interpose::DYSavePointer(v78, v72, v74 + v73, v76 + 4644, 65LL, v75, v77 != 0, 0LL, 0LL);
LABEL_110:
      unsigned int v79 = (_OWORD *)(*((void *)this + 2) + 4709LL);
      v79[2] = 0u;
      v79[3] = 0u;
      *unsigned int v79 = 0u;
      v79[1] = 0u;
      __int128 v106 = 0u;
      memset(v107, 0, sizeof(v107));
      strlcpy((char *)(*((void *)this + 2) + 4709LL), "Cei", 0x40uLL);
      int v58 = v93;
      GPUTools::FB::FIFOArgumentProvider::push((GPUTools::FB::FIFOArgumentProvider *)&v105, **((void ***)this + 2));
      GPUTools::FB::FIFOArgumentProvider::push((GPUTools::FB::FIFOArgumentProvider *)&v105, v60);
      GPUTools::FB::FIFOArgumentProvider::push((GPUTools::FB::FIFOArgumentProvider *)&v105, v59);
      if (v101 == 1)
      {
        switch(LOBYTE(v102[1]))
        {
          case 1u:
            strlcat((char *)(*((void *)this + 2) + 4709LL), "ii", 0x40uLL);
            GPUTools::FB::FIFOArgumentProvider::push((GPUTools::FB::FIFOArgumentProvider *)&v105, 0);
            uint64_t v80 = &v98;
            break;
          case 2u:
            strlcat((char *)(*((void *)this + 2) + 4709LL), "iiii", 0x40uLL);
            GPUTools::FB::FIFOArgumentProvider::push((GPUTools::FB::FIFOArgumentProvider *)&v105, 0);
            GPUTools::FB::FIFOArgumentProvider::push((GPUTools::FB::FIFOArgumentProvider *)&v105, 0);
            GPUTools::FB::FIFOArgumentProvider::push((GPUTools::FB::FIFOArgumentProvider *)&v105, v98);
            uint64_t v80 = v99;
            break;
          case 3u:
            strlcat((char *)(*((void *)this + 2) + 4709LL), "iiiiii", 0x40uLL);
            GPUTools::FB::FIFOArgumentProvider::push((GPUTools::FB::FIFOArgumentProvider *)&v105, 0);
            GPUTools::FB::FIFOArgumentProvider::push((GPUTools::FB::FIFOArgumentProvider *)&v105, 0);
            GPUTools::FB::FIFOArgumentProvider::push((GPUTools::FB::FIFOArgumentProvider *)&v105, 0);
            GPUTools::FB::FIFOArgumentProvider::push((GPUTools::FB::FIFOArgumentProvider *)&v105, v98);
            GPUTools::FB::FIFOArgumentProvider::push((GPUTools::FB::FIFOArgumentProvider *)&v105, v99[0]);
            uint64_t v80 = &v99[1];
            break;
          default:
            goto LABEL_134;
        }

        GPUTools::FB::FIFOArgumentProvider::push((GPUTools::FB::FIFOArgumentProvider *)&v105, *v80);
        if (LODWORD(v100[0]))
        {
          strlcat((char *)(*((void *)this + 2) + 4709LL), "e", 0x40uLL);
          GPUTools::FB::FIFOArgumentProvider::push((GPUTools::FB::FIFOArgumentProvider *)&v105, v96[1]);
        }
      }

      else
      {
        strlcat((char *)(*((void *)this + 2) + 4709LL), "e", 0x40uLL);
        GPUTools::FB::FIFOArgumentProvider::push((GPUTools::FB::FIFOArgumentProvider *)&v105, v96[1]);
        switch(LOBYTE(v102[1]))
        {
          case 3u:
            strlcat((char *)(*((void *)this + 2) + 4709LL), "iii", 0x40uLL);
            GPUTools::FB::FIFOArgumentProvider::push((GPUTools::FB::FIFOArgumentProvider *)&v105, v98);
            GPUTools::FB::FIFOArgumentProvider::push((GPUTools::FB::FIFOArgumentProvider *)&v105, v99[0]);
            uint64_t v81 = &v99[1];
            break;
          case 2u:
            strlcat((char *)(*((void *)this + 2) + 4709LL), "ii", 0x40uLL);
            GPUTools::FB::FIFOArgumentProvider::push((GPUTools::FB::FIFOArgumentProvider *)&v105, v98);
            uint64_t v81 = v99;
            break;
          case 1u:
            strlcat((char *)(*((void *)this + 2) + 4709LL), "i", 0x40uLL);
            uint64_t v81 = &v98;
            break;
          default:
LABEL_134:
            unsigned int v88 = (const char *)dy_string_from_enum(v90);
            dy_abort("unknown texture target dimensions: target=%s, dimensions=%d", v88, LOBYTE(v102[1]));
            goto LABEL_137;
        }

        GPUTools::FB::FIFOArgumentProvider::push((GPUTools::FB::FIFOArgumentProvider *)&v105, *v81);
        strlcat((char *)(*((void *)this + 2) + 4709LL), "i", 0x40uLL);
        GPUTools::FB::FIFOArgumentProvider::push((GPUTools::FB::FIFOArgumentProvider *)&v105, 0);
      }

      if ((v96[1] & 0xFFFFFFFD) == 0x8C40) {
        v96[2] = v96[1];
      }
      char v82 = (char *)(*((void *)this + 2) + 4709LL);
      if (LODWORD(v100[0]))
      {
        strlcat(v82, "i", 0x40uLL);
        unsigned int v83 = v96[0];
      }

      else
      {
        strlcat(v82, "ee", 0x40uLL);
        GPUTools::FB::FIFOArgumentProvider::push((GPUTools::FB::FIFOArgumentProvider *)&v105, v96[2]);
        unsigned int v83 = v96[3];
      }

      GPUTools::FB::FIFOArgumentProvider::push((GPUTools::FB::FIFOArgumentProvider *)&v105, v83);
      strlcat((char *)(*((void *)this + 2) + 4709LL), "U", 0x40uLL);
      GPUTools::FB::FIFOArgumentProvider::push( (GPUTools::FB::FIFOArgumentProvider *)&v105,  (void *)(*((void *)this + 2) + 4644LL));
      GPUTools::FB::Encode(*((void *)this + 2) + 120LL, v94, 4096LL, *((void *)this + 2) + 4709LL, &v105);
      GPUTools::FB::Encode( *((void *)this + 2) + 144LL,  4294955024LL,  0x2000LL,  (uint64_t)"Cietee",  v84,  v85,  v86,  v87,  **((void **)this + 2));
      GPUTools::FB::Stream::Writev_nopartial( *((GPUTools::FB::Stream **)this + 5),  (GPUTools::FB::Fbuf *)(*((void *)this + 2) + 120LL),  2uLL,  1);
      GPUTools::FB::FIFOArgumentProvider::~FIFOArgumentProvider((GPUTools::FB::FIFOArgumentProvider *)&v105);
LABEL_78:
      uint64_t v59 = (v59 + 1);
      if (v58 == (_DWORD)v59)
      {
        uint64_t v57 = v92 + 1;
        if (v92 + 1 == v91) {
          break;
        }
        goto LABEL_77;
      }
    }
  }

  ContextHarvester::encodeCommand(v103, 4294955016LL, 0, v19, v20);
}

void sub_1458C(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ContextHarvester::HarvestAll(ContextHarvester *this, int a2, char a3)
{
  *(_DWORD *)this = 0;
  *((_BYTE *)this + 591) = a3;
  unint64_t v5 = GLIContextFromEAGLContext(**((void **)this + 2));
  uint64_t v6 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v6) {
    goto LABEL_12;
  }
  uint64_t v7 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v8 = v6[4];
    BOOL v9 = v8 >= v5;
    if (v8 >= v5) {
      uint64_t v10 = v6;
    }
    else {
      uint64_t v10 = v6 + 1;
    }
    if (v9) {
      uint64_t v7 = (uint64_t)v6;
    }
    uint64_t v6 = (void *)*v10;
  }

  while (*v10);
  if (v7 == ContextInfo::activeCtxInfoMap + 8 || v5 < *(void *)(v7 + 32)) {
LABEL_12:
  }
    uint64_t v7 = ContextInfo::activeCtxInfoMap + 8;
  check_errors(*(void *)(v7 + 40));
  ContextHarvester::queryObjectLists(this);
  ContextHarvester::encodeCommand( this,  4294955015LL,  3u,  v11,  v12,  65028LL,  kDYStateGroupRoot,  65030LL,  0LL,  65030LL,  0LL);
  ContextHarvester::saveBufferBindings(this);
  int v13 = *(unsigned __int8 *)(*((void *)this + 2) + 4847LL);
  (*(void (**)(void, uint64_t, char *))(*((void *)this + 4) + 832LL))( *(void *)(*((void *)this + 3) + 16LL),  36006LL,  (char *)this + 140);
  if (v13) {
    (*(void (**)(void, uint64_t, char *))(*((void *)this + 4) + 832LL))( *(void *)(*((void *)this + 3) + 16LL),  36010LL,  (char *)this + 144);
  }
  else {
    *((_DWORD *)this + 36) = *((_DWORD *)this + 35);
  }
  (*(void (**)(void, uint64_t, char *))(*((void *)this + 4) + 832LL))( *(void *)(*((void *)this + 3) + 16LL),  36007LL,  (char *)this + 148);
  (*(void (**)(void, uint64_t))(*((void *)this + 4) + 2736LL))( *(void *)(*((void *)this + 3) + 16LL),  33984LL);
  ContextHarvester::encode(this, 2LL, 128LL, "Ce", **((void **)this + 2), 33984LL);
  uint64_t v14 = *((void *)this + 2);
  if (*(_BYTE *)(v14 + 4852))
  {
    (*(void (**)(void, uint64_t, char *))(*((void *)this + 4) + 832LL))( *(void *)(*((void *)this + 3) + 16LL),  34229LL,  (char *)this + 136);
    uint64_t v14 = *((void *)this + 2);
  }

  if (is_extension_available(v14, "GL_ARB_vertex_program")) {
    (*(void (**)(void, uint64_t, uint64_t, char *))(*((void *)this + 4) + 4256LL))( *(void *)(*((void *)this + 3) + 16LL),  34336LL,  34423LL,  (char *)this + 152);
  }
  if (is_extension_available(*((void *)this + 2), "GL_ARB_fragment_program")) {
    (*(void (**)(void, uint64_t, uint64_t, char *))(*((void *)this + 4) + 4256LL))( *(void *)(*((void *)this + 3) + 16LL),  34820LL,  34423LL,  (char *)this + 156);
  }
  (*(void (**)(void, uint64_t, char *))(*((void *)this + 4) + 832LL))( *(void *)(*((void *)this + 3) + 16LL),  2978LL,  (char *)this + 160);
  if (*(_BYTE *)(*((void *)this + 2) + 4862LL))
  {
    (*(void (**)(void, uint64_t, char *))(*((void *)this + 4) + 832LL))( *(void *)(*((void *)this + 3) + 16LL),  36389LL,  (char *)this + 584);
    (*(void (**)(void, uint64_t, char *))(*((void *)this + 4) + 792LL))( *(void *)(*((void *)this + 3) + 16LL),  36388LL,  (char *)this + 588);
    (*(void (**)(void, uint64_t, char *))(*((void *)this + 4) + 792LL))( *(void *)(*((void *)this + 3) + 16LL),  36387LL,  (char *)this + 589);
    if (*((_BYTE *)this + 588))
    {
      if (!*((_BYTE *)this + 589))
      {
        (*(void (**)(void))(*((void *)this + 4) + 7256LL))(*(void *)(*((void *)this + 3) + 16LL));
        ContextHarvester::encode(this, 1004LL, 128LL, "C", **((void **)this + 2));
      }
    }
  }

  GPUTools::GL::SavePixelStoreState( (char *)this + 24,  *(unsigned int *)(*((void *)this + 2) + 3456LL),  *(unsigned __int8 *)(*((void *)this + 2) + 4861LL),  (char *)this + 176,  (char *)this + 212);
  __int128 v75 = xmmword_1F2D60;
  uint64_t v76 = 0LL;
  uint64_t v77 = 0LL;
  __int16 v78 = 0;
  GPUTools::GL::ApplyPixelStoreState( (char *)this + 24,  *(unsigned int *)(*((void *)this + 2) + 3456LL),  *(unsigned __int8 *)(*((void *)this + 2) + 4861LL),  &v75,  &v75);
  ContextHarvester::encodePixelStore(this, (unsigned int *)&v75, (unsigned int *)&v75, 128LL);
  ContextHarvester::setPixelBuffers(this, 0LL, 0LL, 1);
  if (a2)
  {
    ContextHarvester::harvestBufferObjects(this, v15, v16, v17, v18);
    ContextHarvester::harvestSamplers(this, v19, v20, v21, v22);
    ContextHarvester::harvestRenderbuffers(this, v23, v24, v25, v26);
    if (*(_BYTE *)(*((void *)this + 2) + 4859LL)) {
      ContextHarvester::harvestSyncObjects(this, v27, v28, v29, v30);
    }
    ContextHarvester::harvestLegacyARBPrograms(this);
  }

  if (*(_DWORD *)(*((void *)this + 2) + 3456LL) != 1)
  {
    ContextHarvester::harvestUniformBufferBindings((unsigned int **)this, v15, v16, v17, v18);
    if (a2)
    {
      ContextHarvester::harvestGLSLShaders(this, v31, v16, v17, v18);
      ContextHarvester::harvestGLSLPrograms_LinkedStatePass(this, v32, v33, v34, v35);
      if (*(_BYTE *)(*((void *)this + 2) + 4846LL)) {
        ContextHarvester::harvestGLSLProgramPipelines(this, v36, v37, v38, v39);
      }
      ContextHarvester::harvestGLSLPrograms_CurrentStatePass(this, v36, v37, v38, v39);
      ContextHarvester::harvestGLSLShaderLabels(this, v40, v41, v42, v43);
      ContextHarvester::encodeGLSLShaderDeletes(this, v44, v45, v46, v47);
    }
  }

  ContextHarvester::harvestTextures(this, a2, v16, v17, v18);
  ContextHarvester::restoreBufferBindings(this);
  if ((a2 & 1) != 0 || (uint64_t v52 = (_BYTE *)*((void *)this + 2), !v52[4864]))
  {
    ContextHarvester::harvestVertexArrayObjects(this, v48, v49, v50, v51);
    if ((a2 & 1) == 0)
    {
      uint64_t v52 = (_BYTE *)*((void *)this + 2);
      if (v52[4863])
      {
LABEL_38:
        if (!v52[4868]) {
          goto LABEL_39;
        }
LABEL_44:
        ContextHarvester::harvestQueryObjects(this, v48, v49, v50, v51);
        uint64_t v52 = (_BYTE *)*((void *)this + 2);
        if (!v52[4862]) {
          goto LABEL_46;
        }
        goto LABEL_45;
      }
    }
  }

  else if (v52[4863])
  {
    goto LABEL_38;
  }

  ContextHarvester::harvestFramebuffers(this, v48, v49, v50, v51);
  uint64_t v52 = (_BYTE *)*((void *)this + 2);
  if (v52[4868]) {
    goto LABEL_44;
  }
LABEL_39:
  if (v52[4862])
  {
LABEL_45:
    ContextHarvester::harvestXfbObjects(this, v48, v49, v50, v51);
    uint64_t v52 = (_BYTE *)*((void *)this + 2);
  }

LABEL_46:
  ContextHarvester::encodeCurrentProgramAndBoundPipeline(this);
  ContextHarvester::restoreFramebufferBindings(this, 1);
  uint64_t v57 = *((void *)this + 4);
  int v58 = *(void (**)(void, uint64_t, uint64_t))(v57 + 5328);
  uint64_t v59 = *((unsigned int *)this + 37);
  (*(void (**)(void, uint64_t, __int128 *))(v57 + 832))( *(void *)(*((void *)this + 3) + 16LL),  36007LL,  &v75);
  if ((_DWORD)v75 != (_DWORD)v59) {
    v58(*(void *)(*((void *)this + 3) + 16LL), 36161LL, v59);
  }
  uint64_t v60 = *((unsigned int *)this + 37);
  if ((_DWORD)v60
    && !(*(unsigned int (**)(void, void))(*((void *)this + 4) + 5320LL))( *(void *)(*((void *)this + 3) + 16LL),  *((unsigned int *)this + 37)))
  {
    BOOL v61 = (GPUTools::FB::Fbuf *)(&stru_4C0 + 66);
  }

  else
  {
    BOOL v61 = 0LL;
  }

  ContextHarvester::encodeWithError(this, 19LL, 128LL, v61, "Ceui", **((void **)this + 2), 36161LL, v60);
  ContextHarvester::restoreTextureUnitBindings(this, 1);
  ContextHarvester::restoreVAOBindings(this, 1);
  ContextHarvester::restoreLegacyARBProgramBindings(this, 1);
  ContextHarvester::encodeBufferBindings(this);
  (*(void (**)(void, void, void, void, void))(*((void *)this + 4) + 2680LL))( *(void *)(*((void *)this + 3) + 16LL),  *((unsigned int *)this + 40),  *((unsigned int *)this + 41),  *((unsigned int *)this + 42),  *((unsigned int *)this + 43));
  ContextHarvester::encodeCommandEx( this,  733LL,  0x80u,  4u,  v62,  v63,  v64,  5124LL,  *((unsigned int *)this + 40),  5124LL,  *((unsigned int *)this + 41),  5124LL,  *((unsigned int *)this + 42),  5124LL,  *((unsigned int *)this + 43));
  if (*(_BYTE *)(*((void *)this + 2) + 4862LL))
  {
    (*(void (**)(void, uint64_t, void))(*((void *)this + 4) + 7232LL))( *(void *)(*((void *)this + 3) + 16LL),  36386LL,  *((unsigned int *)this + 146));
    ContextHarvester::encode( this,  980LL,  128LL,  "Ceui",  **((void **)this + 2),  36386LL,  *((unsigned int *)this + 146));
    if (*((_BYTE *)this + 588))
    {
      if (!*((_BYTE *)this + 589))
      {
        (*(void (**)(void))(*((void *)this + 4) + 7264LL))(*(void *)(*((void *)this + 3) + 16LL));
        ContextHarvester::encode(this, 1005LL, 128LL, "C", **((void **)this + 2));
      }
    }
  }

  GPUTools::GL::ApplyPixelStoreState( (char *)this + 24,  *(unsigned int *)(*((void *)this + 2) + 3456LL),  *(unsigned __int8 *)(*((void *)this + 2) + 4861LL),  (char *)this + 176,  (char *)this + 212);
  ContextHarvester::encodePixelStore(this, (unsigned int *)this + 44, (unsigned int *)this + 53, 128LL);
  ContextHarvester::setPixelBuffers( this,  *(unsigned int *)(*((void *)this + 2) + 2044LL),  *(unsigned int *)(*((void *)this + 2) + 2040LL),  1);
  ContextHarvester::harvestGlobalState(this);
  (*(void (**)(void, void))(*((void *)this + 4) + 2736LL))( *(void *)(*((void *)this + 3) + 16LL),  *(unsigned int *)(*((void *)this + 2) + 2072LL));
  ContextHarvester::encode( this,  2LL,  128LL,  "Ce",  **((void **)this + 2),  *(unsigned int *)(*((void *)this + 2) + 2072LL));
  ContextHarvester::encodeCommand(this, 179LL, 0, v65, v66);
  unint64_t v67 = GLIContextFromEAGLContext(**((void **)this + 2));
  uint64_t v68 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v68) {
    goto LABEL_69;
  }
  uint64_t v69 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v70 = v68[4];
    BOOL v71 = v70 >= v67;
    if (v70 >= v67) {
      uint64_t v72 = v68;
    }
    else {
      uint64_t v72 = v68 + 1;
    }
    if (v71) {
      uint64_t v69 = (uint64_t)v68;
    }
    uint64_t v68 = (void *)*v72;
  }

  while (*v72);
  if (v69 == ContextInfo::activeCtxInfoMap + 8 || v67 < *(void *)(v69 + 32)) {
LABEL_69:
  }
    uint64_t v69 = ContextInfo::activeCtxInfoMap + 8;
  check_errors(*(void *)(v69 + 40));
  *((_BYTE *)this + 591) = 1;
  ContextHarvester::encodeCommand(this, 4294955016LL, 0, v73, v74);
}

void sub_14DB4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
}

void ContextHarvester::queryObjectLists(ContextHarvester *this)
{
  v2[0] = 0LL;
  v2[1] = 0LL;
  GPUTools::NameTargetTupleArray::querySpecificObjectList( *((id **)this + 2),  v2,  (GPUTools::NameTargetTupleArray *)((char *)&stru_600.flags + 3));
  GPUTools::NameTargetTupleArray::split( (GPUTools::NameTargetTupleArray *)v2,  35656,  (void **)this + 49,  (void **)this + 51);
  GPUTools::NameTargetTupleArray::reset((GPUTools::NameTargetTupleArray *)v2);
}

void sub_14EE0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *ContextHarvester::saveBufferBindings(ContextHarvester *this)
{
  if (*(_DWORD *)(*((void *)this + 2) + 2032LL)) {
  else
  }
    BOOL v2 = 1;
  unsigned int v3 = (char *)this + 64;
  unsigned int v14 = 34962;
  uint64_t v15 = &v14;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned int,BOOL>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,BOOL>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>( (uint64_t)this + 64,  &v14,  (uint64_t)&std::piecewise_construct,  &v15)
  + 20) = v2;
  if (*(_DWORD *)(*((void *)this + 2) + 2036LL)) {
  else
  }
    BOOL v4 = 1;
  unsigned int v14 = 34963;
  uint64_t v15 = &v14;
  uint64_t result = std::__hash_table<std::__hash_value_type<unsigned int,BOOL>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,BOOL>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>( (uint64_t)this + 64,  &v14,  (uint64_t)&std::piecewise_construct,  &v15);
  *((_BYTE *)result + 20) = v4;
  uint64_t v6 = *((void *)this + 2);
  if (*(int *)(v6 + 3460) >= 2)
  {
    BOOL v7 = !*(_DWORD *)(v6 + 2044)
    unsigned int v14 = 35052;
    uint64_t v15 = &v14;
    *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned int,BOOL>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,BOOL>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>( (uint64_t)this + 64,  &v14,  (uint64_t)&std::piecewise_construct,  &v15)
    + 20) = v7;
    BOOL v8 = !*(_DWORD *)(*((void *)this + 2) + 2040LL)
    unsigned int v14 = 35051;
    uint64_t v15 = &v14;
    uint64_t result = std::__hash_table<std::__hash_value_type<unsigned int,BOOL>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,BOOL>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>( (uint64_t)this + 64,  &v14,  (uint64_t)&std::piecewise_construct,  &v15);
    *((_BYTE *)result + 20) = v8;
    uint64_t v9 = *((void *)this + 2);
    if (*(int *)(v9 + 3460) >= 3)
    {
      if (*(_DWORD *)(v9 + 2048)) {
      else
      }
        BOOL v10 = 1;
      unsigned int v14 = 36662;
      uint64_t v15 = &v14;
      *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned int,BOOL>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,BOOL>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>( (uint64_t)this + 64,  &v14,  (uint64_t)&std::piecewise_construct,  &v15)
      + 20) = v10;
      if (*(_DWORD *)(*((void *)this + 2) + 2052LL)) {
      else
      }
        BOOL v11 = 1;
      unsigned int v14 = 36663;
      uint64_t v15 = &v14;
      *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned int,BOOL>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,BOOL>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>( (uint64_t)this + 64,  &v14,  (uint64_t)&std::piecewise_construct,  &v15)
      + 20) = v11;
      if (*(_DWORD *)(*((void *)this + 2) + 2060LL)) {
      else
      }
        BOOL v12 = 1;
      unsigned int v14 = 35982;
      uint64_t v15 = &v14;
      *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned int,BOOL>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,BOOL>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>( (uint64_t)this + 64,  &v14,  (uint64_t)&std::piecewise_construct,  &v15)
      + 20) = v12;
      if (*(_DWORD *)(*((void *)this + 2) + 2064LL)) {
      else
      }
        BOOL v13 = 1;
      unsigned int v14 = 35345;
      uint64_t v15 = &v14;
      uint64_t result = std::__hash_table<std::__hash_value_type<unsigned int,BOOL>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,BOOL>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>( (uint64_t)v3,  &v14,  (uint64_t)&std::piecewise_construct,  &v15);
      *((_BYTE *)result + 20) = v13;
    }
  }

  return result;
}

void ContextHarvester::harvestBufferObjects( ContextHarvester *this, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  if (!*((void *)this + 41)) {
    __assert_rtn( "void ContextHarvester::harvestBufferObjects()",  (const char *)&unk_1F0B16,  0,  "_bufferObjects.valid()");
  }
  ContextHarvester::encodeCommand( this,  4294955015LL,  3u,  a4,  a5,  65028LL,  kDYStateGroupBuffers,  65030LL,  0LL,  65030LL,  0LL,  this);
  uint64_t v6 = (void *)*((void *)this + 2);
  uint64_t v7 = **((unsigned int **)this + 41);
  if ((_DWORD)v7)
  {
    BOOL v8 = (int8x8_t *)v6[5];
    uint64_t v9 = (unsigned int *)*((void *)this + 42);
    BOOL v10 = &v9[2 * v7];
    while (1)
    {
      unint64_t v11 = *v9;
      int8x8_t v12 = v8[3];
      if (!*(void *)&v12) {
        goto LABEL_24;
      }
      uint8x8_t v13 = (uint8x8_t)vcnt_s8(v12);
      v13.i16[0] = vaddlv_u8(v13);
      if (v13.u32[0] > 1uLL)
      {
        unint64_t v14 = *v9;
        if (*(void *)&v12 <= v11) {
          unint64_t v14 = v11 % *(void *)&v12;
        }
      }

      else
      {
        unint64_t v14 = (v12.i32[0] - 1) & v11;
      }

      uint64_t v15 = *(uint64_t ***)(*(void *)&v8[2] + 8 * v14);
      if (!v15 || (uint64_t v16 = *v15) == 0LL)
      {
LABEL_24:
        uint64_t v20 = (GPUTools::GL *)(&loc_8890 + 2);
        goto LABEL_25;
      }

      if (v13.u32[0] < 2uLL)
      {
        uint64_t v17 = *(void *)&v12 - 1LL;
        while (1)
        {
          uint64_t v19 = v16[1];
          if (v19 == v11)
          {
            if (*((_DWORD *)v16 + 4) == (_DWORD)v11) {
              goto LABEL_27;
            }
          }

          else if ((v19 & v17) != v14)
          {
            goto LABEL_24;
          }

          uint64_t v16 = (uint64_t *)*v16;
          if (!v16) {
            goto LABEL_24;
          }
        }
      }

      while (1)
      {
        unint64_t v18 = v16[1];
        if (v18 == v11) {
          break;
        }
        if (v18 >= *(void *)&v12) {
          v18 %= *(void *)&v12;
        }
        if (v18 != v14) {
          goto LABEL_24;
        }
LABEL_14:
        uint64_t v16 = (uint64_t *)*v16;
        if (!v16) {
          goto LABEL_24;
        }
      }

      if (*((_DWORD *)v16 + 4) != (_DWORD)v11) {
        goto LABEL_14;
      }
LABEL_27:
      uint64_t v20 = (GPUTools::GL *)*((unsigned int *)v16 + 5);
LABEL_25:
      ContextHarvester::harvestBufferObject((GPUTools::FB::Stream **)this, v20, v11, 0LL, 0LL, 1);
      v9 += 2;
      if (v9 == v10)
      {
        uint64_t v6 = (void *)*((void *)this + 2);
        break;
      }
    }
  }

  std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>(v6[9], v6[10], &v23);
  ContextHarvester::setPixelBuffers(this, 0LL, 0LL, 1);
  ContextHarvester::encodeCommand(this, 4294955016LL, 0, v21, v22);
}

void sub_153E8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_153FC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void ContextHarvester::harvestSamplers(ContextHarvester *this, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  if (!*((void *)this + 63)) {
    __assert_rtn("void ContextHarvester::harvestSamplers()", (const char *)&unk_1F0B16, 0, "_samplerObjects.valid()");
  }
  ContextHarvester::encodeCommand( this,  4294955015LL,  3u,  a4,  a5,  65028LL,  kDYStateGroupSamplers,  65030LL,  0LL,  65030LL,  0LL);
  uint64_t v9 = **((unsigned int **)this + 63);
  if ((_DWORD)v9)
  {
    BOOL v10 = (unsigned int *)*((void *)this + 64);
    uint64_t v11 = 8 * v9;
    do
    {
      ContextHarvester::harvestSampler(this, *v10, v6, v7, v8);
      v10 += 2;
      v11 -= 8LL;
    }

    while (v11);
  }

  ContextHarvester::encodeCommand(this, 4294955016LL, 0, v7, v8);
}

void sub_154D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
}

void ContextHarvester::harvestRenderbuffers( ContextHarvester *this, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  if (!*((void *)this + 47)) {
    __assert_rtn( "void ContextHarvester::harvestRenderbuffers()",  (const char *)&unk_1F0B16,  0,  "_renderbufferObjects.valid()");
  }
  ContextHarvester::encodeCommand( this,  4294955015LL,  3u,  a4,  a5,  65028LL,  kDYStateGroupRenderbuffers,  65030LL,  0LL,  65030LL,  0LL);
  uint64_t v8 = **((unsigned int **)this + 47);
  if ((_DWORD)v8)
  {
    uint64_t v9 = (unsigned int *)*((void *)this + 48);
    uint64_t v10 = 8 * v8;
    do
    {
      ContextHarvester::harvestRenderbufferObject(this, *v9, 0);
      v9 += 2;
      v10 -= 8LL;
    }

    while (v10);
  }

  ContextHarvester::encodeCommand(this, 4294955016LL, 0, v6, v7);
}

void sub_155B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
}

void ContextHarvester::harvestSyncObjects( ContextHarvester *this, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  if (!*((void *)this + 61)) {
    __assert_rtn("void ContextHarvester::harvestSyncObjects()", (const char *)&unk_1F0B16, 0, "_syncObjects.valid()");
  }
  ContextHarvester::encodeCommand( this,  4294955015LL,  3u,  a4,  a5,  65028LL,  kDYStateGroupSyncObjects,  65030LL,  0LL,  65030LL,  0LL);
  uint64_t v9 = **((unsigned int **)this + 61);
  if ((_DWORD)v9)
  {
    uint64_t v10 = (unsigned int *)*((void *)this + 62);
    uint64_t v11 = 8 * v9;
    do
    {
      ContextHarvester::harvestSyncObject((GPUTools::FB::Stream **)this, *v10, v6, v7, v8);
      v10 += 2;
      v11 -= 8LL;
    }

    while (v11);
  }

  ContextHarvester::encodeCommand(this, 4294955016LL, 0, v7, v8);
}

void sub_15688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
}

void ContextHarvester::harvestLegacyARBPrograms(ContextHarvester *this)
{
  if (is_extension_available(*((void *)this + 2), "GL_ARB_fragment_program")
    && is_extension_available(*((void *)this + 2), "GL_ARB_vertex_program"))
  {
    ContextHarvester::getARBProgramObject(this, 34336LL, 0LL, v2, v3);
    ContextHarvester::getARBProgramObject(this, 34820LL, 0LL, v4, v5);
    uint64_t v8 = (unsigned int *)*((void *)this + 57);
    if (!v8) {
      __assert_rtn( "void ContextHarvester::harvestLegacyARBPrograms()",  (const char *)&unk_1F0B16,  0,  "_arbProgramObjects.valid()");
    }
    uint64_t v9 = *v8;
    if ((_DWORD)v9)
    {
      uint64_t v10 = (unsigned int *)(*((void *)this + 58) + 4LL);
      uint64_t v11 = 8 * v9;
      do
      {
        uint64_t v12 = *(v10 - 1);
        if ((_DWORD)v12) {
          ContextHarvester::getARBProgramObject(this, *v10, v12, v6, v7);
        }
        v10 += 2;
        v11 -= 8LL;
      }

      while (v11);
    }
  }

void ContextHarvester::harvestTextures(ContextHarvester *this, char a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v9 = *((void *)this + 2);
  uint64_t v10 = *(unsigned int **)(v9 + 3408);
  if ((a2 & 1) != 0)
  {
    uint64_t v12 = (unsigned int *)*((void *)this + 39);
    if (!v12) {
      __assert_rtn( "void ContextHarvester::harvestTextures(BOOL)",  (const char *)&unk_1F0B16,  0,  "_textureObjects.valid()");
    }
    uint64_t v13 = *v12;
    if ((_DWORD)v13)
    {
      unint64_t v14 = (unsigned int *)(*((void *)this + 40) + 4LL);
      uint64_t v15 = 8 * v13;
      do
      {
        ContextHarvester::harvestTexture(this, *v14, *(v14 - 1), v7, v8);
        v14 += 2;
        v15 -= 8LL;
      }

      while (v15);
    }
  }

  ContextHarvester::encodeCommand(this, 4294955016LL, 0, v7, v8);
}

void sub_1586C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
}

void sub_15880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
}

void sub_15894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
}

uint64_t ContextHarvester::restoreBufferBindings(ContextHarvester *this)
{
  uint64_t v2 = *((void *)this + 4);
  uint64_t v3 = *(void (**)(void, uint64_t, uint64_t))(v2 + 5136);
  uint64_t v4 = *(unsigned int *)(*((void *)this + 2) + 2032LL);
  (*(void (**)(void, uint64_t, int *))(v2 + 832))(*(void *)(*((void *)this + 3) + 16LL), 34964LL, &v22);
  if (v22 != (_DWORD)v4) {
    v3(*(void *)(*((void *)this + 3) + 16LL), 34962LL, v4);
  }
  uint64_t v5 = *((void *)this + 4);
  char v6 = *(uint64_t (**)(void, uint64_t, uint64_t))(v5 + 5136);
  uint64_t v7 = *(unsigned int *)(*((void *)this + 2) + 2036LL);
  uint64_t result = (*(uint64_t (**)(void, uint64_t, int *))(v5 + 832))( *(void *)(*((void *)this + 3) + 16LL),  34965LL,  &v22);
  if (v22 != (_DWORD)v7) {
    uint64_t result = v6(*(void *)(*((void *)this + 3) + 16LL), 34963LL, v7);
  }
  uint64_t v9 = *((void *)this + 2);
  if (*(int *)(v9 + 3460) >= 3)
  {
    uint64_t v10 = *((void *)this + 4);
    uint64_t v11 = *(void (**)(void, uint64_t, uint64_t))(v10 + 5136);
    uint64_t v12 = *(unsigned int *)(v9 + 2048);
    (*(void (**)(void, uint64_t, int *))(v10 + 832))( *(void *)(*((void *)this + 3) + 16LL),  36662LL,  &v22);
    if (v22 != (_DWORD)v12) {
      v11(*(void *)(*((void *)this + 3) + 16LL), 36662LL, v12);
    }
    uint64_t v13 = *((void *)this + 4);
    unint64_t v14 = *(void (**)(void, uint64_t, uint64_t))(v13 + 5136);
    uint64_t v15 = *(unsigned int *)(*((void *)this + 2) + 2052LL);
    (*(void (**)(void, uint64_t, int *))(v13 + 832))( *(void *)(*((void *)this + 3) + 16LL),  36663LL,  &v22);
    if (v22 != (_DWORD)v15) {
      v14(*(void *)(*((void *)this + 3) + 16LL), 36663LL, v15);
    }
    uint64_t v16 = *((void *)this + 4);
    uint64_t v17 = *(void (**)(void, uint64_t, uint64_t))(v16 + 5136);
    uint64_t v18 = *(unsigned int *)(*((void *)this + 2) + 2060LL);
    (*(void (**)(void, uint64_t, int *))(v16 + 832))( *(void *)(*((void *)this + 3) + 16LL),  35983LL,  &v22);
    if (v22 != (_DWORD)v18) {
      v17(*(void *)(*((void *)this + 3) + 16LL), 35982LL, v18);
    }
    uint64_t v19 = *((void *)this + 4);
    uint64_t v20 = *(uint64_t (**)(void, uint64_t, uint64_t))(v19 + 5136);
    uint64_t v21 = *(unsigned int *)(*((void *)this + 2) + 2064LL);
    uint64_t result = (*(uint64_t (**)(void, uint64_t, int *))(v19 + 832))( *(void *)(*((void *)this + 3) + 16LL),  35368LL,  &v22);
    if (v22 != (_DWORD)v21) {
      return v20(*(void *)(*((void *)this + 3) + 16LL), 35345LL, v21);
    }
  }

  return result;
}

void ContextHarvester::harvestVertexArrayObjects( ContextHarvester *this, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  if (*(_BYTE *)(*((void *)this + 2) + 4852LL))
  {
    ContextHarvester::encodeCommand( this,  4294955015LL,  3u,  a4,  a5,  65028LL,  kDYStateGroupVertexArrays,  65030LL,  0LL,  65030LL,  0LL);
    uint64_t v8 = (unsigned int *)*((void *)this + 43);
    if (!v8) {
      __assert_rtn( "void ContextHarvester::harvestVertexArrayObjects()",  (const char *)&unk_1F0B16,  0,  "_vertexArrayObjects.valid()");
    }
    uint64_t v9 = *v8;
    if ((_DWORD)v9)
    {
      uint64_t v10 = (unsigned int *)*((void *)this + 44);
      uint64_t v11 = &v10[2 * v9];
      do
      {
        ContextHarvester::encodeCommand( this,  4294955015LL,  3u,  v6,  v7,  65028LL,  kDYStateGroupVertexArray,  65030LL,  *v10,  65030LL,  0LL);
        GPUTools::FB::Encode( *((void *)this + 2) + 120LL,  *((unsigned int *)this + 31),  0LL,  (uint64_t)"Ci@1ui",  v12,  v13,  v14,  v15,  **((void **)this + 2));
        uint64_t v16 = (GPUTools::FB::Stream *)*((void *)this + 5);
        uint64_t v17 = (GPUTools::FB::Fbuf *)(*((void *)this + 2) + 120LL);
        uint64_t v18 = (unsigned int *)((char *)v16 + 56);
        do
          unsigned int v19 = __ldaxr(v18);
        while (__stlxr(1u, v18));
        while (v19 == 1)
        {
          while (*v18 == 1)
            ;
          do
            unsigned int v19 = __ldaxr(v18);
          while (__stlxr(1u, v18));
        }

        GPUTools::FB::Stream::Write_nolock(v16, v17, **(unsigned int **)v17, 1);
        atomic_store(0, v18);
        uint64_t v20 = *v10;
        (*((void (**)(void, uint64_t))this + 16))(*(void *)(*((void *)this + 3) + 16LL), v20);
        ContextHarvester::encode(this, *((unsigned int *)this + 30), 128LL, "Cui", **((void **)this + 2), v20, v10);
        ContextHarvester::harvestObjectLabel(this, 0x9154u, v20);
        ContextHarvester::getVertexArrays(this, v21, v22, v23, v24);
        ContextHarvester::encodeCommand(this, 4294955016LL, 0, v25, v26);
        v10 += 2;
      }

      while (v10 != v11);
    }

    if (*(_BYTE *)(*((void *)this + 2) + 4853LL))
    {
      (*((void (**)(void, void))this + 16))(*(void *)(*((void *)this + 3) + 16LL), 0LL);
      ContextHarvester::encode(this, *((unsigned int *)this + 30), 128LL, "Cui", **((void **)this + 2), 0LL);
      ContextHarvester::getVertexArrays(this, v27, v28, v29, v30);
    }

    ContextHarvester::encodeCommand(this, 4294955016LL, 0, v6, v7);
  }

  else
  {
    ContextHarvester::getVertexArrays(this, a2, a3, a4, a5);
  }

void sub_15CF4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
}

void sub_15D08( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v17 = va_arg(va1, ContextHarvester *);
  atomic_store(0, v11);
  AutoStateGroup::~AutoStateGroup((ContextHarvester **)va, a2, a3, a4, a5);
  AutoStateGroup::~AutoStateGroup((ContextHarvester **)va1, v13, v14, v15, v16);
  _Unwind_Resume(a1);
}

void sub_15D34( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
}

void ContextHarvester::harvestFramebuffers( ContextHarvester *this, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  if (!*((void *)this + 45)) {
    __assert_rtn( "void ContextHarvester::harvestFramebuffers()",  (const char *)&unk_1F0B16,  0,  "_framebufferObjects.valid()");
  }
  ContextHarvester::encodeCommand( this,  4294955015LL,  3u,  a4,  a5,  65028LL,  kDYStateGroupFramebuffers,  65030LL,  0LL,  65030LL,  0LL);
  uint64_t v9 = **((unsigned int **)this + 45);
  if ((_DWORD)v9)
  {
    uint64_t v10 = (unsigned int *)*((void *)this + 46);
    uint64_t v11 = 8 * v9;
    do
    {
      ContextHarvester::harvestFramebuffer((unsigned int **)this, *v10, v6, v7, v8);
      v10 += 2;
      v11 -= 8LL;
    }

    while (v11);
  }

  ContextHarvester::encodeCommand(this, 4294955016LL, 0, v7, v8);
}

void sub_15E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
}

void ContextHarvester::harvestQueryObjects( ContextHarvester *this, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  if (!*((void *)this + 59)) {
    __assert_rtn("void ContextHarvester::harvestQueryObjects()", (const char *)&unk_1F0B16, 0, "_queryObjects.valid()");
  }
  ContextHarvester::encodeCommand( this,  4294955015LL,  3u,  a4,  a5,  65028LL,  kDYStateGroupQueries,  65030LL,  0LL,  65030LL,  0LL);
  uint64_t v8 = **((unsigned int **)this + 59);
  if ((_DWORD)v8)
  {
    uint64_t v9 = (_DWORD *)(*((void *)this + 60) + 4LL);
    uint64_t v10 = 8 * v8;
    do
    {
      if (*v9) {
        uint64_t v11 = *v9;
      }
      else {
        uint64_t v11 = 35092LL;
      }
      ContextHarvester::harvestQueryObject((GPUTools::FB::Stream **)this, v11, *(v9 - 1), v6, v7);
      v9 += 2;
      v10 -= 8LL;
    }

    while (v10);
  }

  ContextHarvester::encodeCommand(this, 4294955016LL, 0, v6, v7);
}

void sub_15EF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
}

void ContextHarvester::harvestXfbObjects( ContextHarvester *this, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  if (!*((void *)this + 65)) {
    __assert_rtn("void ContextHarvester::harvestXfbObjects()", (const char *)&unk_1F0B16, 0, "_xfbObjects.valid()");
  }
  ContextHarvester::encodeCommand( this,  4294955015LL,  3u,  a4,  a5,  65028LL,  kDYStateGroupXfbs,  65030LL,  0LL,  65030LL,  0LL);
  ContextHarvester::harvestXfbObject(this, 0LL);
  uint64_t v8 = **((unsigned int **)this + 65);
  if ((_DWORD)v8)
  {
    uint64_t v9 = (unsigned int *)*((void *)this + 66);
    uint64_t v10 = 8 * v8;
    do
    {
      ContextHarvester::harvestXfbObject(this, *v9);
      v9 += 2;
      v10 -= 8LL;
    }

    while (v10);
  }

  ContextHarvester::encodeCommand(this, 4294955016LL, 0, v6, v7);
}

void sub_15FD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
}

void sub_15FEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
}

void ContextHarvester::harvestFenceObjects(unsigned int **this, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v8 = this[55];
  if (!v8) {
    __assert_rtn("void ContextHarvester::harvestFenceObjects()", (const char *)&unk_1F0B16, 0, "_fenceObjects.valid()");
  }
  uint64_t v9 = *v8;
  if ((_DWORD)v9)
  {
    uint64_t v10 = this[56];
    uint64_t v11 = 8 * v9;
    do
    {
      ContextHarvester::encodeCommand((ContextHarvester *)this, 538LL, 1u, v6, v7, 5125LL, *v10);
      v10 += 2;
      v11 -= 8LL;
    }

    while (v11);
  }

  ContextHarvester::encodeCommand((ContextHarvester *)this, 4294955016LL, 0, v6, v7);
}

void sub_160D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
}

void sub_160E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
}

void ContextHarvester::encodeCurrentProgramAndBoundPipeline(ContextHarvester *this)
{
  if (*(_DWORD *)(*((void *)this + 2) + 3456LL) != 1)
  {
    (*(void (**)(void, uint64_t, unsigned int *))(*((void *)this + 4) + 832LL))( *(void *)(*((void *)this + 3) + 16LL),  35725LL,  &v5);
    ContextHarvester::encode(this, 645LL, 128LL, "Cul", **((void **)this + 2), v5);
    if (*(_BYTE *)(*((void *)this + 2) + 4846LL))
    {
      (*(void (**)(void, uint64_t, unsigned int *))(*((void *)this + 4) + 832LL))( *(void *)(*((void *)this + 3) + 16LL),  33370LL,  &v4);
      uint64_t v2 = v4;
      if (v4
        && !(*(unsigned int (**)(void, void))(*((void *)this + 4) + 6600LL))( *(void *)(*((void *)this + 3) + 16LL),  v4))
      {
        uint64_t v3 = (GPUTools::FB::Fbuf *)(&stru_4C0 + 66);
      }

      else
      {
        uint64_t v3 = 0LL;
      }

      ContextHarvester::encodeWithError(this, 887LL, 128LL, v3, "Cui", **((void **)this + 2), v2);
    }
  }

void ContextHarvester::restoreTextureUnitBindings(ContextHarvester *this, int a2)
{
  if (*(_DWORD *)(*((void *)this + 2) + 3444LL))
  {
    uint64_t v4 = 0LL;
    uint64_t v5 = 128LL;
    do
    {
      (*(void (**)(void, void))(*((void *)this + 4) + 2736LL))( *(void *)(*((void *)this + 3) + 16LL),  (v4 + 33984));
      if (a2)
      {
        if ((_DWORD)v4) {
          ContextHarvester::encode( this,  4294955015LL,  0LL,  "CSuwuw",  **((void **)this + 2),  kDYStateGroupTextureBindings,  v4,  0LL);
        }
        ContextHarvester::encode( this,  4294955013LL,  128LL,  "Ceui",  **((void **)this + 2),  *(unsigned int *)(*((void *)this + 2) + 3448LL),  v4);
        ContextHarvester::encode(this, 2LL, 128LL, "Ce", **((void **)this + 2), (v4 + 33984));
      }

      uint64_t v7 = *((void *)this + 2);
      uint64_t v8 = *(int **)(v7 + 3408);
      uint64_t v9 = *(int **)(v7 + 3416);
      if (v8 != v9)
      {
        if ((_DWORD)v4)
        {
          if ((a2 & 1) != 0)
          {
            do
            {
              uint64_t v20 = *v8;
              uint64_t bound_texture = wrapper_cache_get_bound_texture(*((ContextInfo **)this + 2), v4, *v8);
              if (!(_DWORD)bound_texture
                || (*(unsigned int (**)(void, uint64_t))(*((void *)this + 4) + 1160LL))( *(void *)(*((void *)this + 3) + 16LL),  bound_texture))
              {
                unsigned int v19 = 0LL;
              }

              else
              {
                unsigned int v19 = (GPUTools::FB::Fbuf *)(&stru_4C0 + 66);
              }

              ContextHarvester::encodeWithError( this,  20LL,  v5,  v19,  "Ceui",  **((void **)this + 2),  v20,  bound_texture);
              ++v8;
            }

            while (v8 != v9);
          }

          else
          {
            do
            {
              int v10 = *v8++;
              wrapper_cache_get_bound_texture(*((ContextInfo **)this + 2), v4, v10);
            }

            while (v8 != v9);
          }
        }

        else
        {
          do
          {
            uint64_t v13 = *v8;
            uint64_t v14 = wrapper_cache_get_bound_texture(*((ContextInfo **)this + 2), 0, *v8);
            uint64_t v15 = v14;
            if (a2)
            {
              if ((_DWORD)v14
                && !(*(unsigned int (**)(void, uint64_t))(*((void *)this + 4) + 1160LL))( *(void *)(*((void *)this + 3) + 16LL),  v14))
              {
                uint64_t v16 = (GPUTools::FB::Fbuf *)(&stru_4C0 + 66);
              }

              else
              {
                uint64_t v16 = 0LL;
              }

              ContextHarvester::encodeWithError(this, 20LL, v5, v16, "Ceui", **((void **)this + 2), v13, v15);
            }

            memset(v22, 0, 15);
            GPUTools::GL::DYGetTextureTargetInfo(v13, v22);
            uint64_t v17 = *((void *)this + 4);
            uint64_t v18 = *(void (**)(void, uint64_t, uint64_t))(v17 + 40);
            (*(void (**)(void, void, int *))(v17 + 832))( *(void *)(*((void *)this + 3) + 16LL),  v22[1],  &v23);
            if (v23 != (_DWORD)v15) {
              v18(*(void *)(*((void *)this + 3) + 16LL), v13, v15);
            }
            ++v8;
          }

          while (v8 != v9);
        }
      }

      uint64_t v6 = *((void *)this + 2);
      if ((a2 & 1) != 0)
      {
        if (*(_BYTE *)(v6 + 4865))
        {
          (*(void (**)(void, uint64_t, unsigned int *))(*((void *)this + 4) + 832LL))( *(void *)(*((void *)this + 3) + 16LL),  35097LL,  v22);
          uint64_t v11 = v22[0];
          if (v22[0]
            && !(*(unsigned int (**)(void, void))(*((void *)this + 4) + 6416LL))( *(void *)(*((void *)this + 3) + 16LL),  v22[0]))
          {
            uint64_t v12 = (GPUTools::FB::Fbuf *)(&stru_4C0 + 66);
          }

          else
          {
            uint64_t v12 = 0LL;
          }

          ContextHarvester::encodeWithError(this, 850LL, v5, v12, "Cuiui", **((void **)this + 2), v4, v11);
          uint64_t v6 = *((void *)this + 2);
        }

        ContextHarvester::encode(this, 4294955014LL, 128LL, "C", *(void *)v6);
        uint64_t v6 = *((void *)this + 2);
        if ((_DWORD)v4)
        {
          ContextHarvester::encode(this, 4294955016LL, 0LL, "C", *(void *)v6);
          uint64_t v6 = *((void *)this + 2);
        }

        else
        {
          uint64_t v5 = 0LL;
        }
      }

      uint64_t v4 = (v4 + 1);
    }

    while (v4 < *(_DWORD *)(v6 + 3444));
  }

void ContextHarvester::restoreLegacyARBProgramBindings(ContextHarvester *this, int a2)
{
  if (is_extension_available(*((void *)this + 2), "GL_ARB_vertex_program"))
  {
    (*(void (**)(void, uint64_t, void))(*((void *)this + 4) + 3768LL))( *(void *)(*((void *)this + 3) + 16LL),  34336LL,  *((unsigned int *)this + 38));
    if (a2) {
      ContextHarvester::encodeCommandEx( this,  18LL,  0x80u,  2u,  v4,  v5,  v6,  529413LL,  34336LL,  5125LL,  *((unsigned int *)this + 38));
    }
  }

  if (is_extension_available(*((void *)this + 2), "GL_ARB_fragment_program"))
  {
    (*(void (**)(void, uint64_t, void))(*((void *)this + 4) + 3768LL))( *(void *)(*((void *)this + 3) + 16LL),  34820LL,  *((unsigned int *)this + 39));
    if (a2) {
      ContextHarvester::encodeCommandEx( this,  18LL,  0x80u,  2u,  v7,  v8,  v9,  529413LL,  34820LL,  5125LL,  *((unsigned int *)this + 39));
    }
  }

void ContextHarvester::encodeBufferBindings(ContextHarvester *this)
{
  uint64_t v2 = (char *)this + 64;
  unsigned int v9 = 34962;
  int v10 = &v9;
  if (*((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned int,BOOL>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,BOOL>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>( (uint64_t)this + 64,  &v9,  (uint64_t)&std::piecewise_construct,  &v10)
       + 20))
    uint64_t v3 = 0LL;
  else {
    uint64_t v3 = (GPUTools::FB::Fbuf *)(&stru_4C0 + 66);
  }
  ContextHarvester::encodeWithError( this,  12LL,  128LL,  v3,  "Ceui",  **((void **)this + 2),  34962LL,  *(unsigned int *)(*((void *)this + 2) + 2032LL));
  unsigned int v9 = 34963;
  int v10 = &v9;
  if (*((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned int,BOOL>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,BOOL>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>( (uint64_t)v2,  &v9,  (uint64_t)&std::piecewise_construct,  &v10)
       + 20))
    char v4 = 0LL;
  else {
    char v4 = (GPUTools::FB::Fbuf *)(&stru_4C0 + 66);
  }
  ContextHarvester::encodeWithError( this,  12LL,  128LL,  v4,  "Ceui",  **((void **)this + 2),  34963LL,  *(unsigned int *)(*((void *)this + 2) + 2036LL));
  if (*(int *)(*((void *)this + 2) + 3460LL) >= 3)
  {
    unsigned int v9 = 36662;
    int v10 = &v9;
    if (*((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned int,BOOL>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,BOOL>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>( (uint64_t)v2,  &v9,  (uint64_t)&std::piecewise_construct,  &v10)
         + 20))
      uint64_t v5 = 0LL;
    else {
      uint64_t v5 = (GPUTools::FB::Fbuf *)(&stru_4C0 + 66);
    }
    ContextHarvester::encodeWithError( this,  12LL,  128LL,  v5,  "Ceui",  **((void **)this + 2),  36662LL,  *(unsigned int *)(*((void *)this + 2) + 2048LL));
    unsigned int v9 = 36663;
    int v10 = &v9;
    if (*((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned int,BOOL>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,BOOL>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>( (uint64_t)v2,  &v9,  (uint64_t)&std::piecewise_construct,  &v10)
         + 20))
      uint64_t v6 = 0LL;
    else {
      uint64_t v6 = (GPUTools::FB::Fbuf *)(&stru_4C0 + 66);
    }
    ContextHarvester::encodeWithError( this,  12LL,  128LL,  v6,  "Ceui",  **((void **)this + 2),  36663LL,  *(unsigned int *)(*((void *)this + 2) + 2052LL));
    unsigned int v9 = 35982;
    int v10 = &v9;
    if (*((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned int,BOOL>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,BOOL>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>( (uint64_t)v2,  &v9,  (uint64_t)&std::piecewise_construct,  &v10)
         + 20))
      char v7 = 0LL;
    else {
      char v7 = (GPUTools::FB::Fbuf *)(&stru_4C0 + 66);
    }
    ContextHarvester::encodeWithError( this,  12LL,  128LL,  v7,  "Ceui",  **((void **)this + 2),  35982LL,  *(unsigned int *)(*((void *)this + 2) + 2060LL));
    unsigned int v9 = 35345;
    int v10 = &v9;
    if (*((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned int,BOOL>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,BOOL>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>( (uint64_t)v2,  &v9,  (uint64_t)&std::piecewise_construct,  &v10)
         + 20))
      uint64_t v8 = 0LL;
    else {
      uint64_t v8 = (GPUTools::FB::Fbuf *)(&stru_4C0 + 66);
    }
    ContextHarvester::encodeWithError( this,  12LL,  128LL,  v8,  "Ceui",  **((void **)this + 2),  35345LL,  *(unsigned int *)(*((void *)this + 2) + 2064LL));
  }

void ContextHarvester::harvestGlobalState(ContextHarvester *this)
{
  vm_size_t v2 = 3 * vm_page_size;
  uint64_t v5 = ((*((void *)this + 67) + *((void *)this + 72) - 1LL) & -*((void *)this + 72)) - *((void *)this + 67);
  *((void *)this + 70) = v5;
  *((void *)this + 71) = v5;
  unsigned int v157 = 0;
  if (*(_BYTE *)(*((void *)this + 2) + 4858LL)) {
    (*(void (**)(void, uint64_t, unsigned int *))(*((void *)this + 4) + 832LL))( *(void *)(*((void *)this + 3) + 16LL),  2976LL,  &v157);
  }
  v156 = this;
  ContextHarvester::encodeCommand( this,  4294955015LL,  3u,  v3,  v4,  65028LL,  kDYStateGroupGlobalState,  65030LL,  0LL,  65030LL,  0LL);
  uint64_t v6 = *((void *)this + 2);
  if (!*(_BYTE *)(v6 + 4844)
    || ((*(unsigned int (**)(void, uint64_t))(*((void *)this + 4) + 1144LL))( *(void *)(*((void *)this + 3) + 16LL),  34370LL)
      ? (uint64_t v9 = 151LL)
      : (uint64_t v9 = 134LL),
        ContextHarvester::encodeCommand(this, v9, 1u, v7, v8, 529413LL, 34370LL),
        uint64_t v6 = *((void *)this + 2),
        *(_DWORD *)(v6 + 3456)))
  {
    goto LABEL_10;
  }

  if ((*(unsigned int (**)(void, uint64_t))(*((void *)this + 4) + 1144LL))( *(void *)(*((void *)this + 3) + 16LL),  34371LL))
  {
    uint64_t v19 = 151LL;
  }

  else
  {
    uint64_t v19 = 134LL;
  }

  ContextHarvester::encodeCommand(this, v19, 1u, v17, v18, 529413LL, 34371LL);
  uint64_t v6 = *((void *)this + 2);
  if (*(int *)(v6 + 3460) >= 3)
  {
LABEL_10:
    int v10 = *(unsigned __int8 *)(v6 + 4844);
    uint64_t v11 = *(unsigned int (**)(uint64_t, uint64_t))(*((void *)this + 4) + 1144LL);
    uint64_t v12 = *(void *)(*((void *)this + 3) + 16LL);
    if (v10)
    {
      if (v11(v12, 36765LL)) {
        uint64_t v15 = 151LL;
      }
      else {
        uint64_t v15 = 134LL;
      }
      ContextHarvester::encodeCommand(this, v15, 1u, v13, v14, 529413LL, 36765LL);
      ContextHarvester::getGlobalState( this,  36766LL,  5125,  1LL,  v16,  *(void (**)(__GLIContextRec *, unsigned int, void *))(*((void *)this + 4) + 832LL),  866LL,  1,  0);
    }

    else
    {
      if (v11(v12, 36201LL)) {
        uint64_t v22 = 151LL;
      }
      else {
        uint64_t v22 = 134LL;
      }
      ContextHarvester::encodeCommand(this, v22, 1u, v20, v21, 529413LL, 36201LL);
    }
  }

LABEL_42:
  if (*(int *)(v28 + 3460) >= 3)
  {
    if ((*(unsigned int (**)(void, uint64_t))(*((void *)this + 4) + 1144LL))( *(void *)(*((void *)this + 3) + 16LL),  35977LL))
    {
      uint64_t v39 = 151LL;
    }

    else
    {
      uint64_t v39 = 134LL;
    }

    ContextHarvester::encodeCommand(this, v39, 1u, v37, v38, 529413LL, 35977LL);
    uint64_t v28 = *((void *)this + 2);
  }

  if (*(_BYTE *)(v28 + 4844) || *(_DWORD *)(v28 + 3456) == 1)
  {
    ContextHarvester::getGlobalState( this,  2833LL,  5126,  1LL,  v27,  *(void (**)(__GLIContextRec *, unsigned int, void *))(*((void *)this + 4) + 824LL),  448LL,  1,  0);
    ContextHarvester::getGlobalState( this,  33064LL,  5126,  1LL,  v40,  *(void (**)(__GLIContextRec *, unsigned int, void *))(*((void *)this + 4) + 824LL),  444LL,  2,  0);
    uint64_t v28 = *((void *)this + 2);
    if (*(_BYTE *)(v28 + 4844))
    {
      ContextHarvester::getGlobalState( this,  36000LL,  529413,  1LL,  v27,  *(void (**)(__GLIContextRec *, unsigned int, void *))(*((void *)this + 4) + 832LL),  446LL,  2,  0);
      uint64_t v28 = *((void *)this + 2);
    }
  }

  if (*(_DWORD *)(v28 + 3456) <= 1u)
  {
    if ((*(unsigned int (**)(void, uint64_t))(*((void *)this + 4) + 1144LL))( *(void *)(*((void *)this + 3) + 16LL),  2832LL))
    {
      uint64_t v43 = 151LL;
    }

    else
    {
      uint64_t v43 = 134LL;
    }

    ContextHarvester::encodeCommand(this, v43, 1u, v41, v42, 529413LL, 2832LL);
    if ((*(unsigned int (**)(void, uint64_t))(*((void *)this + 4) + 1144LL))( *(void *)(*((void *)this + 3) + 16LL),  34913LL))
    {
      uint64_t v46 = 151LL;
    }

    else
    {
      uint64_t v46 = 134LL;
    }

    ContextHarvester::encodeCommand(this, v46, 1u, v44, v45, 529413LL, 34913LL);
    ContextHarvester::getGlobalState( this,  33062LL,  5126,  1LL,  v47,  *(void (**)(__GLIContextRec *, unsigned int, void *))(*((void *)this + 4) + 824LL),  444LL,  2,  0);
    ContextHarvester::getGlobalState( this,  33063LL,  5126,  1LL,  v48,  *(void (**)(__GLIContextRec *, unsigned int, void *))(*((void *)this + 4) + 824LL),  444LL,  2,  0);
    (*(void (**)(void, uint64_t, void))(*((void *)this + 4) + 824LL))( *(void *)(*((void *)this + 3) + 16LL),  33065LL,  *((void *)this + 70) + *((void *)this + 67));
    ContextHarvester::encodeCommand( this,  445LL,  2u,  v49,  v50,  529413LL,  33065LL,  136198LL,  3LL,  *((void *)this + 70) + *((void *)this + 67));
  }

  ContextHarvester::getGlobalState( this,  2849LL,  5126,  1LL,  v27,  *(void (**)(__GLIContextRec *, unsigned int, void *))(*((void *)this + 4) + 824LL),  348LL,  1,  0);
  uint64_t v51 = *((void *)this + 2);
  if (*(_BYTE *)(v51 + 4844) || *(_DWORD *)(v51 + 3456) == 1)
  {
    if ((*(unsigned int (**)(void, uint64_t))(*((void *)this + 4) + 1144LL))( *(void *)(*((void *)this + 3) + 16LL),  2848LL))
    {
      uint64_t v54 = 151LL;
    }

    else
    {
      uint64_t v54 = 134LL;
    }

    ContextHarvester::encodeCommand(this, v54, 1u, v52, v53, 529413LL, 2848LL);
  }

  if ((*(unsigned int (**)(void, uint64_t))(*((void *)this + 4) + 1144LL))( *(void *)(*((void *)this + 3) + 16LL),  2884LL))
  {
    uint64_t v57 = 151LL;
  }

  else
  {
    uint64_t v57 = 134LL;
  }

  ContextHarvester::encodeCommand(this, v57, 1u, v55, v56, 529413LL, 2884LL);
  ContextHarvester::getGlobalState( this,  2885LL,  529413,  1LL,  v58,  *(void (**)(__GLIContextRec *, unsigned int, void *))(*((void *)this + 4) + 832LL),  118LL,  1,  0);
  ContextHarvester::getGlobalState( this,  2886LL,  529413,  1LL,  v59,  *(void (**)(__GLIContextRec *, unsigned int, void *))(*((void *)this + 4) + 832LL),  199LL,  1,  0);
  (*(void (**)(void, uint64_t, float *))(*((void *)this + 4) + 824LL))( *(void *)(*((void *)this + 3) + 16LL),  32824LL,  &v158);
  (*(void (**)(void, uint64_t, float *))(*((void *)this + 4) + 824LL))( *(void *)(*((void *)this + 3) + 16LL),  10752LL,  &v155);
  ContextHarvester::encode(this, 450LL, 0LL, "Cff", **((void **)this + 2), v158, v155);
  if ((*(unsigned int (**)(void, uint64_t))(*((void *)this + 4) + 1144LL))( *(void *)(*((void *)this + 3) + 16LL),  32823LL))
  {
    uint64_t v62 = 151LL;
  }

  else
  {
    uint64_t v62 = 134LL;
  }

  ContextHarvester::encodeCommand(this, v62, 1u, v60, v61, 529413LL, 32823LL);
  if (*(_BYTE *)(*((void *)this + 2) + 4844LL))
  {
    if ((*(unsigned int (**)(void, uint64_t))(*((void *)this + 4) + 1144LL))( *(void *)(*((void *)this + 3) + 16LL),  10753LL))
    {
      uint64_t v65 = 151LL;
    }

    else
    {
      uint64_t v65 = 134LL;
    }

    ContextHarvester::encodeCommand(this, v65, 1u, v63, v64, 529413LL, 10753LL);
    if ((*(unsigned int (**)(void, uint64_t))(*((void *)this + 4) + 1144LL))( *(void *)(*((void *)this + 3) + 16LL),  10754LL))
    {
      uint64_t v68 = 151LL;
    }

    else
    {
      uint64_t v68 = 134LL;
    }

    ContextHarvester::encodeCommand(this, v68, 1u, v66, v67, 529413LL, 10754LL);
    if ((*(unsigned int (**)(void, uint64_t))(*((void *)this + 4) + 1144LL))( *(void *)(*((void *)this + 3) + 16LL),  2881LL))
    {
      uint64_t v71 = 151LL;
    }

    else
    {
      uint64_t v71 = 134LL;
    }

    ContextHarvester::encodeCommand(this, v71, 1u, v69, v70, 529413LL, 2881LL);
    (*(void (**)(void, uint64_t, float *))(*((void *)this + 4) + 832LL))( *(void *)(*((void *)this + 3) + 16LL),  2880LL,  &v158);
    ContextHarvester::encode(this, 449LL, 0LL, "Cee", **((void **)this + 2), 1032LL, LODWORD(v158));
  }

  if ((*(unsigned int (**)(void, uint64_t))(*((void *)this + 4) + 1144LL))( *(void *)(*((void *)this + 3) + 16LL),  32926LL))
  {
    uint64_t v74 = 151LL;
  }

  else
  {
    uint64_t v74 = 134LL;
  }

  ContextHarvester::encodeCommand(this, v74, 1u, v72, v73, 529413LL, 32926LL);
  if ((*(unsigned int (**)(void, uint64_t))(*((void *)this + 4) + 1144LL))( *(void *)(*((void *)this + 3) + 16LL),  32928LL))
  {
    uint64_t v77 = 151LL;
  }

  else
  {
    uint64_t v77 = 134LL;
  }

  ContextHarvester::encodeCommand(this, v77, 1u, v75, v76, 529413LL, 32928LL);
  (*(void (**)(void, uint64_t, float *))(*((void *)this + 4) + 824LL))( *(void *)(*((void *)this + 3) + 16LL),  32938LL,  &v158);
  (*(void (**)(void, uint64_t, float *))(*((void *)this + 4) + 792LL))( *(void *)(*((void *)this + 3) + 16LL),  32939LL,  &v155);
  ContextHarvester::encodeCommand(this, 514LL, 2u, v78, v79, 5126LL, v158, 35670LL, LOBYTE(v155));
  uint64_t v80 = *((void *)this + 2);
  if (*(_BYTE *)(v80 + 4844) || (int v81 = *(_DWORD *)(v80 + 3456), v81 == 1))
  {
    if ((*(unsigned int (**)(void, uint64_t))(*((void *)this + 4) + 1144LL))( *(void *)(*((void *)this + 3) + 16LL),  32925LL))
    {
      uint64_t v84 = 151LL;
    }

    else
    {
      uint64_t v84 = 134LL;
    }

    ContextHarvester::encodeCommand(this, v84, 1u, v82, v83, 529413LL, 32925LL);
    if ((*(unsigned int (**)(void, uint64_t))(*((void *)this + 4) + 1144LL))( *(void *)(*((void *)this + 3) + 16LL),  32927LL))
    {
      uint64_t v87 = 151LL;
    }

    else
    {
      uint64_t v87 = 134LL;
    }

    ContextHarvester::encodeCommand(this, v87, 1u, v85, v86, 529413LL, 32927LL);
    int v81 = *(_DWORD *)(*((void *)this + 2) + 3456LL);
  }

  if (v81 == 3)
  {
    uint64_t v90 = (*(unsigned int (**)(void, uint64_t))(*((void *)this + 4) + 1144LL))( *(void *)(*((void *)this + 3) + 16LL),  36433LL)
        ? 151LL
        : 134LL;
    ContextHarvester::encodeCommand(this, v90, 1u, v88, v89, 529413LL, 36433LL);
    (*(void (**)(void, uint64_t, float *))(*((void *)this + 4) + 832LL))( *(void *)(*((void *)this + 3) + 16LL),  36441LL,  &v158);
    if (v158 != 0.0)
    {
      uint64_t v91 = 0LL;
      do
      {
        (*(void (**)(void, uint64_t, uint64_t, float *))(*((void *)this + 4) + 5600LL))( *(void *)(*((void *)this + 3) + 16LL),  36434LL,  v91,  &v155);
        ContextHarvester::encode(this, 847LL, 0LL, "Cuiui", **((void **)this + 2), v91, LODWORD(v155));
        uint64_t v91 = (v91 + 1);
      }

      while (v91 < LODWORD(v158));
    }
  }

  if ((*(unsigned int (**)(void, uint64_t))(*((void *)this + 4) + 1144LL))( *(void *)(*((void *)this + 3) + 16LL),  3089LL))
  {
    uint64_t v94 = 151LL;
  }

  else
  {
    uint64_t v94 = 134LL;
  }

  ContextHarvester::encodeCommand(this, v94, 1u, v92, v93, 529413LL, 3089LL);
  ContextHarvester::getGlobalState( this,  3088LL,  5124,  4LL,  v95,  *(void (**)(__GLIContextRec *, unsigned int, void *))(*((void *)this + 4) + 832LL),  518LL,  4,  0);
  if ((*(unsigned int (**)(void, uint64_t))(*((void *)this + 4) + 1144LL))( *(void *)(*((void *)this + 3) + 16LL),  2929LL))
  {
    uint64_t v98 = 151LL;
  }

  else
  {
    uint64_t v98 = 134LL;
  }

  ContextHarvester::encodeCommand(this, v98, 1u, v96, v97, 529413LL, 2929LL);
  ContextHarvester::getGlobalState( this,  2932LL,  529412,  1LL,  v99,  *(void (**)(__GLIContextRec *, unsigned int, void *))(*((void *)this + 4) + 832LL),  130LL,  1,  0);
  if ((*(unsigned int (**)(void, uint64_t))(*((void *)this + 4) + 1144LL))( *(void *)(*((void *)this + 3) + 16LL),  2960LL))
  {
    uint64_t v102 = 151LL;
  }

  else
  {
    uint64_t v102 = 134LL;
  }

  ContextHarvester::encodeCommand(this, v102, 1u, v100, v101, 529413LL, 2960LL);
  (*(void (**)(void, uint64_t, float *))(*((void *)this + 4) + 832LL))( *(void *)(*((void *)this + 3) + 16LL),  2962LL,  &v158);
  (*(void (**)(void, uint64_t, float *))(*((void *)this + 4) + 832LL))( *(void *)(*((void *)this + 3) + 16LL),  2967LL,  &v155);
  (*(void (**)(void, uint64_t, unsigned int *))(*((void *)this + 4) + 832LL))( *(void *)(*((void *)this + 3) + 16LL),  2963LL,  &v154);
  (*(void (**)(void, uint64_t, unsigned int *))(*((void *)this + 4) + 832LL))( *(void *)(*((void *)this + 3) + 16LL),  2964LL,  &v153);
  (*(void (**)(void, uint64_t, unsigned int *))(*((void *)this + 4) + 832LL))( *(void *)(*((void *)this + 3) + 16LL),  2965LL,  &v152);
  (*(void (**)(void, uint64_t, unsigned int *))(*((void *)this + 4) + 832LL))( *(void *)(*((void *)this + 3) + 16LL),  2966LL,  &v151);
  int v103 = (uint64_t *)*((void *)this + 2);
  int v104 = *((_DWORD *)v103 + 864);
  uint64_t v105 = *v103;
  if (v104 == 1)
  {
    ContextHarvester::encode(this, 541LL, 0LL, "Ceiui", v105, LODWORD(v158), LODWORD(v155), v154);
    ContextHarvester::encode(this, 546LL, 0LL, "Ceee", **((void **)this + 2), v153, v152, v151);
  }

  else
  {
    ContextHarvester::encode(this, 542LL, 0LL, "Ceeiui", v105, 1028LL, LODWORD(v158), LODWORD(v155), v154);
    ContextHarvester::encode(this, 547LL, 0LL, "Ceeee", **((void **)this + 2), 1028LL, v153, v152, v151);
    (*(void (**)(void, uint64_t, float *))(*((void *)this + 4) + 832LL))( *(void *)(*((void *)this + 3) + 16LL),  34816LL,  &v158);
    (*(void (**)(void, uint64_t, float *))(*((void *)this + 4) + 832LL))( *(void *)(*((void *)this + 3) + 16LL),  36003LL,  &v155);
    (*(void (**)(void, uint64_t, unsigned int *))(*((void *)this + 4) + 832LL))( *(void *)(*((void *)this + 3) + 16LL),  36004LL,  &v154);
    (*(void (**)(void, uint64_t, unsigned int *))(*((void *)this + 4) + 832LL))( *(void *)(*((void *)this + 3) + 16LL),  34817LL,  &v153);
    (*(void (**)(void, uint64_t, unsigned int *))(*((void *)this + 4) + 832LL))( *(void *)(*((void *)this + 3) + 16LL),  34818LL,  &v152);
    (*(void (**)(void, uint64_t, unsigned int *))(*((void *)this + 4) + 832LL))( *(void *)(*((void *)this + 3) + 16LL),  34819LL,  &v151);
    ContextHarvester::encode( this,  542LL,  0LL,  "Ceeiui",  **((void **)this + 2),  1029LL,  LODWORD(v158),  LODWORD(v155),  v154);
    ContextHarvester::encode(this, 547LL, 0LL, "Ceeee", **((void **)this + 2), 1029LL, v153, v152, v151);
  }

  uint64_t v107 = *((void *)this + 2);
  if (*(_DWORD *)(v107 + 3456) <= 1u)
  {
    if ((*(unsigned int (**)(void, uint64_t))(*((void *)this + 4) + 1144LL))( *(void *)(*((void *)this + 3) + 16LL),  3008LL))
    {
      uint64_t v110 = 151LL;
    }

    else
    {
      uint64_t v110 = 134LL;
    }

    ContextHarvester::encodeCommand(this, v110, 1u, v108, v109, 529413LL, 3008LL);
    (*(void (**)(void, uint64_t, float *))(*((void *)this + 4) + 832LL))( *(void *)(*((void *)this + 3) + 16LL),  3009LL,  &v158);
    (*(void (**)(void, uint64_t, float *))(*((void *)this + 4) + 824LL))( *(void *)(*((void *)this + 3) + 16LL),  3010LL,  &v155);
    ContextHarvester::encode(this, 3LL, 0LL, "Cef", **((void **)this + 2), LODWORD(v158), v155);
    uint64_t v107 = *((void *)this + 2);
  }

  if (*(_BYTE *)(v107 + 4872))
  {
    if (*((_DWORD *)this + 27))
    {
      uint64_t v111 = 0LL;
      do
      {
        if ((*(unsigned int (**)(void, uint64_t, uint64_t))(*((void *)this + 4) + 5984LL))( *(void *)(*((void *)this + 3) + 16LL),  3042LL,  v111))
        {
          uint64_t v112 = 153LL;
        }

        else
        {
          uint64_t v112 = 136LL;
        }

        ContextHarvester::encode(this, v112, 0LL, "Ceui", **((void **)this + 2), 3042LL, v111);
        uint64_t v111 = (v111 + 1);
      }

      while (v111 < *((_DWORD *)this + 27));
    }
  }

  else
  {
    if ((*(unsigned int (**)(void, uint64_t))(*((void *)this + 4) + 1144LL))( *(void *)(*((void *)this + 3) + 16LL),  3042LL))
    {
      uint64_t v115 = 151LL;
    }

    else
    {
      uint64_t v115 = 134LL;
    }

    ContextHarvester::encodeCommand(this, v115, 1u, v113, v114, 529413LL, 3042LL);
  }

  uint64_t v116 = *((void *)this + 2);
  if (*(_BYTE *)(v116 + 4869))
  {
    if ((*(unsigned int (**)(void, uint64_t))(*((void *)this + 4) + 1144LL))( *(void *)(*((void *)this + 3) + 16LL),  36281LL))
    {
      uint64_t v119 = 151LL;
    }

    else
    {
      uint64_t v119 = 134LL;
    }

    ContextHarvester::encodeCommand(this, v119, 1u, v117, v118, 529413LL, 36281LL);
    uint64_t v116 = *((void *)this + 2);
  }

  if ((*(_DWORD *)(v116 + 3456) == 1
     || (ContextHarvester::getGlobalState( this,  32773LL,  5126,  4LL,  v106,  *(void (**)(__GLIContextRec *, unsigned int, void *))(*((void *)this + 4) + 824LL),  23LL,  4,  0),  uint64_t v116 = *((void *)this + 2),  *(_DWORD *)(v116 + 3456) == 1))
    && !is_extension_available(v116, "GL_OES_blend_equation_separate"))
  {
    if (is_extension_available(*((void *)this + 2), "GL_OES_blend_subtract"))
    {
      (*(void (**)(void, uint64_t, float *))(*((void *)this + 4) + 832LL))( *(void *)(*((void *)this + 3) + 16LL),  32777LL,  &v158);
      ContextHarvester::encode(this, 24LL, 0LL, "Ce", **((void **)this + 2), LODWORD(v158));
    }
  }

  else
  {
    (*(void (**)(void, uint64_t, float *))(*((void *)this + 4) + 832LL))( *(void *)(*((void *)this + 3) + 16LL),  32777LL,  &v158);
    (*(void (**)(void, uint64_t, float *))(*((void *)this + 4) + 832LL))( *(void *)(*((void *)this + 3) + 16LL),  34877LL,  &v155);
    if (LODWORD(v158) == LODWORD(v155)) {
      ContextHarvester::encode(this, 24LL, 0LL, "Ce", **((void **)this + 2), LODWORD(v158));
    }
    else {
      ContextHarvester::encode(this, 25LL, 0LL, "Cee", **((void **)this + 2), LODWORD(v158), LODWORD(v155));
    }
  }

  uint64_t v120 = *((void *)this + 2);
  if (*(_DWORD *)(v120 + 3456) == 1 && !is_extension_available(v120, "GL_OES_blend_func_separate"))
  {
    (*(void (**)(void, uint64_t, float *))(*((void *)this + 4) + 832LL))( *(void *)(*((void *)this + 3) + 16LL),  3041LL,  &v158);
    (*(void (**)(void, uint64_t, float *))(*((void *)this + 4) + 832LL))( *(void *)(*((void *)this + 3) + 16LL),  3040LL,  &v155);
    ContextHarvester::encode(this, 26LL, 0LL, "Cee", **((void **)this + 2), LODWORD(v158), LODWORD(v155));
  }

  else
  {
    (*(void (**)(void, uint64_t, float *))(*((void *)this + 4) + 832LL))( *(void *)(*((void *)this + 3) + 16LL),  32969LL,  &v158);
    (*(void (**)(void, uint64_t, float *))(*((void *)this + 4) + 832LL))( *(void *)(*((void *)this + 3) + 16LL),  32971LL,  &v155);
    (*(void (**)(void, uint64_t, unsigned int *))(*((void *)this + 4) + 832LL))( *(void *)(*((void *)this + 3) + 16LL),  32968LL,  &v154);
    (*(void (**)(void, uint64_t, unsigned int *))(*((void *)this + 4) + 832LL))( *(void *)(*((void *)this + 3) + 16LL),  32970LL,  &v153);
    uint64_t v121 = **((void **)this + 2);
    if (LODWORD(v158) == LODWORD(v155) && v154 == v153) {
      ContextHarvester::encode(this, 26LL, 0LL, "Cee", v121, LODWORD(v158), v154);
    }
    else {
      ContextHarvester::encode(this, 27LL, 0LL, "Ceeee", v121, LODWORD(v158), v154, LODWORD(v155), v153);
    }
  }

  uint64_t v122 = *((void *)this + 2);
  if (*(_BYTE *)(v122 + 4844) || *(_DWORD *)(v122 + 3456) == 1)
  {
    if ((*(unsigned int (**)(void, uint64_t))(*((void *)this + 4) + 1144LL))( *(void *)(*((void *)this + 3) + 16LL),  3058LL))
    {
      uint64_t v125 = 151LL;
    }

    else
    {
      uint64_t v125 = 134LL;
    }

    ContextHarvester::encodeCommand(this, v125, 1u, v123, v124, 529413LL, 3058LL);
    ContextHarvester::getGlobalState( this,  3056LL,  529412,  1LL,  v126,  *(void (**)(__GLIContextRec *, unsigned int, void *))(*((void *)this + 4) + 832LL),  358LL,  1,  0);
  }

  if ((*(unsigned int (**)(void, uint64_t))(*((void *)this + 4) + 1144LL))( *(void *)(*((void *)this + 3) + 16LL),  3024LL))
  {
    uint64_t v129 = 151LL;
  }

  else
  {
    uint64_t v129 = 134LL;
  }

  ContextHarvester::encodeCommand(this, v129, 1u, v127, v128, 529413LL, 3024LL);
  ContextHarvester::getGlobalState( this,  3106LL,  5126,  4LL,  v130,  *(void (**)(__GLIContextRec *, unsigned int, void *))(*((void *)this + 4) + 824LL),  38LL,  4,  0);
  ContextHarvester::getGlobalState( this,  2931LL,  5126,  1LL,  v131,  *(void (**)(__GLIContextRec *, unsigned int, void *))(*((void *)this + 4) + 824LL),  761LL,  1,  0);
  ContextHarvester::getGlobalState( this,  2961LL,  5124,  1LL,  v132,  *(void (**)(__GLIContextRec *, unsigned int, void *))(*((void *)this + 4) + 832LL),  43LL,  1,  0);
  if (*(_BYTE *)(*((void *)this + 2) + 4871LL))
  {
    if (*((_DWORD *)this + 27))
    {
      uint64_t v134 = 0LL;
      do
      {
        (*(void (**)(void, uint64_t, uint64_t, float *))(*((void *)this + 4) + 5608LL))( *(void *)(*((void *)this + 3) + 16LL),  3107LL,  v134,  &v158);
        ContextHarvester::encode( this,  79LL,  0LL,  "Cuiubububub",  **((void **)this + 2),  v134,  LOBYTE(v158),  BYTE1(v158),  BYTE2(v158),  HIBYTE(v158));
        uint64_t v134 = (v134 + 1);
      }

      while (v134 < *((_DWORD *)this + 27));
    }
  }

  else
  {
    ContextHarvester::getGlobalState( this,  3107LL,  1053700,  4LL,  v133,  *(void (**)(__GLIContextRec *, unsigned int, void *))(*((void *)this + 4) + 832LL),  78LL,  4,  0);
  }

  ContextHarvester::getGlobalState( this,  2930LL,  1053700,  1LL,  v133,  *(void (**)(__GLIContextRec *, unsigned int, void *))(*((void *)this + 4) + 832LL),  131LL,  1,  0);
  if (*(_DWORD *)(*((void *)this + 2) + 3456LL) == 1)
  {
    ContextHarvester::getGlobalState( this,  2968LL,  1053700,  1LL,  v135,  *(void (**)(__GLIContextRec *, unsigned int, void *))(*((void *)this + 4) + 832LL),  544LL,  1,  0);
  }

  else
  {
    (*(void (**)(void, uint64_t, float *))(*((void *)this + 4) + 832LL))( *(void *)(*((void *)this + 3) + 16LL),  2968LL,  &v158);
    ContextHarvester::encode(this, 545LL, 0LL, "Ceui", **((void **)this + 2), 1028LL, LODWORD(v158));
    (*(void (**)(void, uint64_t, float *))(*((void *)this + 4) + 832LL))( *(void *)(*((void *)this + 3) + 16LL),  36005LL,  &v158);
    ContextHarvester::encode(this, 545LL, 0LL, "Ceui", **((void **)this + 2), 1029LL, LODWORD(v158));
  }

  uint64_t v137 = *((void *)this + 2);
  if (*(int *)(v137 + 3460) >= 2)
  {
    ContextHarvester::getGlobalState( this,  35723LL,  529412,  1LL,  v136,  *(void (**)(__GLIContextRec *, unsigned int, void *))(*((void *)this + 4) + 832LL),  309LL,  2,  0);
    uint64_t v137 = *((void *)this + 2);
  }

  if (*(_BYTE *)(v137 + 4844) || *(_DWORD *)(v137 + 3456) == 1)
  {
    ContextHarvester::getGlobalState( this,  3154LL,  529412,  1LL,  v136,  *(void (**)(__GLIContextRec *, unsigned int, void *))(*((void *)this + 4) + 832LL),  309LL,  2,  0);
    uint64_t v137 = *((void *)this + 2);
  }

  if (*(_BYTE *)(v137 + 4858))
  {
    ContextHarvester::getGlobalState( this,  3153LL,  529412,  1LL,  v136,  *(void (**)(__GLIContextRec *, unsigned int, void *))(*((void *)this + 4) + 832LL),  309LL,  2,  0);
    ContextHarvester::getGlobalState( this,  3156LL,  529412,  1LL,  v138,  *(void (**)(__GLIContextRec *, unsigned int, void *))(*((void *)this + 4) + 832LL),  309LL,  2,  0);
    ContextHarvester::getGlobalState( this,  3152LL,  529412,  1LL,  v139,  *(void (**)(__GLIContextRec *, unsigned int, void *))(*((void *)this + 4) + 832LL),  309LL,  2,  0);
    uint64_t v137 = *((void *)this + 2);
  }

  int v140 = *(void (**)(__GLIContextRec *, unsigned int, void *))(*((void *)this + 4) + 832LL);
  if (*(_BYTE *)(v137 + 4844))
  {
    ContextHarvester::getGlobalState(this, 3155LL, 529412, 1LL, v136, v140, 309LL, 2, 0);
    int v140 = *(void (**)(__GLIContextRec *, unsigned int, void *))(*((void *)this + 4) + 832LL);
    uint64_t v141 = 34031LL;
  }

  else
  {
    uint64_t v141 = 33170LL;
  }

  ContextHarvester::getGlobalState(this, v141, 529412, 1LL, v136, v140, 309LL, 2, 0);
  if (*(_BYTE *)(*((void *)this + 2) + 4858LL)) {
    ContextHarvester::harvestFixedFunctionGlobalState(this, v142, v143, v144, v145);
  }
  ContextHarvester::harvestExtensionsGlobalState(this);
  if (*(_BYTE *)(*((void *)this + 2) + 4858LL))
  {
    (*(void (**)(void, void))(*((void *)this + 4) + 1392LL))( *(void *)(*((void *)this + 3) + 16LL),  v157);
    ContextHarvester::encodeCommandEx(this, 376LL, 0x80u, 1u, v148, v149, v150, 529413LL, v157);
  }

  ContextHarvester::encodeCommand(v156, 4294955016LL, 0, v146, v147);
}

  uint64_t v21 = (const char *)((uint64_t (*)(void))dy_string_from_enum)();
  dy_abort("unknown framebuffer attachment type: %s", v21);
LABEL_43:
  uint64_t v22 = (const char *)dy_string_from_enum(v9);
  uint64_t v23 = (ContextHarvester *)dy_abort("unknown texture target: %s", v22);
  return ContextHarvester::harvestQueryObject(v23, v24, v25);
}

      uint64_t v54 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v49), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
      if ((_DWORD)v54) {
        uint64_t v54 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v81, v55);
      }
      uint64_t v57 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v14 + 3404);
      if ((_DWORD)v57) {
        uint64_t v54 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v81, v57, v56);
      }
      if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v54), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
        encode_driver_events((id *)v14, (uint64_t)v81);
      }
      unint64_t v58 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v14 + 3480),  (GPUTools::FB::Fbuf *)(v14 + 3520),  (GPUTools::FB *)v81);
      unint64_t v59 = *(unsigned int *)(v14 + 3404);
      if ((_DWORD)v59 && gBreakOnError)
      {
        char v72 = 3LL;
        uint64_t v73 = 0xFFFFFFFFLL;
      }

      else
      {
        if ((v48 & 2) == 0) {
          goto LABEL_51;
        }
        char v72 = 2LL;
        uint64_t v73 = 540LL;
      }

      breakpoint_break((uint64_t)v81, (volatile int *)v73, v72, v59, v14);
LABEL_51:
      char v60 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v58) defaultFbufStream];
      uint64_t v61 = (unsigned int *)((char *)v60 + 56);
      do
        uint64_t v62 = __ldaxr(v61);
      while (__stlxr(1u, v61));
      if (v62 == 1)
      {
        do
        {
          while (*v61 == 1)
            ;
          do
            char v63 = __ldaxr(v61);
          while (__stlxr(1u, v61));
        }

        while (v63 == 1);
      }

      GPUTools::FB::Stream::Write_nolock(v60, (GPUTools::FB::Fbuf *)v81, *(unsigned int *)v81[0], 1);
      atomic_store(0, v61);
      do
      {
        uint64_t v64 = __ldaxr(v15);
        uint64_t v65 = v64 - 1;
      }

      while (__stlxr(v65, v15));
      if (gCheckGLErrors) {
        char v66 = v65 < 1;
      }
      else {
        char v66 = 1;
      }
      if (!v66) {
        handle_opengl_thread_conflict((const void **)v14);
      }
      goto LABEL_64;
    }

    uint64_t v76 = a2;
    uint64_t v77 = v14;
    uint64_t v80 = a5;
    char v25 = (uint64_t)malloc(73LL * (int)a3);
    uint64_t v26 = (void *)v25;
    char v78 = a3;
    if ((int)a3 >= 1)
    {
      unint64_t v27 = v25 + 8LL * (int)a3;
      uint64_t v28 = a3;
      char v29 = v80;
      if (v80)
      {
        uint64_t v30 = (void *)v25;
        uint64_t v31 = a4;
        do
        {
          *uint64_t v30 = v27;
          char v33 = *v29++;
          unsigned int v32 = v33;
          uint64_t v34 = *v31;
          if (v33 < 0)
          {
            char v25 = strlen(*v31);
            unsigned int v32 = v25 + 1;
          }

          uint64_t v35 = DYGetGLGuestAppClient(v25);
          char v25 = GPUTools::Interpose::DYSavePointer(v35, v32, v34, v27, 65LL, 0LL, 1LL, 0LL, 0LL);
          ++v31;
          ++v30;
          v27 += 65LL;
          --v28;
        }

        while (v28);
        goto LABEL_34;
      }

      unint64_t v36 = (void *)v25;
      char v37 = a4;
      do
      {
        *unint64_t v36 = v27;
        uint64_t v38 = *v37;
        uint64_t v39 = strlen(*v37);
        unint64_t v40 = v39;
        char v41 = DYGetGLGuestAppClient(v39);
        GPUTools::Interpose::DYSavePointer(v41, v40 + 1, v38, v27, 65LL, 0LL, 1LL, 0LL, 0LL);
        ++v37;
        ++v36;
        v27 += 65LL;
        --v28;
      }

      while (v28);
    }

    if (!v80)
    {
      a3 = v78;
      snprintf((char *)(v14 + 4709), 0x40uLL, "Culi@%dU<cb>t");
      goto LABEL_36;
    }

void sub_18100( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
}

void sub_18114( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
}

void sub_18128( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
}

void sub_1813C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
}

void sub_18150( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_18194( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
}

void sub_181A8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
}

void sub_181BC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
}

void sub_181D0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
}

void sub_181E4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
}

void sub_181F8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
}

void sub_1820C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
}

void sub_18220( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
}

void sub_18234( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
}

void sub_18248( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
}

void sub_1825C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
}

void sub_18270( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
}

void sub_18284( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
}

void sub_18298( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
}

void sub_182AC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
}

void ContextHarvester::encodeCommand(ContextHarvester *this, uint64_t a2, unsigned int a3, char a4, uint64_t a5, ...)
{
}

void AutoStateGroup::~AutoStateGroup(ContextHarvester **this, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
}

void ContextHarvester::getARBProgramObject( ContextHarvester *this, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  char v41 = this;
  ContextHarvester::encodeCommand( this,  4294955015LL,  3u,  a4,  a5,  65028LL,  kDYStateGroupArbProgram,  65030LL,  a2,  65030LL,  a3);
  (*(void (**)(void, uint64_t, uint64_t))(*((void *)this + 4) + 3768LL))( *(void *)(*((void *)this + 3) + 16LL),  a2,  a3);
  ContextHarvester::encodeCommandEx(this, 18LL, 0x80u, 2u, v8, v9, v10, 529413LL, a2, 5125LL, a3);
  (*(void (**)(void, uint64_t, uint64_t, unsigned int *))(*((void *)this + 4) + 4256LL))( *(void *)(*((void *)this + 3) + 16LL),  a2,  34934LL,  &v40);
  (*(void (**)(void, uint64_t, uint64_t, unsigned int *))(*((void *)this + 4) + 4256LL))( *(void *)(*((void *)this + 3) + 16LL),  a2,  34343LL,  &v39);
  uint64_t v11 = (*(uint64_t (**)(void, uint64_t, uint64_t, unsigned int *))(*((void *)this + 4) + 4256LL))( *(void *)(*((void *)this + 3) + 16LL),  a2,  34996LL,  &v38);
  unint64_t v12 = v39;
  if (v39 && v40 == 34933)
  {
    if (*((void *)this + 68) < (unint64_t)v39
      && (GPUTools::VMBuffer::alloc((ContextHarvester *)((char *)this + 536), v39, 0LL) & 1) == 0)
    {
      goto LABEL_13;
    }

    uint64_t v13 = ((*((void *)this + 67) + *((void *)this + 72) - 1LL) & -*((void *)this + 72)) - *((void *)this + 67);
    *((void *)this + 70) = v13;
    *((void *)this + 71) = v13;
    uint64_t v14 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*((void *)this + 4) + 4248LL))( *(void *)(*((void *)this + 3) + 16LL),  a2,  34344LL);
    uint64_t v15 = v39;
    uint64_t v16 = *((void *)this + 67);
    uint64_t v17 = *((void *)this + 70);
    uint64_t v18 = *((void *)this + 1);
    uint64_t v19 = *((void *)this + 2);
    int v20 = *((unsigned __int8 *)this + 591);
    uint64_t v21 = DYGetGLGuestAppClient(v14);
    GPUTools::Interpose::DYSavePointer(v21, v15, v17 + v16, v19 + 4644, 65LL, v18, v20 != 0, 0LL, 0LL);
    ContextHarvester::encodeCommand( this,  468LL,  4u,  v22,  v23,  529413LL,  a2,  529413LL,  v40,  5125LL,  v39,  65025LL,  *((void *)this + 2) + 4644LL);
  }

  unsigned int v24 = v38;
  unint64_t v12 = 16LL * v38;
  if (*((void *)this + 68) < v12)
  {
    uint64_t v11 = GPUTools::VMBuffer::alloc((ContextHarvester *)((char *)this + 536), 16LL * v38, 0LL);
    if ((_DWORD)v11)
    {
      unsigned int v24 = v38;
      goto LABEL_9;
    }

LABEL_13:
    dy_abort("VMBuffer::resize failed: size=%lu", v12);
    __break(1u);
    return;
  }

    *(void *)a1 = v7;
    *(void *)(a1 + _Block_object_dispose(va, 8) = v7;
    *(void *)(a1 + 16) = v8;
    *(void *)(a1 + 24) = v8;
    if (v2) {
      operator delete(v2);
    }
  }

LABEL_9:
  uint64_t v25 = *((void *)this + 67);
  uint64_t v26 = (v25 + *((void *)this + 72) - 1) & -*((void *)this + 72);
  uint64_t v27 = v26 - v25;
  *((void *)this + 70) = v27;
  *((void *)this + 71) = v27;
  if (v24)
  {
    int v28 = 0;
    unint64_t v29 = 0LL;
    do
    {
      uint64_t v11 = (*(uint64_t (**)(void, uint64_t, unint64_t, uint64_t))(*((void *)this + 4) + 4232LL))( *(void *)(*((void *)this + 3) + 16LL),  a2,  v29++,  v26 + 4LL * (v28 & 0xFFFFFFFC));
      v28 += 4;
    }

    while (v29 < v38);
  }

  uint64_t v30 = *((void *)this + 1);
  uint64_t v31 = *((void *)this + 2);
  int v32 = *((unsigned __int8 *)this + 591);
  uint64_t v33 = DYGetGLGuestAppClient(v11);
  GPUTools::Interpose::DYSavePointer(v33, v12 & 0xFFFFFFF0, v26, v31 + 4644, 65LL, v30, v32 != 0, 0LL, 0LL);
  ContextHarvester::encodeCommand( this,  466LL,  4u,  v34,  v35,  529413LL,  a2,  5125LL,  0LL,  5124LL,  v38,  65025LL,  *((void *)this + 2) + 4644LL);
  ContextHarvester::encodeCommand(this, 4294955016LL, 0, v36, v37);
}

  uint64_t v10 = (void *)v7[1];
  uint64_t v9 = v7[2];
  if ((unint64_t)v10 >= v9)
  {
    unint64_t v12 = (void *)*v7;
    uint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v10 - *v7) >> 3);
    uint64_t v14 = v13 + 1;
    if (v13 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<ProgramShaderInfo>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (void)v12) >> 3);
    if (2 * v15 > v14) {
      uint64_t v14 = 2 * v15;
    }
    if (v15 >= 0x555555555555555LL) {
      uint64_t v16 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      uint64_t v16 = v14;
    }
    if (v16)
    {
      if (v16 > 0xAAAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v17 = (char *)operator new(24 * v16);
    }

    else
    {
      uint64_t v17 = 0LL;
    }

    uint64_t v18 = &v17[24 * v13];
    *(_OWORD *)uint64_t v18 = v21;
    *((void *)v18 + 2) = v22;
    uint64_t v11 = v18 + 24;
    if (v10 != v12)
    {
      do
      {
        uint64_t v19 = *(_OWORD *)(v10 - 3);
        *((void *)v18 - 1) = *(v10 - 1);
        *(_OWORD *)(v18 - 24) = v19;
        v18 -= 24;
        v10 -= 3;
      }

      while (v10 != v12);
      uint64_t v10 = (void *)*v7;
    }

    *char v7 = v18;
    v7[1] = v11;
    _DWORD v7[2] = &v17[24 * v16];
    if (v10) {
      operator delete(v10);
    }
  }

  else
  {
    _DWORD v10[2] = v22;
    *(_OWORD *)uint64_t v10 = v21;
    uint64_t v11 = v10 + 3;
  }

  v7[1] = v11;
  return GPUTools::DYLockUtils::Unlock((GPUTools::DYLockUtils *)&unk_207344, v6);
}

void sub_1867C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
}

void sub_18690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
}

void sub_186A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
}

void sub_186B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
}

void sub_186CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
}

void ContextHarvester::encodeCommandEx( ContextHarvester *this, uint64_t a2, unsigned int a3, unsigned int a4, char a5, uint64_t a6, uint64_t a7, ...)
{
}

void ContextHarvester::harvestObjectLabel(ContextHarvester *this, unsigned int a2, int a3)
{
  if (a3)
  {
    if (*(_BYTE *)(*((void *)this + 2) + 4855LL)) {
      (*(void (**)(void))(*((void *)this + 4) + 6520LL))(*(void *)(*((void *)this + 3) + 16LL));
    }
  }

void ContextHarvester::harvestGLSLProgramPipelines( ContextHarvester *this, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  if (!*((void *)this + 53)) {
    __assert_rtn( "void ContextHarvester::harvestGLSLProgramPipelines()",  (const char *)&unk_1F0B16,  0,  "_programPipelineObjects.valid()");
  }
  ContextHarvester::encodeCommand( this,  4294955015LL,  3u,  a4,  a5,  65028LL,  kDYStateGroupGLSLProgramPipelines,  65030LL,  0LL,  65030LL,  0LL);
  uint64_t v9 = **((unsigned int **)this + 53);
  if ((_DWORD)v9)
  {
    uint64_t v10 = (unsigned int *)*((void *)this + 54);
    uint64_t v11 = 8 * v9;
    do
    {
      ContextHarvester::harvestGLSLProgramPipeline(this, *v10, v6, v7, v8);
      v10 += 2;
      v11 -= 8LL;
    }

    while (v11);
  }

  ContextHarvester::encodeCommand(this, 4294955016LL, 0, v7, v8);
}

void sub_18908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
}

void ___ZN16ContextHarvester42harvestGLSLProgramActiveAttributeLocationsEj_block_invoke( uint64_t a1, uint64_t a2)
{
}

void ContextHarvester::harvestGLSLProgramActiveFragDataLocations(ContextHarvester *this, uint64_t a2)
{
  uint64_t v2 = *((void *)this + 2);
  if (*(_DWORD *)(v2 + 3456) != 3) {
    return;
  }
  uint64_t v18 = (void *)a2;
  if ([*(id *)v2 getParameter:1709 to:&v18]) {
    return;
  }
  uint64_t v5 = v18;
  int v6 = *(_DWORD *)v18;
  char v7 = (char *)v18 + 4;
  do
  {
    size_t v10 = *(int *)v7;
    uint64_t v8 = v7 + 4;
    size_t v9 = v10;
    if ((v10 & 0x80000000) != 0) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v9 >= 0x17)
    {
      uint64_t v12 = (v9 & 0xFFFFFFFFFFFFFFF8LL) + 8;
      if ((v9 | 7) != 0x17) {
        uint64_t v12 = v9 | 7;
      }
      uint64_t v13 = v12 + 1;
      uint64_t v11 = (void **)operator new(v12 + 1);
      __dst[1] = (void *)v9;
      int64_t v17 = v13 | 0x8000000000000000LL;
      __dst[0] = v11;
LABEL_13:
      memmove(v11, v8, v9);
      goto LABEL_14;
    }

    HIBYTE(v17) = v9;
    uint64_t v11 = __dst;
    if ((_DWORD)v9) {
      goto LABEL_13;
    }
LABEL_14:
    *((_BYTE *)v11 + v9) = 0;
    if (v17 >= 0) {
      uint64_t v14 = __dst;
    }
    else {
      uint64_t v14 = (void **)__dst[0];
    }
    uint64_t v15 = (*(uint64_t (**)(void, uint64_t, void **))(*((void *)this + 4) + 5952LL))( *(void *)(*((void *)this + 3) + 16LL),  a2,  v14);
    ContextHarvester::encode(this, 16LL, 132LL, "CuiuicS", **((void **)this + 2), a2, v15, v14);
    if (SHIBYTE(v17) < 0) {
      operator delete(__dst[0]);
    }
    char v7 = &v8[v9];
    --v6;
  }

  while (v6);
  uint64_t v5 = v18;
LABEL_20:
  free(v5);
}

void sub_18AE0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ContextHarvester::harvestGLSLProgramFragDataLocations(ContextHarvester *this, uint64_t a2)
{
  uint64_t v2 = *((void *)this + 2);
  if (*(_DWORD *)(v2 + 3456) != 3) {
    return;
  }
  uint64_t v16 = (void *)a2;
  if ([*(id *)v2 getParameter:1708 to:&v16]) {
    return;
  }
  uint64_t v5 = v16;
  int v6 = *(_DWORD *)v16;
  char v7 = (int *)((char *)v16 + 4);
  do
  {
    size_t v8 = *v7;
    if ((v8 & 0x80000000) != 0) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = *(unsigned int *)((char *)v7 + v8 + 4);
    if (v8 >= 0x17)
    {
      uint64_t v11 = (v8 & 0xFFFFFFFFFFFFFFF8LL) + 8;
      if ((v8 | 7) != 0x17) {
        uint64_t v11 = v8 | 7;
      }
      uint64_t v12 = v11 + 1;
      size_t v10 = (void **)operator new(v11 + 1);
      __dst[1] = (void *)v8;
      int64_t v15 = v12 | 0x8000000000000000LL;
      __dst[0] = v10;
LABEL_13:
      memmove(v10, v7 + 1, v8);
      goto LABEL_14;
    }

    HIBYTE(v15) = *v7;
    size_t v10 = __dst;
    if ((_DWORD)v8) {
      goto LABEL_13;
    }
LABEL_14:
    *((_BYTE *)v10 + v_Block_object_dispose(va, 8) = 0;
    if (v15 >= 0) {
      uint64_t v13 = __dst;
    }
    else {
      uint64_t v13 = (void **)__dst[0];
    }
    ContextHarvester::encode(this, 16LL, 4LL, "CuiuicS", **((void **)this + 2), a2, v9, v13);
    if (SHIBYTE(v15) < 0) {
      operator delete(__dst[0]);
    }
    char v7 = (int *)((char *)v7 + v8 + 12);
    --v6;
  }

  while (v6);
  uint64_t v5 = v16;
LABEL_20:
  free(v5);
}

void sub_18C6C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ContextHarvester::encodeProgramXfbVaryings(ContextHarvester *this, uint64_t a2, const ProgramXfb *a3)
{
  uint64_t v4 = (uint64_t *)*((void *)a3 + 1);
  char v3 = (uint64_t *)*((void *)a3 + 2);
  if (v3 != v4)
  {
    if ((0xAAAAAAAAAAAAAAABLL * (v3 - v4)) >> 61) {
      std::vector<ProgramShaderInfo>::__throw_length_error[abi:ne180100]();
    }
    char v7 = (char *)operator new(0x5555555555555558LL * (v3 - v4));
    uint64_t v28 = a2;
    unint64_t v29 = this;
    __p = v7;
    int v32 = &v7[0x5555555555555558LL * (v3 - v4)];
    while (1)
    {
      uint64_t v9 = v4;
      if (*((char *)v4 + 23) < 0)
      {
        uint64_t v9 = (uint64_t *)*v4;
        size_t v10 = v32;
        if (v7 >= v32)
        {
LABEL_10:
          uint64_t v11 = (v7 - __p) >> 3;
          unint64_t v12 = v11 + 1;
          uint64_t v13 = v10 - __p;
          if (v13 >> 2 > v12) {
            unint64_t v12 = v13 >> 2;
          }
          else {
            unint64_t v14 = v12;
          }
          if (v14)
          {
            if (v14 >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            int64_t v15 = operator new(8 * v14);
            uint64_t v16 = &v15[8 * v11];
            int64_t v17 = &v15[8 * v14];
            *(void *)uint64_t v16 = v9;
            uint64_t v8 = (uint64_t)(v16 + 8);
            if (v7 != __p)
            {
LABEL_19:
              unint64_t v18 = v7 - 8 - __p;
              if (v18 < 0x168)
              {
                uint64_t v19 = v7;
                goto LABEL_21;
              }

              if (&v15[v7 - __p - 8 - (v18 & 0xFFFFFFFFFFFFFFF8LL)] > &v15[v7 - __p - 8])
              {
                uint64_t v19 = v7;
                goto LABEL_21;
              }

              if (&v7[-(v18 & 0xFFFFFFFFFFFFFFF8LL) - 8] > v7 - 8)
              {
                uint64_t v19 = v7;
                goto LABEL_21;
              }

              if ((unint64_t)(__p - v15) < 0x20)
              {
                uint64_t v19 = v7;
                goto LABEL_21;
              }

              uint64_t v21 = (v18 >> 3) + 1;
              uint64_t v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v19 = &v7[-v22];
              v16 -= v22;
              uint64_t v23 = &v15[8 * v11 - 16];
              unsigned int v24 = (__int128 *)(v7 - 16);
              uint64_t v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                __int128 v26 = *v24;
                *(v23 - 1) = *(v24 - 1);
                *uint64_t v23 = v26;
                v23 -= 2;
                v24 -= 2;
                v25 -= 4LL;
              }

              while (v25);
              if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
              {
                do
                {
LABEL_21:
                  uint64_t v20 = *((void *)v19 - 1);
                  v19 -= 8;
                  *((void *)v16 - 1) = v20;
                  v16 -= 8;
                }

                while (v19 != __p);
              }

              char v7 = __p;
              __p = v16;
              int v32 = v17;
              if (!v7) {
                goto LABEL_5;
              }
LABEL_26:
              operator delete(v7);
              goto LABEL_5;
            }
          }

          else
          {
            int64_t v15 = 0LL;
            uint64_t v16 = (char *)(8 * v11);
            int64_t v17 = 0LL;
            *(void *)(8 * v11) = v9;
            uint64_t v8 = 8 * v11 + 8;
            if (v7 != __p) {
              goto LABEL_19;
            }
          }

          __p = v16;
          int v32 = v17;
          goto LABEL_26;
        }
      }

      else
      {
        size_t v10 = v32;
        if (v7 >= v32) {
          goto LABEL_10;
        }
      }

      *(void *)char v7 = v9;
      uint64_t v8 = (uint64_t)(v7 + 8);
LABEL_5:
      v4 += 3;
      char v7 = (char *)v8;
      if (v4 == v3)
      {
        unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a3 + 2) - *((void *)a3 + 1)) >> 3);
        snprintf( (char *)(*((void *)v29 + 2) + 4709LL),  0x40uLL,  "Cuii@%uSe",  -1431655765 * ((uint64_t)(*((void *)a3 + 2) - *((void *)a3 + 1)) >> 3));
        ContextHarvester::encode( v29,  606LL,  128LL,  (const char *)(*((void *)v29 + 2) + 4709LL),  **((void **)v29 + 2),  v28,  v27,  __p,  *(unsigned int *)a3);
        if (__p) {
          operator delete(__p);
        }
        return;
      }
    }
  }

void sub_18F6C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ContextHarvester::encodeProgramParameters( ContextHarvester *this, uint64_t a2, const ProgramInfo *a3, const ProgramPipelineInfo *a4, uint64_t a5)
{
  size_t v10 = (void *)*((void *)this + 2);
  if (*((_BYTE *)v10 + 4846))
  {
    ContextHarvester::encode(this, 467LL, 128LL, "Cuiei", *v10, a2, 33368LL, *((_DWORD *)a4 + 34) & 1);
    size_t v10 = (void *)*((void *)this + 2);
  }

  if (*((_DWORD *)v10 + 864) == 4) {
    ContextHarvester::encode(this, 467LL, 128LL, "Cuiei", *v10, a2, 33367LL, (*((_DWORD *)a4 + 34) >> 1) & 1);
  }
  ContextHarvester::encodeCommand(this, 4294955016LL, 0, v8, v9);
}

void sub_1908C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
}

void sub_190A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
}

void ContextHarvester::harvestGLSLProgramUniform(uint64_t a1, uint64_t a2, void *a3)
{
  size_t v61 = *((int *)a3 + 4);
  int v5 = *(unsigned __int8 *)(v61 + *a3 - 1);
  BOOL v6 = v5 == 93;
  if (v5 == 93)
  {
    *strrchr((const char *)*a3, 91) = 0;
    size_t v61 = strlen((const char *)*a3);
  }

  GPUTools::GL::DYGetShaderVariableTypeInfo(*((unsigned int *)a3 + 6), &v64);
  int v7 = v64;
  int v9 = GPUTools::GL::dy_type_size((GPUTools::GL *)v65, v8);
  uint64_t v10 = *((int *)a3 + 5);
  uint64_t v62 = (v9 * v7);
  unint64_t v60 = v10 * v62;
  if (*(void *)(a1 + 544) < (unint64_t)(v10 * v62))
  {
    if (!GPUTools::VMBuffer::alloc((GPUTools::VMBuffer *)(a1 + 536), v60, 0LL))
    {
      dy_abort("VMBuffer::resize failed: size=%lu", v60);
LABEL_61:
      __break(1u);
      return;
    }

    LODWORD(v10) = *((_DWORD *)a3 + 5);
  }

  uint64_t v11 = *(void *)(a1 + 536);
  uint64_t v12 = (v11 + *(void *)(a1 + 576) - 1) & -*(void *)(a1 + 576);
  uint64_t v13 = v12 - v11;
  *(void *)(a1 + 560) = v13;
  *(void *)(a1 + 56_Block_object_dispose(va, 8) = v13;
  if ((int)v10 >= 1)
  {
    int v14 = 0;
    uint64_t v15 = 128LL;
    do
    {
      if (v14 || v6)
      {
        *(_BYTE *)(*a3 + v61) = 0;
        snprintf(__str, 0x20uLL, "[%d]", v14);
        strlcat((char *)*a3, __str, a3[1]);
      }

      uint64_t v16 = (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 32) + 5000LL))( *(void *)(*(void *)(a1 + 24) + 16LL),  a2,  *a3);
      uint64_t v19 = v16;
      BOOL v20 = (_DWORD)v16 != -1 || v14 != 0;
      if (v20 || v6)
      {
        if ((_DWORD)v16 == -1) {
          goto LABEL_35;
        }
      }

      else
      {
        *(_BYTE *)(*a3 + v61) = 0;
        snprintf(__str, 0x20uLL, "[%d]", 0);
        strlcat((char *)*a3, __str, a3[1]);
        uint64_t v19 = (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 32) + 5000LL))( *(void *)(*(void *)(a1 + 24) + 16LL),  a2,  *a3);
        BOOL v6 = v19 != -1;
        if ((_DWORD)v19 == -1)
        {
LABEL_35:
          if (*((_DWORD *)a3 + 9) == -1) {
            goto LABEL_32;
          }
        }
      }

      if (v14)
      {
        snprintf(__source, 0x28uLL, "u_%016lx_%u_%u", **(void **)(*(void *)(a1 + 16) + 40LL), a2, v19);
      }

      else
      {
        ContextHarvester::encodeCommand( (ContextHarvester *)a1,  4294955015LL,  3u,  v17,  v18,  65028LL,  kDYStateGroupUniform,  65030LL,  *((unsigned int *)a3 + 8),  65030LL,  a2);
        ContextHarvester::encodeCommand( (ContextHarvester *)a1,  4294955024LL,  0xDu,  v25,  v26,  5124LL,  9LL,  5125LL,  a2,  5124LL,  v19,  5124LL,  *((unsigned int *)a3 + 5),  5125LL,  *((unsigned int *)a3 + 6),  65028LL,  *a3,  5125LL,  *((unsigned int *)a3 + 9),  5124LL,  *((unsigned int *)a3 + 10),  5124LL,  *((unsigned int *)a3 + 12),  5124LL,  *((unsigned int *)a3 + 13),  35670LL,  *((unsigned __int8 *)a3 + 56),  5124LL,  *((unsigned int *)a3 + 11),  5125LL,  *((unsigned int *)a3 + 15));
        if (*((_DWORD *)a3 + 9) != -1)
        {
          ContextHarvester::encodeCommand((ContextHarvester *)a1, 4294955016LL, 0, v27, v28);
          return;
        }

        snprintf(__source, 0x28uLL, "u_%016lx_%u_%u", **(void **)(*(void *)(a1 + 16) + 40LL), a2, v19);
        strlcpy(__dst, __source, 0x28uLL);
      }

      GPUTools::FB::Encode( *(void *)(a1 + 16) + 120LL,  299LL,  v15,  (uint64_t)"CulcS",  v21,  v22,  v23,  v24,  **(void **)(a1 + 16));
      GPUTools::FB::Encode( *(void *)(a1 + 16) + 120LL,  4294955008LL,  0LL,  (uint64_t)"V<i>",  v29,  v30,  v31,  v32,  (char)__source);
      uint64_t v33 = *(GPUTools::FB::Stream **)(a1 + 40);
      char v34 = (GPUTools::FB::Fbuf *)(*(void *)(a1 + 16) + 120LL);
      uint64_t v35 = (unsigned int *)((char *)v33 + 56);
      do
        unsigned int v36 = __ldaxr(v35);
      while (__stlxr(1u, v35));
      while (v36 == 1)
      {
        while (*v35 == 1)
          ;
        do
          unsigned int v36 = __ldaxr(v35);
        while (__stlxr(1u, v35));
      }

      GPUTools::FB::Stream::Write_nolock(v33, v34, **(unsigned int **)v34, 1);
      atomic_store(0, v35);
      switch(v65)
      {
        case 0x1404u:
          (*(void (**)(void, void, uint64_t, uint64_t))(*(void *)(a1 + 32) + 5024LL))( *(void *)(*(void *)(a1 + 24) + 16LL),  a2,  v19,  v12);
          break;
        case 0x1405u:
          (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 32) + 5936LL))( *(void *)(*(void *)(a1 + 24) + 16LL),  a2,  v19,  v12);
          break;
        case 0x1406u:
          (*(void (**)(void, void, uint64_t, uint64_t))(*(void *)(a1 + 32) + 5016LL))( *(void *)(*(void *)(a1 + 24) + 16LL),  a2,  v19,  v12);
          break;
        case 0x140Au:
          (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 32) + 7592LL))( *(void *)(*(void *)(a1 + 24) + 16LL),  a2,  v19,  v12);
          break;
        default:
          goto LABEL_60;
      }

      uint64_t v15 = 0LL;
      v12 += v62;
LABEL_32:
      ++v14;
    }

    while (v14 < *((_DWORD *)a3 + 5));
  }

  uint64_t v37 = (_OWORD *)(*(void *)(a1 + 16) + 4709LL);
  v37[2] = 0u;
  v37[3] = 0u;
  *uint64_t v37 = 0u;
  v37[1] = 0u;
  __int128 v69 = 0u;
  __int128 v70 = 0u;
  __int128 v71 = 0u;
  strlcpy((char *)(*(void *)(a1 + 16) + 4709LL), "CV<i>i", 0x40uLL);
  GPUTools::FB::FIFOArgumentProvider::push((GPUTools::FB::FIFOArgumentProvider *)__source, **(void ***)(a1 + 16));
  GPUTools::FB::FIFOArgumentProvider::push((GPUTools::FB::FIFOArgumentProvider *)__source, __dst);
  GPUTools::FB::FIFOArgumentProvider::push((GPUTools::FB::FIFOArgumentProvider *)__source, *((_DWORD *)a3 + 5));
  if (v67)
  {
    strlcat((char *)(*(void *)(a1 + 16) + 4709LL), "ub", 0x40uLL);
    GPUTools::FB::FIFOArgumentProvider::push((GPUTools::FB::FIFOArgumentProvider *)__source, 0);
  }

  unsigned int v38 = (const char *)(*(void *)(a1 + 16) + 4709LL);
  unsigned int v39 = (char *)&v38[strlen(v38)];
  if (v60 >= 0x41)
  {
    switch(v65)
    {
      case 0x1404u:
        char v40 = 105;
        goto LABEL_48;
      case 0x1405u:
        char v40 = 105;
        *(_WORD *)unsigned int v39 = 15445;
        char v42 = 117;
        uint64_t v43 = 5LL;
        uint64_t v44 = 4LL;
        uint64_t v45 = 3LL;
        uint64_t v46 = 2LL;
        goto LABEL_50;
      case 0x1406u:
        char v40 = 102;
        goto LABEL_48;
      case 0x140Au:
        char v40 = 100;
LABEL_48:
        *unsigned int v39 = 85;
        char v42 = 60;
        uint64_t v43 = 4LL;
        uint64_t v44 = 3LL;
        uint64_t v45 = 2LL;
        uint64_t v46 = 1LL;
LABEL_50:
        v39[v46] = v42;
        v39[v45] = v40;
        v39[v44] = 62;
        v39[v43] = 0;
        uint64_t v47 = *(void *)(a1 + 536);
        uint64_t v48 = *(void *)(a1 + 560);
        uint64_t v49 = *(void *)(a1 + 16);
        int v50 = *(unsigned __int8 *)(a1 + 591);
        uint64_t v51 = DYGetGLGuestAppClient(v39);
        GPUTools::Interpose::DYSavePointer(v51, v60, v48 + v47, v49 + 4644, 65LL, 0LL, v50 != 0, 0LL, 0LL);
        GPUTools::FB::FIFOArgumentProvider::push( (GPUTools::FB::FIFOArgumentProvider *)__source,  (void *)(*(void *)(a1 + 16) + 4644LL));
        break;
      default:
        goto LABEL_60;
    }

    goto LABEL_51;
  }

  unsigned int v41 = v65 - 5124;
  if (v65 - 5124 >= 7 || ((0x47u >> v41) & 1) == 0)
  {
LABEL_60:
    unint64_t v59 = (const char *)dy_string_from_enum(v65);
    dy_abort("unknown or unsupported uniform component type: %s (%d)", v59, v65);
    goto LABEL_61;
  }

  snprintf(v39, v38 - v39 + 64, off_1F90B8[v41], (*((_DWORD *)a3 + 5) * v64));
  GPUTools::FB::FIFOArgumentProvider::push( (GPUTools::FB::FIFOArgumentProvider *)__source,  (void *)(*(void *)(a1 + 560) + *(void *)(a1 + 536)));
LABEL_51:
  GPUTools::FB::Encode(*(void *)(a1 + 16) + 120LL, v66, 0LL, *(void *)(a1 + 16) + 4709LL, __source);
  char v52 = *(GPUTools::FB::Stream **)(a1 + 40);
  uint64_t v53 = (GPUTools::FB::Fbuf *)(*(void *)(a1 + 16) + 120LL);
  uint64_t v54 = (unsigned int *)((char *)v52 + 56);
  do
    unsigned int v55 = __ldaxr(v54);
  while (__stlxr(1u, v54));
  if (v55 == 1)
  {
    do
    {
      while (*v54 == 1)
        ;
      do
        unsigned int v56 = __ldaxr(v54);
      while (__stlxr(1u, v54));
    }

    while (v56 == 1);
  }

  GPUTools::FB::Stream::Write_nolock(v52, v53, **(unsigned int **)v53, 1);
  atomic_store(0, v54);
  ContextHarvester::encodeCommand((ContextHarvester *)a1, 4294955016LL, 0, v57, v58);
  GPUTools::FB::FIFOArgumentProvider::~FIFOArgumentProvider((GPUTools::FB::FIFOArgumentProvider *)__source);
}

void sub_198AC(_Unwind_Exception *a1)
{
}

void sub_198C0(_Unwind_Exception *a1)
{
}

void sub_198D8(_Unwind_Exception *a1)
{
}

void sub_198EC(_Unwind_Exception *a1)
{
}

void sub_19900(_Unwind_Exception *a1)
{
}

void sub_19914(_Unwind_Exception *a1)
{
}

void ContextHarvester::harvestGLSLProgramUniformBlock( uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v16 = *(GPUTools::FB::Stream **)(a1 + 40);
  char v17 = (GPUTools::FB::Fbuf *)(*(void *)(a1 + 16) + 120LL);
  uint64_t v18 = (unsigned int *)((char *)v16 + 56);
  do
    unsigned int v19 = __ldaxr(v18);
  while (__stlxr(1u, v18));
  if (v19 == 1)
  {
    do
    {
      while (*v18 == 1)
        ;
      do
        unsigned int v20 = __ldaxr(v18);
      while (__stlxr(1u, v18));
    }

    while (v20 == 1);
  }

  GPUTools::FB::Stream::Write_nolock(v16, v17, **(unsigned int **)v17, 1);
  atomic_store(0, v18);
  ContextHarvester::encode( (ContextHarvester *)a1,  832LL,  128LL,  "CuiV<ui>ui",  **(void **)(a1 + 16),  a2,  __str,  *(unsigned int *)(a3 + 44));
  ContextHarvester::encodeCommand((ContextHarvester *)a1, 4294955016LL, 0, v21, v22);
}

void sub_19B10( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ContextHarvester::harvestGLSLProgramUniforms( ContextHarvester *this, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v7 = a2;
  unsigned int v20 = this;
  ContextHarvester::encodeCommand( this,  4294955015LL,  3u,  a4,  a5,  65028LL,  kDYStateGroupProgramUniforms,  65030LL,  a2,  65030LL,  0LL);
  ContextHarvester::encode(this, 645LL, 128LL, "Cul", **((void **)this + 2), v7);
  uint64_t v8 = *(void *)(*((void *)this + 2) + 32LL);
  uint64_t v18 = *((void *)this + 2);
  uint64_t v19 = v8;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  v16[2] = ___ZN16ContextHarvester26harvestGLSLProgramUniformsEj_block_invoke;
  v16[3] = &__block_descriptor_44_e45_v24__0r__ProgramUniformBlock__iiiIi_iII_8_B16l;
  v16[4] = this;
  int v17 = a2;
  GPUTools::GL::EnumerateProgramActiveUniformBlocks(&v18, a2, v16);
  uint64_t v9 = *((void *)this + 2);
  uint64_t v10 = *(void *)(v9 + 32);
  uint64_t v18 = v9;
  uint64_t v19 = v10;
  uint64_t v11 = *(unsigned int *)(v9 + 3456);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  v14[2] = ___ZN16ContextHarvester26harvestGLSLProgramUniformsEj_block_invoke_2;
  v14[3] = &__block_descriptor_44_e45_v24__0r__ProgramUniform__QiiIiIIiiiiCCI_8_B16l;
  v14[4] = this;
  int v15 = a2;
  GPUTools::GL::EnumerateProgramActiveUniforms(&v18, v11, a2, 1LL, v14);
  ContextHarvester::encodeCommand(this, 4294955016LL, 0, v12, v13);
}

void sub_19C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
}

void sub_19C94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
}

void sub_19CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
}

void ___ZN16ContextHarvester26harvestGLSLProgramUniformsEj_block_invoke( uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
}

void ___ZN16ContextHarvester26harvestGLSLProgramUniformsEj_block_invoke_2(uint64_t a1, void *a2)
{
}

uint64_t ContextHarvester::copyCurrentShaderTextAndLog( ContextHarvester *this, uint64_t a2, char **a3, int *a4, char **a5, int *a6)
{
  uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, int *))(*((void *)this + 4) + 5256LL))( *(void *)(*((void *)this + 3) + 16LL),  a2,  35716LL,  a6);
  int v13 = *a4;
  if (*a4 <= 1) {
    int v14 = 1;
  }
  else {
    int v14 = *a4;
  }
  int v15 = *a6;
  if (*a6 <= 1) {
    int v15 = 1;
  }
  unint64_t v16 = (v15 + v14);
  if (*((void *)this + 68) < v16)
  {
    uint64_t result = GPUTools::VMBuffer::alloc((ContextHarvester *)((char *)this + 536), v16, 0LL);
    if (!(_DWORD)result)
    {
      uint64_t v27 = dy_abort("VMBuffer::resize failed: size=%lu", v16);
      return ContextHarvester::encodeProgramShader(v27);
    }

    int v13 = *a4;
  }

  uint64_t v17 = *((void *)this + 67);
  uint64_t v18 = (char *)((v17 + *((void *)this + 72) - 1) & -*((void *)this + 72));
  uint64_t v19 = &v18[-v17];
  *((void *)this + 70) = v19;
  *((void *)this + 71) = v19;
  *a3 = v18;
  if (v13 < 1)
  {
    uint64_t v20 = 0LL;
    *uint64_t v18 = 0;
    *a4 = 1;
  }

  else
  {
    uint64_t result = (*(uint64_t (**)(void, void))(*((void *)this + 4) + 5032LL))( *(void *)(*((void *)this + 3) + 16LL),  a2);
    uint64_t v20 = *a4 - 1LL;
  }

  uint64_t v21 = *((void *)this + 71);
  uint64_t v22 = ((v20 + *((void *)this + 72)) & -*((void *)this + 72)) + v21;
  *((void *)this + 70) = v21;
  *((void *)this + 71) = v22;
  uint64_t v23 = (char *)(v22 + *((void *)this + 67));
  *a5 = v23;
  if (*a6 < 1)
  {
    uint64_t v24 = 0LL;
    *uint64_t v23 = 0;
    *a6 = 1;
  }

  else
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(*((void *)this + 4) + 5272LL))( *(void *)(*((void *)this + 3) + 16LL),  a2);
    uint64_t v24 = *a6 - 1LL;
  }

  uint64_t v25 = *((void *)this + 71);
  uint64_t v26 = ((v24 + *((void *)this + 72)) & -*((void *)this + 72)) + v25;
  *((void *)this + 70) = v25;
  *((void *)this + 71) = v26;
  return result;
}

void ContextHarvester::encodeProgramShader( uint64_t a1, uint64_t a2, unsigned int **a3, unsigned int *a4, char **a5)
{
  if (!*((_BYTE *)a4 + 8)) {
    return;
  }
  uint64_t v10 = *a4;
  uint64_t v106 = a1;
  uint64_t v99 = a2;
  ContextHarvester::encodeCommand( (ContextHarvester *)a1,  4294955015LL,  3u,  (char)a4,  (uint64_t)a5,  65028LL,  kDYStateGroupGLSLProgramShader,  65030LL,  a2,  65030LL,  v10);
  v105.__r_.__value_.__s.__size_ = 0;
  v105.__r_.__value_.__s.__data_[0] = 0;
  v104.__r_.__value_.__s.__size_ = 0;
  v104.__r_.__value_.__s.__data_[0] = 0;
  int v14 = *a3;
  int v13 = a3[1];
  if (v14 == v13) {
    goto LABEL_104;
  }
  uint64_t v15 = 0LL;
  do
  {
    unint64_t v16 = (char **)*((void *)v14 + 1);
    uint64_t v17 = *v16;
    uint64_t v18 = (const std::string::value_type *)**((void **)v14 + 3);
    uint64_t v19 = *(void **)(a1 + 56);
    int8x8_t v20 = (int8x8_t)v19[1];
    if (!*(void *)&v20) {
      goto LABEL_27;
    }
    unint64_t v21 = *v14;
    uint8x8_t v22 = (uint8x8_t)vcnt_s8(v20);
    v22.i16[0] = vaddlv_u8(v22);
    if (v22.u32[0] > 1uLL)
    {
      unint64_t v23 = *v14;
      if (*(void *)&v20 <= v21) {
        unint64_t v23 = v21 % *(void *)&v20;
      }
    }

    else
    {
      unint64_t v23 = (v20.i32[0] - 1) & v21;
    }

    uint64_t v24 = *(uint64_t ***)(*v19 + 8 * v23);
    if (!v24 || (uint64_t v25 = *v24) == 0LL)
    {
LABEL_27:
      if (!v17) {
        goto LABEL_29;
      }
      goto LABEL_28;
    }

    if (v22.u32[0] < 2uLL)
    {
      uint64_t v26 = *(void *)&v20 - 1LL;
      while (1)
      {
        uint64_t v28 = v25[1];
        if (v28 == v21)
        {
          if (*((_DWORD *)v25 + 4) == (_DWORD)v21) {
            goto LABEL_25;
          }
        }

        else if ((v28 & v26) != v23)
        {
          goto LABEL_27;
        }

        uint64_t v25 = (uint64_t *)*v25;
        if (!v25) {
          goto LABEL_27;
        }
      }
    }

    while (1)
    {
      unint64_t v27 = v25[1];
      if (v27 == v21) {
        break;
      }
      if (v27 >= *(void *)&v20) {
        v27 %= *(void *)&v20;
      }
      if (v27 != v23) {
        goto LABEL_27;
      }
LABEL_14:
      uint64_t v25 = (uint64_t *)*v25;
      if (!v25) {
        goto LABEL_27;
      }
    }

    if (*((_DWORD *)v25 + 4) != (_DWORD)v21) {
      goto LABEL_14;
    }
LABEL_25:
    uint64_t v29 = (char ***)v25[3];
    if (!v29 || *v29 != v16) {
      goto LABEL_27;
    }
    if (IsInterposeGLObject(*(void *)(*(void *)(a1 + 16) + 40LL), 35656, v21))
    {
      (*(void (**)(void, void, uint64_t, char *))(*(void *)(a1 + 32) + 5256LL))( *(void *)(*(void *)(a1 + 24) + 16LL),  *v14,  35713LL,  v103);
      ContextHarvester::copyCurrentShaderTextAndLog((ContextHarvester *)a1, *v14, &v100, &v101, v107, &v102);
      if (!v17) {
        uint64_t v17 = v100;
      }
      if (!v18) {
        uint64_t v18 = v107[0];
      }
      if (!v17)
      {
LABEL_29:
        if (v18)
        {
          std::string::append(&v104, v18);
          std::string::push_back(&v104, 10);
        }

        uint64_t v15 = *v14;
        goto LABEL_32;
      }

LABEL_104:
  if ((char)v104.__r_.__value_.__s.__size_ < 0)
  {
    operator delete(v104.__r_.__value_.__l.__data_);
  }

  else
  {
LABEL_109:
    operator delete(v105.__r_.__value_.__l.__data_);
  }

LABEL_106:
  ContextHarvester::encodeCommand((ContextHarvester *)a1, 4294955016LL, 0, v11, v12);
}

void sub_1A66C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *__p, uint64_t a23, int a24, __int16 a25, char a26, char a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33)
{
  if (a27 < 0)
  {
    operator delete(__p);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_3:
      AutoStateGroup::~AutoStateGroup((ContextHarvester **)(v33 - 104), a2, a3, a4, a5);
      _Unwind_Resume(a1);
    }
  }

  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }

  operator delete(a28);
  AutoStateGroup::~AutoStateGroup((ContextHarvester **)(v33 - 104), v35, v36, v37, v38);
  _Unwind_Resume(a1);
}

uint64_t ContextHarvester::encodeProgramLinkSequence( ContextHarvester *this, uint64_t a2, const ProgramInfo *a3, int a4, uint64_t a5)
{
  uint64_t v8 = this;
  uint64_t v9 = (char *)a2;
  unint64_t v66 = this;
  ContextHarvester::encodeCommand( this,  4294955015LL,  3u,  a4,  a5,  65028LL,  kDYStateGroupGLSLProgramLink,  65030LL,  a2,  65030LL,  0LL);
  (*(void (**)(void, uint64_t, uint64_t, unsigned int *))(*((void *)v8 + 4) + 5264LL))( *(void *)(*((void *)v8 + 3) + 16LL),  a2,  35714LL,  &v65);
  (*(void (**)(void, uint64_t, uint64_t, unsigned int *))(*((void *)v8 + 4) + 5264LL))( *(void *)(*((void *)v8 + 3) + 16LL),  a2,  35712LL,  &v64);
  unsigned int v63 = 35980;
  if (*(int *)(*((void *)v8 + 2) + 3460LL) >= 3) {
    (*(void (**)(void, uint64_t, uint64_t, unsigned int *))(*((void *)v8 + 4) + 5264LL))( *(void *)(*((void *)v8 + 3) + 16LL),  a2,  35967LL,  &v63);
  }
  if ((a4 & 1) == 0)
  {
    uint64_t v73 = v8;
    ContextHarvester::encodeCommand( v8,  4294955015LL,  3u,  v10,  v11,  65028LL,  kDYStateGroupGLSLProgramLocationBindings,  65030LL,  v9,  65030LL,  0LL);
    char v67 = (void **)v9;
    if (![**((id **)v8 + 2) getParameter:1707 to:&v67])
    {
      uint64_t v17 = (char *)v67;
      int v18 = *(_DWORD *)v67;
      if (*(int *)v67 >= 1)
      {
        uint64_t v19 = (char *)v67 + 4;
        do
        {
          uint64_t v20 = *(int *)v19;
          uint64_t v21 = *(unsigned int *)&v19[v20 + 4];
          v19[v20 + 4] = 0;
          ContextHarvester::encode(v8, 11LL, 0LL, "CuluicS", **((void **)v8 + 2), v9, v21, v19 + 4);
          v19 += v20 + 8;
          --v18;
        }

        while (v18);
        uint64_t v17 = (char *)v67;
      }

      free(v17);
    }

    ContextHarvester::harvestGLSLProgramFragDataLocations(v8, a2);
    ContextHarvester::encodeCommand(v8, 4294955016LL, 0, v22, v23);
    ProgramXfb::ProgramXfb((ProgramXfb *)&v67);
    ProgramXfb::update(v24, *((ContextInfo **)v8 + 2), a2);
    ContextHarvester::encodeProgramXfbVaryings(v8, a2, (const ProgramXfb *)&v67);
    uint64_t v25 = (void (*)(uint64_t, uint64_t))v68;
    if (v68)
    {
      uint64_t v26 = v69;
      unint64_t v27 = (void *)v68;
      if (v69 != (void (*)(uint64_t, uint64_t))v68)
      {
        do
        {
          uint64_t v26 = (void (*)(uint64_t, uint64_t))((char *)v26 - 24);
        }

        while (v26 != v25);
        unint64_t v27 = (void *)v68;
      }

      unint64_t v69 = v25;
      operator delete(v27);
    }

    if (!*((_BYTE *)a3 + 377))
    {
      ContextHarvester::encode( v8,  4294955024LL,  0LL,  "CiuiiSiieui",  **((void **)v8 + 2),  12LL,  a2,  0LL,  0LL,  v65,  v64,  v63,  0LL);
      uint64_t v28 = 0LL;
      goto LABEL_60;
    }

    if (!v65) {
      goto LABEL_39;
    }
LABEL_28:
    uint64_t v28 = 0LL;
LABEL_60:
    ContextHarvester::encodeCommand(v8, 4294955016LL, 0, v10, v11);
    return v28;
  }

  if (!*((_BYTE *)a3 + 377)) {
    goto LABEL_28;
  }
  uint64_t v12 = (const ProgramInfo *)((char *)a3 + 144);
  if (*((void *)a3 + 18) == *((void *)a3 + 19)
    && *((void *)a3 + 21) == *((void *)a3 + 22)
    && *((void *)a3 + 24) == *((void *)a3 + 25)
    && *((void *)a3 + 27) == *((void *)a3 + 28)
    && *((void *)a3 + 30) == *((void *)a3 + 31))
  {
    goto LABEL_28;
  }

  uint64_t v62 = v8;
  ContextHarvester::encodeCommand( v8,  4294955015LL,  3u,  v10,  v11,  65028LL,  kDYStateGroupGLSLProgramLocationBindings,  65030LL,  v9,  65030LL,  0LL);
  uint64_t v13 = *(void *)(*((void *)v8 + 2) + 32LL);
  uint64_t v73 = (ContextHarvester *)*((void *)v8 + 2);
  uint64_t v74 = v13;
  char v67 = _NSConcreteStackBlock;
  uint64_t v68 = 3221225472LL;
  unint64_t v69 = ___ZN16ContextHarvester42harvestGLSLProgramActiveAttributeLocationsEj_block_invoke;
  uint64_t v70 = &__block_descriptor_48_e49_v24__0r__ProgramActiveObject__QiiIiIIiiiiCC_8_B16l;
  uint64_t v71 = v8;
  char v72 = v9;
  GPUTools::GL::EnumerateProgramActiveAttributes(&v73, a2, 1LL, &v67);
  ContextHarvester::harvestGLSLProgramActiveFragDataLocations(v8, a2);
  ContextHarvester::encodeCommand(v8, 4294955016LL, 0, v14, v15);
  if (*((_BYTE *)a3 + 320))
  {
    ContextHarvester::encodeProgramXfbVaryings(v8, a2, (const ProgramInfo *)((char *)a3 + 288));
    a3 = (const ProgramInfo *)((char *)a3 + 144);
  }

  else
  {
    ProgramXfb::ProgramXfb((ProgramXfb *)&v67);
    ProgramXfb::update(v29, *((ContextInfo **)v8 + 2), a2);
    ContextHarvester::encodeProgramXfbVaryings(v8, a2, (const ProgramXfb *)&v67);
    uint64_t v30 = (void (*)(uint64_t, uint64_t))v68;
    if (v68)
    {
      uint64_t v31 = v69;
      unint64_t v32 = (void *)v68;
      if (v69 != (void (*)(uint64_t, uint64_t))v68)
      {
        do
        {
          uint64_t v31 = (void (*)(uint64_t, uint64_t))((char *)v31 - 24);
        }

        while (v31 != v30);
        unint64_t v32 = (void *)v68;
      }

      unint64_t v69 = v30;
      operator delete(v32);
    }

    a3 = v12;
  }

LABEL_39:
  ContextHarvester::encodeProgramParameters(v8, a2, v16, a3, v11);
  char v67 = 0LL;
  uint64_t v68 = 0LL;
  unint64_t v69 = 0LL;
  ContextHarvester::encodeProgramShader((uint64_t)v8, a2, (unsigned int **)a3, (unsigned int *)v8 + 62, (char **)&v67);
  ContextHarvester::encodeProgramShader( (uint64_t)v8,  a2,  (unsigned int **)a3 + 3,  (unsigned int *)v8 + 65,  (char **)&v67);
  ContextHarvester::encodeProgramShader( (uint64_t)v8,  a2,  (unsigned int **)a3 + 6,  (unsigned int *)v8 + 68,  (char **)&v67);
  ContextHarvester::encodeProgramShader( (uint64_t)v8,  a2,  (unsigned int **)a3 + 9,  (unsigned int *)v8 + 71,  (char **)&v67);
  ContextHarvester::encodeProgramShader( (uint64_t)v8,  a2,  (unsigned int **)a3 + 12,  (unsigned int *)v8 + 74,  (char **)&v67);
  uint64_t v33 = (const char *)**((void **)a3 + 15);
  int v57 = a4;
  if (v33)
  {
    size_t v34 = strlen(v33) + 1;
    uint64_t v35 = (id *)*((void *)v8 + 2);
    unsigned int v36 = v65;
    if (v65 == 1)
    {
LABEL_41:
      LODWORD(v73) = a2;
      [*v35 getParameter:611 to:&v73];
      uint64_t v56 = v73;
      unsigned int v36 = v65;
      uint64_t v35 = (id *)*((void *)v8 + 2);
LABEL_48:
      uint64_t v42 = v63;
      unsigned int v43 = v64;
      ContextHarvester::encode(v8, 349LL, 128LL, "Cul", *v35, v9);
      uint64_t v45 = (void *)*((void *)v8 + 2);
      if (v34 < 0x401)
      {
        uint64_t v48 = "CiuiiSiieui";
      }

      else
      {
        uint64_t v55 = *((void *)v8 + 1);
        int v46 = *((unsigned __int8 *)v8 + 591);
        uint64_t v47 = DYGetGLGuestAppClient(v44);
        GPUTools::Interpose::DYSavePointer(v47, v34, v33, (char *)v45 + 4644, 65LL, v55, v46 != 0, 0LL, 0LL);
        uint64_t v45 = (void *)*((void *)v8 + 2);
        uint64_t v33 = (char *)v45 + 4644;
        uint64_t v48 = "CiuiiU<cb>iieui";
      }

      ContextHarvester::encode(v8, 4294955024LL, 0LL, v48, *v45, 12LL, a2, v34, v33, v36 != 0, v43 != 0, v42, v56);
      if (v57)
      {
        uint64_t v49 = *(void *)(*((void *)v8 + 2) + 32LL);
        uint64_t v73 = (ContextHarvester *)*((void *)v8 + 2);
        uint64_t v74 = v49;
        v60[0] = _NSConcreteStackBlock;
        v60[1] = 3221225472LL;
        v60[2] = ___ZN16ContextHarvester25encodeProgramLinkSequenceEjRK11ProgramInfob_block_invoke;
        v60[3] = &__block_descriptor_44_e49_v24__0r__ProgramActiveObject__QiiIiIIiiiiCC_8_B16l;
        v60[4] = v8;
        int v61 = a2;
        GPUTools::GL::EnumerateProgramActiveAttributes(&v73, a2, 1LL, v60);
        uint64_t v50 = *((void *)v8 + 2);
        if (*(int *)(v50 + 3460) >= 3)
        {
          uint64_t v51 = *(void *)(v50 + 32);
          uint64_t v73 = (ContextHarvester *)*((void *)v8 + 2);
          uint64_t v74 = v51;
          v58[0] = _NSConcreteStackBlock;
          v58[1] = 3221225472LL;
          v58[2] = ___ZN16ContextHarvester25encodeProgramLinkSequenceEjRK11ProgramInfob_block_invoke_2;
          v58[3] = &__block_descriptor_44_e52_v24__0r__ProgramTransformFeedbackVarying__iIiI_8_B16l;
          v58[4] = v8;
          int v59 = a2;
          GPUTools::GL::EnumerateProgramTransformFeedbackVaryings(&v73, a2, v58);
        }
      }

      unsigned int v52 = (unsigned int *)v67;
      uint64_t v53 = (unsigned int *)v68;
      if (v67 != (void **)v68)
      {
        do
          ContextHarvester::encode(v8, 133LL, 128LL, "Culul", **((void **)v8 + 2), v9, *v52++);
        while (v52 != v53);
        unsigned int v52 = (unsigned int *)v67;
      }

      if (v52)
      {
        uint64_t v68 = (uint64_t)v52;
        operator delete(v52);
      }

      uint64_t v28 = 1LL;
      uint64_t v8 = v66;
      goto LABEL_60;
    }

    if ((_DWORD)a3 != -1 && *v22 >= 1)
    {
      *(_BYTE *)(strlen((const char *)(v16 + 4709)) + v16 + 470_Block_object_dispose(va, 8) = 83;
      uint64_t v38 = v66;
      unsigned int v64 = *((_OWORD *)v66 + 1);
      char v67 = v66;
      if (v68 >= 0x24)
      {
        *((_DWORD *)v66 + _Block_object_dispose(va, 8) = 0;
        *uint64_t v38 = 0u;
        v38[1] = 0u;
      }

      GPUTools::FB::Encode((uint64_t)&v66, 826LL, 256LL, v16 + 4709, v34, v35, v36, v37, *(void *)v16);
      *((_OWORD *)v66 + 1) = v64;
    }

    uint64_t v39 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v30), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v39) {
      uint64_t v39 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v66, v40);
    }
    uint64_t v42 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v16 + 3404);
    if ((_DWORD)v42) {
      uint64_t v39 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v66, v42, v41);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v39), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v16, (uint64_t)&v66);
    }
    unsigned int v43 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v16 + 3480),  (GPUTools::FB::Fbuf *)(v16 + 3520),  (GPUTools::FB *)&v66);
    uint64_t v44 = *(unsigned int *)(v16 + 3404);
    if ((_DWORD)v44 && gBreakOnError)
    {
      int v57 = 3LL;
      unint64_t v58 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v29 & 2) == 0) {
        goto LABEL_53;
      }
      int v57 = 2LL;
      unint64_t v58 = 826LL;
    }

    breakpoint_break((uint64_t)&v66, (volatile int *)v58, v57, v44, v16);
LABEL_53:
    uint64_t v45 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v43) defaultFbufStream];
    int v46 = (unsigned int *)((char *)v45 + 56);
    do
      uint64_t v47 = __ldaxr(v46);
    while (__stlxr(1u, v46));
    if (v47 == 1)
    {
      do
      {
        while (*v46 == 1)
          ;
        do
          uint64_t v48 = __ldaxr(v46);
        while (__stlxr(1u, v46));
      }

      while (v48 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v45, (GPUTools::FB::Fbuf *)&v66, *(unsigned int *)v66, 1);
    atomic_store(0, v46);
    do
    {
      uint64_t v49 = __ldaxr(v17);
      uint64_t v50 = v49 - 1;
    }

    while (__stlxr(v50, v17));
    if (gCheckGLErrors) {
      uint64_t v51 = v50 < 1;
    }
    else {
      uint64_t v51 = 1;
    }
    if (!v51) {
      handle_opengl_thread_conflict((const void **)v16);
    }
    goto LABEL_66;
  }

  do
    unsigned int v52 = __ldaxr(v17);
  while (__stlxr(v52 - 1, v17));
  [(id)DYGetGLGuestAppClient(v21) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, unint64_t, uint64_t, int *, char *))(*(void *)(v16 + 24)
                                                                                               + 3568LL))( a1,  a2,  a3,  a4,  a5,  a6);
LABEL_66:
  if (v66) {
    free(v66);
  }
}

    if (*a5 >= 1)
    {
      *(_BYTE *)(strlen((const char *)(v17 + 4709)) + v17 + 470_Block_object_dispose(va, 8) = 83;
      uint64_t v42 = v72;
      char v67 = *((_OWORD *)v72 + 1);
      uint64_t v73 = v72;
      if (v74 >= 0x24)
      {
        *((_DWORD *)v72 + _Block_object_dispose(va, 8) = 0;
        *uint64_t v42 = 0u;
        v42[1] = 0u;
      }

      GPUTools::FB::Encode((uint64_t)&v72, 212LL, 256LL, v17 + 4709, v38, v39, v40, v41, *(void *)v17);
      *((_OWORD *)v72 + 1) = v67;
    }

    unsigned int v43 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v43) {
      unsigned int v43 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v72, v44);
    }
    int v46 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v17 + 3404);
    if ((_DWORD)v46) {
      unsigned int v43 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v72, v46, v45);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v43), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v17, (uint64_t)&v72);
    }
    uint64_t v47 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v17 + 3480),  (GPUTools::FB::Fbuf *)(v17 + 3520),  (GPUTools::FB *)&v72);
    uint64_t v48 = *(unsigned int *)(v17 + 3404);
    if ((_DWORD)v48 && gBreakOnError)
    {
      int v61 = 3LL;
      uint64_t v62 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v32 & 2) == 0) {
        goto LABEL_52;
      }
      int v61 = 2LL;
      uint64_t v62 = 212LL;
    }

    breakpoint_break((uint64_t)&v72, (volatile int *)v62, v61, v48, v17);
LABEL_52:
    uint64_t v49 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v47) defaultFbufStream];
    uint64_t v50 = (unsigned int *)((char *)v49 + 56);
    do
      uint64_t v51 = __ldaxr(v50);
    while (__stlxr(1u, v50));
    if (v51 == 1)
    {
      do
      {
        while (*v50 == 1)
          ;
        do
          unsigned int v52 = __ldaxr(v50);
        while (__stlxr(1u, v50));
      }

      while (v52 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v49, (GPUTools::FB::Fbuf *)&v72, *(unsigned int *)v72, 1);
    atomic_store(0, v50);
    do
    {
      uint64_t v53 = __ldaxr(v18);
      uint64_t v54 = v53 - 1;
    }

    while (__stlxr(v54, v18));
    if (gCheckGLErrors) {
      uint64_t v55 = v54 < 1;
    }
    else {
      uint64_t v55 = 1;
    }
    if (!v55) {
      handle_opengl_thread_conflict((const void **)v17);
    }
    goto LABEL_65;
  }

  do
    uint64_t v56 = __ldaxr(v18);
  while (__stlxr(v56 - 1, v18));
  [(id)DYGetGLGuestAppClient(v22) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, void *, uint64_t, uint64_t, int *, int *, unsigned int *, char *))(*(void *)(v17 + 24) + 5008LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);
LABEL_65:
  if (v72) {
    free(v72);
  }
}

    if (*a5 >= 1)
    {
      *(_BYTE *)(strlen((const char *)(v17 + 4709)) + v17 + 470_Block_object_dispose(va, 8) = 83;
      uint64_t v42 = v72;
      char v67 = *((_OWORD *)v72 + 1);
      uint64_t v73 = v72;
      if (v74 >= 0x24)
      {
        *((_DWORD *)v72 + _Block_object_dispose(va, 8) = 0;
        *uint64_t v42 = 0u;
        v42[1] = 0u;
      }

      GPUTools::FB::Encode((uint64_t)&v72, 211LL, 256LL, v17 + 4709, v38, v39, v40, v41, *(void *)v17);
      *((_OWORD *)v72 + 1) = v67;
    }

    unsigned int v43 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v43) {
      unsigned int v43 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v72, v44);
    }
    int v46 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v17 + 3404);
    if ((_DWORD)v46) {
      unsigned int v43 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v72, v46, v45);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v43), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v17, (uint64_t)&v72);
    }
    uint64_t v47 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v17 + 3480),  (GPUTools::FB::Fbuf *)(v17 + 3520),  (GPUTools::FB *)&v72);
    uint64_t v48 = *(unsigned int *)(v17 + 3404);
    if ((_DWORD)v48 && gBreakOnError)
    {
      int v61 = 3LL;
      uint64_t v62 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v32 & 2) == 0) {
        goto LABEL_52;
      }
      int v61 = 2LL;
      uint64_t v62 = 211LL;
    }

    breakpoint_break((uint64_t)&v72, (volatile int *)v62, v61, v48, v17);
LABEL_52:
    uint64_t v49 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v47) defaultFbufStream];
    uint64_t v50 = (unsigned int *)((char *)v49 + 56);
    do
      uint64_t v51 = __ldaxr(v50);
    while (__stlxr(1u, v50));
    if (v51 == 1)
    {
      do
      {
        while (*v50 == 1)
          ;
        do
          unsigned int v52 = __ldaxr(v50);
        while (__stlxr(1u, v50));
      }

      while (v52 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v49, (GPUTools::FB::Fbuf *)&v72, *(unsigned int *)v72, 1);
    atomic_store(0, v50);
    do
    {
      uint64_t v53 = __ldaxr(v18);
      uint64_t v54 = v53 - 1;
    }

    while (__stlxr(v54, v18));
    if (gCheckGLErrors) {
      uint64_t v55 = v54 < 1;
    }
    else {
      uint64_t v55 = 1;
    }
    if (!v55) {
      handle_opengl_thread_conflict((const void **)v17);
    }
    goto LABEL_65;
  }

  do
    uint64_t v56 = __ldaxr(v18);
  while (__stlxr(v56 - 1, v18));
  [(id)DYGetGLGuestAppClient(v22) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, void *, uint64_t, uint64_t, int *, int *, unsigned int *, char *))(*(void *)(v17 + 24) + 5048LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);
LABEL_65:
  if (v72) {
    free(v72);
  }
}

    if (*a5 >= 1)
    {
      *(_BYTE *)(strlen((const char *)(v17 + 4709)) + v17 + 470_Block_object_dispose(va, 8) = 83;
      uint64_t v42 = v71;
      unsigned int v65 = *((_OWORD *)v71 + 1);
      char v72 = v71;
      if (v73 >= 0x24)
      {
        *((_DWORD *)v71 + _Block_object_dispose(va, 8) = 0;
        *uint64_t v42 = 0u;
        v42[1] = 0u;
      }

      GPUTools::FB::Encode((uint64_t)&v71, 296LL, 256LL, v17 + 4709, v38, v39, v40, v41, *(void *)v17);
      *((_OWORD *)v71 + 1) = v65;
    }

    unsigned int v43 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v43) {
      unsigned int v43 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v71, v44);
    }
    int v46 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v17 + 3404);
    if ((_DWORD)v46) {
      unsigned int v43 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v71, v46, v45);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v43), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v17, (uint64_t)&v71);
    }
    uint64_t v47 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v17 + 3480),  (GPUTools::FB::Fbuf *)(v17 + 3520),  (GPUTools::FB *)&v71);
    uint64_t v48 = *(unsigned int *)(v17 + 3404);
    if ((_DWORD)v48 && gBreakOnError)
    {
      int v61 = 3LL;
      uint64_t v62 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v32 & 2) == 0) {
        goto LABEL_52;
      }
      int v61 = 2LL;
      uint64_t v62 = 296LL;
    }

    breakpoint_break((uint64_t)&v71, (volatile int *)v62, v61, v48, v17);
LABEL_52:
    uint64_t v49 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v47) defaultFbufStream];
    uint64_t v50 = (unsigned int *)((char *)v49 + 56);
    do
      uint64_t v51 = __ldaxr(v50);
    while (__stlxr(1u, v50));
    if (v51 == 1)
    {
      do
      {
        while (*v50 == 1)
          ;
        do
          unsigned int v52 = __ldaxr(v50);
        while (__stlxr(1u, v50));
      }

      while (v52 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v49, (GPUTools::FB::Fbuf *)&v71, *(unsigned int *)v71, 1);
    atomic_store(0, v50);
    do
    {
      uint64_t v53 = __ldaxr(v18);
      uint64_t v54 = v53 - 1;
    }

    while (__stlxr(v54, v18));
    if (gCheckGLErrors) {
      uint64_t v55 = v54 < 1;
    }
    else {
      uint64_t v55 = 1;
    }
    if (!v55) {
      handle_opengl_thread_conflict((const void **)v17);
    }
    goto LABEL_65;
  }

  do
    uint64_t v56 = __ldaxr(v18);
  while (__stlxr(v56 - 1, v18));
  [(id)DYGetGLGuestAppClient(v22) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, int *, int *, unsigned int *, char *))(*(void *)(v17 + 24) + 5592LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);
LABEL_65:
  if (v71) {
    free(v71);
  }
}

    uint64_t v35 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v30), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v35) {
      uint64_t v35 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v57, v36);
    }
    uint64_t v38 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v15 + 3404);
    if ((_DWORD)v38) {
      uint64_t v35 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v57, v38, v37);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v35), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v15, (uint64_t)v57);
    }
    uint64_t v39 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v15 + 3480),  (GPUTools::FB::Fbuf *)(v15 + 3520),  (GPUTools::FB *)v57);
    uint64_t v40 = *(unsigned int *)(v15 + 3404);
    if ((_DWORD)v40 && gBreakOnError)
    {
      uint64_t v53 = 3LL;
      uint64_t v54 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v29 & 2) == 0) {
        goto LABEL_48;
      }
      uint64_t v53 = 2LL;
      uint64_t v54 = 937LL;
    }

    breakpoint_break((uint64_t)v57, (volatile int *)v54, v53, v40, v15);
LABEL_48:
    uint64_t v41 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v39) defaultFbufStream];
    uint64_t v42 = (unsigned int *)((char *)v41 + 56);
    do
      unsigned int v43 = __ldaxr(v42);
    while (__stlxr(1u, v42));
    if (v43 == 1)
    {
      do
      {
        while (*v42 == 1)
          ;
        do
          uint64_t v44 = __ldaxr(v42);
        while (__stlxr(1u, v42));
      }

      while (v44 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v41, (GPUTools::FB::Fbuf *)v57, *(unsigned int *)v57[0], 1);
    atomic_store(0, v42);
    do
    {
      uint64_t v45 = __ldaxr(v16);
      int v46 = v45 - 1;
    }

    while (__stlxr(v46, v16));
    if (gCheckGLErrors) {
      uint64_t v47 = v46 < 1;
    }
    else {
      uint64_t v47 = 1;
    }
    if (!v47) {
      handle_opengl_thread_conflict((const void **)v15);
    }
    goto LABEL_61;
  }

  do
    uint64_t v48 = __ldaxr(v16);
  while (__stlxr(v48 - 1, v16));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, const void *, uint64_t))(*(void *)(v15 + 24) + 7104LL))( a1,  a2,  a3,  a4,  a5);
LABEL_61:
  if (v57[0]) {
    free(v57[0]);
  }
}

    uint64_t v35 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v30), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v35) {
      uint64_t v35 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v57, v36);
    }
    uint64_t v38 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v15 + 3404);
    if ((_DWORD)v38) {
      uint64_t v35 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v57, v38, v37);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v35), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v15, (uint64_t)v57);
    }
    uint64_t v39 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v15 + 3480),  (GPUTools::FB::Fbuf *)(v15 + 3520),  (GPUTools::FB *)v57);
    uint64_t v40 = *(unsigned int *)(v15 + 3404);
    if ((_DWORD)v40 && gBreakOnError)
    {
      uint64_t v53 = 3LL;
      uint64_t v54 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v29 & 2) == 0) {
        goto LABEL_48;
      }
      uint64_t v53 = 2LL;
      uint64_t v54 = 937LL;
    }

    breakpoint_break((uint64_t)v57, (volatile int *)v54, v53, v40, v15);
LABEL_48:
    uint64_t v41 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v39) defaultFbufStream];
    uint64_t v42 = (unsigned int *)((char *)v41 + 56);
    do
      unsigned int v43 = __ldaxr(v42);
    while (__stlxr(1u, v42));
    if (v43 == 1)
    {
      do
      {
        while (*v42 == 1)
          ;
        do
          uint64_t v44 = __ldaxr(v42);
        while (__stlxr(1u, v42));
      }

      while (v44 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v41, (GPUTools::FB::Fbuf *)v57, *(unsigned int *)v57[0], 1);
    atomic_store(0, v42);
    do
    {
      uint64_t v45 = __ldaxr(v16);
      int v46 = v45 - 1;
    }

    while (__stlxr(v46, v16));
    if (gCheckGLErrors) {
      uint64_t v47 = v46 < 1;
    }
    else {
      uint64_t v47 = 1;
    }
    if (!v47) {
      handle_opengl_thread_conflict((const void **)v15);
    }
    goto LABEL_61;
  }

  do
    uint64_t v48 = __ldaxr(v16);
  while (__stlxr(v48 - 1, v16));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, const void *, uint64_t))(*(void *)(v15 + 24) + 7104LL))( a1,  a2,  a3,  a4,  a5);
LABEL_61:
  if (v57[0]) {
    free(v57[0]);
  }
}

  ++*(void *)(a1 + 24);
  return v11;
}

  ++*(void *)(a1 + 24);
  return i;
}

  ++*(void *)(a1 + 24);
  return v11;
}

  ++*(void *)(a1 + 24);
  return v11;
}

  ++*(void *)(a1 + 24);
  return v11;
}

  ++*(void *)(a1 + 24);
  return v11;
}

LABEL_47:
    uint64_t v56 = 0LL;
    goto LABEL_48;
  }

  uint64_t v37 = *((void *)v8 + 4);
  uint64_t v38 = *(void (**)(void, uint64_t, uint64_t, void))(v37 + 5280);
  (*(void (**)(void, uint64_t, uint64_t, ContextHarvester **))(v37 + 5264))( *(void *)(*((void *)v8 + 3) + 16LL),  a2,  35716LL,  &v73);
  uint64_t v39 = v73;
  if (!(_DWORD)v73)
  {
    uint64_t v33 = 0LL;
    size_t v34 = 0LL;
    uint64_t v35 = (id *)*((void *)v8 + 2);
    unsigned int v36 = v65;
    if (v65 == 1) {
      goto LABEL_41;
    }
    goto LABEL_47;
  }

  uint64_t v40 = (int)v73;
  if (*((void *)v8 + 68) >= (unint64_t)(int)v73)
  {
LABEL_46:
    uint64_t v41 = ((*((void *)v8 + 67) + *((void *)v8 + 72) - 1LL) & -*((void *)v8 + 72)) - *((void *)v8 + 67);
    *((void *)v8 + 70) = v41;
    *((void *)v8 + 71) = v41;
    v38(*(void *)(*((void *)v8 + 3) + 16LL), a2, v39, 0LL);
    uint64_t v33 = (const char *)(*((void *)v8 + 70) + *((void *)v8 + 67));
    size_t v34 = (int)v73;
    uint64_t v35 = (id *)*((void *)v8 + 2);
    unsigned int v36 = v65;
    if (v65 == 1) {
      goto LABEL_41;
    }
    goto LABEL_47;
  }

  if (GPUTools::VMBuffer::alloc((ContextHarvester *)((char *)v8 + 536), (int)v73, 0LL))
  {
    uint64_t v39 = v73;
    goto LABEL_46;
  }

  uint64_t result = dy_abort("VMBuffer::resize failed: size=%lu", v40);
  __break(1u);
  return result;
}

void sub_1AE94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v7 = *(void **)(v5 - 168);
  if (v7)
  {
    *(void *)(v5 - 160) = v7;
    operator delete(v7);
  }

  AutoStateGroup::~AutoStateGroup((ContextHarvester **)(v5 - 176), a2, a3, a4, a5);
  _Unwind_Resume(a1);
}

void ProgramXfb::~ProgramXfb(ProgramXfb *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 2);
    uint64_t v4 = (void *)*((void *)this + 1);
    if (v3 != v2)
    {
      do
      {
        v3 -= 24LL;
      }

      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 1);
    }

    *((void *)this + 2) = v2;
    operator delete(v4);
  }

void ___ZN16ContextHarvester25encodeProgramLinkSequenceEjRK11ProgramInfob_block_invoke( uint64_t a1, uint64_t a2)
{
}

void ___ZN16ContextHarvester25encodeProgramLinkSequenceEjRK11ProgramInfob_block_invoke_2( uint64_t a1, uint64_t a2)
{
}

void ContextHarvester::encode_r(ContextHarvester *this, uint64_t a2, uint64_t a3, void *a4, const char *a5, ...)
{
  char v6 = (char)a4;
  va_copy(v21, va);
  GPUTools::FB::VAListArgumentProvider::VAListArgumentProvider((GPUTools::FB::VAListArgumentProvider *)v20, va);
  GPUTools::FB::Encode(*((void *)this + 2) + 120LL, a2, a3, a5, v20);
  GPUTools::FB::Encode(*((void *)this + 2) + 120LL, 4294955008LL, (uint64_t)"ul", v10, v11, v12, v13, v14, v6);
  uint64_t v15 = (GPUTools::FB::Stream *)*((void *)this + 5);
  unint64_t v16 = (GPUTools::FB::Fbuf *)(*((void *)this + 2) + 120LL);
  uint64_t v17 = (unsigned int *)((char *)v15 + 56);
  do
    unsigned int v18 = __ldaxr(v17);
  while (__stlxr(1u, v17));
  if (v18 == 1)
  {
    do
    {
      while (*v17 == 1)
        ;
      do
        unsigned int v19 = __ldaxr(v17);
      while (__stlxr(1u, v17));
    }

    while (v19 == 1);
  }

  GPUTools::FB::Stream::Write_nolock(v15, v16, **(unsigned int **)v16, 1);
  atomic_store(0, v17);
  GPUTools::FB::VAListArgumentProvider::~VAListArgumentProvider((GPUTools::FB::VAListArgumentProvider *)v20);
}

void sub_1B1E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_1B200(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void ContextHarvester::harvestGLSLPrograms_LinkedStatePass( ContextHarvester *this, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  if (!*((void *)this + 51)) {
    __assert_rtn( "void ContextHarvester::harvestGLSLPrograms_LinkedStatePass()",  (const char *)&unk_1F0B16,  0,  "_programObjects.valid()");
  }
  ContextHarvester::encodeCommand( this,  4294955015LL,  3u,  a4,  a5,  65028LL,  kDYStateGroupGLSLPrograms_LinkedStatePass,  65030LL,  0LL,  65030LL,  0LL);
  uint64_t v9 = **((unsigned int **)this + 51);
  if ((_DWORD)v9)
  {
    uint64_t v10 = (unsigned int *)*((void *)this + 52);
    uint64_t v11 = 8 * v9;
    do
    {
      ContextHarvester::harvestGLSLProgramLinkedState(this, *v10, v6, v7, v8);
      v10 += 2;
      v11 -= 8LL;
    }

    while (v11);
  }

  ContextHarvester::encodeCommand(this, 4294955016LL, 0, v7, v8);
}

void sub_1B2D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
}

void ProgramInfo::~ProgramInfo(ProgramInfo *this)
{
  uint64_t v2 = (void *)*((void *)this + 43);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }

    while (v3);
  }

  uint64_t v4 = (void *)*((void *)this + 41);
  *((void *)this + 41) = 0LL;
  if (v4) {
    operator delete(v4);
  }
  uint64_t v5 = *((void *)this + 37);
  if (v5)
  {
    uint64_t v6 = *((void *)this + 38);
    char v7 = (void *)*((void *)this + 37);
    if (v6 != v5)
    {
      do
      {
        v6 -= 24LL;
      }

      while (v6 != v5);
      char v7 = (void *)*((void *)this + 37);
    }

    *((void *)this + 3_Block_object_dispose(va, 8) = v5;
    operator delete(v7);
  }

  ProgramPipelineInfo::~ProgramPipelineInfo((ProgramInfo *)((char *)this + 144));
  ProgramPipelineInfo::~ProgramPipelineInfo(this);
}

void ContextHarvester::harvestGLSLPrograms_CurrentStatePass( ContextHarvester *this, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  if (!*((void *)this + 51)) {
    __assert_rtn( "void ContextHarvester::harvestGLSLPrograms_CurrentStatePass()",  (const char *)&unk_1F0B16,  0,  "_programObjects.valid()");
  }
  ContextHarvester::encodeCommand( this,  4294955015LL,  3u,  a4,  a5,  65028LL,  kDYStateGroupGLSLPrograms_CurrentStatePass,  65030LL,  0LL,  65030LL,  0LL);
  uint64_t v9 = **((unsigned int **)this + 51);
  if ((_DWORD)v9)
  {
    uint64_t v10 = (unsigned int *)*((void *)this + 52);
    uint64_t v11 = 8 * v9;
    do
    {
      ContextHarvester::harvestGLSLProgramCurrentState((ContextInfo **)this, *v10, v6, v7, v8);
      v10 += 2;
      v11 -= 8LL;
    }

    while (v11);
  }

  ContextHarvester::encodeCommand(this, 4294955016LL, 0, v7, v8);
}

void sub_1B450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
}

void ContextHarvester::encodeCreateGLSLTempShader( uint64_t a1, unsigned int *a2, uint64_t a3, char a4, uint64_t a5)
{
  if (*((_BYTE *)a2 + 8))
  {
    char v7 = (void *)*(unsigned int *)(a1 + 308);
    *(_DWORD *)(a1 + 30_Block_object_dispose(va, 8) = (_DWORD)v7 + 1;
    a2[1] = v7;
    ContextHarvester::encodeCommand( (ContextHarvester *)a1,  4294955015LL,  3u,  a4,  a5,  65028LL,  kDYStateGroupGLSLShader,  65030LL,  v7,  65030LL,  *a2);
    ContextHarvester::encode_r((ContextHarvester *)a1, 117LL, 2048LL, v7, "Ce", **(void **)(a1 + 16), *a2);
    ContextHarvester::encodeCommand((ContextHarvester *)a1, 4294955016LL, 0, v8, v9);
  }

void sub_1B520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
}

void ContextHarvester::harvestGLSLShaders( ContextHarvester *this, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  if (!*((void *)this + 49)) {
    __assert_rtn("void ContextHarvester::harvestGLSLShaders()", (const char *)&unk_1F0B16, 0, "_shaderObjects.valid()");
  }
  if (!*((void *)this + 51)) {
    __assert_rtn("void ContextHarvester::harvestGLSLShaders()", (const char *)&unk_1F0B16, 0, "_programObjects.valid()");
  }
  ContextHarvester::encodeCommand( this,  4294955015LL,  3u,  a4,  a5,  65028LL,  kDYStateGroupGLSLShaders,  65030LL,  0LL,  65030LL,  0LL);
  uint64_t v9 = **((unsigned int **)this + 49);
  if ((_DWORD)v9)
  {
    uint64_t v10 = (unsigned int *)*((void *)this + 50);
    uint64_t v11 = 8 * v9;
    do
    {
      ContextHarvester::harvestGLSLShader(this, *v10);
      v10 += 2;
      v11 -= 8LL;
    }

    while (v11);
    LODWORD(v9) = **((_DWORD **)this + 49);
    if ((_DWORD)v9) {
      LODWORD(v9) = *(_DWORD *)(*((void *)this + 50) + 8LL * (v9 - 1));
    }
  }

  unsigned int v12 = **((_DWORD **)this + 51);
  if (v12) {
    unsigned int v12 = *(_DWORD *)(*((void *)this + 52) + 8LL * (v12 - 1));
  }
  else {
    int v13 = 1000;
  }
  *((_DWORD *)this + 77) = v13;
  ContextHarvester::encodeCreateGLSLTempShader((uint64_t)this, (unsigned int *)this + 62, v6, v7, v8);
  ContextHarvester::encodeCreateGLSLTempShader((uint64_t)this, (unsigned int *)this + 71, v14, v15, v16);
  ContextHarvester::encodeCreateGLSLTempShader((uint64_t)this, (unsigned int *)this + 74, v17, v18, v19);
  ContextHarvester::encodeCreateGLSLTempShader((uint64_t)this, (unsigned int *)this + 68, v20, v21, v22);
  ContextHarvester::encodeCreateGLSLTempShader((uint64_t)this, (unsigned int *)this + 65, v23, v24, v25);
  ContextHarvester::encodeCommand(this, 4294955016LL, 0, v26, v27);
}

void sub_1B6B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
}

void sub_1B6C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
}

void ContextHarvester::harvestGLSLShaderLabels( ContextHarvester *this, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  if (!*((void *)this + 49)) {
    __assert_rtn( "void ContextHarvester::harvestGLSLShaderLabels()",  (const char *)&unk_1F0B16,  0,  "_shaderObjects.valid()");
  }
  ContextHarvester::encodeCommand( this,  4294955015LL,  3u,  a4,  a5,  65028LL,  kDYStateGroupGLSLShaderLabels,  65030LL,  0LL,  65030LL,  0LL);
  uint64_t v8 = **((unsigned int **)this + 49);
  if ((_DWORD)v8)
  {
    uint64_t v9 = (int *)*((void *)this + 50);
    uint64_t v10 = 8 * v8;
    do
    {
      ContextHarvester::harvestObjectLabel(this, 0x8B48u, *v9);
      v9 += 2;
      v10 -= 8LL;
    }

    while (v10);
  }

  ContextHarvester::encodeCommand(this, 4294955016LL, 0, v6, v7);
}

void sub_1B7A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
}

void ContextHarvester::encodeGLSLShaderDeletes( ContextHarvester *this, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  if (!*((void *)this + 49)) {
    __assert_rtn( "void ContextHarvester::encodeGLSLShaderDeletes()",  (const char *)&unk_1F0B16,  0,  "_shaderObjects.valid()");
  }
  char v18 = this;
  ContextHarvester::encodeCommand( this,  4294955015LL,  3u,  a4,  a5,  65028LL,  kDYStateGroupGLSLShaderDeletes,  65030LL,  0LL,  65030LL,  0LL);
  uint64_t v8 = **((unsigned int **)this + 49);
  if ((_DWORD)v8)
  {
    uint64_t v9 = (unsigned int *)*((void *)this + 50);
    uint64_t v10 = 8 * v8;
    do
    {
      uint64_t v11 = *v9;
      (*(void (**)(void, uint64_t, uint64_t, int *))(*((void *)this + 4) + 5256LL))( *(void *)(*((void *)this + 3) + 16LL),  v11,  35712LL,  &v17);
      if (v17 == 1) {
        ContextHarvester::encode(this, 123LL, 0LL, "Cul", **((void **)this + 2), v11);
      }
      v9 += 2;
      v10 -= 8LL;
    }

    while (v10);
  }

  uint64_t v12 = *((unsigned int *)this + 63);
  if ((_DWORD)v12)
  {
    ContextHarvester::encode(this, 123LL, 2048LL, "Cul", **((void **)this + 2), v12);
    *((_DWORD *)this + 63) = 0;
  }

  uint64_t v13 = *((unsigned int *)this + 66);
  if ((_DWORD)v13)
  {
    ContextHarvester::encode(this, 123LL, 2048LL, "Cul", **((void **)this + 2), v13);
    *((_DWORD *)this + 66) = 0;
  }

  uint64_t v14 = *((unsigned int *)this + 69);
  if ((_DWORD)v14)
  {
    ContextHarvester::encode(this, 123LL, 2048LL, "Cul", **((void **)this + 2), v14);
    *((_DWORD *)this + 69) = 0;
  }

  uint64_t v15 = *((unsigned int *)this + 72);
  if ((_DWORD)v15)
  {
    ContextHarvester::encode(this, 123LL, 2048LL, "Cul", **((void **)this + 2), v15);
    *((_DWORD *)this + 72) = 0;
  }

  uint64_t v16 = *((unsigned int *)this + 75);
  if ((_DWORD)v16)
  {
    ContextHarvester::encode(this, 123LL, 2048LL, "Cul", **((void **)this + 2), v16);
    *((_DWORD *)this + 75) = 0;
  }

  ContextHarvester::encodeCommand(this, 4294955016LL, 0, v6, v7);
}

void sub_1B9C8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
}

void sub_1B9DC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
}

void sub_1B9F0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
}

void ContextHarvester::encodeWithError( ContextHarvester *this, uint64_t a2, uint64_t a3, GPUTools::FB::Fbuf *a4, const char *a5, ...)
{
  if ((_DWORD)a4) {
    GPUTools::FB::EncodeGLError((GPUTools::FB *)(*((void *)this + 2) + 120LL), a4, v10);
  }
  uint64_t v11 = (GPUTools::FB::Stream *)*((void *)this + 5);
  uint64_t v12 = (GPUTools::FB::Fbuf *)(*((void *)this + 2) + 120LL);
  uint64_t v13 = (unsigned int *)((char *)v11 + 56);
  do
    unsigned int v14 = __ldaxr(v13);
  while (__stlxr(1u, v13));
  if (v14 == 1)
  {
    do
    {
      while (*v13 == 1)
        ;
      do
        unsigned int v15 = __ldaxr(v13);
      while (__stlxr(1u, v13));
    }

    while (v15 == 1);
  }

  GPUTools::FB::Stream::Write_nolock(v11, v12, **(unsigned int **)v12, 1);
  atomic_store(0, v13);
  GPUTools::FB::VAListArgumentProvider::~VAListArgumentProvider((GPUTools::FB::VAListArgumentProvider *)v16);
}

void sub_1BAF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_1BB0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void ContextHarvester::harvestUniformBufferBindings( unsigned int **this, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  va_list v17 = this;
  ContextHarvester::encodeCommand( (ContextHarvester *)this,  4294955015LL,  3u,  a4,  a5,  65028LL,  kDYStateGroupUniformBufferBindings,  65030LL,  0LL,  65030LL,  0LL);
  if (*((_DWORD *)this + 29))
  {
    uint64_t v8 = 0LL;
    do
    {
      (*((void (**)(void, uint64_t, uint64_t, unsigned int *))this[4] + 700))( *((void *)this[3] + 2),  35368LL,  v8,  &v16);
      (*((void (**)(void, uint64_t, uint64_t, uint64_t *))this[4] + 798))( *((void *)this[3] + 2),  35369LL,  v8,  &v15);
      (*((void (**)(void, uint64_t, uint64_t, uint64_t *))this[4] + 798))( *((void *)this[3] + 2),  35370LL,  v8,  &v14);
      uint64_t v9 = v16;
      uint64_t v11 = v14;
      uint64_t v10 = v15;
      if (v16)
      {
        GPUTools::NameTargetTupleArray::find(this + 41, v16, &v18);
        if (v18 == &this[42][2 * *this[41]]) {
          uint64_t v12 = (GPUTools::FB::Fbuf *)(&stru_4C0 + 65);
        }
        else {
          uint64_t v12 = 0LL;
        }
        uint64_t v13 = *(void *)this[2];
        if (v11 >= 1)
        {
LABEL_12:
          ContextHarvester::encodeWithError( (ContextHarvester *)this,  15LL,  0LL,  v12,  "Ceuiuill",  v13,  35345LL,  v8,  v9,  v10,  v11);
          goto LABEL_4;
        }
      }

      else
      {
        uint64_t v12 = 0LL;
        uint64_t v13 = *(void *)this[2];
        if (v14 >= 1) {
          goto LABEL_12;
        }
      }

      ContextHarvester::encodeWithError((ContextHarvester *)this, 13LL, 0LL, v12, "Ceuiui", v13, 35345LL, v8, v9);
LABEL_4:
      uint64_t v8 = (v8 + 1);
    }

    while (v8 < *((_DWORD *)this + 29));
  }

  ContextHarvester::encodeCommand((ContextHarvester *)this, 4294955016LL, 0, v6, v7);
}

void sub_1BCD4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

void ContextHarvester::getGenericVertexArrays(uint64_t **this, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v23 = (ContextHarvester *)this;
  ContextHarvester::encodeCommand( (ContextHarvester *)this,  4294955015LL,  3u,  a4,  a5,  65028LL,  kDYStateGroupGenericVertexArray,  65030LL,  a2,  65030LL,  0LL);
  ((void (*)(uint64_t, uint64_t, uint64_t, int *))this[4][516])(this[3][2], a2, 34338LL, &v22);
  ((void (*)(uint64_t, uint64_t, uint64_t, unsigned int *))this[4][516])(this[3][2], a2, 34975LL, &v21);
  if (*((_BYTE *)this[2] + 4854)) {
    ((void (*)(uint64_t, uint64_t, uint64_t, unsigned int *))this[4][516])(this[3][2], a2, 35070LL, &v20);
  }
  else {
    unsigned int v20 = 0;
  }
  if (v22) {
    uint64_t v7 = 155LL;
  }
  else {
    uint64_t v7 = 138LL;
  }
  ContextHarvester::encode((ContextHarvester *)this, v7, 0LL, "Cui", *this[2], a2);
  if (v21) {
    uint64_t v8 = 128LL;
  }
  else {
    uint64_t v8 = 130LL;
  }
  uint64_t v17 = 0LL;
  ((void (*)(uint64_t, uint64_t, uint64_t, unsigned int *))this[4][516])(this[3][2], a2, 34339LL, &v19);
  ((void (*)(uint64_t, uint64_t, uint64_t, unsigned int *))this[4][516])(this[3][2], a2, 34341LL, &v16);
  ((void (*)(uint64_t, uint64_t, uint64_t, unsigned int *))this[4][516])(this[3][2], a2, 34340LL, &v18);
  ((void (*)(uint64_t, uint64_t, uint64_t, char *))this[4][516])(this[3][2], a2, 34922LL, (char *)&v17 + 4);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t *))this[4][516])(this[3][2], a2, 35069LL, &v17);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t *))this[4][517])(this[3][2], a2, 34373LL, &v15);
  uint64_t v9 = this[2];
  if (*((_BYTE *)v9 + 4854)) {
    ContextHarvester::encode((ContextHarvester *)this, 833LL, 128LL, "Cuiui", *v9, a2, v20);
  }
  uint64_t v10 = v21;
  else {
    uint64_t v11 = 0LL;
  }
  ContextHarvester::encodeWithError((ContextHarvester *)this, 12LL, v8, v11, "Ceui", *this[2], 34962LL, v10);
  uint64_t v12 = *this[2];
  if ((_DWORD)v17) {
    ContextHarvester::encode((ContextHarvester *)this, 729LL, v8, "Cuiieit", v12, a2, v19, v16, v18, v15);
  }
  else {
    ContextHarvester::encode( (ContextHarvester *)this,  730LL,  v8,  "Cuiieubit",  v12,  a2,  v19,  v16,  HIDWORD(v17),  v18,  v15);
  }
  ContextHarvester::encodeCommand((ContextHarvester *)this, 4294955016LL, 0, v13, v14);
}

void sub_1BFC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
}

void sub_1BFDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
}

void sub_1BFF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
}

void ContextHarvester::getFixedFunctionVertexArrays( ContextHarvester *this, unsigned int a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v7 = (const char *)*((void *)&gVertexArrays + 15 * a2);
  if (!v7) {
    goto LABEL_6;
  }
  uint64_t v8 = (char *)&gVertexArrays + 120 * a2;
  int v11 = *((_DWORD *)v8 + 28);
  uint64_t v10 = (BOOL *)(v8 + 112);
  int v9 = v11;
  if (v11 != -1)
  {
    if (!v9) {
      return;
    }
    goto LABEL_6;
  }

  BOOL v12 = is_extension_available(*((void *)this + 2), v7);
  *uint64_t v10 = v12;
  if (v12)
  {
LABEL_6:
    char v13 = (char *)&gVertexArrays + 120 * a2;
    int v15 = *((_DWORD *)v13 + 21);
    uint64_t v14 = (unsigned int *)(v13 + 84);
    if (v15 == 32888)
    {
      unsigned int v16 = *(_DWORD *)(*((void *)this + 2) + 3432LL);
      if (!v16) {
        return;
      }
    }

    else
    {
      unsigned int v16 = 1;
    }

    uint64_t v17 = 0LL;
    unsigned int v18 = (unsigned int *)((char *)&gVertexArrays + 120 * a2);
    uint64_t v40 = v18 + 24;
    uint64_t v41 = v18 + 23;
    uint64_t v38 = v18 + 26;
    uint64_t v39 = v18 + 25;
    unsigned int v36 = v18 + 20;
    uint64_t v37 = v18 + 22;
    uint64_t v19 = v16;
    do
    {
      uint64_t v20 = *v14;
      uint64_t v47 = this;
      ContextHarvester::encodeCommand( this,  4294955015LL,  3u,  a4,  a5,  65028LL,  kDYStateGroupFixedVertexArray,  65030LL,  v20,  65030LL,  v17);
      uint64_t v21 = *v14;
      if ((_DWORD)v21 == 32888)
      {
        ContextHarvester::encode( this,  4294955013LL,  128LL,  "Ceui",  **((void **)this + 2),  *(unsigned int *)(*((void *)this + 2) + 3436LL),  v17);
        (*(void (**)(void, uint64_t))(*((void *)this + 4) + 2728LL))( *(void *)(*((void *)this + 3) + 16LL),  v17 + 33984);
        ContextHarvester::encode(this, 44LL, 128LL, "Ce", **((void **)this + 2), v17 + 33984);
        uint64_t v21 = *v14;
      }

      int v22 = (*(uint64_t (**)(void, uint64_t))(*((void *)this + 4) + 1144LL))( *(void *)(*((void *)this + 3) + 16LL),  v21);
      (*(void (**)(void, void, unsigned int *))(*((void *)this + 4) + 832LL))( *(void *)(*((void *)this + 3) + 16LL),  *v41,  &v46);
      if (v22) {
        uint64_t v23 = 152LL;
      }
      else {
        uint64_t v23 = 135LL;
      }
      ContextHarvester::encode(this, v23, 0LL, "Ce", **((void **)this + 2), *v14);
      BOOL v24 = v46 == 0;
      int v25 = *v40;
      if ((*v40 & 0x80000000) != 0)
      {
        unsigned int v45 = v25 & 0x7FFFFFFF;
        uint64_t v26 = *v39;
        if ((v26 & 0x80000000) == 0)
        {
LABEL_18:
          (*(void (**)(void, uint64_t, unsigned int *))(*((void *)this + 4) + 832LL))( *(void *)(*((void *)this + 3) + 16LL),  v26,  &v44);
          uint64_t v27 = *v38;
          if ((v27 & 0x80000000) != 0) {
            goto LABEL_22;
          }
          goto LABEL_19;
        }
      }

      else
      {
        (*(void (**)(void, void, unsigned int *))(*((void *)this + 4) + 832LL))( *(void *)(*((void *)this + 3) + 16LL),  *v40,  &v45);
        uint64_t v26 = *v39;
        if ((v26 & 0x80000000) == 0) {
          goto LABEL_18;
        }
      }

      unsigned int v44 = v26 & 0x7FFFFFFF;
      uint64_t v27 = *v38;
      if ((v27 & 0x80000000) != 0)
      {
LABEL_22:
        unsigned int v43 = v27 & 0x7FFFFFFF;
        goto LABEL_23;
      }

void sub_1C488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
}

void sub_1C49C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
}

void sub_1C4B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
}

void sub_1C4C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
}

void sub_1C4D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
}

void sub_1C4F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
}

void sub_1C504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
}

void sub_1C518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
}

void ContextHarvester::setPixelBuffers(ContextHarvester *this, uint64_t a2, uint64_t a3, int a4)
{
  if (*(int *)(*((void *)this + 2) + 3460LL) >= 2)
  {
    (*(void (**)(void, uint64_t, uint64_t))(*((void *)this + 4) + 5136LL))( *(void *)(*((void *)this + 3) + 16LL),  35052LL,  a2);
    (*(void (**)(void, uint64_t, uint64_t))(*((void *)this + 4) + 5136LL))( *(void *)(*((void *)this + 3) + 16LL),  35051LL,  a3);
    if (a4)
    {
      if (*(_DWORD *)(*((void *)this + 2) + 2044LL) == (_DWORD)a2)
      {
        unsigned int v10 = 35052;
        int v11 = &v10;
        if (*((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned int,BOOL>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,BOOL>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>( (uint64_t)this + 64,  &v10,  (uint64_t)&std::piecewise_construct,  &v11)
             + 20))
          uint64_t v8 = 0LL;
        else {
          uint64_t v8 = (GPUTools::FB::Fbuf *)(&stru_4C0 + 66);
        }
      }

      else if ((_DWORD)a2 {
             && !(*(unsigned int (**)(void, uint64_t))(*((void *)this + 4) + 5160LL))( *(void *)(*((void *)this + 3) + 16LL),  a2))
      }
      {
        uint64_t v8 = (GPUTools::FB::Fbuf *)(&stru_4C0 + 66);
      }

      else
      {
        uint64_t v8 = 0LL;
      }

      ContextHarvester::encodeWithError(this, 12LL, 128LL, v8, "Ceui", **((void **)this + 2), 35052LL, a2);
      if (*(_DWORD *)(*((void *)this + 2) + 2040LL) == (_DWORD)a3)
      {
        unsigned int v10 = 35051;
        int v11 = &v10;
        if (*((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned int,BOOL>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,BOOL>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>( (uint64_t)this + 64,  &v10,  (uint64_t)&std::piecewise_construct,  &v11)
             + 20))
          int v9 = 0LL;
        else {
          int v9 = (GPUTools::FB::Fbuf *)(&stru_4C0 + 66);
        }
      }

      else if ((_DWORD)a3 {
             && !(*(unsigned int (**)(void, uint64_t))(*((void *)this + 4) + 5160LL))( *(void *)(*((void *)this + 3) + 16LL),  a3))
      }
      {
        int v9 = (GPUTools::FB::Fbuf *)(&stru_4C0 + 66);
      }

      else
      {
        int v9 = 0LL;
      }

      ContextHarvester::encodeWithError(this, 12LL, 128LL, v9, "Ceui", **((void **)this + 2), 35051LL, a3);
    }
  }

uint64_t ContextHarvester::isFramebufferHarvestable(uint64_t a1, uint64_t a2, unsigned int *a3, int a4)
{
  LODWORD(wrapper_cache_program_parameter(*((ContextInfo **)this + 2), v2, v3, v4) = a4;
  if ((*(unsigned int (**)(void, uint64_t))(*(void *)(a1 + 32) + 5400LL))( *(void *)(*(void *)(a1 + 24) + 16LL),  36160LL) != 36053) {
    return 1LL;
  }
  (*(void (**)(void, uint64_t, unsigned int *))(*(void *)(a1 + 32) + 5392LL))( *(void *)(*(void *)(a1 + 24) + 16LL),  1LL,  &v26);
  (*(void (**)(void, uint64_t, void))(*(void *)(a1 + 32) + 5376LL))( *(void *)(*(void *)(a1 + 24) + 16LL),  36160LL,  v26);
  if (!(_DWORD)v4)
  {
LABEL_37:
    BOOL v17 = (*(unsigned int (**)(void, uint64_t))(*(void *)(a1 + 32) + 5400LL))( *(void *)(*(void *)(a1 + 24) + 16LL),  36160LL) == 36053;
    uint64_t v18 = *(void *)(a1 + 32);
    uint64_t v19 = *(void (**)(void, uint64_t, uint64_t))(v18 + 5376);
    (*(void (**)(void, uint64_t, int *))(v18 + 832))( *(void *)(*(void *)(a1 + 24) + 16LL),  36006LL,  &v27);
    if (v27 != (_DWORD)a2) {
      v19(*(void *)(*(void *)(a1 + 24) + 16LL), 36160LL, a2);
    }
    (*(void (**)(void, uint64_t, unsigned int *))(*(void *)(a1 + 32) + 5384LL))( *(void *)(*(void *)(a1 + 24) + 16LL),  1LL,  &v26);
    return v17;
  }

  uint64_t v4 = v4;
  while (1)
  {
    int v8 = a3[2];
    if (v8 > 33303) {
      break;
    }
    if (v8)
    {
      if (v8 != 5890) {
        goto LABEL_42;
      }
      if (!(*(unsigned int (**)(void, void))(*(void *)(a1 + 32) + 1160LL))( *(void *)(*(void *)(a1 + 24) + 16LL),  a3[1])) {
        return 0LL;
      }
      if (!a3[7])
      {
        uint64_t v9 = a3[3];
        if ((int)v9 <= 34066)
        {
          if ((int)v9 <= 32878)
          {
            if ((_DWORD)v9 != 3552)
            {
              if ((_DWORD)v9 != 3553) {
                goto LABEL_43;
              }
              goto LABEL_30;
            }

            uint64_t v11 = *(void *)(a1 + 24);
LABEL_33:
            uint64_t v13 = *(void *)(v11 + 16);
            uint64_t v14 = *a3;
            uint64_t v15 = a3[1];
            uint64_t v16 = a3[5];
LABEL_35:
            v12(v13, 36160LL, v14, v9, v15, v16);
            goto LABEL_5;
          }

          if ((_DWORD)v9 != 32879)
          {
            if ((_DWORD)v9 != 34037) {
              goto LABEL_43;
            }
LABEL_30:
            uint64_t v11 = *(void *)(a1 + 24);
            goto LABEL_33;
          }
        }

        else if ((int)v9 <= 35865)
        {
          if ((_DWORD)v9 == 34067)
          {
            uint64_t v13 = *(void *)(*(void *)(a1 + 24) + 16LL);
            uint64_t v14 = *a3;
            uint64_t v15 = a3[1];
            uint64_t v9 = a3[4];
            uint64_t v16 = a3[5];
            goto LABEL_35;
          }

          int v10 = 35864;
LABEL_26:
          if ((_DWORD)v9 != v10) {
            goto LABEL_43;
          }
        }

        else if ((_DWORD)v9 != 37122)
        {
          if ((_DWORD)v9 == 37120) {
            goto LABEL_30;
          }
          int v10 = 35866;
          goto LABEL_26;
        }

        (*(void (**)(void, uint64_t, void, void, void, void))(*(void *)(a1 + 32) + 5528LL))( *(void *)(*(void *)(a1 + 24) + 16LL),  36160LL,  *a3,  a3[1],  a3[5],  a3[6]);
        goto LABEL_5;
      }

      (*(void (**)(void, uint64_t, void, void, void))(*(void *)(a1 + 32) + 5520LL))( *(void *)(*(void *)(a1 + 24) + 16LL),  36160LL,  *a3,  a3[1],  a3[5]);
    }

LABEL_5:
    a3 += 8;
    if (!--v4) {
      goto LABEL_37;
    }
  }

  if (v8 == 33304) {
    goto LABEL_5;
  }
  if (v8 == 36161)
  {
    if (!(*(unsigned int (**)(void, void))(*(void *)(a1 + 32) + 5320LL))( *(void *)(*(void *)(a1 + 24) + 16LL),  a3[1])) {
      return 0LL;
    }
    (*(void (**)(void, uint64_t, void, void, void))(*(void *)(a1 + 32) + 5432LL))( *(void *)(*(void *)(a1 + 24) + 16LL),  36160LL,  *a3,  a3[3],  a3[1]);
    goto LABEL_5;
  }

void ContextHarvester::harvestQueryObject( GPUTools::FB::Stream **this, uint64_t a2, unsigned int a3, char a4, uint64_t a5)
{
  unsigned int v29 = a3;
  if (!a3) {
    __assert_rtn( "void ContextHarvester::harvestQueryObject(GLenum, GLuint)",  (const char *)&unk_1F0B16,  0,  "objectID != 0");
  }
  uint64_t v28 = this;
  ContextHarvester::encodeCommand( (ContextHarvester *)this,  4294955015LL,  3u,  a4,  a5,  65028LL,  kDYStateGroupQuery,  65030LL,  a3,  65030LL,  a2);
  GPUTools::FB::Encode((uint64_t)this[2] + 120, 206LL, 0LL, (uint64_t)"Ci@1ui", v7, v8, v9, v10, *(void *)this[2]);
  uint64_t v11 = this[5];
  BOOL v12 = (GPUTools::FB::Stream *)((char *)this[2] + 120);
  uint64_t v13 = (unsigned int *)((char *)v11 + 56);
  do
    unsigned int v14 = __ldaxr(v13);
  while (__stlxr(1u, v13));
  if (v14 == 1)
  {
    do
    {
      while (*v13 == 1)
        ;
      do
        unsigned int v15 = __ldaxr(v13);
      while (__stlxr(1u, v13));
    }

    while (v15 == 1);
  }

  GPUTools::FB::Stream::Write_nolock(v11, v12, **(unsigned int **)v12, 1);
  atomic_store(0, v13);
  ContextHarvester::encodeCommandEx((ContextHarvester *)this, 9LL, 0x100u, 2u, v16, v17, v18, 529413LL, a2, 5125LL, v29);
  ContextHarvester::harvestObjectLabel((ContextHarvester *)this, 0x9153u, v29);
  (*((void (**)(void, void, uint64_t, int *))this[4] + 641))(*((void *)this[3] + 2), v29, 34919LL, &v27);
  if (v27)
  {
    (*((void (**)(void, void, uint64_t, unsigned int *))this[4] + 641))( *((void *)this[3] + 2),  v29,  34918LL,  &v26);
    ContextHarvester::encodeCommandEx((ContextHarvester *)this, 159LL, 0x100u, 1u, v21, v22, v23, 529413LL, a2);
    ContextHarvester::encodeCommand( (ContextHarvester *)this,  4294955024LL,  4u,  v24,  v25,  5124LL,  10LL,  529413LL,  a2,  5125LL,  v29,  5125LL,  v26);
  }

  ContextHarvester::encodeCommand((ContextHarvester *)v28, 4294955016LL, 0, v19, v20);
}

void sub_1CC1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
}

void sub_1CC30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
}

void sub_1CC48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
}

void sub_1CC5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
}

void ContextHarvester::harvestSamplingParameters<TextureParameterEncoder>(uint64_t a1, unsigned int *a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (*(int *)(v4 + 3460) >= 2)
  {
    (*(void (**)(void, void, uint64_t, float *))(*(void *)(*(void *)a2 + 32LL) + 1016LL))( *(void *)(*(void *)(*(void *)a2 + 24LL) + 16LL),  a2[2],  32882LL,  v5);
    ContextHarvester::encode( *(ContextHarvester **)a2,  600LL,  0LL,  "Ceee",  **(void **)(*(void *)a2 + 16LL),  a2[2],  32882LL,  LODWORD(v5[0]));
    (*(void (**)(void, void, uint64_t, float *))(*(void *)(*(void *)a2 + 32LL) + 1008LL))( *(void *)(*(void *)(*(void *)a2 + 24LL) + 16LL),  a2[2],  33082LL,  v5);
    ContextHarvester::encode( *(ContextHarvester **)a2,  598LL,  0LL,  "Ceef",  **(void **)(*(void *)a2 + 16LL),  a2[2],  33082LL,  v5[0]);
    (*(void (**)(void, void, uint64_t, float *))(*(void *)(*(void *)a2 + 32LL) + 1008LL))( *(void *)(*(void *)(*(void *)a2 + 24LL) + 16LL),  a2[2],  33083LL,  v5);
    ContextHarvester::encode( *(ContextHarvester **)a2,  598LL,  0LL,  "Ceef",  **(void **)(*(void *)a2 + 16LL),  a2[2],  33083LL,  v5[0]);
    uint64_t v4 = *(void *)(a1 + 16);
  }

  if (*(_BYTE *)(v4 + 4844))
  {
    (*(void (**)(void, void, uint64_t, float *))(*(void *)(*(void *)a2 + 32LL) + 1008LL))( *(void *)(*(void *)(*(void *)a2 + 24LL) + 16LL),  a2[2],  34049LL,  v5);
    ContextHarvester::encode( *(ContextHarvester **)a2,  598LL,  0LL,  "Ceef",  **(void **)(*(void *)a2 + 16LL),  a2[2],  34049LL,  v5[0]);
    (*(void (**)(void, void, uint64_t, float *))(*(void *)(*(void *)a2 + 32LL) + 1008LL))( *(void *)(*(void *)(*(void *)a2 + 24LL) + 16LL),  a2[2],  4100LL,  v5);
    ContextHarvester::encode( *(ContextHarvester **)a2,  599LL,  0LL,  "Cee@4f",  **(void **)(*(void *)a2 + 16LL),  a2[2],  4100LL,  v5);
    uint64_t v4 = *(void *)(a1 + 16);
  }

  if (*(_BYTE *)(v4 + 4860))
  {
    (*(void (**)(void, void, uint64_t, float *))(*(void *)(*(void *)a2 + 32LL) + 1016LL))( *(void *)(*(void *)(*(void *)a2 + 24LL) + 16LL),  a2[2],  34892LL,  v5);
    ContextHarvester::encode( *(ContextHarvester **)a2,  600LL,  0LL,  "Ceee",  **(void **)(*(void *)a2 + 16LL),  a2[2],  34892LL,  LODWORD(v5[0]));
    (*(void (**)(void, void, uint64_t, float *))(*(void *)(*(void *)a2 + 32LL) + 1016LL))( *(void *)(*(void *)(*(void *)a2 + 24LL) + 16LL),  a2[2],  34893LL,  v5);
    ContextHarvester::encode( *(ContextHarvester **)a2,  600LL,  0LL,  "Ceee",  **(void **)(*(void *)a2 + 16LL),  a2[2],  34893LL,  LODWORD(v5[0]));
    uint64_t v4 = *(void *)(a1 + 16);
  }

  if (!is_extension_available(v4, "GL_EXT_texture_filter_anisotropic"))
  {
    if (!is_extension_available(*(void *)(a1 + 16), "GL_EXT_texture_sRGB_decode")) {
      return;
    }
LABEL_11:
    (*(void (**)(void, void, uint64_t, float *))(*(void *)(*(void *)a2 + 32LL) + 1016LL))( *(void *)(*(void *)(*(void *)a2 + 24LL) + 16LL),  a2[2],  35400LL,  v5);
    ContextHarvester::encode( *(ContextHarvester **)a2,  600LL,  0LL,  "Ceee",  **(void **)(*(void *)a2 + 16LL),  a2[2],  35400LL,  LODWORD(v5[0]));
    return;
  }

  (*(void (**)(void, void, uint64_t, float *))(*(void *)(*(void *)a2 + 32LL) + 1008LL))( *(void *)(*(void *)(*(void *)a2 + 24LL) + 16LL),  a2[2],  34046LL,  v5);
  ContextHarvester::encode( *(ContextHarvester **)a2,  598LL,  0LL,  "Ceef",  **(void **)(*(void *)a2 + 16LL),  a2[2],  34046LL,  v5[0]);
  if (is_extension_available(*(void *)(a1 + 16), "GL_EXT_texture_sRGB_decode")) {
    goto LABEL_11;
  }
}

void ContextHarvester::harvestSampler( ContextHarvester *this, unsigned int a2, uint64_t a3, char a4, uint64_t a5)
{
  unsigned int v11 = a2;
  if (!a2) {
    __assert_rtn("void ContextHarvester::harvestSampler(GLuint)", (const char *)&unk_1F0B16, 0, "name != 0");
  }
  uint64_t v10 = this;
  ContextHarvester::encodeCommand( this,  4294955015LL,  3u,  a4,  a5,  65028LL,  kDYStateGroupSampler,  65030LL,  a2,  65030LL,  0LL);
  ContextHarvester::encode(this, 858LL, 0LL, "Ci@1ui", **((void **)this + 2), 1LL, &v11);
  ContextHarvester::encode(this, 850LL, 128LL, "Cuiui", **((void **)this + 2), 0LL, v11);
  ContextHarvester::harvestObjectLabel(this, 0x82E6u, v11);
  uint64_t v8 = this;
  unsigned int v9 = v11;
  ContextHarvester::harvestSamplingParameters<SamplerParameterEncoder>((uint64_t)this, (unsigned int *)&v8);
  ContextHarvester::encodeCommand(this, 4294955016LL, 0, v6, v7);
}

void sub_1D2C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
}

void sub_1D2DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
}

void ContextHarvester::harvestSamplingParameters<SamplerParameterEncoder>(uint64_t a1, unsigned int *a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (*(int *)(v4 + 3460) >= 2)
  {
    (*(void (**)(void, void, uint64_t, float *))(*(void *)(*(void *)a2 + 32LL) + 6480LL))( *(void *)(*(void *)(*(void *)a2 + 24LL) + 16LL),  a2[2],  32882LL,  v5);
    ContextHarvester::encode( *(ContextHarvester **)a2,  872LL,  0LL,  "Cuiee",  **(void **)(*(void *)a2 + 16LL),  a2[2],  32882LL,  LODWORD(v5[0]));
    (*(void (**)(void, void, uint64_t, float *))(*(void *)(*(void *)a2 + 32LL) + 6488LL))( *(void *)(*(void *)(*(void *)a2 + 24LL) + 16LL),  a2[2],  33082LL,  v5);
    ContextHarvester::encode( *(ContextHarvester **)a2,  870LL,  0LL,  "Cuief",  **(void **)(*(void *)a2 + 16LL),  a2[2],  33082LL,  v5[0]);
    (*(void (**)(void, void, uint64_t, float *))(*(void *)(*(void *)a2 + 32LL) + 6488LL))( *(void *)(*(void *)(*(void *)a2 + 24LL) + 16LL),  a2[2],  33083LL,  v5);
    ContextHarvester::encode( *(ContextHarvester **)a2,  870LL,  0LL,  "Cuief",  **(void **)(*(void *)a2 + 16LL),  a2[2],  33083LL,  v5[0]);
    uint64_t v4 = *(void *)(a1 + 16);
  }

  if (*(_BYTE *)(v4 + 4844))
  {
    (*(void (**)(void, void, uint64_t, float *))(*(void *)(*(void *)a2 + 32LL) + 6488LL))( *(void *)(*(void *)(*(void *)a2 + 24LL) + 16LL),  a2[2],  34049LL,  v5);
    ContextHarvester::encode( *(ContextHarvester **)a2,  870LL,  0LL,  "Cuief",  **(void **)(*(void *)a2 + 16LL),  a2[2],  34049LL,  v5[0]);
    (*(void (**)(void, void, uint64_t, float *))(*(void *)(*(void *)a2 + 32LL) + 6488LL))( *(void *)(*(void *)(*(void *)a2 + 24LL) + 16LL),  a2[2],  4100LL,  v5);
    ContextHarvester::encode( *(ContextHarvester **)a2,  871LL,  0LL,  "Cee@4f",  **(void **)(*(void *)a2 + 16LL),  a2[2],  4100LL,  v5);
    uint64_t v4 = *(void *)(a1 + 16);
  }

  if (*(_BYTE *)(v4 + 4860))
  {
    (*(void (**)(void, void, uint64_t, float *))(*(void *)(*(void *)a2 + 32LL) + 6480LL))( *(void *)(*(void *)(*(void *)a2 + 24LL) + 16LL),  a2[2],  34892LL,  v5);
    ContextHarvester::encode( *(ContextHarvester **)a2,  872LL,  0LL,  "Cuiee",  **(void **)(*(void *)a2 + 16LL),  a2[2],  34892LL,  LODWORD(v5[0]));
    (*(void (**)(void, void, uint64_t, float *))(*(void *)(*(void *)a2 + 32LL) + 6480LL))( *(void *)(*(void *)(*(void *)a2 + 24LL) + 16LL),  a2[2],  34893LL,  v5);
    ContextHarvester::encode( *(ContextHarvester **)a2,  872LL,  0LL,  "Cuiee",  **(void **)(*(void *)a2 + 16LL),  a2[2],  34893LL,  LODWORD(v5[0]));
    uint64_t v4 = *(void *)(a1 + 16);
  }

  if (!is_extension_available(v4, "GL_EXT_texture_filter_anisotropic"))
  {
    if (!is_extension_available(*(void *)(a1 + 16), "GL_EXT_texture_sRGB_decode")) {
      return;
    }
LABEL_11:
    (*(void (**)(void, void, uint64_t, float *))(*(void *)(*(void *)a2 + 32LL) + 6480LL))( *(void *)(*(void *)(*(void *)a2 + 24LL) + 16LL),  a2[2],  35400LL,  v5);
    ContextHarvester::encode( *(ContextHarvester **)a2,  872LL,  0LL,  "Cuiee",  **(void **)(*(void *)a2 + 16LL),  a2[2],  35400LL,  LODWORD(v5[0]));
    return;
  }

  (*(void (**)(void, void, uint64_t, float *))(*(void *)(*(void *)a2 + 32LL) + 6488LL))( *(void *)(*(void *)(*(void *)a2 + 24LL) + 16LL),  a2[2],  34046LL,  v5);
  ContextHarvester::encode( *(ContextHarvester **)a2,  870LL,  0LL,  "Cuief",  **(void **)(*(void *)a2 + 16LL),  a2[2],  34046LL,  v5[0]);
  if (is_extension_available(*(void *)(a1 + 16), "GL_EXT_texture_sRGB_decode")) {
    goto LABEL_11;
  }
}

void ContextHarvester::harvestSyncObject( GPUTools::FB::Stream **this, unsigned int a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v7 = a2;
  unsigned int v29 = this;
  ContextHarvester::encodeCommand( (ContextHarvester *)this,  4294955015LL,  3u,  a4,  a5,  65028LL,  kDYStateGroupSyncObject,  65030LL,  a2,  65030LL,  0LL);
  (*((void (**)(void, uint64_t, uint64_t, uint64_t, void, unsigned int *))this[4] + 785))( *((void *)this[3] + 2),  v7,  37138LL,  1LL,  0LL,  &v28);
  (*((void (**)(void, uint64_t, uint64_t, uint64_t, void, char *))this[4] + 785))( *((void *)this[3] + 2),  v7,  37140LL,  1LL,  0LL,  v27);
  (*((void (**)(void, uint64_t, uint64_t, uint64_t, void, int *))this[4] + 785))( *((void *)this[3] + 2),  v7,  37139LL,  1LL,  0LL,  &v26);
  (*((void (**)(void, uint64_t, uint64_t, uint64_t, void, int *))this[4] + 785))( *((void *)this[3] + 2),  v7,  37141LL,  1LL,  0LL,  &v25);
  if (v28 == 37142)
  {
    GPUTools::FB::Encode((uint64_t)this[2] + 120, 881LL, 0LL, (uint64_t)"Ceui", v8, v9, v10, v11, *(void *)this[2]);
    GPUTools::FB::Encode((uint64_t)this[2] + 120, 4294955008LL, (uint64_t)"Y", v12, v13, v14, v15, v16, v7);
    uint64_t v17 = this[5];
    uint64_t v18 = (GPUTools::FB::Stream *)((char *)this[2] + 120);
    char v19 = (unsigned int *)((char *)v17 + 56);
    do
      unsigned int v20 = __ldaxr(v19);
    while (__stlxr(1u, v19));
    if (v20 == 1)
    {
      do
      {
        while (*v19 == 1)
          ;
        do
          unsigned int v21 = __ldaxr(v19);
        while (__stlxr(1u, v19));
      }

      while (v21 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v17, v18, **(unsigned int **)v18, 1);
    atomic_store(0, v19);
    ContextHarvester::harvestObjectLabel((ContextHarvester *)this, 0x8A53u, a2);
    ContextHarvester::encodeCommand((ContextHarvester *)v29, 4294955016LL, 0, v22, v23);
  }

  else
  {
    char v24 = (const char *)dy_string_from_enum(v28);
    dy_abort("unknown or unsupported sync object type: %s (0x%04x)", v24, v28);
    __break(1u);
  }

void sub_1DA1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
}

void sub_1DA34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
}

void sub_1DAB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void ContextHarvester::harvestXfbObject(ContextHarvester *this, uint64_t a2)
{
  unsigned int v2 = a2;
  unsigned int v25 = a2;
  (*(void (**)(void, uint64_t, uint64_t))(*((void *)this + 4) + 7232LL))( *(void *)(*((void *)this + 3) + 16LL),  36386LL,  a2);
  (*(void (**)(void, uint64_t, unsigned __int8 *))(*((void *)this + 4) + 792LL))( *(void *)(*((void *)this + 3) + 16LL),  36388LL,  &v24);
  uint64_t v23 = this;
  ContextHarvester::encodeCommand(this, 4294955015LL, 3u, v4, v5, 65028LL, kDYStateGroupXfb, 65030LL, v2, 65030LL, v24);
  if (v2)
  {
    ContextHarvester::encode(this, 987LL, 0LL, "Ci@1ui", **((void **)this + 2), 1LL, &v25);
    uint64_t v6 = v25;
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  ContextHarvester::encode(this, 980LL, 128LL, "Ceui", **((void **)this + 2), 36386LL, v6);
  ContextHarvester::harvestObjectLabel(this, 0x8E22u, v25);
  if (*((_DWORD *)this + 28))
  {
    uint64_t v7 = 0LL;
    do
    {
      (*(void (**)(void, uint64_t, uint64_t, unsigned int *))(*((void *)this + 4) + 5600LL))( *(void *)(*((void *)this + 3) + 16LL),  35983LL,  v7,  &v22);
      (*(void (**)(void, uint64_t, uint64_t, uint64_t *))(*((void *)this + 4) + 6384LL))( *(void *)(*((void *)this + 3) + 16LL),  35972LL,  v7,  &v21);
      (*(void (**)(void, uint64_t, uint64_t, uint64_t *))(*((void *)this + 4) + 6384LL))( *(void *)(*((void *)this + 3) + 16LL),  35973LL,  v7,  &v20);
      uint64_t v8 = v22;
      uint64_t v10 = v20;
      uint64_t v9 = v21;
      if (v22)
      {
        GPUTools::NameTargetTupleArray::find((unsigned int **)this + 41, v22, &v26);
        else {
          uint64_t v11 = 0LL;
        }
        uint64_t v12 = **((void **)this + 2);
        if (v10 >= 1)
        {
LABEL_15:
          ContextHarvester::encodeWithError(this, 15LL, 0LL, v11, "Ceuiuill", v12, 35982LL, v7, v8, v9, v10);
          goto LABEL_7;
        }
      }

      else
      {
        uint64_t v11 = 0LL;
        uint64_t v12 = **((void **)this + 2);
        if (v20 >= 1) {
          goto LABEL_15;
        }
      }

      ContextHarvester::encodeWithError(this, 13LL, 0LL, v11, "Ceuiui", v12, 35982LL, v7, v8);
LABEL_7:
      uint64_t v7 = (v7 + 1);
    }

    while (v7 < *((_DWORD *)this + 28));
  }

  uint64_t v21 = 0LL;
  [**((id **)this + 2) getParameter:1503 to:&v21];
  if (v24)
  {
    uint64_t v15 = *((void *)this + 2) + 3560LL;
    int v26 = &v25;
    uint64_t v16 = std::__hash_table<std::__hash_value_type<unsigned int,ActiveTransformFeedbackInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ActiveTransformFeedbackInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ActiveTransformFeedbackInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ActiveTransformFeedbackInfo>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>( v15,  &v25,  (uint64_t)&std::piecewise_construct,  &v26);
    ContextHarvester::encode(this, 645LL, 128LL, "Cul", **((void **)this + 2), *((unsigned int *)v16 + 5));
    uint64_t v17 = *((void *)this + 2);
    if (*(_BYTE *)(v17 + 4846))
    {
      uint64_t v18 = *((unsigned int *)v16 + 6);
      if ((_DWORD)v18
        && !(*(unsigned int (**)(void, uint64_t))(*((void *)this + 4) + 6600LL))( *(void *)(*((void *)this + 3) + 16LL),  v18))
      {
        char v19 = (GPUTools::FB::Fbuf *)(&stru_4C0 + 66);
      }

      else
      {
        char v19 = 0LL;
      }

      ContextHarvester::encodeWithError(this, 887LL, 128LL, v19, "Cui", **((void **)this + 2), v18);
      uint64_t v17 = *((void *)this + 2);
    }

    ContextHarvester::encode(this, 4294955026LL, 128LL, "Ceuii", *(void *)v17, 36386LL, 1LL, HIDWORD(v21));
    ContextHarvester::encodeWithError( this,  10LL,  128LL,  (GPUTools::FB::Fbuf *)((char *)&stru_4C0.flags + 2),  "Ce",  **((void **)this + 2),  v21);
    ContextHarvester::encode(this, 1004LL, 128LL, "C", **((void **)this + 2));
  }

  ContextHarvester::encodeCommand(this, 4294955016LL, 0, v13, v14);
}

void sub_1DE90( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
}

void sub_1DEA8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
}

void sub_1DEBC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
}

void sub_1DED0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
}

void sub_1DEE4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
}

void ContextHarvester::harvestGroupMarkers(ContextHarvester *this)
{
  if (is_extension_available(*((void *)this + 2), "GL_EXT_debug_marker"))
  {
    ContextHarvester::encodeCommand( this,  4294955015LL,  3u,  v2,  v3,  65028LL,  kDYStateGroupMarkers,  65030LL,  0LL,  65030LL,  0LL);
    uint64_t v8 = *((void *)this + 2);
    uint64_t v9 = *(uint64_t **)(v8 + 96);
    for (uint64_t i = *(uint64_t **)(v8 + 104); v9 != i; v9 += 3)
    {
      uint64_t v11 = v9;
      ContextHarvester::encodeCommandEx(this, 919LL, 0x180u, 2u, v5, v6, v7, 5125LL, 0LL, 65028LL, v11);
    }

    ContextHarvester::encodeCommand(this, 4294955016LL, 0, v4, v5);
  }

void sub_1DFDC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
}

void ContextHarvester::getGlobalState( ContextHarvester *this, uint64_t a2, int a3, uint64_t a4, unint64_t a5, void (*a6)(__GLIContextRec *, unsigned int, void *), uint64_t a7, int a8, BOOL a9)
{
  int v35 = a2;
  uint64_t v15 = (ContextHarvester *)((uint64_t (*)(void))a6)(*(void *)(*((void *)this + 3) + 16LL));
  if (a9)
  {
    ContextHarvester::encodeCommand( this,  a7,  2u,  v16,  v17,  529413LL,  a2,  a3 | 0x20000u,  a4,  *((void *)this + 70) + *((void *)this + 67));
  }

  else
  {
    uint64_t v18 = (_OWORD *)(*((void *)this + 2) + 4709LL);
    v18[2] = 0u;
    v18[3] = 0u;
    *uint64_t v18 = 0u;
    v18[1] = 0u;
    if ((_DWORD)a4 == a8)
    {
      char v19 = ContextHarvester::formatForStateBufferType(v15, a3, &v34);
      __int128 v31 = 0u;
      __int128 v32 = 0u;
      __int128 v33 = 0u;
      strlcpy((char *)(*((void *)this + 2) + 4709LL), "C", 0x40uLL);
      GPUTools::FB::FIFOPointerArgumentProvider::push( (GPUTools::FB::FIFOPointerArgumentProvider *)&v30,  *((void **)this + 2));
      if ((_DWORD)a4)
      {
        uint64_t v20 = 0LL;
        do
        {
          strlcat((char *)(*((void *)this + 2) + 4709LL), v19, 0x40uLL);
          GPUTools::FB::FIFOPointerArgumentProvider::push( (GPUTools::FB::FIFOPointerArgumentProvider *)&v30,  (void *)(*((void *)this + 70) + *((void *)this + 67) + v34 * v20++));
        }

        while (a4 != v20);
      }

      GPUTools::FB::Encode(*((void *)this + 2) + 120LL, a7, 0LL, *((void *)this + 2) + 4709LL, &v30);
      uint64_t v21 = (GPUTools::FB::Stream *)*((void *)this + 5);
      unsigned int v22 = (GPUTools::FB::Fbuf *)(*((void *)this + 2) + 120LL);
      uint64_t v23 = (unsigned int *)((char *)v21 + 56);
      do
        unsigned int v24 = __ldaxr(v23);
      while (__stlxr(1u, v23));
      if (v24 == 1)
      {
        do
        {
          while (*v23 == 1)
            ;
          do
            unsigned int v25 = __ldaxr(v23);
          while (__stlxr(1u, v23));
        }

        while (v25 == 1);
      }
    }

    else
    {
      int v26 = ContextHarvester::formatForStateBufferType(v15, a3, &v34);
      __int128 v31 = 0u;
      __int128 v32 = 0u;
      __int128 v33 = 0u;
      strlcpy((char *)(*((void *)this + 2) + 4709LL), "Ce", 0x40uLL);
      GPUTools::FB::FIFOPointerArgumentProvider::push( (GPUTools::FB::FIFOPointerArgumentProvider *)&v30,  *((void **)this + 2));
      GPUTools::FB::FIFOPointerArgumentProvider::push((GPUTools::FB::FIFOPointerArgumentProvider *)&v30, &v35);
      if ((_DWORD)a4)
      {
        uint64_t v27 = 0LL;
        do
        {
          strlcat((char *)(*((void *)this + 2) + 4709LL), v26, 0x40uLL);
          GPUTools::FB::FIFOPointerArgumentProvider::push( (GPUTools::FB::FIFOPointerArgumentProvider *)&v30,  (void *)(*((void *)this + 70) + *((void *)this + 67) + v34 * v27++));
        }

        while (a4 != v27);
      }

      GPUTools::FB::Encode(*((void *)this + 2) + 120LL, a7, 0LL, *((void *)this + 2) + 4709LL, &v30);
      uint64_t v21 = (GPUTools::FB::Stream *)*((void *)this + 5);
      unsigned int v22 = (GPUTools::FB::Fbuf *)(*((void *)this + 2) + 120LL);
      uint64_t v23 = (unsigned int *)((char *)v21 + 56);
      do
        unsigned int v28 = __ldaxr(v23);
      while (__stlxr(1u, v23));
      if (v28 == 1)
      {
        do
        {
          while (*v23 == 1)
            ;
          do
            unsigned int v29 = __ldaxr(v23);
          while (__stlxr(1u, v23));
        }

        while (v29 == 1);
      }
    }

    GPUTools::FB::Stream::Write_nolock(v21, v22, **(unsigned int **)v22, 1);
    atomic_store(0, v23);
    GPUTools::FB::FIFOPointerArgumentProvider::~FIFOPointerArgumentProvider((GPUTools::FB::FIFOPointerArgumentProvider *)&v30);
  }

void sub_1E308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

void sub_1E324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

void sub_1E338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

void sub_1E34C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

void sub_1E360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

const char *ContextHarvester::formatForStateBufferType(ContextHarvester *this, int a2, unint64_t *a3)
{
  uint64_t result = "b";
  unint64_t v4 = 1LL;
  switch(a2 & 0xFFE1FFFF)
  {
    case 0x1400u:
      if (a3) {
        goto LABEL_19;
      }
      return result;
    case 0x1401u:
      uint64_t result = "ub";
      unint64_t v4 = 1LL;
      if (a3) {
        goto LABEL_19;
      }
      return result;
    case 0x1402u:
      uint64_t result = "s";
      goto LABEL_6;
    case 0x1403u:
      uint64_t result = "us";
LABEL_6:
      unint64_t v4 = 2LL;
      if (!a3) {
        return result;
      }
      goto LABEL_19;
    case 0x1404u:
      uint64_t v5 = "e";
      uint64_t v6 = "i";
      goto LABEL_11;
    case 0x1405u:
      uint64_t v5 = "e";
      uint64_t v6 = "ui";
      goto LABEL_11;
    case 0x1406u:
      uint64_t v5 = "n";
      uint64_t v6 = "f";
LABEL_11:
      if ((a2 & 0x80000) != 0) {
        uint64_t result = v5;
      }
      else {
        uint64_t result = v6;
      }
      unint64_t v4 = 4LL;
      if (!a3) {
        return result;
      }
      goto LABEL_19;
    case 0x140Au:
      uint64_t result = "d";
      unint64_t v4 = 8LL;
      if (!a3) {
        return result;
      }
LABEL_19:
      *a3 = v4;
      break;
    default:
      uint64_t v7 = (ContextHarvester *)dy_abort("unknown state buffer core type: 0x%04X", a2);
      uint64_t result = (const char *)ContextHarvester::getGenericVertexAttrib(v7, v8);
      break;
  }

  return result;
}

void ContextHarvester::getGenericVertexAttrib(ContextHarvester *this, uint64_t a2)
{
  char v2 = (void *)*((void *)this + 2);
  unint64_t v3 = v2[451];
  if (!v3) {
    goto LABEL_21;
  }
  uint8x8_t v4 = (uint8x8_t)vcnt_s8((int8x8_t)v3);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = a2;
  }

  else
  {
    unint64_t v5 = ((_DWORD)v3 - 1) & a2;
  }

  uint64_t v6 = *(uint64_t ***)(v2[450] + 8 * v5);
  if (!v6 || (uint64_t v7 = *v6) == 0LL)
  {
LABEL_21:
    ContextHarvester::encode(this, 701LL, 0LL, "Cuiffff", *v2, a2, 0LL, 0LL, 0LL, 0x3FF0000000000000LL);
    return;
  }

  if (v4.u32[0] < 2uLL)
  {
    unint64_t v8 = v3 - 1;
    while (1)
    {
      uint64_t v10 = v7[1];
      if (v10 == a2)
      {
        if (*((_DWORD *)v7 + 4) == (_DWORD)a2) {
          goto LABEL_23;
        }
      }

      else if ((v10 & v8) != v5)
      {
        goto LABEL_21;
      }

      uint64_t v7 = (uint64_t *)*v7;
      if (!v7) {
        goto LABEL_21;
      }
    }
  }

  while (1)
  {
    unint64_t v9 = v7[1];
    if (v9 >= v3) {
      v9 %= v3;
    }
    if (v9 != v5) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v7 = (uint64_t *)*v7;
    if (!v7) {
      goto LABEL_21;
    }
  }

  if (*((_DWORD *)v7 + 4) != (_DWORD)a2) {
    goto LABEL_11;
  }
LABEL_23:
  int v11 = *((_DWORD *)v7 + 6);
  switch(v11)
  {
    case 5124:
      ContextHarvester::encode( this,  722LL,  0LL,  "Cuiiiii",  *v2,  a2,  (int)*((double *)v7 + 4),  (int)*((double *)v7 + 5),  (int)*((double *)v7 + 6),  (int)*((double *)v7 + 7));
      break;
    case 5125:
      ContextHarvester::encode( this,  726LL,  0LL,  "Cuiuiuiuiui",  *v2,  a2,  *((double *)v7 + 4),  *((double *)v7 + 5),  *((double *)v7 + 6),  *((double *)v7 + 7));
      break;
    case 5126:
      float v12 = *((double *)v7 + 4);
      float v13 = *((double *)v7 + 5);
      float v14 = *((double *)v7 + 6);
      float v15 = *((double *)v7 + 7);
      ContextHarvester::encode(this, 701LL, 0LL, "Cuiffff", *v2, a2, v12, v13, v14, v15);
      break;
    default:
      char v16 = (ContextHarvester *)dy_abort("unknown generic vertex attrib type: 0x%04X", *((_DWORD *)v7 + 6));
      ContextHarvester::harvestFixedFunctionGlobalState(v16);
      break;
  }

void ContextHarvester::harvestFixedFunctionGlobalState( ContextHarvester *this, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  int v103 = this;
  ContextHarvester::encodeCommand( this,  4294955015LL,  3u,  a4,  a5,  65028LL,  kDYStateGroupGlobalFixedFunctionState,  65030LL,  0LL,  65030LL,  0LL);
  ContextHarvester::harvestFixedFunctionTextureUnitState(this, v6, v7, v8, v9);
  ContextHarvester::harvestMatrix(this, 5889LL, 2983LL, 2980LL, 0LL);
  ContextHarvester::harvestMatrix(this, 5888LL, 2982LL, 2979LL, 0LL);
  if (is_extension_available(*((void *)this + 2), "GL_ARB_vertex_blend"))
  {
    (*(void (**)(void, uint64_t, ContextHarvester **))(*((void *)this + 4) + 832LL))( *(void *)(*((void *)this + 3) + 16LL),  34468LL,  &v101);
    ContextHarvester::harvestMatrix(this, 34058LL, 34058LL, 2979LL, 0LL);
    if ((int)v101 >= 3)
    {
      int v11 = 0;
      do
      {
        ContextHarvester::harvestMatrix(this, (v11 + 34594), (v11 + 34594), 2979LL, 0LL);
        ++v11;
      }

      while (v11 < (int)v101 - 2);
    }
  }

  ContextHarvester::getGlobalState( this,  2816LL,  5126,  4LL,  v10,  *(void (**)(__GLIContextRec *, unsigned int, void *))(*((void *)this + 4) + 824LL),  66LL,  4,  0);
  ContextHarvester::getGlobalState( this,  2818LL,  5126,  3LL,  v12,  *(void (**)(__GLIContextRec *, unsigned int, void *))(*((void *)this + 4) + 824LL),  423LL,  3,  0);
  (*(void (**)(void, uint64_t, unsigned int *))(*((void *)this + 4) + 832LL))( *(void *)(*((void *)this + 3) + 16LL),  3378LL,  &v102);
  if (v102)
  {
    for (unint64_t i = 0LL; i < v102; ++i)
    {
      int v101 = this;
      ContextHarvester::encodeCommand( this,  4294955015LL,  3u,  v13,  v14,  65028LL,  kDYStateGroupClipPlane,  65030LL,  i,  65030LL,  0LL);
      ContextHarvester::encodeCommandEx(this, 4294955013LL, 0x80u, 2u, v16, v17, v18, 529413LL, 3378LL, 5125LL, i);
      if ((*(unsigned int (**)(void, unint64_t))(*((void *)this + 4) + 1144LL))( *(void *)(*((void *)this + 3) + 16LL),  i + 12288))
      {
        uint64_t v21 = 151LL;
      }

      else
      {
        uint64_t v21 = 134LL;
      }

      ContextHarvester::encodeCommand(this, v21, 1u, v19, v20, 529413LL, i + 12288);
      (*(void (**)(void, unint64_t, void))(*((void *)this + 4) + 7832LL))( *(void *)(*((void *)this + 3) + 16LL),  i + 12288,  *((void *)this + 70) + *((void *)this + 67));
      ContextHarvester::encodeCommand( this,  763LL,  2u,  v22,  v23,  529413LL,  i + 12288,  136198LL,  4LL,  *((void *)this + 70) + *((void *)this + 67));
      ContextHarvester::encodeCommandEx(this, 4294955014LL, 0x80u, 0, v24, v25, v26);
      ContextHarvester::encodeCommand(this, 4294955016LL, 0, v27, v28);
    }
  }

  if ((*(unsigned int (**)(void, uint64_t))(*((void *)this + 4) + 1144LL))( *(void *)(*((void *)this + 3) + 16LL),  2912LL))
  {
    uint64_t v31 = 151LL;
  }

  else
  {
    uint64_t v31 = 134LL;
  }

  ContextHarvester::encodeCommand(this, v31, 1u, v29, v30, 529413LL, 2912LL);
  (*(void (**)(void, uint64_t, void))(*((void *)this + 4) + 824LL))( *(void *)(*((void *)this + 3) + 16LL),  2918LL,  *((void *)this + 70) + *((void *)this + 67));
  ContextHarvester::encodeCommand( this,  189LL,  2u,  v32,  v33,  529413LL,  2918LL,  136198LL,  4LL,  *((void *)this + 70) + *((void *)this + 67));
  ContextHarvester::getGlobalState( this,  2917LL,  529414,  1LL,  v34,  *(void (**)(__GLIContextRec *, unsigned int, void *))(*((void *)this + 4) + 824LL),  188LL,  2,  0);
  ContextHarvester::getGlobalState( this,  2914LL,  5126,  1LL,  v35,  *(void (**)(__GLIContextRec *, unsigned int, void *))(*((void *)this + 4) + 824LL),  188LL,  2,  0);
  ContextHarvester::getGlobalState( this,  2915LL,  5126,  1LL,  v36,  *(void (**)(__GLIContextRec *, unsigned int, void *))(*((void *)this + 4) + 824LL),  188LL,  2,  0);
  ContextHarvester::getGlobalState( this,  2916LL,  5126,  1LL,  v37,  *(void (**)(__GLIContextRec *, unsigned int, void *))(*((void *)this + 4) + 824LL),  188LL,  2,  0);
  ContextHarvester::getGlobalState( this,  2900LL,  529412,  1LL,  v38,  *(void (**)(__GLIContextRec *, unsigned int, void *))(*((void *)this + 4) + 832LL),  539LL,  1,  0);
  (*(void (**)(void, uint64_t, unsigned int *))(*((void *)this + 4) + 832LL))( *(void *)(*((void *)this + 3) + 16LL),  3377LL,  &v100);
  if ((*(unsigned int (**)(void, uint64_t))(*((void *)this + 4) + 1144LL))( *(void *)(*((void *)this + 3) + 16LL),  2896LL))
  {
    uint64_t v41 = 151LL;
  }

  else
  {
    uint64_t v41 = 134LL;
  }

  ContextHarvester::encodeCommand(this, v41, 1u, v39, v40, 529413LL, 2896LL);
  if (v100)
  {
    for (unint64_t j = 0LL; j < v100; ++j)
    {
      int v101 = this;
      ContextHarvester::encodeCommand( this,  4294955015LL,  3u,  v42,  v43,  65028LL,  kDYStateGroupLight,  65030LL,  j,  65030LL,  0LL);
      ContextHarvester::encodeCommandEx(this, 4294955013LL, 0x80u, 2u, v45, v46, v47, 529413LL, 3377LL, 5125LL, j);
      if ((*(unsigned int (**)(void, unint64_t))(*((void *)this + 4) + 1144LL))( *(void *)(*((void *)this + 3) + 16LL),  j + 0x4000))
      {
        uint64_t v50 = 151LL;
      }

      else
      {
        uint64_t v50 = 134LL;
      }

      ContextHarvester::encodeCommand(this, v50, 1u, v48, v49, 529413LL, j + 0x4000);
      (*(void (**)(void, unint64_t, uint64_t, void))(*((void *)this + 4) + 840LL))( *(void *)(*((void *)this + 3) + 16LL),  j + 0x4000,  4608LL,  *((void *)this + 70) + *((void *)this + 67));
      ContextHarvester::encodeCommand( this,  344LL,  3u,  v51,  v52,  529413LL,  j + 0x4000,  529413LL,  4608LL,  136198LL,  4LL,  *((void *)this + 70) + *((void *)this + 67));
      (*(void (**)(void, unint64_t, uint64_t, void))(*((void *)this + 4) + 840LL))( *(void *)(*((void *)this + 3) + 16LL),  j + 0x4000,  4609LL,  *((void *)this + 70) + *((void *)this + 67));
      ContextHarvester::encodeCommand( this,  344LL,  3u,  v53,  v54,  529413LL,  j + 0x4000,  529413LL,  4609LL,  136198LL,  4LL,  *((void *)this + 70) + *((void *)this + 67));
      (*(void (**)(void, unint64_t, uint64_t, void))(*((void *)this + 4) + 840LL))( *(void *)(*((void *)this + 3) + 16LL),  j + 0x4000,  4610LL,  *((void *)this + 70) + *((void *)this + 67));
      ContextHarvester::encodeCommand( this,  344LL,  3u,  v55,  v56,  529413LL,  j + 0x4000,  529413LL,  4610LL,  136198LL,  4LL,  *((void *)this + 70) + *((void *)this + 67));
      (*(void (**)(void, unint64_t, uint64_t, void))(*((void *)this + 4) + 840LL))( *(void *)(*((void *)this + 3) + 16LL),  j + 0x4000,  4611LL,  *((void *)this + 70) + *((void *)this + 67));
      ContextHarvester::encodeCommand( this,  344LL,  3u,  v57,  v58,  529413LL,  j + 0x4000,  529413LL,  4611LL,  136198LL,  4LL,  *((void *)this + 70) + *((void *)this + 67));
      (*(void (**)(void, unint64_t, uint64_t, void))(*((void *)this + 4) + 840LL))( *(void *)(*((void *)this + 3) + 16LL),  j + 0x4000,  4612LL,  *((void *)this + 70) + *((void *)this + 67));
      ContextHarvester::encodeCommand( this,  344LL,  3u,  v59,  v60,  529413LL,  j + 0x4000,  529413LL,  4612LL,  136198LL,  3LL,  *((void *)this + 70) + *((void *)this + 67));
      (*(void (**)(void, unint64_t, uint64_t, void))(*((void *)this + 4) + 840LL))( *(void *)(*((void *)this + 3) + 16LL),  j + 0x4000,  4614LL,  *((void *)this + 70) + *((void *)this + 67));
      ContextHarvester::encodeCommand( this,  344LL,  3u,  v61,  v62,  529413LL,  j + 0x4000,  529413LL,  4614LL,  136198LL,  1LL,  *((void *)this + 70) + *((void *)this + 67));
      (*(void (**)(void, unint64_t, uint64_t, void))(*((void *)this + 4) + 840LL))( *(void *)(*((void *)this + 3) + 16LL),  j + 0x4000,  4613LL,  *((void *)this + 70) + *((void *)this + 67));
      ContextHarvester::encodeCommand( this,  344LL,  3u,  v63,  v64,  529413LL,  j + 0x4000,  529413LL,  4613LL,  136198LL,  1LL,  *((void *)this + 70) + *((void *)this + 67));
      (*(void (**)(void, unint64_t, uint64_t, void))(*((void *)this + 4) + 840LL))( *(void *)(*((void *)this + 3) + 16LL),  j + 0x4000,  4615LL,  *((void *)this + 70) + *((void *)this + 67));
      ContextHarvester::encodeCommand( this,  344LL,  3u,  v65,  v66,  529413LL,  j + 0x4000,  529413LL,  4615LL,  136198LL,  1LL,  *((void *)this + 70) + *((void *)this + 67));
      (*(void (**)(void, unint64_t, uint64_t, void))(*((void *)this + 4) + 840LL))( *(void *)(*((void *)this + 3) + 16LL),  j + 0x4000,  4616LL,  *((void *)this + 70) + *((void *)this + 67));
      ContextHarvester::encodeCommand( this,  344LL,  3u,  v67,  v68,  529413LL,  j + 0x4000,  529413LL,  4616LL,  136198LL,  1LL,  *((void *)this + 70) + *((void *)this + 67));
      (*(void (**)(void, unint64_t, uint64_t, void))(*((void *)this + 4) + 840LL))( *(void *)(*((void *)this + 3) + 16LL),  j + 0x4000,  4617LL,  *((void *)this + 70) + *((void *)this + 67));
      ContextHarvester::encodeCommand( this,  344LL,  3u,  v69,  v70,  529413LL,  j + 0x4000,  529413LL,  4617LL,  136198LL,  1LL,  *((void *)this + 70) + *((void *)this + 67));
      ContextHarvester::encodeCommandEx(this, 4294955014LL, 0x80u, 0, v71, v72, v73);
      ContextHarvester::encodeCommand(this, 4294955016LL, 0, v74, v75);
    }
  }

  if ((*(unsigned int (**)(void, uint64_t))(*((void *)this + 4) + 1144LL))( *(void *)(*((void *)this + 3) + 16LL),  2903LL))
  {
    uint64_t v78 = 151LL;
  }

  else
  {
    uint64_t v78 = 134LL;
  }

  ContextHarvester::encodeCommand(this, v78, 1u, v76, v77, 529413LL, 2903LL);
  (*(void (**)(void, uint64_t, uint64_t, void))(*((void *)this + 4) + 880LL))( *(void *)(*((void *)this + 3) + 16LL),  1028LL,  4608LL,  *((void *)this + 70) + *((void *)this + 67));
  ContextHarvester::encodeCommand( this,  373LL,  3u,  v79,  v80,  529413LL,  1032LL,  529413LL,  4608LL,  136198LL,  4LL,  *((void *)this + 70) + *((void *)this + 67));
  (*(void (**)(void, uint64_t, uint64_t, void))(*((void *)this + 4) + 880LL))( *(void *)(*((void *)this + 3) + 16LL),  1028LL,  4609LL,  *((void *)this + 70) + *((void *)this + 67));
  ContextHarvester::encodeCommand( this,  373LL,  3u,  v81,  v82,  529413LL,  1032LL,  529413LL,  4609LL,  136198LL,  4LL,  *((void *)this + 70) + *((void *)this + 67));
  (*(void (**)(void, uint64_t, uint64_t, void))(*((void *)this + 4) + 880LL))( *(void *)(*((void *)this + 3) + 16LL),  1028LL,  4610LL,  *((void *)this + 70) + *((void *)this + 67));
  ContextHarvester::encodeCommand( this,  373LL,  3u,  v83,  v84,  529413LL,  1032LL,  529413LL,  4610LL,  136198LL,  4LL,  *((void *)this + 70) + *((void *)this + 67));
  (*(void (**)(void, uint64_t, uint64_t, void))(*((void *)this + 4) + 880LL))( *(void *)(*((void *)this + 3) + 16LL),  1028LL,  5633LL,  *((void *)this + 70) + *((void *)this + 67));
  ContextHarvester::encodeCommand( this,  373LL,  3u,  v85,  v86,  529413LL,  1032LL,  529413LL,  5633LL,  136198LL,  1LL,  *((void *)this + 70) + *((void *)this + 67));
  (*(void (**)(void, uint64_t, uint64_t, void))(*((void *)this + 4) + 880LL))( *(void *)(*((void *)this + 3) + 16LL),  1028LL,  5632LL,  *((void *)this + 70) + *((void *)this + 67));
  ContextHarvester::encodeCommand( this,  373LL,  3u,  v87,  v88,  529413LL,  1032LL,  529413LL,  5632LL,  136198LL,  4LL,  *((void *)this + 70) + *((void *)this + 67));
  (*(void (**)(void, uint64_t, void))(*((void *)this + 4) + 824LL))( *(void *)(*((void *)this + 3) + 16LL),  2899LL,  *((void *)this + 70) + *((void *)this + 67));
  ContextHarvester::encodeCommand( this,  340LL,  2u,  v89,  v90,  529413LL,  2899LL,  136198LL,  4LL,  *((void *)this + 70) + *((void *)this + 67));
  ContextHarvester::getGlobalState( this,  2898LL,  5126,  1LL,  v91,  *(void (**)(__GLIContextRec *, unsigned int, void *))(*((void *)this + 4) + 824LL),  339LL,  2,  0);
  if ((*(unsigned int (**)(void, uint64_t))(*((void *)this + 4) + 1144LL))( *(void *)(*((void *)this + 3) + 16LL),  2977LL))
  {
    uint64_t v94 = 151LL;
  }

  else
  {
    uint64_t v94 = 134LL;
  }

  ContextHarvester::encodeCommand(this, v94, 1u, v92, v93, 529413LL, 2977LL);
  if ((*(unsigned int (**)(void, uint64_t))(*((void *)this + 4) + 1144LL))( *(void *)(*((void *)this + 3) + 16LL),  32826LL))
  {
    uint64_t v97 = 151LL;
  }

  else
  {
    uint64_t v97 = 134LL;
  }

  ContextHarvester::encodeCommand(this, v97, 1u, v95, v96, 529413LL, 32826LL);
  ContextHarvester::encodeCommand(this, 4294955016LL, 0, v98, v99);
}

void sub_1F374( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
}

void sub_1F3AC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  AutoStateGroup::~AutoStateGroup((AutoStateGroup *)va);
  AutoStateGroup::~AutoStateGroup((AutoStateGroup *)va1);
  _Unwind_Resume(a1);
}

void ContextHarvester::harvestExtensionsGlobalState(ContextHarvester *this)
{
  if (is_extension_available(*((void *)this + 2), "GL_ARB_vertex_blend"))
  {
    (*(void (**)(void, uint64_t, unsigned int *))(*((void *)this + 4) + 832LL))( *(void *)(*((void *)this + 3) + 16LL),  34469LL,  &v21);
    if ((*(unsigned int (**)(void, uint64_t))(*((void *)this + 4) + 1144LL))( *(void *)(*((void *)this + 3) + 16LL),  34470LL))
    {
      uint64_t v4 = 151LL;
    }

    else
    {
      uint64_t v4 = 134LL;
    }

    ContextHarvester::encodeCommand(this, v4, 1u, v2, v3, 529413LL, 34470LL);
    if ((*(unsigned int (**)(void, uint64_t))(*((void *)this + 4) + 1144LL))( *(void *)(*((void *)this + 3) + 16LL),  34471LL))
    {
      uint64_t v7 = 151LL;
    }

    else
    {
      uint64_t v7 = 134LL;
    }

    ContextHarvester::encodeCommand(this, v7, 1u, v5, v6, 529413LL, 34471LL);
    ContextHarvester::encodeCommand(this, 731LL, 1u, v8, v9, 5124LL, v21);
    (*(void (**)(void, uint64_t, void))(*((void *)this + 4) + 824LL))( *(void *)(*((void *)this + 3) + 16LL),  34472LL,  *((void *)this + 70) + *((void *)this + 67));
    ContextHarvester::encodeCommand( this,  737LL,  2u,  v10,  v11,  5124LL,  v21,  136198LL,  v21,  *((void *)this + 70) + *((void *)this + 67));
  }

  if (is_extension_available(*((void *)this + 2), "GL_APPLE_vertex_array_range"))
  {
    (*(void (**)(void, uint64_t, unsigned int *))(*((void *)this + 4) + 832LL))( *(void *)(*((void *)this + 3) + 16LL),  34079LL,  &v20);
    if (v20 != 34228) {
      ContextHarvester::encodeCommand(this, 671LL, 2u, v12, v13, 529413LL, 34079LL, 529413LL, v20);
    }
  }

  if (is_extension_available(*((void *)this + 2), "GL_EXT_stencil_two_side"))
  {
    if ((*(unsigned int (**)(void, uint64_t))(*((void *)this + 4) + 1144LL))( *(void *)(*((void *)this + 3) + 16LL),  35088LL))
    {
      uint64_t v16 = 151LL;
    }

    else
    {
      uint64_t v16 = 134LL;
    }

    ContextHarvester::encodeCommand(this, v16, 1u, v14, v15, 529413LL, 35088LL);
    (*(void (**)(void, uint64_t, unsigned int *))(*((void *)this + 4) + 832LL))( *(void *)(*((void *)this + 3) + 16LL),  35089LL,  &v19);
    ContextHarvester::encodeCommand(this, 1LL, 1u, v17, v18, 529413LL, v19);
  }

  ContextHarvester::harvestGroupMarkers(this);
}

void ContextHarvester::harvestMatrix(ContextHarvester *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v27 = this;
  ContextHarvester::encodeCommand( this,  4294955015LL,  3u,  a4,  a5,  65028LL,  kDYStateGroupMatrix,  65030LL,  a2,  65030LL,  a5);
  ContextHarvester::encodeCommandEx(this, 376LL, 0x80u, 1u, v9, v10, v11, 529413LL, a2);
  (*(void (**)(void, uint64_t))(*((void *)this + 4) + 1392LL))( *(void *)(*((void *)this + 3) + 16LL),  a2);
  uint64_t v12 = (*(uint64_t (**)(void, uint64_t, int *))(*((void *)this + 4) + 832LL))( *(void *)(*((void *)this + 3) + 16LL),  a4,  &v26);
  __chkstk_darwin(v12);
  uint64_t v16 = &v25[-v15];
  if (v26 >= 1)
  {
    uint64_t v17 = 0LL;
    uint64_t v18 = &v25[-v15];
    do
    {
      (*(void (**)(void, uint64_t, _BYTE *))(*((void *)this + 4) + 824LL))( *(void *)(*((void *)this + 3) + 16LL),  a3,  v18);
      int v21 = v26;
      if (v17 != v26 - 1)
      {
        (*(void (**)(void))(*((void *)this + 4) + 1640LL))(*(void *)(*((void *)this + 3) + 16LL));
        int v21 = v26;
      }

      ++v17;
      v18 += 64;
    }

    while (v17 < v21);
    if (v21 >= 1)
    {
      unint64_t v22 = v21 + 1LL;
      while (1)
      {
        ContextHarvester::encodeCommandEx( this,  353LL,  0x80u,  1u,  v14,  v19,  v20,  136198LL,  16LL,  &v16[64 * (unint64_t)(v22 - 2)]);
        (*(void (**)(void, _BYTE *))(*((void *)this + 4) + 1272LL))( *(void *)(*((void *)this + 3) + 16LL),  &v16[64 * (unint64_t)(v22-- - 2)]);
        if (v22 < 2) {
          break;
        }
        ContextHarvester::encodeCommandEx(this, 471LL, 0x80u, 0, v14, v23, v24);
        (*(void (**)(void))(*((void *)this + 4) + 1680LL))(*(void *)(*((void *)this + 3) + 16LL));
      }
    }
  }

  ContextHarvester::encodeCommand(this, 4294955016LL, 0, v13, v14);
}

void sub_1F820(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ContextHarvester::getTextureEnvironment( ContextHarvester *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, void (*a7)(__GLIContextRec *, unsigned int, unsigned int, void *), uint64_t a8)
{
  int v28 = a3;
  int v29 = a2;
  ((void (*)(void))a7)(*(void *)(*((void *)this + 3) + 16LL));
  if ((a4 & 0x20000) != 0)
  {
    ContextHarvester::encodeCommand( this,  a8,  3u,  v14,  v15,  529413LL,  a2,  529413LL,  a3,  a4,  a5,  *((void *)this + 70) + *((void *)this + 67));
  }

  else
  {
    __int128 v25 = 0u;
    __int128 v26 = 0u;
    __int128 v27 = 0u;
    strlcpy((char *)(*((void *)this + 2) + 4709LL), "Cee", 0x40uLL);
    GPUTools::FB::FIFOPointerArgumentProvider::push( (GPUTools::FB::FIFOPointerArgumentProvider *)&v24,  *((void **)this + 2));
    GPUTools::FB::FIFOPointerArgumentProvider::push((GPUTools::FB::FIFOPointerArgumentProvider *)&v24, &v29);
    uint64_t v16 = (ContextHarvester *)GPUTools::FB::FIFOPointerArgumentProvider::push( (GPUTools::FB::FIFOPointerArgumentProvider *)&v24,  &v28);
    uint64_t v17 = *((void *)this + 2);
    uint64_t v18 = ContextHarvester::formatForStateBufferType(v16, a4, 0LL);
    strlcat((char *)(v17 + 4709), v18, 0x40uLL);
    GPUTools::FB::FIFOPointerArgumentProvider::push( (GPUTools::FB::FIFOPointerArgumentProvider *)&v24,  (void *)(*((void *)this + 70) + *((void *)this + 67)));
    GPUTools::FB::Encode(*((void *)this + 2) + 120LL, a8, 0LL, *((void *)this + 2) + 4709LL, &v24);
    uint64_t v19 = (GPUTools::FB::Stream *)*((void *)this + 5);
    uint64_t v20 = (GPUTools::FB::Fbuf *)(*((void *)this + 2) + 120LL);
    int v21 = (unsigned int *)((char *)v19 + 56);
    do
      unsigned int v22 = __ldaxr(v21);
    while (__stlxr(1u, v21));
    if (v22 == 1)
    {
      do
      {
        while (*v21 == 1)
          ;
        do
          unsigned int v23 = __ldaxr(v21);
        while (__stlxr(1u, v21));
      }

      while (v23 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v19, v20, **(unsigned int **)v20, 1);
    atomic_store(0, v21);
    GPUTools::FB::FIFOPointerArgumentProvider::~FIFOPointerArgumentProvider((GPUTools::FB::FIFOPointerArgumentProvider *)&v24);
  }

void sub_1FA24( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1FA3C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void ContextHarvester::harvestFixedFunctionTextureUnitState( ContextHarvester *this, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  if (*(_DWORD *)(*((void *)this + 2) + 3444LL))
  {
    unint64_t v6 = 0LL;
    uint64_t v7 = &kDYStateGroupImageUnit;
    do
    {
      ContextHarvester::encodeCommand(this, 4294955015LL, 3u, a4, a5, 65028LL, *v7, 65030LL, v6, 65030LL, 0LL);
      ContextHarvester::encodeCommandEx( this,  4294955013LL,  0x80u,  2u,  v8,  v9,  v10,  529413LL,  *(unsigned int *)(*((void *)this + 2) + 3448LL),  5125LL,  v6);
      (*(void (**)(void, void))(*((void *)this + 4) + 2736LL))( *(void *)(*((void *)this + 3) + 16LL),  (v6 + 33984));
      ContextHarvester::encodeCommandEx(this, 2LL, 0x80u, 1u, v11, v12, v13, 529413LL, (v6 + 33984));
      uint64_t v15 = *((void *)this + 2);
      if (v6 < *(unsigned int *)(v15 + 3432))
      {
        ContextHarvester::harvestMatrix(this, 5890LL, 2984LL, 2981LL, v6);
        (*(void (**)(void, uint64_t, float *))(*((void *)this + 4) + 824LL))( *(void *)(*((void *)this + 3) + 16LL),  2819LL,  v50);
        ContextHarvester::encodeCommand( this,  412LL,  5u,  v16,  v17,  529413LL,  (v6 + 33984),  5126LL,  v50[0],  5126LL,  v50[1],  5126LL,  v50[2],  5126LL,  v50[3]);
        ContextHarvester::getTextureEnvironment( this,  34913LL,  34914LL,  1053700LL,  1LL,  v18,  *(void (**)(__GLIContextRec *, unsigned int, unsigned int, void *))(*((void *)this + 4) + 952LL),  585LL);
        uint64_t v15 = *((void *)this + 2);
      }

      if (v6 < *(unsigned int *)(v15 + 3440))
      {
        uint64_t v19 = v7;
        uint64_t v20 = *(unsigned int **)(v15 + 3408);
        int v21 = *(unsigned int **)(v15 + 3416);
        while (v20 != v21)
        {
          uint64_t v22 = *v20;
          if ((v22 & 0xFFFFFFFD) != 0x8C18)
          {
            if ((*(unsigned int (**)(void, void))(*((void *)this + 4) + 1144LL))( *(void *)(*((void *)this + 3) + 16LL),  *v20))
            {
              uint64_t v25 = 151LL;
            }

            else
            {
              uint64_t v25 = 134LL;
            }

            ContextHarvester::encodeCommand(this, v25, 1u, v23, v24, 529413LL, v22);
          }

          ++v20;
        }

        ContextHarvester::getTextureEnvironment( this,  8960LL,  8704LL,  529412LL,  1LL,  v14,  *(void (**)(__GLIContextRec *, unsigned int, unsigned int, void *))(*((void *)this + 4) + 952LL),  585LL);
        uint64_t v7 = v19;
        (*(void (**)(void, uint64_t, uint64_t, void))(*((void *)this + 4) + 944LL))( *(void *)(*((void *)this + 3) + 16LL),  8960LL,  8705LL,  *((void *)this + 70) + *((void *)this + 67));
        ContextHarvester::encodeCommand( this,  584LL,  3u,  v26,  v27,  529413LL,  8960LL,  529413LL,  8705LL,  136198LL,  4LL,  *((void *)this + 70) + *((void *)this + 67));
        ContextHarvester::getTextureEnvironment( this,  8960LL,  34162LL,  529412LL,  1LL,  v28,  *(void (**)(__GLIContextRec *, unsigned int, unsigned int, void *))(*((void *)this + 4) + 952LL),  585LL);
        ContextHarvester::getTextureEnvironment( this,  8960LL,  34161LL,  529412LL,  1LL,  v29,  *(void (**)(__GLIContextRec *, unsigned int, unsigned int, void *))(*((void *)this + 4) + 952LL),  585LL);
        ContextHarvester::getTextureEnvironment( this,  8960LL,  34176LL,  529412LL,  1LL,  v30,  *(void (**)(__GLIContextRec *, unsigned int, unsigned int, void *))(*((void *)this + 4) + 952LL),  585LL);
        ContextHarvester::getTextureEnvironment( this,  8960LL,  34177LL,  529412LL,  1LL,  v31,  *(void (**)(__GLIContextRec *, unsigned int, unsigned int, void *))(*((void *)this + 4) + 952LL),  585LL);
        ContextHarvester::getTextureEnvironment( this,  8960LL,  34178LL,  529412LL,  1LL,  v32,  *(void (**)(__GLIContextRec *, unsigned int, unsigned int, void *))(*((void *)this + 4) + 952LL),  585LL);
        ContextHarvester::getTextureEnvironment( this,  8960LL,  34184LL,  529412LL,  1LL,  v33,  *(void (**)(__GLIContextRec *, unsigned int, unsigned int, void *))(*((void *)this + 4) + 952LL),  585LL);
        ContextHarvester::getTextureEnvironment( this,  8960LL,  34185LL,  529412LL,  1LL,  v34,  *(void (**)(__GLIContextRec *, unsigned int, unsigned int, void *))(*((void *)this + 4) + 952LL),  585LL);
        ContextHarvester::getTextureEnvironment( this,  8960LL,  34186LL,  529412LL,  1LL,  v35,  *(void (**)(__GLIContextRec *, unsigned int, unsigned int, void *))(*((void *)this + 4) + 952LL),  585LL);
        ContextHarvester::getTextureEnvironment( this,  8960LL,  34192LL,  529412LL,  1LL,  v36,  *(void (**)(__GLIContextRec *, unsigned int, unsigned int, void *))(*((void *)this + 4) + 952LL),  585LL);
        ContextHarvester::getTextureEnvironment( this,  8960LL,  34193LL,  529412LL,  1LL,  v37,  *(void (**)(__GLIContextRec *, unsigned int, unsigned int, void *))(*((void *)this + 4) + 952LL),  585LL);
        ContextHarvester::getTextureEnvironment( this,  8960LL,  34194LL,  529412LL,  1LL,  v38,  *(void (**)(__GLIContextRec *, unsigned int, unsigned int, void *))(*((void *)this + 4) + 952LL),  585LL);
        ContextHarvester::getTextureEnvironment( this,  8960LL,  34200LL,  529412LL,  1LL,  v39,  *(void (**)(__GLIContextRec *, unsigned int, unsigned int, void *))(*((void *)this + 4) + 952LL),  585LL);
        ContextHarvester::getTextureEnvironment( this,  8960LL,  34201LL,  529412LL,  1LL,  v40,  *(void (**)(__GLIContextRec *, unsigned int, unsigned int, void *))(*((void *)this + 4) + 952LL),  585LL);
        ContextHarvester::getTextureEnvironment( this,  8960LL,  34202LL,  529412LL,  1LL,  v41,  *(void (**)(__GLIContextRec *, unsigned int, unsigned int, void *))(*((void *)this + 4) + 952LL),  585LL);
        (*(void (**)(void, uint64_t, uint64_t, void))(*((void *)this + 4) + 944LL))( *(void *)(*((void *)this + 3) + 16LL),  8960LL,  34163LL,  *((void *)this + 70) + *((void *)this + 67));
        ContextHarvester::encodeCommand( this,  584LL,  3u,  v42,  v43,  529413LL,  8960LL,  529413LL,  34163LL,  136198LL,  3LL,  *((void *)this + 70) + *((void *)this + 67));
        (*(void (**)(void, uint64_t, uint64_t, void))(*((void *)this + 4) + 944LL))( *(void *)(*((void *)this + 3) + 16LL),  8960LL,  3356LL,  *((void *)this + 70) + *((void *)this + 67));
        ContextHarvester::encodeCommand( this,  584LL,  3u,  v44,  v45,  529413LL,  8960LL,  529413LL,  3356LL,  136198LL,  3LL,  *((void *)this + 70) + *((void *)this + 67));
        uint64_t v15 = *((void *)this + 2);
      }

      if (!*(_DWORD *)(v15 + 3456) || is_extension_available(v15, "GL_EXT_texture_lod_bias")) {
        ContextHarvester::getTextureEnvironment( this,  34048LL,  34049LL,  5126LL,  1LL,  v14,  *(void (**)(__GLIContextRec *, unsigned int, unsigned int, void *))(*((void *)this + 4) + 944LL),  583LL);
      }
      ContextHarvester::encodeCommandEx(this, 4294955014LL, 0x80u, 0, v46, v14, v47);
      ContextHarvester::encodeCommand(this, 4294955016LL, 0, v48, v49);
      ++v6;
    }

    while (v6 < *(unsigned int *)(*((void *)this + 2) + 3444LL));
  }

void sub_200AC(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_200C8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

void sub_200DC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

void sub_200F0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

void ContextHarvester::encodePixelStore( ContextHarvester *a1, unsigned int *a2, unsigned int *a3, uint64_t a4)
{
  char v8 = (void *)*((void *)a1 + 2);
  if (*((int *)v8 + 865) >= 2)
  {
    ContextHarvester::encode(a1, 438LL, a4, "Cei", *v8, 3314LL, *a2);
    ContextHarvester::encode(a1, 438LL, a4, "Cei", **((void **)a1 + 2), 3315LL, a2[1]);
    ContextHarvester::encode(a1, 438LL, a4, "Cei", **((void **)a1 + 2), 3316LL, a2[2]);
    ContextHarvester::encode(a1, 438LL, a4, "Cei", **((void **)a1 + 2), 32878LL, a2[4]);
    ContextHarvester::encode(a1, 438LL, a4, "Cei", **((void **)a1 + 2), 32877LL, a2[5]);
    ContextHarvester::encode(a1, 438LL, a4, "Cei", **((void **)a1 + 2), 3330LL, *a3);
    ContextHarvester::encode(a1, 438LL, a4, "Cei", **((void **)a1 + 2), 3331LL, a3[1]);
    ContextHarvester::encode(a1, 438LL, a4, "Cei", **((void **)a1 + 2), 3332LL, a3[2]);
    char v8 = (void *)*((void *)a1 + 2);
    if (*((_BYTE *)v8 + 4844))
    {
      ContextHarvester::encode(a1, 438LL, a4, "Cei", *v8, 32876LL, a3[4]);
      ContextHarvester::encode(a1, 438LL, a4, "Cei", **((void **)a1 + 2), 32875LL, a3[5]);
      char v8 = (void *)*((void *)a1 + 2);
    }
  }

  if (*((_DWORD *)v8 + 864) == 3)
  {
    ContextHarvester::encode(a1, 438LL, a4, "Cei", *v8, 3312LL, *((unsigned __int8 *)a2 + 32));
    ContextHarvester::encode(a1, 438LL, a4, "Cei", **((void **)a1 + 2), 3313LL, *((unsigned __int8 *)a2 + 33));
    ContextHarvester::encode(a1, 438LL, a4, "Cei", **((void **)a1 + 2), 3328LL, *((unsigned __int8 *)a3 + 32));
    ContextHarvester::encode(a1, 438LL, a4, "Cei", **((void **)a1 + 2), 3329LL, *((unsigned __int8 *)a3 + 33));
    char v8 = (void *)*((void *)a1 + 2);
  }

  if (*((_BYTE *)v8 + 4861))
  {
    ContextHarvester::encode(a1, 438LL, a4, "Cei", *v8, 35350LL, a2[6]);
    ContextHarvester::encode(a1, 438LL, a4, "Cei", **((void **)a1 + 2), 35352LL, a2[7]);
    ContextHarvester::encode(a1, 438LL, a4, "Cei", **((void **)a1 + 2), 35349LL, a3[6]);
    ContextHarvester::encode(a1, 438LL, a4, "Cei", **((void **)a1 + 2), 35351LL, a3[7]);
  }

void ContextHarvester::encodeCommandv( ContextHarvester *this, uint64_t a2, unsigned int a3, unsigned int a4, char *a5)
{
  uint64_t v52 = a5;
  uint64_t v7 = (_OWORD *)(*((void *)this + 2) + 4709LL);
  _DWORD v7[2] = 0u;
  v7[3] = 0u;
  *uint64_t v7 = 0u;
  v7[1] = 0u;
  __int128 v49 = 0u;
  __int128 v50 = 0u;
  __int128 v51 = 0u;
  strlcpy((char *)(*((void *)this + 2) + 4709LL), "C", 0x40uLL);
  char v8 = (ContextHarvester *)GPUTools::FB::FIFOArgumentProvider::push( (GPUTools::FB::FIFOArgumentProvider *)&v48,  **((void ***)this + 2));
  if (a4)
  {
    int v9 = 0;
    int v10 = 0;
    unint64_t v11 = 0LL;
    for (unsigned int i = 0; i < a4; ++i)
    {
      uint64_t v13 = (int *)v52;
      v52 += 8;
      int v14 = *v13;
      if ((*v13 & 0x20000) != 0)
      {
        char v16 = (int *)v52;
        v52 += 8;
        int v15 = *v16;
        if ((v14 & 0x40000) != 0)
        {
LABEL_7:
          GPUTools::FB::Encode(*((void *)this + 2) + 120LL, a2, a3, *((void *)this + 2) + 4709LL, &v48);
          __int128 v45 = 0u;
          __int128 v46 = 0u;
          __int128 v47 = 0u;
          uint64_t v17 = (void **)*((void *)&v49 + 1);
          *((void *)&v51 + 1) = 0LL;
          unint64_t v18 = v50 - *((void *)&v49 + 1);
          if ((void)v50 - *((void *)&v49 + 1) >= 0x11uLL)
          {
            do
            {
              operator delete(*v17);
              uint64_t v17 = (void **)(*((void *)&v49 + 1) + 8LL);
              *((void *)&v49 + 1) = v17;
              unint64_t v18 = v50 - (void)v17;
            }

            while ((void)v50 - (void)v17 > 0x10uLL);
          }

          if (v18 >> 3 == 1)
          {
            uint64_t v19 = 256LL;
LABEL_13:
            *(void *)&__int128 v51 = v19;
          }

          else if (v18 >> 3 == 2)
          {
            uint64_t v19 = 512LL;
            goto LABEL_13;
          }

          std::deque<dy_polymorphic_scalar_t>::shrink_to_fit(&v49);
          if ((void)v50 != *((void *)&v49 + 1)) {
            *(void *)&__int128 v50 = v50 + ((*((void *)&v49 + 1) - v50 + 7) & 0xFFFFFFFFFFFFFFF8LL);
          }
          std::__split_buffer<dy_polymorphic_scalar_t *>::shrink_to_fit((uint64_t)&v49);
          __int128 v49 = v45;
          __int128 v50 = v46;
          __int128 v45 = 0u;
          __int128 v46 = 0u;
          __int128 v51 = v47;
          __int128 v47 = 0uLL;
          GPUTools::FB::FIFOArgumentProvider::~FIFOArgumentProvider((GPUTools::FB::FIFOArgumentProvider *)&v44);
          uint64_t v20 = (_OWORD *)(*((void *)this + 2) + 4709LL);
          v20[2] = 0u;
          v20[3] = 0u;
          _OWORD *v20 = 0u;
          v20[1] = 0u;
          a2 = 4294955008LL;
        }
      }

      else
      {
        int v15 = 1;
        if ((v14 & 0x40000) != 0) {
          goto LABEL_7;
        }
      }

      int v21 = ContextHarvester::formatForStateBufferType(v8, v14, &v44);
      if ((v14 & 0x20000) == 0)
      {
        unsigned int v22 = v14 & 0xFFE1FFFF;
        switch(v14 & 0xFFE1FFFF)
        {
          case 0x1400u:
          case 0x1401u:
LABEL_28:
            unint64_t v31 = v52;
            v52 += 8;
            LODWORD(v25) = *(_DWORD *)v31;
            goto LABEL_22;
          case 0x1402u:
          case 0x1403u:
            unint64_t v28 = v52;
            v52 += 8;
            LODWORD(v2_Block_object_dispose(va, 8) = *(_DWORD *)v28;
            LOBYTE(v25) = (_BYTE)v28;
            int v9 = BYTE1(v28);
            goto LABEL_22;
          case 0x1404u:
          case 0x1405u:
            unint64_t v29 = v52;
            v52 += 8;
            float v30 = *(float *)v29;
            goto LABEL_30;
          case 0x1406u:
            unint64_t v32 = (double *)v52;
            v52 += 8;
            float v33 = *v32;
            float v30 = v33;
LABEL_30:
            LOBYTE(v25) = LOBYTE(v30);
            int v9 = BYTE1(v30);
            int v10 = HIWORD(LODWORD(v30));
            goto LABEL_22;
          case 0x1407u:
          case 0x1408u:
          case 0x1409u:
LABEL_40:
            dy_abort("unknown state buffer core type: 0x%04X", v14);
            __break(1u);
            return;
          case 0x140Au:
LABEL_20:
            char v23 = v52;
            v52 += 8;
            unint64_t v24 = *(void *)v23;
            LOBYTE(v25) = v24;
            int v9 = BYTE1(v24);
            int v10 = WORD1(v24);
            unint64_t v11 = HIDWORD(v24);
            goto LABEL_22;
          default:
            switch(v22)
            {
              case 0xFE00u:
              case 0xFE01u:
              case 0xFE03u:
              case 0xFE04u:
              case 0xFE05u:
                goto LABEL_20;
              case 0xFE02u:
                unint64_t v34 = v52;
                v52 += 8;
                unint64_t v35 = *(void *)v34;
                unint64_t v11 = HIDWORD(v35);
                LOBYTE(v25) = v35;
                int v9 = BYTE1(v35);
                int v10 = WORD1(v35);
                goto LABEL_22;
              case 0xFE06u:
                unint64_t v36 = v52;
                v52 += 8;
                uint64_t v25 = *(void *)v36;
                unint64_t v11 = HIDWORD(*(void *)v36);
                int v9 = BYTE1(*(void *)v36);
                int v10 = WORD1(*(void *)v36);
                goto LABEL_22;
              default:
                if (v22 == 35670) {
                  goto LABEL_28;
                }
                goto LABEL_40;
            }
        }
      }

      snprintf(__str, 0x40uLL, "@%u", v15);
      strlcat((char *)(*((void *)this + 2) + 4709LL), __str, 0x40uLL);
      char v26 = v52;
      v52 += 8;
      unint64_t v27 = *(void *)v26;
      int v9 = BYTE1(v27);
      LOBYTE(v25) = v27;
      int v10 = WORD1(v27);
      unint64_t v11 = HIDWORD(v27);
LABEL_22:
      strlcat((char *)(*((void *)this + 2) + 4709LL), v21, 0x40uLL);
      char v8 = (ContextHarvester *)GPUTools::FB::FIFOArgumentProvider::push( &v48,  v25 | (v9 << 8) | (v10 << 16) | (v11 << 32));
    }
  }

  GPUTools::FB::Encode(*((void *)this + 2) + 120LL, a2, a3, *((void *)this + 2) + 4709LL, &v48);
  unint64_t v37 = (GPUTools::FB::Stream *)*((void *)this + 5);
  unint64_t v38 = (GPUTools::FB::Fbuf *)(*((void *)this + 2) + 120LL);
  unint64_t v39 = (unsigned int *)((char *)v37 + 56);
  do
    unsigned int v40 = __ldaxr(v39);
  while (__stlxr(1u, v39));
  if (v40 == 1)
  {
    do
    {
      while (*v39 == 1)
        ;
      do
        unsigned int v41 = __ldaxr(v39);
      while (__stlxr(1u, v39));
    }

    while (v41 == 1);
  }

  GPUTools::FB::Stream::Write_nolock(v37, v38, **(unsigned int **)v38, 1);
  atomic_store(0, v39);
  GPUTools::FB::FIFOArgumentProvider::~FIFOArgumentProvider((GPUTools::FB::FIFOArgumentProvider *)&v48);
}

void sub_209AC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

void sub_209C0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

void sub_209D8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

void sub_209EC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

void sub_20A00( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

void std::deque<dy_polymorphic_scalar_t>::shrink_to_fit(void *a1)
{
  uint64_t v2 = a1[5];
  if (v2)
  {
    unint64_t v3 = a1[4];
    uint64_t v4 = (void **)a1[1];
    if (v3 >= 0x200)
    {
      operator delete(*v4);
      uint64_t v4 = (void **)(a1[1] + 8LL);
      a1[1] = v4;
      uint64_t v2 = a1[5];
      unint64_t v3 = a1[4] - 512LL;
      a1[4] = v3;
    }

    char v5 = (void **)a1[2];
    if (v5 == v4) {
      uint64_t v6 = 0LL;
    }
    else {
      uint64_t v6 = (((char *)v5 - (char *)v4) << 6) - 1;
    }
    if (v6 - (v2 + v3) >= 0x200)
    {
      operator delete(*(v5 - 1));
      a1[2] -= 8LL;
    }

    std::__split_buffer<dy_polymorphic_scalar_t *>::shrink_to_fit((uint64_t)a1);
  }

  else
  {
    uint64_t v7 = a1[2];
    if (v7 != a1[1])
    {
      do
      {
        operator delete(*(void **)(v7 - 8));
        uint64_t v8 = a1[1];
        uint64_t v7 = a1[2] - 8LL;
        a1[2] = v7;
      }

      while (v7 != v8);
    }

    a1[4] = 0LL;
    std::__split_buffer<dy_polymorphic_scalar_t *>::shrink_to_fit((uint64_t)a1);
  }

void std::__split_buffer<dy_polymorphic_scalar_t *>::shrink_to_fit(uint64_t a1)
{
  uint64_t v1 = *(char **)(a1 + 16);
  uint64_t v2 = *(void **)a1;
  unint64_t v3 = *(char **)(a1 + 8);
  int64_t v4 = v1 - v3;
  unint64_t v5 = (v1 - v3) >> 3;
  if (v5 < (uint64_t)(*(void *)(a1 + 24) - *(void *)a1) >> 3)
  {
    if (v1 == v3)
    {
      uint64_t v7 = 0LL;
      uint64_t v8 = 8 * v5;
    }

    else
    {
      if (v4 < 0) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v7 = operator new(v1 - v3);
      uint64_t v8 = (uint64_t)&v7[v5];
      if ((unint64_t)(v4 - 8) < 0x18)
      {
        int v9 = v7;
      }

      else
      {
        int v9 = v7;
        if ((unint64_t)((char *)v7 - v3) >= 0x20)
        {
          uint64_t v10 = 0LL;
          unint64_t v11 = ((unint64_t)(v4 - 8) >> 3) + 1;
          uint64_t v12 = v11 & 0x3FFFFFFFFFFFFFFCLL;
          int v9 = &v7[v12];
          uint64_t v13 = &v3[v12 * 8];
          uint64_t v14 = v11 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            int v15 = &v7[v10];
            __int128 v16 = *(_OWORD *)&v3[v10 * 8 + 16];
            _OWORD *v15 = *(_OWORD *)&v3[v10 * 8];
            v15[1] = v16;
            v10 += 4LL;
            v14 -= 4LL;
          }

          while (v14);
          unint64_t v3 = v13;
          if (v11 == (v11 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_13;
          }
        }
      }

      do
      {
        uint64_t v17 = *(void *)v3;
        v3 += 8;
        *v9++ = v17;
      }

      while (v9 != (void *)v8);
    }

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,BOOL>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,BOOL>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>( uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }

    else
    {
      unint64_t v4 = ((_DWORD)v8 - 1) & v7;
    }

    uint64_t v10 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      unint64_t v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v13 = v11[1];
            if (v13 == v7)
            {
              if (*((_DWORD *)v11 + 4) == (_DWORD)v7) {
                return v11;
              }
            }

            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }

            unint64_t v11 = (uint64_t *)*v11;
            if (!v11) {
              goto LABEL_23;
            }
          }
        }

        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7) {
              return v11;
            }
          }

          else
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
            if (v12 != v4) {
              break;
            }
          }

          unint64_t v11 = (uint64_t *)*v11;
        }

        while (v11);
      }
    }
  }

void sub_20EF8(_Unwind_Exception *a1)
{
}

void alpha_func(__GLIContextRec *a1, uint64_t a2, float a3)
{
  uint64_t v6 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v6) {
    goto LABEL_12;
  }
  uint64_t v7 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v8 = v6[4];
    BOOL v9 = v8 >= (unint64_t)a1;
    else {
      uint64_t v10 = v6 + 1;
    }
    if (v9) {
      uint64_t v7 = (uint64_t)v6;
    }
    uint64_t v6 = (void *)*v10;
  }

  while (*v10);
  if (v7 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v7 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v7 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v11 = *(void *)(v7 + 40);
  unint64_t v12 = (unsigned int *)(v11 + 4640);
  do
  {
    unsigned int v13 = __ldaxr(v12);
    signed int v14 = v13 + 1;
  }

  while (__stlxr(v14, v12));
  if (gCheckGLErrors) {
    BOOL v15 = v14 <= 1;
  }
  else {
    BOOL v15 = 1;
  }
  if (v15)
  {
    id v44 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v43 = handle_opengl_thread_conflict((const void **)v11);
    id v44 = [(id)DYGetGLGuestAppClient(v43) waitOnGraphicsSemaphoreAssertions];
    if ((int)v44 >= 1)
    {
      do
LABEL_57:
        unsigned int v45 = __ldaxr(v12);
      while (__stlxr(v45 - 1, v12));
      __int128 v46 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v44) graphicsLockWaitQueue];
      dispatch_sync_f(v46, 0LL, (dispatch_function_t)do_nothing);
      (*(void (**)(__GLIContextRec *, uint64_t, float))(*(void *)(v11 + 24) + 8LL))(a1, a2, a3);
      return;
    }
  }

  *(_BYTE *)(v11 + 483_Block_object_dispose(va, 8) = 1;
  char v53 = 0LL;
  uint64_t v54 = 0LL;
  unsigned int v55 = 0;
  if ([(id)DYGetGLGuestAppClient(v44) state] != (char *)&dword_0 + 1
    || (id v16 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand], !(_DWORD)v16))
  {
    BOOL v18 = (char *)v53;
    float v17 = v54;
    int64_t v19 = v54 - (_BYTE *)v53;
    unsigned int v20 = v55;
    unint64_t v21 = v55 - (v54 - (_BYTE *)v53);
    if (v21 > 0x37) {
      goto LABEL_24;
    }
    int v47 = (311 - v21) & 0xFFFFFF00;
    v55 += v47;
    BOOL v18 = (char *)malloc(v47 + v20);
    char v53 = v18;
    if (v18)
    {
      if ((v18 & 3) == 0)
      {
        float v17 = &v18[v19];
LABEL_24:
        *((void *)v17 + 6) = 0LL;
        *((_OWORD *)v17 + 1) = 0u;
        *((_OWORD *)v17 + 2) = 0u;
        *(_OWORD *)float v17 = 0u;
        uint64_t v54 = v17 + 56;
        GPUTools::FB::Fbuf::align((char **)&v53);
        *((_DWORD *)v18 + 1) = 3;
        *((_DWORD *)v18 + _Block_object_dispose(va, 8) = 0;
        __uint64_t v52 = 0LL;
        uint64_t v22 = pthread_threadid_np(0LL, &v52);
        *((void *)v18 + 1) = v52;
        *((_DWORD *)v18 + 9) = 6710595;
        *((void *)v18 + 5) = *(void *)v11;
        *((_DWORD *)v18 + 12) = a2;
        *((float *)v18 + 13) = a3;
        char v23 = byte_206E5B;
        if ((byte_206E5B & 1) != 0) {
          breakpoint_break((uint64_t)&v53, (int *)((char *)&dword_0 + 3), 1LL, *(unsigned int *)(v11 + 3404), v11);
        }
        uint64_t v24 = (uint64_t)[(id)DYGetGLGuestAppClient(v22) overrideFlags];
        if (!(v24 & 0x10 | v23 & 4))
        {
          uint64_t v25 = mach_absolute_time();
          (*(void (**)(__GLIContextRec *, uint64_t, float))(*(void *)(v11 + 32) + 8LL))(a1, a2, a3);
          uint64_t v24 = mach_absolute_time();
          uint64_t v26 = v24 - v25;
          unint64_t v27 = g_DYTimebaseInfo;
          if (g_DYTimebaseInfo == *((_DWORD *)&g_DYTimebaseInfo + 1))
          {
            unint64_t v28 = v53;
            *((void *)v53 + 2) = v25;
            v28[3] = v26;
            if (!gCheckGLErrors) {
              goto LABEL_29;
            }
          }

          else
          {
            uint64_t v50 = __udivti3(g_DYTimebaseInfo * v26, (g_DYTimebaseInfo * (unsigned __int128)v26) >> 64);
            __int128 v51 = v53;
            *((void *)v53 + 3) = v50;
            uint64_t v24 = __udivti3(v27 * v25, (v27 * (unsigned __int128)v25) >> 64);
            v51[2] = v24;
            if (!gCheckGLErrors) {
              goto LABEL_29;
            }
          }

          uint64_t v24 = check_errors(v11);
        }

{
  void *v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  void *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  signed int v14;
  BOOL v15;
  id v16;
  char *v17;
  char *v18;
  int64_t v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  id v29;
  GPUTools::FB::Fbuf *v30;
  unsigned int v31;
  GPUTools::FB::Fbuf *v32;
  dispatch_queue_s *v33;
  uint64_t v34;
  GPUTools::FB::Stream *v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  signed int v40;
  BOOL v41;
  unsigned int v42;
  uint64_t v43;
  id v44;
  unsigned int v45;
  dispatch_queue_s *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  __uint64_t v52;
  void *v53;
  char *v54;
  unsigned int v55;
  uint64_t v6 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v6) {
    goto LABEL_12;
  }
  uint64_t v7 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v8 = v6[4];
    BOOL v9 = v8 >= (unint64_t)a1;
    else {
      uint64_t v10 = v6 + 1;
    }
    if (v9) {
      uint64_t v7 = (uint64_t)v6;
    }
    uint64_t v6 = (void *)*v10;
  }

  while (*v10);
  if (v7 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v7 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v7 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v11 = *(void *)(v7 + 40);
  unint64_t v12 = (unsigned int *)(v11 + 4640);
  do
  {
    unsigned int v13 = __ldaxr(v12);
    signed int v14 = v13 + 1;
  }

  while (__stlxr(v14, v12));
  if (gCheckGLErrors) {
    BOOL v15 = v14 <= 1;
  }
  else {
    BOOL v15 = 1;
  }
  if (v15)
  {
    id v44 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v43 = handle_opengl_thread_conflict((const void **)v11);
    id v44 = [(id)DYGetGLGuestAppClient(v43) waitOnGraphicsSemaphoreAssertions];
    if ((int)v44 >= 1)
    {
      do
LABEL_57:
        unsigned int v45 = __ldaxr(v12);
      while (__stlxr(v45 - 1, v12));
      __int128 v46 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v44) graphicsLockWaitQueue];
      dispatch_sync_f(v46, 0LL, (dispatch_function_t)do_nothing);
      (*(void (**)(__GLIContextRec *, uint64_t, float))(*(void *)(v11 + 24) + 8LL))(a1, a2, a3);
      return;
    }
  }

  *(_BYTE *)(v11 + 483_Block_object_dispose(va, 8) = 1;
  char v53 = 0LL;
  uint64_t v54 = 0LL;
  unsigned int v55 = 0;
  if ([(id)DYGetGLGuestAppClient(v44) state] != (char *)&dword_0 + 1
    || (id v16 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand], !(_DWORD)v16))
  {
    BOOL v18 = (char *)v53;
    float v17 = v54;
    int64_t v19 = v54 - (_BYTE *)v53;
    unsigned int v20 = v55;
    unint64_t v21 = v55 - (v54 - (_BYTE *)v53);
    if (v21 > 0x37) {
      goto LABEL_24;
    }
    int v47 = (311 - v21) & 0xFFFFFF00;
    v55 += v47;
    BOOL v18 = (char *)malloc(v47 + v20);
    char v53 = v18;
    if (v18)
    {
      if ((v18 & 3) == 0)
      {
        float v17 = &v18[v19];
LABEL_24:
        *((void *)v17 + 6) = 0LL;
        *((_OWORD *)v17 + 1) = 0u;
        *((_OWORD *)v17 + 2) = 0u;
        *(_OWORD *)float v17 = 0u;
        uint64_t v54 = v17 + 56;
        GPUTools::FB::Fbuf::align((char **)&v53);
        *((_DWORD *)v18 + 1) = 3;
        *((_DWORD *)v18 + _Block_object_dispose(va, 8) = 0;
        __uint64_t v52 = 0LL;
        uint64_t v22 = pthread_threadid_np(0LL, &v52);
        *((void *)v18 + 1) = v52;
        *((_DWORD *)v18 + 9) = 6710595;
        *((void *)v18 + 5) = *(void *)v11;
        *((_DWORD *)v18 + 12) = a2;
        *((float *)v18 + 13) = a3;
        char v23 = byte_206E5B;
        if ((byte_206E5B & 1) != 0) {
          breakpoint_break((uint64_t)&v53, (int *)((char *)&dword_0 + 3), 1LL, *(unsigned int *)(v11 + 3404), v11);
        }
        uint64_t v24 = (uint64_t)[(id)DYGetGLGuestAppClient(v22) overrideFlags];
        if (!(v24 & 0x10 | v23 & 4))
        {
          uint64_t v25 = mach_absolute_time();
          (*(void (**)(__GLIContextRec *, uint64_t, float))(*(void *)(v11 + 32) + 8LL))(a1, a2, a3);
          uint64_t v24 = mach_absolute_time();
          uint64_t v26 = v24 - v25;
          unint64_t v27 = g_DYTimebaseInfo;
          if (g_DYTimebaseInfo == *((_DWORD *)&g_DYTimebaseInfo + 1))
          {
            unint64_t v28 = v53;
            *((void *)v53 + 2) = v25;
            v28[3] = v26;
            if (!gCheckGLErrors) {
              goto LABEL_29;
            }
          }

          else
          {
            uint64_t v50 = __udivti3(g_DYTimebaseInfo * v26, (g_DYTimebaseInfo * (unsigned __int128)v26) >> 64);
            __int128 v51 = v53;
            *((void *)v53 + 3) = v50;
            uint64_t v24 = __udivti3(v27 * v25, (v27 * (unsigned __int128)v25) >> 64);
            v51[2] = v24;
            if (!gCheckGLErrors) {
              goto LABEL_29;
            }
          }

          uint64_t v24 = check_errors(v11);
        }

{
  void *v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  void *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  signed int v14;
  BOOL v15;
  id v16;
  unsigned int v17;
  signed int v18;
  BOOL v19;
  unsigned int v20;
  uint64_t v21;
  id v22;
  unsigned int v23;
  dispatch_queue_s *v24;
  uint64_t v25;
  uint64_t v6 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v6) {
    goto LABEL_12;
  }
  uint64_t v7 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v8 = v6[4];
    BOOL v9 = v8 >= (unint64_t)a1;
    else {
      uint64_t v10 = v6 + 1;
    }
    if (v9) {
      uint64_t v7 = (uint64_t)v6;
    }
    uint64_t v6 = (void *)*v10;
  }

  while (*v10);
  if (v7 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v7 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v7 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v11 = *(void *)(v7 + 40);
  unint64_t v12 = (unsigned int *)(v11 + 4640);
  do
  {
    unsigned int v13 = __ldaxr(v12);
    signed int v14 = v13 + 1;
  }

  while (__stlxr(v14, v12));
  if (gCheckGLErrors) {
    BOOL v15 = v14 <= 1;
  }
  else {
    BOOL v15 = 1;
  }
  if (v15)
  {
    uint64_t v22 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    unint64_t v21 = handle_opengl_thread_conflict((const void **)v11);
    uint64_t v22 = [(id)DYGetGLGuestAppClient(v21) waitOnGraphicsSemaphoreAssertions];
    if ((int)v22 >= 1)
    {
      do
LABEL_34:
        char v23 = __ldaxr(v12);
      while (__stlxr(v23 - 1, v12));
      uint64_t v24 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v22) graphicsLockWaitQueue];
      dispatch_sync_f(v24, 0LL, (dispatch_function_t)do_nothing);
LABEL_36:
      (*(void (**)(__GLIContextRec *, uint64_t, float))(*(void *)(v11 + 24) + 8LL))(a1, a2, a3);
      return;
    }
  }

  *(_BYTE *)(v11 + 483_Block_object_dispose(va, 8) = 1;
  if ([(id)DYGetGLGuestAppClient(v22) state] == (char *)&dword_0 + 1)
  {
    id v16 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand];
    if ((_DWORD)v16)
    {
      do
        unsigned int v20 = __ldaxr(v12);
      while (__stlxr(v20 - 1, v12));
      [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
      goto LABEL_36;
    }
  }

  (*(void (**)(__GLIContextRec *, uint64_t, float))(*(void *)(v11 + 32) + 8LL))(a1, a2, a3);
  ++*(void *)(v11 + 3704);
  if (gCheckGLErrors)
  {
    check_errors(v11);
    if (gBreakOnError)
    {
      uint64_t v25 = *(unsigned int *)(v11 + 3404);
      if ((_DWORD)v25) {
        breakpoint_break(0LL, (volatile int *)0xFFFFFFFFLL, 3LL, v25, v11);
      }
    }
  }

  do
  {
    float v17 = __ldaxr(v12);
    BOOL v18 = v17 - 1;
  }

  while (__stlxr(v18, v12));
  if (gCheckGLErrors) {
    int64_t v19 = v18 < 1;
  }
  else {
    int64_t v19 = 1;
  }
  if (!v19) {
    handle_opengl_thread_conflict((const void **)v11);
  }
}

{
  void *v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  void *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  signed int v14;
  BOOL v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  int64x2_t v19;
  unsigned int v20;
  signed int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  id v25;
  unsigned int v26;
  dispatch_queue_s *v27;
  uint64_t v28;
  uint64_t v6 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v6) {
    goto LABEL_12;
  }
  uint64_t v7 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v8 = v6[4];
    BOOL v9 = v8 >= (unint64_t)a1;
    else {
      uint64_t v10 = v6 + 1;
    }
    if (v9) {
      uint64_t v7 = (uint64_t)v6;
    }
    uint64_t v6 = (void *)*v10;
  }

  while (*v10);
  if (v7 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v7 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v7 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v11 = *(void *)(v7 + 40);
  unint64_t v12 = (unsigned int *)(v11 + 4640);
  do
  {
    unsigned int v13 = __ldaxr(v12);
    signed int v14 = v13 + 1;
  }

  while (__stlxr(v14, v12));
  if (gCheckGLErrors) {
    BOOL v15 = v14 <= 1;
  }
  else {
    BOOL v15 = 1;
  }
  if (v15)
  {
    uint64_t v25 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v24 = handle_opengl_thread_conflict((const void **)v11);
    uint64_t v25 = [(id)DYGetGLGuestAppClient(v24) waitOnGraphicsSemaphoreAssertions];
    if ((int)v25 >= 1)
    {
      do
LABEL_34:
        uint64_t v26 = __ldaxr(v12);
      while (__stlxr(v26 - 1, v12));
      unint64_t v27 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v25) graphicsLockWaitQueue];
      dispatch_sync_f(v27, 0LL, (dispatch_function_t)do_nothing);
LABEL_36:
      (*(void (**)(__GLIContextRec *, uint64_t, float))(*(void *)(v11 + 24) + 8LL))(a1, a2, a3);
      return;
    }
  }

  *(_BYTE *)(v11 + 483_Block_object_dispose(va, 8) = 1;
  if ([(id)DYGetGLGuestAppClient(v25) state] == (char *)&dword_0 + 1)
  {
    id v16 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand];
    if ((_DWORD)v16)
    {
      do
        char v23 = __ldaxr(v12);
      while (__stlxr(v23 - 1, v12));
      [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
      goto LABEL_36;
    }
  }

  float v17 = mach_absolute_time();
  (*(void (**)(__GLIContextRec *, uint64_t, float))(*(void *)(v11 + 32) + 8LL))(a1, a2, a3);
  BOOL v18 = mach_absolute_time();
  int64_t v19 = vdupq_n_s64(1uLL);
  v19.i64[0] = v18 - v17;
  *(int64x2_t *)(v11 + 3696) = vaddq_s64(v19, *(int64x2_t *)(v11 + 3696));
  if (gCheckGLErrors)
  {
    check_errors(v11);
    if (gBreakOnError)
    {
      unint64_t v28 = *(unsigned int *)(v11 + 3404);
      if ((_DWORD)v28) {
        breakpoint_break(0LL, (volatile int *)0xFFFFFFFFLL, 3LL, v28, v11);
      }
    }
  }

  do
  {
    unsigned int v20 = __ldaxr(v12);
    unint64_t v21 = v20 - 1;
  }

  while (__stlxr(v21, v12));
  if (gCheckGLErrors) {
    uint64_t v22 = v21 < 1;
  }
  else {
    uint64_t v22 = 1;
  }
  if (!v22) {
    handle_opengl_thread_conflict((const void **)v11);
  }
}

LABEL_29:
        id v29 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v24), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v29) {
          id v29 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v53, v30);
        }
        unint64_t v32 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
        if ((_DWORD)v32) {
          id v29 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v53, v32, v31);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v11, (uint64_t)&v53);
        }
        float v33 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v53);
        uint64_t v34 = *(unsigned int *)(v11 + 3404);
        if ((_DWORD)v34 && gBreakOnError)
        {
          uint64_t v48 = 3LL;
          uint64_t v49 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v23 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v48 = 2LL;
          uint64_t v49 = 3LL;
        }

        breakpoint_break((uint64_t)&v53, (volatile int *)v49, v48, v34, v11);
LABEL_38:
        unint64_t v35 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v33) defaultFbufStream];
        unint64_t v36 = (unsigned int *)((char *)v35 + 56);
        do
          unsigned int v37 = __ldaxr(v36);
        while (__stlxr(1u, v36));
        if (v37 == 1)
        {
          do
          {
            while (*v36 == 1)
              ;
            do
              unsigned int v38 = __ldaxr(v36);
            while (__stlxr(1u, v36));
          }

          while (v38 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v35, (GPUTools::FB::Fbuf *)&v53, *(unsigned int *)v53, 1);
        atomic_store(0, v36);
        do
        {
          unsigned int v39 = __ldaxr(v12);
          signed int v40 = v39 - 1;
        }

        while (__stlxr(v40, v12));
        if (gCheckGLErrors) {
          BOOL v41 = v40 < 1;
        }
        else {
          BOOL v41 = 1;
        }
        if (!v41) {
          handle_opengl_thread_conflict((const void **)v11);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v18, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    unsigned int v42 = __ldaxr(v12);
  while (__stlxr(v42 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, float))(*(void *)(v11 + 24) + 8LL))(a1, a2, a3);
LABEL_51:
  if (v53) {
    free(v53);
  }
}

        id v29 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v24), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v29) {
          id v29 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v53, v30);
        }
        unint64_t v32 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
        if ((_DWORD)v32) {
          id v29 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v53, v32, v31);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v11, (uint64_t)&v53);
        }
        float v33 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v53);
        uint64_t v34 = *(unsigned int *)(v11 + 3404);
        if ((_DWORD)v34 && gBreakOnError)
        {
          uint64_t v48 = 3LL;
          uint64_t v49 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v23 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v48 = 2LL;
          uint64_t v49 = 26LL;
        }

        breakpoint_break((uint64_t)&v53, (volatile int *)v49, v48, v34, v11);
LABEL_38:
        unint64_t v35 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v33) defaultFbufStream];
        unint64_t v36 = (unsigned int *)((char *)v35 + 56);
        do
          unsigned int v37 = __ldaxr(v36);
        while (__stlxr(1u, v36));
        if (v37 == 1)
        {
          do
          {
            while (*v36 == 1)
              ;
            do
              unsigned int v38 = __ldaxr(v36);
            while (__stlxr(1u, v36));
          }

          while (v38 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v35, (GPUTools::FB::Fbuf *)&v53, *(unsigned int *)v53, 1);
        atomic_store(0, v36);
        do
        {
          unsigned int v39 = __ldaxr(v12);
          signed int v40 = v39 - 1;
        }

        while (__stlxr(v40, v12));
        if (gCheckGLErrors) {
          BOOL v41 = v40 < 1;
        }
        else {
          BOOL v41 = 1;
        }
        if (!v41) {
          handle_opengl_thread_conflict((const void **)v11);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v18, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    unsigned int v42 = __ldaxr(v12);
  while (__stlxr(v42 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t))(*(void *)(v11 + 24) + 56LL))(a1, a2, a3);
LABEL_51:
  if (v53) {
    free(v53);
  }
}

        float v33 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v33) {
          float v33 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v57, v34);
        }
        unint64_t v36 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v15 + 3404);
        if ((_DWORD)v36) {
          float v33 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v57, v36, v35);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v15, (uint64_t)&v57);
        }
        unsigned int v37 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v15 + 3480),  (GPUTools::FB::Fbuf *)(v15 + 3520),  (GPUTools::FB *)&v57);
        unsigned int v38 = *(unsigned int *)(v15 + 3404);
        if ((_DWORD)v38 && gBreakOnError)
        {
          __uint64_t v52 = 3LL;
          char v53 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v27 & 2) == 0) {
            goto LABEL_38;
          }
          __uint64_t v52 = 2LL;
          char v53 = 38LL;
        }

        breakpoint_break((uint64_t)&v57, (volatile int *)v53, v52, v38, v15);
LABEL_38:
        unsigned int v39 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v37) defaultFbufStream];
        signed int v40 = (unsigned int *)((char *)v39 + 56);
        do
          BOOL v41 = __ldaxr(v40);
        while (__stlxr(1u, v40));
        if (v41 == 1)
        {
          do
          {
            while (*v40 == 1)
              ;
            do
              unsigned int v42 = __ldaxr(v40);
            while (__stlxr(1u, v40));
          }

          while (v42 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v39, (GPUTools::FB::Fbuf *)&v57, *(unsigned int *)v57, 1);
        atomic_store(0, v40);
        do
        {
          uint64_t v43 = __ldaxr(v16);
          id v44 = v43 - 1;
        }

        while (__stlxr(v44, v16));
        if (gCheckGLErrors) {
          unsigned int v45 = v44 < 1;
        }
        else {
          unsigned int v45 = 1;
        }
        if (!v45) {
          handle_opengl_thread_conflict((const void **)v15);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v22, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    __int128 v46 = __ldaxr(v16);
  while (__stlxr(v46 - 1, v16));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, float, float, float, float))(*(void *)(v15 + 24) + 96LL))( a1,  a2,  a3,  a4,  a5);
LABEL_51:
  if (v57) {
    free(v57);
  }
}

        unint64_t v27 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v22), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v27) {
          unint64_t v27 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v51, v28);
        }
        float v30 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
        if ((_DWORD)v30) {
          unint64_t v27 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v51, v30, v29);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v9, (uint64_t)&v51);
        }
        unsigned int v31 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v51);
        unint64_t v32 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v32 && gBreakOnError)
        {
          __int128 v46 = 3LL;
          int v47 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v21 & 2) == 0) {
            goto LABEL_38;
          }
          __int128 v46 = 2LL;
          int v47 = 43LL;
        }

        breakpoint_break((uint64_t)&v51, (volatile int *)v47, v46, v32, v9);
LABEL_38:
        float v33 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v31) defaultFbufStream];
        uint64_t v34 = (unsigned int *)((char *)v33 + 56);
        do
          unint64_t v35 = __ldaxr(v34);
        while (__stlxr(1u, v34));
        if (v35 == 1)
        {
          do
          {
            while (*v34 == 1)
              ;
            do
              unint64_t v36 = __ldaxr(v34);
            while (__stlxr(1u, v34));
          }

          while (v36 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v33, (GPUTools::FB::Fbuf *)&v51, *(unsigned int *)v51, 1);
        atomic_store(0, v34);
        do
        {
          unsigned int v37 = __ldaxr(v10);
          unsigned int v38 = v37 - 1;
        }

        while (__stlxr(v38, v10));
        if (gCheckGLErrors) {
          unsigned int v39 = v38 < 1;
        }
        else {
          unsigned int v39 = 1;
        }
        if (!v39) {
          handle_opengl_thread_conflict((const void **)v9);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    signed int v40 = __ldaxr(v10);
  while (__stlxr(v40 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 120LL))(a1, a2);
LABEL_51:
  if (v51) {
    free(v51);
  }
}

        float v33 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v33) {
          float v33 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v57, v34);
        }
        unint64_t v36 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v15 + 3404);
        if ((_DWORD)v36) {
          float v33 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v57, v36, v35);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v15, (uint64_t)&v57);
        }
        unsigned int v37 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v15 + 3480),  (GPUTools::FB::Fbuf *)(v15 + 3520),  (GPUTools::FB *)&v57);
        unsigned int v38 = *(unsigned int *)(v15 + 3404);
        if ((_DWORD)v38 && gBreakOnError)
        {
          __uint64_t v52 = 3LL;
          char v53 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v27 & 2) == 0) {
            goto LABEL_38;
          }
          __uint64_t v52 = 2LL;
          char v53 = 66LL;
        }

        breakpoint_break((uint64_t)&v57, (volatile int *)v53, v52, v38, v15);
LABEL_38:
        unsigned int v39 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v37) defaultFbufStream];
        signed int v40 = (unsigned int *)((char *)v39 + 56);
        do
          BOOL v41 = __ldaxr(v40);
        while (__stlxr(1u, v40));
        if (v41 == 1)
        {
          do
          {
            while (*v40 == 1)
              ;
            do
              unsigned int v42 = __ldaxr(v40);
            while (__stlxr(1u, v40));
          }

          while (v42 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v39, (GPUTools::FB::Fbuf *)&v57, *(unsigned int *)v57, 1);
        atomic_store(0, v40);
        do
        {
          uint64_t v43 = __ldaxr(v16);
          id v44 = v43 - 1;
        }

        while (__stlxr(v44, v16));
        if (gCheckGLErrors) {
          unsigned int v45 = v44 < 1;
        }
        else {
          unsigned int v45 = 1;
        }
        if (!v45) {
          handle_opengl_thread_conflict((const void **)v15);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v22, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    __int128 v46 = __ldaxr(v16);
  while (__stlxr(v46 - 1, v16));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, float, float, float, float))(*(void *)(v15 + 24) + 296LL))( a1,  a2,  a3,  a4,  a5);
LABEL_51:
  if (v57) {
    free(v57);
  }
}

        float v33 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v33) {
          float v33 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v57, v34);
        }
        unint64_t v36 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v15 + 3404);
        if ((_DWORD)v36) {
          float v33 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v57, v36, v35);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v15, (uint64_t)&v57);
        }
        unsigned int v37 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v15 + 3480),  (GPUTools::FB::Fbuf *)(v15 + 3520),  (GPUTools::FB *)&v57);
        unsigned int v38 = *(unsigned int *)(v15 + 3404);
        if ((_DWORD)v38 && gBreakOnError)
        {
          __uint64_t v52 = 3LL;
          char v53 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v27 & 2) == 0) {
            goto LABEL_38;
          }
          __uint64_t v52 = 2LL;
          char v53 = 72LL;
        }

        breakpoint_break((uint64_t)&v57, (volatile int *)v53, v52, v38, v15);
LABEL_38:
        unsigned int v39 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v37) defaultFbufStream];
        signed int v40 = (unsigned int *)((char *)v39 + 56);
        do
          BOOL v41 = __ldaxr(v40);
        while (__stlxr(1u, v40));
        if (v41 == 1)
        {
          do
          {
            while (*v40 == 1)
              ;
            do
              unsigned int v42 = __ldaxr(v40);
            while (__stlxr(1u, v40));
          }

          while (v42 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v39, (GPUTools::FB::Fbuf *)&v57, *(unsigned int *)v57, 1);
        atomic_store(0, v40);
        do
        {
          uint64_t v43 = __ldaxr(v16);
          id v44 = v43 - 1;
        }

        while (__stlxr(v44, v16));
        if (gCheckGLErrors) {
          unsigned int v45 = v44 < 1;
        }
        else {
          unsigned int v45 = 1;
        }
        if (!v45) {
          handle_opengl_thread_conflict((const void **)v15);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v22, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    __int128 v46 = __ldaxr(v16);
  while (__stlxr(v46 - 1, v16));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 + 24) + 344LL))( a1,  a2,  a3,  a4,  a5);
LABEL_51:
  if (v57) {
    free(v57);
  }
}

        float v33 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v33) {
          float v33 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v57, v34);
        }
        unint64_t v36 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v15 + 3404);
        if ((_DWORD)v36) {
          float v33 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v57, v36, v35);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v15, (uint64_t)&v57);
        }
        unsigned int v37 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v15 + 3480),  (GPUTools::FB::Fbuf *)(v15 + 3520),  (GPUTools::FB *)&v57);
        unsigned int v38 = *(unsigned int *)(v15 + 3404);
        if ((_DWORD)v38 && gBreakOnError)
        {
          __uint64_t v52 = 3LL;
          char v53 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v27 & 2) == 0) {
            goto LABEL_38;
          }
          __uint64_t v52 = 2LL;
          char v53 = 78LL;
        }

        breakpoint_break((uint64_t)&v57, (volatile int *)v53, v52, v38, v15);
LABEL_38:
        unsigned int v39 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v37) defaultFbufStream];
        signed int v40 = (unsigned int *)((char *)v39 + 56);
        do
          BOOL v41 = __ldaxr(v40);
        while (__stlxr(1u, v40));
        if (v41 == 1)
        {
          do
          {
            while (*v40 == 1)
              ;
            do
              unsigned int v42 = __ldaxr(v40);
            while (__stlxr(1u, v40));
          }

          while (v42 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v39, (GPUTools::FB::Fbuf *)&v57, *(unsigned int *)v57, 1);
        atomic_store(0, v40);
        do
        {
          uint64_t v43 = __ldaxr(v16);
          id v44 = v43 - 1;
        }

        while (__stlxr(v44, v16));
        if (gCheckGLErrors) {
          unsigned int v45 = v44 < 1;
        }
        else {
          unsigned int v45 = 1;
        }
        if (!v45) {
          handle_opengl_thread_conflict((const void **)v15);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v22, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    __int128 v46 = __ldaxr(v16);
  while (__stlxr(v46 - 1, v16));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 + 24) + 392LL))( a1,  a2,  a3,  a4,  a5);
LABEL_51:
  if (v57) {
    free(v57);
  }
}

        unsigned int v37 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v37) {
          unsigned int v37 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v64, v38);
        }
        signed int v40 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v19 + 3404);
        if ((_DWORD)v40) {
          unsigned int v37 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v64, v40, v39);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v37), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v19, (uint64_t)&v64);
        }
        BOOL v41 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v19 + 3480),  (GPUTools::FB::Fbuf *)(v19 + 3520),  (GPUTools::FB *)&v64);
        unsigned int v42 = *(unsigned int *)(v19 + 3404);
        if ((_DWORD)v42 && gBreakOnError)
        {
          uint64_t v56 = 3LL;
          char v57 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v31 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v56 = 2LL;
          char v57 = 112LL;
        }

        breakpoint_break((uint64_t)&v64, (volatile int *)v57, v56, v42, v19);
LABEL_38:
        uint64_t v43 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v41) defaultFbufStream];
        id v44 = (unsigned int *)((char *)v43 + 56);
        do
          unsigned int v45 = __ldaxr(v44);
        while (__stlxr(1u, v44));
        if (v45 == 1)
        {
          do
          {
            while (*v44 == 1)
              ;
            do
              __int128 v46 = __ldaxr(v44);
            while (__stlxr(1u, v44));
          }

          while (v46 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v43, (GPUTools::FB::Fbuf *)&v64, *(unsigned int *)v64, 1);
        atomic_store(0, v44);
        do
        {
          int v47 = __ldaxr(v20);
          uint64_t v48 = v47 - 1;
        }

        while (__stlxr(v48, v20));
        if (gCheckGLErrors) {
          uint64_t v49 = v48 < 1;
        }
        else {
          uint64_t v49 = 1;
        }
        if (!v49) {
          handle_opengl_thread_conflict((const void **)v19);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v26, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    uint64_t v50 = __ldaxr(v20);
  while (__stlxr(v50 - 1, v20));
  [(id)DYGetGLGuestAppClient(v24) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, int))(*(void *)(v19 + 24) + 432LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9);
LABEL_51:
  if (v64) {
    free(v64);
  }
}

        unsigned int v37 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v37) {
          unsigned int v37 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v64, v38);
        }
        signed int v40 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v19 + 3404);
        if ((_DWORD)v40) {
          unsigned int v37 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v64, v40, v39);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v37), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v19, (uint64_t)&v64);
        }
        BOOL v41 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v19 + 3480),  (GPUTools::FB::Fbuf *)(v19 + 3520),  (GPUTools::FB *)&v64);
        unsigned int v42 = *(unsigned int *)(v19 + 3404);
        if ((_DWORD)v42 && gBreakOnError)
        {
          uint64_t v56 = 3LL;
          char v57 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v31 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v56 = 2LL;
          char v57 = 114LL;
        }

        breakpoint_break((uint64_t)&v64, (volatile int *)v57, v56, v42, v19);
LABEL_38:
        uint64_t v43 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v41) defaultFbufStream];
        id v44 = (unsigned int *)((char *)v43 + 56);
        do
          unsigned int v45 = __ldaxr(v44);
        while (__stlxr(1u, v44));
        if (v45 == 1)
        {
          do
          {
            while (*v44 == 1)
              ;
            do
              __int128 v46 = __ldaxr(v44);
            while (__stlxr(1u, v44));
          }

          while (v46 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v43, (GPUTools::FB::Fbuf *)&v64, *(unsigned int *)v64, 1);
        atomic_store(0, v44);
        do
        {
          int v47 = __ldaxr(v20);
          uint64_t v48 = v47 - 1;
        }

        while (__stlxr(v48, v20));
        if (gCheckGLErrors) {
          uint64_t v49 = v48 < 1;
        }
        else {
          uint64_t v49 = 1;
        }
        if (!v49) {
          handle_opengl_thread_conflict((const void **)v19);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v26, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    uint64_t v50 = __ldaxr(v20);
  while (__stlxr(v50 - 1, v20));
  [(id)DYGetGLGuestAppClient(v24) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, int))(*(void *)(v19 + 24) + 448LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9);
LABEL_51:
  if (v64) {
    free(v64);
  }
}

        unint64_t v27 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v22), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v27) {
          unint64_t v27 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v51, v28);
        }
        float v30 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
        if ((_DWORD)v30) {
          unint64_t v27 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v51, v30, v29);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v9, (uint64_t)&v51);
        }
        unsigned int v31 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v51);
        unint64_t v32 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v32 && gBreakOnError)
        {
          __int128 v46 = 3LL;
          int v47 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v21 & 2) == 0) {
            goto LABEL_38;
          }
          __int128 v46 = 2LL;
          int v47 = 118LL;
        }

        breakpoint_break((uint64_t)&v51, (volatile int *)v47, v46, v32, v9);
LABEL_38:
        float v33 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v31) defaultFbufStream];
        uint64_t v34 = (unsigned int *)((char *)v33 + 56);
        do
          unint64_t v35 = __ldaxr(v34);
        while (__stlxr(1u, v34));
        if (v35 == 1)
        {
          do
          {
            while (*v34 == 1)
              ;
            do
              unint64_t v36 = __ldaxr(v34);
            while (__stlxr(1u, v34));
          }

          while (v36 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v33, (GPUTools::FB::Fbuf *)&v51, *(unsigned int *)v51, 1);
        atomic_store(0, v34);
        do
        {
          unsigned int v37 = __ldaxr(v10);
          unsigned int v38 = v37 - 1;
        }

        while (__stlxr(v38, v10));
        if (gCheckGLErrors) {
          unsigned int v39 = v38 < 1;
        }
        else {
          unsigned int v39 = 1;
        }
        if (!v39) {
          handle_opengl_thread_conflict((const void **)v9);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    signed int v40 = __ldaxr(v10);
  while (__stlxr(v40 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 456LL))(a1, a2);
LABEL_51:
  if (v51) {
    free(v51);
  }
}

        unint64_t v27 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v22), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v27) {
          unint64_t v27 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v51, v28);
        }
        float v30 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
        if ((_DWORD)v30) {
          unint64_t v27 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v51, v30, v29);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v9, (uint64_t)&v51);
        }
        unsigned int v31 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v51);
        unint64_t v32 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v32 && gBreakOnError)
        {
          __int128 v46 = 3LL;
          int v47 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v21 & 2) == 0) {
            goto LABEL_38;
          }
          __int128 v46 = 2LL;
          int v47 = 130LL;
        }

        breakpoint_break((uint64_t)&v51, (volatile int *)v47, v46, v32, v9);
LABEL_38:
        float v33 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v31) defaultFbufStream];
        uint64_t v34 = (unsigned int *)((char *)v33 + 56);
        do
          unint64_t v35 = __ldaxr(v34);
        while (__stlxr(1u, v34));
        if (v35 == 1)
        {
          do
          {
            while (*v34 == 1)
              ;
            do
              unint64_t v36 = __ldaxr(v34);
            while (__stlxr(1u, v34));
          }

          while (v36 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v33, (GPUTools::FB::Fbuf *)&v51, *(unsigned int *)v51, 1);
        atomic_store(0, v34);
        do
        {
          unsigned int v37 = __ldaxr(v10);
          unsigned int v38 = v37 - 1;
        }

        while (__stlxr(v38, v10));
        if (gCheckGLErrors) {
          unsigned int v39 = v38 < 1;
        }
        else {
          unsigned int v39 = 1;
        }
        if (!v39) {
          handle_opengl_thread_conflict((const void **)v9);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    signed int v40 = __ldaxr(v10);
  while (__stlxr(v40 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 480LL))(a1, a2);
LABEL_51:
  if (v51) {
    free(v51);
  }
}

        unint64_t v27 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v22), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v27) {
          unint64_t v27 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v51, v28);
        }
        float v30 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
        if ((_DWORD)v30) {
          unint64_t v27 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v51, v30, v29);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v9, (uint64_t)&v51);
        }
        unsigned int v31 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v51);
        unint64_t v32 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v32 && gBreakOnError)
        {
          __int128 v46 = 3LL;
          int v47 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v21 & 2) == 0) {
            goto LABEL_38;
          }
          __int128 v46 = 2LL;
          int v47 = 131LL;
        }

        breakpoint_break((uint64_t)&v51, (volatile int *)v47, v46, v32, v9);
LABEL_38:
        float v33 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v31) defaultFbufStream];
        uint64_t v34 = (unsigned int *)((char *)v33 + 56);
        do
          unint64_t v35 = __ldaxr(v34);
        while (__stlxr(1u, v34));
        if (v35 == 1)
        {
          do
          {
            while (*v34 == 1)
              ;
            do
              unint64_t v36 = __ldaxr(v34);
            while (__stlxr(1u, v34));
          }

          while (v36 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v33, (GPUTools::FB::Fbuf *)&v51, *(unsigned int *)v51, 1);
        atomic_store(0, v34);
        do
        {
          unsigned int v37 = __ldaxr(v10);
          unsigned int v38 = v37 - 1;
        }

        while (__stlxr(v38, v10));
        if (gCheckGLErrors) {
          unsigned int v39 = v38 < 1;
        }
        else {
          unsigned int v39 = 1;
        }
        if (!v39) {
          handle_opengl_thread_conflict((const void **)v9);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    signed int v40 = __ldaxr(v10);
  while (__stlxr(v40 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 488LL))(a1, a2);
LABEL_51:
  if (v51) {
    free(v51);
  }
}

        unint64_t v27 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v22), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v27) {
          unint64_t v27 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v51, v28);
        }
        float v30 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
        if ((_DWORD)v30) {
          unint64_t v27 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v51, v30, v29);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v9, (uint64_t)&v51);
        }
        unsigned int v31 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v51);
        unint64_t v32 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v32 && gBreakOnError)
        {
          __int128 v46 = 3LL;
          int v47 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v21 & 2) == 0) {
            goto LABEL_38;
          }
          __int128 v46 = 2LL;
          int v47 = 134LL;
        }

        breakpoint_break((uint64_t)&v51, (volatile int *)v47, v46, v32, v9);
LABEL_38:
        float v33 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v31) defaultFbufStream];
        uint64_t v34 = (unsigned int *)((char *)v33 + 56);
        do
          unint64_t v35 = __ldaxr(v34);
        while (__stlxr(1u, v34));
        if (v35 == 1)
        {
          do
          {
            while (*v34 == 1)
              ;
            do
              unint64_t v36 = __ldaxr(v34);
            while (__stlxr(1u, v34));
          }

          while (v36 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v33, (GPUTools::FB::Fbuf *)&v51, *(unsigned int *)v51, 1);
        atomic_store(0, v34);
        do
        {
          unsigned int v37 = __ldaxr(v10);
          unsigned int v38 = v37 - 1;
        }

        while (__stlxr(v38, v10));
        if (gCheckGLErrors) {
          unsigned int v39 = v38 < 1;
        }
        else {
          unsigned int v39 = 1;
        }
        if (!v39) {
          handle_opengl_thread_conflict((const void **)v9);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    signed int v40 = __ldaxr(v10);
  while (__stlxr(v40 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 504LL))(a1, a2);
LABEL_51:
  if (v51) {
    free(v51);
  }
}

        unint64_t v27 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v22), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v27) {
          unint64_t v27 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v51, v28);
        }
        float v30 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
        if ((_DWORD)v30) {
          unint64_t v27 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v51, v30, v29);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v9, (uint64_t)&v51);
        }
        unsigned int v31 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v51);
        unint64_t v32 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v32 && gBreakOnError)
        {
          __int128 v46 = 3LL;
          int v47 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v21 & 2) == 0) {
            goto LABEL_38;
          }
          __int128 v46 = 2LL;
          int v47 = 135LL;
        }

        breakpoint_break((uint64_t)&v51, (volatile int *)v47, v46, v32, v9);
LABEL_38:
        float v33 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v31) defaultFbufStream];
        uint64_t v34 = (unsigned int *)((char *)v33 + 56);
        do
          unint64_t v35 = __ldaxr(v34);
        while (__stlxr(1u, v34));
        if (v35 == 1)
        {
          do
          {
            while (*v34 == 1)
              ;
            do
              unint64_t v36 = __ldaxr(v34);
            while (__stlxr(1u, v34));
          }

          while (v36 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v33, (GPUTools::FB::Fbuf *)&v51, *(unsigned int *)v51, 1);
        atomic_store(0, v34);
        do
        {
          unsigned int v37 = __ldaxr(v10);
          unsigned int v38 = v37 - 1;
        }

        while (__stlxr(v38, v10));
        if (gCheckGLErrors) {
          unsigned int v39 = v38 < 1;
        }
        else {
          unsigned int v39 = 1;
        }
        if (!v39) {
          handle_opengl_thread_conflict((const void **)v9);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    signed int v40 = __ldaxr(v10);
  while (__stlxr(v40 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 512LL))(a1, a2);
LABEL_51:
  if (v51) {
    free(v51);
  }
}

        unint64_t v27 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v22), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v27) {
          unint64_t v27 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v51, v28);
        }
        float v30 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
        if ((_DWORD)v30) {
          unint64_t v27 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v51, v30, v29);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v9, (uint64_t)&v51);
        }
        unsigned int v31 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v51);
        unint64_t v32 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v32 && gBreakOnError)
        {
          __int128 v46 = 3LL;
          int v47 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v21 & 2) == 0) {
            goto LABEL_38;
          }
          __int128 v46 = 2LL;
          int v47 = 151LL;
        }

        breakpoint_break((uint64_t)&v51, (volatile int *)v47, v46, v32, v9);
LABEL_38:
        float v33 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v31) defaultFbufStream];
        uint64_t v34 = (unsigned int *)((char *)v33 + 56);
        do
          unint64_t v35 = __ldaxr(v34);
        while (__stlxr(1u, v34));
        if (v35 == 1)
        {
          do
          {
            while (*v34 == 1)
              ;
            do
              unint64_t v36 = __ldaxr(v34);
            while (__stlxr(1u, v34));
          }

          while (v36 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v33, (GPUTools::FB::Fbuf *)&v51, *(unsigned int *)v51, 1);
        atomic_store(0, v34);
        do
        {
          unsigned int v37 = __ldaxr(v10);
          unsigned int v38 = v37 - 1;
        }

        while (__stlxr(v38, v10));
        if (gCheckGLErrors) {
          unsigned int v39 = v38 < 1;
        }
        else {
          unsigned int v39 = 1;
        }
        if (!v39) {
          handle_opengl_thread_conflict((const void **)v9);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    signed int v40 = __ldaxr(v10);
  while (__stlxr(v40 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 576LL))(a1, a2);
LABEL_51:
  if (v51) {
    free(v51);
  }
}

        unint64_t v27 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v22), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v27) {
          unint64_t v27 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v51, v28);
        }
        float v30 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
        if ((_DWORD)v30) {
          unint64_t v27 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v51, v30, v29);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v9, (uint64_t)&v51);
        }
        unsigned int v31 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v51);
        unint64_t v32 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v32 && gBreakOnError)
        {
          __int128 v46 = 3LL;
          int v47 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v21 & 2) == 0) {
            goto LABEL_38;
          }
          __int128 v46 = 2LL;
          int v47 = 152LL;
        }

        breakpoint_break((uint64_t)&v51, (volatile int *)v47, v46, v32, v9);
LABEL_38:
        float v33 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v31) defaultFbufStream];
        uint64_t v34 = (unsigned int *)((char *)v33 + 56);
        do
          unint64_t v35 = __ldaxr(v34);
        while (__stlxr(1u, v34));
        if (v35 == 1)
        {
          do
          {
            while (*v34 == 1)
              ;
            do
              unint64_t v36 = __ldaxr(v34);
            while (__stlxr(1u, v34));
          }

          while (v36 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v33, (GPUTools::FB::Fbuf *)&v51, *(unsigned int *)v51, 1);
        atomic_store(0, v34);
        do
        {
          unsigned int v37 = __ldaxr(v10);
          unsigned int v38 = v37 - 1;
        }

        while (__stlxr(v38, v10));
        if (gCheckGLErrors) {
          unsigned int v39 = v38 < 1;
        }
        else {
          unsigned int v39 = 1;
        }
        if (!v39) {
          handle_opengl_thread_conflict((const void **)v9);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    signed int v40 = __ldaxr(v10);
  while (__stlxr(v40 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 584LL))(a1, a2);
LABEL_51:
  if (v51) {
    free(v51);
  }
}

        uint64_t v25 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v20), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v25) {
          uint64_t v25 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v49, v26);
        }
        unint64_t v28 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v7 + 3404);
        if ((_DWORD)v28) {
          uint64_t v25 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v49, v28, v27);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v25), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v7, (uint64_t)&v49);
        }
        id v29 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v7 + 3480),  (GPUTools::FB::Fbuf *)(v7 + 3520),  (GPUTools::FB *)&v49);
        float v30 = *(unsigned int *)(v7 + 3404);
        if ((_DWORD)v30 && gBreakOnError)
        {
          id v44 = 3LL;
          unsigned int v45 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v19 & 2) == 0) {
            goto LABEL_38;
          }
          id v44 = 2LL;
          unsigned int v45 = 175LL;
        }

        breakpoint_break((uint64_t)&v49, (volatile int *)v45, v44, v30, v7);
LABEL_38:
        unsigned int v31 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v29) defaultFbufStream];
        unint64_t v32 = (unsigned int *)((char *)v31 + 56);
        do
          float v33 = __ldaxr(v32);
        while (__stlxr(1u, v32));
        if (v33 == 1)
        {
          do
          {
            while (*v32 == 1)
              ;
            do
              uint64_t v34 = __ldaxr(v32);
            while (__stlxr(1u, v32));
          }

          while (v34 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v31, (GPUTools::FB::Fbuf *)&v49, *(unsigned int *)v49, 1);
        atomic_store(0, v32);
        do
        {
          unint64_t v35 = __ldaxr(v8);
          unint64_t v36 = v35 - 1;
        }

        while (__stlxr(v36, v8));
        if (gCheckGLErrors) {
          unsigned int v37 = v36 < 1;
        }
        else {
          unsigned int v37 = 1;
        }
        if (!v37) {
          handle_opengl_thread_conflict((const void **)v7);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v14, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    unsigned int v38 = __ldaxr(v8);
  while (__stlxr(v38 - 1, v8));
  [(id)DYGetGLGuestAppClient(v12) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *))(*(void *)(v7 + 24) + 712LL))(a1);
LABEL_51:
  if (v49) {
    free(v49);
  }
}

        uint64_t v25 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v20), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v25) {
          uint64_t v25 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v49, v26);
        }
        unint64_t v28 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v7 + 3404);
        if ((_DWORD)v28) {
          uint64_t v25 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v49, v28, v27);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v25), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v7, (uint64_t)&v49);
        }
        id v29 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v7 + 3480),  (GPUTools::FB::Fbuf *)(v7 + 3520),  (GPUTools::FB *)&v49);
        float v30 = *(unsigned int *)(v7 + 3404);
        if ((_DWORD)v30 && gBreakOnError)
        {
          id v44 = 3LL;
          unsigned int v45 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v19 & 2) == 0) {
            goto LABEL_38;
          }
          id v44 = 2LL;
          unsigned int v45 = 179LL;
        }

        breakpoint_break((uint64_t)&v49, (volatile int *)v45, v44, v30, v7);
LABEL_38:
        unsigned int v31 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v29) defaultFbufStream];
        unint64_t v32 = (unsigned int *)((char *)v31 + 56);
        do
          float v33 = __ldaxr(v32);
        while (__stlxr(1u, v32));
        if (v33 == 1)
        {
          do
          {
            while (*v32 == 1)
              ;
            do
              uint64_t v34 = __ldaxr(v32);
            while (__stlxr(1u, v32));
          }

          while (v34 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v31, (GPUTools::FB::Fbuf *)&v49, *(unsigned int *)v49, 1);
        atomic_store(0, v32);
        do
        {
          unint64_t v35 = __ldaxr(v8);
          unint64_t v36 = v35 - 1;
        }

        while (__stlxr(v36, v8));
        if (gCheckGLErrors) {
          unsigned int v37 = v36 < 1;
        }
        else {
          unsigned int v37 = 1;
        }
        if (!v37) {
          handle_opengl_thread_conflict((const void **)v7);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v14, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    unsigned int v38 = __ldaxr(v8);
  while (__stlxr(v38 - 1, v8));
  [(id)DYGetGLGuestAppClient(v12) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *))(*(void *)(v7 + 24) + 720LL))(a1);
LABEL_51:
  if (v49) {
    free(v49);
  }
}

        unint64_t v27 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v22), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v27) {
          unint64_t v27 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v51, v28);
        }
        float v30 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
        if ((_DWORD)v30) {
          unint64_t v27 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v51, v30, v29);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v9, (uint64_t)&v51);
        }
        unsigned int v31 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v51);
        unint64_t v32 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v32 && gBreakOnError)
        {
          __int128 v46 = 3LL;
          int v47 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v21 & 2) == 0) {
            goto LABEL_38;
          }
          __int128 v46 = 2LL;
          int v47 = 199LL;
        }

        breakpoint_break((uint64_t)&v51, (volatile int *)v47, v46, v32, v9);
LABEL_38:
        float v33 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v31) defaultFbufStream];
        uint64_t v34 = (unsigned int *)((char *)v33 + 56);
        do
          unint64_t v35 = __ldaxr(v34);
        while (__stlxr(1u, v34));
        if (v35 == 1)
        {
          do
          {
            while (*v34 == 1)
              ;
            do
              unint64_t v36 = __ldaxr(v34);
            while (__stlxr(1u, v34));
          }

          while (v36 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v33, (GPUTools::FB::Fbuf *)&v51, *(unsigned int *)v51, 1);
        atomic_store(0, v34);
        do
        {
          unsigned int v37 = __ldaxr(v10);
          unsigned int v38 = v37 - 1;
        }

        while (__stlxr(v38, v10));
        if (gCheckGLErrors) {
          unsigned int v39 = v38 < 1;
        }
        else {
          unsigned int v39 = 1;
        }
        if (!v39) {
          handle_opengl_thread_conflict((const void **)v9);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    signed int v40 = __ldaxr(v10);
  while (__stlxr(v40 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 760LL))(a1, a2);
LABEL_51:
  if (v51) {
    free(v51);
  }
}

        unint64_t v35 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v30), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v35) {
          unint64_t v35 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v59, v36);
        }
        unsigned int v38 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v17 + 3404);
        if ((_DWORD)v38) {
          unint64_t v35 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v59, v38, v37);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v35), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v17, (uint64_t)&v59);
        }
        unsigned int v39 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v17 + 3480),  (GPUTools::FB::Fbuf *)(v17 + 3520),  (GPUTools::FB *)&v59);
        signed int v40 = *(unsigned int *)(v17 + 3404);
        if ((_DWORD)v40 && gBreakOnError)
        {
          uint64_t v54 = 3LL;
          unsigned int v55 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v29 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v54 = 2LL;
          unsigned int v55 = 288LL;
        }

        breakpoint_break((uint64_t)&v59, (volatile int *)v55, v54, v40, v17);
LABEL_38:
        BOOL v41 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v39) defaultFbufStream];
        unsigned int v42 = (unsigned int *)((char *)v41 + 56);
        do
          uint64_t v43 = __ldaxr(v42);
        while (__stlxr(1u, v42));
        if (v43 == 1)
        {
          do
          {
            while (*v42 == 1)
              ;
            do
              id v44 = __ldaxr(v42);
            while (__stlxr(1u, v42));
          }

          while (v44 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v41, (GPUTools::FB::Fbuf *)&v59, *(unsigned int *)v59, 1);
        atomic_store(0, v42);
        do
        {
          unsigned int v45 = __ldaxr(v18);
          __int128 v46 = v45 - 1;
        }

        while (__stlxr(v46, v18));
        if (gCheckGLErrors) {
          int v47 = v46 < 1;
        }
        else {
          int v47 = 1;
        }
        if (!v47) {
          handle_opengl_thread_conflict((const void **)v17);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v24, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    uint64_t v48 = __ldaxr(v18);
  while (__stlxr(v48 - 1, v18));
  [(id)DYGetGLGuestAppClient(v22) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t, void *))(*(void *)(v17 + 24) + 984LL))( a1,  a2,  a3,  a4,  a5,  a6);
LABEL_51:
  if (v59) {
    free(v59);
  }
}

        float v33 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v33) {
          float v33 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v57, v34);
        }
        unint64_t v36 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v15 + 3404);
        if ((_DWORD)v36) {
          float v33 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v57, v36, v35);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v15, (uint64_t)&v57);
        }
        unsigned int v37 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v15 + 3480),  (GPUTools::FB::Fbuf *)(v15 + 3520),  (GPUTools::FB *)&v57);
        unsigned int v38 = *(unsigned int *)(v15 + 3404);
        if ((_DWORD)v38 && gBreakOnError)
        {
          __uint64_t v52 = 3LL;
          char v53 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v27 & 2) == 0) {
            goto LABEL_38;
          }
          __uint64_t v52 = 2LL;
          char v53 = 290LL;
        }

        breakpoint_break((uint64_t)&v57, (volatile int *)v53, v52, v38, v15);
LABEL_38:
        unsigned int v39 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v37) defaultFbufStream];
        signed int v40 = (unsigned int *)((char *)v39 + 56);
        do
          BOOL v41 = __ldaxr(v40);
        while (__stlxr(1u, v40));
        if (v41 == 1)
        {
          do
          {
            while (*v40 == 1)
              ;
            do
              unsigned int v42 = __ldaxr(v40);
            while (__stlxr(1u, v40));
          }

          while (v42 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v39, (GPUTools::FB::Fbuf *)&v57, *(unsigned int *)v57, 1);
        atomic_store(0, v40);
        do
        {
          uint64_t v43 = __ldaxr(v16);
          id v44 = v43 - 1;
        }

        while (__stlxr(v44, v16));
        if (gCheckGLErrors) {
          unsigned int v45 = v44 < 1;
        }
        else {
          unsigned int v45 = 1;
        }
        if (!v45) {
          handle_opengl_thread_conflict((const void **)v15);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v22, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    __int128 v46 = __ldaxr(v16);
  while (__stlxr(v46 - 1, v16));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, int *))(*(void *)(v15 + 24) + 1000LL))( a1,  a2,  a3,  a4,  a5);
LABEL_51:
  if (v57) {
    free(v57);
  }
}

        id v29 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v24), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v29) {
          id v29 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v53, v30);
        }
        unint64_t v32 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
        if ((_DWORD)v32) {
          id v29 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v53, v32, v31);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v11, (uint64_t)&v53);
        }
        float v33 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v53);
        uint64_t v34 = *(unsigned int *)(v11 + 3404);
        if ((_DWORD)v34 && gBreakOnError)
        {
          uint64_t v48 = 3LL;
          uint64_t v49 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v23 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v48 = 2LL;
          uint64_t v49 = 309LL;
        }

        breakpoint_break((uint64_t)&v53, (volatile int *)v49, v48, v34, v11);
LABEL_38:
        unint64_t v35 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v33) defaultFbufStream];
        unint64_t v36 = (unsigned int *)((char *)v35 + 56);
        do
          unsigned int v37 = __ldaxr(v36);
        while (__stlxr(1u, v36));
        if (v37 == 1)
        {
          do
          {
            while (*v36 == 1)
              ;
            do
              unsigned int v38 = __ldaxr(v36);
            while (__stlxr(1u, v36));
          }

          while (v38 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v35, (GPUTools::FB::Fbuf *)&v53, *(unsigned int *)v53, 1);
        atomic_store(0, v36);
        do
        {
          unsigned int v39 = __ldaxr(v12);
          signed int v40 = v39 - 1;
        }

        while (__stlxr(v40, v12));
        if (gCheckGLErrors) {
          BOOL v41 = v40 < 1;
        }
        else {
          BOOL v41 = 1;
        }
        if (!v41) {
          handle_opengl_thread_conflict((const void **)v11);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v18, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    unsigned int v42 = __ldaxr(v12);
  while (__stlxr(v42 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t))(*(void *)(v11 + 24) + 1024LL))(a1, a2, a3);
LABEL_51:
  if (v53) {
    free(v53);
  }
}

        unsigned int v31 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v26), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v31) {
          unsigned int v31 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v55, v32);
        }
        uint64_t v34 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
        if ((_DWORD)v34) {
          unsigned int v31 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v55, v34, v33);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v31), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v13, (uint64_t)&v55);
        }
        unint64_t v35 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)&v55);
        unint64_t v36 = *(unsigned int *)(v13 + 3404);
        if ((_DWORD)v36 && gBreakOnError)
        {
          uint64_t v50 = 3LL;
          __int128 v51 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v25 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v50 = 2LL;
          __int128 v51 = 343LL;
        }

        breakpoint_break((uint64_t)&v55, (volatile int *)v51, v50, v36, v13);
LABEL_38:
        unsigned int v37 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v35) defaultFbufStream];
        unsigned int v38 = (unsigned int *)((char *)v37 + 56);
        do
          unsigned int v39 = __ldaxr(v38);
        while (__stlxr(1u, v38));
        if (v39 == 1)
        {
          do
          {
            while (*v38 == 1)
              ;
            do
              signed int v40 = __ldaxr(v38);
            while (__stlxr(1u, v38));
          }

          while (v40 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v37, (GPUTools::FB::Fbuf *)&v55, *(unsigned int *)v55, 1);
        atomic_store(0, v38);
        do
        {
          BOOL v41 = __ldaxr(v14);
          unsigned int v42 = v41 - 1;
        }

        while (__stlxr(v42, v14));
        if (gCheckGLErrors) {
          uint64_t v43 = v42 < 1;
        }
        else {
          uint64_t v43 = 1;
        }
        if (!v43) {
          handle_opengl_thread_conflict((const void **)v13);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v20, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    id v44 = __ldaxr(v14);
  while (__stlxr(v44 - 1, v14));
  [(id)DYGetGLGuestAppClient(v18) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, float))(*(void *)(v13 + 24) + 1200LL))(a1, a2, a3, a4);
LABEL_51:
  if (v55) {
    free(v55);
  }
}

        unint64_t v27 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v22), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v27) {
          unint64_t v27 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v51, v28);
        }
        float v30 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
        if ((_DWORD)v30) {
          unint64_t v27 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v51, v30, v29);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v9, (uint64_t)&v51);
        }
        unsigned int v31 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v51);
        unint64_t v32 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v32 && gBreakOnError)
        {
          __int128 v46 = 3LL;
          int v47 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v21 & 2) == 0) {
            goto LABEL_38;
          }
          __int128 v46 = 2LL;
          int v47 = 348LL;
        }

        breakpoint_break((uint64_t)&v51, (volatile int *)v47, v46, v32, v9);
LABEL_38:
        float v33 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v31) defaultFbufStream];
        uint64_t v34 = (unsigned int *)((char *)v33 + 56);
        do
          unint64_t v35 = __ldaxr(v34);
        while (__stlxr(1u, v34));
        if (v35 == 1)
        {
          do
          {
            while (*v34 == 1)
              ;
            do
              unint64_t v36 = __ldaxr(v34);
            while (__stlxr(1u, v34));
          }

          while (v36 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v33, (GPUTools::FB::Fbuf *)&v51, *(unsigned int *)v51, 1);
        atomic_store(0, v34);
        do
        {
          unsigned int v37 = __ldaxr(v10);
          unsigned int v38 = v37 - 1;
        }

        while (__stlxr(v38, v10));
        if (gCheckGLErrors) {
          unsigned int v39 = v38 < 1;
        }
        else {
          unsigned int v39 = 1;
        }
        if (!v39) {
          handle_opengl_thread_conflict((const void **)v9);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    signed int v40 = __ldaxr(v10);
  while (__stlxr(v40 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, float))(*(void *)(v9 + 24) + 1240LL))(a1, a2);
LABEL_51:
  if (v51) {
    free(v51);
  }
}

        uint64_t v25 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v20), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v25) {
          uint64_t v25 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v49, v26);
        }
        unint64_t v28 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v7 + 3404);
        if ((_DWORD)v28) {
          uint64_t v25 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v49, v28, v27);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v25), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v7, (uint64_t)&v49);
        }
        id v29 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v7 + 3480),  (GPUTools::FB::Fbuf *)(v7 + 3520),  (GPUTools::FB *)&v49);
        float v30 = *(unsigned int *)(v7 + 3404);
        if ((_DWORD)v30 && gBreakOnError)
        {
          id v44 = 3LL;
          unsigned int v45 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v19 & 2) == 0) {
            goto LABEL_38;
          }
          id v44 = 2LL;
          unsigned int v45 = 351LL;
        }

        breakpoint_break((uint64_t)&v49, (volatile int *)v45, v44, v30, v7);
LABEL_38:
        unsigned int v31 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v29) defaultFbufStream];
        unint64_t v32 = (unsigned int *)((char *)v31 + 56);
        do
          float v33 = __ldaxr(v32);
        while (__stlxr(1u, v32));
        if (v33 == 1)
        {
          do
          {
            while (*v32 == 1)
              ;
            do
              uint64_t v34 = __ldaxr(v32);
            while (__stlxr(1u, v32));
          }

          while (v34 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v31, (GPUTools::FB::Fbuf *)&v49, *(unsigned int *)v49, 1);
        atomic_store(0, v32);
        do
        {
          unint64_t v35 = __ldaxr(v8);
          unint64_t v36 = v35 - 1;
        }

        while (__stlxr(v36, v8));
        if (gCheckGLErrors) {
          unsigned int v37 = v36 < 1;
        }
        else {
          unsigned int v37 = 1;
        }
        if (!v37) {
          handle_opengl_thread_conflict((const void **)v7);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v14, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    unsigned int v38 = __ldaxr(v8);
  while (__stlxr(v38 - 1, v8));
  [(id)DYGetGLGuestAppClient(v12) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *))(*(void *)(v7 + 24) + 1256LL))(a1);
LABEL_51:
  if (v49) {
    free(v49);
  }
}

        float v30 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v25), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v30) {
          float v30 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v54, v31);
        }
        float v33 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
        if ((_DWORD)v33) {
          float v30 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v54, v33, v32);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v30), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v9, (uint64_t)&v54);
        }
        uint64_t v34 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v54);
        unint64_t v35 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v35 && gBreakOnError)
        {
          uint64_t v49 = 3LL;
          uint64_t v50 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v24 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v49 = 2LL;
          uint64_t v50 = 353LL;
        }

        breakpoint_break((uint64_t)&v54, (volatile int *)v50, v49, v35, v9);
LABEL_38:
        unint64_t v36 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v34) defaultFbufStream];
        unsigned int v37 = (unsigned int *)((char *)v36 + 56);
        do
          unsigned int v38 = __ldaxr(v37);
        while (__stlxr(1u, v37));
        if (v38 == 1)
        {
          do
          {
            while (*v37 == 1)
              ;
            do
              unsigned int v39 = __ldaxr(v37);
            while (__stlxr(1u, v37));
          }

          while (v39 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v36, (GPUTools::FB::Fbuf *)&v54, *(unsigned int *)v54, 1);
        atomic_store(0, v37);
        do
        {
          signed int v40 = __ldaxr(v10);
          BOOL v41 = v40 - 1;
        }

        while (__stlxr(v41, v10));
        if (gCheckGLErrors) {
          unsigned int v42 = v41 < 1;
        }
        else {
          unsigned int v42 = 1;
        }
        if (!v42) {
          handle_opengl_thread_conflict((const void **)v9);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    uint64_t v43 = __ldaxr(v10);
  while (__stlxr(v43 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, const float *))(*(void *)(v9 + 24) + 1272LL))(a1, a2);
LABEL_51:
  if (v54) {
    free(v54);
  }
}

        unint64_t v27 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v22), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v27) {
          unint64_t v27 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v51, v28);
        }
        float v30 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
        if ((_DWORD)v30) {
          unint64_t v27 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v51, v30, v29);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v9, (uint64_t)&v51);
        }
        unsigned int v31 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v51);
        unint64_t v32 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v32 && gBreakOnError)
        {
          __int128 v46 = 3LL;
          int v47 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v21 & 2) == 0) {
            goto LABEL_38;
          }
          __int128 v46 = 2LL;
          int v47 = 358LL;
        }

        breakpoint_break((uint64_t)&v51, (volatile int *)v47, v46, v32, v9);
LABEL_38:
        float v33 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v31) defaultFbufStream];
        uint64_t v34 = (unsigned int *)((char *)v33 + 56);
        do
          unint64_t v35 = __ldaxr(v34);
        while (__stlxr(1u, v34));
        if (v35 == 1)
        {
          do
          {
            while (*v34 == 1)
              ;
            do
              unint64_t v36 = __ldaxr(v34);
            while (__stlxr(1u, v34));
          }

          while (v36 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v33, (GPUTools::FB::Fbuf *)&v51, *(unsigned int *)v51, 1);
        atomic_store(0, v34);
        do
        {
          unsigned int v37 = __ldaxr(v10);
          unsigned int v38 = v37 - 1;
        }

        while (__stlxr(v38, v10));
        if (gCheckGLErrors) {
          unsigned int v39 = v38 < 1;
        }
        else {
          unsigned int v39 = 1;
        }
        if (!v39) {
          handle_opengl_thread_conflict((const void **)v9);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    signed int v40 = __ldaxr(v10);
  while (__stlxr(v40 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 1288LL))(a1, a2);
LABEL_51:
  if (v51) {
    free(v51);
  }
}

        unsigned int v31 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v26), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v31) {
          unsigned int v31 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v55, v32);
        }
        uint64_t v34 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
        if ((_DWORD)v34) {
          unsigned int v31 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v55, v34, v33);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v31), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v13, (uint64_t)&v55);
        }
        unint64_t v35 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)&v55);
        unint64_t v36 = *(unsigned int *)(v13 + 3404);
        if ((_DWORD)v36 && gBreakOnError)
        {
          uint64_t v50 = 3LL;
          __int128 v51 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v25 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v50 = 2LL;
          __int128 v51 = 372LL;
        }

        breakpoint_break((uint64_t)&v55, (volatile int *)v51, v50, v36, v13);
LABEL_38:
        unsigned int v37 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v35) defaultFbufStream];
        unsigned int v38 = (unsigned int *)((char *)v37 + 56);
        do
          unsigned int v39 = __ldaxr(v38);
        while (__stlxr(1u, v38));
        if (v39 == 1)
        {
          do
          {
            while (*v38 == 1)
              ;
            do
              signed int v40 = __ldaxr(v38);
            while (__stlxr(1u, v38));
          }

          while (v40 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v37, (GPUTools::FB::Fbuf *)&v55, *(unsigned int *)v55, 1);
        atomic_store(0, v38);
        do
        {
          BOOL v41 = __ldaxr(v14);
          unsigned int v42 = v41 - 1;
        }

        while (__stlxr(v42, v14));
        if (gCheckGLErrors) {
          uint64_t v43 = v42 < 1;
        }
        else {
          uint64_t v43 = 1;
        }
        if (!v43) {
          handle_opengl_thread_conflict((const void **)v13);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v20, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    id v44 = __ldaxr(v14);
  while (__stlxr(v44 - 1, v14));
  [(id)DYGetGLGuestAppClient(v18) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, float))(*(void *)(v13 + 24) + 1360LL))(a1, a2, a3, a4);
LABEL_51:
  if (v55) {
    free(v55);
  }
}

        unint64_t v27 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v22), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v27) {
          unint64_t v27 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v51, v28);
        }
        float v30 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
        if ((_DWORD)v30) {
          unint64_t v27 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v51, v30, v29);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v9, (uint64_t)&v51);
        }
        unsigned int v31 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v51);
        unint64_t v32 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v32 && gBreakOnError)
        {
          __int128 v46 = 3LL;
          int v47 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v21 & 2) == 0) {
            goto LABEL_38;
          }
          __int128 v46 = 2LL;
          int v47 = 376LL;
        }

        breakpoint_break((uint64_t)&v51, (volatile int *)v47, v46, v32, v9);
LABEL_38:
        float v33 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v31) defaultFbufStream];
        uint64_t v34 = (unsigned int *)((char *)v33 + 56);
        do
          unint64_t v35 = __ldaxr(v34);
        while (__stlxr(1u, v34));
        if (v35 == 1)
        {
          do
          {
            while (*v34 == 1)
              ;
            do
              unint64_t v36 = __ldaxr(v34);
            while (__stlxr(1u, v34));
          }

          while (v36 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v33, (GPUTools::FB::Fbuf *)&v51, *(unsigned int *)v51, 1);
        atomic_store(0, v34);
        do
        {
          unsigned int v37 = __ldaxr(v10);
          unsigned int v38 = v37 - 1;
        }

        while (__stlxr(v38, v10));
        if (gCheckGLErrors) {
          unsigned int v39 = v38 < 1;
        }
        else {
          unsigned int v39 = 1;
        }
        if (!v39) {
          handle_opengl_thread_conflict((const void **)v9);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    signed int v40 = __ldaxr(v10);
  while (__stlxr(v40 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 1392LL))(a1, a2);
LABEL_51:
  if (v51) {
    free(v51);
  }
}

        float v30 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v25), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v30) {
          float v30 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v54, v31);
        }
        float v33 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
        if ((_DWORD)v33) {
          float v30 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v54, v33, v32);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v30), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v9, (uint64_t)&v54);
        }
        uint64_t v34 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v54);
        unint64_t v35 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v35 && gBreakOnError)
        {
          uint64_t v49 = 3LL;
          uint64_t v50 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v24 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v49 = 2LL;
          uint64_t v50 = 379LL;
        }

        breakpoint_break((uint64_t)&v54, (volatile int *)v50, v49, v35, v9);
LABEL_38:
        unint64_t v36 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v34) defaultFbufStream];
        unsigned int v37 = (unsigned int *)((char *)v36 + 56);
        do
          unsigned int v38 = __ldaxr(v37);
        while (__stlxr(1u, v37));
        if (v38 == 1)
        {
          do
          {
            while (*v37 == 1)
              ;
            do
              unsigned int v39 = __ldaxr(v37);
            while (__stlxr(1u, v37));
          }

          while (v39 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v36, (GPUTools::FB::Fbuf *)&v54, *(unsigned int *)v54, 1);
        atomic_store(0, v37);
        do
        {
          signed int v40 = __ldaxr(v10);
          BOOL v41 = v40 - 1;
        }

        while (__stlxr(v41, v10));
        if (gCheckGLErrors) {
          unsigned int v42 = v41 < 1;
        }
        else {
          unsigned int v42 = 1;
        }
        if (!v42) {
          handle_opengl_thread_conflict((const void **)v9);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    uint64_t v43 = __ldaxr(v10);
  while (__stlxr(v43 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, const float *))(*(void *)(v9 + 24) + 1408LL))(a1, a2);
LABEL_51:
  if (v54) {
    free(v54);
  }
}

        unsigned int v31 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v26), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v31) {
          unsigned int v31 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v55, v32);
        }
        uint64_t v34 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
        if ((_DWORD)v34) {
          unsigned int v31 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v55, v34, v33);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v31), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v13, (uint64_t)&v55);
        }
        unint64_t v35 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)&v55);
        unint64_t v36 = *(unsigned int *)(v13 + 3404);
        if ((_DWORD)v36 && gBreakOnError)
        {
          uint64_t v50 = 3LL;
          __int128 v51 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v25 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v50 = 2LL;
          __int128 v51 = 423LL;
        }

        breakpoint_break((uint64_t)&v55, (volatile int *)v51, v50, v36, v13);
LABEL_38:
        unsigned int v37 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v35) defaultFbufStream];
        unsigned int v38 = (unsigned int *)((char *)v37 + 56);
        do
          unsigned int v39 = __ldaxr(v38);
        while (__stlxr(1u, v38));
        if (v39 == 1)
        {
          do
          {
            while (*v38 == 1)
              ;
            do
              signed int v40 = __ldaxr(v38);
            while (__stlxr(1u, v38));
          }

          while (v40 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v37, (GPUTools::FB::Fbuf *)&v55, *(unsigned int *)v55, 1);
        atomic_store(0, v38);
        do
        {
          BOOL v41 = __ldaxr(v14);
          unsigned int v42 = v41 - 1;
        }

        while (__stlxr(v42, v14));
        if (gCheckGLErrors) {
          uint64_t v43 = v42 < 1;
        }
        else {
          uint64_t v43 = 1;
        }
        if (!v43) {
          handle_opengl_thread_conflict((const void **)v13);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v20, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    id v44 = __ldaxr(v14);
  while (__stlxr(v44 - 1, v14));
  [(id)DYGetGLGuestAppClient(v18) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, float, float, float))(*(void *)(v13 + 24) + 1456LL))(a1, a2, a3, a4);
LABEL_51:
  if (v55) {
    free(v55);
  }
}

        id v29 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v24), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v29) {
          id v29 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v53, v30);
        }
        unint64_t v32 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
        if ((_DWORD)v32) {
          id v29 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v53, v32, v31);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v11, (uint64_t)&v53);
        }
        float v33 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v53);
        uint64_t v34 = *(unsigned int *)(v11 + 3404);
        if ((_DWORD)v34 && gBreakOnError)
        {
          uint64_t v48 = 3LL;
          uint64_t v49 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v23 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v48 = 2LL;
          uint64_t v49 = 438LL;
        }

        breakpoint_break((uint64_t)&v53, (volatile int *)v49, v48, v34, v11);
LABEL_38:
        unint64_t v35 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v33) defaultFbufStream];
        unint64_t v36 = (unsigned int *)((char *)v35 + 56);
        do
          unsigned int v37 = __ldaxr(v36);
        while (__stlxr(1u, v36));
        if (v37 == 1)
        {
          do
          {
            while (*v36 == 1)
              ;
            do
              unsigned int v38 = __ldaxr(v36);
            while (__stlxr(1u, v36));
          }

          while (v38 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v35, (GPUTools::FB::Fbuf *)&v53, *(unsigned int *)v53, 1);
        atomic_store(0, v36);
        do
        {
          unsigned int v39 = __ldaxr(v12);
          signed int v40 = v39 - 1;
        }

        while (__stlxr(v40, v12));
        if (gCheckGLErrors) {
          BOOL v41 = v40 < 1;
        }
        else {
          BOOL v41 = 1;
        }
        if (!v41) {
          handle_opengl_thread_conflict((const void **)v11);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v18, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    unsigned int v42 = __ldaxr(v12);
  while (__stlxr(v42 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t))(*(void *)(v11 + 24) + 1560LL))(a1, a2, a3);
LABEL_51:
  if (v53) {
    free(v53);
  }
}

        unint64_t v27 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v22), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v27) {
          unint64_t v27 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v51, v28);
        }
        float v30 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
        if ((_DWORD)v30) {
          unint64_t v27 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v51, v30, v29);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v9, (uint64_t)&v51);
        }
        unsigned int v31 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v51);
        unint64_t v32 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v32 && gBreakOnError)
        {
          __int128 v46 = 3LL;
          int v47 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v21 & 2) == 0) {
            goto LABEL_38;
          }
          __int128 v46 = 2LL;
          int v47 = 448LL;
        }

        breakpoint_break((uint64_t)&v51, (volatile int *)v47, v46, v32, v9);
LABEL_38:
        float v33 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v31) defaultFbufStream];
        uint64_t v34 = (unsigned int *)((char *)v33 + 56);
        do
          unint64_t v35 = __ldaxr(v34);
        while (__stlxr(1u, v34));
        if (v35 == 1)
        {
          do
          {
            while (*v34 == 1)
              ;
            do
              unint64_t v36 = __ldaxr(v34);
            while (__stlxr(1u, v34));
          }

          while (v36 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v33, (GPUTools::FB::Fbuf *)&v51, *(unsigned int *)v51, 1);
        atomic_store(0, v34);
        do
        {
          unsigned int v37 = __ldaxr(v10);
          unsigned int v38 = v37 - 1;
        }

        while (__stlxr(v38, v10));
        if (gCheckGLErrors) {
          unsigned int v39 = v38 < 1;
        }
        else {
          unsigned int v39 = 1;
        }
        if (!v39) {
          handle_opengl_thread_conflict((const void **)v9);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    signed int v40 = __ldaxr(v10);
  while (__stlxr(v40 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, float))(*(void *)(v9 + 24) + 1592LL))(a1, a2);
LABEL_51:
  if (v51) {
    free(v51);
  }
}

        id v29 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v24), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v29) {
          id v29 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v53, v30);
        }
        unint64_t v32 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
        if ((_DWORD)v32) {
          id v29 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v53, v32, v31);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v11, (uint64_t)&v53);
        }
        float v33 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v53);
        uint64_t v34 = *(unsigned int *)(v11 + 3404);
        if ((_DWORD)v34 && gBreakOnError)
        {
          uint64_t v48 = 3LL;
          uint64_t v49 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v23 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v48 = 2LL;
          uint64_t v49 = 450LL;
        }

        breakpoint_break((uint64_t)&v53, (volatile int *)v49, v48, v34, v11);
LABEL_38:
        unint64_t v35 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v33) defaultFbufStream];
        unint64_t v36 = (unsigned int *)((char *)v35 + 56);
        do
          unsigned int v37 = __ldaxr(v36);
        while (__stlxr(1u, v36));
        if (v37 == 1)
        {
          do
          {
            while (*v36 == 1)
              ;
            do
              unsigned int v38 = __ldaxr(v36);
            while (__stlxr(1u, v36));
          }

          while (v38 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v35, (GPUTools::FB::Fbuf *)&v53, *(unsigned int *)v53, 1);
        atomic_store(0, v36);
        do
        {
          unsigned int v39 = __ldaxr(v12);
          signed int v40 = v39 - 1;
        }

        while (__stlxr(v40, v12));
        if (gCheckGLErrors) {
          BOOL v41 = v40 < 1;
        }
        else {
          BOOL v41 = 1;
        }
        if (!v41) {
          handle_opengl_thread_conflict((const void **)v11);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v18, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    unsigned int v42 = __ldaxr(v12);
  while (__stlxr(v42 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, float, float))(*(void *)(v11 + 24) + 1608LL))(a1, a2, a3);
LABEL_51:
  if (v53) {
    free(v53);
  }
}

        uint64_t v25 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v20), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v25) {
          uint64_t v25 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v49, v26);
        }
        unint64_t v28 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v7 + 3404);
        if ((_DWORD)v28) {
          uint64_t v25 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v49, v28, v27);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v25), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v7, (uint64_t)&v49);
        }
        id v29 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v7 + 3480),  (GPUTools::FB::Fbuf *)(v7 + 3520),  (GPUTools::FB *)&v49);
        float v30 = *(unsigned int *)(v7 + 3404);
        if ((_DWORD)v30 && gBreakOnError)
        {
          id v44 = 3LL;
          unsigned int v45 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v19 & 2) == 0) {
            goto LABEL_38;
          }
          id v44 = 2LL;
          unsigned int v45 = 454LL;
        }

        breakpoint_break((uint64_t)&v49, (volatile int *)v45, v44, v30, v7);
LABEL_38:
        unsigned int v31 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v29) defaultFbufStream];
        unint64_t v32 = (unsigned int *)((char *)v31 + 56);
        do
          float v33 = __ldaxr(v32);
        while (__stlxr(1u, v32));
        if (v33 == 1)
        {
          do
          {
            while (*v32 == 1)
              ;
            do
              uint64_t v34 = __ldaxr(v32);
            while (__stlxr(1u, v32));
          }

          while (v34 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v31, (GPUTools::FB::Fbuf *)&v49, *(unsigned int *)v49, 1);
        atomic_store(0, v32);
        do
        {
          unint64_t v35 = __ldaxr(v8);
          unint64_t v36 = v35 - 1;
        }

        while (__stlxr(v36, v8));
        if (gCheckGLErrors) {
          unsigned int v37 = v36 < 1;
        }
        else {
          unsigned int v37 = 1;
        }
        if (!v37) {
          handle_opengl_thread_conflict((const void **)v7);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v14, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    unsigned int v38 = __ldaxr(v8);
  while (__stlxr(v38 - 1, v8));
  [(id)DYGetGLGuestAppClient(v12) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *))(*(void *)(v7 + 24) + 1640LL))(a1);
LABEL_51:
  if (v49) {
    free(v49);
  }
}

        uint64_t v25 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v20), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v25) {
          uint64_t v25 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v49, v26);
        }
        unint64_t v28 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v7 + 3404);
        if ((_DWORD)v28) {
          uint64_t v25 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v49, v28, v27);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v25), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v7, (uint64_t)&v49);
        }
        id v29 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v7 + 3480),  (GPUTools::FB::Fbuf *)(v7 + 3520),  (GPUTools::FB *)&v49);
        float v30 = *(unsigned int *)(v7 + 3404);
        if ((_DWORD)v30 && gBreakOnError)
        {
          id v44 = 3LL;
          unsigned int v45 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v19 & 2) == 0) {
            goto LABEL_38;
          }
          id v44 = 2LL;
          unsigned int v45 = 471LL;
        }

        breakpoint_break((uint64_t)&v49, (volatile int *)v45, v44, v30, v7);
LABEL_38:
        unsigned int v31 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v29) defaultFbufStream];
        unint64_t v32 = (unsigned int *)((char *)v31 + 56);
        do
          float v33 = __ldaxr(v32);
        while (__stlxr(1u, v32));
        if (v33 == 1)
        {
          do
          {
            while (*v32 == 1)
              ;
            do
              uint64_t v34 = __ldaxr(v32);
            while (__stlxr(1u, v32));
          }

          while (v34 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v31, (GPUTools::FB::Fbuf *)&v49, *(unsigned int *)v49, 1);
        atomic_store(0, v32);
        do
        {
          unint64_t v35 = __ldaxr(v8);
          unint64_t v36 = v35 - 1;
        }

        while (__stlxr(v36, v8));
        if (gCheckGLErrors) {
          unsigned int v37 = v36 < 1;
        }
        else {
          unsigned int v37 = 1;
        }
        if (!v37) {
          handle_opengl_thread_conflict((const void **)v7);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v14, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    unsigned int v38 = __ldaxr(v8);
  while (__stlxr(v38 - 1, v8));
  [(id)DYGetGLGuestAppClient(v12) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *))(*(void *)(v7 + 24) + 1680LL))(a1);
LABEL_51:
  if (v49) {
    free(v49);
  }
}

        unint64_t v27 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v22), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v27) {
          unint64_t v27 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v51, v28);
        }
        float v30 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
        if ((_DWORD)v30) {
          unint64_t v27 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v51, v30, v29);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v9, (uint64_t)&v51);
        }
        unsigned int v31 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v51);
        unint64_t v32 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v32 && gBreakOnError)
        {
          __int128 v46 = 3LL;
          int v47 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v21 & 2) == 0) {
            goto LABEL_38;
          }
          __int128 v46 = 2LL;
          int v47 = 497LL;
        }

        breakpoint_break((uint64_t)&v51, (volatile int *)v47, v46, v32, v9);
LABEL_38:
        float v33 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v31) defaultFbufStream];
        uint64_t v34 = (unsigned int *)((char *)v33 + 56);
        do
          unint64_t v35 = __ldaxr(v34);
        while (__stlxr(1u, v34));
        if (v35 == 1)
        {
          do
          {
            while (*v34 == 1)
              ;
            do
              unint64_t v36 = __ldaxr(v34);
            while (__stlxr(1u, v34));
          }

          while (v36 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v33, (GPUTools::FB::Fbuf *)&v51, *(unsigned int *)v51, 1);
        atomic_store(0, v34);
        do
        {
          unsigned int v37 = __ldaxr(v10);
          unsigned int v38 = v37 - 1;
        }

        while (__stlxr(v38, v10));
        if (gCheckGLErrors) {
          unsigned int v39 = v38 < 1;
        }
        else {
          unsigned int v39 = 1;
        }
        if (!v39) {
          handle_opengl_thread_conflict((const void **)v9);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    signed int v40 = __ldaxr(v10);
  while (__stlxr(v40 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 1888LL))(a1, a2);
LABEL_51:
  if (v51) {
    free(v51);
  }
}

        float v33 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v33) {
          float v33 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v57, v34);
        }
        unint64_t v36 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v15 + 3404);
        if ((_DWORD)v36) {
          float v33 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v57, v36, v35);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v15, (uint64_t)&v57);
        }
        unsigned int v37 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v15 + 3480),  (GPUTools::FB::Fbuf *)(v15 + 3520),  (GPUTools::FB *)&v57);
        unsigned int v38 = *(unsigned int *)(v15 + 3404);
        if ((_DWORD)v38 && gBreakOnError)
        {
          __uint64_t v52 = 3LL;
          char v53 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v27 & 2) == 0) {
            goto LABEL_38;
          }
          __uint64_t v52 = 2LL;
          char v53 = 513LL;
        }

        breakpoint_break((uint64_t)&v57, (volatile int *)v53, v52, v38, v15);
LABEL_38:
        unsigned int v39 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v37) defaultFbufStream];
        signed int v40 = (unsigned int *)((char *)v39 + 56);
        do
          BOOL v41 = __ldaxr(v40);
        while (__stlxr(1u, v40));
        if (v41 == 1)
        {
          do
          {
            while (*v40 == 1)
              ;
            do
              unsigned int v42 = __ldaxr(v40);
            while (__stlxr(1u, v40));
          }

          while (v42 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v39, (GPUTools::FB::Fbuf *)&v57, *(unsigned int *)v57, 1);
        atomic_store(0, v40);
        do
        {
          uint64_t v43 = __ldaxr(v16);
          id v44 = v43 - 1;
        }

        while (__stlxr(v44, v16));
        if (gCheckGLErrors) {
          unsigned int v45 = v44 < 1;
        }
        else {
          unsigned int v45 = 1;
        }
        if (!v45) {
          handle_opengl_thread_conflict((const void **)v15);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v22, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    __int128 v46 = __ldaxr(v16);
  while (__stlxr(v46 - 1, v16));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, float, float, float, float))(*(void *)(v15 + 24) + 1984LL))( a1,  a2,  a3,  a4,  a5);
LABEL_51:
  if (v57) {
    free(v57);
  }
}

        unsigned int v31 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v26), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v31) {
          unsigned int v31 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v55, v32);
        }
        uint64_t v34 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
        if ((_DWORD)v34) {
          unsigned int v31 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v55, v34, v33);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v31), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v13, (uint64_t)&v55);
        }
        unint64_t v35 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)&v55);
        unint64_t v36 = *(unsigned int *)(v13 + 3404);
        if ((_DWORD)v36 && gBreakOnError)
        {
          uint64_t v50 = 3LL;
          __int128 v51 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v25 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v50 = 2LL;
          __int128 v51 = 517LL;
        }

        breakpoint_break((uint64_t)&v55, (volatile int *)v51, v50, v36, v13);
LABEL_38:
        unsigned int v37 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v35) defaultFbufStream];
        unsigned int v38 = (unsigned int *)((char *)v37 + 56);
        do
          unsigned int v39 = __ldaxr(v38);
        while (__stlxr(1u, v38));
        if (v39 == 1)
        {
          do
          {
            while (*v38 == 1)
              ;
            do
              signed int v40 = __ldaxr(v38);
            while (__stlxr(1u, v38));
          }

          while (v40 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v37, (GPUTools::FB::Fbuf *)&v55, *(unsigned int *)v55, 1);
        atomic_store(0, v38);
        do
        {
          BOOL v41 = __ldaxr(v14);
          unsigned int v42 = v41 - 1;
        }

        while (__stlxr(v42, v14));
        if (gCheckGLErrors) {
          uint64_t v43 = v42 < 1;
        }
        else {
          uint64_t v43 = 1;
        }
        if (!v43) {
          handle_opengl_thread_conflict((const void **)v13);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v20, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    id v44 = __ldaxr(v14);
  while (__stlxr(v44 - 1, v14));
  [(id)DYGetGLGuestAppClient(v18) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, float, float, float))(*(void *)(v13 + 24) + 2000LL))(a1, a2, a3, a4);
LABEL_51:
  if (v55) {
    free(v55);
  }
}

        float v33 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v33) {
          float v33 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v57, v34);
        }
        unint64_t v36 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v15 + 3404);
        if ((_DWORD)v36) {
          float v33 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v57, v36, v35);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v15, (uint64_t)&v57);
        }
        unsigned int v37 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v15 + 3480),  (GPUTools::FB::Fbuf *)(v15 + 3520),  (GPUTools::FB *)&v57);
        unsigned int v38 = *(unsigned int *)(v15 + 3404);
        if ((_DWORD)v38 && gBreakOnError)
        {
          __uint64_t v52 = 3LL;
          char v53 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v27 & 2) == 0) {
            goto LABEL_38;
          }
          __uint64_t v52 = 2LL;
          char v53 = 518LL;
        }

        breakpoint_break((uint64_t)&v57, (volatile int *)v53, v52, v38, v15);
LABEL_38:
        unsigned int v39 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v37) defaultFbufStream];
        signed int v40 = (unsigned int *)((char *)v39 + 56);
        do
          BOOL v41 = __ldaxr(v40);
        while (__stlxr(1u, v40));
        if (v41 == 1)
        {
          do
          {
            while (*v40 == 1)
              ;
            do
              unsigned int v42 = __ldaxr(v40);
            while (__stlxr(1u, v40));
          }

          while (v42 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v39, (GPUTools::FB::Fbuf *)&v57, *(unsigned int *)v57, 1);
        atomic_store(0, v40);
        do
        {
          uint64_t v43 = __ldaxr(v16);
          id v44 = v43 - 1;
        }

        while (__stlxr(v44, v16));
        if (gCheckGLErrors) {
          unsigned int v45 = v44 < 1;
        }
        else {
          unsigned int v45 = 1;
        }
        if (!v45) {
          handle_opengl_thread_conflict((const void **)v15);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v22, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    __int128 v46 = __ldaxr(v16);
  while (__stlxr(v46 - 1, v16));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 + 24) + 2008LL))( a1,  a2,  a3,  a4,  a5);
LABEL_51:
  if (v57) {
    free(v57);
  }
}

        unint64_t v27 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v22), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v27) {
          unint64_t v27 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v51, v28);
        }
        float v30 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
        if ((_DWORD)v30) {
          unint64_t v27 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v51, v30, v29);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v9, (uint64_t)&v51);
        }
        unsigned int v31 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v51);
        unint64_t v32 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v32 && gBreakOnError)
        {
          __int128 v46 = 3LL;
          int v47 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v21 & 2) == 0) {
            goto LABEL_38;
          }
          __int128 v46 = 2LL;
          int v47 = 539LL;
        }

        breakpoint_break((uint64_t)&v51, (volatile int *)v47, v46, v32, v9);
LABEL_38:
        float v33 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v31) defaultFbufStream];
        uint64_t v34 = (unsigned int *)((char *)v33 + 56);
        do
          unint64_t v35 = __ldaxr(v34);
        while (__stlxr(1u, v34));
        if (v35 == 1)
        {
          do
          {
            while (*v34 == 1)
              ;
            do
              unint64_t v36 = __ldaxr(v34);
            while (__stlxr(1u, v34));
          }

          while (v36 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v33, (GPUTools::FB::Fbuf *)&v51, *(unsigned int *)v51, 1);
        atomic_store(0, v34);
        do
        {
          unsigned int v37 = __ldaxr(v10);
          unsigned int v38 = v37 - 1;
        }

        while (__stlxr(v38, v10));
        if (gCheckGLErrors) {
          unsigned int v39 = v38 < 1;
        }
        else {
          unsigned int v39 = 1;
        }
        if (!v39) {
          handle_opengl_thread_conflict((const void **)v9);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    signed int v40 = __ldaxr(v10);
  while (__stlxr(v40 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 2024LL))(a1, a2);
LABEL_51:
  if (v51) {
    free(v51);
  }
}

        unsigned int v31 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v26), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v31) {
          unsigned int v31 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v55, v32);
        }
        uint64_t v34 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
        if ((_DWORD)v34) {
          unsigned int v31 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v55, v34, v33);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v31), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v13, (uint64_t)&v55);
        }
        unint64_t v35 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)&v55);
        unint64_t v36 = *(unsigned int *)(v13 + 3404);
        if ((_DWORD)v36 && gBreakOnError)
        {
          uint64_t v50 = 3LL;
          __int128 v51 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v25 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v50 = 2LL;
          __int128 v51 = 541LL;
        }

        breakpoint_break((uint64_t)&v55, (volatile int *)v51, v50, v36, v13);
LABEL_38:
        unsigned int v37 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v35) defaultFbufStream];
        unsigned int v38 = (unsigned int *)((char *)v37 + 56);
        do
          unsigned int v39 = __ldaxr(v38);
        while (__stlxr(1u, v38));
        if (v39 == 1)
        {
          do
          {
            while (*v38 == 1)
              ;
            do
              signed int v40 = __ldaxr(v38);
            while (__stlxr(1u, v38));
          }

          while (v40 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v37, (GPUTools::FB::Fbuf *)&v55, *(unsigned int *)v55, 1);
        atomic_store(0, v38);
        do
        {
          BOOL v41 = __ldaxr(v14);
          unsigned int v42 = v41 - 1;
        }

        while (__stlxr(v42, v14));
        if (gCheckGLErrors) {
          uint64_t v43 = v42 < 1;
        }
        else {
          uint64_t v43 = 1;
        }
        if (!v43) {
          handle_opengl_thread_conflict((const void **)v13);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v20, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    id v44 = __ldaxr(v14);
  while (__stlxr(v44 - 1, v14));
  [(id)DYGetGLGuestAppClient(v18) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 + 24) + 2032LL))( a1,  a2,  a3,  a4);
LABEL_51:
  if (v55) {
    free(v55);
  }
}

        unint64_t v27 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v22), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v27) {
          unint64_t v27 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v51, v28);
        }
        float v30 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
        if ((_DWORD)v30) {
          unint64_t v27 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v51, v30, v29);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v9, (uint64_t)&v51);
        }
        unsigned int v31 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v51);
        unint64_t v32 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v32 && gBreakOnError)
        {
          __int128 v46 = 3LL;
          int v47 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v21 & 2) == 0) {
            goto LABEL_38;
          }
          __int128 v46 = 2LL;
          int v47 = 544LL;
        }

        breakpoint_break((uint64_t)&v51, (volatile int *)v47, v46, v32, v9);
LABEL_38:
        float v33 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v31) defaultFbufStream];
        uint64_t v34 = (unsigned int *)((char *)v33 + 56);
        do
          unint64_t v35 = __ldaxr(v34);
        while (__stlxr(1u, v34));
        if (v35 == 1)
        {
          do
          {
            while (*v34 == 1)
              ;
            do
              unint64_t v36 = __ldaxr(v34);
            while (__stlxr(1u, v34));
          }

          while (v36 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v33, (GPUTools::FB::Fbuf *)&v51, *(unsigned int *)v51, 1);
        atomic_store(0, v34);
        do
        {
          unsigned int v37 = __ldaxr(v10);
          unsigned int v38 = v37 - 1;
        }

        while (__stlxr(v38, v10));
        if (gCheckGLErrors) {
          unsigned int v39 = v38 < 1;
        }
        else {
          unsigned int v39 = 1;
        }
        if (!v39) {
          handle_opengl_thread_conflict((const void **)v9);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    signed int v40 = __ldaxr(v10);
  while (__stlxr(v40 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 2040LL))(a1, a2);
LABEL_51:
  if (v51) {
    free(v51);
  }
}

        unsigned int v31 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v26), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v31) {
          unsigned int v31 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v55, v32);
        }
        uint64_t v34 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
        if ((_DWORD)v34) {
          unsigned int v31 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v55, v34, v33);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v31), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v13, (uint64_t)&v55);
        }
        unint64_t v35 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)&v55);
        unint64_t v36 = *(unsigned int *)(v13 + 3404);
        if ((_DWORD)v36 && gBreakOnError)
        {
          uint64_t v50 = 3LL;
          __int128 v51 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v25 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v50 = 2LL;
          __int128 v51 = 546LL;
        }

        breakpoint_break((uint64_t)&v55, (volatile int *)v51, v50, v36, v13);
LABEL_38:
        unsigned int v37 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v35) defaultFbufStream];
        unsigned int v38 = (unsigned int *)((char *)v37 + 56);
        do
          unsigned int v39 = __ldaxr(v38);
        while (__stlxr(1u, v38));
        if (v39 == 1)
        {
          do
          {
            while (*v38 == 1)
              ;
            do
              signed int v40 = __ldaxr(v38);
            while (__stlxr(1u, v38));
          }

          while (v40 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v37, (GPUTools::FB::Fbuf *)&v55, *(unsigned int *)v55, 1);
        atomic_store(0, v38);
        do
        {
          BOOL v41 = __ldaxr(v14);
          unsigned int v42 = v41 - 1;
        }

        while (__stlxr(v42, v14));
        if (gCheckGLErrors) {
          uint64_t v43 = v42 < 1;
        }
        else {
          uint64_t v43 = 1;
        }
        if (!v43) {
          handle_opengl_thread_conflict((const void **)v13);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v20, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    id v44 = __ldaxr(v14);
  while (__stlxr(v44 - 1, v14));
  [(id)DYGetGLGuestAppClient(v18) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 + 24) + 2048LL))( a1,  a2,  a3,  a4);
LABEL_51:
  if (v55) {
    free(v55);
  }
}

        unsigned int v31 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v26), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v31) {
          unsigned int v31 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v55, v32);
        }
        uint64_t v34 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
        if ((_DWORD)v34) {
          unsigned int v31 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v55, v34, v33);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v31), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v13, (uint64_t)&v55);
        }
        unint64_t v35 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)&v55);
        unint64_t v36 = *(unsigned int *)(v13 + 3404);
        if ((_DWORD)v36 && gBreakOnError)
        {
          uint64_t v50 = 3LL;
          __int128 v51 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v25 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v50 = 2LL;
          __int128 v51 = 608LL;
        }

        breakpoint_break((uint64_t)&v55, (volatile int *)v51, v50, v36, v13);
LABEL_38:
        unsigned int v37 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v35) defaultFbufStream];
        unsigned int v38 = (unsigned int *)((char *)v37 + 56);
        do
          unsigned int v39 = __ldaxr(v38);
        while (__stlxr(1u, v38));
        if (v39 == 1)
        {
          do
          {
            while (*v38 == 1)
              ;
            do
              signed int v40 = __ldaxr(v38);
            while (__stlxr(1u, v38));
          }

          while (v40 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v37, (GPUTools::FB::Fbuf *)&v55, *(unsigned int *)v55, 1);
        atomic_store(0, v38);
        do
        {
          BOOL v41 = __ldaxr(v14);
          unsigned int v42 = v41 - 1;
        }

        while (__stlxr(v42, v14));
        if (gCheckGLErrors) {
          uint64_t v43 = v42 < 1;
        }
        else {
          uint64_t v43 = 1;
        }
        if (!v43) {
          handle_opengl_thread_conflict((const void **)v13);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v20, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    id v44 = __ldaxr(v14);
  while (__stlxr(v44 - 1, v14));
  [(id)DYGetGLGuestAppClient(v18) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, float, float, float))(*(void *)(v13 + 24) + 2472LL))(a1, a2, a3, a4);
LABEL_51:
  if (v55) {
    free(v55);
  }
}

        float v33 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v33) {
          float v33 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v57, v34);
        }
        unint64_t v36 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v15 + 3404);
        if ((_DWORD)v36) {
          float v33 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v57, v36, v35);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v15, (uint64_t)&v57);
        }
        unsigned int v37 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v15 + 3480),  (GPUTools::FB::Fbuf *)(v15 + 3520),  (GPUTools::FB *)&v57);
        unsigned int v38 = *(unsigned int *)(v15 + 3404);
        if ((_DWORD)v38 && gBreakOnError)
        {
          __uint64_t v52 = 3LL;
          char v53 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v27 & 2) == 0) {
            goto LABEL_38;
          }
          __uint64_t v52 = 2LL;
          char v53 = 733LL;
        }

        breakpoint_break((uint64_t)&v57, (volatile int *)v53, v52, v38, v15);
LABEL_38:
        unsigned int v39 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v37) defaultFbufStream];
        signed int v40 = (unsigned int *)((char *)v39 + 56);
        do
          BOOL v41 = __ldaxr(v40);
        while (__stlxr(1u, v40));
        if (v41 == 1)
        {
          do
          {
            while (*v40 == 1)
              ;
            do
              unsigned int v42 = __ldaxr(v40);
            while (__stlxr(1u, v40));
          }

          while (v42 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v39, (GPUTools::FB::Fbuf *)&v57, *(unsigned int *)v57, 1);
        atomic_store(0, v40);
        do
        {
          uint64_t v43 = __ldaxr(v16);
          id v44 = v43 - 1;
        }

        while (__stlxr(v44, v16));
        if (gCheckGLErrors) {
          unsigned int v45 = v44 < 1;
        }
        else {
          unsigned int v45 = 1;
        }
        if (!v45) {
          handle_opengl_thread_conflict((const void **)v15);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v22, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    __int128 v46 = __ldaxr(v16);
  while (__stlxr(v46 - 1, v16));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 + 24) + 2680LL))( a1,  a2,  a3,  a4,  a5);
LABEL_51:
  if (v57) {
    free(v57);
  }
}

        float v33 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v33) {
          float v33 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v57, v34);
        }
        unint64_t v36 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v15 + 3404);
        if ((_DWORD)v36) {
          float v33 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v57, v36, v35);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v15, (uint64_t)&v57);
        }
        unsigned int v37 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v15 + 3480),  (GPUTools::FB::Fbuf *)(v15 + 3520),  (GPUTools::FB *)&v57);
        unsigned int v38 = *(unsigned int *)(v15 + 3404);
        if ((_DWORD)v38 && gBreakOnError)
        {
          __uint64_t v52 = 3LL;
          char v53 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v27 & 2) == 0) {
            goto LABEL_38;
          }
          __uint64_t v52 = 2LL;
          char v53 = 27LL;
        }

        breakpoint_break((uint64_t)&v57, (volatile int *)v53, v52, v38, v15);
LABEL_38:
        unsigned int v39 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v37) defaultFbufStream];
        signed int v40 = (unsigned int *)((char *)v39 + 56);
        do
          BOOL v41 = __ldaxr(v40);
        while (__stlxr(1u, v40));
        if (v41 == 1)
        {
          do
          {
            while (*v40 == 1)
              ;
            do
              unsigned int v42 = __ldaxr(v40);
            while (__stlxr(1u, v40));
          }

          while (v42 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v39, (GPUTools::FB::Fbuf *)&v57, *(unsigned int *)v57, 1);
        atomic_store(0, v40);
        do
        {
          uint64_t v43 = __ldaxr(v16);
          id v44 = v43 - 1;
        }

        while (__stlxr(v44, v16));
        if (gCheckGLErrors) {
          unsigned int v45 = v44 < 1;
        }
        else {
          unsigned int v45 = 1;
        }
        if (!v45) {
          handle_opengl_thread_conflict((const void **)v15);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v22, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    __int128 v46 = __ldaxr(v16);
  while (__stlxr(v46 - 1, v16));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 + 24) + 2688LL))( a1,  a2,  a3,  a4,  a5);
LABEL_51:
  if (v57) {
    free(v57);
  }
}

        float v33 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v33) {
          float v33 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v57, v34);
        }
        unint64_t v36 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v15 + 3404);
        if ((_DWORD)v36) {
          float v33 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v57, v36, v35);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v15, (uint64_t)&v57);
        }
        unsigned int v37 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v15 + 3480),  (GPUTools::FB::Fbuf *)(v15 + 3520),  (GPUTools::FB *)&v57);
        unsigned int v38 = *(unsigned int *)(v15 + 3404);
        if ((_DWORD)v38 && gBreakOnError)
        {
          __uint64_t v52 = 3LL;
          char v53 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v27 & 2) == 0) {
            goto LABEL_38;
          }
          __uint64_t v52 = 2LL;
          char v53 = 23LL;
        }

        breakpoint_break((uint64_t)&v57, (volatile int *)v53, v52, v38, v15);
LABEL_38:
        unsigned int v39 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v37) defaultFbufStream];
        signed int v40 = (unsigned int *)((char *)v39 + 56);
        do
          BOOL v41 = __ldaxr(v40);
        while (__stlxr(1u, v40));
        if (v41 == 1)
        {
          do
          {
            while (*v40 == 1)
              ;
            do
              unsigned int v42 = __ldaxr(v40);
            while (__stlxr(1u, v40));
          }

          while (v42 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v39, (GPUTools::FB::Fbuf *)&v57, *(unsigned int *)v57, 1);
        atomic_store(0, v40);
        do
        {
          uint64_t v43 = __ldaxr(v16);
          id v44 = v43 - 1;
        }

        while (__stlxr(v44, v16));
        if (gCheckGLErrors) {
          unsigned int v45 = v44 < 1;
        }
        else {
          unsigned int v45 = 1;
        }
        if (!v45) {
          handle_opengl_thread_conflict((const void **)v15);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v22, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    __int128 v46 = __ldaxr(v16);
  while (__stlxr(v46 - 1, v16));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, float, float, float, float))(*(void *)(v15 + 24) + 2696LL))( a1,  a2,  a3,  a4,  a5);
LABEL_51:
  if (v57) {
    free(v57);
  }
}

        unint64_t v27 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v22), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v27) {
          unint64_t v27 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v51, v28);
        }
        float v30 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
        if ((_DWORD)v30) {
          unint64_t v27 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v51, v30, v29);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v9, (uint64_t)&v51);
        }
        unsigned int v31 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v51);
        unint64_t v32 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v32 && gBreakOnError)
        {
          __int128 v46 = 3LL;
          int v47 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v21 & 2) == 0) {
            goto LABEL_38;
          }
          __int128 v46 = 2LL;
          int v47 = 24LL;
        }

        breakpoint_break((uint64_t)&v51, (volatile int *)v47, v46, v32, v9);
LABEL_38:
        float v33 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v31) defaultFbufStream];
        uint64_t v34 = (unsigned int *)((char *)v33 + 56);
        do
          unint64_t v35 = __ldaxr(v34);
        while (__stlxr(1u, v34));
        if (v35 == 1)
        {
          do
          {
            while (*v34 == 1)
              ;
            do
              unint64_t v36 = __ldaxr(v34);
            while (__stlxr(1u, v34));
          }

          while (v36 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v33, (GPUTools::FB::Fbuf *)&v51, *(unsigned int *)v51, 1);
        atomic_store(0, v34);
        do
        {
          unsigned int v37 = __ldaxr(v10);
          unsigned int v38 = v37 - 1;
        }

        while (__stlxr(v38, v10));
        if (gCheckGLErrors) {
          unsigned int v39 = v38 < 1;
        }
        else {
          unsigned int v39 = 1;
        }
        if (!v39) {
          handle_opengl_thread_conflict((const void **)v9);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    signed int v40 = __ldaxr(v10);
  while (__stlxr(v40 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 2704LL))(a1, a2);
LABEL_51:
  if (v51) {
    free(v51);
  }
}

        unint64_t v35 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v30), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v35) {
          unint64_t v35 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v59, v36);
        }
        unsigned int v38 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v17 + 3404);
        if ((_DWORD)v38) {
          unint64_t v35 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v59, v38, v37);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v35), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v17, (uint64_t)&v59);
        }
        unsigned int v39 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v17 + 3480),  (GPUTools::FB::Fbuf *)(v17 + 3520),  (GPUTools::FB *)&v59);
        signed int v40 = *(unsigned int *)(v17 + 3404);
        if ((_DWORD)v40 && gBreakOnError)
        {
          uint64_t v54 = 3LL;
          unsigned int v55 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v29 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v54 = 2LL;
          unsigned int v55 = 412LL;
        }

        breakpoint_break((uint64_t)&v59, (volatile int *)v55, v54, v40, v17);
LABEL_38:
        BOOL v41 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v39) defaultFbufStream];
        unsigned int v42 = (unsigned int *)((char *)v41 + 56);
        do
          uint64_t v43 = __ldaxr(v42);
        while (__stlxr(1u, v42));
        if (v43 == 1)
        {
          do
          {
            while (*v42 == 1)
              ;
            do
              id v44 = __ldaxr(v42);
            while (__stlxr(1u, v42));
          }

          while (v44 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v41, (GPUTools::FB::Fbuf *)&v59, *(unsigned int *)v59, 1);
        atomic_store(0, v42);
        do
        {
          unsigned int v45 = __ldaxr(v18);
          __int128 v46 = v45 - 1;
        }

        while (__stlxr(v46, v18));
        if (gCheckGLErrors) {
          int v47 = v46 < 1;
        }
        else {
          int v47 = 1;
        }
        if (!v47) {
          handle_opengl_thread_conflict((const void **)v17);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v24, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    uint64_t v48 = __ldaxr(v18);
  while (__stlxr(v48 - 1, v18));
  [(id)DYGetGLGuestAppClient(v22) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, float, float, float, float))(*(void *)(v17 + 24) + 2952LL))( a1,  a2,  a3,  a4,  a5,  a6);
LABEL_51:
  if (v59) {
    free(v59);
  }
}

        unsigned int v31 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v26), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v31) {
          unsigned int v31 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v55, v32);
        }
        uint64_t v34 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
        if ((_DWORD)v34) {
          unsigned int v31 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v55, v34, v33);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v31), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v13, (uint64_t)&v55);
        }
        unint64_t v35 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)&v55);
        unint64_t v36 = *(unsigned int *)(v13 + 3404);
        if ((_DWORD)v36 && gBreakOnError)
        {
          uint64_t v50 = 3LL;
          __int128 v51 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v25 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v50 = 2LL;
          __int128 v51 = 230LL;
        }

        breakpoint_break((uint64_t)&v55, (volatile int *)v51, v50, v36, v13);
LABEL_38:
        unsigned int v37 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v35) defaultFbufStream];
        unsigned int v38 = (unsigned int *)((char *)v37 + 56);
        do
          unsigned int v39 = __ldaxr(v38);
        while (__stlxr(1u, v38));
        if (v39 == 1)
        {
          do
          {
            while (*v38 == 1)
              ;
            do
              signed int v40 = __ldaxr(v38);
            while (__stlxr(1u, v38));
          }

          while (v40 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v37, (GPUTools::FB::Fbuf *)&v55, *(unsigned int *)v55, 1);
        atomic_store(0, v38);
        do
        {
          BOOL v41 = __ldaxr(v14);
          unsigned int v42 = v41 - 1;
        }

        while (__stlxr(v42, v14));
        if (gCheckGLErrors) {
          uint64_t v43 = v42 < 1;
        }
        else {
          uint64_t v43 = 1;
        }
        if (!v43) {
          handle_opengl_thread_conflict((const void **)v13);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v20, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    id v44 = __ldaxr(v14);
  while (__stlxr(v44 - 1, v14));
  [(id)DYGetGLGuestAppClient(v18) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, void *))(*(void *)(v13 + 24) + 3080LL))(a1, a2, a3, a4);
LABEL_51:
  if (v55) {
    free(v55);
  }
}

        unint64_t v36 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v31), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v36) {
          unint64_t v36 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v64, v37);
        }
        unsigned int v39 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v18 + 3404);
        if ((_DWORD)v39) {
          unint64_t v36 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v64, v39, v38);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v36), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v18, (uint64_t)&v64);
        }
        signed int v40 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v18 + 3480),  (GPUTools::FB::Fbuf *)(v18 + 3520),  (GPUTools::FB *)&v64);
        BOOL v41 = *(unsigned int *)(v18 + 3404);
        if ((_DWORD)v41 && gBreakOnError)
        {
          unsigned int v55 = 3LL;
          uint64_t v56 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v30 & 2) == 0) {
            goto LABEL_38;
          }
          unsigned int v55 = 2LL;
          uint64_t v56 = 115LL;
        }

        breakpoint_break((uint64_t)&v64, (volatile int *)v56, v55, v41, v18);
LABEL_38:
        unsigned int v42 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v40) defaultFbufStream];
        uint64_t v43 = (unsigned int *)((char *)v42 + 56);
        do
          id v44 = __ldaxr(v43);
        while (__stlxr(1u, v43));
        if (v44 == 1)
        {
          do
          {
            while (*v43 == 1)
              ;
            do
              unsigned int v45 = __ldaxr(v43);
            while (__stlxr(1u, v43));
          }

          while (v45 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v42, (GPUTools::FB::Fbuf *)&v64, *(unsigned int *)v64, 1);
        atomic_store(0, v43);
        do
        {
          __int128 v46 = __ldaxr(v19);
          int v47 = v46 - 1;
        }

        while (__stlxr(v47, v19));
        if (gCheckGLErrors) {
          uint64_t v48 = v47 < 1;
        }
        else {
          uint64_t v48 = 1;
        }
        if (!v48) {
          handle_opengl_thread_conflict((const void **)v18);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v25, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    uint64_t v49 = __ldaxr(v19);
  while (__stlxr(v49 - 1, v19));
  [(id)DYGetGLGuestAppClient(v23) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, void, void, void, void, uint64_t))(*(void *)(v18 + 24) + 3520LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9);
LABEL_51:
  if (v64) {
    free(v64);
  }
}

    snprintf(__str, 0x28uLL, "ub_%016lx_%u_%u", **(void **)(v11 + 40), a2, v24);
    GPUTools::FB::Encode((uint64_t)v62, 4294955008LL, (uint64_t)"V<ui>", v33, v34, v35, v36, v37, (char)__str);
    goto LABEL_30;
  }

  do
    char v53 = __ldaxr(v12);
  while (__stlxr(v53 - 1, v12));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  uint64_t v24 = (*(uint64_t (**)(__GLIContextRec *, uint64_t, const char *))(*(void *)(v11 + 24) + 3552LL))( a1,  a2,  a3);
LABEL_52:
  if (v62[0]) {
    free(v62[0]);
  }
  return v24;
}

        id v29 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v24), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v29) {
          id v29 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v53, v30);
        }
        unint64_t v32 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
        if ((_DWORD)v32) {
          id v29 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v53, v32, v31);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v11, (uint64_t)&v53);
        }
        float v33 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v53);
        uint64_t v34 = *(unsigned int *)(v11 + 3404);
        if ((_DWORD)v34 && gBreakOnError)
        {
          uint64_t v48 = 3LL;
          uint64_t v49 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v23 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v48 = 2LL;
          uint64_t v49 = 25LL;
        }

        breakpoint_break((uint64_t)&v53, (volatile int *)v49, v48, v34, v11);
LABEL_38:
        unint64_t v35 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v33) defaultFbufStream];
        unint64_t v36 = (unsigned int *)((char *)v35 + 56);
        do
          unsigned int v37 = __ldaxr(v36);
        while (__stlxr(1u, v36));
        if (v37 == 1)
        {
          do
          {
            while (*v36 == 1)
              ;
            do
              unsigned int v38 = __ldaxr(v36);
            while (__stlxr(1u, v36));
          }

          while (v38 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v35, (GPUTools::FB::Fbuf *)&v53, *(unsigned int *)v53, 1);
        atomic_store(0, v36);
        do
        {
          unsigned int v39 = __ldaxr(v12);
          signed int v40 = v39 - 1;
        }

        while (__stlxr(v40, v12));
        if (gCheckGLErrors) {
          BOOL v41 = v40 < 1;
        }
        else {
          BOOL v41 = 1;
        }
        if (!v41) {
          handle_opengl_thread_conflict((const void **)v11);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v18, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    unsigned int v42 = __ldaxr(v12);
  while (__stlxr(v42 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t))(*(void *)(v11 + 24) + 3664LL))(a1, a2, a3);
LABEL_51:
  if (v53) {
    free(v53);
  }
}

        id v29 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v24), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v29) {
          id v29 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v53, v30);
        }
        unint64_t v32 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
        if ((_DWORD)v32) {
          id v29 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v53, v32, v31);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v11, (uint64_t)&v53);
        }
        float v33 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v53);
        uint64_t v34 = *(unsigned int *)(v11 + 3404);
        if ((_DWORD)v34 && gBreakOnError)
        {
          uint64_t v48 = 3LL;
          uint64_t v49 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v23 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v48 = 2LL;
          uint64_t v49 = 514LL;
        }

        breakpoint_break((uint64_t)&v53, (volatile int *)v49, v48, v34, v11);
LABEL_38:
        unint64_t v35 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v33) defaultFbufStream];
        unint64_t v36 = (unsigned int *)((char *)v35 + 56);
        do
          unsigned int v37 = __ldaxr(v36);
        while (__stlxr(1u, v36));
        if (v37 == 1)
        {
          do
          {
            while (*v36 == 1)
              ;
            do
              unsigned int v38 = __ldaxr(v36);
            while (__stlxr(1u, v36));
          }

          while (v38 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v35, (GPUTools::FB::Fbuf *)&v53, *(unsigned int *)v53, 1);
        atomic_store(0, v36);
        do
        {
          unsigned int v39 = __ldaxr(v12);
          signed int v40 = v39 - 1;
        }

        while (__stlxr(v40, v12));
        if (gCheckGLErrors) {
          BOOL v41 = v40 < 1;
        }
        else {
          BOOL v41 = 1;
        }
        if (!v41) {
          handle_opengl_thread_conflict((const void **)v11);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v18, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    unsigned int v42 = __ldaxr(v12);
  while (__stlxr(v42 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, float))(*(void *)(v11 + 24) + 3672LL))(a1, a3, a2);
LABEL_51:
  if (v53) {
    free(v53);
  }
}

        unint64_t v27 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v22), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v27) {
          unint64_t v27 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v51, v28);
        }
        float v30 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
        if ((_DWORD)v30) {
          unint64_t v27 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v51, v30, v29);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v9, (uint64_t)&v51);
        }
        unsigned int v31 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v51);
        unint64_t v32 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v32 && gBreakOnError)
        {
          __int128 v46 = 3LL;
          int v47 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v21 & 2) == 0) {
            goto LABEL_38;
          }
          __int128 v46 = 2LL;
          int v47 = 538LL;
        }

        breakpoint_break((uint64_t)&v51, (volatile int *)v47, v46, v32, v9);
LABEL_38:
        float v33 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v31) defaultFbufStream];
        uint64_t v34 = (unsigned int *)((char *)v33 + 56);
        do
          unint64_t v35 = __ldaxr(v34);
        while (__stlxr(1u, v34));
        if (v35 == 1)
        {
          do
          {
            while (*v34 == 1)
              ;
            do
              unint64_t v36 = __ldaxr(v34);
            while (__stlxr(1u, v34));
          }

          while (v36 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v33, (GPUTools::FB::Fbuf *)&v51, *(unsigned int *)v51, 1);
        atomic_store(0, v34);
        do
        {
          unsigned int v37 = __ldaxr(v10);
          unsigned int v38 = v37 - 1;
        }

        while (__stlxr(v38, v10));
        if (gCheckGLErrors) {
          unsigned int v39 = v38 < 1;
        }
        else {
          unsigned int v39 = 1;
        }
        if (!v39) {
          handle_opengl_thread_conflict((const void **)v9);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    signed int v40 = __ldaxr(v10);
  while (__stlxr(v40 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 3720LL))(a1, a2);
LABEL_51:
  if (v51) {
    free(v51);
  }
}

        unint64_t v27 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v22), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v27) {
          unint64_t v27 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v51, v28);
        }
        float v30 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
        if ((_DWORD)v30) {
          unint64_t v27 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v51, v30, v29);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v9, (uint64_t)&v51);
        }
        unsigned int v31 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v51);
        unint64_t v32 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v32 && gBreakOnError)
        {
          __int128 v46 = 3LL;
          int v47 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v21 & 2) == 0) {
            goto LABEL_38;
          }
          __int128 v46 = 2LL;
          int v47 = 176LL;
        }

        breakpoint_break((uint64_t)&v51, (volatile int *)v47, v46, v32, v9);
LABEL_38:
        float v33 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v31) defaultFbufStream];
        uint64_t v34 = (unsigned int *)((char *)v33 + 56);
        do
          unint64_t v35 = __ldaxr(v34);
        while (__stlxr(1u, v34));
        if (v35 == 1)
        {
          do
          {
            while (*v34 == 1)
              ;
            do
              unint64_t v36 = __ldaxr(v34);
            while (__stlxr(1u, v34));
          }

          while (v36 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v33, (GPUTools::FB::Fbuf *)&v51, *(unsigned int *)v51, 1);
        atomic_store(0, v34);
        do
        {
          unsigned int v37 = __ldaxr(v10);
          unsigned int v38 = v37 - 1;
        }

        while (__stlxr(v38, v10));
        if (gCheckGLErrors) {
          unsigned int v39 = v38 < 1;
        }
        else {
          unsigned int v39 = 1;
        }
        if (!v39) {
          handle_opengl_thread_conflict((const void **)v9);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    signed int v40 = __ldaxr(v10);
  while (__stlxr(v40 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 3744LL))(a1, a2);
LABEL_51:
  if (v51) {
    free(v51);
  }
}

        id v29 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v24), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v29) {
          id v29 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v53, v30);
        }
        unint64_t v32 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
        if ((_DWORD)v32) {
          id v29 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v53, v32, v31);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v11, (uint64_t)&v53);
        }
        float v33 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v53);
        uint64_t v34 = *(unsigned int *)(v11 + 3404);
        if ((_DWORD)v34 && gBreakOnError)
        {
          uint64_t v48 = 3LL;
          uint64_t v49 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v23 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v48 = 2LL;
          uint64_t v49 = 177LL;
        }

        breakpoint_break((uint64_t)&v53, (volatile int *)v49, v48, v34, v11);
LABEL_38:
        unint64_t v35 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v33) defaultFbufStream];
        unint64_t v36 = (unsigned int *)((char *)v35 + 56);
        do
          unsigned int v37 = __ldaxr(v36);
        while (__stlxr(1u, v36));
        if (v37 == 1)
        {
          do
          {
            while (*v36 == 1)
              ;
            do
              unsigned int v38 = __ldaxr(v36);
            while (__stlxr(1u, v36));
          }

          while (v38 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v35, (GPUTools::FB::Fbuf *)&v53, *(unsigned int *)v53, 1);
        atomic_store(0, v36);
        do
        {
          unsigned int v39 = __ldaxr(v12);
          signed int v40 = v39 - 1;
        }

        while (__stlxr(v40, v12));
        if (gCheckGLErrors) {
          BOOL v41 = v40 < 1;
        }
        else {
          BOOL v41 = 1;
        }
        if (!v41) {
          handle_opengl_thread_conflict((const void **)v11);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v18, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    unsigned int v42 = __ldaxr(v12);
  while (__stlxr(v42 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t))(*(void *)(v11 + 24) + 3760LL))(a1, a2, a3);
LABEL_51:
  if (v53) {
    free(v53);
  }
}

        unint64_t v27 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v22), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v27) {
          unint64_t v27 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v51, v28);
        }
        float v30 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
        if ((_DWORD)v30) {
          unint64_t v27 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v51, v30, v29);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v9, (uint64_t)&v51);
        }
        unsigned int v31 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v51);
        unint64_t v32 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v32 && gBreakOnError)
        {
          __int128 v46 = 3LL;
          int v47 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v21 & 2) == 0) {
            goto LABEL_38;
          }
          __int128 v46 = 2LL;
          int v47 = 155LL;
        }

        breakpoint_break((uint64_t)&v51, (volatile int *)v47, v46, v32, v9);
LABEL_38:
        float v33 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v31) defaultFbufStream];
        uint64_t v34 = (unsigned int *)((char *)v33 + 56);
        do
          unint64_t v35 = __ldaxr(v34);
        while (__stlxr(1u, v34));
        if (v35 == 1)
        {
          do
          {
            while (*v34 == 1)
              ;
            do
              unint64_t v36 = __ldaxr(v34);
            while (__stlxr(1u, v34));
          }

          while (v36 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v33, (GPUTools::FB::Fbuf *)&v51, *(unsigned int *)v51, 1);
        atomic_store(0, v34);
        do
        {
          unsigned int v37 = __ldaxr(v10);
          unsigned int v38 = v37 - 1;
        }

        while (__stlxr(v38, v10));
        if (gCheckGLErrors) {
          unsigned int v39 = v38 < 1;
        }
        else {
          unsigned int v39 = 1;
        }
        if (!v39) {
          handle_opengl_thread_conflict((const void **)v9);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    signed int v40 = __ldaxr(v10);
  while (__stlxr(v40 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 4096LL))(a1, a2);
LABEL_51:
  if (v51) {
    free(v51);
  }
}

        unint64_t v27 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v22), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v27) {
          unint64_t v27 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v51, v28);
        }
        float v30 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
        if ((_DWORD)v30) {
          unint64_t v27 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v51, v30, v29);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v9, (uint64_t)&v51);
        }
        unsigned int v31 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v51);
        unint64_t v32 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v32 && gBreakOnError)
        {
          __int128 v46 = 3LL;
          int v47 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v21 & 2) == 0) {
            goto LABEL_38;
          }
          __int128 v46 = 2LL;
          int v47 = 138LL;
        }

        breakpoint_break((uint64_t)&v51, (volatile int *)v47, v46, v32, v9);
LABEL_38:
        float v33 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v31) defaultFbufStream];
        uint64_t v34 = (unsigned int *)((char *)v33 + 56);
        do
          unint64_t v35 = __ldaxr(v34);
        while (__stlxr(1u, v34));
        if (v35 == 1)
        {
          do
          {
            while (*v34 == 1)
              ;
            do
              unint64_t v36 = __ldaxr(v34);
            while (__stlxr(1u, v34));
          }

          while (v36 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v33, (GPUTools::FB::Fbuf *)&v51, *(unsigned int *)v51, 1);
        atomic_store(0, v34);
        do
        {
          unsigned int v37 = __ldaxr(v10);
          unsigned int v38 = v37 - 1;
        }

        while (__stlxr(v38, v10));
        if (gCheckGLErrors) {
          unsigned int v39 = v38 < 1;
        }
        else {
          unsigned int v39 = 1;
        }
        if (!v39) {
          handle_opengl_thread_conflict((const void **)v9);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    signed int v40 = __ldaxr(v10);
  while (__stlxr(v40 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 4104LL))(a1, a2);
LABEL_51:
  if (v51) {
    free(v51);
  }
}

        id v29 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v24), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v29) {
          id v29 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v53, v30);
        }
        unint64_t v32 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
        if ((_DWORD)v32) {
          id v29 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v53, v32, v31);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v11, (uint64_t)&v53);
        }
        float v33 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v53);
        uint64_t v34 = *(unsigned int *)(v11 + 3404);
        if ((_DWORD)v34 && gBreakOnError)
        {
          uint64_t v48 = 3LL;
          uint64_t v49 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v23 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v48 = 2LL;
          uint64_t v49 = 444LL;
        }

        breakpoint_break((uint64_t)&v53, (volatile int *)v49, v48, v34, v11);
LABEL_38:
        unint64_t v35 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v33) defaultFbufStream];
        unint64_t v36 = (unsigned int *)((char *)v35 + 56);
        do
          unsigned int v37 = __ldaxr(v36);
        while (__stlxr(1u, v36));
        if (v37 == 1)
        {
          do
          {
            while (*v36 == 1)
              ;
            do
              unsigned int v38 = __ldaxr(v36);
            while (__stlxr(1u, v36));
          }

          while (v38 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v35, (GPUTools::FB::Fbuf *)&v53, *(unsigned int *)v53, 1);
        atomic_store(0, v36);
        do
        {
          unsigned int v39 = __ldaxr(v12);
          signed int v40 = v39 - 1;
        }

        while (__stlxr(v40, v12));
        if (gCheckGLErrors) {
          BOOL v41 = v40 < 1;
        }
        else {
          BOOL v41 = 1;
        }
        if (!v41) {
          handle_opengl_thread_conflict((const void **)v11);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v18, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    unsigned int v42 = __ldaxr(v12);
  while (__stlxr(v42 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, float))(*(void *)(v11 + 24) + 4320LL))(a1, a2, a3);
LABEL_51:
  if (v53) {
    free(v53);
  }
}

        float v33 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v33) {
          float v33 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v57, v34);
        }
        unint64_t v36 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v15 + 3404);
        if ((_DWORD)v36) {
          float v33 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v57, v36, v35);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v15, (uint64_t)&v57);
        }
        unsigned int v37 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v15 + 3480),  (GPUTools::FB::Fbuf *)(v15 + 3520),  (GPUTools::FB *)&v57);
        unsigned int v38 = *(unsigned int *)(v15 + 3404);
        if ((_DWORD)v38 && gBreakOnError)
        {
          __uint64_t v52 = 3LL;
          char v53 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v27 & 2) == 0) {
            goto LABEL_38;
          }
          __uint64_t v52 = 2LL;
          char v53 = 547LL;
        }

        breakpoint_break((uint64_t)&v57, (volatile int *)v53, v52, v38, v15);
LABEL_38:
        unsigned int v39 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v37) defaultFbufStream];
        signed int v40 = (unsigned int *)((char *)v39 + 56);
        do
          BOOL v41 = __ldaxr(v40);
        while (__stlxr(1u, v40));
        if (v41 == 1)
        {
          do
          {
            while (*v40 == 1)
              ;
            do
              unsigned int v42 = __ldaxr(v40);
            while (__stlxr(1u, v40));
          }

          while (v42 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v39, (GPUTools::FB::Fbuf *)&v57, *(unsigned int *)v57, 1);
        atomic_store(0, v40);
        do
        {
          uint64_t v43 = __ldaxr(v16);
          id v44 = v43 - 1;
        }

        while (__stlxr(v44, v16));
        if (gCheckGLErrors) {
          unsigned int v45 = v44 < 1;
        }
        else {
          unsigned int v45 = 1;
        }
        if (!v45) {
          handle_opengl_thread_conflict((const void **)v15);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v22, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    __int128 v46 = __ldaxr(v16);
  while (__stlxr(v46 - 1, v16));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 + 24) + 4688LL))( a1,  a2,  a3,  a4,  a5);
LABEL_51:
  if (v57) {
    free(v57);
  }
}

      memset(v83, 0, sizeof(v83));
      (*(void (**)(void, void *, uint64_t, _OWORD *))(*(void *)(v13 + 32) + 5016LL))( *(void *)(v13 + 16),  a2,  a3,  v83);
      unsigned int v37 = v80;
      char v79 = *((_OWORD *)v80 + 1);
      char v81 = v80;
      if (v82 >= 0x24)
      {
        *((_DWORD *)v80 + _Block_object_dispose(va, 8) = 0;
        *unsigned int v37 = 0u;
        v37[1] = 0u;
      }

      GPUTools::FB::Encode((uint64_t)&v80, 300LL, 256LL, (uint64_t)"CulV<i>@16f", v33, v34, v35, v36, *(void *)v13);
      *((_OWORD *)v80 + 1) = v79;
      unsigned int v39 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v38), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
      if ((_DWORD)v39) {
        unsigned int v39 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v80, v40);
      }
      unsigned int v42 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
      if ((_DWORD)v42) {
        unsigned int v39 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v80, v42, v41);
      }
      if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v39), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
        encode_driver_events((id *)v13, (uint64_t)&v80);
      }
      uint64_t v43 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)&v80);
      id v44 = *(unsigned int *)(v13 + 3404);
      if ((_DWORD)v44 && gBreakOnError)
      {
        char v71 = 3LL;
        uint64_t v72 = 0xFFFFFFFFLL;
      }

      else
      {
        if ((v28 & 2) == 0) {
          goto LABEL_40;
        }
        char v71 = 2LL;
        uint64_t v72 = 300LL;
      }

      breakpoint_break((uint64_t)&v80, (volatile int *)v72, v71, v44, v13);
LABEL_40:
      unsigned int v45 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v43) defaultFbufStream];
      __int128 v46 = (unsigned int *)((char *)v45 + 56);
      do
        int v47 = __ldaxr(v46);
      while (__stlxr(1u, v46));
      if (v47 == 1)
      {
        do
        {
          while (*v46 == 1)
            ;
          do
            uint64_t v48 = __ldaxr(v46);
          while (__stlxr(1u, v46));
        }

        while (v48 == 1);
      }

      GPUTools::FB::Stream::Write_nolock(v45, (GPUTools::FB::Fbuf *)&v80, *(unsigned int *)v80, 1);
      atomic_store(0, v46);
      goto LABEL_47;
    }

    GPUTools::FB::Encode((uint64_t)&v80, 300LL, 256LL, (uint64_t)"Culip", v18, v19, v20, v21, *(void *)v13);
    uint64_t v58 = byte_206F84;
    if ((byte_206F84 & 1) != 0) {
      breakpoint_break((uint64_t)&v80, (_DWORD *)&stru_108.addr + 1, 1LL, *(unsigned int *)(v13 + 3404), v13);
    }
    char v59 = (uint64_t)[(id)DYGetGLGuestAppClient(v57) overrideFlags];
    if (!(v59 & 0x10 | v58 & 4))
    {
      uint64_t v60 = mach_absolute_time();
      (*(void (**)(__GLIContextRec *, void *, uint64_t, float *))(*(void *)(v13 + 32) + 5016LL))( a1,  a2,  a3,  a4);
      char v59 = mach_absolute_time();
      char v61 = v59 - v60;
      uint64_t v62 = g_DYTimebaseInfo;
      if (g_DYTimebaseInfo == *((_DWORD *)&g_DYTimebaseInfo + 1))
      {
        char v63 = v80;
        *((void *)v80 + 2) = v60;
        v63[3] = v61;
        if (!gCheckGLErrors) {
          goto LABEL_66;
        }
      }

      else
      {
        uint64_t v75 = __udivti3(g_DYTimebaseInfo * v61, (g_DYTimebaseInfo * (unsigned __int128)v61) >> 64);
        char v76 = v80;
        *((void *)v80 + 3) = v75;
        char v59 = __udivti3(v62 * v60, (v62 * (unsigned __int128)v60) >> 64);
        _OWORD v76[2] = v59;
        if (!gCheckGLErrors) {
          goto LABEL_66;
        }
      }

      char v59 = check_errors(v13);
    }

      v83[0] = 0LL;
      v83[1] = 0LL;
      (*(void (**)(void, void *, uint64_t, void *))(*(void *)(v13 + 32) + 5024LL))( *(void *)(v13 + 16),  a2,  a3,  v83);
      unsigned int v37 = v80;
      char v79 = *((_OWORD *)v80 + 1);
      char v81 = v80;
      if (v82 >= 0x24)
      {
        *((_DWORD *)v80 + _Block_object_dispose(va, 8) = 0;
        *unsigned int v37 = 0u;
        v37[1] = 0u;
      }

      GPUTools::FB::Encode((uint64_t)&v80, 301LL, 256LL, (uint64_t)"CulV<i>@4i", v33, v34, v35, v36, *(void *)v13);
      *((_OWORD *)v80 + 1) = v79;
      unsigned int v39 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v38), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
      if ((_DWORD)v39) {
        unsigned int v39 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v80, v40);
      }
      unsigned int v42 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
      if ((_DWORD)v42) {
        unsigned int v39 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v80, v42, v41);
      }
      if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v39), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
        encode_driver_events((id *)v13, (uint64_t)&v80);
      }
      uint64_t v43 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)&v80);
      id v44 = *(unsigned int *)(v13 + 3404);
      if ((_DWORD)v44 && gBreakOnError)
      {
        char v71 = 3LL;
        uint64_t v72 = 0xFFFFFFFFLL;
      }

      else
      {
        if ((v28 & 2) == 0) {
          goto LABEL_40;
        }
        char v71 = 2LL;
        uint64_t v72 = 301LL;
      }

      breakpoint_break((uint64_t)&v80, (volatile int *)v72, v71, v44, v13);
LABEL_40:
      unsigned int v45 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v43) defaultFbufStream];
      __int128 v46 = (unsigned int *)((char *)v45 + 56);
      do
        int v47 = __ldaxr(v46);
      while (__stlxr(1u, v46));
      if (v47 == 1)
      {
        do
        {
          while (*v46 == 1)
            ;
          do
            uint64_t v48 = __ldaxr(v46);
          while (__stlxr(1u, v46));
        }

        while (v48 == 1);
      }

      GPUTools::FB::Stream::Write_nolock(v45, (GPUTools::FB::Fbuf *)&v80, *(unsigned int *)v80, 1);
      atomic_store(0, v46);
      goto LABEL_47;
    }

    GPUTools::FB::Encode((uint64_t)&v80, 301LL, 256LL, (uint64_t)"Culip", v18, v19, v20, v21, *(void *)v13);
    uint64_t v58 = byte_206F85;
    if ((byte_206F85 & 1) != 0) {
      breakpoint_break( (uint64_t)&v80,  (volatile int *)((char *)&stru_108.addr + 5),  1LL,  *(unsigned int *)(v13 + 3404),  v13);
    }
    char v59 = (uint64_t)[(id)DYGetGLGuestAppClient(v57) overrideFlags];
    if (!(v59 & 0x10 | v58 & 4))
    {
      uint64_t v60 = mach_absolute_time();
      (*(void (**)(__GLIContextRec *, void *, uint64_t, int *))(*(void *)(v13 + 32) + 5024LL))( a1,  a2,  a3,  a4);
      char v59 = mach_absolute_time();
      char v61 = v59 - v60;
      uint64_t v62 = g_DYTimebaseInfo;
      if (g_DYTimebaseInfo == *((_DWORD *)&g_DYTimebaseInfo + 1))
      {
        char v63 = v80;
        *((void *)v80 + 2) = v60;
        v63[3] = v61;
        if (!gCheckGLErrors) {
          goto LABEL_66;
        }
      }

      else
      {
        uint64_t v75 = __udivti3(g_DYTimebaseInfo * v61, (g_DYTimebaseInfo * (unsigned __int128)v61) >> 64);
        char v76 = v80;
        *((void *)v80 + 3) = v75;
        char v59 = __udivti3(v62 * v60, (v62 * (unsigned __int128)v60) >> 64);
        _OWORD v76[2] = v59;
        if (!gCheckGLErrors) {
          goto LABEL_66;
        }
      }

      char v59 = check_errors(v13);
    }

        id v29 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v24), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v29) {
          id v29 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v53, v30);
        }
        unint64_t v32 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
        if ((_DWORD)v32) {
          id v29 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v53, v32, v31);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v11, (uint64_t)&v53);
        }
        float v33 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v53);
        uint64_t v34 = *(unsigned int *)(v11 + 3404);
        if ((_DWORD)v34 && gBreakOnError)
        {
          uint64_t v48 = 3LL;
          uint64_t v49 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v23 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v48 = 2LL;
          uint64_t v49 = 9LL;
        }

        breakpoint_break((uint64_t)&v53, (volatile int *)v49, v48, v34, v11);
LABEL_38:
        unint64_t v35 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v33) defaultFbufStream];
        unint64_t v36 = (unsigned int *)((char *)v35 + 56);
        do
          unsigned int v37 = __ldaxr(v36);
        while (__stlxr(1u, v36));
        if (v37 == 1)
        {
          do
          {
            while (*v36 == 1)
              ;
            do
              unsigned int v38 = __ldaxr(v36);
            while (__stlxr(1u, v36));
          }

          while (v38 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v35, (GPUTools::FB::Fbuf *)&v53, *(unsigned int *)v53, 1);
        atomic_store(0, v36);
        do
        {
          unsigned int v39 = __ldaxr(v12);
          signed int v40 = v39 - 1;
        }

        while (__stlxr(v40, v12));
        if (gCheckGLErrors) {
          BOOL v41 = v40 < 1;
        }
        else {
          BOOL v41 = 1;
        }
        if (!v41) {
          handle_opengl_thread_conflict((const void **)v11);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v18, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    unsigned int v42 = __ldaxr(v12);
  while (__stlxr(v42 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t))(*(void *)(v11 + 24) + 5096LL))(a1, a2, a3);
LABEL_51:
  if (v53) {
    free(v53);
  }
}

        unint64_t v27 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v22), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v27) {
          unint64_t v27 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v51, v28);
        }
        float v30 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
        if ((_DWORD)v30) {
          unint64_t v27 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v51, v30, v29);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v9, (uint64_t)&v51);
        }
        unsigned int v31 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v51);
        unint64_t v32 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v32 && gBreakOnError)
        {
          __int128 v46 = 3LL;
          int v47 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v21 & 2) == 0) {
            goto LABEL_38;
          }
          __int128 v46 = 2LL;
          int v47 = 159LL;
        }

        breakpoint_break((uint64_t)&v51, (volatile int *)v47, v46, v32, v9);
LABEL_38:
        float v33 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v31) defaultFbufStream];
        uint64_t v34 = (unsigned int *)((char *)v33 + 56);
        do
          unint64_t v35 = __ldaxr(v34);
        while (__stlxr(1u, v34));
        if (v35 == 1)
        {
          do
          {
            while (*v34 == 1)
              ;
            do
              unint64_t v36 = __ldaxr(v34);
            while (__stlxr(1u, v34));
          }

          while (v36 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v33, (GPUTools::FB::Fbuf *)&v51, *(unsigned int *)v51, 1);
        atomic_store(0, v34);
        do
        {
          unsigned int v37 = __ldaxr(v10);
          unsigned int v38 = v37 - 1;
        }

        while (__stlxr(v38, v10));
        if (gCheckGLErrors) {
          unsigned int v39 = v38 < 1;
        }
        else {
          unsigned int v39 = 1;
        }
        if (!v39) {
          handle_opengl_thread_conflict((const void **)v9);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    signed int v40 = __ldaxr(v10);
  while (__stlxr(v40 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 5104LL))(a1, a2);
LABEL_51:
  if (v51) {
    free(v51);
  }
}

        float v33 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v33) {
          float v33 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v57, v34);
        }
        unint64_t v36 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v15 + 3404);
        if ((_DWORD)v36) {
          float v33 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v57, v36, v35);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v15, (uint64_t)&v57);
        }
        unsigned int v37 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v15 + 3480),  (GPUTools::FB::Fbuf *)(v15 + 3520),  (GPUTools::FB *)&v57);
        unsigned int v38 = *(unsigned int *)(v15 + 3404);
        if ((_DWORD)v38 && gBreakOnError)
        {
          __uint64_t v52 = 3LL;
          char v53 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v27 & 2) == 0) {
            goto LABEL_38;
          }
          __uint64_t v52 = 2LL;
          char v53 = 542LL;
        }

        breakpoint_break((uint64_t)&v57, (volatile int *)v53, v52, v38, v15);
LABEL_38:
        unsigned int v39 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v37) defaultFbufStream];
        signed int v40 = (unsigned int *)((char *)v39 + 56);
        do
          BOOL v41 = __ldaxr(v40);
        while (__stlxr(1u, v40));
        if (v41 == 1)
        {
          do
          {
            while (*v40 == 1)
              ;
            do
              unsigned int v42 = __ldaxr(v40);
            while (__stlxr(1u, v40));
          }

          while (v42 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v39, (GPUTools::FB::Fbuf *)&v57, *(unsigned int *)v57, 1);
        atomic_store(0, v40);
        do
        {
          uint64_t v43 = __ldaxr(v16);
          id v44 = v43 - 1;
        }

        while (__stlxr(v44, v16));
        if (gCheckGLErrors) {
          unsigned int v45 = v44 < 1;
        }
        else {
          unsigned int v45 = 1;
        }
        if (!v45) {
          handle_opengl_thread_conflict((const void **)v15);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v22, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    __int128 v46 = __ldaxr(v16);
  while (__stlxr(v46 - 1, v16));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 + 24) + 5288LL))( a1,  a2,  a3,  a4,  a5);
LABEL_51:
  if (v57) {
    free(v57);
  }
}

        id v29 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v24), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v29) {
          id v29 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v53, v30);
        }
        unint64_t v32 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
        if ((_DWORD)v32) {
          id v29 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v53, v32, v31);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v11, (uint64_t)&v53);
        }
        float v33 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v53);
        uint64_t v34 = *(unsigned int *)(v11 + 3404);
        if ((_DWORD)v34 && gBreakOnError)
        {
          uint64_t v48 = 3LL;
          uint64_t v49 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v23 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v48 = 2LL;
          uint64_t v49 = 545LL;
        }

        breakpoint_break((uint64_t)&v53, (volatile int *)v49, v48, v34, v11);
LABEL_38:
        unint64_t v35 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v33) defaultFbufStream];
        unint64_t v36 = (unsigned int *)((char *)v35 + 56);
        do
          unsigned int v37 = __ldaxr(v36);
        while (__stlxr(1u, v36));
        if (v37 == 1)
        {
          do
          {
            while (*v36 == 1)
              ;
            do
              unsigned int v38 = __ldaxr(v36);
            while (__stlxr(1u, v36));
          }

          while (v38 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v35, (GPUTools::FB::Fbuf *)&v53, *(unsigned int *)v53, 1);
        atomic_store(0, v36);
        do
        {
          unsigned int v39 = __ldaxr(v12);
          signed int v40 = v39 - 1;
        }

        while (__stlxr(v40, v12));
        if (gCheckGLErrors) {
          BOOL v41 = v40 < 1;
        }
        else {
          BOOL v41 = 1;
        }
        if (!v41) {
          handle_opengl_thread_conflict((const void **)v11);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v18, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    unsigned int v42 = __ldaxr(v12);
  while (__stlxr(v42 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t))(*(void *)(v11 + 24) + 5296LL))(a1, a2, a3);
LABEL_51:
  if (v53) {
    free(v53);
  }
}

        id v29 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v24), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v29) {
          id v29 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v53, v30);
        }
        unint64_t v32 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
        if ((_DWORD)v32) {
          id v29 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v53, v32, v31);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v11, (uint64_t)&v53);
        }
        float v33 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v53);
        uint64_t v34 = *(unsigned int *)(v11 + 3404);
        if ((_DWORD)v34 && gBreakOnError)
        {
          uint64_t v48 = 3LL;
          uint64_t v49 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v23 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v48 = 2LL;
          uint64_t v49 = 19LL;
        }

        breakpoint_break((uint64_t)&v53, (volatile int *)v49, v48, v34, v11);
LABEL_38:
        unint64_t v35 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v33) defaultFbufStream];
        unint64_t v36 = (unsigned int *)((char *)v35 + 56);
        do
          unsigned int v37 = __ldaxr(v36);
        while (__stlxr(1u, v36));
        if (v37 == 1)
        {
          do
          {
            while (*v36 == 1)
              ;
            do
              unsigned int v38 = __ldaxr(v36);
            while (__stlxr(1u, v36));
          }

          while (v38 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v35, (GPUTools::FB::Fbuf *)&v53, *(unsigned int *)v53, 1);
        atomic_store(0, v36);
        do
        {
          unsigned int v39 = __ldaxr(v12);
          signed int v40 = v39 - 1;
        }

        while (__stlxr(v40, v12));
        if (gCheckGLErrors) {
          BOOL v41 = v40 < 1;
        }
        else {
          BOOL v41 = 1;
        }
        if (!v41) {
          handle_opengl_thread_conflict((const void **)v11);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v18, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    unsigned int v42 = __ldaxr(v12);
  while (__stlxr(v42 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t))(*(void *)(v11 + 24) + 5328LL))(a1, a2, a3);
LABEL_51:
  if (v53) {
    free(v53);
  }
}

        float v33 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v33) {
          float v33 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v57, v34);
        }
        unint64_t v36 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v15 + 3404);
        if ((_DWORD)v36) {
          float v33 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v57, v36, v35);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v15, (uint64_t)&v57);
        }
        unsigned int v37 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v15 + 3480),  (GPUTools::FB::Fbuf *)(v15 + 3520),  (GPUTools::FB *)&v57);
        unsigned int v38 = *(unsigned int *)(v15 + 3404);
        if ((_DWORD)v38 && gBreakOnError)
        {
          __uint64_t v52 = 3LL;
          char v53 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v27 & 2) == 0) {
            goto LABEL_38;
          }
          __uint64_t v52 = 2LL;
          char v53 = 508LL;
        }

        breakpoint_break((uint64_t)&v57, (volatile int *)v53, v52, v38, v15);
LABEL_38:
        unsigned int v39 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v37) defaultFbufStream];
        signed int v40 = (unsigned int *)((char *)v39 + 56);
        do
          BOOL v41 = __ldaxr(v40);
        while (__stlxr(1u, v40));
        if (v41 == 1)
        {
          do
          {
            while (*v40 == 1)
              ;
            do
              unsigned int v42 = __ldaxr(v40);
            while (__stlxr(1u, v40));
          }

          while (v42 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v39, (GPUTools::FB::Fbuf *)&v57, *(unsigned int *)v57, 1);
        atomic_store(0, v40);
        do
        {
          uint64_t v43 = __ldaxr(v16);
          id v44 = v43 - 1;
        }

        while (__stlxr(v44, v16));
        if (gCheckGLErrors) {
          unsigned int v45 = v44 < 1;
        }
        else {
          unsigned int v45 = 1;
        }
        if (!v45) {
          handle_opengl_thread_conflict((const void **)v15);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v22, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    __int128 v46 = __ldaxr(v16);
  while (__stlxr(v46 - 1, v16));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 + 24) + 5352LL))( a1,  a2,  a3,  a4,  a5);
LABEL_51:
  if (v57) {
    free(v57);
  }
}

        id v29 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v24), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v29) {
          id v29 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v53, v30);
        }
        unint64_t v32 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
        if ((_DWORD)v32) {
          id v29 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v53, v32, v31);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v11, (uint64_t)&v53);
        }
        float v33 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v53);
        uint64_t v34 = *(unsigned int *)(v11 + 3404);
        if ((_DWORD)v34 && gBreakOnError)
        {
          uint64_t v48 = 3LL;
          uint64_t v49 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v23 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v48 = 2LL;
          uint64_t v49 = 17LL;
        }

        breakpoint_break((uint64_t)&v53, (volatile int *)v49, v48, v34, v11);
LABEL_38:
        unint64_t v35 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v33) defaultFbufStream];
        unint64_t v36 = (unsigned int *)((char *)v35 + 56);
        do
          unsigned int v37 = __ldaxr(v36);
        while (__stlxr(1u, v36));
        if (v37 == 1)
        {
          do
          {
            while (*v36 == 1)
              ;
            do
              unsigned int v38 = __ldaxr(v36);
            while (__stlxr(1u, v36));
          }

          while (v38 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v35, (GPUTools::FB::Fbuf *)&v53, *(unsigned int *)v53, 1);
        atomic_store(0, v36);
        do
        {
          unsigned int v39 = __ldaxr(v12);
          signed int v40 = v39 - 1;
        }

        while (__stlxr(v40, v12));
        if (gCheckGLErrors) {
          BOOL v41 = v40 < 1;
        }
        else {
          BOOL v41 = 1;
        }
        if (!v41) {
          handle_opengl_thread_conflict((const void **)v11);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v18, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    unsigned int v42 = __ldaxr(v12);
  while (__stlxr(v42 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t))(*(void *)(v11 + 24) + 5376LL))(a1, a2, a3);
LABEL_51:
  if (v53) {
    free(v53);
  }
}

        unint64_t v35 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v30), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v35) {
          unint64_t v35 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v59, v36);
        }
        unsigned int v38 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v17 + 3404);
        if ((_DWORD)v38) {
          unint64_t v35 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v59, v38, v37);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v35), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v17, (uint64_t)&v59);
        }
        unsigned int v39 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v17 + 3480),  (GPUTools::FB::Fbuf *)(v17 + 3520),  (GPUTools::FB *)&v59);
        signed int v40 = *(unsigned int *)(v17 + 3404);
        if ((_DWORD)v40 && gBreakOnError)
        {
          uint64_t v54 = 3LL;
          unsigned int v55 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v29 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v54 = 2LL;
          unsigned int v55 = 194LL;
        }

        breakpoint_break((uint64_t)&v59, (volatile int *)v55, v54, v40, v17);
LABEL_38:
        BOOL v41 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v39) defaultFbufStream];
        unsigned int v42 = (unsigned int *)((char *)v41 + 56);
        do
          uint64_t v43 = __ldaxr(v42);
        while (__stlxr(1u, v42));
        if (v43 == 1)
        {
          do
          {
            while (*v42 == 1)
              ;
            do
              id v44 = __ldaxr(v42);
            while (__stlxr(1u, v42));
          }

          while (v44 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v41, (GPUTools::FB::Fbuf *)&v59, *(unsigned int *)v59, 1);
        atomic_store(0, v42);
        do
        {
          unsigned int v45 = __ldaxr(v18);
          __int128 v46 = v45 - 1;
        }

        while (__stlxr(v46, v18));
        if (gCheckGLErrors) {
          int v47 = v46 < 1;
        }
        else {
          int v47 = 1;
        }
        if (!v47) {
          handle_opengl_thread_conflict((const void **)v17);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v24, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    uint64_t v48 = __ldaxr(v18);
  while (__stlxr(v48 - 1, v18));
  [(id)DYGetGLGuestAppClient(v22) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 + 24) + 5416LL))( a1,  a2,  a3,  a4,  a5,  a6);
LABEL_51:
  if (v59) {
    free(v59);
  }
}

        float v33 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v33) {
          float v33 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v57, v34);
        }
        unint64_t v36 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v15 + 3404);
        if ((_DWORD)v36) {
          float v33 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v57, v36, v35);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v15, (uint64_t)&v57);
        }
        unsigned int v37 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v15 + 3480),  (GPUTools::FB::Fbuf *)(v15 + 3520),  (GPUTools::FB *)&v57);
        unsigned int v38 = *(unsigned int *)(v15 + 3404);
        if ((_DWORD)v38 && gBreakOnError)
        {
          __uint64_t v52 = 3LL;
          char v53 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v27 & 2) == 0) {
            goto LABEL_38;
          }
          __uint64_t v52 = 2LL;
          char v53 = 192LL;
        }

        breakpoint_break((uint64_t)&v57, (volatile int *)v53, v52, v38, v15);
LABEL_38:
        unsigned int v39 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v37) defaultFbufStream];
        signed int v40 = (unsigned int *)((char *)v39 + 56);
        do
          BOOL v41 = __ldaxr(v40);
        while (__stlxr(1u, v40));
        if (v41 == 1)
        {
          do
          {
            while (*v40 == 1)
              ;
            do
              unsigned int v42 = __ldaxr(v40);
            while (__stlxr(1u, v40));
          }

          while (v42 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v39, (GPUTools::FB::Fbuf *)&v57, *(unsigned int *)v57, 1);
        atomic_store(0, v40);
        do
        {
          uint64_t v43 = __ldaxr(v16);
          id v44 = v43 - 1;
        }

        while (__stlxr(v44, v16));
        if (gCheckGLErrors) {
          unsigned int v45 = v44 < 1;
        }
        else {
          unsigned int v45 = 1;
        }
        if (!v45) {
          handle_opengl_thread_conflict((const void **)v15);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v22, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    __int128 v46 = __ldaxr(v16);
  while (__stlxr(v46 - 1, v16));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 + 24) + 5432LL))( a1,  a2,  a3,  a4,  a5);
LABEL_51:
  if (v57) {
    free(v57);
  }
}

        unint64_t v27 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v22), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v27) {
          unint64_t v27 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v51, v28);
        }
        float v30 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
        if ((_DWORD)v30) {
          unint64_t v27 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v51, v30, v29);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v9, (uint64_t)&v51);
        }
        unsigned int v31 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v51);
        unint64_t v32 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v32 && gBreakOnError)
        {
          __int128 v46 = 3LL;
          int v47 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v21 & 2) == 0) {
            goto LABEL_38;
          }
          __int128 v46 = 2LL;
          int v47 = 210LL;
        }

        breakpoint_break((uint64_t)&v51, (volatile int *)v47, v46, v32, v9);
LABEL_38:
        float v33 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v31) defaultFbufStream];
        uint64_t v34 = (unsigned int *)((char *)v33 + 56);
        do
          unint64_t v35 = __ldaxr(v34);
        while (__stlxr(1u, v34));
        if (v35 == 1)
        {
          do
          {
            while (*v34 == 1)
              ;
            do
              unint64_t v36 = __ldaxr(v34);
            while (__stlxr(1u, v34));
          }

          while (v36 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v33, (GPUTools::FB::Fbuf *)&v51, *(unsigned int *)v51, 1);
        atomic_store(0, v34);
        do
        {
          unsigned int v37 = __ldaxr(v10);
          unsigned int v38 = v37 - 1;
        }

        while (__stlxr(v38, v10));
        if (gCheckGLErrors) {
          unsigned int v39 = v38 < 1;
        }
        else {
          unsigned int v39 = 1;
        }
        if (!v39) {
          handle_opengl_thread_conflict((const void **)v9);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    signed int v40 = __ldaxr(v10);
  while (__stlxr(v40 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 5448LL))(a1, a2);
LABEL_51:
  if (v51) {
    free(v51);
  }
}

        unint64_t v35 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v30), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v35) {
          unint64_t v35 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v59, v36);
        }
        unsigned int v38 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v17 + 3404);
        if ((_DWORD)v38) {
          unint64_t v35 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v59, v38, v37);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v35), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v17, (uint64_t)&v59);
        }
        unsigned int v39 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v17 + 3480),  (GPUTools::FB::Fbuf *)(v17 + 3520),  (GPUTools::FB *)&v59);
        signed int v40 = *(unsigned int *)(v17 + 3404);
        if ((_DWORD)v40 && gBreakOnError)
        {
          uint64_t v54 = 3LL;
          unsigned int v55 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v29 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v54 = 2LL;
          unsigned int v55 = 198LL;
        }

        breakpoint_break((uint64_t)&v59, (volatile int *)v55, v54, v40, v17);
LABEL_38:
        BOOL v41 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v39) defaultFbufStream];
        unsigned int v42 = (unsigned int *)((char *)v41 + 56);
        do
          uint64_t v43 = __ldaxr(v42);
        while (__stlxr(1u, v42));
        if (v43 == 1)
        {
          do
          {
            while (*v42 == 1)
              ;
            do
              id v44 = __ldaxr(v42);
            while (__stlxr(1u, v42));
          }

          while (v44 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v41, (GPUTools::FB::Fbuf *)&v59, *(unsigned int *)v59, 1);
        atomic_store(0, v42);
        do
        {
          unsigned int v45 = __ldaxr(v18);
          __int128 v46 = v45 - 1;
        }

        while (__stlxr(v46, v18));
        if (gCheckGLErrors) {
          int v47 = v46 < 1;
        }
        else {
          int v47 = 1;
        }
        if (!v47) {
          handle_opengl_thread_conflict((const void **)v17);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v24, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    uint64_t v48 = __ldaxr(v18);
  while (__stlxr(v48 - 1, v18));
  [(id)DYGetGLGuestAppClient(v22) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 + 24) + 5528LL))( a1,  a2,  a3,  a4,  a5,  a6);
LABEL_51:
  if (v59) {
    free(v59);
  }
}

        uint64_t v25 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v20), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v25) {
          uint64_t v25 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v49, v26);
        }
        unint64_t v28 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v7 + 3404);
        if ((_DWORD)v28) {
          uint64_t v25 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v49, v28, v27);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v25), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v7, (uint64_t)&v49);
        }
        id v29 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v7 + 3480),  (GPUTools::FB::Fbuf *)(v7 + 3520),  (GPUTools::FB *)&v49);
        float v30 = *(unsigned int *)(v7 + 3404);
        if ((_DWORD)v30 && gBreakOnError)
        {
          id v44 = 3LL;
          unsigned int v45 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v19 & 2) == 0) {
            goto LABEL_38;
          }
          id v44 = 2LL;
          unsigned int v45 = 160LL;
        }

        breakpoint_break((uint64_t)&v49, (volatile int *)v45, v44, v30, v7);
LABEL_38:
        unsigned int v31 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v29) defaultFbufStream];
        unint64_t v32 = (unsigned int *)((char *)v31 + 56);
        do
          float v33 = __ldaxr(v32);
        while (__stlxr(1u, v32));
        if (v33 == 1)
        {
          do
          {
            while (*v32 == 1)
              ;
            do
              uint64_t v34 = __ldaxr(v32);
            while (__stlxr(1u, v32));
          }

          while (v34 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v31, (GPUTools::FB::Fbuf *)&v49, *(unsigned int *)v49, 1);
        atomic_store(0, v32);
        do
        {
          unint64_t v35 = __ldaxr(v8);
          unint64_t v36 = v35 - 1;
        }

        while (__stlxr(v36, v8));
        if (gCheckGLErrors) {
          unsigned int v37 = v36 < 1;
        }
        else {
          unsigned int v37 = 1;
        }
        if (!v37) {
          handle_opengl_thread_conflict((const void **)v7);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v14, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    unsigned int v38 = __ldaxr(v8);
  while (__stlxr(v38 - 1, v8));
  [(id)DYGetGLGuestAppClient(v12) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *))(*(void *)(v7 + 24) + 5576LL))(a1);
LABEL_51:
  if (v49) {
    free(v49);
  }
}

        unint64_t v35 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v30), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v35) {
          unint64_t v35 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v59, v36);
        }
        unsigned int v38 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v17 + 3404);
        if ((_DWORD)v38) {
          unint64_t v35 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v59, v38, v37);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v35), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v17, (uint64_t)&v59);
        }
        unsigned int v39 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v17 + 3480),  (GPUTools::FB::Fbuf *)(v17 + 3520),  (GPUTools::FB *)&v59);
        signed int v40 = *(unsigned int *)(v17 + 3404);
        if ((_DWORD)v40 && gBreakOnError)
        {
          uint64_t v54 = 3LL;
          unsigned int v55 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v29 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v54 = 2LL;
          unsigned int v55 = 729LL;
        }

        breakpoint_break((uint64_t)&v59, (volatile int *)v55, v54, v40, v17);
LABEL_38:
        BOOL v41 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v39) defaultFbufStream];
        unsigned int v42 = (unsigned int *)((char *)v41 + 56);
        do
          uint64_t v43 = __ldaxr(v42);
        while (__stlxr(1u, v42));
        if (v43 == 1)
        {
          do
          {
            while (*v42 == 1)
              ;
            do
              id v44 = __ldaxr(v42);
            while (__stlxr(1u, v42));
          }

          while (v44 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v41, (GPUTools::FB::Fbuf *)&v59, *(unsigned int *)v59, 1);
        atomic_store(0, v42);
        do
        {
          unsigned int v45 = __ldaxr(v18);
          __int128 v46 = v45 - 1;
        }

        while (__stlxr(v46, v18));
        if (gCheckGLErrors) {
          int v47 = v46 < 1;
        }
        else {
          int v47 = 1;
        }
        if (!v47) {
          handle_opengl_thread_conflict((const void **)v17);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v24, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    uint64_t v48 = __ldaxr(v18);
  while (__stlxr(v48 - 1, v18));
  [(id)DYGetGLGuestAppClient(v22) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t, const void *))(*(void *)(v17 + 24)
                                                                                              + 5848LL))( a1,  a2,  a3,  a4,  a5,  a6);
LABEL_51:
  if (v59) {
    free(v59);
  }
}

        unint64_t v32 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v32) {
          unint64_t v32 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v56, v33);
        }
        unint64_t v35 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
        if ((_DWORD)v35) {
          unint64_t v32 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v56, v35, v34);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v13, (uint64_t)&v56);
        }
        unint64_t v36 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)&v56);
        unsigned int v37 = *(unsigned int *)(v13 + 3404);
        if ((_DWORD)v37 && gBreakOnError)
        {
          __int128 v51 = 3LL;
          __uint64_t v52 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v26 & 2) == 0) {
            goto LABEL_38;
          }
          __int128 v51 = 2LL;
          __uint64_t v52 = 302LL;
        }

        breakpoint_break((uint64_t)&v56, (volatile int *)v52, v51, v37, v13);
LABEL_38:
        unsigned int v38 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v36) defaultFbufStream];
        unsigned int v39 = (unsigned int *)((char *)v38 + 56);
        do
          signed int v40 = __ldaxr(v39);
        while (__stlxr(1u, v39));
        if (v40 == 1)
        {
          do
          {
            while (*v39 == 1)
              ;
            do
              BOOL v41 = __ldaxr(v39);
            while (__stlxr(1u, v39));
          }

          while (v41 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v38, (GPUTools::FB::Fbuf *)&v56, *(unsigned int *)v56, 1);
        atomic_store(0, v39);
        do
        {
          unsigned int v42 = __ldaxr(v14);
          uint64_t v43 = v42 - 1;
        }

        while (__stlxr(v43, v14));
        if (gCheckGLErrors) {
          id v44 = v43 < 1;
        }
        else {
          id v44 = 1;
        }
        if (!v44) {
          handle_opengl_thread_conflict((const void **)v13);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v21, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    unsigned int v45 = __ldaxr(v14);
  while (__stlxr(v45 - 1, v14));
  [(id)DYGetGLGuestAppClient(v18) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, volatile int *, uint64_t, unsigned int *))(*(void *)(v13 + 24) + 5936LL))( a1,  a2,  a3,  a4);
LABEL_51:
  if (v56) {
    free(v56);
  }
}

        unint64_t v35 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v30), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v35) {
          unint64_t v35 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v59, v36);
        }
        unsigned int v38 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v17 + 3404);
        if ((_DWORD)v38) {
          unint64_t v35 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v59, v38, v37);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v35), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v17, (uint64_t)&v59);
        }
        unsigned int v39 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v17 + 3480),  (GPUTools::FB::Fbuf *)(v17 + 3520),  (GPUTools::FB *)&v59);
        signed int v40 = *(unsigned int *)(v17 + 3404);
        if ((_DWORD)v40 && gBreakOnError)
        {
          uint64_t v54 = 3LL;
          unsigned int v55 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v29 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v54 = 2LL;
          unsigned int v55 = 509LL;
        }

        breakpoint_break((uint64_t)&v59, (volatile int *)v55, v54, v40, v17);
LABEL_38:
        BOOL v41 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v39) defaultFbufStream];
        unsigned int v42 = (unsigned int *)((char *)v41 + 56);
        do
          uint64_t v43 = __ldaxr(v42);
        while (__stlxr(1u, v42));
        if (v43 == 1)
        {
          do
          {
            while (*v42 == 1)
              ;
            do
              id v44 = __ldaxr(v42);
            while (__stlxr(1u, v42));
          }

          while (v44 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v41, (GPUTools::FB::Fbuf *)&v59, *(unsigned int *)v59, 1);
        atomic_store(0, v42);
        do
        {
          unsigned int v45 = __ldaxr(v18);
          __int128 v46 = v45 - 1;
        }

        while (__stlxr(v46, v18));
        if (gCheckGLErrors) {
          int v47 = v46 < 1;
        }
        else {
          int v47 = 1;
        }
        if (!v47) {
          handle_opengl_thread_conflict((const void **)v17);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v24, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    uint64_t v48 = __ldaxr(v18);
  while (__stlxr(v48 - 1, v18));
  [(id)DYGetGLGuestAppClient(v22) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 + 24) + 6048LL))( a1,  a2,  a3,  a4,  a5,  a6);
LABEL_51:
  if (v59) {
    free(v59);
  }
}

        id v29 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v24), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v29) {
          id v29 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v53, v30);
        }
        unint64_t v32 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
        if ((_DWORD)v32) {
          id v29 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v53, v32, v31);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v11, (uint64_t)&v53);
        }
        float v33 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v53);
        uint64_t v34 = *(unsigned int *)(v11 + 3404);
        if ((_DWORD)v34 && gBreakOnError)
        {
          uint64_t v48 = 3LL;
          uint64_t v49 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v23 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v48 = 2LL;
          uint64_t v49 = 833LL;
        }

        breakpoint_break((uint64_t)&v53, (volatile int *)v49, v48, v34, v11);
LABEL_38:
        unint64_t v35 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v33) defaultFbufStream];
        unint64_t v36 = (unsigned int *)((char *)v35 + 56);
        do
          unsigned int v37 = __ldaxr(v36);
        while (__stlxr(1u, v36));
        if (v37 == 1)
        {
          do
          {
            while (*v36 == 1)
              ;
            do
              unsigned int v38 = __ldaxr(v36);
            while (__stlxr(1u, v36));
          }

          while (v38 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v35, (GPUTools::FB::Fbuf *)&v53, *(unsigned int *)v53, 1);
        atomic_store(0, v36);
        do
        {
          unsigned int v39 = __ldaxr(v12);
          signed int v40 = v39 - 1;
        }

        while (__stlxr(v40, v12));
        if (gCheckGLErrors) {
          BOOL v41 = v40 < 1;
        }
        else {
          BOOL v41 = 1;
        }
        if (!v41) {
          handle_opengl_thread_conflict((const void **)v11);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v18, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    unsigned int v42 = __ldaxr(v12);
  while (__stlxr(v42 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t))(*(void *)(v11 + 24) + 6088LL))(a1, a2, a3);
LABEL_51:
  if (v53) {
    free(v53);
  }
}

        unint64_t v27 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v22), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v27) {
          unint64_t v27 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v51, v28);
        }
        float v30 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
        if ((_DWORD)v30) {
          unint64_t v27 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v51, v30, v29);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v9, (uint64_t)&v51);
        }
        unsigned int v31 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v51);
        unint64_t v32 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v32 && gBreakOnError)
        {
          __int128 v46 = 3LL;
          int v47 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v21 & 2) == 0) {
            goto LABEL_38;
          }
          __int128 v46 = 2LL;
          int v47 = 880LL;
        }

        breakpoint_break((uint64_t)&v51, (volatile int *)v47, v46, v32, v9);
LABEL_38:
        float v33 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v31) defaultFbufStream];
        uint64_t v34 = (unsigned int *)((char *)v33 + 56);
        do
          unint64_t v35 = __ldaxr(v34);
        while (__stlxr(1u, v34));
        if (v35 == 1)
        {
          do
          {
            while (*v34 == 1)
              ;
            do
              unint64_t v36 = __ldaxr(v34);
            while (__stlxr(1u, v34));
          }

          while (v36 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v33, (GPUTools::FB::Fbuf *)&v51, *(unsigned int *)v51, 1);
        atomic_store(0, v34);
        do
        {
          unsigned int v37 = __ldaxr(v10);
          unsigned int v38 = v37 - 1;
        }

        while (__stlxr(v38, v10));
        if (gCheckGLErrors) {
          unsigned int v39 = v38 < 1;
        }
        else {
          unsigned int v39 = 1;
        }
        if (!v39) {
          handle_opengl_thread_conflict((const void **)v9);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    signed int v40 = __ldaxr(v10);
  while (__stlxr(v40 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, __GLsync *))(*(void *)(v9 + 24) + 6248LL))(a1, a2);
LABEL_51:
  if (v51) {
    free(v51);
  }
}

        unsigned int v31 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v26), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v31) {
          unsigned int v31 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v55, v32);
        }
        uint64_t v34 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
        if ((_DWORD)v34) {
          unsigned int v31 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v55, v34, v33);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v31), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v13, (uint64_t)&v55);
        }
        unint64_t v35 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)&v55);
        unint64_t v36 = *(unsigned int *)(v13 + 3404);
        if ((_DWORD)v36 && gBreakOnError)
        {
          uint64_t v50 = 3LL;
          __int128 v51 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v25 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v50 = 2LL;
          __int128 v51 = 885LL;
        }

        breakpoint_break((uint64_t)&v55, (volatile int *)v51, v50, v36, v13);
LABEL_38:
        unsigned int v37 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v35) defaultFbufStream];
        unsigned int v38 = (unsigned int *)((char *)v37 + 56);
        do
          unsigned int v39 = __ldaxr(v38);
        while (__stlxr(1u, v38));
        if (v39 == 1)
        {
          do
          {
            while (*v38 == 1)
              ;
            do
              signed int v40 = __ldaxr(v38);
            while (__stlxr(1u, v38));
          }

          while (v40 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v37, (GPUTools::FB::Fbuf *)&v55, *(unsigned int *)v55, 1);
        atomic_store(0, v38);
        do
        {
          BOOL v41 = __ldaxr(v14);
          unsigned int v42 = v41 - 1;
        }

        while (__stlxr(v42, v14));
        if (gCheckGLErrors) {
          uint64_t v43 = v42 < 1;
        }
        else {
          uint64_t v43 = 1;
        }
        if (!v43) {
          handle_opengl_thread_conflict((const void **)v13);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v20, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    id v44 = __ldaxr(v14);
  while (__stlxr(v44 - 1, v14));
  [(id)DYGetGLGuestAppClient(v18) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, __GLsync *, uint64_t, uint64_t))(*(void *)(v13 + 24) + 6264LL))( a1,  a2,  a3,  a4);
LABEL_51:
  if (v55) {
    free(v55);
  }
}

        unint64_t v35 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v30), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v35) {
          unint64_t v35 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v59, v36);
        }
        unsigned int v38 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v17 + 3404);
        if ((_DWORD)v38) {
          unint64_t v35 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v59, v38, v37);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v35), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v17, (uint64_t)&v59);
        }
        unsigned int v39 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v17 + 3480),  (GPUTools::FB::Fbuf *)(v17 + 3520),  (GPUTools::FB *)&v59);
        signed int v40 = *(unsigned int *)(v17 + 3404);
        if ((_DWORD)v40 && gBreakOnError)
        {
          uint64_t v54 = 3LL;
          unsigned int v55 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v29 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v54 = 2LL;
          unsigned int v55 = 855LL;
        }

        breakpoint_break((uint64_t)&v59, (volatile int *)v55, v54, v40, v17);
LABEL_38:
        BOOL v41 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v39) defaultFbufStream];
        unsigned int v42 = (unsigned int *)((char *)v41 + 56);
        do
          uint64_t v43 = __ldaxr(v42);
        while (__stlxr(1u, v42));
        if (v43 == 1)
        {
          do
          {
            while (*v42 == 1)
              ;
            do
              id v44 = __ldaxr(v42);
            while (__stlxr(1u, v42));
          }

          while (v44 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v41, (GPUTools::FB::Fbuf *)&v59, *(unsigned int *)v59, 1);
        atomic_store(0, v42);
        do
        {
          unsigned int v45 = __ldaxr(v18);
          __int128 v46 = v45 - 1;
        }

        while (__stlxr(v46, v18));
        if (gCheckGLErrors) {
          int v47 = v46 < 1;
        }
        else {
          int v47 = 1;
        }
        if (!v47) {
          handle_opengl_thread_conflict((const void **)v17);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v24, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    uint64_t v48 = __ldaxr(v18);
  while (__stlxr(v48 - 1, v18));
  [(id)DYGetGLGuestAppClient(v22) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 + 24) + 6328LL))( a1,  a2,  a3,  a4,  a5,  a6);
LABEL_51:
  if (v59) {
    free(v59);
  }
}

        id v29 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v24), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v29) {
          id v29 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v53, v30);
        }
        unint64_t v32 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
        if ((_DWORD)v32) {
          id v29 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v53, v32, v31);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v11, (uint64_t)&v53);
        }
        float v33 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v53);
        uint64_t v34 = *(unsigned int *)(v11 + 3404);
        if ((_DWORD)v34 && gBreakOnError)
        {
          uint64_t v48 = 3LL;
          uint64_t v49 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v23 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v48 = 2LL;
          uint64_t v49 = 850LL;
        }

        breakpoint_break((uint64_t)&v53, (volatile int *)v49, v48, v34, v11);
LABEL_38:
        unint64_t v35 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v33) defaultFbufStream];
        unint64_t v36 = (unsigned int *)((char *)v35 + 56);
        do
          unsigned int v37 = __ldaxr(v36);
        while (__stlxr(1u, v36));
        if (v37 == 1)
        {
          do
          {
            while (*v36 == 1)
              ;
            do
              unsigned int v38 = __ldaxr(v36);
            while (__stlxr(1u, v36));
          }

          while (v38 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v35, (GPUTools::FB::Fbuf *)&v53, *(unsigned int *)v53, 1);
        atomic_store(0, v36);
        do
        {
          unsigned int v39 = __ldaxr(v12);
          signed int v40 = v39 - 1;
        }

        while (__stlxr(v40, v12));
        if (gCheckGLErrors) {
          BOOL v41 = v40 < 1;
        }
        else {
          BOOL v41 = 1;
        }
        if (!v41) {
          handle_opengl_thread_conflict((const void **)v11);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v18, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    unsigned int v42 = __ldaxr(v12);
  while (__stlxr(v42 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t))(*(void *)(v11 + 24) + 6424LL))(a1, a2, a3);
LABEL_51:
  if (v53) {
    free(v53);
  }
}

    id v29 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v25), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v29) {
      id v29 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v49, v30);
    }
    unint64_t v32 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v32) {
      id v29 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v49, v32, v31);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)v49);
    }
    float v33 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)v49);
    uint64_t v34 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v34 && gBreakOnError)
    {
      id v44 = 3LL;
      unsigned int v45 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v24 & 2) == 0) {
        goto LABEL_38;
      }
      id v44 = 2LL;
      unsigned int v45 = 895LL;
    }

    breakpoint_break((uint64_t)v49, (volatile int *)v45, v44, v34, v11);
LABEL_38:
    unint64_t v35 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v33) defaultFbufStream];
    unint64_t v36 = (unsigned int *)((char *)v35 + 56);
    do
      unsigned int v37 = __ldaxr(v36);
    while (__stlxr(1u, v36));
    if (v37 == 1)
    {
      do
      {
        while (*v36 == 1)
          ;
        do
          unsigned int v38 = __ldaxr(v36);
        while (__stlxr(1u, v36));
      }

      while (v38 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v35, (GPUTools::FB::Fbuf *)v49, *(unsigned int *)v49[0], 1);
    atomic_store(0, v36);
    ReleaseStringToEncode(StringToEncode, a3);
    goto LABEL_45;
  }

  do
  {
LABEL_45:
    unsigned int v39 = __ldaxr(v12);
    signed int v40 = v39 - 1;
  }

  while (__stlxr(v40, v12));
  if (gCheckGLErrors) {
    BOOL v41 = v40 < 1;
  }
  else {
    BOOL v41 = 1;
  }
  if (!v41) {
    handle_opengl_thread_conflict((const void **)v11);
  }
LABEL_51:
  if (v49[0]) {
    free(v49[0]);
  }
}

        id v29 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v24), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v29) {
          id v29 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v54, v30);
        }
        unint64_t v32 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
        if ((_DWORD)v32) {
          id v29 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v54, v32, v31);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v11, (uint64_t)&v54);
        }
        float v33 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v54);
        uint64_t v34 = *(unsigned int *)(v11 + 3404);
        if ((_DWORD)v34 && gBreakOnError)
        {
          uint64_t v48 = 3LL;
          uint64_t v49 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v23 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v48 = 2LL;
          uint64_t v49 = 886LL;
        }

        breakpoint_break((uint64_t)&v54, (volatile int *)v49, v48, v34, v11);
LABEL_38:
        unint64_t v35 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v33) defaultFbufStream];
        unint64_t v36 = (unsigned int *)((char *)v35 + 56);
        do
          unsigned int v37 = __ldaxr(v36);
        while (__stlxr(1u, v36));
        if (v37 == 1)
        {
          do
          {
            while (*v36 == 1)
              ;
            do
              unsigned int v38 = __ldaxr(v36);
            while (__stlxr(1u, v36));
          }

          while (v38 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v35, (GPUTools::FB::Fbuf *)&v54, *(unsigned int *)v54, 1);
        atomic_store(0, v36);
        if (!gCheckGLErrors) {
          check_errors(v11);
        }
        if (!*(_DWORD *)(v11 + 3404)) {
          wrapper_cache_pipeline_active_shader_program((ContextInfo *)v11, a2, a3, v52);
        }
        do
        {
          unsigned int v39 = __ldaxr(v12);
          signed int v40 = v39 - 1;
        }

        while (__stlxr(v40, v12));
        if (gCheckGLErrors) {
          BOOL v41 = v40 < 1;
        }
        else {
          BOOL v41 = 1;
        }
        if (!v41) {
          handle_opengl_thread_conflict((const void **)v11);
        }
        goto LABEL_54;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v18, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    unsigned int v42 = __ldaxr(v12);
  while (__stlxr(v42 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t))(*(void *)(v11 + 24) + 6560LL))(a1, a2, a3);
LABEL_54:
  if (v54) {
    free(v54);
  }
}

        unint64_t v27 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v22), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v27) {
          unint64_t v27 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v51, v28);
        }
        float v30 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
        if ((_DWORD)v30) {
          unint64_t v27 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v51, v30, v29);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v9, (uint64_t)&v51);
        }
        unsigned int v31 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v51);
        unint64_t v32 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v32 && gBreakOnError)
        {
          __int128 v46 = 3LL;
          int v47 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v21 & 2) == 0) {
            goto LABEL_38;
          }
          __int128 v46 = 2LL;
          int v47 = 887LL;
        }

        breakpoint_break((uint64_t)&v51, (volatile int *)v47, v46, v32, v9);
LABEL_38:
        float v33 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v31) defaultFbufStream];
        uint64_t v34 = (unsigned int *)((char *)v33 + 56);
        do
          unint64_t v35 = __ldaxr(v34);
        while (__stlxr(1u, v34));
        if (v35 == 1)
        {
          do
          {
            while (*v34 == 1)
              ;
            do
              unint64_t v36 = __ldaxr(v34);
            while (__stlxr(1u, v34));
          }

          while (v36 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v33, (GPUTools::FB::Fbuf *)&v51, *(unsigned int *)v51, 1);
        atomic_store(0, v34);
        do
        {
          unsigned int v37 = __ldaxr(v10);
          unsigned int v38 = v37 - 1;
        }

        while (__stlxr(v38, v10));
        if (gCheckGLErrors) {
          unsigned int v39 = v38 < 1;
        }
        else {
          unsigned int v39 = 1;
        }
        if (!v39) {
          handle_opengl_thread_conflict((const void **)v9);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    signed int v40 = __ldaxr(v10);
  while (__stlxr(v40 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 6576LL))(a1, a2);
LABEL_51:
  if (v51) {
    free(v51);
  }
}

        uint64_t v25 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v20), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v25) {
          uint64_t v25 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v49, v26);
        }
        unint64_t v28 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v7 + 3404);
        if ((_DWORD)v28) {
          uint64_t v25 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v49, v28, v27);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v25), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v7, (uint64_t)&v49);
        }
        id v29 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v7 + 3480),  (GPUTools::FB::Fbuf *)(v7 + 3520),  (GPUTools::FB *)&v49);
        float v30 = *(unsigned int *)(v7 + 3404);
        if ((_DWORD)v30 && gBreakOnError)
        {
          id v44 = 3LL;
          unsigned int v45 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v19 & 2) == 0) {
            goto LABEL_38;
          }
          id v44 = 2LL;
          unsigned int v45 = 969LL;
        }

        breakpoint_break((uint64_t)&v49, (volatile int *)v45, v44, v30, v7);
LABEL_38:
        unsigned int v31 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v29) defaultFbufStream];
        unint64_t v32 = (unsigned int *)((char *)v31 + 56);
        do
          float v33 = __ldaxr(v32);
        while (__stlxr(1u, v32));
        if (v33 == 1)
        {
          do
          {
            while (*v32 == 1)
              ;
            do
              uint64_t v34 = __ldaxr(v32);
            while (__stlxr(1u, v32));
          }

          while (v34 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v31, (GPUTools::FB::Fbuf *)&v49, *(unsigned int *)v49, 1);
        atomic_store(0, v32);
        do
        {
          unint64_t v35 = __ldaxr(v8);
          unint64_t v36 = v35 - 1;
        }

        while (__stlxr(v36, v8));
        if (gCheckGLErrors) {
          unsigned int v37 = v36 < 1;
        }
        else {
          unsigned int v37 = 1;
        }
        if (!v37) {
          handle_opengl_thread_conflict((const void **)v7);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v14, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    unsigned int v38 = __ldaxr(v8);
  while (__stlxr(v38 - 1, v8));
  [(id)DYGetGLGuestAppClient(v12) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *))(*(void *)(v7 + 24) + 6992LL))(a1);
LABEL_51:
  if (v49) {
    free(v49);
  }
}

        unint64_t v35 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v30), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v35) {
          unint64_t v35 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v59, v36);
        }
        unsigned int v38 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v17 + 3404);
        if ((_DWORD)v38) {
          unint64_t v35 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v59, v38, v37);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v35), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v17, (uint64_t)&v59);
        }
        unsigned int v39 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v17 + 3480),  (GPUTools::FB::Fbuf *)(v17 + 3520),  (GPUTools::FB *)&v59);
        signed int v40 = *(unsigned int *)(v17 + 3404);
        if ((_DWORD)v40 && gBreakOnError)
        {
          uint64_t v54 = 3LL;
          unsigned int v55 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v29 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v54 = 2LL;
          unsigned int v55 = 970LL;
        }

        breakpoint_break((uint64_t)&v59, (volatile int *)v55, v54, v40, v17);
LABEL_38:
        BOOL v41 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v39) defaultFbufStream];
        unsigned int v42 = (unsigned int *)((char *)v41 + 56);
        do
          uint64_t v43 = __ldaxr(v42);
        while (__stlxr(1u, v42));
        if (v43 == 1)
        {
          do
          {
            while (*v42 == 1)
              ;
            do
              id v44 = __ldaxr(v42);
            while (__stlxr(1u, v42));
          }

          while (v44 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v41, (GPUTools::FB::Fbuf *)&v59, *(unsigned int *)v59, 1);
        atomic_store(0, v42);
        do
        {
          unsigned int v45 = __ldaxr(v18);
          __int128 v46 = v45 - 1;
        }

        while (__stlxr(v46, v18));
        if (gCheckGLErrors) {
          int v47 = v46 < 1;
        }
        else {
          int v47 = 1;
        }
        if (!v47) {
          handle_opengl_thread_conflict((const void **)v17);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v24, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    uint64_t v48 = __ldaxr(v18);
  while (__stlxr(v48 - 1, v18));
  [(id)DYGetGLGuestAppClient(v22) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, unsigned int *, uint64_t, const void *, uint64_t))(*(void *)(v17 + 24) + 7000LL))( a1,  a2,  a3,  a4,  a5,  a6);
LABEL_51:
  if (v59) {
    free(v59);
  }
}

        id v29 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v24), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v29) {
          id v29 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v53, v30);
        }
        unint64_t v32 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
        if ((_DWORD)v32) {
          id v29 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v53, v32, v31);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v11, (uint64_t)&v53);
        }
        float v33 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v53);
        uint64_t v34 = *(unsigned int *)(v11 + 3404);
        if ((_DWORD)v34 && gBreakOnError)
        {
          uint64_t v48 = 3LL;
          uint64_t v49 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v23 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v48 = 2LL;
          uint64_t v49 = 767LL;
        }

        breakpoint_break((uint64_t)&v53, (volatile int *)v49, v48, v34, v11);
LABEL_38:
        unint64_t v35 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v33) defaultFbufStream];
        unint64_t v36 = (unsigned int *)((char *)v35 + 56);
        do
          unsigned int v37 = __ldaxr(v36);
        while (__stlxr(1u, v36));
        if (v37 == 1)
        {
          do
          {
            while (*v36 == 1)
              ;
            do
              unsigned int v38 = __ldaxr(v36);
            while (__stlxr(1u, v36));
          }

          while (v38 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v35, (GPUTools::FB::Fbuf *)&v53, *(unsigned int *)v53, 1);
        atomic_store(0, v36);
        do
        {
          unsigned int v39 = __ldaxr(v12);
          signed int v40 = v39 - 1;
        }

        while (__stlxr(v40, v12));
        if (gCheckGLErrors) {
          BOOL v41 = v40 < 1;
        }
        else {
          BOOL v41 = 1;
        }
        if (!v41) {
          handle_opengl_thread_conflict((const void **)v11);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v18, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    unsigned int v42 = __ldaxr(v12);
  while (__stlxr(v42 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, float, float))(*(void *)(v11 + 24) + 7016LL))(a1, a2, a3);
LABEL_51:
  if (v53) {
    free(v53);
  }
}

        unint64_t v27 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v22), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v27) {
          unint64_t v27 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v51, v28);
        }
        float v30 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
        if ((_DWORD)v30) {
          unint64_t v27 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v51, v30, v29);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v9, (uint64_t)&v51);
        }
        unsigned int v31 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v51);
        unint64_t v32 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v32 && gBreakOnError)
        {
          __int128 v46 = 3LL;
          int v47 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v21 & 2) == 0) {
            goto LABEL_38;
          }
          __int128 v46 = 2LL;
          int v47 = 761LL;
        }

        breakpoint_break((uint64_t)&v51, (volatile int *)v47, v46, v32, v9);
LABEL_38:
        float v33 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v31) defaultFbufStream];
        uint64_t v34 = (unsigned int *)((char *)v33 + 56);
        do
          unint64_t v35 = __ldaxr(v34);
        while (__stlxr(1u, v34));
        if (v35 == 1)
        {
          do
          {
            while (*v34 == 1)
              ;
            do
              unint64_t v36 = __ldaxr(v34);
            while (__stlxr(1u, v34));
          }

          while (v36 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v33, (GPUTools::FB::Fbuf *)&v51, *(unsigned int *)v51, 1);
        atomic_store(0, v34);
        do
        {
          unsigned int v37 = __ldaxr(v10);
          unsigned int v38 = v37 - 1;
        }

        while (__stlxr(v38, v10));
        if (gCheckGLErrors) {
          unsigned int v39 = v38 < 1;
        }
        else {
          unsigned int v39 = 1;
        }
        if (!v39) {
          handle_opengl_thread_conflict((const void **)v9);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    signed int v40 = __ldaxr(v10);
  while (__stlxr(v40 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, float))(*(void *)(v9 + 24) + 7024LL))(a1, a2);
LABEL_51:
  if (v51) {
    free(v51);
  }
}

        id v29 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v24), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v29) {
          id v29 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v53, v30);
        }
        unint64_t v32 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
        if ((_DWORD)v32) {
          id v29 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v53, v32, v31);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v11, (uint64_t)&v53);
        }
        float v33 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v53);
        uint64_t v34 = *(unsigned int *)(v11 + 3404);
        if ((_DWORD)v34 && gBreakOnError)
        {
          uint64_t v48 = 3LL;
          uint64_t v49 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v23 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v48 = 2LL;
          uint64_t v49 = 980LL;
        }

        breakpoint_break((uint64_t)&v53, (volatile int *)v49, v48, v34, v11);
LABEL_38:
        unint64_t v35 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v33) defaultFbufStream];
        unint64_t v36 = (unsigned int *)((char *)v35 + 56);
        do
          unsigned int v37 = __ldaxr(v36);
        while (__stlxr(1u, v36));
        if (v37 == 1)
        {
          do
          {
            while (*v36 == 1)
              ;
            do
              unsigned int v38 = __ldaxr(v36);
            while (__stlxr(1u, v36));
          }

          while (v38 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v35, (GPUTools::FB::Fbuf *)&v53, *(unsigned int *)v53, 1);
        atomic_store(0, v36);
        do
        {
          unsigned int v39 = __ldaxr(v12);
          signed int v40 = v39 - 1;
        }

        while (__stlxr(v40, v12));
        if (gCheckGLErrors) {
          BOOL v41 = v40 < 1;
        }
        else {
          BOOL v41 = 1;
        }
        if (!v41) {
          handle_opengl_thread_conflict((const void **)v11);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v18, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    unsigned int v42 = __ldaxr(v12);
  while (__stlxr(v42 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t))(*(void *)(v11 + 24) + 7232LL))(a1, a2, a3);
LABEL_51:
  if (v53) {
    free(v53);
  }
}

        uint64_t v25 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v20), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v25) {
          uint64_t v25 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v49, v26);
        }
        unint64_t v28 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v7 + 3404);
        if ((_DWORD)v28) {
          uint64_t v25 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v49, v28, v27);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v25), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v7, (uint64_t)&v49);
        }
        id v29 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v7 + 3480),  (GPUTools::FB::Fbuf *)(v7 + 3520),  (GPUTools::FB *)&v49);
        float v30 = *(unsigned int *)(v7 + 3404);
        if ((_DWORD)v30 && gBreakOnError)
        {
          id v44 = 3LL;
          unsigned int v45 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v19 & 2) == 0) {
            goto LABEL_38;
          }
          id v44 = 2LL;
          unsigned int v45 = 1004LL;
        }

        breakpoint_break((uint64_t)&v49, (volatile int *)v45, v44, v30, v7);
LABEL_38:
        unsigned int v31 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v29) defaultFbufStream];
        unint64_t v32 = (unsigned int *)((char *)v31 + 56);
        do
          float v33 = __ldaxr(v32);
        while (__stlxr(1u, v32));
        if (v33 == 1)
        {
          do
          {
            while (*v32 == 1)
              ;
            do
              uint64_t v34 = __ldaxr(v32);
            while (__stlxr(1u, v32));
          }

          while (v34 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v31, (GPUTools::FB::Fbuf *)&v49, *(unsigned int *)v49, 1);
        atomic_store(0, v32);
        do
        {
          unint64_t v35 = __ldaxr(v8);
          unint64_t v36 = v35 - 1;
        }

        while (__stlxr(v36, v8));
        if (gCheckGLErrors) {
          unsigned int v37 = v36 < 1;
        }
        else {
          unsigned int v37 = 1;
        }
        if (!v37) {
          handle_opengl_thread_conflict((const void **)v7);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v14, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    unsigned int v38 = __ldaxr(v8);
  while (__stlxr(v38 - 1, v8));
  [(id)DYGetGLGuestAppClient(v12) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *))(*(void *)(v7 + 24) + 7256LL))(a1);
LABEL_51:
  if (v49) {
    free(v49);
  }
}

        uint64_t v25 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v20), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v25) {
          uint64_t v25 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v49, v26);
        }
        unint64_t v28 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v7 + 3404);
        if ((_DWORD)v28) {
          uint64_t v25 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v49, v28, v27);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v25), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v7, (uint64_t)&v49);
        }
        id v29 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v7 + 3480),  (GPUTools::FB::Fbuf *)(v7 + 3520),  (GPUTools::FB *)&v49);
        float v30 = *(unsigned int *)(v7 + 3404);
        if ((_DWORD)v30 && gBreakOnError)
        {
          id v44 = 3LL;
          unsigned int v45 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v19 & 2) == 0) {
            goto LABEL_38;
          }
          id v44 = 2LL;
          unsigned int v45 = 1005LL;
        }

        breakpoint_break((uint64_t)&v49, (volatile int *)v45, v44, v30, v7);
LABEL_38:
        unsigned int v31 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v29) defaultFbufStream];
        unint64_t v32 = (unsigned int *)((char *)v31 + 56);
        do
          float v33 = __ldaxr(v32);
        while (__stlxr(1u, v32));
        if (v33 == 1)
        {
          do
          {
            while (*v32 == 1)
              ;
            do
              uint64_t v34 = __ldaxr(v32);
            while (__stlxr(1u, v32));
          }

          while (v34 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v31, (GPUTools::FB::Fbuf *)&v49, *(unsigned int *)v49, 1);
        atomic_store(0, v32);
        do
        {
          unint64_t v35 = __ldaxr(v8);
          unint64_t v36 = v35 - 1;
        }

        while (__stlxr(v36, v8));
        if (gCheckGLErrors) {
          unsigned int v37 = v36 < 1;
        }
        else {
          unsigned int v37 = 1;
        }
        if (!v37) {
          handle_opengl_thread_conflict((const void **)v7);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v14, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    unsigned int v38 = __ldaxr(v8);
  while (__stlxr(v38 - 1, v8));
  [(id)DYGetGLGuestAppClient(v12) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *))(*(void *)(v7 + 24) + 7264LL))(a1);
LABEL_51:
  if (v49) {
    free(v49);
  }
}

        id v29 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v24), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v29) {
          id v29 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v53, v30);
        }
        unint64_t v32 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
        if ((_DWORD)v32) {
          id v29 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v53, v32, v31);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v11, (uint64_t)&v53);
        }
        float v33 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v53);
        uint64_t v34 = *(unsigned int *)(v11 + 3404);
        if ((_DWORD)v34 && gBreakOnError)
        {
          uint64_t v48 = 3LL;
          uint64_t v49 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v23 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v48 = 2LL;
          uint64_t v49 = 759LL;
        }

        breakpoint_break((uint64_t)&v53, (volatile int *)v49, v48, v34, v11);
LABEL_38:
        unint64_t v35 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v33) defaultFbufStream];
        unint64_t v36 = (unsigned int *)((char *)v35 + 56);
        do
          unsigned int v37 = __ldaxr(v36);
        while (__stlxr(1u, v36));
        if (v37 == 1)
        {
          do
          {
            while (*v36 == 1)
              ;
            do
              unsigned int v38 = __ldaxr(v36);
            while (__stlxr(1u, v36));
          }

          while (v38 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v35, (GPUTools::FB::Fbuf *)&v53, *(unsigned int *)v53, 1);
        atomic_store(0, v36);
        do
        {
          unsigned int v39 = __ldaxr(v12);
          signed int v40 = v39 - 1;
        }

        while (__stlxr(v40, v12));
        if (gCheckGLErrors) {
          BOOL v41 = v40 < 1;
        }
        else {
          BOOL v41 = 1;
        }
        if (!v41) {
          handle_opengl_thread_conflict((const void **)v11);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v18, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    unsigned int v42 = __ldaxr(v12);
  while (__stlxr(v42 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t))(*(void *)(v11 + 24) + 7744LL))(a1, a2, a3);
LABEL_51:
  if (v53) {
    free(v53);
  }
}

        float v33 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v33) {
          float v33 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v57, v34);
        }
        unint64_t v36 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v15 + 3404);
        if ((_DWORD)v36) {
          float v33 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v57, v36, v35);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v15, (uint64_t)&v57);
        }
        unsigned int v37 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v15 + 3480),  (GPUTools::FB::Fbuf *)(v15 + 3520),  (GPUTools::FB *)&v57);
        unsigned int v38 = *(unsigned int *)(v15 + 3404);
        if ((_DWORD)v38 && gBreakOnError)
        {
          __uint64_t v52 = 3LL;
          char v53 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v27 & 2) == 0) {
            goto LABEL_38;
          }
          __uint64_t v52 = 2LL;
          char v53 = 760LL;
        }

        breakpoint_break((uint64_t)&v57, (volatile int *)v53, v52, v38, v15);
LABEL_38:
        unsigned int v39 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v37) defaultFbufStream];
        signed int v40 = (unsigned int *)((char *)v39 + 56);
        do
          BOOL v41 = __ldaxr(v40);
        while (__stlxr(1u, v40));
        if (v41 == 1)
        {
          do
          {
            while (*v40 == 1)
              ;
            do
              unsigned int v42 = __ldaxr(v40);
            while (__stlxr(1u, v40));
          }

          while (v42 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v39, (GPUTools::FB::Fbuf *)&v57, *(unsigned int *)v57, 1);
        atomic_store(0, v40);
        do
        {
          uint64_t v43 = __ldaxr(v16);
          id v44 = v43 - 1;
        }

        while (__stlxr(v44, v16));
        if (gCheckGLErrors) {
          unsigned int v45 = v44 < 1;
        }
        else {
          unsigned int v45 = 1;
        }
        if (!v45) {
          handle_opengl_thread_conflict((const void **)v15);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v22, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    __int128 v46 = __ldaxr(v16);
  while (__stlxr(v46 - 1, v16));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 + 24) + 7752LL))( a1,  a2,  a3,  a4,  a5);
LABEL_51:
  if (v57) {
    free(v57);
  }
}

        unint64_t v27 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v22), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v27) {
          unint64_t v27 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v51, v28);
        }
        float v30 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
        if ((_DWORD)v30) {
          unint64_t v27 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v51, v30, v29);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v9, (uint64_t)&v51);
        }
        unsigned int v31 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v51);
        unint64_t v32 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v32 && gBreakOnError)
        {
          __int128 v46 = 3LL;
          int v47 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v21 & 2) == 0) {
            goto LABEL_38;
          }
          __int128 v46 = 2LL;
          int v47 = 762LL;
        }

        breakpoint_break((uint64_t)&v51, (volatile int *)v47, v46, v32, v9);
LABEL_38:
        float v33 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v31) defaultFbufStream];
        uint64_t v34 = (unsigned int *)((char *)v33 + 56);
        do
          unint64_t v35 = __ldaxr(v34);
        while (__stlxr(1u, v34));
        if (v35 == 1)
        {
          do
          {
            while (*v34 == 1)
              ;
            do
              unint64_t v36 = __ldaxr(v34);
            while (__stlxr(1u, v34));
          }

          while (v36 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v33, (GPUTools::FB::Fbuf *)&v51, *(unsigned int *)v51, 1);
        atomic_store(0, v34);
        do
        {
          unsigned int v37 = __ldaxr(v10);
          unsigned int v38 = v37 - 1;
        }

        while (__stlxr(v38, v10));
        if (gCheckGLErrors) {
          unsigned int v39 = v38 < 1;
        }
        else {
          unsigned int v39 = 1;
        }
        if (!v39) {
          handle_opengl_thread_conflict((const void **)v9);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    signed int v40 = __ldaxr(v10);
  while (__stlxr(v40 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 7760LL))(a1, a2);
LABEL_51:
  if (v51) {
    free(v51);
  }
}

        id v29 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v24), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v29) {
          id v29 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v53, v30);
        }
        unint64_t v32 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
        if ((_DWORD)v32) {
          id v29 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v53, v32, v31);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v11, (uint64_t)&v53);
        }
        float v33 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v53);
        uint64_t v34 = *(unsigned int *)(v11 + 3404);
        if ((_DWORD)v34 && gBreakOnError)
        {
          uint64_t v48 = 3LL;
          uint64_t v49 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v23 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v48 = 2LL;
          uint64_t v49 = 763LL;
        }

        breakpoint_break((uint64_t)&v53, (volatile int *)v49, v48, v34, v11);
LABEL_38:
        unint64_t v35 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v33) defaultFbufStream];
        unint64_t v36 = (unsigned int *)((char *)v35 + 56);
        do
          unsigned int v37 = __ldaxr(v36);
        while (__stlxr(1u, v36));
        if (v37 == 1)
        {
          do
          {
            while (*v36 == 1)
              ;
            do
              unsigned int v38 = __ldaxr(v36);
            while (__stlxr(1u, v36));
          }

          while (v38 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v35, (GPUTools::FB::Fbuf *)&v53, *(unsigned int *)v53, 1);
        atomic_store(0, v36);
        do
        {
          unsigned int v39 = __ldaxr(v12);
          signed int v40 = v39 - 1;
        }

        while (__stlxr(v40, v12));
        if (gCheckGLErrors) {
          BOOL v41 = v40 < 1;
        }
        else {
          BOOL v41 = 1;
        }
        if (!v41) {
          handle_opengl_thread_conflict((const void **)v11);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v18, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    unsigned int v42 = __ldaxr(v12);
  while (__stlxr(v42 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, const float *))(*(void *)(v11 + 24) + 7768LL))(a1, a2, a3);
LABEL_51:
  if (v53) {
    free(v53);
  }
}

        id v29 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v24), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v29) {
          id v29 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v53, v30);
        }
        unint64_t v32 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
        if ((_DWORD)v32) {
          id v29 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v53, v32, v31);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v11, (uint64_t)&v53);
        }
        float v33 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v53);
        uint64_t v34 = *(unsigned int *)(v11 + 3404);
        if ((_DWORD)v34 && gBreakOnError)
        {
          uint64_t v48 = 3LL;
          uint64_t v49 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v23 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v48 = 2LL;
          uint64_t v49 = 764LL;
        }

        breakpoint_break((uint64_t)&v53, (volatile int *)v49, v48, v34, v11);
LABEL_38:
        unint64_t v35 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v33) defaultFbufStream];
        unint64_t v36 = (unsigned int *)((char *)v35 + 56);
        do
          unsigned int v37 = __ldaxr(v36);
        while (__stlxr(1u, v36));
        if (v37 == 1)
        {
          do
          {
            while (*v36 == 1)
              ;
            do
              unsigned int v38 = __ldaxr(v36);
            while (__stlxr(1u, v36));
          }

          while (v38 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v35, (GPUTools::FB::Fbuf *)&v53, *(unsigned int *)v53, 1);
        atomic_store(0, v36);
        do
        {
          unsigned int v39 = __ldaxr(v12);
          signed int v40 = v39 - 1;
        }

        while (__stlxr(v40, v12));
        if (gCheckGLErrors) {
          BOOL v41 = v40 < 1;
        }
        else {
          BOOL v41 = 1;
        }
        if (!v41) {
          handle_opengl_thread_conflict((const void **)v11);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v18, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    unsigned int v42 = __ldaxr(v12);
  while (__stlxr(v42 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, const int *))(*(void *)(v11 + 24) + 7776LL))(a1, a2, a3);
LABEL_51:
  if (v53) {
    free(v53);
  }
}

        float v33 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v33) {
          float v33 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v57, v34);
        }
        unint64_t v36 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v15 + 3404);
        if ((_DWORD)v36) {
          float v33 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v57, v36, v35);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v15, (uint64_t)&v57);
        }
        unsigned int v37 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v15 + 3480),  (GPUTools::FB::Fbuf *)(v15 + 3520),  (GPUTools::FB *)&v57);
        unsigned int v38 = *(unsigned int *)(v15 + 3404);
        if ((_DWORD)v38 && gBreakOnError)
        {
          __uint64_t v52 = 3LL;
          char v53 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v27 & 2) == 0) {
            goto LABEL_38;
          }
          __uint64_t v52 = 2LL;
          char v53 = 765LL;
        }

        breakpoint_break((uint64_t)&v57, (volatile int *)v53, v52, v38, v15);
LABEL_38:
        unsigned int v39 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v37) defaultFbufStream];
        signed int v40 = (unsigned int *)((char *)v39 + 56);
        do
          BOOL v41 = __ldaxr(v40);
        while (__stlxr(1u, v40));
        if (v41 == 1)
        {
          do
          {
            while (*v40 == 1)
              ;
            do
              unsigned int v42 = __ldaxr(v40);
            while (__stlxr(1u, v40));
          }

          while (v42 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v39, (GPUTools::FB::Fbuf *)&v57, *(unsigned int *)v57, 1);
        atomic_store(0, v40);
        do
        {
          uint64_t v43 = __ldaxr(v16);
          id v44 = v43 - 1;
        }

        while (__stlxr(v44, v16));
        if (gCheckGLErrors) {
          unsigned int v45 = v44 < 1;
        }
        else {
          unsigned int v45 = 1;
        }
        if (!v45) {
          handle_opengl_thread_conflict((const void **)v15);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v22, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    __int128 v46 = __ldaxr(v16);
  while (__stlxr(v46 - 1, v16));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 + 24) + 7784LL))( a1,  a2,  a3,  a4,  a5);
LABEL_51:
  if (v57) {
    free(v57);
  }
}

        id v29 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v24), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v29) {
          id v29 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v53, v30);
        }
        unint64_t v32 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
        if ((_DWORD)v32) {
          id v29 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v53, v32, v31);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v11, (uint64_t)&v53);
        }
        float v33 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v53);
        uint64_t v34 = *(unsigned int *)(v11 + 3404);
        if ((_DWORD)v34 && gBreakOnError)
        {
          uint64_t v48 = 3LL;
          uint64_t v49 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v23 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v48 = 2LL;
          uint64_t v49 = 768LL;
        }

        breakpoint_break((uint64_t)&v53, (volatile int *)v49, v48, v34, v11);
LABEL_38:
        unint64_t v35 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v33) defaultFbufStream];
        unint64_t v36 = (unsigned int *)((char *)v35 + 56);
        do
          unsigned int v37 = __ldaxr(v36);
        while (__stlxr(1u, v36));
        if (v37 == 1)
        {
          do
          {
            while (*v36 == 1)
              ;
            do
              unsigned int v38 = __ldaxr(v36);
            while (__stlxr(1u, v36));
          }

          while (v38 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v35, (GPUTools::FB::Fbuf *)&v53, *(unsigned int *)v53, 1);
        atomic_store(0, v36);
        do
        {
          unsigned int v39 = __ldaxr(v12);
          signed int v40 = v39 - 1;
        }

        while (__stlxr(v40, v12));
        if (gCheckGLErrors) {
          BOOL v41 = v40 < 1;
        }
        else {
          BOOL v41 = 1;
        }
        if (!v41) {
          handle_opengl_thread_conflict((const void **)v11);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v18, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    unsigned int v42 = __ldaxr(v12);
  while (__stlxr(v42 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t))(*(void *)(v11 + 24) + 7792LL))(a1, a2, a3);
LABEL_51:
  if (v53) {
    free(v53);
  }
}

        unsigned int v37 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v37) {
          unsigned int v37 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v61, v38);
        }
        signed int v40 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v19 + 3404);
        if ((_DWORD)v40) {
          unsigned int v37 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v61, v40, v39);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v37), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v19, (uint64_t)&v61);
        }
        BOOL v41 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v19 + 3480),  (GPUTools::FB::Fbuf *)(v19 + 3520),  (GPUTools::FB *)&v61);
        unsigned int v42 = *(unsigned int *)(v19 + 3404);
        if ((_DWORD)v42 && gBreakOnError)
        {
          uint64_t v56 = 3LL;
          char v57 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v31 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v56 = 2LL;
          char v57 = 779LL;
        }

        breakpoint_break((uint64_t)&v61, (volatile int *)v57, v56, v42, v19);
LABEL_38:
        uint64_t v43 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v41) defaultFbufStream];
        id v44 = (unsigned int *)((char *)v43 + 56);
        do
          unsigned int v45 = __ldaxr(v44);
        while (__stlxr(1u, v44));
        if (v45 == 1)
        {
          do
          {
            while (*v44 == 1)
              ;
            do
              __int128 v46 = __ldaxr(v44);
            while (__stlxr(1u, v44));
          }

          while (v46 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v43, (GPUTools::FB::Fbuf *)&v61, *(unsigned int *)v61, 1);
        atomic_store(0, v44);
        do
        {
          int v47 = __ldaxr(v20);
          uint64_t v48 = v47 - 1;
        }

        while (__stlxr(v48, v20));
        if (gCheckGLErrors) {
          uint64_t v49 = v48 < 1;
        }
        else {
          uint64_t v49 = 1;
        }
        if (!v49) {
          handle_opengl_thread_conflict((const void **)v19);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v26, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    uint64_t v50 = __ldaxr(v20);
  while (__stlxr(v50 - 1, v20));
  [(id)DYGetGLGuestAppClient(v24) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, float, float, float, float, float, float))(*(void *)(v19 + 24) + 7816LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7);
LABEL_51:
  if (v61) {
    free(v61);
  }
}

        unint64_t v36 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v31), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v36) {
          unint64_t v36 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v61, v37);
        }
        unsigned int v39 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v18 + 3404);
        if ((_DWORD)v39) {
          unint64_t v36 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v61, v39, v38);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v36), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v18, (uint64_t)&v61);
        }
        signed int v40 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v18 + 3480),  (GPUTools::FB::Fbuf *)(v18 + 3520),  (GPUTools::FB *)&v61);
        BOOL v41 = *(unsigned int *)(v18 + 3404);
        if ((_DWORD)v41 && gBreakOnError)
        {
          unsigned int v55 = 3LL;
          uint64_t v56 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v30 & 2) == 0) {
            goto LABEL_38;
          }
          unsigned int v55 = 2LL;
          uint64_t v56 = 780LL;
        }

        breakpoint_break((uint64_t)&v61, (volatile int *)v56, v55, v41, v18);
LABEL_38:
        unsigned int v42 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v40) defaultFbufStream];
        uint64_t v43 = (unsigned int *)((char *)v42 + 56);
        do
          id v44 = __ldaxr(v43);
        while (__stlxr(1u, v43));
        if (v44 == 1)
        {
          do
          {
            while (*v43 == 1)
              ;
            do
              unsigned int v45 = __ldaxr(v43);
            while (__stlxr(1u, v43));
          }

          while (v45 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v42, (GPUTools::FB::Fbuf *)&v61, *(unsigned int *)v61, 1);
        atomic_store(0, v43);
        do
        {
          __int128 v46 = __ldaxr(v19);
          int v47 = v46 - 1;
        }

        while (__stlxr(v47, v19));
        if (gCheckGLErrors) {
          uint64_t v48 = v47 < 1;
        }
        else {
          uint64_t v48 = 1;
        }
        if (!v48) {
          handle_opengl_thread_conflict((const void **)v18);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v25, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    uint64_t v49 = __ldaxr(v19);
  while (__stlxr(v49 - 1, v19));
  [(id)DYGetGLGuestAppClient(v23) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)(v18 + 24)
                                                                                                 + 7824LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7);
LABEL_51:
  if (v61) {
    free(v61);
  }
}

        id v29 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v24), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v29) {
          id v29 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v53, v30);
        }
        unint64_t v32 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
        if ((_DWORD)v32) {
          id v29 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v53, v32, v31);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v11, (uint64_t)&v53);
        }
        float v33 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v53);
        uint64_t v34 = *(unsigned int *)(v11 + 3404);
        if ((_DWORD)v34 && gBreakOnError)
        {
          uint64_t v48 = 3LL;
          uint64_t v49 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v23 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v48 = 2LL;
          uint64_t v49 = 783LL;
        }

        breakpoint_break((uint64_t)&v53, (volatile int *)v49, v48, v34, v11);
LABEL_38:
        unint64_t v35 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v33) defaultFbufStream];
        unint64_t v36 = (unsigned int *)((char *)v35 + 56);
        do
          unsigned int v37 = __ldaxr(v36);
        while (__stlxr(1u, v36));
        if (v37 == 1)
        {
          do
          {
            while (*v36 == 1)
              ;
            do
              unsigned int v38 = __ldaxr(v36);
            while (__stlxr(1u, v36));
          }

          while (v38 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v35, (GPUTools::FB::Fbuf *)&v53, *(unsigned int *)v53, 1);
        atomic_store(0, v36);
        do
        {
          unsigned int v39 = __ldaxr(v12);
          signed int v40 = v39 - 1;
        }

        while (__stlxr(v40, v12));
        if (gCheckGLErrors) {
          BOOL v41 = v40 < 1;
        }
        else {
          BOOL v41 = 1;
        }
        if (!v41) {
          handle_opengl_thread_conflict((const void **)v11);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v18, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    unsigned int v42 = __ldaxr(v12);
  while (__stlxr(v42 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, int *))(*(void *)(v11 + 24) + 7848LL))(a1, a2, a3);
LABEL_51:
  if (v53) {
    free(v53);
  }
}

        unsigned int v31 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v26), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v31) {
          unsigned int v31 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v55, v32);
        }
        uint64_t v34 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
        if ((_DWORD)v34) {
          unsigned int v31 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v55, v34, v33);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v31), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v13, (uint64_t)&v55);
        }
        unint64_t v35 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)&v55);
        unint64_t v36 = *(unsigned int *)(v13 + 3404);
        if ((_DWORD)v36 && gBreakOnError)
        {
          uint64_t v50 = 3LL;
          __int128 v51 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v25 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v50 = 2LL;
          __int128 v51 = 791LL;
        }

        breakpoint_break((uint64_t)&v55, (volatile int *)v51, v50, v36, v13);
LABEL_38:
        unsigned int v37 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v35) defaultFbufStream];
        unsigned int v38 = (unsigned int *)((char *)v37 + 56);
        do
          unsigned int v39 = __ldaxr(v38);
        while (__stlxr(1u, v38));
        if (v39 == 1)
        {
          do
          {
            while (*v38 == 1)
              ;
            do
              signed int v40 = __ldaxr(v38);
            while (__stlxr(1u, v38));
          }

          while (v40 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v37, (GPUTools::FB::Fbuf *)&v55, *(unsigned int *)v55, 1);
        atomic_store(0, v38);
        do
        {
          BOOL v41 = __ldaxr(v14);
          unsigned int v42 = v41 - 1;
        }

        while (__stlxr(v42, v14));
        if (gCheckGLErrors) {
          uint64_t v43 = v42 < 1;
        }
        else {
          uint64_t v43 = 1;
        }
        if (!v43) {
          handle_opengl_thread_conflict((const void **)v13);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v20, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    id v44 = __ldaxr(v14);
  while (__stlxr(v44 - 1, v14));
  [(id)DYGetGLGuestAppClient(v18) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 + 24) + 7904LL))( a1,  a2,  a3,  a4);
LABEL_51:
  if (v55) {
    free(v55);
  }
}

        unint64_t v27 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v22), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v27) {
          unint64_t v27 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v51, v28);
        }
        float v30 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
        if ((_DWORD)v30) {
          unint64_t v27 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v51, v30, v29);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v9, (uint64_t)&v51);
        }
        unsigned int v31 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v51);
        unint64_t v32 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v32 && gBreakOnError)
        {
          __int128 v46 = 3LL;
          int v47 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v21 & 2) == 0) {
            goto LABEL_38;
          }
          __int128 v46 = 2LL;
          int v47 = 793LL;
        }

        breakpoint_break((uint64_t)&v51, (volatile int *)v47, v46, v32, v9);
LABEL_38:
        float v33 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v31) defaultFbufStream];
        uint64_t v34 = (unsigned int *)((char *)v33 + 56);
        do
          unint64_t v35 = __ldaxr(v34);
        while (__stlxr(1u, v34));
        if (v35 == 1)
        {
          do
          {
            while (*v34 == 1)
              ;
            do
              unint64_t v36 = __ldaxr(v34);
            while (__stlxr(1u, v34));
          }

          while (v36 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v33, (GPUTools::FB::Fbuf *)&v51, *(unsigned int *)v51, 1);
        atomic_store(0, v34);
        do
        {
          unsigned int v37 = __ldaxr(v10);
          unsigned int v38 = v37 - 1;
        }

        while (__stlxr(v38, v10));
        if (gCheckGLErrors) {
          unsigned int v39 = v38 < 1;
        }
        else {
          unsigned int v39 = 1;
        }
        if (!v39) {
          handle_opengl_thread_conflict((const void **)v9);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    signed int v40 = __ldaxr(v10);
  while (__stlxr(v40 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 7920LL))(a1, a2);
LABEL_51:
  if (v51) {
    free(v51);
  }
}

        float v30 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v25), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v30) {
          float v30 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v54, v31);
        }
        float v33 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
        if ((_DWORD)v33) {
          float v30 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v54, v33, v32);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v30), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v9, (uint64_t)&v54);
        }
        uint64_t v34 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v54);
        unint64_t v35 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v35 && gBreakOnError)
        {
          uint64_t v49 = 3LL;
          uint64_t v50 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v24 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v49 = 2LL;
          uint64_t v50 = 794LL;
        }

        breakpoint_break((uint64_t)&v54, (volatile int *)v50, v49, v35, v9);
LABEL_38:
        unint64_t v36 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v34) defaultFbufStream];
        unsigned int v37 = (unsigned int *)((char *)v36 + 56);
        do
          unsigned int v38 = __ldaxr(v37);
        while (__stlxr(1u, v37));
        if (v38 == 1)
        {
          do
          {
            while (*v37 == 1)
              ;
            do
              unsigned int v39 = __ldaxr(v37);
            while (__stlxr(1u, v37));
          }

          while (v39 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v36, (GPUTools::FB::Fbuf *)&v54, *(unsigned int *)v54, 1);
        atomic_store(0, v37);
        do
        {
          signed int v40 = __ldaxr(v10);
          BOOL v41 = v40 - 1;
        }

        while (__stlxr(v41, v10));
        if (gCheckGLErrors) {
          unsigned int v42 = v41 < 1;
        }
        else {
          unsigned int v42 = 1;
        }
        if (!v42) {
          handle_opengl_thread_conflict((const void **)v9);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    uint64_t v43 = __ldaxr(v10);
  while (__stlxr(v43 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, const int *))(*(void *)(v9 + 24) + 7928LL))(a1, a2);
LABEL_51:
  if (v54) {
    free(v54);
  }
}

        unsigned int v31 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v26), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v31) {
          unsigned int v31 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v55, v32);
        }
        uint64_t v34 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
        if ((_DWORD)v34) {
          unsigned int v31 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v55, v34, v33);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v31), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v13, (uint64_t)&v55);
        }
        unint64_t v35 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)&v55);
        unint64_t v36 = *(unsigned int *)(v13 + 3404);
        if ((_DWORD)v36 && gBreakOnError)
        {
          uint64_t v50 = 3LL;
          __int128 v51 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v25 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v50 = 2LL;
          __int128 v51 = 796LL;
        }

        breakpoint_break((uint64_t)&v55, (volatile int *)v51, v50, v36, v13);
LABEL_38:
        unsigned int v37 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v35) defaultFbufStream];
        unsigned int v38 = (unsigned int *)((char *)v37 + 56);
        do
          unsigned int v39 = __ldaxr(v38);
        while (__stlxr(1u, v38));
        if (v39 == 1)
        {
          do
          {
            while (*v38 == 1)
              ;
            do
              signed int v40 = __ldaxr(v38);
            while (__stlxr(1u, v38));
          }

          while (v40 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v37, (GPUTools::FB::Fbuf *)&v55, *(unsigned int *)v55, 1);
        atomic_store(0, v38);
        do
        {
          BOOL v41 = __ldaxr(v14);
          unsigned int v42 = v41 - 1;
        }

        while (__stlxr(v42, v14));
        if (gCheckGLErrors) {
          uint64_t v43 = v42 < 1;
        }
        else {
          uint64_t v43 = 1;
        }
        if (!v43) {
          handle_opengl_thread_conflict((const void **)v13);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v20, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    id v44 = __ldaxr(v14);
  while (__stlxr(v44 - 1, v14));
  [(id)DYGetGLGuestAppClient(v18) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 + 24) + 7936LL))( a1,  a2,  a3,  a4);
LABEL_51:
  if (v55) {
    free(v55);
  }
}

        float v30 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v25), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v30) {
          float v30 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v54, v31);
        }
        float v33 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
        if ((_DWORD)v33) {
          float v30 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v54, v33, v32);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v30), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v9, (uint64_t)&v54);
        }
        uint64_t v34 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v54);
        unint64_t v35 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v35 && gBreakOnError)
        {
          uint64_t v49 = 3LL;
          uint64_t v50 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v24 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v49 = 2LL;
          uint64_t v50 = 799LL;
        }

        breakpoint_break((uint64_t)&v54, (volatile int *)v50, v49, v35, v9);
LABEL_38:
        unint64_t v36 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v34) defaultFbufStream];
        unsigned int v37 = (unsigned int *)((char *)v36 + 56);
        do
          unsigned int v38 = __ldaxr(v37);
        while (__stlxr(1u, v37));
        if (v38 == 1)
        {
          do
          {
            while (*v37 == 1)
              ;
            do
              unsigned int v39 = __ldaxr(v37);
            while (__stlxr(1u, v37));
          }

          while (v39 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v36, (GPUTools::FB::Fbuf *)&v54, *(unsigned int *)v54, 1);
        atomic_store(0, v37);
        do
        {
          signed int v40 = __ldaxr(v10);
          BOOL v41 = v40 - 1;
        }

        while (__stlxr(v41, v10));
        if (gCheckGLErrors) {
          unsigned int v42 = v41 < 1;
        }
        else {
          unsigned int v42 = 1;
        }
        if (!v42) {
          handle_opengl_thread_conflict((const void **)v9);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    uint64_t v43 = __ldaxr(v10);
  while (__stlxr(v43 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, const int *))(*(void *)(v9 + 24) + 7952LL))(a1, a2);
LABEL_51:
  if (v54) {
    free(v54);
  }
}

        unsigned int v31 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v26), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v31) {
          unsigned int v31 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v55, v32);
        }
        uint64_t v34 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
        if ((_DWORD)v34) {
          unsigned int v31 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v55, v34, v33);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v31), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v13, (uint64_t)&v55);
        }
        unint64_t v35 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)&v55);
        unint64_t v36 = *(unsigned int *)(v13 + 3404);
        if ((_DWORD)v36 && gBreakOnError)
        {
          uint64_t v50 = 3LL;
          __int128 v51 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v25 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v50 = 2LL;
          __int128 v51 = 801LL;
        }

        breakpoint_break((uint64_t)&v55, (volatile int *)v51, v50, v36, v13);
LABEL_38:
        unsigned int v37 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v35) defaultFbufStream];
        unsigned int v38 = (unsigned int *)((char *)v37 + 56);
        do
          unsigned int v39 = __ldaxr(v38);
        while (__stlxr(1u, v38));
        if (v39 == 1)
        {
          do
          {
            while (*v38 == 1)
              ;
            do
              signed int v40 = __ldaxr(v38);
            while (__stlxr(1u, v38));
          }

          while (v40 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v37, (GPUTools::FB::Fbuf *)&v55, *(unsigned int *)v55, 1);
        atomic_store(0, v38);
        do
        {
          BOOL v41 = __ldaxr(v14);
          unsigned int v42 = v41 - 1;
        }

        while (__stlxr(v42, v14));
        if (gCheckGLErrors) {
          uint64_t v43 = v42 < 1;
        }
        else {
          uint64_t v43 = 1;
        }
        if (!v43) {
          handle_opengl_thread_conflict((const void **)v13);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v20, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    id v44 = __ldaxr(v14);
  while (__stlxr(v44 - 1, v14));
  [(id)DYGetGLGuestAppClient(v18) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 + 24) + 7960LL))( a1,  a2,  a3,  a4);
LABEL_51:
  if (v55) {
    free(v55);
  }
}

        unsigned int v37 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v37) {
          unsigned int v37 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v61, v38);
        }
        signed int v40 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v19 + 3404);
        if ((_DWORD)v40) {
          unsigned int v37 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v61, v40, v39);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v37), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v19, (uint64_t)&v61);
        }
        BOOL v41 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v19 + 3480),  (GPUTools::FB::Fbuf *)(v19 + 3520),  (GPUTools::FB *)&v61);
        unsigned int v42 = *(unsigned int *)(v19 + 3404);
        if ((_DWORD)v42 && gBreakOnError)
        {
          uint64_t v56 = 3LL;
          char v57 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v31 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v56 = 2LL;
          char v57 = 802LL;
        }

        breakpoint_break((uint64_t)&v61, (volatile int *)v57, v56, v42, v19);
LABEL_38:
        uint64_t v43 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v41) defaultFbufStream];
        id v44 = (unsigned int *)((char *)v43 + 56);
        do
          unsigned int v45 = __ldaxr(v44);
        while (__stlxr(1u, v44));
        if (v45 == 1)
        {
          do
          {
            while (*v44 == 1)
              ;
            do
              __int128 v46 = __ldaxr(v44);
            while (__stlxr(1u, v44));
          }

          while (v46 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v43, (GPUTools::FB::Fbuf *)&v61, *(unsigned int *)v61, 1);
        atomic_store(0, v44);
        do
        {
          int v47 = __ldaxr(v20);
          uint64_t v48 = v47 - 1;
        }

        while (__stlxr(v48, v20));
        if (gCheckGLErrors) {
          uint64_t v49 = v48 < 1;
        }
        else {
          uint64_t v49 = 1;
        }
        if (!v49) {
          handle_opengl_thread_conflict((const void **)v19);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v26, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    uint64_t v50 = __ldaxr(v20);
  while (__stlxr(v50 - 1, v20));
  [(id)DYGetGLGuestAppClient(v24) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, float, float, float, float, float, float))(*(void *)(v19 + 24) + 7968LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7);
LABEL_51:
  if (v61) {
    free(v61);
  }
}

        unint64_t v36 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v31), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v36) {
          unint64_t v36 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v61, v37);
        }
        unsigned int v39 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v18 + 3404);
        if ((_DWORD)v39) {
          unint64_t v36 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v61, v39, v38);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v36), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v18, (uint64_t)&v61);
        }
        signed int v40 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v18 + 3480),  (GPUTools::FB::Fbuf *)(v18 + 3520),  (GPUTools::FB *)&v61);
        BOOL v41 = *(unsigned int *)(v18 + 3404);
        if ((_DWORD)v41 && gBreakOnError)
        {
          unsigned int v55 = 3LL;
          uint64_t v56 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v30 & 2) == 0) {
            goto LABEL_38;
          }
          unsigned int v55 = 2LL;
          uint64_t v56 = 803LL;
        }

        breakpoint_break((uint64_t)&v61, (volatile int *)v56, v55, v41, v18);
LABEL_38:
        unsigned int v42 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v40) defaultFbufStream];
        uint64_t v43 = (unsigned int *)((char *)v42 + 56);
        do
          id v44 = __ldaxr(v43);
        while (__stlxr(1u, v43));
        if (v44 == 1)
        {
          do
          {
            while (*v43 == 1)
              ;
            do
              unsigned int v45 = __ldaxr(v43);
            while (__stlxr(1u, v43));
          }

          while (v45 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v42, (GPUTools::FB::Fbuf *)&v61, *(unsigned int *)v61, 1);
        atomic_store(0, v43);
        do
        {
          __int128 v46 = __ldaxr(v19);
          int v47 = v46 - 1;
        }

        while (__stlxr(v47, v19));
        if (gCheckGLErrors) {
          uint64_t v48 = v47 < 1;
        }
        else {
          uint64_t v48 = 1;
        }
        if (!v48) {
          handle_opengl_thread_conflict((const void **)v18);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v25, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    uint64_t v49 = __ldaxr(v19);
  while (__stlxr(v49 - 1, v19));
  [(id)DYGetGLGuestAppClient(v23) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)(v18 + 24)
                                                                                                 + 7976LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7);
LABEL_51:
  if (v61) {
    free(v61);
  }
}

        unint64_t v27 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v22), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v27) {
          unint64_t v27 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v51, v28);
        }
        float v30 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
        if ((_DWORD)v30) {
          unint64_t v27 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v51, v30, v29);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v9, (uint64_t)&v51);
        }
        unsigned int v31 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v51);
        unint64_t v32 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v32 && gBreakOnError)
        {
          __int128 v46 = 3LL;
          int v47 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v21 & 2) == 0) {
            goto LABEL_38;
          }
          __int128 v46 = 2LL;
          int v47 = 807LL;
        }

        breakpoint_break((uint64_t)&v51, (volatile int *)v47, v46, v32, v9);
LABEL_38:
        float v33 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v31) defaultFbufStream];
        uint64_t v34 = (unsigned int *)((char *)v33 + 56);
        do
          unint64_t v35 = __ldaxr(v34);
        while (__stlxr(1u, v34));
        if (v35 == 1)
        {
          do
          {
            while (*v34 == 1)
              ;
            do
              unint64_t v36 = __ldaxr(v34);
            while (__stlxr(1u, v34));
          }

          while (v36 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v33, (GPUTools::FB::Fbuf *)&v51, *(unsigned int *)v51, 1);
        atomic_store(0, v34);
        do
        {
          unsigned int v37 = __ldaxr(v10);
          unsigned int v38 = v37 - 1;
        }

        while (__stlxr(v38, v10));
        if (gCheckGLErrors) {
          unsigned int v39 = v38 < 1;
        }
        else {
          unsigned int v39 = 1;
        }
        if (!v39) {
          handle_opengl_thread_conflict((const void **)v9);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    signed int v40 = __ldaxr(v10);
  while (__stlxr(v40 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 7984LL))(a1, a2);
LABEL_51:
  if (v51) {
    free(v51);
  }
}

        id v29 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v24), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v29) {
          id v29 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v53, v30);
        }
        unint64_t v32 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
        if ((_DWORD)v32) {
          id v29 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v53, v32, v31);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v11, (uint64_t)&v53);
        }
        float v33 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v53);
        uint64_t v34 = *(unsigned int *)(v11 + 3404);
        if ((_DWORD)v34 && gBreakOnError)
        {
          uint64_t v48 = 3LL;
          uint64_t v49 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v23 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v48 = 2LL;
          uint64_t v49 = 808LL;
        }

        breakpoint_break((uint64_t)&v53, (volatile int *)v49, v48, v34, v11);
LABEL_38:
        unint64_t v35 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v33) defaultFbufStream];
        unint64_t v36 = (unsigned int *)((char *)v35 + 56);
        do
          unsigned int v37 = __ldaxr(v36);
        while (__stlxr(1u, v36));
        if (v37 == 1)
        {
          do
          {
            while (*v36 == 1)
              ;
            do
              unsigned int v38 = __ldaxr(v36);
            while (__stlxr(1u, v36));
          }

          while (v38 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v35, (GPUTools::FB::Fbuf *)&v53, *(unsigned int *)v53, 1);
        atomic_store(0, v36);
        do
        {
          unsigned int v39 = __ldaxr(v12);
          signed int v40 = v39 - 1;
        }

        while (__stlxr(v40, v12));
        if (gCheckGLErrors) {
          BOOL v41 = v40 < 1;
        }
        else {
          BOOL v41 = 1;
        }
        if (!v41) {
          handle_opengl_thread_conflict((const void **)v11);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v18, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    unsigned int v42 = __ldaxr(v12);
  while (__stlxr(v42 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t))(*(void *)(v11 + 24) + 7992LL))(a1, a2, a3);
LABEL_51:
  if (v53) {
    free(v53);
  }
}

        float v33 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v33) {
          float v33 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v57, v34);
        }
        unint64_t v36 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v15 + 3404);
        if ((_DWORD)v36) {
          float v33 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v57, v36, v35);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v15, (uint64_t)&v57);
        }
        unsigned int v37 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v15 + 3480),  (GPUTools::FB::Fbuf *)(v15 + 3520),  (GPUTools::FB *)&v57);
        unsigned int v38 = *(unsigned int *)(v15 + 3404);
        if ((_DWORD)v38 && gBreakOnError)
        {
          __uint64_t v52 = 3LL;
          char v53 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v27 & 2) == 0) {
            goto LABEL_38;
          }
          __uint64_t v52 = 2LL;
          char v53 = 810LL;
        }

        breakpoint_break((uint64_t)&v57, (volatile int *)v53, v52, v38, v15);
LABEL_38:
        unsigned int v39 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v37) defaultFbufStream];
        signed int v40 = (unsigned int *)((char *)v39 + 56);
        do
          BOOL v41 = __ldaxr(v40);
        while (__stlxr(1u, v40));
        if (v41 == 1)
        {
          do
          {
            while (*v40 == 1)
              ;
            do
              unsigned int v42 = __ldaxr(v40);
            while (__stlxr(1u, v40));
          }

          while (v42 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v39, (GPUTools::FB::Fbuf *)&v57, *(unsigned int *)v57, 1);
        atomic_store(0, v40);
        do
        {
          uint64_t v43 = __ldaxr(v16);
          id v44 = v43 - 1;
        }

        while (__stlxr(v44, v16));
        if (gCheckGLErrors) {
          unsigned int v45 = v44 < 1;
        }
        else {
          unsigned int v45 = 1;
        }
        if (!v45) {
          handle_opengl_thread_conflict((const void **)v15);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v22, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    __int128 v46 = __ldaxr(v16);
  while (__stlxr(v46 - 1, v16));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 + 24) + 8000LL))( a1,  a2,  a3,  a4,  a5);
LABEL_51:
  if (v57) {
    free(v57);
  }
}

        unsigned int v31 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v26), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v31) {
          unsigned int v31 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v55, v32);
        }
        uint64_t v34 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
        if ((_DWORD)v34) {
          unsigned int v31 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v55, v34, v33);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v31), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v13, (uint64_t)&v55);
        }
        unint64_t v35 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)&v55);
        unint64_t v36 = *(unsigned int *)(v13 + 3404);
        if ((_DWORD)v36 && gBreakOnError)
        {
          uint64_t v50 = 3LL;
          __int128 v51 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v25 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v50 = 2LL;
          __int128 v51 = 812LL;
        }

        breakpoint_break((uint64_t)&v55, (volatile int *)v51, v50, v36, v13);
LABEL_38:
        unsigned int v37 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v35) defaultFbufStream];
        unsigned int v38 = (unsigned int *)((char *)v37 + 56);
        do
          unsigned int v39 = __ldaxr(v38);
        while (__stlxr(1u, v38));
        if (v39 == 1)
        {
          do
          {
            while (*v38 == 1)
              ;
            do
              signed int v40 = __ldaxr(v38);
            while (__stlxr(1u, v38));
          }

          while (v40 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v37, (GPUTools::FB::Fbuf *)&v55, *(unsigned int *)v55, 1);
        atomic_store(0, v38);
        do
        {
          BOOL v41 = __ldaxr(v14);
          unsigned int v42 = v41 - 1;
        }

        while (__stlxr(v42, v14));
        if (gCheckGLErrors) {
          uint64_t v43 = v42 < 1;
        }
        else {
          uint64_t v43 = 1;
        }
        if (!v43) {
          handle_opengl_thread_conflict((const void **)v13);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v20, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    id v44 = __ldaxr(v14);
  while (__stlxr(v44 - 1, v14));
  [(id)DYGetGLGuestAppClient(v18) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 + 24) + 8008LL))( a1,  a2,  a3,  a4);
LABEL_51:
  if (v55) {
    free(v55);
  }
}

        unsigned int v31 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v26), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v31) {
          unsigned int v31 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v55, v32);
        }
        uint64_t v34 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
        if ((_DWORD)v34) {
          unsigned int v31 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v55, v34, v33);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v31), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v13, (uint64_t)&v55);
        }
        unint64_t v35 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)&v55);
        unint64_t v36 = *(unsigned int *)(v13 + 3404);
        if ((_DWORD)v36 && gBreakOnError)
        {
          uint64_t v50 = 3LL;
          __int128 v51 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v25 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v50 = 2LL;
          __int128 v51 = 818LL;
        }

        breakpoint_break((uint64_t)&v55, (volatile int *)v51, v50, v36, v13);
LABEL_38:
        unsigned int v37 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v35) defaultFbufStream];
        unsigned int v38 = (unsigned int *)((char *)v37 + 56);
        do
          unsigned int v39 = __ldaxr(v38);
        while (__stlxr(1u, v38));
        if (v39 == 1)
        {
          do
          {
            while (*v38 == 1)
              ;
            do
              signed int v40 = __ldaxr(v38);
            while (__stlxr(1u, v38));
          }

          while (v40 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v37, (GPUTools::FB::Fbuf *)&v55, *(unsigned int *)v55, 1);
        atomic_store(0, v38);
        do
        {
          BOOL v41 = __ldaxr(v14);
          unsigned int v42 = v41 - 1;
        }

        while (__stlxr(v42, v14));
        if (gCheckGLErrors) {
          uint64_t v43 = v42 < 1;
        }
        else {
          uint64_t v43 = 1;
        }
        if (!v43) {
          handle_opengl_thread_conflict((const void **)v13);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v20, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    id v44 = __ldaxr(v14);
  while (__stlxr(v44 - 1, v14));
  [(id)DYGetGLGuestAppClient(v18) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 + 24) + 8048LL))( a1,  a2,  a3,  a4);
LABEL_51:
  if (v55) {
    free(v55);
  }
}

        unint64_t v35 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v30), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v35) {
          unint64_t v35 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v59, v36);
        }
        unsigned int v38 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v17 + 3404);
        if ((_DWORD)v38) {
          unint64_t v35 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v59, v38, v37);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v35), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v17, (uint64_t)&v59);
        }
        unsigned int v39 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v17 + 3480),  (GPUTools::FB::Fbuf *)(v17 + 3520),  (GPUTools::FB *)&v59);
        signed int v40 = *(unsigned int *)(v17 + 3404);
        if ((_DWORD)v40 && gBreakOnError)
        {
          uint64_t v54 = 3LL;
          unsigned int v55 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v29 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v54 = 2LL;
          unsigned int v55 = 800LL;
        }

        breakpoint_break((uint64_t)&v59, (volatile int *)v55, v54, v40, v17);
LABEL_38:
        BOOL v41 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v39) defaultFbufStream];
        unsigned int v42 = (unsigned int *)((char *)v41 + 56);
        do
          uint64_t v43 = __ldaxr(v42);
        while (__stlxr(1u, v42));
        if (v43 == 1)
        {
          do
          {
            while (*v42 == 1)
              ;
            do
              id v44 = __ldaxr(v42);
            while (__stlxr(1u, v42));
          }

          while (v44 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v41, (GPUTools::FB::Fbuf *)&v59, *(unsigned int *)v59, 1);
        atomic_store(0, v42);
        do
        {
          unsigned int v45 = __ldaxr(v18);
          __int128 v46 = v45 - 1;
        }

        while (__stlxr(v46, v18));
        if (gCheckGLErrors) {
          int v47 = v46 < 1;
        }
        else {
          int v47 = 1;
        }
        if (!v47) {
          handle_opengl_thread_conflict((const void **)v17);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v24, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    uint64_t v48 = __ldaxr(v18);
  while (__stlxr(v48 - 1, v18));
  [(id)DYGetGLGuestAppClient(v22) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 + 24) + 8056LL))( a1,  a2,  a3,  a4,  a5,  a6);
LABEL_51:
  if (v59) {
    free(v59);
  }
}

        id v29 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v24), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v29) {
          id v29 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v53, v30);
        }
        unint64_t v32 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
        if ((_DWORD)v32) {
          id v29 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v53, v32, v31);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v11, (uint64_t)&v53);
        }
        float v33 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v53);
        uint64_t v34 = *(unsigned int *)(v11 + 3404);
        if ((_DWORD)v34 && gBreakOnError)
        {
          uint64_t v48 = 3LL;
          uint64_t v49 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v23 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v48 = 2LL;
          uint64_t v49 = 811LL;
        }

        breakpoint_break((uint64_t)&v53, (volatile int *)v49, v48, v34, v11);
LABEL_38:
        unint64_t v35 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v33) defaultFbufStream];
        unint64_t v36 = (unsigned int *)((char *)v35 + 56);
        do
          unsigned int v37 = __ldaxr(v36);
        while (__stlxr(1u, v36));
        if (v37 == 1)
        {
          do
          {
            while (*v36 == 1)
              ;
            do
              unsigned int v38 = __ldaxr(v36);
            while (__stlxr(1u, v36));
          }

          while (v38 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v35, (GPUTools::FB::Fbuf *)&v53, *(unsigned int *)v53, 1);
        atomic_store(0, v36);
        do
        {
          unsigned int v39 = __ldaxr(v12);
          signed int v40 = v39 - 1;
        }

        while (__stlxr(v40, v12));
        if (gCheckGLErrors) {
          BOOL v41 = v40 < 1;
        }
        else {
          BOOL v41 = 1;
        }
        if (!v41) {
          handle_opengl_thread_conflict((const void **)v11);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v18, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    unsigned int v42 = __ldaxr(v12);
  while (__stlxr(v42 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t))(*(void *)(v11 + 24) + 8064LL))(a1, a2, a3);
LABEL_51:
  if (v53) {
    free(v53);
  }
}

        id v29 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v24), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v29) {
          id v29 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v53, v30);
        }
        unint64_t v32 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
        if ((_DWORD)v32) {
          id v29 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v53, v32, v31);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v11, (uint64_t)&v53);
        }
        float v33 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v53);
        uint64_t v34 = *(unsigned int *)(v11 + 3404);
        if ((_DWORD)v34 && gBreakOnError)
        {
          uint64_t v48 = 3LL;
          uint64_t v49 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v23 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v48 = 2LL;
          uint64_t v49 = 804LL;
        }

        breakpoint_break((uint64_t)&v53, (volatile int *)v49, v48, v34, v11);
LABEL_38:
        unint64_t v35 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v33) defaultFbufStream];
        unint64_t v36 = (unsigned int *)((char *)v35 + 56);
        do
          unsigned int v37 = __ldaxr(v36);
        while (__stlxr(1u, v36));
        if (v37 == 1)
        {
          do
          {
            while (*v36 == 1)
              ;
            do
              unsigned int v38 = __ldaxr(v36);
            while (__stlxr(1u, v36));
          }

          while (v38 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v35, (GPUTools::FB::Fbuf *)&v53, *(unsigned int *)v53, 1);
        atomic_store(0, v36);
        do
        {
          unsigned int v39 = __ldaxr(v12);
          signed int v40 = v39 - 1;
        }

        while (__stlxr(v40, v12));
        if (gCheckGLErrors) {
          BOOL v41 = v40 < 1;
        }
        else {
          BOOL v41 = 1;
        }
        if (!v41) {
          handle_opengl_thread_conflict((const void **)v11);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v18, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    unsigned int v42 = __ldaxr(v12);
  while (__stlxr(v42 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t))(*(void *)(v11 + 24) + 8072LL))(a1, a2, a3);
LABEL_51:
  if (v53) {
    free(v53);
  }
}

        unint64_t v27 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v22), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v27) {
          unint64_t v27 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v51, v28);
        }
        float v30 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
        if ((_DWORD)v30) {
          unint64_t v27 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v51, v30, v29);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v9, (uint64_t)&v51);
        }
        unsigned int v31 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v51);
        unint64_t v32 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v32 && gBreakOnError)
        {
          __int128 v46 = 3LL;
          int v47 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v21 & 2) == 0) {
            goto LABEL_38;
          }
          __int128 v46 = 2LL;
          int v47 = 766LL;
        }

        breakpoint_break((uint64_t)&v51, (volatile int *)v47, v46, v32, v9);
LABEL_38:
        float v33 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v31) defaultFbufStream];
        uint64_t v34 = (unsigned int *)((char *)v33 + 56);
        do
          unint64_t v35 = __ldaxr(v34);
        while (__stlxr(1u, v34));
        if (v35 == 1)
        {
          do
          {
            while (*v34 == 1)
              ;
            do
              unint64_t v36 = __ldaxr(v34);
            while (__stlxr(1u, v34));
          }

          while (v36 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v33, (GPUTools::FB::Fbuf *)&v51, *(unsigned int *)v51, 1);
        atomic_store(0, v34);
        do
        {
          unsigned int v37 = __ldaxr(v10);
          unsigned int v38 = v37 - 1;
        }

        while (__stlxr(v38, v10));
        if (gCheckGLErrors) {
          unsigned int v39 = v38 < 1;
        }
        else {
          unsigned int v39 = 1;
        }
        if (!v39) {
          handle_opengl_thread_conflict((const void **)v9);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    signed int v40 = __ldaxr(v10);
  while (__stlxr(v40 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 8088LL))(a1, a2);
LABEL_51:
  if (v51) {
    free(v51);
  }
}

        uint64_t v25 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v20), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v25) {
          uint64_t v25 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v49, v26);
        }
        unint64_t v28 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v7 + 3404);
        if ((_DWORD)v28) {
          uint64_t v25 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v49, v28, v27);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v25), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v7, (uint64_t)&v49);
        }
        id v29 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v7 + 3480),  (GPUTools::FB::Fbuf *)(v7 + 3520),  (GPUTools::FB *)&v49);
        float v30 = *(unsigned int *)(v7 + 3404);
        if ((_DWORD)v30 && gBreakOnError)
        {
          id v44 = 3LL;
          unsigned int v45 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v19 & 2) == 0) {
            goto LABEL_38;
          }
          id v44 = 2LL;
          unsigned int v45 = 795LL;
        }

        breakpoint_break((uint64_t)&v49, (volatile int *)v45, v44, v30, v7);
LABEL_38:
        unsigned int v31 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v29) defaultFbufStream];
        unint64_t v32 = (unsigned int *)((char *)v31 + 56);
        do
          float v33 = __ldaxr(v32);
        while (__stlxr(1u, v32));
        if (v33 == 1)
        {
          do
          {
            while (*v32 == 1)
              ;
            do
              uint64_t v34 = __ldaxr(v32);
            while (__stlxr(1u, v32));
          }

          while (v34 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v31, (GPUTools::FB::Fbuf *)&v49, *(unsigned int *)v49, 1);
        atomic_store(0, v32);
        do
        {
          unint64_t v35 = __ldaxr(v8);
          unint64_t v36 = v35 - 1;
        }

        while (__stlxr(v36, v8));
        if (gCheckGLErrors) {
          unsigned int v37 = v36 < 1;
        }
        else {
          unsigned int v37 = 1;
        }
        if (!v37) {
          handle_opengl_thread_conflict((const void **)v7);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v14, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    unsigned int v38 = __ldaxr(v8);
  while (__stlxr(v38 - 1, v8));
  [(id)DYGetGLGuestAppClient(v12) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *))(*(void *)(v7 + 24) + 8096LL))(a1);
LABEL_51:
  if (v49) {
    free(v49);
  }
}

        unint64_t v35 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v30), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v35) {
          unint64_t v35 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v59, v36);
        }
        unsigned int v38 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v17 + 3404);
        if ((_DWORD)v38) {
          unint64_t v35 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v59, v38, v37);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v35), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v17, (uint64_t)&v59);
        }
        unsigned int v39 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v17 + 3480),  (GPUTools::FB::Fbuf *)(v17 + 3520),  (GPUTools::FB *)&v59);
        signed int v40 = *(unsigned int *)(v17 + 3404);
        if ((_DWORD)v40 && gBreakOnError)
        {
          uint64_t v54 = 3LL;
          unsigned int v55 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v29 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v54 = 2LL;
          unsigned int v55 = 773LL;
        }

        breakpoint_break((uint64_t)&v59, (volatile int *)v55, v54, v40, v17);
LABEL_38:
        BOOL v41 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v39) defaultFbufStream];
        unsigned int v42 = (unsigned int *)((char *)v41 + 56);
        do
          uint64_t v43 = __ldaxr(v42);
        while (__stlxr(1u, v42));
        if (v43 == 1)
        {
          do
          {
            while (*v42 == 1)
              ;
            do
              id v44 = __ldaxr(v42);
            while (__stlxr(1u, v42));
          }

          while (v44 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v41, (GPUTools::FB::Fbuf *)&v59, *(unsigned int *)v59, 1);
        atomic_store(0, v42);
        do
        {
          unsigned int v45 = __ldaxr(v18);
          __int128 v46 = v45 - 1;
        }

        while (__stlxr(v46, v18));
        if (gCheckGLErrors) {
          int v47 = v46 < 1;
        }
        else {
          int v47 = 1;
        }
        if (!v47) {
          handle_opengl_thread_conflict((const void **)v17);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v24, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    uint64_t v48 = __ldaxr(v18);
  while (__stlxr(v48 - 1, v18));
  [(id)DYGetGLGuestAppClient(v22) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 + 24) + 8120LL))( a1,  a2,  a3,  a4,  a5,  a6);
LABEL_51:
  if (v59) {
    free(v59);
  }
}

        unint64_t v35 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v30), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v35) {
          unint64_t v35 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v59, v36);
        }
        unsigned int v38 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v17 + 3404);
        if ((_DWORD)v38) {
          unint64_t v35 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v59, v38, v37);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v35), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v17, (uint64_t)&v59);
        }
        unsigned int v39 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v17 + 3480),  (GPUTools::FB::Fbuf *)(v17 + 3520),  (GPUTools::FB *)&v59);
        signed int v40 = *(unsigned int *)(v17 + 3404);
        if ((_DWORD)v40 && gBreakOnError)
        {
          uint64_t v54 = 3LL;
          unsigned int v55 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v29 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v54 = 2LL;
          unsigned int v55 = 771LL;
        }

        breakpoint_break((uint64_t)&v59, (volatile int *)v55, v54, v40, v17);
LABEL_38:
        BOOL v41 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v39) defaultFbufStream];
        unsigned int v42 = (unsigned int *)((char *)v41 + 56);
        do
          uint64_t v43 = __ldaxr(v42);
        while (__stlxr(1u, v42));
        if (v43 == 1)
        {
          do
          {
            while (*v42 == 1)
              ;
            do
              id v44 = __ldaxr(v42);
            while (__stlxr(1u, v42));
          }

          while (v44 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v41, (GPUTools::FB::Fbuf *)&v59, *(unsigned int *)v59, 1);
        atomic_store(0, v42);
        do
        {
          unsigned int v45 = __ldaxr(v18);
          __int128 v46 = v45 - 1;
        }

        while (__stlxr(v46, v18));
        if (gCheckGLErrors) {
          int v47 = v46 < 1;
        }
        else {
          int v47 = 1;
        }
        if (!v47) {
          handle_opengl_thread_conflict((const void **)v17);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v24, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    uint64_t v48 = __ldaxr(v18);
  while (__stlxr(v48 - 1, v18));
  [(id)DYGetGLGuestAppClient(v22) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 + 24) + 8128LL))( a1,  a2,  a3,  a4,  a5,  a6);
LABEL_51:
  if (v59) {
    free(v59);
  }
}

        unint64_t v35 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v30), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v35) {
          unint64_t v35 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v59, v36);
        }
        unsigned int v38 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v17 + 3404);
        if ((_DWORD)v38) {
          unint64_t v35 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v59, v38, v37);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v35), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v17, (uint64_t)&v59);
        }
        unsigned int v39 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v17 + 3480),  (GPUTools::FB::Fbuf *)(v17 + 3520),  (GPUTools::FB *)&v59);
        signed int v40 = *(unsigned int *)(v17 + 3404);
        if ((_DWORD)v40 && gBreakOnError)
        {
          uint64_t v54 = 3LL;
          unsigned int v55 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v29 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v54 = 2LL;
          unsigned int v55 = 775LL;
        }

        breakpoint_break((uint64_t)&v59, (volatile int *)v55, v54, v40, v17);
LABEL_38:
        BOOL v41 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v39) defaultFbufStream];
        unsigned int v42 = (unsigned int *)((char *)v41 + 56);
        do
          uint64_t v43 = __ldaxr(v42);
        while (__stlxr(1u, v42));
        if (v43 == 1)
        {
          do
          {
            while (*v42 == 1)
              ;
            do
              id v44 = __ldaxr(v42);
            while (__stlxr(1u, v42));
          }

          while (v44 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v41, (GPUTools::FB::Fbuf *)&v59, *(unsigned int *)v59, 1);
        atomic_store(0, v42);
        do
        {
          unsigned int v45 = __ldaxr(v18);
          __int128 v46 = v45 - 1;
        }

        while (__stlxr(v46, v18));
        if (gCheckGLErrors) {
          int v47 = v46 < 1;
        }
        else {
          int v47 = 1;
        }
        if (!v47) {
          handle_opengl_thread_conflict((const void **)v17);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v24, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    uint64_t v48 = __ldaxr(v18);
  while (__stlxr(v48 - 1, v18));
  [(id)DYGetGLGuestAppClient(v22) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 + 24) + 8136LL))( a1,  a2,  a3,  a4,  a5,  a6);
LABEL_51:
  if (v59) {
    free(v59);
  }
}

        unint64_t v28 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v23), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v28) {
          unint64_t v28 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v52, v29);
        }
        unsigned int v31 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
        if ((_DWORD)v31) {
          unint64_t v28 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v52, v31, v30);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v9, (uint64_t)&v52);
        }
        unint64_t v32 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v52);
        float v33 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v33 && gBreakOnError)
        {
          int v47 = 3LL;
          uint64_t v48 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v22 & 2) == 0) {
            goto LABEL_38;
          }
          int v47 = 2LL;
          uint64_t v48 = 774LL;
        }

        breakpoint_break((uint64_t)&v52, (volatile int *)v48, v47, v33, v9);
LABEL_38:
        uint64_t v34 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v32) defaultFbufStream];
        unint64_t v35 = (unsigned int *)((char *)v34 + 56);
        do
          unint64_t v36 = __ldaxr(v35);
        while (__stlxr(1u, v35));
        if (v36 == 1)
        {
          do
          {
            while (*v35 == 1)
              ;
            do
              unsigned int v37 = __ldaxr(v35);
            while (__stlxr(1u, v35));
          }

          while (v37 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v34, (GPUTools::FB::Fbuf *)&v52, *(unsigned int *)v52, 1);
        atomic_store(0, v35);
        do
        {
          unsigned int v38 = __ldaxr(v10);
          unsigned int v39 = v38 - 1;
        }

        while (__stlxr(v39, v10));
        if (gCheckGLErrors) {
          signed int v40 = v39 < 1;
        }
        else {
          signed int v40 = 1;
        }
        if (!v40) {
          handle_opengl_thread_conflict((const void **)v9);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    BOOL v41 = __ldaxr(v10);
  while (__stlxr(v41 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, const __int16 *))(*(void *)(v9 + 24) + 8144LL))(a1, a2);
LABEL_51:
  if (v52) {
    free(v52);
  }
}

        unint64_t v28 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v23), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v28) {
          unint64_t v28 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v52, v29);
        }
        unsigned int v31 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
        if ((_DWORD)v31) {
          unint64_t v28 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v52, v31, v30);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v9, (uint64_t)&v52);
        }
        unint64_t v32 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v52);
        float v33 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v33 && gBreakOnError)
        {
          int v47 = 3LL;
          uint64_t v48 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v22 & 2) == 0) {
            goto LABEL_38;
          }
          int v47 = 2LL;
          uint64_t v48 = 772LL;
        }

        breakpoint_break((uint64_t)&v52, (volatile int *)v48, v47, v33, v9);
LABEL_38:
        uint64_t v34 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v32) defaultFbufStream];
        unint64_t v35 = (unsigned int *)((char *)v34 + 56);
        do
          unint64_t v36 = __ldaxr(v35);
        while (__stlxr(1u, v35));
        if (v36 == 1)
        {
          do
          {
            while (*v35 == 1)
              ;
            do
              unsigned int v37 = __ldaxr(v35);
            while (__stlxr(1u, v35));
          }

          while (v37 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v34, (GPUTools::FB::Fbuf *)&v52, *(unsigned int *)v52, 1);
        atomic_store(0, v35);
        do
        {
          unsigned int v38 = __ldaxr(v10);
          unsigned int v39 = v38 - 1;
        }

        while (__stlxr(v39, v10));
        if (gCheckGLErrors) {
          signed int v40 = v39 < 1;
        }
        else {
          signed int v40 = 1;
        }
        if (!v40) {
          handle_opengl_thread_conflict((const void **)v9);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    BOOL v41 = __ldaxr(v10);
  while (__stlxr(v41 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, const int *))(*(void *)(v9 + 24) + 8152LL))(a1, a2);
LABEL_51:
  if (v52) {
    free(v52);
  }
}

        unint64_t v28 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v23), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v28) {
          unint64_t v28 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v52, v29);
        }
        unsigned int v31 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
        if ((_DWORD)v31) {
          unint64_t v28 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v52, v31, v30);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v9, (uint64_t)&v52);
        }
        unint64_t v32 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v52);
        float v33 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v33 && gBreakOnError)
        {
          int v47 = 3LL;
          uint64_t v48 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v22 & 2) == 0) {
            goto LABEL_38;
          }
          int v47 = 2LL;
          uint64_t v48 = 776LL;
        }

        breakpoint_break((uint64_t)&v52, (volatile int *)v48, v47, v33, v9);
LABEL_38:
        uint64_t v34 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v32) defaultFbufStream];
        unint64_t v35 = (unsigned int *)((char *)v34 + 56);
        do
          unint64_t v36 = __ldaxr(v35);
        while (__stlxr(1u, v35));
        if (v36 == 1)
        {
          do
          {
            while (*v35 == 1)
              ;
            do
              unsigned int v37 = __ldaxr(v35);
            while (__stlxr(1u, v35));
          }

          while (v37 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v34, (GPUTools::FB::Fbuf *)&v52, *(unsigned int *)v52, 1);
        atomic_store(0, v35);
        do
        {
          unsigned int v38 = __ldaxr(v10);
          unsigned int v39 = v38 - 1;
        }

        while (__stlxr(v39, v10));
        if (gCheckGLErrors) {
          signed int v40 = v39 < 1;
        }
        else {
          signed int v40 = 1;
        }
        if (!v40) {
          handle_opengl_thread_conflict((const void **)v9);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    BOOL v41 = __ldaxr(v10);
  while (__stlxr(v41 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, const int *))(*(void *)(v9 + 24) + 8160LL))(a1, a2);
LABEL_51:
  if (v52) {
    free(v52);
  }
}

        unint64_t v35 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v30), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v35) {
          unint64_t v35 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v59, v36);
        }
        unsigned int v38 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v17 + 3404);
        if ((_DWORD)v38) {
          unint64_t v35 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v59, v38, v37);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v35), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v17, (uint64_t)&v59);
        }
        unsigned int v39 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v17 + 3480),  (GPUTools::FB::Fbuf *)(v17 + 3520),  (GPUTools::FB *)&v59);
        signed int v40 = *(unsigned int *)(v17 + 3404);
        if ((_DWORD)v40 && gBreakOnError)
        {
          uint64_t v54 = 3LL;
          unsigned int v55 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v29 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v54 = 2LL;
          unsigned int v55 = 769LL;
        }

        breakpoint_break((uint64_t)&v59, (volatile int *)v55, v54, v40, v17);
LABEL_38:
        BOOL v41 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v39) defaultFbufStream];
        unsigned int v42 = (unsigned int *)((char *)v41 + 56);
        do
          uint64_t v43 = __ldaxr(v42);
        while (__stlxr(1u, v42));
        if (v43 == 1)
        {
          do
          {
            while (*v42 == 1)
              ;
            do
              id v44 = __ldaxr(v42);
            while (__stlxr(1u, v42));
          }

          while (v44 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v41, (GPUTools::FB::Fbuf *)&v59, *(unsigned int *)v59, 1);
        atomic_store(0, v42);
        do
        {
          unsigned int v45 = __ldaxr(v18);
          __int128 v46 = v45 - 1;
        }

        while (__stlxr(v46, v18));
        if (gCheckGLErrors) {
          int v47 = v46 < 1;
        }
        else {
          int v47 = 1;
        }
        if (!v47) {
          handle_opengl_thread_conflict((const void **)v17);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v24, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    uint64_t v48 = __ldaxr(v18);
  while (__stlxr(v48 - 1, v18));
  [(id)DYGetGLGuestAppClient(v22) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, float, float, float, float, float))(*(void *)(v17 + 24) + 8168LL))( a1,  a2,  a3,  a4,  a5,  a6);
LABEL_51:
  if (v59) {
    free(v59);
  }
}

        unint64_t v28 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v23), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v28) {
          unint64_t v28 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v52, v29);
        }
        unsigned int v31 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
        if ((_DWORD)v31) {
          unint64_t v28 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v52, v31, v30);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v9, (uint64_t)&v52);
        }
        unint64_t v32 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v52);
        float v33 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v33 && gBreakOnError)
        {
          int v47 = 3LL;
          uint64_t v48 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v22 & 2) == 0) {
            goto LABEL_38;
          }
          int v47 = 2LL;
          uint64_t v48 = 770LL;
        }

        breakpoint_break((uint64_t)&v52, (volatile int *)v48, v47, v33, v9);
LABEL_38:
        uint64_t v34 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v32) defaultFbufStream];
        unint64_t v35 = (unsigned int *)((char *)v34 + 56);
        do
          unint64_t v36 = __ldaxr(v35);
        while (__stlxr(1u, v35));
        if (v36 == 1)
        {
          do
          {
            while (*v35 == 1)
              ;
            do
              unsigned int v37 = __ldaxr(v35);
            while (__stlxr(1u, v35));
          }

          while (v37 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v34, (GPUTools::FB::Fbuf *)&v52, *(unsigned int *)v52, 1);
        atomic_store(0, v35);
        do
        {
          unsigned int v38 = __ldaxr(v10);
          unsigned int v39 = v38 - 1;
        }

        while (__stlxr(v39, v10));
        if (gCheckGLErrors) {
          signed int v40 = v39 < 1;
        }
        else {
          signed int v40 = 1;
        }
        if (!v40) {
          handle_opengl_thread_conflict((const void **)v9);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    BOOL v41 = __ldaxr(v10);
  while (__stlxr(v41 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, const float *))(*(void *)(v9 + 24) + 8176LL))(a1, a2);
LABEL_51:
  if (v52) {
    free(v52);
  }
}

    float v30 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v25), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v30) {
      float v30 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v53, v31);
    }
    float v33 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v33) {
      float v30 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v53, v33, v32);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v30), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v53);
    }
    uint64_t v34 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v53);
    unint64_t v35 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v35 && gBreakOnError)
    {
      uint64_t v48 = 3LL;
      uint64_t v49 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v24 & 2) == 0) {
        goto LABEL_38;
      }
      uint64_t v48 = 2LL;
      uint64_t v49 = 825LL;
    }

    breakpoint_break((uint64_t)v53, (volatile int *)v49, v48, v35, v13);
LABEL_38:
    unint64_t v36 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v34) defaultFbufStream];
    unsigned int v37 = (unsigned int *)((char *)v36 + 56);
    do
      unsigned int v38 = __ldaxr(v37);
    while (__stlxr(1u, v37));
    if (v38 == 1)
    {
      do
      {
        while (*v37 == 1)
          ;
        do
          unsigned int v39 = __ldaxr(v37);
        while (__stlxr(1u, v37));
      }

      while (v39 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v36, (GPUTools::FB::Fbuf *)v53, *(unsigned int *)v53[0], 1);
    atomic_store(0, v37);
    do
    {
      signed int v40 = __ldaxr(v14);
      BOOL v41 = v40 - 1;
    }

    while (__stlxr(v41, v14));
    if (gCheckGLErrors) {
      unsigned int v42 = v41 < 1;
    }
    else {
      unsigned int v42 = 1;
    }
    if (!v42) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    goto LABEL_51;
  }

  do
    uint64_t v43 = __ldaxr(v14);
  while (__stlxr(v43 - 1, v14));
  [(id)DYGetGLGuestAppClient(v22) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, const int *))(*(void *)(v13 + 24) + 0x2000LL))( a1,  a2,  a3,  a4);
LABEL_51:
  if (v53[0]) {
    free(v53[0]);
  }
}

        unsigned int v31 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v26), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v31) {
          unsigned int v31 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v55, v32);
        }
        uint64_t v34 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
        if ((_DWORD)v34) {
          unsigned int v31 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v55, v34, v33);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v31), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v13, (uint64_t)&v55);
        }
        unint64_t v35 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)&v55);
        unint64_t v36 = *(unsigned int *)(v13 + 3404);
        if ((_DWORD)v36 && gBreakOnError)
        {
          uint64_t v50 = 3LL;
          __int128 v51 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v25 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v50 = 2LL;
          __int128 v51 = 891LL;
        }

        breakpoint_break((uint64_t)&v55, (volatile int *)v51, v50, v36, v13);
LABEL_38:
        unsigned int v37 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v35) defaultFbufStream];
        unsigned int v38 = (unsigned int *)((char *)v37 + 56);
        do
          unsigned int v39 = __ldaxr(v38);
        while (__stlxr(1u, v38));
        if (v39 == 1)
        {
          do
          {
            while (*v38 == 1)
              ;
            do
              signed int v40 = __ldaxr(v38);
            while (__stlxr(1u, v38));
          }

          while (v40 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v37, (GPUTools::FB::Fbuf *)&v55, *(unsigned int *)v55, 1);
        atomic_store(0, v38);
        do
        {
          BOOL v41 = __ldaxr(v14);
          unsigned int v42 = v41 - 1;
        }

        while (__stlxr(v42, v14));
        if (gCheckGLErrors) {
          uint64_t v43 = v42 < 1;
        }
        else {
          uint64_t v43 = 1;
        }
        if (!v43) {
          handle_opengl_thread_conflict((const void **)v13);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v20, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    id v44 = __ldaxr(v14);
  while (__stlxr(v44 - 1, v14));
  [(id)DYGetGLGuestAppClient(v18) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, int *))(*(void *)(v13 + 24) + 8200LL))(a1, a2, a3, a4);
LABEL_51:
  if (v55) {
    free(v55);
  }
}

        float v33 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v33) {
          float v33 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v57, v34);
        }
        unint64_t v36 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v15 + 3404);
        if ((_DWORD)v36) {
          float v33 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v57, v36, v35);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v15, (uint64_t)&v57);
        }
        unsigned int v37 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v15 + 3480),  (GPUTools::FB::Fbuf *)(v15 + 3520),  (GPUTools::FB *)&v57);
        unsigned int v38 = *(unsigned int *)(v15 + 3404);
        if ((_DWORD)v38 && gBreakOnError)
        {
          __uint64_t v52 = 3LL;
          char v53 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v27 & 2) == 0) {
            goto LABEL_38;
          }
          __uint64_t v52 = 2LL;
          char v53 = 1039LL;
        }

        breakpoint_break((uint64_t)&v57, (volatile int *)v53, v52, v38, v15);
LABEL_38:
        unsigned int v39 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v37) defaultFbufStream];
        signed int v40 = (unsigned int *)((char *)v39 + 56);
        do
          BOOL v41 = __ldaxr(v40);
        while (__stlxr(1u, v40));
        if (v41 == 1)
        {
          do
          {
            while (*v40 == 1)
              ;
            do
              unsigned int v42 = __ldaxr(v40);
            while (__stlxr(1u, v40));
          }

          while (v42 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v39, (GPUTools::FB::Fbuf *)&v57, *(unsigned int *)v57, 1);
        atomic_store(0, v40);
        do
        {
          uint64_t v43 = __ldaxr(v16);
          id v44 = v43 - 1;
        }

        while (__stlxr(v44, v16));
        if (gCheckGLErrors) {
          unsigned int v45 = v44 < 1;
        }
        else {
          unsigned int v45 = 1;
        }
        if (!v45) {
          handle_opengl_thread_conflict((const void **)v15);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v22, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    __int128 v46 = __ldaxr(v16);
  while (__stlxr(v46 - 1, v16));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 + 24) + 8216LL))( a1,  a2,  a3,  a4,  a5);
LABEL_51:
  if (v57) {
    free(v57);
  }
}

        unsigned int v31 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v26), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v31) {
          unsigned int v31 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v55, v32);
        }
        uint64_t v34 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
        if ((_DWORD)v34) {
          unsigned int v31 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v55, v34, v33);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v31), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v13, (uint64_t)&v55);
        }
        unint64_t v35 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)&v55);
        unint64_t v36 = *(unsigned int *)(v13 + 3404);
        if ((_DWORD)v36 && gBreakOnError)
        {
          uint64_t v50 = 3LL;
          __int128 v51 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v25 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v50 = 2LL;
          __int128 v51 = 1046LL;
        }

        breakpoint_break((uint64_t)&v55, (volatile int *)v51, v50, v36, v13);
LABEL_38:
        unsigned int v37 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v35) defaultFbufStream];
        unsigned int v38 = (unsigned int *)((char *)v37 + 56);
        do
          unsigned int v39 = __ldaxr(v38);
        while (__stlxr(1u, v38));
        if (v39 == 1)
        {
          do
          {
            while (*v38 == 1)
              ;
            do
              signed int v40 = __ldaxr(v38);
            while (__stlxr(1u, v38));
          }

          while (v40 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v37, (GPUTools::FB::Fbuf *)&v55, *(unsigned int *)v55, 1);
        atomic_store(0, v38);
        do
        {
          BOOL v41 = __ldaxr(v14);
          unsigned int v42 = v41 - 1;
        }

        while (__stlxr(v42, v14));
        if (gCheckGLErrors) {
          uint64_t v43 = v42 < 1;
        }
        else {
          uint64_t v43 = 1;
        }
        if (!v43) {
          handle_opengl_thread_conflict((const void **)v13);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v20, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    id v44 = __ldaxr(v14);
  while (__stlxr(v44 - 1, v14));
  [(id)DYGetGLGuestAppClient(v18) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 + 24) + 8264LL))( a1,  a2,  a3,  a4);
LABEL_51:
  if (v55) {
    free(v55);
  }
}

        id v29 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v24), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v29) {
          id v29 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v53, v30);
        }
        unint64_t v32 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
        if ((_DWORD)v32) {
          id v29 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v53, v32, v31);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v11, (uint64_t)&v53);
        }
        float v33 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v53);
        uint64_t v34 = *(unsigned int *)(v11 + 3404);
        if ((_DWORD)v34 && gBreakOnError)
        {
          uint64_t v48 = 3LL;
          uint64_t v49 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v23 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v48 = 2LL;
          uint64_t v49 = 3LL;
        }

        breakpoint_break((uint64_t)&v53, (volatile int *)v49, v48, v34, v11);
LABEL_38:
        unint64_t v35 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v33) defaultFbufStream];
        unint64_t v36 = (unsigned int *)((char *)v35 + 56);
        do
          unsigned int v37 = __ldaxr(v36);
        while (__stlxr(1u, v36));
        if (v37 == 1)
        {
          do
          {
            while (*v36 == 1)
              ;
            do
              unsigned int v38 = __ldaxr(v36);
            while (__stlxr(1u, v36));
          }

          while (v38 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v35, (GPUTools::FB::Fbuf *)&v53, *(unsigned int *)v53, 1);
        atomic_store(0, v36);
        do
        {
          unsigned int v39 = __ldaxr(v12);
          signed int v40 = v39 - 1;
        }

        while (__stlxr(v40, v12));
        if (gCheckGLErrors) {
          BOOL v41 = v40 < 1;
        }
        else {
          BOOL v41 = 1;
        }
        if (!v41) {
          handle_opengl_thread_conflict((const void **)v11);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v18, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    unsigned int v42 = __ldaxr(v12);
  while (__stlxr(v42 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, float))(*(void *)(v11 + 24) + 8LL))(a1, a2, a3);
LABEL_51:
  if (v53) {
    free(v53);
  }
}

        id v29 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v24), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v29) {
          id v29 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v53, v30);
        }
        unint64_t v32 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
        if ((_DWORD)v32) {
          id v29 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v53, v32, v31);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v11, (uint64_t)&v53);
        }
        float v33 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v53);
        uint64_t v34 = *(unsigned int *)(v11 + 3404);
        if ((_DWORD)v34 && gBreakOnError)
        {
          uint64_t v48 = 3LL;
          uint64_t v49 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v23 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v48 = 2LL;
          uint64_t v49 = 26LL;
        }

        breakpoint_break((uint64_t)&v53, (volatile int *)v49, v48, v34, v11);
LABEL_38:
        unint64_t v35 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v33) defaultFbufStream];
        unint64_t v36 = (unsigned int *)((char *)v35 + 56);
        do
          unsigned int v37 = __ldaxr(v36);
        while (__stlxr(1u, v36));
        if (v37 == 1)
        {
          do
          {
            while (*v36 == 1)
              ;
            do
              unsigned int v38 = __ldaxr(v36);
            while (__stlxr(1u, v36));
          }

          while (v38 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v35, (GPUTools::FB::Fbuf *)&v53, *(unsigned int *)v53, 1);
        atomic_store(0, v36);
        do
        {
          unsigned int v39 = __ldaxr(v12);
          signed int v40 = v39 - 1;
        }

        while (__stlxr(v40, v12));
        if (gCheckGLErrors) {
          BOOL v41 = v40 < 1;
        }
        else {
          BOOL v41 = 1;
        }
        if (!v41) {
          handle_opengl_thread_conflict((const void **)v11);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v18, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    unsigned int v42 = __ldaxr(v12);
  while (__stlxr(v42 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t))(*(void *)(v11 + 24) + 56LL))(a1, a2, a3);
LABEL_51:
  if (v53) {
    free(v53);
  }
}

        float v33 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v33) {
          float v33 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v57, v34);
        }
        unint64_t v36 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v15 + 3404);
        if ((_DWORD)v36) {
          float v33 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v57, v36, v35);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v15, (uint64_t)&v57);
        }
        unsigned int v37 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v15 + 3480),  (GPUTools::FB::Fbuf *)(v15 + 3520),  (GPUTools::FB *)&v57);
        unsigned int v38 = *(unsigned int *)(v15 + 3404);
        if ((_DWORD)v38 && gBreakOnError)
        {
          __uint64_t v52 = 3LL;
          char v53 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v27 & 2) == 0) {
            goto LABEL_38;
          }
          __uint64_t v52 = 2LL;
          char v53 = 38LL;
        }

        breakpoint_break((uint64_t)&v57, (volatile int *)v53, v52, v38, v15);
LABEL_38:
        unsigned int v39 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v37) defaultFbufStream];
        signed int v40 = (unsigned int *)((char *)v39 + 56);
        do
          BOOL v41 = __ldaxr(v40);
        while (__stlxr(1u, v40));
        if (v41 == 1)
        {
          do
          {
            while (*v40 == 1)
              ;
            do
              unsigned int v42 = __ldaxr(v40);
            while (__stlxr(1u, v40));
          }

          while (v42 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v39, (GPUTools::FB::Fbuf *)&v57, *(unsigned int *)v57, 1);
        atomic_store(0, v40);
        do
        {
          uint64_t v43 = __ldaxr(v16);
          id v44 = v43 - 1;
        }

        while (__stlxr(v44, v16));
        if (gCheckGLErrors) {
          unsigned int v45 = v44 < 1;
        }
        else {
          unsigned int v45 = 1;
        }
        if (!v45) {
          handle_opengl_thread_conflict((const void **)v15);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v22, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    __int128 v46 = __ldaxr(v16);
  while (__stlxr(v46 - 1, v16));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, float, float, float, float))(*(void *)(v15 + 24) + 96LL))( a1,  a2,  a3,  a4,  a5);
LABEL_51:
  if (v57) {
    free(v57);
  }
}

        unint64_t v27 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v22), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v27) {
          unint64_t v27 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v51, v28);
        }
        float v30 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
        if ((_DWORD)v30) {
          unint64_t v27 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v51, v30, v29);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v9, (uint64_t)&v51);
        }
        unsigned int v31 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v51);
        unint64_t v32 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v32 && gBreakOnError)
        {
          __int128 v46 = 3LL;
          int v47 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v21 & 2) == 0) {
            goto LABEL_38;
          }
          __int128 v46 = 2LL;
          int v47 = 43LL;
        }

        breakpoint_break((uint64_t)&v51, (volatile int *)v47, v46, v32, v9);
LABEL_38:
        float v33 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v31) defaultFbufStream];
        uint64_t v34 = (unsigned int *)((char *)v33 + 56);
        do
          unint64_t v35 = __ldaxr(v34);
        while (__stlxr(1u, v34));
        if (v35 == 1)
        {
          do
          {
            while (*v34 == 1)
              ;
            do
              unint64_t v36 = __ldaxr(v34);
            while (__stlxr(1u, v34));
          }

          while (v36 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v33, (GPUTools::FB::Fbuf *)&v51, *(unsigned int *)v51, 1);
        atomic_store(0, v34);
        do
        {
          unsigned int v37 = __ldaxr(v10);
          unsigned int v38 = v37 - 1;
        }

        while (__stlxr(v38, v10));
        if (gCheckGLErrors) {
          unsigned int v39 = v38 < 1;
        }
        else {
          unsigned int v39 = 1;
        }
        if (!v39) {
          handle_opengl_thread_conflict((const void **)v9);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    signed int v40 = __ldaxr(v10);
  while (__stlxr(v40 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 120LL))(a1, a2);
LABEL_51:
  if (v51) {
    free(v51);
  }
}

        float v33 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v33) {
          float v33 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v57, v34);
        }
        unint64_t v36 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v15 + 3404);
        if ((_DWORD)v36) {
          float v33 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v57, v36, v35);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v15, (uint64_t)&v57);
        }
        unsigned int v37 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v15 + 3480),  (GPUTools::FB::Fbuf *)(v15 + 3520),  (GPUTools::FB *)&v57);
        unsigned int v38 = *(unsigned int *)(v15 + 3404);
        if ((_DWORD)v38 && gBreakOnError)
        {
          __uint64_t v52 = 3LL;
          char v53 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v27 & 2) == 0) {
            goto LABEL_38;
          }
          __uint64_t v52 = 2LL;
          char v53 = 66LL;
        }

        breakpoint_break((uint64_t)&v57, (volatile int *)v53, v52, v38, v15);
LABEL_38:
        unsigned int v39 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v37) defaultFbufStream];
        signed int v40 = (unsigned int *)((char *)v39 + 56);
        do
          BOOL v41 = __ldaxr(v40);
        while (__stlxr(1u, v40));
        if (v41 == 1)
        {
          do
          {
            while (*v40 == 1)
              ;
            do
              unsigned int v42 = __ldaxr(v40);
            while (__stlxr(1u, v40));
          }

          while (v42 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v39, (GPUTools::FB::Fbuf *)&v57, *(unsigned int *)v57, 1);
        atomic_store(0, v40);
        do
        {
          uint64_t v43 = __ldaxr(v16);
          id v44 = v43 - 1;
        }

        while (__stlxr(v44, v16));
        if (gCheckGLErrors) {
          unsigned int v45 = v44 < 1;
        }
        else {
          unsigned int v45 = 1;
        }
        if (!v45) {
          handle_opengl_thread_conflict((const void **)v15);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v22, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    __int128 v46 = __ldaxr(v16);
  while (__stlxr(v46 - 1, v16));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, float, float, float, float))(*(void *)(v15 + 24) + 296LL))( a1,  a2,  a3,  a4,  a5);
LABEL_51:
  if (v57) {
    free(v57);
  }
}

        float v33 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v33) {
          float v33 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v57, v34);
        }
        unint64_t v36 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v15 + 3404);
        if ((_DWORD)v36) {
          float v33 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v57, v36, v35);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v15, (uint64_t)&v57);
        }
        unsigned int v37 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v15 + 3480),  (GPUTools::FB::Fbuf *)(v15 + 3520),  (GPUTools::FB *)&v57);
        unsigned int v38 = *(unsigned int *)(v15 + 3404);
        if ((_DWORD)v38 && gBreakOnError)
        {
          __uint64_t v52 = 3LL;
          char v53 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v27 & 2) == 0) {
            goto LABEL_38;
          }
          __uint64_t v52 = 2LL;
          char v53 = 72LL;
        }

        breakpoint_break((uint64_t)&v57, (volatile int *)v53, v52, v38, v15);
LABEL_38:
        unsigned int v39 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v37) defaultFbufStream];
        signed int v40 = (unsigned int *)((char *)v39 + 56);
        do
          BOOL v41 = __ldaxr(v40);
        while (__stlxr(1u, v40));
        if (v41 == 1)
        {
          do
          {
            while (*v40 == 1)
              ;
            do
              unsigned int v42 = __ldaxr(v40);
            while (__stlxr(1u, v40));
          }

          while (v42 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v39, (GPUTools::FB::Fbuf *)&v57, *(unsigned int *)v57, 1);
        atomic_store(0, v40);
        do
        {
          uint64_t v43 = __ldaxr(v16);
          id v44 = v43 - 1;
        }

        while (__stlxr(v44, v16));
        if (gCheckGLErrors) {
          unsigned int v45 = v44 < 1;
        }
        else {
          unsigned int v45 = 1;
        }
        if (!v45) {
          handle_opengl_thread_conflict((const void **)v15);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v22, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    __int128 v46 = __ldaxr(v16);
  while (__stlxr(v46 - 1, v16));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 + 24) + 344LL))( a1,  a2,  a3,  a4,  a5);
LABEL_51:
  if (v57) {
    free(v57);
  }
}

        float v33 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v33) {
          float v33 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v57, v34);
        }
        unint64_t v36 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v15 + 3404);
        if ((_DWORD)v36) {
          float v33 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v57, v36, v35);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v15, (uint64_t)&v57);
        }
        unsigned int v37 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v15 + 3480),  (GPUTools::FB::Fbuf *)(v15 + 3520),  (GPUTools::FB *)&v57);
        unsigned int v38 = *(unsigned int *)(v15 + 3404);
        if ((_DWORD)v38 && gBreakOnError)
        {
          __uint64_t v52 = 3LL;
          char v53 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v27 & 2) == 0) {
            goto LABEL_38;
          }
          __uint64_t v52 = 2LL;
          char v53 = 78LL;
        }

        breakpoint_break((uint64_t)&v57, (volatile int *)v53, v52, v38, v15);
LABEL_38:
        unsigned int v39 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v37) defaultFbufStream];
        signed int v40 = (unsigned int *)((char *)v39 + 56);
        do
          BOOL v41 = __ldaxr(v40);
        while (__stlxr(1u, v40));
        if (v41 == 1)
        {
          do
          {
            while (*v40 == 1)
              ;
            do
              unsigned int v42 = __ldaxr(v40);
            while (__stlxr(1u, v40));
          }

          while (v42 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v39, (GPUTools::FB::Fbuf *)&v57, *(unsigned int *)v57, 1);
        atomic_store(0, v40);
        do
        {
          uint64_t v43 = __ldaxr(v16);
          id v44 = v43 - 1;
        }

        while (__stlxr(v44, v16));
        if (gCheckGLErrors) {
          unsigned int v45 = v44 < 1;
        }
        else {
          unsigned int v45 = 1;
        }
        if (!v45) {
          handle_opengl_thread_conflict((const void **)v15);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v22, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    __int128 v46 = __ldaxr(v16);
  while (__stlxr(v46 - 1, v16));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 + 24) + 392LL))( a1,  a2,  a3,  a4,  a5);
LABEL_51:
  if (v57) {
    free(v57);
  }
}

        unsigned int v37 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v37) {
          unsigned int v37 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v64, v38);
        }
        signed int v40 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v19 + 3404);
        if ((_DWORD)v40) {
          unsigned int v37 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v64, v40, v39);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v37), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v19, (uint64_t)&v64);
        }
        BOOL v41 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v19 + 3480),  (GPUTools::FB::Fbuf *)(v19 + 3520),  (GPUTools::FB *)&v64);
        unsigned int v42 = *(unsigned int *)(v19 + 3404);
        if ((_DWORD)v42 && gBreakOnError)
        {
          uint64_t v56 = 3LL;
          char v57 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v31 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v56 = 2LL;
          char v57 = 112LL;
        }

        breakpoint_break((uint64_t)&v64, (volatile int *)v57, v56, v42, v19);
LABEL_38:
        uint64_t v43 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v41) defaultFbufStream];
        id v44 = (unsigned int *)((char *)v43 + 56);
        do
          unsigned int v45 = __ldaxr(v44);
        while (__stlxr(1u, v44));
        if (v45 == 1)
        {
          do
          {
            while (*v44 == 1)
              ;
            do
              __int128 v46 = __ldaxr(v44);
            while (__stlxr(1u, v44));
          }

          while (v46 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v43, (GPUTools::FB::Fbuf *)&v64, *(unsigned int *)v64, 1);
        atomic_store(0, v44);
        do
        {
          int v47 = __ldaxr(v20);
          uint64_t v48 = v47 - 1;
        }

        while (__stlxr(v48, v20));
        if (gCheckGLErrors) {
          uint64_t v49 = v48 < 1;
        }
        else {
          uint64_t v49 = 1;
        }
        if (!v49) {
          handle_opengl_thread_conflict((const void **)v19);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v26, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    uint64_t v50 = __ldaxr(v20);
  while (__stlxr(v50 - 1, v20));
  [(id)DYGetGLGuestAppClient(v24) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, int))(*(void *)(v19 + 24) + 432LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9);
LABEL_51:
  if (v64) {
    free(v64);
  }
}

        unsigned int v37 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v37) {
          unsigned int v37 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v64, v38);
        }
        signed int v40 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v19 + 3404);
        if ((_DWORD)v40) {
          unsigned int v37 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v64, v40, v39);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v37), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v19, (uint64_t)&v64);
        }
        BOOL v41 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v19 + 3480),  (GPUTools::FB::Fbuf *)(v19 + 3520),  (GPUTools::FB *)&v64);
        unsigned int v42 = *(unsigned int *)(v19 + 3404);
        if ((_DWORD)v42 && gBreakOnError)
        {
          uint64_t v56 = 3LL;
          char v57 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v31 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v56 = 2LL;
          char v57 = 114LL;
        }

        breakpoint_break((uint64_t)&v64, (volatile int *)v57, v56, v42, v19);
LABEL_38:
        uint64_t v43 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v41) defaultFbufStream];
        id v44 = (unsigned int *)((char *)v43 + 56);
        do
          unsigned int v45 = __ldaxr(v44);
        while (__stlxr(1u, v44));
        if (v45 == 1)
        {
          do
          {
            while (*v44 == 1)
              ;
            do
              __int128 v46 = __ldaxr(v44);
            while (__stlxr(1u, v44));
          }

          while (v46 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v43, (GPUTools::FB::Fbuf *)&v64, *(unsigned int *)v64, 1);
        atomic_store(0, v44);
        do
        {
          int v47 = __ldaxr(v20);
          uint64_t v48 = v47 - 1;
        }

        while (__stlxr(v48, v20));
        if (gCheckGLErrors) {
          uint64_t v49 = v48 < 1;
        }
        else {
          uint64_t v49 = 1;
        }
        if (!v49) {
          handle_opengl_thread_conflict((const void **)v19);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v26, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    uint64_t v50 = __ldaxr(v20);
  while (__stlxr(v50 - 1, v20));
  [(id)DYGetGLGuestAppClient(v24) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, int))(*(void *)(v19 + 24) + 448LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9);
LABEL_51:
  if (v64) {
    free(v64);
  }
}

        unint64_t v27 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v22), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v27) {
          unint64_t v27 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v51, v28);
        }
        float v30 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
        if ((_DWORD)v30) {
          unint64_t v27 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v51, v30, v29);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v9, (uint64_t)&v51);
        }
        unsigned int v31 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v51);
        unint64_t v32 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v32 && gBreakOnError)
        {
          __int128 v46 = 3LL;
          int v47 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v21 & 2) == 0) {
            goto LABEL_38;
          }
          __int128 v46 = 2LL;
          int v47 = 118LL;
        }

        breakpoint_break((uint64_t)&v51, (volatile int *)v47, v46, v32, v9);
LABEL_38:
        float v33 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v31) defaultFbufStream];
        uint64_t v34 = (unsigned int *)((char *)v33 + 56);
        do
          unint64_t v35 = __ldaxr(v34);
        while (__stlxr(1u, v34));
        if (v35 == 1)
        {
          do
          {
            while (*v34 == 1)
              ;
            do
              unint64_t v36 = __ldaxr(v34);
            while (__stlxr(1u, v34));
          }

          while (v36 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v33, (GPUTools::FB::Fbuf *)&v51, *(unsigned int *)v51, 1);
        atomic_store(0, v34);
        do
        {
          unsigned int v37 = __ldaxr(v10);
          unsigned int v38 = v37 - 1;
        }

        while (__stlxr(v38, v10));
        if (gCheckGLErrors) {
          unsigned int v39 = v38 < 1;
        }
        else {
          unsigned int v39 = 1;
        }
        if (!v39) {
          handle_opengl_thread_conflict((const void **)v9);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    signed int v40 = __ldaxr(v10);
  while (__stlxr(v40 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 456LL))(a1, a2);
LABEL_51:
  if (v51) {
    free(v51);
  }
}

        unint64_t v27 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v22), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v27) {
          unint64_t v27 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v51, v28);
        }
        float v30 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
        if ((_DWORD)v30) {
          unint64_t v27 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v51, v30, v29);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v9, (uint64_t)&v51);
        }
        unsigned int v31 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v51);
        unint64_t v32 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v32 && gBreakOnError)
        {
          __int128 v46 = 3LL;
          int v47 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v21 & 2) == 0) {
            goto LABEL_38;
          }
          __int128 v46 = 2LL;
          int v47 = 130LL;
        }

        breakpoint_break((uint64_t)&v51, (volatile int *)v47, v46, v32, v9);
LABEL_38:
        float v33 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v31) defaultFbufStream];
        uint64_t v34 = (unsigned int *)((char *)v33 + 56);
        do
          unint64_t v35 = __ldaxr(v34);
        while (__stlxr(1u, v34));
        if (v35 == 1)
        {
          do
          {
            while (*v34 == 1)
              ;
            do
              unint64_t v36 = __ldaxr(v34);
            while (__stlxr(1u, v34));
          }

          while (v36 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v33, (GPUTools::FB::Fbuf *)&v51, *(unsigned int *)v51, 1);
        atomic_store(0, v34);
        do
        {
          unsigned int v37 = __ldaxr(v10);
          unsigned int v38 = v37 - 1;
        }

        while (__stlxr(v38, v10));
        if (gCheckGLErrors) {
          unsigned int v39 = v38 < 1;
        }
        else {
          unsigned int v39 = 1;
        }
        if (!v39) {
          handle_opengl_thread_conflict((const void **)v9);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    signed int v40 = __ldaxr(v10);
  while (__stlxr(v40 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 480LL))(a1, a2);
LABEL_51:
  if (v51) {
    free(v51);
  }
}

        unint64_t v27 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v22), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v27) {
          unint64_t v27 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v51, v28);
        }
        float v30 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
        if ((_DWORD)v30) {
          unint64_t v27 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v51, v30, v29);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v9, (uint64_t)&v51);
        }
        unsigned int v31 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v51);
        unint64_t v32 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v32 && gBreakOnError)
        {
          __int128 v46 = 3LL;
          int v47 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v21 & 2) == 0) {
            goto LABEL_38;
          }
          __int128 v46 = 2LL;
          int v47 = 131LL;
        }

        breakpoint_break((uint64_t)&v51, (volatile int *)v47, v46, v32, v9);
LABEL_38:
        float v33 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v31) defaultFbufStream];
        uint64_t v34 = (unsigned int *)((char *)v33 + 56);
        do
          unint64_t v35 = __ldaxr(v34);
        while (__stlxr(1u, v34));
        if (v35 == 1)
        {
          do
          {
            while (*v34 == 1)
              ;
            do
              unint64_t v36 = __ldaxr(v34);
            while (__stlxr(1u, v34));
          }

          while (v36 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v33, (GPUTools::FB::Fbuf *)&v51, *(unsigned int *)v51, 1);
        atomic_store(0, v34);
        do
        {
          unsigned int v37 = __ldaxr(v10);
          unsigned int v38 = v37 - 1;
        }

        while (__stlxr(v38, v10));
        if (gCheckGLErrors) {
          unsigned int v39 = v38 < 1;
        }
        else {
          unsigned int v39 = 1;
        }
        if (!v39) {
          handle_opengl_thread_conflict((const void **)v9);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    signed int v40 = __ldaxr(v10);
  while (__stlxr(v40 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 488LL))(a1, a2);
LABEL_51:
  if (v51) {
    free(v51);
  }
}

        unint64_t v27 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v22), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v27) {
          unint64_t v27 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v51, v28);
        }
        float v30 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
        if ((_DWORD)v30) {
          unint64_t v27 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v51, v30, v29);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v9, (uint64_t)&v51);
        }
        unsigned int v31 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v51);
        unint64_t v32 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v32 && gBreakOnError)
        {
          __int128 v46 = 3LL;
          int v47 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v21 & 2) == 0) {
            goto LABEL_38;
          }
          __int128 v46 = 2LL;
          int v47 = 134LL;
        }

        breakpoint_break((uint64_t)&v51, (volatile int *)v47, v46, v32, v9);
LABEL_38:
        float v33 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v31) defaultFbufStream];
        uint64_t v34 = (unsigned int *)((char *)v33 + 56);
        do
          unint64_t v35 = __ldaxr(v34);
        while (__stlxr(1u, v34));
        if (v35 == 1)
        {
          do
          {
            while (*v34 == 1)
              ;
            do
              unint64_t v36 = __ldaxr(v34);
            while (__stlxr(1u, v34));
          }

          while (v36 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v33, (GPUTools::FB::Fbuf *)&v51, *(unsigned int *)v51, 1);
        atomic_store(0, v34);
        do
        {
          unsigned int v37 = __ldaxr(v10);
          unsigned int v38 = v37 - 1;
        }

        while (__stlxr(v38, v10));
        if (gCheckGLErrors) {
          unsigned int v39 = v38 < 1;
        }
        else {
          unsigned int v39 = 1;
        }
        if (!v39) {
          handle_opengl_thread_conflict((const void **)v9);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    signed int v40 = __ldaxr(v10);
  while (__stlxr(v40 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 504LL))(a1, a2);
LABEL_51:
  if (v51) {
    free(v51);
  }
}

        unint64_t v27 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v22), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v27) {
          unint64_t v27 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v51, v28);
        }
        float v30 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
        if ((_DWORD)v30) {
          unint64_t v27 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v51, v30, v29);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v9, (uint64_t)&v51);
        }
        unsigned int v31 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v51);
        unint64_t v32 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v32 && gBreakOnError)
        {
          __int128 v46 = 3LL;
          int v47 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v21 & 2) == 0) {
            goto LABEL_38;
          }
          __int128 v46 = 2LL;
          int v47 = 135LL;
        }

        breakpoint_break((uint64_t)&v51, (volatile int *)v47, v46, v32, v9);
LABEL_38:
        float v33 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v31) defaultFbufStream];
        uint64_t v34 = (unsigned int *)((char *)v33 + 56);
        do
          unint64_t v35 = __ldaxr(v34);
        while (__stlxr(1u, v34));
        if (v35 == 1)
        {
          do
          {
            while (*v34 == 1)
              ;
            do
              unint64_t v36 = __ldaxr(v34);
            while (__stlxr(1u, v34));
          }

          while (v36 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v33, (GPUTools::FB::Fbuf *)&v51, *(unsigned int *)v51, 1);
        atomic_store(0, v34);
        do
        {
          unsigned int v37 = __ldaxr(v10);
          unsigned int v38 = v37 - 1;
        }

        while (__stlxr(v38, v10));
        if (gCheckGLErrors) {
          unsigned int v39 = v38 < 1;
        }
        else {
          unsigned int v39 = 1;
        }
        if (!v39) {
          handle_opengl_thread_conflict((const void **)v9);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    signed int v40 = __ldaxr(v10);
  while (__stlxr(v40 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 512LL))(a1, a2);
LABEL_51:
  if (v51) {
    free(v51);
  }
}

        unint64_t v27 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v22), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v27) {
          unint64_t v27 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v51, v28);
        }
        float v30 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
        if ((_DWORD)v30) {
          unint64_t v27 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v51, v30, v29);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v9, (uint64_t)&v51);
        }
        unsigned int v31 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v51);
        unint64_t v32 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v32 && gBreakOnError)
        {
          __int128 v46 = 3LL;
          int v47 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v21 & 2) == 0) {
            goto LABEL_38;
          }
          __int128 v46 = 2LL;
          int v47 = 151LL;
        }

        breakpoint_break((uint64_t)&v51, (volatile int *)v47, v46, v32, v9);
LABEL_38:
        float v33 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v31) defaultFbufStream];
        uint64_t v34 = (unsigned int *)((char *)v33 + 56);
        do
          unint64_t v35 = __ldaxr(v34);
        while (__stlxr(1u, v34));
        if (v35 == 1)
        {
          do
          {
            while (*v34 == 1)
              ;
            do
              unint64_t v36 = __ldaxr(v34);
            while (__stlxr(1u, v34));
          }

          while (v36 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v33, (GPUTools::FB::Fbuf *)&v51, *(unsigned int *)v51, 1);
        atomic_store(0, v34);
        do
        {
          unsigned int v37 = __ldaxr(v10);
          unsigned int v38 = v37 - 1;
        }

        while (__stlxr(v38, v10));
        if (gCheckGLErrors) {
          unsigned int v39 = v38 < 1;
        }
        else {
          unsigned int v39 = 1;
        }
        if (!v39) {
          handle_opengl_thread_conflict((const void **)v9);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    signed int v40 = __ldaxr(v10);
  while (__stlxr(v40 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 576LL))(a1, a2);
LABEL_51:
  if (v51) {
    free(v51);
  }
}

        unint64_t v27 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v22), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v27) {
          unint64_t v27 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v51, v28);
        }
        float v30 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
        if ((_DWORD)v30) {
          unint64_t v27 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v51, v30, v29);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v9, (uint64_t)&v51);
        }
        unsigned int v31 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v51);
        unint64_t v32 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v32 && gBreakOnError)
        {
          __int128 v46 = 3LL;
          int v47 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v21 & 2) == 0) {
            goto LABEL_38;
          }
          __int128 v46 = 2LL;
          int v47 = 152LL;
        }

        breakpoint_break((uint64_t)&v51, (volatile int *)v47, v46, v32, v9);
LABEL_38:
        float v33 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v31) defaultFbufStream];
        uint64_t v34 = (unsigned int *)((char *)v33 + 56);
        do
          unint64_t v35 = __ldaxr(v34);
        while (__stlxr(1u, v34));
        if (v35 == 1)
        {
          do
          {
            while (*v34 == 1)
              ;
            do
              unint64_t v36 = __ldaxr(v34);
            while (__stlxr(1u, v34));
          }

          while (v36 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v33, (GPUTools::FB::Fbuf *)&v51, *(unsigned int *)v51, 1);
        atomic_store(0, v34);
        do
        {
          unsigned int v37 = __ldaxr(v10);
          unsigned int v38 = v37 - 1;
        }

        while (__stlxr(v38, v10));
        if (gCheckGLErrors) {
          unsigned int v39 = v38 < 1;
        }
        else {
          unsigned int v39 = 1;
        }
        if (!v39) {
          handle_opengl_thread_conflict((const void **)v9);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    signed int v40 = __ldaxr(v10);
  while (__stlxr(v40 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 584LL))(a1, a2);
LABEL_51:
  if (v51) {
    free(v51);
  }
}

        uint64_t v25 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v20), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v25) {
          uint64_t v25 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v49, v26);
        }
        unint64_t v28 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v7 + 3404);
        if ((_DWORD)v28) {
          uint64_t v25 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v49, v28, v27);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v25), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v7, (uint64_t)&v49);
        }
        id v29 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v7 + 3480),  (GPUTools::FB::Fbuf *)(v7 + 3520),  (GPUTools::FB *)&v49);
        float v30 = *(unsigned int *)(v7 + 3404);
        if ((_DWORD)v30 && gBreakOnError)
        {
          id v44 = 3LL;
          unsigned int v45 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v19 & 2) == 0) {
            goto LABEL_38;
          }
          id v44 = 2LL;
          unsigned int v45 = 175LL;
        }

        breakpoint_break((uint64_t)&v49, (volatile int *)v45, v44, v30, v7);
LABEL_38:
        unsigned int v31 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v29) defaultFbufStream];
        unint64_t v32 = (unsigned int *)((char *)v31 + 56);
        do
          float v33 = __ldaxr(v32);
        while (__stlxr(1u, v32));
        if (v33 == 1)
        {
          do
          {
            while (*v32 == 1)
              ;
            do
              uint64_t v34 = __ldaxr(v32);
            while (__stlxr(1u, v32));
          }

          while (v34 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v31, (GPUTools::FB::Fbuf *)&v49, *(unsigned int *)v49, 1);
        atomic_store(0, v32);
        do
        {
          unint64_t v35 = __ldaxr(v8);
          unint64_t v36 = v35 - 1;
        }

        while (__stlxr(v36, v8));
        if (gCheckGLErrors) {
          unsigned int v37 = v36 < 1;
        }
        else {
          unsigned int v37 = 1;
        }
        if (!v37) {
          handle_opengl_thread_conflict((const void **)v7);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v14, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    unsigned int v38 = __ldaxr(v8);
  while (__stlxr(v38 - 1, v8));
  [(id)DYGetGLGuestAppClient(v12) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *))(*(void *)(v7 + 24) + 712LL))(a1);
LABEL_51:
  if (v49) {
    free(v49);
  }
}

        uint64_t v25 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v20), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v25) {
          uint64_t v25 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v49, v26);
        }
        unint64_t v28 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v7 + 3404);
        if ((_DWORD)v28) {
          uint64_t v25 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v49, v28, v27);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v25), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v7, (uint64_t)&v49);
        }
        id v29 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v7 + 3480),  (GPUTools::FB::Fbuf *)(v7 + 3520),  (GPUTools::FB *)&v49);
        float v30 = *(unsigned int *)(v7 + 3404);
        if ((_DWORD)v30 && gBreakOnError)
        {
          id v44 = 3LL;
          unsigned int v45 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v19 & 2) == 0) {
            goto LABEL_38;
          }
          id v44 = 2LL;
          unsigned int v45 = 179LL;
        }

        breakpoint_break((uint64_t)&v49, (volatile int *)v45, v44, v30, v7);
LABEL_38:
        unsigned int v31 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v29) defaultFbufStream];
        unint64_t v32 = (unsigned int *)((char *)v31 + 56);
        do
          float v33 = __ldaxr(v32);
        while (__stlxr(1u, v32));
        if (v33 == 1)
        {
          do
          {
            while (*v32 == 1)
              ;
            do
              uint64_t v34 = __ldaxr(v32);
            while (__stlxr(1u, v32));
          }

          while (v34 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v31, (GPUTools::FB::Fbuf *)&v49, *(unsigned int *)v49, 1);
        atomic_store(0, v32);
        do
        {
          unint64_t v35 = __ldaxr(v8);
          unint64_t v36 = v35 - 1;
        }

        while (__stlxr(v36, v8));
        if (gCheckGLErrors) {
          unsigned int v37 = v36 < 1;
        }
        else {
          unsigned int v37 = 1;
        }
        if (!v37) {
          handle_opengl_thread_conflict((const void **)v7);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v14, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    unsigned int v38 = __ldaxr(v8);
  while (__stlxr(v38 - 1, v8));
  [(id)DYGetGLGuestAppClient(v12) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *))(*(void *)(v7 + 24) + 720LL))(a1);
LABEL_51:
  if (v49) {
    free(v49);
  }
}

        unint64_t v27 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v22), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v27) {
          unint64_t v27 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v51, v28);
        }
        float v30 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
        if ((_DWORD)v30) {
          unint64_t v27 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v51, v30, v29);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v9, (uint64_t)&v51);
        }
        unsigned int v31 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v51);
        unint64_t v32 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v32 && gBreakOnError)
        {
          __int128 v46 = 3LL;
          int v47 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v21 & 2) == 0) {
            goto LABEL_38;
          }
          __int128 v46 = 2LL;
          int v47 = 199LL;
        }

        breakpoint_break((uint64_t)&v51, (volatile int *)v47, v46, v32, v9);
LABEL_38:
        float v33 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v31) defaultFbufStream];
        uint64_t v34 = (unsigned int *)((char *)v33 + 56);
        do
          unint64_t v35 = __ldaxr(v34);
        while (__stlxr(1u, v34));
        if (v35 == 1)
        {
          do
          {
            while (*v34 == 1)
              ;
            do
              unint64_t v36 = __ldaxr(v34);
            while (__stlxr(1u, v34));
          }

          while (v36 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v33, (GPUTools::FB::Fbuf *)&v51, *(unsigned int *)v51, 1);
        atomic_store(0, v34);
        do
        {
          unsigned int v37 = __ldaxr(v10);
          unsigned int v38 = v37 - 1;
        }

        while (__stlxr(v38, v10));
        if (gCheckGLErrors) {
          unsigned int v39 = v38 < 1;
        }
        else {
          unsigned int v39 = 1;
        }
        if (!v39) {
          handle_opengl_thread_conflict((const void **)v9);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    signed int v40 = __ldaxr(v10);
  while (__stlxr(v40 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 760LL))(a1, a2);
LABEL_51:
  if (v51) {
    free(v51);
  }
}

        unint64_t v35 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v30), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v35) {
          unint64_t v35 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v59, v36);
        }
        unsigned int v38 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v17 + 3404);
        if ((_DWORD)v38) {
          unint64_t v35 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v59, v38, v37);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v35), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v17, (uint64_t)&v59);
        }
        unsigned int v39 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v17 + 3480),  (GPUTools::FB::Fbuf *)(v17 + 3520),  (GPUTools::FB *)&v59);
        signed int v40 = *(unsigned int *)(v17 + 3404);
        if ((_DWORD)v40 && gBreakOnError)
        {
          uint64_t v54 = 3LL;
          unsigned int v55 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v29 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v54 = 2LL;
          unsigned int v55 = 288LL;
        }

        breakpoint_break((uint64_t)&v59, (volatile int *)v55, v54, v40, v17);
LABEL_38:
        BOOL v41 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v39) defaultFbufStream];
        unsigned int v42 = (unsigned int *)((char *)v41 + 56);
        do
          uint64_t v43 = __ldaxr(v42);
        while (__stlxr(1u, v42));
        if (v43 == 1)
        {
          do
          {
            while (*v42 == 1)
              ;
            do
              id v44 = __ldaxr(v42);
            while (__stlxr(1u, v42));
          }

          while (v44 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v41, (GPUTools::FB::Fbuf *)&v59, *(unsigned int *)v59, 1);
        atomic_store(0, v42);
        do
        {
          unsigned int v45 = __ldaxr(v18);
          __int128 v46 = v45 - 1;
        }

        while (__stlxr(v46, v18));
        if (gCheckGLErrors) {
          int v47 = v46 < 1;
        }
        else {
          int v47 = 1;
        }
        if (!v47) {
          handle_opengl_thread_conflict((const void **)v17);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v24, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    uint64_t v48 = __ldaxr(v18);
  while (__stlxr(v48 - 1, v18));
  [(id)DYGetGLGuestAppClient(v22) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t, void *))(*(void *)(v17 + 24) + 984LL))( a1,  a2,  a3,  a4,  a5,  a6);
LABEL_51:
  if (v59) {
    free(v59);
  }
}

        float v33 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v33) {
          float v33 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v57, v34);
        }
        unint64_t v36 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v15 + 3404);
        if ((_DWORD)v36) {
          float v33 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v57, v36, v35);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v15, (uint64_t)&v57);
        }
        unsigned int v37 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v15 + 3480),  (GPUTools::FB::Fbuf *)(v15 + 3520),  (GPUTools::FB *)&v57);
        unsigned int v38 = *(unsigned int *)(v15 + 3404);
        if ((_DWORD)v38 && gBreakOnError)
        {
          __uint64_t v52 = 3LL;
          char v53 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v27 & 2) == 0) {
            goto LABEL_38;
          }
          __uint64_t v52 = 2LL;
          char v53 = 290LL;
        }

        breakpoint_break((uint64_t)&v57, (volatile int *)v53, v52, v38, v15);
LABEL_38:
        unsigned int v39 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v37) defaultFbufStream];
        signed int v40 = (unsigned int *)((char *)v39 + 56);
        do
          BOOL v41 = __ldaxr(v40);
        while (__stlxr(1u, v40));
        if (v41 == 1)
        {
          do
          {
            while (*v40 == 1)
              ;
            do
              unsigned int v42 = __ldaxr(v40);
            while (__stlxr(1u, v40));
          }

          while (v42 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v39, (GPUTools::FB::Fbuf *)&v57, *(unsigned int *)v57, 1);
        atomic_store(0, v40);
        do
        {
          uint64_t v43 = __ldaxr(v16);
          id v44 = v43 - 1;
        }

        while (__stlxr(v44, v16));
        if (gCheckGLErrors) {
          unsigned int v45 = v44 < 1;
        }
        else {
          unsigned int v45 = 1;
        }
        if (!v45) {
          handle_opengl_thread_conflict((const void **)v15);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v22, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    __int128 v46 = __ldaxr(v16);
  while (__stlxr(v46 - 1, v16));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, int *))(*(void *)(v15 + 24) + 1000LL))( a1,  a2,  a3,  a4,  a5);
LABEL_51:
  if (v57) {
    free(v57);
  }
}

        id v29 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v24), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v29) {
          id v29 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v53, v30);
        }
        unint64_t v32 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
        if ((_DWORD)v32) {
          id v29 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v53, v32, v31);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v11, (uint64_t)&v53);
        }
        float v33 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v53);
        uint64_t v34 = *(unsigned int *)(v11 + 3404);
        if ((_DWORD)v34 && gBreakOnError)
        {
          uint64_t v48 = 3LL;
          uint64_t v49 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v23 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v48 = 2LL;
          uint64_t v49 = 309LL;
        }

        breakpoint_break((uint64_t)&v53, (volatile int *)v49, v48, v34, v11);
LABEL_38:
        unint64_t v35 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v33) defaultFbufStream];
        unint64_t v36 = (unsigned int *)((char *)v35 + 56);
        do
          unsigned int v37 = __ldaxr(v36);
        while (__stlxr(1u, v36));
        if (v37 == 1)
        {
          do
          {
            while (*v36 == 1)
              ;
            do
              unsigned int v38 = __ldaxr(v36);
            while (__stlxr(1u, v36));
          }

          while (v38 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v35, (GPUTools::FB::Fbuf *)&v53, *(unsigned int *)v53, 1);
        atomic_store(0, v36);
        do
        {
          unsigned int v39 = __ldaxr(v12);
          signed int v40 = v39 - 1;
        }

        while (__stlxr(v40, v12));
        if (gCheckGLErrors) {
          BOOL v41 = v40 < 1;
        }
        else {
          BOOL v41 = 1;
        }
        if (!v41) {
          handle_opengl_thread_conflict((const void **)v11);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v18, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    unsigned int v42 = __ldaxr(v12);
  while (__stlxr(v42 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t))(*(void *)(v11 + 24) + 1024LL))(a1, a2, a3);
LABEL_51:
  if (v53) {
    free(v53);
  }
}

        unsigned int v31 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v26), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v31) {
          unsigned int v31 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v55, v32);
        }
        uint64_t v34 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
        if ((_DWORD)v34) {
          unsigned int v31 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v55, v34, v33);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v31), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v13, (uint64_t)&v55);
        }
        unint64_t v35 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)&v55);
        unint64_t v36 = *(unsigned int *)(v13 + 3404);
        if ((_DWORD)v36 && gBreakOnError)
        {
          uint64_t v50 = 3LL;
          __int128 v51 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v25 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v50 = 2LL;
          __int128 v51 = 343LL;
        }

        breakpoint_break((uint64_t)&v55, (volatile int *)v51, v50, v36, v13);
LABEL_38:
        unsigned int v37 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v35) defaultFbufStream];
        unsigned int v38 = (unsigned int *)((char *)v37 + 56);
        do
          unsigned int v39 = __ldaxr(v38);
        while (__stlxr(1u, v38));
        if (v39 == 1)
        {
          do
          {
            while (*v38 == 1)
              ;
            do
              signed int v40 = __ldaxr(v38);
            while (__stlxr(1u, v38));
          }

          while (v40 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v37, (GPUTools::FB::Fbuf *)&v55, *(unsigned int *)v55, 1);
        atomic_store(0, v38);
        do
        {
          BOOL v41 = __ldaxr(v14);
          unsigned int v42 = v41 - 1;
        }

        while (__stlxr(v42, v14));
        if (gCheckGLErrors) {
          uint64_t v43 = v42 < 1;
        }
        else {
          uint64_t v43 = 1;
        }
        if (!v43) {
          handle_opengl_thread_conflict((const void **)v13);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v20, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    id v44 = __ldaxr(v14);
  while (__stlxr(v44 - 1, v14));
  [(id)DYGetGLGuestAppClient(v18) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, float))(*(void *)(v13 + 24) + 1200LL))(a1, a2, a3, a4);
LABEL_51:
  if (v55) {
    free(v55);
  }
}

        unint64_t v27 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v22), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v27) {
          unint64_t v27 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v51, v28);
        }
        float v30 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
        if ((_DWORD)v30) {
          unint64_t v27 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v51, v30, v29);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v9, (uint64_t)&v51);
        }
        unsigned int v31 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v51);
        unint64_t v32 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v32 && gBreakOnError)
        {
          __int128 v46 = 3LL;
          int v47 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v21 & 2) == 0) {
            goto LABEL_38;
          }
          __int128 v46 = 2LL;
          int v47 = 348LL;
        }

        breakpoint_break((uint64_t)&v51, (volatile int *)v47, v46, v32, v9);
LABEL_38:
        float v33 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v31) defaultFbufStream];
        uint64_t v34 = (unsigned int *)((char *)v33 + 56);
        do
          unint64_t v35 = __ldaxr(v34);
        while (__stlxr(1u, v34));
        if (v35 == 1)
        {
          do
          {
            while (*v34 == 1)
              ;
            do
              unint64_t v36 = __ldaxr(v34);
            while (__stlxr(1u, v34));
          }

          while (v36 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v33, (GPUTools::FB::Fbuf *)&v51, *(unsigned int *)v51, 1);
        atomic_store(0, v34);
        do
        {
          unsigned int v37 = __ldaxr(v10);
          unsigned int v38 = v37 - 1;
        }

        while (__stlxr(v38, v10));
        if (gCheckGLErrors) {
          unsigned int v39 = v38 < 1;
        }
        else {
          unsigned int v39 = 1;
        }
        if (!v39) {
          handle_opengl_thread_conflict((const void **)v9);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    signed int v40 = __ldaxr(v10);
  while (__stlxr(v40 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, float))(*(void *)(v9 + 24) + 1240LL))(a1, a2);
LABEL_51:
  if (v51) {
    free(v51);
  }
}

        uint64_t v25 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v20), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v25) {
          uint64_t v25 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v49, v26);
        }
        unint64_t v28 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v7 + 3404);
        if ((_DWORD)v28) {
          uint64_t v25 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v49, v28, v27);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v25), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v7, (uint64_t)&v49);
        }
        id v29 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v7 + 3480),  (GPUTools::FB::Fbuf *)(v7 + 3520),  (GPUTools::FB *)&v49);
        float v30 = *(unsigned int *)(v7 + 3404);
        if ((_DWORD)v30 && gBreakOnError)
        {
          id v44 = 3LL;
          unsigned int v45 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v19 & 2) == 0) {
            goto LABEL_38;
          }
          id v44 = 2LL;
          unsigned int v45 = 351LL;
        }

        breakpoint_break((uint64_t)&v49, (volatile int *)v45, v44, v30, v7);
LABEL_38:
        unsigned int v31 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v29) defaultFbufStream];
        unint64_t v32 = (unsigned int *)((char *)v31 + 56);
        do
          float v33 = __ldaxr(v32);
        while (__stlxr(1u, v32));
        if (v33 == 1)
        {
          do
          {
            while (*v32 == 1)
              ;
            do
              uint64_t v34 = __ldaxr(v32);
            while (__stlxr(1u, v32));
          }

          while (v34 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v31, (GPUTools::FB::Fbuf *)&v49, *(unsigned int *)v49, 1);
        atomic_store(0, v32);
        do
        {
          unint64_t v35 = __ldaxr(v8);
          unint64_t v36 = v35 - 1;
        }

        while (__stlxr(v36, v8));
        if (gCheckGLErrors) {
          unsigned int v37 = v36 < 1;
        }
        else {
          unsigned int v37 = 1;
        }
        if (!v37) {
          handle_opengl_thread_conflict((const void **)v7);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v14, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    unsigned int v38 = __ldaxr(v8);
  while (__stlxr(v38 - 1, v8));
  [(id)DYGetGLGuestAppClient(v12) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *))(*(void *)(v7 + 24) + 1256LL))(a1);
LABEL_51:
  if (v49) {
    free(v49);
  }
}

        float v30 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v25), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v30) {
          float v30 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v54, v31);
        }
        float v33 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
        if ((_DWORD)v33) {
          float v30 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v54, v33, v32);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v30), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v9, (uint64_t)&v54);
        }
        uint64_t v34 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v54);
        unint64_t v35 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v35 && gBreakOnError)
        {
          uint64_t v49 = 3LL;
          uint64_t v50 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v24 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v49 = 2LL;
          uint64_t v50 = 353LL;
        }

        breakpoint_break((uint64_t)&v54, (volatile int *)v50, v49, v35, v9);
LABEL_38:
        unint64_t v36 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v34) defaultFbufStream];
        unsigned int v37 = (unsigned int *)((char *)v36 + 56);
        do
          unsigned int v38 = __ldaxr(v37);
        while (__stlxr(1u, v37));
        if (v38 == 1)
        {
          do
          {
            while (*v37 == 1)
              ;
            do
              unsigned int v39 = __ldaxr(v37);
            while (__stlxr(1u, v37));
          }

          while (v39 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v36, (GPUTools::FB::Fbuf *)&v54, *(unsigned int *)v54, 1);
        atomic_store(0, v37);
        do
        {
          signed int v40 = __ldaxr(v10);
          BOOL v41 = v40 - 1;
        }

        while (__stlxr(v41, v10));
        if (gCheckGLErrors) {
          unsigned int v42 = v41 < 1;
        }
        else {
          unsigned int v42 = 1;
        }
        if (!v42) {
          handle_opengl_thread_conflict((const void **)v9);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    uint64_t v43 = __ldaxr(v10);
  while (__stlxr(v43 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, const float *))(*(void *)(v9 + 24) + 1272LL))(a1, a2);
LABEL_51:
  if (v54) {
    free(v54);
  }
}

        unint64_t v27 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v22), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v27) {
          unint64_t v27 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v51, v28);
        }
        float v30 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
        if ((_DWORD)v30) {
          unint64_t v27 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v51, v30, v29);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v9, (uint64_t)&v51);
        }
        unsigned int v31 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v51);
        unint64_t v32 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v32 && gBreakOnError)
        {
          __int128 v46 = 3LL;
          int v47 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v21 & 2) == 0) {
            goto LABEL_38;
          }
          __int128 v46 = 2LL;
          int v47 = 358LL;
        }

        breakpoint_break((uint64_t)&v51, (volatile int *)v47, v46, v32, v9);
LABEL_38:
        float v33 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v31) defaultFbufStream];
        uint64_t v34 = (unsigned int *)((char *)v33 + 56);
        do
          unint64_t v35 = __ldaxr(v34);
        while (__stlxr(1u, v34));
        if (v35 == 1)
        {
          do
          {
            while (*v34 == 1)
              ;
            do
              unint64_t v36 = __ldaxr(v34);
            while (__stlxr(1u, v34));
          }

          while (v36 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v33, (GPUTools::FB::Fbuf *)&v51, *(unsigned int *)v51, 1);
        atomic_store(0, v34);
        do
        {
          unsigned int v37 = __ldaxr(v10);
          unsigned int v38 = v37 - 1;
        }

        while (__stlxr(v38, v10));
        if (gCheckGLErrors) {
          unsigned int v39 = v38 < 1;
        }
        else {
          unsigned int v39 = 1;
        }
        if (!v39) {
          handle_opengl_thread_conflict((const void **)v9);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    signed int v40 = __ldaxr(v10);
  while (__stlxr(v40 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 1288LL))(a1, a2);
LABEL_51:
  if (v51) {
    free(v51);
  }
}

        unsigned int v31 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v26), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v31) {
          unsigned int v31 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v55, v32);
        }
        uint64_t v34 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
        if ((_DWORD)v34) {
          unsigned int v31 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v55, v34, v33);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v31), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v13, (uint64_t)&v55);
        }
        unint64_t v35 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)&v55);
        unint64_t v36 = *(unsigned int *)(v13 + 3404);
        if ((_DWORD)v36 && gBreakOnError)
        {
          uint64_t v50 = 3LL;
          __int128 v51 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v25 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v50 = 2LL;
          __int128 v51 = 372LL;
        }

        breakpoint_break((uint64_t)&v55, (volatile int *)v51, v50, v36, v13);
LABEL_38:
        unsigned int v37 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v35) defaultFbufStream];
        unsigned int v38 = (unsigned int *)((char *)v37 + 56);
        do
          unsigned int v39 = __ldaxr(v38);
        while (__stlxr(1u, v38));
        if (v39 == 1)
        {
          do
          {
            while (*v38 == 1)
              ;
            do
              signed int v40 = __ldaxr(v38);
            while (__stlxr(1u, v38));
          }

          while (v40 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v37, (GPUTools::FB::Fbuf *)&v55, *(unsigned int *)v55, 1);
        atomic_store(0, v38);
        do
        {
          BOOL v41 = __ldaxr(v14);
          unsigned int v42 = v41 - 1;
        }

        while (__stlxr(v42, v14));
        if (gCheckGLErrors) {
          uint64_t v43 = v42 < 1;
        }
        else {
          uint64_t v43 = 1;
        }
        if (!v43) {
          handle_opengl_thread_conflict((const void **)v13);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v20, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    id v44 = __ldaxr(v14);
  while (__stlxr(v44 - 1, v14));
  [(id)DYGetGLGuestAppClient(v18) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, float))(*(void *)(v13 + 24) + 1360LL))(a1, a2, a3, a4);
LABEL_51:
  if (v55) {
    free(v55);
  }
}

        unint64_t v27 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v22), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v27) {
          unint64_t v27 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v51, v28);
        }
        float v30 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
        if ((_DWORD)v30) {
          unint64_t v27 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v51, v30, v29);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v9, (uint64_t)&v51);
        }
        unsigned int v31 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v51);
        unint64_t v32 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v32 && gBreakOnError)
        {
          __int128 v46 = 3LL;
          int v47 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v21 & 2) == 0) {
            goto LABEL_38;
          }
          __int128 v46 = 2LL;
          int v47 = 376LL;
        }

        breakpoint_break((uint64_t)&v51, (volatile int *)v47, v46, v32, v9);
LABEL_38:
        float v33 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v31) defaultFbufStream];
        uint64_t v34 = (unsigned int *)((char *)v33 + 56);
        do
          unint64_t v35 = __ldaxr(v34);
        while (__stlxr(1u, v34));
        if (v35 == 1)
        {
          do
          {
            while (*v34 == 1)
              ;
            do
              unint64_t v36 = __ldaxr(v34);
            while (__stlxr(1u, v34));
          }

          while (v36 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v33, (GPUTools::FB::Fbuf *)&v51, *(unsigned int *)v51, 1);
        atomic_store(0, v34);
        do
        {
          unsigned int v37 = __ldaxr(v10);
          unsigned int v38 = v37 - 1;
        }

        while (__stlxr(v38, v10));
        if (gCheckGLErrors) {
          unsigned int v39 = v38 < 1;
        }
        else {
          unsigned int v39 = 1;
        }
        if (!v39) {
          handle_opengl_thread_conflict((const void **)v9);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    signed int v40 = __ldaxr(v10);
  while (__stlxr(v40 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 1392LL))(a1, a2);
LABEL_51:
  if (v51) {
    free(v51);
  }
}

        float v30 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v25), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v30) {
          float v30 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v54, v31);
        }
        float v33 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
        if ((_DWORD)v33) {
          float v30 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v54, v33, v32);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v30), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v9, (uint64_t)&v54);
        }
        uint64_t v34 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v54);
        unint64_t v35 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v35 && gBreakOnError)
        {
          uint64_t v49 = 3LL;
          uint64_t v50 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v24 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v49 = 2LL;
          uint64_t v50 = 379LL;
        }

        breakpoint_break((uint64_t)&v54, (volatile int *)v50, v49, v35, v9);
LABEL_38:
        unint64_t v36 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v34) defaultFbufStream];
        unsigned int v37 = (unsigned int *)((char *)v36 + 56);
        do
          unsigned int v38 = __ldaxr(v37);
        while (__stlxr(1u, v37));
        if (v38 == 1)
        {
          do
          {
            while (*v37 == 1)
              ;
            do
              unsigned int v39 = __ldaxr(v37);
            while (__stlxr(1u, v37));
          }

          while (v39 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v36, (GPUTools::FB::Fbuf *)&v54, *(unsigned int *)v54, 1);
        atomic_store(0, v37);
        do
        {
          signed int v40 = __ldaxr(v10);
          BOOL v41 = v40 - 1;
        }

        while (__stlxr(v41, v10));
        if (gCheckGLErrors) {
          unsigned int v42 = v41 < 1;
        }
        else {
          unsigned int v42 = 1;
        }
        if (!v42) {
          handle_opengl_thread_conflict((const void **)v9);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    uint64_t v43 = __ldaxr(v10);
  while (__stlxr(v43 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, const float *))(*(void *)(v9 + 24) + 1408LL))(a1, a2);
LABEL_51:
  if (v54) {
    free(v54);
  }
}

        unsigned int v31 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v26), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v31) {
          unsigned int v31 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v55, v32);
        }
        uint64_t v34 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
        if ((_DWORD)v34) {
          unsigned int v31 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v55, v34, v33);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v31), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v13, (uint64_t)&v55);
        }
        unint64_t v35 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)&v55);
        unint64_t v36 = *(unsigned int *)(v13 + 3404);
        if ((_DWORD)v36 && gBreakOnError)
        {
          uint64_t v50 = 3LL;
          __int128 v51 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v25 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v50 = 2LL;
          __int128 v51 = 423LL;
        }

        breakpoint_break((uint64_t)&v55, (volatile int *)v51, v50, v36, v13);
LABEL_38:
        unsigned int v37 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v35) defaultFbufStream];
        unsigned int v38 = (unsigned int *)((char *)v37 + 56);
        do
          unsigned int v39 = __ldaxr(v38);
        while (__stlxr(1u, v38));
        if (v39 == 1)
        {
          do
          {
            while (*v38 == 1)
              ;
            do
              signed int v40 = __ldaxr(v38);
            while (__stlxr(1u, v38));
          }

          while (v40 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v37, (GPUTools::FB::Fbuf *)&v55, *(unsigned int *)v55, 1);
        atomic_store(0, v38);
        do
        {
          BOOL v41 = __ldaxr(v14);
          unsigned int v42 = v41 - 1;
        }

        while (__stlxr(v42, v14));
        if (gCheckGLErrors) {
          uint64_t v43 = v42 < 1;
        }
        else {
          uint64_t v43 = 1;
        }
        if (!v43) {
          handle_opengl_thread_conflict((const void **)v13);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v20, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    id v44 = __ldaxr(v14);
  while (__stlxr(v44 - 1, v14));
  [(id)DYGetGLGuestAppClient(v18) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, float, float, float))(*(void *)(v13 + 24) + 1456LL))(a1, a2, a3, a4);
LABEL_51:
  if (v55) {
    free(v55);
  }
}

        id v29 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v24), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v29) {
          id v29 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v53, v30);
        }
        unint64_t v32 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
        if ((_DWORD)v32) {
          id v29 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v53, v32, v31);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v11, (uint64_t)&v53);
        }
        float v33 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v53);
        uint64_t v34 = *(unsigned int *)(v11 + 3404);
        if ((_DWORD)v34 && gBreakOnError)
        {
          uint64_t v48 = 3LL;
          uint64_t v49 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v23 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v48 = 2LL;
          uint64_t v49 = 438LL;
        }

        breakpoint_break((uint64_t)&v53, (volatile int *)v49, v48, v34, v11);
LABEL_38:
        unint64_t v35 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v33) defaultFbufStream];
        unint64_t v36 = (unsigned int *)((char *)v35 + 56);
        do
          unsigned int v37 = __ldaxr(v36);
        while (__stlxr(1u, v36));
        if (v37 == 1)
        {
          do
          {
            while (*v36 == 1)
              ;
            do
              unsigned int v38 = __ldaxr(v36);
            while (__stlxr(1u, v36));
          }

          while (v38 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v35, (GPUTools::FB::Fbuf *)&v53, *(unsigned int *)v53, 1);
        atomic_store(0, v36);
        do
        {
          unsigned int v39 = __ldaxr(v12);
          signed int v40 = v39 - 1;
        }

        while (__stlxr(v40, v12));
        if (gCheckGLErrors) {
          BOOL v41 = v40 < 1;
        }
        else {
          BOOL v41 = 1;
        }
        if (!v41) {
          handle_opengl_thread_conflict((const void **)v11);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v18, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    unsigned int v42 = __ldaxr(v12);
  while (__stlxr(v42 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t))(*(void *)(v11 + 24) + 1560LL))(a1, a2, a3);
LABEL_51:
  if (v53) {
    free(v53);
  }
}

        unint64_t v27 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v22), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v27) {
          unint64_t v27 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v51, v28);
        }
        float v30 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
        if ((_DWORD)v30) {
          unint64_t v27 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v51, v30, v29);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v9, (uint64_t)&v51);
        }
        unsigned int v31 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v51);
        unint64_t v32 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v32 && gBreakOnError)
        {
          __int128 v46 = 3LL;
          int v47 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v21 & 2) == 0) {
            goto LABEL_38;
          }
          __int128 v46 = 2LL;
          int v47 = 448LL;
        }

        breakpoint_break((uint64_t)&v51, (volatile int *)v47, v46, v32, v9);
LABEL_38:
        float v33 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v31) defaultFbufStream];
        uint64_t v34 = (unsigned int *)((char *)v33 + 56);
        do
          unint64_t v35 = __ldaxr(v34);
        while (__stlxr(1u, v34));
        if (v35 == 1)
        {
          do
          {
            while (*v34 == 1)
              ;
            do
              unint64_t v36 = __ldaxr(v34);
            while (__stlxr(1u, v34));
          }

          while (v36 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v33, (GPUTools::FB::Fbuf *)&v51, *(unsigned int *)v51, 1);
        atomic_store(0, v34);
        do
        {
          unsigned int v37 = __ldaxr(v10);
          unsigned int v38 = v37 - 1;
        }

        while (__stlxr(v38, v10));
        if (gCheckGLErrors) {
          unsigned int v39 = v38 < 1;
        }
        else {
          unsigned int v39 = 1;
        }
        if (!v39) {
          handle_opengl_thread_conflict((const void **)v9);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    signed int v40 = __ldaxr(v10);
  while (__stlxr(v40 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, float))(*(void *)(v9 + 24) + 1592LL))(a1, a2);
LABEL_51:
  if (v51) {
    free(v51);
  }
}

        id v29 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v24), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v29) {
          id v29 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v53, v30);
        }
        unint64_t v32 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
        if ((_DWORD)v32) {
          id v29 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v53, v32, v31);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v11, (uint64_t)&v53);
        }
        float v33 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v53);
        uint64_t v34 = *(unsigned int *)(v11 + 3404);
        if ((_DWORD)v34 && gBreakOnError)
        {
          uint64_t v48 = 3LL;
          uint64_t v49 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v23 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v48 = 2LL;
          uint64_t v49 = 450LL;
        }

        breakpoint_break((uint64_t)&v53, (volatile int *)v49, v48, v34, v11);
LABEL_38:
        unint64_t v35 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v33) defaultFbufStream];
        unint64_t v36 = (unsigned int *)((char *)v35 + 56);
        do
          unsigned int v37 = __ldaxr(v36);
        while (__stlxr(1u, v36));
        if (v37 == 1)
        {
          do
          {
            while (*v36 == 1)
              ;
            do
              unsigned int v38 = __ldaxr(v36);
            while (__stlxr(1u, v36));
          }

          while (v38 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v35, (GPUTools::FB::Fbuf *)&v53, *(unsigned int *)v53, 1);
        atomic_store(0, v36);
        do
        {
          unsigned int v39 = __ldaxr(v12);
          signed int v40 = v39 - 1;
        }

        while (__stlxr(v40, v12));
        if (gCheckGLErrors) {
          BOOL v41 = v40 < 1;
        }
        else {
          BOOL v41 = 1;
        }
        if (!v41) {
          handle_opengl_thread_conflict((const void **)v11);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v18, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    unsigned int v42 = __ldaxr(v12);
  while (__stlxr(v42 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, float, float))(*(void *)(v11 + 24) + 1608LL))(a1, a2, a3);
LABEL_51:
  if (v53) {
    free(v53);
  }
}

        uint64_t v25 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v20), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v25) {
          uint64_t v25 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v49, v26);
        }
        unint64_t v28 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v7 + 3404);
        if ((_DWORD)v28) {
          uint64_t v25 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v49, v28, v27);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v25), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v7, (uint64_t)&v49);
        }
        id v29 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v7 + 3480),  (GPUTools::FB::Fbuf *)(v7 + 3520),  (GPUTools::FB *)&v49);
        float v30 = *(unsigned int *)(v7 + 3404);
        if ((_DWORD)v30 && gBreakOnError)
        {
          id v44 = 3LL;
          unsigned int v45 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v19 & 2) == 0) {
            goto LABEL_38;
          }
          id v44 = 2LL;
          unsigned int v45 = 454LL;
        }

        breakpoint_break((uint64_t)&v49, (volatile int *)v45, v44, v30, v7);
LABEL_38:
        unsigned int v31 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v29) defaultFbufStream];
        unint64_t v32 = (unsigned int *)((char *)v31 + 56);
        do
          float v33 = __ldaxr(v32);
        while (__stlxr(1u, v32));
        if (v33 == 1)
        {
          do
          {
            while (*v32 == 1)
              ;
            do
              uint64_t v34 = __ldaxr(v32);
            while (__stlxr(1u, v32));
          }

          while (v34 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v31, (GPUTools::FB::Fbuf *)&v49, *(unsigned int *)v49, 1);
        atomic_store(0, v32);
        do
        {
          unint64_t v35 = __ldaxr(v8);
          unint64_t v36 = v35 - 1;
        }

        while (__stlxr(v36, v8));
        if (gCheckGLErrors) {
          unsigned int v37 = v36 < 1;
        }
        else {
          unsigned int v37 = 1;
        }
        if (!v37) {
          handle_opengl_thread_conflict((const void **)v7);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v14, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    unsigned int v38 = __ldaxr(v8);
  while (__stlxr(v38 - 1, v8));
  [(id)DYGetGLGuestAppClient(v12) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *))(*(void *)(v7 + 24) + 1640LL))(a1);
LABEL_51:
  if (v49) {
    free(v49);
  }
}

        uint64_t v25 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v20), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v25) {
          uint64_t v25 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v49, v26);
        }
        unint64_t v28 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v7 + 3404);
        if ((_DWORD)v28) {
          uint64_t v25 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v49, v28, v27);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v25), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v7, (uint64_t)&v49);
        }
        id v29 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v7 + 3480),  (GPUTools::FB::Fbuf *)(v7 + 3520),  (GPUTools::FB *)&v49);
        float v30 = *(unsigned int *)(v7 + 3404);
        if ((_DWORD)v30 && gBreakOnError)
        {
          id v44 = 3LL;
          unsigned int v45 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v19 & 2) == 0) {
            goto LABEL_38;
          }
          id v44 = 2LL;
          unsigned int v45 = 471LL;
        }

        breakpoint_break((uint64_t)&v49, (volatile int *)v45, v44, v30, v7);
LABEL_38:
        unsigned int v31 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v29) defaultFbufStream];
        unint64_t v32 = (unsigned int *)((char *)v31 + 56);
        do
          float v33 = __ldaxr(v32);
        while (__stlxr(1u, v32));
        if (v33 == 1)
        {
          do
          {
            while (*v32 == 1)
              ;
            do
              uint64_t v34 = __ldaxr(v32);
            while (__stlxr(1u, v32));
          }

          while (v34 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v31, (GPUTools::FB::Fbuf *)&v49, *(unsigned int *)v49, 1);
        atomic_store(0, v32);
        do
        {
          unint64_t v35 = __ldaxr(v8);
          unint64_t v36 = v35 - 1;
        }

        while (__stlxr(v36, v8));
        if (gCheckGLErrors) {
          unsigned int v37 = v36 < 1;
        }
        else {
          unsigned int v37 = 1;
        }
        if (!v37) {
          handle_opengl_thread_conflict((const void **)v7);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v14, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    unsigned int v38 = __ldaxr(v8);
  while (__stlxr(v38 - 1, v8));
  [(id)DYGetGLGuestAppClient(v12) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *))(*(void *)(v7 + 24) + 1680LL))(a1);
LABEL_51:
  if (v49) {
    free(v49);
  }
}

        unint64_t v27 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v22), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v27) {
          unint64_t v27 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v51, v28);
        }
        float v30 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
        if ((_DWORD)v30) {
          unint64_t v27 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v51, v30, v29);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v9, (uint64_t)&v51);
        }
        unsigned int v31 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v51);
        unint64_t v32 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v32 && gBreakOnError)
        {
          __int128 v46 = 3LL;
          int v47 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v21 & 2) == 0) {
            goto LABEL_38;
          }
          __int128 v46 = 2LL;
          int v47 = 497LL;
        }

        breakpoint_break((uint64_t)&v51, (volatile int *)v47, v46, v32, v9);
LABEL_38:
        float v33 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v31) defaultFbufStream];
        uint64_t v34 = (unsigned int *)((char *)v33 + 56);
        do
          unint64_t v35 = __ldaxr(v34);
        while (__stlxr(1u, v34));
        if (v35 == 1)
        {
          do
          {
            while (*v34 == 1)
              ;
            do
              unint64_t v36 = __ldaxr(v34);
            while (__stlxr(1u, v34));
          }

          while (v36 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v33, (GPUTools::FB::Fbuf *)&v51, *(unsigned int *)v51, 1);
        atomic_store(0, v34);
        do
        {
          unsigned int v37 = __ldaxr(v10);
          unsigned int v38 = v37 - 1;
        }

        while (__stlxr(v38, v10));
        if (gCheckGLErrors) {
          unsigned int v39 = v38 < 1;
        }
        else {
          unsigned int v39 = 1;
        }
        if (!v39) {
          handle_opengl_thread_conflict((const void **)v9);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    signed int v40 = __ldaxr(v10);
  while (__stlxr(v40 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 1888LL))(a1, a2);
LABEL_51:
  if (v51) {
    free(v51);
  }
}

        float v33 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v33) {
          float v33 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v57, v34);
        }
        unint64_t v36 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v15 + 3404);
        if ((_DWORD)v36) {
          float v33 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v57, v36, v35);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v15, (uint64_t)&v57);
        }
        unsigned int v37 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v15 + 3480),  (GPUTools::FB::Fbuf *)(v15 + 3520),  (GPUTools::FB *)&v57);
        unsigned int v38 = *(unsigned int *)(v15 + 3404);
        if ((_DWORD)v38 && gBreakOnError)
        {
          __uint64_t v52 = 3LL;
          char v53 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v27 & 2) == 0) {
            goto LABEL_38;
          }
          __uint64_t v52 = 2LL;
          char v53 = 513LL;
        }

        breakpoint_break((uint64_t)&v57, (volatile int *)v53, v52, v38, v15);
LABEL_38:
        unsigned int v39 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v37) defaultFbufStream];
        signed int v40 = (unsigned int *)((char *)v39 + 56);
        do
          BOOL v41 = __ldaxr(v40);
        while (__stlxr(1u, v40));
        if (v41 == 1)
        {
          do
          {
            while (*v40 == 1)
              ;
            do
              unsigned int v42 = __ldaxr(v40);
            while (__stlxr(1u, v40));
          }

          while (v42 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v39, (GPUTools::FB::Fbuf *)&v57, *(unsigned int *)v57, 1);
        atomic_store(0, v40);
        do
        {
          uint64_t v43 = __ldaxr(v16);
          id v44 = v43 - 1;
        }

        while (__stlxr(v44, v16));
        if (gCheckGLErrors) {
          unsigned int v45 = v44 < 1;
        }
        else {
          unsigned int v45 = 1;
        }
        if (!v45) {
          handle_opengl_thread_conflict((const void **)v15);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v22, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    __int128 v46 = __ldaxr(v16);
  while (__stlxr(v46 - 1, v16));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, float, float, float, float))(*(void *)(v15 + 24) + 1984LL))( a1,  a2,  a3,  a4,  a5);
LABEL_51:
  if (v57) {
    free(v57);
  }
}

        unsigned int v31 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v26), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v31) {
          unsigned int v31 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v55, v32);
        }
        uint64_t v34 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
        if ((_DWORD)v34) {
          unsigned int v31 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v55, v34, v33);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v31), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v13, (uint64_t)&v55);
        }
        unint64_t v35 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)&v55);
        unint64_t v36 = *(unsigned int *)(v13 + 3404);
        if ((_DWORD)v36 && gBreakOnError)
        {
          uint64_t v50 = 3LL;
          __int128 v51 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v25 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v50 = 2LL;
          __int128 v51 = 517LL;
        }

        breakpoint_break((uint64_t)&v55, (volatile int *)v51, v50, v36, v13);
LABEL_38:
        unsigned int v37 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v35) defaultFbufStream];
        unsigned int v38 = (unsigned int *)((char *)v37 + 56);
        do
          unsigned int v39 = __ldaxr(v38);
        while (__stlxr(1u, v38));
        if (v39 == 1)
        {
          do
          {
            while (*v38 == 1)
              ;
            do
              signed int v40 = __ldaxr(v38);
            while (__stlxr(1u, v38));
          }

          while (v40 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v37, (GPUTools::FB::Fbuf *)&v55, *(unsigned int *)v55, 1);
        atomic_store(0, v38);
        do
        {
          BOOL v41 = __ldaxr(v14);
          unsigned int v42 = v41 - 1;
        }

        while (__stlxr(v42, v14));
        if (gCheckGLErrors) {
          uint64_t v43 = v42 < 1;
        }
        else {
          uint64_t v43 = 1;
        }
        if (!v43) {
          handle_opengl_thread_conflict((const void **)v13);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v20, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    id v44 = __ldaxr(v14);
  while (__stlxr(v44 - 1, v14));
  [(id)DYGetGLGuestAppClient(v18) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, float, float, float))(*(void *)(v13 + 24) + 2000LL))(a1, a2, a3, a4);
LABEL_51:
  if (v55) {
    free(v55);
  }
}

        float v33 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v33) {
          float v33 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v57, v34);
        }
        unint64_t v36 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v15 + 3404);
        if ((_DWORD)v36) {
          float v33 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v57, v36, v35);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v15, (uint64_t)&v57);
        }
        unsigned int v37 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v15 + 3480),  (GPUTools::FB::Fbuf *)(v15 + 3520),  (GPUTools::FB *)&v57);
        unsigned int v38 = *(unsigned int *)(v15 + 3404);
        if ((_DWORD)v38 && gBreakOnError)
        {
          __uint64_t v52 = 3LL;
          char v53 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v27 & 2) == 0) {
            goto LABEL_38;
          }
          __uint64_t v52 = 2LL;
          char v53 = 518LL;
        }

        breakpoint_break((uint64_t)&v57, (volatile int *)v53, v52, v38, v15);
LABEL_38:
        unsigned int v39 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v37) defaultFbufStream];
        signed int v40 = (unsigned int *)((char *)v39 + 56);
        do
          BOOL v41 = __ldaxr(v40);
        while (__stlxr(1u, v40));
        if (v41 == 1)
        {
          do
          {
            while (*v40 == 1)
              ;
            do
              unsigned int v42 = __ldaxr(v40);
            while (__stlxr(1u, v40));
          }

          while (v42 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v39, (GPUTools::FB::Fbuf *)&v57, *(unsigned int *)v57, 1);
        atomic_store(0, v40);
        do
        {
          uint64_t v43 = __ldaxr(v16);
          id v44 = v43 - 1;
        }

        while (__stlxr(v44, v16));
        if (gCheckGLErrors) {
          unsigned int v45 = v44 < 1;
        }
        else {
          unsigned int v45 = 1;
        }
        if (!v45) {
          handle_opengl_thread_conflict((const void **)v15);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v22, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    __int128 v46 = __ldaxr(v16);
  while (__stlxr(v46 - 1, v16));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 + 24) + 2008LL))( a1,  a2,  a3,  a4,  a5);
LABEL_51:
  if (v57) {
    free(v57);
  }
}

        unint64_t v27 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v22), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v27) {
          unint64_t v27 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v51, v28);
        }
        float v30 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
        if ((_DWORD)v30) {
          unint64_t v27 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v51, v30, v29);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v9, (uint64_t)&v51);
        }
        unsigned int v31 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v51);
        unint64_t v32 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v32 && gBreakOnError)
        {
          __int128 v46 = 3LL;
          int v47 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v21 & 2) == 0) {
            goto LABEL_38;
          }
          __int128 v46 = 2LL;
          int v47 = 539LL;
        }

        breakpoint_break((uint64_t)&v51, (volatile int *)v47, v46, v32, v9);
LABEL_38:
        float v33 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v31) defaultFbufStream];
        uint64_t v34 = (unsigned int *)((char *)v33 + 56);
        do
          unint64_t v35 = __ldaxr(v34);
        while (__stlxr(1u, v34));
        if (v35 == 1)
        {
          do
          {
            while (*v34 == 1)
              ;
            do
              unint64_t v36 = __ldaxr(v34);
            while (__stlxr(1u, v34));
          }

          while (v36 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v33, (GPUTools::FB::Fbuf *)&v51, *(unsigned int *)v51, 1);
        atomic_store(0, v34);
        do
        {
          unsigned int v37 = __ldaxr(v10);
          unsigned int v38 = v37 - 1;
        }

        while (__stlxr(v38, v10));
        if (gCheckGLErrors) {
          unsigned int v39 = v38 < 1;
        }
        else {
          unsigned int v39 = 1;
        }
        if (!v39) {
          handle_opengl_thread_conflict((const void **)v9);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    signed int v40 = __ldaxr(v10);
  while (__stlxr(v40 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 2024LL))(a1, a2);
LABEL_51:
  if (v51) {
    free(v51);
  }
}

        unsigned int v31 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v26), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v31) {
          unsigned int v31 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v55, v32);
        }
        uint64_t v34 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
        if ((_DWORD)v34) {
          unsigned int v31 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v55, v34, v33);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v31), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v13, (uint64_t)&v55);
        }
        unint64_t v35 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)&v55);
        unint64_t v36 = *(unsigned int *)(v13 + 3404);
        if ((_DWORD)v36 && gBreakOnError)
        {
          uint64_t v50 = 3LL;
          __int128 v51 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v25 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v50 = 2LL;
          __int128 v51 = 541LL;
        }

        breakpoint_break((uint64_t)&v55, (volatile int *)v51, v50, v36, v13);
LABEL_38:
        unsigned int v37 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v35) defaultFbufStream];
        unsigned int v38 = (unsigned int *)((char *)v37 + 56);
        do
          unsigned int v39 = __ldaxr(v38);
        while (__stlxr(1u, v38));
        if (v39 == 1)
        {
          do
          {
            while (*v38 == 1)
              ;
            do
              signed int v40 = __ldaxr(v38);
            while (__stlxr(1u, v38));
          }

          while (v40 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v37, (GPUTools::FB::Fbuf *)&v55, *(unsigned int *)v55, 1);
        atomic_store(0, v38);
        do
        {
          BOOL v41 = __ldaxr(v14);
          unsigned int v42 = v41 - 1;
        }

        while (__stlxr(v42, v14));
        if (gCheckGLErrors) {
          uint64_t v43 = v42 < 1;
        }
        else {
          uint64_t v43 = 1;
        }
        if (!v43) {
          handle_opengl_thread_conflict((const void **)v13);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v20, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    id v44 = __ldaxr(v14);
  while (__stlxr(v44 - 1, v14));
  [(id)DYGetGLGuestAppClient(v18) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 + 24) + 2032LL))( a1,  a2,  a3,  a4);
LABEL_51:
  if (v55) {
    free(v55);
  }
}

        unint64_t v27 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v22), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v27) {
          unint64_t v27 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v51, v28);
        }
        float v30 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
        if ((_DWORD)v30) {
          unint64_t v27 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v51, v30, v29);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v9, (uint64_t)&v51);
        }
        unsigned int v31 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v51);
        unint64_t v32 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v32 && gBreakOnError)
        {
          __int128 v46 = 3LL;
          int v47 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v21 & 2) == 0) {
            goto LABEL_38;
          }
          __int128 v46 = 2LL;
          int v47 = 544LL;
        }

        breakpoint_break((uint64_t)&v51, (volatile int *)v47, v46, v32, v9);
LABEL_38:
        float v33 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v31) defaultFbufStream];
        uint64_t v34 = (unsigned int *)((char *)v33 + 56);
        do
          unint64_t v35 = __ldaxr(v34);
        while (__stlxr(1u, v34));
        if (v35 == 1)
        {
          do
          {
            while (*v34 == 1)
              ;
            do
              unint64_t v36 = __ldaxr(v34);
            while (__stlxr(1u, v34));
          }

          while (v36 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v33, (GPUTools::FB::Fbuf *)&v51, *(unsigned int *)v51, 1);
        atomic_store(0, v34);
        do
        {
          unsigned int v37 = __ldaxr(v10);
          unsigned int v38 = v37 - 1;
        }

        while (__stlxr(v38, v10));
        if (gCheckGLErrors) {
          unsigned int v39 = v38 < 1;
        }
        else {
          unsigned int v39 = 1;
        }
        if (!v39) {
          handle_opengl_thread_conflict((const void **)v9);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    signed int v40 = __ldaxr(v10);
  while (__stlxr(v40 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 2040LL))(a1, a2);
LABEL_51:
  if (v51) {
    free(v51);
  }
}

        unsigned int v31 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v26), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v31) {
          unsigned int v31 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v55, v32);
        }
        uint64_t v34 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
        if ((_DWORD)v34) {
          unsigned int v31 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v55, v34, v33);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v31), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v13, (uint64_t)&v55);
        }
        unint64_t v35 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)&v55);
        unint64_t v36 = *(unsigned int *)(v13 + 3404);
        if ((_DWORD)v36 && gBreakOnError)
        {
          uint64_t v50 = 3LL;
          __int128 v51 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v25 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v50 = 2LL;
          __int128 v51 = 546LL;
        }

        breakpoint_break((uint64_t)&v55, (volatile int *)v51, v50, v36, v13);
LABEL_38:
        unsigned int v37 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v35) defaultFbufStream];
        unsigned int v38 = (unsigned int *)((char *)v37 + 56);
        do
          unsigned int v39 = __ldaxr(v38);
        while (__stlxr(1u, v38));
        if (v39 == 1)
        {
          do
          {
            while (*v38 == 1)
              ;
            do
              signed int v40 = __ldaxr(v38);
            while (__stlxr(1u, v38));
          }

          while (v40 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v37, (GPUTools::FB::Fbuf *)&v55, *(unsigned int *)v55, 1);
        atomic_store(0, v38);
        do
        {
          BOOL v41 = __ldaxr(v14);
          unsigned int v42 = v41 - 1;
        }

        while (__stlxr(v42, v14));
        if (gCheckGLErrors) {
          uint64_t v43 = v42 < 1;
        }
        else {
          uint64_t v43 = 1;
        }
        if (!v43) {
          handle_opengl_thread_conflict((const void **)v13);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v20, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    id v44 = __ldaxr(v14);
  while (__stlxr(v44 - 1, v14));
  [(id)DYGetGLGuestAppClient(v18) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 + 24) + 2048LL))( a1,  a2,  a3,  a4);
LABEL_51:
  if (v55) {
    free(v55);
  }
}

        unsigned int v38 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v38) {
          unsigned int v38 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v65, v39);
        }
        BOOL v41 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v20 + 3404);
        if ((_DWORD)v41) {
          unsigned int v38 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v65, v41, v40);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v38), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v20, (uint64_t)&v65);
        }
        unsigned int v42 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v20 + 3480),  (GPUTools::FB::Fbuf *)(v20 + 3520),  (GPUTools::FB *)&v65);
        uint64_t v43 = *(unsigned int *)(v20 + 3404);
        if ((_DWORD)v43 && gBreakOnError)
        {
          char v57 = 3LL;
          uint64_t v58 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v32 & 2) == 0) {
            goto LABEL_38;
          }
          char v57 = 2LL;
          uint64_t v58 = 594LL;
        }

        breakpoint_break((uint64_t)&v65, (volatile int *)v58, v57, v43, v20);
LABEL_38:
        id v44 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v42) defaultFbufStream];
        unsigned int v45 = (unsigned int *)((char *)v44 + 56);
        do
          __int128 v46 = __ldaxr(v45);
        while (__stlxr(1u, v45));
        if (v46 == 1)
        {
          do
          {
            while (*v45 == 1)
              ;
            do
              int v47 = __ldaxr(v45);
            while (__stlxr(1u, v45));
          }

          while (v47 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v44, (GPUTools::FB::Fbuf *)&v65, *(unsigned int *)v65, 1);
        atomic_store(0, v45);
        wrapper_encode_texture_format_info((ContextInfo *)v20, a2, a3, a10);
        do
        {
          uint64_t v48 = __ldaxr(v21);
          uint64_t v49 = v48 - 1;
        }

        while (__stlxr(v49, v21));
        if (gCheckGLErrors) {
          uint64_t v50 = v49 < 1;
        }
        else {
          uint64_t v50 = 1;
        }
        if (!v50) {
          handle_opengl_thread_conflict((const void **)v20);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v27, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    __int128 v51 = __ldaxr(v21);
  while (__stlxr(v51 - 1, v21));
  [(id)DYGetGLGuestAppClient(v25) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, void, void, uint64_t, uint64_t, uint64_t, uint64_t, void, _DWORD, const void *))(*(void *)(v20 + 24) + 2408LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  a10);
LABEL_51:
  if (v65) {
    free(v65);
  }
}

        unsigned int v38 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v38) {
          unsigned int v38 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v71, v39);
        }
        BOOL v41 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v20 + 3404);
        if ((_DWORD)v41) {
          unsigned int v38 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v71, v41, v40);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v38), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v20, (uint64_t)&v71);
        }
        unsigned int v42 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v20 + 3480),  (GPUTools::FB::Fbuf *)(v20 + 3520),  (GPUTools::FB *)&v71);
        uint64_t v43 = *(unsigned int *)(v20 + 3404);
        if ((_DWORD)v43 && gBreakOnError)
        {
          char v63 = 3LL;
          uint64_t v64 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v32 & 2) == 0) {
            goto LABEL_38;
          }
          char v63 = 2LL;
          uint64_t v64 = 603LL;
        }

        breakpoint_break((uint64_t)&v71, (volatile int *)v64, v63, v43, v20);
LABEL_38:
        id v44 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v42) defaultFbufStream];
        unsigned int v45 = (unsigned int *)((char *)v44 + 56);
        do
          __int128 v46 = __ldaxr(v45);
        while (__stlxr(1u, v45));
        if (v46 == 1)
        {
          do
          {
            while (*v45 == 1)
              ;
            do
              int v47 = __ldaxr(v45);
            while (__stlxr(1u, v45));
          }

          while (v47 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v44, (GPUTools::FB::Fbuf *)&v71, *(unsigned int *)v71, 1);
        atomic_store(0, v45);
        wrapper_encode_texture_format_info(*(ContextInfo **)v20, a10, v48, v49, v50, v51, v52, v53);
        do
        {
          uint64_t v54 = __ldaxr(v21);
          unsigned int v55 = v54 - 1;
        }

        while (__stlxr(v55, v21));
        if (gCheckGLErrors) {
          uint64_t v56 = v55 < 1;
        }
        else {
          uint64_t v56 = 1;
        }
        if (!v56) {
          handle_opengl_thread_conflict((const void **)v20);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v27, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    char v57 = __ldaxr(v21);
  while (__stlxr(v57 - 1, v21));
  [(id)DYGetGLGuestAppClient(v25) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, _DWORD, const void *))(*(void *)(v20 + 24) + 2456LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  a10);
LABEL_51:
  if (v71) {
    free(v71);
  }
}

        unsigned int v31 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v26), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v31) {
          unsigned int v31 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v55, v32);
        }
        uint64_t v34 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
        if ((_DWORD)v34) {
          unsigned int v31 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v55, v34, v33);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v31), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v13, (uint64_t)&v55);
        }
        unint64_t v35 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)&v55);
        unint64_t v36 = *(unsigned int *)(v13 + 3404);
        if ((_DWORD)v36 && gBreakOnError)
        {
          uint64_t v50 = 3LL;
          __int128 v51 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v25 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v50 = 2LL;
          __int128 v51 = 608LL;
        }

        breakpoint_break((uint64_t)&v55, (volatile int *)v51, v50, v36, v13);
LABEL_38:
        unsigned int v37 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v35) defaultFbufStream];
        unsigned int v38 = (unsigned int *)((char *)v37 + 56);
        do
          unsigned int v39 = __ldaxr(v38);
        while (__stlxr(1u, v38));
        if (v39 == 1)
        {
          do
          {
            while (*v38 == 1)
              ;
            do
              signed int v40 = __ldaxr(v38);
            while (__stlxr(1u, v38));
          }

          while (v40 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v37, (GPUTools::FB::Fbuf *)&v55, *(unsigned int *)v55, 1);
        atomic_store(0, v38);
        do
        {
          BOOL v41 = __ldaxr(v14);
          unsigned int v42 = v41 - 1;
        }

        while (__stlxr(v42, v14));
        if (gCheckGLErrors) {
          uint64_t v43 = v42 < 1;
        }
        else {
          uint64_t v43 = 1;
        }
        if (!v43) {
          handle_opengl_thread_conflict((const void **)v13);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v20, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    id v44 = __ldaxr(v14);
  while (__stlxr(v44 - 1, v14));
  [(id)DYGetGLGuestAppClient(v18) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, float, float, float))(*(void *)(v13 + 24) + 2472LL))(a1, a2, a3, a4);
LABEL_51:
  if (v55) {
    free(v55);
  }
}

        float v33 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v33) {
          float v33 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v57, v34);
        }
        unint64_t v36 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v15 + 3404);
        if ((_DWORD)v36) {
          float v33 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v57, v36, v35);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v15, (uint64_t)&v57);
        }
        unsigned int v37 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v15 + 3480),  (GPUTools::FB::Fbuf *)(v15 + 3520),  (GPUTools::FB *)&v57);
        unsigned int v38 = *(unsigned int *)(v15 + 3404);
        if ((_DWORD)v38 && gBreakOnError)
        {
          __uint64_t v52 = 3LL;
          char v53 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v27 & 2) == 0) {
            goto LABEL_38;
          }
          __uint64_t v52 = 2LL;
          char v53 = 733LL;
        }

        breakpoint_break((uint64_t)&v57, (volatile int *)v53, v52, v38, v15);
LABEL_38:
        unsigned int v39 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v37) defaultFbufStream];
        signed int v40 = (unsigned int *)((char *)v39 + 56);
        do
          BOOL v41 = __ldaxr(v40);
        while (__stlxr(1u, v40));
        if (v41 == 1)
        {
          do
          {
            while (*v40 == 1)
              ;
            do
              unsigned int v42 = __ldaxr(v40);
            while (__stlxr(1u, v40));
          }

          while (v42 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v39, (GPUTools::FB::Fbuf *)&v57, *(unsigned int *)v57, 1);
        atomic_store(0, v40);
        do
        {
          uint64_t v43 = __ldaxr(v16);
          id v44 = v43 - 1;
        }

        while (__stlxr(v44, v16));
        if (gCheckGLErrors) {
          unsigned int v45 = v44 < 1;
        }
        else {
          unsigned int v45 = 1;
        }
        if (!v45) {
          handle_opengl_thread_conflict((const void **)v15);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v22, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    __int128 v46 = __ldaxr(v16);
  while (__stlxr(v46 - 1, v16));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 + 24) + 2680LL))( a1,  a2,  a3,  a4,  a5);
LABEL_51:
  if (v57) {
    free(v57);
  }
}

        float v33 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v33) {
          float v33 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v57, v34);
        }
        unint64_t v36 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v15 + 3404);
        if ((_DWORD)v36) {
          float v33 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v57, v36, v35);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v15, (uint64_t)&v57);
        }
        unsigned int v37 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v15 + 3480),  (GPUTools::FB::Fbuf *)(v15 + 3520),  (GPUTools::FB *)&v57);
        unsigned int v38 = *(unsigned int *)(v15 + 3404);
        if ((_DWORD)v38 && gBreakOnError)
        {
          __uint64_t v52 = 3LL;
          char v53 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v27 & 2) == 0) {
            goto LABEL_38;
          }
          __uint64_t v52 = 2LL;
          char v53 = 27LL;
        }

        breakpoint_break((uint64_t)&v57, (volatile int *)v53, v52, v38, v15);
LABEL_38:
        unsigned int v39 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v37) defaultFbufStream];
        signed int v40 = (unsigned int *)((char *)v39 + 56);
        do
          BOOL v41 = __ldaxr(v40);
        while (__stlxr(1u, v40));
        if (v41 == 1)
        {
          do
          {
            while (*v40 == 1)
              ;
            do
              unsigned int v42 = __ldaxr(v40);
            while (__stlxr(1u, v40));
          }

          while (v42 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v39, (GPUTools::FB::Fbuf *)&v57, *(unsigned int *)v57, 1);
        atomic_store(0, v40);
        do
        {
          uint64_t v43 = __ldaxr(v16);
          id v44 = v43 - 1;
        }

        while (__stlxr(v44, v16));
        if (gCheckGLErrors) {
          unsigned int v45 = v44 < 1;
        }
        else {
          unsigned int v45 = 1;
        }
        if (!v45) {
          handle_opengl_thread_conflict((const void **)v15);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v22, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    __int128 v46 = __ldaxr(v16);
  while (__stlxr(v46 - 1, v16));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 + 24) + 2688LL))( a1,  a2,  a3,  a4,  a5);
LABEL_51:
  if (v57) {
    free(v57);
  }
}

        float v33 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v33) {
          float v33 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v57, v34);
        }
        unint64_t v36 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v15 + 3404);
        if ((_DWORD)v36) {
          float v33 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v57, v36, v35);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v15, (uint64_t)&v57);
        }
        unsigned int v37 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v15 + 3480),  (GPUTools::FB::Fbuf *)(v15 + 3520),  (GPUTools::FB *)&v57);
        unsigned int v38 = *(unsigned int *)(v15 + 3404);
        if ((_DWORD)v38 && gBreakOnError)
        {
          __uint64_t v52 = 3LL;
          char v53 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v27 & 2) == 0) {
            goto LABEL_38;
          }
          __uint64_t v52 = 2LL;
          char v53 = 23LL;
        }

        breakpoint_break((uint64_t)&v57, (volatile int *)v53, v52, v38, v15);
LABEL_38:
        unsigned int v39 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v37) defaultFbufStream];
        signed int v40 = (unsigned int *)((char *)v39 + 56);
        do
          BOOL v41 = __ldaxr(v40);
        while (__stlxr(1u, v40));
        if (v41 == 1)
        {
          do
          {
            while (*v40 == 1)
              ;
            do
              unsigned int v42 = __ldaxr(v40);
            while (__stlxr(1u, v40));
          }

          while (v42 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v39, (GPUTools::FB::Fbuf *)&v57, *(unsigned int *)v57, 1);
        atomic_store(0, v40);
        do
        {
          uint64_t v43 = __ldaxr(v16);
          id v44 = v43 - 1;
        }

        while (__stlxr(v44, v16));
        if (gCheckGLErrors) {
          unsigned int v45 = v44 < 1;
        }
        else {
          unsigned int v45 = 1;
        }
        if (!v45) {
          handle_opengl_thread_conflict((const void **)v15);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v22, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    __int128 v46 = __ldaxr(v16);
  while (__stlxr(v46 - 1, v16));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, float, float, float, float))(*(void *)(v15 + 24) + 2696LL))( a1,  a2,  a3,  a4,  a5);
LABEL_51:
  if (v57) {
    free(v57);
  }
}

        unint64_t v27 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v22), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v27) {
          unint64_t v27 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v51, v28);
        }
        float v30 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
        if ((_DWORD)v30) {
          unint64_t v27 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v51, v30, v29);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v9, (uint64_t)&v51);
        }
        unsigned int v31 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v51);
        unint64_t v32 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v32 && gBreakOnError)
        {
          __int128 v46 = 3LL;
          int v47 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v21 & 2) == 0) {
            goto LABEL_38;
          }
          __int128 v46 = 2LL;
          int v47 = 24LL;
        }

        breakpoint_break((uint64_t)&v51, (volatile int *)v47, v46, v32, v9);
LABEL_38:
        float v33 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v31) defaultFbufStream];
        uint64_t v34 = (unsigned int *)((char *)v33 + 56);
        do
          unint64_t v35 = __ldaxr(v34);
        while (__stlxr(1u, v34));
        if (v35 == 1)
        {
          do
          {
            while (*v34 == 1)
              ;
            do
              unint64_t v36 = __ldaxr(v34);
            while (__stlxr(1u, v34));
          }

          while (v36 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v33, (GPUTools::FB::Fbuf *)&v51, *(unsigned int *)v51, 1);
        atomic_store(0, v34);
        do
        {
          unsigned int v37 = __ldaxr(v10);
          unsigned int v38 = v37 - 1;
        }

        while (__stlxr(v38, v10));
        if (gCheckGLErrors) {
          unsigned int v39 = v38 < 1;
        }
        else {
          unsigned int v39 = 1;
        }
        if (!v39) {
          handle_opengl_thread_conflict((const void **)v9);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    signed int v40 = __ldaxr(v10);
  while (__stlxr(v40 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 2704LL))(a1, a2);
LABEL_51:
  if (v51) {
    free(v51);
  }
}

        unint64_t v35 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v30), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v35) {
          unint64_t v35 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v59, v36);
        }
        unsigned int v38 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v17 + 3404);
        if ((_DWORD)v38) {
          unint64_t v35 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v59, v38, v37);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v35), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v17, (uint64_t)&v59);
        }
        unsigned int v39 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v17 + 3480),  (GPUTools::FB::Fbuf *)(v17 + 3520),  (GPUTools::FB *)&v59);
        signed int v40 = *(unsigned int *)(v17 + 3404);
        if ((_DWORD)v40 && gBreakOnError)
        {
          uint64_t v54 = 3LL;
          unsigned int v55 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v29 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v54 = 2LL;
          unsigned int v55 = 412LL;
        }

        breakpoint_break((uint64_t)&v59, (volatile int *)v55, v54, v40, v17);
LABEL_38:
        BOOL v41 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v39) defaultFbufStream];
        unsigned int v42 = (unsigned int *)((char *)v41 + 56);
        do
          uint64_t v43 = __ldaxr(v42);
        while (__stlxr(1u, v42));
        if (v43 == 1)
        {
          do
          {
            while (*v42 == 1)
              ;
            do
              id v44 = __ldaxr(v42);
            while (__stlxr(1u, v42));
          }

          while (v44 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v41, (GPUTools::FB::Fbuf *)&v59, *(unsigned int *)v59, 1);
        atomic_store(0, v42);
        do
        {
          unsigned int v45 = __ldaxr(v18);
          __int128 v46 = v45 - 1;
        }

        while (__stlxr(v46, v18));
        if (gCheckGLErrors) {
          int v47 = v46 < 1;
        }
        else {
          int v47 = 1;
        }
        if (!v47) {
          handle_opengl_thread_conflict((const void **)v17);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v24, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    uint64_t v48 = __ldaxr(v18);
  while (__stlxr(v48 - 1, v18));
  [(id)DYGetGLGuestAppClient(v22) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, float, float, float, float))(*(void *)(v17 + 24) + 2952LL))( a1,  a2,  a3,  a4,  a5,  a6);
LABEL_51:
  if (v59) {
    free(v59);
  }
}

        unsigned int v38 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v38) {
          unsigned int v38 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v65, v39);
        }
        BOOL v41 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v20 + 3404);
        if ((_DWORD)v41) {
          unsigned int v38 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v65, v41, v40);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v38), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v20, (uint64_t)&v65);
        }
        unsigned int v42 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v20 + 3480),  (GPUTools::FB::Fbuf *)(v20 + 3520),  (GPUTools::FB *)&v65);
        uint64_t v43 = *(unsigned int *)(v20 + 3404);
        if ((_DWORD)v43 && gBreakOnError)
        {
          char v57 = 3LL;
          uint64_t v58 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v32 & 2) == 0) {
            goto LABEL_38;
          }
          char v57 = 2LL;
          uint64_t v58 = 96LL;
        }

        breakpoint_break((uint64_t)&v65, (volatile int *)v58, v57, v43, v20);
LABEL_38:
        id v44 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v42) defaultFbufStream];
        unsigned int v45 = (unsigned int *)((char *)v44 + 56);
        do
          __int128 v46 = __ldaxr(v45);
        while (__stlxr(1u, v45));
        if (v46 == 1)
        {
          do
          {
            while (*v45 == 1)
              ;
            do
              int v47 = __ldaxr(v45);
            while (__stlxr(1u, v45));
          }

          while (v47 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v44, (GPUTools::FB::Fbuf *)&v65, *(unsigned int *)v65, 1);
        atomic_store(0, v45);
        wrapper_encode_texture_format_info((ContextInfo *)v20, a2, a3, a10);
        do
        {
          uint64_t v48 = __ldaxr(v21);
          uint64_t v49 = v48 - 1;
        }

        while (__stlxr(v49, v21));
        if (gCheckGLErrors) {
          uint64_t v50 = v49 < 1;
        }
        else {
          uint64_t v50 = 1;
        }
        if (!v50) {
          handle_opengl_thread_conflict((const void **)v20);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v27, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    __int128 v51 = __ldaxr(v21);
  while (__stlxr(v51 - 1, v21));
  [(id)DYGetGLGuestAppClient(v25) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, void, void, uint64_t, uint64_t, uint64_t, uint64_t, void, _DWORD, const void *))(*(void *)(v20 + 24) + 3032LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  a10);
LABEL_51:
  if (v65) {
    free(v65);
  }
}

        unsigned int v38 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v38) {
          unsigned int v38 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v64, v39);
        }
        BOOL v41 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v20 + 3404);
        if ((_DWORD)v41) {
          unsigned int v38 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v64, v41, v40);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v38), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v20, (uint64_t)&v64);
        }
        unsigned int v42 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v20 + 3480),  (GPUTools::FB::Fbuf *)(v20 + 3520),  (GPUTools::FB *)&v64);
        uint64_t v43 = *(unsigned int *)(v20 + 3404);
        if ((_DWORD)v43 && gBreakOnError)
        {
          char v57 = 3LL;
          uint64_t v58 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v32 & 2) == 0) {
            goto LABEL_38;
          }
          char v57 = 2LL;
          uint64_t v58 = 95LL;
        }

        breakpoint_break((uint64_t)&v64, (volatile int *)v58, v57, v43, v20);
LABEL_38:
        id v44 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v42) defaultFbufStream];
        unsigned int v45 = (unsigned int *)((char *)v44 + 56);
        do
          __int128 v46 = __ldaxr(v45);
        while (__stlxr(1u, v45));
        if (v46 == 1)
        {
          do
          {
            while (*v45 == 1)
              ;
            do
              int v47 = __ldaxr(v45);
            while (__stlxr(1u, v45));
          }

          while (v47 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v44, (GPUTools::FB::Fbuf *)&v64, *(unsigned int *)v64, 1);
        atomic_store(0, v45);
        wrapper_encode_texture_format_info((ContextInfo *)v20, a2, a3, a9);
        do
        {
          uint64_t v48 = __ldaxr(v21);
          uint64_t v49 = v48 - 1;
        }

        while (__stlxr(v49, v21));
        if (gCheckGLErrors) {
          uint64_t v50 = v49 < 1;
        }
        else {
          uint64_t v50 = 1;
        }
        if (!v50) {
          handle_opengl_thread_conflict((const void **)v20);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v27, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    __int128 v51 = __ldaxr(v21);
  while (__stlxr(v51 - 1, v21));
  [(id)DYGetGLGuestAppClient(v25) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, void, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const void *))(*(void *)(v20 + 24) + 3040LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9);
LABEL_51:
  if (v64) {
    free(v64);
  }
}

        unsigned int v37 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v37) {
          unsigned int v37 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v72, v38);
        }
        signed int v40 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v19 + 3404);
        if ((_DWORD)v40) {
          unsigned int v37 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v72, v40, v39);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v37), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v19, (uint64_t)&v72);
        }
        BOOL v41 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v19 + 3480),  (GPUTools::FB::Fbuf *)(v19 + 3520),  (GPUTools::FB *)&v72);
        unsigned int v42 = *(unsigned int *)(v19 + 3404);
        if ((_DWORD)v42 && gBreakOnError)
        {
          uint64_t v62 = 3LL;
          char v63 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v31 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v62 = 2LL;
          char v63 = 99LL;
        }

        breakpoint_break((uint64_t)&v72, (volatile int *)v63, v62, v42, v19);
LABEL_38:
        uint64_t v43 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v41) defaultFbufStream];
        id v44 = (unsigned int *)((char *)v43 + 56);
        do
          unsigned int v45 = __ldaxr(v44);
        while (__stlxr(1u, v44));
        if (v45 == 1)
        {
          do
          {
            while (*v44 == 1)
              ;
            do
              __int128 v46 = __ldaxr(v44);
            while (__stlxr(1u, v44));
          }

          while (v46 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v43, (GPUTools::FB::Fbuf *)&v72, *(unsigned int *)v72, 1);
        atomic_store(0, v44);
        wrapper_encode_texture_format_info(*(ContextInfo **)v19, a11, v47, v48, v49, v50, v51, v52);
        do
        {
          char v53 = __ldaxr(v20);
          uint64_t v54 = v53 - 1;
        }

        while (__stlxr(v54, v20));
        if (gCheckGLErrors) {
          unsigned int v55 = v54 < 1;
        }
        else {
          unsigned int v55 = 1;
        }
        if (!v55) {
          handle_opengl_thread_conflict((const void **)v19);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v26, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    uint64_t v56 = __ldaxr(v20);
  while (__stlxr(v56 - 1, v20));
  [(id)DYGetGLGuestAppClient(v24) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, void, void, void, void, void, uint64_t, _DWORD, const void *))(*(void *)(v19 + 24) + 3056LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  a10,  a11);
LABEL_51:
  if (v72) {
    free(v72);
  }
}

        unsigned int v38 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v38) {
          unsigned int v38 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v71, v39);
        }
        BOOL v41 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v20 + 3404);
        if ((_DWORD)v41) {
          unsigned int v38 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v71, v41, v40);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v38), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v20, (uint64_t)&v71);
        }
        unsigned int v42 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v20 + 3480),  (GPUTools::FB::Fbuf *)(v20 + 3520),  (GPUTools::FB *)&v71);
        uint64_t v43 = *(unsigned int *)(v20 + 3404);
        if ((_DWORD)v43 && gBreakOnError)
        {
          char v63 = 3LL;
          uint64_t v64 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v32 & 2) == 0) {
            goto LABEL_38;
          }
          char v63 = 2LL;
          uint64_t v64 = 98LL;
        }

        breakpoint_break((uint64_t)&v71, (volatile int *)v64, v63, v43, v20);
LABEL_38:
        id v44 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v42) defaultFbufStream];
        unsigned int v45 = (unsigned int *)((char *)v44 + 56);
        do
          __int128 v46 = __ldaxr(v45);
        while (__stlxr(1u, v45));
        if (v46 == 1)
        {
          do
          {
            while (*v45 == 1)
              ;
            do
              int v47 = __ldaxr(v45);
            while (__stlxr(1u, v45));
          }

          while (v47 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v44, (GPUTools::FB::Fbuf *)&v71, *(unsigned int *)v71, 1);
        atomic_store(0, v45);
        wrapper_encode_texture_format_info(*(ContextInfo **)v20, a10, v48, v49, v50, v51, v52, v53);
        do
        {
          uint64_t v54 = __ldaxr(v21);
          unsigned int v55 = v54 - 1;
        }

        while (__stlxr(v55, v21));
        if (gCheckGLErrors) {
          uint64_t v56 = v55 < 1;
        }
        else {
          uint64_t v56 = 1;
        }
        if (!v56) {
          handle_opengl_thread_conflict((const void **)v20);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v27, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    char v57 = __ldaxr(v21);
  while (__stlxr(v57 - 1, v21));
  [(id)DYGetGLGuestAppClient(v25) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, _DWORD, const void *))(*(void *)(v20 + 24) + 3064LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  a10);
LABEL_51:
  if (v71) {
    free(v71);
  }
}

        unsigned int v31 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v26), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v31) {
          unsigned int v31 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v55, v32);
        }
        uint64_t v34 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
        if ((_DWORD)v34) {
          unsigned int v31 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v55, v34, v33);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v31), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v13, (uint64_t)&v55);
        }
        unint64_t v35 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)&v55);
        unint64_t v36 = *(unsigned int *)(v13 + 3404);
        if ((_DWORD)v36 && gBreakOnError)
        {
          uint64_t v50 = 3LL;
          __int128 v51 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v25 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v50 = 2LL;
          __int128 v51 = 230LL;
        }

        breakpoint_break((uint64_t)&v55, (volatile int *)v51, v50, v36, v13);
LABEL_38:
        unsigned int v37 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v35) defaultFbufStream];
        unsigned int v38 = (unsigned int *)((char *)v37 + 56);
        do
          unsigned int v39 = __ldaxr(v38);
        while (__stlxr(1u, v38));
        if (v39 == 1)
        {
          do
          {
            while (*v38 == 1)
              ;
            do
              signed int v40 = __ldaxr(v38);
            while (__stlxr(1u, v38));
          }

          while (v40 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v37, (GPUTools::FB::Fbuf *)&v55, *(unsigned int *)v55, 1);
        atomic_store(0, v38);
        do
        {
          BOOL v41 = __ldaxr(v14);
          unsigned int v42 = v41 - 1;
        }

        while (__stlxr(v42, v14));
        if (gCheckGLErrors) {
          uint64_t v43 = v42 < 1;
        }
        else {
          uint64_t v43 = 1;
        }
        if (!v43) {
          handle_opengl_thread_conflict((const void **)v13);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v20, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    id v44 = __ldaxr(v14);
  while (__stlxr(v44 - 1, v14));
  [(id)DYGetGLGuestAppClient(v18) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, void *))(*(void *)(v13 + 24) + 3080LL))(a1, a2, a3, a4);
LABEL_51:
  if (v55) {
    free(v55);
  }
}

        unsigned int v37 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v37) {
          unsigned int v37 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v65, v38);
        }
        signed int v40 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v19 + 3404);
        if ((_DWORD)v40) {
          unsigned int v37 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v65, v40, v39);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v37), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v19, (uint64_t)&v65);
        }
        BOOL v41 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v19 + 3480),  (GPUTools::FB::Fbuf *)(v19 + 3520),  (GPUTools::FB *)&v65);
        unsigned int v42 = *(unsigned int *)(v19 + 3404);
        if ((_DWORD)v42 && gBreakOnError)
        {
          uint64_t v56 = 3LL;
          char v57 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v31 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v56 = 2LL;
          char v57 = 595LL;
        }

        breakpoint_break((uint64_t)&v65, (volatile int *)v57, v56, v42, v19);
LABEL_38:
        uint64_t v43 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v41) defaultFbufStream];
        id v44 = (unsigned int *)((char *)v43 + 56);
        do
          unsigned int v45 = __ldaxr(v44);
        while (__stlxr(1u, v44));
        if (v45 == 1)
        {
          do
          {
            while (*v44 == 1)
              ;
            do
              __int128 v46 = __ldaxr(v44);
            while (__stlxr(1u, v44));
          }

          while (v46 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v43, (GPUTools::FB::Fbuf *)&v65, *(unsigned int *)v65, 1);
        atomic_store(0, v44);
        wrapper_encode_texture_format_info((ContextInfo *)v19, a2, a3, a10);
        do
        {
          int v47 = __ldaxr(v20);
          uint64_t v48 = v47 - 1;
        }

        while (__stlxr(v48, v20));
        if (gCheckGLErrors) {
          uint64_t v49 = v48 < 1;
        }
        else {
          uint64_t v49 = 1;
        }
        if (!v49) {
          handle_opengl_thread_conflict((const void **)v19);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v26, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    uint64_t v50 = __ldaxr(v20);
  while (__stlxr(v50 - 1, v20));
  [(id)DYGetGLGuestAppClient(v24) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, void, void, uint64_t, uint64_t, uint64_t, void, void, uint64_t, const void *))(*(void *)(v19 + 24) + 3504LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  a10);
LABEL_51:
  if (v65) {
    free(v65);
  }
}

        unsigned int v37 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v37) {
          unsigned int v37 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v72, v38);
        }
        signed int v40 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v19 + 3404);
        if ((_DWORD)v40) {
          unsigned int v37 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v72, v40, v39);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v37), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v19, (uint64_t)&v72);
        }
        BOOL v41 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v19 + 3480),  (GPUTools::FB::Fbuf *)(v19 + 3520),  (GPUTools::FB *)&v72);
        unsigned int v42 = *(unsigned int *)(v19 + 3404);
        if ((_DWORD)v42 && gBreakOnError)
        {
          uint64_t v62 = 3LL;
          char v63 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v31 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v62 = 2LL;
          char v63 = 604LL;
        }

        breakpoint_break((uint64_t)&v72, (volatile int *)v63, v62, v42, v19);
LABEL_38:
        uint64_t v43 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v41) defaultFbufStream];
        id v44 = (unsigned int *)((char *)v43 + 56);
        do
          unsigned int v45 = __ldaxr(v44);
        while (__stlxr(1u, v44));
        if (v45 == 1)
        {
          do
          {
            while (*v44 == 1)
              ;
            do
              __int128 v46 = __ldaxr(v44);
            while (__stlxr(1u, v44));
          }

          while (v46 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v43, (GPUTools::FB::Fbuf *)&v72, *(unsigned int *)v72, 1);
        atomic_store(0, v44);
        wrapper_encode_texture_format_info(*(ContextInfo **)v19, a11, v47, v48, v49, v50, v51, v52);
        do
        {
          char v53 = __ldaxr(v20);
          uint64_t v54 = v53 - 1;
        }

        while (__stlxr(v54, v20));
        if (gCheckGLErrors) {
          unsigned int v55 = v54 < 1;
        }
        else {
          unsigned int v55 = 1;
        }
        if (!v55) {
          handle_opengl_thread_conflict((const void **)v19);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v26, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    uint64_t v56 = __ldaxr(v20);
  while (__stlxr(v56 - 1, v20));
  [(id)DYGetGLGuestAppClient(v24) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, void, void, void, void, void, uint64_t, _DWORD, const void *))(*(void *)(v19 + 24) + 3512LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  a10,  a11);
LABEL_51:
  if (v72) {
    free(v72);
  }
}

        unint64_t v36 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v31), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v36) {
          unint64_t v36 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v64, v37);
        }
        unsigned int v39 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v18 + 3404);
        if ((_DWORD)v39) {
          unint64_t v36 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v64, v39, v38);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v36), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v18, (uint64_t)&v64);
        }
        signed int v40 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v18 + 3480),  (GPUTools::FB::Fbuf *)(v18 + 3520),  (GPUTools::FB *)&v64);
        BOOL v41 = *(unsigned int *)(v18 + 3404);
        if ((_DWORD)v41 && gBreakOnError)
        {
          unsigned int v55 = 3LL;
          uint64_t v56 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v30 & 2) == 0) {
            goto LABEL_38;
          }
          unsigned int v55 = 2LL;
          uint64_t v56 = 115LL;
        }

        breakpoint_break((uint64_t)&v64, (volatile int *)v56, v55, v41, v18);
LABEL_38:
        unsigned int v42 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v40) defaultFbufStream];
        uint64_t v43 = (unsigned int *)((char *)v42 + 56);
        do
          id v44 = __ldaxr(v43);
        while (__stlxr(1u, v43));
        if (v44 == 1)
        {
          do
          {
            while (*v43 == 1)
              ;
            do
              unsigned int v45 = __ldaxr(v43);
            while (__stlxr(1u, v43));
          }

          while (v45 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v42, (GPUTools::FB::Fbuf *)&v64, *(unsigned int *)v64, 1);
        atomic_store(0, v43);
        do
        {
          __int128 v46 = __ldaxr(v19);
          int v47 = v46 - 1;
        }

        while (__stlxr(v47, v19));
        if (gCheckGLErrors) {
          uint64_t v48 = v47 < 1;
        }
        else {
          uint64_t v48 = 1;
        }
        if (!v48) {
          handle_opengl_thread_conflict((const void **)v18);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v25, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    uint64_t v49 = __ldaxr(v19);
  while (__stlxr(v49 - 1, v19));
  [(id)DYGetGLGuestAppClient(v23) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, void, void, void, void, uint64_t))(*(void *)(v18 + 24) + 3520LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9);
LABEL_51:
  if (v64) {
    free(v64);
  }
}

        id v29 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v24), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v29) {
          id v29 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v53, v30);
        }
        unint64_t v32 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
        if ((_DWORD)v32) {
          id v29 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v53, v32, v31);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v11, (uint64_t)&v53);
        }
        float v33 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v53);
        uint64_t v34 = *(unsigned int *)(v11 + 3404);
        if ((_DWORD)v34 && gBreakOnError)
        {
          uint64_t v48 = 3LL;
          uint64_t v49 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v23 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v48 = 2LL;
          uint64_t v49 = 25LL;
        }

        breakpoint_break((uint64_t)&v53, (volatile int *)v49, v48, v34, v11);
LABEL_38:
        unint64_t v35 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v33) defaultFbufStream];
        unint64_t v36 = (unsigned int *)((char *)v35 + 56);
        do
          unsigned int v37 = __ldaxr(v36);
        while (__stlxr(1u, v36));
        if (v37 == 1)
        {
          do
          {
            while (*v36 == 1)
              ;
            do
              unsigned int v38 = __ldaxr(v36);
            while (__stlxr(1u, v36));
          }

          while (v38 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v35, (GPUTools::FB::Fbuf *)&v53, *(unsigned int *)v53, 1);
        atomic_store(0, v36);
        do
        {
          unsigned int v39 = __ldaxr(v12);
          signed int v40 = v39 - 1;
        }

        while (__stlxr(v40, v12));
        if (gCheckGLErrors) {
          BOOL v41 = v40 < 1;
        }
        else {
          BOOL v41 = 1;
        }
        if (!v41) {
          handle_opengl_thread_conflict((const void **)v11);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v18, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    unsigned int v42 = __ldaxr(v12);
  while (__stlxr(v42 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t))(*(void *)(v11 + 24) + 3664LL))(a1, a2, a3);
LABEL_51:
  if (v53) {
    free(v53);
  }
}

        id v29 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v24), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v29) {
          id v29 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v53, v30);
        }
        unint64_t v32 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
        if ((_DWORD)v32) {
          id v29 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v53, v32, v31);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v11, (uint64_t)&v53);
        }
        float v33 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v53);
        uint64_t v34 = *(unsigned int *)(v11 + 3404);
        if ((_DWORD)v34 && gBreakOnError)
        {
          uint64_t v48 = 3LL;
          uint64_t v49 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v23 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v48 = 2LL;
          uint64_t v49 = 514LL;
        }

        breakpoint_break((uint64_t)&v53, (volatile int *)v49, v48, v34, v11);
LABEL_38:
        unint64_t v35 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v33) defaultFbufStream];
        unint64_t v36 = (unsigned int *)((char *)v35 + 56);
        do
          unsigned int v37 = __ldaxr(v36);
        while (__stlxr(1u, v36));
        if (v37 == 1)
        {
          do
          {
            while (*v36 == 1)
              ;
            do
              unsigned int v38 = __ldaxr(v36);
            while (__stlxr(1u, v36));
          }

          while (v38 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v35, (GPUTools::FB::Fbuf *)&v53, *(unsigned int *)v53, 1);
        atomic_store(0, v36);
        do
        {
          unsigned int v39 = __ldaxr(v12);
          signed int v40 = v39 - 1;
        }

        while (__stlxr(v40, v12));
        if (gCheckGLErrors) {
          BOOL v41 = v40 < 1;
        }
        else {
          BOOL v41 = 1;
        }
        if (!v41) {
          handle_opengl_thread_conflict((const void **)v11);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v18, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    unsigned int v42 = __ldaxr(v12);
  while (__stlxr(v42 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, float))(*(void *)(v11 + 24) + 3672LL))(a1, a3, a2);
LABEL_51:
  if (v53) {
    free(v53);
  }
}

        unint64_t v27 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v22), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v27) {
          unint64_t v27 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v51, v28);
        }
        float v30 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
        if ((_DWORD)v30) {
          unint64_t v27 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v51, v30, v29);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v9, (uint64_t)&v51);
        }
        unsigned int v31 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v51);
        unint64_t v32 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v32 && gBreakOnError)
        {
          __int128 v46 = 3LL;
          int v47 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v21 & 2) == 0) {
            goto LABEL_38;
          }
          __int128 v46 = 2LL;
          int v47 = 538LL;
        }

        breakpoint_break((uint64_t)&v51, (volatile int *)v47, v46, v32, v9);
LABEL_38:
        float v33 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v31) defaultFbufStream];
        uint64_t v34 = (unsigned int *)((char *)v33 + 56);
        do
          unint64_t v35 = __ldaxr(v34);
        while (__stlxr(1u, v34));
        if (v35 == 1)
        {
          do
          {
            while (*v34 == 1)
              ;
            do
              unint64_t v36 = __ldaxr(v34);
            while (__stlxr(1u, v34));
          }

          while (v36 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v33, (GPUTools::FB::Fbuf *)&v51, *(unsigned int *)v51, 1);
        atomic_store(0, v34);
        do
        {
          unsigned int v37 = __ldaxr(v10);
          unsigned int v38 = v37 - 1;
        }

        while (__stlxr(v38, v10));
        if (gCheckGLErrors) {
          unsigned int v39 = v38 < 1;
        }
        else {
          unsigned int v39 = 1;
        }
        if (!v39) {
          handle_opengl_thread_conflict((const void **)v9);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    signed int v40 = __ldaxr(v10);
  while (__stlxr(v40 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 3720LL))(a1, a2);
LABEL_51:
  if (v51) {
    free(v51);
  }
}

        unint64_t v27 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v22), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v27) {
          unint64_t v27 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v51, v28);
        }
        float v30 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
        if ((_DWORD)v30) {
          unint64_t v27 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v51, v30, v29);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v9, (uint64_t)&v51);
        }
        unsigned int v31 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v51);
        unint64_t v32 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v32 && gBreakOnError)
        {
          __int128 v46 = 3LL;
          int v47 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v21 & 2) == 0) {
            goto LABEL_38;
          }
          __int128 v46 = 2LL;
          int v47 = 176LL;
        }

        breakpoint_break((uint64_t)&v51, (volatile int *)v47, v46, v32, v9);
LABEL_38:
        float v33 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v31) defaultFbufStream];
        uint64_t v34 = (unsigned int *)((char *)v33 + 56);
        do
          unint64_t v35 = __ldaxr(v34);
        while (__stlxr(1u, v34));
        if (v35 == 1)
        {
          do
          {
            while (*v34 == 1)
              ;
            do
              unint64_t v36 = __ldaxr(v34);
            while (__stlxr(1u, v34));
          }

          while (v36 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v33, (GPUTools::FB::Fbuf *)&v51, *(unsigned int *)v51, 1);
        atomic_store(0, v34);
        do
        {
          unsigned int v37 = __ldaxr(v10);
          unsigned int v38 = v37 - 1;
        }

        while (__stlxr(v38, v10));
        if (gCheckGLErrors) {
          unsigned int v39 = v38 < 1;
        }
        else {
          unsigned int v39 = 1;
        }
        if (!v39) {
          handle_opengl_thread_conflict((const void **)v9);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    signed int v40 = __ldaxr(v10);
  while (__stlxr(v40 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 3744LL))(a1, a2);
LABEL_51:
  if (v51) {
    free(v51);
  }
}

        id v29 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v24), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v29) {
          id v29 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v53, v30);
        }
        unint64_t v32 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
        if ((_DWORD)v32) {
          id v29 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v53, v32, v31);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v11, (uint64_t)&v53);
        }
        float v33 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v53);
        uint64_t v34 = *(unsigned int *)(v11 + 3404);
        if ((_DWORD)v34 && gBreakOnError)
        {
          uint64_t v48 = 3LL;
          uint64_t v49 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v23 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v48 = 2LL;
          uint64_t v49 = 177LL;
        }

        breakpoint_break((uint64_t)&v53, (volatile int *)v49, v48, v34, v11);
LABEL_38:
        unint64_t v35 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v33) defaultFbufStream];
        unint64_t v36 = (unsigned int *)((char *)v35 + 56);
        do
          unsigned int v37 = __ldaxr(v36);
        while (__stlxr(1u, v36));
        if (v37 == 1)
        {
          do
          {
            while (*v36 == 1)
              ;
            do
              unsigned int v38 = __ldaxr(v36);
            while (__stlxr(1u, v36));
          }

          while (v38 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v35, (GPUTools::FB::Fbuf *)&v53, *(unsigned int *)v53, 1);
        atomic_store(0, v36);
        do
        {
          unsigned int v39 = __ldaxr(v12);
          signed int v40 = v39 - 1;
        }

        while (__stlxr(v40, v12));
        if (gCheckGLErrors) {
          BOOL v41 = v40 < 1;
        }
        else {
          BOOL v41 = 1;
        }
        if (!v41) {
          handle_opengl_thread_conflict((const void **)v11);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v18, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    unsigned int v42 = __ldaxr(v12);
  while (__stlxr(v42 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t))(*(void *)(v11 + 24) + 3760LL))(a1, a2, a3);
LABEL_51:
  if (v53) {
    free(v53);
  }
}

        unint64_t v27 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v22), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v27) {
          unint64_t v27 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v51, v28);
        }
        float v30 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
        if ((_DWORD)v30) {
          unint64_t v27 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v51, v30, v29);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v9, (uint64_t)&v51);
        }
        unsigned int v31 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v51);
        unint64_t v32 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v32 && gBreakOnError)
        {
          __int128 v46 = 3LL;
          int v47 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v21 & 2) == 0) {
            goto LABEL_38;
          }
          __int128 v46 = 2LL;
          int v47 = 155LL;
        }

        breakpoint_break((uint64_t)&v51, (volatile int *)v47, v46, v32, v9);
LABEL_38:
        float v33 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v31) defaultFbufStream];
        uint64_t v34 = (unsigned int *)((char *)v33 + 56);
        do
          unint64_t v35 = __ldaxr(v34);
        while (__stlxr(1u, v34));
        if (v35 == 1)
        {
          do
          {
            while (*v34 == 1)
              ;
            do
              unint64_t v36 = __ldaxr(v34);
            while (__stlxr(1u, v34));
          }

          while (v36 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v33, (GPUTools::FB::Fbuf *)&v51, *(unsigned int *)v51, 1);
        atomic_store(0, v34);
        do
        {
          unsigned int v37 = __ldaxr(v10);
          unsigned int v38 = v37 - 1;
        }

        while (__stlxr(v38, v10));
        if (gCheckGLErrors) {
          unsigned int v39 = v38 < 1;
        }
        else {
          unsigned int v39 = 1;
        }
        if (!v39) {
          handle_opengl_thread_conflict((const void **)v9);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    signed int v40 = __ldaxr(v10);
  while (__stlxr(v40 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 4096LL))(a1, a2);
LABEL_51:
  if (v51) {
    free(v51);
  }
}

        unint64_t v27 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v22), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v27) {
          unint64_t v27 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v51, v28);
        }
        float v30 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
        if ((_DWORD)v30) {
          unint64_t v27 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v51, v30, v29);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v9, (uint64_t)&v51);
        }
        unsigned int v31 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v51);
        unint64_t v32 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v32 && gBreakOnError)
        {
          __int128 v46 = 3LL;
          int v47 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v21 & 2) == 0) {
            goto LABEL_38;
          }
          __int128 v46 = 2LL;
          int v47 = 138LL;
        }

        breakpoint_break((uint64_t)&v51, (volatile int *)v47, v46, v32, v9);
LABEL_38:
        float v33 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v31) defaultFbufStream];
        uint64_t v34 = (unsigned int *)((char *)v33 + 56);
        do
          unint64_t v35 = __ldaxr(v34);
        while (__stlxr(1u, v34));
        if (v35 == 1)
        {
          do
          {
            while (*v34 == 1)
              ;
            do
              unint64_t v36 = __ldaxr(v34);
            while (__stlxr(1u, v34));
          }

          while (v36 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v33, (GPUTools::FB::Fbuf *)&v51, *(unsigned int *)v51, 1);
        atomic_store(0, v34);
        do
        {
          unsigned int v37 = __ldaxr(v10);
          unsigned int v38 = v37 - 1;
        }

        while (__stlxr(v38, v10));
        if (gCheckGLErrors) {
          unsigned int v39 = v38 < 1;
        }
        else {
          unsigned int v39 = 1;
        }
        if (!v39) {
          handle_opengl_thread_conflict((const void **)v9);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    signed int v40 = __ldaxr(v10);
  while (__stlxr(v40 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 4104LL))(a1, a2);
LABEL_51:
  if (v51) {
    free(v51);
  }
}

        id v29 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v24), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v29) {
          id v29 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v53, v30);
        }
        unint64_t v32 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
        if ((_DWORD)v32) {
          id v29 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v53, v32, v31);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v11, (uint64_t)&v53);
        }
        float v33 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v53);
        uint64_t v34 = *(unsigned int *)(v11 + 3404);
        if ((_DWORD)v34 && gBreakOnError)
        {
          uint64_t v48 = 3LL;
          uint64_t v49 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v23 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v48 = 2LL;
          uint64_t v49 = 444LL;
        }

        breakpoint_break((uint64_t)&v53, (volatile int *)v49, v48, v34, v11);
LABEL_38:
        unint64_t v35 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v33) defaultFbufStream];
        unint64_t v36 = (unsigned int *)((char *)v35 + 56);
        do
          unsigned int v37 = __ldaxr(v36);
        while (__stlxr(1u, v36));
        if (v37 == 1)
        {
          do
          {
            while (*v36 == 1)
              ;
            do
              unsigned int v38 = __ldaxr(v36);
            while (__stlxr(1u, v36));
          }

          while (v38 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v35, (GPUTools::FB::Fbuf *)&v53, *(unsigned int *)v53, 1);
        atomic_store(0, v36);
        do
        {
          unsigned int v39 = __ldaxr(v12);
          signed int v40 = v39 - 1;
        }

        while (__stlxr(v40, v12));
        if (gCheckGLErrors) {
          BOOL v41 = v40 < 1;
        }
        else {
          BOOL v41 = 1;
        }
        if (!v41) {
          handle_opengl_thread_conflict((const void **)v11);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v18, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    unsigned int v42 = __ldaxr(v12);
  while (__stlxr(v42 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, float))(*(void *)(v11 + 24) + 4320LL))(a1, a2, a3);
LABEL_51:
  if (v53) {
    free(v53);
  }
}

        float v33 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v33) {
          float v33 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v57, v34);
        }
        unint64_t v36 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v15 + 3404);
        if ((_DWORD)v36) {
          float v33 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v57, v36, v35);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v15, (uint64_t)&v57);
        }
        unsigned int v37 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v15 + 3480),  (GPUTools::FB::Fbuf *)(v15 + 3520),  (GPUTools::FB *)&v57);
        unsigned int v38 = *(unsigned int *)(v15 + 3404);
        if ((_DWORD)v38 && gBreakOnError)
        {
          __uint64_t v52 = 3LL;
          char v53 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v27 & 2) == 0) {
            goto LABEL_38;
          }
          __uint64_t v52 = 2LL;
          char v53 = 547LL;
        }

        breakpoint_break((uint64_t)&v57, (volatile int *)v53, v52, v38, v15);
LABEL_38:
        unsigned int v39 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v37) defaultFbufStream];
        signed int v40 = (unsigned int *)((char *)v39 + 56);
        do
          BOOL v41 = __ldaxr(v40);
        while (__stlxr(1u, v40));
        if (v41 == 1)
        {
          do
          {
            while (*v40 == 1)
              ;
            do
              unsigned int v42 = __ldaxr(v40);
            while (__stlxr(1u, v40));
          }

          while (v42 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v39, (GPUTools::FB::Fbuf *)&v57, *(unsigned int *)v57, 1);
        atomic_store(0, v40);
        do
        {
          uint64_t v43 = __ldaxr(v16);
          id v44 = v43 - 1;
        }

        while (__stlxr(v44, v16));
        if (gCheckGLErrors) {
          unsigned int v45 = v44 < 1;
        }
        else {
          unsigned int v45 = 1;
        }
        if (!v45) {
          handle_opengl_thread_conflict((const void **)v15);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v22, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    __int128 v46 = __ldaxr(v16);
  while (__stlxr(v46 - 1, v16));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 + 24) + 4688LL))( a1,  a2,  a3,  a4,  a5);
LABEL_51:
  if (v57) {
    free(v57);
  }
}

        id v29 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v24), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v29) {
          id v29 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v53, v30);
        }
        unint64_t v32 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
        if ((_DWORD)v32) {
          id v29 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v53, v32, v31);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v11, (uint64_t)&v53);
        }
        float v33 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v53);
        uint64_t v34 = *(unsigned int *)(v11 + 3404);
        if ((_DWORD)v34 && gBreakOnError)
        {
          uint64_t v48 = 3LL;
          uint64_t v49 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v23 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v48 = 2LL;
          uint64_t v49 = 9LL;
        }

        breakpoint_break((uint64_t)&v53, (volatile int *)v49, v48, v34, v11);
LABEL_38:
        unint64_t v35 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v33) defaultFbufStream];
        unint64_t v36 = (unsigned int *)((char *)v35 + 56);
        do
          unsigned int v37 = __ldaxr(v36);
        while (__stlxr(1u, v36));
        if (v37 == 1)
        {
          do
          {
            while (*v36 == 1)
              ;
            do
              unsigned int v38 = __ldaxr(v36);
            while (__stlxr(1u, v36));
          }

          while (v38 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v35, (GPUTools::FB::Fbuf *)&v53, *(unsigned int *)v53, 1);
        atomic_store(0, v36);
        do
        {
          unsigned int v39 = __ldaxr(v12);
          signed int v40 = v39 - 1;
        }

        while (__stlxr(v40, v12));
        if (gCheckGLErrors) {
          BOOL v41 = v40 < 1;
        }
        else {
          BOOL v41 = 1;
        }
        if (!v41) {
          handle_opengl_thread_conflict((const void **)v11);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v18, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    unsigned int v42 = __ldaxr(v12);
  while (__stlxr(v42 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t))(*(void *)(v11 + 24) + 5096LL))(a1, a2, a3);
LABEL_51:
  if (v53) {
    free(v53);
  }
}

        unint64_t v27 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v22), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v27) {
          unint64_t v27 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v51, v28);
        }
        float v30 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
        if ((_DWORD)v30) {
          unint64_t v27 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v51, v30, v29);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v9, (uint64_t)&v51);
        }
        unsigned int v31 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v51);
        unint64_t v32 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v32 && gBreakOnError)
        {
          __int128 v46 = 3LL;
          int v47 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v21 & 2) == 0) {
            goto LABEL_38;
          }
          __int128 v46 = 2LL;
          int v47 = 159LL;
        }

        breakpoint_break((uint64_t)&v51, (volatile int *)v47, v46, v32, v9);
LABEL_38:
        float v33 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v31) defaultFbufStream];
        uint64_t v34 = (unsigned int *)((char *)v33 + 56);
        do
          unint64_t v35 = __ldaxr(v34);
        while (__stlxr(1u, v34));
        if (v35 == 1)
        {
          do
          {
            while (*v34 == 1)
              ;
            do
              unint64_t v36 = __ldaxr(v34);
            while (__stlxr(1u, v34));
          }

          while (v36 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v33, (GPUTools::FB::Fbuf *)&v51, *(unsigned int *)v51, 1);
        atomic_store(0, v34);
        do
        {
          unsigned int v37 = __ldaxr(v10);
          unsigned int v38 = v37 - 1;
        }

        while (__stlxr(v38, v10));
        if (gCheckGLErrors) {
          unsigned int v39 = v38 < 1;
        }
        else {
          unsigned int v39 = 1;
        }
        if (!v39) {
          handle_opengl_thread_conflict((const void **)v9);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    signed int v40 = __ldaxr(v10);
  while (__stlxr(v40 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 5104LL))(a1, a2);
LABEL_51:
  if (v51) {
    free(v51);
  }
}

        float v33 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v33) {
          float v33 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v57, v34);
        }
        unint64_t v36 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v15 + 3404);
        if ((_DWORD)v36) {
          float v33 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v57, v36, v35);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v15, (uint64_t)&v57);
        }
        unsigned int v37 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v15 + 3480),  (GPUTools::FB::Fbuf *)(v15 + 3520),  (GPUTools::FB *)&v57);
        unsigned int v38 = *(unsigned int *)(v15 + 3404);
        if ((_DWORD)v38 && gBreakOnError)
        {
          __uint64_t v52 = 3LL;
          char v53 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v27 & 2) == 0) {
            goto LABEL_38;
          }
          __uint64_t v52 = 2LL;
          char v53 = 31LL;
        }

        breakpoint_break((uint64_t)&v57, (volatile int *)v53, v52, v38, v15);
LABEL_38:
        unsigned int v39 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v37) defaultFbufStream];
        signed int v40 = (unsigned int *)((char *)v39 + 56);
        do
          BOOL v41 = __ldaxr(v40);
        while (__stlxr(1u, v40));
        if (v41 == 1)
        {
          do
          {
            while (*v40 == 1)
              ;
            do
              unsigned int v42 = __ldaxr(v40);
            while (__stlxr(1u, v40));
          }

          while (v42 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v39, (GPUTools::FB::Fbuf *)&v57, *(unsigned int *)v57, 1);
        atomic_store(0, v40);
        do
        {
          uint64_t v43 = __ldaxr(v16);
          id v44 = v43 - 1;
        }

        while (__stlxr(v44, v16));
        if (gCheckGLErrors) {
          unsigned int v45 = v44 < 1;
        }
        else {
          unsigned int v45 = 1;
        }
        if (!v45) {
          handle_opengl_thread_conflict((const void **)v15);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v22, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    __int128 v46 = __ldaxr(v16);
  while (__stlxr(v46 - 1, v16));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, const void *))(*(void *)(v15 + 24) + 5176LL))( a1,  a2,  a3,  a4,  a5);
LABEL_51:
  if (v57) {
    free(v57);
  }
}

        float v33 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v33) {
          float v33 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v57, v34);
        }
        unint64_t v36 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v15 + 3404);
        if ((_DWORD)v36) {
          float v33 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v57, v36, v35);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v15, (uint64_t)&v57);
        }
        unsigned int v37 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v15 + 3480),  (GPUTools::FB::Fbuf *)(v15 + 3520),  (GPUTools::FB *)&v57);
        unsigned int v38 = *(unsigned int *)(v15 + 3404);
        if ((_DWORD)v38 && gBreakOnError)
        {
          __uint64_t v52 = 3LL;
          char v53 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v27 & 2) == 0) {
            goto LABEL_38;
          }
          __uint64_t v52 = 2LL;
          char v53 = 542LL;
        }

        breakpoint_break((uint64_t)&v57, (volatile int *)v53, v52, v38, v15);
LABEL_38:
        unsigned int v39 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v37) defaultFbufStream];
        signed int v40 = (unsigned int *)((char *)v39 + 56);
        do
          BOOL v41 = __ldaxr(v40);
        while (__stlxr(1u, v40));
        if (v41 == 1)
        {
          do
          {
            while (*v40 == 1)
              ;
            do
              unsigned int v42 = __ldaxr(v40);
            while (__stlxr(1u, v40));
          }

          while (v42 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v39, (GPUTools::FB::Fbuf *)&v57, *(unsigned int *)v57, 1);
        atomic_store(0, v40);
        do
        {
          uint64_t v43 = __ldaxr(v16);
          id v44 = v43 - 1;
        }

        while (__stlxr(v44, v16));
        if (gCheckGLErrors) {
          unsigned int v45 = v44 < 1;
        }
        else {
          unsigned int v45 = 1;
        }
        if (!v45) {
          handle_opengl_thread_conflict((const void **)v15);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v22, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    __int128 v46 = __ldaxr(v16);
  while (__stlxr(v46 - 1, v16));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 + 24) + 5288LL))( a1,  a2,  a3,  a4,  a5);
LABEL_51:
  if (v57) {
    free(v57);
  }
}

        id v29 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v24), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v29) {
          id v29 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v53, v30);
        }
        unint64_t v32 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
        if ((_DWORD)v32) {
          id v29 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v53, v32, v31);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v11, (uint64_t)&v53);
        }
        float v33 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v53);
        uint64_t v34 = *(unsigned int *)(v11 + 3404);
        if ((_DWORD)v34 && gBreakOnError)
        {
          uint64_t v48 = 3LL;
          uint64_t v49 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v23 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v48 = 2LL;
          uint64_t v49 = 545LL;
        }

        breakpoint_break((uint64_t)&v53, (volatile int *)v49, v48, v34, v11);
LABEL_38:
        unint64_t v35 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v33) defaultFbufStream];
        unint64_t v36 = (unsigned int *)((char *)v35 + 56);
        do
          unsigned int v37 = __ldaxr(v36);
        while (__stlxr(1u, v36));
        if (v37 == 1)
        {
          do
          {
            while (*v36 == 1)
              ;
            do
              unsigned int v38 = __ldaxr(v36);
            while (__stlxr(1u, v36));
          }

          while (v38 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v35, (GPUTools::FB::Fbuf *)&v53, *(unsigned int *)v53, 1);
        atomic_store(0, v36);
        do
        {
          unsigned int v39 = __ldaxr(v12);
          signed int v40 = v39 - 1;
        }

        while (__stlxr(v40, v12));
        if (gCheckGLErrors) {
          BOOL v41 = v40 < 1;
        }
        else {
          BOOL v41 = 1;
        }
        if (!v41) {
          handle_opengl_thread_conflict((const void **)v11);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v18, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    unsigned int v42 = __ldaxr(v12);
  while (__stlxr(v42 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t))(*(void *)(v11 + 24) + 5296LL))(a1, a2, a3);
LABEL_51:
  if (v53) {
    free(v53);
  }
}

        id v29 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v24), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v29) {
          id v29 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v53, v30);
        }
        unint64_t v32 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
        if ((_DWORD)v32) {
          id v29 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v53, v32, v31);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v11, (uint64_t)&v53);
        }
        float v33 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v53);
        uint64_t v34 = *(unsigned int *)(v11 + 3404);
        if ((_DWORD)v34 && gBreakOnError)
        {
          uint64_t v48 = 3LL;
          uint64_t v49 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v23 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v48 = 2LL;
          uint64_t v49 = 19LL;
        }

        breakpoint_break((uint64_t)&v53, (volatile int *)v49, v48, v34, v11);
LABEL_38:
        unint64_t v35 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v33) defaultFbufStream];
        unint64_t v36 = (unsigned int *)((char *)v35 + 56);
        do
          unsigned int v37 = __ldaxr(v36);
        while (__stlxr(1u, v36));
        if (v37 == 1)
        {
          do
          {
            while (*v36 == 1)
              ;
            do
              unsigned int v38 = __ldaxr(v36);
            while (__stlxr(1u, v36));
          }

          while (v38 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v35, (GPUTools::FB::Fbuf *)&v53, *(unsigned int *)v53, 1);
        atomic_store(0, v36);
        do
        {
          unsigned int v39 = __ldaxr(v12);
          signed int v40 = v39 - 1;
        }

        while (__stlxr(v40, v12));
        if (gCheckGLErrors) {
          BOOL v41 = v40 < 1;
        }
        else {
          BOOL v41 = 1;
        }
        if (!v41) {
          handle_opengl_thread_conflict((const void **)v11);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v18, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    unsigned int v42 = __ldaxr(v12);
  while (__stlxr(v42 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t))(*(void *)(v11 + 24) + 5328LL))(a1, a2, a3);
LABEL_51:
  if (v53) {
    free(v53);
  }
}

        float v33 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v33) {
          float v33 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v57, v34);
        }
        unint64_t v36 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v15 + 3404);
        if ((_DWORD)v36) {
          float v33 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v57, v36, v35);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v15, (uint64_t)&v57);
        }
        unsigned int v37 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v15 + 3480),  (GPUTools::FB::Fbuf *)(v15 + 3520),  (GPUTools::FB *)&v57);
        unsigned int v38 = *(unsigned int *)(v15 + 3404);
        if ((_DWORD)v38 && gBreakOnError)
        {
          __uint64_t v52 = 3LL;
          char v53 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v27 & 2) == 0) {
            goto LABEL_38;
          }
          __uint64_t v52 = 2LL;
          char v53 = 508LL;
        }

        breakpoint_break((uint64_t)&v57, (volatile int *)v53, v52, v38, v15);
LABEL_38:
        unsigned int v39 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v37) defaultFbufStream];
        signed int v40 = (unsigned int *)((char *)v39 + 56);
        do
          BOOL v41 = __ldaxr(v40);
        while (__stlxr(1u, v40));
        if (v41 == 1)
        {
          do
          {
            while (*v40 == 1)
              ;
            do
              unsigned int v42 = __ldaxr(v40);
            while (__stlxr(1u, v40));
          }

          while (v42 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v39, (GPUTools::FB::Fbuf *)&v57, *(unsigned int *)v57, 1);
        atomic_store(0, v40);
        do
        {
          uint64_t v43 = __ldaxr(v16);
          id v44 = v43 - 1;
        }

        while (__stlxr(v44, v16));
        if (gCheckGLErrors) {
          unsigned int v45 = v44 < 1;
        }
        else {
          unsigned int v45 = 1;
        }
        if (!v45) {
          handle_opengl_thread_conflict((const void **)v15);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v22, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    __int128 v46 = __ldaxr(v16);
  while (__stlxr(v46 - 1, v16));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 + 24) + 5352LL))( a1,  a2,  a3,  a4,  a5);
LABEL_51:
  if (v57) {
    free(v57);
  }
}

        id v29 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v24), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v29) {
          id v29 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v53, v30);
        }
        unint64_t v32 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
        if ((_DWORD)v32) {
          id v29 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v53, v32, v31);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v11, (uint64_t)&v53);
        }
        float v33 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v53);
        uint64_t v34 = *(unsigned int *)(v11 + 3404);
        if ((_DWORD)v34 && gBreakOnError)
        {
          uint64_t v48 = 3LL;
          uint64_t v49 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v23 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v48 = 2LL;
          uint64_t v49 = 17LL;
        }

        breakpoint_break((uint64_t)&v53, (volatile int *)v49, v48, v34, v11);
LABEL_38:
        unint64_t v35 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v33) defaultFbufStream];
        unint64_t v36 = (unsigned int *)((char *)v35 + 56);
        do
          unsigned int v37 = __ldaxr(v36);
        while (__stlxr(1u, v36));
        if (v37 == 1)
        {
          do
          {
            while (*v36 == 1)
              ;
            do
              unsigned int v38 = __ldaxr(v36);
            while (__stlxr(1u, v36));
          }

          while (v38 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v35, (GPUTools::FB::Fbuf *)&v53, *(unsigned int *)v53, 1);
        atomic_store(0, v36);
        do
        {
          unsigned int v39 = __ldaxr(v12);
          signed int v40 = v39 - 1;
        }

        while (__stlxr(v40, v12));
        if (gCheckGLErrors) {
          BOOL v41 = v40 < 1;
        }
        else {
          BOOL v41 = 1;
        }
        if (!v41) {
          handle_opengl_thread_conflict((const void **)v11);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v18, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    unsigned int v42 = __ldaxr(v12);
  while (__stlxr(v42 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t))(*(void *)(v11 + 24) + 5376LL))(a1, a2, a3);
LABEL_51:
  if (v53) {
    free(v53);
  }
}

        unint64_t v35 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v30), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v35) {
          unint64_t v35 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v59, v36);
        }
        unsigned int v38 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v17 + 3404);
        if ((_DWORD)v38) {
          unint64_t v35 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v59, v38, v37);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v35), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v17, (uint64_t)&v59);
        }
        unsigned int v39 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v17 + 3480),  (GPUTools::FB::Fbuf *)(v17 + 3520),  (GPUTools::FB *)&v59);
        signed int v40 = *(unsigned int *)(v17 + 3404);
        if ((_DWORD)v40 && gBreakOnError)
        {
          uint64_t v54 = 3LL;
          unsigned int v55 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v29 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v54 = 2LL;
          unsigned int v55 = 194LL;
        }

        breakpoint_break((uint64_t)&v59, (volatile int *)v55, v54, v40, v17);
LABEL_38:
        BOOL v41 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v39) defaultFbufStream];
        unsigned int v42 = (unsigned int *)((char *)v41 + 56);
        do
          uint64_t v43 = __ldaxr(v42);
        while (__stlxr(1u, v42));
        if (v43 == 1)
        {
          do
          {
            while (*v42 == 1)
              ;
            do
              id v44 = __ldaxr(v42);
            while (__stlxr(1u, v42));
          }

          while (v44 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v41, (GPUTools::FB::Fbuf *)&v59, *(unsigned int *)v59, 1);
        atomic_store(0, v42);
        do
        {
          unsigned int v45 = __ldaxr(v18);
          __int128 v46 = v45 - 1;
        }

        while (__stlxr(v46, v18));
        if (gCheckGLErrors) {
          int v47 = v46 < 1;
        }
        else {
          int v47 = 1;
        }
        if (!v47) {
          handle_opengl_thread_conflict((const void **)v17);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v24, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    uint64_t v48 = __ldaxr(v18);
  while (__stlxr(v48 - 1, v18));
  [(id)DYGetGLGuestAppClient(v22) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 + 24) + 5416LL))( a1,  a2,  a3,  a4,  a5,  a6);
LABEL_51:
  if (v59) {
    free(v59);
  }
}

        float v33 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v33) {
          float v33 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v57, v34);
        }
        unint64_t v36 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v15 + 3404);
        if ((_DWORD)v36) {
          float v33 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v57, v36, v35);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v15, (uint64_t)&v57);
        }
        unsigned int v37 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v15 + 3480),  (GPUTools::FB::Fbuf *)(v15 + 3520),  (GPUTools::FB *)&v57);
        unsigned int v38 = *(unsigned int *)(v15 + 3404);
        if ((_DWORD)v38 && gBreakOnError)
        {
          __uint64_t v52 = 3LL;
          char v53 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v27 & 2) == 0) {
            goto LABEL_38;
          }
          __uint64_t v52 = 2LL;
          char v53 = 192LL;
        }

        breakpoint_break((uint64_t)&v57, (volatile int *)v53, v52, v38, v15);
LABEL_38:
        unsigned int v39 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v37) defaultFbufStream];
        signed int v40 = (unsigned int *)((char *)v39 + 56);
        do
          BOOL v41 = __ldaxr(v40);
        while (__stlxr(1u, v40));
        if (v41 == 1)
        {
          do
          {
            while (*v40 == 1)
              ;
            do
              unsigned int v42 = __ldaxr(v40);
            while (__stlxr(1u, v40));
          }

          while (v42 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v39, (GPUTools::FB::Fbuf *)&v57, *(unsigned int *)v57, 1);
        atomic_store(0, v40);
        do
        {
          uint64_t v43 = __ldaxr(v16);
          id v44 = v43 - 1;
        }

        while (__stlxr(v44, v16));
        if (gCheckGLErrors) {
          unsigned int v45 = v44 < 1;
        }
        else {
          unsigned int v45 = 1;
        }
        if (!v45) {
          handle_opengl_thread_conflict((const void **)v15);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v22, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    __int128 v46 = __ldaxr(v16);
  while (__stlxr(v46 - 1, v16));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 + 24) + 5432LL))( a1,  a2,  a3,  a4,  a5);
LABEL_51:
  if (v57) {
    free(v57);
  }
}

        unint64_t v27 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v22), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v27) {
          unint64_t v27 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v51, v28);
        }
        float v30 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
        if ((_DWORD)v30) {
          unint64_t v27 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v51, v30, v29);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v9, (uint64_t)&v51);
        }
        unsigned int v31 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v51);
        unint64_t v32 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v32 && gBreakOnError)
        {
          __int128 v46 = 3LL;
          int v47 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v21 & 2) == 0) {
            goto LABEL_38;
          }
          __int128 v46 = 2LL;
          int v47 = 210LL;
        }

        breakpoint_break((uint64_t)&v51, (volatile int *)v47, v46, v32, v9);
LABEL_38:
        float v33 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v31) defaultFbufStream];
        uint64_t v34 = (unsigned int *)((char *)v33 + 56);
        do
          unint64_t v35 = __ldaxr(v34);
        while (__stlxr(1u, v34));
        if (v35 == 1)
        {
          do
          {
            while (*v34 == 1)
              ;
            do
              unint64_t v36 = __ldaxr(v34);
            while (__stlxr(1u, v34));
          }

          while (v36 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v33, (GPUTools::FB::Fbuf *)&v51, *(unsigned int *)v51, 1);
        atomic_store(0, v34);
        do
        {
          unsigned int v37 = __ldaxr(v10);
          unsigned int v38 = v37 - 1;
        }

        while (__stlxr(v38, v10));
        if (gCheckGLErrors) {
          unsigned int v39 = v38 < 1;
        }
        else {
          unsigned int v39 = 1;
        }
        if (!v39) {
          handle_opengl_thread_conflict((const void **)v9);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    signed int v40 = __ldaxr(v10);
  while (__stlxr(v40 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 5448LL))(a1, a2);
LABEL_51:
  if (v51) {
    free(v51);
  }
}

        unint64_t v35 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v30), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v35) {
          unint64_t v35 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v59, v36);
        }
        unsigned int v38 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v17 + 3404);
        if ((_DWORD)v38) {
          unint64_t v35 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v59, v38, v37);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v35), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v17, (uint64_t)&v59);
        }
        unsigned int v39 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v17 + 3480),  (GPUTools::FB::Fbuf *)(v17 + 3520),  (GPUTools::FB *)&v59);
        signed int v40 = *(unsigned int *)(v17 + 3404);
        if ((_DWORD)v40 && gBreakOnError)
        {
          uint64_t v54 = 3LL;
          unsigned int v55 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v29 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v54 = 2LL;
          unsigned int v55 = 198LL;
        }

        breakpoint_break((uint64_t)&v59, (volatile int *)v55, v54, v40, v17);
LABEL_38:
        BOOL v41 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v39) defaultFbufStream];
        unsigned int v42 = (unsigned int *)((char *)v41 + 56);
        do
          uint64_t v43 = __ldaxr(v42);
        while (__stlxr(1u, v42));
        if (v43 == 1)
        {
          do
          {
            while (*v42 == 1)
              ;
            do
              id v44 = __ldaxr(v42);
            while (__stlxr(1u, v42));
          }

          while (v44 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v41, (GPUTools::FB::Fbuf *)&v59, *(unsigned int *)v59, 1);
        atomic_store(0, v42);
        do
        {
          unsigned int v45 = __ldaxr(v18);
          __int128 v46 = v45 - 1;
        }

        while (__stlxr(v46, v18));
        if (gCheckGLErrors) {
          int v47 = v46 < 1;
        }
        else {
          int v47 = 1;
        }
        if (!v47) {
          handle_opengl_thread_conflict((const void **)v17);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v24, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    uint64_t v48 = __ldaxr(v18);
  while (__stlxr(v48 - 1, v18));
  [(id)DYGetGLGuestAppClient(v22) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 + 24) + 5528LL))( a1,  a2,  a3,  a4,  a5,  a6);
LABEL_51:
  if (v59) {
    free(v59);
  }
}

        uint64_t v25 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v20), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v25) {
          uint64_t v25 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v49, v26);
        }
        unint64_t v28 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v7 + 3404);
        if ((_DWORD)v28) {
          uint64_t v25 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v49, v28, v27);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v25), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v7, (uint64_t)&v49);
        }
        id v29 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v7 + 3480),  (GPUTools::FB::Fbuf *)(v7 + 3520),  (GPUTools::FB *)&v49);
        float v30 = *(unsigned int *)(v7 + 3404);
        if ((_DWORD)v30 && gBreakOnError)
        {
          id v44 = 3LL;
          unsigned int v45 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v19 & 2) == 0) {
            goto LABEL_38;
          }
          id v44 = 2LL;
          unsigned int v45 = 160LL;
        }

        breakpoint_break((uint64_t)&v49, (volatile int *)v45, v44, v30, v7);
LABEL_38:
        unsigned int v31 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v29) defaultFbufStream];
        unint64_t v32 = (unsigned int *)((char *)v31 + 56);
        do
          float v33 = __ldaxr(v32);
        while (__stlxr(1u, v32));
        if (v33 == 1)
        {
          do
          {
            while (*v32 == 1)
              ;
            do
              uint64_t v34 = __ldaxr(v32);
            while (__stlxr(1u, v32));
          }

          while (v34 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v31, (GPUTools::FB::Fbuf *)&v49, *(unsigned int *)v49, 1);
        atomic_store(0, v32);
        do
        {
          unint64_t v35 = __ldaxr(v8);
          unint64_t v36 = v35 - 1;
        }

        while (__stlxr(v36, v8));
        if (gCheckGLErrors) {
          unsigned int v37 = v36 < 1;
        }
        else {
          unsigned int v37 = 1;
        }
        if (!v37) {
          handle_opengl_thread_conflict((const void **)v7);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v14, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    unsigned int v38 = __ldaxr(v8);
  while (__stlxr(v38 - 1, v8));
  [(id)DYGetGLGuestAppClient(v12) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *))(*(void *)(v7 + 24) + 5576LL))(a1);
LABEL_51:
  if (v49) {
    free(v49);
  }
}

        unint64_t v35 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v30), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v35) {
          unint64_t v35 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v59, v36);
        }
        unsigned int v38 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v17 + 3404);
        if ((_DWORD)v38) {
          unint64_t v35 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v59, v38, v37);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v35), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v17, (uint64_t)&v59);
        }
        unsigned int v39 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v17 + 3480),  (GPUTools::FB::Fbuf *)(v17 + 3520),  (GPUTools::FB *)&v59);
        signed int v40 = *(unsigned int *)(v17 + 3404);
        if ((_DWORD)v40 && gBreakOnError)
        {
          uint64_t v54 = 3LL;
          unsigned int v55 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v29 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v54 = 2LL;
          unsigned int v55 = 729LL;
        }

        breakpoint_break((uint64_t)&v59, (volatile int *)v55, v54, v40, v17);
LABEL_38:
        BOOL v41 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v39) defaultFbufStream];
        unsigned int v42 = (unsigned int *)((char *)v41 + 56);
        do
          uint64_t v43 = __ldaxr(v42);
        while (__stlxr(1u, v42));
        if (v43 == 1)
        {
          do
          {
            while (*v42 == 1)
              ;
            do
              id v44 = __ldaxr(v42);
            while (__stlxr(1u, v42));
          }

          while (v44 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v41, (GPUTools::FB::Fbuf *)&v59, *(unsigned int *)v59, 1);
        atomic_store(0, v42);
        do
        {
          unsigned int v45 = __ldaxr(v18);
          __int128 v46 = v45 - 1;
        }

        while (__stlxr(v46, v18));
        if (gCheckGLErrors) {
          int v47 = v46 < 1;
        }
        else {
          int v47 = 1;
        }
        if (!v47) {
          handle_opengl_thread_conflict((const void **)v17);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v24, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    uint64_t v48 = __ldaxr(v18);
  while (__stlxr(v48 - 1, v18));
  [(id)DYGetGLGuestAppClient(v22) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t, const void *))(*(void *)(v17 + 24)
                                                                                              + 5848LL))( a1,  a2,  a3,  a4,  a5,  a6);
LABEL_51:
  if (v59) {
    free(v59);
  }
}

        unint64_t v32 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v32) {
          unint64_t v32 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v56, v33);
        }
        unint64_t v35 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
        if ((_DWORD)v35) {
          unint64_t v32 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v56, v35, v34);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v13, (uint64_t)&v56);
        }
        unint64_t v36 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)&v56);
        unsigned int v37 = *(unsigned int *)(v13 + 3404);
        if ((_DWORD)v37 && gBreakOnError)
        {
          __int128 v51 = 3LL;
          __uint64_t v52 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v26 & 2) == 0) {
            goto LABEL_38;
          }
          __int128 v51 = 2LL;
          __uint64_t v52 = 302LL;
        }

        breakpoint_break((uint64_t)&v56, (volatile int *)v52, v51, v37, v13);
LABEL_38:
        unsigned int v38 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v36) defaultFbufStream];
        unsigned int v39 = (unsigned int *)((char *)v38 + 56);
        do
          signed int v40 = __ldaxr(v39);
        while (__stlxr(1u, v39));
        if (v40 == 1)
        {
          do
          {
            while (*v39 == 1)
              ;
            do
              BOOL v41 = __ldaxr(v39);
            while (__stlxr(1u, v39));
          }

          while (v41 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v38, (GPUTools::FB::Fbuf *)&v56, *(unsigned int *)v56, 1);
        atomic_store(0, v39);
        do
        {
          unsigned int v42 = __ldaxr(v14);
          uint64_t v43 = v42 - 1;
        }

        while (__stlxr(v43, v14));
        if (gCheckGLErrors) {
          id v44 = v43 < 1;
        }
        else {
          id v44 = 1;
        }
        if (!v44) {
          handle_opengl_thread_conflict((const void **)v13);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v21, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    unsigned int v45 = __ldaxr(v14);
  while (__stlxr(v45 - 1, v14));
  [(id)DYGetGLGuestAppClient(v18) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, volatile int *, uint64_t, unsigned int *))(*(void *)(v13 + 24) + 5936LL))( a1,  a2,  a3,  a4);
LABEL_51:
  if (v56) {
    free(v56);
  }
}

        unint64_t v35 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v30), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v35) {
          unint64_t v35 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v59, v36);
        }
        unsigned int v38 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v17 + 3404);
        if ((_DWORD)v38) {
          unint64_t v35 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v59, v38, v37);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v35), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v17, (uint64_t)&v59);
        }
        unsigned int v39 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v17 + 3480),  (GPUTools::FB::Fbuf *)(v17 + 3520),  (GPUTools::FB *)&v59);
        signed int v40 = *(unsigned int *)(v17 + 3404);
        if ((_DWORD)v40 && gBreakOnError)
        {
          uint64_t v54 = 3LL;
          unsigned int v55 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v29 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v54 = 2LL;
          unsigned int v55 = 509LL;
        }

        breakpoint_break((uint64_t)&v59, (volatile int *)v55, v54, v40, v17);
LABEL_38:
        BOOL v41 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v39) defaultFbufStream];
        unsigned int v42 = (unsigned int *)((char *)v41 + 56);
        do
          uint64_t v43 = __ldaxr(v42);
        while (__stlxr(1u, v42));
        if (v43 == 1)
        {
          do
          {
            while (*v42 == 1)
              ;
            do
              id v44 = __ldaxr(v42);
            while (__stlxr(1u, v42));
          }

          while (v44 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v41, (GPUTools::FB::Fbuf *)&v59, *(unsigned int *)v59, 1);
        atomic_store(0, v42);
        do
        {
          unsigned int v45 = __ldaxr(v18);
          __int128 v46 = v45 - 1;
        }

        while (__stlxr(v46, v18));
        if (gCheckGLErrors) {
          int v47 = v46 < 1;
        }
        else {
          int v47 = 1;
        }
        if (!v47) {
          handle_opengl_thread_conflict((const void **)v17);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v24, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    uint64_t v48 = __ldaxr(v18);
  while (__stlxr(v48 - 1, v18));
  [(id)DYGetGLGuestAppClient(v22) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 + 24) + 6048LL))( a1,  a2,  a3,  a4,  a5,  a6);
LABEL_51:
  if (v59) {
    free(v59);
  }
}

        id v29 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v24), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v29) {
          id v29 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v53, v30);
        }
        unint64_t v32 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
        if ((_DWORD)v32) {
          id v29 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v53, v32, v31);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v11, (uint64_t)&v53);
        }
        float v33 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v53);
        uint64_t v34 = *(unsigned int *)(v11 + 3404);
        if ((_DWORD)v34 && gBreakOnError)
        {
          uint64_t v48 = 3LL;
          uint64_t v49 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v23 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v48 = 2LL;
          uint64_t v49 = 833LL;
        }

        breakpoint_break((uint64_t)&v53, (volatile int *)v49, v48, v34, v11);
LABEL_38:
        unint64_t v35 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v33) defaultFbufStream];
        unint64_t v36 = (unsigned int *)((char *)v35 + 56);
        do
          unsigned int v37 = __ldaxr(v36);
        while (__stlxr(1u, v36));
        if (v37 == 1)
        {
          do
          {
            while (*v36 == 1)
              ;
            do
              unsigned int v38 = __ldaxr(v36);
            while (__stlxr(1u, v36));
          }

          while (v38 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v35, (GPUTools::FB::Fbuf *)&v53, *(unsigned int *)v53, 1);
        atomic_store(0, v36);
        do
        {
          unsigned int v39 = __ldaxr(v12);
          signed int v40 = v39 - 1;
        }

        while (__stlxr(v40, v12));
        if (gCheckGLErrors) {
          BOOL v41 = v40 < 1;
        }
        else {
          BOOL v41 = 1;
        }
        if (!v41) {
          handle_opengl_thread_conflict((const void **)v11);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v18, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    unsigned int v42 = __ldaxr(v12);
  while (__stlxr(v42 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t))(*(void *)(v11 + 24) + 6088LL))(a1, a2, a3);
LABEL_51:
  if (v53) {
    free(v53);
  }
}

        unint64_t v27 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v22), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v27) {
          unint64_t v27 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v51, v28);
        }
        float v30 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
        if ((_DWORD)v30) {
          unint64_t v27 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v51, v30, v29);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v9, (uint64_t)&v51);
        }
        unsigned int v31 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v51);
        unint64_t v32 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v32 && gBreakOnError)
        {
          __int128 v46 = 3LL;
          int v47 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v21 & 2) == 0) {
            goto LABEL_38;
          }
          __int128 v46 = 2LL;
          int v47 = 880LL;
        }

        breakpoint_break((uint64_t)&v51, (volatile int *)v47, v46, v32, v9);
LABEL_38:
        float v33 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v31) defaultFbufStream];
        uint64_t v34 = (unsigned int *)((char *)v33 + 56);
        do
          unint64_t v35 = __ldaxr(v34);
        while (__stlxr(1u, v34));
        if (v35 == 1)
        {
          do
          {
            while (*v34 == 1)
              ;
            do
              unint64_t v36 = __ldaxr(v34);
            while (__stlxr(1u, v34));
          }

          while (v36 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v33, (GPUTools::FB::Fbuf *)&v51, *(unsigned int *)v51, 1);
        atomic_store(0, v34);
        do
        {
          unsigned int v37 = __ldaxr(v10);
          unsigned int v38 = v37 - 1;
        }

        while (__stlxr(v38, v10));
        if (gCheckGLErrors) {
          unsigned int v39 = v38 < 1;
        }
        else {
          unsigned int v39 = 1;
        }
        if (!v39) {
          handle_opengl_thread_conflict((const void **)v9);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    signed int v40 = __ldaxr(v10);
  while (__stlxr(v40 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, __GLsync *))(*(void *)(v9 + 24) + 6248LL))(a1, a2);
LABEL_51:
  if (v51) {
    free(v51);
  }
}

        unsigned int v31 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v26), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v31) {
          unsigned int v31 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v55, v32);
        }
        uint64_t v34 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
        if ((_DWORD)v34) {
          unsigned int v31 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v55, v34, v33);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v31), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v13, (uint64_t)&v55);
        }
        unint64_t v35 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)&v55);
        unint64_t v36 = *(unsigned int *)(v13 + 3404);
        if ((_DWORD)v36 && gBreakOnError)
        {
          uint64_t v50 = 3LL;
          __int128 v51 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v25 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v50 = 2LL;
          __int128 v51 = 885LL;
        }

        breakpoint_break((uint64_t)&v55, (volatile int *)v51, v50, v36, v13);
LABEL_38:
        unsigned int v37 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v35) defaultFbufStream];
        unsigned int v38 = (unsigned int *)((char *)v37 + 56);
        do
          unsigned int v39 = __ldaxr(v38);
        while (__stlxr(1u, v38));
        if (v39 == 1)
        {
          do
          {
            while (*v38 == 1)
              ;
            do
              signed int v40 = __ldaxr(v38);
            while (__stlxr(1u, v38));
          }

          while (v40 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v37, (GPUTools::FB::Fbuf *)&v55, *(unsigned int *)v55, 1);
        atomic_store(0, v38);
        do
        {
          BOOL v41 = __ldaxr(v14);
          unsigned int v42 = v41 - 1;
        }

        while (__stlxr(v42, v14));
        if (gCheckGLErrors) {
          uint64_t v43 = v42 < 1;
        }
        else {
          uint64_t v43 = 1;
        }
        if (!v43) {
          handle_opengl_thread_conflict((const void **)v13);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v20, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    id v44 = __ldaxr(v14);
  while (__stlxr(v44 - 1, v14));
  [(id)DYGetGLGuestAppClient(v18) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, __GLsync *, uint64_t, uint64_t))(*(void *)(v13 + 24) + 6264LL))( a1,  a2,  a3,  a4);
LABEL_51:
  if (v55) {
    free(v55);
  }
}

        unint64_t v35 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v30), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v35) {
          unint64_t v35 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v59, v36);
        }
        unsigned int v38 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v17 + 3404);
        if ((_DWORD)v38) {
          unint64_t v35 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v59, v38, v37);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v35), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v17, (uint64_t)&v59);
        }
        unsigned int v39 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v17 + 3480),  (GPUTools::FB::Fbuf *)(v17 + 3520),  (GPUTools::FB *)&v59);
        signed int v40 = *(unsigned int *)(v17 + 3404);
        if ((_DWORD)v40 && gBreakOnError)
        {
          uint64_t v54 = 3LL;
          unsigned int v55 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v29 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v54 = 2LL;
          unsigned int v55 = 855LL;
        }

        breakpoint_break((uint64_t)&v59, (volatile int *)v55, v54, v40, v17);
LABEL_38:
        BOOL v41 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v39) defaultFbufStream];
        unsigned int v42 = (unsigned int *)((char *)v41 + 56);
        do
          uint64_t v43 = __ldaxr(v42);
        while (__stlxr(1u, v42));
        if (v43 == 1)
        {
          do
          {
            while (*v42 == 1)
              ;
            do
              id v44 = __ldaxr(v42);
            while (__stlxr(1u, v42));
          }

          while (v44 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v41, (GPUTools::FB::Fbuf *)&v59, *(unsigned int *)v59, 1);
        atomic_store(0, v42);
        do
        {
          unsigned int v45 = __ldaxr(v18);
          __int128 v46 = v45 - 1;
        }

        while (__stlxr(v46, v18));
        if (gCheckGLErrors) {
          int v47 = v46 < 1;
        }
        else {
          int v47 = 1;
        }
        if (!v47) {
          handle_opengl_thread_conflict((const void **)v17);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v24, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    uint64_t v48 = __ldaxr(v18);
  while (__stlxr(v48 - 1, v18));
  [(id)DYGetGLGuestAppClient(v22) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 + 24) + 6328LL))( a1,  a2,  a3,  a4,  a5,  a6);
LABEL_51:
  if (v59) {
    free(v59);
  }
}

        unsigned int v31 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v26), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v31) {
          unsigned int v31 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v55, v32);
        }
        uint64_t v34 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
        if ((_DWORD)v34) {
          unsigned int v31 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v55, v34, v33);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v31), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v13, (uint64_t)&v55);
        }
        unint64_t v35 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)&v55);
        unint64_t v36 = *(unsigned int *)(v13 + 3404);
        if ((_DWORD)v36 && gBreakOnError)
        {
          uint64_t v50 = 3LL;
          __int128 v51 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v25 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v50 = 2LL;
          __int128 v51 = 857LL;
        }

        breakpoint_break((uint64_t)&v55, (volatile int *)v51, v50, v36, v13);
LABEL_38:
        unsigned int v37 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v35) defaultFbufStream];
        unsigned int v38 = (unsigned int *)((char *)v37 + 56);
        do
          unsigned int v39 = __ldaxr(v38);
        while (__stlxr(1u, v38));
        if (v39 == 1)
        {
          do
          {
            while (*v38 == 1)
              ;
            do
              signed int v40 = __ldaxr(v38);
            while (__stlxr(1u, v38));
          }

          while (v40 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v37, (GPUTools::FB::Fbuf *)&v55, *(unsigned int *)v55, 1);
        atomic_store(0, v38);
        do
        {
          BOOL v41 = __ldaxr(v14);
          unsigned int v42 = v41 - 1;
        }

        while (__stlxr(v42, v14));
        if (gCheckGLErrors) {
          uint64_t v43 = v42 < 1;
        }
        else {
          uint64_t v43 = 1;
        }
        if (!v43) {
          handle_opengl_thread_conflict((const void **)v13);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v20, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    id v44 = __ldaxr(v14);
  while (__stlxr(v44 - 1, v14));
  [(id)DYGetGLGuestAppClient(v18) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 + 24) + 6368LL))( a1,  a2,  a3,  a4);
LABEL_51:
  if (v55) {
    free(v55);
  }
}

        id v29 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v24), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v29) {
          id v29 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v53, v30);
        }
        unint64_t v32 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
        if ((_DWORD)v32) {
          id v29 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v53, v32, v31);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v11, (uint64_t)&v53);
        }
        float v33 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v53);
        uint64_t v34 = *(unsigned int *)(v11 + 3404);
        if ((_DWORD)v34 && gBreakOnError)
        {
          uint64_t v48 = 3LL;
          uint64_t v49 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v23 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v48 = 2LL;
          uint64_t v49 = 850LL;
        }

        breakpoint_break((uint64_t)&v53, (volatile int *)v49, v48, v34, v11);
LABEL_38:
        unint64_t v35 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v33) defaultFbufStream];
        unint64_t v36 = (unsigned int *)((char *)v35 + 56);
        do
          unsigned int v37 = __ldaxr(v36);
        while (__stlxr(1u, v36));
        if (v37 == 1)
        {
          do
          {
            while (*v36 == 1)
              ;
            do
              unsigned int v38 = __ldaxr(v36);
            while (__stlxr(1u, v36));
          }

          while (v38 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v35, (GPUTools::FB::Fbuf *)&v53, *(unsigned int *)v53, 1);
        atomic_store(0, v36);
        do
        {
          unsigned int v39 = __ldaxr(v12);
          signed int v40 = v39 - 1;
        }

        while (__stlxr(v40, v12));
        if (gCheckGLErrors) {
          BOOL v41 = v40 < 1;
        }
        else {
          BOOL v41 = 1;
        }
        if (!v41) {
          handle_opengl_thread_conflict((const void **)v11);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v18, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    unsigned int v42 = __ldaxr(v12);
  while (__stlxr(v42 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t))(*(void *)(v11 + 24) + 6424LL))(a1, a2, a3);
LABEL_51:
  if (v53) {
    free(v53);
  }
}

    id v29 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v25), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v29) {
      id v29 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v49, v30);
    }
    unint64_t v32 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v32) {
      id v29 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v49, v32, v31);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)v49);
    }
    float v33 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)v49);
    uint64_t v34 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v34 && gBreakOnError)
    {
      id v44 = 3LL;
      unsigned int v45 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v24 & 2) == 0) {
        goto LABEL_38;
      }
      id v44 = 2LL;
      unsigned int v45 = 895LL;
    }

    breakpoint_break((uint64_t)v49, (volatile int *)v45, v44, v34, v11);
LABEL_38:
    unint64_t v35 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v33) defaultFbufStream];
    unint64_t v36 = (unsigned int *)((char *)v35 + 56);
    do
      unsigned int v37 = __ldaxr(v36);
    while (__stlxr(1u, v36));
    if (v37 == 1)
    {
      do
      {
        while (*v36 == 1)
          ;
        do
          unsigned int v38 = __ldaxr(v36);
        while (__stlxr(1u, v36));
      }

      while (v38 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v35, (GPUTools::FB::Fbuf *)v49, *(unsigned int *)v49[0], 1);
    atomic_store(0, v36);
    ReleaseStringToEncode(StringToEncode, a3);
    goto LABEL_45;
  }

  do
  {
LABEL_45:
    unsigned int v39 = __ldaxr(v12);
    signed int v40 = v39 - 1;
  }

  while (__stlxr(v40, v12));
  if (gCheckGLErrors) {
    BOOL v41 = v40 < 1;
  }
  else {
    BOOL v41 = 1;
  }
  if (!v41) {
    handle_opengl_thread_conflict((const void **)v11);
  }
LABEL_51:
  if (v49[0]) {
    free(v49[0]);
  }
}

        id v29 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v24), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v29) {
          id v29 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v54, v30);
        }
        unint64_t v32 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
        if ((_DWORD)v32) {
          id v29 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v54, v32, v31);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v11, (uint64_t)&v54);
        }
        float v33 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v54);
        uint64_t v34 = *(unsigned int *)(v11 + 3404);
        if ((_DWORD)v34 && gBreakOnError)
        {
          uint64_t v48 = 3LL;
          uint64_t v49 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v23 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v48 = 2LL;
          uint64_t v49 = 886LL;
        }

        breakpoint_break((uint64_t)&v54, (volatile int *)v49, v48, v34, v11);
LABEL_38:
        unint64_t v35 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v33) defaultFbufStream];
        unint64_t v36 = (unsigned int *)((char *)v35 + 56);
        do
          unsigned int v37 = __ldaxr(v36);
        while (__stlxr(1u, v36));
        if (v37 == 1)
        {
          do
          {
            while (*v36 == 1)
              ;
            do
              unsigned int v38 = __ldaxr(v36);
            while (__stlxr(1u, v36));
          }

          while (v38 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v35, (GPUTools::FB::Fbuf *)&v54, *(unsigned int *)v54, 1);
        atomic_store(0, v36);
        if (!gCheckGLErrors) {
          check_errors(v11);
        }
        if (!*(_DWORD *)(v11 + 3404)) {
          wrapper_cache_pipeline_active_shader_program((ContextInfo *)v11, a2, a3, v52);
        }
        do
        {
          unsigned int v39 = __ldaxr(v12);
          signed int v40 = v39 - 1;
        }

        while (__stlxr(v40, v12));
        if (gCheckGLErrors) {
          BOOL v41 = v40 < 1;
        }
        else {
          BOOL v41 = 1;
        }
        if (!v41) {
          handle_opengl_thread_conflict((const void **)v11);
        }
        goto LABEL_54;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v18, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    unsigned int v42 = __ldaxr(v12);
  while (__stlxr(v42 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t))(*(void *)(v11 + 24) + 6560LL))(a1, a2, a3);
LABEL_54:
  if (v54) {
    free(v54);
  }
}

        unint64_t v27 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v22), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v27) {
          unint64_t v27 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v51, v28);
        }
        float v30 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
        if ((_DWORD)v30) {
          unint64_t v27 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v51, v30, v29);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v9, (uint64_t)&v51);
        }
        unsigned int v31 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v51);
        unint64_t v32 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v32 && gBreakOnError)
        {
          __int128 v46 = 3LL;
          int v47 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v21 & 2) == 0) {
            goto LABEL_38;
          }
          __int128 v46 = 2LL;
          int v47 = 887LL;
        }

        breakpoint_break((uint64_t)&v51, (volatile int *)v47, v46, v32, v9);
LABEL_38:
        float v33 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v31) defaultFbufStream];
        uint64_t v34 = (unsigned int *)((char *)v33 + 56);
        do
          unint64_t v35 = __ldaxr(v34);
        while (__stlxr(1u, v34));
        if (v35 == 1)
        {
          do
          {
            while (*v34 == 1)
              ;
            do
              unint64_t v36 = __ldaxr(v34);
            while (__stlxr(1u, v34));
          }

          while (v36 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v33, (GPUTools::FB::Fbuf *)&v51, *(unsigned int *)v51, 1);
        atomic_store(0, v34);
        do
        {
          unsigned int v37 = __ldaxr(v10);
          unsigned int v38 = v37 - 1;
        }

        while (__stlxr(v38, v10));
        if (gCheckGLErrors) {
          unsigned int v39 = v38 < 1;
        }
        else {
          unsigned int v39 = 1;
        }
        if (!v39) {
          handle_opengl_thread_conflict((const void **)v9);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    signed int v40 = __ldaxr(v10);
  while (__stlxr(v40 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 6576LL))(a1, a2);
LABEL_51:
  if (v51) {
    free(v51);
  }
}

        float v33 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v33) {
          float v33 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v57, v34);
        }
        unint64_t v36 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v15 + 3404);
        if ((_DWORD)v36) {
          float v33 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v57, v36, v35);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v15, (uint64_t)&v57);
        }
        unsigned int v37 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v15 + 3480),  (GPUTools::FB::Fbuf *)(v15 + 3520),  (GPUTools::FB *)&v57);
        unsigned int v38 = *(unsigned int *)(v15 + 3404);
        if ((_DWORD)v38 && gBreakOnError)
        {
          __uint64_t v52 = 3LL;
          char v53 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v27 & 2) == 0) {
            goto LABEL_38;
          }
          __uint64_t v52 = 2LL;
          char v53 = 893LL;
        }

        breakpoint_break((uint64_t)&v57, (volatile int *)v53, v52, v38, v15);
LABEL_38:
        unsigned int v39 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v37) defaultFbufStream];
        signed int v40 = (unsigned int *)((char *)v39 + 56);
        do
          BOOL v41 = __ldaxr(v40);
        while (__stlxr(1u, v40));
        if (v41 == 1)
        {
          do
          {
            while (*v40 == 1)
              ;
            do
              unsigned int v42 = __ldaxr(v40);
            while (__stlxr(1u, v40));
          }

          while (v42 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v39, (GPUTools::FB::Fbuf *)&v57, *(unsigned int *)v57, 1);
        atomic_store(0, v40);
        do
        {
          uint64_t v43 = __ldaxr(v16);
          id v44 = v43 - 1;
        }

        while (__stlxr(v44, v16));
        if (gCheckGLErrors) {
          unsigned int v45 = v44 < 1;
        }
        else {
          unsigned int v45 = 1;
        }
        if (!v45) {
          handle_opengl_thread_conflict((const void **)v15);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v22, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    __int128 v46 = __ldaxr(v16);
  while (__stlxr(v46 - 1, v16));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, int *, char *))(*(void *)(v15 + 24) + 6624LL))( a1,  a2,  a3,  a4,  a5);
LABEL_51:
  if (v57) {
    free(v57);
  }
}

        uint64_t v25 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v20), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v25) {
          uint64_t v25 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v49, v26);
        }
        unint64_t v28 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v7 + 3404);
        if ((_DWORD)v28) {
          uint64_t v25 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v49, v28, v27);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v25), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v7, (uint64_t)&v49);
        }
        id v29 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v7 + 3480),  (GPUTools::FB::Fbuf *)(v7 + 3520),  (GPUTools::FB *)&v49);
        float v30 = *(unsigned int *)(v7 + 3404);
        if ((_DWORD)v30 && gBreakOnError)
        {
          id v44 = 3LL;
          unsigned int v45 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v19 & 2) == 0) {
            goto LABEL_38;
          }
          id v44 = 2LL;
          unsigned int v45 = 969LL;
        }

        breakpoint_break((uint64_t)&v49, (volatile int *)v45, v44, v30, v7);
LABEL_38:
        unsigned int v31 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v29) defaultFbufStream];
        unint64_t v32 = (unsigned int *)((char *)v31 + 56);
        do
          float v33 = __ldaxr(v32);
        while (__stlxr(1u, v32));
        if (v33 == 1)
        {
          do
          {
            while (*v32 == 1)
              ;
            do
              uint64_t v34 = __ldaxr(v32);
            while (__stlxr(1u, v32));
          }

          while (v34 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v31, (GPUTools::FB::Fbuf *)&v49, *(unsigned int *)v49, 1);
        atomic_store(0, v32);
        do
        {
          unint64_t v35 = __ldaxr(v8);
          unint64_t v36 = v35 - 1;
        }

        while (__stlxr(v36, v8));
        if (gCheckGLErrors) {
          unsigned int v37 = v36 < 1;
        }
        else {
          unsigned int v37 = 1;
        }
        if (!v37) {
          handle_opengl_thread_conflict((const void **)v7);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v14, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    unsigned int v38 = __ldaxr(v8);
  while (__stlxr(v38 - 1, v8));
  [(id)DYGetGLGuestAppClient(v12) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *))(*(void *)(v7 + 24) + 6992LL))(a1);
LABEL_51:
  if (v49) {
    free(v49);
  }
}

        unint64_t v35 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v30), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v35) {
          unint64_t v35 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v59, v36);
        }
        unsigned int v38 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v17 + 3404);
        if ((_DWORD)v38) {
          unint64_t v35 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v59, v38, v37);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v35), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v17, (uint64_t)&v59);
        }
        unsigned int v39 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v17 + 3480),  (GPUTools::FB::Fbuf *)(v17 + 3520),  (GPUTools::FB *)&v59);
        signed int v40 = *(unsigned int *)(v17 + 3404);
        if ((_DWORD)v40 && gBreakOnError)
        {
          uint64_t v54 = 3LL;
          unsigned int v55 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v29 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v54 = 2LL;
          unsigned int v55 = 970LL;
        }

        breakpoint_break((uint64_t)&v59, (volatile int *)v55, v54, v40, v17);
LABEL_38:
        BOOL v41 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v39) defaultFbufStream];
        unsigned int v42 = (unsigned int *)((char *)v41 + 56);
        do
          uint64_t v43 = __ldaxr(v42);
        while (__stlxr(1u, v42));
        if (v43 == 1)
        {
          do
          {
            while (*v42 == 1)
              ;
            do
              id v44 = __ldaxr(v42);
            while (__stlxr(1u, v42));
          }

          while (v44 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v41, (GPUTools::FB::Fbuf *)&v59, *(unsigned int *)v59, 1);
        atomic_store(0, v42);
        do
        {
          unsigned int v45 = __ldaxr(v18);
          __int128 v46 = v45 - 1;
        }

        while (__stlxr(v46, v18));
        if (gCheckGLErrors) {
          int v47 = v46 < 1;
        }
        else {
          int v47 = 1;
        }
        if (!v47) {
          handle_opengl_thread_conflict((const void **)v17);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v24, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    uint64_t v48 = __ldaxr(v18);
  while (__stlxr(v48 - 1, v18));
  [(id)DYGetGLGuestAppClient(v22) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, unsigned int *, uint64_t, const void *, uint64_t))(*(void *)(v17 + 24) + 7000LL))( a1,  a2,  a3,  a4,  a5,  a6);
LABEL_51:
  if (v59) {
    free(v59);
  }
}

        id v29 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v24), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v29) {
          id v29 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v53, v30);
        }
        unint64_t v32 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
        if ((_DWORD)v32) {
          id v29 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v53, v32, v31);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v11, (uint64_t)&v53);
        }
        float v33 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v53);
        uint64_t v34 = *(unsigned int *)(v11 + 3404);
        if ((_DWORD)v34 && gBreakOnError)
        {
          uint64_t v48 = 3LL;
          uint64_t v49 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v23 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v48 = 2LL;
          uint64_t v49 = 767LL;
        }

        breakpoint_break((uint64_t)&v53, (volatile int *)v49, v48, v34, v11);
LABEL_38:
        unint64_t v35 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v33) defaultFbufStream];
        unint64_t v36 = (unsigned int *)((char *)v35 + 56);
        do
          unsigned int v37 = __ldaxr(v36);
        while (__stlxr(1u, v36));
        if (v37 == 1)
        {
          do
          {
            while (*v36 == 1)
              ;
            do
              unsigned int v38 = __ldaxr(v36);
            while (__stlxr(1u, v36));
          }

          while (v38 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v35, (GPUTools::FB::Fbuf *)&v53, *(unsigned int *)v53, 1);
        atomic_store(0, v36);
        do
        {
          unsigned int v39 = __ldaxr(v12);
          signed int v40 = v39 - 1;
        }

        while (__stlxr(v40, v12));
        if (gCheckGLErrors) {
          BOOL v41 = v40 < 1;
        }
        else {
          BOOL v41 = 1;
        }
        if (!v41) {
          handle_opengl_thread_conflict((const void **)v11);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v18, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    unsigned int v42 = __ldaxr(v12);
  while (__stlxr(v42 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, float, float))(*(void *)(v11 + 24) + 7016LL))(a1, a2, a3);
LABEL_51:
  if (v53) {
    free(v53);
  }
}

        unint64_t v27 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v22), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v27) {
          unint64_t v27 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v51, v28);
        }
        float v30 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
        if ((_DWORD)v30) {
          unint64_t v27 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v51, v30, v29);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v9, (uint64_t)&v51);
        }
        unsigned int v31 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v51);
        unint64_t v32 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v32 && gBreakOnError)
        {
          __int128 v46 = 3LL;
          int v47 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v21 & 2) == 0) {
            goto LABEL_38;
          }
          __int128 v46 = 2LL;
          int v47 = 761LL;
        }

        breakpoint_break((uint64_t)&v51, (volatile int *)v47, v46, v32, v9);
LABEL_38:
        float v33 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v31) defaultFbufStream];
        uint64_t v34 = (unsigned int *)((char *)v33 + 56);
        do
          unint64_t v35 = __ldaxr(v34);
        while (__stlxr(1u, v34));
        if (v35 == 1)
        {
          do
          {
            while (*v34 == 1)
              ;
            do
              unint64_t v36 = __ldaxr(v34);
            while (__stlxr(1u, v34));
          }

          while (v36 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v33, (GPUTools::FB::Fbuf *)&v51, *(unsigned int *)v51, 1);
        atomic_store(0, v34);
        do
        {
          unsigned int v37 = __ldaxr(v10);
          unsigned int v38 = v37 - 1;
        }

        while (__stlxr(v38, v10));
        if (gCheckGLErrors) {
          unsigned int v39 = v38 < 1;
        }
        else {
          unsigned int v39 = 1;
        }
        if (!v39) {
          handle_opengl_thread_conflict((const void **)v9);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    signed int v40 = __ldaxr(v10);
  while (__stlxr(v40 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, float))(*(void *)(v9 + 24) + 7024LL))(a1, a2);
LABEL_51:
  if (v51) {
    free(v51);
  }
}

        id v29 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v24), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v29) {
          id v29 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v53, v30);
        }
        unint64_t v32 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
        if ((_DWORD)v32) {
          id v29 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v53, v32, v31);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v11, (uint64_t)&v53);
        }
        float v33 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v53);
        uint64_t v34 = *(unsigned int *)(v11 + 3404);
        if ((_DWORD)v34 && gBreakOnError)
        {
          uint64_t v48 = 3LL;
          uint64_t v49 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v23 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v48 = 2LL;
          uint64_t v49 = 980LL;
        }

        breakpoint_break((uint64_t)&v53, (volatile int *)v49, v48, v34, v11);
LABEL_38:
        unint64_t v35 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v33) defaultFbufStream];
        unint64_t v36 = (unsigned int *)((char *)v35 + 56);
        do
          unsigned int v37 = __ldaxr(v36);
        while (__stlxr(1u, v36));
        if (v37 == 1)
        {
          do
          {
            while (*v36 == 1)
              ;
            do
              unsigned int v38 = __ldaxr(v36);
            while (__stlxr(1u, v36));
          }

          while (v38 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v35, (GPUTools::FB::Fbuf *)&v53, *(unsigned int *)v53, 1);
        atomic_store(0, v36);
        do
        {
          unsigned int v39 = __ldaxr(v12);
          signed int v40 = v39 - 1;
        }

        while (__stlxr(v40, v12));
        if (gCheckGLErrors) {
          BOOL v41 = v40 < 1;
        }
        else {
          BOOL v41 = 1;
        }
        if (!v41) {
          handle_opengl_thread_conflict((const void **)v11);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v18, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    unsigned int v42 = __ldaxr(v12);
  while (__stlxr(v42 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t))(*(void *)(v11 + 24) + 7232LL))(a1, a2, a3);
LABEL_51:
  if (v53) {
    free(v53);
  }
}

        uint64_t v25 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v20), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v25) {
          uint64_t v25 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v49, v26);
        }
        unint64_t v28 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v7 + 3404);
        if ((_DWORD)v28) {
          uint64_t v25 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v49, v28, v27);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v25), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v7, (uint64_t)&v49);
        }
        id v29 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v7 + 3480),  (GPUTools::FB::Fbuf *)(v7 + 3520),  (GPUTools::FB *)&v49);
        float v30 = *(unsigned int *)(v7 + 3404);
        if ((_DWORD)v30 && gBreakOnError)
        {
          id v44 = 3LL;
          unsigned int v45 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v19 & 2) == 0) {
            goto LABEL_38;
          }
          id v44 = 2LL;
          unsigned int v45 = 1004LL;
        }

        breakpoint_break((uint64_t)&v49, (volatile int *)v45, v44, v30, v7);
LABEL_38:
        unsigned int v31 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v29) defaultFbufStream];
        unint64_t v32 = (unsigned int *)((char *)v31 + 56);
        do
          float v33 = __ldaxr(v32);
        while (__stlxr(1u, v32));
        if (v33 == 1)
        {
          do
          {
            while (*v32 == 1)
              ;
            do
              uint64_t v34 = __ldaxr(v32);
            while (__stlxr(1u, v32));
          }

          while (v34 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v31, (GPUTools::FB::Fbuf *)&v49, *(unsigned int *)v49, 1);
        atomic_store(0, v32);
        do
        {
          unint64_t v35 = __ldaxr(v8);
          unint64_t v36 = v35 - 1;
        }

        while (__stlxr(v36, v8));
        if (gCheckGLErrors) {
          unsigned int v37 = v36 < 1;
        }
        else {
          unsigned int v37 = 1;
        }
        if (!v37) {
          handle_opengl_thread_conflict((const void **)v7);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v14, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    unsigned int v38 = __ldaxr(v8);
  while (__stlxr(v38 - 1, v8));
  [(id)DYGetGLGuestAppClient(v12) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *))(*(void *)(v7 + 24) + 7256LL))(a1);
LABEL_51:
  if (v49) {
    free(v49);
  }
}

        uint64_t v25 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v20), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v25) {
          uint64_t v25 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v49, v26);
        }
        unint64_t v28 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v7 + 3404);
        if ((_DWORD)v28) {
          uint64_t v25 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v49, v28, v27);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v25), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v7, (uint64_t)&v49);
        }
        id v29 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v7 + 3480),  (GPUTools::FB::Fbuf *)(v7 + 3520),  (GPUTools::FB *)&v49);
        float v30 = *(unsigned int *)(v7 + 3404);
        if ((_DWORD)v30 && gBreakOnError)
        {
          id v44 = 3LL;
          unsigned int v45 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v19 & 2) == 0) {
            goto LABEL_38;
          }
          id v44 = 2LL;
          unsigned int v45 = 1005LL;
        }

        breakpoint_break((uint64_t)&v49, (volatile int *)v45, v44, v30, v7);
LABEL_38:
        unsigned int v31 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v29) defaultFbufStream];
        unint64_t v32 = (unsigned int *)((char *)v31 + 56);
        do
          float v33 = __ldaxr(v32);
        while (__stlxr(1u, v32));
        if (v33 == 1)
        {
          do
          {
            while (*v32 == 1)
              ;
            do
              uint64_t v34 = __ldaxr(v32);
            while (__stlxr(1u, v32));
          }

          while (v34 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v31, (GPUTools::FB::Fbuf *)&v49, *(unsigned int *)v49, 1);
        atomic_store(0, v32);
        do
        {
          unint64_t v35 = __ldaxr(v8);
          unint64_t v36 = v35 - 1;
        }

        while (__stlxr(v36, v8));
        if (gCheckGLErrors) {
          unsigned int v37 = v36 < 1;
        }
        else {
          unsigned int v37 = 1;
        }
        if (!v37) {
          handle_opengl_thread_conflict((const void **)v7);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v14, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    unsigned int v38 = __ldaxr(v8);
  while (__stlxr(v38 - 1, v8));
  [(id)DYGetGLGuestAppClient(v12) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *))(*(void *)(v7 + 24) + 7264LL))(a1);
LABEL_51:
  if (v49) {
    free(v49);
  }
}

        id v29 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v24), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v29) {
          id v29 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v53, v30);
        }
        unint64_t v32 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
        if ((_DWORD)v32) {
          id v29 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v53, v32, v31);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v11, (uint64_t)&v53);
        }
        float v33 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v53);
        uint64_t v34 = *(unsigned int *)(v11 + 3404);
        if ((_DWORD)v34 && gBreakOnError)
        {
          uint64_t v48 = 3LL;
          uint64_t v49 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v23 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v48 = 2LL;
          uint64_t v49 = 759LL;
        }

        breakpoint_break((uint64_t)&v53, (volatile int *)v49, v48, v34, v11);
LABEL_38:
        unint64_t v35 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v33) defaultFbufStream];
        unint64_t v36 = (unsigned int *)((char *)v35 + 56);
        do
          unsigned int v37 = __ldaxr(v36);
        while (__stlxr(1u, v36));
        if (v37 == 1)
        {
          do
          {
            while (*v36 == 1)
              ;
            do
              unsigned int v38 = __ldaxr(v36);
            while (__stlxr(1u, v36));
          }

          while (v38 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v35, (GPUTools::FB::Fbuf *)&v53, *(unsigned int *)v53, 1);
        atomic_store(0, v36);
        do
        {
          unsigned int v39 = __ldaxr(v12);
          signed int v40 = v39 - 1;
        }

        while (__stlxr(v40, v12));
        if (gCheckGLErrors) {
          BOOL v41 = v40 < 1;
        }
        else {
          BOOL v41 = 1;
        }
        if (!v41) {
          handle_opengl_thread_conflict((const void **)v11);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v18, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    unsigned int v42 = __ldaxr(v12);
  while (__stlxr(v42 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t))(*(void *)(v11 + 24) + 7744LL))(a1, a2, a3);
LABEL_51:
  if (v53) {
    free(v53);
  }
}

        float v33 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v33) {
          float v33 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v57, v34);
        }
        unint64_t v36 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v15 + 3404);
        if ((_DWORD)v36) {
          float v33 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v57, v36, v35);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v15, (uint64_t)&v57);
        }
        unsigned int v37 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v15 + 3480),  (GPUTools::FB::Fbuf *)(v15 + 3520),  (GPUTools::FB *)&v57);
        unsigned int v38 = *(unsigned int *)(v15 + 3404);
        if ((_DWORD)v38 && gBreakOnError)
        {
          __uint64_t v52 = 3LL;
          char v53 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v27 & 2) == 0) {
            goto LABEL_38;
          }
          __uint64_t v52 = 2LL;
          char v53 = 760LL;
        }

        breakpoint_break((uint64_t)&v57, (volatile int *)v53, v52, v38, v15);
LABEL_38:
        unsigned int v39 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v37) defaultFbufStream];
        signed int v40 = (unsigned int *)((char *)v39 + 56);
        do
          BOOL v41 = __ldaxr(v40);
        while (__stlxr(1u, v40));
        if (v41 == 1)
        {
          do
          {
            while (*v40 == 1)
              ;
            do
              unsigned int v42 = __ldaxr(v40);
            while (__stlxr(1u, v40));
          }

          while (v42 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v39, (GPUTools::FB::Fbuf *)&v57, *(unsigned int *)v57, 1);
        atomic_store(0, v40);
        do
        {
          uint64_t v43 = __ldaxr(v16);
          id v44 = v43 - 1;
        }

        while (__stlxr(v44, v16));
        if (gCheckGLErrors) {
          unsigned int v45 = v44 < 1;
        }
        else {
          unsigned int v45 = 1;
        }
        if (!v45) {
          handle_opengl_thread_conflict((const void **)v15);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v22, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    __int128 v46 = __ldaxr(v16);
  while (__stlxr(v46 - 1, v16));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 + 24) + 7752LL))( a1,  a2,  a3,  a4,  a5);
LABEL_51:
  if (v57) {
    free(v57);
  }
}

        unint64_t v27 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v22), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v27) {
          unint64_t v27 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v51, v28);
        }
        float v30 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
        if ((_DWORD)v30) {
          unint64_t v27 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v51, v30, v29);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v9, (uint64_t)&v51);
        }
        unsigned int v31 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v51);
        unint64_t v32 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v32 && gBreakOnError)
        {
          __int128 v46 = 3LL;
          int v47 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v21 & 2) == 0) {
            goto LABEL_38;
          }
          __int128 v46 = 2LL;
          int v47 = 762LL;
        }

        breakpoint_break((uint64_t)&v51, (volatile int *)v47, v46, v32, v9);
LABEL_38:
        float v33 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v31) defaultFbufStream];
        uint64_t v34 = (unsigned int *)((char *)v33 + 56);
        do
          unint64_t v35 = __ldaxr(v34);
        while (__stlxr(1u, v34));
        if (v35 == 1)
        {
          do
          {
            while (*v34 == 1)
              ;
            do
              unint64_t v36 = __ldaxr(v34);
            while (__stlxr(1u, v34));
          }

          while (v36 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v33, (GPUTools::FB::Fbuf *)&v51, *(unsigned int *)v51, 1);
        atomic_store(0, v34);
        do
        {
          unsigned int v37 = __ldaxr(v10);
          unsigned int v38 = v37 - 1;
        }

        while (__stlxr(v38, v10));
        if (gCheckGLErrors) {
          unsigned int v39 = v38 < 1;
        }
        else {
          unsigned int v39 = 1;
        }
        if (!v39) {
          handle_opengl_thread_conflict((const void **)v9);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    signed int v40 = __ldaxr(v10);
  while (__stlxr(v40 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 7760LL))(a1, a2);
LABEL_51:
  if (v51) {
    free(v51);
  }
}

        id v29 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v24), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v29) {
          id v29 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v53, v30);
        }
        unint64_t v32 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
        if ((_DWORD)v32) {
          id v29 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v53, v32, v31);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v11, (uint64_t)&v53);
        }
        float v33 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v53);
        uint64_t v34 = *(unsigned int *)(v11 + 3404);
        if ((_DWORD)v34 && gBreakOnError)
        {
          uint64_t v48 = 3LL;
          uint64_t v49 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v23 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v48 = 2LL;
          uint64_t v49 = 763LL;
        }

        breakpoint_break((uint64_t)&v53, (volatile int *)v49, v48, v34, v11);
LABEL_38:
        unint64_t v35 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v33) defaultFbufStream];
        unint64_t v36 = (unsigned int *)((char *)v35 + 56);
        do
          unsigned int v37 = __ldaxr(v36);
        while (__stlxr(1u, v36));
        if (v37 == 1)
        {
          do
          {
            while (*v36 == 1)
              ;
            do
              unsigned int v38 = __ldaxr(v36);
            while (__stlxr(1u, v36));
          }

          while (v38 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v35, (GPUTools::FB::Fbuf *)&v53, *(unsigned int *)v53, 1);
        atomic_store(0, v36);
        do
        {
          unsigned int v39 = __ldaxr(v12);
          signed int v40 = v39 - 1;
        }

        while (__stlxr(v40, v12));
        if (gCheckGLErrors) {
          BOOL v41 = v40 < 1;
        }
        else {
          BOOL v41 = 1;
        }
        if (!v41) {
          handle_opengl_thread_conflict((const void **)v11);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v18, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    unsigned int v42 = __ldaxr(v12);
  while (__stlxr(v42 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, const float *))(*(void *)(v11 + 24) + 7768LL))(a1, a2, a3);
LABEL_51:
  if (v53) {
    free(v53);
  }
}

        id v29 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v24), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v29) {
          id v29 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v53, v30);
        }
        unint64_t v32 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
        if ((_DWORD)v32) {
          id v29 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v53, v32, v31);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v11, (uint64_t)&v53);
        }
        float v33 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v53);
        uint64_t v34 = *(unsigned int *)(v11 + 3404);
        if ((_DWORD)v34 && gBreakOnError)
        {
          uint64_t v48 = 3LL;
          uint64_t v49 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v23 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v48 = 2LL;
          uint64_t v49 = 764LL;
        }

        breakpoint_break((uint64_t)&v53, (volatile int *)v49, v48, v34, v11);
LABEL_38:
        unint64_t v35 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v33) defaultFbufStream];
        unint64_t v36 = (unsigned int *)((char *)v35 + 56);
        do
          unsigned int v37 = __ldaxr(v36);
        while (__stlxr(1u, v36));
        if (v37 == 1)
        {
          do
          {
            while (*v36 == 1)
              ;
            do
              unsigned int v38 = __ldaxr(v36);
            while (__stlxr(1u, v36));
          }

          while (v38 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v35, (GPUTools::FB::Fbuf *)&v53, *(unsigned int *)v53, 1);
        atomic_store(0, v36);
        do
        {
          unsigned int v39 = __ldaxr(v12);
          signed int v40 = v39 - 1;
        }

        while (__stlxr(v40, v12));
        if (gCheckGLErrors) {
          BOOL v41 = v40 < 1;
        }
        else {
          BOOL v41 = 1;
        }
        if (!v41) {
          handle_opengl_thread_conflict((const void **)v11);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v18, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    unsigned int v42 = __ldaxr(v12);
  while (__stlxr(v42 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, const int *))(*(void *)(v11 + 24) + 7776LL))(a1, a2, a3);
LABEL_51:
  if (v53) {
    free(v53);
  }
}

        float v33 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v33) {
          float v33 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v57, v34);
        }
        unint64_t v36 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v15 + 3404);
        if ((_DWORD)v36) {
          float v33 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v57, v36, v35);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v15, (uint64_t)&v57);
        }
        unsigned int v37 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v15 + 3480),  (GPUTools::FB::Fbuf *)(v15 + 3520),  (GPUTools::FB *)&v57);
        unsigned int v38 = *(unsigned int *)(v15 + 3404);
        if ((_DWORD)v38 && gBreakOnError)
        {
          __uint64_t v52 = 3LL;
          char v53 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v27 & 2) == 0) {
            goto LABEL_38;
          }
          __uint64_t v52 = 2LL;
          char v53 = 765LL;
        }

        breakpoint_break((uint64_t)&v57, (volatile int *)v53, v52, v38, v15);
LABEL_38:
        unsigned int v39 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v37) defaultFbufStream];
        signed int v40 = (unsigned int *)((char *)v39 + 56);
        do
          BOOL v41 = __ldaxr(v40);
        while (__stlxr(1u, v40));
        if (v41 == 1)
        {
          do
          {
            while (*v40 == 1)
              ;
            do
              unsigned int v42 = __ldaxr(v40);
            while (__stlxr(1u, v40));
          }

          while (v42 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v39, (GPUTools::FB::Fbuf *)&v57, *(unsigned int *)v57, 1);
        atomic_store(0, v40);
        do
        {
          uint64_t v43 = __ldaxr(v16);
          id v44 = v43 - 1;
        }

        while (__stlxr(v44, v16));
        if (gCheckGLErrors) {
          unsigned int v45 = v44 < 1;
        }
        else {
          unsigned int v45 = 1;
        }
        if (!v45) {
          handle_opengl_thread_conflict((const void **)v15);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v22, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    __int128 v46 = __ldaxr(v16);
  while (__stlxr(v46 - 1, v16));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 + 24) + 7784LL))( a1,  a2,  a3,  a4,  a5);
LABEL_51:
  if (v57) {
    free(v57);
  }
}

        id v29 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v24), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v29) {
          id v29 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v53, v30);
        }
        unint64_t v32 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
        if ((_DWORD)v32) {
          id v29 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v53, v32, v31);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v11, (uint64_t)&v53);
        }
        float v33 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v53);
        uint64_t v34 = *(unsigned int *)(v11 + 3404);
        if ((_DWORD)v34 && gBreakOnError)
        {
          uint64_t v48 = 3LL;
          uint64_t v49 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v23 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v48 = 2LL;
          uint64_t v49 = 768LL;
        }

        breakpoint_break((uint64_t)&v53, (volatile int *)v49, v48, v34, v11);
LABEL_38:
        unint64_t v35 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v33) defaultFbufStream];
        unint64_t v36 = (unsigned int *)((char *)v35 + 56);
        do
          unsigned int v37 = __ldaxr(v36);
        while (__stlxr(1u, v36));
        if (v37 == 1)
        {
          do
          {
            while (*v36 == 1)
              ;
            do
              unsigned int v38 = __ldaxr(v36);
            while (__stlxr(1u, v36));
          }

          while (v38 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v35, (GPUTools::FB::Fbuf *)&v53, *(unsigned int *)v53, 1);
        atomic_store(0, v36);
        do
        {
          unsigned int v39 = __ldaxr(v12);
          signed int v40 = v39 - 1;
        }

        while (__stlxr(v40, v12));
        if (gCheckGLErrors) {
          BOOL v41 = v40 < 1;
        }
        else {
          BOOL v41 = 1;
        }
        if (!v41) {
          handle_opengl_thread_conflict((const void **)v11);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v18, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    unsigned int v42 = __ldaxr(v12);
  while (__stlxr(v42 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t))(*(void *)(v11 + 24) + 7792LL))(a1, a2, a3);
LABEL_51:
  if (v53) {
    free(v53);
  }
}

        unsigned int v37 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v37) {
          unsigned int v37 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v61, v38);
        }
        signed int v40 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v19 + 3404);
        if ((_DWORD)v40) {
          unsigned int v37 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v61, v40, v39);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v37), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v19, (uint64_t)&v61);
        }
        BOOL v41 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v19 + 3480),  (GPUTools::FB::Fbuf *)(v19 + 3520),  (GPUTools::FB *)&v61);
        unsigned int v42 = *(unsigned int *)(v19 + 3404);
        if ((_DWORD)v42 && gBreakOnError)
        {
          uint64_t v56 = 3LL;
          char v57 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v31 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v56 = 2LL;
          char v57 = 779LL;
        }

        breakpoint_break((uint64_t)&v61, (volatile int *)v57, v56, v42, v19);
LABEL_38:
        uint64_t v43 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v41) defaultFbufStream];
        id v44 = (unsigned int *)((char *)v43 + 56);
        do
          unsigned int v45 = __ldaxr(v44);
        while (__stlxr(1u, v44));
        if (v45 == 1)
        {
          do
          {
            while (*v44 == 1)
              ;
            do
              __int128 v46 = __ldaxr(v44);
            while (__stlxr(1u, v44));
          }

          while (v46 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v43, (GPUTools::FB::Fbuf *)&v61, *(unsigned int *)v61, 1);
        atomic_store(0, v44);
        do
        {
          int v47 = __ldaxr(v20);
          uint64_t v48 = v47 - 1;
        }

        while (__stlxr(v48, v20));
        if (gCheckGLErrors) {
          uint64_t v49 = v48 < 1;
        }
        else {
          uint64_t v49 = 1;
        }
        if (!v49) {
          handle_opengl_thread_conflict((const void **)v19);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v26, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    uint64_t v50 = __ldaxr(v20);
  while (__stlxr(v50 - 1, v20));
  [(id)DYGetGLGuestAppClient(v24) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, float, float, float, float, float, float))(*(void *)(v19 + 24) + 7816LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7);
LABEL_51:
  if (v61) {
    free(v61);
  }
}

        unint64_t v36 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v31), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v36) {
          unint64_t v36 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v61, v37);
        }
        unsigned int v39 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v18 + 3404);
        if ((_DWORD)v39) {
          unint64_t v36 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v61, v39, v38);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v36), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v18, (uint64_t)&v61);
        }
        signed int v40 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v18 + 3480),  (GPUTools::FB::Fbuf *)(v18 + 3520),  (GPUTools::FB *)&v61);
        BOOL v41 = *(unsigned int *)(v18 + 3404);
        if ((_DWORD)v41 && gBreakOnError)
        {
          unsigned int v55 = 3LL;
          uint64_t v56 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v30 & 2) == 0) {
            goto LABEL_38;
          }
          unsigned int v55 = 2LL;
          uint64_t v56 = 780LL;
        }

        breakpoint_break((uint64_t)&v61, (volatile int *)v56, v55, v41, v18);
LABEL_38:
        unsigned int v42 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v40) defaultFbufStream];
        uint64_t v43 = (unsigned int *)((char *)v42 + 56);
        do
          id v44 = __ldaxr(v43);
        while (__stlxr(1u, v43));
        if (v44 == 1)
        {
          do
          {
            while (*v43 == 1)
              ;
            do
              unsigned int v45 = __ldaxr(v43);
            while (__stlxr(1u, v43));
          }

          while (v45 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v42, (GPUTools::FB::Fbuf *)&v61, *(unsigned int *)v61, 1);
        atomic_store(0, v43);
        do
        {
          __int128 v46 = __ldaxr(v19);
          int v47 = v46 - 1;
        }

        while (__stlxr(v47, v19));
        if (gCheckGLErrors) {
          uint64_t v48 = v47 < 1;
        }
        else {
          uint64_t v48 = 1;
        }
        if (!v48) {
          handle_opengl_thread_conflict((const void **)v18);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v25, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    uint64_t v49 = __ldaxr(v19);
  while (__stlxr(v49 - 1, v19));
  [(id)DYGetGLGuestAppClient(v23) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)(v18 + 24)
                                                                                                 + 7824LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7);
LABEL_51:
  if (v61) {
    free(v61);
  }
}

        id v29 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v24), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v29) {
          id v29 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v53, v30);
        }
        unint64_t v32 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
        if ((_DWORD)v32) {
          id v29 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v53, v32, v31);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v11, (uint64_t)&v53);
        }
        float v33 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v53);
        uint64_t v34 = *(unsigned int *)(v11 + 3404);
        if ((_DWORD)v34 && gBreakOnError)
        {
          uint64_t v48 = 3LL;
          uint64_t v49 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v23 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v48 = 2LL;
          uint64_t v49 = 783LL;
        }

        breakpoint_break((uint64_t)&v53, (volatile int *)v49, v48, v34, v11);
LABEL_38:
        unint64_t v35 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v33) defaultFbufStream];
        unint64_t v36 = (unsigned int *)((char *)v35 + 56);
        do
          unsigned int v37 = __ldaxr(v36);
        while (__stlxr(1u, v36));
        if (v37 == 1)
        {
          do
          {
            while (*v36 == 1)
              ;
            do
              unsigned int v38 = __ldaxr(v36);
            while (__stlxr(1u, v36));
          }

          while (v38 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v35, (GPUTools::FB::Fbuf *)&v53, *(unsigned int *)v53, 1);
        atomic_store(0, v36);
        do
        {
          unsigned int v39 = __ldaxr(v12);
          signed int v40 = v39 - 1;
        }

        while (__stlxr(v40, v12));
        if (gCheckGLErrors) {
          BOOL v41 = v40 < 1;
        }
        else {
          BOOL v41 = 1;
        }
        if (!v41) {
          handle_opengl_thread_conflict((const void **)v11);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v18, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    unsigned int v42 = __ldaxr(v12);
  while (__stlxr(v42 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, int *))(*(void *)(v11 + 24) + 7848LL))(a1, a2, a3);
LABEL_51:
  if (v53) {
    free(v53);
  }
}

        unsigned int v31 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v26), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v31) {
          unsigned int v31 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v55, v32);
        }
        uint64_t v34 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
        if ((_DWORD)v34) {
          unsigned int v31 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v55, v34, v33);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v31), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v13, (uint64_t)&v55);
        }
        unint64_t v35 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)&v55);
        unint64_t v36 = *(unsigned int *)(v13 + 3404);
        if ((_DWORD)v36 && gBreakOnError)
        {
          uint64_t v50 = 3LL;
          __int128 v51 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v25 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v50 = 2LL;
          __int128 v51 = 791LL;
        }

        breakpoint_break((uint64_t)&v55, (volatile int *)v51, v50, v36, v13);
LABEL_38:
        unsigned int v37 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v35) defaultFbufStream];
        unsigned int v38 = (unsigned int *)((char *)v37 + 56);
        do
          unsigned int v39 = __ldaxr(v38);
        while (__stlxr(1u, v38));
        if (v39 == 1)
        {
          do
          {
            while (*v38 == 1)
              ;
            do
              signed int v40 = __ldaxr(v38);
            while (__stlxr(1u, v38));
          }

          while (v40 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v37, (GPUTools::FB::Fbuf *)&v55, *(unsigned int *)v55, 1);
        atomic_store(0, v38);
        do
        {
          BOOL v41 = __ldaxr(v14);
          unsigned int v42 = v41 - 1;
        }

        while (__stlxr(v42, v14));
        if (gCheckGLErrors) {
          uint64_t v43 = v42 < 1;
        }
        else {
          uint64_t v43 = 1;
        }
        if (!v43) {
          handle_opengl_thread_conflict((const void **)v13);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v20, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    id v44 = __ldaxr(v14);
  while (__stlxr(v44 - 1, v14));
  [(id)DYGetGLGuestAppClient(v18) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 + 24) + 7904LL))( a1,  a2,  a3,  a4);
LABEL_51:
  if (v55) {
    free(v55);
  }
}

        unint64_t v27 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v22), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v27) {
          unint64_t v27 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v51, v28);
        }
        float v30 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
        if ((_DWORD)v30) {
          unint64_t v27 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v51, v30, v29);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v9, (uint64_t)&v51);
        }
        unsigned int v31 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v51);
        unint64_t v32 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v32 && gBreakOnError)
        {
          __int128 v46 = 3LL;
          int v47 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v21 & 2) == 0) {
            goto LABEL_38;
          }
          __int128 v46 = 2LL;
          int v47 = 793LL;
        }

        breakpoint_break((uint64_t)&v51, (volatile int *)v47, v46, v32, v9);
LABEL_38:
        float v33 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v31) defaultFbufStream];
        uint64_t v34 = (unsigned int *)((char *)v33 + 56);
        do
          unint64_t v35 = __ldaxr(v34);
        while (__stlxr(1u, v34));
        if (v35 == 1)
        {
          do
          {
            while (*v34 == 1)
              ;
            do
              unint64_t v36 = __ldaxr(v34);
            while (__stlxr(1u, v34));
          }

          while (v36 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v33, (GPUTools::FB::Fbuf *)&v51, *(unsigned int *)v51, 1);
        atomic_store(0, v34);
        do
        {
          unsigned int v37 = __ldaxr(v10);
          unsigned int v38 = v37 - 1;
        }

        while (__stlxr(v38, v10));
        if (gCheckGLErrors) {
          unsigned int v39 = v38 < 1;
        }
        else {
          unsigned int v39 = 1;
        }
        if (!v39) {
          handle_opengl_thread_conflict((const void **)v9);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    signed int v40 = __ldaxr(v10);
  while (__stlxr(v40 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 7920LL))(a1, a2);
LABEL_51:
  if (v51) {
    free(v51);
  }
}

        float v30 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v25), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v30) {
          float v30 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v54, v31);
        }
        float v33 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
        if ((_DWORD)v33) {
          float v30 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v54, v33, v32);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v30), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v9, (uint64_t)&v54);
        }
        uint64_t v34 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v54);
        unint64_t v35 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v35 && gBreakOnError)
        {
          uint64_t v49 = 3LL;
          uint64_t v50 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v24 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v49 = 2LL;
          uint64_t v50 = 794LL;
        }

        breakpoint_break((uint64_t)&v54, (volatile int *)v50, v49, v35, v9);
LABEL_38:
        unint64_t v36 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v34) defaultFbufStream];
        unsigned int v37 = (unsigned int *)((char *)v36 + 56);
        do
          unsigned int v38 = __ldaxr(v37);
        while (__stlxr(1u, v37));
        if (v38 == 1)
        {
          do
          {
            while (*v37 == 1)
              ;
            do
              unsigned int v39 = __ldaxr(v37);
            while (__stlxr(1u, v37));
          }

          while (v39 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v36, (GPUTools::FB::Fbuf *)&v54, *(unsigned int *)v54, 1);
        atomic_store(0, v37);
        do
        {
          signed int v40 = __ldaxr(v10);
          BOOL v41 = v40 - 1;
        }

        while (__stlxr(v41, v10));
        if (gCheckGLErrors) {
          unsigned int v42 = v41 < 1;
        }
        else {
          unsigned int v42 = 1;
        }
        if (!v42) {
          handle_opengl_thread_conflict((const void **)v9);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    uint64_t v43 = __ldaxr(v10);
  while (__stlxr(v43 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, const int *))(*(void *)(v9 + 24) + 7928LL))(a1, a2);
LABEL_51:
  if (v54) {
    free(v54);
  }
}

        unsigned int v31 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v26), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v31) {
          unsigned int v31 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v55, v32);
        }
        uint64_t v34 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
        if ((_DWORD)v34) {
          unsigned int v31 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v55, v34, v33);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v31), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v13, (uint64_t)&v55);
        }
        unint64_t v35 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)&v55);
        unint64_t v36 = *(unsigned int *)(v13 + 3404);
        if ((_DWORD)v36 && gBreakOnError)
        {
          uint64_t v50 = 3LL;
          __int128 v51 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v25 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v50 = 2LL;
          __int128 v51 = 796LL;
        }

        breakpoint_break((uint64_t)&v55, (volatile int *)v51, v50, v36, v13);
LABEL_38:
        unsigned int v37 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v35) defaultFbufStream];
        unsigned int v38 = (unsigned int *)((char *)v37 + 56);
        do
          unsigned int v39 = __ldaxr(v38);
        while (__stlxr(1u, v38));
        if (v39 == 1)
        {
          do
          {
            while (*v38 == 1)
              ;
            do
              signed int v40 = __ldaxr(v38);
            while (__stlxr(1u, v38));
          }

          while (v40 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v37, (GPUTools::FB::Fbuf *)&v55, *(unsigned int *)v55, 1);
        atomic_store(0, v38);
        do
        {
          BOOL v41 = __ldaxr(v14);
          unsigned int v42 = v41 - 1;
        }

        while (__stlxr(v42, v14));
        if (gCheckGLErrors) {
          uint64_t v43 = v42 < 1;
        }
        else {
          uint64_t v43 = 1;
        }
        if (!v43) {
          handle_opengl_thread_conflict((const void **)v13);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v20, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    id v44 = __ldaxr(v14);
  while (__stlxr(v44 - 1, v14));
  [(id)DYGetGLGuestAppClient(v18) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 + 24) + 7936LL))( a1,  a2,  a3,  a4);
LABEL_51:
  if (v55) {
    free(v55);
  }
}

        float v30 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v25), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v30) {
          float v30 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v54, v31);
        }
        float v33 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
        if ((_DWORD)v33) {
          float v30 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v54, v33, v32);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v30), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v9, (uint64_t)&v54);
        }
        uint64_t v34 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v54);
        unint64_t v35 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v35 && gBreakOnError)
        {
          uint64_t v49 = 3LL;
          uint64_t v50 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v24 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v49 = 2LL;
          uint64_t v50 = 799LL;
        }

        breakpoint_break((uint64_t)&v54, (volatile int *)v50, v49, v35, v9);
LABEL_38:
        unint64_t v36 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v34) defaultFbufStream];
        unsigned int v37 = (unsigned int *)((char *)v36 + 56);
        do
          unsigned int v38 = __ldaxr(v37);
        while (__stlxr(1u, v37));
        if (v38 == 1)
        {
          do
          {
            while (*v37 == 1)
              ;
            do
              unsigned int v39 = __ldaxr(v37);
            while (__stlxr(1u, v37));
          }

          while (v39 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v36, (GPUTools::FB::Fbuf *)&v54, *(unsigned int *)v54, 1);
        atomic_store(0, v37);
        do
        {
          signed int v40 = __ldaxr(v10);
          BOOL v41 = v40 - 1;
        }

        while (__stlxr(v41, v10));
        if (gCheckGLErrors) {
          unsigned int v42 = v41 < 1;
        }
        else {
          unsigned int v42 = 1;
        }
        if (!v42) {
          handle_opengl_thread_conflict((const void **)v9);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    uint64_t v43 = __ldaxr(v10);
  while (__stlxr(v43 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, const int *))(*(void *)(v9 + 24) + 7952LL))(a1, a2);
LABEL_51:
  if (v54) {
    free(v54);
  }
}

        unsigned int v31 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v26), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v31) {
          unsigned int v31 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v55, v32);
        }
        uint64_t v34 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
        if ((_DWORD)v34) {
          unsigned int v31 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v55, v34, v33);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v31), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v13, (uint64_t)&v55);
        }
        unint64_t v35 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)&v55);
        unint64_t v36 = *(unsigned int *)(v13 + 3404);
        if ((_DWORD)v36 && gBreakOnError)
        {
          uint64_t v50 = 3LL;
          __int128 v51 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v25 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v50 = 2LL;
          __int128 v51 = 801LL;
        }

        breakpoint_break((uint64_t)&v55, (volatile int *)v51, v50, v36, v13);
LABEL_38:
        unsigned int v37 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v35) defaultFbufStream];
        unsigned int v38 = (unsigned int *)((char *)v37 + 56);
        do
          unsigned int v39 = __ldaxr(v38);
        while (__stlxr(1u, v38));
        if (v39 == 1)
        {
          do
          {
            while (*v38 == 1)
              ;
            do
              signed int v40 = __ldaxr(v38);
            while (__stlxr(1u, v38));
          }

          while (v40 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v37, (GPUTools::FB::Fbuf *)&v55, *(unsigned int *)v55, 1);
        atomic_store(0, v38);
        do
        {
          BOOL v41 = __ldaxr(v14);
          unsigned int v42 = v41 - 1;
        }

        while (__stlxr(v42, v14));
        if (gCheckGLErrors) {
          uint64_t v43 = v42 < 1;
        }
        else {
          uint64_t v43 = 1;
        }
        if (!v43) {
          handle_opengl_thread_conflict((const void **)v13);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v20, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    id v44 = __ldaxr(v14);
  while (__stlxr(v44 - 1, v14));
  [(id)DYGetGLGuestAppClient(v18) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 + 24) + 7960LL))( a1,  a2,  a3,  a4);
LABEL_51:
  if (v55) {
    free(v55);
  }
}

        unsigned int v37 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v37) {
          unsigned int v37 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v61, v38);
        }
        signed int v40 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v19 + 3404);
        if ((_DWORD)v40) {
          unsigned int v37 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v61, v40, v39);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v37), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v19, (uint64_t)&v61);
        }
        BOOL v41 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v19 + 3480),  (GPUTools::FB::Fbuf *)(v19 + 3520),  (GPUTools::FB *)&v61);
        unsigned int v42 = *(unsigned int *)(v19 + 3404);
        if ((_DWORD)v42 && gBreakOnError)
        {
          uint64_t v56 = 3LL;
          char v57 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v31 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v56 = 2LL;
          char v57 = 802LL;
        }

        breakpoint_break((uint64_t)&v61, (volatile int *)v57, v56, v42, v19);
LABEL_38:
        uint64_t v43 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v41) defaultFbufStream];
        id v44 = (unsigned int *)((char *)v43 + 56);
        do
          unsigned int v45 = __ldaxr(v44);
        while (__stlxr(1u, v44));
        if (v45 == 1)
        {
          do
          {
            while (*v44 == 1)
              ;
            do
              __int128 v46 = __ldaxr(v44);
            while (__stlxr(1u, v44));
          }

          while (v46 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v43, (GPUTools::FB::Fbuf *)&v61, *(unsigned int *)v61, 1);
        atomic_store(0, v44);
        do
        {
          int v47 = __ldaxr(v20);
          uint64_t v48 = v47 - 1;
        }

        while (__stlxr(v48, v20));
        if (gCheckGLErrors) {
          uint64_t v49 = v48 < 1;
        }
        else {
          uint64_t v49 = 1;
        }
        if (!v49) {
          handle_opengl_thread_conflict((const void **)v19);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v26, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    uint64_t v50 = __ldaxr(v20);
  while (__stlxr(v50 - 1, v20));
  [(id)DYGetGLGuestAppClient(v24) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, float, float, float, float, float, float))(*(void *)(v19 + 24) + 7968LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7);
LABEL_51:
  if (v61) {
    free(v61);
  }
}

        unint64_t v36 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v31), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v36) {
          unint64_t v36 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v61, v37);
        }
        unsigned int v39 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v18 + 3404);
        if ((_DWORD)v39) {
          unint64_t v36 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v61, v39, v38);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v36), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v18, (uint64_t)&v61);
        }
        signed int v40 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v18 + 3480),  (GPUTools::FB::Fbuf *)(v18 + 3520),  (GPUTools::FB *)&v61);
        BOOL v41 = *(unsigned int *)(v18 + 3404);
        if ((_DWORD)v41 && gBreakOnError)
        {
          unsigned int v55 = 3LL;
          uint64_t v56 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v30 & 2) == 0) {
            goto LABEL_38;
          }
          unsigned int v55 = 2LL;
          uint64_t v56 = 803LL;
        }

        breakpoint_break((uint64_t)&v61, (volatile int *)v56, v55, v41, v18);
LABEL_38:
        unsigned int v42 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v40) defaultFbufStream];
        uint64_t v43 = (unsigned int *)((char *)v42 + 56);
        do
          id v44 = __ldaxr(v43);
        while (__stlxr(1u, v43));
        if (v44 == 1)
        {
          do
          {
            while (*v43 == 1)
              ;
            do
              unsigned int v45 = __ldaxr(v43);
            while (__stlxr(1u, v43));
          }

          while (v45 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v42, (GPUTools::FB::Fbuf *)&v61, *(unsigned int *)v61, 1);
        atomic_store(0, v43);
        do
        {
          __int128 v46 = __ldaxr(v19);
          int v47 = v46 - 1;
        }

        while (__stlxr(v47, v19));
        if (gCheckGLErrors) {
          uint64_t v48 = v47 < 1;
        }
        else {
          uint64_t v48 = 1;
        }
        if (!v48) {
          handle_opengl_thread_conflict((const void **)v18);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v25, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    uint64_t v49 = __ldaxr(v19);
  while (__stlxr(v49 - 1, v19));
  [(id)DYGetGLGuestAppClient(v23) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)(v18 + 24)
                                                                                                 + 7976LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7);
LABEL_51:
  if (v61) {
    free(v61);
  }
}

        unint64_t v27 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v22), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v27) {
          unint64_t v27 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v51, v28);
        }
        float v30 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
        if ((_DWORD)v30) {
          unint64_t v27 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v51, v30, v29);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v9, (uint64_t)&v51);
        }
        unsigned int v31 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v51);
        unint64_t v32 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v32 && gBreakOnError)
        {
          __int128 v46 = 3LL;
          int v47 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v21 & 2) == 0) {
            goto LABEL_38;
          }
          __int128 v46 = 2LL;
          int v47 = 807LL;
        }

        breakpoint_break((uint64_t)&v51, (volatile int *)v47, v46, v32, v9);
LABEL_38:
        float v33 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v31) defaultFbufStream];
        uint64_t v34 = (unsigned int *)((char *)v33 + 56);
        do
          unint64_t v35 = __ldaxr(v34);
        while (__stlxr(1u, v34));
        if (v35 == 1)
        {
          do
          {
            while (*v34 == 1)
              ;
            do
              unint64_t v36 = __ldaxr(v34);
            while (__stlxr(1u, v34));
          }

          while (v36 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v33, (GPUTools::FB::Fbuf *)&v51, *(unsigned int *)v51, 1);
        atomic_store(0, v34);
        do
        {
          unsigned int v37 = __ldaxr(v10);
          unsigned int v38 = v37 - 1;
        }

        while (__stlxr(v38, v10));
        if (gCheckGLErrors) {
          unsigned int v39 = v38 < 1;
        }
        else {
          unsigned int v39 = 1;
        }
        if (!v39) {
          handle_opengl_thread_conflict((const void **)v9);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    signed int v40 = __ldaxr(v10);
  while (__stlxr(v40 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 7984LL))(a1, a2);
LABEL_51:
  if (v51) {
    free(v51);
  }
}

        id v29 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v24), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v29) {
          id v29 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v53, v30);
        }
        unint64_t v32 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
        if ((_DWORD)v32) {
          id v29 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v53, v32, v31);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v11, (uint64_t)&v53);
        }
        float v33 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v53);
        uint64_t v34 = *(unsigned int *)(v11 + 3404);
        if ((_DWORD)v34 && gBreakOnError)
        {
          uint64_t v48 = 3LL;
          uint64_t v49 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v23 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v48 = 2LL;
          uint64_t v49 = 808LL;
        }

        breakpoint_break((uint64_t)&v53, (volatile int *)v49, v48, v34, v11);
LABEL_38:
        unint64_t v35 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v33) defaultFbufStream];
        unint64_t v36 = (unsigned int *)((char *)v35 + 56);
        do
          unsigned int v37 = __ldaxr(v36);
        while (__stlxr(1u, v36));
        if (v37 == 1)
        {
          do
          {
            while (*v36 == 1)
              ;
            do
              unsigned int v38 = __ldaxr(v36);
            while (__stlxr(1u, v36));
          }

          while (v38 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v35, (GPUTools::FB::Fbuf *)&v53, *(unsigned int *)v53, 1);
        atomic_store(0, v36);
        do
        {
          unsigned int v39 = __ldaxr(v12);
          signed int v40 = v39 - 1;
        }

        while (__stlxr(v40, v12));
        if (gCheckGLErrors) {
          BOOL v41 = v40 < 1;
        }
        else {
          BOOL v41 = 1;
        }
        if (!v41) {
          handle_opengl_thread_conflict((const void **)v11);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v18, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    unsigned int v42 = __ldaxr(v12);
  while (__stlxr(v42 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t))(*(void *)(v11 + 24) + 7992LL))(a1, a2, a3);
LABEL_51:
  if (v53) {
    free(v53);
  }
}

        float v33 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v33) {
          float v33 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v57, v34);
        }
        unint64_t v36 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v15 + 3404);
        if ((_DWORD)v36) {
          float v33 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v57, v36, v35);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v15, (uint64_t)&v57);
        }
        unsigned int v37 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v15 + 3480),  (GPUTools::FB::Fbuf *)(v15 + 3520),  (GPUTools::FB *)&v57);
        unsigned int v38 = *(unsigned int *)(v15 + 3404);
        if ((_DWORD)v38 && gBreakOnError)
        {
          __uint64_t v52 = 3LL;
          char v53 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v27 & 2) == 0) {
            goto LABEL_38;
          }
          __uint64_t v52 = 2LL;
          char v53 = 810LL;
        }

        breakpoint_break((uint64_t)&v57, (volatile int *)v53, v52, v38, v15);
LABEL_38:
        unsigned int v39 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v37) defaultFbufStream];
        signed int v40 = (unsigned int *)((char *)v39 + 56);
        do
          BOOL v41 = __ldaxr(v40);
        while (__stlxr(1u, v40));
        if (v41 == 1)
        {
          do
          {
            while (*v40 == 1)
              ;
            do
              unsigned int v42 = __ldaxr(v40);
            while (__stlxr(1u, v40));
          }

          while (v42 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v39, (GPUTools::FB::Fbuf *)&v57, *(unsigned int *)v57, 1);
        atomic_store(0, v40);
        do
        {
          uint64_t v43 = __ldaxr(v16);
          id v44 = v43 - 1;
        }

        while (__stlxr(v44, v16));
        if (gCheckGLErrors) {
          unsigned int v45 = v44 < 1;
        }
        else {
          unsigned int v45 = 1;
        }
        if (!v45) {
          handle_opengl_thread_conflict((const void **)v15);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v22, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    __int128 v46 = __ldaxr(v16);
  while (__stlxr(v46 - 1, v16));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 + 24) + 8000LL))( a1,  a2,  a3,  a4,  a5);
LABEL_51:
  if (v57) {
    free(v57);
  }
}

        unsigned int v31 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v26), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v31) {
          unsigned int v31 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v55, v32);
        }
        uint64_t v34 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
        if ((_DWORD)v34) {
          unsigned int v31 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v55, v34, v33);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v31), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v13, (uint64_t)&v55);
        }
        unint64_t v35 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)&v55);
        unint64_t v36 = *(unsigned int *)(v13 + 3404);
        if ((_DWORD)v36 && gBreakOnError)
        {
          uint64_t v50 = 3LL;
          __int128 v51 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v25 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v50 = 2LL;
          __int128 v51 = 812LL;
        }

        breakpoint_break((uint64_t)&v55, (volatile int *)v51, v50, v36, v13);
LABEL_38:
        unsigned int v37 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v35) defaultFbufStream];
        unsigned int v38 = (unsigned int *)((char *)v37 + 56);
        do
          unsigned int v39 = __ldaxr(v38);
        while (__stlxr(1u, v38));
        if (v39 == 1)
        {
          do
          {
            while (*v38 == 1)
              ;
            do
              signed int v40 = __ldaxr(v38);
            while (__stlxr(1u, v38));
          }

          while (v40 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v37, (GPUTools::FB::Fbuf *)&v55, *(unsigned int *)v55, 1);
        atomic_store(0, v38);
        do
        {
          BOOL v41 = __ldaxr(v14);
          unsigned int v42 = v41 - 1;
        }

        while (__stlxr(v42, v14));
        if (gCheckGLErrors) {
          uint64_t v43 = v42 < 1;
        }
        else {
          uint64_t v43 = 1;
        }
        if (!v43) {
          handle_opengl_thread_conflict((const void **)v13);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v20, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    id v44 = __ldaxr(v14);
  while (__stlxr(v44 - 1, v14));
  [(id)DYGetGLGuestAppClient(v18) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 + 24) + 8008LL))( a1,  a2,  a3,  a4);
LABEL_51:
  if (v55) {
    free(v55);
  }
}

        unsigned int v31 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v26), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v31) {
          unsigned int v31 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v55, v32);
        }
        uint64_t v34 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
        if ((_DWORD)v34) {
          unsigned int v31 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v55, v34, v33);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v31), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v13, (uint64_t)&v55);
        }
        unint64_t v35 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)&v55);
        unint64_t v36 = *(unsigned int *)(v13 + 3404);
        if ((_DWORD)v36 && gBreakOnError)
        {
          uint64_t v50 = 3LL;
          __int128 v51 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v25 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v50 = 2LL;
          __int128 v51 = 818LL;
        }

        breakpoint_break((uint64_t)&v55, (volatile int *)v51, v50, v36, v13);
LABEL_38:
        unsigned int v37 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v35) defaultFbufStream];
        unsigned int v38 = (unsigned int *)((char *)v37 + 56);
        do
          unsigned int v39 = __ldaxr(v38);
        while (__stlxr(1u, v38));
        if (v39 == 1)
        {
          do
          {
            while (*v38 == 1)
              ;
            do
              signed int v40 = __ldaxr(v38);
            while (__stlxr(1u, v38));
          }

          while (v40 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v37, (GPUTools::FB::Fbuf *)&v55, *(unsigned int *)v55, 1);
        atomic_store(0, v38);
        do
        {
          BOOL v41 = __ldaxr(v14);
          unsigned int v42 = v41 - 1;
        }

        while (__stlxr(v42, v14));
        if (gCheckGLErrors) {
          uint64_t v43 = v42 < 1;
        }
        else {
          uint64_t v43 = 1;
        }
        if (!v43) {
          handle_opengl_thread_conflict((const void **)v13);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v20, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    id v44 = __ldaxr(v14);
  while (__stlxr(v44 - 1, v14));
  [(id)DYGetGLGuestAppClient(v18) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 + 24) + 8048LL))( a1,  a2,  a3,  a4);
LABEL_51:
  if (v55) {
    free(v55);
  }
}

        unint64_t v35 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v30), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v35) {
          unint64_t v35 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v59, v36);
        }
        unsigned int v38 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v17 + 3404);
        if ((_DWORD)v38) {
          unint64_t v35 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v59, v38, v37);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v35), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v17, (uint64_t)&v59);
        }
        unsigned int v39 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v17 + 3480),  (GPUTools::FB::Fbuf *)(v17 + 3520),  (GPUTools::FB *)&v59);
        signed int v40 = *(unsigned int *)(v17 + 3404);
        if ((_DWORD)v40 && gBreakOnError)
        {
          uint64_t v54 = 3LL;
          unsigned int v55 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v29 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v54 = 2LL;
          unsigned int v55 = 800LL;
        }

        breakpoint_break((uint64_t)&v59, (volatile int *)v55, v54, v40, v17);
LABEL_38:
        BOOL v41 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v39) defaultFbufStream];
        unsigned int v42 = (unsigned int *)((char *)v41 + 56);
        do
          uint64_t v43 = __ldaxr(v42);
        while (__stlxr(1u, v42));
        if (v43 == 1)
        {
          do
          {
            while (*v42 == 1)
              ;
            do
              id v44 = __ldaxr(v42);
            while (__stlxr(1u, v42));
          }

          while (v44 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v41, (GPUTools::FB::Fbuf *)&v59, *(unsigned int *)v59, 1);
        atomic_store(0, v42);
        do
        {
          unsigned int v45 = __ldaxr(v18);
          __int128 v46 = v45 - 1;
        }

        while (__stlxr(v46, v18));
        if (gCheckGLErrors) {
          int v47 = v46 < 1;
        }
        else {
          int v47 = 1;
        }
        if (!v47) {
          handle_opengl_thread_conflict((const void **)v17);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v24, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    uint64_t v48 = __ldaxr(v18);
  while (__stlxr(v48 - 1, v18));
  [(id)DYGetGLGuestAppClient(v22) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 + 24) + 8056LL))( a1,  a2,  a3,  a4,  a5,  a6);
LABEL_51:
  if (v59) {
    free(v59);
  }
}

        id v29 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v24), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v29) {
          id v29 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v53, v30);
        }
        unint64_t v32 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
        if ((_DWORD)v32) {
          id v29 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v53, v32, v31);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v11, (uint64_t)&v53);
        }
        float v33 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v53);
        uint64_t v34 = *(unsigned int *)(v11 + 3404);
        if ((_DWORD)v34 && gBreakOnError)
        {
          uint64_t v48 = 3LL;
          uint64_t v49 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v23 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v48 = 2LL;
          uint64_t v49 = 811LL;
        }

        breakpoint_break((uint64_t)&v53, (volatile int *)v49, v48, v34, v11);
LABEL_38:
        unint64_t v35 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v33) defaultFbufStream];
        unint64_t v36 = (unsigned int *)((char *)v35 + 56);
        do
          unsigned int v37 = __ldaxr(v36);
        while (__stlxr(1u, v36));
        if (v37 == 1)
        {
          do
          {
            while (*v36 == 1)
              ;
            do
              unsigned int v38 = __ldaxr(v36);
            while (__stlxr(1u, v36));
          }

          while (v38 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v35, (GPUTools::FB::Fbuf *)&v53, *(unsigned int *)v53, 1);
        atomic_store(0, v36);
        do
        {
          unsigned int v39 = __ldaxr(v12);
          signed int v40 = v39 - 1;
        }

        while (__stlxr(v40, v12));
        if (gCheckGLErrors) {
          BOOL v41 = v40 < 1;
        }
        else {
          BOOL v41 = 1;
        }
        if (!v41) {
          handle_opengl_thread_conflict((const void **)v11);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v18, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    unsigned int v42 = __ldaxr(v12);
  while (__stlxr(v42 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t))(*(void *)(v11 + 24) + 8064LL))(a1, a2, a3);
LABEL_51:
  if (v53) {
    free(v53);
  }
}

        id v29 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v24), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v29) {
          id v29 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v53, v30);
        }
        unint64_t v32 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
        if ((_DWORD)v32) {
          id v29 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v53, v32, v31);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v11, (uint64_t)&v53);
        }
        float v33 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)&v53);
        uint64_t v34 = *(unsigned int *)(v11 + 3404);
        if ((_DWORD)v34 && gBreakOnError)
        {
          uint64_t v48 = 3LL;
          uint64_t v49 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v23 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v48 = 2LL;
          uint64_t v49 = 804LL;
        }

        breakpoint_break((uint64_t)&v53, (volatile int *)v49, v48, v34, v11);
LABEL_38:
        unint64_t v35 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v33) defaultFbufStream];
        unint64_t v36 = (unsigned int *)((char *)v35 + 56);
        do
          unsigned int v37 = __ldaxr(v36);
        while (__stlxr(1u, v36));
        if (v37 == 1)
        {
          do
          {
            while (*v36 == 1)
              ;
            do
              unsigned int v38 = __ldaxr(v36);
            while (__stlxr(1u, v36));
          }

          while (v38 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v35, (GPUTools::FB::Fbuf *)&v53, *(unsigned int *)v53, 1);
        atomic_store(0, v36);
        do
        {
          unsigned int v39 = __ldaxr(v12);
          signed int v40 = v39 - 1;
        }

        while (__stlxr(v40, v12));
        if (gCheckGLErrors) {
          BOOL v41 = v40 < 1;
        }
        else {
          BOOL v41 = 1;
        }
        if (!v41) {
          handle_opengl_thread_conflict((const void **)v11);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v18, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    unsigned int v42 = __ldaxr(v12);
  while (__stlxr(v42 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t))(*(void *)(v11 + 24) + 8072LL))(a1, a2, a3);
LABEL_51:
  if (v53) {
    free(v53);
  }
}

        unint64_t v27 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v22), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v27) {
          unint64_t v27 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v51, v28);
        }
        float v30 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
        if ((_DWORD)v30) {
          unint64_t v27 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v51, v30, v29);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v9, (uint64_t)&v51);
        }
        unsigned int v31 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v51);
        unint64_t v32 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v32 && gBreakOnError)
        {
          __int128 v46 = 3LL;
          int v47 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v21 & 2) == 0) {
            goto LABEL_38;
          }
          __int128 v46 = 2LL;
          int v47 = 766LL;
        }

        breakpoint_break((uint64_t)&v51, (volatile int *)v47, v46, v32, v9);
LABEL_38:
        float v33 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v31) defaultFbufStream];
        uint64_t v34 = (unsigned int *)((char *)v33 + 56);
        do
          unint64_t v35 = __ldaxr(v34);
        while (__stlxr(1u, v34));
        if (v35 == 1)
        {
          do
          {
            while (*v34 == 1)
              ;
            do
              unint64_t v36 = __ldaxr(v34);
            while (__stlxr(1u, v34));
          }

          while (v36 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v33, (GPUTools::FB::Fbuf *)&v51, *(unsigned int *)v51, 1);
        atomic_store(0, v34);
        do
        {
          unsigned int v37 = __ldaxr(v10);
          unsigned int v38 = v37 - 1;
        }

        while (__stlxr(v38, v10));
        if (gCheckGLErrors) {
          unsigned int v39 = v38 < 1;
        }
        else {
          unsigned int v39 = 1;
        }
        if (!v39) {
          handle_opengl_thread_conflict((const void **)v9);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    signed int v40 = __ldaxr(v10);
  while (__stlxr(v40 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 8088LL))(a1, a2);
LABEL_51:
  if (v51) {
    free(v51);
  }
}

        uint64_t v25 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v20), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v25) {
          uint64_t v25 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v49, v26);
        }
        unint64_t v28 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v7 + 3404);
        if ((_DWORD)v28) {
          uint64_t v25 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v49, v28, v27);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v25), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v7, (uint64_t)&v49);
        }
        id v29 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v7 + 3480),  (GPUTools::FB::Fbuf *)(v7 + 3520),  (GPUTools::FB *)&v49);
        float v30 = *(unsigned int *)(v7 + 3404);
        if ((_DWORD)v30 && gBreakOnError)
        {
          id v44 = 3LL;
          unsigned int v45 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v19 & 2) == 0) {
            goto LABEL_38;
          }
          id v44 = 2LL;
          unsigned int v45 = 795LL;
        }

        breakpoint_break((uint64_t)&v49, (volatile int *)v45, v44, v30, v7);
LABEL_38:
        unsigned int v31 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v29) defaultFbufStream];
        unint64_t v32 = (unsigned int *)((char *)v31 + 56);
        do
          float v33 = __ldaxr(v32);
        while (__stlxr(1u, v32));
        if (v33 == 1)
        {
          do
          {
            while (*v32 == 1)
              ;
            do
              uint64_t v34 = __ldaxr(v32);
            while (__stlxr(1u, v32));
          }

          while (v34 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v31, (GPUTools::FB::Fbuf *)&v49, *(unsigned int *)v49, 1);
        atomic_store(0, v32);
        do
        {
          unint64_t v35 = __ldaxr(v8);
          unint64_t v36 = v35 - 1;
        }

        while (__stlxr(v36, v8));
        if (gCheckGLErrors) {
          unsigned int v37 = v36 < 1;
        }
        else {
          unsigned int v37 = 1;
        }
        if (!v37) {
          handle_opengl_thread_conflict((const void **)v7);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v14, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    unsigned int v38 = __ldaxr(v8);
  while (__stlxr(v38 - 1, v8));
  [(id)DYGetGLGuestAppClient(v12) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *))(*(void *)(v7 + 24) + 8096LL))(a1);
LABEL_51:
  if (v49) {
    free(v49);
  }
}

        unint64_t v35 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v30), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v35) {
          unint64_t v35 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v59, v36);
        }
        unsigned int v38 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v17 + 3404);
        if ((_DWORD)v38) {
          unint64_t v35 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v59, v38, v37);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v35), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v17, (uint64_t)&v59);
        }
        unsigned int v39 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v17 + 3480),  (GPUTools::FB::Fbuf *)(v17 + 3520),  (GPUTools::FB *)&v59);
        signed int v40 = *(unsigned int *)(v17 + 3404);
        if ((_DWORD)v40 && gBreakOnError)
        {
          uint64_t v54 = 3LL;
          unsigned int v55 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v29 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v54 = 2LL;
          unsigned int v55 = 773LL;
        }

        breakpoint_break((uint64_t)&v59, (volatile int *)v55, v54, v40, v17);
LABEL_38:
        BOOL v41 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v39) defaultFbufStream];
        unsigned int v42 = (unsigned int *)((char *)v41 + 56);
        do
          uint64_t v43 = __ldaxr(v42);
        while (__stlxr(1u, v42));
        if (v43 == 1)
        {
          do
          {
            while (*v42 == 1)
              ;
            do
              id v44 = __ldaxr(v42);
            while (__stlxr(1u, v42));
          }

          while (v44 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v41, (GPUTools::FB::Fbuf *)&v59, *(unsigned int *)v59, 1);
        atomic_store(0, v42);
        do
        {
          unsigned int v45 = __ldaxr(v18);
          __int128 v46 = v45 - 1;
        }

        while (__stlxr(v46, v18));
        if (gCheckGLErrors) {
          int v47 = v46 < 1;
        }
        else {
          int v47 = 1;
        }
        if (!v47) {
          handle_opengl_thread_conflict((const void **)v17);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v24, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    uint64_t v48 = __ldaxr(v18);
  while (__stlxr(v48 - 1, v18));
  [(id)DYGetGLGuestAppClient(v22) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 + 24) + 8120LL))( a1,  a2,  a3,  a4,  a5,  a6);
LABEL_51:
  if (v59) {
    free(v59);
  }
}

        unint64_t v35 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v30), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v35) {
          unint64_t v35 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v59, v36);
        }
        unsigned int v38 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v17 + 3404);
        if ((_DWORD)v38) {
          unint64_t v35 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v59, v38, v37);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v35), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v17, (uint64_t)&v59);
        }
        unsigned int v39 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v17 + 3480),  (GPUTools::FB::Fbuf *)(v17 + 3520),  (GPUTools::FB *)&v59);
        signed int v40 = *(unsigned int *)(v17 + 3404);
        if ((_DWORD)v40 && gBreakOnError)
        {
          uint64_t v54 = 3LL;
          unsigned int v55 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v29 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v54 = 2LL;
          unsigned int v55 = 771LL;
        }

        breakpoint_break((uint64_t)&v59, (volatile int *)v55, v54, v40, v17);
LABEL_38:
        BOOL v41 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v39) defaultFbufStream];
        unsigned int v42 = (unsigned int *)((char *)v41 + 56);
        do
          uint64_t v43 = __ldaxr(v42);
        while (__stlxr(1u, v42));
        if (v43 == 1)
        {
          do
          {
            while (*v42 == 1)
              ;
            do
              id v44 = __ldaxr(v42);
            while (__stlxr(1u, v42));
          }

          while (v44 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v41, (GPUTools::FB::Fbuf *)&v59, *(unsigned int *)v59, 1);
        atomic_store(0, v42);
        do
        {
          unsigned int v45 = __ldaxr(v18);
          __int128 v46 = v45 - 1;
        }

        while (__stlxr(v46, v18));
        if (gCheckGLErrors) {
          int v47 = v46 < 1;
        }
        else {
          int v47 = 1;
        }
        if (!v47) {
          handle_opengl_thread_conflict((const void **)v17);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v24, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    uint64_t v48 = __ldaxr(v18);
  while (__stlxr(v48 - 1, v18));
  [(id)DYGetGLGuestAppClient(v22) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 + 24) + 8128LL))( a1,  a2,  a3,  a4,  a5,  a6);
LABEL_51:
  if (v59) {
    free(v59);
  }
}

        unint64_t v35 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v30), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v35) {
          unint64_t v35 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v59, v36);
        }
        unsigned int v38 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v17 + 3404);
        if ((_DWORD)v38) {
          unint64_t v35 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v59, v38, v37);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v35), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v17, (uint64_t)&v59);
        }
        unsigned int v39 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v17 + 3480),  (GPUTools::FB::Fbuf *)(v17 + 3520),  (GPUTools::FB *)&v59);
        signed int v40 = *(unsigned int *)(v17 + 3404);
        if ((_DWORD)v40 && gBreakOnError)
        {
          uint64_t v54 = 3LL;
          unsigned int v55 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v29 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v54 = 2LL;
          unsigned int v55 = 775LL;
        }

        breakpoint_break((uint64_t)&v59, (volatile int *)v55, v54, v40, v17);
LABEL_38:
        BOOL v41 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v39) defaultFbufStream];
        unsigned int v42 = (unsigned int *)((char *)v41 + 56);
        do
          uint64_t v43 = __ldaxr(v42);
        while (__stlxr(1u, v42));
        if (v43 == 1)
        {
          do
          {
            while (*v42 == 1)
              ;
            do
              id v44 = __ldaxr(v42);
            while (__stlxr(1u, v42));
          }

          while (v44 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v41, (GPUTools::FB::Fbuf *)&v59, *(unsigned int *)v59, 1);
        atomic_store(0, v42);
        do
        {
          unsigned int v45 = __ldaxr(v18);
          __int128 v46 = v45 - 1;
        }

        while (__stlxr(v46, v18));
        if (gCheckGLErrors) {
          int v47 = v46 < 1;
        }
        else {
          int v47 = 1;
        }
        if (!v47) {
          handle_opengl_thread_conflict((const void **)v17);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v24, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    uint64_t v48 = __ldaxr(v18);
  while (__stlxr(v48 - 1, v18));
  [(id)DYGetGLGuestAppClient(v22) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 + 24) + 8136LL))( a1,  a2,  a3,  a4,  a5,  a6);
LABEL_51:
  if (v59) {
    free(v59);
  }
}

        unint64_t v28 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v23), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v28) {
          unint64_t v28 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v52, v29);
        }
        unsigned int v31 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
        if ((_DWORD)v31) {
          unint64_t v28 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v52, v31, v30);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v9, (uint64_t)&v52);
        }
        unint64_t v32 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v52);
        float v33 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v33 && gBreakOnError)
        {
          int v47 = 3LL;
          uint64_t v48 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v22 & 2) == 0) {
            goto LABEL_38;
          }
          int v47 = 2LL;
          uint64_t v48 = 774LL;
        }

        breakpoint_break((uint64_t)&v52, (volatile int *)v48, v47, v33, v9);
LABEL_38:
        uint64_t v34 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v32) defaultFbufStream];
        unint64_t v35 = (unsigned int *)((char *)v34 + 56);
        do
          unint64_t v36 = __ldaxr(v35);
        while (__stlxr(1u, v35));
        if (v36 == 1)
        {
          do
          {
            while (*v35 == 1)
              ;
            do
              unsigned int v37 = __ldaxr(v35);
            while (__stlxr(1u, v35));
          }

          while (v37 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v34, (GPUTools::FB::Fbuf *)&v52, *(unsigned int *)v52, 1);
        atomic_store(0, v35);
        do
        {
          unsigned int v38 = __ldaxr(v10);
          unsigned int v39 = v38 - 1;
        }

        while (__stlxr(v39, v10));
        if (gCheckGLErrors) {
          signed int v40 = v39 < 1;
        }
        else {
          signed int v40 = 1;
        }
        if (!v40) {
          handle_opengl_thread_conflict((const void **)v9);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    BOOL v41 = __ldaxr(v10);
  while (__stlxr(v41 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, const __int16 *))(*(void *)(v9 + 24) + 8144LL))(a1, a2);
LABEL_51:
  if (v52) {
    free(v52);
  }
}

        unint64_t v28 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v23), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v28) {
          unint64_t v28 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v52, v29);
        }
        unsigned int v31 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
        if ((_DWORD)v31) {
          unint64_t v28 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v52, v31, v30);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v9, (uint64_t)&v52);
        }
        unint64_t v32 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v52);
        float v33 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v33 && gBreakOnError)
        {
          int v47 = 3LL;
          uint64_t v48 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v22 & 2) == 0) {
            goto LABEL_38;
          }
          int v47 = 2LL;
          uint64_t v48 = 772LL;
        }

        breakpoint_break((uint64_t)&v52, (volatile int *)v48, v47, v33, v9);
LABEL_38:
        uint64_t v34 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v32) defaultFbufStream];
        unint64_t v35 = (unsigned int *)((char *)v34 + 56);
        do
          unint64_t v36 = __ldaxr(v35);
        while (__stlxr(1u, v35));
        if (v36 == 1)
        {
          do
          {
            while (*v35 == 1)
              ;
            do
              unsigned int v37 = __ldaxr(v35);
            while (__stlxr(1u, v35));
          }

          while (v37 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v34, (GPUTools::FB::Fbuf *)&v52, *(unsigned int *)v52, 1);
        atomic_store(0, v35);
        do
        {
          unsigned int v38 = __ldaxr(v10);
          unsigned int v39 = v38 - 1;
        }

        while (__stlxr(v39, v10));
        if (gCheckGLErrors) {
          signed int v40 = v39 < 1;
        }
        else {
          signed int v40 = 1;
        }
        if (!v40) {
          handle_opengl_thread_conflict((const void **)v9);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    BOOL v41 = __ldaxr(v10);
  while (__stlxr(v41 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, const int *))(*(void *)(v9 + 24) + 8152LL))(a1, a2);
LABEL_51:
  if (v52) {
    free(v52);
  }
}

        unint64_t v28 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v23), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v28) {
          unint64_t v28 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v52, v29);
        }
        unsigned int v31 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
        if ((_DWORD)v31) {
          unint64_t v28 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v52, v31, v30);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v9, (uint64_t)&v52);
        }
        unint64_t v32 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v52);
        float v33 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v33 && gBreakOnError)
        {
          int v47 = 3LL;
          uint64_t v48 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v22 & 2) == 0) {
            goto LABEL_38;
          }
          int v47 = 2LL;
          uint64_t v48 = 776LL;
        }

        breakpoint_break((uint64_t)&v52, (volatile int *)v48, v47, v33, v9);
LABEL_38:
        uint64_t v34 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v32) defaultFbufStream];
        unint64_t v35 = (unsigned int *)((char *)v34 + 56);
        do
          unint64_t v36 = __ldaxr(v35);
        while (__stlxr(1u, v35));
        if (v36 == 1)
        {
          do
          {
            while (*v35 == 1)
              ;
            do
              unsigned int v37 = __ldaxr(v35);
            while (__stlxr(1u, v35));
          }

          while (v37 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v34, (GPUTools::FB::Fbuf *)&v52, *(unsigned int *)v52, 1);
        atomic_store(0, v35);
        do
        {
          unsigned int v38 = __ldaxr(v10);
          unsigned int v39 = v38 - 1;
        }

        while (__stlxr(v39, v10));
        if (gCheckGLErrors) {
          signed int v40 = v39 < 1;
        }
        else {
          signed int v40 = 1;
        }
        if (!v40) {
          handle_opengl_thread_conflict((const void **)v9);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    BOOL v41 = __ldaxr(v10);
  while (__stlxr(v41 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, const int *))(*(void *)(v9 + 24) + 8160LL))(a1, a2);
LABEL_51:
  if (v52) {
    free(v52);
  }
}

        unint64_t v35 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v30), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v35) {
          unint64_t v35 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v59, v36);
        }
        unsigned int v38 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v17 + 3404);
        if ((_DWORD)v38) {
          unint64_t v35 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v59, v38, v37);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v35), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v17, (uint64_t)&v59);
        }
        unsigned int v39 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v17 + 3480),  (GPUTools::FB::Fbuf *)(v17 + 3520),  (GPUTools::FB *)&v59);
        signed int v40 = *(unsigned int *)(v17 + 3404);
        if ((_DWORD)v40 && gBreakOnError)
        {
          uint64_t v54 = 3LL;
          unsigned int v55 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v29 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v54 = 2LL;
          unsigned int v55 = 769LL;
        }

        breakpoint_break((uint64_t)&v59, (volatile int *)v55, v54, v40, v17);
LABEL_38:
        BOOL v41 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v39) defaultFbufStream];
        unsigned int v42 = (unsigned int *)((char *)v41 + 56);
        do
          uint64_t v43 = __ldaxr(v42);
        while (__stlxr(1u, v42));
        if (v43 == 1)
        {
          do
          {
            while (*v42 == 1)
              ;
            do
              id v44 = __ldaxr(v42);
            while (__stlxr(1u, v42));
          }

          while (v44 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v41, (GPUTools::FB::Fbuf *)&v59, *(unsigned int *)v59, 1);
        atomic_store(0, v42);
        do
        {
          unsigned int v45 = __ldaxr(v18);
          __int128 v46 = v45 - 1;
        }

        while (__stlxr(v46, v18));
        if (gCheckGLErrors) {
          int v47 = v46 < 1;
        }
        else {
          int v47 = 1;
        }
        if (!v47) {
          handle_opengl_thread_conflict((const void **)v17);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v24, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    uint64_t v48 = __ldaxr(v18);
  while (__stlxr(v48 - 1, v18));
  [(id)DYGetGLGuestAppClient(v22) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, float, float, float, float, float))(*(void *)(v17 + 24) + 8168LL))( a1,  a2,  a3,  a4,  a5,  a6);
LABEL_51:
  if (v59) {
    free(v59);
  }
}

        unint64_t v28 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v23), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v28) {
          unint64_t v28 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v52, v29);
        }
        unsigned int v31 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
        if ((_DWORD)v31) {
          unint64_t v28 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v52, v31, v30);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v9, (uint64_t)&v52);
        }
        unint64_t v32 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v52);
        float v33 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v33 && gBreakOnError)
        {
          int v47 = 3LL;
          uint64_t v48 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v22 & 2) == 0) {
            goto LABEL_38;
          }
          int v47 = 2LL;
          uint64_t v48 = 770LL;
        }

        breakpoint_break((uint64_t)&v52, (volatile int *)v48, v47, v33, v9);
LABEL_38:
        uint64_t v34 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v32) defaultFbufStream];
        unint64_t v35 = (unsigned int *)((char *)v34 + 56);
        do
          unint64_t v36 = __ldaxr(v35);
        while (__stlxr(1u, v35));
        if (v36 == 1)
        {
          do
          {
            while (*v35 == 1)
              ;
            do
              unsigned int v37 = __ldaxr(v35);
            while (__stlxr(1u, v35));
          }

          while (v37 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v34, (GPUTools::FB::Fbuf *)&v52, *(unsigned int *)v52, 1);
        atomic_store(0, v35);
        do
        {
          unsigned int v38 = __ldaxr(v10);
          unsigned int v39 = v38 - 1;
        }

        while (__stlxr(v39, v10));
        if (gCheckGLErrors) {
          signed int v40 = v39 < 1;
        }
        else {
          signed int v40 = 1;
        }
        if (!v40) {
          handle_opengl_thread_conflict((const void **)v9);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    BOOL v41 = __ldaxr(v10);
  while (__stlxr(v41 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, const float *))(*(void *)(v9 + 24) + 8176LL))(a1, a2);
LABEL_51:
  if (v52) {
    free(v52);
  }
}

    float v30 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v25), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v30) {
      float v30 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v53, v31);
    }
    float v33 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v33) {
      float v30 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v53, v33, v32);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v30), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v53);
    }
    uint64_t v34 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v53);
    unint64_t v35 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v35 && gBreakOnError)
    {
      uint64_t v48 = 3LL;
      uint64_t v49 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v24 & 2) == 0) {
        goto LABEL_38;
      }
      uint64_t v48 = 2LL;
      uint64_t v49 = 825LL;
    }

    breakpoint_break((uint64_t)v53, (volatile int *)v49, v48, v35, v13);
LABEL_38:
    unint64_t v36 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v34) defaultFbufStream];
    unsigned int v37 = (unsigned int *)((char *)v36 + 56);
    do
      unsigned int v38 = __ldaxr(v37);
    while (__stlxr(1u, v37));
    if (v38 == 1)
    {
      do
      {
        while (*v37 == 1)
          ;
        do
          unsigned int v39 = __ldaxr(v37);
        while (__stlxr(1u, v37));
      }

      while (v39 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v36, (GPUTools::FB::Fbuf *)v53, *(unsigned int *)v53[0], 1);
    atomic_store(0, v37);
    do
    {
      signed int v40 = __ldaxr(v14);
      BOOL v41 = v40 - 1;
    }

    while (__stlxr(v41, v14));
    if (gCheckGLErrors) {
      unsigned int v42 = v41 < 1;
    }
    else {
      unsigned int v42 = 1;
    }
    if (!v42) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    goto LABEL_51;
  }

  do
    uint64_t v43 = __ldaxr(v14);
  while (__stlxr(v43 - 1, v14));
  [(id)DYGetGLGuestAppClient(v22) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, const int *))(*(void *)(v13 + 24) + 0x2000LL))( a1,  a2,  a3,  a4);
LABEL_51:
  if (v53[0]) {
    free(v53[0]);
  }
}

        unsigned int v31 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v26), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v31) {
          unsigned int v31 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v55, v32);
        }
        uint64_t v34 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
        if ((_DWORD)v34) {
          unsigned int v31 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v55, v34, v33);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v31), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v13, (uint64_t)&v55);
        }
        unint64_t v35 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)&v55);
        unint64_t v36 = *(unsigned int *)(v13 + 3404);
        if ((_DWORD)v36 && gBreakOnError)
        {
          uint64_t v50 = 3LL;
          __int128 v51 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v25 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v50 = 2LL;
          __int128 v51 = 891LL;
        }

        breakpoint_break((uint64_t)&v55, (volatile int *)v51, v50, v36, v13);
LABEL_38:
        unsigned int v37 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v35) defaultFbufStream];
        unsigned int v38 = (unsigned int *)((char *)v37 + 56);
        do
          unsigned int v39 = __ldaxr(v38);
        while (__stlxr(1u, v38));
        if (v39 == 1)
        {
          do
          {
            while (*v38 == 1)
              ;
            do
              signed int v40 = __ldaxr(v38);
            while (__stlxr(1u, v38));
          }

          while (v40 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v37, (GPUTools::FB::Fbuf *)&v55, *(unsigned int *)v55, 1);
        atomic_store(0, v38);
        do
        {
          BOOL v41 = __ldaxr(v14);
          unsigned int v42 = v41 - 1;
        }

        while (__stlxr(v42, v14));
        if (gCheckGLErrors) {
          uint64_t v43 = v42 < 1;
        }
        else {
          uint64_t v43 = 1;
        }
        if (!v43) {
          handle_opengl_thread_conflict((const void **)v13);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v20, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    id v44 = __ldaxr(v14);
  while (__stlxr(v44 - 1, v14));
  [(id)DYGetGLGuestAppClient(v18) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, int *))(*(void *)(v13 + 24) + 8200LL))(a1, a2, a3, a4);
LABEL_51:
  if (v55) {
    free(v55);
  }
}

        float v33 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v33) {
          float v33 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v57, v34);
        }
        unint64_t v36 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v15 + 3404);
        if ((_DWORD)v36) {
          float v33 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v57, v36, v35);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v15, (uint64_t)&v57);
        }
        unsigned int v37 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v15 + 3480),  (GPUTools::FB::Fbuf *)(v15 + 3520),  (GPUTools::FB *)&v57);
        unsigned int v38 = *(unsigned int *)(v15 + 3404);
        if ((_DWORD)v38 && gBreakOnError)
        {
          __uint64_t v52 = 3LL;
          char v53 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v27 & 2) == 0) {
            goto LABEL_38;
          }
          __uint64_t v52 = 2LL;
          char v53 = 1039LL;
        }

        breakpoint_break((uint64_t)&v57, (volatile int *)v53, v52, v38, v15);
LABEL_38:
        unsigned int v39 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v37) defaultFbufStream];
        signed int v40 = (unsigned int *)((char *)v39 + 56);
        do
          BOOL v41 = __ldaxr(v40);
        while (__stlxr(1u, v40));
        if (v41 == 1)
        {
          do
          {
            while (*v40 == 1)
              ;
            do
              unsigned int v42 = __ldaxr(v40);
            while (__stlxr(1u, v40));
          }

          while (v42 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v39, (GPUTools::FB::Fbuf *)&v57, *(unsigned int *)v57, 1);
        atomic_store(0, v40);
        do
        {
          uint64_t v43 = __ldaxr(v16);
          id v44 = v43 - 1;
        }

        while (__stlxr(v44, v16));
        if (gCheckGLErrors) {
          unsigned int v45 = v44 < 1;
        }
        else {
          unsigned int v45 = 1;
        }
        if (!v45) {
          handle_opengl_thread_conflict((const void **)v15);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v22, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    __int128 v46 = __ldaxr(v16);
  while (__stlxr(v46 - 1, v16));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 + 24) + 8216LL))( a1,  a2,  a3,  a4,  a5);
LABEL_51:
  if (v57) {
    free(v57);
  }
}

        unsigned int v31 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v26), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v31) {
          unsigned int v31 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v55, v32);
        }
        uint64_t v34 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
        if ((_DWORD)v34) {
          unsigned int v31 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v55, v34, v33);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v31), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v13, (uint64_t)&v55);
        }
        unint64_t v35 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)&v55);
        unint64_t v36 = *(unsigned int *)(v13 + 3404);
        if ((_DWORD)v36 && gBreakOnError)
        {
          uint64_t v50 = 3LL;
          __int128 v51 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v25 & 2) == 0) {
            goto LABEL_38;
          }
          uint64_t v50 = 2LL;
          __int128 v51 = 1046LL;
        }

        breakpoint_break((uint64_t)&v55, (volatile int *)v51, v50, v36, v13);
LABEL_38:
        unsigned int v37 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v35) defaultFbufStream];
        unsigned int v38 = (unsigned int *)((char *)v37 + 56);
        do
          unsigned int v39 = __ldaxr(v38);
        while (__stlxr(1u, v38));
        if (v39 == 1)
        {
          do
          {
            while (*v38 == 1)
              ;
            do
              signed int v40 = __ldaxr(v38);
            while (__stlxr(1u, v38));
          }

          while (v40 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v37, (GPUTools::FB::Fbuf *)&v55, *(unsigned int *)v55, 1);
        atomic_store(0, v38);
        do
        {
          BOOL v41 = __ldaxr(v14);
          unsigned int v42 = v41 - 1;
        }

        while (__stlxr(v42, v14));
        if (gCheckGLErrors) {
          uint64_t v43 = v42 < 1;
        }
        else {
          uint64_t v43 = 1;
        }
        if (!v43) {
          handle_opengl_thread_conflict((const void **)v13);
        }
        goto LABEL_51;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", v20, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    return;
  }

  do
    id v44 = __ldaxr(v14);
  while (__stlxr(v44 - 1, v14));
  [(id)DYGetGLGuestAppClient(v18) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 + 24) + 8264LL))( a1,  a2,  a3,  a4);
LABEL_51:
  if (v55) {
    free(v55);
  }
}

    *a3 = v17;
    return v5;
  }

  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }

  uint64_t v11 = a2[1];
  if (v11)
  {
    unint64_t v12 = (void *)a2[1];
    do
    {
      a4 = v12;
      unint64_t v12 = (void *)*v12;
    }

    while (v12);
  }

  else
  {
    int64_t v19 = a2;
    do
    {
      a4 = (void *)v19[2];
      signed int v14 = *a4 == (void)v19;
      int64_t v19 = a4;
    }

    while (!v14);
  }

  if (a4 != v5 && v6 >= a4[4])
  {
    unsigned int v20 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          unint64_t v21 = v20;
          uint64_t v22 = v20[4];
          if (v6 >= v22) {
            break;
          }
          unsigned int v20 = (void *)*v21;
          unint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }

        if (v22 >= v6) {
          break;
        }
        unint64_t v5 = v21 + 1;
        unsigned int v20 = (void *)v21[1];
      }

      while (v20);
    }

    else
    {
      unint64_t v21 = a1 + 1;
    }

void sub_213C4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  if (a12) {
    free(a12);
  }
  _Unwind_Resume(exception_object);
}

void bind_texture(__GLIContextRec *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v6) {
    goto LABEL_12;
  }
  uint64_t v7 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v8 = v6[4];
    BOOL v9 = v8 >= (unint64_t)a1;
    else {
      uint64_t v10 = v6 + 1;
    }
    if (v9) {
      uint64_t v7 = (uint64_t)v6;
    }
    uint64_t v6 = (void *)*v10;
  }

  while (*v10);
  if (v7 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v7 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v7 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v11 = *(void *)(v7 + 40);
  unint64_t v12 = (unsigned int *)(v11 + 4640);
  do
  {
    unsigned int v13 = __ldaxr(v12);
    signed int v14 = v13 + 1;
  }

  while (__stlxr(v14, v12));
  if (gCheckGLErrors) {
    BOOL v15 = v14 <= 1;
  }
  else {
    BOOL v15 = 1;
  }
  if (v15)
  {
    id v58 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v57 = handle_opengl_thread_conflict((const void **)v11);
    id v58 = [(id)DYGetGLGuestAppClient(v57) waitOnGraphicsSemaphoreAssertions];
    if ((int)v58 >= 1)
    {
      do
LABEL_84:
        unsigned int v59 = __ldaxr(v12);
      while (__stlxr(v59 - 1, v12));
      uint64_t v60 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v58) graphicsLockWaitQueue];
      dispatch_sync_f(v60, 0LL, (dispatch_function_t)do_nothing);
      (*(void (**)(__GLIContextRec *, uint64_t, uint64_t))(*(void *)(v11 + 24) + 40LL))(a1, a2, a3);
      return;
    }
  }

  *(_BYTE *)(v11 + 483_Block_object_dispose(va, 8) = 1;
  v65[0] = 0LL;
  v65[1] = 0LL;
  int v66 = 0;
  if ([(id)DYGetGLGuestAppClient(v58) state] != (char *)&dword_0 + 1
    || (id v20 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand], !(_DWORD)v20))
  {
    GPUTools::FB::Encode((uint64_t)v65, 20LL, 0LL, (uint64_t)"Ceui", v16, v17, v18, v19, *(void *)v11);
    char v22 = byte_206E6C;
    if ((byte_206E6C & 1) != 0) {
      breakpoint_break((uint64_t)v65, &dword_14, 1LL, *(unsigned int *)(v11 + 3404), v11);
    }
    uint64_t v23 = (uint64_t)[(id)DYGetGLGuestAppClient(v21) overrideFlags];
    if (!(v23 & 0x10 | v22 & 4))
    {
      uint64_t v24 = mach_absolute_time();
      (*(void (**)(__GLIContextRec *, uint64_t, uint64_t))(*(void *)(v11 + 32) + 40LL))(a1, a2, a3);
      uint64_t v23 = mach_absolute_time();
      uint64_t v25 = v23 - v24;
      unint64_t v26 = g_DYTimebaseInfo;
      if (g_DYTimebaseInfo == *((_DWORD *)&g_DYTimebaseInfo + 1))
      {
        unint64_t v27 = v65[0];
        *((void *)v65[0] + 2) = v24;
        v27[3] = v25;
        if (!gCheckGLErrors) {
          goto LABEL_28;
        }
      }

      else
      {
        uint64_t v63 = __udivti3(g_DYTimebaseInfo * v25, (g_DYTimebaseInfo * (unsigned __int128)v25) >> 64);
        uint64_t v64 = v65[0];
        *((void *)v65[0] + 3) = v63;
        uint64_t v23 = __udivti3(v26 * v24, (v26 * (unsigned __int128)v24) >> 64);
        v64[2] = v23;
        if (!gCheckGLErrors) {
          goto LABEL_28;
        }
      }

      uint64_t v23 = check_errors(v11);
    }

{
  void *v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  void *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  signed int v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void *v27;
  id v28;
  GPUTools::FB::Fbuf *v29;
  unsigned int v30;
  GPUTools::FB::Fbuf *v31;
  dispatch_queue_s *v32;
  uint64_t v33;
  GPUTools::FB::Stream *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  signed int v39;
  BOOL v40;
  unsigned int v41;
  uint64_t v42;
  id v43;
  unsigned int v44;
  dispatch_queue_s *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50[2];
  int v51;
  uint64_t v6 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v6) {
    goto LABEL_12;
  }
  uint64_t v7 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v8 = v6[4];
    BOOL v9 = v8 >= (unint64_t)a1;
    else {
      uint64_t v10 = v6 + 1;
    }
    if (v9) {
      uint64_t v7 = (uint64_t)v6;
    }
    uint64_t v6 = (void *)*v10;
  }

  while (*v10);
  if (v7 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v7 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v7 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v11 = *(void *)(v7 + 40);
  unint64_t v12 = (unsigned int *)(v11 + 4640);
  do
  {
    unsigned int v13 = __ldaxr(v12);
    signed int v14 = v13 + 1;
  }

  while (__stlxr(v14, v12));
  if (gCheckGLErrors) {
    BOOL v15 = v14 <= 1;
  }
  else {
    BOOL v15 = 1;
  }
  if (v15)
  {
    uint8x8_t v43 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    unint64_t v42 = handle_opengl_thread_conflict((const void **)v11);
    uint8x8_t v43 = [(id)DYGetGLGuestAppClient(v42) waitOnGraphicsSemaphoreAssertions];
    if ((int)v43 >= 1)
    {
      do
LABEL_59:
        unint64_t v44 = __ldaxr(v12);
      while (__stlxr(v44 - 1, v12));
      unsigned int v45 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v43) graphicsLockWaitQueue];
      dispatch_sync_f(v45, 0LL, (dispatch_function_t)do_nothing);
      (*(void (**)(__GLIContextRec *, uint64_t, uint64_t))(*(void *)(v11 + 24) + 40LL))(a1, a2, a3);
      return;
    }
  }

  *(_BYTE *)(v11 + 483_Block_object_dispose(va, 8) = 1;
  v50[0] = 0LL;
  v50[1] = 0LL;
  __int128 v51 = 0;
  if ([(id)DYGetGLGuestAppClient(v43) state] != (char *)&dword_0 + 1
    || (id v20 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand], !(_DWORD)v20))
  {
    GPUTools::FB::Encode((uint64_t)v50, 20LL, 0LL, (uint64_t)"Ceui", v16, v17, v18, v19, *(void *)v11);
    char v22 = byte_206E6C;
    if ((byte_206E6C & 1) != 0) {
      breakpoint_break((uint64_t)v50, &dword_14, 1LL, *(unsigned int *)(v11 + 3404), v11);
    }
    uint64_t v23 = (uint64_t)[(id)DYGetGLGuestAppClient(v21) overrideFlags];
    if (!(v23 & 0x10 | v22 & 4))
    {
      uint64_t v24 = mach_absolute_time();
      (*(void (**)(__GLIContextRec *, uint64_t, uint64_t))(*(void *)(v11 + 32) + 40LL))(a1, a2, a3);
      uint64_t v23 = mach_absolute_time();
      uint64_t v25 = v23 - v24;
      unint64_t v26 = g_DYTimebaseInfo;
      if (g_DYTimebaseInfo == *((_DWORD *)&g_DYTimebaseInfo + 1))
      {
        unint64_t v27 = v50[0];
        *((void *)v50[0] + 2) = v24;
        v27[3] = v25;
        if (!gCheckGLErrors) {
          goto LABEL_28;
        }
      }

      else
      {
        unint64_t v48 = __udivti3(g_DYTimebaseInfo * v25, (g_DYTimebaseInfo * (unsigned __int128)v25) >> 64);
        uint64_t v49 = v50[0];
        *((void *)v50[0] + 3) = v48;
        uint64_t v23 = __udivti3(v26 * v24, (v26 * (unsigned __int128)v24) >> 64);
        v49[2] = v23;
        if (!gCheckGLErrors) {
          goto LABEL_28;
        }
      }

      uint64_t v23 = check_errors(v11);
    }

{
  void *v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  void *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  signed int v14;
  BOOL v15;
  id v16;
  unsigned int v17;
  signed int v18;
  BOOL v19;
  unsigned int v20;
  uint64_t v21;
  id v22;
  unsigned int v23;
  dispatch_queue_s *v24;
  uint64_t v25;
  uint64_t v6 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v6) {
    goto LABEL_12;
  }
  uint64_t v7 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v8 = v6[4];
    BOOL v9 = v8 >= (unint64_t)a1;
    else {
      uint64_t v10 = v6 + 1;
    }
    if (v9) {
      uint64_t v7 = (uint64_t)v6;
    }
    uint64_t v6 = (void *)*v10;
  }

  while (*v10);
  if (v7 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v7 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v7 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v11 = *(void *)(v7 + 40);
  unint64_t v12 = (unsigned int *)(v11 + 4640);
  do
  {
    unsigned int v13 = __ldaxr(v12);
    signed int v14 = v13 + 1;
  }

  while (__stlxr(v14, v12));
  if (gCheckGLErrors) {
    BOOL v15 = v14 <= 1;
  }
  else {
    BOOL v15 = 1;
  }
  if (v15)
  {
    char v22 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v21 = handle_opengl_thread_conflict((const void **)v11);
    char v22 = [(id)DYGetGLGuestAppClient(v21) waitOnGraphicsSemaphoreAssertions];
    if ((int)v22 >= 1)
    {
      do
LABEL_37:
        uint64_t v23 = __ldaxr(v12);
      while (__stlxr(v23 - 1, v12));
      uint64_t v24 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v22) graphicsLockWaitQueue];
      dispatch_sync_f(v24, 0LL, (dispatch_function_t)do_nothing);
LABEL_39:
      (*(void (**)(__GLIContextRec *, uint64_t, uint64_t))(*(void *)(v11 + 24) + 40LL))(a1, a2, a3);
      return;
    }
  }

  *(_BYTE *)(v11 + 483_Block_object_dispose(va, 8) = 1;
  if ([(id)DYGetGLGuestAppClient(v22) state] == (char *)&dword_0 + 1)
  {
    uint64_t v16 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand];
    if ((_DWORD)v16)
    {
      do
        id v20 = __ldaxr(v12);
      while (__stlxr(v20 - 1, v12));
      [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
      goto LABEL_39;
    }
  }

  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t))(*(void *)(v11 + 32) + 40LL))(a1, a2, a3);
  ++*(void *)(v11 + 3704);
  if (gCheckGLErrors)
  {
    check_errors(v11);
    if (gBreakOnError && (uint64_t v25 = *(unsigned int *)(v11 + 3404), (_DWORD)v25))
    {
      breakpoint_break(0LL, (volatile int *)0xFFFFFFFFLL, 3LL, v25, v11);
      if (gCheckGLErrors) {
        goto LABEL_25;
      }
    }

    else if (gCheckGLErrors)
    {
      goto LABEL_25;
    }
  }

  check_errors(v11);
LABEL_25:
  if (!*(_DWORD *)(v11 + 3404)) {
    wrapper_cache_texture_binding(v11, a2, a3);
  }
  do
  {
    uint64_t v17 = __ldaxr(v12);
    uint64_t v18 = v17 - 1;
  }

  while (__stlxr(v18, v12));
  if (gCheckGLErrors) {
    uint64_t v19 = v18 < 1;
  }
  else {
    uint64_t v19 = 1;
  }
  if (!v19) {
    handle_opengl_thread_conflict((const void **)v11);
  }
}

{
  void *v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  void *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  signed int v14;
  BOOL v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  int64x2_t v19;
  unsigned int v20;
  signed int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  id v25;
  unsigned int v26;
  dispatch_queue_s *v27;
  uint64_t v28;
  uint64_t v6 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v6) {
    goto LABEL_12;
  }
  uint64_t v7 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v8 = v6[4];
    BOOL v9 = v8 >= (unint64_t)a1;
    else {
      uint64_t v10 = v6 + 1;
    }
    if (v9) {
      uint64_t v7 = (uint64_t)v6;
    }
    uint64_t v6 = (void *)*v10;
  }

  while (*v10);
  if (v7 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v7 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v7 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v11 = *(void *)(v7 + 40);
  unint64_t v12 = (unsigned int *)(v11 + 4640);
  do
  {
    unsigned int v13 = __ldaxr(v12);
    signed int v14 = v13 + 1;
  }

  while (__stlxr(v14, v12));
  if (gCheckGLErrors) {
    BOOL v15 = v14 <= 1;
  }
  else {
    BOOL v15 = 1;
  }
  if (v15)
  {
    uint64_t v25 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v24 = handle_opengl_thread_conflict((const void **)v11);
    uint64_t v25 = [(id)DYGetGLGuestAppClient(v24) waitOnGraphicsSemaphoreAssertions];
    if ((int)v25 >= 1)
    {
      do
LABEL_37:
        unint64_t v26 = __ldaxr(v12);
      while (__stlxr(v26 - 1, v12));
      unint64_t v27 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v25) graphicsLockWaitQueue];
      dispatch_sync_f(v27, 0LL, (dispatch_function_t)do_nothing);
LABEL_39:
      (*(void (**)(__GLIContextRec *, uint64_t, uint64_t))(*(void *)(v11 + 24) + 40LL))(a1, a2, a3);
      return;
    }
  }

  *(_BYTE *)(v11 + 483_Block_object_dispose(va, 8) = 1;
  if ([(id)DYGetGLGuestAppClient(v25) state] == (char *)&dword_0 + 1)
  {
    uint64_t v16 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand];
    if ((_DWORD)v16)
    {
      do
        uint64_t v23 = __ldaxr(v12);
      while (__stlxr(v23 - 1, v12));
      [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
      goto LABEL_39;
    }
  }

  uint64_t v17 = mach_absolute_time();
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t))(*(void *)(v11 + 32) + 40LL))(a1, a2, a3);
  uint64_t v18 = mach_absolute_time();
  uint64_t v19 = vdupq_n_s64(1uLL);
  v19.i64[0] = v18 - v17;
  *(int64x2_t *)(v11 + 3696) = vaddq_s64(v19, *(int64x2_t *)(v11 + 3696));
  if (gCheckGLErrors)
  {
    check_errors(v11);
    if (gBreakOnError && (id v28 = *(unsigned int *)(v11 + 3404), (_DWORD)v28))
    {
      breakpoint_break(0LL, (volatile int *)0xFFFFFFFFLL, 3LL, v28, v11);
      if (gCheckGLErrors) {
        goto LABEL_25;
      }
    }

    else if (gCheckGLErrors)
    {
      goto LABEL_25;
    }
  }

  check_errors(v11);
LABEL_25:
  if (!*(_DWORD *)(v11 + 3404)) {
    wrapper_cache_texture_binding(v11, a2, a3);
  }
  do
  {
    id v20 = __ldaxr(v12);
    uint64_t v21 = v20 - 1;
  }

  while (__stlxr(v21, v12));
  if (gCheckGLErrors) {
    char v22 = v21 < 1;
  }
  else {
    char v22 = 1;
  }
  if (!v22) {
    handle_opengl_thread_conflict((const void **)v11);
  }
}

LABEL_71:
      GPUTools::DYLockUtils::Unlock(v38, v40);
    }

    do
    {
      unsigned int v53 = __ldaxr(v12);
      signed int v54 = v53 - 1;
    }

    while (__stlxr(v54, v12));
    if (gCheckGLErrors) {
      BOOL v55 = v54 < 1;
    }
    else {
      BOOL v55 = 1;
    }
    if (!v55) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    goto LABEL_78;
  }

  do
    unsigned int v56 = __ldaxr(v12);
  while (__stlxr(v56 - 1, v12));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t))(*(void *)(v11 + 24) + 40LL))(a1, a2, a3);
LABEL_78:
  if (v65[0]) {
    free(v65[0]);
  }
}

void sub_21964( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  if (a12) {
    free(a12);
  }
  _Unwind_Resume(a1);
}

void blend_func(__GLIContextRec *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v6) {
    goto LABEL_12;
  }
  uint64_t v7 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v8 = v6[4];
    BOOL v9 = v8 >= (unint64_t)a1;
    else {
      uint64_t v10 = v6 + 1;
    }
    if (v9) {
      uint64_t v7 = (uint64_t)v6;
    }
    uint64_t v6 = (void *)*v10;
  }

  while (*v10);
  if (v7 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v7 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v7 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v11 = *(void *)(v7 + 40);
  unint64_t v12 = (unsigned int *)(v11 + 4640);
  do
  {
    unsigned int v13 = __ldaxr(v12);
    signed int v14 = v13 + 1;
  }

  while (__stlxr(v14, v12));
  if (gCheckGLErrors) {
    BOOL v15 = v14 <= 1;
  }
  else {
    BOOL v15 = 1;
  }
  if (v15)
  {
    id v44 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v43 = handle_opengl_thread_conflict((const void **)v11);
    id v44 = [(id)DYGetGLGuestAppClient(v43) waitOnGraphicsSemaphoreAssertions];
    if ((int)v44 >= 1)
    {
      do
LABEL_57:
        unsigned int v45 = __ldaxr(v12);
      while (__stlxr(v45 - 1, v12));
      __int128 v46 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v44) graphicsLockWaitQueue];
      dispatch_sync_f(v46, 0LL, (dispatch_function_t)do_nothing);
      (*(void (**)(__GLIContextRec *, uint64_t, uint64_t))(*(void *)(v11 + 24) + 56LL))(a1, a2, a3);
      return;
    }
  }

  *(_BYTE *)(v11 + 483_Block_object_dispose(va, 8) = 1;
  unsigned int v53 = 0LL;
  signed int v54 = 0LL;
  unsigned int v55 = 0;
  if ([(id)DYGetGLGuestAppClient(v44) state] != (char *)&dword_0 + 1
    || (id v16 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand], !(_DWORD)v16))
  {
    uint64_t v18 = (char *)v53;
    uint64_t v17 = v54;
    int64_t v19 = v54 - (_BYTE *)v53;
    unsigned int v20 = v55;
    unint64_t v21 = v55 - (v54 - (_BYTE *)v53);
    if (v21 > 0x37) {
      goto LABEL_24;
    }
    int v47 = (311 - v21) & 0xFFFFFF00;
    v55 += v47;
    uint64_t v18 = (char *)malloc(v47 + v20);
    unsigned int v53 = v18;
    if (v18)
    {
      if ((v18 & 3) == 0)
      {
        uint64_t v17 = &v18[v19];
LABEL_24:
        *((void *)v17 + 6) = 0LL;
        *((_OWORD *)v17 + 1) = 0u;
        *((_OWORD *)v17 + 2) = 0u;
        *(_OWORD *)uint64_t v17 = 0u;
        signed int v54 = v17 + 56;
        GPUTools::FB::Fbuf::align((char **)&v53);
        *((_DWORD *)v18 + 1) = 26;
        *((_DWORD *)v18 + _Block_object_dispose(va, 8) = 0;
        __uint64_t v52 = 0LL;
        uint64_t v22 = pthread_threadid_np(0LL, &v52);
        *((void *)v18 + 1) = v52;
        *((_DWORD *)v18 + 9) = 6645059;
        *((void *)v18 + 5) = *(void *)v11;
        *((_DWORD *)v18 + 12) = a2;
        *((_DWORD *)v18 + 13) = a3;
        char v23 = byte_206E72;
        if ((byte_206E72 & 1) != 0) {
          breakpoint_break((uint64_t)&v53, (int *)((char *)&dword_18 + 2), 1LL, *(unsigned int *)(v11 + 3404), v11);
        }
        uint64_t v24 = (uint64_t)[(id)DYGetGLGuestAppClient(v22) overrideFlags];
        if (!(v24 & 0x10 | v23 & 4))
        {
          uint64_t v25 = mach_absolute_time();
          (*(void (**)(__GLIContextRec *, uint64_t, uint64_t))(*(void *)(v11 + 32) + 56LL))(a1, a2, a3);
          uint64_t v24 = mach_absolute_time();
          uint64_t v26 = v24 - v25;
          unint64_t v27 = g_DYTimebaseInfo;
          if (g_DYTimebaseInfo == *((_DWORD *)&g_DYTimebaseInfo + 1))
          {
            id v28 = v53;
            *((void *)v53 + 2) = v25;
            v28[3] = v26;
            if (!gCheckGLErrors) {
              goto LABEL_29;
            }
          }

          else
          {
            uint64_t v50 = __udivti3(g_DYTimebaseInfo * v26, (g_DYTimebaseInfo * (unsigned __int128)v26) >> 64);
            __int128 v51 = v53;
            *((void *)v53 + 3) = v50;
            uint64_t v24 = __udivti3(v27 * v25, (v27 * (unsigned __int128)v25) >> 64);
            v51[2] = v24;
            if (!gCheckGLErrors) {
              goto LABEL_29;
            }
          }

          uint64_t v24 = check_errors(v11);
        }

{
  void *v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  void *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  signed int v14;
  BOOL v15;
  id v16;
  char *v17;
  char *v18;
  int64_t v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  id v29;
  GPUTools::FB::Fbuf *v30;
  unsigned int v31;
  GPUTools::FB::Fbuf *v32;
  dispatch_queue_s *v33;
  uint64_t v34;
  GPUTools::FB::Stream *v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  signed int v40;
  BOOL v41;
  unsigned int v42;
  uint64_t v43;
  id v44;
  unsigned int v45;
  dispatch_queue_s *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  __uint64_t v52;
  void *v53;
  char *v54;
  unsigned int v55;
  uint64_t v6 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v6) {
    goto LABEL_12;
  }
  uint64_t v7 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v8 = v6[4];
    BOOL v9 = v8 >= (unint64_t)a1;
    else {
      uint64_t v10 = v6 + 1;
    }
    if (v9) {
      uint64_t v7 = (uint64_t)v6;
    }
    uint64_t v6 = (void *)*v10;
  }

  while (*v10);
  if (v7 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v7 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v7 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v11 = *(void *)(v7 + 40);
  unint64_t v12 = (unsigned int *)(v11 + 4640);
  do
  {
    unsigned int v13 = __ldaxr(v12);
    signed int v14 = v13 + 1;
  }

  while (__stlxr(v14, v12));
  if (gCheckGLErrors) {
    BOOL v15 = v14 <= 1;
  }
  else {
    BOOL v15 = 1;
  }
  if (v15)
  {
    id v44 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v43 = handle_opengl_thread_conflict((const void **)v11);
    id v44 = [(id)DYGetGLGuestAppClient(v43) waitOnGraphicsSemaphoreAssertions];
    if ((int)v44 >= 1)
    {
      do
LABEL_57:
        unsigned int v45 = __ldaxr(v12);
      while (__stlxr(v45 - 1, v12));
      __int128 v46 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v44) graphicsLockWaitQueue];
      dispatch_sync_f(v46, 0LL, (dispatch_function_t)do_nothing);
      (*(void (**)(__GLIContextRec *, uint64_t, uint64_t))(*(void *)(v11 + 24) + 56LL))(a1, a2, a3);
      return;
    }
  }

  *(_BYTE *)(v11 + 483_Block_object_dispose(va, 8) = 1;
  unsigned int v53 = 0LL;
  signed int v54 = 0LL;
  unsigned int v55 = 0;
  if ([(id)DYGetGLGuestAppClient(v44) state] != (char *)&dword_0 + 1
    || (id v16 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand], !(_DWORD)v16))
  {
    uint64_t v18 = (char *)v53;
    uint64_t v17 = v54;
    int64_t v19 = v54 - (_BYTE *)v53;
    unsigned int v20 = v55;
    unint64_t v21 = v55 - (v54 - (_BYTE *)v53);
    if (v21 > 0x37) {
      goto LABEL_24;
    }
    int v47 = (311 - v21) & 0xFFFFFF00;
    v55 += v47;
    uint64_t v18 = (char *)malloc(v47 + v20);
    unsigned int v53 = v18;
    if (v18)
    {
      if ((v18 & 3) == 0)
      {
        uint64_t v17 = &v18[v19];
LABEL_24:
        *((void *)v17 + 6) = 0LL;
        *((_OWORD *)v17 + 1) = 0u;
        *((_OWORD *)v17 + 2) = 0u;
        *(_OWORD *)uint64_t v17 = 0u;
        signed int v54 = v17 + 56;
        GPUTools::FB::Fbuf::align((char **)&v53);
        *((_DWORD *)v18 + 1) = 26;
        *((_DWORD *)v18 + _Block_object_dispose(va, 8) = 0;
        __uint64_t v52 = 0LL;
        uint64_t v22 = pthread_threadid_np(0LL, &v52);
        *((void *)v18 + 1) = v52;
        *((_DWORD *)v18 + 9) = 6645059;
        *((void *)v18 + 5) = *(void *)v11;
        *((_DWORD *)v18 + 12) = a2;
        *((_DWORD *)v18 + 13) = a3;
        char v23 = byte_206E72;
        if ((byte_206E72 & 1) != 0) {
          breakpoint_break((uint64_t)&v53, (int *)((char *)&dword_18 + 2), 1LL, *(unsigned int *)(v11 + 3404), v11);
        }
        uint64_t v24 = (uint64_t)[(id)DYGetGLGuestAppClient(v22) overrideFlags];
        if (!(v24 & 0x10 | v23 & 4))
        {
          uint64_t v25 = mach_absolute_time();
          (*(void (**)(__GLIContextRec *, uint64_t, uint64_t))(*(void *)(v11 + 32) + 56LL))(a1, a2, a3);
          uint64_t v24 = mach_absolute_time();
          uint64_t v26 = v24 - v25;
          unint64_t v27 = g_DYTimebaseInfo;
          if (g_DYTimebaseInfo == *((_DWORD *)&g_DYTimebaseInfo + 1))
          {
            id v28 = v53;
            *((void *)v53 + 2) = v25;
            v28[3] = v26;
            if (!gCheckGLErrors) {
              goto LABEL_29;
            }
          }

          else
          {
            uint64_t v50 = __udivti3(g_DYTimebaseInfo * v26, (g_DYTimebaseInfo * (unsigned __int128)v26) >> 64);
            __int128 v51 = v53;
            *((void *)v53 + 3) = v50;
            uint64_t v24 = __udivti3(v27 * v25, (v27 * (unsigned __int128)v25) >> 64);
            v51[2] = v24;
            if (!gCheckGLErrors) {
              goto LABEL_29;
            }
          }

          uint64_t v24 = check_errors(v11);
        }

{
  void *v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  void *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  signed int v14;
  BOOL v15;
  id v16;
  unsigned int v17;
  signed int v18;
  BOOL v19;
  unsigned int v20;
  uint64_t v21;
  id v22;
  unsigned int v23;
  dispatch_queue_s *v24;
  uint64_t v25;
  uint64_t v6 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v6) {
    goto LABEL_12;
  }
  uint64_t v7 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v8 = v6[4];
    BOOL v9 = v8 >= (unint64_t)a1;
    else {
      uint64_t v10 = v6 + 1;
    }
    if (v9) {
      uint64_t v7 = (uint64_t)v6;
    }
    uint64_t v6 = (void *)*v10;
  }

  while (*v10);
  if (v7 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v7 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v7 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v11 = *(void *)(v7 + 40);
  unint64_t v12 = (unsigned int *)(v11 + 4640);
  do
  {
    unsigned int v13 = __ldaxr(v12);
    signed int v14 = v13 + 1;
  }

  while (__stlxr(v14, v12));
  if (gCheckGLErrors) {
    BOOL v15 = v14 <= 1;
  }
  else {
    BOOL v15 = 1;
  }
  if (v15)
  {
    uint64_t v22 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    unint64_t v21 = handle_opengl_thread_conflict((const void **)v11);
    uint64_t v22 = [(id)DYGetGLGuestAppClient(v21) waitOnGraphicsSemaphoreAssertions];
    if ((int)v22 >= 1)
    {
      do
LABEL_34:
        char v23 = __ldaxr(v12);
      while (__stlxr(v23 - 1, v12));
      uint64_t v24 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v22) graphicsLockWaitQueue];
      dispatch_sync_f(v24, 0LL, (dispatch_function_t)do_nothing);
LABEL_36:
      (*(void (**)(__GLIContextRec *, uint64_t, uint64_t))(*(void *)(v11 + 24) + 56LL))(a1, a2, a3);
      return;
    }
  }

  *(_BYTE *)(v11 + 483_Block_object_dispose(va, 8) = 1;
  if ([(id)DYGetGLGuestAppClient(v22) state] == (char *)&dword_0 + 1)
  {
    id v16 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand];
    if ((_DWORD)v16)
    {
      do
        unsigned int v20 = __ldaxr(v12);
      while (__stlxr(v20 - 1, v12));
      [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
      goto LABEL_36;
    }
  }

  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t))(*(void *)(v11 + 32) + 56LL))(a1, a2, a3);
  ++*(void *)(v11 + 3704);
  if (gCheckGLErrors)
  {
    check_errors(v11);
    if (gBreakOnError)
    {
      uint64_t v25 = *(unsigned int *)(v11 + 3404);
      if ((_DWORD)v25) {
        breakpoint_break(0LL, (volatile int *)0xFFFFFFFFLL, 3LL, v25, v11);
      }
    }
  }

  do
  {
    uint64_t v17 = __ldaxr(v12);
    uint64_t v18 = v17 - 1;
  }

  while (__stlxr(v18, v12));
  if (gCheckGLErrors) {
    int64_t v19 = v18 < 1;
  }
  else {
    int64_t v19 = 1;
  }
  if (!v19) {
    handle_opengl_thread_conflict((const void **)v11);
  }
}

{
  void *v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  void *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  signed int v14;
  BOOL v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  int64x2_t v19;
  unsigned int v20;
  signed int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  id v25;
  unsigned int v26;
  dispatch_queue_s *v27;
  uint64_t v28;
  uint64_t v6 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v6) {
    goto LABEL_12;
  }
  uint64_t v7 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v8 = v6[4];
    BOOL v9 = v8 >= (unint64_t)a1;
    else {
      uint64_t v10 = v6 + 1;
    }
    if (v9) {
      uint64_t v7 = (uint64_t)v6;
    }
    uint64_t v6 = (void *)*v10;
  }

  while (*v10);
  if (v7 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v7 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v7 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v11 = *(void *)(v7 + 40);
  unint64_t v12 = (unsigned int *)(v11 + 4640);
  do
  {
    unsigned int v13 = __ldaxr(v12);
    signed int v14 = v13 + 1;
  }

  while (__stlxr(v14, v12));
  if (gCheckGLErrors) {
    BOOL v15 = v14 <= 1;
  }
  else {
    BOOL v15 = 1;
  }
  if (v15)
  {
    uint64_t v25 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v24 = handle_opengl_thread_conflict((const void **)v11);
    uint64_t v25 = [(id)DYGetGLGuestAppClient(v24) waitOnGraphicsSemaphoreAssertions];
    if ((int)v25 >= 1)
    {
      do
LABEL_34:
        uint64_t v26 = __ldaxr(v12);
      while (__stlxr(v26 - 1, v12));
      unint64_t v27 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v25) graphicsLockWaitQueue];
      dispatch_sync_f(v27, 0LL, (dispatch_function_t)do_nothing);
LABEL_36:
      (*(void (**)(__GLIContextRec *, uint64_t, uint64_t))(*(void *)(v11 + 24) + 56LL))(a1, a2, a3);
      return;
    }
  }

  *(_BYTE *)(v11 + 483_Block_object_dispose(va, 8) = 1;
  if ([(id)DYGetGLGuestAppClient(v25) state] == (char *)&dword_0 + 1)
  {
    id v16 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand];
    if ((_DWORD)v16)
    {
      do
        char v23 = __ldaxr(v12);
      while (__stlxr(v23 - 1, v12));
      [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
      goto LABEL_36;
    }
  }

  uint64_t v17 = mach_absolute_time();
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t))(*(void *)(v11 + 32) + 56LL))(a1, a2, a3);
  uint64_t v18 = mach_absolute_time();
  int64_t v19 = vdupq_n_s64(1uLL);
  v19.i64[0] = v18 - v17;
  *(int64x2_t *)(v11 + 3696) = vaddq_s64(v19, *(int64x2_t *)(v11 + 3696));
  if (gCheckGLErrors)
  {
    check_errors(v11);
    if (gBreakOnError)
    {
      id v28 = *(unsigned int *)(v11 + 3404);
      if ((_DWORD)v28) {
        breakpoint_break(0LL, (volatile int *)0xFFFFFFFFLL, 3LL, v28, v11);
      }
    }
  }

  do
  {
    unsigned int v20 = __ldaxr(v12);
    unint64_t v21 = v20 - 1;
  }

  while (__stlxr(v21, v12));
  if (gCheckGLErrors) {
    uint64_t v22 = v21 < 1;
  }
  else {
    uint64_t v22 = 1;
  }
  if (!v22) {
    handle_opengl_thread_conflict((const void **)v11);
  }
}

void sub_21E68( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  if (a12) {
    free(a12);
  }
  _Unwind_Resume(exception_object);
}

void clear(__GLIContextRec *a1, uint64_t a2)
{
  unint64_t v4 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v4) {
    goto LABEL_12;
  }
  uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v6 = v4[4];
    BOOL v7 = v6 >= (unint64_t)a1;
    else {
      unint64_t v8 = v4 + 1;
    }
    if (v7) {
      uint64_t v5 = (uint64_t)v4;
    }
    unint64_t v4 = (void *)*v8;
  }

  while (*v8);
  if (v5 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v5 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v9 = *(void *)(v5 + 40);
  uint64_t v10 = (unsigned int *)(v9 + 4640);
  do
  {
    unsigned int v11 = __ldaxr(v10);
    signed int v12 = v11 + 1;
  }

  while (__stlxr(v12, v10));
  if (gCheckGLErrors) {
    BOOL v13 = v12 <= 1;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13)
  {
    id v42 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v41 = handle_opengl_thread_conflict((const void **)v9);
    id v42 = [(id)DYGetGLGuestAppClient(v41) waitOnGraphicsSemaphoreAssertions];
    if ((int)v42 >= 1)
    {
      do
LABEL_58:
        unsigned int v43 = __ldaxr(v10);
      while (__stlxr(v43 - 1, v10));
      id v44 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v42) graphicsLockWaitQueue];
      dispatch_sync_f(v44, 0LL, (dispatch_function_t)do_nothing);
      (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 80LL))(a1, a2);
      return;
    }
  }

  *(_WORD *)(v9 + 483_Block_object_dispose(va, 8) = 257;
  uint64_t v60 = 0LL;
  uint64_t v61 = 0LL;
  unsigned int v62 = 0;
  if ([(id)DYGetGLGuestAppClient(v42) state] != (char *)&dword_0 + 1
    || (id v14 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand], !(_DWORD)v14))
  {
    uint64_t v16 = (uint64_t)v60;
    uint64_t v15 = v61;
    uint64_t v17 = v61 - (void)v60;
    unsigned int v18 = v62;
    unint64_t v19 = v62 - (v61 - (void)v60);
    if (v19 > 0x33) {
      goto LABEL_24;
    }
    int v45 = (307 - v19) & 0xFFFFFF00;
    v62 += v45;
    uint64_t v16 = (uint64_t)malloc(v45 + v18);
    uint64_t v60 = (void *)v16;
    if (v16)
    {
      if ((v16 & 3) == 0)
      {
        uint64_t v15 = v17 + v16;
LABEL_24:
        *(_DWORD *)(v15 + 4_Block_object_dispose(va, 8) = 0;
        *(_OWORD *)(v15 + 16) = 0u;
        *(_OWORD *)(v15 + 32) = 0u;
        *(_OWORD *)uint64_t v15 = 0u;
        uint64_t v61 = v15 + 52;
        GPUTools::FB::Fbuf::align((char **)&v60);
        *(_DWORD *)(v16 + 4) = 36;
        *(_DWORD *)(v16 + 32) = 0;
        __uint64_t v59 = 0LL;
        uint64_t v20 = pthread_threadid_np(0LL, &v59);
        *(void *)(v16 + _Block_object_dispose(va, 8) = v59;
        *(_DWORD *)(v16 + 36) = 6911299;
        *(void *)(v16 + 40) = *(void *)v9;
        *(_DWORD *)(v16 + 4_Block_object_dispose(va, 8) = a2;
        LOBYTE(v17) = byte_206E7C;
        if ((byte_206E7C & 1) != 0) {
          breakpoint_break((uint64_t)&v60, (volatile int *)&stru_20.cmdsize, 1LL, *(unsigned int *)(v9 + 3404), v9);
        }
        uint64_t v21 = (uint64_t)[(id)DYGetGLGuestAppClient(v20) overrideFlags];
        if (v21 & 0x10 | v17 & 4) {
          goto LABEL_30;
        }
        id v22 = [(id)DYGetGLGuestAppClient(v21) overrideFlags];
        if (!(_DWORD)v22)
        {
          uint64_t v23 = mach_absolute_time();
          (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 32) + 80LL))(a1, a2);
          uint64_t v21 = mach_absolute_time();
          uint64_t v24 = v21 - v23;
          unint64_t v25 = g_DYTimebaseInfo;
          if (g_DYTimebaseInfo == *((_DWORD *)&g_DYTimebaseInfo + 1))
          {
            uint64_t v26 = v60;
            *((void *)v60 + 2) = v23;
            v26[3] = v24;
            if (!gCheckGLErrors) {
              goto LABEL_30;
            }
          }

          else
          {
            uint64_t v54 = __udivti3(g_DYTimebaseInfo * v24, (g_DYTimebaseInfo * (unsigned __int128)v24) >> 64);
            unsigned int v55 = v60;
            *((void *)v60 + 3) = v54;
            uint64_t v21 = __udivti3(v25 * v23, (v25 * (unsigned __int128)v23) >> 64);
            v55[2] = v21;
            if (!gCheckGLErrors) {
              goto LABEL_30;
            }
          }

          uint64_t v21 = check_errors(v9);
LABEL_30:
          id v27 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v21), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
          if ((_DWORD)v27) {
            id v27 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v60, v28);
          }
          unsigned int v30 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
          if ((_DWORD)v30) {
            id v27 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v60, v30, v29);
          }
          if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
            encode_driver_events((id *)v9, (uint64_t)&v60);
          }
          unsigned int v31 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v60);
          uint64_t v32 = *(unsigned int *)(v9 + 3404);
          if ((_DWORD)v32 && gBreakOnError)
          {
            uint64_t v46 = 3LL;
            uint64_t v47 = 0xFFFFFFFFLL;
          }

          else
          {
            if ((v17 & 2) == 0) {
              goto LABEL_39;
            }
            uint64_t v46 = 2LL;
            uint64_t v47 = 36LL;
          }

          breakpoint_break((uint64_t)&v60, (volatile int *)v47, v46, v32, v9);
LABEL_39:
          uint64_t v33 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v31) defaultFbufStream];
          uint64_t v34 = (unsigned int *)((char *)v33 + 56);
          do
            unsigned int v35 = __ldaxr(v34);
          while (__stlxr(1u, v34));
          if (v35 == 1)
          {
            do
            {
              while (*v34 == 1)
                ;
              do
                unsigned int v36 = __ldaxr(v34);
              while (__stlxr(1u, v34));
            }

            while (v36 == 1);
          }

          GPUTools::FB::Stream::Write_nolock(v33, (GPUTools::FB::Fbuf *)&v60, *(unsigned int *)v60, 1);
          atomic_store(0, v34);
          do
          {
            unsigned int v37 = __ldaxr(v10);
            signed int v38 = v37 - 1;
          }

          while (__stlxr(v38, v10));
          if (gCheckGLErrors) {
            BOOL v39 = v38 < 1;
          }
          else {
            BOOL v39 = 1;
          }
          if (!v39) {
            handle_opengl_thread_conflict((const void **)v9);
          }
          goto LABEL_52;
        }

        uint64_t v21 = (uint64_t)[(id)DYGetGLGuestAppClient(v22) overrideFlags];
        if ((v21 & 8) != 0) {
          goto LABEL_30;
        }
        uint64_t v48 = (volatile int *)[(id)DYGetGLGuestAppClient(v21) overrideFlags];
        apply_draw_overrides(v9, v48);
        uint64_t v16 = mach_absolute_time();
        (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 32) + 80LL))(a1, a2);
        uint64_t v49 = mach_absolute_time();
        uint64_t v50 = v49 - v16;
        unint64_t v51 = g_DYTimebaseInfo;
        if (g_DYTimebaseInfo == *((_DWORD *)&g_DYTimebaseInfo + 1))
        {
          __uint64_t v52 = v60;
          *((void *)v60 + 2) = v16;
          v52[3] = v50;
          if (!gCheckGLErrors)
          {
LABEL_67:
            int v53 = [(id)DYGetGLGuestAppClient(v49) overrideFlags];
            unapply_draw_overrides(v9, v53);
            goto LABEL_30;
          }

{
  void *v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  void *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  signed int v12;
  BOOL v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  id v27;
  GPUTools::FB::Fbuf *v28;
  unsigned int v29;
  GPUTools::FB::Fbuf *v30;
  dispatch_queue_s *v31;
  uint64_t v32;
  GPUTools::FB::Stream *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  signed int v38;
  BOOL v39;
  unsigned int v40;
  uint64_t v41;
  id v42;
  unsigned int v43;
  dispatch_queue_s *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  volatile int *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void *v52;
  int v53;
  uint64_t v54;
  void *v55;
  unint64_t v56;
  uint64_t v57;
  void *v58;
  __uint64_t v59;
  void *v60;
  uint64_t v61;
  unsigned int v62;
  unint64_t v4 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v4) {
    goto LABEL_12;
  }
  uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v6 = v4[4];
    BOOL v7 = v6 >= (unint64_t)a1;
    else {
      unint64_t v8 = v4 + 1;
    }
    if (v7) {
      uint64_t v5 = (uint64_t)v4;
    }
    unint64_t v4 = (void *)*v8;
  }

  while (*v8);
  if (v5 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v5 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v9 = *(void *)(v5 + 40);
  uint64_t v10 = (unsigned int *)(v9 + 4640);
  do
  {
    unsigned int v11 = __ldaxr(v10);
    signed int v12 = v11 + 1;
  }

  while (__stlxr(v12, v10));
  if (gCheckGLErrors) {
    BOOL v13 = v12 <= 1;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13)
  {
    id v42 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v41 = handle_opengl_thread_conflict((const void **)v9);
    id v42 = [(id)DYGetGLGuestAppClient(v41) waitOnGraphicsSemaphoreAssertions];
    if ((int)v42 >= 1)
    {
      do
LABEL_58:
        unsigned int v43 = __ldaxr(v10);
      while (__stlxr(v43 - 1, v10));
      id v44 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v42) graphicsLockWaitQueue];
      dispatch_sync_f(v44, 0LL, (dispatch_function_t)do_nothing);
      (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 80LL))(a1, a2);
      return;
    }
  }

  *(_WORD *)(v9 + 483_Block_object_dispose(va, 8) = 257;
  uint64_t v60 = 0LL;
  uint64_t v61 = 0LL;
  unsigned int v62 = 0;
  if ([(id)DYGetGLGuestAppClient(v42) state] != (char *)&dword_0 + 1
    || (id v14 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand], !(_DWORD)v14))
  {
    uint64_t v16 = (uint64_t)v60;
    uint64_t v15 = v61;
    uint64_t v17 = v61 - (void)v60;
    unsigned int v18 = v62;
    unint64_t v19 = v62 - (v61 - (void)v60);
    if (v19 > 0x33) {
      goto LABEL_24;
    }
    int v45 = (307 - v19) & 0xFFFFFF00;
    v62 += v45;
    uint64_t v16 = (uint64_t)malloc(v45 + v18);
    uint64_t v60 = (void *)v16;
    if (v16)
    {
      if ((v16 & 3) == 0)
      {
        uint64_t v15 = v17 + v16;
LABEL_24:
        *(_DWORD *)(v15 + 4_Block_object_dispose(va, 8) = 0;
        *(_OWORD *)(v15 + 16) = 0u;
        *(_OWORD *)(v15 + 32) = 0u;
        *(_OWORD *)uint64_t v15 = 0u;
        uint64_t v61 = v15 + 52;
        GPUTools::FB::Fbuf::align((char **)&v60);
        *(_DWORD *)(v16 + 4) = 36;
        *(_DWORD *)(v16 + 32) = 0;
        __uint64_t v59 = 0LL;
        uint64_t v20 = pthread_threadid_np(0LL, &v59);
        *(void *)(v16 + _Block_object_dispose(va, 8) = v59;
        *(_DWORD *)(v16 + 36) = 6911299;
        *(void *)(v16 + 40) = *(void *)v9;
        *(_DWORD *)(v16 + 4_Block_object_dispose(va, 8) = a2;
        LOBYTE(v17) = byte_206E7C;
        if ((byte_206E7C & 1) != 0) {
          breakpoint_break((uint64_t)&v60, (volatile int *)&stru_20.cmdsize, 1LL, *(unsigned int *)(v9 + 3404), v9);
        }
        uint64_t v21 = (uint64_t)[(id)DYGetGLGuestAppClient(v20) overrideFlags];
        if (v21 & 0x10 | v17 & 4) {
          goto LABEL_30;
        }
        id v22 = [(id)DYGetGLGuestAppClient(v21) overrideFlags];
        if (!(_DWORD)v22)
        {
          uint64_t v23 = mach_absolute_time();
          (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 32) + 80LL))(a1, a2);
          uint64_t v21 = mach_absolute_time();
          uint64_t v24 = v21 - v23;
          unint64_t v25 = g_DYTimebaseInfo;
          if (g_DYTimebaseInfo == *((_DWORD *)&g_DYTimebaseInfo + 1))
          {
            uint64_t v26 = v60;
            *((void *)v60 + 2) = v23;
            v26[3] = v24;
            if (!gCheckGLErrors) {
              goto LABEL_30;
            }
          }

          else
          {
            uint64_t v54 = __udivti3(g_DYTimebaseInfo * v24, (g_DYTimebaseInfo * (unsigned __int128)v24) >> 64);
            unsigned int v55 = v60;
            *((void *)v60 + 3) = v54;
            uint64_t v21 = __udivti3(v25 * v23, (v25 * (unsigned __int128)v23) >> 64);
            v55[2] = v21;
            if (!gCheckGLErrors) {
              goto LABEL_30;
            }
          }

          uint64_t v21 = check_errors(v9);
LABEL_30:
          id v27 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v21), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
          if ((_DWORD)v27) {
            id v27 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v60, v28);
          }
          unsigned int v30 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v9 + 3404);
          if ((_DWORD)v30) {
            id v27 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v60, v30, v29);
          }
          if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
            encode_driver_events((id *)v9, (uint64_t)&v60);
          }
          unsigned int v31 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v9 + 3480),  (GPUTools::FB::Fbuf *)(v9 + 3520),  (GPUTools::FB *)&v60);
          uint64_t v32 = *(unsigned int *)(v9 + 3404);
          if ((_DWORD)v32 && gBreakOnError)
          {
            uint64_t v46 = 3LL;
            uint64_t v47 = 0xFFFFFFFFLL;
          }

          else
          {
            if ((v17 & 2) == 0) {
              goto LABEL_39;
            }
            uint64_t v46 = 2LL;
            uint64_t v47 = 36LL;
          }

          breakpoint_break((uint64_t)&v60, (volatile int *)v47, v46, v32, v9);
LABEL_39:
          uint64_t v33 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v31) defaultFbufStream];
          uint64_t v34 = (unsigned int *)((char *)v33 + 56);
          do
            unsigned int v35 = __ldaxr(v34);
          while (__stlxr(1u, v34));
          if (v35 == 1)
          {
            do
            {
              while (*v34 == 1)
                ;
              do
                unsigned int v36 = __ldaxr(v34);
              while (__stlxr(1u, v34));
            }

            while (v36 == 1);
          }

          GPUTools::FB::Stream::Write_nolock(v33, (GPUTools::FB::Fbuf *)&v60, *(unsigned int *)v60, 1);
          atomic_store(0, v34);
          do
          {
            unsigned int v37 = __ldaxr(v10);
            signed int v38 = v37 - 1;
          }

          while (__stlxr(v38, v10));
          if (gCheckGLErrors) {
            BOOL v39 = v38 < 1;
          }
          else {
            BOOL v39 = 1;
          }
          if (!v39) {
            handle_opengl_thread_conflict((const void **)v9);
          }
          goto LABEL_52;
        }

        uint64_t v21 = (uint64_t)[(id)DYGetGLGuestAppClient(v22) overrideFlags];
        if ((v21 & 8) != 0) {
          goto LABEL_30;
        }
        uint64_t v48 = (volatile int *)[(id)DYGetGLGuestAppClient(v21) overrideFlags];
        apply_draw_overrides(v9, v48);
        uint64_t v16 = mach_absolute_time();
        (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 32) + 80LL))(a1, a2);
        uint64_t v49 = mach_absolute_time();
        uint64_t v50 = v49 - v16;
        unint64_t v51 = g_DYTimebaseInfo;
        if (g_DYTimebaseInfo == *((_DWORD *)&g_DYTimebaseInfo + 1))
        {
          __uint64_t v52 = v60;
          *((void *)v60 + 2) = v16;
          v52[3] = v50;
          if (!gCheckGLErrors)
          {
LABEL_67:
            int v53 = [(id)DYGetGLGuestAppClient(v49) overrideFlags];
            unapply_draw_overrides(v9, v53);
            goto LABEL_30;
          }

{
  void *v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  void *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  signed int v12;
  BOOL v13;
  char *v14;
  id v15;
  unsigned int v16;
  signed int v17;
  BOOL v18;
  unsigned int v19;
  uint64_t v20;
  id v21;
  unsigned int v22;
  dispatch_queue_s *v23;
  id v24;
  volatile int *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v4 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v4) {
    goto LABEL_12;
  }
  uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v6 = v4[4];
    BOOL v7 = v6 >= (unint64_t)a1;
    else {
      unint64_t v8 = v4 + 1;
    }
    if (v7) {
      uint64_t v5 = (uint64_t)v4;
    }
    unint64_t v4 = (void *)*v8;
  }

  while (*v8);
  if (v5 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v5 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v9 = *(void *)(v5 + 40);
  uint64_t v10 = (unsigned int *)(v9 + 4640);
  do
  {
    unsigned int v11 = __ldaxr(v10);
    signed int v12 = v11 + 1;
  }

  while (__stlxr(v12, v10));
  if (gCheckGLErrors) {
    BOOL v13 = v12 <= 1;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13)
  {
    uint64_t v21 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v20 = handle_opengl_thread_conflict((const void **)v9);
    uint64_t v21 = [(id)DYGetGLGuestAppClient(v20) waitOnGraphicsSemaphoreAssertions];
    if ((int)v21 >= 1)
    {
      do
LABEL_35:
        id v22 = __ldaxr(v10);
      while (__stlxr(v22 - 1, v10));
      uint64_t v23 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v21) graphicsLockWaitQueue];
      dispatch_sync_f(v23, 0LL, (dispatch_function_t)do_nothing);
LABEL_37:
      (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 80LL))(a1, a2);
      return;
    }
  }

  *(_WORD *)(v9 + 483_Block_object_dispose(va, 8) = 257;
  id v14 = (char *)[(id)DYGetGLGuestAppClient(v21) state];
  if (v14 == (_BYTE *)&dword_0 + 1)
  {
    id v14 = (char *)[(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand];
    if ((_DWORD)v14)
    {
      do
        unint64_t v19 = __ldaxr(v10);
      while (__stlxr(v19 - 1, v10));
      [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
      goto LABEL_37;
    }
  }

  uint64_t v15 = [(id)DYGetGLGuestAppClient(v14) overrideFlags];
  if ((_DWORD)v15)
  {
    uint64_t v24 = [(id)DYGetGLGuestAppClient(v15) overrideFlags];
    if ((v24 & 8) == 0)
    {
      unint64_t v25 = (volatile int *)[(id)DYGetGLGuestAppClient(v24) overrideFlags];
      apply_draw_overrides(v9, v25);
      uint64_t v26 = (*(uint64_t (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 32) + 80LL))(a1, a2);
      ++*(void *)(v9 + 3704);
      if (gCheckGLErrors)
      {
        uint64_t v26 = check_errors(v9);
        if (gBreakOnError)
        {
          unsigned int v29 = *(unsigned int *)(v9 + 3404);
          if ((_DWORD)v29) {
            breakpoint_break(0LL, (volatile int *)0xFFFFFFFFLL, 3LL, v29, v9);
          }
        }
      }

      id v27 = [(id)DYGetGLGuestAppClient(v26) overrideFlags];
      unapply_draw_overrides(v9, v27);
    }
  }

  else
  {
    (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 32) + 80LL))(a1, a2);
    ++*(void *)(v9 + 3704);
    if (gCheckGLErrors)
    {
      check_errors(v9);
      if (gBreakOnError)
      {
        id v28 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v28) {
          breakpoint_break(0LL, (volatile int *)0xFFFFFFFFLL, 3LL, v28, v9);
        }
      }
    }
  }

  do
  {
    uint64_t v16 = __ldaxr(v10);
    uint64_t v17 = v16 - 1;
  }

  while (__stlxr(v17, v10));
  if (gCheckGLErrors) {
    unsigned int v18 = v17 < 1;
  }
  else {
    unsigned int v18 = 1;
  }
  if (!v18) {
    handle_opengl_thread_conflict((const void **)v9);
  }
}

{
  void *v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  void *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  signed int v12;
  BOOL v13;
  char *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  int64x2_t v18;
  unsigned int v19;
  signed int v20;
  BOOL v21;
  unsigned int v22;
  uint64_t v23;
  id v24;
  unsigned int v25;
  dispatch_queue_s *v26;
  id v27;
  volatile int *v28;
  uint64_t v29;
  uint64_t v30;
  int64x2_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v4 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v4) {
    goto LABEL_12;
  }
  uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v6 = v4[4];
    BOOL v7 = v6 >= (unint64_t)a1;
    else {
      unint64_t v8 = v4 + 1;
    }
    if (v7) {
      uint64_t v5 = (uint64_t)v4;
    }
    unint64_t v4 = (void *)*v8;
  }

  while (*v8);
  if (v5 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v5 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v9 = *(void *)(v5 + 40);
  uint64_t v10 = (unsigned int *)(v9 + 4640);
  do
  {
    unsigned int v11 = __ldaxr(v10);
    signed int v12 = v11 + 1;
  }

  while (__stlxr(v12, v10));
  if (gCheckGLErrors) {
    BOOL v13 = v12 <= 1;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13)
  {
    uint64_t v24 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v23 = handle_opengl_thread_conflict((const void **)v9);
    uint64_t v24 = [(id)DYGetGLGuestAppClient(v23) waitOnGraphicsSemaphoreAssertions];
    if ((int)v24 >= 1)
    {
      do
LABEL_35:
        unint64_t v25 = __ldaxr(v10);
      while (__stlxr(v25 - 1, v10));
      uint64_t v26 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v24) graphicsLockWaitQueue];
      dispatch_sync_f(v26, 0LL, (dispatch_function_t)do_nothing);
LABEL_37:
      (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 80LL))(a1, a2);
      return;
    }
  }

  *(_WORD *)(v9 + 483_Block_object_dispose(va, 8) = 257;
  id v14 = (char *)[(id)DYGetGLGuestAppClient(v24) state];
  if (v14 == (_BYTE *)&dword_0 + 1)
  {
    id v14 = (char *)[(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand];
    if ((_DWORD)v14)
    {
      do
        id v22 = __ldaxr(v10);
      while (__stlxr(v22 - 1, v10));
      [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
      goto LABEL_37;
    }
  }

  uint64_t v15 = [(id)DYGetGLGuestAppClient(v14) overrideFlags];
  if ((_DWORD)v15)
  {
    id v27 = [(id)DYGetGLGuestAppClient(v15) overrideFlags];
    if ((v27 & 8) == 0)
    {
      id v28 = (volatile int *)[(id)DYGetGLGuestAppClient(v27) overrideFlags];
      apply_draw_overrides(v9, v28);
      unsigned int v29 = mach_absolute_time();
      (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 32) + 80LL))(a1, a2);
      unsigned int v30 = mach_absolute_time();
      unsigned int v31 = vdupq_n_s64(1uLL);
      v31.i64[0] = v30 - v29;
      *(int64x2_t *)(v9 + 3696) = vaddq_s64(v31, *(int64x2_t *)(v9 + 3696));
      if (gCheckGLErrors)
      {
        unsigned int v30 = check_errors(v9);
        if (gBreakOnError)
        {
          uint64_t v34 = *(unsigned int *)(v9 + 3404);
          if ((_DWORD)v34) {
            breakpoint_break(0LL, (volatile int *)0xFFFFFFFFLL, 3LL, v34, v9);
          }
        }
      }

      uint64_t v32 = [(id)DYGetGLGuestAppClient(v30) overrideFlags];
      unapply_draw_overrides(v9, v32);
    }
  }

  else
  {
    uint64_t v16 = mach_absolute_time();
    (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 32) + 80LL))(a1, a2);
    uint64_t v17 = mach_absolute_time();
    unsigned int v18 = vdupq_n_s64(1uLL);
    v18.i64[0] = v17 - v16;
    *(int64x2_t *)(v9 + 3696) = vaddq_s64(v18, *(int64x2_t *)(v9 + 3696));
    if (gCheckGLErrors)
    {
      check_errors(v9);
      if (gBreakOnError)
      {
        uint64_t v33 = *(unsigned int *)(v9 + 3404);
        if ((_DWORD)v33) {
          breakpoint_break(0LL, (volatile int *)0xFFFFFFFFLL, 3LL, v33, v9);
        }
      }
    }
  }

  do
  {
    unint64_t v19 = __ldaxr(v10);
    uint64_t v20 = v19 - 1;
  }

  while (__stlxr(v20, v10));
  if (gCheckGLErrors) {
    uint64_t v21 = v20 < 1;
  }
  else {
    uint64_t v21 = 1;
  }
  if (!v21) {
    handle_opengl_thread_conflict((const void **)v9);
  }
}

LABEL_76:
          uint64_t v49 = check_errors(v9);
          goto LABEL_67;
        }

          __uint64_t v59 = check_errors(v19);
          goto LABEL_67;
        }

          unsigned int v55 = check_errors(v15);
          goto LABEL_67;
        }

          uint64_t v47 = check_errors(v7);
          goto LABEL_67;
        }

          uint64_t v49 = check_errors(v9);
          goto LABEL_67;
        }

          int v53 = check_errors(v13);
          goto LABEL_67;
        }

          unsigned int v55 = check_errors(v15);
          goto LABEL_67;
        }

          id v58 = check_errors(v18);
          goto LABEL_67;
        }

          __uint64_t v59 = check_errors(v19);
          goto LABEL_67;
        }

          unsigned int v55 = check_errors(v15);
          goto LABEL_67;
        }

          uint64_t v57 = check_errors(v17);
          goto LABEL_67;
        }

          unsigned int v55 = check_errors(v15);
          goto LABEL_67;
        }

          uint64_t v47 = check_errors(v7);
          goto LABEL_67;
        }

LABEL_75:
        unint64_t v56 = v51;
        uint64_t v57 = __udivti3(v51 * v50, (v51 * (unsigned __int128)v50) >> 64);
        id v58 = v60;
        *((void *)v60 + 3) = v57;
        uint64_t v49 = __udivti3(v56 * v16, (v56 * (unsigned __int128)v16) >> 64);
        v58[2] = v49;
        if (!gCheckGLErrors) {
          goto LABEL_67;
        }
        goto LABEL_76;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", (const void *)v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    goto LABEL_75;
  }

  do
    unsigned int v40 = __ldaxr(v10);
  while (__stlxr(v40 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 80LL))(a1, a2);
LABEL_52:
  if (v60) {
    free(v60);
  }
}

        char v65 = __udivti3(v13 * v60, (v13 * (unsigned __int128)v60) >> 64);
        int v66 = v73;
        *((void *)v73 + 3) = v65;
        __uint64_t v59 = __udivti3(v13 * v26, (v13 * (unsigned __int128)v26) >> 64);
        v66[2] = v59;
        if (!gCheckGLErrors) {
          goto LABEL_67;
        }
        goto LABEL_76;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", (const void *)v26, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    goto LABEL_75;
  }

  do
    uint64_t v50 = __ldaxr(v20);
  while (__stlxr(v50 - 1, v20));
  [(id)DYGetGLGuestAppClient(v24) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, void, void, void, void, void, uint64_t, unsigned int))(*(void *)(v19 + 24) + 6040LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  a10);
LABEL_52:
  if (v73) {
    free(v73);
  }
}

        uint64_t v61 = __udivti3(a2 * v56, (a2 * (unsigned __int128)v56) >> 64);
        unsigned int v62 = v64;
        *((void *)v64 + 3) = v61;
        unsigned int v55 = __udivti3(a2 * v22, (a2 * (unsigned __int128)v22) >> 64);
        v62[2] = v55;
        if (!gCheckGLErrors) {
          goto LABEL_67;
        }
        goto LABEL_76;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", (const void *)v22, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    goto LABEL_75;
  }

  do
    uint64_t v46 = __ldaxr(v16);
  while (__stlxr(v46 - 1, v16));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, unint64_t, uint64_t, uint64_t, float))(*(void *)(v15 + 24) + 6216LL))( a1,  a2,  a3,  a5,  a4);
LABEL_52:
  if (v64) {
    free(v64);
  }
}

        uint64_t v54 = v49;
        unsigned int v55 = __udivti3(v49 * v48, (v49 * (unsigned __int128)v48) >> 64);
        unint64_t v56 = v58;
        *((void *)v58 + 3) = v55;
        uint64_t v47 = __udivti3(v54 * v14, (v54 * (unsigned __int128)v14) >> 64);
        v56[2] = v47;
        if (!gCheckGLErrors) {
          goto LABEL_67;
        }
        goto LABEL_76;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", (const void *)v14, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    goto LABEL_75;
  }

  do
    signed int v38 = __ldaxr(v8);
  while (__stlxr(v38 - 1, v8));
  [(id)DYGetGLGuestAppClient(v12) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *))(*(void *)(v7 + 24) + 8208LL))(a1);
LABEL_52:
  if (v58) {
    free(v58);
  }
}

        unint64_t v56 = v51;
        uint64_t v57 = __udivti3(v51 * v50, (v51 * (unsigned __int128)v50) >> 64);
        id v58 = v60;
        *((void *)v60 + 3) = v57;
        uint64_t v49 = __udivti3(v56 * v16, (v56 * (unsigned __int128)v16) >> 64);
        v58[2] = v49;
        if (!gCheckGLErrors) {
          goto LABEL_67;
        }
        goto LABEL_76;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", (const void *)v16, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    goto LABEL_75;
  }

  do
    unsigned int v40 = __ldaxr(v10);
  while (__stlxr(v40 - 1, v10));
  [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 80LL))(a1, a2);
LABEL_52:
  if (v60) {
    free(v60);
  }
}

        __uint64_t v59 = __udivti3(a2 * v54, (a2 * (unsigned __int128)v54) >> 64);
        uint64_t v60 = v62;
        *((void *)v62 + 3) = v59;
        int v53 = __udivti3(a2 * v20, (a2 * (unsigned __int128)v20) >> 64);
        v60[2] = v53;
        if (!gCheckGLErrors) {
          goto LABEL_67;
        }
        goto LABEL_76;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", (const void *)v20, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    goto LABEL_75;
  }

  do
    id v44 = __ldaxr(v14);
  while (__stlxr(v44 - 1, v14));
  [(id)DYGetGLGuestAppClient(v18) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, unint64_t, uint64_t, uint64_t))(*(void *)(v13 + 24) + 520LL))( a1,  a2,  a3,  a4);
LABEL_52:
  if (v62) {
    free(v62);
  }
}

        uint64_t v61 = __udivti3(a3 * v56, (a3 * (unsigned __int128)v56) >> 64);
        unsigned int v62 = v64;
        *((void *)v64 + 3) = v61;
        unsigned int v55 = __udivti3(a3 * v22, (a3 * (unsigned __int128)v22) >> 64);
        v62[2] = v55;
        if (!gCheckGLErrors) {
          goto LABEL_67;
        }
        goto LABEL_76;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", (const void *)v22, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    goto LABEL_75;
  }

  do
    uint64_t v46 = __ldaxr(v16);
  while (__stlxr(v46 - 1, v16));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, unint64_t, uint64_t, const void *))(*(void *)(v15 + 24)
                                                                                              + 536LL))( a1,  a2,  a3,  a4,  a5);
LABEL_52:
  if (v64) {
    free(v64);
  }
}

        uint64_t v64 = __udivti3(a4 * v59, (a4 * (unsigned __int128)v59) >> 64);
        char v65 = v68;
        *((void *)v68 + 3) = v64;
        id v58 = __udivti3(a4 * v25, (a4 * (unsigned __int128)v25) >> 64);
        v65[2] = v58;
        if (!gCheckGLErrors) {
          goto LABEL_67;
        }
        goto LABEL_76;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", (const void *)v25, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    goto LABEL_75;
  }

  do
    uint64_t v49 = __ldaxr(v19);
  while (__stlxr(v49 - 1, v19));
  [(id)DYGetGLGuestAppClient(v23) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, const void *))(*(void *)(v18 + 24) + 3240LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7);
LABEL_52:
  if (v68) {
    free(v68);
  }
}

        char v65 = __udivti3(v13 * v60, (v13 * (unsigned __int128)v60) >> 64);
        int v66 = v73;
        *((void *)v73 + 3) = v65;
        __uint64_t v59 = __udivti3(v13 * v26, (v13 * (unsigned __int128)v26) >> 64);
        v66[2] = v59;
        if (!gCheckGLErrors) {
          goto LABEL_67;
        }
        goto LABEL_76;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", (const void *)v26, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    goto LABEL_75;
  }

  do
    uint64_t v50 = __ldaxr(v20);
  while (__stlxr(v50 - 1, v20));
  [(id)DYGetGLGuestAppClient(v24) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, void, void, void, void, void, uint64_t, unsigned int))(*(void *)(v19 + 24) + 6040LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  a10);
LABEL_52:
  if (v73) {
    free(v73);
  }
}

        uint64_t v61 = __udivti3(a3 * v56, (a3 * (unsigned __int128)v56) >> 64);
        unsigned int v62 = v64;
        *((void *)v64 + 3) = v61;
        unsigned int v55 = __udivti3(a3 * v22, (a3 * (unsigned __int128)v22) >> 64);
        v62[2] = v55;
        if (!gCheckGLErrors) {
          goto LABEL_67;
        }
        goto LABEL_76;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", (const void *)v22, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    goto LABEL_75;
  }

  do
    uint64_t v46 = __ldaxr(v16);
  while (__stlxr(v46 - 1, v16));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, unint64_t, uint64_t, uint64_t))(*(void *)(v15 + 24) + 6096LL))( a1,  a2,  a3,  a4,  a5);
LABEL_52:
  if (v64) {
    free(v64);
  }
}

        uint64_t v63 = __udivti3(a4 * v58, (a4 * (unsigned __int128)v58) >> 64);
        uint64_t v64 = v66;
        *((void *)v66 + 3) = v63;
        uint64_t v57 = __udivti3(a4 * v24, (a4 * (unsigned __int128)v24) >> 64);
        v64[2] = v57;
        if (!gCheckGLErrors) {
          goto LABEL_67;
        }
        goto LABEL_76;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", (const void *)v24, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    goto LABEL_75;
  }

  do
    uint64_t v48 = __ldaxr(v18);
  while (__stlxr(v48 - 1, v18));
  [(id)DYGetGLGuestAppClient(v22) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, unint64_t, const void *, uint64_t))(*(void *)(v17 + 24) + 6104LL))( a1,  a2,  a3,  a4,  a5,  a6);
LABEL_52:
  if (v66) {
    free(v66);
  }
}

        uint64_t v61 = __udivti3(a2 * v56, (a2 * (unsigned __int128)v56) >> 64);
        unsigned int v62 = v64;
        *((void *)v64 + 3) = v61;
        unsigned int v55 = __udivti3(a2 * v22, (a2 * (unsigned __int128)v22) >> 64);
        v62[2] = v55;
        if (!gCheckGLErrors) {
          goto LABEL_67;
        }
        goto LABEL_76;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", (const void *)v22, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    goto LABEL_75;
  }

  do
    uint64_t v46 = __ldaxr(v16);
  while (__stlxr(v46 - 1, v16));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, unint64_t, uint64_t, uint64_t, float))(*(void *)(v15 + 24) + 6216LL))( a1,  a2,  a3,  a5,  a4);
LABEL_52:
  if (v64) {
    free(v64);
  }
}

        uint64_t v54 = v49;
        unsigned int v55 = __udivti3(v49 * v48, (v49 * (unsigned __int128)v48) >> 64);
        unint64_t v56 = v58;
        *((void *)v58 + 3) = v55;
        uint64_t v47 = __udivti3(v54 * v14, (v54 * (unsigned __int128)v14) >> 64);
        v56[2] = v47;
        if (!gCheckGLErrors) {
          goto LABEL_67;
        }
        goto LABEL_76;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", (const void *)v14, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    goto LABEL_75;
  }

  do
    signed int v38 = __ldaxr(v8);
  while (__stlxr(v38 - 1, v8));
  [(id)DYGetGLGuestAppClient(v12) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *))(*(void *)(v7 + 24) + 8208LL))(a1);
LABEL_52:
  if (v58) {
    free(v58);
  }
}

void sub_22420( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  if (a12) {
    free(a12);
  }
  _Unwind_Resume(exception_object);
}

void clear_color(__GLIContextRec *a1, float a2, float a3, float a4, float a5)
{
  uint64_t v10 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v10) {
    goto LABEL_12;
  }
  uint64_t v11 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v12 = v10[4];
    BOOL v13 = v12 >= (unint64_t)a1;
    else {
      id v14 = v10 + 1;
    }
    if (v13) {
      uint64_t v11 = (uint64_t)v10;
    }
    uint64_t v10 = (void *)*v14;
  }

  while (*v14);
  if (v11 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v11 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v11 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v15 = *(void *)(v11 + 40);
  uint64_t v16 = (unsigned int *)(v15 + 4640);
  do
  {
    unsigned int v17 = __ldaxr(v16);
    signed int v18 = v17 + 1;
  }

  while (__stlxr(v18, v16));
  if (gCheckGLErrors) {
    BOOL v19 = v18 <= 1;
  }
  else {
    BOOL v19 = 1;
  }
  if (v19)
  {
    id v48 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v47 = handle_opengl_thread_conflict((const void **)v15);
    id v48 = [(id)DYGetGLGuestAppClient(v47) waitOnGraphicsSemaphoreAssertions];
    if ((int)v48 >= 1)
    {
      do
LABEL_57:
        unsigned int v49 = __ldaxr(v16);
      while (__stlxr(v49 - 1, v16));
      uint64_t v50 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v48) graphicsLockWaitQueue];
      dispatch_sync_f(v50, 0LL, (dispatch_function_t)do_nothing);
      (*(void (**)(__GLIContextRec *, float, float, float, float))(*(void *)(v15 + 24) + 96LL))( a1,  a2,  a3,  a4,  a5);
      return;
    }
  }

  *(_BYTE *)(v15 + 483_Block_object_dispose(va, 8) = 1;
  uint64_t v57 = 0LL;
  id v58 = 0LL;
  unsigned int v59 = 0;
  if ([(id)DYGetGLGuestAppClient(v48) state] != (char *)&dword_0 + 1
    || (id v20 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand], !(_DWORD)v20))
  {
    id v22 = (char *)v57;
    uint64_t v21 = v58;
    int64_t v23 = v58 - (_BYTE *)v57;
    unsigned int v24 = v59;
    unint64_t v25 = v59 - (v58 - (_BYTE *)v57);
    if (v25 > 0x43) {
      goto LABEL_24;
    }
    int v51 = (323 - v25) & 0xFFFFFF00;
    v59 += v51;
    id v22 = (char *)malloc(v51 + v24);
    uint64_t v57 = v22;
    if (v22)
    {
      if ((v22 & 3) == 0)
      {
        uint64_t v21 = &v22[v23];
LABEL_24:
        *((_DWORD *)v21 + 16) = 0;
        *((_OWORD *)v21 + 2) = 0u;
        *((_OWORD *)v21 + 3) = 0u;
        *(_OWORD *)uint64_t v21 = 0u;
        *((_OWORD *)v21 + 1) = 0u;
        id v58 = v21 + 68;
        GPUTools::FB::Fbuf::align((char **)&v57);
        *((_DWORD *)v22 + 1) = 38;
        *((_DWORD *)v22 + _Block_object_dispose(va, 8) = 0;
        __uint64_t v56 = 0LL;
        uint64_t v26 = pthread_threadid_np(0LL, &v56);
        *((void *)v22 + 1) = v56;
        strcpy(v22 + 36, "Cffff");
        *(void *)(v22 + 44) = *(void *)v15;
        *((float *)v22 + 13) = a2;
        *((float *)v22 + 14) = a3;
        *((float *)v22 + 15) = a4;
        *((float *)v22 + 16) = a5;
        char v27 = byte_206E7E;
        if ((byte_206E7E & 1) != 0) {
          breakpoint_break( (uint64_t)&v57,  (volatile int *)((char *)&stru_20.cmdsize + 2),  1LL,  *(unsigned int *)(v15 + 3404),  v15);
        }
        uint64_t v28 = (uint64_t)[(id)DYGetGLGuestAppClient(v26) overrideFlags];
        if (!(v28 & 0x10 | v27 & 4))
        {
          uint64_t v29 = mach_absolute_time();
          (*(void (**)(__GLIContextRec *, float, float, float, float))(*(void *)(v15 + 32) + 96LL))( a1,  a2,  a3,  a4,  a5);
          uint64_t v28 = mach_absolute_time();
          uint64_t v30 = v28 - v29;
          unint64_t v31 = g_DYTimebaseInfo;
          if (g_DYTimebaseInfo == *((_DWORD *)&g_DYTimebaseInfo + 1))
          {
            uint64_t v32 = v57;
            *((void *)v57 + 2) = v29;
            v32[3] = v30;
            if (!gCheckGLErrors) {
              goto LABEL_29;
            }
          }

          else
          {
            uint64_t v54 = __udivti3(g_DYTimebaseInfo * v30, (g_DYTimebaseInfo * (unsigned __int128)v30) >> 64);
            unsigned int v55 = v57;
            *((void *)v57 + 3) = v54;
            uint64_t v28 = __udivti3(v31 * v29, (v31 * (unsigned __int128)v29) >> 64);
            v55[2] = v28;
            if (!gCheckGLErrors) {
              goto LABEL_29;
            }
          }

          uint64_t v28 = check_errors(v15);
        }

{
  void *v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  void *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  signed int v18;
  BOOL v19;
  id v20;
  char *v21;
  char *v22;
  int64_t v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  id v33;
  GPUTools::FB::Fbuf *v34;
  unsigned int v35;
  GPUTools::FB::Fbuf *v36;
  dispatch_queue_s *v37;
  uint64_t v38;
  GPUTools::FB::Stream *v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  signed int v44;
  BOOL v45;
  unsigned int v46;
  uint64_t v47;
  id v48;
  unsigned int v49;
  dispatch_queue_s *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  __uint64_t v56;
  void *v57;
  char *v58;
  unsigned int v59;
  uint64_t v10 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v10) {
    goto LABEL_12;
  }
  uint64_t v11 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v12 = v10[4];
    BOOL v13 = v12 >= (unint64_t)a1;
    else {
      id v14 = v10 + 1;
    }
    if (v13) {
      uint64_t v11 = (uint64_t)v10;
    }
    uint64_t v10 = (void *)*v14;
  }

  while (*v14);
  if (v11 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v11 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v11 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v15 = *(void *)(v11 + 40);
  uint64_t v16 = (unsigned int *)(v15 + 4640);
  do
  {
    unsigned int v17 = __ldaxr(v16);
    signed int v18 = v17 + 1;
  }

  while (__stlxr(v18, v16));
  if (gCheckGLErrors) {
    BOOL v19 = v18 <= 1;
  }
  else {
    BOOL v19 = 1;
  }
  if (v19)
  {
    id v48 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v47 = handle_opengl_thread_conflict((const void **)v15);
    id v48 = [(id)DYGetGLGuestAppClient(v47) waitOnGraphicsSemaphoreAssertions];
    if ((int)v48 >= 1)
    {
      do
LABEL_57:
        unsigned int v49 = __ldaxr(v16);
      while (__stlxr(v49 - 1, v16));
      uint64_t v50 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v48) graphicsLockWaitQueue];
      dispatch_sync_f(v50, 0LL, (dispatch_function_t)do_nothing);
      (*(void (**)(__GLIContextRec *, float, float, float, float))(*(void *)(v15 + 24) + 96LL))( a1,  a2,  a3,  a4,  a5);
      return;
    }
  }

  *(_BYTE *)(v15 + 483_Block_object_dispose(va, 8) = 1;
  uint64_t v57 = 0LL;
  id v58 = 0LL;
  unsigned int v59 = 0;
  if ([(id)DYGetGLGuestAppClient(v48) state] != (char *)&dword_0 + 1
    || (id v20 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand], !(_DWORD)v20))
  {
    id v22 = (char *)v57;
    uint64_t v21 = v58;
    int64_t v23 = v58 - (_BYTE *)v57;
    unsigned int v24 = v59;
    unint64_t v25 = v59 - (v58 - (_BYTE *)v57);
    if (v25 > 0x43) {
      goto LABEL_24;
    }
    int v51 = (323 - v25) & 0xFFFFFF00;
    v59 += v51;
    id v22 = (char *)malloc(v51 + v24);
    uint64_t v57 = v22;
    if (v22)
    {
      if ((v22 & 3) == 0)
      {
        uint64_t v21 = &v22[v23];
LABEL_24:
        *((_DWORD *)v21 + 16) = 0;
        *((_OWORD *)v21 + 2) = 0u;
        *((_OWORD *)v21 + 3) = 0u;
        *(_OWORD *)uint64_t v21 = 0u;
        *((_OWORD *)v21 + 1) = 0u;
        id v58 = v21 + 68;
        GPUTools::FB::Fbuf::align((char **)&v57);
        *((_DWORD *)v22 + 1) = 38;
        *((_DWORD *)v22 + _Block_object_dispose(va, 8) = 0;
        __uint64_t v56 = 0LL;
        uint64_t v26 = pthread_threadid_np(0LL, &v56);
        *((void *)v22 + 1) = v56;
        strcpy(v22 + 36, "Cffff");
        *(void *)(v22 + 44) = *(void *)v15;
        *((float *)v22 + 13) = a2;
        *((float *)v22 + 14) = a3;
        *((float *)v22 + 15) = a4;
        *((float *)v22 + 16) = a5;
        char v27 = byte_206E7E;
        if ((byte_206E7E & 1) != 0) {
          breakpoint_break( (uint64_t)&v57,  (volatile int *)((char *)&stru_20.cmdsize + 2),  1LL,  *(unsigned int *)(v15 + 3404),  v15);
        }
        uint64_t v28 = (uint64_t)[(id)DYGetGLGuestAppClient(v26) overrideFlags];
        if (!(v28 & 0x10 | v27 & 4))
        {
          uint64_t v29 = mach_absolute_time();
          (*(void (**)(__GLIContextRec *, float, float, float, float))(*(void *)(v15 + 32) + 96LL))( a1,  a2,  a3,  a4,  a5);
          uint64_t v28 = mach_absolute_time();
          uint64_t v30 = v28 - v29;
          unint64_t v31 = g_DYTimebaseInfo;
          if (g_DYTimebaseInfo == *((_DWORD *)&g_DYTimebaseInfo + 1))
          {
            uint64_t v32 = v57;
            *((void *)v57 + 2) = v29;
            v32[3] = v30;
            if (!gCheckGLErrors) {
              goto LABEL_29;
            }
          }

          else
          {
            uint64_t v54 = __udivti3(g_DYTimebaseInfo * v30, (g_DYTimebaseInfo * (unsigned __int128)v30) >> 64);
            unsigned int v55 = v57;
            *((void *)v57 + 3) = v54;
            uint64_t v28 = __udivti3(v31 * v29, (v31 * (unsigned __int128)v29) >> 64);
            v55[2] = v28;
            if (!gCheckGLErrors) {
              goto LABEL_29;
            }
          }

          uint64_t v28 = check_errors(v15);
        }

{
  void *v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  void *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  signed int v18;
  BOOL v19;
  id v20;
  unsigned int v21;
  signed int v22;
  BOOL v23;
  unsigned int v24;
  uint64_t v25;
  id v26;
  unsigned int v27;
  dispatch_queue_s *v28;
  uint64_t v29;
  uint64_t v10 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v10) {
    goto LABEL_12;
  }
  uint64_t v11 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v12 = v10[4];
    BOOL v13 = v12 >= (unint64_t)a1;
    else {
      id v14 = v10 + 1;
    }
    if (v13) {
      uint64_t v11 = (uint64_t)v10;
    }
    uint64_t v10 = (void *)*v14;
  }

  while (*v14);
  if (v11 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v11 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v11 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v15 = *(void *)(v11 + 40);
  uint64_t v16 = (unsigned int *)(v15 + 4640);
  do
  {
    unsigned int v17 = __ldaxr(v16);
    signed int v18 = v17 + 1;
  }

  while (__stlxr(v18, v16));
  if (gCheckGLErrors) {
    BOOL v19 = v18 <= 1;
  }
  else {
    BOOL v19 = 1;
  }
  if (v19)
  {
    uint64_t v26 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    unint64_t v25 = handle_opengl_thread_conflict((const void **)v15);
    uint64_t v26 = [(id)DYGetGLGuestAppClient(v25) waitOnGraphicsSemaphoreAssertions];
    if ((int)v26 >= 1)
    {
      do
LABEL_34:
        char v27 = __ldaxr(v16);
      while (__stlxr(v27 - 1, v16));
      uint64_t v28 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v26) graphicsLockWaitQueue];
      dispatch_sync_f(v28, 0LL, (dispatch_function_t)do_nothing);
LABEL_36:
      (*(void (**)(__GLIContextRec *, float, float, float, float))(*(void *)(v15 + 24) + 96LL))( a1,  a2,  a3,  a4,  a5);
      return;
    }
  }

  *(_BYTE *)(v15 + 483_Block_object_dispose(va, 8) = 1;
  if ([(id)DYGetGLGuestAppClient(v26) state] == (char *)&dword_0 + 1)
  {
    id v20 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand];
    if ((_DWORD)v20)
    {
      do
        unsigned int v24 = __ldaxr(v16);
      while (__stlxr(v24 - 1, v16));
      [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
      goto LABEL_36;
    }
  }

  (*(void (**)(__GLIContextRec *, float, float, float, float))(*(void *)(v15 + 32) + 96LL))( a1,  a2,  a3,  a4,  a5);
  ++*(void *)(v15 + 3704);
  if (gCheckGLErrors)
  {
    check_errors(v15);
    if (gBreakOnError)
    {
      uint64_t v29 = *(unsigned int *)(v15 + 3404);
      if ((_DWORD)v29) {
        breakpoint_break(0LL, (volatile int *)0xFFFFFFFFLL, 3LL, v29, v15);
      }
    }
  }

  do
  {
    uint64_t v21 = __ldaxr(v16);
    id v22 = v21 - 1;
  }

  while (__stlxr(v22, v16));
  if (gCheckGLErrors) {
    int64_t v23 = v22 < 1;
  }
  else {
    int64_t v23 = 1;
  }
  if (!v23) {
    handle_opengl_thread_conflict((const void **)v15);
  }
}

{
  void *v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  void *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  signed int v18;
  BOOL v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  int64x2_t v23;
  unsigned int v24;
  signed int v25;
  BOOL v26;
  unsigned int v27;
  uint64_t v28;
  id v29;
  unsigned int v30;
  dispatch_queue_s *v31;
  uint64_t v32;
  uint64_t v10 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v10) {
    goto LABEL_12;
  }
  uint64_t v11 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v12 = v10[4];
    BOOL v13 = v12 >= (unint64_t)a1;
    else {
      id v14 = v10 + 1;
    }
    if (v13) {
      uint64_t v11 = (uint64_t)v10;
    }
    uint64_t v10 = (void *)*v14;
  }

  while (*v14);
  if (v11 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v11 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v11 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v15 = *(void *)(v11 + 40);
  uint64_t v16 = (unsigned int *)(v15 + 4640);
  do
  {
    unsigned int v17 = __ldaxr(v16);
    signed int v18 = v17 + 1;
  }

  while (__stlxr(v18, v16));
  if (gCheckGLErrors) {
    BOOL v19 = v18 <= 1;
  }
  else {
    BOOL v19 = 1;
  }
  if (v19)
  {
    uint64_t v29 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v28 = handle_opengl_thread_conflict((const void **)v15);
    uint64_t v29 = [(id)DYGetGLGuestAppClient(v28) waitOnGraphicsSemaphoreAssertions];
    if ((int)v29 >= 1)
    {
      do
LABEL_34:
        uint64_t v30 = __ldaxr(v16);
      while (__stlxr(v30 - 1, v16));
      unint64_t v31 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v29) graphicsLockWaitQueue];
      dispatch_sync_f(v31, 0LL, (dispatch_function_t)do_nothing);
LABEL_36:
      (*(void (**)(__GLIContextRec *, float, float, float, float))(*(void *)(v15 + 24) + 96LL))( a1,  a2,  a3,  a4,  a5);
      return;
    }
  }

  *(_BYTE *)(v15 + 483_Block_object_dispose(va, 8) = 1;
  if ([(id)DYGetGLGuestAppClient(v29) state] == (char *)&dword_0 + 1)
  {
    id v20 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand];
    if ((_DWORD)v20)
    {
      do
        char v27 = __ldaxr(v16);
      while (__stlxr(v27 - 1, v16));
      [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
      goto LABEL_36;
    }
  }

  uint64_t v21 = mach_absolute_time();
  (*(void (**)(__GLIContextRec *, float, float, float, float))(*(void *)(v15 + 32) + 96LL))( a1,  a2,  a3,  a4,  a5);
  id v22 = mach_absolute_time();
  int64_t v23 = vdupq_n_s64(1uLL);
  v23.i64[0] = v22 - v21;
  *(int64x2_t *)(v15 + 3696) = vaddq_s64(v23, *(int64x2_t *)(v15 + 3696));
  if (gCheckGLErrors)
  {
    check_errors(v15);
    if (gBreakOnError)
    {
      uint64_t v32 = *(unsigned int *)(v15 + 3404);
      if ((_DWORD)v32) {
        breakpoint_break(0LL, (volatile int *)0xFFFFFFFFLL, 3LL, v32, v15);
      }
    }
  }

  do
  {
    unsigned int v24 = __ldaxr(v16);
    unint64_t v25 = v24 - 1;
  }

  while (__stlxr(v25, v16));
  if (gCheckGLErrors) {
    uint64_t v26 = v25 < 1;
  }
  else {
    uint64_t v26 = 1;
  }
  if (!v26) {
    handle_opengl_thread_conflict((const void **)v15);
  }
}

void sub_22948( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  if (a12) {
    free(a12);
  }
  _Unwind_Resume(exception_object);
}

void clear_stencil(__GLIContextRec *a1, uint64_t a2)
{
  unint64_t v4 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v4) {
    goto LABEL_12;
  }
  uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v6 = v4[4];
    BOOL v7 = v6 >= (unint64_t)a1;
    else {
      unint64_t v8 = v4 + 1;
    }
    if (v7) {
      uint64_t v5 = (uint64_t)v4;
    }
    unint64_t v4 = (void *)*v8;
  }

  while (*v8);
  if (v5 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v5 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v9 = *(void *)(v5 + 40);
  uint64_t v10 = (unsigned int *)(v9 + 4640);
  do
  {
    unsigned int v11 = __ldaxr(v10);
    signed int v12 = v11 + 1;
  }

  while (__stlxr(v12, v10));
  if (gCheckGLErrors) {
    BOOL v13 = v12 <= 1;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13)
  {
    id v42 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v41 = handle_opengl_thread_conflict((const void **)v9);
    id v42 = [(id)DYGetGLGuestAppClient(v41) waitOnGraphicsSemaphoreAssertions];
    if ((int)v42 >= 1)
    {
      do
LABEL_57:
        unsigned int v43 = __ldaxr(v10);
      while (__stlxr(v43 - 1, v10));
      signed int v44 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v42) graphicsLockWaitQueue];
      dispatch_sync_f(v44, 0LL, (dispatch_function_t)do_nothing);
      (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 120LL))(a1, a2);
      return;
    }
  }

  *(_BYTE *)(v9 + 483_Block_object_dispose(va, 8) = 1;
  int v51 = 0LL;
  uint64_t v52 = 0LL;
  unsigned int v53 = 0;
  if ([(id)DYGetGLGuestAppClient(v42) state] != (char *)&dword_0 + 1
    || (id v14 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand], !(_DWORD)v14))
  {
    uint64_t v16 = (char *)v51;
    uint64_t v15 = v52;
    int64_t v17 = v52 - (_BYTE *)v51;
    unsigned int v18 = v53;
    unint64_t v19 = v53 - (v52 - (_BYTE *)v51);
    if (v19 > 0x33) {
      goto LABEL_24;
    }
    int v45 = (307 - v19) & 0xFFFFFF00;
    v53 += v45;
    uint64_t v16 = (char *)malloc(v45 + v18);
    int v51 = v16;
    if (v16)
    {
      if ((v16 & 3) == 0)
      {
        uint64_t v15 = &v16[v17];
LABEL_24:
        *((_DWORD *)v15 + 12) = 0;
        *((_OWORD *)v15 + 1) = 0u;
        *((_OWORD *)v15 + 2) = 0u;
        *(_OWORD *)uint64_t v15 = 0u;
        uint64_t v52 = v15 + 52;
        GPUTools::FB::Fbuf::align((char **)&v51);
        *((_DWORD *)v16 + 1) = 43;
        *((_DWORD *)v16 + _Block_object_dispose(va, 8) = 0;
        __uint64_t v50 = 0LL;
        uint64_t v20 = pthread_threadid_np(0LL, &v50);
        *((void *)v16 + 1) = v50;
        strcpy(v16 + 36, "Ci");
        *((void *)v16 + 5) = *(void *)v9;
        *((_DWORD *)v16 + 12) = a2;
        char v21 = byte_206E83;
        if ((byte_206E83 & 1) != 0) {
          breakpoint_break((uint64_t)&v51, (volatile int *)&stru_20.segname[3], 1LL, *(unsigned int *)(v9 + 3404), v9);
        }
        uint64_t v22 = (uint64_t)[(id)DYGetGLGuestAppClient(v20) overrideFlags];
        if (!(v22 & 0x10 | v21 & 4))
        {
          uint64_t v23 = mach_absolute_time();
          (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 32) + 120LL))(a1, a2);
          uint64_t v22 = mach_absolute_time();
          uint64_t v24 = v22 - v23;
          unint64_t v25 = g_DYTimebaseInfo;
          if (g_DYTimebaseInfo == *((_DWORD *)&g_DYTimebaseInfo + 1))
          {
            uint64_t v26 = v51;
            *((void *)v51 + 2) = v23;
            v26[3] = v24;
            if (!gCheckGLErrors) {
              goto LABEL_29;
            }
          }

          else
          {
            uint64_t v48 = __udivti3(g_DYTimebaseInfo * v24, (g_DYTimebaseInfo * (unsigned __int128)v24) >> 64);
            unsigned int v49 = v51;
            *((void *)v51 + 3) = v48;
            uint64_t v22 = __udivti3(v25 * v23, (v25 * (unsigned __int128)v23) >> 64);
            v49[2] = v22;
            if (!gCheckGLErrors) {
              goto LABEL_29;
            }
          }

          uint64_t v22 = check_errors(v9);
        }

{
  void *v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  void *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  signed int v12;
  BOOL v13;
  id v14;
  char *v15;
  char *v16;
  int64_t v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  id v27;
  GPUTools::FB::Fbuf *v28;
  unsigned int v29;
  GPUTools::FB::Fbuf *v30;
  dispatch_queue_s *v31;
  uint64_t v32;
  GPUTools::FB::Stream *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  signed int v38;
  BOOL v39;
  unsigned int v40;
  uint64_t v41;
  id v42;
  unsigned int v43;
  dispatch_queue_s *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  __uint64_t v50;
  void *v51;
  char *v52;
  unsigned int v53;
  unint64_t v4 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v4) {
    goto LABEL_12;
  }
  uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v6 = v4[4];
    BOOL v7 = v6 >= (unint64_t)a1;
    else {
      unint64_t v8 = v4 + 1;
    }
    if (v7) {
      uint64_t v5 = (uint64_t)v4;
    }
    unint64_t v4 = (void *)*v8;
  }

  while (*v8);
  if (v5 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v5 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v9 = *(void *)(v5 + 40);
  uint64_t v10 = (unsigned int *)(v9 + 4640);
  do
  {
    unsigned int v11 = __ldaxr(v10);
    signed int v12 = v11 + 1;
  }

  while (__stlxr(v12, v10));
  if (gCheckGLErrors) {
    BOOL v13 = v12 <= 1;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13)
  {
    id v42 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v41 = handle_opengl_thread_conflict((const void **)v9);
    id v42 = [(id)DYGetGLGuestAppClient(v41) waitOnGraphicsSemaphoreAssertions];
    if ((int)v42 >= 1)
    {
      do
LABEL_57:
        unsigned int v43 = __ldaxr(v10);
      while (__stlxr(v43 - 1, v10));
      signed int v44 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v42) graphicsLockWaitQueue];
      dispatch_sync_f(v44, 0LL, (dispatch_function_t)do_nothing);
      (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 120LL))(a1, a2);
      return;
    }
  }

  *(_BYTE *)(v9 + 483_Block_object_dispose(va, 8) = 1;
  int v51 = 0LL;
  uint64_t v52 = 0LL;
  unsigned int v53 = 0;
  if ([(id)DYGetGLGuestAppClient(v42) state] != (char *)&dword_0 + 1
    || (id v14 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand], !(_DWORD)v14))
  {
    uint64_t v16 = (char *)v51;
    uint64_t v15 = v52;
    int64_t v17 = v52 - (_BYTE *)v51;
    unsigned int v18 = v53;
    unint64_t v19 = v53 - (v52 - (_BYTE *)v51);
    if (v19 > 0x33) {
      goto LABEL_24;
    }
    int v45 = (307 - v19) & 0xFFFFFF00;
    v53 += v45;
    uint64_t v16 = (char *)malloc(v45 + v18);
    int v51 = v16;
    if (v16)
    {
      if ((v16 & 3) == 0)
      {
        uint64_t v15 = &v16[v17];
LABEL_24:
        *((_DWORD *)v15 + 12) = 0;
        *((_OWORD *)v15 + 1) = 0u;
        *((_OWORD *)v15 + 2) = 0u;
        *(_OWORD *)uint64_t v15 = 0u;
        uint64_t v52 = v15 + 52;
        GPUTools::FB::Fbuf::align((char **)&v51);
        *((_DWORD *)v16 + 1) = 43;
        *((_DWORD *)v16 + _Block_object_dispose(va, 8) = 0;
        __uint64_t v50 = 0LL;
        uint64_t v20 = pthread_threadid_np(0LL, &v50);
        *((void *)v16 + 1) = v50;
        strcpy(v16 + 36, "Ci");
        *((void *)v16 + 5) = *(void *)v9;
        *((_DWORD *)v16 + 12) = a2;
        char v21 = byte_206E83;
        if ((byte_206E83 & 1) != 0) {
          breakpoint_break((uint64_t)&v51, (volatile int *)&stru_20.segname[3], 1LL, *(unsigned int *)(v9 + 3404), v9);
        }
        uint64_t v22 = (uint64_t)[(id)DYGetGLGuestAppClient(v20) overrideFlags];
        if (!(v22 & 0x10 | v21 & 4))
        {
          uint64_t v23 = mach_absolute_time();
          (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 32) + 120LL))(a1, a2);
          uint64_t v22 = mach_absolute_time();
          uint64_t v24 = v22 - v23;
          unint64_t v25 = g_DYTimebaseInfo;
          if (g_DYTimebaseInfo == *((_DWORD *)&g_DYTimebaseInfo + 1))
          {
            uint64_t v26 = v51;
            *((void *)v51 + 2) = v23;
            v26[3] = v24;
            if (!gCheckGLErrors) {
              goto LABEL_29;
            }
          }

          else
          {
            uint64_t v48 = __udivti3(g_DYTimebaseInfo * v24, (g_DYTimebaseInfo * (unsigned __int128)v24) >> 64);
            unsigned int v49 = v51;
            *((void *)v51 + 3) = v48;
            uint64_t v22 = __udivti3(v25 * v23, (v25 * (unsigned __int128)v23) >> 64);
            v49[2] = v22;
            if (!gCheckGLErrors) {
              goto LABEL_29;
            }
          }

          uint64_t v22 = check_errors(v9);
        }

{
  void *v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  void *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  signed int v12;
  BOOL v13;
  id v14;
  unsigned int v15;
  signed int v16;
  BOOL v17;
  unsigned int v18;
  uint64_t v19;
  id v20;
  unsigned int v21;
  dispatch_queue_s *v22;
  uint64_t v23;
  unint64_t v4 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v4) {
    goto LABEL_12;
  }
  uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v6 = v4[4];
    BOOL v7 = v6 >= (unint64_t)a1;
    else {
      unint64_t v8 = v4 + 1;
    }
    if (v7) {
      uint64_t v5 = (uint64_t)v4;
    }
    unint64_t v4 = (void *)*v8;
  }

  while (*v8);
  if (v5 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v5 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v9 = *(void *)(v5 + 40);
  uint64_t v10 = (unsigned int *)(v9 + 4640);
  do
  {
    unsigned int v11 = __ldaxr(v10);
    signed int v12 = v11 + 1;
  }

  while (__stlxr(v12, v10));
  if (gCheckGLErrors) {
    BOOL v13 = v12 <= 1;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13)
  {
    uint64_t v20 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    unint64_t v19 = handle_opengl_thread_conflict((const void **)v9);
    uint64_t v20 = [(id)DYGetGLGuestAppClient(v19) waitOnGraphicsSemaphoreAssertions];
    if ((int)v20 >= 1)
    {
      do
LABEL_34:
        char v21 = __ldaxr(v10);
      while (__stlxr(v21 - 1, v10));
      uint64_t v22 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v20) graphicsLockWaitQueue];
      dispatch_sync_f(v22, 0LL, (dispatch_function_t)do_nothing);
LABEL_36:
      (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 120LL))(a1, a2);
      return;
    }
  }

  *(_BYTE *)(v9 + 483_Block_object_dispose(va, 8) = 1;
  if ([(id)DYGetGLGuestAppClient(v20) state] == (char *)&dword_0 + 1)
  {
    id v14 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand];
    if ((_DWORD)v14)
    {
      do
        unsigned int v18 = __ldaxr(v10);
      while (__stlxr(v18 - 1, v10));
      [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
      goto LABEL_36;
    }
  }

  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 32) + 120LL))(a1, a2);
  ++*(void *)(v9 + 3704);
  if (gCheckGLErrors)
  {
    check_errors(v9);
    if (gBreakOnError)
    {
      uint64_t v23 = *(unsigned int *)(v9 + 3404);
      if ((_DWORD)v23) {
        breakpoint_break(0LL, (volatile int *)0xFFFFFFFFLL, 3LL, v23, v9);
      }
    }
  }

  do
  {
    uint64_t v15 = __ldaxr(v10);
    uint64_t v16 = v15 - 1;
  }

  while (__stlxr(v16, v10));
  if (gCheckGLErrors) {
    int64_t v17 = v16 < 1;
  }
  else {
    int64_t v17 = 1;
  }
  if (!v17) {
    handle_opengl_thread_conflict((const void **)v9);
  }
}

{
  void *v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  void *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  signed int v12;
  BOOL v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  int64x2_t v17;
  unsigned int v18;
  signed int v19;
  BOOL v20;
  unsigned int v21;
  uint64_t v22;
  id v23;
  unsigned int v24;
  dispatch_queue_s *v25;
  uint64_t v26;
  unint64_t v4 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v4) {
    goto LABEL_12;
  }
  uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v6 = v4[4];
    BOOL v7 = v6 >= (unint64_t)a1;
    else {
      unint64_t v8 = v4 + 1;
    }
    if (v7) {
      uint64_t v5 = (uint64_t)v4;
    }
    unint64_t v4 = (void *)*v8;
  }

  while (*v8);
  if (v5 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v5 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v9 = *(void *)(v5 + 40);
  uint64_t v10 = (unsigned int *)(v9 + 4640);
  do
  {
    unsigned int v11 = __ldaxr(v10);
    signed int v12 = v11 + 1;
  }

  while (__stlxr(v12, v10));
  if (gCheckGLErrors) {
    BOOL v13 = v12 <= 1;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13)
  {
    uint64_t v23 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v22 = handle_opengl_thread_conflict((const void **)v9);
    uint64_t v23 = [(id)DYGetGLGuestAppClient(v22) waitOnGraphicsSemaphoreAssertions];
    if ((int)v23 >= 1)
    {
      do
LABEL_34:
        uint64_t v24 = __ldaxr(v10);
      while (__stlxr(v24 - 1, v10));
      unint64_t v25 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v23) graphicsLockWaitQueue];
      dispatch_sync_f(v25, 0LL, (dispatch_function_t)do_nothing);
LABEL_36:
      (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 120LL))(a1, a2);
      return;
    }
  }

  *(_BYTE *)(v9 + 483_Block_object_dispose(va, 8) = 1;
  if ([(id)DYGetGLGuestAppClient(v23) state] == (char *)&dword_0 + 1)
  {
    id v14 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand];
    if ((_DWORD)v14)
    {
      do
        char v21 = __ldaxr(v10);
      while (__stlxr(v21 - 1, v10));
      [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
      goto LABEL_36;
    }
  }

  uint64_t v15 = mach_absolute_time();
  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 32) + 120LL))(a1, a2);
  uint64_t v16 = mach_absolute_time();
  int64_t v17 = vdupq_n_s64(1uLL);
  v17.i64[0] = v16 - v15;
  *(int64x2_t *)(v9 + 3696) = vaddq_s64(v17, *(int64x2_t *)(v9 + 3696));
  if (gCheckGLErrors)
  {
    check_errors(v9);
    if (gBreakOnError)
    {
      uint64_t v26 = *(unsigned int *)(v9 + 3404);
      if ((_DWORD)v26) {
        breakpoint_break(0LL, (volatile int *)0xFFFFFFFFLL, 3LL, v26, v9);
      }
    }
  }

  do
  {
    unsigned int v18 = __ldaxr(v10);
    unint64_t v19 = v18 - 1;
  }

  while (__stlxr(v19, v10));
  if (gCheckGLErrors) {
    uint64_t v20 = v19 < 1;
  }
  else {
    uint64_t v20 = 1;
  }
  if (!v20) {
    handle_opengl_thread_conflict((const void **)v9);
  }
}

void sub_22E14( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  if (a12) {
    free(a12);
  }
  _Unwind_Resume(exception_object);
}

void color4f(__GLIContextRec *a1, float a2, float a3, float a4, float a5)
{
  uint64_t v10 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v10) {
    goto LABEL_12;
  }
  uint64_t v11 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v12 = v10[4];
    BOOL v13 = v12 >= (unint64_t)a1;
    else {
      id v14 = v10 + 1;
    }
    if (v13) {
      uint64_t v11 = (uint64_t)v10;
    }
    uint64_t v10 = (void *)*v14;
  }

  while (*v14);
  if (v11 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v11 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v11 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v15 = *(void *)(v11 + 40);
  uint64_t v16 = (unsigned int *)(v15 + 4640);
  do
  {
    unsigned int v17 = __ldaxr(v16);
    signed int v18 = v17 + 1;
  }

  while (__stlxr(v18, v16));
  if (gCheckGLErrors) {
    BOOL v19 = v18 <= 1;
  }
  else {
    BOOL v19 = 1;
  }
  if (v19)
  {
    id v48 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v47 = handle_opengl_thread_conflict((const void **)v15);
    id v48 = [(id)DYGetGLGuestAppClient(v47) waitOnGraphicsSemaphoreAssertions];
    if ((int)v48 >= 1)
    {
      do
LABEL_57:
        unsigned int v49 = __ldaxr(v16);
      while (__stlxr(v49 - 1, v16));
      __uint64_t v50 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v48) graphicsLockWaitQueue];
      dispatch_sync_f(v50, 0LL, (dispatch_function_t)do_nothing);
      (*(void (**)(__GLIContextRec *, float, float, float, float))(*(void *)(v15 + 24) + 296LL))( a1,  a2,  a3,  a4,  a5);
      return;
    }
  }

  *(_BYTE *)(v15 + 483_Block_object_dispose(va, 8) = 1;
  uint64_t v57 = 0LL;
  id v58 = 0LL;
  unsigned int v59 = 0;
  if ([(id)DYGetGLGuestAppClient(v48) state] != (char *)&dword_0 + 1
    || (id v20 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand], !(_DWORD)v20))
  {
    uint64_t v22 = (char *)v57;
    char v21 = v58;
    int64_t v23 = v58 - (_BYTE *)v57;
    unsigned int v24 = v59;
    unint64_t v25 = v59 - (v58 - (_BYTE *)v57);
    if (v25 > 0x43) {
      goto LABEL_24;
    }
    int v51 = (323 - v25) & 0xFFFFFF00;
    v59 += v51;
    uint64_t v22 = (char *)malloc(v51 + v24);
    uint64_t v57 = v22;
    if (v22)
    {
      if ((v22 & 3) == 0)
      {
        char v21 = &v22[v23];
LABEL_24:
        *((_DWORD *)v21 + 16) = 0;
        *((_OWORD *)v21 + 2) = 0u;
        *((_OWORD *)v21 + 3) = 0u;
        *(_OWORD *)char v21 = 0u;
        *((_OWORD *)v21 + 1) = 0u;
        id v58 = v21 + 68;
        GPUTools::FB::Fbuf::align((char **)&v57);
        *((_DWORD *)v22 + 1) = 66;
        *((_DWORD *)v22 + _Block_object_dispose(va, 8) = 0;
        __uint64_t v56 = 0LL;
        uint64_t v26 = pthread_threadid_np(0LL, &v56);
        *((void *)v22 + 1) = v56;
        strcpy(v22 + 36, "Cffff");
        *(void *)(v22 + 44) = *(void *)v15;
        *((float *)v22 + 13) = a2;
        *((float *)v22 + 14) = a3;
        *((float *)v22 + 15) = a4;
        *((float *)v22 + 16) = a5;
        char v27 = byte_206E9A;
        if ((byte_206E9A & 1) != 0) {
          breakpoint_break( (uint64_t)&v57,  (volatile int *)((char *)&stru_20.vmsize + 2),  1LL,  *(unsigned int *)(v15 + 3404),  v15);
        }
        uint64_t v28 = (uint64_t)[(id)DYGetGLGuestAppClient(v26) overrideFlags];
        if (!(v28 & 0x10 | v27 & 4))
        {
          uint64_t v29 = mach_absolute_time();
          (*(void (**)(__GLIContextRec *, float, float, float, float))(*(void *)(v15 + 32) + 296LL))( a1,  a2,  a3,  a4,  a5);
          uint64_t v28 = mach_absolute_time();
          uint64_t v30 = v28 - v29;
          unint64_t v31 = g_DYTimebaseInfo;
          if (g_DYTimebaseInfo == *((_DWORD *)&g_DYTimebaseInfo + 1))
          {
            uint64_t v32 = v57;
            *((void *)v57 + 2) = v29;
            v32[3] = v30;
            if (!gCheckGLErrors) {
              goto LABEL_29;
            }
          }

          else
          {
            uint64_t v54 = __udivti3(g_DYTimebaseInfo * v30, (g_DYTimebaseInfo * (unsigned __int128)v30) >> 64);
            unsigned int v55 = v57;
            *((void *)v57 + 3) = v54;
            uint64_t v28 = __udivti3(v31 * v29, (v31 * (unsigned __int128)v29) >> 64);
            v55[2] = v28;
            if (!gCheckGLErrors) {
              goto LABEL_29;
            }
          }

          uint64_t v28 = check_errors(v15);
        }

{
  void *v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  void *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  signed int v18;
  BOOL v19;
  id v20;
  char *v21;
  char *v22;
  int64_t v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  id v33;
  GPUTools::FB::Fbuf *v34;
  unsigned int v35;
  GPUTools::FB::Fbuf *v36;
  dispatch_queue_s *v37;
  uint64_t v38;
  GPUTools::FB::Stream *v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  signed int v44;
  BOOL v45;
  unsigned int v46;
  uint64_t v47;
  id v48;
  unsigned int v49;
  dispatch_queue_s *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  __uint64_t v56;
  void *v57;
  char *v58;
  unsigned int v59;
  uint64_t v10 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v10) {
    goto LABEL_12;
  }
  uint64_t v11 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v12 = v10[4];
    BOOL v13 = v12 >= (unint64_t)a1;
    else {
      id v14 = v10 + 1;
    }
    if (v13) {
      uint64_t v11 = (uint64_t)v10;
    }
    uint64_t v10 = (void *)*v14;
  }

  while (*v14);
  if (v11 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v11 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v11 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v15 = *(void *)(v11 + 40);
  uint64_t v16 = (unsigned int *)(v15 + 4640);
  do
  {
    unsigned int v17 = __ldaxr(v16);
    signed int v18 = v17 + 1;
  }

  while (__stlxr(v18, v16));
  if (gCheckGLErrors) {
    BOOL v19 = v18 <= 1;
  }
  else {
    BOOL v19 = 1;
  }
  if (v19)
  {
    id v48 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v47 = handle_opengl_thread_conflict((const void **)v15);
    id v48 = [(id)DYGetGLGuestAppClient(v47) waitOnGraphicsSemaphoreAssertions];
    if ((int)v48 >= 1)
    {
      do
LABEL_57:
        unsigned int v49 = __ldaxr(v16);
      while (__stlxr(v49 - 1, v16));
      __uint64_t v50 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v48) graphicsLockWaitQueue];
      dispatch_sync_f(v50, 0LL, (dispatch_function_t)do_nothing);
      (*(void (**)(__GLIContextRec *, float, float, float, float))(*(void *)(v15 + 24) + 296LL))( a1,  a2,  a3,  a4,  a5);
      return;
    }
  }

  *(_BYTE *)(v15 + 483_Block_object_dispose(va, 8) = 1;
  uint64_t v57 = 0LL;
  id v58 = 0LL;
  unsigned int v59 = 0;
  if ([(id)DYGetGLGuestAppClient(v48) state] != (char *)&dword_0 + 1
    || (id v20 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand], !(_DWORD)v20))
  {
    uint64_t v22 = (char *)v57;
    char v21 = v58;
    int64_t v23 = v58 - (_BYTE *)v57;
    unsigned int v24 = v59;
    unint64_t v25 = v59 - (v58 - (_BYTE *)v57);
    if (v25 > 0x43) {
      goto LABEL_24;
    }
    int v51 = (323 - v25) & 0xFFFFFF00;
    v59 += v51;
    uint64_t v22 = (char *)malloc(v51 + v24);
    uint64_t v57 = v22;
    if (v22)
    {
      if ((v22 & 3) == 0)
      {
        char v21 = &v22[v23];
LABEL_24:
        *((_DWORD *)v21 + 16) = 0;
        *((_OWORD *)v21 + 2) = 0u;
        *((_OWORD *)v21 + 3) = 0u;
        *(_OWORD *)char v21 = 0u;
        *((_OWORD *)v21 + 1) = 0u;
        id v58 = v21 + 68;
        GPUTools::FB::Fbuf::align((char **)&v57);
        *((_DWORD *)v22 + 1) = 66;
        *((_DWORD *)v22 + _Block_object_dispose(va, 8) = 0;
        __uint64_t v56 = 0LL;
        uint64_t v26 = pthread_threadid_np(0LL, &v56);
        *((void *)v22 + 1) = v56;
        strcpy(v22 + 36, "Cffff");
        *(void *)(v22 + 44) = *(void *)v15;
        *((float *)v22 + 13) = a2;
        *((float *)v22 + 14) = a3;
        *((float *)v22 + 15) = a4;
        *((float *)v22 + 16) = a5;
        char v27 = byte_206E9A;
        if ((byte_206E9A & 1) != 0) {
          breakpoint_break( (uint64_t)&v57,  (volatile int *)((char *)&stru_20.vmsize + 2),  1LL,  *(unsigned int *)(v15 + 3404),  v15);
        }
        uint64_t v28 = (uint64_t)[(id)DYGetGLGuestAppClient(v26) overrideFlags];
        if (!(v28 & 0x10 | v27 & 4))
        {
          uint64_t v29 = mach_absolute_time();
          (*(void (**)(__GLIContextRec *, float, float, float, float))(*(void *)(v15 + 32) + 296LL))( a1,  a2,  a3,  a4,  a5);
          uint64_t v28 = mach_absolute_time();
          uint64_t v30 = v28 - v29;
          unint64_t v31 = g_DYTimebaseInfo;
          if (g_DYTimebaseInfo == *((_DWORD *)&g_DYTimebaseInfo + 1))
          {
            uint64_t v32 = v57;
            *((void *)v57 + 2) = v29;
            v32[3] = v30;
            if (!gCheckGLErrors) {
              goto LABEL_29;
            }
          }

          else
          {
            uint64_t v54 = __udivti3(g_DYTimebaseInfo * v30, (g_DYTimebaseInfo * (unsigned __int128)v30) >> 64);
            unsigned int v55 = v57;
            *((void *)v57 + 3) = v54;
            uint64_t v28 = __udivti3(v31 * v29, (v31 * (unsigned __int128)v29) >> 64);
            v55[2] = v28;
            if (!gCheckGLErrors) {
              goto LABEL_29;
            }
          }

          uint64_t v28 = check_errors(v15);
        }

{
  void *v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  void *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  signed int v18;
  BOOL v19;
  id v20;
  unsigned int v21;
  signed int v22;
  BOOL v23;
  unsigned int v24;
  uint64_t v25;
  id v26;
  unsigned int v27;
  dispatch_queue_s *v28;
  uint64_t v29;
  uint64_t v10 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v10) {
    goto LABEL_12;
  }
  uint64_t v11 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v12 = v10[4];
    BOOL v13 = v12 >= (unint64_t)a1;
    else {
      id v14 = v10 + 1;
    }
    if (v13) {
      uint64_t v11 = (uint64_t)v10;
    }
    uint64_t v10 = (void *)*v14;
  }

  while (*v14);
  if (v11 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v11 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v11 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v15 = *(void *)(v11 + 40);
  uint64_t v16 = (unsigned int *)(v15 + 4640);
  do
  {
    unsigned int v17 = __ldaxr(v16);
    signed int v18 = v17 + 1;
  }

  while (__stlxr(v18, v16));
  if (gCheckGLErrors) {
    BOOL v19 = v18 <= 1;
  }
  else {
    BOOL v19 = 1;
  }
  if (v19)
  {
    uint64_t v26 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    unint64_t v25 = handle_opengl_thread_conflict((const void **)v15);
    uint64_t v26 = [(id)DYGetGLGuestAppClient(v25) waitOnGraphicsSemaphoreAssertions];
    if ((int)v26 >= 1)
    {
      do
LABEL_34:
        char v27 = __ldaxr(v16);
      while (__stlxr(v27 - 1, v16));
      uint64_t v28 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v26) graphicsLockWaitQueue];
      dispatch_sync_f(v28, 0LL, (dispatch_function_t)do_nothing);
LABEL_36:
      (*(void (**)(__GLIContextRec *, float, float, float, float))(*(void *)(v15 + 24) + 296LL))( a1,  a2,  a3,  a4,  a5);
      return;
    }
  }

  *(_BYTE *)(v15 + 483_Block_object_dispose(va, 8) = 1;
  if ([(id)DYGetGLGuestAppClient(v26) state] == (char *)&dword_0 + 1)
  {
    id v20 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand];
    if ((_DWORD)v20)
    {
      do
        unsigned int v24 = __ldaxr(v16);
      while (__stlxr(v24 - 1, v16));
      [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
      goto LABEL_36;
    }
  }

  (*(void (**)(__GLIContextRec *, float, float, float, float))(*(void *)(v15 + 32) + 296LL))( a1,  a2,  a3,  a4,  a5);
  ++*(void *)(v15 + 3704);
  if (gCheckGLErrors)
  {
    check_errors(v15);
    if (gBreakOnError)
    {
      uint64_t v29 = *(unsigned int *)(v15 + 3404);
      if ((_DWORD)v29) {
        breakpoint_break(0LL, (volatile int *)0xFFFFFFFFLL, 3LL, v29, v15);
      }
    }
  }

  do
  {
    char v21 = __ldaxr(v16);
    uint64_t v22 = v21 - 1;
  }

  while (__stlxr(v22, v16));
  if (gCheckGLErrors) {
    int64_t v23 = v22 < 1;
  }
  else {
    int64_t v23 = 1;
  }
  if (!v23) {
    handle_opengl_thread_conflict((const void **)v15);
  }
}

{
  void *v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  void *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  signed int v18;
  BOOL v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  int64x2_t v23;
  unsigned int v24;
  signed int v25;
  BOOL v26;
  unsigned int v27;
  uint64_t v28;
  id v29;
  unsigned int v30;
  dispatch_queue_s *v31;
  uint64_t v32;
  uint64_t v10 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v10) {
    goto LABEL_12;
  }
  uint64_t v11 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v12 = v10[4];
    BOOL v13 = v12 >= (unint64_t)a1;
    else {
      id v14 = v10 + 1;
    }
    if (v13) {
      uint64_t v11 = (uint64_t)v10;
    }
    uint64_t v10 = (void *)*v14;
  }

  while (*v14);
  if (v11 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v11 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v11 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v15 = *(void *)(v11 + 40);
  uint64_t v16 = (unsigned int *)(v15 + 4640);
  do
  {
    unsigned int v17 = __ldaxr(v16);
    signed int v18 = v17 + 1;
  }

  while (__stlxr(v18, v16));
  if (gCheckGLErrors) {
    BOOL v19 = v18 <= 1;
  }
  else {
    BOOL v19 = 1;
  }
  if (v19)
  {
    uint64_t v29 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v28 = handle_opengl_thread_conflict((const void **)v15);
    uint64_t v29 = [(id)DYGetGLGuestAppClient(v28) waitOnGraphicsSemaphoreAssertions];
    if ((int)v29 >= 1)
    {
      do
LABEL_34:
        uint64_t v30 = __ldaxr(v16);
      while (__stlxr(v30 - 1, v16));
      unint64_t v31 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v29) graphicsLockWaitQueue];
      dispatch_sync_f(v31, 0LL, (dispatch_function_t)do_nothing);
LABEL_36:
      (*(void (**)(__GLIContextRec *, float, float, float, float))(*(void *)(v15 + 24) + 296LL))( a1,  a2,  a3,  a4,  a5);
      return;
    }
  }

  *(_BYTE *)(v15 + 483_Block_object_dispose(va, 8) = 1;
  if ([(id)DYGetGLGuestAppClient(v29) state] == (char *)&dword_0 + 1)
  {
    id v20 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand];
    if ((_DWORD)v20)
    {
      do
        char v27 = __ldaxr(v16);
      while (__stlxr(v27 - 1, v16));
      [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
      goto LABEL_36;
    }
  }

  char v21 = mach_absolute_time();
  (*(void (**)(__GLIContextRec *, float, float, float, float))(*(void *)(v15 + 32) + 296LL))( a1,  a2,  a3,  a4,  a5);
  uint64_t v22 = mach_absolute_time();
  int64_t v23 = vdupq_n_s64(1uLL);
  v23.i64[0] = v22 - v21;
  *(int64x2_t *)(v15 + 3696) = vaddq_s64(v23, *(int64x2_t *)(v15 + 3696));
  if (gCheckGLErrors)
  {
    check_errors(v15);
    if (gBreakOnError)
    {
      uint64_t v32 = *(unsigned int *)(v15 + 3404);
      if ((_DWORD)v32) {
        breakpoint_break(0LL, (volatile int *)0xFFFFFFFFLL, 3LL, v32, v15);
      }
    }
  }

  do
  {
    unsigned int v24 = __ldaxr(v16);
    unint64_t v25 = v24 - 1;
  }

  while (__stlxr(v25, v16));
  if (gCheckGLErrors) {
    uint64_t v26 = v25 < 1;
  }
  else {
    uint64_t v26 = 1;
  }
  if (!v26) {
    handle_opengl_thread_conflict((const void **)v15);
  }
}

void sub_23338( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  if (a12) {
    free(a12);
  }
  _Unwind_Resume(exception_object);
}

void color4ub(__GLIContextRec *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v10) {
    goto LABEL_12;
  }
  uint64_t v11 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v12 = v10[4];
    BOOL v13 = v12 >= (unint64_t)a1;
    else {
      id v14 = v10 + 1;
    }
    if (v13) {
      uint64_t v11 = (uint64_t)v10;
    }
    uint64_t v10 = (void *)*v14;
  }

  while (*v14);
  if (v11 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v11 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v11 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v15 = *(void *)(v11 + 40);
  uint64_t v16 = (unsigned int *)(v15 + 4640);
  do
  {
    unsigned int v17 = __ldaxr(v16);
    signed int v18 = v17 + 1;
  }

  while (__stlxr(v18, v16));
  if (gCheckGLErrors) {
    BOOL v19 = v18 <= 1;
  }
  else {
    BOOL v19 = 1;
  }
  if (v19)
  {
    id v48 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v47 = handle_opengl_thread_conflict((const void **)v15);
    id v48 = [(id)DYGetGLGuestAppClient(v47) waitOnGraphicsSemaphoreAssertions];
    if ((int)v48 >= 1)
    {
      do
LABEL_57:
        unsigned int v49 = __ldaxr(v16);
      while (__stlxr(v49 - 1, v16));
      __uint64_t v50 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v48) graphicsLockWaitQueue];
      dispatch_sync_f(v50, 0LL, (dispatch_function_t)do_nothing);
      (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 + 24) + 344LL))( a1,  a2,  a3,  a4,  a5);
      return;
    }
  }

  *(_BYTE *)(v15 + 483_Block_object_dispose(va, 8) = 1;
  uint64_t v57 = 0LL;
  id v58 = 0LL;
  unsigned int v59 = 0;
  if ([(id)DYGetGLGuestAppClient(v48) state] != (char *)&dword_0 + 1
    || (id v20 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand], !(_DWORD)v20))
  {
    uint64_t v22 = (char *)v57;
    char v21 = v58;
    int64_t v23 = v58 - (_BYTE *)v57;
    unsigned int v24 = v59;
    unint64_t v25 = v59 - (v58 - (_BYTE *)v57);
    if (v25 > 0x3B) {
      goto LABEL_24;
    }
    int v51 = (315 - v25) & 0xFFFFFF00;
    v59 += v51;
    uint64_t v22 = (char *)malloc(v51 + v24);
    uint64_t v57 = v22;
    if (v22)
    {
      if ((v22 & 3) == 0)
      {
        char v21 = &v22[v23];
LABEL_24:
        *(_OWORD *)(v21 + 44) = 0u;
        *((_OWORD *)v21 + 1) = 0u;
        *((_OWORD *)v21 + 2) = 0u;
        *(_OWORD *)char v21 = 0u;
        id v58 = v21 + 60;
        GPUTools::FB::Fbuf::align((char **)&v57);
        *((_DWORD *)v22 + 1) = 72;
        *((_DWORD *)v22 + _Block_object_dispose(va, 8) = 0;
        __uint64_t v56 = 0LL;
        uint64_t v26 = pthread_threadid_np(0LL, &v56);
        *((void *)v22 + 1) = v56;
        strcpy(v22 + 36, "Cubububub");
        *((void *)v22 + 6) = *(void *)v15;
        v22[56] = a2;
        v22[57] = a3;
        v22[58] = a4;
        v22[59] = a5;
        char v27 = byte_206EA0;
        if ((byte_206EA0 & 1) != 0) {
          breakpoint_break((uint64_t)&v57, (volatile int *)&stru_20.fileoff, 1LL, *(unsigned int *)(v15 + 3404), v15);
        }
        uint64_t v28 = (uint64_t)[(id)DYGetGLGuestAppClient(v26) overrideFlags];
        if (!(v28 & 0x10 | v27 & 4))
        {
          uint64_t v29 = mach_absolute_time();
          (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 + 32) + 344LL))( a1,  a2,  a3,  a4,  a5);
          uint64_t v28 = mach_absolute_time();
          uint64_t v30 = v28 - v29;
          unint64_t v31 = g_DYTimebaseInfo;
          if (g_DYTimebaseInfo == *((_DWORD *)&g_DYTimebaseInfo + 1))
          {
            uint64_t v32 = v57;
            *((void *)v57 + 2) = v29;
            v32[3] = v30;
            if (!gCheckGLErrors) {
              goto LABEL_29;
            }
          }

          else
          {
            uint64_t v54 = __udivti3(g_DYTimebaseInfo * v30, (g_DYTimebaseInfo * (unsigned __int128)v30) >> 64);
            unsigned int v55 = v57;
            *((void *)v57 + 3) = v54;
            uint64_t v28 = __udivti3(v31 * v29, (v31 * (unsigned __int128)v29) >> 64);
            v55[2] = v28;
            if (!gCheckGLErrors) {
              goto LABEL_29;
            }
          }

          uint64_t v28 = check_errors(v15);
        }

{
  void *v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  void *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  signed int v18;
  BOOL v19;
  id v20;
  char *v21;
  char *v22;
  int64_t v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  id v33;
  GPUTools::FB::Fbuf *v34;
  unsigned int v35;
  GPUTools::FB::Fbuf *v36;
  dispatch_queue_s *v37;
  uint64_t v38;
  GPUTools::FB::Stream *v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  signed int v44;
  BOOL v45;
  unsigned int v46;
  uint64_t v47;
  id v48;
  unsigned int v49;
  dispatch_queue_s *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  __uint64_t v56;
  void *v57;
  char *v58;
  unsigned int v59;
  uint64_t v10 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v10) {
    goto LABEL_12;
  }
  uint64_t v11 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v12 = v10[4];
    BOOL v13 = v12 >= (unint64_t)a1;
    else {
      id v14 = v10 + 1;
    }
    if (v13) {
      uint64_t v11 = (uint64_t)v10;
    }
    uint64_t v10 = (void *)*v14;
  }

  while (*v14);
  if (v11 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v11 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v11 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v15 = *(void *)(v11 + 40);
  uint64_t v16 = (unsigned int *)(v15 + 4640);
  do
  {
    unsigned int v17 = __ldaxr(v16);
    signed int v18 = v17 + 1;
  }

  while (__stlxr(v18, v16));
  if (gCheckGLErrors) {
    BOOL v19 = v18 <= 1;
  }
  else {
    BOOL v19 = 1;
  }
  if (v19)
  {
    id v48 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v47 = handle_opengl_thread_conflict((const void **)v15);
    id v48 = [(id)DYGetGLGuestAppClient(v47) waitOnGraphicsSemaphoreAssertions];
    if ((int)v48 >= 1)
    {
      do
LABEL_57:
        unsigned int v49 = __ldaxr(v16);
      while (__stlxr(v49 - 1, v16));
      __uint64_t v50 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v48) graphicsLockWaitQueue];
      dispatch_sync_f(v50, 0LL, (dispatch_function_t)do_nothing);
      (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 + 24) + 344LL))( a1,  a2,  a3,  a4,  a5);
      return;
    }
  }

  *(_BYTE *)(v15 + 483_Block_object_dispose(va, 8) = 1;
  uint64_t v57 = 0LL;
  id v58 = 0LL;
  unsigned int v59 = 0;
  if ([(id)DYGetGLGuestAppClient(v48) state] != (char *)&dword_0 + 1
    || (id v20 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand], !(_DWORD)v20))
  {
    uint64_t v22 = (char *)v57;
    char v21 = v58;
    int64_t v23 = v58 - (_BYTE *)v57;
    unsigned int v24 = v59;
    unint64_t v25 = v59 - (v58 - (_BYTE *)v57);
    if (v25 > 0x3B) {
      goto LABEL_24;
    }
    int v51 = (315 - v25) & 0xFFFFFF00;
    v59 += v51;
    uint64_t v22 = (char *)malloc(v51 + v24);
    uint64_t v57 = v22;
    if (v22)
    {
      if ((v22 & 3) == 0)
      {
        char v21 = &v22[v23];
LABEL_24:
        *(_OWORD *)(v21 + 44) = 0u;
        *((_OWORD *)v21 + 1) = 0u;
        *((_OWORD *)v21 + 2) = 0u;
        *(_OWORD *)char v21 = 0u;
        id v58 = v21 + 60;
        GPUTools::FB::Fbuf::align((char **)&v57);
        *((_DWORD *)v22 + 1) = 72;
        *((_DWORD *)v22 + _Block_object_dispose(va, 8) = 0;
        __uint64_t v56 = 0LL;
        uint64_t v26 = pthread_threadid_np(0LL, &v56);
        *((void *)v22 + 1) = v56;
        strcpy(v22 + 36, "Cubububub");
        *((void *)v22 + 6) = *(void *)v15;
        v22[56] = a2;
        v22[57] = a3;
        v22[58] = a4;
        v22[59] = a5;
        char v27 = byte_206EA0;
        if ((byte_206EA0 & 1) != 0) {
          breakpoint_break((uint64_t)&v57, (volatile int *)&stru_20.fileoff, 1LL, *(unsigned int *)(v15 + 3404), v15);
        }
        uint64_t v28 = (uint64_t)[(id)DYGetGLGuestAppClient(v26) overrideFlags];
        if (!(v28 & 0x10 | v27 & 4))
        {
          uint64_t v29 = mach_absolute_time();
          (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 + 32) + 344LL))( a1,  a2,  a3,  a4,  a5);
          uint64_t v28 = mach_absolute_time();
          uint64_t v30 = v28 - v29;
          unint64_t v31 = g_DYTimebaseInfo;
          if (g_DYTimebaseInfo == *((_DWORD *)&g_DYTimebaseInfo + 1))
          {
            uint64_t v32 = v57;
            *((void *)v57 + 2) = v29;
            v32[3] = v30;
            if (!gCheckGLErrors) {
              goto LABEL_29;
            }
          }

          else
          {
            uint64_t v54 = __udivti3(g_DYTimebaseInfo * v30, (g_DYTimebaseInfo * (unsigned __int128)v30) >> 64);
            unsigned int v55 = v57;
            *((void *)v57 + 3) = v54;
            uint64_t v28 = __udivti3(v31 * v29, (v31 * (unsigned __int128)v29) >> 64);
            v55[2] = v28;
            if (!gCheckGLErrors) {
              goto LABEL_29;
            }
          }

          uint64_t v28 = check_errors(v15);
        }

{
  void *v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  void *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  signed int v18;
  BOOL v19;
  id v20;
  unsigned int v21;
  signed int v22;
  BOOL v23;
  unsigned int v24;
  uint64_t v25;
  id v26;
  unsigned int v27;
  dispatch_queue_s *v28;
  uint64_t v29;
  uint64_t v10 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v10) {
    goto LABEL_12;
  }
  uint64_t v11 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v12 = v10[4];
    BOOL v13 = v12 >= (unint64_t)a1;
    else {
      id v14 = v10 + 1;
    }
    if (v13) {
      uint64_t v11 = (uint64_t)v10;
    }
    uint64_t v10 = (void *)*v14;
  }

  while (*v14);
  if (v11 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v11 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v11 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v15 = *(void *)(v11 + 40);
  uint64_t v16 = (unsigned int *)(v15 + 4640);
  do
  {
    unsigned int v17 = __ldaxr(v16);
    signed int v18 = v17 + 1;
  }

  while (__stlxr(v18, v16));
  if (gCheckGLErrors) {
    BOOL v19 = v18 <= 1;
  }
  else {
    BOOL v19 = 1;
  }
  if (v19)
  {
    uint64_t v26 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    unint64_t v25 = handle_opengl_thread_conflict((const void **)v15);
    uint64_t v26 = [(id)DYGetGLGuestAppClient(v25) waitOnGraphicsSemaphoreAssertions];
    if ((int)v26 >= 1)
    {
      do
LABEL_34:
        char v27 = __ldaxr(v16);
      while (__stlxr(v27 - 1, v16));
      uint64_t v28 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v26) graphicsLockWaitQueue];
      dispatch_sync_f(v28, 0LL, (dispatch_function_t)do_nothing);
LABEL_36:
      (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 + 24) + 344LL))( a1,  a2,  a3,  a4,  a5);
      return;
    }
  }

  *(_BYTE *)(v15 + 483_Block_object_dispose(va, 8) = 1;
  if ([(id)DYGetGLGuestAppClient(v26) state] == (char *)&dword_0 + 1)
  {
    id v20 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand];
    if ((_DWORD)v20)
    {
      do
        unsigned int v24 = __ldaxr(v16);
      while (__stlxr(v24 - 1, v16));
      [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
      goto LABEL_36;
    }
  }

  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 + 32) + 344LL))( a1,  a2,  a3,  a4,  a5);
  ++*(void *)(v15 + 3704);
  if (gCheckGLErrors)
  {
    check_errors(v15);
    if (gBreakOnError)
    {
      uint64_t v29 = *(unsigned int *)(v15 + 3404);
      if ((_DWORD)v29) {
        breakpoint_break(0LL, (volatile int *)0xFFFFFFFFLL, 3LL, v29, v15);
      }
    }
  }

  do
  {
    char v21 = __ldaxr(v16);
    uint64_t v22 = v21 - 1;
  }

  while (__stlxr(v22, v16));
  if (gCheckGLErrors) {
    int64_t v23 = v22 < 1;
  }
  else {
    int64_t v23 = 1;
  }
  if (!v23) {
    handle_opengl_thread_conflict((const void **)v15);
  }
}

{
  void *v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  void *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  signed int v18;
  BOOL v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  int64x2_t v23;
  unsigned int v24;
  signed int v25;
  BOOL v26;
  unsigned int v27;
  uint64_t v28;
  id v29;
  unsigned int v30;
  dispatch_queue_s *v31;
  uint64_t v32;
  uint64_t v10 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v10) {
    goto LABEL_12;
  }
  uint64_t v11 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v12 = v10[4];
    BOOL v13 = v12 >= (unint64_t)a1;
    else {
      id v14 = v10 + 1;
    }
    if (v13) {
      uint64_t v11 = (uint64_t)v10;
    }
    uint64_t v10 = (void *)*v14;
  }

  while (*v14);
  if (v11 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v11 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v11 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v15 = *(void *)(v11 + 40);
  uint64_t v16 = (unsigned int *)(v15 + 4640);
  do
  {
    unsigned int v17 = __ldaxr(v16);
    signed int v18 = v17 + 1;
  }

  while (__stlxr(v18, v16));
  if (gCheckGLErrors) {
    BOOL v19 = v18 <= 1;
  }
  else {
    BOOL v19 = 1;
  }
  if (v19)
  {
    uint64_t v29 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v28 = handle_opengl_thread_conflict((const void **)v15);
    uint64_t v29 = [(id)DYGetGLGuestAppClient(v28) waitOnGraphicsSemaphoreAssertions];
    if ((int)v29 >= 1)
    {
      do
LABEL_34:
        uint64_t v30 = __ldaxr(v16);
      while (__stlxr(v30 - 1, v16));
      unint64_t v31 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v29) graphicsLockWaitQueue];
      dispatch_sync_f(v31, 0LL, (dispatch_function_t)do_nothing);
LABEL_36:
      (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 + 24) + 344LL))( a1,  a2,  a3,  a4,  a5);
      return;
    }
  }

  *(_BYTE *)(v15 + 483_Block_object_dispose(va, 8) = 1;
  if ([(id)DYGetGLGuestAppClient(v29) state] == (char *)&dword_0 + 1)
  {
    id v20 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand];
    if ((_DWORD)v20)
    {
      do
        char v27 = __ldaxr(v16);
      while (__stlxr(v27 - 1, v16));
      [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
      goto LABEL_36;
    }
  }

  char v21 = mach_absolute_time();
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 + 32) + 344LL))( a1,  a2,  a3,  a4,  a5);
  uint64_t v22 = mach_absolute_time();
  int64_t v23 = vdupq_n_s64(1uLL);
  v23.i64[0] = v22 - v21;
  *(int64x2_t *)(v15 + 3696) = vaddq_s64(v23, *(int64x2_t *)(v15 + 3696));
  if (gCheckGLErrors)
  {
    check_errors(v15);
    if (gBreakOnError)
    {
      uint64_t v32 = *(unsigned int *)(v15 + 3404);
      if ((_DWORD)v32) {
        breakpoint_break(0LL, (volatile int *)0xFFFFFFFFLL, 3LL, v32, v15);
      }
    }
  }

  do
  {
    unsigned int v24 = __ldaxr(v16);
    unint64_t v25 = v24 - 1;
  }

  while (__stlxr(v25, v16));
  if (gCheckGLErrors) {
    uint64_t v26 = v25 < 1;
  }
  else {
    uint64_t v26 = 1;
  }
  if (!v26) {
    handle_opengl_thread_conflict((const void **)v15);
  }
}

void sub_23858( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  if (a12) {
    free(a12);
  }
  _Unwind_Resume(exception_object);
}

void color_mask(__GLIContextRec *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v10) {
    goto LABEL_12;
  }
  uint64_t v11 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v12 = v10[4];
    BOOL v13 = v12 >= (unint64_t)a1;
    else {
      id v14 = v10 + 1;
    }
    if (v13) {
      uint64_t v11 = (uint64_t)v10;
    }
    uint64_t v10 = (void *)*v14;
  }

  while (*v14);
  if (v11 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v11 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v11 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v15 = *(void *)(v11 + 40);
  uint64_t v16 = (unsigned int *)(v15 + 4640);
  do
  {
    unsigned int v17 = __ldaxr(v16);
    signed int v18 = v17 + 1;
  }

  while (__stlxr(v18, v16));
  if (gCheckGLErrors) {
    BOOL v19 = v18 <= 1;
  }
  else {
    BOOL v19 = 1;
  }
  if (v19)
  {
    id v48 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v47 = handle_opengl_thread_conflict((const void **)v15);
    id v48 = [(id)DYGetGLGuestAppClient(v47) waitOnGraphicsSemaphoreAssertions];
    if ((int)v48 >= 1)
    {
      do
LABEL_57:
        unsigned int v49 = __ldaxr(v16);
      while (__stlxr(v49 - 1, v16));
      __uint64_t v50 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v48) graphicsLockWaitQueue];
      dispatch_sync_f(v50, 0LL, (dispatch_function_t)do_nothing);
      (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 + 24) + 392LL))( a1,  a2,  a3,  a4,  a5);
      return;
    }
  }

  *(_BYTE *)(v15 + 483_Block_object_dispose(va, 8) = 1;
  uint64_t v57 = 0LL;
  id v58 = 0LL;
  unsigned int v59 = 0;
  if ([(id)DYGetGLGuestAppClient(v48) state] != (char *)&dword_0 + 1
    || (id v20 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand], !(_DWORD)v20))
  {
    uint64_t v22 = (char *)v57;
    char v21 = v58;
    int64_t v23 = v58 - (_BYTE *)v57;
    unsigned int v24 = v59;
    unint64_t v25 = v59 - (v58 - (_BYTE *)v57);
    if (v25 > 0x3B) {
      goto LABEL_24;
    }
    int v51 = (315 - v25) & 0xFFFFFF00;
    v59 += v51;
    uint64_t v22 = (char *)malloc(v51 + v24);
    uint64_t v57 = v22;
    if (v22)
    {
      if ((v22 & 3) == 0)
      {
        char v21 = &v22[v23];
LABEL_24:
        *(_OWORD *)(v21 + 44) = 0u;
        *((_OWORD *)v21 + 1) = 0u;
        *((_OWORD *)v21 + 2) = 0u;
        *(_OWORD *)char v21 = 0u;
        id v58 = v21 + 60;
        GPUTools::FB::Fbuf::align((char **)&v57);
        *((_DWORD *)v22 + 1) = 78;
        *((_DWORD *)v22 + _Block_object_dispose(va, 8) = 0;
        __uint64_t v56 = 0LL;
        uint64_t v26 = pthread_threadid_np(0LL, &v56);
        *((void *)v22 + 1) = v56;
        strcpy(v22 + 36, "Cubububub");
        *((void *)v22 + 6) = *(void *)v15;
        v22[56] = a2;
        v22[57] = a3;
        v22[58] = a4;
        v22[59] = a5;
        char v27 = byte_206EA6;
        if ((byte_206EA6 & 1) != 0) {
          breakpoint_break( (uint64_t)&v57,  (volatile int *)((char *)&stru_20.fileoff + 6),  1LL,  *(unsigned int *)(v15 + 3404),  v15);
        }
        uint64_t v28 = (uint64_t)[(id)DYGetGLGuestAppClient(v26) overrideFlags];
        if (!(v28 & 0x10 | v27 & 4))
        {
          uint64_t v29 = mach_absolute_time();
          (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 + 32) + 392LL))( a1,  a2,  a3,  a4,  a5);
          uint64_t v28 = mach_absolute_time();
          uint64_t v30 = v28 - v29;
          unint64_t v31 = g_DYTimebaseInfo;
          if (g_DYTimebaseInfo == *((_DWORD *)&g_DYTimebaseInfo + 1))
          {
            uint64_t v32 = v57;
            *((void *)v57 + 2) = v29;
            v32[3] = v30;
            if (!gCheckGLErrors) {
              goto LABEL_29;
            }
          }

          else
          {
            uint64_t v54 = __udivti3(g_DYTimebaseInfo * v30, (g_DYTimebaseInfo * (unsigned __int128)v30) >> 64);
            unsigned int v55 = v57;
            *((void *)v57 + 3) = v54;
            uint64_t v28 = __udivti3(v31 * v29, (v31 * (unsigned __int128)v29) >> 64);
            v55[2] = v28;
            if (!gCheckGLErrors) {
              goto LABEL_29;
            }
          }

          uint64_t v28 = check_errors(v15);
        }

{
  void *v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  void *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  signed int v18;
  BOOL v19;
  id v20;
  char *v21;
  char *v22;
  int64_t v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  id v33;
  GPUTools::FB::Fbuf *v34;
  unsigned int v35;
  GPUTools::FB::Fbuf *v36;
  dispatch_queue_s *v37;
  uint64_t v38;
  GPUTools::FB::Stream *v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  signed int v44;
  BOOL v45;
  unsigned int v46;
  uint64_t v47;
  id v48;
  unsigned int v49;
  dispatch_queue_s *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  __uint64_t v56;
  void *v57;
  char *v58;
  unsigned int v59;
  uint64_t v10 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v10) {
    goto LABEL_12;
  }
  uint64_t v11 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v12 = v10[4];
    BOOL v13 = v12 >= (unint64_t)a1;
    else {
      id v14 = v10 + 1;
    }
    if (v13) {
      uint64_t v11 = (uint64_t)v10;
    }
    uint64_t v10 = (void *)*v14;
  }

  while (*v14);
  if (v11 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v11 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v11 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v15 = *(void *)(v11 + 40);
  uint64_t v16 = (unsigned int *)(v15 + 4640);
  do
  {
    unsigned int v17 = __ldaxr(v16);
    signed int v18 = v17 + 1;
  }

  while (__stlxr(v18, v16));
  if (gCheckGLErrors) {
    BOOL v19 = v18 <= 1;
  }
  else {
    BOOL v19 = 1;
  }
  if (v19)
  {
    id v48 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v47 = handle_opengl_thread_conflict((const void **)v15);
    id v48 = [(id)DYGetGLGuestAppClient(v47) waitOnGraphicsSemaphoreAssertions];
    if ((int)v48 >= 1)
    {
      do
LABEL_57:
        unsigned int v49 = __ldaxr(v16);
      while (__stlxr(v49 - 1, v16));
      __uint64_t v50 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v48) graphicsLockWaitQueue];
      dispatch_sync_f(v50, 0LL, (dispatch_function_t)do_nothing);
      (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 + 24) + 392LL))( a1,  a2,  a3,  a4,  a5);
      return;
    }
  }

  *(_BYTE *)(v15 + 483_Block_object_dispose(va, 8) = 1;
  uint64_t v57 = 0LL;
  id v58 = 0LL;
  unsigned int v59 = 0;
  if ([(id)DYGetGLGuestAppClient(v48) state] != (char *)&dword_0 + 1
    || (id v20 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand], !(_DWORD)v20))
  {
    uint64_t v22 = (char *)v57;
    char v21 = v58;
    int64_t v23 = v58 - (_BYTE *)v57;
    unsigned int v24 = v59;
    unint64_t v25 = v59 - (v58 - (_BYTE *)v57);
    if (v25 > 0x3B) {
      goto LABEL_24;
    }
    int v51 = (315 - v25) & 0xFFFFFF00;
    v59 += v51;
    uint64_t v22 = (char *)malloc(v51 + v24);
    uint64_t v57 = v22;
    if (v22)
    {
      if ((v22 & 3) == 0)
      {
        char v21 = &v22[v23];
LABEL_24:
        *(_OWORD *)(v21 + 44) = 0u;
        *((_OWORD *)v21 + 1) = 0u;
        *((_OWORD *)v21 + 2) = 0u;
        *(_OWORD *)char v21 = 0u;
        id v58 = v21 + 60;
        GPUTools::FB::Fbuf::align((char **)&v57);
        *((_DWORD *)v22 + 1) = 78;
        *((_DWORD *)v22 + _Block_object_dispose(va, 8) = 0;
        __uint64_t v56 = 0LL;
        uint64_t v26 = pthread_threadid_np(0LL, &v56);
        *((void *)v22 + 1) = v56;
        strcpy(v22 + 36, "Cubububub");
        *((void *)v22 + 6) = *(void *)v15;
        v22[56] = a2;
        v22[57] = a3;
        v22[58] = a4;
        v22[59] = a5;
        char v27 = byte_206EA6;
        if ((byte_206EA6 & 1) != 0) {
          breakpoint_break( (uint64_t)&v57,  (volatile int *)((char *)&stru_20.fileoff + 6),  1LL,  *(unsigned int *)(v15 + 3404),  v15);
        }
        uint64_t v28 = (uint64_t)[(id)DYGetGLGuestAppClient(v26) overrideFlags];
        if (!(v28 & 0x10 | v27 & 4))
        {
          uint64_t v29 = mach_absolute_time();
          (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 + 32) + 392LL))( a1,  a2,  a3,  a4,  a5);
          uint64_t v28 = mach_absolute_time();
          uint64_t v30 = v28 - v29;
          unint64_t v31 = g_DYTimebaseInfo;
          if (g_DYTimebaseInfo == *((_DWORD *)&g_DYTimebaseInfo + 1))
          {
            uint64_t v32 = v57;
            *((void *)v57 + 2) = v29;
            v32[3] = v30;
            if (!gCheckGLErrors) {
              goto LABEL_29;
            }
          }

          else
          {
            uint64_t v54 = __udivti3(g_DYTimebaseInfo * v30, (g_DYTimebaseInfo * (unsigned __int128)v30) >> 64);
            unsigned int v55 = v57;
            *((void *)v57 + 3) = v54;
            uint64_t v28 = __udivti3(v31 * v29, (v31 * (unsigned __int128)v29) >> 64);
            v55[2] = v28;
            if (!gCheckGLErrors) {
              goto LABEL_29;
            }
          }

          uint64_t v28 = check_errors(v15);
        }

{
  void *v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  void *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  signed int v18;
  BOOL v19;
  id v20;
  unsigned int v21;
  signed int v22;
  BOOL v23;
  unsigned int v24;
  uint64_t v25;
  id v26;
  unsigned int v27;
  dispatch_queue_s *v28;
  uint64_t v29;
  uint64_t v10 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v10) {
    goto LABEL_12;
  }
  uint64_t v11 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v12 = v10[4];
    BOOL v13 = v12 >= (unint64_t)a1;
    else {
      id v14 = v10 + 1;
    }
    if (v13) {
      uint64_t v11 = (uint64_t)v10;
    }
    uint64_t v10 = (void *)*v14;
  }

  while (*v14);
  if (v11 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v11 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v11 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v15 = *(void *)(v11 + 40);
  uint64_t v16 = (unsigned int *)(v15 + 4640);
  do
  {
    unsigned int v17 = __ldaxr(v16);
    signed int v18 = v17 + 1;
  }

  while (__stlxr(v18, v16));
  if (gCheckGLErrors) {
    BOOL v19 = v18 <= 1;
  }
  else {
    BOOL v19 = 1;
  }
  if (v19)
  {
    uint64_t v26 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    unint64_t v25 = handle_opengl_thread_conflict((const void **)v15);
    uint64_t v26 = [(id)DYGetGLGuestAppClient(v25) waitOnGraphicsSemaphoreAssertions];
    if ((int)v26 >= 1)
    {
      do
LABEL_34:
        char v27 = __ldaxr(v16);
      while (__stlxr(v27 - 1, v16));
      uint64_t v28 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v26) graphicsLockWaitQueue];
      dispatch_sync_f(v28, 0LL, (dispatch_function_t)do_nothing);
LABEL_36:
      (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 + 24) + 392LL))( a1,  a2,  a3,  a4,  a5);
      return;
    }
  }

  *(_BYTE *)(v15 + 483_Block_object_dispose(va, 8) = 1;
  if ([(id)DYGetGLGuestAppClient(v26) state] == (char *)&dword_0 + 1)
  {
    id v20 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand];
    if ((_DWORD)v20)
    {
      do
        unsigned int v24 = __ldaxr(v16);
      while (__stlxr(v24 - 1, v16));
      [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
      goto LABEL_36;
    }
  }

  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 + 32) + 392LL))( a1,  a2,  a3,  a4,  a5);
  ++*(void *)(v15 + 3704);
  if (gCheckGLErrors)
  {
    check_errors(v15);
    if (gBreakOnError)
    {
      uint64_t v29 = *(unsigned int *)(v15 + 3404);
      if ((_DWORD)v29) {
        breakpoint_break(0LL, (volatile int *)0xFFFFFFFFLL, 3LL, v29, v15);
      }
    }
  }

  do
  {
    char v21 = __ldaxr(v16);
    uint64_t v22 = v21 - 1;
  }

  while (__stlxr(v22, v16));
  if (gCheckGLErrors) {
    int64_t v23 = v22 < 1;
  }
  else {
    int64_t v23 = 1;
  }
  if (!v23) {
    handle_opengl_thread_conflict((const void **)v15);
  }
}

{
  void *v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  void *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  signed int v18;
  BOOL v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  int64x2_t v23;
  unsigned int v24;
  signed int v25;
  BOOL v26;
  unsigned int v27;
  uint64_t v28;
  id v29;
  unsigned int v30;
  dispatch_queue_s *v31;
  uint64_t v32;
  uint64_t v10 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v10) {
    goto LABEL_12;
  }
  uint64_t v11 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v12 = v10[4];
    BOOL v13 = v12 >= (unint64_t)a1;
    else {
      id v14 = v10 + 1;
    }
    if (v13) {
      uint64_t v11 = (uint64_t)v10;
    }
    uint64_t v10 = (void *)*v14;
  }

  while (*v14);
  if (v11 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v11 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v11 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v15 = *(void *)(v11 + 40);
  uint64_t v16 = (unsigned int *)(v15 + 4640);
  do
  {
    unsigned int v17 = __ldaxr(v16);
    signed int v18 = v17 + 1;
  }

  while (__stlxr(v18, v16));
  if (gCheckGLErrors) {
    BOOL v19 = v18 <= 1;
  }
  else {
    BOOL v19 = 1;
  }
  if (v19)
  {
    uint64_t v29 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v28 = handle_opengl_thread_conflict((const void **)v15);
    uint64_t v29 = [(id)DYGetGLGuestAppClient(v28) waitOnGraphicsSemaphoreAssertions];
    if ((int)v29 >= 1)
    {
      do
LABEL_34:
        uint64_t v30 = __ldaxr(v16);
      while (__stlxr(v30 - 1, v16));
      unint64_t v31 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v29) graphicsLockWaitQueue];
      dispatch_sync_f(v31, 0LL, (dispatch_function_t)do_nothing);
LABEL_36:
      (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 + 24) + 392LL))( a1,  a2,  a3,  a4,  a5);
      return;
    }
  }

  *(_BYTE *)(v15 + 483_Block_object_dispose(va, 8) = 1;
  if ([(id)DYGetGLGuestAppClient(v29) state] == (char *)&dword_0 + 1)
  {
    id v20 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand];
    if ((_DWORD)v20)
    {
      do
        char v27 = __ldaxr(v16);
      while (__stlxr(v27 - 1, v16));
      [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
      goto LABEL_36;
    }
  }

  char v21 = mach_absolute_time();
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 + 32) + 392LL))( a1,  a2,  a3,  a4,  a5);
  uint64_t v22 = mach_absolute_time();
  int64_t v23 = vdupq_n_s64(1uLL);
  v23.i64[0] = v22 - v21;
  *(int64x2_t *)(v15 + 3696) = vaddq_s64(v23, *(int64x2_t *)(v15 + 3696));
  if (gCheckGLErrors)
  {
    check_errors(v15);
    if (gBreakOnError)
    {
      uint64_t v32 = *(unsigned int *)(v15 + 3404);
      if ((_DWORD)v32) {
        breakpoint_break(0LL, (volatile int *)0xFFFFFFFFLL, 3LL, v32, v15);
      }
    }
  }

  do
  {
    unsigned int v24 = __ldaxr(v16);
    unint64_t v25 = v24 - 1;
  }

  while (__stlxr(v25, v16));
  if (gCheckGLErrors) {
    uint64_t v26 = v25 < 1;
  }
  else {
    uint64_t v26 = 1;
  }
  if (!v26) {
    handle_opengl_thread_conflict((const void **)v15);
  }
}

void sub_23D78( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  if (a12) {
    free(a12);
  }
  _Unwind_Resume(exception_object);
}

void color_pointer(__GLIContextRec *a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5)
{
  uint64_t v10 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v10) {
    goto LABEL_12;
  }
  uint64_t v11 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v12 = v10[4];
    BOOL v13 = v12 >= (unint64_t)a1;
    else {
      id v14 = v10 + 1;
    }
    if (v13) {
      uint64_t v11 = (uint64_t)v10;
    }
    uint64_t v10 = (void *)*v14;
  }

  while (*v14);
  if (v11 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v11 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v11 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v15 = *(void *)(v11 + 40);
  uint64_t v16 = (unsigned int *)(v15 + 4640);
  do
  {
    unsigned int v17 = __ldaxr(v16);
    signed int v18 = v17 + 1;
  }

  while (__stlxr(v18, v16));
  if (gCheckGLErrors) {
    BOOL v19 = v18 <= 1;
  }
  else {
    BOOL v19 = 1;
  }
  if (v19)
  {
    id v48 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v47 = handle_opengl_thread_conflict((const void **)v15);
    id v48 = [(id)DYGetGLGuestAppClient(v47) waitOnGraphicsSemaphoreAssertions];
    if ((int)v48 >= 1)
    {
      do
LABEL_56:
        unsigned int v49 = __ldaxr(v16);
      while (__stlxr(v49 - 1, v16));
      __uint64_t v50 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v48) graphicsLockWaitQueue];
      dispatch_sync_f(v50, 0LL, (dispatch_function_t)do_nothing);
      (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, const void *))(*(void *)(v15 + 24) + 408LL))( a1,  a2,  a3,  a4,  a5);
      return;
    }
  }

  *(_BYTE *)(v15 + 483_Block_object_dispose(va, 8) = 1;
  v55[0] = 0LL;
  v55[1] = 0LL;
  int v56 = 0;
  if ([(id)DYGetGLGuestAppClient(v48) state] != (char *)&dword_0 + 1
    || (id v24 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand], !(_DWORD)v24))
  {
    int v25 = *(_DWORD *)(v15 + 2032);
    *(_DWORD *)(v15 + 124_Block_object_dispose(va, 8) = a2;
    *(_DWORD *)(v15 + 1244) = a3;
    *(_DWORD *)(v15 + 1252) = a4;
    *(void *)(v15 + 1232) = a5;
    *(_DWORD *)(v15 + 1240) = v25;
    GPUTools::FB::Encode( (uint64_t)v55,  81LL,  2 * (v25 == 0),  (uint64_t)"Cieit",  v20,  v21,  v22,  v23,  *(void *)v15);
    char v27 = byte_206EA9;
    if ((byte_206EA9 & 1) != 0) {
      breakpoint_break( (uint64_t)v55,  (volatile int *)((char *)&stru_20.filesize + 1),  1LL,  *(unsigned int *)(v15 + 3404),  v15);
    }
    uint64_t v28 = (uint64_t)[(id)DYGetGLGuestAppClient(v26) overrideFlags];
    if (!(v28 & 0x10 | v27 & 4))
    {
      uint64_t v29 = mach_absolute_time();
      (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, const void *))(*(void *)(v15 + 32) + 408LL))( a1,  a2,  a3,  a4,  a5);
      uint64_t v28 = mach_absolute_time();
      uint64_t v30 = v28 - v29;
      unint64_t v31 = g_DYTimebaseInfo;
      if (g_DYTimebaseInfo == *((_DWORD *)&g_DYTimebaseInfo + 1))
      {
        uint64_t v32 = v55[0];
        *((void *)v55[0] + 2) = v29;
        v32[3] = v30;
        if (!gCheckGLErrors) {
          goto LABEL_28;
        }
      }

      else
      {
        uint64_t v53 = __udivti3(g_DYTimebaseInfo * v30, (g_DYTimebaseInfo * (unsigned __int128)v30) >> 64);
        uint64_t v54 = v55[0];
        *((void *)v55[0] + 3) = v53;
        uint64_t v28 = __udivti3(v31 * v29, (v31 * (unsigned __int128)v29) >> 64);
        v54[2] = v28;
        if (!gCheckGLErrors) {
          goto LABEL_28;
        }
      }

      uint64_t v28 = check_errors(v15);
    }

{
  void *v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  void *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  signed int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  int v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  id v33;
  GPUTools::FB::Fbuf *v34;
  unsigned int v35;
  GPUTools::FB::Fbuf *v36;
  dispatch_queue_s *v37;
  uint64_t v38;
  GPUTools::FB::Stream *v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  signed int v44;
  BOOL v45;
  unsigned int v46;
  uint64_t v47;
  id v48;
  unsigned int v49;
  dispatch_queue_s *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void *v55[2];
  int v56;
  uint64_t v10 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v10) {
    goto LABEL_12;
  }
  uint64_t v11 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v12 = v10[4];
    BOOL v13 = v12 >= (unint64_t)a1;
    else {
      id v14 = v10 + 1;
    }
    if (v13) {
      uint64_t v11 = (uint64_t)v10;
    }
    uint64_t v10 = (void *)*v14;
  }

  while (*v14);
  if (v11 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v11 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v11 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v15 = *(void *)(v11 + 40);
  uint64_t v16 = (unsigned int *)(v15 + 4640);
  do
  {
    unsigned int v17 = __ldaxr(v16);
    signed int v18 = v17 + 1;
  }

  while (__stlxr(v18, v16));
  if (gCheckGLErrors) {
    BOOL v19 = v18 <= 1;
  }
  else {
    BOOL v19 = 1;
  }
  if (v19)
  {
    id v48 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v47 = handle_opengl_thread_conflict((const void **)v15);
    id v48 = [(id)DYGetGLGuestAppClient(v47) waitOnGraphicsSemaphoreAssertions];
    if ((int)v48 >= 1)
    {
      do
LABEL_56:
        unsigned int v49 = __ldaxr(v16);
      while (__stlxr(v49 - 1, v16));
      __uint64_t v50 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v48) graphicsLockWaitQueue];
      dispatch_sync_f(v50, 0LL, (dispatch_function_t)do_nothing);
      (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, const void *))(*(void *)(v15 + 24) + 408LL))( a1,  a2,  a3,  a4,  a5);
      return;
    }
  }

  *(_BYTE *)(v15 + 483_Block_object_dispose(va, 8) = 1;
  v55[0] = 0LL;
  v55[1] = 0LL;
  int v56 = 0;
  if ([(id)DYGetGLGuestAppClient(v48) state] != (char *)&dword_0 + 1
    || (id v24 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand], !(_DWORD)v24))
  {
    int v25 = *(_DWORD *)(v15 + 2032);
    *(_DWORD *)(v15 + 124_Block_object_dispose(va, 8) = a2;
    *(_DWORD *)(v15 + 1244) = a3;
    *(_DWORD *)(v15 + 1252) = a4;
    *(void *)(v15 + 1232) = a5;
    *(_DWORD *)(v15 + 1240) = v25;
    GPUTools::FB::Encode( (uint64_t)v55,  81LL,  2 * (v25 == 0),  (uint64_t)"Cieit",  v20,  v21,  v22,  v23,  *(void *)v15);
    char v27 = byte_206EA9;
    if ((byte_206EA9 & 1) != 0) {
      breakpoint_break( (uint64_t)v55,  (volatile int *)((char *)&stru_20.filesize + 1),  1LL,  *(unsigned int *)(v15 + 3404),  v15);
    }
    uint64_t v28 = (uint64_t)[(id)DYGetGLGuestAppClient(v26) overrideFlags];
    if (!(v28 & 0x10 | v27 & 4))
    {
      uint64_t v29 = mach_absolute_time();
      (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, const void *))(*(void *)(v15 + 32) + 408LL))( a1,  a2,  a3,  a4,  a5);
      uint64_t v28 = mach_absolute_time();
      uint64_t v30 = v28 - v29;
      unint64_t v31 = g_DYTimebaseInfo;
      if (g_DYTimebaseInfo == *((_DWORD *)&g_DYTimebaseInfo + 1))
      {
        uint64_t v32 = v55[0];
        *((void *)v55[0] + 2) = v29;
        v32[3] = v30;
        if (!gCheckGLErrors) {
          goto LABEL_28;
        }
      }

      else
      {
        uint64_t v53 = __udivti3(g_DYTimebaseInfo * v30, (g_DYTimebaseInfo * (unsigned __int128)v30) >> 64);
        uint64_t v54 = v55[0];
        *((void *)v55[0] + 3) = v53;
        uint64_t v28 = __udivti3(v31 * v29, (v31 * (unsigned __int128)v29) >> 64);
        v54[2] = v28;
        if (!gCheckGLErrors) {
          goto LABEL_28;
        }
      }

      uint64_t v28 = check_errors(v15);
    }

{
  void *v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  void *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  signed int v18;
  BOOL v19;
  id v20;
  unsigned int v21;
  signed int v22;
  BOOL v23;
  unsigned int v24;
  uint64_t v25;
  id v26;
  unsigned int v27;
  dispatch_queue_s *v28;
  uint64_t v29;
  uint64_t v10 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v10) {
    goto LABEL_12;
  }
  uint64_t v11 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v12 = v10[4];
    BOOL v13 = v12 >= (unint64_t)a1;
    else {
      id v14 = v10 + 1;
    }
    if (v13) {
      uint64_t v11 = (uint64_t)v10;
    }
    uint64_t v10 = (void *)*v14;
  }

  while (*v14);
  if (v11 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v11 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v11 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v15 = *(void *)(v11 + 40);
  uint64_t v16 = (unsigned int *)(v15 + 4640);
  do
  {
    unsigned int v17 = __ldaxr(v16);
    signed int v18 = v17 + 1;
  }

  while (__stlxr(v18, v16));
  if (gCheckGLErrors) {
    BOOL v19 = v18 <= 1;
  }
  else {
    BOOL v19 = 1;
  }
  if (v19)
  {
    uint64_t v26 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    int v25 = handle_opengl_thread_conflict((const void **)v15);
    uint64_t v26 = [(id)DYGetGLGuestAppClient(v25) waitOnGraphicsSemaphoreAssertions];
    if ((int)v26 >= 1)
    {
      do
LABEL_34:
        char v27 = __ldaxr(v16);
      while (__stlxr(v27 - 1, v16));
      uint64_t v28 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v26) graphicsLockWaitQueue];
      dispatch_sync_f(v28, 0LL, (dispatch_function_t)do_nothing);
LABEL_36:
      (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, const void *))(*(void *)(v15 + 24) + 408LL))( a1,  a2,  a3,  a4,  a5);
      return;
    }
  }

  *(_BYTE *)(v15 + 483_Block_object_dispose(va, 8) = 1;
  if ([(id)DYGetGLGuestAppClient(v26) state] == (char *)&dword_0 + 1)
  {
    uint64_t v20 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand];
    if ((_DWORD)v20)
    {
      do
        id v24 = __ldaxr(v16);
      while (__stlxr(v24 - 1, v16));
      [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
      goto LABEL_36;
    }
  }

  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, const void *))(*(void *)(v15 + 32) + 408LL))( a1,  a2,  a3,  a4,  a5);
  ++*(void *)(v15 + 3704);
  if (gCheckGLErrors)
  {
    check_errors(v15);
    if (gBreakOnError)
    {
      uint64_t v29 = *(unsigned int *)(v15 + 3404);
      if ((_DWORD)v29) {
        breakpoint_break(0LL, (volatile int *)0xFFFFFFFFLL, 3LL, v29, v15);
      }
    }
  }

  do
  {
    uint64_t v21 = __ldaxr(v16);
    uint64_t v22 = v21 - 1;
  }

  while (__stlxr(v22, v16));
  if (gCheckGLErrors) {
    uint64_t v23 = v22 < 1;
  }
  else {
    uint64_t v23 = 1;
  }
  if (!v23) {
    handle_opengl_thread_conflict((const void **)v15);
  }
}

{
  void *v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  void *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  signed int v18;
  BOOL v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  int64x2_t v23;
  unsigned int v24;
  signed int v25;
  BOOL v26;
  unsigned int v27;
  uint64_t v28;
  id v29;
  unsigned int v30;
  dispatch_queue_s *v31;
  uint64_t v32;
  uint64_t v10 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v10) {
    goto LABEL_12;
  }
  uint64_t v11 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v12 = v10[4];
    BOOL v13 = v12 >= (unint64_t)a1;
    else {
      id v14 = v10 + 1;
    }
    if (v13) {
      uint64_t v11 = (uint64_t)v10;
    }
    uint64_t v10 = (void *)*v14;
  }

  while (*v14);
  if (v11 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v11 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v11 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v15 = *(void *)(v11 + 40);
  uint64_t v16 = (unsigned int *)(v15 + 4640);
  do
  {
    unsigned int v17 = __ldaxr(v16);
    signed int v18 = v17 + 1;
  }

  while (__stlxr(v18, v16));
  if (gCheckGLErrors) {
    BOOL v19 = v18 <= 1;
  }
  else {
    BOOL v19 = 1;
  }
  if (v19)
  {
    uint64_t v29 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v28 = handle_opengl_thread_conflict((const void **)v15);
    uint64_t v29 = [(id)DYGetGLGuestAppClient(v28) waitOnGraphicsSemaphoreAssertions];
    if ((int)v29 >= 1)
    {
      do
LABEL_34:
        uint64_t v30 = __ldaxr(v16);
      while (__stlxr(v30 - 1, v16));
      unint64_t v31 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v29) graphicsLockWaitQueue];
      dispatch_sync_f(v31, 0LL, (dispatch_function_t)do_nothing);
LABEL_36:
      (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, const void *))(*(void *)(v15 + 24) + 408LL))( a1,  a2,  a3,  a4,  a5);
      return;
    }
  }

  *(_BYTE *)(v15 + 483_Block_object_dispose(va, 8) = 1;
  if ([(id)DYGetGLGuestAppClient(v29) state] == (char *)&dword_0 + 1)
  {
    uint64_t v20 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand];
    if ((_DWORD)v20)
    {
      do
        char v27 = __ldaxr(v16);
      while (__stlxr(v27 - 1, v16));
      [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
      goto LABEL_36;
    }
  }

  uint64_t v21 = mach_absolute_time();
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, const void *))(*(void *)(v15 + 32) + 408LL))( a1,  a2,  a3,  a4,  a5);
  uint64_t v22 = mach_absolute_time();
  uint64_t v23 = vdupq_n_s64(1uLL);
  v23.i64[0] = v22 - v21;
  *(int64x2_t *)(v15 + 3696) = vaddq_s64(v23, *(int64x2_t *)(v15 + 3696));
  if (gCheckGLErrors)
  {
    check_errors(v15);
    if (gBreakOnError)
    {
      uint64_t v32 = *(unsigned int *)(v15 + 3404);
      if ((_DWORD)v32) {
        breakpoint_break(0LL, (volatile int *)0xFFFFFFFFLL, 3LL, v32, v15);
      }
    }
  }

  do
  {
    id v24 = __ldaxr(v16);
    int v25 = v24 - 1;
  }

  while (__stlxr(v25, v16));
  if (gCheckGLErrors) {
    uint64_t v26 = v25 < 1;
  }
  else {
    uint64_t v26 = 1;
  }
  if (!v26) {
    handle_opengl_thread_conflict((const void **)v15);
  }
}

void sub_241E0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  if (a14) {
    free(a14);
  }
  _Unwind_Resume(exception_object);
}

void copy_tex_image2D( __GLIContextRec *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9)
{
  id v14 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v14) {
    goto LABEL_12;
  }
  uint64_t v15 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v16 = v14[4];
    BOOL v17 = v16 >= (unint64_t)a1;
    else {
      signed int v18 = v14 + 1;
    }
    if (v17) {
      uint64_t v15 = (uint64_t)v14;
    }
    id v14 = (void *)*v18;
  }

  while (*v18);
  if (v15 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v15 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v15 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v19 = *(void *)(v15 + 40);
  uint64_t v20 = (unsigned int *)(v19 + 4640);
  do
  {
    unsigned int v21 = __ldaxr(v20);
    signed int v22 = v21 + 1;
  }

  while (__stlxr(v22, v20));
  if (gCheckGLErrors) {
    BOOL v23 = v22 <= 1;
  }
  else {
    BOOL v23 = 1;
  }
  if (v23)
  {
    id v52 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v51 = handle_opengl_thread_conflict((const void **)v19);
    id v52 = [(id)DYGetGLGuestAppClient(v51) waitOnGraphicsSemaphoreAssertions];
    if ((int)v52 >= 1)
    {
      do
LABEL_57:
        unsigned int v53 = __ldaxr(v20);
      while (__stlxr(v53 - 1, v20));
      uint64_t v54 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v52) graphicsLockWaitQueue];
      dispatch_sync_f(v54, 0LL, (dispatch_function_t)do_nothing);
      (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void))(*(void *)(v19 + 24) + 432LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);
      return;
    }
  }

  *(_BYTE *)(v19 + 483_Block_object_dispose(va, 8) = 1;
  uint64_t v64 = 0LL;
  char v65 = 0LL;
  unsigned int v66 = 0;
  if ([(id)DYGetGLGuestAppClient(v52) state] != (char *)&dword_0 + 1
    || (id v24 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand], !(_DWORD)v24))
  {
    uint64_t v26 = (char *)v64;
    int v25 = v65;
    int64_t v27 = v65 - (_BYTE *)v64;
    unsigned int v28 = v66;
    unint64_t v29 = v66 - (v65 - (_BYTE *)v64);
    if (v29 > 0x57) {
      goto LABEL_24;
    }
    int v55 = (343 - v29) & 0xFFFFFF00;
    v66 += v55;
    uint64_t v26 = (char *)malloc(v55 + v28);
    uint64_t v64 = v26;
    if (v26)
    {
      if ((v26 & 3) == 0)
      {
        int v25 = &v26[v27];
LABEL_24:
        *((void *)v25 + 10) = 0LL;
        *((_OWORD *)v25 + 3) = 0u;
        *((_OWORD *)v25 + 4) = 0u;
        *((_OWORD *)v25 + 1) = 0u;
        *((_OWORD *)v25 + 2) = 0u;
        *(_OWORD *)int v25 = 0u;
        char v65 = v25 + 88;
        GPUTools::FB::Fbuf::align((char **)&v64);
        *((_DWORD *)v26 + 1) = 112;
        *((_DWORD *)v26 + _Block_object_dispose(va, 8) = 0;
        __uint64_t v63 = 0LL;
        uint64_t v30 = pthread_threadid_np(0LL, &v63);
        *((void *)v26 + 1) = v63;
        strcpy(v26 + 36, "Ceieiiiii");
        *((void *)v26 + 6) = *(void *)v19;
        *((_DWORD *)v26 + 14) = a2;
        *((_DWORD *)v26 + 15) = a3;
        *((_DWORD *)v26 + 16) = a4;
        *((_DWORD *)v26 + 17) = a5;
        *((_DWORD *)v26 + 1_Block_object_dispose(va, 8) = a6;
        *((_DWORD *)v26 + 19) = a7;
        *((_DWORD *)v26 + 20) = a8;
        *((_DWORD *)v26 + 21) = a9;
        char v31 = byte_206EC8;
        if ((byte_206EC8 & 1) != 0) {
          breakpoint_break((uint64_t)&v64, (volatile int *)&stru_68.sectname[8], 1LL, *(unsigned int *)(v19 + 3404), v19);
        }
        uint64_t v32 = (uint64_t)[(id)DYGetGLGuestAppClient(v30) overrideFlags];
        if (!(v32 & 0x10 | v31 & 4))
        {
          uint64_t v33 = mach_absolute_time();
          (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, int))(*(void *)(v19 + 32) + 432LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9);
          uint64_t v32 = mach_absolute_time();
          uint64_t v34 = v32 - v33;
          unint64_t v35 = g_DYTimebaseInfo;
          if (g_DYTimebaseInfo == *((_DWORD *)&g_DYTimebaseInfo + 1))
          {
            unsigned int v36 = v64;
            *((void *)v64 + 2) = v33;
            v36[3] = v34;
            if (!gCheckGLErrors) {
              goto LABEL_29;
            }
          }

          else
          {
            uint64_t v58 = __udivti3(g_DYTimebaseInfo * v34, (g_DYTimebaseInfo * (unsigned __int128)v34) >> 64);
            unsigned int v59 = v64;
            *((void *)v64 + 3) = v58;
            uint64_t v32 = __udivti3(v35 * v33, (v35 * (unsigned __int128)v33) >> 64);
            v59[2] = v32;
            if (!gCheckGLErrors) {
              goto LABEL_29;
            }
          }

          uint64_t v32 = check_errors(v19);
        }

{
  void *v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  void *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  signed int v22;
  BOOL v23;
  id v24;
  char *v25;
  char *v26;
  int64_t v27;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void *v36;
  id v37;
  GPUTools::FB::Fbuf *v38;
  unsigned int v39;
  GPUTools::FB::Fbuf *v40;
  dispatch_queue_s *v41;
  uint64_t v42;
  GPUTools::FB::Stream *v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  signed int v48;
  BOOL v49;
  unsigned int v50;
  uint64_t v51;
  id v52;
  unsigned int v53;
  dispatch_queue_s *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  __uint64_t v63;
  void *v64;
  char *v65;
  unsigned int v66;
  id v14 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v14) {
    goto LABEL_12;
  }
  uint64_t v15 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v16 = v14[4];
    BOOL v17 = v16 >= (unint64_t)a1;
    else {
      signed int v18 = v14 + 1;
    }
    if (v17) {
      uint64_t v15 = (uint64_t)v14;
    }
    id v14 = (void *)*v18;
  }

  while (*v18);
  if (v15 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v15 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v15 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v19 = *(void *)(v15 + 40);
  uint64_t v20 = (unsigned int *)(v19 + 4640);
  do
  {
    unsigned int v21 = __ldaxr(v20);
    signed int v22 = v21 + 1;
  }

  while (__stlxr(v22, v20));
  if (gCheckGLErrors) {
    BOOL v23 = v22 <= 1;
  }
  else {
    BOOL v23 = 1;
  }
  if (v23)
  {
    id v52 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v51 = handle_opengl_thread_conflict((const void **)v19);
    id v52 = [(id)DYGetGLGuestAppClient(v51) waitOnGraphicsSemaphoreAssertions];
    if ((int)v52 >= 1)
    {
      do
LABEL_57:
        unsigned int v53 = __ldaxr(v20);
      while (__stlxr(v53 - 1, v20));
      uint64_t v54 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v52) graphicsLockWaitQueue];
      dispatch_sync_f(v54, 0LL, (dispatch_function_t)do_nothing);
      (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void))(*(void *)(v19 + 24) + 432LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);
      return;
    }
  }

  *(_BYTE *)(v19 + 483_Block_object_dispose(va, 8) = 1;
  uint64_t v64 = 0LL;
  char v65 = 0LL;
  unsigned int v66 = 0;
  if ([(id)DYGetGLGuestAppClient(v52) state] != (char *)&dword_0 + 1
    || (id v24 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand], !(_DWORD)v24))
  {
    uint64_t v26 = (char *)v64;
    int v25 = v65;
    int64_t v27 = v65 - (_BYTE *)v64;
    unsigned int v28 = v66;
    unint64_t v29 = v66 - (v65 - (_BYTE *)v64);
    if (v29 > 0x57) {
      goto LABEL_24;
    }
    int v55 = (343 - v29) & 0xFFFFFF00;
    v66 += v55;
    uint64_t v26 = (char *)malloc(v55 + v28);
    uint64_t v64 = v26;
    if (v26)
    {
      if ((v26 & 3) == 0)
      {
        int v25 = &v26[v27];
LABEL_24:
        *((void *)v25 + 10) = 0LL;
        *((_OWORD *)v25 + 3) = 0u;
        *((_OWORD *)v25 + 4) = 0u;
        *((_OWORD *)v25 + 1) = 0u;
        *((_OWORD *)v25 + 2) = 0u;
        *(_OWORD *)int v25 = 0u;
        char v65 = v25 + 88;
        GPUTools::FB::Fbuf::align((char **)&v64);
        *((_DWORD *)v26 + 1) = 112;
        *((_DWORD *)v26 + _Block_object_dispose(va, 8) = 0;
        __uint64_t v63 = 0LL;
        uint64_t v30 = pthread_threadid_np(0LL, &v63);
        *((void *)v26 + 1) = v63;
        strcpy(v26 + 36, "Ceieiiiii");
        *((void *)v26 + 6) = *(void *)v19;
        *((_DWORD *)v26 + 14) = a2;
        *((_DWORD *)v26 + 15) = a3;
        *((_DWORD *)v26 + 16) = a4;
        *((_DWORD *)v26 + 17) = a5;
        *((_DWORD *)v26 + 1_Block_object_dispose(va, 8) = a6;
        *((_DWORD *)v26 + 19) = a7;
        *((_DWORD *)v26 + 20) = a8;
        *((_DWORD *)v26 + 21) = a9;
        char v31 = byte_206EC8;
        if ((byte_206EC8 & 1) != 0) {
          breakpoint_break((uint64_t)&v64, (volatile int *)&stru_68.sectname[8], 1LL, *(unsigned int *)(v19 + 3404), v19);
        }
        uint64_t v32 = (uint64_t)[(id)DYGetGLGuestAppClient(v30) overrideFlags];
        if (!(v32 & 0x10 | v31 & 4))
        {
          uint64_t v33 = mach_absolute_time();
          (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, int))(*(void *)(v19 + 32) + 432LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9);
          uint64_t v32 = mach_absolute_time();
          uint64_t v34 = v32 - v33;
          unint64_t v35 = g_DYTimebaseInfo;
          if (g_DYTimebaseInfo == *((_DWORD *)&g_DYTimebaseInfo + 1))
          {
            unsigned int v36 = v64;
            *((void *)v64 + 2) = v33;
            v36[3] = v34;
            if (!gCheckGLErrors) {
              goto LABEL_29;
            }
          }

          else
          {
            uint64_t v58 = __udivti3(g_DYTimebaseInfo * v34, (g_DYTimebaseInfo * (unsigned __int128)v34) >> 64);
            unsigned int v59 = v64;
            *((void *)v64 + 3) = v58;
            uint64_t v32 = __udivti3(v35 * v33, (v35 * (unsigned __int128)v33) >> 64);
            v59[2] = v32;
            if (!gCheckGLErrors) {
              goto LABEL_29;
            }
          }

          uint64_t v32 = check_errors(v19);
        }

void sub_24750( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  if (a14) {
    free(a14);
  }
  _Unwind_Resume(exception_object);
}

void copy_tex_sub_image2D( __GLIContextRec *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9)
{
  id v14 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v14) {
    goto LABEL_12;
  }
  uint64_t v15 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v16 = v14[4];
    BOOL v17 = v16 >= (unint64_t)a1;
    else {
      signed int v18 = v14 + 1;
    }
    if (v17) {
      uint64_t v15 = (uint64_t)v14;
    }
    id v14 = (void *)*v18;
  }

  while (*v18);
  if (v15 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v15 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v15 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v19 = *(void *)(v15 + 40);
  uint64_t v20 = (unsigned int *)(v19 + 4640);
  do
  {
    unsigned int v21 = __ldaxr(v20);
    signed int v22 = v21 + 1;
  }

  while (__stlxr(v22, v20));
  if (gCheckGLErrors) {
    BOOL v23 = v22 <= 1;
  }
  else {
    BOOL v23 = 1;
  }
  if (v23)
  {
    id v52 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v51 = handle_opengl_thread_conflict((const void **)v19);
    id v52 = [(id)DYGetGLGuestAppClient(v51) waitOnGraphicsSemaphoreAssertions];
    if ((int)v52 >= 1)
    {
      do
LABEL_57:
        unsigned int v53 = __ldaxr(v20);
      while (__stlxr(v53 - 1, v20));
      uint64_t v54 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v52) graphicsLockWaitQueue];
      dispatch_sync_f(v54, 0LL, (dispatch_function_t)do_nothing);
      (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void))(*(void *)(v19 + 24) + 448LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);
      return;
    }
  }

  *(_BYTE *)(v19 + 483_Block_object_dispose(va, 8) = 1;
  uint64_t v64 = 0LL;
  char v65 = 0LL;
  unsigned int v66 = 0;
  if ([(id)DYGetGLGuestAppClient(v52) state] != (char *)&dword_0 + 1
    || (id v24 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand], !(_DWORD)v24))
  {
    uint64_t v26 = (char *)v64;
    int v25 = v65;
    int64_t v27 = v65 - (_BYTE *)v64;
    unsigned int v28 = v66;
    unint64_t v29 = v66 - (v65 - (_BYTE *)v64);
    if (v29 > 0x57) {
      goto LABEL_24;
    }
    int v55 = (343 - v29) & 0xFFFFFF00;
    v66 += v55;
    uint64_t v26 = (char *)malloc(v55 + v28);
    uint64_t v64 = v26;
    if (v26)
    {
      if ((v26 & 3) == 0)
      {
        int v25 = &v26[v27];
LABEL_24:
        *((void *)v25 + 10) = 0LL;
        *((_OWORD *)v25 + 3) = 0u;
        *((_OWORD *)v25 + 4) = 0u;
        *((_OWORD *)v25 + 1) = 0u;
        *((_OWORD *)v25 + 2) = 0u;
        *(_OWORD *)int v25 = 0u;
        char v65 = v25 + 88;
        GPUTools::FB::Fbuf::align((char **)&v64);
        *((_DWORD *)v26 + 1) = 114;
        *((_DWORD *)v26 + _Block_object_dispose(va, 8) = 0;
        __uint64_t v63 = 0LL;
        uint64_t v30 = pthread_threadid_np(0LL, &v63);
        *((void *)v26 + 1) = v63;
        strcpy(v26 + 36, "Ceiiiiiii");
        *((void *)v26 + 6) = *(void *)v19;
        *((_DWORD *)v26 + 14) = a2;
        *((_DWORD *)v26 + 15) = a3;
        *((_DWORD *)v26 + 16) = a4;
        *((_DWORD *)v26 + 17) = a5;
        *((_DWORD *)v26 + 1_Block_object_dispose(va, 8) = a6;
        *((_DWORD *)v26 + 19) = a7;
        *((_DWORD *)v26 + 20) = a8;
        *((_DWORD *)v26 + 21) = a9;
        char v31 = byte_206ECA;
        if ((byte_206ECA & 1) != 0) {
          breakpoint_break( (uint64_t)&v64,  (volatile int *)&stru_68.sectname[10],  1LL,  *(unsigned int *)(v19 + 3404),  v19);
        }
        uint64_t v32 = (uint64_t)[(id)DYGetGLGuestAppClient(v30) overrideFlags];
        if (!(v32 & 0x10 | v31 & 4))
        {
          uint64_t v33 = mach_absolute_time();
          (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, int))(*(void *)(v19 + 32) + 448LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9);
          uint64_t v32 = mach_absolute_time();
          uint64_t v34 = v32 - v33;
          unint64_t v35 = g_DYTimebaseInfo;
          if (g_DYTimebaseInfo == *((_DWORD *)&g_DYTimebaseInfo + 1))
          {
            unsigned int v36 = v64;
            *((void *)v64 + 2) = v33;
            v36[3] = v34;
            if (!gCheckGLErrors) {
              goto LABEL_29;
            }
          }

          else
          {
            uint64_t v58 = __udivti3(g_DYTimebaseInfo * v34, (g_DYTimebaseInfo * (unsigned __int128)v34) >> 64);
            unsigned int v59 = v64;
            *((void *)v64 + 3) = v58;
            uint64_t v32 = __udivti3(v35 * v33, (v35 * (unsigned __int128)v33) >> 64);
            v59[2] = v32;
            if (!gCheckGLErrors) {
              goto LABEL_29;
            }
          }

          uint64_t v32 = check_errors(v19);
        }

{
  void *v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  void *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  signed int v22;
  BOOL v23;
  id v24;
  char *v25;
  char *v26;
  int64_t v27;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void *v36;
  id v37;
  GPUTools::FB::Fbuf *v38;
  unsigned int v39;
  GPUTools::FB::Fbuf *v40;
  dispatch_queue_s *v41;
  uint64_t v42;
  GPUTools::FB::Stream *v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  signed int v48;
  BOOL v49;
  unsigned int v50;
  uint64_t v51;
  id v52;
  unsigned int v53;
  dispatch_queue_s *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  __uint64_t v63;
  void *v64;
  char *v65;
  unsigned int v66;
  id v14 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v14) {
    goto LABEL_12;
  }
  uint64_t v15 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v16 = v14[4];
    BOOL v17 = v16 >= (unint64_t)a1;
    else {
      signed int v18 = v14 + 1;
    }
    if (v17) {
      uint64_t v15 = (uint64_t)v14;
    }
    id v14 = (void *)*v18;
  }

  while (*v18);
  if (v15 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v15 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v15 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v19 = *(void *)(v15 + 40);
  uint64_t v20 = (unsigned int *)(v19 + 4640);
  do
  {
    unsigned int v21 = __ldaxr(v20);
    signed int v22 = v21 + 1;
  }

  while (__stlxr(v22, v20));
  if (gCheckGLErrors) {
    BOOL v23 = v22 <= 1;
  }
  else {
    BOOL v23 = 1;
  }
  if (v23)
  {
    id v52 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v51 = handle_opengl_thread_conflict((const void **)v19);
    id v52 = [(id)DYGetGLGuestAppClient(v51) waitOnGraphicsSemaphoreAssertions];
    if ((int)v52 >= 1)
    {
      do
LABEL_57:
        unsigned int v53 = __ldaxr(v20);
      while (__stlxr(v53 - 1, v20));
      uint64_t v54 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v52) graphicsLockWaitQueue];
      dispatch_sync_f(v54, 0LL, (dispatch_function_t)do_nothing);
      (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void))(*(void *)(v19 + 24) + 448LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);
      return;
    }
  }

  *(_BYTE *)(v19 + 483_Block_object_dispose(va, 8) = 1;
  uint64_t v64 = 0LL;
  char v65 = 0LL;
  unsigned int v66 = 0;
  if ([(id)DYGetGLGuestAppClient(v52) state] != (char *)&dword_0 + 1
    || (id v24 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand], !(_DWORD)v24))
  {
    uint64_t v26 = (char *)v64;
    int v25 = v65;
    int64_t v27 = v65 - (_BYTE *)v64;
    unsigned int v28 = v66;
    unint64_t v29 = v66 - (v65 - (_BYTE *)v64);
    if (v29 > 0x57) {
      goto LABEL_24;
    }
    int v55 = (343 - v29) & 0xFFFFFF00;
    v66 += v55;
    uint64_t v26 = (char *)malloc(v55 + v28);
    uint64_t v64 = v26;
    if (v26)
    {
      if ((v26 & 3) == 0)
      {
        int v25 = &v26[v27];
LABEL_24:
        *((void *)v25 + 10) = 0LL;
        *((_OWORD *)v25 + 3) = 0u;
        *((_OWORD *)v25 + 4) = 0u;
        *((_OWORD *)v25 + 1) = 0u;
        *((_OWORD *)v25 + 2) = 0u;
        *(_OWORD *)int v25 = 0u;
        char v65 = v25 + 88;
        GPUTools::FB::Fbuf::align((char **)&v64);
        *((_DWORD *)v26 + 1) = 114;
        *((_DWORD *)v26 + _Block_object_dispose(va, 8) = 0;
        __uint64_t v63 = 0LL;
        uint64_t v30 = pthread_threadid_np(0LL, &v63);
        *((void *)v26 + 1) = v63;
        strcpy(v26 + 36, "Ceiiiiiii");
        *((void *)v26 + 6) = *(void *)v19;
        *((_DWORD *)v26 + 14) = a2;
        *((_DWORD *)v26 + 15) = a3;
        *((_DWORD *)v26 + 16) = a4;
        *((_DWORD *)v26 + 17) = a5;
        *((_DWORD *)v26 + 1_Block_object_dispose(va, 8) = a6;
        *((_DWORD *)v26 + 19) = a7;
        *((_DWORD *)v26 + 20) = a8;
        *((_DWORD *)v26 + 21) = a9;
        char v31 = byte_206ECA;
        if ((byte_206ECA & 1) != 0) {
          breakpoint_break( (uint64_t)&v64,  (volatile int *)&stru_68.sectname[10],  1LL,  *(unsigned int *)(v19 + 3404),  v19);
        }
        uint64_t v32 = (uint64_t)[(id)DYGetGLGuestAppClient(v30) overrideFlags];
        if (!(v32 & 0x10 | v31 & 4))
        {
          uint64_t v33 = mach_absolute_time();
          (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, int))(*(void *)(v19 + 32) + 448LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9);
          uint64_t v32 = mach_absolute_time();
          uint64_t v34 = v32 - v33;
          unint64_t v35 = g_DYTimebaseInfo;
          if (g_DYTimebaseInfo == *((_DWORD *)&g_DYTimebaseInfo + 1))
          {
            unsigned int v36 = v64;
            *((void *)v64 + 2) = v33;
            v36[3] = v34;
            if (!gCheckGLErrors) {
              goto LABEL_29;
            }
          }

          else
          {
            uint64_t v58 = __udivti3(g_DYTimebaseInfo * v34, (g_DYTimebaseInfo * (unsigned __int128)v34) >> 64);
            unsigned int v59 = v64;
            *((void *)v64 + 3) = v58;
            uint64_t v32 = __udivti3(v35 * v33, (v35 * (unsigned __int128)v33) >> 64);
            v59[2] = v32;
            if (!gCheckGLErrors) {
              goto LABEL_29;
            }
          }

          uint64_t v32 = check_errors(v19);
        }

void sub_24CC4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  if (a14) {
    free(a14);
  }
  _Unwind_Resume(exception_object);
}

void cull_face(__GLIContextRec *a1, uint64_t a2)
{
  unint64_t v4 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v4) {
    goto LABEL_12;
  }
  uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v6 = v4[4];
    BOOL v7 = v6 >= (unint64_t)a1;
    else {
      unint64_t v8 = v4 + 1;
    }
    if (v7) {
      uint64_t v5 = (uint64_t)v4;
    }
    unint64_t v4 = (void *)*v8;
  }

  while (*v8);
  if (v5 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v5 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v9 = *(void *)(v5 + 40);
  uint64_t v10 = (unsigned int *)(v9 + 4640);
  do
  {
    unsigned int v11 = __ldaxr(v10);
    signed int v12 = v11 + 1;
  }

  while (__stlxr(v12, v10));
  if (gCheckGLErrors) {
    BOOL v13 = v12 <= 1;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13)
  {
    id v42 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v41 = handle_opengl_thread_conflict((const void **)v9);
    id v42 = [(id)DYGetGLGuestAppClient(v41) waitOnGraphicsSemaphoreAssertions];
    if ((int)v42 >= 1)
    {
      do
LABEL_57:
        unsigned int v43 = __ldaxr(v10);
      while (__stlxr(v43 - 1, v10));
      signed int v44 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v42) graphicsLockWaitQueue];
      dispatch_sync_f(v44, 0LL, (dispatch_function_t)do_nothing);
      (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 456LL))(a1, a2);
      return;
    }
  }

  *(_BYTE *)(v9 + 483_Block_object_dispose(va, 8) = 1;
  uint64_t v51 = 0LL;
  id v52 = 0LL;
  unsigned int v53 = 0;
  if ([(id)DYGetGLGuestAppClient(v42) state] != (char *)&dword_0 + 1
    || (id v14 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand], !(_DWORD)v14))
  {
    unint64_t v16 = (char *)v51;
    uint64_t v15 = v52;
    int64_t v17 = v52 - (_BYTE *)v51;
    unsigned int v18 = v53;
    unint64_t v19 = v53 - (v52 - (_BYTE *)v51);
    if (v19 > 0x33) {
      goto LABEL_24;
    }
    int v45 = (307 - v19) & 0xFFFFFF00;
    v53 += v45;
    unint64_t v16 = (char *)malloc(v45 + v18);
    uint64_t v51 = v16;
    if (v16)
    {
      if ((v16 & 3) == 0)
      {
        uint64_t v15 = &v16[v17];
LABEL_24:
        *((_DWORD *)v15 + 12) = 0;
        *((_OWORD *)v15 + 1) = 0u;
        *((_OWORD *)v15 + 2) = 0u;
        *(_OWORD *)uint64_t v15 = 0u;
        id v52 = v15 + 52;
        GPUTools::FB::Fbuf::align((char **)&v51);
        *((_DWORD *)v16 + 1) = 118;
        *((_DWORD *)v16 + _Block_object_dispose(va, 8) = 0;
        __uint64_t v50 = 0LL;
        uint64_t v20 = pthread_threadid_np(0LL, &v50);
        *((void *)v16 + 1) = v50;
        strcpy(v16 + 36, "Ce");
        *((void *)v16 + 5) = *(void *)v9;
        *((_DWORD *)v16 + 12) = a2;
        char v21 = byte_206ECE;
        if ((byte_206ECE & 1) != 0) {
          breakpoint_break((uint64_t)&v51, (volatile int *)&stru_68.sectname[14], 1LL, *(unsigned int *)(v9 + 3404), v9);
        }
        uint64_t v22 = (uint64_t)[(id)DYGetGLGuestAppClient(v20) overrideFlags];
        if (!(v22 & 0x10 | v21 & 4))
        {
          uint64_t v23 = mach_absolute_time();
          (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 32) + 456LL))(a1, a2);
          uint64_t v22 = mach_absolute_time();
          uint64_t v24 = v22 - v23;
          unint64_t v25 = g_DYTimebaseInfo;
          if (g_DYTimebaseInfo == *((_DWORD *)&g_DYTimebaseInfo + 1))
          {
            uint64_t v26 = v51;
            *((void *)v51 + 2) = v23;
            v26[3] = v24;
            if (!gCheckGLErrors) {
              goto LABEL_29;
            }
          }

          else
          {
            uint64_t v48 = __udivti3(g_DYTimebaseInfo * v24, (g_DYTimebaseInfo * (unsigned __int128)v24) >> 64);
            BOOL v49 = v51;
            *((void *)v51 + 3) = v48;
            uint64_t v22 = __udivti3(v25 * v23, (v25 * (unsigned __int128)v23) >> 64);
            v49[2] = v22;
            if (!gCheckGLErrors) {
              goto LABEL_29;
            }
          }

          uint64_t v22 = check_errors(v9);
        }

{
  void *v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  void *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  signed int v12;
  BOOL v13;
  id v14;
  char *v15;
  char *v16;
  int64_t v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  id v27;
  GPUTools::FB::Fbuf *v28;
  unsigned int v29;
  GPUTools::FB::Fbuf *v30;
  dispatch_queue_s *v31;
  uint64_t v32;
  GPUTools::FB::Stream *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  signed int v38;
  BOOL v39;
  unsigned int v40;
  uint64_t v41;
  id v42;
  unsigned int v43;
  dispatch_queue_s *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  __uint64_t v50;
  void *v51;
  char *v52;
  unsigned int v53;
  unint64_t v4 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v4) {
    goto LABEL_12;
  }
  uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v6 = v4[4];
    BOOL v7 = v6 >= (unint64_t)a1;
    else {
      unint64_t v8 = v4 + 1;
    }
    if (v7) {
      uint64_t v5 = (uint64_t)v4;
    }
    unint64_t v4 = (void *)*v8;
  }

  while (*v8);
  if (v5 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v5 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v9 = *(void *)(v5 + 40);
  uint64_t v10 = (unsigned int *)(v9 + 4640);
  do
  {
    unsigned int v11 = __ldaxr(v10);
    signed int v12 = v11 + 1;
  }

  while (__stlxr(v12, v10));
  if (gCheckGLErrors) {
    BOOL v13 = v12 <= 1;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13)
  {
    id v42 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v41 = handle_opengl_thread_conflict((const void **)v9);
    id v42 = [(id)DYGetGLGuestAppClient(v41) waitOnGraphicsSemaphoreAssertions];
    if ((int)v42 >= 1)
    {
      do
LABEL_57:
        unsigned int v43 = __ldaxr(v10);
      while (__stlxr(v43 - 1, v10));
      signed int v44 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v42) graphicsLockWaitQueue];
      dispatch_sync_f(v44, 0LL, (dispatch_function_t)do_nothing);
      (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 456LL))(a1, a2);
      return;
    }
  }

  *(_BYTE *)(v9 + 483_Block_object_dispose(va, 8) = 1;
  uint64_t v51 = 0LL;
  id v52 = 0LL;
  unsigned int v53 = 0;
  if ([(id)DYGetGLGuestAppClient(v42) state] != (char *)&dword_0 + 1
    || (id v14 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand], !(_DWORD)v14))
  {
    unint64_t v16 = (char *)v51;
    uint64_t v15 = v52;
    int64_t v17 = v52 - (_BYTE *)v51;
    unsigned int v18 = v53;
    unint64_t v19 = v53 - (v52 - (_BYTE *)v51);
    if (v19 > 0x33) {
      goto LABEL_24;
    }
    int v45 = (307 - v19) & 0xFFFFFF00;
    v53 += v45;
    unint64_t v16 = (char *)malloc(v45 + v18);
    uint64_t v51 = v16;
    if (v16)
    {
      if ((v16 & 3) == 0)
      {
        uint64_t v15 = &v16[v17];
LABEL_24:
        *((_DWORD *)v15 + 12) = 0;
        *((_OWORD *)v15 + 1) = 0u;
        *((_OWORD *)v15 + 2) = 0u;
        *(_OWORD *)uint64_t v15 = 0u;
        id v52 = v15 + 52;
        GPUTools::FB::Fbuf::align((char **)&v51);
        *((_DWORD *)v16 + 1) = 118;
        *((_DWORD *)v16 + _Block_object_dispose(va, 8) = 0;
        __uint64_t v50 = 0LL;
        uint64_t v20 = pthread_threadid_np(0LL, &v50);
        *((void *)v16 + 1) = v50;
        strcpy(v16 + 36, "Ce");
        *((void *)v16 + 5) = *(void *)v9;
        *((_DWORD *)v16 + 12) = a2;
        char v21 = byte_206ECE;
        if ((byte_206ECE & 1) != 0) {
          breakpoint_break((uint64_t)&v51, (volatile int *)&stru_68.sectname[14], 1LL, *(unsigned int *)(v9 + 3404), v9);
        }
        uint64_t v22 = (uint64_t)[(id)DYGetGLGuestAppClient(v20) overrideFlags];
        if (!(v22 & 0x10 | v21 & 4))
        {
          uint64_t v23 = mach_absolute_time();
          (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 32) + 456LL))(a1, a2);
          uint64_t v22 = mach_absolute_time();
          uint64_t v24 = v22 - v23;
          unint64_t v25 = g_DYTimebaseInfo;
          if (g_DYTimebaseInfo == *((_DWORD *)&g_DYTimebaseInfo + 1))
          {
            uint64_t v26 = v51;
            *((void *)v51 + 2) = v23;
            v26[3] = v24;
            if (!gCheckGLErrors) {
              goto LABEL_29;
            }
          }

          else
          {
            uint64_t v48 = __udivti3(g_DYTimebaseInfo * v24, (g_DYTimebaseInfo * (unsigned __int128)v24) >> 64);
            BOOL v49 = v51;
            *((void *)v51 + 3) = v48;
            uint64_t v22 = __udivti3(v25 * v23, (v25 * (unsigned __int128)v23) >> 64);
            v49[2] = v22;
            if (!gCheckGLErrors) {
              goto LABEL_29;
            }
          }

          uint64_t v22 = check_errors(v9);
        }

{
  void *v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  void *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  signed int v12;
  BOOL v13;
  id v14;
  unsigned int v15;
  signed int v16;
  BOOL v17;
  unsigned int v18;
  uint64_t v19;
  id v20;
  unsigned int v21;
  dispatch_queue_s *v22;
  uint64_t v23;
  unint64_t v4 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v4) {
    goto LABEL_12;
  }
  uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v6 = v4[4];
    BOOL v7 = v6 >= (unint64_t)a1;
    else {
      unint64_t v8 = v4 + 1;
    }
    if (v7) {
      uint64_t v5 = (uint64_t)v4;
    }
    unint64_t v4 = (void *)*v8;
  }

  while (*v8);
  if (v5 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v5 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v9 = *(void *)(v5 + 40);
  uint64_t v10 = (unsigned int *)(v9 + 4640);
  do
  {
    unsigned int v11 = __ldaxr(v10);
    signed int v12 = v11 + 1;
  }

  while (__stlxr(v12, v10));
  if (gCheckGLErrors) {
    BOOL v13 = v12 <= 1;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13)
  {
    uint64_t v20 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    unint64_t v19 = handle_opengl_thread_conflict((const void **)v9);
    uint64_t v20 = [(id)DYGetGLGuestAppClient(v19) waitOnGraphicsSemaphoreAssertions];
    if ((int)v20 >= 1)
    {
      do
LABEL_34:
        char v21 = __ldaxr(v10);
      while (__stlxr(v21 - 1, v10));
      uint64_t v22 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v20) graphicsLockWaitQueue];
      dispatch_sync_f(v22, 0LL, (dispatch_function_t)do_nothing);
LABEL_36:
      (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 456LL))(a1, a2);
      return;
    }
  }

  *(_BYTE *)(v9 + 483_Block_object_dispose(va, 8) = 1;
  if ([(id)DYGetGLGuestAppClient(v20) state] == (char *)&dword_0 + 1)
  {
    id v14 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand];
    if ((_DWORD)v14)
    {
      do
        unsigned int v18 = __ldaxr(v10);
      while (__stlxr(v18 - 1, v10));
      [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
      goto LABEL_36;
    }
  }

  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 32) + 456LL))(a1, a2);
  ++*(void *)(v9 + 3704);
  if (gCheckGLErrors)
  {
    check_errors(v9);
    if (gBreakOnError)
    {
      uint64_t v23 = *(unsigned int *)(v9 + 3404);
      if ((_DWORD)v23) {
        breakpoint_break(0LL, (volatile int *)0xFFFFFFFFLL, 3LL, v23, v9);
      }
    }
  }

  do
  {
    uint64_t v15 = __ldaxr(v10);
    unint64_t v16 = v15 - 1;
  }

  while (__stlxr(v16, v10));
  if (gCheckGLErrors) {
    int64_t v17 = v16 < 1;
  }
  else {
    int64_t v17 = 1;
  }
  if (!v17) {
    handle_opengl_thread_conflict((const void **)v9);
  }
}

{
  void *v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  void *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  signed int v12;
  BOOL v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  int64x2_t v17;
  unsigned int v18;
  signed int v19;
  BOOL v20;
  unsigned int v21;
  uint64_t v22;
  id v23;
  unsigned int v24;
  dispatch_queue_s *v25;
  uint64_t v26;
  unint64_t v4 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v4) {
    goto LABEL_12;
  }
  uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v6 = v4[4];
    BOOL v7 = v6 >= (unint64_t)a1;
    else {
      unint64_t v8 = v4 + 1;
    }
    if (v7) {
      uint64_t v5 = (uint64_t)v4;
    }
    unint64_t v4 = (void *)*v8;
  }

  while (*v8);
  if (v5 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v5 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v9 = *(void *)(v5 + 40);
  uint64_t v10 = (unsigned int *)(v9 + 4640);
  do
  {
    unsigned int v11 = __ldaxr(v10);
    signed int v12 = v11 + 1;
  }

  while (__stlxr(v12, v10));
  if (gCheckGLErrors) {
    BOOL v13 = v12 <= 1;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13)
  {
    uint64_t v23 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v22 = handle_opengl_thread_conflict((const void **)v9);
    uint64_t v23 = [(id)DYGetGLGuestAppClient(v22) waitOnGraphicsSemaphoreAssertions];
    if ((int)v23 >= 1)
    {
      do
LABEL_34:
        uint64_t v24 = __ldaxr(v10);
      while (__stlxr(v24 - 1, v10));
      unint64_t v25 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v23) graphicsLockWaitQueue];
      dispatch_sync_f(v25, 0LL, (dispatch_function_t)do_nothing);
LABEL_36:
      (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 456LL))(a1, a2);
      return;
    }
  }

  *(_BYTE *)(v9 + 483_Block_object_dispose(va, 8) = 1;
  if ([(id)DYGetGLGuestAppClient(v23) state] == (char *)&dword_0 + 1)
  {
    id v14 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand];
    if ((_DWORD)v14)
    {
      do
        char v21 = __ldaxr(v10);
      while (__stlxr(v21 - 1, v10));
      [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
      goto LABEL_36;
    }
  }

  uint64_t v15 = mach_absolute_time();
  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 32) + 456LL))(a1, a2);
  unint64_t v16 = mach_absolute_time();
  int64_t v17 = vdupq_n_s64(1uLL);
  v17.i64[0] = v16 - v15;
  *(int64x2_t *)(v9 + 3696) = vaddq_s64(v17, *(int64x2_t *)(v9 + 3696));
  if (gCheckGLErrors)
  {
    check_errors(v9);
    if (gBreakOnError)
    {
      uint64_t v26 = *(unsigned int *)(v9 + 3404);
      if ((_DWORD)v26) {
        breakpoint_break(0LL, (volatile int *)0xFFFFFFFFLL, 3LL, v26, v9);
      }
    }
  }

  do
  {
    unsigned int v18 = __ldaxr(v10);
    unint64_t v19 = v18 - 1;
  }

  while (__stlxr(v19, v10));
  if (gCheckGLErrors) {
    uint64_t v20 = v19 < 1;
  }
  else {
    uint64_t v20 = 1;
  }
  if (!v20) {
    handle_opengl_thread_conflict((const void **)v9);
  }
}

void sub_25190( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  if (a12) {
    free(a12);
  }
  _Unwind_Resume(exception_object);
}

void delete_textures(__GLIContextRec *a1, volatile int *a2, const unsigned int *a3)
{
  unint64_t v6 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v6) {
    goto LABEL_12;
  }
  uint64_t v7 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v8 = v6[4];
    BOOL v9 = v8 >= (unint64_t)a1;
    else {
      uint64_t v10 = v6 + 1;
    }
    if (v9) {
      uint64_t v7 = (uint64_t)v6;
    }
    unint64_t v6 = (void *)*v10;
  }

  while (*v10);
  if (v7 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v7 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v7 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v11 = *(void *)(v7 + 40);
  signed int v12 = (unsigned int *)(v11 + 4640);
  do
  {
    unsigned int v13 = __ldaxr(v12);
    signed int v14 = v13 + 1;
  }

  while (__stlxr(v14, v12));
  if (gCheckGLErrors) {
    BOOL v15 = v14 <= 1;
  }
  else {
    BOOL v15 = 1;
  }
  if (v15)
  {
    id v43 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v42 = handle_opengl_thread_conflict((const void **)v11);
    id v43 = [(id)DYGetGLGuestAppClient(v42) waitOnGraphicsSemaphoreAssertions];
    if ((int)v43 >= 1)
    {
      do
LABEL_56:
        unsigned int v44 = __ldaxr(v12);
      while (__stlxr(v44 - 1, v12));
      int v45 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v43) graphicsLockWaitQueue];
      dispatch_sync_f(v45, 0LL, (dispatch_function_t)do_nothing);
      (*(void (**)(__GLIContextRec *, volatile int *, const unsigned int *))(*(void *)(v11 + 24) + 472LL))( a1,  a2,  a3);
      return;
    }
  }

  *(_BYTE *)(v11 + 483_Block_object_dispose(va, 8) = 1;
  v50[0] = 0LL;
  v50[1] = 0LL;
  int v51 = 0;
  if ([(id)DYGetGLGuestAppClient(v43) state] != (char *)&dword_0 + 1
    || (id v16 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand], !(_DWORD)v16))
  {
    snprintf((char *)(v11 + 4709), 0x40uLL, "Ci@%dui", (_DWORD)a2);
    GPUTools::FB::Encode((uint64_t)v50, 127LL, 0LL, v11 + 4709, v17, v18, v19, v20, *(void *)v11);
    char v22 = byte_206ED7;
    if ((byte_206ED7 & 1) != 0) {
      breakpoint_break((uint64_t)v50, (volatile int *)&stru_68.segname[7], 1LL, *(unsigned int *)(v11 + 3404), v11);
    }
    uint64_t v23 = (uint64_t)[(id)DYGetGLGuestAppClient(v21) overrideFlags];
    if (!(v23 & 0x10 | v22 & 4))
    {
      uint64_t v24 = mach_absolute_time();
      (*(void (**)(__GLIContextRec *, volatile int *, const unsigned int *))(*(void *)(v11 + 32) + 472LL))( a1,  a2,  a3);
      uint64_t v23 = mach_absolute_time();
      uint64_t v25 = v23 - v24;
      unint64_t v26 = g_DYTimebaseInfo;
      if (g_DYTimebaseInfo == *((_DWORD *)&g_DYTimebaseInfo + 1))
      {
        id v27 = v50[0];
        *((void *)v50[0] + 2) = v24;
        v27[3] = v25;
        if (!gCheckGLErrors) {
          goto LABEL_28;
        }
      }

      else
      {
        uint64_t v48 = __udivti3(g_DYTimebaseInfo * v25, (g_DYTimebaseInfo * (unsigned __int128)v25) >> 64);
        BOOL v49 = v50[0];
        *((void *)v50[0] + 3) = v48;
        uint64_t v23 = __udivti3(v26 * v24, (v26 * (unsigned __int128)v24) >> 64);
        v49[2] = v23;
        if (!gCheckGLErrors) {
          goto LABEL_28;
        }
      }

      uint64_t v23 = check_errors(v11);
    }

{
  void *v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  void *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  signed int v14;
  BOOL v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void *v27;
  id v28;
  GPUTools::FB::Fbuf *v29;
  unsigned int v30;
  GPUTools::FB::Fbuf *v31;
  dispatch_queue_s *v32;
  uint64_t v33;
  GPUTools::FB::Stream *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  signed int v39;
  BOOL v40;
  unsigned int v41;
  uint64_t v42;
  id v43;
  unsigned int v44;
  dispatch_queue_s *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50[2];
  int v51;
  unint64_t v6 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v6) {
    goto LABEL_12;
  }
  uint64_t v7 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v8 = v6[4];
    BOOL v9 = v8 >= (unint64_t)a1;
    else {
      uint64_t v10 = v6 + 1;
    }
    if (v9) {
      uint64_t v7 = (uint64_t)v6;
    }
    unint64_t v6 = (void *)*v10;
  }

  while (*v10);
  if (v7 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v7 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v7 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v11 = *(void *)(v7 + 40);
  signed int v12 = (unsigned int *)(v11 + 4640);
  do
  {
    unsigned int v13 = __ldaxr(v12);
    signed int v14 = v13 + 1;
  }

  while (__stlxr(v14, v12));
  if (gCheckGLErrors) {
    BOOL v15 = v14 <= 1;
  }
  else {
    BOOL v15 = 1;
  }
  if (v15)
  {
    id v43 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v42 = handle_opengl_thread_conflict((const void **)v11);
    id v43 = [(id)DYGetGLGuestAppClient(v42) waitOnGraphicsSemaphoreAssertions];
    if ((int)v43 >= 1)
    {
      do
LABEL_56:
        unsigned int v44 = __ldaxr(v12);
      while (__stlxr(v44 - 1, v12));
      int v45 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v43) graphicsLockWaitQueue];
      dispatch_sync_f(v45, 0LL, (dispatch_function_t)do_nothing);
      (*(void (**)(__GLIContextRec *, volatile int *, const unsigned int *))(*(void *)(v11 + 24) + 472LL))( a1,  a2,  a3);
      return;
    }
  }

  *(_BYTE *)(v11 + 483_Block_object_dispose(va, 8) = 1;
  v50[0] = 0LL;
  v50[1] = 0LL;
  int v51 = 0;
  if ([(id)DYGetGLGuestAppClient(v43) state] != (char *)&dword_0 + 1
    || (id v16 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand], !(_DWORD)v16))
  {
    snprintf((char *)(v11 + 4709), 0x40uLL, "Ci@%dui", (_DWORD)a2);
    GPUTools::FB::Encode((uint64_t)v50, 127LL, 0LL, v11 + 4709, v17, v18, v19, v20, *(void *)v11);
    char v22 = byte_206ED7;
    if ((byte_206ED7 & 1) != 0) {
      breakpoint_break((uint64_t)v50, (volatile int *)&stru_68.segname[7], 1LL, *(unsigned int *)(v11 + 3404), v11);
    }
    uint64_t v23 = (uint64_t)[(id)DYGetGLGuestAppClient(v21) overrideFlags];
    if (!(v23 & 0x10 | v22 & 4))
    {
      uint64_t v24 = mach_absolute_time();
      (*(void (**)(__GLIContextRec *, volatile int *, const unsigned int *))(*(void *)(v11 + 32) + 472LL))( a1,  a2,  a3);
      uint64_t v23 = mach_absolute_time();
      uint64_t v25 = v23 - v24;
      unint64_t v26 = g_DYTimebaseInfo;
      if (g_DYTimebaseInfo == *((_DWORD *)&g_DYTimebaseInfo + 1))
      {
        id v27 = v50[0];
        *((void *)v50[0] + 2) = v24;
        v27[3] = v25;
        if (!gCheckGLErrors) {
          goto LABEL_28;
        }
      }

      else
      {
        uint64_t v48 = __udivti3(g_DYTimebaseInfo * v25, (g_DYTimebaseInfo * (unsigned __int128)v25) >> 64);
        BOOL v49 = v50[0];
        *((void *)v50[0] + 3) = v48;
        uint64_t v23 = __udivti3(v26 * v24, (v26 * (unsigned __int128)v24) >> 64);
        v49[2] = v23;
        if (!gCheckGLErrors) {
          goto LABEL_28;
        }
      }

      uint64_t v23 = check_errors(v11);
    }

void sub_255E0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  if (a12) {
    free(a12);
  }
  _Unwind_Resume(exception_object);
}

void depth_func(__GLIContextRec *a1, uint64_t a2)
{
  unint64_t v4 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v4) {
    goto LABEL_12;
  }
  uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v6 = v4[4];
    BOOL v7 = v6 >= (unint64_t)a1;
    else {
      unint64_t v8 = v4 + 1;
    }
    if (v7) {
      uint64_t v5 = (uint64_t)v4;
    }
    unint64_t v4 = (void *)*v8;
  }

  while (*v8);
  if (v5 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v5 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v9 = *(void *)(v5 + 40);
  uint64_t v10 = (unsigned int *)(v9 + 4640);
  do
  {
    unsigned int v11 = __ldaxr(v10);
    signed int v12 = v11 + 1;
  }

  while (__stlxr(v12, v10));
  if (gCheckGLErrors) {
    BOOL v13 = v12 <= 1;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13)
  {
    id v42 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v41 = handle_opengl_thread_conflict((const void **)v9);
    id v42 = [(id)DYGetGLGuestAppClient(v41) waitOnGraphicsSemaphoreAssertions];
    if ((int)v42 >= 1)
    {
      do
LABEL_57:
        unsigned int v43 = __ldaxr(v10);
      while (__stlxr(v43 - 1, v10));
      unsigned int v44 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v42) graphicsLockWaitQueue];
      dispatch_sync_f(v44, 0LL, (dispatch_function_t)do_nothing);
      (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 480LL))(a1, a2);
      return;
    }
  }

  *(_BYTE *)(v9 + 483_Block_object_dispose(va, 8) = 1;
  int v51 = 0LL;
  id v52 = 0LL;
  unsigned int v53 = 0;
  if ([(id)DYGetGLGuestAppClient(v42) state] != (char *)&dword_0 + 1
    || (id v14 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand], !(_DWORD)v14))
  {
    id v16 = (char *)v51;
    BOOL v15 = v52;
    int64_t v17 = v52 - (_BYTE *)v51;
    unsigned int v18 = v53;
    unint64_t v19 = v53 - (v52 - (_BYTE *)v51);
    if (v19 > 0x33) {
      goto LABEL_24;
    }
    int v45 = (307 - v19) & 0xFFFFFF00;
    v53 += v45;
    id v16 = (char *)malloc(v45 + v18);
    int v51 = v16;
    if (v16)
    {
      if ((v16 & 3) == 0)
      {
        BOOL v15 = &v16[v17];
LABEL_24:
        *((_DWORD *)v15 + 12) = 0;
        *((_OWORD *)v15 + 1) = 0u;
        *((_OWORD *)v15 + 2) = 0u;
        *(_OWORD *)BOOL v15 = 0u;
        id v52 = v15 + 52;
        GPUTools::FB::Fbuf::align((char **)&v51);
        *((_DWORD *)v16 + 1) = 130;
        *((_DWORD *)v16 + _Block_object_dispose(va, 8) = 0;
        __uint64_t v50 = 0LL;
        uint64_t v20 = pthread_threadid_np(0LL, &v50);
        *((void *)v16 + 1) = v50;
        strcpy(v16 + 36, "Ce");
        *((void *)v16 + 5) = *(void *)v9;
        *((_DWORD *)v16 + 12) = a2;
        char v21 = byte_206EDA;
        if ((byte_206EDA & 1) != 0) {
          breakpoint_break((uint64_t)&v51, (volatile int *)&stru_68.segname[10], 1LL, *(unsigned int *)(v9 + 3404), v9);
        }
        uint64_t v22 = (uint64_t)[(id)DYGetGLGuestAppClient(v20) overrideFlags];
        if (!(v22 & 0x10 | v21 & 4))
        {
          uint64_t v23 = mach_absolute_time();
          (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 32) + 480LL))(a1, a2);
          uint64_t v22 = mach_absolute_time();
          uint64_t v24 = v22 - v23;
          unint64_t v25 = g_DYTimebaseInfo;
          if (g_DYTimebaseInfo == *((_DWORD *)&g_DYTimebaseInfo + 1))
          {
            unint64_t v26 = v51;
            *((void *)v51 + 2) = v23;
            v26[3] = v24;
            if (!gCheckGLErrors) {
              goto LABEL_29;
            }
          }

          else
          {
            uint64_t v48 = __udivti3(g_DYTimebaseInfo * v24, (g_DYTimebaseInfo * (unsigned __int128)v24) >> 64);
            BOOL v49 = v51;
            *((void *)v51 + 3) = v48;
            uint64_t v22 = __udivti3(v25 * v23, (v25 * (unsigned __int128)v23) >> 64);
            v49[2] = v22;
            if (!gCheckGLErrors) {
              goto LABEL_29;
            }
          }

          uint64_t v22 = check_errors(v9);
        }

{
  void *v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  void *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  signed int v12;
  BOOL v13;
  id v14;
  char *v15;
  char *v16;
  int64_t v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  id v27;
  GPUTools::FB::Fbuf *v28;
  unsigned int v29;
  GPUTools::FB::Fbuf *v30;
  dispatch_queue_s *v31;
  uint64_t v32;
  GPUTools::FB::Stream *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  signed int v38;
  BOOL v39;
  unsigned int v40;
  uint64_t v41;
  id v42;
  unsigned int v43;
  dispatch_queue_s *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  __uint64_t v50;
  void *v51;
  char *v52;
  unsigned int v53;
  unint64_t v4 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v4) {
    goto LABEL_12;
  }
  uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v6 = v4[4];
    BOOL v7 = v6 >= (unint64_t)a1;
    else {
      unint64_t v8 = v4 + 1;
    }
    if (v7) {
      uint64_t v5 = (uint64_t)v4;
    }
    unint64_t v4 = (void *)*v8;
  }

  while (*v8);
  if (v5 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v5 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v9 = *(void *)(v5 + 40);
  uint64_t v10 = (unsigned int *)(v9 + 4640);
  do
  {
    unsigned int v11 = __ldaxr(v10);
    signed int v12 = v11 + 1;
  }

  while (__stlxr(v12, v10));
  if (gCheckGLErrors) {
    BOOL v13 = v12 <= 1;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13)
  {
    id v42 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v41 = handle_opengl_thread_conflict((const void **)v9);
    id v42 = [(id)DYGetGLGuestAppClient(v41) waitOnGraphicsSemaphoreAssertions];
    if ((int)v42 >= 1)
    {
      do
LABEL_57:
        unsigned int v43 = __ldaxr(v10);
      while (__stlxr(v43 - 1, v10));
      unsigned int v44 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v42) graphicsLockWaitQueue];
      dispatch_sync_f(v44, 0LL, (dispatch_function_t)do_nothing);
      (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 480LL))(a1, a2);
      return;
    }
  }

  *(_BYTE *)(v9 + 483_Block_object_dispose(va, 8) = 1;
  int v51 = 0LL;
  id v52 = 0LL;
  unsigned int v53 = 0;
  if ([(id)DYGetGLGuestAppClient(v42) state] != (char *)&dword_0 + 1
    || (id v14 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand], !(_DWORD)v14))
  {
    id v16 = (char *)v51;
    BOOL v15 = v52;
    int64_t v17 = v52 - (_BYTE *)v51;
    unsigned int v18 = v53;
    unint64_t v19 = v53 - (v52 - (_BYTE *)v51);
    if (v19 > 0x33) {
      goto LABEL_24;
    }
    int v45 = (307 - v19) & 0xFFFFFF00;
    v53 += v45;
    id v16 = (char *)malloc(v45 + v18);
    int v51 = v16;
    if (v16)
    {
      if ((v16 & 3) == 0)
      {
        BOOL v15 = &v16[v17];
LABEL_24:
        *((_DWORD *)v15 + 12) = 0;
        *((_OWORD *)v15 + 1) = 0u;
        *((_OWORD *)v15 + 2) = 0u;
        *(_OWORD *)BOOL v15 = 0u;
        id v52 = v15 + 52;
        GPUTools::FB::Fbuf::align((char **)&v51);
        *((_DWORD *)v16 + 1) = 130;
        *((_DWORD *)v16 + _Block_object_dispose(va, 8) = 0;
        __uint64_t v50 = 0LL;
        uint64_t v20 = pthread_threadid_np(0LL, &v50);
        *((void *)v16 + 1) = v50;
        strcpy(v16 + 36, "Ce");
        *((void *)v16 + 5) = *(void *)v9;
        *((_DWORD *)v16 + 12) = a2;
        char v21 = byte_206EDA;
        if ((byte_206EDA & 1) != 0) {
          breakpoint_break((uint64_t)&v51, (volatile int *)&stru_68.segname[10], 1LL, *(unsigned int *)(v9 + 3404), v9);
        }
        uint64_t v22 = (uint64_t)[(id)DYGetGLGuestAppClient(v20) overrideFlags];
        if (!(v22 & 0x10 | v21 & 4))
        {
          uint64_t v23 = mach_absolute_time();
          (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 32) + 480LL))(a1, a2);
          uint64_t v22 = mach_absolute_time();
          uint64_t v24 = v22 - v23;
          unint64_t v25 = g_DYTimebaseInfo;
          if (g_DYTimebaseInfo == *((_DWORD *)&g_DYTimebaseInfo + 1))
          {
            unint64_t v26 = v51;
            *((void *)v51 + 2) = v23;
            v26[3] = v24;
            if (!gCheckGLErrors) {
              goto LABEL_29;
            }
          }

          else
          {
            uint64_t v48 = __udivti3(g_DYTimebaseInfo * v24, (g_DYTimebaseInfo * (unsigned __int128)v24) >> 64);
            BOOL v49 = v51;
            *((void *)v51 + 3) = v48;
            uint64_t v22 = __udivti3(v25 * v23, (v25 * (unsigned __int128)v23) >> 64);
            v49[2] = v22;
            if (!gCheckGLErrors) {
              goto LABEL_29;
            }
          }

          uint64_t v22 = check_errors(v9);
        }

{
  void *v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  void *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  signed int v12;
  BOOL v13;
  id v14;
  unsigned int v15;
  signed int v16;
  BOOL v17;
  unsigned int v18;
  uint64_t v19;
  id v20;
  unsigned int v21;
  dispatch_queue_s *v22;
  uint64_t v23;
  unint64_t v4 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v4) {
    goto LABEL_12;
  }
  uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v6 = v4[4];
    BOOL v7 = v6 >= (unint64_t)a1;
    else {
      unint64_t v8 = v4 + 1;
    }
    if (v7) {
      uint64_t v5 = (uint64_t)v4;
    }
    unint64_t v4 = (void *)*v8;
  }

  while (*v8);
  if (v5 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v5 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v9 = *(void *)(v5 + 40);
  uint64_t v10 = (unsigned int *)(v9 + 4640);
  do
  {
    unsigned int v11 = __ldaxr(v10);
    signed int v12 = v11 + 1;
  }

  while (__stlxr(v12, v10));
  if (gCheckGLErrors) {
    BOOL v13 = v12 <= 1;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13)
  {
    uint64_t v20 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    unint64_t v19 = handle_opengl_thread_conflict((const void **)v9);
    uint64_t v20 = [(id)DYGetGLGuestAppClient(v19) waitOnGraphicsSemaphoreAssertions];
    if ((int)v20 >= 1)
    {
      do
LABEL_34:
        char v21 = __ldaxr(v10);
      while (__stlxr(v21 - 1, v10));
      uint64_t v22 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v20) graphicsLockWaitQueue];
      dispatch_sync_f(v22, 0LL, (dispatch_function_t)do_nothing);
LABEL_36:
      (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 480LL))(a1, a2);
      return;
    }
  }

  *(_BYTE *)(v9 + 483_Block_object_dispose(va, 8) = 1;
  if ([(id)DYGetGLGuestAppClient(v20) state] == (char *)&dword_0 + 1)
  {
    id v14 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand];
    if ((_DWORD)v14)
    {
      do
        unsigned int v18 = __ldaxr(v10);
      while (__stlxr(v18 - 1, v10));
      [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
      goto LABEL_36;
    }
  }

  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 32) + 480LL))(a1, a2);
  ++*(void *)(v9 + 3704);
  if (gCheckGLErrors)
  {
    check_errors(v9);
    if (gBreakOnError)
    {
      uint64_t v23 = *(unsigned int *)(v9 + 3404);
      if ((_DWORD)v23) {
        breakpoint_break(0LL, (volatile int *)0xFFFFFFFFLL, 3LL, v23, v9);
      }
    }
  }

  do
  {
    BOOL v15 = __ldaxr(v10);
    id v16 = v15 - 1;
  }

  while (__stlxr(v16, v10));
  if (gCheckGLErrors) {
    int64_t v17 = v16 < 1;
  }
  else {
    int64_t v17 = 1;
  }
  if (!v17) {
    handle_opengl_thread_conflict((const void **)v9);
  }
}

{
  void *v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  void *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  signed int v12;
  BOOL v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  int64x2_t v17;
  unsigned int v18;
  signed int v19;
  BOOL v20;
  unsigned int v21;
  uint64_t v22;
  id v23;
  unsigned int v24;
  dispatch_queue_s *v25;
  uint64_t v26;
  unint64_t v4 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v4) {
    goto LABEL_12;
  }
  uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v6 = v4[4];
    BOOL v7 = v6 >= (unint64_t)a1;
    else {
      unint64_t v8 = v4 + 1;
    }
    if (v7) {
      uint64_t v5 = (uint64_t)v4;
    }
    unint64_t v4 = (void *)*v8;
  }

  while (*v8);
  if (v5 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v5 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v9 = *(void *)(v5 + 40);
  uint64_t v10 = (unsigned int *)(v9 + 4640);
  do
  {
    unsigned int v11 = __ldaxr(v10);
    signed int v12 = v11 + 1;
  }

  while (__stlxr(v12, v10));
  if (gCheckGLErrors) {
    BOOL v13 = v12 <= 1;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13)
  {
    uint64_t v23 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v22 = handle_opengl_thread_conflict((const void **)v9);
    uint64_t v23 = [(id)DYGetGLGuestAppClient(v22) waitOnGraphicsSemaphoreAssertions];
    if ((int)v23 >= 1)
    {
      do
LABEL_34:
        uint64_t v24 = __ldaxr(v10);
      while (__stlxr(v24 - 1, v10));
      unint64_t v25 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v23) graphicsLockWaitQueue];
      dispatch_sync_f(v25, 0LL, (dispatch_function_t)do_nothing);
LABEL_36:
      (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 480LL))(a1, a2);
      return;
    }
  }

  *(_BYTE *)(v9 + 483_Block_object_dispose(va, 8) = 1;
  if ([(id)DYGetGLGuestAppClient(v23) state] == (char *)&dword_0 + 1)
  {
    id v14 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand];
    if ((_DWORD)v14)
    {
      do
        char v21 = __ldaxr(v10);
      while (__stlxr(v21 - 1, v10));
      [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
      goto LABEL_36;
    }
  }

  BOOL v15 = mach_absolute_time();
  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 32) + 480LL))(a1, a2);
  id v16 = mach_absolute_time();
  int64_t v17 = vdupq_n_s64(1uLL);
  v17.i64[0] = v16 - v15;
  *(int64x2_t *)(v9 + 3696) = vaddq_s64(v17, *(int64x2_t *)(v9 + 3696));
  if (gCheckGLErrors)
  {
    check_errors(v9);
    if (gBreakOnError)
    {
      unint64_t v26 = *(unsigned int *)(v9 + 3404);
      if ((_DWORD)v26) {
        breakpoint_break(0LL, (volatile int *)0xFFFFFFFFLL, 3LL, v26, v9);
      }
    }
  }

  do
  {
    unsigned int v18 = __ldaxr(v10);
    unint64_t v19 = v18 - 1;
  }

  while (__stlxr(v19, v10));
  if (gCheckGLErrors) {
    uint64_t v20 = v19 < 1;
  }
  else {
    uint64_t v20 = 1;
  }
  if (!v20) {
    handle_opengl_thread_conflict((const void **)v9);
  }
}

void sub_25AA4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  if (a12) {
    free(a12);
  }
  _Unwind_Resume(exception_object);
}

void depth_mask(__GLIContextRec *a1, uint64_t a2)
{
  unint64_t v4 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v4) {
    goto LABEL_12;
  }
  uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v6 = v4[4];
    BOOL v7 = v6 >= (unint64_t)a1;
    else {
      unint64_t v8 = v4 + 1;
    }
    if (v7) {
      uint64_t v5 = (uint64_t)v4;
    }
    unint64_t v4 = (void *)*v8;
  }

  while (*v8);
  if (v5 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v5 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v9 = *(void *)(v5 + 40);
  uint64_t v10 = (unsigned int *)(v9 + 4640);
  do
  {
    unsigned int v11 = __ldaxr(v10);
    signed int v12 = v11 + 1;
  }

  while (__stlxr(v12, v10));
  if (gCheckGLErrors) {
    BOOL v13 = v12 <= 1;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13)
  {
    id v42 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v41 = handle_opengl_thread_conflict((const void **)v9);
    id v42 = [(id)DYGetGLGuestAppClient(v41) waitOnGraphicsSemaphoreAssertions];
    if ((int)v42 >= 1)
    {
      do
LABEL_57:
        unsigned int v43 = __ldaxr(v10);
      while (__stlxr(v43 - 1, v10));
      unsigned int v44 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v42) graphicsLockWaitQueue];
      dispatch_sync_f(v44, 0LL, (dispatch_function_t)do_nothing);
      (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 488LL))(a1, a2);
      return;
    }
  }

  *(_BYTE *)(v9 + 483_Block_object_dispose(va, 8) = 1;
  int v51 = 0LL;
  id v52 = 0LL;
  unsigned int v53 = 0;
  if ([(id)DYGetGLGuestAppClient(v42) state] != (char *)&dword_0 + 1
    || (id v14 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand], !(_DWORD)v14))
  {
    id v16 = (char *)v51;
    BOOL v15 = v52;
    int64_t v17 = v52 - (_BYTE *)v51;
    unsigned int v18 = v53;
    unint64_t v19 = v53 - (v52 - (_BYTE *)v51);
    if (v19 > 0x33) {
      goto LABEL_24;
    }
    int v45 = (307 - v19) & 0xFFFFFF00;
    v53 += v45;
    id v16 = (char *)malloc(v45 + v18);
    int v51 = v16;
    if (v16)
    {
      if ((v16 & 3) == 0)
      {
        BOOL v15 = &v16[v17];
LABEL_24:
        *((_DWORD *)v15 + 12) = 0;
        *((_OWORD *)v15 + 1) = 0u;
        *((_OWORD *)v15 + 2) = 0u;
        *(_OWORD *)BOOL v15 = 0u;
        id v52 = v15 + 52;
        GPUTools::FB::Fbuf::align((char **)&v51);
        *((_DWORD *)v16 + 1) = 131;
        *((_DWORD *)v16 + _Block_object_dispose(va, 8) = 0;
        __uint64_t v50 = 0LL;
        uint64_t v20 = pthread_threadid_np(0LL, &v50);
        *((void *)v16 + 1) = v50;
        *((_DWORD *)v16 + 9) = 6452547;
        *((void *)v16 + 5) = *(void *)v9;
        v16[48] = a2;
        char v21 = byte_206EDB;
        if ((byte_206EDB & 1) != 0) {
          breakpoint_break((uint64_t)&v51, (volatile int *)&stru_68.segname[11], 1LL, *(unsigned int *)(v9 + 3404), v9);
        }
        uint64_t v22 = (uint64_t)[(id)DYGetGLGuestAppClient(v20) overrideFlags];
        if (!(v22 & 0x10 | v21 & 4))
        {
          uint64_t v23 = mach_absolute_time();
          (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 32) + 488LL))(a1, a2);
          uint64_t v22 = mach_absolute_time();
          uint64_t v24 = v22 - v23;
          unint64_t v25 = g_DYTimebaseInfo;
          if (g_DYTimebaseInfo == *((_DWORD *)&g_DYTimebaseInfo + 1))
          {
            unint64_t v26 = v51;
            *((void *)v51 + 2) = v23;
            v26[3] = v24;
            if (!gCheckGLErrors) {
              goto LABEL_29;
            }
          }

          else
          {
            uint64_t v48 = __udivti3(g_DYTimebaseInfo * v24, (g_DYTimebaseInfo * (unsigned __int128)v24) >> 64);
            BOOL v49 = v51;
            *((void *)v51 + 3) = v48;
            uint64_t v22 = __udivti3(v25 * v23, (v25 * (unsigned __int128)v23) >> 64);
            v49[2] = v22;
            if (!gCheckGLErrors) {
              goto LABEL_29;
            }
          }

          uint64_t v22 = check_errors(v9);
        }

{
  void *v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  void *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  signed int v12;
  BOOL v13;
  id v14;
  char *v15;
  char *v16;
  int64_t v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  id v27;
  GPUTools::FB::Fbuf *v28;
  unsigned int v29;
  GPUTools::FB::Fbuf *v30;
  dispatch_queue_s *v31;
  uint64_t v32;
  GPUTools::FB::Stream *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  signed int v38;
  BOOL v39;
  unsigned int v40;
  uint64_t v41;
  id v42;
  unsigned int v43;
  dispatch_queue_s *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  __uint64_t v50;
  void *v51;
  char *v52;
  unsigned int v53;
  unint64_t v4 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v4) {
    goto LABEL_12;
  }
  uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v6 = v4[4];
    BOOL v7 = v6 >= (unint64_t)a1;
    else {
      unint64_t v8 = v4 + 1;
    }
    if (v7) {
      uint64_t v5 = (uint64_t)v4;
    }
    unint64_t v4 = (void *)*v8;
  }

  while (*v8);
  if (v5 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v5 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v9 = *(void *)(v5 + 40);
  uint64_t v10 = (unsigned int *)(v9 + 4640);
  do
  {
    unsigned int v11 = __ldaxr(v10);
    signed int v12 = v11 + 1;
  }

  while (__stlxr(v12, v10));
  if (gCheckGLErrors) {
    BOOL v13 = v12 <= 1;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13)
  {
    id v42 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v41 = handle_opengl_thread_conflict((const void **)v9);
    id v42 = [(id)DYGetGLGuestAppClient(v41) waitOnGraphicsSemaphoreAssertions];
    if ((int)v42 >= 1)
    {
      do
LABEL_57:
        unsigned int v43 = __ldaxr(v10);
      while (__stlxr(v43 - 1, v10));
      unsigned int v44 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v42) graphicsLockWaitQueue];
      dispatch_sync_f(v44, 0LL, (dispatch_function_t)do_nothing);
      (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 488LL))(a1, a2);
      return;
    }
  }

  *(_BYTE *)(v9 + 483_Block_object_dispose(va, 8) = 1;
  int v51 = 0LL;
  id v52 = 0LL;
  unsigned int v53 = 0;
  if ([(id)DYGetGLGuestAppClient(v42) state] != (char *)&dword_0 + 1
    || (id v14 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand], !(_DWORD)v14))
  {
    id v16 = (char *)v51;
    BOOL v15 = v52;
    int64_t v17 = v52 - (_BYTE *)v51;
    unsigned int v18 = v53;
    unint64_t v19 = v53 - (v52 - (_BYTE *)v51);
    if (v19 > 0x33) {
      goto LABEL_24;
    }
    int v45 = (307 - v19) & 0xFFFFFF00;
    v53 += v45;
    id v16 = (char *)malloc(v45 + v18);
    int v51 = v16;
    if (v16)
    {
      if ((v16 & 3) == 0)
      {
        BOOL v15 = &v16[v17];
LABEL_24:
        *((_DWORD *)v15 + 12) = 0;
        *((_OWORD *)v15 + 1) = 0u;
        *((_OWORD *)v15 + 2) = 0u;
        *(_OWORD *)BOOL v15 = 0u;
        id v52 = v15 + 52;
        GPUTools::FB::Fbuf::align((char **)&v51);
        *((_DWORD *)v16 + 1) = 131;
        *((_DWORD *)v16 + _Block_object_dispose(va, 8) = 0;
        __uint64_t v50 = 0LL;
        uint64_t v20 = pthread_threadid_np(0LL, &v50);
        *((void *)v16 + 1) = v50;
        *((_DWORD *)v16 + 9) = 6452547;
        *((void *)v16 + 5) = *(void *)v9;
        v16[48] = a2;
        char v21 = byte_206EDB;
        if ((byte_206EDB & 1) != 0) {
          breakpoint_break((uint64_t)&v51, (volatile int *)&stru_68.segname[11], 1LL, *(unsigned int *)(v9 + 3404), v9);
        }
        uint64_t v22 = (uint64_t)[(id)DYGetGLGuestAppClient(v20) overrideFlags];
        if (!(v22 & 0x10 | v21 & 4))
        {
          uint64_t v23 = mach_absolute_time();
          (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 32) + 488LL))(a1, a2);
          uint64_t v22 = mach_absolute_time();
          uint64_t v24 = v22 - v23;
          unint64_t v25 = g_DYTimebaseInfo;
          if (g_DYTimebaseInfo == *((_DWORD *)&g_DYTimebaseInfo + 1))
          {
            unint64_t v26 = v51;
            *((void *)v51 + 2) = v23;
            v26[3] = v24;
            if (!gCheckGLErrors) {
              goto LABEL_29;
            }
          }

          else
          {
            uint64_t v48 = __udivti3(g_DYTimebaseInfo * v24, (g_DYTimebaseInfo * (unsigned __int128)v24) >> 64);
            BOOL v49 = v51;
            *((void *)v51 + 3) = v48;
            uint64_t v22 = __udivti3(v25 * v23, (v25 * (unsigned __int128)v23) >> 64);
            v49[2] = v22;
            if (!gCheckGLErrors) {
              goto LABEL_29;
            }
          }

          uint64_t v22 = check_errors(v9);
        }

{
  void *v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  void *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  signed int v12;
  BOOL v13;
  id v14;
  unsigned int v15;
  signed int v16;
  BOOL v17;
  unsigned int v18;
  uint64_t v19;
  id v20;
  unsigned int v21;
  dispatch_queue_s *v22;
  uint64_t v23;
  unint64_t v4 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v4) {
    goto LABEL_12;
  }
  uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v6 = v4[4];
    BOOL v7 = v6 >= (unint64_t)a1;
    else {
      unint64_t v8 = v4 + 1;
    }
    if (v7) {
      uint64_t v5 = (uint64_t)v4;
    }
    unint64_t v4 = (void *)*v8;
  }

  while (*v8);
  if (v5 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v5 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v9 = *(void *)(v5 + 40);
  uint64_t v10 = (unsigned int *)(v9 + 4640);
  do
  {
    unsigned int v11 = __ldaxr(v10);
    signed int v12 = v11 + 1;
  }

  while (__stlxr(v12, v10));
  if (gCheckGLErrors) {
    BOOL v13 = v12 <= 1;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13)
  {
    uint64_t v20 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    unint64_t v19 = handle_opengl_thread_conflict((const void **)v9);
    uint64_t v20 = [(id)DYGetGLGuestAppClient(v19) waitOnGraphicsSemaphoreAssertions];
    if ((int)v20 >= 1)
    {
      do
LABEL_34:
        char v21 = __ldaxr(v10);
      while (__stlxr(v21 - 1, v10));
      uint64_t v22 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v20) graphicsLockWaitQueue];
      dispatch_sync_f(v22, 0LL, (dispatch_function_t)do_nothing);
LABEL_36:
      (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 488LL))(a1, a2);
      return;
    }
  }

  *(_BYTE *)(v9 + 483_Block_object_dispose(va, 8) = 1;
  if ([(id)DYGetGLGuestAppClient(v20) state] == (char *)&dword_0 + 1)
  {
    id v14 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand];
    if ((_DWORD)v14)
    {
      do
        unsigned int v18 = __ldaxr(v10);
      while (__stlxr(v18 - 1, v10));
      [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
      goto LABEL_36;
    }
  }

  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 32) + 488LL))(a1, a2);
  ++*(void *)(v9 + 3704);
  if (gCheckGLErrors)
  {
    check_errors(v9);
    if (gBreakOnError)
    {
      uint64_t v23 = *(unsigned int *)(v9 + 3404);
      if ((_DWORD)v23) {
        breakpoint_break(0LL, (volatile int *)0xFFFFFFFFLL, 3LL, v23, v9);
      }
    }
  }

  do
  {
    BOOL v15 = __ldaxr(v10);
    id v16 = v15 - 1;
  }

  while (__stlxr(v16, v10));
  if (gCheckGLErrors) {
    int64_t v17 = v16 < 1;
  }
  else {
    int64_t v17 = 1;
  }
  if (!v17) {
    handle_opengl_thread_conflict((const void **)v9);
  }
}

{
  void *v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  void *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  signed int v12;
  BOOL v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  int64x2_t v17;
  unsigned int v18;
  signed int v19;
  BOOL v20;
  unsigned int v21;
  uint64_t v22;
  id v23;
  unsigned int v24;
  dispatch_queue_s *v25;
  uint64_t v26;
  unint64_t v4 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v4) {
    goto LABEL_12;
  }
  uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v6 = v4[4];
    BOOL v7 = v6 >= (unint64_t)a1;
    else {
      unint64_t v8 = v4 + 1;
    }
    if (v7) {
      uint64_t v5 = (uint64_t)v4;
    }
    unint64_t v4 = (void *)*v8;
  }

  while (*v8);
  if (v5 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v5 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v9 = *(void *)(v5 + 40);
  uint64_t v10 = (unsigned int *)(v9 + 4640);
  do
  {
    unsigned int v11 = __ldaxr(v10);
    signed int v12 = v11 + 1;
  }

  while (__stlxr(v12, v10));
  if (gCheckGLErrors) {
    BOOL v13 = v12 <= 1;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13)
  {
    uint64_t v23 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v22 = handle_opengl_thread_conflict((const void **)v9);
    uint64_t v23 = [(id)DYGetGLGuestAppClient(v22) waitOnGraphicsSemaphoreAssertions];
    if ((int)v23 >= 1)
    {
      do
LABEL_34:
        uint64_t v24 = __ldaxr(v10);
      while (__stlxr(v24 - 1, v10));
      unint64_t v25 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v23) graphicsLockWaitQueue];
      dispatch_sync_f(v25, 0LL, (dispatch_function_t)do_nothing);
LABEL_36:
      (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 488LL))(a1, a2);
      return;
    }
  }

  *(_BYTE *)(v9 + 483_Block_object_dispose(va, 8) = 1;
  if ([(id)DYGetGLGuestAppClient(v23) state] == (char *)&dword_0 + 1)
  {
    id v14 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand];
    if ((_DWORD)v14)
    {
      do
        char v21 = __ldaxr(v10);
      while (__stlxr(v21 - 1, v10));
      [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
      goto LABEL_36;
    }
  }

  BOOL v15 = mach_absolute_time();
  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 32) + 488LL))(a1, a2);
  id v16 = mach_absolute_time();
  int64_t v17 = vdupq_n_s64(1uLL);
  v17.i64[0] = v16 - v15;
  *(int64x2_t *)(v9 + 3696) = vaddq_s64(v17, *(int64x2_t *)(v9 + 3696));
  if (gCheckGLErrors)
  {
    check_errors(v9);
    if (gBreakOnError)
    {
      unint64_t v26 = *(unsigned int *)(v9 + 3404);
      if ((_DWORD)v26) {
        breakpoint_break(0LL, (volatile int *)0xFFFFFFFFLL, 3LL, v26, v9);
      }
    }
  }

  do
  {
    unsigned int v18 = __ldaxr(v10);
    unint64_t v19 = v18 - 1;
  }

  while (__stlxr(v19, v10));
  if (gCheckGLErrors) {
    uint64_t v20 = v19 < 1;
  }
  else {
    uint64_t v20 = 1;
  }
  if (!v20) {
    handle_opengl_thread_conflict((const void **)v9);
  }
}

void sub_25F70( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  if (a12) {
    free(a12);
  }
  _Unwind_Resume(exception_object);
}

void disable(__GLIContextRec *a1, uint64_t a2)
{
  unint64_t v4 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v4) {
    goto LABEL_12;
  }
  uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v6 = v4[4];
    BOOL v7 = v6 >= (unint64_t)a1;
    else {
      unint64_t v8 = v4 + 1;
    }
    if (v7) {
      uint64_t v5 = (uint64_t)v4;
    }
    unint64_t v4 = (void *)*v8;
  }

  while (*v8);
  if (v5 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v5 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v9 = *(void *)(v5 + 40);
  uint64_t v10 = (unsigned int *)(v9 + 4640);
  do
  {
    unsigned int v11 = __ldaxr(v10);
    signed int v12 = v11 + 1;
  }

  while (__stlxr(v12, v10));
  if (gCheckGLErrors) {
    BOOL v13 = v12 <= 1;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13)
  {
    id v42 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v41 = handle_opengl_thread_conflict((const void **)v9);
    id v42 = [(id)DYGetGLGuestAppClient(v41) waitOnGraphicsSemaphoreAssertions];
    if ((int)v42 >= 1)
    {
      do
LABEL_57:
        unsigned int v43 = __ldaxr(v10);
      while (__stlxr(v43 - 1, v10));
      unsigned int v44 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v42) graphicsLockWaitQueue];
      dispatch_sync_f(v44, 0LL, (dispatch_function_t)do_nothing);
      (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 504LL))(a1, a2);
      return;
    }
  }

  *(_BYTE *)(v9 + 483_Block_object_dispose(va, 8) = 1;
  int v51 = 0LL;
  id v52 = 0LL;
  unsigned int v53 = 0;
  if ([(id)DYGetGLGuestAppClient(v42) state] != (char *)&dword_0 + 1
    || (id v14 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand], !(_DWORD)v14))
  {
    id v16 = (char *)v51;
    BOOL v15 = v52;
    int64_t v17 = v52 - (_BYTE *)v51;
    unsigned int v18 = v53;
    unint64_t v19 = v53 - (v52 - (_BYTE *)v51);
    if (v19 > 0x33) {
      goto LABEL_24;
    }
    int v45 = (307 - v19) & 0xFFFFFF00;
    v53 += v45;
    id v16 = (char *)malloc(v45 + v18);
    int v51 = v16;
    if (v16)
    {
      if ((v16 & 3) == 0)
      {
        BOOL v15 = &v16[v17];
LABEL_24:
        *((_DWORD *)v15 + 12) = 0;
        *((_OWORD *)v15 + 1) = 0u;
        *((_OWORD *)v15 + 2) = 0u;
        *(_OWORD *)BOOL v15 = 0u;
        id v52 = v15 + 52;
        GPUTools::FB::Fbuf::align((char **)&v51);
        *((_DWORD *)v16 + 1) = 134;
        *((_DWORD *)v16 + _Block_object_dispose(va, 8) = 0;
        __uint64_t v50 = 0LL;
        uint64_t v20 = pthread_threadid_np(0LL, &v50);
        *((void *)v16 + 1) = v50;
        strcpy(v16 + 36, "Ce");
        *((void *)v16 + 5) = *(void *)v9;
        *((_DWORD *)v16 + 12) = a2;
        char v21 = byte_206EDE;
        if ((byte_206EDE & 1) != 0) {
          breakpoint_break((uint64_t)&v51, (volatile int *)&stru_68.segname[14], 1LL, *(unsigned int *)(v9 + 3404), v9);
        }
        uint64_t v22 = (uint64_t)[(id)DYGetGLGuestAppClient(v20) overrideFlags];
        if (!(v22 & 0x10 | v21 & 4))
        {
          uint64_t v23 = mach_absolute_time();
          (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 32) + 504LL))(a1, a2);
          uint64_t v22 = mach_absolute_time();
          uint64_t v24 = v22 - v23;
          unint64_t v25 = g_DYTimebaseInfo;
          if (g_DYTimebaseInfo == *((_DWORD *)&g_DYTimebaseInfo + 1))
          {
            unint64_t v26 = v51;
            *((void *)v51 + 2) = v23;
            v26[3] = v24;
            if (!gCheckGLErrors) {
              goto LABEL_29;
            }
          }

          else
          {
            uint64_t v48 = __udivti3(g_DYTimebaseInfo * v24, (g_DYTimebaseInfo * (unsigned __int128)v24) >> 64);
            BOOL v49 = v51;
            *((void *)v51 + 3) = v48;
            uint64_t v22 = __udivti3(v25 * v23, (v25 * (unsigned __int128)v23) >> 64);
            v49[2] = v22;
            if (!gCheckGLErrors) {
              goto LABEL_29;
            }
          }

          uint64_t v22 = check_errors(v9);
        }

{
  void *v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  void *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  signed int v12;
  BOOL v13;
  id v14;
  char *v15;
  char *v16;
  int64_t v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  id v27;
  GPUTools::FB::Fbuf *v28;
  unsigned int v29;
  GPUTools::FB::Fbuf *v30;
  dispatch_queue_s *v31;
  uint64_t v32;
  GPUTools::FB::Stream *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  signed int v38;
  BOOL v39;
  unsigned int v40;
  uint64_t v41;
  id v42;
  unsigned int v43;
  dispatch_queue_s *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  __uint64_t v50;
  void *v51;
  char *v52;
  unsigned int v53;
  unint64_t v4 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v4) {
    goto LABEL_12;
  }
  uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v6 = v4[4];
    BOOL v7 = v6 >= (unint64_t)a1;
    else {
      unint64_t v8 = v4 + 1;
    }
    if (v7) {
      uint64_t v5 = (uint64_t)v4;
    }
    unint64_t v4 = (void *)*v8;
  }

  while (*v8);
  if (v5 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v5 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v9 = *(void *)(v5 + 40);
  uint64_t v10 = (unsigned int *)(v9 + 4640);
  do
  {
    unsigned int v11 = __ldaxr(v10);
    signed int v12 = v11 + 1;
  }

  while (__stlxr(v12, v10));
  if (gCheckGLErrors) {
    BOOL v13 = v12 <= 1;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13)
  {
    id v42 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v41 = handle_opengl_thread_conflict((const void **)v9);
    id v42 = [(id)DYGetGLGuestAppClient(v41) waitOnGraphicsSemaphoreAssertions];
    if ((int)v42 >= 1)
    {
      do
LABEL_57:
        unsigned int v43 = __ldaxr(v10);
      while (__stlxr(v43 - 1, v10));
      unsigned int v44 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v42) graphicsLockWaitQueue];
      dispatch_sync_f(v44, 0LL, (dispatch_function_t)do_nothing);
      (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 504LL))(a1, a2);
      return;
    }
  }

  *(_BYTE *)(v9 + 483_Block_object_dispose(va, 8) = 1;
  int v51 = 0LL;
  id v52 = 0LL;
  unsigned int v53 = 0;
  if ([(id)DYGetGLGuestAppClient(v42) state] != (char *)&dword_0 + 1
    || (id v14 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand], !(_DWORD)v14))
  {
    id v16 = (char *)v51;
    BOOL v15 = v52;
    int64_t v17 = v52 - (_BYTE *)v51;
    unsigned int v18 = v53;
    unint64_t v19 = v53 - (v52 - (_BYTE *)v51);
    if (v19 > 0x33) {
      goto LABEL_24;
    }
    int v45 = (307 - v19) & 0xFFFFFF00;
    v53 += v45;
    id v16 = (char *)malloc(v45 + v18);
    int v51 = v16;
    if (v16)
    {
      if ((v16 & 3) == 0)
      {
        BOOL v15 = &v16[v17];
LABEL_24:
        *((_DWORD *)v15 + 12) = 0;
        *((_OWORD *)v15 + 1) = 0u;
        *((_OWORD *)v15 + 2) = 0u;
        *(_OWORD *)BOOL v15 = 0u;
        id v52 = v15 + 52;
        GPUTools::FB::Fbuf::align((char **)&v51);
        *((_DWORD *)v16 + 1) = 134;
        *((_DWORD *)v16 + _Block_object_dispose(va, 8) = 0;
        __uint64_t v50 = 0LL;
        uint64_t v20 = pthread_threadid_np(0LL, &v50);
        *((void *)v16 + 1) = v50;
        strcpy(v16 + 36, "Ce");
        *((void *)v16 + 5) = *(void *)v9;
        *((_DWORD *)v16 + 12) = a2;
        char v21 = byte_206EDE;
        if ((byte_206EDE & 1) != 0) {
          breakpoint_break((uint64_t)&v51, (volatile int *)&stru_68.segname[14], 1LL, *(unsigned int *)(v9 + 3404), v9);
        }
        uint64_t v22 = (uint64_t)[(id)DYGetGLGuestAppClient(v20) overrideFlags];
        if (!(v22 & 0x10 | v21 & 4))
        {
          uint64_t v23 = mach_absolute_time();
          (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 32) + 504LL))(a1, a2);
          uint64_t v22 = mach_absolute_time();
          uint64_t v24 = v22 - v23;
          unint64_t v25 = g_DYTimebaseInfo;
          if (g_DYTimebaseInfo == *((_DWORD *)&g_DYTimebaseInfo + 1))
          {
            unint64_t v26 = v51;
            *((void *)v51 + 2) = v23;
            v26[3] = v24;
            if (!gCheckGLErrors) {
              goto LABEL_29;
            }
          }

          else
          {
            uint64_t v48 = __udivti3(g_DYTimebaseInfo * v24, (g_DYTimebaseInfo * (unsigned __int128)v24) >> 64);
            BOOL v49 = v51;
            *((void *)v51 + 3) = v48;
            uint64_t v22 = __udivti3(v25 * v23, (v25 * (unsigned __int128)v23) >> 64);
            v49[2] = v22;
            if (!gCheckGLErrors) {
              goto LABEL_29;
            }
          }

          uint64_t v22 = check_errors(v9);
        }

{
  void *v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  void *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  signed int v12;
  BOOL v13;
  id v14;
  unsigned int v15;
  signed int v16;
  BOOL v17;
  unsigned int v18;
  uint64_t v19;
  id v20;
  unsigned int v21;
  dispatch_queue_s *v22;
  uint64_t v23;
  unint64_t v4 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v4) {
    goto LABEL_12;
  }
  uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v6 = v4[4];
    BOOL v7 = v6 >= (unint64_t)a1;
    else {
      unint64_t v8 = v4 + 1;
    }
    if (v7) {
      uint64_t v5 = (uint64_t)v4;
    }
    unint64_t v4 = (void *)*v8;
  }

  while (*v8);
  if (v5 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v5 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v9 = *(void *)(v5 + 40);
  uint64_t v10 = (unsigned int *)(v9 + 4640);
  do
  {
    unsigned int v11 = __ldaxr(v10);
    signed int v12 = v11 + 1;
  }

  while (__stlxr(v12, v10));
  if (gCheckGLErrors) {
    BOOL v13 = v12 <= 1;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13)
  {
    uint64_t v20 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    unint64_t v19 = handle_opengl_thread_conflict((const void **)v9);
    uint64_t v20 = [(id)DYGetGLGuestAppClient(v19) waitOnGraphicsSemaphoreAssertions];
    if ((int)v20 >= 1)
    {
      do
LABEL_34:
        char v21 = __ldaxr(v10);
      while (__stlxr(v21 - 1, v10));
      uint64_t v22 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v20) graphicsLockWaitQueue];
      dispatch_sync_f(v22, 0LL, (dispatch_function_t)do_nothing);
LABEL_36:
      (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 504LL))(a1, a2);
      return;
    }
  }

  *(_BYTE *)(v9 + 483_Block_object_dispose(va, 8) = 1;
  if ([(id)DYGetGLGuestAppClient(v20) state] == (char *)&dword_0 + 1)
  {
    id v14 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand];
    if ((_DWORD)v14)
    {
      do
        unsigned int v18 = __ldaxr(v10);
      while (__stlxr(v18 - 1, v10));
      [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
      goto LABEL_36;
    }
  }

  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 32) + 504LL))(a1, a2);
  ++*(void *)(v9 + 3704);
  if (gCheckGLErrors)
  {
    check_errors(v9);
    if (gBreakOnError)
    {
      uint64_t v23 = *(unsigned int *)(v9 + 3404);
      if ((_DWORD)v23) {
        breakpoint_break(0LL, (volatile int *)0xFFFFFFFFLL, 3LL, v23, v9);
      }
    }
  }

  do
  {
    BOOL v15 = __ldaxr(v10);
    id v16 = v15 - 1;
  }

  while (__stlxr(v16, v10));
  if (gCheckGLErrors) {
    int64_t v17 = v16 < 1;
  }
  else {
    int64_t v17 = 1;
  }
  if (!v17) {
    handle_opengl_thread_conflict((const void **)v9);
  }
}

{
  void *v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  void *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  signed int v12;
  BOOL v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  int64x2_t v17;
  unsigned int v18;
  signed int v19;
  BOOL v20;
  unsigned int v21;
  uint64_t v22;
  id v23;
  unsigned int v24;
  dispatch_queue_s *v25;
  uint64_t v26;
  unint64_t v4 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v4) {
    goto LABEL_12;
  }
  uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v6 = v4[4];
    BOOL v7 = v6 >= (unint64_t)a1;
    else {
      unint64_t v8 = v4 + 1;
    }
    if (v7) {
      uint64_t v5 = (uint64_t)v4;
    }
    unint64_t v4 = (void *)*v8;
  }

  while (*v8);
  if (v5 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v5 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v9 = *(void *)(v5 + 40);
  uint64_t v10 = (unsigned int *)(v9 + 4640);
  do
  {
    unsigned int v11 = __ldaxr(v10);
    signed int v12 = v11 + 1;
  }

  while (__stlxr(v12, v10));
  if (gCheckGLErrors) {
    BOOL v13 = v12 <= 1;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13)
  {
    uint64_t v23 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v22 = handle_opengl_thread_conflict((const void **)v9);
    uint64_t v23 = [(id)DYGetGLGuestAppClient(v22) waitOnGraphicsSemaphoreAssertions];
    if ((int)v23 >= 1)
    {
      do
LABEL_34:
        uint64_t v24 = __ldaxr(v10);
      while (__stlxr(v24 - 1, v10));
      unint64_t v25 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v23) graphicsLockWaitQueue];
      dispatch_sync_f(v25, 0LL, (dispatch_function_t)do_nothing);
LABEL_36:
      (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 504LL))(a1, a2);
      return;
    }
  }

  *(_BYTE *)(v9 + 483_Block_object_dispose(va, 8) = 1;
  if ([(id)DYGetGLGuestAppClient(v23) state] == (char *)&dword_0 + 1)
  {
    id v14 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand];
    if ((_DWORD)v14)
    {
      do
        char v21 = __ldaxr(v10);
      while (__stlxr(v21 - 1, v10));
      [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
      goto LABEL_36;
    }
  }

  BOOL v15 = mach_absolute_time();
  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 32) + 504LL))(a1, a2);
  id v16 = mach_absolute_time();
  int64_t v17 = vdupq_n_s64(1uLL);
  v17.i64[0] = v16 - v15;
  *(int64x2_t *)(v9 + 3696) = vaddq_s64(v17, *(int64x2_t *)(v9 + 3696));
  if (gCheckGLErrors)
  {
    check_errors(v9);
    if (gBreakOnError)
    {
      unint64_t v26 = *(unsigned int *)(v9 + 3404);
      if ((_DWORD)v26) {
        breakpoint_break(0LL, (volatile int *)0xFFFFFFFFLL, 3LL, v26, v9);
      }
    }
  }

  do
  {
    unsigned int v18 = __ldaxr(v10);
    unint64_t v19 = v18 - 1;
  }

  while (__stlxr(v19, v10));
  if (gCheckGLErrors) {
    uint64_t v20 = v19 < 1;
  }
  else {
    uint64_t v20 = 1;
  }
  if (!v20) {
    handle_opengl_thread_conflict((const void **)v9);
  }
}

void sub_2643C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  if (a12) {
    free(a12);
  }
  _Unwind_Resume(exception_object);
}

void disable_client_state(__GLIContextRec *a1, uint64_t a2)
{
  unint64_t v4 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v4) {
    goto LABEL_12;
  }
  uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v6 = v4[4];
    BOOL v7 = v6 >= (unint64_t)a1;
    else {
      unint64_t v8 = v4 + 1;
    }
    if (v7) {
      uint64_t v5 = (uint64_t)v4;
    }
    unint64_t v4 = (void *)*v8;
  }

  while (*v8);
  if (v5 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v5 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v9 = *(void *)(v5 + 40);
  uint64_t v10 = (unsigned int *)(v9 + 4640);
  do
  {
    unsigned int v11 = __ldaxr(v10);
    signed int v12 = v11 + 1;
  }

  while (__stlxr(v12, v10));
  if (gCheckGLErrors) {
    BOOL v13 = v12 <= 1;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13)
  {
    id v42 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v41 = handle_opengl_thread_conflict((const void **)v9);
    id v42 = [(id)DYGetGLGuestAppClient(v41) waitOnGraphicsSemaphoreAssertions];
    if ((int)v42 >= 1)
    {
      do
LABEL_57:
        unsigned int v43 = __ldaxr(v10);
      while (__stlxr(v43 - 1, v10));
      unsigned int v44 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v42) graphicsLockWaitQueue];
      dispatch_sync_f(v44, 0LL, (dispatch_function_t)do_nothing);
      (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 512LL))(a1, a2);
      return;
    }
  }

  *(_BYTE *)(v9 + 483_Block_object_dispose(va, 8) = 1;
  int v51 = 0LL;
  id v52 = 0LL;
  unsigned int v53 = 0;
  if ([(id)DYGetGLGuestAppClient(v42) state] != (char *)&dword_0 + 1
    || (id v14 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand], !(_DWORD)v14))
  {
    id v16 = (char *)v51;
    BOOL v15 = v52;
    int64_t v17 = v52 - (_BYTE *)v51;
    unsigned int v18 = v53;
    unint64_t v19 = v53 - (v52 - (_BYTE *)v51);
    if (v19 > 0x33) {
      goto LABEL_24;
    }
    int v45 = (307 - v19) & 0xFFFFFF00;
    v53 += v45;
    id v16 = (char *)malloc(v45 + v18);
    int v51 = v16;
    if (v16)
    {
      if ((v16 & 3) == 0)
      {
        BOOL v15 = &v16[v17];
LABEL_24:
        *((_DWORD *)v15 + 12) = 0;
        *((_OWORD *)v15 + 1) = 0u;
        *((_OWORD *)v15 + 2) = 0u;
        *(_OWORD *)BOOL v15 = 0u;
        id v52 = v15 + 52;
        GPUTools::FB::Fbuf::align((char **)&v51);
        *((_DWORD *)v16 + 1) = 135;
        *((_DWORD *)v16 + _Block_object_dispose(va, 8) = 0;
        __uint64_t v50 = 0LL;
        uint64_t v20 = pthread_threadid_np(0LL, &v50);
        *((void *)v16 + 1) = v50;
        strcpy(v16 + 36, "Ce");
        *((void *)v16 + 5) = *(void *)v9;
        *((_DWORD *)v16 + 12) = a2;
        char v21 = byte_206EDF;
        if ((byte_206EDF & 1) != 0) {
          breakpoint_break((uint64_t)&v51, (volatile int *)&stru_68.segname[15], 1LL, *(unsigned int *)(v9 + 3404), v9);
        }
        uint64_t v22 = (uint64_t)[(id)DYGetGLGuestAppClient(v20) overrideFlags];
        if (!(v22 & 0x10 | v21 & 4))
        {
          uint64_t v23 = mach_absolute_time();
          (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 32) + 512LL))(a1, a2);
          uint64_t v22 = mach_absolute_time();
          uint64_t v24 = v22 - v23;
          unint64_t v25 = g_DYTimebaseInfo;
          if (g_DYTimebaseInfo == *((_DWORD *)&g_DYTimebaseInfo + 1))
          {
            unint64_t v26 = v51;
            *((void *)v51 + 2) = v23;
            v26[3] = v24;
            if (!gCheckGLErrors) {
              goto LABEL_29;
            }
          }

          else
          {
            uint64_t v48 = __udivti3(g_DYTimebaseInfo * v24, (g_DYTimebaseInfo * (unsigned __int128)v24) >> 64);
            BOOL v49 = v51;
            *((void *)v51 + 3) = v48;
            uint64_t v22 = __udivti3(v25 * v23, (v25 * (unsigned __int128)v23) >> 64);
            v49[2] = v22;
            if (!gCheckGLErrors) {
              goto LABEL_29;
            }
          }

          uint64_t v22 = check_errors(v9);
        }

{
  void *v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  void *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  signed int v12;
  BOOL v13;
  id v14;
  char *v15;
  char *v16;
  int64_t v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  id v27;
  GPUTools::FB::Fbuf *v28;
  unsigned int v29;
  GPUTools::FB::Fbuf *v30;
  dispatch_queue_s *v31;
  uint64_t v32;
  GPUTools::FB::Stream *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  signed int v38;
  BOOL v39;
  unsigned int v40;
  uint64_t v41;
  id v42;
  unsigned int v43;
  dispatch_queue_s *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  __uint64_t v50;
  void *v51;
  char *v52;
  unsigned int v53;
  unint64_t v4 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v4) {
    goto LABEL_12;
  }
  uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v6 = v4[4];
    BOOL v7 = v6 >= (unint64_t)a1;
    else {
      unint64_t v8 = v4 + 1;
    }
    if (v7) {
      uint64_t v5 = (uint64_t)v4;
    }
    unint64_t v4 = (void *)*v8;
  }

  while (*v8);
  if (v5 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v5 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v9 = *(void *)(v5 + 40);
  uint64_t v10 = (unsigned int *)(v9 + 4640);
  do
  {
    unsigned int v11 = __ldaxr(v10);
    signed int v12 = v11 + 1;
  }

  while (__stlxr(v12, v10));
  if (gCheckGLErrors) {
    BOOL v13 = v12 <= 1;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13)
  {
    id v42 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v41 = handle_opengl_thread_conflict((const void **)v9);
    id v42 = [(id)DYGetGLGuestAppClient(v41) waitOnGraphicsSemaphoreAssertions];
    if ((int)v42 >= 1)
    {
      do
LABEL_57:
        unsigned int v43 = __ldaxr(v10);
      while (__stlxr(v43 - 1, v10));
      unsigned int v44 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v42) graphicsLockWaitQueue];
      dispatch_sync_f(v44, 0LL, (dispatch_function_t)do_nothing);
      (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 512LL))(a1, a2);
      return;
    }
  }

  *(_BYTE *)(v9 + 483_Block_object_dispose(va, 8) = 1;
  int v51 = 0LL;
  id v52 = 0LL;
  unsigned int v53 = 0;
  if ([(id)DYGetGLGuestAppClient(v42) state] != (char *)&dword_0 + 1
    || (id v14 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand], !(_DWORD)v14))
  {
    id v16 = (char *)v51;
    BOOL v15 = v52;
    int64_t v17 = v52 - (_BYTE *)v51;
    unsigned int v18 = v53;
    unint64_t v19 = v53 - (v52 - (_BYTE *)v51);
    if (v19 > 0x33) {
      goto LABEL_24;
    }
    int v45 = (307 - v19) & 0xFFFFFF00;
    v53 += v45;
    id v16 = (char *)malloc(v45 + v18);
    int v51 = v16;
    if (v16)
    {
      if ((v16 & 3) == 0)
      {
        BOOL v15 = &v16[v17];
LABEL_24:
        *((_DWORD *)v15 + 12) = 0;
        *((_OWORD *)v15 + 1) = 0u;
        *((_OWORD *)v15 + 2) = 0u;
        *(_OWORD *)BOOL v15 = 0u;
        id v52 = v15 + 52;
        GPUTools::FB::Fbuf::align((char **)&v51);
        *((_DWORD *)v16 + 1) = 135;
        *((_DWORD *)v16 + _Block_object_dispose(va, 8) = 0;
        __uint64_t v50 = 0LL;
        uint64_t v20 = pthread_threadid_np(0LL, &v50);
        *((void *)v16 + 1) = v50;
        strcpy(v16 + 36, "Ce");
        *((void *)v16 + 5) = *(void *)v9;
        *((_DWORD *)v16 + 12) = a2;
        char v21 = byte_206EDF;
        if ((byte_206EDF & 1) != 0) {
          breakpoint_break((uint64_t)&v51, (volatile int *)&stru_68.segname[15], 1LL, *(unsigned int *)(v9 + 3404), v9);
        }
        uint64_t v22 = (uint64_t)[(id)DYGetGLGuestAppClient(v20) overrideFlags];
        if (!(v22 & 0x10 | v21 & 4))
        {
          uint64_t v23 = mach_absolute_time();
          (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 32) + 512LL))(a1, a2);
          uint64_t v22 = mach_absolute_time();
          uint64_t v24 = v22 - v23;
          unint64_t v25 = g_DYTimebaseInfo;
          if (g_DYTimebaseInfo == *((_DWORD *)&g_DYTimebaseInfo + 1))
          {
            unint64_t v26 = v51;
            *((void *)v51 + 2) = v23;
            v26[3] = v24;
            if (!gCheckGLErrors) {
              goto LABEL_29;
            }
          }

          else
          {
            uint64_t v48 = __udivti3(g_DYTimebaseInfo * v24, (g_DYTimebaseInfo * (unsigned __int128)v24) >> 64);
            BOOL v49 = v51;
            *((void *)v51 + 3) = v48;
            uint64_t v22 = __udivti3(v25 * v23, (v25 * (unsigned __int128)v23) >> 64);
            v49[2] = v22;
            if (!gCheckGLErrors) {
              goto LABEL_29;
            }
          }

          uint64_t v22 = check_errors(v9);
        }

{
  void *v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  void *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  signed int v12;
  BOOL v13;
  id v14;
  unsigned int v15;
  signed int v16;
  BOOL v17;
  unsigned int v18;
  uint64_t v19;
  id v20;
  unsigned int v21;
  dispatch_queue_s *v22;
  uint64_t v23;
  unint64_t v4 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v4) {
    goto LABEL_12;
  }
  uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v6 = v4[4];
    BOOL v7 = v6 >= (unint64_t)a1;
    else {
      unint64_t v8 = v4 + 1;
    }
    if (v7) {
      uint64_t v5 = (uint64_t)v4;
    }
    unint64_t v4 = (void *)*v8;
  }

  while (*v8);
  if (v5 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v5 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v9 = *(void *)(v5 + 40);
  uint64_t v10 = (unsigned int *)(v9 + 4640);
  do
  {
    unsigned int v11 = __ldaxr(v10);
    signed int v12 = v11 + 1;
  }

  while (__stlxr(v12, v10));
  if (gCheckGLErrors) {
    BOOL v13 = v12 <= 1;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13)
  {
    uint64_t v20 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    unint64_t v19 = handle_opengl_thread_conflict((const void **)v9);
    uint64_t v20 = [(id)DYGetGLGuestAppClient(v19) waitOnGraphicsSemaphoreAssertions];
    if ((int)v20 >= 1)
    {
      do
LABEL_34:
        char v21 = __ldaxr(v10);
      while (__stlxr(v21 - 1, v10));
      uint64_t v22 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v20) graphicsLockWaitQueue];
      dispatch_sync_f(v22, 0LL, (dispatch_function_t)do_nothing);
LABEL_36:
      (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 512LL))(a1, a2);
      return;
    }
  }

  *(_BYTE *)(v9 + 483_Block_object_dispose(va, 8) = 1;
  if ([(id)DYGetGLGuestAppClient(v20) state] == (char *)&dword_0 + 1)
  {
    id v14 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand];
    if ((_DWORD)v14)
    {
      do
        unsigned int v18 = __ldaxr(v10);
      while (__stlxr(v18 - 1, v10));
      [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
      goto LABEL_36;
    }
  }

  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 32) + 512LL))(a1, a2);
  ++*(void *)(v9 + 3704);
  if (gCheckGLErrors)
  {
    check_errors(v9);
    if (gBreakOnError)
    {
      uint64_t v23 = *(unsigned int *)(v9 + 3404);
      if ((_DWORD)v23) {
        breakpoint_break(0LL, (volatile int *)0xFFFFFFFFLL, 3LL, v23, v9);
      }
    }
  }

  do
  {
    BOOL v15 = __ldaxr(v10);
    id v16 = v15 - 1;
  }

  while (__stlxr(v16, v10));
  if (gCheckGLErrors) {
    int64_t v17 = v16 < 1;
  }
  else {
    int64_t v17 = 1;
  }
  if (!v17) {
    handle_opengl_thread_conflict((const void **)v9);
  }
}

{
  void *v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  void *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  signed int v12;
  BOOL v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  int64x2_t v17;
  unsigned int v18;
  signed int v19;
  BOOL v20;
  unsigned int v21;
  uint64_t v22;
  id v23;
  unsigned int v24;
  dispatch_queue_s *v25;
  uint64_t v26;
  unint64_t v4 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v4) {
    goto LABEL_12;
  }
  uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v6 = v4[4];
    BOOL v7 = v6 >= (unint64_t)a1;
    else {
      unint64_t v8 = v4 + 1;
    }
    if (v7) {
      uint64_t v5 = (uint64_t)v4;
    }
    unint64_t v4 = (void *)*v8;
  }

  while (*v8);
  if (v5 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v5 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v9 = *(void *)(v5 + 40);
  uint64_t v10 = (unsigned int *)(v9 + 4640);
  do
  {
    unsigned int v11 = __ldaxr(v10);
    signed int v12 = v11 + 1;
  }

  while (__stlxr(v12, v10));
  if (gCheckGLErrors) {
    BOOL v13 = v12 <= 1;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13)
  {
    uint64_t v23 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v22 = handle_opengl_thread_conflict((const void **)v9);
    uint64_t v23 = [(id)DYGetGLGuestAppClient(v22) waitOnGraphicsSemaphoreAssertions];
    if ((int)v23 >= 1)
    {
      do
LABEL_34:
        uint64_t v24 = __ldaxr(v10);
      while (__stlxr(v24 - 1, v10));
      unint64_t v25 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v23) graphicsLockWaitQueue];
      dispatch_sync_f(v25, 0LL, (dispatch_function_t)do_nothing);
LABEL_36:
      (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 512LL))(a1, a2);
      return;
    }
  }

  *(_BYTE *)(v9 + 483_Block_object_dispose(va, 8) = 1;
  if ([(id)DYGetGLGuestAppClient(v23) state] == (char *)&dword_0 + 1)
  {
    id v14 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand];
    if ((_DWORD)v14)
    {
      do
        char v21 = __ldaxr(v10);
      while (__stlxr(v21 - 1, v10));
      [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
      goto LABEL_36;
    }
  }

  BOOL v15 = mach_absolute_time();
  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 32) + 512LL))(a1, a2);
  id v16 = mach_absolute_time();
  int64_t v17 = vdupq_n_s64(1uLL);
  v17.i64[0] = v16 - v15;
  *(int64x2_t *)(v9 + 3696) = vaddq_s64(v17, *(int64x2_t *)(v9 + 3696));
  if (gCheckGLErrors)
  {
    check_errors(v9);
    if (gBreakOnError)
    {
      unint64_t v26 = *(unsigned int *)(v9 + 3404);
      if ((_DWORD)v26) {
        breakpoint_break(0LL, (volatile int *)0xFFFFFFFFLL, 3LL, v26, v9);
      }
    }
  }

  do
  {
    unsigned int v18 = __ldaxr(v10);
    unint64_t v19 = v18 - 1;
  }

  while (__stlxr(v19, v10));
  if (gCheckGLErrors) {
    uint64_t v20 = v19 < 1;
  }
  else {
    uint64_t v20 = 1;
  }
  if (!v20) {
    handle_opengl_thread_conflict((const void **)v9);
  }
}

void sub_26908( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  if (a12) {
    free(a12);
  }
  _Unwind_Resume(exception_object);
}

void draw_arrays(__GLIContextRec *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v8) {
    goto LABEL_12;
  }
  uint64_t v9 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v10 = v8[4];
    BOOL v11 = v10 >= (unint64_t)a1;
    else {
      signed int v12 = v8 + 1;
    }
    if (v11) {
      uint64_t v9 = (uint64_t)v8;
    }
    unint64_t v8 = (void *)*v12;
  }

  while (*v12);
  if (v9 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v9 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v9 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v13 = *(void *)(v9 + 40);
  id v14 = (unsigned int *)(v13 + 4640);
  do
  {
    unsigned int v15 = __ldaxr(v14);
    signed int v16 = v15 + 1;
  }

  while (__stlxr(v16, v14));
  if (gCheckGLErrors) {
    BOOL v17 = v16 <= 1;
  }
  else {
    BOOL v17 = 1;
  }
  if (v17)
  {
    id v56 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v55 = handle_opengl_thread_conflict((const void **)v13);
    id v56 = [(id)DYGetGLGuestAppClient(v55) waitOnGraphicsSemaphoreAssertions];
    if ((int)v56 >= 1)
    {
      do
LABEL_68:
        unsigned int v57 = __ldaxr(v14);
      while (__stlxr(v57 - 1, v14));
      uint64_t v58 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v56) graphicsLockWaitQueue];
      dispatch_sync_f(v58, 0LL, (dispatch_function_t)do_nothing);
      (*(void (**)(__GLIContextRec *, unint64_t, uint64_t, uint64_t))(*(void *)(v13 + 24) + 520LL))( a1,  a2,  a3,  a4);
      return;
    }
  }

  *(_WORD *)(v13 + 483_Block_object_dispose(va, 8) = 257;
  char v71 = 0LL;
  uint64_t v72 = 0LL;
  unsigned int v73 = 0;
  if ([(id)DYGetGLGuestAppClient(v56) state] != (char *)&dword_0 + 1
    || (id v18 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand], !(_DWORD)v18))
  {
    if ((int)a4 < 1)
    {
      uint64_t v19 = 0LL;
      uint64_t v21 = (uint64_t)v71;
      uint64_t v20 = v72;
      int64_t v22 = (char *)v72 - (_BYTE *)v71;
      unsigned int v23 = v73;
      unint64_t v24 = v73 - ((char *)v72 - (_BYTE *)v71);
      if (v24 > 0x3F) {
        goto LABEL_27;
      }
    }

    else
    {
      uint64_t v19 = copyout_vertex_arrays2((ContextInfo *)v13, (int)a3, a4, 1LL);
      uint64_t v21 = (uint64_t)v71;
      uint64_t v20 = v72;
      int64_t v22 = (char *)v72 - (_BYTE *)v71;
      unsigned int v23 = v73;
      unint64_t v24 = v73 - ((char *)v72 - (_BYTE *)v71);
      if (v24 > 0x3F) {
        goto LABEL_27;
      }
    }

    unsigned int v73 = ((319 - v24) & 0xFFFFFF00) + v23;
    uint64_t v21 = (uint64_t)malloc(v73);
    char v71 = (void *)v21;
    if (v21)
    {
      if ((v21 & 3) == 0)
      {
        uint64_t v20 = (_OWORD *)(v22 + v21);
LABEL_27:
        v20[2] = 0u;
        v20[3] = 0u;
        _OWORD *v20 = 0u;
        v20[1] = 0u;
        uint64_t v72 = v20 + 4;
        GPUTools::FB::Fbuf::align((char **)&v71);
        *(_DWORD *)(v21 + 4) = 139;
        *(_DWORD *)(v21 + 32) = 0;
        __uint64_t v70 = 0LL;
        uint64_t v25 = pthread_threadid_np(0LL, &v70);
        *(void *)(v21 + _Block_object_dispose(va, 8) = v70;
        strcpy((char *)(v21 + 36), "Ceii");
        *(void *)(v21 + 44) = *(void *)v13;
        *(_DWORD *)(v21 + 52) = a2;
        *(_DWORD *)(v21 + 56) = a3;
        *(_DWORD *)(v21 + 60) = a4;
        LOBYTE(v22) = byte_206EE3;
        if ((byte_206EE3 & 1) != 0) {
          breakpoint_break( (uint64_t)&v71,  (volatile int *)((char *)&stru_68.addr + 3),  1LL,  *(unsigned int *)(v13 + 3404),  v13);
        }
        uint64_t v26 = (uint64_t)[(id)DYGetGLGuestAppClient(v25) overrideFlags];
        if (v26 & 0x10 | v22 & 4) {
          goto LABEL_33;
        }
        id v27 = [(id)DYGetGLGuestAppClient(v26) overrideFlags];
        if (!(_DWORD)v27)
        {
          uint64_t v28 = mach_absolute_time();
          (*(void (**)(__GLIContextRec *, unint64_t, uint64_t, uint64_t))(*(void *)(v13 + 32) + 520LL))( a1,  a2,  a3,  a4);
          uint64_t v26 = mach_absolute_time();
          uint64_t v29 = v26 - v28;
          unint64_t v30 = g_DYTimebaseInfo;
          if (g_DYTimebaseInfo == *((_DWORD *)&g_DYTimebaseInfo + 1))
          {
            char v31 = v71;
            *((void *)v71 + 2) = v28;
            v31[3] = v29;
            if (!gCheckGLErrors) {
              goto LABEL_33;
            }
          }

          else
          {
            uint64_t v66 = __udivti3(g_DYTimebaseInfo * v29, (g_DYTimebaseInfo * (unsigned __int128)v29) >> 64);
            char v67 = v71;
            *((void *)v71 + 3) = v66;
            uint64_t v26 = __udivti3(v30 * v28, (v30 * (unsigned __int128)v28) >> 64);
            v67[2] = v26;
            if (!gCheckGLErrors) {
              goto LABEL_33;
            }
          }

          uint64_t v26 = check_errors(v13);
LABEL_33:
          id v32 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v26), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
          if ((_DWORD)v32) {
            id v32 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v71, v33);
          }
          unsigned int v35 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
          if ((_DWORD)v35) {
            id v32 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v71, v35, v34);
          }
          if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
            encode_driver_events((id *)v13, (uint64_t)&v71);
          }
          unsigned int v36 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)&v71);
          uint64_t v37 = *(unsigned int *)(v13 + 3404);
          if ((_DWORD)v37 && gBreakOnError)
          {
            uint64_t v59 = 3LL;
            uint64_t v60 = 0xFFFFFFFFLL;
          }

          else
          {
            if ((v22 & 2) == 0) {
              goto LABEL_42;
            }
            uint64_t v59 = 2LL;
            uint64_t v60 = 139LL;
          }

          breakpoint_break((uint64_t)&v71, (volatile int *)v60, v59, v37, v13);
LABEL_42:
          signed int v38 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v36) defaultFbufStream];
          BOOL v39 = (unsigned int *)((char *)v38 + 56);
          do
            unsigned int v40 = __ldaxr(v39);
          while (__stlxr(1u, v39));
          if (v40 == 1)
          {
            do
            {
              while (*v39 == 1)
                ;
              do
                unsigned int v41 = __ldaxr(v39);
              while (__stlxr(1u, v39));
            }

            while (v41 == 1);
          }

          GPUTools::FB::Stream::Write_nolock(v38, (GPUTools::FB::Fbuf *)&v71, *(unsigned int *)v71, 1);
          atomic_store(0, v39);
          if (v19)
          {
            GPUTools::FB::Encode((uint64_t)&v71, 4294955021LL, 4LL, (uint64_t)"C", v42, v43, v44, v45, *(void *)v13);
            uint64_t v47 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v46) defaultFbufStream];
            uint64_t v48 = (unsigned int *)((char *)v47 + 56);
            do
              unsigned int v49 = __ldaxr(v48);
            while (__stlxr(1u, v48));
            if (v49 == 1)
            {
              do
              {
                while (*v48 == 1)
                  ;
                do
                  unsigned int v50 = __ldaxr(v48);
                while (__stlxr(1u, v48));
              }

              while (v50 == 1);
            }

            GPUTools::FB::Stream::Write_nolock(v47, (GPUTools::FB::Fbuf *)&v71, *(unsigned int *)v71, 1);
            atomic_store(0, v48);
          }

          do
          {
            unsigned int v51 = __ldaxr(v14);
            signed int v52 = v51 - 1;
          }

          while (__stlxr(v52, v14));
          if (gCheckGLErrors) {
            BOOL v53 = v52 < 1;
          }
          else {
            BOOL v53 = 1;
          }
          if (!v53) {
            handle_opengl_thread_conflict((const void **)v13);
          }
          goto LABEL_62;
        }

        uint64_t v26 = (uint64_t)[(id)DYGetGLGuestAppClient(v27) overrideFlags];
        if ((v26 & 8) != 0) {
          goto LABEL_33;
        }
        uint64_t v61 = (volatile int *)[(id)DYGetGLGuestAppClient(v26) overrideFlags];
        apply_draw_overrides(v13, v61);
        uint64_t v21 = mach_absolute_time();
        (*(void (**)(__GLIContextRec *, unint64_t, uint64_t, uint64_t))(*(void *)(v13 + 32) + 520LL))( a1,  a2,  a3,  a4);
        uint64_t v62 = mach_absolute_time();
        uint64_t v63 = v62 - v21;
        a2 = g_DYTimebaseInfo;
        if (g_DYTimebaseInfo == *((_DWORD *)&g_DYTimebaseInfo + 1))
        {
          uint64_t v64 = v71;
          *((void *)v71 + 2) = v21;
          v64[3] = v63;
          if (!gCheckGLErrors)
          {
LABEL_77:
            int v65 = [(id)DYGetGLGuestAppClient(v62) overrideFlags];
            unapply_draw_overrides(v13, v65);
            goto LABEL_33;
          }

{
  void *v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  void *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  signed int v16;
  BOOL v17;
  id v18;
  _OWORD *v19;
  uint64_t v20;
  int64_t v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;
  id v31;
  GPUTools::FB::Fbuf *v32;
  unsigned int v33;
  GPUTools::FB::Fbuf *v34;
  dispatch_queue_s *v35;
  uint64_t v36;
  GPUTools::FB::Stream *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  signed int v42;
  BOOL v43;
  unsigned int v44;
  uint64_t v45;
  id v46;
  unsigned int v47;
  dispatch_queue_s *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  volatile int *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  int v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  void *v60;
  __uint64_t v61;
  void *v62;
  _OWORD *v63;
  unsigned int v64;
  unint64_t v8 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v8) {
    goto LABEL_12;
  }
  uint64_t v9 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v10 = v8[4];
    BOOL v11 = v10 >= (unint64_t)a1;
    else {
      signed int v12 = v8 + 1;
    }
    if (v11) {
      uint64_t v9 = (uint64_t)v8;
    }
    unint64_t v8 = (void *)*v12;
  }

  while (*v12);
  if (v9 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v9 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v9 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v13 = *(void *)(v9 + 40);
  id v14 = (unsigned int *)(v13 + 4640);
  do
  {
    unsigned int v15 = __ldaxr(v14);
    signed int v16 = v15 + 1;
  }

  while (__stlxr(v16, v14));
  if (gCheckGLErrors) {
    BOOL v17 = v16 <= 1;
  }
  else {
    BOOL v17 = 1;
  }
  if (v17)
  {
    uint64_t v46 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v45 = handle_opengl_thread_conflict((const void **)v13);
    uint64_t v46 = [(id)DYGetGLGuestAppClient(v45) waitOnGraphicsSemaphoreAssertions];
    if ((int)v46 >= 1)
    {
      do
LABEL_58:
        uint64_t v47 = __ldaxr(v14);
      while (__stlxr(v47 - 1, v14));
      uint64_t v48 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v46) graphicsLockWaitQueue];
      dispatch_sync_f(v48, 0LL, (dispatch_function_t)do_nothing);
      (*(void (**)(__GLIContextRec *, unint64_t, uint64_t, uint64_t))(*(void *)(v13 + 24) + 520LL))( a1,  a2,  a3,  a4);
      return;
    }
  }

  *(_WORD *)(v13 + 483_Block_object_dispose(va, 8) = 257;
  uint64_t v62 = 0LL;
  uint64_t v63 = 0LL;
  uint64_t v64 = 0;
  if ([(id)DYGetGLGuestAppClient(v46) state] != (char *)&dword_0 + 1
    || (id v18 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand], !(_DWORD)v18))
  {
    uint64_t v20 = (uint64_t)v62;
    uint64_t v19 = v63;
    uint64_t v21 = (char *)v63 - (_BYTE *)v62;
    int64_t v22 = v64;
    unsigned int v23 = v64 - ((char *)v63 - (_BYTE *)v62);
    if (v23 > 0x3F) {
      goto LABEL_24;
    }
    unsigned int v49 = (319 - v23) & 0xFFFFFF00;
    v64 += v49;
    uint64_t v20 = (uint64_t)malloc(v49 + v22);
    uint64_t v62 = (void *)v20;
    if (v20)
    {
      if ((v20 & 3) == 0)
      {
        uint64_t v19 = (_OWORD *)(v21 + v20);
LABEL_24:
        v19[2] = 0u;
        v19[3] = 0u;
        *uint64_t v19 = 0u;
        v19[1] = 0u;
        uint64_t v63 = v19 + 4;
        GPUTools::FB::Fbuf::align((char **)&v62);
        *(_DWORD *)(v20 + 4) = 139;
        *(_DWORD *)(v20 + 32) = 0;
        uint64_t v61 = 0LL;
        unint64_t v24 = pthread_threadid_np(0LL, &v61);
        *(void *)(v20 + _Block_object_dispose(va, 8) = v61;
        strcpy((char *)(v20 + 36), "Ceii");
        *(void *)(v20 + 44) = *(void *)v13;
        *(_DWORD *)(v20 + 52) = a2;
        *(_DWORD *)(v20 + 56) = a3;
        *(_DWORD *)(v20 + 60) = a4;
        LOBYTE(v21) = byte_206EE3;
        if ((byte_206EE3 & 1) != 0) {
          breakpoint_break( (uint64_t)&v62,  (volatile int *)((char *)&stru_68.addr + 3),  1LL,  *(unsigned int *)(v13 + 3404),  v13);
        }
        uint64_t v25 = (uint64_t)[(id)DYGetGLGuestAppClient(v24) overrideFlags];
        if (v25 & 0x10 | v21 & 4) {
          goto LABEL_30;
        }
        uint64_t v26 = [(id)DYGetGLGuestAppClient(v25) overrideFlags];
        if (!(_DWORD)v26)
        {
          id v27 = mach_absolute_time();
          (*(void (**)(__GLIContextRec *, unint64_t, uint64_t, uint64_t))(*(void *)(v13 + 32) + 520LL))( a1,  a2,  a3,  a4);
          uint64_t v25 = mach_absolute_time();
          uint64_t v28 = v25 - v27;
          uint64_t v29 = g_DYTimebaseInfo;
          if (g_DYTimebaseInfo == *((_DWORD *)&g_DYTimebaseInfo + 1))
          {
            unint64_t v30 = v62;
            *((void *)v62 + 2) = v27;
            v30[3] = v28;
            if (!gCheckGLErrors) {
              goto LABEL_30;
            }
          }

          else
          {
            unsigned int v57 = __udivti3(g_DYTimebaseInfo * v28, (g_DYTimebaseInfo * (unsigned __int128)v28) >> 64);
            uint64_t v58 = v62;
            *((void *)v62 + 3) = v57;
            uint64_t v25 = __udivti3(v29 * v27, (v29 * (unsigned __int128)v27) >> 64);
            v58[2] = v25;
            if (!gCheckGLErrors) {
              goto LABEL_30;
            }
          }

          uint64_t v25 = check_errors(v13);
LABEL_30:
          char v31 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v25), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
          if ((_DWORD)v31) {
            char v31 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)&v62, v32);
          }
          unsigned int v34 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
          if ((_DWORD)v34) {
            char v31 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)&v62, v34, v33);
          }
          if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v31), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
            encode_driver_events((id *)v13, (uint64_t)&v62);
          }
          unsigned int v35 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)&v62);
          unsigned int v36 = *(unsigned int *)(v13 + 3404);
          if ((_DWORD)v36 && gBreakOnError)
          {
            unsigned int v50 = 3LL;
            unsigned int v51 = 0xFFFFFFFFLL;
          }

          else
          {
            if ((v21 & 2) == 0) {
              goto LABEL_39;
            }
            unsigned int v50 = 2LL;
            unsigned int v51 = 139LL;
          }

          breakpoint_break((uint64_t)&v62, (volatile int *)v51, v50, v36, v13);
LABEL_39:
          uint64_t v37 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v35) defaultFbufStream];
          signed int v38 = (unsigned int *)((char *)v37 + 56);
          do
            BOOL v39 = __ldaxr(v38);
          while (__stlxr(1u, v38));
          if (v39 == 1)
          {
            do
            {
              while (*v38 == 1)
                ;
              do
                unsigned int v40 = __ldaxr(v38);
              while (__stlxr(1u, v38));
            }

            while (v40 == 1);
          }

          GPUTools::FB::Stream::Write_nolock(v37, (GPUTools::FB::Fbuf *)&v62, *(unsigned int *)v62, 1);
          atomic_store(0, v38);
          do
          {
            unsigned int v41 = __ldaxr(v14);
            uint64_t v42 = v41 - 1;
          }

          while (__stlxr(v42, v14));
          if (gCheckGLErrors) {
            uint64_t v43 = v42 < 1;
          }
          else {
            uint64_t v43 = 1;
          }
          if (!v43) {
            handle_opengl_thread_conflict((const void **)v13);
          }
          goto LABEL_52;
        }

        uint64_t v25 = (uint64_t)[(id)DYGetGLGuestAppClient(v26) overrideFlags];
        if ((v25 & 8) != 0) {
          goto LABEL_30;
        }
        signed int v52 = (volatile int *)[(id)DYGetGLGuestAppClient(v25) overrideFlags];
        apply_draw_overrides(v13, v52);
        uint64_t v20 = mach_absolute_time();
        (*(void (**)(__GLIContextRec *, unint64_t, uint64_t, uint64_t))(*(void *)(v13 + 32) + 520LL))( a1,  a2,  a3,  a4);
        BOOL v53 = mach_absolute_time();
        unsigned int v54 = v53 - v20;
        a2 = g_DYTimebaseInfo;
        if (g_DYTimebaseInfo == *((_DWORD *)&g_DYTimebaseInfo + 1))
        {
          uint64_t v55 = v62;
          *((void *)v62 + 2) = v20;
          v55[3] = v54;
          if (!gCheckGLErrors)
          {
LABEL_67:
            id v56 = [(id)DYGetGLGuestAppClient(v53) overrideFlags];
            unapply_draw_overrides(v13, v56);
            goto LABEL_30;
          }

LABEL_86:
          uint64_t v62 = check_errors(v13);
          goto LABEL_77;
        }

          uint64_t v64 = check_errors(v15);
          goto LABEL_77;
        }

LABEL_85:
        uint64_t v68 = __udivti3(a2 * v63, (a2 * (unsigned __int128)v63) >> 64);
        char v69 = v71;
        *((void *)v71 + 3) = v68;
        uint64_t v62 = __udivti3(a2 * v21, (a2 * (unsigned __int128)v21) >> 64);
        v69[2] = v62;
        if (!gCheckGLErrors) {
          goto LABEL_77;
        }
        goto LABEL_86;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", (const void *)v21, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    goto LABEL_85;
  }

  do
    unsigned int v54 = __ldaxr(v14);
  while (__stlxr(v54 - 1, v14));
  [(id)DYGetGLGuestAppClient(v18) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, unint64_t, uint64_t, uint64_t))(*(void *)(v13 + 24) + 520LL))( a1,  a2,  a3,  a4);
LABEL_62:
  if (v71) {
    free(v71);
  }
}

        __uint64_t v70 = __udivti3(a3 * v65, (a3 * (unsigned __int128)v65) >> 64);
        char v71 = v73;
        *((void *)v73 + 3) = v70;
        uint64_t v64 = __udivti3(a3 * v23, (a3 * (unsigned __int128)v23) >> 64);
        v71[2] = v64;
        if (!gCheckGLErrors) {
          goto LABEL_77;
        }
        goto LABEL_86;
      }

      dy_abort("misaligned fbuf buffer: %p, required alignment=%zu", (const void *)v23, 4uLL);
    }

    else
    {
      dy_abort("failed to allocate fbuf buffer");
    }

    __break(1u);
    goto LABEL_85;
  }

  do
    id v56 = __ldaxr(v16);
  while (__stlxr(v56 - 1, v16));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, unint64_t, uint64_t, uint64_t))(*(void *)(v15 + 24) + 6096LL))( a1,  a2,  a3,  a4,  a5);
LABEL_62:
  if (v73) {
    free(v73);
  }
}

void sub_26FBC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  if (a12) {
    free(a12);
  }
  _Unwind_Resume(exception_object);
}

void draw_elements(__GLIContextRec *a1, uint64_t a2, int a3, GPUTools::GL *a4, void *a5)
{
  int v84 = a3;
  char v83 = a5;
  BOOL v7 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v7) {
    goto LABEL_12;
  }
  uint64_t v8 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v9 = v7[4];
    BOOL v10 = v9 >= (unint64_t)a1;
    else {
      BOOL v11 = v7 + 1;
    }
    if (v10) {
      uint64_t v8 = (uint64_t)v7;
    }
    BOOL v7 = (void *)*v11;
  }

  while (*v11);
  if (v8 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v8 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v8 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v12 = *(void *)(v8 + 40);
  uint64_t v13 = (unsigned int *)(v12 + 4640);
  do
  {
    unsigned int v14 = __ldaxr(v13);
    signed int v15 = v14 + 1;
  }

  while (__stlxr(v15, v13));
  if (gCheckGLErrors) {
    BOOL v16 = v15 <= 1;
  }
  else {
    BOOL v16 = 1;
  }
  if (v16)
  {
    id v63 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v62 = handle_opengl_thread_conflict((const void **)v12);
    id v63 = [(id)DYGetGLGuestAppClient(v62) waitOnGraphicsSemaphoreAssertions];
    if ((int)v63 >= 1)
    {
      do
LABEL_71:
        unsigned int v64 = __ldaxr(v13);
      while (__stlxr(v64 - 1, v13));
      int v65 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v63) graphicsLockWaitQueue];
      dispatch_sync_f(v65, 0LL, (dispatch_function_t)do_nothing);
      (*(void (**)(__GLIContextRec *, uint64_t, void, GPUTools::GL *, void *))(*(void *)(v12 + 24) + 536LL))( a1,  a2,  v84,  a4,  v83);
      return;
    }
  }

  *(_WORD *)(v12 + 483_Block_object_dispose(va, 8) = 257;
  v81[0] = 0LL;
  v81[1] = 0LL;
  int v82 = 0;
  if ([(id)DYGetGLGuestAppClient(v63) state] != (char *)&dword_0 + 1
    || (id v17 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand], !(_DWORD)v17))
  {
    strlcpy((char *)(v12 + 4709), "Ceie", 0x40uLL);
    if (v84)
    {
      if (has_client_memory_vertex_arrays((ContextInfo *)v12))
      {
        uint64_t v18 = determine_element_range((ContextInfo *)v12, &v84, (int)a4, (const void **)&v83, 0LL, 1);
        uint64_t v79 = copyout_vertex_arrays2((ContextInfo *)v12, v18, v19, 1LL);
        if (*(_DWORD *)(v12 + 2036))
        {
LABEL_26:
          strlcat((char *)(v12 + 4709), "t", 0x40uLL);
          goto LABEL_30;
        }
      }

      else
      {
        uint64_t v79 = 0LL;
        if (*(_DWORD *)(v12 + 2036)) {
          goto LABEL_26;
        }
      }

      strlcat((char *)(v12 + 4709), "U", 0x40uLL);
      uint64_t v26 = GPUTools::GL::dy_type_size(a4, v25);
      int v27 = v26;
      int v28 = v84;
      uint64_t v29 = v83;
      uint64_t v30 = DYGetGLGuestAppClient(v26);
      GPUTools::Interpose::DYSavePointer(v30, (v28 * v27), v29, v12 + 4644, 65LL, 0LL, 1LL, 0LL, 0LL);
    }

    else
    {
      strlcat((char *)(v12 + 4709), "t", 0x40uLL);
      uint64_t v79 = 0LL;
    }

LABEL_30:
    GPUTools::FB::Encode((uint64_t)v81, 143LL, v12 + 4709, v20, v21, v22, v23, v24, *(void *)v12);
    char v32 = byte_206EE7;
    if ((byte_206EE7 & 1) != 0) {
      breakpoint_break( (uint64_t)v81,  (volatile int *)((char *)&stru_68.addr + 7),  1LL,  *(unsigned int *)(v12 + 3404),  v12);
    }
    uint64_t v33 = (uint64_t)[(id)DYGetGLGuestAppClient(v31) overrideFlags];
    if (v33 & 0x10 | v32 & 4) {
      goto LABEL_36;
    }
    id v34 = [(id)DYGetGLGuestAppClient(v33) overrideFlags];
    if (!(_DWORD)v34)
    {
      uint64_t v35 = mach_absolute_time();
      (*(void (**)(__GLIContextRec *, uint64_t, void, GPUTools::GL *, void *))(*(void *)(v12 + 32) + 536LL))( a1,  a2,  v84,  a4,  v83);
      uint64_t v33 = mach_absolute_time();
      uint64_t v36 = v33 - v35;
      unint64_t v37 = g_DYTimebaseInfo;
      if (g_DYTimebaseInfo == *((_DWORD *)&g_DYTimebaseInfo + 1))
      {
        signed int v38 = v81[0];
        *((void *)v81[0] + 2) = v35;
        v38[3] = v36;
        if (!gCheckGLErrors) {
          goto LABEL_36;
        }
      }

      else
      {
        uint64_t v75 = __udivti3(g_DYTimebaseInfo * v36, (g_DYTimebaseInfo * (unsigned __int128)v36) >> 64);
        char v76 = v81[0];
        *((void *)v81[0] + 3) = v75;
        uint64_t v33 = __udivti3(v37 * v35, (v37 * (unsigned __int128)v35) >> 64);
        _OWORD v76[2] = v33;
        if (!gCheckGLErrors) {
          goto LABEL_36;
        }
      }

      uint64_t v33 = check_errors(v12);
LABEL_36:
      id v39 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
      if ((_DWORD)v39) {
        id v39 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v81, v40);
      }
      uint64_t v42 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v12 + 3404);
      if ((_DWORD)v42) {
        id v39 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v81, v42, v41);
      }
      if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v39), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
        encode_driver_events((id *)v12, (uint64_t)v81);
      }
      uint64_t v43 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v12 + 3480),  (GPUTools::FB::Fbuf *)(v12 + 3520),  (GPUTools::FB *)v81);
      uint64_t v44 = *(unsigned int *)(v12 + 3404);
      if ((_DWORD)v44 && gBreakOnError)
      {
        uint64_t v66 = 3LL;
        uint64_t v67 = 0xFFFFFFFFLL;
      }

      else
      {
        if ((v32 & 2) == 0) {
          goto LABEL_45;
        }
        uint64_t v66 = 2LL;
        uint64_t v67 = 143LL;
      }

      breakpoint_break((uint64_t)v81, (volatile int *)v67, v66, v44, v12);
LABEL_45:
      uint64_t v45 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v43) defaultFbufStream];
      uint64_t v46 = (unsigned int *)((char *)v45 + 56);
      do
        unsigned int v47 = __ldaxr(v46);
      while (__stlxr(1u, v46));
      if (v47 == 1)
      {
        do
        {
          while (*v46 == 1)
            ;
          do
            unsigned int v48 = __ldaxr(v46);
          while (__stlxr(1u, v46));
        }

        while (v48 == 1);
      }

      GPUTools::FB::Stream::Write_nolock(v45, (GPUTools::FB::Fbuf *)v81, *(unsigned int *)v81[0], 1);
      atomic_store(0, v46);
      if (v79)
      {
        GPUTools::FB::Encode((uint64_t)v81, 4294955021LL, 4LL, (uint64_t)"C", v49, v50, v51, v52, *(void *)v12);
        unsigned int v54 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v53) defaultFbufStream];
        uint64_t v55 = (unsigned int *)((char *)v54 + 56);
        do
          unsigned int v56 = __ldaxr(v55);
        while (__stlxr(1u, v55));
        if (v56 == 1)
        {
          do
          {
            while (*v55 == 1)
              ;
            do
              unsigned int v57 = __ldaxr(v55);
            while (__stlxr(1u, v55));
          }

          while (v57 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v54, (GPUTools::FB::Fbuf *)v81, *(unsigned int *)v81[0], 1);
        atomic_store(0, v55);
      }

      do
      {
        unsigned int v58 = __ldaxr(v13);
        signed int v59 = v58 - 1;
      }

      while (__stlxr(v59, v13));
      if (gCheckGLErrors) {
        BOOL v60 = v59 < 1;
      }
      else {
        BOOL v60 = 1;
      }
      if (!v60) {
        handle_opengl_thread_conflict((const void **)v12);
      }
      goto LABEL_65;
    }

    uint64_t v33 = (uint64_t)[(id)DYGetGLGuestAppClient(v34) overrideFlags];
    if ((v33 & 8) != 0) {
      goto LABEL_36;
    }
    uint64_t v68 = (volatile int *)[(id)DYGetGLGuestAppClient(v33) overrideFlags];
    apply_draw_overrides(v12, v68);
    uint64_t v69 = mach_absolute_time();
    (*(void (**)(__GLIContextRec *, uint64_t, void, GPUTools::GL *, void *))(*(void *)(v12 + 32) + 536LL))( a1,  a2,  v84,  a4,  v83);
    uint64_t v70 = mach_absolute_time();
    uint64_t v71 = v70 - v69;
    unint64_t v72 = g_DYTimebaseInfo;
    if (g_DYTimebaseInfo == *((_DWORD *)&g_DYTimebaseInfo + 1))
    {
      unsigned int v73 = v81[0];
      *((void *)v81[0] + 2) = v69;
      v73[3] = v71;
      if (!gCheckGLErrors)
      {
LABEL_77:
        int v74 = [(id)DYGetGLGuestAppClient(v70) overrideFlags];
        unapply_draw_overrides(v12, v74);
        goto LABEL_36;
      }
    }

    else
    {
      uint64_t v77 = __udivti3(g_DYTimebaseInfo * v71, (g_DYTimebaseInfo * (unsigned __int128)v71) >> 64);
      uint64_t v78 = v81[0];
      *((void *)v81[0] + 3) = v77;
      uint64_t v70 = __udivti3(v72 * v69, (v72 * (unsigned __int128)v69) >> 64);
      v78[2] = v70;
      if (!gCheckGLErrors) {
        goto LABEL_77;
      }
    }

    uint64_t v70 = check_errors(v12);
    goto LABEL_77;
  }

  do
    unsigned int v61 = __ldaxr(v13);
  while (__stlxr(v61 - 1, v13));
  [(id)DYGetGLGuestAppClient(v17) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, void, GPUTools::GL *, void *))(*(void *)(v12 + 24) + 536LL))( a1,  a2,  v84,  a4,  v83);
LABEL_65:
  if (v81[0]) {
    free(v81[0]);
  }
}

    char v32 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v32) {
      char v32 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v55, v33);
    }
    uint64_t v35 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v35) {
      char v32 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v55, v35, v34);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v55);
    }
    uint64_t v36 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v55);
    unint64_t v37 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v37 && gBreakOnError)
    {
      uint64_t v50 = 3LL;
      uint64_t v51 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v26 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v50 = 2LL;
      uint64_t v51 = 583LL;
    }

    breakpoint_break((uint64_t)v55, (volatile int *)v51, v50, v37, v13);
LABEL_39:
    signed int v38 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v36) defaultFbufStream];
    id v39 = (unsigned int *)((char *)v38 + 56);
    do
      unsigned int v40 = __ldaxr(v39);
    while (__stlxr(1u, v39));
    if (v40 == 1)
    {
      do
      {
        while (*v39 == 1)
          ;
        do
          unsigned int v41 = __ldaxr(v39);
        while (__stlxr(1u, v39));
      }

      while (v41 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v38, (GPUTools::FB::Fbuf *)v55, *(unsigned int *)v55[0], 1);
    atomic_store(0, v39);
    do
    {
      uint64_t v42 = __ldaxr(v14);
      uint64_t v43 = v42 - 1;
    }

    while (__stlxr(v43, v14));
    if (gCheckGLErrors) {
      uint64_t v44 = v43 < 1;
    }
    else {
      uint64_t v44 = 1;
    }
    if (!v44) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    goto LABEL_52;
  }

  do
    uint64_t v45 = __ldaxr(v14);
  while (__stlxr(v45 - 1, v14));
  [(id)DYGetGLGuestAppClient(v19) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, GPUTools::GL *, float))(*(void *)(v13 + 24) + 2320LL))( a1,  a2,  a3,  a4);
LABEL_52:
  if (v55[0]) {
    free(v55[0]);
  }
}

    char v32 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v32) {
      char v32 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v55, v33);
    }
    uint64_t v35 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v35) {
      char v32 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v55, v35, v34);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v55);
    }
    uint64_t v36 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v55);
    unint64_t v37 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v37 && gBreakOnError)
    {
      uint64_t v50 = 3LL;
      uint64_t v51 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v26 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v50 = 2LL;
      uint64_t v51 = 584LL;
    }

    breakpoint_break((uint64_t)v55, (volatile int *)v51, v50, v37, v13);
LABEL_39:
    signed int v38 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v36) defaultFbufStream];
    id v39 = (unsigned int *)((char *)v38 + 56);
    do
      unsigned int v40 = __ldaxr(v39);
    while (__stlxr(1u, v39));
    if (v40 == 1)
    {
      do
      {
        while (*v39 == 1)
          ;
        do
          unsigned int v41 = __ldaxr(v39);
        while (__stlxr(1u, v39));
      }

      while (v41 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v38, (GPUTools::FB::Fbuf *)v55, *(unsigned int *)v55[0], 1);
    atomic_store(0, v39);
    do
    {
      uint64_t v42 = __ldaxr(v14);
      uint64_t v43 = v42 - 1;
    }

    while (__stlxr(v43, v14));
    if (gCheckGLErrors) {
      uint64_t v44 = v43 < 1;
    }
    else {
      uint64_t v44 = 1;
    }
    if (!v44) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    goto LABEL_52;
  }

  do
    uint64_t v45 = __ldaxr(v14);
  while (__stlxr(v45 - 1, v14));
  [(id)DYGetGLGuestAppClient(v19) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, GPUTools::GL *, const float *))(*(void *)(v13 + 24) + 2328LL))( a1,  a2,  a3,  a4);
LABEL_52:
  if (v55[0]) {
    free(v55[0]);
  }
}

    char v32 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v32) {
      char v32 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v55, v33);
    }
    uint64_t v35 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v35) {
      char v32 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v55, v35, v34);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v55);
    }
    uint64_t v36 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v55);
    unint64_t v37 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v37 && gBreakOnError)
    {
      uint64_t v50 = 3LL;
      uint64_t v51 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v26 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v50 = 2LL;
      uint64_t v51 = 585LL;
    }

    breakpoint_break((uint64_t)v55, (volatile int *)v51, v50, v37, v13);
LABEL_39:
    signed int v38 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v36) defaultFbufStream];
    id v39 = (unsigned int *)((char *)v38 + 56);
    do
      unsigned int v40 = __ldaxr(v39);
    while (__stlxr(1u, v39));
    if (v40 == 1)
    {
      do
      {
        while (*v39 == 1)
          ;
        do
          unsigned int v41 = __ldaxr(v39);
        while (__stlxr(1u, v39));
      }

      while (v41 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v38, (GPUTools::FB::Fbuf *)v55, *(unsigned int *)v55[0], 1);
    atomic_store(0, v39);
    do
    {
      uint64_t v42 = __ldaxr(v14);
      uint64_t v43 = v42 - 1;
    }

    while (__stlxr(v43, v14));
    if (gCheckGLErrors) {
      uint64_t v44 = v43 < 1;
    }
    else {
      uint64_t v44 = 1;
    }
    if (!v44) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    goto LABEL_52;
  }

  do
    uint64_t v45 = __ldaxr(v14);
  while (__stlxr(v45 - 1, v14));
  [(id)DYGetGLGuestAppClient(v19) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, GPUTools::GL *, uint64_t))(*(void *)(v13 + 24) + 2336LL))( a1,  a2,  a3,  a4);
LABEL_52:
  if (v55[0]) {
    free(v55[0]);
  }
}

    char v32 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v32) {
      char v32 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v55, v33);
    }
    uint64_t v35 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v35) {
      char v32 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v55, v35, v34);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v55);
    }
    uint64_t v36 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v55);
    unint64_t v37 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v37 && gBreakOnError)
    {
      uint64_t v50 = 3LL;
      uint64_t v51 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v26 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v50 = 2LL;
      uint64_t v51 = 586LL;
    }

    breakpoint_break((uint64_t)v55, (volatile int *)v51, v50, v37, v13);
LABEL_39:
    signed int v38 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v36) defaultFbufStream];
    id v39 = (unsigned int *)((char *)v38 + 56);
    do
      unsigned int v40 = __ldaxr(v39);
    while (__stlxr(1u, v39));
    if (v40 == 1)
    {
      do
      {
        while (*v39 == 1)
          ;
        do
          unsigned int v41 = __ldaxr(v39);
        while (__stlxr(1u, v39));
      }

      while (v41 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v38, (GPUTools::FB::Fbuf *)v55, *(unsigned int *)v55[0], 1);
    atomic_store(0, v39);
    do
    {
      uint64_t v42 = __ldaxr(v14);
      uint64_t v43 = v42 - 1;
    }

    while (__stlxr(v43, v14));
    if (gCheckGLErrors) {
      uint64_t v44 = v43 < 1;
    }
    else {
      uint64_t v44 = 1;
    }
    if (!v44) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    goto LABEL_52;
  }

  do
    uint64_t v45 = __ldaxr(v14);
  while (__stlxr(v45 - 1, v14));
  [(id)DYGetGLGuestAppClient(v19) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, GPUTools::GL *, const int *))(*(void *)(v13 + 24) + 2344LL))( a1,  a2,  a3,  a4);
LABEL_52:
  if (v55[0]) {
    free(v55[0]);
  }
}

    char v32 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v32) {
      char v32 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v55, v33);
    }
    uint64_t v35 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v35) {
      char v32 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v55, v35, v34);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v55);
    }
    uint64_t v36 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v55);
    unint64_t v37 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v37 && gBreakOnError)
    {
      uint64_t v50 = 3LL;
      uint64_t v51 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v26 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v50 = 2LL;
      uint64_t v51 = 598LL;
    }

    breakpoint_break((uint64_t)v55, (volatile int *)v51, v50, v37, v13);
LABEL_39:
    signed int v38 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v36) defaultFbufStream];
    id v39 = (unsigned int *)((char *)v38 + 56);
    do
      unsigned int v40 = __ldaxr(v39);
    while (__stlxr(1u, v39));
    if (v40 == 1)
    {
      do
      {
        while (*v39 == 1)
          ;
        do
          unsigned int v41 = __ldaxr(v39);
        while (__stlxr(1u, v39));
      }

      while (v41 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v38, (GPUTools::FB::Fbuf *)v55, *(unsigned int *)v55[0], 1);
    atomic_store(0, v39);
    do
    {
      uint64_t v42 = __ldaxr(v14);
      uint64_t v43 = v42 - 1;
    }

    while (__stlxr(v43, v14));
    if (gCheckGLErrors) {
      uint64_t v44 = v43 < 1;
    }
    else {
      uint64_t v44 = 1;
    }
    if (!v44) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    goto LABEL_52;
  }

  do
    uint64_t v45 = __ldaxr(v14);
  while (__stlxr(v45 - 1, v14));
  [(id)DYGetGLGuestAppClient(v19) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, GPUTools::GL *, float))(*(void *)(v13 + 24) + 2416LL))( a1,  a2,  a3,  a4);
LABEL_52:
  if (v55[0]) {
    free(v55[0]);
  }
}

    char v32 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v32) {
      char v32 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v55, v33);
    }
    uint64_t v35 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v35) {
      char v32 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v55, v35, v34);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v55);
    }
    uint64_t v36 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v55);
    unint64_t v37 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v37 && gBreakOnError)
    {
      uint64_t v50 = 3LL;
      uint64_t v51 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v26 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v50 = 2LL;
      uint64_t v51 = 599LL;
    }

    breakpoint_break((uint64_t)v55, (volatile int *)v51, v50, v37, v13);
LABEL_39:
    signed int v38 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v36) defaultFbufStream];
    id v39 = (unsigned int *)((char *)v38 + 56);
    do
      unsigned int v40 = __ldaxr(v39);
    while (__stlxr(1u, v39));
    if (v40 == 1)
    {
      do
      {
        while (*v39 == 1)
          ;
        do
          unsigned int v41 = __ldaxr(v39);
        while (__stlxr(1u, v39));
      }

      while (v41 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v38, (GPUTools::FB::Fbuf *)v55, *(unsigned int *)v55[0], 1);
    atomic_store(0, v39);
    do
    {
      uint64_t v42 = __ldaxr(v14);
      uint64_t v43 = v42 - 1;
    }

    while (__stlxr(v43, v14));
    if (gCheckGLErrors) {
      uint64_t v44 = v43 < 1;
    }
    else {
      uint64_t v44 = 1;
    }
    if (!v44) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    goto LABEL_52;
  }

  do
    uint64_t v45 = __ldaxr(v14);
  while (__stlxr(v45 - 1, v14));
  [(id)DYGetGLGuestAppClient(v19) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, GPUTools::GL *, const float *))(*(void *)(v13 + 24) + 2424LL))( a1,  a2,  a3,  a4);
LABEL_52:
  if (v55[0]) {
    free(v55[0]);
  }
}

    char v32 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v32) {
      char v32 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v55, v33);
    }
    uint64_t v35 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v35) {
      char v32 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v55, v35, v34);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v55);
    }
    uint64_t v36 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v55);
    unint64_t v37 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v37 && gBreakOnError)
    {
      uint64_t v50 = 3LL;
      uint64_t v51 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v26 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v50 = 2LL;
      uint64_t v51 = 600LL;
    }

    breakpoint_break((uint64_t)v55, (volatile int *)v51, v50, v37, v13);
LABEL_39:
    signed int v38 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v36) defaultFbufStream];
    id v39 = (unsigned int *)((char *)v38 + 56);
    do
      unsigned int v40 = __ldaxr(v39);
    while (__stlxr(1u, v39));
    if (v40 == 1)
    {
      do
      {
        while (*v39 == 1)
          ;
        do
          unsigned int v41 = __ldaxr(v39);
        while (__stlxr(1u, v39));
      }

      while (v41 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v38, (GPUTools::FB::Fbuf *)v55, *(unsigned int *)v55[0], 1);
    atomic_store(0, v39);
    do
    {
      uint64_t v42 = __ldaxr(v14);
      uint64_t v43 = v42 - 1;
    }

    while (__stlxr(v43, v14));
    if (gCheckGLErrors) {
      uint64_t v44 = v43 < 1;
    }
    else {
      uint64_t v44 = 1;
    }
    if (!v44) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    goto LABEL_52;
  }

  do
    uint64_t v45 = __ldaxr(v14);
  while (__stlxr(v45 - 1, v14));
  [(id)DYGetGLGuestAppClient(v19) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, GPUTools::GL *, uint64_t))(*(void *)(v13 + 24) + 2432LL))( a1,  a2,  a3,  a4);
LABEL_52:
  if (v55[0]) {
    free(v55[0]);
  }
}

    char v32 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v32) {
      char v32 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v55, v33);
    }
    uint64_t v35 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v35) {
      char v32 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v55, v35, v34);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v55);
    }
    uint64_t v36 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v55);
    unint64_t v37 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v37 && gBreakOnError)
    {
      uint64_t v50 = 3LL;
      uint64_t v51 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v26 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v50 = 2LL;
      uint64_t v51 = 601LL;
    }

    breakpoint_break((uint64_t)v55, (volatile int *)v51, v50, v37, v13);
LABEL_39:
    signed int v38 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v36) defaultFbufStream];
    id v39 = (unsigned int *)((char *)v38 + 56);
    do
      unsigned int v40 = __ldaxr(v39);
    while (__stlxr(1u, v39));
    if (v40 == 1)
    {
      do
      {
        while (*v39 == 1)
          ;
        do
          unsigned int v41 = __ldaxr(v39);
        while (__stlxr(1u, v39));
      }

      while (v41 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v38, (GPUTools::FB::Fbuf *)v55, *(unsigned int *)v55[0], 1);
    atomic_store(0, v39);
    do
    {
      uint64_t v42 = __ldaxr(v14);
      uint64_t v43 = v42 - 1;
    }

    while (__stlxr(v43, v14));
    if (gCheckGLErrors) {
      uint64_t v44 = v43 < 1;
    }
    else {
      uint64_t v44 = 1;
    }
    if (!v44) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    goto LABEL_52;
  }

  do
    uint64_t v45 = __ldaxr(v14);
  while (__stlxr(v45 - 1, v14));
  [(id)DYGetGLGuestAppClient(v19) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, GPUTools::GL *, const int *))(*(void *)(v13 + 24) + 2440LL))( a1,  a2,  a3,  a4);
LABEL_52:
  if (v55[0]) {
    free(v55[0]);
  }
}

    unint64_t v37 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v37) {
      unint64_t v37 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v60, v38);
    }
    unsigned int v40 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v19 + 3404);
    if ((_DWORD)v40) {
      unint64_t v37 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v60, v40, v39);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v37), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v19, (uint64_t)v60);
    }
    unsigned int v41 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v19 + 3480),  (GPUTools::FB::Fbuf *)(v19 + 3520),  (GPUTools::FB *)v60);
    uint64_t v42 = *(unsigned int *)(v19 + 3404);
    if ((_DWORD)v42 && gBreakOnError)
    {
      uint64_t v55 = 3LL;
      unsigned int v56 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v59 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v55 = 2LL;
      unsigned int v56 = 730LL;
    }

    breakpoint_break((uint64_t)v60, (volatile int *)v56, v55, v42, v19);
LABEL_39:
    uint64_t v43 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v41) defaultFbufStream];
    uint64_t v44 = (unsigned int *)((char *)v43 + 56);
    do
      uint64_t v45 = __ldaxr(v44);
    while (__stlxr(1u, v44));
    if (v45 == 1)
    {
      do
      {
        while (*v44 == 1)
          ;
        do
          uint64_t v46 = __ldaxr(v44);
        while (__stlxr(1u, v44));
      }

      while (v46 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v43, (GPUTools::FB::Fbuf *)v60, *(unsigned int *)v60[0], 1);
    atomic_store(0, v44);
    do
    {
      unsigned int v47 = __ldaxr(v20);
      unsigned int v48 = v47 - 1;
    }

    while (__stlxr(v48, v20));
    if (gCheckGLErrors) {
      uint64_t v49 = v48 < 1;
    }
    else {
      uint64_t v49 = 1;
    }
    if (!v49) {
      handle_opengl_thread_conflict((const void **)v19);
    }
    goto LABEL_52;
  }

  do
    uint64_t v50 = __ldaxr(v20);
  while (__stlxr(v50 - 1, v20));
  [(id)DYGetGLGuestAppClient(v28) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const void *))(*(void *)(v19 + 24) + 4088LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7);
LABEL_52:
  if (v60[0]) {
    free(v60[0]);
  }
}

    int v27 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v22), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v27) {
      int v27 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v53, v28);
    }
    uint64_t v30 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v30) {
      int v27 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v53, v30, v29);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)v53);
    }
    uint64_t v31 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)v53);
    char v32 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v32 && gBreakOnError)
    {
      uint64_t v45 = 3LL;
      uint64_t v46 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v21 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v45 = 2LL;
      uint64_t v46 = 609LL;
    }

    breakpoint_break((uint64_t)v53, (volatile int *)v46, v45, v32, v11);
LABEL_39:
    uint64_t v33 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v31) defaultFbufStream];
    id v34 = (unsigned int *)((char *)v33 + 56);
    do
      uint64_t v35 = __ldaxr(v34);
    while (__stlxr(1u, v34));
    if (v35 == 1)
    {
      do
      {
        while (*v34 == 1)
          ;
        do
          uint64_t v36 = __ldaxr(v34);
        while (__stlxr(1u, v34));
      }

      while (v36 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v33, (GPUTools::FB::Fbuf *)v53, *(unsigned int *)v53[0], 1);
    atomic_store(0, v34);
    do
    {
      unint64_t v37 = __ldaxr(v12);
      signed int v38 = v37 - 1;
    }

    while (__stlxr(v38, v12));
    if (gCheckGLErrors) {
      id v39 = v38 < 1;
    }
    else {
      id v39 = 1;
    }
    if (!v39) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    GPUTools::FB::FIFOArgumentProvider::~FIFOArgumentProvider((GPUTools::FB::FIFOArgumentProvider *)&v49);
    goto LABEL_53;
  }

  do
    unsigned int v40 = __ldaxr(v12);
  while (__stlxr(v40 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, float))(*(void *)(v11 + 24) + 4816LL))(a1, a2, a3);
LABEL_53:
  if (v53[0]) {
    free(v53[0]);
  }
}

    uint64_t v29 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v24), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v29) {
      uint64_t v29 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v55, v30);
    }
    char v32 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v32) {
      uint64_t v29 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v55, v32, v31);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v55);
    }
    uint64_t v33 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v55);
    id v34 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v34 && gBreakOnError)
    {
      unsigned int v47 = 3LL;
      unsigned int v48 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v23 & 2) == 0) {
        goto LABEL_39;
      }
      unsigned int v47 = 2LL;
      unsigned int v48 = 615LL;
    }

    breakpoint_break((uint64_t)v55, (volatile int *)v48, v47, v34, v13);
LABEL_39:
    uint64_t v35 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v33) defaultFbufStream];
    uint64_t v36 = (unsigned int *)((char *)v35 + 56);
    do
      unint64_t v37 = __ldaxr(v36);
    while (__stlxr(1u, v36));
    if (v37 == 1)
    {
      do
      {
        while (*v36 == 1)
          ;
        do
          signed int v38 = __ldaxr(v36);
        while (__stlxr(1u, v36));
      }

      while (v38 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v35, (GPUTools::FB::Fbuf *)v55, *(unsigned int *)v55[0], 1);
    atomic_store(0, v36);
    do
    {
      id v39 = __ldaxr(v14);
      unsigned int v40 = v39 - 1;
    }

    while (__stlxr(v40, v14));
    if (gCheckGLErrors) {
      unsigned int v41 = v40 < 1;
    }
    else {
      unsigned int v41 = 1;
    }
    if (!v41) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    GPUTools::FB::FIFOArgumentProvider::~FIFOArgumentProvider((GPUTools::FB::FIFOArgumentProvider *)&v51);
    goto LABEL_53;
  }

  do
    uint64_t v42 = __ldaxr(v14);
  while (__stlxr(v42 - 1, v14));
  [(id)DYGetGLGuestAppClient(v18) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, float, float))(*(void *)(v13 + 24) + 4824LL))(a1, a2, a3, a4);
LABEL_53:
  if (v55[0]) {
    free(v55[0]);
  }
}

    uint64_t v31 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v26), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v31) {
      uint64_t v31 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v57, v32);
    }
    id v34 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v15 + 3404);
    if ((_DWORD)v34) {
      uint64_t v31 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v57, v34, v33);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v31), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v15, (uint64_t)v57);
    }
    uint64_t v35 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v15 + 3480),  (GPUTools::FB::Fbuf *)(v15 + 3520),  (GPUTools::FB *)v57);
    uint64_t v36 = *(unsigned int *)(v15 + 3404);
    if ((_DWORD)v36 && gBreakOnError)
    {
      uint64_t v49 = 3LL;
      uint64_t v50 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v25 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v49 = 2LL;
      uint64_t v50 = 621LL;
    }

    breakpoint_break((uint64_t)v57, (volatile int *)v50, v49, v36, v15);
LABEL_39:
    unint64_t v37 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v35) defaultFbufStream];
    signed int v38 = (unsigned int *)((char *)v37 + 56);
    do
      id v39 = __ldaxr(v38);
    while (__stlxr(1u, v38));
    if (v39 == 1)
    {
      do
      {
        while (*v38 == 1)
          ;
        do
          unsigned int v40 = __ldaxr(v38);
        while (__stlxr(1u, v38));
      }

      while (v40 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v37, (GPUTools::FB::Fbuf *)v57, *(unsigned int *)v57[0], 1);
    atomic_store(0, v38);
    do
    {
      unsigned int v41 = __ldaxr(v16);
      uint64_t v42 = v41 - 1;
    }

    while (__stlxr(v42, v16));
    if (gCheckGLErrors) {
      uint64_t v43 = v42 < 1;
    }
    else {
      uint64_t v43 = 1;
    }
    if (!v43) {
      handle_opengl_thread_conflict((const void **)v15);
    }
    GPUTools::FB::FIFOArgumentProvider::~FIFOArgumentProvider((GPUTools::FB::FIFOArgumentProvider *)&v53);
    goto LABEL_53;
  }

  do
    uint64_t v44 = __ldaxr(v16);
  while (__stlxr(v44 - 1, v16));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, float, float, float))(*(void *)(v15 + 24) + 4832LL))( a1,  a2,  a3,  a4,  a5);
LABEL_53:
  if (v57[0]) {
    free(v57[0]);
  }
}

    uint64_t v33 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v33) {
      uint64_t v33 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v59, v34);
    }
    uint64_t v36 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v17 + 3404);
    if ((_DWORD)v36) {
      uint64_t v33 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v59, v36, v35);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v17, (uint64_t)v59);
    }
    unint64_t v37 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v17 + 3480),  (GPUTools::FB::Fbuf *)(v17 + 3520),  (GPUTools::FB *)v59);
    signed int v38 = *(unsigned int *)(v17 + 3404);
    if ((_DWORD)v38 && gBreakOnError)
    {
      uint64_t v51 = 3LL;
      uint64_t v52 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v27 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v51 = 2LL;
      uint64_t v52 = 627LL;
    }

    breakpoint_break((uint64_t)v59, (volatile int *)v52, v51, v38, v17);
LABEL_39:
    id v39 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v37) defaultFbufStream];
    unsigned int v40 = (unsigned int *)((char *)v39 + 56);
    do
      unsigned int v41 = __ldaxr(v40);
    while (__stlxr(1u, v40));
    if (v41 == 1)
    {
      do
      {
        while (*v40 == 1)
          ;
        do
          uint64_t v42 = __ldaxr(v40);
        while (__stlxr(1u, v40));
      }

      while (v42 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v39, (GPUTools::FB::Fbuf *)v59, *(unsigned int *)v59[0], 1);
    atomic_store(0, v40);
    do
    {
      uint64_t v43 = __ldaxr(v18);
      uint64_t v44 = v43 - 1;
    }

    while (__stlxr(v44, v18));
    if (gCheckGLErrors) {
      uint64_t v45 = v44 < 1;
    }
    else {
      uint64_t v45 = 1;
    }
    if (!v45) {
      handle_opengl_thread_conflict((const void **)v17);
    }
    GPUTools::FB::FIFOArgumentProvider::~FIFOArgumentProvider((GPUTools::FB::FIFOArgumentProvider *)&v55);
    goto LABEL_53;
  }

  do
    uint64_t v46 = __ldaxr(v18);
  while (__stlxr(v46 - 1, v18));
  [(id)DYGetGLGuestAppClient(v22) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, float, float, float, float))(*(void *)(v17 + 24) + 4840LL))( a1,  a2,  a3,  a4,  a5,  a6);
LABEL_53:
  if (v59[0]) {
    free(v59[0]);
  }
}

    int v27 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v22), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v27) {
      int v27 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v53, v28);
    }
    uint64_t v30 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v30) {
      int v27 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v53, v30, v29);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)v53);
    }
    uint64_t v31 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)v53);
    char v32 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v32 && gBreakOnError)
    {
      uint64_t v45 = 3LL;
      uint64_t v46 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v21 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v45 = 2LL;
      uint64_t v46 = 611LL;
    }

    breakpoint_break((uint64_t)v53, (volatile int *)v46, v45, v32, v11);
LABEL_39:
    uint64_t v33 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v31) defaultFbufStream];
    id v34 = (unsigned int *)((char *)v33 + 56);
    do
      uint64_t v35 = __ldaxr(v34);
    while (__stlxr(1u, v34));
    if (v35 == 1)
    {
      do
      {
        while (*v34 == 1)
          ;
        do
          uint64_t v36 = __ldaxr(v34);
        while (__stlxr(1u, v34));
      }

      while (v36 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v33, (GPUTools::FB::Fbuf *)v53, *(unsigned int *)v53[0], 1);
    atomic_store(0, v34);
    do
    {
      unint64_t v37 = __ldaxr(v12);
      signed int v38 = v37 - 1;
    }

    while (__stlxr(v38, v12));
    if (gCheckGLErrors) {
      id v39 = v38 < 1;
    }
    else {
      id v39 = 1;
    }
    if (!v39) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    GPUTools::FB::FIFOArgumentProvider::~FIFOArgumentProvider((GPUTools::FB::FIFOArgumentProvider *)&v49);
    goto LABEL_53;
  }

  do
    unsigned int v40 = __ldaxr(v12);
  while (__stlxr(v40 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t))(*(void *)(v11 + 24) + 4848LL))(a1, a2, a3);
LABEL_53:
  if (v53[0]) {
    free(v53[0]);
  }
}

    uint64_t v29 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v24), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v29) {
      uint64_t v29 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v55, v30);
    }
    char v32 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v32) {
      uint64_t v29 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v55, v32, v31);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v55);
    }
    uint64_t v33 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v55);
    id v34 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v34 && gBreakOnError)
    {
      unsigned int v47 = 3LL;
      unsigned int v48 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v23 & 2) == 0) {
        goto LABEL_39;
      }
      unsigned int v47 = 2LL;
      unsigned int v48 = 617LL;
    }

    breakpoint_break((uint64_t)v55, (volatile int *)v48, v47, v34, v13);
LABEL_39:
    uint64_t v35 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v33) defaultFbufStream];
    uint64_t v36 = (unsigned int *)((char *)v35 + 56);
    do
      unint64_t v37 = __ldaxr(v36);
    while (__stlxr(1u, v36));
    if (v37 == 1)
    {
      do
      {
        while (*v36 == 1)
          ;
        do
          signed int v38 = __ldaxr(v36);
        while (__stlxr(1u, v36));
      }

      while (v38 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v35, (GPUTools::FB::Fbuf *)v55, *(unsigned int *)v55[0], 1);
    atomic_store(0, v36);
    do
    {
      id v39 = __ldaxr(v14);
      unsigned int v40 = v39 - 1;
    }

    while (__stlxr(v40, v14));
    if (gCheckGLErrors) {
      unsigned int v41 = v40 < 1;
    }
    else {
      unsigned int v41 = 1;
    }
    if (!v41) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    GPUTools::FB::FIFOArgumentProvider::~FIFOArgumentProvider((GPUTools::FB::FIFOArgumentProvider *)&v51);
    goto LABEL_53;
  }

  do
    uint64_t v42 = __ldaxr(v14);
  while (__stlxr(v42 - 1, v14));
  [(id)DYGetGLGuestAppClient(v18) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 + 24) + 4856LL))( a1,  a2,  a3,  a4);
LABEL_53:
  if (v55[0]) {
    free(v55[0]);
  }
}

    uint64_t v31 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v26), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v31) {
      uint64_t v31 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v57, v32);
    }
    id v34 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v15 + 3404);
    if ((_DWORD)v34) {
      uint64_t v31 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v57, v34, v33);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v31), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v15, (uint64_t)v57);
    }
    uint64_t v35 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v15 + 3480),  (GPUTools::FB::Fbuf *)(v15 + 3520),  (GPUTools::FB *)v57);
    uint64_t v36 = *(unsigned int *)(v15 + 3404);
    if ((_DWORD)v36 && gBreakOnError)
    {
      uint64_t v49 = 3LL;
      uint64_t v50 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v25 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v49 = 2LL;
      uint64_t v50 = 623LL;
    }

    breakpoint_break((uint64_t)v57, (volatile int *)v50, v49, v36, v15);
LABEL_39:
    unint64_t v37 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v35) defaultFbufStream];
    signed int v38 = (unsigned int *)((char *)v37 + 56);
    do
      id v39 = __ldaxr(v38);
    while (__stlxr(1u, v38));
    if (v39 == 1)
    {
      do
      {
        while (*v38 == 1)
          ;
        do
          unsigned int v40 = __ldaxr(v38);
        while (__stlxr(1u, v38));
      }

      while (v40 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v37, (GPUTools::FB::Fbuf *)v57, *(unsigned int *)v57[0], 1);
    atomic_store(0, v38);
    do
    {
      unsigned int v41 = __ldaxr(v16);
      uint64_t v42 = v41 - 1;
    }

    while (__stlxr(v42, v16));
    if (gCheckGLErrors) {
      uint64_t v43 = v42 < 1;
    }
    else {
      uint64_t v43 = 1;
    }
    if (!v43) {
      handle_opengl_thread_conflict((const void **)v15);
    }
    GPUTools::FB::FIFOArgumentProvider::~FIFOArgumentProvider((GPUTools::FB::FIFOArgumentProvider *)&v53);
    goto LABEL_53;
  }

  do
    uint64_t v44 = __ldaxr(v16);
  while (__stlxr(v44 - 1, v16));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 + 24) + 4864LL))( a1,  a2,  a3,  a4,  a5);
LABEL_53:
  if (v57[0]) {
    free(v57[0]);
  }
}

    char v32 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v32) {
      char v32 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v59, v33);
    }
    uint64_t v35 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v16 + 3404);
    if ((_DWORD)v35) {
      char v32 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v59, v35, v34);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v16, (uint64_t)v59);
    }
    uint64_t v36 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v16 + 3480),  (GPUTools::FB::Fbuf *)(v16 + 3520),  (GPUTools::FB *)v59);
    unint64_t v37 = *(unsigned int *)(v16 + 3404);
    if ((_DWORD)v37 && gBreakOnError)
    {
      uint64_t v50 = 3LL;
      uint64_t v51 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v26 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v50 = 2LL;
      uint64_t v51 = 629LL;
    }

    breakpoint_break((uint64_t)v59, (volatile int *)v51, v50, v37, v16);
LABEL_39:
    signed int v38 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v36) defaultFbufStream];
    id v39 = (unsigned int *)((char *)v38 + 56);
    do
      unsigned int v40 = __ldaxr(v39);
    while (__stlxr(1u, v39));
    if (v40 == 1)
    {
      do
      {
        while (*v39 == 1)
          ;
        do
          unsigned int v41 = __ldaxr(v39);
        while (__stlxr(1u, v39));
      }

      while (v41 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v38, (GPUTools::FB::Fbuf *)v59, *(unsigned int *)v59[0], 1);
    atomic_store(0, v39);
    do
    {
      uint64_t v42 = __ldaxr(v17);
      uint64_t v43 = v42 - 1;
    }

    while (__stlxr(v43, v17));
    if (gCheckGLErrors) {
      uint64_t v44 = v43 < 1;
    }
    else {
      uint64_t v44 = 1;
    }
    if (!v44) {
      handle_opengl_thread_conflict((const void **)v16);
    }
    GPUTools::FB::FIFOArgumentProvider::~FIFOArgumentProvider((GPUTools::FB::FIFOArgumentProvider *)&v55);
    goto LABEL_53;
  }

  do
    uint64_t v45 = __ldaxr(v17);
  while (__stlxr(v45 - 1, v17));
  [(id)DYGetGLGuestAppClient(v21) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)(v16 + 24) + 4872LL))( a1,  a2,  a3,  a4,  a5,  a6);
LABEL_53:
  if (v59[0]) {
    free(v59[0]);
  }
}

    uint64_t v33 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v33) {
      uint64_t v33 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v56, v34);
    }
    uint64_t v36 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v36) {
      uint64_t v33 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v56, v36, v35);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v56);
    }
    unint64_t v37 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v56);
    signed int v38 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v38 && gBreakOnError)
    {
      uint64_t v51 = 3LL;
      uint64_t v52 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v27 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v51 = 2LL;
      uint64_t v52 = 467LL;
    }

    breakpoint_break((uint64_t)v56, (volatile int *)v52, v51, v38, v13);
LABEL_39:
    id v39 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v37) defaultFbufStream];
    unsigned int v40 = (unsigned int *)((char *)v39 + 56);
    do
      unsigned int v41 = __ldaxr(v40);
    while (__stlxr(1u, v40));
    if (v41 == 1)
    {
      do
      {
        while (*v40 == 1)
          ;
        do
          uint64_t v42 = __ldaxr(v40);
        while (__stlxr(1u, v40));
      }

      while (v42 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v39, (GPUTools::FB::Fbuf *)v56, *(unsigned int *)v56[0], 1);
    atomic_store(0, v40);
    if (!gCheckGLErrors) {
      check_errors(v13);
    }
    if (!*(_DWORD *)(v13 + 3404)) {
      wrapper_cache_program_parameter((ContextInfo *)v13, a2, a3, a4);
    }
    do
    {
      uint64_t v43 = __ldaxr(v14);
      uint64_t v44 = v43 - 1;
    }

    while (__stlxr(v44, v14));
    if (gCheckGLErrors) {
      uint64_t v45 = v44 < 1;
    }
    else {
      uint64_t v45 = 1;
    }
    if (!v45) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    goto LABEL_55;
  }

  do
    uint64_t v46 = __ldaxr(v14);
  while (__stlxr(v46 - 1, v14));
  [(id)DYGetGLGuestAppClient(v19) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, GPUTools::GL *, uint64_t))(*(void *)(v13 + 24) + 5512LL))( a1,  a2,  a3,  a4);
LABEL_55:
  if (v56[0]) {
    free(v56[0]);
  }
}

    int v27 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v22), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v27) {
      int v27 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v53, v28);
    }
    uint64_t v30 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v30) {
      int v27 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v53, v30, v29);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)v53);
    }
    uint64_t v31 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)v53);
    char v32 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v32 && gBreakOnError)
    {
      uint64_t v45 = 3LL;
      uint64_t v46 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v21 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v45 = 2LL;
      uint64_t v46 = 613LL;
    }

    breakpoint_break((uint64_t)v53, (volatile int *)v46, v45, v32, v11);
LABEL_39:
    uint64_t v33 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v31) defaultFbufStream];
    id v34 = (unsigned int *)((char *)v33 + 56);
    do
      uint64_t v35 = __ldaxr(v34);
    while (__stlxr(1u, v34));
    if (v35 == 1)
    {
      do
      {
        while (*v34 == 1)
          ;
        do
          uint64_t v36 = __ldaxr(v34);
        while (__stlxr(1u, v34));
      }

      while (v36 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v33, (GPUTools::FB::Fbuf *)v53, *(unsigned int *)v53[0], 1);
    atomic_store(0, v34);
    do
    {
      unint64_t v37 = __ldaxr(v12);
      signed int v38 = v37 - 1;
    }

    while (__stlxr(v38, v12));
    if (gCheckGLErrors) {
      id v39 = v38 < 1;
    }
    else {
      id v39 = 1;
    }
    if (!v39) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    GPUTools::FB::FIFOArgumentProvider::~FIFOArgumentProvider((GPUTools::FB::FIFOArgumentProvider *)&v49);
    goto LABEL_53;
  }

  do
    unsigned int v40 = __ldaxr(v12);
  while (__stlxr(v40 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t))(*(void *)(v11 + 24) + 5872LL))(a1, a2, a3);
LABEL_53:
  if (v53[0]) {
    free(v53[0]);
  }
}

    uint64_t v29 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v24), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v29) {
      uint64_t v29 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v55, v30);
    }
    char v32 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v32) {
      uint64_t v29 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v55, v32, v31);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v55);
    }
    uint64_t v33 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v55);
    id v34 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v34 && gBreakOnError)
    {
      unsigned int v47 = 3LL;
      unsigned int v48 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v23 & 2) == 0) {
        goto LABEL_39;
      }
      unsigned int v47 = 2LL;
      unsigned int v48 = 619LL;
    }

    breakpoint_break((uint64_t)v55, (volatile int *)v48, v47, v34, v13);
LABEL_39:
    uint64_t v35 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v33) defaultFbufStream];
    uint64_t v36 = (unsigned int *)((char *)v35 + 56);
    do
      unint64_t v37 = __ldaxr(v36);
    while (__stlxr(1u, v36));
    if (v37 == 1)
    {
      do
      {
        while (*v36 == 1)
          ;
        do
          signed int v38 = __ldaxr(v36);
        while (__stlxr(1u, v36));
      }

      while (v38 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v35, (GPUTools::FB::Fbuf *)v55, *(unsigned int *)v55[0], 1);
    atomic_store(0, v36);
    do
    {
      id v39 = __ldaxr(v14);
      unsigned int v40 = v39 - 1;
    }

    while (__stlxr(v40, v14));
    if (gCheckGLErrors) {
      unsigned int v41 = v40 < 1;
    }
    else {
      unsigned int v41 = 1;
    }
    if (!v41) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    GPUTools::FB::FIFOArgumentProvider::~FIFOArgumentProvider((GPUTools::FB::FIFOArgumentProvider *)&v51);
    goto LABEL_53;
  }

  do
    uint64_t v42 = __ldaxr(v14);
  while (__stlxr(v42 - 1, v14));
  [(id)DYGetGLGuestAppClient(v18) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 + 24) + 5880LL))( a1,  a2,  a3,  a4);
LABEL_53:
  if (v55[0]) {
    free(v55[0]);
  }
}

    uint64_t v31 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v26), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v31) {
      uint64_t v31 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v57, v32);
    }
    id v34 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v15 + 3404);
    if ((_DWORD)v34) {
      uint64_t v31 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v57, v34, v33);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v31), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v15, (uint64_t)v57);
    }
    uint64_t v35 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v15 + 3480),  (GPUTools::FB::Fbuf *)(v15 + 3520),  (GPUTools::FB *)v57);
    uint64_t v36 = *(unsigned int *)(v15 + 3404);
    if ((_DWORD)v36 && gBreakOnError)
    {
      uint64_t v49 = 3LL;
      uint64_t v50 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v25 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v49 = 2LL;
      uint64_t v50 = 625LL;
    }

    breakpoint_break((uint64_t)v57, (volatile int *)v50, v49, v36, v15);
LABEL_39:
    unint64_t v37 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v35) defaultFbufStream];
    signed int v38 = (unsigned int *)((char *)v37 + 56);
    do
      id v39 = __ldaxr(v38);
    while (__stlxr(1u, v38));
    if (v39 == 1)
    {
      do
      {
        while (*v38 == 1)
          ;
        do
          unsigned int v40 = __ldaxr(v38);
        while (__stlxr(1u, v38));
      }

      while (v40 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v37, (GPUTools::FB::Fbuf *)v57, *(unsigned int *)v57[0], 1);
    atomic_store(0, v38);
    do
    {
      unsigned int v41 = __ldaxr(v16);
      uint64_t v42 = v41 - 1;
    }

    while (__stlxr(v42, v16));
    if (gCheckGLErrors) {
      uint64_t v43 = v42 < 1;
    }
    else {
      uint64_t v43 = 1;
    }
    if (!v43) {
      handle_opengl_thread_conflict((const void **)v15);
    }
    GPUTools::FB::FIFOArgumentProvider::~FIFOArgumentProvider((GPUTools::FB::FIFOArgumentProvider *)&v53);
    goto LABEL_53;
  }

  do
    uint64_t v44 = __ldaxr(v16);
  while (__stlxr(v44 - 1, v16));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 + 24) + 5888LL))( a1,  a2,  a3,  a4,  a5);
LABEL_53:
  if (v57[0]) {
    free(v57[0]);
  }
}

    char v32 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v32) {
      char v32 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v59, v33);
    }
    uint64_t v35 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v16 + 3404);
    if ((_DWORD)v35) {
      char v32 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v59, v35, v34);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v16, (uint64_t)v59);
    }
    uint64_t v36 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v16 + 3480),  (GPUTools::FB::Fbuf *)(v16 + 3520),  (GPUTools::FB *)v59);
    unint64_t v37 = *(unsigned int *)(v16 + 3404);
    if ((_DWORD)v37 && gBreakOnError)
    {
      uint64_t v50 = 3LL;
      uint64_t v51 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v26 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v50 = 2LL;
      uint64_t v51 = 631LL;
    }

    breakpoint_break((uint64_t)v59, (volatile int *)v51, v50, v37, v16);
LABEL_39:
    signed int v38 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v36) defaultFbufStream];
    id v39 = (unsigned int *)((char *)v38 + 56);
    do
      unsigned int v40 = __ldaxr(v39);
    while (__stlxr(1u, v39));
    if (v40 == 1)
    {
      do
      {
        while (*v39 == 1)
          ;
        do
          unsigned int v41 = __ldaxr(v39);
        while (__stlxr(1u, v39));
      }

      while (v41 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v38, (GPUTools::FB::Fbuf *)v59, *(unsigned int *)v59[0], 1);
    atomic_store(0, v39);
    do
    {
      uint64_t v42 = __ldaxr(v17);
      uint64_t v43 = v42 - 1;
    }

    while (__stlxr(v43, v17));
    if (gCheckGLErrors) {
      uint64_t v44 = v43 < 1;
    }
    else {
      uint64_t v44 = 1;
    }
    if (!v44) {
      handle_opengl_thread_conflict((const void **)v16);
    }
    GPUTools::FB::FIFOArgumentProvider::~FIFOArgumentProvider((GPUTools::FB::FIFOArgumentProvider *)&v55);
    goto LABEL_53;
  }

  do
    uint64_t v45 = __ldaxr(v17);
  while (__stlxr(v45 - 1, v17));
  [(id)DYGetGLGuestAppClient(v21) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)(v16 + 24) + 5896LL))( a1,  a2,  a3,  a4,  a5,  a6);
LABEL_53:
  if (v59[0]) {
    free(v59[0]);
  }
}

    char v32 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v32) {
      char v32 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v55, v33);
    }
    uint64_t v35 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v35) {
      char v32 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v55, v35, v34);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v55);
    }
    uint64_t v36 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v55);
    unint64_t v37 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v37 && gBreakOnError)
    {
      uint64_t v50 = 3LL;
      uint64_t v51 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v26 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v50 = 2LL;
      uint64_t v51 = 872LL;
    }

    breakpoint_break((uint64_t)v55, (volatile int *)v51, v50, v37, v13);
LABEL_39:
    signed int v38 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v36) defaultFbufStream];
    id v39 = (unsigned int *)((char *)v38 + 56);
    do
      unsigned int v40 = __ldaxr(v39);
    while (__stlxr(1u, v39));
    if (v40 == 1)
    {
      do
      {
        while (*v39 == 1)
          ;
        do
          unsigned int v41 = __ldaxr(v39);
        while (__stlxr(1u, v39));
      }

      while (v41 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v38, (GPUTools::FB::Fbuf *)v55, *(unsigned int *)v55[0], 1);
    atomic_store(0, v39);
    do
    {
      uint64_t v42 = __ldaxr(v14);
      uint64_t v43 = v42 - 1;
    }

    while (__stlxr(v43, v14));
    if (gCheckGLErrors) {
      uint64_t v44 = v43 < 1;
    }
    else {
      uint64_t v44 = 1;
    }
    if (!v44) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    goto LABEL_52;
  }

  do
    uint64_t v45 = __ldaxr(v14);
  while (__stlxr(v45 - 1, v14));
  [(id)DYGetGLGuestAppClient(v19) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, GPUTools::GL *, uint64_t))(*(void *)(v13 + 24) + 6432LL))( a1,  a2,  a3,  a4);
LABEL_52:
  if (v55[0]) {
    free(v55[0]);
  }
}

    char v32 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v32) {
      char v32 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v55, v33);
    }
    uint64_t v35 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v35) {
      char v32 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v55, v35, v34);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v55);
    }
    uint64_t v36 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v55);
    unint64_t v37 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v37 && gBreakOnError)
    {
      uint64_t v50 = 3LL;
      uint64_t v51 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v26 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v50 = 2LL;
      uint64_t v51 = 873LL;
    }

    breakpoint_break((uint64_t)v55, (volatile int *)v51, v50, v37, v13);
LABEL_39:
    signed int v38 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v36) defaultFbufStream];
    id v39 = (unsigned int *)((char *)v38 + 56);
    do
      unsigned int v40 = __ldaxr(v39);
    while (__stlxr(1u, v39));
    if (v40 == 1)
    {
      do
      {
        while (*v39 == 1)
          ;
        do
          unsigned int v41 = __ldaxr(v39);
        while (__stlxr(1u, v39));
      }

      while (v41 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v38, (GPUTools::FB::Fbuf *)v55, *(unsigned int *)v55[0], 1);
    atomic_store(0, v39);
    do
    {
      uint64_t v42 = __ldaxr(v14);
      uint64_t v43 = v42 - 1;
    }

    while (__stlxr(v43, v14));
    if (gCheckGLErrors) {
      uint64_t v44 = v43 < 1;
    }
    else {
      uint64_t v44 = 1;
    }
    if (!v44) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    goto LABEL_52;
  }

  do
    uint64_t v45 = __ldaxr(v14);
  while (__stlxr(v45 - 1, v14));
  [(id)DYGetGLGuestAppClient(v19) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, GPUTools::GL *, const int *))(*(void *)(v13 + 24) + 6440LL))( a1,  a2,  a3,  a4);
LABEL_52:
  if (v55[0]) {
    free(v55[0]);
  }
}

    char v32 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v32) {
      char v32 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v55, v33);
    }
    uint64_t v35 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v35) {
      char v32 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v55, v35, v34);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v55);
    }
    uint64_t v36 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v55);
    unint64_t v37 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v37 && gBreakOnError)
    {
      uint64_t v50 = 3LL;
      uint64_t v51 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v26 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v50 = 2LL;
      uint64_t v51 = 870LL;
    }

    breakpoint_break((uint64_t)v55, (volatile int *)v51, v50, v37, v13);
LABEL_39:
    signed int v38 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v36) defaultFbufStream];
    id v39 = (unsigned int *)((char *)v38 + 56);
    do
      unsigned int v40 = __ldaxr(v39);
    while (__stlxr(1u, v39));
    if (v40 == 1)
    {
      do
      {
        while (*v39 == 1)
          ;
        do
          unsigned int v41 = __ldaxr(v39);
        while (__stlxr(1u, v39));
      }

      while (v41 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v38, (GPUTools::FB::Fbuf *)v55, *(unsigned int *)v55[0], 1);
    atomic_store(0, v39);
    do
    {
      uint64_t v42 = __ldaxr(v14);
      uint64_t v43 = v42 - 1;
    }

    while (__stlxr(v43, v14));
    if (gCheckGLErrors) {
      uint64_t v44 = v43 < 1;
    }
    else {
      uint64_t v44 = 1;
    }
    if (!v44) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    goto LABEL_52;
  }

  do
    uint64_t v45 = __ldaxr(v14);
  while (__stlxr(v45 - 1, v14));
  [(id)DYGetGLGuestAppClient(v19) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, GPUTools::GL *, float))(*(void *)(v13 + 24) + 6448LL))( a1,  a2,  a3,  a4);
LABEL_52:
  if (v55[0]) {
    free(v55[0]);
  }
}

    char v32 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v32) {
      char v32 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v55, v33);
    }
    uint64_t v35 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v35) {
      char v32 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v55, v35, v34);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v55);
    }
    uint64_t v36 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v55);
    unint64_t v37 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v37 && gBreakOnError)
    {
      uint64_t v50 = 3LL;
      uint64_t v51 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v26 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v50 = 2LL;
      uint64_t v51 = 871LL;
    }

    breakpoint_break((uint64_t)v55, (volatile int *)v51, v50, v37, v13);
LABEL_39:
    signed int v38 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v36) defaultFbufStream];
    id v39 = (unsigned int *)((char *)v38 + 56);
    do
      unsigned int v40 = __ldaxr(v39);
    while (__stlxr(1u, v39));
    if (v40 == 1)
    {
      do
      {
        while (*v39 == 1)
          ;
        do
          unsigned int v41 = __ldaxr(v39);
        while (__stlxr(1u, v39));
      }

      while (v41 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v38, (GPUTools::FB::Fbuf *)v55, *(unsigned int *)v55[0], 1);
    atomic_store(0, v39);
    do
    {
      uint64_t v42 = __ldaxr(v14);
      uint64_t v43 = v42 - 1;
    }

    while (__stlxr(v43, v14));
    if (gCheckGLErrors) {
      uint64_t v44 = v43 < 1;
    }
    else {
      uint64_t v44 = 1;
    }
    if (!v44) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    goto LABEL_52;
  }

  do
    uint64_t v45 = __ldaxr(v14);
  while (__stlxr(v45 - 1, v14));
  [(id)DYGetGLGuestAppClient(v19) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, GPUTools::GL *, const float *))(*(void *)(v13 + 24) + 6456LL))( a1,  a2,  a3,  a4);
LABEL_52:
  if (v55[0]) {
    free(v55[0]);
  }
}

    uint64_t v29 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v24), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v29) {
      uint64_t v29 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v55, v30);
    }
    char v32 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v32) {
      uint64_t v29 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v55, v32, v31);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v55);
    }
    uint64_t v33 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v55);
    id v34 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v34 && gBreakOnError)
    {
      unsigned int v47 = 3LL;
      unsigned int v48 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v23 & 2) == 0) {
        goto LABEL_39;
      }
      unsigned int v47 = 2LL;
      unsigned int v48 = 902LL;
    }

    breakpoint_break((uint64_t)v55, (volatile int *)v48, v47, v34, v13);
LABEL_39:
    uint64_t v35 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v33) defaultFbufStream];
    uint64_t v36 = (unsigned int *)((char *)v35 + 56);
    do
      unint64_t v37 = __ldaxr(v36);
    while (__stlxr(1u, v36));
    if (v37 == 1)
    {
      do
      {
        while (*v36 == 1)
          ;
        do
          signed int v38 = __ldaxr(v36);
        while (__stlxr(1u, v36));
      }

      while (v38 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v35, (GPUTools::FB::Fbuf *)v55, *(unsigned int *)v55[0], 1);
    atomic_store(0, v36);
    do
    {
      id v39 = __ldaxr(v14);
      unsigned int v40 = v39 - 1;
    }

    while (__stlxr(v40, v14));
    if (gCheckGLErrors) {
      unsigned int v41 = v40 < 1;
    }
    else {
      unsigned int v41 = 1;
    }
    if (!v41) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    GPUTools::FB::FIFOArgumentProvider::~FIFOArgumentProvider((GPUTools::FB::FIFOArgumentProvider *)&v51);
    goto LABEL_53;
  }

  do
    uint64_t v42 = __ldaxr(v14);
  while (__stlxr(v42 - 1, v14));
  [(id)DYGetGLGuestAppClient(v18) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, volatile int *, uint64_t, uint64_t))(*(void *)(v13 + 24) + 6632LL))( a1,  a2,  a3,  a4);
LABEL_53:
  if (v55[0]) {
    free(v55[0]);
  }
}

    uint64_t v31 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v26), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v31) {
      uint64_t v31 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v57, v32);
    }
    id v34 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v15 + 3404);
    if ((_DWORD)v34) {
      uint64_t v31 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v57, v34, v33);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v31), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v15, (uint64_t)v57);
    }
    uint64_t v35 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v15 + 3480),  (GPUTools::FB::Fbuf *)(v15 + 3520),  (GPUTools::FB *)v57);
    uint64_t v36 = *(unsigned int *)(v15 + 3404);
    if ((_DWORD)v36 && gBreakOnError)
    {
      uint64_t v49 = 3LL;
      uint64_t v50 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v25 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v49 = 2LL;
      uint64_t v50 = 906LL;
    }

    breakpoint_break((uint64_t)v57, (volatile int *)v50, v49, v36, v15);
LABEL_39:
    unint64_t v37 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v35) defaultFbufStream];
    signed int v38 = (unsigned int *)((char *)v37 + 56);
    do
      id v39 = __ldaxr(v38);
    while (__stlxr(1u, v38));
    if (v39 == 1)
    {
      do
      {
        while (*v38 == 1)
          ;
        do
          unsigned int v40 = __ldaxr(v38);
        while (__stlxr(1u, v38));
      }

      while (v40 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v37, (GPUTools::FB::Fbuf *)v57, *(unsigned int *)v57[0], 1);
    atomic_store(0, v38);
    do
    {
      unsigned int v41 = __ldaxr(v16);
      uint64_t v42 = v41 - 1;
    }

    while (__stlxr(v42, v16));
    if (gCheckGLErrors) {
      uint64_t v43 = v42 < 1;
    }
    else {
      uint64_t v43 = 1;
    }
    if (!v43) {
      handle_opengl_thread_conflict((const void **)v15);
    }
    GPUTools::FB::FIFOArgumentProvider::~FIFOArgumentProvider((GPUTools::FB::FIFOArgumentProvider *)&v53);
    goto LABEL_53;
  }

  do
    uint64_t v44 = __ldaxr(v16);
  while (__stlxr(v44 - 1, v16));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, volatile int *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 + 24) + 6640LL))( a1,  a2,  a3,  a4,  a5);
LABEL_53:
  if (v57[0]) {
    free(v57[0]);
  }
}

    char v32 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v32) {
      char v32 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v59, v33);
    }
    uint64_t v35 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v16 + 3404);
    if ((_DWORD)v35) {
      char v32 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v59, v35, v34);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v16, (uint64_t)v59);
    }
    uint64_t v36 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v16 + 3480),  (GPUTools::FB::Fbuf *)(v16 + 3520),  (GPUTools::FB *)v59);
    unint64_t v37 = *(unsigned int *)(v16 + 3404);
    if ((_DWORD)v37 && gBreakOnError)
    {
      uint64_t v50 = 3LL;
      uint64_t v51 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v26 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v50 = 2LL;
      uint64_t v51 = 910LL;
    }

    breakpoint_break((uint64_t)v59, (volatile int *)v51, v50, v37, v16);
LABEL_39:
    signed int v38 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v36) defaultFbufStream];
    id v39 = (unsigned int *)((char *)v38 + 56);
    do
      unsigned int v40 = __ldaxr(v39);
    while (__stlxr(1u, v39));
    if (v40 == 1)
    {
      do
      {
        while (*v39 == 1)
          ;
        do
          unsigned int v41 = __ldaxr(v39);
        while (__stlxr(1u, v39));
      }

      while (v41 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v38, (GPUTools::FB::Fbuf *)v59, *(unsigned int *)v59[0], 1);
    atomic_store(0, v39);
    do
    {
      uint64_t v42 = __ldaxr(v17);
      uint64_t v43 = v42 - 1;
    }

    while (__stlxr(v43, v17));
    if (gCheckGLErrors) {
      uint64_t v44 = v43 < 1;
    }
    else {
      uint64_t v44 = 1;
    }
    if (!v44) {
      handle_opengl_thread_conflict((const void **)v16);
    }
    GPUTools::FB::FIFOArgumentProvider::~FIFOArgumentProvider((GPUTools::FB::FIFOArgumentProvider *)&v55);
    goto LABEL_53;
  }

  do
    uint64_t v45 = __ldaxr(v17);
  while (__stlxr(v45 - 1, v17));
  [(id)DYGetGLGuestAppClient(v21) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, volatile int *, uint64_t, uint64_t, uint64_t, void))(*(void *)(v16 + 24)
                                                                                               + 6648LL))( a1,  a2,  a3,  a4,  a5,  a6);
LABEL_53:
  if (v59[0]) {
    free(v59[0]);
  }
}

    uint64_t v33 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v33) {
      uint64_t v33 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v61, v34);
    }
    uint64_t v36 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v17 + 3404);
    if ((_DWORD)v36) {
      uint64_t v33 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v61, v36, v35);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v17, (uint64_t)v61);
    }
    unint64_t v37 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v17 + 3480),  (GPUTools::FB::Fbuf *)(v17 + 3520),  (GPUTools::FB *)v61);
    signed int v38 = *(unsigned int *)(v17 + 3404);
    if ((_DWORD)v38 && gBreakOnError)
    {
      uint64_t v51 = 3LL;
      uint64_t v52 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v27 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v51 = 2LL;
      uint64_t v52 = 914LL;
    }

    breakpoint_break((uint64_t)v61, (volatile int *)v52, v51, v38, v17);
LABEL_39:
    id v39 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v37) defaultFbufStream];
    unsigned int v40 = (unsigned int *)((char *)v39 + 56);
    do
      unsigned int v41 = __ldaxr(v40);
    while (__stlxr(1u, v40));
    if (v41 == 1)
    {
      do
      {
        while (*v40 == 1)
          ;
        do
          uint64_t v42 = __ldaxr(v40);
        while (__stlxr(1u, v40));
      }

      while (v42 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v39, (GPUTools::FB::Fbuf *)v61, *(unsigned int *)v61[0], 1);
    atomic_store(0, v40);
    do
    {
      uint64_t v43 = __ldaxr(v18);
      uint64_t v44 = v43 - 1;
    }

    while (__stlxr(v44, v18));
    if (gCheckGLErrors) {
      uint64_t v45 = v44 < 1;
    }
    else {
      uint64_t v45 = 1;
    }
    if (!v45) {
      handle_opengl_thread_conflict((const void **)v17);
    }
    GPUTools::FB::FIFOArgumentProvider::~FIFOArgumentProvider((GPUTools::FB::FIFOArgumentProvider *)&v57);
    goto LABEL_53;
  }

  do
    uint64_t v46 = __ldaxr(v18);
  while (__stlxr(v46 - 1, v18));
  [(id)DYGetGLGuestAppClient(v22) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, volatile int *, uint64_t, uint64_t, uint64_t, void, void))(*(void *)(v17 + 24) + 6656LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7);
LABEL_53:
  if (v61[0]) {
    free(v61[0]);
  }
}

    uint64_t v29 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v24), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v29) {
      uint64_t v29 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v55, v30);
    }
    char v32 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v32) {
      uint64_t v29 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v55, v32, v31);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v55);
    }
    uint64_t v33 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v55);
    id v34 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v34 && gBreakOnError)
    {
      unsigned int v47 = 3LL;
      unsigned int v48 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v23 & 2) == 0) {
        goto LABEL_39;
      }
      unsigned int v47 = 2LL;
      unsigned int v48 = 900LL;
    }

    breakpoint_break((uint64_t)v55, (volatile int *)v48, v47, v34, v13);
LABEL_39:
    uint64_t v35 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v33) defaultFbufStream];
    uint64_t v36 = (unsigned int *)((char *)v35 + 56);
    do
      unint64_t v37 = __ldaxr(v36);
    while (__stlxr(1u, v36));
    if (v37 == 1)
    {
      do
      {
        while (*v36 == 1)
          ;
        do
          signed int v38 = __ldaxr(v36);
        while (__stlxr(1u, v36));
      }

      while (v38 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v35, (GPUTools::FB::Fbuf *)v55, *(unsigned int *)v55[0], 1);
    atomic_store(0, v36);
    do
    {
      id v39 = __ldaxr(v14);
      unsigned int v40 = v39 - 1;
    }

    while (__stlxr(v40, v14));
    if (gCheckGLErrors) {
      unsigned int v41 = v40 < 1;
    }
    else {
      unsigned int v41 = 1;
    }
    if (!v41) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    GPUTools::FB::FIFOArgumentProvider::~FIFOArgumentProvider((GPUTools::FB::FIFOArgumentProvider *)&v51);
    goto LABEL_53;
  }

  do
    uint64_t v42 = __ldaxr(v14);
  while (__stlxr(v42 - 1, v14));
  [(id)DYGetGLGuestAppClient(v18) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, volatile int *, uint64_t, float))(*(void *)(v13 + 24) + 6664LL))( a1,  a2,  a3,  a4);
LABEL_53:
  if (v55[0]) {
    free(v55[0]);
  }
}

    uint64_t v31 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v26), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v31) {
      uint64_t v31 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v57, v32);
    }
    id v34 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v15 + 3404);
    if ((_DWORD)v34) {
      uint64_t v31 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v57, v34, v33);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v31), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v15, (uint64_t)v57);
    }
    uint64_t v35 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v15 + 3480),  (GPUTools::FB::Fbuf *)(v15 + 3520),  (GPUTools::FB *)v57);
    uint64_t v36 = *(unsigned int *)(v15 + 3404);
    if ((_DWORD)v36 && gBreakOnError)
    {
      uint64_t v49 = 3LL;
      uint64_t v50 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v25 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v49 = 2LL;
      uint64_t v50 = 904LL;
    }

    breakpoint_break((uint64_t)v57, (volatile int *)v50, v49, v36, v15);
LABEL_39:
    unint64_t v37 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v35) defaultFbufStream];
    signed int v38 = (unsigned int *)((char *)v37 + 56);
    do
      id v39 = __ldaxr(v38);
    while (__stlxr(1u, v38));
    if (v39 == 1)
    {
      do
      {
        while (*v38 == 1)
          ;
        do
          unsigned int v40 = __ldaxr(v38);
        while (__stlxr(1u, v38));
      }

      while (v40 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v37, (GPUTools::FB::Fbuf *)v57, *(unsigned int *)v57[0], 1);
    atomic_store(0, v38);
    do
    {
      unsigned int v41 = __ldaxr(v16);
      uint64_t v42 = v41 - 1;
    }

    while (__stlxr(v42, v16));
    if (gCheckGLErrors) {
      uint64_t v43 = v42 < 1;
    }
    else {
      uint64_t v43 = 1;
    }
    if (!v43) {
      handle_opengl_thread_conflict((const void **)v15);
    }
    GPUTools::FB::FIFOArgumentProvider::~FIFOArgumentProvider((GPUTools::FB::FIFOArgumentProvider *)&v53);
    goto LABEL_53;
  }

  do
    uint64_t v44 = __ldaxr(v16);
  while (__stlxr(v44 - 1, v16));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, volatile int *, uint64_t, float, float))(*(void *)(v15 + 24) + 6672LL))( a1,  a2,  a3,  a4,  a5);
LABEL_53:
  if (v57[0]) {
    free(v57[0]);
  }
}

    uint64_t v33 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v33) {
      uint64_t v33 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v59, v34);
    }
    uint64_t v36 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v17 + 3404);
    if ((_DWORD)v36) {
      uint64_t v33 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v59, v36, v35);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v17, (uint64_t)v59);
    }
    unint64_t v37 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v17 + 3480),  (GPUTools::FB::Fbuf *)(v17 + 3520),  (GPUTools::FB *)v59);
    signed int v38 = *(unsigned int *)(v17 + 3404);
    if ((_DWORD)v38 && gBreakOnError)
    {
      uint64_t v51 = 3LL;
      uint64_t v52 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v27 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v51 = 2LL;
      uint64_t v52 = 908LL;
    }

    breakpoint_break((uint64_t)v59, (volatile int *)v52, v51, v38, v17);
LABEL_39:
    id v39 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v37) defaultFbufStream];
    unsigned int v40 = (unsigned int *)((char *)v39 + 56);
    do
      unsigned int v41 = __ldaxr(v40);
    while (__stlxr(1u, v40));
    if (v41 == 1)
    {
      do
      {
        while (*v40 == 1)
          ;
        do
          uint64_t v42 = __ldaxr(v40);
        while (__stlxr(1u, v40));
      }

      while (v42 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v39, (GPUTools::FB::Fbuf *)v59, *(unsigned int *)v59[0], 1);
    atomic_store(0, v40);
    do
    {
      uint64_t v43 = __ldaxr(v18);
      uint64_t v44 = v43 - 1;
    }

    while (__stlxr(v44, v18));
    if (gCheckGLErrors) {
      uint64_t v45 = v44 < 1;
    }
    else {
      uint64_t v45 = 1;
    }
    if (!v45) {
      handle_opengl_thread_conflict((const void **)v17);
    }
    GPUTools::FB::FIFOArgumentProvider::~FIFOArgumentProvider((GPUTools::FB::FIFOArgumentProvider *)&v55);
    goto LABEL_53;
  }

  do
    uint64_t v46 = __ldaxr(v18);
  while (__stlxr(v46 - 1, v18));
  [(id)DYGetGLGuestAppClient(v22) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, volatile int *, uint64_t, float, float, float))(*(void *)(v17 + 24)
                                                                                          + 6680LL))( a1,  a2,  a3,  a4,  a5,  a6);
LABEL_53:
  if (v59[0]) {
    free(v59[0]);
  }
}

    uint64_t v35 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v30), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v35) {
      uint64_t v35 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v61, v36);
    }
    signed int v38 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v19 + 3404);
    if ((_DWORD)v38) {
      uint64_t v35 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v61, v38, v37);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v35), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v19, (uint64_t)v61);
    }
    id v39 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v19 + 3480),  (GPUTools::FB::Fbuf *)(v19 + 3520),  (GPUTools::FB *)v61);
    unsigned int v40 = *(unsigned int *)(v19 + 3404);
    if ((_DWORD)v40 && gBreakOnError)
    {
      uint64_t v53 = 3LL;
      unsigned int v54 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v29 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v53 = 2LL;
      unsigned int v54 = 912LL;
    }

    breakpoint_break((uint64_t)v61, (volatile int *)v54, v53, v40, v19);
LABEL_39:
    unsigned int v41 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v39) defaultFbufStream];
    uint64_t v42 = (unsigned int *)((char *)v41 + 56);
    do
      uint64_t v43 = __ldaxr(v42);
    while (__stlxr(1u, v42));
    if (v43 == 1)
    {
      do
      {
        while (*v42 == 1)
          ;
        do
          uint64_t v44 = __ldaxr(v42);
        while (__stlxr(1u, v42));
      }

      while (v44 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v41, (GPUTools::FB::Fbuf *)v61, *(unsigned int *)v61[0], 1);
    atomic_store(0, v42);
    do
    {
      uint64_t v45 = __ldaxr(v20);
      uint64_t v46 = v45 - 1;
    }

    while (__stlxr(v46, v20));
    if (gCheckGLErrors) {
      unsigned int v47 = v46 < 1;
    }
    else {
      unsigned int v47 = 1;
    }
    if (!v47) {
      handle_opengl_thread_conflict((const void **)v19);
    }
    GPUTools::FB::FIFOArgumentProvider::~FIFOArgumentProvider((GPUTools::FB::FIFOArgumentProvider *)&v57);
    goto LABEL_53;
  }

  do
    unsigned int v48 = __ldaxr(v20);
  while (__stlxr(v48 - 1, v20));
  [(id)DYGetGLGuestAppClient(v24) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, volatile int *, uint64_t, float, float, float, float))(*(void *)(v19 + 24)
                                                                                                 + 6688LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7);
LABEL_53:
  if (v61[0]) {
    free(v61[0]);
  }
}

    uint64_t v29 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v24), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v29) {
      uint64_t v29 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v55, v30);
    }
    char v32 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v32) {
      uint64_t v29 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v55, v32, v31);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v55);
    }
    uint64_t v33 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v55);
    id v34 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v34 && gBreakOnError)
    {
      unsigned int v47 = 3LL;
      unsigned int v48 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v23 & 2) == 0) {
        goto LABEL_39;
      }
      unsigned int v47 = 2LL;
      unsigned int v48 = 940LL;
    }

    breakpoint_break((uint64_t)v55, (volatile int *)v48, v47, v34, v13);
LABEL_39:
    uint64_t v35 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v33) defaultFbufStream];
    uint64_t v36 = (unsigned int *)((char *)v35 + 56);
    do
      unint64_t v37 = __ldaxr(v36);
    while (__stlxr(1u, v36));
    if (v37 == 1)
    {
      do
      {
        while (*v36 == 1)
          ;
        do
          signed int v38 = __ldaxr(v36);
        while (__stlxr(1u, v36));
      }

      while (v38 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v35, (GPUTools::FB::Fbuf *)v55, *(unsigned int *)v55[0], 1);
    atomic_store(0, v36);
    do
    {
      id v39 = __ldaxr(v14);
      unsigned int v40 = v39 - 1;
    }

    while (__stlxr(v40, v14));
    if (gCheckGLErrors) {
      unsigned int v41 = v40 < 1;
    }
    else {
      unsigned int v41 = 1;
    }
    if (!v41) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    GPUTools::FB::FIFOArgumentProvider::~FIFOArgumentProvider((GPUTools::FB::FIFOArgumentProvider *)&v51);
    goto LABEL_53;
  }

  do
    uint64_t v42 = __ldaxr(v14);
  while (__stlxr(v42 - 1, v14));
  [(id)DYGetGLGuestAppClient(v18) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, volatile int *, uint64_t, uint64_t))(*(void *)(v13 + 24) + 6784LL))( a1,  a2,  a3,  a4);
LABEL_53:
  if (v55[0]) {
    free(v55[0]);
  }
}

    uint64_t v31 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v26), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v31) {
      uint64_t v31 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v57, v32);
    }
    id v34 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v15 + 3404);
    if ((_DWORD)v34) {
      uint64_t v31 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v57, v34, v33);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v31), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v15, (uint64_t)v57);
    }
    uint64_t v35 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v15 + 3480),  (GPUTools::FB::Fbuf *)(v15 + 3520),  (GPUTools::FB *)v57);
    uint64_t v36 = *(unsigned int *)(v15 + 3404);
    if ((_DWORD)v36 && gBreakOnError)
    {
      uint64_t v49 = 3LL;
      uint64_t v50 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v25 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v49 = 2LL;
      uint64_t v50 = 944LL;
    }

    breakpoint_break((uint64_t)v57, (volatile int *)v50, v49, v36, v15);
LABEL_39:
    unint64_t v37 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v35) defaultFbufStream];
    signed int v38 = (unsigned int *)((char *)v37 + 56);
    do
      id v39 = __ldaxr(v38);
    while (__stlxr(1u, v38));
    if (v39 == 1)
    {
      do
      {
        while (*v38 == 1)
          ;
        do
          unsigned int v40 = __ldaxr(v38);
        while (__stlxr(1u, v38));
      }

      while (v40 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v37, (GPUTools::FB::Fbuf *)v57, *(unsigned int *)v57[0], 1);
    atomic_store(0, v38);
    do
    {
      unsigned int v41 = __ldaxr(v16);
      uint64_t v42 = v41 - 1;
    }

    while (__stlxr(v42, v16));
    if (gCheckGLErrors) {
      uint64_t v43 = v42 < 1;
    }
    else {
      uint64_t v43 = 1;
    }
    if (!v43) {
      handle_opengl_thread_conflict((const void **)v15);
    }
    GPUTools::FB::FIFOArgumentProvider::~FIFOArgumentProvider((GPUTools::FB::FIFOArgumentProvider *)&v53);
    goto LABEL_53;
  }

  do
    uint64_t v44 = __ldaxr(v16);
  while (__stlxr(v44 - 1, v16));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, volatile int *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 + 24) + 6792LL))( a1,  a2,  a3,  a4,  a5);
LABEL_53:
  if (v57[0]) {
    free(v57[0]);
  }
}

    char v32 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v32) {
      char v32 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v59, v33);
    }
    uint64_t v35 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v16 + 3404);
    if ((_DWORD)v35) {
      char v32 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v59, v35, v34);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v16, (uint64_t)v59);
    }
    uint64_t v36 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v16 + 3480),  (GPUTools::FB::Fbuf *)(v16 + 3520),  (GPUTools::FB *)v59);
    unint64_t v37 = *(unsigned int *)(v16 + 3404);
    if ((_DWORD)v37 && gBreakOnError)
    {
      uint64_t v50 = 3LL;
      uint64_t v51 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v26 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v50 = 2LL;
      uint64_t v51 = 948LL;
    }

    breakpoint_break((uint64_t)v59, (volatile int *)v51, v50, v37, v16);
LABEL_39:
    signed int v38 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v36) defaultFbufStream];
    id v39 = (unsigned int *)((char *)v38 + 56);
    do
      unsigned int v40 = __ldaxr(v39);
    while (__stlxr(1u, v39));
    if (v40 == 1)
    {
      do
      {
        while (*v39 == 1)
          ;
        do
          unsigned int v41 = __ldaxr(v39);
        while (__stlxr(1u, v39));
      }

      while (v41 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v38, (GPUTools::FB::Fbuf *)v59, *(unsigned int *)v59[0], 1);
    atomic_store(0, v39);
    do
    {
      uint64_t v42 = __ldaxr(v17);
      uint64_t v43 = v42 - 1;
    }

    while (__stlxr(v43, v17));
    if (gCheckGLErrors) {
      uint64_t v44 = v43 < 1;
    }
    else {
      uint64_t v44 = 1;
    }
    if (!v44) {
      handle_opengl_thread_conflict((const void **)v16);
    }
    GPUTools::FB::FIFOArgumentProvider::~FIFOArgumentProvider((GPUTools::FB::FIFOArgumentProvider *)&v55);
    goto LABEL_53;
  }

  do
    uint64_t v45 = __ldaxr(v17);
  while (__stlxr(v45 - 1, v17));
  [(id)DYGetGLGuestAppClient(v21) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, volatile int *, uint64_t, uint64_t, uint64_t, void))(*(void *)(v16 + 24)
                                                                                               + 6800LL))( a1,  a2,  a3,  a4,  a5,  a6);
LABEL_53:
  if (v59[0]) {
    free(v59[0]);
  }
}

    uint64_t v33 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v33) {
      uint64_t v33 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v61, v34);
    }
    uint64_t v36 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v17 + 3404);
    if ((_DWORD)v36) {
      uint64_t v33 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v61, v36, v35);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v17, (uint64_t)v61);
    }
    unint64_t v37 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v17 + 3480),  (GPUTools::FB::Fbuf *)(v17 + 3520),  (GPUTools::FB *)v61);
    signed int v38 = *(unsigned int *)(v17 + 3404);
    if ((_DWORD)v38 && gBreakOnError)
    {
      uint64_t v51 = 3LL;
      uint64_t v52 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v27 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v51 = 2LL;
      uint64_t v52 = 952LL;
    }

    breakpoint_break((uint64_t)v61, (volatile int *)v52, v51, v38, v17);
LABEL_39:
    id v39 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v37) defaultFbufStream];
    unsigned int v40 = (unsigned int *)((char *)v39 + 56);
    do
      unsigned int v41 = __ldaxr(v40);
    while (__stlxr(1u, v40));
    if (v41 == 1)
    {
      do
      {
        while (*v40 == 1)
          ;
        do
          uint64_t v42 = __ldaxr(v40);
        while (__stlxr(1u, v40));
      }

      while (v42 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v39, (GPUTools::FB::Fbuf *)v61, *(unsigned int *)v61[0], 1);
    atomic_store(0, v40);
    do
    {
      uint64_t v43 = __ldaxr(v18);
      uint64_t v44 = v43 - 1;
    }

    while (__stlxr(v44, v18));
    if (gCheckGLErrors) {
      uint64_t v45 = v44 < 1;
    }
    else {
      uint64_t v45 = 1;
    }
    if (!v45) {
      handle_opengl_thread_conflict((const void **)v17);
    }
    GPUTools::FB::FIFOArgumentProvider::~FIFOArgumentProvider((GPUTools::FB::FIFOArgumentProvider *)&v57);
    goto LABEL_53;
  }

  do
    uint64_t v46 = __ldaxr(v18);
  while (__stlxr(v46 - 1, v18));
  [(id)DYGetGLGuestAppClient(v22) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, volatile int *, uint64_t, uint64_t, uint64_t, void, void))(*(void *)(v17 + 24) + 6808LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7);
LABEL_53:
  if (v61[0]) {
    free(v61[0]);
  }
}

    char v32 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v32) {
      char v32 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v55, v33);
    }
    uint64_t v35 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v35) {
      char v32 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v55, v35, v34);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v55);
    }
    uint64_t v36 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v55);
    unint64_t v37 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v37 && gBreakOnError)
    {
      uint64_t v50 = 3LL;
      uint64_t v51 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v26 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v50 = 2LL;
      uint64_t v51 = 815LL;
    }

    breakpoint_break((uint64_t)v55, (volatile int *)v51, v50, v37, v13);
LABEL_39:
    signed int v38 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v36) defaultFbufStream];
    id v39 = (unsigned int *)((char *)v38 + 56);
    do
      unsigned int v40 = __ldaxr(v39);
    while (__stlxr(1u, v39));
    if (v40 == 1)
    {
      do
      {
        while (*v39 == 1)
          ;
        do
          unsigned int v41 = __ldaxr(v39);
        while (__stlxr(1u, v39));
      }

      while (v41 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v38, (GPUTools::FB::Fbuf *)v55, *(unsigned int *)v55[0], 1);
    atomic_store(0, v39);
    do
    {
      uint64_t v42 = __ldaxr(v14);
      uint64_t v43 = v42 - 1;
    }

    while (__stlxr(v43, v14));
    if (gCheckGLErrors) {
      uint64_t v44 = v43 < 1;
    }
    else {
      uint64_t v44 = 1;
    }
    if (!v44) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    goto LABEL_52;
  }

  do
    uint64_t v45 = __ldaxr(v14);
  while (__stlxr(v45 - 1, v14));
  [(id)DYGetGLGuestAppClient(v19) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, GPUTools::GL *, const int *))(*(void *)(v13 + 24) + 8024LL))( a1,  a2,  a3,  a4);
LABEL_52:
  if (v55[0]) {
    free(v55[0]);
  }
}

    char v32 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v32) {
      char v32 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v55, v33);
    }
    uint64_t v35 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v35) {
      char v32 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v55, v35, v34);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v55);
    }
    uint64_t v36 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v55);
    unint64_t v37 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v37 && gBreakOnError)
    {
      uint64_t v50 = 3LL;
      uint64_t v51 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v26 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v50 = 2LL;
      uint64_t v51 = 816LL;
    }

    breakpoint_break((uint64_t)v55, (volatile int *)v51, v50, v37, v13);
LABEL_39:
    signed int v38 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v36) defaultFbufStream];
    id v39 = (unsigned int *)((char *)v38 + 56);
    do
      unsigned int v40 = __ldaxr(v39);
    while (__stlxr(1u, v39));
    if (v40 == 1)
    {
      do
      {
        while (*v39 == 1)
          ;
        do
          unsigned int v41 = __ldaxr(v39);
        while (__stlxr(1u, v39));
      }

      while (v41 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v38, (GPUTools::FB::Fbuf *)v55, *(unsigned int *)v55[0], 1);
    atomic_store(0, v39);
    do
    {
      uint64_t v42 = __ldaxr(v14);
      uint64_t v43 = v42 - 1;
    }

    while (__stlxr(v43, v14));
    if (gCheckGLErrors) {
      uint64_t v44 = v43 < 1;
    }
    else {
      uint64_t v44 = 1;
    }
    if (!v44) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    goto LABEL_52;
  }

  do
    uint64_t v45 = __ldaxr(v14);
  while (__stlxr(v45 - 1, v14));
  [(id)DYGetGLGuestAppClient(v19) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, GPUTools::GL *, uint64_t))(*(void *)(v13 + 24) + 8032LL))( a1,  a2,  a3,  a4);
LABEL_52:
  if (v55[0]) {
    free(v55[0]);
  }
}

    char v32 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v32) {
      char v32 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v55, v33);
    }
    uint64_t v35 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v35) {
      char v32 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v55, v35, v34);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v55);
    }
    uint64_t v36 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v55);
    unint64_t v37 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v37 && gBreakOnError)
    {
      uint64_t v50 = 3LL;
      uint64_t v51 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v26 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v50 = 2LL;
      uint64_t v51 = 817LL;
    }

    breakpoint_break((uint64_t)v55, (volatile int *)v51, v50, v37, v13);
LABEL_39:
    signed int v38 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v36) defaultFbufStream];
    id v39 = (unsigned int *)((char *)v38 + 56);
    do
      unsigned int v40 = __ldaxr(v39);
    while (__stlxr(1u, v39));
    if (v40 == 1)
    {
      do
      {
        while (*v39 == 1)
          ;
        do
          unsigned int v41 = __ldaxr(v39);
        while (__stlxr(1u, v39));
      }

      while (v41 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v38, (GPUTools::FB::Fbuf *)v55, *(unsigned int *)v55[0], 1);
    atomic_store(0, v39);
    do
    {
      uint64_t v42 = __ldaxr(v14);
      uint64_t v43 = v42 - 1;
    }

    while (__stlxr(v43, v14));
    if (gCheckGLErrors) {
      uint64_t v44 = v43 < 1;
    }
    else {
      uint64_t v44 = 1;
    }
    if (!v44) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    goto LABEL_52;
  }

  do
    uint64_t v45 = __ldaxr(v14);
  while (__stlxr(v45 - 1, v14));
  [(id)DYGetGLGuestAppClient(v19) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, GPUTools::GL *, const int *))(*(void *)(v13 + 24) + 8040LL))( a1,  a2,  a3,  a4);
LABEL_52:
  if (v55[0]) {
    free(v55[0]);
  }
}

    char v32 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v32) {
      char v32 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v55, v33);
    }
    uint64_t v35 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v35) {
      char v32 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v55, v35, v34);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v55);
    }
    uint64_t v36 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v55);
    unint64_t v37 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v37 && gBreakOnError)
    {
      uint64_t v50 = 3LL;
      uint64_t v51 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v26 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v50 = 2LL;
      uint64_t v51 = 583LL;
    }

    breakpoint_break((uint64_t)v55, (volatile int *)v51, v50, v37, v13);
LABEL_39:
    signed int v38 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v36) defaultFbufStream];
    id v39 = (unsigned int *)((char *)v38 + 56);
    do
      unsigned int v40 = __ldaxr(v39);
    while (__stlxr(1u, v39));
    if (v40 == 1)
    {
      do
      {
        while (*v39 == 1)
          ;
        do
          unsigned int v41 = __ldaxr(v39);
        while (__stlxr(1u, v39));
      }

      while (v41 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v38, (GPUTools::FB::Fbuf *)v55, *(unsigned int *)v55[0], 1);
    atomic_store(0, v39);
    do
    {
      uint64_t v42 = __ldaxr(v14);
      uint64_t v43 = v42 - 1;
    }

    while (__stlxr(v43, v14));
    if (gCheckGLErrors) {
      uint64_t v44 = v43 < 1;
    }
    else {
      uint64_t v44 = 1;
    }
    if (!v44) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    goto LABEL_52;
  }

  do
    uint64_t v45 = __ldaxr(v14);
  while (__stlxr(v45 - 1, v14));
  [(id)DYGetGLGuestAppClient(v19) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, GPUTools::GL *, float))(*(void *)(v13 + 24) + 2320LL))( a1,  a2,  a3,  a4);
LABEL_52:
  if (v55[0]) {
    free(v55[0]);
  }
}

    char v32 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v32) {
      char v32 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v55, v33);
    }
    uint64_t v35 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v35) {
      char v32 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v55, v35, v34);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v55);
    }
    uint64_t v36 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v55);
    unint64_t v37 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v37 && gBreakOnError)
    {
      uint64_t v50 = 3LL;
      uint64_t v51 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v26 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v50 = 2LL;
      uint64_t v51 = 584LL;
    }

    breakpoint_break((uint64_t)v55, (volatile int *)v51, v50, v37, v13);
LABEL_39:
    signed int v38 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v36) defaultFbufStream];
    id v39 = (unsigned int *)((char *)v38 + 56);
    do
      unsigned int v40 = __ldaxr(v39);
    while (__stlxr(1u, v39));
    if (v40 == 1)
    {
      do
      {
        while (*v39 == 1)
          ;
        do
          unsigned int v41 = __ldaxr(v39);
        while (__stlxr(1u, v39));
      }

      while (v41 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v38, (GPUTools::FB::Fbuf *)v55, *(unsigned int *)v55[0], 1);
    atomic_store(0, v39);
    do
    {
      uint64_t v42 = __ldaxr(v14);
      uint64_t v43 = v42 - 1;
    }

    while (__stlxr(v43, v14));
    if (gCheckGLErrors) {
      uint64_t v44 = v43 < 1;
    }
    else {
      uint64_t v44 = 1;
    }
    if (!v44) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    goto LABEL_52;
  }

  do
    uint64_t v45 = __ldaxr(v14);
  while (__stlxr(v45 - 1, v14));
  [(id)DYGetGLGuestAppClient(v19) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, GPUTools::GL *, const float *))(*(void *)(v13 + 24) + 2328LL))( a1,  a2,  a3,  a4);
LABEL_52:
  if (v55[0]) {
    free(v55[0]);
  }
}

    char v32 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v32) {
      char v32 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v55, v33);
    }
    uint64_t v35 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v35) {
      char v32 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v55, v35, v34);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v55);
    }
    uint64_t v36 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v55);
    unint64_t v37 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v37 && gBreakOnError)
    {
      uint64_t v50 = 3LL;
      uint64_t v51 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v26 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v50 = 2LL;
      uint64_t v51 = 585LL;
    }

    breakpoint_break((uint64_t)v55, (volatile int *)v51, v50, v37, v13);
LABEL_39:
    signed int v38 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v36) defaultFbufStream];
    id v39 = (unsigned int *)((char *)v38 + 56);
    do
      unsigned int v40 = __ldaxr(v39);
    while (__stlxr(1u, v39));
    if (v40 == 1)
    {
      do
      {
        while (*v39 == 1)
          ;
        do
          unsigned int v41 = __ldaxr(v39);
        while (__stlxr(1u, v39));
      }

      while (v41 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v38, (GPUTools::FB::Fbuf *)v55, *(unsigned int *)v55[0], 1);
    atomic_store(0, v39);
    do
    {
      uint64_t v42 = __ldaxr(v14);
      uint64_t v43 = v42 - 1;
    }

    while (__stlxr(v43, v14));
    if (gCheckGLErrors) {
      uint64_t v44 = v43 < 1;
    }
    else {
      uint64_t v44 = 1;
    }
    if (!v44) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    goto LABEL_52;
  }

  do
    uint64_t v45 = __ldaxr(v14);
  while (__stlxr(v45 - 1, v14));
  [(id)DYGetGLGuestAppClient(v19) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, GPUTools::GL *, uint64_t))(*(void *)(v13 + 24) + 2336LL))( a1,  a2,  a3,  a4);
LABEL_52:
  if (v55[0]) {
    free(v55[0]);
  }
}

    char v32 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v32) {
      char v32 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v55, v33);
    }
    uint64_t v35 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v35) {
      char v32 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v55, v35, v34);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v55);
    }
    uint64_t v36 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v55);
    unint64_t v37 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v37 && gBreakOnError)
    {
      uint64_t v50 = 3LL;
      uint64_t v51 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v26 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v50 = 2LL;
      uint64_t v51 = 586LL;
    }

    breakpoint_break((uint64_t)v55, (volatile int *)v51, v50, v37, v13);
LABEL_39:
    signed int v38 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v36) defaultFbufStream];
    id v39 = (unsigned int *)((char *)v38 + 56);
    do
      unsigned int v40 = __ldaxr(v39);
    while (__stlxr(1u, v39));
    if (v40 == 1)
    {
      do
      {
        while (*v39 == 1)
          ;
        do
          unsigned int v41 = __ldaxr(v39);
        while (__stlxr(1u, v39));
      }

      while (v41 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v38, (GPUTools::FB::Fbuf *)v55, *(unsigned int *)v55[0], 1);
    atomic_store(0, v39);
    do
    {
      uint64_t v42 = __ldaxr(v14);
      uint64_t v43 = v42 - 1;
    }

    while (__stlxr(v43, v14));
    if (gCheckGLErrors) {
      uint64_t v44 = v43 < 1;
    }
    else {
      uint64_t v44 = 1;
    }
    if (!v44) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    goto LABEL_52;
  }

  do
    uint64_t v45 = __ldaxr(v14);
  while (__stlxr(v45 - 1, v14));
  [(id)DYGetGLGuestAppClient(v19) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, GPUTools::GL *, const int *))(*(void *)(v13 + 24) + 2344LL))( a1,  a2,  a3,  a4);
LABEL_52:
  if (v55[0]) {
    free(v55[0]);
  }
}

    char v32 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v32) {
      char v32 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v55, v33);
    }
    uint64_t v35 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v35) {
      char v32 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v55, v35, v34);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v55);
    }
    uint64_t v36 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v55);
    unint64_t v37 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v37 && gBreakOnError)
    {
      uint64_t v50 = 3LL;
      uint64_t v51 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v26 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v50 = 2LL;
      uint64_t v51 = 598LL;
    }

    breakpoint_break((uint64_t)v55, (volatile int *)v51, v50, v37, v13);
LABEL_39:
    signed int v38 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v36) defaultFbufStream];
    id v39 = (unsigned int *)((char *)v38 + 56);
    do
      unsigned int v40 = __ldaxr(v39);
    while (__stlxr(1u, v39));
    if (v40 == 1)
    {
      do
      {
        while (*v39 == 1)
          ;
        do
          unsigned int v41 = __ldaxr(v39);
        while (__stlxr(1u, v39));
      }

      while (v41 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v38, (GPUTools::FB::Fbuf *)v55, *(unsigned int *)v55[0], 1);
    atomic_store(0, v39);
    do
    {
      uint64_t v42 = __ldaxr(v14);
      uint64_t v43 = v42 - 1;
    }

    while (__stlxr(v43, v14));
    if (gCheckGLErrors) {
      uint64_t v44 = v43 < 1;
    }
    else {
      uint64_t v44 = 1;
    }
    if (!v44) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    goto LABEL_52;
  }

  do
    uint64_t v45 = __ldaxr(v14);
  while (__stlxr(v45 - 1, v14));
  [(id)DYGetGLGuestAppClient(v19) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, GPUTools::GL *, float))(*(void *)(v13 + 24) + 2416LL))( a1,  a2,  a3,  a4);
LABEL_52:
  if (v55[0]) {
    free(v55[0]);
  }
}

    char v32 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v32) {
      char v32 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v55, v33);
    }
    uint64_t v35 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v35) {
      char v32 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v55, v35, v34);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v55);
    }
    uint64_t v36 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v55);
    unint64_t v37 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v37 && gBreakOnError)
    {
      uint64_t v50 = 3LL;
      uint64_t v51 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v26 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v50 = 2LL;
      uint64_t v51 = 599LL;
    }

    breakpoint_break((uint64_t)v55, (volatile int *)v51, v50, v37, v13);
LABEL_39:
    signed int v38 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v36) defaultFbufStream];
    id v39 = (unsigned int *)((char *)v38 + 56);
    do
      unsigned int v40 = __ldaxr(v39);
    while (__stlxr(1u, v39));
    if (v40 == 1)
    {
      do
      {
        while (*v39 == 1)
          ;
        do
          unsigned int v41 = __ldaxr(v39);
        while (__stlxr(1u, v39));
      }

      while (v41 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v38, (GPUTools::FB::Fbuf *)v55, *(unsigned int *)v55[0], 1);
    atomic_store(0, v39);
    do
    {
      uint64_t v42 = __ldaxr(v14);
      uint64_t v43 = v42 - 1;
    }

    while (__stlxr(v43, v14));
    if (gCheckGLErrors) {
      uint64_t v44 = v43 < 1;
    }
    else {
      uint64_t v44 = 1;
    }
    if (!v44) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    goto LABEL_52;
  }

  do
    uint64_t v45 = __ldaxr(v14);
  while (__stlxr(v45 - 1, v14));
  [(id)DYGetGLGuestAppClient(v19) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, GPUTools::GL *, const float *))(*(void *)(v13 + 24) + 2424LL))( a1,  a2,  a3,  a4);
LABEL_52:
  if (v55[0]) {
    free(v55[0]);
  }
}

    char v32 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v32) {
      char v32 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v55, v33);
    }
    uint64_t v35 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v35) {
      char v32 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v55, v35, v34);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v55);
    }
    uint64_t v36 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v55);
    unint64_t v37 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v37 && gBreakOnError)
    {
      uint64_t v50 = 3LL;
      uint64_t v51 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v26 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v50 = 2LL;
      uint64_t v51 = 600LL;
    }

    breakpoint_break((uint64_t)v55, (volatile int *)v51, v50, v37, v13);
LABEL_39:
    signed int v38 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v36) defaultFbufStream];
    id v39 = (unsigned int *)((char *)v38 + 56);
    do
      unsigned int v40 = __ldaxr(v39);
    while (__stlxr(1u, v39));
    if (v40 == 1)
    {
      do
      {
        while (*v39 == 1)
          ;
        do
          unsigned int v41 = __ldaxr(v39);
        while (__stlxr(1u, v39));
      }

      while (v41 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v38, (GPUTools::FB::Fbuf *)v55, *(unsigned int *)v55[0], 1);
    atomic_store(0, v39);
    do
    {
      uint64_t v42 = __ldaxr(v14);
      uint64_t v43 = v42 - 1;
    }

    while (__stlxr(v43, v14));
    if (gCheckGLErrors) {
      uint64_t v44 = v43 < 1;
    }
    else {
      uint64_t v44 = 1;
    }
    if (!v44) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    goto LABEL_52;
  }

  do
    uint64_t v45 = __ldaxr(v14);
  while (__stlxr(v45 - 1, v14));
  [(id)DYGetGLGuestAppClient(v19) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, GPUTools::GL *, uint64_t))(*(void *)(v13 + 24) + 2432LL))( a1,  a2,  a3,  a4);
LABEL_52:
  if (v55[0]) {
    free(v55[0]);
  }
}

    char v32 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v32) {
      char v32 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v55, v33);
    }
    uint64_t v35 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v35) {
      char v32 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v55, v35, v34);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v55);
    }
    uint64_t v36 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v55);
    unint64_t v37 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v37 && gBreakOnError)
    {
      uint64_t v50 = 3LL;
      uint64_t v51 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v26 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v50 = 2LL;
      uint64_t v51 = 601LL;
    }

    breakpoint_break((uint64_t)v55, (volatile int *)v51, v50, v37, v13);
LABEL_39:
    signed int v38 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v36) defaultFbufStream];
    id v39 = (unsigned int *)((char *)v38 + 56);
    do
      unsigned int v40 = __ldaxr(v39);
    while (__stlxr(1u, v39));
    if (v40 == 1)
    {
      do
      {
        while (*v39 == 1)
          ;
        do
          unsigned int v41 = __ldaxr(v39);
        while (__stlxr(1u, v39));
      }

      while (v41 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v38, (GPUTools::FB::Fbuf *)v55, *(unsigned int *)v55[0], 1);
    atomic_store(0, v39);
    do
    {
      uint64_t v42 = __ldaxr(v14);
      uint64_t v43 = v42 - 1;
    }

    while (__stlxr(v43, v14));
    if (gCheckGLErrors) {
      uint64_t v44 = v43 < 1;
    }
    else {
      uint64_t v44 = 1;
    }
    if (!v44) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    goto LABEL_52;
  }

  do
    uint64_t v45 = __ldaxr(v14);
  while (__stlxr(v45 - 1, v14));
  [(id)DYGetGLGuestAppClient(v19) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, GPUTools::GL *, const int *))(*(void *)(v13 + 24) + 2440LL))( a1,  a2,  a3,  a4);
LABEL_52:
  if (v55[0]) {
    free(v55[0]);
  }
}

    unint64_t v37 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v37) {
      unint64_t v37 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v60, v38);
    }
    unsigned int v40 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v19 + 3404);
    if ((_DWORD)v40) {
      unint64_t v37 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v60, v40, v39);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v37), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v19, (uint64_t)v60);
    }
    unsigned int v41 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v19 + 3480),  (GPUTools::FB::Fbuf *)(v19 + 3520),  (GPUTools::FB *)v60);
    uint64_t v42 = *(unsigned int *)(v19 + 3404);
    if ((_DWORD)v42 && gBreakOnError)
    {
      uint64_t v55 = 3LL;
      unsigned int v56 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v59 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v55 = 2LL;
      unsigned int v56 = 730LL;
    }

    breakpoint_break((uint64_t)v60, (volatile int *)v56, v55, v42, v19);
LABEL_39:
    uint64_t v43 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v41) defaultFbufStream];
    uint64_t v44 = (unsigned int *)((char *)v43 + 56);
    do
      uint64_t v45 = __ldaxr(v44);
    while (__stlxr(1u, v44));
    if (v45 == 1)
    {
      do
      {
        while (*v44 == 1)
          ;
        do
          uint64_t v46 = __ldaxr(v44);
        while (__stlxr(1u, v44));
      }

      while (v46 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v43, (GPUTools::FB::Fbuf *)v60, *(unsigned int *)v60[0], 1);
    atomic_store(0, v44);
    do
    {
      unsigned int v47 = __ldaxr(v20);
      unsigned int v48 = v47 - 1;
    }

    while (__stlxr(v48, v20));
    if (gCheckGLErrors) {
      uint64_t v49 = v48 < 1;
    }
    else {
      uint64_t v49 = 1;
    }
    if (!v49) {
      handle_opengl_thread_conflict((const void **)v19);
    }
    goto LABEL_52;
  }

  do
    uint64_t v50 = __ldaxr(v20);
  while (__stlxr(v50 - 1, v20));
  [(id)DYGetGLGuestAppClient(v28) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const void *))(*(void *)(v19 + 24) + 4088LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7);
LABEL_52:
  if (v60[0]) {
    free(v60[0]);
  }
}

    int v27 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v22), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v27) {
      int v27 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v53, v28);
    }
    uint64_t v30 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v30) {
      int v27 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v53, v30, v29);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)v53);
    }
    uint64_t v31 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)v53);
    char v32 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v32 && gBreakOnError)
    {
      uint64_t v45 = 3LL;
      uint64_t v46 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v21 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v45 = 2LL;
      uint64_t v46 = 609LL;
    }

    breakpoint_break((uint64_t)v53, (volatile int *)v46, v45, v32, v11);
LABEL_39:
    uint64_t v33 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v31) defaultFbufStream];
    id v34 = (unsigned int *)((char *)v33 + 56);
    do
      uint64_t v35 = __ldaxr(v34);
    while (__stlxr(1u, v34));
    if (v35 == 1)
    {
      do
      {
        while (*v34 == 1)
          ;
        do
          uint64_t v36 = __ldaxr(v34);
        while (__stlxr(1u, v34));
      }

      while (v36 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v33, (GPUTools::FB::Fbuf *)v53, *(unsigned int *)v53[0], 1);
    atomic_store(0, v34);
    do
    {
      unint64_t v37 = __ldaxr(v12);
      signed int v38 = v37 - 1;
    }

    while (__stlxr(v38, v12));
    if (gCheckGLErrors) {
      id v39 = v38 < 1;
    }
    else {
      id v39 = 1;
    }
    if (!v39) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    GPUTools::FB::FIFOArgumentProvider::~FIFOArgumentProvider((GPUTools::FB::FIFOArgumentProvider *)&v49);
    goto LABEL_53;
  }

  do
    unsigned int v40 = __ldaxr(v12);
  while (__stlxr(v40 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, float))(*(void *)(v11 + 24) + 4816LL))(a1, a2, a3);
LABEL_53:
  if (v53[0]) {
    free(v53[0]);
  }
}

    uint64_t v29 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v24), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v29) {
      uint64_t v29 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v55, v30);
    }
    char v32 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v32) {
      uint64_t v29 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v55, v32, v31);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v55);
    }
    uint64_t v33 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v55);
    id v34 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v34 && gBreakOnError)
    {
      unsigned int v47 = 3LL;
      unsigned int v48 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v23 & 2) == 0) {
        goto LABEL_39;
      }
      unsigned int v47 = 2LL;
      unsigned int v48 = 615LL;
    }

    breakpoint_break((uint64_t)v55, (volatile int *)v48, v47, v34, v13);
LABEL_39:
    uint64_t v35 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v33) defaultFbufStream];
    uint64_t v36 = (unsigned int *)((char *)v35 + 56);
    do
      unint64_t v37 = __ldaxr(v36);
    while (__stlxr(1u, v36));
    if (v37 == 1)
    {
      do
      {
        while (*v36 == 1)
          ;
        do
          signed int v38 = __ldaxr(v36);
        while (__stlxr(1u, v36));
      }

      while (v38 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v35, (GPUTools::FB::Fbuf *)v55, *(unsigned int *)v55[0], 1);
    atomic_store(0, v36);
    do
    {
      id v39 = __ldaxr(v14);
      unsigned int v40 = v39 - 1;
    }

    while (__stlxr(v40, v14));
    if (gCheckGLErrors) {
      unsigned int v41 = v40 < 1;
    }
    else {
      unsigned int v41 = 1;
    }
    if (!v41) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    GPUTools::FB::FIFOArgumentProvider::~FIFOArgumentProvider((GPUTools::FB::FIFOArgumentProvider *)&v51);
    goto LABEL_53;
  }

  do
    uint64_t v42 = __ldaxr(v14);
  while (__stlxr(v42 - 1, v14));
  [(id)DYGetGLGuestAppClient(v18) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, float, float))(*(void *)(v13 + 24) + 4824LL))(a1, a2, a3, a4);
LABEL_53:
  if (v55[0]) {
    free(v55[0]);
  }
}

    uint64_t v31 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v26), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v31) {
      uint64_t v31 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v57, v32);
    }
    id v34 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v15 + 3404);
    if ((_DWORD)v34) {
      uint64_t v31 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v57, v34, v33);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v31), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v15, (uint64_t)v57);
    }
    uint64_t v35 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v15 + 3480),  (GPUTools::FB::Fbuf *)(v15 + 3520),  (GPUTools::FB *)v57);
    uint64_t v36 = *(unsigned int *)(v15 + 3404);
    if ((_DWORD)v36 && gBreakOnError)
    {
      uint64_t v49 = 3LL;
      uint64_t v50 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v25 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v49 = 2LL;
      uint64_t v50 = 621LL;
    }

    breakpoint_break((uint64_t)v57, (volatile int *)v50, v49, v36, v15);
LABEL_39:
    unint64_t v37 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v35) defaultFbufStream];
    signed int v38 = (unsigned int *)((char *)v37 + 56);
    do
      id v39 = __ldaxr(v38);
    while (__stlxr(1u, v38));
    if (v39 == 1)
    {
      do
      {
        while (*v38 == 1)
          ;
        do
          unsigned int v40 = __ldaxr(v38);
        while (__stlxr(1u, v38));
      }

      while (v40 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v37, (GPUTools::FB::Fbuf *)v57, *(unsigned int *)v57[0], 1);
    atomic_store(0, v38);
    do
    {
      unsigned int v41 = __ldaxr(v16);
      uint64_t v42 = v41 - 1;
    }

    while (__stlxr(v42, v16));
    if (gCheckGLErrors) {
      uint64_t v43 = v42 < 1;
    }
    else {
      uint64_t v43 = 1;
    }
    if (!v43) {
      handle_opengl_thread_conflict((const void **)v15);
    }
    GPUTools::FB::FIFOArgumentProvider::~FIFOArgumentProvider((GPUTools::FB::FIFOArgumentProvider *)&v53);
    goto LABEL_53;
  }

  do
    uint64_t v44 = __ldaxr(v16);
  while (__stlxr(v44 - 1, v16));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, float, float, float))(*(void *)(v15 + 24) + 4832LL))( a1,  a2,  a3,  a4,  a5);
LABEL_53:
  if (v57[0]) {
    free(v57[0]);
  }
}

    uint64_t v33 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v33) {
      uint64_t v33 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v59, v34);
    }
    uint64_t v36 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v17 + 3404);
    if ((_DWORD)v36) {
      uint64_t v33 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v59, v36, v35);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v17, (uint64_t)v59);
    }
    unint64_t v37 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v17 + 3480),  (GPUTools::FB::Fbuf *)(v17 + 3520),  (GPUTools::FB *)v59);
    signed int v38 = *(unsigned int *)(v17 + 3404);
    if ((_DWORD)v38 && gBreakOnError)
    {
      uint64_t v51 = 3LL;
      uint64_t v52 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v27 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v51 = 2LL;
      uint64_t v52 = 627LL;
    }

    breakpoint_break((uint64_t)v59, (volatile int *)v52, v51, v38, v17);
LABEL_39:
    id v39 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v37) defaultFbufStream];
    unsigned int v40 = (unsigned int *)((char *)v39 + 56);
    do
      unsigned int v41 = __ldaxr(v40);
    while (__stlxr(1u, v40));
    if (v41 == 1)
    {
      do
      {
        while (*v40 == 1)
          ;
        do
          uint64_t v42 = __ldaxr(v40);
        while (__stlxr(1u, v40));
      }

      while (v42 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v39, (GPUTools::FB::Fbuf *)v59, *(unsigned int *)v59[0], 1);
    atomic_store(0, v40);
    do
    {
      uint64_t v43 = __ldaxr(v18);
      uint64_t v44 = v43 - 1;
    }

    while (__stlxr(v44, v18));
    if (gCheckGLErrors) {
      uint64_t v45 = v44 < 1;
    }
    else {
      uint64_t v45 = 1;
    }
    if (!v45) {
      handle_opengl_thread_conflict((const void **)v17);
    }
    GPUTools::FB::FIFOArgumentProvider::~FIFOArgumentProvider((GPUTools::FB::FIFOArgumentProvider *)&v55);
    goto LABEL_53;
  }

  do
    uint64_t v46 = __ldaxr(v18);
  while (__stlxr(v46 - 1, v18));
  [(id)DYGetGLGuestAppClient(v22) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, float, float, float, float))(*(void *)(v17 + 24) + 4840LL))( a1,  a2,  a3,  a4,  a5,  a6);
LABEL_53:
  if (v59[0]) {
    free(v59[0]);
  }
}

    int v27 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v22), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v27) {
      int v27 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v53, v28);
    }
    uint64_t v30 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v30) {
      int v27 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v53, v30, v29);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)v53);
    }
    uint64_t v31 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)v53);
    char v32 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v32 && gBreakOnError)
    {
      uint64_t v45 = 3LL;
      uint64_t v46 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v21 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v45 = 2LL;
      uint64_t v46 = 611LL;
    }

    breakpoint_break((uint64_t)v53, (volatile int *)v46, v45, v32, v11);
LABEL_39:
    uint64_t v33 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v31) defaultFbufStream];
    id v34 = (unsigned int *)((char *)v33 + 56);
    do
      uint64_t v35 = __ldaxr(v34);
    while (__stlxr(1u, v34));
    if (v35 == 1)
    {
      do
      {
        while (*v34 == 1)
          ;
        do
          uint64_t v36 = __ldaxr(v34);
        while (__stlxr(1u, v34));
      }

      while (v36 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v33, (GPUTools::FB::Fbuf *)v53, *(unsigned int *)v53[0], 1);
    atomic_store(0, v34);
    do
    {
      unint64_t v37 = __ldaxr(v12);
      signed int v38 = v37 - 1;
    }

    while (__stlxr(v38, v12));
    if (gCheckGLErrors) {
      id v39 = v38 < 1;
    }
    else {
      id v39 = 1;
    }
    if (!v39) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    GPUTools::FB::FIFOArgumentProvider::~FIFOArgumentProvider((GPUTools::FB::FIFOArgumentProvider *)&v49);
    goto LABEL_53;
  }

  do
    unsigned int v40 = __ldaxr(v12);
  while (__stlxr(v40 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t))(*(void *)(v11 + 24) + 4848LL))(a1, a2, a3);
LABEL_53:
  if (v53[0]) {
    free(v53[0]);
  }
}

    uint64_t v29 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v24), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v29) {
      uint64_t v29 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v55, v30);
    }
    char v32 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v32) {
      uint64_t v29 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v55, v32, v31);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v55);
    }
    uint64_t v33 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v55);
    id v34 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v34 && gBreakOnError)
    {
      unsigned int v47 = 3LL;
      unsigned int v48 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v23 & 2) == 0) {
        goto LABEL_39;
      }
      unsigned int v47 = 2LL;
      unsigned int v48 = 617LL;
    }

    breakpoint_break((uint64_t)v55, (volatile int *)v48, v47, v34, v13);
LABEL_39:
    uint64_t v35 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v33) defaultFbufStream];
    uint64_t v36 = (unsigned int *)((char *)v35 + 56);
    do
      unint64_t v37 = __ldaxr(v36);
    while (__stlxr(1u, v36));
    if (v37 == 1)
    {
      do
      {
        while (*v36 == 1)
          ;
        do
          signed int v38 = __ldaxr(v36);
        while (__stlxr(1u, v36));
      }

      while (v38 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v35, (GPUTools::FB::Fbuf *)v55, *(unsigned int *)v55[0], 1);
    atomic_store(0, v36);
    do
    {
      id v39 = __ldaxr(v14);
      unsigned int v40 = v39 - 1;
    }

    while (__stlxr(v40, v14));
    if (gCheckGLErrors) {
      unsigned int v41 = v40 < 1;
    }
    else {
      unsigned int v41 = 1;
    }
    if (!v41) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    GPUTools::FB::FIFOArgumentProvider::~FIFOArgumentProvider((GPUTools::FB::FIFOArgumentProvider *)&v51);
    goto LABEL_53;
  }

  do
    uint64_t v42 = __ldaxr(v14);
  while (__stlxr(v42 - 1, v14));
  [(id)DYGetGLGuestAppClient(v18) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 + 24) + 4856LL))( a1,  a2,  a3,  a4);
LABEL_53:
  if (v55[0]) {
    free(v55[0]);
  }
}

    uint64_t v31 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v26), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v31) {
      uint64_t v31 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v57, v32);
    }
    id v34 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v15 + 3404);
    if ((_DWORD)v34) {
      uint64_t v31 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v57, v34, v33);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v31), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v15, (uint64_t)v57);
    }
    uint64_t v35 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v15 + 3480),  (GPUTools::FB::Fbuf *)(v15 + 3520),  (GPUTools::FB *)v57);
    uint64_t v36 = *(unsigned int *)(v15 + 3404);
    if ((_DWORD)v36 && gBreakOnError)
    {
      uint64_t v49 = 3LL;
      uint64_t v50 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v25 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v49 = 2LL;
      uint64_t v50 = 623LL;
    }

    breakpoint_break((uint64_t)v57, (volatile int *)v50, v49, v36, v15);
LABEL_39:
    unint64_t v37 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v35) defaultFbufStream];
    signed int v38 = (unsigned int *)((char *)v37 + 56);
    do
      id v39 = __ldaxr(v38);
    while (__stlxr(1u, v38));
    if (v39 == 1)
    {
      do
      {
        while (*v38 == 1)
          ;
        do
          unsigned int v40 = __ldaxr(v38);
        while (__stlxr(1u, v38));
      }

      while (v40 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v37, (GPUTools::FB::Fbuf *)v57, *(unsigned int *)v57[0], 1);
    atomic_store(0, v38);
    do
    {
      unsigned int v41 = __ldaxr(v16);
      uint64_t v42 = v41 - 1;
    }

    while (__stlxr(v42, v16));
    if (gCheckGLErrors) {
      uint64_t v43 = v42 < 1;
    }
    else {
      uint64_t v43 = 1;
    }
    if (!v43) {
      handle_opengl_thread_conflict((const void **)v15);
    }
    GPUTools::FB::FIFOArgumentProvider::~FIFOArgumentProvider((GPUTools::FB::FIFOArgumentProvider *)&v53);
    goto LABEL_53;
  }

  do
    uint64_t v44 = __ldaxr(v16);
  while (__stlxr(v44 - 1, v16));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 + 24) + 4864LL))( a1,  a2,  a3,  a4,  a5);
LABEL_53:
  if (v57[0]) {
    free(v57[0]);
  }
}

    char v32 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v32) {
      char v32 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v59, v33);
    }
    uint64_t v35 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v16 + 3404);
    if ((_DWORD)v35) {
      char v32 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v59, v35, v34);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v16, (uint64_t)v59);
    }
    uint64_t v36 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v16 + 3480),  (GPUTools::FB::Fbuf *)(v16 + 3520),  (GPUTools::FB *)v59);
    unint64_t v37 = *(unsigned int *)(v16 + 3404);
    if ((_DWORD)v37 && gBreakOnError)
    {
      uint64_t v50 = 3LL;
      uint64_t v51 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v26 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v50 = 2LL;
      uint64_t v51 = 629LL;
    }

    breakpoint_break((uint64_t)v59, (volatile int *)v51, v50, v37, v16);
LABEL_39:
    signed int v38 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v36) defaultFbufStream];
    id v39 = (unsigned int *)((char *)v38 + 56);
    do
      unsigned int v40 = __ldaxr(v39);
    while (__stlxr(1u, v39));
    if (v40 == 1)
    {
      do
      {
        while (*v39 == 1)
          ;
        do
          unsigned int v41 = __ldaxr(v39);
        while (__stlxr(1u, v39));
      }

      while (v41 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v38, (GPUTools::FB::Fbuf *)v59, *(unsigned int *)v59[0], 1);
    atomic_store(0, v39);
    do
    {
      uint64_t v42 = __ldaxr(v17);
      uint64_t v43 = v42 - 1;
    }

    while (__stlxr(v43, v17));
    if (gCheckGLErrors) {
      uint64_t v44 = v43 < 1;
    }
    else {
      uint64_t v44 = 1;
    }
    if (!v44) {
      handle_opengl_thread_conflict((const void **)v16);
    }
    GPUTools::FB::FIFOArgumentProvider::~FIFOArgumentProvider((GPUTools::FB::FIFOArgumentProvider *)&v55);
    goto LABEL_53;
  }

  do
    uint64_t v45 = __ldaxr(v17);
  while (__stlxr(v45 - 1, v17));
  [(id)DYGetGLGuestAppClient(v21) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)(v16 + 24) + 4872LL))( a1,  a2,  a3,  a4,  a5,  a6);
LABEL_53:
  if (v59[0]) {
    free(v59[0]);
  }
}

    uint64_t v33 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v33) {
      uint64_t v33 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v56, v34);
    }
    uint64_t v36 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v36) {
      uint64_t v33 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v56, v36, v35);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v56);
    }
    unint64_t v37 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v56);
    signed int v38 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v38 && gBreakOnError)
    {
      uint64_t v51 = 3LL;
      uint64_t v52 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v27 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v51 = 2LL;
      uint64_t v52 = 467LL;
    }

    breakpoint_break((uint64_t)v56, (volatile int *)v52, v51, v38, v13);
LABEL_39:
    id v39 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v37) defaultFbufStream];
    unsigned int v40 = (unsigned int *)((char *)v39 + 56);
    do
      unsigned int v41 = __ldaxr(v40);
    while (__stlxr(1u, v40));
    if (v41 == 1)
    {
      do
      {
        while (*v40 == 1)
          ;
        do
          uint64_t v42 = __ldaxr(v40);
        while (__stlxr(1u, v40));
      }

      while (v42 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v39, (GPUTools::FB::Fbuf *)v56, *(unsigned int *)v56[0], 1);
    atomic_store(0, v40);
    if (!gCheckGLErrors) {
      check_errors(v13);
    }
    if (!*(_DWORD *)(v13 + 3404)) {
      wrapper_cache_program_parameter((ContextInfo *)v13, a2, a3, a4);
    }
    do
    {
      uint64_t v43 = __ldaxr(v14);
      uint64_t v44 = v43 - 1;
    }

    while (__stlxr(v44, v14));
    if (gCheckGLErrors) {
      uint64_t v45 = v44 < 1;
    }
    else {
      uint64_t v45 = 1;
    }
    if (!v45) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    goto LABEL_55;
  }

  do
    uint64_t v46 = __ldaxr(v14);
  while (__stlxr(v46 - 1, v14));
  [(id)DYGetGLGuestAppClient(v19) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, GPUTools::GL *, uint64_t))(*(void *)(v13 + 24) + 5512LL))( a1,  a2,  a3,  a4);
LABEL_55:
  if (v56[0]) {
    free(v56[0]);
  }
}

    int v27 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v22), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v27) {
      int v27 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v53, v28);
    }
    uint64_t v30 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v30) {
      int v27 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v53, v30, v29);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)v53);
    }
    uint64_t v31 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)v53);
    char v32 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v32 && gBreakOnError)
    {
      uint64_t v45 = 3LL;
      uint64_t v46 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v21 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v45 = 2LL;
      uint64_t v46 = 613LL;
    }

    breakpoint_break((uint64_t)v53, (volatile int *)v46, v45, v32, v11);
LABEL_39:
    uint64_t v33 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v31) defaultFbufStream];
    id v34 = (unsigned int *)((char *)v33 + 56);
    do
      uint64_t v35 = __ldaxr(v34);
    while (__stlxr(1u, v34));
    if (v35 == 1)
    {
      do
      {
        while (*v34 == 1)
          ;
        do
          uint64_t v36 = __ldaxr(v34);
        while (__stlxr(1u, v34));
      }

      while (v36 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v33, (GPUTools::FB::Fbuf *)v53, *(unsigned int *)v53[0], 1);
    atomic_store(0, v34);
    do
    {
      unint64_t v37 = __ldaxr(v12);
      signed int v38 = v37 - 1;
    }

    while (__stlxr(v38, v12));
    if (gCheckGLErrors) {
      id v39 = v38 < 1;
    }
    else {
      id v39 = 1;
    }
    if (!v39) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    GPUTools::FB::FIFOArgumentProvider::~FIFOArgumentProvider((GPUTools::FB::FIFOArgumentProvider *)&v49);
    goto LABEL_53;
  }

  do
    unsigned int v40 = __ldaxr(v12);
  while (__stlxr(v40 - 1, v12));
  [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t))(*(void *)(v11 + 24) + 5872LL))(a1, a2, a3);
LABEL_53:
  if (v53[0]) {
    free(v53[0]);
  }
}

    uint64_t v29 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v24), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v29) {
      uint64_t v29 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v55, v30);
    }
    char v32 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v32) {
      uint64_t v29 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v55, v32, v31);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v55);
    }
    uint64_t v33 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v55);
    id v34 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v34 && gBreakOnError)
    {
      unsigned int v47 = 3LL;
      unsigned int v48 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v23 & 2) == 0) {
        goto LABEL_39;
      }
      unsigned int v47 = 2LL;
      unsigned int v48 = 619LL;
    }

    breakpoint_break((uint64_t)v55, (volatile int *)v48, v47, v34, v13);
LABEL_39:
    uint64_t v35 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v33) defaultFbufStream];
    uint64_t v36 = (unsigned int *)((char *)v35 + 56);
    do
      unint64_t v37 = __ldaxr(v36);
    while (__stlxr(1u, v36));
    if (v37 == 1)
    {
      do
      {
        while (*v36 == 1)
          ;
        do
          signed int v38 = __ldaxr(v36);
        while (__stlxr(1u, v36));
      }

      while (v38 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v35, (GPUTools::FB::Fbuf *)v55, *(unsigned int *)v55[0], 1);
    atomic_store(0, v36);
    do
    {
      id v39 = __ldaxr(v14);
      unsigned int v40 = v39 - 1;
    }

    while (__stlxr(v40, v14));
    if (gCheckGLErrors) {
      unsigned int v41 = v40 < 1;
    }
    else {
      unsigned int v41 = 1;
    }
    if (!v41) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    GPUTools::FB::FIFOArgumentProvider::~FIFOArgumentProvider((GPUTools::FB::FIFOArgumentProvider *)&v51);
    goto LABEL_53;
  }

  do
    uint64_t v42 = __ldaxr(v14);
  while (__stlxr(v42 - 1, v14));
  [(id)DYGetGLGuestAppClient(v18) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 + 24) + 5880LL))( a1,  a2,  a3,  a4);
LABEL_53:
  if (v55[0]) {
    free(v55[0]);
  }
}

    uint64_t v31 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v26), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v31) {
      uint64_t v31 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v57, v32);
    }
    id v34 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v15 + 3404);
    if ((_DWORD)v34) {
      uint64_t v31 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v57, v34, v33);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v31), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v15, (uint64_t)v57);
    }
    uint64_t v35 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v15 + 3480),  (GPUTools::FB::Fbuf *)(v15 + 3520),  (GPUTools::FB *)v57);
    uint64_t v36 = *(unsigned int *)(v15 + 3404);
    if ((_DWORD)v36 && gBreakOnError)
    {
      uint64_t v49 = 3LL;
      uint64_t v50 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v25 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v49 = 2LL;
      uint64_t v50 = 625LL;
    }

    breakpoint_break((uint64_t)v57, (volatile int *)v50, v49, v36, v15);
LABEL_39:
    unint64_t v37 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v35) defaultFbufStream];
    signed int v38 = (unsigned int *)((char *)v37 + 56);
    do
      id v39 = __ldaxr(v38);
    while (__stlxr(1u, v38));
    if (v39 == 1)
    {
      do
      {
        while (*v38 == 1)
          ;
        do
          unsigned int v40 = __ldaxr(v38);
        while (__stlxr(1u, v38));
      }

      while (v40 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v37, (GPUTools::FB::Fbuf *)v57, *(unsigned int *)v57[0], 1);
    atomic_store(0, v38);
    do
    {
      unsigned int v41 = __ldaxr(v16);
      uint64_t v42 = v41 - 1;
    }

    while (__stlxr(v42, v16));
    if (gCheckGLErrors) {
      uint64_t v43 = v42 < 1;
    }
    else {
      uint64_t v43 = 1;
    }
    if (!v43) {
      handle_opengl_thread_conflict((const void **)v15);
    }
    GPUTools::FB::FIFOArgumentProvider::~FIFOArgumentProvider((GPUTools::FB::FIFOArgumentProvider *)&v53);
    goto LABEL_53;
  }

  do
    uint64_t v44 = __ldaxr(v16);
  while (__stlxr(v44 - 1, v16));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 + 24) + 5888LL))( a1,  a2,  a3,  a4,  a5);
LABEL_53:
  if (v57[0]) {
    free(v57[0]);
  }
}

    char v32 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v32) {
      char v32 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v59, v33);
    }
    uint64_t v35 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v16 + 3404);
    if ((_DWORD)v35) {
      char v32 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v59, v35, v34);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v16, (uint64_t)v59);
    }
    uint64_t v36 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v16 + 3480),  (GPUTools::FB::Fbuf *)(v16 + 3520),  (GPUTools::FB *)v59);
    unint64_t v37 = *(unsigned int *)(v16 + 3404);
    if ((_DWORD)v37 && gBreakOnError)
    {
      uint64_t v50 = 3LL;
      uint64_t v51 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v26 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v50 = 2LL;
      uint64_t v51 = 631LL;
    }

    breakpoint_break((uint64_t)v59, (volatile int *)v51, v50, v37, v16);
LABEL_39:
    signed int v38 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v36) defaultFbufStream];
    id v39 = (unsigned int *)((char *)v38 + 56);
    do
      unsigned int v40 = __ldaxr(v39);
    while (__stlxr(1u, v39));
    if (v40 == 1)
    {
      do
      {
        while (*v39 == 1)
          ;
        do
          unsigned int v41 = __ldaxr(v39);
        while (__stlxr(1u, v39));
      }

      while (v41 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v38, (GPUTools::FB::Fbuf *)v59, *(unsigned int *)v59[0], 1);
    atomic_store(0, v39);
    do
    {
      uint64_t v42 = __ldaxr(v17);
      uint64_t v43 = v42 - 1;
    }

    while (__stlxr(v43, v17));
    if (gCheckGLErrors) {
      uint64_t v44 = v43 < 1;
    }
    else {
      uint64_t v44 = 1;
    }
    if (!v44) {
      handle_opengl_thread_conflict((const void **)v16);
    }
    GPUTools::FB::FIFOArgumentProvider::~FIFOArgumentProvider((GPUTools::FB::FIFOArgumentProvider *)&v55);
    goto LABEL_53;
  }

  do
    uint64_t v45 = __ldaxr(v17);
  while (__stlxr(v45 - 1, v17));
  [(id)DYGetGLGuestAppClient(v21) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)(v16 + 24) + 5896LL))( a1,  a2,  a3,  a4,  a5,  a6);
LABEL_53:
  if (v59[0]) {
    free(v59[0]);
  }
}

    char v32 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v32) {
      char v32 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v55, v33);
    }
    uint64_t v35 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v35) {
      char v32 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v55, v35, v34);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v55);
    }
    uint64_t v36 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v55);
    unint64_t v37 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v37 && gBreakOnError)
    {
      uint64_t v50 = 3LL;
      uint64_t v51 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v26 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v50 = 2LL;
      uint64_t v51 = 872LL;
    }

    breakpoint_break((uint64_t)v55, (volatile int *)v51, v50, v37, v13);
LABEL_39:
    signed int v38 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v36) defaultFbufStream];
    id v39 = (unsigned int *)((char *)v38 + 56);
    do
      unsigned int v40 = __ldaxr(v39);
    while (__stlxr(1u, v39));
    if (v40 == 1)
    {
      do
      {
        while (*v39 == 1)
          ;
        do
          unsigned int v41 = __ldaxr(v39);
        while (__stlxr(1u, v39));
      }

      while (v41 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v38, (GPUTools::FB::Fbuf *)v55, *(unsigned int *)v55[0], 1);
    atomic_store(0, v39);
    do
    {
      uint64_t v42 = __ldaxr(v14);
      uint64_t v43 = v42 - 1;
    }

    while (__stlxr(v43, v14));
    if (gCheckGLErrors) {
      uint64_t v44 = v43 < 1;
    }
    else {
      uint64_t v44 = 1;
    }
    if (!v44) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    goto LABEL_52;
  }

  do
    uint64_t v45 = __ldaxr(v14);
  while (__stlxr(v45 - 1, v14));
  [(id)DYGetGLGuestAppClient(v19) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, GPUTools::GL *, uint64_t))(*(void *)(v13 + 24) + 6432LL))( a1,  a2,  a3,  a4);
LABEL_52:
  if (v55[0]) {
    free(v55[0]);
  }
}

    char v32 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v32) {
      char v32 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v55, v33);
    }
    uint64_t v35 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v35) {
      char v32 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v55, v35, v34);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v55);
    }
    uint64_t v36 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v55);
    unint64_t v37 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v37 && gBreakOnError)
    {
      uint64_t v50 = 3LL;
      uint64_t v51 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v26 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v50 = 2LL;
      uint64_t v51 = 873LL;
    }

    breakpoint_break((uint64_t)v55, (volatile int *)v51, v50, v37, v13);
LABEL_39:
    signed int v38 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v36) defaultFbufStream];
    id v39 = (unsigned int *)((char *)v38 + 56);
    do
      unsigned int v40 = __ldaxr(v39);
    while (__stlxr(1u, v39));
    if (v40 == 1)
    {
      do
      {
        while (*v39 == 1)
          ;
        do
          unsigned int v41 = __ldaxr(v39);
        while (__stlxr(1u, v39));
      }

      while (v41 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v38, (GPUTools::FB::Fbuf *)v55, *(unsigned int *)v55[0], 1);
    atomic_store(0, v39);
    do
    {
      uint64_t v42 = __ldaxr(v14);
      uint64_t v43 = v42 - 1;
    }

    while (__stlxr(v43, v14));
    if (gCheckGLErrors) {
      uint64_t v44 = v43 < 1;
    }
    else {
      uint64_t v44 = 1;
    }
    if (!v44) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    goto LABEL_52;
  }

  do
    uint64_t v45 = __ldaxr(v14);
  while (__stlxr(v45 - 1, v14));
  [(id)DYGetGLGuestAppClient(v19) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, GPUTools::GL *, const int *))(*(void *)(v13 + 24) + 6440LL))( a1,  a2,  a3,  a4);
LABEL_52:
  if (v55[0]) {
    free(v55[0]);
  }
}

    char v32 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v32) {
      char v32 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v55, v33);
    }
    uint64_t v35 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v35) {
      char v32 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v55, v35, v34);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v55);
    }
    uint64_t v36 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v55);
    unint64_t v37 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v37 && gBreakOnError)
    {
      uint64_t v50 = 3LL;
      uint64_t v51 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v26 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v50 = 2LL;
      uint64_t v51 = 870LL;
    }

    breakpoint_break((uint64_t)v55, (volatile int *)v51, v50, v37, v13);
LABEL_39:
    signed int v38 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v36) defaultFbufStream];
    id v39 = (unsigned int *)((char *)v38 + 56);
    do
      unsigned int v40 = __ldaxr(v39);
    while (__stlxr(1u, v39));
    if (v40 == 1)
    {
      do
      {
        while (*v39 == 1)
          ;
        do
          unsigned int v41 = __ldaxr(v39);
        while (__stlxr(1u, v39));
      }

      while (v41 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v38, (GPUTools::FB::Fbuf *)v55, *(unsigned int *)v55[0], 1);
    atomic_store(0, v39);
    do
    {
      uint64_t v42 = __ldaxr(v14);
      uint64_t v43 = v42 - 1;
    }

    while (__stlxr(v43, v14));
    if (gCheckGLErrors) {
      uint64_t v44 = v43 < 1;
    }
    else {
      uint64_t v44 = 1;
    }
    if (!v44) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    goto LABEL_52;
  }

  do
    uint64_t v45 = __ldaxr(v14);
  while (__stlxr(v45 - 1, v14));
  [(id)DYGetGLGuestAppClient(v19) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, GPUTools::GL *, float))(*(void *)(v13 + 24) + 6448LL))( a1,  a2,  a3,  a4);
LABEL_52:
  if (v55[0]) {
    free(v55[0]);
  }
}

    char v32 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v32) {
      char v32 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v55, v33);
    }
    uint64_t v35 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v35) {
      char v32 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v55, v35, v34);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v55);
    }
    uint64_t v36 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v55);
    unint64_t v37 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v37 && gBreakOnError)
    {
      uint64_t v50 = 3LL;
      uint64_t v51 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v26 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v50 = 2LL;
      uint64_t v51 = 871LL;
    }

    breakpoint_break((uint64_t)v55, (volatile int *)v51, v50, v37, v13);
LABEL_39:
    signed int v38 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v36) defaultFbufStream];
    id v39 = (unsigned int *)((char *)v38 + 56);
    do
      unsigned int v40 = __ldaxr(v39);
    while (__stlxr(1u, v39));
    if (v40 == 1)
    {
      do
      {
        while (*v39 == 1)
          ;
        do
          unsigned int v41 = __ldaxr(v39);
        while (__stlxr(1u, v39));
      }

      while (v41 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v38, (GPUTools::FB::Fbuf *)v55, *(unsigned int *)v55[0], 1);
    atomic_store(0, v39);
    do
    {
      uint64_t v42 = __ldaxr(v14);
      uint64_t v43 = v42 - 1;
    }

    while (__stlxr(v43, v14));
    if (gCheckGLErrors) {
      uint64_t v44 = v43 < 1;
    }
    else {
      uint64_t v44 = 1;
    }
    if (!v44) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    goto LABEL_52;
  }

  do
    uint64_t v45 = __ldaxr(v14);
  while (__stlxr(v45 - 1, v14));
  [(id)DYGetGLGuestAppClient(v19) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, GPUTools::GL *, const float *))(*(void *)(v13 + 24) + 6456LL))( a1,  a2,  a3,  a4);
LABEL_52:
  if (v55[0]) {
    free(v55[0]);
  }
}

    uint64_t v29 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v24), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v29) {
      uint64_t v29 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v55, v30);
    }
    char v32 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v32) {
      uint64_t v29 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v55, v32, v31);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v55);
    }
    uint64_t v33 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v55);
    id v34 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v34 && gBreakOnError)
    {
      unsigned int v47 = 3LL;
      unsigned int v48 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v23 & 2) == 0) {
        goto LABEL_39;
      }
      unsigned int v47 = 2LL;
      unsigned int v48 = 902LL;
    }

    breakpoint_break((uint64_t)v55, (volatile int *)v48, v47, v34, v13);
LABEL_39:
    uint64_t v35 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v33) defaultFbufStream];
    uint64_t v36 = (unsigned int *)((char *)v35 + 56);
    do
      unint64_t v37 = __ldaxr(v36);
    while (__stlxr(1u, v36));
    if (v37 == 1)
    {
      do
      {
        while (*v36 == 1)
          ;
        do
          signed int v38 = __ldaxr(v36);
        while (__stlxr(1u, v36));
      }

      while (v38 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v35, (GPUTools::FB::Fbuf *)v55, *(unsigned int *)v55[0], 1);
    atomic_store(0, v36);
    do
    {
      id v39 = __ldaxr(v14);
      unsigned int v40 = v39 - 1;
    }

    while (__stlxr(v40, v14));
    if (gCheckGLErrors) {
      unsigned int v41 = v40 < 1;
    }
    else {
      unsigned int v41 = 1;
    }
    if (!v41) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    GPUTools::FB::FIFOArgumentProvider::~FIFOArgumentProvider((GPUTools::FB::FIFOArgumentProvider *)&v51);
    goto LABEL_53;
  }

  do
    uint64_t v42 = __ldaxr(v14);
  while (__stlxr(v42 - 1, v14));
  [(id)DYGetGLGuestAppClient(v18) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, volatile int *, uint64_t, uint64_t))(*(void *)(v13 + 24) + 6632LL))( a1,  a2,  a3,  a4);
LABEL_53:
  if (v55[0]) {
    free(v55[0]);
  }
}

    uint64_t v31 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v26), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v31) {
      uint64_t v31 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v57, v32);
    }
    id v34 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v15 + 3404);
    if ((_DWORD)v34) {
      uint64_t v31 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v57, v34, v33);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v31), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v15, (uint64_t)v57);
    }
    uint64_t v35 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v15 + 3480),  (GPUTools::FB::Fbuf *)(v15 + 3520),  (GPUTools::FB *)v57);
    uint64_t v36 = *(unsigned int *)(v15 + 3404);
    if ((_DWORD)v36 && gBreakOnError)
    {
      uint64_t v49 = 3LL;
      uint64_t v50 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v25 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v49 = 2LL;
      uint64_t v50 = 906LL;
    }

    breakpoint_break((uint64_t)v57, (volatile int *)v50, v49, v36, v15);
LABEL_39:
    unint64_t v37 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v35) defaultFbufStream];
    signed int v38 = (unsigned int *)((char *)v37 + 56);
    do
      id v39 = __ldaxr(v38);
    while (__stlxr(1u, v38));
    if (v39 == 1)
    {
      do
      {
        while (*v38 == 1)
          ;
        do
          unsigned int v40 = __ldaxr(v38);
        while (__stlxr(1u, v38));
      }

      while (v40 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v37, (GPUTools::FB::Fbuf *)v57, *(unsigned int *)v57[0], 1);
    atomic_store(0, v38);
    do
    {
      unsigned int v41 = __ldaxr(v16);
      uint64_t v42 = v41 - 1;
    }

    while (__stlxr(v42, v16));
    if (gCheckGLErrors) {
      uint64_t v43 = v42 < 1;
    }
    else {
      uint64_t v43 = 1;
    }
    if (!v43) {
      handle_opengl_thread_conflict((const void **)v15);
    }
    GPUTools::FB::FIFOArgumentProvider::~FIFOArgumentProvider((GPUTools::FB::FIFOArgumentProvider *)&v53);
    goto LABEL_53;
  }

  do
    uint64_t v44 = __ldaxr(v16);
  while (__stlxr(v44 - 1, v16));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, volatile int *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 + 24) + 6640LL))( a1,  a2,  a3,  a4,  a5);
LABEL_53:
  if (v57[0]) {
    free(v57[0]);
  }
}

    char v32 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v32) {
      char v32 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v59, v33);
    }
    uint64_t v35 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v16 + 3404);
    if ((_DWORD)v35) {
      char v32 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v59, v35, v34);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v16, (uint64_t)v59);
    }
    uint64_t v36 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v16 + 3480),  (GPUTools::FB::Fbuf *)(v16 + 3520),  (GPUTools::FB *)v59);
    unint64_t v37 = *(unsigned int *)(v16 + 3404);
    if ((_DWORD)v37 && gBreakOnError)
    {
      uint64_t v50 = 3LL;
      uint64_t v51 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v26 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v50 = 2LL;
      uint64_t v51 = 910LL;
    }

    breakpoint_break((uint64_t)v59, (volatile int *)v51, v50, v37, v16);
LABEL_39:
    signed int v38 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v36) defaultFbufStream];
    id v39 = (unsigned int *)((char *)v38 + 56);
    do
      unsigned int v40 = __ldaxr(v39);
    while (__stlxr(1u, v39));
    if (v40 == 1)
    {
      do
      {
        while (*v39 == 1)
          ;
        do
          unsigned int v41 = __ldaxr(v39);
        while (__stlxr(1u, v39));
      }

      while (v41 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v38, (GPUTools::FB::Fbuf *)v59, *(unsigned int *)v59[0], 1);
    atomic_store(0, v39);
    do
    {
      uint64_t v42 = __ldaxr(v17);
      uint64_t v43 = v42 - 1;
    }

    while (__stlxr(v43, v17));
    if (gCheckGLErrors) {
      uint64_t v44 = v43 < 1;
    }
    else {
      uint64_t v44 = 1;
    }
    if (!v44) {
      handle_opengl_thread_conflict((const void **)v16);
    }
    GPUTools::FB::FIFOArgumentProvider::~FIFOArgumentProvider((GPUTools::FB::FIFOArgumentProvider *)&v55);
    goto LABEL_53;
  }

  do
    uint64_t v45 = __ldaxr(v17);
  while (__stlxr(v45 - 1, v17));
  [(id)DYGetGLGuestAppClient(v21) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, volatile int *, uint64_t, uint64_t, uint64_t, void))(*(void *)(v16 + 24)
                                                                                               + 6648LL))( a1,  a2,  a3,  a4,  a5,  a6);
LABEL_53:
  if (v59[0]) {
    free(v59[0]);
  }
}

    uint64_t v33 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v33) {
      uint64_t v33 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v61, v34);
    }
    uint64_t v36 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v17 + 3404);
    if ((_DWORD)v36) {
      uint64_t v33 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v61, v36, v35);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v17, (uint64_t)v61);
    }
    unint64_t v37 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v17 + 3480),  (GPUTools::FB::Fbuf *)(v17 + 3520),  (GPUTools::FB *)v61);
    signed int v38 = *(unsigned int *)(v17 + 3404);
    if ((_DWORD)v38 && gBreakOnError)
    {
      uint64_t v51 = 3LL;
      uint64_t v52 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v27 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v51 = 2LL;
      uint64_t v52 = 914LL;
    }

    breakpoint_break((uint64_t)v61, (volatile int *)v52, v51, v38, v17);
LABEL_39:
    id v39 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v37) defaultFbufStream];
    unsigned int v40 = (unsigned int *)((char *)v39 + 56);
    do
      unsigned int v41 = __ldaxr(v40);
    while (__stlxr(1u, v40));
    if (v41 == 1)
    {
      do
      {
        while (*v40 == 1)
          ;
        do
          uint64_t v42 = __ldaxr(v40);
        while (__stlxr(1u, v40));
      }

      while (v42 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v39, (GPUTools::FB::Fbuf *)v61, *(unsigned int *)v61[0], 1);
    atomic_store(0, v40);
    do
    {
      uint64_t v43 = __ldaxr(v18);
      uint64_t v44 = v43 - 1;
    }

    while (__stlxr(v44, v18));
    if (gCheckGLErrors) {
      uint64_t v45 = v44 < 1;
    }
    else {
      uint64_t v45 = 1;
    }
    if (!v45) {
      handle_opengl_thread_conflict((const void **)v17);
    }
    GPUTools::FB::FIFOArgumentProvider::~FIFOArgumentProvider((GPUTools::FB::FIFOArgumentProvider *)&v57);
    goto LABEL_53;
  }

  do
    uint64_t v46 = __ldaxr(v18);
  while (__stlxr(v46 - 1, v18));
  [(id)DYGetGLGuestAppClient(v22) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, volatile int *, uint64_t, uint64_t, uint64_t, void, void))(*(void *)(v17 + 24) + 6656LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7);
LABEL_53:
  if (v61[0]) {
    free(v61[0]);
  }
}

    uint64_t v29 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v24), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v29) {
      uint64_t v29 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v55, v30);
    }
    char v32 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v32) {
      uint64_t v29 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v55, v32, v31);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v55);
    }
    uint64_t v33 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v55);
    id v34 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v34 && gBreakOnError)
    {
      unsigned int v47 = 3LL;
      unsigned int v48 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v23 & 2) == 0) {
        goto LABEL_39;
      }
      unsigned int v47 = 2LL;
      unsigned int v48 = 900LL;
    }

    breakpoint_break((uint64_t)v55, (volatile int *)v48, v47, v34, v13);
LABEL_39:
    uint64_t v35 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v33) defaultFbufStream];
    uint64_t v36 = (unsigned int *)((char *)v35 + 56);
    do
      unint64_t v37 = __ldaxr(v36);
    while (__stlxr(1u, v36));
    if (v37 == 1)
    {
      do
      {
        while (*v36 == 1)
          ;
        do
          signed int v38 = __ldaxr(v36);
        while (__stlxr(1u, v36));
      }

      while (v38 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v35, (GPUTools::FB::Fbuf *)v55, *(unsigned int *)v55[0], 1);
    atomic_store(0, v36);
    do
    {
      id v39 = __ldaxr(v14);
      unsigned int v40 = v39 - 1;
    }

    while (__stlxr(v40, v14));
    if (gCheckGLErrors) {
      unsigned int v41 = v40 < 1;
    }
    else {
      unsigned int v41 = 1;
    }
    if (!v41) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    GPUTools::FB::FIFOArgumentProvider::~FIFOArgumentProvider((GPUTools::FB::FIFOArgumentProvider *)&v51);
    goto LABEL_53;
  }

  do
    uint64_t v42 = __ldaxr(v14);
  while (__stlxr(v42 - 1, v14));
  [(id)DYGetGLGuestAppClient(v18) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, volatile int *, uint64_t, float))(*(void *)(v13 + 24) + 6664LL))( a1,  a2,  a3,  a4);
LABEL_53:
  if (v55[0]) {
    free(v55[0]);
  }
}

    uint64_t v31 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v26), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v31) {
      uint64_t v31 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v57, v32);
    }
    id v34 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v15 + 3404);
    if ((_DWORD)v34) {
      uint64_t v31 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v57, v34, v33);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v31), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v15, (uint64_t)v57);
    }
    uint64_t v35 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v15 + 3480),  (GPUTools::FB::Fbuf *)(v15 + 3520),  (GPUTools::FB *)v57);
    uint64_t v36 = *(unsigned int *)(v15 + 3404);
    if ((_DWORD)v36 && gBreakOnError)
    {
      uint64_t v49 = 3LL;
      uint64_t v50 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v25 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v49 = 2LL;
      uint64_t v50 = 904LL;
    }

    breakpoint_break((uint64_t)v57, (volatile int *)v50, v49, v36, v15);
LABEL_39:
    unint64_t v37 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v35) defaultFbufStream];
    signed int v38 = (unsigned int *)((char *)v37 + 56);
    do
      id v39 = __ldaxr(v38);
    while (__stlxr(1u, v38));
    if (v39 == 1)
    {
      do
      {
        while (*v38 == 1)
          ;
        do
          unsigned int v40 = __ldaxr(v38);
        while (__stlxr(1u, v38));
      }

      while (v40 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v37, (GPUTools::FB::Fbuf *)v57, *(unsigned int *)v57[0], 1);
    atomic_store(0, v38);
    do
    {
      unsigned int v41 = __ldaxr(v16);
      uint64_t v42 = v41 - 1;
    }

    while (__stlxr(v42, v16));
    if (gCheckGLErrors) {
      uint64_t v43 = v42 < 1;
    }
    else {
      uint64_t v43 = 1;
    }
    if (!v43) {
      handle_opengl_thread_conflict((const void **)v15);
    }
    GPUTools::FB::FIFOArgumentProvider::~FIFOArgumentProvider((GPUTools::FB::FIFOArgumentProvider *)&v53);
    goto LABEL_53;
  }

  do
    uint64_t v44 = __ldaxr(v16);
  while (__stlxr(v44 - 1, v16));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, volatile int *, uint64_t, float, float))(*(void *)(v15 + 24) + 6672LL))( a1,  a2,  a3,  a4,  a5);
LABEL_53:
  if (v57[0]) {
    free(v57[0]);
  }
}

    uint64_t v33 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v33) {
      uint64_t v33 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v59, v34);
    }
    uint64_t v36 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v17 + 3404);
    if ((_DWORD)v36) {
      uint64_t v33 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v59, v36, v35);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v17, (uint64_t)v59);
    }
    unint64_t v37 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v17 + 3480),  (GPUTools::FB::Fbuf *)(v17 + 3520),  (GPUTools::FB *)v59);
    signed int v38 = *(unsigned int *)(v17 + 3404);
    if ((_DWORD)v38 && gBreakOnError)
    {
      uint64_t v51 = 3LL;
      uint64_t v52 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v27 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v51 = 2LL;
      uint64_t v52 = 908LL;
    }

    breakpoint_break((uint64_t)v59, (volatile int *)v52, v51, v38, v17);
LABEL_39:
    id v39 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v37) defaultFbufStream];
    unsigned int v40 = (unsigned int *)((char *)v39 + 56);
    do
      unsigned int v41 = __ldaxr(v40);
    while (__stlxr(1u, v40));
    if (v41 == 1)
    {
      do
      {
        while (*v40 == 1)
          ;
        do
          uint64_t v42 = __ldaxr(v40);
        while (__stlxr(1u, v40));
      }

      while (v42 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v39, (GPUTools::FB::Fbuf *)v59, *(unsigned int *)v59[0], 1);
    atomic_store(0, v40);
    do
    {
      uint64_t v43 = __ldaxr(v18);
      uint64_t v44 = v43 - 1;
    }

    while (__stlxr(v44, v18));
    if (gCheckGLErrors) {
      uint64_t v45 = v44 < 1;
    }
    else {
      uint64_t v45 = 1;
    }
    if (!v45) {
      handle_opengl_thread_conflict((const void **)v17);
    }
    GPUTools::FB::FIFOArgumentProvider::~FIFOArgumentProvider((GPUTools::FB::FIFOArgumentProvider *)&v55);
    goto LABEL_53;
  }

  do
    uint64_t v46 = __ldaxr(v18);
  while (__stlxr(v46 - 1, v18));
  [(id)DYGetGLGuestAppClient(v22) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, volatile int *, uint64_t, float, float, float))(*(void *)(v17 + 24)
                                                                                          + 6680LL))( a1,  a2,  a3,  a4,  a5,  a6);
LABEL_53:
  if (v59[0]) {
    free(v59[0]);
  }
}

    uint64_t v35 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v30), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v35) {
      uint64_t v35 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v61, v36);
    }
    signed int v38 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v19 + 3404);
    if ((_DWORD)v38) {
      uint64_t v35 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v61, v38, v37);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v35), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v19, (uint64_t)v61);
    }
    id v39 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v19 + 3480),  (GPUTools::FB::Fbuf *)(v19 + 3520),  (GPUTools::FB *)v61);
    unsigned int v40 = *(unsigned int *)(v19 + 3404);
    if ((_DWORD)v40 && gBreakOnError)
    {
      uint64_t v53 = 3LL;
      unsigned int v54 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v29 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v53 = 2LL;
      unsigned int v54 = 912LL;
    }

    breakpoint_break((uint64_t)v61, (volatile int *)v54, v53, v40, v19);
LABEL_39:
    unsigned int v41 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v39) defaultFbufStream];
    uint64_t v42 = (unsigned int *)((char *)v41 + 56);
    do
      uint64_t v43 = __ldaxr(v42);
    while (__stlxr(1u, v42));
    if (v43 == 1)
    {
      do
      {
        while (*v42 == 1)
          ;
        do
          uint64_t v44 = __ldaxr(v42);
        while (__stlxr(1u, v42));
      }

      while (v44 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v41, (GPUTools::FB::Fbuf *)v61, *(unsigned int *)v61[0], 1);
    atomic_store(0, v42);
    do
    {
      uint64_t v45 = __ldaxr(v20);
      uint64_t v46 = v45 - 1;
    }

    while (__stlxr(v46, v20));
    if (gCheckGLErrors) {
      unsigned int v47 = v46 < 1;
    }
    else {
      unsigned int v47 = 1;
    }
    if (!v47) {
      handle_opengl_thread_conflict((const void **)v19);
    }
    GPUTools::FB::FIFOArgumentProvider::~FIFOArgumentProvider((GPUTools::FB::FIFOArgumentProvider *)&v57);
    goto LABEL_53;
  }

  do
    unsigned int v48 = __ldaxr(v20);
  while (__stlxr(v48 - 1, v20));
  [(id)DYGetGLGuestAppClient(v24) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, volatile int *, uint64_t, float, float, float, float))(*(void *)(v19 + 24)
                                                                                                 + 6688LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7);
LABEL_53:
  if (v61[0]) {
    free(v61[0]);
  }
}

    uint64_t v29 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v24), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v29) {
      uint64_t v29 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v55, v30);
    }
    char v32 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v32) {
      uint64_t v29 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v55, v32, v31);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v29), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v55);
    }
    uint64_t v33 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v55);
    id v34 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v34 && gBreakOnError)
    {
      unsigned int v47 = 3LL;
      unsigned int v48 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v23 & 2) == 0) {
        goto LABEL_39;
      }
      unsigned int v47 = 2LL;
      unsigned int v48 = 940LL;
    }

    breakpoint_break((uint64_t)v55, (volatile int *)v48, v47, v34, v13);
LABEL_39:
    uint64_t v35 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v33) defaultFbufStream];
    uint64_t v36 = (unsigned int *)((char *)v35 + 56);
    do
      unint64_t v37 = __ldaxr(v36);
    while (__stlxr(1u, v36));
    if (v37 == 1)
    {
      do
      {
        while (*v36 == 1)
          ;
        do
          signed int v38 = __ldaxr(v36);
        while (__stlxr(1u, v36));
      }

      while (v38 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v35, (GPUTools::FB::Fbuf *)v55, *(unsigned int *)v55[0], 1);
    atomic_store(0, v36);
    do
    {
      id v39 = __ldaxr(v14);
      unsigned int v40 = v39 - 1;
    }

    while (__stlxr(v40, v14));
    if (gCheckGLErrors) {
      unsigned int v41 = v40 < 1;
    }
    else {
      unsigned int v41 = 1;
    }
    if (!v41) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    GPUTools::FB::FIFOArgumentProvider::~FIFOArgumentProvider((GPUTools::FB::FIFOArgumentProvider *)&v51);
    goto LABEL_53;
  }

  do
    uint64_t v42 = __ldaxr(v14);
  while (__stlxr(v42 - 1, v14));
  [(id)DYGetGLGuestAppClient(v18) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, volatile int *, uint64_t, uint64_t))(*(void *)(v13 + 24) + 6784LL))( a1,  a2,  a3,  a4);
LABEL_53:
  if (v55[0]) {
    free(v55[0]);
  }
}

    uint64_t v31 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v26), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v31) {
      uint64_t v31 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v57, v32);
    }
    id v34 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v15 + 3404);
    if ((_DWORD)v34) {
      uint64_t v31 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v57, v34, v33);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v31), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v15, (uint64_t)v57);
    }
    uint64_t v35 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v15 + 3480),  (GPUTools::FB::Fbuf *)(v15 + 3520),  (GPUTools::FB *)v57);
    uint64_t v36 = *(unsigned int *)(v15 + 3404);
    if ((_DWORD)v36 && gBreakOnError)
    {
      uint64_t v49 = 3LL;
      uint64_t v50 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v25 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v49 = 2LL;
      uint64_t v50 = 944LL;
    }

    breakpoint_break((uint64_t)v57, (volatile int *)v50, v49, v36, v15);
LABEL_39:
    unint64_t v37 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v35) defaultFbufStream];
    signed int v38 = (unsigned int *)((char *)v37 + 56);
    do
      id v39 = __ldaxr(v38);
    while (__stlxr(1u, v38));
    if (v39 == 1)
    {
      do
      {
        while (*v38 == 1)
          ;
        do
          unsigned int v40 = __ldaxr(v38);
        while (__stlxr(1u, v38));
      }

      while (v40 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v37, (GPUTools::FB::Fbuf *)v57, *(unsigned int *)v57[0], 1);
    atomic_store(0, v38);
    do
    {
      unsigned int v41 = __ldaxr(v16);
      uint64_t v42 = v41 - 1;
    }

    while (__stlxr(v42, v16));
    if (gCheckGLErrors) {
      uint64_t v43 = v42 < 1;
    }
    else {
      uint64_t v43 = 1;
    }
    if (!v43) {
      handle_opengl_thread_conflict((const void **)v15);
    }
    GPUTools::FB::FIFOArgumentProvider::~FIFOArgumentProvider((GPUTools::FB::FIFOArgumentProvider *)&v53);
    goto LABEL_53;
  }

  do
    uint64_t v44 = __ldaxr(v16);
  while (__stlxr(v44 - 1, v16));
  [(id)DYGetGLGuestAppClient(v20) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, volatile int *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 + 24) + 6792LL))( a1,  a2,  a3,  a4,  a5);
LABEL_53:
  if (v57[0]) {
    free(v57[0]);
  }
}

    char v32 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v32) {
      char v32 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v59, v33);
    }
    uint64_t v35 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v16 + 3404);
    if ((_DWORD)v35) {
      char v32 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v59, v35, v34);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v16, (uint64_t)v59);
    }
    uint64_t v36 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v16 + 3480),  (GPUTools::FB::Fbuf *)(v16 + 3520),  (GPUTools::FB *)v59);
    unint64_t v37 = *(unsigned int *)(v16 + 3404);
    if ((_DWORD)v37 && gBreakOnError)
    {
      uint64_t v50 = 3LL;
      uint64_t v51 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v26 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v50 = 2LL;
      uint64_t v51 = 948LL;
    }

    breakpoint_break((uint64_t)v59, (volatile int *)v51, v50, v37, v16);
LABEL_39:
    signed int v38 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v36) defaultFbufStream];
    id v39 = (unsigned int *)((char *)v38 + 56);
    do
      unsigned int v40 = __ldaxr(v39);
    while (__stlxr(1u, v39));
    if (v40 == 1)
    {
      do
      {
        while (*v39 == 1)
          ;
        do
          unsigned int v41 = __ldaxr(v39);
        while (__stlxr(1u, v39));
      }

      while (v41 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v38, (GPUTools::FB::Fbuf *)v59, *(unsigned int *)v59[0], 1);
    atomic_store(0, v39);
    do
    {
      uint64_t v42 = __ldaxr(v17);
      uint64_t v43 = v42 - 1;
    }

    while (__stlxr(v43, v17));
    if (gCheckGLErrors) {
      uint64_t v44 = v43 < 1;
    }
    else {
      uint64_t v44 = 1;
    }
    if (!v44) {
      handle_opengl_thread_conflict((const void **)v16);
    }
    GPUTools::FB::FIFOArgumentProvider::~FIFOArgumentProvider((GPUTools::FB::FIFOArgumentProvider *)&v55);
    goto LABEL_53;
  }

  do
    uint64_t v45 = __ldaxr(v17);
  while (__stlxr(v45 - 1, v17));
  [(id)DYGetGLGuestAppClient(v21) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, volatile int *, uint64_t, uint64_t, uint64_t, void))(*(void *)(v16 + 24)
                                                                                               + 6800LL))( a1,  a2,  a3,  a4,  a5,  a6);
LABEL_53:
  if (v59[0]) {
    free(v59[0]);
  }
}

    uint64_t v33 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v28), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v33) {
      uint64_t v33 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v61, v34);
    }
    uint64_t v36 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v17 + 3404);
    if ((_DWORD)v36) {
      uint64_t v33 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v61, v36, v35);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v17, (uint64_t)v61);
    }
    unint64_t v37 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v17 + 3480),  (GPUTools::FB::Fbuf *)(v17 + 3520),  (GPUTools::FB *)v61);
    signed int v38 = *(unsigned int *)(v17 + 3404);
    if ((_DWORD)v38 && gBreakOnError)
    {
      uint64_t v51 = 3LL;
      uint64_t v52 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v27 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v51 = 2LL;
      uint64_t v52 = 952LL;
    }

    breakpoint_break((uint64_t)v61, (volatile int *)v52, v51, v38, v17);
LABEL_39:
    id v39 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v37) defaultFbufStream];
    unsigned int v40 = (unsigned int *)((char *)v39 + 56);
    do
      unsigned int v41 = __ldaxr(v40);
    while (__stlxr(1u, v40));
    if (v41 == 1)
    {
      do
      {
        while (*v40 == 1)
          ;
        do
          uint64_t v42 = __ldaxr(v40);
        while (__stlxr(1u, v40));
      }

      while (v42 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v39, (GPUTools::FB::Fbuf *)v61, *(unsigned int *)v61[0], 1);
    atomic_store(0, v40);
    do
    {
      uint64_t v43 = __ldaxr(v18);
      uint64_t v44 = v43 - 1;
    }

    while (__stlxr(v44, v18));
    if (gCheckGLErrors) {
      uint64_t v45 = v44 < 1;
    }
    else {
      uint64_t v45 = 1;
    }
    if (!v45) {
      handle_opengl_thread_conflict((const void **)v17);
    }
    GPUTools::FB::FIFOArgumentProvider::~FIFOArgumentProvider((GPUTools::FB::FIFOArgumentProvider *)&v57);
    goto LABEL_53;
  }

  do
    uint64_t v46 = __ldaxr(v18);
  while (__stlxr(v46 - 1, v18));
  [(id)DYGetGLGuestAppClient(v22) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, volatile int *, uint64_t, uint64_t, uint64_t, void, void))(*(void *)(v17 + 24) + 6808LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7);
LABEL_53:
  if (v61[0]) {
    free(v61[0]);
  }
}

    char v32 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v32) {
      char v32 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v55, v33);
    }
    uint64_t v35 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v35) {
      char v32 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v55, v35, v34);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v55);
    }
    uint64_t v36 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v55);
    unint64_t v37 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v37 && gBreakOnError)
    {
      uint64_t v50 = 3LL;
      uint64_t v51 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v26 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v50 = 2LL;
      uint64_t v51 = 815LL;
    }

    breakpoint_break((uint64_t)v55, (volatile int *)v51, v50, v37, v13);
LABEL_39:
    signed int v38 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v36) defaultFbufStream];
    id v39 = (unsigned int *)((char *)v38 + 56);
    do
      unsigned int v40 = __ldaxr(v39);
    while (__stlxr(1u, v39));
    if (v40 == 1)
    {
      do
      {
        while (*v39 == 1)
          ;
        do
          unsigned int v41 = __ldaxr(v39);
        while (__stlxr(1u, v39));
      }

      while (v41 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v38, (GPUTools::FB::Fbuf *)v55, *(unsigned int *)v55[0], 1);
    atomic_store(0, v39);
    do
    {
      uint64_t v42 = __ldaxr(v14);
      uint64_t v43 = v42 - 1;
    }

    while (__stlxr(v43, v14));
    if (gCheckGLErrors) {
      uint64_t v44 = v43 < 1;
    }
    else {
      uint64_t v44 = 1;
    }
    if (!v44) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    goto LABEL_52;
  }

  do
    uint64_t v45 = __ldaxr(v14);
  while (__stlxr(v45 - 1, v14));
  [(id)DYGetGLGuestAppClient(v19) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, GPUTools::GL *, const int *))(*(void *)(v13 + 24) + 8024LL))( a1,  a2,  a3,  a4);
LABEL_52:
  if (v55[0]) {
    free(v55[0]);
  }
}

    char v32 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v32) {
      char v32 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v55, v33);
    }
    uint64_t v35 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v35) {
      char v32 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v55, v35, v34);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v55);
    }
    uint64_t v36 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v55);
    unint64_t v37 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v37 && gBreakOnError)
    {
      uint64_t v50 = 3LL;
      uint64_t v51 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v26 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v50 = 2LL;
      uint64_t v51 = 816LL;
    }

    breakpoint_break((uint64_t)v55, (volatile int *)v51, v50, v37, v13);
LABEL_39:
    signed int v38 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v36) defaultFbufStream];
    id v39 = (unsigned int *)((char *)v38 + 56);
    do
      unsigned int v40 = __ldaxr(v39);
    while (__stlxr(1u, v39));
    if (v40 == 1)
    {
      do
      {
        while (*v39 == 1)
          ;
        do
          unsigned int v41 = __ldaxr(v39);
        while (__stlxr(1u, v39));
      }

      while (v41 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v38, (GPUTools::FB::Fbuf *)v55, *(unsigned int *)v55[0], 1);
    atomic_store(0, v39);
    do
    {
      uint64_t v42 = __ldaxr(v14);
      uint64_t v43 = v42 - 1;
    }

    while (__stlxr(v43, v14));
    if (gCheckGLErrors) {
      uint64_t v44 = v43 < 1;
    }
    else {
      uint64_t v44 = 1;
    }
    if (!v44) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    goto LABEL_52;
  }

  do
    uint64_t v45 = __ldaxr(v14);
  while (__stlxr(v45 - 1, v14));
  [(id)DYGetGLGuestAppClient(v19) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, GPUTools::GL *, uint64_t))(*(void *)(v13 + 24) + 8032LL))( a1,  a2,  a3,  a4);
LABEL_52:
  if (v55[0]) {
    free(v55[0]);
  }
}

    char v32 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v32) {
      char v32 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v55, v33);
    }
    uint64_t v35 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v35) {
      char v32 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v55, v35, v34);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v55);
    }
    uint64_t v36 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v55);
    unint64_t v37 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v37 && gBreakOnError)
    {
      uint64_t v50 = 3LL;
      uint64_t v51 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v26 & 2) == 0) {
        goto LABEL_39;
      }
      uint64_t v50 = 2LL;
      uint64_t v51 = 817LL;
    }

    breakpoint_break((uint64_t)v55, (volatile int *)v51, v50, v37, v13);
LABEL_39:
    signed int v38 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v36) defaultFbufStream];
    id v39 = (unsigned int *)((char *)v38 + 56);
    do
      unsigned int v40 = __ldaxr(v39);
    while (__stlxr(1u, v39));
    if (v40 == 1)
    {
      do
      {
        while (*v39 == 1)
          ;
        do
          unsigned int v41 = __ldaxr(v39);
        while (__stlxr(1u, v39));
      }

      while (v41 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v38, (GPUTools::FB::Fbuf *)v55, *(unsigned int *)v55[0], 1);
    atomic_store(0, v39);
    do
    {
      uint64_t v42 = __ldaxr(v14);
      uint64_t v43 = v42 - 1;
    }

    while (__stlxr(v43, v14));
    if (gCheckGLErrors) {
      uint64_t v44 = v43 < 1;
    }
    else {
      uint64_t v44 = 1;
    }
    if (!v44) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    goto LABEL_52;
  }

  do
    uint64_t v45 = __ldaxr(v14);
  while (__stlxr(v45 - 1, v14));
  [(id)DYGetGLGuestAppClient(v19) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, GPUTools::GL *, const int *))(*(void *)(v13 + 24) + 8040LL))( a1,  a2,  a3,  a4);
LABEL_52:
  if (v55[0]) {
    free(v55[0]);
  }
}

void sub_276A8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  if (a16) {
    free(a16);
  }
  _Unwind_Resume(exception_object);
}

void enable(__GLIContextRec *a1, uint64_t a2)
{
  unint64_t v4 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v4) {
    goto LABEL_12;
  }
  uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v6 = v4[4];
    BOOL v7 = v6 >= (unint64_t)a1;
    else {
      uint64_t v8 = v4 + 1;
    }
    if (v7) {
      uint64_t v5 = (uint64_t)v4;
    }
    unint64_t v4 = (void *)*v8;
  }

  while (*v8);
  if (v5 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v5 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v9 = *(void *)(v5 + 40);
  BOOL v10 = (unsigned int *)(v9 + 4640);
  do
  {
    unsigned int v11 = __ldaxr(v10);
    signed int v12 = v11 + 1;
  }

  while (__stlxr(v12, v10));
  if (gCheckGLErrors) {
    BOOL v13 = v12 <= 1;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13)
  {
    id v42 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v41 = handle_opengl_thread_conflict((const void **)v9);
    id v42 = [(id)DYGetGLGuestAppClient(v41) waitOnGraphicsSemaphoreAssertions];
    if ((int)v42 >= 1)
    {
      do
LABEL_57:
        unsigned int v43 = __ldaxr(v10);
      while (__stlxr(v43 - 1, v10));
      uint64_t v44 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v42) graphicsLockWaitQueue];
      dispatch_sync_f(v44, 0LL, (dispatch_function_t)do_nothing);
      (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 576LL))(a1, a2);
      return;
    }
  }

  *(_BYTE *)(v9 + 483_Block_object_dispose(va, 8) = 1;
  uint64_t v51 = 0LL;
  uint64_t v52 = 0LL;
  unsigned int v53 = 0;
  if ([(id)DYGetGLGuestAppClient(v42) state] != (char *)&dword_0 + 1
    || (id v14 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand], !(_DWORD)v14))
  {
    BOOL v16 = (char *)v51;
    signed int v15 = v52;
    int64_t v17 = v52 - (_BYTE *)v51;
    unsigned int v18 = v53;
    unint64_t v19 = v53 - (v52 - (_BYTE *)v51);
    if (v19 > 0x33) {
      goto LABEL_24;
    }
    int v45 = (307 - v19) & 0xFFFFFF00;
    v53 += v45;
    BOOL v16 = (char *)malloc(v45 + v18);
    uint64_t v51 = v16;
    if (v16)
    {
      if ((v16 & 3) == 0)
      {
        signed int v15 = &v16[v17];
LABEL_24:
        *((_DWORD *)v15 + 12) = 0;
        *((_OWORD *)v15 + 1) = 0u;
        *((_OWORD *)v15 + 2) = 0u;
        *(_OWORD *)signed int v15 = 0u;
        uint64_t v52 = v15 + 52;
        GPUTools::FB::Fbuf::align((char **)&v51);
        *((_DWORD *)v16 + 1) = 151;
        *((_DWORD *)v16 + _Block_object_dispose(va, 8) = 0;
        __uint64_t v50 = 0LL;
        uint64_t v20 = pthread_threadid_np(0LL, &v50);
        *((void *)v16 + 1) = v50;
        strcpy(v16 + 36, "Ce");
        *((void *)v16 + 5) = *(void *)v9;
        *((_DWORD *)v16 + 12) = a2;
        char v21 = byte_206EEF;
        if ((byte_206EEF & 1) != 0) {
          breakpoint_break( (uint64_t)&v51,  (volatile int *)((char *)&stru_68.size + 7),  1LL,  *(unsigned int *)(v9 + 3404),  v9);
        }
        uint64_t v22 = (uint64_t)[(id)DYGetGLGuestAppClient(v20) overrideFlags];
        if (!(v22 & 0x10 | v21 & 4))
        {
          uint64_t v23 = mach_absolute_time();
          (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 32) + 576LL))(a1, a2);
          uint64_t v22 = mach_absolute_time();
          uint64_t v24 = v22 - v23;
          unint64_t v25 = g_DYTimebaseInfo;
          if (g_DYTimebaseInfo == *((_DWORD *)&g_DYTimebaseInfo + 1))
          {
            uint64_t v26 = v51;
            *((void *)v51 + 2) = v23;
            v26[3] = v24;
            if (!gCheckGLErrors) {
              goto LABEL_29;
            }
          }

          else
          {
            uint64_t v48 = __udivti3(g_DYTimebaseInfo * v24, (g_DYTimebaseInfo * (unsigned __int128)v24) >> 64);
            uint64_t v49 = v51;
            *((void *)v51 + 3) = v48;
            uint64_t v22 = __udivti3(v25 * v23, (v25 * (unsigned __int128)v23) >> 64);
            v49[2] = v22;
            if (!gCheckGLErrors) {
              goto LABEL_29;
            }
          }

          uint64_t v22 = check_errors(v9);
        }

{
  void *v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  void *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  signed int v12;
  BOOL v13;
  id v14;
  char *v15;
  char *v16;
  int64_t v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  id v27;
  GPUTools::FB::Fbuf *v28;
  unsigned int v29;
  GPUTools::FB::Fbuf *v30;
  dispatch_queue_s *v31;
  uint64_t v32;
  GPUTools::FB::Stream *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  signed int v38;
  BOOL v39;
  unsigned int v40;
  uint64_t v41;
  id v42;
  unsigned int v43;
  dispatch_queue_s *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  __uint64_t v50;
  void *v51;
  char *v52;
  unsigned int v53;
  unint64_t v4 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v4) {
    goto LABEL_12;
  }
  uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v6 = v4[4];
    BOOL v7 = v6 >= (unint64_t)a1;
    else {
      uint64_t v8 = v4 + 1;
    }
    if (v7) {
      uint64_t v5 = (uint64_t)v4;
    }
    unint64_t v4 = (void *)*v8;
  }

  while (*v8);
  if (v5 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v5 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v9 = *(void *)(v5 + 40);
  BOOL v10 = (unsigned int *)(v9 + 4640);
  do
  {
    unsigned int v11 = __ldaxr(v10);
    signed int v12 = v11 + 1;
  }

  while (__stlxr(v12, v10));
  if (gCheckGLErrors) {
    BOOL v13 = v12 <= 1;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13)
  {
    id v42 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v41 = handle_opengl_thread_conflict((const void **)v9);
    id v42 = [(id)DYGetGLGuestAppClient(v41) waitOnGraphicsSemaphoreAssertions];
    if ((int)v42 >= 1)
    {
      do
LABEL_57:
        unsigned int v43 = __ldaxr(v10);
      while (__stlxr(v43 - 1, v10));
      uint64_t v44 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v42) graphicsLockWaitQueue];
      dispatch_sync_f(v44, 0LL, (dispatch_function_t)do_nothing);
      (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 576LL))(a1, a2);
      return;
    }
  }

  *(_BYTE *)(v9 + 483_Block_object_dispose(va, 8) = 1;
  uint64_t v51 = 0LL;
  uint64_t v52 = 0LL;
  unsigned int v53 = 0;
  if ([(id)DYGetGLGuestAppClient(v42) state] != (char *)&dword_0 + 1
    || (id v14 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand], !(_DWORD)v14))
  {
    BOOL v16 = (char *)v51;
    signed int v15 = v52;
    int64_t v17 = v52 - (_BYTE *)v51;
    unsigned int v18 = v53;
    unint64_t v19 = v53 - (v52 - (_BYTE *)v51);
    if (v19 > 0x33) {
      goto LABEL_24;
    }
    int v45 = (307 - v19) & 0xFFFFFF00;
    v53 += v45;
    BOOL v16 = (char *)malloc(v45 + v18);
    uint64_t v51 = v16;
    if (v16)
    {
      if ((v16 & 3) == 0)
      {
        signed int v15 = &v16[v17];
LABEL_24:
        *((_DWORD *)v15 + 12) = 0;
        *((_OWORD *)v15 + 1) = 0u;
        *((_OWORD *)v15 + 2) = 0u;
        *(_OWORD *)signed int v15 = 0u;
        uint64_t v52 = v15 + 52;
        GPUTools::FB::Fbuf::align((char **)&v51);
        *((_DWORD *)v16 + 1) = 151;
        *((_DWORD *)v16 + _Block_object_dispose(va, 8) = 0;
        __uint64_t v50 = 0LL;
        uint64_t v20 = pthread_threadid_np(0LL, &v50);
        *((void *)v16 + 1) = v50;
        strcpy(v16 + 36, "Ce");
        *((void *)v16 + 5) = *(void *)v9;
        *((_DWORD *)v16 + 12) = a2;
        char v21 = byte_206EEF;
        if ((byte_206EEF & 1) != 0) {
          breakpoint_break( (uint64_t)&v51,  (volatile int *)((char *)&stru_68.size + 7),  1LL,  *(unsigned int *)(v9 + 3404),  v9);
        }
        uint64_t v22 = (uint64_t)[(id)DYGetGLGuestAppClient(v20) overrideFlags];
        if (!(v22 & 0x10 | v21 & 4))
        {
          uint64_t v23 = mach_absolute_time();
          (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 32) + 576LL))(a1, a2);
          uint64_t v22 = mach_absolute_time();
          uint64_t v24 = v22 - v23;
          unint64_t v25 = g_DYTimebaseInfo;
          if (g_DYTimebaseInfo == *((_DWORD *)&g_DYTimebaseInfo + 1))
          {
            uint64_t v26 = v51;
            *((void *)v51 + 2) = v23;
            v26[3] = v24;
            if (!gCheckGLErrors) {
              goto LABEL_29;
            }
          }

          else
          {
            uint64_t v48 = __udivti3(g_DYTimebaseInfo * v24, (g_DYTimebaseInfo * (unsigned __int128)v24) >> 64);
            uint64_t v49 = v51;
            *((void *)v51 + 3) = v48;
            uint64_t v22 = __udivti3(v25 * v23, (v25 * (unsigned __int128)v23) >> 64);
            v49[2] = v22;
            if (!gCheckGLErrors) {
              goto LABEL_29;
            }
          }

          uint64_t v22 = check_errors(v9);
        }

{
  void *v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  void *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  signed int v12;
  BOOL v13;
  id v14;
  unsigned int v15;
  signed int v16;
  BOOL v17;
  unsigned int v18;
  uint64_t v19;
  id v20;
  unsigned int v21;
  dispatch_queue_s *v22;
  uint64_t v23;
  unint64_t v4 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v4) {
    goto LABEL_12;
  }
  uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v6 = v4[4];
    BOOL v7 = v6 >= (unint64_t)a1;
    else {
      uint64_t v8 = v4 + 1;
    }
    if (v7) {
      uint64_t v5 = (uint64_t)v4;
    }
    unint64_t v4 = (void *)*v8;
  }

  while (*v8);
  if (v5 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v5 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v9 = *(void *)(v5 + 40);
  BOOL v10 = (unsigned int *)(v9 + 4640);
  do
  {
    unsigned int v11 = __ldaxr(v10);
    signed int v12 = v11 + 1;
  }

  while (__stlxr(v12, v10));
  if (gCheckGLErrors) {
    BOOL v13 = v12 <= 1;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13)
  {
    uint64_t v20 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    unint64_t v19 = handle_opengl_thread_conflict((const void **)v9);
    uint64_t v20 = [(id)DYGetGLGuestAppClient(v19) waitOnGraphicsSemaphoreAssertions];
    if ((int)v20 >= 1)
    {
      do
LABEL_34:
        char v21 = __ldaxr(v10);
      while (__stlxr(v21 - 1, v10));
      uint64_t v22 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v20) graphicsLockWaitQueue];
      dispatch_sync_f(v22, 0LL, (dispatch_function_t)do_nothing);
LABEL_36:
      (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 576LL))(a1, a2);
      return;
    }
  }

  *(_BYTE *)(v9 + 483_Block_object_dispose(va, 8) = 1;
  if ([(id)DYGetGLGuestAppClient(v20) state] == (char *)&dword_0 + 1)
  {
    id v14 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand];
    if ((_DWORD)v14)
    {
      do
        unsigned int v18 = __ldaxr(v10);
      while (__stlxr(v18 - 1, v10));
      [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
      goto LABEL_36;
    }
  }

  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 32) + 576LL))(a1, a2);
  ++*(void *)(v9 + 3704);
  if (gCheckGLErrors)
  {
    check_errors(v9);
    if (gBreakOnError)
    {
      uint64_t v23 = *(unsigned int *)(v9 + 3404);
      if ((_DWORD)v23) {
        breakpoint_break(0LL, (volatile int *)0xFFFFFFFFLL, 3LL, v23, v9);
      }
    }
  }

  do
  {
    signed int v15 = __ldaxr(v10);
    BOOL v16 = v15 - 1;
  }

  while (__stlxr(v16, v10));
  if (gCheckGLErrors) {
    int64_t v17 = v16 < 1;
  }
  else {
    int64_t v17 = 1;
  }
  if (!v17) {
    handle_opengl_thread_conflict((const void **)v9);
  }
}

{
  void *v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  void *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  signed int v12;
  BOOL v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  int64x2_t v17;
  unsigned int v18;
  signed int v19;
  BOOL v20;
  unsigned int v21;
  uint64_t v22;
  id v23;
  unsigned int v24;
  dispatch_queue_s *v25;
  uint64_t v26;
  unint64_t v4 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v4) {
    goto LABEL_12;
  }
  uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v6 = v4[4];
    BOOL v7 = v6 >= (unint64_t)a1;
    else {
      uint64_t v8 = v4 + 1;
    }
    if (v7) {
      uint64_t v5 = (uint64_t)v4;
    }
    unint64_t v4 = (void *)*v8;
  }

  while (*v8);
  if (v5 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v5 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v9 = *(void *)(v5 + 40);
  BOOL v10 = (unsigned int *)(v9 + 4640);
  do
  {
    unsigned int v11 = __ldaxr(v10);
    signed int v12 = v11 + 1;
  }

  while (__stlxr(v12, v10));
  if (gCheckGLErrors) {
    BOOL v13 = v12 <= 1;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13)
  {
    uint64_t v23 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v22 = handle_opengl_thread_conflict((const void **)v9);
    uint64_t v23 = [(id)DYGetGLGuestAppClient(v22) waitOnGraphicsSemaphoreAssertions];
    if ((int)v23 >= 1)
    {
      do
LABEL_34:
        uint64_t v24 = __ldaxr(v10);
      while (__stlxr(v24 - 1, v10));
      unint64_t v25 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v23) graphicsLockWaitQueue];
      dispatch_sync_f(v25, 0LL, (dispatch_function_t)do_nothing);
LABEL_36:
      (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 576LL))(a1, a2);
      return;
    }
  }

  *(_BYTE *)(v9 + 483_Block_object_dispose(va, 8) = 1;
  if ([(id)DYGetGLGuestAppClient(v23) state] == (char *)&dword_0 + 1)
  {
    id v14 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand];
    if ((_DWORD)v14)
    {
      do
        char v21 = __ldaxr(v10);
      while (__stlxr(v21 - 1, v10));
      [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
      goto LABEL_36;
    }
  }

  signed int v15 = mach_absolute_time();
  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 32) + 576LL))(a1, a2);
  BOOL v16 = mach_absolute_time();
  int64_t v17 = vdupq_n_s64(1uLL);
  v17.i64[0] = v16 - v15;
  *(int64x2_t *)(v9 + 3696) = vaddq_s64(v17, *(int64x2_t *)(v9 + 3696));
  if (gCheckGLErrors)
  {
    check_errors(v9);
    if (gBreakOnError)
    {
      uint64_t v26 = *(unsigned int *)(v9 + 3404);
      if ((_DWORD)v26) {
        breakpoint_break(0LL, (volatile int *)0xFFFFFFFFLL, 3LL, v26, v9);
      }
    }
  }

  do
  {
    unsigned int v18 = __ldaxr(v10);
    unint64_t v19 = v18 - 1;
  }

  while (__stlxr(v19, v10));
  if (gCheckGLErrors) {
    uint64_t v20 = v19 < 1;
  }
  else {
    uint64_t v20 = 1;
  }
  if (!v20) {
    handle_opengl_thread_conflict((const void **)v9);
  }
}

void sub_27B90( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  if (a12) {
    free(a12);
  }
  _Unwind_Resume(exception_object);
}

void enable_client_state(__GLIContextRec *a1, uint64_t a2)
{
  unint64_t v4 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v4) {
    goto LABEL_12;
  }
  uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v6 = v4[4];
    BOOL v7 = v6 >= (unint64_t)a1;
    else {
      uint64_t v8 = v4 + 1;
    }
    if (v7) {
      uint64_t v5 = (uint64_t)v4;
    }
    unint64_t v4 = (void *)*v8;
  }

  while (*v8);
  if (v5 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v5 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v9 = *(void *)(v5 + 40);
  BOOL v10 = (unsigned int *)(v9 + 4640);
  do
  {
    unsigned int v11 = __ldaxr(v10);
    signed int v12 = v11 + 1;
  }

  while (__stlxr(v12, v10));
  if (gCheckGLErrors) {
    BOOL v13 = v12 <= 1;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13)
  {
    id v42 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v41 = handle_opengl_thread_conflict((const void **)v9);
    id v42 = [(id)DYGetGLGuestAppClient(v41) waitOnGraphicsSemaphoreAssertions];
    if ((int)v42 >= 1)
    {
      do
LABEL_57:
        unsigned int v43 = __ldaxr(v10);
      while (__stlxr(v43 - 1, v10));
      uint64_t v44 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v42) graphicsLockWaitQueue];
      dispatch_sync_f(v44, 0LL, (dispatch_function_t)do_nothing);
      (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 584LL))(a1, a2);
      return;
    }
  }

  *(_BYTE *)(v9 + 483_Block_object_dispose(va, 8) = 1;
  uint64_t v51 = 0LL;
  uint64_t v52 = 0LL;
  unsigned int v53 = 0;
  if ([(id)DYGetGLGuestAppClient(v42) state] != (char *)&dword_0 + 1
    || (id v14 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand], !(_DWORD)v14))
  {
    BOOL v16 = (char *)v51;
    signed int v15 = v52;
    int64_t v17 = v52 - (_BYTE *)v51;
    unsigned int v18 = v53;
    unint64_t v19 = v53 - (v52 - (_BYTE *)v51);
    if (v19 > 0x33) {
      goto LABEL_24;
    }
    int v45 = (307 - v19) & 0xFFFFFF00;
    v53 += v45;
    BOOL v16 = (char *)malloc(v45 + v18);
    uint64_t v51 = v16;
    if (v16)
    {
      if ((v16 & 3) == 0)
      {
        signed int v15 = &v16[v17];
LABEL_24:
        *((_DWORD *)v15 + 12) = 0;
        *((_OWORD *)v15 + 1) = 0u;
        *((_OWORD *)v15 + 2) = 0u;
        *(_OWORD *)signed int v15 = 0u;
        uint64_t v52 = v15 + 52;
        GPUTools::FB::Fbuf::align((char **)&v51);
        *((_DWORD *)v16 + 1) = 152;
        *((_DWORD *)v16 + _Block_object_dispose(va, 8) = 0;
        __uint64_t v50 = 0LL;
        uint64_t v20 = pthread_threadid_np(0LL, &v50);
        *((void *)v16 + 1) = v50;
        strcpy(v16 + 36, "Ce");
        *((void *)v16 + 5) = *(void *)v9;
        *((_DWORD *)v16 + 12) = a2;
        char v21 = byte_206EF0;
        if ((byte_206EF0 & 1) != 0) {
          breakpoint_break((uint64_t)&v51, (volatile int *)&stru_68.offset, 1LL, *(unsigned int *)(v9 + 3404), v9);
        }
        uint64_t v22 = (uint64_t)[(id)DYGetGLGuestAppClient(v20) overrideFlags];
        if (!(v22 & 0x10 | v21 & 4))
        {
          uint64_t v23 = mach_absolute_time();
          (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 32) + 584LL))(a1, a2);
          uint64_t v22 = mach_absolute_time();
          uint64_t v24 = v22 - v23;
          unint64_t v25 = g_DYTimebaseInfo;
          if (g_DYTimebaseInfo == *((_DWORD *)&g_DYTimebaseInfo + 1))
          {
            uint64_t v26 = v51;
            *((void *)v51 + 2) = v23;
            v26[3] = v24;
            if (!gCheckGLErrors) {
              goto LABEL_29;
            }
          }

          else
          {
            uint64_t v48 = __udivti3(g_DYTimebaseInfo * v24, (g_DYTimebaseInfo * (unsigned __int128)v24) >> 64);
            uint64_t v49 = v51;
            *((void *)v51 + 3) = v48;
            uint64_t v22 = __udivti3(v25 * v23, (v25 * (unsigned __int128)v23) >> 64);
            v49[2] = v22;
            if (!gCheckGLErrors) {
              goto LABEL_29;
            }
          }

          uint64_t v22 = check_errors(v9);
        }

{
  void *v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  void *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  signed int v12;
  BOOL v13;
  id v14;
  char *v15;
  char *v16;
  int64_t v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  id v27;
  GPUTools::FB::Fbuf *v28;
  unsigned int v29;
  GPUTools::FB::Fbuf *v30;
  dispatch_queue_s *v31;
  uint64_t v32;
  GPUTools::FB::Stream *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  signed int v38;
  BOOL v39;
  unsigned int v40;
  uint64_t v41;
  id v42;
  unsigned int v43;
  dispatch_queue_s *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  __uint64_t v50;
  void *v51;
  char *v52;
  unsigned int v53;
  unint64_t v4 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v4) {
    goto LABEL_12;
  }
  uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v6 = v4[4];
    BOOL v7 = v6 >= (unint64_t)a1;
    else {
      uint64_t v8 = v4 + 1;
    }
    if (v7) {
      uint64_t v5 = (uint64_t)v4;
    }
    unint64_t v4 = (void *)*v8;
  }

  while (*v8);
  if (v5 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v5 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v9 = *(void *)(v5 + 40);
  BOOL v10 = (unsigned int *)(v9 + 4640);
  do
  {
    unsigned int v11 = __ldaxr(v10);
    signed int v12 = v11 + 1;
  }

  while (__stlxr(v12, v10));
  if (gCheckGLErrors) {
    BOOL v13 = v12 <= 1;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13)
  {
    id v42 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v41 = handle_opengl_thread_conflict((const void **)v9);
    id v42 = [(id)DYGetGLGuestAppClient(v41) waitOnGraphicsSemaphoreAssertions];
    if ((int)v42 >= 1)
    {
      do
LABEL_57:
        unsigned int v43 = __ldaxr(v10);
      while (__stlxr(v43 - 1, v10));
      uint64_t v44 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v42) graphicsLockWaitQueue];
      dispatch_sync_f(v44, 0LL, (dispatch_function_t)do_nothing);
      (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 584LL))(a1, a2);
      return;
    }
  }

  *(_BYTE *)(v9 + 483_Block_object_dispose(va, 8) = 1;
  uint64_t v51 = 0LL;
  uint64_t v52 = 0LL;
  unsigned int v53 = 0;
  if ([(id)DYGetGLGuestAppClient(v42) state] != (char *)&dword_0 + 1
    || (id v14 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand], !(_DWORD)v14))
  {
    BOOL v16 = (char *)v51;
    signed int v15 = v52;
    int64_t v17 = v52 - (_BYTE *)v51;
    unsigned int v18 = v53;
    unint64_t v19 = v53 - (v52 - (_BYTE *)v51);
    if (v19 > 0x33) {
      goto LABEL_24;
    }
    int v45 = (307 - v19) & 0xFFFFFF00;
    v53 += v45;
    BOOL v16 = (char *)malloc(v45 + v18);
    uint64_t v51 = v16;
    if (v16)
    {
      if ((v16 & 3) == 0)
      {
        signed int v15 = &v16[v17];
LABEL_24:
        *((_DWORD *)v15 + 12) = 0;
        *((_OWORD *)v15 + 1) = 0u;
        *((_OWORD *)v15 + 2) = 0u;
        *(_OWORD *)signed int v15 = 0u;
        uint64_t v52 = v15 + 52;
        GPUTools::FB::Fbuf::align((char **)&v51);
        *((_DWORD *)v16 + 1) = 152;
        *((_DWORD *)v16 + _Block_object_dispose(va, 8) = 0;
        __uint64_t v50 = 0LL;
        uint64_t v20 = pthread_threadid_np(0LL, &v50);
        *((void *)v16 + 1) = v50;
        strcpy(v16 + 36, "Ce");
        *((void *)v16 + 5) = *(void *)v9;
        *((_DWORD *)v16 + 12) = a2;
        char v21 = byte_206EF0;
        if ((byte_206EF0 & 1) != 0) {
          breakpoint_break((uint64_t)&v51, (volatile int *)&stru_68.offset, 1LL, *(unsigned int *)(v9 + 3404), v9);
        }
        uint64_t v22 = (uint64_t)[(id)DYGetGLGuestAppClient(v20) overrideFlags];
        if (!(v22 & 0x10 | v21 & 4))
        {
          uint64_t v23 = mach_absolute_time();
          (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 32) + 584LL))(a1, a2);
          uint64_t v22 = mach_absolute_time();
          uint64_t v24 = v22 - v23;
          unint64_t v25 = g_DYTimebaseInfo;
          if (g_DYTimebaseInfo == *((_DWORD *)&g_DYTimebaseInfo + 1))
          {
            uint64_t v26 = v51;
            *((void *)v51 + 2) = v23;
            v26[3] = v24;
            if (!gCheckGLErrors) {
              goto LABEL_29;
            }
          }

          else
          {
            uint64_t v48 = __udivti3(g_DYTimebaseInfo * v24, (g_DYTimebaseInfo * (unsigned __int128)v24) >> 64);
            uint64_t v49 = v51;
            *((void *)v51 + 3) = v48;
            uint64_t v22 = __udivti3(v25 * v23, (v25 * (unsigned __int128)v23) >> 64);
            v49[2] = v22;
            if (!gCheckGLErrors) {
              goto LABEL_29;
            }
          }

          uint64_t v22 = check_errors(v9);
        }

{
  void *v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  void *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  signed int v12;
  BOOL v13;
  id v14;
  unsigned int v15;
  signed int v16;
  BOOL v17;
  unsigned int v18;
  uint64_t v19;
  id v20;
  unsigned int v21;
  dispatch_queue_s *v22;
  uint64_t v23;
  unint64_t v4 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v4) {
    goto LABEL_12;
  }
  uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v6 = v4[4];
    BOOL v7 = v6 >= (unint64_t)a1;
    else {
      uint64_t v8 = v4 + 1;
    }
    if (v7) {
      uint64_t v5 = (uint64_t)v4;
    }
    unint64_t v4 = (void *)*v8;
  }

  while (*v8);
  if (v5 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v5 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v9 = *(void *)(v5 + 40);
  BOOL v10 = (unsigned int *)(v9 + 4640);
  do
  {
    unsigned int v11 = __ldaxr(v10);
    signed int v12 = v11 + 1;
  }

  while (__stlxr(v12, v10));
  if (gCheckGLErrors) {
    BOOL v13 = v12 <= 1;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13)
  {
    uint64_t v20 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    unint64_t v19 = handle_opengl_thread_conflict((const void **)v9);
    uint64_t v20 = [(id)DYGetGLGuestAppClient(v19) waitOnGraphicsSemaphoreAssertions];
    if ((int)v20 >= 1)
    {
      do
LABEL_34:
        char v21 = __ldaxr(v10);
      while (__stlxr(v21 - 1, v10));
      uint64_t v22 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v20) graphicsLockWaitQueue];
      dispatch_sync_f(v22, 0LL, (dispatch_function_t)do_nothing);
LABEL_36:
      (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 584LL))(a1, a2);
      return;
    }
  }

  *(_BYTE *)(v9 + 483_Block_object_dispose(va, 8) = 1;
  if ([(id)DYGetGLGuestAppClient(v20) state] == (char *)&dword_0 + 1)
  {
    id v14 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand];
    if ((_DWORD)v14)
    {
      do
        unsigned int v18 = __ldaxr(v10);
      while (__stlxr(v18 - 1, v10));
      [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
      goto LABEL_36;
    }
  }

  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 32) + 584LL))(a1, a2);
  ++*(void *)(v9 + 3704);
  if (gCheckGLErrors)
  {
    check_errors(v9);
    if (gBreakOnError)
    {
      uint64_t v23 = *(unsigned int *)(v9 + 3404);
      if ((_DWORD)v23) {
        breakpoint_break(0LL, (volatile int *)0xFFFFFFFFLL, 3LL, v23, v9);
      }
    }
  }

  do
  {
    signed int v15 = __ldaxr(v10);
    BOOL v16 = v15 - 1;
  }

  while (__stlxr(v16, v10));
  if (gCheckGLErrors) {
    int64_t v17 = v16 < 1;
  }
  else {
    int64_t v17 = 1;
  }
  if (!v17) {
    handle_opengl_thread_conflict((const void **)v9);
  }
}

{
  void *v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  void *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  signed int v12;
  BOOL v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  int64x2_t v17;
  unsigned int v18;
  signed int v19;
  BOOL v20;
  unsigned int v21;
  uint64_t v22;
  id v23;
  unsigned int v24;
  dispatch_queue_s *v25;
  uint64_t v26;
  unint64_t v4 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v4) {
    goto LABEL_12;
  }
  uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v6 = v4[4];
    BOOL v7 = v6 >= (unint64_t)a1;
    else {
      uint64_t v8 = v4 + 1;
    }
    if (v7) {
      uint64_t v5 = (uint64_t)v4;
    }
    unint64_t v4 = (void *)*v8;
  }

  while (*v8);
  if (v5 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v5 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v9 = *(void *)(v5 + 40);
  BOOL v10 = (unsigned int *)(v9 + 4640);
  do
  {
    unsigned int v11 = __ldaxr(v10);
    signed int v12 = v11 + 1;
  }

  while (__stlxr(v12, v10));
  if (gCheckGLErrors) {
    BOOL v13 = v12 <= 1;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13)
  {
    uint64_t v23 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v22 = handle_opengl_thread_conflict((const void **)v9);
    uint64_t v23 = [(id)DYGetGLGuestAppClient(v22) waitOnGraphicsSemaphoreAssertions];
    if ((int)v23 >= 1)
    {
      do
LABEL_34:
        uint64_t v24 = __ldaxr(v10);
      while (__stlxr(v24 - 1, v10));
      unint64_t v25 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v23) graphicsLockWaitQueue];
      dispatch_sync_f(v25, 0LL, (dispatch_function_t)do_nothing);
LABEL_36:
      (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 584LL))(a1, a2);
      return;
    }
  }

  *(_BYTE *)(v9 + 483_Block_object_dispose(va, 8) = 1;
  if ([(id)DYGetGLGuestAppClient(v23) state] == (char *)&dword_0 + 1)
  {
    id v14 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand];
    if ((_DWORD)v14)
    {
      do
        char v21 = __ldaxr(v10);
      while (__stlxr(v21 - 1, v10));
      [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
      goto LABEL_36;
    }
  }

  signed int v15 = mach_absolute_time();
  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 32) + 584LL))(a1, a2);
  BOOL v16 = mach_absolute_time();
  int64_t v17 = vdupq_n_s64(1uLL);
  v17.i64[0] = v16 - v15;
  *(int64x2_t *)(v9 + 3696) = vaddq_s64(v17, *(int64x2_t *)(v9 + 3696));
  if (gCheckGLErrors)
  {
    check_errors(v9);
    if (gBreakOnError)
    {
      uint64_t v26 = *(unsigned int *)(v9 + 3404);
      if ((_DWORD)v26) {
        breakpoint_break(0LL, (volatile int *)0xFFFFFFFFLL, 3LL, v26, v9);
      }
    }
  }

  do
  {
    unsigned int v18 = __ldaxr(v10);
    unint64_t v19 = v18 - 1;
  }

  while (__stlxr(v19, v10));
  if (gCheckGLErrors) {
    uint64_t v20 = v19 < 1;
  }
  else {
    uint64_t v20 = 1;
  }
  if (!v20) {
    handle_opengl_thread_conflict((const void **)v9);
  }
}

void sub_2805C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  if (a12) {
    free(a12);
  }
  _Unwind_Resume(exception_object);
}

void finish(__GLIContextRec *a1)
{
  uint64_t v2 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v2) {
    goto LABEL_12;
  }
  uint64_t v3 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v4 = v2[4];
    BOOL v5 = v4 >= (unint64_t)a1;
    else {
      unint64_t v6 = v2 + 1;
    }
    if (v5) {
      uint64_t v3 = (uint64_t)v2;
    }
    uint64_t v2 = (void *)*v6;
  }

  while (*v6);
  if (v3 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v3 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v3 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v7 = *(void *)(v3 + 40);
  uint64_t v8 = (unsigned int *)(v7 + 4640);
  do
  {
    unsigned int v9 = __ldaxr(v8);
    signed int v10 = v9 + 1;
  }

  while (__stlxr(v10, v8));
  if (gCheckGLErrors) {
    BOOL v11 = v10 <= 1;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11)
  {
    id v40 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v39 = handle_opengl_thread_conflict((const void **)v7);
    id v40 = [(id)DYGetGLGuestAppClient(v39) waitOnGraphicsSemaphoreAssertions];
    if ((int)v40 >= 1)
    {
      do
LABEL_57:
        unsigned int v41 = __ldaxr(v8);
      while (__stlxr(v41 - 1, v8));
      id v42 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v40) graphicsLockWaitQueue];
      dispatch_sync_f(v42, 0LL, (dispatch_function_t)do_nothing);
      (*(void (**)(__GLIContextRec *))(*(void *)(v7 + 24) + 712LL))(a1);
      return;
    }
  }

  *(_BYTE *)(v7 + 483_Block_object_dispose(va, 8) = 1;
  uint64_t v49 = 0LL;
  __uint64_t v50 = 0LL;
  unsigned int v51 = 0;
  if ([(id)DYGetGLGuestAppClient(v40) state] != (char *)&dword_0 + 1
    || (id v12 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand], !(_DWORD)v12))
  {
    id v14 = (char *)v49;
    BOOL v13 = v50;
    int64_t v15 = v50 - (_BYTE *)v49;
    unsigned int v16 = v51;
    unint64_t v17 = v51 - (v50 - (_BYTE *)v49);
    if (v17 > 0x2F) {
      goto LABEL_24;
    }
    int v43 = (303 - v17) & 0xFFFFFF00;
    v51 += v43;
    id v14 = (char *)malloc(v43 + v16);
    uint64_t v49 = v14;
    if (v14)
    {
      if ((v14 & 3) == 0)
      {
        BOOL v13 = &v14[v15];
LABEL_24:
        *((_OWORD *)v13 + 1) = 0u;
        *((_OWORD *)v13 + 2) = 0u;
        *(_OWORD *)BOOL v13 = 0u;
        __uint64_t v50 = v13 + 48;
        GPUTools::FB::Fbuf::align((char **)&v49);
        *((_DWORD *)v14 + 1) = 175;
        *((_DWORD *)v14 + _Block_object_dispose(va, 8) = 0;
        __uint64_t v48 = 0LL;
        uint64_t v18 = pthread_threadid_np(0LL, &v48);
        *((void *)v14 + 1) = v48;
        *((_WORD *)v14 + 1_Block_object_dispose(va, 8) = 67;
        *((void *)v14 + 5) = *(void *)v7;
        char v19 = byte_206F07;
        if ((byte_206F07 & 1) != 0) {
          breakpoint_break( (uint64_t)&v49,  (volatile int *)((char *)&stru_68.reserved1 + 3),  1LL,  *(unsigned int *)(v7 + 3404),  v7);
        }
        uint64_t v20 = (uint64_t)[(id)DYGetGLGuestAppClient(v18) overrideFlags];
        if (!(v20 & 0x10 | v19 & 4))
        {
          uint64_t v21 = mach_absolute_time();
          (*(void (**)(__GLIContextRec *))(*(void *)(v7 + 32) + 712LL))(a1);
          uint64_t v20 = mach_absolute_time();
          uint64_t v22 = v20 - v21;
          unint64_t v23 = g_DYTimebaseInfo;
          if (g_DYTimebaseInfo == *((_DWORD *)&g_DYTimebaseInfo + 1))
          {
            uint64_t v24 = v49;
            *((void *)v49 + 2) = v21;
            v24[3] = v22;
            if (!gCheckGLErrors) {
              goto LABEL_29;
            }
          }

          else
          {
            uint64_t v46 = __udivti3(g_DYTimebaseInfo * v22, (g_DYTimebaseInfo * (unsigned __int128)v22) >> 64);
            uint64_t v47 = v49;
            *((void *)v49 + 3) = v46;
            uint64_t v20 = __udivti3(v23 * v21, (v23 * (unsigned __int128)v21) >> 64);
            v47[2] = v20;
            if (!gCheckGLErrors) {
              goto LABEL_29;
            }
          }

          uint64_t v20 = check_errors(v7);
        }

{
  void *v2;
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  void *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  signed int v10;
  BOOL v11;
  id v12;
  char *v13;
  char *v14;
  int64_t v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void *v24;
  id v25;
  GPUTools::FB::Fbuf *v26;
  unsigned int v27;
  GPUTools::FB::Fbuf *v28;
  dispatch_queue_s *v29;
  uint64_t v30;
  GPUTools::FB::Stream *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  signed int v36;
  BOOL v37;
  unsigned int v38;
  uint64_t v39;
  id v40;
  unsigned int v41;
  dispatch_queue_s *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  __uint64_t v48;
  void *v49;
  char *v50;
  unsigned int v51;
  uint64_t v2 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v2) {
    goto LABEL_12;
  }
  uint64_t v3 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v4 = v2[4];
    BOOL v5 = v4 >= (unint64_t)a1;
    else {
      unint64_t v6 = v2 + 1;
    }
    if (v5) {
      uint64_t v3 = (uint64_t)v2;
    }
    uint64_t v2 = (void *)*v6;
  }

  while (*v6);
  if (v3 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v3 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v3 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v7 = *(void *)(v3 + 40);
  uint64_t v8 = (unsigned int *)(v7 + 4640);
  do
  {
    unsigned int v9 = __ldaxr(v8);
    signed int v10 = v9 + 1;
  }

  while (__stlxr(v10, v8));
  if (gCheckGLErrors) {
    BOOL v11 = v10 <= 1;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11)
  {
    id v40 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v39 = handle_opengl_thread_conflict((const void **)v7);
    id v40 = [(id)DYGetGLGuestAppClient(v39) waitOnGraphicsSemaphoreAssertions];
    if ((int)v40 >= 1)
    {
      do
LABEL_57:
        unsigned int v41 = __ldaxr(v8);
      while (__stlxr(v41 - 1, v8));
      id v42 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v40) graphicsLockWaitQueue];
      dispatch_sync_f(v42, 0LL, (dispatch_function_t)do_nothing);
      (*(void (**)(__GLIContextRec *))(*(void *)(v7 + 24) + 712LL))(a1);
      return;
    }
  }

  *(_BYTE *)(v7 + 483_Block_object_dispose(va, 8) = 1;
  uint64_t v49 = 0LL;
  __uint64_t v50 = 0LL;
  unsigned int v51 = 0;
  if ([(id)DYGetGLGuestAppClient(v40) state] != (char *)&dword_0 + 1
    || (id v12 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand], !(_DWORD)v12))
  {
    id v14 = (char *)v49;
    BOOL v13 = v50;
    int64_t v15 = v50 - (_BYTE *)v49;
    unsigned int v16 = v51;
    unint64_t v17 = v51 - (v50 - (_BYTE *)v49);
    if (v17 > 0x2F) {
      goto LABEL_24;
    }
    int v43 = (303 - v17) & 0xFFFFFF00;
    v51 += v43;
    id v14 = (char *)malloc(v43 + v16);
    uint64_t v49 = v14;
    if (v14)
    {
      if ((v14 & 3) == 0)
      {
        BOOL v13 = &v14[v15];
LABEL_24:
        *((_OWORD *)v13 + 1) = 0u;
        *((_OWORD *)v13 + 2) = 0u;
        *(_OWORD *)BOOL v13 = 0u;
        __uint64_t v50 = v13 + 48;
        GPUTools::FB::Fbuf::align((char **)&v49);
        *((_DWORD *)v14 + 1) = 175;
        *((_DWORD *)v14 + _Block_object_dispose(va, 8) = 0;
        __uint64_t v48 = 0LL;
        uint64_t v18 = pthread_threadid_np(0LL, &v48);
        *((void *)v14 + 1) = v48;
        *((_WORD *)v14 + 1_Block_object_dispose(va, 8) = 67;
        *((void *)v14 + 5) = *(void *)v7;
        char v19 = byte_206F07;
        if ((byte_206F07 & 1) != 0) {
          breakpoint_break( (uint64_t)&v49,  (volatile int *)((char *)&stru_68.reserved1 + 3),  1LL,  *(unsigned int *)(v7 + 3404),  v7);
        }
        uint64_t v20 = (uint64_t)[(id)DYGetGLGuestAppClient(v18) overrideFlags];
        if (!(v20 & 0x10 | v19 & 4))
        {
          uint64_t v21 = mach_absolute_time();
          (*(void (**)(__GLIContextRec *))(*(void *)(v7 + 32) + 712LL))(a1);
          uint64_t v20 = mach_absolute_time();
          uint64_t v22 = v20 - v21;
          unint64_t v23 = g_DYTimebaseInfo;
          if (g_DYTimebaseInfo == *((_DWORD *)&g_DYTimebaseInfo + 1))
          {
            uint64_t v24 = v49;
            *((void *)v49 + 2) = v21;
            v24[3] = v22;
            if (!gCheckGLErrors) {
              goto LABEL_29;
            }
          }

          else
          {
            uint64_t v46 = __udivti3(g_DYTimebaseInfo * v22, (g_DYTimebaseInfo * (unsigned __int128)v22) >> 64);
            uint64_t v47 = v49;
            *((void *)v49 + 3) = v46;
            uint64_t v20 = __udivti3(v23 * v21, (v23 * (unsigned __int128)v21) >> 64);
            v47[2] = v20;
            if (!gCheckGLErrors) {
              goto LABEL_29;
            }
          }

          uint64_t v20 = check_errors(v7);
        }

{
  void *v2;
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  void *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  signed int v10;
  BOOL v11;
  id v12;
  unsigned int v13;
  signed int v14;
  BOOL v15;
  unsigned int v16;
  uint64_t v17;
  id v18;
  unsigned int v19;
  dispatch_queue_s *v20;
  uint64_t v21;
  uint64_t v2 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v2) {
    goto LABEL_12;
  }
  uint64_t v3 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v4 = v2[4];
    BOOL v5 = v4 >= (unint64_t)a1;
    else {
      unint64_t v6 = v2 + 1;
    }
    if (v5) {
      uint64_t v3 = (uint64_t)v2;
    }
    uint64_t v2 = (void *)*v6;
  }

  while (*v6);
  if (v3 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v3 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v3 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v7 = *(void *)(v3 + 40);
  uint64_t v8 = (unsigned int *)(v7 + 4640);
  do
  {
    unsigned int v9 = __ldaxr(v8);
    signed int v10 = v9 + 1;
  }

  while (__stlxr(v10, v8));
  if (gCheckGLErrors) {
    BOOL v11 = v10 <= 1;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11)
  {
    uint64_t v18 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    unint64_t v17 = handle_opengl_thread_conflict((const void **)v7);
    uint64_t v18 = [(id)DYGetGLGuestAppClient(v17) waitOnGraphicsSemaphoreAssertions];
    if ((int)v18 >= 1)
    {
      do
LABEL_34:
        char v19 = __ldaxr(v8);
      while (__stlxr(v19 - 1, v8));
      uint64_t v20 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v18) graphicsLockWaitQueue];
      dispatch_sync_f(v20, 0LL, (dispatch_function_t)do_nothing);
LABEL_36:
      (*(void (**)(__GLIContextRec *))(*(void *)(v7 + 24) + 712LL))(a1);
      return;
    }
  }

  *(_BYTE *)(v7 + 483_Block_object_dispose(va, 8) = 1;
  if ([(id)DYGetGLGuestAppClient(v18) state] == (char *)&dword_0 + 1)
  {
    id v12 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand];
    if ((_DWORD)v12)
    {
      do
        unsigned int v16 = __ldaxr(v8);
      while (__stlxr(v16 - 1, v8));
      [(id)DYGetGLGuestAppClient(v12) triggerArmedCapture];
      goto LABEL_36;
    }
  }

  (*(void (**)(__GLIContextRec *))(*(void *)(v7 + 32) + 712LL))(a1);
  ++*(void *)(v7 + 3704);
  if (gCheckGLErrors)
  {
    check_errors(v7);
    if (gBreakOnError)
    {
      uint64_t v21 = *(unsigned int *)(v7 + 3404);
      if ((_DWORD)v21) {
        breakpoint_break(0LL, (volatile int *)0xFFFFFFFFLL, 3LL, v21, v7);
      }
    }
  }

  do
  {
    BOOL v13 = __ldaxr(v8);
    id v14 = v13 - 1;
  }

  while (__stlxr(v14, v8));
  if (gCheckGLErrors) {
    int64_t v15 = v14 < 1;
  }
  else {
    int64_t v15 = 1;
  }
  if (!v15) {
    handle_opengl_thread_conflict((const void **)v7);
  }
}

{
  void *v2;
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  void *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  signed int v10;
  BOOL v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  int64x2_t v15;
  unsigned int v16;
  signed int v17;
  BOOL v18;
  unsigned int v19;
  uint64_t v20;
  id v21;
  unsigned int v22;
  dispatch_queue_s *v23;
  uint64_t v24;
  uint64_t v2 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v2) {
    goto LABEL_12;
  }
  uint64_t v3 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v4 = v2[4];
    BOOL v5 = v4 >= (unint64_t)a1;
    else {
      unint64_t v6 = v2 + 1;
    }
    if (v5) {
      uint64_t v3 = (uint64_t)v2;
    }
    uint64_t v2 = (void *)*v6;
  }

  while (*v6);
  if (v3 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v3 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v3 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v7 = *(void *)(v3 + 40);
  uint64_t v8 = (unsigned int *)(v7 + 4640);
  do
  {
    unsigned int v9 = __ldaxr(v8);
    signed int v10 = v9 + 1;
  }

  while (__stlxr(v10, v8));
  if (gCheckGLErrors) {
    BOOL v11 = v10 <= 1;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11)
  {
    uint64_t v21 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v20 = handle_opengl_thread_conflict((const void **)v7);
    uint64_t v21 = [(id)DYGetGLGuestAppClient(v20) waitOnGraphicsSemaphoreAssertions];
    if ((int)v21 >= 1)
    {
      do
LABEL_34:
        uint64_t v22 = __ldaxr(v8);
      while (__stlxr(v22 - 1, v8));
      unint64_t v23 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v21) graphicsLockWaitQueue];
      dispatch_sync_f(v23, 0LL, (dispatch_function_t)do_nothing);
LABEL_36:
      (*(void (**)(__GLIContextRec *))(*(void *)(v7 + 24) + 712LL))(a1);
      return;
    }
  }

  *(_BYTE *)(v7 + 483_Block_object_dispose(va, 8) = 1;
  if ([(id)DYGetGLGuestAppClient(v21) state] == (char *)&dword_0 + 1)
  {
    id v12 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand];
    if ((_DWORD)v12)
    {
      do
        char v19 = __ldaxr(v8);
      while (__stlxr(v19 - 1, v8));
      [(id)DYGetGLGuestAppClient(v12) triggerArmedCapture];
      goto LABEL_36;
    }
  }

  BOOL v13 = mach_absolute_time();
  (*(void (**)(__GLIContextRec *))(*(void *)(v7 + 32) + 712LL))(a1);
  id v14 = mach_absolute_time();
  int64_t v15 = vdupq_n_s64(1uLL);
  v15.i64[0] = v14 - v13;
  *(int64x2_t *)(v7 + 3696) = vaddq_s64(v15, *(int64x2_t *)(v7 + 3696));
  if (gCheckGLErrors)
  {
    check_errors(v7);
    if (gBreakOnError)
    {
      uint64_t v24 = *(unsigned int *)(v7 + 3404);
      if ((_DWORD)v24) {
        breakpoint_break(0LL, (volatile int *)0xFFFFFFFFLL, 3LL, v24, v7);
      }
    }
  }

  do
  {
    unsigned int v16 = __ldaxr(v8);
    unint64_t v17 = v16 - 1;
  }

  while (__stlxr(v17, v8));
  if (gCheckGLErrors) {
    uint64_t v18 = v17 < 1;
  }
  else {
    uint64_t v18 = 1;
  }
  if (!v18) {
    handle_opengl_thread_conflict((const void **)v7);
  }
}

void sub_2850C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  if (a12) {
    free(a12);
  }
  _Unwind_Resume(exception_object);
}

void flush(__GLIContextRec *a1)
{
  uint64_t v2 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v2) {
    goto LABEL_12;
  }
  uint64_t v3 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v4 = v2[4];
    BOOL v5 = v4 >= (unint64_t)a1;
    else {
      unint64_t v6 = v2 + 1;
    }
    if (v5) {
      uint64_t v3 = (uint64_t)v2;
    }
    uint64_t v2 = (void *)*v6;
  }

  while (*v6);
  if (v3 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v3 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v3 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v7 = *(void *)(v3 + 40);
  uint64_t v8 = (unsigned int *)(v7 + 4640);
  do
  {
    unsigned int v9 = __ldaxr(v8);
    signed int v10 = v9 + 1;
  }

  while (__stlxr(v10, v8));
  if (gCheckGLErrors) {
    BOOL v11 = v10 <= 1;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11)
  {
    id v40 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v39 = handle_opengl_thread_conflict((const void **)v7);
    id v40 = [(id)DYGetGLGuestAppClient(v39) waitOnGraphicsSemaphoreAssertions];
    if ((int)v40 >= 1)
    {
      do
LABEL_57:
        unsigned int v41 = __ldaxr(v8);
      while (__stlxr(v41 - 1, v8));
      id v42 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v40) graphicsLockWaitQueue];
      dispatch_sync_f(v42, 0LL, (dispatch_function_t)do_nothing);
      (*(void (**)(__GLIContextRec *))(*(void *)(v7 + 24) + 720LL))(a1);
      return;
    }
  }

  *(_BYTE *)(v7 + 483_Block_object_dispose(va, 8) = 1;
  uint64_t v49 = 0LL;
  __uint64_t v50 = 0LL;
  unsigned int v51 = 0;
  if ([(id)DYGetGLGuestAppClient(v40) state] != (char *)&dword_0 + 1
    || (id v12 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand], !(_DWORD)v12))
  {
    id v14 = (char *)v49;
    BOOL v13 = v50;
    int64_t v15 = v50 - (_BYTE *)v49;
    unsigned int v16 = v51;
    unint64_t v17 = v51 - (v50 - (_BYTE *)v49);
    if (v17 > 0x2F) {
      goto LABEL_24;
    }
    int v43 = (303 - v17) & 0xFFFFFF00;
    v51 += v43;
    id v14 = (char *)malloc(v43 + v16);
    uint64_t v49 = v14;
    if (v14)
    {
      if ((v14 & 3) == 0)
      {
        BOOL v13 = &v14[v15];
LABEL_24:
        *((_OWORD *)v13 + 1) = 0u;
        *((_OWORD *)v13 + 2) = 0u;
        *(_OWORD *)BOOL v13 = 0u;
        __uint64_t v50 = v13 + 48;
        GPUTools::FB::Fbuf::align((char **)&v49);
        *((_DWORD *)v14 + 1) = 179;
        *((_DWORD *)v14 + _Block_object_dispose(va, 8) = 0;
        __uint64_t v48 = 0LL;
        uint64_t v18 = pthread_threadid_np(0LL, &v48);
        *((void *)v14 + 1) = v48;
        *((_WORD *)v14 + 1_Block_object_dispose(va, 8) = 67;
        *((void *)v14 + 5) = *(void *)v7;
        char v19 = byte_206F0B;
        if ((byte_206F0B & 1) != 0) {
          breakpoint_break( (uint64_t)&v49,  (volatile int *)((char *)&stru_68.reserved2 + 3),  1LL,  *(unsigned int *)(v7 + 3404),  v7);
        }
        uint64_t v20 = (uint64_t)[(id)DYGetGLGuestAppClient(v18) overrideFlags];
        if (!(v20 & 0x10 | v19 & 4))
        {
          uint64_t v21 = mach_absolute_time();
          (*(void (**)(__GLIContextRec *))(*(void *)(v7 + 32) + 720LL))(a1);
          uint64_t v20 = mach_absolute_time();
          uint64_t v22 = v20 - v21;
          unint64_t v23 = g_DYTimebaseInfo;
          if (g_DYTimebaseInfo == *((_DWORD *)&g_DYTimebaseInfo + 1))
          {
            uint64_t v24 = v49;
            *((void *)v49 + 2) = v21;
            v24[3] = v22;
            if (!gCheckGLErrors) {
              goto LABEL_29;
            }
          }

          else
          {
            uint64_t v46 = __udivti3(g_DYTimebaseInfo * v22, (g_DYTimebaseInfo * (unsigned __int128)v22) >> 64);
            uint64_t v47 = v49;
            *((void *)v49 + 3) = v46;
            uint64_t v20 = __udivti3(v23 * v21, (v23 * (unsigned __int128)v21) >> 64);
            v47[2] = v20;
            if (!gCheckGLErrors) {
              goto LABEL_29;
            }
          }

          uint64_t v20 = check_errors(v7);
        }

{
  void *v2;
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  void *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  signed int v10;
  BOOL v11;
  id v12;
  char *v13;
  char *v14;
  int64_t v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void *v24;
  id v25;
  GPUTools::FB::Fbuf *v26;
  unsigned int v27;
  GPUTools::FB::Fbuf *v28;
  dispatch_queue_s *v29;
  uint64_t v30;
  GPUTools::FB::Stream *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  signed int v36;
  BOOL v37;
  unsigned int v38;
  uint64_t v39;
  id v40;
  unsigned int v41;
  dispatch_queue_s *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  __uint64_t v48;
  void *v49;
  char *v50;
  unsigned int v51;
  uint64_t v2 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v2) {
    goto LABEL_12;
  }
  uint64_t v3 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v4 = v2[4];
    BOOL v5 = v4 >= (unint64_t)a1;
    else {
      unint64_t v6 = v2 + 1;
    }
    if (v5) {
      uint64_t v3 = (uint64_t)v2;
    }
    uint64_t v2 = (void *)*v6;
  }

  while (*v6);
  if (v3 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v3 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v3 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v7 = *(void *)(v3 + 40);
  uint64_t v8 = (unsigned int *)(v7 + 4640);
  do
  {
    unsigned int v9 = __ldaxr(v8);
    signed int v10 = v9 + 1;
  }

  while (__stlxr(v10, v8));
  if (gCheckGLErrors) {
    BOOL v11 = v10 <= 1;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11)
  {
    id v40 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v39 = handle_opengl_thread_conflict((const void **)v7);
    id v40 = [(id)DYGetGLGuestAppClient(v39) waitOnGraphicsSemaphoreAssertions];
    if ((int)v40 >= 1)
    {
      do
LABEL_57:
        unsigned int v41 = __ldaxr(v8);
      while (__stlxr(v41 - 1, v8));
      id v42 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v40) graphicsLockWaitQueue];
      dispatch_sync_f(v42, 0LL, (dispatch_function_t)do_nothing);
      (*(void (**)(__GLIContextRec *))(*(void *)(v7 + 24) + 720LL))(a1);
      return;
    }
  }

  *(_BYTE *)(v7 + 483_Block_object_dispose(va, 8) = 1;
  uint64_t v49 = 0LL;
  __uint64_t v50 = 0LL;
  unsigned int v51 = 0;
  if ([(id)DYGetGLGuestAppClient(v40) state] != (char *)&dword_0 + 1
    || (id v12 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand], !(_DWORD)v12))
  {
    id v14 = (char *)v49;
    BOOL v13 = v50;
    int64_t v15 = v50 - (_BYTE *)v49;
    unsigned int v16 = v51;
    unint64_t v17 = v51 - (v50 - (_BYTE *)v49);
    if (v17 > 0x2F) {
      goto LABEL_24;
    }
    int v43 = (303 - v17) & 0xFFFFFF00;
    v51 += v43;
    id v14 = (char *)malloc(v43 + v16);
    uint64_t v49 = v14;
    if (v14)
    {
      if ((v14 & 3) == 0)
      {
        BOOL v13 = &v14[v15];
LABEL_24:
        *((_OWORD *)v13 + 1) = 0u;
        *((_OWORD *)v13 + 2) = 0u;
        *(_OWORD *)BOOL v13 = 0u;
        __uint64_t v50 = v13 + 48;
        GPUTools::FB::Fbuf::align((char **)&v49);
        *((_DWORD *)v14 + 1) = 179;
        *((_DWORD *)v14 + _Block_object_dispose(va, 8) = 0;
        __uint64_t v48 = 0LL;
        uint64_t v18 = pthread_threadid_np(0LL, &v48);
        *((void *)v14 + 1) = v48;
        *((_WORD *)v14 + 1_Block_object_dispose(va, 8) = 67;
        *((void *)v14 + 5) = *(void *)v7;
        char v19 = byte_206F0B;
        if ((byte_206F0B & 1) != 0) {
          breakpoint_break( (uint64_t)&v49,  (volatile int *)((char *)&stru_68.reserved2 + 3),  1LL,  *(unsigned int *)(v7 + 3404),  v7);
        }
        uint64_t v20 = (uint64_t)[(id)DYGetGLGuestAppClient(v18) overrideFlags];
        if (!(v20 & 0x10 | v19 & 4))
        {
          uint64_t v21 = mach_absolute_time();
          (*(void (**)(__GLIContextRec *))(*(void *)(v7 + 32) + 720LL))(a1);
          uint64_t v20 = mach_absolute_time();
          uint64_t v22 = v20 - v21;
          unint64_t v23 = g_DYTimebaseInfo;
          if (g_DYTimebaseInfo == *((_DWORD *)&g_DYTimebaseInfo + 1))
          {
            uint64_t v24 = v49;
            *((void *)v49 + 2) = v21;
            v24[3] = v22;
            if (!gCheckGLErrors) {
              goto LABEL_29;
            }
          }

          else
          {
            uint64_t v46 = __udivti3(g_DYTimebaseInfo * v22, (g_DYTimebaseInfo * (unsigned __int128)v22) >> 64);
            uint64_t v47 = v49;
            *((void *)v49 + 3) = v46;
            uint64_t v20 = __udivti3(v23 * v21, (v23 * (unsigned __int128)v21) >> 64);
            v47[2] = v20;
            if (!gCheckGLErrors) {
              goto LABEL_29;
            }
          }

          uint64_t v20 = check_errors(v7);
        }

{
  void *v2;
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  void *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  signed int v10;
  BOOL v11;
  id v12;
  unsigned int v13;
  signed int v14;
  BOOL v15;
  unsigned int v16;
  uint64_t v17;
  id v18;
  unsigned int v19;
  dispatch_queue_s *v20;
  uint64_t v21;
  uint64_t v2 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v2) {
    goto LABEL_12;
  }
  uint64_t v3 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v4 = v2[4];
    BOOL v5 = v4 >= (unint64_t)a1;
    else {
      unint64_t v6 = v2 + 1;
    }
    if (v5) {
      uint64_t v3 = (uint64_t)v2;
    }
    uint64_t v2 = (void *)*v6;
  }

  while (*v6);
  if (v3 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v3 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v3 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v7 = *(void *)(v3 + 40);
  uint64_t v8 = (unsigned int *)(v7 + 4640);
  do
  {
    unsigned int v9 = __ldaxr(v8);
    signed int v10 = v9 + 1;
  }

  while (__stlxr(v10, v8));
  if (gCheckGLErrors) {
    BOOL v11 = v10 <= 1;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11)
  {
    uint64_t v18 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    unint64_t v17 = handle_opengl_thread_conflict((const void **)v7);
    uint64_t v18 = [(id)DYGetGLGuestAppClient(v17) waitOnGraphicsSemaphoreAssertions];
    if ((int)v18 >= 1)
    {
      do
LABEL_34:
        char v19 = __ldaxr(v8);
      while (__stlxr(v19 - 1, v8));
      uint64_t v20 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v18) graphicsLockWaitQueue];
      dispatch_sync_f(v20, 0LL, (dispatch_function_t)do_nothing);
LABEL_36:
      (*(void (**)(__GLIContextRec *))(*(void *)(v7 + 24) + 720LL))(a1);
      return;
    }
  }

  *(_BYTE *)(v7 + 483_Block_object_dispose(va, 8) = 1;
  if ([(id)DYGetGLGuestAppClient(v18) state] == (char *)&dword_0 + 1)
  {
    id v12 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand];
    if ((_DWORD)v12)
    {
      do
        unsigned int v16 = __ldaxr(v8);
      while (__stlxr(v16 - 1, v8));
      [(id)DYGetGLGuestAppClient(v12) triggerArmedCapture];
      goto LABEL_36;
    }
  }

  (*(void (**)(__GLIContextRec *))(*(void *)(v7 + 32) + 720LL))(a1);
  ++*(void *)(v7 + 3704);
  if (gCheckGLErrors)
  {
    check_errors(v7);
    if (gBreakOnError)
    {
      uint64_t v21 = *(unsigned int *)(v7 + 3404);
      if ((_DWORD)v21) {
        breakpoint_break(0LL, (volatile int *)0xFFFFFFFFLL, 3LL, v21, v7);
      }
    }
  }

  do
  {
    BOOL v13 = __ldaxr(v8);
    id v14 = v13 - 1;
  }

  while (__stlxr(v14, v8));
  if (gCheckGLErrors) {
    int64_t v15 = v14 < 1;
  }
  else {
    int64_t v15 = 1;
  }
  if (!v15) {
    handle_opengl_thread_conflict((const void **)v7);
  }
}

{
  void *v2;
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  void *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  signed int v10;
  BOOL v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  int64x2_t v15;
  unsigned int v16;
  signed int v17;
  BOOL v18;
  unsigned int v19;
  uint64_t v20;
  id v21;
  unsigned int v22;
  dispatch_queue_s *v23;
  uint64_t v24;
  uint64_t v2 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v2) {
    goto LABEL_12;
  }
  uint64_t v3 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v4 = v2[4];
    BOOL v5 = v4 >= (unint64_t)a1;
    else {
      unint64_t v6 = v2 + 1;
    }
    if (v5) {
      uint64_t v3 = (uint64_t)v2;
    }
    uint64_t v2 = (void *)*v6;
  }

  while (*v6);
  if (v3 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v3 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v3 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v7 = *(void *)(v3 + 40);
  uint64_t v8 = (unsigned int *)(v7 + 4640);
  do
  {
    unsigned int v9 = __ldaxr(v8);
    signed int v10 = v9 + 1;
  }

  while (__stlxr(v10, v8));
  if (gCheckGLErrors) {
    BOOL v11 = v10 <= 1;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11)
  {
    uint64_t v21 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v20 = handle_opengl_thread_conflict((const void **)v7);
    uint64_t v21 = [(id)DYGetGLGuestAppClient(v20) waitOnGraphicsSemaphoreAssertions];
    if ((int)v21 >= 1)
    {
      do
LABEL_34:
        uint64_t v22 = __ldaxr(v8);
      while (__stlxr(v22 - 1, v8));
      unint64_t v23 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v21) graphicsLockWaitQueue];
      dispatch_sync_f(v23, 0LL, (dispatch_function_t)do_nothing);
LABEL_36:
      (*(void (**)(__GLIContextRec *))(*(void *)(v7 + 24) + 720LL))(a1);
      return;
    }
  }

  *(_BYTE *)(v7 + 483_Block_object_dispose(va, 8) = 1;
  if ([(id)DYGetGLGuestAppClient(v21) state] == (char *)&dword_0 + 1)
  {
    id v12 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand];
    if ((_DWORD)v12)
    {
      do
        char v19 = __ldaxr(v8);
      while (__stlxr(v19 - 1, v8));
      [(id)DYGetGLGuestAppClient(v12) triggerArmedCapture];
      goto LABEL_36;
    }
  }

  BOOL v13 = mach_absolute_time();
  (*(void (**)(__GLIContextRec *))(*(void *)(v7 + 32) + 720LL))(a1);
  id v14 = mach_absolute_time();
  int64_t v15 = vdupq_n_s64(1uLL);
  v15.i64[0] = v14 - v13;
  *(int64x2_t *)(v7 + 3696) = vaddq_s64(v15, *(int64x2_t *)(v7 + 3696));
  if (gCheckGLErrors)
  {
    check_errors(v7);
    if (gBreakOnError)
    {
      uint64_t v24 = *(unsigned int *)(v7 + 3404);
      if ((_DWORD)v24) {
        breakpoint_break(0LL, (volatile int *)0xFFFFFFFFLL, 3LL, v24, v7);
      }
    }
  }

  do
  {
    unsigned int v16 = __ldaxr(v8);
    unint64_t v17 = v16 - 1;
  }

  while (__stlxr(v17, v8));
  if (gCheckGLErrors) {
    uint64_t v18 = v17 < 1;
  }
  else {
    uint64_t v18 = 1;
  }
  if (!v18) {
    handle_opengl_thread_conflict((const void **)v7);
  }
}

void sub_289BC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  if (a12) {
    free(a12);
  }
  _Unwind_Resume(exception_object);
}

void fogf(__GLIContextRec *a1, uint64_t a2, float a3)
{
  if ((_DWORD)a2 == 33872 || (_DWORD)a2 == 2917) {
    uint64_t v7 = "Cen";
  }
  else {
    uint64_t v7 = "Cef";
  }
  uint64_t v8 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v8) {
    goto LABEL_18;
  }
  uint64_t v9 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v10 = v8[4];
    BOOL v11 = v10 >= (unint64_t)a1;
    else {
      id v12 = v8 + 1;
    }
    if (v11) {
      uint64_t v9 = (uint64_t)v8;
    }
    uint64_t v8 = (void *)*v12;
  }

  while (*v12);
  if (v9 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v9 + 32) > (unint64_t)a1) {
LABEL_18:
  }
    uint64_t v9 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v13 = *(void *)(v9 + 40);
  id v14 = (unsigned int *)(v13 + 4640);
  do
  {
    unsigned int v15 = __ldaxr(v14);
    signed int v16 = v15 + 1;
  }

  while (__stlxr(v16, v14));
  if (gCheckGLErrors) {
    BOOL v17 = v16 <= 1;
  }
  else {
    BOOL v17 = 1;
  }
  if (v17)
  {
    id v45 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v44 = handle_opengl_thread_conflict((const void **)v13);
    id v45 = [(id)DYGetGLGuestAppClient(v44) waitOnGraphicsSemaphoreAssertions];
    if ((int)v45 >= 1)
    {
      do
LABEL_62:
        unsigned int v46 = __ldaxr(v14);
      while (__stlxr(v46 - 1, v14));
      uint64_t v47 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v45) graphicsLockWaitQueue];
      dispatch_sync_f(v47, 0LL, (dispatch_function_t)do_nothing);
      (*(void (**)(__GLIContextRec *, uint64_t, float))(*(void *)(v13 + 24) + 728LL))(a1, a2, a3);
      return;
    }
  }

  *(_BYTE *)(v13 + 483_Block_object_dispose(va, 8) = 1;
  v52[0] = 0LL;
  v52[1] = 0LL;
  int v53 = 0;
  if ([(id)DYGetGLGuestAppClient(v45) state] != (char *)&dword_0 + 1
    || (id v22 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand], !(_DWORD)v22))
  {
    GPUTools::FB::Encode((uint64_t)v52, 188LL, 0LL, (uint64_t)v7, v18, v19, v20, v21, *(void *)v13);
    char v24 = byte_206F14;
    if ((byte_206F14 & 1) != 0) {
      breakpoint_break((uint64_t)v52, (volatile int *)&stru_B8.sectname[4], 1LL, *(unsigned int *)(v13 + 3404), v13);
    }
    uint64_t v25 = (uint64_t)[(id)DYGetGLGuestAppClient(v23) overrideFlags];
    if (!(v25 & 0x10 | v24 & 4))
    {
      uint64_t v26 = mach_absolute_time();
      (*(void (**)(__GLIContextRec *, uint64_t, float))(*(void *)(v13 + 32) + 728LL))(a1, a2, a3);
      uint64_t v25 = mach_absolute_time();
      uint64_t v27 = v25 - v26;
      unint64_t v28 = g_DYTimebaseInfo;
      if (g_DYTimebaseInfo == *((_DWORD *)&g_DYTimebaseInfo + 1))
      {
        unsigned int v29 = v52[0];
        *((void *)v52[0] + 2) = v26;
        v29[3] = v27;
        if (!gCheckGLErrors) {
          goto LABEL_34;
        }
      }

      else
      {
        uint64_t v50 = __udivti3(g_DYTimebaseInfo * v27, (g_DYTimebaseInfo * (unsigned __int128)v27) >> 64);
        unsigned int v51 = v52[0];
        *((void *)v52[0] + 3) = v50;
        uint64_t v25 = __udivti3(v28 * v26, (v28 * (unsigned __int128)v26) >> 64);
        v51[2] = v25;
        if (!gCheckGLErrors) {
          goto LABEL_34;
        }
      }

      uint64_t v25 = check_errors(v13);
    }

{
  const char *v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  void *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  signed int v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  id v30;
  GPUTools::FB::Fbuf *v31;
  unsigned int v32;
  GPUTools::FB::Fbuf *v33;
  dispatch_queue_s *v34;
  uint64_t v35;
  GPUTools::FB::Stream *v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  signed int v41;
  BOOL v42;
  unsigned int v43;
  uint64_t v44;
  id v45;
  unsigned int v46;
  dispatch_queue_s *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *v52[2];
  int v53;
  if ((_DWORD)a2 == 33872 || (_DWORD)a2 == 2917) {
    uint64_t v7 = "Cen";
  }
  else {
    uint64_t v7 = "Cef";
  }
  uint64_t v8 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v8) {
    goto LABEL_18;
  }
  uint64_t v9 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v10 = v8[4];
    BOOL v11 = v10 >= (unint64_t)a1;
    else {
      id v12 = v8 + 1;
    }
    if (v11) {
      uint64_t v9 = (uint64_t)v8;
    }
    uint64_t v8 = (void *)*v12;
  }

  while (*v12);
  if (v9 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v9 + 32) > (unint64_t)a1) {
LABEL_18:
  }
    uint64_t v9 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v13 = *(void *)(v9 + 40);
  id v14 = (unsigned int *)(v13 + 4640);
  do
  {
    unsigned int v15 = __ldaxr(v14);
    signed int v16 = v15 + 1;
  }

  while (__stlxr(v16, v14));
  if (gCheckGLErrors) {
    BOOL v17 = v16 <= 1;
  }
  else {
    BOOL v17 = 1;
  }
  if (v17)
  {
    id v45 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v44 = handle_opengl_thread_conflict((const void **)v13);
    id v45 = [(id)DYGetGLGuestAppClient(v44) waitOnGraphicsSemaphoreAssertions];
    if ((int)v45 >= 1)
    {
      do
LABEL_62:
        unsigned int v46 = __ldaxr(v14);
      while (__stlxr(v46 - 1, v14));
      uint64_t v47 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v45) graphicsLockWaitQueue];
      dispatch_sync_f(v47, 0LL, (dispatch_function_t)do_nothing);
      (*(void (**)(__GLIContextRec *, uint64_t, float))(*(void *)(v13 + 24) + 728LL))(a1, a2, a3);
      return;
    }
  }

  *(_BYTE *)(v13 + 483_Block_object_dispose(va, 8) = 1;
  v52[0] = 0LL;
  v52[1] = 0LL;
  int v53 = 0;
  if ([(id)DYGetGLGuestAppClient(v45) state] != (char *)&dword_0 + 1
    || (id v22 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand], !(_DWORD)v22))
  {
    GPUTools::FB::Encode((uint64_t)v52, 188LL, 0LL, (uint64_t)v7, v18, v19, v20, v21, *(void *)v13);
    char v24 = byte_206F14;
    if ((byte_206F14 & 1) != 0) {
      breakpoint_break((uint64_t)v52, (volatile int *)&stru_B8.sectname[4], 1LL, *(unsigned int *)(v13 + 3404), v13);
    }
    uint64_t v25 = (uint64_t)[(id)DYGetGLGuestAppClient(v23) overrideFlags];
    if (!(v25 & 0x10 | v24 & 4))
    {
      uint64_t v26 = mach_absolute_time();
      (*(void (**)(__GLIContextRec *, uint64_t, float))(*(void *)(v13 + 32) + 728LL))(a1, a2, a3);
      uint64_t v25 = mach_absolute_time();
      uint64_t v27 = v25 - v26;
      unint64_t v28 = g_DYTimebaseInfo;
      if (g_DYTimebaseInfo == *((_DWORD *)&g_DYTimebaseInfo + 1))
      {
        unsigned int v29 = v52[0];
        *((void *)v52[0] + 2) = v26;
        v29[3] = v27;
        if (!gCheckGLErrors) {
          goto LABEL_34;
        }
      }

      else
      {
        uint64_t v50 = __udivti3(g_DYTimebaseInfo * v27, (g_DYTimebaseInfo * (unsigned __int128)v27) >> 64);
        unsigned int v51 = v52[0];
        *((void *)v52[0] + 3) = v50;
        uint64_t v25 = __udivti3(v28 * v26, (v28 * (unsigned __int128)v26) >> 64);
        v51[2] = v25;
        if (!gCheckGLErrors) {
          goto LABEL_34;
        }
      }

      uint64_t v25 = check_errors(v13);
    }

{
  void *v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  void *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  signed int v14;
  BOOL v15;
  id v16;
  unsigned int v17;
  signed int v18;
  BOOL v19;
  unsigned int v20;
  uint64_t v21;
  id v22;
  unsigned int v23;
  dispatch_queue_s *v24;
  uint64_t v25;
  unint64_t v6 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v6) {
    goto LABEL_12;
  }
  uint64_t v7 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    uint64_t v8 = v6[4];
    uint64_t v9 = v8 >= (unint64_t)a1;
    else {
      unint64_t v10 = v6 + 1;
    }
    if (v9) {
      uint64_t v7 = (uint64_t)v6;
    }
    unint64_t v6 = (void *)*v10;
  }

  while (*v10);
  if (v7 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v7 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v7 = ContextInfo::activeCtxInfoMap + 8;
  BOOL v11 = *(void *)(v7 + 40);
  id v12 = (unsigned int *)(v11 + 4640);
  do
  {
    uint64_t v13 = __ldaxr(v12);
    id v14 = v13 + 1;
  }

  while (__stlxr(v14, v12));
  if (gCheckGLErrors) {
    unsigned int v15 = v14 <= 1;
  }
  else {
    unsigned int v15 = 1;
  }
  if (v15)
  {
    id v22 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v21 = handle_opengl_thread_conflict((const void **)v11);
    id v22 = [(id)DYGetGLGuestAppClient(v21) waitOnGraphicsSemaphoreAssertions];
    if ((int)v22 >= 1)
    {
      do
LABEL_34:
        uint64_t v23 = __ldaxr(v12);
      while (__stlxr(v23 - 1, v12));
      char v24 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v22) graphicsLockWaitQueue];
      dispatch_sync_f(v24, 0LL, (dispatch_function_t)do_nothing);
LABEL_36:
      (*(void (**)(__GLIContextRec *, uint64_t, float))(*(void *)(v11 + 24) + 728LL))(a1, a2, a3);
      return;
    }
  }

  *(_BYTE *)(v11 + 483_Block_object_dispose(va, 8) = 1;
  if ([(id)DYGetGLGuestAppClient(v22) state] == (char *)&dword_0 + 1)
  {
    signed int v16 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand];
    if ((_DWORD)v16)
    {
      do
        uint64_t v20 = __ldaxr(v12);
      while (__stlxr(v20 - 1, v12));
      [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
      goto LABEL_36;
    }
  }

  (*(void (**)(__GLIContextRec *, uint64_t, float))(*(void *)(v11 + 32) + 728LL))(a1, a2, a3);
  ++*(void *)(v11 + 3704);
  if (gCheckGLErrors)
  {
    check_errors(v11);
    if (gBreakOnError)
    {
      uint64_t v25 = *(unsigned int *)(v11 + 3404);
      if ((_DWORD)v25) {
        breakpoint_break(0LL, (volatile int *)0xFFFFFFFFLL, 3LL, v25, v11);
      }
    }
  }

  do
  {
    BOOL v17 = __ldaxr(v12);
    uint64_t v18 = v17 - 1;
  }

  while (__stlxr(v18, v12));
  if (gCheckGLErrors) {
    uint64_t v19 = v18 < 1;
  }
  else {
    uint64_t v19 = 1;
  }
  if (!v19) {
    handle_opengl_thread_conflict((const void **)v11);
  }
}

{
  void *v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  void *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  signed int v14;
  BOOL v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  int64x2_t v19;
  unsigned int v20;
  signed int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  id v25;
  unsigned int v26;
  dispatch_queue_s *v27;
  uint64_t v28;
  unint64_t v6 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v6) {
    goto LABEL_12;
  }
  uint64_t v7 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    uint64_t v8 = v6[4];
    uint64_t v9 = v8 >= (unint64_t)a1;
    else {
      unint64_t v10 = v6 + 1;
    }
    if (v9) {
      uint64_t v7 = (uint64_t)v6;
    }
    unint64_t v6 = (void *)*v10;
  }

  while (*v10);
  if (v7 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v7 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v7 = ContextInfo::activeCtxInfoMap + 8;
  BOOL v11 = *(void *)(v7 + 40);
  id v12 = (unsigned int *)(v11 + 4640);
  do
  {
    uint64_t v13 = __ldaxr(v12);
    id v14 = v13 + 1;
  }

  while (__stlxr(v14, v12));
  if (gCheckGLErrors) {
    unsigned int v15 = v14 <= 1;
  }
  else {
    unsigned int v15 = 1;
  }
  if (v15)
  {
    uint64_t v25 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    char v24 = handle_opengl_thread_conflict((const void **)v11);
    uint64_t v25 = [(id)DYGetGLGuestAppClient(v24) waitOnGraphicsSemaphoreAssertions];
    if ((int)v25 >= 1)
    {
      do
LABEL_34:
        uint64_t v26 = __ldaxr(v12);
      while (__stlxr(v26 - 1, v12));
      uint64_t v27 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v25) graphicsLockWaitQueue];
      dispatch_sync_f(v27, 0LL, (dispatch_function_t)do_nothing);
LABEL_36:
      (*(void (**)(__GLIContextRec *, uint64_t, float))(*(void *)(v11 + 24) + 728LL))(a1, a2, a3);
      return;
    }
  }

  *(_BYTE *)(v11 + 483_Block_object_dispose(va, 8) = 1;
  if ([(id)DYGetGLGuestAppClient(v25) state] == (char *)&dword_0 + 1)
  {
    signed int v16 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand];
    if ((_DWORD)v16)
    {
      do
        uint64_t v23 = __ldaxr(v12);
      while (__stlxr(v23 - 1, v12));
      [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
      goto LABEL_36;
    }
  }

  BOOL v17 = mach_absolute_time();
  (*(void (**)(__GLIContextRec *, uint64_t, float))(*(void *)(v11 + 32) + 728LL))(a1, a2, a3);
  uint64_t v18 = mach_absolute_time();
  uint64_t v19 = vdupq_n_s64(1uLL);
  v19.i64[0] = v18 - v17;
  *(int64x2_t *)(v11 + 3696) = vaddq_s64(v19, *(int64x2_t *)(v11 + 3696));
  if (gCheckGLErrors)
  {
    check_errors(v11);
    if (gBreakOnError)
    {
      unint64_t v28 = *(unsigned int *)(v11 + 3404);
      if ((_DWORD)v28) {
        breakpoint_break(0LL, (volatile int *)0xFFFFFFFFLL, 3LL, v28, v11);
      }
    }
  }

  do
  {
    uint64_t v20 = __ldaxr(v12);
    uint64_t v21 = v20 - 1;
  }

  while (__stlxr(v21, v12));
  if (gCheckGLErrors) {
    id v22 = v21 < 1;
  }
  else {
    id v22 = 1;
  }
  if (!v22) {
    handle_opengl_thread_conflict((const void **)v11);
  }
}

LABEL_34:
    id v30 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v25), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v30) {
      id v30 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v52, v31);
    }
    unsigned int v33 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v33) {
      id v30 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v52, v33, v32);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v30), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v52);
    }
    unsigned int v34 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v52);
    uint64_t v35 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v35 && gBreakOnError)
    {
      uint64_t v48 = 3LL;
      uint64_t v49 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v24 & 2) == 0) {
        goto LABEL_43;
      }
      uint64_t v48 = 2LL;
      uint64_t v49 = 188LL;
    }

    breakpoint_break((uint64_t)v52, (volatile int *)v49, v48, v35, v13);
LABEL_43:
    signed int v36 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v34) defaultFbufStream];
    BOOL v37 = (unsigned int *)((char *)v36 + 56);
    do
      unsigned int v38 = __ldaxr(v37);
    while (__stlxr(1u, v37));
    if (v38 == 1)
    {
      do
      {
        while (*v37 == 1)
          ;
        do
          unsigned int v39 = __ldaxr(v37);
        while (__stlxr(1u, v37));
      }

      while (v39 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v36, (GPUTools::FB::Fbuf *)v52, *(unsigned int *)v52[0], 1);
    atomic_store(0, v37);
    do
    {
      unsigned int v40 = __ldaxr(v14);
      signed int v41 = v40 - 1;
    }

    while (__stlxr(v41, v14));
    if (gCheckGLErrors) {
      BOOL v42 = v41 < 1;
    }
    else {
      BOOL v42 = 1;
    }
    if (!v42) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    goto LABEL_56;
  }

  do
    unsigned int v43 = __ldaxr(v14);
  while (__stlxr(v43 - 1, v14));
  [(id)DYGetGLGuestAppClient(v22) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, float))(*(void *)(v13 + 24) + 728LL))(a1, a2, a3);
LABEL_56:
  if (v52[0]) {
    free(v52[0]);
  }
}

    unsigned int v32 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v32) {
      unsigned int v32 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v54, v33);
    }
    uint64_t v35 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v35) {
      unsigned int v32 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v54, v35, v34);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)v54);
    }
    signed int v36 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)v54);
    BOOL v37 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v37 && gBreakOnError)
    {
      uint64_t v50 = 3LL;
      unsigned int v51 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v26 & 2) == 0) {
        goto LABEL_43;
      }
      uint64_t v50 = 2LL;
      unsigned int v51 = 189LL;
    }

    breakpoint_break((uint64_t)v54, (volatile int *)v51, v50, v37, v11);
LABEL_43:
    unsigned int v38 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v36) defaultFbufStream];
    unsigned int v39 = (unsigned int *)((char *)v38 + 56);
    do
      unsigned int v40 = __ldaxr(v39);
    while (__stlxr(1u, v39));
    if (v40 == 1)
    {
      do
      {
        while (*v39 == 1)
          ;
        do
          signed int v41 = __ldaxr(v39);
        while (__stlxr(1u, v39));
      }

      while (v41 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v38, (GPUTools::FB::Fbuf *)v54, *(unsigned int *)v54[0], 1);
    atomic_store(0, v39);
    do
    {
      BOOL v42 = __ldaxr(v12);
      unsigned int v43 = v42 - 1;
    }

    while (__stlxr(v43, v12));
    if (gCheckGLErrors) {
      uint64_t v44 = v43 < 1;
    }
    else {
      uint64_t v44 = 1;
    }
    if (!v44) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    goto LABEL_56;
  }

  do
    id v45 = __ldaxr(v12);
  while (__stlxr(v45 - 1, v12));
  [(id)DYGetGLGuestAppClient(v17) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, GPUTools::GL *, const float *))(*(void *)(v11 + 24) + 736LL))(a1, a2, a3);
LABEL_56:
  if (v54[0]) {
    free(v54[0]);
  }
}

        unsigned int v38 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v33), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v38) {
          unsigned int v38 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v64, v39);
        }
        signed int v41 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v20 + 3404);
        if ((_DWORD)v41) {
          unsigned int v38 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v64, v41, v40);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v38), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v20, (uint64_t)v64);
        }
        BOOL v42 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v20 + 3480),  (GPUTools::FB::Fbuf *)(v20 + 3520),  (GPUTools::FB *)v64);
        unsigned int v43 = *(unsigned int *)(v20 + 3404);
        if ((_DWORD)v43 && gBreakOnError)
        {
          unsigned int v56 = 3LL;
          unsigned int v57 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v32 & 2) == 0) {
            goto LABEL_43;
          }
          unsigned int v56 = 2LL;
          unsigned int v57 = 594LL;
        }

        breakpoint_break((uint64_t)v64, (volatile int *)v57, v56, v43, v20);
LABEL_43:
        uint64_t v44 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v42) defaultFbufStream];
        id v45 = (unsigned int *)((char *)v44 + 56);
        do
          unsigned int v46 = __ldaxr(v45);
        while (__stlxr(1u, v45));
        if (v46 == 1)
        {
          do
          {
            while (*v45 == 1)
              ;
            do
              uint64_t v47 = __ldaxr(v45);
            while (__stlxr(1u, v45));
          }

          while (v47 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v44, (GPUTools::FB::Fbuf *)v64, *(unsigned int *)v64[0], 1);
        atomic_store(0, v45);
        wrapper_encode_texture_format_info((ContextInfo *)v20, a2, a3, a10);
        do
        {
          uint64_t v48 = __ldaxr(v21);
          uint64_t v49 = v48 - 1;
        }

        while (__stlxr(v49, v21));
        if (gCheckGLErrors) {
          uint64_t v50 = v49 < 1;
        }
        else {
          uint64_t v50 = 1;
        }
        if (!v50) {
          handle_opengl_thread_conflict((const void **)v20);
        }
        goto LABEL_56;
      }
    }

    *(_BYTE *)(v20 + 4712) = 105;
    goto LABEL_29;
  }

  do
    unsigned int v51 = __ldaxr(v21);
  while (__stlxr(v51 - 1, v21));
  [(id)DYGetGLGuestAppClient(v29) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, GPUTools::GL *, _DWORD, const void *))(*(void *)(v20 + 24) + 2408LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  a10);
LABEL_56:
  if (v64[0]) {
    free(v64[0]);
  }
}

        BOOL v37 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
        if ((_DWORD)v37) {
          BOOL v37 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v64, v38);
        }
        unsigned int v40 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v19 + 3404);
        if ((_DWORD)v40) {
          BOOL v37 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v64, v40, v39);
        }
        if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v37), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
          encode_driver_events((id *)v19, (uint64_t)v64);
        }
        signed int v41 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v19 + 3480),  (GPUTools::FB::Fbuf *)(v19 + 3520),  (GPUTools::FB *)v64);
        BOOL v42 = *(unsigned int *)(v19 + 3404);
        if ((_DWORD)v42 && gBreakOnError)
        {
          uint64_t v55 = 3LL;
          unsigned int v56 = 0xFFFFFFFFLL;
        }

        else
        {
          if ((v31 & 2) == 0) {
            goto LABEL_43;
          }
          uint64_t v55 = 2LL;
          unsigned int v56 = 595LL;
        }

        breakpoint_break((uint64_t)v64, (volatile int *)v56, v55, v42, v19);
LABEL_43:
        unsigned int v43 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v41) defaultFbufStream];
        uint64_t v44 = (unsigned int *)((char *)v43 + 56);
        do
          id v45 = __ldaxr(v44);
        while (__stlxr(1u, v44));
        if (v45 == 1)
        {
          do
          {
            while (*v44 == 1)
              ;
            do
              unsigned int v46 = __ldaxr(v44);
            while (__stlxr(1u, v44));
          }

          while (v46 == 1);
        }

        GPUTools::FB::Stream::Write_nolock(v43, (GPUTools::FB::Fbuf *)v64, *(unsigned int *)v64[0], 1);
        atomic_store(0, v44);
        wrapper_encode_texture_format_info((ContextInfo *)v19, a2, a3, a10);
        do
        {
          uint64_t v47 = __ldaxr(v20);
          uint64_t v48 = v47 - 1;
        }

        while (__stlxr(v48, v20));
        if (gCheckGLErrors) {
          uint64_t v49 = v48 < 1;
        }
        else {
          uint64_t v49 = 1;
        }
        if (!v49) {
          handle_opengl_thread_conflict((const void **)v19);
        }
        goto LABEL_56;
      }
    }

    *(_BYTE *)(v19 + 4712) = 105;
    goto LABEL_29;
  }

  do
    uint64_t v50 = __ldaxr(v20);
  while (__stlxr(v50 - 1, v20));
  [(id)DYGetGLGuestAppClient(v28) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const void *))(*(void *)(v19 + 24) + 3504LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  a10);
LABEL_56:
  if (v64[0]) {
    free(v64[0]);
  }
}

    id v14 = v77;
    a3 = v78;
    snprintf((char *)(v77 + 4709), 0x40uLL, "Culi@%dU<cb>@%di");
LABEL_36:
    a5 = v80;
    a2 = v76;
    GPUTools::FB::Encode((uint64_t)v81, 540LL, v14 + 4709, v42, v43, v44, v45, v46, *(void *)v14);
    free(v26);
    goto LABEL_37;
  }

  do
    uint64_t v67 = __ldaxr(v15);
  while (__stlxr(v67 - 1, v15));
  [(id)DYGetGLGuestAppClient(v24) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, const char *const *, const int *))(*(void *)(v14 + 24)
                                                                                                + 4760LL))( a1,  a2,  a3,  a4,  a5);
LABEL_64:
  if (v81[0]) {
    free(v81[0]);
  }
}

    id v30 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v25), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v30) {
      id v30 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v52, v31);
    }
    unsigned int v33 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v33) {
      id v30 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v52, v33, v32);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v30), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v52);
    }
    unsigned int v34 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v52);
    uint64_t v35 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v35 && gBreakOnError)
    {
      uint64_t v48 = 3LL;
      uint64_t v49 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v24 & 2) == 0) {
        goto LABEL_43;
      }
      uint64_t v48 = 2LL;
      uint64_t v49 = 777LL;
    }

    breakpoint_break((uint64_t)v52, (volatile int *)v49, v48, v35, v13);
LABEL_43:
    signed int v36 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v34) defaultFbufStream];
    BOOL v37 = (unsigned int *)((char *)v36 + 56);
    do
      unsigned int v38 = __ldaxr(v37);
    while (__stlxr(1u, v37));
    if (v38 == 1)
    {
      do
      {
        while (*v37 == 1)
          ;
        do
          unsigned int v39 = __ldaxr(v37);
        while (__stlxr(1u, v37));
      }

      while (v39 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v36, (GPUTools::FB::Fbuf *)v52, *(unsigned int *)v52[0], 1);
    atomic_store(0, v37);
    do
    {
      unsigned int v40 = __ldaxr(v14);
      signed int v41 = v40 - 1;
    }

    while (__stlxr(v41, v14));
    if (gCheckGLErrors) {
      BOOL v42 = v41 < 1;
    }
    else {
      BOOL v42 = 1;
    }
    if (!v42) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    goto LABEL_56;
  }

  do
    unsigned int v43 = __ldaxr(v14);
  while (__stlxr(v43 - 1, v14));
  [(id)DYGetGLGuestAppClient(v22) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t))(*(void *)(v13 + 24) + 7800LL))(a1, a2, a3);
LABEL_56:
  if (v52[0]) {
    free(v52[0]);
  }
}

    unsigned int v32 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v32) {
      unsigned int v32 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v54, v33);
    }
    uint64_t v35 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v35) {
      unsigned int v32 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v54, v35, v34);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)v54);
    }
    signed int v36 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)v54);
    BOOL v37 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v37 && gBreakOnError)
    {
      uint64_t v50 = 3LL;
      unsigned int v51 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v26 & 2) == 0) {
        goto LABEL_43;
      }
      uint64_t v50 = 2LL;
      unsigned int v51 = 778LL;
    }

    breakpoint_break((uint64_t)v54, (volatile int *)v51, v50, v37, v11);
LABEL_43:
    unsigned int v38 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v36) defaultFbufStream];
    unsigned int v39 = (unsigned int *)((char *)v38 + 56);
    do
      unsigned int v40 = __ldaxr(v39);
    while (__stlxr(1u, v39));
    if (v40 == 1)
    {
      do
      {
        while (*v39 == 1)
          ;
        do
          signed int v41 = __ldaxr(v39);
        while (__stlxr(1u, v39));
      }

      while (v41 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v38, (GPUTools::FB::Fbuf *)v54, *(unsigned int *)v54[0], 1);
    atomic_store(0, v39);
    do
    {
      BOOL v42 = __ldaxr(v12);
      unsigned int v43 = v42 - 1;
    }

    while (__stlxr(v43, v12));
    if (gCheckGLErrors) {
      uint64_t v44 = v43 < 1;
    }
    else {
      uint64_t v44 = 1;
    }
    if (!v44) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    goto LABEL_56;
  }

  do
    id v45 = __ldaxr(v12);
  while (__stlxr(v45 - 1, v12));
  [(id)DYGetGLGuestAppClient(v17) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, GPUTools::GL *, const int *))(*(void *)(v11 + 24) + 7808LL))(a1, a2, a3);
LABEL_56:
  if (v54[0]) {
    free(v54[0]);
  }
}

    id v30 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v25), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v30) {
      id v30 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v52, v31);
    }
    unsigned int v33 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v33) {
      id v30 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v52, v33, v32);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v30), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v52);
    }
    unsigned int v34 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v52);
    uint64_t v35 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v35 && gBreakOnError)
    {
      uint64_t v48 = 3LL;
      uint64_t v49 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v24 & 2) == 0) {
        goto LABEL_43;
      }
      uint64_t v48 = 2LL;
      uint64_t v49 = 188LL;
    }

    breakpoint_break((uint64_t)v52, (volatile int *)v49, v48, v35, v13);
LABEL_43:
    signed int v36 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v34) defaultFbufStream];
    BOOL v37 = (unsigned int *)((char *)v36 + 56);
    do
      unsigned int v38 = __ldaxr(v37);
    while (__stlxr(1u, v37));
    if (v38 == 1)
    {
      do
      {
        while (*v37 == 1)
          ;
        do
          unsigned int v39 = __ldaxr(v37);
        while (__stlxr(1u, v37));
      }

      while (v39 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v36, (GPUTools::FB::Fbuf *)v52, *(unsigned int *)v52[0], 1);
    atomic_store(0, v37);
    do
    {
      unsigned int v40 = __ldaxr(v14);
      signed int v41 = v40 - 1;
    }

    while (__stlxr(v41, v14));
    if (gCheckGLErrors) {
      BOOL v42 = v41 < 1;
    }
    else {
      BOOL v42 = 1;
    }
    if (!v42) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    goto LABEL_56;
  }

  do
    unsigned int v43 = __ldaxr(v14);
  while (__stlxr(v43 - 1, v14));
  [(id)DYGetGLGuestAppClient(v22) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, float))(*(void *)(v13 + 24) + 728LL))(a1, a2, a3);
LABEL_56:
  if (v52[0]) {
    free(v52[0]);
  }
}

    unsigned int v32 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v32) {
      unsigned int v32 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v54, v33);
    }
    uint64_t v35 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v35) {
      unsigned int v32 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v54, v35, v34);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)v54);
    }
    signed int v36 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)v54);
    BOOL v37 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v37 && gBreakOnError)
    {
      uint64_t v50 = 3LL;
      unsigned int v51 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v26 & 2) == 0) {
        goto LABEL_43;
      }
      uint64_t v50 = 2LL;
      unsigned int v51 = 189LL;
    }

    breakpoint_break((uint64_t)v54, (volatile int *)v51, v50, v37, v11);
LABEL_43:
    unsigned int v38 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v36) defaultFbufStream];
    unsigned int v39 = (unsigned int *)((char *)v38 + 56);
    do
      unsigned int v40 = __ldaxr(v39);
    while (__stlxr(1u, v39));
    if (v40 == 1)
    {
      do
      {
        while (*v39 == 1)
          ;
        do
          signed int v41 = __ldaxr(v39);
        while (__stlxr(1u, v39));
      }

      while (v41 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v38, (GPUTools::FB::Fbuf *)v54, *(unsigned int *)v54[0], 1);
    atomic_store(0, v39);
    do
    {
      BOOL v42 = __ldaxr(v12);
      unsigned int v43 = v42 - 1;
    }

    while (__stlxr(v43, v12));
    if (gCheckGLErrors) {
      uint64_t v44 = v43 < 1;
    }
    else {
      uint64_t v44 = 1;
    }
    if (!v44) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    goto LABEL_56;
  }

  do
    id v45 = __ldaxr(v12);
  while (__stlxr(v45 - 1, v12));
  [(id)DYGetGLGuestAppClient(v17) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, GPUTools::GL *, const float *))(*(void *)(v11 + 24) + 736LL))(a1, a2, a3);
LABEL_56:
  if (v54[0]) {
    free(v54[0]);
  }
}

    unsigned int v46 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v41), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v46) {
      unsigned int v46 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v72, v47);
    }
    uint64_t v49 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v20 + 3404);
    if ((_DWORD)v49) {
      unsigned int v46 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v72, v49, v48);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v46), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v20, (uint64_t)v72);
    }
    uint64_t v50 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v20 + 3480),  (GPUTools::FB::Fbuf *)(v20 + 3520),  (GPUTools::FB *)v72);
    unsigned int v51 = *(unsigned int *)(v20 + 3404);
    if ((_DWORD)v51 && gBreakOnError)
    {
      unsigned int v64 = 3LL;
      int v65 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v68 & 2) == 0) {
        goto LABEL_43;
      }
      unsigned int v64 = 2LL;
      int v65 = 498LL;
    }

    breakpoint_break((uint64_t)v72, (volatile int *)v65, v64, v51, v20);
LABEL_43:
    uint64_t v52 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v50) defaultFbufStream];
    int v53 = (unsigned int *)((char *)v52 + 56);
    do
      unsigned int v54 = __ldaxr(v53);
    while (__stlxr(1u, v53));
    if (v54 == 1)
    {
      do
      {
        while (*v53 == 1)
          ;
        do
          uint64_t v55 = __ldaxr(v53);
        while (__stlxr(1u, v53));
      }

      while (v55 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v52, (GPUTools::FB::Fbuf *)v72, *(unsigned int *)v72[0], 1);
    atomic_store(0, v53);
    do
    {
      unsigned int v56 = __ldaxr(v21);
      unsigned int v57 = v56 - 1;
    }

    while (__stlxr(v57, v21));
    if (gCheckGLErrors) {
      unsigned int v58 = v57 < 1;
    }
    else {
      unsigned int v58 = 1;
    }
    if (!v58) {
      handle_opengl_thread_conflict((const void **)v20);
    }
    goto LABEL_56;
  }

  do
    signed int v59 = __ldaxr(v21);
  while (__stlxr(v59 - 1, v21));
  [(id)DYGetGLGuestAppClient(v25) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void *))(*(void *)(v20 + 24) + 1896LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);
LABEL_56:
  if (v72[0]) {
    free(v72[0]);
  }
}

    id v30 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v25), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v30) {
      id v30 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v52, v31);
    }
    unsigned int v33 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v13 + 3404);
    if ((_DWORD)v33) {
      id v30 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v52, v33, v32);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v30), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v13, (uint64_t)v52);
    }
    unsigned int v34 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v13 + 3480),  (GPUTools::FB::Fbuf *)(v13 + 3520),  (GPUTools::FB *)v52);
    uint64_t v35 = *(unsigned int *)(v13 + 3404);
    if ((_DWORD)v35 && gBreakOnError)
    {
      uint64_t v48 = 3LL;
      uint64_t v49 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v24 & 2) == 0) {
        goto LABEL_43;
      }
      uint64_t v48 = 2LL;
      uint64_t v49 = 777LL;
    }

    breakpoint_break((uint64_t)v52, (volatile int *)v49, v48, v35, v13);
LABEL_43:
    signed int v36 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v34) defaultFbufStream];
    BOOL v37 = (unsigned int *)((char *)v36 + 56);
    do
      unsigned int v38 = __ldaxr(v37);
    while (__stlxr(1u, v37));
    if (v38 == 1)
    {
      do
      {
        while (*v37 == 1)
          ;
        do
          unsigned int v39 = __ldaxr(v37);
        while (__stlxr(1u, v37));
      }

      while (v39 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v36, (GPUTools::FB::Fbuf *)v52, *(unsigned int *)v52[0], 1);
    atomic_store(0, v37);
    do
    {
      unsigned int v40 = __ldaxr(v14);
      signed int v41 = v40 - 1;
    }

    while (__stlxr(v41, v14));
    if (gCheckGLErrors) {
      BOOL v42 = v41 < 1;
    }
    else {
      BOOL v42 = 1;
    }
    if (!v42) {
      handle_opengl_thread_conflict((const void **)v13);
    }
    goto LABEL_56;
  }

  do
    unsigned int v43 = __ldaxr(v14);
  while (__stlxr(v43 - 1, v14));
  [(id)DYGetGLGuestAppClient(v22) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, uint64_t, uint64_t))(*(void *)(v13 + 24) + 7800LL))(a1, a2, a3);
LABEL_56:
  if (v52[0]) {
    free(v52[0]);
  }
}

    unsigned int v32 = objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v27), "activeCaptureDescriptor"),  "includeBacktraceInFbufs");
    if ((_DWORD)v32) {
      unsigned int v32 = (id)GPUTools::FB::EncodeCurrentBacktrace((GPUTools::FB *)v54, v33);
    }
    uint64_t v35 = (GPUTools::FB::Fbuf *)*(unsigned int *)(v11 + 3404);
    if ((_DWORD)v35) {
      unsigned int v32 = (id)GPUTools::FB::EncodeGLError((GPUTools::FB *)v54, v35, v34);
    }
    if (objc_msgSend( objc_msgSend((id)DYGetGLGuestAppClient(v32), "activeCaptureDescriptor"),  "queryDriverEventsOnGraphicsCommands")) {
      encode_driver_events((id *)v11, (uint64_t)v54);
    }
    signed int v36 = GPUTools::FB::EncodeThreadQueueInfo( (void *)(v11 + 3480),  (GPUTools::FB::Fbuf *)(v11 + 3520),  (GPUTools::FB *)v54);
    BOOL v37 = *(unsigned int *)(v11 + 3404);
    if ((_DWORD)v37 && gBreakOnError)
    {
      uint64_t v50 = 3LL;
      unsigned int v51 = 0xFFFFFFFFLL;
    }

    else
    {
      if ((v26 & 2) == 0) {
        goto LABEL_43;
      }
      uint64_t v50 = 2LL;
      unsigned int v51 = 778LL;
    }

    breakpoint_break((uint64_t)v54, (volatile int *)v51, v50, v37, v11);
LABEL_43:
    unsigned int v38 = (GPUTools::FB::Stream *)[(id)DYGetGLGuestAppClient(v36) defaultFbufStream];
    unsigned int v39 = (unsigned int *)((char *)v38 + 56);
    do
      unsigned int v40 = __ldaxr(v39);
    while (__stlxr(1u, v39));
    if (v40 == 1)
    {
      do
      {
        while (*v39 == 1)
          ;
        do
          signed int v41 = __ldaxr(v39);
        while (__stlxr(1u, v39));
      }

      while (v41 == 1);
    }

    GPUTools::FB::Stream::Write_nolock(v38, (GPUTools::FB::Fbuf *)v54, *(unsigned int *)v54[0], 1);
    atomic_store(0, v39);
    do
    {
      BOOL v42 = __ldaxr(v12);
      unsigned int v43 = v42 - 1;
    }

    while (__stlxr(v43, v12));
    if (gCheckGLErrors) {
      uint64_t v44 = v43 < 1;
    }
    else {
      uint64_t v44 = 1;
    }
    if (!v44) {
      handle_opengl_thread_conflict((const void **)v11);
    }
    goto LABEL_56;
  }

  do
    id v45 = __ldaxr(v12);
  while (__stlxr(v45 - 1, v12));
  [(id)DYGetGLGuestAppClient(v17) triggerArmedCapture];
  (*(void (**)(__GLIContextRec *, GPUTools::GL *, const int *))(*(void *)(v11 + 24) + 7808LL))(a1, a2, a3);
LABEL_56:
  if (v54[0]) {
    free(v54[0]);
  }
}

void sub_28E04( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  if (a12) {
    free(a12);
  }
  _Unwind_Resume(exception_object);
}

void fogfv(__GLIContextRec *a1, GPUTools::GL *a2, const float *a3)
{
  unint64_t v6 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v6) {
    goto LABEL_12;
  }
  uint64_t v7 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v8 = v6[4];
    BOOL v9 = v8 >= (unint64_t)a1;
    else {
      unint64_t v10 = v6 + 1;
    }
    if (v9) {
      uint64_t v7 = (uint64_t)v6;
    }
    unint64_t v6 = (void *)*v10;
  }

  while (*v10);
  if (v7 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v7 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v7 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v11 = *(void *)(v7 + 40);
  id v12 = (unsigned int *)(v11 + 4640);
  do
  {
    unsigned int v13 = __ldaxr(v12);
    signed int v14 = v13 + 1;
  }

  while (__stlxr(v14, v12));
  if (gCheckGLErrors) {
    BOOL v15 = v14 <= 1;
  }
  else {
    BOOL v15 = 1;
  }
  if (v15)
  {
    id v47 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v46 = handle_opengl_thread_conflict((const void **)v11);
    id v47 = [(id)DYGetGLGuestAppClient(v46) waitOnGraphicsSemaphoreAssertions];
    if ((int)v47 >= 1)
    {
      do
LABEL_62:
        unsigned int v48 = __ldaxr(v12);
      while (__stlxr(v48 - 1, v12));
      uint64_t v49 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v47) graphicsLockWaitQueue];
      dispatch_sync_f(v49, 0LL, (dispatch_function_t)do_nothing);
      (*(void (**)(__GLIContextRec *, GPUTools::GL *, const float *))(*(void *)(v11 + 24) + 736LL))( a1,  a2,  a3);
      return;
    }
  }

  *(_BYTE *)(v11 + 483_Block_object_dispose(va, 8) = 1;
  v54[0] = 0LL;
  v54[1] = 0LL;
  int v55 = 0;
  if ([(id)DYGetGLGuestAppClient(v47) state] != (char *)&dword_0 + 1
    || (id v17 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand], !(_DWORD)v17))
  {
    int v18 = GPUTools::GL::dy_fog_param_component_count(a2, v16);
    snprintf((char *)(v11 + 4709), 0x40uLL, "Ce@%d", v18);
    if ((_DWORD)a2 == 33872 || (_DWORD)a2 == 2917) {
      uint64_t v20 = "n";
    }
    else {
      uint64_t v20 = "f";
    }
    strlcat((char *)(v11 + 4709), v20, 0x40uLL);
    GPUTools::FB::Encode((uint64_t)v54, 189LL, 0LL, v11 + 4709, v21, v22, v23, v24, *(void *)v11);
    char v26 = byte_206F15;
    if ((byte_206F15 & 1) != 0) {
      breakpoint_break((uint64_t)v54, (volatile int *)&stru_B8.sectname[5], 1LL, *(unsigned int *)(v11 + 3404), v11);
    }
    uint64_t v27 = (uint64_t)[(id)DYGetGLGuestAppClient(v25) overrideFlags];
    if (!(v27 & 0x10 | v26 & 4))
    {
      uint64_t v28 = mach_absolute_time();
      (*(void (**)(__GLIContextRec *, GPUTools::GL *, const float *))(*(void *)(v11 + 32) + 736LL))( a1,  a2,  a3);
      uint64_t v27 = mach_absolute_time();
      uint64_t v29 = v27 - v28;
      unint64_t v30 = g_DYTimebaseInfo;
      if (g_DYTimebaseInfo == *((_DWORD *)&g_DYTimebaseInfo + 1))
      {
        uint64_t v31 = v54[0];
        *((void *)v54[0] + 2) = v28;
        v31[3] = v29;
        if (!gCheckGLErrors) {
          goto LABEL_34;
        }
      }

      else
      {
        uint64_t v52 = __udivti3(g_DYTimebaseInfo * v29, (g_DYTimebaseInfo * (unsigned __int128)v29) >> 64);
        int v53 = v54[0];
        *((void *)v54[0] + 3) = v52;
        uint64_t v27 = __udivti3(v30 * v28, (v30 * (unsigned __int128)v28) >> 64);
        v53[2] = v27;
        if (!gCheckGLErrors) {
          goto LABEL_34;
        }
      }

      uint64_t v27 = check_errors(v11);
    }

{
  void *v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  void *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  signed int v14;
  BOOL v15;
  unsigned int v16;
  id v17;
  int v18;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  id v32;
  GPUTools::FB::Fbuf *v33;
  unsigned int v34;
  GPUTools::FB::Fbuf *v35;
  dispatch_queue_s *v36;
  uint64_t v37;
  GPUTools::FB::Stream *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  signed int v43;
  BOOL v44;
  unsigned int v45;
  uint64_t v46;
  id v47;
  unsigned int v48;
  dispatch_queue_s *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54[2];
  int v55;
  unint64_t v6 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v6) {
    goto LABEL_12;
  }
  uint64_t v7 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v8 = v6[4];
    BOOL v9 = v8 >= (unint64_t)a1;
    else {
      unint64_t v10 = v6 + 1;
    }
    if (v9) {
      uint64_t v7 = (uint64_t)v6;
    }
    unint64_t v6 = (void *)*v10;
  }

  while (*v10);
  if (v7 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v7 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v7 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v11 = *(void *)(v7 + 40);
  id v12 = (unsigned int *)(v11 + 4640);
  do
  {
    unsigned int v13 = __ldaxr(v12);
    signed int v14 = v13 + 1;
  }

  while (__stlxr(v14, v12));
  if (gCheckGLErrors) {
    BOOL v15 = v14 <= 1;
  }
  else {
    BOOL v15 = 1;
  }
  if (v15)
  {
    id v47 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v46 = handle_opengl_thread_conflict((const void **)v11);
    id v47 = [(id)DYGetGLGuestAppClient(v46) waitOnGraphicsSemaphoreAssertions];
    if ((int)v47 >= 1)
    {
      do
LABEL_62:
        unsigned int v48 = __ldaxr(v12);
      while (__stlxr(v48 - 1, v12));
      uint64_t v49 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v47) graphicsLockWaitQueue];
      dispatch_sync_f(v49, 0LL, (dispatch_function_t)do_nothing);
      (*(void (**)(__GLIContextRec *, GPUTools::GL *, const float *))(*(void *)(v11 + 24) + 736LL))( a1,  a2,  a3);
      return;
    }
  }

  *(_BYTE *)(v11 + 483_Block_object_dispose(va, 8) = 1;
  v54[0] = 0LL;
  v54[1] = 0LL;
  int v55 = 0;
  if ([(id)DYGetGLGuestAppClient(v47) state] != (char *)&dword_0 + 1
    || (id v17 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand], !(_DWORD)v17))
  {
    int v18 = GPUTools::GL::dy_fog_param_component_count(a2, v16);
    snprintf((char *)(v11 + 4709), 0x40uLL, "Ce@%d", v18);
    if ((_DWORD)a2 == 33872 || (_DWORD)a2 == 2917) {
      uint64_t v20 = "n";
    }
    else {
      uint64_t v20 = "f";
    }
    strlcat((char *)(v11 + 4709), v20, 0x40uLL);
    GPUTools::FB::Encode((uint64_t)v54, 189LL, 0LL, v11 + 4709, v21, v22, v23, v24, *(void *)v11);
    char v26 = byte_206F15;
    if ((byte_206F15 & 1) != 0) {
      breakpoint_break((uint64_t)v54, (volatile int *)&stru_B8.sectname[5], 1LL, *(unsigned int *)(v11 + 3404), v11);
    }
    uint64_t v27 = (uint64_t)[(id)DYGetGLGuestAppClient(v25) overrideFlags];
    if (!(v27 & 0x10 | v26 & 4))
    {
      uint64_t v28 = mach_absolute_time();
      (*(void (**)(__GLIContextRec *, GPUTools::GL *, const float *))(*(void *)(v11 + 32) + 736LL))( a1,  a2,  a3);
      uint64_t v27 = mach_absolute_time();
      uint64_t v29 = v27 - v28;
      unint64_t v30 = g_DYTimebaseInfo;
      if (g_DYTimebaseInfo == *((_DWORD *)&g_DYTimebaseInfo + 1))
      {
        uint64_t v31 = v54[0];
        *((void *)v54[0] + 2) = v28;
        v31[3] = v29;
        if (!gCheckGLErrors) {
          goto LABEL_34;
        }
      }

      else
      {
        uint64_t v52 = __udivti3(g_DYTimebaseInfo * v29, (g_DYTimebaseInfo * (unsigned __int128)v29) >> 64);
        int v53 = v54[0];
        *((void *)v54[0] + 3) = v52;
        uint64_t v27 = __udivti3(v30 * v28, (v30 * (unsigned __int128)v28) >> 64);
        v53[2] = v27;
        if (!gCheckGLErrors) {
          goto LABEL_34;
        }
      }

      uint64_t v27 = check_errors(v11);
    }

void sub_29268( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  if (a12) {
    free(a12);
  }
  _Unwind_Resume(exception_object);
}

void front_face(__GLIContextRec *a1, uint64_t a2)
{
  unint64_t v4 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v4) {
    goto LABEL_12;
  }
  uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v6 = v4[4];
    BOOL v7 = v6 >= (unint64_t)a1;
    else {
      unint64_t v8 = v4 + 1;
    }
    if (v7) {
      uint64_t v5 = (uint64_t)v4;
    }
    unint64_t v4 = (void *)*v8;
  }

  while (*v8);
  if (v5 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v5 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v9 = *(void *)(v5 + 40);
  unint64_t v10 = (unsigned int *)(v9 + 4640);
  do
  {
    unsigned int v11 = __ldaxr(v10);
    signed int v12 = v11 + 1;
  }

  while (__stlxr(v12, v10));
  if (gCheckGLErrors) {
    BOOL v13 = v12 <= 1;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13)
  {
    id v42 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v41 = handle_opengl_thread_conflict((const void **)v9);
    id v42 = [(id)DYGetGLGuestAppClient(v41) waitOnGraphicsSemaphoreAssertions];
    if ((int)v42 >= 1)
    {
      do
LABEL_57:
        unsigned int v43 = __ldaxr(v10);
      while (__stlxr(v43 - 1, v10));
      BOOL v44 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v42) graphicsLockWaitQueue];
      dispatch_sync_f(v44, 0LL, (dispatch_function_t)do_nothing);
      (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 760LL))(a1, a2);
      return;
    }
  }

  *(_BYTE *)(v9 + 483_Block_object_dispose(va, 8) = 1;
  uint64_t v51 = 0LL;
  uint64_t v52 = 0LL;
  unsigned int v53 = 0;
  if ([(id)DYGetGLGuestAppClient(v42) state] != (char *)&dword_0 + 1
    || (id v14 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand], !(_DWORD)v14))
  {
    unsigned int v16 = (char *)v51;
    BOOL v15 = v52;
    int64_t v17 = v52 - (_BYTE *)v51;
    unsigned int v18 = v53;
    unint64_t v19 = v53 - (v52 - (_BYTE *)v51);
    if (v19 > 0x33) {
      goto LABEL_24;
    }
    int v45 = (307 - v19) & 0xFFFFFF00;
    v53 += v45;
    unsigned int v16 = (char *)malloc(v45 + v18);
    uint64_t v51 = v16;
    if (v16)
    {
      if ((v16 & 3) == 0)
      {
        BOOL v15 = &v16[v17];
LABEL_24:
        *((_DWORD *)v15 + 12) = 0;
        *((_OWORD *)v15 + 1) = 0u;
        *((_OWORD *)v15 + 2) = 0u;
        *(_OWORD *)BOOL v15 = 0u;
        uint64_t v52 = v15 + 52;
        GPUTools::FB::Fbuf::align((char **)&v51);
        *((_DWORD *)v16 + 1) = 199;
        *((_DWORD *)v16 + _Block_object_dispose(va, 8) = 0;
        __uint64_t v50 = 0LL;
        uint64_t v20 = pthread_threadid_np(0LL, &v50);
        *((void *)v16 + 1) = v50;
        strcpy(v16 + 36, "Ce");
        *((void *)v16 + 5) = *(void *)v9;
        *((_DWORD *)v16 + 12) = a2;
        char v21 = byte_206F1F;
        if ((byte_206F1F & 1) != 0) {
          breakpoint_break((uint64_t)&v51, (volatile int *)&stru_B8.sectname[15], 1LL, *(unsigned int *)(v9 + 3404), v9);
        }
        uint64_t v22 = (uint64_t)[(id)DYGetGLGuestAppClient(v20) overrideFlags];
        if (!(v22 & 0x10 | v21 & 4))
        {
          uint64_t v23 = mach_absolute_time();
          (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 32) + 760LL))(a1, a2);
          uint64_t v22 = mach_absolute_time();
          uint64_t v24 = v22 - v23;
          unint64_t v25 = g_DYTimebaseInfo;
          if (g_DYTimebaseInfo == *((_DWORD *)&g_DYTimebaseInfo + 1))
          {
            char v26 = v51;
            *((void *)v51 + 2) = v23;
            v26[3] = v24;
            if (!gCheckGLErrors) {
              goto LABEL_29;
            }
          }

          else
          {
            uint64_t v48 = __udivti3(g_DYTimebaseInfo * v24, (g_DYTimebaseInfo * (unsigned __int128)v24) >> 64);
            uint64_t v49 = v51;
            *((void *)v51 + 3) = v48;
            uint64_t v22 = __udivti3(v25 * v23, (v25 * (unsigned __int128)v23) >> 64);
            v49[2] = v22;
            if (!gCheckGLErrors) {
              goto LABEL_29;
            }
          }

          uint64_t v22 = check_errors(v9);
        }

{
  void *v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  void *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  signed int v12;
  BOOL v13;
  id v14;
  char *v15;
  char *v16;
  int64_t v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  id v27;
  GPUTools::FB::Fbuf *v28;
  unsigned int v29;
  GPUTools::FB::Fbuf *v30;
  dispatch_queue_s *v31;
  uint64_t v32;
  GPUTools::FB::Stream *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  signed int v38;
  BOOL v39;
  unsigned int v40;
  uint64_t v41;
  id v42;
  unsigned int v43;
  dispatch_queue_s *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  __uint64_t v50;
  void *v51;
  char *v52;
  unsigned int v53;
  unint64_t v4 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v4) {
    goto LABEL_12;
  }
  uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v6 = v4[4];
    BOOL v7 = v6 >= (unint64_t)a1;
    else {
      unint64_t v8 = v4 + 1;
    }
    if (v7) {
      uint64_t v5 = (uint64_t)v4;
    }
    unint64_t v4 = (void *)*v8;
  }

  while (*v8);
  if (v5 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v5 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v9 = *(void *)(v5 + 40);
  unint64_t v10 = (unsigned int *)(v9 + 4640);
  do
  {
    unsigned int v11 = __ldaxr(v10);
    signed int v12 = v11 + 1;
  }

  while (__stlxr(v12, v10));
  if (gCheckGLErrors) {
    BOOL v13 = v12 <= 1;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13)
  {
    id v42 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v41 = handle_opengl_thread_conflict((const void **)v9);
    id v42 = [(id)DYGetGLGuestAppClient(v41) waitOnGraphicsSemaphoreAssertions];
    if ((int)v42 >= 1)
    {
      do
LABEL_57:
        unsigned int v43 = __ldaxr(v10);
      while (__stlxr(v43 - 1, v10));
      BOOL v44 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v42) graphicsLockWaitQueue];
      dispatch_sync_f(v44, 0LL, (dispatch_function_t)do_nothing);
      (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 760LL))(a1, a2);
      return;
    }
  }

  *(_BYTE *)(v9 + 483_Block_object_dispose(va, 8) = 1;
  uint64_t v51 = 0LL;
  uint64_t v52 = 0LL;
  unsigned int v53 = 0;
  if ([(id)DYGetGLGuestAppClient(v42) state] != (char *)&dword_0 + 1
    || (id v14 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand], !(_DWORD)v14))
  {
    unsigned int v16 = (char *)v51;
    BOOL v15 = v52;
    int64_t v17 = v52 - (_BYTE *)v51;
    unsigned int v18 = v53;
    unint64_t v19 = v53 - (v52 - (_BYTE *)v51);
    if (v19 > 0x33) {
      goto LABEL_24;
    }
    int v45 = (307 - v19) & 0xFFFFFF00;
    v53 += v45;
    unsigned int v16 = (char *)malloc(v45 + v18);
    uint64_t v51 = v16;
    if (v16)
    {
      if ((v16 & 3) == 0)
      {
        BOOL v15 = &v16[v17];
LABEL_24:
        *((_DWORD *)v15 + 12) = 0;
        *((_OWORD *)v15 + 1) = 0u;
        *((_OWORD *)v15 + 2) = 0u;
        *(_OWORD *)BOOL v15 = 0u;
        uint64_t v52 = v15 + 52;
        GPUTools::FB::Fbuf::align((char **)&v51);
        *((_DWORD *)v16 + 1) = 199;
        *((_DWORD *)v16 + _Block_object_dispose(va, 8) = 0;
        __uint64_t v50 = 0LL;
        uint64_t v20 = pthread_threadid_np(0LL, &v50);
        *((void *)v16 + 1) = v50;
        strcpy(v16 + 36, "Ce");
        *((void *)v16 + 5) = *(void *)v9;
        *((_DWORD *)v16 + 12) = a2;
        char v21 = byte_206F1F;
        if ((byte_206F1F & 1) != 0) {
          breakpoint_break((uint64_t)&v51, (volatile int *)&stru_B8.sectname[15], 1LL, *(unsigned int *)(v9 + 3404), v9);
        }
        uint64_t v22 = (uint64_t)[(id)DYGetGLGuestAppClient(v20) overrideFlags];
        if (!(v22 & 0x10 | v21 & 4))
        {
          uint64_t v23 = mach_absolute_time();
          (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 32) + 760LL))(a1, a2);
          uint64_t v22 = mach_absolute_time();
          uint64_t v24 = v22 - v23;
          unint64_t v25 = g_DYTimebaseInfo;
          if (g_DYTimebaseInfo == *((_DWORD *)&g_DYTimebaseInfo + 1))
          {
            char v26 = v51;
            *((void *)v51 + 2) = v23;
            v26[3] = v24;
            if (!gCheckGLErrors) {
              goto LABEL_29;
            }
          }

          else
          {
            uint64_t v48 = __udivti3(g_DYTimebaseInfo * v24, (g_DYTimebaseInfo * (unsigned __int128)v24) >> 64);
            uint64_t v49 = v51;
            *((void *)v51 + 3) = v48;
            uint64_t v22 = __udivti3(v25 * v23, (v25 * (unsigned __int128)v23) >> 64);
            v49[2] = v22;
            if (!gCheckGLErrors) {
              goto LABEL_29;
            }
          }

          uint64_t v22 = check_errors(v9);
        }

{
  void *v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  void *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  signed int v12;
  BOOL v13;
  id v14;
  unsigned int v15;
  signed int v16;
  BOOL v17;
  unsigned int v18;
  uint64_t v19;
  id v20;
  unsigned int v21;
  dispatch_queue_s *v22;
  uint64_t v23;
  unint64_t v4 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v4) {
    goto LABEL_12;
  }
  uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v6 = v4[4];
    BOOL v7 = v6 >= (unint64_t)a1;
    else {
      unint64_t v8 = v4 + 1;
    }
    if (v7) {
      uint64_t v5 = (uint64_t)v4;
    }
    unint64_t v4 = (void *)*v8;
  }

  while (*v8);
  if (v5 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v5 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v9 = *(void *)(v5 + 40);
  unint64_t v10 = (unsigned int *)(v9 + 4640);
  do
  {
    unsigned int v11 = __ldaxr(v10);
    signed int v12 = v11 + 1;
  }

  while (__stlxr(v12, v10));
  if (gCheckGLErrors) {
    BOOL v13 = v12 <= 1;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13)
  {
    uint64_t v20 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    unint64_t v19 = handle_opengl_thread_conflict((const void **)v9);
    uint64_t v20 = [(id)DYGetGLGuestAppClient(v19) waitOnGraphicsSemaphoreAssertions];
    if ((int)v20 >= 1)
    {
      do
LABEL_34:
        char v21 = __ldaxr(v10);
      while (__stlxr(v21 - 1, v10));
      uint64_t v22 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v20) graphicsLockWaitQueue];
      dispatch_sync_f(v22, 0LL, (dispatch_function_t)do_nothing);
LABEL_36:
      (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 760LL))(a1, a2);
      return;
    }
  }

  *(_BYTE *)(v9 + 483_Block_object_dispose(va, 8) = 1;
  if ([(id)DYGetGLGuestAppClient(v20) state] == (char *)&dword_0 + 1)
  {
    id v14 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand];
    if ((_DWORD)v14)
    {
      do
        unsigned int v18 = __ldaxr(v10);
      while (__stlxr(v18 - 1, v10));
      [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
      goto LABEL_36;
    }
  }

  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 32) + 760LL))(a1, a2);
  ++*(void *)(v9 + 3704);
  if (gCheckGLErrors)
  {
    check_errors(v9);
    if (gBreakOnError)
    {
      uint64_t v23 = *(unsigned int *)(v9 + 3404);
      if ((_DWORD)v23) {
        breakpoint_break(0LL, (volatile int *)0xFFFFFFFFLL, 3LL, v23, v9);
      }
    }
  }

  do
  {
    BOOL v15 = __ldaxr(v10);
    unsigned int v16 = v15 - 1;
  }

  while (__stlxr(v16, v10));
  if (gCheckGLErrors) {
    int64_t v17 = v16 < 1;
  }
  else {
    int64_t v17 = 1;
  }
  if (!v17) {
    handle_opengl_thread_conflict((const void **)v9);
  }
}

{
  void *v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  void *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  signed int v12;
  BOOL v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  int64x2_t v17;
  unsigned int v18;
  signed int v19;
  BOOL v20;
  unsigned int v21;
  uint64_t v22;
  id v23;
  unsigned int v24;
  dispatch_queue_s *v25;
  uint64_t v26;
  unint64_t v4 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v4) {
    goto LABEL_12;
  }
  uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v6 = v4[4];
    BOOL v7 = v6 >= (unint64_t)a1;
    else {
      unint64_t v8 = v4 + 1;
    }
    if (v7) {
      uint64_t v5 = (uint64_t)v4;
    }
    unint64_t v4 = (void *)*v8;
  }

  while (*v8);
  if (v5 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v5 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v5 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v9 = *(void *)(v5 + 40);
  unint64_t v10 = (unsigned int *)(v9 + 4640);
  do
  {
    unsigned int v11 = __ldaxr(v10);
    signed int v12 = v11 + 1;
  }

  while (__stlxr(v12, v10));
  if (gCheckGLErrors) {
    BOOL v13 = v12 <= 1;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13)
  {
    uint64_t v23 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v22 = handle_opengl_thread_conflict((const void **)v9);
    uint64_t v23 = [(id)DYGetGLGuestAppClient(v22) waitOnGraphicsSemaphoreAssertions];
    if ((int)v23 >= 1)
    {
      do
LABEL_34:
        uint64_t v24 = __ldaxr(v10);
      while (__stlxr(v24 - 1, v10));
      unint64_t v25 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v23) graphicsLockWaitQueue];
      dispatch_sync_f(v25, 0LL, (dispatch_function_t)do_nothing);
LABEL_36:
      (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 24) + 760LL))(a1, a2);
      return;
    }
  }

  *(_BYTE *)(v9 + 483_Block_object_dispose(va, 8) = 1;
  if ([(id)DYGetGLGuestAppClient(v23) state] == (char *)&dword_0 + 1)
  {
    id v14 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand];
    if ((_DWORD)v14)
    {
      do
        char v21 = __ldaxr(v10);
      while (__stlxr(v21 - 1, v10));
      [(id)DYGetGLGuestAppClient(v14) triggerArmedCapture];
      goto LABEL_36;
    }
  }

  BOOL v15 = mach_absolute_time();
  (*(void (**)(__GLIContextRec *, uint64_t))(*(void *)(v9 + 32) + 760LL))(a1, a2);
  unsigned int v16 = mach_absolute_time();
  int64_t v17 = vdupq_n_s64(1uLL);
  v17.i64[0] = v16 - v15;
  *(int64x2_t *)(v9 + 3696) = vaddq_s64(v17, *(int64x2_t *)(v9 + 3696));
  if (gCheckGLErrors)
  {
    check_errors(v9);
    if (gBreakOnError)
    {
      char v26 = *(unsigned int *)(v9 + 3404);
      if ((_DWORD)v26) {
        breakpoint_break(0LL, (volatile int *)0xFFFFFFFFLL, 3LL, v26, v9);
      }
    }
  }

  do
  {
    unsigned int v18 = __ldaxr(v10);
    unint64_t v19 = v18 - 1;
  }

  while (__stlxr(v19, v10));
  if (gCheckGLErrors) {
    uint64_t v20 = v19 < 1;
  }
  else {
    uint64_t v20 = 1;
  }
  if (!v20) {
    handle_opengl_thread_conflict((const void **)v9);
  }
}

void sub_2972C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  if (a12) {
    free(a12);
  }
  _Unwind_Resume(exception_object);
}

void gen_textures(__GLIContextRec *a1, uint64_t a2, unsigned int *a3)
{
  unint64_t v6 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v6) {
    goto LABEL_12;
  }
  uint64_t v7 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v8 = v6[4];
    BOOL v9 = v8 >= (unint64_t)a1;
    else {
      unint64_t v10 = v6 + 1;
    }
    if (v9) {
      uint64_t v7 = (uint64_t)v6;
    }
    unint64_t v6 = (void *)*v10;
  }

  while (*v10);
  if (v7 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v7 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v7 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v11 = *(void *)(v7 + 40);
  signed int v12 = (unsigned int *)(v11 + 4640);
  do
  {
    unsigned int v13 = __ldaxr(v12);
    signed int v14 = v13 + 1;
  }

  while (__stlxr(v14, v12));
  if (gCheckGLErrors) {
    BOOL v15 = v14 <= 1;
  }
  else {
    BOOL v15 = 1;
  }
  if (v15)
  {
    id v49 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v48 = handle_opengl_thread_conflict((const void **)v11);
    id v49 = [(id)DYGetGLGuestAppClient(v48) waitOnGraphicsSemaphoreAssertions];
    if ((int)v49 >= 1)
    {
      do
LABEL_58:
        unsigned int v50 = __ldaxr(v12);
      while (__stlxr(v50 - 1, v12));
      uint64_t v51 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v49) graphicsLockWaitQueue];
      dispatch_sync_f(v51, 0LL, (dispatch_function_t)do_nothing);
      (*(void (**)(__GLIContextRec *, uint64_t, unsigned int *))(*(void *)(v11 + 24) + 784LL))(a1, a2, a3);
      return;
    }
  }

  *(_BYTE *)(v11 + 483_Block_object_dispose(va, 8) = 1;
  unsigned int v57 = 0LL;
  unsigned int v58 = 0LL;
  unsigned int v59 = 0;
  if ([(id)DYGetGLGuestAppClient(v49) state] != (char *)&dword_0 + 1
    || (id v16 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand], !(_DWORD)v16))
  {
    snprintf((char *)(v11 + 4709), 0x40uLL, "Ci@%dui", a2);
    GPUTools::FB::Encode((uint64_t)&v57, 208LL, v11 + 4709, v17, v18, v19, v20, v21, *(void *)v11);
    char v23 = byte_206F28;
    if ((byte_206F28 & 1) != 0) {
      breakpoint_break((uint64_t)&v57, (volatile int *)&stru_B8.segname[8], 1LL, *(unsigned int *)(v11 + 3404), v11);
    }
    if (!([(id)DYGetGLGuestAppClient(v22) overrideFlags] & 0x10 | v23 & 4))
    {
      uint64_t v28 = mach_absolute_time();
      (*(void (**)(__GLIContextRec *, uint64_t, unsigned int *))(*(void *)(v11 + 32) + 784LL))(a1, a2, a3);
      uint64_t v29 = mach_absolute_time() - v28;
      unint64_t v30 = g_DYTimebaseInfo;
      if (g_DYTimebaseInfo == *((_DWORD *)&g_DYTimebaseInfo + 1))
      {
        uint64_t v31 = v57;
        *((void *)v57 + 2) = v28;
        v31[3] = v29;
        if (!gCheckGLErrors) {
          goto LABEL_28;
        }
      }

      else
      {
        uint64_t v54 = __udivti3(g_DYTimebaseInfo * v29, (g_DYTimebaseInfo * (unsigned __int128)v29) >> 64);
        int v55 = v57;
        *((void *)v57 + 3) = v54;
        v55[2] = __udivti3(v30 * v28, (v30 * (unsigned __int128)v28) >> 64);
        if (!gCheckGLErrors) {
          goto LABEL_28;
        }
      }

      check_errors(v11);
    }

{
  void *v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  void *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  signed int v14;
  BOOL v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  _OWORD *v32;
  uint64_t v33;
  id v34;
  GPUTools::FB::Fbuf *v35;
  unsigned int v36;
  GPUTools::FB::Fbuf *v37;
  dispatch_queue_s *v38;
  uint64_t v39;
  GPUTools::FB::Stream *v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  signed int v45;
  BOOL v46;
  unsigned int v47;
  uint64_t v48;
  id v49;
  unsigned int v50;
  dispatch_queue_s *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  __int128 v56;
  void *v57;
  void *v58;
  unsigned int v59;
  unint64_t v6 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v6) {
    goto LABEL_12;
  }
  uint64_t v7 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v8 = v6[4];
    BOOL v9 = v8 >= (unint64_t)a1;
    else {
      unint64_t v10 = v6 + 1;
    }
    if (v9) {
      uint64_t v7 = (uint64_t)v6;
    }
    unint64_t v6 = (void *)*v10;
  }

  while (*v10);
  if (v7 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v7 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v7 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v11 = *(void *)(v7 + 40);
  signed int v12 = (unsigned int *)(v11 + 4640);
  do
  {
    unsigned int v13 = __ldaxr(v12);
    signed int v14 = v13 + 1;
  }

  while (__stlxr(v14, v12));
  if (gCheckGLErrors) {
    BOOL v15 = v14 <= 1;
  }
  else {
    BOOL v15 = 1;
  }
  if (v15)
  {
    id v49 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v48 = handle_opengl_thread_conflict((const void **)v11);
    id v49 = [(id)DYGetGLGuestAppClient(v48) waitOnGraphicsSemaphoreAssertions];
    if ((int)v49 >= 1)
    {
      do
LABEL_58:
        unsigned int v50 = __ldaxr(v12);
      while (__stlxr(v50 - 1, v12));
      uint64_t v51 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v49) graphicsLockWaitQueue];
      dispatch_sync_f(v51, 0LL, (dispatch_function_t)do_nothing);
      (*(void (**)(__GLIContextRec *, uint64_t, unsigned int *))(*(void *)(v11 + 24) + 784LL))(a1, a2, a3);
      return;
    }
  }

  *(_BYTE *)(v11 + 483_Block_object_dispose(va, 8) = 1;
  unsigned int v57 = 0LL;
  unsigned int v58 = 0LL;
  unsigned int v59 = 0;
  if ([(id)DYGetGLGuestAppClient(v49) state] != (char *)&dword_0 + 1
    || (id v16 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand], !(_DWORD)v16))
  {
    snprintf((char *)(v11 + 4709), 0x40uLL, "Ci@%dui", a2);
    GPUTools::FB::Encode((uint64_t)&v57, 208LL, v11 + 4709, v17, v18, v19, v20, v21, *(void *)v11);
    char v23 = byte_206F28;
    if ((byte_206F28 & 1) != 0) {
      breakpoint_break((uint64_t)&v57, (volatile int *)&stru_B8.segname[8], 1LL, *(unsigned int *)(v11 + 3404), v11);
    }
    if (!([(id)DYGetGLGuestAppClient(v22) overrideFlags] & 0x10 | v23 & 4))
    {
      uint64_t v28 = mach_absolute_time();
      (*(void (**)(__GLIContextRec *, uint64_t, unsigned int *))(*(void *)(v11 + 32) + 784LL))(a1, a2, a3);
      uint64_t v29 = mach_absolute_time() - v28;
      unint64_t v30 = g_DYTimebaseInfo;
      if (g_DYTimebaseInfo == *((_DWORD *)&g_DYTimebaseInfo + 1))
      {
        uint64_t v31 = v57;
        *((void *)v57 + 2) = v28;
        v31[3] = v29;
        if (!gCheckGLErrors) {
          goto LABEL_28;
        }
      }

      else
      {
        uint64_t v54 = __udivti3(g_DYTimebaseInfo * v29, (g_DYTimebaseInfo * (unsigned __int128)v29) >> 64);
        int v55 = v57;
        *((void *)v57 + 3) = v54;
        v55[2] = __udivti3(v30 * v28, (v30 * (unsigned __int128)v28) >> 64);
        if (!gCheckGLErrors) {
          goto LABEL_28;
        }
      }

      check_errors(v11);
    }

{
  void *v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  void *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  signed int v14;
  BOOL v15;
  id v16;
  unsigned int v17;
  signed int v18;
  BOOL v19;
  unsigned int v20;
  uint64_t v21;
  id v22;
  unsigned int v23;
  dispatch_queue_s *v24;
  uint64_t v25;
  unint64_t v6 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v6) {
    goto LABEL_12;
  }
  uint64_t v7 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v8 = v6[4];
    BOOL v9 = v8 >= (unint64_t)a1;
    else {
      unint64_t v10 = v6 + 1;
    }
    if (v9) {
      uint64_t v7 = (uint64_t)v6;
    }
    unint64_t v6 = (void *)*v10;
  }

  while (*v10);
  if (v7 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v7 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v7 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v11 = *(void *)(v7 + 40);
  signed int v12 = (unsigned int *)(v11 + 4640);
  do
  {
    unsigned int v13 = __ldaxr(v12);
    signed int v14 = v13 + 1;
  }

  while (__stlxr(v14, v12));
  if (gCheckGLErrors) {
    BOOL v15 = v14 <= 1;
  }
  else {
    BOOL v15 = 1;
  }
  if (v15)
  {
    uint64_t v22 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v21 = handle_opengl_thread_conflict((const void **)v11);
    uint64_t v22 = [(id)DYGetGLGuestAppClient(v21) waitOnGraphicsSemaphoreAssertions];
    if ((int)v22 >= 1)
    {
      do
LABEL_34:
        char v23 = __ldaxr(v12);
      while (__stlxr(v23 - 1, v12));
      uint64_t v24 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v22) graphicsLockWaitQueue];
      dispatch_sync_f(v24, 0LL, (dispatch_function_t)do_nothing);
LABEL_36:
      (*(void (**)(__GLIContextRec *, uint64_t, unsigned int *))(*(void *)(v11 + 24) + 784LL))(a1, a2, a3);
      return;
    }
  }

  *(_BYTE *)(v11 + 483_Block_object_dispose(va, 8) = 1;
  if ([(id)DYGetGLGuestAppClient(v22) state] == (char *)&dword_0 + 1)
  {
    id v16 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand];
    if ((_DWORD)v16)
    {
      do
        uint64_t v20 = __ldaxr(v12);
      while (__stlxr(v20 - 1, v12));
      [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
      goto LABEL_36;
    }
  }

  (*(void (**)(__GLIContextRec *, uint64_t, unsigned int *))(*(void *)(v11 + 32) + 784LL))(a1, a2, a3);
  ++*(void *)(v11 + 3704);
  if (gCheckGLErrors)
  {
    check_errors(v11);
    if (gBreakOnError)
    {
      uint64_t v25 = *(unsigned int *)(v11 + 3404);
      if ((_DWORD)v25) {
        breakpoint_break(0LL, (volatile int *)0xFFFFFFFFLL, 3LL, v25, v11);
      }
    }
  }

  do
  {
    uint64_t v17 = __ldaxr(v12);
    uint64_t v18 = v17 - 1;
  }

  while (__stlxr(v18, v12));
  if (gCheckGLErrors) {
    uint64_t v19 = v18 < 1;
  }
  else {
    uint64_t v19 = 1;
  }
  if (!v19) {
    handle_opengl_thread_conflict((const void **)v11);
  }
}

{
  void *v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  void *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  signed int v14;
  BOOL v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  int64x2_t v19;
  unsigned int v20;
  signed int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  id v25;
  unsigned int v26;
  dispatch_queue_s *v27;
  uint64_t v28;
  unint64_t v6 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v6) {
    goto LABEL_12;
  }
  uint64_t v7 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v8 = v6[4];
    BOOL v9 = v8 >= (unint64_t)a1;
    else {
      unint64_t v10 = v6 + 1;
    }
    if (v9) {
      uint64_t v7 = (uint64_t)v6;
    }
    unint64_t v6 = (void *)*v10;
  }

  while (*v10);
  if (v7 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v7 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v7 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v11 = *(void *)(v7 + 40);
  signed int v12 = (unsigned int *)(v11 + 4640);
  do
  {
    unsigned int v13 = __ldaxr(v12);
    signed int v14 = v13 + 1;
  }

  while (__stlxr(v14, v12));
  if (gCheckGLErrors) {
    BOOL v15 = v14 <= 1;
  }
  else {
    BOOL v15 = 1;
  }
  if (v15)
  {
    uint64_t v25 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v24 = handle_opengl_thread_conflict((const void **)v11);
    uint64_t v25 = [(id)DYGetGLGuestAppClient(v24) waitOnGraphicsSemaphoreAssertions];
    if ((int)v25 >= 1)
    {
      do
LABEL_34:
        uint64_t v26 = __ldaxr(v12);
      while (__stlxr(v26 - 1, v12));
      uint64_t v27 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v25) graphicsLockWaitQueue];
      dispatch_sync_f(v27, 0LL, (dispatch_function_t)do_nothing);
LABEL_36:
      (*(void (**)(__GLIContextRec *, uint64_t, unsigned int *))(*(void *)(v11 + 24) + 784LL))(a1, a2, a3);
      return;
    }
  }

  *(_BYTE *)(v11 + 483_Block_object_dispose(va, 8) = 1;
  if ([(id)DYGetGLGuestAppClient(v25) state] == (char *)&dword_0 + 1)
  {
    id v16 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand];
    if ((_DWORD)v16)
    {
      do
        char v23 = __ldaxr(v12);
      while (__stlxr(v23 - 1, v12));
      [(id)DYGetGLGuestAppClient(v16) triggerArmedCapture];
      goto LABEL_36;
    }
  }

  uint64_t v17 = mach_absolute_time();
  (*(void (**)(__GLIContextRec *, uint64_t, unsigned int *))(*(void *)(v11 + 32) + 784LL))(a1, a2, a3);
  uint64_t v18 = mach_absolute_time();
  uint64_t v19 = vdupq_n_s64(1uLL);
  v19.i64[0] = v18 - v17;
  *(int64x2_t *)(v11 + 3696) = vaddq_s64(v19, *(int64x2_t *)(v11 + 3696));
  if (gCheckGLErrors)
  {
    check_errors(v11);
    if (gBreakOnError)
    {
      uint64_t v28 = *(unsigned int *)(v11 + 3404);
      if ((_DWORD)v28) {
        breakpoint_break(0LL, (volatile int *)0xFFFFFFFFLL, 3LL, v28, v11);
      }
    }
  }

  do
  {
    uint64_t v20 = __ldaxr(v12);
    uint64_t v21 = v20 - 1;
  }

  while (__stlxr(v21, v12));
  if (gCheckGLErrors) {
    uint64_t v22 = v21 < 1;
  }
  else {
    uint64_t v22 = 1;
  }
  if (!v22) {
    handle_opengl_thread_conflict((const void **)v11);
  }
}

void sub_29BCC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  if (a16) {
    free(a16);
  }
  _Unwind_Resume(exception_object);
}

void get_BOOLeanv(__GLIContextRec *a1, GPUTools::GL *a2, unsigned __int8 *a3)
{
  unint64_t v6 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v6) {
    goto LABEL_12;
  }
  uint64_t v7 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v8 = v6[4];
    BOOL v9 = v8 >= (unint64_t)a1;
    else {
      unint64_t v10 = v6 + 1;
    }
    if (v9) {
      uint64_t v7 = (uint64_t)v6;
    }
    unint64_t v6 = (void *)*v10;
  }

  while (*v10);
  if (v7 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v7 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v7 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v11 = *(void *)(v7 + 40);
  signed int v12 = (unsigned int *)(v11 + 4640);
  do
  {
    unsigned int v13 = __ldaxr(v12);
    signed int v14 = v13 + 1;
  }

  while (__stlxr(v14, v12));
  if (gCheckGLErrors) {
    BOOL v15 = v14 <= 1;
  }
  else {
    BOOL v15 = 1;
  }
  if (v15)
  {
    id v49 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v48 = handle_opengl_thread_conflict((const void **)v11);
    id v49 = [(id)DYGetGLGuestAppClient(v48) waitOnGraphicsSemaphoreAssertions];
    if ((int)v49 >= 1)
    {
      do
LABEL_58:
        unsigned int v50 = __ldaxr(v12);
      while (__stlxr(v50 - 1, v12));
      uint64_t v51 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v49) graphicsLockWaitQueue];
      dispatch_sync_f(v51, 0LL, (dispatch_function_t)do_nothing);
      (*(void (**)(__GLIContextRec *, GPUTools::GL *, unsigned __int8 *))(*(void *)(v11 + 24) + 792LL))( a1,  a2,  a3);
      return;
    }
  }

  *(_BYTE *)(v11 + 483_Block_object_dispose(va, 8) = 1;
  unsigned int v58 = 0LL;
  unsigned int v59 = 0LL;
  unsigned int v60 = 0;
  if ([(id)DYGetGLGuestAppClient(v49) state] != (char *)&dword_0 + 1
    || (id v17 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand], !(_DWORD)v17))
  {
    GPUTools::GL::DYGetParameterInfo(a2, &v57, 0LL, v16);
    snprintf((char *)(v11 + 4709), 0x40uLL, "Ce@%ub", v57);
    GPUTools::FB::Encode((uint64_t)&v58, 217LL, 256LL, v11 + 4709, v18, v19, v20, v21, *(void *)v11);
    char v23 = byte_206F31;
    if ((byte_206F31 & 1) != 0) {
      breakpoint_break( (uint64_t)&v58,  (volatile int *)((char *)&stru_B8.addr + 1),  1LL,  *(unsigned int *)(v11 + 3404),  v11);
    }
    if (!([(id)DYGetGLGuestAppClient(v22) overrideFlags] & 0x10 | v23 & 4))
    {
      uint64_t v28 = mach_absolute_time();
      (*(void (**)(__GLIContextRec *, GPUTools::GL *, unsigned __int8 *))(*(void *)(v11 + 32) + 792LL))( a1,  a2,  a3);
      uint64_t v29 = mach_absolute_time() - v28;
      unint64_t v30 = g_DYTimebaseInfo;
      if (g_DYTimebaseInfo == *((_DWORD *)&g_DYTimebaseInfo + 1))
      {
        uint64_t v31 = v58;
        *((void *)v58 + 2) = v28;
        v31[3] = v29;
        if (!gCheckGLErrors) {
          goto LABEL_28;
        }
      }

      else
      {
        uint64_t v54 = __udivti3(g_DYTimebaseInfo * v29, (g_DYTimebaseInfo * (unsigned __int128)v29) >> 64);
        int v55 = v58;
        *((void *)v58 + 3) = v54;
        v55[2] = __udivti3(v30 * v28, (v30 * (unsigned __int128)v28) >> 64);
        if (!gCheckGLErrors) {
          goto LABEL_28;
        }
      }

      check_errors(v11);
    }

{
  void *v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  void *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  signed int v14;
  BOOL v15;
  BOOL *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  _OWORD *v32;
  uint64_t v33;
  id v34;
  GPUTools::FB::Fbuf *v35;
  unsigned int v36;
  GPUTools::FB::Fbuf *v37;
  dispatch_queue_s *v38;
  uint64_t v39;
  GPUTools::FB::Stream *v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  signed int v45;
  BOOL v46;
  unsigned int v47;
  uint64_t v48;
  id v49;
  unsigned int v50;
  dispatch_queue_s *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  __int128 v56;
  int v57;
  void *v58;
  void *v59;
  unsigned int v60;
  unint64_t v6 = *(void **)(ContextInfo::activeCtxInfoMap + 8);
  if (!v6) {
    goto LABEL_12;
  }
  uint64_t v7 = ContextInfo::activeCtxInfoMap + 8;
  do
  {
    unint64_t v8 = v6[4];
    BOOL v9 = v8 >= (unint64_t)a1;
    else {
      unint64_t v10 = v6 + 1;
    }
    if (v9) {
      uint64_t v7 = (uint64_t)v6;
    }
    unint64_t v6 = (void *)*v10;
  }

  while (*v10);
  if (v7 == ContextInfo::activeCtxInfoMap + 8 || *(void *)(v7 + 32) > (unint64_t)a1) {
LABEL_12:
  }
    uint64_t v7 = ContextInfo::activeCtxInfoMap + 8;
  uint64_t v11 = *(void *)(v7 + 40);
  signed int v12 = (unsigned int *)(v11 + 4640);
  do
  {
    unsigned int v13 = __ldaxr(v12);
    signed int v14 = v13 + 1;
  }

  while (__stlxr(v14, v12));
  if (gCheckGLErrors) {
    BOOL v15 = v14 <= 1;
  }
  else {
    BOOL v15 = 1;
  }
  if (v15)
  {
    id v49 = [(id)DYGetGLGuestAppClient(a1) waitOnGraphicsSemaphoreAssertions];
  }

  else
  {
    uint64_t v48 = handle_opengl_thread_conflict((const void **)v11);
    id v49 = [(id)DYGetGLGuestAppClient(v48) waitOnGraphicsSemaphoreAssertions];
    if ((int)v49 >= 1)
    {
      do
LABEL_58:
        unsigned int v50 = __ldaxr(v12);
      while (__stlxr(v50 - 1, v12));
      uint64_t v51 = (dispatch_queue_s *)[(id)DYGetGLGuestAppClient(v49) graphicsLockWaitQueue];
      dispatch_sync_f(v51, 0LL, (dispatch_function_t)do_nothing);
      (*(void (**)(__GLIContextRec *, GPUTools::GL *, unsigned __int8 *))(*(void *)(v11 + 24) + 792LL))( a1,  a2,  a3);
      return;
    }
  }

  *(_BYTE *)(v11 + 483_Block_object_dispose(va, 8) = 1;
  unsigned int v58 = 0LL;
  unsigned int v59 = 0LL;
  unsigned int v60 = 0;
  if ([(id)DYGetGLGuestAppClient(v49) state] != (char *)&dword_0 + 1
    || (id v17 = [(id)DYGetGLGuestAppClient(1) triggerCaptureOnNextGLCommand], !(_DWORD)v17))
  {
    GPUTools::GL::DYGetParameterInfo(a2, &v57, 0LL, v16);
    snprintf((char *)(v11 + 4709), 0x40uLL, "Ce@%ub", v57);
    GPUTools::FB::Encode((uint64_t)&v58, 217LL, 256LL, v11 + 4709, v18, v19, v20, v21, *(void *)v11);
    char v23 = byte_206F31;
    if ((byte_206F31 & 1) != 0) {
      breakpoint_break( (uint64_t)&v58,  (volatile int *)((char *)&stru_B8.addr + 1),  1LL,  *(unsigned int *)(v11 + 3404),  v11);
    }
    if (!([(id)DYGetGLGuestAppClient(v22) overrideFlags] & 0x10 | v23 & 4))
    {
      uint64_t v28 = mach_absolute_time();
      (*(void (**)(__GLIContextRec *, GPUTools::GL *, unsigned __int8 *))(*(void *)(v11 + 32) + 792LL))( a1,  a2,  a3);
      uint64_t v29 = mach_absolute_time() - v28;
      unint64_t v30 = g_DYTimebaseInfo;
      if (g_DYTimebaseInfo == *((_DWORD *)&g_DYTimebaseInfo + 1))
      {
        uint64_t v31 = v58;
        *((void *)v58 + 2) = v28;
        v31[3] = v29;
        if (!gCheckGLErrors) {
          goto LABEL_28;
        }
      }

      else
      {
        uint64_t v54 = __udivti3(g_DYTimebaseInfo * v29, (g_DYTimebaseInfo * (unsigned __int128)v29) >> 64);
        int v55 = v58;
        *((void *)v58 + 3) = v54;
        v55[2] = __udivti3(v30 * v28, (v30 * (unsigned __int128)v28) >> 64);
        if (!gCheckGLErrors) {
          goto LABEL_28;
        }
      }

      check_errors(v11);
    }