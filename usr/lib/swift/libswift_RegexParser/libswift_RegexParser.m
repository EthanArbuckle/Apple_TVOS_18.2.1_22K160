uint64_t AST.root.getter@<X0>(void *a1@<X8>)
{
  void *v1;
  *a1 = *v1;
  return swift_retain();
}

uint64_t AST.root.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = swift_release();
  void *v1 = v2;
  return result;
}

uint64_t (*AST.root.modify())()
{
  return AST.root.modify;
}

uint64_t AST.globalOptions.getter@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 8);
  return swift_bridgeObjectRetain();
}

uint64_t AST.globalOptions.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = v2;
  return result;
}

uint64_t (*AST.globalOptions.modify())()
{
  return AST.root.modify;
}

uint64_t AST.diags.getter@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 16);
  return swift_bridgeObjectRetain();
}

uint64_t AST.diags.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 16) = v2;
  return result;
}

uint64_t (*AST.diags.modify())()
{
  return AST.root.modify;
}

void *AST.init(_:globalOptions:diags:)@<X0>( void *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  *a4 = *result;
  a4[1] = v4;
  a4[2] = v5;
  return result;
}

void AST.hash(into:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 16);
  AST.Node.hash(into:)();
  if (v3)
  {
    Hasher._combine(_:)(1u);
    specialized Array<A>.hash(into:)(a1, v3);
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  specialized Array<A>.hash(into:)(a1, v4);
}

void static Diagnostics.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

Swift::Int AST.hashValue.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 16);
  Hasher.init(_seed:)();
  AST.Node.hash(into:)();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    specialized Array<A>.hash(into:)((uint64_t)v4, v1);
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  specialized Array<A>.hash(into:)((uint64_t)v4, v2);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 16);
  Hasher.init(_seed:)();
  AST.Node.hash(into:)();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    specialized Array<A>.hash(into:)((uint64_t)v4, v1);
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  specialized Array<A>.hash(into:)((uint64_t)v4, v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AST(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 16);
  AST.Node.hash(into:)();
  if (v3)
  {
    Hasher._combine(_:)(1u);
    specialized Array<A>.hash(into:)(a1, v3);
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  specialized Array<A>.hash(into:)(a1, v4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 16);
  Hasher.init(_seed:)();
  AST.Node.hash(into:)();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    specialized Array<A>.hash(into:)((uint64_t)v4, v1);
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  specialized Array<A>.hash(into:)((uint64_t)v4, v2);
  return Hasher._finalize()();
}

uint64_t AST.hasCapture.getter()
{
  return AST.Node.hasCapture.getter() & 1;
}

uint64_t AST.Node.hasCapture.getter()
{
  if (*v0 >> 60 == 2LL)
  {
    unsigned int v1 = *(unsigned __int8 *)((*v0 & 0xFFFFFFFFFFFFFFFLL) + 0x60);
    if (v1 < 2) {
      return 1LL;
    }
    if (v1 == 3)
    {
      int8x16_t v2 = vorrq_s8( vorrq_s8( *(int8x16_t *)((*v0 & 0xFFFFFFFFFFFFFFFLL) + 0x20),  *(int8x16_t *)((*v0 & 0xFFFFFFFFFFFFFFFLL) + 0x40)),  vorrq_s8( *(int8x16_t *)((*v0 & 0xFFFFFFFFFFFFFFFLL) + 0x30),  *(int8x16_t *)((*v0 & 0xFFFFFFFFFFFFFFFLL) + 0x50)));
    }
  }

  AST.Node._associatedValue.getter();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ASTNode);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ASTParent);
  if ((swift_dynamicCast() & 1) != 0)
  {
    uint64_t v3 = *((void *)&v11 + 1);
    uint64_t v4 = v12;
    __swift_project_boxed_opaque_existential_1Tm(&v10, *((uint64_t *)&v11 + 1));
    uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 16))(v3, v4);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v10);
    uint64_t result = swift_release();
    unint64_t v7 = 0LL;
    uint64_t v8 = *(void *)(v5 + 16);
    while (1)
    {
      if (v8 == v7)
      {
        swift_bridgeObjectRelease();
        return 0LL;
      }

      if (v7 >= *(void *)(v5 + 16)) {
        break;
      }
      unint64_t v9 = v7 + 1;
      *(void *)&__int128 v10 = *(void *)(v5 + 8 * v7 + 32);
      uint64_t result = AST.Node.hasCapture.getter(result);
      unint64_t v7 = v9;
      if ((result & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 1LL;
      }
    }

    __break(1u);
  }

  else
  {
    uint64_t v12 = 0LL;
    __int128 v10 = 0u;
    __int128 v11 = 0u;
    outlined destroy of _ASTParent?((uint64_t)&v10, &demangling cache variable for type metadata for _ASTParent?);
    swift_release();
    return 0LL;
  }

  return result;
}

BOOL AST.isInvalid.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  int8x16_t v2 = (unsigned __int8 *)(v1 + 32);
  uint64_t v3 = *(void *)(v1 + 16) + 1LL;
  do
  {
    if (!--v3) {
      break;
    }
    unsigned int v4 = *v2;
    v2 += 80;
  }

  while (v4 > 1);
  return v3 != 0;
}

BOOL Diagnostics.hasAnyError.getter()
{
  uint64_t v1 = (unsigned __int8 *)(*(void *)v0 + 32LL);
  uint64_t v2 = *(void *)(*(void *)v0 + 16LL) + 1LL;
  do
  {
    if (!--v2) {
      break;
    }
    unsigned int v3 = *v1;
    v1 += 80;
  }

  while (v3 > 1);
  return v2 != 0;
}

uint64_t AST.ensureValid()@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  uint64_t v3 = v1[2];
  uint64_t v4 = *(void *)(v3 + 16) + 1LL;
  uint64_t v5 = v3;
  while (--v4)
  {
    uint64_t v6 = v5 + 80;
    unsigned int v7 = *(unsigned __int8 *)(v5 + 32);
    v5 += 80LL;
    if (v7 <= 1)
    {
      uint64_t v8 = *(void *)(v6 - 32);
      uint64_t v18 = *(void *)(v6 - 40);
      uint64_t v9 = *(void *)(v6 - 24);
      uint64_t v10 = *(void *)(v6 - 16);
      uint64_t v11 = *(void *)(v6 + 8);
      uint64_t v16 = *(void *)v6;
      uint64_t v17 = *(void *)(v6 - 8);
      uint64_t v12 = *(void *)(v6 + 16);
      unsigned __int8 v13 = *(_BYTE *)(v6 + 24);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.LocatedError<ErrorDiagnostic #1 in Diagnostics.throwAnyError()>);
      lazy protocol witness table accessor for type Source.LocatedError<ErrorDiagnostic #1 in Diagnostics.throwAnyError()> and conformance Source.LocatedError<A>( &lazy protocol witness table cache variable for type Source.LocatedError<ErrorDiagnostic #1 in Diagnostics.throwAnyError()> and conformance Source.LocatedError<A>,  &demangling cache variable for type metadata for Source.LocatedError<ErrorDiagnostic #1 in Diagnostics.throwAnyError()>,  (uint64_t)&protocol conformance descriptor for Source.LocatedError<A>);
      swift_allocError();
      *(_BYTE *)uint64_t v14 = v7;
      *(void *)(v14 + 8) = v18;
      *(void *)(v14 + 16) = v8;
      *(void *)(v14 + 24) = v9;
      *(void *)(v14 + 32) = v10;
      *(void *)(v14 + 40) = v17;
      *(void *)(v14 + 48) = v16;
      *(void *)(v14 + 56) = v11;
      *(void *)(v14 + 64) = v12;
      *(_BYTE *)(v14 + 72) = v13;
      *(void *)(v14 + 80) = v9;
      *(void *)(v14 + 88) = v10;
      swift_bridgeObjectRetain();
      outlined copy of ParseError?(v17, v16, v11, v12, v13);
      return swift_willThrow();
    }
  }

  *a1 = *v1;
  a1[1] = v2;
  a1[2] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_retain();
}

void AST.Node.hash(into:)()
{
  uint64_t v1 = type metadata accessor for AST.Atom(0LL);
  MEMORY[0x1895F8858](v1, v2);
  __asm { BR              X11 }
}

void sub_180F7FEAC(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  Hasher._combine(_:)(0LL);
  specialized Array<A>.hash(into:)(v1, v2);
  specialized Array<A>.hash(into:)(v1, v3);
}

void sub_180F7FEF0(void *a1@<X8>)
{
  uint64_t v2 = a1[2];
  unint64_t v3 = a1[3];
  unint64_t v4 = a1[4];
  Hasher._combine(_:)(1uLL);
  specialized Array<A>.hash(into:)(v1, v2);
  Hasher._combine(_:)(v3 >> 14);
  Hasher._combine(_:)(v4 >> 14);
}

BOOL static AST.Alternation.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a2[1];
  return (specialized static Array<A>.== infix(_:_:)(*a1, *a2) & 1) != 0
      && specialized static Array<A>.== infix(_:_:)(v2, v3);
}

BOOL static AST.Concatenation.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  if ((specialized static Array<A>.== infix(_:_:)(*a1, *a2) & 1) == 0) {
    return 0LL;
  }
  return (v4 ^ (unint64_t)v2) < 0x4000 && (v5 ^ (unint64_t)v3) < 0x4000;
}

BOOL static AST.Quote.== infix(_:_:)(void *a1, void *a2)
{
  unint64_t v2 = a1[2];
  unint64_t v3 = a1[3];
  uint64_t v5 = a2[2];
  uint64_t v4 = a2[3];
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return (v5 ^ v2) < 0x4000 && (v4 ^ v3) < 0x4000;
  }
  char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL result = 0LL;
  if ((v7 & 1) != 0) {
    return (v5 ^ v2) < 0x4000 && (v4 ^ v3) < 0x4000;
  }
  return result;
}

BOOL static AST.Atom.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  specialized static AST.Atom.Kind.== infix(_:_:)(a1, a2);
  BOOL result = 0;
  if ((v4 & 1) != 0)
  {
    uint64_t v5 = *(int *)(type metadata accessor for AST.Atom(0LL) + 20);
    uint64_t v6 = a1 + v5;
    unint64_t v7 = *(void *)(a1 + v5);
    uint64_t v8 = (void *)(a2 + v5);
    if (!((*v8 ^ v7) >> 14) && (*(void *)(v6 + 8) ^ v8[1]) < 0x4000LL) {
      return 1;
    }
  }

  return result;
}

Swift::Int AST.Node.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Node()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Node()
{
  return Hasher._finalize()();
}

uint64_t AST.Node.children.getter()
{
  *(void *)&__int128 v5 = *v0;
  AST.Node._associatedValue.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ASTNode);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ASTParent);
  if (swift_dynamicCast())
  {
    uint64_t v1 = *((void *)&v6 + 1);
    uint64_t v2 = v7;
    __swift_project_boxed_opaque_existential_1Tm(&v5, *((uint64_t *)&v6 + 1));
    uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v5);
  }

  else
  {
    uint64_t v7 = 0LL;
    __int128 v5 = 0u;
    __int128 v6 = 0u;
    outlined destroy of _ASTParent?((uint64_t)&v5, &demangling cache variable for type metadata for _ASTParent?);
    return 0LL;
  }

  return v3;
}

void AST.Node._associatedValue.getter()
{
  __asm { BR              X11 }

uint64_t sub_180F80660@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  v1[3] = &type metadata for AST.Alternation;
  v1[4] = lazy protocol witness table accessor for type AST.Alternation and conformance AST.Alternation();
  void *v1 = v2;
  v1[1] = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_180F809A4@<X0>(void *a1@<X8>)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v6 = a1[6];
  uint64_t v7 = a1[7];
  uint64_t v8 = a1[8];
  uint64_t v9 = a1[9];
  v1[3] = &type metadata for AST.AbsentFunction;
  v1[4] = lazy protocol witness table accessor for type AST.AbsentFunction and conformance AST.AbsentFunction();
  uint64_t v10 = (void *)swift_allocObject();
  void *v1 = v10;
  v10[2] = v2;
  v10[3] = v3;
  v10[4] = v4;
  v10[5] = v5;
  v10[6] = v6;
  v10[7] = v7;
  v10[8] = v8;
  v10[9] = v9;
  return outlined copy of AST.AbsentFunction.Kind(v4, v5, v6, v7);
}

void sub_180F80A20(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  v1[3] = &type metadata for AST.Empty;
  v1[4] = lazy protocol witness table accessor for type AST.Empty and conformance AST.Empty();
  void *v1 = v2;
  v1[1] = v3;
  JUMPOUT(0x180F80A3CLL);
}

uint64_t AST.Node.as<A>(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int v4 = swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56LL))( a2,  v4 ^ 1u,  1LL,  a1);
}

uint64_t AST.Node.location.getter()
{
  uint64_t v0 = v4;
  uint64_t v1 = v5;
  __swift_project_boxed_opaque_existential_1Tm(v3, v4);
  (*(void (**)(uint64_t, uint64_t))(v1 + 16))(v0, v1);
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v3);
}

BOOL AST.Node.isTrivia.getter()
{
  return *v0 >> 60 == 6LL;
}

BOOL AST.Group.Kind.isCapturing.getter()
{
  unsigned int v1 = v0[5].u8[0];
  BOOL result = 1;
  if (v1 >= 2)
  {
    if (v1 != 3) {
      return 0;
    }
    int8x16_t v3 = vorrq_s8(vorrq_s8(v0[1], v0[3]), vorrq_s8(v0[2], v0[4]));
  }

  return result;
}

void AST.Node.isQuantifiable.getter()
{
  uint64_t v1 = type metadata accessor for AST.Atom.Kind(0LL);
  MEMORY[0x1895F8858](v1, v2);
  uint64_t v3 = type metadata accessor for AST.Atom(0LL);
  MEMORY[0x1895F8858](v3, v4);
  __asm { BR              X11 }

uint64_t sub_180F80C58()
{
  return 0LL;
}

uint64_t AST.Atom.isQuantifiable.getter()
{
  uint64_t v1 = type metadata accessor for AST.Atom.Kind(0LL);
  MEMORY[0x1895F8858](v1, v2);
  uint64_t v4 = (unsigned __int8 *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of AST.Atom(v0, (uint64_t)v4, v5);
  int v6 = swift_getEnumCaseMultiPayload() - 4;
  uint64_t result = 0LL;
  switch(v6)
  {
    case 0:
      unsigned int v8 = *v4;
      if (v8 >= 0x1D) {
        goto LABEL_7;
      }
      uint64_t result = (0x101FFFFFu >> v8) & 1;
      break;
    case 8:
      int v9 = *v4;
      swift_bridgeObjectRelease();
      uint64_t result = v9 == 0;
      break;
    case 9:
      outlined destroy of AST.Atom((uint64_t)v4, type metadata accessor for AST.Atom.Kind);
LABEL_7:
      uint64_t result = 0LL;
      break;
    case 11:
    case 12:
      return result;
    default:
      outlined destroy of AST.Atom((uint64_t)v4, type metadata accessor for AST.Atom.Kind);
      uint64_t result = 1LL;
      break;
  }

  return result;
}

uint64_t AST.Alternation.children.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AST.Alternation.pipes.getter()
{
  return swift_bridgeObjectRetain();
}

_RegexParser::AST::Alternation __swiftcall AST.Alternation.init(_:pipes:)( Swift::OpaquePointer _, Swift::OpaquePointer pipes)
{
  unint64_t v3 = *((void *)_._rawValue + 2);
  if (v3 < 2)
  {
    __break(1u);
    goto LABEL_5;
  }

  if (*((void *)pipes._rawValue + 2) != v3 - 1)
  {
LABEL_5:
    __break(1u);
    goto LABEL_6;
  }

  v2->_rawValue = _._rawValue;
  v2[1]._rawValue = pipes._rawValue;
LABEL_6:
  result.pipes = pipes;
  result.children = _;
  return result;
}

uint64_t AST.Alternation.location.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = *v1;
  unint64_t v3 = *(void *)(*v1 + 16);
  if (!v3)
  {
    __break(1u);
    goto LABEL_6;
  }

  unint64_t v6 = *(void *)(v2 + 32);
  uint64_t v5 = v2 + 32;
  unint64_t v19 = v6;
  AST.Node._associatedValue.getter();
  uint64_t v7 = v17;
  uint64_t v8 = v18;
  __swift_project_boxed_opaque_existential_1Tm(v16, v17);
  (*(void (**)(unint64_t *__return_ptr, uint64_t, uint64_t))(v8 + 16))(&v19, v7, v8);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v16);
  if (v3 > *(void *)(v5 - 16))
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  unint64_t v10 = v19;
  uint64_t v14 = *(void *)(v5 + 8 * v3 - 8);
  AST.Node._associatedValue.getter();
  uint64_t v11 = v17;
  uint64_t v12 = v18;
  __swift_project_boxed_opaque_existential_1Tm(v16, v17);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v12 + 16))(&v14, v11, v12);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v16);
  unint64_t v13 = v15;
  if (v15 >> 14 >= v10 >> 14)
  {
    *a1 = v10;
    a1[1] = v13;
    return result;
  }

LABEL_7:
  __break(1u);
  return result;
}

  *a3 = v6;
  return result;
}

    int v9 = 0LL;
    unint64_t v10 = xmmword_181005FA0;
    uint64_t v11 = 0LL;
    uint64_t v12 = 2;
    uint64_t result = Parser.errorAtCurrentPosition(_:)((__int128 *)&v9);
    goto LABEL_8;
  }

  v7._countAndFlagsBits = 45LL;
  v7._object = (void *)0xE100000000000000LL;
  uint64_t result = Parser.tryEat(_:)(v7);
  if ((result & 1) == 0) {
    goto LABEL_8;
  }
  uint64_t result = (uint64_t)Parser.lexNumber(_:)(1, (uint64_t)&v9);
  if ((v12 & 1) != 0) {
    goto LABEL_7;
  }
  if ((v10 & 1) == 0)
  {
    unint64_t v6 = -v9;
    if (__OFSUB__(0LL, v9))
    {
LABEL_15:
      __break(1u);
      return result;
    }

unint64_t specialized Collection.first.getter(unint64_t a1, unint64_t a2)
{
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    _StringGuts.validateScalarIndex(_:)(0xFuLL, a1, a2);
    if ((a2 & 0x1000000000000000LL) != 0)
    {
      unsigned int v5 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }

    else
    {
      if ((a2 & 0x2000000000000000LL) == 0 && (a1 & 0x1000000000000000LL) == 0) {
        _StringObject.sharedUTF8.getter();
      }
      unsigned int v5 = _decodeScalar(_:startingAt:)();
    }
  }

  else
  {
    unsigned int v5 = 0;
  }

  return v5 | ((unint64_t)(v2 == 0) << 32);
}

uint64_t Source.Location.start.getter()
{
  return *(void *)v0;
}

uint64_t Source.Location.init(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t AST.Alternation.hash(into:)(uint64_t a1)
{
  return AST.Alternation.hash(into:)( a1,  specialized Array<A>.hash(into:),  (uint64_t (*)(uint64_t, uint64_t))specialized Array<A>.hash(into:));
}

BOOL specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0LL;
  }
  if (!v2 || a1 == a2) {
    return 1LL;
  }
  unint64_t v3 = (void *)(a2 + 48);
  uint64_t v4 = (void *)(a1 + 48);
  uint64_t v5 = v2 + 1;
  do
  {
    BOOL result = --v5 == 0;
    if (!v5) {
      break;
    }
    if (*((_DWORD *)v4 - 4) != *((_DWORD *)v3 - 4)) {
      break;
    }
    if ((*(v3 - 1) ^ *(v4 - 1)) >> 14) {
      break;
    }
    uint64_t v8 = *v3;
    v3 += 3;
    uint64_t v7 = v8;
    unint64_t v9 = *v4;
    v4 += 3;
  }

  while ((v7 ^ v9) < 0x4000);
  return result;
}

{
  uint64_t v2;
  uint64_t *v3;
  unint64_t *v4;
  uint64_t v5;
  BOOL result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0LL;
  }
  if (!v2 || a1 == a2) {
    return 1LL;
  }
  unint64_t v3 = (uint64_t *)(a2 + 48);
  uint64_t v4 = (unint64_t *)(a1 + 48);
  uint64_t v5 = v2 + 1;
  do
  {
    BOOL result = --v5 == 0;
    if (!v5) {
      break;
    }
    if ((*(v3 - 1) ^ *(v4 - 1)) >> 14) {
      break;
    }
    uint64_t v8 = *v3;
    v3 += 3;
    uint64_t v7 = v8;
    unint64_t v9 = *v4;
    v4 += 3;
  }

  while ((v7 ^ v9) < 0x4000);
  return result;
}

{
  uint64_t v2;
  unint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  BOOL result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0LL;
  }
  if (!v2 || a1 == a2) {
    return 1LL;
  }
  unint64_t v3 = (unint64_t *)(a1 + 40);
  uint64_t v4 = (uint64_t *)(a2 + 40);
  uint64_t v5 = v2 + 1;
  do
  {
    BOOL result = --v5 == 0;
    if (!v5) {
      break;
    }
    if ((*(v4 - 1) ^ *(v3 - 1)) >> 14) {
      break;
    }
    uint64_t v8 = *v3;
    v3 += 2;
    uint64_t v7 = v8;
    unint64_t v9 = *v4;
    v4 += 2;
  }

  while ((v9 ^ v7) < 0x4000);
  return result;
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0LL;
  }
  if (!v2 || a1 == a2) {
    return 1LL;
  }
  uint64_t v3 = v2 + 1;
  uint64_t v4 = (uint64_t *)(a2 + 72);
  uint64_t v5 = (unint64_t *)(a1 + 72);
  do
  {
    BOOL v6 = --v3 == 0;
    if (!v3) {
      break;
    }
    unint64_t v8 = *(v5 - 1);
    unint64_t v7 = *v5;
    uint64_t v10 = *(v4 - 1);
    uint64_t v9 = *v4;
    __int128 v11 = *(_OWORD *)(v5 - 3);
    v13[0] = *(_OWORD *)(v5 - 5);
    v13[1] = v11;
    if ((v10 ^ v8) >> 14) {
      break;
    }
    v4 += 6;
    v5 += 6;
  }

  while ((v9 ^ v7) < 0x4000);
  return v6;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v23;
  uint64_t v4 = type metadata accessor for AST.CustomCharacterClass.Member(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t v7 = MEMORY[0x1895F8858](v4, v6);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v7, v10);
  uint64_t v12 = (char *)&v23 - v11;
  unint64_t v13 = *(void *)(a1 + 16);
  if (v13 != *(void *)(a2 + 16)) {
    return 0LL;
  }
  if (!v13 || a1 == a2) {
    return 1LL;
  }
  uint64_t v14 = 0LL;
  unint64_t v15 = (*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  do
  {
    uint64_t v18 = v13 == v14;
    if (v13 == v14) {
      break;
    }
    unint64_t v19 = v14 + 1;
    v20 = *(void *)(v5 + 72) * v14;
    outlined init with copy of AST.Atom( v16 + v20,  (uint64_t)v12,  type metadata accessor for AST.CustomCharacterClass.Member);
    outlined init with copy of AST.Atom( v17 + v20,  (uint64_t)v9,  type metadata accessor for AST.CustomCharacterClass.Member);
    specialized static AST.CustomCharacterClass.Member.== infix(_:_:)((uint64_t)v12, (uint64_t)v9);
    LOBYTE(v20) = v21;
    outlined destroy of AST.Atom((uint64_t)v9, type metadata accessor for AST.CustomCharacterClass.Member);
    outlined destroy of AST.Atom((uint64_t)v12, type metadata accessor for AST.CustomCharacterClass.Member);
    uint64_t v14 = v19;
  }

  while ((v20 & 1) != 0);
  return v18;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  unint64_t *v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0LL;
  }
  if (!v2 || a1 == a2) {
    return 1LL;
  }
  uint64_t v3 = v2 + 1;
  uint64_t v4 = (uint64_t *)(a2 + 56);
  uint64_t v5 = (unint64_t *)(a1 + 56);
  do
  {
    BOOL v6 = --v3 == 0;
    if (!v3) {
      break;
    }
    unint64_t v8 = *(v5 - 1);
    unint64_t v7 = *v5;
    uint64_t v10 = *(v4 - 1);
    uint64_t v9 = *v4;
    if (*(v5 - 3) == *(v4 - 3) && *(v5 - 2) == *(v4 - 2))
    {
      if ((v10 ^ v8) >> 14) {
        return v6;
      }
    }

    else if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0 || (v10 ^ v8) >= 0x4000)
    {
      return v6;
    }

    v4 += 4;
    v5 += 4;
  }

  while ((v9 ^ v7) < 0x4000);
  return v6;
}

{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  char v7;
  uint64_t v9;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0LL;
  }
  if (!v2 || a1 == a2) {
    return 1LL;
  }
  uint64_t v3 = (uint64_t *)(a1 + 32);
  uint64_t v4 = a2 + 32;
  do
  {
    uint64_t v5 = v2 == 0;
    if (!v2) {
      break;
    }
    BOOL v6 = *v3++;
    v4 += 8LL;
    uint64_t v9 = v6;
    specialized static AST.Node.== infix(_:_:)((uint64_t)&v9);
    --v2;
  }

  while ((v7 & 1) != 0);
  return v5;
}

{
  uint64_t v2;
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  BOOL v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  char v10;
  uint64_t v11;
  char v12;
  __int128 v14;
  uint64_t v15;
  char v16;
  __int128 v17;
  uint64_t v18;
  char v19;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0LL;
  }
  if (!v2 || a1 == a2) {
    return 1LL;
  }
  uint64_t v3 = (_BYTE *)(a1 + 56);
  uint64_t v4 = (_BYTE *)(a2 + 56);
  uint64_t v5 = v2 + 1;
  do
  {
    BOOL v6 = --v5 == 0;
    if (!v5) {
      break;
    }
    unint64_t v7 = v3 + 32;
    unint64_t v8 = *((void *)v3 - 1);
    uint64_t v9 = v4 + 32;
    uint64_t v10 = *v3;
    uint64_t v17 = *(_OWORD *)(v3 - 24);
    uint64_t v18 = v8;
    unint64_t v19 = v10;
    __int128 v11 = *((void *)v4 - 1);
    LOBYTE(v8) = *v4;
    uint64_t v14 = *(_OWORD *)(v4 - 24);
    unint64_t v15 = v11;
    uint64_t v16 = v8;
    uint64_t v12 = static CaptureStructure.== infix(_:_:)((uint64_t)&v17, (uint64_t)&v14);
    uint64_t v4 = v9;
    uint64_t v3 = v7;
  }

  while ((v12 & 1) != 0);
  return v6;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  uint64_t *v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0LL;
  }
  if (v2 && a1 != a2)
  {
    uint64_t v3 = v2 + 1;
    uint64_t v4 = (unint64_t *)(a1 + 72);
    uint64_t v5 = (uint64_t *)(a2 + 40);
    while (1)
    {
      BOOL v6 = --v3 == 0;
      if (!v3) {
        return v6;
      }
      unint64_t v7 = *(v4 - 4);
      unint64_t v8 = *(v4 - 3);
      uint64_t v9 = *(v4 - 2);
      uint64_t v10 = *(v4 - 1);
      __int128 v11 = *v4;
      unint64_t v13 = *v5;
      uint64_t v12 = v5[1];
      uint64_t v14 = v5[2];
      unint64_t v15 = v5[3];
      uint64_t v16 = v5[4];
      if (v7)
      {
        if (!v13) {
          return v6;
        }
        if (*(v4 - 5) != *(v5 - 1) || v7 != v13)
        {
          uint64_t v17 = *(v4 - 2);
          v21 = *(v4 - 3);
          v23 = v5[1];
          v25 = v5[4];
          if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
            return v6;
          }
          if (v17 != v14) {
            return v6;
          }
          uint64_t v16 = v25;
          if (v21 != v23) {
            return v6;
          }
          goto LABEL_17;
        }
      }

      else
      {
        v24 = v5[1];
        v26 = v5[4];
        v22 = *v4;
        uint64_t v18 = *(v4 - 3);
        unint64_t v19 = *(v4 - 2);
        swift_bridgeObjectRelease();
        uint64_t v9 = v19;
        __int128 v11 = v22;
        uint64_t v12 = v24;
        unint64_t v8 = v18;
        uint64_t v16 = v26;
        if (v13) {
          return v6;
        }
      }

      if (v9 != v14 || v8 != v12) {
        return v6;
      }
LABEL_17:
      if (!((v15 ^ v10) >> 14))
      {
        v4 += 7;
        v5 += 7;
        if ((v16 ^ v11) < 0x4000) {
          continue;
        }
      }

      return v6;
    }
  }

  return 1LL;
}

void specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 == *(void *)(a2 + 16) && v2 && a1 != a2)
  {
    uint64_t v3 = (uint64_t *)(a2 + 56);
    for (i = (unint64_t *)(a1 + 56); *((unsigned __int8 *)i - 24) == *((unsigned __int8 *)v3 - 24); i += 10)
    {
      unint64_t v6 = *i;
      unint64_t v5 = i[1];
      uint64_t v8 = i[2];
      uint64_t v7 = i[3];
      uint64_t v10 = i[4];
      uint64_t v9 = i[5];
      int v11 = *((unsigned __int8 *)i + 48);
      uint64_t v13 = *v3;
      uint64_t v12 = v3[1];
      uint64_t v15 = v3[2];
      uint64_t v14 = v3[3];
      uint64_t v17 = v3[4];
      uint64_t v16 = v3[5];
      int v18 = *((unsigned __int8 *)v3 + 48);
      if (*(i - 2) == *(v3 - 2) && *(i - 1) == *(v3 - 1))
      {
        if ((v13 ^ v6) >> 14) {
          return;
        }
      }

      else
      {
        uint64_t v31 = v3[1];
        uint64_t v32 = i[5];
        unint64_t v33 = i[1];
        uint64_t v34 = i[2];
        uint64_t v35 = i[3];
        uint64_t v36 = i[4];
        uint64_t v30 = v3[2];
        int v19 = *((unsigned __int8 *)i + 48);
        uint64_t v20 = v3[3];
        int v21 = *((unsigned __int8 *)v3 + 48);
        uint64_t v22 = v3[4];
        uint64_t v23 = v3[5];
        if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
          return;
        }
        uint64_t v16 = v23;
        uint64_t v17 = v22;
        int v18 = v21;
        uint64_t v14 = v20;
        int v11 = v19;
        uint64_t v15 = v30;
        uint64_t v12 = v31;
        uint64_t v9 = v32;
        unint64_t v5 = v33;
        uint64_t v7 = v35;
        uint64_t v10 = v36;
        uint64_t v8 = v34;
        if ((v13 ^ v6) >= 0x4000) {
          return;
        }
      }

      if ((v12 ^ v5) >> 14) {
        return;
      }
      if (v11 == 255)
      {
        if (v18 != 255) {
          goto LABEL_20;
        }
      }

      else
      {
        if (v18 == 255)
        {
LABEL_20:
          uint64_t v25 = v10;
          uint64_t v26 = v9;
          uint64_t v27 = v16;
          uint64_t v28 = v7;
          uint64_t v29 = v8;
          outlined copy of ParseError?(v8, v7, v10, v9, v11);
          outlined copy of ParseError?(v15, v14, v17, v27, v18);
          outlined consume of ParseError?(v29, v28, v25, v26, v11);
          outlined consume of ParseError?(v15, v14, v17, v27, v18);
          return;
        }

        *(void *)&__int128 v37 = v8;
        *((void *)&v37 + 1) = v7;
        uint64_t v38 = v10;
        uint64_t v39 = v9;
        char v40 = v11;
        uint64_t v41 = v15;
        uint64_t v42 = v14;
        uint64_t v43 = v17;
        uint64_t v44 = v16;
        char v45 = v18;
        specialized static ParseError.== infix(_:_:)(&v37);
        if ((v24 & 1) == 0) {
          return;
        }
      }

      v3 += 10;
      if (!--v2) {
        return;
      }
    }
  }

Swift::Int AST.Alternation.hashValue.getter()
{
  return AST.Alternation.hashValue.getter( (void (*)(_BYTE *, uint64_t))specialized Array<A>.hash(into:),  (void (*)(_BYTE *, uint64_t))specialized Array<A>.hash(into:));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Alternation( uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance AST.Alternation( a1,  a2,  (void (*)(_BYTE *, uint64_t))specialized Array<A>.hash(into:),  (void (*)(_BYTE *, uint64_t))specialized Array<A>.hash(into:));
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AST.Alternation( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable.hash(into:) in conformance AST.Alternation( a1,  a2,  a3,  specialized Array<A>.hash(into:),  (uint64_t (*)(uint64_t, uint64_t))specialized Array<A>.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Alternation( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Alternation( a1,  a2,  a3,  (void (*)(_BYTE *, uint64_t))specialized Array<A>.hash(into:),  (void (*)(_BYTE *, uint64_t))specialized Array<A>.hash(into:));
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AST.Alternation( uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a2[1];
  return (specialized static Array<A>.== infix(_:_:)(*a1, *a2) & 1) != 0
      && specialized static Array<A>.== infix(_:_:)(v2, v3);
}

uint64_t protocol witness for _ASTPrintable._dumpBase.getter in conformance AST.Alternation()
{
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 62LL;
  v1._object = (void *)0xE100000000000000LL;
  String.append(_:)(v1);
  return v3[0];
}

uint64_t AST.Alternation._dumpBase.getter()
{
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 62LL;
  v1._object = (void *)0xE100000000000000LL;
  String.append(_:)(v1);
  return v3[0];
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST.Alternation()
{
  return specialized _ASTPrintable._dump()(*v0);
}

uint64_t AST.Concatenation.children.getter()
{
  return swift_bridgeObjectRetain();
}

__n128 AST.Concatenation.location.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = *(__n128 *)(v1 + 8);
  *a1 = result;
  return result;
}

__n128 AST.Concatenation.init(_:_:)@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = a1;
  __n128 result = *a2;
  *(__n128 *)(a3 + 8) = *a2;
  return result;
}

void AST.Concatenation.hash(into:)(uint64_t a1)
{
  unint64_t v2 = v1[1];
  unint64_t v3 = v1[2];
  specialized Array<A>.hash(into:)(a1, *v1);
  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v3 >> 14);
}

BOOL static AST.Empty.== infix(_:_:)(void *a1, void *a2)
{
  return !((*a2 ^ *a1) >> 14) && (a1[1] ^ a2[1]) < 0x4000LL;
}

Swift::Int AST.Concatenation.hashValue.getter()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  unint64_t v3 = v0[2];
  Hasher.init(_seed:)();
  specialized Array<A>.hash(into:)((uint64_t)v5, v1);
  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v3 >> 14);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Concatenation()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  unint64_t v3 = v0[2];
  Hasher.init(_seed:)();
  specialized Array<A>.hash(into:)((uint64_t)v5, v1);
  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v3 >> 14);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AST.Concatenation(uint64_t a1)
{
  unint64_t v2 = v1[1];
  unint64_t v3 = v1[2];
  specialized Array<A>.hash(into:)(a1, *v1);
  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v3 >> 14);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Concatenation()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  unint64_t v3 = v0[2];
  Hasher.init(_seed:)();
  specialized Array<A>.hash(into:)((uint64_t)v5, v1);
  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v3 >> 14);
  return Hasher._finalize()();
}

__n128 protocol witness for _ASTNode.location.getter in conformance AST.Concatenation@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = *(__n128 *)(v1 + 8);
  *a1 = result;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AST.Concatenation( uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  if ((specialized static Array<A>.== infix(_:_:)(*a1, *a2) & 1) == 0) {
    return 0LL;
  }
  return (v4 ^ (unint64_t)v2) < 0x4000 && (v5 ^ (unint64_t)v3) < 0x4000;
}

uint64_t protocol witness for _ASTPrintable._dumpBase.getter in conformance AST.Concatenation()
{
  return 0LL;
}

uint64_t AST.Concatenation._dumpBase.getter()
{
  return 0LL;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST.Concatenation()
{
  return specialized _ASTPrintable._dump()(*v0);
}

uint64_t protocol witness for _ASTPrintable._dumpBase.getter in conformance AST.Quote()
{
  v1._countAndFlagsBits = 34LL;
  v1._object = (void *)0xE100000000000000LL;
  String.append(_:)(v1);
  return 0x222065746F7571LL;
}

uint64_t AST.Quote._dumpBase.getter()
{
  v1._countAndFlagsBits = 34LL;
  v1._object = (void *)0xE100000000000000LL;
  String.append(_:)(v1);
  return 0x222065746F7571LL;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST.Quote( uint64_t a1, uint64_t a2)
{
  return protocol witness for CustomStringConvertible.description.getter in conformance AST.Quote( a1,  a2,  (uint64_t (*)(void, void, void, void))specialized _ASTPrintable._dump());
}

uint64_t AST.Trivia._dumpBase.getter()
{
  return 0LL;
}

uint64_t AST.Interpolation.contents.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

__n128 AST.Interpolation.location.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = v1[1];
  *a1 = result;
  return result;
}

__n128 AST.Interpolation.init(_:_:)@<Q0>( unint64_t a1@<X0>, unint64_t a2@<X1>, __n128 *a3@<X2>, __n128 *a4@<X8>)
{
  a4->n128_u64[0] = a1;
  a4->n128_u64[1] = a2;
  __n128 result = *a3;
  a4[1] = *a3;
  return result;
}

void AST.Quote.hash(into:)()
{
  unint64_t v1 = *(void *)(v0 + 16);
  unint64_t v2 = *(void *)(v0 + 24);
  String.hash(into:)();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
}

Swift::Int AST.Quote.hashValue.getter()
{
  unint64_t v1 = *(void *)(v0 + 16);
  unint64_t v2 = *(void *)(v0 + 24);
  Hasher.init(_seed:)();
  String.hash(into:)();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Quote()
{
  unint64_t v1 = *(void *)(v0 + 16);
  unint64_t v2 = *(void *)(v0 + 24);
  Hasher.init(_seed:)();
  String.hash(into:)();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  return Hasher._finalize()();
}

__n128 protocol witness for _ASTNode.location.getter in conformance AST.Interpolation@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = v1[1];
  *a1 = result;
  return result;
}

uint64_t protocol witness for _ASTPrintable._dumpBase.getter in conformance AST.Interpolation()
{
  uint64_t v1 = *v0;
  unint64_t v2 = (void *)v0[1];
  _StringGuts.grow(_:)(18LL);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  v4._countAndFlagsBits = 62LL;
  v4._object = (void *)0xE100000000000000LL;
  String.append(_:)(v4);
  return 0x6C6F707265746E69LL;
}

uint64_t AST.Interpolation._dumpBase.getter()
{
  uint64_t v1 = *v0;
  unint64_t v2 = (void *)v0[1];
  _StringGuts.grow(_:)(18LL);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  v4._countAndFlagsBits = 62LL;
  v4._object = (void *)0xE100000000000000LL;
  String.append(_:)(v4);
  return 0x6C6F707265746E69LL;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST.Interpolation( uint64_t a1, uint64_t a2)
{
  return protocol witness for CustomStringConvertible.description.getter in conformance AST.Quote( a1,  a2,  (uint64_t (*)(void, void, void, void))specialized _ASTPrintable._dump());
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST.Quote( uint64_t a1, uint64_t a2, uint64_t (*a3)(void, void, void, void))
{
  return a3(*v3, v3[1], v3[2], v3[3]);
}

__n128 AST.Empty.location.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = *v1;
  *a1 = *v1;
  return result;
}

__n128 AST.Empty.init(_:)@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void AST.Empty.hash(into:)()
{
  unint64_t v1 = v0[1];
  Hasher._combine(_:)(*v0 >> 14);
  Hasher._combine(_:)(v1 >> 14);
}

Swift::Int AST.Empty.hashValue.getter()
{
  unint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Empty()
{
  unint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AST.Empty()
{
  unint64_t v1 = v0[1];
  Hasher._combine(_:)(*v0 >> 14);
  Hasher._combine(_:)(v1 >> 14);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Empty()
{
  unint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  return Hasher._finalize()();
}

__n128 protocol witness for _ASTNode.location.getter in conformance AST.Empty@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = *v1;
  *a1 = *v1;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AST.Empty(void *a1, void *a2)
{
  return !((*a2 ^ *a1) >> 14) && !((a1[1] ^ a2[1]) >> 14);
}

uint64_t AST.Empty._dumpBase.getter()
{
  return 0LL;
}

void AST.AbsentFunction.Kind.hash(into:)()
{
  __asm { BR              X11 }

void sub_180F82448()
{
}

Swift::Int AST.AbsentFunction.Kind.hashValue.getter()
{
  return AST.AbsentFunction.Kind.hashValue.getter((void (*)(_BYTE *))AST.AbsentFunction.Kind.hash(into:));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.AbsentFunction.Kind( uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance AST.AbsentFunction.Kind( a1,  a2,  (void (*)(_BYTE *))AST.AbsentFunction.Kind.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.AbsentFunction.Kind( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance AST.AbsentFunction.Kind( a1,  a2,  a3,  (void (*)(_BYTE *))AST.AbsentFunction.Kind.hash(into:));
}

__n128 AST.AbsentFunction.start.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = *v1;
  *a1 = *v1;
  return result;
}

__n128 AST.AbsentFunction.start.setter(__n128 *a1)
{
  __n128 result = *a1;
  __n128 *v1 = *a1;
  return result;
}

uint64_t (*AST.AbsentFunction.start.modify())()
{
  return AST.root.modify;
}

uint64_t AST.AbsentFunction.kind.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1[2];
  uint64_t v3 = v1[3];
  uint64_t v4 = v1[4];
  uint64_t v5 = v1[5];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return outlined copy of AST.AbsentFunction.Kind(v2, v3, v4, v5);
}

__n128 AST.AbsentFunction.kind.setter(__n128 *a1)
{
  __n128 v5 = *a1;
  uint64_t v2 = a1[1].n128_i64[0];
  uint64_t v3 = a1[1].n128_i64[1];
  outlined consume of AST.AbsentFunction.Kind(v1[2], v1[3], v1[4], v1[5]);
  __n128 result = v5;
  *((__n128 *)v1 + 1) = v5;
  v1[4] = v2;
  v1[5] = v3;
  return result;
}

uint64_t (*AST.AbsentFunction.kind.modify())()
{
  return AST.root.modify;
}

__n128 AST.AbsentFunction.location.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = v1[3];
  *a1 = result;
  return result;
}

__n128 AST.AbsentFunction.location.setter(__n128 *a1)
{
  __n128 result = *a1;
  v1[3] = *a1;
  return result;
}

uint64_t (*AST.AbsentFunction.location.modify())()
{
  return AST.root.modify;
}

__n128 AST.AbsentFunction.init(_:start:location:)@<Q0>( __int128 *a1@<X0>, _OWORD *a2@<X1>, __n128 *a3@<X2>, uint64_t a4@<X8>)
{
  __int128 v4 = *a1;
  __int128 v5 = a1[1];
  *(_OWORD *)a4 = *a2;
  *(_OWORD *)(a4 + 16) = v4;
  __n128 result = *a3;
  *(_OWORD *)(a4 + 32) = v5;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

void AST.AbsentFunction.hash(into:)()
{
  unint64_t v1 = v0[1];
  unint64_t v2 = v0[6];
  unint64_t v3 = v0[7];
  Hasher._combine(_:)(*v0 >> 14);
  Hasher._combine(_:)(v1 >> 14);
  AST.AbsentFunction.Kind.hash(into:)();
  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v3 >> 14);
}

Swift::Int AST.AbsentFunction.hashValue.getter()
{
  unint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  unint64_t v3 = v0[6];
  unint64_t v4 = v0[7];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  AST.AbsentFunction.Kind.hash(into:)();
  Hasher._combine(_:)(v3 >> 14);
  Hasher._combine(_:)(v4 >> 14);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AST.AbsentFunction()
{
  unint64_t v1 = v0[1];
  unint64_t v2 = v0[6];
  unint64_t v3 = v0[7];
  Hasher._combine(_:)(*v0 >> 14);
  Hasher._combine(_:)(v1 >> 14);
  AST.AbsentFunction.Kind.hash(into:)();
  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v3 >> 14);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.AbsentFunction()
{
  unint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  unint64_t v3 = v0[6];
  unint64_t v4 = v0[7];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  AST.AbsentFunction.Kind.hash(into:)();
  Hasher._combine(_:)(v3 >> 14);
  Hasher._combine(_:)(v4 >> 14);
  return Hasher._finalize()();
}

__n128 protocol witness for _ASTNode.location.getter in conformance AST.AbsentFunction@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = v1[3];
  *a1 = result;
  return result;
}

unint64_t AST.AbsentFunction._dumpBase.getter()
{
  unsigned int v1 = *(unsigned __int8 *)(v0 + 40);
  _StringGuts.grow(_:)(18LL);
  swift_bridgeObjectRelease();
  uint64_t v2 = 8LL * ((v1 >> 1) & 3);
  v3._countAndFlagsBits = *(void *)&aRepeaterexpres[v2];
  v3._object = *(void **)((char *)&unk_181005BC8 + v2);
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  return 0xD000000000000010LL;
}

void protocol witness for CustomStringConvertible.description.getter in conformance AST.AbsentFunction()
{
}

__n128 AST.Atom.Number.init(_:at:)@<Q0>( unint64_t a1@<X0>, char a2@<W1>, __n128 *a3@<X2>, __n128 *a4@<X8>)
{
  a4->n128_u64[0] = a1;
  a4->n128_u8[8] = a2 & 1;
  __n128 result = *a3;
  a4[1] = *a3;
  return result;
}

BOOL AST.Reference.Kind.recursesWholePattern.getter()
{
  return !*(_BYTE *)(v0 + 32) && (*(void *)(v0 + 8) & 1LL | *(void *)v0) == 0;
}

void AST.Reference.Kind.hash(into:)()
{
  Swift::UInt v1 = *(void *)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  unint64_t v4 = *(void *)(v0 + 16);
  unint64_t v3 = *(void *)(v0 + 24);
  if (!*(_BYTE *)(v0 + 32))
  {
    Hasher._combine(_:)(0LL);
    if ((v2 & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_6;
  }

  if (*(_BYTE *)(v0 + 32) == 1)
  {
    Hasher._combine(_:)(1uLL);
    if ((v2 & 1) != 0)
    {
LABEL_4:
      Hasher._combine(_:)(0);
LABEL_7:
      Hasher._combine(_:)(v4 >> 14);
      Hasher._combine(_:)(v3 >> 14);
      return;
    }

LABEL_6:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
    goto LABEL_7;
  }

  Hasher._combine(_:)(2uLL);
  String.hash(into:)();
}

  uint64_t v39 = (char *)MEMORY[0x18961AFE8];
  uint64_t v41 = a1;
  uint64_t v42 = a2;
  uint64_t v43 = v5;
  while (1)
  {
    uint64_t v9 = *((void *)v5 + 2);
    swift_bridgeObjectRetain();
    *(void *)&v49 = 0LL;
    *((void *)&v49 + 1) = 0xE000000000000000LL;
    char v40 = v9;
    if ((closure #1 in Parser.expectUnicodeScalarSequence(eating:)(v5, a1, a2, &v45) & 1) == 0)
    {
      while (1)
      {
        *(void *)&uint64_t v44 = v9;
        a1 = *((void *)v5 + 1);
        uint64_t v8 = *((void *)v5 + 2);
        unint64_t v3 = *((void *)v5 + 3);
        __int128 v5 = (char *)*((void *)v5 + 9);
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v13 = String.subscript.getter();
        uint64_t v15 = v14;
        swift_bridgeObjectRelease();
        if (!((v13 ^ v15) >> 14))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          a2 = v42;
          swift_bridgeObjectRelease();
          __int128 v5 = v43;
          a1 = v41;
          goto LABEL_25;
        }

        *(void *)&uint64_t v44 = Substring.subscript.getter();
        uint64_t v17 = v16;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        String.subscript.getter();
        swift_bridgeObjectRelease();
        uint64_t v9 = Substring.index(_:offsetBy:limitedBy:)();
        a2 = v18;
        swift_bridgeObjectRelease();
        if ((a2 & 1) == 0) {
          break;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          __int128 v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v5 + 2) + 1LL,  1,  v5);
        }
        uint64_t v20 = *((void *)v5 + 2);
        int v19 = *((void *)v5 + 3);
        if (v20 >= v19 >> 1) {
          __int128 v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v19 > 1),  v20 + 1,  1,  v5);
        }
        *((void *)v5 + 2) = v20 + 1;
        int v21 = &v5[80 * v20];
        v21[32] = 0;
        *((void *)v21 + 5) = 0xD000000000000022LL;
        *((void *)v21 + 6) = 0x8000000181009440LL;
        *((void *)v21 + 7) = v8;
        *((void *)v21 + 8) = v8;
        *(_OWORD *)(v21 + 72) = 0u;
        *(_OWORD *)(v21 + 88) = 0u;
        v21[104] = -1;
        *((void *)v43 + 9) = v5;
        swift_bridgeObjectRetain();
        String.subscript.getter();
        swift_bridgeObjectRelease();
        uint64_t v22 = Substring.distance(from:to:)();
        swift_bridgeObjectRelease();
        if (v22 < 1)
        {
          uint64_t v9 = v8;
          __int128 v5 = v43;
        }

        else
        {
          swift_bridgeObjectRetain();
          String.subscript.getter();
          uint64_t v23 = v3;
          swift_bridgeObjectRelease();
          unint64_t v3 = Substring.index(_:offsetBy:limitedBy:)();
          a2 = v24;
          swift_bridgeObjectRelease();
          uint64_t v9 = v8;
          __int128 v5 = v43;
          if ((a2 & 1) == 0)
          {
            if (v23 >> 14 < v3 >> 14) {
              goto LABEL_43;
            }
            uint64_t v9 = v3;
            unint64_t v3 = v23;
LABEL_23:
            *((void *)v5 + 2) = v9;
            *((void *)v5 + 3) = v3;
          }
        }

        MEMORY[0x186E0535C](v44, v17);
        swift_bridgeObjectRelease();
        a1 = v41;
        a2 = v42;
        if ((closure #1 in Parser.expectUnicodeScalarSequence(eating:)(v5, v41, v42, &v45) & 1) != 0) {
          goto LABEL_25;
        }
      }

      if (v3 >> 14 < v9 >> 14)
      {
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        unint64_t v3 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v3 + 16) + 1LL,  1,  (char *)v3,  &demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Trivia>);
LABEL_3:
        int v11 = *(void *)(v3 + 16);
        uint64_t v10 = *(void *)(v3 + 24);
        if (v11 >= v10 >> 1) {
          unint64_t v3 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v10 > 1),  v11 + 1,  1,  (char *)v3,  &demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Trivia>);
        }
        *(void *)(v3 + 16) = v11 + 1;
        uint64_t v12 = v3 + 32 * v11;
        *(void *)(v12 + 32) = v9;
        *(void *)(v12 + 40) = v8;
        *(_OWORD *)(v12 + 48) = v44;
        char v45 = (char *)v3;
        goto LABEL_6;
      }

      __int128 v5 = v43;
      goto LABEL_23;
    }

  uint64_t v30 = v29;
  uint64_t v31 = *(void *)(v26 + 16);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v32 = String.subscript.getter();
  uint64_t v34 = v33;
  if (!((v32 ^ v35) >> 14))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    uint64_t v36 = v109;
LABEL_37:
    v75._object = (void *)0x80000001810094C0LL;
    v75._countAndFlagsBits = 0xD000000000000017LL;
    Parser.unreachable(_:)(v75);
    v60 = type metadata accessor for AST.Atom.Kind(0LL);
    v61 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v60 - 8) + 56LL);
    v62 = v36;
    v63 = 1LL;
    return v61(v62, v63, 1LL, v60);
  }

  v66 = v26;
  v67 = Substring.subscript.getter();
  v69 = v68;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  Parser.advance(_:)(1LL);
  v70 = *(void *)(v66 + 16);
  v71 = (char *)(v70 >> 14);
  if (v70 >> 14 < v31 >> 14)
  {
    __break(1u);
    goto LABEL_92;
  }

  uint64_t v36 = v109;
  if (!v69) {
    goto LABEL_37;
  }
  if (v67 == 41 && v69 == 0xE100000000000000LL
    || ((v94 = _stringCompareWithSmolCheck(_:_:expecting:)(), v67 == 124)
      ? (v95 = v69 == 0xE100000000000000LL)
      : (v95 = 0),
        (uint64_t v36 = v109, !v95) ? (v96 = 0) : (v96 = 1),
        (v94 & 1) != 0 || (v96 & 1) != 0 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if ((v30 & 1) != 0)
    {
LABEL_35:
      *uint64_t v36 = v67;
      v36[1] = v69;
LABEL_36:
      uint64_t v44 = type metadata accessor for AST.Atom.Kind(0LL);
      goto LABEL_11;
    }

    v72 = 0xD00000000000001DLL;
    v73 = "Is as a termination condition";
LABEL_34:
    v74 = (unint64_t)(v73 - 32) | 0x8000000000000000LL;
    Parser.unreachable(_:)(*(Swift::String *)&v72);
    goto LABEL_35;
  }

  if (v67 == 40 && v69 == 0xE100000000000000LL)
  {
    if ((v30 & 1) != 0) {
      goto LABEL_63;
    }
    goto LABEL_67;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0 && (v30 & 1) == 0)
  {
LABEL_67:
    v72 = 0xD00000000000002CLL;
    v73 = "Should have lexed a group or group-like atom";
    goto LABEL_34;
  }

  if (v67 == 46 && v69 == 0xE100000000000000LL) {
    goto LABEL_70;
  }
LABEL_63:
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
LABEL_70:
    swift_bridgeObjectRelease();
    if ((v30 & 1) == 0) {
      goto LABEL_36;
    }
    v97 = 46LL;
    goto LABEL_77;
  }

  if (v67 == 94 && v69 == 0xE100000000000000LL || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    if ((v30 & 1) == 0) {
      goto LABEL_36;
    }
    v97 = 94LL;
    goto LABEL_77;
  }

  if (v67 == 36 && v69 == 0xE100000000000000LL || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    if ((v30 & 1) == 0) {
      goto LABEL_36;
    }
    v97 = 36LL;
LABEL_77:
    *uint64_t v36 = v97;
    v36[1] = 0xE100000000000000LL;
    goto LABEL_36;
  }

  if (v67 == 92 && v69 == 0xE100000000000000LL || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v98 = (uint64_t)v113;
    closure #1 in Parser.expectEscaped()((uint64_t)v113, v108);
    if ((unint64_t)v71 <= *(void *)(v98 + 16) >> 14)
    {
      v99 = (uint64_t)v109;
      outlined init with take of AST.Atom.Kind((uint64_t)v108, (uint64_t)v109, type metadata accessor for AST.Atom.Kind);
      v60 = type metadata accessor for AST.Atom.Kind(0LL);
      v61 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v60 - 8) + 56LL);
      v62 = (void *)v99;
      goto LABEL_21;
    }

    __break(1u);
    goto LABEL_112;
  }

Swift::Int AST.Reference.Kind.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Reference.Kind()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Reference.Kind()
{
  return Hasher._finalize()();
}

uint64_t AST.Reference.kind.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  char v6 = *(_BYTE *)(v1 + 32);
  *(_BYTE *)(a1 + 32) = v6;
  return outlined copy of AST.Reference.Kind(v2, v3, v4, v5, v6);
}

__n128 AST.Reference.kind.setter(__n128 *a1)
{
  __n128 v6 = *a1;
  unint64_t v2 = a1[1].n128_u64[0];
  unint64_t v3 = a1[1].n128_u64[1];
  unsigned __int8 v4 = a1[2].n128_u8[0];
  outlined consume of AST.Reference.Kind( *(void *)v1,  *(void *)(v1 + 8),  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(_BYTE *)(v1 + 32));
  __n128 result = v6;
  *(__n128 *)uint64_t v1 = v6;
  *(void *)(v1 + 16) = v2;
  *(void *)(v1 + 24) = v3;
  *(_BYTE *)(v1 + 32) = v4;
  return result;
}

uint64_t (*AST.Reference.kind.modify())()
{
  return AST.root.modify;
}

__n128 AST.Reference.recursionLevel.getter@<Q0>(uint64_t a1@<X8>)
{
  char v2 = *(_BYTE *)(v1 + 72);
  __n128 result = *(__n128 *)(v1 + 40);
  __int128 v4 = *(_OWORD *)(v1 + 56);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = v2;
  return result;
}

__n128 AST.Reference.recursionLevel.setter(uint64_t a1)
{
  char v2 = *(_BYTE *)(a1 + 32);
  __n128 result = *(__n128 *)a1;
  __int128 v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 40) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 56) = v4;
  *(_BYTE *)(v1 + 72) = v2;
  return result;
}

uint64_t (*AST.Reference.recursionLevel.modify())()
{
  return AST.root.modify;
}

__n128 AST.Reference.innerLoc.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = v1[5];
  *a1 = result;
  return result;
}

__n128 AST.Reference.innerLoc.setter(__n128 *a1)
{
  __n128 result = *a1;
  v1[5] = *a1;
  return result;
}

uint64_t (*AST.Reference.innerLoc.modify())()
{
  return AST.root.modify;
}

__n128 AST.Reference.init(_:recursionLevel:innerLoc:)@<Q0>( uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X2>, uint64_t a4@<X8>)
{
  __int128 v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a4 = *(_OWORD *)a1;
  *(_OWORD *)(a4 + 16) = v4;
  __int128 v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a4 + 40) = *(_OWORD *)a2;
  char v6 = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a4 + 32) = *(_BYTE *)(a1 + 32);
  *(_OWORD *)(a4 + 56) = v5;
  *(_BYTE *)(a4 + 72) = v6;
  __n128 result = *a3;
  *(__n128 *)(a4 + 80) = *a3;
  return result;
}

BOOL AST.Reference.recursesWholePattern.getter()
{
  return !*(_BYTE *)(v0 + 32) && (*(void *)(v0 + 8) & 1LL | *(void *)v0) == 0;
}

void AST.Reference.hash(into:)()
{
  Swift::UInt v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(void *)(v0 + 48);
  unint64_t v4 = *(void *)(v0 + 56);
  unint64_t v3 = *(void *)(v0 + 64);
  char v5 = *(_BYTE *)(v0 + 72);
  unint64_t v7 = *(void *)(v0 + 80);
  unint64_t v6 = *(void *)(v0 + 88);
  AST.Reference.Kind.hash(into:)();
  if ((v5 & 1) != 0)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    if ((v2 & 1) != 0)
    {
      Hasher._combine(_:)(0);
    }

    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v1);
    }

    Hasher._combine(_:)(v4 >> 14);
    Hasher._combine(_:)(v3 >> 14);
  }

  Hasher._combine(_:)(v7 >> 14);
  Hasher._combine(_:)(v6 >> 14);
}

Swift::Int AST.Reference.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Reference()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Reference()
{
  return Hasher._finalize()();
}

uint64_t (*AST.GlobalMatchingOptionSequence.options.modify())()
{
  return AST.root.modify;
}

_RegexParser::AST::GlobalMatchingOptionSequence_optional __swiftcall AST.GlobalMatchingOptionSequence.init(_:)( Swift::OpaquePointer a1)
{
  uint64_t v2 = v1;
  if (!*((void *)a1._rawValue + 2))
  {
    swift_bridgeObjectRelease();
    a1._rawValue = 0LL;
  }

  v2->_rawValue = a1._rawValue;
  result.value.options = a1;
  result.is_nil = v3;
  return result;
}

void AST.GlobalMatchingOptionSequence.location.getter(uint64x2_t *a1@<X8>)
{
  uint64_t v2 = *v1;
  uint64_t v3 = (*v1)[1].i64[0];
  if (v3)
  {
    unint64_t v4 = (uint64x2_t *)&v2[3 * v3];
    int8x16_t v5 = v2[4];
    int8x16_t v6 = (int8x16_t)vcgtq_u64(vshrq_n_u64((uint64x2_t)v5, 0xEuLL), vshrq_n_u64(v4[1], 0xEuLL));
    v7.i64[0] = v4[1].i64[0];
    v7.i64[1] = v2[4].i64[1];
    v5.i64[1] = v4[1].i64[1];
    uint64x2_t v8 = (uint64x2_t)vbslq_s8(v6, v7, v5);
    int64x2_t v9 = (int64x2_t)vshrq_n_u64(v8, 0xEuLL);
    if ((vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)v9, (uint64x2_t)vdupq_laneq_s64(v9, 1))).u8[0] & 1) == 0)
    {
      *a1 = v8;
      return;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
}

uint64x2_t *Source.Location.union(with:)@<X0>(uint64x2_t *result@<X0>, uint64x2_t *a2@<X8>)
{
  int8x16_t v3 = *(int8x16_t *)v2;
  v4.i64[0] = result->i64[0];
  v4.i64[1] = v2->i64[1];
  v3.i64[1] = result->i64[1];
  uint64x2_t v5 = (uint64x2_t)vbslq_s8((int8x16_t)vcgtq_u64(vshrq_n_u64(*v2, 0xEuLL), vshrq_n_u64(*result, 0xEuLL)), v4, v3);
  int64x2_t v6 = (int64x2_t)vshrq_n_u64(v5, 0xEuLL);
  else {
    *a2 = v5;
  }
  return result;
}

void AST.GlobalMatchingOptionSequence.hash(into:)(uint64_t a1)
{
}

uint64_t static AST.GlobalMatchingOptionSequence.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

Swift::Int AST.GlobalMatchingOptionSequence.hashValue.getter()
{
  return AST.GlobalMatchingOptionSequence.hashValue.getter((void (*)(_BYTE *, uint64_t))specialized Array<A>.hash(into:));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.GlobalMatchingOptionSequence( uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance AST.GlobalMatchingOptionSequence( a1,  a2,  (void (*)(_BYTE *, uint64_t))specialized Array<A>.hash(into:));
}

void protocol witness for Hashable.hash(into:) in conformance AST.GlobalMatchingOptionSequence(uint64_t a1)
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.GlobalMatchingOptionSequence( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance AST.GlobalMatchingOptionSequence( a1,  a2,  a3,  (void (*)(_BYTE *, uint64_t))specialized Array<A>.hash(into:));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AST.GlobalMatchingOptionSequence( uint64_t *a1, uint64_t *a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

uint64_t protocol witness for _ASTParent.children.getter in conformance AST.Concatenation()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for _ASTParent.children.getter in conformance AST.Group()
{
  uint64_t v1 = *(void *)(v0 + 104);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Node>);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_181005EB0;
  *(void *)(v2 + 32) = v1;
  swift_retain();
  return v2;
}

__n128 protocol witness for _ASTNode.location.getter in conformance AST.Group@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = v1[7];
  *a1 = result;
  return result;
}

__n128 AST.Group.location.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = v1[7];
  *a1 = result;
  return result;
}

__n128 AST.Quantification.location.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = v1[7];
  *a1 = result;
  return result;
}

void AST.AbsentFunction.children.getter()
{
  __asm { BR              X10 }

uint64_t sub_180F83098()
{
  uint64_t v4 = v1 + 24;
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v3 = *(void *)(v4 + 8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Node>);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_181005EB0;
  *(void *)(v6 + 32) = v2;
  outlined copy of AST.AbsentFunction.Kind(v2, v5, v3, v0);
  return v6;
}

void protocol witness for _ASTParent.children.getter in conformance AST.AbsentFunction()
{
  __asm { BR              X10 }

uint64_t sub_180F83180()
{
  uint64_t v4 = v1 + 24;
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v3 = *(void *)(v4 + 8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Node>);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_181005EB0;
  *(void *)(v6 + 32) = v2;
  outlined copy of AST.AbsentFunction.Kind(v2, v5, v3, v0);
  return v6;
}

uint64_t AST.Atom.kind.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of AST.Atom(v1, a1, type metadata accessor for AST.Atom.Kind);
}

__n128 AST.Atom.location.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = *(__n128 *)(v1 + *(int *)(type metadata accessor for AST.Atom(0LL) + 20));
  *a1 = result;
  return result;
}

uint64_t AST.Atom.init(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  outlined init with take of AST.Atom.Kind(a1, a3, type metadata accessor for AST.Atom.Kind);
  uint64_t result = type metadata accessor for AST.Atom(0LL);
  int8x16_t v7 = (void *)(a3 + *(int *)(result + 20));
  *int8x16_t v7 = v4;
  v7[1] = v5;
  return result;
}

void AST.Atom.Kind.hash(into:)()
{
  uint64_t v1 = type metadata accessor for AST.Atom.CharacterProperty(0LL);
  MEMORY[0x1895F8858](v1, v2);
  uint64_t v3 = type metadata accessor for AST.Atom.Kind(0LL);
  MEMORY[0x1895F8858](v3, v4);
  outlined init with copy of AST.Atom(v0, (uint64_t)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL), v6);
  int8x16_t v7 = (char *)sub_180F833A4 + 4 * byte_180FFF9EA[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }

uint64_t sub_180F833A4()
{
  return swift_bridgeObjectRelease();
}

BOOL static AST.Atom.Scalar.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 != *(_DWORD *)a2) {
    return 0LL;
  }
  return (*(void *)(a1 + 8) ^ *(void *)(a2 + 8)) < 0x4000LL
      && (*(void *)(a1 + 16) ^ *(void *)(a2 + 16)) < 0x4000uLL;
}

uint64_t static AST.Atom.ScalarSequence.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a2[1];
  if (specialized static Array<A>.== infix(_:_:)(*a1, *a2)) {
    char v4 = specialized static Array<A>.== infix(_:_:)(v2, v3);
  }
  else {
    char v4 = 0;
  }
  return v4 & 1;
}

uint64_t static AST.Atom.CharacterProperty.== infix(_:_:)(uint64_t a1, char *a2)
{
  specialized static AST.Atom.CharacterProperty.Kind.== infix(_:_:)(a1, a2);
  if ((v4 & 1) != 0
    && (uint64_t v5 = type metadata accessor for AST.Atom.CharacterProperty(0LL),
        *(unsigned __int8 *)(a1 + *(int *)(v5 + 20)) == a2[*(int *)(v5 + 20)]))
  {
    char v6 = *(_BYTE *)(a1 + *(int *)(v5 + 24)) ^ a2[*(int *)(v5 + 24)] ^ 1;
  }

  else
  {
    char v6 = 0;
  }

  return v6 & 1;
}

Swift::Int AST.Atom.Kind.hashValue.getter()
{
  return AST.Atom.Kind.hashValue.getter((void (*)(_BYTE *))AST.Atom.Kind.hash(into:));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Atom.Kind( uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance AST.Atom.Kind( a1,  a2,  (void (*)(_BYTE *))AST.Atom.Kind.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.Kind( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.Kind( a1,  a2,  a3,  (void (*)(_BYTE *))AST.Atom.Kind.hash(into:));
}

void AST.Atom.hash(into:)()
{
  uint64_t v1 = (void *)(v0 + *(int *)(type metadata accessor for AST.Atom(0LL) + 20));
  unint64_t v2 = v1[1];
  Hasher._combine(_:)(*v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
}

Swift::Int AST.Atom.hashValue.getter()
{
  uint64_t v1 = (void *)(v0 + *(int *)(type metadata accessor for AST.Atom(0LL) + 20));
  unint64_t v2 = v1[1];
  Hasher._combine(_:)(*v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Atom(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + *(int *)(a1 + 20));
  unint64_t v4 = v3[1];
  Hasher._combine(_:)(*v3 >> 14);
  Hasher._combine(_:)(v4 >> 14);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AST.Atom(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (void *)(v2 + *(int *)(a2 + 20));
  unint64_t v5 = v4[1];
  Hasher._combine(_:)(*v4 >> 14);
  Hasher._combine(_:)(v5 >> 14);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom( uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (void *)(v2 + *(int *)(a2 + 20));
  unint64_t v5 = v4[1];
  Hasher._combine(_:)(*v4 >> 14);
  Hasher._combine(_:)(v5 >> 14);
  return Hasher._finalize()();
}

__n128 protocol witness for _ASTNode.location.getter in conformance AST.Atom@<Q0>( uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *(__n128 *)(v2 + *(int *)(a1 + 20));
  *a2 = result;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AST.Atom( uint64_t a1, uint64_t a2, uint64_t a3)
{
  specialized static AST.Atom.Kind.== infix(_:_:)(a1, a2);
  BOOL result = 0;
  if ((v6 & 1) != 0)
  {
    uint64_t v7 = *(int *)(a3 + 20);
    uint64_t v8 = a1 + v7;
    unint64_t v9 = *(void *)(a1 + v7);
    uint64_t v10 = (void *)(a2 + v7);
    if (!((*v10 ^ v9) >> 14) && (*(void *)(v8 + 8) ^ v10[1]) < 0x4000LL) {
      return 1;
    }
  }

  return result;
}

uint64_t AST.Atom._dumpBase.getter()
{
  uint64_t v1 = type metadata accessor for AST.Atom.CharacterProperty(0LL);
  MEMORY[0x1895F8858](v1, v2);
  uint64_t v3 = type metadata accessor for AST.Atom.Kind(0LL);
  MEMORY[0x1895F8858](v3, v4);
  char v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  AST.Atom.literalStringValue.getter();
  if (!v8)
  {
    outlined init with copy of AST.Atom(v0, (uint64_t)v6, type metadata accessor for AST.Atom.Kind);
    int v11 = (char *)&loc_180F83CD4 + *((int *)qword_180F84428 + swift_getEnumCaseMultiPayload());
    __asm { BR              X10 }
  }

  uint64_t v13 = 10665455LL;
  unint64_t v14 = 0xA300000000000000LL;
  String.append(_:)(*(Swift::String *)&v7);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 10730991LL;
  v9._object = (void *)0xA300000000000000LL;
  String.append(_:)(v9);
  return v13;
}

void sub_180F83CE4()
{
  *(_DWORD *)(v0 + 16) = *(unsigned __int8 *)(v3 + 72);
  uint64_t v5 = *(void *)(v3 + 48);
  *(void *)uint64_t v0 = *(void *)(v3 + 40);
  *(void *)(v0 + 8) = v5;
  char v6 = *(_BYTE *)(v3 + 32);
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v7 = *(void *)(v3 + 24);
  uint64_t v11 = v3;
  uint64_t v9 = *(void *)v3;
  uint64_t v10 = *(void *)(v11 + 8);
  *(void *)(v0 + 32) = 0LL;
  *(void *)(v0 + 40) = 0xE000000000000000LL;
  *(void *)(v4 - 248) = v9;
  *(void *)(v4 - 240) = v10;
  *(void *)(v4 - 232) = v8;
  *(void *)(v4 - 224) = v7;
  *(_BYTE *)(v4 - 216) = v6;
  _print_unlocked<A, B>(_:_:)();
  uint64_t v12 = *(void *)(v0 + 40);
  *(void *)(v0 + 184) = *(void *)(v0 + 32);
  *(void *)(v0 + 192) = v12;
  if ((*(_DWORD *)(v0 + 16) & 1) != 0)
  {
    outlined consume of AST.Reference.Kind(v9, v10, v8, v7, v6);
  }

  else
  {
    char v13 = *(void *)(v0 + 8) & 1;
    *(_BYTE *)(v4 - 248) = v13;
    if ((v13 & 1) == 0)
    {
      *(void *)(v4 - 248) = *(void *)v0;
      uint64_t v1 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v2 = v14;
    }

    v15._countAndFlagsBits = v1;
    v15._object = v2;
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    outlined consume of AST.Reference.Kind(v9, v10, v8, v7, v6);
  }

  JUMPOUT(0x180F83C68LL);
}

void sub_180F84214()
{
}

void sub_180F84378()
{
}

uint64_t AST.Atom.Number.value.getter()
{
  return *(void *)v0;
}

uint64_t AST.Atom.Number.value.setter(uint64_t result, char a2)
{
  *(void *)uint64_t v2 = result;
  *(_BYTE *)(v2 + 8) = a2 & 1;
  return result;
}

uint64_t (*AST.Atom.Number.value.modify())()
{
  return AST.root.modify;
}

__n128 AST.Atom.Number.location.setter(__n128 *a1)
{
  __n128 result = *a1;
  v1[1] = *a1;
  return result;
}

uint64_t (*AST.Atom.Number.location.modify())()
{
  return AST.root.modify;
}

void AST.Atom.Number.hash(into:)()
{
  unint64_t v2 = *(void *)(v0 + 16);
  unint64_t v1 = *(void *)(v0 + 24);
  if (*(_BYTE *)(v0 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt v3 = *(void *)v0;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3);
  }

  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v1 >> 14);
}

Swift::Int AST.Atom.Number.hashValue.getter()
{
  Swift::UInt v1 = *(void *)v0;
  int v2 = *(unsigned __int8 *)(v0 + 8);
  unint64_t v4 = *(void *)(v0 + 16);
  unint64_t v3 = *(void *)(v0 + 24);
  Hasher.init(_seed:)();
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }

  Hasher._combine(_:)(v4 >> 14);
  Hasher._combine(_:)(v3 >> 14);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Atom.Number()
{
  Swift::UInt v1 = *(void *)v0;
  int v2 = *(unsigned __int8 *)(v0 + 8);
  unint64_t v4 = *(void *)(v0 + 16);
  unint64_t v3 = *(void *)(v0 + 24);
  Hasher.init(_seed:)();
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }

  Hasher._combine(_:)(v4 >> 14);
  Hasher._combine(_:)(v3 >> 14);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AST.Atom.Number()
{
  unint64_t v2 = *(void *)(v0 + 16);
  unint64_t v1 = *(void *)(v0 + 24);
  if (*(_BYTE *)(v0 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt v3 = *(void *)v0;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3);
  }

  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v1 >> 14);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.Number()
{
  Swift::UInt v1 = *(void *)v0;
  int v2 = *(unsigned __int8 *)(v0 + 8);
  unint64_t v4 = *(void *)(v0 + 16);
  unint64_t v3 = *(void *)(v0 + 24);
  Hasher.init(_seed:)();
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }

  Hasher._combine(_:)(v4 >> 14);
  Hasher._combine(_:)(v3 >> 14);
  return Hasher._finalize()();
}

uint64_t AST.Atom.Scalar.value.getter()
{
  return *v0;
}

uint64_t AST.Atom.Scalar.value.setter(uint64_t result)
{
  _DWORD *v1 = result;
  return result;
}

uint64_t (*AST.Atom.Scalar.value.modify())()
{
  return AST.root.modify;
}

uint64_t (*AST.Atom.Scalar.location.modify())()
{
  return AST.root.modify;
}

__n128 AST.Atom.Scalar.init(_:_:)@<Q0>(int a1@<W0>, __n128 *a2@<X1>, uint64_t a3@<X8>)
{
  *(_DWORD *)a3 = a1;
  __n128 result = *a2;
  *(__n128 *)(a3 + 8) = *a2;
  return result;
}

void AST.Atom.Scalar.hash(into:)()
{
  unint64_t v1 = *(void *)(v0 + 8);
  unint64_t v2 = *(void *)(v0 + 16);
  Hasher._combine(_:)(*(_DWORD *)v0);
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
}

Swift::Int AST.Atom.Scalar.hashValue.getter()
{
  Swift::UInt32 v1 = *(_DWORD *)v0;
  unint64_t v2 = *(void *)(v0 + 8);
  unint64_t v3 = *(void *)(v0 + 16);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v3 >> 14);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Atom.Scalar()
{
  Swift::UInt32 v1 = *(_DWORD *)v0;
  unint64_t v2 = *(void *)(v0 + 8);
  unint64_t v3 = *(void *)(v0 + 16);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v3 >> 14);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AST.Atom.Scalar()
{
  unint64_t v1 = *(void *)(v0 + 8);
  unint64_t v2 = *(void *)(v0 + 16);
  Hasher._combine(_:)(*(_DWORD *)v0);
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.Scalar()
{
  Swift::UInt32 v1 = *(_DWORD *)v0;
  unint64_t v2 = *(void *)(v0 + 8);
  unint64_t v3 = *(void *)(v0 + 16);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v3 >> 14);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AST.Atom.Scalar( uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 != *(_DWORD *)a2) {
    return 0LL;
  }
  return (*(void *)(a1 + 8) ^ *(void *)(a2 + 8)) < 0x4000LL
      && (*(void *)(a1 + 16) ^ *(void *)(a2 + 16)) < 0x4000uLL;
}

uint64_t AST.Atom.ScalarSequence.scalars.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v1 = a1;
  return result;
}

uint64_t (*AST.Atom.ScalarSequence.scalars.modify())()
{
  return AST.root.modify;
}

uint64_t AST.Atom.ScalarSequence.trivia.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*AST.Atom.ScalarSequence.trivia.modify())()
{
  return AST.root.modify;
}

_RegexParser::AST::Atom::ScalarSequence __swiftcall AST.Atom.ScalarSequence.init(_:trivia:)( Swift::OpaquePointer _, Swift::OpaquePointer trivia)
{
  if (*((void *)_._rawValue + 2) < 2uLL)
  {
    __break(1u);
  }

  else
  {
    v2->_rawValue = _._rawValue;
    v2[1]._rawValue = trivia._rawValue;
  }

  result.trivia = trivia;
  result.scalars = _;
  return result;
}

uint64_t AST.Atom.ScalarSequence.scalarValues.getter()
{
  uint64_t v1 = *v0;
  int64_t v2 = *(void *)(*v0 + 16);
  uint64_t result = MEMORY[0x18961AFE8];
  if (v2)
  {
    uint64_t v9 = MEMORY[0x18961AFE8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0LL, v2, 0);
    unint64_t v4 = 0LL;
    uint64_t result = v9;
    uint64_t v5 = (int *)(v1 + 32);
    while (v4 < *(void *)(v1 + 16))
    {
      int v6 = *v5;
      uint64_t v10 = result;
      unint64_t v8 = *(void *)(result + 16);
      unint64_t v7 = *(void *)(result + 24);
      if (v8 >= v7 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v7 > 1),  v8 + 1,  1);
        uint64_t result = v10;
      }

      ++v4;
      *(void *)(result + 16) = v8 + 1;
      *(_DWORD *)(result + 4 * v8 + 32) = v6;
      v5 += 6;
      if (v2 == v4) {
        return result;
      }
    }

    __break(1u);
  }

  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF( void (*a1)(char *, char *), uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v30 = a5;
  uint64_t v31 = a8;
  uint64_t v36 = a1;
  uint64_t v37 = a2;
  uint64_t v29 = *(void *)(a5 - 8);
  MEMORY[0x1895F8858](a1, a2);
  uint64_t v38 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v13 = MEMORY[0x1895F8858](AssociatedTypeWitness, v12);
  uint64_t v34 = (char *)&v27 - v14;
  uint64_t v39 = a4;
  MEMORY[0x1895F8858](v13, v15);
  unint64_t v33 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = swift_getAssociatedTypeWitness();
  uint64_t v32 = *(void *)(v17 - 8);
  MEMORY[0x1895F8858](v17, v18);
  uint64_t v20 = (char *)&v27 - v19;
  uint64_t v21 = dispatch thunk of Collection.count.getter();
  if (!v21) {
    return static Array._allocateUninitialized(_:)();
  }
  Swift::Int v22 = v21;
  uint64_t v28 = v17;
  uint64_t v42 = MEMORY[0x186E05668](v39);
  uint64_t v35 = type metadata accessor for ContiguousArray();
  ContiguousArray.reserveCapacity(_:)(v22);
  uint64_t v39 = v20;
  uint64_t result = dispatch thunk of Collection.startIndex.getter();
  if (v22 < 0)
  {
    __break(1u);
  }

  else
  {
    char v24 = v34;
    while (1)
    {
      uint64_t v25 = (void (*)(char *, void))dispatch thunk of Collection.subscript.read();
      (*(void (**)(char *))(v11 + 16))(v24);
      v25(v41, 0LL);
      uint64_t v26 = v40;
      v36(v24, v38);
      if (v26) {
        break;
      }
      uint64_t v40 = 0LL;
      (*(void (**)(char *, uint64_t))(v11 + 8))(v24, AssociatedTypeWitness);
      ContiguousArray.append(_:)();
      dispatch thunk of Collection.formIndex(after:)();
      if (!--v22)
      {
        (*(void (**)(char *, uint64_t))(v32 + 8))(v39, v28);
        return v42;
      }
    }

    (*(void (**)(char *, uint64_t))(v11 + 8))(v24, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v39, v28);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v29 + 32))(v31, v38, v30);
  }

  return result;
}

uint64_t AST.Atom.ScalarSequence.hash(into:)(uint64_t a1)
{
  return AST.Alternation.hash(into:)( a1,  specialized Array<A>.hash(into:),  (uint64_t (*)(uint64_t, uint64_t))specialized Array<A>.hash(into:));
}

uint64_t AST.Alternation.hash(into:)( uint64_t a1, void (*a2)(uint64_t, uint64_t), uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v6 = *v3;
  uint64_t v7 = v3[1];
  a2(a1, v6);
  return a3(a1, v7);
}

Swift::Int AST.Atom.ScalarSequence.hashValue.getter()
{
  return AST.Alternation.hashValue.getter( (void (*)(_BYTE *, uint64_t))specialized Array<A>.hash(into:),  (void (*)(_BYTE *, uint64_t))specialized Array<A>.hash(into:));
}

Swift::Int AST.Alternation.hashValue.getter( void (*a1)(_BYTE *, uint64_t), void (*a2)(_BYTE *, uint64_t))
{
  uint64_t v6 = *v2;
  uint64_t v5 = v2[1];
  Hasher.init(_seed:)();
  a1(v8, v6);
  a2(v8, v5);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Atom.ScalarSequence( uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance AST.Alternation( a1,  a2,  (void (*)(_BYTE *, uint64_t))specialized Array<A>.hash(into:),  (void (*)(_BYTE *, uint64_t))specialized Array<A>.hash(into:));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Alternation( uint64_t a1, uint64_t a2, void (*a3)(_BYTE *, uint64_t), void (*a4)(_BYTE *, uint64_t))
{
  uint64_t v8 = *v4;
  uint64_t v7 = v4[1];
  Hasher.init(_seed:)();
  a3(v10, v8);
  a4(v10, v7);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AST.Atom.ScalarSequence( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable.hash(into:) in conformance AST.Alternation( a1,  a2,  a3,  specialized Array<A>.hash(into:),  (uint64_t (*)(uint64_t, uint64_t))specialized Array<A>.hash(into:));
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AST.Alternation( uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v7 = *v5;
  uint64_t v8 = v5[1];
  a4(a1, v7);
  return a5(a1, v8);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.ScalarSequence( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Alternation( a1,  a2,  a3,  (void (*)(_BYTE *, uint64_t))specialized Array<A>.hash(into:),  (void (*)(_BYTE *, uint64_t))specialized Array<A>.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Alternation( uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_BYTE *, uint64_t), void (*a5)(_BYTE *, uint64_t))
{
  uint64_t v9 = *v5;
  uint64_t v8 = v5[1];
  Hasher.init(_seed:)();
  a4(v11, v9);
  a5(v11, v8);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AST.Atom.ScalarSequence( uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a2[1];
  if (specialized static Array<A>.== infix(_:_:)(*a1, *a2)) {
    char v4 = specialized static Array<A>.== infix(_:_:)(v2, v3);
  }
  else {
    char v4 = 0;
  }
  return v4 & 1;
}

uint64_t AST.Atom.EscapedBuiltin.character.getter()
{
  return qword_181005A10[*v0];
}

uint64_t static AST.Atom.EscapedBuiltin.fromCharacter(_:inCustomCharacterClass:)@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, char *a4@<X8>)
{
  uint64_t v6 = result;
  if (result == 97 && a2 == 0xE100000000000000LL)
  {
    char v8 = 0;
  }

  else
  {
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    char v8 = 0;
    if ((result & 1) == 0)
    {
      if (v6 == 101 && a2 == 0xE100000000000000LL
        || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
        char v8 = 1;
      }

      else if (v6 == 102 && a2 == 0xE100000000000000LL {
             || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      }
      {
        char v8 = 2;
      }

      else if (v6 == 110 && a2 == 0xE100000000000000LL {
             || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      }
      {
        char v8 = 3;
      }

      else if (v6 == 114 && a2 == 0xE100000000000000LL {
             || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      }
      {
        char v8 = 4;
      }

      else if (v6 == 116 && a2 == 0xE100000000000000LL {
             || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      }
      {
        char v8 = 5;
      }

      else if (v6 == 100 && a2 == 0xE100000000000000LL {
             || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      }
      {
        char v8 = 7;
      }

      else if (v6 == 68 && a2 == 0xE100000000000000LL {
             || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      }
      {
        char v8 = 8;
      }

      else if (v6 == 104 && a2 == 0xE100000000000000LL {
             || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      }
      {
        char v8 = 9;
      }

      else if (v6 == 72 && a2 == 0xE100000000000000LL {
             || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      }
      {
        char v8 = 10;
      }

      else if (v6 == 115 && a2 == 0xE100000000000000LL {
             || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      }
      {
        char v8 = 13;
      }

      else if (v6 == 83 && a2 == 0xE100000000000000LL {
             || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      }
      {
        char v8 = 14;
      }

      else if (v6 == 118 && a2 == 0xE100000000000000LL {
             || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      }
      {
        char v8 = 15;
      }

      else if (v6 == 86 && a2 == 0xE100000000000000LL {
             || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      }
      {
        char v8 = 16;
      }

      else if (v6 == 119 && a2 == 0xE100000000000000LL {
             || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      }
      {
        char v8 = 17;
      }

      else if (v6 == 87 && a2 == 0xE100000000000000LL {
             || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      }
      {
        char v8 = 18;
      }

      else if (v6 == 98 && a2 == 0xE100000000000000LL {
             || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      }
      {
        if ((a3 & 1) != 0) {
          char v8 = 19;
        }
        else {
          char v8 = 21;
        }
      }

      else if ((a3 & 1) != 0)
      {
        char v8 = 31;
      }

      else if (v6 == 67 && a2 == 0xE100000000000000LL {
             || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      }
      {
        char v8 = 6;
      }

      else if (v6 == 78 && a2 == 0xE100000000000000LL {
             || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      }
      {
        char v8 = 11;
      }

      else if (v6 == 82 && a2 == 0xE100000000000000LL {
             || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      }
      {
        char v8 = 12;
      }

      else if (v6 == 88 && a2 == 0xE100000000000000LL {
             || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      }
      {
        char v8 = 20;
      }

      else if (v6 == 66 && a2 == 0xE100000000000000LL {
             || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      }
      {
        char v8 = 22;
      }

      else if (v6 == 65 && a2 == 0xE100000000000000LL {
             || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      }
      {
        char v8 = 23;
      }

      else if (v6 == 90 && a2 == 0xE100000000000000LL {
             || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      }
      {
        char v8 = 24;
      }

      else if (v6 == 122 && a2 == 0xE100000000000000LL {
             || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      }
      {
        char v8 = 25;
      }

      else if (v6 == 71 && a2 == 0xE100000000000000LL {
             || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      }
      {
        char v8 = 26;
      }

      else if (v6 == 75 && a2 == 0xE100000000000000LL {
             || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      }
      {
        char v8 = 27;
      }

      else if (v6 == 79 && a2 == 0xE100000000000000LL {
             || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      }
      {
        char v8 = 28;
      }

      else if (v6 == 121 && a2 == 0xE100000000000000LL {
             || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      }
      {
        char v8 = 29;
      }

      else
      {
        char v8 = 30;
        if (v6 != 89 || a2 != 0xE100000000000000LL)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) != 0) {
            char v8 = 30;
          }
          else {
            char v8 = 31;
          }
        }
      }
    }
  }

  *a4 = v8;
  return result;
}

_RegexParser::AST::Atom::EscapedBuiltin_optional __swiftcall AST.Atom.EscapedBuiltin.init(_:inCustomCharacterClass:)( Swift::String _, Swift::Bool inCustomCharacterClass)
{
  uint64_t v3 = v2;
  static AST.Atom.EscapedBuiltin.fromCharacter(_:inCustomCharacterClass:)( _._countAndFlagsBits,  (uint64_t)_._object,  inCustomCharacterClass,  &v5);
  result.value = swift_bridgeObjectRelease();
  *uint64_t v3 = v5;
  return result;
}

uint64_t AST.Atom.CharacterProperty.kind.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of AST.Atom(v1, a1, type metadata accessor for AST.Atom.CharacterProperty.Kind);
}

uint64_t AST.Atom.CharacterProperty.kind.setter(uint64_t a1)
{
  return outlined assign with take of AST.Atom.CharacterProperty.Kind( a1,  v1,  type metadata accessor for AST.Atom.CharacterProperty.Kind);
}

uint64_t (*AST.Atom.CharacterProperty.kind.modify())()
{
  return AST.root.modify;
}

uint64_t AST.Atom.CharacterProperty.isInverted.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AST.Atom.CharacterProperty(0LL) + 20));
}

uint64_t AST.Atom.CharacterProperty.isInverted.setter(char a1)
{
  uint64_t result = type metadata accessor for AST.Atom.CharacterProperty(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*AST.Atom.CharacterProperty.isInverted.modify())(void)
{
  return AST.root.modify;
}

uint64_t AST.Atom.CharacterProperty.isPOSIX.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AST.Atom.CharacterProperty(0LL) + 24));
}

uint64_t AST.Atom.CharacterProperty.isPOSIX.setter(char a1)
{
  uint64_t result = type metadata accessor for AST.Atom.CharacterProperty(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*AST.Atom.CharacterProperty.isPOSIX.modify())(void)
{
  return AST.root.modify;
}

uint64_t AST.Atom.CharacterProperty.init(_:isInverted:isPOSIX:)@<X0>( uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = type metadata accessor for AST.Atom.CharacterProperty(0LL);
  *(_BYTE *)(a4 + *(int *)(result + 20)) = a2;
  *(_BYTE *)(a4 + *(int *)(result + 24)) = a3;
  return result;
}

uint64_t AST.Atom.CharacterProperty._dumpBase.getter()
{
  uint64_t v1 = type metadata accessor for AST.Atom.CharacterProperty(0LL);
  else {
    uint64_t v2 = 0x65736C6166LL;
  }
  else {
    unint64_t v3 = 0xE500000000000000LL;
  }
  unint64_t v4 = v3;
  String.append(_:)(*(Swift::String *)&v2);
  swift_bridgeObjectRelease();
  else {
    uint64_t v5 = 0x65736C6166LL;
  }
  else {
    unint64_t v6 = 0xE500000000000000LL;
  }
  unint64_t v7 = v6;
  String.append(_:)(*(Swift::String *)&v5);
  swift_bridgeObjectRelease();
  return 0LL;
}

void AST.Atom.CharacterProperty.hash(into:)()
{
  uint64_t v1 = type metadata accessor for AST.Atom.CharacterProperty(0LL);
  Hasher._combine(_:)(*(_BYTE *)(v0 + *(int *)(v1 + 20)));
  Hasher._combine(_:)(*(_BYTE *)(v0 + *(int *)(v1 + 24)));
}

Swift::Int AST.Atom.CharacterProperty.hashValue.getter()
{
  uint64_t v1 = type metadata accessor for AST.Atom.CharacterProperty(0LL);
  Hasher._combine(_:)(*(_BYTE *)(v0 + *(int *)(v1 + 20)));
  Hasher._combine(_:)(*(_BYTE *)(v0 + *(int *)(v1 + 24)));
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Atom.CharacterProperty( uint64_t a1)
{
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AST.Atom.CharacterProperty( uint64_t a1, uint64_t a2)
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.CharacterProperty( uint64_t a1, uint64_t a2)
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AST.Atom.CharacterProperty( uint64_t a1, char *a2, uint64_t a3)
{
  specialized static AST.Atom.CharacterProperty.Kind.== infix(_:_:)(a1, a2);
  else {
    char v7 = 0;
  }
  return v7 & 1;
}

void AST.Atom.CharacterProperty.Kind.hash(into:)()
{
  uint64_t v1 = type metadata accessor for Unicode.CanonicalCombiningClass();
  MEMORY[0x1895F8858](v1, v2);
  uint64_t v3 = type metadata accessor for Unicode.NumericType();
  MEMORY[0x1895F8858](v3, v4);
  uint64_t v5 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0LL);
  MEMORY[0x1895F8858](v5, v6);
  outlined init with copy of AST.Atom(v0, (uint64_t)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL), v8);
  uint64_t v9 = (char *)sub_180F85D1C + 4 * byte_180FFF9FC[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }

uint64_t sub_180F85D1C()
{
  char v2 = *v0;
  Hasher._combine(_:)(3uLL);
  *(_BYTE *)(v1 - 88) = v2;
  Unicode.ExtendedGeneralCategory.rawValue.getter();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

uint64_t specialized == infix<A>(_:_:)(char a1, char a2)
{
  if (*(void *)&aAlnum_1[8 * a1] == *(void *)&aAlnum_1[8 * a2] && qword_181005C18[a1] == qword_181005C18[a2]) {
    char v3 = 1;
  }
  else {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

{
  char v2;
  if (qword_181005B08[a1] == qword_181005B08[a2]) {
    char v2 = 1;
  }
  else {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease_n();
  return v2 & 1;
}

Swift::Int AST.Atom.CharacterProperty.Kind.hashValue.getter()
{
  return AST.Atom.Kind.hashValue.getter((void (*)(_BYTE *))AST.Atom.CharacterProperty.Kind.hash(into:));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Atom.CharacterProperty.Kind( uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance AST.Atom.Kind( a1,  a2,  (void (*)(_BYTE *))AST.Atom.CharacterProperty.Kind.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.CharacterProperty.Kind( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.Kind( a1,  a2,  a3,  (void (*)(_BYTE *))AST.Atom.CharacterProperty.Kind.hash(into:));
}

_RegexParser::AST::Atom::CharacterProperty::PCRESpecialCategory_optional __swiftcall AST.Atom.CharacterProperty.PCRESpecialCategory.init(rawValue:)( Swift::String rawValue)
{
  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  uint64_t v4 = v1;
  v3._object = object;
  unint64_t v5 = _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of AST.Atom.CharacterProperty.PCRESpecialCategory.init(rawValue:),  v3);
  result.value = swift_bridgeObjectRelease();
  char v7 = 5;
  if (v5 < 5) {
    char v7 = v5;
  }
  *uint64_t v4 = v7;
  return result;
}

uint64_t AST.Atom.CharacterProperty.PCRESpecialCategory.rawValue.getter()
{
  return qword_181005B08[*v0];
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AST.Atom.CharacterProperty.PCRESpecialCategory( char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

_RegexParser::AST::Atom::CharacterProperty::PCRESpecialCategory_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AST.Atom.CharacterProperty.PCRESpecialCategory( Swift::String *a1)
{
  return AST.Atom.CharacterProperty.PCRESpecialCategory.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AST.Atom.CharacterProperty.PCRESpecialCategory( void *a1@<X8>)
{
  *a1 = qword_181005B08[*v1];
  a1[1] = 0xE300000000000000LL;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Atom.CharacterProperty.PCRESpecialCategory()
{
  return Hasher._finalize()();
}

Swift::Int specialized RawRepresentable<>.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AST.Atom.CharacterProperty.PCRESpecialCategory()
{
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.CharacterProperty.PCRESpecialCategory()
{
  return Hasher._finalize()();
}

Swift::Int specialized RawRepresentable<>._rawHashValue(seed:)()
{
  return Hasher._finalize()();
}

_RegexParser::AST::Atom::CharacterProperty::JavaSpecial_optional __swiftcall AST.Atom.CharacterProperty.JavaSpecial.init(rawValue:)( Swift::String rawValue)
{
  char v2 = v1;
  unint64_t v3 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  result.value = swift_bridgeObjectRelease();
  char v5 = 18;
  if (v3 < 0x12) {
    char v5 = v3;
  }
  *char v2 = v5;
  return result;
}

void *static AST.Atom.CharacterProperty.JavaSpecial.allCases.getter()
{
  return &outlined read-only object #0 of static AST.Atom.CharacterProperty.JavaSpecial.allCases.getter;
}

uint64_t AST.Atom.CharacterProperty.JavaSpecial.rawValue.getter()
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_180F8645C + 4 * byte_180FFFA0E[*v0]))( 0xD000000000000017LL,  0x80000001810060D0LL);
}

uint64_t sub_180F8645C()
{
  return 0x68706C416176616ALL;
}

uint64_t sub_180F86480()
{
  return 0x696665446176616ALL;
}

uint64_t sub_180F864A0()
{
  return 0x696769446176616ALL;
}

uint64_t sub_180F864BC()
{
  return 0x6F6564496176616ALL;
}

uint64_t sub_180F864E0()
{
  return 0x434F53496176616ALL;
}

uint64_t sub_180F86504(uint64_t a1)
{
  return a1 - 1;
}

uint64_t sub_180F86618()
{
  return 0x746968576176616ALL;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AST.Atom.CharacterProperty.JavaSpecial( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance AST.Atom.CharacterProperty.JavaSpecial( a1,  a2,  a3,  a4,  AST.Atom.CharacterProperty.JavaSpecial.rawValue.getter);
}

_RegexParser::AST::Atom::CharacterProperty::JavaSpecial_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AST.Atom.CharacterProperty.JavaSpecial( Swift::String *a1)
{
  return AST.Atom.CharacterProperty.JavaSpecial.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance AST.Atom.CharacterProperty.JavaSpecial@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = AST.Atom.CharacterProperty.JavaSpecial.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Atom.CharacterProperty.JavaSpecial( uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance AST.Atom.CharacterProperty.JavaSpecial( a1,  a2,  (void (*)(uint64_t))AST.Atom.CharacterProperty.JavaSpecial.rawValue.getter);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AST.Atom.CharacterProperty.JavaSpecial( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable.hash(into:) in conformance AST.Atom.CharacterProperty.JavaSpecial( a1,  a2,  a3,  (void (*)(void))AST.Atom.CharacterProperty.JavaSpecial.rawValue.getter);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.CharacterProperty.JavaSpecial( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.CharacterProperty.JavaSpecial( a1,  a2,  a3,  (void (*)(uint64_t))AST.Atom.CharacterProperty.JavaSpecial.rawValue.getter);
}

void protocol witness for static CaseIterable.allCases.getter in conformance AST.Atom.CharacterProperty.JavaSpecial( void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static AST.Atom.CharacterProperty.JavaSpecial.allCases.getter;
}

void AST.Atom.Callout.PCRE.Argument.hash(into:)()
{
  Swift::UInt v1 = *(void *)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  if ((*(_BYTE *)(v0 + 32) & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }

  else
  {
    unint64_t v4 = *(void *)(v0 + 16);
    unint64_t v3 = *(void *)(v0 + 24);
    Hasher._combine(_:)(0LL);
    if ((v2 & 1) != 0)
    {
      Hasher._combine(_:)(0);
    }

    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v1);
    }

    Hasher._combine(_:)(v4 >> 14);
    Hasher._combine(_:)(v3 >> 14);
  }

Swift::Int AST.Atom.Callout.PCRE.Argument.hashValue.getter()
{
  Swift::UInt v1 = *(void *)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  unint64_t v4 = *(void *)(v0 + 16);
  unint64_t v3 = *(void *)(v0 + 24);
  char v5 = *(_BYTE *)(v0 + 32);
  Hasher.init(_seed:)();
  if ((v5 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }

  else
  {
    Hasher._combine(_:)(0LL);
    if ((v2 & 1) != 0)
    {
      Hasher._combine(_:)(0);
    }

    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v1);
    }

    Hasher._combine(_:)(v4 >> 14);
    Hasher._combine(_:)(v3 >> 14);
  }

  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AST.Atom.Callout.PCRE.Argument()
{
  Swift::UInt v1 = *(void *)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  if ((*(_BYTE *)(v0 + 32) & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }

  else
  {
    unint64_t v4 = *(void *)(v0 + 16);
    unint64_t v3 = *(void *)(v0 + 24);
    Hasher._combine(_:)(0LL);
    if ((v2 & 1) != 0)
    {
      Hasher._combine(_:)(0);
    }

    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v1);
    }

    Hasher._combine(_:)(v4 >> 14);
    Hasher._combine(_:)(v3 >> 14);
  }

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.Callout.PCRE.Argument()
{
  Swift::UInt v1 = *(void *)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  unint64_t v4 = *(void *)(v0 + 16);
  unint64_t v3 = *(void *)(v0 + 24);
  char v5 = *(_BYTE *)(v0 + 32);
  Hasher.init(_seed:)();
  if ((v5 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }

  else
  {
    Hasher._combine(_:)(0LL);
    if ((v2 & 1) != 0)
    {
      Hasher._combine(_:)(0);
    }

    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v1);
    }

    Hasher._combine(_:)(v4 >> 14);
    Hasher._combine(_:)(v3 >> 14);
  }

  return Hasher._finalize()();
}

uint64_t AST.Atom.Callout.PCRE.arg.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  char v6 = *(_BYTE *)(v1 + 32);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(v1 + 40);
  return outlined copy of AST.Atom.Callout.PCRE.Argument(v2, v3, v4, v5, v6);
}

__n128 AST.Atom.Callout.PCRE.arg.setter(__n128 *a1)
{
  __n128 v8 = *a1;
  unint64_t v2 = a1[1].n128_u64[0];
  unint64_t v3 = a1[1].n128_u64[1];
  unsigned __int8 v4 = a1[2].n128_u8[0];
  unint64_t v5 = a1[2].n128_u64[1];
  unint64_t v6 = a1[3].n128_u64[0];
  outlined consume of AST.Atom.Callout.PCRE.Argument( *(void *)v1,  *(void *)(v1 + 8),  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(_BYTE *)(v1 + 32));
  __n128 result = v8;
  *(__n128 *)uint64_t v1 = v8;
  *(void *)(v1 + 16) = v2;
  *(void *)(v1 + 24) = v3;
  *(_BYTE *)(v1 + 32) = v4;
  *(void *)(v1 + 40) = v5;
  *(void *)(v1 + 48) = v6;
  return result;
}

uint64_t (*AST.Atom.Callout.PCRE.arg.modify())()
{
  return AST.root.modify;
}

__n128 AST.Atom.Callout.PCRE.init(_:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v2 = *(_BYTE *)(a1 + 32);
  __int128 v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v3;
  *(_BYTE *)(a2 + 32) = v2;
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(a2 + 40) = result;
  return result;
}

BOOL AST.Atom.Callout.PCRE.isImplicit.getter()
{
  return (*(void *)(v0 + 48) ^ *(void *)(v0 + 40)) < 0x4000uLL;
}

BOOL Source.Location.isEmpty.getter()
{
  return (v0[1] ^ *v0) < 0x4000uLL;
}

void AST.Atom.Callout.PCRE.hash(into:)()
{
}

BOOL static AST.Atom.Callout.PCRE.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v5[2] = *(_OWORD *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 48);
  __int128 v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v7[2] = *(_OWORD *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 48);
  return specialized static Source.Located<A>.== infix(_:_:)((uint64_t)v5, (uint64_t)v7);
}

BOOL specialized static Source.Located<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)a2;
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v11 = *(void *)(a2 + 16);
  uint64_t v10 = *(void *)(a2 + 24);
  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) != 0)
    {
      if (v4 == v9 && v5 == v8)
      {
        outlined retain of Source.Located<AST.Atom.Callout.PCRE.Argument>(a2);
        outlined retain of Source.Located<AST.Atom.Callout.PCRE.Argument>(a1);
        outlined consume of AST.Atom.Callout.PCRE.Argument(v4, v5, v7, v6, 1);
        outlined consume of AST.Atom.Callout.PCRE.Argument(v4, v5, v11, v10, 1);
      }

      else
      {
        char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
        outlined retain of Source.Located<AST.Atom.Callout.PCRE.Argument>(a2);
        outlined retain of Source.Located<AST.Atom.Callout.PCRE.Argument>(a1);
        outlined consume of AST.Atom.Callout.PCRE.Argument(v4, v5, v7, v6, 1);
        outlined consume of AST.Atom.Callout.PCRE.Argument(v9, v8, v11, v10, 1);
        BOOL result = 0LL;
        if ((v19 & 1) == 0) {
          return result;
        }
      }

      return !((*(void *)(a2 + 40) ^ *(void *)(a1 + 40)) >> 14)
          && (*(void *)(a1 + 48) ^ *(void *)(a2 + 48)) < 0x4000LL;
    }

    outlined retain of Source.Located<AST.Atom.Callout.PCRE.Argument>(a2);
    outlined retain of Source.Located<AST.Atom.Callout.PCRE.Argument>(a1);
    outlined consume of AST.Atom.Callout.PCRE.Argument(v4, v5, v7, v6, 1);
    uint64_t v14 = v9;
    uint64_t v15 = v8;
    uint64_t v16 = v11;
    uint64_t v17 = v10;
    char v18 = 0;
    goto LABEL_12;
  }

  if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
    outlined retain of Source.Located<AST.Atom.Callout.PCRE.Argument>(a2);
    outlined consume of AST.Atom.Callout.PCRE.Argument(v4, v5, v7, v6, 0);
    uint64_t v14 = v9;
    uint64_t v15 = v8;
    uint64_t v16 = v11;
    uint64_t v17 = v10;
    char v18 = 1;
LABEL_12:
    outlined consume of AST.Atom.Callout.PCRE.Argument(v14, v15, v16, v17, v18);
    return 0LL;
  }

  outlined retain of Source.Located<AST.Atom.Callout.PCRE.Argument>(a2);
  outlined consume of AST.Atom.Callout.PCRE.Argument(v4, v5, v7, v6, 0);
  outlined consume of AST.Atom.Callout.PCRE.Argument(v9, v8, v11, v10, 0);
  if ((v5 & 1) != 0)
  {
    if ((v8 & 1) == 0) {
      return 0LL;
    }
  }

  else
  {
    BOOL result = 0LL;
    if ((v8 & 1) != 0 || v4 != v9) {
      return result;
    }
  }

  BOOL result = 0LL;
  if (!((v11 ^ (unint64_t)v7) >> 14) && (v10 ^ (unint64_t)v6) < 0x4000) {
    return !((*(void *)(a2 + 40) ^ *(void *)(a1 + 40)) >> 14)
  }
        && (*(void *)(a1 + 48) ^ *(void *)(a2 + 48)) < 0x4000LL;
  return result;
}

BOOL specialized static Source.Located<A>.== infix(_:_:)( char a1, unint64_t a2, unint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  BOOL v10 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v11 = 24155LL;
  }
  else {
    uint64_t v11 = 91LL;
  }
  if (v10) {
    unint64_t v12 = 0xE100000000000000LL;
  }
  else {
    unint64_t v12 = 0xE200000000000000LL;
  }
  if ((a4 & 1) != 0) {
    uint64_t v13 = 24155LL;
  }
  else {
    uint64_t v13 = 91LL;
  }
  if ((a4 & 1) != 0) {
    unint64_t v14 = 0xE200000000000000LL;
  }
  else {
    unint64_t v14 = 0xE100000000000000LL;
  }
  if (v11 == v13 && v12 == v14)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  else
  {
    char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    BOOL result = 0LL;
    if ((v15 & 1) == 0) {
      return result;
    }
  }

  return (a5 ^ a2) < 0x4000 && (a6 ^ a3) < 0x4000;
}

{
  char v10;
  BOOL result;
  if (qword_181005B30[a1] == qword_181005B30[a4])
  {
    swift_bridgeObjectRelease_n();
  }

  else
  {
    BOOL v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease_n();
    BOOL result = 0LL;
    if ((v10 & 1) == 0) {
      return result;
    }
  }

  return (a5 ^ a2) < 0x4000 && (a6 ^ a3) < 0x4000;
}

BOOL specialized static Source.Located<A>.== infix(_:_:)( uint64_t a1, unint64_t a2, unint64_t a3, unsigned __int8 a4, uint64_t a5, uint64_t a6)
{
  if (!(_BYTE)a1)
  {
    a1 = a1;
    unint64_t v10 = 0xE000000000000000LL;
    int v11 = a4;
    if (a4) {
      goto LABEL_6;
    }
LABEL_12:
    unint64_t v13 = 0xE000000000000000LL;
    if (a1 != a4) {
      goto LABEL_15;
    }
    goto LABEL_13;
  }

  else {
    a1 = 43LL;
  }
  unint64_t v10 = 0xE100000000000000LL;
  int v11 = a4;
  if (!a4) {
    goto LABEL_12;
  }
LABEL_6:
  if (v11 == 1) {
    uint64_t v12 = 63LL;
  }
  else {
    uint64_t v12 = 43LL;
  }
  unint64_t v13 = 0xE100000000000000LL;
  if (a1 != v12)
  {
LABEL_15:
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    BOOL result = 0LL;
    if ((v14 & 1) == 0) {
      return result;
    }
    return (a5 ^ a2) < 0x4000 && (a6 ^ a3) < 0x4000;
  }

LABEL_13:
  if (v10 != v13) {
    goto LABEL_15;
  }
  swift_bridgeObjectRelease_n();
  return (a5 ^ a2) < 0x4000 && (a6 ^ a3) < 0x4000;
}

BOOL static Source.Located<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  BOOL result = 0;
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
  {
    uint64_t v4 = *(int *)(type metadata accessor for Source.Located() + 28);
    uint64_t v5 = a1 + v4;
    unint64_t v6 = *(void *)(a1 + v4);
    uint64_t v7 = (void *)(a2 + v4);
    if (!((*v7 ^ v6) >> 14) && (*(void *)(v5 + 8) ^ v7[1]) < 0x4000LL) {
      return 1;
    }
  }

  return result;
}

Swift::Int AST.Atom.Callout.PCRE.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Atom.Callout.PCRE()
{
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AST.Atom.Callout.PCRE()
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.Callout.PCRE()
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AST.Atom.Callout.PCRE( uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v5[2] = *(_OWORD *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 48);
  __int128 v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v7[2] = *(_OWORD *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 48);
  return specialized static Source.Located<A>.== infix(_:_:)((uint64_t)v5, (uint64_t)v7);
}

__n128 AST.Atom.Callout.OnigurumaNamed.ArgList.leftBrace.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = *v1;
  *a1 = *v1;
  return result;
}

__n128 AST.Atom.Callout.OnigurumaNamed.ArgList.leftBrace.setter(__n128 *a1)
{
  __n128 result = *a1;
  __n128 *v1 = *a1;
  return result;
}

uint64_t (*AST.Atom.Callout.OnigurumaNamed.ArgList.leftBrace.modify())()
{
  return AST.root.modify;
}

uint64_t AST.Atom.Callout.OnigurumaNamed.ArgList.args.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AST.Atom.Callout.OnigurumaNamed.ArgList.args.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t (*AST.Atom.Callout.OnigurumaNamed.ArgList.args.modify())()
{
  return AST.root.modify;
}

__n128 AST.Atom.Callout.OnigurumaNamed.ArgList.rightBrace.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = *(__n128 *)(v1 + 24);
  *a1 = result;
  return result;
}

__n128 AST.Atom.Callout.OnigurumaNamed.ArgList.rightBrace.setter(__n128 *a1)
{
  __n128 result = *a1;
  *(__n128 *)(v1 + 24) = *a1;
  return result;
}

uint64_t (*AST.Atom.Callout.OnigurumaNamed.ArgList.rightBrace.modify())()
{
  return AST.root.modify;
}

__n128 AST.Atom.Callout.OnigurumaNamed.ArgList.init(_:_:_:)@<Q0>( _OWORD *a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X2>, uint64_t a4@<X8>)
{
  *(_OWORD *)a4 = *a1;
  *(void *)(a4 + 16) = a2;
  __n128 result = *a3;
  *(__n128 *)(a4 + 24) = *a3;
  return result;
}

void AST.Atom.Callout.OnigurumaNamed.ArgList.hash(into:)(uint64_t a1)
{
  unint64_t v3 = v1[1];
  uint64_t v4 = v1[2];
  unint64_t v5 = v1[3];
  unint64_t v6 = v1[4];
  Hasher._combine(_:)(*v1 >> 14);
  Hasher._combine(_:)(v3 >> 14);
  specialized Array<A>.hash(into:)(a1, v4);
  Hasher._combine(_:)(v5 >> 14);
  Hasher._combine(_:)(v6 >> 14);
}

Swift::Int AST.Atom.Callout.OnigurumaNamed.ArgList.hashValue.getter()
{
  unint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  uint64_t v3 = v0[2];
  unint64_t v4 = v0[3];
  unint64_t v5 = v0[4];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  specialized Array<A>.hash(into:)((uint64_t)v7, v3);
  Hasher._combine(_:)(v4 >> 14);
  Hasher._combine(_:)(v5 >> 14);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AST.Atom.Callout.OnigurumaNamed.ArgList( uint64_t a1)
{
  unint64_t v3 = v1[1];
  uint64_t v4 = v1[2];
  unint64_t v5 = v1[3];
  unint64_t v6 = v1[4];
  Hasher._combine(_:)(*v1 >> 14);
  Hasher._combine(_:)(v3 >> 14);
  specialized Array<A>.hash(into:)(a1, v4);
  Hasher._combine(_:)(v5 >> 14);
  Hasher._combine(_:)(v6 >> 14);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.Callout.OnigurumaNamed.ArgList()
{
  unint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  uint64_t v3 = v0[2];
  unint64_t v4 = v0[3];
  unint64_t v5 = v0[4];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  specialized Array<A>.hash(into:)((uint64_t)v7, v3);
  Hasher._combine(_:)(v4 >> 14);
  Hasher._combine(_:)(v5 >> 14);
  return Hasher._finalize()();
}

uint64_t AST.Atom.Callout.OnigurumaNamed.name.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v1 + 16);
  return swift_bridgeObjectRetain();
}

__n128 AST.Atom.Callout.OnigurumaNamed.name.setter(__n128 *a1)
{
  __n128 v5 = *a1;
  unint64_t v2 = a1[1].n128_u64[0];
  unint64_t v3 = a1[1].n128_u64[1];
  swift_bridgeObjectRelease();
  __n128 result = v5;
  __n128 *v1 = v5;
  v1[1].n128_u64[0] = v2;
  v1[1].n128_u64[1] = v3;
  return result;
}

uint64_t (*AST.Atom.Callout.OnigurumaNamed.name.modify())()
{
  return AST.root.modify;
}

uint64_t AST.Atom.Callout.OnigurumaNamed.tag.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 48);
  uint64_t v3 = *(void *)(v1 + 88);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 32);
  *(void *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(v1 + 72);
  *(void *)(a1 + 56) = v3;
  return swift_bridgeObjectRetain();
}

__n128 AST.Atom.Callout.OnigurumaNamed.tag.setter(__int128 *a1)
{
  __int128 v6 = a1[1];
  __int128 v7 = *a1;
  __n128 v5 = (__n128)a1[2];
  uint64_t v2 = *((void *)a1 + 6);
  uint64_t v3 = *((void *)a1 + 7);
  swift_bridgeObjectRelease();
  *(_OWORD *)(v1 + 32) = v7;
  *(_OWORD *)(v1 + 48) = v6;
  __n128 result = v5;
  *(__n128 *)(v1 + 64) = v5;
  *(void *)(v1 + 80) = v2;
  *(void *)(v1 + 88) = v3;
  return result;
}

uint64_t (*AST.Atom.Callout.OnigurumaNamed.tag.modify())()
{
  return AST.root.modify;
}

uint64_t AST.Atom.Callout.OnigurumaNamed.args.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 128);
  __int128 v3 = *(_OWORD *)(v1 + 112);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 96);
  *(_OWORD *)(a1 + 16) = v3;
  *(void *)(a1 + 32) = v2;
  return swift_bridgeObjectRetain();
}

__n128 AST.Atom.Callout.OnigurumaNamed.args.setter(__int128 *a1)
{
  __n128 v4 = (__n128)a1[1];
  __int128 v5 = *a1;
  uint64_t v2 = *((void *)a1 + 4);
  swift_bridgeObjectRelease();
  __n128 result = v4;
  *(_OWORD *)(v1 + 96) = v5;
  *(__n128 *)(v1 + 112) = v4;
  *(void *)(v1 + 128) = v2;
  return result;
}

uint64_t (*AST.Atom.Callout.OnigurumaNamed.args.modify())()
{
  return AST.root.modify;
}

__n128 AST.Atom.Callout.OnigurumaNamed.init(_:tag:args:)@<Q0>( uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 v4 = *a2;
  __int128 v5 = a2[1];
  *(_OWORD *)(a4 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a4 + 32) = v4;
  __int128 v6 = a2[2];
  __int128 v7 = a2[3];
  *(_OWORD *)(a4 + 48) = v5;
  *(_OWORD *)(a4 + 64) = v6;
  __n128 result = *(__n128 *)a3;
  __int128 v9 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a4 + 80) = v7;
  *(__n128 *)(a4 + 96) = result;
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v11 = *(void *)(a3 + 32);
  *(void *)a4 = *(void *)a1;
  *(void *)(a4 + 8) = v10;
  *(_OWORD *)(a4 + 112) = v9;
  *(void *)(a4 + 128) = v11;
  return result;
}

void AST.Atom.Callout.OnigurumaNamed.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  unint64_t v4 = v2[2];
  unint64_t v5 = v2[3];
  unint64_t v7 = v2[4];
  unint64_t v6 = v2[5];
  uint64_t v8 = v2[7];
  unint64_t v10 = v2[8];
  unint64_t v9 = v2[9];
  unint64_t v12 = v2[10];
  unint64_t v13 = v2[11];
  uint64_t v11 = v2[14];
  unint64_t v14 = v2[12];
  unint64_t v15 = v2[13];
  unint64_t v16 = v2[15];
  unint64_t v17 = v2[16];
  String.hash(into:)();
  Hasher._combine(_:)(v4 >> 14);
  Hasher._combine(_:)(v5 >> 14);
  if (v8)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v7 >> 14);
    Hasher._combine(_:)(v6 >> 14);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Hasher._combine(_:)(v10 >> 14);
    Hasher._combine(_:)(v9 >> 14);
    Hasher._combine(_:)(v12 >> 14);
    Hasher._combine(_:)(v13 >> 14);
    swift_bridgeObjectRelease();
    if (v11)
    {
LABEL_3:
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v14 >> 14);
      Hasher._combine(_:)(v15 >> 14);
      swift_bridgeObjectRetain();
      specialized Array<A>.hash(into:)(a1, v11);
      Hasher._combine(_:)(v16 >> 14);
      Hasher._combine(_:)(v17 >> 14);
      swift_bridgeObjectRelease();
      return;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    if (v11) {
      goto LABEL_3;
    }
  }

  Hasher._combine(_:)(0);
}

Swift::Int AST.Atom.Callout.OnigurumaNamed.hashValue.getter()
{
  return AST.Atom.Kind.hashValue.getter((void (*)(_BYTE *))AST.Atom.Callout.OnigurumaNamed.hash(into:));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Atom.Callout.OnigurumaNamed( uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance AST.Atom.Kind( a1,  a2,  (void (*)(_BYTE *))AST.Atom.Callout.OnigurumaNamed.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.Callout.OnigurumaNamed( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.Kind( a1,  a2,  a3,  (void (*)(_BYTE *))AST.Atom.Callout.OnigurumaNamed.hash(into:));
}

__n128 AST.Atom.Callout.OnigurumaOfContents.openBraces.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = *v1;
  *a1 = *v1;
  return result;
}

__n128 AST.Atom.Callout.OnigurumaOfContents.openBraces.setter(__n128 *a1)
{
  __n128 result = *a1;
  __n128 *v1 = *a1;
  return result;
}

uint64_t (*AST.Atom.Callout.OnigurumaOfContents.openBraces.modify())()
{
  return AST.root.modify;
}

uint64_t AST.Atom.Callout.OnigurumaOfContents.contents.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 24);
  *(void *)a1 = *(void *)(v1 + 16);
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v1 + 32);
  return swift_bridgeObjectRetain();
}

__n128 AST.Atom.Callout.OnigurumaOfContents.contents.setter(__n128 *a1)
{
  __n128 v5 = *a1;
  unint64_t v2 = a1[1].n128_u64[0];
  unint64_t v3 = a1[1].n128_u64[1];
  swift_bridgeObjectRelease();
  __n128 result = v5;
  v1[1] = v5;
  v1[2].n128_u64[0] = v2;
  v1[2].n128_u64[1] = v3;
  return result;
}

uint64_t (*AST.Atom.Callout.OnigurumaOfContents.contents.modify())()
{
  return AST.root.modify;
}

__n128 AST.Atom.Callout.OnigurumaOfContents.closeBraces.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = v1[3];
  *a1 = result;
  return result;
}

__n128 AST.Atom.Callout.OnigurumaOfContents.closeBraces.setter(__n128 *a1)
{
  __n128 result = *a1;
  v1[3] = *a1;
  return result;
}

uint64_t (*AST.Atom.Callout.OnigurumaOfContents.closeBraces.modify())()
{
  return AST.root.modify;
}

uint64_t AST.Atom.Callout.OnigurumaOfContents.tag.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 120);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 64);
  *(void *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 88);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(v1 + 104);
  *(void *)(a1 + 56) = v3;
  return swift_bridgeObjectRetain();
}

__n128 AST.Atom.Callout.OnigurumaOfContents.tag.setter(__int128 *a1)
{
  __int128 v6 = a1[1];
  __int128 v7 = *a1;
  __n128 v5 = (__n128)a1[2];
  uint64_t v2 = *((void *)a1 + 6);
  uint64_t v3 = *((void *)a1 + 7);
  swift_bridgeObjectRelease();
  *(_OWORD *)(v1 + 64) = v7;
  *(_OWORD *)(v1 + 80) = v6;
  __n128 result = v5;
  *(__n128 *)(v1 + 96) = v5;
  *(void *)(v1 + 112) = v2;
  *(void *)(v1 + 120) = v3;
  return result;
}

uint64_t (*AST.Atom.Callout.OnigurumaOfContents.tag.modify())()
{
  return AST.root.modify;
}

__n128 AST.Atom.Callout.OnigurumaOfContents.direction.getter@<Q0>(uint64_t a1@<X8>)
{
  *(_BYTE *)a1 = *(_BYTE *)(v1 + 128);
  __n128 result = *(__n128 *)(v1 + 136);
  *(__n128 *)(a1 + 8) = result;
  return result;
}

__n128 AST.Atom.Callout.OnigurumaOfContents.direction.setter(uint64_t a1)
{
  *(_BYTE *)(v1 + 128) = *(_BYTE *)a1;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v1 + 136) = result;
  return result;
}

uint64_t (*AST.Atom.Callout.OnigurumaOfContents.direction.modify())()
{
  return AST.root.modify;
}

__n128 AST.Atom.Callout.OnigurumaOfContents.init(_:_:_:tag:direction:)@<Q0>( _OWORD *a1@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X2>, _OWORD *a4@<X3>, char *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  char v8 = *a5;
  *(_OWORD *)a6 = *a1;
  *(void *)(a6 + 16) = v6;
  *(void *)(a6 + 24) = v7;
  __int128 v9 = *a3;
  *(_OWORD *)(a6 + 32) = *((_OWORD *)a2 + 1);
  *(_OWORD *)(a6 + 48) = v9;
  __int128 v10 = a4[1];
  *(_OWORD *)(a6 + 64) = *a4;
  *(_OWORD *)(a6 + 80) = v10;
  __int128 v11 = a4[3];
  *(_OWORD *)(a6 + 96) = a4[2];
  *(_OWORD *)(a6 + 112) = v11;
  *(_BYTE *)(a6 + 128) = v8;
  __n128 result = *(__n128 *)(a5 + 8);
  *(__n128 *)(a6 + 136) = result;
  return result;
}

BOOL AST.Atom.Callout.OnigurumaOfContents.isDirectionImplicit.getter()
{
  return (*(void *)(v0 + 144) ^ *(void *)(v0 + 136)) < 0x4000uLL;
}

void AST.Atom.Callout.OnigurumaOfContents.hash(into:)()
{
  unint64_t v1 = *(void *)(v0 + 8);
  unint64_t v3 = *(void *)(v0 + 32);
  unint64_t v2 = *(void *)(v0 + 40);
  unint64_t v4 = *(void *)(v0 + 48);
  unint64_t v5 = *(void *)(v0 + 56);
  unint64_t v6 = *(void *)(v0 + 64);
  uint64_t v7 = *(void *)(v0 + 88);
  unint64_t v8 = *(void *)(v0 + 72);
  unint64_t v9 = *(void *)(v0 + 96);
  unint64_t v10 = *(void *)(v0 + 104);
  unint64_t v11 = *(void *)(v0 + 112);
  unint64_t v12 = *(void *)(v0 + 120);
  unint64_t v13 = *(void *)(v0 + 136);
  Swift::UInt v14 = *(unsigned __int8 *)(v0 + 128);
  unint64_t v15 = *(void *)(v0 + 144);
  Hasher._combine(_:)(*(void *)v0 >> 14);
  Hasher._combine(_:)(v1 >> 14);
  String.hash(into:)();
  Hasher._combine(_:)(v3 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v4 >> 14);
  Hasher._combine(_:)(v5 >> 14);
  if (v7)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v6 >> 14);
    Hasher._combine(_:)(v8 >> 14);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Hasher._combine(_:)(v9 >> 14);
    Hasher._combine(_:)(v10 >> 14);
    Hasher._combine(_:)(v11 >> 14);
    Hasher._combine(_:)(v12 >> 14);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  Hasher._combine(_:)(v14);
  Hasher._combine(_:)(v13 >> 14);
  Hasher._combine(_:)(v15 >> 14);
}

Swift::Int AST.Atom.Callout.OnigurumaOfContents.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Atom.Callout.OnigurumaOfContents()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.Callout.OnigurumaOfContents()
{
  return Hasher._finalize()();
}

void AST.Atom.Callout.hash(into:)(uint64_t a1)
{
  int v3 = _s12_RegexParser3ASTV4AtomV7CalloutOWOg((uint64_t)v5);
  if (v3)
  {
    if (v3 == 1)
    {
      AST.root.modify(v5);
      Hasher._combine(_:)(1uLL);
      AST.Atom.Callout.OnigurumaNamed.hash(into:)(a1);
    }

    else
    {
      AST.root.modify(v5);
      Hasher._combine(_:)(2uLL);
      AST.Atom.Callout.OnigurumaOfContents.hash(into:)();
    }
  }

  else
  {
    AST.root.modify(v5);
    Hasher._combine(_:)(0LL);
    specialized Source.Located<A>.hash(into:)();
  }

Swift::Int AST.Atom.Callout.hashValue.getter()
{
  int v1 = _s12_RegexParser3ASTV4AtomV7CalloutOWOg((uint64_t)v5);
  if (v1)
  {
    if (v1 == 1)
    {
      AST.root.modify(v5);
      Hasher._combine(_:)(1uLL);
      AST.Atom.Callout.OnigurumaNamed.hash(into:)((uint64_t)v3);
    }

    else
    {
      AST.root.modify(v5);
      Hasher._combine(_:)(2uLL);
      AST.Atom.Callout.OnigurumaOfContents.hash(into:)();
    }
  }

  else
  {
    AST.root.modify(v5);
    Hasher._combine(_:)(0LL);
    specialized Source.Located<A>.hash(into:)();
  }

  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Atom.Callout()
{
  int v1 = _s12_RegexParser3ASTV4AtomV7CalloutOWOg((uint64_t)v5);
  if (v1)
  {
    if (v1 == 1)
    {
      AST.root.modify(v5);
      Hasher._combine(_:)(1uLL);
      AST.Atom.Callout.OnigurumaNamed.hash(into:)((uint64_t)v3);
    }

    else
    {
      AST.root.modify(v5);
      Hasher._combine(_:)(2uLL);
      AST.Atom.Callout.OnigurumaOfContents.hash(into:)();
    }
  }

  else
  {
    AST.root.modify(v5);
    Hasher._combine(_:)(0LL);
    specialized Source.Located<A>.hash(into:)();
  }

  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AST.Atom.Callout(uint64_t a1)
{
  int v3 = _s12_RegexParser3ASTV4AtomV7CalloutOWOg((uint64_t)v5);
  if (v3)
  {
    if (v3 == 1)
    {
      AST.root.modify(v5);
      Hasher._combine(_:)(1uLL);
      AST.Atom.Callout.OnigurumaNamed.hash(into:)(a1);
    }

    else
    {
      AST.root.modify(v5);
      Hasher._combine(_:)(2uLL);
      AST.Atom.Callout.OnigurumaOfContents.hash(into:)();
    }
  }

  else
  {
    AST.root.modify(v5);
    Hasher._combine(_:)(0LL);
    specialized Source.Located<A>.hash(into:)();
  }

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.Callout()
{
  int v1 = _s12_RegexParser3ASTV4AtomV7CalloutOWOg((uint64_t)v5);
  if (v1)
  {
    if (v1 == 1)
    {
      AST.root.modify(v5);
      Hasher._combine(_:)(1uLL);
      AST.Atom.Callout.OnigurumaNamed.hash(into:)((uint64_t)v3);
    }

    else
    {
      AST.root.modify(v5);
      Hasher._combine(_:)(2uLL);
      AST.Atom.Callout.OnigurumaOfContents.hash(into:)();
    }
  }

  else
  {
    AST.root.modify(v5);
    Hasher._combine(_:)(0LL);
    specialized Source.Located<A>.hash(into:)();
  }

  return Hasher._finalize()();
}

uint64_t (*AST.Atom.Callout.OnigurumaTag.leftBracket.modify())()
{
  return AST.root.modify;
}

uint64_t AST.Atom.Callout.OnigurumaTag.name.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 24);
  *(void *)a1 = *(void *)(v1 + 16);
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v1 + 32);
  return swift_bridgeObjectRetain();
}

__n128 AST.Atom.Callout.OnigurumaTag.name.setter(__n128 *a1)
{
  __n128 v5 = *a1;
  unint64_t v2 = a1[1].n128_u64[0];
  unint64_t v3 = a1[1].n128_u64[1];
  swift_bridgeObjectRelease();
  __n128 result = v5;
  v1[1] = v5;
  v1[2].n128_u64[0] = v2;
  v1[2].n128_u64[1] = v3;
  return result;
}

uint64_t (*AST.Atom.Callout.OnigurumaTag.name.modify())()
{
  return AST.root.modify;
}

uint64_t (*AST.Atom.Callout.OnigurumaTag.rightBracket.modify())()
{
  return AST.root.modify;
}

__n128 AST.Atom.Callout.OnigurumaTag.init(_:_:_:)@<Q0>( _OWORD *a1@<X0>, __n128 *a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v4 = a2->n128_u64[0];
  unint64_t v5 = a2->n128_u64[1];
  *(_OWORD *)a4 = *a1;
  *(void *)(a4 + 16) = v4;
  *(void *)(a4 + 24) = v5;
  __n128 result = a2[1];
  __int128 v7 = *a3;
  *(__n128 *)(a4 + 32) = result;
  *(_OWORD *)(a4 + 48) = v7;
  return result;
}

void AST.Atom.Callout.OnigurumaTag.hash(into:)()
{
  unint64_t v1 = v0[1];
  unint64_t v2 = v0[4];
  unint64_t v3 = v0[5];
  unint64_t v4 = v0[6];
  unint64_t v5 = v0[7];
  Hasher._combine(_:)(*v0 >> 14);
  Hasher._combine(_:)(v1 >> 14);
  String.hash(into:)();
  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v3 >> 14);
  Hasher._combine(_:)(v4 >> 14);
  Hasher._combine(_:)(v5 >> 14);
}

Swift::Int AST.Atom.Callout.OnigurumaTag.hashValue.getter()
{
  unint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  unint64_t v3 = v0[4];
  unint64_t v4 = v0[5];
  unint64_t v5 = v0[6];
  unint64_t v6 = v0[7];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  String.hash(into:)();
  Hasher._combine(_:)(v3 >> 14);
  Hasher._combine(_:)(v4 >> 14);
  Hasher._combine(_:)(v5 >> 14);
  Hasher._combine(_:)(v6 >> 14);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AST.Atom.Callout.OnigurumaTag()
{
  unint64_t v1 = v0[1];
  unint64_t v2 = v0[4];
  unint64_t v3 = v0[5];
  unint64_t v4 = v0[6];
  unint64_t v5 = v0[7];
  Hasher._combine(_:)(*v0 >> 14);
  Hasher._combine(_:)(v1 >> 14);
  String.hash(into:)();
  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v3 >> 14);
  Hasher._combine(_:)(v4 >> 14);
  Hasher._combine(_:)(v5 >> 14);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.Callout.OnigurumaTag()
{
  unint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  unint64_t v3 = v0[4];
  unint64_t v4 = v0[5];
  unint64_t v5 = v0[6];
  unint64_t v6 = v0[7];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  String.hash(into:)();
  Hasher._combine(_:)(v3 >> 14);
  Hasher._combine(_:)(v4 >> 14);
  Hasher._combine(_:)(v5 >> 14);
  Hasher._combine(_:)(v6 >> 14);
  return Hasher._finalize()();
}

__n128 AST.Atom.BacktrackingDirective.kind.getter@<Q0>(uint64_t a1@<X8>)
{
  *(_BYTE *)a1 = *(_BYTE *)v1;
  __n128 result = *(__n128 *)(v1 + 8);
  *(__n128 *)(a1 + 8) = result;
  return result;
}

__n128 AST.Atom.BacktrackingDirective.kind.setter(uint64_t a1)
{
  *(_BYTE *)uint64_t v1 = *(_BYTE *)a1;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v1 + 8) = result;
  return result;
}

uint64_t (*AST.Atom.BacktrackingDirective.kind.modify())()
{
  return AST.root.modify;
}

uint64_t AST.Atom.BacktrackingDirective.name.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 48);
  *(void *)a1 = *(void *)(v1 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 32);
  *(void *)(a1 + 24) = v2;
  return swift_bridgeObjectRetain();
}

__n128 AST.Atom.BacktrackingDirective.name.setter(__n128 *a1)
{
  __n128 v5 = *a1;
  unint64_t v2 = a1[1].n128_u64[0];
  unint64_t v3 = a1[1].n128_u64[1];
  swift_bridgeObjectRelease();
  __n128 result = v5;
  *(__n128 *)(v1 + 24) = v5;
  *(void *)(v1 + 40) = v2;
  *(void *)(v1 + 48) = v3;
  return result;
}

uint64_t (*AST.Atom.BacktrackingDirective.name.modify())()
{
  return AST.root.modify;
}

__n128 AST.Atom.BacktrackingDirective.init(_:name:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_BYTE *)a3 = *(_BYTE *)a1;
  *(_OWORD *)(a3 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)a2;
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a3 + 24) = *(_OWORD *)a2;
  *(_OWORD *)(a3 + 40) = v4;
  return result;
}

BOOL AST.Atom.BacktrackingDirective.isQuantifiable.getter()
{
  return *v0 == 0;
}

void AST.Atom.BacktrackingDirective.hash(into:)()
{
  unint64_t v1 = v0[1];
  unint64_t v2 = v0[2];
  uint64_t v3 = v0[4];
  unint64_t v5 = v0[5];
  unint64_t v4 = v0[6];
  Hasher._combine(_:)(*(unsigned __int8 *)v0);
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  if (v3)
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    Hasher._combine(_:)(v5 >> 14);
    Hasher._combine(_:)(v4 >> 14);
  }

  else
  {
    Hasher._combine(_:)(0);
  }

Swift::Int AST.Atom.BacktrackingDirective.hashValue.getter()
{
  Swift::UInt v1 = *(unsigned __int8 *)v0;
  unint64_t v2 = v0[1];
  unint64_t v3 = v0[2];
  uint64_t v4 = v0[4];
  unint64_t v6 = v0[5];
  unint64_t v5 = v0[6];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v3 >> 14);
  if (v4)
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    Hasher._combine(_:)(v6 >> 14);
    Hasher._combine(_:)(v5 >> 14);
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AST.Atom.BacktrackingDirective()
{
  unint64_t v1 = v0[1];
  unint64_t v2 = v0[2];
  uint64_t v3 = v0[4];
  unint64_t v5 = v0[5];
  unint64_t v4 = v0[6];
  Hasher._combine(_:)(*(unsigned __int8 *)v0);
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  if (v3)
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    Hasher._combine(_:)(v5 >> 14);
    Hasher._combine(_:)(v4 >> 14);
  }

  else
  {
    Hasher._combine(_:)(0);
  }

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.BacktrackingDirective()
{
  Swift::UInt v1 = *(unsigned __int8 *)v0;
  unint64_t v2 = v0[1];
  unint64_t v3 = v0[2];
  uint64_t v4 = v0[4];
  unint64_t v6 = v0[5];
  unint64_t v5 = v0[6];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v3 >> 14);
  if (v4)
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    Hasher._combine(_:)(v6 >> 14);
    Hasher._combine(_:)(v5 >> 14);
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  return Hasher._finalize()();
}

void AST.Atom.EscapedBuiltin.scalarValue.getter()
{
  __asm { BR              X12 }

uint64_t sub_180F889D4()
{
  return 0x100000000LL;
}

void sub_180F889F0()
{
}

void sub_180F889FC()
{
}

void sub_180F88A08()
{
}

void sub_180F88A14()
{
}

void sub_180F88A20()
{
}

void sub_180F88A2C()
{
}

uint64_t AST.Atom.EscapedBuiltin.isQuantifiable.getter()
{
  return (*v0 < 0x1DuLL) & (0x101FFFFFu >> *v0);
}

void AST.Atom.literalCharacterValue.getter()
{
  uint64_t v1 = type metadata accessor for AST.Atom.Kind(0LL);
  MEMORY[0x1895F8858](v1, v2);
  outlined init with copy of AST.Atom(v0, (uint64_t)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL), v4);
  unint64_t v5 = (char *)sub_180F88AE8 + 4 * byte_180FFFA3F[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }

uint64_t sub_180F88AE8()
{
  return 0LL;
}

void sub_180F88B14()
{
}

uint64_t AST.Atom.isValidCharacterClassRangeBound.getter()
{
  uint64_t v1 = type metadata accessor for AST.Atom.Kind(0LL);
  MEMORY[0x1895F8858](v1, v2);
  uint64_t v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  AST.Atom.literalCharacterValue.getter();
  if (!v6)
  {
    outlined init with copy of AST.Atom(v0, (uint64_t)v4, type metadata accessor for AST.Atom.Kind);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if ((EnumCaseMultiPayload - 5) < 4 || EnumCaseMultiPayload == 2)
    {
      outlined destroy of AST.Atom((uint64_t)v4, type metadata accessor for AST.Atom.Kind);
      return 1LL;
    }

    outlined destroy of AST.Atom((uint64_t)v4, type metadata accessor for AST.Atom.Kind);
    return 0LL;
  }

  unint64_t v7 = v5;
  unint64_t v8 = v6;
  if (!Character.hasExactlyOneScalar.getter(v5, v6))
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  if ((Character.asciiValue.getter() & 0x100) != 0)
  {
    uint64_t v11 = String._nfcCodeUnits.getter();
    char v12 = specialized Sequence<>.elementsEqual<A>(_:)(v7, v8, v11);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v12 & 1;
  }

  else
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

BOOL Character.hasExactlyOneScalar.getter(unint64_t a1, unint64_t a2)
{
  unint64_t v4 = _StringGuts.validateScalarIndex(_:)(0xFuLL, a1, a2);
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    unint64_t v10 = String.UnicodeScalarView._foreignIndex(after:)();
  }

  else
  {
    unint64_t v5 = v4 >> 16;
    if ((a2 & 0x2000000000000000LL) != 0)
    {
      v13[0] = a1;
      v13[1] = a2 & 0xFFFFFFFFFFFFFFLL;
      int v7 = *((unsigned __int8 *)v13 + v5);
    }

    else
    {
      if ((a1 & 0x1000000000000000LL) != 0) {
        uint64_t v6 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      }
      else {
        uint64_t v6 = _StringObject.sharedUTF8.getter();
      }
      int v7 = *(unsigned __int8 *)(v6 + v5);
    }

    int v8 = (char)v7;
    unsigned int v9 = __clz(v7 ^ 0xFF) - 24;
    if (v8 >= 0) {
      LOBYTE(v9) = 1;
    }
    unint64_t v10 = ((v5 + v9) << 16) | 5;
  }

  uint64_t v11 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v11 = a1 & 0xFFFFFFFFFFFFLL;
  }
  return v10 >> 14 == 4 * v11;
}

void AST.Atom.literalStringValue.getter()
{
  uint64_t v1 = type metadata accessor for AST.Atom.Kind(0LL);
  MEMORY[0x1895F8858](v1, v2);
  outlined init with copy of AST.Atom(v0, (uint64_t)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL), v4);
  unint64_t v5 = (char *)sub_180F88EE0 + 4 * byte_180FFFA70[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }

uint64_t sub_180F88EE0()
{
  return 0LL;
}

uint64_t scalarLiteral #1 (_:) in AST.Atom.literalStringValue.getter(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v16 = MEMORY[0x18961AFE8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0LL, v1, 0);
    uint64_t v3 = a1 + 32;
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    do
    {
      v3 += 4LL;
      uint64_t v4 = String.init<A>(_:radix:uppercase:)();
      uint64_t v6 = v5;
      unint64_t v8 = *(void *)(v16 + 16);
      unint64_t v7 = *(void *)(v16 + 24);
      if (v8 >= v7 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v7 > 1),  v8 + 1,  1);
      }
      *(void *)(v16 + 16) = v8 + 1;
      uint64_t v9 = v16 + 16 * v8;
      *(void *)(v9 + 32) = v4;
      *(void *)(v9 + 40) = v6;
      --v1;
    }

    while (v1);
  }

  swift_getCanonicalSpecializedMetadata();
  lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type [String] and conformance [A],  (uint64_t)&unk_189B467A8,  (uint64_t)&cache variable for noncanonical specialized generic type metadata for [String],  MEMORY[0x189618458]);
  uint64_t v10 = BidirectionalCollection<>.joined(separator:)();
  char v12 = v11;
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = v10;
  v13._object = v12;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = 125LL;
  v14._object = (void *)0xE100000000000000LL;
  String.append(_:)(v14);
  return 8090972LL;
}

uint64_t AST.Node.literalStringValue.getter()
{
  uint64_t v1 = type metadata accessor for AST.Atom(0LL);
  MEMORY[0x1895F8858](v1, v2);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = 0LL;
  if (*v0 >> 60 == 8LL)
  {
    uint64_t v6 = swift_projectBox();
    outlined init with copy of AST.Atom(v6, (uint64_t)v4, type metadata accessor for AST.Atom);
    AST.Atom.literalStringValue.getter();
    uint64_t v5 = v7;
    outlined destroy of AST.Atom((uint64_t)v4, type metadata accessor for AST.Atom);
  }

  return v5;
}

__n128 AST.Conditional.location.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = *v1;
  *a1 = *v1;
  return result;
}

__n128 AST.Conditional.location.setter(__n128 *a1)
{
  __n128 result = *a1;
  __n128 *v1 = *a1;
  return result;
}

uint64_t (*AST.Conditional.location.modify())()
{
  return AST.root.modify;
}

void *AST.Conditional.condition.getter@<X0>(_OWORD *a1@<X8>)
{
  __int128 v2 = v1[6];
  __int128 v3 = v1[8];
  __int128 v19 = v1[7];
  __int128 v20 = v3;
  __int128 v4 = v1[8];
  __int128 v21 = v1[9];
  __int128 v5 = v1[2];
  __int128 v6 = v1[4];
  __int128 v15 = v1[3];
  __int128 v7 = v15;
  __int128 v16 = v6;
  __int128 v8 = v1[4];
  __int128 v9 = v1[6];
  __int128 v17 = v1[5];
  __int128 v10 = v17;
  __int128 v18 = v9;
  __int128 v11 = v1[2];
  v14[0] = v1[1];
  __int128 v12 = v14[0];
  v14[1] = v11;
  a1[6] = v19;
  a1[7] = v4;
  a1[8] = v1[9];
  a1[2] = v7;
  a1[3] = v8;
  a1[4] = v10;
  a1[5] = v2;
  *a1 = v12;
  a1[1] = v5;
  return outlined retain of AST.Conditional.Condition( v14,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of AST.Conditional.Condition.Kind);
}

__n128 AST.Conditional.condition.setter(uint64_t a1)
{
  __int128 v3 = v1[8];
  v11[6] = v1[7];
  v11[7] = v3;
  v11[8] = v1[9];
  __int128 v4 = v1[4];
  v11[2] = v1[3];
  v11[3] = v4;
  __int128 v5 = v1[6];
  v11[4] = v1[5];
  v11[5] = v5;
  __int128 v6 = v1[2];
  v11[0] = v1[1];
  v11[1] = v6;
  outlined retain of AST.Conditional.Condition( v11,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of AST.Conditional.Condition.Kind);
  __int128 v7 = *(_OWORD *)(a1 + 112);
  v1[7] = *(_OWORD *)(a1 + 96);
  v1[8] = v7;
  v1[9] = *(_OWORD *)(a1 + 128);
  __int128 v8 = *(_OWORD *)(a1 + 48);
  v1[3] = *(_OWORD *)(a1 + 32);
  v1[4] = v8;
  __int128 v9 = *(_OWORD *)(a1 + 80);
  v1[5] = *(_OWORD *)(a1 + 64);
  v1[6] = v9;
  __n128 result = *(__n128 *)(a1 + 16);
  v1[1] = *(_OWORD *)a1;
  v1[2] = result;
  return result;
}

uint64_t (*AST.Conditional.condition.modify())()
{
  return AST.root.modify;
}

uint64_t AST.Conditional.trueBranch.getter@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 160);
  return swift_retain();
}

uint64_t AST.Conditional.trueBranch.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = swift_release();
  *(void *)(v1 + 160) = v2;
  return result;
}

uint64_t (*AST.Conditional.trueBranch.modify())()
{
  return AST.root.modify;
}

__n128 AST.Conditional.pipe.getter@<Q0>(__n128 *a1@<X8>)
{
  unsigned __int8 v2 = *(_BYTE *)(v1 + 184);
  __n128 result = *(__n128 *)(v1 + 168);
  *a1 = result;
  a1[1].n128_u8[0] = v2;
  return result;
}

__n128 AST.Conditional.pipe.setter(__n128 *a1)
{
  unsigned __int8 v2 = a1[1].n128_u8[0];
  __n128 result = *a1;
  *(__n128 *)(v1 + 168) = *a1;
  *(_BYTE *)(v1 + 184) = v2;
  return result;
}

uint64_t (*AST.Conditional.pipe.modify())()
{
  return AST.root.modify;
}

uint64_t AST.Conditional.falseBranch.getter@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 192);
  return swift_retain();
}

uint64_t AST.Conditional.falseBranch.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = swift_release();
  *(void *)(v1 + 192) = v2;
  return result;
}

uint64_t (*AST.Conditional.falseBranch.modify())()
{
  return AST.root.modify;
}

__n128 AST.Conditional.init(_:trueBranch:pipe:falseBranch:_:)@<Q0>( __int128 *a1@<X0>, uint64_t *a2@<X1>, __n128 *a3@<X2>, uint64_t *a4@<X3>, _OWORD *a5@<X4>, uint64_t a6@<X8>)
{
  __int128 v6 = a1[6];
  __int128 v7 = a1[7];
  __int128 v8 = a1[4];
  *(_OWORD *)(a6 + 96) = a1[5];
  *(_OWORD *)(a6 + 112) = v6;
  __int128 v9 = a1[8];
  *(_OWORD *)(a6 + 128) = v7;
  *(_OWORD *)(a6 + 144) = v9;
  __int128 v10 = a1[2];
  __int128 v11 = a1[3];
  __int128 v12 = *a1;
  *(_OWORD *)(a6 + 32) = a1[1];
  *(_OWORD *)(a6 + 48) = v10;
  *(_OWORD *)(a6 + 64) = v11;
  *(_OWORD *)(a6 + 80) = v8;
  uint64_t v13 = *a2;
  uint64_t v15 = *a4;
  unsigned __int8 v14 = a3[1].n128_u8[0];
  *(_OWORD *)a6 = *a5;
  *(_OWORD *)(a6 + 16) = v12;
  *(void *)(a6 + 160) = v13;
  __n128 result = *a3;
  *(__n128 *)(a6 + 168) = *a3;
  *(_BYTE *)(a6 + 184) = v14;
  *(void *)(a6 + 192) = v15;
  return result;
}

void AST.Conditional.hash(into:)()
{
  unint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  outlined init with take of AST.Conditional.Condition.Kind((__int128 *)v0 + 1, v12);
  unint64_t v3 = v0[18];
  unint64_t v4 = v0[19];
  uint64_t v6 = v0[20];
  unint64_t v5 = v0[21];
  unint64_t v7 = v0[22];
  int v8 = *((unsigned __int8 *)v0 + 184);
  Swift::UInt64 v9 = v1 >> 14;
  uint64_t v10 = v0[24];
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v2 >> 14);
  outlined init with take of AST.Conditional.Condition.Kind(v12, v11);
  AST.Conditional.Condition.Kind.hash(into:)();
  Hasher._combine(_:)(v3 >> 14);
  Hasher._combine(_:)(v4 >> 14);
  *(void *)&v11[0] = v6;
  AST.Node.hash(into:)();
  if (v8 == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v5 >> 14);
    Hasher._combine(_:)(v7 >> 14);
  }

  *(void *)&v11[0] = v10;
  AST.Node.hash(into:)();
}

Swift::Int AST.Conditional.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Conditional()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Conditional()
{
  return Hasher._finalize()();
}

uint64_t AST.Conditional._dumpBase.getter()
{
  unint64_t v0 = lazy protocol witness table accessor for type AST.Conditional.Condition and conformance AST.Conditional.Condition();
  v1._countAndFlagsBits = (*(uint64_t (**)(ValueMetadata *, unint64_t))(v0 + 24))( &type metadata for AST.Conditional.Condition,  v0);
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 0x206E65687420LL;
  v2._object = (void *)0xE600000000000000LL;
  String.append(_:)(v2);
  v3._countAndFlagsBits = specialized _ASTPrintable._dump()();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 0x2065736C6520LL;
  v4._object = (void *)0xE600000000000000LL;
  String.append(_:)(v4);
  v5._countAndFlagsBits = specialized _ASTPrintable._dump()();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  return 2123369LL;
}

void AST.Conditional.Condition.Kind.hash(into:)()
{
  Swift::String v1 = (char *)sub_180F898DC
     + 4 * byte_180FFFA82[_s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOWOg(v3)];
  __asm { BR              X10 }

void sub_180F898DC()
{
}

Swift::Int AST.Conditional.Condition.Kind.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Conditional.Condition.Kind()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Conditional.Condition.Kind()
{
  return Hasher._finalize()();
}

void *AST.Conditional.Condition.kind.getter@<X0>(_OWORD *a1@<X8>)
{
  return outlined retain of AST.Conditional.Condition( v4,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of AST.Conditional.Condition.Kind);
}

_OWORD *AST.Conditional.Condition.kind.setter(__int128 *a1)
{
  return outlined init with take of AST.Conditional.Condition.Kind(v3, v1);
}

uint64_t (*AST.Conditional.Condition.kind.modify())()
{
  return AST.root.modify;
}

__n128 AST.Conditional.Condition.location.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = v1[8];
  *a1 = result;
  return result;
}

__n128 AST.Conditional.Condition.location.setter(__n128 *a1)
{
  __n128 result = *a1;
  v1[8] = *a1;
  return result;
}

uint64_t (*AST.Conditional.Condition.location.modify())()
{
  return AST.root.modify;
}

double AST.Conditional.Condition.init(_:_:)@<D0>(__int128 *a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  outlined init with take of AST.Conditional.Condition.Kind(v12, v13);
  *(void *)&__int128 v14 = v6;
  *((void *)&v14 + 1) = v5;
  __int128 v7 = v13[7];
  a3[6] = v13[6];
  a3[7] = v7;
  __int128 v8 = v13[3];
  a3[2] = v13[2];
  a3[3] = v8;
  __int128 v9 = v13[5];
  a3[4] = v13[4];
  a3[5] = v9;
  __int128 v10 = v13[1];
  *a3 = v13[0];
  a3[1] = v10;
  double result = *(double *)&v14;
  a3[8] = v14;
  return result;
}

void AST.Conditional.Condition.hash(into:)()
{
  unint64_t v1 = *(void *)(v0 + 128);
  unint64_t v2 = *(void *)(v0 + 136);
  outlined init with take of AST.Conditional.Condition.Kind(v4, v3);
  AST.Conditional.Condition.Kind.hash(into:)();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
}

Swift::Int AST.Conditional.Condition.hashValue.getter()
{
  unint64_t v1 = *(void *)(v0 + 128);
  unint64_t v2 = *(void *)(v0 + 136);
  Hasher.init(_seed:)();
  outlined init with take of AST.Conditional.Condition.Kind(v5, v4);
  AST.Conditional.Condition.Kind.hash(into:)();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Conditional.Condition()
{
  unint64_t v1 = *(void *)(v0 + 128);
  unint64_t v2 = *(void *)(v0 + 136);
  Hasher.init(_seed:)();
  outlined init with take of AST.Conditional.Condition.Kind(v5, v4);
  AST.Conditional.Condition.Kind.hash(into:)();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AST.Conditional.Condition()
{
  unint64_t v1 = *(void *)(v0 + 128);
  unint64_t v2 = *(void *)(v0 + 136);
  outlined init with take of AST.Conditional.Condition.Kind(v4, v3);
  AST.Conditional.Condition.Kind.hash(into:)();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Conditional.Condition()
{
  unint64_t v1 = *(void *)(v0 + 128);
  unint64_t v2 = *(void *)(v0 + 136);
  Hasher.init(_seed:)();
  outlined init with take of AST.Conditional.Condition.Kind(v5, v4);
  AST.Conditional.Condition.Kind.hash(into:)();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  return Hasher._finalize()();
}

__n128 AST.Conditional.Condition.PCREVersionNumber.major.getter@<Q0>(__n128 *a1@<X8>)
{
  unsigned __int8 v2 = v1->n128_u8[8];
  a1->n128_u64[0] = v1->n128_u64[0];
  a1->n128_u8[8] = v2;
  __n128 result = v1[1];
  a1[1] = result;
  return result;
}

__n128 AST.Conditional.Condition.PCREVersionNumber.major.setter(__n128 *a1)
{
  unsigned __int8 v2 = a1->n128_u8[8];
  v1->n128_u64[0] = a1->n128_u64[0];
  v1->n128_u8[8] = v2;
  __n128 result = a1[1];
  v1[1] = result;
  return result;
}

uint64_t (*AST.Conditional.Condition.PCREVersionNumber.major.modify())()
{
  return AST.root.modify;
}

__n128 AST.Conditional.Condition.PCREVersionNumber.minor.getter@<Q0>(__n128 *a1@<X8>)
{
  unsigned __int8 v2 = v1[2].n128_u8[8];
  a1->n128_u64[0] = v1[2].n128_u64[0];
  a1->n128_u8[8] = v2;
  __n128 result = v1[3];
  a1[1] = result;
  return result;
}

__n128 AST.Conditional.Condition.PCREVersionNumber.minor.setter(__n128 *a1)
{
  unsigned __int8 v2 = a1->n128_u8[8];
  v1[2].n128_u64[0] = a1->n128_u64[0];
  v1[2].n128_u8[8] = v2;
  __n128 result = a1[1];
  v1[3] = result;
  return result;
}

uint64_t (*AST.Conditional.Condition.PCREVersionNumber.minor.modify())()
{
  return AST.root.modify;
}

__n128 AST.Conditional.Condition.PCREVersionNumber.location.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = v1[4];
  *a1 = result;
  return result;
}

__n128 AST.Conditional.Condition.PCREVersionNumber.location.setter(__n128 *a1)
{
  __n128 result = *a1;
  v1[4] = *a1;
  return result;
}

uint64_t (*AST.Conditional.Condition.PCREVersionNumber.location.modify())()
{
  return AST.root.modify;
}

__n128 AST.Conditional.Condition.PCREVersionNumber.init(major:minor:_:)@<Q0>( uint64_t a1@<X0>, __n128 *a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  char v4 = *(_BYTE *)(a1 + 8);
  unint64_t v5 = a2->n128_u64[0];
  unsigned __int8 v6 = a2->n128_u8[8];
  *(void *)a4 = *(void *)a1;
  *(_BYTE *)(a4 + 8) = v4;
  *(_OWORD *)(a4 + 16) = *(_OWORD *)(a1 + 16);
  *(void *)(a4 + 32) = v5;
  *(_BYTE *)(a4 + 40) = v6;
  __n128 result = a2[1];
  __int128 v8 = *a3;
  *(__n128 *)(a4 + 48) = result;
  *(_OWORD *)(a4 + 64) = v8;
  return result;
}

void AST.Conditional.Condition.PCREVersionNumber.hash(into:)()
{
  unint64_t v2 = *(void *)(v0 + 16);
  unint64_t v1 = *(void *)(v0 + 24);
  Swift::UInt v3 = *(void *)(v0 + 32);
  int v4 = *(unsigned __int8 *)(v0 + 40);
  unint64_t v6 = *(void *)(v0 + 48);
  unint64_t v5 = *(void *)(v0 + 56);
  unint64_t v8 = *(void *)(v0 + 64);
  unint64_t v7 = *(void *)(v0 + 72);
  if (*(_BYTE *)(v0 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt v9 = *(void *)v0;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v9);
  }

  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v1 >> 14);
  if (v4)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3);
  }

  Hasher._combine(_:)(v6 >> 14);
  Hasher._combine(_:)(v5 >> 14);
  Hasher._combine(_:)(v8 >> 14);
  Hasher._combine(_:)(v7 >> 14);
}

Swift::Int AST.Conditional.Condition.PCREVersionNumber.hashValue.getter()
{
  Swift::UInt v1 = *(void *)v0;
  int v2 = *(unsigned __int8 *)(v0 + 8);
  unint64_t v4 = *(void *)(v0 + 16);
  unint64_t v3 = *(void *)(v0 + 24);
  Swift::UInt v11 = *(void *)(v0 + 32);
  int v5 = *(unsigned __int8 *)(v0 + 40);
  unint64_t v7 = *(void *)(v0 + 48);
  unint64_t v6 = *(void *)(v0 + 56);
  unint64_t v9 = *(void *)(v0 + 64);
  unint64_t v8 = *(void *)(v0 + 72);
  Hasher.init(_seed:)();
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }

  Hasher._combine(_:)(v4 >> 14);
  Hasher._combine(_:)(v3 >> 14);
  if (v5)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v11);
  }

  Hasher._combine(_:)(v7 >> 14);
  Hasher._combine(_:)(v6 >> 14);
  Hasher._combine(_:)(v9 >> 14);
  Hasher._combine(_:)(v8 >> 14);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AST.Conditional.Condition.PCREVersionNumber()
{
  unint64_t v2 = *(void *)(v0 + 16);
  unint64_t v1 = *(void *)(v0 + 24);
  Swift::UInt v3 = *(void *)(v0 + 32);
  int v4 = *(unsigned __int8 *)(v0 + 40);
  unint64_t v6 = *(void *)(v0 + 48);
  unint64_t v5 = *(void *)(v0 + 56);
  unint64_t v8 = *(void *)(v0 + 64);
  unint64_t v7 = *(void *)(v0 + 72);
  if (*(_BYTE *)(v0 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt v9 = *(void *)v0;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v9);
  }

  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v1 >> 14);
  if (v4)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3);
  }

  Hasher._combine(_:)(v6 >> 14);
  Hasher._combine(_:)(v5 >> 14);
  Hasher._combine(_:)(v8 >> 14);
  Hasher._combine(_:)(v7 >> 14);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Conditional.Condition.PCREVersionNumber()
{
  Swift::UInt v1 = *(void *)v0;
  int v2 = *(unsigned __int8 *)(v0 + 8);
  unint64_t v4 = *(void *)(v0 + 16);
  unint64_t v3 = *(void *)(v0 + 24);
  Swift::UInt v11 = *(void *)(v0 + 32);
  int v5 = *(unsigned __int8 *)(v0 + 40);
  unint64_t v7 = *(void *)(v0 + 48);
  unint64_t v6 = *(void *)(v0 + 56);
  unint64_t v9 = *(void *)(v0 + 64);
  unint64_t v8 = *(void *)(v0 + 72);
  Hasher.init(_seed:)();
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }

  Hasher._combine(_:)(v4 >> 14);
  Hasher._combine(_:)(v3 >> 14);
  if (v5)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v11);
  }

  Hasher._combine(_:)(v7 >> 14);
  Hasher._combine(_:)(v6 >> 14);
  Hasher._combine(_:)(v9 >> 14);
  Hasher._combine(_:)(v8 >> 14);
  return Hasher._finalize()();
}

BOOL static AST.Conditional.Condition.PCREVersionCheck.Kind.== infix(_:_:)( unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void AST.Conditional.Condition.PCREVersionCheck.Kind.hash(into:)()
{
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AST.Conditional.Condition.PCREVersionCheck.Kind( unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void protocol witness for Hashable.hash(into:) in conformance AST.Conditional.Condition.PCREVersionCheck.Kind()
{
}

__n128 AST.Conditional.Condition.PCREVersionCheck.kind.getter@<Q0>(uint64_t a1@<X8>)
{
  *(_BYTE *)a1 = *(_BYTE *)v1;
  __n128 result = *(__n128 *)(v1 + 8);
  *(__n128 *)(a1 + 8) = result;
  return result;
}

__n128 AST.Conditional.Condition.PCREVersionCheck.kind.setter(uint64_t a1)
{
  *(_BYTE *)uint64_t v1 = *(_BYTE *)a1;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v1 + 8) = result;
  return result;
}

uint64_t (*AST.Conditional.Condition.PCREVersionCheck.kind.modify())()
{
  return AST.root.modify;
}

__n128 AST.Conditional.Condition.PCREVersionCheck.num.getter@<Q0>(uint64_t a1@<X8>)
{
  char v2 = *(_BYTE *)(v1 + 32);
  uint64_t v3 = *(void *)(v1 + 56);
  char v4 = *(_BYTE *)(v1 + 64);
  *(void *)a1 = *(void *)(v1 + 24);
  *(_BYTE *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v1 + 40);
  *(void *)(a1 + 32) = v3;
  *(_BYTE *)(a1 + 40) = v4;
  __n128 result = *(__n128 *)(v1 + 72);
  __int128 v6 = *(_OWORD *)(v1 + 88);
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v6;
  return result;
}

__n128 AST.Conditional.Condition.PCREVersionCheck.num.setter(uint64_t a1)
{
  *(_OWORD *)(v1 + 40) = *(_OWORD *)(a1 + 16);
  __n128 result = *(__n128 *)(a1 + 48);
  __int128 v3 = *(_OWORD *)(a1 + 64);
  *(__n128 *)(v1 + 72) = result;
  char v4 = *(_BYTE *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 32);
  char v6 = *(_BYTE *)(a1 + 40);
  *(void *)(v1 + 24) = *(void *)a1;
  *(_BYTE *)(v1 + 32) = v4;
  *(void *)(v1 + 56) = v5;
  *(_BYTE *)(v1 + 64) = v6;
  *(_OWORD *)(v1 + 88) = v3;
  return result;
}

uint64_t (*AST.Conditional.Condition.PCREVersionCheck.num.modify())()
{
  return AST.root.modify;
}

__n128 AST.Conditional.Condition.PCREVersionCheck.init(_:_:)@<Q0>( uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)(a3 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a3 + 40) = *((_OWORD *)a2 + 1);
  __n128 result = *((__n128 *)a2 + 3);
  __int128 v4 = *((_OWORD *)a2 + 4);
  *(__n128 *)(a3 + 72) = result;
  uint64_t v5 = *a2;
  char v6 = *((_BYTE *)a2 + 8);
  uint64_t v7 = a2[4];
  char v8 = *((_BYTE *)a2 + 40);
  *(_BYTE *)a3 = *(_BYTE *)a1;
  *(void *)(a3 + 24) = v5;
  *(_BYTE *)(a3 + 32) = v6;
  *(void *)(a3 + 56) = v7;
  *(_BYTE *)(a3 + 64) = v8;
  *(_OWORD *)(a3 + 88) = v4;
  return result;
}

void AST.Conditional.Condition.PCREVersionCheck.hash(into:)()
{
  unint64_t v1 = *((void *)v0 + 1);
  unint64_t v2 = *((void *)v0 + 2);
  Swift::UInt v3 = *((void *)v0 + 3);
  int v4 = v0[32];
  unint64_t v6 = *((void *)v0 + 5);
  unint64_t v5 = *((void *)v0 + 6);
  int v7 = v0[64];
  unint64_t v9 = *((void *)v0 + 9);
  unint64_t v8 = *((void *)v0 + 10);
  Swift::UInt v10 = *((void *)v0 + 7);
  unint64_t v11 = *((void *)v0 + 11);
  unint64_t v12 = *((void *)v0 + 12);
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  if (v4 == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3);
  }

  Hasher._combine(_:)(v6 >> 14);
  Hasher._combine(_:)(v5 >> 14);
  if (v7)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v10);
  }

  Hasher._combine(_:)(v9 >> 14);
  Hasher._combine(_:)(v8 >> 14);
  Hasher._combine(_:)(v11 >> 14);
  Hasher._combine(_:)(v12 >> 14);
}

Swift::Int AST.Conditional.Condition.PCREVersionCheck.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  unint64_t v2 = *((void *)v0 + 1);
  unint64_t v3 = *((void *)v0 + 2);
  Swift::UInt v4 = *((void *)v0 + 3);
  int v5 = v0[32];
  unint64_t v6 = *((void *)v0 + 5);
  unint64_t v7 = *((void *)v0 + 6);
  int v8 = v0[64];
  unint64_t v9 = *((void *)v0 + 9);
  Swift::UInt v11 = *((void *)v0 + 7);
  unint64_t v12 = *((void *)v0 + 10);
  unint64_t v13 = *((void *)v0 + 11);
  unint64_t v14 = *((void *)v0 + 12);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v3 >> 14);
  if (v5 == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v4);
  }

  Hasher._combine(_:)(v6 >> 14);
  Hasher._combine(_:)(v7 >> 14);
  if (v8)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v11);
  }

  Hasher._combine(_:)(v9 >> 14);
  Hasher._combine(_:)(v12 >> 14);
  Hasher._combine(_:)(v13 >> 14);
  Hasher._combine(_:)(v14 >> 14);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AST.Conditional.Condition.PCREVersionCheck()
{
  unint64_t v1 = *((void *)v0 + 1);
  unint64_t v2 = *((void *)v0 + 2);
  Swift::UInt v3 = *((void *)v0 + 3);
  int v4 = v0[32];
  unint64_t v6 = *((void *)v0 + 5);
  unint64_t v5 = *((void *)v0 + 6);
  int v7 = v0[64];
  unint64_t v9 = *((void *)v0 + 9);
  unint64_t v8 = *((void *)v0 + 10);
  Swift::UInt v10 = *((void *)v0 + 7);
  unint64_t v11 = *((void *)v0 + 11);
  unint64_t v12 = *((void *)v0 + 12);
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  if (v4 == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3);
  }

  Hasher._combine(_:)(v6 >> 14);
  Hasher._combine(_:)(v5 >> 14);
  if (v7)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v10);
  }

  Hasher._combine(_:)(v9 >> 14);
  Hasher._combine(_:)(v8 >> 14);
  Hasher._combine(_:)(v11 >> 14);
  Hasher._combine(_:)(v12 >> 14);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Conditional.Condition.PCREVersionCheck()
{
  Swift::UInt v1 = *v0;
  unint64_t v2 = *((void *)v0 + 1);
  unint64_t v3 = *((void *)v0 + 2);
  Swift::UInt v4 = *((void *)v0 + 3);
  int v5 = v0[32];
  unint64_t v6 = *((void *)v0 + 5);
  unint64_t v7 = *((void *)v0 + 6);
  int v8 = v0[64];
  unint64_t v9 = *((void *)v0 + 9);
  Swift::UInt v11 = *((void *)v0 + 7);
  unint64_t v12 = *((void *)v0 + 10);
  unint64_t v13 = *((void *)v0 + 11);
  unint64_t v14 = *((void *)v0 + 12);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v3 >> 14);
  if (v5 == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v4);
  }

  Hasher._combine(_:)(v6 >> 14);
  Hasher._combine(_:)(v7 >> 14);
  if (v8)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v11);
  }

  Hasher._combine(_:)(v9 >> 14);
  Hasher._combine(_:)(v12 >> 14);
  Hasher._combine(_:)(v13 >> 14);
  Hasher._combine(_:)(v14 >> 14);
  return Hasher._finalize()();
}

__n128 AST.CustomCharacterClass.start.getter@<Q0>(uint64_t a1@<X8>)
{
  *(_BYTE *)a1 = *(_BYTE *)v1;
  __n128 result = *(__n128 *)(v1 + 8);
  *(__n128 *)(a1 + 8) = result;
  return result;
}

__n128 AST.CustomCharacterClass.start.setter(uint64_t a1)
{
  *(_BYTE *)uint64_t v1 = *(_BYTE *)a1;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v1 + 8) = result;
  return result;
}

uint64_t (*AST.CustomCharacterClass.start.modify())()
{
  return AST.root.modify;
}

uint64_t AST.CustomCharacterClass.members.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AST.CustomCharacterClass.members.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 24) = a1;
  return result;
}

uint64_t (*AST.CustomCharacterClass.members.modify())()
{
  return AST.root.modify;
}

__n128 AST.CustomCharacterClass.location.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = v1[2];
  *a1 = result;
  return result;
}

__n128 AST.CustomCharacterClass.init(_:_:_:)@<Q0>( uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X2>, uint64_t a4@<X8>)
{
  *(_BYTE *)a4 = *(_BYTE *)a1;
  *(_OWORD *)(a4 + 8) = *(_OWORD *)(a1 + 8);
  *(void *)(a4 + 24) = a2;
  __n128 result = *a3;
  *(__n128 *)(a4 + 32) = *a3;
  return result;
}

void AST.CustomCharacterClass.Member.hash(into:)()
{
  uint64_t v1 = type metadata accessor for AST.Atom(0LL);
  MEMORY[0x1895F8858](v1, v2);
  uint64_t v3 = type metadata accessor for AST.CustomCharacterClass.Range(0LL);
  MEMORY[0x1895F8858](v3, v4);
  uint64_t v5 = type metadata accessor for AST.CustomCharacterClass.Member(0LL);
  MEMORY[0x1895F8858](v5, v6);
  outlined init with copy of AST.Atom(v0, (uint64_t)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL), v8);
  unint64_t v9 = (char *)sub_180F8AC98 + 4 * byte_180FFFA88[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }

uint64_t sub_180F8AC98()
{
  unint64_t v3 = v1[1];
  unint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  unint64_t v6 = v1[4];
  unint64_t v7 = v1[5];
  Hasher._combine(_:)(0LL);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v3 >> 14);
  Hasher._combine(_:)(v4 >> 14);
  Swift::UInt v8 = *(void *)(v5 + 16);
  Hasher._combine(_:)(v8);
  if (v8)
  {
    uint64_t v9 = v5 + ((*(unsigned __int8 *)(v2 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
    uint64_t v10 = *(void *)(v2 + 72);
    do
    {
      ((void (*)(uint64_t))AST.CustomCharacterClass.Member.hash(into:))(v0);
      v9 += v10;
      --v8;
    }

    while (v8);
  }

  Hasher._combine(_:)(v6 >> 14);
  Hasher._combine(_:)(v7 >> 14);
  return swift_bridgeObjectRelease();
}

Swift::Int AST.CustomCharacterClass.Member.hashValue.getter()
{
  return AST.Atom.Kind.hashValue.getter((void (*)(_BYTE *))AST.CustomCharacterClass.Member.hash(into:));
}

Swift::Int AST.Atom.Kind.hashValue.getter(void (*a1)(_BYTE *))
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.CustomCharacterClass.Member( uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance AST.Atom.Kind( a1,  a2,  (void (*)(_BYTE *))AST.CustomCharacterClass.Member.hash(into:));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Atom.Kind( uint64_t a1, uint64_t a2, void (*a3)(_BYTE *))
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.CustomCharacterClass.Member( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.Kind( a1,  a2,  a3,  (void (*)(_BYTE *))AST.CustomCharacterClass.Member.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.Kind( uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_BYTE *))
{
  return Hasher._finalize()();
}

uint64_t AST.CustomCharacterClass.Range.lhs.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of AST.Atom(v1, a1, type metadata accessor for AST.Atom);
}

uint64_t AST.CustomCharacterClass.Range.lhs.setter(uint64_t a1)
{
  return outlined assign with take of AST.Atom.CharacterProperty.Kind(a1, v1, type metadata accessor for AST.Atom);
}

uint64_t (*AST.CustomCharacterClass.Range.lhs.modify())()
{
  return AST.root.modify;
}

__n128 AST.CustomCharacterClass.Range.dashLoc.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = *(__n128 *)(v1 + *(int *)(type metadata accessor for AST.CustomCharacterClass.Range(0LL) + 20));
  *a1 = result;
  return result;
}

uint64_t AST.CustomCharacterClass.Range.dashLoc.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t result = type metadata accessor for AST.CustomCharacterClass.Range(0LL);
  uint64_t v5 = (void *)(v1 + *(int *)(result + 20));
  *uint64_t v5 = v2;
  v5[1] = v3;
  return result;
}

uint64_t (*AST.CustomCharacterClass.Range.dashLoc.modify())(void)
{
  return AST.root.modify;
}

uint64_t AST.CustomCharacterClass.Range.rhs.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for AST.CustomCharacterClass.Range(0LL);
  return outlined init with copy of AST.Atom(v1 + *(int *)(v3 + 24), a1, type metadata accessor for AST.Atom);
}

uint64_t AST.CustomCharacterClass.Range.rhs.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for AST.CustomCharacterClass.Range(0LL);
  return outlined assign with take of AST.Atom.CharacterProperty.Kind( a1,  v1 + *(int *)(v3 + 24),  type metadata accessor for AST.Atom);
}

uint64_t (*AST.CustomCharacterClass.Range.rhs.modify())(void)
{
  return AST.root.modify;
}

uint64_t AST.CustomCharacterClass.Range.trivia.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AST.CustomCharacterClass.Range.trivia.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for AST.CustomCharacterClass.Range(0LL) + 28);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + outlined init with take of AST.Conditional.Condition.Kind(v0, v3) = a1;
  return result;
}

uint64_t (*AST.CustomCharacterClass.Range.trivia.modify())(void)
{
  return AST.root.modify;
}

uint64_t AST.CustomCharacterClass.Range.init(_:_:_:trivia:)@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  outlined init with take of AST.Atom.Kind(a1, a5, type metadata accessor for AST.Atom);
  uint64_t v10 = (int *)type metadata accessor for AST.CustomCharacterClass.Range(0LL);
  Swift::UInt v11 = (void *)(a5 + v10[5]);
  *Swift::UInt v11 = v8;
  v11[1] = v9;
  uint64_t result = outlined init with take of AST.Atom.Kind(a3, a5 + v10[6], type metadata accessor for AST.Atom);
  *(void *)(a5 + v10[7]) = a4;
  return result;
}

uint64_t AST.CustomCharacterClass.Range.location.getter@<X0>(uint64x2_t *a1@<X8>)
{
  uint64_t v3 = (uint64x2_t *)(v1 + *(int *)(type metadata accessor for AST.Atom(0LL) + 20));
  uint64_t result = type metadata accessor for AST.CustomCharacterClass.Range(0LL);
  int8x16_t v5 = *(int8x16_t *)v3;
  v6.i64[0] = *(uint64_t *)((char *)v3->i64 + *(int *)(result + 24));
  v6.i64[1] = v3->i64[1];
  v5.i64[1] = *(uint64_t *)((char *)&v3->i64[1] + *(int *)(result + 24));
  uint64x2_t v7 = (uint64x2_t)vbslq_s8( (int8x16_t)vcgtq_u64( vshrq_n_u64(*v3, 0xEuLL),  vshrq_n_u64(*(uint64x2_t *)((char *)v3 + *(int *)(result + 24)), 0xEuLL)),  v6,  v5);
  int64x2_t v8 = (int64x2_t)vshrq_n_u64(v7, 0xEuLL);
  else {
    *a1 = v7;
  }
  return result;
}

void AST.CustomCharacterClass.Range.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  AST.Atom.Kind.hash(into:)();
  uint64_t v4 = type metadata accessor for AST.Atom(0LL);
  int8x16_t v5 = (void *)(v1 + *(int *)(v4 + 20));
  unint64_t v6 = v5[1];
  Hasher._combine(_:)(*v5 >> 14);
  Hasher._combine(_:)(v6 >> 14);
  uint64x2_t v7 = (int *)type metadata accessor for AST.CustomCharacterClass.Range(0LL);
  int64x2_t v8 = (void *)(v1 + v7[5]);
  unint64_t v9 = v8[1];
  Hasher._combine(_:)(*v8 >> 14);
  Hasher._combine(_:)(v9 >> 14);
  uint64_t v10 = v1 + v7[6];
  AST.Atom.Kind.hash(into:)();
  Swift::UInt v11 = (void *)(v10 + *(int *)(v4 + 20));
  unint64_t v12 = v11[1];
  Hasher._combine(_:)(*v11 >> 14);
  Hasher._combine(_:)(v12 >> 14);
  specialized Array<A>.hash(into:)(a1, *(void *)(v2 + v7[7]));
}

Swift::Int AST.CustomCharacterClass.Range.hashValue.getter()
{
  uint64_t v1 = v0;
  Hasher.init(_seed:)();
  AST.Atom.Kind.hash(into:)();
  uint64_t v2 = type metadata accessor for AST.Atom(0LL);
  uint64_t v3 = (void *)(v0 + *(int *)(v2 + 20));
  unint64_t v4 = v3[1];
  Hasher._combine(_:)(*v3 >> 14);
  Hasher._combine(_:)(v4 >> 14);
  int8x16_t v5 = (int *)type metadata accessor for AST.CustomCharacterClass.Range(0LL);
  unint64_t v6 = (void *)(v0 + v5[5]);
  unint64_t v7 = v6[1];
  Hasher._combine(_:)(*v6 >> 14);
  Hasher._combine(_:)(v7 >> 14);
  uint64_t v8 = v0 + v5[6];
  AST.Atom.Kind.hash(into:)();
  unint64_t v9 = (void *)(v8 + *(int *)(v2 + 20));
  unint64_t v10 = v9[1];
  Hasher._combine(_:)(*v9 >> 14);
  Hasher._combine(_:)(v10 >> 14);
  specialized Array<A>.hash(into:)((uint64_t)v12, *(void *)(v1 + v5[7]));
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AST.CustomCharacterClass.Range( uint64_t a1, int *a2)
{
  uint64_t v4 = v2;
  AST.Atom.Kind.hash(into:)();
  uint64_t v6 = type metadata accessor for AST.Atom(0LL);
  unint64_t v7 = (void *)(v2 + *(int *)(v6 + 20));
  unint64_t v8 = v7[1];
  Hasher._combine(_:)(*v7 >> 14);
  Hasher._combine(_:)(v8 >> 14);
  unint64_t v9 = (void *)(v2 + a2[5]);
  unint64_t v10 = v9[1];
  Hasher._combine(_:)(*v9 >> 14);
  Hasher._combine(_:)(v10 >> 14);
  uint64_t v11 = v2 + a2[6];
  AST.Atom.Kind.hash(into:)();
  unint64_t v12 = (void *)(v11 + *(int *)(v6 + 20));
  unint64_t v13 = v12[1];
  Hasher._combine(_:)(*v12 >> 14);
  Hasher._combine(_:)(v13 >> 14);
  specialized Array<A>.hash(into:)(a1, *(void *)(v4 + a2[7]));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.CustomCharacterClass.Range( uint64_t a1, int *a2)
{
  uint64_t v4 = v2;
  Hasher.init(_seed:)();
  AST.Atom.Kind.hash(into:)();
  uint64_t v5 = type metadata accessor for AST.Atom(0LL);
  uint64_t v6 = (void *)(v2 + *(int *)(v5 + 20));
  unint64_t v7 = v6[1];
  Hasher._combine(_:)(*v6 >> 14);
  Hasher._combine(_:)(v7 >> 14);
  unint64_t v8 = (void *)(v2 + a2[5]);
  unint64_t v9 = v8[1];
  Hasher._combine(_:)(*v8 >> 14);
  Hasher._combine(_:)(v9 >> 14);
  uint64_t v10 = v2 + a2[6];
  AST.Atom.Kind.hash(into:)();
  uint64_t v11 = (void *)(v10 + *(int *)(v5 + 20));
  unint64_t v12 = v11[1];
  Hasher._combine(_:)(*v11 >> 14);
  Hasher._combine(_:)(v12 >> 14);
  specialized Array<A>.hash(into:)((uint64_t)v14, *(void *)(v4 + a2[7]));
  return Hasher._finalize()();
}

_RegexParser::AST::CustomCharacterClass::SetOp_optional __swiftcall AST.CustomCharacterClass.SetOp.init(rawValue:)( Swift::String rawValue)
{
  v2._rawValue = &outlined read-only object #0 of AST.CustomCharacterClass.SetOp.init(rawValue:);
  return (_RegexParser::AST::CustomCharacterClass::SetOp_optional)AST.CustomCharacterClass.SetOp.init(rawValue:)( rawValue,  v2,  v1);
}

uint64_t AST.CustomCharacterClass.SetOp.rawValue.getter()
{
  return qword_181005B30[*v0];
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AST.CustomCharacterClass.SetOp( char *a1, char *a2)
{
  if (qword_181005B30[*a1] == qword_181005B30[*a2]) {
    char v2 = 1;
  }
  else {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease_n();
  return v2 & 1;
}

_RegexParser::AST::CustomCharacterClass::SetOp_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AST.CustomCharacterClass.SetOp( Swift::String *a1)
{
  return AST.CustomCharacterClass.SetOp.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AST.CustomCharacterClass.SetOp( void *a1@<X8>)
{
  *a1 = qword_181005B30[*v1];
  a1[1] = 0xE200000000000000LL;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.CustomCharacterClass.SetOp()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AST.CustomCharacterClass.SetOp()
{
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.CustomCharacterClass.SetOp()
{
  return Hasher._finalize()();
}

_RegexParser::AST::CustomCharacterClass::Start_optional __swiftcall AST.CustomCharacterClass.Start.init(rawValue:)( Swift::String rawValue)
{
  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  uint64_t v4 = v1;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of AST.CustomCharacterClass.Start.init(rawValue:),  v3);
  result.value = swift_bridgeObjectRelease();
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *uint64_t v4 = v7;
  return result;
}

uint64_t AST.CustomCharacterClass.Start.rawValue.getter()
{
  if (*v0) {
    return 24155LL;
  }
  else {
    return 91LL;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AST.CustomCharacterClass.Start( _BYTE *a1, _BYTE *a2)
{
  BOOL v2 = *a1 == 0;
  if (*a1) {
    uint64_t v3 = 24155LL;
  }
  else {
    uint64_t v3 = 91LL;
  }
  if (v2) {
    unint64_t v4 = 0xE100000000000000LL;
  }
  else {
    unint64_t v4 = 0xE200000000000000LL;
  }
  if (*a2) {
    uint64_t v5 = 24155LL;
  }
  else {
    uint64_t v5 = 91LL;
  }
  if (*a2) {
    unint64_t v6 = 0xE200000000000000LL;
  }
  else {
    unint64_t v6 = 0xE100000000000000LL;
  }
  if (v3 == v5 && v4 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

_RegexParser::AST::CustomCharacterClass::Start_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AST.CustomCharacterClass.Start( Swift::String *a1)
{
  return AST.CustomCharacterClass.Start.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AST.CustomCharacterClass.Start( uint64_t *a1@<X8>)
{
  uint64_t v2 = 91LL;
  if (*v1) {
    uint64_t v2 = 24155LL;
  }
  unint64_t v3 = 0xE100000000000000LL;
  if (*v1) {
    unint64_t v3 = 0xE200000000000000LL;
  }
  *a1 = v2;
  a1[1] = v3;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.CustomCharacterClass.Start()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AST.CustomCharacterClass.Start()
{
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.CustomCharacterClass.Start()
{
  return Hasher._finalize()();
}

void AST.CustomCharacterClass.hash(into:)()
{
  unint64_t v1 = v0[1];
  unint64_t v2 = v0[2];
  uint64_t v4 = v0[3];
  unint64_t v3 = v0[4];
  unint64_t v5 = v0[5];
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  Swift::UInt v6 = *(void *)(v4 + 16);
  Hasher._combine(_:)(v6);
  if (v6)
  {
    uint64_t v7 = *(void *)(type metadata accessor for AST.CustomCharacterClass.Member(0LL) - 8);
    uint64_t v8 = v4 + ((*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    uint64_t v9 = *(void *)(v7 + 72);
    do
    {
      AST.CustomCharacterClass.Member.hash(into:)();
      v8 += v9;
      --v6;
    }

    while (v6);
  }

  Hasher._combine(_:)(v3 >> 14);
  Hasher._combine(_:)(v5 >> 14);
}

Swift::Int AST.CustomCharacterClass.hashValue.getter()
{
  unint64_t v1 = v0[1];
  unint64_t v2 = v0[2];
  uint64_t v4 = v0[3];
  unint64_t v3 = v0[4];
  unint64_t v5 = v0[5];
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  Swift::UInt v6 = *(void *)(v4 + 16);
  Hasher._combine(_:)(v6);
  if (v6)
  {
    uint64_t v7 = *(void *)(type metadata accessor for AST.CustomCharacterClass.Member(0LL) - 8);
    uint64_t v8 = v4 + ((*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    uint64_t v9 = *(void *)(v7 + 72);
    do
    {
      AST.CustomCharacterClass.Member.hash(into:)();
      v8 += v9;
      --v6;
    }

    while (v6);
  }

  Hasher._combine(_:)(v3 >> 14);
  Hasher._combine(_:)(v5 >> 14);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AST.CustomCharacterClass(uint64_t a1)
{
  unint64_t v3 = v1[1];
  unint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  unint64_t v6 = v1[4];
  unint64_t v7 = v1[5];
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v3 >> 14);
  Hasher._combine(_:)(v4 >> 14);
  specialized Array<A>.hash(into:)(a1, v5);
  Hasher._combine(_:)(v6 >> 14);
  Hasher._combine(_:)(v7 >> 14);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.CustomCharacterClass()
{
  unint64_t v1 = v0[1];
  unint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  unint64_t v4 = v0[4];
  unint64_t v5 = v0[5];
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  specialized Array<A>.hash(into:)((uint64_t)v7, v3);
  Hasher._combine(_:)(v4 >> 14);
  Hasher._combine(_:)(v5 >> 14);
  return Hasher._finalize()();
}

uint64_t AST.CustomCharacterClass.isInverted.getter()
{
  if (*v0 == 1) {
    char v1 = 1;
  }
  else {
    char v1 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  return v1 & 1;
}

BOOL AST.CustomCharacterClass.Member.isTrivia.getter()
{
  uint64_t v1 = type metadata accessor for AST.CustomCharacterClass.Member(0LL);
  MEMORY[0x1895F8858](v1, v2);
  unint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of AST.Atom(v0, (uint64_t)v4, type metadata accessor for AST.CustomCharacterClass.Member);
  BOOL v5 = swift_getEnumCaseMultiPayload() == 4;
  outlined destroy of AST.Atom((uint64_t)v4, type metadata accessor for AST.CustomCharacterClass.Member);
  return v5;
}

uint64_t AST.CustomCharacterClass.Member.asTrivia.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for AST.CustomCharacterClass.Member(0LL);
  MEMORY[0x1895F8858](v4, v5);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of AST.Atom(v2, (uint64_t)v7, v8);
  uint64_t result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 4)
  {
    uint64_t v10 = *(void *)v7;
    uint64_t v11 = *((void *)v7 + 1);
    __int128 v12 = *((_OWORD *)v7 + 1);
  }

  else
  {
    uint64_t result = outlined destroy of AST.Atom((uint64_t)v7, type metadata accessor for AST.CustomCharacterClass.Member);
    uint64_t v10 = 0LL;
    uint64_t v11 = 0LL;
    __int128 v12 = 0uLL;
  }

  *(void *)a1 = v10;
  *(void *)(a1 + 8) = v11;
  *(_OWORD *)(a1 + 16) = v12;
  return result;
}

BOOL AST.CustomCharacterClass.Member.isSemantic.getter()
{
  uint64_t v1 = type metadata accessor for AST.CustomCharacterClass.Member(0LL);
  MEMORY[0x1895F8858](v1, v2);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of AST.Atom(v0, (uint64_t)v4, type metadata accessor for AST.CustomCharacterClass.Member);
  BOOL v5 = swift_getEnumCaseMultiPayload() != 4;
  outlined destroy of AST.Atom((uint64_t)v4, type metadata accessor for AST.CustomCharacterClass.Member);
  return v5;
}

void AST.CustomCharacterClass.Member.location.getter(uint64_t a1@<X8>)
{
  v21[3] = a1;
  uint64_t v2 = type metadata accessor for AST.Atom(0LL);
  MEMORY[0x1895F8858](v2, v3);
  uint64_t v4 = type metadata accessor for AST.CustomCharacterClass.Range(0LL);
  MEMORY[0x1895F8858](v4, v5);
  uint64_t v6 = type metadata accessor for AST.CustomCharacterClass.Member(0LL);
  uint64_t v8 = MEMORY[0x1895F8858](v6, v7);
  v21[1] = (char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = MEMORY[0x1895F8858](v8, v10);
  v21[2] = (char *)v21 - v12;
  uint64_t v14 = MEMORY[0x1895F8858](v11, v13);
  uint64_t v16 = MEMORY[0x1895F8858](v14, v15);
  MEMORY[0x1895F8858](v16, v17);
  outlined init with copy of AST.Atom(v1, (uint64_t)v21 - v18, v19);
  __int128 v20 = (char *)&loc_180F8C1E4 + *((int *)qword_180F8C410 + swift_getEnumCaseMultiPayload());
  __asm { BR              X10 }

uint64_t sub_180F8C1F4()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v5 = *(void **)(v1 - 104);
  *uint64_t v5 = v2;
  v5[1] = v3;
  return result;
}

uint64_t AST.CustomCharacterClass.strippingTriviaShallow.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for AST.CustomCharacterClass.Member(0LL);
  uint64_t v41 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x1895F8858](v3, v4);
  uint64_t v40 = (uint64_t)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = MEMORY[0x1895F8858](v5, v7);
  uint64_t v10 = (char *)&v31 - v9;
  MEMORY[0x1895F8858](v8, v11);
  uint64_t v13 = (char *)&v31 - v12;
  int v14 = *(unsigned __int8 *)v1;
  uint64_t v16 = v1[1];
  uint64_t v15 = v1[2];
  uint64_t v17 = v1[3];
  uint64_t v35 = v1[4];
  uint64_t v36 = v15;
  uint64_t v18 = v1[5];
  uint64_t v19 = MEMORY[0x18961AFE8];
  uint64_t v42 = MEMORY[0x18961AFE8];
  uint64_t v20 = *(void *)(v17 + 16);
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v39 = v20;
  uint64_t v37 = v18;
  if (v20)
  {
    uint64_t v32 = v16;
    int v33 = v14;
    uint64_t v34 = a1;
    unint64_t v22 = 0LL;
    uint64_t v23 = MEMORY[0x18961AFE8];
    uint64_t v38 = v3;
    while (v22 < *(void *)(v17 + 16))
    {
      unint64_t v24 = (*(unsigned __int8 *)(v41 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80);
      uint64_t v25 = *(void *)(v41 + 72);
      outlined init with copy of AST.Atom( v17 + v24 + v25 * v22,  (uint64_t)v13,  type metadata accessor for AST.CustomCharacterClass.Member);
      outlined init with copy of AST.Atom( (uint64_t)v13,  (uint64_t)v10,  type metadata accessor for AST.CustomCharacterClass.Member);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      outlined destroy of AST.Atom((uint64_t)v10, type metadata accessor for AST.CustomCharacterClass.Member);
      if (EnumCaseMultiPayload == 4)
      {
        uint64_t result = outlined destroy of AST.Atom((uint64_t)v13, type metadata accessor for AST.CustomCharacterClass.Member);
      }

      else
      {
        outlined init with take of AST.Atom.Kind( (uint64_t)v13,  v40,  type metadata accessor for AST.CustomCharacterClass.Member);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v23 + 16) + 1LL,  1);
        }
        uint64_t v23 = v42;
        unint64_t v28 = *(void *)(v42 + 16);
        unint64_t v27 = *(void *)(v42 + 24);
        if (v28 >= v27 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v27 > 1,  v28 + 1,  1);
          uint64_t v23 = v42;
        }

        *(void *)(v23 + 16) = v28 + 1;
        uint64_t result = outlined init with take of AST.Atom.Kind( v40,  v23 + v24 + v28 * v25,  type metadata accessor for AST.CustomCharacterClass.Member);
      }

      if (v39 == ++v22)
      {
        uint64_t v19 = v42;
        a1 = v34;
        LOBYTE(v14) = v33;
        uint64_t v16 = v32;
        goto LABEL_13;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_13:
    uint64_t v30 = v35;
    uint64_t v29 = v36;
    uint64_t result = swift_bridgeObjectRelease();
    *(_BYTE *)a1 = v14;
    *(void *)(a1 + 8) = v16;
    *(void *)(a1 + 16) = v29;
    *(void *)(a1 + 24) = v19;
    *(void *)(a1 + 32) = v30;
    *(void *)(a1 + 40) = v37;
  }

  return result;
}

uint64_t AST.Group.kind.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  uint64_t v8 = *(void *)(v1 + 48);
  uint64_t v9 = *(void *)(v1 + 56);
  uint64_t v10 = *(void *)(v1 + 64);
  uint64_t v11 = *(void *)(v1 + 72);
  char v12 = *(_BYTE *)(v1 + 80);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v8;
  *(void *)(a1 + 56) = v9;
  *(void *)(a1 + 64) = v10;
  *(void *)(a1 + 72) = v11;
  *(_BYTE *)(a1 + 80) = v12;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(v1 + 88);
  return outlined copy of AST.Group.Kind(v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12);
}

uint64_t AST.Group.child.getter@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 104);
  return swift_retain();
}

__n128 AST.Group.init(_:_:_:)@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, __n128 *a3@<X2>, uint64_t a4@<X8>)
{
  char v4 = *(_BYTE *)(a1 + 80);
  uint64_t v5 = *a2;
  __int128 v6 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a4 = *(_OWORD *)a1;
  *(_OWORD *)(a4 + 16) = v6;
  __int128 v7 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a4 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a4 + 48) = v7;
  *(_OWORD *)(a4 + 64) = *(_OWORD *)(a1 + 64);
  *(_BYTE *)(a4 + 80) = v4;
  *(_OWORD *)(a4 + 88) = *(_OWORD *)(a1 + 88);
  *(void *)(a4 + 104) = v5;
  __n128 result = *a3;
  *(__n128 *)(a4 + 112) = *a3;
  return result;
}

void AST.Group.Kind.hash(into:)()
{
  __asm { BR              X10 }

void sub_180F8C77C()
{
}

Swift::Int AST.Group.Kind.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Group.Kind()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Group.Kind()
{
  return Hasher._finalize()();
}

void AST.Group.hash(into:)()
{
  unint64_t v1 = v0[11];
  unint64_t v2 = v0[12];
  unint64_t v3 = v0[14];
  unint64_t v4 = v0[15];
  AST.Group.Kind.hash(into:)();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  AST.Node.hash(into:)();
  Hasher._combine(_:)(v3 >> 14);
  Hasher._combine(_:)(v4 >> 14);
}

Swift::Int AST.Group.hashValue.getter()
{
  unint64_t v1 = v0[11];
  unint64_t v2 = v0[12];
  unint64_t v3 = v0[14];
  unint64_t v4 = v0[15];
  Hasher.init(_seed:)();
  AST.Group.Kind.hash(into:)();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  AST.Node.hash(into:)();
  Hasher._combine(_:)(v3 >> 14);
  Hasher._combine(_:)(v4 >> 14);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Group()
{
  unint64_t v1 = v0[11];
  unint64_t v2 = v0[12];
  unint64_t v3 = v0[14];
  unint64_t v4 = v0[15];
  Hasher.init(_seed:)();
  AST.Group.Kind.hash(into:)();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  AST.Node.hash(into:)();
  Hasher._combine(_:)(v3 >> 14);
  Hasher._combine(_:)(v4 >> 14);
  return Hasher._finalize()();
}

uint64_t AST.Group.Kind.name.getter()
{
  uint64_t v1 = *v0;
  if (*((_BYTE *)v0 + 80) == 1)
  {
    if (!v0[1]) {
      return 0LL;
    }
    goto LABEL_5;
  }

  if (!*((_BYTE *)v0 + 80))
  {
LABEL_5:
    swift_bridgeObjectRetain();
    return v1;
  }

  return 0LL;
}

uint64_t AST.Group.Kind.lookaroundKind.getter()
{
  if (v0[5].i8[0] != 3) {
    return 2LL;
  }
  uint64_t v1 = v0->i64[0];
  int8x16_t v2 = vorrq_s8(vorrq_s8(v0[1], v0[3]), vorrq_s8(v0[2], v0[4]));
  uint64_t v3 = *(void *)&vorr_s8(*(int8x8_t *)v2.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v2, v2, 8uLL)) | v0->i64[1];
  if (v0->i64[0] == 4 && v3 == 0) {
    return 257LL;
  }
  if (v1 == 5 && v3 == 0) {
    return 1LL;
  }
  if (v1 != 7 || v3 != 0)
  {
    if (v1 == 8 && !v3) {
      return 0LL;
    }
    return 2LL;
  }

  return 256LL;
}

uint64_t AST.Group.BalancedCapture.name.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 24);
  *(void *)a1 = *(void *)v1;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 8);
  *(void *)(a1 + 24) = v2;
  return swift_bridgeObjectRetain();
}

__n128 AST.Group.BalancedCapture.name.setter(__n128 *a1)
{
  __n128 v5 = *a1;
  unint64_t v2 = a1[1].n128_u64[0];
  unint64_t v3 = a1[1].n128_u64[1];
  swift_bridgeObjectRelease();
  __n128 result = v5;
  __n128 *v1 = v5;
  v1[1].n128_u64[0] = v2;
  v1[1].n128_u64[1] = v3;
  return result;
}

uint64_t (*AST.Group.BalancedCapture.name.modify())()
{
  return AST.root.modify;
}

__n128 AST.Group.BalancedCapture.dash.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = v1[2];
  *a1 = result;
  return result;
}

__n128 AST.Group.BalancedCapture.dash.setter(__n128 *a1)
{
  __n128 result = *a1;
  v1[2] = *a1;
  return result;
}

uint64_t (*AST.Group.BalancedCapture.dash.modify())()
{
  return AST.root.modify;
}

uint64_t AST.Group.BalancedCapture.priorName.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 56);
  *(void *)a1 = *(void *)(v1 + 48);
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v1 + 64);
  return swift_bridgeObjectRetain();
}

__n128 AST.Group.BalancedCapture.priorName.setter(__n128 *a1)
{
  __n128 v5 = *a1;
  unint64_t v2 = a1[1].n128_u64[0];
  unint64_t v3 = a1[1].n128_u64[1];
  swift_bridgeObjectRelease();
  __n128 result = v5;
  v1[3] = v5;
  v1[4].n128_u64[0] = v2;
  v1[4].n128_u64[1] = v3;
  return result;
}

uint64_t (*AST.Group.BalancedCapture.priorName.modify())()
{
  return AST.root.modify;
}

__n128 AST.Group.BalancedCapture.init(name:dash:priorName:)@<Q0>( _OWORD *a1@<X0>, _OWORD *a2@<X1>, __n128 *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v4 = a3->n128_u64[0];
  unint64_t v5 = a3->n128_u64[1];
  __int128 v6 = a1[1];
  *(_OWORD *)a4 = *a1;
  *(_OWORD *)(a4 + 16) = v6;
  *(_OWORD *)(a4 + 32) = *a2;
  *(void *)(a4 + 48) = v4;
  *(void *)(a4 + 56) = v5;
  __n128 result = a3[1];
  *(__n128 *)(a4 + 64) = result;
  return result;
}

void AST.Group.BalancedCapture.hash(into:)()
{
  unint64_t v2 = v0[4];
  unint64_t v1 = v0[5];
  unint64_t v3 = v0[8];
  unint64_t v4 = v0[9];
  if (v0[1])
  {
    unint64_t v8 = v0[3];
    unint64_t v5 = v0[8];
    unint64_t v6 = v0[2];
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    Swift::UInt64 v7 = v6 >> 14;
    unint64_t v3 = v5;
    Hasher._combine(_:)(v7);
    Hasher._combine(_:)(v8 >> 14);
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v1 >> 14);
  String.hash(into:)();
  Hasher._combine(_:)(v3 >> 14);
  Hasher._combine(_:)(v4 >> 14);
}

Swift::Int AST.Group.BalancedCapture.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Group.BalancedCapture()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Group.BalancedCapture()
{
  return Hasher._finalize()();
}

void AST.MatchingOption.kind.getter(_BYTE *a1@<X8>)
{
  *a1 = *v1;
}

_BYTE *AST.MatchingOption.kind.setter(_BYTE *result)
{
  _BYTE *v1 = *result;
  return result;
}

uint64_t (*AST.MatchingOption.kind.modify())()
{
  return AST.root.modify;
}

__n128 AST.MatchingOption.location.setter(__n128 *a1)
{
  __n128 result = *a1;
  *(__n128 *)(v1 + 8) = *a1;
  return result;
}

uint64_t (*AST.MatchingOption.location.modify())()
{
  return AST.root.modify;
}

__n128 AST.MatchingOption.init(_:location:)@<Q0>(_BYTE *a1@<X0>, __n128 *a2@<X1>, uint64_t a3@<X8>)
{
  *(_BYTE *)a3 = *a1;
  __n128 result = *a2;
  *(__n128 *)(a3 + 8) = *a2;
  return result;
}

BOOL AST.MatchingOption.isAnyExtended.getter()
{
  return (*v0 & 0xFE) == 6;
}

BOOL AST.MatchingOption.isTextSegmentMode.getter()
{
  return *v0 - 13 < 2;
}

BOOL AST.MatchingOption.isSemanticMatchingLevel.getter()
{
  return *v0 - 15 < 3;
}

void AST.MatchingOption.hash(into:)()
{
  unint64_t v1 = *((void *)v0 + 1);
  unint64_t v2 = *((void *)v0 + 2);
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
}

Swift::Int AST.MatchingOption.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  unint64_t v2 = *((void *)v0 + 1);
  unint64_t v3 = *((void *)v0 + 2);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v3 >> 14);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.MatchingOption()
{
  Swift::UInt v1 = *v0;
  unint64_t v2 = *((void *)v0 + 1);
  unint64_t v3 = *((void *)v0 + 2);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v3 >> 14);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AST.MatchingOption()
{
  unint64_t v1 = *((void *)v0 + 1);
  unint64_t v2 = *((void *)v0 + 2);
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.MatchingOption()
{
  Swift::UInt v1 = *v0;
  unint64_t v2 = *((void *)v0 + 1);
  unint64_t v3 = *((void *)v0 + 2);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v3 >> 14);
  return Hasher._finalize()();
}

__n128 AST.MatchingOptionSequence.caretLoc.getter@<Q0>(__n128 *a1@<X8>)
{
  unsigned __int8 v2 = v1[1].n128_u8[0];
  __n128 result = *v1;
  *a1 = *v1;
  a1[1].n128_u8[0] = v2;
  return result;
}

__n128 AST.MatchingOptionSequence.caretLoc.setter(__n128 *a1)
{
  unsigned __int8 v2 = a1[1].n128_u8[0];
  __n128 result = *a1;
  __n128 *v1 = *a1;
  v1[1].n128_u8[0] = v2;
  return result;
}

uint64_t (*AST.MatchingOptionSequence.caretLoc.modify())()
{
  return AST.root.modify;
}

uint64_t AST.MatchingOptionSequence.adding.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AST.MatchingOptionSequence.adding.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 24) = a1;
  return result;
}

uint64_t (*AST.MatchingOptionSequence.adding.modify())()
{
  return AST.root.modify;
}

__n128 AST.MatchingOptionSequence.minusLoc.getter@<Q0>(__n128 *a1@<X8>)
{
  unsigned __int8 v2 = v1[3].n128_u8[0];
  __n128 result = v1[2];
  *a1 = result;
  a1[1].n128_u8[0] = v2;
  return result;
}

__n128 AST.MatchingOptionSequence.minusLoc.setter(__n128 *a1)
{
  unsigned __int8 v2 = a1[1].n128_u8[0];
  __n128 result = *a1;
  v1[2] = *a1;
  v1[3].n128_u8[0] = v2;
  return result;
}

uint64_t (*AST.MatchingOptionSequence.minusLoc.modify())()
{
  return AST.root.modify;
}

uint64_t AST.MatchingOptionSequence.removing.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AST.MatchingOptionSequence.removing.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 56) = a1;
  return result;
}

uint64_t (*AST.MatchingOptionSequence.removing.modify())()
{
  return AST.root.modify;
}

__n128 AST.MatchingOptionSequence.init(caretLoc:adding:minusLoc:removing:)@<Q0>( uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  char v5 = *(_BYTE *)(a1 + 16);
  unsigned __int8 v6 = a3[1].n128_u8[0];
  *(_OWORD *)a5 = *(_OWORD *)a1;
  *(_BYTE *)(a5 + 16) = v5;
  *(void *)(a5 + 24) = a2;
  __n128 result = *a3;
  *(__n128 *)(a5 + 32) = *a3;
  *(_BYTE *)(a5 + 48) = v6;
  *(void *)(a5 + 56) = a4;
  return result;
}

BOOL AST.MatchingOptionSequence.resetsCurrentOptions.getter()
{
  return (*(_BYTE *)(v0 + 16) & 1) == 0;
}

void AST.MatchingOptionSequence.hash(into:)(uint64_t a1)
{
  unsigned __int8 v2 = v1;
  uint64_t v4 = v2[3];
  unint64_t v5 = v2[4];
  unint64_t v6 = v2[5];
  int v7 = *((unsigned __int8 *)v2 + 48);
  uint64_t v8 = v2[7];
  if (*((_BYTE *)v2 + 16) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    unint64_t v10 = *v2;
    unint64_t v9 = v2[1];
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v10 >> 14);
    Hasher._combine(_:)(v9 >> 14);
  }

  specialized Array<A>.hash(into:)(a1, v4);
  if (v7)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v5 >> 14);
    Hasher._combine(_:)(v6 >> 14);
  }

  specialized Array<A>.hash(into:)(a1, v8);
}

Swift::Int AST.MatchingOptionSequence.hashValue.getter()
{
  char v1 = *((_BYTE *)v0 + 16);
  uint64_t v2 = *((void *)v0 + 3);
  char v3 = *((_BYTE *)v0 + 48);
  uint64_t v4 = *((void *)v0 + 7);
  __int128 v7 = *v0;
  char v8 = v1;
  uint64_t v9 = v2;
  __int128 v10 = v0[2];
  char v11 = v3;
  uint64_t v12 = v4;
  Hasher.init(_seed:)();
  AST.MatchingOptionSequence.hash(into:)((uint64_t)v6);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.MatchingOptionSequence()
{
  char v1 = *((_BYTE *)v0 + 16);
  uint64_t v2 = *((void *)v0 + 3);
  char v3 = *((_BYTE *)v0 + 48);
  uint64_t v4 = *((void *)v0 + 7);
  __int128 v7 = *v0;
  char v8 = v1;
  uint64_t v9 = v2;
  __int128 v10 = v0[2];
  char v11 = v3;
  uint64_t v12 = v4;
  Hasher.init(_seed:)();
  AST.MatchingOptionSequence.hash(into:)((uint64_t)v6);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.MatchingOptionSequence()
{
  char v1 = *((_BYTE *)v0 + 16);
  uint64_t v2 = *((void *)v0 + 3);
  char v3 = *((_BYTE *)v0 + 48);
  uint64_t v4 = *((void *)v0 + 7);
  __int128 v7 = *v0;
  char v8 = v1;
  uint64_t v9 = v2;
  __int128 v10 = v0[2];
  char v11 = v3;
  uint64_t v12 = v4;
  Hasher.init(_seed:)();
  AST.MatchingOptionSequence.hash(into:)((uint64_t)v6);
  return Hasher._finalize()();
}

uint64_t AST.MatchingOptionSequence.init(adding:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0LL;
  *(void *)(a2 + 8) = 0LL;
  *(_BYTE *)(a2 + 16) = 1;
  *(void *)(a2 + 32) = 0LL;
  *(void *)(a2 + 40) = 0LL;
  *(void *)(a2 + 24) = result;
  *(_BYTE *)(a2 + 48) = 1;
  *(void *)(a2 + 56) = MEMORY[0x18961AFE8];
  return result;
}

uint64_t AST.MatchingOptionSequence.init(removing:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0LL;
  *(void *)(a2 + 8) = 0LL;
  uint64_t v2 = MEMORY[0x18961AFE8];
  *(_BYTE *)(a2 + 16) = 1;
  *(void *)(a2 + 32) = 0LL;
  *(void *)(a2 + 40) = 0LL;
  *(void *)(a2 + 24) = v2;
  *(_BYTE *)(a2 + 48) = 1;
  *(void *)(a2 + 56) = result;
  return result;
}

uint64_t AST.MatchingOption._dumpBase.getter()
{
  BYTE8(outlined init with take of AST.Conditional.Condition.Kind(v3, v2) = 0;
  *(void *)&__int128 v2 = *v0;
  _print_unlocked<A, B>(_:_:)();
  return *(void *)((char *)&v2 + 1);
}

uint64_t protocol witness for _ASTPrintable._dumpBase.getter in conformance AST.MatchingOption()
{
  BYTE8(outlined init with take of AST.Conditional.Condition.Kind(v3, v2) = 0;
  *(void *)&__int128 v2 = *v0;
  _print_unlocked<A, B>(_:_:)();
  return *(void *)((char *)&v2 + 1);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST.MatchingOption( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AST.MatchingOption and conformance AST.MatchingOption();
  return (*(uint64_t (**)(uint64_t, unint64_t))(v2 + 24))(a1, v2);
}

uint64_t AST.MatchingOptionSequence._dumpBase.getter()
{
  int v1 = *(unsigned __int8 *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 56);
  _StringGuts.grow(_:)(50LL);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = MEMORY[0x186E05488](v2, &type metadata for AST.MatchingOption);
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0x69766F6D6572202CLL;
  v5._object = (void *)0xEC000000203A676ELL;
  String.append(_:)(v5);
  v6._countAndFlagsBits = MEMORY[0x186E05488](v3, &type metadata for AST.MatchingOption);
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._object = (void *)0x8000000181006EF0LL;
  v7._countAndFlagsBits = 0xD000000000000018LL;
  String.append(_:)(v7);
  if (v1) {
    uint64_t v8 = 0x65736C6166LL;
  }
  else {
    uint64_t v8 = 1702195828LL;
  }
  if (v1) {
    unint64_t v9 = 0xE500000000000000LL;
  }
  else {
    unint64_t v9 = 0xE400000000000000LL;
  }
  unint64_t v10 = v9;
  String.append(_:)(*(Swift::String *)&v8);
  swift_bridgeObjectRelease();
  return 0x203A676E69646461LL;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST.MatchingOptionSequence()
{
  return AST.MatchingOptionSequence._dumpBase.getter();
}

Swift::Int AST.AbsentFunction.Start.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void AST.GlobalMatchingOption.Kind.hash(into:)()
{
  __asm { BR              X10 }

void sub_180F8DA64()
{
  if ((v3 & 1) != 0)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v0);
  }

  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v1 >> 14);
}

Swift::Int AST.GlobalMatchingOption.Kind.hashValue.getter()
{
  return AST.AbsentFunction.Kind.hashValue.getter((void (*)(_BYTE *))AST.GlobalMatchingOption.Kind.hash(into:));
}

Swift::Int AST.AbsentFunction.Kind.hashValue.getter(void (*a1)(_BYTE *))
{
  __int128 v3 = v1[1];
  __int128 v6 = *v1;
  __int128 v7 = v3;
  Hasher.init(_seed:)();
  a1(v5);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.GlobalMatchingOption.Kind( uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance AST.AbsentFunction.Kind( a1,  a2,  (void (*)(_BYTE *))AST.GlobalMatchingOption.Kind.hash(into:));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.AbsentFunction.Kind( uint64_t a1, uint64_t a2, void (*a3)(_BYTE *))
{
  __int128 v5 = v3[1];
  __int128 v8 = *v3;
  __int128 v9 = v5;
  Hasher.init(_seed:)();
  a3(v7);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.GlobalMatchingOption.Kind( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance AST.AbsentFunction.Kind( a1,  a2,  a3,  (void (*)(_BYTE *))AST.GlobalMatchingOption.Kind.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.AbsentFunction.Kind( uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_BYTE *))
{
  __int128 v6 = v4[1];
  __int128 v9 = *v4;
  __int128 v10 = v6;
  Hasher.init(_seed:)();
  a4(v8);
  return Hasher._finalize()();
}

__n128 AST.GlobalMatchingOption.kind.getter@<Q0>(_OWORD *a1@<X8>)
{
  __n128 result = *(__n128 *)v1;
  __int128 v3 = *(_OWORD *)(v1 + 16);
  *a1 = *(_OWORD *)v1;
  a1[1] = v3;
  return result;
}

__n128 AST.GlobalMatchingOption.kind.setter(uint64_t a1)
{
  __n128 result = *(__n128 *)a1;
  __int128 v3 = *(_OWORD *)(a1 + 16);
  _OWORD *v1 = *(_OWORD *)a1;
  v1[1] = v3;
  return result;
}

uint64_t (*AST.GlobalMatchingOption.kind.modify())()
{
  return AST.root.modify;
}

__n128 AST.GlobalMatchingOption.location.setter(__n128 *a1)
{
  __n128 result = *a1;
  v1[2] = *a1;
  return result;
}

uint64_t (*AST.GlobalMatchingOption.location.modify())()
{
  return AST.root.modify;
}

__n128 AST.GlobalMatchingOption.init(_:_:)@<Q0>(_OWORD *a1@<X0>, __n128 *a2@<X1>, _OWORD *a3@<X8>)
{
  __int128 v3 = a1[1];
  *a3 = *a1;
  a3[1] = v3;
  __n128 result = *a2;
  a3[2] = *a2;
  return result;
}

void AST.GlobalMatchingOption.hash(into:)()
{
  unint64_t v1 = *(void *)(v0 + 32);
  unint64_t v2 = *(void *)(v0 + 40);
  AST.GlobalMatchingOption.Kind.hash(into:)();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
}

Swift::Int AST.GlobalMatchingOption.hashValue.getter()
{
  unint64_t v1 = *(void *)(v0 + 32);
  unint64_t v2 = *(void *)(v0 + 40);
  Hasher.init(_seed:)();
  AST.GlobalMatchingOption.Kind.hash(into:)();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.GlobalMatchingOption()
{
  unint64_t v1 = *(void *)(v0 + 32);
  unint64_t v2 = *(void *)(v0 + 40);
  Hasher.init(_seed:)();
  AST.GlobalMatchingOption.Kind.hash(into:)();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AST.GlobalMatchingOption()
{
  unint64_t v1 = *(void *)(v0 + 32);
  unint64_t v2 = *(void *)(v0 + 40);
  AST.GlobalMatchingOption.Kind.hash(into:)();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.GlobalMatchingOption()
{
  unint64_t v1 = *(void *)(v0 + 32);
  unint64_t v2 = *(void *)(v0 + 40);
  Hasher.init(_seed:)();
  AST.GlobalMatchingOption.Kind.hash(into:)();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  return Hasher._finalize()();
}

__n128 AST.Quantification.amount.getter@<Q0>(uint64_t a1@<X8>)
{
  __int128 v2 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v2;
  __int128 v3 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(a1 + 48) = v3;
  __n128 result = *(__n128 *)(v1 + 64);
  *(__n128 *)(a1 + 64) = result;
  return result;
}

__n128 AST.Quantification.kind.getter@<Q0>(uint64_t a1@<X8>)
{
  *(_BYTE *)a1 = *(_BYTE *)(v1 + 80);
  __n128 result = *(__n128 *)(v1 + 88);
  *(__n128 *)(a1 + 8) = result;
  return result;
}

uint64_t AST.Quantification.child.getter@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 104);
  return swift_retain();
}

uint64_t AST.Quantification.trivia.getter()
{
  return swift_bridgeObjectRetain();
}

__n128 AST.Quantification.init(_:_:_:_:trivia:)@<Q0>( _OWORD *a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, __n128 *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  char v6 = *a2;
  uint64_t v7 = *a3;
  __int128 v8 = a1[1];
  *(_OWORD *)a6 = *a1;
  *(_OWORD *)(a6 + 16) = v8;
  __int128 v9 = a1[3];
  *(_OWORD *)(a6 + 32) = a1[2];
  *(_OWORD *)(a6 + 48) = v9;
  *(_OWORD *)(a6 + 64) = a1[4];
  *(_BYTE *)(a6 + 80) = v6;
  *(_OWORD *)(a6 + 88) = *(_OWORD *)(a2 + 8);
  *(void *)(a6 + 104) = v7;
  __n128 result = *a4;
  *(__n128 *)(a6 + 112) = *a4;
  *(void *)(a6 + 128) = a5;
  return result;
}

void AST.Quantification.Amount.hash(into:)()
{
  __asm { BR              X10 }

void sub_180F8E038()
{
  if ((v3 & 1) != 0)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v0);
  }

  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v1 >> 14);
}

Swift::Int AST.Quantification.Amount.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Quantification.Amount()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Quantification.Amount()
{
  return Hasher._finalize()();
}

_RegexParser::AST::Quantification::Kind_optional __swiftcall AST.Quantification.Kind.init(rawValue:)( Swift::String rawValue)
{
  v2._rawValue = &outlined read-only object #0 of AST.Quantification.Kind.init(rawValue:);
  return (_RegexParser::AST::Quantification::Kind_optional)AST.CustomCharacterClass.SetOp.init(rawValue:)( rawValue,  v2,  v1);
}

uint64_t AST.CustomCharacterClass.SetOp.init(rawValue:)@<X0>( Swift::String string@<0:X0, 8:X1>, Swift::OpaquePointer cases@<0:X2>, char *a3@<X8>)
{
  object = string._object;
  v4._countAndFlagsBits = string._countAndFlagsBits;
  v4._object = object;
  unint64_t v7 = _findStringSwitchCase(cases:string:)(cases, v4);
  uint64_t result = swift_bridgeObjectRelease();
  char v9 = 3;
  if (v7 < 3) {
    char v9 = v7;
  }
  *a3 = v9;
  return result;
}

uint64_t AST.Quantification.Kind.rawValue.getter()
{
  uint64_t v1 = 63LL;
  if (*v0 != 1) {
    uint64_t v1 = 43LL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return *v0;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AST.Quantification.Kind( _BYTE *a1, _BYTE *a2)
{
  int v2 = *a1;
  uint64_t v3 = 63LL;
  if (v2 != 1) {
    uint64_t v3 = 43LL;
  }
  if (*a1) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = *a1;
  }
  if (v2) {
    unint64_t v5 = 0xE100000000000000LL;
  }
  else {
    unint64_t v5 = 0xE000000000000000LL;
  }
  uint64_t v6 = 63LL;
  if (*a2 != 1) {
    uint64_t v6 = 43LL;
  }
  if (*a2) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = *a2;
  }
  if (*a2) {
    unint64_t v8 = 0xE100000000000000LL;
  }
  else {
    unint64_t v8 = 0xE000000000000000LL;
  }
  if (v4 == v7 && v5 == v8) {
    char v10 = 1;
  }
  else {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v10 & 1;
}

_RegexParser::AST::Quantification::Kind_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AST.Quantification.Kind( Swift::String *a1)
{
  return AST.Quantification.Kind.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AST.Quantification.Kind( uint64_t *a1@<X8>)
{
  uint64_t v2 = *v1;
  unint64_t v3 = 0xE000000000000000LL;
  uint64_t v4 = 63LL;
  if ((_DWORD)v2 != 1) {
    uint64_t v4 = 43LL;
  }
  if (*v1)
  {
    uint64_t v2 = v4;
    unint64_t v3 = 0xE100000000000000LL;
  }

  *a1 = v2;
  a1[1] = v3;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Quantification.Kind()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AST.Quantification.Kind()
{
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Quantification.Kind()
{
  return Hasher._finalize()();
}

void AST.Quantification.hash(into:)(uint64_t a1)
{
  unint64_t v3 = v1[8];
  unint64_t v4 = v1[9];
  unint64_t v6 = v1[11];
  unint64_t v5 = v1[12];
  unint64_t v7 = v1[14];
  unint64_t v8 = v1[15];
  uint64_t v9 = v1[16];
  AST.Quantification.Amount.hash(into:)();
  Hasher._combine(_:)(v3 >> 14);
  Hasher._combine(_:)(v4 >> 14);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v6 >> 14);
  Hasher._combine(_:)(v5 >> 14);
  AST.Node.hash(into:)();
  Hasher._combine(_:)(v7 >> 14);
  Hasher._combine(_:)(v8 >> 14);
  specialized Array<A>.hash(into:)(a1, v9);
}

Swift::Int AST.Quantification.hashValue.getter()
{
  return AST.Atom.Kind.hashValue.getter((void (*)(_BYTE *))AST.Quantification.hash(into:));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Quantification( uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance AST.Atom.Kind( a1,  a2,  (void (*)(_BYTE *))AST.Quantification.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Quantification( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.Kind( a1,  a2,  a3,  (void (*)(_BYTE *))AST.Quantification.hash(into:));
}

void AST.Quantification.Amount.bounds.getter()
{
  __asm { BR              X11 }

uint64_t sub_180F8E6A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t CaptureList.captures.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CaptureList.captures.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v1 = a1;
  return result;
}

uint64_t (*CaptureList.captures.modify())()
{
  return AST.root.modify;
}

uint64_t CaptureList.init<A>(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Array.init<A>(_:)();
  *a1 = result;
  return result;
}

uint64_t CaptureList.append(_:)(uint64_t *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v13 = *a1;
  uint64_t v3 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  uint64_t v6 = a1[5];
  char v7 = *((_BYTE *)a1 + 48);
  uint64_t v8 = *v1;
  swift_bridgeObjectRetain();
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v8 + 16) + 1LL,  1,  (char *)v8);
    uint64_t v8 = result;
  }

  unint64_t v11 = *(void *)(v8 + 16);
  unint64_t v10 = *(void *)(v8 + 24);
  if (v11 >= v10 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v10 > 1),  v11 + 1,  1,  (char *)v8);
    uint64_t v8 = result;
  }

  *(void *)(v8 + 16) = v11 + 1;
  unint64_t v12 = v8 + 56 * v11;
  *(void *)(v12 + 32) = v13;
  *(void *)(v12 + 40) = v2;
  *(void *)(v12 + 48) = v3;
  *(void *)(v12 + 56) = v4;
  *(void *)(v12 + 64) = v5;
  *(void *)(v12 + 72) = v6;
  *(_BYTE *)(v12 + 80) = v7;
  uint64_t *v1 = v8;
  return result;
}

uint64_t CaptureList.Capture.name.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CaptureList.Capture.name.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*CaptureList.Capture.name.modify())()
{
  return AST.root.modify;
}

uint64_t CaptureList.Capture.type.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t CaptureList.Capture.type.setter(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t (*CaptureList.Capture.type.modify())()
{
  return AST.root.modify;
}

uint64_t CaptureList.Capture.optionalDepth.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t CaptureList.Capture.optionalDepth.setter(uint64_t result)
{
  *(void *)(v1 + 24) = result;
  return result;
}

uint64_t (*CaptureList.Capture.optionalDepth.modify())()
{
  return AST.root.modify;
}

__n128 CaptureList.Capture.location.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = v1[2];
  *a1 = result;
  return result;
}

__n128 CaptureList.Capture.location.setter(__n128 *a1)
{
  __n128 result = *a1;
  v1[2] = *a1;
  return result;
}

uint64_t (*CaptureList.Capture.location.modify())()
{
  return AST.root.modify;
}

uint64_t CaptureList.Capture.visibleInTypedOutput.getter()
{
  return *(unsigned __int8 *)(v0 + 48);
}

uint64_t CaptureList.Capture.visibleInTypedOutput.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 48) = result;
  return result;
}

uint64_t (*CaptureList.Capture.visibleInTypedOutput.modify())()
{
  return AST.root.modify;
}

__n128 CaptureList.Capture.init(name:type:optionalDepth:visibleInTypedOutput:_:)@<Q0>( unint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, unsigned __int8 a5@<W4>, __n128 *a6@<X5>, __n128 *a7@<X8>)
{
  a7->n128_u64[0] = a1;
  a7->n128_u64[1] = a2;
  a7[1].n128_u64[0] = a3;
  a7[1].n128_u64[1] = a4;
  __n128 result = *a6;
  a7[2] = *a6;
  a7[3].n128_u8[0] = a5;
  return result;
}

Swift::Int_optional __swiftcall CaptureList.indexOfCapture(named:)(Swift::String named)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 16);
  if (v3)
  {
    object = named._object;
    uint64_t countAndFlagsBits = named._countAndFlagsBits;
    Swift::Int v6 = 0LL;
    char v7 = (void *)(v2 + 40);
    while (1)
    {
      if (*v7)
      {
        BOOL v8 = *(v7 - 1) == countAndFlagsBits && *v7 == (void)object;
        if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          break;
        }
      }

      ++v6;
      v7 += 7;
      if (v3 == v6) {
        goto LABEL_11;
      }
    }

    Swift::Bool v9 = 0;
  }

  else
  {
LABEL_11:
    Swift::Int v6 = 0LL;
    Swift::Bool v9 = 1;
  }

  Swift::Int v10 = v6;
  result.value = v10;
  result.is_nil = v9;
  return result;
}

Swift::Bool __swiftcall CaptureList.hasCapture(named:)(Swift::String named)
{
  Swift::Int_optional v2 = CaptureList.indexOfCapture(named:)(named);
  return !v2.is_nil;
}

uint64_t CaptureList.init(arrayLiteral:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t CaptureList.Builder.captures.getter@<X0>(void *a1@<X8>)
{
  *a1 = *v1;
  return swift_bridgeObjectRetain();
}

uint64_t CaptureList.Builder.captures.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = swift_bridgeObjectRelease();
  void *v1 = v2;
  return result;
}

uint64_t (*CaptureList.Builder.captures.modify())()
{
  return AST.root.modify;
}

_RegexParser::CaptureList::Builder __swiftcall CaptureList.Builder.init()()
{
  *uint64_t v0 = MEMORY[0x18961AFE8];
  return result;
}

uint64_t CaptureList.Builder.OptionalNesting.outerDepth.getter()
{
  return *(void *)v0;
}

uint64_t CaptureList.Builder.OptionalNesting.outerDepth.setter(uint64_t result)
{
  void *v1 = result;
  return result;
}

uint64_t (*CaptureList.Builder.OptionalNesting.outerDepth.modify())()
{
  return AST.root.modify;
}

uint64_t CaptureList.Builder.OptionalNesting.canNest.getter()
{
  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t CaptureList.Builder.OptionalNesting.canNest.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 8) = result;
  return result;
}

uint64_t (*CaptureList.Builder.OptionalNesting.canNest.modify())()
{
  return AST.root.modify;
}

uint64_t CaptureList.Builder.OptionalNesting.innerDepth.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t CaptureList.Builder.OptionalNesting.innerDepth.setter(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t (*CaptureList.Builder.OptionalNesting.innerDepth.modify())()
{
  return AST.root.modify;
}

_RegexParser::CaptureList::Builder::OptionalNesting __swiftcall CaptureList.Builder.OptionalNesting.init(canNest:)( _RegexParser::CaptureList::Builder::OptionalNesting canNest)
{
  *(void *)uint64_t v1 = 0LL;
  *(_BYTE *)(v1 + 8) = canNest.outerDepth;
  *(void *)(v1 + 16) = 0LL;
  return canNest;
}

uint64_t CaptureList.Builder.OptionalNesting.depth.getter()
{
  uint64_t v1 = v0[2];
  uint64_t result = *v0 + v1;
  if (__OFADD__(*v0, v1)) {
    __break(1u);
  }
  return result;
}

void CaptureList.Builder.OptionalNesting.disablingNesting.getter(uint64_t a1@<X8>)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[2];
  if (*((_BYTE *)v1 + 8) != 1) {
    goto LABEL_4;
  }
  BOOL v4 = __OFADD__(v2, v3);
  v2 += v3;
  if (!v4)
  {
    uint64_t v3 = 0LL;
LABEL_4:
    *(void *)a1 = v2;
    *(_BYTE *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = v3;
    return;
  }

  __break(1u);
}

void CaptureList.Builder.OptionalNesting.addingOptional.getter(uint64_t a1@<X8>)
{
  uint64_t v2 = *v1;
  int v3 = *((unsigned __int8 *)v1 + 8);
  if (v3 == 1)
  {
    uint64_t v4 = v1[2];
    BOOL v5 = __OFADD__(v4, 1LL);
    uint64_t v6 = v4 + 1;
    if (!v5) {
      goto LABEL_6;
    }
    __break(1u);
  }

  uint64_t v6 = 1LL;
LABEL_6:
  *(void *)a1 = v2;
  *(_BYTE *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v6;
}

void CaptureList.Builder.addCaptures(of:optionalNesting:visibleInTypedOutput:)(uint64_t a1)
{
  __asm { BR              X10 }

void sub_180F8EC68()
{
  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v6 = *(void *)(v5 + 16);
  if (v6)
  {
    unint64_t v7 = 0LL;
    uint64_t v8 = v3 + 1;
    if (__OFADD__(v3, 1LL)) {
      char v9 = v1;
    }
    else {
      char v9 = 0;
    }
    if (v1) {
      uint64_t v10 = v8;
    }
    else {
      uint64_t v10 = 1LL;
    }
    do
    {
      if (v7 >= *(void *)(v5 + 16))
      {
        __break(1u);
LABEL_13:
        __break(1u);
        JUMPOUT(0x180F8F0F0LL);
      }

      uint64_t v11 = *(void *)(v5 + 32 + 8 * v7);
      if ((v9 & 1) != 0) {
        goto LABEL_13;
      }
      ++v7;
      *(void *)(v4 - _s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOWOj0_(v0 - 216) = v2;
      *(_BYTE *)(v4 - 208) = v1;
      *(void *)(v4 - 200) = v10;
      CaptureList.Builder.addCaptures(of:optionalNesting:visibleInTypedOutput:)((uint64_t)&v11);
    }

    while (v6 != v7);
  }

void static CaptureList.Builder.build(_:)(uint64_t *a1@<X0>, char **a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  1LL,  1,  MEMORY[0x18961AFE8]);
  unint64_t v6 = *((void *)v4 + 2);
  unint64_t v5 = *((void *)v4 + 3);
  if (v6 >= v5 >> 1) {
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v5 > 1),  v6 + 1,  1,  v4);
  }
  *((void *)v4 + 2) = v6 + 1;
  unint64_t v7 = &v4[56 * v6];
  *((void *)v7 + 4) = 0LL;
  *((void *)v7 + 5) = 0LL;
  *((void *)v7 + 6) = MEMORY[0x189618C50];
  *(_OWORD *)(v7 + 56) = xmmword_181005ED0;
  *((void *)v7 + 9) = 15LL;
  v7[80] = 1;
  uint64_t v8 = v3;
  char v9 = v4;
  CaptureList.Builder.addCaptures(of:optionalNesting:visibleInTypedOutput:)((uint64_t)&v8);
  *a2 = v9;
}

int64x2_t static Source.Location.fake.getter@<Q0>(int64x2_t *a1@<X8>)
{
  int64x2_t result = vdupq_n_s64(0xFuLL);
  *a1 = result;
  return result;
}

void AST.captureList.getter(char **a1@<X8>)
{
  uint64_t v2 = *((void *)v1 + 2);
  __int128 v3 = *v1;
  uint64_t v4 = v2;
  static CaptureList.Builder.build(_:)((uint64_t *)&v3, a1);
}

uint64_t static CaptureList.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CaptureList( uint64_t *a1, uint64_t *a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

uint64_t CaptureList.Capture.description.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any.Type);
  uint64_t v2 = String.init<A>(describing:)();
  uint64_t v3 = MEMORY[0x186E053EC](63LL, 0xE100000000000000LL, v1);
  unint64_t v5 = v4;
  swift_bridgeObjectRetain();
  v6._uint64_t countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CaptureList.Capture()
{
  uint64_t v1 = *(void *)(v0 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any.Type);
  uint64_t v2 = String.init<A>(describing:)();
  uint64_t v3 = MEMORY[0x186E053EC](63LL, 0xE100000000000000LL, v1);
  unint64_t v5 = v4;
  swift_bridgeObjectRetain();
  v6._uint64_t countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t CaptureList.description.getter()
{
  uint64_t v1 = *v0;
  int64_t v2 = *(void *)(*v0 + 16);
  if (v2)
  {
    uint64_t v22 = MEMORY[0x18961AFE8];
    uint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v2,  0);
    unint64_t v4 = 0LL;
    unint64_t v5 = (uint64_t *)(v1 + 56);
    while (v4 < *(void *)(v1 + 16))
    {
      uint64_t v6 = *v5;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any.Type);
      uint64_t v7 = String.init<A>(describing:)();
      uint64_t v9 = v8;
      uint64_t v10 = MEMORY[0x186E053EC](63LL, 0xE100000000000000LL, v6);
      unint64_t v12 = v11;
      swift_bridgeObjectRetain();
      v13._uint64_t countAndFlagsBits = v10;
      v13._object = v12;
      String.append(_:)(v13);
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      unint64_t v15 = *(void *)(v22 + 16);
      unint64_t v14 = *(void *)(v22 + 24);
      if (v15 >= v14 >> 1) {
        uint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v14 > 1),  v15 + 1,  1);
      }
      ++v4;
      *(void *)(v22 + 16) = v15 + 1;
      uint64_t v16 = v22 + 16 * v15;
      *(void *)(v16 + 32) = v7;
      *(void *)(v16 + 40) = v9;
      v5 += 7;
      if (v2 == v4) {
        goto LABEL_7;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_7:
    swift_getCanonicalSpecializedMetadata();
    lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type [String] and conformance [A],  (uint64_t)&unk_189B467A8,  (uint64_t)&cache variable for noncanonical specialized generic type metadata for [String],  MEMORY[0x189618458]);
    uint64_t v17 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v19 = v18;
    swift_bridgeObjectRelease();
    v20._uint64_t countAndFlagsBits = v17;
    v20._object = v19;
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v21._uint64_t countAndFlagsBits = 41LL;
    v21._object = (void *)0xE100000000000000LL;
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    return 40LL;
  }

  return result;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance CaptureList@<X0>( uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t static CaptureStructure.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  int v5 = *(unsigned __int8 *)(a1 + 24);
  uint64_t v6 = *(void *)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t v8 = *(void *)(a2 + 16);
  int v9 = *(unsigned __int8 *)(a2 + 24);
  if (!*(_BYTE *)(a1 + 24))
  {
    if (*(_BYTE *)(a2 + 24)) {
      goto LABEL_13;
    }
    if (v3)
    {
      if (v7)
      {
        if (v2 != v6 || v3 != v7)
        {
          char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
          outlined copy of CaptureStructure(v6, v7, v8, 0);
          outlined copy of CaptureStructure(v2, v3, v4, 0);
          outlined consume of CaptureStructure(v2, v3, v4, 0);
          outlined consume of CaptureStructure(v6, v7, v8, 0);
          char v14 = 0;
          if ((v25 & 1) == 0) {
            return v14 & 1;
          }
LABEL_25:
          if (v4)
          {
            if (!v8 || v4 != v8) {
              goto LABEL_15;
            }
          }

          else if (v8)
          {
            goto LABEL_15;
          }

          char v14 = 1;
          return v14 & 1;
        }

        outlined copy of CaptureStructure(*(void *)a1, v3, v8, 0);
        outlined copy of CaptureStructure(v2, v3, v4, 0);
        outlined consume of CaptureStructure(v2, v3, v4, 0);
        uint64_t v15 = v2;
        uint64_t v16 = v3;
LABEL_24:
        outlined consume of CaptureStructure(v15, v16, v8, 0);
        goto LABEL_25;
      }

      outlined copy of CaptureStructure(*(void *)a2, 0LL, v8, 0);
      outlined copy of CaptureStructure(v2, v3, v4, 0);
      outlined consume of CaptureStructure(v2, v3, v4, 0);
      uint64_t v19 = v6;
      uint64_t v20 = 0LL;
    }

    else
    {
      uint64_t v24 = *(void *)a2;
      if (!v7)
      {
        outlined copy of CaptureStructure(v24, 0LL, v8, 0);
        outlined copy of CaptureStructure(v2, 0LL, v4, 0);
        outlined consume of CaptureStructure(v2, 0LL, v4, 0);
        uint64_t v15 = v6;
        uint64_t v16 = 0LL;
        goto LABEL_24;
      }

      outlined copy of CaptureStructure(v24, *(void *)(a2 + 8), v8, 0);
      outlined copy of CaptureStructure(v2, 0LL, v4, 0);
      outlined consume of CaptureStructure(v2, 0LL, v4, 0);
      uint64_t v19 = v6;
      uint64_t v20 = v7;
    }

    uint64_t v21 = v8;
    char v22 = 0;
    goto LABEL_14;
  }

  if (v5 != 1)
  {
    if (v9 == 2)
    {
      uint64_t v17 = *(void *)(v2 + 16);
      uint64_t v18 = *(void *)(v6 + 16);
      outlined copy of CaptureStructure(*(void *)a2, *(void *)(a2 + 8), v8, 2);
      outlined copy of CaptureStructure(v2, v3, v4, 2);
      char v14 = specialized static Array<A>.== infix(_:_:)(v17, v18);
      outlined consume of CaptureStructure(v2, v3, v4, 2);
      outlined consume of CaptureStructure(v6, v7, v8, 2);
      return v14 & 1;
    }

    goto LABEL_13;
  }

  if (v9 != 1)
  {
LABEL_13:
    outlined copy of CaptureStructure(*(void *)a2, *(void *)(a2 + 8), v8, v9);
    outlined copy of CaptureStructure(v2, v3, v4, v5);
    outlined consume of CaptureStructure(v2, v3, v4, v5);
    uint64_t v19 = v6;
    uint64_t v20 = v7;
    uint64_t v21 = v8;
    char v22 = v9;
LABEL_14:
    outlined consume of CaptureStructure(v19, v20, v21, v22);
LABEL_15:
    char v14 = 0;
    return v14 & 1;
  }

  char v10 = *(_BYTE *)(v2 + 40);
  uint64_t v11 = *(void *)(v2 + 32);
  uint64_t v12 = *(void *)(v6 + 32);
  char v13 = *(_BYTE *)(v6 + 40);
  __int128 v29 = *(_OWORD *)(v2 + 16);
  uint64_t v30 = v11;
  char v31 = v10;
  __int128 v26 = *(_OWORD *)(v6 + 16);
  uint64_t v27 = v12;
  char v28 = v13;
  outlined copy of CaptureStructure(v6, v7, v8, 1);
  outlined copy of CaptureStructure(v2, v3, v4, 1);
  char v14 = static CaptureStructure.== infix(_:_:)(&v29, &v26);
  outlined consume of CaptureStructure(v2, v3, v4, 1);
  outlined consume of CaptureStructure(v6, v7, v8, 1);
  return v14 & 1;
}

uint64_t CaptureStructure.encode(to:)(_WORD *a1)
{
  int v3 = *((unsigned __int8 *)v1 + 24);
  if (a1) {
    *a1 = 1;
  }
  __int128 v10 = *v1;
  uint64_t v4 = *((void *)v1 + 2);
  uint64_t result = swift_allocObject();
  uint64_t v6 = result;
  *(void *)(result + 16) = 2LL;
  if (v3 == 2 && !*(void *)(*(void *)(v10 + 16) + 16LL))
  {
    uint64_t v7 = 2LL;
  }

  else
  {
    __int128 v11 = v10;
    uint64_t v12 = v4;
    char v13 = v3;
    uint64_t result = encode #1 (_:isTopLevel:) in CaptureStructure.encode(to:)((uint64_t *)&v11, 1, (uint64_t)a1, result);
    uint64_t v7 = *(void *)(v6 + 16);
  }

  *((_BYTE *)a1 + v7) = 0;
  BOOL v8 = __OFADD__(v7, 1LL);
  uint64_t v9 = v7 + 1;
  if (v8)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v6 + 16) = v9;
    return swift_release();
  }

  return result;
}

uint64_t encode #1 (_:isTopLevel:) in CaptureStructure.encode(to:)( uint64_t *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a1;
  uint64_t result = *a1;
  if (*((_BYTE *)v6 + 24))
  {
    if (*((_BYTE *)v6 + 24) != 1) {
      goto LABEL_16;
    }
    uint64_t v8 = *(void *)(result + 32);
    char v9 = *(_BYTE *)(result + 40);
    __int128 v31 = *(_OWORD *)(result + 16);
    uint64_t v32 = v8;
    char v33 = v9;
    uint64_t result = encode #1 (_:isTopLevel:) in CaptureStructure.encode(to:)(&v31, 0LL, a3, a4);
    *(_BYTE *)(a3 + *(void *)(a4 + 16)) = 4;
    uint64_t v10 = *(void *)(a4 + 16);
    BOOL v11 = __OFADD__(v10, 1LL);
    uint64_t v6 = (uint64_t *)(v10 + 1);
    if (!v11) {
      goto LABEL_28;
    }
    __break(1u);
  }

  if (v6[2])
  {
LABEL_36:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }

  uint64_t v12 = v6[1];
  uint64_t v6 = *(uint64_t **)(a4 + 16);
  if (!v12)
  {
LABEL_27:
    *((_BYTE *)v6 + a3) = 1;
    uint64_t v29 = *(void *)(a4 + 16);
    BOOL v11 = __OFADD__(v29, 1LL);
    uint64_t v6 = (uint64_t *)(v29 + 1);
    if (v11)
    {
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }

    goto LABEL_28;
  }

  *((_BYTE *)v6 + a3) = 2;
  uint64_t v13 = *(void *)(a4 + 16);
  int64_t v14 = v13 + 1;
  if (__OFADD__(v13, 1LL))
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }

  *(void *)(a4 + 16) = v14;
  uint64_t v15 = String.utf8CString.getter();
  size_t v16 = *(void *)(v15 + 16);
  if (__OFADD__(v14, v16))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }

  if ((uint64_t)(v14 + v16) < v14)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }

  if (a3) {
    memmove((void *)(a3 + v14), (const void *)(v15 + 32), v16);
  }
  uint64_t result = swift_release();
  uint64_t v17 = *(void *)(a4 + 16);
  BOOL v11 = __OFADD__(v17, v16);
  uint64_t v6 = (uint64_t *)(v17 + v16);
  if (!v11) {
    goto LABEL_28;
  }
  __break(1u);
LABEL_16:
  uint64_t v18 = *(void *)(result + 16);
  if ((a2 & 1) == 0)
  {
    *(_BYTE *)(a3 + *(void *)(a4 + 16)) = 5;
    uint64_t v19 = *(void *)(a4 + 16);
    BOOL v11 = __OFADD__(v19, 1LL);
    uint64_t v20 = v19 + 1;
    if (v11)
    {
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }

    *(void *)(a4 + 16) = v20;
  }

  char v30 = a2;
  uint64_t v21 = *(void *)(v18 + 16);
  if (v21)
  {
    unint64_t v22 = 0LL;
    uint64_t v23 = (char *)(v18 + 56);
    while (v22 < *(void *)(v18 + 16))
    {
      ++v22;
      uint64_t v25 = *((void *)v23 - 2);
      uint64_t v24 = *((void *)v23 - 1);
      uint64_t v26 = *((void *)v23 - 3);
      char v27 = *v23;
      v23 += 32;
      *(void *)&__int128 v31 = v26;
      *((void *)&v31 + 1) = v25;
      uint64_t v32 = v24;
      char v33 = v27;
      outlined copy of CaptureStructure(v26, v25, v24, v27);
      encode #1 (_:isTopLevel:) in CaptureStructure.encode(to:)(&v31, 0LL, a3, a4);
      uint64_t result = outlined consume of CaptureStructure(v26, v25, v24, v27);
      if (v21 == v22) {
        goto LABEL_23;
      }
    }

    __break(1u);
    goto LABEL_31;
  }

LABEL_23:
  if ((v30 & 1) != 0) {
    return result;
  }
  *(_BYTE *)(a3 + *(void *)(a4 + 16)) = 6;
  uint64_t v28 = *(void *)(a4 + 16);
  BOOL v11 = __OFADD__(v28, 1LL);
  uint64_t v6 = (uint64_t *)(v28 + 1);
  if (v11)
  {
    __break(1u);
    goto LABEL_27;
  }

    __break(1u);
LABEL_24:
    uint64_t v12 = v13;
  }

    specialized Parser.tryEatPrefix(maxLength:_:)( 0LL,  1,  a1,  (uint64_t (*)(uint64_t, void, void *))specialized Source.peekPrefix(maxLength:_:),  &v98);
    __int128 v31 = v99;
    if (v99)
    {
      uint64_t v32 = v98;
      v76 = v100;
      char v33 = *a2;
      uint64_t v34 = swift_isUniquelyReferenced_nonNull_native();
      *a2 = v33;
      if ((v34 & 1) == 0)
      {
        char v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v33 + 2) + 1LL,  1,  v33,  &demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Trivia>);
        *a2 = v33;
      }

      uint64_t v36 = *((void *)v33 + 2);
      uint64_t v35 = *((void *)v33 + 3);
      if (v36 >= v35 >> 1)
      {
        char v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v35 > 1),  v36 + 1,  1,  v33,  &demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Trivia>);
        *a2 = v33;
      }

      *((void *)v33 + 2) = v36 + 1;
      uint64_t v37 = &v33[32 * v36];
      *((void *)v37 + 4) = v32;
      *((void *)v37 + 5) = v31;
      *((_OWORD *)v37 + 3) = v76;
    }

    uint64_t result = (uint64_t)Parser.lexNumber(_:)(1, (uint64_t)&v98);
    if (((v25 | v26) & 1) == 0 && (v101 & 1) == 0 && (v99 & 1) == 0) {
      break;
    }
LABEL_34:
    specialized Parser.tryEatPrefix(maxLength:_:)( 0LL,  1,  a1,  (uint64_t (*)(uint64_t, void, void *))specialized Source.peekPrefix(maxLength:_:),  &v95);
    uint64_t v8 = v96;
    if (v96)
    {
      uint64_t v39 = v95;
      v77 = v97;
      uint64_t v40 = *a2;
      uint64_t v41 = swift_isUniquelyReferenced_nonNull_native();
      *a2 = v40;
      if ((v41 & 1) == 0)
      {
        uint64_t v40 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v40 + 2) + 1LL,  1,  v40,  &demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Trivia>);
        *a2 = v40;
      }

      uint64_t v43 = *((void *)v40 + 2);
      uint64_t v42 = *((void *)v40 + 3);
      if (v43 >= v42 >> 1)
      {
        uint64_t v40 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v42 > 1),  v43 + 1,  1,  v40,  &demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Trivia>);
        *a2 = v40;
      }

      *((void *)v40 + 2) = v43 + 1;
      uint64_t v44 = &v40[32 * v43];
      *((void *)v44 + 4) = v39;
      *((void *)v44 + 5) = v8;
      *((_OWORD *)v44 + 3) = v77;
    }

    char v45 = *((void *)&v100 + 1);
    v46 = v100;
    if ((v16 & 1) != 0)
    {
      if ((v25 & 1) != 0)
      {
        if ((v101 & 1) == 0)
        {
          v47._object = (void *)0x8000000181009410LL;
          v47._uint64_t countAndFlagsBits = 0xD00000000000002ELL;
          Parser.unreachable(_:)(v47);
        }
      }

      else if ((v101 & 1) == 0)
      {
        v50 = 0LL;
        v48 = v99 & 1;
        v49 = 0x4000000000000000LL;
        v52 = *((void *)&v100 + 1);
        v51 = v100;
        v53 = v98;
        v46 = 0LL;
        char v45 = 0LL;
        goto LABEL_54;
      }
    }

    else
    {
      v48 = v83 & 1;
      if ((v101 & 1) != 0)
      {
        if ((v25 & 1) != 0)
        {
          char v45 = 0LL;
          v46 = 0LL;
          v49 = 0LL;
          v50 = 0LL;
          goto LABEL_53;
        }

        if ((v26 & 1) != 0)
        {
          v50 = 0LL;
          v46 = 0LL;
          char v45 = 0LL;
          v49 = 0x2000000000000000LL;
LABEL_53:
          v52 = v79;
          v51 = v81;
          v53 = v78;
LABEL_54:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t result = swift_bridgeObjectRelease();
          *a3 = v53;
          a3[1] = v48;
          a3[2] = v51;
          a3[3] = v52;
          a3[4] = v50;
          a3[5] = v49;
          a3[6] = v46;
          a3[7] = v45;
          return result;
        }
      }

      else if ((v25 & 1) == 0)
      {
        v49 = v99 & 1 | 0x6000000000000000LL;
        v50 = v98;
        goto LABEL_53;
      }
    }

    v54 = a1[9];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v7 = specialized Collection.dropFirst(_:)(*((void *)v94 + 2), v54);
    v56 = v55;
    v58 = v57;
    a2 = (char **)(v59 >> 1);
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    v60 = v56 - 32;
    v61 = v58;
    char v9 = v58;
LABEL_56:
    v62 = v60 + 80LL * (void)v61;
    while (1)
    {
      if (a2 == (char **)v9)
      {
        swift_bridgeObjectRelease();
        uint64_t result = swift_unknownObjectRelease_n();
        *a1 = v90;
        a1[1] = v92;
        a1[2] = v89;
        a1[3] = v88;
        *((_BYTE *)a1 + 32) = v87;
        a1[5] = v86;
        a1[6] = v91;
        a1[7] = v85;
        *((_BYTE *)a1 + 64) = v84;
        a1[9] = (uint64_t)v94;
        *(_OWORD *)a3 = xmmword_181005F10;
        a3[2] = 0LL;
        a3[3] = 0LL;
        *((_OWORD *)a3 + 2) = 0u;
        *((_OWORD *)a3 + 3) = 0u;
        return result;
      }

      v63 = *(unsigned __int8 *)(v62 + 32);
      ++v9;
      v62 += 80LL;
      if (!v63)
      {
        v80 = v60;
        v82 = v7;
        v72 = *(void *)(v62 - 24);
        v73 = *(void *)(v62 - 40);
        v64 = *(void *)(v62 - 8);
        v71 = *(void *)(v62 - 16);
        v65 = *(void *)v62;
        uint64_t v8 = *(void *)(v62 + 8);
        v66 = *(void *)(v62 + 16);
        v67 = *(_BYTE *)(v62 + 24);
        v74 = *(void *)(v62 - 32);
        swift_bridgeObjectRetain();
        outlined copy of ParseError?(v64, v65, v8, v66, v67);
        *(void *)&v83 = v54;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          v94 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v94 + 2) + 1LL,  1,  v94);
        }
        v69 = *((void *)v94 + 2);
        v68 = *((void *)v94 + 3);
        if (v69 >= v68 >> 1) {
          v94 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v68 > 1),  v69 + 1,  1,  v94);
        }
        *((void *)v94 + 2) = v69 + 1;
        v70 = &v94[80 * v69];
        v70[32] = 0;
        *((void *)v70 + 5) = v73;
        *((void *)v70 + 6) = v74;
        *((void *)v70 + 7) = v72;
        *((void *)v70 + 8) = v71;
        v60 = v80;
        *((void *)v70 + 9) = v64;
        *((void *)v70 + 10) = v65;
        *((void *)v70 + 11) = v8;
        *((void *)v70 + 12) = v66;
        v70[104] = v67;
        v61 = v9;
        uint64_t v7 = v82;
        v54 = v83;
        goto LABEL_56;
      }
    }

    __break(1u);
LABEL_68:
    char v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v9 + 2) + 1LL,  1,  v9,  &demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Trivia>);
    *a2 = v9;
  }

  if (!__OFSUB__(v98, 1LL))
  {
    --v98;
    goto LABEL_34;
  }

  __break(1u);
  return result;
}

  uint64_t v24 = v48;
  a1 = v49;
  uint64_t v25 = v53;
  uint64_t v26 = v47;
  uint64_t v18 = v50;
LABEL_32:
  if (v52 || v18 || *((void *)v6 + 2))
  {
    *a1 = v25;
    a1[1] = v51;
    a1[2] = !v52;
    a1[3] = (unint64_t)v6;
    a1[4] = v24;
    a1[5] = v26;
    a1[6] = !v18;
    a1[7] = (unint64_t)v23;
  }

  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = 0.0;
    *((_OWORD *)a1 + 2) = 0u;
    *((_OWORD *)a1 + 3) = 0u;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
  }

  return result;
}

  uint64_t v20 = Substring.subscript.getter();
  unint64_t v22 = v21;
  swift_bridgeObjectRelease();
  if (!((v20 ^ v22) >> 14))
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  return v20;
}

LABEL_28:
  *(void *)(a4 + 16) = v6;
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

uint64_t CaptureStructure.description.getter()
{
  v2.maxTopDownLevels.value = 0LL;
  v2.maxTopDownLevels.is_nil = 1;
  v2.minBottomUpLevels.value = 0LL;
  v2.minBottomUpLevels.is_nil = 1;
  *(_OWORD *)&v2.indentWidth = xmmword_181005EE0;
  v2.result._object = (void *)0xE000000000000000LL;
  v2.startOfLine = 1;
  v2.indentLevel = 0LL;
  v2.quantificationBehavior = _RegexParser_AST_Quantification_Kind_eager;
  v2.inlineMatchingOptions._rawValue = (void *)MEMORY[0x18961AFE8];
  CaptureStructure._print(_:)(&v2);
  uint64_t countAndFlagsBits = v2.result._countAndFlagsBits;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return countAndFlagsBits;
}

Swift::Void __swiftcall CaptureStructure._print(_:)(_RegexParser::PrettyPrinter *a1)
{
  uint64_t countAndFlagsBits = v1->_countAndFlagsBits;
  if (!LOBYTE(v1[1]._object)) {
    goto LABEL_7;
  }
  if (LOBYTE(v1[1]._object) != 1)
  {
    uint64_t v18 = *(void *)(countAndFlagsBits + 16);
    v19._uint64_t countAndFlagsBits = 0x7B20656C707554LL;
    v19._object = (void *)0xE700000000000000LL;
    PrettyPrinter.print(_:)(v19);
    Swift::Int indentLevel = a1->indentLevel;
    BOOL v9 = __OFADD__(indentLevel, 1LL);
    Swift::Int v21 = indentLevel + 1;
    if (v9)
    {
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
      return;
    }

    a1->Swift::Int indentLevel = v21;
    uint64_t v22 = *(void *)(v18 + 16);
    if (!v22)
    {
LABEL_16:
      BOOL v9 = __OFSUB__(v21, 1LL);
      Swift::Int v12 = v21 - 1;
      if (!v9)
      {
LABEL_17:
        a1->Swift::Int indentLevel = v12;
        v27._uint64_t countAndFlagsBits = 125LL;
        v27._object = (void *)0xE100000000000000LL;
        PrettyPrinter.print(_:)(v27);
        return;
      }

      goto LABEL_25;
    }

    unint64_t v23 = 0LL;
    uint64_t v24 = (_BYTE *)(v18 + 56);
    while (v23 < *(void *)(v18 + 16))
    {
      ++v23;
      char v25 = *v24;
      uint64_t v26 = *((void *)v24 - 1);
      Swift::String v32 = *(Swift::String *)(v24 - 24);
      uint64_t v33 = v26;
      char v34 = v25;
      CaptureStructure._print(_:)(a1);
      v24 += 32;
      if (v22 == v23)
      {
        Swift::Int v21 = a1->indentLevel;
        goto LABEL_16;
      }
    }

    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  uint64_t v4 = *(void *)(countAndFlagsBits + 16);
  int v5 = *(void **)(countAndFlagsBits + 24);
  uint64_t v6 = *(void *)(countAndFlagsBits + 32);
  uint64_t countAndFlagsBits = *(unsigned __int8 *)(countAndFlagsBits + 40);
  v7._uint64_t countAndFlagsBits = 0x6C616E6F6974704FLL;
  v7._object = (void *)0xEA00000000007B20LL;
  PrettyPrinter.print(_:)(v7);
  Swift::Int v8 = a1->indentLevel;
  BOOL v9 = __OFADD__(v8, 1LL);
  Swift::Int v10 = v8 + 1;
  if (v9) {
    goto LABEL_23;
  }
  a1->Swift::Int indentLevel = v10;
  v32._uint64_t countAndFlagsBits = v4;
  v32._object = v5;
  uint64_t v33 = v6;
  char v34 = countAndFlagsBits;
  uint64_t v1 = &v32;
  CaptureStructure._print(_:)(a1);
  Swift::Int v11 = a1->indentLevel;
  BOOL v9 = __OFSUB__(v11, 1LL);
  Swift::Int v12 = v11 - 1;
  if (!v9) {
    goto LABEL_17;
  }
  __break(1u);
LABEL_7:
  object = v1->_object;
  uint64_t v13 = v1[1]._countAndFlagsBits;
  uint64_t v15 = (void *)0xE90000000000003ELL;
  if (!object)
  {
    uint64_t countAndFlagsBits = 0x64656D616E6E753CLL;
    object = (void *)0xE90000000000003ELL;
    if (v13) {
      goto LABEL_9;
    }
LABEL_19:
    uint64_t v16 = 0x64657079746E753CLL;
    goto LABEL_20;
  }

  swift_bridgeObjectRetain();
  if (!v13) {
    goto LABEL_19;
  }
LABEL_9:
  v32._uint64_t countAndFlagsBits = v13;
  swift_getCanonicalSpecializedMetadata();
  uint64_t v16 = String.init<A>(describing:)();
  uint64_t v15 = v17;
LABEL_20:
  v32._uint64_t countAndFlagsBits = 0x286D6F7441LL;
  v32._object = (void *)0xE500000000000000LL;
  v28._uint64_t countAndFlagsBits = countAndFlagsBits;
  v28._object = object;
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  v29._uint64_t countAndFlagsBits = 8250LL;
  v29._object = (void *)0xE200000000000000LL;
  String.append(_:)(v29);
  v30._uint64_t countAndFlagsBits = v16;
  v30._object = v15;
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  v31._uint64_t countAndFlagsBits = 41LL;
  v31._object = (void *)0xE100000000000000LL;
  String.append(_:)(v31);
  PrettyPrinter.print(_:)(v32);
  swift_bridgeObjectRelease();
}

Swift::String __swiftcall PrettyPrinter.finish()()
{
  uint64_t v1 = *(void *)(v0 + 40);
  _RegexParser::PrettyPrinter v2 = *(void **)(v0 + 48);
  *(void *)(v0 + 40) = 0LL;
  *(void *)(v0 + 48) = 0xE000000000000000LL;
  result._object = v2;
  result._uint64_t countAndFlagsBits = v1;
  return result;
}

Swift::Void __swiftcall PrettyPrinter.print(_:)(Swift::String a1)
{
  object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  if (*(_BYTE *)(v1 + 56) != 1) {
    goto LABEL_4;
  }
  if ((unsigned __int128)(*(uint64_t *)(v1 + 64) * (__int128)*(uint64_t *)(v1 + 32)) >> 64 == (uint64_t)(*(void *)(v1 + 64) * *(void *)(v1 + 32)) >> 63)
  {
    v4._uint64_t countAndFlagsBits = MEMORY[0x186E053EC](32LL, 0xE100000000000000LL);
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
    *(_BYTE *)(v1 + 56) = 0;
LABEL_4:
    swift_bridgeObjectRetain();
    v5._uint64_t countAndFlagsBits = countAndFlagsBits;
    v5._object = object;
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    v6._uint64_t countAndFlagsBits = 10LL;
    v6._object = (void *)0xE100000000000000LL;
    String.append(_:)(v6);
    *(_BYTE *)(v1 + 56) = 1;
    return;
  }

  __break(1u);
}

void PrettyPrinter.printBlock(_:startDelimiter:endDelimiter:_:)( uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, void *a6, void (*a7)(uint64_t))
{
  v21._uint64_t countAndFlagsBits = a1;
  v21._object = a2;
  swift_bridgeObjectRetain();
  v13._uint64_t countAndFlagsBits = 32LL;
  v13._object = (void *)0xE100000000000000LL;
  String.append(_:)(v13);
  v14._uint64_t countAndFlagsBits = a3;
  v14._object = a4;
  String.append(_:)(v14);
  PrettyPrinter.print(_:)(v21);
  swift_bridgeObjectRelease();
  uint64_t v15 = *(void *)(v7 + 64);
  BOOL v16 = __OFADD__(v15, 1LL);
  uint64_t v17 = v15 + 1;
  if (v16)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v7 + 64) = v17;
    a7(v7);
    uint64_t v18 = *(void *)(v7 + 64);
    BOOL v16 = __OFSUB__(v18, 1LL);
    uint64_t v19 = v18 - 1;
    if (!v16)
    {
      *(void *)(v7 + 64) = v19;
      v20._uint64_t countAndFlagsBits = a5;
      v20._object = a6;
      PrettyPrinter.print(_:)(v20);
      return;
    }
  }

  __break(1u);
}

void CaptureList._captureStructure.getter(uint64_t a1@<X8>)
{
  uint64_t v20 = *v1;
  int64_t v3 = *(void *)(*v1 + 16);
  if (v3 == 1)
  {
    CaptureList.Capture._captureStructure.getter(a1);
  }

  else if (v3)
  {
    uint64_t v22 = MEMORY[0x18961AFE8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0LL, v3, 0);
    unint64_t v5 = 0LL;
    int64_t v19 = v3;
    while (v5 < *(void *)(v20 + 16))
    {
      Swift::String v6 = (uint64_t *)(v20 + 32 + 56 * v5);
      uint64_t v7 = v6[3];
      if (v7 < 0) {
        goto LABEL_23;
      }
      uint64_t v8 = v6[1];
      if (v6[2] == MEMORY[0x189618C50]) {
        uint64_t v9 = 0LL;
      }
      else {
        uint64_t v9 = v6[2];
      }
      uint64_t v10 = *v6;
      if (v7)
      {
        uint64_t v11 = swift_allocObject();
        *(void *)(v11 + 16) = v10;
        *(void *)(v11 + 24) = v8;
        *(void *)(v11 + 32) = v9;
        *(_BYTE *)(v11 + 40) = 0;
        uint64_t v9 = v7 - 1;
        if (v7 == 1)
        {
          uint64_t v21 = 0LL;
          char v12 = 1;
          uint64_t v10 = v11;
        }

        else
        {
          uint64_t v10 = v11;
          do
          {
            uint64_t v13 = swift_allocObject();
            *(void *)(v13 + 24) = 0LL;
            *(void *)(v13 + 32) = 0LL;
            *(void *)(v13 + 16) = v10;
            char v12 = 1;
            *(_BYTE *)(v13 + 40) = 1;
            uint64_t v10 = v13;
            --v9;
          }

          while (v9);
          uint64_t v21 = 0LL;
        }
      }

      else
      {
        char v12 = 0;
        uint64_t v21 = v6[1];
      }

      unint64_t v15 = *(void *)(v22 + 16);
      unint64_t v14 = *(void *)(v22 + 24);
      swift_bridgeObjectRetain();
      if (v15 >= v14 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v14 > 1),  v15 + 1,  1);
      }
      ++v5;
      *(void *)(v22 + 16) = v15 + 1;
      uint64_t v16 = v22 + 32 * v15;
      *(void *)(v16 + 32) = v10;
      *(void *)(v16 + 40) = v21;
      *(void *)(v16 + 48) = v9;
      *(_BYTE *)(v16 + 56) = v12;
      if (v5 == v19)
      {
        uint64_t v17 = swift_allocObject();
        *(void *)(v17 + 16) = v22;
        *(void *)(a1 + 8) = 0LL;
        *(void *)(a1 + 16) = 0LL;
        *(void *)a1 = v17;
        *(_BYTE *)(a1 + 24) = 2;
        return;
      }
    }

    __break(1u);
LABEL_23:
    __break(1u);
  }

  else
  {
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16) = MEMORY[0x18961AFE8];
    *(void *)(a1 + 8) = 0LL;
    *(void *)(a1 + 16) = 0LL;
    *(void *)a1 = v4;
    *(_BYTE *)(a1 + 24) = 2;
  }

void CaptureList.Capture._captureStructure.getter(uint64_t a1@<X8>)
{
  uint64_t v2 = v1[3];
  if (v2 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v4 = v1[1];
    if (v1[2] == MEMORY[0x189618C50]) {
      uint64_t v5 = 0LL;
    }
    else {
      uint64_t v5 = v1[2];
    }
    uint64_t v6 = *v1;
    if (v2)
    {
      uint64_t v7 = swift_allocObject();
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = v4;
      *(void *)(v7 + 32) = v5;
      *(_BYTE *)(v7 + 40) = 0;
      uint64_t v8 = v2 - 1;
      if (v8)
      {
        uint64_t v6 = v7;
        do
        {
          uint64_t v11 = swift_allocObject();
          *(void *)(v11 + 24) = 0LL;
          *(void *)(v11 + 32) = 0LL;
          *(void *)(v11 + 16) = v6;
          char v10 = 1;
          *(_BYTE *)(v11 + 40) = 1;
          uint64_t v6 = v11;
          --v8;
        }

        while (v8);
        uint64_t v9 = 0LL;
        uint64_t v5 = 0LL;
      }

      else
      {
        uint64_t v9 = 0LL;
        uint64_t v5 = 0LL;
        char v10 = 1;
        uint64_t v6 = v7;
      }
    }

    else
    {
      char v10 = 0;
      uint64_t v9 = v4;
    }

    *(void *)a1 = v6;
    *(void *)(a1 + 8) = v9;
    *(void *)(a1 + 16) = v5;
    *(_BYTE *)(a1 + 24) = v10;
    swift_bridgeObjectRetain();
  }

uint64_t AnyType.init(_:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t specialized static Parser.withNormalizedForms<A>(_:requireInPrefix:match:)@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6, v8);
  char v10 = (char *)v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v36[4] = 0LL;
  v36[5] = 0xE000000000000000LL;
  uint64_t v11 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v11 = a1 & 0xFFFFFFFFFFFFLL;
  }
  v36[0] = a1;
  v36[1] = a2;
  v36[2] = 0LL;
  v36[3] = v11;
  swift_bridgeObjectRetain();
  Swift::String_optional v13 = String.Iterator.next()();
  uint64_t result = v13.value._countAndFlagsBits;
  if (!v13.value._object)
  {
LABEL_31:
    swift_bridgeObjectRelease();
    Swift::String v22 = String.lowercased()();
    swift_bridgeObjectRelease();
    closure #1 in static Parser.classifyGeneralCategory(_:)(v22._countAndFlagsBits, (uint64_t)v22._object, (char *)v36);
    char v23 = v36[0];
    if (LOBYTE(v36[0]) == 38)
    {
      v24._uint64_t countAndFlagsBits = 29545LL;
      v24._unint64_t object = (void *)0xE200000000000000LL;
      if (String.hasPrefix(_:)(v24))
      {
        unint64_t v25 = specialized Collection.dropFirst(_:)(2uLL, v22._countAndFlagsBits, (unint64_t)v22._object);
        uint64_t v27 = v26;
        uint64_t v29 = v28;
        uint64_t v31 = v30;
        swift_bridgeObjectRelease();
        uint64_t v32 = MEMORY[0x186E052CC](v25, v27, v29, v31);
        uint64_t v34 = v33;
        swift_bridgeObjectRelease();
        closure #1 in static Parser.classifyGeneralCategory(_:)(v32, v34, (char *)v36);
        uint64_t result = swift_bridgeObjectRelease();
        char v23 = v36[0];
        if (LOBYTE(v36[0]) != 38) {
          goto LABEL_38;
        }
      }

      else
      {
        uint64_t result = swift_bridgeObjectRelease();
      }

      char v23 = 38;
    }

    else
    {
      uint64_t result = swift_bridgeObjectRelease();
    }

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t result;
  Swift::String_optional v26;
  uint64_t countAndFlagsBits;
  unint64_t object;
  Swift::String_optional v29;
  char v31;
  char v32;
  BOOL v34;
  Swift::String v35;
  unsigned int (*v36)(uint64_t, uint64_t, uint64_t);
  Swift::String v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t, uint64_t);
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  v59 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Unicode.NumericType?);
  uint64_t v7 = MEMORY[0x1895F8858](v5, v6);
  v57 = (uint64_t)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v7, v9);
  uint64_t v11 = (char *)&v56 - v10;
  char v12 = type metadata accessor for Unicode.NumericType();
  Swift::String_optional v13 = *(void *)(v12 - 8);
  unint64_t v15 = MEMORY[0x1895F8858](v12, v14);
  v56 = (char *)&v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v15, v17);
  v58 = (char *)&v56 - v18;
  char v19 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x1895F8858](v19, v21);
  char v23 = (char *)&v56 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v66 = 0LL;
  v67 = 0xE000000000000000LL;
  Swift::String v24 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    Swift::String v24 = a1 & 0xFFFFFFFFFFFFLL;
  }
  v62 = a1;
  v63 = a2;
  v64 = 0LL;
  v65 = v24;
  swift_bridgeObjectRetain();
  uint64_t v26 = String.Iterator.next()();
  uint64_t result = v26.value._countAndFlagsBits;
  if (!v26.value._object)
  {
LABEL_31:
    swift_bridgeObjectRelease();
    uint64_t v35 = String.lowercased()();
    swift_bridgeObjectRelease();
    closure #1 in static Parser.classifyNumericType(_:)(v35._countAndFlagsBits, (uint64_t)v35._object, (uint64_t)v11);
    uint64_t v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
    if (v36((uint64_t)v11, 1LL, v12) == 1)
    {
      outlined destroy of _ASTParent?( (uint64_t)v11,  &demangling cache variable for type metadata for Unicode.NumericType?);
      v37._uint64_t countAndFlagsBits = 29545LL;
      v37._unint64_t object = (void *)0xE200000000000000LL;
      if (!String.hasPrefix(_:)(v37))
      {
        swift_bridgeObjectRelease();
        goto LABEL_38;
      }

      uint64_t v38 = specialized Collection.dropFirst(_:)(2uLL, v35._countAndFlagsBits, (unint64_t)v35._object);
      uint64_t v40 = v39;
      uint64_t v42 = v41;
      uint64_t v44 = v43;
      swift_bridgeObjectRelease();
      char v45 = MEMORY[0x186E052CC](v38, v40, v42, v44);
      v47 = v46;
      swift_bridgeObjectRelease();
      v48 = v57;
      closure #1 in static Parser.classifyNumericType(_:)(v45, v47, v57);
      swift_bridgeObjectRelease();
      if (v36(v48, 1LL, v12) == 1)
      {
        outlined destroy of _ASTParent?(v48, &demangling cache variable for type metadata for Unicode.NumericType?);
LABEL_38:
        v54 = 1LL;
        v51 = v59;
        return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v51, v54, 1LL, v12);
      }

      v49 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 32);
      v55 = v56;
      v49(v56, v48, v12);
      v51 = v59;
      v52 = v59;
      v53 = v55;
    }

    else
    {
      swift_bridgeObjectRelease();
      v49 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 32);
      v50 = v58;
      v49(v58, (uint64_t)v11, v12);
      v51 = v59;
      v52 = v59;
      v53 = v50;
    }

    v49(v52, (uint64_t)v53, v12);
    v54 = 0LL;
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v51, v54, 1LL, v12);
  }

  uint64_t countAndFlagsBits = v26.value._countAndFlagsBits;
  unint64_t object = (unint64_t)v26.value._object;
  while ((object & 0x2000000000000000LL) != 0 ? HIBYTE(object) & 0xF : countAndFlagsBits & 0xFFFFFFFFFFFFLL)
  {
    if ((object & 0x1000000000000000LL) != 0)
    {
      _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }

    else
    {
      if ((object & 0x2000000000000000LL) != 0)
      {
        v60 = countAndFlagsBits;
        v61 = object & 0xFFFFFFFFFFFFFFLL;
      }

      else if ((countAndFlagsBits & 0x1000000000000000LL) == 0)
      {
        _StringObject.sharedUTF8.getter();
      }

      _decodeScalar(_:startingAt:)();
    }

    Unicode.Scalar.properties.getter();
    uint64_t v31 = Unicode.Scalar.Properties.isPatternWhitespace.getter();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v23, v19);
    if ((v31 & 1) == 0 && (countAndFlagsBits != 95 || object != 0xE100000000000000LL))
    {
      uint64_t v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t v34 = countAndFlagsBits == 45 && object == 0xE100000000000000LL;
      if ((v32 & 1) == 0 && !v34 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        MEMORY[0x186E0535C](countAndFlagsBits, object);
      }
    }

    swift_bridgeObjectRelease();
    uint64_t v29 = String.Iterator.next()();
    uint64_t result = v29.value._countAndFlagsBits;
    uint64_t countAndFlagsBits = v29.value._countAndFlagsBits;
    unint64_t object = (unint64_t)v29.value._object;
    if (!v29.value._object) {
      goto LABEL_31;
    }
  }

  __break(1u);
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t result;
  Swift::String_optional v13;
  uint64_t countAndFlagsBits;
  unint64_t object;
  Swift::String_optional v16;
  char v18;
  char v19;
  BOOL v21;
  Swift::String v22;
  char v23;
  Swift::String v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void v35[2];
  void v36[6];
  uint64_t v6 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6, v8);
  char v10 = (char *)v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v36[4] = 0LL;
  v36[5] = 0xE000000000000000LL;
  uint64_t v11 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v11 = a1 & 0xFFFFFFFFFFFFLL;
  }
  v36[0] = a1;
  v36[1] = a2;
  v36[2] = 0LL;
  v36[3] = v11;
  swift_bridgeObjectRetain();
  Swift::String_optional v13 = String.Iterator.next()();
  uint64_t result = v13.value._countAndFlagsBits;
  if (!v13.value._object)
  {
LABEL_31:
    swift_bridgeObjectRelease();
    Swift::String v22 = String.lowercased()();
    swift_bridgeObjectRelease();
    closure #1 in static Parser.classifyBoolProperty(_:)(v22._countAndFlagsBits, (uint64_t)v22._object, (char *)v36);
    char v23 = v36[0];
    if (LOBYTE(v36[0]) == 67)
    {
      v24._uint64_t countAndFlagsBits = 29545LL;
      v24._unint64_t object = (void *)0xE200000000000000LL;
      if (String.hasPrefix(_:)(v24))
      {
        unint64_t v25 = specialized Collection.dropFirst(_:)(2uLL, v22._countAndFlagsBits, (unint64_t)v22._object);
        uint64_t v27 = v26;
        uint64_t v29 = v28;
        uint64_t v31 = v30;
        swift_bridgeObjectRelease();
        uint64_t v32 = MEMORY[0x186E052CC](v25, v27, v29, v31);
        uint64_t v34 = v33;
        swift_bridgeObjectRelease();
        closure #1 in static Parser.classifyBoolProperty(_:)(v32, v34, (char *)v36);
        uint64_t result = swift_bridgeObjectRelease();
        char v23 = v36[0];
        if (LOBYTE(v36[0]) != 67) {
          goto LABEL_38;
        }
      }

      else
      {
        uint64_t result = swift_bridgeObjectRelease();
      }

      char v23 = 67;
    }

    else
    {
      uint64_t result = swift_bridgeObjectRelease();
    }

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t result;
  Swift::String_optional v13;
  uint64_t countAndFlagsBits;
  unint64_t object;
  Swift::String_optional v16;
  char v18;
  char v19;
  BOOL v21;
  Swift::String v22;
  char v23;
  Swift::String v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  void v35[2];
  void v36[6];
  Swift::String v37;
  uint64_t v6 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6, v8);
  char v10 = (char *)v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v36[4] = 0LL;
  v36[5] = 0xE000000000000000LL;
  uint64_t v11 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v11 = a1 & 0xFFFFFFFFFFFFLL;
  }
  v36[0] = a1;
  v36[1] = a2;
  v36[2] = 0LL;
  v36[3] = v11;
  swift_bridgeObjectRetain();
  Swift::String_optional v13 = String.Iterator.next()();
  uint64_t result = v13.value._countAndFlagsBits;
  if (!v13.value._object)
  {
LABEL_31:
    swift_bridgeObjectRelease();
    Swift::String v22 = String.lowercased()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    Unicode.POSIXProperty.init(rawValue:)(v22, (char *)v36);
    char v23 = v36[0];
    if (LOBYTE(v36[0]) == 6)
    {
      v24._uint64_t countAndFlagsBits = 29545LL;
      v24._unint64_t object = (void *)0xE200000000000000LL;
      if (String.hasPrefix(_:)(v24))
      {
        unint64_t v25 = specialized Collection.dropFirst(_:)(2uLL, v22._countAndFlagsBits, (unint64_t)v22._object);
        uint64_t v27 = v26;
        uint64_t v29 = v28;
        uint64_t v31 = v30;
        swift_bridgeObjectRelease();
        uint64_t v32 = MEMORY[0x186E052CC](v25, v27, v29, v31);
        uint64_t v34 = v33;
        swift_bridgeObjectRelease();
        v37._uint64_t countAndFlagsBits = v32;
        v37._unint64_t object = v34;
        uint64_t result = Unicode.POSIXProperty.init(rawValue:)(v37, (char *)v36);
        char v23 = v36[0];
        if (LOBYTE(v36[0]) != 6) {
          goto LABEL_38;
        }
      }

      else
      {
        uint64_t result = swift_bridgeObjectRelease();
      }

      char v23 = 6;
    }

    else
    {
      uint64_t result = swift_bridgeObjectRelease();
    }

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t result;
  Swift::String_optional v13;
  uint64_t countAndFlagsBits;
  unint64_t object;
  Swift::String_optional v16;
  char v18;
  char v19;
  BOOL v21;
  Swift::String v22;
  char v23;
  Swift::String v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void v35[2];
  void v36[6];
  uint64_t v6 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6, v8);
  char v10 = (char *)v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v36[4] = 0LL;
  v36[5] = 0xE000000000000000LL;
  uint64_t v11 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v11 = a1 & 0xFFFFFFFFFFFFLL;
  }
  v36[0] = a1;
  v36[1] = a2;
  v36[2] = 0LL;
  v36[3] = v11;
  swift_bridgeObjectRetain();
  Swift::String_optional v13 = String.Iterator.next()();
  uint64_t result = v13.value._countAndFlagsBits;
  if (!v13.value._object)
  {
LABEL_31:
    swift_bridgeObjectRelease();
    Swift::String v22 = String.lowercased()();
    swift_bridgeObjectRelease();
    closure #1 in static Parser.classifyScriptProperty(_:)(v22._countAndFlagsBits, (uint64_t)v22._object, (char *)v36);
    char v23 = v36[0];
    if (LOBYTE(v36[0]) == 163)
    {
      v24._uint64_t countAndFlagsBits = 29545LL;
      v24._unint64_t object = (void *)0xE200000000000000LL;
      if (String.hasPrefix(_:)(v24))
      {
        unint64_t v25 = specialized Collection.dropFirst(_:)(2uLL, v22._countAndFlagsBits, (unint64_t)v22._object);
        uint64_t v27 = v26;
        uint64_t v29 = v28;
        uint64_t v31 = v30;
        swift_bridgeObjectRelease();
        uint64_t v32 = MEMORY[0x186E052CC](v25, v27, v29, v31);
        uint64_t v34 = v33;
        swift_bridgeObjectRelease();
        closure #1 in static Parser.classifyScriptProperty(_:)(v32, v34, (char *)v36);
        uint64_t result = swift_bridgeObjectRelease();
        char v23 = v36[0];
        if (LOBYTE(v36[0]) != 163) {
          goto LABEL_38;
        }
      }

      else
      {
        uint64_t result = swift_bridgeObjectRelease();
      }

      char v23 = -93;
    }

    else
    {
      uint64_t result = swift_bridgeObjectRelease();
    }

LABEL_38:
    *a3 = v23;
    return result;
  }

  uint64_t countAndFlagsBits = v13.value._countAndFlagsBits;
  unint64_t object = (unint64_t)v13.value._object;
  while ((object & 0x2000000000000000LL) != 0 ? HIBYTE(object) & 0xF : countAndFlagsBits & 0xFFFFFFFFFFFFLL)
  {
    if ((object & 0x1000000000000000LL) != 0)
    {
      _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }

    else
    {
      if ((object & 0x2000000000000000LL) != 0)
      {
        v35[0] = countAndFlagsBits;
        v35[1] = object & 0xFFFFFFFFFFFFFFLL;
      }

      else if ((countAndFlagsBits & 0x1000000000000000LL) == 0)
      {
        _StringObject.sharedUTF8.getter();
      }

      _decodeScalar(_:startingAt:)();
    }

    Unicode.Scalar.properties.getter();
    char v18 = Unicode.Scalar.Properties.isPatternWhitespace.getter();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    if ((v18 & 1) == 0 && (countAndFlagsBits != 95 || object != 0xE100000000000000LL))
    {
      char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
      BOOL v21 = countAndFlagsBits == 45 && object == 0xE100000000000000LL;
      if ((v19 & 1) == 0 && !v21 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        MEMORY[0x186E0535C](countAndFlagsBits, object);
      }
    }

    swift_bridgeObjectRelease();
    Swift::String_optional v16 = String.Iterator.next()();
    uint64_t result = v16.value._countAndFlagsBits;
    uint64_t countAndFlagsBits = v16.value._countAndFlagsBits;
    unint64_t object = (unint64_t)v16.value._object;
    if (!v16.value._object) {
      goto LABEL_31;
    }
  }

  __break(1u);
  return result;
}

    *a3 = v23;
    return result;
  }

  uint64_t countAndFlagsBits = v13.value._countAndFlagsBits;
  unint64_t object = (unint64_t)v13.value._object;
  while ((object & 0x2000000000000000LL) != 0 ? HIBYTE(object) & 0xF : countAndFlagsBits & 0xFFFFFFFFFFFFLL)
  {
    if ((object & 0x1000000000000000LL) != 0)
    {
      _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }

    else
    {
      if ((object & 0x2000000000000000LL) != 0)
      {
        v35[0] = countAndFlagsBits;
        v35[1] = object & 0xFFFFFFFFFFFFFFLL;
      }

      else if ((countAndFlagsBits & 0x1000000000000000LL) == 0)
      {
        _StringObject.sharedUTF8.getter();
      }

      _decodeScalar(_:startingAt:)();
    }

    Unicode.Scalar.properties.getter();
    char v18 = Unicode.Scalar.Properties.isPatternWhitespace.getter();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    if ((v18 & 1) == 0 && (countAndFlagsBits != 95 || object != 0xE100000000000000LL))
    {
      char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
      BOOL v21 = countAndFlagsBits == 45 && object == 0xE100000000000000LL;
      if ((v19 & 1) == 0 && !v21 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        MEMORY[0x186E0535C](countAndFlagsBits, object);
      }
    }

    swift_bridgeObjectRelease();
    Swift::String_optional v16 = String.Iterator.next()();
    uint64_t result = v16.value._countAndFlagsBits;
    uint64_t countAndFlagsBits = v16.value._countAndFlagsBits;
    unint64_t object = (unint64_t)v16.value._object;
    if (!v16.value._object) {
      goto LABEL_31;
    }
  }

  __break(1u);
  return result;
}

    *a3 = v23;
    return result;
  }

  uint64_t countAndFlagsBits = v13.value._countAndFlagsBits;
  unint64_t object = (unint64_t)v13.value._object;
  while ((object & 0x2000000000000000LL) != 0 ? HIBYTE(object) & 0xF : countAndFlagsBits & 0xFFFFFFFFFFFFLL)
  {
    if ((object & 0x1000000000000000LL) != 0)
    {
      _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }

    else
    {
      if ((object & 0x2000000000000000LL) != 0)
      {
        v35[0] = countAndFlagsBits;
        v35[1] = object & 0xFFFFFFFFFFFFFFLL;
      }

      else if ((countAndFlagsBits & 0x1000000000000000LL) == 0)
      {
        _StringObject.sharedUTF8.getter();
      }

      _decodeScalar(_:startingAt:)();
    }

    Unicode.Scalar.properties.getter();
    char v18 = Unicode.Scalar.Properties.isPatternWhitespace.getter();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    if ((v18 & 1) == 0 && (countAndFlagsBits != 95 || object != 0xE100000000000000LL))
    {
      char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
      BOOL v21 = countAndFlagsBits == 45 && object == 0xE100000000000000LL;
      if ((v19 & 1) == 0 && !v21 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        MEMORY[0x186E0535C](countAndFlagsBits, object);
      }
    }

    swift_bridgeObjectRelease();
    Swift::String_optional v16 = String.Iterator.next()();
    uint64_t result = v16.value._countAndFlagsBits;
    uint64_t countAndFlagsBits = v16.value._countAndFlagsBits;
    unint64_t object = (unint64_t)v16.value._object;
    if (!v16.value._object) {
      goto LABEL_31;
    }
  }

  __break(1u);
  return result;
}

    *a3 = v23;
    return result;
  }

  uint64_t countAndFlagsBits = v13.value._countAndFlagsBits;
  unint64_t object = (unint64_t)v13.value._object;
  while ((object & 0x2000000000000000LL) != 0 ? HIBYTE(object) & 0xF : countAndFlagsBits & 0xFFFFFFFFFFFFLL)
  {
    if ((object & 0x1000000000000000LL) != 0)
    {
      _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }

    else
    {
      if ((object & 0x2000000000000000LL) != 0)
      {
        v35[0] = countAndFlagsBits;
        v35[1] = object & 0xFFFFFFFFFFFFFFLL;
      }

      else if ((countAndFlagsBits & 0x1000000000000000LL) == 0)
      {
        _StringObject.sharedUTF8.getter();
      }

      _decodeScalar(_:startingAt:)();
    }

    Unicode.Scalar.properties.getter();
    char v18 = Unicode.Scalar.Properties.isPatternWhitespace.getter();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    if ((v18 & 1) == 0 && (countAndFlagsBits != 95 || object != 0xE100000000000000LL))
    {
      char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
      BOOL v21 = countAndFlagsBits == 45 && object == 0xE100000000000000LL;
      if ((v19 & 1) == 0 && !v21 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        MEMORY[0x186E0535C](countAndFlagsBits, object);
      }
    }

    swift_bridgeObjectRelease();
    Swift::String_optional v16 = String.Iterator.next()();
    uint64_t result = v16.value._countAndFlagsBits;
    uint64_t countAndFlagsBits = v16.value._countAndFlagsBits;
    unint64_t object = (unint64_t)v16.value._object;
    if (!v16.value._object) {
      goto LABEL_31;
    }
  }

  __break(1u);
  return result;
}

    *a3 = v23;
    return result;
  }

  uint64_t countAndFlagsBits = v13.value._countAndFlagsBits;
  unint64_t object = (unint64_t)v13.value._object;
  while ((object & 0x2000000000000000LL) != 0 ? HIBYTE(object) & 0xF : countAndFlagsBits & 0xFFFFFFFFFFFFLL)
  {
    if ((object & 0x1000000000000000LL) != 0)
    {
      _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }

    else
    {
      if ((object & 0x2000000000000000LL) != 0)
      {
        v35[0] = countAndFlagsBits;
        v35[1] = object & 0xFFFFFFFFFFFFFFLL;
      }

      else if ((countAndFlagsBits & 0x1000000000000000LL) == 0)
      {
        _StringObject.sharedUTF8.getter();
      }

      _decodeScalar(_:startingAt:)();
    }

    Unicode.Scalar.properties.getter();
    char v18 = Unicode.Scalar.Properties.isPatternWhitespace.getter();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    if ((v18 & 1) == 0 && (countAndFlagsBits != 95 || object != 0xE100000000000000LL))
    {
      char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
      BOOL v21 = countAndFlagsBits == 45 && object == 0xE100000000000000LL;
      if ((v19 & 1) == 0 && !v21 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        MEMORY[0x186E0535C](countAndFlagsBits, object);
      }
    }

    swift_bridgeObjectRelease();
    Swift::String_optional v16 = String.Iterator.next()();
    uint64_t result = v16.value._countAndFlagsBits;
    uint64_t countAndFlagsBits = v16.value._countAndFlagsBits;
    unint64_t object = (unint64_t)v16.value._object;
    if (!v16.value._object) {
      goto LABEL_31;
    }
  }

  __break(1u);
  return result;
}

      swift_bridgeObjectRelease();
      v55 = v86;
      *(void *)&v156 = v86;
      v56 = v138;
      *((void *)&v156 + 1) = v138;
      v57 = v137;
      *(void *)&v157 = v137;
      v58 = v136;
      *((void *)&v157 + 1) = v136;
      v158 = v52;
      v59 = v135;
      v60 = v134;
      *(void *)&v159 = v135;
      *((void *)&v159 + 1) = v134;
      v61 = v133;
      *(void *)&v160 = v133;
      *((void *)&v160 + 1) = v62;
      LOBYTE(v161) = v87 & 1;
      *(void *)&v162 = v64;
      *((void *)&v162 + 1) = v65;
      char v23 = v153;
      char v18 = (void (*)(void, void, void, void))v141;
      v63 = v132;
      goto LABEL_39;
    }

    v80._uint64_t countAndFlagsBits = 123LL;
    v80._unint64_t object = (void *)0xE100000000000000LL;
    v81 = Parser.tryEat(_:)(v80);
    uint64_t v9 = v149;
    char v18 = (void (*)(void, void, void, void))v141;
    uint64_t v6 = v140;
    if (!v81) {
      goto LABEL_27;
    }
    Parser.expectNamedReference(endingWith:eatEnding:allowRecursionLevel:)( 125LL,  0xE100000000000000LL,  1,  0,  (uint64_t)&v156);
    v82 = v158;
    v83 = v161;
    v84 = v157;
    *(_OWORD *)uint64_t v6 = v156;
    *((_OWORD *)v6 + 1) = v84;
    v6[32] = v82;
    *(_OWORD *)(v6 + 40) = v159;
    *(_OWORD *)(v6 + 56) = v160;
    _BYTE v6[72] = v83;
    *((_OWORD *)v6 + 5) = v162;
LABEL_34:
    swift_storeEnumTagMultiPayload();
    Swift::String v22 = v139;
    goto LABEL_35;
  }

  swift_bridgeObjectRelease();
  v29._uint64_t countAndFlagsBits = 123LL;
  v29._unint64_t object = (void *)0xE100000000000000LL;
  uint64_t v30 = Parser.tryEat(_:)(v29);
  Swift::String v24 = v154;
  v149 = v9;
  if (!v30)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Character>);
    v66 = swift_allocObject();
    *(_OWORD *)(v66 + 16) = xmmword_181005EC0;
    *(void *)(v66 + 32) = 60LL;
    *(void *)(v66 + 40) = 0xE100000000000000LL;
    *(void *)(v66 + 48) = 39LL;
    *(void *)(v66 + 56) = 0xE100000000000000LL;
    v67 = specialized Parser.tryEat<A>(anyOf:)(v66);
    v69 = v68;
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    char v18 = (void (*)(void, void, void, void))v141;
    uint64_t v6 = v140;
    char v23 = v153;
    if (v69)
    {
      v70 = Parser.getClosingDelimiter(for:)(v67, v69);
      v72 = v71;
      swift_bridgeObjectRelease();
      Parser.lexNumberedReference(allowWholePatternRef:allowRecursionLevel:)(1, 0, (uint64_t)&v156);
      v52 = v158;
      if (v158 == 255LL)
      {
        v73 = v70;
        v54 = v1;
        Parser.expectNamedReference(endingWith:eatEnding:allowRecursionLevel:)(v73, v72, 1, 0, (uint64_t)&v156);
        swift_bridgeObjectRelease();
        v56 = *((void *)&v156 + 1);
        v55 = v156;
        v58 = *((void *)&v157 + 1);
        v57 = v157;
        v52 = v158;
        v60 = *((void *)&v159 + 1);
        v59 = v159;
        v62 = *((void *)&v160 + 1);
        v61 = v160;
        v63 = v161;
        v65 = *((void *)&v162 + 1);
        v64 = v162;
        goto LABEL_39;
      }

      v138 = *((void *)&v156 + 1);
      v86 = v156;
      v136 = *((void *)&v157 + 1);
      v137 = v157;
      v134 = *((void *)&v159 + 1);
      v135 = v159;
      v62 = *((void *)&v160 + 1);
      v133 = v160;
      v87 = v161;
      v64 = v162;
      LODWORD(v132) = v161 & 1;
      v65 = *((void *)&v162 + 1);
      if ((specialized Parser.tryEat<A>(sequence:)(v70, v72) & 1) != 0)
      {
        v54 = v1;
      }

      else
      {
        *(void *)&v156 = v70;
        *((void *)&v156 + 1) = v72;
        *(void *)&v163 = String.init<A>(_:)();
        *((void *)&v163 + 1) = v94;
        v164 = 0LL;
        v165 = 0LL;
        v166 = 3;
        v54 = v1;
        Parser.errorAtCurrentPosition(_:)(&v163);
      }

      goto LABEL_38;
    }

    Parser.lexNumberedReference(allowWholePatternRef:allowRecursionLevel:)(0, 0, (uint64_t)&v156);
    v85 = v158;
    uint64_t v9 = v149;
    if (v158 == 255LL)
    {
LABEL_27:
      Swift::String v22 = v139;
      goto LABEL_28;
    }

    v88 = v161;
    v89 = v157;
    v90 = v159;
    v91 = v160;
    v92 = v162;
    *(_OWORD *)uint64_t v6 = v156;
    *((_OWORD *)v6 + 1) = v89;
    v6[32] = v85;
    *(_OWORD *)(v6 + 40) = v90;
    *(_OWORD *)(v6 + 56) = v91;
    _BYTE v6[72] = v88 & 1;
    *((_OWORD *)v6 + 5) = v92;
    goto LABEL_34;
  }

  Parser.lexNumberedReference(allowWholePatternRef:allowRecursionLevel:)(0, 0, (uint64_t)&v156);
  uint64_t v31 = v158;
  uint64_t v6 = v140;
  v142 = v1;
  if (v158 == 255LL)
  {
    Parser.expectNamedReference(endingWith:eatEnding:allowRecursionLevel:)( 125LL,  0xE100000000000000LL,  1,  0,  (uint64_t)&v156);
    uint64_t v32 = *((void *)&v156 + 1);
    uint64_t v33 = v156;
    uint64_t v35 = *((void *)&v157 + 1);
    uint64_t v34 = v157;
    uint64_t v31 = v158;
    uint64_t v37 = *((void *)&v159 + 1);
    uint64_t v36 = v159;
    uint64_t v39 = *((void *)&v160 + 1);
    uint64_t v38 = v160;
    uint64_t v40 = v161;
    uint64_t v42 = *((void *)&v162 + 1);
    uint64_t v41 = v162;
    Swift::String v22 = v139;
  }

  else
  {
    v138 = *((void *)&v156 + 1);
    uint64_t v33 = v156;
    v136 = *((void *)&v157 + 1);
    v137 = v157;
    v135 = v159;
    uint64_t v38 = v160;
    v134 = *((void *)&v159 + 1);
    uint64_t v39 = *((void *)&v160 + 1);
    v74 = v161;
    uint64_t v42 = *((void *)&v162 + 1);
    uint64_t v41 = v162;
    LODWORD(v133) = v161 & 1;
    if ((specialized Parser.tryEat<A>(sequence:)(125LL, 0xE100000000000000LL) & 1) == 0)
    {
      *(void *)&v156 = 125LL;
      *((void *)&v156 + 1) = 0xE100000000000000LL;
      *(void *)&v163 = String.init<A>(_:)();
      *((void *)&v163 + 1) = v75;
      v164 = 0LL;
      v165 = 0LL;
      v166 = 3;
      Parser.errorAtCurrentPosition(_:)(&v163);
      swift_bridgeObjectRelease();
    }

    *(void *)&v156 = v33;
    uint64_t v32 = v138;
    *((void *)&v156 + 1) = v138;
    uint64_t v34 = v137;
    *(void *)&v157 = v137;
    uint64_t v35 = v136;
    *((void *)&v157 + 1) = v136;
    v158 = v31;
    uint64_t v36 = v135;
    uint64_t v37 = v134;
    *(void *)&v159 = v135;
    *((void *)&v159 + 1) = v134;
    *(void *)&v160 = v38;
    *((void *)&v160 + 1) = v39;
    LOBYTE(v161) = v74 & 1;
    *(void *)&v162 = v41;
    *((void *)&v162 + 1) = v42;
    Swift::String v22 = v139;
    uint64_t v40 = v133;
  }

  *(void *)uint64_t v6 = v33;
  *((void *)v6 + 1) = v32;
  *((void *)v6 + 2) = v34;
  *((void *)v6 + 3) = v35;
  v6[32] = v31;
  *((void *)v6 + 5) = v36;
  *((void *)v6 + 6) = v37;
  *((void *)v6 + 7) = v38;
  *((void *)v6 + 8) = v39;
  _BYTE v6[72] = v40;
  *((void *)v6 + 10) = v41;
  *((void *)v6 + 11) = v42;
  uint64_t v9 = v149;
  swift_storeEnumTagMultiPayload();
  BOOL v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56);
  v21(v6, 0LL, 1LL, v9);
  char v23 = v153;
  uint64_t v1 = v142;
  Swift::String v24 = v154;
  char v18 = (void (*)(void, void, void, void))v141;
LABEL_40:
  v96 = *(char **)(v22 + 48);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v96)(v6, 1LL, v9) == 1)
  {
    v140 = v96;
    v141 = v21;
    v149 = v9;
    outlined destroy of _ASTParent?((uint64_t)v6, &demangling cache variable for type metadata for AST.Atom.Kind?);
    v97 = v1[9];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v98 = specialized Collection.dropFirst(_:)(*((void *)v18 + 2), v97);
    v100 = v99;
    v102 = v101;
    v104 = v103 >> 1;
    swift_bridgeObjectRetain();
    uint64_t result = swift_unknownObjectRetain();
    v106 = v100 - 32;
    v107 = v102;
    v108 = v102;
    v109 = v151;
    v110 = v152;
LABEL_42:
    v111 = v106 + 80 * v107;
    while (1)
    {
      if (v104 == v108)
      {
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease_n();
        v124 = v155;
        v125 = v150;
        uint64_t *v1 = v147;
        v1[1] = v125;
        Swift::String v24 = v154;
        v126 = v146;
        v1[2] = v154;
        v1[3] = v126;
        *((_BYTE *)v1 + 32) = v124;
        v1[5] = v145;
        v1[6] = v109;
        v1[7] = v144;
        *((_BYTE *)v1 + 64) = v143;
        v1[9] = (uint64_t)v18;
        uint64_t v9 = v149;
        v141((char *)v110, 1LL, 1LL, v149);
        v96 = v140;
        goto LABEL_54;
      }

      if (v107 < v102 || v108 >= v104) {
        break;
      }
      v112 = *(unsigned __int8 *)(v111 + 32);
      ++v108;
      v111 += 80LL;
      if (!v112)
      {
        v139 = v106;
        v137 = v98;
        v138 = v97;
        v142 = v1;
        v113 = *(void *)(v111 - 32);
        v135 = *(void *)(v111 - 40);
        v134 = *(void *)(v111 - 24);
        v114 = *(void *)(v111 - 8);
        v133 = *(void *)(v111 - 16);
        v115 = *(void *)v111;
        v116 = *(void *)(v111 + 8);
        v117 = *(void *)(v111 + 16);
        v118 = (char *)v18;
        v119 = *(_BYTE *)(v111 + 24);
        v132 = v113;
        swift_bridgeObjectRetain();
        v136 = v115;
        outlined copy of ParseError?(v114, v115, v116, v117, v119);
        v120 = (uint64_t)v118;
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v118 + 2) + 1LL,  1,  v118);
          v120 = result;
        }

        v122 = *(void *)(v120 + 16);
        v121 = *(void *)(v120 + 24);
        v106 = v139;
        if (v122 >= v121 >> 1)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v121 > 1),  v122 + 1,  1,  (char *)v120);
          v106 = v139;
          v120 = result;
        }

        *(void *)(v120 + 16) = v122 + 1;
        v123 = v120 + 80 * v122;
        *(_BYTE *)(v123 + 32) = 0;
        *(void *)(v123 + 40) = v135;
        *(void *)(v123 + 48) = v132;
        *(void *)(v123 + 56) = v134;
        *(void *)(v123 + 64) = v133;
        *(void *)(v123 + 72) = v114;
        *(void *)(v123 + 80) = v136;
        *(void *)(v123 + 88) = v116;
        *(void *)(v123 + 96) = v117;
        *(_BYTE *)(v123 + 104) = v119;
        char v18 = (void (*)(void, void, void, void))v120;
        v107 = v108;
        char v23 = v153;
        uint64_t v1 = v142;
        v110 = v152;
        v109 = v151;
        v97 = v138;
        v98 = v137;
        goto LABEL_42;
      }
    }

    __break(1u);
  }

  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v110 = v152;
    outlined init with take of AST.Atom.Kind((uint64_t)v6, v152, type metadata accessor for AST.Atom.Kind);
    v21((char *)v110, 0LL, 1LL, v9);
LABEL_54:
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v96)(v110, 1LL, v9) == 1)
    {
      outlined destroy of _ASTParent?(v110, &demangling cache variable for type metadata for AST.Atom.Kind?);
      v127 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Atom.Kind>);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v127 - 8) + 56LL))( v23,  1LL,  1LL,  v127);
    }

    v128 = v148;
    outlined init with take of AST.Atom.Kind(v110, v148, type metadata accessor for AST.Atom.Kind);
    uint64_t result = outlined init with take of AST.Atom.Kind(v128, v23, type metadata accessor for AST.Atom.Kind);
    v129 = v1[2];
    if (v129 >> 14 >= v24 >> 14)
    {
      v130 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Atom.Kind>);
      v131 = (unint64_t *)(v23 + *(int *)(v130 + 28));
      *v131 = v24;
      v131[1] = v129;
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v130 - 8) + 56LL))( v23,  0LL,  1LL,  v130);
    }
  }

  __break(1u);
  return result;
}

uint64_t specialized static Parser.withNormalizedForms<A>(_:requireInPrefix:match:)( uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4, v6);
  uint64_t v8 = (char *)v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v34[4] = 0LL;
  v34[5] = 0xE000000000000000LL;
  uint64_t v9 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v9 = a1 & 0xFFFFFFFFFFFFLL;
  }
  v34[0] = a1;
  v34[1] = a2;
  v34[2] = 0LL;
  v34[3] = v9;
  swift_bridgeObjectRetain();
  Swift::String_optional v11 = String.Iterator.next()();
  uint64_t result = v11.value._countAndFlagsBits;
  if (v11.value._object)
  {
    uint64_t countAndFlagsBits = v11.value._countAndFlagsBits;
    unint64_t object = (unint64_t)v11.value._object;
    while ((object & 0x2000000000000000LL) != 0 ? HIBYTE(object) & 0xF : countAndFlagsBits & 0xFFFFFFFFFFFFLL)
    {
      if ((object & 0x1000000000000000LL) != 0)
      {
        _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }

      else
      {
        if ((object & 0x2000000000000000LL) != 0)
        {
          v33[0] = countAndFlagsBits;
          v33[1] = object & 0xFFFFFFFFFFFFFFLL;
        }

        else if ((countAndFlagsBits & 0x1000000000000000LL) == 0)
        {
          _StringObject.sharedUTF8.getter();
        }

        _decodeScalar(_:startingAt:)();
      }

      Unicode.Scalar.properties.getter();
      char v16 = Unicode.Scalar.Properties.isPatternWhitespace.getter();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      if ((v16 & 1) == 0 && (countAndFlagsBits != 95 || object != 0xE100000000000000LL))
      {
        char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
        BOOL v18 = countAndFlagsBits == 45 && object == 0xE100000000000000LL;
        BOOL v19 = v18;
        if ((v17 & 1) == 0 && !v19 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
          MEMORY[0x186E0535C](countAndFlagsBits, object);
        }
      }

      swift_bridgeObjectRelease();
      Swift::String_optional v14 = String.Iterator.next()();
      uint64_t result = v14.value._countAndFlagsBits;
      uint64_t countAndFlagsBits = v14.value._countAndFlagsBits;
      unint64_t object = (unint64_t)v14.value._object;
      if (!v14.value._object) {
        goto LABEL_31;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_31:
    swift_bridgeObjectRelease();
    Swift::String v20 = String.lowercased()();
    swift_bridgeObjectRelease();
    closure #1 in static Parser.classifyCharacterPropertyBoolValue(_:)( v20._countAndFlagsBits,  (uint64_t)v20._object,  (char *)v34);
    uint64_t v21 = LOBYTE(v34[0]);
    if (LOBYTE(v34[0]) == 2)
    {
      v22._uint64_t countAndFlagsBits = 29545LL;
      v22._unint64_t object = (void *)0xE200000000000000LL;
      if (String.hasPrefix(_:)(v22))
      {
        unint64_t v23 = specialized Collection.dropFirst(_:)(2uLL, v20._countAndFlagsBits, (unint64_t)v20._object);
        uint64_t v25 = v24;
        uint64_t v27 = v26;
        uint64_t v29 = v28;
        swift_bridgeObjectRelease();
        uint64_t v30 = MEMORY[0x186E052CC](v23, v25, v27, v29);
        uint64_t v32 = v31;
        swift_bridgeObjectRelease();
        closure #1 in static Parser.classifyCharacterPropertyBoolValue(_:)(v30, v32, (char *)v34);
        swift_bridgeObjectRelease();
        return LOBYTE(v34[0]);
      }

      else
      {
        swift_bridgeObjectRelease();
        return 2LL;
      }
    }

    else
    {
      swift_bridgeObjectRelease();
    }

    return v21;
  }

  return result;
}

uint64_t specialized static Parser.withNormalizedForms<A>(_:requireInPrefix:match:)@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, __int16 *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6, v8);
  char v10 = (char *)v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v36[4] = 0LL;
  v36[5] = 0xE000000000000000LL;
  uint64_t v11 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v11 = a1 & 0xFFFFFFFFFFFFLL;
  }
  v36[0] = a1;
  v36[1] = a2;
  v36[2] = 0LL;
  v36[3] = v11;
  swift_bridgeObjectRetain();
  Swift::String_optional v13 = String.Iterator.next()();
  uint64_t result = v13.value._countAndFlagsBits;
  if (!v13.value._object)
  {
LABEL_31:
    swift_bridgeObjectRelease();
    Swift::String v22 = String.lowercased()();
    swift_bridgeObjectRelease();
    closure #1 in static Parser.classifyBlockProperty(_:valueOnly:)( v22._countAndFlagsBits,  (uint64_t)v22._object,  (__int16 *)v36);
    __int16 v23 = v36[0];
    if (LOWORD(v36[0]) == 321)
    {
      v24._uint64_t countAndFlagsBits = 29545LL;
      v24._unint64_t object = (void *)0xE200000000000000LL;
      if (String.hasPrefix(_:)(v24))
      {
        unint64_t v25 = specialized Collection.dropFirst(_:)(2uLL, v22._countAndFlagsBits, (unint64_t)v22._object);
        uint64_t v27 = v26;
        uint64_t v29 = v28;
        uint64_t v31 = v30;
        swift_bridgeObjectRelease();
        uint64_t v32 = MEMORY[0x186E052CC](v25, v27, v29, v31);
        uint64_t v34 = v33;
        swift_bridgeObjectRelease();
        closure #1 in static Parser.classifyBlockProperty(_:valueOnly:)(v32, v34, (__int16 *)v36);
        uint64_t result = swift_bridgeObjectRelease();
        __int16 v23 = v36[0];
        if (LOWORD(v36[0]) != 321) {
          goto LABEL_38;
        }
      }

      else
      {
        uint64_t result = swift_bridgeObjectRelease();
      }

      __int16 v23 = 321;
    }

    else
    {
      uint64_t result = swift_bridgeObjectRelease();
    }

uint64_t specialized static Parser.withNormalizedForms<A>(_:requireInPrefix:match:)@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v56 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AST.Atom.CharacterProperty.Kind?);
  uint64_t v7 = MEMORY[0x1895F8858](v5, v6);
  uint64_t v55 = (uint64_t)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v7, v9);
  uint64_t v11 = (char *)&v54 - v10;
  uint64_t v12 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0LL);
  uint64_t v57 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1895F8858](v12, v13);
  uint64_t v54 = (uint64_t)&v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v14, v16);
  char v18 = (char *)&v54 - v17;
  uint64_t v19 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x1895F8858](v19, v21);
  __int16 v23 = (char *)&v54 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v64 = 0LL;
  unint64_t v65 = 0xE000000000000000LL;
  uint64_t v24 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v24 = a1 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v60 = a1;
  unint64_t v61 = a2;
  uint64_t v62 = 0LL;
  uint64_t v63 = v24;
  swift_bridgeObjectRetain();
  Swift::String_optional v26 = String.Iterator.next()();
  uint64_t result = v26.value._countAndFlagsBits;
  if (!v26.value._object)
  {
LABEL_31:
    swift_bridgeObjectRelease();
    Swift::String v35 = String.lowercased()();
    swift_bridgeObjectRelease();
    closure #1 in static Parser.classifySpecialPropValue(_:)(v35._countAndFlagsBits, (uint64_t)v35._object, (uint64_t)v11);
    uint64_t v36 = v57;
    uint64_t v37 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v57 + 48);
    if (v37((uint64_t)v11, 1LL, v12) == 1)
    {
      outlined destroy of _ASTParent?( (uint64_t)v11,  &demangling cache variable for type metadata for AST.Atom.CharacterProperty.Kind?);
      v38._uint64_t countAndFlagsBits = 29545LL;
      v38._unint64_t object = (void *)0xE200000000000000LL;
      if (!String.hasPrefix(_:)(v38))
      {
        swift_bridgeObjectRelease();
        goto LABEL_38;
      }

      unint64_t v39 = specialized Collection.dropFirst(_:)(2uLL, v35._countAndFlagsBits, (unint64_t)v35._object);
      uint64_t v41 = v40;
      uint64_t v43 = v42;
      uint64_t v45 = v44;
      swift_bridgeObjectRelease();
      uint64_t v46 = MEMORY[0x186E052CC](v39, v41, v43, v45);
      uint64_t v48 = v47;
      swift_bridgeObjectRelease();
      uint64_t v49 = v55;
      closure #1 in static Parser.classifySpecialPropValue(_:)(v46, v48, v55);
      swift_bridgeObjectRelease();
      if (v37(v49, 1LL, v12) == 1)
      {
        outlined destroy of _ASTParent?( v49,  &demangling cache variable for type metadata for AST.Atom.CharacterProperty.Kind?);
LABEL_38:
        uint64_t v52 = 1LL;
        uint64_t v51 = v56;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v36 + 56))(v51, v52, 1LL, v12);
      }

      uint64_t v53 = v54;
      outlined init with take of AST.Atom.Kind(v49, v54, type metadata accessor for AST.Atom.CharacterProperty.Kind);
      uint64_t v50 = v53;
    }

    else
    {
      swift_bridgeObjectRelease();
      outlined init with take of AST.Atom.Kind( (uint64_t)v11,  (uint64_t)v18,  type metadata accessor for AST.Atom.CharacterProperty.Kind);
      uint64_t v50 = (uint64_t)v18;
    }

    uint64_t v51 = v56;
    outlined init with take of AST.Atom.Kind(v50, v56, type metadata accessor for AST.Atom.CharacterProperty.Kind);
    uint64_t v52 = 0LL;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v36 + 56))(v51, v52, 1LL, v12);
  }

  uint64_t countAndFlagsBits = v26.value._countAndFlagsBits;
  unint64_t object = (unint64_t)v26.value._object;
  while ((object & 0x2000000000000000LL) != 0 ? HIBYTE(object) & 0xF : countAndFlagsBits & 0xFFFFFFFFFFFFLL)
  {
    if ((object & 0x1000000000000000LL) != 0)
    {
      _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }

    else
    {
      if ((object & 0x2000000000000000LL) != 0)
      {
        uint64_t v58 = countAndFlagsBits;
        uint64_t v59 = object & 0xFFFFFFFFFFFFFFLL;
      }

      else if ((countAndFlagsBits & 0x1000000000000000LL) == 0)
      {
        _StringObject.sharedUTF8.getter();
      }

      _decodeScalar(_:startingAt:)();
    }

    Unicode.Scalar.properties.getter();
    char v31 = Unicode.Scalar.Properties.isPatternWhitespace.getter();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v23, v19);
    if ((v31 & 1) == 0 && (countAndFlagsBits != 95 || object != 0xE100000000000000LL))
    {
      char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
      BOOL v34 = countAndFlagsBits == 45 && object == 0xE100000000000000LL;
      if ((v32 & 1) == 0 && !v34 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        MEMORY[0x186E0535C](countAndFlagsBits, object);
      }
    }

    swift_bridgeObjectRelease();
    Swift::String_optional v29 = String.Iterator.next()();
    uint64_t result = v29.value._countAndFlagsBits;
    uint64_t countAndFlagsBits = v29.value._countAndFlagsBits;
    unint64_t object = (unint64_t)v29.value._object;
    if (!v29.value._object) {
      goto LABEL_31;
    }
  }

  __break(1u);
  return result;
}

uint64_t specialized static Parser.withNormalizedForms<A>(_:requireInPrefix:match:)@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v69 = a7;
  uint64_t v70 = a8;
  uint64_t v65 = a6;
  unint64_t v66 = a4;
  uint64_t v67 = a3;
  uint64_t v68 = a5;
  uint64_t v64 = a9;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AST.Atom.CharacterProperty.Kind?);
  uint64_t v15 = MEMORY[0x1895F8858](v13, v14);
  uint64_t v63 = (uint64_t *)((char *)&v62 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  MEMORY[0x1895F8858](v15, v17);
  uint64_t v19 = (uint64_t *)((char *)&v62 - v18);
  uint64_t v20 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0LL);
  uint64_t v71 = *(void *)(v20 - 8);
  uint64_t v22 = MEMORY[0x1895F8858](v20, v21);
  uint64_t v62 = (uint64_t)&v62 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v22, v24);
  Swift::String_optional v26 = (char *)&v62 - v25;
  uint64_t v27 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v28 = *(void *)(v27 - 8);
  MEMORY[0x1895F8858](v27, v29);
  char v31 = (char *)&v62 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v78 = 0LL;
  unint64_t v79 = 0xE000000000000000LL;
  uint64_t v32 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v32 = a1 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v74 = a1;
  unint64_t v75 = a2;
  uint64_t v76 = 0LL;
  uint64_t v77 = v32;
  swift_bridgeObjectRetain();
  Swift::String_optional v34 = String.Iterator.next()();
  uint64_t result = v34.value._countAndFlagsBits;
  if (!v34.value._object)
  {
LABEL_31:
    swift_bridgeObjectRelease();
    Swift::String v43 = String.lowercased()();
    swift_bridgeObjectRelease();
    unint64_t v44 = v66;
    closure #1 in Parser.classifyCharacterProperty(key:value:)( v43._countAndFlagsBits,  (uint64_t)v43._object,  v67,  v66,  v68,  v69,  v70,  a10,  v19,  a11);
    uint64_t v45 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v71 + 48);
    if (v45(v19, 1LL, v20) == 1)
    {
      outlined destroy of _ASTParent?( (uint64_t)v19,  &demangling cache variable for type metadata for AST.Atom.CharacterProperty.Kind?);
      v46._uint64_t countAndFlagsBits = 29545LL;
      v46._unint64_t object = (void *)0xE200000000000000LL;
      if (!String.hasPrefix(_:)(v46))
      {
        swift_bridgeObjectRelease();
        goto LABEL_38;
      }

      unint64_t v47 = specialized Collection.dropFirst(_:)(2uLL, v43._countAndFlagsBits, (unint64_t)v43._object);
      uint64_t v49 = v48;
      uint64_t v51 = v50;
      uint64_t v53 = v52;
      swift_bridgeObjectRelease();
      uint64_t v54 = MEMORY[0x186E052CC](v47, v49, v51, v53);
      uint64_t v56 = v55;
      swift_bridgeObjectRelease();
      uint64_t v57 = v63;
      closure #1 in Parser.classifyCharacterProperty(key:value:)(v54, v56, v67, v44, v68, v69, v70, a10, v63, a11);
      swift_bridgeObjectRelease();
      if (v45(v57, 1LL, v20) == 1)
      {
        outlined destroy of _ASTParent?( (uint64_t)v57,  &demangling cache variable for type metadata for AST.Atom.CharacterProperty.Kind?);
LABEL_38:
        uint64_t v60 = 1LL;
        uint64_t v59 = v64;
        goto LABEL_39;
      }

      uint64_t v61 = v62;
      outlined init with take of AST.Atom.Kind( (uint64_t)v57,  v62,  type metadata accessor for AST.Atom.CharacterProperty.Kind);
      uint64_t v58 = v61;
    }

    else
    {
      swift_bridgeObjectRelease();
      outlined init with take of AST.Atom.Kind( (uint64_t)v19,  (uint64_t)v26,  type metadata accessor for AST.Atom.CharacterProperty.Kind);
      uint64_t v58 = (uint64_t)v26;
    }

    uint64_t v59 = v64;
    outlined init with take of AST.Atom.Kind(v58, v64, type metadata accessor for AST.Atom.CharacterProperty.Kind);
    uint64_t v60 = 0LL;
LABEL_39:
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v71 + 56))(v59, v60, 1LL, v20);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  uint64_t countAndFlagsBits = v34.value._countAndFlagsBits;
  unint64_t object = (unint64_t)v34.value._object;
  while ((object & 0x2000000000000000LL) != 0 ? HIBYTE(object) & 0xF : countAndFlagsBits & 0xFFFFFFFFFFFFLL)
  {
    if ((object & 0x1000000000000000LL) != 0)
    {
      _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }

    else
    {
      if ((object & 0x2000000000000000LL) != 0)
      {
        uint64_t v72 = countAndFlagsBits;
        uint64_t v73 = object & 0xFFFFFFFFFFFFFFLL;
      }

      else if ((countAndFlagsBits & 0x1000000000000000LL) == 0)
      {
        _StringObject.sharedUTF8.getter();
      }

      _decodeScalar(_:startingAt:)();
    }

    Unicode.Scalar.properties.getter();
    char v39 = Unicode.Scalar.Properties.isPatternWhitespace.getter();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v31, v27);
    if ((v39 & 1) == 0 && (countAndFlagsBits != 95 || object != 0xE100000000000000LL))
    {
      char v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
      BOOL v42 = countAndFlagsBits == 45 && object == 0xE100000000000000LL;
      if ((v40 & 1) == 0 && !v42 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        MEMORY[0x186E0535C](countAndFlagsBits, object);
      }
    }

    swift_bridgeObjectRelease();
    Swift::String_optional v37 = String.Iterator.next()();
    uint64_t result = v37.value._countAndFlagsBits;
    uint64_t countAndFlagsBits = v37.value._countAndFlagsBits;
    unint64_t object = (unint64_t)v37.value._object;
    if (!v37.value._object) {
      goto LABEL_31;
    }
  }

  __break(1u);
  return result;
}

unint64_t Character.isPatternWhitespace.getter(unint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4, v6);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t result = specialized Collection.first.getter(a1, a2);
  if ((result & 0x100000000LL) != 0)
  {
    __break(1u);
  }

  else
  {
    Unicode.Scalar.properties.getter();
    char v10 = Unicode.Scalar.Properties.isPatternWhitespace.getter();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    return v10 & 1;
  }

  return result;
}

uint64_t specialized Collection.dropFirst(_:)(uint64_t result, uint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
  }

  else
  {
    unint64_t v2 = *(void *)(a2 + 16);
    else {
      unint64_t v3 = *(void *)(a2 + 16);
    }
    if (result) {
      unint64_t v4 = v3;
    }
    else {
      unint64_t v4 = 0LL;
    }
    if (v2 >= v4) {
      return a2;
    }
  }

  __break(1u);
  return result;
}

uint64_t closure #1 in static Parser.classifyGeneralCategory(_:)@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v4 = result;
  if (result == 99 && a2 == 0xE100000000000000LL) {
    goto LABEL_3;
  }
  unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  char v6 = 0;
  if ((result & 1) != 0) {
    goto LABEL_5;
  }
  if (v4 == 0x726568746FLL && a2 == 0xE500000000000000LL)
  {
LABEL_3:
    char v6 = 0;
  }

  else
  {
    unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    char v6 = 0;
    if ((result & 1) != 0) {
      goto LABEL_5;
    }
    if (v4 == 25443 && a2 == 0xE200000000000000LL
      || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
      || v4 == 0x6C6F72746E6F63LL && a2 == 0xE700000000000000LL)
    {
LABEL_14:
      char v6 = 1;
      goto LABEL_5;
    }

    unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    BOOL v8 = v4 == 0x6C72746E63LL && a2 == 0xE500000000000000LL;
    char v6 = 1;
    if ((result & 1) == 0 && !v8)
    {
      unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) != 0) {
        goto LABEL_14;
      }
      if (v4 == 26211 && a2 == 0xE200000000000000LL
        || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
        || v4 == 0x74616D726F66LL && a2 == 0xE600000000000000LL
        || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
        char v6 = 2;
        goto LABEL_5;
      }

      if (v4 == 28259 && a2 == 0xE200000000000000LL
        || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
        || v4 == 0x6E67697373616E75LL && a2 == 0xEA00000000006465LL
        || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
        char v6 = 3;
        goto LABEL_5;
      }

      if (v4 == 28515 && a2 == 0xE200000000000000LL
        || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
        || v4 == 0x7565746176697270LL && a2 == 0xEA00000000006573LL
        || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
        char v6 = 4;
        goto LABEL_5;
      }

      if (v4 == 29539 && a2 == 0xE200000000000000LL
        || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
        || v4 == 0x7461676F72727573LL && a2 == 0xE900000000000065LL
        || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
        char v6 = 5;
        goto LABEL_5;
      }

      if (v4 == 108 && a2 == 0xE100000000000000LL)
      {
LABEL_54:
        char v6 = 6;
        goto LABEL_5;
      }

      unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      BOOL v9 = v4 == 0x72657474656CLL && a2 == 0xE600000000000000LL;
      BOOL v10 = v9;
      char v6 = 6;
      if ((result & 1) == 0 && !v10)
      {
        unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) != 0) {
          goto LABEL_54;
        }
        if (v4 == 25452 && a2 == 0xE200000000000000LL)
        {
LABEL_66:
          char v6 = 7;
          goto LABEL_5;
        }

        unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        BOOL v11 = v4 == 9836 && a2 == 0xE200000000000000LL;
        BOOL v12 = v11;
        char v6 = 7;
        if ((result & 1) == 0 && !v12)
        {
          unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) != 0 || v4 == 0x74656C6465736163LL && a2 == 0xEB00000000726574LL) {
            goto LABEL_66;
          }
          unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) != 0) {
            goto LABEL_66;
          }
          if (v4 == 27756 && a2 == 0xE200000000000000LL
            || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
            || v4 == 0x7361637265776F6CLL && a2 == 0xEF72657474656C65LL
            || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
          {
            char v6 = 8;
            goto LABEL_5;
          }

          if (v4 == 28012 && a2 == 0xE200000000000000LL
            || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
            || v4 == 0x7265696669646F6DLL && a2 == 0xEE0072657474656CLL
            || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
          {
            char v6 = 9;
            goto LABEL_5;
          }

          if (v4 == 28524 && a2 == 0xE200000000000000LL)
          {
LABEL_104:
            char v6 = 10;
            goto LABEL_5;
          }

          unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          BOOL v13 = v4 == 0x74656C726568746FLL && a2 == 0xEB00000000726574LL;
          BOOL v14 = v13;
          char v6 = 10;
          if ((result & 1) == 0 && !v14)
          {
            unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if ((result & 1) != 0) {
              goto LABEL_104;
            }
            if (v4 == 29804 && a2 == 0xE200000000000000LL)
            {
LABEL_116:
              char v6 = 11;
              goto LABEL_5;
            }

            unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
            BOOL v15 = v4 == 0x736163656C746974LL && a2 == 0xEF72657474656C65LL;
            BOOL v16 = v15;
            char v6 = 11;
            if ((result & 1) == 0 && !v16)
            {
              unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
              if ((result & 1) != 0) {
                goto LABEL_116;
              }
              if (v4 == 30060 && a2 == 0xE200000000000000LL)
              {
LABEL_128:
                char v6 = 12;
                goto LABEL_5;
              }

              unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
              BOOL v17 = v4 == 0x7361637265707075LL && a2 == 0xEF72657474656C65LL;
              BOOL v18 = v17;
              char v6 = 12;
              if ((result & 1) == 0 && !v18)
              {
                unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                if ((result & 1) != 0) {
                  goto LABEL_128;
                }
                if (v4 == 109 && a2 == 0xE100000000000000LL
                  || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                  || v4 == 1802658157 && a2 == 0xE400000000000000LL
                  || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                  || v4 == 0x6E696E69626D6F63LL && a2 == 0xED00006B72616D67LL
                  || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                {
                  char v6 = 13;
                  goto LABEL_5;
                }

                if (v4 == 25453 && a2 == 0xE200000000000000LL
                  || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                  || v4 == 0x6D676E6963617073LL && a2 == 0xEB000000006B7261LL
                  || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                {
                  char v6 = 14;
                  goto LABEL_5;
                }

                if (v4 == 25965 && a2 == 0xE200000000000000LL)
                {
LABEL_157:
                  char v6 = 15;
                  goto LABEL_5;
                }

                unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                BOOL v19 = v4 == 0x6E69736F6C636E65LL && a2 == 0xED00006B72616D67LL;
                BOOL v20 = v19;
                char v6 = 15;
                if ((result & 1) == 0 && !v20)
                {
                  unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                  if ((result & 1) != 0) {
                    goto LABEL_157;
                  }
                  if (v4 == 28269 && a2 == 0xE200000000000000LL
                    || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                    || v4 == 0x69636170736E6F6ELL && a2 == 0xEE006B72616D676ELL
                    || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                  {
                    char v6 = 16;
                    goto LABEL_5;
                  }

                  if (v4 == 110 && a2 == 0xE100000000000000LL)
                  {
LABEL_176:
                    char v6 = 17;
                    goto LABEL_5;
                  }

                  unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                  BOOL v21 = v4 == 0x7265626D756ELL && a2 == 0xE600000000000000LL;
                  BOOL v22 = v21;
                  char v6 = 17;
                  if ((result & 1) == 0 && !v22)
                  {
                    unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                    if ((result & 1) != 0) {
                      goto LABEL_176;
                    }
                    if (v4 == 25710 && a2 == 0xE200000000000000LL
                      || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                      || v4 == 0x6E6C616D69636564LL && a2 == 0xED00007265626D75LL)
                    {
LABEL_191:
                      char v6 = 18;
                      goto LABEL_5;
                    }

                    unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                    BOOL v23 = v4 == 0x7469676964LL && a2 == 0xE500000000000000LL;
                    BOOL v24 = v23;
                    char v6 = 18;
                    if ((result & 1) == 0 && !v24)
                    {
                      unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                      if ((result & 1) != 0) {
                        goto LABEL_191;
                      }
                      if (v4 == 27758 && a2 == 0xE200000000000000LL
                        || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                        || v4 == 0x756E72657474656CLL && a2 == 0xEC0000007265626DLL
                        || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                      {
                        char v6 = 19;
                        goto LABEL_5;
                      }

                      if (v4 == 28526 && a2 == 0xE200000000000000LL
                        || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                        || v4 == 0x6D756E726568746FLL && a2 == 0xEB00000000726562LL
                        || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                      {
                        char v6 = 20;
                        goto LABEL_5;
                      }

                      if (v4 == 112 && a2 == 0xE100000000000000LL
                        || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                        || v4 == 0x74617574636E7570LL && a2 == 0xEB000000006E6F69LL)
                      {
LABEL_220:
                        char v6 = 21;
                        goto LABEL_5;
                      }

                      unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                      BOOL v25 = v4 == 0x74636E7570LL && a2 == 0xE500000000000000LL;
                      BOOL v26 = v25;
                      char v6 = 21;
                      if ((result & 1) == 0 && !v26)
                      {
                        unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                        if ((result & 1) != 0) {
                          goto LABEL_220;
                        }
                        if (v4 == 25456 && a2 == 0xE200000000000000LL
                          || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                          || v4 == 0xD000000000000014LL && a2 == 0x8000000181009730LL
                          || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                        {
                          char v6 = 22;
                          goto LABEL_5;
                        }

                        if (v4 == 25712 && a2 == 0xE200000000000000LL
                          || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                          || v4 == 0x636E757068736164LL && a2 == 0xEF6E6F6974617574LL
                          || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                        {
                          char v6 = 23;
                          goto LABEL_5;
                        }

                        if (v4 == 25968 && a2 == 0xE200000000000000LL
                          || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                          || v4 == 0xD000000000000010LL && a2 == 0x8000000181009750LL
                          || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                        {
                          char v6 = 24;
                          goto LABEL_5;
                        }

                        if (v4 == 26224 && a2 == 0xE200000000000000LL)
                        {
LABEL_253:
                          char v6 = 25;
                          goto LABEL_5;
                        }

                        unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                        BOOL v27 = v4 == 0xD000000000000010LL && a2 == 0x8000000181009770LL;
                        BOOL v28 = v27;
                        char v6 = 25;
                        if ((result & 1) == 0 && !v28)
                        {
                          unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                          if ((result & 1) != 0) {
                            goto LABEL_253;
                          }
                          if (v4 == 26992 && a2 == 0xE200000000000000LL
                            || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                            || v4 == 0xD000000000000012LL && a2 == 0x8000000181009790LL
                            || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                          {
                            char v6 = 26;
                            goto LABEL_5;
                          }

                          if (v4 == 28528 && a2 == 0xE200000000000000LL)
                          {
LABEL_272:
                            char v6 = 27;
                            goto LABEL_5;
                          }

                          unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                          BOOL v29 = v4 == 0xD000000000000010LL && a2 == 0x80000001810097B0LL;
                          BOOL v30 = v29;
                          char v6 = 27;
                          if ((result & 1) == 0 && !v30)
                          {
                            unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                            if ((result & 1) != 0) {
                              goto LABEL_272;
                            }
                            if (v4 == 29552 && a2 == 0xE200000000000000LL)
                            {
LABEL_284:
                              char v6 = 28;
                              goto LABEL_5;
                            }

                            unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                            BOOL v31 = v4 == 0x636E75706E65706FLL && a2 == 0xEF6E6F6974617574LL;
                            BOOL v32 = v31;
                            char v6 = 28;
                            if ((result & 1) == 0 && !v32)
                            {
                              unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                              if ((result & 1) != 0) {
                                goto LABEL_284;
                              }
                              if (v4 == 115 && a2 == 0xE100000000000000LL)
                              {
LABEL_296:
                                char v6 = 29;
                                goto LABEL_5;
                              }

                              unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                              BOOL v33 = v4 == 0x6C6F626D7973LL && a2 == 0xE600000000000000LL;
                              BOOL v34 = v33;
                              char v6 = 29;
                              if ((result & 1) == 0 && !v34)
                              {
                                unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                if ((result & 1) != 0) {
                                  goto LABEL_296;
                                }
                                if (v4 == 25459 && a2 == 0xE200000000000000LL
                                  || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                                  || v4 == 0x79636E6572727563LL && a2 == 0xEE006C6F626D7973LL
                                  || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                {
                                  char v6 = 30;
                                  goto LABEL_5;
                                }

                                if (v4 == 27507 && a2 == 0xE200000000000000LL)
                                {
LABEL_315:
                                  char v6 = 31;
                                  goto LABEL_5;
                                }

                                unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                BOOL v35 = v4 == 0x7265696669646F6DLL && a2 == 0xEE006C6F626D7973LL;
                                BOOL v36 = v35;
                                char v6 = 31;
                                if ((result & 1) == 0 && !v36)
                                {
                                  unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                  if ((result & 1) != 0) {
                                    goto LABEL_315;
                                  }
                                  if (v4 == 28019 && a2 == 0xE200000000000000LL
                                    || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                                    || v4 == 0x626D79736874616DLL && a2 == 0xEA00000000006C6FLL
                                    || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                  {
                                    char v6 = 32;
                                    goto LABEL_5;
                                  }

                                  if (v4 == 28531 && a2 == 0xE200000000000000LL
                                    || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                                    || v4 == 0x6D7973726568746FLL && a2 == 0xEB000000006C6F62LL
                                    || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                  {
                                    char v6 = 33;
                                    goto LABEL_5;
                                  }

                                  if (v4 == 122 && a2 == 0xE100000000000000LL
                                    || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                                    || v4 == 0x6F74617261706573LL && a2 == 0xE900000000000072LL
                                    || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                  {
                                    char v6 = 34;
                                    goto LABEL_5;
                                  }

                                  if (v4 == 27770 && a2 == 0xE200000000000000LL
                                    || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                                    || v4 == 0x61706573656E696CLL && a2 == 0xED0000726F746172LL
                                    || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                  {
                                    char v6 = 35;
                                    goto LABEL_5;
                                  }

                                  if (v4 == 28794 && a2 == 0xE200000000000000LL)
                                  {
LABEL_355:
                                    char v6 = 36;
                                    goto LABEL_5;
                                  }

                                  unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                  BOOL v38 = v4 == 0xD000000000000012LL && a2 == 0x80000001810097D0LL;
                                  char v6 = 36;
                                  if ((result & 1) == 0 && !v38)
                                  {
                                    unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                    if ((result & 1) != 0) {
                                      goto LABEL_355;
                                    }
                                    if (v4 == 29562 && a2 == 0xE200000000000000LL
                                      || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                    {
                                      char v6 = 37;
                                    }

                                    else
                                    {
                                      char v6 = 37;
                                      if (v4 != 0x7065736563617073LL || a2 != 0xEE00726F74617261LL)
                                      {
                                        unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                        if ((result & 1) != 0) {
                                          char v6 = 37;
                                        }
                                        else {
                                          char v6 = 38;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

LABEL_5:
  *a3 = v6;
  return result;
}

  *a3 = v6;
  return result;
}

  if ((*(void *)(v3 + 24) >> 1) - *(void *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  unint64_t result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    unint64_t result = swift_bridgeObjectRelease();
    uint64_t *v1 = v3;
    return result;
  }

  uint64_t v7 = *(void *)(v3 + 16);
  BOOL v8 = __OFADD__(v7, v2);
  BOOL v9 = v7 + v2;
  if (!v8)
  {
    *(void *)(v3 + 16) = v9;
    goto LABEL_14;
  }

  uint64_t v7 = *(void *)(v2 + 16);
  if (v7)
  {
    BOOL v8 = 0LL;
    BOOL v9 = (_OWORD *)(v2 + 40);
    while (v8 < *(void *)(v2 + 16))
    {
      ++v8;
      v11[0] = *((_BYTE *)v9 - 8);
      BOOL v10 = *v9;
      BOOL v9 = (_OWORD *)((char *)v9 + 24);
      BOOL v12 = v10;
      RegexValidator.validateMatchingOption(_:)((uint64_t)v11);
      if (v7 == v8) {
        return;
      }
    }

uint64_t closure #1 in static Parser.classifyNumericType(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v4 = a1 == 0x6C616D69636564LL && a2 == 0xE700000000000000LL;
  if (v4 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    uint64_t v7 = (unsigned int *)MEMORY[0x18961A9D8];
  }

  else if (a1 == 0x7469676964LL && a2 == 0xE500000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    uint64_t v7 = (unsigned int *)MEMORY[0x18961A9D0];
  }

  else
  {
    if ((a1 != 0x636972656D756ELL || a2 != 0xE700000000000000LL)
      && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v14 = type metadata accessor for Unicode.NumericType();
      BOOL v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL);
      uint64_t v12 = a3;
      uint64_t v13 = 1LL;
      return v11(v12, v13, 1LL, v14);
    }

    uint64_t v7 = (unsigned int *)MEMORY[0x18961A9E0];
  }

  uint64_t v8 = *v7;
  uint64_t v9 = type metadata accessor for Unicode.NumericType();
  uint64_t v10 = *(void *)(v9 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 104))(a3, v8, v9);
  BOOL v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
  uint64_t v12 = a3;
  uint64_t v13 = 0LL;
  uint64_t v14 = v9;
  return v11(v12, v13, 1LL, v14);
}

uint64_t closure #1 in static Parser.classifyBoolProperty(_:)@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  if (result == 2019911777 && a2 == 0xE400000000000000LL) {
    goto LABEL_8;
  }
  uint64_t v6 = result;
  unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  char v7 = 0;
  if ((result & 1) == 0)
  {
    if (v6 == 0x7865686969637361LL && a2 == 0xED00007469676964LL)
    {
LABEL_8:
      char v7 = 0;
      goto LABEL_9;
    }

    unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    char v7 = 0;
    if ((result & 1) != 0) {
      goto LABEL_9;
    }
    if (v6 == 0x6168706C61LL && a2 == 0xE500000000000000LL
      || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
      || v6 == 0x7465626168706C61LL && a2 == 0xEA00000000006369LL
      || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
      char v7 = 1;
      goto LABEL_9;
    }

    if (v6 == 0x6369646962LL && a2 == 0xE500000000000000LL
      || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
      || v6 == 0x746E6F6369646962LL && a2 == 0xEB000000006C6F72LL
      || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
      char v7 = 2;
      goto LABEL_9;
    }

    if (v6 == 0x6D69646962LL && a2 == 0xE500000000000000LL
      || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
      || v6 == 0x7272696D69646962LL && a2 == 0xEC0000006465726FLL
      || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
      char v7 = 3;
      goto LABEL_9;
    }

    if (v6 == 0x6465736163LL && a2 == 0xE500000000000000LL
      || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
      char v7 = 4;
      goto LABEL_9;
    }

    if (v6 == 25955 && a2 == 0xE200000000000000LL
      || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
      || v6 == 0xD000000000000014LL && a2 == 0x800000018100AA70LL
      || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
      char v7 = 5;
      goto LABEL_9;
    }

    if (v6 == 26979 && a2 == 0xE200000000000000LL
      || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
      || v6 == 0x6F6E676965736163LL && a2 == 0xED0000656C626172LL
      || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
      char v7 = 6;
      goto LABEL_9;
    }

    if (v6 == 0x7865706D6F63LL && a2 == 0xE600000000000000LL
      || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
      || (unint64_t result = 0xD000000000000018LL, v6 == 0xD000000000000018LL) && a2 == 0x800000018100AA90LL
      || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
      char v7 = 24;
      goto LABEL_9;
    }

    if (v6 == 1717794659 && a2 == 0xE400000000000000LL
      || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
      || v6 == 0xD000000000000015LL && a2 == 0x800000018100AAB0LL
      || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
      char v7 = 7;
      goto LABEL_9;
    }

    if (v6 == 1835235171 && a2 == 0xE400000000000000LL)
    {
LABEL_75:
      char v7 = 8;
      goto LABEL_9;
    }

    unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    BOOL v8 = v6 == 0xD000000000000015LL && a2 == 0x800000018100AAD0LL;
    BOOL v9 = v8;
    char v7 = 8;
    if ((result & 1) == 0 && !v9)
    {
      unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) != 0) {
        goto LABEL_75;
      }
      if (v6 == 0x66636B7763LL && a2 == 0xE500000000000000LL
        || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
        || v6 == 0xD000000000000019LL && a2 == 0x800000018100AAF0LL
        || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
        char v7 = 9;
        goto LABEL_9;
      }

      if (v6 == 7108451 && a2 == 0xE300000000000000LL)
      {
LABEL_94:
        char v7 = 10;
        goto LABEL_9;
      }

      unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      BOOL v10 = v6 == 0xD000000000000015LL && a2 == 0x800000018100AB10LL;
      BOOL v11 = v10;
      char v7 = 10;
      if ((result & 1) == 0 && !v11)
      {
        unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) != 0) {
          goto LABEL_94;
        }
        if (v6 == 7632739 && a2 == 0xE300000000000000LL)
        {
LABEL_106:
          char v7 = 11;
          goto LABEL_9;
        }

        unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        BOOL v12 = v6 == 0xD000000000000015LL && a2 == 0x800000018100AB30LL;
        BOOL v13 = v12;
        char v7 = 11;
        if ((result & 1) == 0 && !v13)
        {
          unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) != 0) {
            goto LABEL_106;
          }
          unint64_t result = 7698275LL;
          if (v6 == 7698275 && a2 == 0xE300000000000000LL)
          {
LABEL_118:
            char v7 = 12;
            goto LABEL_9;
          }

          unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          BOOL v14 = v6 == 0xD000000000000015LL && a2 == 0x800000018100AB50LL;
          BOOL v15 = v14;
          char v7 = 12;
          if ((result & 1) == 0 && !v15)
          {
            unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if ((result & 1) != 0) {
              goto LABEL_118;
            }
            if (v6 == 1752392036 && a2 == 0xE400000000000000LL
              || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
            {
              char v7 = 13;
              goto LABEL_9;
            }

            if (v6 == 7365988 && a2 == 0xE300000000000000LL
              || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
              || v6 == 0x7461636572706564LL && a2 == 0xEA00000000006465LL
              || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
            {
              char v7 = 14;
              goto LABEL_9;
            }

            if (v6 == 26980 && a2 == 0xE200000000000000LL)
            {
LABEL_141:
              char v7 = 15;
              goto LABEL_9;
            }

            unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
            BOOL v16 = v6 == 0xD000000000000019LL && a2 == 0x800000018100AB70LL;
            BOOL v17 = v16;
            char v7 = 15;
            if ((result & 1) == 0 && !v17)
            {
              unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
              if ((result & 1) != 0) {
                goto LABEL_141;
              }
              if (v6 == 6383972 && a2 == 0xE300000000000000LL
                || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                || v6 == 0x6974697263616964LL && a2 == 0xE900000000000063LL
                || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
              {
                char v7 = 16;
                goto LABEL_9;
              }

              if (v6 == 0x6573616265LL && a2 == 0xE500000000000000LL
                || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                || v6 == 0xD000000000000011LL && a2 == 0x800000018100AB90LL
                || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
              {
                char v7 = 17;
                goto LABEL_9;
              }

              if (v6 == 0x706D6F6365LL && a2 == 0xE500000000000000LL
                || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                || v6 == 0x6D6F63696A6F6D65LL && a2 == 0xEE00746E656E6F70LL
                || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
              {
                char v7 = 18;
                goto LABEL_9;
              }

              if (v6 == 1685024101 && a2 == 0xE400000000000000LL
                || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                || v6 == 0x646F6D696A6F6D65LL && a2 == 0xED00007265696669LL
                || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
              {
                char v7 = 19;
                goto LABEL_9;
              }

              if (v6 == 0x696A6F6D65LL && a2 == 0xE500000000000000LL
                || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
              {
                char v7 = 20;
                goto LABEL_9;
              }

              if (v6 == 0x7365727065LL && a2 == 0xE500000000000000LL)
              {
LABEL_185:
                char v7 = 21;
                goto LABEL_9;
              }

              unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
              BOOL v18 = v6 == 0xD000000000000011LL && a2 == 0x800000018100ABB0LL;
              BOOL v19 = v18;
              char v7 = 21;
              if ((result & 1) == 0 && !v19)
              {
                unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                if ((result & 1) != 0) {
                  goto LABEL_185;
                }
                unint64_t result = 7632997LL;
                if (v6 == 7632997 && a2 == 0xE300000000000000LL
                  || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                  || v6 == 0x7265646E65747865LL && a2 == 0xE800000000000000LL
                  || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                {
                  char v7 = 22;
                  goto LABEL_9;
                }

                if (v6 == 0x74636970747865LL && a2 == 0xE700000000000000LL)
                {
LABEL_204:
                  char v7 = 23;
                  goto LABEL_9;
                }

                unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                BOOL v20 = v6 == 0xD000000000000014LL && a2 == 0x800000018100ABD0LL;
                BOOL v21 = v20;
                char v7 = 23;
                if ((result & 1) == 0 && !v21)
                {
                  unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                  if ((result & 1) != 0) {
                    goto LABEL_204;
                  }
                  if (v6 == 0x657361627267LL && a2 == 0xE600000000000000LL
                    || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                    || v6 == 0x656D656870617267LL && a2 == 0xEC00000065736162LL
                    || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                  {
                    char v7 = 25;
                    goto LABEL_9;
                  }

                  if (v6 == 0x7478657267LL && a2 == 0xE500000000000000LL)
                  {
LABEL_223:
                    char v7 = 26;
                    goto LABEL_9;
                  }

                  unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                  BOOL v22 = v6 == 0x656D656870617267LL && a2 == 0xEE00646E65747865LL;
                  BOOL v23 = v22;
                  char v7 = 26;
                  if ((result & 1) == 0 && !v23)
                  {
                    unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                    if ((result & 1) != 0) {
                      goto LABEL_223;
                    }
                    if (v6 == 0x6B6E696C7267LL && a2 == 0xE600000000000000LL)
                    {
LABEL_235:
                      char v7 = 27;
                      goto LABEL_9;
                    }

                    unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                    BOOL v24 = v6 == 0x656D656870617267LL && a2 == 0xEC0000006B6E696CLL;
                    BOOL v25 = v24;
                    char v7 = 27;
                    if ((result & 1) == 0 && !v25)
                    {
                      unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                      if ((result & 1) != 0) {
                        goto LABEL_235;
                      }
                      if (v6 == 7890280 && a2 == 0xE300000000000000LL)
                      {
LABEL_247:
                        char v7 = 28;
                        goto LABEL_9;
                      }

                      unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                      BOOL v26 = v6 == 0x7469676964786568LL && a2 == 0xE800000000000000LL;
                      BOOL v27 = v26;
                      char v7 = 28;
                      if ((result & 1) == 0 && !v27)
                      {
                        unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                        if ((result & 1) != 0) {
                          goto LABEL_247;
                        }
                        if (v6 == 0x6E6568707968LL && a2 == 0xE600000000000000LL
                          || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                        {
                          char v7 = 29;
                          goto LABEL_9;
                        }

                        if (v6 == 6513769 && a2 == 0xE300000000000000LL
                          || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                          || v6 == 0x6E69746E6F636469LL && a2 == 0xEA00000000006575LL
                          || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                        {
                          char v7 = 30;
                          goto LABEL_9;
                        }

                        if (v6 == 1868915817 && a2 == 0xE400000000000000LL
                          || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                          || v6 == 0x706172676F656469LL && a2 == 0xEB00000000636968LL
                          || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                        {
                          char v7 = 31;
                          goto LABEL_9;
                        }

                        if (v6 == 7562345 && a2 == 0xE300000000000000LL)
                        {
LABEL_277:
                          char v7 = 32;
                          goto LABEL_9;
                        }

                        unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                        BOOL v28 = v6 == 0x74726174736469LL && a2 == 0xE700000000000000LL;
                        BOOL v29 = v28;
                        char v7 = 32;
                        if ((result & 1) == 0 && !v29)
                        {
                          unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                          if ((result & 1) != 0) {
                            goto LABEL_277;
                          }
                          if (v6 == 1651729513 && a2 == 0xE400000000000000LL)
                          {
LABEL_289:
                            char v7 = 33;
                            goto LABEL_9;
                          }

                          unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                          BOOL v30 = v6 == 0xD000000000000011LL && a2 == 0x800000018100ABF0LL;
                          BOOL v31 = v30;
                          char v7 = 33;
                          if ((result & 1) == 0 && !v31)
                          {
                            unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                            if ((result & 1) != 0) {
                              goto LABEL_289;
                            }
                            if (v6 == 1953719401 && a2 == 0xE400000000000000LL
                              || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                              || (unint64_t result = 0xD000000000000012LL, v6 == 0xD000000000000012LL)
                              && a2 == 0x800000018100AC10LL
                              || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                            {
                              char v7 = 34;
                              goto LABEL_9;
                            }

                            if (v6 == 0x636E696F6ALL && a2 == 0xE500000000000000LL)
                            {
LABEL_308:
                              char v7 = 35;
                              goto LABEL_9;
                            }

                            unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                            BOOL v32 = v6 == 0x746E6F636E696F6ALL && a2 == 0xEB000000006C6F72LL;
                            BOOL v33 = v32;
                            char v7 = 35;
                            if ((result & 1) == 0 && !v33)
                            {
                              unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                              if ((result & 1) != 0) {
                                goto LABEL_308;
                              }
                              if (v6 == 6647660 && a2 == 0xE300000000000000LL)
                              {
LABEL_320:
                                char v7 = 36;
                                goto LABEL_9;
                              }

                              unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                              BOOL v34 = v6 == 0xD000000000000015LL && a2 == 0x800000018100AC30LL;
                              BOOL v35 = v34;
                              char v7 = 36;
                              if ((result & 1) == 0 && !v35)
                              {
                                unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                if ((result & 1) != 0) {
                                  goto LABEL_320;
                                }
                                if (v6 == 0x7265776F6CLL && a2 == 0xE500000000000000LL
                                  || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                                  || v6 == 0x7361637265776F6CLL && a2 == 0xE900000000000065LL
                                  || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                {
                                  char v7 = 37;
                                  goto LABEL_9;
                                }

                                if (v6 == 1752457581 && a2 == 0xE400000000000000LL
                                  || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                {
                                  char v7 = 38;
                                  goto LABEL_9;
                                }

                                if (v6 == 0x726168636ELL && a2 == 0xE500000000000000LL)
                                {
LABEL_343:
                                  char v7 = 39;
                                  goto LABEL_9;
                                }

                                unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                BOOL v36 = v6 == 0xD000000000000015LL && a2 == 0x800000018100AC50LL;
                                BOOL v37 = v36;
                                char v7 = 39;
                                if ((result & 1) == 0 && !v37)
                                {
                                  unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                  if ((result & 1) != 0) {
                                    goto LABEL_343;
                                  }
                                  if (v6 == 0x6168706C616FLL && a2 == 0xE600000000000000LL)
                                  {
                                    char v7 = 40;
                                    goto LABEL_9;
                                  }

                                  unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                  if ((result & 1) != 0
                                    || v6 == 0x706C61726568746FLL && a2 == 0xEF63697465626168LL
                                    || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                  {
                                    char v7 = 40;
                                    goto LABEL_9;
                                  }

                                  if (v6 == 6906991 && a2 == 0xE300000000000000LL
                                    || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                                    || (unint64_t result = 0xD00000000000001ELL, v6 == 0xD00000000000001ELL)
                                    && a2 == 0x800000018100AC70LL
                                    || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                  {
                                    char v7 = 41;
                                    goto LABEL_9;
                                  }

                                  if (v6 == 0x74786572676FLL && a2 == 0xE600000000000000LL
                                    || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                                    || v6 == 0xD000000000000013LL && a2 == 0x800000018100AC90LL
                                    || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                  {
                                    char v7 = 42;
                                    goto LABEL_9;
                                  }

                                  if (v6 == 1667524975 && a2 == 0xE400000000000000LL
                                    || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                                    || v6 == 0x636469726568746FLL && a2 == 0xEF65756E69746E6FLL
                                    || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                  {
                                    char v7 = 43;
                                    goto LABEL_9;
                                  }

                                  if (v6 == 1935960431 && a2 == 0xE400000000000000LL
                                    || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                                    || v6 == 0x736469726568746FLL && a2 == 0xEC00000074726174LL
                                    || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                  {
                                    char v7 = 44;
                                    goto LABEL_9;
                                  }

                                  if (v6 == 0x7265776F6C6FLL && a2 == 0xE600000000000000LL
                                    || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                                    || v6 == 0x776F6C726568746FLL && a2 == 0xEE00657361637265LL
                                    || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                  {
                                    char v7 = 45;
                                    goto LABEL_9;
                                  }

                                  if (v6 == 0x6874616D6FLL && a2 == 0xE500000000000000LL
                                    || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                                    || v6 == 0x74616D726568746FLL && a2 == 0xE900000000000068LL
                                    || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                  {
                                    char v7 = 46;
                                    goto LABEL_9;
                                  }

                                  if (v6 == 0x72657070756FLL && a2 == 0xE600000000000000LL)
                                  {
LABEL_405:
                                    char v7 = 47;
                                    goto LABEL_9;
                                  }

                                  unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                  BOOL v38 = v6 == 0x707075726568746FLL && a2 == 0xEE00657361637265LL;
                                  BOOL v39 = v38;
                                  char v7 = 47;
                                  if ((result & 1) == 0 && !v39)
                                  {
                                    unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                    if ((result & 1) != 0) {
                                      goto LABEL_405;
                                    }
                                    if (v6 == 0x6E7973746170LL && a2 == 0xE600000000000000LL
                                      || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                                      || v6 == 0x736E726574746170LL && a2 == 0xED00007861746E79LL
                                      || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                    {
                                      char v7 = 48;
                                      goto LABEL_9;
                                    }

                                    if (v6 == 0x7377746170LL && a2 == 0xE500000000000000LL)
                                    {
LABEL_424:
                                      char v7 = 49;
                                      goto LABEL_9;
                                    }

                                    unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                    BOOL v40 = v6 == 0xD000000000000011LL && a2 == 0x800000018100ACB0LL;
                                    BOOL v41 = v40;
                                    char v7 = 49;
                                    if ((result & 1) == 0 && !v41)
                                    {
                                      unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                      if ((result & 1) != 0) {
                                        goto LABEL_424;
                                      }
                                      if (v6 == 7168880 && a2 == 0xE300000000000000LL
                                        || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                                        || (unint64_t result = 0xD00000000000001ALL, v6 == 0xD00000000000001ALL)
                                        && a2 == 0x800000018100ACD0LL
                                        || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                      {
                                        char v7 = 50;
                                        goto LABEL_9;
                                      }

                                      if (v6 == 0x6B72616D71LL && a2 == 0xE500000000000000LL
                                        || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                                        || v6 == 0x6F697461746F7571LL && a2 == 0xED00006B72616D6ELL
                                        || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                      {
                                        char v7 = 51;
                                        goto LABEL_9;
                                      }

                                      if (v6 == 0x6C616369646172LL && a2 == 0xE700000000000000LL
                                        || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                      {
                                        char v7 = 52;
                                        goto LABEL_9;
                                      }

                                      if (v6 == 26994 && a2 == 0xE200000000000000LL)
                                      {
LABEL_454:
                                        char v7 = 53;
                                        goto LABEL_9;
                                      }

                                      unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                      BOOL v42 = v6 == 0xD000000000000011LL && a2 == 0x800000018100ACF0LL;
                                      BOOL v43 = v42;
                                      char v7 = 53;
                                      if ((result & 1) == 0 && !v43)
                                      {
                                        unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                        if ((result & 1) != 0) {
                                          goto LABEL_454;
                                        }
                                        if (v6 == 25715 && a2 == 0xE200000000000000LL)
                                        {
LABEL_466:
                                          char v7 = 54;
                                          goto LABEL_9;
                                        }

                                        unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                        BOOL v44 = v6 == 0x74746F6474666F73LL && a2 == 0xEA00000000006465LL;
                                        BOOL v45 = v44;
                                        char v7 = 54;
                                        if ((result & 1) == 0 && !v45)
                                        {
                                          unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                          if ((result & 1) != 0) {
                                            goto LABEL_466;
                                          }
                                          if (v6 == 0x6D72657473LL && a2 == 0xE500000000000000LL
                                            || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                                            || v6 == 0xD000000000000010LL && a2 == 0x800000018100AD10LL
                                            || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                          {
                                            char v7 = 55;
                                            goto LABEL_9;
                                          }

                                          if (v6 == 1836213620 && a2 == 0xE400000000000000LL)
                                          {
LABEL_485:
                                            char v7 = 56;
                                            goto LABEL_9;
                                          }

                                          unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                          BOOL v46 = v6 == 0xD000000000000013LL && a2 == 0x800000018100AD30LL;
                                          BOOL v47 = v46;
                                          char v7 = 56;
                                          if ((result & 1) == 0 && !v47)
                                          {
                                            unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                            if ((result & 1) != 0) {
                                              goto LABEL_485;
                                            }
                                            if (v6 == 0x6F65646975LL && a2 == 0xE500000000000000LL)
                                            {
LABEL_497:
                                              char v7 = 57;
                                              goto LABEL_9;
                                            }

                                            unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                            BOOL v48 = v6 == 0xD000000000000010LL && a2 == 0x800000018100AD50LL;
                                            BOOL v49 = v48;
                                            char v7 = 57;
                                            if ((result & 1) == 0 && !v49)
                                            {
                                              unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                              if ((result & 1) != 0) {
                                                goto LABEL_497;
                                              }
                                              if (v6 == 0x7265707075LL && a2 == 0xE500000000000000LL)
                                              {
LABEL_509:
                                                char v7 = 58;
                                                goto LABEL_9;
                                              }

                                              unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                              BOOL v50 = v6 == 0x7361637265707075LL && a2 == 0xE900000000000065LL;
                                              BOOL v51 = v50;
                                              char v7 = 58;
                                              if ((result & 1) == 0 && !v51)
                                              {
                                                unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                if ((result & 1) != 0) {
                                                  goto LABEL_509;
                                                }
                                                if (v6 == 29558 && a2 == 0xE200000000000000LL)
                                                {
LABEL_521:
                                                  char v7 = 59;
                                                  goto LABEL_9;
                                                }

                                                unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                BOOL v52 = v6 == 0xD000000000000011LL && a2 == 0x800000018100AD70LL;
                                                BOOL v53 = v52;
                                                char v7 = 59;
                                                if ((result & 1) == 0 && !v53)
                                                {
                                                  unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                  if ((result & 1) != 0) {
                                                    goto LABEL_521;
                                                  }
                                                  if (v6 == 0x656361707377LL && a2 == 0xE600000000000000LL
                                                    || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                        (result & 1) != 0)
                                                    || v6 == 0x6170736574696877LL && a2 == 0xEA00000000006563LL)
                                                  {
LABEL_536:
                                                    char v7 = 60;
                                                    goto LABEL_9;
                                                  }

                                                  unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                  BOOL v54 = v6 == 0x6563617073LL && a2 == 0xE500000000000000LL;
                                                  BOOL v55 = v54;
                                                  char v7 = 60;
                                                  if ((result & 1) == 0 && !v55)
                                                  {
                                                    unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                    if ((result & 1) != 0) {
                                                      goto LABEL_536;
                                                    }
                                                    unint64_t result = 1667524984LL;
                                                    if (v6 == 1667524984 && a2 == 0xE400000000000000LL
                                                      || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                          (result & 1) != 0)
                                                      || v6 == 0x69746E6F63646978LL && a2 == 0xEB0000000065756ELL
                                                      || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                          (result & 1) != 0))
                                                    {
                                                      char v7 = 61;
                                                      goto LABEL_9;
                                                    }

                                                    unint64_t result = 1935960440LL;
                                                    if (v6 == 1935960440 && a2 == 0xE400000000000000LL)
                                                    {
LABEL_555:
                                                      char v7 = 62;
                                                      goto LABEL_9;
                                                    }

                                                    unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                    BOOL v56 = v6 == 0x7472617473646978LL && a2 == 0xE800000000000000LL;
                                                    BOOL v57 = v56;
                                                    char v7 = 62;
                                                    if ((result & 1) == 0 && !v57)
                                                    {
                                                      unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                      if ((result & 1) != 0) {
                                                        goto LABEL_555;
                                                      }
                                                      if (v6 == 0x63666E6F78LL && a2 == 0xE500000000000000LL
                                                        || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                            (result & 1) != 0)
                                                        || v6 == 0x6F73646E61707865LL && a2 == 0xEC00000063666E6ELL
                                                        || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                            (result & 1) != 0))
                                                      {
                                                        char v7 = 63;
                                                        goto LABEL_9;
                                                      }

                                                      if (v6 == 0x64666E6F78LL && a2 == 0xE500000000000000LL)
                                                      {
LABEL_574:
                                                        char v7 = 64;
                                                        goto LABEL_9;
                                                      }

                                                      unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                      BOOL v58 = v6 == 0x6F73646E61707865LL && a2 == 0xEC00000064666E6ELL;
                                                      BOOL v59 = v58;
                                                      char v7 = 64;
                                                      if ((result & 1) == 0 && !v59)
                                                      {
                                                        unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                        if ((result & 1) != 0) {
                                                          goto LABEL_574;
                                                        }
                                                        if (v6 == 0x636B666E6F78LL && a2 == 0xE600000000000000LL)
                                                        {
LABEL_586:
                                                          char v7 = 65;
                                                          goto LABEL_9;
                                                        }

                                                        unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                        BOOL v61 = v6 == 0x6F73646E61707865LL && a2 == 0xED0000636B666E6ELL;
                                                        char v7 = 65;
                                                        if ((result & 1) == 0 && !v61)
                                                        {
                                                          unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                          if ((result & 1) != 0) {
                                                            goto LABEL_586;
                                                          }
                                                          if (v6 == 0x646B666E6F78LL && a2 == 0xE600000000000000LL)
                                                          {
                                                            char v7 = 66;
                                                          }

                                                          else
                                                          {
                                                            unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                            BOOL v63 = v6 == 0x6F73646E61707865LL
                                                               && a2 == 0xED0000646B666E6ELL;
                                                            char v7 = 66;
                                                            if ((result & 1) == 0 && !v63)
                                                            {
                                                              unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                              if ((result & 1) != 0) {
                                                                char v7 = 66;
                                                              }
                                                              else {
                                                                char v7 = 67;
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

LABEL_9:
  *a3 = v7;
  return result;
}

  *a3 = v8;
  return result;
}

      BOOL v25 = v16;
      BOOL v26 = v15;
      BOOL v27 = v17;
      BOOL v28 = v13;
      Parser.classifyCharacterPropertyValueOnly(_:)(&v25, v7);
      goto LABEL_10;
    }
  }

  else if ((specialized Parser.tryEat<A>(sequence:)(23866LL, 0xE200000000000000LL) & 1) != 0)
  {
    BOOL v23 = v9;
    BOOL v16 = v11;
    BOOL v15 = v10;
    BOOL v17 = v12;
    goto LABEL_9;
  }

  BOOL v21 = type metadata accessor for AST.Atom.CharacterProperty(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56LL))(a2, 1LL, 1LL, v21);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

  BOOL v10 = Substring.subscript.getter();
  BOOL v12 = v11;
  swift_bridgeObjectRelease();
  BOOL v13 = v10 >> 14;
  BOOL v14 = v12 >> 14;
  if (v10 >> 14 == v12 >> 14) {
    goto LABEL_23;
  }
  if (Substring.subscript.getter() == 123 && v15 == 0xE100000000000000LL)
  {
    swift_bridgeObjectRelease();
  }

  else
  {
    BOOL v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v16 & 1) == 0) {
      goto LABEL_23;
    }
  }

  unint64_t result = Substring.index(after:)();
  BOOL v17 = result >> 14;
  if (result >> 14 == v14)
  {
LABEL_22:
    if (v14 < v13) {
      goto LABEL_27;
    }
    goto LABEL_23;
  }

  while (1)
  {
    if (Substring.subscript.getter() == 123 && v19 == 0xE100000000000000LL)
    {
      swift_bridgeObjectRelease();
      goto LABEL_17;
    }

    BOOL v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
    unint64_t result = swift_bridgeObjectRelease();
    if ((v18 & 1) == 0) {
      break;
    }
LABEL_17:
    unint64_t result = Substring.index(after:)();
    BOOL v17 = result >> 14;
    if (result >> 14 == v14)
    {
      BOOL v13 = v10 >> 14;
      goto LABEL_22;
    }
  }

  if (v17 < v10 >> 14)
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }

uint64_t closure #1 in static Parser.classifyCharacterPropertyBoolValue(_:)@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v4 = result;
  if (result == 116 && a2 == 0xE100000000000000LL) {
    goto LABEL_6;
  }
  unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if ((result & 1) != 0 || v4 == 1702195828 && a2 == 0xE400000000000000LL) {
    goto LABEL_6;
  }
  unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL v8 = v4 == 121 && a2 == 0xE100000000000000LL;
  char v6 = 1;
  if ((result & 1) == 0 && !v8)
  {
    unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if ((result & 1) != 0
      || v4 == 7562617 && a2 == 0xE300000000000000LL
      || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_6:
      char v6 = 1;
      goto LABEL_7;
    }

    if (v4 == 102 && a2 == 0xE100000000000000LL) {
      goto LABEL_22;
    }
    unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    char v6 = 0;
    if ((result & 1) != 0) {
      goto LABEL_7;
    }
    if (v4 == 0x65736C6166LL && a2 == 0xE500000000000000LL) {
      goto LABEL_22;
    }
    unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    char v6 = 0;
    BOOL v10 = v4 == 110 && a2 == 0xE100000000000000LL;
    if ((result & 1) == 0 && !v10)
    {
      unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      char v6 = 0;
      if ((result & 1) == 0)
      {
        if (v4 != 28526 || a2 != 0xE200000000000000LL)
        {
          unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) != 0) {
            char v6 = 0;
          }
          else {
            char v6 = 2;
          }
          goto LABEL_7;
        }

LABEL_22:
        char v6 = 0;
      }
    }
  }

    BOOL v15 = v11 >> 16;
    if ((a4 & 0x2000000000000000LL) != 0)
    {
      BOOL v21 = a3;
      BOOL v22 = v23;
      BOOL v17 = *((unsigned __int8 *)&v21 + v15);
    }

    else
    {
      BOOL v16 = v20;
      if ((a3 & 0x1000000000000000LL) == 0) {
        BOOL v16 = _StringObject.sharedUTF8.getter();
      }
      BOOL v17 = *(unsigned __int8 *)(v16 + v15);
    }

    BOOL v18 = (char)v17;
    BOOL v19 = __clz(v17 ^ 0xFF) - 24;
    if (v18 >= 0) {
      LOBYTE(v19) = 1;
    }
    BOOL v11 = ((v15 + v19) << 16) | 5;
    if (v14 == 10) {
      goto LABEL_37;
    }
LABEL_36:
    if (v14 == 13) {
      goto LABEL_37;
    }
  }

  if (v10 > v11 >> 16)
  {
LABEL_21:
    if ((a4 & 0x1000000000000000LL) != 0) {
      goto LABEL_35;
    }
    goto LABEL_22;
  }

  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

      swift_bridgeObjectRelease();
      specialized Parser.tryEatPrefix(maxLength:_:)( 2LL,  0,  v1,  (uint64_t (*)(uint64_t, void, void *))specialized Source.peekPrefix(maxLength:_:),  &v100);
      BOOL v27 = v101;
      if ((void)v101)
      {
        BOOL v26 = v100;
        goto LABEL_24;
      }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t result = swift_bridgeObjectRelease();
  *(_BYTE *)a1 = v79;
  a1[1] = v8;
  a1[2] = v80;
  a1[3] = v78;
  a1[4] = v13;
LABEL_55:
  a1[5] = v77;
  a1[6] = v76;
  return result;
}

uint64_t Unicode.POSIXProperty.init(rawValue:)@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  unint64_t object = string._object;
  v3._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v3._unint64_t object = object;
  unint64_t v5 = _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of Unicode.POSIXProperty.init(rawValue:),  v3);
  uint64_t result = swift_bridgeObjectRelease();
  char v7 = 6;
  if (v5 < 6) {
    char v7 = v5;
  }
  *a2 = v7;
  return result;
}

uint64_t closure #1 in static Parser.classifyScriptProperty(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t result = 1835820129LL;
  if (a1 == 1835820129 && a2 == 0xE400000000000000LL) {
    goto LABEL_8;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  char v8 = 0;
  if ((result & 1) == 0)
  {
    if (a1 == 0x6D616C6461LL && a2 == 0xE500000000000000LL)
    {
LABEL_8:
      char v8 = 0;
      goto LABEL_9;
    }

    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    char v8 = 0;
    if ((result & 1) != 0) {
      goto LABEL_9;
    }
    if (a1 == 1651009377 && a2 == 0xE400000000000000LL
      || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
      || a1 == 0xD000000000000011LL && a2 == 0x80000001810095F0LL
      || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
      char v8 = 19;
      goto LABEL_9;
    }

    if (a1 == 1836017761 && a2 == 0xE400000000000000LL
      || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
      char v8 = 1;
      goto LABEL_9;
    }

    if (a1 == 1650553441 && a2 == 0xE400000000000000LL
      || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
      || a1 == 0x636962617261LL && a2 == 0xE600000000000000LL
      || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
      char v8 = 3;
      goto LABEL_9;
    }

    if (a1 == 1768780385 && a2 == 0xE400000000000000LL
      || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
      || a1 == 0x6C61697265706D69LL && a2 == 0xEF6369616D617261LL
      || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
      char v8 = 54;
      goto LABEL_9;
    }

    uint64_t result = 1852666465LL;
    if (a1 == 1852666465 && a2 == 0xE400000000000000LL
      || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
      || a1 == 0x6E61696E656D7261LL && a2 == 0xE800000000000000LL
      || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
      char v8 = 4;
      goto LABEL_9;
    }

    if (a1 == 1953724001 && a2 == 0xE400000000000000LL
      || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
      || a1 == 0x6E617473657661LL && a2 == 0xE700000000000000LL
      || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
      char v8 = 5;
      goto LABEL_9;
    }

    if (a1 == 1768710498 && a2 == 0xE400000000000000LL)
    {
LABEL_52:
      char v8 = 6;
      goto LABEL_9;
    }

    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    BOOL v9 = a1 == 0x6573656E696C6162LL && a2 == 0xE800000000000000LL;
    BOOL v10 = v9;
    char v8 = 6;
    if ((result & 1) == 0 && !v10)
    {
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) != 0) {
        goto LABEL_52;
      }
      if (a1 == 1970102626 && a2 == 0xE400000000000000LL)
      {
LABEL_64:
        char v8 = 7;
        goto LABEL_9;
      }

      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      BOOL v11 = a1 == 0x6D756D6162LL && a2 == 0xE500000000000000LL;
      BOOL v12 = v11;
      char v8 = 7;
      if ((result & 1) == 0 && !v12)
      {
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) != 0) {
          goto LABEL_64;
        }
        if (a1 == 1936941410 && a2 == 0xE400000000000000LL)
        {
LABEL_76:
          char v8 = 8;
          goto LABEL_9;
        }

        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        BOOL v13 = a1 == 0x6861766173736162LL && a2 == 0xE800000000000000LL;
        BOOL v14 = v13;
        char v8 = 8;
        if ((result & 1) == 0 && !v14)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) != 0) {
            goto LABEL_76;
          }
          if (a1 == 1802789218 && a2 == 0xE400000000000000LL)
          {
LABEL_97:
            char v8 = 9;
            goto LABEL_9;
          }

          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          BOOL v15 = a1 == 0x6B61746162LL && a2 == 0xE500000000000000LL;
          BOOL v16 = v15;
          char v8 = 9;
          if ((result & 1) == 0 && !v16)
          {
            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if ((result & 1) != 0) {
              goto LABEL_97;
            }
            uint64_t result = 1735288162LL;
            if (a1 == 1735288162 && a2 == 0xE400000000000000LL)
            {
LABEL_109:
              char v8 = 10;
              goto LABEL_9;
            }

            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
            BOOL v17 = a1 == 0x696C61676E6562LL && a2 == 0xE700000000000000LL;
            BOOL v18 = v17;
            char v8 = 10;
            if ((result & 1) == 0 && !v18)
            {
              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
              if ((result & 1) != 0) {
                goto LABEL_109;
              }
              if (a1 == 1936418914 && a2 == 0xE400000000000000LL
                || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                || a1 == 0x6B75736B69616862LL && a2 == 0xE900000000000069LL
                || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
              {
                char v8 = 11;
                goto LABEL_9;
              }

              if (a1 == 1869639522 && a2 == 0xE400000000000000LL)
              {
LABEL_128:
                char v8 = 12;
                goto LABEL_9;
              }

              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
              BOOL v19 = a1 == 0x6F666F6D6F706F62LL && a2 == 0xE800000000000000LL;
              BOOL v20 = v19;
              char v8 = 12;
              if ((result & 1) == 0 && !v20)
              {
                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                if ((result & 1) != 0) {
                  goto LABEL_128;
                }
                if (a1 == 1751216738 && a2 == 0xE400000000000000LL)
                {
LABEL_140:
                  char v8 = 13;
                  goto LABEL_9;
                }

                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                BOOL v21 = a1 == 0x696D68617262LL && a2 == 0xE600000000000000LL;
                BOOL v22 = v21;
                char v8 = 13;
                if ((result & 1) == 0 && !v22)
                {
                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                  if ((result & 1) != 0) {
                    goto LABEL_140;
                  }
                  if (a1 == 1767993954 && a2 == 0xE400000000000000LL)
                  {
LABEL_152:
                    char v8 = 14;
                    goto LABEL_9;
                  }

                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                  BOOL v23 = a1 == 0x656C6C69617262LL && a2 == 0xE700000000000000LL;
                  BOOL v24 = v23;
                  char v8 = 14;
                  if ((result & 1) == 0 && !v24)
                  {
                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                    if ((result & 1) != 0) {
                      goto LABEL_152;
                    }
                    if (a1 == 1768387938 && a2 == 0xE400000000000000LL)
                    {
LABEL_164:
                      char v8 = 15;
                      goto LABEL_9;
                    }

                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                    BOOL v25 = a1 == 0x6573656E69677562LL && a2 == 0xE800000000000000LL;
                    BOOL v26 = v25;
                    char v8 = 15;
                    if ((result & 1) == 0 && !v26)
                    {
                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                      if ((result & 1) != 0) {
                        goto LABEL_164;
                      }
                      if (a1 == 1684567394 && a2 == 0xE400000000000000LL)
                      {
LABEL_176:
                        char v8 = 16;
                        goto LABEL_9;
                      }

                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                      BOOL v27 = a1 == 0x6469687562LL && a2 == 0xE500000000000000LL;
                      BOOL v28 = v27;
                      char v8 = 16;
                      if ((result & 1) == 0 && !v28)
                      {
                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                        if ((result & 1) != 0) {
                          goto LABEL_176;
                        }
                        if (a1 == 1835753827 && a2 == 0xE400000000000000LL)
                        {
LABEL_188:
                          char v8 = 20;
                          goto LABEL_9;
                        }

                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                        BOOL v29 = a1 == 0x616D6B616863LL && a2 == 0xE600000000000000LL;
                        BOOL v30 = v29;
                        char v8 = 20;
                        if ((result & 1) == 0 && !v30)
                        {
                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                          if ((result & 1) != 0) {
                            goto LABEL_188;
                          }
                          if (a1 == 1936613731 && a2 == 0xE400000000000000LL
                            || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                            || a1 == 0xD000000000000012LL && a2 == 0x8000000181009610LL
                            || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                          {
                            char v8 = 17;
                            goto LABEL_9;
                          }

                          if (a1 == 1769103715 && a2 == 0xE400000000000000LL)
                          {
LABEL_207:
                            char v8 = 18;
                            goto LABEL_9;
                          }

                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                          BOOL v31 = a1 == 0x6E6169726163LL && a2 == 0xE600000000000000LL;
                          BOOL v32 = v31;
                          char v8 = 18;
                          if ((result & 1) == 0 && !v32)
                          {
                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                            if ((result & 1) != 0) {
                              goto LABEL_207;
                            }
                            uint64_t result = 1835100259LL;
                            if (a1 == 1835100259 && a2 == 0xE400000000000000LL
                              || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                            {
                              char v8 = 21;
                              goto LABEL_9;
                            }

                            if (a1 == 1919248483 && a2 == 0xE400000000000000LL)
                            {
LABEL_223:
                              char v8 = 22;
                              goto LABEL_9;
                            }

                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                            BOOL v33 = a1 == 0x65656B6F72656863LL && a2 == 0xE800000000000000LL;
                            BOOL v34 = v33;
                            char v8 = 22;
                            if ((result & 1) == 0 && !v34)
                            {
                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                              if ((result & 1) != 0) {
                                goto LABEL_223;
                              }
                              if (a1 == 1936877667 && a2 == 0xE400000000000000LL
                                || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                                || a1 == 0x696D7361726F6863LL && a2 == 0xEA00000000006E61LL
                                || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                              {
                                char v8 = 23;
                                goto LABEL_9;
                              }

                              if (a1 == 1953525603 && a2 == 0xE400000000000000LL)
                              {
LABEL_250:
                                char v8 = 25;
                                goto LABEL_9;
                              }

                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                              BOOL v35 = a1 == 0x636974706F63LL && a2 == 0xE600000000000000LL;
                              BOOL v36 = v35;
                              char v8 = 25;
                              if ((result & 1) == 0 && !v36)
                              {
                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                BOOL v37 = a1 == 1667326321 && a2 == 0xE400000000000000LL;
                                BOOL v38 = v37;
                                char v8 = 25;
                                if ((result & 1) == 0 && !v38)
                                {
                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                  if ((result & 1) != 0) {
                                    goto LABEL_250;
                                  }
                                  if (a1 == 1852665955 && a2 == 0xE400000000000000LL
                                    || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                                    || a1 == 0x6E696D6F72707963LL && a2 == 0xEB000000006E616FLL
                                    || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                  {
                                    char v8 = 29;
                                    goto LABEL_9;
                                  }

                                  if (a1 == 1953656931 && a2 == 0xE400000000000000LL)
                                  {
LABEL_269:
                                    char v8 = 27;
                                    goto LABEL_9;
                                  }

                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                  BOOL v39 = a1 == 0x746F6972707963LL && a2 == 0xE700000000000000LL;
                                  BOOL v40 = v39;
                                  char v8 = 27;
                                  if ((result & 1) == 0 && !v40)
                                  {
                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                    if ((result & 1) != 0) {
                                      goto LABEL_269;
                                    }
                                    if (a1 == 1819441507 && a2 == 0xE400000000000000LL)
                                    {
LABEL_281:
                                      char v8 = 28;
                                      goto LABEL_9;
                                    }

                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                    BOOL v41 = a1 == 0x63696C6C69727963LL && a2 == 0xE800000000000000LL;
                                    BOOL v42 = v41;
                                    char v8 = 28;
                                    if ((result & 1) == 0 && !v42)
                                    {
                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                      if ((result & 1) != 0) {
                                        goto LABEL_281;
                                      }
                                      uint64_t result = 1635149156LL;
                                      if (a1 == 1635149156 && a2 == 0xE400000000000000LL
                                        || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                                        || a1 == 0x6167616E61766564LL && a2 == 0xEA00000000006972LL
                                        || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                      {
                                        char v8 = 31;
                                        goto LABEL_9;
                                      }

                                      if (a1 == 1801546084 && a2 == 0xE400000000000000LL
                                        || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                                        || a1 == 0x756B617365766964LL && a2 == 0xEA00000000007572LL
                                        || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                      {
                                        char v8 = 32;
                                        goto LABEL_9;
                                      }

                                      if (a1 == 1919381348 && a2 == 0xE400000000000000LL)
                                      {
LABEL_307:
                                        char v8 = 33;
                                        goto LABEL_9;
                                      }

                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                      BOOL v43 = a1 == 0x6172676F64LL && a2 == 0xE500000000000000LL;
                                      BOOL v44 = v43;
                                      char v8 = 33;
                                      if ((result & 1) == 0 && !v44)
                                      {
                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                        if ((result & 1) != 0) {
                                          goto LABEL_307;
                                        }
                                        uint64_t result = 1953657700LL;
                                        if (a1 == 1953657700 && a2 == 0xE400000000000000LL)
                                        {
LABEL_319:
                                          char v8 = 30;
                                          goto LABEL_9;
                                        }

                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                        BOOL v45 = a1 == 0x74657265736564LL && a2 == 0xE700000000000000LL;
                                        BOOL v46 = v45;
                                        char v8 = 30;
                                        if ((result & 1) == 0 && !v46)
                                        {
                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                          if ((result & 1) != 0) {
                                            goto LABEL_319;
                                          }
                                          if (a1 == 1819309412 && a2 == 0xE400000000000000LL)
                                          {
LABEL_331:
                                            char v8 = 34;
                                            goto LABEL_9;
                                          }

                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                          BOOL v47 = a1 == 0x6E61796F6C707564LL && a2 == 0xE800000000000000LL;
                                          BOOL v48 = v47;
                                          char v8 = 34;
                                          if ((result & 1) == 0 && !v48)
                                          {
                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                            if ((result & 1) != 0) {
                                              goto LABEL_331;
                                            }
                                            if (a1 == 1887004517 && a2 == 0xE400000000000000LL
                                              || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                  (result & 1) != 0)
                                              || a1 == 0xD000000000000013LL && a2 == 0x8000000181009630LL
                                              || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                  (result & 1) != 0))
                                            {
                                              char v8 = 35;
                                              goto LABEL_9;
                                            }

                                            if (a1 == 1633840229 && a2 == 0xE400000000000000LL)
                                            {
LABEL_350:
                                              char v8 = 36;
                                              goto LABEL_9;
                                            }

                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                            BOOL v49 = a1 == 0x6E617361626C65LL && a2 == 0xE700000000000000LL;
                                            BOOL v50 = v49;
                                            char v8 = 36;
                                            if ((result & 1) == 0 && !v50)
                                            {
                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                              if ((result & 1) != 0) {
                                                goto LABEL_350;
                                              }
                                              if (a1 == 1836674149 && a2 == 0xE400000000000000LL)
                                              {
LABEL_362:
                                                char v8 = 37;
                                                goto LABEL_9;
                                              }

                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                              BOOL v51 = a1 == 0x6369616D796C65LL && a2 == 0xE700000000000000LL;
                                              BOOL v52 = v51;
                                              char v8 = 37;
                                              if ((result & 1) == 0 && !v52)
                                              {
                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                if ((result & 1) != 0) {
                                                  goto LABEL_362;
                                                }
                                                if (a1 == 1768453221 && a2 == 0xE400000000000000LL)
                                                {
LABEL_374:
                                                  char v8 = 38;
                                                  goto LABEL_9;
                                                }

                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                BOOL v53 = a1 == 0x6369706F69687465LL && a2 == 0xE800000000000000LL;
                                                BOOL v54 = v53;
                                                char v8 = 38;
                                                if ((result & 1) == 0 && !v54)
                                                {
                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                  if ((result & 1) != 0) {
                                                    goto LABEL_374;
                                                  }
                                                  if (a1 == 1919903079 && a2 == 0xE400000000000000LL)
                                                  {
LABEL_386:
                                                    char v8 = 39;
                                                    goto LABEL_9;
                                                  }

                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                  BOOL v55 = a1 == 0x6E616967726F6567LL && a2 == 0xE800000000000000LL;
                                                  BOOL v56 = v55;
                                                  char v8 = 39;
                                                  if ((result & 1) == 0 && !v56)
                                                  {
                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                    if ((result & 1) != 0) {
                                                      goto LABEL_386;
                                                    }
                                                    uint64_t result = 1734437991LL;
                                                    if (a1 == 1734437991 && a2 == 0xE400000000000000LL
                                                      || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                          (result & 1) != 0)
                                                      || a1 == 0x74696C6F67616C67LL && a2 == 0xEA00000000006369LL
                                                      || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                          (result & 1) != 0))
                                                    {
                                                      char v8 = 40;
                                                      goto LABEL_9;
                                                    }

                                                    uint64_t result = 1735290727LL;
                                                    if (a1 == 1735290727 && a2 == 0xE400000000000000LL
                                                      || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                          (result & 1) != 0)
                                                      || a1 == 0x67616C616A6E7567LL && a2 == 0xEC00000069646E6FLL
                                                      || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                          (result & 1) != 0))
                                                    {
                                                      char v8 = 45;
                                                      goto LABEL_9;
                                                    }

                                                    if (a1 == 1835954023 && a2 == 0xE400000000000000LL)
                                                    {
LABEL_412:
                                                      char v8 = 84;
                                                      goto LABEL_9;
                                                    }

                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                    BOOL v57 = a1 == 0x676D61726173616DLL && a2 == 0xEC00000069646E6FLL;
                                                    BOOL v58 = v57;
                                                    char v8 = 84;
                                                    if ((result & 1) == 0 && !v58)
                                                    {
                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                      if ((result & 1) != 0) {
                                                        goto LABEL_412;
                                                      }
                                                      uint64_t result = 1752461159LL;
                                                      if (a1 == 1752461159 && a2 == 0xE400000000000000LL)
                                                      {
LABEL_424:
                                                        char v8 = 41;
                                                        goto LABEL_9;
                                                      }

                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                      BOOL v59 = a1 == 0x636968746F67LL && a2 == 0xE600000000000000LL;
                                                      BOOL v60 = v59;
                                                      char v8 = 41;
                                                      if ((result & 1) == 0 && !v60)
                                                      {
                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                        if ((result & 1) != 0) {
                                                          goto LABEL_424;
                                                        }
                                                        if (a1 == 1851880039 && a2 == 0xE400000000000000LL)
                                                        {
LABEL_436:
                                                          char v8 = 42;
                                                          goto LABEL_9;
                                                        }

                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                        BOOL v61 = a1 == 0x6168746E617267LL && a2 == 0xE700000000000000LL;
                                                        BOOL v62 = v61;
                                                        char v8 = 42;
                                                        if ((result & 1) == 0 && !v62)
                                                        {
                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                          if ((result & 1) != 0) {
                                                            goto LABEL_436;
                                                          }
                                                          if (a1 == 1801810535 && a2 == 0xE400000000000000LL)
                                                          {
LABEL_448:
                                                            char v8 = 43;
                                                            goto LABEL_9;
                                                          }

                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                          BOOL v63 = a1 == 0x6B65657267LL && a2 == 0xE500000000000000LL;
                                                          BOOL v64 = v63;
                                                          char v8 = 43;
                                                          if ((result & 1) == 0 && !v64)
                                                          {
                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                            if ((result & 1) != 0) {
                                                              goto LABEL_448;
                                                            }
                                                            if (a1 == 1919579495 && a2 == 0xE400000000000000LL)
                                                            {
LABEL_460:
                                                              char v8 = 44;
                                                              goto LABEL_9;
                                                            }

                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                            BOOL v65 = a1 == 0x69746172616A7567LL
                                                               && a2 == 0xE800000000000000LL;
                                                            BOOL v66 = v65;
                                                            char v8 = 44;
                                                            if ((result & 1) == 0 && !v66)
                                                            {
                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                              if ((result & 1) != 0) {
                                                                goto LABEL_460;
                                                              }
                                                              if (a1 == 1970435431 && a2 == 0xE400000000000000LL)
                                                              {
LABEL_472:
                                                                char v8 = 46;
                                                                goto LABEL_9;
                                                              }

                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                              BOOL v67 = a1 == 0x69686B756D727567LL
                                                                 && a2 == 0xE800000000000000LL;
                                                              BOOL v68 = v67;
                                                              char v8 = 46;
                                                              if ((result & 1) == 0 && !v68)
                                                              {
                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                if ((result & 1) != 0) {
                                                                  goto LABEL_472;
                                                                }
                                                                if (a1 == 1735287144 && a2 == 0xE400000000000000LL)
                                                                {
LABEL_484:
                                                                  char v8 = 48;
                                                                  goto LABEL_9;
                                                                }

                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                BOOL v69 = a1 == 0x6C75676E6168LL
                                                                   && a2 == 0xE600000000000000LL;
                                                                BOOL v70 = v69;
                                                                char v8 = 48;
                                                                if ((result & 1) == 0 && !v70)
                                                                {
                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                  if ((result & 1) != 0) {
                                                                    goto LABEL_484;
                                                                  }
                                                                  if (a1 == 1768841576 && a2 == 0xE400000000000000LL
                                                                    || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                        (result & 1) != 0)
                                                                    || a1 == 7233896 && a2 == 0xE300000000000000LL
                                                                    || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                        (result & 1) != 0))
                                                                  {
                                                                    char v8 = 47;
                                                                    goto LABEL_9;
                                                                  }

                                                                  if (a1 == 1869504872 && a2 == 0xE400000000000000LL)
                                                                  {
LABEL_503:
                                                                    char v8 = 50;
                                                                    goto LABEL_9;
                                                                  }

                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                  BOOL v71 = a1 == 0x6F6F6E756E6168LL
                                                                     && a2 == 0xE700000000000000LL;
                                                                  BOOL v72 = v71;
                                                                  char v8 = 50;
                                                                  if ((result & 1) == 0 && !v72)
                                                                  {
                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                    if ((result & 1) != 0) {
                                                                      goto LABEL_503;
                                                                    }
                                                                    if (a1 == 1920229736 && a2 == 0xE400000000000000LL)
                                                                    {
LABEL_515:
                                                                      char v8 = 51;
                                                                      goto LABEL_9;
                                                                    }

                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                    BOOL v73 = a1 == 0x6E6172746168LL
                                                                       && a2 == 0xE600000000000000LL;
                                                                    BOOL v74 = v73;
                                                                    char v8 = 51;
                                                                    if ((result & 1) == 0 && !v74)
                                                                    {
                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                      if ((result & 1) != 0) {
                                                                        goto LABEL_515;
                                                                      }
                                                                      if (a1 == 1919051112
                                                                        && a2 == 0xE400000000000000LL)
                                                                      {
LABEL_527:
                                                                        char v8 = 52;
                                                                        goto LABEL_9;
                                                                      }

                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                      BOOL v75 = a1 == 0x776572626568LL
                                                                         && a2 == 0xE600000000000000LL;
                                                                      BOOL v76 = v75;
                                                                      char v8 = 52;
                                                                      if ((result & 1) == 0 && !v76)
                                                                      {
                                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                        if ((result & 1) != 0) {
                                                                          goto LABEL_527;
                                                                        }
                                                                        uint64_t result = 1634888040LL;
                                                                        if (a1 == 1634888040
                                                                          && a2 == 0xE400000000000000LL)
                                                                        {
LABEL_539:
                                                                          char v8 = 53;
                                                                          goto LABEL_9;
                                                                        }

                                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                        BOOL v77 = a1 == 0x616E616761726968LL
                                                                           && a2 == 0xE800000000000000LL;
                                                                        BOOL v78 = v77;
                                                                        char v8 = 53;
                                                                        if ((result & 1) == 0 && !v78)
                                                                        {
                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                          if ((result & 1) != 0) {
                                                                            goto LABEL_539;
                                                                          }
                                                                          if (a1 == 2004184168
                                                                            && a2 == 0xE400000000000000LL
                                                                            || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                (result & 1) != 0)
                                                                            || a1 == 0xD000000000000014LL
                                                                            && a2 == 0x8000000181009650LL
                                                                            || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                (result & 1) != 0))
                                                                          {
                                                                            char v8 = 2;
                                                                            goto LABEL_9;
                                                                          }

                                                                          uint64_t result = 1735290216LL;
                                                                          if (a1 == 1735290216
                                                                            && a2 == 0xE400000000000000LL
                                                                            || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                (result & 1) != 0)
                                                                            || a1 == 0x6D68687761686170LL
                                                                            && a2 == 0xEB00000000676E6FLL
                                                                            || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                (result & 1) != 0))
                                                                          {
                                                                            char v8 = 117;
                                                                            goto LABEL_9;
                                                                          }

                                                                          if (a1 == 1886285160
                                                                            && a2 == 0xE400000000000000LL)
                                                                          {
LABEL_565:
                                                                            char v8 = 102;
                                                                            goto LABEL_9;
                                                                          }

                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                          BOOL v79 = a1 == 0xD000000000000014LL
                                                                             && a2 == 0x8000000181009670LL;
                                                                          BOOL v80 = v79;
                                                                          char v8 = 102;
                                                                          if ((result & 1) == 0 && !v80)
                                                                          {
                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                            if ((result & 1) != 0) {
                                                                              goto LABEL_565;
                                                                            }
                                                                            if (a1 == 1953198696
                                                                              && a2 == 0xE400000000000000LL)
                                                                            {
LABEL_577:
                                                                              char v8 = 62;
                                                                              goto LABEL_9;
                                                                            }

                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                            BOOL v81 = a1 == 0xD000000000000012LL
                                                                               && a2 == 0x8000000181009690LL;
                                                                            BOOL v82 = v81;
                                                                            char v8 = 62;
                                                                            if ((result & 1) == 0 && !v82)
                                                                            {
                                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                              if ((result & 1) != 0) {
                                                                                goto LABEL_577;
                                                                              }
                                                                              if (a1 == 1735292264
                                                                                && a2 == 0xE400000000000000LL
                                                                                || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                    (result & 1) != 0)
                                                                                || a1 == 0x61676E7568646C6FLL
                                                                                && a2 == 0xEC0000006E616972LL
                                                                                || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                    (result & 1) != 0))
                                                                              {
                                                                                char v8 = 105;
                                                                                goto LABEL_9;
                                                                              }

                                                                              if (a1 == 1818326121
                                                                                && a2 == 0xE400000000000000LL
                                                                                || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                    (result & 1) != 0)
                                                                                || a1 == 0x696C617469646C6FLL
                                                                                && a2 == 0xE900000000000063LL
                                                                                || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                    (result & 1) != 0))
                                                                              {
                                                                                char v8 = 106;
                                                                                goto LABEL_9;
                                                                              }

                                                                              if (a1 == 1635148138
                                                                                && a2 == 0xE400000000000000LL)
                                                                              {
LABEL_603:
                                                                                char v8 = 58;
                                                                                goto LABEL_9;
                                                                              }

                                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                              BOOL v83 = a1 == 0x6573656E6176616ALL
                                                                                 && a2 == 0xE800000000000000LL;
                                                                              BOOL v84 = v83;
                                                                              char v8 = 58;
                                                                              if ((result & 1) == 0 && !v84)
                                                                              {
                                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                if ((result & 1) != 0) {
                                                                                  goto LABEL_603;
                                                                                }
                                                                                uint64_t result = 1768710507LL;
                                                                                if (a1 == 1768710507
                                                                                  && a2 == 0xE400000000000000LL)
                                                                                {
LABEL_615:
                                                                                  char v8 = 63;
                                                                                  goto LABEL_9;
                                                                                }

                                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                BOOL v85 = a1 == 0x696C686179616BLL
                                                                                   && a2 == 0xE700000000000000LL;
                                                                                BOOL v86 = v85;
                                                                                char v8 = 63;
                                                                                if ((result & 1) == 0 && !v86)
                                                                                {
                                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                  if ((result & 1) != 0) {
                                                                                    goto LABEL_615;
                                                                                  }
                                                                                  if (a1 == 1634623851
                                                                                    && a2 == 0xE400000000000000LL)
                                                                                  {
LABEL_627:
                                                                                    char v8 = 61;
                                                                                    goto LABEL_9;
                                                                                  }

                                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                  BOOL v87 = a1 == 0x616E616B6174616BLL
                                                                                     && a2 == 0xE800000000000000LL;
                                                                                  BOOL v88 = v87;
                                                                                  char v8 = 61;
                                                                                  if ((result & 1) == 0 && !v88)
                                                                                  {
                                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                    if ((result & 1) != 0) {
                                                                                      goto LABEL_627;
                                                                                    }
                                                                                    uint64_t result = 1918986347LL;
                                                                                    if (a1 == 1918986347
                                                                                      && a2 == 0xE400000000000000LL
                                                                                      || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                          (result & 1) != 0)
                                                                                      || a1 == 0x7468736F7261686BLL
                                                                                      && a2 == 0xEA00000000006968LL
                                                                                      || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                          (result & 1) != 0))
                                                                                    {
                                                                                      char v8 = 64;
                                                                                      goto LABEL_9;
                                                                                    }

                                                                                    uint64_t result = 1919772779LL;
                                                                                    if (a1 == 1919772779
                                                                                      && a2 == 0xE400000000000000LL)
                                                                                    {
LABEL_646:
                                                                                      char v8 = 66;
                                                                                      goto LABEL_9;
                                                                                    }

                                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                    BOOL v89 = a1 == 0x72656D686BLL
                                                                                       && a2 == 0xE500000000000000LL;
                                                                                    BOOL v90 = v89;
                                                                                    char v8 = 66;
                                                                                    if ((result & 1) == 0 && !v90)
                                                                                    {
                                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                      if ((result & 1) != 0) {
                                                                                        goto LABEL_646;
                                                                                      }
                                                                                      if (a1 == 1785686123
                                                                                        && a2 == 0xE400000000000000LL)
                                                                                      {
LABEL_658:
                                                                                        char v8 = 67;
                                                                                        goto LABEL_9;
                                                                                      }

                                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                      BOOL v91 = a1 == 0x696B6A6F686BLL
                                                                                         && a2 == 0xE600000000000000LL;
                                                                                      BOOL v92 = v91;
                                                                                      char v8 = 67;
                                                                                      if ((result & 1) == 0 && !v92)
                                                                                      {
                                                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                        if ((result & 1) != 0) {
                                                                                          goto LABEL_658;
                                                                                        }
                                                                                        if (a1 == 1937009003
                                                                                          && a2 == 0xE400000000000000LL)
                                                                                        {
LABEL_670:
                                                                                          char v8 = 65;
                                                                                          goto LABEL_9;
                                                                                        }

                                                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                        BOOL v93 = a1 == 0xD000000000000011LL
                                                                                           && a2 == 0x80000001810096B0LL;
                                                                                        BOOL v94 = v93;
                                                                                        char v8 = 65;
                                                                                        if ((result & 1) == 0 && !v94)
                                                                                        {
                                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                          if ((result & 1) != 0) {
                                                                                            goto LABEL_670;
                                                                                          }
                                                                                          if (a1 == 1633971819
                                                                                            && a2 == 0xE400000000000000LL)
                                                                                          {
LABEL_682:
                                                                                            char v8 = 60;
                                                                                            goto LABEL_9;
                                                                                          }

                                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                          BOOL v95 = a1 == 0x6164616E6E616BLL
                                                                                             && a2 == 0xE700000000000000LL;
                                                                                          BOOL v96 = v95;
                                                                                          char v8 = 60;
                                                                                          if ((result & 1) == 0 && !v96)
                                                                                          {
                                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                            if ((result & 1) != 0) {
                                                                                              goto LABEL_682;
                                                                                            }
                                                                                            uint64_t result = 1768453227LL;
                                                                                            if (a1 == 1768453227
                                                                                              && a2 == 0xE400000000000000LL)
                                                                                            {
LABEL_694:
                                                                                              char v8 = 59;
                                                                                              goto LABEL_9;
                                                                                            }

                                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                            BOOL v97 = a1 == 0x69687469616BLL
                                                                                               && a2 == 0xE600000000000000LL;
                                                                                            BOOL v98 = v97;
                                                                                            char v8 = 59;
                                                                                            if ((result & 1) == 0
                                                                                              && !v98)
                                                                                            {
                                                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                              if ((result & 1) != 0) {
                                                                                                goto LABEL_694;
                                                                                              }
                                                                                              uint64_t result = 1634623852LL;
                                                                                              if (a1 == 1634623852
                                                                                                && a2 == 0xE400000000000000LL)
                                                                                              {
LABEL_706:
                                                                                                char v8 = -115;
                                                                                                goto LABEL_9;
                                                                                              }

                                                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                              BOOL v99 = a1 == 0x6D616874696174LL && a2 == 0xE700000000000000LL;
                                                                                              BOOL v100 = v99;
                                                                                              char v8 = -115;
                                                                                              if ((result & 1) == 0
                                                                                                && !v100)
                                                                                              {
                                                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                if ((result & 1) != 0) {
                                                                                                  goto LABEL_706;
                                                                                                }
                                                                                                if (a1 == 1869570412 && a2 == 0xE400000000000000LL)
                                                                                                {
LABEL_718:
                                                                                                  char v8 = 69;
                                                                                                  goto LABEL_9;
                                                                                                }

                                                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                BOOL v101 = a1 == 7299436 && a2 == 0xE300000000000000LL;
                                                                                                BOOL v102 = v101;
                                                                                                char v8 = 69;
                                                                                                if ((result & 1) == 0 && !v102)
                                                                                                {
                                                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                  if ((result & 1) != 0) {
                                                                                                    goto LABEL_718;
                                                                                                  }
                                                                                                  if (a1 == 1853120876 && a2 == 0xE400000000000000LL)
                                                                                                  {
LABEL_730:
                                                                                                    char v8 = 70;
                                                                                                    goto LABEL_9;
                                                                                                  }

                                                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                  BOOL v103 = a1 == 0x6E6974616CLL && a2 == 0xE500000000000000LL;
                                                                                                  BOOL v104 = v103;
                                                                                                  char v8 = 70;
                                                                                                  if ((result & 1) == 0 && !v104)
                                                                                                  {
                                                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                    if ((result & 1) != 0) {
                                                                                                      goto LABEL_730;
                                                                                                    }
                                                                                                    if (a1 == 1668310380 && a2 == 0xE400000000000000LL)
                                                                                                    {
LABEL_742:
                                                                                                      char v8 = 71;
                                                                                                      goto LABEL_9;
                                                                                                    }

                                                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                    BOOL v105 = a1 == 0x61686370656CLL && a2 == 0xE600000000000000LL;
                                                                                                    BOOL v106 = v105;
                                                                                                    char v8 = 71;
                                                                                                    if ((result & 1) == 0 && !v106)
                                                                                                    {
                                                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                      if ((result & 1) != 0) {
                                                                                                        goto LABEL_742;
                                                                                                      }
                                                                                                      if (a1 == 1651337580 && a2 == 0xE400000000000000LL)
                                                                                                      {
LABEL_754:
                                                                                                        char v8 = 72;
                                                                                                        goto LABEL_9;
                                                                                                      }

                                                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                      BOOL v107 = a1 == 0x75626D696CLL && a2 == 0xE500000000000000LL;
                                                                                                      BOOL v108 = v107;
                                                                                                      char v8 = 72;
                                                                                                      if ((result & 1) == 0 && !v108)
                                                                                                      {
                                                                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                        if ((result & 1) != 0) {
                                                                                                          goto LABEL_754;
                                                                                                        }
                                                                                                        uint64_t result = 1634625900LL;
                                                                                                        if (a1 == 1634625900 && a2 == 0xE400000000000000LL)
                                                                                                        {
LABEL_766:
                                                                                                          char v8 = 73;
                                                                                                          goto LABEL_9;
                                                                                                        }

                                                                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                        BOOL v109 = a1 == 0x617261656E696CLL && a2 == 0xE700000000000000LL;
                                                                                                        BOOL v110 = v109;
                                                                                                        char v8 = 73;
                                                                                                        if ((result & 1) == 0 && !v110)
                                                                                                        {
                                                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                          if ((result & 1) != 0) {
                                                                                                            goto LABEL_766;
                                                                                                          }
                                                                                                          uint64_t result = 1651403116LL;
                                                                                                          if (a1 == 1651403116 && a2 == 0xE400000000000000LL)
                                                                                                          {
LABEL_778:
                                                                                                            char v8 = 74;
                                                                                                            goto LABEL_9;
                                                                                                          }

                                                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                          BOOL v111 = a1 == 0x627261656E696CLL && a2 == 0xE700000000000000LL;
                                                                                                          BOOL v112 = v111;
                                                                                                          char v8 = 74;
                                                                                                          if ((result & 1) == 0 && !v112)
                                                                                                          {
                                                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                            if ((result & 1) != 0) {
                                                                                                              goto LABEL_778;
                                                                                                            }
                                                                                                            if (a1 == 1970497900 && a2 == 0xE400000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                            {
                                                                                                              char v8 = 75;
                                                                                                              goto LABEL_9;
                                                                                                            }

                                                                                                            if (a1 == 1768126828 && a2 == 0xE400000000000000LL)
                                                                                                            {
LABEL_794:
                                                                                                              char v8 = 76;
                                                                                                              goto LABEL_9;
                                                                                                            }

                                                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                            BOOL v113 = a1 == 0x6E616963796CLL && a2 == 0xE600000000000000LL;
                                                                                                            BOOL v114 = v113;
                                                                                                            char v8 = 76;
                                                                                                            if ((result & 1) == 0 && !v114)
                                                                                                            {
                                                                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                              if ((result & 1) != 0) {
                                                                                                                goto LABEL_794;
                                                                                                              }
                                                                                                              uint64_t result = 1768192364LL;
                                                                                                              if (a1 == 1768192364 && a2 == 0xE400000000000000LL)
                                                                                                              {
LABEL_806:
                                                                                                                char v8 = 77;
                                                                                                                goto LABEL_9;
                                                                                                              }

                                                                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                              BOOL v115 = a1 == 0x6E616964796CLL && a2 == 0xE600000000000000LL;
                                                                                                              BOOL v116 = v115;
                                                                                                              char v8 = 77;
                                                                                                              if ((result & 1) == 0 && !v116)
                                                                                                              {
                                                                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                if ((result & 1) != 0) {
                                                                                                                  goto LABEL_806;
                                                                                                                }
                                                                                                                if (a1 == 1785225581 && a2 == 0xE400000000000000LL)
                                                                                                                {
LABEL_818:
                                                                                                                  char v8 = 78;
                                                                                                                  goto LABEL_9;
                                                                                                                }

                                                                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                BOOL v117 = a1 == 0x696E616A6168616DLL && a2 == 0xE800000000000000LL;
                                                                                                                BOOL v118 = v117;
                                                                                                                char v8 = 78;
                                                                                                                if ((result & 1) == 0 && !v118)
                                                                                                                {
                                                                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                  if ((result & 1) != 0) {
                                                                                                                    goto LABEL_818;
                                                                                                                  }
                                                                                                                  if (a1 == 1634427245 && a2 == 0xE400000000000000LL)
                                                                                                                  {
LABEL_830:
                                                                                                                    char v8 = 79;
                                                                                                                    goto LABEL_9;
                                                                                                                  }

                                                                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                  BOOL v119 = a1 == 0x726173616B616DLL && a2 == 0xE700000000000000LL;
                                                                                                                  BOOL v120 = v119;
                                                                                                                  char v8 = 79;
                                                                                                                  if ((result & 1) == 0 && !v120)
                                                                                                                  {
                                                                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                    if ((result & 1) != 0) {
                                                                                                                      goto LABEL_830;
                                                                                                                    }
                                                                                                                    if (a1 == 1684955501 && a2 == 0xE400000000000000LL)
                                                                                                                    {
LABEL_842:
                                                                                                                      char v8 = 81;
                                                                                                                      goto LABEL_9;
                                                                                                                    }

                                                                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                    BOOL v121 = a1 == 0x636961646E616DLL && a2 == 0xE700000000000000LL;
                                                                                                                    BOOL v122 = v121;
                                                                                                                    char v8 = 81;
                                                                                                                    if ((result & 1) == 0 && !v122)
                                                                                                                    {
                                                                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                      if ((result & 1) != 0) {
                                                                                                                        goto LABEL_842;
                                                                                                                      }
                                                                                                                      uint64_t result = 1768841581LL;
                                                                                                                      if (a1 == 1768841581 && a2 == 0xE400000000000000LL)
                                                                                                                      {
LABEL_854:
                                                                                                                        char v8 = 82;
                                                                                                                        goto LABEL_9;
                                                                                                                      }

                                                                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                      BOOL v123 = a1 == 0x65616863696E616DLL && a2 == 0xEA00000000006E61LL;
                                                                                                                      BOOL v124 = v123;
                                                                                                                      char v8 = 82;
                                                                                                                      if ((result & 1) == 0 && !v124)
                                                                                                                      {
                                                                                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                        if ((result & 1) != 0) {
                                                                                                                          goto LABEL_854;
                                                                                                                        }
                                                                                                                        if (a1 == 1668440429 && a2 == 0xE400000000000000LL)
                                                                                                                        {
LABEL_866:
                                                                                                                          char v8 = 83;
                                                                                                                          goto LABEL_9;
                                                                                                                        }

                                                                                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                        BOOL v125 = a1 == 0x6E65686372616DLL && a2 == 0xE700000000000000LL;
                                                                                                                        BOOL v126 = v125;
                                                                                                                        char v8 = 83;
                                                                                                                        if ((result & 1) == 0 && !v126)
                                                                                                                        {
                                                                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                          if ((result & 1) != 0) {
                                                                                                                            goto LABEL_866;
                                                                                                                          }
                                                                                                                          if (a1 == 1717855597 && a2 == 0xE400000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || a1 == 0x646961666564656DLL && a2 == 0xEB000000006E6972LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                          {
                                                                                                                            char v8 = 85;
                                                                                                                            goto LABEL_9;
                                                                                                                          }

                                                                                                                          uint64_t result = 1684956525LL;
                                                                                                                          if (a1 == 1684956525 && a2 == 0xE400000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || a1 == 0x6B696B65646E656DLL && a2 == 0xEC00000069756B61LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                          {
                                                                                                                            char v8 = 87;
                                                                                                                            goto LABEL_9;
                                                                                                                          }

                                                                                                                          uint64_t result = 1668441453LL;
                                                                                                                          if (a1 == 1668441453 && a2 == 0xE400000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || a1 == 0x636974696F72656DLL && a2 == 0xEF65766973727563LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                          {
                                                                                                                            char v8 = 88;
                                                                                                                            goto LABEL_9;
                                                                                                                          }

                                                                                                                          if (a1 == 1869768045 && a2 == 0xE400000000000000LL)
                                                                                                                          {
LABEL_899:
                                                                                                                            char v8 = 89;
                                                                                                                            goto LABEL_9;
                                                                                                                          }

                                                                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                          BOOL v127 = a1 == 0xD000000000000013LL && a2 == 0x80000001810096D0LL;
                                                                                                                          BOOL v128 = v127;
                                                                                                                          char v8 = 89;
                                                                                                                          if ((result & 1) == 0 && !v128)
                                                                                                                          {
                                                                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                            if ((result & 1) != 0) {
                                                                                                                              goto LABEL_899;
                                                                                                                            }
                                                                                                                            uint64_t result = 1836674157LL;
                                                                                                                            if (a1 == 1836674157 && a2 == 0xE400000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || a1 == 0x616C6179616C616DLL && a2 == 0xE90000000000006DLL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                            {
                                                                                                                              char v8 = 80;
                                                                                                                              goto LABEL_9;
                                                                                                                            }

                                                                                                                            if (a1 == 1768189805 && a2 == 0xE400000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                            {
                                                                                                                              char v8 = 91;
                                                                                                                              goto LABEL_9;
                                                                                                                            }

                                                                                                                            uint64_t result = 1735290733LL;
                                                                                                                            if (a1 == 1735290733 && a2 == 0xE400000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || a1 == 0x61696C6F676E6F6DLL && a2 == 0xE90000000000006ELL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                            {
                                                                                                                              char v8 = 92;
                                                                                                                              goto LABEL_9;
                                                                                                                            }

                                                                                                                            if (a1 == 1869574765 && a2 == 0xE400000000000000LL)
                                                                                                                            {
LABEL_929:
                                                                                                                              char v8 = 93;
                                                                                                                              goto LABEL_9;
                                                                                                                            }

                                                                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                            BOOL v129 = a1 == 7303789 && a2 == 0xE300000000000000LL;
                                                                                                                            BOOL v130 = v129;
                                                                                                                            char v8 = 93;
                                                                                                                            if ((result & 1) == 0 && !v130)
                                                                                                                            {
                                                                                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                              if ((result & 1) != 0) {
                                                                                                                                goto LABEL_929;
                                                                                                                              }
                                                                                                                              if (a1 == 1768256621 && a2 == 0xE400000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || a1 == 0x616D69657465656DLL && a2 == 0xEB000000006B6579LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                              {
                                                                                                                                char v8 = 86;
                                                                                                                                goto LABEL_9;
                                                                                                                              }

                                                                                                                              if (a1 == 1953265005 && a2 == 0xE400000000000000LL)
                                                                                                                              {
LABEL_948:
                                                                                                                                char v8 = 94;
                                                                                                                                goto LABEL_9;
                                                                                                                              }

                                                                                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                              BOOL v131 = a1 == 0x696E61746C756DLL && a2 == 0xE700000000000000LL;
                                                                                                                              BOOL v132 = v131;
                                                                                                                              char v8 = 94;
                                                                                                                              if ((result & 1) == 0 && !v132)
                                                                                                                              {
                                                                                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                if ((result & 1) != 0) {
                                                                                                                                  goto LABEL_948;
                                                                                                                                }
                                                                                                                                if (a1 == 1919777133 && a2 == 0xE400000000000000LL)
                                                                                                                                {
LABEL_960:
                                                                                                                                  char v8 = 95;
                                                                                                                                  goto LABEL_9;
                                                                                                                                }

                                                                                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                BOOL v133 = a1 == 0x72616D6E61796DLL && a2 == 0xE700000000000000LL;
                                                                                                                                BOOL v134 = v133;
                                                                                                                                char v8 = 95;
                                                                                                                                if ((result & 1) == 0 && !v134)
                                                                                                                                {
                                                                                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                  if ((result & 1) != 0) {
                                                                                                                                    goto LABEL_960;
                                                                                                                                  }
                                                                                                                                  uint64_t result = 1684955502LL;
                                                                                                                                  if (a1 == 1684955502 && a2 == 0xE400000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || a1 == 0x67616E69646E616ELL && a2 == 0xEB00000000697261LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                  {
                                                                                                                                    char v8 = 97;
                                                                                                                                    goto LABEL_9;
                                                                                                                                  }

                                                                                                                                  if (a1 == 1651663214 && a2 == 0xE400000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || a1 == 0x6874726F6E646C6FLL && a2 == 0xEF6E616962617261LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                  {
                                                                                                                                    char v8 = 107;
                                                                                                                                    goto LABEL_9;
                                                                                                                                  }

                                                                                                                                  if (a1 == 1952539246 && a2 == 0xE400000000000000LL)
                                                                                                                                  {
LABEL_986:
                                                                                                                                    char v8 = 96;
                                                                                                                                    goto LABEL_9;
                                                                                                                                  }

                                                                                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                  BOOL v135 = a1 == 0x616561746162616ELL && a2 == 0xE90000000000006ELL;
                                                                                                                                  BOOL v136 = v135;
                                                                                                                                  char v8 = 96;
                                                                                                                                  if ((result & 1) == 0 && !v136)
                                                                                                                                  {
                                                                                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                    if ((result & 1) != 0) {
                                                                                                                                      goto LABEL_986;
                                                                                                                                    }
                                                                                                                                    if (a1 == 1635214702 && a2 == 0xE400000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                    {
                                                                                                                                      char v8 = 98;
                                                                                                                                      goto LABEL_9;
                                                                                                                                    }

                                                                                                                                    uint64_t result = 1869572974LL;
                                                                                                                                    if (a1 == 1869572974 && a2 == 0xE400000000000000LL)
                                                                                                                                    {
LABEL_1002:
                                                                                                                                      char v8 = 100;
                                                                                                                                      goto LABEL_9;
                                                                                                                                    }

                                                                                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                    BOOL v137 = a1 == 7301998 && a2 == 0xE300000000000000LL;
                                                                                                                                    BOOL v138 = v137;
                                                                                                                                    char v8 = 100;
                                                                                                                                    if ((result & 1) == 0 && !v138)
                                                                                                                                    {
                                                                                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                      if ((result & 1) != 0) {
                                                                                                                                        goto LABEL_1002;
                                                                                                                                      }
                                                                                                                                      if (a1 == 1969779566 && a2 == 0xE400000000000000LL)
                                                                                                                                      {
LABEL_1014:
                                                                                                                                        char v8 = 101;
                                                                                                                                        goto LABEL_9;
                                                                                                                                      }

                                                                                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                      BOOL v139 = a1 == 0x756873756ELL && a2 == 0xE500000000000000LL;
                                                                                                                                      BOOL v140 = v139;
                                                                                                                                      char v8 = 101;
                                                                                                                                      if ((result & 1) == 0 && !v140)
                                                                                                                                      {
                                                                                                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                        if ((result & 1) != 0) {
                                                                                                                                          goto LABEL_1014;
                                                                                                                                        }
                                                                                                                                        if (a1 == 1835100015 && a2 == 0xE400000000000000LL)
                                                                                                                                        {
LABEL_1026:
                                                                                                                                          char v8 = 103;
                                                                                                                                          goto LABEL_9;
                                                                                                                                        }

                                                                                                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                        BOOL v141 = a1 == 0x6D6168676FLL && a2 == 0xE500000000000000LL;
                                                                                                                                        BOOL v142 = v141;
                                                                                                                                        char v8 = 103;
                                                                                                                                        if ((result & 1) == 0 && !v142)
                                                                                                                                        {
                                                                                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                          if ((result & 1) != 0) {
                                                                                                                                            goto LABEL_1026;
                                                                                                                                          }
                                                                                                                                          if (a1 == 1801677935 && a2 == 0xE400000000000000LL)
                                                                                                                                          {
LABEL_1038:
                                                                                                                                            char v8 = 104;
                                                                                                                                            goto LABEL_9;
                                                                                                                                          }

                                                                                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                          BOOL v143 = a1 == 0x696B6968636C6FLL && a2 == 0xE700000000000000LL;
                                                                                                                                          BOOL v144 = v143;
                                                                                                                                          char v8 = 104;
                                                                                                                                          if ((result & 1) == 0 && !v144)
                                                                                                                                          {
                                                                                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                            if ((result & 1) != 0) {
                                                                                                                                              goto LABEL_1038;
                                                                                                                                            }
                                                                                                                                            if (a1 == 1751872111 && a2 == 0xE400000000000000LL)
                                                                                                                                            {
LABEL_1050:
                                                                                                                                              char v8 = 112;
                                                                                                                                              goto LABEL_9;
                                                                                                                                            }

                                                                                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                            BOOL v145 = a1 == 0x696B727574646C6FLL && a2 == 0xE900000000000063LL;
                                                                                                                                            BOOL v146 = v145;
                                                                                                                                            char v8 = 112;
                                                                                                                                            if ((result & 1) == 0 && !v146)
                                                                                                                                            {
                                                                                                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                              if ((result & 1) != 0) {
                                                                                                                                                goto LABEL_1050;
                                                                                                                                              }
                                                                                                                                              if (a1 == 1635349103 && a2 == 0xE400000000000000LL)
                                                                                                                                              {
LABEL_1062:
                                                                                                                                                char v8 = 114;
                                                                                                                                                goto LABEL_9;
                                                                                                                                              }

                                                                                                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                              BOOL v147 = a1 == 0x617969726FLL && a2 == 0xE500000000000000LL;
                                                                                                                                              BOOL v148 = v147;
                                                                                                                                              char v8 = 114;
                                                                                                                                              if ((result & 1) == 0 && !v148)
                                                                                                                                              {
                                                                                                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                if ((result & 1) != 0) {
                                                                                                                                                  goto LABEL_1062;
                                                                                                                                                }
                                                                                                                                                if (a1 == 1701278575 && a2 == 0xE400000000000000LL)
                                                                                                                                                {
LABEL_1074:
                                                                                                                                                  char v8 = 115;
                                                                                                                                                  goto LABEL_9;
                                                                                                                                                }

                                                                                                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                BOOL v149 = a1 == 0x656761736FLL && a2 == 0xE500000000000000LL;
                                                                                                                                                BOOL v150 = v149;
                                                                                                                                                char v8 = 115;
                                                                                                                                                if ((result & 1) == 0 && !v150)
                                                                                                                                                {
                                                                                                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                  if ((result & 1) != 0) {
                                                                                                                                                    goto LABEL_1074;
                                                                                                                                                  }
                                                                                                                                                  if (a1 == 1634562927 && a2 == 0xE400000000000000LL)
                                                                                                                                                  {
LABEL_1086:
                                                                                                                                                    char v8 = 116;
                                                                                                                                                    goto LABEL_9;
                                                                                                                                                  }

                                                                                                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                  BOOL v151 = a1 == 0x61796E616D736FLL && a2 == 0xE700000000000000LL;
                                                                                                                                                  BOOL v152 = v151;
                                                                                                                                                  char v8 = 116;
                                                                                                                                                  if ((result & 1) == 0 && !v152)
                                                                                                                                                  {
                                                                                                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                    if ((result & 1) != 0) {
                                                                                                                                                      goto LABEL_1086;
                                                                                                                                                    }
                                                                                                                                                    uint64_t result = 1919382895LL;
                                                                                                                                                    if (a1 == 1919382895 && a2 == 0xE400000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || a1 == 0x7568677975646C6FLL && a2 == 0xE900000000000072LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                    {
                                                                                                                                                      char v8 = 113;
                                                                                                                                                      goto LABEL_9;
                                                                                                                                                    }

                                                                                                                                                    if (a1 == 1835819376 && a2 == 0xE400000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || a1 == 0x6E6572796D6C6170LL && a2 == 0xE900000000000065LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                    {
                                                                                                                                                      char v8 = 118;
                                                                                                                                                      goto LABEL_9;
                                                                                                                                                    }

                                                                                                                                                    if (a1 == 1668637040 && a2 == 0xE400000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || a1 == 0x61686E6963756170LL && a2 == 0xE900000000000075LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                    {
                                                                                                                                                      char v8 = 119;
                                                                                                                                                      goto LABEL_9;
                                                                                                                                                    }

                                                                                                                                                    if (a1 == 1836213616 && a2 == 0xE400000000000000LL)
                                                                                                                                                    {
LABEL_1119:
                                                                                                                                                      char v8 = 108;
                                                                                                                                                      goto LABEL_9;
                                                                                                                                                    }

                                                                                                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                    BOOL v153 = a1 == 0x696D726570646C6FLL && a2 == 0xE900000000000063LL;
                                                                                                                                                    BOOL v154 = v153;
                                                                                                                                                    char v8 = 108;
                                                                                                                                                    if ((result & 1) == 0 && !v154)
                                                                                                                                                    {
                                                                                                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                      if ((result & 1) != 0) {
                                                                                                                                                        goto LABEL_1119;
                                                                                                                                                      }
                                                                                                                                                      if (a1 == 1734436976 && a2 == 0xE400000000000000LL)
                                                                                                                                                      {
LABEL_1131:
                                                                                                                                                        char v8 = 120;
                                                                                                                                                        goto LABEL_9;
                                                                                                                                                      }

                                                                                                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                      BOOL v155 = a1 == 0x61707367616870LL && a2 == 0xE700000000000000LL;
                                                                                                                                                      BOOL v156 = v155;
                                                                                                                                                      char v8 = 120;
                                                                                                                                                      if ((result & 1) == 0 && !v156)
                                                                                                                                                      {
                                                                                                                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                        if ((result & 1) != 0) {
                                                                                                                                                          goto LABEL_1131;
                                                                                                                                                        }
                                                                                                                                                        uint64_t result = 1768712304LL;
                                                                                                                                                        if (a1 == 1768712304 && a2 == 0xE400000000000000LL)
                                                                                                                                                        {
LABEL_1143:
                                                                                                                                                          char v8 = 56;
                                                                                                                                                          goto LABEL_9;
                                                                                                                                                        }

                                                                                                                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                        BOOL v157 = a1 == 0xD000000000000014LL && a2 == 0x80000001810096F0LL;
                                                                                                                                                        BOOL v158 = v157;
                                                                                                                                                        char v8 = 56;
                                                                                                                                                        if ((result & 1) == 0 && !v158)
                                                                                                                                                        {
                                                                                                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                          if ((result & 1) != 0) {
                                                                                                                                                            goto LABEL_1143;
                                                                                                                                                          }
                                                                                                                                                          if (a1 == 1886152816 && a2 == 0xE400000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || a1 == 0x707265746C617370LL && a2 == 0xEE006976616C6861LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                          {
                                                                                                                                                            char v8 = 122;
                                                                                                                                                            goto LABEL_9;
                                                                                                                                                          }

                                                                                                                                                          if (a1 == 2020501616 && a2 == 0xE400000000000000LL)
                                                                                                                                                          {
LABEL_1162:
                                                                                                                                                            char v8 = 121;
                                                                                                                                                            goto LABEL_9;
                                                                                                                                                          }

                                                                                                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                          BOOL v159 = a1 == 0x6963696E656F6870LL && a2 == 0xEA00000000006E61LL;
                                                                                                                                                          BOOL v160 = v159;
                                                                                                                                                          char v8 = 121;
                                                                                                                                                          if ((result & 1) == 0 && !v160)
                                                                                                                                                          {
                                                                                                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                            if ((result & 1) != 0) {
                                                                                                                                                              goto LABEL_1162;
                                                                                                                                                            }
                                                                                                                                                            uint64_t result = 1685220464LL;
                                                                                                                                                            if (a1 == 1685220464 && a2 == 0xE400000000000000LL)
                                                                                                                                                            {
LABEL_1174:
                                                                                                                                                              char v8 = 90;
                                                                                                                                                              goto LABEL_9;
                                                                                                                                                            }

                                                                                                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                            BOOL v161 = a1 == 1868654957 && a2 == 0xE400000000000000LL;
                                                                                                                                                            BOOL v162 = v161;
                                                                                                                                                            char v8 = 90;
                                                                                                                                                            if ((result & 1) == 0 && !v162)
                                                                                                                                                            {
                                                                                                                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                              if ((result & 1) != 0) {
                                                                                                                                                                goto LABEL_1174;
                                                                                                                                                              }
                                                                                                                                                              if (a1 == 1769239152 && a2 == 0xE400000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || (uint64_t result = 0xD000000000000015LL, a1 == 0xD000000000000015LL) && a2 == 0x8000000181009710LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                              {
                                                                                                                                                                char v8 = 57;
                                                                                                                                                                goto LABEL_9;
                                                                                                                                                              }

                                                                                                                                                              uint64_t result = 1735289458LL;
                                                                                                                                                              if (a1 == 1735289458 && a2 == 0xE400000000000000LL)
                                                                                                                                                              {
LABEL_1193:
                                                                                                                                                                char v8 = 123;
                                                                                                                                                                goto LABEL_9;
                                                                                                                                                              }

                                                                                                                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                              BOOL v163 = a1 == 0x676E616A6572LL && a2 == 0xE600000000000000LL;
                                                                                                                                                              BOOL v164 = v163;
                                                                                                                                                              char v8 = 123;
                                                                                                                                                              if ((result & 1) == 0 && !v164)
                                                                                                                                                              {
                                                                                                                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                if ((result & 1) != 0) {
                                                                                                                                                                  goto LABEL_1193;
                                                                                                                                                                }
                                                                                                                                                                if (a1 == 1734897522 && a2 == 0xE400000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || a1 == 0x6F726966696E6168LL && a2 == 0xEE006179676E6968LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                {
                                                                                                                                                                  char v8 = 49;
                                                                                                                                                                  goto LABEL_9;
                                                                                                                                                                }

                                                                                                                                                                if (a1 == 1919841650 && a2 == 0xE400000000000000LL)
                                                                                                                                                                {
LABEL_1212:
                                                                                                                                                                  char v8 = 124;
                                                                                                                                                                  goto LABEL_9;
                                                                                                                                                                }

                                                                                                                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                BOOL v165 = a1 == 0x63696E7572LL && a2 == 0xE500000000000000LL;
                                                                                                                                                                BOOL v166 = v165;
                                                                                                                                                                char v8 = 124;
                                                                                                                                                                if ((result & 1) == 0 && !v166)
                                                                                                                                                                {
                                                                                                                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                  if ((result & 1) != 0) {
                                                                                                                                                                    goto LABEL_1212;
                                                                                                                                                                  }
                                                                                                                                                                  if (a1 == 1919770995 && a2 == 0xE400000000000000LL)
                                                                                                                                                                  {
LABEL_1224:
                                                                                                                                                                    char v8 = 125;
                                                                                                                                                                    goto LABEL_9;
                                                                                                                                                                  }

                                                                                                                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                  BOOL v167 = a1 == 0x61746972616D6173LL && a2 == 0xE90000000000006ELL;
                                                                                                                                                                  BOOL v168 = v167;
                                                                                                                                                                  char v8 = 125;
                                                                                                                                                                  if ((result & 1) == 0 && !v168)
                                                                                                                                                                  {
                                                                                                                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                    if ((result & 1) != 0) {
                                                                                                                                                                      goto LABEL_1224;
                                                                                                                                                                    }
                                                                                                                                                                    uint64_t result = 1651663219LL;
                                                                                                                                                                    if (a1 == 1651663219 && a2 == 0xE400000000000000LL)
                                                                                                                                                                    {
LABEL_1236:
                                                                                                                                                                      char v8 = 111;
                                                                                                                                                                      goto LABEL_9;
                                                                                                                                                                    }

                                                                                                                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                    BOOL v169 = a1 == 0x6874756F73646C6FLL && a2 == 0xEF6E616962617261LL;
                                                                                                                                                                    BOOL v170 = v169;
                                                                                                                                                                    char v8 = 111;
                                                                                                                                                                    if ((result & 1) == 0 && !v170)
                                                                                                                                                                    {
                                                                                                                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                      if ((result & 1) != 0) {
                                                                                                                                                                        goto LABEL_1236;
                                                                                                                                                                      }
                                                                                                                                                                      if (a1 == 1920295283 && a2 == 0xE400000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || a1 == 0x7468736172756173LL && a2 == 0xEA00000000006172LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                      {
                                                                                                                                                                        char v8 = 126;
                                                                                                                                                                        goto LABEL_9;
                                                                                                                                                                      }

                                                                                                                                                                      if (a1 == 2003724147 && a2 == 0xE400000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || a1 == 0x746972776E676973LL && a2 == 0xEB00000000676E69LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                      {
                                                                                                                                                                        char v8 = -126;
                                                                                                                                                                        goto LABEL_9;
                                                                                                                                                                      }

                                                                                                                                                                      if (a1 == 2002872435 && a2 == 0xE400000000000000LL)
                                                                                                                                                                      {
LABEL_1262:
                                                                                                                                                                        char v8 = 0x80;
                                                                                                                                                                        goto LABEL_9;
                                                                                                                                                                      }

                                                                                                                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                      BOOL v171 = a1 == 0x6E616976616873LL && a2 == 0xE700000000000000LL;
                                                                                                                                                                      BOOL v172 = v171;
                                                                                                                                                                      char v8 = 0x80;
                                                                                                                                                                      if ((result & 1) == 0 && !v172)
                                                                                                                                                                      {
                                                                                                                                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                        if ((result & 1) != 0) {
                                                                                                                                                                          goto LABEL_1262;
                                                                                                                                                                        }
                                                                                                                                                                        if (a1 == 1685219443 && a2 == 0xE400000000000000LL)
                                                                                                                                                                        {
LABEL_1274:
                                                                                                                                                                          char v8 = 127;
                                                                                                                                                                          goto LABEL_9;
                                                                                                                                                                        }

                                                                                                                                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                        BOOL v173 = a1 == 0x61646172616873LL && a2 == 0xE700000000000000LL;
                                                                                                                                                                        BOOL v174 = v173;
                                                                                                                                                                        char v8 = 127;
                                                                                                                                                                        if ((result & 1) == 0 && !v174)
                                                                                                                                                                        {
                                                                                                                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                          if ((result & 1) != 0) {
                                                                                                                                                                            goto LABEL_1274;
                                                                                                                                                                          }
                                                                                                                                                                          if (a1 == 1684302195 && a2 == 0xE400000000000000LL)
                                                                                                                                                                          {
LABEL_1286:
                                                                                                                                                                            char v8 = -127;
                                                                                                                                                                            goto LABEL_9;
                                                                                                                                                                          }

                                                                                                                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                          BOOL v175 = a1 == 0x6D616864646973LL && a2 == 0xE700000000000000LL;
                                                                                                                                                                          BOOL v176 = v175;
                                                                                                                                                                          char v8 = -127;
                                                                                                                                                                          if ((result & 1) == 0 && !v176)
                                                                                                                                                                          {
                                                                                                                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                            if ((result & 1) != 0) {
                                                                                                                                                                              goto LABEL_1286;
                                                                                                                                                                            }
                                                                                                                                                                            uint64_t result = 1684957555LL;
                                                                                                                                                                            if (a1 == 1684957555 && a2 == 0xE400000000000000LL)
                                                                                                                                                                            {
LABEL_1298:
                                                                                                                                                                              char v8 = 68;
                                                                                                                                                                              goto LABEL_9;
                                                                                                                                                                            }

                                                                                                                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                            BOOL v177 = a1 == 0x646177616475686BLL && a2 == 0xE900000000000069LL;
                                                                                                                                                                            BOOL v178 = v177;
                                                                                                                                                                            char v8 = 68;
                                                                                                                                                                            if ((result & 1) == 0 && !v178)
                                                                                                                                                                            {
                                                                                                                                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                              if ((result & 1) != 0) {
                                                                                                                                                                                goto LABEL_1298;
                                                                                                                                                                              }
                                                                                                                                                                              if (a1 == 1752066419 && a2 == 0xE400000000000000LL)
                                                                                                                                                                              {
LABEL_1310:
                                                                                                                                                                                char v8 = -125;
                                                                                                                                                                                goto LABEL_9;
                                                                                                                                                                              }

                                                                                                                                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                              BOOL v179 = a1 == 0x616C61686E6973LL && a2 == 0xE700000000000000LL;
                                                                                                                                                                              BOOL v180 = v179;
                                                                                                                                                                              char v8 = -125;
                                                                                                                                                                              if ((result & 1) == 0 && !v180)
                                                                                                                                                                              {
                                                                                                                                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                if ((result & 1) != 0) {
                                                                                                                                                                                  goto LABEL_1310;
                                                                                                                                                                                }
                                                                                                                                                                                if (a1 == 1684500339 && a2 == 0xE400000000000000LL)
                                                                                                                                                                                {
LABEL_1322:
                                                                                                                                                                                  char v8 = -124;
                                                                                                                                                                                  goto LABEL_9;
                                                                                                                                                                                }

                                                                                                                                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                BOOL v181 = a1 == 0x6E616964676F73LL && a2 == 0xE700000000000000LL;
                                                                                                                                                                                BOOL v182 = v181;
                                                                                                                                                                                char v8 = -124;
                                                                                                                                                                                if ((result & 1) == 0 && !v182)
                                                                                                                                                                                {
                                                                                                                                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                  if ((result & 1) != 0) {
                                                                                                                                                                                    goto LABEL_1322;
                                                                                                                                                                                  }
                                                                                                                                                                                  if (a1 == 1869049715 && a2 == 0xE400000000000000LL)
                                                                                                                                                                                  {
LABEL_1334:
                                                                                                                                                                                    char v8 = 110;
                                                                                                                                                                                    goto LABEL_9;
                                                                                                                                                                                  }

                                                                                                                                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                  BOOL v183 = a1 == 0x6964676F73646C6FLL && a2 == 0xEA00000000006E61LL;
                                                                                                                                                                                  BOOL v184 = v183;
                                                                                                                                                                                  char v8 = 110;
                                                                                                                                                                                  if ((result & 1) == 0 && !v184)
                                                                                                                                                                                  {
                                                                                                                                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                    if ((result & 1) != 0) {
                                                                                                                                                                                      goto LABEL_1334;
                                                                                                                                                                                    }
                                                                                                                                                                                    uint64_t result = 1634889587LL;
                                                                                                                                                                                    if (a1 == 1634889587 && a2 == 0xE400000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                    {
                                                                                                                                                                                      char v8 = -123;
                                                                                                                                                                                      goto LABEL_9;
                                                                                                                                                                                    }

                                                                                                                                                                                    if (a1 == 0x706D6F7361726F73LL && a2 == 0xEB00000000676E65LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                    {
                                                                                                                                                                                      char v8 = -123;
                                                                                                                                                                                      goto LABEL_9;
                                                                                                                                                                                    }

                                                                                                                                                                                    if (a1 == 1870229363 && a2 == 0xE400000000000000LL)
                                                                                                                                                                                    {
LABEL_1354:
                                                                                                                                                                                      char v8 = -122;
                                                                                                                                                                                      goto LABEL_9;
                                                                                                                                                                                    }

                                                                                                                                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                    BOOL v185 = a1 == 0x6F626D6F796F73LL && a2 == 0xE700000000000000LL;
                                                                                                                                                                                    BOOL v186 = v185;
                                                                                                                                                                                    char v8 = -122;
                                                                                                                                                                                    if ((result & 1) == 0 && !v186)
                                                                                                                                                                                    {
                                                                                                                                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                      if ((result & 1) != 0) {
                                                                                                                                                                                        goto LABEL_1354;
                                                                                                                                                                                      }
                                                                                                                                                                                      if (a1 == 1684960627 && a2 == 0xE400000000000000LL)
                                                                                                                                                                                      {
LABEL_1366:
                                                                                                                                                                                        char v8 = -121;
                                                                                                                                                                                        goto LABEL_9;
                                                                                                                                                                                      }

                                                                                                                                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                      BOOL v187 = a1 == 0x73656E61646E7573LL && a2 == 0xE900000000000065LL;
                                                                                                                                                                                      BOOL v188 = v187;
                                                                                                                                                                                      char v8 = -121;
                                                                                                                                                                                      if ((result & 1) == 0 && !v188)
                                                                                                                                                                                      {
                                                                                                                                                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                        if ((result & 1) != 0) {
                                                                                                                                                                                          goto LABEL_1366;
                                                                                                                                                                                        }
                                                                                                                                                                                        if (a1 == 1869379955 && a2 == 0xE400000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || a1 == 0x616E69746F6C7973LL && a2 == 0xEB00000000697267LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                        {
                                                                                                                                                                                          char v8 = -120;
                                                                                                                                                                                          goto LABEL_9;
                                                                                                                                                                                        }

                                                                                                                                                                                        if (a1 == 1668446579 && a2 == 0xE400000000000000LL)
                                                                                                                                                                                        {
LABEL_1385:
                                                                                                                                                                                          char v8 = -119;
                                                                                                                                                                                          goto LABEL_9;
                                                                                                                                                                                        }

                                                                                                                                                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                        BOOL v189 = a1 == 0x636169727973LL && a2 == 0xE600000000000000LL;
                                                                                                                                                                                        BOOL v190 = v189;
                                                                                                                                                                                        char v8 = -119;
                                                                                                                                                                                        if ((result & 1) == 0 && !v190)
                                                                                                                                                                                        {
                                                                                                                                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                          if ((result & 1) != 0) {
                                                                                                                                                                                            goto LABEL_1385;
                                                                                                                                                                                          }
                                                                                                                                                                                          if (a1 == 1650942324 && a2 == 0xE400000000000000LL)
                                                                                                                                                                                          {
LABEL_1397:
                                                                                                                                                                                            char v8 = -117;
                                                                                                                                                                                            goto LABEL_9;
                                                                                                                                                                                          }

                                                                                                                                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                          BOOL v191 = a1 == 0x61776E6162676174LL && a2 == 0xE800000000000000LL;
                                                                                                                                                                                          BOOL v192 = v191;
                                                                                                                                                                                          char v8 = -117;
                                                                                                                                                                                          if ((result & 1) == 0 && !v192)
                                                                                                                                                                                          {
                                                                                                                                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                            if ((result & 1) != 0) {
                                                                                                                                                                                              goto LABEL_1397;
                                                                                                                                                                                            }
                                                                                                                                                                                            if (a1 == 1919639924 && a2 == 0xE400000000000000LL)
                                                                                                                                                                                            {
LABEL_1409:
                                                                                                                                                                                              char v8 = -113;
                                                                                                                                                                                              goto LABEL_9;
                                                                                                                                                                                            }

                                                                                                                                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                            BOOL v193 = a1 == 0x69726B6174LL && a2 == 0xE500000000000000LL;
                                                                                                                                                                                            BOOL v194 = v193;
                                                                                                                                                                                            char v8 = -113;
                                                                                                                                                                                            if ((result & 1) == 0 && !v194)
                                                                                                                                                                                            {
                                                                                                                                                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                              if ((result & 1) != 0) {
                                                                                                                                                                                                goto LABEL_1409;
                                                                                                                                                                                              }
                                                                                                                                                                                              if (a1 == 1701601652 && a2 == 0xE400000000000000LL)
                                                                                                                                                                                              {
LABEL_1421:
                                                                                                                                                                                                char v8 = -116;
                                                                                                                                                                                                goto LABEL_9;
                                                                                                                                                                                              }

                                                                                                                                                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                              BOOL v195 = a1 == 0x656C696174LL && a2 == 0xE500000000000000LL;
                                                                                                                                                                                              BOOL v196 = v195;
                                                                                                                                                                                              char v8 = -116;
                                                                                                                                                                                              if ((result & 1) == 0 && !v196)
                                                                                                                                                                                              {
                                                                                                                                                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                if ((result & 1) != 0) {
                                                                                                                                                                                                  goto LABEL_1421;
                                                                                                                                                                                                }
                                                                                                                                                                                                if (a1 == 1970037108 && a2 == 0xE400000000000000LL)
                                                                                                                                                                                                {
LABEL_1433:
                                                                                                                                                                                                  char v8 = 99;
                                                                                                                                                                                                  goto LABEL_9;
                                                                                                                                                                                                }

                                                                                                                                                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                BOOL v197 = a1 == 0x756C69617477656ELL && a2 == 0xE900000000000065LL;
                                                                                                                                                                                                BOOL v198 = v197;
                                                                                                                                                                                                char v8 = 99;
                                                                                                                                                                                                if ((result & 1) == 0 && !v198)
                                                                                                                                                                                                {
                                                                                                                                                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                  if ((result & 1) != 0) {
                                                                                                                                                                                                    goto LABEL_1433;
                                                                                                                                                                                                  }
                                                                                                                                                                                                  if (a1 == 1819107700 && a2 == 0xE400000000000000LL)
                                                                                                                                                                                                  {
LABEL_1445:
                                                                                                                                                                                                    char v8 = -112;
                                                                                                                                                                                                    goto LABEL_9;
                                                                                                                                                                                                  }

                                                                                                                                                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                  BOOL v199 = a1 == 0x6C696D6174LL && a2 == 0xE500000000000000LL;
                                                                                                                                                                                                  BOOL v200 = v199;
                                                                                                                                                                                                  char v8 = -112;
                                                                                                                                                                                                  if ((result & 1) == 0 && !v200)
                                                                                                                                                                                                  {
                                                                                                                                                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                    if ((result & 1) != 0) {
                                                                                                                                                                                                      goto LABEL_1445;
                                                                                                                                                                                                    }
                                                                                                                                                                                                    uint64_t result = 1735287156LL;
                                                                                                                                                                                                    if (a1 == 1735287156 && a2 == 0xE400000000000000LL)
                                                                                                                                                                                                    {
LABEL_1457:
                                                                                                                                                                                                      char v8 = -110;
                                                                                                                                                                                                      goto LABEL_9;
                                                                                                                                                                                                    }

                                                                                                                                                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                    BOOL v201 = a1 == 0x7475676E6174LL && a2 == 0xE600000000000000LL;
                                                                                                                                                                                                    BOOL v202 = v201;
                                                                                                                                                                                                    char v8 = -110;
                                                                                                                                                                                                    if ((result & 1) == 0 && !v202)
                                                                                                                                                                                                    {
                                                                                                                                                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                      if ((result & 1) != 0) {
                                                                                                                                                                                                        goto LABEL_1457;
                                                                                                                                                                                                      }
                                                                                                                                                                                                      if (a1 == 1953915252 && a2 == 0xE400000000000000LL)
                                                                                                                                                                                                      {
LABEL_1469:
                                                                                                                                                                                                        char v8 = -114;
                                                                                                                                                                                                        goto LABEL_9;
                                                                                                                                                                                                      }

                                                                                                                                                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                      BOOL v203 = a1 == 0x74656976696174LL && a2 == 0xE700000000000000LL;
                                                                                                                                                                                                      BOOL v204 = v203;
                                                                                                                                                                                                      char v8 = -114;
                                                                                                                                                                                                      if ((result & 1) == 0 && !v204)
                                                                                                                                                                                                      {
                                                                                                                                                                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                        if ((result & 1) != 0) {
                                                                                                                                                                                                          goto LABEL_1469;
                                                                                                                                                                                                        }
                                                                                                                                                                                                        uint64_t result = 1970038132LL;
                                                                                                                                                                                                        if (a1 == 1970038132 && a2 == 0xE400000000000000LL)
                                                                                                                                                                                                        {
LABEL_1481:
                                                                                                                                                                                                          char v8 = -109;
                                                                                                                                                                                                          goto LABEL_9;
                                                                                                                                                                                                        }

                                                                                                                                                                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                        BOOL v205 = a1 == 0x7567756C6574LL && a2 == 0xE600000000000000LL;
                                                                                                                                                                                                        BOOL v206 = v205;
                                                                                                                                                                                                        char v8 = -109;
                                                                                                                                                                                                        if ((result & 1) == 0 && !v206)
                                                                                                                                                                                                        {
                                                                                                                                                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                          if ((result & 1) != 0) {
                                                                                                                                                                                                            goto LABEL_1481;
                                                                                                                                                                                                          }
                                                                                                                                                                                                          uint64_t result = 1735288436LL;
                                                                                                                                                                                                          if (a1 == 1735288436 && a2 == 0xE400000000000000LL)
                                                                                                                                                                                                          {
LABEL_1493:
                                                                                                                                                                                                            char v8 = -105;
                                                                                                                                                                                                            goto LABEL_9;
                                                                                                                                                                                                          }

                                                                                                                                                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                          BOOL v207 = a1 == 0x6867616E69666974LL && a2 == 0xE800000000000000LL;
                                                                                                                                                                                                          BOOL v208 = v207;
                                                                                                                                                                                                          char v8 = -105;
                                                                                                                                                                                                          if ((result & 1) == 0 && !v208)
                                                                                                                                                                                                          {
                                                                                                                                                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                            if ((result & 1) != 0) {
                                                                                                                                                                                                              goto LABEL_1493;
                                                                                                                                                                                                            }
                                                                                                                                                                                                            if (a1 == 1735157620 && a2 == 0xE400000000000000LL)
                                                                                                                                                                                                            {
LABEL_1505:
                                                                                                                                                                                                              char v8 = -118;
                                                                                                                                                                                                              goto LABEL_9;
                                                                                                                                                                                                            }

                                                                                                                                                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                            BOOL v209 = a1 == 0x676F6C61676174LL && a2 == 0xE700000000000000LL;
                                                                                                                                                                                                            BOOL v210 = v209;
                                                                                                                                                                                                            char v8 = -118;
                                                                                                                                                                                                            if ((result & 1) == 0 && !v210)
                                                                                                                                                                                                            {
                                                                                                                                                                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                              if ((result & 1) != 0) {
                                                                                                                                                                                                                goto LABEL_1505;
                                                                                                                                                                                                              }
                                                                                                                                                                                                              if (a1 == 1633773684 && a2 == 0xE400000000000000LL)
                                                                                                                                                                                                              {
LABEL_1517:
                                                                                                                                                                                                                char v8 = -108;
                                                                                                                                                                                                                goto LABEL_9;
                                                                                                                                                                                                              }

                                                                                                                                                                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                              BOOL v211 = a1 == 0x616E61616874LL && a2 == 0xE600000000000000LL;
                                                                                                                                                                                                              BOOL v212 = v211;
                                                                                                                                                                                                              char v8 = -108;
                                                                                                                                                                                                              if ((result & 1) == 0 && !v212)
                                                                                                                                                                                                              {
                                                                                                                                                                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                if ((result & 1) != 0) {
                                                                                                                                                                                                                  goto LABEL_1517;
                                                                                                                                                                                                                }
                                                                                                                                                                                                                uint64_t result = 1767991412LL;
                                                                                                                                                                                                                if (a1 == 1767991412 && a2 == 0xE400000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                                {
                                                                                                                                                                                                                  char v8 = -107;
                                                                                                                                                                                                                  goto LABEL_9;
                                                                                                                                                                                                                }

                                                                                                                                                                                                                if (a1 == 1952606580 && a2 == 0xE400000000000000LL)
                                                                                                                                                                                                                {
LABEL_1533:
                                                                                                                                                                                                                  char v8 = -106;
                                                                                                                                                                                                                  goto LABEL_9;
                                                                                                                                                                                                                }

                                                                                                                                                                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                BOOL v213 = a1 == 0x6E617465626974LL && a2 == 0xE700000000000000LL;
                                                                                                                                                                                                                BOOL v214 = v213;
                                                                                                                                                                                                                char v8 = -106;
                                                                                                                                                                                                                if ((result & 1) == 0 && !v214)
                                                                                                                                                                                                                {
                                                                                                                                                                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                  if ((result & 1) != 0) {
                                                                                                                                                                                                                    goto LABEL_1533;
                                                                                                                                                                                                                  }
                                                                                                                                                                                                                  if (a1 == 1752328564 && a2 == 0xE400000000000000LL)
                                                                                                                                                                                                                  {
LABEL_1545:
                                                                                                                                                                                                                    char v8 = -104;
                                                                                                                                                                                                                    goto LABEL_9;
                                                                                                                                                                                                                  }

                                                                                                                                                                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                  BOOL v215 = a1 == 0x61747568726974LL && a2 == 0xE700000000000000LL;
                                                                                                                                                                                                                  BOOL v216 = v215;
                                                                                                                                                                                                                  char v8 = -104;
                                                                                                                                                                                                                  if ((result & 1) == 0 && !v216)
                                                                                                                                                                                                                  {
                                                                                                                                                                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                    if ((result & 1) != 0) {
                                                                                                                                                                                                                      goto LABEL_1545;
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                    if (a1 == 1634954868 && a2 == 0xE400000000000000LL)
                                                                                                                                                                                                                    {
LABEL_1557:
                                                                                                                                                                                                                      char v8 = -111;
                                                                                                                                                                                                                      goto LABEL_9;
                                                                                                                                                                                                                    }

                                                                                                                                                                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                    BOOL v217 = a1 == 0x6173676E6174LL && a2 == 0xE600000000000000LL;
                                                                                                                                                                                                                    BOOL v218 = v217;
                                                                                                                                                                                                                    char v8 = -111;
                                                                                                                                                                                                                    if ((result & 1) == 0 && !v218)
                                                                                                                                                                                                                    {
                                                                                                                                                                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                      if ((result & 1) != 0) {
                                                                                                                                                                                                                        goto LABEL_1557;
                                                                                                                                                                                                                      }
                                                                                                                                                                                                                      if (a1 == 1869901684 && a2 == 0xE400000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                                      {
                                                                                                                                                                                                                        char v8 = -103;
                                                                                                                                                                                                                        goto LABEL_9;
                                                                                                                                                                                                                      }

                                                                                                                                                                                                                      if (a1 == 1918986101 && a2 == 0xE400000000000000LL)
                                                                                                                                                                                                                      {
LABEL_1573:
                                                                                                                                                                                                                        char v8 = -102;
                                                                                                                                                                                                                        goto LABEL_9;
                                                                                                                                                                                                                      }

                                                                                                                                                                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                      BOOL v219 = a1 == 0x6369746972616775LL && a2 == 0xE800000000000000LL;
                                                                                                                                                                                                                      BOOL v220 = v219;
                                                                                                                                                                                                                      char v8 = -102;
                                                                                                                                                                                                                      if ((result & 1) == 0 && !v220)
                                                                                                                                                                                                                      {
                                                                                                                                                                                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                        if ((result & 1) != 0) {
                                                                                                                                                                                                                          goto LABEL_1573;
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                        if (a1 == 1768513910 && a2 == 0xE400000000000000LL)
                                                                                                                                                                                                                        {
LABEL_1585:
                                                                                                                                                                                                                          char v8 = -100;
                                                                                                                                                                                                                          goto LABEL_9;
                                                                                                                                                                                                                        }

                                                                                                                                                                                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                        BOOL v221 = a1 == 6906230 && a2 == 0xE300000000000000LL;
                                                                                                                                                                                                                        BOOL v222 = v221;
                                                                                                                                                                                                                        char v8 = -100;
                                                                                                                                                                                                                        if ((result & 1) == 0 && !v222)
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                          if ((result & 1) != 0) {
                                                                                                                                                                                                                            goto LABEL_1585;
                                                                                                                                                                                                                          }
                                                                                                                                                                                                                          if (a1 == 1752459638 && a2 == 0xE400000000000000LL)
                                                                                                                                                                                                                          {
LABEL_1597:
                                                                                                                                                                                                                            char v8 = -99;
                                                                                                                                                                                                                            goto LABEL_9;
                                                                                                                                                                                                                          }

                                                                                                                                                                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                          BOOL v223 = a1 == 0x6971756B68746976LL && a2 == 0xE800000000000000LL;
                                                                                                                                                                                                                          BOOL v224 = v223;
                                                                                                                                                                                                                          char v8 = -99;
                                                                                                                                                                                                                          if ((result & 1) == 0 && !v224)
                                                                                                                                                                                                                          {
                                                                                                                                                                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                            if ((result & 1) != 0) {
                                                                                                                                                                                                                              goto LABEL_1597;
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                            if (a1 == 1634886007 && a2 == 0xE400000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || a1 == 0x6963676E61726177LL && a2 == 0xEA00000000006974LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                                            {
                                                                                                                                                                                                                              char v8 = -97;
                                                                                                                                                                                                                              goto LABEL_9;
                                                                                                                                                                                                                            }

                                                                                                                                                                                                                            if (a1 == 1869112183 && a2 == 0xE400000000000000LL)
                                                                                                                                                                                                                            {
LABEL_1616:
                                                                                                                                                                                                                              char v8 = -98;
                                                                                                                                                                                                                              goto LABEL_9;
                                                                                                                                                                                                                            }

                                                                                                                                                                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                            BOOL v225 = a1 == 0x6F68636E6177LL && a2 == 0xE600000000000000LL;
                                                                                                                                                                                                                            BOOL v226 = v225;
                                                                                                                                                                                                                            char v8 = -98;
                                                                                                                                                                                                                            if ((result & 1) == 0 && !v226)
                                                                                                                                                                                                                            {
                                                                                                                                                                                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                              if ((result & 1) != 0) {
                                                                                                                                                                                                                                goto LABEL_1616;
                                                                                                                                                                                                                              }
                                                                                                                                                                                                                              if (a1 == 1868918904 && a2 == 0xE400000000000000LL)
                                                                                                                                                                                                                              {
LABEL_1628:
                                                                                                                                                                                                                                char v8 = 109;
                                                                                                                                                                                                                                goto LABEL_9;
                                                                                                                                                                                                                              }

                                                                                                                                                                                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                              BOOL v227 = a1 == 0x6973726570646C6FLL && a2 == 0xEA00000000006E61LL;
                                                                                                                                                                                                                              BOOL v228 = v227;
                                                                                                                                                                                                                              char v8 = 109;
                                                                                                                                                                                                                              if ((result & 1) == 0 && !v228)
                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                                if ((result & 1) != 0) {
                                                                                                                                                                                                                                  goto LABEL_1628;
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                if (a1 == 2020963192 && a2 == 0xE400000000000000LL)
                                                                                                                                                                                                                                {
LABEL_1640:
                                                                                                                                                                                                                                  char v8 = 26;
                                                                                                                                                                                                                                  goto LABEL_9;
                                                                                                                                                                                                                                }

                                                                                                                                                                                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                                BOOL v229 = a1 == 0x726F6669656E7563LL && a2 == 0xE90000000000006DLL;
                                                                                                                                                                                                                                BOOL v230 = v229;
                                                                                                                                                                                                                                char v8 = 26;
                                                                                                                                                                                                                                if ((result & 1) == 0 && !v230)
                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                                  if ((result & 1) != 0) {
                                                                                                                                                                                                                                    goto LABEL_1640;
                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                  if (a1 == 1769629049 && a2 == 0xE400000000000000LL)
                                                                                                                                                                                                                                  {
LABEL_1652:
                                                                                                                                                                                                                                    char v8 = -96;
                                                                                                                                                                                                                                    goto LABEL_9;
                                                                                                                                                                                                                                  }

                                                                                                                                                                                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                                  BOOL v231 = a1 == 0x6964697A6579LL && a2 == 0xE600000000000000LL;
                                                                                                                                                                                                                                  BOOL v232 = v231;
                                                                                                                                                                                                                                  char v8 = -96;
                                                                                                                                                                                                                                  if ((result & 1) == 0 && !v232)
                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                                    if ((result & 1) != 0) {
                                                                                                                                                                                                                                      goto LABEL_1652;
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                    uint64_t result = 1768515961LL;
                                                                                                                                                                                                                                    if (a1 == 1768515961 && a2 == 0xE400000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || a1 == 27001 && a2 == 0xE200000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                      char v8 = -95;
                                                                                                                                                                                                                                      goto LABEL_9;
                                                                                                                                                                                                                                    }

                                                                                                                                                                                                                                    if (a1 == 1651401082 && a2 == 0xE400000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || a1 == 0x617A6162616E617ALL && a2 == 0xEF65726175717372LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                      char v8 = -94;
                                                                                                                                                                                                                                      goto LABEL_9;
                                                                                                                                                                                                                                    }

                                                                                                                                                                                                                                    uint64_t result = 1752066426LL;
                                                                                                                                                                                                                                    if (a1 == 1752066426 && a2 == 0xE400000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || a1 == 0x6574697265686E69LL && a2 == 0xE900000000000064LL)
                                                                                                                                                                                                                                    {
LABEL_1681:
                                                                                                                                                                                                                                      char v8 = 55;
                                                                                                                                                                                                                                      goto LABEL_9;
                                                                                                                                                                                                                                    }

                                                                                                                                                                                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                                    BOOL v233 = a1 == 1767989617 && a2 == 0xE400000000000000LL;
                                                                                                                                                                                                                                    BOOL v234 = v233;
                                                                                                                                                                                                                                    char v8 = 55;
                                                                                                                                                                                                                                    if ((result & 1) == 0 && !v234)
                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                                      if ((result & 1) != 0) {
                                                                                                                                                                                                                                        goto LABEL_1681;
                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                      if (a1 == 2038004090 && a2 == 0xE400000000000000LL)
                                                                                                                                                                                                                                      {
LABEL_1693:
                                                                                                                                                                                                                                        char v8 = 24;
                                                                                                                                                                                                                                        goto LABEL_9;
                                                                                                                                                                                                                                      }

                                                                                                                                                                                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                                      BOOL v236 = a1 == 0x6E6F6D6D6F63LL && a2 == 0xE600000000000000LL;
                                                                                                                                                                                                                                      char v8 = 24;
                                                                                                                                                                                                                                      if ((result & 1) == 0 && !v236)
                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                                        if ((result & 1) != 0) {
                                                                                                                                                                                                                                          goto LABEL_1693;
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                        if (a1 == 2054847098 && a2 == 0xE400000000000000LL)
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                          char v8 = -101;
                                                                                                                                                                                                                                        }

                                                                                                                                                                                                                                        else
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                                          BOOL v238 = a1 == 0x6E776F6E6B6E75LL && a2 == 0xE700000000000000LL;
                                                                                                                                                                                                                                          char v8 = -101;
                                                                                                                                                                                                                                          if ((result & 1) == 0 && !v238)
                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                                            if ((result & 1) != 0) {
                                                                                                                                                                                                                                              char v8 = -101;
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                            else {
                                                                                                                                                                                                                                              char v8 = -93;
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                              }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                          }
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                      }
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                  }
                                                                                                                                                                                                                }
                                                                                                                                                                                                              }
                                                                                                                                                                                                            }
                                                                                                                                                                                                          }
                                                                                                                                                                                                        }
                                                                                                                                                                                                      }
                                                                                                                                                                                                    }
                                                                                                                                                                                                  }
                                                                                                                                                                                                }
                                                                                                                                                                                              }
                                                                                                                                                                                            }
                                                                                                                                                                                          }
                                                                                                                                                                                        }
                                                                                                                                                                                      }
                                                                                                                                                                                    }
                                                                                                                                                                                  }
                                                                                                                                                                                }
                                                                                                                                                                              }
                                                                                                                                                                            }
                                                                                                                                                                          }
                                                                                                                                                                        }
                                                                                                                                                                      }
                                                                                                                                                                    }
                                                                                                                                                                  }
                                                                                                                                                                }
                                                                                                                                                              }
                                                                                                                                                            }
                                                                                                                                                          }
                                                                                                                                                        }
                                                                                                                                                      }
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                                              }
                                                                                                                                            }
                                                                                                                                          }
                                                                                                                                        }
                                                                                                                                      }
                                                                                                                                    }
                                                                                                                                  }
                                                                                                                                }
                                                                                                                              }
                                                                                                                            }
                                                                                                                          }
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

uint64_t closure #1 in static Parser.classifyBlockProperty(_:valueOnly:)@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, __int16 *a3@<X8>)
{
  uint64_t v4 = result;
  if (result == 0x6D616C6461LL && a2 == 0xE500000000000000LL
    || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
  {
    __int16 v6 = 289;
    goto LABEL_5;
  }

  if (v4 == 0x756E6E6165676561LL && a2 == 0xED0000737265626DLL
    || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
  {
    __int16 v6 = 166;
    goto LABEL_5;
  }

  if (v4 == 1836017761 && a2 == 0xE400000000000000LL
    || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
  {
    __int16 v6 = 231;
    goto LABEL_5;
  }

  if (v4 == 0x63696D6568636C61LL && a2 == 0xEA00000000006C61LL
    || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
    || v4 == 0xD000000000000011LL && a2 == 0x80000001810097F0LL
    || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
  {
    __int16 v6 = 302;
    goto LABEL_5;
  }

  if (v4 == 0x7465626168706C61LL && a2 == 0xEC00000066706369LL
    || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
    || v4 == 0xD00000000000001BLL && a2 == 0x8000000181009810LL
    || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
  {
    __int16 v6 = 154;
    goto LABEL_5;
  }

  if (v4 == 0xD000000000000014LL && a2 == 0x8000000181009650LL
    || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
  {
    __int16 v6 = 253;
    goto LABEL_5;
  }

  if (v4 == 0xD000000000000011LL && a2 == 0x8000000181009830LL)
  {
LABEL_34:
    __int16 v6 = 276;
    goto LABEL_5;
  }

  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL v8 = v4 == 0xD00000000000001BLL && a2 == 0x8000000181009850LL;
  __int16 v6 = 276;
  if ((result & 1) == 0 && !v8)
  {
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if ((result & 1) != 0) {
      goto LABEL_34;
    }
    if (v4 == 0xD000000000000013LL && a2 == 0x8000000181009870LL
      || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
      __int16 v6 = 167;
      goto LABEL_5;
    }

    if (v4 == 0x73746E6569636E61LL && a2 == 0xEE00736C6F626D79LL
      || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
      __int16 v6 = 168;
      goto LABEL_5;
    }

    if (v4 == 0x636962617261LL && a2 == 0xE600000000000000LL
      || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
      __int16 v6 = 12;
      goto LABEL_5;
    }

    if (v4 == 0x7865636962617261LL && a2 == 0xEA00000000006174LL)
    {
LABEL_58:
      __int16 v6 = 21;
      goto LABEL_5;
    }

    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    BOOL v9 = v4 == 0x7865636962617261LL && a2 == 0xEF616465646E6574LL;
    BOOL v10 = v9;
    __int16 v6 = 21;
    if ((result & 1) == 0 && !v10)
    {
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) != 0) {
        goto LABEL_58;
      }
      if (v4 == 0x7865636962617261LL && a2 == 0xEA00000000006274LL)
      {
LABEL_70:
        __int16 v6 = 20;
        goto LABEL_5;
      }

      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      BOOL v11 = v4 == 0x7865636962617261LL && a2 == 0xEF626465646E6574LL;
      BOOL v12 = v11;
      __int16 v6 = 20;
      if ((result & 1) == 0 && !v12)
      {
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) != 0) {
          goto LABEL_70;
        }
        if (v4 == 0x616D636962617261LL && a2 == 0xEA00000000006874LL
          || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
          || v4 == 0xD000000000000023LL && a2 == 0x8000000181009890LL
          || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
        {
          __int16 v6 = 292;
          goto LABEL_5;
        }

        if (v4 == 0x6670636962617261LL && a2 == 0xE900000000000061LL
          || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
          || v4 == 0xD000000000000018LL && a2 == 0x80000001810098C0LL
          || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
        {
          __int16 v6 = 155;
          goto LABEL_5;
        }

        if (v4 == 0x6670636962617261LL && a2 == 0xE900000000000062LL)
        {
LABEL_105:
          __int16 v6 = 161;
          goto LABEL_5;
        }

        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        BOOL v13 = v4 == 0xD000000000000018LL && a2 == 0x80000001810098E0LL;
        BOOL v14 = v13;
        __int16 v6 = 161;
        if ((result & 1) == 0 && !v14)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) != 0) {
            goto LABEL_105;
          }
          if (v4 == 0x7573636962617261LL && a2 == 0xE900000000000070LL
            || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
            || v4 == 0xD000000000000010LL && a2 == 0x8000000181009900LL
            || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
          {
            __int16 v6 = 14;
            goto LABEL_5;
          }

          if (v4 == 0x6E61696E656D7261LL && a2 == 0xE800000000000000LL
            || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
          {
            __int16 v6 = 10;
            goto LABEL_5;
          }

          if (v4 == 0x73776F727261LL && a2 == 0xE600000000000000LL
            || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
          {
            __int16 v6 = 78;
            goto LABEL_5;
          }

          if (v4 == 0x6969637361LL && a2 == 0xE500000000000000LL) {
            goto LABEL_123;
          }
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          __int16 v6 = 0;
          if ((result & 1) != 0) {
            goto LABEL_5;
          }
          if (v4 == 0x74616C6369736162LL && a2 == 0xEA00000000006E69LL)
          {
LABEL_123:
            __int16 v6 = 0;
            goto LABEL_5;
          }

          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          __int16 v6 = 0;
          if ((result & 1) != 0) {
            goto LABEL_5;
          }
          if (v4 == 0x6E617473657661LL && a2 == 0xE700000000000000LL
            || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
          {
            __int16 v6 = 200;
            goto LABEL_5;
          }

          if (v4 == 0x6573656E696C6162LL && a2 == 0xE800000000000000LL
            || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
          {
            __int16 v6 = 58;
            goto LABEL_5;
          }

          if (v4 == 0x6D756D6162LL && a2 == 0xE500000000000000LL
            || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
          {
            __int16 v6 = 126;
            goto LABEL_5;
          }

          if (v4 == 0x7075736D756D6162LL && a2 == 0xE800000000000000LL
            || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
            || v4 == 0x7075736D756D6162LL && a2 == 0xEF746E656D656C70LL
            || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
          {
            __int16 v6 = 254;
            goto LABEL_5;
          }

          if (v4 == 0x6861766173736162LL && a2 == 0xE800000000000000LL
            || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
          {
            __int16 v6 = 257;
            goto LABEL_5;
          }

          if (v4 == 0x6B61746162LL && a2 == 0xE500000000000000LL
            || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
          {
            __int16 v6 = 60;
            goto LABEL_5;
          }

          if (v4 == 0x696C61676E6562LL && a2 == 0xE700000000000000LL
            || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
          {
            __int16 v6 = 23;
            goto LABEL_5;
          }

          if (v4 == 0x6B75736B69616862LL && a2 == 0xE900000000000069LL
            || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
          {
            __int16 v6 = 240;
            goto LABEL_5;
          }

          if (v4 == 0x656C656B636F6C62LL && a2 == 0xED000073746E656DLL
            || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
          {
            __int16 v6 = 85;
            goto LABEL_5;
          }

          if (v4 == 0x6F666F6D6F706F62LL && a2 == 0xE800000000000000LL
            || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
          {
            __int16 v6 = 110;
            goto LABEL_5;
          }

          if (v4 == 0x6F666F6D6F706F62LL && a2 == 0xEB00000000747865LL)
          {
LABEL_182:
            __int16 v6 = 113;
            goto LABEL_5;
          }

          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          BOOL v15 = v4 == 0xD000000000000010LL && a2 == 0x8000000181009920LL;
          BOOL v16 = v15;
          __int16 v6 = 113;
          if ((result & 1) == 0 && !v16)
          {
            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if ((result & 1) != 0) {
              goto LABEL_182;
            }
            if (v4 == 0x6977617264786F62LL && a2 == 0xEA0000000000676ELL
              || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
            {
              __int16 v6 = 84;
              goto LABEL_5;
            }

            if (v4 == 0x696D68617262LL && a2 == 0xE600000000000000LL
              || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
            {
              __int16 v6 = 214;
              goto LABEL_5;
            }

            if (v4 == 0x656C6C69617262LL && a2 == 0xE700000000000000LL
              || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
              || v4 == 0x70656C6C69617262LL && a2 == 0xEF736E7265747461LL
              || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
            {
              __int16 v6 = 91;
              goto LABEL_5;
            }

            if (v4 == 0x6573656E69677562LL && a2 == 0xE800000000000000LL
              || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
            {
              __int16 v6 = 55;
              goto LABEL_5;
            }

            if (v4 == 0x6469687562LL && a2 == 0xE500000000000000LL
              || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
            {
              __int16 v6 = 46;
              goto LABEL_5;
            }

            if (v4 == 0x6E69746E617A7962LL && a2 == 0xEE00636973756D65LL
              || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
              || v4 == 0xD000000000000017LL && a2 == 0x8000000181009940LL
              || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
            {
              __int16 v6 = 274;
              goto LABEL_5;
            }

            if (v4 == 0x6E6169726163LL && a2 == 0xE600000000000000LL
              || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
            {
              __int16 v6 = 171;
              goto LABEL_5;
            }

            if (v4 == 0xD000000000000011LL && a2 == 0x80000001810095F0LL
              || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
            {
              __int16 v6 = 183;
              goto LABEL_5;
            }

            if (v4 == 0x616D6B616863LL && a2 == 0xE600000000000000LL
              || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
            {
              __int16 v6 = 217;
              goto LABEL_5;
            }

            if (v4 == 1835100259 && a2 == 0xE400000000000000LL
              || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
            {
              __int16 v6 = 139;
              goto LABEL_5;
            }

            if (v4 == 0x65656B6F72656863LL && a2 == 0xE800000000000000LL
              || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
            {
              __int16 v6 = 40;
              goto LABEL_5;
            }

            if (v4 == 0x65656B6F72656863LL && a2 == 0xEB00000000707573LL
              || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
              || v4 == 0xD000000000000012LL && a2 == 0x8000000181009960LL
              || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
            {
              __int16 v6 = 145;
              goto LABEL_5;
            }

            if (v4 == 0x6D79737373656863LL && a2 == 0xEC000000736C6F62LL
              || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
            {
              __int16 v6 = 306;
              goto LABEL_5;
            }

            if (v4 == 0x696D7361726F6863LL && a2 == 0xEA00000000006E61LL
              || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
            {
              __int16 v6 = 212;
              goto LABEL_5;
            }

            if (v4 == 7039587 && a2 == 0xE300000000000000LL)
            {
LABEL_259:
              __int16 v6 = 120;
              goto LABEL_5;
            }

            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
            BOOL v17 = v4 == 0xD000000000000014LL && a2 == 0x8000000181009980LL;
            BOOL v18 = v17;
            __int16 v6 = 120;
            if ((result & 1) == 0 && !v18)
            {
              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
              if ((result & 1) != 0) {
                goto LABEL_259;
              }
              if (v4 == 0x61706D6F636B6A63LL && a2 == 0xE900000000000074LL)
              {
LABEL_271:
                __int16 v6 = 117;
                goto LABEL_5;
              }

              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
              BOOL v19 = v4 == 0xD000000000000010LL && a2 == 0x80000001810099A0LL;
              BOOL v20 = v19;
              __int16 v6 = 117;
              if ((result & 1) == 0 && !v20)
              {
                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                if ((result & 1) != 0) {
                  goto LABEL_271;
                }
                if (v4 == 0x61706D6F636B6A63LL && a2 == 0xEE00736D726F6674LL
                  || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                  || v4 == 0xD000000000000015LL && a2 == 0x80000001810099C0LL
                  || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                {
                  __int16 v6 = 159;
                  goto LABEL_5;
                }

                if (v4 == 0xD000000000000013LL && a2 == 0x80000001810099E0LL
                  || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                  || v4 == 0xD00000000000001ALL && a2 == 0x8000000181009A00LL
                  || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                {
                  __int16 v6 = 153;
                  goto LABEL_5;
                }

                if (v4 == 0xD000000000000016LL && a2 == 0x8000000181009A20LL
                  || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                  || (uint64_t result = 0xD000000000000024LL, v4 == 0xD000000000000024LL) && a2 == 0x8000000181009A40LL
                  || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                {
                  __int16 v6 = 314;
                  goto LABEL_5;
                }

                if (v4 == 0x617478656B6A63LL && a2 == 0xE700000000000000LL
                  || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                  || v4 == 0xD00000000000001ELL && a2 == 0x8000000181009A70LL
                  || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                {
                  __int16 v6 = 118;
                  goto LABEL_5;
                }

                if (v4 == 0x627478656B6A63LL && a2 == 0xE700000000000000LL)
                {
LABEL_311:
                  __int16 v6 = 309;
                  goto LABEL_5;
                }

                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                BOOL v21 = v4 == 0xD00000000000001ELL && a2 == 0x8000000181009A90LL;
                BOOL v22 = v21;
                __int16 v6 = 309;
                if ((result & 1) == 0 && !v22)
                {
                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                  if ((result & 1) != 0) {
                    goto LABEL_311;
                  }
                  if (v4 == 0x637478656B6A63LL && a2 == 0xE700000000000000LL)
                  {
LABEL_323:
                    __int16 v6 = 310;
                    goto LABEL_5;
                  }

                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                  BOOL v23 = v4 == 0xD00000000000001ELL && a2 == 0x8000000181009AB0LL;
                  BOOL v24 = v23;
                  __int16 v6 = 310;
                  if ((result & 1) == 0 && !v24)
                  {
                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                    if ((result & 1) != 0) {
                      goto LABEL_323;
                    }
                    if (v4 == 0x647478656B6A63LL && a2 == 0xE700000000000000LL)
                    {
LABEL_335:
                      __int16 v6 = 311;
                      goto LABEL_5;
                    }

                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                    BOOL v25 = v4 == 0xD00000000000001ELL && a2 == 0x8000000181009AD0LL;
                    BOOL v26 = v25;
                    __int16 v6 = 311;
                    if ((result & 1) == 0 && !v26)
                    {
                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                      if ((result & 1) != 0) {
                        goto LABEL_335;
                      }
                      if (v4 == 0x657478656B6A63LL && a2 == 0xE700000000000000LL)
                      {
LABEL_347:
                        __int16 v6 = 312;
                        goto LABEL_5;
                      }

                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                      BOOL v27 = v4 == 0xD00000000000001ELL && a2 == 0x8000000181009AF0LL;
                      BOOL v28 = v27;
                      __int16 v6 = 312;
                      if ((result & 1) == 0 && !v28)
                      {
                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                        if ((result & 1) != 0) {
                          goto LABEL_347;
                        }
                        if (v4 == 0x667478656B6A63LL && a2 == 0xE700000000000000LL)
                        {
LABEL_359:
                          __int16 v6 = 313;
                          goto LABEL_5;
                        }

                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                        BOOL v29 = v4 == 0xD00000000000001ELL && a2 == 0x8000000181009B10LL;
                        BOOL v30 = v29;
                        __int16 v6 = 313;
                        if ((result & 1) == 0 && !v30)
                        {
                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                          if ((result & 1) != 0) {
                            goto LABEL_359;
                          }
                          if (v4 == 0x677478656B6A63LL && a2 == 0xE700000000000000LL)
                          {
LABEL_371:
                            __int16 v6 = 315;
                            goto LABEL_5;
                          }

                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                          BOOL v31 = v4 == 0xD00000000000001ELL && a2 == 0x8000000181009B30LL;
                          BOOL v32 = v31;
                          __int16 v6 = 315;
                          if ((result & 1) == 0 && !v32)
                          {
                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                            if ((result & 1) != 0) {
                              goto LABEL_371;
                            }
                            if (v4 == 0x63696461726B6A63LL && a2 == 0xEE00707573736C61LL)
                            {
LABEL_383:
                              __int16 v6 = 104;
                              goto LABEL_5;
                            }

                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                            BOOL v33 = v4 == 0xD000000000000015LL && a2 == 0x8000000181009B50LL;
                            BOOL v34 = v33;
                            __int16 v6 = 104;
                            if ((result & 1) == 0 && !v34)
                            {
                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                              if ((result & 1) != 0) {
                                goto LABEL_383;
                              }
                              if (v4 == 0x6B6F7274736B6A63LL && a2 == 0xEA00000000007365LL
                                || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                              {
                                __int16 v6 = 114;
                                goto LABEL_5;
                              }

                              if (v4 == 0x6F626D79736B6A63LL && a2 == 0xEA0000000000736CLL)
                              {
LABEL_399:
                                __int16 v6 = 107;
                                goto LABEL_5;
                              }

                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                              BOOL v35 = v4 == 0xD000000000000018LL && a2 == 0x8000000181009B70LL;
                              BOOL v36 = v35;
                              __int16 v6 = 107;
                              if ((result & 1) == 0 && !v36)
                              {
                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                if ((result & 1) != 0) {
                                  goto LABEL_399;
                                }
                                if (v4 == 0x616A7461706D6F63LL && a2 == 0xEA00000000006F6DLL)
                                {
LABEL_411:
                                  __int16 v6 = 111;
                                  goto LABEL_5;
                                }

                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                BOOL v37 = v4 == 0xD000000000000017LL && a2 == 0x8000000181009B90LL;
                                BOOL v38 = v37;
                                __int16 v6 = 111;
                                if ((result & 1) == 0 && !v38)
                                {
                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                  if ((result & 1) != 0) {
                                    goto LABEL_411;
                                  }
                                  if (v4 == 0x706C6F72746E6F63LL && a2 == 0xEF73657275746369LL
                                    || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                  {
                                    __int16 v6 = 81;
                                    goto LABEL_5;
                                  }

                                  if (v4 == 0x636974706F63LL && a2 == 0xE600000000000000LL
                                    || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                  {
                                    __int16 v6 = 98;
                                    goto LABEL_5;
                                  }

                                  if (v4 == 0xD000000000000012LL && a2 == 0x8000000181009BB0LL
                                    || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                  {
                                    __int16 v6 = 172;
                                    goto LABEL_5;
                                  }

                                  if (v4 == 0x676E69746E756F63LL && a2 == 0xEB00000000646F72LL)
                                  {
LABEL_435:
                                    __int16 v6 = 279;
                                    goto LABEL_5;
                                  }

                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                  BOOL v39 = v4 == 0xD000000000000013LL && a2 == 0x8000000181009BD0LL;
                                  BOOL v40 = v39;
                                  __int16 v6 = 279;
                                  if ((result & 1) == 0 && !v40)
                                  {
                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                    if ((result & 1) != 0) {
                                      goto LABEL_435;
                                    }
                                    if (v4 == 0x726F6669656E7563LL && a2 == 0xE90000000000006DLL
                                      || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                    {
                                      __int16 v6 = 247;
                                      goto LABEL_5;
                                    }

                                    if (v4 == 0xD000000000000010LL && a2 == 0x8000000181009BF0LL)
                                    {
LABEL_451:
                                      __int16 v6 = 248;
                                      goto LABEL_5;
                                    }

                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                    BOOL v41 = v4 == 0xD00000000000001ELL && a2 == 0x8000000181009C10LL;
                                    BOOL v42 = v41;
                                    __int16 v6 = 248;
                                    if ((result & 1) == 0 && !v42)
                                    {
                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                      if ((result & 1) != 0) {
                                        goto LABEL_451;
                                      }
                                      if (v4 == 0x79636E6572727563LL && a2 == 0xEF736C6F626D7973LL
                                        || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                      {
                                        __int16 v6 = 74;
                                        goto LABEL_5;
                                      }

                                      if (v4 == 0xD000000000000010LL && a2 == 0x8000000181009C30LL
                                        || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                      {
                                        __int16 v6 = 187;
                                        goto LABEL_5;
                                      }

                                      if (v4 == 0x6E696D6F72707963LL && a2 == 0xEB000000006E616FLL
                                        || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                      {
                                        __int16 v6 = 250;
                                        goto LABEL_5;
                                      }

                                      if (v4 == 0x63696C6C69727963LL && a2 == 0xE800000000000000LL
                                        || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                      {
                                        __int16 v6 = 8;
                                        goto LABEL_5;
                                      }

                                      if (v4 == 0x63696C6C69727963LL && a2 == 0xEC00000061747865LL)
                                      {
LABEL_479:
                                        __int16 v6 = 102;
                                        goto LABEL_5;
                                      }

                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                      BOOL v43 = v4 == 0xD000000000000011LL && a2 == 0x8000000181009C50LL;
                                      BOOL v44 = v43;
                                      __int16 v6 = 102;
                                      if ((result & 1) == 0 && !v44)
                                      {
                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                        if ((result & 1) != 0) {
                                          goto LABEL_479;
                                        }
                                        if (v4 == 0x63696C6C69727963LL && a2 == 0xEC00000062747865LL)
                                        {
LABEL_491:
                                          __int16 v6 = 125;
                                          goto LABEL_5;
                                        }

                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                        BOOL v45 = v4 == 0xD000000000000011LL && a2 == 0x8000000181009C70LL;
                                        BOOL v46 = v45;
                                        __int16 v6 = 125;
                                        if ((result & 1) == 0 && !v46)
                                        {
                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                          if ((result & 1) != 0) {
                                            goto LABEL_491;
                                          }
                                          if (v4 == 0x63696C6C69727963LL && a2 == 0xEC00000063747865LL)
                                          {
LABEL_503:
                                            __int16 v6 = 63;
                                            goto LABEL_5;
                                          }

                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                          BOOL v47 = v4 == 0xD000000000000011LL && a2 == 0x8000000181009C90LL;
                                          BOOL v48 = v47;
                                          __int16 v6 = 63;
                                          if ((result & 1) == 0 && !v48)
                                          {
                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                            if ((result & 1) != 0) {
                                              goto LABEL_503;
                                            }
                                            if (v4 == 0x63696C6C69727963LL && a2 == 0xEB00000000707573LL)
                                            {
LABEL_523:
                                              __int16 v6 = 9;
                                              goto LABEL_5;
                                            }

                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                            BOOL v49 = v4 == 0xD000000000000012LL && a2 == 0x8000000181009CB0LL;
                                            BOOL v50 = v49;
                                            __int16 v6 = 9;
                                            if ((result & 1) == 0 && !v50)
                                            {
                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                              BOOL v51 = v4 == 0xD000000000000015LL && a2 == 0x8000000181009CD0LL;
                                              BOOL v52 = v51;
                                              __int16 v6 = 9;
                                              if ((result & 1) == 0 && !v52)
                                              {
                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                if ((result & 1) != 0) {
                                                  goto LABEL_523;
                                                }
                                                if (v4 == 0x74657265736564LL && a2 == 0xE700000000000000LL
                                                  || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                      (result & 1) != 0))
                                                {
                                                  __int16 v6 = 178;
                                                  goto LABEL_5;
                                                }

                                                if (v4 == 0x6167616E61766564LL && a2 == 0xEA00000000006972LL
                                                  || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                      (result & 1) != 0))
                                                {
                                                  __int16 v6 = 22;
                                                  goto LABEL_5;
                                                }

                                                if (v4 == 0x6167616E61766564LL && a2 == 0xED00007478656972LL)
                                                {
LABEL_543:
                                                  __int16 v6 = 133;
                                                  goto LABEL_5;
                                                }

                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                BOOL v53 = v4 == 0xD000000000000012LL && a2 == 0x8000000181009CF0LL;
                                                BOOL v54 = v53;
                                                __int16 v6 = 133;
                                                if ((result & 1) == 0 && !v54)
                                                {
                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                  if ((result & 1) != 0) {
                                                    goto LABEL_543;
                                                  }
                                                  if (v4 == 0x6974697263616964LL && a2 == 0xEC000000736C6163LL
                                                    || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                        (result & 1) != 0)
                                                    || v4 == 0xD000000000000019LL && a2 == 0x8000000181009D10LL
                                                    || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                        (result & 1) != 0))
                                                  {
                                                    __int16 v6 = 6;
                                                    goto LABEL_5;
                                                  }

                                                  if (v4 == 0x6974697263616964LL && a2 == 0xEF747865736C6163LL
                                                    || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                        (result & 1) != 0)
                                                    || v4 == 0xD000000000000021LL && a2 == 0x8000000181009D30LL
                                                    || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                        (result & 1) != 0))
                                                  {
                                                    __int16 v6 = 57;
                                                    goto LABEL_5;
                                                  }

                                                  if (v4 == 0xD000000000000016LL && a2 == 0x8000000181009D60LL)
                                                  {
LABEL_577:
                                                    __int16 v6 = 75;
                                                    goto LABEL_5;
                                                  }

                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                  BOOL v55 = v4 == 0xD000000000000023LL && a2 == 0x8000000181009D80LL;
                                                  BOOL v56 = v55;
                                                  __int16 v6 = 75;
                                                  if ((result & 1) == 0 && !v56)
                                                  {
                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                    BOOL v57 = v4 == 0xD000000000000018LL && a2 == 0x8000000181009DB0LL;
                                                    BOOL v58 = v57;
                                                    __int16 v6 = 75;
                                                    if ((result & 1) == 0 && !v58)
                                                    {
                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                      if ((result & 1) != 0) {
                                                        goto LABEL_577;
                                                      }
                                                      if (v4 == 0x6974697263616964LL && a2 == 0xEF707573736C6163LL)
                                                      {
LABEL_589:
                                                        __int16 v6 = 69;
                                                        goto LABEL_5;
                                                      }

                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                      BOOL v59 = v4 == 0xD000000000000023LL && a2 == 0x8000000181009DD0LL;
                                                      BOOL v60 = v59;
                                                      __int16 v6 = 69;
                                                      if ((result & 1) == 0 && !v60)
                                                      {
                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                        if ((result & 1) != 0) {
                                                          goto LABEL_589;
                                                        }
                                                        if (v4 == 0x73746162676E6964LL && a2 == 0xE800000000000000LL
                                                          || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                              (result & 1) != 0))
                                                        {
                                                          __int16 v6 = 88;
                                                          goto LABEL_5;
                                                        }

                                                        if (v4 == 0x756B617365766964LL && a2 == 0xEA00000000007572LL
                                                          || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                              (result & 1) != 0))
                                                        {
                                                          __int16 v6 = 234;
                                                          goto LABEL_5;
                                                        }

                                                        if (v4 == 0x6172676F64LL && a2 == 0xE500000000000000LL
                                                          || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                              (result & 1) != 0))
                                                        {
                                                          __int16 v6 = 232;
                                                          goto LABEL_5;
                                                        }

                                                        if (v4 == 0x6F6E696D6F64LL && a2 == 0xE600000000000000LL
                                                          || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                              (result & 1) != 0)
                                                          || v4 == 0x69746F6E696D6F64LL && a2 == 0xEB0000000073656CLL
                                                          || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                              (result & 1) != 0))
                                                        {
                                                          __int16 v6 = 294;
                                                          goto LABEL_5;
                                                        }

                                                        if (v4 == 0x6E61796F6C707564LL && a2 == 0xE800000000000000LL
                                                          || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                              (result & 1) != 0))
                                                        {
                                                          __int16 v6 = 271;
                                                          goto LABEL_5;
                                                        }

                                                        if (v4 == 0xD000000000000016LL && a2 == 0x8000000181009E00LL
                                                          || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                              (result & 1) != 0))
                                                        {
                                                          __int16 v6 = 249;
                                                          goto LABEL_5;
                                                        }

                                                        if (v4 == 0xD000000000000020LL && a2 == 0x8000000181009E20LL
                                                          || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                              (result & 1) != 0))
                                                        {
                                                          __int16 v6 = 252;
                                                          goto LABEL_5;
                                                        }

                                                        if (v4 == 0xD000000000000013LL && a2 == 0x8000000181009630LL
                                                          || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                              (result & 1) != 0))
                                                        {
                                                          __int16 v6 = 251;
                                                          goto LABEL_5;
                                                        }

                                                        if (v4 == 0x6E617361626C65LL && a2 == 0xE700000000000000LL
                                                          || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                              (result & 1) != 0))
                                                        {
                                                          __int16 v6 = 182;
                                                          goto LABEL_5;
                                                        }

                                                        if (v4 == 0x6369616D796C65LL && a2 == 0xE700000000000000LL
                                                          || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                              (result & 1) != 0))
                                                        {
                                                          __int16 v6 = 213;
                                                          goto LABEL_5;
                                                        }

                                                        if (v4 == 0x6E6F6369746F6D65LL && a2 == 0xE900000000000073LL
                                                          || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                              (result & 1) != 0))
                                                        {
                                                          __int16 v6 = 299;
                                                          goto LABEL_5;
                                                        }

                                                        if (v4 == 0xD000000000000010LL && a2 == 0x8000000181009E50LL)
                                                        {
LABEL_648:
                                                          __int16 v6 = 83;
                                                          goto LABEL_5;
                                                        }

                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                        BOOL v61 = v4 == 0xD000000000000015LL && a2 == 0x8000000181009E70LL;
                                                        BOOL v62 = v61;
                                                        __int16 v6 = 83;
                                                        if ((result & 1) == 0 && !v62)
                                                        {
                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                          if ((result & 1) != 0) {
                                                            goto LABEL_648;
                                                          }
                                                          if (v4 == 0xD000000000000013LL && a2 == 0x8000000181009E90LL)
                                                          {
LABEL_660:
                                                            __int16 v6 = 296;
                                                            goto LABEL_5;
                                                          }

                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                          BOOL v63 = v4 == 0xD00000000000001ELL && a2 == 0x8000000181009EB0LL;
                                                          BOOL v64 = v63;
                                                          __int16 v6 = 296;
                                                          if ((result & 1) == 0 && !v64)
                                                          {
                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                            if ((result & 1) != 0) {
                                                              goto LABEL_660;
                                                            }
                                                            if (v4 == 0x6465736F6C636E65LL
                                                              && a2 == 0xEB000000006B6A63LL)
                                                            {
LABEL_672:
                                                              __int16 v6 = 116;
                                                              goto LABEL_5;
                                                            }

                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                            BOOL v65 = v4 == 0xD00000000000001BLL
                                                               && a2 == 0x8000000181009ED0LL;
                                                            BOOL v66 = v65;
                                                            __int16 v6 = 116;
                                                            if ((result & 1) == 0 && !v66)
                                                            {
                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                              if ((result & 1) != 0) {
                                                                goto LABEL_672;
                                                              }
                                                              if (v4 == 0xD000000000000016LL
                                                                && a2 == 0x8000000181009EF0LL
                                                                || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                    (result & 1) != 0)
                                                                || v4 == 0xD00000000000001DLL
                                                                && a2 == 0x8000000181009F10LL
                                                                || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                    (result & 1) != 0))
                                                              {
                                                                __int16 v6 = 297;
                                                                goto LABEL_5;
                                                              }

                                                              if (v4 == 0x6369706F69687465LL
                                                                && a2 == 0xE800000000000000LL
                                                                || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                    (result & 1) != 0))
                                                              {
                                                                __int16 v6 = 38;
                                                                goto LABEL_5;
                                                              }

                                                              if (v4 == 0x6369706F69687465LL
                                                                && a2 == 0xEB00000000747865LL)
                                                              {
LABEL_695:
                                                                __int16 v6 = 101;
                                                                goto LABEL_5;
                                                              }

                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                              BOOL v67 = v4 == 0xD000000000000010LL
                                                                 && a2 == 0x8000000181009F30LL;
                                                              BOOL v68 = v67;
                                                              __int16 v6 = 101;
                                                              if ((result & 1) == 0 && !v68)
                                                              {
                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                if ((result & 1) != 0) {
                                                                  goto LABEL_695;
                                                                }
                                                                if (v4 == 0x6369706F69687465LL
                                                                  && a2 == 0xEC00000061747865LL)
                                                                {
LABEL_707:
                                                                  __int16 v6 = 143;
                                                                  goto LABEL_5;
                                                                }

                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                BOOL v69 = v4 == 0xD000000000000011LL
                                                                   && a2 == 0x8000000181009F50LL;
                                                                BOOL v70 = v69;
                                                                __int16 v6 = 143;
                                                                if ((result & 1) == 0 && !v70)
                                                                {
                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                  if ((result & 1) != 0) {
                                                                    goto LABEL_707;
                                                                  }
                                                                  if (v4 == 0x6369706F69687465LL
                                                                    && a2 == 0xEC00000062747865LL)
                                                                  {
LABEL_719:
                                                                    __int16 v6 = 287;
                                                                    goto LABEL_5;
                                                                  }

                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                  BOOL v71 = v4 == 0xD000000000000011LL
                                                                     && a2 == 0x8000000181009F70LL;
                                                                  BOOL v72 = v71;
                                                                  __int16 v6 = 287;
                                                                  if ((result & 1) == 0 && !v72)
                                                                  {
                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                    if ((result & 1) != 0) {
                                                                      goto LABEL_719;
                                                                    }
                                                                    if (v4 == 0x6369706F69687465LL
                                                                      && a2 == 0xEB00000000707573LL)
                                                                    {
LABEL_731:
                                                                      __int16 v6 = 39;
                                                                      goto LABEL_5;
                                                                    }

                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                    BOOL v73 = v4 == 0xD000000000000012LL
                                                                       && a2 == 0x8000000181009F90LL;
                                                                    BOOL v74 = v73;
                                                                    __int16 v6 = 39;
                                                                    if ((result & 1) == 0 && !v74)
                                                                    {
                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                      if ((result & 1) != 0) {
                                                                        goto LABEL_731;
                                                                      }
                                                                      if (v4 == 0x697274656D6F6567LL
                                                                        && a2 == 0xEF73657061687363LL
                                                                        || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                            (result & 1) != 0))
                                                                      {
                                                                        __int16 v6 = 86;
                                                                        goto LABEL_5;
                                                                      }

                                                                      if (v4 == 0xD000000000000012LL
                                                                        && a2 == 0x8000000181009FB0LL)
                                                                      {
LABEL_747:
                                                                        __int16 v6 = 303;
                                                                        goto LABEL_5;
                                                                      }

                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                      BOOL v75 = v4 == 0xD000000000000017LL
                                                                         && a2 == 0x8000000181009FD0LL;
                                                                      BOOL v76 = v75;
                                                                      __int16 v6 = 303;
                                                                      if ((result & 1) == 0 && !v76)
                                                                      {
                                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                        if ((result & 1) != 0) {
                                                                          goto LABEL_747;
                                                                        }
                                                                        if (v4 == 0x6E616967726F6567LL
                                                                          && a2 == 0xE800000000000000LL
                                                                          || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                              (result & 1) != 0))
                                                                        {
                                                                          __int16 v6 = 36;
                                                                          goto LABEL_5;
                                                                        }

                                                                        if (v4 == 0x6E616967726F6567LL
                                                                          && a2 == 0xEB00000000747865LL)
                                                                        {
LABEL_763:
                                                                          __int16 v6 = 64;
                                                                          goto LABEL_5;
                                                                        }

                                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                        BOOL v77 = v4 == 0xD000000000000010LL
                                                                           && a2 == 0x8000000181009FF0LL;
                                                                        BOOL v78 = v77;
                                                                        __int16 v6 = 64;
                                                                        if ((result & 1) == 0 && !v78)
                                                                        {
                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                          if ((result & 1) != 0) {
                                                                            goto LABEL_763;
                                                                          }
                                                                          if (v4 == 0x6E616967726F6567LL
                                                                            && a2 == 0xEB00000000707573LL)
                                                                          {
LABEL_775:
                                                                            __int16 v6 = 99;
                                                                            goto LABEL_5;
                                                                          }

                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                          BOOL v79 = v4 == 0xD000000000000012LL
                                                                             && a2 == 0x800000018100A010LL;
                                                                          BOOL v80 = v79;
                                                                          __int16 v6 = 99;
                                                                          if ((result & 1) == 0 && !v80)
                                                                          {
                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                            if ((result & 1) != 0) {
                                                                              goto LABEL_775;
                                                                            }
                                                                            if (v4 == 0x74696C6F67616C67LL
                                                                              && a2 == 0xEA00000000006369LL
                                                                              || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                  (result & 1) != 0))
                                                                            {
                                                                              __int16 v6 = 96;
                                                                              goto LABEL_5;
                                                                            }

                                                                            if (v4 == 0x74696C6F67616C67LL
                                                                              && a2 == 0xED00007075736369LL)
                                                                            {
LABEL_791:
                                                                              __int16 v6 = 283;
                                                                              goto LABEL_5;
                                                                            }

                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                            BOOL v81 = v4 == 0xD000000000000014LL
                                                                               && a2 == 0x800000018100A030LL;
                                                                            BOOL v82 = v81;
                                                                            __int16 v6 = 283;
                                                                            if ((result & 1) == 0 && !v82)
                                                                            {
                                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                              if ((result & 1) != 0) {
                                                                                goto LABEL_791;
                                                                              }
                                                                              if (v4 == 0x636968746F67LL
                                                                                && a2 == 0xE600000000000000LL
                                                                                || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                    (result & 1) != 0))
                                                                              {
                                                                                __int16 v6 = 174;
                                                                                goto LABEL_5;
                                                                              }

                                                                              if (v4 == 0x6168746E617267LL
                                                                                && a2 == 0xE700000000000000LL
                                                                                || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                    (result & 1) != 0))
                                                                              {
                                                                                __int16 v6 = 224;
                                                                                goto LABEL_5;
                                                                              }

                                                                              if (v4 == 0x6B65657267LL
                                                                                && a2 == 0xE500000000000000LL
                                                                                || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                    (result & 1) != 0)
                                                                                || v4 == 0x646E616B65657267LL
                                                                                && a2 == 0xEE00636974706F63LL
                                                                                || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                    (result & 1) != 0))
                                                                              {
                                                                                __int16 v6 = 7;
                                                                                goto LABEL_5;
                                                                              }

                                                                              if (v4 == 0x7478656B65657267LL
                                                                                && a2 == 0xE800000000000000LL)
                                                                              {
LABEL_818:
                                                                                __int16 v6 = 71;
                                                                                goto LABEL_5;
                                                                              }

                                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                              BOOL v83 = v4 == 0x7478656B65657267LL
                                                                                 && a2 == 0xED00006465646E65LL;
                                                                              BOOL v84 = v83;
                                                                              __int16 v6 = 71;
                                                                              if ((result & 1) == 0 && !v84)
                                                                              {
                                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                if ((result & 1) != 0) {
                                                                                  goto LABEL_818;
                                                                                }
                                                                                if (v4 == 0x69746172616A7567LL
                                                                                  && a2 == 0xE800000000000000LL
                                                                                  || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                      (result & 1) != 0))
                                                                                {
                                                                                  __int16 v6 = 25;
                                                                                  goto LABEL_5;
                                                                                }

                                                                                if (v4 == 0x67616C616A6E7567LL
                                                                                  && a2 == 0xEC00000069646E6FLL
                                                                                  || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                      (result & 1) != 0))
                                                                                {
                                                                                  __int16 v6 = 243;
                                                                                  goto LABEL_5;
                                                                                }

                                                                                if (v4 == 0x69686B756D727567LL
                                                                                  && a2 == 0xE800000000000000LL
                                                                                  || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                      (result & 1) != 0))
                                                                                {
                                                                                  __int16 v6 = 24;
                                                                                  goto LABEL_5;
                                                                                }

                                                                                if (v4 == 0xD000000000000010LL
                                                                                  && a2 == 0x800000018100A050LL)
                                                                                {
LABEL_842:
                                                                                  __int16 v6 = 162;
                                                                                  goto LABEL_5;
                                                                                }

                                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                BOOL v85 = v4 == 0xD00000000000001ALL
                                                                                   && a2 == 0x800000018100A070LL;
                                                                                BOOL v86 = v85;
                                                                                __int16 v6 = 162;
                                                                                if ((result & 1) == 0 && !v86)
                                                                                {
                                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                  if ((result & 1) != 0) {
                                                                                    goto LABEL_842;
                                                                                  }
                                                                                  if (v4 == 0x6B72616D666C6168LL
                                                                                    && a2 == 0xE900000000000073LL)
                                                                                  {
LABEL_854:
                                                                                    __int16 v6 = 158;
                                                                                    goto LABEL_5;
                                                                                  }

                                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                  BOOL v87 = v4 == 0xD000000000000012LL
                                                                                     && a2 == 0x800000018100A090LL;
                                                                                  BOOL v88 = v87;
                                                                                  __int16 v6 = 158;
                                                                                  if ((result & 1) == 0 && !v88)
                                                                                  {
                                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                    if ((result & 1) != 0) {
                                                                                      goto LABEL_854;
                                                                                    }
                                                                                    if (v4 == 0x6C75676E6168LL
                                                                                      && a2 == 0xE600000000000000LL
                                                                                      || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                          (result & 1) != 0)
                                                                                      || v4 == 0x79736C75676E6168LL
                                                                                      && a2 == 0xEF73656C62616C6CLL
                                                                                      || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                          (result & 1) != 0))
                                                                                    {
                                                                                      __int16 v6 = 147;
                                                                                      goto LABEL_5;
                                                                                    }

                                                                                    if (v4 == 0x6F726966696E6168LL
                                                                                      && a2 == 0xEE006179676E6968LL
                                                                                      || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                          (result & 1) != 0))
                                                                                    {
                                                                                      __int16 v6 = 206;
                                                                                      goto LABEL_5;
                                                                                    }

                                                                                    if (v4 == 0x6F6F6E756E6168LL
                                                                                      && a2 == 0xE700000000000000LL
                                                                                      || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                          (result & 1) != 0))
                                                                                    {
                                                                                      __int16 v6 = 45;
                                                                                      goto LABEL_5;
                                                                                    }

                                                                                    if (v4 == 0x6E6172746168LL
                                                                                      && a2 == 0xE600000000000000LL
                                                                                      || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                          (result & 1) != 0))
                                                                                    {
                                                                                      __int16 v6 = 191;
                                                                                      goto LABEL_5;
                                                                                    }

                                                                                    if (v4 == 0x776572626568LL
                                                                                      && a2 == 0xE600000000000000LL
                                                                                      || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                          (result & 1) != 0))
                                                                                    {
                                                                                      __int16 v6 = 11;
                                                                                      goto LABEL_5;
                                                                                    }

                                                                                    if (v4 == 0xD000000000000010LL
                                                                                      && a2 == 0x800000018100A0B0LL)
                                                                                    {
LABEL_889:
                                                                                      __int16 v6 = 150;
                                                                                      goto LABEL_5;
                                                                                    }

                                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                    BOOL v89 = v4 == 0xD000000000000018LL
                                                                                       && a2 == 0x800000018100A0D0LL;
                                                                                    BOOL v90 = v89;
                                                                                    __int16 v6 = 150;
                                                                                    if ((result & 1) == 0 && !v90)
                                                                                    {
                                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                      if ((result & 1) != 0) {
                                                                                        goto LABEL_889;
                                                                                      }
                                                                                      if (v4 == 0x7272757368676968LL
                                                                                        && a2 == 0xEE0073657461676FLL
                                                                                        || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                            (result & 1) != 0))
                                                                                      {
                                                                                        __int16 v6 = 149;
                                                                                        goto LABEL_5;
                                                                                      }

                                                                                      if (v4 == 0x616E616761726968LL
                                                                                        && a2 == 0xE800000000000000LL
                                                                                        || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                            (result & 1) != 0))
                                                                                      {
                                                                                        __int16 v6 = 108;
                                                                                        goto LABEL_5;
                                                                                      }

                                                                                      if (v4 == 6513769
                                                                                        && a2 == 0xE300000000000000LL)
                                                                                      {
LABEL_909:
                                                                                        __int16 v6 = 106;
                                                                                        goto LABEL_5;
                                                                                      }

                                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                      BOOL v91 = v4 == 0xD000000000000020LL
                                                                                         && a2 == 0x800000018100A0F0LL;
                                                                                      BOOL v92 = v91;
                                                                                      __int16 v6 = 106;
                                                                                      if ((result & 1) == 0 && !v92)
                                                                                      {
                                                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                        if ((result & 1) != 0) {
                                                                                          goto LABEL_909;
                                                                                        }
                                                                                        if (v4 == 0xD000000000000012LL
                                                                                          && a2 == 0x800000018100A120LL)
                                                                                        {
LABEL_921:
                                                                                          __int16 v6 = 261;
                                                                                          goto LABEL_5;
                                                                                        }

                                                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                        BOOL v93 = v4 == 0xD000000000000020LL
                                                                                           && a2 == 0x800000018100A140LL;
                                                                                        BOOL v94 = v93;
                                                                                        __int16 v6 = 261;
                                                                                        if ((result & 1) == 0 && !v94)
                                                                                        {
                                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                          if ((result & 1) != 0) {
                                                                                            goto LABEL_921;
                                                                                          }
                                                                                          if (v4 == 0x6C61697265706D69LL
                                                                                            && a2 == 0xEF6369616D617261LL
                                                                                            || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                                (result & 1) != 0))
                                                                                          {
                                                                                            __int16 v6 = 188;
                                                                                            goto LABEL_5;
                                                                                          }

                                                                                          if (v4 == 0xD000000000000010LL
                                                                                            && a2 == 0x800000018100A170LL)
                                                                                          {
LABEL_937:
                                                                                            __int16 v6 = 130;
                                                                                            goto LABEL_5;
                                                                                          }

                                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                          BOOL v95 = v4 == 0xD000000000000016LL
                                                                                             && a2 == 0x800000018100A190LL;
                                                                                          BOOL v96 = v95;
                                                                                          __int16 v6 = 130;
                                                                                          if ((result & 1) == 0 && !v96)
                                                                                          {
                                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                            if ((result & 1) != 0) {
                                                                                              goto LABEL_937;
                                                                                            }
                                                                                            if (v4 == 0xD000000000000011LL
                                                                                              && a2 == 0x800000018100A1B0LL
                                                                                              || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                                  (result & 1) != 0))
                                                                                            {
                                                                                              __int16 v6 = 290;
                                                                                              goto LABEL_5;
                                                                                            }

                                                                                            if (v4 == 0xD000000000000014LL
                                                                                              && a2 == 0x80000001810096F0LL
                                                                                              || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                                  (result & 1) != 0))
                                                                                            {
                                                                                              __int16 v6 = 202;
                                                                                              goto LABEL_5;
                                                                                            }

                                                                                            if (v4 == 0xD000000000000015LL
                                                                                              && a2 == 0x8000000181009710LL
                                                                                              || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                                  (result & 1) != 0))
                                                                                            {
                                                                                              __int16 v6 = 201;
                                                                                              goto LABEL_5;
                                                                                            }

                                                                                            if (v4 == 0x747865617069LL
                                                                                              && a2 == 0xE600000000000000LL
                                                                                              || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                                  (result & 1) != 0)
                                                                                              || v4 == 0x6E65747865617069LL
                                                                                              && a2 == 0xED0000736E6F6973LL
                                                                                              || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                                  (result & 1) != 0))
                                                                                            {
                                                                                              __int16 v6 = 4;
                                                                                              goto LABEL_5;
                                                                                            }

                                                                                            if (v4 == 1869439338
                                                                                              && a2 == 0xE400000000000000LL)
                                                                                            {
LABEL_968:
                                                                                              __int16 v6 = 37;
                                                                                              goto LABEL_5;
                                                                                            }

                                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                            BOOL v97 = v4 == 0x616A6C75676E6168LL
                                                                                               && a2 == 0xEA00000000006F6DLL;
                                                                                            BOOL v98 = v97;
                                                                                            __int16 v6 = 37;
                                                                                            if ((result & 1) == 0
                                                                                              && !v98)
                                                                                            {
                                                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                              if ((result & 1) != 0) {
                                                                                                goto LABEL_968;
                                                                                              }
                                                                                              if (v4 == 0x617478656F6D616ALL
                                                                                                && a2 == 0xE800000000000000LL)
                                                                                              {
LABEL_980:
                                                                                                __int16 v6 = 136;
                                                                                                goto LABEL_5;
                                                                                              }

                                                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                              BOOL v99 = v4 == 0xD000000000000013LL && a2 == 0x800000018100A1D0LL;
                                                                                              BOOL v100 = v99;
                                                                                              __int16 v6 = 136;
                                                                                              if ((result & 1) == 0
                                                                                                && !v100)
                                                                                              {
                                                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                if ((result & 1) != 0) {
                                                                                                  goto LABEL_980;
                                                                                                }
                                                                                                if (v4 == 0x627478656F6D616ALL && a2 == 0xE800000000000000LL)
                                                                                                {
LABEL_992:
                                                                                                  __int16 v6 = 148;
                                                                                                  goto LABEL_5;
                                                                                                }

                                                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                BOOL v101 = v4 == 0xD000000000000013LL && a2 == 0x800000018100A1F0LL;
                                                                                                BOOL v102 = v101;
                                                                                                __int16 v6 = 148;
                                                                                                if ((result & 1) == 0 && !v102)
                                                                                                {
                                                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                  if ((result & 1) != 0) {
                                                                                                    goto LABEL_992;
                                                                                                  }
                                                                                                  if (v4 == 0x6573656E6176616ALL && a2 == 0xE800000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                  {
                                                                                                    __int16 v6 = 137;
                                                                                                    goto LABEL_5;
                                                                                                  }

                                                                                                  if (v4 == 0x69687469616BLL && a2 == 0xE600000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                  {
                                                                                                    __int16 v6 = 215;
                                                                                                    goto LABEL_5;
                                                                                                  }

                                                                                                  if (v4 == 0x61747865616E616BLL && a2 == 0xE800000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || v4 == 0x65747865616E616BLL && a2 == 0xED0000616465646ELL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                  {
                                                                                                    __int16 v6 = 268;
                                                                                                    goto LABEL_5;
                                                                                                  }

                                                                                                  if (v4 == 0x62747865616E616BLL && a2 == 0xE800000000000000LL)
                                                                                                  {
LABEL_1019:
                                                                                                    __int16 v6 = 266;
                                                                                                    goto LABEL_5;
                                                                                                  }

                                                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                  BOOL v103 = v4 == 0x65747865616E616BLL && a2 == 0xED0000626465646ELL;
                                                                                                  BOOL v104 = v103;
                                                                                                  __int16 v6 = 266;
                                                                                                  if ((result & 1) == 0 && !v104)
                                                                                                  {
                                                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                    if ((result & 1) != 0) {
                                                                                                      goto LABEL_1019;
                                                                                                    }
                                                                                                    if (v4 == 0x707573616E616BLL && a2 == 0xE700000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || v4 == 0x70707573616E616BLL && a2 == 0xEE00746E656D656CLL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                    {
                                                                                                      __int16 v6 = 267;
                                                                                                      goto LABEL_5;
                                                                                                    }

                                                                                                    if (v4 == 0x6E75626E616BLL && a2 == 0xE600000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                    {
                                                                                                      __int16 v6 = 112;
                                                                                                      goto LABEL_5;
                                                                                                    }

                                                                                                    if (v4 == 0x6978676E616BLL && a2 == 0xE600000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || v4 == 0x61726978676E616BLL && a2 == 0xEE00736C61636964LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                    {
                                                                                                      __int16 v6 = 105;
                                                                                                      goto LABEL_5;
                                                                                                    }

                                                                                                    if (v4 == 0x6164616E6E616BLL && a2 == 0xE700000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                    {
                                                                                                      __int16 v6 = 29;
                                                                                                      goto LABEL_5;
                                                                                                    }

                                                                                                    if (v4 == 0x616E616B6174616BLL && a2 == 0xE800000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                    {
                                                                                                      __int16 v6 = 109;
                                                                                                      goto LABEL_5;
                                                                                                    }

                                                                                                    if (v4 == 0x616E616B6174616BLL && a2 == 0xEB00000000747865LL)
                                                                                                    {
LABEL_1057:
                                                                                                      __int16 v6 = 115;
                                                                                                      goto LABEL_5;
                                                                                                    }

                                                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                    BOOL v105 = v4 == 0xD00000000000001ALL && a2 == 0x800000018100A210LL;
                                                                                                    BOOL v106 = v105;
                                                                                                    __int16 v6 = 115;
                                                                                                    if ((result & 1) == 0 && !v106)
                                                                                                    {
                                                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                      if ((result & 1) != 0) {
                                                                                                        goto LABEL_1057;
                                                                                                      }
                                                                                                      if (v4 == 0x696C686179616BLL && a2 == 0xE700000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                      {
                                                                                                        __int16 v6 = 134;
                                                                                                        goto LABEL_5;
                                                                                                      }

                                                                                                      if (v4 == 0x7468736F7261686BLL && a2 == 0xEA00000000006968LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                      {
                                                                                                        __int16 v6 = 196;
                                                                                                        goto LABEL_5;
                                                                                                      }

                                                                                                      if (v4 == 0xD000000000000011LL && a2 == 0x80000001810096B0LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                      {
                                                                                                        __int16 v6 = 264;
                                                                                                        goto LABEL_5;
                                                                                                      }

                                                                                                      if (v4 == 0x72656D686BLL && a2 == 0xE500000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                      {
                                                                                                        __int16 v6 = 48;
                                                                                                        goto LABEL_5;
                                                                                                      }

                                                                                                      if (v4 == 0x6D797372656D686BLL && a2 == 0xEC000000736C6F62LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                      {
                                                                                                        __int16 v6 = 54;
                                                                                                        goto LABEL_5;
                                                                                                      }

                                                                                                      if (v4 == 0x696B6A6F686BLL && a2 == 0xE600000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                      {
                                                                                                        __int16 v6 = 221;
                                                                                                        goto LABEL_5;
                                                                                                      }

                                                                                                      if (v4 == 0x646177616475686BLL && a2 == 0xE900000000000069LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                      {
                                                                                                        __int16 v6 = 223;
                                                                                                        goto LABEL_5;
                                                                                                      }

                                                                                                      if (v4 == 7299436 && a2 == 0xE300000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                      {
                                                                                                        __int16 v6 = 33;
                                                                                                        goto LABEL_5;
                                                                                                      }

                                                                                                      if (v4 == 0x7573316E6974616CLL && a2 == 0xE900000000000070LL)
                                                                                                      {
LABEL_1109:
                                                                                                        __int16 v6 = 1;
                                                                                                        goto LABEL_5;
                                                                                                      }

                                                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                      BOOL v107 = v4 == 0xD000000000000010LL && a2 == 0x800000018100A230LL;
                                                                                                      BOOL v108 = v107;
                                                                                                      __int16 v6 = 1;
                                                                                                      if ((result & 1) == 0 && !v108)
                                                                                                      {
                                                                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                        BOOL v109 = v4 == 0x316E6974616CLL && a2 == 0xE600000000000000LL;
                                                                                                        BOOL v110 = v109;
                                                                                                        __int16 v6 = 1;
                                                                                                        if ((result & 1) == 0 && !v110)
                                                                                                        {
                                                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                          if ((result & 1) != 0) {
                                                                                                            goto LABEL_1109;
                                                                                                          }
                                                                                                          if (v4 == 0x7478656E6974616CLL && a2 == 0xE900000000000061LL)
                                                                                                          {
LABEL_1121:
                                                                                                            __int16 v6 = 2;
                                                                                                            goto LABEL_5;
                                                                                                          }

                                                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                          BOOL v111 = v4 == 0x7478656E6974616CLL && a2 == 0xEE00616465646E65LL;
                                                                                                          BOOL v112 = v111;
                                                                                                          __int16 v6 = 2;
                                                                                                          if ((result & 1) == 0 && !v112)
                                                                                                          {
                                                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                            if ((result & 1) != 0) {
                                                                                                              goto LABEL_1121;
                                                                                                            }
                                                                                                            if (v4 == 0xD000000000000012LL && a2 == 0x800000018100A250LL)
                                                                                                            {
LABEL_1133:
                                                                                                              __int16 v6 = 70;
                                                                                                              goto LABEL_5;
                                                                                                            }

                                                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                            BOOL v113 = v4 == 0xD000000000000017LL && a2 == 0x800000018100A270LL;
                                                                                                            BOOL v114 = v113;
                                                                                                            __int16 v6 = 70;
                                                                                                            if ((result & 1) == 0 && !v114)
                                                                                                            {
                                                                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                              if ((result & 1) != 0) {
                                                                                                                goto LABEL_1133;
                                                                                                              }
                                                                                                              if (v4 == 0x7478656E6974616CLL && a2 == 0xE900000000000062LL)
                                                                                                              {
LABEL_1145:
                                                                                                                __int16 v6 = 3;
                                                                                                                goto LABEL_5;
                                                                                                              }

                                                                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                              BOOL v115 = v4 == 0x7478656E6974616CLL && a2 == 0xEE00626465646E65LL;
                                                                                                              BOOL v116 = v115;
                                                                                                              __int16 v6 = 3;
                                                                                                              if ((result & 1) == 0 && !v116)
                                                                                                              {
                                                                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                if ((result & 1) != 0) {
                                                                                                                  goto LABEL_1145;
                                                                                                                }
                                                                                                                if (v4 == 0x7478656E6974616CLL && a2 == 0xE900000000000063LL)
                                                                                                                {
LABEL_1157:
                                                                                                                  __int16 v6 = 97;
                                                                                                                  goto LABEL_5;
                                                                                                                }

                                                                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                BOOL v117 = v4 == 0x7478656E6974616CLL && a2 == 0xEE00636465646E65LL;
                                                                                                                BOOL v118 = v117;
                                                                                                                __int16 v6 = 97;
                                                                                                                if ((result & 1) == 0 && !v118)
                                                                                                                {
                                                                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                  if ((result & 1) != 0) {
                                                                                                                    goto LABEL_1157;
                                                                                                                  }
                                                                                                                  if (v4 == 0x7478656E6974616CLL && a2 == 0xE900000000000064LL)
                                                                                                                  {
LABEL_1169:
                                                                                                                    __int16 v6 = 128;
                                                                                                                    goto LABEL_5;
                                                                                                                  }

                                                                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                  BOOL v119 = v4 == 0x7478656E6974616CLL && a2 == 0xEE00646465646E65LL;
                                                                                                                  BOOL v120 = v119;
                                                                                                                  __int16 v6 = 128;
                                                                                                                  if ((result & 1) == 0 && !v120)
                                                                                                                  {
                                                                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                    if ((result & 1) != 0) {
                                                                                                                      goto LABEL_1169;
                                                                                                                    }
                                                                                                                    if (v4 == 0x7478656E6974616CLL && a2 == 0xE900000000000065LL)
                                                                                                                    {
LABEL_1181:
                                                                                                                      __int16 v6 = 144;
                                                                                                                      goto LABEL_5;
                                                                                                                    }

                                                                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                    BOOL v121 = v4 == 0x7478656E6974616CLL && a2 == 0xEE00656465646E65LL;
                                                                                                                    BOOL v122 = v121;
                                                                                                                    __int16 v6 = 144;
                                                                                                                    if ((result & 1) == 0 && !v122)
                                                                                                                    {
                                                                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                      if ((result & 1) != 0) {
                                                                                                                        goto LABEL_1181;
                                                                                                                      }
                                                                                                                      if (v4 == 0x7478656E6974616CLL && a2 == 0xE900000000000066LL)
                                                                                                                      {
LABEL_1193:
                                                                                                                        __int16 v6 = 186;
                                                                                                                        goto LABEL_5;
                                                                                                                      }

                                                                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                      BOOL v123 = v4 == 0x7478656E6974616CLL && a2 == 0xEE00666465646E65LL;
                                                                                                                      BOOL v124 = v123;
                                                                                                                      __int16 v6 = 186;
                                                                                                                      if ((result & 1) == 0 && !v124)
                                                                                                                      {
                                                                                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                        if ((result & 1) != 0) {
                                                                                                                          goto LABEL_1193;
                                                                                                                        }
                                                                                                                        if (v4 == 0x7478656E6974616CLL && a2 == 0xE900000000000067LL)
                                                                                                                        {
LABEL_1205:
                                                                                                                          __int16 v6 = 282;
                                                                                                                          goto LABEL_5;
                                                                                                                        }

                                                                                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                        BOOL v125 = v4 == 0x7478656E6974616CLL && a2 == 0xEE00676465646E65LL;
                                                                                                                        BOOL v126 = v125;
                                                                                                                        __int16 v6 = 282;
                                                                                                                        if ((result & 1) == 0 && !v126)
                                                                                                                        {
                                                                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                          if ((result & 1) != 0) {
                                                                                                                            goto LABEL_1205;
                                                                                                                          }
                                                                                                                          if (v4 == 0x61686370656CLL && a2 == 0xE600000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                          {
                                                                                                                            __int16 v6 = 61;
                                                                                                                            goto LABEL_5;
                                                                                                                          }

                                                                                                                          if (v4 == 0xD000000000000011LL && a2 == 0x800000018100A290LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                          {
                                                                                                                            __int16 v6 = 76;
                                                                                                                            goto LABEL_5;
                                                                                                                          }

                                                                                                                          if (v4 == 0x75626D696CLL && a2 == 0xE500000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                          {
                                                                                                                            __int16 v6 = 51;
                                                                                                                            goto LABEL_5;
                                                                                                                          }

                                                                                                                          if (v4 == 0x617261656E696CLL && a2 == 0xE700000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                          {
                                                                                                                            __int16 v6 = 185;
                                                                                                                            goto LABEL_5;
                                                                                                                          }

                                                                                                                          if (v4 == 0xD000000000000010LL && a2 == 0x800000018100A2B0LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                          {
                                                                                                                            __int16 v6 = 165;
                                                                                                                            goto LABEL_5;
                                                                                                                          }

                                                                                                                          if (v4 == 0xD000000000000010LL && a2 == 0x800000018100A2D0LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                          {
                                                                                                                            __int16 v6 = 164;
                                                                                                                            goto LABEL_5;
                                                                                                                          }

                                                                                                                          if (v4 == 1970497900 && a2 == 0xE400000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                          {
                                                                                                                            __int16 v6 = 123;
                                                                                                                            goto LABEL_5;
                                                                                                                          }

                                                                                                                          if (v4 == 0x7075737573696CLL && a2 == 0xE700000000000000LL)
                                                                                                                          {
LABEL_1245:
                                                                                                                            __int16 v6 = 245;
                                                                                                                            goto LABEL_5;
                                                                                                                          }

                                                                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                          BOOL v127 = v4 == 0x707075737573696CLL && a2 == 0xEE00746E656D656CLL;
                                                                                                                          BOOL v128 = v127;
                                                                                                                          __int16 v6 = 245;
                                                                                                                          if ((result & 1) == 0 && !v128)
                                                                                                                          {
                                                                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                            if ((result & 1) != 0) {
                                                                                                                              goto LABEL_1245;
                                                                                                                            }
                                                                                                                            if (v4 == 0x6F72727573776F6CLL && a2 == 0xED00007365746167LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                            {
                                                                                                                              __int16 v6 = 151;
                                                                                                                              goto LABEL_5;
                                                                                                                            }

                                                                                                                            if (v4 == 0x6E616963796CLL && a2 == 0xE600000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                            {
                                                                                                                              __int16 v6 = 170;
                                                                                                                              goto LABEL_5;
                                                                                                                            }

                                                                                                                            uint64_t result = 0x6E616964796CLL;
                                                                                                                            if (v4 == 0x6E616964796CLL && a2 == 0xE600000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                            {
                                                                                                                              __int16 v6 = 193;
                                                                                                                              goto LABEL_5;
                                                                                                                            }

                                                                                                                            if (v4 == 0x696E616A6168616DLL && a2 == 0xE800000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                            {
                                                                                                                              __int16 v6 = 218;
                                                                                                                              goto LABEL_5;
                                                                                                                            }

                                                                                                                            if (v4 == 0x676E6F6A68616DLL && a2 == 0xE700000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || v4 == 0x74676E6F6A68616DLL && a2 == 0xEC00000073656C69LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                            {
                                                                                                                              __int16 v6 = 293;
                                                                                                                              goto LABEL_5;
                                                                                                                            }

                                                                                                                            if (v4 == 0x726173616B616DLL && a2 == 0xE700000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                            {
                                                                                                                              __int16 v6 = 244;
                                                                                                                              goto LABEL_5;
                                                                                                                            }

                                                                                                                            if (v4 == 0x616C6179616C616DLL && a2 == 0xE90000000000006DLL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                            {
                                                                                                                              __int16 v6 = 30;
                                                                                                                              goto LABEL_5;
                                                                                                                            }

                                                                                                                            if (v4 == 0x636961646E616DLL && a2 == 0xE700000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                            {
                                                                                                                              __int16 v6 = 18;
                                                                                                                              goto LABEL_5;
                                                                                                                            }

                                                                                                                            if (v4 == 0x65616863696E616DLL && a2 == 0xEA00000000006E61LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                            {
                                                                                                                              __int16 v6 = 199;
                                                                                                                              goto LABEL_5;
                                                                                                                            }

                                                                                                                            if (v4 == 0x6E65686372616DLL && a2 == 0xE700000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                            {
                                                                                                                              __int16 v6 = 241;
                                                                                                                              goto LABEL_5;
                                                                                                                            }

                                                                                                                            if (v4 == 0x676D61726173616DLL && a2 == 0xEC00000069646E6FLL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                            {
                                                                                                                              __int16 v6 = 242;
                                                                                                                              goto LABEL_5;
                                                                                                                            }

                                                                                                                            if (v4 == 0x68706C616874616DLL && a2 == 0xEC0000006D756E61LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || (uint64_t result = 0xD00000000000001FLL, v4 == 0xD00000000000001FLL) && a2 == 0x800000018100A2F0LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                            {
                                                                                                                              __int16 v6 = 280;
                                                                                                                              goto LABEL_5;
                                                                                                                            }

                                                                                                                            if (v4 == 0x7265706F6874616DLL && a2 == 0xED000073726F7461LL)
                                                                                                                            {
LABEL_1311:
                                                                                                                              __int16 v6 = 79;
                                                                                                                              goto LABEL_5;
                                                                                                                            }

                                                                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                            BOOL v129 = v4 == 0xD000000000000015LL && a2 == 0x800000018100A310LL;
                                                                                                                            BOOL v130 = v129;
                                                                                                                            __int16 v6 = 79;
                                                                                                                            if ((result & 1) == 0 && !v130)
                                                                                                                            {
                                                                                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                              if ((result & 1) != 0) {
                                                                                                                                goto LABEL_1311;
                                                                                                                              }
                                                                                                                              if (v4 == 0x6D756E6E6179616DLL && a2 == 0xED0000736C617265LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                              {
                                                                                                                                __int16 v6 = 277;
                                                                                                                                goto LABEL_5;
                                                                                                                              }

                                                                                                                              if (v4 == 0x646961666564656DLL && a2 == 0xEB000000006E6972LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                              {
                                                                                                                                __int16 v6 = 259;
                                                                                                                                goto LABEL_5;
                                                                                                                              }

                                                                                                                              if (v4 == 0x616D69657465656DLL && a2 == 0xEB000000006B6579LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                              {
                                                                                                                                __int16 v6 = 146;
                                                                                                                                goto LABEL_5;
                                                                                                                              }

                                                                                                                              if (v4 == 0x616D69657465656DLL && a2 == 0xEE007478656B6579LL)
                                                                                                                              {
LABEL_1335:
                                                                                                                                __int16 v6 = 142;
                                                                                                                                goto LABEL_5;
                                                                                                                              }

                                                                                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                              BOOL v131 = v4 == 0xD000000000000015LL && a2 == 0x800000018100A330LL;
                                                                                                                              BOOL v132 = v131;
                                                                                                                              __int16 v6 = 142;
                                                                                                                              if ((result & 1) == 0 && !v132)
                                                                                                                              {
                                                                                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                if ((result & 1) != 0) {
                                                                                                                                  goto LABEL_1335;
                                                                                                                                }
                                                                                                                                if (v4 == 0x6B696B65646E656DLL && a2 == 0xEC00000069756B61LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                {
                                                                                                                                  __int16 v6 = 288;
                                                                                                                                  goto LABEL_5;
                                                                                                                                }

                                                                                                                                if (v4 == 0x636974696F72656DLL && a2 == 0xEF65766973727563LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                {
                                                                                                                                  __int16 v6 = 195;
                                                                                                                                  goto LABEL_5;
                                                                                                                                }

                                                                                                                                if (v4 == 0xD000000000000013LL && a2 == 0x80000001810096D0LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                {
                                                                                                                                  __int16 v6 = 194;
                                                                                                                                  goto LABEL_5;
                                                                                                                                }

                                                                                                                                if (v4 == 1868654957 && a2 == 0xE400000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                {
                                                                                                                                  __int16 v6 = 260;
                                                                                                                                  goto LABEL_5;
                                                                                                                                }

                                                                                                                                if (v4 == 0x6F7272616373696DLL && a2 == 0xEA00000000007377LL)
                                                                                                                                {
LABEL_1363:
                                                                                                                                  __int16 v6 = 95;
                                                                                                                                  goto LABEL_5;
                                                                                                                                }

                                                                                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                BOOL v133 = v4 == 0xD00000000000001DLL && a2 == 0x800000018100A350LL;
                                                                                                                                BOOL v134 = v133;
                                                                                                                                __int16 v6 = 95;
                                                                                                                                if ((result & 1) == 0 && !v134)
                                                                                                                                {
                                                                                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                  if ((result & 1) != 0) {
                                                                                                                                    goto LABEL_1363;
                                                                                                                                  }
                                                                                                                                  if (v4 == 0xD000000000000010LL && a2 == 0x800000018100A370LL)
                                                                                                                                  {
LABEL_1375:
                                                                                                                                    __int16 v6 = 89;
                                                                                                                                    goto LABEL_5;
                                                                                                                                  }

                                                                                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                  BOOL v135 = v4 == 0xD000000000000021LL && a2 == 0x800000018100A390LL;
                                                                                                                                  BOOL v136 = v135;
                                                                                                                                  __int16 v6 = 89;
                                                                                                                                  if ((result & 1) == 0 && !v136)
                                                                                                                                  {
                                                                                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                    if ((result & 1) != 0) {
                                                                                                                                      goto LABEL_1375;
                                                                                                                                    }
                                                                                                                                    if (v4 == 0xD000000000000010LL && a2 == 0x800000018100A3C0LL)
                                                                                                                                    {
LABEL_1387:
                                                                                                                                      __int16 v6 = 93;
                                                                                                                                      goto LABEL_5;
                                                                                                                                    }

                                                                                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                    BOOL v137 = v4 == 0xD000000000000021LL && a2 == 0x800000018100A3E0LL;
                                                                                                                                    BOOL v138 = v137;
                                                                                                                                    __int16 v6 = 93;
                                                                                                                                    if ((result & 1) == 0 && !v138)
                                                                                                                                    {
                                                                                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                      if ((result & 1) != 0) {
                                                                                                                                        goto LABEL_1387;
                                                                                                                                      }
                                                                                                                                      if (v4 == 0x746369706373696DLL && a2 == 0xEF7368706172676FLL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || v4 == 0xD000000000000022LL && a2 == 0x800000018100A410LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                      {
                                                                                                                                        __int16 v6 = 298;
                                                                                                                                        goto LABEL_5;
                                                                                                                                      }

                                                                                                                                      if (v4 == 0x626D79736373696DLL && a2 == 0xEB00000000736C6FLL)
                                                                                                                                      {
LABEL_1406:
                                                                                                                                        __int16 v6 = 87;
                                                                                                                                        goto LABEL_5;
                                                                                                                                      }

                                                                                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                      BOOL v139 = v4 == 0xD000000000000014LL && a2 == 0x800000018100A440LL;
                                                                                                                                      BOOL v140 = v139;
                                                                                                                                      __int16 v6 = 87;
                                                                                                                                      if ((result & 1) == 0 && !v140)
                                                                                                                                      {
                                                                                                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                        if ((result & 1) != 0) {
                                                                                                                                          goto LABEL_1406;
                                                                                                                                        }
                                                                                                                                        if (v4 == 0x686365746373696DLL && a2 == 0xED00006C6163696ELL)
                                                                                                                                        {
LABEL_1418:
                                                                                                                                          __int16 v6 = 80;
                                                                                                                                          goto LABEL_5;
                                                                                                                                        }

                                                                                                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                        BOOL v141 = v4 == 0xD000000000000016LL && a2 == 0x800000018100A460LL;
                                                                                                                                        BOOL v142 = v141;
                                                                                                                                        __int16 v6 = 80;
                                                                                                                                        if ((result & 1) == 0 && !v142)
                                                                                                                                        {
                                                                                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                          if ((result & 1) != 0) {
                                                                                                                                            goto LABEL_1418;
                                                                                                                                          }
                                                                                                                                          if (v4 == 1768189805 && a2 == 0xE400000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                          {
                                                                                                                                            __int16 v6 = 228;
                                                                                                                                            goto LABEL_5;
                                                                                                                                          }

                                                                                                                                          if (v4 == 0x7265696669646F6DLL && a2 == 0xEF7372657474656CLL)
                                                                                                                                          {
LABEL_1434:
                                                                                                                                            __int16 v6 = 5;
                                                                                                                                            goto LABEL_5;
                                                                                                                                          }

                                                                                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                          BOOL v143 = v4 == 0xD000000000000016LL && a2 == 0x800000018100A480LL;
                                                                                                                                          BOOL v144 = v143;
                                                                                                                                          __int16 v6 = 5;
                                                                                                                                          if ((result & 1) == 0 && !v144)
                                                                                                                                          {
                                                                                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                            if ((result & 1) != 0) {
                                                                                                                                              goto LABEL_1434;
                                                                                                                                            }
                                                                                                                                            if (v4 == 0xD000000000000013LL && a2 == 0x800000018100A4A0LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                            {
                                                                                                                                              __int16 v6 = 127;
                                                                                                                                              goto LABEL_5;
                                                                                                                                            }

                                                                                                                                            if (v4 == 0x61696C6F676E6F6DLL && a2 == 0xE90000000000006ELL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                            {
                                                                                                                                              __int16 v6 = 49;
                                                                                                                                              goto LABEL_5;
                                                                                                                                            }

                                                                                                                                            if (v4 == 0x61696C6F676E6F6DLL && a2 == 0xEC0000007075736ELL)
                                                                                                                                            {
LABEL_1454:
                                                                                                                                              __int16 v6 = 229;
                                                                                                                                              goto LABEL_5;
                                                                                                                                            }

                                                                                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                            BOOL v145 = v4 == 0xD000000000000013LL && a2 == 0x800000018100A4C0LL;
                                                                                                                                            BOOL v146 = v145;
                                                                                                                                            __int16 v6 = 229;
                                                                                                                                            if ((result & 1) == 0 && !v146)
                                                                                                                                            {
                                                                                                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                              if ((result & 1) != 0) {
                                                                                                                                                goto LABEL_1454;
                                                                                                                                              }
                                                                                                                                              if (v4 == 7303789 && a2 == 0xE300000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                              {
                                                                                                                                                __int16 v6 = 255;
                                                                                                                                                goto LABEL_5;
                                                                                                                                              }

                                                                                                                                              if (v4 == 0x696E61746C756DLL && a2 == 0xE700000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                              {
                                                                                                                                                __int16 v6 = 222;
                                                                                                                                                goto LABEL_5;
                                                                                                                                              }

                                                                                                                                              if (v4 == 0x636973756DLL && a2 == 0xE500000000000000LL)
                                                                                                                                              {
LABEL_1474:
                                                                                                                                                __int16 v6 = 275;
                                                                                                                                                goto LABEL_5;
                                                                                                                                              }

                                                                                                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                              BOOL v147 = v4 == 0x736C61636973756DLL && a2 == 0xEE00736C6F626D79LL;
                                                                                                                                              BOOL v148 = v147;
                                                                                                                                              __int16 v6 = 275;
                                                                                                                                              if ((result & 1) == 0 && !v148)
                                                                                                                                              {
                                                                                                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                if ((result & 1) != 0) {
                                                                                                                                                  goto LABEL_1474;
                                                                                                                                                }
                                                                                                                                                if (v4 == 0x72616D6E61796DLL && a2 == 0xE700000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                {
                                                                                                                                                  __int16 v6 = 35;
                                                                                                                                                  goto LABEL_5;
                                                                                                                                                }

                                                                                                                                                if (v4 == 0x6572616D6E61796DLL && a2 == 0xEB00000000617478LL)
                                                                                                                                                {
LABEL_1490:
                                                                                                                                                  __int16 v6 = 140;
                                                                                                                                                  goto LABEL_5;
                                                                                                                                                }

                                                                                                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                BOOL v149 = v4 == 0xD000000000000010LL && a2 == 0x800000018100A4E0LL;
                                                                                                                                                BOOL v150 = v149;
                                                                                                                                                __int16 v6 = 140;
                                                                                                                                                if ((result & 1) == 0 && !v150)
                                                                                                                                                {
                                                                                                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                  if ((result & 1) != 0) {
                                                                                                                                                    goto LABEL_1490;
                                                                                                                                                  }
                                                                                                                                                  if (v4 == 0x6572616D6E61796DLL && a2 == 0xEB00000000627478LL)
                                                                                                                                                  {
LABEL_1502:
                                                                                                                                                    __int16 v6 = 138;
                                                                                                                                                    goto LABEL_5;
                                                                                                                                                  }

                                                                                                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                  BOOL v151 = v4 == 0xD000000000000010LL && a2 == 0x800000018100A500LL;
                                                                                                                                                  BOOL v152 = v151;
                                                                                                                                                  __int16 v6 = 138;
                                                                                                                                                  if ((result & 1) == 0 && !v152)
                                                                                                                                                  {
                                                                                                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                    if ((result & 1) != 0) {
                                                                                                                                                      goto LABEL_1502;
                                                                                                                                                    }
                                                                                                                                                    if (v4 == 0x616561746162616ELL && a2 == 0xE90000000000006ELL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                    {
                                                                                                                                                      __int16 v6 = 190;
                                                                                                                                                      goto LABEL_5;
                                                                                                                                                    }

                                                                                                                                                    if (v4 == 0x67616E69646E616ELL && a2 == 0xEB00000000697261LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                    {
                                                                                                                                                      __int16 v6 = 235;
                                                                                                                                                      goto LABEL_5;
                                                                                                                                                    }

                                                                                                                                                    if (v4 == 25198 && a2 == 0xE200000000000000LL)
                                                                                                                                                    {
LABEL_1522:
                                                                                                                                                      __int16 v6 = 320;
                                                                                                                                                      goto LABEL_5;
                                                                                                                                                    }

                                                                                                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                    BOOL v153 = v4 == 0x6B636F6C626F6ELL && a2 == 0xE700000000000000LL;
                                                                                                                                                    BOOL v154 = v153;
                                                                                                                                                    __int16 v6 = 320;
                                                                                                                                                    if ((result & 1) == 0 && !v154)
                                                                                                                                                    {
                                                                                                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                      if ((result & 1) != 0) {
                                                                                                                                                        goto LABEL_1522;
                                                                                                                                                      }
                                                                                                                                                      if (v4 == 0x756C69617477656ELL && a2 == 0xE900000000000065LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                      {
                                                                                                                                                        __int16 v6 = 53;
                                                                                                                                                        goto LABEL_5;
                                                                                                                                                      }

                                                                                                                                                      if (v4 == 1635214702 && a2 == 0xE400000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                      {
                                                                                                                                                        __int16 v6 = 225;
                                                                                                                                                        goto LABEL_5;
                                                                                                                                                      }

                                                                                                                                                      uint64_t result = 7301998LL;
                                                                                                                                                      if (v4 == 7301998 && a2 == 0xE300000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                      {
                                                                                                                                                        __int16 v6 = 16;
                                                                                                                                                        goto LABEL_5;
                                                                                                                                                      }

                                                                                                                                                      if (v4 == 0x6F667265626D756ELL && a2 == 0xEB00000000736D72LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                      {
                                                                                                                                                        __int16 v6 = 77;
                                                                                                                                                        goto LABEL_5;
                                                                                                                                                      }

                                                                                                                                                      if (v4 == 0x756873756ELL && a2 == 0xE500000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                      {
                                                                                                                                                        __int16 v6 = 270;
                                                                                                                                                        goto LABEL_5;
                                                                                                                                                      }

                                                                                                                                                      if (v4 == 0xD000000000000014LL && a2 == 0x8000000181009670LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                      {
                                                                                                                                                        __int16 v6 = 284;
                                                                                                                                                        goto LABEL_5;
                                                                                                                                                      }

                                                                                                                                                      if (v4 == 7496559 && a2 == 0xE300000000000000LL)
                                                                                                                                                      {
LABEL_1558:
                                                                                                                                                        __int16 v6 = 82;
                                                                                                                                                        goto LABEL_5;
                                                                                                                                                      }

                                                                                                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                      BOOL v155 = v4 == 0xD00000000000001BLL && a2 == 0x800000018100A520LL;
                                                                                                                                                      BOOL v156 = v155;
                                                                                                                                                      __int16 v6 = 82;
                                                                                                                                                      if ((result & 1) == 0 && !v156)
                                                                                                                                                      {
                                                                                                                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                        if ((result & 1) != 0) {
                                                                                                                                                          goto LABEL_1558;
                                                                                                                                                        }
                                                                                                                                                        if (v4 == 0x6D6168676FLL && a2 == 0xE500000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                        {
                                                                                                                                                          __int16 v6 = 42;
                                                                                                                                                          goto LABEL_5;
                                                                                                                                                        }

                                                                                                                                                        if (v4 == 0x696B6968636C6FLL && a2 == 0xE700000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                        {
                                                                                                                                                          __int16 v6 = 62;
                                                                                                                                                          goto LABEL_5;
                                                                                                                                                        }

                                                                                                                                                        if (v4 == 0x61676E7568646C6FLL && a2 == 0xEC0000006E616972LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                        {
                                                                                                                                                          __int16 v6 = 205;
                                                                                                                                                          goto LABEL_5;
                                                                                                                                                        }

                                                                                                                                                        if (v4 == 0x696C617469646C6FLL && a2 == 0xE900000000000063LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                        {
                                                                                                                                                          __int16 v6 = 173;
                                                                                                                                                          goto LABEL_5;
                                                                                                                                                        }

                                                                                                                                                        if (v4 == 0x6874726F6E646C6FLL && a2 == 0xEF6E616962617261LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                        {
                                                                                                                                                          __int16 v6 = 198;
                                                                                                                                                          goto LABEL_5;
                                                                                                                                                        }

                                                                                                                                                        if (v4 == 0x696D726570646C6FLL && a2 == 0xE900000000000063LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                        {
                                                                                                                                                          __int16 v6 = 175;
                                                                                                                                                          goto LABEL_5;
                                                                                                                                                        }

                                                                                                                                                        if (v4 == 0x6973726570646C6FLL && a2 == 0xEA00000000006E61LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                        {
                                                                                                                                                          __int16 v6 = 177;
                                                                                                                                                          goto LABEL_5;
                                                                                                                                                        }

                                                                                                                                                        if (v4 == 0x6964676F73646C6FLL && a2 == 0xEA00000000006E61LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                        {
                                                                                                                                                          __int16 v6 = 209;
                                                                                                                                                          goto LABEL_5;
                                                                                                                                                        }

                                                                                                                                                        if (v4 == 0x6874756F73646C6FLL && a2 == 0xEF6E616962617261LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                        {
                                                                                                                                                          __int16 v6 = 197;
                                                                                                                                                          goto LABEL_5;
                                                                                                                                                        }

                                                                                                                                                        if (v4 == 0x696B727574646C6FLL && a2 == 0xE900000000000063LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                        {
                                                                                                                                                          __int16 v6 = 204;
                                                                                                                                                          goto LABEL_5;
                                                                                                                                                        }

                                                                                                                                                        if (v4 == 0x7568677975646C6FLL && a2 == 0xE900000000000072LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                        {
                                                                                                                                                          __int16 v6 = 211;
                                                                                                                                                          goto LABEL_5;
                                                                                                                                                        }

                                                                                                                                                        if (v4 == 0x617969726FLL && a2 == 0xE500000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                        {
                                                                                                                                                          __int16 v6 = 26;
                                                                                                                                                          goto LABEL_5;
                                                                                                                                                        }

                                                                                                                                                        if (v4 == 0xD000000000000012LL && a2 == 0x800000018100A540LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                        {
                                                                                                                                                          __int16 v6 = 300;
                                                                                                                                                          goto LABEL_5;
                                                                                                                                                        }

                                                                                                                                                        if (v4 == 0x656761736FLL && a2 == 0xE500000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                        {
                                                                                                                                                          __int16 v6 = 181;
                                                                                                                                                          goto LABEL_5;
                                                                                                                                                        }

                                                                                                                                                        if (v4 == 0x61796E616D736FLL && a2 == 0xE700000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                        {
                                                                                                                                                          __int16 v6 = 180;
                                                                                                                                                          goto LABEL_5;
                                                                                                                                                        }

                                                                                                                                                        if (v4 == 0xD000000000000013LL && a2 == 0x800000018100A560LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                        {
                                                                                                                                                          __int16 v6 = 291;
                                                                                                                                                          goto LABEL_5;
                                                                                                                                                        }

                                                                                                                                                        if (v4 == 0x6D68687761686170LL && a2 == 0xEB00000000676E6FLL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                        {
                                                                                                                                                          __int16 v6 = 258;
                                                                                                                                                          goto LABEL_5;
                                                                                                                                                        }

                                                                                                                                                        if (v4 == 0x6E6572796D6C6170LL && a2 == 0xE900000000000065LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                        {
                                                                                                                                                          __int16 v6 = 189;
                                                                                                                                                          goto LABEL_5;
                                                                                                                                                        }

                                                                                                                                                        if (v4 == 0x61686E6963756170LL && a2 == 0xE900000000000075LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                        {
                                                                                                                                                          __int16 v6 = 239;
                                                                                                                                                          goto LABEL_5;
                                                                                                                                                        }

                                                                                                                                                        if (v4 == 0x61707367616870LL && a2 == 0xE700000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                        {
                                                                                                                                                          __int16 v6 = 131;
                                                                                                                                                          goto LABEL_5;
                                                                                                                                                        }

                                                                                                                                                        if (v4 == 0x736F747369616870LL && a2 == 0xE800000000000000LL)
                                                                                                                                                        {
LABEL_1650:
                                                                                                                                                          __int16 v6 = 169;
                                                                                                                                                          goto LABEL_5;
                                                                                                                                                        }

                                                                                                                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                        BOOL v157 = v4 == 0x736F747369616870LL && a2 == 0xEC00000063736964LL;
                                                                                                                                                        BOOL v158 = v157;
                                                                                                                                                        __int16 v6 = 169;
                                                                                                                                                        if ((result & 1) == 0 && !v158)
                                                                                                                                                        {
                                                                                                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                          if ((result & 1) != 0) {
                                                                                                                                                            goto LABEL_1650;
                                                                                                                                                          }
                                                                                                                                                          if (v4 == 0x6963696E656F6870LL && a2 == 0xEA00000000006E61LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                          {
                                                                                                                                                            __int16 v6 = 192;
                                                                                                                                                            goto LABEL_5;
                                                                                                                                                          }

                                                                                                                                                          if (v4 == 0x636974656E6F6870LL && a2 == 0xEB00000000747865LL)
                                                                                                                                                          {
LABEL_1666:
                                                                                                                                                            __int16 v6 = 67;
                                                                                                                                                            goto LABEL_5;
                                                                                                                                                          }

                                                                                                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                          BOOL v159 = v4 == 0xD000000000000012LL && a2 == 0x800000018100A580LL;
                                                                                                                                                          BOOL v160 = v159;
                                                                                                                                                          __int16 v6 = 67;
                                                                                                                                                          if ((result & 1) == 0 && !v160)
                                                                                                                                                          {
                                                                                                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                            if ((result & 1) != 0) {
                                                                                                                                                              goto LABEL_1666;
                                                                                                                                                            }
                                                                                                                                                            if (v4 == 0x636974656E6F6870LL && a2 == 0xEE00707573747865LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || v4 == 0xD00000000000001CLL && a2 == 0x800000018100A5A0LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                            {
                                                                                                                                                              __int16 v6 = 68;
                                                                                                                                                              goto LABEL_5;
                                                                                                                                                            }

                                                                                                                                                            if (v4 == 0x63676E6979616C70LL && a2 == 0xEC00000073647261LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                            {
                                                                                                                                                              __int16 v6 = 295;
                                                                                                                                                              goto LABEL_5;
                                                                                                                                                            }

                                                                                                                                                            if (v4 == 0x707265746C617370LL && a2 == 0xEE006976616C6861LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                            {
                                                                                                                                                              __int16 v6 = 203;
                                                                                                                                                              goto LABEL_5;
                                                                                                                                                            }

                                                                                                                                                            if (v4 == 6387056 && a2 == 0xE300000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || v4 == 0x7565746176697270LL && a2 == 0xEE00616572616573LL)
                                                                                                                                                            {
LABEL_1696:
                                                                                                                                                              __int16 v6 = 152;
                                                                                                                                                              goto LABEL_5;
                                                                                                                                                            }

                                                                                                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                            BOOL v161 = v4 == 0x7565746176697270LL && a2 == 0xEA00000000006573LL;
                                                                                                                                                            BOOL v162 = v161;
                                                                                                                                                            __int16 v6 = 152;
                                                                                                                                                            if ((result & 1) == 0 && !v162)
                                                                                                                                                            {
                                                                                                                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                              if ((result & 1) != 0) {
                                                                                                                                                                goto LABEL_1696;
                                                                                                                                                              }
                                                                                                                                                              if (v4 == 0x74617574636E7570LL && a2 == 0xEB000000006E6F69LL)
                                                                                                                                                              {
LABEL_1708:
                                                                                                                                                                __int16 v6 = 72;
                                                                                                                                                                goto LABEL_5;
                                                                                                                                                              }

                                                                                                                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                              BOOL v163 = v4 == 0xD000000000000012LL && a2 == 0x800000018100A5C0LL;
                                                                                                                                                              BOOL v164 = v163;
                                                                                                                                                              __int16 v6 = 72;
                                                                                                                                                              if ((result & 1) == 0 && !v164)
                                                                                                                                                              {
                                                                                                                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                if ((result & 1) != 0) {
                                                                                                                                                                  goto LABEL_1708;
                                                                                                                                                                }
                                                                                                                                                                if (v4 == 0x676E616A6572LL && a2 == 0xE600000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                {
                                                                                                                                                                  __int16 v6 = 135;
                                                                                                                                                                  goto LABEL_5;
                                                                                                                                                                }

                                                                                                                                                                if (v4 == 1768781170 && a2 == 0xE400000000000000LL)
                                                                                                                                                                {
LABEL_1724:
                                                                                                                                                                  __int16 v6 = 207;
                                                                                                                                                                  goto LABEL_5;
                                                                                                                                                                }

                                                                                                                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                BOOL v165 = v4 == 0xD000000000000012LL && a2 == 0x800000018100A5E0LL;
                                                                                                                                                                BOOL v166 = v165;
                                                                                                                                                                __int16 v6 = 207;
                                                                                                                                                                if ((result & 1) == 0 && !v166)
                                                                                                                                                                {
                                                                                                                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                  if ((result & 1) != 0) {
                                                                                                                                                                    goto LABEL_1724;
                                                                                                                                                                  }
                                                                                                                                                                  if (v4 == 0x63696E7572LL && a2 == 0xE500000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                  {
                                                                                                                                                                    __int16 v6 = 43;
                                                                                                                                                                    goto LABEL_5;
                                                                                                                                                                  }

                                                                                                                                                                  if (v4 == 0x61746972616D6173LL && a2 == 0xE90000000000006ELL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                  {
                                                                                                                                                                    __int16 v6 = 17;
                                                                                                                                                                    goto LABEL_5;
                                                                                                                                                                  }

                                                                                                                                                                  if (v4 == 0x7468736172756173LL && a2 == 0xEA00000000006172LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                  {
                                                                                                                                                                    __int16 v6 = 132;
                                                                                                                                                                    goto LABEL_5;
                                                                                                                                                                  }

                                                                                                                                                                  if (v4 == 0x61646172616873LL && a2 == 0xE700000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                  {
                                                                                                                                                                    __int16 v6 = 219;
                                                                                                                                                                    goto LABEL_5;
                                                                                                                                                                  }

                                                                                                                                                                  if (v4 == 0x6E616976616873LL && a2 == 0xE700000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                  {
                                                                                                                                                                    __int16 v6 = 179;
                                                                                                                                                                    goto LABEL_5;
                                                                                                                                                                  }

                                                                                                                                                                  if (v4 == 0xD000000000000017LL && a2 == 0x800000018100A600LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                  {
                                                                                                                                                                    __int16 v6 = 272;
                                                                                                                                                                    goto LABEL_5;
                                                                                                                                                                  }

                                                                                                                                                                  if (v4 == 0x6D616864646973LL && a2 == 0xE700000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                  {
                                                                                                                                                                    __int16 v6 = 227;
                                                                                                                                                                    goto LABEL_5;
                                                                                                                                                                  }

                                                                                                                                                                  if (v4 == 0x616C61686E6973LL && a2 == 0xE700000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                  {
                                                                                                                                                                    __int16 v6 = 31;
                                                                                                                                                                    goto LABEL_5;
                                                                                                                                                                  }

                                                                                                                                                                  if (v4 == 0xD000000000000015LL && a2 == 0x800000018100A620LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                  {
                                                                                                                                                                    __int16 v6 = 220;
                                                                                                                                                                    goto LABEL_5;
                                                                                                                                                                  }

                                                                                                                                                                  if (v4 == 0x726F666C6C616D73LL && a2 == 0xEA0000000000736DLL)
                                                                                                                                                                  {
LABEL_1772:
                                                                                                                                                                    __int16 v6 = 160;
                                                                                                                                                                    goto LABEL_5;
                                                                                                                                                                  }

                                                                                                                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                  BOOL v167 = v4 == 0xD000000000000011LL && a2 == 0x800000018100A640LL;
                                                                                                                                                                  BOOL v168 = v167;
                                                                                                                                                                  __int16 v6 = 160;
                                                                                                                                                                  if ((result & 1) == 0 && !v168)
                                                                                                                                                                  {
                                                                                                                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                    if ((result & 1) != 0) {
                                                                                                                                                                      goto LABEL_1772;
                                                                                                                                                                    }
                                                                                                                                                                    if (v4 == 0x6E616B6C6C616D73LL && a2 == 0xEC00000074786561LL)
                                                                                                                                                                    {
LABEL_1784:
                                                                                                                                                                      __int16 v6 = 269;
                                                                                                                                                                      goto LABEL_5;
                                                                                                                                                                    }

                                                                                                                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                    BOOL v169 = v4 == 0xD000000000000012LL && a2 == 0x800000018100A660LL;
                                                                                                                                                                    BOOL v170 = v169;
                                                                                                                                                                    __int16 v6 = 269;
                                                                                                                                                                    if ((result & 1) == 0 && !v170)
                                                                                                                                                                    {
                                                                                                                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                      if ((result & 1) != 0) {
                                                                                                                                                                        goto LABEL_1784;
                                                                                                                                                                      }
                                                                                                                                                                      if (v4 == 0x6E616964676F73LL && a2 == 0xE700000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                      {
                                                                                                                                                                        __int16 v6 = 210;
                                                                                                                                                                        goto LABEL_5;
                                                                                                                                                                      }

                                                                                                                                                                      if (v4 == 0x706D6F7361726F73LL && a2 == 0xEB00000000676E65LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                      {
                                                                                                                                                                        __int16 v6 = 216;
                                                                                                                                                                        goto LABEL_5;
                                                                                                                                                                      }

                                                                                                                                                                      if (v4 == 0x6F626D6F796F73LL && a2 == 0xE700000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                      {
                                                                                                                                                                        __int16 v6 = 237;
                                                                                                                                                                        goto LABEL_5;
                                                                                                                                                                      }

                                                                                                                                                                      if (v4 == 0x736C616963657073LL && a2 == 0xE800000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                      {
                                                                                                                                                                        __int16 v6 = 163;
                                                                                                                                                                        goto LABEL_5;
                                                                                                                                                                      }

                                                                                                                                                                      if (v4 == 0x73656E61646E7573LL && a2 == 0xE900000000000065LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                      {
                                                                                                                                                                        __int16 v6 = 59;
                                                                                                                                                                        goto LABEL_5;
                                                                                                                                                                      }

                                                                                                                                                                      if (v4 == 0x73656E61646E7573LL && a2 == 0xEC00000070757365LL)
                                                                                                                                                                      {
LABEL_1816:
                                                                                                                                                                        __int16 v6 = 65;
                                                                                                                                                                        goto LABEL_5;
                                                                                                                                                                      }

                                                                                                                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                      BOOL v171 = v4 == 0xD000000000000013LL && a2 == 0x800000018100A680LL;
                                                                                                                                                                      BOOL v172 = v171;
                                                                                                                                                                      __int16 v6 = 65;
                                                                                                                                                                      if ((result & 1) == 0 && !v172)
                                                                                                                                                                      {
                                                                                                                                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                        if ((result & 1) != 0) {
                                                                                                                                                                          goto LABEL_1816;
                                                                                                                                                                        }
                                                                                                                                                                        if (v4 == 0x776F727261707573LL && a2 == 0xEA00000000006173LL)
                                                                                                                                                                        {
LABEL_1828:
                                                                                                                                                                          __int16 v6 = 90;
                                                                                                                                                                          goto LABEL_5;
                                                                                                                                                                        }

                                                                                                                                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                        BOOL v173 = v4 == 0xD000000000000013LL && a2 == 0x800000018100A6A0LL;
                                                                                                                                                                        BOOL v174 = v173;
                                                                                                                                                                        __int16 v6 = 90;
                                                                                                                                                                        if ((result & 1) == 0 && !v174)
                                                                                                                                                                        {
                                                                                                                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                          if ((result & 1) != 0) {
                                                                                                                                                                            goto LABEL_1828;
                                                                                                                                                                          }
                                                                                                                                                                          if (v4 == 0x776F727261707573LL && a2 == 0xEA00000000006273LL)
                                                                                                                                                                          {
LABEL_1840:
                                                                                                                                                                            __int16 v6 = 92;
                                                                                                                                                                            goto LABEL_5;
                                                                                                                                                                          }

                                                                                                                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                          BOOL v175 = v4 == 0xD000000000000013LL && a2 == 0x800000018100A6C0LL;
                                                                                                                                                                          BOOL v176 = v175;
                                                                                                                                                                          __int16 v6 = 92;
                                                                                                                                                                          if ((result & 1) == 0 && !v176)
                                                                                                                                                                          {
                                                                                                                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                            if ((result & 1) != 0) {
                                                                                                                                                                              goto LABEL_1840;
                                                                                                                                                                            }
                                                                                                                                                                            if (v4 == 0x776F727261707573LL && a2 == 0xEA00000000006373LL)
                                                                                                                                                                            {
LABEL_1852:
                                                                                                                                                                              __int16 v6 = 304;
                                                                                                                                                                              goto LABEL_5;
                                                                                                                                                                            }

                                                                                                                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                            BOOL v177 = v4 == 0xD000000000000013LL && a2 == 0x800000018100A6E0LL;
                                                                                                                                                                            BOOL v178 = v177;
                                                                                                                                                                            __int16 v6 = 304;
                                                                                                                                                                            if ((result & 1) == 0 && !v178)
                                                                                                                                                                            {
                                                                                                                                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                              if ((result & 1) != 0) {
                                                                                                                                                                                goto LABEL_1852;
                                                                                                                                                                              }
                                                                                                                                                                              if (v4 == 0xD000000000000010LL && a2 == 0x800000018100A700LL)
                                                                                                                                                                              {
LABEL_1864:
                                                                                                                                                                                __int16 v6 = 94;
                                                                                                                                                                                goto LABEL_5;
                                                                                                                                                                              }

                                                                                                                                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                              BOOL v179 = v4 == 0xD000000000000021LL && a2 == 0x800000018100A720LL;
                                                                                                                                                                              BOOL v180 = v179;
                                                                                                                                                                              __int16 v6 = 94;
                                                                                                                                                                              if ((result & 1) == 0 && !v180)
                                                                                                                                                                              {
                                                                                                                                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                if ((result & 1) != 0) {
                                                                                                                                                                                  goto LABEL_1864;
                                                                                                                                                                                }
                                                                                                                                                                                if (v4 == 0x61617570707573LL && a2 == 0xE700000000000000LL)
                                                                                                                                                                                {
LABEL_1876:
                                                                                                                                                                                  __int16 v6 = 318;
                                                                                                                                                                                  goto LABEL_5;
                                                                                                                                                                                }

                                                                                                                                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                BOOL v181 = v4 == 0xD00000000000001CLL && a2 == 0x800000018100A750LL;
                                                                                                                                                                                BOOL v182 = v181;
                                                                                                                                                                                __int16 v6 = 318;
                                                                                                                                                                                if ((result & 1) == 0 && !v182)
                                                                                                                                                                                {
                                                                                                                                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                  if ((result & 1) != 0) {
                                                                                                                                                                                    goto LABEL_1876;
                                                                                                                                                                                  }
                                                                                                                                                                                  if (v4 == 0x62617570707573LL && a2 == 0xE700000000000000LL)
                                                                                                                                                                                  {
LABEL_1888:
                                                                                                                                                                                    __int16 v6 = 319;
                                                                                                                                                                                    goto LABEL_5;
                                                                                                                                                                                  }

                                                                                                                                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                  BOOL v183 = v4 == 0xD00000000000001CLL && a2 == 0x800000018100A770LL;
                                                                                                                                                                                  BOOL v184 = v183;
                                                                                                                                                                                  __int16 v6 = 319;
                                                                                                                                                                                  if ((result & 1) == 0 && !v184)
                                                                                                                                                                                  {
                                                                                                                                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                    if ((result & 1) != 0) {
                                                                                                                                                                                      goto LABEL_1888;
                                                                                                                                                                                    }
                                                                                                                                                                                    if (v4 == 0x74636E7570707573LL && a2 == 0xEE006E6F69746175LL)
                                                                                                                                                                                    {
LABEL_1900:
                                                                                                                                                                                      __int16 v6 = 103;
                                                                                                                                                                                      goto LABEL_5;
                                                                                                                                                                                    }

                                                                                                                                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                    BOOL v185 = v4 == 0xD000000000000017LL && a2 == 0x800000018100A790LL;
                                                                                                                                                                                    BOOL v186 = v185;
                                                                                                                                                                                    __int16 v6 = 103;
                                                                                                                                                                                    if ((result & 1) == 0 && !v186)
                                                                                                                                                                                    {
                                                                                                                                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                      if ((result & 1) != 0) {
                                                                                                                                                                                        goto LABEL_1900;
                                                                                                                                                                                      }
                                                                                                                                                                                      if (v4 == 0xD000000000000018LL && a2 == 0x800000018100A7B0LL)
                                                                                                                                                                                      {
LABEL_1912:
                                                                                                                                                                                        __int16 v6 = 305;
                                                                                                                                                                                        goto LABEL_5;
                                                                                                                                                                                      }

                                                                                                                                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                      BOOL v187 = v4 == 0xD000000000000021LL && a2 == 0x800000018100A7D0LL;
                                                                                                                                                                                      BOOL v188 = v187;
                                                                                                                                                                                      __int16 v6 = 305;
                                                                                                                                                                                      if ((result & 1) == 0 && !v188)
                                                                                                                                                                                      {
                                                                                                                                                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                        if ((result & 1) != 0) {
                                                                                                                                                                                          goto LABEL_1912;
                                                                                                                                                                                        }
                                                                                                                                                                                        if (v4 == 0x646E617265707573LL && a2 == 0xEB00000000627573LL)
                                                                                                                                                                                        {
LABEL_1924:
                                                                                                                                                                                          __int16 v6 = 73;
                                                                                                                                                                                          goto LABEL_5;
                                                                                                                                                                                        }

                                                                                                                                                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                        BOOL v189 = v4 == 0xD000000000000019LL && a2 == 0x800000018100A800LL;
                                                                                                                                                                                        BOOL v190 = v189;
                                                                                                                                                                                        __int16 v6 = 73;
                                                                                                                                                                                        if ((result & 1) == 0 && !v190)
                                                                                                                                                                                        {
                                                                                                                                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                          if ((result & 1) != 0) {
                                                                                                                                                                                            goto LABEL_1924;
                                                                                                                                                                                          }
                                                                                                                                                                                          if (v4 == 0xD000000000000011LL && a2 == 0x800000018100A820LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                          {
                                                                                                                                                                                            __int16 v6 = 281;
                                                                                                                                                                                            goto LABEL_5;
                                                                                                                                                                                          }

                                                                                                                                                                                          if (v4 == 0x616E69746F6C7973LL && a2 == 0xEB00000000697267LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                          {
                                                                                                                                                                                            __int16 v6 = 129;
                                                                                                                                                                                            goto LABEL_5;
                                                                                                                                                                                          }

                                                                                                                                                                                          if (v4 == 0xD000000000000019LL && a2 == 0x800000018100A840LL)
                                                                                                                                                                                          {
LABEL_1944:
                                                                                                                                                                                            __int16 v6 = 307;
                                                                                                                                                                                            goto LABEL_5;
                                                                                                                                                                                          }

                                                                                                                                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                          BOOL v191 = v4 == 0xD00000000000001ELL && a2 == 0x800000018100A860LL;
                                                                                                                                                                                          BOOL v192 = v191;
                                                                                                                                                                                          __int16 v6 = 307;
                                                                                                                                                                                          if ((result & 1) == 0 && !v192)
                                                                                                                                                                                          {
                                                                                                                                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                            if ((result & 1) != 0) {
                                                                                                                                                                                              goto LABEL_1944;
                                                                                                                                                                                            }
                                                                                                                                                                                            if (v4 == 0xD000000000000019LL && a2 == 0x800000018100A880LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                            {
                                                                                                                                                                                              __int16 v6 = 308;
                                                                                                                                                                                              goto LABEL_5;
                                                                                                                                                                                            }

                                                                                                                                                                                            if (v4 == 0x636169727973LL && a2 == 0xE600000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                            {
                                                                                                                                                                                              __int16 v6 = 13;
                                                                                                                                                                                              goto LABEL_5;
                                                                                                                                                                                            }

                                                                                                                                                                                            if (v4 == 0x7573636169727973LL && a2 == 0xE900000000000070LL)
                                                                                                                                                                                            {
LABEL_1964:
                                                                                                                                                                                              __int16 v6 = 19;
                                                                                                                                                                                              goto LABEL_5;
                                                                                                                                                                                            }

                                                                                                                                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                            BOOL v193 = v4 == 0xD000000000000010LL && a2 == 0x800000018100A8A0LL;
                                                                                                                                                                                            BOOL v194 = v193;
                                                                                                                                                                                            __int16 v6 = 19;
                                                                                                                                                                                            if ((result & 1) == 0 && !v194)
                                                                                                                                                                                            {
                                                                                                                                                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                              if ((result & 1) != 0) {
                                                                                                                                                                                                goto LABEL_1964;
                                                                                                                                                                                              }
                                                                                                                                                                                              if (v4 == 0x676F6C61676174LL && a2 == 0xE700000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                              {
                                                                                                                                                                                                __int16 v6 = 44;
                                                                                                                                                                                                goto LABEL_5;
                                                                                                                                                                                              }

                                                                                                                                                                                              if (v4 == 0x61776E6162676174LL && a2 == 0xE800000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                              {
                                                                                                                                                                                                __int16 v6 = 47;
                                                                                                                                                                                                goto LABEL_5;
                                                                                                                                                                                              }

                                                                                                                                                                                              if (v4 == 1936154996 && a2 == 0xE400000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                              {
                                                                                                                                                                                                __int16 v6 = 316;
                                                                                                                                                                                                goto LABEL_5;
                                                                                                                                                                                              }

                                                                                                                                                                                              if (v4 == 0x656C696174LL && a2 == 0xE500000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                              {
                                                                                                                                                                                                __int16 v6 = 52;
                                                                                                                                                                                                goto LABEL_5;
                                                                                                                                                                                              }

                                                                                                                                                                                              if (v4 == 0x6D616874696174LL && a2 == 0xE700000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                              {
                                                                                                                                                                                                __int16 v6 = 56;
                                                                                                                                                                                                goto LABEL_5;
                                                                                                                                                                                              }

                                                                                                                                                                                              if (v4 == 0x74656976696174LL && a2 == 0xE700000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                              {
                                                                                                                                                                                                __int16 v6 = 141;
                                                                                                                                                                                                goto LABEL_5;
                                                                                                                                                                                              }

                                                                                                                                                                                              if (v4 == 0x6A6E617578696174LL && a2 == 0xEB00000000676E69LL)
                                                                                                                                                                                              {
LABEL_2000:
                                                                                                                                                                                                __int16 v6 = 278;
                                                                                                                                                                                                goto LABEL_5;
                                                                                                                                                                                              }

                                                                                                                                                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                              BOOL v195 = v4 == 0xD000000000000012LL && a2 == 0x800000018100A8C0LL;
                                                                                                                                                                                              BOOL v196 = v195;
                                                                                                                                                                                              __int16 v6 = 278;
                                                                                                                                                                                              if ((result & 1) == 0 && !v196)
                                                                                                                                                                                              {
                                                                                                                                                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                if ((result & 1) != 0) {
                                                                                                                                                                                                  goto LABEL_2000;
                                                                                                                                                                                                }
                                                                                                                                                                                                if (v4 == 0x69726B6174LL && a2 == 0xE500000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                {
                                                                                                                                                                                                  __int16 v6 = 230;
                                                                                                                                                                                                  goto LABEL_5;
                                                                                                                                                                                                }

                                                                                                                                                                                                if (v4 == 0x6C696D6174LL && a2 == 0xE500000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                {
                                                                                                                                                                                                  __int16 v6 = 27;
                                                                                                                                                                                                  goto LABEL_5;
                                                                                                                                                                                                }

                                                                                                                                                                                                if (v4 == 0x7075736C696D6174LL && a2 == 0xE800000000000000LL)
                                                                                                                                                                                                {
LABEL_2020:
                                                                                                                                                                                                  __int16 v6 = 246;
                                                                                                                                                                                                  goto LABEL_5;
                                                                                                                                                                                                }

                                                                                                                                                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                BOOL v197 = v4 == 0x7075736C696D6174LL && a2 == 0xEF746E656D656C70LL;
                                                                                                                                                                                                BOOL v198 = v197;
                                                                                                                                                                                                __int16 v6 = 246;
                                                                                                                                                                                                if ((result & 1) == 0 && !v198)
                                                                                                                                                                                                {
                                                                                                                                                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                  if ((result & 1) != 0) {
                                                                                                                                                                                                    goto LABEL_2020;
                                                                                                                                                                                                  }
                                                                                                                                                                                                  if (v4 == 0x6173676E6174LL && a2 == 0xE600000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                  {
                                                                                                                                                                                                    __int16 v6 = 256;
                                                                                                                                                                                                    goto LABEL_5;
                                                                                                                                                                                                  }

                                                                                                                                                                                                  if (v4 == 0x7475676E6174LL && a2 == 0xE600000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                  {
                                                                                                                                                                                                    __int16 v6 = 262;
                                                                                                                                                                                                    goto LABEL_5;
                                                                                                                                                                                                  }

                                                                                                                                                                                                  if (v4 == 0xD000000000000010LL && a2 == 0x800000018100A8E0LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                  {
                                                                                                                                                                                                    __int16 v6 = 263;
                                                                                                                                                                                                    goto LABEL_5;
                                                                                                                                                                                                  }

                                                                                                                                                                                                  if (v4 == 0x75737475676E6174LL && a2 == 0xE900000000000070LL)
                                                                                                                                                                                                  {
LABEL_2044:
                                                                                                                                                                                                    __int16 v6 = 265;
                                                                                                                                                                                                    goto LABEL_5;
                                                                                                                                                                                                  }

                                                                                                                                                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                  BOOL v199 = v4 == 0xD000000000000010LL && a2 == 0x800000018100A900LL;
                                                                                                                                                                                                  BOOL v200 = v199;
                                                                                                                                                                                                  __int16 v6 = 265;
                                                                                                                                                                                                  if ((result & 1) == 0 && !v200)
                                                                                                                                                                                                  {
                                                                                                                                                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                    if ((result & 1) != 0) {
                                                                                                                                                                                                      goto LABEL_2044;
                                                                                                                                                                                                    }
                                                                                                                                                                                                    if (v4 == 0x7567756C6574LL && a2 == 0xE600000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                    {
                                                                                                                                                                                                      __int16 v6 = 28;
                                                                                                                                                                                                      goto LABEL_5;
                                                                                                                                                                                                    }

                                                                                                                                                                                                    if (v4 == 0x616E61616874LL && a2 == 0xE600000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                    {
                                                                                                                                                                                                      __int16 v6 = 15;
                                                                                                                                                                                                      goto LABEL_5;
                                                                                                                                                                                                    }

                                                                                                                                                                                                    if (v4 == 1767991412 && a2 == 0xE400000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                    {
                                                                                                                                                                                                      __int16 v6 = 32;
                                                                                                                                                                                                      goto LABEL_5;
                                                                                                                                                                                                    }

                                                                                                                                                                                                    if (v4 == 0x6E617465626974LL && a2 == 0xE700000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                    {
                                                                                                                                                                                                      __int16 v6 = 34;
                                                                                                                                                                                                      goto LABEL_5;
                                                                                                                                                                                                    }

                                                                                                                                                                                                    if (v4 == 0x6867616E69666974LL && a2 == 0xE800000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                    {
                                                                                                                                                                                                      __int16 v6 = 100;
                                                                                                                                                                                                      goto LABEL_5;
                                                                                                                                                                                                    }

                                                                                                                                                                                                    if (v4 == 0x61747568726974LL && a2 == 0xE700000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                    {
                                                                                                                                                                                                      __int16 v6 = 226;
                                                                                                                                                                                                      goto LABEL_5;
                                                                                                                                                                                                    }

                                                                                                                                                                                                    if (v4 == 1869901684 && a2 == 0xE400000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                    {
                                                                                                                                                                                                      __int16 v6 = 285;
                                                                                                                                                                                                      goto LABEL_5;
                                                                                                                                                                                                    }

                                                                                                                                                                                                    if (v4 == 0x726F70736E617274LL && a2 == 0xEF70616D646E6174LL)
                                                                                                                                                                                                    {
LABEL_2084:
                                                                                                                                                                                                      __int16 v6 = 301;
                                                                                                                                                                                                      goto LABEL_5;
                                                                                                                                                                                                    }

                                                                                                                                                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                    BOOL v201 = v4 == 0xD000000000000016LL && a2 == 0x800000018100A920LL;
                                                                                                                                                                                                    BOOL v202 = v201;
                                                                                                                                                                                                    __int16 v6 = 301;
                                                                                                                                                                                                    if ((result & 1) == 0 && !v202)
                                                                                                                                                                                                    {
                                                                                                                                                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                      if ((result & 1) != 0) {
                                                                                                                                                                                                        goto LABEL_2084;
                                                                                                                                                                                                      }
                                                                                                                                                                                                      if (v4 == 1935762293 && a2 == 0xE400000000000000LL)
                                                                                                                                                                                                      {
LABEL_2104:
                                                                                                                                                                                                        __int16 v6 = 41;
                                                                                                                                                                                                        goto LABEL_5;
                                                                                                                                                                                                      }

                                                                                                                                                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                      BOOL v203 = v4 == 0xD000000000000022LL && a2 == 0x800000018100A940LL;
                                                                                                                                                                                                      BOOL v204 = v203;
                                                                                                                                                                                                      __int16 v6 = 41;
                                                                                                                                                                                                      if ((result & 1) == 0 && !v204)
                                                                                                                                                                                                      {
                                                                                                                                                                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                        BOOL v205 = v4 == 0xD000000000000011LL && a2 == 0x800000018100A970LL;
                                                                                                                                                                                                        BOOL v206 = v205;
                                                                                                                                                                                                        __int16 v6 = 41;
                                                                                                                                                                                                        if ((result & 1) == 0 && !v206)
                                                                                                                                                                                                        {
                                                                                                                                                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                          if ((result & 1) != 0) {
                                                                                                                                                                                                            goto LABEL_2104;
                                                                                                                                                                                                          }
                                                                                                                                                                                                          if (v4 == 0x74786573616375LL && a2 == 0xE700000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || (uint64_t result = 0xD00000000000002ALL, v4 == 0xD00000000000002ALL) && a2 == 0x800000018100A990LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                          {
                                                                                                                                                                                                            __int16 v6 = 50;
                                                                                                                                                                                                            goto LABEL_5;
                                                                                                                                                                                                          }

                                                                                                                                                                                                          if (v4 == 0x6174786573616375LL && a2 == 0xE800000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || (uint64_t result = 0xD00000000000002BLL, v4 == 0xD00000000000002BLL) && a2 == 0x800000018100A9C0LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                          {
                                                                                                                                                                                                            __int16 v6 = 238;
                                                                                                                                                                                                            goto LABEL_5;
                                                                                                                                                                                                          }

                                                                                                                                                                                                          if (v4 == 0x6369746972616775LL && a2 == 0xE800000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                          {
                                                                                                                                                                                                            __int16 v6 = 176;
                                                                                                                                                                                                            goto LABEL_5;
                                                                                                                                                                                                          }

                                                                                                                                                                                                          if (v4 == 6906230 && a2 == 0xE300000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                          {
                                                                                                                                                                                                            __int16 v6 = 124;
                                                                                                                                                                                                            goto LABEL_5;
                                                                                                                                                                                                          }

                                                                                                                                                                                                          if (v4 == 0x7478656369646576LL && a2 == 0xE800000000000000LL)
                                                                                                                                                                                                          {
LABEL_2138:
                                                                                                                                                                                                            __int16 v6 = 66;
                                                                                                                                                                                                            goto LABEL_5;
                                                                                                                                                                                                          }

                                                                                                                                                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                          BOOL v207 = v4 == 0x7478656369646576LL && a2 == 0xEF736E6F69736E65LL;
                                                                                                                                                                                                          BOOL v208 = v207;
                                                                                                                                                                                                          __int16 v6 = 66;
                                                                                                                                                                                                          if ((result & 1) == 0 && !v208)
                                                                                                                                                                                                          {
                                                                                                                                                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                            if ((result & 1) != 0) {
                                                                                                                                                                                                              goto LABEL_2138;
                                                                                                                                                                                                            }
                                                                                                                                                                                                            if (v4 == 0x6C61636974726576LL && a2 == 0xED0000736D726F66LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                            {
                                                                                                                                                                                                              __int16 v6 = 157;
                                                                                                                                                                                                              goto LABEL_5;
                                                                                                                                                                                                            }

                                                                                                                                                                                                            if (v4 == 0x6971756B68746976LL && a2 == 0xE800000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                            {
                                                                                                                                                                                                              __int16 v6 = 184;
                                                                                                                                                                                                              goto LABEL_5;
                                                                                                                                                                                                            }

                                                                                                                                                                                                            if (v4 == 29558 && a2 == 0xE200000000000000LL)
                                                                                                                                                                                                            {
LABEL_2158:
                                                                                                                                                                                                              __int16 v6 = 156;
                                                                                                                                                                                                              goto LABEL_5;
                                                                                                                                                                                                            }

                                                                                                                                                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                            BOOL v209 = v4 == 0xD000000000000012LL && a2 == 0x800000018100A9F0LL;
                                                                                                                                                                                                            BOOL v210 = v209;
                                                                                                                                                                                                            __int16 v6 = 156;
                                                                                                                                                                                                            if ((result & 1) == 0 && !v210)
                                                                                                                                                                                                            {
                                                                                                                                                                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                              if ((result & 1) != 0) {
                                                                                                                                                                                                                goto LABEL_2158;
                                                                                                                                                                                                              }
                                                                                                                                                                                                              if (v4 == 0x7075737376LL && a2 == 0xE500000000000000LL)
                                                                                                                                                                                                              {
LABEL_2170:
                                                                                                                                                                                                                __int16 v6 = 317;
                                                                                                                                                                                                                goto LABEL_5;
                                                                                                                                                                                                              }

                                                                                                                                                                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                              BOOL v211 = v4 == 0xD00000000000001CLL && a2 == 0x800000018100AA10LL;
                                                                                                                                                                                                              BOOL v212 = v211;
                                                                                                                                                                                                              __int16 v6 = 317;
                                                                                                                                                                                                              if ((result & 1) == 0 && !v212)
                                                                                                                                                                                                              {
                                                                                                                                                                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                if ((result & 1) != 0) {
                                                                                                                                                                                                                  goto LABEL_2170;
                                                                                                                                                                                                                }
                                                                                                                                                                                                                if (v4 == 0x6F68636E6177LL && a2 == 0xE600000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                                {
                                                                                                                                                                                                                  __int16 v6 = 286;
                                                                                                                                                                                                                  goto LABEL_5;
                                                                                                                                                                                                                }

                                                                                                                                                                                                                if (v4 == 0x6963676E61726177LL && a2 == 0xEA00000000006974LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                                {
                                                                                                                                                                                                                  __int16 v6 = 233;
                                                                                                                                                                                                                  goto LABEL_5;
                                                                                                                                                                                                                }

                                                                                                                                                                                                                if (v4 == 0x6964697A6579LL && a2 == 0xE600000000000000LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                                {
                                                                                                                                                                                                                  __int16 v6 = 208;
                                                                                                                                                                                                                  goto LABEL_5;
                                                                                                                                                                                                                }

                                                                                                                                                                                                                if (v4 == 0x6163696461726979LL && a2 == 0xEA0000000000736CLL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                                {
                                                                                                                                                                                                                  __int16 v6 = 122;
                                                                                                                                                                                                                  goto LABEL_5;
                                                                                                                                                                                                                }

                                                                                                                                                                                                                if (v4 == 0x62616C6C79736979LL && a2 == 0xEB0000000073656CLL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                                {
                                                                                                                                                                                                                  __int16 v6 = 121;
                                                                                                                                                                                                                  goto LABEL_5;
                                                                                                                                                                                                                }

                                                                                                                                                                                                                if (v4 == 0x676E696A6979LL && a2 == 0xE600000000000000LL)
                                                                                                                                                                                                                {
LABEL_2202:
                                                                                                                                                                                                                  __int16 v6 = 119;
                                                                                                                                                                                                                  goto LABEL_5;
                                                                                                                                                                                                                }

                                                                                                                                                                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                BOOL v214 = v4 == 0xD000000000000015LL && a2 == 0x800000018100AA30LL;
                                                                                                                                                                                                                __int16 v6 = 119;
                                                                                                                                                                                                                if ((result & 1) == 0 && !v214)
                                                                                                                                                                                                                {
                                                                                                                                                                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                  if ((result & 1) != 0) {
                                                                                                                                                                                                                    goto LABEL_2202;
                                                                                                                                                                                                                  }
                                                                                                                                                                                                                  if (v4 == 0x617A6162616E617ALL && a2 == 0xEF65726175717372LL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                                  {
                                                                                                                                                                                                                    __int16 v6 = 236;
                                                                                                                                                                                                                  }

                                                                                                                                                                                                                  else if (v4 == 0x796E6E656D616E7ALL && a2 == 0xED0000636973756DLL)
                                                                                                                                                                                                                  {
                                                                                                                                                                                                                    __int16 v6 = 273;
                                                                                                                                                                                                                  }

                                                                                                                                                                                                                  else
                                                                                                                                                                                                                  {
                                                                                                                                                                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                    BOOL v216 = v4 == 0xD000000000000017LL && a2 == 0x800000018100AA50LL;
                                                                                                                                                                                                                    __int16 v6 = 273;
                                                                                                                                                                                                                    if ((result & 1) == 0 && !v216)
                                                                                                                                                                                                                    {
                                                                                                                                                                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                      if ((result & 1) != 0) {
                                                                                                                                                                                                                        __int16 v6 = 273;
                                                                                                                                                                                                                      }
                                                                                                                                                                                                                      else {
                                                                                                                                                                                                                        __int16 v6 = 321;
                                                                                                                                                                                                                      }
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                  }
                                                                                                                                                                                                                }
                                                                                                                                                                                                              }
                                                                                                                                                                                                            }
                                                                                                                                                                                                          }
                                                                                                                                                                                                        }
                                                                                                                                                                                                      }
                                                                                                                                                                                                    }
                                                                                                                                                                                                  }
                                                                                                                                                                                                }
                                                                                                                                                                                              }
                                                                                                                                                                                            }
                                                                                                                                                                                          }
                                                                                                                                                                                        }
                                                                                                                                                                                      }
                                                                                                                                                                                    }
                                                                                                                                                                                  }
                                                                                                                                                                                }
                                                                                                                                                                              }
                                                                                                                                                                            }
                                                                                                                                                                          }
                                                                                                                                                                        }
                                                                                                                                                                      }
                                                                                                                                                                    }
                                                                                                                                                                  }
                                                                                                                                                                }
                                                                                                                                                              }
                                                                                                                                                            }
                                                                                                                                                          }
                                                                                                                                                        }
                                                                                                                                                      }
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                                              }
                                                                                                                                            }
                                                                                                                                          }
                                                                                                                                        }
                                                                                                                                      }
                                                                                                                                    }
                                                                                                                                  }
                                                                                                                                }
                                                                                                                              }
                                                                                                                            }
                                                                                                                          }
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

uint64_t closure #1 in static Parser.classifySpecialPropValue(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v4 = a1 == 7958113 && a2 == 0xE300000000000000LL;
  if (v4
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0x64656E6769737361LL && a2 == 0xE800000000000000LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0x6969637361LL && a2 == 0xE500000000000000LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    uint64_t v7 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0LL);
    swift_storeEnumTagMultiPayload();
    BOOL v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL);
    uint64_t v9 = a3;
    uint64_t v10 = 0LL;
    uint64_t v11 = v7;
  }

  else
  {
    uint64_t v11 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0LL);
    BOOL v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL);
    uint64_t v9 = a3;
    uint64_t v10 = 1LL;
  }

  return v8(v9, v10, 1LL, v11);
}

unint64_t specialized Collection<>.firstIndex(of:)( uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v14 = a4 >> 14;
  if (a4 >> 14 == a3 >> 14) {
    return 0LL;
  }
  if (Substring.subscript.getter() == a1 && v8 == a2)
  {
    unint64_t v4 = a3;
LABEL_6:
    swift_bridgeObjectRelease();
  }

  else
  {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v9 & 1) != 0)
    {
      return a3;
    }

    else
    {
      while (1)
      {
        unint64_t v11 = Substring.index(after:)();
        if (v11 >> 14 == v14) {
          return 0LL;
        }
        unint64_t v4 = v11;
        if (Substring.subscript.getter() == a1 && v12 == a2) {
          goto LABEL_6;
        }
        char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v10 & 1) != 0) {
          return v4;
        }
      }
    }
  }

  return v4;
}

uint64_t Parser.classifyCharacterPropertyValueOnly(_:)@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v57 = *(void *)(v6 - 8);
  uint64_t v58 = v6;
  MEMORY[0x1895F8858](v6, v7);
  char v9 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AST.Atom.CharacterProperty.Kind?);
  MEMORY[0x1895F8858](v10, v11);
  BOOL v13 = (char *)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1895F8858](v14, v16);
  BOOL v18 = (char *)&v54 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = *a1;
  unint64_t v20 = a1[1];
  uint64_t v21 = a1[2];
  uint64_t v22 = a1[3];
  if ((v20 & 0x2000000000000000LL) != 0) {
    uint64_t v23 = HIBYTE(v20) & 0xF;
  }
  else {
    uint64_t v23 = *a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v23)
  {
    __int128 v65 = 8uLL;
    uint64_t v66 = 0LL;
    unint64_t v67 = 0LL;
    char v68 = 36;
    BOOL v36 = a2;
    uint64_t v37 = v3;
    return error #1 (_:) in Parser.classifyCharacterPropertyValueOnly(_:)(&v65, v37, v21, v22, v19, v20, v36);
  }

  uint64_t v55 = v22;
  uint64_t v56 = v21;
  BOOL v59 = a2;
  specialized static Parser.withNormalizedForms<A>(_:requireInPrefix:match:)(v19, v20, (uint64_t)v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1LL, v14) != 1)
  {
    outlined init with take of AST.Atom.Kind( (uint64_t)v13,  (uint64_t)v18,  type metadata accessor for AST.Atom.CharacterProperty.Kind);
    return outlined init with take of AST.Atom.Kind( (uint64_t)v18,  (uint64_t)v59,  type metadata accessor for AST.Atom.CharacterProperty.Kind);
  }

  outlined destroy of _ASTParent?( (uint64_t)v13,  &demangling cache variable for type metadata for AST.Atom.CharacterProperty.Kind?);
  specialized static Parser.withNormalizedForms<A>(_:requireInPrefix:match:)(v19, v20, (char *)&v65);
  if (v65 != 67)
  {
    BOOL v38 = v59;
    *BOOL v59 = v65;
    v38[1] = 1;
    return swift_storeEnumTagMultiPayload();
  }

  specialized static Parser.withNormalizedForms<A>(_:requireInPrefix:match:)(v19, v20, (char *)&v65);
  if (v65 != 38)
  {
    *BOOL v59 = v65;
    return swift_storeEnumTagMultiPayload();
  }

  specialized static Parser.withNormalizedForms<A>(_:requireInPrefix:match:)(v19, v20, (char *)&v65);
  if (v65 != 163)
  {
    *BOOL v59 = v65;
    return swift_storeEnumTagMultiPayload();
  }

  specialized static Parser.withNormalizedForms<A>(_:requireInPrefix:match:)(v19, v20, (char *)&v65);
  if (v65 != 6)
  {
    *BOOL v59 = v65;
    return swift_storeEnumTagMultiPayload();
  }

  uint64_t v62 = 0LL;
  unint64_t v63 = 0xE000000000000000LL;
  *(void *)&__int128 v65 = v19;
  *((void *)&v65 + 1) = v20;
  uint64_t v66 = 0LL;
  unint64_t v67 = v23;
  swift_bridgeObjectRetain();
  Swift::String_optional v25 = String.Iterator.next()();
  uint64_t result = v25.value._countAndFlagsBits;
  if (!v25.value._object)
  {
LABEL_45:
    swift_bridgeObjectRelease();
    Swift::String v39 = String.lowercased()();
    swift_bridgeObjectRelease();
    v40._uint64_t countAndFlagsBits = 28265LL;
    v40._unint64_t object = (void *)0xE200000000000000LL;
    if (String.hasPrefix(_:)(v40))
    {
      unint64_t v41 = specialized Collection.dropFirst(_:)(2uLL, v39._countAndFlagsBits, (unint64_t)v39._object);
      uint64_t v43 = v42;
      uint64_t v45 = v44;
      uint64_t v47 = v46;
      swift_bridgeObjectRelease();
      uint64_t v48 = MEMORY[0x186E052CC](v41, v43, v45, v47);
      uint64_t v50 = v49;
      swift_bridgeObjectRelease();
      closure #1 in static Parser.classifyBlockProperty(_:valueOnly:)(v48, v50, &v64);
      swift_bridgeObjectRelease();
      BOOL v51 = v59;
      if (v64 != 321)
      {
        *(_WORD *)BOOL v59 = v64;
        return swift_storeEnumTagMultiPayload();
      }
    }

    else
    {
      swift_bridgeObjectRelease();
      BOOL v51 = v59;
    }

    swift_bridgeObjectRetain();
    v52._uint64_t countAndFlagsBits = v19;
    v52._unint64_t object = (void *)v20;
    AST.Atom.CharacterProperty.PCRESpecialCategory.init(rawValue:)(v52);
    if (v65 != 5)
    {
      *BOOL v51 = v65;
      return swift_storeEnumTagMultiPayload();
    }

    swift_bridgeObjectRetain();
    v53._uint64_t countAndFlagsBits = v19;
    v53._unint64_t object = (void *)v20;
    AST.Atom.CharacterProperty.JavaSpecial.init(rawValue:)(v53);
    if (v65 != 18)
    {
      *BOOL v51 = v65;
      return swift_storeEnumTagMultiPayload();
    }

    __int128 v65 = 0uLL;
    uint64_t v66 = v19;
    unint64_t v67 = v20;
    char v68 = 18;
    BOOL v36 = v51;
    uint64_t v37 = v3;
    uint64_t v22 = v55;
    uint64_t v21 = v56;
    return error #1 (_:) in Parser.classifyCharacterPropertyValueOnly(_:)(&v65, v37, v21, v22, v19, v20, v36);
  }

  uint64_t countAndFlagsBits = v25.value._countAndFlagsBits;
  unint64_t object = (unint64_t)v25.value._object;
  uint64_t v29 = v57;
  uint64_t v28 = v58;
  while ((object & 0x2000000000000000LL) != 0 ? HIBYTE(object) & 0xF : countAndFlagsBits & 0xFFFFFFFFFFFFLL)
  {
    if ((object & 0x1000000000000000LL) != 0)
    {
      _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }

    else
    {
      if ((object & 0x2000000000000000LL) != 0)
      {
        uint64_t v60 = countAndFlagsBits;
        uint64_t v61 = object & 0xFFFFFFFFFFFFFFLL;
      }

      else if ((countAndFlagsBits & 0x1000000000000000LL) == 0)
      {
        _StringObject.sharedUTF8.getter();
      }

      _decodeScalar(_:startingAt:)();
    }

    Unicode.Scalar.properties.getter();
    char v32 = Unicode.Scalar.Properties.isPatternWhitespace.getter();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v9, v28);
    if ((v32 & 1) == 0 && (countAndFlagsBits != 95 || object != 0xE100000000000000LL))
    {
      char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
      BOOL v35 = countAndFlagsBits == 45 && object == 0xE100000000000000LL;
      if ((v33 & 1) == 0 && !v35 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        MEMORY[0x186E0535C](countAndFlagsBits, object);
      }
    }

    swift_bridgeObjectRelease();
    Swift::String_optional v30 = String.Iterator.next()();
    uint64_t result = v30.value._countAndFlagsBits;
    uint64_t countAndFlagsBits = v30.value._countAndFlagsBits;
    unint64_t object = (unint64_t)v30.value._object;
    if (!v30.value._object) {
      goto LABEL_45;
    }
  }

  __break(1u);
  return result;
}

uint64_t error #1 (_:) in Parser.classifyCharacterPropertyValueOnly(_:)@<X0>( __int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  uint64_t v11 = v29[1];
  uint64_t v12 = v29[2];
  uint64_t v24 = v29[3];
  uint64_t v25 = v29[0];
  char v23 = v30;
  ParseError.description.getter();
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  uint64_t v17 = *(char **)(a2 + 72);
  outlined retain of ParseError((uint64_t)a1);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(a2 + 72) = v17;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v17 + 2) + 1LL,  1,  v17);
    *(void *)(a2 + 72) = v17;
  }

  unint64_t v20 = *((void *)v17 + 2);
  unint64_t v19 = *((void *)v17 + 3);
  if (v20 >= v19 >> 1)
  {
    uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v19 > 1),  v20 + 1,  1,  v17);
    *(void *)(a2 + 72) = v17;
  }

  *((void *)v17 + 2) = v20 + 1;
  uint64_t v21 = &v17[80 * v20];
  v21[32] = 1;
  *((void *)v21 + 5) = v14;
  *((void *)v21 + 6) = v16;
  *((void *)v21 + 7) = a3;
  *((void *)v21 + 8) = a4;
  *((void *)v21 + 9) = v25;
  *((void *)v21 + 10) = v11;
  *((void *)v21 + 11) = v12;
  *((void *)v21 + 12) = v24;
  v21[104] = v23;
  *a7 = 0LL;
  a7[1] = 0LL;
  a7[2] = a5;
  a7[3] = a6;
  type metadata accessor for AST.Atom.CharacterProperty.Kind(0LL);
  swift_storeEnumTagMultiPayload();
  return swift_bridgeObjectRetain();
}

uint64_t Parser.classifyCharacterProperty(key:value:)@<X0>( uint64_t *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v70 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0LL);
  uint64_t v8 = *(void *)(v70 - 8);
  MEMORY[0x1895F8858](v70, v9);
  uint64_t v11 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AST.Atom.CharacterProperty.Kind?);
  uint64_t v14 = MEMORY[0x1895F8858](v12, v13);
  uint64_t v16 = (char *)&v63 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v14, v17);
  unint64_t v19 = (char *)&v63 - v18;
  unint64_t v20 = a1[1];
  uint64_t v22 = a1[2];
  uint64_t v21 = a1[3];
  uint64_t v23 = *a2;
  unint64_t v24 = a2[1];
  uint64_t v25 = HIBYTE(v20) & 0xF;
  uint64_t v71 = *a1;
  if ((v20 & 0x2000000000000000LL) == 0) {
    uint64_t v25 = v71 & 0xFFFFFFFFFFFFLL;
  }
  if (!v25)
  {
    uint64_t v49 = v22;
    uint64_t v50 = v21;
    uint64_t v51 = v23;
    Swift::String v52 = *(char **)(v4 + 72);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      Swift::String v52 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v52 + 2) + 1LL,  1,  v52);
    }
    unint64_t v54 = *((void *)v52 + 2);
    unint64_t v53 = *((void *)v52 + 3);
    if (v54 >= v53 >> 1)
    {
      uint64_t v60 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v53 > 1),  v54 + 1,  1,  v52);
      uint64_t v56 = v49;
      uint64_t v55 = v50;
      Swift::String v52 = v60;
    }

    else
    {
      uint64_t v55 = v50;
      uint64_t v56 = v49;
    }

    *((void *)v52 + 2) = v54 + 1;
    uint64_t v57 = &v52[80 * v54];
    v57[32] = 1;
    *((void *)v57 + 5) = 0xD000000000000016LL;
    *((void *)v57 + 6) = 0x8000000181008B60LL;
    *((void *)v57 + 7) = v56;
    *((void *)v57 + 8) = v55;
    *((void *)v57 + 9) = 8LL;
    *((void *)v57 + 10) = 0LL;
    *((void *)v57 + 11) = 0LL;
    *((void *)v57 + 12) = 0LL;
    v57[104] = 36;
    *(void *)(v4 + 72) = v52;
    *a3 = v71;
    a3[1] = v20;
    a3[2] = v51;
    a3[3] = v24;
    return swift_storeEnumTagMultiPayload();
  }

  uint64_t v69 = v4;
  unint64_t v26 = a2[2];
  uint64_t v27 = a2[3];
  uint64_t v28 = HIBYTE(v24) & 0xF;
  if ((v24 & 0x2000000000000000LL) == 0) {
    uint64_t v28 = v23 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v29 = v23;
  if (!v28)
  {
    __int128 v72 = 8uLL;
    uint64_t v73 = 0LL;
    unint64_t v74 = 0LL;
    char v75 = 36;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    valueError #1 (_:) in Parser.classifyCharacterProperty(key:value:)(&v72, v69, v26, v27, v71, v20, v29, v24, a3);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  unint64_t v65 = v21;
  uint64_t v66 = v27;
  unint64_t v64 = v22;
  unint64_t v67 = a3;
  uint64_t v68 = v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v30 = v71;
  specialized static Parser.withNormalizedForms<A>(_:requireInPrefix:match:)(v71, v20, (char *)&v72);
  char v31 = v72;
  if (v72 != 67)
  {
    char v32 = specialized static Parser.withNormalizedForms<A>(_:requireInPrefix:match:)(v68, v24);
    if (v32 != 2)
    {
      char v58 = v32;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      BOOL v59 = v67;
      *unint64_t v67 = v31;
      v59[1] = v58 & 1;
      return swift_storeEnumTagMultiPayload();
    }
  }

  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  uint64_t v62 = v30;
  uint64_t v33 = v30;
  uint64_t v35 = v68;
  uint64_t v34 = v69;
  unint64_t v36 = v66;
  specialized static Parser.withNormalizedForms<A>(_:requireInPrefix:match:)( v33,  v20,  v68,  v24,  v69,  v24,  v26,  v66,  (uint64_t)v19,  v62,  v20);
  outlined init with take of Source.Located<AST.Atom.Kind>?( (uint64_t)v19,  (uint64_t)v16,  &demangling cache variable for type metadata for AST.Atom.CharacterProperty.Kind?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v16, 1LL, v70) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined init with take of AST.Atom.Kind( (uint64_t)v16,  (uint64_t)v11,  type metadata accessor for AST.Atom.CharacterProperty.Kind);
    return outlined init with take of AST.Atom.Kind( (uint64_t)v11,  (uint64_t)v67,  type metadata accessor for AST.Atom.CharacterProperty.Kind);
  }

  outlined destroy of _ASTParent?( (uint64_t)v16,  &demangling cache variable for type metadata for AST.Atom.CharacterProperty.Kind?);
  if (v26 >> 14 >= v64 >> 14) {
    unint64_t v37 = v64;
  }
  else {
    unint64_t v37 = v26;
  }
  if (v36 >> 14 >= v65 >> 14) {
    unint64_t v38 = v36;
  }
  else {
    unint64_t v38 = v65;
  }
  *(void *)&__int128 v72 = v71;
  *((void *)&v72 + 1) = v20;
  uint64_t v73 = v35;
  unint64_t v74 = v24;
  char v75 = 18;
  if (v38 >> 14 < v37 >> 14)
  {
    __break(1u);
    goto LABEL_32;
  }

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  ParseError.description.getter();
  uint64_t v35 = v39;
  unint64_t v19 = v40;
  uint64_t v11 = *(char **)(v34 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_32:
  }
    uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v11 + 2) + 1LL,  1,  v11);
  uint64_t v41 = v71;
  unint64_t v43 = *((void *)v11 + 2);
  unint64_t v42 = *((void *)v11 + 3);
  uint64_t v44 = v68;
  if (v43 >= v42 >> 1)
  {
    uint64_t v61 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v42 > 1),  v43 + 1,  1,  v11);
    uint64_t v44 = v68;
    uint64_t v11 = v61;
  }

  *((void *)v11 + 2) = v43 + 1;
  uint64_t v45 = &v11[80 * v43];
  v45[32] = 1;
  *((void *)v45 + 5) = v35;
  *((void *)v45 + 6) = v19;
  *((void *)v45 + 7) = v37;
  *((void *)v45 + 8) = v38;
  *((void *)v45 + 9) = v41;
  *((void *)v45 + 10) = v20;
  *((void *)v45 + 11) = v44;
  *((void *)v45 + 12) = v24;
  v45[104] = 18;
  uint64_t v46 = v44;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)(v69 + 72) = v11;
  uint64_t v47 = v67;
  *(void *)unint64_t v67 = v41;
  v47[1] = v20;
  v47[2] = v46;
  v47[3] = v24;
  return swift_storeEnumTagMultiPayload();
}

uint64_t valueError #1 (_:) in Parser.classifyCharacterProperty(key:value:)@<X0>( __int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  uint64_t v14 = v33[1];
  uint64_t v27 = v33[2];
  uint64_t v28 = v33[0];
  uint64_t v26 = v33[3];
  char v25 = v34;
  ParseError.description.getter();
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  unint64_t v19 = *(char **)(a2 + 72);
  outlined retain of ParseError((uint64_t)a1);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(a2 + 72) = v19;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v19 + 2) + 1LL,  1,  v19);
    *(void *)(a2 + 72) = v19;
  }

  unint64_t v22 = *((void *)v19 + 2);
  unint64_t v21 = *((void *)v19 + 3);
  if (v22 >= v21 >> 1)
  {
    unint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v21 > 1),  v22 + 1,  1,  v19);
    *(void *)(a2 + 72) = v19;
  }

  *((void *)v19 + 2) = v22 + 1;
  uint64_t v23 = &v19[80 * v22];
  v23[32] = 1;
  *((void *)v23 + 5) = v16;
  *((void *)v23 + 6) = v18;
  *((void *)v23 + 7) = a3;
  *((void *)v23 + 8) = a4;
  *((void *)v23 + 9) = v28;
  *((void *)v23 + 10) = v14;
  *((void *)v23 + 11) = v27;
  *((void *)v23 + 12) = v26;
  v23[104] = v25;
  *a9 = a5;
  a9[1] = a6;
  a9[2] = a7;
  a9[3] = a8;
  type metadata accessor for AST.Atom.CharacterProperty.Kind(0LL);
  swift_storeEnumTagMultiPayload();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t closure #1 in Parser.classifyCharacterProperty(key:value:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10)
{
  uint64_t v77 = a6;
  uint64_t v78 = a7;
  uint64_t v76 = a5;
  uint64_t v79 = a10;
  uint64_t v80 = a8;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Unicode.NumericType?);
  MEMORY[0x1895F8858](v15, v16);
  uint64_t v18 = (char *)&v76 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for Unicode.NumericType();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x1895F8858](v19, v21);
  uint64_t v23 = (char *)&v76 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a1 == 0x747069726373LL && a2 == 0xE600000000000000LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 25459 && a2 == 0xE200000000000000LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    specialized static Parser.withNormalizedForms<A>(_:requireInPrefix:match:)(a3, a4, (char *)&v82);
    char v24 = v82;
    if (v82 == 163)
    {
LABEL_8:
      *(void *)&__int128 v82 = a3;
      *((void *)&v82 + 1) = a4;
      uint64_t v83 = 0LL;
      uint64_t v84 = 0LL;
      char v25 = 19;
LABEL_9:
      char v85 = v25;
      valueError #1 (_:) in Parser.classifyCharacterProperty(key:value:)(&v82, v76, v77, v78, v80, v79, a3, a4, a9);
      uint64_t v26 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0LL);
      uint64_t v27 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56LL);
      uint64_t v28 = a9;
      uint64_t v29 = 0LL;
      return v27(v28, v29, 1LL, v26);
    }

    goto LABEL_10;
  }

  if (a1 == 0xD000000000000010LL && a2 == 0x8000000181009550LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 7889779 && a2 == 0xE300000000000000LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    specialized static Parser.withNormalizedForms<A>(_:requireInPrefix:match:)(a3, a4, (char *)&v82);
    char v24 = v82;
    goto LABEL_10;
  }

  if (a1 == 25447 && a2 == 0xE200000000000000LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0x636C6172656E6567LL && a2 == 0xEF79726F67657461LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    specialized static Parser.withNormalizedForms<A>(_:requireInPrefix:match:)(a3, a4, (char *)&v82);
    char v24 = v82;
    if (v82 == 38)
    {
      *(void *)&__int128 v82 = a3;
      *((void *)&v82 + 1) = a4;
      uint64_t v83 = 0LL;
      uint64_t v84 = 0LL;
      char v25 = 20;
      goto LABEL_9;
    }

LABEL_10:
    *(_BYTE *)a9 = v24;
    uint64_t v30 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0LL);
    goto LABEL_11;
  }

  if (a1 == 6645601 && a2 == 0xE300000000000000LL || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    unint64_t v32 = specialized static Parser.parseAge(_:)();
    if ((v34 & 1) != 0)
    {
      *(void *)&__int128 v82 = a3;
      *((void *)&v82 + 1) = a4;
      uint64_t v83 = 0LL;
      uint64_t v84 = 0LL;
      char v25 = 22;
      goto LABEL_9;
    }

    *a9 = v32;
    a9[1] = v33;
    uint64_t v30 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0LL);
LABEL_11:
    swift_storeEnumTagMultiPayload();
    uint64_t v27 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56LL);
    uint64_t v28 = a9;
    uint64_t v29 = 0LL;
    uint64_t v26 = v30;
    return v27(v28, v29, 1LL, v26);
  }

  if (a1 == 1701667182 && a2 == 0xE400000000000000LL
    || ((char v36 = _stringCompareWithSmolCheck(_:_:expecting:)(), a1 == 24942)
      ? (BOOL v37 = a2 == 0xE200000000000000LL)
      : (BOOL v37 = 0),
        !v37 ? (char v38 = 0) : (char v38 = 1),
        (v36 & 1) != 0 || (v38 & 1) != 0 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    *a9 = a3;
    a9[1] = a4;
    uint64_t v35 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0LL);
LABEL_39:
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56LL))(a9, 0LL, 1LL, v35);
    return swift_bridgeObjectRetain();
  }

  if (a1 == 0x76636972656D756ELL && a2 == 0xEC00000065756C61LL
    || ((char v39 = _stringCompareWithSmolCheck(_:_:expecting:)(), a1 == 30318)
      ? (BOOL v40 = a2 == 0xE200000000000000LL)
      : (BOOL v40 = 0),
        !v40 ? (char v41 = 0) : (char v41 = 1),
        (v39 & 1) != 0 || (v41 & 1) != 0 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    *(void *)&__int128 v82 = 0LL;
    if (specialized String.withCString<A>(_:)(a3, a4))
    {
      *a9 = v82;
      uint64_t v42 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0LL);
LABEL_62:
      swift_storeEnumTagMultiPayload();
      return (*(uint64_t (**)(void *, void, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56LL))( a9,  0LL,  1LL,  v42);
    }

    *(void *)&__int128 v82 = a3;
    *((void *)&v82 + 1) = a4;
    uint64_t v83 = 0LL;
    uint64_t v84 = 0LL;
    char v43 = 23;
    goto LABEL_64;
  }

  if (a1 == 0x74636972656D756ELL && a2 == 0xEB00000000657079LL
    || ((char v45 = _stringCompareWithSmolCheck(_:_:expecting:)(), a1 == 29806)
      ? (BOOL v46 = a2 == 0xE200000000000000LL)
      : (BOOL v46 = 0),
        !v46 ? (char v47 = 0) : (char v47 = 1),
        (v45 & 1) != 0 || (v47 & 1) != 0 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    specialized static Parser.withNormalizedForms<A>(_:requireInPrefix:match:)(a3, a4, v18);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1LL, v19) != 1)
    {
      uint64_t v48 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
      v48(v23, v18, v19);
      v48((char *)a9, v23, v19);
      uint64_t v42 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0LL);
      goto LABEL_62;
    }

    outlined destroy of _ASTParent?((uint64_t)v18, &demangling cache variable for type metadata for Unicode.NumericType?);
    *(void *)&__int128 v82 = a3;
    *((void *)&v82 + 1) = a4;
    uint64_t v83 = 0LL;
    uint64_t v84 = 0LL;
    char v43 = 24;
    goto LABEL_64;
  }

  if (a1 == 6515827 && a2 == 0xE300000000000000LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0xD000000000000016LL && a2 == 0x8000000181009570LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    *(_BYTE *)a9 = 0;
LABEL_86:
    a9[1] = a3;
    a9[2] = a4;
    uint64_t v35 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0LL);
    goto LABEL_39;
  }

  if (a1 == 6518131 && a2 == 0xE300000000000000LL
    || ((char v49 = _stringCompareWithSmolCheck(_:_:expecting:)(), a1 == 0xD000000000000016LL)
      ? (BOOL v50 = a2 == 0x8000000181009590LL)
      : (BOOL v50 = 0),
        !v50 ? (char v51 = 0) : (char v51 = 1),
        (v49 & 1) != 0 || (v51 & 1) != 0 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    *(_BYTE *)a9 = 1;
    goto LABEL_86;
  }

  if (a1 == 6517875 && a2 == 0xE300000000000000LL
    || ((char v52 = _stringCompareWithSmolCheck(_:_:expecting:)(), a1 == 0xD000000000000016LL)
      ? (BOOL v53 = a2 == 0x80000001810095B0LL)
      : (BOOL v53 = 0),
        !v53 ? (char v54 = 0) : (char v54 = 1),
        (v52 & 1) != 0 || (v54 & 1) != 0 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)))
  {
    *(_BYTE *)a9 = 2;
    goto LABEL_86;
  }

  if (a1 != 6513507 || a2 != 0xE300000000000000LL)
  {
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if ((result & 1) == 0)
    {
      uint64_t result = 0xD000000000000017LL;
      if (a1 != 0xD000000000000017LL || a2 != 0x80000001810095D0LL)
      {
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) == 0)
        {
          if ((a1 != 7040098 || a2 != 0xE300000000000000LL)
            && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
            && (a1 != 0x6B636F6C62LL || a2 != 0xE500000000000000LL)
            && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            uint64_t v26 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0LL);
            uint64_t v27 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56LL);
            uint64_t v28 = a9;
            uint64_t v29 = 1LL;
            return v27(v28, v29, 1LL, v26);
          }

          specialized static Parser.withNormalizedForms<A>(_:requireInPrefix:match:)(a3, a4, (__int16 *)&v82);
          if ((unsigned __int16)v82 == 321)
          {
            *(void *)&__int128 v82 = a3;
            *((void *)&v82 + 1) = a4;
            uint64_t v83 = 0LL;
            uint64_t v84 = 0LL;
            char v25 = 21;
            goto LABEL_9;
          }

          *(_WORD *)a9 = v82;
          uint64_t v30 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0LL);
          goto LABEL_11;
        }
      }
    }
  }

  uint64_t v55 = HIBYTE(a4) & 0xF;
  uint64_t v56 = a3 & 0xFFFFFFFFFFFFLL;
  if ((a4 & 0x2000000000000000LL) != 0) {
    uint64_t v57 = HIBYTE(a4) & 0xF;
  }
  else {
    uint64_t v57 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v57) {
    goto LABEL_194;
  }
  if ((a4 & 0x1000000000000000LL) != 0)
  {
    swift_bridgeObjectRetain();
    unsigned int v60 = specialized _parseInteger<A, B>(ascii:radix:)(a3, a4, 10LL);
    swift_bridgeObjectRelease();
    if (((v60 >> 8) & 1) == 0)
    {
LABEL_181:
      if ((_BYTE)v60 != 0xFF)
      {
        Unicode.CanonicalCombiningClass.init(rawValue:)();
        uint64_t v42 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0LL);
        goto LABEL_62;
      }
    }

    uint64_t v7 = 0;
    return v7 & 1;
  }

  __break(1u);
  return result;
}

LABEL_194:
    *(void *)&__int128 v82 = a3;
    *((void *)&v82 + 1) = a4;
    uint64_t v83 = 0LL;
    uint64_t v84 = 0LL;
    char v43 = 25;
LABEL_64:
    char v85 = v43;
    valueError #1 (_:) in Parser.classifyCharacterProperty(key:value:)(&v82, v76, v77, v78, v80, v79, a3, a4, a9);
    uint64_t v44 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0LL);
    return (*(uint64_t (**)(void *, void, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56LL))( a9,  0LL,  1LL,  v44);
  }

  if ((a4 & 0x2000000000000000LL) == 0)
  {
    if ((a3 & 0x1000000000000000LL) != 0) {
      uint64_t result = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
    }
    else {
      uint64_t result = _StringObject.sharedUTF8.getter();
    }
    int v58 = *(unsigned __int8 *)result;
    if (v58 == 43)
    {
      if (v56 > 0)
      {
        uint64_t v67 = v56 - 1;
        if (v56 != 1)
        {
          if (result)
          {
            LOBYTE(v60) = 0;
            uint64_t v68 = (unsigned __int8 *)(result + 1);
            while (1)
            {
              unsigned int v69 = *v68 - 48;
              if (v69 > 9) {
                goto LABEL_179;
              }
              unsigned int v60 = (10 * v60) + v69;
              if (((v60 >> 8) & 1) != 0) {
                goto LABEL_179;
              }
              char v63 = 0;
              ++v68;
              if (!--v67) {
                goto LABEL_180;
              }
            }
          }

          goto LABEL_163;
        }

        goto LABEL_179;
      }

      goto LABEL_198;
    }

    if (v58 != 45)
    {
      if (v56)
      {
        if (result)
        {
          LOBYTE(v60) = 0;
          while (1)
          {
            unsigned int v70 = *(unsigned __int8 *)result - 48;
            if (v70 > 9) {
              goto LABEL_179;
            }
            unsigned int v60 = (10 * v60) + v70;
            if (((v60 >> 8) & 1) != 0) {
              goto LABEL_179;
            }
            char v63 = 0;
            ++result;
            if (!--v56) {
              goto LABEL_180;
            }
          }
        }

        goto LABEL_163;
      }

LABEL_179:
      LOBYTE(v60) = 0;
      char v63 = 1;
LABEL_180:
      char v81 = v63;
      if ((v63 & 1) == 0) {
        goto LABEL_181;
      }
      goto LABEL_194;
    }

    if (v56 > 0)
    {
      uint64_t v59 = v56 - 1;
      if (v56 != 1)
      {
        if (result)
        {
          LOBYTE(v60) = 0;
          uint64_t v61 = (unsigned __int8 *)(result + 1);
          while (1)
          {
            unsigned int v62 = *v61 - 48;
            if (v62 > 9) {
              goto LABEL_179;
            }
            unsigned int v60 = (10 * v60) - v62;
            if ((v60 & 0xFFFFFF00) != 0) {
              goto LABEL_179;
            }
            char v63 = 0;
            ++v61;
            if (!--v59) {
              goto LABEL_180;
            }
          }
        }

LABEL_163:
        LOBYTE(v60) = 0;
        char v63 = 0;
        goto LABEL_180;
      }

      goto LABEL_179;
    }

    __break(1u);
LABEL_197:
    __break(1u);
LABEL_198:
    __break(1u);
    goto LABEL_199;
  }

  *(void *)&__int128 v82 = a3;
  *((void *)&v82 + 1) = a4 & 0xFFFFFFFFFFFFFFLL;
  if (a3 != 43)
  {
    if (a3 != 45)
    {
      if (v55)
      {
        LOBYTE(v60) = 0;
        unint64_t v74 = &v82;
        while (1)
        {
          unsigned int v75 = *(unsigned __int8 *)v74 - 48;
          if (v75 > 9) {
            break;
          }
          unsigned int v60 = (10 * v60) + v75;
          if (((v60 >> 8) & 1) != 0) {
            break;
          }
          char v63 = 0;
          unint64_t v74 = (__int128 *)((char *)v74 + 1);
          if (!--v55) {
            goto LABEL_180;
          }
        }
      }

      goto LABEL_179;
    }

    if (v55)
    {
      uint64_t v64 = v55 - 1;
      if (v64)
      {
        LOBYTE(v60) = 0;
        unint64_t v65 = (unsigned __int8 *)&v82 + 1;
        while (1)
        {
          unsigned int v66 = *v65 - 48;
          if (v66 > 9) {
            break;
          }
          unsigned int v60 = (10 * v60) - v66;
          if ((v60 & 0xFFFFFF00) != 0) {
            break;
          }
          char v63 = 0;
          ++v65;
          if (!--v64) {
            goto LABEL_180;
          }
        }
      }

      goto LABEL_179;
    }

    goto LABEL_197;
  }

  if (v55)
  {
    uint64_t v71 = v55 - 1;
    if (v71)
    {
      LOBYTE(v60) = 0;
      __int128 v72 = (unsigned __int8 *)&v82 + 1;
      while (1)
      {
        unsigned int v73 = *v72 - 48;
        if (v73 > 9) {
          break;
        }
        unsigned int v60 = (10 * v60) + v73;
        if (((v60 >> 8) & 1) != 0) {
          break;
        }
        char v63 = 0;
        ++v72;
        if (!--v71) {
          goto LABEL_180;
        }
      }
    }

    goto LABEL_179;
  }

LABEL_199:
  __break(1u);
  return result;
}

            BOOL v121 = 0LL;
            BOOL v122 = 0xE000000000000000LL;
            _StringGuts.grow(_:)(19LL);
            swift_bridgeObjectRelease();
            BOOL v121 = 0xD000000000000011LL;
            BOOL v122 = 0x8000000181009020LL;
            v110._uint64_t countAndFlagsBits = v5;
            v110._unint64_t object = (void *)v6;
            String.append(_:)(v110);
            BOOL v111 = v121;
            BOOL v112 = v122;
            BOOL v113 = *(void *)(v120 + 72);
            swift_bridgeObjectRetain();
            uint64_t result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v113 + 16) + 1LL,  1,  (char *)v113);
              BOOL v113 = result;
            }

            BOOL v115 = *(void *)(v113 + 16);
            BOOL v114 = *(void *)(v113 + 24);
            if (v115 >= v114 >> 1)
            {
              uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v114 > 1),  v115 + 1,  1,  (char *)v113);
              BOOL v113 = result;
            }

            LODWORD(v27) = 0;
            *(void *)(v113 + 16) = v115 + 1;
            BOOL v116 = v113 + 80 * v115;
            uint64_t v29 = 1;
            *(_BYTE *)(v116 + 32) = 1;
            *(void *)(v116 + 40) = v111;
            *(void *)(v116 + 48) = v112;
            uint64_t v30 = v119;
            *(void *)(v116 + 56) = v7;
            *(void *)(v116 + 64) = v119;
            *(void *)(v116 + 72) = v5;
            *(void *)(v116 + 80) = v6;
            *(void *)(v116 + 88) = 0LL;
            *(void *)(v116 + 96) = 0LL;
            *(_BYTE *)(v116 + 104) = 0;
            *(void *)(v120 + 72) = v113;
            goto LABEL_14;
          }

          goto LABEL_170;
        }

        __break(1u);
LABEL_206:
        __break(1u);
LABEL_207:
        __break(1u);
        goto LABEL_208;
      }

      BOOL v121 = v5;
      BOOL v122 = v6 & 0xFFFFFFFFFFFFFFLL;
      if (v5 == 43)
      {
        if (!v8)
        {
LABEL_208:
          __break(1u);
          return result;
        }

        char v43 = v8 - 1;
        if (v8 != 1)
        {
          char v47 = 0;
          BOOL v88 = v41 + 48;
          BOOL v89 = v41 + 55;
          BOOL v90 = v41 + 87;
          if (v40)
          {
            BOOL v88 = 58;
          }

          else
          {
            BOOL v90 = 97;
            BOOL v89 = 65;
          }

          BOOL v91 = (unsigned __int8 *)&v121 + 1;
          uint64_t v30 = v119;
          while (1)
          {
            BOOL v92 = *v91;
            if (v92 < 0x30 || v92 >= v88)
            {
              if (v92 < 0x41 || v92 >= v89)
              {
                if (v92 < 0x61 || v92 >= v90) {
                  goto LABEL_170;
                }
                BOOL v96 = -87;
              }

              else
              {
                BOOL v96 = -55;
              }
            }

            else
            {
              BOOL v96 = -48;
            }

            BOOL v97 = v47 * (unint64_t)v41;
            if ((v97 & 0xFFFFFFFF00000000LL) != 0) {
              goto LABEL_170;
            }
            BOOL v98 = v96 + v92;
            BOOL v50 = __CFADD__((_DWORD)v97, v98);
            char v47 = v97 + v98;
            if (v50) {
              goto LABEL_170;
            }
            ++v91;
            if (!--v43) {
              goto LABEL_197;
            }
          }
        }
      }

      else if (v5 == 45)
      {
        if (!v8) {
          goto LABEL_206;
        }
        char v43 = v8 - 1;
        if (v8 != 1)
        {
          char v47 = 0;
          uint64_t v56 = v41 + 48;
          uint64_t v57 = v41 + 55;
          int v58 = v41 + 87;
          if (v40)
          {
            uint64_t v56 = 58;
          }

          else
          {
            int v58 = 97;
            uint64_t v57 = 65;
          }

          uint64_t v59 = (unsigned __int8 *)&v121 + 1;
          uint64_t v30 = v119;
          while (1)
          {
            unsigned int v60 = *v59;
            if (v60 < 0x30 || v60 >= v56)
            {
              if (v60 < 0x41 || v60 >= v57)
              {
                if (v60 < 0x61 || v60 >= v58) {
                  goto LABEL_170;
                }
                uint64_t v64 = -87;
              }

              else
              {
                uint64_t v64 = -55;
              }
            }

            else
            {
              uint64_t v64 = -48;
            }

            unint64_t v65 = v47 * (unint64_t)v41;
            if ((v65 & 0xFFFFFFFF00000000LL) != 0) {
              goto LABEL_170;
            }
            unsigned int v66 = v64 + v60;
            BOOL v50 = v65 >= v66;
            char v47 = v65 - v66;
            if (!v50) {
              goto LABEL_170;
            }
            ++v59;
            if (!--v43) {
              goto LABEL_197;
            }
          }
        }
      }

      else if (v8)
      {
        char v47 = 0;
        BOOL v99 = v41 + 48;
        BOOL v100 = v41 + 55;
        BOOL v101 = v41 + 87;
        if (v40)
        {
          BOOL v99 = 58;
        }

        else
        {
          BOOL v101 = 97;
          BOOL v100 = 65;
        }

        BOOL v102 = &v121;
        do
        {
          BOOL v103 = *(unsigned __int8 *)v102;
          if (v103 < 0x30 || v103 >= v99)
          {
            if (v103 < 0x41 || v103 >= v100)
            {
              if (v103 < 0x61 || v103 >= v101) {
                goto LABEL_195;
              }
              BOOL v107 = -87;
            }

            else
            {
              BOOL v107 = -55;
            }
          }

          else
          {
            BOOL v107 = -48;
          }

          BOOL v108 = v47 * (unint64_t)v41;
          if ((v108 & 0xFFFFFFFF00000000LL) != 0) {
            goto LABEL_195;
          }
          BOOL v109 = v107 + v103;
          BOOL v50 = __CFADD__((_DWORD)v108, v109);
          char v47 = v108 + v109;
          if (v50) {
            goto LABEL_195;
          }
          BOOL v102 = (unint64_t *)((char *)v102 + 1);
          --v8;
        }

        while (v8);
        LOBYTE(v43) = 0;
        goto LABEL_196;
      }

            if (v169 < v245)
            {
LABEL_223:
              __break(1u);
              goto LABEL_224;
            }
          }
        }

        BOOL v219 = Substring.subscript.getter();
        BOOL v221 = v220;
        BOOL v223 = v222;
        BOOL v225 = v224;
        swift_bridgeObjectRelease();
        if (!((v219 ^ v221) >> 14))
        {
          swift_bridgeObjectRelease();
LABEL_212:
          uint64_t result = Parser.lexCustomCCStart()(v251);
          if (LOBYTE(v251[0]) != 2LL)
          {
            BOOL v234 = v239;
            v235 = v237;
            *v239 = v236;
            v234[1] = v235;
            *((_BYTE *)v234 + 16) = 0;
            return result;
          }

uint64_t currentRegexLiteralFormatVersion.getter()
{
  return 1LL;
}

uint64_t CompilerLexError.message.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CompilerLexError.message.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 8) = a1;
  *(void *)(v2 + 16) = a2;
  return result;
}

uint64_t (*CompilerLexError.message.modify())()
{
  return AST.root.modify;
}

uint64_t CompilerLexError.location.getter()
{
  return *(void *)v0;
}

uint64_t CompilerLexError.completelyErroneous.getter()
{
  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t CompilerLexError.completelyErroneous.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 24) = result;
  return result;
}

uint64_t (*CompilerLexError.completelyErroneous.modify())()
{
  return AST.root.modify;
}

uint64_t swiftCompilerLexRegexLiteral(start:bufferEnd:mustBeRegex:)@<X0>( unsigned __int8 *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = v4;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a3 = v5;
  *(void *)(a3 + 8) = 0LL;
  *(void *)(a3 + 16) = 0LL;
  *(void *)(a3 + 24) = 0LL;
  *(_BYTE *)(a3 + 32) = 0;
  return result;
}

int64_t lexRegex(start:end:)(uint64_t a1, unsigned __int8 *a2, unint64_t a3)
{
  int64_t result = lexRegex(start:end:delimiters:)(a1, a2, a3, (uint64_t)&outlined read-only object #0 of lexRegex(start:end:));
  if (v3) {
    return v5;
  }
  return result;
}

uint64_t DelimiterLexError.resumePtr.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t CompilerParseError.message.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CompilerParseError.message.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*CompilerParseError.message.modify())()
{
  return AST.root.modify;
}

uint64_t CompilerParseError.location.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t CompilerParseError.location.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 16) = result;
  *(_BYTE *)(v2 + 24) = a2 & 1;
  return result;
}

uint64_t (*CompilerParseError.location.modify())()
{
  return AST.root.modify;
}

void (**swiftCompilerParseRegexLiteral(_:captureBufferOut:)( uint64_t a1, uint64_t a2, _WORD *a3))(__int128 *__return_ptr, uint64_t, void *)
{
  void (**object)(__int128 *__return_ptr, uint64_t, void *);
  Swift::String v6;
  __int128 v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  __int128 v16;
  uint64_t v17;
  char v18;
  __int128 v19;
  __int128 v20;
  void (**v21)(__int128 *__return_ptr, uint64_t, void *);
  uint64_t v22;
  unint64_t object = (void (**)(__int128 *__return_ptr, uint64_t, void *))a1;
  specialized parseWithDelimiters<A>(_:)(a1, a2, (uint64_t)&v19);
  if (v3)
  {
    *(void *)&uint64_t v19 = 0LL;
    *((void *)&v19 + 1) = 0xE000000000000000LL;
    _StringGuts.grow(_:)(35LL);
    swift_bridgeObjectRelease();
    *(void *)&uint64_t v19 = 0xD000000000000021LL;
    *((void *)&v19 + 1) = 0x8000000181007040LL;
    *(void *)&uint64_t v16 = v3;
    MEMORY[0x186E05938](v3);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v6._uint64_t countAndFlagsBits = String.init<A>(describing:)();
    unint64_t object = (void (**)(__int128 *__return_ptr, uint64_t, void *))v6._object;
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    uint64_t v7 = v19;
    uint64_t v22 = v3;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocatedErrorProtocol);
    uint64_t v8 = swift_dynamicCast();
    if (v8)
    {
      uint64_t v9 = *((void *)&v20 + 1);
      unint64_t object = v21;
      __swift_project_boxed_opaque_existential_1Tm(&v19, *((uint64_t *)&v20 + 1));
      object[2](&v16, v9, object);
      uint64_t v10 = v16;
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v19);
    }

    else
    {
      uint64_t v21 = 0LL;
      uint64_t v19 = 0u;
      uint64_t v20 = 0u;
      outlined destroy of _ASTParent?( (uint64_t)&v19,  &demangling cache variable for type metadata for LocatedErrorProtocol?);
      uint64_t v10 = 0LL;
    }

    lazy protocol witness table accessor for type CompilerParseError and conformance CompilerParseError();
    swift_allocError();
    *(_OWORD *)uint64_t v14 = v7;
    *(void *)(v14 + 16) = v10;
    *(_BYTE *)(v14 + 24) = v8 ^ 1;
    swift_willThrow();
  }

  else
  {
    static CaptureList.Builder.build(_:)((uint64_t *)&v19, (char **)&v16);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v22 = v16;
    CaptureList._captureStructure.getter((uint64_t)&v19);
    swift_bridgeObjectRelease();
    uint64_t v11 = v19;
    uint64_t v12 = v20;
    uint64_t v13 = BYTE8(v20);
    uint64_t v16 = v19;
    uint64_t v17 = v20;
    uint64_t v18 = BYTE8(v20);
    CaptureStructure.encode(to:)(a3);
    outlined consume of CaptureStructure(v11, *((uint64_t *)&v11 + 1), v12, v13);
    swift_bridgeObjectRetain();
  }

  return object;
}

uint64_t specialized parseWithDelimiters<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)&__int128 v52 = a1;
  *((void *)&v52 + 1) = a2;
  swift_bridgeObjectRetain();
  uint64_t v4 = (void *)String.init<A>(_:)();
  v5._uint64_t countAndFlagsBits = (uint64_t)&v52;
  v5._unint64_t object = v4;
  unsigned __int128 v6 = (unsigned __int128)droppingRegexDelimiters(_:)(v5);
  uint64_t v7 = v6;
  unint64_t v8 = *((void *)&v6 + 1);
  swift_bridgeObjectRelease();
  int v9 = v52;
  uint64_t v44 = *((void *)&v52 + 1);
  if ((v52 & 1) != 0)
  {
    uint64_t v10 = 61LL;
  }

  else if (*((uint64_t *)&v52 + 1) >= 1 {
         && (specialized StringProtocol.spansMultipleLinesInRegexLiteral.getter(v7, v8) & 1) != 0)
  }
  {
    uint64_t v10 = 67LL;
  }

  else
  {
    uint64_t v10 = 0LL;
  }

  specialized parseWithRecovery<A>(_:_:)(v7, v8, v10, (uint64_t)&v52);
  uint64_t v11 = v53;
  __int128 v45 = v52;
  uint64_t v12 = *(void *)(v53 + 16) + 1LL;
  uint64_t v13 = v53;
  do
  {
    if (!--v12)
    {
      uint64_t result = swift_bridgeObjectRelease();
      *(_OWORD *)a3 = v45;
      *(void *)(a3 + 16) = v11;
      return result;
    }

    uint64_t v14 = v13 + 80;
    unsigned int v15 = *(unsigned __int8 *)(v13 + 32);
    v13 += 80LL;
  }

  while (v15 > 1);
  int v39 = v9;
  uint64_t v16 = *(void *)(v14 - 32);
  uint64_t v43 = *(void *)(v14 - 40);
  uint64_t v17 = *(void *)(v14 - 24);
  uint64_t v18 = *(void *)(v14 - 16);
  uint64_t v19 = *(void *)v14;
  uint64_t v20 = *(void *)(v14 + 8);
  uint64_t v41 = *(void *)(v14 + 16);
  uint64_t v42 = *(void *)(v14 - 8);
  unsigned __int8 v40 = *(_BYTE *)(v14 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.LocatedError<ErrorDiagnostic #1 in Diagnostics.throwAnyError()>);
  lazy protocol witness table accessor for type Source.LocatedError<ErrorDiagnostic #1 in Diagnostics.throwAnyError()> and conformance Source.LocatedError<A>( &lazy protocol witness table cache variable for type Source.LocatedError<ErrorDiagnostic #1 in Diagnostics.throwAnyError()> and conformance Source.LocatedError<A>,  &demangling cache variable for type metadata for Source.LocatedError<ErrorDiagnostic #1 in Diagnostics.throwAnyError()>,  (uint64_t)&protocol conformance descriptor for Source.LocatedError<A>);
  uint64_t v21 = swift_allocError();
  *(_BYTE *)uint64_t v22 = v15;
  *(void *)(v22 + 8) = v43;
  *(void *)(v22 + 16) = v16;
  *(void *)(v22 + 24) = v17;
  *(void *)(v22 + 32) = v18;
  *(void *)(v22 + 40) = v42;
  *(void *)(v22 + 48) = v19;
  *(void *)(v22 + 56) = v20;
  *(void *)(v22 + 64) = v41;
  *(_BYTE *)(v22 + 72) = v40;
  *(void *)(v22 + 80) = v17;
  *(void *)(v22 + 88) = v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of ParseError?(v42, v19, v20, v41, v40);
  swift_willThrow();
  swift_bridgeObjectRelease_n();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v54 = v21;
  MEMORY[0x186E05938](v21);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocatedErrorProtocol);
  if (!swift_dynamicCast())
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x186E0592C](v54);
  }

  MEMORY[0x186E0592C](v21);
  outlined init with take of LocatedErrorProtocol(&v52, (uint64_t)v49);
  uint64_t v23 = MEMORY[0x186E053EC](35LL, 0xE100000000000000LL, v44);
  if (v39) {
    uint64_t v25 = 31779LL;
  }
  else {
    uint64_t v25 = 47LL;
  }
  if (v39) {
    uint64_t v26 = (void *)0xE200000000000000LL;
  }
  else {
    uint64_t v26 = (void *)0xE100000000000000LL;
  }
  v48[0] = v23;
  v48[1] = v24;
  swift_bridgeObjectRetain();
  v27._uint64_t countAndFlagsBits = v25;
  v27._unint64_t object = v26;
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v28 = String.count.getter();
  swift_bridgeObjectRelease();
  uint64_t v29 = v50;
  uint64_t v30 = v51;
  __swift_project_boxed_opaque_existential_1Tm(v49, v50);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v30 + 16))(v48, v29, v30);
  uint64_t v31 = String.distance(from:to:)();
  uint64_t v32 = String.distance(from:to:)();
  uint64_t result = swift_bridgeObjectRelease();
  if (v32 < v31)
  {
    __break(1u);
    goto LABEL_26;
  }

  if (__OFADD__(v28, v31))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }

  uint64_t result = String.index(_:offsetBy:)();
  if (__OFADD__(v28, v32))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }

  unint64_t v34 = result;
  unint64_t v35 = String.index(_:offsetBy:)();
  uint64_t v36 = v50;
  uint64_t v37 = v51;
  __swift_project_boxed_opaque_existential_1Tm(v49, v50);
  uint64_t v38 = (*(uint64_t (**)(uint64_t, uint64_t))(v37 + 24))(v36, v37);
  uint64_t result = swift_getErrorValue();
  if (v35 >> 14 >= v34 >> 14)
  {
    Error.addingLocation(_:)(v34, v35, v46, v47);
    MEMORY[0x186E0592C](v38);
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v49);
    return MEMORY[0x186E0592C](v54);
  }

uint64_t parseWithDelimiters<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v10 = *(void *)(*(void *)(a3 + 8) + 8LL);
  uint64_t v11 = (void *)String.init<A>(_:)();
  v12._uint64_t countAndFlagsBits = (uint64_t)&v64;
  v12._unint64_t object = v11;
  unsigned __int128 v13 = (unsigned __int128)droppingRegexDelimiters(_:)(v12);
  uint64_t v14 = v13;
  unint64_t v15 = *((void *)&v13 + 1);
  swift_bridgeObjectRelease();
  int v56 = v64;
  uint64_t v55 = *((void *)&v64 + 1);
  if ((v64 & 1) != 0)
  {
    uint64_t v16 = 61LL;
  }

  else if (*((uint64_t *)&v64 + 1) >= 1 {
         && (specialized StringProtocol.spansMultipleLinesInRegexLiteral.getter(v14, v15) & 1) != 0)
  }
  {
    uint64_t v16 = 67LL;
  }

  else
  {
    uint64_t v16 = 0LL;
  }

  specialized parseWithRecovery<A>(_:_:)(v14, v15, v16, (uint64_t)&v64);
  uint64_t v17 = v65;
  __int128 v57 = v64;
  uint64_t v18 = *(void *)(v65 + 16) + 1LL;
  uint64_t v19 = v65;
  do
  {
    if (!--v18)
    {
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v48 = *((void *)&v57 + 1);
      *a4 = v57;
      a4[1] = v48;
      a4[2] = v17;
      return result;
    }

    uint64_t v20 = v19 + 80;
    unsigned int v21 = *(unsigned __int8 *)(v19 + 32);
    v19 += 80LL;
  }

  while (v21 > 1);
  void v49[3] = v14;
  unint64_t v54 = v15;
  v49[0] = v10;
  v49[1] = a2;
  v49[2] = a1;
  uint64_t v22 = *(void *)(v20 - 32);
  uint64_t v53 = *(void *)(v20 - 40);
  uint64_t v23 = *(void *)(v20 - 24);
  uint64_t v24 = *(void *)(v20 - 16);
  uint64_t v25 = *(void *)v20;
  uint64_t v52 = *(void *)(v20 - 8);
  uint64_t v26 = *(void *)(v20 + 8);
  uint64_t v51 = *(void *)(v20 + 16);
  int v50 = *(unsigned __int8 *)(v20 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.LocatedError<ErrorDiagnostic #1 in Diagnostics.throwAnyError()>);
  lazy protocol witness table accessor for type Source.LocatedError<ErrorDiagnostic #1 in Diagnostics.throwAnyError()> and conformance Source.LocatedError<A>( &lazy protocol witness table cache variable for type Source.LocatedError<ErrorDiagnostic #1 in Diagnostics.throwAnyError()> and conformance Source.LocatedError<A>,  &demangling cache variable for type metadata for Source.LocatedError<ErrorDiagnostic #1 in Diagnostics.throwAnyError()>,  (uint64_t)&protocol conformance descriptor for Source.LocatedError<A>);
  uint64_t v27 = swift_allocError();
  *(_BYTE *)uint64_t v28 = v21;
  *(void *)(v28 + 8) = v53;
  *(void *)(v28 + 16) = v22;
  *(void *)(v28 + 24) = v23;
  *(void *)(v28 + 32) = v24;
  uint64_t v29 = v52;
  *(void *)(v28 + 40) = v52;
  *(void *)(v28 + 48) = v25;
  uint64_t v30 = v51;
  *(void *)(v28 + 56) = v26;
  *(void *)(v28 + 64) = v30;
  unsigned __int8 v31 = v50;
  *(_BYTE *)(v28 + 72) = v50;
  *(void *)(v28 + 80) = v23;
  *(void *)(v28 + 88) = v24;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of ParseError?(v29, v25, v26, v30, v31);
  swift_willThrow();
  swift_bridgeObjectRelease_n();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v66 = v27;
  MEMORY[0x186E05938](v27);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocatedErrorProtocol);
  if (!swift_dynamicCast())
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x186E0592C](v66);
  }

  MEMORY[0x186E0592C](v27);
  outlined init with take of LocatedErrorProtocol(&v64, (uint64_t)v61);
  uint64_t v32 = MEMORY[0x186E053EC](35LL, 0xE100000000000000LL, v55);
  if (v56) {
    uint64_t v34 = 31779LL;
  }
  else {
    uint64_t v34 = 47LL;
  }
  if (v56) {
    unint64_t v35 = (void *)0xE200000000000000LL;
  }
  else {
    unint64_t v35 = (void *)0xE100000000000000LL;
  }
  v60[0] = v32;
  v60[1] = v33;
  swift_bridgeObjectRetain();
  v36._uint64_t countAndFlagsBits = v34;
  v36._unint64_t object = v35;
  String.append(_:)(v36);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v37 = String.count.getter();
  swift_bridgeObjectRelease();
  uint64_t v38 = v62;
  uint64_t v39 = v63;
  __swift_project_boxed_opaque_existential_1Tm(v61, v62);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v39 + 16))(v60, v38, v39);
  uint64_t v40 = String.distance(from:to:)();
  uint64_t v41 = String.distance(from:to:)();
  uint64_t result = swift_bridgeObjectRelease();
  if (v41 < v40)
  {
    __break(1u);
    goto LABEL_26;
  }

  uint64_t result = v37 + v40;
  if (__OFADD__(v37, v40))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }

  Collection.index(atOffset:)();
  uint64_t result = v37 + v41;
  if (__OFADD__(v37, v41))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }

  unint64_t v43 = v60[0];
  Collection.index(atOffset:)();
  unint64_t v44 = v60[0];
  uint64_t v45 = v62;
  uint64_t v46 = v63;
  __swift_project_boxed_opaque_existential_1Tm(v61, v62);
  uint64_t v47 = (*(uint64_t (**)(uint64_t, uint64_t))(v46 + 24))(v45, v46);
  uint64_t result = swift_getErrorValue();
  if (v44 >> 14 >= v43 >> 14)
  {
    Error.addingLocation(_:)(v43, v44, v58, v59);
    MEMORY[0x186E0592C](v47);
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v61);
    return MEMORY[0x186E0592C](v66);
  }

void Delimiter.hash(into:)()
{
  Swift::UInt v1 = *((void *)v0 + 1);
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
}

BOOL static Delimiter.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2 && *((void *)a1 + 1) == *((void *)a2 + 1);
}

Swift::Int Delimiter.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = *((void *)v0 + 1);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Delimiter()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = *((void *)v0 + 1);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Delimiter()
{
  Swift::UInt v1 = *((void *)v0 + 1);
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Delimiter()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = *((void *)v0 + 1);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Delimiter( unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2 && *((void *)a1 + 1) == *((void *)a2 + 1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.AbsentFunction.Start()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for static CaseIterable.allCases.getter in conformance Delimiter.Kind(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of droppingRegexDelimiters(_:);
}

void DelimiterLexError.kind.getter(_BYTE *a1@<X8>)
{
  *a1 = *v1;
}

_BYTE *DelimiterLexError.kind.setter(_BYTE *result)
{
  _BYTE *v1 = *result;
  return result;
}

uint64_t (*DelimiterLexError.kind.modify())()
{
  return AST.root.modify;
}

uint64_t DelimiterLexError.description.getter()
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_180FA7F78 + 4 * byte_180FFFAAC[*v0]))( 0xD00000000000001ALL,  0x8000000181007020LL);
}

uint64_t sub_180FA7F78(uint64_t a1)
{
  return a1 + 8;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance DelimiterLexError()
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_180FA7FF4 + 4 * byte_180FFFAB1[*v0]))( 0xD00000000000001ALL,  0x8000000181007020LL);
}

uint64_t sub_180FA7FF4(uint64_t a1)
{
  return a1 + 8;
}

unint64_t specialized Sequence<>.elementsEqual<A>(_:)( unint64_t result, unint64_t a2, uint64_t a3)
{
  unint64_t v4 = result;
  unint64_t v5 = 0LL;
  unint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v7 = result & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v23 = a3 + 32;
  uint64_t v24 = result;
  unint64_t v25 = v7;
  uint64_t v8 = 4 * v7;
  uint64_t v9 = (result >> 59) & 1;
  if ((a2 & 0x1000000000000000LL) == 0) {
    LOBYTE(v9) = 1;
  }
  uint64_t v10 = 4LL << v9;
  uint64_t v19 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v20 = a2 & 0xFFFFFFFFFFFFFFLL;
  unint64_t v11 = 15LL;
  uint64_t v21 = 4LL << v9;
  uint64_t v22 = v8;
  while (1)
  {
    if (v5 == v6)
    {
      int v12 = 0;
      unint64_t v13 = v6;
      goto LABEL_10;
    }

    if (v5 >= v6) {
      break;
    }
    int v12 = *(unsigned __int8 *)(v23 + v5);
    unint64_t v13 = v5 + 1;
LABEL_10:
    unint64_t v14 = v11 >> 14;
    BOOL v15 = v11 >> 14 == v8;
    if (v11 >> 14 == v8)
    {
      unsigned __int8 v16 = 0;
      if (v5 == v6) {
        return v15;
      }
      goto LABEL_30;
    }

    unint64_t v17 = v11 & 0xC;
    uint64_t result = v11;
    if (v17 == v10)
    {
      uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v11, v24, a2);
      uint64_t v10 = v21;
      unint64_t v4 = v24;
    }

    unint64_t v18 = result >> 16;
    if (result >> 16 >= v25) {
      goto LABEL_34;
    }
    if ((a2 & 0x1000000000000000LL) != 0)
    {
      uint64_t result = String.UTF8View._foreignSubscript(position:)();
      uint64_t v10 = v21;
      unint64_t v4 = v24;
      unsigned __int8 v16 = result;
      if (v17 == v21) {
        goto LABEL_27;
      }
    }

    else if ((a2 & 0x2000000000000000LL) != 0)
    {
      v26[0] = v4;
      v26[1] = v20;
      unsigned __int8 v16 = *((_BYTE *)v26 + v18);
      if (v17 == v10) {
        goto LABEL_27;
      }
    }

    else
    {
      uint64_t result = v19;
      if ((v4 & 0x1000000000000000LL) == 0)
      {
        uint64_t result = _StringObject.sharedUTF8.getter();
        uint64_t v10 = v21;
        unint64_t v4 = v24;
      }

      unsigned __int8 v16 = *(_BYTE *)(result + v18);
      if (v17 == v10)
      {
LABEL_27:
        uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v11, v24, a2);
        uint64_t v10 = v21;
        unint64_t v4 = v24;
        unint64_t v11 = result;
        uint64_t v8 = v22;
        if ((a2 & 0x1000000000000000LL) == 0)
        {
LABEL_24:
          unint64_t v11 = (v11 & 0xFFFFFFFFFFFF0000LL) + 65540;
          if (v5 == v6) {
            return v15;
          }
          goto LABEL_30;
        }

        goto LABEL_28;
      }
    }

    uint64_t v8 = v22;
    if ((a2 & 0x1000000000000000LL) == 0) {
      goto LABEL_24;
    }
LABEL_28:
    if (v25 <= v11 >> 16) {
      goto LABEL_35;
    }
    uint64_t result = String.UTF8View._foreignIndex(after:)();
    uint64_t v10 = v21;
    unint64_t v4 = v24;
    unint64_t v11 = result;
    if (v5 == v6) {
      return v15;
    }
LABEL_30:
    BOOL v15 = 0LL;
    if (v14 != v8)
    {
      unint64_t v5 = v13;
      if (v12 == v16) {
        continue;
      }
    }

    return v15;
  }

  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
  return result;
}

uint64_t specialized Sequence<>.elementsEqual<A>(_:)( uint64_t a1, char a2, unint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6)
{
  uint64_t v10 = 0LL;
  uint64_t v11 = (a5 >> 59) & 1;
  if ((a6 & 0x1000000000000000LL) == 0) {
    LOBYTE(v11) = 1;
  }
  uint64_t v12 = 4LL << v11;
  uint64_t v13 = HIBYTE(a6) & 0xF;
  if ((a6 & 0x2000000000000000LL) == 0) {
    uint64_t v13 = a5 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v20 = v13;
  while (1)
  {
    unint64_t v15 = a3 ^ a4;
    if ((a3 ^ a4) < 0x4000)
    {
      char v16 = 0;
      goto LABEL_11;
    }

    uint64_t result = Substring.UTF8View.subscript.getter();
    char v16 = result;
    if ((a3 & 0xC) == v12)
    {
      uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(a3, a5, a6);
      a3 = result;
      if ((a6 & 0x1000000000000000LL) == 0)
      {
LABEL_10:
        a3 = (a3 & 0xFFFFFFFFFFFF0000LL) + 65540;
        goto LABEL_11;
      }
    }

    else if ((a6 & 0x1000000000000000LL) == 0)
    {
      goto LABEL_10;
    }

    if (v20 <= a3 >> 16) {
      goto LABEL_25;
    }
    a3 = String.UTF8View._foreignIndex(after:)();
LABEL_11:
    uint64_t result = v10 == a1;
    if (v10 != a1) {
      break;
    }
    char v18 = 0;
    uint64_t v19 = a1;
    if (v15 < 0x4000) {
      return result;
    }
LABEL_17:
    uint64_t result = 0LL;
    if (v10 != a1)
    {
      uint64_t v10 = v19;
      if (v16 == v18) {
        continue;
      }
    }

    return result;
  }

  if ((v10 & 0x8000000000000000LL) == 0 && v10 < a1)
  {
    uint64_t v19 = v10 + 1;
    char v18 = a2;
    if (v15 < 0x4000) {
      return result;
    }
    goto LABEL_17;
  }

  __break(1u);
LABEL_25:
  __break(1u);
  return result;
}

unint64_t specialized Sequence<>.elementsEqual<A>(_:)( unint64_t a1, unint64_t a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  unint64_t v6 = a1;
  uint64_t v7 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v7 = a1 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v28 = v7;
  uint64_t v8 = 4 * v7;
  uint64_t v9 = (a1 >> 59) & 1;
  if ((a2 & 0x1000000000000000LL) == 0) {
    LOBYTE(v9) = 1;
  }
  uint64_t v10 = 4LL << v9;
  uint64_t v23 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v24 = a2 & 0xFFFFFFFFFFFFFFLL;
  unint64_t v11 = 15LL;
  uint64_t v25 = 4LL << v9;
  uint64_t v26 = a2;
  while (1)
  {
    if (a3)
    {
      if (!a4 || a3 != a4)
      {
LABEL_11:
        char v13 = 0;
        int v14 = *a3++;
        int v12 = v14;
        goto LABEL_14;
      }

      int v12 = 0;
    }

    else
    {
      if (a4) {
        goto LABEL_11;
      }
      int v12 = 0;
      a3 = 0LL;
    }

    char v13 = 1;
LABEL_14:
    unint64_t v15 = v11 >> 14;
    BOOL v16 = v11 >> 14 == v8;
    if (v11 >> 14 == v8)
    {
      unsigned __int8 v17 = 0;
      if ((v13 & 1) != 0) {
        return v16;
      }
      goto LABEL_34;
    }

    char v18 = a4;
    unint64_t v19 = v11 & 0xC;
    unint64_t result = v11;
    if (v19 == v10)
    {
      unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v11, a1, v26);
      uint64_t v10 = v25;
      a2 = v26;
      unint64_t v6 = a1;
    }

    unint64_t v21 = result >> 16;
    if (result >> 16 >= v28) {
      break;
    }
    if ((a2 & 0x1000000000000000LL) != 0)
    {
      unint64_t result = String.UTF8View._foreignSubscript(position:)();
      uint64_t v10 = v25;
      a2 = v26;
      unint64_t v6 = a1;
      unsigned __int8 v17 = result;
      if (v19 == v25) {
        goto LABEL_31;
      }
    }

    else if ((a2 & 0x2000000000000000LL) != 0)
    {
      v29[0] = v6;
      v29[1] = v24;
      unsigned __int8 v17 = *((_BYTE *)v29 + v21);
      if (v19 == v10) {
        goto LABEL_31;
      }
    }

    else
    {
      unint64_t result = v23;
      if ((v6 & 0x1000000000000000LL) == 0)
      {
        unint64_t result = _StringObject.sharedUTF8.getter();
        uint64_t v10 = v25;
        a2 = v26;
        unint64_t v6 = a1;
      }

      unsigned __int8 v17 = *(_BYTE *)(result + v21);
      if (v19 == v10)
      {
LABEL_31:
        unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v11, a1, v26);
        uint64_t v10 = v25;
        a2 = v26;
        unint64_t v6 = a1;
        unint64_t v11 = result;
        a4 = v18;
        if ((v26 & 0x1000000000000000LL) == 0)
        {
LABEL_28:
          unint64_t v11 = (v11 & 0xFFFFFFFFFFFF0000LL) + 65540;
          if ((v13 & 1) != 0) {
            return v16;
          }
          goto LABEL_34;
        }

        goto LABEL_32;
      }
    }

    a4 = v18;
    if ((a2 & 0x1000000000000000LL) == 0) {
      goto LABEL_28;
    }
LABEL_32:
    if (v28 <= v11 >> 16) {
      goto LABEL_38;
    }
    uint64_t v22 = String.UTF8View._foreignIndex(after:)();
    uint64_t v10 = v25;
    a2 = v26;
    unint64_t v6 = a1;
    unint64_t v11 = v22;
    if ((v13 & 1) != 0) {
      return v16;
    }
LABEL_34:
    BOOL v16 = 0LL;
    if (v15 == v8 || v12 != v17) {
      return v16;
    }
  }

  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

unint64_t specialized Sequence<>.elementsEqual<A>(_:)( unsigned __int8 *a1, unsigned __int8 *a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000LL) == 0) {
    uint64_t v8 = a3 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v8;
  uint64_t v9 = 4 * v8;
  uint64_t v10 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000LL) == 0) {
    LOBYTE(v10) = 1;
  }
  uint64_t v11 = 4LL << v10;
  uint64_t v21 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a4 & 0xFFFFFFFFFFFFFFLL;
  unint64_t v12 = 15LL;
  while (1)
  {
    unint64_t v13 = v12 >> 14;
    if (v12 >> 14 == v9)
    {
      unsigned __int8 v14 = 0;
      if (!a1) {
        goto LABEL_28;
      }
      goto LABEL_21;
    }

    unint64_t v15 = v12 & 0xC;
    unint64_t result = v12;
    if (v15 == v11) {
      unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a3, a4);
    }
    unint64_t v17 = result >> 16;
    if (result >> 16 >= v23) {
      break;
    }
    if ((a4 & 0x1000000000000000LL) != 0)
    {
      unint64_t result = String.UTF8View._foreignSubscript(position:)();
      unsigned __int8 v14 = result;
      if (v15 != v11) {
        goto LABEL_19;
      }
    }

    else if ((a4 & 0x2000000000000000LL) != 0)
    {
      v24[0] = a3;
      v24[1] = v22;
      unsigned __int8 v14 = *((_BYTE *)v24 + v17);
      if (v15 != v11) {
        goto LABEL_19;
      }
    }

    else
    {
      unint64_t result = v21;
      if ((a3 & 0x1000000000000000LL) == 0) {
        unint64_t result = _StringObject.sharedUTF8.getter();
      }
      unsigned __int8 v14 = *(_BYTE *)(result + v17);
      if (v15 != v11)
      {
LABEL_19:
        if ((a4 & 0x1000000000000000LL) == 0) {
          goto LABEL_20;
        }
        goto LABEL_26;
      }
    }

    unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a3, a4);
    unint64_t v12 = result;
    if ((a4 & 0x1000000000000000LL) == 0)
    {
LABEL_20:
      unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000LL) + 65540;
      if (!a1) {
        goto LABEL_28;
      }
      goto LABEL_21;
    }

LABEL_26:
    if (v23 <= v12 >> 16) {
      goto LABEL_40;
    }
    unint64_t v12 = String.UTF8View._foreignIndex(after:)();
    if (!a1)
    {
LABEL_28:
      if (a2) {
        goto LABEL_29;
      }
      int v18 = 0;
      a1 = 0LL;
LABEL_32:
      unint64_t result = 1LL;
      if (v13 == v9) {
        return result;
      }
      goto LABEL_33;
    }

  __break(1u);
  return result;
}

            swift_bridgeObjectRelease();
            v2[9] = v27;
            type metadata accessor for AST.Atom.Kind(0LL);
            return swift_storeEnumTagMultiPayload();
          }

          uint64_t v58 = v74;
        }

        else
        {
          uint64_t v58 = v77;
        }
      }

      else
      {
        uint64_t v58 = v80;
      }

      outlined init with take of AST.Atom.Callout(v58, (_OWORD *)a1);
      type metadata accessor for AST.Atom.Kind(0LL);
      return swift_storeEnumTagMultiPayload();
    }

    uint64_t v37 = v86;
    uint64_t v38 = v87;
    swift_bridgeObjectRetain();
    *(void *)&uint64_t v68 = v37;
    uint64_t v39 = String.subscript.getter();
    uint64_t v41 = v40;
    unint64_t v43 = v42;
    uint64_t v45 = v44;
    swift_bridgeObjectRelease();
    uint64_t v46 = MEMORY[0x186E052CC](v39, v41, v43, v45);
    uint64_t v48 = v47;
    swift_bridgeObjectRelease();
    *(void *)uint64_t v80 = 0LL;
    *(void *)&v80[8] = 0xE000000000000000LL;
    _StringGuts.grow(_:)(62LL);
    v49._unint64_t object = (void *)0x8000000181008D20LL;
    v49._uint64_t countAndFlagsBits = 0xD000000000000011LL;
    String.append(_:)(v49);
    v50._uint64_t countAndFlagsBits = v46;
    v50._unint64_t object = v48;
    String.append(_:)(v50);
    v51._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
    v51._unint64_t object = (void *)0x8000000181008D40LL;
    String.append(_:)(v51);
    uint64_t v52 = *(void *)v80;
    uint64_t v53 = *(void *)&v80[8];
    uint64_t v27 = (char *)v2[9];
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v27 + 2) + 1LL,  1,  v27);
    }
    uint64_t v55 = *((void *)v27 + 2);
    unint64_t v54 = *((void *)v27 + 3);
    int v56 = v55 + 1;
    if (v55 >= v54 >> 1)
    {
      uint64_t v67 = v55 + 1;
      uint64_t v65 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v54 > 1),  v55 + 1,  1,  v27);
      int v56 = v67;
      uint64_t v27 = v65;
    }

    *((void *)v27 + 2) = v56;
    __int128 v57 = &v27[80 * v55];
    v57[32] = 1;
    *((void *)v57 + 5) = v52;
    *((void *)v57 + 6) = v53;
    *((void *)v57 + 7) = v68;
    *((void *)v57 + 8) = v38;
    *((void *)v57 + 9) = v46;
    *((void *)v57 + 10) = v48;
    *((void *)v57 + 11) = 0LL;
    *((void *)v57 + 12) = 0LL;
    v57[104] = 8;
    goto LABEL_26;
  }

  unsigned __int8 v14 = v83;
  unint64_t v15 = v82[16];
  BOOL v16 = v80[16];
  unint64_t v17 = *(_OWORD *)v82;
  *(_OWORD *)a1 = *(_OWORD *)v80;
  *(_BYTE *)(a1 + 16) = v16 & 1;
  *(void *)(a1 + 24) = v13;
  *(_OWORD *)(a1 + 32) = v17;
  *(_BYTE *)(a1 + 48) = v15 & 1;
  *(void *)(a1 + 56) = v14;
  type metadata accessor for AST.Atom.Kind(0LL);
  return swift_storeEnumTagMultiPayload();
}

      __break(1u);
      JUMPOUT(0x180FCEDE4LL);
    }
  }

  uint64_t v27 = v15;
  v20._uint64_t countAndFlagsBits = 40LL;
  v20._unint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v20);
  swift_getCanonicalSpecializedMetadata();
  lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type [String] and conformance [A],  (uint64_t)&unk_189B467A8,  (uint64_t)&cache variable for noncanonical specialized generic type metadata for [String],  MEMORY[0x189618458]);
  uint64_t v21 = BidirectionalCollection<>.joined(separator:)();
  unint64_t v23 = v22;
  swift_bridgeObjectRelease();
  v24._uint64_t countAndFlagsBits = v21;
  v24._unint64_t object = v23;
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  v25._uint64_t countAndFlagsBits = 41LL;
  v25._unint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v25);
  return v27;
}

LABEL_21:
    if (a2 && a1 == a2)
    {
      int v18 = 0;
      goto LABEL_32;
    }

    if (!v1[3])
    {
      lazy protocol witness table accessor for type DelimiterLexError and conformance DelimiterLexError();
      swift_allocError();
      *(_BYTE *)uint64_t v7 = 0;
      *(void *)(v7 + 8) = v2;
      return swift_willThrow();
    }

    goto LABEL_24;
  }

  if ((result & 1) != 0) {
    goto LABEL_24;
  }
  v1[1] = v2 + 1;
  return DelimiterLexer.advance(escaped:)(1LL);
}

  __break(1u);
  return result;
}

    __break(1u);
    JUMPOUT(0x180FC9234LL);
  }

LABEL_29:
    unint64_t result = 0LL;
    int v19 = *a1++;
    int v18 = v19;
    if (v13 == v9) {
      return result;
    }
LABEL_33:
    if (v18 == v14) {
      int v20 = result;
    }
    else {
      int v20 = 1;
    }
    if (v20 == 1) {
      return 0LL;
    }
  }

  __break(1u);
LABEL_40:
  __break(1u);
  return result;
}

  uint64_t v83 = Substring.subscript.getter();
  char v85 = v84;
  uint64_t v61 = v86;
  uint64_t v65 = v87;
  swift_bridgeObjectRelease();
  if ((v83 ^ v85) < 0x4000)
  {
    swift_bridgeObjectRelease();
    into = v206;
    uint64_t v26 = v208;
    uint64_t v61 = v205;
    uint64_t v62 = v207;
LABEL_42:
    Parser.lexCustomCharacterClassRangeOperator()((uint64_t)&v216);
    if ((v218 & 1) == 0)
    {
      BOOL v97 = (uint64_t *)v216;
      BOOL v98 = v217;
      BOOL v99 = v199;
      *BOOL v199 = 45LL;
      v99[1] = 0xE100000000000000LL;
      type metadata accessor for AST.Atom.Kind(0LL);
      swift_storeEnumTagMultiPayload();
      BOOL v100 = (uint64_t **)((char *)v99 + *(int *)(v196 + 20));
      *BOOL v100 = v97;
      v100[1] = (uint64_t *)v98;
      swift_storeEnumTagMultiPayload();
      uint64_t v65 = (unint64_t)into->_rawValue;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      BOOL v202 = v97;
      BOOL v185 = v98;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        goto LABEL_138;
      }
      goto LABEL_46;
    }

    __int128 v64 = (uint64_t)v187;
LABEL_44:
    outlined destroy of AST.Atom(v64, type metadata accessor for AST.CustomCharacterClass.Member);
    return;
  }

  if (Substring.distance(from:to:)() < 1) {
    goto LABEL_34;
  }
  uint64_t v26 = *(void *)(v211 + 24);
  swift_bridgeObjectRetain();
  String.subscript.getter();
  BOOL v204 = v88;
  BOOL v203 = v89;
  uint64_t v62 = (uint64_t)v90;
  swift_bridgeObjectRelease();
  Swift::UInt v2 = v211;
  BOOL v91 = Substring.index(_:offsetBy:limitedBy:)();
  into = v92;
  swift_bridgeObjectRelease();
  if ((into & 1) != 0)
  {
LABEL_34:
    uint64_t v68 = MEMORY[0x186E052CC](v83, v85, v61, v65);
    uint64_t v66 = v93;
    swift_bridgeObjectRelease();
    uint64_t v67 = *(void *)(v2 + 16);
    uint64_t v65 = v209;
    into = v206;
    uint64_t v62 = v207;
    if (v67 >> 14 < v209 >> 14)
    {
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
      goto LABEL_135;
    }

    uint64_t v26 = v208;
    uint64_t v61 = v205;
    uint64_t v45 = v202;
    if (!v66) {
      goto LABEL_42;
    }
    goto LABEL_36;
  }

  if (v26 >> 14 >= v91 >> 14)
  {
    *(void *)(v2 + 16) = v91;
    *(void *)(v2 + 24) = v26;
    goto LABEL_34;
  }

  uint64_t v25 = Substring.subscript.getter();
  uint64_t v27 = v26;
  swift_bridgeObjectRelease();
  if (!((v25 ^ v27) >> 14))
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  return v25;
}

unint64_t specialized Sequence<>.elementsEqual<A>(_:)( unint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  uint64_t v10 = HIBYTE(a6) & 0xF;
  if ((a6 & 0x2000000000000000LL) == 0) {
    uint64_t v10 = a5 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v25 = v10;
  uint64_t v11 = 4 * v10;
  uint64_t v12 = (a5 >> 59) & 1;
  if ((a6 & 0x1000000000000000LL) == 0) {
    LOBYTE(v12) = 1;
  }
  uint64_t v29 = 4LL << v12;
  uint64_t v23 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v24 = a6 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v13 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000LL) == 0) {
    LOBYTE(v13) = 1;
  }
  uint64_t v27 = 4LL << v13;
  uint64_t v14 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000LL) == 0) {
    uint64_t v14 = a3 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v22 = v14;
  swift_bridgeObjectRetain();
  unint64_t v15 = 15LL;
  while (1)
  {
    unint64_t v16 = v15 >> 14;
    if (v15 >> 14 == v11)
    {
      if ((a1 ^ a2) >= 0x4000)
      {
        char v19 = 0;
        goto LABEL_30;
      }

      uint64_t v21 = 1LL;
LABEL_41:
      swift_bridgeObjectRelease();
      return v21;
    }

    unint64_t result = v15;
    if ((v15 & 0xC) == v29) {
      unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v15, a5, a6);
    }
    unint64_t v18 = result >> 16;
    if (result >> 16 >= v25) {
      break;
    }
    if ((a6 & 0x1000000000000000LL) != 0)
    {
      unint64_t result = String.UTF8View._foreignSubscript(position:)();
      char v19 = result;
    }

    else if ((a6 & 0x2000000000000000LL) != 0)
    {
      v30[0] = a5;
      v30[1] = v24;
      char v19 = *((_BYTE *)v30 + v18);
    }

    else
    {
      unint64_t result = v23;
      if ((a5 & 0x1000000000000000LL) == 0) {
        unint64_t result = _StringObject.sharedUTF8.getter();
      }
      char v19 = *(_BYTE *)(result + v18);
    }

    if ((v15 & 0xC) == v29)
    {
      unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v15, a5, a6);
      unint64_t v15 = result;
      if ((a6 & 0x1000000000000000LL) == 0)
      {
LABEL_24:
        unint64_t v15 = (v15 & 0xFFFFFFFFFFFF0000LL) + 65540;
        goto LABEL_29;
      }
    }

    else if ((a6 & 0x1000000000000000LL) == 0)
    {
      goto LABEL_24;
    }

    if (v25 <= v15 >> 16) {
      goto LABEL_43;
    }
    unint64_t v15 = String.UTF8View._foreignIndex(after:)();
LABEL_29:
    if ((a1 ^ a2) < 0x4000)
    {
      uint64_t v21 = 0LL;
      goto LABEL_41;
    }

LABEL_30:
    unint64_t result = Substring.UTF8View.subscript.getter();
    char v20 = result;
    if ((a1 & 0xC) == v27)
    {
      unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(a1, a3, a4);
      a1 = result;
      if ((a4 & 0x1000000000000000LL) != 0)
      {
LABEL_37:
        if (v22 <= a1 >> 16) {
          goto LABEL_44;
        }
        a1 = String.UTF8View._foreignIndex(after:)();
        goto LABEL_33;
      }
    }

    else if ((a4 & 0x1000000000000000LL) != 0)
    {
      goto LABEL_37;
    }

    a1 = (a1 & 0xFFFFFFFFFFFF0000LL) + 65540;
LABEL_33:
    uint64_t v21 = 0LL;
    if (v16 == v11 || v19 != v20) {
      goto LABEL_41;
    }
  }

  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
  return result;
}

    unint64_t v15 = (v15 & 0xFFFFFFFFFFFF0000LL) + 65540;
LABEL_35:
    unint64_t v22 = 0LL;
    if (v16 < 0x4000 || v17 != v21) {
      goto LABEL_43;
    }
  }

  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
  return result;
}

  if (v10 >> 14 < v31 >> 14) {
    goto LABEL_34;
  }
  uint64_t v29 = v35;
  *uint64_t v30 = v34;
  v30[1] = v29;
  return result;
}

unint64_t specialized Sequence<>.elementsEqual<A>(_:)( unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6)
{
  uint64_t v9 = (a5 >> 59) & 1;
  if ((a6 & 0x1000000000000000LL) == 0) {
    LOBYTE(v9) = 1;
  }
  if ((a6 & 0x2000000000000000LL) != 0) {
    uint64_t v10 = HIBYTE(a6) & 0xF;
  }
  else {
    uint64_t v10 = a5 & 0xFFFFFFFFFFFFLL;
  }
  if ((a2 & 0x2000000000000000LL) != 0) {
    unint64_t v11 = HIBYTE(a2) & 0xF;
  }
  else {
    unint64_t v11 = a1 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v12 = 4LL << v9;
  uint64_t v28 = 4 * v11;
  uint64_t v13 = (a1 >> 59) & 1;
  if ((a2 & 0x1000000000000000LL) == 0) {
    LOBYTE(v13) = 1;
  }
  uint64_t v14 = 4LL << v13;
  uint64_t v25 = a2 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v26 = v12;
  unint64_t v23 = v10;
  uint64_t v24 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  swift_bridgeObjectRetain();
  unint64_t v15 = 15LL;
  while (1)
  {
    unint64_t v16 = a3 ^ a4;
    if ((a3 ^ a4) < 0x4000)
    {
      if (v28 != v15 >> 14)
      {
        char v17 = 0;
        goto LABEL_19;
      }

      uint64_t v22 = 1LL;
LABEL_43:
      swift_bridgeObjectRelease();
      return v22;
    }

    unint64_t result = Substring.UTF8View.subscript.getter();
    char v17 = result;
    if ((a3 & 0xC) == v26)
    {
      unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(a3, a5, a6);
      a3 = result;
      if ((a6 & 0x1000000000000000LL) == 0)
      {
LABEL_17:
        a3 = (a3 & 0xFFFFFFFFFFFF0000LL) + 65540;
        goto LABEL_18;
      }
    }

    else if ((a6 & 0x1000000000000000LL) == 0)
    {
      goto LABEL_17;
    }

    if (v23 <= a3 >> 16) {
      goto LABEL_46;
    }
    a3 = String.UTF8View._foreignIndex(after:)();
LABEL_18:
    if (v28 == v15 >> 14)
    {
      uint64_t v22 = 0LL;
      goto LABEL_43;
    }

LABEL_19:
    unint64_t v19 = v15 & 0xC;
    unint64_t result = v15;
    if (v19 == v14) {
      unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v15, a1, a2);
    }
    unint64_t v20 = result >> 16;
    if (result >> 16 >= v11) {
      break;
    }
    if ((a2 & 0x1000000000000000LL) != 0)
    {
      unint64_t result = String.UTF8View._foreignSubscript(position:)();
      char v21 = result;
      if (v19 != v14) {
        goto LABEL_29;
      }
    }

    else if ((a2 & 0x2000000000000000LL) != 0)
    {
      v31[0] = a1;
      v31[1] = v25;
      char v21 = *((_BYTE *)v31 + v20);
      if (v19 != v14) {
        goto LABEL_29;
      }
    }

    else
    {
      unint64_t result = v24;
      if ((a1 & 0x1000000000000000LL) == 0) {
        unint64_t result = _StringObject.sharedUTF8.getter();
      }
      char v21 = *(_BYTE *)(result + v20);
      if (v19 != v14)
      {
LABEL_29:
        if ((a2 & 0x1000000000000000LL) != 0) {
          goto LABEL_33;
        }
        goto LABEL_30;
      }
    }

    unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v15, a1, a2);
    unint64_t v15 = result;
    if ((a2 & 0x1000000000000000LL) != 0)
    {
LABEL_33:
      if (v11 <= v15 >> 16) {
        goto LABEL_45;
      }
      unint64_t v15 = String.UTF8View._foreignIndex(after:)();
      goto LABEL_35;
    }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)&uint64_t v32 = *v30;
  RegexValidator.validateNode(_:)((uint64_t)&v32);
  char v21 = v30[1];
  uint64_t v22 = v30[2];
  *(void *)&uint64_t v32 = *v30;
  *((void *)&v32 + 1) = v21;
  uint64_t v33 = v22;
  unint64_t v23 = v30[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  specialized Array.append<A>(contentsOf:)(v23);
  uint64_t v24 = v33;
  unint64_t result = *(double *)&v32;
  *(_OWORD *)a1 = v32;
  *(void *)(a1 + 16) = v24;
  return result;
}

uint64_t specialized BidirectionalCollection.lastIndex(where:)(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = a2 - result;
    if (a2 == result)
    {
      return 0LL;
    }

    else
    {
      unint64_t result = a2 - result;
      while (!__OFSUB__(result--, 1LL))
      {
        if (result < 0 || result >= v3) {
          goto LABEL_16;
        }
        int v5 = *(unsigned __int8 *)(v2 + result);
        BOOL v6 = v5 == 10 || v5 == 13;
        if (v6 || !result) {
          return result;
        }
      }

      __break(1u);
LABEL_16:
      __break(1u);
    }
  }

  return result;
}

uint64_t DelimiterLexer.advance(escaped:)(uint64_t result)
{
  uint64_t v2 = (_BYTE *)v1[1];
  if ((unint64_t)v2 >= v1[2])
  {
    if (v1[3]) {
      int v5 = (_BYTE *)v1[3];
    }
    else {
      int v5 = (_BYTE *)v1[1];
    }
    lazy protocol witness table accessor for type DelimiterLexError and conformance DelimiterLexError();
    swift_allocError();
    *(_BYTE *)uint64_t v6 = 0;
LABEL_17:
    *(void *)(v6 + 8) = v5;
    return swift_willThrow();
  }

  if ((char)*v2 < 0)
  {
LABEL_24:
    v1[1] = v2 + 1;
    return result;
  }

  unsigned int v3 = *v2;
  if (v3 <= 0xC)
  {
    if (!*v2) {
      goto LABEL_24;
    }
    if (v3 != 10) {
      goto LABEL_6;
    }
    goto LABEL_21;
  }

  if (v3 != 92)
  {
    if (v3 != 13)
    {
LABEL_6:
      if (v3 - 32 < 0x5F) {
        goto LABEL_24;
      }
      if (v3 == 9 && v1[3] != 0LL) {
        goto LABEL_24;
      }
      int v5 = v2 + 1;
      lazy protocol witness table accessor for type DelimiterLexError and conformance DelimiterLexError();
      swift_allocError();
      *(_BYTE *)uint64_t v6 = 3;
      goto LABEL_17;
    }

BOOL Unicode.Scalar.isPrintableASCII.getter(int a1)
{
  return (a1 - 32) < 0x5F;
}

Swift::tuple_String__RegexParser_Delimiter __swiftcall droppingRegexDelimiters(_:)(Swift::String a1)
{
  uint64_t v2 = 0LL;
  uint64_t object = HIBYTE(v1) & 0xF;
  if ((v1 & 0x2000000000000000LL) == 0) {
    uint64_t object = (uint64_t)a1._object;
  }
  uint64_t v65 = a1._object;
  unint64_t v66 = v1;
  uint64_t v4 = 7LL;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  unint64_t v64 = v4 | (object << 16);
  while (2)
  {
    int v5 = outlined read-only object #0 of droppingRegexDelimiters(_:)[v2 + 32];
    unint64_t v6 = specialized String.UTF8View.subscript.getter(15LL, v64, (unint64_t)v65, v66);
    unint64_t v8 = v6;
    unint64_t v9 = v7;
    unint64_t v11 = v10;
    unint64_t v13 = v12;
    if (v5 == 1)
    {
      swift_bridgeObjectRetain();
      unint64_t v68 = 0LL;
      unint64_t v14 = 0xE200000000000000LL;
      unint64_t v15 = 31779LL;
      goto LABEL_33;
    }

    unint64_t v16 = v7 >> 14;
    unint64_t v17 = v6 >> 14;
    swift_bridgeObjectRetain();
    unint64_t v18 = v8;
    if (v17 == v16) {
      goto LABEL_28;
    }
    unint64_t v18 = v8;
    int v67 = v5;
    uint64_t v19 = (v11 >> 59) & 1;
    if ((v13 & 0x1000000000000000LL) == 0) {
      LOBYTE(v19) = 1;
    }
    uint64_t v20 = 4LL << v19;
    if ((v13 & 0x2000000000000000LL) != 0) {
      unint64_t v21 = HIBYTE(v13) & 0xF;
    }
    else {
      unint64_t v21 = v11 & 0xFFFFFFFFFFFFLL;
    }
    unint64_t v18 = v8;
    while (1)
    {
      if ((v18 & 0xC) == v20)
      {
        unint64_t v18 = _StringGuts._slowEnsureMatchingEncoding(_:)(v18, v11, v13);
        if ((v13 & 0x1000000000000000LL) == 0)
        {
LABEL_19:
          unint64_t v18 = (v18 & 0xFFFFFFFFFFFF0000LL) + 65540;
          goto LABEL_23;
        }
      }

      else if ((v13 & 0x1000000000000000LL) == 0)
      {
        goto LABEL_19;
      }

      if (v21 <= v18 >> 16)
      {
        __break(1u);
        goto LABEL_52;
      }

      unint64_t v18 = String.UTF8View._foreignIndex(after:)();
LABEL_23:
      unint64_t v22 = v18 >> 14;
      if (v18 >> 14 == v16) {
        break;
      }
    }

    unint64_t v22 = v9 >> 14;
LABEL_27:
    int v5 = v67;
    if (v22 < v8 >> 14) {
      goto LABEL_55;
    }
LABEL_28:
    unint64_t v23 = specialized Substring.UTF8View.subscript.getter(v8, v18, v8, v9, v11, v13);
    unint64_t v27 = specialized Collection.count.getter(v23, v24, v25, v26);
    if ((v27 & 0x8000000000000000LL) != 0) {
      goto LABEL_53;
    }
    unint64_t v68 = v27;
    unint64_t v28 = Substring.UTF8View.index(_:offsetBy:limitedBy:)();
    if ((v29 & 1) != 0) {
      unint64_t v28 = v9;
    }
    if (v16 < v28 >> 14)
    {
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }

    unint64_t v8 = specialized Substring.UTF8View.subscript.getter(v28, v9, v8, v9, v11, v13);
    unint64_t v9 = v30;
    unint64_t v11 = v31;
    unint64_t v33 = v32;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    unint64_t v14 = 0xE100000000000000LL;
    unint64_t v15 = 47LL;
    unint64_t v13 = v33;
LABEL_33:
    unint64_t v34 = specialized Collection<>.tryDropPrefix<A>(_:)(v15, v14, v8, v9, v11, v13);
    unint64_t v36 = v35;
    unint64_t v38 = v37;
    unint64_t v40 = v39;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!v40) {
      goto LABEL_6;
    }
    if (v5)
    {
      if (!v68)
      {
        unint64_t v41 = 0xE200000000000000LL;
        unint64_t v42 = 9084LL;
        goto LABEL_38;
      }

LABEL_56:
      __break(1u);
LABEL_57:
      uint64_t v61 = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      goto LABEL_58;
    }

    unint64_t v41 = 0xE100000000000000LL;
    unint64_t v42 = 47LL;
LABEL_38:
    uint64_t v43 = MEMORY[0x186E053EC](35LL, 0xE100000000000000LL);
    uint64_t v45 = v44;
    unint64_t v75 = v42;
    unint64_t v76 = v41;
    swift_bridgeObjectRetain();
    v46._uint64_t countAndFlagsBits = v43;
    v46._uint64_t object = v45;
    String.append(_:)(v46);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v47 = specialized Collection<>.tryDropSuffix<A>(_:)(v75, v76, v34, v36, v38, v40);
    unint64_t v49 = v48;
    unint64_t v51 = v50;
    unint64_t v53 = v52;
    swift_bridgeObjectRelease();
    if (v53)
    {
      swift_bridgeObjectRelease();
      unint64_t v34 = v47;
      unint64_t v36 = v49;
      unint64_t v38 = v51;
      unint64_t v40 = v53;
    }

    swift_bridgeObjectRetain();
    uint64_t v54 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SS_Tg5063_sSS8decoding2asSSx_q_mtcSlRzs16_UnicodeEncodingR_8CodeUnitQy_7g26Rtzr0_lufcSSSRyAGGXEfU_Ss8jK14V_s0C0O0H0OTG5Tf1cn_n( v34,  v36,  v38,  v40);
    if (!v55)
    {
      unint64_t v71 = v34;
      unint64_t v72 = v36;
      unint64_t v73 = v38;
      unint64_t v74 = v40;
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _HasContiguousBytes);
      if ((swift_dynamicCast() & 1) != 0)
      {
        outlined init with take of LocatedErrorProtocol(v69, (uint64_t)&v75);
        __swift_project_boxed_opaque_existential_1Tm(&v75, v77);
        if ((dispatch thunk of _HasContiguousBytes._providesContiguousBytesNoCopy.getter() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          __swift_project_boxed_opaque_existential_1Tm(&v75, v77);
          dispatch thunk of _HasContiguousBytes.withUnsafeBytes<A>(_:)();
          unint64_t v57 = *((void *)&v69[0] + 1);
          unint64_t v56 = *(void *)&v69[0];
          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v75);
          goto LABEL_48;
        }

        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v75);
      }

      else
      {
        uint64_t v70 = 0LL;
        memset(v69, 0, sizeof(v69));
        outlined destroy of _ASTParent?( (uint64_t)v69,  &demangling cache variable for type metadata for _HasContiguousBytes?);
      }

      uint64_t v54 = specialized static String._fromNonContiguousUnsafeBitcastUTF8Repairing<A>(_:)(v34, v36, v38, v40);
    }

    unint64_t v56 = v54;
    unint64_t v57 = v55;
    swift_bridgeObjectRelease();
LABEL_48:
    swift_bridgeObjectRetain();
    char v58 = specialized Sequence<>.elementsEqual<A>(_:)(v34, v36, v38, v40, v56, v57);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v58 & 1) == 0)
    {
LABEL_52:
      __break(1u);
LABEL_53:
      __break(1u);
      goto LABEL_54;
    }

    if (!v57)
    {
LABEL_6:
      if (++v2 == 2) {
        goto LABEL_57;
      }
      continue;
    }

    break;
  }

  *(_BYTE *)uint64_t countAndFlagsBits = v5;
  *(void *)(countAndFlagsBits + 8) = v68;
  uint64_t v61 = v56;
  uint64_t v62 = (void *)v57;
LABEL_58:
  result._1.poundCount = v60;
  result._0._uint64_t object = v62;
  result._0._uint64_t countAndFlagsBits = v61;
  result._1.kind = v59;
  return result;
}

unint64_t specialized Collection.count.getter( unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000LL) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4LL << v8;
  if ((result & 0xC) == 4LL << v8)
  {
    Swift::tuple_String__RegexParser_Delimiter result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a3, a4);
    unint64_t v7 = result;
  }

  if ((a2 & 0xC) == v9)
  {
    Swift::tuple_String__RegexParser_Delimiter result = _StringGuts._slowEnsureMatchingEncoding(_:)(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000LL) == 0) {
      return (a2 >> 16) - (v7 >> 16);
    }
  }

  else if ((a4 & 0x1000000000000000LL) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }

  unint64_t v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000LL) == 0) {
    unint64_t v10 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }

  else if (v10 >= a2 >> 16)
  {
    return String.UTF8View._foreignDistance(from:to:)();
  }

  __break(1u);
  return result;
}

unint64_t specialized Collection.count.getter(unint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v2 = a1;
  }
  uint64_t v3 = 7LL;
  if (((a2 >> 60) & ((a1 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v3 = 11LL;
  }
  return String.UnicodeScalarView.distance(from:to:)(0xFuLL, v3 | (v2 << 16), a1, a2);
}

uint64_t specialized Collection<>.tryDropPrefix<A>(_:)( unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v10 = a2;
  if ((a2 & 0x1000000000000000LL) == 0 || (String.UTF8View._foreignCount()() & 0x8000000000000000LL) == 0) {
    goto LABEL_2;
  }
  __break(1u);
LABEL_15:
  __break(1u);
  while (1)
  {
    __break(1u);
LABEL_2:
    uint64_t v12 = Substring.UTF8View.index(_:offsetBy:limitedBy:)();
    if ((v13 & 1) != 0) {
      unint64_t v14 = a4;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14 >> 14 < a3 >> 14) {
      goto LABEL_15;
    }
    unint64_t v15 = specialized Substring.UTF8View.subscript.getter(a3, v14, a3, a4, a5, a6);
    uint64_t v17 = v16;
    unint64_t v19 = v18;
    unint64_t v21 = v20;
    swift_bridgeObjectRetain();
    unint64_t v10 = specialized Sequence<>.elementsEqual<A>(_:)(a1, v10, v15, v17, v19, v21);
    swift_bridgeObjectRelease();
    if ((v10 & 1) == 0) {
      return 0LL;
    }
    swift_bridgeObjectRetain();
    unint64_t v22 = Substring.UTF8View.index(_:offsetBy:limitedBy:)();
    if ((v23 & 1) != 0) {
      unint64_t v22 = a4;
    }
    if (a4 >> 14 >= v22 >> 14)
    {
      uint64_t v24 = specialized Substring.UTF8View.subscript.getter(v22, a4, a3, a4, a5, a6);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return v24;
    }
  }

uint64_t Collection<>.tryDropPrefix<A>(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return Collection<>.tryDropPrefix<A>(_:)(a1, a2, a3, a4, a5, a6, MEMORY[0x1896188E8], MEMORY[0x189618910], a7);
}

uint64_t specialized Collection<>.tryDropSuffix<A>(_:)( unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  unint64_t v10 = a2;
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    unint64_t v13 = String.UTF8View._foreignCount()();
    if ((v13 & 0x8000000000000000LL) == 0) {
      goto LABEL_24;
    }
    __break(1u);
    goto LABEL_20;
  }

  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v12 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v12 = a1 & 0xFFFFFFFFFFFFLL;
  }
  while (1)
  {
    unint64_t v13 = specialized Collection.count.getter(a3, a4, a5, a6);
    if (__OFSUB__(v13, v12))
    {
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }

    swift_bridgeObjectRetain();
    unint64_t v13 = Substring.UTF8View.index(_:offsetBy:limitedBy:)();
    if ((v14 & 1) != 0) {
      unint64_t v13 = a4;
    }
    if (a4 >> 14 < v13 >> 14) {
      goto LABEL_21;
    }
    uint64_t v26 = v12;
    unint64_t v15 = specialized Substring.UTF8View.subscript.getter(v13, a4, a3, a4, a5, a6);
    uint64_t v17 = v16;
    unint64_t v19 = v18;
    unint64_t v21 = v20;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    unint64_t v10 = specialized Sequence<>.elementsEqual<A>(_:)(a1, v10, v15, v17, v19, v21);
    swift_bridgeObjectRelease();
    if ((v10 & 1) == 0) {
      return 0LL;
    }
    unint64_t v13 = specialized Collection.count.getter(a3, a4, a5, a6);
    if (__OFSUB__(v13, v26)) {
      goto LABEL_22;
    }
    swift_bridgeObjectRetain();
    unint64_t v13 = Substring.UTF8View.index(_:offsetBy:limitedBy:)();
    if ((v22 & 1) != 0) {
      unint64_t v23 = a4;
    }
    else {
      unint64_t v23 = v13;
    }
    if (v23 >> 14 >= a3 >> 14)
    {
      uint64_t v24 = specialized Substring.UTF8View.subscript.getter(a3, v23, a3, a4, a5, a6);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return v24;
    }

uint64_t Collection<>.tryDropSuffix<A>(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return Collection<>.tryDropPrefix<A>(_:)(a1, a2, a3, a4, a5, a6, MEMORY[0x1896188F0], MEMORY[0x189618908], a7);
}

uint64_t Collection<>.tryDropPrefix<A>(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void (*a7)(uint64_t, uint64_t, uint64_t)@<X6>, void (*a8)(uint64_t, uint64_t, uint64_t)@<X7>, uint64_t a9@<X8>)
{
  char v29 = a8;
  uint64_t v30 = a1;
  unint64_t v33 = a7;
  uint64_t v34 = a6;
  uint64_t v31 = a3;
  uint64_t v32 = a5;
  uint64_t v35 = a9;
  uint64_t v12 = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](a1, a2);
  char v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness, v17);
  unint64_t v19 = (char *)&v28 - v18;
  uint64_t v20 = dispatch thunk of Collection.count.getter();
  unint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  uint64_t v28 = v9;
  uint64_t v22 = v20;
  v21(v14, v9, a2);
  v33(v22, a2, a4);
  swift_getAssociatedConformanceWitness();
  char v23 = Sequence<>.elementsEqual<A>(_:)();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v19, AssociatedTypeWitness);
  if ((v23 & 1) != 0)
  {
    v21(v14, v28, a2);
    uint64_t v24 = v35;
    v29(v22, a2, a4);
    uint64_t v25 = 0LL;
    uint64_t v26 = v24;
  }

  else
  {
    uint64_t v25 = 1LL;
    uint64_t v26 = v35;
  }

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56))( v26,  v25,  1LL,  AssociatedTypeWitness);
}

int64_t lexRegex(start:end:delimiters:)( uint64_t a1, unsigned __int8 *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = v5;
  uint64_t v7 = a4;
  uint64_t v8 = (unsigned __int8 *)a3;
  uint64_t v9 = a2;
  uint64_t v79 = 0LL;
  if ((unint64_t)a2 < a3 && *a2 == 35)
  {
    if ((unint64_t)(a2 + 1) < a3 && a2[1] == 35)
    {
      uint64_t v10 = 0LL;
      while (1)
      {
        unint64_t v11 = &a2[v10 + 2];
        uint64_t v12 = v10 + 2;
        if (__OFADD__(v10 + 1, 1LL)) {
          goto LABEL_111;
        }
        if (a3 - (void)a2 - 2 == v10) {
          break;
        }
        ++v10;
        if (*v11 != 35)
        {
          uint64_t v9 = &a2[v10 + 1];
          goto LABEL_14;
        }
      }

      uint64_t v9 = (unsigned __int8 *)a3;
      uint64_t v12 = a3 - (void)a2;
    }

    else
    {
      uint64_t v12 = 1LL;
      uint64_t v9 = a2 + 1;
    }
  }

  else
  {
    uint64_t v12 = 0LL;
  }

LABEL_14:
  uint64_t v13 = *(void *)(a4 + 16);
  swift_bridgeObjectRetain_n();
  uint64_t v74 = v13;
  if (v13)
  {
    unint64_t v14 = 0LL;
    uint64_t v73 = v7 + 32;
    uint64_t v70 = v9;
    uint64_t v71 = v7;
    uint64_t v67 = v12;
    uint64_t v68 = v5;
    unint64_t v69 = (unint64_t)v8;
    while (v14 < *(void *)(v7 + 16))
    {
      int v15 = *(unsigned __int8 *)(v73 + v14);
      if (*(_BYTE *)(v73 + v14)) {
        unint64_t v16 = 31779LL;
      }
      else {
        unint64_t v16 = 47LL;
      }
      if (*(_BYTE *)(v73 + v14)) {
        unint64_t v17 = 0xE200000000000000LL;
      }
      else {
        unint64_t v17 = 0xE100000000000000LL;
      }
      if (v15 != 1 || v12 == 0)
      {
        int64_t v4 = HIBYTE(v17) & 3;
        unint64_t v19 = &v9[v4];
        if (&v9[v4] <= v8 && (specialized Sequence<>.elementsEqual<A>(_:)(v16, v17, v9, &v9[v4]) & 1) != 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          uint64_t v77 = &v9[v4];
          if ((v15 & 1) == 0 && v12 >= 1 && v19 < v8)
          {
            uint64_t v63 = &v9[v4];
            unint64_t v64 = &v9[v4];
            while (2)
            {
              switch(*v64)
              {
                case 9u:
                case 0x20u:
                  if (++v64 > v8) {
                    goto LABEL_113;
                  }
                  if (v8 != ++v63) {
                    continue;
                  }
                  unint64_t v64 = v8;
LABEL_101:
                  uint64_t v77 = v64;
                  break;
                case 0xAu:
                case 0xDu:
                  uint64_t v77 = v64;
                  uint64_t v79 = v63;
                  goto LABEL_62;
                default:
                  goto LABEL_101;
              }

              break;
            }
          }

  specialized Parser.tryEatPrefix(maxLength:_:)( 0LL,  1,  v9,  (uint64_t (*)(uint64_t, void, void *))specialized Source.peekPrefix(maxLength:_:),  (uint64_t *)&v78);
  uint64_t v18 = *((void *)&v78 + 1);
  if (*((void *)&v78 + 1))
  {
    unint64_t v17 = v78;
    Swift::tuple_String__RegexParser_Delimiter result = swift_bridgeObjectRelease();
    a5 = v74;
    goto LABEL_5;
  }

  unint64_t v33 = a4;
  *(void *)&uint64_t v78 = 0LL;
  *((void *)&v78 + 1) = 0xE000000000000000LL;
  _StringGuts.grow(_:)(44LL);
  unint64_t v34 = 8LL * (char)a4;
  v35._uint64_t countAndFlagsBits = *(void *)&aGroupNacallout[v34];
  v35._uint64_t object = *(void **)&aGroupNacallout[v34 + 24];
  String.append(_:)(v35);
  swift_bridgeObjectRelease();
  v36._uint64_t countAndFlagsBits = 0xD00000000000002ALL;
  v36._uint64_t object = (void *)0x8000000181008AB0LL;
  String.append(_:)(v36);
  unint64_t v38 = *((void *)&v78 + 1);
  uint64_t v37 = (char *)v78;
  unint64_t v39 = (char *)v9[9];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_47;
  }
  while (2)
  {
    int v41 = *((void *)v39 + 2);
    unint64_t v40 = *((void *)v39 + 3);
    if (v41 >= v40 >> 1) {
      unint64_t v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v40 > 1),  v41 + 1,  1,  v39);
    }
    *((void *)v39 + 2) = v41 + 1;
    unint64_t v42 = &v39[80 * v41];
    v42[32] = 1;
    *((void *)v42 + 5) = v37;
    *((void *)v42 + 6) = v38;
    *((void *)v42 + 7) = v8;
    *((void *)v42 + 8) = v25;
    *((void *)v42 + 9) = v33;
    *((void *)v42 + 10) = 0LL;
    *((void *)v42 + 11) = 0LL;
    *((void *)v42 + 12) = 0LL;
    v42[104] = 27;
    swift_bridgeObjectRelease();
    v9[9] = v39;
    uint64_t v43 = v9[2];
    swift_bridgeObjectRetain();
    *(void *)&uint64_t v78 = 0LL;
    *((void *)&v78 + 1) = 0xE000000000000000LL;
    swift_bridgeObjectRetain();
    unint64_t v44 = String.subscript.getter();
    unint64_t v46 = v45;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v44 ^ v46) >= 0x4000)
    {
      swift_bridgeObjectRetain();
      uint64_t v47 = String.subscript.getter();
      unint64_t v49 = v48;
      swift_bridgeObjectRelease();
      LOBYTE(v47) = specialized Sequence<>.starts<A>(with:)(v72, a3, v47, v49);
      swift_bridgeObjectRelease();
      if ((v47 & 1) == 0)
      {
        uint64_t v71 = v43;
        uint64_t v25 = v43;
        Swift::String v50 = (void *)*v9;
        uint64_t v73 = v9;
        while (1)
        {
          unint64_t v39 = (char *)v9[2];
          unint64_t v38 = v9[3];
          uint64_t v37 = (char *)v9[9];
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          unint64_t v51 = String.subscript.getter();
          uint64_t v53 = v52;
          swift_bridgeObjectRelease();
          if (!((v51 ^ v53) >> 14))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            a5 = v74;
            uint64_t v43 = v71;
            goto LABEL_22;
          }

          uint64_t v77 = Substring.subscript.getter();
          uint64_t v8 = v54;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          uint64_t v9 = v50;
          String.subscript.getter();
          unint64_t v33 = v55;
          swift_bridgeObjectRelease();
          uint64_t v25 = Substring.index(_:offsetBy:limitedBy:)();
          int v57 = v56;
          swift_bridgeObjectRelease();
          if ((v57 & 1) == 0) {
            break;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v37 + 2) + 1LL,  1,  v37);
          }
          unint64_t v59 = *((void *)v37 + 2);
          char v58 = *((void *)v37 + 3);
          if (v59 >= v58 >> 1) {
            uint64_t v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v58 > 1),  v59 + 1,  1,  v37);
          }
          *((void *)v37 + 2) = v59 + 1;
          Swift::Int v60 = &v37[80 * v59];
          v60[32] = 0;
          *((void *)v60 + 5) = 0xD000000000000022LL;
          *((void *)v60 + 6) = 0x8000000181009440LL;
          *((void *)v60 + 7) = v39;
          *((void *)v60 + 8) = v39;
          *(_OWORD *)(v60 + 72) = 0u;
          *(_OWORD *)(v60 + 88) = 0u;
          v60[104] = -1;
          v73[9] = v37;
          swift_bridgeObjectRetain();
          String.subscript.getter();
          swift_bridgeObjectRelease();
          uint64_t v61 = Substring.distance(from:to:)();
          swift_bridgeObjectRelease();
          if (v61 >= 1)
          {
            swift_bridgeObjectRetain();
            String.subscript.getter();
            swift_bridgeObjectRelease();
            char v62 = Substring.index(_:offsetBy:limitedBy:)();
            unint64_t v64 = v63;
            swift_bridgeObjectRelease();
            uint64_t v25 = (unint64_t)v39;
            if ((v64 & 1) != 0) {
              goto LABEL_39;
            }
            if (v38 >> 14 < v62 >> 14) {
              goto LABEL_49;
            }
            uint64_t v25 = v62;
            goto LABEL_37;
          }

          uint64_t v25 = (unint64_t)v39;
LABEL_39:
          MEMORY[0x186E0535C](v77, v8);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          unint64_t v65 = String.subscript.getter();
          uint64_t v67 = v66;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v65 ^ v67) >= 0x4000)
          {
            swift_bridgeObjectRetain();
            uint64_t v68 = String.subscript.getter();
            uint64_t v70 = v69;
            swift_bridgeObjectRelease();
            LOBYTE(v68) = specialized Sequence<>.starts<A>(with:)(v72, a3, v68, v70);
            swift_bridgeObjectRelease();
            uint64_t v9 = v73;
            if ((v68 & 1) == 0) {
              continue;
            }
          }

          a5 = v74;
          uint64_t v43 = v71;
          goto LABEL_22;
        }

        if (v38 >> 14 < v25 >> 14)
        {
          __break(1u);
LABEL_47:
          unint64_t v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v39 + 2) + 1LL,  1,  v39);
          continue;
        }

      unint64_t v19 = v14;
      Swift::tuple_String__RegexParser_Delimiter result = specialized Parser.tryEat<A>(sequence:)(a1, a2);
      unint64_t v14 = v19;
      if ((result & 1) == 0)
      {
        *(void *)&unint64_t v22 = a1;
        *((void *)&v22 + 1) = a2;
        swift_bridgeObjectRetain();
        *(void *)&unint64_t v22 = String.init<A>(_:)();
        *((void *)&v22 + 1) = v18;
        unint64_t v23 = 0LL;
        unint64_t v24 = 0LL;
        uint64_t v25 = 3;
        Parser.errorAtCurrentPosition(_:)(&v22);
        Swift::tuple_String__RegexParser_Delimiter result = swift_bridgeObjectRelease();
        unint64_t v14 = v19;
      }

      goto LABEL_16;
    }
  }

  __break(1u);
  return result;
}

  uint64_t v21 = *(void *)(v1 + 72);
  *a1 = v9;
  a1[1] = v3;
  a1[2] = v21;
  return swift_bridgeObjectRetain();
}

LABEL_62:
          if (v15) {
            uint64_t v45 = 9084LL;
          }
          else {
            uint64_t v45 = 47LL;
          }
          unint64_t v46 = 0xE100000000000000LL;
          if (v15) {
            unint64_t v46 = 0xE200000000000000LL;
          }
          unint64_t v75 = v46;
          unint64_t v76 = v45;
          while (2)
          {
            char v81 = v77;
            uint64_t v47 = MEMORY[0x186E053EC](35LL, 0xE100000000000000LL, v12);
            unint64_t v49 = v48;
            swift_bridgeObjectRetain();
            v50._uint64_t countAndFlagsBits = v47;
            v50._uint64_t object = v49;
            String.append(_:)(v50);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            unint64_t v51 = v77;
            uint64_t v52 = HIBYTE(v75) & 0xF;
            if (a3 < (unint64_t)&v77[v52]
              || (specialized Sequence<>.elementsEqual<A>(_:)(v76, v75, v77, &v77[v52]) & 1) == 0)
            {
              swift_bridgeObjectRelease();
              int64_t v4 = 0LL;
              uint64_t v52 = 0LL;
LABEL_71:
              if (v6)
              {
                swift_bridgeObjectRelease();
                return v4;
              }

              if (v52)
              {
                swift_bridgeObjectRelease();
                *(_BYTE *)a1 = v15;
                *(void *)(a1 + 8) = v12;
                return v4;
              }

              DelimiterLexer.advance(escaped:)(0LL);
              continue;
            }

            break;
          }

          v77 += v52;
          swift_bridgeObjectRelease();
          int64_t v4 = v81 - v19;
          if (!v79) {
            goto LABEL_89;
          }
          uint64_t v53 = specialized BidirectionalCollection.lastIndex(where:)((uint64_t)v19, (uint64_t)v81);
          if ((v54 & 1) != 0) {
            goto LABEL_118;
          }
          int64_t v55 = v53 + 1;
          if (__OFADD__(v53, 1LL)) {
            goto LABEL_114;
          }
          if (v4 < v55) {
            goto LABEL_115;
          }
          if (v55 == v4)
          {
LABEL_89:
            int64_t v4 = static String._fromUTF8Repairing(_:)();
            uint64_t v52 = v59;
            if ((specialized Sequence<>.elementsEqual<A>(_:)(v19, v81, v4, v59) & 1) != 0) {
              goto LABEL_71;
            }
            swift_bridgeObjectRelease();
            Swift::Int v60 = v77;
            lazy protocol witness table accessor for type DelimiterLexError and conformance DelimiterLexError();
            uint64_t v6 = swift_allocError();
            char v62 = 1;
          }

          else
          {
            int64_t v56 = v53 + 1;
            while (1)
            {
              if (v56 >= v4) {
                goto LABEL_106;
              }
              if (v55 < 0) {
                goto LABEL_107;
              }
              int v57 = v19[v56];
              if (v57 != 32 && v57 != 9) {
                break;
              }
              if (v4 == ++v56) {
                goto LABEL_89;
              }
            }

            Swift::Int v60 = v77;
            lazy protocol witness table accessor for type DelimiterLexError and conformance DelimiterLexError();
            uint64_t v6 = swift_allocError();
            char v62 = 4;
          }

          *(_BYTE *)uint64_t v61 = v62;
          *(void *)(v61 + 8) = v60;
          swift_willThrow();
          goto LABEL_71;
        }

        swift_bridgeObjectRelease_n();
        goto LABEL_17;
      }

      if (v12 <= 1)
      {
        uint64_t v20 = specialized Collection.prefix(_:)(v12, 0x7C23uLL, 0xE200000000000000LL);
        if (v12 < 0) {
          goto LABEL_108;
        }
        unint64_t v24 = v20;
        uint64_t v25 = v21;
        unint64_t v26 = v22;
        unint64_t v27 = v23;
        swift_bridgeObjectRetain();
        int64_t v4 = specialized Sequence<>.elementsEqual<A>(_:)(v12, 35, v24, v25, v26, v27);
        swift_bridgeObjectRelease();
        uint64_t v9 = v70;
        if ((v4 & 1) != 0)
        {
          unint64_t v28 = specialized Collection.dropFirst(_:)(v12, 0x7C23uLL, 0xE200000000000000LL);
          unint64_t v30 = v29;
          int64_t v4 = v31;
          uint64_t v32 = v8;
          unint64_t v34 = v33;
          swift_bridgeObjectRetain();
          unint64_t v80 = v4;
          uint64_t v35 = &v70[specialized Collection.count.getter(v28, v30, v4, v34)];
          if (v35 > v32)
          {
LABEL_38:
            swift_bridgeObjectRelease();
            uint64_t v12 = v67;
            uint64_t v6 = v68;
            uint64_t v8 = (unsigned __int8 *)v69;
            uint64_t v9 = v70;
LABEL_17:
            uint64_t v7 = v71;
            goto LABEL_18;
          }

          uint64_t v36 = ((unint64_t)v4 >> 59) & 1;
          if ((v34 & 0x1000000000000000LL) == 0) {
            LOBYTE(v36) = 1;
          }
          uint64_t v72 = 4LL << v36;
          uint64_t v37 = HIBYTE(v34) & 0xF;
          if ((v34 & 0x2000000000000000LL) == 0) {
            uint64_t v37 = v4 & 0xFFFFFFFFFFFFLL;
          }
          unint64_t v65 = v37;
          unint64_t v38 = v28;
          unint64_t v39 = v70;
          while (2)
          {
            unint64_t v40 = v38 ^ v30;
            if (v35 == v39)
            {
              if (v40 < 0x4000)
              {
                unint64_t v19 = &v70[specialized Collection.count.getter(v28, v30, v80, v34)];
                uint64_t v77 = v19;
                if ((unint64_t)v19 <= v69)
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  uint64_t v12 = 0LL;
                  int v15 = 1;
                  uint64_t v6 = v68;
                  goto LABEL_62;
                }

        uint64_t v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v36 + 2) + 1LL,  1,  v36);
        goto LABEL_45;
      }
    }

    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }

    uint64_t v70 = 9uLL;
    *(_OWORD *)uint64_t v71 = 0uLL;
    v71[16] = 36;
    Parser.errorAtCurrentPosition(_:)(&v70);
    goto LABEL_49;
  }

  *(void *)a2 = 3LL;
  Swift::tuple_String__RegexParser_Delimiter result = 0.0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(void *)(a2 + 72) = 0LL;
  *(_BYTE *)(a2 + 80) = 3;
  return result;
}

LABEL_116:
                __break(1u);
LABEL_117:
                __break(1u);
LABEL_118:
                __break(1u);
                JUMPOUT(0x180FAA27CLL);
              }

              int v41 = 0;
              unint64_t v42 = v39;
            }

            else
            {
              if (v40 < 0x4000) {
                goto LABEL_38;
              }
              unint64_t v42 = v39 + 1;
              int v41 = *v39;
            }

            int64_t v4 = Substring.UTF8View.subscript.getter();
            if ((v38 & 0xC) == v72)
            {
              unint64_t v38 = _StringGuts._slowEnsureMatchingEncoding(_:)(v38, v80, v34);
              if ((v34 & 0x1000000000000000LL) == 0) {
                goto LABEL_51;
              }
            }

            else if ((v34 & 0x1000000000000000LL) == 0)
            {
LABEL_51:
              unint64_t v38 = (v38 & 0xFFFFFFFFFFFF0000LL) + 65540;
              if (v35 == v39) {
                goto LABEL_38;
              }
LABEL_52:
              unint64_t v39 = v42;
              continue;
            }

            break;
          }

          if (v65 <= v38 >> 16) {
            goto LABEL_117;
          }
          unint64_t v38 = String.UTF8View._foreignIndex(after:)();
          if (v35 == v39) {
            goto LABEL_38;
          }
          goto LABEL_52;
        }
      }

LABEL_18:
      if (++v14 == v74) {
        goto LABEL_58;
      }
    }

    __break(1u);
LABEL_106:
    __break(1u);
LABEL_107:
    __break(1u);
LABEL_108:
    __break(1u);
LABEL_109:
    __break(1u);
LABEL_110:
    __break(1u);
LABEL_111:
    __break(1u);
LABEL_112:
    __break(1u);
LABEL_113:
    __break(1u);
LABEL_114:
    __break(1u);
LABEL_115:
    __break(1u);
    goto LABEL_116;
  }

  __break(1u);
  return result;
}

  *a2 = v19 & 1;
  return result;
}

LABEL_58:
  swift_bridgeObjectRelease_n();
  lazy protocol witness table accessor for type DelimiterLexError and conformance DelimiterLexError();
  swift_allocError();
  *(_BYTE *)uint64_t v43 = 2;
  *(void *)(v43 + 8) = v9 + 1;
  swift_willThrow();
  return v4;
}

    uint64_t v9 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v9 + 16) + 1LL,  1,  (char *)v9);
    goto LABEL_17;
  }

  if (v13 == 1)
  {
    uint64_t v74 = v6;
    goto LABEL_43;
  }

void ParseError.hash(into:)()
{
  __asm { BR              X10 }

uint64_t sub_180FAA328()
{
  return String.hash(into:)();
}

void sub_180FAA540( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, Swift::UInt a11)
{
}

void sub_180FAA560()
{
}

void sub_180FAA590( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a12 | a13 | v13 | a11)
  {
    uint64_t v14 = a12 | a13 | a11;
    if (v13 == 1 && v14 == 0)
    {
      Hasher._combine(_:)(0xBuLL);
    }

    else if (v13 == 2 && v14 == 0)
    {
      Hasher._combine(_:)(0xCuLL);
    }

    else if (v13 != 3 || v14)
    {
      if (v13 != 4 || v14)
      {
        if (v13 != 5 || v14)
        {
          if (v13 != 6 || v14)
          {
            if (v13 != 7 || v14)
            {
              if (v13 != 8 || v14)
              {
                if (v13 != 9 || v14)
                {
                  if (v13 != 10 || v14)
                  {
                    if (v13 != 11 || v14)
                    {
                      if (v13 != 12 || v14)
                      {
                        if (v13 != 13 || v14)
                        {
                          if (v13 != 14 || v14)
                          {
                            if (v13 != 15 || v14)
                            {
                              if (v13 != 16 || v14)
                              {
                                if (v13 != 17 || v14) {
                                  Hasher._combine(_:)(0x36uLL);
                                }
                                else {
                                  Hasher._combine(_:)(0x33uLL);
                                }
                              }

                              else
                              {
                                Hasher._combine(_:)(0x32uLL);
                              }
                            }

                            else
                            {
                              Hasher._combine(_:)(0x2CuLL);
                            }
                          }

                          else
                          {
                            Hasher._combine(_:)(0x2BuLL);
                          }
                        }

                        else
                        {
                          Hasher._combine(_:)(0x2AuLL);
                        }
                      }

                      else
                      {
                        Hasher._combine(_:)(0x29uLL);
                      }
                    }

                    else
                    {
                      Hasher._combine(_:)(0x28uLL);
                    }
                  }

                  else
                  {
                    Hasher._combine(_:)(0x24uLL);
                  }
                }

                else
                {
                  Hasher._combine(_:)(0x23uLL);
                }
              }

              else
              {
                Hasher._combine(_:)(0x1AuLL);
              }
            }

            else
            {
              Hasher._combine(_:)(0x19uLL);
            }
          }

          else
          {
            Hasher._combine(_:)(0x18uLL);
          }
        }

        else
        {
          Hasher._combine(_:)(0x11uLL);
        }
      }

      else
      {
        Hasher._combine(_:)(0x10uLL);
      }
    }

    else
    {
      Hasher._combine(_:)(0xFuLL);
    }
  }

  else
  {
    Hasher._combine(_:)(4uLL);
  }

  JUMPOUT(0x180FAA528LL);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ParseError()
{
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ParseError()
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ParseError()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ParseError( __int128 *a1, __int128 *a2)
{
  specialized static ParseError.== infix(_:_:)(v5);
  return v3 & 1;
}

void ParseError.description.getter()
{
  __asm { BR              X10 }

unint64_t sub_180FAA8EC()
{
  v1._uint64_t countAndFlagsBits = v0;
  v1._uint64_t object = v3;
  String.append(_:)(v1);
  return 0xD000000000000011LL;
}

void sub_180FAB4E0()
{
}

void protocol witness for CustomStringConvertible.description.getter in conformance ParseError()
{
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance FatalParseError()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance FatalParseError()
{
  return String.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FatalParseError()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance FatalParseError( void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FatalParseError()
{
  Swift::String v1 = *v0;
  strcpy((char *)v3, "UNREACHABLE: ");
  String.append(_:)(v1);
  return v3[0];
}

void Diagnostic.behavior.getter(_BYTE *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t Diagnostic.message.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

__n128 Diagnostic.location.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = *(__n128 *)(v1 + 24);
  *a1 = result;
  return result;
}

BOOL Diagnostic.isAnyError.getter()
{
  return *v0 < 2u;
}

BOOL Diagnostic.Behavior.isAnyError.getter()
{
  return *v0 < 2u;
}

void Diagnostic.hash(into:)()
{
  unint64_t v2 = *((void *)v0 + 3);
  unint64_t v1 = *((void *)v0 + 4);
  int v3 = v0[72];
  Hasher._combine(_:)(*v0);
  String.hash(into:)();
  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v1 >> 14);
  if (v3 == 255)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    ParseError.hash(into:)();
  }

BOOL static Diagnostic.Behavior.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int Diagnostic.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  unint64_t v3 = *((void *)v0 + 3);
  unint64_t v2 = *((void *)v0 + 4);
  int v4 = v0[72];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  String.hash(into:)();
  Hasher._combine(_:)(v3 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  if (v4 == 255)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    ParseError.hash(into:)();
  }

  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Diagnostic()
{
  unint64_t v2 = *((void *)v0 + 3);
  unint64_t v1 = *((void *)v0 + 4);
  int v3 = v0[72];
  Hasher._combine(_:)(*v0);
  String.hash(into:)();
  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v1 >> 14);
  if (v3 == 255)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    ParseError.hash(into:)();
  }

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Diagnostic()
{
  Swift::UInt v1 = *v0;
  unint64_t v3 = *((void *)v0 + 3);
  unint64_t v2 = *((void *)v0 + 4);
  int v4 = v0[72];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  String.hash(into:)();
  Hasher._combine(_:)(v3 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  if (v4 == 255)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    ParseError.hash(into:)();
  }

  return Hasher._finalize()();
}

void Diagnostic.Behavior.hash(into:)()
{
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Diagnostic.Behavior( unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

_RegexParser::Diagnostics __swiftcall Diagnostics.init()()
{
  *uint64_t v0 = MEMORY[0x18961AFE8];
  return result;
}

uint64_t Diagnostics.append(_:)(char *a1)
{
  char v16 = *a1;
  uint64_t v2 = *((void *)a1 + 2);
  uint64_t v14 = *((void *)a1 + 3);
  uint64_t v15 = *((void *)a1 + 1);
  uint64_t v3 = *((void *)a1 + 5);
  uint64_t v13 = *((void *)a1 + 4);
  uint64_t v4 = *((void *)a1 + 6);
  uint64_t v5 = *((void *)a1 + 7);
  uint64_t v6 = *((void *)a1 + 8);
  unsigned __int8 v7 = a1[72];
  uint64_t v8 = *v1;
  swift_bridgeObjectRetain();
  outlined copy of ParseError?(v3, v4, v5, v6, v7);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v8 + 16) + 1LL,  1,  (char *)v8);
    uint64_t v8 = result;
  }

  unint64_t v11 = *(void *)(v8 + 16);
  unint64_t v10 = *(void *)(v8 + 24);
  if (v11 >= v10 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v10 > 1),  v11 + 1,  1,  (char *)v8);
    uint64_t v8 = result;
  }

  *(void *)(v8 + 16) = v11 + 1;
  unint64_t v12 = v8 + 80 * v11;
  *(_BYTE *)(v12 + 32) = v16;
  *(void *)(v12 + 40) = v15;
  *(void *)(v12 + 48) = v2;
  *(void *)(v12 + 56) = v14;
  *(void *)(v12 + 64) = v13;
  *(void *)(v12 + 72) = v3;
  *(void *)(v12 + 80) = v4;
  *(void *)(v12 + 88) = v5;
  *(void *)(v12 + 96) = v6;
  *(_BYTE *)(v12 + 104) = v7;
  uint64_t *v1 = v8;
  return result;
}

Swift::Void __swiftcall Diagnostics.append(contentsOf:)(_RegexParser::Diagnostics contentsOf)
{
  uint64_t v1 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v1);
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v6 = result;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(v6 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }

  if (v4 <= v5) {
    int64_t v10 = v4 + v2;
  }
  else {
    int64_t v10 = v4;
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)result,  v10,  1,  (char *)v3);
  uint64_t v3 = result;
  if (!*(void *)(v6 + 16))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }

Swift::Void __swiftcall Diagnostics.appendNewFatalErrors(from:)(_RegexParser::Diagnostics from)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  uint64_t v4 = specialized Collection.dropFirst(_:)(*((void *)v3 + 2), *(void *)from.diags._rawValue);
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  int64_t v10 = v9 >> 1;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  uint64_t v11 = v6 - 32;
  uint64_t v12 = v8;
  uint64_t v13 = v8;
LABEL_2:
  uint64_t v14 = v11 + 80 * v12;
  while (1)
  {
    if (v10 == v13)
    {
      swift_unknownObjectRelease_n();
      return;
    }

    if (v12 < v8 || v13 >= v10) {
      break;
    }
    int v15 = *(unsigned __int8 *)(v14 + 32);
    ++v13;
    v14 += 80LL;
    if (!v15)
    {
      uint64_t v35 = v4;
      uint64_t v30 = *(void *)(v14 - 24);
      uint64_t v31 = *(void *)(v14 - 40);
      uint64_t v16 = *(void *)(v14 - 8);
      unint64_t v28 = v2;
      uint64_t v29 = *(void *)(v14 - 16);
      uint64_t v17 = *(void *)v14;
      uint64_t v18 = *(void *)(v14 + 8);
      uint64_t v19 = *(void *)(v14 + 16);
      uint64_t v20 = v3;
      unsigned __int8 v21 = *(_BYTE *)(v14 + 24);
      uint64_t v34 = *(void *)(v14 - 32);
      swift_bridgeObjectRetain();
      uint64_t v33 = v16;
      uint64_t v22 = v16;
      uint64_t v23 = v17;
      unsigned __int8 v32 = v21;
      unsigned __int8 v24 = v21;
      uint64_t v3 = v20;
      outlined copy of ParseError?(v22, v17, v18, v19, v24);
      uint64_t v2 = v28;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v20 + 2) + 1LL,  1,  v20);
      }
      unint64_t v26 = *((void *)v3 + 2);
      unint64_t v25 = *((void *)v3 + 3);
      if (v26 >= v25 >> 1) {
        uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v25 > 1),  v26 + 1,  1,  v3);
      }
      *((void *)v3 + 2) = v26 + 1;
      unint64_t v27 = &v3[80 * v26];
      v27[32] = 0;
      *((void *)v27 + 5) = v31;
      *((void *)v27 + 6) = v34;
      *((void *)v27 + 7) = v30;
      *((void *)v27 + 8) = v29;
      *((void *)v27 + 9) = v33;
      *((void *)v27 + 10) = v23;
      *((void *)v27 + 11) = v18;
      *((void *)v27 + 12) = v19;
      v27[104] = v32;
      *unint64_t v28 = v3;
      uint64_t v12 = v13;
      uint64_t v4 = v35;
      goto LABEL_2;
    }
  }

  __break(1u);
}

uint64_t specialized Sequence.contains(where:)(uint64_t (*a1)(_BYTE *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  if (v4)
  {
    uint64_t v6 = v4 - 1;
    uint64_t v7 = (_OWORD *)(a3 + 40);
    do
    {
      uint64_t v8 = v6;
      v10[0] = *((_BYTE *)v7 - 8);
      __int128 v11 = *v7;
      LOBYTE(outlined init with take of AST.Conditional.Condition.Kind((__int128 *)v0, v4) = (v3 != 0) | a1(v10);
      if ((v4 & 1) != 0) {
        break;
      }
      uint64_t v6 = v8 - 1;
      uint64_t v7 = (_OWORD *)((char *)v7 + 24);
    }

    while (v8);
  }

  return v4 & 1;
}

unint64_t specialized Sequence.contains(where:)( unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v23 = a4 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v20 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000LL) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4LL << v8;
  if ((a4 & 0x2000000000000000LL) != 0) {
    unint64_t v10 = HIBYTE(a4) & 0xF;
  }
  else {
    unint64_t v10 = a3 & 0xFFFFFFFFFFFFLL;
  }
  swift_bridgeObjectRetain();
  unint64_t v11 = a1;
  while (1)
  {
    unint64_t v12 = v11 ^ a2;
    if ((v11 ^ a2) < 0x4000)
    {
LABEL_37:
      swift_bridgeObjectRelease();
      return (v12 & 0xFFFFFFFFFFFFC000LL) != 0;
    }

    _StringGuts.validateScalarIndex(_:in:)(v11, a1, a2, a3, a4);
    if ((a4 & 0x1000000000000000LL) != 0)
    {
      unint64_t result = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }

    else
    {
      if ((a4 & 0x2000000000000000LL) != 0)
      {
        unint64_t v21 = a3;
        uint64_t v22 = v23;
      }

      else if ((a3 & 0x1000000000000000LL) == 0)
      {
        _StringObject.sharedUTF8.getter();
      }

      unint64_t result = _decodeScalar(_:startingAt:)();
    }

    int v14 = result;
    if ((v11 & 0xC) != v9 && (v11 & 1) != 0) {
      break;
    }
    if ((v11 & 0xC) == v9)
    {
      unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v11, a3, a4);
      unint64_t v11 = result;
      if (v10 <= result >> 16) {
        goto LABEL_38;
      }
    }

    else if (v10 <= v11 >> 16)
    {
      goto LABEL_38;
    }

    if ((v11 & 1) != 0) {
      goto LABEL_21;
    }
    unint64_t v11 = v11 & 0xC | _StringGuts.scalarAlignSlow(_:)(v11, a3, a4) & 0xFFFFFFFFFFFFFFF3LL | 1;
    if ((a4 & 0x1000000000000000LL) != 0)
    {
LABEL_35:
      unint64_t v11 = String.UnicodeScalarView._foreignIndex(after:)();
      if (v14 == 10) {
        goto LABEL_37;
      }
      goto LABEL_36;
    }

uint64_t specialized Sequence.contains(where:)(uint64_t (*a1)(void *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  if (v4)
  {
    uint64_t v6 = (uint64_t *)(a3 + 40);
    uint64_t v7 = v4 - 1;
    do
    {
      uint64_t v8 = *v6;
      v12[0] = *(v6 - 1);
      v12[1] = v8;
      swift_bridgeObjectRetain();
      int v9 = a1(v12);
      swift_bridgeObjectRelease();
      if (v3) {
        break;
      }
      v6 += 2;
      BOOL v10 = v7-- == 0;
    }

    while (((v9 | v10) & 1) == 0);
  }

  else
  {
    LOBYTE(v9) = 0;
  }

  return v9 & 1;
}

BOOL Diagnostics.hasFatalError.getter()
{
  uint64_t v1 = (unsigned __int8 *)(*(void *)v0 + 32LL);
  uint64_t v2 = *(void *)(*(void *)v0 + 16LL) + 1LL;
  do
  {
    if (!--v2) {
      break;
    }
    int v3 = *v1;
    v1 += 80;
  }

  while (v3);
  return v2 != 0;
}

void Diagnostics.hash(into:)(uint64_t a1)
{
}

Swift::Int Diagnostics.hashValue.getter()
{
  return AST.GlobalMatchingOptionSequence.hashValue.getter((void (*)(_BYTE *, uint64_t))specialized Array<A>.hash(into:));
}

Swift::Int AST.GlobalMatchingOptionSequence.hashValue.getter(void (*a1)(_BYTE *, uint64_t))
{
  uint64_t v3 = *v1;
  Hasher.init(_seed:)();
  a1(v5, v3);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Diagnostics(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance AST.GlobalMatchingOptionSequence( a1,  a2,  (void (*)(_BYTE *, uint64_t))specialized Array<A>.hash(into:));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.GlobalMatchingOptionSequence( uint64_t a1, uint64_t a2, void (*a3)(_BYTE *, uint64_t))
{
  uint64_t v5 = *v3;
  Hasher.init(_seed:)();
  a3(v7, v5);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Diagnostics(uint64_t a1)
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Diagnostics( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance AST.GlobalMatchingOptionSequence( a1,  a2,  a3,  (void (*)(_BYTE *, uint64_t))specialized Array<A>.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.GlobalMatchingOptionSequence( uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_BYTE *, uint64_t))
{
  uint64_t v6 = *v4;
  Hasher.init(_seed:)();
  a4(v8, v6);
  return Hasher._finalize()();
}

void protocol witness for static Equatable.== infix(_:_:) in conformance Diagnostics( uint64_t *a1, uint64_t *a2)
{
  specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ErrorDiagnostic #1 in Diagnostics.throwAnyError()()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Source.Located.init(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32LL))(a4, a1);
  uint64_t result = type metadata accessor for Source.Located();
  uint64_t v8 = (void *)(a4 + *(int *)(result + 28));
  *uint64_t v8 = v5;
  v8[1] = v6;
  return result;
}

uint64_t specialized Parser.tryEating<A>(_:)@<X0>(uint64_t a1@<X0>, char **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  char v53 = *(_BYTE *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v51 = *(void *)(a1 + 56);
  uint64_t v52 = *(void *)(a1 + 40);
  char v50 = *(_BYTE *)(a1 + 64);
  uint64_t v10 = *(void *)(a1 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11._uint64_t countAndFlagsBits = 123LL;
  v11._uint64_t object = (void *)0xE100000000000000LL;
  if (!Parser.tryEat(_:)(v11)) {
    goto LABEL_9;
  }
  unint64_t v12 = *(void *)(a1 + 16);
  uint64_t result = specialized Parser.tryEating<A>(_:)((uint64_t *)a1, a2, &v59);
  unint64_t v14 = v63;
  if (v60 >> 1 == 0xFFFFFFFF && v63 < 2)
  {
    unint64_t v14 = 0LL;
    uint64_t v58 = 0LL;
    uint64_t v56 = 0LL;
    __int128 v57 = 0u;
    uint64_t v15 = 0x1FFFFFFFELL;
    __int128 v55 = 0u;
  }

  else
  {
    if (*(void *)(a1 + 16) >> 14 < v12 >> 14)
    {
LABEL_27:
      __break(1u);
      return result;
    }

    __int128 v55 = v64;
    uint64_t v58 = v62;
    __int128 v57 = v61;
    uint64_t v56 = v59;
    uint64_t v15 = v60;
    if (v63 > 1) {
      goto LABEL_8;
    }
  }

  if ((v15 & 0xFFFFFFFFFFFFFFFELL) == 0x1FFFFFFFELL)
  {
LABEL_9:
    uint64_t v58 = 0LL;
    unint64_t v14 = 0LL;
    uint64_t v56 = 0LL;
    __int128 v57 = 0u;
    uint64_t v15 = 0x1FFFFFFFELL;
    __int128 v55 = 0u;
    goto LABEL_10;
  }

LABEL_8:
  v16._uint64_t countAndFlagsBits = 125LL;
  v16._uint64_t object = (void *)0xE100000000000000LL;
  if (!Parser.tryEat(_:)(v16)) {
    goto LABEL_9;
  }
LABEL_10:
  if (v14 <= 1 && (v15 & 0xFFFFFFFFFFFFFFFELL) == 0x1FFFFFFFELL)
  {
    uint64_t v46 = v15;
    uint64_t v47 = v8;
    uint64_t v48 = v7;
    unint64_t v49 = v14;
    uint64_t v17 = *(void *)(a1 + 72);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    specialized Collection.dropFirst(_:)(*(void *)(v10 + 16), v17);
    uint64_t v19 = v18;
    uint64_t v21 = v20;
    int64_t v23 = v22 >> 1;
    swift_bridgeObjectRetain();
    uint64_t result = swift_unknownObjectRetain();
    uint64_t v24 = v19 - 32;
    uint64_t v25 = v21;
    uint64_t v26 = v21;
LABEL_13:
    uint64_t v27 = v24 + 80 * v25;
    unint64_t v14 = v49;
    while (1)
    {
      if (v23 == v26)
      {
        swift_bridgeObjectRelease();
        uint64_t result = swift_unknownObjectRelease_n();
        *(void *)a1 = v6;
        *(void *)(a1 + 8) = v5;
        uint64_t v15 = v46;
        *(void *)(a1 + 16) = v48;
        *(void *)(a1 + 24) = v47;
        *(_BYTE *)(a1 + 32) = v53;
        *(void *)(a1 + 40) = v52;
        *(void *)(a1 + 48) = v9;
        *(void *)(a1 + 56) = v51;
        *(_BYTE *)(a1 + 64) = v50;
        *(void *)(a1 + 72) = v10;
        goto LABEL_25;
      }

      if (v25 < v21 || v26 >= v23) {
        break;
      }
      int v28 = *(unsigned __int8 *)(v27 + 32);
      ++v26;
      v27 += 80LL;
      if (!v28)
      {
        uint64_t v44 = v5;
        uint64_t v45 = v24;
        uint64_t v42 = v6;
        uint64_t v43 = v9;
        uint64_t v39 = *(void *)(v27 - 24);
        uint64_t v40 = *(void *)(v27 - 40);
        uint64_t v29 = *(void *)(v27 - 8);
        uint64_t v37 = *(void *)(v27 - 32);
        uint64_t v38 = *(void *)(v27 - 16);
        uint64_t v30 = *(void *)v27;
        uint64_t v31 = *(void *)(v27 + 8);
        uint64_t v32 = *(void *)(v27 + 16);
        unsigned __int8 v33 = *(_BYTE *)(v27 + 24);
        swift_bridgeObjectRetain();
        uint64_t v41 = v29;
        outlined copy of ParseError?(v29, v30, v31, v32, v33);
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v10 + 16) + 1LL,  1,  (char *)v10);
          uint64_t v10 = result;
        }

        unint64_t v35 = *(void *)(v10 + 16);
        unint64_t v34 = *(void *)(v10 + 24);
        uint64_t v24 = v45;
        if (v35 >= v34 >> 1)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v34 > 1),  v35 + 1,  1,  (char *)v10);
          uint64_t v24 = v45;
          uint64_t v10 = result;
        }

        *(void *)(v10 + 16) = v35 + 1;
        unint64_t v36 = v10 + 80 * v35;
        *(_BYTE *)(v36 + 32) = 0;
        *(void *)(v36 + 40) = v40;
        *(void *)(v36 + 48) = v37;
        *(void *)(v36 + 56) = v39;
        *(void *)(v36 + 64) = v38;
        *(void *)(v36 + 72) = v41;
        *(void *)(v36 + 80) = v30;
        *(void *)(v36 + 88) = v31;
        *(void *)(v36 + 96) = v32;
        *(_BYTE *)(v36 + 104) = v33;
        uint64_t v25 = v26;
        uint64_t v9 = v43;
        uint64_t v5 = v44;
        uint64_t v6 = v42;
        goto LABEL_13;
      }
    }

    __break(1u);
    goto LABEL_27;
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
LABEL_25:
  *(void *)a3 = v56;
  *(void *)(a3 + 8) = v15;
  *(_OWORD *)(a3 + 16) = v57;
  *(void *)(a3 + 32) = v58;
  *(void *)(a3 + 40) = v14;
  *(_OWORD *)(a3 + 48) = v55;
  return result;
}

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 32) = 1;
  return result;
}

uint64_t specialized Parser.tryEating<A>(_:)@<X0>(uint64_t *a1@<X0>, char **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v89 = a1[2];
  uint64_t v90 = *a1;
  uint64_t v88 = a1[3];
  char v87 = *((_BYTE *)a1 + 32);
  uint64_t v5 = a1[6];
  uint64_t v85 = a1[7];
  uint64_t v86 = a1[5];
  char v84 = *((_BYTE *)a1 + 64);
  uint64_t v6 = (char *)a1[9];
  uint64_t v92 = a1[1];
  swift_bridgeObjectRetain();
  uint64_t v91 = v5;
  swift_bridgeObjectRetain();
  BOOL v94 = v6;
  swift_bridgeObjectRetain();
  specialized Parser.tryEatPrefix(maxLength:_:)( 0LL,  1,  a1,  (uint64_t (*)(uint64_t, void, void *))specialized Source.peekPrefix(maxLength:_:),  &v98);
  uint64_t v7 = v99;
  if (!v99) {
    goto LABEL_6;
  }
  uint64_t v8 = v98;
  __int128 v83 = v100;
  uint64_t v9 = *a2;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a2 = v9;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    goto LABEL_68;
  }
  while (1)
  {
    unint64_t v12 = *((void *)v9 + 2);
    unint64_t v11 = *((void *)v9 + 3);
    if (v12 >= v11 >> 1)
    {
      uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v11 > 1),  v12 + 1,  1,  v9,  &demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Trivia>);
      *a2 = v9;
    }

    *((void *)v9 + 2) = v12 + 1;
    uint64_t v13 = &v9[32 * v12];
    *((void *)v13 + 4) = v8;
    *((void *)v13 + 5) = v7;
    *((_OWORD *)v13 + 3) = v83;
LABEL_6:
    Parser.lexNumber(_:)(1, (uint64_t)&v98);
    uint64_t v78 = v98;
    uint64_t v14 = v100;
    *(void *)&__int128 v83 = v99;
    uint64_t v15 = *((void *)&v100 + 1);
    char v16 = v101;
    specialized Parser.tryEatPrefix(maxLength:_:)( 0LL,  1,  a1,  (uint64_t (*)(uint64_t, void, void *))specialized Source.peekPrefix(maxLength:_:),  &v98);
    uint64_t v17 = v99;
    if (v99)
    {
      uint64_t v18 = v98;
      __int128 v75 = v100;
      uint64_t v19 = *a2;
      char v20 = swift_isUniquelyReferenced_nonNull_native();
      *a2 = v19;
      if ((v20 & 1) == 0)
      {
        uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v19 + 2) + 1LL,  1,  v19,  &demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Trivia>);
        *a2 = v19;
      }

      unint64_t v22 = *((void *)v19 + 2);
      unint64_t v21 = *((void *)v19 + 3);
      if (v22 >= v21 >> 1)
      {
        uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v21 > 1),  v22 + 1,  1,  v19,  &demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Trivia>);
        *a2 = v19;
      }

      *((void *)v19 + 2) = v22 + 1;
      int64_t v23 = &v19[32 * v22];
      *((void *)v23 + 4) = v18;
      *((void *)v23 + 5) = v17;
      *((_OWORD *)v23 + 3) = v75;
    }

    v24._uint64_t countAndFlagsBits = 44LL;
    v24._uint64_t object = (void *)0xE100000000000000LL;
    uint64_t v79 = v15;
    uint64_t v81 = v14;
    if (Parser.tryEat(_:)(v24))
    {
LABEL_13:
      int v25 = 0;
      int v26 = 1;
      goto LABEL_23;
    }

    if ((a1[7] & 0x10) != 0
      && (v27._uint64_t countAndFlagsBits = 46LL, v27._object = (void *)0xE100000000000000LL, Parser.tryEat(_:)(v27)))
    {
      v28._uint64_t countAndFlagsBits = 46LL;
      v28._uint64_t object = (void *)0xE100000000000000LL;
      if (!Parser.tryEat(_:)(v28))
      {
        __int128 v106 = xmmword_181005EF0;
        uint64_t v107 = 0LL;
        uint64_t v108 = 0LL;
        char v109 = 3;
        Parser.errorAtCurrentPosition(_:)(&v106);
      }

      v29._uint64_t countAndFlagsBits = 46LL;
      v29._uint64_t object = (void *)0xE100000000000000LL;
      if (Parser.tryEat(_:)(v29)) {
        goto LABEL_13;
      }
      v30._uint64_t countAndFlagsBits = 60LL;
      v30._uint64_t object = (void *)0xE100000000000000LL;
      if (!Parser.tryEat(_:)(v30))
      {
        __int128 v102 = xmmword_181005F00;
        uint64_t v103 = 0LL;
        uint64_t v104 = 0LL;
        char v105 = 3;
        Parser.errorAtCurrentPosition(_:)(&v102);
      }

      int v25 = 0;
      int v26 = 0;
    }

    else
    {
      int v26 = 0;
      int v25 = 1;
    }

uint64_t Parser.errorAtCurrentPosition(_:)(__int128 *a1)
{
  uint64_t v2 = v1;
  outlined init with take of ParseError(a1, (uint64_t)v19);
  uint64_t v4 = v19[2];
  uint64_t v17 = v19[1];
  uint64_t v18 = v19[0];
  uint64_t v5 = v19[3];
  char v6 = v20;
  uint64_t v7 = *(void *)(v1 + 16);
  ParseError.description.getter();
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v12 = *(void *)(v1 + 72);
  outlined retain of ParseError((uint64_t)a1);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v12 + 16) + 1LL,  1,  (char *)v12);
    uint64_t v12 = result;
  }

  unint64_t v15 = *(void *)(v12 + 16);
  unint64_t v14 = *(void *)(v12 + 24);
  if (v15 >= v14 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v14 > 1),  v15 + 1,  1,  (char *)v12);
    uint64_t v12 = result;
  }

  *(void *)(v12 + 16) = v15 + 1;
  unint64_t v16 = v12 + 80 * v15;
  *(_BYTE *)(v16 + 32) = 1;
  *(void *)(v16 + 40) = v9;
  *(void *)(v16 + 48) = v11;
  *(void *)(v16 + 56) = v7;
  *(void *)(v16 + 64) = v7;
  *(void *)(v16 + 72) = v18;
  *(void *)(v16 + 80) = v17;
  *(void *)(v16 + 88) = v4;
  *(void *)(v16 + 96) = v5;
  *(_BYTE *)(v16 + 104) = v6;
  *(void *)(v2 + 72) = v12;
  return result;
}

Swift::Bool __swiftcall Parser.tryEat(_:)(Swift::String a1)
{
  uint64_t object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v3 = String.subscript.getter();
  if ((v3 ^ v4) >> 14)
  {
    uint64_t v6 = Substring.subscript.getter();
    uint64_t v8 = v7;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    if (v6 == countAndFlagsBits && v8 == object)
    {
      swift_bridgeObjectRelease();
    }

    else
    {
      char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      Swift::Bool v5 = 0;
      if ((v9 & 1) == 0) {
        return v5;
      }
    }

    Swift::Bool v5 = 1;
    Parser.advance(_:)(1LL);
    return v5;
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t specialized Parser.tryEat<A>(sequence:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + 16);
  unint64_t v6 = *(void *)(v2 + 24);
  swift_bridgeObjectRetain();
  uint64_t v26 = v5;
  uint64_t v7 = String.subscript.getter();
  unint64_t v9 = v8;
  swift_bridgeObjectRelease();
  char v10 = specialized Sequence<>.starts<A>(with:)(a1, a2, v7, v9);
  swift_bridgeObjectRelease();
  if ((v10 & 1) == 0) {
    return v10 & 1;
  }
  unint64_t v11 = v6;
  if (String.count.getter() >= 1)
  {
    swift_bridgeObjectRetain();
    String.subscript.getter();
    swift_bridgeObjectRelease();
    unint64_t v12 = Substring.index(_:offsetBy:limitedBy:)();
    char v14 = v13;
    swift_bridgeObjectRelease();
    if ((v14 & 1) == 0)
    {
      if (v6 >> 14 >= v12 >> 14)
      {
LABEL_13:
        v27[2] = v12;
        v27[3] = v11;
        return v10 & 1;
      }

      __break(1u);
    }
  }

  strcpy((char *)v28, "UNREACHABLE: ");
  HIWORD(v28[1]) = -4864;
  v15._uint64_t countAndFlagsBits = 0xD000000000000015LL;
  v15._uint64_t object = (void *)0x80000001810093C0LL;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  uint64_t v16 = v28[0];
  uint64_t v17 = v28[1];
  uint64_t v18 = (char *)v27[9];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v18 + 2) + 1LL,  1,  v18);
  }
  unint64_t v20 = *((void *)v18 + 2);
  unint64_t v19 = *((void *)v18 + 3);
  if (v20 >= v19 >> 1) {
    uint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v19 > 1),  v20 + 1,  1,  v18);
  }
  *((void *)v18 + 2) = v20 + 1;
  unint64_t v21 = &v18[80 * v20];
  v21[32] = 0;
  *((void *)v21 + 5) = v16;
  *((void *)v21 + 6) = v17;
  *((void *)v21 + 7) = v26;
  *((void *)v21 + 8) = v26;
  *(_OWORD *)(v21 + 72) = 0u;
  *(_OWORD *)(v21 + 88) = 0u;
  v21[104] = -1;
  v27[9] = v18;
  swift_bridgeObjectRetain();
  String.subscript.getter();
  swift_bridgeObjectRelease();
  uint64_t v22 = Substring.distance(from:to:)();
  swift_bridgeObjectRelease();
  if (v22 < 1) {
    return v10 & 1;
  }
  swift_bridgeObjectRetain();
  String.subscript.getter();
  swift_bridgeObjectRelease();
  unint64_t v12 = Substring.index(_:offsetBy:limitedBy:)();
  char v24 = v23;
  uint64_t result = swift_bridgeObjectRelease();
  if ((v24 & 1) != 0) {
    return v10 & 1;
  }
  if (v11 >> 14 >= v12 >> 14) {
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

uint64_t specialized Parser.tryEatNonEmpty<A>(sequence:)(uint64_t a1, uint64_t a2)
{
  *(void *)&__int128 v10 = String.init<A>(_:)();
  *((void *)&v10 + 1) = v4;
  uint64_t v11 = 0LL;
  uint64_t v12 = 0LL;
  char v13 = 3;
  swift_bridgeObjectRetain();
  uint64_t v5 = String.subscript.getter();
  unint64_t v7 = v6;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v5 ^ v7) >= 0x4000)
  {
    swift_bridgeObjectRelease();
    char v8 = specialized Parser.tryEat<A>(sequence:)(a1, a2);
  }

  else
  {
    Parser.errorAtCurrentPosition(_:)(&v10);
    swift_bridgeObjectRelease();
    char v8 = 0;
  }

  return v8 & 1;
}

Swift::Void __swiftcall Parser.advance(_:)(Swift::Int a1)
{
  if (a1 >= 1)
  {
    unint64_t v2 = *(void *)(v1 + 24);
    swift_bridgeObjectRetain();
    String.subscript.getter();
    swift_bridgeObjectRelease();
    unint64_t v3 = Substring.index(_:offsetBy:limitedBy:)();
    char v5 = v4;
    swift_bridgeObjectRelease();
    if ((v5 & 1) == 0)
    {
      if (v2 >> 14 >= v3 >> 14)
      {
LABEL_8:
        *(void *)(v1 + 16) = v3;
        *(void *)(v1 + 24) = v2;
        return;
      }

      __break(1u);
    }
  }

  v6._uint64_t object = (void *)0x80000001810093C0LL;
  v6._uint64_t countAndFlagsBits = 0xD000000000000015LL;
  Parser.unreachable(_:)(v6);
  unint64_t v2 = *(void *)(v1 + 24);
  swift_bridgeObjectRetain();
  String.subscript.getter();
  swift_bridgeObjectRelease();
  uint64_t v7 = Substring.distance(from:to:)();
  swift_bridgeObjectRelease();
  if (v7 >= 1)
  {
    swift_bridgeObjectRetain();
    String.subscript.getter();
    swift_bridgeObjectRelease();
    unint64_t v3 = Substring.index(_:offsetBy:limitedBy:)();
    char v9 = v8;
    swift_bridgeObjectRelease();
    if ((v9 & 1) == 0)
    {
      if (v2 >> 14 < v3 >> 14)
      {
        __break(1u);
        return;
      }

      goto LABEL_8;
    }
  }

Swift::Void __swiftcall Parser.unreachable(_:)(Swift::String a1)
{
  uint64_t v2 = v1;
  uint64_t object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  uint64_t v5 = *(void *)(v1 + 16);
  swift_bridgeObjectRetain();
  strcpy((char *)v13, "UNREACHABLE: ");
  HIWORD(v13[1]) = -4864;
  v6._uint64_t countAndFlagsBits = countAndFlagsBits;
  v6._uint64_t object = object;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  uint64_t v7 = v13[0];
  uint64_t v8 = v13[1];
  char v9 = *(char **)(v1 + 72);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    char v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v9 + 2) + 1LL,  1,  v9);
  }
  unint64_t v11 = *((void *)v9 + 2);
  unint64_t v10 = *((void *)v9 + 3);
  if (v11 >= v10 >> 1) {
    char v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v10 > 1),  v11 + 1,  1,  v9);
  }
  *((void *)v9 + 2) = v11 + 1;
  uint64_t v12 = &v9[80 * v11];
  v12[32] = 0;
  *((void *)v12 + 5) = v7;
  *((void *)v12 + 6) = v8;
  *((void *)v12 + 7) = v5;
  *((void *)v12 + 8) = v5;
  *(_OWORD *)(v12 + 72) = 0u;
  *(_OWORD *)(v12 + 88) = 0u;
  v12[104] = -1;
  *(void *)(v2 + 72) = v9;
}

Swift::Bool __swiftcall Source.tryAdvance(_:)(Swift::Int a1)
{
  if (a1 < 1) {
    return 0;
  }
  unint64_t v2 = *(void *)(v1 + 24);
  swift_bridgeObjectRetain();
  String.subscript.getter();
  swift_bridgeObjectRelease();
  unint64_t v3 = Substring.index(_:offsetBy:limitedBy:)();
  char v5 = v4;
  Swift::Bool result = swift_bridgeObjectRelease();
  if ((v5 & 1) != 0) {
    return 0;
  }
  if (v2 >> 14 < v3 >> 14)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v1 + 16) = v3;
    *(void *)(v1 + 24) = v2;
    return 1;
  }

  return result;
}

Swift::String_optional __swiftcall Parser.tryEat()()
{
  uint64_t v0 = String.subscript.getter();
  if ((v0 ^ v1) >> 14)
  {
    uint64_t v2 = Substring.subscript.getter();
    unint64_t v3 = v4;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    Parser.advance(_:)(1LL);
  }

  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    uint64_t v2 = 0LL;
    unint64_t v3 = 0LL;
  }

  uint64_t v5 = v2;
  Swift::String v6 = v3;
  result.value._uint64_t object = v6;
  result.value._uint64_t countAndFlagsBits = v5;
  return result;
}

uint64_t specialized Parser.tryEat<A>(anyOf:)(uint64_t a1)
{
  uint64_t v2 = String.subscript.getter();
  if (!((v2 ^ v3) >> 14))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
LABEL_5:
    swift_bridgeObjectRelease();
    return 0LL;
  }

  uint64_t v4 = Substring.subscript.getter();
  uint64_t v6 = v5;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  uint64_t v7 = swift_bridgeObjectRelease();
  v11[0] = v4;
  v11[1] = v6;
  MEMORY[0x1895F8858](v7, v8);
  v10[2] = v11;
  if ((specialized Sequence.contains(where:)( partial apply for specialized closure #1 in Sequence<>.contains(_:),  (uint64_t)v10,  a1) & 1) == 0) {
    goto LABEL_5;
  }
  Parser.advance(_:)(1LL);
  return v4;
}

uint64_t Parser.eat(upToCount:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v5 = *(void *)(v2 + 16);
  unint64_t v6 = *(void *)(v2 + 24);
  swift_bridgeObjectRetain();
  unint64_t v27 = v6;
  unint64_t v7 = String.subscript.getter();
  unint64_t v9 = v8;
  uint64_t result = swift_bridgeObjectRelease();
  if (a1 < 0)
  {
    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  uint64_t result = Substring.index(_:offsetBy:limitedBy:)();
  if ((v11 & 1) != 0) {
    unint64_t v12 = v9;
  }
  else {
    unint64_t v12 = result;
  }
  if (v12 >> 14 < v7 >> 14) {
    goto LABEL_13;
  }
  Swift::String v28 = a2;
  uint64_t v13 = Substring.subscript.getter();
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  swift_bridgeObjectRelease();
  unint64_t v20 = v5;
  if (Substring.distance(from:to:)() < 1
    || (swift_bridgeObjectRetain(),
        String.subscript.getter(),
        swift_bridgeObjectRelease(),
        unint64_t v21 = Substring.index(_:offsetBy:limitedBy:)(),
        char v23 = v22,
        uint64_t result = swift_bridgeObjectRelease(),
        unint64_t v20 = v5,
        (v23 & 1) != 0))
  {
LABEL_10:
    uint64_t v24 = MEMORY[0x186E052CC](v13, v15, v17, v19);
    uint64_t v26 = v25;
    uint64_t result = swift_bridgeObjectRelease();
    if (v20 >> 14 >= v5 >> 14)
    {
      *Swift::String v28 = v24;
      v28[1] = v26;
      void v28[2] = v5;
      v28[3] = v20;
      return result;
    }

    goto LABEL_14;
  }

  if (v27 >> 14 >= v21 >> 14)
  {
    *(void *)(v2 + 16) = v21;
    *(void *)(v2 + 24) = v27;
    unint64_t v20 = v21;
    goto LABEL_10;
  }

LABEL_15:
  __break(1u);
  return result;
}

    uint64_t v15 = *(void *)(a1 + 16);
    if (v15 >> 14 < v5 >> 14)
    {
      __break(1u);
      goto LABEL_37;
    }

    uint64_t v16 = v39;
    uint64_t v17 = *(void *)&v37[32];
    uint64_t v18 = *(_OWORD *)&v37[16];
    uint64_t v19 = *(void *)v37;
LABEL_17:
    if (v14 >> 1 == 0xFFFFFFFF && v6 <= 1)
    {
      *(_OWORD *)a2 = xmmword_181005F10;
      *(_OWORD *)(a2 + 16) = 0u;
      *(_OWORD *)(a2 + 32) = 0u;
      *(_OWORD *)(a2 + 48) = 0u;
      *(_OWORD *)(a2 + 64) = 0u;
      *(_OWORD *)(a2 + 80) = 0u;
      *(_OWORD *)(a2 + 96) = 0u;
      return swift_bridgeObjectRelease();
    }

    unint64_t v35 = v16;
    unint64_t v36 = v18;
    if ((*(_BYTE *)(a1 + 56) & 1) != 0)
    {
      specialized Parser.tryEatPrefix(maxLength:_:)( 0LL,  1,  (void *)a1,  (uint64_t (*)(uint64_t, void, void *))specialized Source.peekPrefix(maxLength:_:),  (uint64_t *)v37);
      if (*(void *)&v37[8])
      {
        char v34 = *(void *)&v37[8];
        uint64_t v32 = *(void *)v37;
        unsigned __int8 v33 = *(_OWORD *)&v37[16];
        unint64_t v21 = v40;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v21 + 2) + 1LL,  1,  v21,  &demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Trivia>);
        }
        char v23 = *((void *)v21 + 2);
        char v22 = *((void *)v21 + 3);
        uint64_t v24 = v23 + 1;
        if (v23 >= v22 >> 1)
        {
          uint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v22 > 1),  v23 + 1,  1,  v21,  &demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Trivia>);
          uint64_t v24 = v23 + 1;
          unint64_t v21 = v31;
        }

        *((void *)v21 + 2) = v24;
        uint64_t v25 = &v21[32 * v23];
        *((void *)v25 + 4) = v32;
        *((void *)v25 + 5) = v34;
        *((_OWORD *)v25 + 3) = v33;
        uint64_t v40 = v21;
      }
    }

    uint64_t v2 = *(char **)(a1 + 16);
    v26._uint64_t countAndFlagsBits = 63LL;
    v26._uint64_t object = (void *)0xE100000000000000LL;
    uint64_t result = Parser.tryEat(_:)(v26);
    if ((result & 1) != 0)
    {
      unint64_t v27 = 1LL;
    }

    else
    {
      v28._uint64_t countAndFlagsBits = 43LL;
      v28._uint64_t object = (void *)0xE100000000000000LL;
      uint64_t result = Parser.tryEat(_:)(v28);
      unint64_t v27 = 2LL;
      if ((result & 1) == 0) {
        unint64_t v27 = 0LL;
      }
    }

    Swift::String v29 = *(void *)(a1 + 16);
LABEL_37:
    __break(1u);
LABEL_38:
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v2 + 2) + 1LL,  1,  v2,  &demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Trivia>);
  }

  Swift::String v30 = v40;
  *(void *)a2 = v19;
  *(void *)(a2 + 8) = v14;
  *(_OWORD *)(a2 + 16) = v36;
  *(void *)(a2 + 32) = v17;
  *(void *)(a2 + 40) = v6;
  *(_OWORD *)(a2 + 48) = v35;
  *(void *)(a2 + 64) = v5;
  *(void *)(a2 + 72) = v15;
  *(void *)(a2 + 80) = v27;
  *(void *)(a2 + 88) = v2;
  *(void *)(a2 + 96) = v29;
  *(void *)(a2 + 104) = v30;
  return result;
}

uint64_t specialized Parser.tryEatPrefix(maxLength:_:)@<X0>( uint64_t a1@<X0>, char a2@<W1>, void *a3@<X2>, uint64_t (*a4)(uint64_t, void, void *)@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v7 = a3[1];
  unint64_t v9 = a3[2];
  unint64_t v8 = a3[3];
  v25[0] = *a3;
  v25[1] = v7;
  v25[2] = v9;
  v25[3] = v8;
  uint64_t result = a4(a1, a2 & 1, v25);
  if (v13)
  {
    uint64_t v14 = v11;
    uint64_t v15 = v13;
    uint64_t v23 = v12;
    uint64_t v24 = result;
    unint64_t v16 = v9;
    if (Substring.distance(from:to:)() > 0)
    {
      swift_bridgeObjectRetain();
      String.subscript.getter();
      swift_bridgeObjectRelease();
      unint64_t v17 = Substring.index(_:offsetBy:limitedBy:)();
      char v19 = v18;
      uint64_t result = swift_bridgeObjectRelease();
      unint64_t v16 = v9;
      if ((v19 & 1) == 0)
      {
        if (v8 >> 14 < v17 >> 14)
        {
LABEL_11:
          __break(1u);
          return result;
        }

        a3[2] = v17;
        a3[3] = v8;
        unint64_t v16 = v17;
      }
    }

    uint64_t v20 = MEMORY[0x186E052CC](v24, v14, v23, v15);
    uint64_t v22 = v21;
    uint64_t result = swift_bridgeObjectRelease();
    if (v16 >> 14 >= v9 >> 14)
    {
      *a5 = v20;
      a5[1] = v22;
      a5[2] = v9;
      a5[3] = v16;
      return result;
    }

    __break(1u);
    goto LABEL_11;
  }

  *(_OWORD *)a5 = 0u;
  *((_OWORD *)a5 + 1) = 0u;
  return result;
}

uint64_t Parser.tryEatPrefix(maxLength:_:)@<X0>( uint64_t a1@<X0>, char a2@<W1>, uint64_t (*a3)(uint64_t)@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5 = v4;
  char v9 = a2 & 1;
  unint64_t v10 = *(void *)(v4 + 16);
  unint64_t v27 = *(void *)(v4 + 24);
  swift_bridgeObjectRetain();
  unint64_t v11 = Source.peekPrefix(maxLength:_:)(a1, v9, a3);
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  uint64_t result = swift_bridgeObjectRelease();
  if (v17)
  {
    uint64_t v26 = a4;
    unint64_t v19 = v10;
    if (Substring.distance(from:to:)() >= 1)
    {
      swift_bridgeObjectRetain();
      String.subscript.getter();
      swift_bridgeObjectRelease();
      unint64_t v20 = Substring.index(_:offsetBy:limitedBy:)();
      char v22 = v21;
      uint64_t result = swift_bridgeObjectRelease();
      unint64_t v19 = v10;
      if ((v22 & 1) == 0)
      {
        if (v27 >> 14 < v20 >> 14)
        {
LABEL_11:
          __break(1u);
          return result;
        }

        *(void *)(v5 + 16) = v20;
        *(void *)(v5 + 24) = v27;
        unint64_t v19 = v20;
      }
    }

    uint64_t v23 = MEMORY[0x186E052CC](v11, v13, v15, v17);
    uint64_t v25 = v24;
    uint64_t result = swift_bridgeObjectRelease();
    if (v19 >> 14 >= v10 >> 14)
    {
      *uint64_t v26 = v23;
      v26[1] = v25;
      void v26[2] = v10;
      v26[3] = v19;
      return result;
    }

    __break(1u);
    goto LABEL_11;
  }

  *(_OWORD *)a4 = 0u;
  *((_OWORD *)a4 + 1) = 0u;
  return result;
}

uint64_t Parser.expectASCII()@<X0>(uint64_t a1@<X8>)
{
  unint64_t v3 = *(void *)(v1 + 16);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v4 = String.subscript.getter();
  if (!((v4 ^ v5) >> 14))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    __int128 v11 = 0u;
    __int128 v12 = 0u;
    char v13 = 36;
    uint64_t result = Parser.errorAtCurrentPosition(_:)(&v11);
LABEL_7:
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    return result;
  }

  uint64_t v7 = Substring.subscript.getter();
  uint64_t v9 = v8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  Parser.advance(_:)(1LL);
  uint64_t result = Character.asciiValue.getter();
  if ((result & 0x100) != 0)
  {
    *(void *)&__int128 v11 = v7;
    *((void *)&v11 + 1) = v9;
    __int128 v12 = 0uLL;
    char v13 = 9;
    Parser.errorAtCurrentPosition(_:)(&v11);
    uint64_t result = swift_bridgeObjectRelease();
    goto LABEL_7;
  }

  unint64_t v10 = *(void *)(v1 + 16);
  if (v10 >> 14 < v3 >> 14)
  {
    __break(1u);
  }

  else
  {
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v9;
    *(void *)(a1 + 16) = v3;
    *(void *)(a1 + 24) = v10;
  }

  return result;
}

uint64_t Character.isOctalDigit.getter(uint64_t a1, uint64_t a2)
{
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if ((result & 1) == 0)
  {
    if (a1 != 48 || a2 != 0xE100000000000000LL)
    {
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        char v5 = 0;
        return v5 & 1;
      }

      if (a1 == 55 && a2 == 0xE100000000000000LL)
      {
        char v5 = 1;
        return v5 & 1;
      }
    }

    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)() ^ 1;
    return v5 & 1;
  }

  __break(1u);
  return result;
}

BOOL specialized implicit closure #3 in RadixKind.characterFilter.getter()
{
  return (v0 & 1) == 0;
}

uint64_t Parser.validateUnicodeScalar(_:_:)@<X0>(uint64_t *a1@<X0>, unsigned __int8 a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  uint64_t v7 = a1[2];
  uint64_t v119 = a1[3];
  uint64_t v8 = HIBYTE(v6) & 0xF;
  uint64_t v9 = *a1 & 0xFFFFFFFFFFFFLL;
  if ((v6 & 0x2000000000000000LL) != 0) {
    uint64_t v10 = HIBYTE(v6) & 0xF;
  }
  else {
    uint64_t v10 = v5 & 0xFFFFFFFFFFFFLL;
  }
  if (!v10)
  {
LABEL_9:
    uint64_t v118 = a3;
    uint64_t v14 = a2;
    unint64_t v15 = v6;
    uint64_t v16 = v5;
    unint64_t v121 = v5;
    uint64_t v122 = v15;
    uint64_t v123 = a2;
    uint64_t v124 = 0LL;
    char v125 = 2;
    ParseError.description.getter();
    uint64_t v18 = v17;
    uint64_t v20 = v19;
    uint64_t v21 = *(void *)(v120 + 72);
    unint64_t v22 = v15;
    swift_bridgeObjectRetain();
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v24 = v7;
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v21 + 16) + 1LL,  1,  (char *)v21);
      uint64_t v21 = result;
    }

    unint64_t v26 = *(void *)(v21 + 16);
    unint64_t v25 = *(void *)(v21 + 24);
    if (v26 >= v25 >> 1)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v25 > 1),  v26 + 1,  1,  (char *)v21);
      uint64_t v21 = result;
    }

    LODWORD(v27) = 0;
    *(void *)(v21 + 16) = v26 + 1;
    unint64_t v28 = v21 + 80 * v26;
    char v29 = 1;
    *(_BYTE *)(v28 + 32) = 1;
    *(void *)(v28 + 40) = v18;
    *(void *)(v28 + 48) = v20;
    uint64_t v7 = v24;
    uint64_t v30 = v119;
    *(void *)(v28 + 56) = v24;
    *(void *)(v28 + 64) = v119;
    *(void *)(v28 + 72) = v16;
    *(void *)(v28 + 80) = v22;
    *(void *)(v28 + 88) = v14;
    *(void *)(v28 + 96) = 0LL;
    *(_BYTE *)(v28 + 104) = 2;
    *(void *)(v120 + 72) = v21;
    a3 = v118;
    goto LABEL_14;
  }

  __int128 v11 = off_189B47150[(char)a2];
  unint64_t v121 = *a1;
  uint64_t v122 = v6;
  uint64_t v123 = 0LL;
  uint64_t v124 = v10;
  swift_bridgeObjectRetain();
  while (1)
  {
    Swift::String_optional v12 = String.Iterator.next()();
    if (!v12.value._object) {
      break;
    }
    char v13 = ((uint64_t (*)(uint64_t))v11)(v12.value._countAndFlagsBits);
    swift_bridgeObjectRelease();
    if ((v13 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      goto LABEL_9;
    }
  }

  uint64_t result = swift_bridgeObjectRelease();
  int v39 = a2;
  if (a2)
  {
    BOOL v40 = a2 != 1;
    if (v39 == 1) {
      uint64_t v41 = 10LL;
    }
    else {
      uint64_t v41 = 16LL;
    }
    if ((v6 & 0x1000000000000000LL) == 0)
    {
LABEL_29:
      if ((v6 & 0x2000000000000000LL) == 0)
      {
        if ((v5 & 0x1000000000000000LL) != 0)
        {
          uint64_t result = (v6 & 0xFFFFFFFFFFFFFFFLL) + 32;
        }

        else
        {
          uint64_t result = _StringObject.sharedUTF8.getter();
          uint64_t v9 = v117;
        }

        uint64_t v30 = v119;
        int v42 = *(unsigned __int8 *)result;
        if (v42 == 43)
        {
          if (v9 >= 1)
          {
            uint64_t v43 = v9 - 1;
            if (v9 != 1)
            {
              unsigned int v67 = v41 + 55;
              unsigned int v68 = v41 + 87;
              if (v40)
              {
                unsigned int v69 = 58;
              }

              else
              {
                unsigned int v68 = 97;
                unsigned int v67 = 65;
                unsigned int v69 = v41 + 48;
              }

              if (result)
              {
                unsigned int v47 = 0;
                uint64_t v70 = (unsigned __int8 *)(result + 1);
                while (1)
                {
                  unsigned int v71 = *v70;
                  if (v71 < 0x30 || v71 >= v69)
                  {
                    if (v71 < 0x41 || v71 >= v67)
                    {
                      if (v71 < 0x61 || v71 >= v68) {
                        goto LABEL_170;
                      }
                      char v75 = -87;
                    }

                    else
                    {
                      char v75 = -55;
                    }
                  }

                  else
                  {
                    char v75 = -48;
                  }

                  unint64_t v76 = v47 * (unint64_t)v41;
                  if ((v76 & 0xFFFFFFFF00000000LL) != 0) {
                    goto LABEL_170;
                  }
                  unsigned __int8 v77 = v75 + v71;
                  BOOL v50 = __CFADD__((_DWORD)v76, v77);
                  unsigned int v47 = v76 + v77;
                  if (v50) {
                    goto LABEL_170;
                  }
                  ++v70;
                  if (!--v43) {
                    goto LABEL_197;
                  }
                }
              }

              goto LABEL_143;
            }

            goto LABEL_170;
          }

          goto LABEL_207;
        }

        if (v42 != 45)
        {
          if (v9)
          {
            unsigned int v78 = v41 + 55;
            unsigned int v79 = v41 + 87;
            if (v40)
            {
              unsigned int v80 = 58;
            }

            else
            {
              unsigned int v79 = 97;
              unsigned int v78 = 65;
              unsigned int v80 = v41 + 48;
            }

            if (result)
            {
              unsigned int v47 = 0;
              while (1)
              {
                unsigned int v81 = *(unsigned __int8 *)result;
                if (v81 < 0x30 || v81 >= v80)
                {
                  if (v81 < 0x41 || v81 >= v78)
                  {
                    if (v81 < 0x61 || v81 >= v79) {
                      goto LABEL_170;
                    }
                    char v85 = -87;
                  }

                  else
                  {
                    char v85 = -55;
                  }
                }

                else
                {
                  char v85 = -48;
                }

                unint64_t v86 = v47 * (unint64_t)v41;
                if ((v86 & 0xFFFFFFFF00000000LL) != 0) {
                  goto LABEL_170;
                }
                unsigned __int8 v87 = v85 + v81;
                BOOL v50 = __CFADD__((_DWORD)v86, v87);
                unsigned int v47 = v86 + v87;
                if (v50) {
                  goto LABEL_170;
                }
                ++result;
                if (!--v9) {
                  goto LABEL_144;
                }
              }
            }

            goto LABEL_143;
          }

LABEL_170:
          unsigned int v47 = 0;
          LOBYTE(v43) = 1;
          goto LABEL_197;
        }

        if (v9 >= 1)
        {
          uint64_t v43 = v9 - 1;
          if (v9 != 1)
          {
            unsigned int v44 = v41 + 55;
            unsigned int v45 = v41 + 87;
            if (v40)
            {
              unsigned int v46 = 58;
            }

            else
            {
              unsigned int v45 = 97;
              unsigned int v44 = 65;
              unsigned int v46 = v41 + 48;
            }

            if (result)
            {
              unsigned int v47 = 0;
              uint64_t v48 = (unsigned __int8 *)(result + 1);
              while (1)
              {
                unsigned int v49 = *v48;
                BOOL v50 = v49 < 0x30 || v49 >= v46;
                if (v50)
                {
                  if (v49 < 0x41 || v49 >= v44)
                  {
                    if (v49 < 0x61 || v49 >= v45) {
                      goto LABEL_170;
                    }
                    char v53 = -87;
                  }

                  else
                  {
                    char v53 = -55;
                  }
                }

                else
                {
                  char v53 = -48;
                }

                unint64_t v54 = v47 * (unint64_t)v41;
                if ((v54 & 0xFFFFFFFF00000000LL) != 0) {
                  goto LABEL_170;
                }
                unsigned __int8 v55 = v53 + v49;
                BOOL v50 = v54 >= v55;
                unsigned int v47 = v54 - v55;
                if (!v50) {
                  goto LABEL_170;
                }
                ++v48;
                if (!--v43) {
                  goto LABEL_197;
                }
              }
            }

LABEL_143:
            unsigned int v47 = 0;
LABEL_144:
            LOBYTE(v43) = 0;
LABEL_197:
            if ((v43 & 1) == 0)
            {
              char v29 = 0;
              LODWORD(v27) = v47;
              goto LABEL_14;
            }

LABEL_195:
      unsigned int v47 = 0;
      LOBYTE(v43) = 1;
LABEL_196:
      uint64_t v30 = v119;
      goto LABEL_197;
    }
  }

  else
  {
    BOOL v40 = 0;
    uint64_t v41 = 8LL;
    if ((v6 & 0x1000000000000000LL) == 0) {
      goto LABEL_29;
    }
  }

  swift_bridgeObjectRetain();
  uint64_t v27 = specialized _parseInteger<A, B>(ascii:radix:)(v5, v6, v41);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v30 = v119;
  if ((v27 & 0x100000000LL) != 0) {
    goto LABEL_199;
  }
  char v29 = 0;
LABEL_14:
  if ((v29 & 1) != 0)
  {
    LODWORD(v27) = 0;
  }

  else if (WORD1(v27) > 0x10u || (v27 & 0xFFFFF800) == 0xD800)
  {
    uint64_t v31 = a3;
    unint64_t v121 = 0LL;
    uint64_t v122 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(25LL);
    swift_bridgeObjectRelease();
    unint64_t v121 = 0xD000000000000017LL;
    uint64_t v122 = 0x8000000181009530LL;
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v32._uint64_t countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    uint64_t v27 = v121;
    uint64_t v33 = v122;
    char v34 = *(char **)(v120 + 72);
    swift_bridgeObjectRetain_n();
    uint64_t v35 = v7;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      char v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v34 + 2) + 1LL,  1,  v34);
    }
    unint64_t v37 = *((void *)v34 + 2);
    unint64_t v36 = *((void *)v34 + 3);
    if (v37 >= v36 >> 1) {
      char v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v36 > 1),  v37 + 1,  1,  v34);
    }
    *((void *)v34 + 2) = v37 + 1;
    uint64_t v38 = &v34[80 * v37];
    v38[32] = 1;
    *((void *)v38 + 5) = v27;
    *((void *)v38 + 6) = v33;
    uint64_t v7 = v35;
    *((void *)v38 + 7) = v35;
    *((void *)v38 + 8) = v30;
    *((void *)v38 + 9) = v27;
    *((void *)v38 + 10) = v33;
    *((void *)v38 + 11) = 0LL;
    *((void *)v38 + 12) = 0LL;
    v38[104] = 4;
    uint64_t result = swift_bridgeObjectRelease();
    LODWORD(v27) = 0;
    *(void *)(v120 + 72) = v34;
    a3 = v31;
  }

  *(_DWORD *)a3 = v27;
  *(void *)(a3 + 8) = v7;
  *(void *)(a3 + 16) = v30;
  return result;
}

unsigned __int8 *Parser.lexNumber(_:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t result = (unsigned __int8 *)Parser.tryEatPrefix(maxLength:_:)( 0LL,  1,  (uint64_t (*)(uint64_t))off_189B47150[a1],  &v96);
  unint64_t v6 = (void *)v97;
  if (!v97)
  {
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_BYTE *)(a2 + 32) = 1;
    return result;
  }

  uint64_t v7 = v96;
  if (a1)
  {
    if (a1 == 1)
    {
      int v8 = 0;
      uint64_t v9 = 10LL;
    }

    else
    {
      int v8 = 1;
      uint64_t v9 = 16LL;
    }
  }

  else
  {
    int v8 = 0;
    uint64_t v9 = 8LL;
  }

  uint64_t v11 = v98;
  uint64_t v10 = v99;
  uint64_t v12 = HIBYTE(v97) & 0xF;
  uint64_t v13 = v96 & 0xFFFFFFFFFFFFLL;
  if ((v97 & 0x2000000000000000LL) != 0) {
    uint64_t v14 = HIBYTE(v97) & 0xF;
  }
  else {
    uint64_t v14 = v96 & 0xFFFFFFFFFFFFLL;
  }
  if (v14)
  {
    if ((v97 & 0x1000000000000000LL) == 0)
    {
      if ((v97 & 0x2000000000000000LL) != 0)
      {
        v97 &= 0xFFFFFFFFFFFFFFuLL;
        if (v96 == 43)
        {
          if (v12)
          {
            if (--v12)
            {
              uint64_t v19 = 0LL;
              unsigned int v60 = v9 + 48;
              unsigned int v61 = v9 + 55;
              unsigned int v62 = v9 + 87;
              if (v8)
              {
                unsigned int v60 = 58;
              }

              else
              {
                unsigned int v62 = 97;
                unsigned int v61 = 65;
              }

              int v63 = (unsigned __int8 *)&v96 + 1;
              while (1)
              {
                unsigned int v64 = *v63;
                if (v64 < 0x30 || v64 >= v60)
                {
                  if (v64 < 0x41 || v64 >= v61)
                  {
                    if (v64 < 0x61 || v64 >= v62) {
                      goto LABEL_173;
                    }
                    char v68 = -87;
                  }

                  else
                  {
                    char v68 = -55;
                  }
                }

                else
                {
                  char v68 = -48;
                }

                uint64_t v69 = v19 * v9;
                unsigned __int8 v70 = v64 + v68;
                uint64_t v19 = v69 + v70;
                if (__OFADD__(v69, v70)) {
                  goto LABEL_173;
                }
                ++v63;
                if (!--v12) {
                  goto LABEL_174;
                }
              }
            }

            goto LABEL_173;
          }

LABEL_186:
          __break(1u);
          return result;
        }

        if (v96 != 45)
        {
          if (v12)
          {
            uint64_t v19 = 0LL;
            unsigned int v71 = v9 + 48;
            unsigned int v72 = v9 + 55;
            unsigned int v73 = v9 + 87;
            if (v8)
            {
              unsigned int v71 = 58;
            }

            else
            {
              unsigned int v73 = 97;
              unsigned int v72 = 65;
            }

            uint64_t v74 = &v96;
            while (1)
            {
              unsigned int v75 = *(unsigned __int8 *)v74;
              if (v75 < 0x30 || v75 >= v71)
              {
                if (v75 < 0x41 || v75 >= v72)
                {
                  if (v75 < 0x61 || v75 >= v73) {
                    goto LABEL_173;
                  }
                  char v79 = -87;
                }

                else
                {
                  char v79 = -55;
                }
              }

              else
              {
                char v79 = -48;
              }

              uint64_t v80 = v19 * v9;
              unsigned __int8 v81 = v75 + v79;
              uint64_t v19 = v80 + v81;
              if (__OFADD__(v80, v81)) {
                goto LABEL_173;
              }
              uint64_t v74 = (uint64_t *)((char *)v74 + 1);
              if (!--v12) {
                goto LABEL_174;
              }
            }
          }

          goto LABEL_173;
        }

        if (v12)
        {
          if (--v12)
          {
            uint64_t v19 = 0LL;
            unsigned int v28 = v9 + 48;
            unsigned int v29 = v9 + 55;
            unsigned int v30 = v9 + 87;
            if (v8)
            {
              unsigned int v28 = 58;
            }

            else
            {
              unsigned int v30 = 97;
              unsigned int v29 = 65;
            }

            uint64_t v31 = (unsigned __int8 *)&v96 + 1;
            while (1)
            {
              unsigned int v32 = *v31;
              if (v32 < 0x30 || v32 >= v28)
              {
                if (v32 < 0x41 || v32 >= v29)
                {
                  if (v32 < 0x61 || v32 >= v30) {
                    goto LABEL_173;
                  }
                  char v36 = -87;
                }

                else
                {
                  char v36 = -55;
                }
              }

              else
              {
                char v36 = -48;
              }

              uint64_t v37 = v19 * v9;
              unsigned __int8 v38 = v32 + v36;
              uint64_t v19 = v37 - v38;
              if (__OFSUB__(v37, v38)) {
                goto LABEL_173;
              }
              ++v31;
              if (!--v12) {
                goto LABEL_174;
              }
            }
          }

          goto LABEL_173;
        }
      }

      else
      {
        if ((v96 & 0x1000000000000000LL) != 0) {
          uint64_t result = (unsigned __int8 *)((v97 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }
        else {
          uint64_t result = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
        }
        int v15 = *result;
        if (v15 == 43)
        {
          if (v13 >= 1)
          {
            uint64_t v12 = v13 - 1;
            if (v13 != 1)
            {
              unsigned int v39 = v9 + 48;
              unsigned int v40 = v9 + 55;
              unsigned int v41 = v9 + 87;
              if (v8)
              {
                unsigned int v39 = 58;
              }

              else
              {
                unsigned int v41 = 97;
                unsigned int v40 = 65;
              }

              if (result)
              {
                uint64_t v19 = 0LL;
                int v42 = result + 1;
                while (1)
                {
                  unsigned int v43 = *v42;
                  if (v43 < 0x30 || v43 >= v39)
                  {
                    if (v43 < 0x41 || v43 >= v40)
                    {
                      if (v43 < 0x61 || v43 >= v41) {
                        goto LABEL_173;
                      }
                      char v47 = -87;
                    }

                    else
                    {
                      char v47 = -55;
                    }
                  }

                  else
                  {
                    char v47 = -48;
                  }

                  uint64_t v48 = v19 * v9;
                  unsigned __int8 v49 = v43 + v47;
                  uint64_t v19 = v48 + v49;
                  if (__OFADD__(v48, v49)) {
                    goto LABEL_173;
                  }
                  ++v42;
                  if (!--v12) {
                    goto LABEL_174;
                  }
                }
              }

              goto LABEL_122;
            }

            goto LABEL_173;
          }

          goto LABEL_185;
        }

        if (v15 != 45)
        {
          if (v13)
          {
            unsigned int v50 = v9 + 48;
            unsigned int v51 = v9 + 55;
            unsigned int v52 = v9 + 87;
            if (v8)
            {
              unsigned int v50 = 58;
            }

            else
            {
              unsigned int v52 = 97;
              unsigned int v51 = 65;
            }

            if (result)
            {
              uint64_t v19 = 0LL;
              while (1)
              {
                unsigned int v53 = *result;
                if (v53 < 0x30 || v53 >= v50)
                {
                  if (v53 < 0x41 || v53 >= v51)
                  {
                    if (v53 < 0x61 || v53 >= v52) {
                      goto LABEL_173;
                    }
                    char v57 = -87;
                  }

                  else
                  {
                    char v57 = -55;
                  }
                }

                else
                {
                  char v57 = -48;
                }

                uint64_t v58 = v19 * v9;
                unsigned __int8 v59 = v53 + v57;
                uint64_t v19 = v58 + v59;
                if (__OFADD__(v58, v59)) {
                  goto LABEL_173;
                }
                ++result;
                if (!--v13) {
                  goto LABEL_123;
                }
              }
            }

            goto LABEL_122;
          }

LABEL_173:
          uint64_t v19 = 0LL;
          LOBYTE(v12) = 1;
          goto LABEL_174;
        }

        if (v13 >= 1)
        {
          uint64_t v12 = v13 - 1;
          if (v13 != 1)
          {
            unsigned int v16 = v9 + 48;
            unsigned int v17 = v9 + 55;
            unsigned int v18 = v9 + 87;
            if (v8)
            {
              unsigned int v16 = 58;
            }

            else
            {
              unsigned int v18 = 97;
              unsigned int v17 = 65;
            }

            if (result)
            {
              uint64_t v19 = 0LL;
              uint64_t v20 = result + 1;
              while (1)
              {
                unsigned int v21 = *v20;
                if (v21 < 0x30 || v21 >= v16)
                {
                  if (v21 < 0x41 || v21 >= v17)
                  {
                    if (v21 < 0x61 || v21 >= v18) {
                      goto LABEL_173;
                    }
                    char v25 = -87;
                  }

                  else
                  {
                    char v25 = -55;
                  }
                }

                else
                {
                  char v25 = -48;
                }

                uint64_t v26 = v19 * v9;
                unsigned __int8 v27 = v21 + v25;
                uint64_t v19 = v26 - v27;
                if (__OFSUB__(v26, v27)) {
                  goto LABEL_173;
                }
                ++v20;
                if (!--v12) {
                  goto LABEL_174;
                }
              }
            }

LABEL_122:
            uint64_t v19 = 0LL;
LABEL_123:
            LOBYTE(v12) = 0;
LABEL_174:
            if ((v12 & 1) == 0)
            {
LABEL_175:
              uint64_t result = (unsigned __int8 *)swift_bridgeObjectRelease();
              *(void *)a2 = v19;
              *(void *)(a2 + 8) = 0LL;
              *(void *)(a2 + 16) = v11;
              *(void *)(a2 + 24) = v10;
              *(_BYTE *)(a2 + 32) = 0;
              return result;
            }

            goto LABEL_177;
          }

          goto LABEL_173;
        }

        __break(1u);
      }

      __break(1u);
LABEL_185:
      __break(1u);
      goto LABEL_186;
    }

    swift_bridgeObjectRetain();
    uint64_t v19 = (uint64_t)specialized _parseInteger<A, B>(ascii:radix:)(v7, (uint64_t)v6, v9);
    char v83 = v82;
    swift_bridgeObjectRelease();
    if ((v83 & 1) == 0) {
      goto LABEL_175;
    }
  }

LABEL_177:
  uint64_t v95 = a2;
  uint64_t v84 = v11;
  uint64_t v96 = 0LL;
  unint64_t v97 = 0xE000000000000000LL;
  swift_bridgeObjectRetain();
  _StringGuts.grow(_:)(19LL);
  swift_bridgeObjectRelease();
  uint64_t v96 = 0xD000000000000011LL;
  unint64_t v97 = 0x8000000181009020LL;
  uint64_t v85 = v7;
  v86._uint64_t countAndFlagsBits = v7;
  v86._uint64_t object = v6;
  String.append(_:)(v86);
  uint64_t v87 = v96;
  unint64_t v88 = v97;
  uint64_t v89 = v2;
  unsigned int v90 = *(char **)(v2 + 72);
  swift_bridgeObjectRetain();
  uint64_t v91 = v10;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unsigned int v90 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v90 + 2) + 1LL,  1,  v90);
  }
  unint64_t v93 = *((void *)v90 + 2);
  unint64_t v92 = *((void *)v90 + 3);
  if (v93 >= v92 >> 1) {
    unsigned int v90 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v92 > 1),  v93 + 1,  1,  v90);
  }
  *((void *)v90 + 2) = v93 + 1;
  BOOL v94 = &v90[80 * v93];
  v94[32] = 1;
  *((void *)v94 + 5) = v87;
  *((void *)v94 + 6) = v88;
  *((void *)v94 + 7) = v84;
  *((void *)v94 + 8) = v91;
  *((void *)v94 + 9) = v85;
  *((void *)v94 + 10) = v6;
  *((void *)v94 + 11) = 0LL;
  *((void *)v94 + 12) = 0LL;
  v94[104] = 0;
  uint64_t result = (unsigned __int8 *)swift_bridgeObjectRelease_n();
  *(void *)(v89 + 72) = v90;
  *(_OWORD *)uint64_t v95 = xmmword_181005F20;
  *(void *)(v95 + 16) = v84;
  *(void *)(v95 + 24) = v91;
  *(_BYTE *)(v95 + 32) = 0;
  return result;
}

uint64_t Parser.expectUnicodeScalar(numDigits:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  unint64_t v6 = *(void *)(v2 + 16);
  Parser.eat(upToCount:)(a1, &v23);
  uint64_t v8 = v23;
  uint64_t v7 = v24;
  uint64_t v10 = v25;
  uint64_t v9 = v26;
  swift_bridgeObjectRetain();
  uint64_t v11 = String.count.getter();
  swift_bridgeObjectRelease();
  if (v11 == a1) {
    goto LABEL_6;
  }
  uint64_t v23 = v8;
  uint64_t v24 = v7;
  uint64_t v25 = a1;
  uint64_t v26 = 0LL;
  char v27 = 1;
  swift_bridgeObjectRetain();
  ParseError.description.getter();
  uint64_t v19 = v13;
  uint64_t v20 = v12;
  uint64_t v11 = *(void *)(v3 + 72);
  swift_bridgeObjectRetain();
  uint64_t v21 = a2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_9;
  }
  while (1)
  {
    unint64_t v15 = *(void *)(v11 + 16);
    unint64_t v14 = *(void *)(v11 + 24);
    if (v15 >= v14 >> 1) {
      uint64_t v11 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v14 > 1),  v15 + 1,  1,  (char *)v11);
    }
    *(void *)(v11 + 16) = v15 + 1;
    uint64_t v16 = v11 + 80 * v15;
    *(_BYTE *)(v16 + 32) = 1;
    *(void *)(v16 + 40) = v20;
    *(void *)(v16 + 48) = v19;
    *(void *)(v16 + 56) = v10;
    *(void *)(v16 + 64) = v9;
    *(void *)(v16 + 72) = v8;
    *(void *)(v16 + 80) = v7;
    *(void *)(v16 + 88) = a1;
    *(void *)(v16 + 96) = 0LL;
    *(_BYTE *)(v16 + 104) = 1;
    swift_bridgeObjectRelease();
    *(void *)(v3 + 72) = v11;
    a2 = v21;
LABEL_6:
    unint64_t v17 = *(void *)(v3 + 16);
    if (v17 >> 14 >= v6 >> 14) {
      break;
    }
    __break(1u);
LABEL_9:
    uint64_t v11 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v11 + 16) + 1LL,  1,  (char *)v11);
  }

  v22[0] = v8;
  v22[1] = v7;
  v22[2] = v6;
  v22[3] = v17;
  Parser.validateUnicodeScalar(_:_:)(v22, 2u, a2);
  return swift_bridgeObjectRelease();
}

uint64_t Parser.expectUnicodeScalarSequence(eating:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = v4;
  unsigned int v45 = (char *)MEMORY[0x18961AFE8];
  specialized Parser.tryEatPrefix(maxLength:_:)( 0LL,  1,  v4,  (uint64_t (*)(uint64_t, void, void *))specialized Source.peekPrefix(maxLength:_:),  (uint64_t *)&v49);
  unint64_t v8 = *((void *)&v49 + 1);
  if (*((void *)&v49 + 1))
  {
    unint64_t v9 = v49;
    __int128 v44 = v50;
    unint64_t v3 = MEMORY[0x18961AFE8];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      goto LABEL_45;
    }
    goto LABEL_3;
  }

LABEL_25:
    swift_bridgeObjectRelease();
    if (v9 >> 14 < v40 >> 14) {
      goto LABEL_44;
    }
    uint64_t v25 = HIBYTE(*((void *)&v49 + 1)) & 0xFLL;
    if ((*((void *)&v49 + 1) & 0x2000000000000000LL) == 0) {
      uint64_t v25 = v49 & 0xFFFFFFFFFFFFLL;
    }
    if (!v25) {
      break;
    }
    *(void *)&__int128 v50 = v40;
    *((void *)&v50 + 1) = v9;
    Parser.validateUnicodeScalar(_:_:)((uint64_t *)&v49, 2u, (uint64_t)&v46);
    swift_bridgeObjectRelease();
    int v26 = v46;
    unint64_t v8 = *((void *)&v46 + 1);
    uint64_t v27 = v47;
    unsigned int v28 = v39;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unsigned int v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v39 + 2) + 1LL,  1,  v39);
    }
    unint64_t v30 = *((void *)v28 + 2);
    unint64_t v29 = *((void *)v28 + 3);
    unint64_t v3 = v30 + 1;
    if (v30 >= v29 >> 1) {
      unsigned int v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v29 > 1),  v30 + 1,  1,  v28);
    }
    *((void *)v28 + 2) = v3;
    unsigned int v39 = v28;
    uint64_t v31 = &v28[24 * v30];
    *((_DWORD *)v31 + 8) = v26;
    *((void *)v31 + 5) = v8;
    *((void *)v31 + 6) = v27;
  }

  swift_bridgeObjectRelease();
  v32._uint64_t countAndFlagsBits = a1;
  v32._uint64_t object = (void *)a2;
  if (!Parser.tryEat(_:)(v32))
  {
    *(void *)&__int128 v49 = a1;
    *((void *)&v49 + 1) = a2;
    __int128 v50 = 0uLL;
    char v51 = 3;
    Parser.errorAtCurrentPosition(_:)(&v49);
  }

  uint64_t v33 = *((void *)v39 + 2);
  if (v33 == 1)
  {
    __int128 v35 = *(_OWORD *)(v39 + 40);
    *(_DWORD *)a3 = *((_DWORD *)v39 + 8);
    *(_OWORD *)(a3 + 8) = v35;
    goto LABEL_40;
  }

  if (!v33)
  {
    __int128 v46 = xmmword_181005F30;
    __int128 v47 = xmmword_181005EE0;
    char v48 = 2;
    Parser.errorAtCurrentPosition(_:)(&v46);
    uint64_t v34 = *((void *)v5 + 2);
    *(_DWORD *)a3 = 0;
    *(void *)(a3 + 8) = v34;
    *(void *)(a3 + 16) = v34;
LABEL_40:
    type metadata accessor for AST.Atom.Kind(0LL);
    swift_storeEnumTagMultiPayload();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  uint64_t v37 = v45;
  *(void *)a3 = v39;
  *(void *)(a3 + 8) = v37;
  type metadata accessor for AST.Atom.Kind(0LL);
  return swift_storeEnumTagMultiPayload();
}

uint64_t closure #1 in Parser.expectUnicodeScalarSequence(eating:)( void *a1, uint64_t a2, uint64_t a3, char **a4)
{
  uint64_t v7 = String.subscript.getter();
  unint64_t v9 = v8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v7 ^ v9) < 0x4000) {
    return 1LL;
  }
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v10 = String.subscript.getter();
  if (!((v10 ^ v11) >> 14))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    goto LABEL_4;
  }

  uint64_t v19 = Substring.subscript.getter();
  uint64_t v21 = v20;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  if (v19 == a2 && v21 == a3)
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v22 & 1) != 0) {
    return 1LL;
  }
LABEL_4:
  specialized Parser.tryEatPrefix(maxLength:_:)( 0LL,  1,  a1,  (uint64_t (*)(uint64_t, void, void *))specialized Source.peekPrefix(maxLength:_:),  &v26);
  uint64_t v12 = v27;
  if (v27)
  {
    uint64_t v13 = v26;
    __int128 v24 = v28;
    unint64_t v14 = *a4;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *a4 = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v14 + 2) + 1LL,  1,  v14,  &demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Trivia>);
      *a4 = v14;
    }

    unint64_t v17 = *((void *)v14 + 2);
    unint64_t v16 = *((void *)v14 + 3);
    if (v17 >= v16 >> 1)
    {
      unint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v16 > 1),  v17 + 1,  1,  v14,  &demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Trivia>);
      *a4 = v14;
    }

    *((void *)v14 + 2) = v17 + 1;
    uint64_t v18 = &v14[32 * v17];
    *((void *)v18 + 4) = v13;
    *((void *)v18 + 5) = v12;
    *((_OWORD *)v18 + 3) = v24;
    return 1LL;
  }

  return 0LL;
}

uint64_t specialized Parser.lexUntil(_:)@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  unint64_t v6 = a1;
  unint64_t v8 = a1[2];
  if ((specialized Parser.tryEatNonEmpty<A>(sequence:)(a2, a3) & 1) != 0)
  {
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t v10 = v8;
LABEL_27:
    if (v10 >> 14 < v8 >> 14) {
      goto LABEL_31;
    }
    *a4 = 0LL;
    a4[1] = 0xE000000000000000LL;
    a4[2] = v8;
    a4[3] = v10;
    return result;
  }

  uint64_t v44 = a2;
  unsigned int v43 = a4;
  unint64_t v42 = v8;
  unint64_t v10 = v8;
  uint64_t v45 = a3;
  char v48 = v6;
  while (1)
  {
    unint64_t v49 = v10;
    unint64_t v10 = v6[2];
    unint64_t v11 = v6[3];
    uint64_t v12 = (char *)v6[9];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v13 = String.subscript.getter();
    unint64_t v15 = v14;
    swift_bridgeObjectRelease();
    if (!((v13 ^ v15) >> 14))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      unint64_t v8 = v42;
      a4 = v43;
      unint64_t v10 = v49;
      goto LABEL_27;
    }

    uint64_t v46 = Substring.subscript.getter();
    uint64_t v47 = v16;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    String.subscript.getter();
    swift_bridgeObjectRelease();
    unint64_t v17 = Substring.index(_:offsetBy:limitedBy:)();
    char v19 = v18;
    uint64_t result = swift_bridgeObjectRelease();
    if ((v19 & 1) == 0) {
      break;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v12 + 2) + 1LL,  1,  v12);
    }
    unint64_t v23 = *((void *)v12 + 2);
    unint64_t v22 = *((void *)v12 + 3);
    if (v23 >= v22 >> 1) {
      uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v22 > 1),  v23 + 1,  1,  v12);
    }
    *((void *)v12 + 2) = v23 + 1;
    __int128 v24 = &v12[80 * v23];
    v24[32] = 0;
    *((void *)v24 + 5) = 0xD000000000000022LL;
    *((void *)v24 + 6) = 0x8000000181009440LL;
    *((void *)v24 + 7) = v10;
    *((void *)v24 + 8) = v10;
    *(_OWORD *)(v24 + 72) = 0u;
    *(_OWORD *)(v24 + 88) = 0u;
    v24[104] = -1;
    __int128 v50 = v12;
    v48[9] = v12;
    swift_bridgeObjectRetain();
    String.subscript.getter();
    swift_bridgeObjectRelease();
    uint64_t v25 = Substring.distance(from:to:)();
    swift_bridgeObjectRelease();
    if (v25 < 1
      || (swift_bridgeObjectRetain(),
          String.subscript.getter(),
          swift_bridgeObjectRelease(),
          unint64_t v26 = Substring.index(_:offsetBy:limitedBy:)(),
          char v28 = v27,
          uint64_t result = swift_bridgeObjectRelease(),
          (v28 & 1) != 0))
    {
      uint64_t v20 = v44;
      uint64_t v21 = v45;
      goto LABEL_19;
    }

    uint64_t v20 = v44;
    uint64_t v21 = v45;
    if (v11 >> 14 < v26 >> 14) {
      goto LABEL_30;
    }
    unint64_t v10 = v26;
LABEL_17:
    void v48[2] = v10;
    v48[3] = v11;
LABEL_19:
    MEMORY[0x186E0535C](v46, v47);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    uint64_t v29 = String.init<A>(_:)();
    uint64_t v31 = v30;
    swift_bridgeObjectRetain();
    uint64_t v32 = String.subscript.getter();
    unint64_t v34 = v33;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v32 ^ v34) >> 14)
    {
      swift_bridgeObjectRelease();
      unint64_t v6 = v48;
      if ((specialized Parser.tryEat<A>(sequence:)(v20, v21) & 1) != 0)
      {
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v8 = v42;
        a4 = v43;
        goto LABEL_27;
      }
    }

    else
    {
      ParseError.description.getter();
      uint64_t v36 = v35;
      uint64_t v38 = v37;
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        __int128 v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v50 + 2) + 1LL,  1,  v50);
      }
      unint64_t v40 = *((void *)v50 + 2);
      unint64_t v39 = *((void *)v50 + 3);
      if (v40 >= v39 >> 1) {
        __int128 v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v39 > 1),  v40 + 1,  1,  v50);
      }
      *((void *)v50 + 2) = v40 + 1;
      uint64_t v41 = &v50[80 * v40];
      char v41[32] = 1;
      *((void *)v41 + 5) = v36;
      *((void *)v41 + 6) = v38;
      *((void *)v41 + 7) = v10;
      *((void *)v41 + 8) = v10;
      *((void *)v41 + 9) = v29;
      *((void *)v41 + 10) = v31;
      *((void *)v41 + 11) = 0LL;
      *((void *)v41 + 12) = 0LL;
      v41[104] = 3;
      swift_bridgeObjectRelease();
      unint64_t v6 = v48;
      v48[9] = v50;
    }
  }

  uint64_t v20 = v44;
  if (v11 >> 14 >= v17 >> 14)
  {
    unint64_t v10 = v17;
    __int128 v50 = v12;
    uint64_t v21 = v45;
    goto LABEL_17;
  }

  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t specialized Parser.lexUntil(_:)@<X0>(void *a1@<X0>, uint64_t (*a2)(void)@<X1>, void *a3@<X8>)
{
  unint64_t v3 = a1;
  unint64_t v4 = a1[2];
  uint64_t result = a2();
  unint64_t v24 = v4;
  if ((result & 1) == 0)
  {
    unint64_t v6 = v4;
    unint64_t v26 = v3;
    do
    {
      unint64_t v28 = v6;
      unint64_t v4 = v3[2];
      unint64_t v7 = v3[3];
      unint64_t v8 = (char *)v3[9];
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v9 = String.subscript.getter();
      unint64_t v11 = v10;
      swift_bridgeObjectRelease();
      if (!((v9 ^ v11) >> 14))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v4 = v28;
        break;
      }

      uint64_t v27 = Substring.subscript.getter();
      uint64_t v29 = v12;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      String.subscript.getter();
      swift_bridgeObjectRelease();
      unint64_t v13 = Substring.index(_:offsetBy:limitedBy:)();
      char v15 = v14;
      uint64_t result = swift_bridgeObjectRelease();
      if ((v15 & 1) != 0)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v8 + 2) + 1LL,  1,  v8);
        }
        unint64_t v17 = *((void *)v8 + 2);
        unint64_t v16 = *((void *)v8 + 3);
        if (v17 >= v16 >> 1) {
          unint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v16 > 1),  v17 + 1,  1,  v8);
        }
        *((void *)v8 + 2) = v17 + 1;
        char v18 = &v8[80 * v17];
        v18[32] = 0;
        *((void *)v18 + 5) = 0xD000000000000022LL;
        *((void *)v18 + 6) = 0x8000000181009440LL;
        *((void *)v18 + 7) = v4;
        *((void *)v18 + 8) = v4;
        *(_OWORD *)(v18 + 72) = 0u;
        *(_OWORD *)(v18 + 88) = 0u;
        v18[104] = -1;
        v26[9] = v8;
        unint64_t v3 = v26;
        swift_bridgeObjectRetain();
        String.subscript.getter();
        swift_bridgeObjectRelease();
        uint64_t v19 = Substring.distance(from:to:)();
        swift_bridgeObjectRelease();
        if (v19 < 1) {
          goto LABEL_6;
        }
        swift_bridgeObjectRetain();
        String.subscript.getter();
        swift_bridgeObjectRelease();
        unint64_t v20 = Substring.index(_:offsetBy:limitedBy:)();
        char v22 = v21;
        unint64_t v3 = v26;
        uint64_t result = swift_bridgeObjectRelease();
        if ((v22 & 1) != 0) {
          goto LABEL_6;
        }
        if (v7 >> 14 < v20 >> 14) {
          goto LABEL_21;
        }
        unint64_t v4 = v20;
      }

      else
      {
        if (v7 >> 14 < v13 >> 14)
        {
          __break(1u);
LABEL_21:
          __break(1u);
LABEL_22:
          __break(1u);
          return result;
        }

        unint64_t v4 = v13;
        unint64_t v3 = v26;
      }

      void v3[2] = v4;
      void v3[3] = v7;
LABEL_6:
      MEMORY[0x186E0535C](v27, v29);
      swift_bridgeObjectRelease();
      uint64_t result = ((uint64_t (*)(void *))a2)(v3);
      unint64_t v6 = v4;
    }

    while ((result & 1) == 0);
  }

  if (v4 >> 14 < v24 >> 14) {
    goto LABEL_22;
  }
  *a3 = 0LL;
  a3[1] = 0xE000000000000000LL;
  a3[2] = v24;
  a3[3] = v4;
  return result;
}

uint64_t Parser.lexUnicodeScalar()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AST.Atom.Kind?);
  MEMORY[0x1895F8858](v3, v4);
  unint64_t v6 = (char *)&v76 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = *v1;
  uint64_t v7 = v1[1];
  uint64_t v10 = v1[2];
  uint64_t v9 = v1[3];
  LOBYTE(outlined init with take of AST.Conditional.Condition.Kind((__int128 *)v0, v5) = *((_BYTE *)v1 + 32);
  uint64_t v11 = v1[5];
  uint64_t v12 = v1[6];
  uint64_t v92 = v1[7];
  uint64_t v93 = v11;
  int v91 = *((unsigned __int8 *)v1 + 64);
  uint64_t v13 = v1[9];
  char v97 = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v94 = v9;
  uint64_t v95 = v10;
  uint64_t v14 = String.subscript.getter();
  uint64_t v96 = v13;
  if ((v14 ^ v15) >> 14)
  {
    uint64_t v16 = Substring.subscript.getter();
    uint64_t v18 = v17;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    Parser.advance(_:)(1LL);
    if (!v18) {
      goto LABEL_49;
    }
    BOOL v19 = v16 == 117 && v18 == 0xE100000000000000LL;
    char v20 = v19;
    if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      v21._uint64_t countAndFlagsBits = 123LL;
      v21._uint64_t object = (void *)0xE100000000000000LL;
      if (Parser.tryEat(_:)(v21))
      {
        swift_bridgeObjectRelease();
        Parser.expectUnicodeScalarSequence(eating:)(125LL, 0xE100000000000000LL, (uint64_t)v6);
        uint64_t v22 = type metadata accessor for AST.Atom.Kind(0LL);
        uint64_t v23 = *(void *)(v22 - 8);
LABEL_32:
        (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v6, 0LL, 1LL, v22);
        goto LABEL_50;
      }
    }

    if (v16 == 120 && v18 == 0xE100000000000000LL)
    {
      v24._uint64_t countAndFlagsBits = 123LL;
      v24._uint64_t object = (void *)0xE100000000000000LL;
      if (!Parser.tryEat(_:)(v24)) {
        goto LABEL_22;
      }
    }

    else if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0 {
           || (v25._uint64_t countAndFlagsBits = 123LL, v25._object = (void *)0xE100000000000000LL, !Parser.tryEat(_:)(v25)))
    }
    {
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        if ((v20 & 1) != 0 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          uint64_t v30 = 4LL;
        }

        else
        {
          if ((v16 != 85 || v18 != 0xE100000000000000LL) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            if ((v16 == 111 && v18 == 0xE100000000000000LL || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              && (v31._uint64_t countAndFlagsBits = 123LL, v31._object = (void *)0xE100000000000000LL, Parser.tryEat(_:)(v31)))
            {
              swift_bridgeObjectRelease();
              specialized Parser.lexUntil(_:)(v1, 125LL, 0xE100000000000000LL, &v100);
              uint64_t v32 = v100;
              uint64_t v33 = v101;
            }

            else
            {
              if (v16 == 48 && v18 == 0xE100000000000000LL)
              {
                swift_bridgeObjectRelease();
              }

              else
              {
                char v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                if ((v34 & 1) == 0) {
                  goto LABEL_49;
                }
              }

              specialized Parser.tryEatPrefix(maxLength:_:)( 3LL,  0,  v1,  (uint64_t (*)(uint64_t, void, void *))specialized Source.peekPrefix(maxLength:_:),  &v100);
              uint64_t v33 = v101;
              if (!(void)v101) {
                goto LABEL_64;
              }
              uint64_t v32 = v100;
            }

            uint64_t v100 = v32;
            *(void *)&__int128 v101 = v33;
            unsigned __int8 v28 = 0;
            goto LABEL_25;
          }

          swift_bridgeObjectRelease();
          uint64_t v30 = 8LL;
        }

        Parser.expectUnicodeScalar(numDigits:)(v30, (uint64_t)&v100);
        *(_DWORD *)unint64_t v6 = v100;
        __int128 v29 = v101;
        goto LABEL_30;
      }

LABEL_64:
      uint64_t v75 = v1[2];
      *(_DWORD *)unint64_t v6 = 0;
      *((void *)v6 + 1) = v75;
      *((void *)v6 + 2) = v75;
      goto LABEL_31;
    }

    swift_bridgeObjectRelease();
    specialized Parser.lexUntil(_:)(v1, 125LL, 0xE100000000000000LL, &v100);
    uint64_t v26 = v100;
    uint64_t v27 = v101;
LABEL_24:
    uint64_t v100 = v26;
    *(void *)&__int128 v101 = v27;
    unsigned __int8 v28 = 2;
LABEL_25:
    Parser.validateUnicodeScalar(_:_:)(&v100, v28, (uint64_t)&v98);
    swift_bridgeObjectRelease();
    *(_DWORD *)unint64_t v6 = v98;
    __int128 v29 = v99;
LABEL_30:
    *(_OWORD *)(v6 + 8) = v29;
LABEL_31:
    uint64_t v22 = type metadata accessor for AST.Atom.Kind(0LL);
    swift_storeEnumTagMultiPayload();
    uint64_t v23 = *(void *)(v22 - 8);
    goto LABEL_32;
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_49:
  uint64_t v22 = type metadata accessor for AST.Atom.Kind(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56LL))(v6, 1LL, 1LL, v22);
LABEL_50:
  type metadata accessor for AST.Atom.Kind(0LL);
  uint64_t v35 = *(void *)(v22 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v6, 1LL, v22) == 1)
  {
    uint64_t v89 = v35;
    uint64_t v90 = v22;
    outlined destroy of _ASTParent?((uint64_t)v6, &demangling cache variable for type metadata for AST.Atom.Kind?);
    uint64_t v36 = v1[9];
    uint64_t v87 = v1;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v37 = v96;
    uint64_t v38 = v7;
    uint64_t v39 = v12;
    uint64_t v40 = v8;
    uint64_t v41 = a1;
    uint64_t v42 = specialized Collection.dropFirst(_:)(*(void *)(v96 + 16), v36);
    uint64_t v44 = v43;
    uint64_t v46 = v45;
    int64_t v48 = v47 >> 1;
    swift_bridgeObjectRetain();
    uint64_t v88 = v42;
    uint64_t v49 = v41;
    uint64_t v50 = v40;
    uint64_t v51 = v39;
    uint64_t result = swift_unknownObjectRetain();
    uint64_t v53 = v44 - 32;
    uint64_t v54 = v37;
    uint64_t v55 = v46;
    uint64_t v56 = v46;
LABEL_52:
    uint64_t v57 = v53 + 80 * v55;
    while (1)
    {
      if (v48 == v56)
      {
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease_n();
        char v72 = v97;
        unsigned int v73 = v87;
        *uint64_t v87 = v50;
        v73[1] = v38;
        uint64_t v74 = v94;
        v73[2] = v95;
        v73[3] = v74;
        *((_BYTE *)v73 + 32) = v72;
        v73[5] = v93;
        v73[6] = v51;
        v73[7] = v92;
        *((_BYTE *)v73 + 64) = v91;
        v73[9] = v54;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v89 + 56))(v49, 1LL, 1LL, v90);
      }

      if (v55 < v46 || v56 >= v48) {
        break;
      }
      int v58 = *(unsigned __int8 *)(v57 + 32);
      ++v56;
      v57 += 80LL;
      if (!v58)
      {
        uint64_t v81 = v53;
        uint64_t v83 = v36;
        uint64_t v84 = v50;
        uint64_t v85 = v51;
        uint64_t v96 = v38;
        uint64_t v59 = *(void *)(v57 - 32);
        uint64_t v80 = *(void *)(v57 - 40);
        uint64_t v79 = *(void *)(v57 - 24);
        uint64_t v60 = *(void *)(v57 - 8);
        uint64_t v78 = *(void *)(v57 - 16);
        uint64_t v61 = *(void *)v57;
        uint64_t v62 = *(void *)(v57 + 8);
        uint64_t v63 = *(void *)(v57 + 16);
        unsigned __int8 v64 = *(_BYTE *)(v57 + 24);
        uint64_t v77 = v59;
        swift_bridgeObjectRetain();
        uint64_t v82 = v61;
        outlined copy of ParseError?(v60, v61, v62, v63, v64);
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v86 = v49;
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v54 + 16) + 1LL,  1,  (char *)v54);
          uint64_t v54 = result;
        }

        unint64_t v66 = *(void *)(v54 + 16);
        unint64_t v65 = *(void *)(v54 + 24);
        uint64_t v67 = v54;
        if (v66 >= v65 >> 1)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v65 > 1),  v66 + 1,  1,  (char *)v54);
          uint64_t v67 = result;
        }

        *(void *)(v67 + 16) = v66 + 1;
        uint64_t v54 = v67;
        unint64_t v68 = v67 + 80 * v66;
        *(_BYTE *)(v68 + 32) = 0;
        uint64_t v69 = v77;
        *(void *)(v68 + 40) = v80;
        *(void *)(v68 + 48) = v69;
        uint64_t v70 = v78;
        *(void *)(v68 + 56) = v79;
        *(void *)(v68 + 64) = v70;
        uint64_t v71 = v82;
        *(void *)(v68 + 72) = v60;
        *(void *)(v68 + 80) = v71;
        *(void *)(v68 + 88) = v62;
        *(void *)(v68 + 96) = v63;
        *(_BYTE *)(v68 + 104) = v64;
        uint64_t v55 = v56;
        uint64_t v51 = v85;
        uint64_t v49 = v86;
        uint64_t v38 = v96;
        uint64_t v50 = v84;
        uint64_t v36 = v83;
        uint64_t v53 = v81;
        goto LABEL_52;
      }
    }

    __break(1u);
  }

  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined init with take of AST.Atom.Kind((uint64_t)v6, a1, type metadata accessor for AST.Atom.Kind);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v35 + 56))(a1, 0LL, 1LL, v22);
  }

  return result;
}

uint64_t Parser.lexQuantifier()@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(void *)v1;
  uint64_t v4 = *(void *)(v1 + 8);
  uint64_t v54 = *(void *)(v1 + 24);
  uint64_t v55 = *(void *)(v1 + 16);
  char v53 = *(_BYTE *)(v1 + 32);
  uint64_t v5 = *(void *)(v1 + 48);
  uint64_t v51 = *(void *)(v1 + 56);
  uint64_t v52 = *(void *)(v1 + 40);
  char v50 = *(_BYTE *)(v1 + 64);
  uint64_t v6 = *(void *)(v1 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  closure #1 in Parser.lexQuantifier()(v1, (uint64_t)&v66);
  uint64_t v57 = v66;
  uint64_t v58 = v68;
  uint64_t v60 = v69;
  uint64_t v61 = v70;
  uint64_t v62 = v72;
  uint64_t v63 = v73;
  uint64_t v7 = v75;
  uint64_t v64 = v74;
  char v8 = v76;
  uint64_t v9 = v77;
  unint64_t v59 = v67;
  uint64_t v10 = v79;
  uint64_t v65 = v78;
  if (v67 >> 1 == 0xFFFFFFFF && v71 < 2)
  {
    unint64_t v45 = v71;
    uint64_t v46 = v75;
    uint64_t v47 = v3;
    uint64_t v48 = v79;
    uint64_t v49 = v76;
    uint64_t v11 = *(void *)(v1 + 72);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    specialized Collection.dropFirst(_:)(*(void *)(v6 + 16), v11);
    uint64_t v13 = v12;
    uint64_t v15 = v14;
    int64_t v17 = v16 >> 1;
    swift_bridgeObjectRetain();
    uint64_t result = swift_unknownObjectRetain();
    uint64_t v19 = v13 - 32;
    uint64_t v20 = v15;
    uint64_t v21 = v15;
LABEL_4:
    uint64_t v22 = v19 + 80 * v20;
    while (1)
    {
      if (v17 == v21)
      {
        swift_bridgeObjectRelease();
        uint64_t result = swift_unknownObjectRelease_n();
        *(void *)uint64_t v1 = v47;
        *(void *)(v1 + 8) = v4;
        *(void *)(v1 + 16) = v55;
        *(void *)(v1 + 24) = v54;
        *(_BYTE *)(v1 + 32) = v53;
        *(void *)(v1 + 40) = v52;
        *(void *)(v1 + 48) = v5;
        *(void *)(v1 + 56) = v51;
        *(_BYTE *)(v1 + 64) = v50;
        *(void *)(v1 + 72) = v6;
        *a1 = v57;
        a1[1] = v59;
        a1[2] = v58;
        a1[3] = v60;
        a1[4] = v61;
        a1[5] = v45;
        a1[6] = v62;
        a1[7] = v63;
        a1[8] = v64;
        a1[9] = v46;
        a1[10] = v49;
        a1[11] = v9;
        a1[12] = v65;
        a1[13] = v48;
        return result;
      }

      if (v20 < v15 || v21 >= v17) {
        break;
      }
      int v23 = *(unsigned __int8 *)(v22 + 32);
      ++v21;
      v22 += 80LL;
      if (!v23)
      {
        uint64_t v41 = v19;
        uint64_t v42 = v9;
        uint64_t v43 = v5;
        uint64_t v44 = v4;
        uint64_t v37 = *(void *)(v22 - 24);
        uint64_t v38 = *(void *)(v22 - 40);
        uint64_t v24 = *(void *)(v22 - 8);
        uint64_t v35 = *(void *)(v22 - 32);
        uint64_t v36 = *(void *)(v22 - 16);
        uint64_t v56 = v6;
        uint64_t v26 = *(void *)v22;
        uint64_t v25 = *(void *)(v22 + 8);
        uint64_t v27 = *(void *)(v22 + 16);
        unsigned __int8 v28 = *(_BYTE *)(v22 + 24);
        swift_bridgeObjectRetain();
        uint64_t v39 = v24;
        uint64_t v40 = v26;
        uint64_t v29 = v26;
        uint64_t v30 = v25;
        uint64_t v6 = v56;
        outlined copy of ParseError?(v24, v29, v30, v27, v28);
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v56 + 16) + 1LL,  1,  (char *)v56);
          uint64_t v6 = result;
        }

        unint64_t v32 = *(void *)(v6 + 16);
        unint64_t v31 = *(void *)(v6 + 24);
        if (v32 >= v31 >> 1)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v31 > 1),  v32 + 1,  1,  (char *)v6);
          uint64_t v6 = result;
        }

        *(void *)(v6 + 16) = v32 + 1;
        unint64_t v33 = v6 + 80 * v32;
        *(_BYTE *)(v33 + 32) = 0;
        *(void *)(v33 + 40) = v38;
        *(void *)(v33 + 48) = v35;
        *(void *)(v33 + 56) = v37;
        *(void *)(v33 + 64) = v36;
        *(void *)(v33 + 72) = v39;
        *(void *)(v33 + 80) = v40;
        *(void *)(v33 + 88) = v30;
        *(void *)(v33 + 96) = v27;
        *(_BYTE *)(v33 + 104) = v28;
        uint64_t v20 = v21;
        uint64_t v5 = v43;
        uint64_t v4 = v44;
        uint64_t v19 = v41;
        uint64_t v9 = v42;
        goto LABEL_4;
      }
    }

    __break(1u);
  }

  else
  {
    unint64_t v34 = v71;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    *a1 = v57;
    a1[1] = v59;
    a1[2] = v58;
    a1[3] = v60;
    a1[4] = v61;
    a1[5] = v34;
    a1[6] = v62;
    a1[7] = v63;
    a1[8] = v64;
    a1[9] = v7;
    *((_BYTE *)a1 + 80) = v8;
    a1[11] = v9;
    a1[12] = v65;
    a1[13] = v10;
  }

  return result;
}

uint64_t closure #1 in Parser.lexQuantifier()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v40 = (char *)MEMORY[0x18961AFE8];
  if ((*(_BYTE *)(a1 + 56) & 1) == 0) {
    goto LABEL_7;
  }
  specialized Parser.tryEatPrefix(maxLength:_:)( 0LL,  1,  (void *)a1,  (uint64_t (*)(uint64_t, void, void *))specialized Source.peekPrefix(maxLength:_:),  (uint64_t *)v37);
  unint64_t v5 = *(void *)&v37[8];
  if (!*(void *)&v37[8]) {
    goto LABEL_7;
  }
  unint64_t v6 = *(void *)v37;
  __int128 v36 = *(_OWORD *)&v37[16];
  uint64_t v2 = (char *)MEMORY[0x18961AFE8];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_38;
  }
  while (1)
  {
    unint64_t v8 = *((void *)v2 + 2);
    unint64_t v7 = *((void *)v2 + 3);
    if (v8 >= v7 >> 1) {
      uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v7 > 1),  v8 + 1,  1,  v2,  &demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Trivia>);
    }
    *((void *)v2 + 2) = v8 + 1;
    uint64_t v9 = &v2[32 * v8];
    *((void *)v9 + 4) = v6;
    *((void *)v9 + 5) = v5;
    *((_OWORD *)v9 + 3) = v36;
    uint64_t v40 = v2;
LABEL_7:
    unint64_t v5 = *(void *)(a1 + 16);
    v10._uint64_t countAndFlagsBits = 42LL;
    v10._uint64_t object = (void *)0xE100000000000000LL;
    if (Parser.tryEat(_:)(v10))
    {
      memset(v37, 0, sizeof(v37));
LABEL_14:
      unint64_t v14 = 0LL;
      __int128 v39 = 0uLL;
      unint64_t v6 = 0x8000000000000000LL;
      goto LABEL_15;
    }

    v11._uint64_t countAndFlagsBits = 43LL;
    v11._uint64_t object = (void *)0xE100000000000000LL;
    uint64_t v2 = &v37[8];
    if (Parser.tryEat(_:)(v11))
    {
      uint64_t v12 = 1LL;
LABEL_13:
      *(void *)uint64_t v37 = v12;
      memset(&v37[8], 0, 32);
      goto LABEL_14;
    }

    v13._uint64_t countAndFlagsBits = 63LL;
    v13._uint64_t object = (void *)0xE100000000000000LL;
    if (Parser.tryEat(_:)(v13))
    {
      uint64_t v12 = 2LL;
      goto LABEL_13;
    }

    specialized Parser.tryEating<A>(_:)(a1, &v40, (uint64_t)v37);
    unint64_t v14 = *(void *)&v37[8];
    unint64_t v6 = v38;
    if (*(void *)&v37[8] >> 1 == 0xFFFFFFFFLL && v38 < 2)
    {
      uint64_t v17 = 0LL;
      uint64_t v19 = 0LL;
      unint64_t v6 = 0LL;
      unint64_t v5 = 0LL;
      unint64_t v15 = 0LL;
      __int128 v18 = 0uLL;
      __int128 v16 = 0uLL;
      unint64_t v14 = 0x1FFFFFFFELL;
      goto LABEL_17;
    }

uint64_t Source.Located.init(_:_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t result = type metadata accessor for Source.Located();
  uint64_t v9 = (void *)(a5 + *(int *)(result + 28));
  *uint64_t v9 = a2;
  v9[1] = a3;
  return result;
}

uint64_t Parser.expectQuoted(endingWith:count:ignoreEscaped:eatEnding:)@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, char a5@<W4>, uint64_t *a6@<X8>)
{
  unint64_t v7 = v6;
  swift_bridgeObjectRetain();
  uint64_t v12 = MEMORY[0x186E053EC](a1, a2, a3);
  uint64_t v14 = v13;
  unint64_t v15 = v7[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *(void *)&__int128 v43 = 0LL;
  *((void *)&v43 + 1) = 0xE000000000000000LL;
  uint64_t v38 = a1;
  uint64_t v39 = a2;
  unint64_t v16 = v15;
  if ((closure #1 in closure #1 in Parser.expectQuoted(endingWith:count:ignoreEscaped:eatEnding:)( (uint64_t)v7,  v12,  v14,  a1,  a2,  (char)a4) & 1) == 0)
  {
    char v35 = a4 & 1;
    unint64_t v32 = v15;
    unint64_t v16 = v15;
    uint64_t v40 = v7;
    uint64_t v36 = v12;
    uint64_t v37 = v14;
    while (1)
    {
      unint64_t v15 = *v7;
      uint64_t v14 = v7[1];
      a4 = (char *)v7[2];
      unint64_t v17 = v7[3];
      a1 = v7[9];
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v12 = String.subscript.getter();
      a2 = v18;
      swift_bridgeObjectRelease();
      if (!((v12 ^ a2) >> 14))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v14 = v37;
        swift_bridgeObjectRelease();
        unint64_t v15 = v32;
        unint64_t v7 = v40;
        uint64_t v12 = v36;
        goto LABEL_20;
      }

      uint64_t v19 = Substring.subscript.getter();
      unint64_t v41 = v20;
      uint64_t v42 = v19;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      String.subscript.getter();
      swift_bridgeObjectRelease();
      unint64_t v16 = Substring.index(_:offsetBy:limitedBy:)();
      a2 = v21;
      swift_bridgeObjectRelease();
      if ((a2 & 1) == 0) {
        break;
      }
      unint64_t v7 = v40;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        a1 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(a1 + 16) + 1LL,  1,  (char *)a1);
      }
      unint64_t v23 = *(void *)(a1 + 16);
      unint64_t v22 = *(void *)(a1 + 24);
      if (v23 >= v22 >> 1) {
        a1 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v22 > 1),  v23 + 1,  1,  (char *)a1);
      }
      *(void *)(a1 + 16) = v23 + 1;
      uint64_t v24 = a1 + 80 * v23;
      *(_BYTE *)(v24 + 32) = 0;
      *(void *)(v24 + 40) = 0xD000000000000022LL;
      *(void *)(v24 + 48) = 0x8000000181009440LL;
      *(void *)(v24 + 56) = a4;
      *(void *)(v24 + 64) = a4;
      *(_OWORD *)(v24 + 72) = 0u;
      *(_OWORD *)(v24 + 88) = 0u;
      *(_BYTE *)(v24 + 104) = -1;
      v40[9] = a1;
      swift_bridgeObjectRetain();
      String.subscript.getter();
      swift_bridgeObjectRelease();
      a1 = Substring.distance(from:to:)();
      swift_bridgeObjectRelease();
      if (a1 < 1)
      {
        unint64_t v16 = (unint64_t)a4;
        uint64_t v12 = v36;
        uint64_t v14 = v37;
      }

      else
      {
        swift_bridgeObjectRetain();
        String.subscript.getter();
        swift_bridgeObjectRelease();
        a2 = Substring.index(_:offsetBy:limitedBy:)();
        a1 = v25;
        unint64_t v7 = v40;
        swift_bridgeObjectRelease();
        unint64_t v16 = (unint64_t)a4;
        uint64_t v12 = v36;
        uint64_t v14 = v37;
        if ((a1 & 1) == 0)
        {
          if (v17 >> 14 < a2 >> 14) {
            goto LABEL_36;
          }
          unint64_t v16 = a2;
LABEL_17:
          v7[2] = v16;
          _OWORD v7[3] = v17;
        }
      }

      a2 = v41;
      MEMORY[0x186E0535C](v42, v41);
      swift_bridgeObjectRelease();
      if ((closure #1 in closure #1 in Parser.expectQuoted(endingWith:count:ignoreEscaped:eatEnding:)( (uint64_t)v7,  v12,  v14,  v38,  v39,  v35) & 1) != 0)
      {
        unint64_t v15 = v32;
        goto LABEL_20;
      }
    }

    unint64_t v7 = v40;
    if (v17 >> 14 < v16 >> 14)
    {
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }

    uint64_t v12 = v36;
    uint64_t v14 = v37;
    goto LABEL_17;
  }

LABEL_20:
  swift_bridgeObjectRelease();
  if (v15 >> 14 > v16 >> 14) {
    goto LABEL_37;
  }
  a2 = *((void *)&v43 + 1);
  a1 = v43;
  swift_bridgeObjectRelease();
  unint64_t v16 = v7[2];
  if (v15 >> 14 > v16 >> 14)
  {
LABEL_38:
    __break(1u);
LABEL_39:
    a4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)a4 + 2) + 1LL,  1,  a4);
    goto LABEL_28;
  }

  uint64_t v26 = HIBYTE(*((void *)&v43 + 1)) & 0xFLL;
  if ((*((void *)&v43 + 1) & 0x2000000000000000LL) == 0) {
    uint64_t v26 = v43 & 0xFFFFFFFFFFFFLL;
  }
  if (v26)
  {
    if ((a5 & 1) == 0) {
      goto LABEL_34;
    }
    goto LABEL_31;
  }

  a4 = (char *)v7[9];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_39;
  }
LABEL_28:
  unint64_t v28 = *((void *)a4 + 2);
  unint64_t v27 = *((void *)a4 + 3);
  if (v28 >= v27 >> 1) {
    a4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v27 > 1),  v28 + 1,  1,  a4);
  }
  *((void *)a4 + 2) = v28 + 1;
  unint64_t v29 = &a4[80 * v28];
  v29[32] = 1;
  *((void *)v29 + 5) = 0xD00000000000001BLL;
  *((void *)v29 + 6) = 0x8000000181008FC0LL;
  *((void *)v29 + 7) = v15;
  *((void *)v29 + 8) = v16;
  *((void *)v29 + 9) = 1LL;
  *((void *)v29 + 10) = 0LL;
  *((void *)v29 + 11) = 0LL;
  *((void *)v29 + 12) = 0LL;
  v29[104] = 36;
  v7[9] = (unint64_t)a4;
  if ((a5 & 1) != 0)
  {
LABEL_31:
    if ((specialized Parser.tryEat<A>(sequence:)(v12, v14) & 1) == 0)
    {
      *(void *)&__int128 v43 = String.init<A>(_:)();
      *((void *)&v43 + 1) = v30;
      uint64_t v44 = 0LL;
      uint64_t v45 = 0LL;
      char v46 = 3;
      Parser.errorAtCurrentPosition(_:)(&v43);
    }
  }

  while (1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t v32 = *(void *)(v1 + 16);
    if (v32 >> 14 >= v6 >> 14) {
      break;
    }
    __break(1u);
    while (1)
    {
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
LABEL_45:
        swift_bridgeObjectRelease();
        uint64_t countAndFlagsBits = 5LL;
        goto LABEL_20;
      }

      uint64_t v57 = v3;
      if (object == 120 && v17 == 0xE100000000000000LL)
      {
        swift_bridgeObjectRelease();
        goto LABEL_51;
      }

      uint64_t v64 = v8;
      __int128 v33 = v1;
      uint64_t v3 = a1;
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        break;
      }
      if (object == 119 && v17 == 0xE100000000000000LL || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        uint64_t countAndFlagsBits = 8LL;
LABEL_58:
        a1 = v3;
        uint64_t v1 = v33;
        unint64_t v8 = v64;
        goto LABEL_20;
      }

      if (object == 68 && v17 == 0xE100000000000000LL || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        uint64_t countAndFlagsBits = 9LL;
        goto LABEL_58;
      }

      if (object == 80 && v17 == 0xE100000000000000LL || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        uint64_t countAndFlagsBits = 10LL;
        goto LABEL_58;
      }

      if (object == 83 && v17 == 0xE100000000000000LL || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        uint64_t countAndFlagsBits = 11LL;
        goto LABEL_58;
      }

      if (object == 87 && v17 == 0xE100000000000000LL || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        uint64_t countAndFlagsBits = 12LL;
        goto LABEL_58;
      }

      if (object == 121 && v17 == 0xE100000000000000LL || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v35._uint64_t countAndFlagsBits = 123LL;
        v35._uint64_t object = (void *)0xE100000000000000LL;
        if (!Parser.tryEat(_:)(v35))
        {
          unint64_t v71 = xmmword_181005F50;
          uint64_t v72 = 0LL;
          uint64_t v73 = 0LL;
          uint64_t v74 = 3;
          uint64_t v38 = &v71;
          goto LABEL_87;
        }

        unint64_t v17 = *(void *)(v1 + 16);
        uint64_t v36 = Parser.tryEat()();
        if (!v36.value._object) {
          goto LABEL_85;
        }
        uint64_t v37 = *(void *)(v1 + 16);
        if (v37 >> 14 < (unint64_t)v17 >> 14)
        {
          __break(1u);
        }

        else
        {
          uint64_t countAndFlagsBits = v36.value._countAndFlagsBits;
          uint64_t object = (uint64_t)v36.value._object;
          if (v36.value._countAndFlagsBits == 125 && v36.value._object == (void *)0xE100000000000000LL
            || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
LABEL_85:
            v65[0] = 0xD000000000000011LL;
            v65[1] = 0x8000000181009210LL;
            v65[2] = 0LL;
            v65[3] = 0LL;
            uint64_t v66 = 3;
            uint64_t v38 = (__int128 *)v65;
LABEL_87:
            Parser.errorAtCurrentPosition(_:)(v38);
            uint64_t countAndFlagsBits = 13LL;
LABEL_88:
            a1 = v3;
            unint64_t v8 = v64;
            goto LABEL_20;
          }

          if (v36.value._countAndFlagsBits == 119 && v36.value._object == (void *)0xE100000000000000LL
            || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            uint64_t countAndFlagsBits = 14LL;
LABEL_116:
            v46._uint64_t countAndFlagsBits = 125LL;
            v46._uint64_t object = (void *)0xE100000000000000LL;
            if (Parser.tryEat(_:)(v46)) {
              goto LABEL_58;
            }
            unint64_t v67 = xmmword_181005F60;
            uint64_t v68 = 0LL;
            uint64_t v69 = 0LL;
            uint64_t v70 = 3;
            uint64_t v1 = v33;
            Parser.errorAtCurrentPosition(_:)(&v67);
            goto LABEL_88;
          }

          if (v36.value._countAndFlagsBits == 103 && v36.value._object == (void *)0xE100000000000000LL
            || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
LABEL_115:
            uint64_t countAndFlagsBits = 13LL;
            goto LABEL_116;
          }

          swift_bridgeObjectRetain();
          _StringGuts.grow(_:)(51LL);
          v40._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
          v40._uint64_t object = (void *)0x8000000181008CA0LL;
          String.append(_:)(v40);
          Character.write<A>(to:)();
          v41._uint64_t countAndFlagsBits = 0xD000000000000016LL;
          v41._uint64_t object = (void *)0x8000000181008CC0LL;
          String.append(_:)(v41);
          unint64_t v59 = 0xE000000000000000LL;
          uint64_t v60 = 0LL;
          uint64_t v42 = *(char **)(v1 + 72);
          swift_bridgeObjectRetain();
          uint64_t v62 = v42;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          {
LABEL_112:
            uint64_t v44 = *((void *)v62 + 2);
            __int128 v43 = *((void *)v62 + 3);
            uint64_t v61 = v44 + 1;
            uint64_t v58 = v44;
            if (v44 >= v43 >> 1) {
              uint64_t v62 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v43 > 1),  v61,  1,  v62);
            }
            *((void *)v62 + 2) = v61;
            uint64_t v45 = &v62[80 * v58];
            v45[32] = 1;
            *((void *)v45 + 5) = v60;
            *((void *)v45 + 6) = v59;
            *((void *)v45 + 7) = v17;
            *((void *)v45 + 8) = v37;
            *((void *)v45 + 9) = countAndFlagsBits;
            *((void *)v45 + 10) = object;
            *((void *)v45 + 11) = 0LL;
            *((void *)v45 + 12) = 0LL;
            v45[104] = 16;
            swift_bridgeObjectRelease_n();
            *(void *)(v33 + 72) = v62;
            goto LABEL_115;
          }
        }

        uint64_t v62 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v62 + 2) + 1LL,  1,  v62);
        goto LABEL_112;
      }

      if (object == 88 && v17 == 0xE100000000000000LL || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        uint64_t countAndFlagsBits = 15LL;
        goto LABEL_58;
      }

      if (object == 117 && v17 == 0xE100000000000000LL || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        uint64_t countAndFlagsBits = 16LL;
        goto LABEL_58;
      }

      if (object == 98 && v17 == 0xE100000000000000LL)
      {
        swift_bridgeObjectRelease();
        uint64_t countAndFlagsBits = 17LL;
        goto LABEL_58;
      }

      uint64_t v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      unint64_t v8 = v64;
      if ((v39 & 1) != 0)
      {
        uint64_t countAndFlagsBits = 17LL;
        goto LABEL_20;
      }

  v60._uint64_t countAndFlagsBits = 93LL;
  v60._uint64_t object = (void *)0xE100000000000000LL;
  uint64_t result = Parser.tryEat(_:)(v60);
  if ((result & 1) == 0)
  {
    *(_OWORD *)&v104[0]._rawValue = xmmword_181005FD0;
    char v105 = 0LL;
    __int128 v106 = 0LL;
    char v107 = 3;
    uint64_t result = Parser.errorAtCurrentPosition(_:)((__int128 *)v104);
  }

  uint64_t v62 = *(void *)(v2 + 16);
  uint64_t v63 = v90;
  if (v62 >> 14 < v90 >> 14) {
    goto LABEL_46;
  }
  uint64_t v64 = into._rawValue;
  uint64_t v65 = v87;
  *uint64_t v87 = v85;
  uint64_t v66 = v89;
  v65[1] = v63;
  v65[2] = v66;
  v65[3] = v64;
  v65[4] = v63;
  v65[5] = v62;
  *(_BYTE *)(v2 + 32) = v86;
  return result;
}

LABEL_34:
  uint64_t result = swift_bridgeObjectRelease();
  *a6 = a1;
  a6[1] = a2;
  a6[2] = v15;
  a6[3] = v16;
  return result;
}

  if (*(_BYTE *)(a1 + 32) == 1)
  {
    unint64_t v31 = HIBYTE(v6) & 0xF;
    if ((v6 & 0x2000000000000000LL) == 0) {
      unint64_t v31 = v2 & 0xFFFFFFFFFFFFLL;
    }
    if (!v31)
    {
      unint64_t v32 = *(void *)(a1 + 72);
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v32 + 16) + 1LL,  1,  (char *)v32);
        unint64_t v32 = result;
      }

      uint64_t v34 = *(void *)(v32 + 16);
      __int128 v33 = *(void *)(v32 + 24);
      if (v34 >= v33 >> 1)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v33 > 1),  v34 + 1,  1,  (char *)v32);
        unint64_t v32 = result;
      }

      *(void *)(v32 + 16) = v34 + 1;
      char v35 = v32 + 80 * v34;
      *(_BYTE *)(v35 + 32) = 1;
      *(void *)(v35 + 40) = 0xD00000000000001BLL;
      *(void *)(v35 + 48) = 0x8000000181008FC0LL;
      *(void *)(v35 + 56) = v37;
      *(void *)(v35 + 64) = v7;
      *(void *)(v35 + 72) = 1LL;
      *(void *)(v35 + 80) = 0LL;
      *(void *)(v35 + 88) = 0LL;
      *(void *)(v35 + 96) = 0LL;
      *(_BYTE *)(v35 + 104) = 36;
      *(void *)(a1 + 72) = v32;
    }
  }

  *uint64_t v36 = v2;
  v36[1] = v6;
  return result;
}

uint64_t closure #1 in closure #1 in Parser.expectQuoted(endingWith:count:ignoreEscaped:eatEnding:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v8 = String.subscript.getter();
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  LOBYTE(v8) = specialized Sequence<>.starts<A>(with:)(a2, a3, v8, v10);
  swift_bridgeObjectRelease();
  if ((v8 & 1) != 0) {
    return 1LL;
  }
  v23[0] = a4;
  v23[1] = a5;
  v23[2] = 0LL;
  v23[3] = 0LL;
  char v24 = 3;
  swift_bridgeObjectRetain();
  uint64_t v11 = String.subscript.getter();
  unint64_t v13 = v12;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v11 ^ v13) < 0x4000)
  {
    uint64_t v14 = (__int128 *)v23;
LABEL_4:
    Parser.errorAtCurrentPosition(_:)(v14);
    return 1LL;
  }

  if ((a6 & 1) != 0)
  {
    v16._uint64_t countAndFlagsBits = 92LL;
    v16._uint64_t object = (void *)0xE100000000000000LL;
    if (Parser.tryEat(_:)(v16))
    {
      v25[0] = 2LL;
      memset(&v25[1], 0, 24);
      char v26 = 36;
      swift_bridgeObjectRetain();
      uint64_t v17 = String.subscript.getter();
      unint64_t v19 = v18;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!((v17 ^ v19) >> 14))
      {
        uint64_t v14 = (__int128 *)v25;
        goto LABEL_4;
      }
    }
  }

  return 0LL;
}

uint64_t closure #1 in Parser.lexQuote()@<X0>(unint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized Parser.tryEat<A>(sequence:)(20828LL, 0xE200000000000000LL);
  if ((result & 1) == 0)
  {
    if ((*(_BYTE *)(a1 + 56) & 4) != 0
      && (v26._uint64_t countAndFlagsBits = 34LL,
          v26._uint64_t object = (void *)0xE100000000000000LL,
          uint64_t result = Parser.tryEat(_:)(v26),
          (result & 1) != 0))
    {
      uint64_t result = Parser.expectQuoted(endingWith:count:ignoreEscaped:eatEnding:)( 34LL,  0xE100000000000000LL,  1LL,  (char *)1,  1,  &v41);
      unint64_t v27 = v42;
      *a2 = v41;
      a2[1] = v27;
    }

    else
    {
      *a2 = 0LL;
      a2[1] = 0LL;
    }

    return result;
  }

  uint64_t v36 = a2;
  uint64_t v41 = 0LL;
  unint64_t v42 = 0xE000000000000000LL;
  unint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  unint64_t v8 = String.subscript.getter();
  uint64_t v10 = v9;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v37 = v7;
  if ((v8 ^ v10) >= 0x4000)
  {
    unint64_t v6 = a1;
    uint64_t result = specialized Parser.tryEat<A>(sequence:)(17756LL, 0xE200000000000000LL);
    if ((result & 1) == 0)
    {
      unint64_t v38 = a1;
      while (1)
      {
        unint64_t v39 = v7;
        uint64_t v2 = *(void *)(a1 + 8);
        unint64_t v6 = *(void *)(a1 + 16);
        unint64_t v11 = *(void *)(a1 + 24);
        unint64_t v8 = *(void *)(a1 + 48);
        unint64_t v12 = *(char **)(a1 + 72);
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v13 = String.subscript.getter();
        unint64_t v15 = v14;
        swift_bridgeObjectRelease();
        if (!((v13 ^ v15) >> 14))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t result = swift_bridgeObjectRelease();
          a1 = v38;
          unint64_t v7 = v39;
          goto LABEL_27;
        }

        uint64_t v40 = Substring.subscript.getter();
        uint64_t v17 = v16;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        String.subscript.getter();
        swift_bridgeObjectRelease();
        unint64_t v7 = Substring.index(_:offsetBy:limitedBy:)();
        unint64_t v8 = v18;
        swift_bridgeObjectRelease();
        if ((v8 & 1) == 0) {
          break;
        }
        a1 = v38;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v12 + 2) + 1LL,  1,  v12);
        }
        unint64_t v20 = *((void *)v12 + 2);
        unint64_t v19 = *((void *)v12 + 3);
        if (v20 >= v19 >> 1) {
          unint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v19 > 1),  v20 + 1,  1,  v12);
        }
        *((void *)v12 + 2) = v20 + 1;
        unint64_t v21 = &v12[80 * v20];
        v21[32] = 0;
        *((void *)v21 + 5) = 0xD000000000000022LL;
        *((void *)v21 + 6) = 0x8000000181009440LL;
        *((void *)v21 + 7) = v6;
        *((void *)v21 + 8) = v6;
        *(_OWORD *)(v21 + 72) = 0u;
        *(_OWORD *)(v21 + 88) = 0u;
        v21[104] = -1;
        *(void *)(v38 + 72) = v12;
        swift_bridgeObjectRetain();
        String.subscript.getter();
        swift_bridgeObjectRelease();
        uint64_t v22 = Substring.distance(from:to:)();
        swift_bridgeObjectRelease();
        if (v22 >= 1)
        {
          swift_bridgeObjectRetain();
          String.subscript.getter();
          swift_bridgeObjectRelease();
          unint64_t v8 = Substring.index(_:offsetBy:limitedBy:)();
          char v24 = v23;
          a1 = v38;
          swift_bridgeObjectRelease();
          unint64_t v7 = v6;
          if ((v24 & 1) != 0) {
            goto LABEL_19;
          }
          if (v11 >> 14 < v8 >> 14) {
            goto LABEL_45;
          }
          unint64_t v7 = v8;
          goto LABEL_17;
        }

        unint64_t v7 = v6;
LABEL_19:
        MEMORY[0x186E0535C](v40, v17);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        unint64_t v8 = String.subscript.getter();
        unint64_t v6 = v25;
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        if ((v8 ^ v6) >= 0x4000)
        {
          unint64_t v6 = a1;
          uint64_t result = specialized Parser.tryEat<A>(sequence:)(17756LL, 0xE200000000000000LL);
          if ((result & 1) == 0) {
            continue;
          }
        }

        goto LABEL_27;
      }

      a1 = v38;
      if (v11 >> 14 < v7 >> 14)
      {
        __break(1u);
        goto LABEL_44;
      }

LABEL_17:
      *(void *)(a1 + 16) = v7;
      *(void *)(a1 + 24) = v11;
      goto LABEL_19;
    }
  }

LABEL_27:
  if (v7 >> 14 < v37 >> 14)
  {
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }

  uint64_t v2 = v41;
  unint64_t v6 = v42;
  if ((*(_BYTE *)(a1 + 56) & 0x40) != 0)
  {
    uint64_t result = specialized StringProtocol.spansMultipleLinesInRegexLiteral.getter(v41, v42);
    if ((result & 1) != 0)
    {
      unint64_t v8 = *(void *)(a1 + 72);
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) != 0)
      {
LABEL_31:
        unint64_t v29 = *(void *)(v8 + 16);
        unint64_t v28 = *(void *)(v8 + 24);
        if (v29 >= v28 >> 1)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v28 > 1),  v29 + 1,  1,  (char *)v8);
          unint64_t v8 = result;
        }

        *(void *)(v8 + 16) = v29 + 1;
        unint64_t v30 = v8 + 80 * v29;
        *(_BYTE *)(v30 + 32) = 1;
        *(void *)(v30 + 40) = 0xD000000000000041LL;
        *(void *)(v30 + 48) = 0x8000000181008EF0LL;
        *(void *)(v30 + 56) = v37;
        *(void *)(v30 + 64) = v7;
        *(void *)(v30 + 72) = 3LL;
        *(void *)(v30 + 80) = 0LL;
        *(void *)(v30 + 88) = 0LL;
        *(void *)(v30 + 96) = 0LL;
        *(_BYTE *)(v30 + 104) = 36;
        *(void *)(a1 + 72) = v8;
        goto LABEL_34;
      }

  __break(1u);
  return result;
}

    uint64_t v65 = type metadata accessor for AST.Atom.Kind(0LL);
    return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v65 - 8) + 56LL))( v109,  1LL,  1LL,  v65);
  }

LABEL_46:
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v8 + 16) + 1LL,  1,  (char *)v8);
      unint64_t v8 = result;
      goto LABEL_31;
    }
  }

void static SyntaxOptions.multilineCompilerLiteral.getter(void *a1@<X8>)
{
  *a1 = 64LL;
}

uint64_t specialized StringProtocol.spansMultipleLinesInRegexLiteral.getter(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    return 0LL;
  }
  uint64_t v5 = 0LL;
  uint64_t v6 = a2 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v7 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  while (1)
  {
    if ((a2 & 0x1000000000000000LL) != 0)
    {
      int v9 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }

    else
    {
      if ((a2 & 0x2000000000000000LL) != 0)
      {
        v13[0] = a1;
        v13[1] = v6;
        int v9 = *((unsigned __int8 *)v13 + v5);
        if (*((char *)v13 + v5) < 0) {
          __asm { BR              X9 }
        }
      }

      else
      {
        uint64_t v8 = v7;
        if ((a1 & 0x1000000000000000LL) == 0) {
          uint64_t v8 = _StringObject.sharedUTF8.getter();
        }
        int v9 = *(unsigned __int8 *)(v8 + v5);
        if (*(char *)(v8 + v5) < 0) {
          __asm { BR              X10 }
        }
      }

      uint64_t v10 = 1LL;
    }

    uint64_t v11 = 1LL;
    if (v9 == 10 || v9 == 13) {
      break;
    }
    v5 += v10;
    if (v5 >= v2) {
      return 0LL;
    }
  }

  return v11;
}

uint64_t Parser.lexInterpolation()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v72 = v1[1];
  unint64_t v73 = v1[2];
  uint64_t v68 = v1[3];
  uint64_t v69 = *v1;
  char v67 = *((_BYTE *)v1 + 32);
  uint64_t v3 = v1[6];
  uint64_t v65 = v1[7];
  uint64_t v66 = v1[5];
  char v64 = *((_BYTE *)v1 + 64);
  uint64_t v4 = v1[9];
  swift_bridgeObjectRetain();
  uint64_t v71 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((specialized Parser.tryEat<A>(sequence:)(31548LL, 0xE200000000000000LL) & 1) == 0) {
    goto LABEL_24;
  }
  uint64_t v60 = v4;
  unint64_t v6 = v1[2];
  unint64_t v5 = v1[3];
  swift_bridgeObjectRetain();
  uint64_t v7 = String.subscript.getter();
  unint64_t v9 = v8;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v62 = v6;
  if ((v7 ^ v9) >= 0x4000)
  {
    uint64_t v74 = v2;
    do
    {
      swift_bridgeObjectRetain();
      uint64_t v14 = String.subscript.getter();
      unint64_t v16 = v15;
      swift_bridgeObjectRelease();
      LOBYTE(vHasher._combine(_:)(v0 >> 14) = specialized Sequence<>.starts<A>(with:)(15997LL, 0xE200000000000000LL, v14, v16);
      uint64_t result = swift_bridgeObjectRelease();
      if ((v14 & 1) != 0) {
        break;
      }
      uint64_t v17 = (char *)v2[9];
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v18 = String.subscript.getter();
      unint64_t v20 = v19;
      swift_bridgeObjectRelease();
      if (!((v18 ^ v20) >> 14))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v2 = v74;
        break;
      }

      uint64_t v76 = Substring.subscript.getter();
      uint64_t v78 = v21;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      String.subscript.getter();
      swift_bridgeObjectRelease();
      unint64_t v22 = v6;
      unint64_t v6 = Substring.index(_:offsetBy:limitedBy:)();
      char v24 = v23;
      uint64_t result = swift_bridgeObjectRelease();
      if ((v24 & 1) != 0)
      {
        uint64_t v2 = v74;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v17 + 2) + 1LL,  1,  v17);
        }
        unint64_t v6 = v22;
        unint64_t v26 = *((void *)v17 + 2);
        unint64_t v25 = *((void *)v17 + 3);
        if (v26 >= v25 >> 1) {
          uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v25 > 1),  v26 + 1,  1,  v17);
        }
        *((void *)v17 + 2) = v26 + 1;
        unint64_t v27 = &v17[80 * v26];
        v27[32] = 0;
        *((void *)v27 + 5) = 0xD000000000000022LL;
        *((void *)v27 + 6) = 0x8000000181009440LL;
        *((void *)v27 + 7) = v22;
        *((void *)v27 + 8) = v22;
        *(_OWORD *)(v27 + 72) = 0u;
        *(_OWORD *)(v27 + 88) = 0u;
        v27[104] = -1;
        v74[9] = (uint64_t)v17;
        swift_bridgeObjectRetain();
        String.subscript.getter();
        swift_bridgeObjectRelease();
        uint64_t v28 = Substring.distance(from:to:)();
        swift_bridgeObjectRelease();
        if (v28 < 1) {
          goto LABEL_6;
        }
        swift_bridgeObjectRetain();
        String.subscript.getter();
        swift_bridgeObjectRelease();
        unint64_t v29 = Substring.index(_:offsetBy:limitedBy:)();
        char v31 = v30;
        uint64_t result = swift_bridgeObjectRelease();
        if ((v31 & 1) != 0) {
          goto LABEL_6;
        }
        if (v5 >> 14 < v29 >> 14) {
          goto LABEL_39;
        }
        unint64_t v6 = v29;
      }

      else
      {
        uint64_t v2 = v74;
        if (v5 >> 14 < v6 >> 14) {
          goto LABEL_37;
        }
      }

      v2[2] = v6;
      v2[3] = v5;
LABEL_6:
      MEMORY[0x186E0535C](v76, v78);
      swift_bridgeObjectRelease();
      unint64_t v5 = v2[3];
      swift_bridgeObjectRetain();
      uint64_t v11 = String.subscript.getter();
      unint64_t v13 = v12;
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
    }

    while ((v11 ^ v13) >> 14);
  }

  if (v6 >> 14 < v62 >> 14) {
    goto LABEL_38;
  }
  if ((specialized Parser.tryEat<A>(sequence:)(15997LL, 0xE200000000000000LL) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v4 = v60;
LABEL_24:
    uint64_t v33 = v2[9];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v34 = specialized Collection.dropFirst(_:)(*(void *)(v4 + 16), v33);
    uint64_t v36 = v35;
    uint64_t v38 = v37;
    int64_t v40 = v39 >> 1;
    swift_bridgeObjectRetain();
    uint64_t result = swift_unknownObjectRetain();
    uint64_t v41 = v36 - 32;
    uint64_t v42 = v38;
    uint64_t v43 = v38;
LABEL_25:
    uint64_t v44 = v41 + 80 * v42;
    while (1)
    {
      if (v40 == v43)
      {
        swift_bridgeObjectRelease();
        uint64_t result = swift_unknownObjectRelease_n();
        *uint64_t v2 = v69;
        v2[1] = v72;
        v2[2] = v73;
        v2[3] = v68;
        *((_BYTE *)v2 + 32) = v67;
        v2[5] = v66;
        v2[6] = v71;
        v2[7] = v65;
        *((_BYTE *)v2 + 64) = v64;
        v2[9] = v4;
        *(_OWORD *)a1 = 0u;
        *(_OWORD *)(a1 + 16) = 0u;
        return result;
      }

      if (v42 < v38 || v43 >= v40) {
        break;
      }
      int v45 = *(unsigned __int8 *)(v44 + 32);
      ++v43;
      v44 += 80LL;
      if (!v45)
      {
        uint64_t v77 = v34;
        uint64_t v79 = v33;
        uint64_t v75 = v41;
        uint64_t v59 = *(void *)(v44 - 24);
        uint64_t v61 = *(void *)(v44 - 40);
        uint64_t v46 = *(void *)(v44 - 8);
        uint64_t v57 = *(void *)(v44 - 32);
        uint64_t v58 = *(void *)(v44 - 16);
        uint64_t v47 = *(void *)v44;
        uint64_t v48 = *(void *)(v44 + 8);
        uint64_t v49 = *(void *)(v44 + 16);
        unsigned __int8 v50 = *(_BYTE *)(v44 + 24);
        swift_bridgeObjectRetain();
        uint64_t v63 = v46;
        uint64_t v51 = v46;
        uint64_t v52 = v47;
        outlined copy of ParseError?(v51, v47, v48, v49, v50);
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v4 + 16) + 1LL,  1,  (char *)v4);
          uint64_t v4 = result;
        }

        unint64_t v54 = *(void *)(v4 + 16);
        unint64_t v53 = *(void *)(v4 + 24);
        uint64_t v55 = v4;
        if (v54 >= v53 >> 1)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v53 > 1),  v54 + 1,  1,  (char *)v4);
          uint64_t v55 = result;
        }

        *(void *)(v55 + 16) = v54 + 1;
        uint64_t v4 = v55;
        unint64_t v56 = v55 + 80 * v54;
        *(_BYTE *)(v56 + 32) = 0;
        *(void *)(v56 + 40) = v61;
        *(void *)(v56 + 48) = v57;
        *(void *)(v56 + 56) = v59;
        *(void *)(v56 + 64) = v58;
        *(void *)(v56 + 72) = v63;
        *(void *)(v56 + 80) = v52;
        *(void *)(v56 + 88) = v48;
        *(void *)(v56 + 96) = v49;
        *(_BYTE *)(v56 + 104) = v50;
        uint64_t v42 = v43;
        uint64_t v34 = v77;
        uint64_t v33 = v79;
        uint64_t v41 = v75;
        goto LABEL_25;
      }
    }

    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v32 = v2[2];
  if (v32 >> 14 >= v73 >> 14)
  {
    *(void *)a1 = 0LL;
    *(void *)(a1 + 8) = 0xE000000000000000LL;
    *(void *)(a1 + 16) = v73;
    *(void *)(a1 + 24) = v32;
    return result;
  }

LABEL_40:
  __break(1u);
  return result;
}

void *Parser.lexQuote()@<X0>( void *(*a1)(uint64_t *__return_ptr, uint64_t)@<X0>, void *a2@<X8>)
{
  unint64_t v4 = *(void *)(v2 + 16);
  uint64_t result = a1(&v8, v2);
  uint64_t v6 = v9;
  if (v9)
  {
    unint64_t v7 = *(void *)(v2 + 16);
    if (v7 >> 14 < v4 >> 14)
    {
      __break(1u);
    }

    else
    {
      *a2 = v8;
      a2[1] = v6;
      a2[2] = v4;
      a2[3] = v7;
    }
  }

  else
  {
    *(_OWORD *)a2 = 0u;
    *((_OWORD *)a2 + 1) = 0u;
  }

  return result;
}

uint64_t closure #1 in Parser.lexComment()@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = (void *)result;
  if ((*(_BYTE *)(result + 32) & 1) == 0)
  {
    uint64_t result = specialized Parser.tryEat<A>(sequence:)(2309928LL, 0xE300000000000000LL);
    if ((result & 1) != 0)
    {
      unint64_t v4 = v2;
      uint64_t v5 = 41LL;
      uint64_t v6 = 0xE100000000000000LL;
LABEL_7:
      uint64_t result = specialized Parser.lexUntil(_:)(v4, v5, v6, &v34);
      unint64_t v8 = v35;
      *a2 = v34;
      a2[1] = v8;
      return result;
    }
  }

  uint64_t v7 = v2[7];
  if ((v7 & 8) != 0)
  {
    uint64_t result = specialized Parser.tryEat<A>(sequence:)(10799LL, 0xE200000000000000LL);
    if ((result & 1) != 0)
    {
      unint64_t v4 = v2;
      uint64_t v5 = 12074LL;
      uint64_t v6 = 0xE200000000000000LL;
      goto LABEL_7;
    }

    uint64_t v7 = v2[7];
  }

  if ((v7 & 2) == 0
    || (v9._uint64_t countAndFlagsBits = 35LL,
        v9._uint64_t object = (void *)0xE100000000000000LL,
        uint64_t result = Parser.tryEat(_:)(v9),
        (result & 1) == 0))
  {
    *a2 = 0LL;
    a2[1] = 0LL;
    return result;
  }

  char v30 = a2;
  unint64_t v10 = v2[2];
  uint64_t v34 = 0LL;
  unint64_t v35 = 0xE000000000000000LL;
  uint64_t result = closure #1 in closure #1 in Parser.lexComment()((uint64_t)v2);
  unint64_t v31 = v10;
  if ((result & 1) == 0)
  {
    unint64_t v11 = v10;
    unint64_t v32 = v2;
    while (1)
    {
      unint64_t v10 = v2[2];
      unint64_t v12 = v2[3];
      unint64_t v13 = (char *)v2[9];
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v14 = String.subscript.getter();
      unint64_t v16 = v15;
      swift_bridgeObjectRelease();
      if (!((v14 ^ v16) >> 14))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v10 = v11;
        goto LABEL_30;
      }

      uint64_t v17 = Substring.subscript.getter();
      uint64_t v33 = v18;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      String.subscript.getter();
      swift_bridgeObjectRelease();
      unint64_t v19 = Substring.index(_:offsetBy:limitedBy:)();
      char v21 = v20;
      uint64_t result = swift_bridgeObjectRelease();
      if ((v21 & 1) == 0) {
        break;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v13 + 2) + 1LL,  1,  v13);
      }
      unint64_t v23 = *((void *)v13 + 2);
      unint64_t v22 = *((void *)v13 + 3);
      if (v23 >= v22 >> 1) {
        unint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v22 > 1),  v23 + 1,  1,  v13);
      }
      *((void *)v13 + 2) = v23 + 1;
      char v24 = &v13[80 * v23];
      v24[32] = 0;
      *((void *)v24 + 5) = 0xD000000000000022LL;
      *((void *)v24 + 6) = 0x8000000181009440LL;
      *((void *)v24 + 7) = v10;
      *((void *)v24 + 8) = v10;
      *(_OWORD *)(v24 + 72) = 0u;
      *(_OWORD *)(v24 + 88) = 0u;
      v24[104] = -1;
      v32[9] = v13;
      swift_bridgeObjectRetain();
      String.subscript.getter();
      swift_bridgeObjectRelease();
      uint64_t v25 = Substring.distance(from:to:)();
      swift_bridgeObjectRelease();
      if (v25 < 1)
      {
        uint64_t v2 = v32;
      }

      else
      {
        swift_bridgeObjectRetain();
        String.subscript.getter();
        swift_bridgeObjectRelease();
        unint64_t v26 = Substring.index(_:offsetBy:limitedBy:)();
        char v28 = v27;
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v2 = v32;
        if ((v28 & 1) == 0)
        {
          if (v12 >> 14 < v26 >> 14) {
            goto LABEL_33;
          }
          unint64_t v10 = v26;
LABEL_28:
          v2[2] = v10;
          v2[3] = v12;
        }
      }

      MEMORY[0x186E0535C](v17, v33);
      swift_bridgeObjectRelease();
      uint64_t result = closure #1 in closure #1 in Parser.lexComment()((uint64_t)v2);
      unint64_t v11 = v10;
      if ((result & 1) != 0) {
        goto LABEL_30;
      }
    }

    if (v12 >> 14 < v19 >> 14)
    {
      __break(1u);
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
      return result;
    }

    unint64_t v10 = v19;
    uint64_t v2 = v32;
    goto LABEL_28;
  }

uint64_t closure #1 in closure #1 in Parser.lexComment()(uint64_t a1)
{
  uint64_t v2 = String.subscript.getter();
  unint64_t v4 = v3;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v2 ^ v4) >= 0x4000) {
    __asm { BR              X10 }
  }

  return 1LL;
}

uint64_t Parser.lexMatchingOption()@<X0>(void *a1@<X8>)
{
  unint64_t v3 = *(void **)v1;
  uint64_t v4 = *(void *)(v1 + 8);
  unint64_t v6 = *(void *)(v1 + 16);
  uint64_t v5 = *(char **)(v1 + 24);
  LOBYTE(v61) = *(_BYTE *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 48);
  unint64_t v59 = *(void *)(v1 + 56);
  uint64_t v60 = *(void *)(v1 + 40);
  LOBYTE(v58) = *(_BYTE *)(v1 + 64);
  uint64_t v8 = *(void *)(v1 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v62 = v5;
  uint64_t v9 = String.subscript.getter();
  uint64_t countAndFlagsBits = v10;
  if (!((v9 ^ v12) >> 14))
  {
    uint64_t v57 = v3;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_3;
  }

  uint64_t object = Substring.subscript.getter();
  uint64_t v17 = v30;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  Parser.advance(_:)(1LL);
  if (object == 105 && v17 == 0xE100000000000000LL || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    uint64_t countAndFlagsBits = 0LL;
  }

  else if (object == 74 && v17 == 0xE100000000000000LL || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    uint64_t countAndFlagsBits = 1LL;
  }

  else if (object == 109 && v17 == 0xE100000000000000LL || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    uint64_t countAndFlagsBits = 2LL;
  }

  else
  {
    if (object != 110 || v17 != 0xE100000000000000LL) {
      goto LABEL_34;
    }
LABEL_35:
    swift_bridgeObjectRelease();
    uint64_t countAndFlagsBits = 3LL;
  }

LABEL_3:
      uint64_t object = *(void *)(v1 + 72);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v63 = (char *)v8;
      specialized Collection.dropFirst(_:)(*(void *)(v8 + 16), object);
      uint64_t v15 = v14;
      uint64_t v17 = v16;
      unint64_t v3 = (void *)(v18 >> 1);
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      uint64_t countAndFlagsBits = v15 - 32;
      uint64_t v19 = v17;
      uint64_t v8 = v17;
LABEL_4:
      uint64_t v20 = countAndFlagsBits + 80 * v19;
      while (1)
      {
        if (v3 == (void *)v8)
        {
          swift_bridgeObjectRelease();
          uint64_t result = swift_unknownObjectRelease_n();
          *(void *)uint64_t v1 = v57;
          *(void *)(v1 + 8) = v4;
          *(void *)(v1 + 16) = v6;
          *(void *)(v1 + 24) = v62;
          *(_BYTE *)(v1 + 32) = v61;
          *(void *)(v1 + 40) = v60;
          *(void *)(v1 + 48) = v7;
          *(void *)(v1 + 56) = v59;
          *(_BYTE *)(v1 + 64) = v58;
          *(void *)(v1 + 72) = v63;
          a1[1] = 0LL;
          a1[2] = 0LL;
          *a1 = 20LL;
          return result;
        }

        int v21 = *(unsigned __int8 *)(v20 + 32);
        ++v8;
        v20 += 80LL;
        if (!v21)
        {
          uint64_t v52 = v7;
          uint64_t v53 = v4;
          unint64_t v54 = v6;
          uint64_t v55 = v1;
          unint64_t v56 = a1;
          uint64_t v48 = *(void *)(v20 - 24);
          uint64_t v49 = *(void *)(v20 - 40);
          uint64_t v22 = *(void *)(v20 - 8);
          uint64_t v47 = *(void *)(v20 - 16);
          uint64_t v24 = *(void *)v20;
          uint64_t v23 = *(void *)(v20 + 8);
          uint64_t v25 = *(void *)(v20 + 16);
          unsigned __int8 v26 = *(_BYTE *)(v20 + 24);
          uint64_t v50 = *(void *)(v20 - 32);
          swift_bridgeObjectRetain();
          outlined copy of ParseError?(v22, v24, v23, v25, v26);
          uint64_t v51 = countAndFlagsBits;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v63 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v63 + 2) + 1LL,  1,  v63);
          }
          unint64_t v28 = *((void *)v63 + 2);
          unint64_t v27 = *((void *)v63 + 3);
          uint64_t object = v28 + 1;
          if (v28 >= v27 >> 1) {
            uint64_t v63 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v27 > 1),  v28 + 1,  1,  v63);
          }
          *((void *)v63 + 2) = object;
          unint64_t v29 = &v63[80 * v28];
          v29[32] = 0;
          uint64_t countAndFlagsBits = v51;
          *((void *)v29 + 5) = v49;
          *((void *)v29 + 6) = v50;
          *((void *)v29 + 7) = v48;
          *((void *)v29 + 8) = v47;
          *((void *)v29 + 9) = v22;
          *((void *)v29 + 10) = v24;
          *((void *)v29 + 11) = v23;
          *((void *)v29 + 12) = v25;
          v29[104] = v26;
          uint64_t v19 = v8;
          uint64_t v1 = v55;
          a1 = v56;
          uint64_t v4 = v53;
          unint64_t v6 = v54;
          uint64_t v7 = v52;
          goto LABEL_4;
        }
      }

      __break(1u);
LABEL_34:
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_35;
      }
      if (object == 115 && v17 == 0xE100000000000000LL || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        uint64_t countAndFlagsBits = 4LL;
        goto LABEL_20;
      }

      if (object == 85 && v17 == 0xE100000000000000LL) {
        goto LABEL_45;
      }
    }

    swift_bridgeObjectRelease();
    uint64_t v8 = v64;
LABEL_51:
    v34._uint64_t countAndFlagsBits = 120LL;
    v34._uint64_t object = (void *)0xE100000000000000LL;
    if (Parser.tryEat(_:)(v34)) {
      uint64_t countAndFlagsBits = 7LL;
    }
    else {
      uint64_t countAndFlagsBits = 6LL;
    }
  }

  *a1 = countAndFlagsBits;
  a1[1] = v6;
  a1[2] = v32;
  return result;
}

double Parser.lexMatchingOptionSequence()@<D0>(unint64_t *a1@<X8>)
{
  unint64_t v4 = v1[1];
  unint64_t v5 = v1[2];
  unint64_t v6 = (char *)v1[6];
  unint64_t v7 = v1[9];
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v8 = String.subscript.getter();
  if ((v8 ^ v9) >> 14)
  {
    uint64_t v10 = Substring.subscript.getter();
    unint64_t v11 = v12;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v10 = 0LL;
    unint64_t v11 = 0LL;
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v11)
  {
    if (v10 == 41 && v11 == (char *)0xE100000000000000LL)
    {
      swift_bridgeObjectRelease();
LABEL_9:
      *a1 = 0LL;
      a1[1] = 0LL;
      unint64_t v14 = MEMORY[0x18961AFE8];
      a1[2] = 1LL;
      a1[3] = v14;
      a1[4] = 0LL;
      a1[5] = 0LL;
      a1[6] = 1LL;
      a1[7] = v14;
      return result;
    }

    unint64_t v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v4 & 1) != 0) {
      goto LABEL_9;
    }
  }

  v15._uint64_t countAndFlagsBits = 94LL;
  v15._uint64_t object = (void *)0xE100000000000000LL;
  BOOL v52 = Parser.tryEat(_:)(v15);
  if (v52)
  {
    unint64_t v51 = v1[2];
    if (v51 >> 14 < v5 >> 14)
    {
      __break(1u);
LABEL_57:
      __break(1u);
LABEL_58:
      unint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v11 + 2) + 1LL,  1,  v11);
      goto LABEL_19;
    }

    unint64_t v53 = v5;
  }

  else
  {
    unint64_t v53 = 0LL;
    unint64_t v51 = 0LL;
  }

  Parser.lexMatchingOption()(&v56);
  char v16 = v56;
  unint64_t v6 = (char *)MEMORY[0x18961AFE8];
  if (v56 != 20LL)
  {
    __int128 v27 = v57;
    do
    {
      __int128 v54 = v27;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v6 + 2) + 1LL,  1,  v6);
      }
      unint64_t v29 = *((void *)v6 + 2);
      unint64_t v28 = *((void *)v6 + 3);
      __int128 v30 = v54;
      if (v29 >= v28 >> 1)
      {
        unint64_t v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v28 > 1),  v29 + 1,  1,  v6);
        __int128 v30 = v54;
        unint64_t v6 = v32;
      }

      *((void *)v6 + 2) = v29 + 1;
      unint64_t v31 = &v6[24 * v29];
      v31[32] = v16;
      *(_OWORD *)(v31 + 40) = v30;
      Parser.lexMatchingOption()(&v56);
      char v16 = v56;
      __int128 v27 = v57;
    }

    while (v56 != 20LL);
  }

  unint64_t v4 = v1[2];
  v17._uint64_t countAndFlagsBits = 45LL;
  v17._uint64_t object = (void *)0xE100000000000000LL;
  BOOL v18 = Parser.tryEat(_:)(v17);
  if (!v18)
  {
    unint64_t v24 = 0LL;
    unint64_t v26 = 0LL;
    uint64_t v23 = (char *)MEMORY[0x18961AFE8];
    unint64_t v25 = v53;
    goto LABEL_32;
  }

  BOOL v50 = v18;
  unint64_t v7 = v1[2];
  unint64_t v2 = v53;
  if (v7 >> 14 < v4 >> 14) {
    goto LABEL_57;
  }
  if (!v52) {
    goto LABEL_22;
  }
  unint64_t v11 = (char *)v1[9];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_58;
  }
LABEL_19:
  unint64_t v20 = *((void *)v11 + 2);
  unint64_t v19 = *((void *)v11 + 3);
  if (v20 >= v19 >> 1) {
    unint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v19 > 1),  v20 + 1,  1,  v11);
  }
  *((void *)v11 + 2) = v20 + 1;
  int v21 = &v11[80 * v20];
  v21[32] = 1;
  *((void *)v21 + 5) = 0xD000000000000031LL;
  *((void *)v21 + 6) = 0x8000000181008C40LL;
  *((void *)v21 + 7) = v2;
  *((void *)v21 + 8) = v51;
  *((void *)v21 + 9) = 6LL;
  *((void *)v21 + 10) = 0LL;
  *((void *)v21 + 11) = 0LL;
  *((void *)v21 + 12) = 0LL;
  v21[104] = 36;
  v1[9] = v11;
LABEL_22:
  unint64_t v47 = v7;
  unint64_t v48 = v4;
  uint64_t v49 = a1;
  Parser.lexMatchingOption()(&v56);
  unsigned __int8 v22 = v56;
  uint64_t v23 = (char *)MEMORY[0x18961AFE8];
  if (v56 != 20LL)
  {
    uint64_t v34 = *((void *)&v57 + 1);
    uint64_t v33 = v57;
    while (v22 - 15 >= 3)
    {
      if (v22 - 13 <= 1)
      {
        Swift::String v35 = (char *)v1[9];
        uint64_t v55 = v23;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          Swift::String v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v35 + 2) + 1LL,  1,  v35);
        }
        unint64_t v37 = *((void *)v35 + 2);
        unint64_t v42 = *((void *)v35 + 3);
        unint64_t v38 = v37 + 1;
        unint64_t v40 = 0xD00000000000002FLL;
        unint64_t v39 = 0x8000000181008A60LL;
        if (v37 >= v42 >> 1) {
          Swift::String v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v42 > 1),  v37 + 1,  1,  v35);
        }
        uint64_t v41 = 11LL;
        goto LABEL_48;
      }

LABEL_49:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v23 + 2) + 1LL,  1,  v23);
      }
      unint64_t v45 = *((void *)v23 + 2);
      unint64_t v44 = *((void *)v23 + 3);
      if (v45 >= v44 >> 1) {
        uint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v44 > 1),  v45 + 1,  1,  v23);
      }
      *((void *)v23 + 2) = v45 + 1;
      Swift::String v46 = &v23[24 * v45];
      v46[32] = v22;
      *((void *)v46 + 5) = v33;
      *((void *)v46 + 6) = v34;
      Parser.lexMatchingOption()(&v56);
      unsigned __int8 v22 = v56;
      uint64_t v34 = *((void *)&v57 + 1);
      uint64_t v33 = v57;
    }

    Swift::String v35 = (char *)v1[9];
    uint64_t v55 = v23;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      Swift::String v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v35 + 2) + 1LL,  1,  v35);
    }
    unint64_t v37 = *((void *)v35 + 2);
    unint64_t v36 = *((void *)v35 + 3);
    unint64_t v38 = v37 + 1;
    unint64_t v39 = 0x8000000181008A30LL;
    if (v37 >= v36 >> 1) {
      Swift::String v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v36 > 1),  v37 + 1,  1,  v35);
    }
    unint64_t v40 = 0xD00000000000002CLL;
    uint64_t v41 = 12LL;
LABEL_48:
    *((void *)v35 + 2) = v38;
    unint64_t v43 = &v35[80 * v37];
    v43[32] = 1;
    *((void *)v43 + 5) = v40;
    *((void *)v43 + 6) = v39;
    *((void *)v43 + 7) = v33;
    *((void *)v43 + 8) = v34;
    *((void *)v43 + 9) = v41;
    *((void *)v43 + 10) = 0LL;
    *((void *)v43 + 11) = 0LL;
    *((void *)v43 + 12) = 0LL;
    v43[104] = 36;
    v1[9] = v35;
    uint64_t v23 = v55;
    goto LABEL_49;
  }

  __int128 v57 = v7;
  unint64_t v13 = *(void *)(v1 + 72);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  specialized Collection.dropFirst(_:)(*(void *)(v62 + 16), v13);
  unsigned __int8 v22 = v21;
  unint64_t v7 = v23;
  uint64_t v1 = v24 >> 1;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  unint64_t v25 = v22 - 32;
  unint64_t v26 = v7;
  uint64_t v10 = v7;
LABEL_50:
  __int128 v27 = v25 + 80 * v26;
  while (1)
  {
    if (v1 == v10)
    {
      swift_bridgeObjectRelease();
      double result = swift_unknownObjectRelease_n();
      *(void *)unint64_t v2 = v4;
      *(void *)(v2 + 8) = v5;
      *(void *)(v2 + 16) = v6;
      *(void *)(v2 + 24) = v57;
      *(_BYTE *)(v2 + 32) = v61.i8[0];
      *(void *)(v2 + 40) = v60;
      *(void *)(v2 + 48) = v8;
      *(void *)(v2 + 56) = v59;
      *(_BYTE *)(v2 + 64) = v58;
      *(void *)(v2 + 72) = v62;
      *(_OWORD *)a1 = xmmword_181005F10;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      return result;
    }

    if (v26 < v7 || v10 >= v1) {
      break;
    }
    unint64_t v28 = *(unsigned __int8 *)(v27 + 32);
    ++v10;
    v27 += 80LL;
    if (!v28)
    {
      BOOL v52 = v8;
      unint64_t v53 = v5;
      uint64_t v55 = a1;
      uint64_t v56 = v25;
      BOOL v50 = v13;
      __int128 v54 = v6;
      unint64_t v48 = *(void *)(v27 - 24);
      uint64_t v49 = *(void *)(v27 - 40);
      unint64_t v29 = *(void *)(v27 - 8);
      Swift::String v46 = *(void *)(v27 - 32);
      unint64_t v47 = *(void *)(v27 - 16);
      __int128 v30 = *(void *)v27;
      unint64_t v31 = *(void *)(v27 + 8);
      unint64_t v32 = *(void *)(v27 + 16);
      uint64_t v33 = *(_BYTE *)(v27 + 24);
      swift_bridgeObjectRetain();
      outlined copy of ParseError?(v29, v30, v31, v32, v33);
      unint64_t v51 = v4;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        *(void *)&unint64_t v62 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v62 + 16) + 1LL,  1,  (char *)v62);
      }
      Swift::String v35 = *(void *)(v62 + 16);
      uint64_t v34 = *(void *)(v62 + 24);
      unint64_t v25 = v56;
      if (v35 >= v34 >> 1)
      {
        unint64_t v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v34 > 1),  v35 + 1,  1,  (char *)v62);
        unint64_t v25 = v56;
        *(void *)&unint64_t v62 = v37;
      }

      *(void *)(v62 + 16) = v35 + 1;
      unint64_t v36 = v62 + 80 * v35;
      *(_BYTE *)(v36 + 32) = 0;
      *(void *)(v36 + 40) = v49;
      *(void *)(v36 + 48) = v46;
      *(void *)(v36 + 56) = v48;
      *(void *)(v36 + 64) = v47;
      *(void *)(v36 + 72) = v29;
      *(void *)(v36 + 80) = v30;
      *(void *)(v36 + 88) = v31;
      *(void *)(v36 + 96) = v32;
      *(_BYTE *)(v36 + 104) = v33;
      unint64_t v26 = v10;
      unint64_t v6 = v54;
      a1 = v55;
      uint64_t v8 = v52;
      unint64_t v5 = v53;
      unint64_t v13 = v50;
      unint64_t v4 = v51;
      goto LABEL_50;
    }
  }

  __break(1u);
LABEL_69:
  __break(1u);
  do
  {
    __break(1u);
LABEL_71:
    double result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v10 + 16) + 1LL,  1,  (char *)v10);
    uint64_t v10 = result;
LABEL_63:
    unint64_t v43 = *(void *)(v10 + 16);
    unint64_t v42 = *(void *)(v10 + 24);
    if (v43 >= v42 >> 1)
    {
      double result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v42 > 1),  v43 + 1,  1,  (char *)v10);
      uint64_t v10 = result;
    }

    *(void *)(v10 + 16) = v43 + 1;
    unint64_t v44 = v10 + 80 * v43;
    *(_BYTE *)(v44 + 32) = 1;
    *(void *)(v44 + 40) = v1;
    *(void *)(v44 + 48) = v60;
    *(void *)(v44 + 56) = v7;
    *(void *)(v44 + 64) = v7;
    *(_OWORD *)(v44 + 72) = v62;
    *(void *)(v44 + 88) = 0LL;
    *(void *)(v44 + 96) = 0LL;
    *(_BYTE *)(v44 + 104) = 3;
    *(void *)(v2 + 72) = v10;
    unint64_t v6 = v5;
LABEL_66:
    unint64_t v45 = *(void *)(v2 + 16);
  }

  while (v45 >> 14 < v6 >> 14);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v13;
  *(int64x2_t *)(a1 + 16) = v61;
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v45;
  return result;
}

uint64_t Parser.lexChangeMatchingOptionAtom()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  char v7 = *((_BYTE *)v1 + 32);
  uint64_t v8 = v1[6];
  uint64_t v55 = v1[7];
  uint64_t v57 = v1[5];
  char v53 = *((_BYTE *)v1 + 64);
  uint64_t v9 = v1[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((specialized Parser.tryEat<A>(sequence:)(16168LL, 0xE200000000000000LL) & 1) != 0
    && (Parser.lexMatchingOptionSequence()((unint64_t *)&v60), (uint64_t v10 = v62) != 0))
  {
    __int128 v11 = v60;
    char v12 = v61;
    uint64_t v13 = v64;
    uint64_t v54 = v63;
    char v56 = v65;
    uint64_t v58 = v66;
    v14._uint64_t countAndFlagsBits = 41LL;
    v14._uint64_t object = (void *)0xE100000000000000LL;
    if (!Parser.tryEat(_:)(v14))
    {
      __int128 v60 = xmmword_181005F70;
      uint64_t v61 = 0LL;
      uint64_t v62 = 0LL;
      LOBYTE(v63) = 3;
      Parser.errorAtCurrentPosition(_:)(&v60);
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    *(_OWORD *)a1 = v11;
    *(_BYTE *)(a1 + 16) = v12 & 1;
    *(void *)(a1 + 24) = v10;
    *(void *)(a1 + 32) = v54;
    *(void *)(a1 + 40) = v13;
    *(_BYTE *)(a1 + 48) = v56 & 1;
    *(void *)(a1 + 56) = v58;
  }

  else
  {
    char v50 = v7;
    uint64_t v51 = v6;
    uint64_t v52 = v5;
    uint64_t v16 = v1[9];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    specialized Collection.dropFirst(_:)(*(void *)(v9 + 16), v16);
    uint64_t v59 = v8;
    uint64_t v18 = v17;
    uint64_t v20 = v19;
    int64_t v22 = v21 >> 1;
    swift_bridgeObjectRetain();
    uint64_t result = swift_unknownObjectRetain();
    uint64_t v23 = v18 - 32;
    uint64_t v24 = v20;
    uint64_t v25 = v20;
LABEL_7:
    uint64_t v26 = v23 + 80 * v24;
    while (1)
    {
      if (v22 == v25)
      {
        swift_bridgeObjectRelease();
        uint64_t result = swift_unknownObjectRelease_n();
        uint64_t *v1 = v4;
        v1[1] = v3;
        v1[2] = v52;
        v1[3] = v51;
        *((_BYTE *)v1 + 32) = v50;
        v1[5] = v57;
        v1[6] = v8;
        v1[7] = v55;
        *((_BYTE *)v1 + 64) = v53;
        v1[9] = v9;
        *(_OWORD *)a1 = 0u;
        *(_OWORD *)(a1 + 16) = 0u;
        *(_OWORD *)(a1 + 32) = 0u;
        *(_OWORD *)(a1 + 48) = 0u;
        return result;
      }

      if (v24 < v20 || v25 >= v22) {
        break;
      }
      int v27 = *(unsigned __int8 *)(v26 + 32);
      ++v25;
      v26 += 80LL;
      if (!v27)
      {
        uint64_t v48 = v4;
        uint64_t v49 = v3;
        uint64_t v45 = a1;
        uint64_t v41 = *(void *)(v26 - 24);
        uint64_t v42 = *(void *)(v26 - 40);
        uint64_t v28 = *(void *)(v26 - 8);
        uint64_t v39 = *(void *)(v26 - 32);
        uint64_t v40 = *(void *)(v26 - 16);
        uint64_t v30 = *(void *)v26;
        uint64_t v29 = *(void *)(v26 + 8);
        uint64_t v31 = *(void *)(v26 + 16);
        uint64_t v43 = v9;
        unsigned __int8 v32 = *(_BYTE *)(v26 + 24);
        swift_bridgeObjectRetain();
        uint64_t v46 = v28;
        uint64_t v47 = v30;
        uint64_t v33 = v30;
        uint64_t v34 = v29;
        unsigned __int8 v44 = v32;
        unsigned __int8 v35 = v32;
        uint64_t v9 = v43;
        outlined copy of ParseError?(v28, v33, v29, v31, v35);
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v43 + 16) + 1LL,  1,  (char *)v43);
          uint64_t v9 = result;
        }

        unint64_t v37 = *(void *)(v9 + 16);
        unint64_t v36 = *(void *)(v9 + 24);
        a1 = v45;
        if (v37 >= v36 >> 1)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v36 > 1),  v37 + 1,  1,  (char *)v9);
          uint64_t v9 = result;
        }

        *(void *)(v9 + 16) = v37 + 1;
        unint64_t v38 = v9 + 80 * v37;
        *(_BYTE *)(v38 + 32) = 0;
        *(void *)(v38 + 40) = v42;
        *(void *)(v38 + 48) = v39;
        *(void *)(v38 + 56) = v41;
        *(void *)(v38 + 64) = v40;
        *(void *)(v38 + 72) = v46;
        *(void *)(v38 + 80) = v47;
        *(void *)(v38 + 88) = v34;
        *(void *)(v38 + 96) = v31;
        *(_BYTE *)(v38 + 104) = v44;
        uint64_t v24 = v25;
        uint64_t v4 = v48;
        uint64_t v3 = v49;
        uint64_t v8 = v59;
        goto LABEL_7;
      }
    }

    __break(1u);
  }

  return result;
}

uint64_t Parser.lexExplicitPCRE2GroupStart()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v6 = v1[2];
  uint64_t v5 = v1[3];
  char v7 = *((_BYTE *)v1 + 32);
  uint64_t v8 = v1[6];
  uint64_t v56 = v1[7];
  uint64_t v57 = v1[5];
  char v55 = *((_BYTE *)v1 + 64);
  uint64_t v9 = v1[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((specialized Parser.tryEat<A>(sequence:)(10792LL, 0xE200000000000000LL) & 1) != 0)
  {
    if ((specialized Parser.tryEat<A>(sequence:)(0x3A63696D6F7461LL, 0xE700000000000000LL) & 1) != 0)
    {
      uint64_t v10 = 3LL;
LABEL_11:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)a1 = v10;
      *(_OWORD *)(a1 + 8) = 0u;
      *(_OWORD *)(a1 + 24) = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
      *(_OWORD *)(a1 + 56) = 0u;
      *(void *)(a1 + 72) = 0LL;
      *(_BYTE *)(a1 + 80) = 3;
      return result;
    }

    if ((specialized Parser.tryEat<A>(sequence:)(979463280LL, 0xE400000000000000LL) & 1) != 0)
    {
      uint64_t v10 = 4LL;
      goto LABEL_11;
    }

    if ((specialized Parser.tryEat<A>(sequence:)(0xD000000000000013LL, 0x800000018100AD90LL) & 1) != 0)
    {
      uint64_t v10 = 4LL;
      goto LABEL_11;
    }

    if ((specialized Parser.tryEat<A>(sequence:)(979463278LL, 0xE400000000000000LL) & 1) != 0
      || (specialized Parser.tryEat<A>(sequence:)(0xD000000000000013LL, 0x800000018100ADB0LL) & 1) != 0)
    {
      uint64_t v10 = 5LL;
      goto LABEL_11;
    }

    if ((specialized Parser.tryEat<A>(sequence:)(979528816LL, 0xE400000000000000LL) & 1) != 0
      || (specialized Parser.tryEat<A>(sequence:)(0xD000000000000014LL, 0x800000018100ADD0LL) & 1) != 0)
    {
      uint64_t v10 = 7LL;
      goto LABEL_11;
    }

    if ((specialized Parser.tryEat<A>(sequence:)(979528814LL, 0xE400000000000000LL) & 1) != 0
      || (specialized Parser.tryEat<A>(sequence:)(0xD000000000000014LL, 0x800000018100ADF0LL) & 1) != 0)
    {
      uint64_t v10 = 8LL;
      goto LABEL_11;
    }

    if ((specialized Parser.tryEat<A>(sequence:)(0x3A616C70616ELL, 0xE600000000000000LL) & 1) != 0
      || (specialized Parser.tryEat<A>(sequence:)(0xD00000000000001ELL, 0x800000018100AE10LL) & 1) != 0)
    {
      uint64_t v10 = 6LL;
      goto LABEL_11;
    }

    if ((specialized Parser.tryEat<A>(sequence:)(0x3A626C70616ELL, 0xE600000000000000LL) & 1) != 0
      || (specialized Parser.tryEat<A>(sequence:)(0xD00000000000001FLL, 0x800000018100AE30LL) & 1) != 0)
    {
      uint64_t v10 = 9LL;
      goto LABEL_11;
    }

    if ((specialized Parser.tryEat<A>(sequence:)(3830387LL, 0xE300000000000000LL) & 1) != 0
      || (specialized Parser.tryEat<A>(sequence:)(0x725F747069726373LL, 0xEB000000003A6E75LL) & 1) != 0)
    {
      uint64_t v10 = 10LL;
      goto LABEL_11;
    }

    if ((specialized Parser.tryEat<A>(sequence:)(980579169LL, 0xE400000000000000LL) & 1) != 0)
    {
      uint64_t v10 = 11LL;
      goto LABEL_11;
    }

    if ((specialized Parser.tryEat<A>(sequence:)(0xD000000000000012LL, 0x800000018100AE50LL) & 1) != 0)
    {
      uint64_t v10 = 11LL;
      goto LABEL_11;
    }
  }

  uint64_t v53 = v3;
  uint64_t v54 = a1;
  char v52 = v7;
  uint64_t v51 = v5;
  uint64_t v12 = v8;
  uint64_t v13 = v4;
  uint64_t v14 = v1[9];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  specialized Collection.dropFirst(_:)(*(void *)(v9 + 16), v14);
  uint64_t v49 = v15;
  uint64_t v17 = v16;
  int64_t v19 = v18 >> 1;
  uint64_t v20 = v6;
  uint64_t v21 = v53;
  uint64_t v22 = v54;
  swift_bridgeObjectRetain();
  uint64_t result = swift_unknownObjectRetain();
  uint64_t v23 = v49 - 32;
  uint64_t v24 = v17;
  uint64_t v25 = v17;
LABEL_32:
  uint64_t v26 = v23 + 80 * v24;
  while (1)
  {
    if (v19 == v25)
    {
      swift_bridgeObjectRelease();
      uint64_t result = swift_unknownObjectRelease_n();
      uint64_t *v1 = v13;
      v1[1] = v21;
      v1[2] = v20;
      v1[3] = v51;
      *((_BYTE *)v1 + 32) = v52;
      v1[5] = v57;
      v1[6] = v12;
      v1[7] = v56;
      *((_BYTE *)v1 + 64) = v55;
      v1[9] = v9;
      *(_OWORD *)uint64_t v22 = 0u;
      *(_OWORD *)(v22 + 16) = 0u;
      *(_OWORD *)(v22 + 32) = 0u;
      *(_OWORD *)(v22 + 48) = 0u;
      *(_OWORD *)(v22 + 64) = 0u;
      *(_BYTE *)(v22 + 80) = -1;
      return result;
    }

    if (v24 < v17 || v25 >= v19) {
      break;
    }
    int v27 = *(unsigned __int8 *)(v26 + 32);
    ++v25;
    v26 += 80LL;
    if (!v27)
    {
      uint64_t v46 = v23;
      uint64_t v47 = v20;
      uint64_t v48 = v13;
      uint64_t v50 = v12;
      uint64_t v42 = *(void *)(v26 - 24);
      uint64_t v43 = *(void *)(v26 - 40);
      uint64_t v40 = *(void *)(v26 - 32);
      uint64_t v41 = *(void *)(v26 - 16);
      uint64_t v44 = v9;
      uint64_t v28 = *(void *)(v26 - 8);
      uint64_t v29 = *(void *)v26;
      uint64_t v30 = *(void *)(v26 + 8);
      uint64_t v31 = *(void *)(v26 + 16);
      unsigned __int8 v32 = *(_BYTE *)(v26 + 24);
      swift_bridgeObjectRetain();
      uint64_t v45 = v28;
      uint64_t v33 = v28;
      uint64_t v34 = v44;
      outlined copy of ParseError?(v33, v29, v30, v31, v32);
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v44 + 16) + 1LL,  1,  (char *)v44);
        uint64_t v34 = result;
      }

      uint64_t v35 = v34;
      unint64_t v36 = *(void *)(v34 + 16);
      uint64_t v37 = v35;
      unint64_t v38 = *(void *)(v35 + 24);
      if (v36 >= v38 >> 1)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v38 > 1),  v36 + 1,  1,  (char *)v37);
        uint64_t v37 = result;
      }

      *(void *)(v37 + 16) = v36 + 1;
      unint64_t v39 = v37 + 80 * v36;
      uint64_t v9 = v37;
      *(_BYTE *)(v39 + 32) = 0;
      *(void *)(v39 + 40) = v43;
      *(void *)(v39 + 48) = v40;
      *(void *)(v39 + 56) = v42;
      *(void *)(v39 + 64) = v41;
      *(void *)(v39 + 72) = v45;
      *(void *)(v39 + 80) = v29;
      *(void *)(v39 + 88) = v30;
      *(void *)(v39 + 96) = v31;
      *(_BYTE *)(v39 + 104) = v32;
      uint64_t v24 = v25;
      uint64_t v22 = v54;
      uint64_t v21 = v53;
      uint64_t v12 = v50;
      uint64_t v20 = v47;
      uint64_t v13 = v48;
      uint64_t v23 = v46;
      goto LABEL_32;
    }
  }

  __break(1u);
  return result;
}

uint64_t closure #1 in Parser.expectIdentifier(_:endingWith:eatEnding:)@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned __int8 a4@<W3>, void *a5@<X8>)
{
  uint64_t v7 = a1[1];
  unint64_t v8 = a1[2];
  uint64_t v9 = a1;
  swift_bridgeObjectRetain();
  uint64_t v10 = String.subscript.getter();
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v10 ^ v12) < 0x4000
    || (swift_bridgeObjectRetain(),
        uint64_t v13 = String.subscript.getter(),
        unint64_t v15 = v14,
        char v74 = a5,
        swift_bridgeObjectRelease(),
        LOBYTE(v13) = specialized Sequence<>.starts<A>(with:)(a2, a3, v13, v15),
        swift_bridgeObjectRelease(),
        (v13 & 1) != 0))
  {
    __int128 v78 = a4;
    uint64_t v79 = 0LL;
    uint64_t v80 = 0LL;
    char v81 = 26;
    uint64_t result = Parser.errorAtCurrentPosition(_:)(&v78);
    goto LABEL_4;
  }

  uint64_t v72 = a2;
  int64_t v19 = (char *)v9[9];
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v20 = String.subscript.getter();
  if (!((v20 ^ v21) >> 14)) {
    goto LABEL_50;
  }
  uint64_t v22 = Substring.subscript.getter();
  uint64_t v24 = v23;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  unint64_t v25 = String.index(after:)();
  swift_bridgeObjectRelease();
  if (v25 >> 14 < v8 >> 14)
  {
    __break(1u);
    goto LABEL_45;
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v24)
  {
LABEL_51:
    __break(1u);
    return result;
  }

  swift_bridgeObjectRetain();
  char v26 = Character.isNumber.getter();
  swift_bridgeObjectRelease();
  if ((v26 & 1) != 0)
  {
    a2 = a4;
    *(void *)&__int128 v78 = 0LL;
    *((void *)&v78 + 1) = 0xE000000000000000LL;
    _StringGuts.grow(_:)(29LL);
    uint64_t v27 = 8LL * (char)a4;
    v28._uint64_t countAndFlagsBits = *(void *)&aGroupNacallout[v27];
    v28._uint64_t object = *(void **)&aGroupNacallout[v27 + 24];
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    v29._uint64_t object = (void *)0x8000000181008A90LL;
    v29._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v29);
    uint64_t v7 = 0LL;
    uint64_t v22 = 0xE000000000000000LL;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
LABEL_11:
      unint64_t v31 = *((void *)v19 + 2);
      unint64_t v30 = *((void *)v19 + 3);
      if (v31 >= v30 >> 1) {
        int64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v30 > 1),  v31 + 1,  1,  v19);
      }
      *((void *)v19 + 2) = v31 + 1;
      unsigned __int8 v32 = &v19[80 * v31];
      v32[32] = 1;
      *((void *)v32 + 5) = v7;
      *((void *)v32 + 6) = v22;
      *((void *)v32 + 7) = v8;
      *((void *)v32 + 8) = v25;
      *((void *)v32 + 9) = a2;
      *((void *)v32 + 10) = 0LL;
      *((void *)v32 + 11) = 0LL;
      *((void *)v32 + 12) = 0LL;
      v32[104] = 28;
      v9[9] = v19;
      goto LABEL_14;
    }

LABEL_45:
    int64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v19 + 2) + 1LL,  1,  v19);
    goto LABEL_11;
  }

LABEL_37:
        v73[2] = v25;
        v73[3] = v38;
        goto LABEL_39;
      }
    }

    break;
  }

  unint64_t v25 = v43;
  a5 = v74;
LABEL_22:
  swift_bridgeObjectRelease();
  if (v25 >> 14 < v43 >> 14)
  {
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    uint64_t result = swift_bridgeObjectRelease();
    goto LABEL_51;
  }

  uint64_t result = swift_bridgeObjectRelease();
LABEL_4:
  uint64_t v17 = 0LL;
  unint64_t v18 = 0xE000000000000000LL;
LABEL_5:
  *a5 = v17;
  a5[1] = v18;
  return result;
}

uint64_t Character.isWordCharacter.getter(uint64_t a1, uint64_t a2)
{
  if ((Character.isLetter.getter() & 1) != 0
    || (Character.isNumber.getter() & 1) != 0
    || a1 == 95 && a2 == 0xE100000000000000LL)
  {
    return 1LL;
  }

  else
  {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }

uint64_t key path getter for Character.isWordCharacter : Character@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if ((Character.isLetter.getter() & 1) != 0
    || (Character.isNumber.getter() & 1) != 0
    || (v3 == 95 ? (BOOL v5 = v4 == 0xE100000000000000LL) : (BOOL v5 = 0), v5))
  {
    uint64_t result = 1LL;
  }

  else
  {
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  }

  *a2 = result & 1;
  return result;
}

uint64_t Parser.expectNamedGroup(endingWith:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  uint64_t result = lexBalanced #1 (_:) in Parser.expectNamedGroup(endingWith:)((uint64_t *)&v23, v3, a1, a2, (uint64_t)&v25);
  unsigned __int8 v8 = v30;
  if (v30 == 255)
  {
    unint64_t v13 = v3[2];
    uint64_t result = closure #1 in Parser.expectIdentifier(_:endingWith:eatEnding:)(v3, a1, a2, 0, &v25);
    unint64_t v14 = v3[2];
    if (v14 >> 14 < v13 >> 14)
    {
      __break(1u);
    }

    else
    {
      __int128 v15 = v25;
      __int128 v23 = v25;
      *(void *)&__int128 v24 = v13;
      *((void *)&v24 + 1) = v14;
      swift_bridgeObjectRetain();
      lexBalanced #1 (_:) in Parser.expectNamedGroup(endingWith:)((uint64_t *)&v23, v3, a1, a2, (uint64_t)&v25);
      swift_bridgeObjectRelease();
      unsigned __int8 v16 = v30;
      if (v30 == 255)
      {
        uint64_t result = specialized Parser.tryEat<A>(sequence:)(a1, a2);
        if ((result & 1) == 0)
        {
          *(void *)&__int128 v25 = a1;
          *((void *)&v25 + 1) = a2;
          swift_bridgeObjectRetain();
          *(void *)&__int128 v25 = String.init<A>(_:)();
          *((void *)&v25 + 1) = v18;
          __int128 v26 = 0uLL;
          LOBYTE(v27) = 3;
          Parser.errorAtCurrentPosition(_:)(&v25);
          uint64_t result = swift_bridgeObjectRelease();
        }

        *(_OWORD *)a3 = v15;
        *(void *)(a3 + 16) = v13;
        *(void *)(a3 + 24) = v14;
        *(_OWORD *)(a3 + 32) = 0u;
        *(_OWORD *)(a3 + 48) = 0u;
        *(_OWORD *)(a3 + 64) = 0u;
        *(_BYTE *)(a3 + 80) = 0;
      }

      else
      {
        __int128 v17 = v29;
        __int128 v21 = v27;
        __int128 v22 = v28;
        __int128 v19 = v25;
        __int128 v20 = v26;
        uint64_t result = swift_bridgeObjectRelease();
        *(_OWORD *)a3 = v19;
        *(_OWORD *)(a3 + 16) = v20;
        *(_OWORD *)(a3 + 32) = v21;
        *(_OWORD *)(a3 + 48) = v22;
        *(_OWORD *)(a3 + 64) = v17;
        *(_BYTE *)(a3 + 80) = v16;
      }
    }
  }

  else
  {
    __int128 v9 = v26;
    __int128 v10 = v27;
    __int128 v11 = v28;
    __int128 v12 = v29;
    *(_OWORD *)a3 = v25;
    *(_OWORD *)(a3 + 16) = v9;
    *(_OWORD *)(a3 + 32) = v10;
    *(_OWORD *)(a3 + 48) = v11;
    *(_OWORD *)(a3 + 64) = v12;
    *(_BYTE *)(a3 + 80) = v8;
  }

  return result;
}

uint64_t lexBalanced #1 (_:) in Parser.expectNamedGroup(endingWith:)@<X0>( uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = *a1;
  uint64_t v9 = a1[1];
  uint64_t v11 = a1[2];
  uint64_t v12 = a1[3];
  unint64_t v13 = a2[2];
  v14._uint64_t countAndFlagsBits = 45LL;
  v14._uint64_t object = (void *)0xE100000000000000LL;
  uint64_t result = Parser.tryEat(_:)(v14);
  if ((result & 1) == 0)
  {
    *(_OWORD *)(a5 + 48) = 0u;
    *(_OWORD *)(a5 + 64) = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
    *(_OWORD *)(a5 + 32) = 0u;
    *(_OWORD *)a5 = 0u;
    *(_BYTE *)(a5 + 80) = -1;
    return result;
  }

  unint64_t v16 = a2[2];
  if (v16 >> 14 < v13 >> 14)
  {
    __break(1u);
    goto LABEL_10;
  }

  uint64_t v20 = v10;
  uint64_t result = closure #1 in Parser.expectIdentifier(_:endingWith:eatEnding:)(a2, a3, a4, 0, &v21);
  unint64_t v17 = a2[2];
  if (v16 >> 14 > v17 >> 14)
  {
LABEL_10:
    __break(1u);
    return result;
  }

  __int128 v18 = v21;
  if ((specialized Parser.tryEat<A>(sequence:)(a3, a4) & 1) == 0)
  {
    *(void *)&__int128 v21 = a3;
    *((void *)&v21 + 1) = a4;
    swift_bridgeObjectRetain();
    *(void *)&__int128 v21 = String.init<A>(_:)();
    *((void *)&v21 + 1) = v19;
    uint64_t v22 = 0LL;
    uint64_t v23 = 0LL;
    char v24 = 3;
    Parser.errorAtCurrentPosition(_:)(&v21);
    swift_bridgeObjectRelease();
  }

  *(void *)a5 = v20;
  *(void *)(a5 + 8) = v9;
  *(void *)(a5 + 16) = v11;
  *(void *)(a5 + 24) = v12;
  *(void *)(a5 + 32) = v13;
  *(void *)(a5 + 40) = v16;
  *(_OWORD *)(a5 + 48) = v18;
  *(void *)(a5 + 64) = v16;
  *(void *)(a5 + 72) = v17;
  *(_BYTE *)(a5 + 80) = 1;
  return swift_bridgeObjectRetain();
}

uint64_t Parser.lexGroupStart()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v58 = *(void *)v1;
  unint64_t v4 = *(void *)(v1 + 16);
  uint64_t v56 = *(void *)(v1 + 24);
  char v54 = *(_BYTE *)(v1 + 32);
  uint64_t v5 = *(void *)(v1 + 40);
  uint64_t v6 = *(void *)(v1 + 48);
  uint64_t v7 = *(void *)(v1 + 56);
  char v8 = *(_BYTE *)(v1 + 64);
  uint64_t v9 = *(void *)(v1 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  closure #1 in closure #1 in Parser.lexGroupStart()(v1, (uint64_t)v60);
  unsigned __int8 v10 = v61;
  if (v61 == 255)
  {
    unint64_t v49 = v4;
    uint64_t v51 = v7;
    char v48 = v8;
    uint64_t v53 = v5;
    uint64_t v13 = *(void *)(v1 + 72);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    specialized Collection.dropFirst(_:)(*(void *)(v9 + 16), v13);
    uint64_t v15 = v14;
    uint64_t v17 = v16;
    int64_t v19 = v18 >> 1;
    swift_bridgeObjectRetain();
    uint64_t result = swift_unknownObjectRetain();
    uint64_t v20 = v15 - 32;
    uint64_t v21 = v17;
    uint64_t v22 = v17;
    uint64_t v23 = v6;
LABEL_5:
    uint64_t v24 = v20 + 80 * v21;
    while (1)
    {
      if (v19 == v22)
      {
        swift_bridgeObjectRelease();
        uint64_t result = swift_unknownObjectRelease_n();
        *(void *)uint64_t v1 = v58;
        *(void *)(v1 + 8) = v3;
        *(void *)(v1 + 16) = v49;
        *(void *)(v1 + 24) = v56;
        *(_BYTE *)(v1 + 32) = v54;
        *(void *)(v1 + 40) = v53;
        *(void *)(v1 + 48) = v23;
        *(void *)(v1 + 56) = v51;
        *(_BYTE *)(v1 + 64) = v48;
        *(void *)(v1 + 72) = v9;
        *(_OWORD *)a1 = 0u;
        *(_OWORD *)(a1 + 16) = 0u;
        *(_OWORD *)(a1 + 32) = 0u;
        *(_OWORD *)(a1 + 48) = 0u;
        *(_OWORD *)(a1 + 64) = 0u;
        *(void *)(a1 + 88) = 0LL;
        *(void *)(a1 + 96) = 0LL;
        *(void *)(a1 + 80) = 255LL;
        return result;
      }

      if (v21 < v17 || v22 >= v19) {
        break;
      }
      int v25 = *(unsigned __int8 *)(v24 + 32);
      ++v22;
      v24 += 80LL;
      if (!v25)
      {
        uint64_t v46 = v3;
        uint64_t v47 = v20;
        uint64_t v43 = v23;
        uint64_t v38 = *(void *)(v24 - 24);
        uint64_t v39 = *(void *)(v24 - 40);
        uint64_t v26 = *(void *)(v24 - 8);
        uint64_t v37 = *(void *)(v24 - 16);
        uint64_t v28 = *(void *)v24;
        uint64_t v27 = *(void *)(v24 + 8);
        uint64_t v29 = *(void *)(v24 + 16);
        uint64_t v40 = v9;
        unsigned __int8 v30 = *(_BYTE *)(v24 + 24);
        uint64_t v45 = *(void *)(v24 - 32);
        swift_bridgeObjectRetain();
        uint64_t v44 = v28;
        uint64_t v42 = v27;
        uint64_t v31 = v27;
        uint64_t v32 = v29;
        unsigned __int8 v41 = v30;
        unsigned __int8 v33 = v30;
        uint64_t v9 = v40;
        outlined copy of ParseError?(v26, v28, v31, v29, v33);
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v40 + 16) + 1LL,  1,  (char *)v40);
          uint64_t v9 = result;
        }

        unint64_t v35 = *(void *)(v9 + 16);
        unint64_t v34 = *(void *)(v9 + 24);
        uint64_t v20 = v47;
        if (v35 >= v34 >> 1)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v34 > 1),  v35 + 1,  1,  (char *)v9);
          uint64_t v20 = v47;
          uint64_t v9 = result;
        }

        *(void *)(v9 + 16) = v35 + 1;
        unint64_t v36 = v9 + 80 * v35;
        *(_BYTE *)(v36 + 32) = 0;
        *(void *)(v36 + 40) = v39;
        *(void *)(v36 + 48) = v45;
        *(void *)(v36 + 56) = v38;
        *(void *)(v36 + 64) = v37;
        *(void *)(v36 + 72) = v26;
        uint64_t v23 = v43;
        *(void *)(v36 + 80) = v44;
        *(void *)(v36 + 88) = v42;
        *(void *)(v36 + 96) = v32;
        *(_BYTE *)(v36 + 104) = v41;
        uint64_t v21 = v22;
        uint64_t v3 = v46;
        goto LABEL_5;
      }
    }

    __break(1u);
  }

  else
  {
    __int128 v57 = v60[1];
    __int128 v59 = v60[0];
    __int128 v52 = v60[3];
    __int128 v55 = v60[2];
    __int128 v50 = v60[4];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t v12 = *(void *)(v1 + 16);
    if (v12 >> 14 >= v4 >> 14)
    {
      *(_OWORD *)a1 = v59;
      *(_OWORD *)(a1 + 16) = v57;
      *(_OWORD *)(a1 + 32) = v55;
      *(_OWORD *)(a1 + 48) = v52;
      *(_OWORD *)(a1 + 64) = v50;
      *(_BYTE *)(a1 + 80) = v10;
      *(void *)(a1 + 88) = v4;
      *(void *)(a1 + 96) = v12;
      return result;
    }
  }

  __break(1u);
  return result;
}

double closure #1 in closure #1 in Parser.lexGroupStart()@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v4 = v74;
  if (v74 != 255)
  {
    double result = *(double *)&v70;
    __int128 v6 = *(_OWORD *)v71;
    __int128 v7 = *(_OWORD *)&v71[16];
    __int128 v8 = v72;
    __int128 v9 = v73;
    *(_OWORD *)a2 = v70;
    *(_OWORD *)(a2 + 16) = v6;
    *(_OWORD *)(a2 + 32) = v7;
    *(_OWORD *)(a2 + 48) = v8;
    *(_OWORD *)(a2 + 64) = v9;
LABEL_10:
    *(_BYTE *)(a2 + 80) = v4;
    return result;
  }

  uint64_t v10 = *(void *)(a1 + 8);
  char v11 = *(_BYTE *)(a1 + 32);
  uint64_t v12 = *(void *)(a1 + 40);
  uint64_t v13 = *(void *)(a1 + 48);
  uint64_t v14 = *(void *)(a1 + 56);
  char v15 = *(_BYTE *)(a1 + 64);
  uint64_t v16 = (char **)(a1 + 72);
  uint64_t v17 = *(void *)(a1 + 72);
  *(void *)&__int128 v70 = *(void *)a1;
  *((void *)&v70 + 1) = v10;
  *(_OWORD *)unint64_t v71 = *(_OWORD *)(a1 + 16);
  v71[16] = v11;
  *(void *)&v71[24] = v12;
  *(void *)&__int128 v72 = v13;
  *((void *)&v72 + 1) = v14;
  LOBYTE(v73) = v15;
  *((void *)&v73 + 1) = v17;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  closure #1 in Parser.shouldLexGroupLikeAtom()((uint64_t)&v70, &v69);
  uint64_t v18 = *((void *)&v73 + 1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v68 = v18;
  Diagnostics.appendNewFatalErrors(from:)((_RegexParser::Diagnostics)&v68);
  swift_bridgeObjectRelease();
  if ((v69 & 1) != 0
    || (v19._uint64_t countAndFlagsBits = 40LL, v19._object = (void *)0xE100000000000000LL, !Parser.tryEat(_:)(v19)))
  {
    double result = 0.0;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
    char v4 = -1;
    goto LABEL_10;
  }

  v20._uint64_t countAndFlagsBits = 63LL;
  v20._uint64_t object = (void *)0xE100000000000000LL;
  if (!Parser.tryEat(_:)(v20))
  {
    uint64_t v24 = *(void *)(a1 + 56);
    if ((v24 & 0x20) != 0)
    {
      if ((specialized Parser.tryEat<A>(sequence:)(14943LL, 0xE200000000000000LL) & 1) != 0) {
        goto LABEL_49;
      }
      uint64_t v24 = *(void *)(a1 + 56);
    }

    if ((v24 & 0x80) == 0)
    {
      double result = 0.0;
      *(_OWORD *)(a2 + 48) = 0u;
      *(_OWORD *)(a2 + 64) = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      *(_OWORD *)(a2 + 32) = 0u;
      *(_OWORD *)a2 = 0u;
      char v4 = 3;
      goto LABEL_10;
    }

    goto LABEL_49;
  }

  v21._uint64_t countAndFlagsBits = 58LL;
  v21._uint64_t object = (void *)0xE100000000000000LL;
  if (Parser.tryEat(_:)(v21))
  {
LABEL_49:
    uint64_t v23 = 1LL;
    goto LABEL_50;
  }

  v22._uint64_t countAndFlagsBits = 124LL;
  v22._uint64_t object = (void *)0xE100000000000000LL;
  if (Parser.tryEat(_:)(v22))
  {
    uint64_t v23 = 2LL;
LABEL_50:
    *(void *)a2 = v23;
    double result = 0.0;
    *(_OWORD *)(a2 + 8) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(void *)(a2 + 72) = 0LL;
    char v4 = 3;
    goto LABEL_10;
  }

  v25._uint64_t countAndFlagsBits = 62LL;
  v25._uint64_t object = (void *)0xE100000000000000LL;
  if (!Parser.tryEat(_:)(v25))
  {
    v26._uint64_t countAndFlagsBits = 61LL;
    v26._uint64_t object = (void *)0xE100000000000000LL;
    if (Parser.tryEat(_:)(v26))
    {
      uint64_t v23 = 4LL;
      goto LABEL_50;
    }

    v27._uint64_t countAndFlagsBits = 33LL;
    v27._uint64_t object = (void *)0xE100000000000000LL;
    if (Parser.tryEat(_:)(v27))
    {
      uint64_t v23 = 5LL;
      goto LABEL_50;
    }

    v28._uint64_t countAndFlagsBits = 42LL;
    v28._uint64_t object = (void *)0xE100000000000000LL;
    if (Parser.tryEat(_:)(v28))
    {
      uint64_t v23 = 6LL;
      goto LABEL_50;
    }

    if ((specialized Parser.tryEat<A>(sequence:)(15676LL, 0xE200000000000000LL) & 1) != 0)
    {
      uint64_t v23 = 7LL;
      goto LABEL_50;
    }

    if ((specialized Parser.tryEat<A>(sequence:)(8508LL, 0xE200000000000000LL) & 1) != 0)
    {
      uint64_t v23 = 8LL;
      goto LABEL_50;
    }

    if ((specialized Parser.tryEat<A>(sequence:)(10812LL, 0xE200000000000000LL) & 1) != 0)
    {
      uint64_t v23 = 9LL;
      goto LABEL_50;
    }

    v29._uint64_t countAndFlagsBits = 60LL;
    v29._uint64_t object = (void *)0xE100000000000000LL;
    if (Parser.tryEat(_:)(v29) || (specialized Parser.tryEat<A>(sequence:)(15440LL, 0xE200000000000000LL) & 1) != 0)
    {
      uint64_t v30 = 62LL;
LABEL_33:
      Parser.expectNamedGroup(endingWith:)(v30, 0xE100000000000000LL, (uint64_t)&v70);
      char v4 = v74;
      __int128 v31 = *(_OWORD *)v71;
      *(_OWORD *)a2 = v70;
      *(_OWORD *)(a2 + 16) = v31;
      __int128 v32 = v72;
      *(_OWORD *)(a2 + 32) = *(_OWORD *)&v71[16];
      *(_OWORD *)(a2 + 48) = v32;
      double result = *(double *)&v73;
      *(_OWORD *)(a2 + 64) = v73;
      goto LABEL_10;
    }

    v33._uint64_t countAndFlagsBits = 39LL;
    v33._uint64_t object = (void *)0xE100000000000000LL;
    if (Parser.tryEat(_:)(v33))
    {
      uint64_t v30 = 39LL;
      goto LABEL_33;
    }

    Parser.lexMatchingOptionSequence()((unint64_t *)&v70);
    __int128 v67 = *(_OWORD *)&v71[8];
    if (*(void *)&v71[8])
    {
      __int128 v65 = v70;
      uint64_t v66 = *((void *)&v72 + 1);
      char v63 = v72;
      uint64_t v64 = *(void *)&v71[24];
      char v62 = v71[0];
      v34._uint64_t countAndFlagsBits = 58LL;
      v34._uint64_t object = (void *)0xE100000000000000LL;
      if (Parser.tryEat(_:)(v34))
      {
LABEL_59:
        *(_OWORD *)a2 = v65;
        *(void *)(a2 + 16) = v62 & 1;
        double result = *(double *)&v67;
        *(_OWORD *)(a2 + 24) = v67;
        *(void *)(a2 + 40) = v64;
        *(void *)(a2 + 48) = v63 & 1;
        *(void *)(a2 + 64) = 0LL;
        *(void *)(a2 + 72) = 0LL;
        *(void *)(a2 + 56) = v66;
        char v4 = 2;
        goto LABEL_10;
      }

      unint64_t v35 = *(void *)(a1 + 16);
      unint64_t v36 = *(char **)(a1 + 72);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v37 = String.subscript.getter();
      unint64_t v39 = v38;
      if (!((v37 ^ v40) >> 14))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
LABEL_58:
        __int128 v70 = xmmword_181005F70;
        *(_OWORD *)unint64_t v71 = 0uLL;
        v71[16] = 3;
        Parser.errorAtCurrentPosition(_:)(&v70);
        goto LABEL_59;
      }

      uint64_t v61 = Substring.subscript.getter();
      uint64_t v53 = v52;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      unint64_t v41 = String.index(after:)();
      swift_bridgeObjectRelease();
      if (v41 >> 14 >= v35 >> 14)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v53)
        {
          *(void *)&__int128 v70 = v61;
          *((void *)&v70 + 1) = v53;
          *(_OWORD *)unint64_t v71 = 0uLL;
          v71[16] = 17;
          swift_bridgeObjectRetain();
          ParseError.description.getter();
          uint64_t v55 = v54;
          uint64_t v57 = v56;
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v36 + 2) + 1LL,  1,  v36);
          }
          unint64_t v59 = *((void *)v36 + 2);
          unint64_t v58 = *((void *)v36 + 3);
          if (v59 >= v58 >> 1) {
            unint64_t v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v58 > 1),  v59 + 1,  1,  v36);
          }
          *((void *)v36 + 2) = v59 + 1;
          __int128 v60 = &v36[80 * v59];
          v60[32] = 1;
          *((void *)v60 + 5) = v55;
          *((void *)v60 + 6) = v57;
          *((void *)v60 + 7) = v35;
          *((void *)v60 + 8) = v41;
          *((void *)v60 + 9) = v61;
          *((void *)v60 + 10) = v53;
          *((void *)v60 + 11) = 0LL;
          *((void *)v60 + 12) = 0LL;
          v60[104] = 17;
          swift_bridgeObjectRelease_n();
          *uint64_t v16 = v36;
          goto LABEL_59;
        }

        goto LABEL_58;
      }

      goto LABEL_61;
    }

    unint64_t v35 = *(void *)(a1 + 16);
    unint64_t v41 = *(void *)(a1 + 48);
    unint64_t v36 = *(char **)(a1 + 72);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v42 = String.subscript.getter();
    if ((v42 ^ v43) >> 14)
    {
      *(void *)&__int128 v67 = Substring.subscript.getter();
      uint64_t v45 = v44;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      unint64_t v39 = String.index(after:)();
      swift_bridgeObjectRelease();
      if (v39 >> 14 < v35 >> 14)
      {
        __break(1u);
LABEL_61:
        __break(1u);
        goto LABEL_62;
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v45)
      {
        *(void *)&__int128 v70 = 0LL;
        *((void *)&v70 + 1) = 0xE000000000000000LL;
        v46._uint64_t countAndFlagsBits = 63LL;
        v46._uint64_t object = (void *)0xE100000000000000LL;
        String.append(_:)(v46);
        swift_bridgeObjectRetain();
        Character.write<A>(to:)();
        swift_bridgeObjectRelease();
        a1 = *((void *)&v70 + 1);
        unint64_t v41 = v70;
        *(_OWORD *)unint64_t v71 = 0uLL;
        v71[16] = 14;
        ParseError.description.getter();
        uint64_t v66 = v48;
        *(void *)&__int128 v67 = v47;
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
LABEL_45:
          unint64_t v50 = *((void *)v36 + 2);
          unint64_t v49 = *((void *)v36 + 3);
          if (v50 >= v49 >> 1) {
            unint64_t v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v49 > 1),  v50 + 1,  1,  v36);
          }
          *((void *)v36 + 2) = v50 + 1;
          uint64_t v51 = &v36[80 * v50];
          v51[32] = 1;
          *((void *)v51 + 5) = v67;
          *((void *)v51 + 6) = v66;
          *((void *)v51 + 7) = v35;
          *((void *)v51 + 8) = v39;
          *((void *)v51 + 9) = v41;
          *((void *)v51 + 10) = a1;
          *((void *)v51 + 11) = 0LL;
          *((void *)v51 + 12) = 0LL;
          v51[104] = 14;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          *uint64_t v16 = v36;
          goto LABEL_49;
        }

void static SyntaxOptions.namedCapturesOnly.getter(void *a1@<X8>)
{
  *a1 = 128LL;
}

uint64_t Parser.expectNamedReference(endingWith:eatEnding:allowRecursionLevel:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  unint64_t v11 = v5[2];
  uint64_t result = closure #1 in Parser.expectIdentifier(_:endingWith:eatEnding:)(v5, a1, a2, 0, &v22);
  unint64_t v13 = v5[2];
  if (v13 >> 14 < v11 >> 14)
  {
    __break(1u);
  }

  else
  {
    uint64_t v20 = *((void *)&v22 + 1);
    uint64_t v21 = v22;
    if ((a4 & 1) == 0)
    {
      unint64_t v17 = 0LL;
      unint64_t v15 = 0LL;
      __int128 v14 = 0uLL;
      char v16 = 1;
      if ((a3 & 1) == 0) {
        goto LABEL_16;
      }
      goto LABEL_14;
    }

    uint64_t result = Parser.lexRecursionLevel()((uint64_t)&v22);
    __int128 v14 = v22;
    unint64_t v15 = v24;
    if ((v25 & 1) != 0)
    {
      char v16 = 1;
      unint64_t v17 = v23;
      if ((a3 & 1) == 0) {
        goto LABEL_16;
      }
      goto LABEL_14;
    }

    if (v11 >> 14 >= v23 >> 14) {
      unint64_t v11 = v23;
    }
    if (v13 >> 14 < v24 >> 14) {
      unint64_t v13 = v24;
    }
    if (v13 >> 14 >= v11 >> 14)
    {
      unint64_t v17 = v23;
      char v16 = 0;
      if ((a3 & 1) == 0)
      {
LABEL_16:
        *(void *)a5 = v21;
        *(void *)(a5 + 8) = v20;
        *(void *)(a5 + 16) = 0LL;
        *(void *)(a5 + 24) = 0LL;
        *(_BYTE *)(a5 + 32) = 2;
        *(_OWORD *)(a5 + 40) = v14;
        *(void *)(a5 + 56) = v17;
        *(void *)(a5 + 64) = v15;
        *(_BYTE *)(a5 + 72) = v16;
        *(void *)(a5 + 80) = v11;
        *(void *)(a5 + 88) = v13;
        return result;
      }

uint64_t Parser.getClosingDelimiter(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  if (a1 != 39 || a2 != 0xE100000000000000LL)
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
    BOOL v5 = v3 == 34 && a2 == 0xE100000000000000LL;
    BOOL v6 = v5;
    if ((v4 & 1) == 0 && !v6)
    {
      char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      BOOL v8 = v3 == 96 && a2 == 0xE100000000000000LL;
      BOOL v9 = v8;
      if ((v7 & 1) == 0 && !v9)
      {
        char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
        BOOL v11 = v3 == 94 && a2 == 0xE100000000000000LL;
        BOOL v12 = v11;
        if ((v10 & 1) == 0 && !v12)
        {
          char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
          BOOL v14 = v3 == 37 && a2 == 0xE100000000000000LL;
          BOOL v15 = v14;
          if ((v13 & 1) == 0 && !v15)
          {
            char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
            BOOL v17 = v3 == 35 && a2 == 0xE100000000000000LL;
            BOOL v18 = v17;
            if ((v16 & 1) == 0 && !v18)
            {
              char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
              BOOL v20 = v3 == 36 && a2 == 0xE100000000000000LL;
              BOOL v21 = v20;
              if ((v19 & 1) == 0 && !v21 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
              {
                if (v3 == 60 && a2 == 0xE100000000000000LL || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
                  return 62LL;
                }
                if (v3 == 123 && a2 == 0xE100000000000000LL || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
                  return 125LL;
                }
                v23._uint64_t countAndFlagsBits = 0x656C646E61686E55LL;
                v23._uint64_t object = (void *)0xEE00657361632064LL;
                Parser.unreachable(_:)(v23);
              }
            }
          }
        }
      }
    }
  }

  swift_bridgeObjectRetain();
  return v3;
}

uint64_t Parser.lexNumberedReference(allowWholePatternRef:allowRecursionLevel:)@<X0>( int a1@<W0>, int a2@<W1>, uint64_t a3@<X8>)
{
  LODWORD(outlined init with take of AST.Conditional.Condition.Kind((__int128 *)v0, v4) = a2;
  unint64_t v6 = *(void *)v3;
  unint64_t v7 = *(void *)(v3 + 8);
  unint64_t v8 = *(void *)(v3 + 16);
  unint64_t v9 = *(void *)(v3 + 24);
  LODWORD(v70) = *(unsigned __int8 *)(v3 + 32);
  uint64_t v10 = *(void *)(v3 + 48);
  uint64_t v68 = *(void *)(v3 + 56);
  unint64_t v69 = *(void *)(v3 + 40);
  char v67 = *(_BYTE *)(v3 + 64);
  BOOL v11 = *(char **)(v3 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12._uint64_t countAndFlagsBits = 43LL;
  v12._uint64_t object = (void *)0xE100000000000000LL;
  unint64_t v75 = v8;
  unint64_t v13 = v8 >> 14;
  if (!Parser.tryEat(_:)(v12)) {
    goto LABEL_4;
  }
  LODWORD(v74) = v4;
  BOOL v14 = *(char **)(v3 + 16);
  if ((unint64_t)v14 >> 14 < v13)
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }

  uint64_t result = (uint64_t)Parser.lexNumber(_:)(1, (uint64_t)&v76);
  if ((v79 & 1) == 0)
  {
    unint64_t v42 = v77;
    if (v13 < v77 >> 14) {
      unint64_t v42 = v75;
    }
    else {
      unint64_t v43 = v78;
    }
    if ((unint64_t)v43 >> 14 >= v42 >> 14)
    {
      unint64_t v69 = v42;
      __int128 v70 = v43;
      unint64_t v6 = v76;
      unint64_t v9 = BYTE8(v76) & 1;
      int v41 = 1;
      uint64_t v68 = 1LL;
      goto LABEL_38;
    }

    __break(1u);
  }

  else
  {
LABEL_4:
    unint64_t v16 = *(void *)(v3 + 16);
    v17._uint64_t countAndFlagsBits = 45LL;
    v17._uint64_t object = (void *)0xE100000000000000LL;
    if (!Parser.tryEat(_:)(v17))
    {
LABEL_8:
      Parser.lexNumber(_:)(1, (uint64_t)&v76);
      if ((v79 & 1) != 0)
      {
        uint64_t v74 = v10;
        uint64_t v19 = *(void *)(v3 + 72);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        specialized Collection.dropFirst(_:)(*((void *)v11 + 2), v19);
        uint64_t v72 = v20;
        unint64_t v13 = v21;
        int64_t v23 = v22 >> 1;
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        uint64_t v24 = v72 - 32;
        int64_t v25 = v13;
        int64_t v26 = v13;
LABEL_10:
        uint64_t v27 = v24 + 80 * v25;
        uint64_t v10 = v74;
        while (1)
        {
          if (v23 == v26)
          {
            swift_bridgeObjectRelease();
            uint64_t result = swift_unknownObjectRelease_n();
            *(void *)uint64_t v3 = v6;
            *(void *)(v3 + 8) = v7;
            *(void *)(v3 + 16) = v75;
            *(void *)(v3 + 24) = v9;
            *(_BYTE *)(v3 + 32) = (_BYTE)v70;
            *(void *)(v3 + 40) = v69;
            *(void *)(v3 + 48) = v74;
            *(void *)(v3 + 56) = v68;
            *(_BYTE *)(v3 + 64) = v67;
            *(void *)(v3 + 72) = v11;
            *(_OWORD *)a3 = 0u;
            *(_OWORD *)(a3 + 16) = 0u;
            *(void *)(a3 + 32) = 255LL;
            *(_OWORD *)(a3 + 40) = 0u;
            *(_OWORD *)(a3 + 56) = 0u;
            *(_OWORD *)(a3 + 72) = 0u;
            *(void *)(a3 + 88) = 0LL;
            return result;
          }

          int v28 = *(unsigned __int8 *)(v27 + 32);
          ++v26;
          v27 += 80LL;
          if (!v28)
          {
            unint64_t v62 = v6;
            unint64_t v63 = v7;
            uint64_t v73 = v24;
            unint64_t v66 = v9;
            uint64_t v57 = *(void *)(v27 - 24);
            uint64_t v58 = *(void *)(v27 - 40);
            uint64_t v55 = *(void *)(v27 - 32);
            uint64_t v56 = *(void *)(v27 - 16);
            unint64_t v59 = v11;
            uint64_t v30 = *(void *)(v27 - 8);
            uint64_t v29 = *(void *)v27;
            uint64_t v32 = *(void *)(v27 + 8);
            uint64_t v31 = *(void *)(v27 + 16);
            unsigned __int8 v33 = *(_BYTE *)(v27 + 24);
            swift_bridgeObjectRetain();
            uint64_t v60 = v30;
            uint64_t v61 = v32;
            uint64_t v34 = v30;
            BOOL v11 = v59;
            uint64_t v35 = v32;
            uint64_t v36 = v31;
            outlined copy of ParseError?(v34, v29, v35, v31, v33);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              BOOL v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v59 + 2) + 1LL,  1,  v59);
            }
            unint64_t v38 = *((void *)v11 + 2);
            unint64_t v37 = *((void *)v11 + 3);
            uint64_t v24 = v73;
            if (v38 >= v37 >> 1)
            {
              unint64_t v40 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v37 > 1),  v38 + 1,  1,  v11);
              uint64_t v24 = v73;
              BOOL v11 = v40;
            }

            *((void *)v11 + 2) = v38 + 1;
            unint64_t v39 = &v11[80 * v38];
            v39[32] = 0;
            *((void *)v39 + 5) = v58;
            *((void *)v39 + 6) = v55;
            *((void *)v39 + 7) = v57;
            *((void *)v39 + 8) = v56;
            *((void *)v39 + 9) = v60;
            unint64_t v6 = v62;
            *((void *)v39 + 10) = v29;
            *((void *)v39 + 11) = v61;
            *((void *)v39 + 12) = v36;
            v39[104] = v33;
            int64_t v25 = v26;
            unint64_t v7 = v63;
            unint64_t v9 = v66;
            goto LABEL_10;
          }
        }

        __break(1u);
LABEL_58:
        __break(1u);
        goto LABEL_59;
      }

      int v41 = 0;
      __int128 v70 = v78;
      uint64_t v68 = 0LL;
      unint64_t v69 = v77;
      unint64_t v6 = v76;
      unint64_t v9 = BYTE8(v76) & 1;
LABEL_38:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      BOOL v11 = *(char **)(v3 + 16);
      unint64_t v7 = (unint64_t)v11 >> 14;
      if ((unint64_t)v11 >> 14 >= v13)
      {
        if (((v41 | a1) & 1) != 0 || v9 || v6) {
          goto LABEL_46;
        }
        uint64_t v74 = 0LL;
        uint64_t v10 = *(void *)(v3 + 72);
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        LOBYTE(v6) = v4;
        if ((result & 1) != 0)
        {
LABEL_43:
          unint64_t v4 = *(void *)(v10 + 16);
          unint64_t v47 = *(void *)(v10 + 24);
          if (v4 >= v47 >> 1)
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v47 > 1),  v4 + 1,  1,  (char *)v10);
            uint64_t v10 = result;
          }

          *(void *)(v10 + 16) = v4 + 1;
          unint64_t v48 = v10 + 80 * v4;
          *(_BYTE *)(v48 + 32) = 1;
          *(void *)(v48 + 40) = 0xD000000000000022LL;
          *(void *)(v48 + 48) = 0x8000000181008E60LL;
          *(void *)(v48 + 56) = v75;
          *(void *)(v48 + 64) = v11;
          *(void *)(v48 + 72) = 5LL;
          *(void *)(v48 + 80) = 0LL;
          *(void *)(v48 + 88) = 0LL;
          *(void *)(v48 + 96) = 0LL;
          *(_BYTE *)(v48 + 104) = 36;
          *(void *)(v3 + 72) = v10;
          LOBYTE(outlined init with take of AST.Conditional.Condition.Kind((__int128 *)v0, v4) = v6;
          unint64_t v6 = v74;
LABEL_46:
          if ((v4 & 1) != 0)
          {
            uint64_t result = Parser.lexRecursionLevel()((uint64_t)&v76);
            __int128 v49 = v76;
            unint64_t v50 = v77;
            uint64_t v51 = v78;
            if ((v79 & 1) == 0)
            {
              unint64_t v52 = v75;
              if (v13 >= v77 >> 14) {
                unint64_t v52 = v77;
              }
              unint64_t v75 = v52;
              uint64_t v53 = v70;
              if ((unint64_t)v11 >> 14 >= v52 >> 14)
              {
                uint64_t v54 = 0LL;
LABEL_56:
                *(void *)a3 = v6;
                *(void *)(a3 + 8) = v9;
                *(void *)(a3 + 16) = v69;
                *(void *)(a3 + 24) = v53;
                *(void *)(a3 + 32) = v68;
                *(_OWORD *)(a3 + 40) = v49;
                *(void *)(a3 + 56) = v50;
                *(void *)(a3 + 64) = v51;
                *(void *)(a3 + 72) = v54;
                *(void *)(a3 + 80) = v75;
                *(void *)(a3 + 88) = v11;
                return result;
              }

              goto LABEL_64;
            }
          }

          else
          {
            unint64_t v50 = 0LL;
            uint64_t v51 = 0LL;
            __int128 v49 = 0uLL;
          }

          uint64_t v54 = 1LL;
          uint64_t v53 = v70;
          goto LABEL_56;
        }

LABEL_61:
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v10 + 16) + 1LL,  1,  (char *)v10);
        uint64_t v10 = result;
        goto LABEL_43;
      }

      goto LABEL_58;
    }

    unint64_t v64 = v13;
    unint64_t v65 = v9;
    unint64_t v9 = v6;
    LODWORD(v74) = v4;
    unint64_t v13 = v10;
    uint64_t v10 = v7;
    BOOL v18 = *(char **)(v3 + 16);
    unint64_t v6 = (unint64_t)v18 >> 14;
    unint64_t v7 = v16 >> 14;
    if ((unint64_t)v18 >> 14 < v16 >> 14)
    {
LABEL_60:
      __break(1u);
      goto LABEL_61;
    }

    uint64_t result = (uint64_t)Parser.lexNumber(_:)(1, (uint64_t)&v76);
    if ((v79 & 1) != 0)
    {
      unint64_t v7 = v10;
      uint64_t v10 = v13;
      LOBYTE(outlined init with take of AST.Conditional.Condition.Kind((__int128 *)v0, v4) = v74;
      unint64_t v6 = v9;
      unint64_t v13 = v64;
      unint64_t v9 = v65;
      goto LABEL_8;
    }

    unint64_t v44 = v77;
    uint64_t v45 = v76;
    if ((BYTE8(v76) & 1) == 0)
    {
      uint64_t v45 = -(uint64_t)v76;
      if (__OFSUB__(0LL, (void)v76)) {
        goto LABEL_65;
      }
    }

    if (v7 < v77 >> 14) {
      unint64_t v44 = v16;
    }
    else {
      Swift::String v46 = v78;
    }
    if ((unint64_t)v46 >> 14 >= v44 >> 14)
    {
      unint64_t v69 = v44;
      __int128 v70 = v46;
      unint64_t v9 = BYTE8(v76) & 1;
      int v41 = 1;
      uint64_t v68 = 1LL;
      uint64_t v10 = v13;
      LOBYTE(outlined init with take of AST.Conditional.Condition.Kind((__int128 *)v0, v4) = v74;
      unint64_t v13 = v64;
      unint64_t v6 = v45;
      goto LABEL_38;
    }
  }

  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
  return result;
}

uint64_t Parser.lexKnownConditionalStart()@<X0>(_OWORD *a1@<X8>)
{
  BOOL v5 = v1;
  uint64_t v129 = *((void *)v1 + 2);
  uint64_t v130 = *(void *)v1;
  uint64_t v128 = *((void *)v1 + 3);
  char v127 = v1[32];
  uint64_t v6 = *((void *)v1 + 6);
  uint64_t v125 = *((void *)v1 + 7);
  uint64_t v126 = *((void *)v1 + 5);
  char v124 = v1[64];
  unint64_t v7 = (char *)*((void *)v1 + 9);
  uint64_t v132 = *((void *)v1 + 1);
  swift_bridgeObjectRetain();
  uint64_t v131 = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *(void *)&__int128 v134 = v1;
  if ((specialized Parser.tryEat<A>(sequence:)(2637608LL, 0xE300000000000000LL) & 1) == 0) {
    goto LABEL_53;
  }
  uint64_t v4 = (uint64_t)&v142;
  uint64_t v8 = *((void *)v1 + 1);
  uint64_t v111 = *(void *)v1;
  unint64_t v9 = *((void *)v1 + 2);
  uint64_t v116 = *((void *)v1 + 3);
  LOBYTE(v115) = v1[32];
  unint64_t v10 = *((void *)v1 + 6);
  uint64_t v113 = *((void *)v1 + 7);
  uint64_t v114 = *((void *)v1 + 5);
  char v112 = v1[64];
  uint64_t v3 = *((void *)v1 + 9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11._uint64_t countAndFlagsBits = 82LL;
  v11._uint64_t object = (void *)0xE100000000000000LL;
  unint64_t v123 = v10;
  if (!Parser.tryEat(_:)(v11))
  {
    uint64_t v110 = v3;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Character>);
    unint64_t v2 = swift_allocObject();
    *(_OWORD *)(v2 + 16) = xmmword_181005EC0;
    *(void *)(v2 + 32) = 60LL;
    *(void *)(v2 + 40) = 0xE100000000000000LL;
    *(void *)(v2 + 48) = 39LL;
    *(void *)(v2 + 56) = 0xE100000000000000LL;
    uint64_t v15 = specialized Parser.tryEat<A>(anyOf:)(v2);
    uint64_t v17 = v16;
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    if (v17)
    {
      unint64_t v117 = v8;
      unint64_t v118 = v9;
      uint64_t v119 = v7;
      unint64_t v2 = Parser.getClosingDelimiter(for:)(v15, v17);
      uint64_t v19 = v18;
      swift_bridgeObjectRelease();
      Parser.lexNumberedReference(allowWholePatternRef:allowRecursionLevel:)(0, 0, (uint64_t)&v149);
      char v20 = v151;
      if (v151 == 255LL)
      {
        Parser.expectNamedReference(endingWith:eatEnding:allowRecursionLevel:)(v2, v19, 1, 0, (uint64_t)&v135);
        swift_bridgeObjectRelease();
        uint64_t v22 = *((void *)&v135 + 1);
        uint64_t v21 = v135;
        uint64_t v24 = *((void *)&v136 + 1);
        uint64_t v23 = v136;
        char v20 = v137[0];
        uint64_t v25 = *(void *)&v137[8];
        uint64_t v28 = *(void *)&v137[24];
        uint64_t v27 = *(void *)&v137[16];
        uint64_t v26 = *(void *)&v137[32];
        uint64_t v4 = v137[40];
        uint64_t v30 = *((void *)&v138 + 1);
        uint64_t v29 = v138;
      }

      else
      {
        __int128 v31 = v149;
        uint64_t v100 = *((void *)&v150 + 1);
        uint64_t v102 = v150;
        uint64_t v27 = *((void *)&v152 + 1);
        uint64_t v98 = v152;
        uint64_t v26 = *((void *)&v153 + 1);
        uint64_t v28 = v153;
        uint64_t v29 = *(void *)&v154[8];
        uint64_t v4 = v154[0] & 1;
        uint64_t v30 = *(void *)&v154[16];
        if ((specialized Parser.tryEat<A>(sequence:)(v2, v19) & 1) == 0)
        {
          *(void *)&__int128 v149 = v2;
          *((void *)&v149 + 1) = v19;
          *(void *)&__int128 v135 = String.init<A>(_:)();
          *((void *)&v135 + 1) = v32;
          __int128 v136 = 0uLL;
          v137[0] = 3;
          Parser.errorAtCurrentPosition(_:)(&v135);
        }

        swift_bridgeObjectRelease();
        uint64_t v22 = *((void *)&v31 + 1);
        uint64_t v21 = v31;
        uint64_t v24 = v100;
        uint64_t v23 = v102;
        uint64_t v25 = v98;
      }

      *(void *)&__int128 v142 = v21;
      *((void *)&v142 + 1) = v22;
      *(void *)&__int128 v143 = v23;
      *((void *)&v143 + 1) = v24;
      char v144 = v20;
      *(void *)&__int128 v145 = v25;
      *((void *)&v145 + 1) = v27;
      *(void *)&__int128 v146 = v28;
      *((void *)&v146 + 1) = v26;
      char v147 = v4;
      *(void *)&__int128 v148 = v29;
      *((void *)&v148 + 1) = v30;
      _s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOWOj0_((uint64_t)&v142);
      goto LABEL_17;
    }

    if ((specialized Parser.tryEat<A>(sequence:)(0x454E49464544LL, 0xE600000000000000LL) & 1) != 0)
    {
      _s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOWOi4_((uint64_t)&v142);
    }

    else
    {
      if ((specialized Parser.tryEat<A>(sequence:)(0x4E4F4953524556LL, 0xE700000000000000LL) & 1) != 0)
      {
        unint64_t v33 = *((void *)v1 + 2);
        v34._uint64_t countAndFlagsBits = 62LL;
        v34._uint64_t object = (void *)0xE100000000000000LL;
        Swift::Bool v35 = Parser.tryEat(_:)(v34);
        v36._uint64_t countAndFlagsBits = 61LL;
        v36._uint64_t object = (void *)0xE100000000000000LL;
        uint64_t result = Parser.tryEat(_:)(v36);
        if ((result & 1) == 0)
        {
          __int128 v167 = xmmword_181005F80;
          uint64_t v168 = 0LL;
          uint64_t v169 = 0LL;
          char v170 = 3;
          uint64_t result = Parser.errorAtCurrentPosition(_:)(&v167);
        }

        unint64_t v2 = *((void *)v1 + 2);
        if (v2 >> 14 < v33 >> 14)
        {
          __break(1u);
        }

        else
        {
          Swift::Bool v105 = v35;
          unint64_t v117 = v8;
          unint64_t v118 = v9;
          uint64_t v119 = v7;
          Parser.lexNumber(_:)(1, (uint64_t)&v149);
          if ((v151 & 1) != 0)
          {
            __int128 v149 = xmmword_181005F30;
            __int128 v150 = xmmword_181005F90;
            unsigned __int8 v151 = 2;
            Parser.errorAtCurrentPosition(_:)(&v149);
            uint64_t v38 = 0LL;
            uint64_t v39 = *((void *)v1 + 2);
            char v40 = 1;
            uint64_t v41 = v39;
          }

          else
          {
            uint64_t v41 = *((void *)&v150 + 1);
            uint64_t v39 = v150;
            uint64_t v38 = v149;
            char v40 = BYTE8(v149) & 1;
          }

          v89._uint64_t countAndFlagsBits = 46LL;
          v89._uint64_t object = (void *)0xE100000000000000LL;
          if (!Parser.tryEat(_:)(v89))
          {
            __int128 v142 = xmmword_181005EF0;
            __int128 v143 = 0uLL;
            char v144 = 3;
            Parser.errorAtCurrentPosition(_:)(&v142);
          }

          uint64_t result = (uint64_t)Parser.lexNumber(_:)(1, (uint64_t)&v135);
          if ((v137[0] & 1) != 0)
          {
            __int128 v135 = xmmword_181005F30;
            __int128 v136 = xmmword_181005F90;
            v137[0] = 2;
            uint64_t result = Parser.errorAtCurrentPosition(_:)(&v135);
            uint64_t v90 = 0LL;
            unint64_t v91 = *((void *)v1 + 2);
            int64x2_t v92 = vdupq_n_s64(v91);
            char v93 = 1;
          }

          else
          {
            int64x2_t v92 = (int64x2_t)v136;
            uint64_t v90 = v135;
            char v93 = BYTE8(v135) & 1;
            unint64_t v91 = *((void *)v1 + 2);
          }

          if (v2 >> 14 <= v91 >> 14)
          {
            LOBYTE(v149) = v105;
            *((void *)&v149 + 1) = v33;
            *(void *)&__int128 v150 = v2;
            *((void *)&v150 + 1) = v38;
            unsigned __int8 v151 = v40;
            *(void *)&__int128 v152 = v39;
            *((void *)&v152 + 1) = v41;
            *(void *)&__int128 v153 = v90;
            BYTE8(v153) = v93;
            *(int64x2_t *)BOOL v154 = v92;
            *(void *)&v154[16] = v2;
            unint64_t v155 = v91;
            _s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOWOi1_((uint64_t)&v149);
            outlined init with take of AST.Conditional.Condition.Kind(&v149, &v135);
            outlined init with take of AST.Conditional.Condition.Kind(&v135, &v142);
LABEL_17:
            outlined init with take of AST.Conditional.Condition.Kind(&v142, &v149);
            AST.root.modify(&v149);
            outlined init with take of AST.Conditional.Condition?((uint64_t)&v149, (uint64_t)&v158);
            BOOL v5 = v1;
            unint64_t v7 = v119;
            goto LABEL_18;
          }
        }

        __break(1u);
        return result;
      }

      Parser.lexNumberedReference(allowWholePatternRef:allowRecursionLevel:)(0, 1, (uint64_t)&v135);
      if (v137[0] == 255LL)
      {
        unint64_t v117 = v8;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        Parser.expectNamedReference(endingWith:eatEnding:allowRecursionLevel:)( 41LL,  0xE100000000000000LL,  0,  1,  (uint64_t)&v149);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v3 = *((void *)&v149 + 1);
        uint64_t v42 = v149;
        uint64_t v43 = *((void *)&v150 + 1);
        unint64_t v2 = v150;
        LOBYTE(v44) = v151;
        __int128 v45 = v152;
        __int128 v46 = v153;
        LOBYTE(v8) = v154[0];
        __int128 v47 = *(_OWORD *)&v154[8];
        unint64_t v118 = v9;
        if (!v151) {
          goto LABEL_81;
        }
        if (v151 == 1)
        {
          if ((BYTE8(v149) & 1) != 0 || (v149 & 0x8000000000000000LL) == 0) {
            goto LABEL_85;
          }
        }

        else
        {
          uint64_t v122 = v7;
          uint64_t v94 = *((void *)v5 + 6);
          __int128 v107 = v153;
          __int128 v109 = v152;
          __int128 v104 = *(_OWORD *)&v154[8];
          swift_bridgeObjectRetain();
          outlined copy of AST.Reference.Kind(v42, v3, v2, v43, 2);
          char v95 = specialized Set.contains(_:)(v42, v3, v94);
          outlined consume of AST.Reference.Kind(v42, v3, v2, v43, 2);
          unint64_t v7 = v122;
          swift_bridgeObjectRelease();
          __int128 v47 = v104;
          __int128 v46 = v107;
          __int128 v45 = v109;
          if ((v95 & 1) == 0) {
            goto LABEL_85;
          }
        }

        goto LABEL_83;
      }

      __int128 v142 = v135;
      __int128 v143 = v136;
      char v144 = v137[0];
      __int128 v145 = *(_OWORD *)&v137[8];
      __int128 v146 = *(_OWORD *)&v137[24];
      char v147 = v137[40] & 1;
      __int128 v148 = v138;
      _s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOWOj0_((uint64_t)&v142);
    }

    outlined init with take of AST.Conditional.Condition.Kind(&v142, &v149);
    AST.root.modify(&v149);
    outlined init with take of AST.Conditional.Condition?((uint64_t)&v149, (uint64_t)&v158);
    goto LABEL_36;
  }

  v12._uint64_t countAndFlagsBits = 38LL;
  v12._uint64_t object = (void *)0xE100000000000000LL;
  if (!Parser.tryEat(_:)(v12))
  {
    Parser.lexNumber(_:)(1, (uint64_t)&v135);
    if ((v137[0] & 1) != 0)
    {
      _s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOWOi3_((uint64_t)&v142);
LABEL_21:
      outlined init with take of AST.Conditional.Condition.Kind(&v142, &v149);
      AST.root.modify(&v149);
      outlined init with take of AST.Conditional.Condition?((uint64_t)&v149, (uint64_t)&v158);
      while (1)
      {
        uint64_t v1 = (char *)&cache variable for noncanonical specialized generic type metadata for AST.Conditional.Condition.Kind?;
        outlined init with take of AST.Conditional.Condition?((uint64_t)&v158, (uint64_t)v162);
        outlined init with take of AST.Conditional.Condition?((uint64_t)v162, (uint64_t)v163);
        if (_s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOSgWOg((uint64_t)v163) == 1)
        {
          uint64_t v120 = v7;
          unint64_t v2 = *((void *)v5 + 9);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v4 = specialized Collection.dropFirst(_:)(*(void *)(v3 + 16), v2);
          uint64_t v49 = v48;
          unint64_t v7 = v50;
          uint64_t v1 = (char *)(v51 >> 1);
          uint64_t v110 = v2;
          swift_bridgeObjectRetain();
          swift_unknownObjectRetain();
          uint64_t v52 = v49 - 32;
          uint64_t v53 = v7;
          unint64_t v13 = v7;
LABEL_39:
          uint64_t v54 = v52 + 80LL * (void)v53;
          while (1)
          {
            if (v1 == v13)
            {
              swift_bridgeObjectRelease();
              swift_unknownObjectRelease_n();
              *(void *)BOOL v5 = v111;
              *((void *)v5 + 1) = v8;
              *((void *)v5 + 2) = v9;
              *((void *)v5 + 3) = v116;
              v5[32] = v115;
              *((void *)v5 + 5) = v114;
              *((void *)v5 + 6) = v10;
              *((void *)v5 + 7) = v113;
              v5[64] = v112;
              *((void *)v5 + 9) = v3;
              _s12_RegexParser3ASTV11ConditionalV9ConditionVSgWOi0_((uint64_t)&v149);
              outlined init with take of AST.Conditional.Condition?((uint64_t)&v149, (uint64_t)v164);
              unint64_t v7 = v120;
              goto LABEL_52;
            }

            int v55 = *(unsigned __int8 *)(v54 + 32);
            ++v13;
            v54 += 80LL;
            if (!v55)
            {
              unint64_t v2 = v8;
              uint64_t v106 = v52;
              uint64_t v108 = v4;
              unint64_t v118 = v9;
              uint64_t v99 = *(void *)(v54 - 24);
              uint64_t v101 = *(void *)(v54 - 40);
              uint64_t v56 = *(void *)(v54 - 8);
              uint64_t v97 = *(void *)(v54 - 16);
              uint64_t v57 = *(void *)v54;
              uint64_t v58 = *(void *)(v54 + 8);
              uint64_t v59 = *(void *)(v54 + 16);
              unsigned __int8 v60 = *(_BYTE *)(v54 + 24);
              uint64_t v96 = *(void *)(v54 - 32);
              swift_bridgeObjectRetain();
              uint64_t v103 = v59;
              outlined copy of ParseError?(v56, v57, v58, v59, v60);
              unint64_t v117 = v2;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v3 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v3 + 16) + 1LL,  1,  (char *)v3);
              }
              unint64_t v62 = *(void *)(v3 + 16);
              unint64_t v61 = *(void *)(v3 + 24);
              unint64_t v63 = (char *)v3;
              if (v62 >= v61 >> 1) {
                unint64_t v63 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v61 > 1),  v62 + 1,  1,  (char *)v3);
              }
              *((void *)v63 + 2) = v62 + 1;
              uint64_t v3 = (uint64_t)v63;
              unint64_t v64 = &v63[80 * v62];
              v64[32] = 0;
              *((void *)v64 + 5) = v101;
              *((void *)v64 + 6) = v96;
              *((void *)v64 + 7) = v99;
              *((void *)v64 + 8) = v97;
              *((void *)v64 + 9) = v56;
              *((void *)v64 + 10) = v57;
              *((void *)v64 + 11) = v58;
              *((void *)v64 + 12) = v103;
              v64[104] = v60;
              uint64_t v53 = v13;
              BOOL v5 = (char *)v134;
              uint64_t v8 = v2;
              unint64_t v9 = v118;
              unint64_t v10 = v123;
              uint64_t v4 = v108;
              uint64_t v52 = v106;
              goto LABEL_39;
            }
          }

          __break(1u);
LABEL_88:
          __break(1u);
          goto LABEL_89;
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined init with take of AST.Conditional.Condition?((uint64_t)v162, (uint64_t)&v149);
        unint64_t v13 = (char *)*((void *)v5 + 2);
        outlined init with take of AST.Conditional.Condition.Kind(&v149, v164);
        unint64_t v165 = v9;
        BOOL v166 = v13;
        AST.root.modify(v164);
LABEL_52:
        outlined init with take of AST.Conditional.Condition?((uint64_t)v164, (uint64_t)&v142);
        outlined init with take of AST.Conditional.Condition?((uint64_t)&v142, (uint64_t)&v149);
LABEL_53:
        unint64_t v2 = *((void *)v5 + 9);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v42 = specialized Collection.dropFirst(_:)(*((void *)v7 + 2), v2);
        uint64_t v66 = v65;
        uint64_t v68 = v67;
        uint64_t v43 = v69 >> 1;
        unint64_t v123 = v2;
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        unint64_t v44 = v66 - 32;
        uint64_t v70 = v68;
        uint64_t v8 = v68;
LABEL_54:
        unint64_t v71 = v44 + 80 * v70;
        while (1)
        {
          if (v43 == v8)
          {
            swift_bridgeObjectRelease();
            swift_unknownObjectRelease_n();
            *(void *)BOOL v5 = v130;
            *((void *)v5 + 1) = v132;
            *((void *)v5 + 2) = v129;
            *((void *)v5 + 3) = v128;
            v5[32] = v127;
            *((void *)v5 + 5) = v126;
            *((void *)v5 + 6) = v131;
            *((void *)v5 + 7) = v125;
            v5[64] = v124;
            *((void *)v5 + 9) = v7;
            _s12_RegexParser3ASTV11ConditionalV9ConditionVSgWOi0_((uint64_t)v164);
            return outlined init with take of AST.Conditional.Condition?((uint64_t)v164, (uint64_t)a1);
          }

          if (v70 < v68 || v8 >= v43) {
            break;
          }
          int v72 = *(unsigned __int8 *)(v71 + 32);
          ++v8;
          v71 += 80LL;
          if (!v72)
          {
            uint64_t v121 = v42;
            uint64_t v115 = *(void *)(v71 - 24);
            uint64_t v116 = *(void *)(v71 - 40);
            unint64_t v2 = *(void *)(v71 - 8);
            uint64_t v114 = *(void *)(v71 - 16);
            uint64_t v73 = *(void *)v71;
            uint64_t v4 = *(void *)(v71 + 8);
            uint64_t v74 = *(void *)(v71 + 16);
            uint64_t v3 = *(unsigned __int8 *)(v71 + 24);
            unint64_t v117 = *(void *)(v71 - 32);
            swift_bridgeObjectRetain();
            outlined copy of ParseError?(v2, v73, v4, v74, v3);
            unint64_t v118 = v44;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              unint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v7 + 2) + 1LL,  1,  v7);
            }
            unint64_t v76 = *((void *)v7 + 2);
            unint64_t v75 = *((void *)v7 + 3);
            unint64_t v77 = v7;
            if (v76 >= v75 >> 1) {
              unint64_t v77 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v75 > 1),  v76 + 1,  1,  v7);
            }
            *((void *)v77 + 2) = v76 + 1;
            unint64_t v7 = v77;
            __int128 v78 = &v77[80 * v76];
            v78[32] = 0;
            unint64_t v44 = v118;
            *((void *)v78 + 5) = v116;
            *((void *)v78 + 6) = v117;
            *((void *)v78 + 7) = v115;
            *((void *)v78 + 8) = v114;
            *((void *)v78 + 9) = v2;
            *((void *)v78 + 10) = v73;
            *((void *)v78 + 11) = v4;
            *((void *)v78 + 12) = v74;
            v78[104] = v3;
            uint64_t v70 = v8;
            BOOL v5 = (char *)v134;
            uint64_t v42 = v121;
            goto LABEL_54;
          }
        }

        __break(1u);
LABEL_81:
        if ((v3 & 1) != 0 || *((void *)v5 + 5) < v42)
        {
LABEL_85:
          outlined consume of AST.Reference.Kind(v42, v3, v2, v43, v44);
          _s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOSgWOi0_((uint64_t)&v149);
        }

        else
        {
LABEL_83:
          *(void *)&__int128 v142 = v42;
          *((void *)&v142 + 1) = v3;
          *(void *)&__int128 v143 = v2;
          *((void *)&v143 + 1) = v43;
          char v144 = v44;
          *(_OWORD *)(v4 + 40) = v45;
          *(_OWORD *)(v4 + 56) = v46;
          char v147 = v8;
          __int128 v148 = v47;
          _s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOWOj0_((uint64_t)&v142);
          outlined init with take of AST.Conditional.Condition.Kind(&v142, &v149);
          AST.root.modify(&v149);
        }

        outlined init with take of AST.Conditional.Condition?((uint64_t)&v149, (uint64_t)&v158);
LABEL_18:
        uint64_t v8 = v117;
        unint64_t v9 = v118;
LABEL_36:
        unint64_t v10 = v123;
        uint64_t v3 = v110;
      }

      uint64_t v3 = v156;
      unint64_t v7 = v157;
      v79._uint64_t countAndFlagsBits = 41LL;
      v79._uint64_t object = (void *)0xE100000000000000LL;
      if (Parser.tryEat(_:)(v79))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_71;
      }

      __int128 v134 = xmmword_181005F70;
      __int128 v158 = xmmword_181005F70;
      uint64_t v160 = 0LL;
      uint64_t v159 = 0LL;
      char v161 = 3;
      uint64_t v8 = *((void *)v5 + 2);
      ParseError.description.getter();
      uint64_t v1 = v80;
      unint64_t v2 = v81;
      unint64_t v13 = (char *)*((void *)v5 + 9);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0) {
        goto LABEL_68;
      }
      goto LABEL_90;
    }

    unint64_t v14 = *((void *)&v136 + 1);
    *(void *)&__int128 v142 = v135;
    *((void *)&v142 + 1) = BYTE8(v135) & 1;
    __int128 v143 = v136;
    char v144 = 0;
    __int128 v145 = 0u;
    __int128 v146 = 0u;
    char v147 = 1;
    *(void *)&__int128 v148 = v136;
LABEL_20:
    *((void *)&v148 + 1) = v14;
    _s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOWOi0_((uint64_t)&v142);
    goto LABEL_21;
  }

  unint64_t v13 = (char *)*((void *)v1 + 2);
  closure #1 in Parser.expectIdentifier(_:endingWith:eatEnding:)(v1, 41LL, 0xE100000000000000LL, 0, &v149);
  unint64_t v14 = *((void *)v1 + 2);
  if (v14 >> 14 >= (unint64_t)v13 >> 14)
  {
    __int128 v142 = v149;
    __int128 v143 = 0uLL;
    char v144 = 2;
    __int128 v145 = 0u;
    __int128 v146 = 0u;
    char v147 = 1;
    *(void *)&__int128 v148 = v13;
    goto LABEL_20;
  }

LABEL_89:
  __break(1u);
LABEL_90:
  unint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v13 + 2) + 1LL,  1,  v13);
LABEL_68:
  unint64_t v83 = *((void *)v13 + 2);
  unint64_t v82 = *((void *)v13 + 3);
  if (v83 >= v82 >> 1) {
    unint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v82 > 1),  v83 + 1,  1,  v13);
  }
  *((void *)v13 + 2) = v83 + 1;
  uint64_t v84 = &v13[80 * v83];
  v84[32] = 1;
  *((void *)v84 + 5) = v1;
  *((void *)v84 + 6) = v2;
  *((void *)v84 + 7) = v8;
  *((void *)v84 + 8) = v8;
  *(_OWORD *)(v84 + 72) = v134;
  *((void *)v84 + 11) = 0LL;
  *((void *)v84 + 12) = 0LL;
  v84[104] = 3;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *((void *)v5 + 9) = v13;
LABEL_71:
  outlined init with take of AST.Conditional.Condition.Kind(&v149, &v135);
  *(void *)&__int128 v141 = v3;
  *((void *)&v141 + 1) = v7;
  __int128 v85 = v140;
  a1[6] = v139;
  a1[7] = v85;
  __int128 v86 = *(_OWORD *)&v137[16];
  a1[2] = *(_OWORD *)v137;
  a1[3] = v86;
  __int128 v87 = v138;
  a1[4] = *(_OWORD *)&v137[32];
  a1[5] = v87;
  __int128 v88 = v136;
  *a1 = v135;
  a1[1] = v88;
  a1[8] = v141;
  return AST.root.modify(a1);
}

uint64_t Parser.lexGroupConditionalStart()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)v1;
  uint64_t v98 = *(void *)(v1 + 24);
  uint64_t v100 = *(void *)(v1 + 16);
  char v96 = *(_BYTE *)(v1 + 32);
  uint64_t v4 = *(void *)(v1 + 48);
  uint64_t v94 = *(void *)(v1 + 56);
  uint64_t v95 = *(void *)(v1 + 40);
  char v93 = *(_BYTE *)(v1 + 64);
  uint64_t v5 = *(void *)(v1 + 72);
  uint64_t v103 = *(void *)(v1 + 8);
  swift_bridgeObjectRetain();
  uint64_t v102 = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v6 = specialized Parser.tryEat<A>(sequence:)(16168LL, 0xE200000000000000LL);
  uint64_t v7 = *(void *)(v1 + 72);
  uint64_t v8 = *(void *)(v1 + 8);
  uint64_t v9 = *(void *)(v1 + 48);
  uint64_t v104 = v3;
  if ((v6 & 1) == 0)
  {
LABEL_17:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v43 = specialized Collection.dropFirst(_:)(*(void *)(v5 + 16), v7);
    uint64_t v45 = v44;
    uint64_t v47 = v46;
    int64_t v49 = v48 >> 1;
    swift_bridgeObjectRetain();
    uint64_t result = swift_unknownObjectRetain();
    uint64_t v50 = v45 - 32;
    uint64_t v51 = v47;
    uint64_t v52 = v47;
LABEL_18:
    uint64_t v53 = v50 + 80 * v51;
    while (1)
    {
      if (v49 == v52)
      {
        swift_bridgeObjectRelease();
        uint64_t result = swift_unknownObjectRelease_n();
        *(void *)uint64_t v1 = v3;
        *(void *)(v1 + 8) = v103;
        *(void *)(v1 + 16) = v100;
        *(void *)(v1 + 24) = v98;
        *(_BYTE *)(v1 + 32) = v96;
        *(void *)(v1 + 40) = v95;
        *(void *)(v1 + 48) = v102;
        *(void *)(v1 + 56) = v94;
        *(_BYTE *)(v1 + 64) = v93;
        *(void *)(v1 + 72) = v5;
        *(_OWORD *)a1 = 0u;
        *(_OWORD *)(a1 + 16) = 0u;
        *(_OWORD *)(a1 + 32) = 0u;
        *(_OWORD *)(a1 + 48) = 0u;
        *(_OWORD *)(a1 + 64) = 0u;
        *(void *)(a1 + 88) = 0LL;
        *(void *)(a1 + 96) = 0LL;
        *(void *)(a1 + 80) = 255LL;
        return result;
      }

      if (v51 < v47 || v52 >= v49) {
        break;
      }
      int v54 = *(unsigned __int8 *)(v53 + 32);
      ++v52;
      v53 += 80LL;
      if (!v54)
      {
        uint64_t v108 = v7;
        uint64_t v90 = v50;
        uint64_t v92 = v43;
        uint64_t v82 = *(void *)(v53 - 40);
        uint64_t v84 = a1;
        uint64_t v55 = *(void *)(v53 - 8);
        uint64_t v78 = *(void *)(v53 - 16);
        uint64_t v80 = *(void *)(v53 - 24);
        uint64_t v57 = *(void *)v53;
        uint64_t v56 = *(void *)(v53 + 8);
        uint64_t v58 = *(void *)(v53 + 16);
        unsigned __int8 v59 = *(_BYTE *)(v53 + 24);
        uint64_t v76 = *(void *)(v53 - 32);
        swift_bridgeObjectRetain();
        uint64_t v86 = v55;
        uint64_t v88 = v57;
        uint64_t v60 = v57;
        uint64_t v61 = v56;
        outlined copy of ParseError?(v55, v60, v56, v58, v59);
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v5 + 16) + 1LL,  1,  (char *)v5);
          uint64_t v5 = result;
        }

        unint64_t v63 = *(void *)(v5 + 16);
        unint64_t v62 = *(void *)(v5 + 24);
        uint64_t v64 = v5;
        a1 = v84;
        if (v63 >= v62 >> 1)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v62 > 1),  v63 + 1,  1,  (char *)v5);
          uint64_t v64 = result;
        }

        *(void *)(v64 + 16) = v63 + 1;
        uint64_t v5 = v64;
        unint64_t v65 = v64 + 80 * v63;
        *(_BYTE *)(v65 + 32) = 0;
        *(void *)(v65 + 40) = v82;
        *(void *)(v65 + 48) = v76;
        *(void *)(v65 + 56) = v80;
        *(void *)(v65 + 64) = v78;
        *(void *)(v65 + 72) = v86;
        *(void *)(v65 + 80) = v88;
        *(void *)(v65 + 88) = v61;
        *(void *)(v65 + 96) = v58;
        *(_BYTE *)(v65 + 104) = v59;
        uint64_t v51 = v52;
        uint64_t v3 = v104;
        uint64_t v7 = v108;
        uint64_t v50 = v90;
        uint64_t v43 = v92;
        goto LABEL_18;
      }
    }

    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }

  uint64_t v89 = v5;
  uint64_t v85 = *(void *)v1;
  unint64_t v10 = *(void *)(v1 + 16);
  uint64_t v11 = *(void *)(v1 + 24);
  char v87 = *(_BYTE *)(v1 + 32);
  uint64_t v12 = *(void *)(v1 + 40);
  uint64_t v13 = *(void *)(v1 + 56);
  char v14 = *(_BYTE *)(v1 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  closure #1 in closure #1 in Parser.lexGroupStart()(v1, (uint64_t)v109);
  uint64_t v91 = v9;
  unsigned __int8 v15 = v110;
  if (v110 == 255)
  {
    uint64_t v81 = v12;
    uint64_t v83 = v11;
    uint64_t v74 = v8;
    char v75 = v14;
    uint64_t v77 = v13;
    unint64_t v79 = v10;
    uint64_t v23 = *(void *)(v1 + 72);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v107 = v7;
    specialized Collection.dropFirst(_:)(*(void *)(v7 + 16), v23);
    uint64_t v25 = v24;
    uint64_t v27 = v26;
    int64_t v29 = v28 >> 1;
    swift_bridgeObjectRetain();
    uint64_t result = swift_unknownObjectRetain();
    uint64_t v30 = v25 - 32;
    uint64_t v31 = v27;
    uint64_t v32 = v27;
    char v33 = v87;
LABEL_6:
    uint64_t v3 = v104;
    uint64_t v34 = v30 + 80 * v31;
    while (v29 != v32)
    {
      if (v31 < v27 || v32 >= v29) {
        goto LABEL_30;
      }
      int v35 = *(unsigned __int8 *)(v34 + 32);
      ++v32;
      v34 += 80LL;
      if (!v35)
      {
        uint64_t v73 = v30;
        uint64_t v69 = *(void *)(v34 - 24);
        uint64_t v70 = *(void *)(v34 - 40);
        uint64_t v36 = *(void *)(v34 - 8);
        uint64_t v67 = *(void *)(v34 - 32);
        uint64_t v68 = *(void *)(v34 - 16);
        uint64_t v37 = *(void *)v34;
        uint64_t v38 = *(void *)(v34 + 8);
        uint64_t v39 = *(void *)(v34 + 16);
        unsigned __int8 v66 = *(_BYTE *)(v34 + 24);
        swift_bridgeObjectRetain();
        uint64_t v72 = v37;
        uint64_t v71 = v38;
        outlined copy of ParseError?(v36, v37, v38, v39, v66);
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v107 + 16) + 1LL,  1,  (char *)v107);
          uint64_t v107 = result;
        }

        unint64_t v41 = *(void *)(v107 + 16);
        unint64_t v40 = *(void *)(v107 + 24);
        uint64_t v30 = v73;
        if (v41 >= v40 >> 1)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v40 > 1),  v41 + 1,  1,  (char *)v107);
          uint64_t v30 = v73;
          uint64_t v107 = result;
        }

        char v33 = v87;
        *(void *)(v107 + 16) = v41 + 1;
        unint64_t v42 = v107 + 80 * v41;
        *(_BYTE *)(v42 + 32) = 0;
        *(void *)(v42 + 40) = v70;
        *(void *)(v42 + 48) = v67;
        *(void *)(v42 + 56) = v69;
        *(void *)(v42 + 64) = v68;
        *(void *)(v42 + 72) = v36;
        *(void *)(v42 + 80) = v72;
        *(void *)(v42 + 88) = v71;
        *(void *)(v42 + 96) = v39;
        *(_BYTE *)(v42 + 104) = v66;
        uint64_t v31 = v32;
        goto LABEL_6;
      }
    }

    swift_bridgeObjectRelease();
    swift_unknownObjectRelease_n();
    *(void *)uint64_t v1 = v85;
    *(void *)(v1 + 8) = v74;
    *(void *)(v1 + 16) = v79;
    *(void *)(v1 + 24) = v83;
    *(_BYTE *)(v1 + 32) = v33;
    *(void *)(v1 + 40) = v81;
    *(void *)(v1 + 48) = v91;
    *(void *)(v1 + 56) = v77;
    *(_BYTE *)(v1 + 64) = v75;
    uint64_t v7 = v107;
    *(void *)(v1 + 72) = v107;
    uint64_t v5 = v89;
    goto LABEL_17;
  }

  uint64_t v16 = v109[0];
  uint64_t v17 = v109[1];
  uint64_t v18 = v109[2];
  uint64_t v19 = v109[3];
  uint64_t v20 = v109[4];
  uint64_t v105 = v109[6];
  uint64_t v106 = v109[5];
  uint64_t v99 = v109[8];
  uint64_t v101 = v109[7];
  uint64_t v97 = v109[9];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v22 = *(void *)(v1 + 16);
  if (v22 >> 14 >= v10 >> 14)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)a1 = v16;
    *(void *)(a1 + 8) = v17;
    *(void *)(a1 + 16) = v18;
    *(void *)(a1 + 24) = v19;
    *(void *)(a1 + 32) = v20;
    *(void *)(a1 + 40) = v106;
    *(void *)(a1 + 48) = v105;
    *(void *)(a1 + 56) = v101;
    *(void *)(a1 + 64) = v99;
    *(void *)(a1 + 72) = v97;
    *(_BYTE *)(a1 + 80) = v15;
    *(void *)(a1 + 88) = v10;
    *(void *)(a1 + 96) = v22;
    return result;
  }

LABEL_31:
  __break(1u);
  return result;
}

  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

    __break(1u);
  }

  else
  {
LABEL_28:
    swift_bridgeObjectRelease();
    return v19;
  }

  return result;
}

uint64_t Parser.lexAbsentFunctionStart()@<X0>(uint64_t a1@<X8>)
{
  unint64_t v3 = *(void *)(v1 + 16);
  uint64_t result = specialized Parser.tryEat<A>(sequence:)(2088648488LL, 0xE400000000000000LL);
  char v5 = result;
  if ((result & 1) != 0
    || (uint64_t result = specialized Parser.tryEat<A>(sequence:)(8273704LL, 0xE300000000000000LL), (result & 1) != 0))
  {
    unint64_t v6 = *(void *)(v1 + 16);
    if (v6 >> 14 < v3 >> 14)
    {
      __break(1u);
    }

    else
    {
      *(_BYTE *)a1 = (v5 & 1) == 0;
      *(void *)(a1 + 8) = v3;
      *(void *)(a1 + 16) = v6;
    }
  }

  else
  {
    *(void *)(a1 + 8) = 0LL;
    *(void *)(a1 + 16) = 0LL;
    *(void *)a1 = 2LL;
  }

  return result;
}

uint64_t Parser.lexCustomCCStart()@<X0>(void *a1@<X8>)
{
  unint64_t v2 = v1;
  uint64_t v91 = a1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AST.Atom.CharacterProperty?);
  uint64_t v5 = MEMORY[0x1895F8858](v3, v4);
  uint64_t v7 = (char *)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v5, v8);
  unint64_t v10 = (char *)&v64 - v9;
  uint64_t v11 = type metadata accessor for AST.Atom.CharacterProperty(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1895F8858](v11, v13);
  uint64_t v88 = (uint64_t)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Atom.CharacterProperty>?);
  MEMORY[0x1895F8858](v15, v16);
  uint64_t v18 = (char *)&v64 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = *v2;
  uint64_t v20 = v2[1];
  unint64_t v22 = v2[2];
  uint64_t v21 = v2[3];
  LOBYTE(v17) = *((_BYTE *)v2 + 32);
  uint64_t v23 = v2[5];
  uint64_t v24 = v2[6];
  uint64_t v25 = v2[7];
  uint64_t v26 = v2[9];
  uint64_t v89 = v2 + 9;
  int v27 = *((unsigned __int8 *)v2 + 64);
  uint64_t v86 = v21;
  uint64_t v87 = v19;
  uint64_t v93 = v19;
  uint64_t v94 = v20;
  unint64_t v95 = v22;
  uint64_t v96 = v21;
  char v97 = v17;
  uint64_t v84 = v25;
  uint64_t v85 = v23;
  uint64_t v98 = v23;
  uint64_t v99 = v24;
  uint64_t v100 = v25;
  int v83 = v27;
  char v101 = v27;
  uint64_t v102 = v26;
  LOBYTE(v92) = v17;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  closure #1 in closure #1 in Parser.lexPOSIXCharacterProperty()(&v93, (uint64_t)v7);
  uint64_t v90 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  if (v90(v7, 1LL, v11) == 1)
  {
    uint64_t v82 = v12;
    uint64_t v79 = v11;
    uint64_t v80 = v18;
    unint64_t v81 = v22;
    outlined destroy of _ASTParent?( (uint64_t)v7,  &demangling cache variable for type metadata for AST.Atom.CharacterProperty?);
    uint64_t v28 = v102;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v29 = specialized Collection.dropFirst(_:)(*(void *)(v26 + 16), v28);
    uint64_t v31 = v30;
    uint64_t v33 = v32;
    int64_t v35 = v34 >> 1;
    uint64_t v78 = v28;
    swift_bridgeObjectRetain();
    uint64_t v77 = v29;
    uint64_t result = swift_unknownObjectRetain();
    uint64_t v37 = v31 - 32;
    uint64_t v38 = v33;
    uint64_t v39 = v33;
LABEL_3:
    unint64_t v40 = v91;
    uint64_t v41 = v37 + 80 * v38;
    uint64_t v42 = v82;
    while (1)
    {
      if (v35 == v39)
      {
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease_n();
        uint64_t v93 = v87;
        uint64_t v94 = v20;
        unint64_t v22 = v81;
        unint64_t v95 = v81;
        uint64_t v96 = v86;
        char v97 = v92;
        uint64_t v98 = v85;
        uint64_t v99 = v24;
        uint64_t v100 = v84;
        char v101 = v83;
        uint64_t v102 = v26;
        uint64_t v11 = v79;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v42 + 56))(v10, 1LL, 1LL, v79);
        uint64_t v18 = v80;
        goto LABEL_15;
      }

      if (v38 < v33 || v39 >= v35) {
        break;
      }
      int v43 = *(unsigned __int8 *)(v41 + 32);
      ++v39;
      v41 += 80LL;
      if (!v43)
      {
        uint64_t v68 = v24;
        uint64_t v70 = v10;
        uint64_t v72 = v20;
        uint64_t v76 = v37;
        uint64_t v44 = *(void *)(v41 - 32);
        uint64_t v66 = *(void *)(v41 - 40);
        uint64_t v65 = *(void *)(v41 - 24);
        uint64_t v45 = *(void *)(v41 - 8);
        uint64_t v64 = *(void *)(v41 - 16);
        uint64_t v47 = *(void *)v41;
        uint64_t v46 = *(void *)(v41 + 8);
        uint64_t v48 = *(void *)(v41 + 16);
        int v49 = *(unsigned __int8 *)(v41 + 24);
        uint64_t v75 = v44;
        swift_bridgeObjectRetain();
        uint64_t v74 = v45;
        uint64_t v73 = v47;
        uint64_t v71 = v46;
        uint64_t v69 = v48;
        int v67 = v49;
        outlined copy of ParseError?(v45, v47, v46, v48, v49);
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v26 + 16) + 1LL,  1,  (char *)v26);
          uint64_t v26 = result;
        }

        unint64_t v51 = *(void *)(v26 + 16);
        unint64_t v50 = *(void *)(v26 + 24);
        uint64_t v37 = v76;
        uint64_t v20 = v72;
        unint64_t v10 = v70;
        uint64_t v24 = v68;
        if (v51 >= v50 >> 1)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v50 > 1),  v51 + 1,  1,  (char *)v26);
          uint64_t v37 = v76;
          uint64_t v26 = result;
        }

        *(void *)(v26 + 16) = v51 + 1;
        unint64_t v52 = v26 + 80 * v51;
        *(_BYTE *)(v52 + 32) = 0;
        *(void *)(v52 + 40) = v66;
        *(void *)(v52 + 48) = v75;
        *(void *)(v52 + 56) = v65;
        *(void *)(v52 + 64) = v64;
        *(void *)(v52 + 72) = v74;
        *(void *)(v52 + 80) = v73;
        *(void *)(v52 + 88) = v71;
        *(void *)(v52 + 96) = v69;
        *(_BYTE *)(v52 + 104) = v67;
        uint64_t v38 = v39;
        goto LABEL_3;
      }
    }

    __break(1u);
    goto LABEL_25;
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined init with take of AST.Atom.Kind( (uint64_t)v7,  (uint64_t)v10,  type metadata accessor for AST.Atom.CharacterProperty);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v10, 0LL, 1LL, v11);
  unint64_t v40 = v91;
LABEL_15:
  unsigned int v53 = v90(v10, 1LL, v11);
  if (v53 == 1)
  {
    outlined destroy of _ASTParent?( (uint64_t)v10,  &demangling cache variable for type metadata for AST.Atom.CharacterProperty?);
    uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Atom.CharacterProperty>);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 56LL))(v18, 1LL, 1LL, v54);
  }

  else
  {
    uint64_t v55 = (uint64_t)v10;
    uint64_t v56 = v88;
    outlined init with take of AST.Atom.Kind(v55, v88, type metadata accessor for AST.Atom.CharacterProperty);
    uint64_t result = outlined init with take of AST.Atom.Kind( v56,  (uint64_t)v18,  type metadata accessor for AST.Atom.CharacterProperty);
    unint64_t v57 = v95;
    if (v95 >> 14 < v22 >> 14)
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }

    uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Atom.CharacterProperty>);
    unsigned __int8 v59 = &v18[*(int *)(v58 + 28)];
    *(void *)unsigned __int8 v59 = v22;
    *((void *)v59 + 1) = v57;
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v58 - 8) + 56LL))(v18, 0LL, 1LL, v58);
  }

  outlined destroy of _ASTParent?( (uint64_t)v18,  &demangling cache variable for type metadata for Source.Located<AST.Atom.CharacterProperty>?);
  uint64_t v60 = v102;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v92 = v60;
  Diagnostics.appendNewFatalErrors(from:)((_RegexParser::Diagnostics)&v92);
  uint64_t result = swift_bridgeObjectRelease();
  if (v53 != 1
    || (v61._uint64_t countAndFlagsBits = 91LL,
        v61._uint64_t object = (void *)0xE100000000000000LL,
        uint64_t result = Parser.tryEat(_:)(v61),
        (result & 1) == 0))
  {
    v40[1] = 0LL;
    v40[2] = 0LL;
    *unint64_t v40 = 2LL;
    return result;
  }

  v62._uint64_t countAndFlagsBits = 94LL;
  v62._uint64_t object = (void *)0xE100000000000000LL;
  uint64_t result = Parser.tryEat(_:)(v62);
  unint64_t v63 = v2[2];
  if (v63 >> 14 >= v22 >> 14)
  {
    *(_BYTE *)unint64_t v40 = result & 1;
    v40[1] = v22;
    v40[2] = v63;
    return result;
  }

void Parser.lexCustomCCBinOp()()
{
  __asm { BR              X9 }

uint64_t sub_180FB8F58()
{
  if ((specialized Parser.tryEat<A>(sequence:)(11565LL, 0xE200000000000000LL) & 1) == 0)
  {
    *(void *)&__int128 v7 = String.init<A>(_:)();
    *((void *)&v7 + 1) = v3;
    uint64_t v8 = 0LL;
    uint64_t v9 = 0LL;
    char v10 = 3;
    Parser.errorAtCurrentPosition(_:)(&v7);
  }

  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v5 = *(void *)(v1 + 16);
  if (v5 >> 14 < v6 >> 14)
  {
    __break(1u);
    JUMPOUT(0x180FB9014LL);
  }

  *(_BYTE *)uint64_t v0 = v2;
  *(void *)(v0 + 8) = v6;
  *(void *)(v0 + 16) = v5;
  return result;
}

_RegexParser::AST::CustomCharacterClass::SetOp_optional __swiftcall Parser.peekCCBinOp()()
{
  uint64_t v1 = v0;
  swift_bridgeObjectRetain();
  uint64_t v2 = String.subscript.getter();
  unint64_t v4 = v3;
  swift_bridgeObjectRelease();
  LOBYTE(outlined init with take of AST.Conditional.Condition.Kind(v3, v2) = specialized Sequence<>.starts<A>(with:)(11565LL, 0xE200000000000000LL, v2, v4);
  result.value = swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    char v6 = 0;
  }

  else
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = String.subscript.getter();
    unint64_t v9 = v8;
    swift_bridgeObjectRelease();
    LOBYTE(v7) = specialized Sequence<>.starts<A>(with:)(32382LL, 0xE200000000000000LL, v7, v9);
    result.value = swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
    {
      char v6 = 2;
    }

    else
    {
      swift_bridgeObjectRetain();
      uint64_t v10 = String.subscript.getter();
      unint64_t v12 = v11;
      swift_bridgeObjectRelease();
      LOBYTE(v10) = specialized Sequence<>.starts<A>(with:)(9766LL, 0xE200000000000000LL, v10, v12);
      result.value = swift_bridgeObjectRelease();
      if ((v10 & 1) != 0) {
        char v6 = 1;
      }
      else {
        char v6 = 3;
      }
    }
  }

  char *v1 = v6;
  return result;
}

unint64_t closure #1 in Parser.canLexDotNetCharClassSubtraction()@<X0>( uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  v239 = a2;
  uint64_t v248 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v243 = *(void *)(v248 - 8);
  MEMORY[0x1895F8858](v248, v3);
  v247 = (char *)&v236 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v237 = (unint64_t)" bound, but lexed upper bound?";
  unint64_t v241 = 0x8000000181009440LL;
  unint64_t v242 = (unint64_t)"Unhandled termination condition";
  BOOL v238 = (void *)0x80000001810093C0LL;
  v250 = (void *)a1;
  while (1)
  {
    unint64_t v5 = *(char **)(a1 + 16);
    if ((*(_BYTE *)(a1 + 32) & 1) == 0)
    {
      unint64_t v6 = *(void *)(a1 + 24);
      swift_bridgeObjectRetain();
      uint64_t v7 = String.subscript.getter();
      unint64_t v9 = v8;
      swift_bridgeObjectRelease();
      LOBYTE(v7) = specialized Sequence<>.starts<A>(with:)(2309928LL, 0xE300000000000000LL, v7, v9);
      swift_bridgeObjectRelease();
      if ((v7 & 1) != 0)
      {
        if (String.count.getter() < 1
          || (swift_bridgeObjectRetain(),
              String.subscript.getter(),
              swift_bridgeObjectRelease(),
              unint64_t v10 = Substring.index(_:offsetBy:limitedBy:)(),
              char v12 = v11,
              unint64_t result = swift_bridgeObjectRelease(),
              (v12 & 1) != 0))
        {
          strcpy((char *)v251, "UNREACHABLE: ");
          HIWORD(v251[1]) = -4864;
          v28._uint64_t countAndFlagsBits = 0xD000000000000015LL;
          v28._uint64_t object = (void *)(v242 | 0x8000000000000000LL);
          String.append(_:)(v28);
          swift_bridgeObjectRelease();
          uint64_t v29 = v251[0];
          uint64_t v30 = v251[1];
          uint64_t v31 = *(char **)(a1 + 72);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v31 + 2) + 1LL,  1,  v31);
          }
          unint64_t v33 = *((void *)v31 + 2);
          unint64_t v32 = *((void *)v31 + 3);
          if (v33 >= v32 >> 1) {
            uint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v32 > 1),  v33 + 1,  1,  v31);
          }
          *((void *)v31 + 2) = v33 + 1;
          unint64_t v34 = &v31[80 * v33];
          v34[32] = 0;
          *((void *)v34 + 5) = v29;
          *((void *)v34 + 6) = v30;
          *((void *)v34 + 7) = v5;
          *((void *)v34 + 8) = v5;
          *(_OWORD *)(v34 + 72) = 0u;
          *(_OWORD *)(v34 + 88) = 0u;
          v34[104] = -1;
          *(void *)(a1 + 72) = v31;
          swift_bridgeObjectRetain();
          String.subscript.getter();
          swift_bridgeObjectRelease();
          uint64_t v35 = Substring.distance(from:to:)();
          swift_bridgeObjectRelease();
          if (v35 < 1) {
            goto LABEL_27;
          }
          swift_bridgeObjectRetain();
          String.subscript.getter();
          swift_bridgeObjectRelease();
          unint64_t v10 = Substring.index(_:offsetBy:limitedBy:)();
          char v37 = v36;
          unint64_t result = swift_bridgeObjectRelease();
          if ((v37 & 1) != 0) {
            goto LABEL_27;
          }
          if (v6 >> 14 < v10 >> 14) {
            goto LABEL_234;
          }
        }

        else if (v6 >> 14 < v10 >> 14)
        {
          goto LABEL_231;
        }

        *(void *)(a1 + 16) = v10;
        *(void *)(a1 + 24) = v6;
LABEL_27:
        uint64_t v38 = (void *)a1;
        uint64_t v39 = 41LL;
        uint64_t v40 = 0xE100000000000000LL;
LABEL_40:
        unint64_t result = specialized Parser.lexUntil(_:)(v38, v39, v40, v251);
        uint64_t v54 = v251[1];
LABEL_41:
        if (v54) {
          goto LABEL_2;
        }
        unint64_t v5 = *(char **)(a1 + 16);
        goto LABEL_44;
      }
    }

    uint64_t v14 = *(void *)(a1 + 56);
    if ((v14 & 8) != 0)
    {
      unint64_t v15 = *(void *)(a1 + 24);
      swift_bridgeObjectRetain();
      uint64_t v16 = String.subscript.getter();
      unint64_t v18 = v17;
      swift_bridgeObjectRelease();
      LOBYTE(v16) = specialized Sequence<>.starts<A>(with:)(10799LL, 0xE200000000000000LL, v16, v18);
      swift_bridgeObjectRelease();
      if ((v16 & 1) != 0)
      {
        if (String.count.getter() < 1
          || (swift_bridgeObjectRetain(),
              String.subscript.getter(),
              swift_bridgeObjectRelease(),
              unint64_t v19 = Substring.index(_:offsetBy:limitedBy:)(),
              char v21 = v20,
              unint64_t result = swift_bridgeObjectRelease(),
              (v21 & 1) != 0))
        {
          strcpy((char *)v251, "UNREACHABLE: ");
          HIWORD(v251[1]) = -4864;
          v44._uint64_t countAndFlagsBits = 0xD000000000000015LL;
          v44._uint64_t object = (void *)(v242 | 0x8000000000000000LL);
          String.append(_:)(v44);
          swift_bridgeObjectRelease();
          uint64_t v45 = v251[0];
          uint64_t v46 = v251[1];
          uint64_t v47 = *(char **)(a1 + 72);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v47 + 2) + 1LL,  1,  v47);
          }
          unint64_t v49 = *((void *)v47 + 2);
          unint64_t v48 = *((void *)v47 + 3);
          if (v49 >= v48 >> 1) {
            uint64_t v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v48 > 1),  v49 + 1,  1,  v47);
          }
          *((void *)v47 + 2) = v49 + 1;
          unint64_t v50 = &v47[80 * v49];
          v50[32] = 0;
          *((void *)v50 + 5) = v45;
          *((void *)v50 + 6) = v46;
          *((void *)v50 + 7) = v5;
          *((void *)v50 + 8) = v5;
          *(_OWORD *)(v50 + 72) = 0u;
          *(_OWORD *)(v50 + 88) = 0u;
          v50[104] = -1;
          *(void *)(a1 + 72) = v47;
          swift_bridgeObjectRetain();
          String.subscript.getter();
          swift_bridgeObjectRelease();
          uint64_t v51 = Substring.distance(from:to:)();
          swift_bridgeObjectRelease();
          if (v51 < 1) {
            goto LABEL_39;
          }
          swift_bridgeObjectRetain();
          String.subscript.getter();
          swift_bridgeObjectRelease();
          unint64_t v19 = Substring.index(_:offsetBy:limitedBy:)();
          char v53 = v52;
          unint64_t result = swift_bridgeObjectRelease();
          if ((v53 & 1) != 0) {
            goto LABEL_39;
          }
          if (v15 >> 14 < v19 >> 14) {
            goto LABEL_237;
          }
        }

        else if (v15 >> 14 < v19 >> 14)
        {
          goto LABEL_233;
        }

        *(void *)(a1 + 16) = v19;
        *(void *)(a1 + 24) = v15;
LABEL_39:
        uint64_t v38 = (void *)a1;
        uint64_t v39 = 12074LL;
        uint64_t v40 = 0xE200000000000000LL;
        goto LABEL_40;
      }
    }

    if ((v14 & 2) != 0)
    {
      unint64_t v22 = v5;
      unint64_t v23 = *(void *)(a1 + 24);
      uint64_t v24 = *(char **)(a1 + 72);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v246 = v22;
      uint64_t v25 = String.subscript.getter();
      unint64_t v27 = v26;
      swift_bridgeObjectRelease();
      if (!((v25 ^ v27) >> 14))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_18:
        a1 = (uint64_t)v250;
        unint64_t v5 = v246;
        goto LABEL_44;
      }

      uint64_t v41 = Substring.subscript.getter();
      uint64_t v43 = v42;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v41 != 35 || v43 != 0xE100000000000000LL)
      {
        char v72 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v72 & 1) != 0) {
          goto LABEL_67;
        }
        goto LABEL_18;
      }

      swift_bridgeObjectRelease();
LABEL_67:
      swift_bridgeObjectRetain();
      String.subscript.getter();
      swift_bridgeObjectRelease();
      unint64_t v73 = Substring.index(_:offsetBy:limitedBy:)();
      char v75 = v74;
      unint64_t result = swift_bridgeObjectRelease();
      if ((v75 & 1) != 0)
      {
        strcpy((char *)v251, "UNREACHABLE: ");
        HIWORD(v251[1]) = -4864;
        v76._uint64_t countAndFlagsBits = 0xD000000000000015LL;
        v76._uint64_t object = v238;
        String.append(_:)(v76);
        swift_bridgeObjectRelease();
        uint64_t v77 = v251[0];
        uint64_t v78 = v251[1];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v24 + 2) + 1LL,  1,  v24);
        }
        unint64_t v80 = *((void *)v24 + 2);
        unint64_t v79 = *((void *)v24 + 3);
        if (v80 >= v79 >> 1) {
          uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v79 > 1),  v80 + 1,  1,  v24);
        }
        *((void *)v24 + 2) = v80 + 1;
        unint64_t v81 = &v24[80 * v80];
        v81[32] = 0;
        *((void *)v81 + 5) = v77;
        *((void *)v81 + 6) = v78;
        unint64_t v82 = (unint64_t)v246;
        *((void *)v81 + 7) = v246;
        *((void *)v81 + 8) = v82;
        *(_OWORD *)(v81 + 72) = 0u;
        *(_OWORD *)(v81 + 88) = 0u;
        v81[104] = -1;
        v250[9] = v24;
        swift_bridgeObjectRetain();
        String.subscript.getter();
        swift_bridgeObjectRelease();
        uint64_t v83 = Substring.distance(from:to:)();
        swift_bridgeObjectRelease();
        if (v83 < 1)
        {
          unint64_t v73 = v82;
          a1 = (uint64_t)v250;
LABEL_92:
          v251[0] = 0LL;
          v251[1] = 0xE000000000000000LL;
          unint64_t result = closure #1 in closure #1 in Parser.lexComment()(a1);
          unint64_t v102 = v73;
          unint64_t v240 = v73;
          unint64_t v103 = v73;
          if ((result & 1) != 0)
          {
LABEL_110:
            if (v102 >> 14 < v240 >> 14) {
              goto LABEL_229;
            }
            uint64_t v54 = v251[1];
            unint64_t v5 = v246;
            goto LABEL_41;
          }

          while (1)
          {
            unint64_t v102 = *(void *)(a1 + 16);
            unint64_t v104 = *(void *)(a1 + 24);
            uint64_t v105 = *(char **)(a1 + 72);
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            unint64_t v249 = v104;
            uint64_t v106 = String.subscript.getter();
            unint64_t v108 = v107;
            swift_bridgeObjectRelease();
            if (!((v106 ^ v108) >> 14))
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              unint64_t result = swift_bridgeObjectRelease();
              unint64_t v102 = v103;
              a1 = (uint64_t)v250;
              goto LABEL_110;
            }

            uint64_t v109 = Substring.subscript.getter();
            uint64_t v244 = v110;
            unint64_t v245 = v109;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRetain();
            String.subscript.getter();
            swift_bridgeObjectRelease();
            unint64_t v111 = Substring.index(_:offsetBy:limitedBy:)();
            char v113 = v112;
            unint64_t result = swift_bridgeObjectRelease();
            if ((v113 & 1) == 0) {
              break;
            }
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v105 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v105 + 2) + 1LL,  1,  v105);
            }
            unint64_t v115 = *((void *)v105 + 2);
            unint64_t v114 = *((void *)v105 + 3);
            if (v115 >= v114 >> 1) {
              uint64_t v105 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v114 > 1),  v115 + 1,  1,  v105);
            }
            *((void *)v105 + 2) = v115 + 1;
            uint64_t v116 = &v105[80 * v115];
            v116[32] = 0;
            unint64_t v117 = v241;
            *((void *)v116 + 5) = 0xD000000000000022LL;
            *((void *)v116 + 6) = v117;
            *((void *)v116 + 7) = v102;
            *((void *)v116 + 8) = v102;
            *(_OWORD *)(v116 + 72) = 0u;
            *(_OWORD *)(v116 + 88) = 0u;
            v116[104] = -1;
            v250[9] = v105;
            swift_bridgeObjectRetain();
            String.subscript.getter();
            swift_bridgeObjectRelease();
            uint64_t v118 = Substring.distance(from:to:)();
            swift_bridgeObjectRelease();
            if (v118 < 1)
            {
              a1 = (uint64_t)v250;
            }

            else
            {
              swift_bridgeObjectRetain();
              String.subscript.getter();
              swift_bridgeObjectRelease();
              unint64_t v119 = Substring.index(_:offsetBy:limitedBy:)();
              char v121 = v120;
              unint64_t result = swift_bridgeObjectRelease();
              a1 = (uint64_t)v250;
              if ((v121 & 1) == 0)
              {
                if (v249 >> 14 < v119 >> 14) {
                  goto LABEL_228;
                }
                unint64_t v102 = v119;
LABEL_108:
                unint64_t v122 = v249;
                a1 = (uint64_t)v250;
                v250[2] = v102;
                *(void *)(a1 + 24) = v122;
              }
            }

            MEMORY[0x186E0535C](v245, v244);
            swift_bridgeObjectRelease();
            unint64_t result = closure #1 in closure #1 in Parser.lexComment()(a1);
            unint64_t v103 = v102;
            if ((result & 1) != 0) {
              goto LABEL_110;
            }
          }

          if (v249 >> 14 < v111 >> 14) {
            goto LABEL_221;
          }
          unint64_t v102 = v111;
          goto LABEL_108;
        }

        swift_bridgeObjectRetain();
        String.subscript.getter();
        swift_bridgeObjectRelease();
        unint64_t v84 = Substring.index(_:offsetBy:limitedBy:)();
        char v86 = v85;
        unint64_t result = swift_bridgeObjectRelease();
        unint64_t v73 = v82;
        a1 = (uint64_t)v250;
        if ((v86 & 1) != 0) {
          goto LABEL_92;
        }
        if (v23 >> 14 < v84 >> 14) {
          goto LABEL_240;
        }
        unint64_t v73 = v84;
      }

      else
      {
        a1 = (uint64_t)v250;
        if (v23 >> 14 < v73 >> 14) {
          goto LABEL_235;
        }
      }

      *(void *)(a1 + 16) = v73;
      *(void *)(a1 + 24) = v23;
      goto LABEL_92;
    }

LABEL_44:
    if ((*(_BYTE *)(a1 + 56) & 1) == 0) {
      goto LABEL_113;
    }
    swift_bridgeObjectRetain();
    unint64_t v55 = String.subscript.getter();
    unint64_t v57 = v56;
    unint64_t result = swift_bridgeObjectRelease();
    if (v57 >> 14 < v55 >> 14) {
      goto LABEL_216;
    }
    v246 = v5;
    unint64_t v58 = Substring.subscript.getter();
    unint64_t v60 = v59;
    swift_bridgeObjectRelease();
    unint64_t v61 = v58 >> 14;
    unint64_t v62 = v60 >> 14;
    if (v58 >> 14 == v60 >> 14) {
      goto LABEL_81;
    }
    unint64_t v63 = Substring.subscript.getter();
    unint64_t result = specialized Collection.first.getter(v63, v64);
    if ((result & 0x100000000LL) != 0) {
      goto LABEL_242;
    }
    uint64_t v65 = v247;
    Unicode.Scalar.properties.getter();
    char v66 = Unicode.Scalar.Properties.isPatternWhitespace.getter();
    swift_bridgeObjectRelease();
    unint64_t v249 = *(void *)(v243 + 8);
    ((void (*)(char *, uint64_t))v249)(v65, v248);
    if ((v66 & 1) == 0) {
      goto LABEL_81;
    }
    unint64_t result = Substring.index(after:)();
    unint64_t v67 = result >> 14;
    if (result >> 14 == v62) {
      goto LABEL_80;
    }
    unint64_t v245 = v58 >> 14;
    while (1)
    {
      unint64_t result = Substring.subscript.getter();
      if ((v68 & 0x2000000000000000LL) != 0) {
        uint64_t v69 = HIBYTE(v68) & 0xF;
      }
      else {
        uint64_t v69 = result & 0xFFFFFFFFFFFFLL;
      }
      if (!v69)
      {
        __break(1u);
LABEL_216:
        __break(1u);
LABEL_217:
        __break(1u);
        goto LABEL_218;
      }

      if ((v68 & 0x1000000000000000LL) != 0)
      {
        _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }

      else
      {
        if ((v68 & 0x2000000000000000LL) != 0)
        {
          v251[0] = result;
          v251[1] = v68 & 0xFFFFFFFFFFFFFFLL;
        }

        else if ((result & 0x1000000000000000LL) == 0)
        {
          _StringObject.sharedUTF8.getter();
        }

        _decodeScalar(_:startingAt:)();
      }

      uint64_t v70 = v247;
      Unicode.Scalar.properties.getter();
      char v71 = Unicode.Scalar.Properties.isPatternWhitespace.getter();
      swift_bridgeObjectRelease();
      unint64_t result = ((uint64_t (*)(char *, uint64_t))v249)(v70, v248);
      if ((v71 & 1) == 0) {
        break;
      }
      unint64_t result = Substring.index(after:)();
      unint64_t v67 = result >> 14;
      if (result >> 14 == v62)
      {
        if (v62 >= v245) {
          goto LABEL_81;
        }
        goto LABEL_217;
      }
    }

    unint64_t v62 = v67;
    unint64_t v61 = v245;
LABEL_80:
    if (v62 < v61) {
      goto LABEL_217;
    }
LABEL_81:
    uint64_t v87 = Substring.subscript.getter();
    unint64_t v89 = v88;
    uint64_t v91 = v90;
    uint64_t v93 = v92;
    swift_bridgeObjectRelease();
    if (!((v87 ^ v89) >> 14))
    {
      swift_bridgeObjectRelease();
      a1 = (uint64_t)v250;
LABEL_113:
      unint64_t v123 = *(void *)(a1 + 16);
      v124._uint64_t countAndFlagsBits = 45LL;
      v124._uint64_t object = (void *)0xE100000000000000LL;
      unint64_t result = Parser.tryEat(_:)(v124);
      if ((result & 1) == 0) {
        goto LABEL_213;
      }
      unint64_t v125 = *(void *)(a1 + 16);
      if (v125 >> 14 < v123 >> 14) {
        goto LABEL_238;
      }
      unint64_t v241 = v237 | 0x8000000000000000LL;
      BOOL v238 = (void *)(v242 | 0x8000000000000000LL);
      unint64_t v236 = v123;
      unint64_t v237 = v125;
      while (1)
      {
        if ((*(_BYTE *)(a1 + 32) & 1) != 0
          || (swift_bridgeObjectRetain(),
              uint64_t v126 = String.subscript.getter(),
              unint64_t v128 = v127,
              swift_bridgeObjectRelease(),
              LOBYTE(v126) = specialized Sequence<>.starts<A>(with:)(2309928LL, 0xE300000000000000LL, v126, v128),
              swift_bridgeObjectRelease(),
              (v126 & 1) == 0))
        {
          uint64_t v142 = *(void *)(a1 + 56);
          if ((v142 & 8) == 0
            || (swift_bridgeObjectRetain(),
                uint64_t v143 = String.subscript.getter(),
                unint64_t v145 = v144,
                swift_bridgeObjectRelease(),
                LOBYTE(v143) = specialized Sequence<>.starts<A>(with:)(10799LL, 0xE200000000000000LL, v143, v145),
                swift_bridgeObjectRelease(),
                (v143 & 1) == 0))
          {
            if ((v142 & 2) == 0) {
              goto LABEL_143;
            }
            unint64_t v157 = v125;
            unint64_t v158 = *(void *)(a1 + 24);
            uint64_t v159 = *(char **)(a1 + 72);
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v246 = (char *)v157;
            uint64_t v160 = String.subscript.getter();
            unint64_t v162 = v161;
            swift_bridgeObjectRelease();
            if (!((v160 ^ v162) >> 14))
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
LABEL_142:
              a1 = (uint64_t)v250;
              unint64_t v125 = (unint64_t)v246;
              goto LABEL_143;
            }

            uint64_t v179 = Substring.subscript.getter();
            uint64_t v181 = v180;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v179 == 35 && v181 == 0xE100000000000000LL)
            {
              swift_bridgeObjectRelease();
            }

            else
            {
              char v182 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              if ((v182 & 1) == 0) {
                goto LABEL_142;
              }
            }

            swift_bridgeObjectRetain();
            String.subscript.getter();
            swift_bridgeObjectRelease();
            unint64_t v183 = Substring.index(_:offsetBy:limitedBy:)();
            char v185 = v184;
            unint64_t result = swift_bridgeObjectRelease();
            if ((v185 & 1) == 0)
            {
              uint64_t v186 = (uint64_t)v250;
              if (v158 >> 14 < v183 >> 14) {
                goto LABEL_239;
              }
              goto LABEL_179;
            }

            strcpy((char *)v251, "UNREACHABLE: ");
            HIWORD(v251[1]) = -4864;
            v187._uint64_t countAndFlagsBits = 0xD000000000000015LL;
            v187._uint64_t object = v238;
            String.append(_:)(v187);
            swift_bridgeObjectRelease();
            uint64_t v188 = v251[0];
            uint64_t v189 = v251[1];
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v159 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v159 + 2) + 1LL,  1,  v159);
            }
            unint64_t v191 = *((void *)v159 + 2);
            unint64_t v190 = *((void *)v159 + 3);
            if (v191 >= v190 >> 1) {
              uint64_t v159 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v190 > 1),  v191 + 1,  1,  v159);
            }
            *((void *)v159 + 2) = v191 + 1;
            BOOL v192 = &v159[80 * v191];
            v192[32] = 0;
            *((void *)v192 + 5) = v188;
            *((void *)v192 + 6) = v189;
            unint64_t v193 = (unint64_t)v246;
            *((void *)v192 + 7) = v246;
            *((void *)v192 + 8) = v193;
            *(_OWORD *)(v192 + 72) = 0u;
            *(_OWORD *)(v192 + 88) = 0u;
            v192[104] = -1;
            uint64_t v186 = (uint64_t)v250;
            v250[9] = v159;
            swift_bridgeObjectRetain();
            String.subscript.getter();
            swift_bridgeObjectRelease();
            uint64_t v194 = Substring.distance(from:to:)();
            swift_bridgeObjectRelease();
            unint64_t v183 = v193;
            if (v194 >= 1)
            {
              swift_bridgeObjectRetain();
              unint64_t v195 = (unint64_t)v246;
              String.subscript.getter();
              swift_bridgeObjectRelease();
              unint64_t v196 = Substring.index(_:offsetBy:limitedBy:)();
              char v198 = v197;
              unint64_t result = swift_bridgeObjectRelease();
              unint64_t v183 = v195;
              if ((v198 & 1) == 0)
              {
                if (v158 >> 14 < v196 >> 14) {
                  goto LABEL_241;
                }
                unint64_t v183 = v196;
                uint64_t v186 = (uint64_t)v250;
LABEL_179:
                *(void *)(v186 + 16) = v183;
                *(void *)(v186 + 24) = v158;
              }
            }

            v251[0] = 0LL;
            v251[1] = 0xE000000000000000LL;
            unint64_t result = closure #1 in closure #1 in Parser.lexComment()(v186);
            unint64_t v199 = v183;
            unint64_t v240 = v183;
            a1 = v186;
            if ((result & 1) != 0)
            {
LABEL_209:
              if (v199 >> 14 < v240 >> 14) {
                goto LABEL_236;
              }
              uint64_t v156 = v251[1];
              unint64_t v125 = (unint64_t)v246;
              goto LABEL_136;
            }

            while (2)
            {
              unint64_t v199 = *(void *)(a1 + 16);
              unint64_t v201 = *(void *)(a1 + 24);
              BOOL v202 = *(char **)(a1 + 72);
              swift_bridgeObjectRetain_n();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              unint64_t v249 = v201;
              uint64_t v203 = String.subscript.getter();
              unint64_t v205 = v204;
              swift_bridgeObjectRelease();
              if (!((v203 ^ v205) >> 14))
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                unint64_t result = swift_bridgeObjectRelease();
                unint64_t v199 = v183;
                a1 = (uint64_t)v250;
                goto LABEL_209;
              }

              uint64_t v244 = Substring.subscript.getter();
              unint64_t v245 = v206;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRetain();
              String.subscript.getter();
              swift_bridgeObjectRelease();
              unint64_t v207 = Substring.index(_:offsetBy:limitedBy:)();
              char v209 = v208;
              unint64_t result = swift_bridgeObjectRelease();
              if ((v209 & 1) == 0)
              {
                a1 = (uint64_t)v250;
                if (v249 >> 14 < v207 >> 14) {
                  goto LABEL_226;
                }
                unint64_t v199 = v207;
                goto LABEL_183;
              }

              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              a1 = (uint64_t)v250;
              if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
                BOOL v202 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v202 + 2) + 1LL,  1,  v202);
              }
              unint64_t v212 = *((void *)v202 + 2);
              unint64_t v211 = *((void *)v202 + 3);
              if (v212 >= v211 >> 1) {
                BOOL v202 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v211 > 1),  v212 + 1,  1,  v202);
              }
              *((void *)v202 + 2) = v212 + 1;
              BOOL v213 = &v202[80 * v212];
              v213[32] = 0;
              unint64_t v214 = v241;
              *((void *)v213 + 5) = 0xD000000000000022LL;
              *((void *)v213 + 6) = v214;
              *((void *)v213 + 7) = v199;
              *((void *)v213 + 8) = v199;
              *(_OWORD *)(v213 + 72) = 0u;
              *(_OWORD *)(v213 + 88) = 0u;
              v213[104] = -1;
              *(void *)(a1 + 72) = v202;
              swift_bridgeObjectRetain();
              String.subscript.getter();
              swift_bridgeObjectRelease();
              uint64_t v215 = Substring.distance(from:to:)();
              swift_bridgeObjectRelease();
              if (v215 >= 1)
              {
                swift_bridgeObjectRetain();
                String.subscript.getter();
                swift_bridgeObjectRelease();
                unint64_t v216 = Substring.index(_:offsetBy:limitedBy:)();
                char v218 = v217;
                unint64_t result = swift_bridgeObjectRelease();
                if ((v218 & 1) == 0)
                {
                  if (v249 >> 14 < v216 >> 14) {
                    goto LABEL_232;
                  }
                  unint64_t v199 = v216;
LABEL_183:
                  unint64_t v200 = v249;
                  *(void *)(a1 + 16) = v199;
                  *(void *)(a1 + 24) = v200;
                }
              }

              MEMORY[0x186E0535C](v244, v245);
              swift_bridgeObjectRelease();
              unint64_t result = closure #1 in closure #1 in Parser.lexComment()(a1);
              unint64_t v183 = v199;
              if ((result & 1) != 0) {
                goto LABEL_209;
              }
              continue;
            }
          }

          Swift::Int v146 = String.count.getter();
          if (!Source.tryAdvance(_:)(v146))
          {
            uint64_t v147 = *(void *)(a1 + 16);
            strcpy((char *)v251, "UNREACHABLE: ");
            HIWORD(v251[1]) = -4864;
            v148._uint64_t countAndFlagsBits = 0xD000000000000015LL;
            v148._uint64_t object = (void *)(v242 | 0x8000000000000000LL);
            String.append(_:)(v148);
            swift_bridgeObjectRelease();
            uint64_t v149 = v251[0];
            uint64_t v150 = v251[1];
            unsigned __int8 v151 = *(char **)(a1 + 72);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              unsigned __int8 v151 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v151 + 2) + 1LL,  1,  v151);
            }
            unint64_t v153 = *((void *)v151 + 2);
            unint64_t v152 = *((void *)v151 + 3);
            if (v153 >= v152 >> 1) {
              unsigned __int8 v151 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v152 > 1),  v153 + 1,  1,  v151);
            }
            *((void *)v151 + 2) = v153 + 1;
            BOOL v154 = &v151[80 * v153];
            v154[32] = 0;
            *((void *)v154 + 5) = v149;
            *((void *)v154 + 6) = v150;
            *((void *)v154 + 7) = v147;
            *((void *)v154 + 8) = v147;
            *(_OWORD *)(v154 + 72) = 0u;
            *(_OWORD *)(v154 + 88) = 0u;
            v154[104] = -1;
            *(void *)(a1 + 72) = v151;
            swift_bridgeObjectRetain();
            String.subscript.getter();
            swift_bridgeObjectRelease();
            Swift::Int v155 = Substring.distance(from:to:)();
            swift_bridgeObjectRelease();
            Source.tryAdvance(_:)(v155);
          }

          __int128 v139 = (void *)a1;
          uint64_t v140 = 12074LL;
          uint64_t v141 = 0xE200000000000000LL;
        }

        else
        {
          Swift::Int v129 = String.count.getter();
          if (!Source.tryAdvance(_:)(v129))
          {
            uint64_t v130 = *(void *)(a1 + 16);
            strcpy((char *)v251, "UNREACHABLE: ");
            HIWORD(v251[1]) = -4864;
            v131._uint64_t countAndFlagsBits = 0xD000000000000015LL;
            v131._uint64_t object = (void *)(v242 | 0x8000000000000000LL);
            String.append(_:)(v131);
            swift_bridgeObjectRelease();
            uint64_t v132 = v251[0];
            uint64_t v133 = v251[1];
            __int128 v134 = *(char **)(a1 + 72);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              __int128 v134 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v134 + 2) + 1LL,  1,  v134);
            }
            unint64_t v136 = *((void *)v134 + 2);
            unint64_t v135 = *((void *)v134 + 3);
            if (v136 >= v135 >> 1) {
              __int128 v134 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v135 > 1),  v136 + 1,  1,  v134);
            }
            *((void *)v134 + 2) = v136 + 1;
            BOOL v137 = &v134[80 * v136];
            v137[32] = 0;
            *((void *)v137 + 5) = v132;
            *((void *)v137 + 6) = v133;
            *((void *)v137 + 7) = v130;
            *((void *)v137 + 8) = v130;
            *(_OWORD *)(v137 + 72) = 0u;
            *(_OWORD *)(v137 + 88) = 0u;
            v137[104] = -1;
            *(void *)(a1 + 72) = v134;
            swift_bridgeObjectRetain();
            String.subscript.getter();
            swift_bridgeObjectRelease();
            Swift::Int v138 = Substring.distance(from:to:)();
            swift_bridgeObjectRelease();
            Source.tryAdvance(_:)(v138);
          }

          __int128 v139 = (void *)a1;
          uint64_t v140 = 41LL;
          uint64_t v141 = 0xE100000000000000LL;
        }

        unint64_t result = specialized Parser.lexUntil(_:)(v139, v140, v141, v251);
        uint64_t v156 = v251[1];
LABEL_136:
        if (*(void *)(a1 + 16) >> 14 < v125 >> 14) {
          goto LABEL_225;
        }
        if (v156) {
          goto LABEL_116;
        }
        unint64_t v125 = *(void *)(a1 + 16);
LABEL_143:
        if ((*(_BYTE *)(a1 + 56) & 1) == 0) {
          goto LABEL_212;
        }
        swift_bridgeObjectRetain();
        unint64_t v163 = String.subscript.getter();
        unint64_t v165 = v164;
        unint64_t result = swift_bridgeObjectRelease();
        if (v165 >> 14 < v163 >> 14)
        {
LABEL_222:
          __break(1u);
          goto LABEL_223;
        }

        v246 = (char *)v125;
        unint64_t v166 = Substring.subscript.getter();
        unint64_t v168 = v167;
        swift_bridgeObjectRelease();
        unint64_t v169 = v168 >> 14;
        unint64_t v245 = v166 >> 14;
        if (v166 >> 14 != v168 >> 14)
        {
          unint64_t v170 = Substring.subscript.getter();
          unint64_t result = specialized Collection.first.getter(v170, v171);
          if ((result & 0x100000000LL) != 0) {
            goto LABEL_243;
          }
          BOOL v172 = v247;
          Unicode.Scalar.properties.getter();
          char v173 = Unicode.Scalar.Properties.isPatternWhitespace.getter();
          swift_bridgeObjectRelease();
          unint64_t v249 = *(void *)(v243 + 8);
          ((void (*)(char *, uint64_t))v249)(v172, v248);
          if ((v173 & 1) != 0)
          {
            unint64_t result = Substring.index(after:)();
            unint64_t v174 = result >> 14;
            if (result >> 14 != v169)
            {
              while (1)
              {
                unint64_t result = Substring.subscript.getter();
                if (!((v175 & 0x2000000000000000LL) != 0 ? HIBYTE(v175) & 0xF : result & 0xFFFFFFFFFFFFLL)) {
                  break;
                }
                if ((v175 & 0x1000000000000000LL) != 0)
                {
                  _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
                }

                else
                {
                  if ((v175 & 0x2000000000000000LL) != 0)
                  {
                    v251[0] = result;
                    v251[1] = v175 & 0xFFFFFFFFFFFFFFLL;
                  }

                  else if ((result & 0x1000000000000000LL) == 0)
                  {
                    _StringObject.sharedUTF8.getter();
                  }

                  _decodeScalar(_:startingAt:)();
                }

                BOOL v177 = v247;
                Unicode.Scalar.properties.getter();
                char v178 = Unicode.Scalar.Properties.isPatternWhitespace.getter();
                swift_bridgeObjectRelease();
                unint64_t result = ((uint64_t (*)(char *, uint64_t))v249)(v177, v248);
                if ((v178 & 1) == 0)
                {
                  unint64_t v169 = v174;
LABEL_198:
                  a1 = (uint64_t)v250;
                  goto LABEL_199;
                }

                unint64_t result = Substring.index(after:)();
                unint64_t v174 = result >> 14;
                if (result >> 14 == v169) {
                  goto LABEL_198;
                }
              }

LABEL_218:
              __break(1u);
LABEL_219:
              __break(1u);
LABEL_220:
              __break(1u);
LABEL_221:
              __break(1u);
              goto LABEL_222;
            }

LABEL_213:
          BOOL v233 = v239;
          unint64_t *v239 = 0LL;
          v233[1] = 0LL;
          *((_BYTE *)v233 + 16) = 1;
          return result;
        }

        if (Substring.distance(from:to:)() >= 1)
        {
          unint64_t v226 = *(void *)(a1 + 24);
          swift_bridgeObjectRetain();
          unint64_t v249 = String.subscript.getter();
          unint64_t v245 = v227;
          swift_bridgeObjectRelease();
          a1 = (uint64_t)v250;
          unint64_t v228 = Substring.index(_:offsetBy:limitedBy:)();
          char v230 = v229;
          unint64_t result = swift_bridgeObjectRelease();
          if ((v230 & 1) == 0)
          {
            if (v226 >> 14 < v228 >> 14) {
              goto LABEL_230;
            }
            *(void *)(a1 + 16) = v228;
            *(void *)(a1 + 24) = v226;
          }
        }

        MEMORY[0x186E052CC](v219, v221, v223, v225);
        uint64_t v232 = v231;
        unint64_t result = swift_bridgeObjectRelease();
        if (*(void *)(a1 + 16) >> 14 < (unint64_t)v246 >> 14)
        {
LABEL_224:
          __break(1u);
LABEL_225:
          __break(1u);
LABEL_226:
          __break(1u);
          goto LABEL_227;
        }

        if (!v232) {
          goto LABEL_212;
        }
LABEL_116:
        swift_bridgeObjectRelease();
        unint64_t v125 = *(void *)(a1 + 16);
      }
    }

    uint64_t v94 = Substring.distance(from:to:)();
    a1 = (uint64_t)v250;
    if (v94 >= 1)
    {
      unint64_t v95 = v250[3];
      swift_bridgeObjectRetain();
      unint64_t v249 = String.subscript.getter();
      unint64_t v245 = v96;
      swift_bridgeObjectRelease();
      a1 = (uint64_t)v250;
      unint64_t v97 = Substring.index(_:offsetBy:limitedBy:)();
      char v99 = v98;
      unint64_t result = swift_bridgeObjectRelease();
      if ((v99 & 1) == 0) {
        break;
      }
    }

LABEL_86:
    MEMORY[0x186E052CC](v87, v89, v91, v93);
    uint64_t v101 = v100;
    unint64_t result = swift_bridgeObjectRelease();
    if (!v101) {
      goto LABEL_113;
    }
LABEL_2:
    swift_bridgeObjectRelease();
  }

  if (v95 >> 14 >= v97 >> 14)
  {
    *(void *)(a1 + 16) = v97;
    *(void *)(a1 + 24) = v95;
    goto LABEL_86;
  }

  __break(1u);
  return result;
}

LABEL_227:
  __break(1u);
LABEL_228:
  __break(1u);
LABEL_229:
  __break(1u);
LABEL_230:
  __break(1u);
LABEL_231:
  __break(1u);
LABEL_232:
  __break(1u);
LABEL_233:
  __break(1u);
LABEL_234:
  __break(1u);
LABEL_235:
  __break(1u);
LABEL_236:
  __break(1u);
LABEL_237:
  __break(1u);
LABEL_238:
  __break(1u);
LABEL_239:
  __break(1u);
LABEL_240:
  __break(1u);
LABEL_241:
  __break(1u);
LABEL_242:
  __break(1u);
LABEL_243:
  __break(1u);
  return result;
}

uint64_t Parser.lexPOSIXCharacterProperty()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v81 = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AST.Atom.CharacterProperty?);
  uint64_t v4 = MEMORY[0x1895F8858](v2, v3);
  unint64_t v6 = (char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v4, v7);
  unint64_t v9 = (char *)&v56 - v8;
  uint64_t v10 = type metadata accessor for AST.Atom.CharacterProperty(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1895F8858](v10, v12);
  uint64_t v14 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = v1[1];
  unint64_t v16 = v1[2];
  uint64_t v79 = *v1;
  unint64_t v80 = v16;
  uint64_t v17 = v1[3];
  LOBYTE(v16) = *((_BYTE *)v1 + 32);
  uint64_t v18 = v1[6];
  uint64_t v77 = v1[5];
  uint64_t v78 = v17;
  uint64_t v76 = v1[7];
  int v75 = *((unsigned __int8 *)v1 + 64);
  uint64_t v19 = v1[9];
  char v82 = v16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  closure #1 in closure #1 in Parser.lexPOSIXCharacterProperty()(v1, (uint64_t)v6);
  char v20 = *(unsigned int (**)(void, void, void))(v11 + 48);
  if (v20(v6, 1LL, v10) == 1)
  {
    uint64_t v70 = v18;
    char v71 = v20;
    unint64_t v73 = v14;
    uint64_t v74 = v15;
    uint64_t v72 = v11;
    outlined destroy of _ASTParent?( (uint64_t)v6,  &demangling cache variable for type metadata for AST.Atom.CharacterProperty?);
    uint64_t v21 = v1[9];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v22 = specialized Collection.dropFirst(_:)(*(void *)(v19 + 16), v21);
    uint64_t v24 = v23;
    uint64_t v26 = v25;
    int64_t v28 = v27 >> 1;
    uint64_t v69 = v21;
    swift_bridgeObjectRetain();
    uint64_t v68 = v22;
    uint64_t result = swift_unknownObjectRetain();
    uint64_t v30 = v24 - 32;
    uint64_t v31 = v26;
    uint64_t v32 = v26;
LABEL_3:
    unint64_t v34 = v80;
    uint64_t v33 = v81;
    uint64_t v35 = v30 + 80 * v31;
    uint64_t v36 = v74;
    while (1)
    {
      if (v28 == v32)
      {
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease_n();
        char v49 = v82;
        uint64_t *v1 = v79;
        v1[1] = v36;
        uint64_t v50 = v78;
        v1[2] = v34;
        v1[3] = v50;
        *((_BYTE *)v1 + 32) = v49;
        uint64_t v51 = v70;
        v1[5] = v77;
        v1[6] = v51;
        v1[7] = v76;
        *((_BYTE *)v1 + 64) = v75;
        v1[9] = v19;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v72 + 56))(v9, 1LL, 1LL, v10);
        uint64_t v14 = v73;
        char v20 = v71;
        goto LABEL_15;
      }

      if (v31 < v26 || v32 >= v28) {
        break;
      }
      int v37 = *(unsigned __int8 *)(v35 + 32);
      ++v32;
      v35 += 80LL;
      if (!v37)
      {
        unint64_t v62 = v9;
        uint64_t v64 = v10;
        uint64_t v67 = v30;
        uint64_t v38 = *(void *)(v35 - 32);
        uint64_t v60 = *(void *)(v35 - 40);
        uint64_t v59 = *(void *)(v35 - 24);
        uint64_t v39 = *(void *)(v35 - 8);
        uint64_t v58 = *(void *)(v35 - 16);
        uint64_t v41 = *(void *)v35;
        uint64_t v40 = *(void *)(v35 + 8);
        uint64_t v42 = *(void *)(v35 + 16);
        int v43 = *(unsigned __int8 *)(v35 + 24);
        uint64_t v57 = v38;
        swift_bridgeObjectRetain();
        uint64_t v65 = v41;
        uint64_t v66 = v39;
        uint64_t v44 = v41;
        uint64_t v45 = v40;
        uint64_t v63 = v42;
        int v61 = v43;
        outlined copy of ParseError?(v39, v44, v40, v42, v43);
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v19 + 16) + 1LL,  1,  (char *)v19);
          uint64_t v19 = result;
        }

        unint64_t v47 = *(void *)(v19 + 16);
        unint64_t v46 = *(void *)(v19 + 24);
        uint64_t v30 = v67;
        uint64_t v10 = v64;
        unint64_t v9 = v62;
        if (v47 >= v46 >> 1)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v46 > 1),  v47 + 1,  1,  (char *)v19);
          uint64_t v30 = v67;
          uint64_t v19 = result;
        }

        *(void *)(v19 + 16) = v47 + 1;
        unint64_t v48 = v19 + 80 * v47;
        *(_BYTE *)(v48 + 32) = 0;
        *(void *)(v48 + 40) = v60;
        *(void *)(v48 + 48) = v57;
        *(void *)(v48 + 56) = v59;
        *(void *)(v48 + 64) = v58;
        *(void *)(v48 + 72) = v66;
        *(void *)(v48 + 80) = v65;
        *(void *)(v48 + 88) = v45;
        *(void *)(v48 + 96) = v63;
        *(_BYTE *)(v48 + 104) = v61;
        uint64_t v31 = v32;
        goto LABEL_3;
      }
    }

    __break(1u);
  }

  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined init with take of AST.Atom.Kind( (uint64_t)v6,  (uint64_t)v9,  type metadata accessor for AST.Atom.CharacterProperty);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v9, 0LL, 1LL, v10);
    unint64_t v34 = v80;
    uint64_t v33 = v81;
LABEL_15:
    if (v20(v9, 1LL, v10) == 1)
    {
      outlined destroy of _ASTParent?( (uint64_t)v9,  &demangling cache variable for type metadata for AST.Atom.CharacterProperty?);
      uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Atom.CharacterProperty>);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 56LL))( v33,  1LL,  1LL,  v52);
    }

    outlined init with take of AST.Atom.Kind( (uint64_t)v9,  (uint64_t)v14,  type metadata accessor for AST.Atom.CharacterProperty);
    uint64_t result = outlined init with take of AST.Atom.Kind( (uint64_t)v14,  v33,  type metadata accessor for AST.Atom.CharacterProperty);
    unint64_t v53 = v1[2];
    if (v53 >> 14 >= v34 >> 14)
    {
      uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Atom.CharacterProperty>);
      unint64_t v55 = (unint64_t *)(v33 + *(int *)(v54 + 28));
      *unint64_t v55 = v34;
      v55[1] = v53;
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v54 - 8) + 56LL))( v33,  0LL,  1LL,  v54);
    }
  }

  __break(1u);
  return result;
}

uint64_t closure #1 in closure #1 in Parser.lexPOSIXCharacterProperty()@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0LL);
  MEMORY[0x1895F8858](v4, v5);
  uint64_t v7 = (uint64_t *)((char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  if ((specialized Parser.tryEat<A>(sequence:)(14939LL, 0xE200000000000000LL) & 1) == 0)
  {
    uint64_t v18 = type metadata accessor for AST.Atom.CharacterProperty(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL))( a2,  1LL,  1LL,  v18);
  }

  v8._uint64_t countAndFlagsBits = 94LL;
  v8._uint64_t object = (void *)0xE100000000000000LL;
  BOOL v9 = Parser.tryEat(_:)(v8);
  specialized Parser.lexUntil(_:)(a1, atPossibleEnding #1 (_:) in Parser.lexCharacterPropertyKeyValue(), &v25);
  uint64_t v11 = v25;
  uint64_t v10 = v26;
  uint64_t v12 = v27;
  uint64_t v13 = v28;
  v14._uint64_t countAndFlagsBits = 61LL;
  v14._uint64_t object = (void *)0xE100000000000000LL;
  if (Parser.tryEat(_:)(v14))
  {
    uint64_t v22 = v13;
    BOOL v23 = v9;
    specialized Parser.lexUntil(_:)(a1, atPossibleEnding #1 (_:) in Parser.lexCharacterPropertyKeyValue(), &v25);
    uint64_t v16 = v25;
    uint64_t v15 = v26;
    uint64_t v17 = v27;
    uint64_t v13 = v28;
    if ((specialized Parser.tryEat<A>(sequence:)(23866LL, 0xE200000000000000LL) & 1) != 0)
    {
      if (v10)
      {
        uint64_t v25 = v11;
        uint64_t v26 = v10;
        uint64_t v27 = v12;
        uint64_t v28 = v22;
        v24[0] = v16;
        v24[1] = v15;
        void v24[2] = v17;
        v24[3] = v13;
        Parser.classifyCharacterProperty(key:value:)(&v25, v24, v7);
        swift_bridgeObjectRelease();
LABEL_10:
        swift_bridgeObjectRelease();
        outlined init with take of AST.Atom.Kind( (uint64_t)v7,  a2,  type metadata accessor for AST.Atom.CharacterProperty.Kind);
        uint64_t v20 = type metadata accessor for AST.Atom.CharacterProperty(0LL);
        *(_BYTE *)(a2 + *(int *)(v20 + 20)) = v23;
        *(_BYTE *)(a2 + *(int *)(v20 + 24)) = 1;
        return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56LL))( a2,  0LL,  1LL,  v20);
      }

uint64_t Parser.lexNamedCharacter()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AST.Atom.Kind?);
  MEMORY[0x1895F8858](v3, v4);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for AST.Atom.Kind(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7, v9);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v12 = v1[2];
  if ((specialized Parser.tryEat<A>(sequence:)(31566LL, 0xE200000000000000LL) & 1) != 0)
  {
    if ((specialized Parser.tryEat<A>(sequence:)(11093LL, 0xE200000000000000LL) & 1) != 0)
    {
      specialized Parser.lexUntil(_:)(v1, 125LL, 0xE100000000000000LL, v22);
      Parser.validateUnicodeScalar(_:_:)(v22, 2u, (uint64_t)&v20);
      swift_bridgeObjectRelease();
      *(_DWORD *)uint64_t v6 = v20;
      *(_OWORD *)(v6 + 8) = v21;
    }

    else
    {
      specialized Parser.lexUntil(_:)(v1, 125LL, 0xE100000000000000LL, v22);
      uint64_t v13 = v22[1];
      *(void *)uint64_t v6 = v22[0];
      *((void *)v6 + 1) = v13;
    }

    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v6, 0LL, 1LL, v7);
  }

  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1LL, 1LL, v7);
  }

  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1LL, v7) == 1)
  {
    outlined destroy of _ASTParent?((uint64_t)v6, &demangling cache variable for type metadata for AST.Atom.Kind?);
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Atom.Kind>);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))( a1,  1LL,  1LL,  v14);
  }

  else
  {
    outlined init with take of AST.Atom.Kind((uint64_t)v6, (uint64_t)v11, type metadata accessor for AST.Atom.Kind);
    uint64_t result = outlined init with take of AST.Atom.Kind((uint64_t)v11, a1, type metadata accessor for AST.Atom.Kind);
    unint64_t v16 = v1[2];
    if (v16 >> 14 < v12 >> 14)
    {
      __break(1u);
    }

    else
    {
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Atom.Kind>);
      uint64_t v18 = (unint64_t *)(a1 + *(int *)(v17 + 28));
      *uint64_t v18 = v12;
      v18[1] = v16;
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))( a1,  0LL,  1LL,  v17);
    }
  }

  return result;
}

uint64_t atPossibleEnding #1 (_:) in Parser.lexCharacterPropertyKeyValue()()
{
  uint64_t v0 = String.subscript.getter();
  if (!((v0 ^ v1) >> 14))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
LABEL_7:
    swift_bridgeObjectRelease();
    return 1LL;
  }

  uint64_t v2 = Substring.subscript.getter();
  uint64_t v4 = v3;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  if (v2 == 61 && v4 == 0xE100000000000000LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || v2 == 58 && v4 == 0xE100000000000000LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || v2 == 91 && v4 == 0xE100000000000000LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || v2 == 93 && v4 == 0xE100000000000000LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || v2 == 125 && v4 == 0xE100000000000000LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || v2 == 92 && v4 == 0xE100000000000000LL)
  {
    goto LABEL_7;
  }

  char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  return v6 & 1;
}

uint64_t Parser.lexCharacterProperty()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AST.Atom.CharacterProperty?);
  MEMORY[0x1895F8858](v3, v4);
  char v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for AST.Atom.CharacterProperty(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7, v9);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v12 = v1[2];
  closure #1 in Parser.lexCharacterProperty()(v1, (uint64_t)v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1LL, v7) == 1)
  {
    outlined destroy of _ASTParent?( (uint64_t)v6,  &demangling cache variable for type metadata for AST.Atom.CharacterProperty?);
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Atom.CharacterProperty>);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))( a1,  1LL,  1LL,  v13);
  }

  else
  {
    outlined init with take of AST.Atom.Kind( (uint64_t)v6,  (uint64_t)v11,  type metadata accessor for AST.Atom.CharacterProperty);
    uint64_t result = outlined init with take of AST.Atom.Kind( (uint64_t)v11,  a1,  type metadata accessor for AST.Atom.CharacterProperty);
    unint64_t v15 = v1[2];
    if (v15 >> 14 < v12 >> 14)
    {
      __break(1u);
    }

    else
    {
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Atom.CharacterProperty>);
      uint64_t v17 = (unint64_t *)(a1 + *(int *)(v16 + 28));
      *uint64_t v17 = v12;
      v17[1] = v15;
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))( a1,  0LL,  1LL,  v16);
    }
  }

  return result;
}

uint64_t closure #1 in Parser.lexCharacterProperty()@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0LL);
  MEMORY[0x1895F8858](v4, v5);
  uint64_t v33 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_bridgeObjectRetain();
  uint64_t v7 = String.subscript.getter();
  unint64_t v9 = v8;
  swift_bridgeObjectRelease();
  LOBYTE(v7) = specialized Sequence<>.starts<A>(with:)(31600LL, 0xE200000000000000LL, v7, v9);
  swift_bridgeObjectRelease();
  if ((v7 & 1) == 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = String.subscript.getter();
    unint64_t v12 = v11;
    swift_bridgeObjectRelease();
    LOBYTE(v10) = specialized Sequence<>.starts<A>(with:)(31568LL, 0xE200000000000000LL, v10, v12);
    swift_bridgeObjectRelease();
    if ((v10 & 1) == 0)
    {
      uint64_t v20 = type metadata accessor for AST.Atom.CharacterProperty(0LL);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56LL))( a2,  1LL,  1LL,  v20);
    }
  }

  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v13 = String.subscript.getter();
  if ((v13 ^ v14) >> 14)
  {
    uint64_t v15 = Substring.subscript.getter();
    uint64_t v16 = v17;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v15 = 0LL;
    uint64_t v16 = 0LL;
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v16)
  {
    if (v15 == 80 && v16 == 0xE100000000000000LL) {
      char v18 = 1;
    }
    else {
      char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    uint64_t v19 = v33;
    swift_bridgeObjectRelease();
  }

  else
  {
    char v18 = 0;
    uint64_t v19 = v33;
  }

  Parser.advance(_:)(2LL);
  specialized Parser.lexUntil(_:)(a1, atPossibleEnding #1 (_:) in Parser.lexCharacterPropertyKeyValue(), &v37);
  unint64_t v22 = *((void *)&v37 + 1);
  unint64_t v23 = v37;
  uint64_t v25 = v38;
  uint64_t v24 = v39;
  v26._uint64_t countAndFlagsBits = 61LL;
  v26._uint64_t object = (void *)0xE100000000000000LL;
  if (!Parser.tryEat(_:)(v26)) {
    goto LABEL_18;
  }
  specialized Parser.lexUntil(_:)(a1, atPossibleEnding #1 (_:) in Parser.lexCharacterPropertyKeyValue(), &v37);
  unsigned __int128 v27 = v37;
  uint64_t v28 = v38;
  uint64_t v29 = v39;
  if (!v22)
  {
    uint64_t v24 = v39;
    uint64_t v25 = v38;
    unint64_t v22 = *((void *)&v37 + 1);
    unint64_t v23 = v37;
LABEL_18:
    *(void *)&unsigned __int128 v37 = v23;
    *((void *)&v37 + 1) = v22;
    uint64_t v38 = v25;
    uint64_t v39 = v24;
    Parser.classifyCharacterPropertyValueOnly(_:)((uint64_t *)&v37, v19);
    goto LABEL_19;
  }

  unsigned __int128 v37 = __PAIR128__(v22, v23);
  uint64_t v38 = v25;
  uint64_t v39 = v24;
  unsigned __int128 v34 = v27;
  uint64_t v35 = v28;
  uint64_t v36 = v29;
  Parser.classifyCharacterProperty(key:value:)((uint64_t *)&v37, (uint64_t *)&v34, v19);
  swift_bridgeObjectRelease();
LABEL_19:
  swift_bridgeObjectRelease();
  v30._uint64_t countAndFlagsBits = 125LL;
  v30._uint64_t object = (void *)0xE100000000000000LL;
  if (!Parser.tryEat(_:)(v30))
  {
    unsigned __int128 v37 = xmmword_181005F60;
    uint64_t v38 = 0LL;
    uint64_t v39 = 0LL;
    char v40 = 3;
    Parser.errorAtCurrentPosition(_:)((__int128 *)&v37);
  }

  outlined init with take of AST.Atom.Kind((uint64_t)v19, a2, type metadata accessor for AST.Atom.CharacterProperty.Kind);
  uint64_t v31 = type metadata accessor for AST.Atom.CharacterProperty(0LL);
  *(_BYTE *)(a2 + *(int *)(v31 + 20)) = v18 & 1;
  *(_BYTE *)(a2 + *(int *)(v31 + 24)) = 0;
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56LL))(a2, 0LL, 1LL, v31);
}

uint64_t Parser.lexRecursionLevel()@<X0>(uint64_t a1@<X8>)
{
  unint64_t v3 = *(void *)(v1 + 16);
  v4._uint64_t countAndFlagsBits = 43LL;
  v4._uint64_t object = (void *)0xE100000000000000LL;
  if (Parser.tryEat(_:)(v4))
  {
    uint64_t result = (uint64_t)Parser.lexNumber(_:)(1, (uint64_t)&v9);
    if ((v12 & 1) == 0)
    {
      if ((v10 & 1) == 0)
      {
        uint64_t v6 = v9;
        goto LABEL_12;
      }

      goto LABEL_8;
    }

LABEL_12:
    unint64_t v8 = *(void *)(v1 + 16);
    if (v8 >> 14 >= v3 >> 14)
    {
      *(void *)a1 = v6;
      *(void *)(a1 + 8) = 0LL;
      *(void *)(a1 + 16) = v3;
      *(void *)(a1 + 24) = v8;
      *(_BYTE *)(a1 + 32) = 0;
      return result;
    }

    __break(1u);
    goto LABEL_15;
  }

  uint64_t v20 = *(void *)(v8 + 16);
  if (v20 == 1)
  {
    uint64_t result = swift_bridgeObjectRelease();
    if (*(void *)(v8 + 16))
    {
      *a1 = *(void *)(v8 + 32);
      swift_retain();
      return swift_bridgeObjectRelease();
    }

    goto LABEL_19;
  }

  uint64_t result = swift_allocObject();
  if (!v20)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }

  if (*((void *)v11 + 2) == v20 - 1)
  {
    *(void *)(result + 16) = v8;
    *(void *)(result + 24) = v11;
    *a1 = result;
    return result;
  }

uint64_t Parser.lexEscapedReference()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v153 = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AST.Atom.Kind?);
  uint64_t v4 = MEMORY[0x1895F8858](v2, v3);
  uint64_t v6 = (char *)&v132 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v4, v7);
  uint64_t v152 = (uint64_t)&v132 - v8;
  uint64_t v9 = type metadata accessor for AST.Atom.Kind(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](v9, v11);
  uint64_t v148 = (uint64_t)&v132 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = *v1;
  uint64_t v13 = v1[1];
  unint64_t v16 = v1[2];
  uint64_t v15 = v1[3];
  LOBYTE(v12) = *((_BYTE *)v1 + 32);
  uint64_t v17 = v1[6];
  uint64_t v145 = v1[5];
  uint64_t v144 = v1[7];
  int v143 = *((unsigned __int8 *)v1 + 64);
  char v18 = (void (*)(void, void, void, void))v1[9];
  char v155 = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v154 = v16;
  uint64_t v146 = v15;
  uint64_t v147 = v14;
  uint64_t v19 = String.subscript.getter();
  uint64_t v150 = v13;
  uint64_t v151 = v17;
  if (!((v19 ^ v20) >> 14))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __int128 v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
    v21(v6, 1LL, 1LL, v9);
    uint64_t v22 = v10;
    uint64_t v23 = v153;
    unint64_t v24 = v154;
    goto LABEL_40;
  }

  uint64_t v139 = v10;
  uint64_t v140 = v6;
  uint64_t v25 = Substring.subscript.getter();
  uint64_t v27 = v26;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  uint64_t v141 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v18;
  swift_bridgeObjectRelease();
  v28._uint64_t countAndFlagsBits = 103LL;
  v28._uint64_t object = (void *)0xE100000000000000LL;
  if (!Parser.tryEat(_:)(v28))
  {
    v43._uint64_t countAndFlagsBits = 107LL;
    v43._uint64_t object = (void *)0xE100000000000000LL;
    Swift::Bool v44 = Parser.tryEat(_:)(v43);
    unint64_t v24 = v154;
    if (!v44)
    {
      uint64_t v22 = v139;
      if (v25 == 48 && v27 == 0xE100000000000000LL)
      {
        swift_bridgeObjectRelease();
        char v18 = (void (*)(void, void, void, void))v141;
        uint64_t v6 = v140;
        uint64_t v23 = v153;
LABEL_28:
        __int128 v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56);
        v21(v6, 1LL, 1LL, v9);
        goto LABEL_40;
      }

      char v76 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      char v18 = (void (*)(void, void, void, void))v141;
      uint64_t v6 = v140;
      uint64_t v23 = v153;
      if ((v76 & 1) != 0) {
        goto LABEL_28;
      }
      Parser.lexNumber(_:)(1, (uint64_t)&v156);
      if ((v158 & 1) != 0) {
        goto LABEL_28;
      }
      uint64_t v77 = *((void *)&v157 + 1);
      uint64_t v78 = v157;
      uint64_t v79 = BYTE8(v156) & 1;
      *(void *)uint64_t v6 = v156;
      *((void *)v6 + 1) = v79;
      *((void *)v6 + 2) = v78;
      *((void *)v6 + 3) = v77;
      v6[32] = 0;
      *(_OWORD *)(v6 + 40) = 0u;
      *(_OWORD *)(v6 + 56) = 0u;
      _BYTE v6[72] = 1;
      *((void *)v6 + 10) = v78;
      *((void *)v6 + 11) = v77;
      swift_storeEnumTagMultiPayload();
LABEL_35:
      __int128 v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56);
      v21(v6, 0LL, 1LL, v9);
      goto LABEL_40;
    }

    uint64_t v149 = v9;
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Character>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_181005EC0;
    *(void *)(inited + 32) = 60LL;
    *(void *)(inited + 40) = 0xE100000000000000LL;
    *(void *)(inited + 48) = 39LL;
    *(void *)(inited + 56) = 0xE100000000000000LL;
    uint64_t v46 = specialized Parser.tryEat<A>(anyOf:)(inited);
    uint64_t v48 = v47;
    swift_setDeallocating();
    swift_arrayDestroy();
    uint64_t v23 = v153;
    if (v48)
    {
      uint64_t v49 = Parser.getClosingDelimiter(for:)(v46, v48);
      uint64_t v51 = v50;
      swift_bridgeObjectRelease();
      Parser.lexNumberedReference(allowWholePatternRef:allowRecursionLevel:)(0, 1, (uint64_t)&v156);
      char v52 = v158;
      uint64_t v6 = v140;
      if (v158 == 255LL)
      {
        uint64_t v53 = v49;
        uint64_t v54 = v1;
        Parser.expectNamedReference(endingWith:eatEnding:allowRecursionLevel:)(v53, v51, 1, 1, (uint64_t)&v156);
        swift_bridgeObjectRelease();
        uint64_t v56 = *((void *)&v156 + 1);
        uint64_t v55 = v156;
        uint64_t v58 = *((void *)&v157 + 1);
        uint64_t v57 = v157;
        char v52 = v158;
        uint64_t v60 = *((void *)&v159 + 1);
        uint64_t v59 = v159;
        uint64_t v62 = *((void *)&v160 + 1);
        uint64_t v61 = v160;
        char v63 = v161;
        uint64_t v65 = *((void *)&v162 + 1);
        uint64_t v64 = v162;
        char v18 = (void (*)(void, void, void, void))v141;
LABEL_39:
        *(void *)uint64_t v6 = v55;
        *((void *)v6 + 1) = v56;
        *((void *)v6 + 2) = v57;
        *((void *)v6 + 3) = v58;
        v6[32] = v52;
        *((void *)v6 + 5) = v59;
        *((void *)v6 + 6) = v60;
        *((void *)v6 + 7) = v61;
        *((void *)v6 + 8) = v62;
        _BYTE v6[72] = v63;
        *((void *)v6 + 10) = v64;
        *((void *)v6 + 11) = v65;
        uint64_t v9 = v149;
        swift_storeEnumTagMultiPayload();
        uint64_t v22 = v139;
        unint64_t v95 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v139 + 56);
        v95(v6, 0LL, 1LL, v9);
        uint64_t v1 = v54;
        __int128 v21 = v95;
        unint64_t v24 = v154;
        goto LABEL_40;
      }

      uint64_t v138 = *((void *)&v156 + 1);
      uint64_t v86 = v156;
      uint64_t v136 = *((void *)&v157 + 1);
      uint64_t v137 = v157;
      uint64_t v134 = *((void *)&v159 + 1);
      uint64_t v135 = v159;
      uint64_t v62 = *((void *)&v160 + 1);
      uint64_t v133 = v160;
      char v87 = v161;
      uint64_t v64 = v162;
      LODWORD(v132) = v161 & 1;
      uint64_t v65 = *((void *)&v162 + 1);
      if ((specialized Parser.tryEat<A>(sequence:)(v49, v51) & 1) != 0)
      {
        uint64_t v54 = v1;
      }

      else
      {
        *(void *)&__int128 v156 = v49;
        *((void *)&v156 + 1) = v51;
        *(void *)&__int128 v167 = String.init<A>(_:)();
        *((void *)&v167 + 1) = v93;
        uint64_t v168 = 0LL;
        uint64_t v169 = 0LL;
        char v170 = 3;
        uint64_t v54 = v1;
        Parser.errorAtCurrentPosition(_:)(&v167);
      }

uint64_t Parser.lexGroupLikeReference()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AST.Atom.Kind?);
  uint64_t v5 = MEMORY[0x1895F8858](v3, v4);
  uint64_t v7 = (char *)&v75 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v5, v8);
  uint64_t v10 = (char *)&v75 - v9;
  uint64_t v11 = type metadata accessor for AST.Atom.Kind(0LL);
  uint64_t v12 = *(void **)(v11 - 8);
  MEMORY[0x1895F8858](v11, v13);
  uint64_t v15 = (char *)&v75 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = v1[1];
  uint64_t v90 = *v1;
  unint64_t v17 = v1[2];
  uint64_t v94 = v1[3];
  LOBYTE(vHasher._combine(_:)(v0 >> 14) = *((_BYTE *)v1 + 32);
  uint64_t v18 = v1[6];
  uint64_t v93 = v1[5];
  uint64_t v92 = v1[7];
  int v91 = *((unsigned __int8 *)v1 + 64);
  uint64_t v19 = (char *)v1[9];
  char v99 = v14;
  uint64_t v97 = v16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v98 = v19;
  swift_bridgeObjectRetain();
  char v20 = specialized Parser.tryEat<A>(sequence:)(16168LL, 0xE200000000000000LL);
  unint64_t v95 = v15;
  if ((v20 & 1) == 0)
  {
    *(void *)&__int128 v96 = v12[7];
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v96)(v7, 1LL, 1LL, v11);
    unint64_t v21 = v17;
    goto LABEL_5;
  }

  char v87 = v12;
  unint64_t v21 = v17;
  if ((specialized Parser.tryEat<A>(sequence:)(15696LL, 0xE200000000000000LL) & 1) == 0)
  {
    uint64_t v25 = a1;
    if ((specialized Parser.tryEat<A>(sequence:)(15952LL, 0xE200000000000000LL) & 1) != 0
      || (v26._uint64_t countAndFlagsBits = 38LL, v26._object = (void *)0xE100000000000000LL, Parser.tryEat(_:)(v26)))
    {
      Parser.expectNamedReference(endingWith:eatEnding:allowRecursionLevel:)( 41LL,  0xE100000000000000LL,  1,  0,  (uint64_t)&v100);
      unsigned __int8 v27 = v102;
      char v28 = v105;
      __int128 v29 = v101;
      *(_OWORD *)uint64_t v7 = v100;
      *((_OWORD *)v7 + 1) = v29;
      v7[32] = v27;
      *(_OWORD *)(v7 + 40) = v103;
      *(_OWORD *)(v7 + 56) = v104;
      _BYTE v7[72] = v28;
      *((_OWORD *)v7 + 5) = v106;
      swift_storeEnumTagMultiPayload();
      uint64_t v12 = v87;
      *(void *)&__int128 v96 = v87[7];
      ((void (*)(char *, void, uint64_t, uint64_t))v96)(v7, 0LL, 1LL, v11);
      goto LABEL_9;
    }

    uint64_t v88 = v18;
    unint64_t v67 = v1[2];
    v68._uint64_t countAndFlagsBits = 82LL;
    v68._uint64_t object = (void *)0xE100000000000000LL;
    uint64_t result = Parser.tryEat(_:)(v68);
    uint64_t v12 = v87;
    if ((result & 1) != 0)
    {
      unint64_t v69 = v1[2];
      if (v69 >> 14 < v67 >> 14) {
        goto LABEL_41;
      }
      v70._uint64_t countAndFlagsBits = 41LL;
      v70._uint64_t object = (void *)0xE100000000000000LL;
      if (!Parser.tryEat(_:)(v70))
      {
        __int128 v100 = xmmword_181005F70;
        __int128 v101 = 0uLL;
        unsigned __int8 v102 = 3;
        Parser.errorAtCurrentPosition(_:)(&v100);
      }

      *(void *)uint64_t v7 = 0LL;
      *((void *)v7 + 1) = 0LL;
      *((void *)v7 + 2) = v67;
      *((void *)v7 + 3) = v69;
      v7[32] = 0;
      *(_OWORD *)(v7 + 40) = 0u;
      *(_OWORD *)(v7 + 56) = 0u;
      _BYTE v7[72] = 1;
      *((void *)v7 + 10) = v67;
      *((void *)v7 + 11) = v69;
    }

    else
    {
      Parser.lexNumberedReference(allowWholePatternRef:allowRecursionLevel:)(1, 0, (uint64_t)&v100);
      unsigned __int8 v71 = v102;
      if (v102 == 255LL)
      {
        *(void *)&__int128 v96 = v12[7];
        ((void (*)(char *, uint64_t, uint64_t, uint64_t))v96)(v7, 1LL, 1LL, v11);
LABEL_38:
        uint64_t v18 = v88;
        goto LABEL_9;
      }

      __int128 v84 = v100;
      __int128 v83 = v101;
      __int128 v86 = v103;
      __int128 v85 = v104;
      __int128 v96 = v106;
      char v72 = v105;
      v73._uint64_t countAndFlagsBits = 41LL;
      v73._uint64_t object = (void *)0xE100000000000000LL;
      if (!Parser.tryEat(_:)(v73))
      {
        __int128 v100 = xmmword_181005F70;
        __int128 v101 = 0uLL;
        unsigned __int8 v102 = 3;
        Parser.errorAtCurrentPosition(_:)(&v100);
      }

      __int128 v74 = v83;
      *(_OWORD *)uint64_t v7 = v84;
      *((_OWORD *)v7 + 1) = v74;
      v7[32] = v71;
      *(_OWORD *)(v7 + 40) = v86;
      *(_OWORD *)(v7 + 56) = v85;
      _BYTE v7[72] = v72 & 1;
      *((_OWORD *)v7 + 5) = v96;
    }

    swift_storeEnumTagMultiPayload();
    *(void *)&__int128 v96 = v12[7];
    ((void (*)(char *, void, uint64_t, uint64_t))v96)(v7, 0LL, 1LL, v11);
    goto LABEL_38;
  }

  Parser.expectNamedReference(endingWith:eatEnding:allowRecursionLevel:)( 41LL,  0xE100000000000000LL,  1,  0,  (uint64_t)&v100);
  unsigned __int8 v22 = v102;
  char v23 = v105;
  __int128 v24 = v101;
  *(_OWORD *)uint64_t v7 = v100;
  *((_OWORD *)v7 + 1) = v24;
  v7[32] = v22;
  *(_OWORD *)(v7 + 40) = v103;
  *(_OWORD *)(v7 + 56) = v104;
  _BYTE v7[72] = v23;
  *((_OWORD *)v7 + 5) = v106;
  swift_storeEnumTagMultiPayload();
  uint64_t v12 = v87;
  *(void *)&__int128 v96 = v87[7];
  ((void (*)(char *, void, uint64_t, uint64_t))v96)(v7, 0LL, 1LL, v11);
LABEL_5:
  uint64_t v25 = a1;
LABEL_9:
  Swift::Bool v30 = (void *)v12[6];
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v30)(v7, 1LL, v11) == 1)
  {
    char v87 = v30;
    uint64_t v88 = v18;
    outlined destroy of _ASTParent?((uint64_t)v7, &demangling cache variable for type metadata for AST.Atom.Kind?);
    uint64_t v89 = v11;
    unint64_t v31 = v21;
    uint64_t v32 = v1[9];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v33 = specialized Collection.dropFirst(_:)(*((void *)v98 + 2), v32);
    uint64_t v35 = v34;
    uint64_t v37 = v36;
    int64_t v39 = v38 >> 1;
    *(void *)&__int128 v86 = v32;
    unint64_t v21 = v31;
    uint64_t v11 = v89;
    uint64_t v40 = v97;
    swift_bridgeObjectRetain();
    *(void *)&__int128 v85 = v33;
    uint64_t result = swift_unknownObjectRetain();
    uint64_t v42 = v35 - 32;
    uint64_t v43 = v37;
    uint64_t v44 = v37;
LABEL_11:
    uint64_t v45 = v42 + 80 * v43;
    while (1)
    {
      if (v39 == v44)
      {
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease_n();
        char v59 = v99;
        uint64_t *v1 = v90;
        v1[1] = v40;
        uint64_t v60 = v94;
        v1[2] = v21;
        v1[3] = v60;
        *((_BYTE *)v1 + 32) = v59;
        uint64_t v61 = v88;
        v1[5] = v93;
        v1[6] = v61;
        v1[7] = v92;
        *((_BYTE *)v1 + 64) = v91;
        v1[9] = (uint64_t)v98;
        ((void (*)(char *, uint64_t, uint64_t, uint64_t))v96)(v10, 1LL, 1LL, v11);
        Swift::Bool v30 = v87;
        goto LABEL_23;
      }

      if (v43 < v37 || v44 >= v39) {
        break;
      }
      int v46 = *(unsigned __int8 *)(v45 + 32);
      ++v44;
      v45 += 80LL;
      if (!v46)
      {
        unint64_t v82 = v21;
        *(void *)&__int128 v83 = v10;
        *(void *)&__int128 v84 = v25;
        uint64_t v47 = *(void *)(v45 - 32);
        uint64_t v77 = *(void *)(v45 - 40);
        uint64_t v76 = *(void *)(v45 - 24);
        uint64_t v48 = *(void *)(v45 - 8);
        uint64_t v75 = *(void *)(v45 - 16);
        uint64_t v50 = *(void *)v45;
        uint64_t v49 = *(void *)(v45 + 8);
        uint64_t v51 = *(void *)(v45 + 16);
        unsigned __int8 v52 = *(_BYTE *)(v45 + 24);
        uint64_t v80 = v47;
        swift_bridgeObjectRetain();
        uint64_t v78 = v48;
        uint64_t v79 = v49;
        outlined copy of ParseError?(v48, v50, v49, v51, v52);
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v81 = v42;
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v98 + 2) + 1LL,  1,  v98);
          uint64_t v98 = (char *)result;
        }

        unint64_t v54 = *((void *)v98 + 2);
        unint64_t v53 = *((void *)v98 + 3);
        if (v54 >= v53 >> 1)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v53 > 1),  v54 + 1,  1,  v98);
          uint64_t v98 = (char *)result;
        }

        uint64_t v55 = v98;
        *((void *)v98 + 2) = v54 + 1;
        uint64_t v56 = &v55[80 * v54];
        v56[32] = 0;
        uint64_t v57 = v80;
        *((void *)v56 + 5) = v77;
        *((void *)v56 + 6) = v57;
        uint64_t v58 = v75;
        *((void *)v56 + 7) = v76;
        *((void *)v56 + 8) = v58;
        *((void *)v56 + 9) = v78;
        *((void *)v56 + 10) = v50;
        *((void *)v56 + 11) = v79;
        *((void *)v56 + 12) = v51;
        v56[104] = v52;
        uint64_t v43 = v44;
        uint64_t v25 = v84;
        uint64_t v10 = (char *)v83;
        unint64_t v21 = v82;
        uint64_t v11 = v89;
        uint64_t v40 = v97;
        uint64_t v42 = v81;
        goto LABEL_11;
      }
    }

    __break(1u);
  }

  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined init with take of AST.Atom.Kind((uint64_t)v7, (uint64_t)v10, type metadata accessor for AST.Atom.Kind);
    ((void (*)(char *, void, uint64_t, uint64_t))v96)(v10, 0LL, 1LL, v11);
LABEL_23:
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v30)(v10, 1LL, v11) == 1)
    {
      outlined destroy of _ASTParent?((uint64_t)v10, &demangling cache variable for type metadata for AST.Atom.Kind?);
      uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Atom.Kind>);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v62 - 8) + 56LL))( v25,  1LL,  1LL,  v62);
    }

    uint64_t v63 = (uint64_t)v95;
    outlined init with take of AST.Atom.Kind((uint64_t)v10, (uint64_t)v95, type metadata accessor for AST.Atom.Kind);
    uint64_t result = outlined init with take of AST.Atom.Kind(v63, v25, type metadata accessor for AST.Atom.Kind);
    unint64_t v64 = v1[2];
    if (v64 >> 14 >= v21 >> 14)
    {
      uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Atom.Kind>);
      uint64_t v66 = (unint64_t *)(v25 + *(int *)(v65 + 28));
      *uint64_t v66 = v21;
      v66[1] = v64;
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v65 - 8) + 56LL))( v25,  0LL,  1LL,  v65);
    }
  }

  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t closure #1 in Parser.shouldLexGroupLikeAtom()@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  v4._uint64_t countAndFlagsBits = 40LL;
  v4._uint64_t object = (void *)0xE100000000000000LL;
  uint64_t result = Parser.tryEat(_:)(v4);
  if ((result & 1) != 0)
  {
    v6._uint64_t countAndFlagsBits = 63LL;
    v6._uint64_t object = (void *)0xE100000000000000LL;
    if (Parser.tryEat(_:)(v6))
    {
      uint64_t v7 = *(void *)(a1 + 8);
      char v8 = *(_BYTE *)(a1 + 32);
      uint64_t v9 = *(void *)(a1 + 40);
      uint64_t v10 = *(void *)(a1 + 48);
      uint64_t v11 = *(void *)(a1 + 56);
      uint64_t v12 = *(void *)(a1 + 72);
      char v13 = *(_BYTE *)(a1 + 64);
      uint64_t v44 = *(void *)a1;
      uint64_t v45 = v7;
      __int128 v46 = *(_OWORD *)(a1 + 16);
      LOBYTE(v47) = v8;
      uint64_t v48 = v9;
      uint64_t v49 = v10;
      uint64_t v50 = v11;
      char v51 = v13;
      uint64_t v52 = v12;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v14._uint64_t countAndFlagsBits = 80LL;
      v14._uint64_t object = (void *)0xE100000000000000LL;
      LOBYTE(v10) = Parser.tryEat(_:)(v14);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Character>);
      if ((v10 & 1) != 0)
      {
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_181005EC0;
        *(void *)(inited + 32) = 61LL;
        *(void *)(inited + 40) = 0xE100000000000000LL;
        *(void *)(inited + 48) = 62LL;
        *(void *)(inited + 56) = 0xE100000000000000LL;
        specialized Parser.tryEat<A>(anyOf:)(inited);
        uint64_t v17 = v16;
        swift_setDeallocating();
        swift_arrayDestroy();
        if (!v17)
        {
          char v18 = 0;
          goto LABEL_14;
        }
      }

      else
      {
        uint64_t v21 = swift_initStackObject();
        *(_OWORD *)(v21 + 16) = xmmword_181005EC0;
        *(void *)(v21 + 32) = 38LL;
        *(void *)(v21 + 40) = 0xE100000000000000LL;
        *(void *)(v21 + 48) = 82LL;
        *(void *)(v21 + 56) = 0xE100000000000000LL;
        specialized Parser.tryEat<A>(anyOf:)(v21);
        uint64_t v23 = v22;
        swift_setDeallocating();
        swift_arrayDestroy();
        if (!v23)
        {
          uint64_t v54 = v44;
          uint64_t v55 = v45;
          __int128 v56 = v46;
          char v57 = v47;
          uint64_t v58 = v48;
          uint64_t v59 = v49;
          uint64_t v60 = v50;
          char v61 = v51;
          uint64_t v62 = v52;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Character>);
          uint64_t v24 = swift_initStackObject();
          *(void *)(v24 + 32) = 43LL;
          *(_OWORD *)(v24 + 16) = xmmword_181005EC0;
          *(void *)(v24 + 40) = 0xE100000000000000LL;
          *(void *)(v24 + 48) = 45LL;
          *(void *)(v24 + 56) = 0xE100000000000000LL;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          specialized Parser.tryEat<A>(anyOf:)(v24);
          swift_bridgeObjectRelease();
          swift_setDeallocating();
          swift_arrayDestroy();
          uint64_t v25 = v62;
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v26 = String.subscript.getter();
          if ((v26 ^ v27) >> 14)
          {
            Substring.subscript.getter();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            char v18 = Character.isNumber.getter();
          }

          else
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();
            char v18 = 0;
          }

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v53 = v25;
          Diagnostics.appendNewFatalErrors(from:)((_RegexParser::Diagnostics)&v53);
          swift_bridgeObjectRelease();
LABEL_14:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v54 = v52;
          Diagnostics.appendNewFatalErrors(from:)((_RegexParser::Diagnostics)&v54);
          uint64_t result = swift_bridgeObjectRelease();
          if ((v18 & 1) != 0
            || (v28._uint64_t countAndFlagsBits = 67LL,
                v28._uint64_t object = (void *)0xE100000000000000LL,
                uint64_t result = Parser.tryEat(_:)(v28),
                (result & 1) != 0)
            || (v29._uint64_t countAndFlagsBits = 123LL,
                v29._uint64_t object = (void *)0xE100000000000000LL,
                uint64_t result = Parser.tryEat(_:)(v29),
                (result & 1) != 0))
          {
            char v19 = 1;
            goto LABEL_18;
          }

          uint64_t v30 = *(void *)(a1 + 8);
          char v31 = *(_BYTE *)(a1 + 32);
          uint64_t v32 = *(void *)(a1 + 40);
          uint64_t v33 = *(void *)(a1 + 48);
          uint64_t v34 = *(void *)(a1 + 56);
          char v35 = *(_BYTE *)(a1 + 64);
          uint64_t v36 = *(void *)(a1 + 72);
          uint64_t v54 = *(void *)a1;
          uint64_t v55 = v30;
          __int128 v56 = *(_OWORD *)(a1 + 16);
          char v57 = v31;
          uint64_t v58 = v32;
          uint64_t v59 = v33;
          uint64_t v60 = v34;
          char v61 = v35;
          uint64_t v62 = v36;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          Parser.lexMatchingOptionSequence()((unint64_t *)&v44);
          if (*((void *)&v46 + 1))
          {
            outlined consume of AST.MatchingOptionSequence?(v44, v45, v46, *((uint64_t *)&v46 + 1));
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            uint64_t v37 = String.subscript.getter();
            if ((v37 ^ v38) >= 0x4000)
            {
              uint64_t v39 = Substring.subscript.getter();
              uint64_t v41 = v40;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (v39 == 41 && v41 == 0xE100000000000000LL)
              {
                swift_bridgeObjectRelease();
              }

              else
              {
                char v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                char v19 = 0;
                if ((v42 & 1) == 0) {
                  goto LABEL_28;
                }
              }

              char v19 = 1;
              Parser.advance(_:)(1LL);
              goto LABEL_28;
            }

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }

          char v19 = 0;
LABEL_28:
          uint64_t v43 = v62;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v44 = v43;
          Diagnostics.appendNewFatalErrors(from:)((_RegexParser::Diagnostics)&v44);
          uint64_t result = swift_bridgeObjectRelease();
          goto LABEL_18;
        }
      }

      swift_bridgeObjectRelease();
      char v18 = 1;
      goto LABEL_14;
    }

    v20._uint64_t countAndFlagsBits = 42LL;
    v20._uint64_t object = (void *)0xE100000000000000LL;
    uint64_t result = Parser.tryEat(_:)(v20);
    char v19 = result;
  }

  else
  {
    char v19 = 0;
  }

uint64_t closure #1 in Parser.expectEscaped()@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  Swift::String v73 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AST.Atom.Kind?);
  MEMORY[0x1895F8858](v3, v4);
  uint64_t v70 = (uint64_t)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v72 = type metadata accessor for AST.Atom.Kind(0LL);
  uint64_t v69 = *(void *)(v72 - 8);
  uint64_t v7 = MEMORY[0x1895F8858](v72, v6);
  Swift::String v68 = (char *)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = MEMORY[0x1895F8858](v7, v9);
  uint64_t v67 = (uint64_t)&v65 - v11;
  MEMORY[0x1895F8858](v10, v12);
  uint64_t v66 = (char *)&v65 - v13;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Atom.CharacterProperty>?);
  MEMORY[0x1895F8858](v14, v15);
  uint64_t v17 = (char *)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Atom.CharacterProperty>);
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x1895F8858](v18, v20);
  uint64_t v22 = (char *)&v65 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Atom.Kind>?);
  uint64_t v25 = MEMORY[0x1895F8858](v23, v24);
  unint64_t v27 = (char *)&v65 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v25, v28);
  uint64_t v30 = (char *)&v65 - v29;
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Atom.Kind>);
  uint64_t v32 = *(void *)(v31 - 8);
  MEMORY[0x1895F8858](v31, v33);
  char v35 = (char *)&v65 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  LODWORD(v71) = *(unsigned __int8 *)(a1 + 32);
  v36._uint64_t countAndFlagsBits = 99LL;
  v36._uint64_t object = (void *)0xE100000000000000LL;
  if (Parser.tryEat(_:)(v36) || (specialized Parser.tryEat<A>(sequence:)(11587LL, 0xE200000000000000LL) & 1) != 0)
  {
    Parser.expectASCII()((uint64_t)&v74);
    uint64_t v37 = *((void *)&v74 + 1);
    if (*((void *)&v74 + 1))
    {
      unint64_t v38 = v73;
      *Swift::String v73 = v74;
      v38[1] = v37;
    }

    return swift_storeEnumTagMultiPayload();
  }

  if ((specialized Parser.tryEat<A>(sequence:)(0x2D435C2D4DLL, 0xE500000000000000LL) & 1) != 0)
  {
    Parser.expectASCII()((uint64_t)&v74);
    uint64_t v39 = *((void *)&v74 + 1);
    if (*((void *)&v74 + 1))
    {
      uint64_t v40 = v73;
      *Swift::String v73 = v74;
      v40[1] = v39;
    }

    return swift_storeEnumTagMultiPayload();
  }

  if ((specialized Parser.tryEat<A>(sequence:)(11597LL, 0xE200000000000000LL) & 1) != 0)
  {
    Parser.expectASCII()((uint64_t)&v74);
    uint64_t v41 = *((void *)&v74 + 1);
    if (*((void *)&v74 + 1))
    {
      char v42 = v73;
      *Swift::String v73 = v74;
      v42[1] = v41;
    }

    return swift_storeEnumTagMultiPayload();
  }

  Parser.lexNamedCharacter()((uint64_t)v30);
  uint64_t v43 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48);
  if (v43(v30, 1LL, v31) != 1)
  {
    outlined init with take of Source.Located<AST.Atom.Kind>?( (uint64_t)v30,  (uint64_t)v35,  &demangling cache variable for type metadata for Source.Located<AST.Atom.Kind>);
    return outlined init with take of AST.Atom.Kind( (uint64_t)v35,  (uint64_t)v73,  type metadata accessor for AST.Atom.Kind);
  }

  outlined destroy of _ASTParent?( (uint64_t)v30,  &demangling cache variable for type metadata for Source.Located<AST.Atom.Kind>?);
  Parser.lexCharacterProperty()((uint64_t)v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1LL, v18) == 1)
  {
    outlined destroy of _ASTParent?( (uint64_t)v17,  &demangling cache variable for type metadata for Source.Located<AST.Atom.CharacterProperty>?);
    if ((v71 & 1) == 0)
    {
      Parser.lexEscapedReference()((uint64_t)v27);
      if (v43(v27, 1LL, v31) != 1)
      {
        uint64_t v52 = v67;
        outlined init with copy of AST.Atom((uint64_t)v27, v67, type metadata accessor for AST.Atom.Kind);
        outlined destroy of _ASTParent?( (uint64_t)v27,  &demangling cache variable for type metadata for Source.Located<AST.Atom.Kind>);
        uint64_t v50 = v52;
        uint64_t v51 = (uint64_t)v66;
        goto LABEL_24;
      }

      outlined destroy of _ASTParent?( (uint64_t)v27,  &demangling cache variable for type metadata for Source.Located<AST.Atom.Kind>?);
    }

    uint64_t v44 = v70;
    Parser.lexUnicodeScalar()(v70);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v69 + 48))(v44, 1LL, v72) == 1)
    {
      outlined destroy of _ASTParent?(v44, &demangling cache variable for type metadata for AST.Atom.Kind?);
      uint64_t v45 = *(char **)(a1 + 8);
      unint64_t v46 = *(void *)(a1 + 16);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v47 = String.subscript.getter();
      if (!((v47 ^ v48) >> 14))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
LABEL_34:
        __int128 v74 = 2uLL;
        uint64_t v75 = 0LL;
        uint64_t v76 = 0LL;
        char v77 = 36;
        Parser.errorAtCurrentPosition(_:)(&v74);
        return swift_storeEnumTagMultiPayload();
      }

      uint64_t v53 = Substring.subscript.getter();
      uint64_t v55 = v54;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      Parser.advance(_:)(1LL);
      unint64_t v56 = *(void *)(a1 + 16);
      if (v56 >> 14 < v46 >> 14)
      {
        __break(1u);
      }

      else
      {
        uint64_t v19 = a1;
        if (!v55) {
          goto LABEL_34;
        }
        static AST.Atom.EscapedBuiltin.fromCharacter(_:inCustomCharacterClass:)(v53, v55, v71, (char *)&v74);
        char v57 = v74;
        if (v74 != 31)
        {
          swift_bridgeObjectRelease();
          *(_BYTE *)Swift::String v73 = v57;
          return swift_storeEnumTagMultiPayload();
        }

        swift_bridgeObjectRetain();
        if (((Character.asciiValue.getter() & 0x100) != 0
           || (Character.isLetter.getter() & 1) == 0 && (Character.isNumber.getter() & 1) == 0)
          && ((Character.asciiValue.getter() & 0x100) == 0 || (Character.isWhitespace.getter() & 1) != 0))
        {
          swift_bridgeObjectRelease();
LABEL_41:
          unint64_t v64 = v73;
          *Swift::String v73 = v53;
          v64[1] = v55;
          return swift_storeEnumTagMultiPayload();
        }

        *(void *)&__int128 v74 = v53;
        *((void *)&v74 + 1) = v55;
        uint64_t v75 = 0LL;
        uint64_t v76 = 0LL;
        char v77 = 10;
        swift_bridgeObjectRetain();
        ParseError.description.getter();
        a1 = v58;
        uint64_t v71 = v59;
        uint64_t v45 = *(char **)(v19 + 72);
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
LABEL_38:
          unint64_t v61 = *((void *)v45 + 2);
          unint64_t v60 = *((void *)v45 + 3);
          if (v61 >= v60 >> 1) {
            uint64_t v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v60 > 1),  v61 + 1,  1,  v45);
          }
          *((void *)v45 + 2) = v61 + 1;
          uint64_t v62 = &v45[80 * v61];
          v62[32] = 1;
          uint64_t v63 = v71;
          *((void *)v62 + 5) = a1;
          *((void *)v62 + 6) = v63;
          *((void *)v62 + 7) = v46;
          *((void *)v62 + 8) = v56;
          *((void *)v62 + 9) = v53;
          *((void *)v62 + 10) = v55;
          *((void *)v62 + 11) = 0LL;
          *((void *)v62 + 12) = 0LL;
          v62[104] = 10;
          swift_bridgeObjectRelease_n();
          *(void *)(v19 + 72) = v45;
          goto LABEL_41;
        }
      }

      uint64_t v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v45 + 2) + 1LL,  1,  v45);
      goto LABEL_38;
    }

    uint64_t v50 = v44;
    uint64_t v51 = (uint64_t)v68;
LABEL_24:
    outlined init with take of AST.Atom.Kind(v50, v51, type metadata accessor for AST.Atom.Kind);
    return outlined init with take of AST.Atom.Kind(v51, (uint64_t)v73, type metadata accessor for AST.Atom.Kind);
  }

  outlined init with take of Source.Located<AST.Atom.Kind>?( (uint64_t)v17,  (uint64_t)v22,  &demangling cache variable for type metadata for Source.Located<AST.Atom.CharacterProperty>);
  outlined init with take of AST.Atom.Kind( (uint64_t)v22,  (uint64_t)v73,  type metadata accessor for AST.Atom.CharacterProperty);
  return swift_storeEnumTagMultiPayload();
}

uint64_t Parser.lexPCRECallout()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  if ((specialized Parser.tryEat<A>(sequence:)(4407080LL, 0xE300000000000000LL) & 1) == 0)
  {
    _s12_RegexParser3ASTV4AtomV7CalloutOSgWOi0_((uint64_t)&v71);
    return outlined init with take of AST.Conditional.Condition?((uint64_t)&v71, a1);
  }

  uint64_t v4 = (char *)*((void *)v1 + 2);
  Parser.lexNumber(_:)(1, (uint64_t)&v71);
  if ((v74 & 1) == 0)
  {
    char v11 = 0;
    uint64_t inited = v72;
    uint64_t v10 = v73;
    uint64_t v12 = v71;
    unint64_t v6 = BYTE8(v71) & 1;
    goto LABEL_41;
  }

  uint64_t inited = *((void *)v1 + 2);
  unint64_t v6 = *((void *)v1 + 6);
  uint64_t v1 = (__int128 *)*((void *)v1 + 9);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v7 = String.subscript.getter();
  if ((v7 ^ v8) >> 14)
  {
    uint64_t v9 = Substring.subscript.getter();
    uint64_t v10 = v13;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v9 = 0LL;
    uint64_t v10 = 0LL;
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v10)
  {
    if (v9 == 41 && v10 == 0xE100000000000000LL)
    {
      swift_bridgeObjectRelease();
LABEL_13:
      char v11 = 0;
      uint64_t v12 = 0LL;
      unint64_t v6 = 0LL;
      uint64_t v10 = inited;
      goto LABEL_41;
    }

    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v14 & 1) != 0) {
      goto LABEL_13;
    }
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Character>);
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 32) = 96LL;
  *(_OWORD *)(inited + 16) = xmmword_181005FB0;
  *(void *)(inited + 40) = 0xE100000000000000LL;
  *(void *)(inited + 48) = 39LL;
  *(void *)(inited + 56) = 0xE100000000000000LL;
  *(void *)(inited + 64) = 34LL;
  *(void *)(inited + 72) = 0xE100000000000000LL;
  *(void *)(inited + 80) = 94LL;
  *(void *)(inited + 88) = 0xE100000000000000LL;
  *(void *)(inited + 96) = 37LL;
  *(void *)(inited + 104) = 0xE100000000000000LL;
  *(void *)(inited + 112) = 35LL;
  *(void *)(inited + 120) = 0xE100000000000000LL;
  *(void *)(inited + 128) = 36LL;
  *(void *)(inited + 136) = 0xE100000000000000LL;
  *(void *)(inited + 144) = 123LL;
  *(void *)(inited + 152) = 0xE100000000000000LL;
  uint64_t v1 = (__int128 *)specialized Parser.tryEat<A>(anyOf:)(inited);
  uint64_t v16 = v15;
  swift_setDeallocating();
  swift_arrayDestroy();
  if (v16)
  {
    uint64_t v17 = Parser.getClosingDelimiter(for:)((uint64_t)v1, v16);
    unint64_t v19 = v18;
    swift_bridgeObjectRelease();
    char v11 = 1;
    uint64_t v20 = v17;
    uint64_t v1 = v2;
    Parser.expectQuoted(endingWith:count:ignoreEscaped:eatEnding:)(v20, v19, 1LL, 0LL, 1, (uint64_t *)&v61);
    swift_bridgeObjectRelease();
    uint64_t inited = 0LL;
    uint64_t v10 = 0LL;
    unint64_t v6 = *((void *)&v61 + 1);
    uint64_t v12 = v61;
    goto LABEL_41;
  }

  uint64_t v21 = a1;
  unint64_t v22 = *((void *)v2 + 2);
  *(void *)&__int128 v61 = 0LL;
  *((void *)&v61 + 1) = 0xE000000000000000LL;
  uint64_t v55 = v4;
  unint64_t v56 = v22;
  uint64_t v57 = a1;
  uint64_t v58 = v2;
  if ((closure #1 in closure #1 in Parser.lexPCRECallout()() & 1) != 0) {
    goto LABEL_32;
  }
  a1 = v22;
  while (1)
  {
    uint64_t v1 = *(__int128 **)v2;
    unint64_t v22 = *((void *)v2 + 2);
    unint64_t v23 = *((void *)v2 + 3);
    uint64_t v4 = (char *)*((void *)v2 + 9);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v60 = v23;
    unint64_t v6 = String.subscript.getter();
    uint64_t v10 = v24;
    uint64_t inited = v25;
    swift_bridgeObjectRelease();
    if (!((v6 ^ v10) >> 14)) {
      break;
    }
    uint64_t v59 = Substring.subscript.getter();
    unint64_t v6 = v26;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    String.subscript.getter();
    uint64_t v10 = v27;
    swift_bridgeObjectRelease();
    unint64_t v28 = Substring.index(_:offsetBy:limitedBy:)();
    uint64_t inited = v29;
    swift_bridgeObjectRelease();
    if ((inited & 1) != 0)
    {
      a1 = v57;
      uint64_t v2 = v58;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v4 + 2) + 1LL,  1,  v4);
      }
      unint64_t v31 = *((void *)v4 + 2);
      unint64_t v30 = *((void *)v4 + 3);
      if (v31 >= v30 >> 1) {
        uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v30 > 1),  v31 + 1,  1,  v4);
      }
      *((void *)v4 + 2) = v31 + 1;
      uint64_t v32 = &v4[80 * v31];
      v32[32] = 0;
      *((void *)v32 + 5) = 0xD000000000000022LL;
      *((void *)v32 + 6) = 0x8000000181009440LL;
      *((void *)v32 + 7) = v22;
      *((void *)v32 + 8) = v22;
      *(_OWORD *)(v32 + 72) = 0u;
      *(_OWORD *)(v32 + 88) = 0u;
      v32[104] = -1;
      *((void *)v58 + 9) = v4;
      swift_bridgeObjectRetain();
      String.subscript.getter();
      uint64_t inited = v33;
      uint64_t v10 = v34;
      uint64_t v4 = v35;
      swift_bridgeObjectRelease();
      uint64_t v36 = Substring.distance(from:to:)();
      swift_bridgeObjectRelease();
      if (v36 < 1) {
        goto LABEL_20;
      }
      swift_bridgeObjectRetain();
      String.subscript.getter();
      uint64_t v10 = v37;
      uint64_t v4 = v38;
      swift_bridgeObjectRelease();
      uint64_t v2 = v58;
      unint64_t v28 = Substring.index(_:offsetBy:limitedBy:)();
      uint64_t inited = v39;
      swift_bridgeObjectRelease();
      if ((inited & 1) != 0) {
        goto LABEL_20;
      }
      if (v60 >> 14 < v28 >> 14) {
        goto LABEL_49;
      }
    }

    else
    {
      a1 = v57;
      uint64_t v2 = v58;
      if (v60 >> 14 < v28 >> 14) {
        goto LABEL_48;
      }
    }

    unint64_t v22 = v28;
    *((void *)v2 + 2) = v28;
    *((void *)v2 + 3) = v60;
LABEL_20:
    uint64_t v21 = a1;
    uint64_t v1 = &v61;
    MEMORY[0x186E0535C](v59, v6);
    swift_bridgeObjectRelease();
    a1 = v22;
    if ((closure #1 in closure #1 in Parser.lexPCRECallout()() & 1) != 0) {
      goto LABEL_32;
    }
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v22 = a1;
  uint64_t v21 = v57;
  uint64_t v2 = v58;
LABEL_32:
  if (v22 >> 14 < v56 >> 14) {
    goto LABEL_50;
  }
  unint64_t v40 = v22;
  unint64_t v6 = *((void *)&v61 + 1);
  uint64_t v41 = v61;
  swift_bridgeObjectRetain();
  uint64_t v42 = String.subscript.getter();
  unint64_t v44 = v43;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v42 ^ v44) >> 14) {
    goto LABEL_37;
  }
  uint64_t v45 = HIBYTE(v6) & 0xF;
  if ((v6 & 0x2000000000000000LL) == 0) {
    uint64_t v45 = v41 & 0xFFFFFFFFFFFFLL;
  }
  if (v45)
  {
LABEL_37:
    unint64_t v60 = v40;
    *(void *)&__int128 v61 = 4407080LL;
    *((void *)&v61 + 1) = 0xE300000000000000LL;
    swift_bridgeObjectRetain();
    a1 = v41;
    v46._uint64_t countAndFlagsBits = v41;
    v46._uint64_t object = (void *)v6;
    String.append(_:)(v46);
    swift_bridgeObjectRelease();
    v47._uint64_t countAndFlagsBits = 41LL;
    v47._uint64_t object = (void *)0xE100000000000000LL;
    String.append(_:)(v47);
    uint64_t v10 = *((void *)&v61 + 1);
    uint64_t inited = v61;
    uint64_t v62 = 0LL;
    uint64_t v63 = 0LL;
    char v64 = 15;
    ParseError.description.getter();
    unint64_t v22 = v48;
    uint64_t v4 = v49;
    uint64_t v1 = (__int128 *)*((void *)v2 + 9);
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0) {
      goto LABEL_38;
    }
    goto LABEL_51;
  }

  __int128 v61 = xmmword_181005F70;
  uint64_t v62 = 0LL;
  uint64_t v63 = 0LL;
  char v64 = 3;
  uint64_t v1 = v2;
  Parser.errorAtCurrentPosition(_:)(&v61);
  uint64_t inited = 0LL;
  uint64_t v10 = 0LL;
  char v11 = 1;
  uint64_t v4 = v55;
  a1 = v21;
  uint64_t v12 = v41;
LABEL_41:
  while (1)
  {
    unint64_t v22 = *((void *)v2 + 2);
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    uint64_t v1 = (__int128 *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v1 + 2) + 1LL,  1,  (char *)v1);
LABEL_38:
    unint64_t v51 = *((void *)v1 + 2);
    unint64_t v50 = *((void *)v1 + 3);
    uint64_t v12 = a1;
    if (v51 >= v50 >> 1) {
      uint64_t v1 = (__int128 *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v50 > 1),  v51 + 1,  1,  (char *)v1);
    }
    *((void *)v1 + 2) = v51 + 1;
    uint64_t v52 = &v1[5 * v51];
    char v11 = 1;
    *((_BYTE *)v52 + 32) = 1;
    *((void *)v52 + 5) = v22;
    *((void *)v52 + 6) = v4;
    *((void *)v52 + 7) = v56;
    *((void *)v52 + 8) = v60;
    *((void *)v52 + 9) = inited;
    *((void *)v52 + 10) = v10;
    *((void *)v52 + 11) = 0LL;
    *((void *)v52 + 12) = 0LL;
    *((_BYTE *)v52 + 104) = 15;
    swift_bridgeObjectRelease();
    uint64_t inited = 0LL;
    uint64_t v10 = 0LL;
    a1 = v57;
    uint64_t v2 = v58;
    *((void *)v58 + 9) = v1;
    uint64_t v4 = v55;
  }

  v53._uint64_t countAndFlagsBits = 41LL;
  v53._uint64_t object = (void *)0xE100000000000000LL;
  if (!Parser.tryEat(_:)(v53))
  {
    __int128 v67 = xmmword_181005F70;
    uint64_t v68 = 0LL;
    uint64_t v69 = 0LL;
    char v70 = 3;
    Parser.errorAtCurrentPosition(_:)(&v67);
  }

  *(void *)&__int128 v61 = v12;
  *((void *)&v61 + 1) = v6;
  uint64_t v62 = inited;
  uint64_t v63 = v10;
  char v64 = v11;
  uint64_t v65 = v4;
  unint64_t v66 = v22;
  _s12_RegexParser3ASTV4AtomV7CalloutOWOi_((uint64_t)&v61);
  outlined init with take of AST.Atom.Callout(&v61, &v71);
  AST.root.modify(&v71);
  return outlined init with take of AST.Conditional.Condition?((uint64_t)&v71, a1);
}

uint64_t closure #1 in closure #1 in Parser.lexPCRECallout()()
{
  uint64_t v0 = String.subscript.getter();
  unint64_t v2 = v1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v0 ^ v2) >= 0x4000)
  {
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v4 = String.subscript.getter();
    if ((v4 ^ v5) >> 14)
    {
      uint64_t v6 = Substring.subscript.getter();
      uint64_t v7 = v8;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }

    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v6 = 0LL;
      uint64_t v7 = 0LL;
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v7)
    {
      if (v6 == 41 && v7 == 0xE100000000000000LL) {
        char v3 = 1;
      }
      else {
        char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      swift_bridgeObjectRelease();
    }

    else
    {
      char v3 = 0;
    }
  }

  else
  {
    char v3 = 1;
  }

  return v3 & 1;
}

unint64_t Parser.expectOnigurumaCalloutArgList(leftBrace:)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v84 = a1[1];
  uint64_t v85 = *a1;
  unint64_t v3 = v2[2];
  unint64_t v4 = v2[3];
  swift_bridgeObjectRetain();
  unint64_t result = String.subscript.getter();
  if (v6 >> 14 < result >> 14)
  {
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
LABEL_84:
    __break(1u);
LABEL_85:
    __break(1u);
    goto LABEL_86;
  }

  uint64_t v88 = (char *)MEMORY[0x18961AFE8];
  uint64_t v89 = v2;
  while (1)
  {
    unint64_t v90 = v3;
    unint64_t v9 = Substring.subscript.getter();
    unint64_t v11 = v10;
    swift_bridgeObjectRelease();
    unint64_t v12 = v9 >> 14;
    unint64_t v13 = v11 >> 14;
    unint64_t v91 = v4;
    if (v9 >> 14 != v11 >> 14)
    {
      uint64_t v15 = Substring.subscript.getter();
      uint64_t v16 = v14;
      if (v15 == 44 && v14 == 0xE100000000000000LL
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
        || v15 == 125 && v16 == 0xE100000000000000LL)
      {
        swift_bridgeObjectRelease();
      }

      else
      {
        char v76 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v76 & 1) == 0)
        {
          unint64_t result = Substring.index(after:)();
          unint64_t v77 = result >> 14;
          if (result >> 14 != v13)
          {
            while (1)
            {
              unint64_t v87 = v77;
              uint64_t v79 = Substring.subscript.getter();
              uint64_t v80 = v78;
              if (v79 == 44 && v78 == 0xE100000000000000LL) {
                break;
              }
              if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0 || v79 == 125 && v80 == 0xE100000000000000LL) {
                break;
              }
              char v81 = _stringCompareWithSmolCheck(_:_:expecting:)();
              unint64_t result = swift_bridgeObjectRelease();
              if ((v81 & 1) != 0) {
                goto LABEL_73;
              }
              unint64_t result = Substring.index(after:)();
              unint64_t v77 = result >> 14;
              if (result >> 14 == v13)
              {
                if (v13 >= v12) {
                  goto LABEL_11;
                }
                goto LABEL_81;
              }
            }

            unint64_t result = swift_bridgeObjectRelease();
LABEL_73:
            if (v87 >= v12) {
              goto LABEL_11;
            }
            goto LABEL_81;
          }

          if (v13 < v12) {
            goto LABEL_81;
          }
        }
      }
    }

LABEL_11:
    uint64_t v17 = Substring.subscript.getter();
    unint64_t v19 = v18;
    uint64_t v21 = v20;
    uint64_t v23 = v22;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!((v17 ^ v19) >> 14))
    {
      swift_bridgeObjectRelease();
      unint64_t v24 = v90;
LABEL_24:
      char v35 = v89;
      uint64_t v36 = (char *)v89[9];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v36 + 2) + 1LL,  1,  v36);
      }
      unint64_t v38 = *((void *)v36 + 2);
      unint64_t v37 = *((void *)v36 + 3);
      if (v38 >= v37 >> 1) {
        uint64_t v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v37 > 1),  v38 + 1,  1,  v36);
      }
      *((void *)v36 + 2) = v38 + 1;
      uint64_t v39 = &v36[80 * v38];
      v39[32] = 1;
      *((void *)v39 + 5) = 0xD00000000000001CLL;
      *((void *)v39 + 6) = 0x8000000181008980LL;
      *((void *)v39 + 7) = v24;
      *((void *)v39 + 8) = v24;
      *((void *)v39 + 9) = 15LL;
      *((void *)v39 + 10) = 0LL;
      *((void *)v39 + 11) = 0LL;
      *((void *)v39 + 12) = 0LL;
      v39[104] = 36;
      v89[9] = v36;
      goto LABEL_29;
    }

    unint64_t v25 = v90;
    unint64_t v24 = v90;
    if (Substring.distance(from:to:)() >= 1)
    {
      swift_bridgeObjectRetain();
      String.subscript.getter();
      swift_bridgeObjectRelease();
      unint64_t v26 = Substring.index(_:offsetBy:limitedBy:)();
      char v28 = v27;
      unint64_t v25 = v90;
      unint64_t result = swift_bridgeObjectRelease();
      unint64_t v24 = v90;
      if ((v28 & 1) == 0)
      {
        if (v91 >> 14 < v26 >> 14) {
          goto LABEL_84;
        }
        v89[2] = v26;
        v89[3] = v91;
        unint64_t v24 = v26;
      }
    }

    uint64_t v29 = MEMORY[0x186E052CC](v17, v19, v21, v23);
    uint64_t v31 = v30;
    unint64_t result = swift_bridgeObjectRelease();
    if (v24 >> 14 < v25 >> 14) {
      goto LABEL_82;
    }
    if (!v31) {
      goto LABEL_24;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v88 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v88 + 2) + 1LL,  1,  v88,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Source.Located<String>>);
    }
    unint64_t v33 = *((void *)v88 + 2);
    unint64_t v32 = *((void *)v88 + 3);
    if (v33 >= v32 >> 1) {
      uint64_t v88 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v32 > 1),  v33 + 1,  1,  v88,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Source.Located<String>>);
    }
    *((void *)v88 + 2) = v33 + 1;
    uint64_t v34 = &v88[32 * v33];
    *((void *)v34 + 4) = v29;
    *((void *)v34 + 5) = v31;
    *((void *)v34 + 6) = v90;
    *((void *)v34 + 7) = v24;
    char v35 = v89;
LABEL_29:
    swift_bridgeObjectRetain();
    uint64_t v40 = String.subscript.getter();
    unint64_t v42 = v41;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v40 ^ v42) < 0x4000) {
      goto LABEL_76;
    }
    unint64_t v43 = (char *)v35[9];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v44 = String.subscript.getter();
    unint64_t v46 = v45;
    swift_bridgeObjectRelease();
    if (!((v44 ^ v46) >> 14))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_36;
    }

    uint64_t v47 = Substring.subscript.getter();
    uint64_t v49 = v48;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v49) {
      break;
    }
LABEL_36:
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v51 = String.subscript.getter();
    unint64_t v53 = v52;
    swift_bridgeObjectRelease();
    if (!((v51 ^ v53) >> 14))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_45:
      *(void *)&__int128 v92 = 0x6465746365707865LL;
      *((void *)&v92 + 1) = 0xEA00000000002720LL;
      v62._uint64_t countAndFlagsBits = 44LL;
      v62._uint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v62);
      v63._uint64_t countAndFlagsBits = 39LL;
      v63._uint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v63);
      __int128 v64 = v92;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v43 + 2) + 1LL,  1,  v43);
      }
      unint64_t v66 = *((void *)v43 + 2);
      unint64_t v65 = *((void *)v43 + 3);
      if (v66 >= v65 >> 1) {
        unint64_t v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v65 > 1),  v66 + 1,  1,  v43);
      }
      *((void *)v43 + 2) = v66 + 1;
      uint64_t v7 = &v43[80 * v66];
      v7[32] = 1;
      *(_OWORD *)(v7 + 40) = v64;
      *((void *)v7 + 7) = v24;
      *((void *)v7 + 8) = v24;
      *(_OWORD *)(v7 + 72) = xmmword_181005FC0;
      *((void *)v7 + 11) = 0LL;
      *((void *)v7 + 12) = 0LL;
      v7[104] = 3;
      v35[9] = v43;
      goto LABEL_4;
    }

    uint64_t v54 = Substring.subscript.getter();
    uint64_t v56 = v55;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v54 == 44 && v56 == 0xE100000000000000LL)
    {
      swift_bridgeObjectRelease();
      unint64_t v57 = v91;
    }

    else
    {
      char v58 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      unint64_t v57 = v91;
      if ((v58 & 1) == 0) {
        goto LABEL_45;
      }
    }

    swift_bridgeObjectRetain();
    String.subscript.getter();
    swift_bridgeObjectRelease();
    unint64_t v59 = Substring.index(_:offsetBy:limitedBy:)();
    char v61 = v60;
    unint64_t result = swift_bridgeObjectRelease();
    if ((v61 & 1) != 0)
    {
      strcpy((char *)&v92, "UNREACHABLE: ");
      HIWORD(v92) = -4864;
      v67._uint64_t countAndFlagsBits = 0xD000000000000015LL;
      v67._uint64_t object = (void *)0x80000001810093C0LL;
      String.append(_:)(v67);
      swift_bridgeObjectRelease();
      __int128 v68 = v92;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v43 + 2) + 1LL,  1,  v43);
      }
      unint64_t v70 = *((void *)v43 + 2);
      unint64_t v69 = *((void *)v43 + 3);
      if (v70 >= v69 >> 1) {
        unint64_t v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v69 > 1),  v70 + 1,  1,  v43);
      }
      *((void *)v43 + 2) = v70 + 1;
      __int128 v71 = &v43[80 * v70];
      _BYTE v71[32] = 0;
      *(_OWORD *)(v71 + 40) = v68;
      *((void *)v71 + 7) = v24;
      *((void *)v71 + 8) = v24;
      *(_OWORD *)(v71 + 72) = 0u;
      *(_OWORD *)(v71 + 88) = 0u;
      v71[104] = -1;
      v35[9] = v43;
      swift_bridgeObjectRetain();
      String.subscript.getter();
      swift_bridgeObjectRelease();
      uint64_t v72 = Substring.distance(from:to:)();
      swift_bridgeObjectRelease();
      if (v72 >= 1)
      {
        swift_bridgeObjectRetain();
        String.subscript.getter();
        swift_bridgeObjectRelease();
        unint64_t v73 = Substring.index(_:offsetBy:limitedBy:)();
        char v75 = v74;
        unint64_t result = swift_bridgeObjectRelease();
        if ((v75 & 1) == 0)
        {
          if (v91 >> 14 < v73 >> 14) {
            goto LABEL_85;
          }
          void v35[2] = v73;
          v35[3] = v91;
        }
      }
    }

    else
    {
      if (v57 >> 14 < v59 >> 14) {
        goto LABEL_83;
      }
      void v35[2] = v59;
      v35[3] = v57;
    }

  Swift::String v63 = v21;
  uint64_t v22 = (~(_BYTE)v21 & 3) == 0 && (~*((_DWORD *)v4 + 14) & 3LL) != 0;
  char v58 = v16;
  Parser.parseNode()(v65);
  Swift::String v62 = v65[0];
  v23._uint64_t countAndFlagsBits = 41LL;
  v23._uint64_t object = (void *)0xE100000000000000LL;
  if (!Parser.tryEat(_:)(v23))
  {
    unint64_t v69 = xmmword_181005F70;
    unint64_t v70 = 0LL;
    __int128 v71 = 0LL;
    uint64_t v72 = 3;
    Parser.errorAtCurrentPosition(_:)(&v69);
  }

  unint64_t v5 = *((void *)v4 + 2);
  unint64_t v24 = v64;
  if (v5 >> 14 < v64 >> 14) {
    goto LABEL_26;
  }
  if (!v22) {
    goto LABEL_24;
  }
  if ((v4[56] & 0x40) == 0) {
    goto LABEL_24;
  }
  uint64_t v51 = *(void *)v4;
  __int128 v68 = v62;
  AST.Node._associatedValue.getter();
  uint64_t v54 = v7;
  unint64_t v53 = v8;
  unint64_t v25 = v66;
  unint64_t v26 = v67;
  __swift_project_boxed_opaque_existential_1Tm(v65, v66);
  unint64_t v52 = v9;
  char v27 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v26 + 16);
  swift_bridgeObjectRetain();
  v27(&v68, v25, v26);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v65);
  char v28 = String.subscript.getter();
  uint64_t v30 = v29;
  unint64_t v32 = v31;
  uint64_t v34 = v33;
  swift_bridgeObjectRelease();
  char v35 = v30;
  uint64_t v7 = v54;
  uint64_t v36 = v32;
  unint64_t v8 = v53;
  LOBYTE(v28) = specialized Sequence.contains(where:)(v28, v35, v36, v34);
  unint64_t v9 = v52;
  swift_bridgeObjectRelease();
  unint64_t v24 = v64;
  if ((v28 & 1) == 0) {
    goto LABEL_24;
  }
  unint64_t v4 = (char *)*((void *)v3 + 9);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_27;
  }
LABEL_21:
  unint64_t v38 = *((void *)v4 + 2);
  unint64_t v37 = *((void *)v4 + 3);
  uint64_t v39 = v38 + 1;
  unint64_t v24 = v64;
  if (v38 >= v37 >> 1)
  {
    uint64_t v51 = v38 + 1;
    uint64_t v48 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v37 > 1),  v39,  1,  v4);
    unint64_t v24 = v64;
    uint64_t v39 = v51;
    unint64_t v4 = v48;
  }

  *((void *)v4 + 2) = v39;
  uint64_t v40 = &v4[80 * v38];
  v40[32] = 1;
  *((void *)v40 + 5) = 0xD000000000000053LL;
  *((void *)v40 + 6) = 0x8000000181008E90LL;
  *((void *)v40 + 7) = v24;
  *((void *)v40 + 8) = v5;
  *((void *)v40 + 9) = 4LL;
  *((void *)v40 + 10) = 0LL;
  *((void *)v40 + 11) = 0LL;
  *((void *)v40 + 12) = 0LL;
  v40[104] = 36;
  *((void *)v3 + 9) = v4;
LABEL_24:
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v6;
  *(void *)(a3 + 16) = v8;
  *(void *)(a3 + 24) = v9;
  unint64_t v41 = v58;
  unint64_t v42 = v61;
  *(void *)(a3 + 32) = v58;
  *(void *)(a3 + 40) = v42;
  unint64_t v43 = v60;
  uint64_t v44 = v59;
  *(void *)(a3 + 48) = v60;
  *(void *)(a3 + 56) = v44;
  unint64_t v45 = v57;
  unint64_t v46 = v56;
  *(void *)(a3 + 64) = v57;
  *(void *)(a3 + 72) = v46;
  *(_BYTE *)(a3 + 80) = v10;
  *(_OWORD *)(a3 + 88) = v55;
  *(void *)(a3 + 104) = v62;
  *(void *)(a3 + 112) = v24;
  *(void *)(a3 + 120) = v5;
  *((void *)v3 + 7) = v63;
  return outlined copy of AST.Group.Kind(v7, v6, v8, v9, v41, v42, v43, v44, v45, v46, v10);
}

    __break(1u);
  }

LABEL_4:
    unint64_t v3 = v35[2];
    unint64_t v4 = v35[3];
    swift_bridgeObjectRetain();
    unint64_t result = String.subscript.getter();
    if (v8 >> 14 < result >> 14) {
      goto LABEL_80;
    }
  }

  if (v47 != 125 || v49 != 0xE100000000000000LL)
  {
    char v50 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v50 & 1) != 0) {
      goto LABEL_76;
    }
    goto LABEL_36;
  }

  swift_bridgeObjectRelease();
LABEL_76:
  v82._uint64_t countAndFlagsBits = 125LL;
  v82._uint64_t object = (void *)0xE100000000000000LL;
  unint64_t result = Parser.tryEat(_:)(v82);
  if ((result & 1) == 0)
  {
    __int128 v92 = xmmword_181005F60;
    uint64_t v93 = 0LL;
    uint64_t v94 = 0LL;
    char v95 = 3;
    unint64_t result = Parser.errorAtCurrentPosition(_:)(&v92);
  }

  unint64_t v83 = v35[2];
  if (v83 >> 14 >= v24 >> 14)
  {
    *a2 = v85;
    a2[1] = v84;
    a2[2] = v88;
    a2[3] = v24;
    a2[4] = v83;
    return result;
  }

  char v27 = v112;
  Parser.lexPOSIXCharacterProperty()(v112);
  char v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Atom.CharacterProperty>);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 48LL))(v27, 1LL, v28) != 1)
  {
    unint64_t v41 = v111;
    outlined init with copy of AST.Atom(v27, (uint64_t)v111, type metadata accessor for AST.Atom.CharacterProperty);
    outlined destroy of _ASTParent?( v27,  &demangling cache variable for type metadata for Source.Located<AST.Atom.CharacterProperty>);
    unint64_t v42 = v110;
    outlined init with take of AST.Atom.Kind( (uint64_t)v41,  (uint64_t)v110,  type metadata accessor for AST.Atom.CharacterProperty);
    unint64_t v43 = (uint64_t)v42;
    uint64_t v36 = v109;
    outlined init with take of AST.Atom.Kind(v43, (uint64_t)v109, type metadata accessor for AST.Atom.CharacterProperty);
    uint64_t v44 = type metadata accessor for AST.Atom.Kind(0LL);
LABEL_11:
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(void *, void, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56LL))( v36,  0LL,  1LL,  v44);
  }

  outlined destroy of _ASTParent?( v27,  &demangling cache variable for type metadata for Source.Located<AST.Atom.CharacterProperty>?);
  uint64_t v29 = v106;
  if ((v106 & 1) == 0)
  {
    char v50 = *(void *)(v26 + 8);
    uint64_t v51 = *(_BYTE *)(v26 + 32);
    unint64_t v52 = *(void *)(v26 + 40);
    unint64_t v53 = *(void *)(v26 + 48);
    uint64_t v54 = *(void *)(v26 + 56);
    uint64_t v55 = *(_BYTE *)(v26 + 64);
    unint64_t v57 = (char **)(v26 + 72);
    uint64_t v56 = *(void *)(v26 + 72);
    uint64_t v126 = *(void *)v26;
    *(void *)uint64_t v127 = v50;
    int v112 = *(_OWORD *)(v26 + 16);
    *(_OWORD *)&v127[8] = v112;
    v127[24] = v51;
    *(void *)&uint64_t v128 = v52;
    *((void *)&v128 + 1) = v53;
    *(void *)&unint64_t v129 = v54;
    BYTE8(v129) = v55;
    uint64_t v130 = v56;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    closure #1 in Parser.shouldLexGroupLikeAtom()((uint64_t)&v126, &v114);
    char v58 = v130;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)&v123[0] = v58;
    Diagnostics.appendNewFatalErrors(from:)((_RegexParser::Diagnostics)v123);
    swift_bridgeObjectRelease();
    if (v114 == 1)
    {
      unint64_t v59 = (uint64_t)v109;
      Parser.expectGroupLikeAtom()((uint64_t)v109);
      char v60 = type metadata accessor for AST.Atom.Kind(0LL);
      char v61 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v60 - 8) + 56LL);
      Swift::String v62 = (void *)v59;
LABEL_21:
      Swift::String v63 = 0LL;
      return v61(v62, v63, 1LL, v60);
    }

    unint64_t v77 = (char *)v26;
    Parser.lexQuantifier()(&v114);
    if ((unint64_t)v115 >> 1 == 0xFFFFFFFF && (unint64_t)v117 < 2)
    {
      _s12_RegexParser6SourceV7LocatedVy_AEy_AA3ASTV14QuantificationV6AmountOG_AEy_AI4KindOGSayAG6TriviaVGtGSgWOi0_(v123);
      outlined init with take of Source.Located<AST.Atom.Kind>?( (uint64_t)v123,  (uint64_t)&v126,  &demangling cache variable for type metadata for Source.Located<(Source.Located<AST.Quantification.Amount>, Source.Located<AST.Quantification.Kind>, [AST.Trivia])>?);
    }

    else
    {
      uint64_t v78 = *(void *)(v26 + 16);
      if (v78 >> 14 < (unint64_t)v112 >> 14)
      {
        __break(1u);
        goto LABEL_106;
      }

      *(_OWORD *)uint64_t v127 = v115;
      *(_OWORD *)&v127[16] = v116;
      uint64_t v128 = v117;
      unint64_t v129 = v118;
      uint64_t v126 = v114;
      uint64_t v130 = v119;
      Swift::String v131 = v120;
      uint64_t v132 = v121;
      uint64_t v133 = v122;
      uint64_t v134 = v112;
      uint64_t v135 = v78;
      AST.root.modify(&v126);
    }

    outlined init with take of Source.Located<AST.Atom.Kind>?( (uint64_t)&v126,  (uint64_t)&v114,  &demangling cache variable for type metadata for Source.Located<(Source.Located<AST.Quantification.Amount>, Source.Located<AST.Quantification.Kind>, [AST.Trivia])>?);
    outlined init with take of Source.Located<AST.Atom.Kind>?( (uint64_t)&v114,  (uint64_t)v123,  &demangling cache variable for type metadata for Source.Located<(Source.Located<AST.Quantification.Amount>, Source.Located<AST.Quantification.Kind>, [AST.Trivia])>?);
    uint64_t v79 = v124;
    unint64_t v19 = v125;
    swift_bridgeObjectRetain();
    *(void *)&int v112 = v79;
    uint64_t v80 = String.subscript.getter();
    Swift::String v82 = v81;
    unint64_t v83 = v26;
    uint64_t v85 = v84;
    unint64_t v87 = v86;
    swift_bridgeObjectRelease();
    unint64_t v26 = MEMORY[0x186E052CC](v80, v82, v85, v87);
    unint64_t v18 = v88;
    outlined retain of AST.Conditional.Condition( &v114,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of Source.Located<(Source.Located<AST.Quantification.Amount>, Source.Located<AST.Quantification.Kind>, [AST.Trivia])>?);
    swift_bridgeObjectRelease();
    uint64_t v136 = v26;
    uint64_t v137 = v18;
    uint64_t v138 = 0LL;
    uint64_t v139 = 0LL;
    uint64_t v140 = 12;
    ParseError.description.getter();
    a3 = v89;
    uint64_t v20 = v90;
    unint64_t v77 = *(char **)(v83 + 72);
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
LABEL_48:
      __int128 v92 = *((void *)v77 + 2);
      unint64_t v91 = *((void *)v77 + 3);
      if (v92 >= v91 >> 1) {
        unint64_t v77 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v91 > 1),  v92 + 1,  1,  v77);
      }
      *((void *)v77 + 2) = v92 + 1;
      uint64_t v93 = &v77[80 * v92];
      v93[32] = 1;
      *((void *)v93 + 5) = a3;
      *((void *)v93 + 6) = v20;
      *((void *)v93 + 7) = v112;
      *((void *)v93 + 8) = v19;
      *((void *)v93 + 9) = v26;
      *((void *)v93 + 10) = v18;
      *((void *)v93 + 11) = 0LL;
      *((void *)v93 + 12) = 0LL;
      v93[104] = 12;
      swift_bridgeObjectRelease();
      *unint64_t v57 = v77;
      uint64_t v44 = type metadata accessor for AST.Atom.Kind(0LL);
      uint64_t v36 = v109;
      goto LABEL_11;
    }

uint64_t Parser.lexOnigurumaCalloutTag()@<X0>(uint64_t a1@<X8>)
{
  unint64_t v3 = v1[2];
  v4._uint64_t countAndFlagsBits = 91LL;
  v4._uint64_t object = (void *)0xE100000000000000LL;
  uint64_t result = Parser.tryEat(_:)(v4);
  if ((result & 1) != 0)
  {
    unint64_t v6 = v1[2];
    if (v6 >> 14 < v3 >> 14)
    {
      __break(1u);
    }

    else
    {
      uint64_t result = closure #1 in Parser.expectIdentifier(_:endingWith:eatEnding:)(v1, 93LL, 0xE100000000000000LL, 2u, &v11);
      unint64_t v7 = v1[2];
      if (v7 >> 14 >= v6 >> 14)
      {
        __int128 v8 = v11;
        v9._uint64_t countAndFlagsBits = 93LL;
        v9._uint64_t object = (void *)0xE100000000000000LL;
        uint64_t result = Parser.tryEat(_:)(v9);
        if ((result & 1) == 0)
        {
          __int128 v11 = xmmword_181005FD0;
          uint64_t v12 = 0LL;
          uint64_t v13 = 0LL;
          char v14 = 3;
          uint64_t result = Parser.errorAtCurrentPosition(_:)(&v11);
        }

        unint64_t v10 = v1[2];
        if (v7 >> 14 <= v10 >> 14)
        {
          *(void *)a1 = v3;
          *(void *)(a1 + 8) = v6;
          *(_OWORD *)(a1 + 16) = v8;
          *(void *)(a1 + 32) = v6;
          *(void *)(a1 + 40) = v7;
          *(void *)(a1 + 48) = v7;
          *(void *)(a1 + 56) = v10;
          return result;
        }

        goto LABEL_12;
      }
    }

    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }

  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t Parser.lexOnigurumaNamedCallout()@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v3 = v1[1];
  uint64_t v61 = v1[2];
  uint64_t v62 = *v1;
  uint64_t v60 = v1[3];
  char v59 = *((_BYTE *)v1 + 32);
  uint64_t v4 = v1[6];
  uint64_t v57 = v1[7];
  uint64_t v58 = v1[5];
  char v56 = *((_BYTE *)v1 + 64);
  uint64_t v5 = v1[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v64 = v3;
  unint64_t v65 = a1;
  uint64_t v63 = v4;
  if ((specialized Parser.tryEat<A>(sequence:)(10792LL, 0xE200000000000000LL) & 1) == 0)
  {
    _s12_RegexParser3ASTV4AtomV7CalloutOSgWOi0_((uint64_t)&v87);
    outlined init with take of AST.Conditional.Condition?((uint64_t)&v87, (uint64_t)v71);
LABEL_11:
    outlined init with take of AST.Conditional.Condition?((uint64_t)v71, (uint64_t)&v72);
    outlined init with take of AST.Conditional.Condition?((uint64_t)&v72, (uint64_t)&v87);
    if (_s12_RegexParser3ASTV4AtomV7CalloutOSgWOg((uint64_t)&v87) != 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined init with take of AST.Conditional.Condition?((uint64_t)&v72, (uint64_t)&v67);
      outlined init with take of AST.Atom.Callout(&v67, a1);
      return AST.root.modify(a1);
    }

    uint64_t v19 = v1[9];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v20 = v5;
    uint64_t v21 = specialized Collection.dropFirst(_:)(*(void *)(v5 + 16), v19);
    uint64_t v23 = v22;
    uint64_t v25 = v24;
    int64_t v27 = v26 >> 1;
    swift_bridgeObjectRetain();
    uint64_t result = swift_unknownObjectRetain();
    uint64_t v28 = v23 - 32;
    uint64_t v29 = v25;
    uint64_t v30 = v25;
LABEL_13:
    uint64_t v31 = v28 + 80 * v29;
    while (1)
    {
      if (v27 == v30)
      {
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease_n();
        uint64_t *v1 = v62;
        v1[1] = v3;
        v1[2] = v61;
        v1[3] = v60;
        *((_BYTE *)v1 + 32) = v59;
        v1[5] = v58;
        v1[6] = v4;
        v1[7] = v57;
        *((_BYTE *)v1 + 64) = v56;
        v1[9] = v20;
        return outlined init with take of AST.Conditional.Condition?((uint64_t)&v72, (uint64_t)a1);
      }

      if (v29 < v25 || v30 >= v27) {
        break;
      }
      int v32 = *(unsigned __int8 *)(v31 + 32);
      ++v30;
      v31 += 80LL;
      if (!v32)
      {
        uint64_t v53 = v28;
        uint64_t v55 = v21;
        uint64_t v66 = v19;
        uint64_t v48 = *(void *)(v31 - 24);
        uint64_t v50 = *(void *)(v31 - 40);
        uint64_t v33 = *(void *)(v31 - 8);
        uint64_t v44 = *(void *)(v31 - 32);
        uint64_t v46 = *(void *)(v31 - 16);
        uint64_t v34 = *(void *)v31;
        uint64_t v35 = *(void *)(v31 + 8);
        uint64_t v36 = *(void *)(v31 + 16);
        unsigned __int8 v37 = *(_BYTE *)(v31 + 24);
        swift_bridgeObjectRetain();
        outlined copy of ParseError?(v33, v34, v35, v36, v37);
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v20 + 16) + 1LL,  1,  (char *)v20);
          uint64_t v20 = result;
        }

        uint64_t v38 = v20;
        unint64_t v39 = *(void *)(v20 + 16);
        uint64_t v40 = v38;
        unint64_t v41 = *(void *)(v38 + 24);
        if (v39 >= v41 >> 1)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v41 > 1),  v39 + 1,  1,  (char *)v40);
          uint64_t v40 = result;
        }

        *(void *)(v40 + 16) = v39 + 1;
        unint64_t v42 = v40 + 80 * v39;
        uint64_t v20 = v40;
        *(_BYTE *)(v42 + 32) = 0;
        *(void *)(v42 + 40) = v50;
        *(void *)(v42 + 48) = v44;
        *(void *)(v42 + 56) = v48;
        *(void *)(v42 + 64) = v46;
        *(void *)(v42 + 72) = v33;
        *(void *)(v42 + 80) = v34;
        *(void *)(v42 + 88) = v35;
        *(void *)(v42 + 96) = v36;
        *(_BYTE *)(v42 + 104) = v37;
        uint64_t v29 = v30;
        uint64_t v3 = v64;
        a1 = v65;
        uint64_t v4 = v63;
        uint64_t v19 = v66;
        uint64_t v28 = v53;
        uint64_t v21 = v55;
        goto LABEL_13;
      }
    }

    __break(1u);
    goto LABEL_26;
  }

  unint64_t v6 = v1[2];
  uint64_t result = closure #1 in Parser.expectIdentifier(_:endingWith:eatEnding:)(v1, 41LL, 0xE100000000000000LL, 1u, &v87);
  unint64_t v8 = v1[2];
  unint64_t v54 = v6;
  if (v8 >> 14 < v6 >> 14)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }

  __int128 v9 = v87;
  Parser.lexOnigurumaCalloutTag()((uint64_t)&v87);
  __int128 v10 = v87;
  uint64_t v51 = v89;
  uint64_t v52 = v88;
  uint64_t v47 = v91;
  uint64_t v49 = v90;
  uint64_t v43 = v93;
  uint64_t v45 = v92;
  unint64_t v11 = v1[2];
  v12._uint64_t countAndFlagsBits = 123LL;
  v12._uint64_t object = (void *)0xE100000000000000LL;
  uint64_t result = Parser.tryEat(_:)(v12);
  if ((result & 1) == 0)
  {
    uint64_t v14 = 0LL;
    uint64_t v15 = 0LL;
    uint64_t v16 = 0LL;
    uint64_t v17 = 0LL;
    goto LABEL_8;
  }

  unint64_t v13 = v1[2];
  if (v13 >> 14 >= v11 >> 14)
  {
    *(void *)&__int128 v72 = v11;
    *((void *)&v72 + 1) = v13;
    Parser.expectOnigurumaCalloutArgList(leftBrace:)((uint64_t *)&v72, &v87);
    uint64_t v15 = *((void *)&v87 + 1);
    uint64_t v14 = v87;
    uint64_t v16 = v88;
    uint64_t v17 = v89;
LABEL_8:
    v18._uint64_t countAndFlagsBits = 41LL;
    v18._uint64_t object = (void *)0xE100000000000000LL;
    if (!Parser.tryEat(_:)(v18))
    {
      __int128 v67 = xmmword_181005F70;
      uint64_t v68 = 0LL;
      uint64_t v69 = 0LL;
      char v70 = 3;
      Parser.errorAtCurrentPosition(_:)(&v67);
    }

    __int128 v72 = v9;
    unint64_t v73 = v54;
    unint64_t v74 = v8;
    __int128 v75 = v10;
    uint64_t v76 = v52;
    uint64_t v77 = v51;
    uint64_t v78 = v49;
    uint64_t v79 = v47;
    uint64_t v80 = v45;
    uint64_t v81 = v43;
    uint64_t v82 = v14;
    uint64_t v83 = v15;
    uint64_t v84 = v16;
    uint64_t v85 = v17;
    uint64_t v86 = *((void *)&v10 + 1);
    _s12_RegexParser3ASTV4AtomV7CalloutOWOi0_((uint64_t)&v72);
    outlined init with take of AST.Atom.Callout(&v72, &v87);
    AST.root.modify(&v87);
    outlined init with take of AST.Conditional.Condition?((uint64_t)&v87, (uint64_t)v71);
    uint64_t v3 = v64;
    a1 = v65;
    uint64_t v4 = v63;
    goto LABEL_11;
  }

uint64_t Parser.lexOnigurumaCalloutOfContents()@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v3 = v1[1];
  uint64_t v67 = v1[2];
  uint64_t v68 = *v1;
  uint64_t v66 = v1[3];
  char v65 = *((_BYTE *)v1 + 32);
  uint64_t v4 = v1[6];
  uint64_t v63 = v1[7];
  uint64_t v64 = v1[5];
  char v62 = *((_BYTE *)v1 + 64);
  uint64_t v5 = v1[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((specialized Parser.tryEat<A>(sequence:)(16168LL, 0xE200000000000000LL) & 1) == 0
    || (specialized Parser.tryEatPrefix(maxLength:_:)( 0LL,  1,  v1,  (uint64_t (*)(uint64_t, void, void *))specialized Source.peekPrefix(maxLength:_:),  (uint64_t *)&v98),  !*((void *)&v98 + 1)))
  {
    _s12_RegexParser3ASTV4AtomV7CalloutOSgWOi0_((uint64_t)&v98);
    outlined init with take of AST.Conditional.Condition?((uint64_t)&v98, (uint64_t)v79);
LABEL_16:
    outlined init with take of AST.Conditional.Condition?((uint64_t)v79, (uint64_t)&v80);
    outlined init with take of AST.Conditional.Condition?((uint64_t)&v80, (uint64_t)&v98);
    if (_s12_RegexParser3ASTV4AtomV7CalloutOSgWOg((uint64_t)&v98) != 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined init with take of AST.Conditional.Condition?((uint64_t)&v80, (uint64_t)&v75);
      outlined init with take of AST.Atom.Callout(&v75, a1);
      return AST.root.modify(a1);
    }

    uint64_t v22 = v1[9];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v23 = specialized Collection.dropFirst(_:)(*(void *)(v5 + 16), v22);
    uint64_t v25 = v24;
    uint64_t v27 = v26;
    int64_t v29 = v28 >> 1;
    swift_bridgeObjectRetain();
    uint64_t result = swift_unknownObjectRetain();
    uint64_t v30 = v25 - 32;
    uint64_t v31 = v27;
    uint64_t v32 = v27;
LABEL_18:
    uint64_t v33 = v30 + 80 * v31;
    while (1)
    {
      if (v29 == v32)
      {
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease_n();
        uint64_t *v1 = v68;
        v1[1] = v3;
        v1[2] = v67;
        v1[3] = v66;
        *((_BYTE *)v1 + 32) = v65;
        v1[5] = v64;
        v1[6] = v4;
        v1[7] = v63;
        *((_BYTE *)v1 + 64) = v62;
        v1[9] = v5;
        return outlined init with take of AST.Conditional.Condition?((uint64_t)&v80, (uint64_t)a1);
      }

      if (v31 < v27 || v32 >= v29) {
        break;
      }
      int v34 = *(unsigned __int8 *)(v33 + 32);
      ++v32;
      v33 += 80LL;
      if (!v34)
      {
        uint64_t v60 = v23;
        uint64_t v61 = v22;
        uint64_t v58 = v30;
        uint64_t v70 = v4;
        uint64_t v72 = v3;
        unint64_t v74 = a1;
        uint64_t v51 = *(void *)(v33 - 24);
        uint64_t v53 = *(void *)(v33 - 40);
        uint64_t v35 = *(void *)(v33 - 8);
        uint64_t v47 = *(void *)(v33 - 32);
        uint64_t v49 = *(void *)(v33 - 16);
        uint64_t v36 = *(void *)v33;
        uint64_t v37 = *(void *)(v33 + 8);
        uint64_t v38 = *(void *)(v33 + 16);
        unsigned __int8 v39 = *(_BYTE *)(v33 + 24);
        swift_bridgeObjectRetain();
        uint64_t v55 = v35;
        outlined copy of ParseError?(v35, v36, v37, v38, v39);
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v5 + 16) + 1LL,  1,  (char *)v5);
          uint64_t v5 = result;
        }

        unint64_t v41 = *(void *)(v5 + 16);
        unint64_t v40 = *(void *)(v5 + 24);
        uint64_t v42 = v5;
        if (v41 >= v40 >> 1)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v40 > 1),  v41 + 1,  1,  (char *)v5);
          uint64_t v42 = result;
        }

        *(void *)(v42 + 16) = v41 + 1;
        uint64_t v5 = v42;
        unint64_t v43 = v42 + 80 * v41;
        *(_BYTE *)(v43 + 32) = 0;
        *(void *)(v43 + 40) = v53;
        *(void *)(v43 + 48) = v47;
        *(void *)(v43 + 56) = v51;
        *(void *)(v43 + 64) = v49;
        *(void *)(v43 + 72) = v55;
        *(void *)(v43 + 80) = v36;
        *(void *)(v43 + 88) = v37;
        *(void *)(v43 + 96) = v38;
        *(_BYTE *)(v43 + 104) = v39;
        uint64_t v31 = v32;
        uint64_t v3 = v72;
        a1 = v74;
        uint64_t v4 = v70;
        uint64_t v23 = v60;
        uint64_t v22 = v61;
        uint64_t v30 = v58;
        goto LABEL_18;
      }
    }

    __break(1u);
    goto LABEL_31;
  }

  uint64_t v7 = v99;
  unint64_t v6 = v100;
  swift_bridgeObjectRetain();
  uint64_t v8 = String.count.getter();
  swift_bridgeObjectRelease();
  uint64_t result = Parser.expectQuoted(endingWith:count:ignoreEscaped:eatEnding:)( 125LL,  0xE100000000000000LL,  v8,  0LL,  1,  (uint64_t *)&v98);
  unint64_t v10 = v100;
  unint64_t v11 = v1[2];
  if (v11 >> 14 >= v100 >> 14)
  {
    uint64_t v69 = v4;
    uint64_t v71 = v3;
    uint64_t v57 = v98;
    uint64_t v59 = v7;
    uint64_t v54 = v99;
    uint64_t v56 = *((void *)&v98 + 1);
    Parser.lexOnigurumaCalloutTag()((uint64_t)&v98);
    uint64_t v50 = *((void *)&v98 + 1);
    uint64_t v52 = v98;
    unint64_t v12 = v100;
    uint64_t v13 = v101;
    uint64_t v46 = v102;
    uint64_t v48 = v99;
    uint64_t v44 = v104;
    uint64_t v45 = v103;
    unint64_t v14 = v1[2];
    v15._uint64_t countAndFlagsBits = 62LL;
    v15._uint64_t object = (void *)0xE100000000000000LL;
    uint64_t result = Parser.tryEat(_:)(v15);
    unint64_t v73 = a1;
    unint64_t v16 = v6;
    if ((result & 1) != 0)
    {
      char v17 = 0;
    }

    else
    {
      v18._uint64_t countAndFlagsBits = 60LL;
      v18._uint64_t object = (void *)0xE100000000000000LL;
      uint64_t result = Parser.tryEat(_:)(v18);
      if ((result & 1) != 0)
      {
        char v17 = 1;
      }

      else
      {
        v19._uint64_t countAndFlagsBits = 88LL;
        v19._uint64_t object = (void *)0xE100000000000000LL;
        uint64_t result = Parser.tryEat(_:)(v19);
        if ((result & 1) != 0) {
          char v17 = 2;
        }
        else {
          char v17 = 0;
        }
      }
    }

    unint64_t v20 = v1[2];
    if (v20 >> 14 < v14 >> 14) {
      goto LABEL_32;
    }
    v21._uint64_t countAndFlagsBits = 41LL;
    v21._uint64_t object = (void *)0xE100000000000000LL;
    if (!Parser.tryEat(_:)(v21))
    {
      __int128 v75 = xmmword_181005F70;
      uint64_t v76 = 0LL;
      uint64_t v77 = 0LL;
      char v78 = 3;
      Parser.errorAtCurrentPosition(_:)(&v75);
    }

    swift_bridgeObjectRelease();
    *(void *)&__int128 v80 = v59;
    *((void *)&v80 + 1) = v16;
    uint64_t v81 = v57;
    uint64_t v82 = v56;
    uint64_t v83 = v54;
    unint64_t v84 = v10;
    unint64_t v85 = v10;
    unint64_t v86 = v11;
    uint64_t v87 = v52;
    uint64_t v88 = v50;
    uint64_t v89 = v48;
    unint64_t v90 = v12;
    uint64_t v91 = v13;
    uint64_t v92 = v46;
    uint64_t v93 = v45;
    uint64_t v94 = v44;
    char v95 = v17;
    unint64_t v96 = v14;
    unint64_t v97 = v20;
    _s12_RegexParser3ASTV4AtomV7CalloutOWOi1_((uint64_t)&v80);
    outlined init with take of AST.Atom.Callout(&v80, &v98);
    AST.root.modify(&v98);
    outlined init with take of AST.Conditional.Condition?((uint64_t)&v98, (uint64_t)v79);
    uint64_t v3 = v71;
    a1 = v73;
    uint64_t v4 = v69;
    goto LABEL_16;
  }

uint64_t Parser.lexBacktrackingDirective()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = v1;
  uint64_t v5 = *v1;
  uint64_t v72 = v1[3];
  uint64_t v73 = v1[2];
  char v71 = *((_BYTE *)v1 + 32);
  uint64_t v6 = v1[6];
  uint64_t v69 = v1[7];
  uint64_t v70 = v1[5];
  char v68 = *((_BYTE *)v1 + 64);
  uint64_t v7 = (uint64_t *)v1[9];
  uint64_t v81 = v1[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((specialized Parser.tryEat<A>(sequence:)(10792LL, 0xE200000000000000LL) & 1) == 0) {
    goto LABEL_42;
  }
  unint64_t v8 = v1[2];
  if ((specialized Parser.tryEat<A>(sequence:)(0x545045434341LL, 0xE600000000000000LL) & 1) != 0)
  {
    uint64_t v9 = 0LL;
    uint64_t v10 = 0LL;
    goto LABEL_7;
  }

  if ((specialized Parser.tryEat<A>(sequence:)(1279869254LL, 0xE400000000000000LL) & 1) != 0
    || (v11._uint64_t countAndFlagsBits = 70LL, v11._object = (void *)0xE100000000000000LL, Parser.tryEat(_:)(v11)))
  {
    uint64_t v9 = 0LL;
    uint64_t v10 = 1LL;
    goto LABEL_7;
  }

  if ((specialized Parser.tryEat<A>(sequence:)(1263681869LL, 0xE400000000000000LL) & 1) != 0)
  {
    uint64_t v9 = 1LL;
    uint64_t v10 = 2LL;
    goto LABEL_7;
  }

  unint64_t v75 = v8;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v30 = String.subscript.getter();
  if ((v30 ^ v31) >> 14)
  {
    uint64_t v32 = Substring.subscript.getter();
    uint64_t v2 = v33;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v32 = 0LL;
    uint64_t v2 = 0LL;
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v2)
  {
    if (v32 == 58 && v2 == 0xE100000000000000LL)
    {
      swift_bridgeObjectRelease();
LABEL_33:
      uint64_t v9 = 1LL;
      uint64_t v10 = 2LL;
      unint64_t v8 = v75;
      goto LABEL_7;
    }

    char v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v34 & 1) != 0) {
      goto LABEL_33;
    }
  }

  if ((specialized Parser.tryEat<A>(sequence:)(0x54494D4D4F43LL, 0xE600000000000000LL) & 1) != 0)
  {
    uint64_t v9 = 0LL;
    uint64_t v10 = 3LL;
    unint64_t v8 = v75;
    goto LABEL_7;
  }

  unint64_t v8 = v75;
  if ((specialized Parser.tryEat<A>(sequence:)(0x454E555250LL, 0xE500000000000000LL) & 1) != 0)
  {
    uint64_t v9 = 0LL;
    uint64_t v10 = 4LL;
    goto LABEL_7;
  }

  if ((specialized Parser.tryEat<A>(sequence:)(1346980691LL, 0xE400000000000000LL) & 1) != 0)
  {
    uint64_t v9 = 0LL;
    uint64_t v10 = 5LL;
    goto LABEL_7;
  }

  if ((specialized Parser.tryEat<A>(sequence:)(1313163348LL, 0xE400000000000000LL) & 1) == 0)
  {
LABEL_42:
    uint64_t v74 = v6;
    uint64_t v77 = 0LL;
    uint64_t v78 = 0LL;
    uint64_t v76 = 0LL;
    unint64_t v80 = 0LL;
    unint64_t v8 = 0LL;
    uint64_t v79 = 0LL;
LABEL_43:
    uint64_t v2 = v1[9];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    specialized Collection.dropFirst(_:)(v7[2], v2);
    uint64_t v36 = v35;
    uint64_t v6 = v37;
    uint64_t v39 = v38 >> 1;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    uint64_t v40 = v36 - 32;
    uint64_t v41 = v6;
    uint64_t v9 = v6;
    uint64_t v42 = v81;
LABEL_44:
    uint64_t v43 = v40 + 80 * v41;
    while (1)
    {
      if (v39 == v9)
      {
        swift_bridgeObjectRelease();
        uint64_t result = swift_unknownObjectRelease_n();
        *uint64_t v3 = v5;
        v3[1] = v42;
        void v3[2] = v73;
        void v3[3] = v72;
        *((_BYTE *)v3 + 32) = v71;
        v3[5] = v70;
        v3[6] = v74;
        v3[7] = v69;
        *((_BYTE *)v3 + 64) = v68;
        v3[9] = (uint64_t)v7;
        *a1 = v79;
        a1[1] = v8;
        a1[2] = v80;
        a1[3] = v78;
        a1[4] = 1LL;
        goto LABEL_55;
      }

      if (v41 < v6 || v9 >= v39) {
        break;
      }
      int v44 = *(unsigned __int8 *)(v43 + 32);
      ++v9;
      v43 += 80LL;
      if (!v44)
      {
        uint64_t v64 = v40;
        uint64_t v65 = v2;
        uint64_t v67 = v5;
        unint64_t v75 = v8;
        uint64_t v66 = a1;
        uint64_t v59 = *(void *)(v43 - 24);
        uint64_t v60 = *(void *)(v43 - 40);
        uint64_t v45 = *(void *)(v43 - 8);
        uint64_t v58 = *(void *)(v43 - 16);
        uint64_t v46 = *(void *)v43;
        uint64_t v47 = *(void *)(v43 + 8);
        uint64_t v48 = *(void *)(v43 + 16);
        uint64_t v49 = (char *)v7;
        unsigned __int8 v50 = *(_BYTE *)(v43 + 24);
        uint64_t v63 = *(void *)(v43 - 32);
        swift_bridgeObjectRetain();
        uint64_t v61 = v45;
        uint64_t v51 = v45;
        uint64_t v52 = v48;
        uint64_t v53 = v46;
        unsigned __int8 v62 = v50;
        outlined copy of ParseError?(v51, v46, v47, v52, v50);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v49 + 2) + 1LL,  1,  v49);
        }
        unint64_t v55 = *((void *)v49 + 2);
        unint64_t v54 = *((void *)v49 + 3);
        uint64_t v56 = v49;
        if (v55 >= v54 >> 1) {
          uint64_t v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v54 > 1),  v55 + 1,  1,  v49);
        }
        *((void *)v56 + 2) = v55 + 1;
        uint64_t v7 = (uint64_t *)v56;
        uint64_t v57 = &v56[80 * v55];
        v57[32] = 0;
        *((void *)v57 + 5) = v60;
        *((void *)v57 + 6) = v63;
        *((void *)v57 + 7) = v59;
        *((void *)v57 + 8) = v58;
        *((void *)v57 + 9) = v61;
        *((void *)v57 + 10) = v53;
        *((void *)v57 + 11) = v47;
        *((void *)v57 + 12) = v52;
        v57[104] = v62;
        uint64_t v41 = v9;
        uint64_t v2 = v65;
        a1 = v66;
        uint64_t v42 = v81;
        unint64_t v8 = v75;
        uint64_t v5 = v67;
        uint64_t v40 = v64;
        goto LABEL_44;
      }
    }

    __break(1u);
    goto LABEL_57;
  }

  uint64_t v9 = 0LL;
  uint64_t v10 = 6LL;
LABEL_7:
  unint64_t v80 = v1[2];
  if (v80 >> 14 < v8 >> 14)
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }

  uint64_t v79 = v10;
  v12._uint64_t countAndFlagsBits = 58LL;
  v12._uint64_t object = (void *)0xE100000000000000LL;
  if (Parser.tryEat(_:)(v12))
  {
    Parser.expectQuoted(endingWith:count:ignoreEscaped:eatEnding:)(41LL, 0xE100000000000000LL, 1LL, 0LL, 0, &v82);
    unint64_t v13 = v83;
    uint64_t v77 = v84;
    uint64_t v78 = v82;
    uint64_t v76 = v85;
  }

  else
  {
    uint64_t v77 = 0LL;
    uint64_t v78 = 0LL;
    unint64_t v13 = 0LL;
    uint64_t v76 = 0LL;
  }

  v14._uint64_t countAndFlagsBits = 41LL;
  v14._uint64_t object = (void *)0xE100000000000000LL;
  if (!Parser.tryEat(_:)(v14))
  {
    __int128 v86 = xmmword_181005F70;
    uint64_t v87 = 0LL;
    uint64_t v88 = 0LL;
    char v89 = 3;
    Parser.errorAtCurrentPosition(_:)(&v86);
  }

  char v15 = v9 ^ 1;
  if (v13) {
    char v15 = 1;
  }
  if ((v15 & 1) == 0)
  {
    swift_bridgeObjectRetain();
    unint64_t v75 = v8;
    uint64_t v16 = String.subscript.getter();
    uint64_t v18 = v17;
    uint64_t v20 = v19;
    uint64_t v22 = v21;
    swift_bridgeObjectRelease();
    uint64_t v6 = MEMORY[0x186E052CC](v16, v18, v20, v22);
    uint64_t v7 = v23;
    swift_bridgeObjectRelease();
    uint64_t v82 = 0LL;
    unint64_t v83 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(45LL);
    swift_bridgeObjectRelease();
    uint64_t v82 = 0xD000000000000018LL;
    unint64_t v83 = 0x8000000181008E00LL;
    v24._uint64_t countAndFlagsBits = v6;
    v24._uint64_t object = v7;
    String.append(_:)(v24);
    v25._uint64_t object = (void *)0x8000000181008E20LL;
    v25._uint64_t countAndFlagsBits = 0xD000000000000013LL;
    String.append(_:)(v25);
    uint64_t v2 = v82;
    unint64_t v8 = v83;
    uint64_t v9 = v1[9];
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
LABEL_17:
      unint64_t v27 = *(void *)(v9 + 16);
      unint64_t v26 = *(void *)(v9 + 24);
      if (v27 >= v26 >> 1) {
        uint64_t v9 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v26 > 1),  v27 + 1,  1,  (char *)v9);
      }
      *(void *)(v9 + 16) = v27 + 1;
      uint64_t v28 = v9 + 80 * v27;
      *(_BYTE *)(v28 + 32) = 1;
      *(void *)(v28 + 40) = v2;
      *(void *)(v28 + 48) = v8;
      unint64_t v8 = v75;
      *(void *)(v28 + 56) = v75;
      *(void *)(v28 + 64) = v80;
      *(void *)(v28 + 72) = v6;
      *(void *)(v28 + 80) = v7;
      *(void *)(v28 + 88) = 0LL;
      *(void *)(v28 + 96) = 0LL;
      *(_BYTE *)(v28 + 104) = 13;
      swift_bridgeObjectRelease();
      unint64_t v13 = 0LL;
      v3[9] = v9;
      goto LABEL_22;
    }

uint64_t Parser.expectGroupLikeAtom()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Atom.Kind>?);
  MEMORY[0x1895F8858](v4, v5);
  uint64_t v7 = (char *)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Atom.Kind>);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v8, v10);
  Swift::String v12 = (char *)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Parser.lexGroupLikeReference()((uint64_t)v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1LL, v8) != 1)
  {
    outlined init with take of Source.Located<AST.Atom.Kind>?( (uint64_t)v7,  (uint64_t)v12,  &demangling cache variable for type metadata for Source.Located<AST.Atom.Kind>);
    return outlined init with take of AST.Atom.Kind((uint64_t)v12, a1, type metadata accessor for AST.Atom.Kind);
  }

  outlined destroy of _ASTParent?( (uint64_t)v7,  &demangling cache variable for type metadata for Source.Located<AST.Atom.Kind>?);
  Parser.lexChangeMatchingOptionAtom()((uint64_t)v80);
  uint64_t v13 = v81;
  if (!v81)
  {
    Parser.lexBacktrackingDirective()((uint64_t *)v80);
    uint64_t v19 = *(void *)v82;
    if (*(void *)v82 != 1LL)
    {
      uint64_t v34 = v81;
      __int128 v35 = *(_OWORD *)&v80[8];
      __int128 v36 = *(_OWORD *)&v82[8];
      *(_BYTE *)a1 = v80[0];
      *(_OWORD *)(a1 + 8) = v35;
      *(void *)(a1 + 24) = v34;
      *(void *)(a1 + 32) = v19;
      *(_OWORD *)(a1 + 40) = v36;
      type metadata accessor for AST.Atom.Kind(0LL);
      return swift_storeEnumTagMultiPayload();
    }

    Parser.lexGlobalMatchingOption()((uint64_t)v84);
    if (v85 >> 1 == 0xFFFFFFFF)
    {
      Parser.lexPCRECallout()((uint64_t)v78);
      outlined init with take of AST.Conditional.Condition?((uint64_t)v78, (uint64_t)v79);
      outlined init with take of AST.Conditional.Condition?((uint64_t)v79, (uint64_t)v80);
      if (_s12_RegexParser3ASTV4AtomV7CalloutOSgWOg((uint64_t)v80) == 1)
      {
        Parser.lexOnigurumaNamedCallout()(v75);
        outlined init with take of AST.Conditional.Condition?((uint64_t)v75, (uint64_t)v76);
        outlined init with take of AST.Conditional.Condition?((uint64_t)v76, (uint64_t)v77);
        if (_s12_RegexParser3ASTV4AtomV7CalloutOSgWOg((uint64_t)v77) == 1)
        {
          Parser.lexOnigurumaCalloutOfContents()(&v69);
          outlined init with take of AST.Conditional.Condition?((uint64_t)&v69, (uint64_t)v73);
          outlined init with take of AST.Conditional.Condition?((uint64_t)v73, (uint64_t)v74);
          if (_s12_RegexParser3ASTV4AtomV7CalloutOSgWOg((uint64_t)v74) == 1)
          {
            v20._uint64_t countAndFlagsBits = 40LL;
            v20._uint64_t object = (void *)0xE100000000000000LL;
            if (!Parser.tryEat(_:)(v20))
            {
              __int128 v69 = xmmword_181005FE0;
              uint64_t v70 = 0LL;
              uint64_t v71 = 0LL;
              char v72 = 3;
              Parser.errorAtCurrentPosition(_:)(&v69);
            }

            specialized Parser.lexUntil(_:)(v1, closure #1 in Parser.expectGroupLikeAtom(), &v88);
            __int128 v21 = v88;
            uint64_t v22 = v89;
            uint64_t v23 = v90;
            uint64_t v24 = HIBYTE(*((void *)&v88 + 1)) & 0xFLL;
            if ((*((void *)&v88 + 1) & 0x2000000000000000LL) == 0) {
              uint64_t v24 = v88 & 0xFFFFFFFFFFFFLL;
            }
            if (v24)
            {
              uint64_t v89 = 0LL;
              uint64_t v90 = 0LL;
              char v91 = 14;
              swift_bridgeObjectRetain();
              ParseError.description.getter();
              unint64_t v67 = v26;
              *(void *)&__int128 v68 = v25;
              unint64_t v27 = (char *)v1[9];
              swift_bridgeObjectRetain();
              uint64_t v28 = v22;
              uint64_t v29 = v23;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                unint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v27 + 2) + 1LL,  1,  v27);
              }
              unint64_t v31 = *((void *)v27 + 2);
              unint64_t v30 = *((void *)v27 + 3);
              if (v31 >= v30 >> 1) {
                unint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v30 > 1),  v31 + 1,  1,  v27);
              }
              *((void *)v27 + 2) = v31 + 1;
              uint64_t v32 = &v27[80 * v31];
              v32[32] = 1;
              unint64_t v33 = v67;
              *((void *)v32 + 5) = v68;
              *((void *)v32 + 6) = v33;
              *((void *)v32 + 7) = v28;
              *((void *)v32 + 8) = v29;
              *(_OWORD *)(v32 + 72) = v21;
              *((void *)v32 + 11) = 0LL;
              *((void *)v32 + 12) = 0LL;
              v32[104] = 14;
              swift_bridgeObjectRelease();
            }

            else
            {
              __int128 v68 = xmmword_181005F70;
              __int128 v88 = xmmword_181005F70;
              uint64_t v89 = 0LL;
              uint64_t v90 = 0LL;
              char v91 = 3;
              ParseError.description.getter();
              unint64_t v67 = v59;
              uint64_t v61 = v60;
              unint64_t v27 = (char *)v1[9];
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                unint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v27 + 2) + 1LL,  1,  v27);
              }
              unint64_t v63 = *((void *)v27 + 2);
              unint64_t v62 = *((void *)v27 + 3);
              if (v63 >= v62 >> 1) {
                unint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v62 > 1),  v63 + 1,  1,  v27);
              }
              *((void *)v27 + 2) = v63 + 1;
              uint64_t v64 = &v27[80 * v63];
              v64[32] = 1;
              *((void *)v64 + 5) = v67;
              *((void *)v64 + 6) = v61;
              *((void *)v64 + 7) = v22;
              *((void *)v64 + 8) = v23;
              *(_OWORD *)(v64 + 72) = v68;
              *((void *)v64 + 11) = 0LL;
              *((void *)v64 + 12) = 0LL;
              v64[104] = 3;
            }

uint64_t Parser.lexGlobalMatchingOption()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)v1;
  unint64_t v5 = *(void *)(v1 + 8);
  unint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + 24);
  v61.i32[0] = *(unsigned __int8 *)(v1 + 32);
  uint64_t v8 = *(void *)(v1 + 48);
  uint64_t v59 = *(void *)(v1 + 56);
  uint64_t v60 = *(void *)(v1 + 40);
  char v58 = *(_BYTE *)(v1 + 64);
  uint64_t v9 = *(void *)(v1 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *(void *)&__int128 v62 = v9;
  swift_bridgeObjectRetain();
  if ((specialized Parser.tryEat<A>(sequence:)(10792LL, 0xE200000000000000LL) & 1) == 0) {
    goto LABEL_49;
  }
  uint64_t v10 = *(void *)(v1 + 16);
  if ((specialized Parser.tryEat<A>(sequence:)(0x43594E415F525342LL, 0xEB00000000464C52LL) & 1) == 0)
  {
    if ((specialized Parser.tryEat<A>(sequence:)(0x43494E555F525342LL, 0xEB0000000045444FLL) & 1) != 0)
    {
      unint64_t v11 = 0LL;
      unint64_t v13 = 0x8000000000000000LL;
      uint64_t v12 = 1LL;
      goto LABEL_46;
    }

    if ((specialized Parser.tryEat<A>(sequence:)(1179406915LL, 0xE400000000000000LL) & 1) != 0)
    {
      unint64_t v11 = 0LL;
      unint64_t v13 = 0x6000000000000000LL;
      uint64_t v12 = 2LL;
      goto LABEL_46;
    }

    if ((specialized Parser.tryEat<A>(sequence:)(21059LL, 0xE200000000000000LL) & 1) != 0)
    {
      unint64_t v11 = 0LL;
      uint64_t v12 = 0LL;
      unint64_t v13 = 0x6000000000000000LL;
      goto LABEL_46;
    }

    if ((specialized Parser.tryEat<A>(sequence:)(0x464C5243594E41LL, 0xE700000000000000LL) & 1) != 0)
    {
      unint64_t v11 = 0LL;
      unint64_t v13 = 0x6000000000000000LL;
      uint64_t v12 = 3LL;
      goto LABEL_46;
    }

    if ((specialized Parser.tryEat<A>(sequence:)(5852737LL, 0xE300000000000000LL) & 1) != 0)
    {
      unint64_t v11 = 0LL;
      unint64_t v13 = 0x6000000000000000LL;
      uint64_t v12 = 4LL;
      goto LABEL_46;
    }

    if ((specialized Parser.tryEat<A>(sequence:)(17996LL, 0xE200000000000000LL) & 1) != 0)
    {
      unint64_t v11 = 0LL;
      unint64_t v13 = 0x6000000000000000LL;
      uint64_t v12 = 1LL;
      goto LABEL_46;
    }

    if ((specialized Parser.tryEat<A>(sequence:)(5002574LL, 0xE300000000000000LL) & 1) != 0)
    {
      unint64_t v11 = 0LL;
      unint64_t v13 = 0x6000000000000000LL;
      uint64_t v12 = 5LL;
      goto LABEL_46;
    }

    if ((specialized Parser.tryEat<A>(sequence:)(0x45445F54494D494CLL, 0xEB00000000485450LL) & 1) != 0)
    {
      v14._uint64_t countAndFlagsBits = 61LL;
      v14._uint64_t object = (void *)0xE100000000000000LL;
      if (!Parser.tryEat(_:)(v14))
      {
        __int128 v68 = xmmword_181005F80;
        uint64_t v69 = 0LL;
        uint64_t v70 = 0LL;
        char v71 = 3;
        Parser.errorAtCurrentPosition(_:)(&v68);
      }

      Parser.lexNumber(_:)(1, (uint64_t)&v63);
      if ((v66 & 1) != 0)
      {
        uint64_t v67 = 0LL;
        char v15 = &v67;
        unint64_t v13 = 1LL;
LABEL_34:
        *(_OWORD *)(v15 + 1) = xmmword_181005FA0;
        v15[3] = 0LL;
        *((_BYTE *)v15 + 32) = 2;
        Parser.errorAtCurrentPosition(_:)((__int128 *)v15);
        uint64_t v12 = 0LL;
        unint64_t v11 = *(void *)(v1 + 16);
        goto LABEL_46;
      }

      int64x2_t v17 = v65;
      uint64_t v12 = v63;
      unint64_t v13 = v64 & 1;
    }

    else
    {
      if ((specialized Parser.tryEat<A>(sequence:)(0x45485F54494D494CLL, 0xEA00000000005041LL) & 1) != 0)
      {
        v16._uint64_t countAndFlagsBits = 61LL;
        v16._uint64_t object = (void *)0xE100000000000000LL;
        if (!Parser.tryEat(_:)(v16))
        {
          __int128 v73 = xmmword_181005F80;
          uint64_t v74 = 0LL;
          uint64_t v75 = 0LL;
          char v76 = 3;
          Parser.errorAtCurrentPosition(_:)(&v73);
        }

        Parser.lexNumber(_:)(1, (uint64_t)&v63);
        if ((v66 & 1) != 0)
        {
          uint64_t v72 = 0LL;
          unint64_t v13 = 0x2000000000000001LL;
          char v15 = &v72;
          goto LABEL_34;
        }

        int64x2_t v17 = v65;
        uint64_t v12 = v63;
        char v19 = v64;
        uint64_t v20 = 0x2000000000000000LL;
      }

      else
      {
        if ((specialized Parser.tryEat<A>(sequence:)(0x414D5F54494D494CLL, 0xEB00000000484354LL) & 1) == 0)
        {
          if ((specialized Parser.tryEat<A>(sequence:)(0xD000000000000010LL, 0x8000000181009110LL) & 1) != 0)
          {
            unint64_t v11 = 0LL;
            unint64_t v13 = 0xA000000000000000LL;
            uint64_t v12 = 1LL;
          }

          else if ((specialized Parser.tryEat<A>(sequence:)(0x5954504D45544F4ELL, 0xE800000000000000LL) & 1) != 0)
          {
            unint64_t v11 = 0LL;
            uint64_t v12 = 0LL;
            unint64_t v13 = 0xA000000000000000LL;
          }

          else if ((specialized Parser.tryEat<A>(sequence:)(0x5F4F5455415F4F4ELL, 0xEF53534553534F50LL) & 1) != 0)
          {
            unint64_t v11 = 0LL;
            unint64_t v13 = 0xA000000000000000LL;
            uint64_t v12 = 2LL;
          }

          else if ((specialized Parser.tryEat<A>(sequence:)(0xD000000000000011LL, 0x80000001810090F0LL) & 1) != 0)
          {
            unint64_t v11 = 0LL;
            unint64_t v13 = 0xA000000000000000LL;
            uint64_t v12 = 3LL;
          }

          else if ((specialized Parser.tryEat<A>(sequence:)(0x54494A5F4F4ELL, 0xE600000000000000LL) & 1) != 0)
          {
            unint64_t v11 = 0LL;
            unint64_t v13 = 0xA000000000000000LL;
            uint64_t v12 = 4LL;
          }

          else if ((specialized Parser.tryEat<A>(sequence:)(0x54524154535F4F4ELL, 0xEC00000054504F5FLL) & 1) != 0)
          {
            unint64_t v11 = 0LL;
            unint64_t v13 = 0xA000000000000000LL;
            uint64_t v12 = 5LL;
          }

          else if ((specialized Parser.tryEat<A>(sequence:)(4609109LL, 0xE300000000000000LL) & 1) != 0)
          {
            unint64_t v11 = 0LL;
            unint64_t v13 = 0xA000000000000000LL;
            uint64_t v12 = 6LL;
          }

          else
          {
            if ((specialized Parser.tryEat<A>(sequence:)(5260117LL, 0xE300000000000000LL) & 1) == 0) {
              goto LABEL_49;
            }
            unint64_t v11 = 0LL;
            unint64_t v13 = 0xA000000000000000LL;
            uint64_t v12 = 7LL;
          }

          goto LABEL_46;
        }

        v18._uint64_t countAndFlagsBits = 61LL;
        v18._uint64_t object = (void *)0xE100000000000000LL;
        if (!Parser.tryEat(_:)(v18))
        {
          __int128 v78 = xmmword_181005F80;
          uint64_t v79 = 0LL;
          uint64_t v80 = 0LL;
          char v81 = 3;
          Parser.errorAtCurrentPosition(_:)(&v78);
        }

        Parser.lexNumber(_:)(1, (uint64_t)&v63);
        if ((v66 & 1) != 0)
        {
          uint64_t v77 = 0LL;
          unint64_t v13 = 0x4000000000000001LL;
          char v15 = &v77;
          goto LABEL_34;
        }

        int64x2_t v17 = v65;
        uint64_t v12 = v63;
        char v19 = v64;
        uint64_t v20 = 0x4000000000000000LL;
      }

      unint64_t v13 = v20 & 0xFFFFFFFFFFFFFFFELL | v19 & 1;
    }

    if (v13 >> 1 == 0xFFFFFFFF) {
      goto LABEL_49;
    }
    goto LABEL_47;
  }

  unint64_t v11 = 0LL;
  uint64_t v12 = 0LL;
  unint64_t v13 = 0x8000000000000000LL;
LABEL_46:
  int64x2_t v17 = vdupq_n_s64(v11);
LABEL_47:
  if (v13 >> 1 != 0xFFFFFFFF)
  {
    int64x2_t v61 = v17;
    uint64_t v4 = v12;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v39._uint64_t countAndFlagsBits = 41LL;
    v39._uint64_t object = (void *)0xE100000000000000LL;
    uint64_t result = Parser.tryEat(_:)(v39);
    if ((result & 1) == 0)
    {
      __int128 v62 = xmmword_181005F70;
      __int128 v78 = xmmword_181005F70;
      uint64_t v79 = 0LL;
      uint64_t v80 = 0LL;
      char v81 = 3;
      uint64_t v7 = *(void *)(v1 + 16);
      ParseError.description.getter();
      uint64_t v1 = v40;
      uint64_t v60 = v41;
      uint64_t v10 = *(void *)(v2 + 72);
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v5 = v6;
      if ((result & 1) != 0) {
        goto LABEL_63;
      }
      goto LABEL_71;
    }

    goto LABEL_66;
  }

uint64_t closure #1 in Parser.expectGroupLikeAtom()()
{
  uint64_t v0 = String.subscript.getter();
  unint64_t v2 = v1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v0 ^ v2) < 0x4000) {
    return 1LL;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Character>);
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 32) = 58LL;
  *(_OWORD *)(inited + 16) = xmmword_181005EC0;
  *(void *)(inited + 40) = 0xE100000000000000LL;
  *(void *)(inited + 48) = 41LL;
  *(void *)(inited + 56) = 0xE100000000000000LL;
  specialized Parser.tryEat<A>(anyOf:)(inited);
  uint64_t v5 = v4;
  swift_setDeallocating();
  swift_arrayDestroy();
  if (v5)
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  return 0LL;
}

uint64_t Parser.lexAtom()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v44 = a1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Atom.Kind>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3, v5);
  uint64_t v43 = (uint64_t)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AST.Atom.Kind?);
  MEMORY[0x1895F8858](v7, v8);
  uint64_t v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for AST.Atom.Kind(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v14 = MEMORY[0x1895F8858](v11, v13);
  uint64_t v42 = (uint64_t)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v14, v16);
  Swift::String v18 = (char *)&v41 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Atom.Kind>?);
  uint64_t v21 = MEMORY[0x1895F8858](v19, v20);
  uint64_t v23 = (char *)&v41 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v21, v24);
  uint64_t v26 = (char *)&v41 - v25;
  unint64_t v27 = *(void *)(v2 + 16);
  closure #1 in Parser.lexAtom()((void *)v2, *(unsigned __int8 *)(v2 + 32), (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1LL, v11) == 1)
  {
    outlined destroy of _ASTParent?((uint64_t)v10, &demangling cache variable for type metadata for AST.Atom.Kind?);
    uint64_t v28 = 1LL;
  }

  else
  {
    outlined init with take of AST.Atom.Kind((uint64_t)v10, (uint64_t)v18, type metadata accessor for AST.Atom.Kind);
    uint64_t result = outlined init with take of AST.Atom.Kind( (uint64_t)v18,  (uint64_t)v26,  type metadata accessor for AST.Atom.Kind);
    unint64_t v30 = *(void *)(v2 + 16);
    if (v30 >> 14 < v27 >> 14)
    {
      __break(1u);
      return result;
    }

    uint64_t v28 = 0LL;
    uint64_t v31 = &v26[*(int *)(v3 + 28)];
    *(void *)uint64_t v31 = v27;
    *((void *)v31 + 1) = v30;
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v26, v28, 1LL, v3);
  outlined init with take of Source.Located<AST.Atom.Kind>?( (uint64_t)v26,  (uint64_t)v23,  &demangling cache variable for type metadata for Source.Located<AST.Atom.Kind>?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v23, 1LL, v3) == 1)
  {
    outlined destroy of _ASTParent?( (uint64_t)v23,  &demangling cache variable for type metadata for Source.Located<AST.Atom.Kind>?);
    uint64_t v32 = type metadata accessor for AST.Atom(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56LL))( v44,  1LL,  1LL,  v32);
  }

  else
  {
    uint64_t v33 = v43;
    outlined init with take of Source.Located<AST.Atom.Kind>?( (uint64_t)v23,  v43,  &demangling cache variable for type metadata for Source.Located<AST.Atom.Kind>);
    uint64_t v34 = v42;
    outlined init with copy of AST.Atom(v33, v42, type metadata accessor for AST.Atom.Kind);
    unint64_t v35 = (uint64_t *)(v33 + *(int *)(v3 + 28));
    uint64_t v36 = *v35;
    uint64_t v37 = v35[1];
    outlined destroy of _ASTParent?(v33, &demangling cache variable for type metadata for Source.Located<AST.Atom.Kind>);
    uint64_t v38 = v44;
    outlined init with take of AST.Atom.Kind(v34, v44, type metadata accessor for AST.Atom.Kind);
    uint64_t v39 = type metadata accessor for AST.Atom(0LL);
    uint64_t v40 = (void *)(v38 + *(int *)(v39 + 20));
    *uint64_t v40 = v36;
    v40[1] = v37;
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56LL))( v38,  0LL,  1LL,  v39);
  }

unint64_t closure #1 in Parser.lexAtom()@<X0>(void *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Atom.Kind>);
  MEMORY[0x1895F8858](v6, v7);
  uint64_t v108 = (uint64_t *)&v105[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Atom.CharacterProperty>?);
  MEMORY[0x1895F8858](v9, v10);
  *(void *)&__int128 v112 = &v105[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v12 = type metadata accessor for AST.Atom.CharacterProperty(0LL);
  uint64_t v14 = MEMORY[0x1895F8858](v12, v13);
  uint64_t v111 = &v105[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  MEMORY[0x1895F8858](v14, v16);
  uint64_t v110 = &v105[-v17];
  uint64_t v18 = *a1;
  uint64_t v19 = a1[2];
  uint64_t v20 = a1[3];
  uint64_t v113 = a1;
  swift_bridgeObjectRetain();
  uint64_t v21 = String.subscript.getter();
  unint64_t v23 = v22;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!((v21 ^ v23) >> 14))
  {
    uint64_t v24 = type metadata accessor for AST.Atom.Kind(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56LL))( a3,  1LL,  1LL,  v24);
  }

  uint64_t v109 = (void *)a3;
  uint64_t v26 = (uint64_t)v113;
  int v106 = a2;
  if ((a2 & 1) == 0)
  {
    uint64_t v37 = v113[9];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    uint64_t v107 = v37;
    swift_bridgeObjectRetain();
    uint64_t v38 = String.subscript.getter();
    if ((v38 ^ v39) >> 14)
    {
      a3 = Substring.subscript.getter();
      uint64_t v40 = v45;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }

    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      a3 = 0LL;
      uint64_t v40 = 0LL;
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!v40) {
      goto LABEL_17;
    }
    if (a3 == 41 && v40 == 0xE100000000000000LL)
    {
LABEL_26:
      swift_bridgeObjectRelease();
      goto LABEL_27;
    }

    char v46 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v46 & 1) == 0)
    {
LABEL_17:
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v47 = String.subscript.getter();
      if ((v47 ^ v48) >> 14)
      {
        uint64_t v19 = Substring.subscript.getter();
        uint64_t v49 = v64;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }

      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v19 = 0LL;
        uint64_t v49 = 0LL;
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!v49) {
        goto LABEL_4;
      }
      if (v19 == 124 && v49 == 0xE100000000000000LL) {
        goto LABEL_26;
      }
      char v76 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v76 & 1) == 0) {
        goto LABEL_4;
      }
    }

LABEL_106:
    uint64_t v77 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v77 + 2) + 1LL,  1,  v77);
    goto LABEL_48;
  }

LABEL_92:
  uint64_t v36 = v109;
  if (v67 == 93 && v69 == 0xE100000000000000LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || (uint64_t)specialized Collection.count.getter(v67, v69) < 2)
  {
    goto LABEL_35;
  }

  swift_bridgeObjectRetain();
  unint64_t result = specialized Collection.first.getter(v67, v69);
  if ((result & 0x100000000LL) == 0)
  {
    if ((result & 0xFFFFFF80) != 0
      || v67 == 2573 && v69 == 0xE200000000000000LL
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
      || (Character.isLetter.getter() & 1) != 0
      || (Character.isNumber.getter() & 1) != 0)
    {
      swift_bridgeObjectRelease();
LABEL_104:
      uint64_t v36 = v109;
      goto LABEL_35;
    }

    unint64_t v126 = v67;
    *(void *)uint64_t v127 = v69;
    *(_OWORD *)&v127[8] = 0uLL;
    v127[24] = 11;
    swift_bridgeObjectRetain();
    ParseError.description.getter();
    uint64_t v98 = v100;
    uint64_t v34 = v101;
    char v71 = (char *)v113[9];
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
LABEL_108:
      unint64_t v103 = *((void *)v71 + 2);
      unint64_t v102 = *((void *)v71 + 3);
      if (v103 >= v102 >> 1) {
        char v71 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v102 > 1),  v103 + 1,  1,  v71);
      }
      *((void *)v71 + 2) = v103 + 1;
      uint64_t v104 = &v71[80 * v103];
      v104[32] = 1;
      *((void *)v104 + 5) = v98;
      *((void *)v104 + 6) = v34;
      *((void *)v104 + 7) = v31;
      *((void *)v104 + 8) = v70;
      *((void *)v104 + 9) = v67;
      *((void *)v104 + 10) = v69;
      *((void *)v104 + 11) = 0LL;
      *((void *)v104 + 12) = 0LL;
      v104[104] = 11;
      swift_bridgeObjectRelease_n();
      v113[9] = v71;
      goto LABEL_104;
    }

LABEL_112:
    char v71 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v71 + 2) + 1LL,  1,  v71);
    goto LABEL_108;
  }

  __break(1u);
  return result;
}

unint64_t Character.isConfusable.getter(unint64_t a1, unint64_t a2)
{
  uint64_t v4 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v4 = a1;
  }
  uint64_t v5 = 7LL;
  if (((a2 >> 60) & ((a1 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v5 = 11LL;
  }
  unint64_t result = specialized Collection.first.getter(a1, a2);
  if ((result & 0x100000000LL) == 0)
  {
    if ((result & 0xFFFFFF80) == 0 && (a1 != 2573 || a2 != 0xE200000000000000LL))
    {
      char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      char v7 = 0;
      if ((v8 & 1) != 0) {
        return v7 & 1;
      }
      if ((Character.isLetter.getter() & 1) == 0)
      {
        char v7 = Character.isNumber.getter() ^ 1;
        return v7 & 1;
      }
    }

_RegexParser::AST::CustomCharacterClass::SetOp_optional Parser.lexCustomCharacterClassRangeOperator()@<W0>( uint64_t a1@<X8>)
{
  __int128 v6 = *(_OWORD *)(v1 + 16);
  result.value = Parser.peekCCBinOp()().value;
  if (v7 == 3
    && (v4._uint64_t countAndFlagsBits = 45LL,
        v4._uint64_t object = (void *)0xE100000000000000LL,
        result.value = Parser.tryEat(_:)(v4),
        (result.value & 1) != 0))
  {
    unint64_t v5 = *(void *)(v1 + 16);
    if (v5 >> 14 < (unint64_t)v6 >> 14)
    {
      __break(1u);
    }

    else
    {
      *(void *)a1 = v6;
      *(void *)(a1 + 8) = v5;
      *(_BYTE *)(a1 + 16) = 0;
    }
  }

  else
  {
    *(void *)a1 = 0LL;
    *(void *)(a1 + 8) = 0LL;
    *(_BYTE *)(a1 + 16) = 1;
  }

  return result;
}

_RegexParser::AST::GlobalMatchingOptionSequence_optional __swiftcall Parser.lexGlobalMatchingOptionSequence()()
{
  uint64_t v1 = v0;
  uint64_t v2 = (void *)Parser.lexGlobalMatchingOption()((uint64_t)&v17);
  unint64_t v4 = v18;
  unint64_t v5 = (char *)MEMORY[0x18961AFE8];
  if (v18 >> 1 != 0xFFFFFFFF)
  {
    __int128 v7 = v19;
    __int128 v6 = v20;
    do
    {
      __int128 v15 = v7;
      __int128 v16 = v6;
      uint64_t v8 = v17;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v5 + 2) + 1LL,  1,  v5);
      }
      unint64_t v10 = *((void *)v5 + 2);
      unint64_t v9 = *((void *)v5 + 3);
      __int128 v12 = v15;
      __int128 v11 = v16;
      if (v10 >= v9 >> 1)
      {
        uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v9 > 1),  v10 + 1,  1,  v5);
        __int128 v12 = v15;
        __int128 v11 = v16;
        unint64_t v5 = v14;
      }

      *((void *)v5 + 2) = v10 + 1;
      uint64_t v13 = &v5[48 * v10];
      *((void *)v13 + 4) = v8;
      *((void *)v13 + 5) = v4;
      *((_OWORD *)v13 + 3) = v12;
      *((_OWORD *)v13 + 4) = v11;
      uint64_t v2 = (void *)Parser.lexGlobalMatchingOption()((uint64_t)&v17);
      unint64_t v4 = v18;
      __int128 v7 = v19;
      __int128 v6 = v20;
    }

    while (v18 >> 1 != 0xFFFFFFFF);
  }

  if (!*((void *)v5 + 2))
  {
    uint64_t v2 = (void *)swift_bridgeObjectRelease();
    unint64_t v5 = 0LL;
  }

  void *v1 = v5;
  result.value.options._rawValue = v2;
  result.is_nil = v3;
  return result;
}

uint64_t specialized Set.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a3 + 16)) {
    return 0LL;
  }
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1LL << *(_BYTE *)(a3 + 32);
  unint64_t v8 = v6 & ~v7;
  uint64_t v9 = a3 + 56;
  if (((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) == 0) {
    return 0LL;
  }
  uint64_t v10 = ~v7;
  uint64_t v11 = *(void *)(a3 + 48);
  while (1)
  {
    __int128 v12 = (void *)(v11 + 16 * v8);
    BOOL v13 = *v12 == a1 && v12[1] == a2;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      break;
    }
    unint64_t v8 = (v8 + 1) & v10;
    if (((*(void *)(v9 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) == 0) {
      return 0LL;
    }
  }

  return 1LL;
}

void static SyntaxOptions.experimentalRanges.getter(void *a1@<X8>)
{
  *a1 = 16LL;
}

void static SyntaxOptions.experimentalCaptures.getter(void *a1@<X8>)
{
  *a1 = 32LL;
}

void static SyntaxOptions.experimentalQuotes.getter(void *a1@<X8>)
{
  *a1 = 4LL;
}

void static SyntaxOptions.experimentalComments.getter(void *a1@<X8>)
{
  *a1 = 8LL;
}

void static SyntaxOptions.nonSemanticWhitespace.getter(void *a1@<X8>)
{
  *a1 = 1LL;
}

void static SyntaxOptions.endOfLineComments.getter(void *a1@<X8>)
{
  *a1 = 2LL;
}

uint64_t Parser.parse()@<X0>(void *a1@<X8>)
{
  uint64_t v3 = v24;
  if (v24)
  {
    uint64_t v4 = *(void *)(v24 + 16);
    uint64_t v5 = v24 + 48 * v4 + 32;
    uint64_t v6 = v4 + 1;
    while (--v6)
    {
      uint64_t v7 = (void *)(v5 - 48);
      uint64_t v8 = *(void *)(v5 - 40) >> 61;
      v5 -= 48LL;
      if (v8 == 3)
      {
        *(_BYTE *)(v1 + 64) = *v7;
        break;
      }
    }
  }

  Parser.parseNode()(&v24);
  uint64_t v9 = v24;
  unint64_t v10 = *(void *)(v1 + 16);
  swift_bridgeObjectRetain();
  uint64_t v11 = String.subscript.getter();
  unint64_t v13 = v12;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v11 ^ v13) >= 0x4000)
  {
    v14._uint64_t countAndFlagsBits = 41LL;
    v14._uint64_t object = (void *)0xE100000000000000LL;
    if (!Parser.tryEat(_:)(v14))
    {
      v20._uint64_t object = (void *)0x80000001810093A0LL;
      v20._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
      Parser.unreachable(_:)(v20);
      goto LABEL_14;
    }

    unint64_t v15 = *(void *)(v1 + 16);
    if (v15 >> 14 < v10 >> 14)
    {
      __break(1u);
    }

    else
    {
      uint64_t v11 = *(void *)(v1 + 72);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
LABEL_10:
        unint64_t v17 = *(void *)(v11 + 16);
        unint64_t v16 = *(void *)(v11 + 24);
        unint64_t v18 = v17 + 1;
        if (v17 >= v16 >> 1)
        {
          unint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v16 > 1),  v17 + 1,  1,  (char *)v11);
          unint64_t v18 = v17 + 1;
          uint64_t v11 = (uint64_t)v23;
        }

        *(void *)(v11 + 16) = v18;
        uint64_t v19 = v11 + 80 * v17;
        *(_BYTE *)(v19 + 32) = 1;
        *(void *)(v19 + 40) = 0xD000000000000030LL;
        *(void *)(v19 + 48) = 0x8000000181008AE0LL;
        *(void *)(v19 + 56) = v10;
        *(void *)(v19 + 64) = v15;
        *(void *)(v19 + 72) = 10LL;
        *(void *)(v19 + 80) = 0LL;
        *(void *)(v19 + 88) = 0LL;
        *(void *)(v19 + 96) = 0LL;
        *(_BYTE *)(v19 + 104) = 36;
        *(void *)(v1 + 72) = v11;
        goto LABEL_14;
      }
    }

    uint64_t v11 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v11 + 16) + 1LL,  1,  (char *)v11);
    goto LABEL_10;
  }

uint64_t Parser.parseNode()@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 16);
  swift_bridgeObjectRetain();
  uint64_t v4 = String.subscript.getter();
  unint64_t v6 = v5;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!((v4 ^ v6) >> 14))
  {
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v3;
    *(void *)(result + 24) = v3;
    *a1 = result | 0xB000000000000000LL;
    return result;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Node>);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_181005EB0;
  Parser.parseConcatenation()((unint64_t *)(v8 + 32));
  unint64_t v9 = *(void *)(v1 + 16);
  v10._uint64_t countAndFlagsBits = 124LL;
  v10._uint64_t object = (void *)0xE100000000000000LL;
  uint64_t result = Parser.tryEat(_:)(v10);
  uint64_t v11 = (char *)MEMORY[0x18961AFE8];
  if ((result & 1) != 0)
  {
    while (1)
    {
      unint64_t v12 = *(void *)(v1 + 16);
      if (v12 >> 14 < v9 >> 14) {
        break;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v11 + 2) + 1LL,  1,  v11);
      }
      unint64_t v14 = *((void *)v11 + 2);
      unint64_t v13 = *((void *)v11 + 3);
      if (v14 >= v13 >> 1) {
        uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v13 > 1),  v14 + 1,  1,  v11);
      }
      *((void *)v11 + 2) = v14 + 1;
      unint64_t v15 = &v11[16 * v14];
      *((void *)v15 + 4) = v9;
      *((void *)v15 + 5) = v12;
      Parser.parseConcatenation()(&v21);
      unint64_t v16 = v21;
      unint64_t v18 = *(void *)(v8 + 16);
      unint64_t v17 = *(void *)(v8 + 24);
      if (v18 >= v17 >> 1) {
        uint64_t v8 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v17 > 1),  v18 + 1,  1,  (char *)v8);
      }
      *(void *)(v8 + 16) = v18 + 1;
      *(void *)(v8 + 8 * v18 + 32) = v16;
      unint64_t v9 = *(void *)(v1 + 16);
      v19._uint64_t countAndFlagsBits = 124LL;
      v19._uint64_t object = (void *)0xE100000000000000LL;
      uint64_t result = Parser.tryEat(_:)(v19);
      if ((result & 1) == 0) {
        goto LABEL_12;
      }
    }

    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

uint64_t Parser.parseConcatenation()@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v136 = (char *)MEMORY[0x18961AFE8];
  unint64_t v2 = *(void *)(v1 + 16);
  unint64_t v130 = v2;
  while (1)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = String.subscript.getter();
    unint64_t v6 = v5;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v4 ^ v6) < 0x4000) {
      goto LABEL_72;
    }
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v7 = String.subscript.getter();
    unint64_t v9 = v8;
    swift_bridgeObjectRelease();
    if ((v7 ^ v9) >> 14)
    {
      uint64_t v10 = Substring.subscript.getter();
      uint64_t v12 = v11;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v12)
      {
        if (v10 == 124 && v12 == 0xE100000000000000LL)
        {
LABEL_71:
          swift_bridgeObjectRelease();
          goto LABEL_72;
        }

        char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v13 & 1) != 0) {
          goto LABEL_72;
        }
      }
    }

    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }

    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v14 = String.subscript.getter();
    unint64_t v16 = v15;
    swift_bridgeObjectRelease();
    if ((v14 ^ v16) >> 14)
    {
      uint64_t v17 = Substring.subscript.getter();
      uint64_t v19 = v18;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v19)
      {
        if (v17 == 41 && v19 == 0xE100000000000000LL) {
          goto LABEL_71;
        }
        char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v20 & 1) != 0) {
          goto LABEL_72;
        }
      }
    }

    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }

    unint64_t v21 = v137;
    uint64_t result = closure #1 in Parser.lexComment()(v137, &v138);
    unint64_t v23 = v139;
    if (v139)
    {
      unint64_t v24 = *(void *)(v137 + 16);
      if (v24 >> 14 >= v2 >> 14)
      {
        uint64_t v25 = v138;
LABEL_20:
        uint64_t v26 = swift_allocObject();
        *(void *)(v26 + 16) = v25;
        *(void *)(v26 + 24) = v23;
        *(void *)(v26 + 32) = v2;
        *(void *)(v26 + 40) = v24;
        uint64_t v27 = v136;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v136 + 2) + 1LL,  1,  v136);
        }
        unint64_t v29 = *((void *)v27 + 2);
        unint64_t v28 = *((void *)v27 + 3);
        unint64_t v30 = v29 + 1;
        if (v29 >= v28 >> 1) {
          uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v28 > 1),  v29 + 1,  1,  v27);
        }
        uint64_t v3 = v26 | 0x6000000000000000LL;
        goto LABEL_3;
      }

LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
LABEL_84:
      __break(1u);
LABEL_85:
      __break(1u);
LABEL_86:
      __break(1u);
      goto LABEL_87;
    }

    if ((*(_BYTE *)(v137 + 56) & 1) != 0)
    {
      unint64_t v31 = *(void *)(v137 + 8);
      unint64_t v32 = *(void *)(v137 + 16);
      unint64_t v33 = *(void *)(v137 + 24);
      uint64_t v138 = *(void *)v137;
      unint64_t v139 = v31;
      unint64_t v140 = v32;
      unint64_t v141 = v33;
      unint64_t v34 = specialized Source.peekPrefix(maxLength:_:)(0LL, 1);
      if (v37)
      {
        uint64_t v38 = v35;
        uint64_t v39 = v37;
        unint64_t v40 = v34;
        uint64_t v134 = v36;
        unint64_t v24 = v32;
        if (Substring.distance(from:to:)() >= 1)
        {
          swift_bridgeObjectRetain();
          String.subscript.getter();
          swift_bridgeObjectRelease();
          unint64_t v41 = Substring.index(_:offsetBy:limitedBy:)();
          char v43 = v42;
          uint64_t result = swift_bridgeObjectRelease();
          unint64_t v24 = v32;
          if ((v43 & 1) == 0)
          {
            if (v33 >> 14 < v41 >> 14) {
              goto LABEL_85;
            }
            *(void *)(v137 + 16) = v41;
            *(void *)(v137 + 24) = v33;
            unint64_t v24 = v41;
          }
        }

        uint64_t v25 = MEMORY[0x186E052CC](v40, v38, v134, v39);
        unint64_t v23 = v44;
        uint64_t result = swift_bridgeObjectRelease();
        if (v24 >> 14 < v32 >> 14) {
          goto LABEL_84;
        }
        unint64_t v21 = v137;
        if (v23)
        {
          unint64_t v2 = v32;
          goto LABEL_20;
        }
      }
    }

    unint64_t v45 = *(void *)(v21 + 16);
    uint64_t result = closure #1 in Parser.lexQuote()(v21, &v138);
    unint64_t v46 = v139;
    if (v139)
    {
      unint64_t v47 = *(void *)(v21 + 16);
      if (v47 >> 14 < v45 >> 14) {
        goto LABEL_83;
      }
      uint64_t v48 = v138;
      uint64_t v49 = swift_allocObject();
      *(void *)(v49 + 16) = v48;
      *(void *)(v49 + 24) = v46;
      *(void *)(v49 + 32) = v45;
      *(void *)(v49 + 40) = v47;
      uint64_t v27 = v136;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v136 + 2) + 1LL,  1,  v136);
      }
      unint64_t v29 = *((void *)v27 + 2);
      unint64_t v50 = *((void *)v27 + 3);
      unint64_t v30 = v29 + 1;
      if (v29 >= v50 >> 1) {
        uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v50 > 1),  v29 + 1,  1,  v27);
      }
      uint64_t v3 = v49 | 0x5000000000000000LL;
      goto LABEL_3;
    }

    Parser.lexInterpolation()((uint64_t)&v138);
    unint64_t v51 = v139;
    if (v139)
    {
      unint64_t v53 = v140;
      unint64_t v52 = v141;
      uint64_t v54 = v138;
      uint64_t v55 = swift_allocObject();
      *(void *)(v55 + 16) = v54;
      *(void *)(v55 + 24) = v51;
      *(void *)(v55 + 32) = v53;
      *(void *)(v55 + 40) = v52;
      uint64_t v27 = v136;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v136 + 2) + 1LL,  1,  v136);
      }
      unint64_t v29 = *((void *)v27 + 2);
      unint64_t v56 = *((void *)v27 + 3);
      unint64_t v30 = v29 + 1;
      if (v29 >= v56 >> 1) {
        uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v56 > 1),  v29 + 1,  1,  v27);
      }
      uint64_t v3 = v55 | 0x7000000000000000LL;
      goto LABEL_3;
    }

    Parser.parseQuantifierOperand()(&v138);
    uint64_t v57 = v138;
    if ((~v138 & 0xF000000000000007LL) == 0) {
      break;
    }
    uint64_t v59 = *(void *)v21;
    uint64_t v58 = *(void *)(v21 + 8);
    uint64_t v60 = *(void *)(v21 + 16);
    uint64_t v128 = *(void *)(v21 + 24);
    char v126 = *(_BYTE *)(v21 + 32);
    uint64_t v61 = *(void *)(v21 + 48);
    uint64_t v122 = *(void *)(v21 + 56);
    uint64_t v124 = *(void *)(v21 + 40);
    char v120 = *(_BYTE *)(v21 + 64);
    uint64_t v62 = *(void *)(v21 + 72);
    swift_bridgeObjectRetain();
    uint64_t v132 = v61;
    swift_bridgeObjectRetain();
    uint64_t v135 = v62;
    swift_bridgeObjectRetain();
    closure #1 in Parser.lexQuantifier()(v21, (uint64_t)&v138);
    unint64_t v63 = v141;
    uint64_t v65 = v142;
    unint64_t v64 = v143;
    uint64_t v131 = v57;
    if (v139 >> 1 == 0xFFFFFFFF && v143 < 2)
    {
      uint64_t v116 = v60;
      uint64_t v118 = v58;
      uint64_t v66 = v137;
      uint64_t v67 = *(void *)(v137 + 72);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v68 = specialized Collection.dropFirst(_:)(*(void *)(v135 + 16), v67);
      uint64_t v70 = v69;
      uint64_t v72 = v71;
      int64_t v74 = v73 >> 1;
      swift_bridgeObjectRetain();
      uint64_t result = swift_unknownObjectRetain();
      uint64_t v75 = v70 - 32;
      uint64_t v76 = v72;
      uint64_t v77 = v72;
      uint64_t v78 = v132;
LABEL_50:
      uint64_t v79 = v75 + 80 * v76;
      while (v74 != v77)
      {
        if (v76 < v72 || v77 >= v74)
        {
          __break(1u);
          goto LABEL_82;
        }

        int v80 = *(unsigned __int8 *)(v79 + 32);
        ++v77;
        v79 += 80LL;
        if (!v80)
        {
          uint64_t v112 = v68;
          uint64_t v114 = v59;
          uint64_t v115 = v75;
          uint64_t v108 = *(void *)(v79 - 24);
          uint64_t v109 = *(void *)(v79 - 40);
          uint64_t v81 = *(void *)(v79 - 8);
          uint64_t v107 = *(void *)(v79 - 16);
          uint64_t v83 = *(void *)v79;
          uint64_t v82 = *(void *)(v79 + 8);
          uint64_t v84 = *(void *)(v79 + 16);
          unsigned __int8 v85 = *(_BYTE *)(v79 + 24);
          uint64_t v111 = *(void *)(v79 - 32);
          swift_bridgeObjectRetain();
          uint64_t v110 = v83;
          uint64_t v86 = v83;
          unsigned __int8 v87 = v85;
          outlined copy of ParseError?(v81, v86, v82, v84, v85);
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v113 = v67;
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v135 + 16) + 1LL,  1,  (char *)v135);
            uint64_t v135 = result;
          }

          unint64_t v89 = *(void *)(v135 + 16);
          unint64_t v88 = *(void *)(v135 + 24);
          uint64_t v75 = v115;
          if (v89 >= v88 >> 1)
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v88 > 1),  v89 + 1,  1,  (char *)v135);
            uint64_t v75 = v115;
            uint64_t v135 = result;
          }

          *(void *)(v135 + 16) = v89 + 1;
          unint64_t v90 = v135 + 80 * v89;
          *(_BYTE *)(v90 + 32) = 0;
          *(void *)(v90 + 40) = v109;
          uint64_t v68 = v112;
          *(void *)(v90 + 48) = v111;
          *(void *)(v90 + 56) = v108;
          *(void *)(v90 + 64) = v107;
          *(void *)(v90 + 72) = v81;
          *(void *)(v90 + 80) = v110;
          *(void *)(v90 + 88) = v82;
          *(void *)(v90 + 96) = v84;
          *(_BYTE *)(v90 + 104) = v87;
          uint64_t v76 = v77;
          uint64_t v66 = v137;
          uint64_t v57 = v131;
          uint64_t v78 = v132;
          uint64_t v67 = v113;
          uint64_t v59 = v114;
          goto LABEL_50;
        }
      }

      swift_bridgeObjectRelease();
      swift_unknownObjectRelease_n();
      *(void *)uint64_t v66 = v59;
      *(void *)(v66 + 8) = v118;
      *(void *)(v66 + 16) = v116;
      *(void *)(v66 + 24) = v128;
      *(_BYTE *)(v66 + 32) = v126;
      *(void *)(v66 + 40) = v124;
      *(void *)(v66 + 48) = v78;
      *(void *)(v66 + 56) = v122;
      *(_BYTE *)(v66 + 64) = v120;
      uint64_t v98 = v136;
      *(void *)(v66 + 72) = v135;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v98 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v136 + 2) + 1LL,  1,  v136);
      }
      unint64_t v100 = *((void *)v98 + 2);
      unint64_t v99 = *((void *)v98 + 3);
      if (v100 >= v99 >> 1) {
        uint64_t v98 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v99 > 1),  v100 + 1,  1,  v98);
      }
      *((void *)v98 + 2) = v100 + 1;
      uint64_t v136 = v98;
      *(void *)&v98[8 * v100 + 32] = v57;
      unint64_t v2 = *(void *)(v66 + 16);
    }

    else
    {
      uint64_t v119 = v149;
      uint64_t v121 = v144;
      unint64_t v91 = v139;
      uint64_t v123 = v147;
      uint64_t v125 = v146;
      uint64_t v127 = v145;
      uint64_t v129 = v150;
      unint64_t v92 = v140;
      uint64_t v93 = v138;
      uint64_t v117 = v151;
      char v94 = v148;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      unint64_t v95 = *(void *)(v137 + 16);
      if (v95 >> 14 < v2 >> 14) {
        goto LABEL_88;
      }
      uint64_t v96 = swift_allocObject();
      *(void *)(v96 + 16) = v93;
      *(void *)(v96 + 24) = v91;
      *(void *)(v96 + 32) = v92;
      *(void *)(v96 + 40) = v63;
      *(void *)(v96 + 48) = v65;
      *(void *)(v96 + 56) = v64;
      *(void *)(v96 + 64) = v121;
      *(void *)(v96 + 72) = v127;
      *(void *)(v96 + 80) = v125;
      *(void *)(v96 + 88) = v123;
      *(_BYTE *)(v96 + 96) = v94;
      *(void *)(v96 + 104) = v119;
      *(void *)(v96 + 112) = v129;
      *(void *)(v96 + 120) = v131;
      *(void *)(v96 + 128) = v2;
      *(void *)(v96 + 136) = v95;
      *(void *)(v96 + 144) = v117;
      uint64_t v27 = v136;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v136 + 2) + 1LL,  1,  v136);
      }
      unint64_t v21 = v137;
      unint64_t v29 = *((void *)v27 + 2);
      unint64_t v97 = *((void *)v27 + 3);
      unint64_t v30 = v29 + 1;
      if (v29 >= v97 >> 1) {
        uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v97 > 1),  v29 + 1,  1,  v27);
      }
      uint64_t v3 = v96 | 0x4000000000000000LL;
LABEL_3:
      *((void *)v27 + 2) = v30;
      uint64_t v136 = v27;
      *(void *)&v27[8 * v29 + 32] = v3;
      unint64_t v2 = *(void *)(v21 + 16);
    }
  }

  v106._uint64_t object = (void *)0x80000001810093E0LL;
  v106._uint64_t countAndFlagsBits = 0xD000000000000023LL;
  Parser.unreachable(_:)(v106);
LABEL_72:
  uint64_t v101 = *((void *)v136 + 2);
  if (!v101)
  {
    uint64_t result = swift_allocObject();
    unint64_t v102 = *(void *)(v137 + 16);
    if (v102 >> 14 >= v130 >> 14)
    {
      uint64_t v103 = result;
      *(void *)(result + 16) = v130;
      *(void *)(result + 24) = v102;
      uint64_t result = swift_bridgeObjectRelease();
      unint64_t v104 = v103 | 0xB000000000000000LL;
LABEL_79:
      *a1 = v104;
      return result;
    }

    goto LABEL_86;
  }

  if (v101 == 1)
  {
    *a1 = *((void *)v136 + 4);
    swift_retain();
    return swift_bridgeObjectRelease();
  }

  uint64_t result = swift_allocObject();
  unint64_t v105 = *(void *)(v137 + 16);
  if (v105 >> 14 >= v130 >> 14)
  {
    *(void *)(result + 16) = v136;
    *(void *)(result + 24) = v130;
    *(void *)(result + 32) = v105;
    unint64_t v104 = result | 0x1000000000000000LL;
    goto LABEL_79;
  }

LABEL_87:
  __break(1u);
LABEL_88:
  __break(1u);
  return result;
}

uint64_t Parser.parseQuantifierOperand()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v59 = a1;
  uint64_t v2 = type metadata accessor for AST.Atom.Kind(0LL);
  MEMORY[0x1895F8858](v2, v3);
  unint64_t v5 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AST.Atom?);
  MEMORY[0x1895F8858](v6, v7);
  unint64_t v9 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for AST.Atom(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1895F8858](v10, v12);
  uint64_t v14 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v58 = *(void *)(v1 + 16);
  Parser.lexKnownConditionalStart()(&v81);
  outlined init with take of AST.Conditional.Condition?((uint64_t)&v81, (uint64_t)v89);
  outlined init with take of AST.Conditional.Condition?((uint64_t)v89, (uint64_t)v90);
  if (_s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOSgWOg((uint64_t)v90) != 1)
  {
    *(_OWORD *)&v86[16] = v90[6];
    __int128 v87 = v90[7];
    __int128 v88 = v90[8];
    __int128 v83 = v90[2];
    __int128 v84 = v90[3];
    __int128 v85 = v90[4];
    *(_OWORD *)uint64_t v86 = v90[5];
    __int128 v81 = v90[0];
    __int128 v82 = v90[1];
    Parser.parseConditionalBranches(start:_:)(v58, &v81, (unint64_t)&v60);
    uint64_t result = outlined release of AST.Conditional.Condition?((uint64_t)v89);
    uint64_t v22 = v60;
    goto LABEL_13;
  }

  uint64_t v15 = (uint64_t)v9;
  *((void *)&v57 + 1) = v2;
  uint64_t v16 = (uint64_t)v5;
  Parser.lexGroupConditionalStart()((uint64_t)&v73);
  char v17 = v78;
  if (v78 != -1)
  {
    uint64_t v23 = *((void *)&v77 + 1);
    __int128 v57 = v76;
    *((void *)&v55 + 1) = v77;
    __int128 v56 = v75;
    uint64_t v24 = *((void *)&v74 + 1);
    uint64_t v25 = v74;
    uint64_t v26 = *((void *)&v73 + 1);
    uint64_t v27 = v73;
    __int128 v60 = v73;
    __int128 v61 = v74;
    __int128 v62 = v75;
    __int128 v63 = v76;
    __int128 v64 = v77;
    LOBYTE(v65) = v78;
    *((void *)&v65 + 1) = v79;
    *(void *)&__int128 v66 = v80;
    Parser.parseGroupBody(start:_:)(v79, (uint64_t)&v60, (uint64_t)&v81);
    outlined consume of Source.Located<AST.Group.Kind>?( v27,  v26,  v25,  v24,  v56,  *((uint64_t *)&v56 + 1),  v57,  *((uint64_t *)&v57 + 1),  *((uint64_t *)&v55 + 1),  v23,  v17);
    v70[4] = v85;
    v70[5] = *(_OWORD *)v86;
    v70[6] = *(_OWORD *)&v86[16];
    __int128 v71 = v87;
    v70[0] = v81;
    v70[1] = v82;
    v70[2] = v83;
    v70[3] = v84;
    v72[6] = *(_OWORD *)&v86[16];
    v72[7] = v87;
    v72[4] = v85;
    v72[5] = *(_OWORD *)v86;
    v72[2] = v83;
    v72[3] = v84;
    v72[0] = v81;
    v72[1] = v82;
    _s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOWOi2_((uint64_t)v72);
    __int128 v28 = v71;
    outlined init with take of AST.Conditional.Condition.Kind(v72, &v81);
    __int128 v88 = v28;
    __int128 v66 = *(_OWORD *)&v86[16];
    __int128 v67 = v87;
    __int128 v68 = v28;
    __int128 v62 = v83;
    __int128 v63 = v84;
    __int128 v64 = v85;
    __int128 v65 = *(_OWORD *)v86;
    __int128 v60 = v81;
    __int128 v61 = v82;
    Parser.parseConditionalBranches(start:_:)(v58, &v60, (unint64_t)&v69);
    uint64_t result = outlined release of AST.Group((uint64_t)v70);
    uint64_t v22 = v69;
    goto LABEL_13;
  }

  Parser.lexAbsentFunctionStart()((uint64_t)&v81);
  char v18 = v81;
  if (v81 != 2LL)
  {
    uint64_t v29 = v82;
    uint64_t v30 = *((void *)&v81 + 1);
    uint64_t v31 = swift_allocObject();
    LOBYTE(v81) = v18 & 1;
    *((void *)&v81 + 1) = v30;
    *(void *)&__int128 v82 = v29;
    uint64_t result = Parser.parseAbsentFunctionBody(_:)((uint64_t)&v81, v31 + 16);
    unint64_t v32 = 0xA000000000000000LL;
LABEL_11:
    uint64_t v22 = v31 | v32;
    goto LABEL_13;
  }

  Parser.lexGroupStart()((uint64_t)&v81);
  char v19 = v86[0];
  if (v86[0] != 0xFF)
  {
    __int128 v56 = *(_OWORD *)&v86[8];
    __int128 v55 = v85;
    *((void *)&v57 + 1) = *((void *)&v84 + 1);
    uint64_t v33 = v84;
    uint64_t v34 = *((void *)&v83 + 1);
    uint64_t v35 = v83;
    uint64_t v36 = *((void *)&v82 + 1);
    uint64_t v37 = v82;
    __int128 v54 = v82;
    uint64_t v38 = *((void *)&v81 + 1);
    uint64_t v39 = v81;
    __int128 v53 = v81;
    *(void *)&__int128 v57 = swift_allocObject();
    *(void *)&__int128 v81 = v39;
    *((void *)&v81 + 1) = v38;
    *(void *)&__int128 v82 = v37;
    *((void *)&v82 + 1) = v36;
    *(void *)&__int128 v83 = v35;
    *((void *)&v83 + 1) = v34;
    *(void *)&__int128 v84 = v33;
    *((void *)&v84 + 1) = *((void *)&v57 + 1);
    __int128 v40 = v55;
    __int128 v85 = v55;
    v86[0] = v19;
    *(_OWORD *)&v86[8] = v56;
    Parser.parseGroupBody(start:_:)(v58, (uint64_t)&v81, v57 + 16);
    uint64_t result = outlined consume of Source.Located<AST.Group.Kind>?( v53,  *((uint64_t *)&v53 + 1),  v54,  *((uint64_t *)&v54 + 1),  v35,  v34,  v33,  *((uint64_t *)&v57 + 1),  v40,  *((uint64_t *)&v40 + 1),  v19);
    uint64_t v22 = v57 | 0x2000000000000000LL;
    goto LABEL_13;
  }

  Parser.lexCustomCCStart()(&v81);
  char v20 = v81;
  if (v81 != 2LL)
  {
    uint64_t v41 = v82;
    uint64_t v42 = *((void *)&v81 + 1);
    uint64_t v31 = swift_allocObject();
    LOBYTE(v81) = v20 & 1;
    *((void *)&v81 + 1) = v42;
    *(void *)&__int128 v82 = v41;
    uint64_t result = Parser.parseCustomCharacterClass(_:)((unsigned __int8 *)&v81, (_BYTE *)(v31 + 16));
    unint64_t v32 = 0x9000000000000000LL;
    goto LABEL_11;
  }

  Parser.lexAtom()(v15);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v15, 1LL, v10) == 1)
  {
    uint64_t result = outlined destroy of _ASTParent?(v15, &demangling cache variable for type metadata for AST.Atom?);
    uint64_t v22 = 0xF000000000000007LL;
LABEL_13:
    *uint64_t v59 = v22;
    return result;
  }

  uint64_t v43 = (uint64_t)v14;
  outlined init with take of AST.Atom.Kind(v15, (uint64_t)v14, type metadata accessor for AST.Atom);
  unint64_t v44 = (__int128 *)v16;
  outlined init with copy of AST.Atom((uint64_t)v14, v16, type metadata accessor for AST.Atom.Kind);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  unint64_t v46 = (unint64_t *)v59;
  if (EnumCaseMultiPayload == 13)
  {
    char v47 = *(_BYTE *)(v16 + 16);
    uint64_t v48 = *(void *)(v16 + 24);
    char v49 = *(_BYTE *)(v16 + 48);
    uint64_t v50 = *(void *)(v16 + 56);
    __int128 v81 = *v44;
    LOBYTE(v82) = v47;
    *((void *)&v82 + 1) = v48;
    __int128 v83 = v44[2];
    LOBYTE(v84) = v49;
    *((void *)&v84 + 1) = v50;
    Parser.applySyntaxOptions(of:isScoped:)(&v81);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  else
  {
    outlined destroy of AST.Atom(v16, type metadata accessor for AST.Atom.Kind);
  }

  uint64_t v51 = swift_allocBox();
  uint64_t result = outlined init with take of AST.Atom.Kind(v43, v52, type metadata accessor for AST.Atom);
  *unint64_t v46 = v51 | 0x8000000000000000LL;
  return result;
}

void *Parser.parseConditionalBranches(start:_:)@<X0>( unint64_t a1@<X0>, __int128 *a2@<X1>, unint64_t a3@<X8>)
{
  void (*v36)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  void *v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void v48[2];
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v6 = v3;
  __int128 v9 = a2[7];
  __int128 v55 = a2[6];
  __int128 v56 = v9;
  __int128 v57 = a2[8];
  __int128 v10 = a2[3];
  uint64_t v51 = a2[2];
  uint64_t v52 = v10;
  __int128 v11 = a2[5];
  __int128 v53 = a2[4];
  __int128 v54 = v11;
  __int128 v12 = a2[1];
  char v49 = *a2;
  uint64_t v50 = v12;
  Parser.parseNode()(&v44);
  uint64_t v13 = v44;
  unint64_t v14 = (unint64_t)v44 >> 60;
  uint64_t v43 = (void *)a3;
  if ((unint64_t)v44 >> 60)
  {
    uint64_t v15 = swift_allocObject();
    uint64_t v5 = 0LL;
    uint64_t v16 = 0LL;
    uint64_t v17 = *((void *)v3 + 2);
    *(void *)(v15 + 16) = v17;
    *(void *)(v15 + 24) = v17;
    a3 = v15 | 0xB000000000000000LL;
  }

  else
  {
    char v18 = *(void **)(v44 + 24);
    if (!v18[2]) {
      goto LABEL_17;
    }
    uint64_t v42 = (unint64_t)v44 >> 60;
    char v19 = *(void **)(v44 + 16);
    unint64_t v14 = v19[2];
    if (!v14) {
      goto LABEL_18;
    }
    if (v14 == 1) {
      goto LABEL_19;
    }
    uint64_t v5 = v18[4];
    uint64_t v16 = v18[5];
    uint64_t v4 = v19[4];
    a3 = v19[5];
    if (v14 != 2)
    {
      uint64_t v39 = v18[5];
      __int128 v40 = v18[4];
      uint64_t v41 = a1;
      v48[0] = v44;
      AST.Node._associatedValue.getter();
      uint64_t v20 = v46;
      uint64_t v21 = v47;
      __swift_project_boxed_opaque_existential_1Tm(&v44, v46);
      uint64_t v36 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v21 + 16);
      uint64_t v37 = v4;
      uint64_t v38 = a3;
      swift_retain();
      swift_retain();
      v36(v48, v20, v21);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v44);
      a3 = v48[0];
      uint64_t v4 = v48[1];
      *(void *)&unint64_t v44 = 0LL;
      *((void *)&v44 + 1) = 0xE000000000000000LL;
      _StringGuts.grow(_:)(43LL);
      swift_bridgeObjectRelease();
      *(void *)&unint64_t v44 = 0xD000000000000029LL;
      *((void *)&v44 + 1) = 0x8000000181008DD0LL;
      v22._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v22);
      swift_bridgeObjectRelease();
      uint64_t v5 = *((void *)&v44 + 1);
      a1 = v44;
      uint64_t v3 = (char *)*((void *)v3 + 9);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0) {
        goto LABEL_9;
      }
      goto LABEL_20;
    }

    swift_retain();
    swift_retain();
    swift_release();
    unint64_t v14 = v42;
    uint64_t v13 = v4;
  }

  while (1)
  {
    v27._uint64_t countAndFlagsBits = 41LL;
    v27._uint64_t object = (void *)0xE100000000000000LL;
    uint64_t v3 = v6;
    if (!Parser.tryEat(_:)(v27))
    {
      unint64_t v44 = xmmword_181005F70;
      unint64_t v45 = 0LL;
      unint64_t v46 = 0LL;
      LOBYTE(v47) = 3;
      uint64_t v3 = v6;
      Parser.errorAtCurrentPosition(_:)(&v44);
    }

    uint64_t v28 = swift_allocObject();
    unint64_t v29 = *((void *)v6 + 2);
    if (v29 >> 14 >= a1 >> 14) {
      break;
    }
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v3 + 2) + 1LL,  1,  v3);
LABEL_9:
    unint64_t v24 = *((void *)v3 + 2);
    unint64_t v23 = *((void *)v3 + 3);
    unint64_t v25 = v24 + 1;
    if (v24 >= v23 >> 1)
    {
      uint64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v23 > 1),  v24 + 1,  1,  v3);
      unint64_t v25 = v24 + 1;
      uint64_t v3 = v35;
    }

    *((void *)v3 + 2) = v25;
    uint64_t v26 = &v3[80 * v24];
    v26[32] = 1;
    *((void *)v26 + 5) = a1;
    *((void *)v26 + 6) = v5;
    *((void *)v26 + 7) = a3;
    *((void *)v26 + 8) = v4;
    *((void *)v26 + 9) = v14;
    *((void *)v26 + 10) = 0LL;
    *((void *)v26 + 11) = 0LL;
    *((void *)v26 + 12) = 0LL;
    v26[104] = 5;
    swift_release();
    *((void *)v6 + 9) = v3;
    uint64_t v5 = v40;
    a1 = v41;
    a3 = v38;
    uint64_t v16 = v39;
    unint64_t v14 = v42;
    uint64_t v13 = v37;
  }

  LOBYTE(v48[0]) = v14 != 0;
  *(void *)(v28 + 16) = a1;
  *(void *)(v28 + 24) = v29;
  __int128 v30 = v56;
  *(_OWORD *)(v28 + 128) = v55;
  *(_OWORD *)(v28 + 144) = v30;
  *(_OWORD *)(v28 + 160) = v57;
  __int128 v31 = v52;
  *(_OWORD *)(v28 + 64) = v51;
  *(_OWORD *)(v28 + 80) = v31;
  __int128 v32 = v54;
  *(_OWORD *)(v28 + 96) = v53;
  *(_OWORD *)(v28 + 112) = v32;
  __int128 v33 = v50;
  *(_OWORD *)(v28 + 32) = v49;
  *(_OWORD *)(v28 + 48) = v33;
  *(void *)(v28 + 176) = v13;
  *(void *)(v28 + 184) = v5;
  *(void *)(v28 + 192) = v16;
  *(_BYTE *)(v28 + 200) = v48[0];
  *(void *)(v28 + 208) = a3;
  *uint64_t v43 = v28 | 0x3000000000000000LL;
  return outlined retain of AST.Conditional.Condition( &v49,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of AST.Conditional.Condition.Kind);
}

uint64_t Parser.applySyntaxOptions(of:isScoped:)(__int128 *a1)
{
  __int128 v2 = a1[1];
  __int128 v26 = *a1;
  __int128 v27 = v2;
  __int128 v3 = a1[3];
  __int128 v28 = a1[2];
  __int128 v29 = v3;
  uint64_t v25 = 128LL;
  v24[16] = 3;
  uint64_t result = mapOption #1 (_:_:) in Parser.applySyntaxOptions(of:isScoped:)( &v25,  (uint64_t (*)(_BYTE *))closure #1 in mapOption #2 (_:_:) in Parser.applySyntaxOptions(of:isScoped:)partial apply,  (uint64_t)v24,  (uint64_t)&v26,  v1);
  if ((*(_BYTE *)(v1 + 56) & 0x40) != 0)
  {
    uint64_t v5 = (_BYTE *)(*((void *)&v29 + 1) + 32LL);
    uint64_t v6 = *(void *)(*((void *)&v29 + 1) + 16LL) + 1LL;
    while (--v6)
    {
      uint64_t v7 = v5 + 24;
      int v8 = *v5 & 0xFE;
      v5 += 24;
      if (v8 == 6)
      {
        uint64_t v9 = *((void *)v7 - 2);
        uint64_t v10 = *((void *)v7 - 1);
        uint64_t v11 = *(void *)(v1 + 72);
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v11 + 16) + 1LL,  1,  (char *)v11);
          uint64_t v11 = result;
        }

        unint64_t v12 = *(void *)(v11 + 16);
        unint64_t v13 = *(void *)(v11 + 24);
        unint64_t v14 = v12 + 1;
        if (v12 >= v13 >> 1)
        {
          unint64_t v23 = v12 + 1;
          uint64_t v20 = (char *)v11;
          unint64_t v21 = *(void *)(v11 + 16);
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v13 > 1),  v12 + 1,  1,  v20);
          unint64_t v12 = v21;
          unint64_t v14 = v23;
          uint64_t v11 = result;
        }

        *(void *)(v11 + 16) = v14;
        unint64_t v15 = v11 + 80 * v12;
        *(_BYTE *)(v15 + 32) = 1;
        *(void *)(v15 + 40) = 0xD000000000000036LL;
        *(void *)(v15 + 48) = 0x80000001810089F0LL;
        *(void *)(v15 + 56) = v9;
        *(void *)(v15 + 64) = v10;
        uint64_t v16 = 13LL;
        goto LABEL_17;
      }
    }

    if ((v27 & 1) != 0) {
      return result;
    }
    __int128 v22 = v26;
    uint64_t v11 = *(void *)(v1 + 72);
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v11 + 16) + 1LL,  1,  (char *)v11);
      uint64_t v11 = result;
    }

    unint64_t v18 = *(void *)(v11 + 16);
    unint64_t v17 = *(void *)(v11 + 24);
    unint64_t v19 = v18 + 1;
    if (v18 >= v17 >> 1)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v17 > 1),  v18 + 1,  1,  (char *)v11);
      unint64_t v19 = v18 + 1;
      uint64_t v11 = result;
    }

    *(void *)(v11 + 16) = v19;
    unint64_t v15 = v11 + 80 * v18;
    *(_BYTE *)(v15 + 32) = 1;
    *(void *)(v15 + 40) = 0xD00000000000004BLL;
    *(void *)(v15 + 48) = 0x80000001810089A0LL;
    *(_OWORD *)(v15 + 56) = v22;
    uint64_t v16 = 14LL;
LABEL_17:
    *(void *)(v15 + 72) = v16;
    *(void *)(v15 + 80) = 0LL;
    *(void *)(v15 + 88) = 0LL;
    *(void *)(v15 + 96) = 0LL;
    *(_BYTE *)(v15 + 104) = 36;
    *(void *)(v1 + 72) = v11;
  }

  else
  {
    uint64_t v25 = 3LL;
    return mapOption #1 (_:_:) in Parser.applySyntaxOptions(of:isScoped:)( &v25,  (uint64_t (*)(_BYTE *))specialized implicit closure #3 in Parser.applySyntaxOptions(of:isScoped:),  0LL,  (uint64_t)&v26,  v1);
  }

  return result;
}

uint64_t mapOption #1 (_:_:) in Parser.applySyntaxOptions(of:isScoped:)( uint64_t *a1, uint64_t (*a2)(_BYTE *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *a1;
  outlined init with take of AST.Conditional.Condition?(a4, (uint64_t)v14);
  outlined init with take of AST.Conditional.Condition?((uint64_t)v14, (uint64_t)v15);
  if ((v15[16] & 1) == 0)
  {
    uint64_t v10 = *(void *)(a5 + 56);
    if ((v10 & v9) != 0) {
      *(void *)(a5 + 56) = v10 & ~v9;
    }
  }

  if ((specialized Sequence.contains(where:)(a2, a3, *(void *)(a4 + 24)) & 1) != 0)
  {
    uint64_t v11 = *(void *)(a5 + 56);
    if ((v9 & ~v11) != 0) {
      *(void *)(a5 + 56) = v11 | v9;
    }
  }

  uint64_t result = specialized Sequence.contains(where:)(a2, a3, *(void *)(a4 + 56));
  if ((result & 1) != 0)
  {
    uint64_t v13 = *(void *)(a5 + 56);
    if ((v13 & v9) != 0) {
      *(void *)(a5 + 56) = v13 & ~v9;
    }
  }

  return result;
}

void static SyntaxOptions.extendedSyntax.getter(void *a1@<X8>)
{
  *a1 = 3LL;
}

BOOL specialized implicit closure #3 in Parser.applySyntaxOptions(of:isScoped:)(_BYTE *a1)
{
  return (*a1 & 0xFE) == 6;
}

uint64_t Parser.parseGroupBody(start:_:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void (*v27)(uint64_t *__return_ptr, uint64_t, uint64_t);
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v48;
  uint64_t v49;
  char v50;
  int64_t v51;
  uint64_t v52;
  uint64_t v53;
  Swift::Int v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65[3];
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  Swift::Int v73[2];
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  __int128 v64 = a1;
  uint64_t v12 = *((void *)v4 + 5);
  BOOL v13 = __OFADD__(v12, 1LL);
  uint64_t v14 = v12 + 1;
  if (v13)
  {
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v4 + 2) + 1LL,  1,  v4);
    goto LABEL_21;
  }

  __int128 v3 = v4;
  Swift::Int v7 = *(void *)a2;
  Swift::Int v6 = *(void *)(a2 + 8);
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(a2 + 24);
  uint64_t v16 = *(void *)(a2 + 32);
  uint64_t v15 = *(void *)(a2 + 40);
  uint64_t v17 = *(void *)(a2 + 48);
  uint64_t v18 = *(void *)(a2 + 56);
  uint64_t v19 = *(void *)(a2 + 64);
  uint64_t v20 = *(void *)(a2 + 72);
  int v10 = *(unsigned __int8 *)(a2 + 80);
  __int128 v55 = *(_OWORD *)(a2 + 88);
  *((void *)v4 + 5) = v14;
  __int128 v61 = v15;
  __int128 v60 = v17;
  uint64_t v59 = v18;
  __int128 v57 = v19;
  __int128 v56 = v20;
  if (v10 == 1)
  {
    if (!v6)
    {
LABEL_8:
      uint64_t v21 = *((void *)v4 + 7);
      goto LABEL_11;
    }

    swift_bridgeObjectRetain();
LABEL_7:
    specialized Set._Variant.insert(_:)(v73, v7, v6);
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }

  if (!v10)
  {
    outlined copy of AST.Group.Kind(v7, v6, v8, v9, v16, v15, v17, v18, v19, v20, 0);
    goto LABEL_7;
  }

  uint64_t v21 = *((void *)v4 + 7);
  if (v10 == 2)
  {
    v73[0] = v7;
    v73[1] = v6;
    __int128 v63 = v21;
    __int128 v74 = v8 & 1;
    __int128 v75 = v9;
    __int128 v76 = v16;
    __int128 v77 = v61;
    char v78 = v60 & 1;
    unint64_t v79 = v59;
    v65[0] = 128LL;
    MEMORY[0x1895F8858](a1, a2);
    uint64_t v50 = 3;
    mapOption #1 (_:_:) in Parser.applySyntaxOptions(of:isScoped:)( v65,  (uint64_t (*)(_BYTE *))partial apply for closure #1 in mapOption #2 (_:_:) in Parser.applySyntaxOptions(of:isScoped:),  (uint64_t)&v49,  (uint64_t)v73,  (uint64_t)v4);
    v65[0] = 3LL;
    mapOption #1 (_:_:) in Parser.applySyntaxOptions(of:isScoped:)( v65,  (uint64_t (*)(_BYTE *))specialized implicit closure #3 in Parser.applySyntaxOptions(of:isScoped:),  0LL,  (uint64_t)v73,  (uint64_t)v4);
    uint64_t v21 = v63;
  }

uint64_t Parser.parseAbsentFunctionBody(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void (*v33)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void v43[2];
  uint64_t v6 = v2;
  uint64_t v38 = *(_OWORD *)(a1 + 8);
  if (*(_BYTE *)a1 == 1)
  {
    Parser.parseNode()(&v39);
    uint64_t v8 = 0LL;
    uint64_t v4 = 0LL;
    uint64_t i = 0LL;
    uint64_t v5 = v39;
    goto LABEL_24;
  }

  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v10 = String.subscript.getter();
  uint64_t v8 = v11;
  if ((v10 ^ v12) >> 14)
  {
    uint64_t v3 = Substring.subscript.getter();
    uint64_t v13 = v14;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v3 = 0LL;
    uint64_t v13 = 0LL;
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v13) {
    goto LABEL_12;
  }
  if (v3 != 41 || v13 != 0xE100000000000000LL)
  {
    char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v15 & 1) != 0) {
      goto LABEL_11;
    }
LABEL_12:
    uint64_t v16 = (char *)v6;
    Parser.parseNode()(&v39);
    if ((unint64_t)v39 >> 60)
    {
      uint64_t v8 = 0LL;
      uint64_t v4 = 0LL;
      uint64_t i = 4LL;
      uint64_t v5 = v39;
    }

    else
    {
      uint64_t v17 = *(void **)(v39 + 16);
      unint64_t v18 = v17[2];
      if (!v18) {
        goto LABEL_29;
      }
      uint64_t v19 = *(void **)(v39 + 24);
      if (!v19[2]) {
        goto LABEL_30;
      }
      if (v18 < 2) {
        goto LABEL_31;
      }
      uint64_t v8 = v19[4];
      uint64_t v4 = v19[5];
      uint64_t v5 = v17[4];
      uint64_t v20 = v17[5];
      if (v18 != 2)
      {
        v43[0] = v39;
        uint64_t v37 = v18;
        AST.Node._associatedValue.getter();
        uint64_t v21 = v42;
        uint64_t v35 = v41;
        __swift_project_boxed_opaque_existential_1Tm(&v39, v41);
        __int128 v33 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v21 + 16);
        uint64_t v36 = v20;
        swift_retain();
        swift_retain();
        v33(v43, v35, v21);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v39);
        uint64_t v32 = v43[1];
        uint64_t v34 = v43[0];
        *(void *)&uint64_t v39 = 0LL;
        *((void *)&v39 + 1) = 0xE000000000000000LL;
        _StringGuts.grow(_:)(52LL);
        v22._uint64_t object = (void *)0x8000000181008D70LL;
        v22._uint64_t countAndFlagsBits = 0xD000000000000032LL;
        String.append(_:)(v22);
        v23._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v23);
        swift_bridgeObjectRelease();
        uint64_t v3 = *((void *)&v39 + 1);
        uint64_t v31 = v39;
        uint64_t v16 = *(char **)(v6 + 72);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
          goto LABEL_21;
        }
        goto LABEL_32;
      }

      swift_retain();
      swift_retain();
      swift_release();
      uint64_t i = v20 | 2;
    }

    goto LABEL_24;
  }

  swift_bridgeObjectRelease();
LABEL_11:
  uint64_t v5 = 0LL;
  uint64_t v8 = 0LL;
  uint64_t v4 = 0LL;
  for (uint64_t i = 6LL; ; uint64_t i = v36 | 2)
  {
LABEL_24:
    v28._uint64_t countAndFlagsBits = 41LL;
    v28._uint64_t object = (void *)0xE100000000000000LL;
    uint64_t v16 = (char *)v6;
    uint64_t result = Parser.tryEat(_:)(v28);
    if ((result & 1) == 0)
    {
      uint64_t v39 = xmmword_181005F70;
      __int128 v40 = 0LL;
      uint64_t v41 = 0LL;
      LOBYTE(v42) = 3;
      uint64_t v16 = (char *)v6;
      uint64_t result = Parser.errorAtCurrentPosition(_:)(&v39);
    }

    unint64_t v30 = *(void *)(v6 + 16);
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v16 + 2) + 1LL,  1,  v16);
LABEL_21:
    unint64_t v26 = *((void *)v16 + 2);
    unint64_t v25 = *((void *)v16 + 3);
    if (v26 >= v25 >> 1) {
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v25 > 1),  v26 + 1,  1,  v16);
    }
    *((void *)v16 + 2) = v26 + 1;
    __int128 v27 = &v16[80 * v26];
    v27[32] = 1;
    *((void *)v27 + 5) = v31;
    *((void *)v27 + 6) = v3;
    *((void *)v27 + 7) = v34;
    *((void *)v27 + 8) = v32;
    *((void *)v27 + 9) = v37;
    *((void *)v27 + 10) = 0LL;
    *((void *)v27 + 11) = 0LL;
    *((void *)v27 + 12) = 0LL;
    v27[104] = 7;
    swift_release();
    *(void *)(v6 + 72) = v16;
  }

  *(_OWORD *)a2 = v38;
  *(void *)(a2 + 16) = v5;
  *(void *)(a2 + 24) = v8;
  *(void *)(a2 + 32) = v4;
  *(void *)(a2 + 40) = i;
  *(void *)(a2 + 48) = v38;
  *(void *)(a2 + 56) = v30;
  return result;
}

uint64_t Parser.parseCustomCharacterClass(_:)@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  __int128 v87 = a2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AST.CustomCharacterClass.Member?);
  uint64_t v6 = MEMORY[0x1895F8858](v4, v5);
  unint64_t v8 = (unint64_t)&v84 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v6, v9);
  uint64_t v11 = (char *)&v84 - v10;
  uint64_t v12 = type metadata accessor for AST.CustomCharacterClass.Member(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v15 = MEMORY[0x1895F8858](v12, v14);
  uint64_t v17 = (char *)&v84 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = MEMORY[0x1895F8858](v15, v18);
  uint64_t v98 = (uint64_t)&v84 - v20;
  uint64_t v22 = MEMORY[0x1895F8858](v19, v21);
  uint64_t v24 = (uint64_t)&v84 - v23;
  uint64_t v26 = MEMORY[0x1895F8858](v22, v25);
  uint64_t v101 = (uint64_t)&v84 - v27;
  uint64_t v29 = MEMORY[0x1895F8858](v26, v28);
  uint64_t v93 = (char *)&v84 - v30;
  uint64_t v32 = MEMORY[0x1895F8858](v29, v31);
  uint64_t v92 = (uint64_t)&v84 - v33;
  uint64_t v35 = MEMORY[0x1895F8858](v32, v34);
  uint64_t v37 = (char *)&v84 - v36;
  MEMORY[0x1895F8858](v35, v38);
  uint64_t v97 = (uint64_t)&v84 - v39;
  int v85 = *a1;
  unint64_t v40 = *((void *)a1 + 1);
  uint64_t v89 = *((void *)a1 + 2);
  unint64_t v90 = v40;
  int v86 = *(unsigned __int8 *)(v2 + 32);
  *(_BYTE *)(v2 + 32) = 1;
  uint64_t v41 = (void *)MEMORY[0x18961AFE8];
  into._rawValue = (void *)MEMORY[0x18961AFE8];
  Parser.parseCCCMember()((uint64_t)v11);
  unint64_t v102 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v102(v11, 1LL, v12) != 1)
  {
    uint64_t v42 = type metadata accessor for AST.CustomCharacterClass.Member;
    unint64_t v95 = v11;
    uint64_t v96 = v37;
    do
    {
      uint64_t v43 = (uint64_t)v11;
      uint64_t v44 = v97;
      outlined init with take of AST.Atom.Kind(v43, v97, v42);
      unint64_t v45 = v42;
      outlined init with take of AST.Atom.Kind(v44, (uint64_t)v37, v42);
      rawValue = into._rawValue;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        rawValue = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  rawValue[2] + 1LL,  1,  rawValue);
      }
      unint64_t v48 = rawValue[2];
      unint64_t v47 = rawValue[3];
      if (v48 >= v47 >> 1) {
        rawValue = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v47 > 1,  v48 + 1,  1,  rawValue);
      }
      rawValue[2] = v48 + 1;
      uint64_t v37 = v96;
      outlined init with take of AST.Atom.Kind( (uint64_t)v96,  (uint64_t)rawValue + ((*(unsigned __int8 *)(v13 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))
      + *(void *)(v13 + 72) * v48,
        v45);
      into._rawValue = rawValue;
      uint64_t v42 = v45;
      Parser.parsePotentialCCRange(into:)(&into);
      uint64_t v11 = v95;
      Parser.parseCCCMember()((uint64_t)v95);
    }

    while (v102(v11, 1LL, v12) != 1);
    uint64_t v41 = into._rawValue;
  }

  outlined destroy of _ASTParent?( (uint64_t)v11,  &demangling cache variable for type metadata for AST.CustomCharacterClass.Member?);
  uint64_t v49 = v41[2];
  swift_bridgeObjectRetain();
  uint64_t v97 = v49;
  if (v49)
  {
    unint64_t v50 = 0LL;
    uint64_t v51 = (char *)type metadata accessor for AST.CustomCharacterClass.Member;
    do
    {
      if (v50 >= v41[2]) {
        goto LABEL_45;
      }
      uint64_t v52 = v92;
      outlined init with copy of AST.Atom( (uint64_t)v41 + ((*(unsigned __int8 *)(v13 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))
      + *(void *)(v13 + 72) * v50,
        v92,
        type metadata accessor for AST.CustomCharacterClass.Member);
      uint64_t v53 = v52;
      uint64_t v54 = (uint64_t)v93;
      outlined init with take of AST.Atom.Kind( v53,  (uint64_t)v93,  type metadata accessor for AST.CustomCharacterClass.Member);
      if (swift_getEnumCaseMultiPayload() != 4)
      {
        swift_bridgeObjectRelease();
        outlined destroy of AST.Atom(v54, type metadata accessor for AST.CustomCharacterClass.Member);
        goto LABEL_19;
      }

      ++v50;
      outlined destroy of AST.Atom(v54, type metadata accessor for AST.CustomCharacterClass.Member);
    }

    while (v97 != v50);
  }

  swift_bridgeObjectRelease();
  uint64_t v51 = *(char **)(v2 + 72);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_47;
  }
  while (1)
  {
    unint64_t v56 = *((void *)v51 + 2);
    unint64_t v55 = *((void *)v51 + 3);
    if (v56 >= v55 >> 1) {
      uint64_t v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v55 > 1),  v56 + 1,  1,  v51);
    }
    *((void *)v51 + 2) = v56 + 1;
    __int128 v57 = &v51[80 * v56];
    v57[32] = 1;
    *((void *)v57 + 5) = 0xD000000000000027LL;
    *((void *)v57 + 6) = 0x8000000181008BF0LL;
    uint64_t v58 = v89;
    *((void *)v57 + 7) = v90;
    *((void *)v57 + 8) = v58;
    *((void *)v57 + 9) = 7LL;
    *((void *)v57 + 10) = 0LL;
    *((void *)v57 + 11) = 0LL;
    *((void *)v57 + 12) = 0LL;
    v57[104] = 36;
    *(void *)(v2 + 72) = v51;
LABEL_19:
    Parser.lexCustomCCBinOp()();
    uint64_t rawValue_low = LOBYTE(v104[0]._rawValue);
    if (LOBYTE(v104[0]._rawValue) == 3LL) {
      break;
    }
    __int128 v68 = (char *)v104[1]._rawValue;
    uint64_t v67 = v105;
    unint64_t v88 = 0x8000000181008BF0LL;
    __int128 v91 = xmmword_181005EB0;
    uint64_t v51 = (char *)type metadata accessor for AST.CustomCharacterClass.Member;
    uint64_t v92 = v24;
    uint64_t v93 = v17;
    unint64_t v94 = v8;
    uint64_t v99 = v12;
    uint64_t v100 = v13;
    while (1)
    {
      unint64_t v95 = v68;
      uint64_t v96 = (char *)v67;
      uint64_t v97 = rawValue_low;
      __int128 v73 = (void *)MEMORY[0x18961AFE8];
      v104[0]._rawValue = (void *)MEMORY[0x18961AFE8];
      Parser.parseCCCMember()(v8);
      if (v102((char *)v8, 1LL, v12) != 1)
      {
        do
        {
          uint64_t v74 = v101;
          outlined init with take of AST.Atom.Kind(v8, v101, type metadata accessor for AST.CustomCharacterClass.Member);
          outlined init with take of AST.Atom.Kind(v74, v24, type metadata accessor for AST.CustomCharacterClass.Member);
          __int128 v75 = v104[0]._rawValue;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            __int128 v75 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v75[2] + 1LL,  1,  v75);
          }
          unint64_t v77 = v75[2];
          unint64_t v76 = v75[3];
          if (v77 >= v76 >> 1) {
            __int128 v75 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v76 > 1,  v77 + 1,  1,  v75);
          }
          v75[2] = v77 + 1;
          outlined init with take of AST.Atom.Kind( v24,  (uint64_t)v75 + ((*(unsigned __int8 *)(v13 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))
          + *(void *)(v13 + 72) * v77,
            type metadata accessor for AST.CustomCharacterClass.Member);
          v104[0]._rawValue = v75;
          Parser.parsePotentialCCRange(into:)(v104);
          Parser.parseCCCMember()(v8);
        }

        while (v102((char *)v8, 1LL, v12) != 1);
        __int128 v73 = v104[0]._rawValue;
      }

      outlined destroy of _ASTParent?( v8,  &demangling cache variable for type metadata for AST.CustomCharacterClass.Member?);
      uint64_t v12 = v73[2];
      swift_bridgeObjectRetain();
      if (v12) {
        break;
      }
LABEL_39:
      swift_bridgeObjectRelease();
      unint64_t v79 = *(char **)(v2 + 72);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v79 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v79 + 2) + 1LL,  1,  v79);
      }
      uint64_t v12 = v99;
      uint64_t v13 = v100;
      unint64_t v81 = *((void *)v79 + 2);
      unint64_t v80 = *((void *)v79 + 3);
      if (v81 >= v80 >> 1) {
        unint64_t v79 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v80 > 1),  v81 + 1,  1,  v79);
      }
      unint64_t v8 = v94;
      *((void *)v79 + 2) = v81 + 1;
      __int128 v82 = &v79[80 * v81];
      v82[32] = 1;
      *((void *)v82 + 5) = 0xD000000000000027LL;
      unint64_t v83 = v90;
      *((void *)v82 + 6) = v88;
      *((void *)v82 + 7) = v83;
      *((void *)v82 + 8) = v89;
      *((void *)v82 + 9) = 7LL;
      *((void *)v82 + 10) = 0LL;
      *((void *)v82 + 11) = 0LL;
      *((void *)v82 + 12) = 0LL;
      v82[104] = 36;
      *(void *)(v2 + 72) = v79;
      unint64_t v78 = (*(unsigned __int8 *)(v13 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
LABEL_26:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AST.CustomCharacterClass.Member>);
      uint64_t v69 = (_OWORD *)swift_allocObject();
      v69[1] = v91;
      uint64_t v70 = (char *)v69 + v78;
      __int128 v71 = v104[0]._rawValue;
      *(Swift::OpaquePointer *)uint64_t v70 = into;
      v70[8] = v97;
      uint64_t v72 = (uint64_t)v96;
      *((void *)v70 + 2) = v95;
      *((void *)v70 + 3) = v72;
      *((void *)v70 + 4) = v71;
      swift_storeEnumTagMultiPayload();
      into._rawValue = v69;
      Parser.lexCustomCCBinOp()();
      uint64_t rawValue_low = LOBYTE(v104[0]._rawValue);
      __int128 v68 = (char *)v104[1]._rawValue;
      uint64_t v67 = v105;
      uint64_t v24 = v92;
      uint64_t v17 = v93;
      if (LOBYTE(v104[0]._rawValue) == 3LL) {
        goto LABEL_20;
      }
    }

    unint64_t v8 = 0LL;
    while (v8 < v73[2])
    {
      unint64_t v78 = (*(unsigned __int8 *)(v100 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v100 + 80);
      uint64_t v24 = *(void *)(v100 + 72);
      uint64_t v13 = v98;
      outlined init with copy of AST.Atom( (uint64_t)v73 + v78 + v24 * v8,  v98,  type metadata accessor for AST.CustomCharacterClass.Member);
      outlined init with take of AST.Atom.Kind( v13,  (uint64_t)v17,  type metadata accessor for AST.CustomCharacterClass.Member);
      if (swift_getEnumCaseMultiPayload() != 4)
      {
        swift_bridgeObjectRelease();
        outlined destroy of AST.Atom((uint64_t)v17, type metadata accessor for AST.CustomCharacterClass.Member);
        uint64_t v12 = v99;
        uint64_t v13 = v100;
        unint64_t v8 = v94;
        goto LABEL_26;
      }

      ++v8;
      outlined destroy of AST.Atom((uint64_t)v17, type metadata accessor for AST.CustomCharacterClass.Member);
      if (v12 == v8) {
        goto LABEL_39;
      }
    }

    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    uint64_t v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v51 + 2) + 1LL,  1,  v51);
  }

uint64_t Parser.parseCCCMember()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AST.Atom?);
  MEMORY[0x1895F8858](v4, v5);
  unint64_t v45 = &v36[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v7 = type metadata accessor for AST.Atom(0LL);
  uint64_t v43 = *(void *)(v7 - 8);
  uint64_t v44 = v7;
  MEMORY[0x1895F8858](v7, v8);
  uint64_t v42 = &v36[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v10 = *v1;
  uint64_t v11 = v2[1];
  uint64_t v12 = v2[2];
  uint64_t v13 = v2[3];
  swift_bridgeObjectRetain();
  uint64_t v14 = String.subscript.getter();
  unint64_t v16 = v15;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v14 ^ v16) < 0x4000) {
    goto LABEL_14;
  }
  uint64_t v41 = a1;
  int v40 = *((unsigned __int8 *)v2 + 32);
  uint64_t v17 = v2[5];
  uint64_t v18 = v2[6];
  uint64_t v38 = v2[7];
  uint64_t v39 = v17;
  int v37 = *((unsigned __int8 *)v2 + 64);
  uint64_t v19 = v2[9];
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v20 = String.subscript.getter();
  if ((v20 ^ v21) >> 14)
  {
    uint64_t v22 = Substring.subscript.getter();
    uint64_t v23 = v24;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v22 = 0LL;
    uint64_t v23 = 0LL;
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a1 = v41;
  if (v23)
  {
    if (v22 == 93 && v23 == 0xE100000000000000LL)
    {
      swift_bridgeObjectRelease();
LABEL_14:
      uint64_t v27 = type metadata accessor for AST.CustomCharacterClass.Member(0LL);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56LL))( a1,  1LL,  1LL,  v27);
    }

    char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v25 & 1) != 0) {
      goto LABEL_14;
    }
  }

  uint64_t v48 = v10;
  *(void *)uint64_t v49 = v11;
  *(void *)&v49[8] = v12;
  *(void *)&v49[16] = v13;
  LOBYTE(v50) = v40;
  *((void *)&v50 + 1) = v39;
  uint64_t v51 = v18;
  uint64_t v52 = v38;
  char v53 = v37;
  uint64_t v54 = v19;
  Parser.peekCCBinOp()();
  if (v46[0] != 3) {
    goto LABEL_14;
  }
  Parser.lexCustomCCStart()(&v48);
  if (v48 != 2LL)
  {
    v46[0] = v48 & 1;
    __int128 v47 = *(_OWORD *)v49;
    Parser.parseCustomCharacterClass(_:)(&v48, v46);
    uint64_t v29 = *(void *)&v49[16];
    *(_BYTE *)a1 = v48;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)v49;
    *(void *)(a1 + 24) = v29;
    *(_OWORD *)(a1 + 32) = v50;
    uint64_t v30 = type metadata accessor for AST.CustomCharacterClass.Member(0LL);
LABEL_16:
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56LL))( a1,  0LL,  1LL,  v30);
  }

  Parser.lexQuote()((void *(*)(uint64_t *__return_ptr, uint64_t))closure #1 in Parser.lexQuote(), &v48);
  uint64_t v26 = *(void *)v49;
  if (*(void *)v49
    || (Parser.lexQuote()( (void *(*)(uint64_t *__return_ptr, uint64_t))closure #1 in Parser.lexComment(),  &v48),  (uint64_t v26 = *(void *)v49) != 0)
    || (uint64_t v33 = (uint64_t)v45, (v2[7] & 1) != 0)
    && (specialized Parser.tryEatPrefix(maxLength:_:)( 0LL,  1,  v2,  (uint64_t (*)(uint64_t, void, void *))specialized Source.peekPrefix(maxLength:_:),  &v48),  (uint64_t v26 = *(void *)v49) != 0))
  {
    __int128 v31 = *(_OWORD *)&v49[8];
    *(void *)a1 = v48;
    *(void *)(a1 + 8) = v26;
    *(_OWORD *)(a1 + 16) = v31;
    uint64_t v32 = type metadata accessor for AST.CustomCharacterClass.Member(0LL);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56LL))( a1,  0LL,  1LL,  v32);
  }

  Parser.lexAtom()(v33);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v33, 1LL, v44) != 1)
  {
    uint64_t v35 = v42;
    outlined init with take of AST.Atom.Kind(v33, (uint64_t)v42, type metadata accessor for AST.Atom);
    outlined init with take of AST.Atom.Kind((uint64_t)v35, a1, type metadata accessor for AST.Atom);
    uint64_t v30 = type metadata accessor for AST.CustomCharacterClass.Member(0LL);
    goto LABEL_16;
  }

  outlined destroy of _ASTParent?(v33, &demangling cache variable for type metadata for AST.Atom?);
  uint64_t v34 = type metadata accessor for AST.CustomCharacterClass.Member(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56LL))( a1,  1LL,  1LL,  v34);
}

Swift::Void __swiftcall Parser.parsePotentialCCRange(into:)(Swift::OpaquePointer *into)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AST.Atom?);
  uint64_t v6 = MEMORY[0x1895F8858](v4, v5);
  uint64_t v8 = (char *)&v184 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v6, v9);
  uint64_t v11 = (char *)&v184 - v10;
  uint64_t v12 = type metadata accessor for AST.Atom(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v15 = MEMORY[0x1895F8858](v12, v14);
  uint64_t v17 = (char *)&v184 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v15, v18);
  uint64_t v200 = (uint64_t)&v184 - v19;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AST.CustomCharacterClass.Member?);
  MEMORY[0x1895F8858](v20, v21);
  uint64_t v201 = (uint64_t)&v184 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v213 = *(void *)(v23 - 8);
  *(void *)&__int128 v214 = v23;
  MEMORY[0x1895F8858](v23, v24);
  unint64_t v212 = (Swift::OpaquePointer *)((char *)&v184 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  unint64_t v26 = type metadata accessor for AST.CustomCharacterClass.Member(0LL);
  uint64_t v28 = MEMORY[0x1895F8858](v26, v27);
  uint64_t v30 = MEMORY[0x1895F8858](v28, v29);
  uint64_t v32 = MEMORY[0x1895F8858](v30, v31);
  uint64_t v34 = MEMORY[0x1895F8858](v32, v33);
  MEMORY[0x1895F8858](v34, v35);
  uint64_t v38 = MEMORY[0x1895F8858]((char *)&v184 - v36, v37);
  BOOL v210 = (uint64_t *)((char *)&v184 - v39);
  uint64_t v41 = MEMORY[0x1895F8858](v38, v40);
  uint64_t v43 = MEMORY[0x1895F8858](v41, v42);
  unint64_t v45 = (uint64_t *)((char *)&v184 - v44);
  uint64_t v47 = MEMORY[0x1895F8858](v43, v46);
  uint64_t v49 = (char *)&v184 - v48;
  uint64_t v51 = MEMORY[0x1895F8858](v47, v50);
  rawValue = into->_rawValue;
  uint64_t v60 = *((void *)into->_rawValue + 2);
  if (!v60) {
    return;
  }
  unint64_t v199 = v54;
  uint64_t v195 = v52;
  uint64_t v193 = v51;
  uint64_t v191 = v13;
  BOOL v192 = v11;
  unint64_t v196 = v12;
  unint64_t v190 = v8;
  uint64_t v197 = v58;
  uint64_t v198 = v57;
  uint64_t v189 = v17;
  uint64_t v188 = v56;
  unint64_t v61 = (*(unsigned __int8 *)(v53 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80);
  uint64_t v194 = v53;
  uint64_t v62 = *(void *)(v53 + 72);
  unint64_t v63 = (char *)&v184 - v55;
  outlined init with copy of AST.Atom( (uint64_t)rawValue + v61 + v62 * (v60 - 1),  (uint64_t)&v184 - v55,  type metadata accessor for AST.CustomCharacterClass.Member);
  outlined init with copy of AST.Atom( (uint64_t)v63,  (uint64_t)v49,  type metadata accessor for AST.CustomCharacterClass.Member);
  if (swift_getEnumCaseMultiPayload() == 4)
  {
    outlined destroy of AST.Atom((uint64_t)v63, type metadata accessor for AST.CustomCharacterClass.Member);
    uint64_t v64 = (uint64_t)v49;
    goto LABEL_44;
  }

  Swift::String v187 = v63;
  outlined destroy of AST.Atom((uint64_t)v49, type metadata accessor for AST.CustomCharacterClass.Member);
  uint64_t v186 = *((void *)into->_rawValue + 2);
  uint64_t v211 = v2;
  unint64_t v206 = into;
  unint64_t v208 = v26;
  unint64_t v205 = v61;
  uint64_t v207 = v62;
  BOOL v202 = v45;
  while (1)
  {
    unint64_t v65 = *(void *)(v2 + 16);
    closure #1 in Parser.lexComment()(v2, &v216);
    uint64_t v66 = v217;
    if (!v217) {
      break;
    }
    unint64_t v67 = *(void *)(v2 + 16);
    if (v67 >> 14 < v65 >> 14)
    {
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
      goto LABEL_129;
    }

    uint64_t v68 = v216;
LABEL_36:
    *unint64_t v45 = v68;
    v45[1] = v66;
    v45[2] = v65;
    v45[3] = v67;
    swift_storeEnumTagMultiPayload();
    unint64_t v94 = into->_rawValue;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v94 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v94[2] + 1LL,  1,  v94);
    }
    unint64_t v96 = v94[2];
    unint64_t v95 = v94[3];
    if (v96 >= v95 >> 1) {
      unint64_t v94 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v95 > 1,  v96 + 1,  1,  v94);
    }
    v94[2] = v96 + 1;
    outlined init with take of AST.Atom.Kind( (uint64_t)v45,  (uint64_t)v94 + v61 + v96 * v62,  type metadata accessor for AST.CustomCharacterClass.Member);
    into->_rawValue = v94;
  }

  if ((*(_BYTE *)(v2 + 56) & 1) == 0) {
    goto LABEL_42;
  }
  unint64_t v61 = *(void *)(v2 + 8);
  uint64_t v69 = *(Swift::OpaquePointer **)(v2 + 16);
  swift_bridgeObjectRetain();
  unint64_t v209 = (unint64_t)v69;
  unint64_t v70 = String.subscript.getter();
  unint64_t v26 = v71;
  unint64_t v65 = v72;
  swift_bridgeObjectRelease();
  if (v26 >> 14 < v70 >> 14) {
    goto LABEL_128;
  }
  unint64_t v73 = Substring.subscript.getter();
  __int128 v75 = v74;
  unint64_t v61 = v76;
  unint64_t v26 = v77;
  swift_bridgeObjectRelease();
  uint64_t v62 = (unint64_t)v75 >> 14;
  unint64_t v204 = v73 >> 14;
  unint64_t v78 = (Swift::OpaquePointer *)(v73 >> 14);
  do
  {
    uint64_t v79 = Substring.subscript.getter();
    if ((v80 & 0x2000000000000000LL) != 0) {
      uint64_t v81 = HIBYTE(v80) & 0xF;
    }
    else {
      uint64_t v81 = v79 & 0xFFFFFFFFFFFFLL;
    }
    if (!v81)
    {
      __break(1u);
LABEL_115:
      uint64_t v62 = v207;
LABEL_116:
      swift_unknownObjectRelease();
      unint64_t v159 = v65;
      __int128 v160 = v206;
      specialized RangeReplaceableCollection<>.removeLast(_:)(v159);
      uint64_t v161 = v188;
      outlined init with take of AST.Atom.Kind(v200, v188, type metadata accessor for AST.Atom);
      __int128 v162 = (int *)type metadata accessor for AST.CustomCharacterClass.Range(0LL);
      outlined init with take of AST.Atom.Kind((uint64_t)v189, v161 + v162[6], type metadata accessor for AST.Atom);
      __int128 v163 = (uint64_t **)(v161 + v162[5]);
      uint64_t v164 = (uint64_t *)v185;
      *__int128 v163 = v202;
      v163[1] = v164;
      *(void *)(v161 + v162[7]) = v75;
      swift_storeEnumTagMultiPayload();
      uint64_t v165 = v160->_rawValue;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v165 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v165[2] + 1LL,  1,  v165);
      }
      uint64_t v166 = v211;
      unint64_t v167 = v205;
      unint64_t v169 = v165[2];
      unint64_t v168 = v165[3];
      if (v169 >= v168 >> 1) {
        uint64_t v165 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v168 > 1,  v169 + 1,  1,  v165);
      }
      v165[2] = v169 + 1;
      outlined init with take of AST.Atom.Kind( v188,  (uint64_t)v165 + v167 + v169 * v62,  type metadata accessor for AST.CustomCharacterClass.Member);
      v160->_rawValue = v165;
      uint64_t v170 = *(void *)(v166 + 8);
      char v171 = *(_BYTE *)(v166 + 32);
      uint64_t v172 = *(void *)(v166 + 40);
      uint64_t v173 = *(void *)(v166 + 48);
      uint64_t v174 = *(void *)(v166 + 56);
      char v175 = *(_BYTE *)(v166 + 64);
      BOOL v176 = (char **)(v166 + 72);
      uint64_t v177 = *(void *)(v166 + 72);
      uint64_t v216 = *(void *)v166;
      uint64_t v217 = v170;
      __int128 v218 = *(_OWORD *)(v166 + 16);
      char v219 = v171;
      uint64_t v220 = v172;
      uint64_t v221 = v173;
      uint64_t v222 = v174;
      char v223 = v175;
      uint64_t v224 = v177;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      closure #1 in Parser.canLexDotNetCharClassSubtraction()((uint64_t)&v216, (unint64_t *)&v225);
      uint64_t v178 = v224;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v215 = v178;
      Diagnostics.appendNewFatalErrors(from:)((_RegexParser::Diagnostics)&v215);
      swift_bridgeObjectRelease();
      if ((v226 & 1) == 0)
      {
        __int128 v214 = v225;
        uint64_t v179 = *v176;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v179 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v179 + 2) + 1LL,  1,  v179);
        }
        unint64_t v181 = *((void *)v179 + 2);
        unint64_t v180 = *((void *)v179 + 3);
        if (v181 >= v180 >> 1) {
          uint64_t v179 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v180 > 1),  v181 + 1,  1,  v179);
        }
        *((void *)v179 + 2) = v181 + 1;
        char v182 = &v179[80 * v181];
        v182[32] = 1;
        *((void *)v182 + 5) = 0xD000000000000035LL;
        *((void *)v182 + 6) = 0x8000000181008B80LL;
        *(_OWORD *)(v182 + 56) = v214;
        *((void *)v182 + 9) = 17LL;
        *((void *)v182 + 10) = 0LL;
        *((void *)v182 + 11) = 0LL;
        *((void *)v182 + 12) = 0LL;
        v182[104] = 36;
        *BOOL v176 = v179;
      }

      return;
    }

    if ((v80 & 0x1000000000000000LL) != 0)
    {
      _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }

    else
    {
      if ((v80 & 0x2000000000000000LL) != 0)
      {
        uint64_t v216 = v79;
        uint64_t v217 = v80 & 0xFFFFFFFFFFFFFFLL;
      }

      else if ((v79 & 0x1000000000000000LL) == 0)
      {
        _StringObject.sharedUTF8.getter();
      }

      _decodeScalar(_:startingAt:)();
    }

    unint64_t v65 = (unint64_t)v212;
    Unicode.Scalar.properties.getter();
    Swift::OpaquePointer into = (Swift::OpaquePointer *)Unicode.Scalar.Properties.isPatternWhitespace.getter();
    swift_bridgeObjectRelease();
    (*(void (**)(unint64_t, void))(v213 + 8))(v65, v214);
    unint64_t v78 = (Swift::OpaquePointer *)((unint64_t)Substring.index(after:)() >> 14);
  }

  while (v78 != (Swift::OpaquePointer *)v62);
  unint64_t v78 = (Swift::OpaquePointer *)((unint64_t)v75 >> 14);
LABEL_27:
  BOOL v82 = (unint64_t)v78 >= v204;
  uint64_t v2 = v211;
  if (!v82)
  {
LABEL_129:
    __break(1u);
    goto LABEL_130;
  }

LABEL_135:
  __break(1u);
  while (2)
  {
    __break(1u);
LABEL_137:
    __break(1u);
LABEL_138:
    unint64_t v65 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v65 + 16) + 1LL,  1,  (void *)v65);
LABEL_46:
    unint64_t v103 = *(void *)(v65 + 16);
    unint64_t v102 = *(void *)(v65 + 24);
    unint64_t v104 = v199;
    if (v103 >= v102 >> 1)
    {
      size_t v183 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v102 > 1,  v103 + 1,  1,  (void *)v65);
      unint64_t v104 = v199;
      unint64_t v65 = v183;
    }

    *(void *)(v65 + 16) = v103 + 1;
    uint64_t v105 = v65 + v61 + v103 * v62;
    uint64_t v106 = (uint64_t)v104;
    while (2)
    {
      outlined init with take of AST.Atom.Kind(v106, v105, type metadata accessor for AST.CustomCharacterClass.Member);
      into->_rawValue = (void *)v65;
      unint64_t v65 = *(void *)(v2 + 16);
      closure #1 in Parser.lexComment()(v2, &v216);
      uint64_t v107 = v217;
      if (v217)
      {
        unint64_t v108 = *(void *)(v2 + 16);
        if (v108 >> 14 < v65 >> 14) {
          goto LABEL_131;
        }
        uint64_t v109 = v216;
LABEL_80:
        unint64_t v130 = v210;
        *BOOL v210 = v109;
        v130[1] = v107;
        v130[2] = v65;
        v130[3] = v108;
        swift_storeEnumTagMultiPayload();
        unint64_t v65 = (unint64_t)into->_rawValue;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v65 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v65 + 16) + 1LL,  1,  (void *)v65);
        }
        unint64_t v132 = *(void *)(v65 + 16);
        unint64_t v131 = *(void *)(v65 + 24);
        if (v132 >= v131 >> 1) {
          unint64_t v65 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v131 > 1,  v132 + 1,  1,  (void *)v65);
        }
        *(void *)(v65 + 16) = v132 + 1;
        uint64_t v105 = v65 + v61 + v132 * v62;
        uint64_t v106 = (uint64_t)v210;
        continue;
      }

      break;
    }

    if ((*(_BYTE *)(v2 + 56) & 1) == 0) {
      goto LABEL_86;
    }
    Swift::OpaquePointer into = *(Swift::OpaquePointer **)(v2 + 16);
    swift_bridgeObjectRetain();
    unint64_t v110 = String.subscript.getter();
    unint64_t v61 = v111;
    unint64_t v65 = v112;
    swift_bridgeObjectRelease();
    if (v61 >> 14 < v110 >> 14) {
      goto LABEL_132;
    }
    unint64_t v209 = (unint64_t)into;
    unint64_t v113 = Substring.subscript.getter();
    unint64_t v61 = v114;
    uint64_t v62 = (uint64_t)v115;
    swift_bridgeObjectRelease();
    unint64_t v26 = v61 >> 14;
    if (v113 >> 14 != v61 >> 14)
    {
      unint64_t v204 = v113 >> 14;
      uint64_t v2 = v113 >> 14;
      while (1)
      {
        uint64_t v116 = Substring.subscript.getter();
        if ((v117 & 0x2000000000000000LL) != 0) {
          uint64_t v118 = HIBYTE(v117) & 0xF;
        }
        else {
          uint64_t v118 = v116 & 0xFFFFFFFFFFFFLL;
        }
        if (!v118)
        {
          __break(1u);
          goto LABEL_127;
        }

        if ((v117 & 0x1000000000000000LL) != 0)
        {
          _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
        }

        else
        {
          if ((v117 & 0x2000000000000000LL) != 0)
          {
            uint64_t v216 = v116;
            uint64_t v217 = v117 & 0xFFFFFFFFFFFFFFLL;
          }

          else if ((v116 & 0x1000000000000000LL) == 0)
          {
            _StringObject.sharedUTF8.getter();
          }

          _decodeScalar(_:startingAt:)();
        }

        unint64_t v65 = (unint64_t)v212;
        Unicode.Scalar.properties.getter();
        Swift::OpaquePointer into = (Swift::OpaquePointer *)Unicode.Scalar.Properties.isPatternWhitespace.getter();
        swift_bridgeObjectRelease();
        (*(void (**)(unint64_t, void))(v213 + 8))(v65, v214);
        uint64_t v2 = (unint64_t)Substring.index(after:)() >> 14;
        if (v2 == v26)
        {
          uint64_t v2 = v61 >> 14;
          break;
        }
      }

      BOOL v82 = v2 >= v204;
      uint64_t v2 = v211;
      if (v82) {
        goto LABEL_73;
      }
      goto LABEL_133;
    }

LABEL_73:
    uint64_t v119 = Substring.subscript.getter();
    unint64_t v121 = v120;
    unint64_t v61 = v122;
    unint64_t v65 = v123;
    swift_bridgeObjectRelease();
    if ((v119 ^ v121) >= 0x4000)
    {
      if (Substring.distance(from:to:)() >= 1)
      {
        unint64_t v124 = *(void *)(v211 + 24);
        swift_bridgeObjectRetain();
        String.subscript.getter();
        unint64_t v204 = v125;
        uint64_t v203 = v126;
        unint64_t v26 = v127;
        uint64_t v2 = v211;
        swift_bridgeObjectRelease();
        uint64_t v62 = Substring.index(_:offsetBy:limitedBy:)();
        Swift::OpaquePointer into = v128;
        swift_bridgeObjectRelease();
        if ((into & 1) == 0)
        {
          *(void *)(v2 + 16) = v62;
          *(void *)(v2 + 24) = v124;
        }
      }

      uint64_t v109 = MEMORY[0x186E052CC](v119, v121, v61, v65);
      uint64_t v107 = v129;
      swift_bridgeObjectRelease();
      unint64_t v108 = *(void *)(v2 + 16);
      unint64_t v65 = v209;
      uint64_t v62 = v207;
      if (v108 >> 14 < v209 >> 14) {
        goto LABEL_134;
      }
      Swift::OpaquePointer into = v206;
      unint64_t v26 = v208;
      unint64_t v61 = v205;
      if (!v107) {
        goto LABEL_86;
      }
      goto LABEL_80;
    }

    break;
  }

  swift_bridgeObjectRelease();
  Swift::OpaquePointer into = v206;
  unint64_t v26 = v208;
  unint64_t v61 = v205;
  uint64_t v62 = v207;
LABEL_86:
  uint64_t v133 = v201;
  Parser.parseCCCMember()(v201);
  if ((*(unsigned int (**)(uint64_t, uint64_t, unint64_t))(v194 + 48))(v133, 1LL, v26) == 1)
  {
    outlined destroy of AST.Atom((uint64_t)v187, type metadata accessor for AST.CustomCharacterClass.Member);
    uint64_t v134 = &demangling cache variable for type metadata for AST.CustomCharacterClass.Member?;
    goto LABEL_97;
  }

  uint64_t v135 = v193;
  outlined init with take of AST.Atom.Kind(v133, v193, type metadata accessor for AST.CustomCharacterClass.Member);
  outlined init with copy of AST.Atom(v135, v195, type metadata accessor for AST.CustomCharacterClass.Member);
  uint64_t v136 = into->_rawValue;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v136 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v136[2] + 1LL,  1,  v136);
  }
  unint64_t v138 = v136[2];
  unint64_t v137 = v136[3];
  if (v138 >= v137 >> 1) {
    uint64_t v136 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v137 > 1,  v138 + 1,  1,  v136);
  }
  v136[2] = v138 + 1;
  outlined init with take of AST.Atom.Kind( v195,  (uint64_t)v136 + v61 + v138 * v62,  type metadata accessor for AST.CustomCharacterClass.Member);
  into->_rawValue = v136;
  uint64_t v133 = (uint64_t)v192;
  uint64_t v139 = (uint64_t)v187;
  makeOperand #1 (_:isLHS:) in Parser.parsePotentialCCRange(into:)((uint64_t)v187);
  outlined destroy of AST.Atom(v139, type metadata accessor for AST.CustomCharacterClass.Member);
  unint64_t v140 = *(unsigned int (**)(uint64_t, uint64_t, unint64_t))(v191 + 48);
  unint64_t v26 = v196;
  if (v140(v133, 1LL, v196) != 1)
  {
    uint64_t v143 = v200;
    outlined init with take of AST.Atom.Kind(v133, v200, type metadata accessor for AST.Atom);
    uint64_t v133 = (uint64_t)v190;
    uint64_t v144 = v193;
    makeOperand #1 (_:isLHS:) in Parser.parsePotentialCCRange(into:)(v193);
    outlined destroy of AST.Atom(v144, type metadata accessor for AST.CustomCharacterClass.Member);
    if (v140(v133, 1LL, v26) == 1)
    {
      unint64_t v141 = type metadata accessor for AST.Atom;
      uint64_t v142 = v143;
      goto LABEL_96;
    }

    outlined init with take of AST.Atom.Kind(v133, (uint64_t)v189, type metadata accessor for AST.Atom);
    unint64_t v65 = *((void *)into->_rawValue + 2) - v186 + 1;
    uint64_t v145 = specialized BidirectionalCollection.suffix(_:)(v65, (uint64_t)into->_rawValue);
    uint64_t v213 = v146;
    *(void *)&__int128 v214 = v145;
    unint64_t v61 = v147;
    uint64_t v2 = v148 >> 1;
    swift_bridgeObjectRetain();
    __int128 v75 = (char *)MEMORY[0x18961AFE8];
    if (v61 != v2)
    {
      unint64_t v212 = (Swift::OpaquePointer *)(v2 - 1);
      Swift::OpaquePointer into = (Swift::OpaquePointer *)v61;
LABEL_101:
      uint64_t v149 = v213 + v62 * (void)into;
      uint64_t v62 = (uint64_t)into;
      while ((uint64_t)into >= (uint64_t)v61 && v62 < v2)
      {
        uint64_t v150 = v197;
        outlined init with copy of AST.Atom(v149, v197, type metadata accessor for AST.CustomCharacterClass.Member);
        uint64_t v151 = (char *)(v62 + 1);
        uint64_t v152 = v150;
        unint64_t v26 = v198;
        outlined init with take of AST.Atom.Kind(v152, v198, type metadata accessor for AST.CustomCharacterClass.Member);
        if (swift_getEnumCaseMultiPayload() == 4)
        {
          BOOL v210 = *(uint64_t **)v26;
          unint64_t v209 = *(void *)(v26 + 8);
          unint64_t v153 = *(void *)(v26 + 16);
          unint64_t v26 = *(void *)(v26 + 24);
          unint64_t v204 = v153;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            __int128 v75 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v75 + 2) + 1LL,  1,  v75,  &demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Trivia>);
          }
          unint64_t v155 = *((void *)v75 + 2);
          unint64_t v154 = *((void *)v75 + 3);
          if (v155 >= v154 >> 1) {
            __int128 v75 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v154 > 1),  v155 + 1,  1,  v75,  &demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Trivia>);
          }
          *((void *)v75 + 2) = v155 + 1;
          __int128 v156 = &v75[32 * v155];
          unint64_t v157 = v209;
          *((void *)v156 + 4) = v210;
          *((void *)v156 + 5) = v157;
          *((void *)v156 + 6) = v204;
          *((void *)v156 + 7) = v26;
          Swift::OpaquePointer into = (Swift::OpaquePointer *)(v62 + 1);
          BOOL v158 = v212 == (Swift::OpaquePointer *)v62;
          uint64_t v62 = v207;
          if (v158) {
            goto LABEL_116;
          }
          goto LABEL_101;
        }

        outlined destroy of AST.Atom(v26, type metadata accessor for AST.CustomCharacterClass.Member);
        v149 += v207;
        ++v62;
      }

      goto LABEL_137;
    }

    goto LABEL_116;
  }

  unint64_t v141 = type metadata accessor for AST.CustomCharacterClass.Member;
  uint64_t v142 = v193;
LABEL_96:
  outlined destroy of AST.Atom(v142, v141);
  uint64_t v134 = &demangling cache variable for type metadata for AST.Atom?;
LABEL_97:
  outlined destroy of _ASTParent?(v133, v134);
}

void makeOperand #1 (_:isLHS:) in Parser.parsePotentialCCRange(into:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AST.CustomCharacterClass.Member(0LL);
  MEMORY[0x1895F8858](v2, v3);
  outlined init with copy of AST.Atom(a1, (uint64_t)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL), v5);
  uint64_t v6 = (char *)sub_180FC7DE4 + 4 * byte_180FFFB2E[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }

uint64_t sub_180FC7DE4()
{
  v2._uint64_t countAndFlagsBits = 0x6C20646573726150LL;
  v2._uint64_t object = (void *)0xEC00000072657461LL;
  Parser.unreachable(_:)(v2);
  uint64_t v3 = type metadata accessor for AST.Atom(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56LL))(v0, 1LL, 1LL, v3);
}

uint64_t specialized BidirectionalCollection.suffix(_:)(uint64_t result, uint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
  }

  else
  {
    type metadata accessor for AST.CustomCharacterClass.Member(0LL);
    return a2;
  }

  return result;
}

unint64_t specialized RangeReplaceableCollection<>.removeLast(_:)(unint64_t result)
{
  if (result)
  {
    if ((result & 0x8000000000000000LL) != 0)
    {
      __break(1u);
    }

    else
    {
      unint64_t v2 = *(void *)(*(void *)v1 + 16LL);
      BOOL v3 = v2 >= result;
      uint64_t result = v2 - result;
      if (v3) {
        return specialized Array.replaceSubrange<A>(_:with:)(result, v2);
      }
    }

    __break(1u);
  }

  return result;
}

uint64_t specialized parseWithRecovery<A>(_:_:)@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v20 = a1;
  unint64_t v21 = a2;
  swift_bridgeObjectRetain();
  uint64_t v6 = String.init<A>(_:)();
  uint64_t v8 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000LL) == 0) {
    uint64_t v8 = v6;
  }
  uint64_t v9 = 7LL;
  if (((v7 >> 60) & ((v6 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v9 = 11LL;
  }
  uint64_t v10 = (char *)MEMORY[0x18961AFE8];
  uint64_t v29 = MEMORY[0x18961AFE8];
  uint64_t v20 = v6;
  unint64_t v21 = v7;
  uint64_t v22 = 15LL;
  uint64_t v23 = v9 | (v8 << 16);
  char v24 = 0;
  uint64_t v25 = 0LL;
  uint64_t v26 = MEMORY[0x18961AFF8];
  uint64_t v27 = a3;
  char v28 = 3;
  Parser.parse()(&v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v12 = v17;
  uint64_t v11 = v18;
  uint64_t v13 = v19;
  v15[0] = v17;
  v15[1] = v18;
  v15[2] = v19;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static CaptureList.Builder.build(_:)(v15, v16);
  v15[3] = v12;
  v15[4] = v11;
  v15[5] = v13;
  v16[1] = v10;
  RegexValidator.validate()(a4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t parseWithRecovery<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *v5;
  (*(void (**)(char *, uint64_t))(v7 + 16))((char *)&v19[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL), v8);
  uint64_t v9 = String.init<A>(_:)();
  uint64_t v11 = HIBYTE(v10) & 0xF;
  if ((v10 & 0x2000000000000000LL) == 0) {
    uint64_t v11 = v9;
  }
  uint64_t v12 = 7LL;
  if (((v10 >> 60) & ((v9 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v12 = 11LL;
  }
  uint64_t v13 = (char *)MEMORY[0x18961AFE8];
  uint64_t v33 = MEMORY[0x18961AFE8];
  uint64_t v24 = v9;
  unint64_t v25 = v10;
  uint64_t v26 = 15LL;
  uint64_t v27 = v12 | (v11 << 16);
  char v28 = 0;
  uint64_t v29 = 0LL;
  uint64_t v30 = MEMORY[0x18961AFF8];
  uint64_t v31 = v6;
  char v32 = 3;
  Parser.parse()(&v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v15 = v21;
  uint64_t v14 = v22;
  uint64_t v16 = v23;
  v19[0] = v21;
  v19[1] = v22;
  v19[2] = v23;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static CaptureList.Builder.build(_:)(v19, v20);
  v19[3] = v15;
  void v19[4] = v14;
  v19[5] = v16;
  v20[1] = v13;
  RegexValidator.validate()(a3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t validate(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[1];
  uint64_t v5 = a1[2];
  v7[0] = *a1;
  uint64_t v4 = v7[0];
  v7[1] = v3;
  v7[2] = v5;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static CaptureList.Builder.build(_:)(v7, v8);
  _OWORD v7[3] = v4;
  v7[4] = v3;
  v7[5] = v5;
  v8[1] = (char *)MEMORY[0x18961AFE8];
  RegexValidator.validate()(a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t parse<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v23 = *a2;
  uint64_t result = parseWithRecovery<A>(_:_:)(a1, (uint64_t)&v23, (uint64_t)v21);
  uint64_t v5 = v21[1];
  uint64_t v6 = v22;
  uint64_t v7 = *(void *)(v22 + 16) + 1LL;
  uint64_t v8 = v22;
  while (--v7)
  {
    uint64_t v9 = v8 + 80;
    unsigned int v10 = *(unsigned __int8 *)(v8 + 32);
    v8 += 80LL;
    if (v10 <= 1)
    {
      uint64_t v11 = *(void *)(v9 - 32);
      uint64_t v12 = *(void *)(v9 - 24);
      uint64_t v13 = *(void *)(v9 - 16);
      uint64_t v19 = *(void *)(v9 - 8);
      uint64_t v20 = *(void *)(v9 - 40);
      uint64_t v14 = *(void *)(v9 + 16);
      uint64_t v17 = *(void *)(v9 + 8);
      uint64_t v18 = *(void *)v9;
      unsigned __int8 v15 = *(_BYTE *)(v9 + 24);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.LocatedError<ErrorDiagnostic #1 in Diagnostics.throwAnyError()>);
      lazy protocol witness table accessor for type Source.LocatedError<ErrorDiagnostic #1 in Diagnostics.throwAnyError()> and conformance Source.LocatedError<A>( &lazy protocol witness table cache variable for type Source.LocatedError<ErrorDiagnostic #1 in Diagnostics.throwAnyError()> and conformance Source.LocatedError<A>,  &demangling cache variable for type metadata for Source.LocatedError<ErrorDiagnostic #1 in Diagnostics.throwAnyError()>,  (uint64_t)&protocol conformance descriptor for Source.LocatedError<A>);
      swift_allocError();
      *(_BYTE *)uint64_t v16 = v10;
      *(void *)(v16 + 8) = v20;
      *(void *)(v16 + 16) = v11;
      *(void *)(v16 + 24) = v12;
      *(void *)(v16 + 32) = v13;
      *(void *)(v16 + 40) = v19;
      *(void *)(v16 + 48) = v18;
      *(void *)(v16 + 56) = v17;
      *(void *)(v16 + 64) = v14;
      *(_BYTE *)(v16 + 72) = v15;
      *(void *)(v16 + 80) = v12;
      *(void *)(v16 + 88) = v13;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of ParseError?(v19, v18, v17, v14, v15);
      swift_willThrow();
      swift_bridgeObjectRelease_n();
      swift_release();
      return swift_bridgeObjectRelease();
    }
  }

  *a3 = v21[0];
  a3[1] = v5;
  a3[2] = v6;
  return result;
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = 0LL;
    uint64_t v5 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v7 = *v5++;
      uint64_t v6 = v7;
      if ((v7 & ~v4) == 0) {
        uint64_t v6 = 0LL;
      }
      v4 |= v6;
      --v3;
    }

    while (v3);
  }

  else
  {
    uint64_t v4 = 0LL;
  }

  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

void static SyntaxOptions.traditional.getter(void *a1@<X8>)
{
  *a1 = 0LL;
}

void static SyntaxOptions.experimental.getter(void *a1@<X8>)
{
  *a1 = 61LL;
}

uint64_t parseWithDelimitersWithRecovery<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = (void *)String.init<A>(_:)();
  v6._uint64_t countAndFlagsBits = (uint64_t)v12;
  v6._uint64_t object = v5;
  unsigned __int128 v7 = (unsigned __int128)droppingRegexDelimiters(_:)(v6);
  uint64_t v8 = v7;
  unint64_t v9 = *((void *)&v7 + 1);
  swift_bridgeObjectRelease();
  if ((v12[0] & 1) != 0)
  {
    uint64_t v10 = 61LL;
  }

  else if (v13 >= 1 && (specialized StringProtocol.spansMultipleLinesInRegexLiteral.getter(v8, v9) & 1) != 0)
  {
    uint64_t v10 = 67LL;
  }

  else
  {
    uint64_t v10 = 0LL;
  }

  specialized parseWithRecovery<A>(_:_:)(v8, v9, v10, a2);
  return swift_bridgeObjectRelease();
}

uint64_t Collection.offsets(of:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = ((uint64_t (*)(void))Collection.offset(of:))();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v7 = type metadata accessor for Range();
  uint64_t result = Collection.offset(of:)(a1 + *(int *)(v7 + 36), a2, a3);
  if (result >= v6) {
    return v6;
  }
  __break(1u);
  return result;
}

uint64_t Collection.index(atOffset:)()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v1 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness, v2);
  uint64_t v4 = (char *)&v6 - v3;
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.index(_:offsetBy:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, AssociatedTypeWitness);
}

uint64_t Error.addingLocation(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *(void *)(a3 - 8);
  uint64_t v11 = MEMORY[0x1895F8858](a1, a2);
  uint64_t v13 = &v26[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  MEMORY[0x1895F8858](v11, v14);
  unsigned __int8 v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
  ((void (*)(_BYTE *, uint64_t))v15)(&v26[-v16 - 8], v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocatedErrorProtocol);
  if (swift_dynamicCast())
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v26);
    uint64_t v17 = swift_allocError();
    v15(v18, v5, a3);
  }

  else
  {
    v15((uint64_t)v13, v5, a3);
    uint64_t v20 = type metadata accessor for Source.LocatedError(0LL, a3, a4, v19);
    MEMORY[0x186E05A04](&protocol conformance descriptor for Source.LocatedError<A>, v20);
    uint64_t v17 = swift_allocError();
    uint64_t v22 = v21;
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v21, v13, a3);
    uint64_t v23 = (void *)(v22 + *(int *)(v20 + 36));
    *uint64_t v23 = a1;
    v23[1] = a2;
  }

  return v17;
}

double RegexValidator.validate()@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = MEMORY[0x18961AFE8];
  if (*(void *)(v1 + 8)) {
    uint64_t v2 = *(void *)(v1 + 8);
  }
  uint64_t v27 = v2;
  uint64_t v3 = *(void *)(v2 + 16);
  swift_bridgeObjectRetain();
  if (v3)
  {
    if (*(void *)(v27 + 16)) {
      __asm { BR              X11 }
    }

    __break(1u);
    goto LABEL_21;
  }

  swift_bridgeObjectRelease();
  void v31[2] = MEMORY[0x18961AFF8];
  uint64_t v4 = v30[3];
  uint64_t v5 = *(void *)(v4 + 16);
  swift_bridgeObjectRetain();
  if (v5)
  {
    unint64_t v6 = 0LL;
    uint64_t v28 = v5;
    uint64_t v7 = (_OWORD *)(v4 + 64);
    while (v6 < *(void *)(v4 + 16))
    {
      Swift::Int v8 = *((void *)v7 - 3);
      if (v8)
      {
        Swift::Int v9 = *((void *)v7 - 4);
        __int128 v29 = *v7;
        swift_bridgeObjectRetain_n();
        char v10 = specialized Set._Variant.insert(_:)(v31, v9, v8);
        swift_bridgeObjectRelease();
        if ((v10 & 1) != 0)
        {
          swift_bridgeObjectRelease_n();
        }

        else
        {
          *(void *)&__int128 v32 = v9;
          *((void *)&v32 + 1) = v8;
          uint64_t v33 = 0LL;
          uint64_t v34 = 0LL;
          char v35 = 33;
          ParseError.description.getter();
          uint64_t v12 = v11;
          uint64_t v14 = v13;
          unsigned __int8 v15 = (char *)v30[4];
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unsigned __int8 v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v15 + 2) + 1LL,  1,  v15);
          }
          __int128 v16 = v29;
          unint64_t v18 = *((void *)v15 + 2);
          unint64_t v17 = *((void *)v15 + 3);
          if (v18 >= v17 >> 1)
          {
            uint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v17 > 1),  v18 + 1,  1,  v15);
            __int128 v16 = v29;
            unsigned __int8 v15 = v20;
          }

          *((void *)v15 + 2) = v18 + 1;
          uint64_t v19 = &v15[80 * v18];
          v19[32] = 1;
          *((void *)v19 + 5) = v12;
          *((void *)v19 + 6) = v14;
          *(_OWORD *)(v19 + 56) = v16;
          *((void *)v19 + 9) = v9;
          *((void *)v19 + 10) = v8;
          *((void *)v19 + 11) = 0LL;
          *((void *)v19 + 12) = 0LL;
          v19[104] = 33;
          swift_bridgeObjectRelease_n();
          v30[4] = v15;
          uint64_t v5 = v28;
        }
      }

      else
      {
        swift_bridgeObjectRelease();
      }

      ++v6;
      uint64_t v7 = (_OWORD *)((char *)v7 + 56);
      if (v5 == v6) {
        goto LABEL_19;
      }
    }

void RegexValidator.validateNode(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AST.CustomCharacterClass.Member(0LL);
  MEMORY[0x1895F8858](v2, v3);
  uint64_t v4 = type metadata accessor for AST.Atom(0LL);
  MEMORY[0x1895F8858](v4, v5);
  __asm { BR              X11 }

void sub_180FC92FC(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    unint64_t v4 = 0LL;
    do
    {
      if (v4 >= *(void *)(v2 + 16))
      {
        __break(1u);
        JUMPOUT(0x180FC9B88LL);
      }

      unint64_t v5 = v4 + 1;
      *(void *)(v1 - 160) = *(void *)(v2 + 32 + 8 * v4);
      RegexValidator.validateNode(_:)(v1 - 160);
      unint64_t v4 = v5;
    }

    while (v3 != v5);
  }

double RegexValidator.expectInvalid(at:)(__int128 *a1)
{
  uint64_t v2 = v1;
  __int128 v3 = *a1;
  uint64_t v4 = *(void *)(v1 + 16);
  unint64_t v5 = (unsigned __int8 *)(v4 + 32);
  uint64_t v6 = *(void *)(v4 + 16) + 1LL;
  while (--v6)
  {
    unsigned int v7 = *v5;
    v5 += 80;
    if (v7 < 2) {
      return *(double *)&v3;
    }
  }

  __int128 v17 = *a1;
  strcpy((char *)v18, "UNREACHABLE: ");
  HIWORD(v18[1]) = -4864;
  v8._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  v8._uint64_t object = (void *)0x8000000181009190LL;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  uint64_t v9 = v18[0];
  uint64_t v10 = v18[1];
  uint64_t v11 = *(char **)(v1 + 32);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v11 + 2) + 1LL,  1,  v11);
  }
  unint64_t v13 = *((void *)v11 + 2);
  unint64_t v12 = *((void *)v11 + 3);
  __int128 v3 = v17;
  if (v13 >= v12 >> 1)
  {
    unsigned __int8 v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v12 > 1),  v13 + 1,  1,  v11);
    __int128 v3 = v17;
    uint64_t v11 = v15;
  }

  *((void *)v11 + 2) = v13 + 1;
  uint64_t v14 = &v11[80 * v13];
  v14[32] = 0;
  *((void *)v14 + 5) = v9;
  *((void *)v14 + 6) = v10;
  *(_OWORD *)(v14 + 56) = v3;
  *(void *)&__int128 v3 = 0LL;
  *(_OWORD *)(v14 + 72) = 0u;
  *(_OWORD *)(v14 + 88) = 0u;
  v14[104] = -1;
  *(void *)(v2 + 32) = v11;
  return *(double *)&v3;
}

void RegexValidator.validateMatchingOption(_:)(uint64_t a1)
{
  __asm { BR              X10 }

uint64_t sub_180FCA0F8()
{
  v3._uint64_t object = (void *)0x8000000181008850LL;
  v3._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v3);
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v4 + 16) + 1LL,  1,  (char *)v4);
    uint64_t v4 = result;
  }

  unint64_t v6 = *(void *)(v4 + 16);
  unint64_t v7 = *(void *)(v4 + 24);
  unint64_t v8 = v6 + 1;
  if (v6 >= v7 >> 1)
  {
    unint64_t v12 = v6 + 1;
    uint64_t v10 = (char *)v4;
    unint64_t v11 = *(void *)(v4 + 16);
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v7 > 1),  v6 + 1,  1,  v10);
    unint64_t v6 = v11;
    unint64_t v8 = v12;
    uint64_t v4 = result;
  }

  *(void *)(v4 + 16) = v8;
  unint64_t v9 = v4 + 80 * v6;
  *(_BYTE *)(v9 + 32) = 1;
  *(void *)(v9 + 40) = 0xD000000000000011LL;
  *(void *)(v9 + 48) = 0x8000000181009210LL;
  *(void *)(v9 + 56) = v2;
  *(void *)(v9 + 64) = v1;
  *(void *)(v9 + 72) = 0xD000000000000011LL;
  *(void *)(v9 + 80) = 0x8000000181009210LL;
  *(void *)(v9 + 88) = 0LL;
  *(void *)(v9 + 96) = 0LL;
  *(_BYTE *)(v9 + 104) = 29;
  *(void *)(v0 + 32) = v4;
  return result;
}

void RegexValidator.validateMatchingOptions(_:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = *(void *)(v1 + 16);
  if (v3)
  {
    unint64_t v4 = 0LL;
    unint64_t v5 = (_OWORD *)(v1 + 40);
    while (v4 < *(void *)(v1 + 16))
    {
      ++v4;
      v11[0] = *((_BYTE *)v5 - 8);
      __int128 v6 = *v5;
      unint64_t v5 = (_OWORD *)((char *)v5 + 24);
      __int128 v12 = v6;
      RegexValidator.validateMatchingOption(_:)((uint64_t)v11);
      if (v3 == v4) {
        goto LABEL_5;
      }
    }

    __break(1u);
    goto LABEL_11;
  }

uint64_t Unicode.BinaryProperty.rawValue.getter()
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_180FCA4DC + 4 * word_180FFFB48[*v0]))( 0xD000000000000015LL,  0x8000000181006980LL);
}

uint64_t sub_180FCA4DC()
{
  return 0x65485F4949435341LL;
}

uint64_t sub_180FCA500()
{
  return 0x7465626168706C41LL;
}

uint64_t sub_180FCA51C()
{
  return 0x6E6F435F69646942LL;
}

unint64_t sub_180FCA7F4()
{
  return 0xD000000000000017LL;
}

uint64_t sub_180FCA800()
{
  return 0x7361637265776F4CLL;
}

uint64_t sub_180FCA80C()
{
  return 1752457549LL;
}

uint64_t sub_180FCA838@<X0>(uint64_t a1@<X8>)
{
  return a1 - 7;
}

uint64_t sub_180FCA848@<X0>(uint64_t a1@<X8>)
{
  return a1 + 11;
}

  ;
}

uint64_t sub_180FCA864@<X0>(uint64_t a1@<X8>)
{
  return a1 - 6;
}

uint64_t sub_180FCA874()
{
  return 0x44495F726568744FLL;
}

uint64_t sub_180FCA898()
{
  return 0x6F4C5F726568744FLL;
}

uint64_t sub_180FCA8C0()
{
  return 0x614D5F726568744FLL;
}

uint64_t sub_180FCA8E0()
{
  return 0x70555F726568744FLL;
}

uint64_t sub_180FCA904()
{
  return 0x5F6E726574746150LL;
}

uint64_t sub_180FCA928@<X0>(uint64_t a1@<X8>)
{
  return a1 - 4;
}

uint64_t sub_180FCA938@<X0>(uint64_t a1@<X8>)
{
  return a1 + 5;
}

uint64_t sub_180FCA948()
{
  return 0x6F697461746F7551LL;
}

uint64_t sub_180FCA96C()
{
  return 0x6C616369646152LL;
}

uint64_t sub_180FCA984@<X0>(uint64_t a1@<X8>)
{
  return a1 - 5;
}

uint64_t sub_180FCA994()
{
  return 0x746F445F74666F53LL;
}

uint64_t sub_180FCA9B4@<X0>(uint64_t a1@<X8>)
{
  return a1 - 6;
}

uint64_t sub_180FCA9C4@<X0>(uint64_t a1@<X8>)
{
  return a1 - 3;
}

uint64_t sub_180FCA9D4@<X0>(uint64_t a1@<X8>)
{
  return a1 - 6;
}

void sub_180FCAA00()
{
}

uint64_t sub_180FCAA18()
{
  return 0x70535F6574696857LL;
}

uint64_t sub_180FCAA38()
{
  return 0x746E6F435F444958LL;
}

uint64_t sub_180FCAA58()
{
  return 0x726174535F444958LL;
}

uint64_t sub_180FCAA78()
{
  return 0x5F73646E61707845LL;
}

void RegexValidator.validateCharacterProperty(_:at:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0LL);
  MEMORY[0x1895F8858](v2, v3);
  outlined init with copy of AST.Atom(a1, (uint64_t)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL), v5);
  __int128 v6 = (char *)sub_180FCAB78 + 4 * byte_180FFFBCE[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }

uint64_t sub_180FCAB78()
{
  return outlined destroy of AST.Atom(v0, type metadata accessor for AST.Atom.CharacterProperty.Kind);
}

void sub_180FCAEC8(char a1@<W8>)
{
  *(_BYTE *)(v4 - 96) = a1;
  v5._uint64_t countAndFlagsBits = Unicode.BinaryProperty.rawValue.getter();
  *(void *)(v4 - 96) = 39LL;
  *(void *)(v4 - 88) = 0xE100000000000000LL;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 39LL;
  v6._uint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v6);
  uint64_t v8 = *(void *)(v4 - 96);
  uint64_t v7 = *(void **)(v4 - 88);
  *(void *)(v4 - 96) = 0LL;
  *(void *)(v4 - 88) = 0xE000000000000000LL;
  _StringGuts.grow(_:)(57LL);
  uint64_t v9 = *(void *)(v4 - 88);
  *(void *)(v4 - 96) = *(void *)(v4 - 96);
  *(void *)(v4 - 88) = v9;
  v10._uint64_t countAndFlagsBits = v8;
  v10._uint64_t object = v7;
  String.append(_:)(v10);
  v11._uint64_t countAndFlagsBits = 0xD000000000000037LL;
  v11._uint64_t object = (void *)0x8000000181008810LL;
  String.append(_:)(v11);
  uint64_t v12 = *(void *)(v4 - 96);
  uint64_t v13 = *(void *)(v4 - 88);
  uint64_t v14 = *(char **)(v1 + 32);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v14 + 2) + 1LL,  1,  v14);
  }
  unint64_t v16 = *((void *)v14 + 2);
  unint64_t v15 = *((void *)v14 + 3);
  unint64_t v17 = v16 + 1;
  if (v16 >= v15 >> 1)
  {
    *(void *)(v4 - 104) = v17;
    uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v15 > 1),  v16 + 1,  1,  v14);
    unint64_t v17 = *(void *)(v4 - 104);
    uint64_t v14 = v19;
  }

  *((void *)v14 + 2) = v17;
  unint64_t v18 = &v14[80 * v16];
  v18[32] = 1;
  *((void *)v18 + 5) = v12;
  *((void *)v18 + 6) = v13;
  *((void *)v18 + 7) = v3;
  *((void *)v18 + 8) = v2;
  *((void *)v18 + 9) = v8;
  *((void *)v18 + 10) = v7;
  *((void *)v18 + 11) = 0LL;
  *((void *)v18 + 12) = 0LL;
  JUMPOUT(0x180FCAF98LL);
}

void RegexValidator.validateAtom(_:inCustomCharacterClass:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AST.Atom.CharacterProperty(0LL);
  MEMORY[0x1895F8858](v2, v3);
  uint64_t v4 = type metadata accessor for AST.Atom.Kind(0LL);
  MEMORY[0x1895F8858](v4, v5);
  outlined init with copy of AST.Atom(a1, (uint64_t)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL), v7);
  uint64_t v8 = (char *)sub_180FCB1D4 + 4 * word_180FFFC24[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }

uint64_t sub_180FCB1D4()
{
  uint64_t v4 = (uint64_t *)(v1 + *(int *)(type metadata accessor for AST.Atom(0LL) + 20));
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  *(void *)(v3 - 160) = 0LL;
  *(void *)(v3 - 152) = 0xE000000000000000LL;
  _StringGuts.grow(_:)(29LL);
  swift_bridgeObjectRelease();
  *(void *)(v3 - 160) = 0xD000000000000010LL;
  *(void *)(v3 - 152) = 0x80000001810092C0LL;
  v7._uint64_t object = (void *)0x8000000181008850LL;
  v7._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v7);
  uint64_t v8 = *(void *)(v3 - 160);
  uint64_t v9 = *(void *)(v3 - 152);
  uint64_t v10 = *(void *)(v0 + 32);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v10 + 16) + 1LL,  1,  (char *)v10);
    uint64_t v10 = result;
  }

  unint64_t v13 = *(void *)(v10 + 16);
  unint64_t v12 = *(void *)(v10 + 24);
  if (v13 >= v12 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v12 > 1),  v13 + 1,  1,  (char *)v10);
    uint64_t v10 = result;
  }

  *(void *)(v10 + 16) = v13 + 1;
  unint64_t v14 = v10 + 80 * v13;
  *(_BYTE *)(v14 + 32) = 1;
  *(void *)(v14 + 40) = v8;
  *(void *)(v14 + 48) = v9;
  *(void *)(v14 + 56) = v5;
  *(void *)(v14 + 64) = v6;
  *(void *)(v14 + 72) = 0xD000000000000010LL;
  *(void *)(v14 + 80) = 0x80000001810092C0LL;
  *(void *)(v14 + 88) = 0LL;
  *(void *)(v14 + 96) = 0LL;
  *(_BYTE *)(v14 + 104) = 29;
  *(void *)(v0 + 32) = v10;
  return result;
}

void RegexValidator.validateCharacterClassMember(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AST.Atom(0LL);
  MEMORY[0x1895F8858](v2, v3);
  uint64_t v4 = type metadata accessor for AST.CustomCharacterClass.Range(0LL);
  MEMORY[0x1895F8858](v4, v5);
  uint64_t v6 = type metadata accessor for AST.CustomCharacterClass.Member(0LL);
  uint64_t v8 = MEMORY[0x1895F8858](v6, v7);
  MEMORY[0x1895F8858](v8, v9);
  outlined init with copy of AST.Atom(a1, (uint64_t)&v13 - v10, v11);
  unint64_t v12 = (char *)&loc_180FCBEB8 + dword_180FCC0B4[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }

uint64_t sub_180FCBEC8()
{
  return outlined destroy of AST.Atom(v0, type metadata accessor for AST.CustomCharacterClass.Member);
}

uint64_t RegexValidator.validateCharacterClassRange(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for AST.Atom(0LL);
  uint64_t v6 = MEMORY[0x1895F8858](v4, v5);
  uint64_t v8 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v6, v9);
  Swift::String v11 = (char *)&v59 - v10;
  outlined init with copy of AST.Atom(a1, (uint64_t)&v59 - v10, type metadata accessor for AST.Atom);
  uint64_t v12 = type metadata accessor for AST.CustomCharacterClass.Range(0LL);
  outlined init with copy of AST.Atom(a1 + *(int *)(v12 + 24), (uint64_t)v8, type metadata accessor for AST.Atom);
  RegexValidator.validateAtom(_:inCustomCharacterClass:)((uint64_t)v11);
  RegexValidator.validateAtom(_:inCustomCharacterClass:)((uint64_t)v8);
  if ((AST.Atom.isValidCharacterClassRangeBound.getter() & 1) == 0)
  {
    outlined destroy of AST.Atom((uint64_t)v8, type metadata accessor for AST.Atom);
    uint64_t v34 = &v11[*(int *)(v4 + 20)];
    uint64_t v35 = *(void *)v34;
    uint64_t v36 = *((void *)v34 + 1);
    uint64_t v37 = (uint64_t)v11;
LABEL_17:
    outlined destroy of AST.Atom(v37, type metadata accessor for AST.Atom);
    uint64_t v28 = *(char **)(v1 + 32);
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v28 + 2) + 1LL,  1,  v28);
      uint64_t v28 = (char *)result;
    }

    unint64_t v40 = *((void *)v28 + 2);
    unint64_t v39 = *((void *)v28 + 3);
    if (v40 >= v39 >> 1)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v39 > 1),  v40 + 1,  1,  v28);
      uint64_t v28 = (char *)result;
    }

    *((void *)v28 + 2) = v40 + 1;
    uint64_t v41 = &v28[80 * v40];
    char v41[32] = 1;
    *((void *)v41 + 5) = 0xD000000000000027LL;
    *((void *)v41 + 6) = 0x8000000181008BC0LL;
    *((void *)v41 + 7) = v35;
    *((void *)v41 + 8) = v36;
    *((void *)v41 + 9) = 16LL;
    *((void *)v41 + 10) = 0LL;
    *((void *)v41 + 11) = 0LL;
    *((void *)v41 + 12) = 0LL;
    char v42 = 36;
    goto LABEL_22;
  }

  if ((AST.Atom.isValidCharacterClassRangeBound.getter() & 1) == 0)
  {
    outlined destroy of AST.Atom((uint64_t)v11, type metadata accessor for AST.Atom);
    uint64_t v38 = &v8[*(int *)(v4 + 20)];
    uint64_t v35 = *(void *)v38;
    uint64_t v36 = *((void *)v38 + 1);
    uint64_t v37 = (uint64_t)v8;
    goto LABEL_17;
  }

  AST.Atom.literalCharacterValue.getter();
  if (!v14)
  {
    outlined destroy of AST.Atom((uint64_t)v8, type metadata accessor for AST.Atom);
    uint64_t v43 = &v11[*(int *)(v4 + 20)];
    uint64_t v44 = *(void *)v43;
    uint64_t v45 = *((void *)v43 + 1);
    outlined destroy of AST.Atom((uint64_t)v11, type metadata accessor for AST.Atom);
    unint64_t v62 = 0LL;
    unint64_t v63 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(29LL);
    swift_bridgeObjectRelease();
    unint64_t v62 = 0xD00000000000001DLL;
    unint64_t v63 = 0x8000000181009320LL;
    v46._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
    v46._uint64_t object = (void *)0x8000000181008850LL;
    String.append(_:)(v46);
    unint64_t v47 = v62;
    unint64_t v48 = v63;
    uint64_t v28 = *(char **)(v1 + 32);
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v28 + 2) + 1LL,  1,  v28);
      uint64_t v28 = (char *)result;
    }

    unint64_t v50 = *((void *)v28 + 2);
    unint64_t v49 = *((void *)v28 + 3);
    if (v50 >= v49 >> 1)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v49 > 1),  v50 + 1,  1,  v28);
      uint64_t v28 = (char *)result;
    }

    *((void *)v28 + 2) = v50 + 1;
    uint64_t v41 = &v28[80 * v50];
    char v41[32] = 1;
    *((void *)v41 + 5) = v47;
    *((void *)v41 + 6) = v48;
    *((void *)v41 + 7) = v44;
    *((void *)v41 + 8) = v45;
    goto LABEL_35;
  }

  unint64_t v15 = v13;
  unint64_t v16 = v14;
  outlined destroy of AST.Atom((uint64_t)v11, type metadata accessor for AST.Atom);
  AST.Atom.literalCharacterValue.getter();
  if (!v18)
  {
    swift_bridgeObjectRelease();
    uint64_t v51 = &v8[*(int *)(v4 + 20)];
    uint64_t v52 = *(void *)v51;
    uint64_t v53 = *((void *)v51 + 1);
    outlined destroy of AST.Atom((uint64_t)v8, type metadata accessor for AST.Atom);
    unint64_t v62 = 0LL;
    unint64_t v63 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(29LL);
    swift_bridgeObjectRelease();
    unint64_t v62 = 0xD00000000000001DLL;
    unint64_t v63 = 0x8000000181009320LL;
    v54._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
    v54._uint64_t object = (void *)0x8000000181008850LL;
    String.append(_:)(v54);
    unint64_t v55 = v62;
    unint64_t v56 = v63;
    uint64_t v28 = *(char **)(v1 + 32);
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v28 + 2) + 1LL,  1,  v28);
      uint64_t v28 = (char *)result;
    }

    unint64_t v58 = *((void *)v28 + 2);
    unint64_t v57 = *((void *)v28 + 3);
    if (v58 >= v57 >> 1)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v57 > 1),  v58 + 1,  1,  v28);
      uint64_t v28 = (char *)result;
    }

    *((void *)v28 + 2) = v58 + 1;
    uint64_t v41 = &v28[80 * v58];
    char v41[32] = 1;
    *((void *)v41 + 5) = v55;
    *((void *)v41 + 6) = v56;
    *((void *)v41 + 7) = v52;
    *((void *)v41 + 8) = v53;
LABEL_35:
    *((void *)v41 + 9) = 0xD00000000000001DLL;
    *((void *)v41 + 10) = 0x8000000181009320LL;
    *((void *)v41 + 11) = 0LL;
    *((void *)v41 + 12) = 0LL;
    char v42 = 29;
LABEL_22:
    v41[104] = v42;
LABEL_23:
    *(void *)(v2 + 32) = v28;
    return result;
  }

  uint64_t v19 = v17;
  uint64_t v20 = v18;
  outlined destroy of AST.Atom((uint64_t)v8, type metadata accessor for AST.Atom);
  BOOL v21 = v19 == v15 && v20 == v16;
  if (!v21 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    unint64_t v62 = v15;
    unint64_t v63 = v16;
    uint64_t v64 = v19;
    uint64_t v65 = v20;
    char v66 = 35;
    uint64_t v22 = (uint64_t *)(a1 + *(int *)(v12 + 20));
    uint64_t v23 = *v22;
    uint64_t v60 = v22[1];
    uint64_t v61 = v23;
    ParseError.description.getter();
    uint64_t v25 = v24;
    uint64_t v27 = v26;
    uint64_t v28 = *(char **)(v1 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v28 + 2) + 1LL,  1,  v28);
    }
    unint64_t v30 = *((void *)v28 + 2);
    unint64_t v29 = *((void *)v28 + 3);
    if (v30 >= v29 >> 1) {
      uint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v29 > 1),  v30 + 1,  1,  v28);
    }
    *((void *)v28 + 2) = v30 + 1;
    uint64_t v31 = &v28[80 * v30];
    v31[32] = 1;
    *((void *)v31 + 5) = v25;
    *((void *)v31 + 6) = v27;
    uint64_t v32 = v60;
    *((void *)v31 + 7) = v61;
    *((void *)v31 + 8) = v32;
    *((void *)v31 + 9) = v15;
    *((void *)v31 + 10) = v16;
    *((void *)v31 + 11) = v19;
    *((void *)v31 + 12) = v20;
    v31[104] = 35;
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    goto LABEL_23;
  }

  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

unint64_t specialized Source.peekPrefix(maxLength:_:)(uint64_t a1, char a2)
{
  unint64_t v4 = String.subscript.getter();
  unint64_t v6 = v5;
  unint64_t result = swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    if (v6 >> 14 < v4 >> 14)
    {
LABEL_27:
      __break(1u);
      return result;
    }
  }

  else
  {
    if (a1 < 0)
    {
LABEL_25:
      __break(1u);
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }

    unint64_t result = Substring.index(_:offsetBy:limitedBy:)();
    if ((v8 & 1) != 0) {
      unint64_t v9 = v6;
    }
    else {
      unint64_t v9 = result;
    }
    if (v9 >> 14 < v4 >> 14) {
      goto LABEL_26;
    }
  }

  unint64_t v10 = Substring.subscript.getter();
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  unint64_t v13 = v12 >> 14;
  if (v10 >> 14 != v12 >> 14)
  {
    v24[0] = Substring.subscript.getter();
    v24[1] = v14;
    key path getter for Character.isWordCharacter : Character(v24, &v23);
    swift_bridgeObjectRelease();
    if ((v23 & 1) != 0)
    {
      while (1)
      {
        unint64_t result = Substring.index(after:)();
        unint64_t v15 = result >> 14;
        if (result >> 14 == v13) {
          break;
        }
        uint64_t v16 = Substring.subscript.getter();
        uint64_t v18 = v17;
        if ((Character.isLetter.getter() & 1) != 0
          || (Character.isNumber.getter() & 1) != 0
          || v16 == 95 && v18 == 0xE100000000000000LL)
        {
          swift_bridgeObjectRelease();
        }

        else
        {
          char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
          unint64_t result = swift_bridgeObjectRelease();
          if ((v19 & 1) == 0)
          {
            unint64_t v13 = v15;
            break;
          }
        }
      }

      if (v13 < v10 >> 14)
      {
        __break(1u);
        goto LABEL_25;
      }
    }
  }

  uint64_t v20 = Substring.subscript.getter();
  unint64_t v22 = v21;
  swift_bridgeObjectRelease();
  if (!((v20 ^ v22) >> 14))
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  return v20;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t result;
  char v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v31 = type metadata accessor for Unicode.Scalar.Properties();
  unint64_t v4 = *(void *)(v31 - 8);
  MEMORY[0x1895F8858](v31, v5);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_bridgeObjectRetain();
  char v8 = String.subscript.getter();
  unint64_t v10 = v9;
  unint64_t result = swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    if (v10 >> 14 < v8 >> 14)
    {
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
  }

  else
  {
    if (a1 < 0)
    {
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }

    unint64_t result = Substring.index(_:offsetBy:limitedBy:)();
    if ((v12 & 1) != 0) {
      unint64_t v13 = v10;
    }
    else {
      unint64_t v13 = result;
    }
    if (v13 >> 14 < v8 >> 14) {
      goto LABEL_36;
    }
  }

  uint64_t v14 = Substring.subscript.getter();
  uint64_t v16 = v15;
  swift_bridgeObjectRelease();
  uint64_t v17 = v16 >> 14;
  unint64_t v29 = v14 >> 14;
  if (v14 >> 14 != v16 >> 14)
  {
    uint64_t v18 = Substring.subscript.getter();
    unint64_t result = specialized Collection.first.getter(v18, v19);
    if ((result & 0x100000000LL) != 0)
    {
LABEL_37:
      __break(1u);
      return result;
    }

    Unicode.Scalar.properties.getter();
    uint64_t v20 = Unicode.Scalar.Properties.isPatternWhitespace.getter();
    unint64_t v30 = *(void (**)(char *, uint64_t))(v4 + 8);
    v30(v7, v31);
    swift_bridgeObjectRelease();
    if ((v20 & 1) != 0)
    {
      while (1)
      {
        unint64_t result = Substring.index(after:)();
        unint64_t v21 = result >> 14;
        if (result >> 14 == v17) {
          break;
        }
        unint64_t result = Substring.subscript.getter();
        if ((v22 & 0x2000000000000000LL) != 0) {
          char v23 = HIBYTE(v22) & 0xF;
        }
        else {
          char v23 = result & 0xFFFFFFFFFFFFLL;
        }
        if (!v23)
        {
          __break(1u);
          goto LABEL_33;
        }

        if ((v22 & 0x1000000000000000LL) != 0)
        {
          _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
        }

        else
        {
          if ((v22 & 0x2000000000000000LL) != 0)
          {
            uint64_t v32 = result;
            uint64_t v33 = v22 & 0xFFFFFFFFFFFFFFLL;
          }

          else if ((result & 0x1000000000000000LL) == 0)
          {
            _StringObject.sharedUTF8.getter();
          }

          _decodeScalar(_:startingAt:)();
        }

        Unicode.Scalar.properties.getter();
        uint64_t v24 = Unicode.Scalar.Properties.isPatternWhitespace.getter();
        v30(v7, v31);
        unint64_t result = swift_bridgeObjectRelease();
        if ((v24 & 1) == 0)
        {
          uint64_t v17 = v21;
          break;
        }
      }

      if (v17 >= v29) {
        goto LABEL_29;
      }
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
  }

{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t result;
  char v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  swift_bridgeObjectRetain();
  unint64_t v4 = String.subscript.getter();
  unint64_t v6 = v5;
  unint64_t result = swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    if (v6 >> 14 >= v4 >> 14) {
      goto LABEL_9;
    }
LABEL_30:
    __break(1u);
    return result;
  }

  if (a1 < 0) {
    goto LABEL_28;
  }
  unint64_t result = Substring.index(_:offsetBy:limitedBy:)();
  if ((v8 & 1) != 0) {
    unint64_t v9 = v6;
  }
  else {
    unint64_t v9 = result;
  }
  if (v9 >> 14 < v4 >> 14)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t result;
  char v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  swift_bridgeObjectRetain();
  unint64_t v4 = String.subscript.getter();
  unint64_t v6 = v5;
  unint64_t result = swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    if (v6 >> 14 < v4 >> 14)
    {
LABEL_23:
      __break(1u);
      return result;
    }
  }

  else
  {
    if (a1 < 0)
    {
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }

    unint64_t result = Substring.index(_:offsetBy:limitedBy:)();
    if ((v8 & 1) != 0) {
      unint64_t v9 = v6;
    }
    else {
      unint64_t v9 = result;
    }
    if (v9 >> 14 < v4 >> 14) {
      goto LABEL_22;
    }
  }

  unint64_t v10 = Substring.subscript.getter();
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  unint64_t v13 = v12 >> 14;
  if (v10 >> 14 != v12 >> 14)
  {
    uint64_t v14 = Substring.subscript.getter();
    uint64_t v16 = Character.isOctalDigit.getter(v14, v15);
    swift_bridgeObjectRelease();
    if ((v16 & 1) != 0)
    {
      unint64_t result = Substring.index(after:)();
      uint64_t v17 = result >> 14;
      if (result >> 14 != v13)
      {
        uint64_t v18 = Substring.subscript.getter();
        uint64_t v20 = Character.isOctalDigit.getter(v18, v19);
        unint64_t result = swift_bridgeObjectRelease();
        if ((v20 & 1) != 0)
        {
          while (1)
          {
            unint64_t result = Substring.index(after:)();
            uint64_t v17 = result >> 14;
            if (result >> 14 == v13) {
              break;
            }
            unint64_t v21 = Substring.subscript.getter();
            char v23 = Character.isOctalDigit.getter(v21, v22);
            unint64_t result = swift_bridgeObjectRelease();
            if ((v23 & 1) == 0) {
              goto LABEL_15;
            }
          }
        }

        else
        {
LABEL_15:
          unint64_t v13 = v17;
        }
      }

      if (v13 < v10 >> 14)
      {
        __break(1u);
        goto LABEL_21;
      }
    }
  }

  uint64_t v24 = Substring.subscript.getter();
  uint64_t v26 = v25;
  swift_bridgeObjectRelease();
  if (!((v24 ^ v26) >> 14))
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  return v24;
}

{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t result;
  char v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  char v15;
  unint64_t v16;
  char v17;
  char v18;
  char v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  swift_bridgeObjectRetain();
  unint64_t v4 = String.subscript.getter();
  unint64_t v6 = v5;
  unint64_t result = swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    if (v6 >> 14 < v4 >> 14)
    {
LABEL_23:
      __break(1u);
      return result;
    }
  }

  else
  {
    if (a1 < 0)
    {
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }

    unint64_t result = Substring.index(_:offsetBy:limitedBy:)();
    if ((v8 & 1) != 0) {
      unint64_t v9 = v6;
    }
    else {
      unint64_t v9 = result;
    }
    if (v9 >> 14 < v4 >> 14) {
      goto LABEL_22;
    }
  }

  unint64_t v10 = Substring.subscript.getter();
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  unint64_t v13 = v12 >> 14;
  if (v10 >> 14 != v12 >> 14)
  {
    Substring.subscript.getter();
    Character.hexDigitValue.getter();
    unint64_t v15 = v14;
    swift_bridgeObjectRelease();
    if ((v15 & 1) == 0)
    {
      unint64_t result = Substring.index(after:)();
      uint64_t v16 = result >> 14;
      if (result >> 14 != v13)
      {
        Substring.subscript.getter();
        Character.hexDigitValue.getter();
        uint64_t v18 = v17;
        unint64_t result = swift_bridgeObjectRelease();
        if ((v18 & 1) != 0)
        {
LABEL_15:
          unint64_t v13 = v16;
        }

        else
        {
          while (1)
          {
            unint64_t result = Substring.index(after:)();
            uint64_t v16 = result >> 14;
            if (result >> 14 == v13) {
              break;
            }
            Substring.subscript.getter();
            Character.hexDigitValue.getter();
            uint64_t v20 = v19;
            unint64_t result = swift_bridgeObjectRelease();
            if ((v20 & 1) != 0) {
              goto LABEL_15;
            }
          }
        }
      }

      if (v13 < v10 >> 14)
      {
        __break(1u);
        goto LABEL_21;
      }
    }
  }

  unint64_t v21 = Substring.subscript.getter();
  char v23 = v22;
  swift_bridgeObjectRelease();
  if (!((v21 ^ v23) >> 14))
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  return v21;
}

unint64_t Source.peekPrefix(maxLength:_:)(uint64_t a1, char a2, uint64_t (*a3)(uint64_t))
{
  unint64_t v6 = String.subscript.getter();
  unint64_t v8 = v7;
  unint64_t result = swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    if (v8 >> 14 < v6 >> 14)
    {
LABEL_24:
      __break(1u);
      return result;
    }
  }

  else
  {
    if (a1 < 0)
    {
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }

    unint64_t result = Substring.index(_:offsetBy:limitedBy:)();
    if ((v10 & 1) != 0) {
      unint64_t v11 = v8;
    }
    else {
      unint64_t v11 = result;
    }
    if (v11 >> 14 < v6 >> 14) {
      goto LABEL_23;
    }
  }

  unint64_t v12 = Substring.subscript.getter();
  unint64_t v14 = v13;
  swift_bridgeObjectRelease();
  unint64_t v15 = v12 >> 14;
  unint64_t v16 = v14 >> 14;
  if (v12 >> 14 != v14 >> 14)
  {
    uint64_t v17 = Substring.subscript.getter();
    char v18 = a3(v17);
    swift_bridgeObjectRelease();
    if ((v18 & 1) != 0)
    {
      uint64_t v25 = a3;
      unint64_t result = Substring.index(after:)();
      unint64_t v19 = result >> 14;
      if (result >> 14 != v16)
      {
        while (1)
        {
          uint64_t v20 = Substring.subscript.getter();
          char v21 = v25(v20);
          unint64_t result = swift_bridgeObjectRelease();
          if ((v21 & 1) == 0) {
            break;
          }
          unint64_t result = Substring.index(after:)();
          unint64_t v19 = result >> 14;
          if (result >> 14 == v16) {
            goto LABEL_16;
          }
        }

        unint64_t v16 = v19;
LABEL_16:
        unint64_t v15 = v12 >> 14;
      }

      if (v16 < v15)
      {
        __break(1u);
        goto LABEL_22;
      }
    }
  }

  uint64_t v22 = Substring.subscript.getter();
  unint64_t v24 = v23;
  swift_bridgeObjectRelease();
  if ((v22 ^ v24) < 0x4000)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  return v22;
}

uint64_t specialized Sequence<>.starts<A>(with:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v5 = a3 ^ a4;
  swift_bridgeObjectRetain();
  if (v5 >= 0x4000)
  {
    while (1)
    {
      uint64_t v9 = Substring.subscript.getter();
      unint64_t v11 = v10;
      uint64_t v12 = Substring.index(after:)();
      Swift::String_optional v13 = String.Iterator.next()();
      if (!v13.value._object) {
        break;
      }
      if (v9 == v13.value._countAndFlagsBits && v13.value._object == v11)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }

      else
      {
        char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v8 & 1) == 0) {
          goto LABEL_3;
        }
      }

      if ((v12 ^ a4) < 0x4000) {
        goto LABEL_2;
      }
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  else
  {
LABEL_2:
    uint64_t object = String.Iterator.next()().value._object;
    swift_bridgeObjectRelease();
    if (object)
    {
LABEL_3:
      swift_bridgeObjectRelease();
      return 0LL;
    }
  }

  return 1LL;
}

uint64_t Source.Location.range.getter()
{
  return *(void *)v0;
}

uint64_t Source.Location.range.setter(uint64_t result, uint64_t a2)
{
  *uint64_t v2 = result;
  v2[1] = a2;
  return result;
}

uint64_t (*Source.Location.range.modify())()
{
  return AST.root.modify;
}

double Source.Location.init<A>(_:in:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result = *(double *)&v7;
  *a3 = v7;
  return result;
}

uint64_t Source.Location.init(from:)@<X0>( unint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t result = swift_bridgeObjectRelease();
  if (a2 >> 14 < a1 >> 14)
  {
    __break(1u);
  }

  else
  {
    *a3 = a1;
    a3[1] = a2;
  }

  return result;
}

BOOL Source.Location.isFake.getter()
{
  return *v0 < 0x4000uLL && v0[1] < 0x4000uLL;
}

BOOL Source.Location.isReal.getter()
{
  return ((*v0 | v0[1]) & 0xFFFFFFFFFFFFC000LL) != 0;
}

void Source.Location.hash(into:)()
{
  unint64_t v1 = v0[1];
  Hasher._combine(_:)(*v0 >> 14);
  Hasher._combine(_:)(v1 >> 14);
}

Swift::Int Source.Location.hashValue.getter()
{
  unint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  return Hasher._finalize()();
}

uint64_t Source.LocatedError.error.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8LL) + 16LL))(a2, v2);
}

__n128 Source.LocatedError.location.getter@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *(__n128 *)(v2 + *(int *)(a1 + 36));
  *a2 = result;
  return result;
}

uint64_t Source.LocatedError.init(_:_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t result = type metadata accessor for Source.LocatedError(0LL, a4, a5, v11);
  Swift::String_optional v13 = (void *)(a6 + *(int *)(result + 36));
  *Swift::String_optional v13 = a2;
  v13[1] = a3;
  return result;
}

uint64_t Source.LocatedError._typeErasedError.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16LL))(v4, v1, v2);
  return v3;
}

uint64_t Source.Located.value.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8LL) + 40LL))(v2, a1);
}

uint64_t (*Source.Located.value.modify())()
{
  return AST.root.modify;
}

__n128 Source.Located.location.getter@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *(__n128 *)(v2 + *(int *)(a1 + 28));
  *a2 = result;
  return result;
}

__n128 Source.Located.location.setter(__n128 *a1, uint64_t a2)
{
  __n128 result = *a1;
  *(__n128 *)(v2 + *(int *)(a2 + 28)) = *a1;
  return result;
}

uint64_t (*Source.Located.location.modify())()
{
  return AST.root.modify;
}

int64x2_t Source.Located.init(faking:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = type metadata accessor for Source.Located();
  int64x2_t result = vdupq_n_s64(0xFuLL);
  *(int64x2_t *)(a3 + *(int *)(v4 + 28)) = result;
  return result;
}

uint64_t Source.Located.map<A>(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = *(void *)(a4 - 8);
  MEMORY[0x1895F8858](a1, a2);
  uint64_t v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = v13(v5);
  if (!v6)
  {
    unint64_t v15 = (uint64_t *)(v5 + *(int *)(a3 + 28));
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a5, v12, a4);
    uint64_t result = type metadata accessor for Source.Located();
    char v18 = (void *)(a5 + *(int *)(result + 28));
    *char v18 = v16;
    v18[1] = v17;
  }

  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance <A> Source.Located<A>( uint64_t a1, uint64_t a2)
{
  return static Source.Located<A>.== infix(_:_:)(a1, a2);
}

void specialized Source.Located<A>.hash(into:)()
{
  Swift::UInt v1 = v7;
  if ((v11 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }

  else
  {
    char v2 = v8;
    unint64_t v4 = v9;
    unint64_t v3 = v10;
    Hasher._combine(_:)(0LL);
    if ((v2 & 1) != 0)
    {
      Hasher._combine(_:)(0);
    }

    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v1);
    }

    Hasher._combine(_:)(v4 >> 14);
    Hasher._combine(_:)(v3 >> 14);
  }

  unint64_t v5 = *(void *)(v0 + 48);
  Hasher._combine(_:)(*(void *)(v0 + 40) >> 14);
  Hasher._combine(_:)(v5 >> 14);
}

void Source.Located<A>.hash(into:)(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (void *)(v2 + *(int *)(a2 + 28));
  unint64_t v5 = v4[1];
  Hasher._combine(_:)(*v4 >> 14);
  Hasher._combine(_:)(v5 >> 14);
}

Swift::Int Source.Located<A>.hashValue.getter(uint64_t a1)
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance <A> Source.Located<A>(uint64_t a1)
{
  return Source.Located<A>.hashValue.getter(a1);
}

void protocol witness for Hashable.hash(into:) in conformance <A> Source.Located<A>(uint64_t a1, uint64_t a2)
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance <A> Source.Located<A>( uint64_t a1, uint64_t a2)
{
  return Hasher._finalize()();
}

uint64_t Source.LocatedError.description.getter()
{
  return 0LL;
}

uint64_t SyntaxOptions.rawValue.getter()
{
  return *(void *)v0;
}

uint64_t SyntaxOptions.rawValue.setter(uint64_t result)
{
  void *v1 = result;
  return result;
}

uint64_t (*SyntaxOptions.rawValue.modify())()
{
  return AST.root.modify;
}

_RegexParser::SyntaxOptions __swiftcall SyntaxOptions.init(rawValue:)(_RegexParser::SyntaxOptions rawValue)
{
  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

_RegexParser::SyntaxOptions __swiftcall SyntaxOptions.init()()
{
  *uint64_t v0 = 0LL;
  return result;
}

void *protocol witness for OptionSet.init(rawValue:) in conformance SyntaxOptions@<X0>( void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void protocol witness for SetAlgebra.init() in conformance SyntaxOptions(void *a1@<X8>)
{
  *a1 = 0LL;
}

void *protocol witness for SetAlgebra.union(_:) in conformance SyntaxOptions@<X0>( void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

void *protocol witness for SetAlgebra.intersection(_:) in conformance SyntaxOptions@<X0>( void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

void *protocol witness for SetAlgebra.symmetricDifference(_:) in conformance SyntaxOptions@<X0>( void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance SyntaxOptions(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

void *protocol witness for SetAlgebra.remove(_:) in conformance SyntaxOptions@<X0>( void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(void *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *protocol witness for SetAlgebra.update(with:) in conformance SyntaxOptions@<X0>( uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  *v2 |= *result;
  uint64_t v5 = v4 & v3;
  *(void *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

void *protocol witness for SetAlgebra.formUnion(_:) in conformance SyntaxOptions(void *result)
{
  *v1 |= *result;
  return result;
}

void *protocol witness for SetAlgebra.formIntersection(_:) in conformance SyntaxOptions(void *result)
{
  *v1 &= *result;
  return result;
}

void *protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance SyntaxOptions( void *result)
{
  *v1 ^= *result;
  return result;
}

void *protocol witness for SetAlgebra.subtracting(_:) in conformance SyntaxOptions@<X0>( void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance SyntaxOptions(void *a1)
{
  return (*v1 & ~*a1) == 0LL;
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance SyntaxOptions(void *a1)
{
  return (*v1 & *a1) == 0LL;
}

BOOL protocol witness for SetAlgebra.isSuperset(of:) in conformance SyntaxOptions(void *a1)
{
  return (*a1 & ~*v1) == 0LL;
}

BOOL protocol witness for SetAlgebra.isEmpty.getter in conformance SyntaxOptions()
{
  return *v0 == 0LL;
}

uint64_t protocol witness for SetAlgebra.init<A>(_:) in conformance SyntaxOptions()
{
  return SetAlgebra.init<A>(_:)();
}

void *protocol witness for SetAlgebra.subtract(_:) in conformance SyntaxOptions(void *result)
{
  *v1 &= ~*result;
  return result;
}

void *protocol witness for RawRepresentable.init(rawValue:) in conformance SyntaxOptions@<X0>( void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance SyntaxOptions(void *a1@<X8>)
{
  *a1 = *v1;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance SyntaxOptions( void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t specialized _ASTPrintable._dump()()
{
  if ((swift_dynamicCast() & 1) == 0)
  {
    uint64_t v34 = 0LL;
    __int128 v32 = 0u;
    __int128 v33 = 0u;
    outlined destroy of _ASTParent?((uint64_t)&v32, &demangling cache variable for type metadata for _ASTParent?);
    swift_release();
    AST.Node._associatedValue.getter();
    uint64_t v17 = *((void *)&v33 + 1);
    uint64_t v18 = v34;
    __swift_project_boxed_opaque_existential_1Tm(&v32, *((uint64_t *)&v33 + 1));
    uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)(v18 + 8) + 24LL))(v17);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v32);
    return v19;
  }

  uint64_t v0 = *((void *)&v33 + 1);
  uint64_t v1 = v34;
  __swift_project_boxed_opaque_existential_1Tm(&v32, *((uint64_t *)&v33 + 1));
  uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 16))(v0, v1);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v32);
  uint64_t result = swift_release();
  uint64_t v4 = *(void *)(v2 + 16);
  if (!v4)
  {
    uint64_t v6 = MEMORY[0x18961AFE8];
    goto LABEL_20;
  }

  unint64_t v5 = 0LL;
  uint64_t v6 = MEMORY[0x18961AFE8];
  do
  {
    unint64_t v7 = v5;
    while (1)
    {
      if (v7 >= *(void *)(v2 + 16))
      {
        __break(1u);
        goto LABEL_31;
      }

      unint64_t v8 = *(void *)(v2 + 32 + 8 * v7);
      if (v8 >> 60 != 6) {
        break;
      }
LABEL_5:
      if (v4 == ++v7) {
        goto LABEL_20;
      }
    }

    swift_retain();
    uint64_t v9 = specialized _ASTPrintable._dump()(v8);
    unint64_t v11 = v10;
    swift_release();
    uint64_t v12 = HIBYTE(v11) & 0xF;
    if ((v11 & 0x2000000000000000LL) == 0) {
      uint64_t v12 = v9 & 0xFFFFFFFFFFFFLL;
    }
    if (!v12)
    {
      uint64_t result = swift_bridgeObjectRelease();
      goto LABEL_5;
    }

    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v6 + 16) + 1LL,  1,  (char *)v6);
      uint64_t v6 = result;
    }

    unint64_t v14 = *(void *)(v6 + 16);
    unint64_t v13 = *(void *)(v6 + 24);
    unint64_t v15 = v14 + 1;
    if (v14 >= v13 >> 1)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v13 > 1),  v14 + 1,  1,  (char *)v6);
      unint64_t v15 = v14 + 1;
      uint64_t v6 = result;
    }

    unint64_t v5 = v7 + 1;
    *(void *)(v6 + 16) = v15;
    unint64_t v16 = v6 + 16 * v14;
    *(void *)(v16 + 32) = v9;
    *(void *)(v16 + 40) = v11;
  }

  while (v4 - 1 != v7);
LABEL_20:
  swift_bridgeObjectRelease();
  AST.Node._associatedValue.getter();
  uint64_t v21 = *((void *)&v33 + 1);
  uint64_t v20 = v34;
  __swift_project_boxed_opaque_existential_1Tm(&v32, *((uint64_t *)&v33 + 1));
  uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)(v20 + 8) + 24LL))(v21);
  unint64_t v23 = v22;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v32);
  uint64_t v24 = *(void *)(v6 + 16);
  if (v24)
  {
    if (v24 != 1) {
      goto LABEL_25;
    }
    uint64_t v25 = HIBYTE(v23) & 0xF;
    if ((v23 & 0x2000000000000000LL) == 0) {
      uint64_t v25 = v19 & 0xFFFFFFFFFFFFLL;
    }
    if (v25)
    {
LABEL_25:
      *(void *)&__int128 v32 = v19;
      *((void *)&v32 + 1) = v23;
      v26._uint64_t countAndFlagsBits = 40LL;
      v26._uint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v26);
      swift_getCanonicalSpecializedMetadata();
      lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type [String] and conformance [A],  (uint64_t)&unk_189B467A8,  (uint64_t)&cache variable for noncanonical specialized generic type metadata for [String],  MEMORY[0x189618458]);
      uint64_t v27 = BidirectionalCollection<>.joined(separator:)();
      unint64_t v29 = v28;
      swift_bridgeObjectRelease();
      v30._uint64_t countAndFlagsBits = v27;
      v30._uint64_t object = v29;
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      v31._uint64_t countAndFlagsBits = 41LL;
      v31._uint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v31);
      return v32;
    }

    uint64_t result = swift_bridgeObjectRelease();
    if (*(void *)(v6 + 16))
    {
      uint64_t v19 = *(void *)(v6 + 32);
      swift_bridgeObjectRetain();
      goto LABEL_28;
    }

{
  __int128 *v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  uint64_t v20;
  void *v21;
  void *v22;
  Swift::String v23;
  Swift::String v24;
  uint64_t result;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  outlined init with take of AST.Node((void *)v0 + 13, &v37);
  uint64_t v1 = v0[5];
  __int128 v33 = v0[4];
  uint64_t v34 = v1;
  uint64_t v2 = v0[7];
  uint64_t v35 = v0[6];
  uint64_t v36 = v2;
  uint64_t v3 = v0[1];
  unint64_t v29 = *v0;
  Swift::String v30 = v3;
  uint64_t v4 = v0[3];
  Swift::String v31 = v0[2];
  __int128 v32 = v4;
  outlined init with take of AST.Node(&v37, &v28);
  outlined retain of AST.Node((uint64_t)&v37);
  if (v28 >> 60 == 6) {
    goto LABEL_11;
  }
  swift_retain();
  unint64_t v5 = specialized _ASTPrintable._dump()();
  unint64_t v7 = v6;
  swift_release();
  unint64_t v8 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000LL) == 0) {
    unint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  if (!v8)
  {
    swift_bridgeObjectRelease();
LABEL_11:
    uint64_t v9 = (char *)MEMORY[0x18961AFE8];
    goto LABEL_12;
  }

  uint64_t v9 = (char *)MEMORY[0x18961AFE8];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v9 + 2) + 1LL,  1,  v9);
  }
  unint64_t v11 = *((void *)v9 + 2);
  unint64_t v10 = *((void *)v9 + 3);
  uint64_t v12 = v11 + 1;
  if (v11 >= v10 >> 1)
  {
    Swift::String v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v10 > 1),  v11 + 1,  1,  v9);
    uint64_t v12 = v11 + 1;
    uint64_t v9 = v26;
  }

  *((void *)v9 + 2) = v12;
  unint64_t v13 = &v9[16 * v11];
  *((void *)v13 + 4) = v5;
  *((void *)v13 + 5) = v7;
LABEL_12:
  swift_arrayDestroy();
  unint64_t v14 = AST.Group._dumpBase.getter();
  unint64_t v16 = v14;
  uint64_t v17 = *((void *)v9 + 2);
  if (!v17)
  {
LABEL_20:
    swift_bridgeObjectRelease();
    return v16;
  }

  if (v17 != 1) {
    goto LABEL_17;
  }
  uint64_t v18 = HIBYTE(v15) & 0xF;
  if ((v15 & 0x2000000000000000LL) == 0) {
    uint64_t v18 = v14 & 0xFFFFFFFFFFFFLL;
  }
  if (v18)
  {
LABEL_17:
    uint64_t v27 = v14;
    v19._uint64_t countAndFlagsBits = 40LL;
    v19._uint64_t object = (void *)0xE100000000000000LL;
    String.append(_:)(v19);
    swift_getCanonicalSpecializedMetadata();
    lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type [String] and conformance [A],  (uint64_t)&unk_189B467A8,  (uint64_t)&cache variable for noncanonical specialized generic type metadata for [String],  MEMORY[0x189618458]);
    uint64_t v20 = BidirectionalCollection<>.joined(separator:)();
    unint64_t v22 = v21;
    swift_bridgeObjectRelease();
    v23._uint64_t countAndFlagsBits = v20;
    v23._uint64_t object = v22;
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    v24._uint64_t countAndFlagsBits = 41LL;
    v24._uint64_t object = (void *)0xE100000000000000LL;
    String.append(_:)(v24);
    return v27;
  }

  uint64_t result = swift_bridgeObjectRelease();
  if (*((void *)v9 + 2))
  {
    unint64_t v16 = *((void *)v9 + 4);
    swift_bridgeObjectRetain();
    goto LABEL_20;
  }

  __break(1u);
  return result;
}

{
  Swift::String *v0;
  Swift::String v1;
  String.append(_:)(v0[1]);
  v1._uint64_t countAndFlagsBits = 93LL;
  v1._uint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v1);
  return 91LL;
}

{
  Swift::String v0;
  Swift::String v1;
  uint64_t v3;
  uint64_t v3 = AST.Atom._dumpBase.getter();
  v0._uint64_t countAndFlagsBits = 45LL;
  v0._uint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v0);
  type metadata accessor for AST.CustomCharacterClass.Range(0LL);
  v1._uint64_t countAndFlagsBits = AST.Atom._dumpBase.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  return v3;
}

{
  __int128 *v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  uint64_t v20;
  void *v21;
  void *v22;
  Swift::String v23;
  Swift::String v24;
  uint64_t result;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  outlined init with take of AST.Node((void *)v0 + 13, &v38);
  uint64_t v1 = v0[7];
  uint64_t v35 = v0[6];
  uint64_t v36 = v1;
  uint64_t v37 = *((void *)v0 + 16);
  uint64_t v2 = v0[3];
  Swift::String v31 = v0[2];
  __int128 v32 = v2;
  uint64_t v3 = v0[5];
  __int128 v33 = v0[4];
  uint64_t v34 = v3;
  uint64_t v4 = v0[1];
  unint64_t v29 = *v0;
  Swift::String v30 = v4;
  outlined init with take of AST.Node(&v38, &v28);
  outlined retain of AST.Node((uint64_t)&v38);
  if (v28 >> 60 == 6) {
    goto LABEL_11;
  }
  swift_retain();
  unint64_t v5 = specialized _ASTPrintable._dump()();
  unint64_t v7 = v6;
  swift_release();
  unint64_t v8 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000LL) == 0) {
    unint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  if (!v8)
  {
    swift_bridgeObjectRelease();
LABEL_11:
    uint64_t v9 = (char *)MEMORY[0x18961AFE8];
    goto LABEL_12;
  }

  uint64_t v9 = (char *)MEMORY[0x18961AFE8];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v9 + 2) + 1LL,  1,  v9);
  }
  unint64_t v11 = *((void *)v9 + 2);
  unint64_t v10 = *((void *)v9 + 3);
  uint64_t v12 = v11 + 1;
  if (v11 >= v10 >> 1)
  {
    Swift::String v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v10 > 1),  v11 + 1,  1,  v9);
    uint64_t v12 = v11 + 1;
    uint64_t v9 = v26;
  }

  *((void *)v9 + 2) = v12;
  unint64_t v13 = &v9[16 * v11];
  *((void *)v13 + 4) = v5;
  *((void *)v13 + 5) = v7;
LABEL_12:
  swift_arrayDestroy();
  unint64_t v14 = AST.Quantification._dumpBase.getter();
  unint64_t v16 = v14;
  uint64_t v17 = *((void *)v9 + 2);
  if (!v17)
  {
LABEL_20:
    swift_bridgeObjectRelease();
    return v16;
  }

  if (v17 != 1) {
    goto LABEL_17;
  }
  uint64_t v18 = HIBYTE(v15) & 0xF;
  if ((v15 & 0x2000000000000000LL) == 0) {
    uint64_t v18 = v14 & 0xFFFFFFFFFFFFLL;
  }
  if (v18)
  {
LABEL_17:
    uint64_t v27 = v14;
    v19._uint64_t countAndFlagsBits = 40LL;
    v19._uint64_t object = (void *)0xE100000000000000LL;
    String.append(_:)(v19);
    swift_getCanonicalSpecializedMetadata();
    lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type [String] and conformance [A],  (uint64_t)&unk_189B467A8,  (uint64_t)&cache variable for noncanonical specialized generic type metadata for [String],  MEMORY[0x189618458]);
    uint64_t v20 = BidirectionalCollection<>.joined(separator:)();
    unint64_t v22 = v21;
    swift_bridgeObjectRelease();
    v23._uint64_t countAndFlagsBits = v20;
    v23._uint64_t object = v22;
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    v24._uint64_t countAndFlagsBits = 41LL;
    v24._uint64_t object = (void *)0xE100000000000000LL;
    String.append(_:)(v24);
    return v27;
  }

  uint64_t result = swift_bridgeObjectRelease();
  if (*((void *)v9 + 2))
  {
    unint64_t v16 = *((void *)v9 + 4);
    swift_bridgeObjectRetain();
    goto LABEL_20;
  }

  __break(1u);
  return result;
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  Swift::String v5;
  void *v6;
  Swift::String v7;
  uint64_t v9;
  uint64_t v1 = (void *)0xE90000000000003ELL;
  uint64_t v2 = 0x64696C61766E693CLL;
  uint64_t v3 = 0x64696C61766E693CLL;
  if ((*(_BYTE *)(v0 + 8) & 1) == 0) {
    uint64_t v3 = dispatch thunk of CustomStringConvertible.description.getter();
  }
  uint64_t v9 = v3;
  uint64_t v4 = *(_BYTE *)(v0 + 40);
  v5._uint64_t countAndFlagsBits = 46LL;
  v5._uint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v5);
  if ((v4 & 1) == 0)
  {
    uint64_t v2 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v1 = v6;
  }

  v7._uint64_t countAndFlagsBits = v2;
  v7._uint64_t object = v1;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  return v9;
}

{
  _BYTE *v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  Swift::String v4;
  if ((*v0 & 1) != 0) {
    uint64_t v1 = 15678LL;
  }
  else {
    uint64_t v1 = 61LL;
  }
  if ((*v0 & 1) != 0) {
    uint64_t v2 = 0xE200000000000000LL;
  }
  else {
    uint64_t v2 = 0xE100000000000000LL;
  }
  uint64_t v3 = v2;
  String.append(_:)(*(Swift::String *)&v1);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = specialized _ASTPrintable._dump()();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  return 0x4E4F4953524556LL;
}

uint64_t specialized _ASTPrintable._dump()(uint64_t a1, uint64_t a2)
{
  v2._uint64_t countAndFlagsBits = 34LL;
  v2._uint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v2);
  return 0x222065746F7571LL;
}

uint64_t specialized _ASTPrintable._dump()(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0) {
    return 0x64696C61766E693CLL;
  }
  else {
    return dispatch thunk of CustomStringConvertible.description.getter();
  }
}

unint64_t specialized _ASTPrintable._dump()(uint64_t a1)
{
  v2._uint64_t countAndFlagsBits = MEMORY[0x186E05488](a1, &type metadata for AST.GlobalMatchingOption);
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = 62LL;
  v3._uint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v3);
  return 0xD00000000000001DLL;
}

uint64_t specialized _ASTPrintable._dump()(char a1)
{
  return *(void *)&aEager_0[8 * a1];
}

{
  if ((a1 & 1) != 0) {
    return 15678LL;
  }
  else {
    return 61LL;
  }
}

void specialized _ASTPrintable._dump()()
{
  __asm { BR              X11 }

unint64_t sub_180FCEB08@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 - 96) = a1 & 0xFFFFFFFFFFFFFFF9LL;
  uint64_t v3 = *(void *)(v2 - 120);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Node>);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_181005EB0;
  *(void *)(v4 + 32) = v3;
  outlined retain of AST.AbsentFunction(v1);
  unint64_t v5 = 0LL;
  uint64_t v6 = (char *)MEMORY[0x18961AFE8];
  do
  {
    unint64_t v7 = v5;
    while (1)
    {
      if (v7 >= *(void *)(v4 + 16))
      {
        __break(1u);
        goto LABEL_26;
      }

      if (*(void *)(v4 + 32 + 8 * v7) >> 60 != 6LL) {
        break;
      }
LABEL_4:
      if (++v7 == 1) {
        goto LABEL_15;
      }
    }

    swift_retain();
    uint64_t v8 = specialized _ASTPrintable._dump()();
    unint64_t v10 = v9;
    swift_release();
    uint64_t v11 = HIBYTE(v10) & 0xF;
    if ((v10 & 0x2000000000000000LL) == 0) {
      uint64_t v11 = v8 & 0xFFFFFFFFFFFFLL;
    }
    if (!v11)
    {
      swift_bridgeObjectRelease();
      goto LABEL_4;
    }

    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v6 + 2) + 1LL,  1,  v6);
    }
    unint64_t v13 = *((void *)v6 + 2);
    unint64_t v12 = *((void *)v6 + 3);
    if (v13 >= v12 >> 1) {
      uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v12 > 1),  v13 + 1,  1,  v6);
    }
    unint64_t v5 = v7 + 1;
    *((void *)v6 + 2) = v13 + 1;
    unint64_t v14 = &v6[16 * v13];
    *((void *)v14 + 4) = v8;
    *((void *)v14 + 5) = v10;
  }

  while (v7);
LABEL_15:
  swift_bridgeObjectRelease();
  unint64_t v15 = AST.AbsentFunction._dumpBase.getter();
  unint64_t v17 = v15;
  uint64_t v18 = *((void *)v6 + 2);
  if (!v18)
  {
LABEL_23:
    swift_bridgeObjectRelease();
    return v17;
  }

  if (v18 == 1)
  {
    uint64_t v19 = HIBYTE(v16) & 0xF;
    if ((v16 & 0x2000000000000000LL) == 0) {
      uint64_t v19 = v15 & 0xFFFFFFFFFFFFLL;
    }
    if (!v19)
    {
      swift_bridgeObjectRelease();
      if (*((void *)v6 + 2))
      {
        unint64_t v17 = *((void *)v6 + 4);
        swift_bridgeObjectRetain();
        goto LABEL_23;
      }

uint64_t specialized _ASTPrintable._dump()(uint64_t a1, void *a2)
{
  v4._uint64_t countAndFlagsBits = a1;
  v4._uint64_t object = a2;
  String.append(_:)(v4);
  v5._uint64_t countAndFlagsBits = 62LL;
  v5._uint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v5);
  return 0x6C6F707265746E69LL;
}

uint64_t specialized _ASTPrintable._dump()(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = swift_bridgeObjectRetain();
  if (v2)
  {
    unint64_t v4 = 0LL;
    uint64_t v5 = MEMORY[0x18961AFE8];
    while (1)
    {
      uint64_t v6 = v4 <= v2 ? v2 : v4;
      unint64_t v7 = v4;
      while (1)
      {
        if (v6 == v7)
        {
          __break(1u);
          return result;
        }

        if (*(void *)(a1 + 32 + 8 * v7) >> 60 != 6LL) {
          break;
        }
LABEL_7:
        if (v2 == ++v7) {
          goto LABEL_21;
        }
      }

      swift_retain();
      uint64_t v8 = specialized _ASTPrintable._dump()();
      unint64_t v10 = v9;
      swift_release();
      uint64_t v11 = HIBYTE(v10) & 0xF;
      if ((v10 & 0x2000000000000000LL) == 0) {
        uint64_t v11 = v8 & 0xFFFFFFFFFFFFLL;
      }
      if (!v11) {
        break;
      }
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v5 + 16) + 1LL,  1,  (char *)v5);
        uint64_t v5 = result;
      }

      unint64_t v13 = *(void *)(v5 + 16);
      unint64_t v12 = *(void *)(v5 + 24);
      if (v13 >= v12 >> 1)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v12 > 1),  v13 + 1,  1,  (char *)v5);
        uint64_t v5 = result;
      }

      unint64_t v4 = v7 + 1;
      *(void *)(v5 + 16) = v13 + 1;
      unint64_t v14 = v5 + 16 * v13;
      *(void *)(v14 + 32) = v8;
      *(void *)(v14 + 40) = v10;
      if (v2 - 1 == v7) {
        goto LABEL_21;
      }
    }

    uint64_t result = swift_bridgeObjectRelease();
    goto LABEL_7;
  }

  uint64_t v5 = MEMORY[0x18961AFE8];
LABEL_21:
  swift_bridgeObjectRelease();
  uint64_t v15 = *(void *)(v5 + 16);
  if (v15)
  {
    if (v15 == 1)
    {
      uint64_t v16 = *(void *)(v5 + 32);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }

    else
    {
      v17._uint64_t countAndFlagsBits = 40LL;
      v17._uint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v17);
      swift_getCanonicalSpecializedMetadata();
      lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type [String] and conformance [A],  (uint64_t)&unk_189B467A8,  (uint64_t)&cache variable for noncanonical specialized generic type metadata for [String],  MEMORY[0x189618458]);
      uint64_t v18 = BidirectionalCollection<>.joined(separator:)();
      Swift::String v20 = v19;
      swift_bridgeObjectRelease();
      v21._uint64_t countAndFlagsBits = v18;
      v21._uint64_t object = v20;
      String.append(_:)(v21);
      swift_bridgeObjectRelease();
      v22._uint64_t countAndFlagsBits = 41LL;
      v22._uint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v22);
      return 0LL;
    }
  }

  else
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  return v16;
}

{
  unint64_t v2;
  uint64_t result;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Swift::String v21;
  uint64_t v22;
  void *v23;
  void *v24;
  Swift::String v25;
  Swift::String v26;
  void v27[2];
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = swift_bridgeObjectRetain();
  if (!v2)
  {
    uint64_t v5 = MEMORY[0x18961AFE8];
    goto LABEL_21;
  }

  unint64_t v4 = 0LL;
  uint64_t v5 = MEMORY[0x18961AFE8];
  do
  {
    if (v4 <= v2) {
      uint64_t v6 = v2;
    }
    else {
      uint64_t v6 = v4;
    }
    unint64_t v7 = v4;
    while (1)
    {
      if (v6 == v7)
      {
        __break(1u);
        goto LABEL_32;
      }

      if (*(void *)(a1 + 32 + 8 * v7) >> 60 != 6LL) {
        break;
      }
LABEL_7:
      if (v2 == ++v7) {
        goto LABEL_21;
      }
    }

    swift_retain();
    uint64_t v8 = specialized _ASTPrintable._dump()();
    unint64_t v10 = v9;
    swift_release();
    uint64_t v11 = HIBYTE(v10) & 0xF;
    if ((v10 & 0x2000000000000000LL) == 0) {
      uint64_t v11 = v8 & 0xFFFFFFFFFFFFLL;
    }
    if (!v11)
    {
      uint64_t result = swift_bridgeObjectRelease();
      goto LABEL_7;
    }

    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v5 + 16) + 1LL,  1,  (char *)v5);
      uint64_t v5 = result;
    }

    unint64_t v13 = *(void *)(v5 + 16);
    unint64_t v12 = *(void *)(v5 + 24);
    unint64_t v14 = v13 + 1;
    if (v13 >= v12 >> 1)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v12 > 1),  v13 + 1,  1,  (char *)v5);
      unint64_t v14 = v13 + 1;
      uint64_t v5 = result;
    }

    unint64_t v4 = v7 + 1;
    *(void *)(v5 + 16) = v14;
    uint64_t v15 = v5 + 16 * v13;
    *(void *)(v15 + 32) = v8;
    *(void *)(v15 + 40) = v10;
  }

  while (v2 - 1 != v7);
LABEL_21:
  swift_bridgeObjectRelease();
  strcpy((char *)v27, "alternation<");
  BYTE5(v27[1]) = 0;
  HIWORD(v27[1]) = -5120;
  v16._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  v17._uint64_t countAndFlagsBits = 62LL;
  v17._uint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v17);
  uint64_t v18 = v27[0];
  uint64_t v19 = *(void *)(v5 + 16);
  if (v19)
  {
    if (v19 != 1) {
      goto LABEL_26;
    }
    Swift::String v20 = HIBYTE(v27[1]) & 0xF;
    if ((v27[1] & 0x2000000000000000LL) == 0) {
      Swift::String v20 = v27[0] & 0xFFFFFFFFFFFFLL;
    }
    if (v20)
    {
LABEL_26:
      v21._uint64_t countAndFlagsBits = 40LL;
      v21._uint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v21);
      swift_getCanonicalSpecializedMetadata();
      lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type [String] and conformance [A],  (uint64_t)&unk_189B467A8,  (uint64_t)&cache variable for noncanonical specialized generic type metadata for [String],  MEMORY[0x189618458]);
      Swift::String v22 = BidirectionalCollection<>.joined(separator:)();
      Swift::String v24 = v23;
      swift_bridgeObjectRelease();
      v25._uint64_t countAndFlagsBits = v22;
      v25._uint64_t object = v24;
      String.append(_:)(v25);
      swift_bridgeObjectRelease();
      v26._uint64_t countAndFlagsBits = 41LL;
      v26._uint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v26);
      return v27[0];
    }

    uint64_t result = swift_bridgeObjectRelease();
    if (*(void *)(v5 + 16))
    {
      uint64_t v18 = *(void *)(v5 + 32);
      swift_bridgeObjectRetain();
      goto LABEL_29;
    }

LABEL_32:
    __break(1u);
  }

  else
  {
LABEL_29:
    swift_bridgeObjectRelease();
    return v18;
  }

  return result;
}

Swift::String __swiftcall _ASTPrintable._dump()()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t isUniquelyReferenced_nonNull_native = _ASTPrintable._children.getter(v0, v1);
  if (isUniquelyReferenced_nonNull_native)
  {
    uint64_t v6 = isUniquelyReferenced_nonNull_native;
    uint64_t v7 = *(void *)(isUniquelyReferenced_nonNull_native + 16);
    if (v7)
    {
      unint64_t v8 = 0LL;
      unint64_t v9 = (void *)MEMORY[0x18961AFE8];
      while (1)
      {
        uint64_t v34 = v9;
        unint64_t v10 = v8;
        while (1)
        {
          if (v10 >= *(void *)(v6 + 16))
          {
            __break(1u);
            goto LABEL_33;
          }

          if (*(void *)(v6 + 32 + 8 * v10) >> 60 != 6LL) {
            break;
          }
LABEL_5:
          if (v7 == ++v10)
          {
            unint64_t v9 = v34;
            goto LABEL_22;
          }
        }

        swift_retain();
        uint64_t v11 = specialized _ASTPrintable._dump()();
        unint64_t v13 = v12;
        swift_release();
        uint64_t v14 = HIBYTE(v13) & 0xF;
        if ((v13 & 0x2000000000000000LL) == 0) {
          uint64_t v14 = v11 & 0xFFFFFFFFFFFFLL;
        }
        if (!v14) {
          break;
        }
        uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v34[2] + 1LL,  1,  (char *)v34);
          uint64_t v34 = (void *)isUniquelyReferenced_nonNull_native;
        }

        unint64_t v16 = v34[2];
        unint64_t v15 = v34[3];
        unint64_t v17 = v16 + 1;
        if (v16 >= v15 >> 1)
        {
          uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v15 > 1),  v16 + 1,  1,  (char *)v34);
          unint64_t v17 = v16 + 1;
          uint64_t v34 = (void *)isUniquelyReferenced_nonNull_native;
        }

        unint64_t v8 = v10 + 1;
        v34[2] = v17;
        uint64_t v18 = &v34[2 * v16];
        v18[4] = v11;
        v18[5] = v13;
        BOOL v19 = v7 - 1 == v10;
        unint64_t v9 = v34;
        if (v19) {
          goto LABEL_22;
        }
      }

      uint64_t isUniquelyReferenced_nonNull_native = swift_bridgeObjectRelease();
      goto LABEL_5;
    }

    unint64_t v9 = (void *)MEMORY[0x18961AFE8];
LABEL_22:
    swift_bridgeObjectRelease();
    uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 24))(v3, v2);
    uint64_t v20 = v23;
    Swift::String v22 = (void *)v24;
    uint64_t v25 = v9[2];
    if (v25)
    {
      if (v25 != 1) {
        goto LABEL_27;
      }
      uint64_t v26 = HIBYTE(v24) & 0xF;
      if ((v24 & 0x2000000000000000LL) == 0) {
        uint64_t v26 = v23 & 0xFFFFFFFFFFFFLL;
      }
      if (v26)
      {
LABEL_27:
        uint64_t v35 = v23;
        uint64_t v36 = (void *)v24;
        v27._uint64_t countAndFlagsBits = 40LL;
        v27._uint64_t object = (void *)0xE100000000000000LL;
        String.append(_:)(v27);
        swift_getCanonicalSpecializedMetadata();
        lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type [String] and conformance [A],  (uint64_t)&unk_189B467A8,  (uint64_t)&cache variable for noncanonical specialized generic type metadata for [String],  MEMORY[0x189618458]);
        uint64_t v28 = BidirectionalCollection<>.joined(separator:)();
        Swift::String v30 = v29;
        swift_bridgeObjectRelease();
        v31._uint64_t countAndFlagsBits = v28;
        v31._uint64_t object = v30;
        String.append(_:)(v31);
        swift_bridgeObjectRelease();
        v32._uint64_t countAndFlagsBits = 41LL;
        v32._uint64_t object = (void *)0xE100000000000000LL;
        String.append(_:)(v32);
        uint64_t v20 = v35;
        Swift::String v22 = v36;
        goto LABEL_31;
      }

      uint64_t isUniquelyReferenced_nonNull_native = swift_bridgeObjectRelease();
      if (!v9[2])
      {
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }

      uint64_t v20 = v9[4];
      Swift::String v22 = (void *)v9[5];
      swift_bridgeObjectRetain();
    }

    swift_bridgeObjectRelease();
    goto LABEL_31;
  }

  uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 24))(v3, v2);
  Swift::String v22 = v21;
LABEL_31:
  uint64_t isUniquelyReferenced_nonNull_native = v20;
  uint64_t v5 = v22;
LABEL_34:
  result._uint64_t object = v5;
  result._uint64_t countAndFlagsBits = isUniquelyReferenced_nonNull_native;
  return result;
}

uint64_t _ASTPrintable._children.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = MEMORY[0x1895F8858](a1, a2);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v5, v8);
  unint64_t v10 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v10((char *)&v18 - v11, v3, a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ASTParent);
  if (!swift_dynamicCast())
  {
    uint64_t v21 = 0LL;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    outlined destroy of _ASTParent?((uint64_t)&v19, &demangling cache variable for type metadata for _ASTParent?);
    v10(v7, v3, a1);
    if (swift_dynamicCast())
    {
      uint64_t v18 = v19;
      AST.Node._associatedValue.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ASTNode);
      if (swift_dynamicCast())
      {
        uint64_t v15 = *((void *)&v20 + 1);
        uint64_t v16 = v21;
        __swift_project_boxed_opaque_existential_1Tm(&v19, *((uint64_t *)&v20 + 1));
        uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 16))(v15, v16);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v19);
        swift_release();
        return v14;
      }

      uint64_t v21 = 0LL;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      outlined destroy of _ASTParent?((uint64_t)&v19, &demangling cache variable for type metadata for _ASTParent?);
      swift_release();
    }

    return 0LL;
  }

  uint64_t v12 = *((void *)&v20 + 1);
  uint64_t v13 = v21;
  __swift_project_boxed_opaque_existential_1Tm(&v19, *((uint64_t *)&v20 + 1));
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 16))(v12, v13);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v19);
  return v14;
}

uint64_t AST._dumpBase.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  if (v1)
  {
    v6._uint64_t countAndFlagsBits = specialized _ASTPrintable._dump()(v1);
    v6._uint64_t object = v2;
    v3._uint64_t countAndFlagsBits = 32LL;
    v3._uint64_t object = (void *)0xE100000000000000LL;
    String.append(_:)(v3);
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
  }

  v4._uint64_t countAndFlagsBits = specialized _ASTPrintable._dump()();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  return 0LL;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST()
{
  return AST._dumpBase.getter();
}

uint64_t AST.Node._dumpBase.getter()
{
  uint64_t v0 = v5;
  uint64_t v1 = v6;
  __swift_project_boxed_opaque_existential_1Tm(v4, v5);
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)(v1 + 8) + 24LL))(v0);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v4);
  return v2;
}

uint64_t protocol witness for _ASTPrintable._dumpBase.getter in conformance AST.Node()
{
  uint64_t v0 = v5;
  uint64_t v1 = v6;
  __swift_project_boxed_opaque_existential_1Tm(v4, v5);
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)(v1 + 8) + 24LL))(v0);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v4);
  return v2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST.Node()
{
  return specialized _ASTPrintable._dump()();
}

uint64_t AST.Conditional.Condition._dumpBase.getter()
{
  uint64_t v3 = 0LL;
  unint64_t v4 = 0xE000000000000000LL;
  outlined init with take of AST.Conditional.Condition.Kind(v5, v2);
  _print_unlocked<A, B>(_:_:)();
  return v3;
}

uint64_t protocol witness for _ASTPrintable._dumpBase.getter in conformance AST.Conditional.Condition()
{
  uint64_t v3 = 0LL;
  unint64_t v4 = 0xE000000000000000LL;
  outlined init with take of AST.Conditional.Condition.Kind(v5, v2);
  _print_unlocked<A, B>(_:_:)();
  return v3;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST.Conditional.Condition( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AST.Conditional.Condition and conformance AST.Conditional.Condition();
  return (*(uint64_t (**)(uint64_t, unint64_t))(v2 + 24))(a1, v2);
}

uint64_t AST.Conditional.Condition.PCREVersionCheck.Kind._dumpBase.getter()
{
  if (*v0) {
    return 15678LL;
  }
  else {
    return 61LL;
  }
}

uint64_t protocol witness for _ASTPrintable._dumpBase.getter in conformance AST.Conditional.Condition.PCREVersionCheck.Kind()
{
  if (*v0) {
    return 15678LL;
  }
  else {
    return 61LL;
  }
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST.Conditional.Condition.PCREVersionCheck.Kind()
{
  return specialized _ASTPrintable._dump()(*v0);
}

uint64_t AST.Conditional.Condition.PCREVersionNumber._dumpBase.getter()
{
  uint64_t v1 = (void *)0xE90000000000003ELL;
  uint64_t v2 = 0x64696C61766E693CLL;
  char v3 = *(_BYTE *)(v0 + 40);
  uint64_t v4 = 0x64696C61766E693CLL;
  if ((*(_BYTE *)(v0 + 8) & 1) == 0) {
    uint64_t v4 = dispatch thunk of CustomStringConvertible.description.getter();
  }
  uint64_t v9 = v4;
  v5._uint64_t countAndFlagsBits = 46LL;
  v5._uint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v5);
  if ((v3 & 1) == 0)
  {
    uint64_t v2 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v1 = v6;
  }

  v7._uint64_t countAndFlagsBits = v2;
  v7._uint64_t object = v1;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST.Conditional.Condition.PCREVersionNumber()
{
  return specialized _ASTPrintable._dump()();
}

uint64_t AST.Conditional.Condition.PCREVersionCheck._dumpBase.getter()
{
  if (*v0) {
    uint64_t v1 = 15678LL;
  }
  else {
    uint64_t v1 = 61LL;
  }
  if (*v0) {
    unint64_t v2 = 0xE200000000000000LL;
  }
  else {
    unint64_t v2 = 0xE100000000000000LL;
  }
  unint64_t v3 = v2;
  String.append(_:)(*(Swift::String *)&v1);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = specialized _ASTPrintable._dump()();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  return 0x4E4F4953524556LL;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST.Conditional.Condition.PCREVersionCheck()
{
  return specialized _ASTPrintable._dump()();
}

uint64_t AST.Reference._dumpBase.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  char v2 = *(_BYTE *)(v0 + 72);
  _print_unlocked<A, B>(_:_:)();
  uint64_t result = 0LL;
  if ((v2 & 1) == 0)
  {
    if ((v1 & 1) != 0)
    {
      unint64_t v6 = 0xE90000000000003ELL;
      uint64_t v4 = 0x64696C61766E693CLL;
    }

    else
    {
      uint64_t v4 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v6 = v5;
    }

    unint64_t v7 = v6;
    String.append(_:)(*(Swift::String *)&v4);
    swift_bridgeObjectRelease();
    return 0LL;
  }

  return result;
}

uint64_t AST.Atom.Number._dumpBase.getter()
{
  if ((*(_BYTE *)(v0 + 8) & 1) != 0) {
    return 0x64696C61766E693CLL;
  }
  else {
    return dispatch thunk of CustomStringConvertible.description.getter();
  }
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST.Atom.Number()
{
  return specialized _ASTPrintable._dump()(*(void *)v0, *(_BYTE *)(v0 + 8));
}

uint64_t AST.Atom.Callout._dumpBase.getter()
{
  int v1 = _s12_RegexParser3ASTV4AtomV7CalloutOWOg((uint64_t)v5);
  if (v1)
  {
    if (v1 == 1)
    {
      AST.root.modify(v5);
      return AST.Atom.Callout.OnigurumaNamed._dumpBase.getter();
    }

    else
    {
      AST.root.modify(v5);
      return AST.Atom.Callout.OnigurumaOfContents._dumpBase.getter();
    }
  }

  else
  {
    AST.root.modify(v5);
    unint64_t v3 = lazy protocol witness table accessor for type AST.Atom.Callout.PCRE and conformance AST.Atom.Callout.PCRE();
    return (*(uint64_t (**)(ValueMetadata *, unint64_t))(v3 + 24))( &type metadata for AST.Atom.Callout.PCRE,  v3);
  }

uint64_t protocol witness for _ASTPrintable._dumpBase.getter in conformance AST.Atom.Callout()
{
  int v1 = _s12_RegexParser3ASTV4AtomV7CalloutOWOg((uint64_t)v5);
  if (v1)
  {
    if (v1 == 1)
    {
      AST.root.modify(v5);
      return AST.Atom.Callout.OnigurumaNamed._dumpBase.getter();
    }

    else
    {
      AST.root.modify(v5);
      return AST.Atom.Callout.OnigurumaOfContents._dumpBase.getter();
    }
  }

  else
  {
    AST.root.modify(v5);
    unint64_t v3 = lazy protocol witness table accessor for type AST.Atom.Callout.PCRE and conformance AST.Atom.Callout.PCRE();
    return (*(uint64_t (**)(ValueMetadata *, unint64_t))(v3 + 24))( &type metadata for AST.Atom.Callout.PCRE,  v3);
  }

uint64_t AST.Atom.Callout.PCRE._dumpBase.getter()
{
  v0._uint64_t countAndFlagsBits = 0x6C61632045524350LL;
  v0._uint64_t object = (void *)0xED00002074756F6CLL;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  return 0LL;
}

uint64_t protocol witness for _ASTPrintable._dumpBase.getter in conformance AST.Atom.Callout.PCRE()
{
  v0._uint64_t countAndFlagsBits = 0x6C61632045524350LL;
  v0._uint64_t object = (void *)0xED00002074756F6CLL;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  return 0LL;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST.Atom.Callout.PCRE( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AST.Atom.Callout.PCRE and conformance AST.Atom.Callout.PCRE();
  return (*(uint64_t (**)(uint64_t, unint64_t))(v2 + 24))(a1, v2);
}

uint64_t AST.Atom.Callout.OnigurumaTag._dumpBase.getter()
{
  v1._uint64_t countAndFlagsBits = 93LL;
  v1._uint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v1);
  return 91LL;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST.Atom.Callout.OnigurumaTag()
{
  return specialized _ASTPrintable._dump()();
}

uint64_t AST.Atom.Callout.OnigurumaNamed.ArgList._dumpBase.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  int64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v16 = MEMORY[0x18961AFE8];
    uint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v2,  0);
    unint64_t v4 = 0LL;
    unint64_t v5 = (uint64_t *)(v1 + 40);
    while (v4 < *(void *)(v1 + 16))
    {
      uint64_t v7 = *(v5 - 1);
      uint64_t v6 = *v5;
      unint64_t v9 = *(void *)(v16 + 16);
      unint64_t v8 = *(void *)(v16 + 24);
      uint64_t result = swift_bridgeObjectRetain();
      if (v9 >= v8 >> 1) {
        uint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v8 > 1),  v9 + 1,  1);
      }
      ++v4;
      *(void *)(v16 + 16) = v9 + 1;
      uint64_t v10 = v16 + 16 * v9;
      *(void *)(v10 + 32) = v7;
      *(void *)(v10 + 40) = v6;
      v5 += 4;
      if (v2 == v4) {
        goto LABEL_7;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_7:
    swift_getCanonicalSpecializedMetadata();
    lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type [String] and conformance [A],  (uint64_t)&unk_189B467A8,  (uint64_t)&cache variable for noncanonical specialized generic type metadata for [String],  MEMORY[0x189618458]);
    uint64_t v11 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v13 = v12;
    swift_bridgeObjectRelease();
    v14._uint64_t countAndFlagsBits = v11;
    v14._uint64_t object = v13;
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    v15._uint64_t countAndFlagsBits = 125LL;
    v15._uint64_t object = (void *)0xE100000000000000LL;
    String.append(_:)(v15);
    return 123LL;
  }

  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST.Atom.Callout.OnigurumaNamed.ArgList()
{
  return AST.Atom.Callout.OnigurumaNamed.ArgList._dumpBase.getter();
}

unint64_t AST.Atom.Callout.OnigurumaNamed._dumpBase.getter()
{
  uint64_t v1 = *v0;
  int64_t v2 = (void *)v0[1];
  uint64_t v3 = v0[7];
  uint64_t v4 = v0[14];
  _StringGuts.grow(_:)(26LL);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = v1;
  v5._uint64_t object = v2;
  String.append(_:)(v5);
  if (v3)
  {
    v6._uint64_t countAndFlagsBits = specialized _ASTPrintable._dump()();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
  }

  if (v4)
  {
    v7._uint64_t countAndFlagsBits = AST.Atom.Callout.OnigurumaNamed.ArgList._dumpBase.getter();
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
  }

  return 0xD000000000000018LL;
}

unint64_t AST.Atom.Callout.OnigurumaOfContents._dumpBase.getter()
{
  uint64_t v1 = v0[2];
  int64_t v2 = (void *)v0[3];
  uint64_t v3 = v0[11];
  _StringGuts.grow(_:)(34LL);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = v1;
  v4._uint64_t object = v2;
  String.append(_:)(v4);
  v5._uint64_t countAndFlagsBits = 125LL;
  v5._uint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v5);
  if (v3)
  {
    v6._uint64_t countAndFlagsBits = specialized _ASTPrintable._dump()();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
  }

  v7._uint64_t countAndFlagsBits = 32LL;
  v7._uint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v7);
  _print_unlocked<A, B>(_:_:)();
  v8._uint64_t countAndFlagsBits = 0LL;
  v8._uint64_t object = (void *)0xE000000000000000LL;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  return 0xD00000000000001FLL;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST.Reference()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(void *)(v0 + 48);
  char v3 = *(_BYTE *)(v0 + 72);
  _print_unlocked<A, B>(_:_:)();
  uint64_t result = 0LL;
  if ((v3 & 1) == 0)
  {
    v5._uint64_t countAndFlagsBits = specialized _ASTPrintable._dump()(v1, v2 & 1);
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    return 0LL;
  }

  return result;
}

void AST.Group.Kind._dumpBase.getter()
{
  __asm { BR              X10 }

uint64_t sub_180FD0AF8( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34)
{
  v36._uint64_t countAndFlagsBits = v34;
  v36._uint64_t object = v35;
  String.append(_:)(v36);
  v37._uint64_t countAndFlagsBits = 62LL;
  v37._uint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v37);
  return 0x3C65727574706163LL;
}

void sub_180FD0C60()
{
}

void protocol witness for CustomStringConvertible.description.getter in conformance AST.Group.Kind()
{
}

uint64_t AST.Group._dumpBase.getter()
{
  return 0x5F70756F7267LL;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST.Group()
{
  return specialized _ASTPrintable._dump()();
}

void AST.Quantification.Amount._printBase.getter()
{
}

void AST.Quantification.Amount._canonicalBase.getter()
{
  __asm { BR              X15 }

uint64_t sub_180FD0FB4()
{
  if ((v0 & 1) != 0)
  {
    uint64_t v1 = 0x7265626D756E233CLL;
    unint64_t v2 = 0xEA00000000003E23LL;
  }

  else
  {
    uint64_t v1 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v2 = v3;
  }

  unint64_t v4 = v2;
  String.append(_:)(*(Swift::String *)&v1);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = 125LL;
  v5._uint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v5);
  return 123LL;
}

void AST.Quantification.Amount._dumpBase.getter()
{
  __asm { BR              X15 }

uint64_t sub_180FD1238()
{
  if ((v0 & 1) != 0)
  {
    uint64_t v1 = 0x64696C61766E693CLL;
    unint64_t v3 = 0xE90000000000003ELL;
  }

  else
  {
    uint64_t v1 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v3 = v2;
  }

  unint64_t v4 = v3;
  String.append(_:)(*(Swift::String *)&v1);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = 62LL;
  v5._uint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v5);
  return 0x3C796C7463617865LL;
}

void protocol witness for CustomStringConvertible.description.getter in conformance AST.Quantification.Amount()
{
}

uint64_t AST.Quantification.Kind._printBase.getter()
{
  uint64_t v1 = 63LL;
  if (*v0 != 1) {
    uint64_t v1 = 43LL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return *v0;
  }
}

uint64_t AST.Quantification.Kind._dumpBase.getter()
{
  return *(void *)&aEager_0[8 * *v0];
}

uint64_t protocol witness for _ASTPrintable._dumpBase.getter in conformance AST.Quantification.Kind()
{
  return *(void *)&aEager_0[8 * *v0];
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST.Quantification.Kind()
{
  return specialized _ASTPrintable._dump()(*v0);
}

uint64_t AST.Quantification._printBase.getter()
{
  uint64_t v1 = *(unsigned __int8 *)(v0 + 80);
  AST.Quantification.Amount._canonicalBase.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  uint64_t v3 = 63LL;
  if ((_DWORD)v1 != 1) {
    uint64_t v3 = 43LL;
  }
  if ((_DWORD)v1) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = v1;
  }
  if ((_DWORD)v1) {
    unint64_t v5 = 0xE100000000000000LL;
  }
  else {
    unint64_t v5 = 0xE000000000000000LL;
  }
  unint64_t v6 = v5;
  String.append(_:)(*(Swift::String *)&v4);
  swift_bridgeObjectRelease();
  return 0x5F746E617571LL;
}

uint64_t AST.Quantification._dumpBase.getter()
{
  uint64_t v1 = *(char *)(v0 + 80);
  AST.Quantification.Amount._dumpBase.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = 95LL;
  v3._uint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v3);
  v4._uint64_t countAndFlagsBits = *(void *)&aEager_0[8 * v1];
  v4._uint64_t object = *(void **)&aReluctanposses[8 * v1 + 16];
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  return 0x5F746E617571LL;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST.Quantification()
{
  return specialized _ASTPrintable._dump()();
}

unint64_t AST.CustomCharacterClass._dumpBase.getter()
{
  int v1 = *v0;
  v15[0] = 0LL;
  v15[1] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(38LL);
  swift_bridgeObjectRelease();
  unint64_t v16 = 0xD00000000000001FLL;
  unint64_t v17 = 0x8000000181007170LL;
  if (v1 == 1)
  {
    swift_bridgeObjectRelease();
  }

  else
  {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v2 & 1) == 0)
    {
      unint64_t v3 = 0xE500000000000000LL;
      uint64_t v4 = 0x65736C6166LL;
      goto LABEL_6;
    }
  }

  unint64_t v3 = 0xE400000000000000LL;
  uint64_t v4 = 1702195828LL;
LABEL_6:
  unint64_t v5 = v3;
  String.append(_:)(*(Swift::String *)&v4);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 8236LL;
  v6._uint64_t object = (void *)0xE200000000000000LL;
  String.append(_:)(v6);
  AST.CustomCharacterClass.strippingTriviaShallow.getter((uint64_t)v15);
  uint64_t v7 = v15[3];
  uint64_t v8 = type metadata accessor for AST.CustomCharacterClass.Member(0LL);
  uint64_t v9 = MEMORY[0x186E05488](v7, v8);
  uint64_t v11 = v10;
  swift_bridgeObjectRelease();
  v12._uint64_t countAndFlagsBits = v9;
  v12._uint64_t object = v11;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._uint64_t countAndFlagsBits = 41LL;
  v13._uint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v13);
  return v16;
}

__n128 protocol witness for _ASTNode.location.getter in conformance AST.CustomCharacterClass@<Q0>( __n128 *a1@<X8>)
{
  __n128 result = v1[2];
  *a1 = result;
  return result;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST.CustomCharacterClass()
{
  return AST.CustomCharacterClass._dumpBase.getter();
}

void AST.CustomCharacterClass.Member._dumpBase.getter()
{
  uint64_t v1 = type metadata accessor for AST.CustomCharacterClass.Range(0LL);
  MEMORY[0x1895F8858](v1, v2);
  uint64_t v3 = type metadata accessor for AST.Atom(0LL);
  MEMORY[0x1895F8858](v3, v4);
  uint64_t v5 = type metadata accessor for AST.CustomCharacterClass.Member(0LL);
  v26[8] = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1895F8858](v5, v6);
  v26[6] = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = MEMORY[0x1895F8858](v7, v9);
  v26[1] = (char *)v26 - v11;
  uint64_t v13 = MEMORY[0x1895F8858](v10, v12);
  void v26[2] = (char *)v26 - v14;
  uint64_t v16 = MEMORY[0x1895F8858](v13, v15);
  v26[7] = (char *)v26 - v17;
  uint64_t v19 = MEMORY[0x1895F8858](v16, v18);
  uint64_t v21 = MEMORY[0x1895F8858](v19, v20);
  MEMORY[0x1895F8858](v21, v22);
  outlined init with copy of AST.Atom(v0, (uint64_t)v26 - v23, v24);
  uint64_t v25 = (char *)&loc_180FD1A4C + dword_180FD1EFC[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }

unint64_t sub_180FD1A5C()
{
  uint64_t v2 = *(void *)(v0 + 24);
  *(_BYTE *)(v1 - 136) = *(_BYTE *)v0;
  *(_OWORD *)(v1 - 128) = *(_OWORD *)(v0 + 8);
  *(void *)(v1 - 112) = v2;
  *(_OWORD *)(v1 - 104) = *(_OWORD *)(v0 + 32);
  unint64_t v3 = AST.CustomCharacterClass._dumpBase.getter();
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t AST.CustomCharacterClass.Range._dumpBase.getter()
{
  uint64_t v3 = AST.Atom._dumpBase.getter();
  v0._uint64_t countAndFlagsBits = 45LL;
  v0._uint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v0);
  type metadata accessor for AST.CustomCharacterClass.Range(0LL);
  v1._uint64_t countAndFlagsBits = AST.Atom._dumpBase.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t protocol witness for _ASTPrintable._dumpBase.getter in conformance AST.CustomCharacterClass.Range()
{
  uint64_t v3 = AST.Atom._dumpBase.getter();
  v0._uint64_t countAndFlagsBits = 45LL;
  v0._uint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v0);
  v1._uint64_t countAndFlagsBits = AST.Atom._dumpBase.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t AST.Atom.BacktrackingDirective._dumpBase.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void **)(v0 + 32);
  _print_unlocked<A, B>(_:_:)();
  uint64_t result = 0LL;
  if (v2)
  {
    v4._uint64_t countAndFlagsBits = v1;
    v4._uint64_t object = v2;
    String.append(_:)(v4);
    v5._uint64_t countAndFlagsBits = 8250LL;
    v5._uint64_t object = (void *)0xE200000000000000LL;
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    return 0LL;
  }

  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST.Atom.BacktrackingDirective()
{
  return AST.Atom.BacktrackingDirective._dumpBase.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST.Group.BalancedCapture( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return AST.Group.BalancedCapture._canonicalBase.getter(a1, a2, a3, a4, a5, a6, a7, a8, *v8, v8[1]);
}

uint64_t AST.AbsentFunction.Kind._dumpBase.getter()
{
  return *(void *)&aRepeaterexpres[8 * ((*(unsigned __int8 *)(v0 + 24) >> 1) & 3)];
}

void AST.GlobalMatchingOption.Kind._dumpBase.getter()
{
}

void AST.GlobalMatchingOption.Kind._canonicalBase.getter()
{
  __asm { BR              X12 }

uint64_t sub_180FD21B4()
{
  if ((v0 & 1) != 0)
  {
    uint64_t v1 = 0x7265626D756E233CLL;
    unint64_t v2 = 0xEA00000000003E23LL;
  }

  else
  {
    uint64_t v1 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v2 = v3;
  }

  unint64_t v4 = v2;
  String.append(_:)(*(Swift::String *)&v1);
  swift_bridgeObjectRelease();
  return 0x45445F54494D494CLL;
}

void protocol witness for _ASTPrintable._dumpBase.getter in conformance AST.GlobalMatchingOption.Kind()
{
}

void AST.GlobalMatchingOption._dumpBase.getter()
{
}

unint64_t AST.GlobalMatchingOptionSequence._dumpBase.getter()
{
  uint64_t v1 = *v0;
  _StringGuts.grow(_:)(32LL);
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = MEMORY[0x186E05488](v1, &type metadata for AST.GlobalMatchingOption);
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = 62LL;
  v3._uint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v3);
  return 0xD00000000000001DLL;
}

unint64_t protocol witness for _ASTPrintable._dumpBase.getter in conformance AST.GlobalMatchingOptionSequence()
{
  uint64_t v1 = *v0;
  _StringGuts.grow(_:)(32LL);
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = MEMORY[0x186E05488](v1, &type metadata for AST.GlobalMatchingOption);
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = 62LL;
  v3._uint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v3);
  return 0xD00000000000001DLL;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST.GlobalMatchingOptionSequence()
{
  return specialized _ASTPrintable._dump()(*v0);
}

uint64_t PrettyPrinter.maxTopDownLevels.getter()
{
  return *(void *)v0;
}

uint64_t PrettyPrinter.maxTopDownLevels.setter(uint64_t result, char a2)
{
  *(void *)uint64_t v2 = result;
  *(_BYTE *)(v2 + 8) = a2 & 1;
  return result;
}

uint64_t (*PrettyPrinter.maxTopDownLevels.modify())()
{
  return AST.root.modify;
}

uint64_t PrettyPrinter.minBottomUpLevels.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t PrettyPrinter.minBottomUpLevels.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 16) = result;
  *(_BYTE *)(v2 + 24) = a2 & 1;
  return result;
}

uint64_t (*PrettyPrinter.minBottomUpLevels.modify())()
{
  return AST.root.modify;
}

uint64_t PrettyPrinter.indentWidth.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t PrettyPrinter.indentWidth.setter(uint64_t result)
{
  *(void *)(v1 + 32) = result;
  return result;
}

uint64_t (*PrettyPrinter.indentWidth.modify())()
{
  return AST.root.modify;
}

void PrettyPrinter.quantificationBehavior.getter(_BYTE *a1@<X8>)
{
  *a1 = *(_BYTE *)(v1 + 72);
}

_BYTE *PrettyPrinter.quantificationBehavior.setter(_BYTE *result)
{
  *(_BYTE *)(v1 + 72) = *result;
  return result;
}

uint64_t (*PrettyPrinter.quantificationBehavior.modify())()
{
  return AST.root.modify;
}

uint64_t PrettyPrinter.inlineMatchingOptions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PrettyPrinter.inlineMatchingOptions.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 80) = a1;
  return result;
}

uint64_t (*PrettyPrinter.inlineMatchingOptions.modify())()
{
  return AST.root.modify;
}

void __swiftcall PrettyPrinter.init(maxTopDownLevels:minBottomUpLevels:)( _RegexParser::PrettyPrinter *__return_ptr retstr, Swift::Int_optional maxTopDownLevels, Swift::Int_optional minBottomUpLevels)
{
  retstr->maxTopDownLevels.value = maxTopDownLevels.value;
  retstr->maxTopDownLevels.is_nil = maxTopDownLevels.is_nil;
  retstr->minBottomUpLevels.value = minBottomUpLevels.value;
  retstr->minBottomUpLevels.is_nil = minBottomUpLevels.is_nil;
  *(_OWORD *)&retstr->indentWidth = xmmword_181005EE0;
  retstr->result._uint64_t object = (void *)0xE000000000000000LL;
  retstr->startOfLine = 1;
  retstr->Swift::Int indentLevel = 0LL;
  retstr->quantificationBehavior = _RegexParser_AST_Quantification_Kind_eager;
  retstr->inlineMatchingOptions._rawValue = (void *)MEMORY[0x18961AFE8];
}

Swift::Void __swiftcall PrettyPrinter.output(_:)(Swift::String a1)
{
}

Swift::Void __swiftcall PrettyPrinter.terminateLine()()
{
  v1._uint64_t countAndFlagsBits = 10LL;
  v1._uint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v1);
  *(_BYTE *)(v0 + 56) = 1;
}

Swift::Void __swiftcall PrettyPrinter.indent()()
{
  if (*(_BYTE *)(v0 + 56) == 1)
  {
    if ((unsigned __int128)(*(uint64_t *)(v0 + 64) * (__int128)*(uint64_t *)(v0 + 32)) >> 64 == (uint64_t)(*(void *)(v0 + 64) * *(void *)(v0 + 32)) >> 63)
    {
      v1._uint64_t countAndFlagsBits = MEMORY[0x186E053EC](32LL, 0xE100000000000000LL);
      String.append(_:)(v1);
      swift_bridgeObjectRelease();
      *(_BYTE *)(v0 + 56) = 0;
    }

    else
    {
      __break(1u);
    }
  }

uint64_t PrettyPrinter.depth.getter()
{
  return *(void *)(v0 + 64);
}

void PrettyPrinter.printLine(_:)(uint64_t a1)
{
  uint64_t v2 = (uint64_t (*)(uint64_t))a1;
  if (*(_BYTE *)(v1 + 56) == 1)
  {
    if ((unsigned __int128)(*(uint64_t *)(v1 + 64) * (__int128)*(uint64_t *)(v1 + 32)) >> 64 != (uint64_t)(*(void *)(v1 + 64) * *(void *)(v1 + 32)) >> 63)
    {
      __break(1u);
      return;
    }

    v3._uint64_t countAndFlagsBits = MEMORY[0x186E053EC](32LL, 0xE100000000000000LL);
    String.append(_:)(v3);
    a1 = swift_bridgeObjectRelease();
    *(_BYTE *)(v1 + 56) = 0;
  }

  uint64_t v4 = v2(a1);
  if (v5)
  {
    uint64_t v6 = v5;
    do
    {
      uint64_t v7 = v6;
      String.append(_:)(*(Swift::String *)&v4);
      uint64_t v8 = swift_bridgeObjectRelease();
      uint64_t v4 = v2(v8);
      uint64_t v6 = v9;
    }

    while (v9);
  }

  v10._uint64_t countAndFlagsBits = 10LL;
  v10._uint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v10);
  *(_BYTE *)(v1 + 56) = 1;
}

uint64_t (*PrettyPrinter.printIndented(_:)(uint64_t (*result)(uint64_t)))(uint64_t)
{
  uint64_t v2 = *(void *)(v1 + 64);
  BOOL v3 = __OFADD__(v2, 1LL);
  uint64_t v4 = v2 + 1;
  if (v3)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v1 + 64) = v4;
    uint64_t result = (uint64_t (*)(uint64_t))result(v1);
    uint64_t v5 = *(void *)(v1 + 64);
    BOOL v3 = __OFSUB__(v5, 1LL);
    uint64_t v6 = v5 - 1;
    if (!v3)
    {
      *(void *)(v1 + 64) = v6;
      return result;
    }
  }

  __break(1u);
  return result;
}

Swift::Void __swiftcall PrettyPrinter.pushMatchingOptions(_:isAdded:)(Swift::OpaquePointer _, Swift::Bool isAdded)
{
  uint64_t v6 = *(void *)(v3 + 64);
  BOOL v7 = __OFADD__(v6, 1LL);
  uint64_t v8 = v6 + 1;
  if (v7)
  {
    __break(1u);
  }

  else
  {
    Swift::Bool v2 = isAdded;
    rawValue = _._rawValue;
    *(void *)(v3 + 64) = v8;
    uint64_t v5 = *(void **)(v3 + 80);
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0) {
      goto LABEL_3;
    }
  }

  uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v5[2] + 1LL,  1,  v5);
LABEL_3:
  unint64_t v10 = v5[2];
  unint64_t v9 = v5[3];
  if (v10 >= v9 >> 1) {
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v9 > 1),  v10 + 1,  1,  v5);
  }
  __int128 v5[2] = v10 + 1;
  uint64_t v11 = &v5[2 * v10];
  v11[4] = rawValue;
  *((_BYTE *)v11 + 40) = v2;
  *(void *)(v3 + 80) = v5;
}

Swift::tuple_OpaquePointer_Bool __swiftcall PrettyPrinter.popMatchingOptions()()
{
  uint64_t v2 = *(void *)(v1 + 64);
  BOOL v3 = __OFSUB__(v2, 1LL);
  uint64_t v4 = v2 - 1;
  if (v3)
  {
    __break(1u);
    goto LABEL_7;
  }

  *(void *)(v1 + 64) = v4;
  uint64_t v0 = *(void **)(v1 + 80);
  if (!v0[2])
  {
LABEL_7:
    __break(1u);
LABEL_8:
    uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v0);
    uint64_t v0 = (void *)isUniquelyReferenced_nonNull_native;
    uint64_t v7 = *(void *)(isUniquelyReferenced_nonNull_native + 16);
    if (v7) {
      goto LABEL_5;
    }
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    goto LABEL_8;
  }
  uint64_t v7 = v0[2];
  if (!v7) {
    goto LABEL_9;
  }
LABEL_5:
  uint64_t v8 = v7 - 1;
  unint64_t v9 = &v0[2 * v8];
  uint64_t isUniquelyReferenced_nonNull_native = v9[4];
  char v6 = *((_BYTE *)v9 + 40);
  v0[2] = v8;
  *(void *)(v1 + 80) = v0;
LABEL_10:
  result._0._rawValue = (void *)isUniquelyReferenced_nonNull_native;
  result._1 = v6;
  return result;
}

Swift::String __swiftcall AST.renderAsCanonical(showDelimiters:terminateLine:)( Swift::Bool showDelimiters, Swift::Bool terminateLine)
{
  uint64_t v3 = *((void *)v2 + 2);
  uint64_t v11 = 0LL;
  char v12 = 1;
  uint64_t v13 = 0LL;
  char v14 = 1;
  __int128 v15 = xmmword_181005EE0;
  unint64_t v16 = 0xE000000000000000LL;
  char v17 = 1;
  uint64_t v18 = 0LL;
  char v19 = 0;
  uint64_t v20 = MEMORY[0x18961AFE8];
  __int128 v9 = *v2;
  uint64_t v10 = v3;
  PrettyPrinter.printAsCanonical(_:delimiters:terminateLine:)((uint64_t *)&v9, showDelimiters, terminateLine);
  uint64_t v4 = *((void *)&v15 + 1);
  uint64_t v5 = (void *)v16;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = v4;
  uint64_t v7 = v5;
  result._uint64_t object = v7;
  result._uint64_t countAndFlagsBits = v6;
  return result;
}

void PrettyPrinter.printAsCanonical(_:delimiters:terminateLine:)(uint64_t *a1, char a2, char a3)
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  if (*(_BYTE *)(v3 + 56) == 1)
  {
    if ((unsigned __int128)(*(uint64_t *)(v3 + 64) * (__int128)*(uint64_t *)(v3 + 32)) >> 64 != (uint64_t)(*(void *)(v3 + 64) * *(void *)(v3 + 32)) >> 63)
    {
      __break(1u);
      return;
    }

    v8._uint64_t countAndFlagsBits = MEMORY[0x186E053EC](32LL, 0xE100000000000000LL);
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    *(_BYTE *)(v3 + 56) = 0;
  }

  if ((a2 & 1) != 0)
  {
    v9._uint64_t countAndFlagsBits = 12071LL;
    v9._uint64_t object = (void *)0xE200000000000000LL;
    String.append(_:)(v9);
  }

  if (v7)
  {
    uint64_t v12 = v7;
    PrettyPrinter.outputAsCanonical(_:)((_RegexParser::AST::GlobalMatchingOptionSequence)&v12);
  }

  uint64_t v12 = v6;
  PrettyPrinter.outputAsCanonical(_:)((uint64_t)&v12);
  if ((a2 & 1) != 0)
  {
    v10._uint64_t countAndFlagsBits = 10031LL;
    v10._uint64_t object = (void *)0xE200000000000000LL;
    String.append(_:)(v10);
  }

  if ((a3 & 1) != 0)
  {
    v11._uint64_t countAndFlagsBits = 10LL;
    v11._uint64_t object = (void *)0xE100000000000000LL;
    String.append(_:)(v11);
    *(_BYTE *)(v3 + 56) = 1;
  }

Swift::String __swiftcall AST.Node.renderAsCanonical(showDelimiters:terminateLine:)( Swift::Bool showDelimiters, Swift::Bool terminateLine)
{
  uint64_t v5 = *v2;
  v11[3] = 0LL;
  char v12 = 1;
  uint64_t v13 = 0LL;
  char v14 = 1;
  __int128 v15 = xmmword_181005EE0;
  unint64_t v16 = 0xE000000000000000LL;
  char v17 = 1;
  uint64_t v18 = 0LL;
  char v19 = 0;
  uint64_t v20 = MEMORY[0x18961AFE8];
  v11[0] = v5;
  v11[1] = 0LL;
  void v11[2] = MEMORY[0x18961AFE8];
  swift_retain();
  PrettyPrinter.printAsCanonical(_:delimiters:terminateLine:)(v11, showDelimiters, terminateLine);
  uint64_t v6 = *((void *)&v15 + 1);
  uint64_t v7 = (void *)v16;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = v6;
  Swift::String v9 = v7;
  result._uint64_t object = v9;
  result._uint64_t countAndFlagsBits = v8;
  return result;
}

Swift::Void __swiftcall PrettyPrinter.outputAsCanonical(_:)(_RegexParser::AST::GlobalMatchingOptionSequence a1)
{
  uint64_t v1 = *(void *)a1.options._rawValue;
  uint64_t v2 = *(void *)(*(void *)a1.options._rawValue + 16LL);
  if (v2)
  {
    unint64_t v3 = 0LL;
    uint64_t v4 = v1 + 48;
    while (v3 < *(void *)(v1 + 16))
    {
      ++v3;
      AST.GlobalMatchingOption.Kind._canonicalBase.getter();
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      v6._uint64_t countAndFlagsBits = 41LL;
      v6._uint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v6);
      v7._uint64_t countAndFlagsBits = 10792LL;
      v7._uint64_t object = (void *)0xE200000000000000LL;
      String.append(_:)(v7);
      swift_bridgeObjectRelease();
      v4 += 48LL;
      if (v2 == v3) {
        return;
      }
    }

    __break(1u);
  }

void PrettyPrinter.outputAsCanonical(_:)(uint64_t a1)
{
  uint64_t v20 = type metadata accessor for AST.CustomCharacterClass.Range(0LL);
  uint64_t v3 = MEMORY[0x1895F8858](v20, v2);
  v19[14] = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = MEMORY[0x1895F8858](v3, v5);
  uint64_t v19[6] = (char *)v19 - v7;
  MEMORY[0x1895F8858](v6, v8);
  uint64_t v22 = type metadata accessor for AST.CustomCharacterClass.Member(0LL);
  uint64_t v10 = MEMORY[0x1895F8858](v22, v9);
  uint64_t v12 = MEMORY[0x1895F8858](v10, v11);
  v19[7] = (char *)v19 - v13;
  MEMORY[0x1895F8858](v12, v14);
  v19[9] = (char *)v19 - v15;
  uint64_t v16 = type metadata accessor for AST.Atom(0LL);
  MEMORY[0x1895F8858](v16, v17);
  uint64_t v21 = (char *)v19 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __asm { BR              X11 }

void sub_180FD2F28(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    unint64_t v4 = 0LL;
    uint64_t v5 = v3 - 1;
    while (1)
    {
      *(void *)(v1 - 240) = *(void *)(v2 + 32 + 8 * v4);
      PrettyPrinter.outputAsCanonical(_:)(v1 - 240);
      if (v5 == v4) {
        break;
      }
      ++v4;
      v6._uint64_t countAndFlagsBits = 124LL;
      v6._uint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v6);
      if (v4 >= *(void *)(v2 + 16))
      {
        __break(1u);
        JUMPOUT(0x180FD2F8CLL);
      }
    }
  }

void specialized Sequence.forEach(_:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v3 = *v2++;
      uint64_t v4 = v3;
      PrettyPrinter.outputAsCanonical(_:)((uint64_t)&v4);
      --v1;
    }

    while (v1);
  }

uint64_t specialized Sequence.forEach(_:)(uint64_t result)
{
  if (*(void *)(result + 16)) {
    __asm { BR              X9 }
  }

  return result;
}

void AST.Group.Kind._canonicalBase.getter()
{
  __asm { BR              X4 }

uint64_t sub_180FD432C(uint64_t a1)
{
  uint64_t v2 = v1;
  String.append(_:)(*(Swift::String *)&a1);
  v3._uint64_t countAndFlagsBits = 62LL;
  v3._uint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v3);
  return 3948328LL;
}

uint64_t AST.Atom._canonicalBase.getter()
{
  uint64_t v1 = type metadata accessor for AST.Atom.Kind(0LL);
  MEMORY[0x1895F8858](v1, v2);
  uint64_t v4 = &v19[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  AST.Atom.literalStringValue.getter();
  if (v6)
  {
    uint64_t v7 = v5;
    if (v5 == 46 && v6 == 0xE100000000000000LL || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 11868LL;
    }
  }

  else
  {
    outlined init with copy of AST.Atom(v0, (uint64_t)v4, type metadata accessor for AST.Atom.Kind);
    uint64_t v7 = 94LL;
    switch(swift_getEnumCaseMultiPayload())
    {
      case 4u:
        char v9 = *v4;
        v20[0] = 0LL;
        v20[1] = 0xE000000000000000LL;
        v10._uint64_t countAndFlagsBits = 92LL;
        v10._uint64_t object = (void *)0xE100000000000000LL;
        String.append(_:)(v10);
        void v19[15] = v9;
        AST.Atom.EscapedBuiltin.character.getter();
        Character.write<A>(to:)();
        swift_bridgeObjectRelease();
        uint64_t v7 = v20[0];
        break;
      case 9u:
        uint64_t v14 = *((void *)v4 + 1);
        uint64_t v15 = *((void *)v4 + 2);
        uint64_t v16 = *((void *)v4 + 3);
        char v17 = v4[72];
        char v18 = v4[32];
        v20[0] = *(void *)v4;
        uint64_t v13 = v20[0];
        v20[1] = v14;
        v20[2] = v15;
        v20[3] = v16;
        char v21 = v18;
        __int128 v22 = *(_OWORD *)(v4 + 40);
        __int128 v23 = *(_OWORD *)(v4 + 56);
        char v24 = v17;
        __int128 v25 = *((_OWORD *)v4 + 5);
        uint64_t v7 = AST.Reference._canonicalBase.getter();
        outlined consume of AST.Reference.Kind(v13, v14, v15, v16, v18);
        break;
      case 0xFu:
        return v7;
      case 0x10u:
        uint64_t v7 = 36LL;
        break;
      default:
        v20[0] = 0LL;
        v20[1] = 0xE000000000000000LL;
        _StringGuts.grow(_:)(19LL);
        swift_bridgeObjectRelease();