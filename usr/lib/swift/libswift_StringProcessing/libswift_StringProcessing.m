BOOL Collection<>.contains<A>(_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  BOOL v17;
  uint64_t v19;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v12 = type metadata accessor for Range();
  v13 = type metadata accessor for Optional();
  v14 = *(void *)(v13 - 8);
  MEMORY[0x1895F8858](v13);
  v16 = (char *)&v19 - v15;
  Collection<>.firstRange<A>(of:)(a1, a2, a3, a4, a5, a6, (char *)&v19 - v15);
  v17 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48LL))(v16, 1LL, v12) != 1;
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  return v17;
}

uint64_t Collection<>.firstRange<A>(of:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, char *a7@<X8>)
{
  uint64_t v120 = a6;
  uint64_t v125 = a4;
  v126 = a7;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v13 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v14 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  v16 = (char *)&v115 - v15;
  v17 = (char *)&v115 + *(int *)(v14 + 48) - v15;
  uint64_t v18 = *(void *)(a2 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))((char *)&v115 - v15, v7, a2);
  uint64_t v122 = *(void *)(a3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v122 + 16))(v17, a1, a3);
  int v19 = swift_dynamicCast();
  v124 = v17;
  if (v19)
  {
    uint64_t v121 = v18;
    uint64_t v123 = a3;
    if (swift_dynamicCast())
    {
      v119 = v16;
      unint64_t v20 = String.subscript.getter();
      unint64_t v22 = v21;
      unint64_t v118 = v23;
      uint64_t v25 = v24;
      swift_bridgeObjectRelease();
      unint64_t v26 = String.subscript.getter();
      unint64_t v28 = v27;
      unint64_t v30 = v29;
      uint64_t v32 = v31;
      uint64_t result = swift_bridgeObjectRelease();
      if (v22 >> 14 >= v20 >> 14)
      {
        uint64_t v120 = a2;
        uint64_t v34 = Substring.subscript.getter();
        unint64_t v117 = v30;
        uint64_t v35 = v25;
        uint64_t v37 = v36;
        uint64_t v39 = v38;
        uint64_t v41 = v40;
        swift_bridgeObjectRetain();
        uint64_t v42 = v39;
        unint64_t v43 = v117;
        uint64_t v44 = specialized SubstringSearcher.State.init(text:pattern:)(v34, v37, v42, v41, v26, v28);
        unint64_t v116 = v20;
        unint64_t v140 = v20;
        unint64_t v141 = v22;
        unint64_t v142 = v118;
        uint64_t v143 = v35;
        unint64_t v144 = v26;
        unint64_t v145 = v28;
        unint64_t v146 = v43;
        uint64_t v147 = v32;
        uint64_t v148 = v44;
        uint64_t v149 = v46;
        unint64_t v150 = v45;
        char v151 = v47 & 1;
        if ((v47 & 1) != 0) {
          goto LABEL_9;
        }
        unint64_t v99 = v45;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        unint64_t v100 = v116;
        unint64_t v101 = v22;
        goto LABEL_26;
      }

      __break(1u);
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }

    if (swift_dynamicCast())
    {
      v119 = v16;
      uint64_t v120 = a2;
      unint64_t v48 = v136;
      unint64_t v49 = v137;
      unint64_t v51 = v138;
      uint64_t v50 = v139;
      unint64_t v118 = String.subscript.getter();
      unint64_t v117 = v52;
      unint64_t v54 = v53;
      uint64_t v56 = v55;
      uint64_t result = swift_bridgeObjectRelease();
      if (v49 >> 14 >= v48 >> 14)
      {
        uint64_t v57 = Substring.subscript.getter();
        uint64_t v59 = v58;
        uint64_t v61 = v60;
        uint64_t v63 = v62;
        swift_bridgeObjectRetain();
        uint64_t v64 = v57;
        uint64_t v65 = v50;
        uint64_t v66 = v63;
        unint64_t v67 = v118;
        unint64_t v68 = v117;
        uint64_t v69 = specialized SubstringSearcher.State.init(text:pattern:)(v64, v59, v61, v66, v118, v117);
        unint64_t v140 = v48;
        unint64_t v141 = v49;
        unint64_t v116 = v51;
        unint64_t v142 = v51;
        uint64_t v143 = v65;
        unint64_t v144 = v67;
        unint64_t v145 = v68;
        unint64_t v146 = v54;
        uint64_t v147 = v56;
        uint64_t v148 = v69;
        uint64_t v149 = v71;
        unint64_t v150 = v70;
        char v151 = v72 & 1;
        if ((v72 & 1) != 0)
        {
LABEL_9:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v73 = v120;
          v16 = v119;
          v74 = v124;
          goto LABEL_27;
        }

        unint64_t v99 = v70;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        unint64_t v100 = v48;
        unint64_t v101 = v49;
LABEL_26:
        SubstringSearcher.nextRange(in:searchFromEnd:)(v100, v101, v99, (uint64_t)&v127);
        uint64_t v107 = v127;
        uint64_t v108 = v128;
        char v109 = v129;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        uint64_t v73 = v120;
        v16 = v119;
        v74 = v124;
        if ((v109 & 1) == 0)
        {
          uint64_t v130 = v107;
          uint64_t v131 = v108;
          swift_getCanonicalSpecializedMetadata();
          swift_getAssociatedTypeWitness();
          swift_getAssociatedConformanceWitness();
          uint64_t v111 = type metadata accessor for Range();
          v112 = v126;
          swift_dynamicCast();
          (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v111 - 8) + 56LL))( v112,  0LL,  1LL,  v111);
          goto LABEL_29;
        }

LABEL_27:
        swift_getAssociatedTypeWitness();
        swift_getAssociatedConformanceWitness();
        uint64_t v110 = type metadata accessor for Range();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v110 - 8) + 56LL))(v126, 1LL, 1LL, v110);
LABEL_29:
        uint64_t v13 = v121;
        (*(void (**)(char *, uint64_t))(v122 + 8))(v74, v123);
        return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v73);
      }

      goto LABEL_34;
    }

    swift_bridgeObjectRelease();
    a3 = v123;
    uint64_t v18 = v121;
  }

  if (!swift_dynamicCast())
  {
LABEL_24:
    Collection<>._firstRangeGeneric<A>(of:)(a1, a2, a3, v125, a5, v120, v126);
    uint64_t v73 = TupleTypeMetadata2;
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v73);
  }

  uint64_t v121 = v18;
  uint64_t v123 = a3;
  unint64_t v75 = v136;
  unint64_t v118 = v137;
  v76 = v16;
  unint64_t v78 = v138;
  uint64_t v77 = v139;
  int v79 = swift_dynamicCast();
  v119 = v76;
  if (v79)
  {
    unint64_t v117 = v78;
    uint64_t v120 = a2;
    unint64_t v80 = String.subscript.getter();
    a5 = v81;
    a1 = v82;
    TupleTypeMetadata2 = v83;
    swift_bridgeObjectRelease();
    if (a5 >> 14 >= v80 >> 14) {
      goto LABEL_18;
    }
    __break(1u);
  }

  uint64_t result = swift_dynamicCast();
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    v16 = v119;
    a3 = v123;
    goto LABEL_24;
  }

  unint64_t v117 = v78;
  uint64_t v120 = a2;
  unint64_t v80 = v132;
  a5 = v133;
  if (v133 >> 14 >= v132 >> 14)
  {
    a1 = v134;
    TupleTypeMetadata2 = v135;
LABEL_18:
    uint64_t v84 = Substring.subscript.getter();
    uint64_t v86 = v85;
    uint64_t v88 = v87;
    uint64_t v90 = v89;
    swift_bridgeObjectRetain();
    uint64_t v91 = v84;
    uint64_t v92 = v88;
    unint64_t v93 = v118;
    unint64_t v94 = v117;
    uint64_t v95 = specialized SubstringSearcher.State.init(text:pattern:)(v91, v86, v92, v90, v75, v118);
    unint64_t v140 = v80;
    unint64_t v141 = a5;
    unint64_t v142 = a1;
    uint64_t v143 = TupleTypeMetadata2;
    unint64_t v144 = v75;
    unint64_t v145 = v93;
    unint64_t v146 = v94;
    uint64_t v147 = v77;
    uint64_t v148 = v95;
    uint64_t v149 = v97;
    unint64_t v150 = v96;
    char v151 = v98 & 1;
    if ((v98 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v73 = v120;
      uint64_t v13 = v121;
    }

    else
    {
      unint64_t v102 = v96;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      SubstringSearcher.nextRange(in:searchFromEnd:)(v80, a5, v102, (uint64_t)&v127);
      uint64_t v103 = v127;
      uint64_t v104 = v128;
      char v105 = v129;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      uint64_t v73 = v120;
      uint64_t v13 = v121;
      if ((v105 & 1) == 0)
      {
        uint64_t v130 = v103;
        uint64_t v131 = v104;
        swift_getCanonicalSpecializedMetadata();
        swift_getAssociatedTypeWitness();
        swift_getAssociatedConformanceWitness();
        uint64_t v113 = type metadata accessor for Range();
        v114 = v126;
        swift_dynamicCast();
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v113 - 8) + 56LL))(v114, 0LL, 1LL, v113);
        goto LABEL_31;
      }
    }

    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    uint64_t v106 = type metadata accessor for Range();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v106 - 8) + 56LL))(v126, 1LL, 1LL, v106);
LABEL_31:
    v16 = v119;
    (*(void (**)(char *, uint64_t))(v122 + 8))(v124, v123);
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v73);
  }

        swift_getAssociatedTypeWitness();
        swift_getAssociatedConformanceWitness();
        uint64_t v111 = type metadata accessor for Range();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v111 - 8) + 56LL))(v127, 1LL, 1LL, v111);
LABEL_29:
        unint64_t v99 = v122;
        (*(void (**)(char *, uint64_t))(v123 + 8))(v74, v124);
        return (*(uint64_t (**)(char *, uint64_t))(v99 + 8))(v16, v73);
      }

      goto LABEL_34;
    }

    swift_bridgeObjectRelease();
    a3 = v124;
    uint64_t v18 = v122;
  }

  if (!swift_dynamicCast())
  {
LABEL_24:
    Collection<>._firstRangeGeneric<A>(of:)(a1, a2, a3, *(void *)(v126 + 8), v121, *(void *)(a6 + 8), v127);
    unint64_t v99 = v13;
    uint64_t v73 = TupleTypeMetadata2;
    return (*(uint64_t (**)(char *, uint64_t))(v99 + 8))(v16, v73);
  }

  uint64_t v122 = v18;
  v124 = a3;
  unint64_t v75 = v137;
  v119 = v138;
  v76 = v16;
  unint64_t v78 = v139;
  uint64_t v77 = v140;
  int v79 = swift_dynamicCast();
  uint64_t v120 = v76;
  if (v79)
  {
    unint64_t v118 = v78;
    uint64_t v121 = a2;
    unint64_t v80 = String.subscript.getter();
    a6 = v81;
    a1 = v82;
    TupleTypeMetadata2 = v83;
    swift_bridgeObjectRelease();
    if (a6 >> 14 >= v80 >> 14) {
      goto LABEL_18;
    }
    __break(1u);
  }

  uint64_t result = swift_dynamicCast();
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    v16 = v120;
    a3 = v124;
    goto LABEL_24;
  }

  unint64_t v118 = v78;
  uint64_t v121 = a2;
  unint64_t v80 = v133;
  a6 = v134;
  if (v134 >> 14 >= v133 >> 14)
  {
    a1 = v135;
    TupleTypeMetadata2 = v136;
LABEL_18:
    uint64_t v84 = Substring.subscript.getter();
    uint64_t v86 = v85;
    uint64_t v88 = v87;
    uint64_t v90 = v89;
    swift_bridgeObjectRetain();
    uint64_t v91 = v84;
    uint64_t v92 = v88;
    unint64_t v93 = v119;
    unint64_t v94 = v118;
    uint64_t v95 = specialized SubstringSearcher.State.init(text:pattern:)(v91, v86, v92, v90, v75, v119);
    unint64_t v141 = v80;
    unint64_t v142 = a6;
    uint64_t v143 = a1;
    unint64_t v144 = TupleTypeMetadata2;
    unint64_t v145 = v75;
    unint64_t v146 = v93;
    uint64_t v147 = v94;
    uint64_t v148 = v77;
    uint64_t v149 = v95;
    unint64_t v150 = v97;
    char v151 = v96;
    v152 = v98 & 1;
    if ((v98 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v73 = v121;
      unint64_t v99 = v122;
    }

    else
    {
      uint64_t v103 = v96;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      SubstringSearcher.nextRange(in:searchFromEnd:)(v80, a6, v103, (uint64_t)&v128);
      uint64_t v104 = v128;
      char v105 = v129;
      uint64_t v106 = v130;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      uint64_t v73 = v121;
      unint64_t v99 = v122;
      if ((v106 & 1) == 0)
      {
        uint64_t v131 = v104;
        unint64_t v132 = v105;
        swift_getCanonicalSpecializedMetadata();
        swift_getAssociatedTypeWitness();
        swift_getAssociatedConformanceWitness();
        v114 = type metadata accessor for Range();
        uint64_t v115 = v127;
        swift_dynamicCast();
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v114 - 8) + 56LL))(v115, 0LL, 1LL, v114);
        goto LABEL_31;
      }
    }

    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    uint64_t v107 = type metadata accessor for Range();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v107 - 8) + 56LL))(v127, 1LL, 1LL, v107);
LABEL_31:
    v16 = v120;
    (*(void (**)(char *, uint64_t))(v123 + 8))(v125, v124);
    return (*(uint64_t (**)(char *, uint64_t))(v99 + 8))(v16, v73);
  }

    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v1 + 16) + 1LL,  1,  (char *)v1,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
    v1 = result;
    goto LABEL_5;
  }

  if ((v4 & 0x200) != 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DSLTree.Node>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_182D9CC20;
    type metadata accessor for DSLTree.Atom(0LL);
    uint64_t v18 = swift_allocBox();
    *int v19 = 4;
    swift_storeEnumTagMultiPayload();
    *(void *)(inited + 32) = v18 | 0x4000000000000000LL;
    unint64_t v20 = swift_allocBox();
    swift_storeEnumTagMultiPayload();
    *(void *)(inited + 40) = v20 | 0x4000000000000000LL;
    specialized Compiler.ByteCodeGen.emitAlternationGen<A>(_:withBacktracking:_:)(inited, v0);
    swift_setDeallocating();
    return swift_arrayDestroy();
  }

  else
  {
    v10 = 0x700000000010001LL;
    v11 = *(int *)(type metadata accessor for Compiler.ByteCodeGen(0LL) + 20);
    v12 = *(void *)(v0 + v11);
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((v4 & 0x10000) != 0)
    {
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v12 + 16) + 1LL,  1,  (char *)v12,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
        v12 = result;
      }

      uint64_t v13 = *(void *)(v12 + 16);
      uint64_t v14 = *(void *)(v12 + 24);
      uint64_t v15 = v13 + 1;
      v10 = 0x700000000010000LL;
    }

    else
    {
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v12 + 16) + 1LL,  1,  (char *)v12,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
        v12 = result;
      }

      uint64_t v13 = *(void *)(v12 + 16);
      uint64_t v14 = *(void *)(v12 + 24);
      uint64_t v15 = v13 + 1;
    }

    if (v13 >= v14 >> 1)
    {
      unint64_t v21 = (char *)v12;
      unint64_t v22 = v13;
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v14 > 1),  v15,  1,  v21,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
      uint64_t v13 = v22;
      v12 = result;
    }

    *(void *)(v12 + 16) = v15;
    *(void *)(v12 + 8 * v13 + 32) = v10;
    *(void *)(v0 + v11) = v12;
  }

  return result;
}

  if (v7 >= a1 && v7 < result >> 14) {
    return 0LL;
  }
  return result;
}

    v12 = (v17 - 1) & v17;
    uint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
  }

  uint64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }

  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }

    v12 = (v21 - 1) & v21;
    uint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    int v19 = (void *)(*(void *)(v4 + 48) + v16);
    *int v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }

  unint64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }

  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }

    v12 = (v17 - 1) & v17;
    uint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_DWORD *)(*(void *)(v4 + 48) + 4 * v15) = *(_DWORD *)(*(void *)(v2 + 48) + 4 * v15);
  }

  uint64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }

  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }

  __break(1u);
  return result;
}

      swift_storeEnumTagMultiPayload();
      return a1;
    }

    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  return a1;
}

LABEL_35:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

uint64_t BidirectionalCollection<>.firstRange<A>(of:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, char *a7@<X8>)
{
  uint64_t v121 = a5;
  uint64_t v126 = a4;
  uint64_t v127 = a7;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v13 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v14 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  v16 = (char *)&v116 - v15;
  v17 = (char *)&v116 + *(int *)(v14 + 48) - v15;
  uint64_t v18 = *(void *)(a2 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))((char *)&v116 - v15, v7, a2);
  uint64_t v123 = *(void *)(a3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v123 + 16))(v17, a1, a3);
  int v19 = swift_dynamicCast();
  uint64_t v125 = v17;
  if (v19)
  {
    uint64_t v122 = v18;
    uint64_t v124 = a3;
    if (swift_dynamicCast())
    {
      uint64_t v120 = v16;
      unint64_t v20 = String.subscript.getter();
      unint64_t v22 = v21;
      unint64_t v119 = v23;
      uint64_t v25 = v24;
      swift_bridgeObjectRelease();
      unint64_t v26 = String.subscript.getter();
      unint64_t v28 = v27;
      unint64_t v30 = v29;
      uint64_t v32 = v31;
      uint64_t result = swift_bridgeObjectRelease();
      if (v22 >> 14 >= v20 >> 14)
      {
        uint64_t v121 = a2;
        uint64_t v34 = Substring.subscript.getter();
        unint64_t v118 = v30;
        uint64_t v35 = v25;
        uint64_t v37 = v36;
        uint64_t v39 = v38;
        uint64_t v41 = v40;
        swift_bridgeObjectRetain();
        uint64_t v42 = v39;
        unint64_t v43 = v118;
        uint64_t v44 = specialized SubstringSearcher.State.init(text:pattern:)(v34, v37, v42, v41, v26, v28);
        unint64_t v117 = v20;
        unint64_t v141 = v20;
        unint64_t v142 = v22;
        unint64_t v143 = v119;
        uint64_t v144 = v35;
        unint64_t v145 = v26;
        unint64_t v146 = v28;
        unint64_t v147 = v43;
        uint64_t v148 = v32;
        uint64_t v149 = v44;
        uint64_t v150 = v46;
        unint64_t v151 = v45;
        char v152 = v47 & 1;
        if ((v47 & 1) != 0) {
          goto LABEL_9;
        }
        unint64_t v100 = v45;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        unint64_t v101 = v117;
        unint64_t v102 = v22;
        goto LABEL_26;
      }

      __break(1u);
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }

    if (swift_dynamicCast())
    {
      uint64_t v120 = v16;
      uint64_t v121 = a2;
      unint64_t v48 = v137;
      unint64_t v49 = v138;
      unint64_t v51 = v139;
      uint64_t v50 = v140;
      unint64_t v119 = String.subscript.getter();
      unint64_t v118 = v52;
      unint64_t v54 = v53;
      uint64_t v56 = v55;
      uint64_t result = swift_bridgeObjectRelease();
      if (v49 >> 14 >= v48 >> 14)
      {
        uint64_t v57 = Substring.subscript.getter();
        uint64_t v59 = v58;
        uint64_t v61 = v60;
        uint64_t v63 = v62;
        swift_bridgeObjectRetain();
        uint64_t v64 = v57;
        uint64_t v65 = v50;
        uint64_t v66 = v63;
        unint64_t v67 = v119;
        unint64_t v68 = v118;
        uint64_t v69 = specialized SubstringSearcher.State.init(text:pattern:)(v64, v59, v61, v66, v119, v118);
        unint64_t v141 = v48;
        unint64_t v142 = v49;
        unint64_t v117 = v51;
        unint64_t v143 = v51;
        uint64_t v144 = v65;
        unint64_t v145 = v67;
        unint64_t v146 = v68;
        unint64_t v147 = v54;
        uint64_t v148 = v56;
        uint64_t v149 = v69;
        uint64_t v150 = v71;
        unint64_t v151 = v70;
        char v152 = v72 & 1;
        if ((v72 & 1) != 0)
        {
LABEL_9:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v73 = v121;
          v16 = v120;
          v74 = v125;
          goto LABEL_27;
        }

        unint64_t v100 = v70;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        unint64_t v101 = v48;
        unint64_t v102 = v49;
LABEL_26:
        SubstringSearcher.nextRange(in:searchFromEnd:)(v101, v102, v100, (uint64_t)&v128);
        uint64_t v108 = v128;
        uint64_t v109 = v129;
        char v110 = v130;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        uint64_t v73 = v121;
        v16 = v120;
        v74 = v125;
        if ((v110 & 1) == 0)
        {
          uint64_t v131 = v108;
          uint64_t v132 = v109;
          swift_getCanonicalSpecializedMetadata();
          swift_getAssociatedTypeWitness();
          swift_getAssociatedConformanceWitness();
          uint64_t v112 = type metadata accessor for Range();
          uint64_t v113 = v127;
          swift_dynamicCast();
          (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v112 - 8) + 56LL))( v113,  0LL,  1LL,  v112);
          goto LABEL_29;
        }

Swift::Bool __swiftcall StringProtocol.contains(_:)(Swift::String a1)
{
  uint64_t v3 = v1;
  Swift::String v7 = a1;
  uint64_t v4 = *(void *)(v2 + 8);
  unint64_t v5 = lazy protocol witness table accessor for type String and conformance String();
  BidirectionalCollection<>.firstRange<A>(of:)((uint64_t)&v7, v3, MEMORY[0x189617FA8], v4, v5, MEMORY[0x189617AC0], v8);
  return (v8[16] & 1) == 0;
}

BOOL StringProtocol.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v10[0] = a1;
  v10[1] = a2;
  v10[2] = a3;
  v10[3] = a4;
  uint64_t v7 = *(void *)(a6 + 8);
  unint64_t v8 = lazy protocol witness table accessor for type Substring and conformance Substring();
  BidirectionalCollection<>.firstRange<A>(of:)((uint64_t)v10, a5, MEMORY[0x189618C50], v7, v8, MEMORY[0x189617AC0], v11);
  return (v11[16] & 1) == 0;
}

uint64_t BidirectionalCollection<>.contains<A>(_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a5 + 16))(&v14, a3, a5);
  uint64_t v5 = v14;
  uint64_t result = Collection.subscript.getter();
  uint64_t v16 = v5;
  if (v11 >> 14 < v10 >> 14)
  {
    __break(1u);
  }

  else
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    type metadata accessor for Regex(0LL, AssociatedTypeWitness, v8, v9);
    Regex._firstMatch(_:in:)(v12, v13, v10, v11, &v15);
    swift_bridgeObjectRelease();
    swift_release();
    if (*((void *)&v15 + 1))
    {
      outlined consume of Regex<A1.RegexOutput>.Match?<A><A1>(v15, *((uint64_t *)&v15 + 1));
      return 1LL;
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

unint64_t Regex.firstMatch(in:)@<X0>( unint64_t result@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  if (a2 >> 14 >= result >> 14) {
    return Regex._firstMatch(_:in:)(a3, a4, result, a2, a5);
  }
  __break(1u);
  return result;
}

uint64_t Collection<>._firstRangeGeneric<A>(of:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char *a7@<X8>)
{
  uint64_t v81 = a6;
  uint64_t v77 = a7;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v13 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  unint64_t v67 = (char *)&v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = MEMORY[0x1895F8858](v13);
  char v72 = (char *)&v65 - v16;
  uint64_t v70 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v17 = MEMORY[0x1895F8858](v15);
  uint64_t v80 = (uint64_t)&v65 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v17);
  uint64_t v78 = (uint64_t)&v65 - v19;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v20 = type metadata accessor for Range();
  uint64_t v75 = *(void *)(v20 - 8);
  uint64_t v76 = v20;
  uint64_t v21 = MEMORY[0x1895F8858](v20);
  uint64_t v69 = (char *)&v65 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v21);
  uint64_t v73 = (char *)&v65 - v23;
  uint64_t v24 = swift_getAssociatedTypeWitness();
  uint64_t v71 = *(void *)(v24 - 8);
  uint64_t v25 = MEMORY[0x1895F8858](v24);
  unint64_t v27 = (char *)&v65 - v26;
  MEMORY[0x1895F8858](v25);
  uint64_t v30 = a1;
  uint64_t v31 = a3;
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))( (char *)&v65 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v30,  a3);
  uint64_t v32 = swift_getAssociatedTypeWitness();
  uint64_t v33 = a5;
  uint64_t v34 = Array.init<A>(_:)();
  uint64_t v35 = (void *)swift_allocObject();
  v35[2] = a2;
  v35[3] = v31;
  v35[4] = a4;
  v35[5] = v33;
  v35[6] = v81;
  v35[7] = v32;
  uint64_t v36 = swift_getAssociatedConformanceWitness();
  uint64_t v37 = v34;
  uint64_t v38 = v78;
  uint64_t v81 = v24;
  uint64_t v39 = ZSearcher.init(pattern:by:)( v37,  (uint64_t (*)(char *, char *))partial apply for implicit closure #3 in Collection<>.split<A>(separator:maxSplits:omittingEmptySubsequences:),  (uint64_t)v35);
  uint64_t v41 = v40;
  uint64_t v66 = v42;
  uint64_t v44 = v43;
  unint64_t v68 = v27;
  Collection.subscript.getter();
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v45 = v80;
  dispatch thunk of Collection.endIndex.getter();
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if ((result & 1) != 0)
  {
    uint64_t v82 = v36;
    uint64_t v47 = TupleTypeMetadata2;
    uint64_t v48 = *(int *)(TupleTypeMetadata2 + 48);
    uint64_t AssociatedConformanceWitness = v41;
    unint64_t v49 = v72;
    uint64_t v50 = &v72[v48];
    uint64_t v51 = v70;
    unint64_t v52 = *(void (**)(char *, uint64_t, uint64_t))(v70 + 32);
    v52(v72, v38, AssociatedTypeWitness);
    v52(v50, v45, AssociatedTypeWitness);
    uint64_t v53 = *(int *)(v47 + 48);
    uint64_t v80 = v39;
    unint64_t v54 = v67;
    uint64_t v55 = &v67[v53];
    uint64_t v56 = *(void (**)(char *, char *, uint64_t))(v51 + 16);
    v56(v67, v49, AssociatedTypeWitness);
    v56(v55, v50, AssociatedTypeWitness);
    uint64_t v78 = v44;
    uint64_t v57 = v69;
    v52(v69, (uint64_t)v54, AssociatedTypeWitness);
    uint64_t v58 = *(void (**)(char *, uint64_t))(v51 + 8);
    v58(v55, AssociatedTypeWitness);
    uint64_t v59 = &v54[*(int *)(v47 + 48)];
    v52(v54, (uint64_t)v49, AssociatedTypeWitness);
    v52(v59, (uint64_t)v50, AssociatedTypeWitness);
    uint64_t v60 = v76;
    v52(&v57[*(int *)(v76 + 36)], (uint64_t)v59, AssociatedTypeWitness);
    v58(v54, AssociatedTypeWitness);
    uint64_t v61 = v75;
    uint64_t v62 = (uint64_t)v73;
    (*(void (**)(char *, char *, uint64_t))(v75 + 32))(v73, v57, v60);
    uint64_t v63 = (uint64_t)v68;
    uint64_t v64 = v81;
    ZSearcher.search(_:in:)((uint64_t)v68, v62, v80, AssociatedConformanceWitness, v66, v78, v81, v82, v77);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v62, v60);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v71 + 8))(v63, v64);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t ZSearcher.init(pattern:by:)(uint64_t a1, uint64_t (*a2)(char *, char *), uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  zAlgorithm<A>(_:by:)(a1, a2, a3, AssociatedTypeWitness);
  return a1;
}

unint64_t specialized ZSearcher.search(_:in:)( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(uint64_t *, uint64_t *))
{
  unint64_t v9 = 0LL;
  unint64_t v10 = 0LL;
  unint64_t v11 = a6 >> 14;
  unint64_t v33 = a2 >> 14;
  uint64_t v30 = a8 + 32;
  uint64_t v28 = (uint64_t *)(a7 + 40);
  unint64_t result = a5;
  unint64_t v13 = a5;
  unint64_t v39 = a6 >> 14;
  while (1)
  {
    unint64_t v34 = result >> 14;
    unint64_t v35 = result;
    if (result >> 14 >= v13 >> 14) {
      break;
    }
    if (v10 >= *(void *)(a8 + 16)) {
      goto LABEL_52;
    }
    if (*(void *)(v30 + 8 * v10) < (int64_t)v9)
    {
      if (v34 == v33) {
        return 0LL;
      }
    }

    else
    {
      unint64_t v15 = *(void *)(a7 + 16);
      BOOL v16 = v9 == v15 || v13 >> 14 == v11;
      uint64_t v29 = *(void *)(a7 + 16);
      if (!v16)
      {
        if (v9 <= v15) {
          unint64_t v23 = *(void *)(a7 + 16);
        }
        else {
          unint64_t v23 = v9;
        }
        unint64_t v36 = v15 - 1;
        unint64_t v38 = v23;
        uint64_t v24 = &v28[2 * v9];
        while (v38 != v9)
        {
          uint64_t v25 = *v24;
          uint64_t v42 = *(v24 - 1);
          uint64_t v43 = v25;
          swift_bridgeObjectRetain();
          uint64_t v40 = Substring.subscript.getter();
          uint64_t v41 = v26;
          char v27 = a9(&v42, &v40);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v27 & 1) == 0)
          {
            unint64_t v17 = v9;
LABEL_37:
            unint64_t v11 = v39;
            goto LABEL_38;
          }

          unint64_t v17 = v9 + 1;
          unint64_t result = Substring.index(after:)();
          unint64_t v13 = result;
          if (v36 == v9) {
            goto LABEL_37;
          }
          v24 += 2;
          ++v9;
          unint64_t v11 = v39;
          if (result >> 14 == v39) {
            goto LABEL_38;
          }
        }

LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
        return result;
      }

      unint64_t v17 = v9;
LABEL_38:
      if (v17 == v29)
      {
        unint64_t result = v35;
        if (v34 > v13 >> 14)
        {
          __break(1u);
          return v9;
        }

        return result;
      }

      unint64_t v10 = 0LL;
      if (v34 == v33) {
        return 0LL;
      }
      unint64_t v9 = v17;
    }

      uint64_t v60 = v16;
      goto LABEL_51;
    case 0xBu:
      _StringGuts.grow(_:)(20LL);
      swift_bridgeObjectRelease();
      __asm { BR              X10 }

      return result;
    case 0xDu:
      uint64_t v60 = 0LL;
      _print_unlocked<A, B>(_:_:)();
      v21._countAndFlagsBits = 0x656D75736E6F6320LL;
      v21._object = (void *)0xEA00000000005B72LL;
      String.append(_:)(v21);
      goto LABEL_51;
    case 0xEu:
      uint64_t v60 = 0LL;
      _print_unlocked<A, B>(_:_:)();
      v22._countAndFlagsBits = 32LL;
      v22._object = (void *)0xE100000000000000LL;
      String.append(_:)(v22);
      goto LABEL_25;
    case 0xFu:
      uint64_t v60 = 0LL;
      _StringGuts.grow(_:)(23LL);
      _print_unlocked<A, B>(_:_:)();
      v23._countAndFlagsBits = 0x5B686374616D20LL;
      v23._object = (void *)0xE700000000000000LL;
      String.append(_:)(v23);
      v24._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v24);
      swift_bridgeObjectRelease();
      v25._countAndFlagsBits = 35LL;
      v25._object = (void *)0xE100000000000000LL;
      String.append(_:)(v25);
      swift_bridgeObjectRelease();
      uint64_t v26 = 0xE90000000000005BLL;
      char v27 = 0x6C6176203E2D205DLL;
      goto LABEL_45;
    case 0x10u:
      uint64_t v60 = 0LL;
      goto LABEL_29;
    case 0x11u:
      uint64_t v60 = 0LL;
LABEL_29:
      _print_unlocked<A, B>(_:_:)();
      v28._countAndFlagsBits = 32LL;
      v28._object = (void *)0xE100000000000000LL;
      String.append(_:)(v28);
      goto LABEL_32;
    case 0x14u:
      uint64_t v60 = 0LL;
      _StringGuts.grow(_:)(27LL);
      _print_unlocked<A, B>(_:_:)();
      v29._countAndFlagsBits = 0x3A676E6976617320LL;
      v29._object = (void *)0xE900000000000020LL;
      String.append(_:)(v29);
      v30._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      v31._countAndFlagsBits = 35LL;
      v31._object = (void *)0xE100000000000000LL;
      String.append(_:)(v31);
      swift_bridgeObjectRelease();
      v32._countAndFlagsBits = 0x676E69706D756A20LL;
      v32._object = (void *)0xEC000000203A6F54LL;
      String.append(_:)(v32);
LABEL_32:
      v33._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v33);
      swift_bridgeObjectRelease();
      unint64_t v34 = 35LL;
      unint64_t v35 = 0xE100000000000000LL;
      goto LABEL_33;
    case 0x15u:
      uint64_t v60 = 0LL;
      _print_unlocked<A, B>(_:_:)();
      v44._countAndFlagsBits = 32LL;
      v44._object = (void *)0xE100000000000000LL;
      String.append(_:)(v44);
      uint64_t v45 = (a1 >> 35) & 7;
      if (v45 > 4 || ((0x17u >> v45) & 1) == 0)
      {
        __break(1u);
        JUMPOUT(0x182D56D74LL);
      }

      _print_unlocked<A, B>(_:_:)();
      v46._countAndFlagsBits = 32LL;
      v46._object = (void *)0xE100000000000000LL;
      String.append(_:)(v46);
      v47._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v47);
      swift_bridgeObjectRelease();
      v48._countAndFlagsBits = 32LL;
      v48._object = (void *)0xE100000000000000LL;
      String.append(_:)(v48);
      if (((a1 >> 18) & 0x1FF) == 1)
      {
        unint64_t v35 = 0xE900000000000064LL;
        unint64_t v34 = 0x65646E756F626E75LL;
      }

      else
      {
        lazy protocol witness table accessor for type UInt64 and conformance UInt64();
        unint64_t v34 = BinaryInteger.description.getter();
        unint64_t v35 = v58;
      }

      unint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v2 + 16) + 1LL,  1,  (char *)v2,  &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
      uint64_t v2 = result;
      goto LABEL_37;
    }

    goto LABEL_51;
  }

  outlined init with take of DSLTree.QuantificationKind( (uint64_t)v20,  (uint64_t)v14,  type metadata accessor for DSLTree._AST.QuantificationKind);
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v8, v14, v2);
  uint64_t v28 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v8, v2);
  if (v28 == *MEMORY[0x18961C388])
  {
    outlined destroy of MEProgram((uint64_t)v14, type metadata accessor for DSLTree._AST.QuantificationKind);
    uint64_t v29 = v49;
    uint64_t v30 = *(void *)(*v49 + 16);
    if (!v30)
    {
      __break(1u);
      goto LABEL_48;
    }

    uint64_t v31 = (*(_DWORD *)(*v49 + 4 * v30 + 28) & 0x20) == 0;
    if ((*(_DWORD *)(*v49 + 4 * v30 + 28) & 0x20) != 0) {
      uint64_t v32 = 63LL;
    }
    else {
      uint64_t v32 = 0LL;
    }
    unint64_t v33 = 0xE100000000000000LL;
    unint64_t v34 = 0xE000000000000000LL;
LABEL_27:
    if (v31) {
      uint64_t v37 = v34;
    }
    else {
      uint64_t v37 = v33;
    }
    unint64_t v38 = (char *)v29[1];
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v38 + 2) + 1LL,  1,  v38,  &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
    }
    uint64_t v40 = *((void *)v38 + 2);
    unint64_t v39 = *((void *)v38 + 3);
    if (v40 >= v39 >> 1) {
      unint64_t v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v39 > 1),  v40 + 1,  1,  v38,  &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
    }
    *((void *)v38 + 2) = v40 + 1;
    uint64_t v41 = &v38[24 * v40];
    *((void *)v41 + 4) = v32;
    *((void *)v41 + 5) = v37;
    v41[48] = 0;
    unint64_t result = swift_bridgeObjectRelease();
    v29[1] = (uint64_t)v38;
    return result;
  }

  uint64_t v29 = v49;
  if (v28 == *MEMORY[0x18961C390])
  {
    outlined destroy of MEProgram((uint64_t)v14, type metadata accessor for DSLTree._AST.QuantificationKind);
    unint64_t v36 = *(void *)(*v29 + 16);
    if (!v36)
    {
      __break(1u);
      goto LABEL_50;
    }

    uint64_t v31 = (*(_DWORD *)(*v29 + 4 * v36 + 28) & 0x20) == 0;
    if ((*(_DWORD *)(*v29 + 4 * v36 + 28) & 0x20) != 0) {
      uint64_t v32 = 0LL;
    }
    else {
      uint64_t v32 = 63LL;
    }
    unint64_t v33 = 0xE000000000000000LL;
    unint64_t v34 = 0xE100000000000000LL;
    goto LABEL_27;
  }

  if (v28 != *MEMORY[0x18961C380])
  {
LABEL_51:
    unint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }

  outlined destroy of MEProgram((uint64_t)v14, type metadata accessor for DSLTree._AST.QuantificationKind);
  uint64_t v44 = v29[1];
  unint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    unint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v44 + 16) + 1LL,  1,  (char *)v44,  &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
    uint64_t v44 = result;
  }

  uint64_t v46 = *(void *)(v44 + 16);
  uint64_t v45 = *(void *)(v44 + 24);
  if (v46 >= v45 >> 1)
  {
    unint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v45 > 1),  v46 + 1,  1,  (char *)v44,  &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
    uint64_t v44 = result;
  }

  *(void *)(v44 + 16) = v46 + 1;
  uint64_t v47 = v44 + 24 * v46;
  *(_OWORD *)(v47 + 32) = xmmword_182D9CCC0;
  *(_BYTE *)(v47 + 48) = 0;
  v29[1] = v44;
  return result;
}

LABEL_3:
    unint64_t result = Substring.index(after:)();
    ++v10;
    if (__OFSUB__(v9--, 1LL)) {
      goto LABEL_51;
    }
  }

  uint64_t v37 = *(void *)(a7 + 16);
  if (!v37) {
    return result;
  }
  if (v34 == v11)
  {
    unint64_t v9 = 0LL;
    if (v11 == v33) {
      return v9;
    }
    unint64_t v10 = 0LL;
    unint64_t v13 = result;
    goto LABEL_3;
  }

  unint64_t v18 = 0LL;
  uint64_t v19 = v28;
  unint64_t v13 = result;
  while (1)
  {
    if (v37 == v18)
    {
      __break(1u);
      goto LABEL_50;
    }

    uint64_t v20 = *v19;
    uint64_t v42 = *(v19 - 1);
    uint64_t v43 = v20;
    swift_bridgeObjectRetain();
    uint64_t v40 = Substring.subscript.getter();
    uint64_t v41 = v21;
    char v22 = a9(&v42, &v40);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v22 & 1) == 0) {
      break;
    }
    unint64_t v9 = v18 + 1;
    unint64_t result = Substring.index(after:)();
    unint64_t v13 = result;
    unint64_t v11 = v39;
    if (v37 - 1 != v18)
    {
      v19 += 2;
      ++v18;
      if (result >> 14 != v39) {
        continue;
      }
    }

    goto LABEL_33;
  }

  unint64_t v9 = v18;
  unint64_t v11 = v39;
LABEL_33:
  if (v9 != v37)
  {
    unint64_t v10 = 0LL;
    if (v34 != v33) {
      goto LABEL_3;
    }
    return 0LL;
  }

  unint64_t result = v35;
  if (v34 > v13 >> 14) {
    goto LABEL_53;
  }
  return result;
}

  unint64_t v18 = *(void *)(v9 + 16);
  swift_bridgeObjectRetain();
  swift_release();
  swift_release();
  swift_release();
  return v18;
}

uint64_t ZSearcher.search(_:in:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(char *, char *)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, char *a9@<X8>)
{
  unint64_t v68 = a5;
  uint64_t v69 = a6;
  uint64_t v63 = a4;
  uint64_t v67 = a3;
  uint64_t v76 = a1;
  uint64_t v58 = a9;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v13 = type metadata accessor for Range();
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v64 = *(void *)(v14 - 8);
  uint64_t v65 = v14;
  uint64_t v15 = MEMORY[0x1895F8858](v14);
  uint64_t v60 = (uint64_t)&v55 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = MEMORY[0x1895F8858](v15);
  uint64_t v62 = (uint64_t)&v55 - v18;
  uint64_t v19 = *(void *)(v13 - 8);
  uint64_t v70 = v13;
  uint64_t v71 = v19;
  uint64_t v20 = MEMORY[0x1895F8858](v17);
  uint64_t v56 = (char *)&v55 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = MEMORY[0x1895F8858](v20);
  uint64_t v57 = (char *)&v55 - v23;
  uint64_t v24 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v25 = MEMORY[0x1895F8858](v22);
  char v27 = (char *)&v55 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v25);
  uint64_t v29 = (char *)&v55 - v28;
  uint64_t v73 = swift_allocBox();
  uint64_t v74 = v24;
  uint64_t v31 = v30;
  uint64_t v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16);
  v32(v30, a2, AssociatedTypeWitness);
  uint64_t v72 = swift_allocBox();
  uint64_t v75 = v33;
  v32(v33, v31, AssociatedTypeWitness);
  uint64_t v34 = swift_allocObject();
  *(void *)(v34 + 16) = 0LL;
  uint64_t v35 = swift_allocObject();
  *(void *)(v35 + 16) = 0LL;
  uint64_t v66 = a2;
  uint64_t v59 = (void (*)(char *, uint64_t, uint64_t))v32;
  v32((uint64_t)v29, a2, AssociatedTypeWitness);
  unint64_t v36 = 0LL;
  uint64_t v37 = 0LL;
  uint64_t v61 = v63 + 32;
  while (1)
  {
    uint64_t result = dispatch thunk of static Comparable.>= infix(_:_:)();
    if ((result & 1) != 0)
    {
      uint64_t v39 = v62;
      compare #1 <A>(start:end:minLength:) in ZSearcher.search(_:in:)( v29,  (uint64_t)v29,  0LL,  v67,  v68,  v69,  v66,  v76,  v62,  v73,  v72,  v34,  v35,  a7,  a8);
      uint64_t v40 = v70;
      int v41 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v71 + 48))(v39, 1LL, v70);
      uint64_t v42 = v39;
      if (v41 != 1)
      {
        (*(void (**)(char *, uint64_t))(v74 + 8))(v29, AssociatedTypeWitness);
        uint64_t v52 = v71;
        uint64_t v53 = *(void (**)(char *, uint64_t, uint64_t))(v71 + 32);
        unint64_t v54 = v57;
        v53(v57, v62, v40);
LABEL_16:
        uint64_t v51 = v58;
        v53(v58, (uint64_t)v54, v40);
        uint64_t v50 = 0LL;
        goto LABEL_17;
      }

LABEL_9:
      (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v42, v65);
      goto LABEL_10;
    }

    if ((v36 & 0x8000000000000000LL) != 0) {
      goto LABEL_20;
    }
    if (v36 >= *(void *)(v63 + 16)) {
      goto LABEL_21;
    }
    if (*(void *)(v61 + 8 * v36) >= v37)
    {
      v59(v27, v75, AssociatedTypeWitness);
      uint64_t v43 = v60;
      compare #1 <A>(start:end:minLength:) in ZSearcher.search(_:in:)( v29,  (uint64_t)v27,  v37,  v67,  v68,  v69,  v66,  v76,  v60,  v73,  v72,  v34,  v35,  a7,  a8);
      uint64_t v44 = *(void (**)(char *, uint64_t))(v74 + 8);
      v44(v27, AssociatedTypeWitness);
      uint64_t v40 = v70;
      int v45 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v71 + 48))(v43, 1LL, v70);
      uint64_t v42 = v43;
      if (v45 != 1)
      {
        v44(v29, AssociatedTypeWitness);
        uint64_t v52 = v71;
        uint64_t v53 = *(void (**)(char *, uint64_t, uint64_t))(v71 + 32);
        unint64_t v54 = v56;
        v53(v56, v60, v40);
        goto LABEL_16;
      }

      goto LABEL_9;
    }

  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

LABEL_10:
    dispatch thunk of Collection.endIndex.getter();
    char v46 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v47 = *(void (**)(char *, uint64_t))(v74 + 8);
    v47(v27, AssociatedTypeWitness);
    if ((v46 & 1) != 0)
    {
      v47(v29, AssociatedTypeWitness);
      uint64_t v50 = 1LL;
      uint64_t v51 = v58;
      uint64_t v40 = v70;
      uint64_t v52 = v71;
LABEL_17:
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v52 + 56))(v51, v50, 1LL, v40);
      swift_release();
      swift_release();
      swift_release();
      return swift_release();
    }

    uint64_t result = dispatch thunk of Collection.formIndex(after:)();
    uint64_t v48 = *(void *)(v34 + 16);
    unint64_t v36 = v48 + 1;
    if (__OFADD__(v48, 1LL)) {
      break;
    }
    *(void *)(v34 + 16) = v36;
    uint64_t v49 = *(void *)(v35 + 16);
    uint64_t v37 = v49 - 1;
    if (__OFSUB__(v49, 1LL)) {
      goto LABEL_19;
    }
    *(void *)(v35 + 16) = v37;
  }

  __break(1u);
LABEL_19:
  __break(1u);
LABEL_20:
  __break(1u);
LABEL_21:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

    *uint64_t v48 = v22;
    type metadata accessor for DSLTree.Atom(0LL);
    return swift_storeEnumTagMultiPayload();
  }

  (*(void (**)(char *, uint64_t))(v11 + 96))(v18, v10);
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v9, v18, v4);
  AST.Atom.EscapedBuiltin.dslAssertionKind.getter(v49);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v4);
LABEL_3:
  uint64_t v22 = v49[0];
  if (LOBYTE(v49[0]) != 13) {
    goto LABEL_10;
  }
  AST.Atom.kind.getter();
  if (v19(v16, v10) == v21)
  {
    (*(void (**)(char *, uint64_t))(v11 + 96))(v16, v10);
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v9, v16, v4);
    AST.Atom.EscapedBuiltin.dslCharacterClass.getter(v49);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v4);
  }

  else
  {
    LOBYTE(v49[0]) = 14;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
  }

  uint64_t v24 = v46;
  uint64_t v22 = v49[0];
  if (LOBYTE(v49[0]) != 14) {
    goto LABEL_10;
  }
  AST.Atom.kind.getter();
  uint64_t v25 = v19(v24, v10);
  if (v25 == *MEMORY[0x18961C748])
  {
    (*(void (**)(char *, uint64_t))(v11 + 96))(v24, v10);
    uint64_t v26 = *((void *)v24 + 1);
    char v27 = v48;
    *(void *)uint64_t v48 = *(void *)v24;
    *((void *)v27 + 1) = v26;
    type metadata accessor for DSLTree.Atom(0LL);
    return swift_storeEnumTagMultiPayload();
  }

  if (v25 == *MEMORY[0x18961C750])
  {
    (*(void (**)(char *, uint64_t))(v11 + 96))(v24, v10);
    uint64_t v28 = v43;
    uint64_t v29 = v44;
    uint64_t v30 = v24;
    uint64_t v31 = v45;
    (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v43, v30, v45);
    uint64_t v32 = AST.Atom.Scalar.value.getter();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v28, v31);
    *(_DWORD *)uint64_t v48 = v32;
    goto LABEL_28;
  }

  if (v25 == v21)
  {
    (*(void (**)(char *, uint64_t))(v11 + 96))(v24, v10);
    uint64_t v33 = v42;
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v42, v24, v4);
    uint64_t v34 = AST.Atom.EscapedBuiltin.scalarValue.getter();
    if ((v34 & 0x100000000LL) == 0)
    {
      uint64_t v35 = v34;
      (*(void (**)(char *, uint64_t))(v5 + 8))(v33, v4);
      *(_DWORD *)uint64_t v48 = v35;
      goto LABEL_28;
    }

    v49[0] = 0LL;
    v49[1] = 0xE000000000000000LL;
    _StringGuts.grow(_:)(77LL);
    v39._object = (void *)0x8000000182DA3440LL;
    v39._countAndFlagsBits = 0xD00000000000004BLL;
    String.append(_:)(v39);
    type metadata accessor for AST.Atom();
    lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind( &lazy protocol witness table cache variable for type AST.Atom and conformance AST.Atom,  (uint64_t (*)(uint64_t))MEMORY[0x18961C7B8],  MEMORY[0x18961C7C8]);
    v40._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v40);
    swift_bridgeObjectRelease();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }

  else
  {
    if (v25 == *MEMORY[0x18961C708])
    {
      (*(void (**)(char *, uint64_t))(v11 + 96))(v24, v10);
      unint64_t v36 = type metadata accessor for AST.Reference();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 32LL))(v48, v24, v36);
      type metadata accessor for DSLTree.Atom(0LL);
      return swift_storeEnumTagMultiPayload();
    }

    if (v25 == *MEMORY[0x18961C738])
    {
      (*(void (**)(char *, uint64_t))(v11 + 96))(v24, v10);
      uint64_t v37 = type metadata accessor for AST.MatchingOptionSequence();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 32LL))(v48, v24, v37);
      type metadata accessor for DSLTree.Atom(0LL);
      return swift_storeEnumTagMultiPayload();
    }

    if (v25 == *MEMORY[0x18961C740])
    {
LABEL_28:
      type metadata accessor for DSLTree.Atom(0LL);
      return swift_storeEnumTagMultiPayload();
    }

    unint64_t v38 = type metadata accessor for AST.Atom();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v38 - 8) + 16LL))(v48, v47, v38);
    type metadata accessor for DSLTree.Atom(0LL);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v24, v10);
  }

  return result;
}

    uint64_t v18 = 1LL;
    if ((a6 & 1) == 0)
    {
LABEL_7:
      uint64_t v19 = 0LL;
LABEL_12:
      if ((a2 & 0x8000000000000000LL) == 0) {
        return v19 | (a2 << 27) | v17 | (v18 << 18) | qword_182DA0698[a5];
      }
      __break(1u);
      goto LABEL_15;
    }

void *BidirectionalCollection<>.firstRange<A>(of:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int128 v7 = v16;
  unint64_t v9 = v17;
  uint64_t v8 = v18;
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a5 + 16))(&v15, a3, a5);
  uint64_t v19 = v15;
  if (*((void *)&v7 + 1) >> 14 < (unint64_t)v7 >> 14)
  {
    __break(1u);
  }

  else
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    type metadata accessor for Regex(0LL, AssociatedTypeWitness, v12, v13);
    Regex._firstMatch(_:in:)(v9, v8, v7, *((uint64_t *)&v7 + 1), &v16);
    swift_bridgeObjectRelease();
    swift_release();
    if (!*((void *)&v16 + 1)) {
      return 0LL;
    }
    uint64_t v14 = v18;
    outlined consume of Regex<A1.RegexOutput>.Match?<A><A1>(v16, *((uint64_t *)&v16 + 1));
    return (void *)v14;
  }

  return result;
}

unint64_t specialized RangesCollection.init(base:searcher:)@<X0>( unint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  if (a2 >> 14 >= result >> 14)
  {
    unint64_t v10 = *(void *)(a5 + 32);
    uint64_t v66 = *(void *)(a5 + 24);
    uint64_t v67 = *(void *)(a5 + 16);
    unint64_t v12 = result;
    unint64_t v13 = *(void *)(a5 + 40);
    uint64_t v72 = *(void *)(a5 + 48);
    __int128 v73 = *(_OWORD *)(a5 + 56);
    __int128 v68 = *(_OWORD *)(a5 + 72);
    __int128 v69 = *(_OWORD *)a5;
    char v63 = *(_BYTE *)(a5 + 88);
    swift_bridgeObjectRetain();
    outlined retain of SubstringSearcher(a5);
    unint64_t v60 = v12;
    unint64_t v71 = a2;
    uint64_t v14 = Substring.subscript.getter();
    uint64_t v16 = v15;
    uint64_t v18 = v17;
    uint64_t v20 = v19;
    uint64_t v70 = a4;
    swift_bridgeObjectRetain();
    unint64_t v64 = v13;
    unint64_t v65 = v10;
    uint64_t v62 = specialized SubstringSearcher.State.init(text:pattern:)(v14, v16, v18, v20, v10, v13);
    if ((v23 & 1) != 0)
    {
      uint64_t v25 = a3;
      swift_bridgeObjectRelease();
      outlined release of SubstringSearcher(a5);
      unint64_t v29 = v60;
    }

    else
    {
      unint64_t v24 = v22;
      uint64_t v59 = v21;
      swift_bridgeObjectRetain();
      uint64_t v25 = a3;
      SubstringSearcher.nextRange(in:searchFromEnd:)(v60, v71, v24, (uint64_t)v74);
      uint64_t v57 = v74[1];
      uint64_t v58 = v74[0];
      char v26 = v75;
      uint64_t v27 = v76;
      char v28 = v77;
      swift_bridgeObjectRelease();
      outlined release of SubstringSearcher(a5);
      uint64_t result = swift_bridgeObjectRelease();
      unint64_t v29 = v60;
      if ((v26 & 1) == 0)
      {
        char v30 = 0;
        unint64_t v31 = v71;
        uint64_t v32 = v25;
        uint64_t v33 = a4;
        unint64_t v34 = v64;
        unint64_t v35 = v65;
        char v36 = v28;
        uint64_t v37 = v72;
        uint64_t v38 = v62;
        unint64_t v39 = v60;
        uint64_t v40 = v58;
        uint64_t v41 = v59;
        uint64_t v42 = v57;
LABEL_7:
        LOBYTE(v74[0]) = v63 & 1;
        char v79 = v30;
        char v78 = v36;
        *(void *)a6 = v39;
        *(void *)(a6 + 8) = v31;
        *(void *)(a6 + 16) = v32;
        *(void *)(a6 + 24) = v33;
        *(_OWORD *)(a6 + 32) = v69;
        *(void *)(a6 + 48) = v67;
        *(void *)(a6 + 56) = v66;
        *(void *)(a6 + 64) = v35;
        *(void *)(a6 + 72) = v34;
        *(void *)(a6 + 80) = v37;
        *(_OWORD *)(a6 + 88) = v73;
        *(_OWORD *)(a6 + 104) = v68;
        *(_BYTE *)(a6 + 120) = v63 & 1;
        *(void *)(a6 + 128) = v40;
        *(void *)(a6 + 136) = v42;
        *(_BYTE *)(a6 + 144) = v30;
        *(void *)(a6 + 152) = v38;
        *(void *)(a6 + 160) = v41;
        *(void *)(a6 + 168) = v27;
        *(_BYTE *)(a6 + 176) = v78;
        return result;
      }
    }

    outlined retain of SubstringSearcher(a5);
    uint64_t v32 = v25;
    uint64_t v43 = Substring.subscript.getter();
    uint64_t v45 = v44;
    uint64_t v47 = v46;
    uint64_t v49 = v48;
    swift_bridgeObjectRetain();
    uint64_t v50 = v45;
    uint64_t v51 = v47;
    uint64_t v52 = v49;
    unint64_t v34 = v64;
    unint64_t v35 = v65;
    uint64_t v37 = v72;
    uint64_t v61 = specialized SubstringSearcher.State.init(text:pattern:)(v43, v50, v51, v52, v65, v64);
    unint64_t v53 = v29;
    uint64_t v41 = v54;
    uint64_t v27 = v55;
    char v36 = v56 & 1;
    outlined release of SubstringSearcher(a5);
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t v39 = v53;
    uint64_t v33 = v70;
    unint64_t v31 = v71;
    uint64_t v40 = 0LL;
    uint64_t v42 = 0LL;
    char v30 = 1;
    uint64_t v38 = v61;
    goto LABEL_7;
  }

  __break(1u);
  return result;
}

unint64_t specialized RangesCollection.init(base:searcher:)@<X0>( unint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t (*a7)(uint64_t *, uint64_t *)@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  unint64_t v9 = a2 >> 14;
  if (a2 >> 14 < result >> 14)
  {
    __break(1u);
  }

  else
  {
    unint64_t v17 = result;
    swift_bridgeObjectRetain();
    unint64_t v29 = a7;
    uint64_t v30 = a8;
    uint64_t v27 = a5;
    unint64_t v19 = specialized ZSearcher.search(_:in:)(v17, a2, a3, a4, v17, a2, a5, a6, a7);
    unint64_t v21 = v19;
    unint64_t v22 = v20;
    char v24 = v23;
    uint64_t v28 = a6;
    if ((v23 & 1) != 0)
    {
      char v25 = 0;
      uint64_t v26 = v17;
    }

    else if (v19 >> 14 == v20 >> 14)
    {
      if (v19 >> 14 == v9)
      {
        uint64_t v26 = 0LL;
        char v25 = 1;
      }

      else
      {
        uint64_t v26 = Substring.index(after:)();
        char v25 = 0;
      }
    }

    else
    {
      char v25 = 0;
      uint64_t v26 = v20;
    }

    uint64_t result = swift_bridgeObjectRelease();
    *(void *)a9 = v17;
    *(void *)(a9 + 8) = a2;
    *(void *)(a9 + 16) = a3;
    *(void *)(a9 + 24) = a4;
    *(void *)(a9 + 32) = v27;
    *(void *)(a9 + 40) = v28;
    *(void *)(a9 + 48) = v29;
    *(void *)(a9 + 56) = v30;
    *(void *)(a9 + 64) = v21;
    *(void *)(a9 + 72) = v22;
    *(_BYTE *)(a9 + 80) = v24 & 1;
    *(void *)(a9 + 88) = v26;
    *(_BYTE *)(a9 + 96) = v25;
    *(void *)(a9 + 104) = a2;
  }

  return result;
}

uint64_t RangesCollection.init(base:searcher:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v95 = a2;
  uint64_t v96 = a1;
  uint64_t v86 = type metadata accessor for RangesCollection.Index(0LL, a3, a4, a4);
  uint64_t v84 = *(void *)(v86 - 8);
  MEMORY[0x1895F8858](v86);
  uint64_t v72 = (uint64_t)&v68 - v8;
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v88 = swift_getAssociatedConformanceWitness();
  uint64_t v10 = type metadata accessor for Range();
  uint64_t v71 = type metadata accessor for Optional();
  uint64_t v70 = *(void *)(v71 - 8);
  uint64_t v11 = MEMORY[0x1895F8858](v71);
  uint64_t v82 = (char *)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v11);
  unint64_t v93 = (char *)&v68 - v13;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v14 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v16 = (char *)&v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = MEMORY[0x1895F8858](v14);
  unint64_t v19 = (char *)&v68 - v18;
  uint64_t v73 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v20 = MEMORY[0x1895F8858](v17);
  unint64_t v22 = (char *)&v68 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = MEMORY[0x1895F8858](v20);
  char v25 = (char *)&v68 - v24;
  uint64_t v79 = v10;
  uint64_t v81 = *(void *)(v10 - 8);
  uint64_t v26 = MEMORY[0x1895F8858](v23);
  __int128 v69 = (char *)&v68 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = MEMORY[0x1895F8858](v26);
  uint64_t v74 = (char *)&v68 - v29;
  MEMORY[0x1895F8858](v28);
  char v75 = (char *)&v68 - v30;
  uint64_t v31 = swift_getAssociatedTypeWitness();
  uint64_t v91 = *(void *)(v31 - 8);
  uint64_t v92 = v31;
  uint64_t v32 = MEMORY[0x1895F8858](v31);
  uint64_t v76 = (char *)&v68 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v32);
  uint64_t v94 = (uint64_t)&v68 - v34;
  uint64_t v35 = swift_checkMetadataState();
  uint64_t v77 = *(void *)(v35 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v77 + 16))(a5, v96, v35);
  uint64_t v85 = a4;
  uint64_t v37 = type metadata accessor for RangesCollection(0LL, a3, a4, v36);
  uint64_t v89 = a3;
  uint64_t v90 = v37;
  uint64_t v38 = *(int *)(v37 + 36);
  uint64_t v83 = a5;
  uint64_t v39 = a5 + v38;
  uint64_t v40 = *(void *)(a3 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 16))(v39, v95, a3);
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v80 = v35;
  dispatch thunk of Collection.endIndex.getter();
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if ((result & 1) != 0)
  {
    uint64_t v42 = TupleTypeMetadata2;
    uint64_t v43 = &v19[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v44 = v73;
    uint64_t v45 = *(void (**)(char *, char *, uint64_t))(v73 + 32);
    v45(v19, v25, AssociatedTypeWitness);
    v45(v43, v22, AssociatedTypeWitness);
    uint64_t v46 = &v16[*(int *)(v42 + 48)];
    uint64_t v47 = *(void (**)(char *, char *, uint64_t))(v44 + 16);
    v47(v16, v19, AssociatedTypeWitness);
    v47(v46, v43, AssociatedTypeWitness);
    uint64_t AssociatedConformanceWitness = v40;
    uint64_t v48 = v74;
    v45(v74, v16, AssociatedTypeWitness);
    uint64_t v49 = *(void (**)(char *, uint64_t))(v44 + 8);
    v49(v46, AssociatedTypeWitness);
    uint64_t v50 = &v16[*(int *)(v42 + 48)];
    v45(v16, v19, AssociatedTypeWitness);
    v45(v50, v43, AssociatedTypeWitness);
    uint64_t v51 = v79;
    v45(&v48[*(int *)(v79 + 36)], v50, AssociatedTypeWitness);
    v49(v16, AssociatedTypeWitness);
    uint64_t v52 = v81;
    unint64_t v53 = v75;
    TupleTypeMetadata2 = *(void *)(v81 + 32);
    ((void (*)(char *, char *, uint64_t))TupleTypeMetadata2)(v75, v48, v51);
    uint64_t v54 = v85;
    uint64_t v55 = v51;
    uint64_t v57 = v94;
    uint64_t v56 = v95;
    uint64_t v58 = v96;
    uint64_t v59 = v89;
    (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(v85 + 32))(v96, v53, v89, v85);
    (*(void (**)(char *, uint64_t))(v52 + 8))(v53, v55);
    uint64_t v60 = (uint64_t)v93;
    char v75 = *(char **)(v52 + 56);
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v75)(v93, 1LL, 1LL, v55);
    uint64_t v61 = (uint64_t)v76;
    (*(void (**)(char *, uint64_t, uint64_t))(v91 + 16))(v76, v57, v92);
    uint64_t v88 = v83 + *(int *)(v90 + 40);
    RangesCollection.Index.init(range:state:)(v60, v61, v59, v54, v88);
    uint64_t v62 = v82;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v54 + 40))(v58, v57, v59, v54);
    (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 8))(v56, v59);
    (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v58, v80);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v62, 1LL, v55) == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v94, v92);
      (*(void (**)(char *, uint64_t))(v70 + 8))(v62, v71);
      uint64_t v63 = v72;
      RangesCollection.endIndex.getter(v90, v72);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v84 + 40))(v88, v63, v86);
    }

    else
    {
      unint64_t v64 = v69;
      unint64_t v65 = (void (*)(char *, char *, uint64_t))TupleTypeMetadata2;
      ((void (*)(char *, char *, uint64_t))TupleTypeMetadata2)(v69, v62, v55);
      uint64_t v66 = (uint64_t)v93;
      v65(v93, v64, v55);
      ((void (*)(uint64_t, void, uint64_t, uint64_t))v75)(v66, 0LL, 1LL, v55);
      uint64_t v67 = v88;
      (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v88, v86);
      return RangesCollection.Index.init(range:state:)(v66, v94, v89, v54, v67);
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t RangesCollection.Index.init(range:state:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32LL))(a5, a1, v10);
  uint64_t v12 = a5 + *(int *)(type metadata accessor for RangesCollection.Index(0LL, a3, a4, v11) + 36);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32LL))( v12,  a2,  AssociatedTypeWitness);
}

uint64_t RangesCollection.endIndex.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v82 = a1;
  uint64_t v77 = a2;
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 24);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v5 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  char v75 = (char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = MEMORY[0x1895F8858](v5);
  uint64_t v72 = (char *)&v63 - v8;
  uint64_t v73 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = MEMORY[0x1895F8858](v7);
  uint64_t v80 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v9);
  uint64_t v79 = (char *)&v63 - v11;
  uint64_t v81 = swift_getAssociatedConformanceWitness();
  uint64_t v12 = type metadata accessor for Range();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1895F8858](v12);
  uint64_t v71 = (char *)&v63 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v14);
  uint64_t v74 = (char *)&v63 - v16;
  uint64_t v17 = swift_checkMetadataState();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = MEMORY[0x1895F8858](v17);
  uint64_t v21 = (char *)&v63 - v20;
  uint64_t v22 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v19);
  uint64_t v24 = (char *)&v63 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v69 = v2;
  uint64_t v25 = swift_getAssociatedTypeWitness();
  MEMORY[0x1895F8858](v25);
  unint64_t v65 = (char *)&v63 - v26;
  uint64_t v27 = type metadata accessor for Optional();
  MEMORY[0x1895F8858](v27);
  uint64_t v29 = (char *)&v63 - v28;
  uint64_t v67 = v13;
  uint64_t v30 = *(void (**)(void))(v13 + 56);
  unint64_t v64 = v29;
  v30();
  uint64_t v31 = v83;
  uint64_t v32 = v83 + *(int *)(v82 + 36);
  uint64_t v70 = v22;
  uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
  uint64_t v66 = v24;
  uint64_t v34 = v24;
  uint64_t v35 = v3;
  v33(v34, v32, v3);
  uint64_t v82 = v18;
  uint64_t v36 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  uint64_t v68 = v21;
  uint64_t v37 = v21;
  uint64_t v38 = v80;
  v36(v37, v31, v17);
  uint64_t v39 = v79;
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v40 = v39;
  dispatch thunk of Collection.endIndex.getter();
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if ((result & 1) != 0)
  {
    uint64_t AssociatedConformanceWitness = v12;
    uint64_t v42 = TupleTypeMetadata2;
    uint64_t v43 = v72;
    uint64_t v44 = &v72[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v81 = v35;
    uint64_t v45 = v73;
    uint64_t v46 = *(void (**)(char *, char *, uint64_t))(v73 + 32);
    v46(v72, v40, AssociatedTypeWitness);
    v46(v44, v38, AssociatedTypeWitness);
    uint64_t v47 = *(int *)(v42 + 48);
    uint64_t v83 = v17;
    uint64_t v48 = v75;
    uint64_t v49 = &v75[v47];
    uint64_t v50 = *(void (**)(char *, char *, uint64_t))(v45 + 16);
    v50(v75, v43, AssociatedTypeWitness);
    v50(v49, v44, AssociatedTypeWitness);
    uint64_t v51 = v71;
    v46(v71, v48, AssociatedTypeWitness);
    uint64_t v52 = *(void (**)(char *, uint64_t))(v45 + 8);
    v52(v49, AssociatedTypeWitness);
    unint64_t v53 = &v48[*(int *)(v42 + 48)];
    v46(v48, v43, AssociatedTypeWitness);
    v46(v53, v44, AssociatedTypeWitness);
    uint64_t v54 = AssociatedConformanceWitness;
    v46(&v51[*(int *)(AssociatedConformanceWitness + 36)], v53, AssociatedTypeWitness);
    v52(v48, AssociatedTypeWitness);
    uint64_t v55 = v67;
    uint64_t v56 = v74;
    uint64_t v57 = v54;
    (*(void (**)(char *, char *, uint64_t))(v67 + 32))(v74, v51, v54);
    uint64_t v58 = v68;
    uint64_t v59 = v69;
    uint64_t v61 = (uint64_t)v65;
    uint64_t v60 = v66;
    uint64_t v62 = v81;
    (*(void (**)(char *, char *, uint64_t, uint64_t))(v69 + 32))(v68, v56, v81, v69);
    (*(void (**)(char *, uint64_t))(v55 + 8))(v56, v57);
    (*(void (**)(char *, uint64_t))(v82 + 8))(v58, v83);
    (*(void (**)(char *, uint64_t))(v70 + 8))(v60, v62);
    return RangesCollection.Index.init(range:state:)((uint64_t)v64, v61, v62, v59, v77);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t RangesIterator.init(base:searcher:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v65 = a2;
  uint64_t v66 = a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v9 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = MEMORY[0x1895F8858](v9);
  uint64_t v50 = (char *)&v48 - v13;
  uint64_t v54 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v14 = MEMORY[0x1895F8858](v12);
  uint64_t v16 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v14);
  uint64_t v18 = (char *)&v48 - v17;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v19 = type metadata accessor for Range();
  uint64_t v60 = *(void *)(v19 - 8);
  uint64_t v61 = v19;
  uint64_t v20 = MEMORY[0x1895F8858](v19);
  uint64_t v52 = (char *)&v48 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v20);
  uint64_t v58 = (char *)&v48 - v22;
  uint64_t v23 = swift_getAssociatedTypeWitness();
  uint64_t v56 = *(void *)(v23 - 8);
  uint64_t v57 = v23;
  MEMORY[0x1895F8858](v23);
  uint64_t v55 = (char *)&v48 - v24;
  uint64_t v25 = swift_checkMetadataState();
  uint64_t v51 = *(void *)(v25 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 16))(a5, v66, v25);
  uint64_t v62 = a4;
  uint64_t v49 = type metadata accessor for RangesIterator(0LL, a3, a4, v26);
  uint64_t v27 = *(int *)(v49 + 36);
  uint64_t v63 = a5;
  uint64_t v28 = a5 + v27;
  uint64_t v29 = *(void *)(a3 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16))(v28, v65, a3);
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v53 = v25;
  dispatch thunk of Collection.endIndex.getter();
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if ((result & 1) != 0)
  {
    uint64_t v31 = TupleTypeMetadata2;
    uint64_t v32 = v50;
    uint64_t v33 = &v50[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v48 = a3;
    uint64_t v34 = v54;
    uint64_t AssociatedConformanceWitness = v29;
    uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v54 + 32);
    v35(v50, v18, AssociatedTypeWitness);
    v35(v33, v16, AssociatedTypeWitness);
    uint64_t v36 = &v11[*(int *)(v31 + 48)];
    uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v34 + 16);
    v37(v11, v32, AssociatedTypeWitness);
    v37(v36, v33, AssociatedTypeWitness);
    uint64_t v38 = v52;
    v35(v52, v11, AssociatedTypeWitness);
    uint64_t v39 = *(void (**)(char *, uint64_t))(v34 + 8);
    v39(v36, AssociatedTypeWitness);
    uint64_t v40 = &v11[*(int *)(v31 + 48)];
    v35(v11, v32, AssociatedTypeWitness);
    v35(v40, v33, AssociatedTypeWitness);
    uint64_t v41 = v61;
    v35(&v38[*(int *)(v61 + 36)], v40, AssociatedTypeWitness);
    v39(v11, AssociatedTypeWitness);
    uint64_t v42 = v60;
    uint64_t v43 = v58;
    (*(void (**)(char *, char *, uint64_t))(v60 + 32))(v58, v38, v41);
    uint64_t v44 = v55;
    uint64_t v46 = v65;
    uint64_t v45 = v66;
    uint64_t v47 = v48;
    (*(void (**)(uint64_t, char *, uint64_t))(v62 + 32))(v66, v43, v48);
    (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 8))(v46, v47);
    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v45, v53);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v43, v41);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v56 + 32))(v63 + *(int *)(v49 + 40), v44, v57);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t RangesIterator.next()(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)(a1 + 24) + 40LL))( v1,  v1 + *(int *)(a1 + 40),  *(void *)(a1 + 16));
}

uint64_t RangesCollection.makeIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1895F8858](a1);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *(void *)(v7 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v13 = (char *)&v16 - v12;
  (*(void (**)(char *, uint64_t))(v14 + 16))((char *)&v16 - v12, v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v2 + *(int *)(a1 + 36), v5);
  return RangesIterator.init(base:searcher:)((uint64_t)v13, (uint64_t)v9, v5, v10, a2);
}

uint64_t protocol witness for Sequence.makeIterator() in conformance RangesCollection<A>( uint64_t a1, uint64_t a2)
{
  return protocol witness for Sequence.makeIterator() in conformance RangesCollection<A>( a1,  a2,  (void (*)(void))RangesCollection.makeIterator());
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance RangesCollection<A>( uint64_t a1)
{
  return Collection.underestimatedCount.getter();
}

uint64_t protocol witness for Sequence._customContainsEquatableElement(_:) in conformance RangesCollection<A>()
{
  return 2LL;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance RangesCollection<A>( uint64_t a1)
{
  return Collection._copyToContiguousArray()();
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance RangesCollection<A>()
{
  return Sequence.withContiguousStorageIfAvailable<A>(_:)();
}

uint64_t RangesCollection.formIndex(after:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for Range();
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v17 = *(void *)(v7 - 8);
  uint64_t v18 = v7;
  MEMORY[0x1895F8858](v7);
  uint64_t v9 = (char *)&v17 - v8;
  uint64_t v11 = type metadata accessor for RangesCollection.Index(0LL, v6, v5, v10);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1895F8858](v11);
  uint64_t v14 = (char *)&v17 - v13;
  RangesCollection.endIndex.getter(a2, (uint64_t)&v17 - v13);
  uint64_t v15 = a1;
  LOBYTE(a1) = static RangesCollection.Index.== infix(_:_:)(a1, (uint64_t)v14);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  if ((a1 & 1) != 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 40))(v2, v15 + *(int *)(v11 + 36), v6, v5);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v17 + 40))(v15, v9, v18);
  }

  return result;
}

uint64_t RangesCollection.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Range();
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)&v11 - v7;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v11 - v7, a1, v5);
  uint64_t v9 = *(void *)(v4 - 8);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t protocol witness for Collection.startIndex.getter in conformance RangesCollection<A>@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Collection.startIndex.getter in conformance RangesCollection<A>( a1,  (uint64_t (*)(void, void, void))type metadata accessor for RangesCollection.Index,  a2);
}

uint64_t (*protocol witness for Collection.subscript.read in conformance RangesCollection<A>( uint64_t **a1, uint64_t a2))()
{
  uint64_t v4 = (uint64_t *)malloc(0x28uLL);
  *a1 = v4;
  v4[4] = (uint64_t)RangesCollection.subscript.read(v4, a2);
  return protocol witness for Collection.subscript.read in conformance RangesCollection<A>;
}

uint64_t (*RangesCollection.subscript.read(uint64_t *a1, uint64_t a2))()
{
  uint64_t v4 = type metadata accessor for Range();
  *a1 = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  a1[1] = v5;
  uint64_t v6 = malloc(*(void *)(v5 + 64));
  a1[2] = (uint64_t)v6;
  RangesCollection.subscript.getter(a2, (uint64_t)v6);
  return RangesCollection.subscript.read;
}

uint64_t protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance RangesCollection<A>@<X0>( uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance RangesCollection<A>( a1,  (void (*)(uint64_t, void, void))type metadata accessor for RangesCollection.Index,  a2);
}

uint64_t protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance RangesCollection<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized Collection._failEarlyRangeCheck(_:bounds:)( a1,  a2,  a3,  a4,  (uint64_t (*)(void, uint64_t, uint64_t))MEMORY[0x189618A18],  (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x189617B40]);
}

{
  return specialized Collection._failEarlyRangeCheck(_:bounds:)( a1,  a2,  a3,  a4,  MEMORY[0x189617BE0],  (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x189617B50]);
}

uint64_t protocol witness for Collection.index(after:) in conformance RangesCollection<A>@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return RangesCollection.index(after:)( a1,  a2,  (uint64_t (*)(void, void, void))type metadata accessor for RangesCollection.Index,  RangesCollection.formIndex(after:),  a3);
}

uint64_t static RangesCollection.Index.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = a1;
  uint64_t v25 = a2;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  v23[1] = swift_getAssociatedConformanceWitness();
  uint64_t v2 = type metadata accessor for Range();
  uint64_t v3 = *(void **)(v2 - 8);
  uint64_t v4 = MEMORY[0x1895F8858](v2);
  v23[0] = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v4);
  uint64_t v7 = (char *)v23 - v6;
  uint64_t v8 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v10 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v12 = (char *)v23 - v11;
  uint64_t v13 = (char *)v23 + *(int *)(v10 + 48) - v11;
  uint64_t v14 = *(void *)(v8 - 8);
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v15((char *)v23 - v11, v24, v8);
  v15(v13, v25, v8);
  uint64_t v16 = (uint64_t (*)(char *, uint64_t, uint64_t))v3[6];
  LODWORD(v15) = v16(v12, 1LL, v2);
  int v17 = v16(v13, 1LL, v2);
  if ((_DWORD)v15 != 1)
  {
    if (v17 != 1)
    {
      uint64_t v19 = (void (*)(char *, char *, uint64_t))v3[4];
      v19(v7, v12, v2);
      uint64_t v20 = v23[0];
      v19((char *)v23[0], v13, v2);
      char v18 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v21 = (void (*)(uint64_t, uint64_t))v3[1];
      v21(v20, v2);
      v21((uint64_t)v7, v2);
      return v18 & 1;
    }

    ((void (*)(char *, uint64_t))v3[1])(v12, v2);
    goto LABEL_7;
  }

  if (v17 != 1)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v13, v8);
LABEL_7:
    char v18 = 0;
    return v18 & 1;
  }

  char v18 = 1;
  return v18 & 1;
}

uint64_t static RangesCollection.Index.< infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = a1;
  uint64_t v24 = a2;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  v22[1] = swift_getAssociatedConformanceWitness();
  uint64_t v2 = type metadata accessor for Range();
  uint64_t v3 = *(void **)(v2 - 8);
  uint64_t v4 = MEMORY[0x1895F8858](v2);
  uint64_t v6 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v4);
  uint64_t v8 = (char *)v22 - v7;
  uint64_t v9 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v11 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v13 = (char *)v22 - v12;
  uint64_t v14 = (char *)v22 + *(int *)(v11 + 48) - v12;
  uint64_t v15 = *(void *)(v9 - 8);
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v16((char *)v22 - v12, v23, v9);
  v16(v14, v24, v9);
  int v17 = (unsigned int (*)(char *, uint64_t, uint64_t))v3[6];
  if (v17(v13, 1LL, v2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v14, v9);
    char v18 = 0;
  }

  else if (v17(v14, 1LL, v2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v13, v9);
    char v18 = 1;
  }

  else
  {
    uint64_t v19 = (void (*)(char *, char *, uint64_t))v3[4];
    v19(v8, v13, v2);
    v19(v6, v14, v2);
    char v18 = dispatch thunk of static Comparable.< infix(_:_:)();
    uint64_t v20 = (void (*)(char *, uint64_t))v3[1];
    v20(v6, v2);
    v20(v8, v2);
  }

  return v18 & 1;
}

uint64_t protocol witness for static Comparable.< infix(_:_:) in conformance RangesCollection<A>.Index( uint64_t a1, uint64_t a2)
{
  return static RangesCollection.Index.< infix(_:_:)(a1, a2);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RangesCollection<A>.Index( uint64_t a1, uint64_t a2)
{
  return static RangesCollection.Index.== infix(_:_:)(a1, a2);
}

uint64_t Collection._ranges<A>(of:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v9 = *(void *)(a2 - 8);
  uint64_t v10 = MEMORY[0x1895F8858](a1);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v10);
  uint64_t v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t))(v15 + 16))(v14, v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a1, a2);
  return RangesCollection.init(base:searcher:)((uint64_t)v14, (uint64_t)v12, a2, a3, a4);
}

unint64_t specialized Collection<>._ranges<A>(of:)@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14 = String.count.getter();
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v16 = (uint64_t)specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v14, 0LL);
    swift_bridgeObjectRetain();
    uint64_t v17 = specialized Sequence._copySequenceContents(initializing:)( &v80,  (Swift::String_optional *)(v16 + 32),  v15,  a1,  a2);
    swift_bridgeObjectRelease();
    if (v17 == (void *)v15) {
      goto LABEL_5;
    }
    __break(1u);
  }

  uint64_t v16 = MEMORY[0x18961AFE8];
LABEL_5:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_182D9CC00;
  int64_t v19 = *(void *)(v16 + 16);
  *(void *)(v18 + 32) = v19;
  int64_t v78 = v19;
  uint64_t v74 = a5;
  uint64_t v75 = a6;
  unint64_t v72 = a3;
  unint64_t v73 = a4;
  uint64_t v71 = a7;
  if ((unint64_t)v19 >= 2)
  {
LABEL_79:
    uint64_t v61 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)1,  v19,  0,  (char *)v18);
    int64_t v19 = v78;
    uint64_t v18 = (uint64_t)v61;
  }

  uint64_t v20 = *(void *)(v16 + 16);
  uint64_t v21 = v20 != 0;
  uint64_t v79 = (Swift::String_optional *)v16;
  if (v20 != v21)
  {
    int64_t v24 = 0LL;
    int64_t v25 = 0LL;
    uint64_t v70 = (void **)(v16 + 40);
    uint64_t v67 = (Swift::String_optional *)(v16 + 32);
    uint64_t v68 = v20 - 1;
    uint64_t v66 = (void **)(v16 + 56);
    uint64_t v26 = (Swift::String_optional *)(v20 != 0);
    uint64_t v76 = v26;
    uint64_t v77 = *(void *)(v16 + 16);
    while (2)
    {
      uint64_t v27 = (uint64_t)v26 - v24;
      unint64_t result = 32 - 8 * v24;
      uint64_t v28 = -v24;
      else {
        int64_t v24 = (int64_t)v26;
      }
      uint64_t v16 = -(uint64_t)v26;
      uint64_t v69 = v25;
      uint64_t v29 = (char *)v70 + 16 * v25 - 16LL * (void)v26;
      uint64_t v30 = &v79[-(void)v26];
      uint64_t v31 = &v79[(void)v26];
      int64_t v32 = (int64_t)v26;
      while (1)
      {
        if ((uint64_t)v26 < v21 || v32 >= v20)
        {
          __break(1u);
LABEL_73:
          __break(1u);
LABEL_74:
          __break(1u);
LABEL_75:
          __break(1u);
LABEL_76:
          __break(1u);
LABEL_77:
          __break(1u);
LABEL_78:
          __break(1u);
          goto LABEL_79;
        }

        int64_t v33 = v32 + 1;
        if (v24 == v32) {
          break;
        }
        if (v27 < 0) {
          goto LABEL_73;
        }
        unint64_t v34 = *(void *)(v18 + 16);
        if (v28 + v32 >= v34) {
          goto LABEL_74;
        }
        uint64_t v35 = *(void *)(v18 + result + 8 * v32);
        if (v35 >= v25 + v16)
        {
          unint64_t v45 = v25 + v16;
          int64_t v33 = v32 + v25 + v16;
          if (!__OFADD__(v32, v25 + v16))
          {
            if (v33 >= v19) {
              goto LABEL_66;
            }
            if ((v45 & 0x8000000000000000LL) == 0)
            {
              unint64_t countAndFlagsBits = v79[1].value._countAndFlagsBits;
              if (v45 < countAndFlagsBits)
              {
                if (v33 < countAndFlagsBits)
                {
                  uint64_t v50 = &v67[v33];
                  uint64_t v51 = v18;
                  int64_t v52 = v25;
                  char v53 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  int64_t v25 = v52;
                  uint64_t v21 = (uint64_t)v76;
                  uint64_t v20 = v77;
                  int64_t v19 = v78;
                  uint64_t v18 = v51;
                  if ((v53 & 1) != 0)
                  {
LABEL_48:
                    if (++v33 < v19)
                    {
                      uint64_t v54 = v79;
                      while (v16 + v33 < countAndFlagsBits)
                      {
                        if (v30[v69 + 3].value._countAndFlagsBits != v54[v69 + 3].value._countAndFlagsBits
                          || v30[v69 + 3].value._object != v54[v69 + 3].value._object)
                        {
                          uint64_t v56 = v18;
                          char v57 = _stringCompareWithSmolCheck(_:_:expecting:)();
                          uint64_t v21 = (uint64_t)v76;
                          uint64_t v20 = v77;
                          int64_t v19 = v78;
                          uint64_t v18 = v56;
                          if ((v57 & 1) == 0)
                          {
                            unint64_t v45 = v16 + v33;
                            goto LABEL_66;
                          }
                        }

                        ++v33;
                        ++v30;
                        ++v54;
                        if (v19 == v33)
                        {
                          unint64_t v45 = v16 + v33;
                          int64_t v33 = v19;
                          goto LABEL_66;
                        }
                      }

                      goto LABEL_77;
                    }

                    unint64_t v45 = v25 - v32 + 1;
                  }

LABEL_66:
                  unint64_t v58 = *(void *)(v18 + 24);
                  int64_t v59 = v34 + 1;
                  if (v34 < v58 >> 1)
                  {
                    int64_t v24 = v32;
                    goto LABEL_68;
                  }

                  uint64_t v60 = (Swift::String_optional *)v32;
LABEL_71:
                  uint64_t v18 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v58 > 1),  v59,  1,  (char *)v18);
                  uint64_t v20 = v77;
                  int64_t v19 = v78;
                  uint64_t v21 = (uint64_t)v76;
                  int64_t v24 = (int64_t)v60;
                  goto LABEL_68;
                }

LABEL_85:
                __break(1u);
                return result;
              }

  swift_bridgeObjectRelease_n();
  if (!(_DWORD)v174)
  {
    specialized Compiler.ByteCodeGen.emitAlternationGen<A>(_:withBacktracking:_:)(v1, v60);
    return swift_release();
  }

  v180 = v1;
  uint64_t v37 = v60 + *(int *)(v143 + 20);
  uint64_t v1 = *(void *)(v37 + 80);
  uint64_t v2 = *(void *)(v1 + 16);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_155;
  }
  while (1)
  {
    uint64_t v91 = *(void *)(v1 + 16);
    uint64_t v90 = *(void *)(v1 + 24);
    v177 = v2;
    if (v91 >= v90 >> 1) {
      uint64_t v1 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v90 > 1),  v91 + 1,  1,  (char *)v1);
    }
    *(void *)(v1 + 16) = v91 + 1;
    uint64_t v92 = v1 + 16 * v91;
    *(void *)(v92 + 32) = 0LL;
    *(_BYTE *)(v92 + 40) = 1;
    *(void *)(v37 + 80) = v1;
    v178 = specialized Collection.dropLast(_:)(1LL, v180);
    v185 = v93;
    uint64_t v95 = v94;
    uint64_t v97 = v96 >> 1;
    swift_retain();
    if (v95 == v97) {
      break;
    }
    while (v95 < v97)
    {
      outlined init with copy of MEProgram( v185 + *(void *)(v179 + 72) * v95,  v151,  type metadata accessor for DSLTree.CustomCharacterClass.Member);
      unint64_t v117 = *(void *)(v1 + 16);
      uint64_t v116 = *(void *)(v1 + 24);
      if (v117 >= v116 >> 1) {
        uint64_t v1 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v116 > 1),  v117 + 1,  1,  (char *)v1);
      }
      *(void *)(v1 + 16) = v117 + 1;
      unint64_t v118 = v1 + 16 * v117;
      *(void *)(v118 + 32) = 0LL;
      *(_BYTE *)(v118 + 40) = 1;
      *(void *)(v37 + 80) = v1;
      unint64_t v119 = *(char **)v37;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v119 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v119 + 2) + 1LL,  1,  v119,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
      }
      uint64_t v121 = *((void *)v119 + 2);
      uint64_t v120 = *((void *)v119 + 3);
      if (v121 >= v120 >> 1) {
        unint64_t v119 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v120 > 1),  v121 + 1,  1,  v119,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
      }
      *((void *)v119 + 2) = v121 + 1;
      *(void *)&v119[8 * v121 + 32] = 0x1000000000000000LL;
      *(void *)uint64_t v37 = v119;
      uint64_t v122 = *((void *)v119 + 2);
      uint64_t v123 = *(char **)(v37 + 88);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v123 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v123 + 2) + 1LL,  1,  v123);
      }
      uint64_t v125 = *((void *)v123 + 2);
      uint64_t v124 = *((void *)v123 + 3);
      if (v125 >= v124 >> 1) {
        uint64_t v123 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v124 > 1),  v125 + 1,  1,  v123);
      }
      *((void *)v123 + 2) = v125 + 1;
      uint64_t v126 = &v123[32 * v125];
      *((void *)v126 + 4) = v122 - 1;
      *((void *)v126 + 5) = v117;
      *((void *)v126 + 6) = 0LL;
      v126[56] = 1;
      *(void *)(v37 + 88) = v123;
      uint64_t v127 = v151;
      uint64_t v128 = v152;
      Compiler.ByteCodeGen.emitCCCMember(_:)(v151);
      char v152 = v128;
      if (v128)
      {
        swift_unknownObjectRelease();
        swift_release();
        return outlined destroy of MEProgram(v127, type metadata accessor for DSLTree.CustomCharacterClass.Member);
      }

      outlined destroy of MEProgram(v127, type metadata accessor for DSLTree.CustomCharacterClass.Member);
      uint64_t v129 = *(char **)v37;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v129 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v129 + 2) + 1LL,  1,  v129,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
      }
      uint64_t v131 = *((void *)v129 + 2);
      char v130 = *((void *)v129 + 3);
      if (v131 >= v130 >> 1) {
        uint64_t v129 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v130 > 1),  v131 + 1,  1,  v129,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
      }
      *((void *)v129 + 2) = v131 + 1;
      *(void *)&v129[8 * v131 + 32] = 0x1200000000000000LL;
      *(void *)uint64_t v37 = v129;
      uint64_t v2 = *((void *)v129 + 2);
      uint64_t v132 = *((void *)v129 + 3);
      if (v2 >= v132 >> 1) {
        uint64_t v129 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v132 > 1),  v2 + 1,  1,  v129,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
      }
      *((void *)v129 + 2) = v2 + 1;
      *(void *)&v129[8 * v2 + 32] = 0x1C00000000000000LL;
      *(void *)uint64_t v37 = v129;
      unint64_t v133 = *((void *)v129 + 2);
      uint64_t v1 = *(void *)(v37 + 80);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v1 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v1);
      }
      if (v117 >= *(void *)(v1 + 16)) {
        goto LABEL_153;
      }
      unint64_t v134 = v1 + 16 * v117;
      *(void *)(v134 + 32) = v133;
      ++v95;
      *(_BYTE *)(v134 + 40) = 0;
      *(void *)(v37 + 80) = v1;
      if (v97 == v95) {
        goto LABEL_90;
      }
    }

LABEL_84:
              __break(1u);
              goto LABEL_85;
            }

LABEL_83:
            __break(1u);
            goto LABEL_84;
          }

          __break(1u);
LABEL_81:
          __break(1u);
          goto LABEL_82;
        }

        unint64_t v36 = *(void *)(v18 + 24);
        if (v34 >= v36 >> 1)
        {
          uint64_t v62 = v28;
          unint64_t v63 = result;
          uint64_t v37 = (Swift::String_optional *)v24;
          uint64_t v64 = v27;
          int64_t v65 = v25;
          uint64_t v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v36 > 1),  v34 + 1,  1,  (char *)v18);
          uint64_t v27 = v64;
          int64_t v25 = v65;
          int64_t v24 = (int64_t)v37;
          uint64_t v21 = (uint64_t)v76;
          uint64_t v20 = v77;
          int64_t v19 = v78;
          uint64_t v18 = (uint64_t)v38;
          uint64_t v28 = v62;
          unint64_t result = v63;
        }

        *(void *)(v18 + 16) = v34 + 1;
        --v16;
        *(void *)(v18 + 8 * v34 + 32) = v35;
        v29 -= 16;
        --v30;
        ++v31;
        int64_t v32 = v33;
        if (v20 == v33) {
          goto LABEL_7;
        }
      }

      if (v24 >= v19) {
        goto LABEL_59;
      }
      uint64_t v39 = v79[1].value._countAndFlagsBits;
      if (!v39) {
        goto LABEL_81;
      }
      if (v24 >= v39)
      {
LABEL_82:
        __break(1u);
        goto LABEL_83;
      }

      uint64_t v40 = &v67[v24];
      if (v79[2].value._countAndFlagsBits == v40->value._countAndFlagsBits
        && v79[2].value._object == v40->value._object)
      {
        goto LABEL_29;
      }

      uint64_t v41 = v18;
      uint64_t v42 = (Swift::String_optional *)v24;
      char v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
      int64_t v24 = (int64_t)v42;
      uint64_t v21 = (uint64_t)v76;
      uint64_t v20 = v77;
      int64_t v19 = v78;
      uint64_t v18 = v41;
      if ((v43 & 1) != 0)
      {
LABEL_29:
        if (v33 < v19)
        {
          uint64_t v44 = v66;
          unint64_t v45 = 1LL;
          while (v39 != v45)
          {
            if (v32 + v45 >= v39) {
              goto LABEL_76;
            }
            if (*(v44 - 1) != (void *)v31[3].value._countAndFlagsBits || *v44 != v31[3].value._object)
            {
              uint64_t v47 = v18;
              uint64_t v16 = v24;
              char v48 = _stringCompareWithSmolCheck(_:_:expecting:)();
              int64_t v24 = v16;
              uint64_t v21 = (uint64_t)v76;
              uint64_t v20 = v77;
              int64_t v19 = v78;
              uint64_t v18 = v47;
              if ((v48 & 1) == 0)
              {
                int64_t v33 = v32 + v45;
                goto LABEL_63;
              }
            }

            ++v45;
            v44 += 2;
            ++v31;
            if ((uint64_t)(v32 + v45) >= v19)
            {
              int64_t v33 = v19;
              goto LABEL_63;
            }
          }

          goto LABEL_75;
        }

        unint64_t v45 = 1LL;
      }

      else
      {
LABEL_59:
        unint64_t v45 = 0LL;
        int64_t v33 = v24;
      }

LABEL_63:
      unint64_t v34 = *(void *)(v18 + 16);
      unint64_t v58 = *(void *)(v18 + 24);
      int64_t v59 = v34 + 1;
      if (v34 >= v58 >> 1)
      {
        uint64_t v60 = (Swift::String_optional *)v24;
        goto LABEL_71;
      }

    uint64_t v71 = *(void *)(a1 + 120);
    if (__OFADD__(v71, 1LL))
    {
      __break(1u);
    }

    else
    {
      *(void *)(a1 + 120) = v71 + 1;
      uint64_t v44 = v71 | 0x200000000000000LL;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
LABEL_65:
        unint64_t v73 = *((void *)v31 + 2);
        unint64_t v72 = *((void *)v31 + 3);
        uint64_t v97 = v71;
        if (v73 >= v72 >> 1) {
          uint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v72 > 1),  v73 + 1,  1,  v31,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
        }
        uint64_t v69 = 0;
        *((void *)v31 + 2) = v73 + 1;
        *(void *)&v31[8 * v73 + 32] = v44;
        *(void *)a1 = v31;
        uint64_t v51 = v102;
        uint64_t v68 = v102;
        uint64_t v67 = v105;
LABEL_68:
        Compiler.ByteCodeGen.emitNode(_:)(v104);
        if (!v67)
        {
          if (!v68) {
            goto LABEL_74;
          }
          if ((v69 & 1) == 0)
          {
            MEProgram.Builder.buildCondBranch(to:ifSamePositionAs:)(v92, v97);
            goto LABEL_74;
          }

LABEL_68:
      *(void *)(v18 + 16) = v59;
      *(void *)(v18 + 8 * v34 + 32) = v45;
      uint64_t v26 = (Swift::String_optional *)(v32 + 1);
      int64_t v25 = v33;
      if (v68 != v32) {
        continue;
      }
      break;
    }
  }

LABEL_7:
  uint64_t v22 = v18;
  swift_bridgeObjectRetain();
  return specialized RangesCollection.init(base:searcher:)( v72,  v73,  v74,  v75,  (uint64_t)v79,  v22,  specialized implicit closure #1 in Collection<>._ranges<A>(of:),  0LL,  v71);
}

  __break(1u);
  return result;
}

      if (v16 == ++v6) {
        goto LABEL_3;
      }
    }

    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    uint64_t v6 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)1,  isUniquelyReferenced_nonNull_native,  0,  (char *)v6);
  }

  swift_bridgeObjectRelease();
  unint64_t result = specialized BidirectionalCollection.last.getter(v39, v40);
  if ((result & 0x100000000LL) == 0)
  {
    Compiler.ByteCodeGen.emitMatchScalar(_:)(result);
    int64_t v19 = *((void *)*v2 + 2);
    unint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      unint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v6);
      uint64_t v6 = (char *)result;
    }

    if (v4 < *((void *)v6 + 2))
    {
      uint64_t v20 = &v6[16 * v4];
      *((void *)v20 + 4) = v19;
      v20[40] = 0;
      v2[10] = v6;
      return result;
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0LL;
}

    uint64_t v10 = *(_OWORD *)(a2 + 56);
    uint64_t v11 = *(_OWORD *)(a2 + 72);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(_OWORD *)(a1 + 56) = v10;
    *(_OWORD *)(a1 + 72) = v11;
    return a1;
  }

  if (!v8)
  {
    uint64_t v9 = type metadata accessor for Regex.Match(0LL, *(void *)(a3 + 16), v6, v7);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))(a1 + 56, v9);
    goto LABEL_7;
  }

  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  return a1;
}

    uint64_t v10 = *(_OWORD *)(a2 + 56);
    uint64_t v11 = *(_OWORD *)(a2 + 72);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(_OWORD *)(a1 + 56) = v10;
    *(_OWORD *)(a1 + 72) = v11;
    goto LABEL_8;
  }

  if (!v8)
  {
    uint64_t v9 = type metadata accessor for Regex.Match(0LL, *(void *)(a3 + 16), v6, v7);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))(a1 + 56, v9);
    goto LABEL_7;
  }

  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
LABEL_8:
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  uint64_t v12 = *(void *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(void *)(a1 + 104) = v12;
  return a1;
}

    uint64_t v8 = v6[1];
    *uint64_t v5 = *v6;
    v5[1] = v8;
    goto LABEL_8;
  }

  if (!v7)
  {
    __swift_destroy_boxed_opaque_existential_0(a1 + 24);
    goto LABEL_7;
  }

  __swift_assign_boxed_opaque_existential_0((uint64_t *)(a1 + 24), (uint64_t *)a2 + 3);
LABEL_8:
  uint64_t v9 = *((void *)a2 + 7);
  *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
  *(void *)(a1 + 56) = v9;
  return a1;
}

    uint64_t v5 = *a2;
    uint64_t v6 = a2[1];
    *(void *)(a1 + 32) = *((void *)a2 + 4);
    *(_OWORD *)a1 = v5;
    *(_OWORD *)(a1 + 16) = v6;
    return a1;
  }

  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }

  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *((void *)a2 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *((void *)a2 + 3);
  *(void *)(a1 + 32) = *((void *)a2 + 4);
  return a1;
}

uint64_t Collection<>._ranges<A>(of:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v16 = Array.init<A>(_:)();
  uint64_t v17 = (void *)swift_allocObject();
  v17[2] = a2;
  v17[3] = a3;
  v17[4] = a4;
  v17[5] = a5;
  v17[6] = a6;
  v17[7] = AssociatedTypeWitness;
  v24[0] = ZSearcher.init(pattern:by:)( v16,  (uint64_t (*)(char *, char *))partial apply for implicit closure #3 in Collection<>.split<A>(separator:maxSplits:omittingEmptySubsequences:),  (uint64_t)v17);
  v24[1] = v18;
  v24[2] = v19;
  v24[3] = v20;
  uint64_t v21 = type metadata accessor for ZSearcher(0LL, a2, a4, v20);
  uint64_t v22 = MEMORY[0x186E17958](&protocol conformance descriptor for ZSearcher<A>, v21);
  Collection._ranges<A>(of:)((uint64_t)v24, v21, v22, a7);
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t Collection<>.ranges<A>(of:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  unint64_t v123 = a6;
  uint64_t v122 = a5;
  uint64_t v8 = a2;
  uint64_t v128 = a4;
  uint64_t v10 = type metadata accessor for ZSearcher(255LL, a2, a4, a4);
  uint64_t v11 = MEMORY[0x186E17958](&protocol conformance descriptor for ZSearcher<A>, v10);
  uint64_t v13 = type metadata accessor for RangesCollection(0LL, v10, v11, v12);
  MEMORY[0x1895F8858](v13);
  uint64_t v15 = (char *)&v119 - v14;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  unint64_t v124 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v17 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v19 = (char *)&v119 - v18;
  uint64_t v20 = (char *)&v119 + *(int *)(v17 + 48) - v18;
  unint64_t v21 = *(void *)(v8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))((char *)&v119 - v18, v6, v8);
  uint64_t v126 = *(void *)(a3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v126 + 16))(v20, a1, a3);
  int v22 = swift_dynamicCast();
  uint64_t v129 = v19;
  uint64_t v127 = v20;
  if (v22)
  {
    unint64_t v125 = v21;
    uint64_t v121 = a3;
    if (swift_dynamicCast())
    {
      unint64_t v23 = String.subscript.getter();
      unint64_t v25 = v24;
      uint64_t v27 = v26;
      unint64_t v29 = v28;
      swift_bridgeObjectRelease();
      unint64_t v30 = String.subscript.getter();
      unint64_t v32 = v31;
      uint64_t v34 = v33;
      unint64_t v36 = v35;
      uint64_t result = swift_bridgeObjectRelease();
      if (v25 >> 14 >= v23 >> 14)
      {
        unint64_t v124 = v25;
        uint64_t v38 = v34;
        uint64_t v39 = v27;
        uint64_t v40 = Substring.subscript.getter();
        unint64_t v123 = v29;
        uint64_t v42 = v41;
        uint64_t v44 = v43;
        uint64_t v122 = v23;
        uint64_t v45 = v8;
        uint64_t v47 = v46;
        swift_bridgeObjectRetain();
        uint64_t v48 = v47;
        uint64_t v8 = v45;
        uint64_t v49 = specialized SubstringSearcher.State.init(text:pattern:)(v40, v42, v44, v48, v30, v32);
        uint64_t v138 = v122;
        unint64_t v139 = v124;
        uint64_t v140 = v39;
        unint64_t v141 = v123;
        unint64_t v142 = v30;
        unint64_t v143 = v32;
        uint64_t v144 = v38;
        unint64_t v145 = v36;
        uint64_t v146 = v49;
        uint64_t v147 = v50;
        uint64_t v148 = v51;
        char v149 = v52 & 1;
        specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)&v138);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_getCanonicalSpecializedMetadata();
        swift_getAssociatedTypeWitness();
        swift_getAssociatedConformanceWitness();
        type metadata accessor for Range();
        uint64_t v53 = _arrayForceCast<A, B>(_:)();
LABEL_8:
        swift_release();
        (*(void (**)(char *, uint64_t))(v126 + 8))(v127, v121);
LABEL_18:
        unint64_t v118 = v125;
LABEL_21:
        (*(void (**)(char *, uint64_t))(v118 + 8))(v129, v8);
        return v53;
      }

      __break(1u);
      goto LABEL_23;
    }

    if (swift_dynamicCast())
    {
      unint64_t v54 = v134;
      unint64_t v55 = v135;
      uint64_t v57 = v136;
      unint64_t v56 = v137;
      unint64_t v124 = String.subscript.getter();
      unint64_t v123 = v58;
      uint64_t v122 = v59;
      unint64_t v61 = v60;
      uint64_t result = swift_bridgeObjectRelease();
      if (v55 >> 14 >= v54 >> 14)
      {
        uint64_t v62 = Substring.subscript.getter();
        uint64_t v64 = v63;
        uint64_t v66 = v65;
        uint64_t v68 = v67;
        swift_bridgeObjectRetain();
        uint64_t v69 = v62;
        uint64_t v70 = v64;
        uint64_t v71 = v68;
        unint64_t v72 = v124;
        unint64_t v73 = v123;
        uint64_t v74 = v122;
        uint64_t v75 = specialized SubstringSearcher.State.init(text:pattern:)(v69, v70, v66, v71, v124, v123);
        uint64_t v138 = v54;
        unint64_t v139 = v55;
        uint64_t v140 = v57;
        unint64_t v141 = v56;
        unint64_t v142 = v72;
        unint64_t v143 = v73;
        uint64_t v144 = v74;
        unint64_t v145 = v61;
        uint64_t v146 = v75;
        uint64_t v147 = v76;
        uint64_t v148 = v77;
        char v149 = v78 & 1;
        specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)&v138);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_getCanonicalSpecializedMetadata();
        swift_getAssociatedTypeWitness();
        swift_getAssociatedConformanceWitness();
        type metadata accessor for Range();
        uint64_t v53 = _arrayForceCast<A, B>(_:)();
        goto LABEL_8;
      }

      goto LABEL_24;
    }

    swift_bridgeObjectRelease();
    a3 = v121;
    unint64_t v21 = v125;
  }

  if (!swift_dynamicCast())
  {
LABEL_20:
    Collection<>._ranges<A>(of:)(a1, v8, a3, v128, v122, v123, (uint64_t)v15);
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    type metadata accessor for Range();
    MEMORY[0x186E17958](&protocol conformance descriptor for RangesCollection<A>, v13);
    uint64_t v53 = Array.init<A>(_:)();
    unint64_t v118 = v124;
    uint64_t v8 = TupleTypeMetadata2;
    goto LABEL_21;
  }

  unint64_t v119 = v134;
  unint64_t v120 = v135;
  unint64_t v79 = v137;
  uint64_t v121 = v136;
  if (swift_dynamicCast())
  {
    unint64_t v80 = v79;
    unint64_t v125 = v21;
    unint64_t v81 = String.subscript.getter();
    unint64_t v83 = v82;
    uint64_t v85 = v84;
    unint64_t v87 = v86;
    uint64_t result = swift_bridgeObjectRelease();
    if (v83 >> 14 < v81 >> 14)
    {
LABEL_23:
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }

    uint64_t v88 = Substring.subscript.getter();
    unint64_t v124 = v87;
    uint64_t v90 = v89;
    uint64_t v92 = v91;
    uint64_t v94 = v93;
    swift_bridgeObjectRetain();
    uint64_t v95 = v90;
    uint64_t v96 = v92;
    uint64_t v97 = v94;
    unint64_t v98 = v119;
    unint64_t v99 = v120;
    uint64_t v100 = v121;
    uint64_t v101 = specialized SubstringSearcher.State.init(text:pattern:)(v88, v95, v96, v97, v119, v120);
    uint64_t v138 = v81;
    unint64_t v139 = v83;
    uint64_t v140 = v85;
LABEL_17:
    unint64_t v141 = v124;
    unint64_t v142 = v98;
    unint64_t v143 = v99;
    uint64_t v144 = v100;
    unint64_t v145 = v80;
    uint64_t v146 = v101;
    uint64_t v147 = v102;
    uint64_t v148 = v103;
    char v149 = v104 & 1;
    specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)&v138);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_getCanonicalSpecializedMetadata();
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    type metadata accessor for Range();
    uint64_t v53 = _arrayForceCast<A, B>(_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v126 + 8))(v127, a3);
    goto LABEL_18;
  }

  uint64_t result = swift_dynamicCast();
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }

  unint64_t v125 = v21;
  uint64_t v105 = v130;
  unint64_t v106 = v131;
  if (v131 >> 14 >= v130 >> 14)
  {
    unint64_t v80 = v79;
    uint64_t v107 = v132;
    unint64_t v124 = v133;
    uint64_t v108 = Substring.subscript.getter();
    uint64_t v110 = v109;
    uint64_t v112 = v111;
    uint64_t v114 = v113;
    swift_bridgeObjectRetain();
    uint64_t v115 = v110;
    uint64_t v116 = v112;
    uint64_t v117 = v114;
    unint64_t v98 = v119;
    unint64_t v99 = v120;
    uint64_t v100 = v121;
    uint64_t v101 = specialized SubstringSearcher.State.init(text:pattern:)(v108, v115, v116, v117, v119, v120);
    uint64_t v138 = v105;
    unint64_t v139 = v106;
    uint64_t v140 = v107;
    goto LABEL_17;
  }

LABEL_25:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

    unint64_t v21 = __clz(__rbit64(v19));
    uint64_t v12 = (v19 - 1) & v19;
    uint64_t v15 = v21 + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
  }

  uint64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  uint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    uint64_t v9 = v20;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v24 - 1) & v24;
    uint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 8 * v15;
    unint64_t v21 = *(void *)(*(void *)(v2 + 56) + v20);
    int v22 = (void *)(*(void *)(v4 + 48) + v16);
    *int v22 = v19;
    v22[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v20) = v21;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }

  unint64_t v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    uint64_t v9 = v25;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v19 - 1) & v19;
    uint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }

  uint64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  uint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    uint64_t v9 = v20;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v24 - 1) & v24;
    uint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 8 * v15;
    unint64_t v21 = *(void *)(*(void *)(v2 + 56) + v20);
    int v22 = (void *)(*(void *)(v4 + 48) + v16);
    *int v22 = v19;
    v22[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v20) = v21;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }

  unint64_t v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    uint64_t v9 = v25;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }

__n128 RegexRangesCollection.init(input:subjectBounds:searchBounds:regex:)@<Q0>( unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v17 = *a7;
  RegexMatchesCollection.init(input:subjectBounds:searchBounds:regex:)(a1, a2, a3, a4, a5, a6, &v17, a8, v18);
  uint64_t v10 = v18[0].i64[1];
  uint64_t v11 = v19;
  uint64_t v12 = v22;
  __n128 result = (__n128)v18[1];
  int8x16_t v14 = v18[2];
  __int128 v15 = v20;
  __int128 v16 = v21;
  *(void *)a9 = v18[0].i64[0];
  *(void *)(a9 + 8) = v10;
  *(__n128 *)(a9 + 16) = result;
  *(int8x16_t *)(a9 + 32) = v14;
  *(void *)(a9 + 48) = v11;
  *(_OWORD *)(a9 + 56) = v15;
  *(_OWORD *)(a9 + 72) = v16;
  *(void *)(a9 + 88) = v12;
  return result;
}

uint64_t RegexMatchesCollection.init(input:subjectBounds:searchBounds:regex:)@<X0>( unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X6>, uint64_t a8@<X7>, int8x16_t *a9@<X8>)
{
  uint64_t v17 = *a7;
  type metadata accessor for Regex(0LL, a8, a3, a4);
  swift_bridgeObjectRetain();
  uint64_t v39 = v17;
  swift_retain();
  unint64_t v34 = a1;
  uint64_t v35 = a3;
  uint64_t v36 = a4;
  unint64_t v37 = a5;
  uint64_t v38 = a6;
  Regex._firstMatch(_:subjectBounds:searchBounds:)(a1, a2, a3, a4, a5, a6, (uint64_t)v43);
  swift_release();
  swift_bridgeObjectRelease();
  __int128 v40 = *(_OWORD *)v43;
  __int128 v41 = *(_OWORD *)&v43[16];
  uint64_t v42 = *(void *)&v43[32];
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a8;
  v33[2] = a8;
  v33[3] = partial apply for implicit closure #2 in implicit closure #1 in RegexMatchesCollection.init(input:subjectBounds:searchBounds:regex:);
  v33[4] = MEMORY[0x1895F8858](v18);
  type metadata accessor for Regex.Match(255LL, a8, v19, v20);
  type metadata accessor for Optional();
  uint64_t v23 = type metadata accessor for RegexMatchesCollection.Index(0LL, a8, v21, v22);
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF( (void (*)(char *, char *))partial apply for thunk for @callee_guaranteed (@in_guaranteed Regex<A>.Match) -> (@out RegexMatchesCollection<A>.Index),  (uint64_t)v33,  MEMORY[0x18961A520],  v23,  v24,  (uint64_t)v43);
  outlined consume of Regex<A1.RegexOutput>.Match?<A><A1>(v40, *((uint64_t *)&v40 + 1));
  uint64_t result = swift_release();
  uint64_t v26 = *(void *)v43;
  v27.i64[0] = 1LL;
  int8x16_t v28 = (int8x16_t)vdupq_lane_s64(vmvnq_s8((int8x16_t)vceqq_s64(*(int64x2_t *)&v43[8], v27)).i64[0], 0);
  int8x16_t v29 = vandq_s8(*(int8x16_t *)&v43[8], v28);
  int8x16_t v30 = vandq_s8(*(int8x16_t *)&v43[24], v28);
  if (*(void *)&v43[8] == 1LL) {
    uint64_t v26 = 0LL;
  }
  a9->i64[0] = v34;
  a9->i64[1] = a2;
  uint64_t v31 = v36;
  a9[1].i64[0] = v35;
  a9[1].i64[1] = v31;
  uint64_t v32 = v38;
  a9[2].i64[0] = v37;
  a9[2].i64[1] = v32;
  a9[3].i64[0] = v39;
  a9[3].i64[1] = v26;
  a9[4] = v29;
  a9[5] = v30;
  return result;
}

uint64_t RegexRangesCollection.Iterator.next()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = type metadata accessor for RegexMatchesCollection.Iterator(0LL, v4, a3, a4);
  RegexMatchesCollection.Iterator.next()(v5, v6, v7, (unint64_t *)&v15);
  __int128 v14 = v15;
  uint64_t KeyPath = swift_getKeyPath();
  type metadata accessor for Regex.Match(255LL, v4, v9, v10);
  type metadata accessor for Optional();
  uint64_t CanonicalSpecializedMetadata = swift_getCanonicalSpecializedMetadata();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF( (void (*)(char *, char *))partial apply for implicit closure #1 in RegexRangesCollection.Iterator.next(),  KeyPath,  MEMORY[0x18961A520],  CanonicalSpecializedMetadata,  v12,  (uint64_t)&v16);
  swift_release();
  outlined consume of Regex<A1.RegexOutput>.Match?<A><A1>(v14, *((uint64_t *)&v14 + 1));
  return v16;
}

uint64_t RegexMatchesCollection.Iterator.next()@<X0>( uint64_t result@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, unint64_t *a4@<X8>)
{
  uint64_t v5 = v4;
  if (*(_BYTE *)(v4 + 96) == 1)
  {
    *(_BYTE *)(v4 + 96) = 0;
    uint64_t v7 = *(void *)(v4 + 56);
    uint64_t v8 = *(void *)(v4 + 64);
    if (v8) {
      unint64_t v9 = *(void *)(v4 + 56);
    }
    else {
      unint64_t v9 = 0LL;
    }
    if (v8) {
      unint64_t v10 = *(void *)(v4 + 72);
    }
    else {
      unint64_t v10 = 0LL;
    }
    if (v8) {
      unint64_t v11 = *(void *)(v4 + 80);
    }
    else {
      unint64_t v11 = 0LL;
    }
    if (v8) {
      unint64_t v12 = *(void *)(v4 + 88);
    }
    else {
      unint64_t v12 = 0LL;
    }
    *a4 = v9;
    a4[1] = v8;
    a4[2] = v10;
    a4[3] = v11;
    a4[4] = v12;
    return outlined copy of RegexMatchesCollection<A>.Index<A>(v7, v8);
  }

  else if ((*(_BYTE *)(v4 + 112) & 1) != 0 {
         || (unint64_t v13 = *(void *)(v4 + 104), v14 = *(void *)(v4 + 40), v14 >> 14 < v13 >> 14))
  }
  {
    a4[4] = 0LL;
    *(_OWORD *)a4 = 0u;
    *((_OWORD *)a4 + 1) = 0u;
  }

  else
  {
    unint64_t v52 = *(void *)(v4 + 48);
    unint64_t v15 = *(void *)v4;
    uint64_t v16 = *(void *)(v4 + 8);
    uint64_t v18 = *(void *)(v4 + 16);
    uint64_t v17 = *(void *)(v4 + 24);
    uint64_t v47 = *(void *)(result + 16);
    type metadata accessor for Regex(0LL, v47, a2, a3);
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v49 = v17;
    uint64_t v50 = v18;
    Regex._firstMatch(_:subjectBounds:searchBounds:)(v15, v16, v18, v17, v13, v14, (uint64_t)&v57);
    unint64_t v51 = v14;
    unint64_t v19 = v15;
    uint64_t v20 = v47;
    v37[6] = 0LL;
    uint64_t v21 = v16;
    swift_bridgeObjectRelease();
    unint64_t v22 = v52;
    swift_release();
    unint64_t v44 = v57;
    uint64_t v45 = v58;
    uint64_t v46 = v59;
    uint64_t v47 = v60;
    unint64_t v48 = v61;
    unint64_t v52 = v57;
    uint64_t v53 = v58;
    uint64_t v54 = v59;
    uint64_t v55 = v60;
    unint64_t v56 = v61;
    unint64_t v43 = *(void *)(v4 + 32);
    uint64_t v42 = *(void *)(v4 + 56);
    uint64_t v41 = *(void *)(v4 + 64);
    uint64_t v40 = *(void *)(v4 + 72);
    uint64_t v39 = *(void *)(v4 + 80);
    uint64_t v38 = *(void *)(v4 + 88);
    unint64_t v23 = v19;
    unint64_t v57 = v19;
    uint64_t v58 = v16;
    uint64_t v24 = v49;
    uint64_t v25 = v50;
    uint64_t v59 = v50;
    uint64_t v60 = v49;
    unint64_t v26 = v14;
    unint64_t v61 = v43;
    unint64_t v62 = v14;
    unint64_t v27 = v22;
    unint64_t v63 = v22;
    uint64_t v64 = v42;
    uint64_t v65 = v41;
    uint64_t v66 = v40;
    uint64_t v67 = v39;
    uint64_t v68 = v38;
    int8x16_t v28 = (void *)swift_allocObject();
    v28[2] = v20;
    v28[3] = v23;
    v28[4] = v21;
    v28[5] = v25;
    unint64_t v29 = v43;
    v28[6] = v24;
    v28[7] = v29;
    v28[8] = v26;
    v28[9] = v27;
    v28[10] = v42;
    v28[11] = v41;
    v28[12] = v40;
    v28[13] = v39;
    v28[14] = v38;
    uint64_t v30 = outlined retain of RegexMatchesCollection<A>((uint64_t)&v57);
    MEMORY[0x1895F8858](v30);
    v37[2] = v20;
    v37[3] = partial apply for implicit closure #2 in implicit closure #1 in RegexMatchesCollection.Iterator.next();
    v37[4] = v28;
    type metadata accessor for Regex.Match(255LL, v20, v31, v32);
    type metadata accessor for Optional();
    _sSq7flatMapyqd_0_SgABxqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF( (void (*)(char *, char *))partial apply for thunk for @callee_guaranteed (@in_guaranteed Regex<A>.Match) -> (@unowned String.Index?),  (uint64_t)v37,  MEMORY[0x18961A520],  MEMORY[0x189617E00],  v33,  (uint64_t)&v57);
    uint64_t result = swift_release();
    char v34 = v58;
    *(void *)(v5 + 104) = v57;
    *(_BYTE *)(v5 + 112) = v34;
    uint64_t v35 = v45;
    *a4 = v44;
    a4[1] = v35;
    uint64_t v36 = v47;
    a4[2] = v46;
    a4[3] = v36;
    a4[4] = v48;
  }

  return result;
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF@<X0>( void (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v25 = a5;
  uint64_t v26 = a2;
  uint64_t v28 = a4;
  unint64_t v27 = a1;
  uint64_t v24 = a3;
  uint64_t v9 = *(void *)(a3 - 8);
  uint64_t v10 = ((uint64_t (*)(void))MEMORY[0x1895F8858])();
  unint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = *(void *)(v13 + 16);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x1895F8858](v10);
  uint64_t v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v16);
  uint64_t v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t))(v21 + 16))(v20, v6);
  uint64_t v22 = 1LL;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v20, 1LL, v14) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v20, v14);
    v27(v18, v12);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    if (v7) {
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(v25, v12, v24);
    }
    uint64_t v22 = 0LL;
  }

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56LL))(a6, v22, 1LL);
}

uint64_t protocol witness for IteratorProtocol.next() in conformance RegexRangesCollection<A>.Iterator@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t result = RegexRangesCollection.Iterator.next()(a1, a2, a3, a4);
  *(void *)a5 = result;
  *(void *)(a5 + 8) = v7;
  *(_BYTE *)(a5 + 16) = v8 & 1;
  return result;
}

double RegexRangesCollection.makeIterator()@<D0>( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5 = type metadata accessor for RegexMatchesCollection(0LL, *(void *)(a1 + 16), a2, a3);
  RegexMatchesCollection.makeIterator()(v5, (uint64_t)v14);
  uint64_t v6 = v14[1];
  uint64_t v7 = v17;
  uint64_t v8 = v20;
  char v9 = v21;
  uint64_t v10 = v22;
  char v11 = v23;
  *(void *)a4 = v14[0];
  *(void *)(a4 + 8) = v6;
  __int128 v12 = v16;
  *(_OWORD *)(a4 + 16) = v15;
  *(_OWORD *)(a4 + 32) = v12;
  *(void *)(a4 + 48) = v7;
  *(_OWORD *)(a4 + 56) = v18;
  double result = *(double *)&v19;
  *(_OWORD *)(a4 + 72) = v19;
  *(void *)(a4 + 88) = v8;
  *(_BYTE *)(a4 + 96) = v9;
  *(void *)(a4 + 104) = v10;
  *(_BYTE *)(a4 + 112) = v11;
  return result;
}

uint64_t RegexMatchesCollection.makeIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 8);
  uint64_t v6 = *(void *)(v2 + 48);
  uint64_t v7 = *(void *)(v2 + 56);
  uint64_t v8 = *(void *)(v2 + 64);
  uint64_t v9 = *(void *)(v2 + 72);
  uint64_t v10 = *(void *)(v2 + 80);
  uint64_t v11 = *(void *)(v2 + 88);
  v14[0] = *(void *)v2;
  v14[1] = v5;
  __int128 v12 = *(_OWORD *)(v2 + 32);
  __int128 v15 = *(_OWORD *)(v2 + 16);
  __int128 v16 = v12;
  uint64_t v17 = v6;
  uint64_t v18 = v7;
  uint64_t v19 = v8;
  uint64_t v20 = v9;
  uint64_t v21 = v10;
  uint64_t v22 = v11;
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of RegexMatchesCollection<A>.Index<A>(v7, v8);
  return RegexMatchesCollection.Iterator.init(_:)(v14, *(void *)(a1 + 16), a2);
}

uint64_t protocol witness for Sequence.makeIterator() in conformance RegexRangesCollection<A>@<X0>( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5 = *(void *)(v4 + 56);
  uint64_t v6 = *(void *)(v4 + 64);
  swift_release();
  swift_bridgeObjectRelease();
  return outlined consume of Regex<A1.RegexOutput>.Match?<A><A1>(v5, v6);
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance RegexRangesCollection<A>( uint64_t a1)
{
  return Collection.underestimatedCount.getter();
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance RegexRangesCollection<A>( uint64_t a1)
{
  return Collection._copyToContiguousArray()();
}

uint64_t RegexRangesCollection.startIndex.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1[7];
  uint64_t v3 = v1[8];
  uint64_t v4 = v1[9];
  uint64_t v5 = v1[10];
  uint64_t v6 = v1[11];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  return outlined copy of RegexMatchesCollection<A>.Index<A>(v2, v3);
}

double RegexRangesCollection.endIndex.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0LL;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t RegexRangesCollection.index(after:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = v5[1];
  uint64_t v9 = v5[6];
  uint64_t v10 = v5[11];
  uint64_t v17 = *v5;
  uint64_t v18 = v8;
  __int128 v11 = *((_OWORD *)v5 + 2);
  __int128 v19 = *((_OWORD *)v5 + 1);
  __int128 v20 = v11;
  uint64_t v21 = v9;
  __int128 v22 = *(_OWORD *)(v5 + 7);
  __int128 v23 = *(_OWORD *)(v5 + 9);
  uint64_t v24 = v10;
  __int128 v12 = *(_OWORD *)(a1 + 16);
  v15[0] = *(_OWORD *)a1;
  v15[1] = v12;
  uint64_t v16 = v7;
  uint64_t v13 = type metadata accessor for RegexMatchesCollection(0LL, *(void *)(a2 + 16), a3, a4);
  return RegexMatchesCollection.index(after:)((uint64_t *)v15, v13, a5);
}

uint64_t RegexMatchesCollection.index(after:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v7 = a1[2];
  uint64_t v6 = a1[3];
  uint64_t v8 = a1[4];
  if (v4)
  {
    unint64_t v9 = *(void *)v3;
    uint64_t v10 = *(void *)(v3 + 16);
    uint64_t v11 = *(void *)(v3 + 24);
    uint64_t v21 = *(void *)(a2 + 16);
    uint64_t v26 = *(void *)(v3 + 8);
    uint64_t v27 = *(void *)(v3 + 88);
    __int128 v24 = *(_OWORD *)(v3 + 56);
    __int128 v25 = *(_OWORD *)(v3 + 72);
    uint64_t v12 = *(void *)(v3 + 48);
    unint64_t v23 = *(void *)(v3 + 40);
    uint64_t v13 = *(void *)(v3 + 32);
    outlined copy of RegexMatchesCollection<A>.Index<A>(v5, v4);
    unint64_t v30 = v9;
    *(void *)&__int128 v31 = v26;
    *((void *)&v31 + 1) = v10;
    uint64_t v22 = v11;
    *(void *)&__int128 v32 = v11;
    *((void *)&v32 + 1) = v13;
    unint64_t v33 = v23;
    uint64_t v34 = v12;
    __int128 v35 = v24;
    __int128 v36 = v25;
    uint64_t v37 = v27;
    v29[0] = v5;
    v29[1] = v4;
    v29[2] = v7;
    v29[3] = v6;
    v29[4] = v8;
    unint64_t v14 = RegexMatchesCollection.searchIndex(after:)((uint64_t)v29);
    LOBYTE(v13) = v15;
    uint64_t result = outlined consume of Regex<A1.RegexOutput>.Match?<A><A1>(v5, v4);
    if ((v13 & 1) != 0
      || v23 >> 14 < v14 >> 14
      || (v29[0] = v12,
          type metadata accessor for Regex(0LL, v21, v17, v18),
          swift_retain(),
          Regex._firstMatch(_:subjectBounds:searchBounds:)(v9, v26, v10, v22, v14, v23, (uint64_t)&v30),
          uint64_t result = swift_release(),
          __int128 v19 = v31,
          !(void)v31))
    {
      *(void *)(a3 + 32) = 0LL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
    }

    else
    {
      __int128 v20 = v32;
      *(void *)a3 = v30;
      *(_OWORD *)(a3 + 8) = v19;
      *(_OWORD *)(a3 + 24) = v20;
    }
  }

  else
  {
    outlined copy of RegexMatchesCollection<A>.Index<A>(*a1, 0LL);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }

  return result;
}

uint64_t RegexMatchesCollection.subscript.getter@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v6 = a1[4];
  if (v3)
  {
    uint64_t result = outlined copy of RegexMatchesCollection<A>.Index<A>(*a1, v3);
    *a2 = v2;
    a2[1] = v3;
    a2[2] = v5;
    a2[3] = v4;
    a2[4] = v6;
  }

  else
  {
    outlined copy of RegexMatchesCollection<A>.Index<A>(*a1, 0LL);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }

  return result;
}

double protocol witness for Collection.endIndex.getter in conformance RegexRangesCollection<A>@<D0>( uint64_t a1@<X8>)
{
  return RegexRangesCollection.endIndex.getter(a1);
}

void (*protocol witness for Collection.subscript.read in conformance RegexRangesCollection<A>( void *a1, uint64_t a2))(void *a1)
{
  uint64_t v4 = malloc(0x38uLL);
  *a1 = v4;
  uint64_t v5 = RegexRangesCollection.subscript.read((uint64_t)v4, a2);
  v4[4] = v6;
  v4 += 4;
  v4[1] = v7;
  v4[2] = v5;
  return protocol witness for Collection.subscript.read in conformance RegexRangesCollection<A>;
}

void protocol witness for Collection.subscript.read in conformance RegexRangesCollection<A>(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 48LL))(*a1);
  free(v1);
}

uint64_t (*RegexRangesCollection.subscript.read(uint64_t a1, uint64_t a2))()
{
  uint64_t v2 = *(void *)(a2 + 32);
  __int128 v3 = *(_OWORD *)(a2 + 16);
  v5[0] = *(_OWORD *)a2;
  v5[1] = v3;
  uint64_t v6 = v2;
  specialized RegexRangesCollection.subscript.getter((uint64_t)v5);
  return RegexRangesCollection.subscript.read;
}

double protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance RegexRangesCollection<A>@<D0>( uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)a1 = xmmword_182D9CC10;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  return result;
}

double protocol witness for Collection.formIndex(after:) in conformance RegexRangesCollection<A>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Collection.formIndex(after:) in conformance RegexRangesCollection<A>( a1,  a2,  a3,  (void (*)(_OWORD *__return_ptr))RegexRangesCollection.index(after:));
}

double Collection<>._ranges<A>(of:subjectBounds:searchBounds:)@<D0>( uint64_t a1@<X1>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>, uint64_t a7)
{
  unint64_t v13 = v17[3];
  uint64_t v12 = v17[4];
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a7 + 16))(v17, a5, a7);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  *(void *)&double result = RegexRangesCollection.init(input:subjectBounds:searchBounds:regex:)( v13,  v12,  a1,  a2,  a3,  a4,  v17,  AssociatedTypeWitness,  a6).n128_u64[0];
  return result;
}

void Collection<>._ranges<A>(of:)(uint64_t a1@<X2>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
  if (v6 >> 14 < v7 >> 14)
  {
    __break(1u);
    __break(1u);
  }

  else
  {
    dispatch thunk of Collection.startIndex.getter();
    dispatch thunk of Collection.endIndex.getter();
    Collection<>._ranges<A>(of:subjectBounds:searchBounds:)(v7, v6, v7, v6, a1, a3, a2);
  }
}

uint64_t BidirectionalCollection<>.ranges<A>(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = type metadata accessor for RegexRangesCollection(0LL, AssociatedTypeWitness, v6, v7);
  MEMORY[0x186E17958](&protocol conformance descriptor for RegexRangesCollection<A>, v8);
  return Array.init<A>(_:)();
}

unint64_t Substring._replacingSubstring(_:with:maxReplacements:)( unint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13)
{
  unint64_t v33 = result;
  uint64_t v13 = a9;
  if (a9 < 0)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v40 = 0LL;
  unint64_t v41 = 0xE000000000000000LL;
  if (a11 >> 14 < a10 >> 14)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  uint64_t v15 = Substring.subscript.getter();
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  swift_bridgeObjectRetain();
  uint64_t v32 = specialized SubstringSearcher.State.init(text:pattern:)(v15, v17, v19, v21, v33, a2);
  uint64_t v30 = v24;
  if (a9)
  {
    unint64_t v25 = v22;
    char v26 = v23 & 1;
    uint64_t v31 = a4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v27 = a10;
    while (1)
    {
      if ((v26 & 1) != 0) {
        goto LABEL_10;
      }
      unint64_t v42 = a10;
      unint64_t v43 = a11;
      uint64_t v44 = a12;
      uint64_t v45 = a13;
      unint64_t v46 = v33;
      unint64_t v47 = a2;
      uint64_t v48 = a3;
      uint64_t v49 = v31;
      uint64_t v50 = v32;
      uint64_t v51 = v30;
      unint64_t v52 = v25;
      char v53 = 0;
      double result = SubstringSearcher.nextRange(in:searchFromEnd:)(a10, a11, v25, (uint64_t)v36);
      if ((v37 & 1) != 0)
      {
LABEL_10:
        unint64_t v28 = v27;
LABEL_11:
        unint64_t v29 = v28 >> 14;
        goto LABEL_13;
      }

      if (v36[0] >> 14 < v27 >> 14) {
        break;
      }
      unint64_t v28 = v36[1];
      unint64_t v25 = v38;
      char v26 = v39;
      Substring.subscript.getter();
      String.append(contentsOf:)();
      swift_bridgeObjectRelease();
      String.append(contentsOf:)();
      unint64_t v27 = v28;
      if (!--v13) {
        goto LABEL_11;
      }
    }

    __break(1u);
    goto LABEL_16;
  }

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v29 = a10 >> 14;
LABEL_13:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  double result = swift_bridgeObjectRelease();
  if (a11 >> 14 >= v29)
  {
    Substring.subscript.getter();
    String.append(contentsOf:)();
    swift_bridgeObjectRelease();
    return v40;
  }

LABEL_18:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

    double result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }

  uint64_t v10 = specialized closure #1 in propertyScalarPredicate(_:);
LABEL_14:
  uint64_t v11 = (uint64_t (*)(void *, void))consumeCharacterWithLeadingScalar(_:);
  if ((v8 & 0x10000) == 0) {
    uint64_t v11 = (uint64_t (*)(void *, void))consumeScalar(_:);
  }
  return v11(v10, 0LL);
}

unint64_t specialized Collection.subscript.getter( unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000LL) == 0) {
    uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (4 * v3 >= result >> 14) {
    return String.subscript.getter();
  }
  __break(1u);
  return result;
}

uint64_t specialized RangeReplaceableCollection._replacing<A, B>(_:with:maxReplacements:)( uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  if ((a4 & 0x8000000000000000LL) != 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }

  outlined retain of RangesCollection<ZSearcher<Substring>>(result);
  double result = specialized Collection.prefix(_:)(a4, (uint64_t)v38);
  int v7 = v44;
  if ((v39 & 1) == 0)
  {
    uint64_t v27 = v48;
    uint64_t v28 = v47;
    uint64_t v24 = v50;
    uint64_t v25 = v49;
    char v23 = v51;
    char v10 = v41;
    unint64_t v11 = v38[0];
    uint64_t v12 = v38[1];
    unint64_t v33 = v38[0] >> 14;
    unint64_t v34 = v43;
    unint64_t v13 = v40;
    unint64_t v29 = v46;
    uint64_t v30 = v45;
    unint64_t v35 = v46 >> 14;
    unint64_t v31 = v45 >> 14;
    unint64_t v32 = v43 >> 14;
    unint64_t v22 = v42;
    unint64_t v26 = v42 >> 14;
    unint64_t v9 = 15LL;
    while (1)
    {
      if (((v11 ^ v34) & 0xFFFFFFFFFFFFC000LL) != 0) {
        int v14 = 1;
      }
      else {
        int v14 = v7;
      }
      if (v14 != 1) {
        goto LABEL_5;
      }
      unint64_t v15 = v11 >> 14;
      if (v11 >> 14 < v33)
      {
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
        goto LABEL_37;
      }

      if (v15 < v32) {
        int v16 = 1;
      }
      else {
        int v16 = v7;
      }
      if (v16 != 1) {
        goto LABEL_35;
      }
      if (v35 < v31) {
        goto LABEL_33;
      }
      uint64_t v8 = v12;
      if ((v10 & 1) != 0)
      {
        unint64_t v17 = 0LL;
        uint64_t v12 = 0LL;
        char v18 = 1;
        char v10 = 1;
        goto LABEL_28;
      }

      if (v26 < v13 >> 14) {
        goto LABEL_36;
      }
      outlined retain of Slice<RangesCollection<ZSearcher<Substring>>>((uint64_t)v38);
      unint64_t v19 = specialized ZSearcher.search(_:in:)(v30, v29, v28, v27, v13, v22, v25, v24, v23);
      char v18 = v21;
      if ((v21 & 1) != 0)
      {
        unint64_t v17 = 0LL;
        uint64_t v12 = 0LL;
      }

      else
      {
        unint64_t v17 = v19;
        uint64_t v12 = v20;
        if (v19 >> 14 != v20 >> 14)
        {
          char v10 = 0;
          unint64_t v13 = v20;
          goto LABEL_27;
        }

        if (v19 >> 14 == v35)
        {
          unint64_t v13 = 0LL;
          char v10 = 1;
          goto LABEL_27;
        }

        unint64_t v13 = Substring.index(after:)();
      }

      char v10 = 0;
LABEL_27:
      double result = outlined release of Slice<RangesCollection<ZSearcher<Substring>>>((uint64_t)v38);
LABEL_28:
      if (v15 < v9 >> 14) {
        goto LABEL_34;
      }
      String.subscript.getter();
      lazy protocol witness table accessor for type Substring and conformance Substring();
      String.append<A>(contentsOf:)();
      swift_bridgeObjectRelease();
      double result = String.append<A>(contentsOf:)();
      unint64_t v11 = v17;
      unint64_t v9 = v8;
      if ((v18 & 1) != 0) {
        goto LABEL_4;
      }
    }
  }

  uint64_t v8 = 15LL;
LABEL_4:
  unint64_t v9 = v8;
  if ((v7 & 1) != 0)
  {
LABEL_5:
    outlined release of Slice<RangesCollection<ZSearcher<Substring>>>((uint64_t)v38);
    specialized Collection.subscript.getter(v9, a5, a6);
    lazy protocol witness table accessor for type Substring and conformance Substring();
    String.append<A>(contentsOf:)();
    swift_bridgeObjectRelease();
    return 0LL;
  }

LABEL_38:
  __break(1u);
  return result;
}

  unint64_t v43 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v15 + 16);
  v43(v20, v21, v14);
  v43((_BYTE *)((unint64_t)&v20[v25] & v44), (_BYTE *)((unint64_t)&v21[v25] & v44), v14);
  unint64_t v38 = v46;
  char v39 = v47;
  unint64_t v40 = v45;
  if (!(_DWORD)v22) {
    v20[v26] = 0;
  }
LABEL_33:
  if ((_DWORD)v22) {
    char v41 = v26;
  }
  else {
    char v41 = v26 + 1;
  }
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v40 + 24))( (unint64_t)&v20[v18 + v41] & ~v18,  (unint64_t)&v21[v18 + v41] & ~v18,  v38);
  return v39;
}

  unint64_t v43 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v15 + 32);
  v43(v20, v21, v14);
  v43((_BYTE *)((unint64_t)&v20[v25] & v44), (_BYTE *)((unint64_t)&v21[v25] & v44), v14);
  unint64_t v38 = v46;
  char v39 = v47;
  unint64_t v40 = v45;
  if (!(_DWORD)v22) {
    v20[v26] = 0;
  }
LABEL_33:
  if ((_DWORD)v22) {
    char v41 = v26;
  }
  else {
    char v41 = v26 + 1;
  }
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v40 + 40))( (unint64_t)&v20[v18 + v41] & ~v18,  (unint64_t)&v21[v18 + v41] & ~v18,  v38);
  return v39;
}

uint64_t RangeReplaceableCollection._replacing<A, B>(_:with:maxReplacements:)@<X0>( uint64_t (*a1)(char *, uint64_t, uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void (*a8)(char *, char *, uint64_t)@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v90 = a2;
  unint64_t v81 = a1;
  uint64_t v102 = a9;
  uint64_t v101 = a7;
  uint64_t v15 = *(void *)(a7 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v75 = type metadata accessor for PartialRangeFrom();
  uint64_t v74 = *(void *)(v75 - 8);
  uint64_t v18 = MEMORY[0x1895F8858](v75);
  unint64_t v73 = (char *)&v72 - v19;
  uint64_t v91 = a6;
  uint64_t v89 = *(void *)(a6 - 8);
  MEMORY[0x1895F8858](v18);
  uint64_t v88 = (char *)&v72 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v103 = v15;
  uint64_t v100 = a4;
  uint64_t v94 = swift_getAssociatedTypeWitness();
  MEMORY[0x1895F8858](v94);
  uint64_t v93 = (char *)&v72 - v21;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v22 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  unint64_t v86 = (char *)&v72 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v22);
  uint64_t v85 = (char *)&v72 - v24;
  uint64_t v99 = AssociatedConformanceWitness;
  uint64_t v25 = type metadata accessor for Range();
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = MEMORY[0x1895F8858](v25);
  uint64_t v84 = (char *)&v72 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = MEMORY[0x1895F8858](v27);
  unint64_t v83 = (char *)&v72 - v30;
  MEMORY[0x1895F8858](v29);
  unint64_t v98 = (char *)&v72 - v31;
  uint64_t v33 = v32;
  uint64_t v34 = type metadata accessor for Optional();
  MEMORY[0x1895F8858](v34);
  uint64_t v97 = (char *)&v72 - v35;
  swift_getAssociatedTypeWitness();
  char v104 = a8;
  uint64_t v78 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t v96 = swift_getAssociatedTypeWitness();
  uint64_t v36 = *(void *)(v96 - 8);
  uint64_t v37 = MEMORY[0x1895F8858](v96);
  char v39 = (char *)&v72 - v38;
  uint64_t v82 = a5;
  uint64_t v40 = *(void *)(a5 - 8);
  MEMORY[0x1895F8858](v37);
  unint64_t v42 = (char *)&v72 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v43 = swift_checkMetadataState();
  uint64_t v44 = MEMORY[0x1895F8858](v43);
  uint64_t v45 = AssociatedTypeWitness;
  uint64_t v92 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = MEMORY[0x1895F8858](v44);
  uint64_t v48 = (char *)&v72 - v47;
  uint64_t v76 = a3;
  if (a3 < 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  uint64_t v72 = v36;
  uint64_t v95 = v39;
  dispatch thunk of RangeReplaceableCollection.init()();
  dispatch thunk of Collection.startIndex.getter();
  (*(void (**)(char *, uint64_t (*)(char *, uint64_t, uint64_t), uint64_t))(v40 + 16))(v42, v81, v82);
  Collection.prefix(_:)();
  uint64_t v49 = v95;
  dispatch thunk of Sequence.makeIterator()();
  uint64_t v50 = v96;
  uint64_t v51 = swift_getAssociatedConformanceWitness();
  unint64_t v52 = v97;
  uint64_t v82 = v51;
  dispatch thunk of IteratorProtocol.next()();
  unint64_t v81 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 48);
  int v53 = v81(v52, 1LL, v33);
  uint64_t v54 = v98;
  if (v53 != 1)
  {
    uint64_t v78 = a10;
    char v104 = *(void (**)(char *, char *, uint64_t))(v26 + 32);
    uint64_t v80 = v26;
    uint64_t v79 = v33;
    uint64_t v105 = v48;
    uint64_t v77 = v45;
    uint64_t v55 = v84;
    while (1)
    {
      v104(v54, v52, v33);
      uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
      if ((result & 1) == 0) {
        break;
      }
      uint64_t v56 = TupleTypeMetadata2;
      unint64_t v57 = v85;
      uint64_t v58 = &v85[*(int *)(TupleTypeMetadata2 + 48)];
      uint64_t v59 = v92;
      uint64_t v60 = *(void (**)(char *, char *, uint64_t))(v92 + 32);
      v60(v85, v105, v45);
      v60(v58, v54, v45);
      unint64_t v61 = v86;
      unint64_t v62 = &v86[*(int *)(v56 + 48)];
      unint64_t v63 = *(void (**)(char *, char *, uint64_t))(v59 + 16);
      v63(v86, v57, v45);
      v63(v62, v58, v45);
      v60(v55, v61, v45);
      uint64_t v64 = *(void (**)(char *, uint64_t))(v59 + 8);
      v64(v62, v45);
      uint64_t v65 = v79;
      uint64_t v66 = &v61[*(int *)(v56 + 48)];
      uint64_t v67 = v80;
      v60(v61, v57, v45);
      v60(v66, v58, v45);
      v60(&v55[*(int *)(v65 + 36)], v66, v45);
      v64(v61, v45);
      uint64_t v68 = v83;
      v104(v83, v55, v65);
      dispatch thunk of Collection.subscript.getter();
      (*(void (**)(char *, uint64_t))(v67 + 8))(v68, v65);
      swift_getAssociatedConformanceWitness();
      dispatch thunk of RangeReplaceableCollection.append<A>(contentsOf:)();
      (*(void (**)(char *, uint64_t, uint64_t))(v89 + 16))(v88, v90, v91);
      unint64_t v52 = v97;
      uint64_t v54 = v98;
      uint64_t v50 = v96;
      dispatch thunk of RangeReplaceableCollection.append<A>(contentsOf:)();
      uint64_t v45 = v77;
      ((void (*)(char *, char *))v60)(v105, &v54[*(int *)(v65 + 36)]);
      uint64_t v49 = v95;
      dispatch thunk of IteratorProtocol.next()();
      uint64_t v33 = v65;
      uint64_t v69 = v65;
      uint64_t v48 = v105;
    }

    __break(1u);
    goto LABEL_9;
  }

LABEL_6:
  (*(void (**)(char *, uint64_t))(v72 + 8))(v49, v50);
  uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
  if ((result & 1) != 0)
  {
    uint64_t v70 = v73;
    (*(void (**)(char *, char *, uint64_t))(v92 + 32))(v73, v48, v45);
    uint64_t v71 = v75;
    MEMORY[0x186E17958](MEMORY[0x189619690], v75);
    Collection.subscript.getter();
    (*(void (**)(char *, uint64_t))(v74 + 8))(v70, v71);
    swift_getAssociatedConformanceWitness();
    return dispatch thunk of RangeReplaceableCollection.append<A>(contentsOf:)();
  }

unint64_t specialized Collection.prefix(_:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  if ((result & 0x8000000000000000LL) != 0)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }

  uint64_t v3 = *(void *)v2;
  unint64_t v4 = *(void *)(v2 + 8);
  if (v4 >> 14 < *(void *)v2 >> 14)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }

  unint64_t v5 = result;
  unint64_t v7 = *(void *)(v2 + 64);
  uint64_t v8 = *(void *)(v2 + 72);
  char v9 = *(_BYTE *)(v2 + 80);
  unint64_t v10 = *(void *)(v2 + 88);
  char v11 = *(_BYTE *)(v2 + 96);
  unint64_t v12 = *(void *)(v2 + 104);
  char v13 = v11 & 1;
  if (!result)
  {
    unint64_t v15 = *(void *)(v2 + 64);
    unint64_t v16 = *(void *)(v2 + 72);
    uint64_t v3 = *(void *)(v2 + 88);
    if ((*(_BYTE *)(v2 + 80) & 1) == 0) {
      goto LABEL_24;
    }
LABEL_7:
    char v14 = 1;
LABEL_27:
    unint64_t v4 = v12;
    goto LABEL_28;
  }

  if ((*(_BYTE *)(v2 + 80) & 1) != 0)
  {
    char v13 = 0;
    char v14 = 1;
    unint64_t v15 = *(void *)(v2 + 64);
    unint64_t v16 = *(void *)(v2 + 72);
LABEL_28:
    __int128 v22 = *(_OWORD *)(v2 + 80);
    *(_OWORD *)(a2 + 160) = *(_OWORD *)(v2 + 64);
    *(_OWORD *)(a2 + 176) = v22;
    *(_OWORD *)(a2 + 192) = *(_OWORD *)(v2 + 96);
    __int128 v23 = *(_OWORD *)(v2 + 16);
    *(_OWORD *)(a2 + 96) = *(_OWORD *)v2;
    *(_OWORD *)(a2 + 112) = v23;
    __int128 v24 = *(_OWORD *)(v2 + 48);
    *(_OWORD *)(a2 + 128) = *(_OWORD *)(v2 + 32);
    *(_OWORD *)(a2 + 144) = v24;
    *(void *)a2 = v7;
    *(void *)(a2 + 8) = v8;
    *(_BYTE *)(a2 + 16) = v9;
    *(_DWORD *)(a2 + 20) = *(_DWORD *)(v2 + 84);
    *(_DWORD *)(a2 + 17) = *(_DWORD *)(v2 + 81);
    *(void *)(a2 + 24) = v10;
    *(_BYTE *)(a2 + 32) = v11;
    *(_DWORD *)(a2 + 33) = *(_DWORD *)(v2 + 97);
    *(_DWORD *)(a2 + 36) = *(_DWORD *)(v2 + 100);
    *(void *)(a2 + 40) = v12;
    *(void *)(a2 + 48) = v15;
    *(void *)(a2 + 56) = v16;
    *(_BYTE *)(a2 + 64) = v14;
    *(void *)(a2 + 72) = v3;
    *(_BYTE *)(a2 + 80) = v13;
    *(void *)(a2 + 88) = v4;
    return result;
  }

  uint64_t v25 = *(void *)(v2 + 72);
  char v26 = *(_BYTE *)(v2 + 80);
  unint64_t v27 = *(void *)(v2 + 64);
  char v28 = *(_BYTE *)(v2 + 96);
  uint64_t v17 = *(void *)(v2 + 24);
  uint64_t v34 = *(void *)(v2 + 16);
  uint64_t v32 = *(void *)(v2 + 32);
  unint64_t v33 = v12 >> 14;
  unint64_t v29 = *(void *)(v2 + 88);
  uint64_t v30 = *(uint64_t (**)(uint64_t *, uint64_t *))(v2 + 48);
  uint64_t v31 = *(void *)(v2 + 40);
  while ((v13 & 1) != 0)
  {
    unint64_t v15 = 0LL;
    unint64_t v16 = 0LL;
    char v13 = 1;
    char v18 = 1;
    if (!--v5) {
      goto LABEL_23;
    }
LABEL_21:
    if ((v18 & 1) != 0)
    {
      char v13 = 0;
      char v14 = 1;
      unint64_t v10 = v29;
      char v11 = v28;
      unint64_t v7 = v27;
      char v9 = v26;
      uint64_t v8 = v25;
      goto LABEL_28;
    }
  }

  if (v33 < v10 >> 14)
  {
    __break(1u);
    goto LABEL_30;
  }

  unint64_t v19 = v12;
  uint64_t result = specialized ZSearcher.search(_:in:)(v3, v4, v34, v17, v10, v12, v32, v31, v30);
  if ((v21 & 1) != 0)
  {
    char v13 = 0;
    unint64_t v15 = 0LL;
    unint64_t v16 = 0LL;
    char v18 = 1;
  }

  else
  {
    unint64_t v15 = result;
    unint64_t v16 = v20;
    if (result >> 14 == v20 >> 14)
    {
      if (result >> 14 == v4 >> 14)
      {
        unint64_t v10 = 0LL;
        char v18 = 0;
        char v13 = 1;
      }

      else
      {
        uint64_t result = Substring.index(after:)();
        unint64_t v10 = result;
        char v13 = 0;
        char v18 = 0;
      }
    }

    else
    {
      char v13 = 0;
      char v18 = 0;
      unint64_t v10 = v20;
    }
  }

  unint64_t v12 = v19;
  if (--v5) {
    goto LABEL_21;
  }
LABEL_23:
  uint64_t v3 = v10;
  unint64_t v10 = v29;
  char v11 = v28;
  unint64_t v7 = v27;
  char v9 = v26;
  uint64_t v8 = v25;
  if ((v18 & 1) != 0) {
    goto LABEL_7;
  }
LABEL_24:
  if ((v9 & 1) == 0)
  {
    if (v15 >> 14 >= v7 >> 14)
    {
      char v14 = 0;
      goto LABEL_27;
    }

LABEL_32:
    __break(1u);
  }

  __break(1u);
  return result;
}

  if (!v11) {
    return 0LL;
  }
  if (v8 < v10) {
    return (*(uint64_t (**)(uint64_t))(v9 + 48))((v17 + a1) & ~v16);
  }
  if (!v7) {
    return 0LL;
  }
  __int128 v24 = v4 >= v6
  uint64_t v25 = v24 != 0;
  uint64_t result = (v24 - 1);
  if ((_DWORD)result == 0 || !v25) {
    return 0LL;
  }
  return result;
}

uint64_t RangeReplaceableCollection<>.replacing<A, B>(_:with:subrange:maxReplacements:)@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13 = v12;
  uint64_t v247 = a4;
  uint64_t v236 = a3;
  uint64_t v248 = a9;
  uint64_t v240 = a8;
  uint64_t v19 = *(void *)(a8 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v235 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  v233 = (char *)v225 - v21;
  uint64_t v234 = v19;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v237 = AssociatedTypeWitness;
  uint64_t v229 = AssociatedConformanceWitness;
  uint64_t v24 = type metadata accessor for ZSearcher(255LL, AssociatedTypeWitness, AssociatedConformanceWitness, v23);
  uint64_t v25 = MEMORY[0x186E17958](&protocol conformance descriptor for ZSearcher<A>, v24);
  uint64_t v232 = type metadata accessor for RangesCollection(0LL, v24, v25, v26);
  uint64_t v231 = *(void *)(v232 - 8);
  MEMORY[0x1895F8858](v232);
  v230 = (uint64_t (*)(char *, uint64_t, uint64_t))((char *)v225 - v27);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  uint64_t v228 = *(void *)(TupleTypeMetadata3 - 8);
  uint64_t v29 = MEMORY[0x1895F8858](TupleTypeMetadata3);
  uint64_t v31 = (char *)v225 - v30;
  uint64_t v32 = (char *)v225 + *(int *)(v29 + 48) - v30;
  unint64_t v33 = (char *)v225 + *(int *)(v29 + 64) - v30;
  uint64_t v244 = *(void *)(a5 - 8);
  uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t))(v244 + 16);
  uint64_t v241 = v13;
  v34(v31, v13, a5);
  uint64_t v243 = *(void *)(a6 - 8);
  uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t))(v243 + 16);
  v251 = v32;
  uint64_t v238 = a1;
  v35(v32, a1, a6);
  uint64_t v242 = *(void *)(a7 - 8);
  uint64_t v36 = *(void (**)(char *, unint64_t, uint64_t))(v242 + 16);
  unint64_t v239 = a2;
  v36(v33, a2, a7);
  uint64_t v252 = a5;
  int v37 = swift_dynamicCast();
  v249 = v31;
  uint64_t v250 = a6;
  if (v37)
  {
    if (swift_dynamicCast())
    {
      if (swift_dynamicCast())
      {
        v246 = v33;
        uint64_t v241 = String.subscript.getter();
        uint64_t v240 = v38;
        unint64_t v239 = v39;
        uint64_t v41 = v40;
        swift_bridgeObjectRelease();
        unint64_t v42 = String.subscript.getter();
        unint64_t v44 = v43;
        uint64_t v245 = a7;
        uint64_t v46 = v45;
        uint64_t v48 = v47;
        swift_bridgeObjectRelease();
        uint64_t v49 = String.subscript.getter();
        uint64_t v51 = v50;
        uint64_t v53 = v52;
        uint64_t v55 = v54;
        swift_bridgeObjectRelease();
        unint64_t v56 = Substring._replacingSubstring(_:with:maxReplacements:)( v42,  v44,  v46,  v48,  v49,  v51,  v53,  v55,  v247,  v241,  v240,  v239,  v41);
        uint64_t v58 = v57;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v253 = v56;
        uint64_t v254 = v58;
LABEL_50:
        swift_dynamicCast();
        (*(void (**)(char *, uint64_t))(v242 + 8))(v246, v245);
        goto LABEL_51;
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }

    else
    {
      swift_bridgeObjectRelease();
    }
  }

  if (swift_dynamicCast())
  {
    v246 = v33;
    uint64_t v245 = a7;
    unint64_t v60 = v265;
    unint64_t v59 = v266;
    uint64_t v62 = v267;
    uint64_t v61 = v268;
    if (swift_dynamicCast())
    {
      unint64_t v63 = v261;
      unint64_t v64 = v262;
      uint64_t v65 = v264;
      unint64_t v227 = v263;
      uint64_t v66 = v246;
      uint64_t v67 = v245;
      if (swift_dynamicCast())
      {
        Substring._replacingSubstring(_:with:maxReplacements:)( v63,  v64,  v227,  v65,  v257,  v258,  v259,  v260,  v247,  v60,  v59,  v62,  v61);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v68 = String.subscript.getter();
        uint64_t v70 = v69;
        uint64_t v72 = v71;
        uint64_t v74 = v73;
        swift_bridgeObjectRelease();
        unint64_t v253 = v68;
        uint64_t v254 = v70;
        uint64_t v255 = v72;
        uint64_t v256 = v74;
        swift_dynamicCast();
        (*(void (**)(char *, uint64_t))(v242 + 8))(v66, v67);
LABEL_51:
        (*(void (**)(char *, uint64_t))(v243 + 8))(v251, v250);
        uint64_t v218 = v244;
        return (*(uint64_t (**)(char *, uint64_t))(v218 + 8))(v249, v252);
      }

      swift_bridgeObjectRelease();
    }

    if (swift_dynamicCast())
    {
      unint64_t v33 = v246;
      a7 = v245;
      uint64_t result = swift_dynamicCast();
      if ((_DWORD)result)
      {
        if (v59 >> 14 >= v60 >> 14)
        {
          unint64_t v76 = Substring.subscript.getter();
          uint64_t v241 = v77;
          uint64_t v240 = v78;
          unint64_t v239 = v79;
          swift_bridgeObjectRelease();
          unint64_t v80 = String.subscript.getter();
          unint64_t v82 = v81;
          uint64_t v84 = v83;
          uint64_t v86 = v85;
          swift_bridgeObjectRelease();
          uint64_t v87 = String.subscript.getter();
          uint64_t v89 = v88;
          uint64_t v91 = v90;
          uint64_t v93 = v92;
          swift_bridgeObjectRelease();
          Substring._replacingSubstring(_:with:maxReplacements:)( v80,  v82,  v84,  v86,  v87,  v89,  v91,  v93,  v247,  v76,  v241,  v240,  v239);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v94 = String.subscript.getter();
          unint64_t v96 = v95;
          unint64_t v98 = v97;
          uint64_t v100 = v99;
          swift_bridgeObjectRelease();
          unint64_t v261 = v94;
          unint64_t v262 = v96;
          unint64_t v263 = v98;
          uint64_t v264 = v100;
          goto LABEL_50;
        }

        goto LABEL_58;
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }

    else
    {
      swift_bridgeObjectRelease();
      a7 = v245;
      unint64_t v33 = v246;
    }
  }

  if (!swift_dynamicCast())
  {
LABEL_37:
    if (swift_dynamicCast())
    {
      unint64_t v167 = v265;
      unint64_t v166 = v266;
      if (swift_dynamicCast())
      {
        uint64_t result = swift_dynamicCast();
        if ((_DWORD)result)
        {
          v246 = v33;
          uint64_t v245 = a7;
          if (v166 >> 14 < v167 >> 14)
          {
LABEL_60:
            __break(1u);
            goto LABEL_61;
          }

          unint64_t v168 = v261;
          unint64_t v169 = v262;
          unint64_t v170 = Substring.subscript.getter();
          uint64_t v240 = v171;
          unint64_t v239 = v172;
          uint64_t v241 = v173;
          swift_bridgeObjectRelease();
          unint64_t v174 = String.subscript.getter();
          unint64_t v176 = v175;
          uint64_t v178 = v177;
          uint64_t v180 = v179;
          uint64_t result = swift_bridgeObjectRelease();
          if (v169 >> 14 < v168 >> 14)
          {
LABEL_61:
            __break(1u);
            goto LABEL_62;
          }

          uint64_t v181 = Substring.subscript.getter();
          uint64_t v183 = v182;
          uint64_t v185 = v184;
          uint64_t v187 = v186;
          swift_bridgeObjectRelease();
          Substring._replacingSubstring(_:with:maxReplacements:)( v174,  v176,  v178,  v180,  v181,  v183,  v185,  v187,  v247,  v170,  v240,  v239,  v241);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v188 = String.subscript.getter();
          uint64_t v190 = v189;
          uint64_t v192 = v191;
          uint64_t v194 = v193;
          swift_bridgeObjectRelease();
          uint64_t v257 = v188;
          uint64_t v258 = v190;
          uint64_t v259 = v192;
LABEL_49:
          uint64_t v260 = v194;
          goto LABEL_50;
        }

        swift_bridgeObjectRelease();
      }

      if (swift_dynamicCast())
      {
        unint64_t v195 = v261;
        unint64_t v227 = v262;
        uint64_t result = swift_dynamicCast();
        if ((_DWORD)result)
        {
          if (v166 >> 14 < v167 >> 14)
          {
LABEL_62:
            __break(1u);
            goto LABEL_63;
          }

          v246 = v33;
          uint64_t v245 = a7;
          uint64_t v240 = Substring.subscript.getter();
          unint64_t v239 = v196;
          uint64_t v238 = v197;
          uint64_t v241 = v198;
          uint64_t result = swift_bridgeObjectRelease();
          if (v227 >> 14 < v195 >> 14)
          {
LABEL_63:
            __break(1u);
            goto LABEL_64;
          }

          uint64_t v237 = Substring.subscript.getter();
          unint64_t v200 = v199;
          uint64_t v202 = v201;
          uint64_t v204 = v203;
          swift_bridgeObjectRelease();
          uint64_t v205 = String.subscript.getter();
          uint64_t v207 = v206;
          uint64_t v209 = v208;
          uint64_t v211 = v210;
          swift_bridgeObjectRelease();
          Substring._replacingSubstring(_:with:maxReplacements:)( v237,  v200,  v202,  v204,  v205,  v207,  v209,  v211,  v247,  v240,  v239,  v238,  v241);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v212 = String.subscript.getter();
          uint64_t v214 = v213;
          uint64_t v216 = v215;
          uint64_t v194 = v217;
          swift_bridgeObjectRelease();
          uint64_t v257 = v212;
          uint64_t v258 = v214;
          uint64_t v259 = v216;
          goto LABEL_49;
        }

        swift_bridgeObjectRelease();
      }

      swift_bridgeObjectRelease();
    }

    v219 = v233;
    v251 = (char *)TupleTypeMetadata3;
    uint64_t v220 = v252;
    dispatch thunk of Collection.subscript.getter();
    v221 = v230;
    uint64_t v222 = v237;
    Collection<>._ranges<A>(of:)(v238, v237, v250, v229, a10, a12, (uint64_t)v230);
    (*(void (**)(char *, uint64_t))(v235 + 8))(v219, v222);
    uint64_t v223 = v232;
    v224 = (void (*)(char *, char *, uint64_t))MEMORY[0x186E17958]( &protocol conformance descriptor for RangesCollection<A>,  v232);
    RangeReplaceableCollection._replacing<A, B>(_:with:maxReplacements:)( v221,  v239,  v247,  v220,  v223,  a7,  v240,  v224,  v248,  a11);
    (*(void (**)(uint64_t (*)(char *, uint64_t, uint64_t), uint64_t))(v231 + 8))(v221, v223);
    uint64_t v218 = v228;
    uint64_t v252 = (uint64_t)v251;
    return (*(uint64_t (**)(char *, uint64_t))(v218 + 8))(v249, v252);
  }

  if (swift_dynamicCast())
  {
    unint64_t v102 = v265;
    unint64_t v101 = v266;
    if (swift_dynamicCast())
    {
      v246 = v33;
      uint64_t v245 = a7;
      uint64_t v238 = String.subscript.getter();
      uint64_t v240 = v103;
      unint64_t v239 = v104;
      uint64_t v241 = v105;
      uint64_t result = swift_bridgeObjectRelease();
      if (v101 >> 14 >= v102 >> 14)
      {
        unint64_t v106 = Substring.subscript.getter();
        unint64_t v108 = v107;
        uint64_t v110 = v109;
        uint64_t v112 = v111;
        swift_bridgeObjectRelease();
        uint64_t v113 = String.subscript.getter();
        uint64_t v115 = v114;
        uint64_t v117 = v116;
        uint64_t v119 = v118;
        swift_bridgeObjectRelease();
        unint64_t v120 = Substring._replacingSubstring(_:with:maxReplacements:)( v106,  v108,  v110,  v112,  v113,  v115,  v117,  v119,  v247,  v238,  v240,  v239,  v241);
        uint64_t v122 = v121;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v253 = v120;
        uint64_t v254 = v122;
        goto LABEL_50;
      }

      __break(1u);
LABEL_58:
      __break(1u);
      goto LABEL_59;
    }

    swift_bridgeObjectRelease();
  }

  if (!swift_dynamicCast())
  {
LABEL_36:
    swift_bridgeObjectRelease();
    goto LABEL_37;
  }

  unint64_t v227 = v265;
  unint64_t v226 = v266;
  v225[1] = v267;
  if (swift_dynamicCast())
  {
    v246 = v33;
    uint64_t v245 = a7;
    unint64_t v123 = String.subscript.getter();
    uint64_t v240 = v124;
    unint64_t v239 = v125;
    uint64_t v241 = v126;
    swift_bridgeObjectRelease();
    unint64_t v127 = String.subscript.getter();
    unint64_t v129 = v128;
    uint64_t v131 = v130;
    uint64_t v133 = v132;
    swift_bridgeObjectRelease();
    uint64_t result = v227;
    if (v226 >> 14 < v227 >> 14)
    {
LABEL_59:
      __break(1u);
      goto LABEL_60;
    }

    uint64_t v134 = Substring.subscript.getter();
    uint64_t v136 = v135;
    uint64_t v138 = v137;
    uint64_t v140 = v139;
    swift_bridgeObjectRelease();
    unint64_t v141 = Substring._replacingSubstring(_:with:maxReplacements:)( v127,  v129,  v131,  v133,  v134,  v136,  v138,  v140,  v247,  v123,  v240,  v239,  v241);
    uint64_t v143 = v142;
    swift_bridgeObjectRelease();
LABEL_33:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v253 = v141;
    uint64_t v254 = v143;
    goto LABEL_50;
  }

  if (!swift_dynamicCast())
  {
    swift_bridgeObjectRelease();
    goto LABEL_36;
  }

  v246 = v33;
  unint64_t v144 = v261;
  unint64_t v145 = v262;
  uint64_t v241 = String.subscript.getter();
  unint64_t v147 = v146;
  uint64_t v240 = v148;
  unint64_t v150 = v149;
  uint64_t result = swift_bridgeObjectRelease();
  if (v145 >> 14 < v144 >> 14)
  {
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }

  unint64_t v239 = v150;
  uint64_t v245 = a7;
  unint64_t v151 = Substring.subscript.getter();
  unint64_t v153 = v152;
  uint64_t v155 = v154;
  uint64_t v157 = v156;
  swift_bridgeObjectRelease();
  uint64_t result = v227;
  if (v226 >> 14 >= v227 >> 14)
  {
    uint64_t v158 = Substring.subscript.getter();
    uint64_t v160 = v159;
    uint64_t v162 = v161;
    uint64_t v164 = v163;
    swift_bridgeObjectRelease();
    unint64_t v141 = Substring._replacingSubstring(_:with:maxReplacements:)( v151,  v153,  v155,  v157,  v158,  v160,  v162,  v164,  v247,  v241,  v147,  v240,  v239);
    uint64_t v143 = v165;
    swift_bridgeObjectRelease();
    goto LABEL_33;
  }

LABEL_65:
  __break(1u);
  return result;
}

    uint64_t v19 = _StringGuts._slowEnsureMatchingEncoding(_:)(v7, a3, a4);
    goto LABEL_52;
  }

  return v14;
}

uint64_t RangeReplaceableCollection<>.replacing<A, B>(_:with:maxReplacements:)@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v53 = a8;
  uint64_t v54 = a3;
  uint64_t v56 = a5;
  uint64_t v57 = a6;
  uint64_t v51 = a1;
  unint64_t v52 = a2;
  uint64_t v50 = a9;
  uint64_t v58 = a7;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v14 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  unint64_t v16 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = MEMORY[0x1895F8858](v14);
  uint64_t v19 = (char *)&v42 - v18;
  uint64_t v46 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v20 = MEMORY[0x1895F8858](v17);
  __int128 v22 = (char *)&v42 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v20);
  uint64_t v24 = (char *)&v42 - v23;
  swift_getAssociatedConformanceWitness();
  uint64_t v49 = type metadata accessor for Range();
  uint64_t v25 = *(void *)(v49 - 8);
  uint64_t v26 = MEMORY[0x1895F8858](v49);
  uint64_t v45 = (char *)&v42 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v26);
  uint64_t v47 = (char *)&v42 - v28;
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v59 = v11;
  uint64_t v55 = a4;
  dispatch thunk of Collection.endIndex.getter();
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if ((result & 1) != 0)
  {
    uint64_t v43 = a10;
    uint64_t v44 = a11;
    uint64_t v42 = v25;
    uint64_t v30 = TupleTypeMetadata2;
    uint64_t v31 = &v19[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v32 = v46;
    unint64_t v33 = *(void (**)(char *, char *, uint64_t))(v46 + 32);
    v33(v19, v24, AssociatedTypeWitness);
    v33(v31, v22, AssociatedTypeWitness);
    uint64_t v34 = &v16[*(int *)(v30 + 48)];
    uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v32 + 16);
    v35(v16, v19, AssociatedTypeWitness);
    v35(v34, v31, AssociatedTypeWitness);
    uint64_t v36 = v45;
    v33(v45, v16, AssociatedTypeWitness);
    int v37 = *(void (**)(char *, uint64_t))(v32 + 8);
    v37(v34, AssociatedTypeWitness);
    uint64_t v38 = &v16[*(int *)(v30 + 48)];
    v33(v16, v19, AssociatedTypeWitness);
    v33(v38, v31, AssociatedTypeWitness);
    uint64_t v39 = v49;
    v33(&v36[*(int *)(v49 + 36)], v38, AssociatedTypeWitness);
    v37(v16, AssociatedTypeWitness);
    uint64_t v40 = v42;
    uint64_t v41 = (uint64_t)v47;
    (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v47, v36, v39);
    RangeReplaceableCollection<>.replacing<A, B>(_:with:subrange:maxReplacements:)( v51,  v52,  v41,  v54,  v55,  v56,  v57,  v58,  v50,  v53,  v43,  v44);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v40 + 8))(v41, v39);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t RangeReplaceableCollection<>.replace<A, B>(_:with:maxReplacements:)( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v64 = a8;
  uint64_t v65 = a3;
  uint64_t v67 = a5;
  uint64_t v68 = a6;
  uint64_t v62 = a1;
  unint64_t v63 = a2;
  uint64_t v69 = a7;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v13 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v15 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = MEMORY[0x1895F8858](v13);
  uint64_t v59 = (char *)&v49 - v17;
  uint64_t v56 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v18 = MEMORY[0x1895F8858](v16);
  uint64_t v20 = (char *)&v49 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v18);
  __int128 v22 = (char *)&v49 - v21;
  swift_getAssociatedConformanceWitness();
  uint64_t v61 = type metadata accessor for Range();
  uint64_t v23 = *(void *)(v61 - 8);
  uint64_t v24 = MEMORY[0x1895F8858](v61);
  uint64_t v55 = (char *)&v49 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = MEMORY[0x1895F8858](v24);
  uint64_t v58 = (char *)&v49 - v27;
  uint64_t v28 = *(void *)(a4 - 8);
  MEMORY[0x1895F8858](v26);
  uint64_t v30 = (char *)&v49 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = *(void (**)(void))(v28 + 16);
  uint64_t v57 = v30;
  v31();
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.endIndex.getter();
  uint64_t v32 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
  uint64_t v66 = v10;
  v32(v10, a4);
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if ((result & 1) != 0)
  {
    uint64_t v53 = a9;
    uint64_t v54 = a10;
    uint64_t v50 = v23;
    uint64_t v51 = a4;
    uint64_t v34 = v59;
    uint64_t v35 = TupleTypeMetadata2;
    uint64_t v36 = &v59[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v37 = v56;
    uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v56 + 32);
    v38(v59, v22, AssociatedTypeWitness);
    v38(v36, v20, AssociatedTypeWitness);
    uint64_t v39 = &v15[*(int *)(v35 + 48)];
    unint64_t v52 = (uint64_t (*)(char *, uint64_t))v32;
    uint64_t v40 = *(void (**)(char *, char *, uint64_t))(v37 + 16);
    v40(v15, v34, AssociatedTypeWitness);
    v40(v39, v36, AssociatedTypeWitness);
    uint64_t v41 = v55;
    v38(v55, v15, AssociatedTypeWitness);
    uint64_t v42 = *(void (**)(char *, uint64_t))(v37 + 8);
    v42(v39, AssociatedTypeWitness);
    uint64_t v43 = &v15[*(int *)(v35 + 48)];
    v38(v15, v34, AssociatedTypeWitness);
    v38(v43, v36, AssociatedTypeWitness);
    uint64_t v44 = v61;
    v38(&v41[*(int *)(v61 + 36)], v43, AssociatedTypeWitness);
    v42(v15, AssociatedTypeWitness);
    uint64_t v45 = v50;
    uint64_t v46 = (uint64_t)v58;
    (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v58, v41, v44);
    uint64_t v47 = v51;
    uint64_t v48 = v57;
    RangeReplaceableCollection<>.replacing<A, B>(_:with:subrange:maxReplacements:)( v62,  v63,  v46,  v65,  v51,  v67,  v68,  v69,  v66,  v64,  v53,  v54);
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v46, v44);
    return v52(v48, v47);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t specialized RangeReplaceableCollection<>._replacing<A, B>(_:with:maxReplacements:)( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7)
{
  unint64_t v14 = String.subscript.getter();
  specialized Collection<>._ranges<A>(of:)(a1, a2, v14, v15, v16, v17, (uint64_t)v20);
  swift_bridgeObjectRelease();
  uint64_t v18 = specialized RangeReplaceableCollection._replacing<A, B>(_:with:maxReplacements:)( (uint64_t)v20,  a3,  a4,  a5,  a6,  a7);
  outlined release of RangesCollection<ZSearcher<Substring>>((uint64_t)v20);
  return v18;
}

uint64_t RangeReplaceableCollection<>.replacing<A, B>(_:with:subrange:maxReplacements:)@<X0>( uint64_t a1@<X1>, unint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t result = dispatch thunk of Collection.endIndex.getter();
  if ((unint64_t)v28[0] >> 14 < (unint64_t)v37[0] >> 14)
  {
    __break(1u);
  }

  else
  {
    uint64_t v24 = a6;
    Collection<>._ranges<A>(of:subjectBounds:searchBounds:)(v37[0], v28[0], a2, a3, a7, (uint64_t)v37, a11);
    uint64_t v23 = v41;
    uint64_t v17 = v42;
    v28[0] = v37[0];
    v28[1] = v37[1];
    __int128 v29 = v38;
    __int128 v30 = v39;
    uint64_t v31 = v40;
    uint64_t v32 = v41;
    uint64_t v33 = v42;
    uint64_t v34 = v43;
    uint64_t v35 = v44;
    uint64_t v36 = v45;
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v21 = type metadata accessor for RegexRangesCollection(0LL, AssociatedTypeWitness, v19, v20);
    __int128 v22 = (void (*)(char *, char *, uint64_t))MEMORY[0x186E17958]( &protocol conformance descriptor for RegexRangesCollection<A>,  v21);
    RangeReplaceableCollection._replacing<A, B>(_:with:maxReplacements:)( (uint64_t (*)(char *, uint64_t, uint64_t))v28,  a1,  a4,  a5,  v21,  v24,  a9,  v22,  a8,  a10);
    swift_release();
    swift_bridgeObjectRelease();
    return outlined consume of Regex<A1.RegexOutput>.Match?<A><A1>(v23, v17);
  }

  return result;
}

uint64_t RangeReplaceableCollection<>.replacing<A, B>(_:with:maxReplacements:)@<X0>( uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9)
{
  uint64_t result = dispatch thunk of Collection.endIndex.getter();
  if (v18 >> 14 >= v19 >> 14) {
    return RangeReplaceableCollection<>.replacing<A, B>(_:with:subrange:maxReplacements:)( a1,  v19,  v18,  a2,  a3,  a4,  a5,  a8,  a6,  a7,  a9);
  }
  __break(1u);
  return result;
}

uint64_t RangeReplaceableCollection<>.replace<A, B>(_:with:maxReplacements:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a4 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  RangeReplaceableCollection<>.replacing<A, B>(_:with:maxReplacements:)( v9,  v10,  v11,  v12,  v13,  v14,  v15,  (uint64_t)v8,  v16);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, a4);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v6 + 32))(v4, v8, a4);
}

uint64_t SplitCollection.init(base:searcher:maxSplits:omittingEmptySubsequences:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  int v21 = a4;
  uint64_t v13 = type metadata accessor for RangesCollection(0LL, a5, a6, a4);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1895F8858](v13);
  uint64_t v16 = (char *)&v20 - v15;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  Collection._ranges<A>(of:)(a2, a5, a6, (uint64_t)v16);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a5 - 8) + 8LL))(a2, a5);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8LL))(a1, AssociatedTypeWitness);
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(a7, v16, v13);
  uint64_t result = type metadata accessor for SplitCollection(0LL, a5, a6, v18);
  *(void *)(a7 + *(int *)(result + 36)) = a3;
  *(_BYTE *)(a7 + *(int *)(result + 40)) = v21;
  return result;
}

uint64_t SplitCollection.Iterator.init(ranges:maxSplits:omittingEmptySubsequences:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int v22 = a3;
  uint64_t v21 = a2;
  uint64_t v20 = type metadata accessor for RangesIterator(0LL, a4, a5, a4);
  uint64_t v10 = *(void *)(v20 - 8);
  MEMORY[0x1895F8858](v20);
  uint64_t v12 = (char *)&v19 - v11;
  uint64_t v14 = (int *)type metadata accessor for SplitCollection.Iterator(0LL, a4, a5, v13);
  *(void *)(a6 + v14[13]) = 0LL;
  *(_BYTE *)(a6 + v14[14]) = 0;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16LL))( a6,  a1,  AssociatedTypeWitness);
  swift_getAssociatedConformanceWitness();
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v17 = type metadata accessor for RangesCollection(0LL, a4, a5, v16);
  RangesCollection.makeIterator()(v17, (uint64_t)v12);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8LL))(a1, v17);
  uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(a6 + v14[10], v12, v20);
  *(void *)(a6 + v14[11]) = v21;
  *(_BYTE *)(a6 + v14[12]) = v22;
  return result;
}

uint64_t SplitCollection.Iterator.next()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v112 = a2;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  swift_getAssociatedTypeWitness();
  uint64_t v113 = v4;
  uint64_t v114 = v5;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v8 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v105 = (char *)&v86 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v8);
  uint64_t v103 = (char *)&v86 - v10;
  uint64_t v11 = AssociatedConformanceWitness;
  uint64_t v12 = swift_checkMetadataState();
  uint64_t v107 = *(void *)(v12 - 8);
  MEMORY[0x1895F8858](v12);
  unint64_t v106 = (char *)&v86 - v13;
  uint64_t v14 = swift_getAssociatedConformanceWitness();
  uint64_t v15 = type metadata accessor for Range();
  uint64_t v16 = type metadata accessor for Optional();
  uint64_t v17 = MEMORY[0x1895F8858](v16);
  uint64_t v19 = (char *)&v86 - v18;
  uint64_t v110 = *(void *)(v15 - 8);
  uint64_t v20 = MEMORY[0x1895F8858](v17);
  uint64_t v21 = MEMORY[0x1895F8858](v20);
  uint64_t v22 = MEMORY[0x1895F8858](v21);
  uint64_t v24 = (char *)&v86 - v23;
  uint64_t v25 = MEMORY[0x1895F8858](v22);
  uint64_t v111 = (char *)&v86 - v26;
  uint64_t v27 = MEMORY[0x1895F8858](v25);
  uint64_t v33 = (char *)&v86 - v32;
  if ((*(_BYTE *)(v2 + *(int *)(a1 + 56)) & 1) != 0)
  {
    uint64_t v34 = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56LL))( v112,  1LL,  1LL,  v34);
  }

  uint64_t v96 = v15;
  uint64_t v93 = v31;
  uint64_t v94 = v27;
  uint64_t v90 = v30;
  uint64_t v91 = v29;
  uint64_t v36 = (char *)(v2 + *(int *)(a1 + 36));
  uint64_t v95 = v12;
  uint64_t v37 = v11;
  uint64_t v38 = v2;
  uint64_t v92 = v37;
  uint64_t v39 = v28;
  dispatch thunk of Collection.endIndex.getter();
  uint64_t v108 = *(void *)(v14 + 8);
  uint64_t v109 = v36;
  char v40 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v89 = v39;
  uint64_t v41 = *(void (**)(char *, uint64_t))(v39 + 8);
  v41(v33, AssociatedTypeWitness);
  if ((v40 & 1) != 0)
  {
    uint64_t v43 = v112;
LABEL_12:
    uint64_t v62 = v38;
    return finish #1 <A>() in SplitCollection.Iterator.next()(v62, v113, v114, v43);
  }

  uint64_t v43 = v112;
  uint64_t v87 = *(int *)(a1 + 52);
  uint64_t v86 = v41;
  uint64_t v88 = v14;
  uint64_t v44 = v38 + *(int *)(a1 + 40);
  uint64_t v45 = v38;
  uint64_t v46 = type metadata accessor for RangesIterator(0LL, v113, v114, v42);
  uint64_t v47 = *(void *)(v46 + 16);
  uint64_t v48 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v46 + 24) + 40LL);
  uint64_t v49 = *(int *)(v46 + 40);
  uint64_t v100 = *(void *)(v46 + 24);
  uint64_t v101 = v46;
  unint64_t v98 = v48;
  uint64_t v99 = v47;
  ((void (*)(uint64_t, uint64_t))v48)(v44, v44 + v49);
  uint64_t v50 = v110;
  uint64_t v51 = v96;
  unint64_t v97 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v110 + 48);
  int v52 = v97(v19, 1LL, v96);
  uint64_t v53 = (uint64_t)v111;
  if (v52 == 1)
  {
LABEL_11:
    (*(void (**)(char *, uint64_t))(v93 + 8))(v19, v94);
    uint64_t v43 = v112;
    uint64_t v62 = v45;
    return finish #1 <A>() in SplitCollection.Iterator.next()(v62, v113, v114, v43);
  }

  unint64_t v102 = *(void (**)(uint64_t, char *, uint64_t))(v50 + 32);
  while (1)
  {
    v102(v53, v19, v51);
    uint64_t v54 = v53;
    uint64_t v55 = v45;
    int v56 = *(unsigned __int8 *)(v45 + *(int *)(a1 + 48));
    (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v24, v54, v51);
    if (v56 != 1) {
      break;
    }
    uint64_t v57 = v109;
    char v58 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v59 = *(uint64_t (**)(char *, uint64_t))(v50 + 8);
    uint64_t result = v59(v24, v51);
    if ((v58 & 1) == 0) {
      goto LABEL_15;
    }
    uint64_t v45 = v55;
    uint64_t v60 = v55;
    uint64_t v53 = (uint64_t)v111;
    $defer #1 <A>() in SplitCollection.Iterator.next()(v60, (uint64_t)v111, v113, v114);
    v59((char *)v53, v51);
    v98(v44, v44 + *(int *)(v101 + 40), v99, v100);
    int v61 = v97(v19, 1LL, v51);
    uint64_t v50 = v110;
    if (v61 == 1) {
      goto LABEL_11;
    }
  }

  uint64_t v59 = *(uint64_t (**)(char *, uint64_t))(v50 + 8);
  uint64_t result = v59(v24, v51);
  uint64_t v57 = v109;
LABEL_15:
  uint64_t v63 = *(void *)(v55 + v87);
  BOOL v64 = __OFADD__(v63, 1LL);
  uint64_t v65 = v63 + 1;
  uint64_t v67 = v106;
  uint64_t v66 = v107;
  if (v64)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v55 + v87) = v65;
    uint64_t v68 = *(void (**)(char *, uint64_t, uint64_t))(v66 + 16);
    uint64_t v110 = v55;
    v68(v67, v55, v95);
    uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
    if ((result & 1) != 0)
    {
      uint64_t v69 = v103;
      uint64_t v70 = TupleTypeMetadata2;
      uint64_t v71 = &v103[*(int *)(TupleTypeMetadata2 + 48)];
      uint64_t v72 = v89;
      uint64_t v73 = *(void (**)(char *, char *, uint64_t))(v89 + 16);
      v73(v103, v57, AssociatedTypeWitness);
      uint64_t v109 = v71;
      v73(v71, v111, AssociatedTypeWitness);
      uint64_t v74 = v105;
      uint64_t v75 = &v105[*(int *)(v70 + 48)];
      v73(v105, v69, AssociatedTypeWitness);
      v73(v75, v71, AssociatedTypeWitness);
      unint64_t v76 = *(void (**)(uint64_t, char *, uint64_t))(v72 + 32);
      uint64_t v77 = v90;
      v76((uint64_t)v90, v74, AssociatedTypeWitness);
      uint64_t v78 = v86;
      v86(v75, AssociatedTypeWitness);
      unint64_t v79 = &v74[*(int *)(v70 + 48)];
      v76((uint64_t)v74, v69, AssociatedTypeWitness);
      v76((uint64_t)v79, v109, AssociatedTypeWitness);
      v76((uint64_t)&v77[*(int *)(v51 + 36)], v79, AssociatedTypeWitness);
      v78(v74, AssociatedTypeWitness);
      unint64_t v80 = v91;
      v102((uint64_t)v91, v77, v51);
      uint64_t v81 = v112;
      unint64_t v82 = v106;
      uint64_t v83 = v95;
      dispatch thunk of Collection.subscript.getter();
      v59(v80, v51);
      (*(void (**)(char *, uint64_t))(v107 + 8))(v82, v83);
      uint64_t v84 = swift_getAssociatedTypeWitness();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v84 - 8) + 56LL))(v81, 0LL, 1LL, v84);
      uint64_t v85 = (uint64_t)v111;
      $defer #1 <A>() in SplitCollection.Iterator.next()(v110, (uint64_t)v111, v113, v114);
      return v59((char *)v85, v51);
    }
  }

  __break(1u);
  return result;
}

uint64_t finish #1 <A>() in SplitCollection.Iterator.next()@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v41 = a1;
  uint64_t v39 = a4;
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v40 = swift_getAssociatedConformanceWitness();
  uint64_t v7 = type metadata accessor for PartialRangeFrom();
  uint64_t v33 = *(void *)(v7 - 8);
  uint64_t v34 = v7;
  MEMORY[0x1895F8858](v7);
  uint64_t v38 = (char *)&v31 - v8;
  uint64_t v9 = swift_checkMetadataState();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x1895F8858](v9);
  uint64_t v13 = (char *)&v31 - v12;
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v15 = MEMORY[0x1895F8858](v11);
  uint64_t v17 = (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v15);
  uint64_t v19 = (char *)&v31 - v18;
  uint64_t v21 = (int *)type metadata accessor for SplitCollection.Iterator(0LL, a2, a3, v20);
  uint64_t v22 = v41;
  *(_BYTE *)(v41 + v21[14]) = 1;
  uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  uint64_t v36 = v22 + v21[9];
  uint64_t v37 = v23;
  ((void (*)(char *))v23)(v19);
  uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v35(v13, v22, v9);
  dispatch thunk of Collection.endIndex.getter();
  uint64_t v32 = *(void (**)(char *, uint64_t))(v10 + 8);
  v32(v13, v9);
  LOBYTE(a2) = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v24 = *(void (**)(char *, uint64_t))(v14 + 8);
  v24(v17, AssociatedTypeWitness);
  v24(v19, AssociatedTypeWitness);
  if ((a2 & 1) != 0 && *(_BYTE *)(v22 + v21[12]) == 1)
  {
    uint64_t v25 = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56LL))( v39,  1LL,  1LL,  v25);
  }

  else
  {
    v35(v13, v22, v9);
    uint64_t v27 = v38;
    v37(v38, v36, AssociatedTypeWitness);
    uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
    if ((result & 1) != 0)
    {
      uint64_t v28 = v34;
      MEMORY[0x186E17958](MEMORY[0x189619690], v34);
      uint64_t v29 = v39;
      Collection.subscript.getter();
      (*(void (**)(char *, uint64_t))(v33 + 8))(v27, v28);
      v32(v13, v9);
      uint64_t v30 = swift_getAssociatedTypeWitness();
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56LL))( v29,  0LL,  1LL,  v30);
    }

    else
    {
      __break(1u);
    }
  }

  return result;
}

uint64_t $defer #1 <A>() in SplitCollection.Iterator.next()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v9 = a2 + *(int *)(type metadata accessor for Range() + 36);
  uint64_t v11 = a1 + *(int *)(type metadata accessor for SplitCollection.Iterator(0LL, a3, a4, v10) + 36);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 24LL))( v11,  v9,  AssociatedTypeWitness);
}

uint64_t SplitCollection.makeIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = type metadata accessor for RangesCollection(0LL, v6, v7, a2);
  MEMORY[0x1895F8858](v8);
  uint64_t v10 = (char *)&v13 - v9;
  (*(void (**)(char *, uint64_t))(v11 + 16))((char *)&v13 - v9, v3);
  return SplitCollection.Iterator.init(ranges:maxSplits:omittingEmptySubsequences:)( (uint64_t)v10,  *(void *)(v3 + *(int *)(a1 + 36)),  *(unsigned __int8 *)(v3 + *(int *)(a1 + 40)),  v6,  v7,  a3);
}

uint64_t protocol witness for Sequence.makeIterator() in conformance SplitCollection<A>( uint64_t a1, uint64_t a2)
{
  return protocol witness for Sequence.makeIterator() in conformance RangesCollection<A>( a1,  a2,  (void (*)(void))SplitCollection.makeIterator());
}

uint64_t protocol witness for Sequence.makeIterator() in conformance RangesCollection<A>( uint64_t a1, uint64_t a2, void (*a3)(void))
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8LL))(v3, a1);
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance SplitCollection<A>()
{
  return 0LL;
}

uint64_t Collection.split<A>(by:maxSplits:omittingEmptySubsequences:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v13 = *(void *)(a4 - 8);
  uint64_t v14 = MEMORY[0x1895F8858](a1);
  uint64_t v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v14);
  uint64_t v18 = (char *)&v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v18, v6, v20);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, a1, a4);
  return SplitCollection.init(base:searcher:maxSplits:omittingEmptySubsequences:)( (uint64_t)v18,  (uint64_t)v16,  a2,  a3,  a4,  a5,  a6);
}

uint64_t Collection<>.split<A>(separator:maxSplits:omittingEmptySubsequences:)( uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = v8;
  uint64_t v54 = a7;
  uint64_t v55 = a8;
  int v63 = a3;
  uint64_t v64 = a2;
  uint64_t v14 = *(void *)(a5 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v51 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for ZSearcher(255LL, v16, v17, v16);
  uint64_t v53 = MEMORY[0x186E17958](&protocol conformance descriptor for ZSearcher<A>, v18);
  unint64_t v58 = type metadata accessor for SplitCollection(0LL, v18, v53, v19);
  MEMORY[0x1895F8858](v58);
  uint64_t v57 = (uint64_t)&v51 - v20;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v56 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v22 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v24 = (char *)&v51 - v23;
  uint64_t v25 = (char *)&v51 + *(int *)(v22 + 48) - v23;
  uint64_t v61 = *(void *)(a4 - 8);
  uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v61 + 16);
  uint64_t v59 = v9;
  v26(v24, v9, a4);
  uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  uint64_t v52 = a1;
  v27(v25, a1, a5);
  int v28 = swift_dynamicCast();
  uint64_t v65 = v24;
  if (!v28) {
    goto LABEL_8;
  }
  uint64_t v60 = v14;
  uint64_t v62 = a6;
  if (!swift_dynamicCast())
  {
    if (swift_dynamicCast())
    {
      uint64_t v34 = v72;
      unint64_t v58 = v71;
      uint64_t v59 = v70;
      uint64_t v35 = v73;
      unint64_t v36 = String.subscript.getter();
      unint64_t v38 = v37;
      swift_bridgeObjectRelease();
      specialized StringProtocol<>._split(separator:maxSplits:omittingEmptySubsequences:)( v59,  v58,  v34,  v35,  v64,  v63 & 1,  v36,  v38);
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }

    swift_bridgeObjectRelease();
    a6 = v62;
    uint64_t v14 = v60;
LABEL_8:
    if (swift_dynamicCast())
    {
      uint64_t v60 = v14;
      uint64_t v62 = a6;
      unint64_t v41 = v70;
      unint64_t v40 = v71;
      if (swift_dynamicCast())
      {
        specialized StringProtocol<>._split(separator:maxSplits:omittingEmptySubsequences:)( v66,  v67,  v64,  v63 & 1,  v41,  v40);
LABEL_13:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_getAssociatedTypeWitness();
        uint64_t v39 = _arrayForceCast<A, B>(_:)();
        goto LABEL_14;
      }

      if (swift_dynamicCast())
      {
        specialized StringProtocol<>._split(separator:maxSplits:omittingEmptySubsequences:)( v66,  v67,  v68,  v69,  v64,  v63 & 1,  v41,  v40);
        goto LABEL_13;
      }

      swift_bridgeObjectRelease();
      a6 = v62;
    }

    v27(v51, v52, a5);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v44 = v54;
    uint64_t v45 = Array.init<A>(_:)();
    uint64_t v46 = (void *)swift_allocObject();
    v46[2] = a4;
    v46[3] = a5;
    v46[4] = a6;
    v46[5] = v44;
    v46[6] = v55;
    v46[7] = AssociatedTypeWitness;
    uint64_t v70 = ZSearcher.init(pattern:by:)( v45,  (uint64_t (*)(char *, char *))partial apply for implicit closure #3 in Collection<>.split<A>(separator:maxSplits:omittingEmptySubsequences:),  (uint64_t)v46);
    unint64_t v71 = v47;
    uint64_t v72 = v48;
    uint64_t v73 = v49;
    Collection.split<A>(by:maxSplits:omittingEmptySubsequences:)((uint64_t)&v70, v64, v63 & 1, v18, v53, v57);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_getAssociatedTypeWitness();
    MEMORY[0x186E17958](&protocol conformance descriptor for SplitCollection<A>, v58);
    uint64_t v39 = Array.init<A>(_:)();
    uint64_t v42 = v56;
    a4 = TupleTypeMetadata2;
    goto LABEL_17;
  }

  uint64_t v29 = v70;
  uint64_t v30 = v71;
  unint64_t v31 = String.subscript.getter();
  unint64_t v33 = v32;
  swift_bridgeObjectRelease();
  specialized StringProtocol<>._split(separator:maxSplits:omittingEmptySubsequences:)(v29, v30, v64, v63 & 1, v31, v33);
  swift_bridgeObjectRelease();
LABEL_6:
  swift_bridgeObjectRelease();
  swift_getAssociatedTypeWitness();
  uint64_t v39 = _arrayForceCast<A, B>(_:)();
LABEL_14:
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v60 + 8))(v25, a5);
  uint64_t v42 = v61;
LABEL_17:
  (*(void (**)(char *, uint64_t))(v42 + 8))(v65, a4);
  return v39;
}

uint64_t specialized StringProtocol<>._split(separator:maxSplits:omittingEmptySubsequences:)( uint64_t result, uint64_t a2, uint64_t a3, char a4, unint64_t a5, unint64_t a6)
{
  if (a6 >> 14 < a5 >> 14)
  {
    __break(1u);
  }

  else
  {
    uint64_t v6 = Substring.subscript.getter();
    unint64_t v8 = v7;
    uint64_t v41 = v10;
    uint64_t v42 = v9;
    unint64_t v11 = MEMORY[0x186E17364](0LL, 0xE000000000000000LL);
    unint64_t v13 = v12;
    uint64_t v15 = v14;
    uint64_t v17 = v16;
    uint64_t result = String.subscript.getter();
    if (v13 >> 14 >= v11 >> 14)
    {
      uint64_t v36 = v19;
      unint64_t v37 = result;
      unint64_t v21 = v18;
      uint64_t v22 = v20;
      uint64_t v23 = v15;
      unint64_t v38 = v11;
      uint64_t v24 = v17;
      uint64_t v25 = Substring.subscript.getter();
      uint64_t v27 = v26;
      unint64_t v39 = v8;
      unint64_t v40 = v6;
      uint64_t v29 = v28;
      uint64_t v31 = v30;
      swift_bridgeObjectRetain();
      v51[0] = v38;
      v51[1] = v13;
      v51[2] = v23;
      v51[3] = v24;
      v51[4] = v37;
      v51[5] = v21;
      v51[6] = v36;
      v51[7] = v22;
      v51[8] = specialized SubstringSearcher.State.init(text:pattern:)(v25, v27, v29, v31, v37, v21);
      v51[9] = v32;
      v51[10] = v33;
      char v52 = v34 & 1;
      specialized RangesCollection.init(base:searcher:)(v40, v39, v42, v41, (uint64_t)v51, (uint64_t)v45);
      v47[8] = v45[8];
      v47[9] = v45[9];
      v47[10] = v45[10];
      char v48 = v46;
      v47[4] = v45[4];
      v47[5] = v45[5];
      v47[6] = v45[6];
      v47[7] = v45[7];
      v47[0] = v45[0];
      v47[1] = v45[1];
      v47[2] = v45[2];
      v47[3] = v45[3];
      uint64_t v49 = a3;
      char v50 = a4 & 1;
      unint64_t v35 = specialized _copySequenceToContiguousArray<A>(_:)((unint64_t)v47);
      outlined release of RangesCollection<SubstringSearcher>((uint64_t)v45);
      return v35;
    }
  }

  __break(1u);
  return result;
}

uint64_t StringProtocol<>._split(separator:maxSplits:omittingEmptySubsequences:)( uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v5 = MEMORY[0x186E17364](0LL, 0xE000000000000000LL);
  unint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t result = String.subscript.getter();
  if (v7 >> 14 < v5 >> 14)
  {
    __break(1u);
  }

  else
  {
    unint64_t v16 = result;
    uint64_t v31 = v14;
    unint64_t v32 = v13;
    uint64_t v17 = v15;
    uint64_t v18 = v11;
    uint64_t v19 = v9;
    uint64_t v33 = a3;
    uint64_t v20 = Substring.subscript.getter();
    uint64_t v22 = v21;
    uint64_t v24 = v23;
    uint64_t v26 = v25;
    swift_bridgeObjectRetain();
    v45[0] = v5;
    v45[1] = v7;
    v45[2] = v19;
    v45[3] = v18;
    v45[4] = v16;
    v45[5] = v32;
    v45[6] = v31;
    v45[7] = v17;
    v45[8] = specialized SubstringSearcher.State.init(text:pattern:)(v20, v22, v24, v26, v16, v32);
    v45[9] = v27;
    v45[10] = v28;
    char v46 = v29 & 1;
    specialized RangesCollection.init(base:searcher:)(v37, v38, v39, v40, (uint64_t)v45, (uint64_t)v35);
    v41[8] = v35[8];
    v41[9] = v35[9];
    v41[10] = v35[10];
    char v42 = v36;
    v41[4] = v35[4];
    v41[5] = v35[5];
    v41[6] = v35[6];
    v41[7] = v35[7];
    v41[0] = v35[0];
    v41[1] = v35[1];
    v41[2] = v35[2];
    v41[3] = v35[3];
    uint64_t v43 = v33;
    char v44 = a4 & 1;
    unint64_t v30 = specialized _copySequenceToContiguousArray<A>(_:)((unint64_t)v41);
    outlined release of RangesCollection<SubstringSearcher>((uint64_t)v35);
    return v30;
  }

  return result;
}

uint64_t specialized StringProtocol<>._split(separator:maxSplits:omittingEmptySubsequences:)( uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, unint64_t a7, unint64_t a8)
{
  if (a8 >> 14 < a7 >> 14)
  {
    __break(1u);
    goto LABEL_6;
  }

  unint64_t v9 = result;
  uint64_t v10 = Substring.subscript.getter();
  unint64_t v12 = v11;
  uint64_t v43 = v14;
  uint64_t v44 = v13;
  uint64_t result = MEMORY[0x186E17364](0LL, 0xE000000000000000LL);
  if (a2 >> 14 < v9 >> 14)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  unint64_t v18 = result;
  unint64_t v19 = v15;
  uint64_t v20 = v17;
  uint64_t v21 = v16;
  uint64_t result = Substring.subscript.getter();
  if (v19 >> 14 >= v18 >> 14)
  {
    unint64_t v25 = result;
    uint64_t v39 = v23;
    unint64_t v40 = v22;
    uint64_t v26 = v24;
    uint64_t v27 = v20;
    uint64_t v28 = Substring.subscript.getter();
    uint64_t v30 = v29;
    unint64_t v41 = v12;
    unint64_t v42 = v10;
    uint64_t v32 = v31;
    uint64_t v34 = v33;
    swift_bridgeObjectRetain();
    v51[0] = v18;
    v51[1] = v19;
    v51[2] = v21;
    v51[3] = v27;
    v51[4] = v25;
    v51[5] = v40;
    v51[6] = v39;
    v51[7] = v26;
    v51[8] = specialized SubstringSearcher.State.init(text:pattern:)(v28, v30, v32, v34, v25, v40);
    v51[9] = v35;
    v51[10] = v36;
    char v52 = v37 & 1;
    specialized RangesCollection.init(base:searcher:)(v42, v41, v44, v43, (uint64_t)v51, (uint64_t)v53);
    v47[8] = v53[8];
    v47[9] = v53[9];
    v47[10] = v53[10];
    char v48 = v54;
    v47[4] = v53[4];
    v47[5] = v53[5];
    v47[6] = v53[6];
    v47[7] = v53[7];
    v47[0] = v53[0];
    v47[1] = v53[1];
    v47[2] = v53[2];
    v47[3] = v53[3];
    uint64_t v49 = a5;
    char v50 = a6 & 1;
    unint64_t v38 = specialized _copySequenceToContiguousArray<A>(_:)((unint64_t)v47);
    outlined release of RangesCollection<SubstringSearcher>((uint64_t)v53);
    return v38;
  }

uint64_t StringProtocol<>._split(separator:maxSplits:omittingEmptySubsequences:)( unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t result = MEMORY[0x186E17364](0LL, 0xE000000000000000LL);
  if (a2 >> 14 < a1 >> 14)
  {
    __break(1u);
  }

  else
  {
    unint64_t v12 = result;
    unint64_t v13 = v9;
    uint64_t v14 = v11;
    uint64_t v15 = v10;
    uint64_t result = Substring.subscript.getter();
    if (v13 >> 14 >= v12 >> 14)
    {
      unint64_t v19 = result;
      uint64_t v33 = v17;
      unint64_t v34 = v16;
      uint64_t v20 = v18;
      uint64_t v21 = v15;
      uint64_t v22 = Substring.subscript.getter();
      uint64_t v24 = v23;
      uint64_t v26 = v25;
      uint64_t v28 = v27;
      swift_bridgeObjectRetain();
      v51[0] = v12;
      v51[1] = v13;
      v51[2] = v21;
      v51[3] = v14;
      v51[4] = v19;
      v51[5] = v34;
      v51[6] = v33;
      v51[7] = v20;
      v51[8] = specialized SubstringSearcher.State.init(text:pattern:)(v22, v24, v26, v28, v19, v34);
      v51[9] = v29;
      v51[10] = v30;
      char v52 = v31 & 1;
      specialized RangesCollection.init(base:searcher:)( v37,  *((unint64_t *)&v37 + 1),  v38,  *((uint64_t *)&v38 + 1),  (uint64_t)v51,  (uint64_t)v53);
      __int128 v45 = v53[8];
      __int128 v46 = v53[9];
      __int128 v47 = v53[10];
      char v48 = v54;
      __int128 v41 = v53[4];
      __int128 v42 = v53[5];
      __int128 v43 = v53[6];
      __int128 v44 = v53[7];
      __int128 v37 = v53[0];
      __int128 v38 = v53[1];
      __int128 v39 = v53[2];
      __int128 v40 = v53[3];
      uint64_t v49 = a5;
      char v50 = a6 & 1;
      unint64_t v32 = specialized _copySequenceToContiguousArray<A>(_:)((unint64_t)&v37);
      outlined release of RangesCollection<SubstringSearcher>((uint64_t)v53);
      return v32;
    }
  }

  __break(1u);
  return result;
}

char *BidirectionalCollection<>.split<A>(separator:maxSplits:omittingEmptySubsequences:)( char *a1, uint64_t a2, int a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  uint64_t v50 = a5;
  uint64_t v51 = a7;
  unint64_t v10 = a4;
  int v55 = a3;
  uint64_t v53 = a1;
  uint64_t v12 = *(void *)(a4 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v14 = (char *)v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = MEMORY[0x18961AFE8];
  uint64_t v56 = swift_allocObject();
  unint64_t v16 = *(void *)(a6 + 8);
  char v54 = (unint64_t *)(v56 + 16);
  dispatch thunk of Collection.startIndex.getter();
  (*(void (**)(char *, char *, unint64_t))(v12 + 16))(v14, v7, v10);
  uint64_t v52 = a2;
  if (a2 < 1)
  {
    (*(void (**)(char *, unint64_t))(v12 + 8))(v14, v10);
  }

  else
  {
    char v17 = dispatch thunk of Collection.isEmpty.getter();
    (*(void (**)(char *, unint64_t))(v12 + 8))(v14, v10);
    if ((v17 & 1) == 0)
    {
      unint64_t v49 = v16;
      uint64_t v53 = v8;
      BidirectionalCollection<>._matches<A>(of:)(v50, v51, &v66);
      uint64_t v18 = v71;
      v47[2] = v72;
      uint64_t v48 = v70;
      v47[0] = v74;
      v47[1] = v73;
      int8x16_t v57 = v66;
      __int128 v58 = v67;
      __int128 v59 = v68;
      uint64_t v60 = v69;
      uint64_t v61 = v70;
      uint64_t v62 = v71;
      uint64_t v63 = v72;
      uint64_t v64 = v73;
      uint64_t v65 = v74;
      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      uint64_t v22 = type metadata accessor for RegexMatchesCollection(0LL, AssociatedTypeWitness, v20, v21);
      RegexMatchesCollection.makeIterator()(v22, (uint64_t)v75);
      swift_release();
      swift_bridgeObjectRelease();
      outlined consume of Regex<A1.RegexOutput>.Match?<A><A1>(v48, v18);
      uint64_t v25 = type metadata accessor for RegexMatchesCollection.Iterator(0LL, AssociatedTypeWitness, v23, v24);
      RegexMatchesCollection.Iterator.next()(v25, v26, v27, (unint64_t *)&v66);
      uint64_t v28 = v66.i64[1];
      if (v66.i64[1])
      {
        uint64_t v29 = v66.i64[0];
        unint64_t v30 = *((void *)&v67 + 1);
        unint64_t v31 = v68;
        while ((appendSubsequence #1 <A><A1>(end:) in BidirectionalCollection<>.split<A>(separator:maxSplits:omittingEmptySubsequences:)( v30,  v56,  v55 & 1,  v15) & 1) == 0 || *(void *)(*(void *)(v15 + 16) + 16LL) != v52)
        {
          *char v54 = v31;
          outlined consume of Regex<A1.RegexOutput>.Match?<A><A1>(v29, v28);
          RegexMatchesCollection.Iterator.next()(v25, v32, v33, (unint64_t *)&v66);
          uint64_t v28 = v66.i64[1];
          uint64_t v29 = v66.i64[0];
          unint64_t v30 = *((void *)&v67 + 1);
          unint64_t v31 = v68;
          if (!v66.i64[1]) {
            goto LABEL_11;
          }
        }

        uint64_t v34 = v76;
        uint64_t v51 = v78;
        uint64_t v52 = v77;
        uint64_t v50 = v79;
        uint64_t v48 = v80;
        swift_release();
        swift_bridgeObjectRelease();
        outlined consume of Regex<A1.RegexOutput>.Match?<A><A1>(v34, v52);
        *char v54 = v31;
        uint64_t v35 = v29;
        uint64_t v36 = v28;
      }

      else
      {
LABEL_11:
        uint64_t v38 = v76;
        uint64_t v39 = v77;
        uint64_t v29 = v79;
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t v35 = v38;
        uint64_t v36 = v39;
      }

      outlined consume of Regex<A1.RegexOutput>.Match?<A><A1>(v35, v36);
      __int128 v37 = v53;
      unint64_t v40 = *v54;
      unint64_t v41 = v49;
      dispatch thunk of Collection.endIndex.getter();
      unint64_t v42 = v40 >> 14;
      if (v40 >> 14 == v75[0] >> 14 && (v55 & 1) != 0)
      {
        __int128 v37 = *(char **)(v15 + 16);
LABEL_20:
        swift_bridgeObjectRetain();
        swift_release();
        goto LABEL_21;
      }

      dispatch thunk of Collection.endIndex.getter();
      if (v42 > v75[0] >> 14)
      {
        __break(1u);
      }

      else
      {
        v66.i64[0] = v40;
        v66.i64[1] = v75[0];
        dispatch thunk of Collection.subscript.getter();
        unint64_t v42 = v75[0];
        unint64_t v10 = v75[1];
        unint64_t v41 = v75[2];
        uint64_t v29 = v75[3];
        __int128 v37 = *(char **)(v15 + 16);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
LABEL_17:
          unint64_t v44 = *((void *)v37 + 2);
          unint64_t v43 = *((void *)v37 + 3);
          if (v44 >= v43 >> 1) {
            __int128 v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v43 > 1),  v44 + 1,  1,  v37);
          }
          *((void *)v37 + 2) = v44 + 1;
          __int128 v45 = &v37[32 * v44];
          *((void *)v45 + 4) = v42;
          *((void *)v45 + 5) = v10;
          *((void *)v45 + 6) = v41;
          *((void *)v45 + 7) = v29;
          *(void *)(v15 + 16) = v37;
          goto LABEL_20;
        }
      }

      __int128 v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v37 + 2) + 1LL,  1,  v37);
      goto LABEL_17;
    }
  }

  dispatch thunk of Collection.endIndex.getter();
  appendSubsequence #1 <A><A1>(end:) in BidirectionalCollection<>.split<A>(separator:maxSplits:omittingEmptySubsequences:)( v75[0],  v56,  v55 & 1,  v15);
  __int128 v37 = *(char **)(v15 + 16);
  swift_bridgeObjectRetain();
  swift_release();
LABEL_21:
  swift_release();
  return v37;
}

uint64_t appendSubsequence #1 <A><A1>(end:) in BidirectionalCollection<>.split<A>(separator:maxSplits:omittingEmptySubsequences:)( unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  unint64_t v10 = *(void *)(a2 + 16) >> 14;
  int v11 = (v10 == a1 >> 14) & a3;
  if (v11) {
    return v11 ^ 1u;
  }
  if (a1 >> 14 < v10)
  {
    __break(1u);
    goto LABEL_9;
  }

  uint64_t v4 = a4;
  dispatch thunk of Collection.subscript.getter();
  uint64_t v6 = v17;
  uint64_t v7 = v18;
  uint64_t v8 = v19;
  uint64_t v9 = v20;
  unint64_t v5 = *(char **)(v4 + 16);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v4 + 16) = v5;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_9:
    unint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v5 + 2) + 1LL,  1,  v5);
    *(void *)(v4 + 16) = v5;
  }

  unint64_t v14 = *((void *)v5 + 2);
  unint64_t v13 = *((void *)v5 + 3);
  if (v14 >= v13 >> 1)
  {
    unint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v13 > 1),  v14 + 1,  1,  v5);
    *(void *)(v4 + 16) = v5;
  }

  *((void *)v5 + 2) = v14 + 1;
  uint64_t v15 = &v5[32 * v14];
  *((void *)v15 + 4) = v6;
  *((void *)v15 + 5) = v7;
  *((void *)v15 + 6) = v8;
  *((void *)v15 + 7) = v9;
  return v11 ^ 1u;
}

uint64_t BidirectionalCollection<>._matches<A>(of:)@<X0>( uint64_t a1@<X2>, uint64_t a2@<X4>, int8x16_t *a3@<X8>)
{
  unint64_t v6 = v13[3];
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v7 = v13[0];
  uint64_t result = dispatch thunk of Collection.endIndex.getter();
  if (v12 >> 14 < (unint64_t)v13[0] >> 14)
  {
    __break(1u);
    __break(1u);
  }

  else
  {
    uint64_t v11 = v13[4];
    dispatch thunk of Collection.startIndex.getter();
    unint64_t v9 = v13[0];
    dispatch thunk of Collection.endIndex.getter();
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a2 + 16))(v13, a1, a2);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    return RegexMatchesCollection.init(input:subjectBounds:searchBounds:regex:)( v6,  v11,  v7,  v12,  v9,  v12,  v13,  AssociatedTypeWitness,  a3);
  }

  return result;
}

uint64_t BidirectionalCollection<>.starts<A>(with:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = v16;
  unint64_t v8 = v17;
  uint64_t v10 = v18;
  uint64_t v9 = v19;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a5 + 16))(&v15, a3, a5);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for Regex(0LL, AssociatedTypeWitness, v12, v13);
  Regex.prefixMatch(in:)(v7, v8, v10, v9, (uint64_t)&v16);
  swift_bridgeObjectRelease();
  swift_release();
  if (!v17) {
    return 0LL;
  }
  outlined consume of Regex<A1.RegexOutput>.Match?<A><A1>(v16, v17);
  return 1LL;
}

unint64_t Regex.prefixMatch(in:)@<X0>( unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return Regex.prefixMatch(in:)(a1, a2, a3, a4, 1, a5);
}

unint64_t SubstringSearcher.nextRangeNaive(in:searchFromEnd:)@<X0>( unint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(uint64_t *)(v3 + 72) < 1)
  {
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
  }

  else
  {
    unint64_t v5 = result;
    unint64_t v6 = *(void *)(v3 + 32);
    unint64_t v7 = Substring.index(before:)();
    if (a2 >> 14 >= (unint64_t)Substring.index(before:)() >> 14)
    {
      unint64_t v41 = v5 >> 14;
      unint64_t v44 = v6 >> 14;
      unint64_t v40 = v7 >> 14;
      while (1)
      {
        unint64_t v8 = Substring.subscript.getter();
        unint64_t v10 = v9;
        uint64_t v11 = Substring.subscript.getter();
        uint64_t v13 = v12;
        unint64_t v14 = v8;
        unint64_t v15 = v8 >> 14;
        if (v15 == v10 >> 14) {
          goto LABEL_31;
        }
        unint64_t v43 = v14;
        if (Substring.subscript.getter() == v11 && v16 == v13)
        {
LABEL_7:
          swift_bridgeObjectRelease();
        }

        else
        {
          char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v17 & 1) == 0)
          {
            uint64_t v42 = v13;
            while (1)
            {
              unint64_t v19 = Substring.index(after:)();
              unint64_t v15 = v19 >> 14;
              if (v19 >> 14 == v10 >> 14) {
                goto LABEL_31;
              }
              unint64_t v20 = v19;
              if (Substring.subscript.getter() == v11 && v21 == v42)
              {
                unint64_t v43 = v20;
                goto LABEL_7;
              }

              char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              if ((v18 & 1) != 0)
              {
                unint64_t v43 = v20;
                break;
              }
            }
          }
        }

        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        if (v15 < v41)
        {
          __break(1u);
          goto LABEL_37;
        }

        if (v44 >= v40) {
          break;
        }
        unint64_t v22 = Substring.index(before:)();
        unint64_t v23 = Substring.index(before:)();
        uint64_t v24 = Substring.subscript.getter();
        uint64_t v26 = v25;
        if (v24 == Substring.subscript.getter() && v26 == v27)
        {
          swift_bridgeObjectRelease_n();
LABEL_22:
          if (v44 < v22 >> 14)
          {
            do
            {
              unint64_t v30 = Substring.index(before:)();
              unint64_t v23 = Substring.index(before:)();
              uint64_t v31 = Substring.subscript.getter();
              uint64_t v33 = v32;
              if (v31 == Substring.subscript.getter() && v33 == v34)
              {
                swift_bridgeObjectRelease_n();
              }

              else
              {
                char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if ((v29 & 1) == 0) {
                  goto LABEL_29;
                }
              }
            }

            while (v44 < v30 >> 14);
          }

LABEL_33:
          uint64_t result = Substring.index(after:)();
          if (result >> 14 < v23 >> 14) {
            goto LABEL_38;
          }
          unint64_t v35 = result;
          uint64_t result = Substring.index(_:offsetBy:limitedBy:)();
          char v36 = 0;
          char v37 = v38 & 1;
          goto LABEL_35;
        }

        char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v28 & 1) != 0) {
          goto LABEL_22;
        }
LABEL_29:
      }

      unint64_t v23 = v43;
      goto LABEL_33;
    }

      char v36 = v35;
      goto LABEL_39;
    case 0x16u:
      uint64_t v60 = 0LL;
      goto LABEL_38;
    case 0x17u:
      uint64_t v60 = 0LL;
      goto LABEL_38;
    case 0x18u:
      uint64_t v60 = 0LL;
      _StringGuts.grow(_:)(16LL);
      _print_unlocked<A, B>(_:_:)();
      v37._unint64_t countAndFlagsBits = 0x5B736E61727420LL;
      v37._object = (void *)0xE700000000000000LL;
      String.append(_:)(v37);
      v38._unint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v38);
      swift_bridgeObjectRelease();
      v39._unint64_t countAndFlagsBits = 35LL;
      v39._object = (void *)0xE100000000000000LL;
      String.append(_:)(v39);
      swift_bridgeObjectRelease();
      v40._unint64_t countAndFlagsBits = 10333LL;
      v40._object = (void *)0xE200000000000000LL;
      String.append(_:)(v40);
      v41._unint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v41);
      swift_bridgeObjectRelease();
      v42._unint64_t countAndFlagsBits = 35LL;
      v42._object = (void *)0xE100000000000000LL;
      String.append(_:)(v42);
      swift_bridgeObjectRelease();
      __int128 v59 = 41LL;
      goto LABEL_52;
    case 0x19u:
      uint64_t v60 = 0LL;
      _StringGuts.grow(_:)(27LL);
      _print_unlocked<A, B>(_:_:)();
      v49._unint64_t countAndFlagsBits = 0x5B736C617620LL;
      v49._object = (void *)0xE600000000000000LL;
      String.append(_:)(v49);
      v50._unint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v50);
      swift_bridgeObjectRelease();
      v51._unint64_t countAndFlagsBits = 35LL;
      v51._object = (void *)0xE100000000000000LL;
      String.append(_:)(v51);
      swift_bridgeObjectRelease();
      uint64_t v27 = 0x706163203E2D205DLL;
      uint64_t v26 = 0xEE005B7365727574LL;
LABEL_45:
      String.append(_:)(*(Swift::String *)&v27);
LABEL_51:
      v54._unint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v54);
      swift_bridgeObjectRelease();
      v55._unint64_t countAndFlagsBits = 35LL;
      v55._object = (void *)0xE100000000000000LL;
      String.append(_:)(v55);
      swift_bridgeObjectRelease();
      __int128 v59 = 93LL;
LABEL_52:
      uint64_t v56 = 0xE100000000000000LL;
      String.append(_:)(*(Swift::String *)&v59);
      break;
    case 0x1Au:
      uint64_t v60 = 0LL;
LABEL_38:
      _print_unlocked<A, B>(_:_:)();
      v43._unint64_t countAndFlagsBits = 32LL;
      v43._object = (void *)0xE100000000000000LL;
      String.append(_:)(v43);
      uint64_t v34 = dispatch thunk of CustomStringConvertible.description.getter();
LABEL_39:
      String.append(_:)(*(Swift::String *)&v34);
      swift_bridgeObjectRelease();
      break;
    default:
      uint64_t v60 = 0LL;
LABEL_25:
      _print_unlocked<A, B>(_:_:)();
      break;
  }

  return v60;
}

    __break(1u);
    return result;
  }

  uint64_t v27 = MEMORY[0x18961AFE8];
LABEL_23:
  swift_bridgeObjectRelease();
  uint64_t v56 = v27;
  char v36 = BidirectionalCollection<>.joined(separator:)();
  char v38 = v37;
  swift_bridgeObjectRelease();
  if ((AST.MatchingOptionSequence.resetsCurrentOptions.getter() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v56 = 6176552LL;
    int8x16_t v57 = 0xE300000000000000LL;
    v39._unint64_t countAndFlagsBits = v49;
    v39._object = v52;
    String.append(_:)(v39);
  }

  else
  {
    uint64_t v56 = 16168LL;
    int8x16_t v57 = 0xE200000000000000LL;
    v40._unint64_t countAndFlagsBits = v49;
    v40._object = v52;
    String.append(_:)(v40);
    swift_bridgeObjectRelease();
    uint64_t v42 = v56;
    unint64_t v41 = v57;
    unint64_t v43 = HIBYTE(v38) & 0xF;
    if ((v38 & 0x2000000000000000LL) == 0) {
      unint64_t v43 = v36 & 0xFFFFFFFFFFFFLL;
    }
    if (v43)
    {
      uint64_t v56 = 45LL;
      int8x16_t v57 = 0xE100000000000000LL;
      v44._unint64_t countAndFlagsBits = v36;
      v44._object = (void *)v38;
      String.append(_:)(v44);
      swift_bridgeObjectRelease();
      __int128 v46 = v56;
      __int128 v45 = (void *)v57;
    }

    else
    {
      swift_bridgeObjectRelease();
      __int128 v46 = 0LL;
      __int128 v45 = (void *)0xE000000000000000LL;
    }

    uint64_t v56 = v42;
    int8x16_t v57 = v41;
    swift_bridgeObjectRetain();
    v47._unint64_t countAndFlagsBits = v46;
    v47._object = v45;
    String.append(_:)(v47);
    swift_bridgeObjectRelease();
  }

  swift_bridgeObjectRelease();
  return v56;
}

  String.append(_:)(*(Swift::String *)&v36);
  return v85;
}

    unint64_t v43 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v15 + 24);
    v43(v23, v24, v14);
    v43((_BYTE *)((unint64_t)&v23[v49] & v50), (_BYTE *)((unint64_t)&v24[v49] & v50), v14);
LABEL_34:
    char v37 = v53;
    char v38 = v54;
    goto LABEL_35;
  }

  if (!v24[v27]) {
    goto LABEL_16;
  }
  uint64_t v51 = 0;
  uint64_t v52 = v22;
  uint64_t v25 = v24;
  uint64_t v31 = ((v24[v27] - 1) << v33) + 1;
LABEL_3:
  unint64_t v22 = v52;
  uint64_t v24 = v25;
  LODWORD(v25) = v51;
  if (v31)
  {
LABEL_29:
    if ((_DWORD)v25) {
      uint64_t v42 = v27;
    }
    else {
      uint64_t v42 = v27 + 1;
    }
    memcpy(v23, v24, v42);
    goto LABEL_34;
  }

    unint64_t v43 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v15 + 40);
    v43(v23, v24, v14);
    v43((_BYTE *)((unint64_t)&v23[v49] & v50), (_BYTE *)((unint64_t)&v24[v49] & v50), v14);
LABEL_34:
    char v37 = v53;
    char v38 = v54;
    goto LABEL_35;
  }

  if (!v24[v27]) {
    goto LABEL_16;
  }
  uint64_t v51 = 0;
  uint64_t v52 = v22;
  uint64_t v25 = v24;
  uint64_t v31 = ((v24[v27] - 1) << v33) + 1;
LABEL_3:
  unint64_t v22 = v52;
  uint64_t v24 = v25;
  LODWORD(v25) = v51;
  if (v31)
  {
LABEL_29:
    if ((_DWORD)v25) {
      uint64_t v42 = v27;
    }
    else {
      uint64_t v42 = v27 + 1;
    }
    memcpy(v23, v24, v42);
    goto LABEL_34;
  }

    unint64_t v22 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 24);
    v22(a1, a2, AssociatedTypeWitness);
    v22((_BYTE *)((unint64_t)&a1[v28] & v9), (_BYTE *)((unint64_t)&a2[v28] & v9), AssociatedTypeWitness);
    goto LABEL_34;
  }

  if (!a2[v10]) {
    goto LABEL_16;
  }
  uint64_t v13 = ((a2[v10] - 1) << v14) + 1;
LABEL_3:
  if (v13)
  {
LABEL_29:
    if ((_DWORD)v6) {
      uint64_t v21 = v10;
    }
    else {
      uint64_t v21 = v10 + 1;
    }
    memcpy(a1, a2, v21);
    goto LABEL_34;
  }

    unint64_t v22 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 40);
    v22(a1, a2, AssociatedTypeWitness);
    v22((_BYTE *)((unint64_t)&a1[v28] & v9), (_BYTE *)((unint64_t)&a2[v28] & v9), AssociatedTypeWitness);
    goto LABEL_34;
  }

  if (!a2[v10]) {
    goto LABEL_16;
  }
  uint64_t v13 = ((a2[v10] - 1) << v14) + 1;
LABEL_3:
  if (v13)
  {
LABEL_29:
    if ((_DWORD)v6) {
      uint64_t v21 = v10;
    }
    else {
      uint64_t v21 = v10 + 1;
    }
    memcpy(a1, a2, v21);
    goto LABEL_34;
  }

LABEL_30:
    __break(1u);
LABEL_31:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v23 = 0LL;
    unint64_t v35 = 0LL;
    uint64_t result = 0LL;
    char v36 = 1;
    char v37 = 1;
LABEL_35:
    *(void *)a3 = v23;
    *(void *)(a3 + 8) = v35;
    *(_BYTE *)(a3 + 16) = v36;
    *(void *)(a3 + 24) = result;
    *(_BYTE *)(a3 + 32) = v37;
  }

  return result;
}

    uint64_t v11 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
LABEL_31:
    uint64_t v27 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v19);
    char v29 = *v27;
    char v28 = v27[1];
    unint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v19);
    if ((v41 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    MEMORY[0x186E16E84](v42, v29, v28);
    uint64_t result = Hasher._finalize()();
    uint64_t v13 = -1LL << *(_BYTE *)(v7 + 32);
    unint64_t v14 = result & ~v13;
    unint64_t v15 = v14 >> 6;
    if (((-1LL << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
    {
      uint64_t v16 = __clz(__rbit64((-1LL << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      unint64_t v23 = 0;
      uint64_t v24 = (unint64_t)(63 - v13) >> 6;
      do
      {
        if (++v15 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_47;
        }

        uint64_t v25 = v15 == v24;
        if (v15 == v24) {
          unint64_t v15 = 0LL;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)(v12 + 8 * v15);
      }

      while (v26 == -1);
      uint64_t v16 = __clz(__rbit64(~v26)) + (v15 << 6);
    }

    *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v16;
    char v17 = (void *)(*(void *)(v7 + 48) + 16 * v16);
    char *v17 = v29;
    v17[1] = v28;
    *(void *)(*(void *)(v7 + 56) + 8 * v16) = v30;
    ++*(void *)(v7 + 16);
  }

  unint64_t v22 = v20 + 2;
  if (v22 >= v39)
  {
LABEL_33:
    if ((v41 & 1) == 0)
    {
      uint64_t result = swift_release();
      uint64_t v3 = v2;
      goto LABEL_46;
    }

    uint64_t v31 = *(_BYTE *)(v5 + 32);
    uint64_t v32 = 1LL << v31;
    if (1LL << v31 >= 64)
    {
      uint64_t v33 = (unint64_t)(v32 + 63) >> 6;
      if ((v31 & 0x3Fu) >= 8)
      {
        uint64_t v34 = v33 & 0x3FFFFFFFFFFFFFCLL;
        unint64_t v35 = (_OWORD *)(v5 + 80);
        char v36 = v33 & 0x3FFFFFFFFFFFFFCLL;
        uint64_t v3 = v2;
        do
        {
          *(v35 - 1) = 0uLL;
          *unint64_t v35 = 0uLL;
          v35 += 2;
          v36 -= 4LL;
        }

        while (v36);
        if (v33 == v34) {
          goto LABEL_44;
        }
      }

      else
      {
        uint64_t v34 = 0LL;
        uint64_t v3 = v2;
      }

      char v37 = v33 - v34;
      char v38 = (void *)(v5 + 8 * v34 + 64);
      do
      {
        *v38++ = 0LL;
        --v37;
      }

      while (v37);
    }

    else
    {
      *unint64_t v40 = -1LL << v32;
      uint64_t v3 = v2;
    }

    uint64_t v11 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
LABEL_31:
    uint64_t v27 = 8 * v19;
    char v28 = *(void *)(*(void *)(v5 + 48) + v27);
    char v29 = *(void *)(*(void *)(v5 + 56) + v27);
    if ((a2 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v28);
    uint64_t result = Hasher._finalize()();
    uint64_t v13 = -1LL << *(_BYTE *)(v7 + 32);
    unint64_t v14 = result & ~v13;
    unint64_t v15 = v14 >> 6;
    if (((-1LL << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
    {
      uint64_t v16 = __clz(__rbit64((-1LL << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      unint64_t v23 = 0;
      uint64_t v24 = (unint64_t)(63 - v13) >> 6;
      do
      {
        if (++v15 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_47;
        }

        uint64_t v25 = v15 == v24;
        if (v15 == v24) {
          unint64_t v15 = 0LL;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)(v12 + 8 * v15);
      }

      while (v26 == -1);
      uint64_t v16 = __clz(__rbit64(~v26)) + (v15 << 6);
    }

    *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v16;
    char v17 = 8 * v16;
    *(void *)(*(void *)(v7 + 48) + v17) = v28;
    *(void *)(*(void *)(v7 + 56) + v17) = v29;
    ++*(void *)(v7 + 16);
  }

  unint64_t v22 = v20 + 2;
  if (v22 >= v38)
  {
LABEL_33:
    if ((a2 & 1) == 0)
    {
      uint64_t result = swift_release();
      uint64_t v3 = v2;
      goto LABEL_46;
    }

    unint64_t v30 = *(_BYTE *)(v5 + 32);
    uint64_t v31 = 1LL << v30;
    if (1LL << v30 >= 64)
    {
      uint64_t v32 = (unint64_t)(v31 + 63) >> 6;
      if ((v30 & 0x3Fu) >= 8)
      {
        uint64_t v33 = v32 & 0x3FFFFFFFFFFFFFCLL;
        uint64_t v34 = (_OWORD *)(v5 + 80);
        unint64_t v35 = v32 & 0x3FFFFFFFFFFFFFCLL;
        uint64_t v3 = v2;
        do
        {
          *(v34 - 1) = 0uLL;
          *uint64_t v34 = 0uLL;
          v34 += 2;
          v35 -= 4LL;
        }

        while (v35);
        if (v32 == v33) {
          goto LABEL_44;
        }
      }

      else
      {
        uint64_t v33 = 0LL;
        uint64_t v3 = v2;
      }

      char v36 = v32 - v33;
      char v37 = (void *)(v5 + 8 * v33 + 64);
      do
      {
        *v37++ = 0LL;
        --v36;
      }

      while (v36);
    }

    else
    {
      *uint64_t v39 = -1LL << v31;
      uint64_t v3 = v2;
    }

    uint64_t v11 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
LABEL_31:
    uint64_t v27 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v19);
    char v29 = *v27;
    char v28 = v27[1];
    unint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v19);
    if ((v41 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    MEMORY[0x186E16E84](v42, v29, v28);
    uint64_t result = Hasher._finalize()();
    uint64_t v13 = -1LL << *(_BYTE *)(v7 + 32);
    unint64_t v14 = result & ~v13;
    unint64_t v15 = v14 >> 6;
    if (((-1LL << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
    {
      uint64_t v16 = __clz(__rbit64((-1LL << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      unint64_t v23 = 0;
      uint64_t v24 = (unint64_t)(63 - v13) >> 6;
      do
      {
        if (++v15 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_47;
        }

        uint64_t v25 = v15 == v24;
        if (v15 == v24) {
          unint64_t v15 = 0LL;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)(v12 + 8 * v15);
      }

      while (v26 == -1);
      uint64_t v16 = __clz(__rbit64(~v26)) + (v15 << 6);
    }

    *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v16;
    char v17 = (void *)(*(void *)(v7 + 48) + 16 * v16);
    char *v17 = v29;
    v17[1] = v28;
    *(void *)(*(void *)(v7 + 56) + 8 * v16) = v30;
    ++*(void *)(v7 + 16);
  }

  unint64_t v22 = v20 + 2;
  if (v22 >= v39)
  {
LABEL_33:
    if ((v41 & 1) == 0)
    {
      uint64_t result = swift_release();
      uint64_t v3 = v2;
      goto LABEL_46;
    }

    uint64_t v31 = *(_BYTE *)(v5 + 32);
    uint64_t v32 = 1LL << v31;
    if (1LL << v31 >= 64)
    {
      uint64_t v33 = (unint64_t)(v32 + 63) >> 6;
      if ((v31 & 0x3Fu) >= 8)
      {
        uint64_t v34 = v33 & 0x3FFFFFFFFFFFFFCLL;
        unint64_t v35 = (_OWORD *)(v5 + 80);
        char v36 = v33 & 0x3FFFFFFFFFFFFFCLL;
        uint64_t v3 = v2;
        do
        {
          *(v35 - 1) = 0uLL;
          *unint64_t v35 = 0uLL;
          v35 += 2;
          v36 -= 4LL;
        }

        while (v36);
        if (v33 == v34) {
          goto LABEL_44;
        }
      }

      else
      {
        uint64_t v34 = 0LL;
        uint64_t v3 = v2;
      }

      char v37 = v33 - v34;
      char v38 = (void *)(v5 + 8 * v34 + 64);
      do
      {
        *v38++ = 0LL;
        --v37;
      }

      while (v37);
    }

    else
    {
      *unint64_t v40 = -1LL << v32;
      uint64_t v3 = v2;
    }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

unint64_t SubstringSearcher.nextRange(in:searchFromEnd:)@<X0>( unint64_t result@<X0>, unint64_t a2@<X1>, unint64_t a3@<X4>, uint64_t a4@<X8>)
{
  unint64_t v5 = a3;
  uint64_t v6 = a4;
  uint64_t v7 = *(void *)(v4 + 72);
  if (!v7)
  {
    if ((a3 ^ a2) >= 0x4000)
    {
      uint64_t result = Substring.index(after:)();
      unint64_t v12 = result;
      char v37 = 0;
      char v38 = 0;
    }

    else
    {
      char v37 = 0;
      unint64_t v12 = 0LL;
      char v38 = 1;
    }

    unint64_t v36 = v5;
    goto LABEL_44;
  }

  uint64_t v8 = v4;
  uint64_t v9 = *(void *)(v4 + 64);
  if (!*(void *)(v9 + 16))
  {
    uint64_t result = SubstringSearcher.nextRangeNaive(in:searchFromEnd:)(result, a2, (uint64_t)v49);
    unint64_t v5 = v49[0];
    unint64_t v36 = v49[1];
    char v37 = v50;
    unint64_t v12 = v51;
    char v38 = v52;
LABEL_44:
    *(void *)uint64_t v6 = v5;
    *(void *)(v6 + 8) = v36;
    *(_BYTE *)(v6 + 16) = v37;
    *(void *)(v6 + 24) = v12;
    *(_BYTE *)(v6 + 32) = v38;
    return result;
  }

  if (__OFSUB__(v7, 1LL)) {
    goto LABEL_49;
  }
  uint64_t v10 = *(void *)(v8 + 48);
  unint64_t v48 = *(void *)(v8 + 32) >> 14;
  uint64_t v43 = v7 - 1;
  uint64_t v44 = v9;
  uint64_t v41 = v7 - 2;
  BOOL v11 = __OFSUB__(v7 - 1, 1LL);
  BOOL v42 = v11;
  unint64_t v47 = result >> 14;
  unint64_t v12 = a3;
  uint64_t v46 = *(void *)(v8 + 48);
  while (1)
  {
    unint64_t v5 = Substring.index(before:)();
    unint64_t v13 = (unint64_t)Substring.index(before:)() >> 14;
    unint64_t v45 = v12;
    if (v13 >= v48) {
      break;
    }
    uint64_t v14 = v43;
LABEL_29:
    uint64_t v30 = Substring.subscript.getter();
    if (*(void *)(v44 + 16) && (unint64_t v32 = specialized __RawDictionaryStorage.find<A>(_:)(v30, v31), (v33 & 1) != 0)) {
      uint64_t v34 = *(void *)(*(void *)(v44 + 56) + 8 * v32);
    }
    else {
      uint64_t v34 = 0LL;
    }
    uint64_t result = swift_bridgeObjectRelease();
    if (__OFSUB__(v14, v34)) {
      goto LABEL_47;
    }
    uint64_t result = Substring.index(_:offsetBy:limitedBy:)();
    unint64_t v12 = result;
    if ((v35 & 1) != 0)
    {
      unint64_t v5 = 0LL;
      unint64_t v36 = 0LL;
      char v37 = 1;
      char v38 = 1;
LABEL_40:
      uint64_t v6 = a4;
      goto LABEL_44;
    }
  }

  uint64_t v15 = Substring.subscript.getter();
  uint64_t v17 = v16;
  if (v15 != Substring.subscript.getter() || v17 != v18)
  {
    char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v19 & 1) != 0) {
      goto LABEL_14;
    }
    uint64_t v14 = v43;
    goto LABEL_29;
  }

  uint64_t result = swift_bridgeObjectRelease_n();
LABEL_14:
  if (!v42)
  {
    uint64_t v14 = v41;
    if (v13 == v48)
    {
LABEL_38:
      if (v45 >> 14 < v5 >> 14) {
        goto LABEL_50;
      }
      uint64_t result = Substring.index(_:offsetBy:limitedBy:)();
      char v37 = 0;
      unint64_t v12 = result;
      unint64_t v36 = v45;
      char v38 = v39 & 1;
      goto LABEL_40;
    }

    while (v47 < v5 >> 14)
    {
      unint64_t v5 = Substring.index(before:)();
      unint64_t v20 = Substring.index(before:)();
      uint64_t v21 = v10;
      unint64_t v22 = v20 >> 14;
      if (v20 >> 14 < v48)
      {
        uint64_t v10 = v21;
        goto LABEL_29;
      }

      uint64_t v23 = Substring.subscript.getter();
      uint64_t v25 = v24;
      if (v23 == Substring.subscript.getter() && v25 == v26)
      {
        uint64_t result = swift_bridgeObjectRelease_n();
      }

      else
      {
        char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        if ((v27 & 1) == 0)
        {
          uint64_t v10 = v46;
          goto LABEL_29;
        }
      }

      if (__OFSUB__(v14--, 1LL)) {
        goto LABEL_46;
      }
      BOOL v29 = v22 == v48;
      uint64_t v10 = v46;
      if (v29) {
        goto LABEL_38;
      }
    }

    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
  }

  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
  return result;
}

__n128 protocol witness for Sequence.makeIterator() in conformance SubstringSearcher@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = *(void *)(v1 + 48);
  char v5 = *(_BYTE *)(v1 + 88);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(void *)(a1 + 16) = v2;
  *(void *)(a1 + 24) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 32);
  *(void *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(v1 + 56);
  __n128 result = *(__n128 *)(v1 + 72);
  *(__n128 *)(a1 + 72) = result;
  *(_BYTE *)(a1 + 88) = v5;
  return result;
}

unint64_t protocol witness for Sequence._copyToContiguousArray() in conformance SubstringSearcher()
{
  __int128 v1 = v0[3];
  _OWORD v5[2] = v0[2];
  v5[3] = v1;
  v6[0] = v0[4];
  *(_OWORD *)((char *)v6 + 9) = *(_OWORD *)((char *)v0 + 73);
  __int128 v2 = v0[1];
  v5[0] = *v0;
  v5[1] = v2;
  unint64_t v3 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)v5);
  outlined release of SubstringSearcher((uint64_t)v5);
  return v3;
}

_OWORD *protocol witness for Sequence._copyContents(initializing:) in conformance SubstringSearcher( _OWORD *a1, uint64_t a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3);
}

unint64_t protocol witness for IteratorProtocol.next() in conformance SubstringSearcher@<X0>( uint64_t a1@<X8>)
{
  if ((*(_BYTE *)(v1 + 88) & 1) != 0)
  {
    __int128 v3 = 0uLL;
    char v4 = 1;
  }

  else
  {
    unint64_t v5 = *(void *)(v1 + 8);
    uint64_t v6 = *(void *)(v1 + 16);
    uint64_t v7 = *(void *)(v1 + 24);
    uint64_t v8 = *(void *)(v1 + 48);
    uint64_t v10 = *(void *)(v1 + 72);
    unint64_t v9 = *(void *)(v1 + 80);
    unint64_t v17 = *(void *)v1;
    unint64_t v18 = v5;
    uint64_t v19 = v6;
    uint64_t v20 = v7;
    __int128 v21 = *(_OWORD *)(v1 + 32);
    uint64_t v22 = v8;
    __int128 v23 = *(_OWORD *)(v1 + 56);
    uint64_t v24 = v10;
    unint64_t v25 = v9;
    char v26 = 0;
    unint64_t result = SubstringSearcher.nextRange(in:searchFromEnd:)(v17, v5, v9, (uint64_t)&v13);
    __int128 v3 = v13;
    char v4 = v14;
    char v12 = v16;
    *(void *)(v1 + 80) = v15;
    *(_BYTE *)(v1 + 88) = v12;
  }

  *(_OWORD *)a1 = v3;
  *(_BYTE *)(a1 + 16) = v4;
  return result;
}

uint64_t protocol witness for CollectionSearcher.state(for:in:) in conformance SubstringSearcher@<X0>( uint64_t a1@<X8>)
{
  unint64_t v3 = *(void *)(v1 + 32);
  unint64_t v4 = *(void *)(v1 + 40);
  uint64_t v5 = Substring.subscript.getter();
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  swift_bridgeObjectRetain();
  uint64_t result = specialized SubstringSearcher.State.init(text:pattern:)(v5, v7, v9, v11, v3, v4);
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v13;
  *(void *)(a1 + 16) = v14;
  *(_BYTE *)(a1 + 24) = v15 & 1;
  return result;
}

unint64_t *protocol witness for CollectionSearcher.search(_:_:) in conformance SubstringSearcher@<X0>( unint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if ((*(_BYTE *)(a2 + 24) & 1) != 0)
  {
    __int128 v4 = 0uLL;
    char v5 = 1;
  }

  else
  {
    uint64_t result = (unint64_t *)SubstringSearcher.nextRange(in:searchFromEnd:)( *result,  result[1],  *(void *)(a2 + 16),  (uint64_t)&v8);
    __int128 v4 = v8;
    char v5 = v9;
    char v7 = v11;
    *(void *)(a2 + 16) = v10;
    *(_BYTE *)(a2 + 24) = v7;
  }

  *(_OWORD *)a3 = v4;
  *(_BYTE *)(a3 + 16) = v5;
  return result;
}

uint64_t Collection._trimmingPrefix<A>(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = v5;
  uint64_t v34 = a4;
  uint64_t v35 = a1;
  uint64_t v33 = a5;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v37 = AssociatedConformanceWitness;
  uint64_t v36 = swift_getAssociatedConformanceWitness();
  uint64_t v11 = type metadata accessor for PartialRangeFrom();
  uint64_t v31 = *(void *)(v11 - 8);
  uint64_t v32 = v11;
  uint64_t v12 = MEMORY[0x1895F8858](v11);
  uint64_t v14 = (char *)&v28 - v13;
  uint64_t v15 = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](v12);
  unint64_t v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for Optional();
  uint64_t v29 = *(void *)(v18 - 8);
  uint64_t v30 = v18;
  uint64_t v19 = MEMORY[0x1895F8858](v18);
  __int128 v21 = (char *)&v28 - v20;
  uint64_t v22 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](v19);
  uint64_t v24 = (char *)&v28 - v23;
  CollectionConsumer.consuming(_:)(v6, a3, v34, (uint64_t)v21);
  unint64_t v25 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  uint64_t v35 = v6;
  v25(v17, v6, a2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v21, 1LL, AssociatedTypeWitness) == 1)
  {
    dispatch thunk of Collection.startIndex.getter();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, a2);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v21, v30);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, a2);
    (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v24, v21, AssociatedTypeWitness);
  }

  uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
  if ((result & 1) != 0)
  {
    (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v14, v24, AssociatedTypeWitness);
    uint64_t v27 = v32;
    MEMORY[0x186E17958](MEMORY[0x189619690], v32);
    Collection.subscript.getter();
    return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v14, v27);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t CollectionConsumer.consuming(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v45 = a1;
  uint64_t v42 = a4;
  swift_getAssociatedTypeWitness();
  uint64_t v44 = a3;
  uint64_t v43 = a2;
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v7 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v36 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = MEMORY[0x1895F8858](v7);
  uint64_t v11 = (char *)&v35 - v10;
  uint64_t v37 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v12 = MEMORY[0x1895F8858](v9);
  uint64_t v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v12);
  uint64_t v16 = (char *)&v35 - v15;
  swift_getAssociatedConformanceWitness();
  uint64_t v17 = type metadata accessor for Range();
  uint64_t v39 = *(void *)(v17 - 8);
  uint64_t v40 = v17;
  uint64_t v18 = MEMORY[0x1895F8858](v17);
  uint64_t v20 = (char *)&v35 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v18);
  char v38 = (char *)&v35 - v21;
  swift_checkMetadataState();
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.endIndex.getter();
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if ((result & 1) != 0)
  {
    uint64_t v23 = TupleTypeMetadata2;
    uint64_t v24 = &v11[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v25 = v37;
    char v26 = *(void (**)(char *, char *, uint64_t))(v37 + 32);
    v26(v11, v16, AssociatedTypeWitness);
    v26(v24, v14, AssociatedTypeWitness);
    uint64_t v27 = v36;
    uint64_t v28 = &v36[*(int *)(v23 + 48)];
    uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v25 + 16);
    v29(v36, v11, AssociatedTypeWitness);
    v29(v28, v24, AssociatedTypeWitness);
    v26(v20, v27, AssociatedTypeWitness);
    uint64_t v30 = *(void (**)(char *, uint64_t))(v25 + 8);
    v30(v28, AssociatedTypeWitness);
    uint64_t v31 = &v27[*(int *)(v23 + 48)];
    v26(v27, v11, AssociatedTypeWitness);
    v26(v31, v24, AssociatedTypeWitness);
    uint64_t v32 = v40;
    v26(&v20[*(int *)(v40 + 36)], v31, AssociatedTypeWitness);
    v30(v27, AssociatedTypeWitness);
    uint64_t v34 = v38;
    uint64_t v33 = v39;
    (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v38, v20, v32);
    (*(void (**)(uint64_t, char *, uint64_t))(v44 + 24))(v45, v34, v43);
    return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v34, v32);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t CollectionConsumer.consume<>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v34 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v33 = (char *)&v28 - v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v9 = swift_getAssociatedTypeWitness();
  uint64_t v32 = AssociatedConformanceWitness;
  uint64_t v36 = swift_getAssociatedConformanceWitness();
  uint64_t v10 = type metadata accessor for PartialRangeFrom();
  uint64_t v30 = *(void *)(v10 - 8);
  uint64_t v31 = v10;
  MEMORY[0x1895F8858](v10);
  uint64_t v29 = (char *)&v28 - v11;
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1895F8858](v12);
  uint64_t v16 = (char *)&v28 - v15;
  uint64_t v17 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](v14);
  uint64_t v19 = (char *)&v28 - v18;
  uint64_t v35 = a1;
  CollectionConsumer.consuming(_:)(a1, a2, a3, (uint64_t)v16);
  int v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v16, 1LL, v9);
  if (v20 == 1)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
    return v20 != 1;
  }

  uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
  v21(v19, v16, v9);
  uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
  if ((result & 1) != 0)
  {
    uint64_t v23 = v29;
    v21(v29, v19, v9);
    uint64_t v24 = v31;
    MEMORY[0x186E17958](MEMORY[0x189619690], v31);
    uint64_t v25 = v33;
    uint64_t v26 = v35;
    Collection.subscript.getter();
    uint64_t v27 = v34;
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v26, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v23, v24);
    (*(void (**)(uint64_t, char *, uint64_t))(v27 + 32))(v26, v25, AssociatedTypeWitness);
    return v20 != 1;
  }

  __break(1u);
  return result;
}

uint64_t RangeReplaceableCollection._trimPrefix<A>(_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v27 = a1;
  uint64_t v28 = a5;
  uint64_t v26 = a3;
  uint64_t v24 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v23 = a2;
  swift_getAssociatedConformanceWitness();
  uint64_t v8 = type metadata accessor for PartialRangeUpTo();
  uint64_t v22 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v8);
  uint64_t v10 = (char *)&v21 - v9;
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x1895F8858](v11);
  uint64_t v15 = (char *)&v21 - v14;
  uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](v13);
  uint64_t v18 = (char *)&v21 - v17;
  uint64_t v25 = v5;
  CollectionConsumer.consuming(_:)(v5, v26, v28, (uint64_t)v15);
  int v20 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
  v20(v18, v15, AssociatedTypeWitness);
  uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
  if ((result & 1) != 0)
  {
    v20(v10, v18, AssociatedTypeWitness);
    MEMORY[0x186E17958](MEMORY[0x1896196A8], v8);
    RangeReplaceableCollection.removeSubrange<A>(_:)();
    return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v10, v8);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t Collection.endOfPrefix(while:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v23 = a5;
  uint64_t v25 = *(void *)(a3 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v24 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1895F8858](v12);
  uint64_t v15 = (char *)&v22 - v14;
  uint64_t v26 = a3;
  uint64_t v27 = a4;
  uint64_t v28 = a1;
  uint64_t v29 = a2;
  uint64_t v16 = v30;
  uint64_t result = Collection.firstIndex(where:)();
  if (!v16)
  {
    uint64_t v22 = v13;
    uint64_t v30 = v12;
    uint64_t v18 = v23;
    uint64_t v19 = v24;
    uint64_t v20 = v25;
    (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v24, v5, a3);
    uint64_t v21 = *(void *)(AssociatedTypeWitness - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v15, 1LL, AssociatedTypeWitness) == 1)
    {
      dispatch thunk of Collection.endIndex.getter();
      (*(void (**)(char *, uint64_t))(v20 + 8))(v19, a3);
      return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v15, v30);
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v20 + 8))(v19, a3);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v21 + 32))(v18, v15, AssociatedTypeWitness);
    }
  }

  return result;
}

uint64_t Collection.trimmingPrefix(while:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v21 = a1;
  uint64_t v22 = a2;
  v20[0] = a5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v20[1] = swift_getAssociatedConformanceWitness();
  uint64_t v9 = type metadata accessor for PartialRangeFrom();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x1895F8858](v9);
  uint64_t v13 = (char *)v20 - v12;
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](v11);
  uint64_t v16 = (char *)v20 - v15;
  uint64_t v17 = v22;
  uint64_t v22 = v5;
  uint64_t v18 = v23;
  uint64_t result = Collection.endOfPrefix(while:)(v21, v17, a3, a4, (uint64_t)v20 - v15);
  if (!v18)
  {
    uint64_t v21 = 0LL;
    uint64_t v23 = v10;
    uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
    if ((result & 1) != 0)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v13, v16, AssociatedTypeWitness);
      MEMORY[0x186E17958](MEMORY[0x189619690], v9);
      Collection.subscript.getter();
      return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v13, v9);
    }

    else
    {
      __break(1u);
    }
  }

  return result;
}

uint64_t Collection<>.trimPrefix(while:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v27 = a1;
  uint64_t v28 = a2;
  uint64_t v25 = *(void *)(a3 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v24 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v9 = type metadata accessor for PartialRangeFrom();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x1895F8858](v9);
  uint64_t v13 = (char *)&v23 - v12;
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](v11);
  uint64_t v16 = (char *)&v23 - v15;
  uint64_t v17 = v29;
  uint64_t result = Collection.endOfPrefix(while:)(v27, v28, a3, a4, (uint64_t)&v23 - v15);
  if (!v17)
  {
    uint64_t v27 = 0LL;
    uint64_t v28 = v10;
    uint64_t v29 = v4;
    uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
    if ((result & 1) != 0)
    {
      uint64_t v19 = v13;
      (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v13, v16, AssociatedTypeWitness);
      MEMORY[0x186E17958](MEMORY[0x189619690], v9);
      uint64_t v20 = v24;
      uint64_t v21 = v29;
      Collection.subscript.getter();
      uint64_t v22 = v25;
      (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v21, a3);
      (*(void (**)(char *, uint64_t))(v28 + 8))(v19, v9);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v22 + 32))(v21, v20, a3);
    }

    else
    {
      __break(1u);
    }
  }

  return result;
}

uint64_t RangeReplaceableCollection.trimPrefix(while:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v51 = a1;
  uint64_t v52 = a2;
  uint64_t v47 = a4;
  uint64_t v6 = *(void *)(a4 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v8 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  unint64_t v49 = (char *)v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v8);
  uint64_t v45 = (char *)v42 - v10;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v44 = type metadata accessor for Range();
  uint64_t v46 = *(void *)(v44 - 8);
  uint64_t v11 = MEMORY[0x1895F8858](v44);
  uint64_t v13 = (char *)v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = MEMORY[0x1895F8858](v11);
  uint64_t v16 = (char *)v42 - v15;
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v18 = MEMORY[0x1895F8858](v14);
  uint64_t v20 = (char *)v42 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v18);
  uint64_t v22 = (char *)v42 - v21;
  uint64_t v23 = v51;
  uint64_t v24 = v52;
  uint64_t v51 = a3;
  uint64_t v52 = v4;
  uint64_t v25 = v53;
  uint64_t result = Collection.endOfPrefix(while:)(v23, v24, a3, v6, (uint64_t)v42 - v21);
  if (!v25)
  {
    v42[0] = v17;
    v42[1] = 0LL;
    uint64_t v43 = v13;
    uint64_t v53 = v16;
    uint64_t v28 = v49;
    uint64_t v27 = TupleTypeMetadata2;
    dispatch thunk of Collection.startIndex.getter();
    uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
    if ((result & 1) != 0)
    {
      uint64_t v29 = v27;
      uint64_t v30 = v45;
      uint64_t v31 = &v45[*(int *)(v27 + 48)];
      uint64_t v32 = v42[0];
      uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v42[0] + 32LL);
      v33(v45, v20, AssociatedTypeWitness);
      uint64_t AssociatedConformanceWitness = (uint64_t)v31;
      v33(v31, v22, AssociatedTypeWitness);
      uint64_t v34 = &v28[*(int *)(v29 + 48)];
      uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v32 + 16);
      v35(v28, v30, AssociatedTypeWitness);
      v35(v34, v31, AssociatedTypeWitness);
      uint64_t v36 = v43;
      v33(v43, v28, AssociatedTypeWitness);
      uint64_t v37 = *(void (**)(char *, uint64_t))(v32 + 8);
      v37(v34, AssociatedTypeWitness);
      char v38 = &v28[*(int *)(v29 + 48)];
      v33(v28, v30, AssociatedTypeWitness);
      v33(v38, (char *)AssociatedConformanceWitness, AssociatedTypeWitness);
      uint64_t v39 = v44;
      v33(&v36[*(int *)(v44 + 36)], v38, AssociatedTypeWitness);
      v37(v28, AssociatedTypeWitness);
      uint64_t v40 = v46;
      uint64_t v41 = v53;
      (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v53, v36, v39);
      dispatch thunk of RangeReplaceableCollection.removeSubrange(_:)();
      return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v41, v39);
    }

    else
    {
      __break(1u);
    }
  }

  return result;
}

void Collection<>.trimmingPrefix<A>(_:)(uint64_t a1)
{
}

uint64_t sub_182D294D4(uint64_t a1)
{
  uint64_t v8 = *(void *)(a1 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v10 = (char *)&v13 - v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v3, v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v10, v5, v2);
  uint64_t v11 = MEMORY[0x186E17958](&protocol conformance descriptor for FixedPatternConsumer<A, B>, a1);
  Collection._trimmingPrefix<A>(_:)((uint64_t)v10, v1, a1, v11, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, a1);
}

void Collection<>.trimPrefix<A>(_:)(uint64_t a1)
{
}

uint64_t sub_182D295E8(uint64_t a1)
{
  uint64_t v7 = *(void *)(a1 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v9 = (char *)&v12 - v8;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v3, v1);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v9, v4, v1);
  uint64_t v10 = MEMORY[0x186E17958](&protocol conformance descriptor for FixedPatternConsumer<A, B>, a1);
  CollectionConsumer.consume<>(_:)(v2, a1, v10);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, a1);
}

void RangeReplaceableCollection<>.trimPrefix<A>(_:)(uint64_t a1)
{
}

uint64_t sub_182D29704(uint64_t a1)
{
  uint64_t v8 = *(void *)(a1 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v10 = (char *)&v13 - v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v4, v3);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v10, v5, v3);
  uint64_t v11 = MEMORY[0x186E17958](&protocol conformance descriptor for FixedPatternConsumer<A, B>, a1);
  RangeReplaceableCollection._trimPrefix<A>(_:)((uint64_t)v10, v2, a1, v1, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, a1);
}

uint64_t BidirectionalCollection<>.trimmingPrefix<A>(_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = v17;
  unint64_t v8 = v18;
  uint64_t v9 = v19;
  uint64_t v10 = v20;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a5 + 16))(&v16, a3, a5);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for Regex(0LL, AssociatedTypeWitness, v12, v13);
  Regex.prefixMatch(in:)(v7, v8, v9, v10, (uint64_t)&v17);
  swift_release();
  if (!v18) {
    return v7;
  }
  unint64_t v14 = v21;
  uint64_t result = outlined consume of Regex<A1.RegexOutput>.Match?<A><A1>(v17, v18);
  if (v8 >> 14 >= v14 >> 14)
  {
    unint64_t v7 = Substring.subscript.getter();
    swift_bridgeObjectRelease();
    return v7;
  }

  __break(1u);
  return result;
}

uint64_t RangeReplaceableCollection<>.trimPrefix<A>(_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v8 = v19;
  unint64_t v9 = v20;
  uint64_t v10 = v21;
  uint64_t v11 = v22;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a6 + 16))(&v18, a3, a6);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for Regex(0LL, AssociatedTypeWitness, v13, v14);
  Regex.prefixMatch(in:)(v8, v9, v10, v11, (uint64_t)&v19);
  swift_bridgeObjectRelease();
  uint64_t result = swift_release();
  uint64_t v16 = v20;
  if (v20)
  {
    uint64_t v17 = v19;
    unint64_t v19 = v22;
    unint64_t v20 = v23;
    dispatch thunk of RangeReplaceableCollection.removeSubrange(_:)();
    return outlined consume of Regex<A1.RegexOutput>.Match?<A><A1>(v17, v16);
  }

  return result;
}

uint64_t FixedPatternConsumer.consuming(_:in:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v69 = a2;
  uint64_t v5 = a1;
  uint64_t v58 = a4;
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v72 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v65 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *(void *)(v8 + 32);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v55 = type metadata accessor for Optional();
  uint64_t v54 = *(void *)(v55 - 8);
  uint64_t v11 = MEMORY[0x1895F8858](v55);
  __int128 v68 = (char *)&v53 - v12;
  uint64_t v70 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v13 = MEMORY[0x1895F8858](v11);
  uint64_t v62 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = MEMORY[0x1895F8858](v13);
  uint64_t v71 = (char *)&v53 - v16;
  uint64_t v17 = MEMORY[0x1895F8858](v15);
  uint64_t v64 = (char *)&v53 - v18;
  uint64_t v19 = *(void *)(a3 + 24);
  int8x16_t v66 = *(char **)(v19 - 8);
  MEMORY[0x1895F8858](v17);
  uint64_t v21 = (char *)&v53 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v63 = a3;
  uint64_t v22 = v9;
  uint64_t v23 = swift_getAssociatedTypeWitness();
  uint64_t v56 = *(void *)(v23 - 8);
  MEMORY[0x1895F8858](v23);
  uint64_t v25 = (char *)&v53 - v24;
  uint64_t v26 = swift_getAssociatedTypeWitness();
  MEMORY[0x1895F8858](v26);
  uint64_t v28 = (char *)&v53 - v27;
  uint64_t v57 = v29;
  uint64_t v30 = *(void (**)(void))(v29 + 16);
  uint64_t v73 = v28;
  v30();
  (*((void (**)(char *, uint64_t, uint64_t))v66 + 2))(v21, v67, v19);
  dispatch thunk of Sequence.makeIterator()();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v32 = v68;
  int8x16_t v66 = v25;
  uint64_t v67 = v23;
  uint64_t v61 = AssociatedConformanceWitness;
  dispatch thunk of IteratorProtocol.next()();
  uint64_t v33 = AssociatedTypeWitness;
  uint64_t v60 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v70 + 48);
  if (v60(v32, 1LL, AssociatedTypeWitness) == 1)
  {
LABEL_6:
    (*(void (**)(char *, uint64_t))(v56 + 8))(v66, v67);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v32, v55);
    uint64_t v50 = v57;
    uint64_t v49 = v58;
    (*(void (**)(uint64_t, char *, uint64_t))(v57 + 32))(v58, v73, v26);
    uint64_t v51 = 0LL;
  }

  else
  {
    __int128 v59 = *(void (**)(char *, char *, uint64_t))(v70 + 32);
    while (1)
    {
      uint64_t v34 = v64;
      uint64_t v35 = v32;
      uint64_t v36 = v5;
      uint64_t v37 = v59;
      v59(v64, v35, v33);
      swift_getAssociatedConformanceWitness();
      type metadata accessor for Range();
      char v38 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v39 = v22;
      uint64_t v40 = v65;
      (*(void (**)(char *, uint64_t, uint64_t))(v72 + 16))(v65, v36, v6);
      v37(v71, v34, v33);
      if ((v38 & 1) != 0) {
        break;
      }
      uint64_t v5 = v36;
      uint64_t v41 = (void (*)(char *, void))dispatch thunk of Collection.subscript.read();
      uint64_t v42 = v33;
      uint64_t v43 = v26;
      uint64_t v44 = v70;
      uint64_t v45 = v71;
      uint64_t v46 = v62;
      (*(void (**)(char *))(v70 + 16))(v62);
      v41(v74, 0LL);
      (*(void (**)(char *, uint64_t))(v72 + 8))(v40, v6);
      char v47 = dispatch thunk of static Equatable.== infix(_:_:)();
      unint64_t v48 = *(void (**)(char *, uint64_t))(v44 + 8);
      uint64_t v26 = v43;
      v48(v46, v42);
      uint64_t v33 = v42;
      v48(v45, v42);
      if ((v47 & 1) == 0) {
        goto LABEL_8;
      }
      dispatch thunk of Collection.formIndex(after:)();
      uint64_t v32 = v68;
      dispatch thunk of IteratorProtocol.next()();
      uint64_t v22 = v39;
      if (v60(v32, 1LL, v42) == 1) {
        goto LABEL_6;
      }
    }

    (*(void (**)(char *, uint64_t))(v70 + 8))(v71, v33);
    (*(void (**)(char *, uint64_t))(v72 + 8))(v40, v6);
LABEL_8:
    (*(void (**)(char *, uint64_t))(v56 + 8))(v66, v67);
    uint64_t v50 = v57;
    (*(void (**)(char *, uint64_t))(v57 + 8))(v73, v26);
    uint64_t v51 = 1LL;
    uint64_t v49 = v58;
  }

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v50 + 56))(v49, v51, 1LL, v26);
}

uint64_t ManyConsumer.consuming(_:in:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v74 = a1;
  uint64_t v54 = a4;
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(a3 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v8 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v70 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v8);
  uint64_t v71 = (char *)&v52 - v10;
  uint64_t v11 = v6;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v13 = type metadata accessor for Range();
  uint64_t v68 = *(void *)(v13 - 8);
  uint64_t v14 = MEMORY[0x1895F8858](v13);
  uint64_t v67 = (char *)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = MEMORY[0x1895F8858](v14);
  int8x16_t v66 = (char *)&v52 - v17;
  uint64_t v18 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v16);
  uint64_t v20 = (char *)&v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v53 = type metadata accessor for Optional();
  uint64_t v52 = *(void *)(v53 - 8);
  uint64_t v21 = MEMORY[0x1895F8858](v53);
  uint64_t v23 = (char *)&v52 - v22;
  uint64_t v24 = MEMORY[0x1895F8858](v21);
  uint64_t v58 = (char *)&v52 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v24);
  uint64_t v27 = (char *)&v52 - v26;
  uint64_t v76 = v28;
  uint64_t v64 = *(void (**)(char *, uint64_t, uint64_t))(v28 + 16);
  v64((char *)&v52 - v26, a2, AssociatedTypeWitness);
  uint64_t v69 = v13;
  uint64_t v29 = a2 + *(int *)(v13 + 36);
  uint64_t v73 = v5;
  uint64_t v63 = *(void (**)(uint64_t, char *, uint64_t, uint64_t))(v5 + 24);
  uint64_t v30 = v29;
  uint64_t v65 = v18;
  uint64_t v56 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  v56(v20, v75, v11);
  if ((dispatch thunk of static Comparable.<= infix(_:_:)() & 1) != 0)
  {
    uint64_t v57 = AssociatedConformanceWitness;
    uint64_t v60 = v11;
    uint64_t v61 = v20;
    uint64_t v55 = v30;
    uint64_t v62 = v27;
    __int128 v59 = v23;
    while (1)
    {
      uint64_t v31 = v71;
      uint64_t v32 = TupleTypeMetadata2;
      uint64_t v33 = &v71[*(int *)(TupleTypeMetadata2 + 48)];
      uint64_t v34 = v64;
      v64(v71, (uint64_t)v27, AssociatedTypeWitness);
      v34(v33, v30, AssociatedTypeWitness);
      uint64_t v35 = v70;
      uint64_t v36 = &v70[*(int *)(v32 + 48)];
      v34(v70, (uint64_t)v31, AssociatedTypeWitness);
      v34(v36, (uint64_t)v33, AssociatedTypeWitness);
      uint64_t v37 = v76;
      uint64_t v18 = *(void *)(v76 + 32);
      char v38 = v67;
      ((void (*)(char *, char *, uint64_t))v18)(v67, v35, AssociatedTypeWitness);
      uint64_t v39 = *(void (**)(char *, uint64_t))(v37 + 8);
      v39(v36, AssociatedTypeWitness);
      uint64_t v40 = *(int *)(v32 + 48);
      uint64_t v23 = v59;
      uint64_t v41 = &v35[v40];
      ((void (*)(char *, char *, uint64_t))v18)(v35, v31, AssociatedTypeWitness);
      ((void (*)(char *, char *, uint64_t))v18)(v41, v33, AssociatedTypeWitness);
      uint64_t v42 = v69;
      uint64_t v43 = v41;
      uint64_t v44 = v60;
      ((void (*)(char *, char *, uint64_t))v18)(&v38[*(int *)(v69 + 36)], v43, AssociatedTypeWitness);
      v39(v35, AssociatedTypeWitness);
      uint64_t v45 = v68;
      uint64_t v46 = v66;
      char v47 = v38;
      unint64_t v48 = v61;
      (*(void (**)(char *, char *, uint64_t))(v68 + 32))(v66, v47, v42);
      v63(v74, v46, v44, v73);
      (*(void (**)(char *, uint64_t))(v45 + 8))(v46, v42);
      (*(void (**)(char *, uint64_t))(v65 + 8))(v48, v44);
      uint64_t v49 = v58;
      ((void (*)(char *, char *, uint64_t))v18)(v58, v23, AssociatedTypeWitness);
      uint64_t v27 = v62;
      if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
      {
        v39(v49, AssociatedTypeWitness);
        goto LABEL_9;
      }

      v39(v27, AssociatedTypeWitness);
      ((void (*)(char *, char *, uint64_t))v18)(v27, v49, AssociatedTypeWitness);
      v56(v48, v75, v44);
      uint64_t v30 = v55;
      if ((dispatch thunk of static Comparable.<= infix(_:_:)() & 1) == 0) {
        goto LABEL_6;
      }
    }
  }

  else
  {
LABEL_6:
    __break(1u);
  }

  (*(void (**)(char *, uint64_t))(v52 + 8))(v23, v53);
  uint64_t v27 = v62;
LABEL_9:
  uint64_t v50 = v54;
  ((void (*)(uint64_t, char *, uint64_t))v18)(v54, v27, AssociatedTypeWitness);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v76 + 56))(v50, 0LL, 1LL, AssociatedTypeWitness);
}

uint64_t PredicateConsumer.consuming(_:in:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(char *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v40 = a4;
  uint64_t v41 = a3;
  uint64_t v44 = a7;
  uint64_t v45 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v38 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v39 = AssociatedTypeWitness;
  uint64_t v11 = MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v37 = (char *)&v36 - v12;
  uint64_t v13 = *(void *)(a5 - 8);
  MEMORY[0x1895F8858](v11);
  uint64_t v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = swift_getAssociatedTypeWitness();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = MEMORY[0x1895F8858](v16);
  uint64_t v20 = (char *)&v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v18);
  uint64_t v22 = (char *)&v36 - v21;
  uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v23((char *)&v36 - v21, a2, v16);
  uint64_t v42 = a6;
  swift_getAssociatedConformanceWitness();
  type metadata accessor for Range();
  LOBYTE(a2) = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v43 = v13;
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  uint64_t v25 = v15;
  v24(v15, v45, a5);
  v23(v20, (uint64_t)v22, v16);
  if ((a2 & 1) != 0)
  {
    uint64_t v26 = *(void (**)(char *, uint64_t))(v17 + 8);
    v26(v20, v16);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v15, a5);
    uint64_t v27 = 1LL;
    uint64_t v28 = v44;
  }

  else
  {
    uint64_t v29 = (void (*)(char *, void))dispatch thunk of Collection.subscript.read();
    uint64_t v30 = v17;
    uint64_t v32 = v37;
    uint64_t v31 = v38;
    uint64_t v33 = v39;
    (*(void (**)(char *))(v38 + 16))(v37);
    v29(v46, 0LL);
    uint64_t v36 = v30;
    uint64_t v26 = *(void (**)(char *, uint64_t))(v30 + 8);
    v26(v20, v16);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v25, a5);
    char v34 = v41(v32);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v32, v33);
    if ((v34 & 1) != 0)
    {
      uint64_t v28 = v44;
      dispatch thunk of Collection.index(after:)();
      uint64_t v27 = 0LL;
    }

    else
    {
      uint64_t v27 = 1LL;
      uint64_t v28 = v44;
    }

    uint64_t v17 = v36;
  }

  v26(v22, v16);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(v28, v27, 1LL, v16);
}

uint64_t protocol witness for CollectionConsumer.consuming(_:in:) in conformance PredicateConsumer<A>@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return PredicateConsumer.consuming(_:in:)( a1,  a2,  *(uint64_t (**)(char *))v4,  *(void *)(v4 + 8),  *(void *)(a3 + 16),  *(void *)(a3 + 24),  a4);
}

uint64_t protocol witness for StatelessCollectionSearcher.search(_:in:) in conformance PredicateConsumer<A>@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return PredicateConsumer.search(_:in:)(a1, a2, *v4, v4[1], *(void *)(a3 + 24), a4);
}

uint64_t protocol witness for CollectionSearcher.state(for:in:) in conformance PredicateConsumer<A>@<X0>( uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return StatelessCollectionSearcher.state(for:in:)(a1, a3);
}

uint64_t StatelessCollectionSearcher.state(for:in:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v6 = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  uint64_t v9 = (char *)&v18 - v8;
  uint64_t v11 = type metadata accessor for DefaultSearcherState.Position( 0LL,  AssociatedTypeWitness,  AssociatedConformanceWitness,  v10);
  MEMORY[0x1895F8858](v11);
  uint64_t v13 = (char *)&v18 - v12;
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v14((char *)&v18 - v12, a1, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v13, 0LL, 1LL, v6);
  swift_getAssociatedConformanceWitness();
  uint64_t v15 = type metadata accessor for Range();
  v14(v9, a1 + *(int *)(v15 + 36), v6);
  uint64_t v16 = swift_checkMetadataState();
  return DefaultSearcherState.init(position:end:)((uint64_t)v13, (uint64_t)v9, v16, AssociatedConformanceWitness, a2);
}

uint64_t protocol witness for CollectionSearcher.search(_:_:) in conformance PredicateConsumer<A>@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v8 = MEMORY[0x186E17958](&protocol conformance descriptor for PredicateConsumer<A>, a3);
  return StatelessCollectionSearcher.search(_:_:)(a1, a2, a3, v8, a4);
}

uint64_t StatelessCollectionSearcher.search(_:_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v83 = a4;
  uint64_t v89 = a2;
  uint64_t v84 = a1;
  uint64_t v87 = a5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v82 = a3;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v8 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v9 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v11 = (char *)v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v9);
  uint64_t v79 = (char *)v68 - v12;
  uint64_t v85 = swift_getAssociatedConformanceWitness();
  uint64_t v13 = type metadata accessor for Range();
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v74 = *(void *)(v14 - 8);
  uint64_t v75 = v14;
  uint64_t v15 = MEMORY[0x1895F8858](v14);
  uint64_t v81 = (char *)v68 - v16;
  uint64_t v88 = v13;
  uint64_t v86 = *(void *)(v13 - 8);
  uint64_t v17 = MEMORY[0x1895F8858](v15);
  uint64_t v77 = (char *)v68 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = MEMORY[0x1895F8858](v17);
  uint64_t v78 = (char *)v68 - v20;
  MEMORY[0x1895F8858](v19);
  uint64_t v76 = (char *)v68 - v21;
  uint64_t v23 = type metadata accessor for DefaultSearcherState.Position( 0LL,  AssociatedTypeWitness,  AssociatedConformanceWitness,  v22);
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = MEMORY[0x1895F8858](v23);
  uint64_t v72 = (char *)v68 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = MEMORY[0x1895F8858](v25);
  uint64_t v29 = (char *)v68 - v28;
  uint64_t v30 = *(void *)(v8 - 8);
  uint64_t v31 = MEMORY[0x1895F8858](v27);
  uint64_t v73 = (char *)v68 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v31);
  char v34 = (char *)v68 - v33;
  uint64_t v35 = v89;
  (*(void (**)(char *))(v24 + 16))(v29);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v29, 1LL, v8) == 1)
  {
    (*(void (**)(char *, uint64_t))(v24 + 8))(v29, v23);
    uint64_t v36 = 1LL;
    uint64_t v38 = v86;
    uint64_t v37 = v87;
    uint64_t v39 = v88;
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v38 + 56))(v37, v36, 1LL, v39);
  }

  uint64_t v70 = v24;
  uint64_t v71 = v23;
  uint64_t v40 = *(void (**)(char *, char *, uint64_t))(v30 + 32);
  v40(v34, v29, v8);
  v68[1] = AssociatedTypeWitness;
  v68[2] = AssociatedConformanceWitness;
  uint64_t v42 = v35
      + *(int *)(type metadata accessor for DefaultSearcherState( 0LL,  AssociatedTypeWitness,  AssociatedConformanceWitness,  v41)
               + 36);
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if ((result & 1) != 0)
  {
    uint64_t v44 = v30;
    uint64_t v46 = v79;
    uint64_t v45 = TupleTypeMetadata2;
    char v47 = &v79[*(int *)(TupleTypeMetadata2 + 48)];
    v40(v79, v34, v8);
    unint64_t v48 = *(void (**)(char *, uint64_t, uint64_t))(v44 + 16);
    v48(v47, v42, v8);
    uint64_t v49 = &v11[*(int *)(v45 + 48)];
    v48(v11, (uint64_t)v46, v8);
    v68[0] = v48;
    v48(v49, (uint64_t)v47, v8);
    uint64_t v50 = v44;
    uint64_t v51 = v77;
    v40(v77, v11, v8);
    uint64_t v69 = v50;
    uint64_t v52 = *(void (**)(char *, uint64_t))(v50 + 8);
    v52(v49, v8);
    uint64_t v53 = &v11[*(int *)(v45 + 48)];
    v40(v11, v46, v8);
    v40(v53, v47, v8);
    uint64_t v39 = v88;
    v40(&v51[*(int *)(v88 + 36)], v53, v8);
    v52(v11, v8);
    uint64_t v38 = v86;
    uint64_t v54 = *(void (**)(char *, char *, uint64_t))(v86 + 32);
    uint64_t v55 = v78;
    v54(v78, v51, v39);
    uint64_t v56 = v81;
    (*(void (**)(uint64_t, char *, uint64_t))(v83 + 16))(v84, v55, v82);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v55, v39);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v56, 1LL, v39) == 1)
    {
      (*(void (**)(char *, uint64_t))(v74 + 8))(v56, v75);
      uint64_t v36 = 1LL;
      uint64_t v37 = v87;
    }

    else
    {
      uint64_t v57 = v76;
      v54(v76, v56, v39);
      char v58 = Range.isEmpty.getter();
      uint64_t v37 = v87;
      if ((v58 & 1) != 0)
      {
        uint64_t v59 = (uint64_t)&v57[*(int *)(v39 + 36)];
        uint64_t v60 = v73;
        dispatch thunk of Collection.endIndex.getter();
        uint64_t v85 = v59;
        char v61 = dispatch thunk of static Equatable.== infix(_:_:)();
        v52(v60, v8);
        uint64_t v62 = v69;
        if ((v61 & 1) != 0)
        {
          uint64_t v63 = v89;
          (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v89, v71);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v62 + 56))(v63, 1LL, 1LL, v8);
        }

        else
        {
          uint64_t v67 = v72;
          dispatch thunk of Collection.index(after:)();
          (*(void (**)(char *, void, uint64_t, uint64_t))(v62 + 56))(v67, 0LL, 1LL, v8);
          (*(void (**)(uint64_t, char *, uint64_t))(v70 + 40))(v89, v67, v71);
        }

        int8x16_t v66 = v76;
        uint64_t v64 = v88;
      }

      else
      {
        uint64_t v64 = v39;
        uint64_t v65 = v89;
        (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v89, v71);
        ((void (*)(uint64_t, char *, uint64_t))v68[0])(v65, &v57[*(int *)(v64 + 36)], v8);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v69 + 56))(v65, 0LL, 1LL, v8);
        int8x16_t v66 = v57;
      }

      v54(v37, v66, v64);
      uint64_t v36 = 0LL;
      uint64_t v39 = v64;
    }

    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v38 + 56))(v37, v36, 1LL, v39);
  }

  __break(1u);
  return result;
}

uint64_t protocol witness for BackwardCollectionSearcher.backwardState(for:in:) in conformance <> PredicateConsumer<A>@<X0>( uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = *(void *)(a3 - 8);
  MEMORY[0x186E17958](&protocol conformance descriptor for <> PredicateConsumer<A>, a2, &v7);
  return BackwardStatelessCollectionSearcher.backwardState(for:in:)(a1, a4);
}

uint64_t BackwardStatelessCollectionSearcher.backwardState(for:in:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t v6 = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  uint64_t v9 = (char *)&v18 - v8;
  uint64_t v11 = type metadata accessor for DefaultSearcherState.Position(0LL, AssociatedTypeWitness, v5, v10);
  MEMORY[0x1895F8858](v11);
  uint64_t v13 = (char *)&v18 - v12;
  swift_getAssociatedConformanceWitness();
  uint64_t v14 = type metadata accessor for Range();
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v15(v13, a1 + *(int *)(v14 + 36), v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v13, 0LL, 1LL, v6);
  v15(v9, a1, v6);
  uint64_t v16 = swift_checkMetadataState();
  return DefaultSearcherState.init(position:end:)((uint64_t)v13, (uint64_t)v9, v16, v5, a2);
}

uint64_t _MatchResult.init(match:result:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32LL))( a5,  a1,  AssociatedTypeWitness);
  uint64_t v12 = a5 + *(int *)(type metadata accessor for _MatchResult(0LL, a3, a4, v11) + 36);
  uint64_t v13 = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32LL))(v12, a2, v13);
}

uint64_t _BackwardMatchResult.init(match:result:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32LL))( a5,  a1,  AssociatedTypeWitness);
  uint64_t v12 = a5 + *(int *)(type metadata accessor for _BackwardMatchResult(0LL, a3, a4, v11) + 36);
  uint64_t v13 = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32LL))(v12, a2, v13);
}

void *BidirectionalCollection<>.firstMatch<A, B>(of:)@<X0>( uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X5>, _OWORD *a4@<X8>)
{
  unint64_t v8 = v16;
  unint64_t v9 = v17;
  unint64_t v11 = v18;
  uint64_t v10 = v19;
  uint64_t result = (*(void *(**)(unint64_t *__return_ptr, uint64_t, uint64_t))(a3 + 16))(&v15, a2, a3);
  unint64_t v16 = v15;
  if (v9 >> 14 < v8 >> 14)
  {
    __break(1u);
  }

  else
  {
    type metadata accessor for Regex(0LL, a1, v13, v14);
    Regex._firstMatch(_:in:)(v11, v10, v8, v9, a4);
    swift_bridgeObjectRelease();
    return (void *)swift_release();
  }

  return result;
}

uint64_t RangeReplaceableCollection<>.replacing<A, B, C>(_:subrange:maxReplacements:with:)@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, void (*a3)(__int128 *)@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v52 = a3;
  uint64_t v53 = a4;
  uint64_t v50 = a7;
  uint64_t result = MEMORY[0x1895F8858](a1);
  uint64_t v20 = (char *)v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (v17 < 0)
  {
LABEL_15:
    __break(1u);
    return result;
  }

  uint64_t v51 = v20;
  uint64_t v60 = a11;
  uint64_t v49 = a8;
  uint64_t v48 = result;
  uint64_t v69 = v17;
  uint64_t v47 = v18;
  uint64_t v59 = v16;
  dispatch thunk of RangeReplaceableCollection.init()();
  *(void *)&__int128 v66 = a2;
  swift_getCanonicalSpecializedMetadata();
  uint64_t v21 = *(void *)(a9 + 8);
  lazy protocol witness table accessor for type PartialRangeUpTo<String.Index> and conformance PartialRangeUpTo<A>( &lazy protocol witness table cache variable for type PartialRangeUpTo<String.Index> and conformance PartialRangeUpTo<A>,  (uint64_t)&unk_189C49AA0,  (uint64_t)&cache variable for noncanonical specialized generic type metadata for PartialRangeUpTo<String.Index>,  MEMORY[0x1896196A8]);
  Collection.subscript.getter();
  __int128 v66 = v62;
  uint64_t v67 = v63;
  uint64_t v68 = v64;
  unint64_t v22 = lazy protocol witness table accessor for type Substring and conformance Substring();
  uint64_t v23 = MEMORY[0x189618C50];
  uint64_t v55 = a6;
  unint64_t v56 = v22;
  uint64_t v54 = a9;
  dispatch thunk of RangeReplaceableCollection.append<A>(contentsOf:)();
  *(void *)&__int128 v66 = a2;
  *((void *)&v66 + 1) = v59;
  uint64_t v58 = v11;
  uint64_t v59 = a5;
  uint64_t v57 = v21;
  dispatch thunk of Collection.subscript.getter();
  __int128 v66 = v62;
  uint64_t v67 = v63;
  uint64_t v68 = v64;
  unint64_t v24 = lazy protocol witness table accessor for type Substring and conformance Substring();
  uint64_t v25 = v47;
  uint64_t v26 = BidirectionalCollection<>.matches<A, B>(of:)(v48, v23, v47, v49, v24, v60);
  swift_bridgeObjectRelease();
  *(void *)&__int128 v66 = v26;
  uint64_t v29 = type metadata accessor for Regex.Match(255LL, v25, v27, v28);
  uint64_t v30 = type metadata accessor for Array();
  MEMORY[0x186E17958](MEMORY[0x189618488], v30);
  Collection.prefix(_:)();
  __int128 v31 = v62;
  uint64_t v33 = v63;
  unint64_t v32 = v64;
  uint64_t v34 = ArraySlice.startIndex.getter();
  if (v34 != ArraySlice.endIndex.getter())
  {
    v43[0] = a10;
    uint64_t v48 = v32 >> 1;
    uint64_t v35 = (uint64_t *)(*((void *)&v31 + 1) + 40 * v34 + 16);
    uint64_t v49 = v34;
    uint64_t v47 = v31;
    uint64_t v46 = v29;
    uint64_t v45 = *((void *)&v31 + 1);
    uint64_t v44 = v33;
    v43[1] = v32;
    while (1)
    {
      uint64_t result = ArraySlice._hoistableIsNativeTypeChecked()();
      if (v49 < v33 || v48 <= v34) {
        break;
      }
      unint64_t v36 = v35[1];
      if (v36 >> 14 < a2 >> 14) {
        goto LABEL_14;
      }
      uint64_t v37 = *(v35 - 1);
      uint64_t v38 = *v35;
      uint64_t v69 = v35[2];
      uint64_t v39 = v55;
      uint64_t v60 = *(v35 - 2);
      *(void *)&__int128 v66 = a2;
      *((void *)&v66 + 1) = v36;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v40 = v59;
      dispatch thunk of Collection.subscript.getter();
      __int128 v66 = v62;
      uint64_t v67 = v63;
      uint64_t v68 = v64;
      dispatch thunk of RangeReplaceableCollection.append<A>(contentsOf:)();
      uint64_t v41 = v61;
      *(void *)&__int128 v62 = v60;
      *((void *)&v62 + 1) = v37;
      uint64_t v63 = v38;
      uint64_t v64 = v36;
      uint64_t v65 = v69;
      v52(&v62);
      if (v41)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v40 - 8) + 8LL))(v39, v40);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return swift_unknownObjectRelease();
      }

      uint64_t v61 = 0LL;
      ++v34;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      dispatch thunk of RangeReplaceableCollection.append<A>(contentsOf:)();
      uint64_t v33 = v44;
      uint64_t v42 = ArraySlice.endIndex.getter();
      v35 += 5;
      a2 = v69;
      if (v34 == v42) {
        goto LABEL_10;
      }
    }

    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v69 = a2;
LABEL_10:
  swift_unknownObjectRelease();
  *(void *)&__int128 v66 = v69;
  swift_getCanonicalSpecializedMetadata();
  lazy protocol witness table accessor for type PartialRangeUpTo<String.Index> and conformance PartialRangeUpTo<A>( &lazy protocol witness table cache variable for type PartialRangeFrom<String.Index> and conformance PartialRangeFrom<A>,  (uint64_t)&unk_189C49A60,  (uint64_t)&cache variable for noncanonical specialized generic type metadata for PartialRangeFrom<String.Index>,  MEMORY[0x189619690]);
  Collection.subscript.getter();
  __int128 v66 = v62;
  uint64_t v67 = v63;
  uint64_t v68 = v64;
  return dispatch thunk of RangeReplaceableCollection.append<A>(contentsOf:)();
}

uint64_t BidirectionalCollection<>.matches<A, B>(of:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = Array.init()();
  uint64_t v38 = v9;
  BidirectionalCollection<>._matches<A>(of:)(a4, a6, (int8x16_t *)&v30);
  uint64_t v10 = v33;
  uint64_t v11 = v34;
  uint64_t v14 = type metadata accessor for RegexMatchesCollection(0LL, a3, v12, v13);
  RegexMatchesCollection.makeIterator()(v14, (uint64_t)v35);
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of Regex<A1.RegexOutput>.Match?<A><A1>(v10, v11);
  uint64_t v17 = type metadata accessor for RegexMatchesCollection.Iterator(0LL, a3, v15, v16);
  RegexMatchesCollection.Iterator.next()(v17, v18, v19, &v30);
  if ((void)v31)
  {
    unint64_t v20 = v30;
    __int128 v28 = v32;
    __int128 v29 = v31;
    type metadata accessor for Array();
    __int128 v22 = v28;
    __int128 v21 = v29;
    do
    {
      unint64_t v30 = v20;
      __int128 v31 = v21;
      __int128 v32 = v22;
      Array.append(_:)();
      RegexMatchesCollection.Iterator.next()(v17, v23, v24, &v30);
      unint64_t v20 = v30;
      __int128 v21 = v31;
      __int128 v22 = v32;
    }

    while ((void)v31);
    uint64_t v9 = v38;
  }

  uint64_t v25 = v36;
  uint64_t v26 = v37;
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of Regex<A1.RegexOutput>.Match?<A><A1>(v25, v26);
  return v9;
}

uint64_t RangeReplaceableCollection<>.replacing<A, B, C>(_:maxReplacements:with:)@<X0>( uint64_t a1@<X0>, void (*a2)(__int128 *)@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result = dispatch thunk of Collection.endIndex.getter();
  if (v18 >> 14 >= v19 >> 14) {
    return RangeReplaceableCollection<>.replacing<A, B, C>(_:subrange:maxReplacements:with:)( a1,  v19,  a2,  a3,  a4,  a7,  a5,  a6,  a8,  a9,  a10);
  }
  __break(1u);
  return result;
}

uint64_t RangeReplaceableCollection<>.replace<A, B, C>(_:maxReplacements:with:)( uint64_t a1, uint64_t a2, void (*a3)(__int128 *), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v24 = a6;
  v21[0] = a8;
  v21[1] = a2;
  __int128 v22 = a3;
  uint64_t v23 = a4;
  uint64_t v15 = *(void *)(a5 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v17 = (char *)v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  dispatch thunk of Collection.startIndex.getter();
  unint64_t v18 = v27;
  uint64_t result = dispatch thunk of Collection.endIndex.getter();
  if (v26 >> 14 < v18 >> 14)
  {
    __break(1u);
  }

  else
  {
    uint64_t v20 = v25;
    uint64_t result = RangeReplaceableCollection<>.replacing<A, B, C>(_:subrange:maxReplacements:with:)( a1,  v18,  v22,  v23,  a5,  (uint64_t)v17,  a7,  v21[0],  a9,  a10,  a11);
    if (!v20)
    {
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v11, a5);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v15 + 32))(v11, v17, a5);
    }
  }

  return result;
}

uint64_t MatchesCollection.Index.init(match:state:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL))(a5, a1, v9);
  uint64_t v11 = a5 + *(int *)(type metadata accessor for MatchesCollection.Index(0LL, a3, a4, v10) + 36);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32LL))( v11,  a2,  AssociatedTypeWitness);
}

uint64_t MatchesCollection.endIndex.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v78 = a1;
  uint64_t v73 = a2;
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v80 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(v80 + 8);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v5 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v7 = (char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = MEMORY[0x1895F8858](v5);
  __int128 v66 = (char *)&v58 - v9;
  uint64_t v67 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = MEMORY[0x1895F8858](v8);
  uint64_t v74 = (char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v10);
  uint64_t v76 = (char *)&v58 - v12;
  uint64_t v77 = swift_getAssociatedConformanceWitness();
  uint64_t v13 = type metadata accessor for Range();
  uint64_t v69 = *(void *)(v13 - 8);
  uint64_t v14 = MEMORY[0x1895F8858](v13);
  uint64_t v65 = (char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v14);
  uint64_t v68 = (char *)&v58 - v16;
  uint64_t v17 = swift_checkMetadataState();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = MEMORY[0x1895F8858](v17);
  __int128 v21 = (char *)&v58 - v20;
  uint64_t v22 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v19);
  uint64_t v24 = (char *)&v58 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v72 = v3;
  uint64_t v25 = swift_getAssociatedTypeWitness();
  MEMORY[0x1895F8858](v25);
  uint64_t v60 = (char *)&v58 - v26;
  swift_getAssociatedTypeWitness();
  uint64_t v70 = v13;
  uint64_t v27 = swift_getTupleTypeMetadata2();
  uint64_t v28 = type metadata accessor for Optional();
  MEMORY[0x1895F8858](v28);
  unint64_t v30 = (char *)&v58 - v29;
  __int128 v31 = *(void (**)(void))(*(void *)(v27 - 8) + 56LL);
  uint64_t v59 = v30;
  v31();
  uint64_t v32 = v79;
  uint64_t v33 = v79 + *(int *)(v78 + 36);
  uint64_t v63 = v22;
  uint64_t v64 = v2;
  uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
  uint64_t v61 = v24;
  uint64_t v35 = v2;
  uint64_t v36 = v74;
  v34(v24, v33, v35);
  uint64_t v78 = v18;
  uint64_t v37 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  __int128 v62 = v21;
  v37(v21, v32, v17);
  uint64_t v38 = v76;
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v39 = v38;
  dispatch thunk of Collection.endIndex.getter();
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if ((result & 1) != 0)
  {
    uint64_t v41 = TupleTypeMetadata2;
    uint64_t v42 = v67;
    uint64_t v43 = &v66[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v79 = v17;
    uint64_t v44 = v66;
    uint64_t v45 = *(void (**)(char *, char *, uint64_t))(v67 + 32);
    v45(v66, v39, AssociatedTypeWitness);
    v45(v43, v36, AssociatedTypeWitness);
    uint64_t v46 = &v7[*(int *)(v41 + 48)];
    uint64_t v47 = *(void (**)(char *, char *, uint64_t))(v42 + 16);
    v47(v7, v44, AssociatedTypeWitness);
    v47(v46, v43, AssociatedTypeWitness);
    uint64_t v48 = v65;
    v45(v65, v7, AssociatedTypeWitness);
    uint64_t v49 = *(void (**)(char *, uint64_t))(v42 + 8);
    v49(v46, AssociatedTypeWitness);
    uint64_t v50 = &v7[*(int *)(v41 + 48)];
    v45(v7, v44, AssociatedTypeWitness);
    v45(v50, v43, AssociatedTypeWitness);
    uint64_t v51 = v70;
    v45(&v48[*(int *)(v70 + 36)], v50, AssociatedTypeWitness);
    v49(v7, AssociatedTypeWitness);
    uint64_t v53 = v68;
    uint64_t v52 = v69;
    (*(void (**)(char *, char *, uint64_t))(v69 + 32))(v68, v48, v51);
    uint64_t v55 = (uint64_t)v60;
    uint64_t v54 = v61;
    unint64_t v56 = v62;
    uint64_t v57 = v64;
    (*(void (**)(char *, char *, uint64_t))(v72 + 32))(v62, v53, v64);
    (*(void (**)(char *, uint64_t))(v52 + 8))(v53, v51);
    (*(void (**)(char *, uint64_t))(v78 + 8))(v56, v79);
    (*(void (**)(char *, uint64_t))(v63 + 8))(v54, v57);
    return MatchesCollection.Index.init(match:state:)((uint64_t)v59, v55, v57, v80, v73);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t MatchesIterator.init(base:searcher:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v64 = a4;
  uint64_t v65 = a2;
  uint64_t v66 = a5;
  uint64_t v7 = *(void *)(a4 + 8);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v9 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = MEMORY[0x1895F8858](v9);
  uint64_t v58 = (char *)&v48 - v13;
  uint64_t v55 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v14 = MEMORY[0x1895F8858](v12);
  uint64_t v16 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v14);
  uint64_t v18 = (char *)&v48 - v17;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v19 = type metadata accessor for Range();
  uint64_t v60 = *(void *)(v19 - 8);
  uint64_t v61 = v19;
  uint64_t v20 = MEMORY[0x1895F8858](v19);
  uint64_t v54 = (char *)&v48 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v20);
  uint64_t v52 = (char *)&v48 - v22;
  uint64_t v62 = v7;
  uint64_t v23 = swift_getAssociatedTypeWitness();
  uint64_t v57 = *(void *)(v23 - 8);
  MEMORY[0x1895F8858](v23);
  unint64_t v56 = (char *)&v48 - v24;
  uint64_t v25 = swift_checkMetadataState();
  uint64_t v53 = *(void *)(v25 - 8);
  uint64_t v26 = v66;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v53 + 16))(v66, a1, v25);
  uint64_t v51 = type metadata accessor for MatchesIterator(0LL, a3, v64, v27);
  uint64_t v28 = v26 + *(int *)(v51 + 36);
  uint64_t v29 = *(void *)(a3 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16))(v28, v65, a3);
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v64 = a1;
  dispatch thunk of Collection.endIndex.getter();
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if ((result & 1) != 0)
  {
    uint64_t v49 = a3;
    uint64_t v50 = v25;
    uint64_t v32 = v58;
    uint64_t v31 = TupleTypeMetadata2;
    uint64_t v33 = &v58[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t AssociatedConformanceWitness = v23;
    uint64_t v34 = v55;
    uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v55 + 32);
    v35(v58, v18, AssociatedTypeWitness);
    v35(v33, v16, AssociatedTypeWitness);
    uint64_t v36 = &v11[*(int *)(v31 + 48)];
    uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v34 + 16);
    v37(v11, v32, AssociatedTypeWitness);
    v37(v36, v33, AssociatedTypeWitness);
    uint64_t v48 = v29;
    uint64_t v38 = v54;
    v35(v54, v11, AssociatedTypeWitness);
    uint64_t v39 = *(void (**)(char *, uint64_t))(v34 + 8);
    v39(v36, AssociatedTypeWitness);
    uint64_t v40 = &v11[*(int *)(v31 + 48)];
    v35(v11, v32, AssociatedTypeWitness);
    v35(v40, v33, AssociatedTypeWitness);
    uint64_t v41 = v61;
    v35(&v38[*(int *)(v61 + 36)], v40, AssociatedTypeWitness);
    v39(v11, AssociatedTypeWitness);
    uint64_t v42 = v60;
    uint64_t v43 = v52;
    (*(void (**)(char *, char *, uint64_t))(v60 + 32))(v52, v38, v41);
    uint64_t v44 = v56;
    uint64_t v45 = v64;
    uint64_t v46 = v65;
    uint64_t v47 = v49;
    (*(void (**)(uint64_t, char *, uint64_t))(v62 + 32))(v64, v43, v49);
    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v46, v47);
    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v45, v50);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v43, v41);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v57 + 32))( v66 + *(int *)(v51 + 40),  v44,  AssociatedConformanceWitness);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t MatchesIterator.next()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for Range();
  swift_getAssociatedTypeWitness();
  swift_getTupleTypeMetadata2();
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v8);
  uint64_t v11 = &v16[-v10];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 24))(v3, v3 + *(int *)(a1 + 40), v7, v6);
  uint64_t v22 = v7;
  uint64_t v23 = v6;
  uint64_t v24 = v3;
  uint64_t v17 = v7;
  uint64_t v18 = v6;
  uint64_t v19 = partial apply for closure #1 in MatchesIterator.next();
  uint64_t v20 = &v21;
  uint64_t matched = type metadata accessor for _MatchResult(0LL, v7, v6, v12);
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF( (void (*)(char *, char *))partial apply for thunk for @callee_guaranteed (@in_guaranteed Range<A.CollectionSearcher.Searched.Collection.Index>, @in_guaranteed A.MatchingCollectionSearcher.Match) -> (@out _MatchResult<A>),  (uint64_t)v16,  MEMORY[0x18961A520],  matched,  v14,  a2);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t closure #1 in MatchesIterator.next()@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  v20[0] = a3;
  v20[1] = a1;
  uint64_t v21 = a2;
  uint64_t v22 = a6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v11 = (char *)v20 - v10;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v12 = swift_getAssociatedTypeWitness();
  MEMORY[0x1895F8858](v12);
  uint64_t v14 = (char *)v20 - v13;
  uint64_t v15 = swift_checkMetadataState();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1895F8858](v15);
  uint64_t v18 = (char *)v20 - v17;
  (*(void (**)(char *, void, uint64_t))(v16 + 16))((char *)v20 - v17, v20[0], v15);
  dispatch thunk of Collection.subscript.getter();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v21, AssociatedTypeWitness);
  return _MatchResult.init(match:result:)((uint64_t)v14, (uint64_t)v11, a4, a5, v22);
}

uint64_t thunk for @callee_guaranteed (@in_guaranteed Range<A.CollectionSearcher.Searched.Collection.Index>, @in_guaranteed A.MatchingCollectionSearcher.Match) -> (@out _MatchResult<A>)( uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return a2(a1, a1 + *(int *)(TupleTypeMetadata2 + 48));
}

uint64_t protocol witness for Sequence.makeIterator() in conformance MatchesCollection<A>( uint64_t a1, uint64_t a2)
{
  return protocol witness for Sequence.makeIterator() in conformance ReversedMatchesCollection<A>( a1,  a2,  (uint64_t)&protocol requirements base descriptor for CollectionSearcher,  (uint64_t)&associated type descriptor for CollectionSearcher.Searched,  (uint64_t (*)(char *, char *, uint64_t, uint64_t))MatchesIterator.init(base:searcher:));
}

uint64_t protocol witness for Sequence.makeIterator() in conformance ReversedMatchesCollection<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(char *, char *, uint64_t, uint64_t))
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8LL))(v5, a1);
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance MatchesCollection<A>( uint64_t a1)
{
  return Collection.underestimatedCount.getter();
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance MatchesCollection<A>( uint64_t a1)
{
  return Collection._copyToContiguousArray()();
}

uint64_t MatchesCollection.formIndex(after:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for Range();
  swift_getAssociatedTypeWitness();
  swift_getTupleTypeMetadata2();
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v17 = *(void *)(v7 - 8);
  uint64_t v18 = v7;
  MEMORY[0x1895F8858](v7);
  uint64_t v9 = (char *)&v17 - v8;
  uint64_t v11 = type metadata accessor for MatchesCollection.Index(0LL, v6, v5, v10);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1895F8858](v11);
  uint64_t v14 = (char *)&v17 - v13;
  MatchesCollection.endIndex.getter(a2, (uint64_t)&v17 - v13);
  uint64_t v15 = a1;
  LOBYTE(a1) = static MatchesCollection.Index.== infix(_:_:)(a1, (uint64_t)v14);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  if ((a1 & 1) != 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 24))(v2, v15 + *(int *)(v11 + 36), v6, v5);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v17 + 40))(v15, v9, v18);
  }

  return result;
}

uint64_t RangesCollection.index(after:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void, void, void)@<X2>, uint64_t (*a4)(uint64_t, uint64_t)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8 = a3(0LL, *(void *)(a2 + 16), *(void *)(a2 + 24));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16LL))(a5, a1, v8);
  return a4(a5, a2);
}

uint64_t MatchesCollection.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v44 = a3;
  uint64_t v38 = a1;
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v7 = swift_getAssociatedTypeWitness();
  MEMORY[0x1895F8858](v7);
  uint64_t v41 = (char *)&v36 - v8;
  swift_getAssociatedTypeWitness();
  uint64_t v42 = AssociatedConformanceWitness;
  uint64_t v43 = AssociatedTypeWitness;
  swift_getAssociatedConformanceWitness();
  uint64_t v9 = type metadata accessor for Range();
  uint64_t v45 = v4;
  uint64_t v46 = v3;
  uint64_t v10 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1895F8858](v12);
  uint64_t v15 = (char *)&v36 - v14;
  uint64_t v16 = swift_getTupleTypeMetadata2();
  uint64_t v17 = MEMORY[0x1895F8858](v16);
  uint64_t v19 = (char *)&v36 - v18;
  uint64_t v37 = *(void *)(v10 - 8);
  uint64_t v20 = MEMORY[0x1895F8858](v17);
  uint64_t v40 = (char *)&v36 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = MEMORY[0x1895F8858](v20);
  uint64_t v39 = (char *)&v36 - v23;
  uint64_t v24 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](v22);
  uint64_t v26 = (char *)&v36 - v25;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v38, v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 48LL))( v15,  1LL,  TupleTypeMetadata2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }

  else
  {
    uint64_t v27 = &v15[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v28 = &v19[*(int *)(v16 + 48)];
    uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v24 + 32);
    v29(v19, v15, v9);
    uint64_t v38 = v24;
    unint64_t v30 = *(void (**)(char *, char *, uint64_t))(v37 + 32);
    v30(v28, v27, v10);
    uint64_t v31 = &v19[*(int *)(v16 + 48)];
    v29(v26, v19, v9);
    uint64_t v32 = v39;
    v30(v39, v31, v10);
    swift_checkMetadataState();
    uint64_t v33 = (uint64_t)v41;
    dispatch thunk of Collection.subscript.getter();
    (*(void (**)(char *, uint64_t))(v38 + 8))(v26, v9);
    uint64_t v34 = (uint64_t)v40;
    v30(v40, v32, v10);
    return _MatchResult.init(match:result:)(v33, v34, v45, v46, v44);
  }

  return result;
}

uint64_t protocol witness for Collection.startIndex.getter in conformance MatchesCollection<A>@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Collection.startIndex.getter in conformance RangesCollection<A>( a1,  (uint64_t (*)(void, void, void))type metadata accessor for MatchesCollection.Index,  a2);
}

uint64_t protocol witness for Collection.startIndex.getter in conformance RangesCollection<A>@<X0>( uint64_t a1@<X0>, uint64_t (*a2)(void, void, void)@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = v3 + *(int *)(a1 + 40);
  uint64_t v6 = a2(0LL, *(void *)(a1 + 16), *(void *)(a1 + 24));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a3, v5, v6);
}

uint64_t (*protocol witness for Collection.subscript.read in conformance MatchesCollection<A>( uint64_t **a1, uint64_t a2, uint64_t a3))()
{
  uint64_t v6 = (uint64_t *)malloc(0x28uLL);
  *a1 = v6;
  v6[4] = (uint64_t)MatchesCollection.subscript.read(v6, a2, a3, v7);
  return protocol witness for Collection.subscript.read in conformance RangesCollection<A>;
}

uint64_t (*MatchesCollection.subscript.read(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  uint64_t matched = type metadata accessor for _MatchResult(0LL, *(void *)(a3 + 16), *(void *)(a3 + 24), a4);
  *a1 = matched;
  uint64_t v8 = *(void *)(matched - 8);
  a1[1] = v8;
  uint64_t v9 = malloc(*(void *)(v8 + 64));
  a1[2] = (uint64_t)v9;
  MatchesCollection.subscript.getter(a2, a3, (uint64_t)v9);
  return RangesCollection.subscript.read;
}

uint64_t protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance MatchesCollection<A>@<X0>( uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance RangesCollection<A>( a1,  (void (*)(uint64_t, void, void))type metadata accessor for MatchesCollection.Index,  a2);
}

uint64_t protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance RangesCollection<A>@<X0>( uint64_t a1@<X1>, void (*a2)(uint64_t, void, void)@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(a3, 1LL, 1LL, v4);
}

uint64_t protocol witness for Collection.index(after:) in conformance MatchesCollection<A>@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return RangesCollection.index(after:)( a1,  a2,  (uint64_t (*)(void, void, void))type metadata accessor for MatchesCollection.Index,  MatchesCollection.formIndex(after:),  a3);
}

uint64_t static MatchesCollection.Index.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v56 = a2;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v50 = AssociatedTypeWitness;
  uint64_t v4 = type metadata accessor for Range();
  uint64_t v59 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x1895F8858](v4);
  uint64_t v48 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v5);
  uint64_t v47 = (char *)&v46 - v7;
  uint64_t v8 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v57 = (char *)&v46 - v9;
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t v11 = swift_getTupleTypeMetadata2();
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1895F8858](v12);
  uint64_t v16 = (char *)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = MEMORY[0x1895F8858](v14);
  uint64_t v19 = (char *)&v46 - v18;
  uint64_t v58 = v8;
  uint64_t v54 = *(void *)(v8 - 8);
  uint64_t v20 = MEMORY[0x1895F8858](v17);
  uint64_t v53 = (char *)&v46 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v20);
  uint64_t v23 = (char *)&v46 - v22;
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v24(v19, a1, v12);
  uint64_t v25 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48LL);
  int v26 = v25(v19, 1LL, v11);
  uint64_t v51 = v13;
  uint64_t v52 = v10;
  if (v26 == 1)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v19, v12);
    uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v59 + 56);
    v27(v23, 1LL, 1LL, v4);
  }

  else
  {
    uint64_t v46 = &v19[*(int *)(v11 + 48)];
    uint64_t v28 = v59;
    (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v23, v19, v4);
    uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v28 + 56);
    v27(v23, 0LL, 1LL, v4);
    (*(void (**)(char *, uint64_t))(*(void *)(v10 - 8) + 8LL))(v46, v10);
  }

  v24(v16, v56, v12);
  int v29 = v25(v16, 1LL, v11);
  uint64_t v31 = v53;
  uint64_t v30 = v54;
  if (v29 == 1)
  {
    (*(void (**)(char *, uint64_t))(v51 + 8))(v16, v12);
    v27(v31, 1LL, 1LL, v4);
    uint64_t v32 = (void *)v59;
  }

  else
  {
    uint64_t v33 = &v16[*(int *)(v11 + 48)];
    uint64_t v32 = (void *)v59;
    (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v53, v16, v4);
    v27(v31, 0LL, 1LL, v4);
    (*(void (**)(char *))(*(void *)(v52 - 8) + 8LL))(v33);
  }

  uint64_t v35 = v57;
  uint64_t v34 = v58;
  uint64_t v36 = &v57[*(int *)(TupleTypeMetadata2 + 48)];
  uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v30 + 32);
  v37(v57, v23, v58);
  v37(v36, v31, v34);
  uint64_t v38 = (uint64_t (*)(char *, uint64_t, uint64_t))v32[6];
  LODWORD(v37) = v38(v35, 1LL, v4);
  int v39 = v38(v36, 1LL, v4);
  if ((_DWORD)v37 != 1)
  {
    if (v39 != 1)
    {
      uint64_t v41 = (void (*)(char *, char *, uint64_t))v32[4];
      uint64_t v42 = v47;
      v41(v47, v35, v4);
      uint64_t v43 = v48;
      v41(v48, v36, v4);
      char v40 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v44 = (void (*)(char *, uint64_t))v32[1];
      v44(v43, v4);
      v44(v42, v4);
      return v40 & 1;
    }

    ((void (*)(char *, uint64_t))v32[1])(v35, v4);
    goto LABEL_13;
  }

  if (v39 != 1)
  {
    (*(void (**)(char *, uint64_t))(v30 + 8))(v36, v34);
LABEL_13:
    char v40 = 0;
    return v40 & 1;
  }

  char v40 = 1;
  return v40 & 1;
}

uint64_t static MatchesCollection.Index.< infix(_:_:)(char *a1, char *a2)
{
  uint64_t v55 = a2;
  uint64_t v52 = a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v49 = AssociatedTypeWitness;
  uint64_t v3 = type metadata accessor for Range();
  uint64_t v58 = *(void *)(v3 - 8);
  uint64_t v4 = MEMORY[0x1895F8858](v3);
  uint64_t v47 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v4);
  uint64_t v46 = (char *)&v45 - v6;
  uint64_t v7 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v56 = (char *)&v45 - v8;
  uint64_t v9 = swift_getAssociatedTypeWitness();
  uint64_t v10 = swift_getTupleTypeMetadata2();
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x1895F8858](v11);
  uint64_t v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = MEMORY[0x1895F8858](v13);
  uint64_t v18 = (char *)&v45 - v17;
  uint64_t v57 = v7;
  uint64_t v53 = *(void *)(v7 - 8);
  uint64_t v19 = MEMORY[0x1895F8858](v16);
  uint64_t v51 = (char *)&v45 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v19);
  uint64_t v22 = (char *)&v45 - v21;
  uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  v23(v18, v52, v11);
  uint64_t v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48LL);
  int v25 = v24(v18, 1LL, v10);
  uint64_t v50 = v12;
  if (v25 == 1)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v18, v11);
    int v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v58 + 56);
    v26(v22, 1LL, 1LL, v3);
  }

  else
  {
    uint64_t v52 = &v18[*(int *)(v10 + 48)];
    uint64_t v27 = v58;
    (*(void (**)(char *, char *, uint64_t))(v58 + 32))(v22, v18, v3);
    int v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v27 + 56);
    v26(v22, 0LL, 1LL, v3);
    (*(void (**)(char *, uint64_t))(*(void *)(v9 - 8) + 8LL))(v52, v9);
  }

  v23(v15, v55, v11);
  int v28 = v24(v15, 1LL, v10);
  int v29 = v51;
  if (v28 == 1)
  {
    (*(void (**)(char *, uint64_t))(v50 + 8))(v15, v11);
    v26(v29, 1LL, 1LL, v3);
    uint64_t v30 = (void *)v58;
  }

  else
  {
    uint64_t v31 = &v15[*(int *)(v10 + 48)];
    uint64_t v30 = (void *)v58;
    (*(void (**)(char *, char *, uint64_t))(v58 + 32))(v51, v15, v3);
    v26(v29, 0LL, 1LL, v3);
    (*(void (**)(char *, uint64_t))(*(void *)(v9 - 8) + 8LL))(v31, v9);
  }

  uint64_t v32 = v56;
  uint64_t v33 = v53;
  uint64_t v34 = &v56[*(int *)(TupleTypeMetadata2 + 48)];
  uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v53 + 32);
  uint64_t v36 = v22;
  uint64_t v37 = v57;
  v35(v56, v36, v57);
  v35(v34, v29, v37);
  uint64_t v38 = (unsigned int (*)(char *, uint64_t, uint64_t))v30[6];
  if (v38(v32, 1LL, v3) == 1)
  {
    (*(void (**)(char *, uint64_t))(v33 + 8))(v34, v37);
    char v39 = 0;
  }

  else if (v38(v34, 1LL, v3) == 1)
  {
    (*(void (**)(char *, uint64_t))(v33 + 8))(v32, v37);
    char v39 = 1;
  }

  else
  {
    char v40 = (void (*)(char *, char *, uint64_t))v30[4];
    uint64_t v41 = v46;
    v40(v46, v32, v3);
    uint64_t v42 = v47;
    v40(v47, v34, v3);
    char v39 = dispatch thunk of static Comparable.< infix(_:_:)();
    uint64_t v43 = (void (*)(char *, uint64_t))v30[1];
    v43(v42, v3);
    v43(v41, v3);
  }

  return v39 & 1;
}

uint64_t protocol witness for static Comparable.< infix(_:_:) in conformance MatchesCollection<A>.Index( char *a1, char *a2)
{
  return static MatchesCollection.Index.< infix(_:_:)(a1, a2);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance MatchesCollection<A>.Index( uint64_t a1, uint64_t a2)
{
  return static MatchesCollection.Index.== infix(_:_:)(a1, a2);
}

uint64_t ReversedMatchesCollection.Iterator.init(base:searcher:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v64 = a4;
  uint64_t v65 = a2;
  uint64_t v66 = a5;
  uint64_t v7 = *(void *)(a4 + 8);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v9 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = MEMORY[0x1895F8858](v9);
  uint64_t v58 = (char *)&v48 - v13;
  uint64_t v55 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v14 = MEMORY[0x1895F8858](v12);
  uint64_t v16 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v14);
  uint64_t v18 = (char *)&v48 - v17;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v19 = type metadata accessor for Range();
  uint64_t v60 = *(void *)(v19 - 8);
  uint64_t v61 = v19;
  uint64_t v20 = MEMORY[0x1895F8858](v19);
  uint64_t v54 = (char *)&v48 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v20);
  uint64_t v52 = (char *)&v48 - v22;
  uint64_t v62 = v7;
  uint64_t v23 = swift_getAssociatedTypeWitness();
  uint64_t v57 = *(void *)(v23 - 8);
  MEMORY[0x1895F8858](v23);
  uint64_t v56 = (char *)&v48 - v24;
  uint64_t v25 = swift_checkMetadataState();
  uint64_t v53 = *(void *)(v25 - 8);
  uint64_t v26 = v66;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v53 + 16))(v66, a1, v25);
  uint64_t v51 = type metadata accessor for ReversedMatchesCollection.Iterator(0LL, a3, v64, v27);
  uint64_t v28 = v26 + *(int *)(v51 + 36);
  uint64_t v29 = *(void *)(a3 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16))(v28, v65, a3);
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v64 = a1;
  dispatch thunk of Collection.endIndex.getter();
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if ((result & 1) != 0)
  {
    uint64_t v49 = a3;
    uint64_t v50 = v25;
    uint64_t v32 = v58;
    uint64_t v31 = TupleTypeMetadata2;
    uint64_t v33 = &v58[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t AssociatedConformanceWitness = v23;
    uint64_t v34 = v55;
    uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v55 + 32);
    v35(v58, v18, AssociatedTypeWitness);
    v35(v33, v16, AssociatedTypeWitness);
    uint64_t v36 = &v11[*(int *)(v31 + 48)];
    uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v34 + 16);
    v37(v11, v32, AssociatedTypeWitness);
    v37(v36, v33, AssociatedTypeWitness);
    uint64_t v48 = v29;
    uint64_t v38 = v54;
    v35(v54, v11, AssociatedTypeWitness);
    char v39 = *(void (**)(char *, uint64_t))(v34 + 8);
    v39(v36, AssociatedTypeWitness);
    char v40 = &v11[*(int *)(v31 + 48)];
    v35(v11, v32, AssociatedTypeWitness);
    v35(v40, v33, AssociatedTypeWitness);
    uint64_t v41 = v61;
    v35(&v38[*(int *)(v61 + 36)], v40, AssociatedTypeWitness);
    v39(v11, AssociatedTypeWitness);
    uint64_t v42 = v60;
    uint64_t v43 = v52;
    (*(void (**)(char *, char *, uint64_t))(v60 + 32))(v52, v38, v41);
    uint64_t v44 = v56;
    uint64_t v45 = v64;
    uint64_t v46 = v65;
    uint64_t v47 = v49;
    (*(void (**)(uint64_t, char *, uint64_t))(v62 + 32))(v64, v43, v49);
    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v46, v47);
    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v45, v50);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v43, v41);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v57 + 32))( v66 + *(int *)(v51 + 40),  v44,  AssociatedConformanceWitness);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t ReversedMatchesCollection.Iterator.next()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for Range();
  swift_getAssociatedTypeWitness();
  swift_getTupleTypeMetadata2();
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v8);
  uint64_t v11 = &v16[-v10];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 24))(v3, v3 + *(int *)(a1 + 40), v7, v6);
  uint64_t v22 = v7;
  uint64_t v23 = v6;
  uint64_t v24 = v3;
  uint64_t v17 = v7;
  uint64_t v18 = v6;
  uint64_t v19 = partial apply for closure #1 in ReversedMatchesCollection.Iterator.next();
  uint64_t v20 = &v21;
  uint64_t matched = type metadata accessor for _BackwardMatchResult(0LL, v7, v6, v12);
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF( (void (*)(char *, char *))partial apply for thunk for @callee_guaranteed (@in_guaranteed Range<A.BackwardCollectionSearcher.BackwardSearched.Collection.Index>, @in_guaranteed A.BackwardMatchingCollectionSearcher.Match) -> (@out _BackwardMatchResult<A>),  (uint64_t)v16,  MEMORY[0x18961A520],  matched,  v14,  a2);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t closure #1 in ReversedMatchesCollection.Iterator.next()@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  v20[0] = a3;
  v20[1] = a1;
  uint64_t v21 = a2;
  uint64_t v22 = a6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v11 = (char *)v20 - v10;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v12 = swift_getAssociatedTypeWitness();
  MEMORY[0x1895F8858](v12);
  uint64_t v14 = (char *)v20 - v13;
  uint64_t v15 = swift_checkMetadataState();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1895F8858](v15);
  uint64_t v18 = (char *)v20 - v17;
  (*(void (**)(char *, void, uint64_t))(v16 + 16))((char *)v20 - v17, v20[0], v15);
  dispatch thunk of Collection.subscript.getter();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v21, AssociatedTypeWitness);
  return _BackwardMatchResult.init(match:result:)((uint64_t)v14, (uint64_t)v11, a4, a5, v22);
}

uint64_t thunk for @callee_guaranteed (@in_guaranteed Range<A.BackwardCollectionSearcher.BackwardSearched.Collection.Index>, @in_guaranteed A.BackwardMatchingCollectionSearcher.Match) -> (@out _BackwardMatchResult<A>)( uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return a2(a1, a1 + *(int *)(TupleTypeMetadata2 + 48));
}

uint64_t MatchesCollection.makeIterator()( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(char *, char *, uint64_t, uint64_t))
{
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1895F8858](a1);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = *(void *)(v9 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v15 = (char *)&v18 - v14;
  (*(void (**)(char *, uint64_t))(v16 + 16))((char *)&v18 - v14, v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v4 + *(int *)(a1 + 36), v7);
  return a4(v15, v11, v7, v12);
}

uint64_t protocol witness for Sequence.makeIterator() in conformance ReversedMatchesCollection<A>( uint64_t a1, uint64_t a2)
{
  return protocol witness for Sequence.makeIterator() in conformance ReversedMatchesCollection<A>( a1,  a2,  (uint64_t)&protocol requirements base descriptor for BackwardCollectionSearcher,  (uint64_t)&associated type descriptor for BackwardCollectionSearcher.BackwardSearched,  (uint64_t (*)(char *, char *, uint64_t, uint64_t))ReversedMatchesCollection.Iterator.init(base:searcher:));
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance SplitCollection<A>( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = specialized Sequence._copyToContiguousArray()(v2, a1, a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8LL))(v2, a1);
  return v4;
}

uint64_t Regex._firstMatch(_:subjectBounds:searchBounds:)@<X0>( unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v23 = a6;
  unint64_t v22 = a5;
  uint64_t v13 = type metadata accessor for Executor(0LL);
  MEMORY[0x1895F8858](v13);
  uint64_t v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = *v7;
  swift_retain();
  Regex.Program.loweredProgram.getter((uint64_t)v15);
  swift_release();
  swift_retain();
  uint64_t v24 = v16;
  uint64_t v17 = Regex.initialOptions.getter();
  uint64_t result = swift_release();
  uint64_t v19 = *(void *)(v17 + 16);
  if (v19)
  {
    unsigned int v20 = *(_DWORD *)(v17 + 4 * v19 + 28);
    swift_bridgeObjectRelease();
    Executor.firstMatch<A>(_:subjectBounds:searchBounds:graphemeSemantic:)( a1,  a2,  a3,  a4,  v22,  v23,  HIWORD(v20) & 1,  a7);
    return outlined destroy of MEProgram((uint64_t)v15, type metadata accessor for Executor);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t RegexMatchesCollection.searchIndex(after:)(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 24) >> 14;
  if (v3 != v2 >> 14) {
    return v2;
  }
  unint64_t v5 = *v1;
  unint64_t v4 = v1[1];
  uint64_t v6 = HIBYTE(v4) & 0xF;
  if ((v4 & 0x2000000000000000LL) == 0) {
    uint64_t v6 = *v1 & 0xFFFFFFFFFFFFLL;
  }
  if (v3 == 4 * v6) {
    return 0LL;
  }
  v17[0] = v1[6];
  uint64_t v7 = Regex.initialOptions.getter();
  uint64_t v8 = *(void *)(v7 + 16);
  if (!v8)
  {
    __break(1u);
    return String.UnicodeScalarView._foreignIndex(after:)();
  }

  int v9 = *(_DWORD *)(v7 + 4 * v8 + 28);
  swift_bridgeObjectRelease();
  if ((v9 & 0x10000) != 0) {
    return String.index(after:)();
  }
  unint64_t v10 = _StringGuts.validateScalarIndex(_:)(v2, v5, v4);
  if ((v4 & 0x1000000000000000LL) != 0) {
    return String.UnicodeScalarView._foreignIndex(after:)();
  }
  unint64_t v11 = v10 >> 16;
  if ((v4 & 0x2000000000000000LL) != 0)
  {
    v17[0] = v5;
    v17[1] = v4 & 0xFFFFFFFFFFFFFFLL;
    int v12 = *((unsigned __int8 *)v17 + v11);
  }

  else if ((v5 & 0x1000000000000000LL) != 0)
  {
    int v12 = *(unsigned __int8 *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 0x20 + (v10 >> 16));
  }

  else
  {
    int v12 = *(unsigned __int8 *)(_StringObject.sharedUTF8.getter() + v11);
  }

  int v14 = (char)v12;
  unsigned int v15 = __clz(v12 ^ 0xFF) - 24;
  if (v14 >= 0) {
    LOBYTE(v15) = 1;
  }
  return ((v11 + v15) << 16) | 5;
}

uint64_t Regex.initialOptions.getter()
{
  uint64_t v0 = type metadata accessor for MEProgram(0LL);
  MEMORY[0x1895F8858](v0);
  unint64_t v2 = (char *)&v5 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Regex.Program.loweredProgram.getter((uint64_t)v2);
  uint64_t v3 = *(void *)&v2[*(int *)(v0 + 64)];
  swift_bridgeObjectRetain();
  outlined destroy of MEProgram((uint64_t)v2, type metadata accessor for MEProgram);
  return v3;
}

uint64_t RegexMatchesCollection.Iterator.init(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v39 = a2;
  uint64_t v38 = *a1;
  uint64_t v37 = a1[1];
  uint64_t v36 = a1[2];
  uint64_t v34 = a1[3];
  uint64_t v41 = a1[4];
  uint64_t v35 = a1[5];
  uint64_t v4 = a1[7];
  uint64_t v33 = a1[6];
  uint64_t v5 = a1[8];
  uint64_t v6 = a1[9];
  uint64_t v8 = a1[10];
  uint64_t v7 = a1[11];
  char v47 = 1;
  if (v5) {
    uint64_t v9 = v4;
  }
  else {
    uint64_t v9 = 0LL;
  }
  if (v5) {
    uint64_t v10 = v6;
  }
  else {
    uint64_t v10 = 0LL;
  }
  if (v5) {
    uint64_t v11 = v8;
  }
  else {
    uint64_t v11 = 0LL;
  }
  if (v5) {
    uint64_t v12 = v7;
  }
  else {
    uint64_t v12 = 0LL;
  }
  uint64_t v40 = v4;
  outlined copy of RegexMatchesCollection<A>.Index<A>(v4, v5);
  uint64_t v42 = v9;
  uint64_t v43 = v5;
  uint64_t v13 = v5;
  uint64_t v44 = v10;
  uint64_t v45 = v11;
  uint64_t v46 = v12;
  uint64_t v14 = v38;
  uint64_t v15 = v37;
  uint64_t v48 = v38;
  uint64_t v49 = v37;
  uint64_t v16 = v36;
  uint64_t v50 = v36;
  uint64_t v51 = v34;
  uint64_t v17 = v35;
  uint64_t v52 = v41;
  uint64_t v53 = v35;
  uint64_t v54 = v33;
  uint64_t v55 = v4;
  uint64_t v56 = v13;
  uint64_t v57 = v6;
  uint64_t v18 = v13;
  uint64_t v58 = v8;
  uint64_t v59 = v7;
  uint64_t v19 = (void *)swift_allocObject();
  v19[2] = v39;
  v19[3] = v14;
  v19[4] = v15;
  v19[5] = v16;
  uint64_t v20 = v34;
  uint64_t v21 = v41;
  v19[6] = v34;
  v19[7] = v21;
  v19[8] = v17;
  uint64_t v22 = v33;
  uint64_t v23 = v40;
  v19[9] = v33;
  v19[10] = v23;
  v19[11] = v18;
  v19[12] = v6;
  v19[13] = v8;
  v19[14] = v7;
  uint64_t v24 = outlined retain of RegexMatchesCollection<A>((uint64_t)&v48);
  MEMORY[0x1895F8858](v24);
  v32[2] = v39;
  v32[3] = partial apply for implicit closure #2 in implicit closure #1 in RegexMatchesCollection.Iterator.next();
  v32[4] = v19;
  type metadata accessor for Regex.Match(255LL, v39, v25, v26);
  type metadata accessor for Optional();
  _sSq7flatMapyqd_0_SgABxqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF( (void (*)(char *, char *))partial apply for thunk for @callee_guaranteed (@in_guaranteed Regex<A>.Match) -> (@unowned String.Index?),  (uint64_t)v32,  MEMORY[0x18961A520],  MEMORY[0x189617E00],  v27,  (uint64_t)&v48);
  outlined consume of Regex<A1.RegexOutput>.Match?<A><A1>(v42, v43);
  uint64_t result = swift_release();
  uint64_t v29 = v48;
  char v30 = v49;
  char v31 = v47;
  *(void *)a3 = v38;
  *(void *)(a3 + 8) = v37;
  *(void *)(a3 + 16) = v36;
  *(void *)(a3 + 24) = v20;
  *(void *)(a3 + 32) = v41;
  *(void *)(a3 + 40) = v35;
  *(void *)(a3 + 48) = v22;
  *(void *)(a3 + 56) = v40;
  *(void *)(a3 + 64) = v18;
  *(void *)(a3 + 72) = v6;
  *(void *)(a3 + 80) = v8;
  *(void *)(a3 + 88) = v7;
  *(_BYTE *)(a3 + 96) = v31;
  *(void *)(a3 + 104) = v29;
  *(_BYTE *)(a3 + 112) = v30;
  return result;
}

uint64_t _sSq7flatMapyqd_0_SgABxqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF@<X0>( void (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v26 = a5;
  uint64_t v27 = a2;
  uint64_t v28 = a1;
  uint64_t v29 = a6;
  uint64_t v9 = *(void *)(a3 - 8);
  uint64_t v10 = MEMORY[0x1895F8858](a1);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = *(void *)(v13 + 16);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x1895F8858](v10);
  uint64_t v18 = (char *)&v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v16);
  uint64_t v20 = (char *)&v25 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t))(v21 + 16))(v20, v22);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v20, 1LL, v14) == 1) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 56LL))( v29,  1LL,  1LL,  a4);
  }
  uint64_t v25 = a3;
  uint64_t v24 = v26;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v20, v14);
  v28(v18, v12);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  if (v6) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(v24, v12, v25);
  }
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance RegexMatchesCollection<A>@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(v2 + 56);
  uint64_t v4 = *(void *)(v2 + 64);
  swift_release();
  swift_bridgeObjectRelease();
  return outlined consume of Regex<A1.RegexOutput>.Match?<A><A1>(v3, v4);
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance RegexMatchesCollection<A>( uint64_t a1)
{
  return Collection.underestimatedCount.getter();
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance RegexMatchesCollection<A>( uint64_t a1)
{
  return Collection._copyToContiguousArray()();
}

BOOL static RegexMatchesCollection.Index.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v2 = a2[1];
  if (!a1[1]) {
    return v2 == 0;
  }
  if (v2) {
    BOOL v3 = (a1[3] ^ a2[3]) >> 14 == 0LL;
  }
  else {
    BOOL v3 = 0;
  }
  return v3 && (a2[4] ^ a1[4]) < 0x4000uLL;
}

uint64_t static RegexMatchesCollection.Index.< infix(_:_:)(void *a1, void *a2)
{
  if (!a1[1]) {
    return 0LL;
  }
  if (!a2[1]) {
    return 1LL;
  }
  unint64_t v2 = a1[3] >> 14;
  unint64_t v3 = a2[3] >> 14;
  if (v2 == v3) {
    return a1[4] >> 14 < a2[4] >> 14;
  }
  else {
    return v2 < v3;
  }
}

uint64_t (*protocol witness for Collection.subscript.read in conformance RegexMatchesCollection<A>( uint64_t ***a1, uint64_t a2))()
{
  uint64_t v4 = (uint64_t **)malloc(0x28uLL);
  *a1 = v4;
  v4[4] = (uint64_t *)RegexMatchesCollection.subscript.read(v4, a2);
  return protocol witness for Collection.subscript.read in conformance RangesCollection<A>;
}

void (*RegexMatchesCollection.subscript.read(uint64_t **a1, uint64_t a2))(void **a1)
{
  uint64_t v4 = (uint64_t *)malloc(0x28uLL);
  *a1 = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  __int128 v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  uint64_t v9 = v5;
  RegexMatchesCollection.subscript.getter((uint64_t *)v8, v4);
  return RegexMatchesCollection.subscript.read;
}

void RegexMatchesCollection.subscript.read(void **a1)
{
  uint64_t v1 = *a1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  free(v1);
}

double protocol witness for Collection.formIndex(after:) in conformance RegexMatchesCollection<A>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Collection.formIndex(after:) in conformance RegexRangesCollection<A>( a1,  a2,  a3,  (void (*)(_OWORD *__return_ptr))RegexMatchesCollection.index(after:));
}

double protocol witness for Collection.formIndex(after:) in conformance RegexRangesCollection<A>( uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_OWORD *__return_ptr))
{
  uint64_t v5 = v9;
  double result = *(double *)v8;
  __int128 v7 = v8[1];
  *(_OWORD *)a1 = v8[0];
  *(_OWORD *)(a1 + 16) = v7;
  *(void *)(a1 + 32) = v5;
  return result;
}

uint64_t MatchingStatelessCollectionSearcher.matchingSearch(_:_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v104 = a4;
  uint64_t v108 = a1;
  uint64_t v110 = a5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v9 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v10 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  unint64_t v102 = (char *)&v79 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v10);
  uint64_t v99 = (char *)&v79 - v12;
  uint64_t v109 = swift_getAssociatedConformanceWitness();
  uint64_t v13 = type metadata accessor for Range();
  uint64_t v103 = a3;
  uint64_t v14 = swift_getAssociatedTypeWitness();
  uint64_t v15 = swift_getTupleTypeMetadata2();
  uint64_t v94 = type metadata accessor for Optional();
  uint64_t v92 = *(void *)(v94 - 8);
  MEMORY[0x1895F8858](v94);
  uint64_t v101 = (char *)&v79 - v16;
  uint64_t v93 = swift_getTupleTypeMetadata2();
  uint64_t v17 = MEMORY[0x1895F8858](v93);
  uint64_t v91 = (char *)&v79 - v18;
  uint64_t v106 = v14;
  uint64_t v90 = *(void *)(v14 - 8);
  uint64_t v19 = MEMORY[0x1895F8858](v17);
  uint64_t v105 = (char *)&v79 - v20;
  uint64_t v107 = v13;
  uint64_t v98 = *(void *)(v13 - 8);
  uint64_t v21 = MEMORY[0x1895F8858](v19);
  uint64_t v96 = (char *)&v79 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = MEMORY[0x1895F8858](v21);
  unint64_t v97 = (char *)&v79 - v24;
  MEMORY[0x1895F8858](v23);
  uint64_t v95 = (char *)&v79 - v25;
  uint64_t v27 = type metadata accessor for DefaultSearcherState.Position( 0LL,  AssociatedTypeWitness,  AssociatedConformanceWitness,  v26);
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = MEMORY[0x1895F8858](v27);
  uint64_t v87 = (char *)&v79 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = MEMORY[0x1895F8858](v29);
  uint64_t v33 = (char *)&v79 - v32;
  uint64_t v34 = *(void *)(v9 - 8);
  uint64_t v35 = MEMORY[0x1895F8858](v31);
  uint64_t v88 = (char *)&v79 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v35);
  uint64_t v38 = (char *)&v79 - v37;
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v33, a2, v27);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v33, 1LL, v9) == 1)
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v33, v27);
    uint64_t v39 = *(void *)(v15 - 8);
    goto LABEL_6;
  }

  uint64_t v86 = v28;
  uint64_t v84 = v27;
  uint64_t v89 = v15;
  uint64_t v40 = *(void (**)(char *, char *, uint64_t))(v34 + 32);
  v40(v38, v33, v9);
  uint64_t v82 = AssociatedTypeWitness;
  uint64_t v81 = AssociatedConformanceWitness;
  uint64_t v42 = *(int *)(type metadata accessor for DefaultSearcherState( 0LL,  AssociatedTypeWitness,  AssociatedConformanceWitness,  v41)
               + 36);
  uint64_t v85 = a2;
  uint64_t v43 = a2 + v42;
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if ((result & 1) != 0)
  {
    uint64_t v45 = v34;
    char v47 = v99;
    uint64_t v46 = TupleTypeMetadata2;
    uint64_t v48 = &v99[*(int *)(TupleTypeMetadata2 + 48)];
    v40(v99, v38, v9);
    uint64_t v49 = *(void (**)(char *, uint64_t, uint64_t))(v34 + 16);
    v49(v48, v43, v9);
    uint64_t v50 = v102;
    uint64_t v51 = &v102[*(int *)(v46 + 48)];
    v49(v102, (uint64_t)v47, v9);
    uint64_t v80 = (void (*)(uint64_t, char *, uint64_t))v49;
    v49(v51, (uint64_t)v48, v9);
    uint64_t v52 = v96;
    v40(v96, v50, v9);
    uint64_t v83 = v45;
    uint64_t v53 = *(void (**)(char *, uint64_t))(v45 + 8);
    v53(v51, v9);
    uint64_t v54 = &v50[*(int *)(v46 + 48)];
    v40(v50, v47, v9);
    v40(v54, v48, v9);
    uint64_t v55 = v107;
    v40(&v52[*(int *)(v107 + 36)], v54, v9);
    unint64_t v102 = (char *)v53;
    v53(v50, v9);
    uint64_t v57 = v97;
    uint64_t v56 = v98;
    uint64_t v58 = *(void (**)(char *, char *, uint64_t))(v98 + 32);
    v58(v97, v52, v55);
    uint64_t v59 = v101;
    (*(void (**)(uint64_t, char *, uint64_t))(v104 + 24))(v108, v57, v103);
    (*(void (**)(char *, uint64_t))(v56 + 8))(v57, v55);
    uint64_t v15 = v89;
    uint64_t v39 = *(void *)(v89 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v59, 1LL, v89) != 1)
    {
      uint64_t v62 = &v59[*(int *)(v15 + 48)];
      uint64_t v63 = v93;
      uint64_t v64 = v91;
      uint64_t v65 = &v91[*(int *)(v93 + 48)];
      v58(v91, v59, v55);
      uint64_t v66 = *(void (**)(char *, char *, uint64_t))(v90 + 32);
      uint64_t v67 = v65;
      uint64_t v68 = v106;
      v66(v67, v62, v106);
      uint64_t v69 = &v64[*(int *)(v63 + 48)];
      uint64_t v70 = v95;
      v58(v95, v64, v55);
      v66(v105, v69, v68);
      char v71 = Range.isEmpty.getter();
      uint64_t v61 = v110;
      if ((v71 & 1) != 0)
      {
        uint64_t v72 = v88;
        dispatch thunk of Collection.endIndex.getter();
        char v73 = dispatch thunk of static Equatable.== infix(_:_:)();
        ((void (*)(char *, uint64_t))v102)(v72, v9);
        if ((v73 & 1) != 0)
        {
          uint64_t v74 = v85;
          (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v85, v84);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v83 + 56))(v74, 1LL, 1LL, v9);
        }

        else
        {
          uint64_t v77 = v87;
          dispatch thunk of Collection.index(after:)();
          (*(void (**)(char *, void, uint64_t, uint64_t))(v83 + 56))(v77, 0LL, 1LL, v9);
          (*(void (**)(uint64_t, char *, uint64_t))(v86 + 40))(v85, v77, v84);
        }

        uint64_t v15 = v89;
        uint64_t v55 = v107;
        uint64_t v61 = v110;
        uint64_t v76 = v95;
      }

      else
      {
        uint64_t v75 = v85;
        (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v85, v84);
        v80(v75, &v70[*(int *)(v55 + 36)], v9);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v83 + 56))(v75, 0LL, 1LL, v9);
        uint64_t v76 = v70;
        uint64_t v15 = v89;
      }

      uint64_t v78 = &v61[*(int *)(v15 + 48)];
      v58(v61, v76, v55);
      v66(v78, v105, v106);
      uint64_t v60 = 0LL;
      return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v39 + 56))(v61, v60, 1LL, v15);
    }

    (*(void (**)(char *, uint64_t))(v92 + 8))(v59, v94);
LABEL_6:
    uint64_t v60 = 1LL;
    uint64_t v61 = v110;
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v39 + 56))(v61, v60, 1LL, v15);
  }

  __break(1u);
  return result;
}

uint64_t BackwardMatchingStatelessCollectionSearcher.matchingSearchBack(_:_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (**a4)(uint64_t, char *, uint64_t)@<X3>, char *a5@<X8>)
{
  uint64_t v105 = a4;
  uint64_t v109 = a1;
  uint64_t v111 = a5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v8 = *(void *)(AssociatedConformanceWitness + 8);
  uint64_t v9 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v10 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v103 = (char *)v81 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v10);
  uint64_t v100 = (char *)v81 - v12;
  uint64_t v107 = swift_getAssociatedConformanceWitness();
  uint64_t v13 = type metadata accessor for Range();
  uint64_t v104 = a3;
  uint64_t v14 = swift_getAssociatedTypeWitness();
  uint64_t v15 = swift_getTupleTypeMetadata2();
  uint64_t v94 = type metadata accessor for Optional();
  uint64_t v92 = *(void *)(v94 - 8);
  MEMORY[0x1895F8858](v94);
  unint64_t v102 = (char *)v81 - v16;
  uint64_t v93 = swift_getTupleTypeMetadata2();
  uint64_t v17 = MEMORY[0x1895F8858](v93);
  uint64_t v91 = (char *)v81 - v18;
  uint64_t v106 = v14;
  uint64_t v19 = *(void *)(v14 - 8);
  uint64_t v20 = MEMORY[0x1895F8858](v17);
  uint64_t v96 = (char *)v81 - v21;
  uint64_t v110 = v13;
  uint64_t v99 = *(void *)(v13 - 8);
  uint64_t v22 = MEMORY[0x1895F8858](v20);
  unint64_t v97 = (char *)v81 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = MEMORY[0x1895F8858](v22);
  uint64_t v98 = (char *)v81 - v25;
  MEMORY[0x1895F8858](v24);
  uint64_t v95 = (char *)v81 - v26;
  uint64_t v108 = v8;
  uint64_t v28 = type metadata accessor for DefaultSearcherState.Position(0LL, AssociatedTypeWitness, v8, v27);
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = MEMORY[0x1895F8858](v28);
  uint64_t v88 = (char *)v81 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v32 = MEMORY[0x1895F8858](v30);
  uint64_t v34 = (char *)v81 - v33;
  uint64_t v35 = *(void *)(v9 - 8);
  uint64_t v36 = MEMORY[0x1895F8858](v32);
  uint64_t v90 = (char *)v81 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v36);
  uint64_t v39 = (char *)v81 - v38;
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v34, a2, v28);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v34, 1LL, v9) == 1)
  {
    (*(void (**)(char *, uint64_t))(v29 + 8))(v34, v28);
    uint64_t v40 = *(void *)(v15 - 8);
    goto LABEL_6;
  }

  uint64_t v84 = v29;
  uint64_t v85 = v28;
  uint64_t v87 = v15;
  uint64_t v41 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
  v41(v39, v34, v9);
  v81[1] = AssociatedTypeWitness;
  uint64_t v43 = *(int *)(type metadata accessor for DefaultSearcherState(0LL, AssociatedTypeWitness, v108, v42) + 36);
  uint64_t v86 = a2;
  uint64_t v44 = a2 + v43;
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if ((result & 1) != 0)
  {
    uint64_t v82 = v19;
    uint64_t v46 = v100;
    uint64_t v47 = TupleTypeMetadata2;
    uint64_t v48 = &v100[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v49 = *(void (**)(char *, uint64_t, uint64_t))(v35 + 16);
    v49(v100, v44, v9);
    v41(v48, v39, v9);
    uint64_t v50 = v103;
    uint64_t v51 = &v103[*(int *)(v47 + 48)];
    v49(v103, (uint64_t)v46, v9);
    v81[0] = v49;
    v49(v51, (uint64_t)v48, v9);
    uint64_t v52 = v97;
    v41(v97, v50, v9);
    uint64_t v83 = v35;
    uint64_t v53 = *(void (***)(uint64_t, char *, uint64_t))(v35 + 8);
    ((void (*)(char *, uint64_t))v53)(v51, v9);
    uint64_t v54 = &v50[*(int *)(v47 + 48)];
    v41(v50, v46, v9);
    v41(v54, v48, v9);
    uint64_t v55 = v110;
    v41(&v52[*(int *)(v110 + 36)], v54, v9);
    uint64_t v56 = v55;
    ((void (*)(char *, uint64_t))v53)(v50, v9);
    uint64_t v58 = v98;
    uint64_t v57 = v99;
    uint64_t v59 = v52;
    uint64_t v60 = *(void (**)(char *, char *, uint64_t))(v99 + 32);
    v60(v98, v59, v55);
    uint64_t v61 = v102;
    v105[3](v109, v58, v104);
    (*(void (**)(char *, uint64_t))(v57 + 8))(v58, v55);
    uint64_t v15 = v87;
    uint64_t v40 = *(void *)(v87 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v61, 1LL, v87) != 1)
    {
      uint64_t v105 = v53;
      uint64_t v64 = &v61[*(int *)(v15 + 48)];
      uint64_t v65 = v93;
      uint64_t v66 = v91;
      uint64_t v67 = &v91[*(int *)(v93 + 48)];
      v60(v91, v61, v56);
      uint64_t v68 = *(void (**)(char *, char *, uint64_t))(v82 + 32);
      uint64_t v69 = v67;
      uint64_t v70 = v106;
      v68(v69, v64, v106);
      char v71 = &v66[*(int *)(v65 + 48)];
      uint64_t v72 = v95;
      v60(v95, v66, v56);
      char v73 = v96;
      v68(v96, v71, v70);
      char v74 = Range.isEmpty.getter();
      uint64_t v63 = v111;
      if ((v74 & 1) != 0)
      {
        uint64_t v75 = v90;
        dispatch thunk of Collection.startIndex.getter();
        char v76 = dispatch thunk of static Equatable.== infix(_:_:)();
        ((void (*)(char *, uint64_t))v105)(v75, v9);
        if ((v76 & 1) != 0)
        {
          uint64_t v77 = v86;
          (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v86, v85);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v83 + 56))(v77, 1LL, 1LL, v9);
        }

        else
        {
          uint64_t v79 = v88;
          dispatch thunk of BidirectionalCollection.index(before:)();
          (*(void (**)(char *, void, uint64_t, uint64_t))(v83 + 56))(v79, 0LL, 1LL, v9);
          (*(void (**)(uint64_t, char *, uint64_t))(v84 + 40))(v86, v79, v85);
        }

        char v73 = v96;
      }

      else
      {
        uint64_t v78 = v86;
        (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v86, v85);
        ((void (*)(uint64_t, char *, uint64_t))v81[0])(v78, v72, v9);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v83 + 56))(v78, 0LL, 1LL, v9);
      }

      uint64_t v80 = &v63[*(int *)(v15 + 48)];
      v60(v63, v72, v110);
      v68(v80, v73, v106);
      uint64_t v62 = 0LL;
      return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v40 + 56))(v63, v62, 1LL, v15);
    }

    (*(void (**)(char *, uint64_t))(v92 + 8))(v61, v94);
LABEL_6:
    uint64_t v62 = 1LL;
    uint64_t v63 = v111;
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v40 + 56))(v63, v62, 1LL, v15);
  }

  __break(1u);
  return result;
}

uint64_t DefaultSearcherState.init(position:end:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = type metadata accessor for DefaultSearcherState.Position(0LL, a3, a4, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32LL))(a5, a1, v10);
  uint64_t v12 = a5 + *(int *)(type metadata accessor for DefaultSearcherState(0LL, a3, a4, v11) + 36);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32LL))( v12,  a2,  AssociatedTypeWitness);
}

uint64_t ConsumerSearcher.search(_:in:)@<X0>( uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v67 = a4;
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v10 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v11 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v89 = (char *)&v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v11);
  uint64_t v90 = (char *)&v66 - v13;
  uint64_t v69 = AssociatedConformanceWitness;
  uint64_t v70 = AssociatedTypeWitness;
  uint64_t v14 = swift_getAssociatedConformanceWitness();
  uint64_t v15 = type metadata accessor for Range();
  uint64_t v92 = *(void *)(v15 - 8);
  uint64_t v16 = MEMORY[0x1895F8858](v15);
  uint64_t v84 = (char *)&v66 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = MEMORY[0x1895F8858](v16);
  uint64_t v88 = (char *)&v66 - v19;
  uint64_t v20 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v18);
  uint64_t v22 = (char *)&v66 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v73 = type metadata accessor for Optional();
  uint64_t v72 = *(void *)(v73 - 8);
  uint64_t v23 = MEMORY[0x1895F8858](v73);
  uint64_t v82 = (char *)&v66 - v24;
  uint64_t v25 = MEMORY[0x1895F8858](v23);
  uint64_t v66 = (char *)&v66 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v25);
  uint64_t v28 = (char *)&v66 - v27;
  uint64_t v94 = v29;
  uint64_t v87 = (void (*)(char *, char *, uint64_t))*((void *)v29 + 2);
  v87((char *)&v66 - v27, a2, v10);
  uint64_t v93 = v15;
  uint64_t v30 = &a2[*(int *)(v15 + 36)];
  uint64_t v85 = v6;
  uint64_t v81 = *(void (**)(void))(v6 + 24);
  uint64_t v83 = v20;
  uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
  uint64_t v32 = v30;
  uint64_t v68 = v31;
  v31(v22, v86, v7);
  if ((dispatch thunk of static Comparable.<= infix(_:_:)() & 1) != 0)
  {
    uint64_t v79 = v14;
    uint64_t v80 = v7;
    uint64_t v78 = v22;
    char v71 = v32;
    uint64_t v76 = a1;
    uint64_t v77 = v28;
    while (1)
    {
      uint64_t v34 = v90;
      uint64_t v33 = TupleTypeMetadata2;
      uint64_t v35 = &v90[*(int *)(TupleTypeMetadata2 + 48)];
      uint64_t v36 = v87;
      v87(v90, v28, v10);
      v36(v35, v32, v10);
      uint64_t v37 = v89;
      uint64_t v38 = &v89[*(int *)(v33 + 48)];
      v36(v89, v34, v10);
      v36(v38, v35, v10);
      uint64_t v39 = v94;
      uint64_t v40 = (void (*)(char *, char *, uint64_t))*((void *)v94 + 4);
      uint64_t v41 = v84;
      v40(v84, v37, v10);
      uint64_t v42 = (void (*)(char *, uint64_t))*((void *)v39 + 1);
      v42(v38, v10);
      uint64_t v43 = &v37[*(int *)(v33 + 48)];
      v40(v37, v34, v10);
      v40(v43, v35, v10);
      uint64_t v44 = v93;
      uint64_t v45 = &v41[*(int *)(v93 + 36)];
      char v74 = v40;
      v40(v45, v43, v10);
      uint64_t v75 = v42;
      v42(v37, v10);
      uint64_t v46 = v92;
      uint64_t v22 = *(char **)(v92 + 32);
      uint64_t v47 = v88;
      uint64_t v48 = v78;
      ((void (*)(char *, char *, uint64_t))v22)(v88, v41, v44);
      a2 = v82;
      uint64_t v49 = v80;
      v81();
      (*(void (**)(char *, uint64_t))(v46 + 8))(v47, v44);
      (*(void (**)(char *, uint64_t))(v83 + 8))(v48, v49);
      (*(void (**)(char *, uint64_t))(v72 + 8))(a2, v73);
      uint64_t v28 = v77;
      a2 = v71;
      if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
      {
        v75(v28, v10);
        uint64_t v65 = 1LL;
        uint64_t v64 = v67;
        uint64_t v63 = v93;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v92 + 56))(v64, v65, 1LL, v63);
      }

      swift_checkMetadataState();
      dispatch thunk of Collection.formIndex(after:)();
      v68(v48, v86, v49);
      uint64_t v32 = a2;
      if ((dispatch thunk of static Comparable.<= infix(_:_:)() & 1) == 0) {
        goto LABEL_6;
      }
    }
  }

  else
  {
LABEL_6:
    __break(1u);
  }

  uint64_t v94 = v22;
  uint64_t v50 = v66;
  uint64_t v51 = v74;
  v74(v66, a2, v10);
  uint64_t v52 = v77;
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if ((result & 1) != 0)
  {
    uint64_t v54 = v90;
    uint64_t v55 = TupleTypeMetadata2;
    uint64_t v56 = &v90[*(int *)(TupleTypeMetadata2 + 48)];
    v51(v90, v52, v10);
    v51(v56, v50, v10);
    uint64_t v57 = v89;
    uint64_t v58 = &v89[*(int *)(v55 + 48)];
    uint64_t v59 = v87;
    v87(v89, v54, v10);
    v59(v58, v56, v10);
    uint64_t v60 = v88;
    v51(v88, v57, v10);
    uint64_t v61 = v75;
    v75(v58, v10);
    uint64_t v62 = &v57[*(int *)(v55 + 48)];
    v51(v57, v54, v10);
    v51(v62, v56, v10);
    uint64_t v63 = v93;
    v51(&v60[*(int *)(v93 + 36)], v62, v10);
    v61(v57, v10);
    uint64_t v64 = v67;
    ((void (*)(uint64_t, char *, uint64_t))v94)(v67, v60, v63);
    uint64_t v65 = 0LL;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v92 + 56))(v64, v65, 1LL, v63);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t protocol witness for CollectionSearcher.state(for:in:) in conformance ConsumerSearcher<A>@<X0>( uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return StatelessCollectionSearcher.state(for:in:)(a1, a3);
}

uint64_t protocol witness for CollectionSearcher.search(_:_:) in conformance ConsumerSearcher<A>@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v8 = MEMORY[0x186E17958](&protocol conformance descriptor for ConsumerSearcher<A>, a3);
  return StatelessCollectionSearcher.search(_:_:)(a1, a2, a3, v8, a4);
}

uint64_t protocol witness for BackwardCollectionSearcher.backwardState(for:in:) in conformance <> ConsumerSearcher<A>@<X0>( uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = *(void *)(a3 - 8);
  MEMORY[0x186E17958](&protocol conformance descriptor for <> ConsumerSearcher<A>, a2, &v7);
  return BackwardStatelessCollectionSearcher.backwardState(for:in:)(a1, a4);
}

uint64_t ConsumerSearcher<>.matchingSearch(_:in:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v101 = a1;
  uint64_t v86 = a5;
  uint64_t v116 = a4;
  uint64_t v6 = *(void (**)(char *, uint64_t, uint64_t))(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v9 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v10 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v111 = (char *)&v82 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v10);
  uint64_t v113 = (char *)&v82 - v12;
  uint64_t v88 = AssociatedConformanceWitness;
  uint64_t v89 = AssociatedTypeWitness;
  uint64_t v13 = swift_getAssociatedConformanceWitness();
  uint64_t v14 = type metadata accessor for Range();
  uint64_t v107 = *(void *)(v14 - 8);
  uint64_t v15 = MEMORY[0x1895F8858](v14);
  uint64_t v106 = (char *)&v82 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = MEMORY[0x1895F8858](v15);
  uint64_t v112 = (char *)&v82 - v18;
  uint64_t v19 = *((void *)v6 - 1);
  MEMORY[0x1895F8858](v17);
  uint64_t v21 = (char *)&v82 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = swift_getAssociatedTypeWitness();
  uint64_t v115 = swift_getTupleTypeMetadata2();
  uint64_t v94 = type metadata accessor for Optional();
  uint64_t v93 = *(void *)(v94 - 8);
  MEMORY[0x1895F8858](v94);
  uint64_t v103 = (char *)&v82 - v23;
  uint64_t v104 = swift_getTupleTypeMetadata2();
  uint64_t v92 = type metadata accessor for Optional();
  uint64_t v91 = *(void *)(v92 - 8);
  uint64_t v24 = MEMORY[0x1895F8858](v92);
  unint64_t v102 = (char *)&v82 - v25;
  uint64_t v83 = *(void *)(v22 - 8);
  uint64_t v26 = MEMORY[0x1895F8858](v24);
  uint64_t v85 = (char *)&v82 - v27;
  uint64_t v28 = MEMORY[0x1895F8858](v26);
  uint64_t v84 = (char *)&v82 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v28);
  uint64_t v31 = (char *)&v82 - v30;
  uint64_t v100 = v32;
  uint64_t v33 = a2;
  uint64_t v110 = *(void (**)(char *, uint64_t, uint64_t))(v32 + 16);
  v110((char *)&v82 - v30, a2, v9);
  uint64_t v117 = v14;
  uint64_t v34 = v9;
  uint64_t v35 = (void (*)(char *, char *, uint64_t))(v33 + *(int *)(v14 + 36));
  uint64_t v99 = *(void (**)(uint64_t, char *, void (*)(void, void, void), uint64_t))(v116 + 24);
  uint64_t v105 = v19;
  uint64_t v87 = *(void (**)(char *, uint64_t, void *))(v19 + 16);
  v87(v21, v108, v6);
  uint64_t v36 = v35;
  if ((dispatch thunk of static Comparable.<= infix(_:_:)() & 1) != 0)
  {
    uint64_t v98 = v13;
    uint64_t v109 = v22;
    uint64_t v118 = v6;
    unint64_t v97 = v31;
    uint64_t v90 = v35;
    uint64_t v96 = v21;
    while (1)
    {
      uint64_t v37 = v113;
      uint64_t v38 = TupleTypeMetadata2;
      uint64_t v39 = &v113[*(int *)(TupleTypeMetadata2 + 48)];
      uint64_t v40 = v31;
      uint64_t v41 = v110;
      v110(v113, (uint64_t)v40, v34);
      v41(v39, (uint64_t)v36, v34);
      uint64_t v42 = v111;
      uint64_t v43 = &v111[*(int *)(v38 + 48)];
      v41(v111, (uint64_t)v37, v34);
      v41(v43, (uint64_t)v39, v34);
      uint64_t v44 = v100;
      uint64_t v45 = *(void (**)(char *, char *, uint64_t))(v100 + 32);
      uint64_t v46 = v106;
      v45(v106, v42, v34);
      uint64_t v47 = *(void (**)(char *, uint64_t))(v44 + 8);
      v47(v43, v34);
      uint64_t v48 = &v42[*(int *)(v38 + 48)];
      v45(v42, v37, v34);
      v45(v48, v39, v34);
      uint64_t v49 = v117;
      uint64_t v50 = v48;
      uint64_t v31 = (char *)v45;
      v45(&v46[*(int *)(v117 + 36)], v50, v34);
      uint64_t v95 = v47;
      v47(v42, v34);
      uint64_t v51 = v107;
      uint64_t v36 = *(void (**)(char *, char *, uint64_t))(v107 + 32);
      uint64_t v52 = v112;
      v36(v112, v46, v49);
      uint64_t v13 = (uint64_t)v103;
      uint64_t v53 = v96;
      v99(v101, v52, (void (*)(void, void, void))v118, v116);
      uint64_t v54 = v49;
      uint64_t v55 = v118;
      (*(void (**)(char *, uint64_t))(v51 + 8))(v52, v54);
      (*(void (**)(char *, void (*)(char *, uint64_t, uint64_t)))(v105 + 8))(v53, v55);
      (*(void (**)(uint64_t, uint64_t))(v93 + 8))(v13, v94);
      uint64_t v56 = v102;
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v104 - 8) + 56LL))(v102, 1LL, 1LL);
      (*(void (**)(char *, uint64_t))(v91 + 8))(v56, v92);
      uint64_t v13 = v98;
      uint64_t v31 = v97;
      uint64_t v36 = v90;
      if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
      {
        v95(v31, v34);
        uint64_t v81 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(swift_getTupleTypeMetadata2() - 8) + 56LL);
        return v81((uint64_t)v86, 1LL, 1LL);
      }

      swift_checkMetadataState();
      dispatch thunk of Collection.formIndex(after:)();
      v87(v53, v108, v55);
      if ((dispatch thunk of static Comparable.<= infix(_:_:)() & 1) == 0) {
        goto LABEL_6;
      }
    }
  }

  else
  {
LABEL_6:
    __break(1u);
  }

  uint64_t v57 = v13 + *(int *)(v115 + 48);
  uint64_t v58 = v104;
  uint64_t v59 = v102;
  uint64_t v60 = &v102[*(int *)(v104 + 48)];
  uint64_t v61 = (void (*)(char *, char *, uint64_t))v31;
  ((void (*)(char *, uint64_t, uint64_t))v31)(v102, v13, v34);
  uint64_t v62 = *(void (**)(char *, uint64_t, uint64_t))(v83 + 32);
  uint64_t v63 = v109;
  v62(v60, v57, v109);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v58 - 8) + 56LL))(v59, 0LL, 1LL, v58);
  uint64_t v64 = &v59[*(int *)(v58 + 48)];
  uint64_t v65 = v84;
  v61(v84, v59, v34);
  uint64_t v118 = v62;
  v62(v85, (uint64_t)v64, v63);
  uint64_t v66 = swift_getTupleTypeMetadata2();
  uint64_t v67 = *(int *)(v66 + 48);
  uint64_t v68 = v97;
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if ((result & 1) != 0)
  {
    uint64_t v115 = (uint64_t)&v86[v67];
    uint64_t v116 = v66;
    uint64_t v70 = v113;
    uint64_t v71 = TupleTypeMetadata2;
    uint64_t v72 = &v113[*(int *)(TupleTypeMetadata2 + 48)];
    v61(v113, v68, v34);
    v61(v72, v65, v34);
    uint64_t v73 = (void (*)(char *, char *, uint64_t))v110;
    char v74 = v111;
    uint64_t v75 = &v111[*(int *)(v71 + 48)];
    v110(v111, (uint64_t)v70, v34);
    v73(v75, v72, v34);
    uint64_t v76 = v112;
    v61(v112, v74, v34);
    uint64_t v77 = v95;
    v95(v75, v34);
    uint64_t v78 = &v74[*(int *)(v71 + 48)];
    v61(v74, v70, v34);
    v61(v78, v72, v34);
    uint64_t v79 = v117;
    v61(&v76[*(int *)(v117 + 36)], v78, v34);
    v77(v74, v34);
    uint64_t v80 = v86;
    v36(v86, v76, v79);
    v118((char *)v115, (uint64_t)v85, v109);
    return (*(uint64_t (**)(char *, void, uint64_t))(*(void *)(v116 - 8) + 56LL))(v80, 0LL, 1LL);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t protocol witness for MatchingCollectionSearcher.matchingSearch(_:_:) in conformance <> ConsumerSearcher<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for MatchingCollectionSearcher.matchingSearch(_:_:) in conformance <> ConsumerSearcher<A>( a1,  a2,  a3,  a4,  (uint64_t)&protocol conformance descriptor for <> ConsumerSearcher<A>,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MatchingStatelessCollectionSearcher.matchingSearch(_:_:));
}

uint64_t protocol witness for MatchingStatelessCollectionSearcher.matchingSearch(_:in:) in conformance <> ConsumerSearcher<A>@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  return ConsumerSearcher<>.matchingSearch(_:in:)(a1, a2, a3, *(void *)(a4 - 8), a5);
}

uint64_t ConsumerSearcher<>.matchingSearchBack(_:in:)@<X0>( void (*a1)(uint64_t, char *, uint64_t)@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5 = a4;
  unint64_t v125 = a1;
  uint64_t v92 = a5;
  uint64_t v95 = *(void *)(a4 + 8);
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v10 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v11 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v118 = (char *)&v89 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v11);
  unint64_t v120 = (char *)&v89 - v13;
  uint64_t v101 = AssociatedConformanceWitness;
  uint64_t v102 = AssociatedTypeWitness;
  uint64_t v14 = swift_getAssociatedConformanceWitness();
  uint64_t v15 = type metadata accessor for Range();
  uint64_t v112 = *(void *)(v15 - 8);
  uint64_t v16 = MEMORY[0x1895F8858](v15);
  uint64_t v111 = (char *)&v89 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = MEMORY[0x1895F8858](v16);
  uint64_t v119 = (char *)&v89 - v19;
  uint64_t v20 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v18);
  uint64_t v22 = (char *)&v89 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = swift_getAssociatedTypeWitness();
  uint64_t v122 = swift_getTupleTypeMetadata2();
  uint64_t v100 = type metadata accessor for Optional();
  uint64_t v99 = *(void *)(v100 - 8);
  MEMORY[0x1895F8858](v100);
  uint64_t v108 = (char *)&v89 - v24;
  uint64_t v109 = swift_getTupleTypeMetadata2();
  uint64_t v98 = type metadata accessor for Optional();
  uint64_t v97 = *(void *)(v98 - 8);
  uint64_t v25 = MEMORY[0x1895F8858](v98);
  uint64_t v107 = (char *)&v89 - v26;
  uint64_t v89 = *(void *)(v23 - 8);
  uint64_t v27 = MEMORY[0x1895F8858](v25);
  uint64_t v91 = (char *)&v89 - v28;
  uint64_t v29 = MEMORY[0x1895F8858](v27);
  uint64_t v96 = (char *)&v89 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = MEMORY[0x1895F8858](v29);
  uint64_t v90 = (char *)&v89 - v32;
  MEMORY[0x1895F8858](v31);
  uint64_t v34 = (char *)&v89 - v33;
  uint64_t v123 = v15;
  uint64_t v35 = &a2[*(int *)(v15 + 36)];
  uint64_t v106 = v36;
  uint64_t v117 = *(void (**)(char *, char *, uint64_t))(v36 + 16);
  v117((char *)&v89 - v33, v35, v10);
  uint64_t v113 = v5;
  uint64_t v105 = *(void (**)(void (*)(void, void, void), char *, uint64_t, uint64_t))(v5 + 24);
  uint64_t v110 = v20;
  uint64_t v37 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
  uint64_t v124 = v7;
  uint64_t v94 = v37;
  v37(v22, v115, v7);
  if ((dispatch thunk of static Comparable.<= infix(_:_:)() & 1) != 0)
  {
    uint64_t v93 = a2;
    uint64_t v116 = v23;
    uint64_t v104 = v14;
    uint64_t v103 = v34;
    while (1)
    {
      uint64_t v38 = v120;
      uint64_t v39 = TupleTypeMetadata2;
      uint64_t v40 = &v120[*(int *)(TupleTypeMetadata2 + 48)];
      uint64_t v41 = v117;
      v117(v120, a2, v10);
      v41(v40, v34, v10);
      uint64_t v42 = v118;
      uint64_t v43 = &v118[*(int *)(v39 + 48)];
      v41(v118, v38, v10);
      v41(v43, v40, v10);
      uint64_t v44 = v106;
      uint64_t v45 = *(void (**)(char *, char *, uint64_t))(v106 + 32);
      uint64_t v46 = v22;
      uint64_t v47 = v111;
      v45(v111, v42, v10);
      uint64_t v5 = *(void *)(v44 + 8);
      ((void (*)(char *, uint64_t))v5)(v43, v10);
      uint64_t v48 = &v42[*(int *)(v39 + 48)];
      v45(v42, v38, v10);
      v45(v48, v40, v10);
      uint64_t v49 = v123;
      uint64_t v50 = &v47[*(int *)(v123 + 36)];
      uint64_t v114 = v45;
      v45(v50, v48, v10);
      uint64_t v51 = v42;
      uint64_t v52 = v124;
      ((void (*)(char *, uint64_t))v5)(v51, v10);
      uint64_t v53 = v112;
      a2 = *(char **)(v112 + 32);
      uint64_t v54 = v119;
      ((void (*)(char *, char *, uint64_t))a2)(v119, v47, v49);
      uint64_t v55 = v108;
      v105((void (*)(void, void, void))v125, v54, v52, v113);
      uint64_t v56 = *(void (**)(char *, uint64_t))(v53 + 8);
      uint64_t v34 = v55;
      v56(v54, v49);
      (*(void (**)(char *, uint64_t))(v110 + 8))(v46, v52);
      uint64_t v22 = v46;
      (*(void (**)(char *, uint64_t))(v99 + 8))(v34, v100);
      uint64_t v57 = v107;
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v109 - 8) + 56LL))(v107, 1LL, 1LL);
      (*(void (**)(char *, uint64_t))(v97 + 8))(v57, v98);
      swift_checkMetadataState();
      uint64_t v58 = v96;
      dispatch thunk of Collection.startIndex.getter();
      uint64_t v34 = v103;
      char v59 = dispatch thunk of static Equatable.== infix(_:_:)();
      ((void (*)(char *, uint64_t))v5)(v58, v10);
      if ((v59 & 1) != 0)
      {
        ((void (*)(char *, uint64_t))v5)(v34, v10);
        uint64_t v88 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(swift_getTupleTypeMetadata2() - 8) + 56LL);
        return v88(v92, 1LL, 1LL);
      }

      uint64_t v60 = v124;
      swift_getAssociatedConformanceWitness();
      dispatch thunk of BidirectionalCollection.formIndex(before:)();
      v94(v22, v115, v60);
      a2 = v93;
      if ((dispatch thunk of static Comparable.<= infix(_:_:)() & 1) == 0) {
        goto LABEL_6;
      }
    }
  }

  else
  {
LABEL_6:
    __break(1u);
  }

  unint64_t v125 = (void (*)(uint64_t, char *, uint64_t))a2;
  uint64_t v61 = (void (*)(char *, uint64_t))v5;
  uint64_t v62 = &v34[*(int *)(v122 + 48)];
  uint64_t v63 = v109;
  uint64_t v64 = v107;
  uint64_t v65 = &v107[*(int *)(v109 + 48)];
  uint64_t v66 = v34;
  uint64_t v67 = v114;
  v114(v107, v66, v10);
  uint64_t v68 = *(void (**)(char *, char *, uint64_t))(v89 + 32);
  uint64_t v69 = v116;
  v68(v65, v62, v116);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v63 - 8) + 56LL))(v64, 0LL, 1LL, v63);
  uint64_t v70 = &v64[*(int *)(v63 + 48)];
  uint64_t v71 = v90;
  v67(v90, v64, v10);
  v68(v91, v70, v69);
  uint64_t v72 = swift_getTupleTypeMetadata2();
  uint64_t v73 = *(int *)(v72 + 48);
  char v74 = v103;
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if ((result & 1) != 0)
  {
    uint64_t v124 = v92 + v73;
    uint64_t v76 = v120;
    uint64_t v77 = TupleTypeMetadata2;
    uint64_t v78 = &v120[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v122 = (uint64_t)v68;
    uint64_t v79 = v114;
    v114(v120, v71, v10);
    v79(v78, v74, v10);
    uint64_t v80 = *(int *)(v77 + 48);
    uint64_t v82 = v117;
    uint64_t v81 = v118;
    uint64_t v115 = v72;
    uint64_t v83 = &v118[v80];
    v117(v118, v76, v10);
    v82(v83, v78, v10);
    uint64_t v84 = v119;
    v79(v119, v81, v10);
    v61(v83, v10);
    uint64_t v85 = &v81[*(int *)(v77 + 48)];
    v79(v81, v76, v10);
    v79(v85, v78, v10);
    uint64_t v86 = v123;
    v79(&v84[*(int *)(v123 + 36)], v85, v10);
    v61(v81, v10);
    uint64_t v87 = v92;
    v125(v92, v84, v86);
    ((void (*)(uint64_t, char *, uint64_t))v122)(v124, v91, v116);
    return (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v115 - 8) + 56LL))(v87, 0LL, 1LL);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t protocol witness for BackwardMatchingCollectionSearcher.matchingSearchBack(_:_:) in conformance <> ConsumerSearcher<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for MatchingCollectionSearcher.matchingSearch(_:_:) in conformance <> ConsumerSearcher<A>( a1,  a2,  a3,  a4,  (uint64_t)&protocol conformance descriptor for <> ConsumerSearcher<A>,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))BackwardMatchingStatelessCollectionSearcher.matchingSearchBack(_:_:));
}

uint64_t protocol witness for MatchingCollectionSearcher.matchingSearch(_:_:) in conformance <> ConsumerSearcher<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v12 = *(void *)(a4 - 8);
  uint64_t v10 = MEMORY[0x186E17958](a5, a3, &v12);
  return a6(a1, a2, a3, v10);
}

uint64_t protocol witness for BackwardMatchingStatelessCollectionSearcher.matchingSearchBack(_:in:) in conformance <> ConsumerSearcher<A>@<X0>( void (*a1)(uint64_t, char *, uint64_t)@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return ConsumerSearcher<>.matchingSearchBack(_:in:)(a1, a2, a3, *(void *)(a4 - 8), a5);
}

uint64_t NaivePatternSearcher.search(_:in:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, char *a4@<X8>)
{
  uint64_t v157 = a2;
  uint64_t v161 = a1;
  uint64_t v136 = a4;
  uint64_t v5 = a3[5];
  uint64_t v142 = a3[3];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v156 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v155 = (char *)&v122 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = MEMORY[0x1895F8858](v6);
  uint64_t v154 = (char *)&v122 - v9;
  MEMORY[0x1895F8858](v8);
  uint64_t v159 = (char *)&v122 - v10;
  uint64_t v11 = a3[4];
  uint64_t v135 = a3;
  uint64_t v12 = (char *)a3[2];
  uint64_t v134 = swift_getAssociatedTypeWitness();
  uint64_t v133 = *(void *)(v134 - 8);
  MEMORY[0x1895F8858](v134);
  uint64_t v132 = (char *)&v122 - v13;
  uint64_t v14 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v15 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  unint64_t v141 = (char *)&v122 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v15);
  uint64_t v139 = (char *)&v122 - v17;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v147 = type metadata accessor for Range();
  uint64_t v143 = *(void *)(v147 - 8);
  uint64_t v18 = MEMORY[0x1895F8858](v147);
  uint64_t v138 = (char *)&v122 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v18);
  uint64_t v140 = (char *)&v122 - v20;
  uint64_t v127 = type metadata accessor for Optional();
  uint64_t v126 = *(void *)(v127 - 8);
  MEMORY[0x1895F8858](v127);
  uint64_t v131 = (char *)&v122 - v21;
  uint64_t v22 = (void *)swift_getAssociatedTypeWitness();
  uint64_t v165 = type metadata accessor for Optional();
  unint64_t v151 = *(void **)(v165 - 8);
  uint64_t v23 = MEMORY[0x1895F8858](v165);
  uint64_t v25 = (char *)&v122 - v24;
  uint64_t v26 = *(v22 - 1);
  uint64_t v27 = MEMORY[0x1895F8858](v23);
  unint64_t v153 = (char *)&v122 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = MEMORY[0x1895F8858](v27);
  unint64_t v152 = (char *)&v122 - v30;
  uint64_t v31 = MEMORY[0x1895F8858](v29);
  uint64_t v33 = (char *)&v122 - v32;
  uint64_t v34 = MEMORY[0x1895F8858](v31);
  unint64_t v129 = (char *)&v122 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v36 = MEMORY[0x1895F8858](v34);
  uint64_t v158 = (char *)&v122 - v37;
  uint64_t v38 = MEMORY[0x1895F8858](v36);
  uint64_t v137 = (char *)&v122 - v39;
  MEMORY[0x1895F8858](v38);
  uint64_t v41 = (char *)&v122 - v40;
  uint64_t v146 = v42;
  unint64_t v144 = *(void (**)(char *, uint64_t, uint64_t))(v42 + 16);
  v144((char *)&v122 - v40, v157, v14);
  Collection.first.getter();
  uint64_t v43 = v147;
  if ((*(unsigned int (**)(char *, uint64_t, void *))(v26 + 48))(v25, 1LL, v22) == 1)
  {
    ((void (*)(char *, uint64_t))v151[1])(v25, v165);
    uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
    if ((result & 1) != 0)
    {
      uint64_t v45 = v41;
      uint64_t v46 = TupleTypeMetadata2;
      uint64_t v47 = v139;
      uint64_t v48 = &v139[*(int *)(TupleTypeMetadata2 + 48)];
      uint64_t v49 = (void (*)(char *, char *, uint64_t))v144;
      v144(v139, (uint64_t)v45, v14);
      uint64_t v50 = v146;
      uint64_t v51 = *(void (**)(char *, char *, uint64_t))(v146 + 32);
      v51(v48, v45, v14);
      uint64_t v52 = v141;
      uint64_t v53 = &v141[*(int *)(v46 + 48)];
      v49(v141, v47, v14);
      v49(v53, v48, v14);
      uint64_t v54 = v140;
      v51(v140, v52, v14);
      uint64_t v55 = *(void (**)(char *, uint64_t))(v50 + 8);
      v55(v53, v14);
      uint64_t v56 = &v52[*(int *)(v46 + 48)];
      v51(v52, v47, v14);
      v51(v56, v48, v14);
      uint64_t v57 = v147;
      v51(&v54[*(int *)(v147 + 36)], v56, v14);
      v55(v52, v14);
      uint64_t v58 = v143;
      char v59 = v136;
      (*(void (**)(char *, char *, uint64_t))(v143 + 32))(v136, v54, v57);
      return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v58 + 56))(v59, 0LL, 1LL, v57);
    }

    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }

  uint64_t v165 = v26;
  uint64_t v60 = *(void (**)(char *, char *, void *))(v26 + 32);
  uint64_t v130 = v33;
  unint64_t v151 = v22;
  v60(v33, v25, v22);
  v157 += *(int *)(v43 + 36);
  if ((dispatch thunk of static Comparable.<= infix(_:_:)() & 1) == 0)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v61 = *(void (**)(void, void, void))(v146 + 32);
  uint64_t v164 = v14;
  unint64_t v149 = v12;
  uint64_t v163 = v11;
  uint64_t v123 = v41;
  unint64_t v125 = v61;
LABEL_6:
  uint64_t v62 = TupleTypeMetadata2;
  uint64_t v63 = v139;
  uint64_t v64 = &v139[*(int *)(TupleTypeMetadata2 + 48)];
  v61(v139, v41, v14);
  uint64_t v65 = (void (*)(char *, char *, uint64_t))v144;
  v144(v64, v157, v14);
  uint64_t v66 = v141;
  uint64_t v67 = &v141[*(int *)(v62 + 48)];
  v65(v141, v63, v14);
  v65(v67, v64, v14);
  v61(v138, v66, v14);
  uint64_t v68 = *(void (**)(char *, uint64_t))(v146 + 8);
  v68(v67, v14);
  uint64_t v69 = &v66[*(int *)(TupleTypeMetadata2 + 48)];
  v61(v66, v63, v14);
  v61(v69, v64, v14);
  uint64_t v70 = v147;
  uint64_t v71 = v138;
  v61(&v138[*(int *)(v147 + 36)], v69, v14);
  unint64_t v128 = v68;
  v68(v66, v14);
  uint64_t v72 = v143;
  uint64_t v73 = v140;
  uint64_t v124 = *(void (**)(char *, char *, uint64_t))(v143 + 32);
  v124(v140, v71, v70);
  char v74 = (void (*)(char *, char *, uint64_t))v61;
  uint64_t v75 = v132;
  dispatch thunk of Collection.subscript.getter();
  (*(void (**)(char *, uint64_t))(v72 + 8))(v73, v70);
  uint64_t v76 = v134;
  swift_getAssociatedConformanceWitness();
  uint64_t v77 = v131;
  uint64_t v78 = v130;
  uint64_t v150 = v135[6];
  Collection<>.firstIndex(of:)();
  (*(void (**)(char *, uint64_t))(v133 + 8))(v75, v76);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v146 + 48))(v77, 1LL, v14) != 1)
  {
    uint64_t v79 = v137;
    v74(v137, v77, v14);
    uint64_t v80 = v158;
    v144(v158, (uint64_t)v79, v14);
    uint64_t v81 = v159;
    uint64_t v82 = v142;
    dispatch thunk of Collection.startIndex.getter();
    while (1)
    {
      dispatch thunk of Collection.formIndex(after:)();
      dispatch thunk of Collection.formIndex(after:)();
      uint64_t v12 = v80;
      uint64_t v83 = v156;
      uint64_t v84 = v154;
      uint64_t v85 = v81;
      uint64_t v86 = AssociatedTypeWitness;
      (*(void (**)(char *, char *, uint64_t))(v156 + 16))(v154, v85, AssociatedTypeWitness);
      uint64_t v87 = v155;
      dispatch thunk of Collection.endIndex.getter();
      uint64_t v88 = v5;
      uint64_t v89 = v82;
      swift_getAssociatedConformanceWitness();
      char v90 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v22 = *(void **)(v83 + 8);
      ((void (*)(char *, uint64_t))v22)(v87, v86);
      ((void (*)(char *, uint64_t))v22)(v84, v86);
      if ((v90 & 1) != 0) {
        break;
      }
      uint64_t v91 = v164;
      if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
      {
        ((void (*)(char *, uint64_t))v22)(v159, AssociatedTypeWitness);
        uint64_t v121 = v128;
        v128(v12, v91);
        v121(v137, v91);
        (*(void (**)(char *, void *))(v165 + 8))(v130, v151);
        return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v143 + 56))(v136, 1LL, 1LL, v147);
      }

      uint64_t v148 = (void (*)(char *, uint64_t))v22;
      uint64_t v12 = v149;
      uint64_t v92 = (void (*)(char *, void))dispatch thunk of Collection.subscript.read();
      uint64_t v93 = *(void (**)(char *))(v165 + 16);
      uint64_t v94 = v151;
      uint64_t v95 = v152;
      v93(v152);
      v92(v166, 0LL);
      uint64_t v81 = v159;
      uint64_t v96 = v89;
      uint64_t v5 = v88;
      uint64_t v82 = v96;
      uint64_t v97 = dispatch thunk of Collection.subscript.read();
      uint64_t v98 = v153;
      v93(v153);
      ((void (*)(char *, void))v97)(v166, 0LL);
      LOBYTE(v97) = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v99 = *(void (**)(char *, void *))(v165 + 8);
      v99(v98, v94);
      uint64_t v100 = v95;
      uint64_t v80 = v158;
      uint64_t v101 = v94;
      uint64_t v14 = v164;
      v99(v100, v101);
      if ((v97 & 1) == 0)
      {
        v148(v81, AssociatedTypeWitness);
        uint64_t v102 = v80;
        uint64_t v103 = v128;
        v128(v102, v14);
        uint64_t v104 = v129;
        uint64_t v22 = v137;
        dispatch thunk of Collection.index(after:)();
        v103((char *)v22, v14);
        uint64_t v41 = v123;
        uint64_t v61 = v125;
        v125(v123, v104, v14);
        if ((dispatch thunk of static Comparable.<= infix(_:_:)() & 1) != 0) {
          goto LABEL_6;
        }
        goto LABEL_12;
      }
    }

LABEL_13:
    ((void (*)(char *, uint64_t))v22)(v159, AssociatedTypeWitness);
    (*(void (**)(char *, void *))(v165 + 8))(v130, v151);
    uint64_t v105 = v129;
    uint64_t v106 = v164;
    uint64_t v107 = (void (*)(char *, char *, uint64_t))v125;
    v125(v129, v12, v164);
    uint64_t v108 = v137;
    uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
    if ((result & 1) != 0)
    {
      uint64_t v109 = TupleTypeMetadata2;
      uint64_t v110 = v107;
      uint64_t v111 = v139;
      uint64_t v112 = &v139[*(int *)(TupleTypeMetadata2 + 48)];
      v110(v139, v108, v106);
      v110(v112, v105, v106);
      uint64_t v113 = v141;
      uint64_t v114 = &v141[*(int *)(v109 + 48)];
      uint64_t v115 = (void (*)(char *, char *, uint64_t))v144;
      v144(v141, (uint64_t)v111, v106);
      v115(v114, v112, v106);
      uint64_t v116 = v140;
      v110(v140, v113, v106);
      uint64_t v117 = v128;
      v128(v114, v106);
      uint64_t v118 = &v113[*(int *)(v109 + 48)];
      v110(v113, v111, v106);
      v110(v118, v112, v106);
      uint64_t v119 = v147;
      v110(&v116[*(int *)(v147 + 36)], v118, v106);
      v117(v113, v106);
      unint64_t v120 = v136;
      v124(v136, v116, v119);
      return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v143 + 56))(v120, 0LL, 1LL, v119);
    }

    goto LABEL_20;
  }

  (*(void (**)(char *, void *))(v165 + 8))(v78, v151);
  (*(void (**)(char *, uint64_t))(v126 + 8))(v77, v127);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v143 + 56))(v136, 1LL, 1LL, v147);
}

  *uint64_t v1 = v3;
  return result;
}

  *uint64_t v1 = v3;
  return result;
}

    type metadata accessor for DSLTree.Atom(0LL);
    uint64_t v26 = swift_allocBox();
    outlined init with copy of MEProgram(a1, v27, type metadata accessor for DSLTree._AST.Reference);
    swift_storeEnumTagMultiPayload();
    uint64_t v28 = *(char **)(v2 + 8);
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v28 + 2) + 1LL,  1,  v28,  &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
    }
    uint64_t v30 = *((void *)v28 + 2);
    uint64_t v29 = *((void *)v28 + 3);
    if (v30 >= v29 >> 1) {
      uint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v29 > 1),  v30 + 1,  1,  v28,  &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
    }
    *((void *)v28 + 2) = v30 + 1;
    uint64_t v31 = &v28[24 * v30];
    *((void *)v31 + 4) = v26 | 0x4000000000000000LL;
    *((void *)v31 + 5) = 0LL;
    v31[48] = 1;
    uint64_t result = swift_release();
    goto LABEL_28;
  }

  if (v15 == *MEMORY[0x18961C938])
  {
    (*(void (**)(uint64_t *, uint64_t))(v12 + 96))(v14, v11);
    (*(void (**)(char *, uint64_t *, uint64_t))(v5 + 32))(v8, v14, v4);
    uint64_t v20 = AST.Atom.Number.value.getter();
    uint64_t v22 = v21;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    if ((v22 & 1) != 0) {
      goto LABEL_13;
    }
    if (v20 >= 0) {
      uint64_t v23 = 43LL;
    }
    else {
      uint64_t v23 = 45LL;
    }
    uint64_t v44 = 8087388LL;
    uint64_t v45 = 0xE300000000000000LL;
    uint64_t v24 = 0xE100000000000000LL;
    String.append(_:)(*(Swift::String *)&v23);
    swift_bridgeObjectRelease();
    if ((v20 & 0x8000000000000000LL) == 0 || (v25 = __OFSUB__(0LL, v20), uint64_t v20 = -v20, !v25))
    {
      uint64_t v43 = v20;
LABEL_21:
      uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter();
      goto LABEL_22;
    }

    __break(1u);
  }

  else if (v15 == *MEMORY[0x18961C928])
  {
    (*(void (**)(uint64_t *, uint64_t))(v12 + 96))(v14, v11);
    uint64_t v33 = *v14;
    uint64_t v34 = v14[1];
    uint64_t v44 = 8087388LL;
    uint64_t v45 = 0xE300000000000000LL;
    uint64_t v35 = v34;
LABEL_22:
    String.append(_:)(*(Swift::String *)&v33);
    swift_bridgeObjectRelease();
    v36._unint64_t countAndFlagsBits = 125LL;
    v36._object = (void *)0xE100000000000000LL;
    String.append(_:)(v36);
    goto LABEL_23;
  }

  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

      uint64_t v13 = ~v8 + a2;
      if (v11 < 4)
      {
        if ((_DWORD)v11)
        {
          uint64_t v14 = v13 & ~(-1 << (8 * v11));
          bzero(a1, v11);
          if ((_DWORD)v11 == 3)
          {
            *(_WORD *)a1 = v14;
            a1[2] = BYTE2(v14);
          }

          else if ((_DWORD)v11 == 2)
          {
            *(_WORD *)a1 = v14;
          }

          else
          {
            *a1 = v14;
          }
        }
      }

      else
      {
        bzero(a1, v11);
        *(_DWORD *)a1 = v13;
      }

      __asm { BR              X10 }
    }

    uint64_t v12 = ((a3 - v8 + ~(-1 << (8 * v11))) >> (8 * v11)) + 1;
    if (HIWORD(v12))
    {
      uint64_t v6 = 4u;
      if (v8 >= a2) {
        goto LABEL_20;
      }
      goto LABEL_13;
    }

    if (v12 >= 0x100) {
      uint64_t v6 = 2;
    }
    else {
      uint64_t v6 = v12 > 1;
    }
  }

  if (v8 >= a2) {
    goto LABEL_20;
  }
  goto LABEL_13;
}

      uint64_t v12 = ~v9 + a2;
      if (v10 < 4)
      {
        if ((_DWORD)v10)
        {
          uint64_t v13 = v12 & ~(-1 << (8 * v10));
          bzero(a1, v10);
          if ((_DWORD)v10 == 3)
          {
            *(_WORD *)a1 = v13;
            a1[2] = BYTE2(v13);
          }

          else if ((_DWORD)v10 == 2)
          {
            *(_WORD *)a1 = v13;
          }

          else
          {
            *a1 = v13;
          }
        }
      }

      else
      {
        bzero(a1, v10);
        *(_DWORD *)a1 = v12;
      }

      __asm { BR              X10 }
    }

    uint64_t v11 = ((a3 - v9 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
    if (HIWORD(v11))
    {
      uint64_t v6 = 4u;
      if (v9 >= a2) {
        goto LABEL_20;
      }
      goto LABEL_13;
    }

    if (v11 >= 0x100) {
      uint64_t v6 = 2;
    }
    else {
      uint64_t v6 = v11 > 1;
    }
  }

  if (v9 >= a2) {
    goto LABEL_20;
  }
  goto LABEL_13;
}

unint64_t specialized Collection.first.getter(unint64_t a1, unint64_t a2)
{
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    _StringGuts.validateScalarIndex(_:)(0xFuLL, a1, a2);
    if ((a2 & 0x1000000000000000LL) != 0)
    {
      unsigned int v5 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }

    else
    {
      if ((a2 & 0x2000000000000000LL) == 0 && (a1 & 0x1000000000000000LL) == 0) {
        _StringObject.sharedUTF8.getter();
      }
      unsigned int v5 = _decodeScalar(_:startingAt:)();
    }
  }

  else
  {
    unsigned int v5 = 0;
  }

  return v5 | ((unint64_t)(v2 == 0) << 32);
}

uint64_t specialized Collection.first.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2) {
    return String.subscript.getter();
  }
  else {
    return 0LL;
  }
}

uint64_t protocol witness for CollectionSearcher.state(for:in:) in conformance NaivePatternSearcher<A, B>@<X0>( uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return StatelessCollectionSearcher.state(for:in:)(a1, a3);
}

uint64_t protocol witness for CollectionSearcher.search(_:_:) in conformance NaivePatternSearcher<A, B>@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v8 = MEMORY[0x186E17958](&protocol conformance descriptor for NaivePatternSearcher<A, B>, a3);
  return StatelessCollectionSearcher.search(_:_:)(a1, a2, a3, v8, a4);
}

unint64_t specialized BidirectionalCollection.last.getter(unint64_t a1, unint64_t a2)
{
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2)
  {
    unsigned int v12 = 0;
    goto LABEL_28;
  }

  uint64_t v5 = 7LL;
  if (((a2 >> 60) & ((a1 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v5 = 11LL;
  }
  unint64_t v6 = _StringGuts.validateInclusiveScalarIndex(_:)(v5 | (v2 << 16), a1, a2);
  if (v6 < 0x4000)
  {
    __break(1u);
    goto LABEL_30;
  }

  if ((a2 & 0x1000000000000000LL) != 0)
  {
LABEL_30:
    unint64_t v18 = String.UnicodeScalarView._foreignIndex(before:)();
    _StringGuts.validateScalarIndex(_:)(v18, a1, a2);
    unsigned int v12 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    goto LABEL_28;
  }

  if ((a2 & 0x2000000000000000LL) != 0)
  {
    unint64_t v20 = a1;
    uint64_t v21 = a2 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v13 = (char *)&v20 + (v6 >> 16);
    if ((*(v13 - 1) & 0xC0) == 0x80)
    {
      uint64_t v9 = 0LL;
      uint64_t v14 = v13 - 2;
      do
        int v15 = v14[v9--] & 0xC0;
      while (v15 == 128);
      goto LABEL_20;
    }

LABEL_21:
    uint64_t v16 = 1LL;
    goto LABEL_22;
  }

  if ((a1 & 0x1000000000000000LL) != 0)
  {
    uint64_t v7 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }

  else
  {
    unint64_t v19 = v6;
    uint64_t v7 = _StringObject.sharedUTF8.getter();
    unint64_t v6 = v19;
  }

  unint64_t v8 = (v6 >> 16) + v7;
  if ((*(_BYTE *)(v8 - 1) & 0xC0) != 0x80) {
    goto LABEL_21;
  }
  uint64_t v9 = 0LL;
  unint64_t v10 = v8 - 2;
  do
    int v11 = *(_BYTE *)(v10 + v9--) & 0xC0;
  while (v11 == 128);
LABEL_20:
  uint64_t v16 = 1 - v9;
LABEL_22:
  _StringGuts.validateScalarIndex(_:)((v6 - (v16 << 16)) & 0xFFFFFFFFFFFF0000LL | 5, a1, a2);
  if ((a2 & 0x2000000000000000LL) != 0)
  {
    unint64_t v20 = a1;
    uint64_t v21 = a2 & 0xFFFFFFFFFFFFFFLL;
  }

  else if ((a1 & 0x1000000000000000LL) == 0)
  {
    _StringObject.sharedUTF8.getter();
  }

  unsigned int v12 = _decodeScalar(_:startingAt:)();
LABEL_28:
  LOBYTE(v20) = v2 == 0;
  return v12 | ((unint64_t)(v2 == 0) << 32);
}

    int v11 = (v19 - 1) & v19;
    uint64_t v17 = __clz(__rbit64(v19)) + (v8 << 6);
LABEL_22:
    uint64_t v21 = 8 * v17;
    uint64_t v22 = *(void *)(*(void *)(v5 + 48) + v21);
    uint64_t v23 = *(void *)(*(void *)(v5 + 56) + v21);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v22);
    uint64_t result = Hasher._finalize()();
    uint64_t v24 = -1LL << *(_BYTE *)(v7 + 32);
    uint64_t v25 = result & ~v24;
    uint64_t v26 = v25 >> 6;
    if (((-1LL << v25) & ~*(void *)(v13 + 8 * (v25 >> 6))) != 0)
    {
      uint64_t v14 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v13 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v27 = 0;
      uint64_t v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }

        uint64_t v29 = v26 == v28;
        if (v26 == v28) {
          uint64_t v26 = 0LL;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v13 + 8 * v26);
      }

      while (v30 == -1);
      uint64_t v14 = __clz(__rbit64(~v30)) + (v26 << 6);
    }

    *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
    int v15 = 8 * v14;
    *(void *)(*(void *)(v7 + 48) + v15) = v22;
    *(void *)(*(void *)(v7 + 56) + v15) = v23;
    ++*(void *)(v7 + 16);
  }

  unint64_t v20 = v18 + 2;
  if (v20 >= v12)
  {
LABEL_31:
    if ((v39 & 1) == 0)
    {
      uint64_t result = swift_release();
      unint64_t v3 = v2;
      goto LABEL_44;
    }

    uint64_t v31 = *(_BYTE *)(v5 + 32);
    uint64_t v32 = 1LL << v31;
    if (1LL << v31 >= 64)
    {
      uint64_t v33 = (unint64_t)(v32 + 63) >> 6;
      if ((v31 & 0x3Fu) >= 8)
      {
        uint64_t v34 = v33 & 0x3FFFFFFFFFFFFFCLL;
        uint64_t v35 = (_OWORD *)(v5 + 80);
        uint64_t v36 = v33 & 0x3FFFFFFFFFFFFFCLL;
        unint64_t v3 = v2;
        do
        {
          *(v35 - 1) = 0uLL;
          *uint64_t v35 = 0uLL;
          v35 += 2;
          v36 -= 4LL;
        }

        while (v36);
        if (v33 == v34) {
          goto LABEL_42;
        }
      }

      else
      {
        uint64_t v34 = 0LL;
        unint64_t v3 = v2;
      }

      uint64_t v37 = v33 - v34;
      uint64_t v38 = (void *)(v5 + 8 * v34 + 64);
      do
      {
        *v38++ = 0LL;
        --v37;
      }

      while (v37);
    }

    else
    {
      *uint64_t v40 = -1LL << v32;
      unint64_t v3 = v2;
    }

      __asm { BR              X11 }
    }

    if (v13 >= 0x100) {
      unint64_t v6 = 2;
    }
    else {
      unint64_t v6 = v13 > 1;
    }
  }

  if (v9 < a2) {
    goto LABEL_14;
  }
  goto LABEL_21;
}

uint64_t specialized BidirectionalCollection.last.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v5 = v3 - 1;
    uint64_t v6 = type metadata accessor for DSLTree.CustomCharacterClass.Member(0LL);
    uint64_t v7 = *(void *)(v6 - 8);
    outlined init with copy of MEProgram( a1 + ((*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
    + *(void *)(v7 + 72) * v5,
      a2,
      type metadata accessor for DSLTree.CustomCharacterClass.Member);
    unint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56);
    uint64_t v9 = a2;
    uint64_t v10 = 0LL;
    uint64_t v11 = v6;
  }

  else
  {
    uint64_t v11 = type metadata accessor for DSLTree.CustomCharacterClass.Member(0LL);
    unint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL);
    uint64_t v9 = a2;
    uint64_t v10 = 1LL;
  }

  return v8(v9, v10, 1LL, v11);
}

uint64_t protocol witness for BackwardCollectionSearcher.backwardState(for:in:) in conformance <> NaivePatternSearcher<A, B>@<X0>( uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  int8x16_t v7 = vextq_s8(*(int8x16_t *)(a3 - 16), *(int8x16_t *)(a3 - 16), 8uLL);
  MEMORY[0x186E17958](&protocol conformance descriptor for <> NaivePatternSearcher<A, B>, a2, &v7);
  return BackwardStatelessCollectionSearcher.backwardState(for:in:)(a1, a4);
}

uint64_t PatternOrEmpty.state(for:in:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = v5;
  uint64_t v26 = a1;
  uint64_t v27 = a2;
  uint64_t v29 = a5;
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(a3 + 24);
  uint64_t v9 = type metadata accessor for PatternOrEmpty.State.Representation(0LL, v7, v8, a4);
  uint64_t v28 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](v9);
  uint64_t v11 = (char *)&v26 - v10;
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1895F8858](v12);
  uint64_t v16 = (char *)&v26 - v15;
  uint64_t v17 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v14);
  unint64_t v19 = (char *)&v26 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, v6, v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v16, 1LL, v7) == 1)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v21 = &v11[*(int *)(swift_getTupleTypeMetadata2() + 48)];
    uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16LL);
    uint64_t v23 = v27;
    v22(v11, v27, AssociatedTypeWitness);
    swift_getAssociatedConformanceWitness();
    uint64_t v24 = type metadata accessor for Range();
    v22(v21, v23 + *(int *)(v24 + 36), AssociatedTypeWitness);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v19, v16, v7);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 32))(v26, v27, v7, v8);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v7);
  }

  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v28 + 32))(v29, v11, v9);
}

uint64_t PatternOrEmpty.search(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v97 = a4;
  uint64_t v98 = a2;
  uint64_t v91 = a1;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v8 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v9 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v77 = (char *)v73 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v9);
  uint64_t v75 = (char *)v73 - v11;
  v73[0] = AssociatedConformanceWitness;
  v73[1] = AssociatedTypeWitness;
  uint64_t v89 = swift_getAssociatedConformanceWitness();
  uint64_t v12 = type metadata accessor for Range();
  uint64_t v92 = *(void *)(v12 - 8);
  uint64_t v13 = MEMORY[0x1895F8858](v12);
  char v74 = (char *)v73 - v14;
  uint64_t v90 = *(void *)(v8 - 8);
  uint64_t v15 = MEMORY[0x1895F8858](v13);
  uint64_t v87 = (char *)v73 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v15);
  uint64_t v88 = (char *)v73 - v17;
  uint64_t v18 = type metadata accessor for Optional();
  uint64_t v82 = *(void *)(v18 - 8);
  uint64_t v83 = v18;
  MEMORY[0x1895F8858](v18);
  uint64_t v85 = (char *)v73 - v19;
  uint64_t v93 = v12;
  uint64_t v20 = type metadata accessor for Optional();
  uint64_t v78 = *(void *)(v20 - 8);
  uint64_t v79 = v20;
  MEMORY[0x1895F8858](v20);
  uint64_t v81 = (char *)v73 - v21;
  uint64_t v84 = swift_getAssociatedTypeWitness();
  uint64_t v22 = *(void *)(v84 - 8);
  MEMORY[0x1895F8858](v84);
  uint64_t v94 = (char *)v73 - v23;
  uint64_t v25 = type metadata accessor for PatternOrEmpty.State.Representation(0LL, v5, v4, v24);
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = MEMORY[0x1895F8858](v25);
  uint64_t v95 = (char *)v73 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v27);
  uint64_t v30 = (char *)v73 - v29;
  uint64_t v32 = type metadata accessor for PatternOrEmpty.State(0LL, v5, v4, v31);
  uint64_t v33 = *(void *)(v32 - 8);
  MEMORY[0x1895F8858](v32);
  uint64_t v35 = (char *)v73 - v34;
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))((char *)v73 - v34, v98, v32);
  uint64_t v36 = *(void (**)(char *, char *, uint64_t))(v26 + 32);
  v36(v30, v35, v25);
  uint64_t v96 = v25;
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    uint64_t v46 = v81;
    uint64_t v80 = (void (*)(uint64_t, char *, uint64_t))v36;
    uint64_t v47 = *(void (**)(char *, char *, uint64_t))(v22 + 32);
    uint64_t v48 = v30;
    uint64_t v49 = v84;
    v47(v94, v48, v84);
    uint64_t v50 = v85;
    (*(void (**)(char *, uint64_t, uint64_t))(v82 + 16))(v85, v86, v83);
    uint64_t v51 = *(void *)(v5 - 8);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v51 + 48))(v50, 1LL, v5);
    if ((_DWORD)result != 1)
    {
      uint64_t v53 = v98;
      (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v98, v32);
      uint64_t v54 = v46;
      uint64_t v55 = v94;
      (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(v4 + 40))(v91, v94, v5, v4);
      (*(void (**)(char *, uint64_t))(v51 + 8))(v50, v5);
      uint64_t v56 = v95;
      v47(v95, v55, v49);
      uint64_t v57 = v96;
      swift_storeEnumTagMultiPayload();
      v80(v53, v56, v57);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v78 + 32))(v97, v54, v79);
    }

    goto LABEL_13;
  }

  if (EnumCaseMultiPayload != 1) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v92 + 56))(v97, 1LL, 1LL, v93);
  }
  uint64_t v80 = (void (*)(uint64_t, char *, uint64_t))v36;
  uint64_t v38 = v98;
  (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v98, v32);
  uint64_t v39 = swift_getTupleTypeMetadata2();
  uint64_t v40 = &v30[*(int *)(v39 + 48)];
  uint64_t v41 = v90;
  uint64_t v42 = *(void (**)(void))(v90 + 32);
  uint64_t v43 = v88;
  v42();
  uint64_t v44 = v87;
  ((void (*)(char *, char *, uint64_t))v42)(v87, v40, v8);
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v41 + 8))(v44, v8);
    uint64_t v45 = v95;
  }

  else
  {
    uint64_t v45 = v95;
    uint64_t v58 = &v95[*(int *)(v39 + 48)];
    swift_checkMetadataState();
    dispatch thunk of Collection.index(after:)();
    ((void (*)(char *, char *, uint64_t))v42)(v58, v44, v8);
  }

  uint64_t v59 = v96;
  swift_storeEnumTagMultiPayload();
  v80(v38, v45, v59);
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if ((result & 1) == 0)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    return result;
  }

  uint64_t v60 = TupleTypeMetadata2;
  uint64_t v61 = v75;
  uint64_t v62 = &v75[*(int *)(TupleTypeMetadata2 + 48)];
  uint64_t v63 = *(void (**)(char *, char *, uint64_t))(v41 + 16);
  v63(v75, v43, v8);
  ((void (*)(char *, char *, uint64_t))v42)(v62, v43, v8);
  uint64_t v64 = v41;
  uint64_t v65 = v77;
  uint64_t v66 = &v77[*(int *)(v60 + 48)];
  v63(v77, v61, v8);
  v63(v66, v62, v8);
  uint64_t v67 = v74;
  ((void (*)(char *, char *, uint64_t))v42)(v74, v65, v8);
  uint64_t v68 = *(void (**)(char *, uint64_t))(v64 + 8);
  v68(v66, v8);
  uint64_t v69 = &v65[*(int *)(v60 + 48)];
  ((void (*)(char *, char *, uint64_t))v42)(v65, v61, v8);
  ((void (*)(char *, char *, uint64_t))v42)(v69, v62, v8);
  uint64_t v70 = v93;
  ((void (*)(char *, char *, uint64_t))v42)(&v67[*(int *)(v93 + 36)], v69, v8);
  v68(v65, v8);
  uint64_t v71 = v92;
  uint64_t v72 = v97;
  (*(void (**)(uint64_t, char *, uint64_t))(v92 + 32))(v97, v67, v70);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v71 + 56))(v72, 0LL, 1LL, v70);
}

uint64_t PredicateConsumer.search(_:in:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v56 = a3;
  uint64_t v57 = a4;
  uint64_t v54 = a6;
  uint64_t v55 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v9 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v46 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v9);
  uint64_t v44 = (char *)&v43 - v11;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v12 = type metadata accessor for Range();
  uint64_t v52 = *(void *)(v12 - 8);
  uint64_t v53 = v12;
  MEMORY[0x1895F8858](v12);
  uint64_t v43 = (char *)&v43 - v13;
  uint64_t v14 = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1895F8858](v14);
  uint64_t v17 = (char *)&v43 - v16;
  uint64_t v18 = type metadata accessor for Optional();
  uint64_t v47 = *(void *)(v18 - 8);
  uint64_t v48 = v18;
  uint64_t v19 = MEMORY[0x1895F8858](v18);
  uint64_t v21 = (char *)&v43 - v20;
  uint64_t v22 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v23 = MEMORY[0x1895F8858](v19);
  uint64_t v49 = (char *)&v43 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v23);
  uint64_t v26 = (char *)&v43 - v25;
  uint64_t v55 = a1;
  dispatch thunk of Collection.subscript.getter();
  uint64_t v50 = a5;
  swift_getAssociatedConformanceWitness();
  Collection.firstIndex(where:)();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v21, 1LL, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v47 + 8))(v21, v48);
    uint64_t v27 = 1LL;
    uint64_t v29 = v53;
    uint64_t v28 = v54;
    uint64_t v30 = v52;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 56))(v28, v27, 1LL, v29);
  }

  uint64_t v31 = *(void (**)(char *, char *, uint64_t))(v22 + 32);
  v31(v26, v21, AssociatedTypeWitness);
  uint64_t v32 = v49;
  dispatch thunk of Collection.index(after:)();
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if ((result & 1) != 0)
  {
    uint64_t v35 = v44;
    uint64_t v34 = TupleTypeMetadata2;
    uint64_t v36 = &v44[*(int *)(TupleTypeMetadata2 + 48)];
    v31(v44, v26, AssociatedTypeWitness);
    v31(v36, v32, AssociatedTypeWitness);
    uint64_t v37 = v46;
    uint64_t v38 = &v46[*(int *)(v34 + 48)];
    uint64_t v39 = *(void (**)(char *, char *, uint64_t))(v22 + 16);
    v39(v46, v35, AssociatedTypeWitness);
    v39(v38, v36, AssociatedTypeWitness);
    uint64_t v40 = v43;
    v31(v43, v37, AssociatedTypeWitness);
    uint64_t v41 = *(void (**)(char *, uint64_t))(v22 + 8);
    v41(v38, AssociatedTypeWitness);
    uint64_t v42 = &v37[*(int *)(v34 + 48)];
    v31(v37, v35, AssociatedTypeWitness);
    v31(v42, v36, AssociatedTypeWitness);
    uint64_t v29 = v53;
    v31(&v40[*(int *)(v53 + 36)], v42, AssociatedTypeWitness);
    v41(v37, AssociatedTypeWitness);
    uint64_t v30 = v52;
    uint64_t v28 = v54;
    (*(void (**)(uint64_t, char *, uint64_t))(v52 + 32))(v54, v40, v29);
    uint64_t v27 = 0LL;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 56))(v28, v27, 1LL, v29);
  }

  __break(1u);
  return result;
}

uint64_t protocol witness for CollectionSearcher.state(for:in:) in conformance PredicateSearcher<A>@<X0>( uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return StatelessCollectionSearcher.state(for:in:)(a1, a3);
}

uint64_t protocol witness for CollectionSearcher.search(_:_:) in conformance PredicateSearcher<A>@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v8 = MEMORY[0x186E17958](&protocol conformance descriptor for PredicateSearcher<A>, a3);
  return StatelessCollectionSearcher.search(_:_:)(a1, a2, a3, v8, a4);
}

uint64_t protocol witness for BackwardCollectionSearcher.backwardState(for:in:) in conformance <> PredicateSearcher<A>@<X0>( uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = *(void *)(a3 - 8);
  MEMORY[0x186E17958](&protocol conformance descriptor for <> PredicateSearcher<A>, a2, &v7);
  return BackwardStatelessCollectionSearcher.backwardState(for:in:)(a1, a4);
}

uint64_t zAlgorithm<A>(_:by:)(uint64_t a1, uint64_t (*a2)(char *, char *), uint64_t a3, uint64_t a4)
{
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_182D9CC00;
  uint64_t v32 = a1;
  uint64_t v7 = a4;
  int64_t isUniquelyReferenced_nonNull_native = MEMORY[0x186E17118](a1, a4);
  *(void *)(v6 + 32) = isUniquelyReferenced_nonNull_native;
  if (isUniquelyReferenced_nonNull_native >= 2) {
    goto LABEL_26;
  }
  while (1)
  {
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = v6;
    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 16) = 0LL;
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = 0LL;
    uint64_t v36 = v32;
    uint64_t v12 = type metadata accessor for Array();
    MEMORY[0x186E17958](MEMORY[0x189618480], v12);
    uint64_t v13 = MEMORY[0x189618780];
    RandomAccessCollection<>.indices.getter();
    __int128 v34 = v35;
    uint64_t CanonicalSpecializedMetadata = swift_getCanonicalSpecializedMetadata();
    unint64_t v15 = lazy protocol witness table accessor for type Int and conformance Int();
    v33[0] = v13;
    v33[1] = v15;
    MEMORY[0x186E17958](MEMORY[0x189618A60], CanonicalSpecializedMetadata, v33);
    int64_t isUniquelyReferenced_nonNull_native = Collection.dropFirst(_:)();
    uint64_t v6 = v36;
    uint64_t v16 = v37;
    uint64_t v17 = a3;
    if (v36 == v37) {
      break;
    }
    if (v37 < v36)
    {
      __break(1u);
LABEL_6:
      int64_t isUniquelyReferenced_nonNull_native = compare #1 <A>(start:minLength:) in zAlgorithm<A>(_:by:)( v6,  0LL,  v32,  a2,  v17,  v9,  v10,  v11,  v7);
      goto LABEL_7;
    }

    while (v16 != v6)
    {
      uint64_t v20 = *(void *)(v11 + 16);
      if (v6 >= v20) {
        goto LABEL_6;
      }
      uint64_t v21 = v20 - v6;
      if (__OFSUB__(v20, v6)) {
        goto LABEL_22;
      }
      uint64_t v22 = *(void *)(v10 + 16);
      BOOL v23 = __OFSUB__(v6, v22);
      unint64_t v24 = v6 - v22;
      if (v23) {
        goto LABEL_23;
      }
      if ((v24 & 0x8000000000000000LL) != 0) {
        goto LABEL_24;
      }
      int64_t v25 = *(void *)(v9 + 16);
      unint64_t v26 = *(void *)(v25 + 16);
      if (v24 >= v26) {
        goto LABEL_25;
      }
      uint64_t v27 = *(void *)(v25 + 8 * v24 + 32);
      if (v27 >= v21)
      {
        int64_t isUniquelyReferenced_nonNull_native = compare #1 <A>(start:minLength:) in zAlgorithm<A>(_:by:)( v6,  v21,  v32,  a2,  v17,  v9,  v10,  v11,  v7);
      }

      else
      {
        int64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          int64_t isUniquelyReferenced_nonNull_native = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v26 + 1,  1,  (char *)v25);
          int64_t v25 = isUniquelyReferenced_nonNull_native;
        }

        unint64_t v29 = *(void *)(v25 + 16);
        unint64_t v28 = *(void *)(v25 + 24);
        if (v29 >= v28 >> 1)
        {
          int64_t isUniquelyReferenced_nonNull_native = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v28 > 1),  v29 + 1,  1,  (char *)v25);
          int64_t v25 = isUniquelyReferenced_nonNull_native;
        }

        *(void *)(v25 + 16) = v29 + 1;
        *(void *)(v25 + 8 * v29 + 32) = v27;
        *(void *)(v9 + 16) = v25;
        uint64_t v17 = a3;
      }

uint64_t compare #1 <A>(start:end:minLength:) in ZSearcher.search(_:in:)@<X0>( char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(char *, char *)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v106 = a7;
  uint64_t v107 = a8;
  uint64_t v101 = a5;
  uint64_t v102 = a6;
  uint64_t v111 = a2;
  uint64_t v112 = a4;
  uint64_t v90 = a1;
  uint64_t v89 = a9;
  uint64_t v108 = a10;
  uint64_t v109 = a11;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v17 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v85 = (char *)&v80 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v17);
  uint64_t v83 = (char *)&v80 - v19;
  uint64_t v20 = swift_getAssociatedTypeWitness();
  uint64_t v100 = *(void *)(v20 - 8);
  uint64_t v21 = MEMORY[0x1895F8858](v20);
  uint64_t v99 = (char *)&v80 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = MEMORY[0x1895F8858](v21);
  uint64_t v98 = (char *)&v80 - v24;
  uint64_t v105 = *(void *)(a14 - 8);
  MEMORY[0x1895F8858](v23);
  uint64_t v104 = (char *)&v80 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v110 = a15;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v27 = type metadata accessor for Range();
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = MEMORY[0x1895F8858](v27);
  uint64_t v82 = (char *)&v80 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = MEMORY[0x1895F8858](v29);
  uint64_t v33 = (char *)&v80 - v32;
  uint64_t v34 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v35 = MEMORY[0x1895F8858](v31);
  uint64_t v88 = (char *)&v80 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v35);
  uint64_t v38 = (char *)&v80 - v37;
  uint64_t v86 = swift_projectBox();
  uint64_t v87 = swift_projectBox();
  uint64_t v92 = v34;
  uint64_t v39 = *(void (**)(char *, char *, uint64_t))(v34 + 16);
  uint64_t v108 = AssociatedTypeWitness;
  uint64_t v81 = v39;
  v39(v38, (char *)v111, AssociatedTypeWitness);
  uint64_t v111 = v20;
  uint64_t v40 = MEMORY[0x186E17130](v112, v20);
  uint64_t v41 = *(void (**)(char *, uint64_t, uint64_t))(v28 + 16);
  uint64_t v109 = v27;
  uint64_t v97 = v41;
  v41(v33, v106, v27);
  uint64_t v91 = AssociatedConformanceWitness;
  if (v40 == a3)
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v33, v109);
LABEL_9:
    uint64_t v46 = v104;
    uint64_t v47 = v105;
    (*(void (**)(char *, uint64_t, uint64_t))(v105 + 16))(v104, v107, a14);
    uint64_t v60 = v108;
    uint64_t v61 = v90;
LABEL_11:
    (*(void (**)(char *, uint64_t))(v47 + 8))(v46, a14);
LABEL_12:
    if (a3 != MEMORY[0x186E17118](v112, v111))
    {
      uint64_t v79 = v92;
      (*(void (**)(uint64_t, char *, uint64_t))(v92 + 24))(v86, v61, v60);
      (*(void (**)(uint64_t, char *, uint64_t))(v79 + 40))(v87, v38, v60);
      *(void *)(a12 + 16) = 0LL;
      *(void *)(a13 + 16) = a3;
      uint64_t v78 = 1LL;
      uint64_t v76 = v109;
      uint64_t v77 = v89;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 56))(v77, v78, 1LL, v76);
    }

    uint64_t v62 = v61;
    uint64_t v63 = v92;
    uint64_t v64 = *(void (**)(char *, char *, uint64_t))(v92 + 32);
    uint64_t v65 = v88;
    v64(v88, v38, v60);
    uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
    if ((result & 1) != 0)
    {
      uint64_t v66 = TupleTypeMetadata2;
      uint64_t v67 = v83;
      uint64_t v68 = &v83[*(int *)(TupleTypeMetadata2 + 48)];
      uint64_t v69 = v62;
      uint64_t v70 = v81;
      v81(v83, v69, v60);
      v64(v68, v65, v60);
      uint64_t v71 = v85;
      uint64_t v72 = &v85[*(int *)(v66 + 48)];
      v70(v85, v67, v60);
      v70(v72, v68, v60);
      uint64_t v73 = v82;
      v64(v82, v71, v60);
      char v74 = *(void (**)(char *, uint64_t))(v63 + 8);
      v74(v72, v60);
      uint64_t v75 = &v71[*(int *)(v66 + 48)];
      v64(v71, v67, v60);
      v64(v75, v68, v60);
      uint64_t v76 = v109;
      v64(&v73[*(int *)(v109 + 36)], v75, v60);
      v74(v71, v60);
      uint64_t v77 = v89;
      (*(void (**)(uint64_t, char *, uint64_t))(v28 + 32))(v89, v73, v76);
      uint64_t v78 = 0LL;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 56))(v77, v78, 1LL, v76);
    }
  }

  else
  {
    uint64_t v103 = v28;
    uint64_t v96 = *(void *)(AssociatedConformanceWitness + 8);
    uint64_t v42 = v109;
    uint64_t v43 = v107;
    uint64_t v95 = v38;
    uint64_t v94 = v33;
    while (1)
    {
      char v44 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v45 = *(void (**)(char *, uint64_t))(v103 + 8);
      v45(v33, v42);
      uint64_t v46 = v104;
      uint64_t v47 = v105;
      (*(void (**)(char *, uint64_t, uint64_t))(v105 + 16))(v104, v43, a14);
      if ((v44 & 1) != 0)
      {
        uint64_t v60 = v108;
        uint64_t v61 = v90;
        uint64_t v28 = v103;
        goto LABEL_11;
      }

      uint64_t v93 = v45;
      uint64_t v48 = v98;
      uint64_t v49 = a3;
      uint64_t v50 = v111;
      Array.subscript.getter();
      uint64_t v51 = (void (*)(char *, void))dispatch thunk of Collection.subscript.read();
      uint64_t v52 = v99;
      uint64_t v53 = v100;
      (*(void (**)(char *))(v100 + 16))(v99);
      v51(v113, 0LL);
      (*(void (**)(char *, uint64_t))(v47 + 8))(v46, a14);
      char v54 = v101(v48, v52);
      uint64_t v55 = *(void (**)(char *, uint64_t))(v53 + 8);
      v55(v52, v50);
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v55)(v48, v50);
      if ((v54 & 1) == 0)
      {
        uint64_t v60 = v108;
        uint64_t v61 = v90;
        uint64_t v28 = v103;
        uint64_t v38 = v95;
        a3 = v49;
        goto LABEL_12;
      }

      uint64_t v57 = v49 + 1;
      if (__OFADD__(v49, 1LL)) {
        break;
      }
      uint64_t v58 = v49;
      uint64_t v38 = v95;
      uint64_t v43 = v107;
      dispatch thunk of Collection.formIndex(after:)();
      uint64_t v59 = MEMORY[0x186E17130](v112, v111);
      uint64_t v33 = v94;
      uint64_t v42 = v109;
      v97(v94, v106, v109);
      a3 = v58 + 1;
      if (v57 == v59)
      {
        a3 = v57;
        uint64_t v28 = v103;
        v93(v33, v109);
        goto LABEL_9;
      }
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t protocol witness for StatelessCollectionSearcher.search(_:in:) in conformance ZSearcher<A>@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  return ZSearcher.search(_:in:)( a1,  a2,  *(void *)v4,  *(void *)(v4 + 8),  *(uint64_t (**)(char *, char *))(v4 + 16),  *(void *)(v4 + 24),  *(void *)(a3 + 16),  *(void *)(a3 + 24),  a4);
}

uint64_t protocol witness for CollectionSearcher.state(for:in:) in conformance ZSearcher<A>@<X0>( uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return StatelessCollectionSearcher.state(for:in:)(a1, a3);
}

uint64_t protocol witness for CollectionSearcher.search(_:_:) in conformance ZSearcher<A>@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v8 = MEMORY[0x186E17958](&protocol conformance descriptor for ZSearcher<A>, a3);
  return StatelessCollectionSearcher.search(_:_:)(a1, a2, a3, v8, a4);
}

uint64_t compare #1 <A>(start:minLength:) in zAlgorithm<A>(_:by:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(char *, char *), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v31 = a4;
  uint64_t v14 = *(void *)(a9 - 8);
  uint64_t v29 = a6;
  uint64_t v30 = v14;
  uint64_t v15 = MEMORY[0x1895F8858](a1);
  uint64_t v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = MEMORY[0x1895F8858](v15);
  uint64_t v20 = (char *)&v27 - v19;
  uint64_t v22 = v18 + v21;
  if (__OFADD__(v18, v21))
  {
LABEL_16:
    __break(1u);
LABEL_17:
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v17 + 2) + 1LL,  1,  v17);
    uint64_t v17 = (char *)result;
    *(void *)(v22 + 16) = result;
    goto LABEL_12;
  }

  uint64_t v32 = MEMORY[0x186E17118](a3, a9);
  if (v22 < v32)
  {
    uint64_t v27 = a7;
    uint64_t v28 = a8;
    while (1)
    {
      a8 = a1 + a2;
      Array.subscript.getter();
      Array.subscript.getter();
      uint64_t v22 = v31(v20, v17);
      a7 = *(void *)(v30 + 8);
      ((void (*)(char *, uint64_t))a7)(v17, a9);
      ((void (*)(char *, uint64_t))a7)(v20, a9);
      if ((v22 & 1) == 0)
      {
        uint64_t v32 = a1 + a2;
        goto LABEL_10;
      }

      uint64_t v23 = a2 + 1;
      if (__OFADD__(a2, 1LL)) {
        break;
      }
      ++a2;
      if (a1 + a2 >= v32)
      {
        a2 = v23;
LABEL_10:
        a7 = v27;
        a8 = v28;
        goto LABEL_11;
      }
    }

    __break(1u);
    goto LABEL_16;
  }

  uint64_t v32 = v22;
LABEL_11:
  uint64_t v22 = v29;
  uint64_t v17 = *(char **)(v29 + 16);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v22 + 16) = v17;
  if ((result & 1) == 0) {
    goto LABEL_17;
  }
LABEL_12:
  unint64_t v26 = *((void *)v17 + 2);
  unint64_t v25 = *((void *)v17 + 3);
  if (v26 >= v25 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v25 > 1),  v26 + 1,  1,  v17);
    uint64_t v17 = (char *)result;
  }

  *((void *)v17 + 2) = v26 + 1;
  *(void *)&v17[8 * v26 + 32] = a2;
  *(void *)(v22 + 16) = v17;
  *(void *)(a7 + 16) = a1;
  *(void *)(a8 + 16) = v32;
  return result;
}

uint64_t Compiler.ByteCodeGen.emitRoot(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 24) = 0LL;
  *(void *)(v7 + 32) = 0LL;
  *(void *)(v7 + 16) = 0LL;
  *(_BYTE *)(v7 + 40) = 1;
  *(void *)(v7 + 48) = a1;
  uint64_t v8 = v7 | 0x1000000000000000LL;
  *(_OWORD *)(v7 + 56) = 0u;
  *(_OWORD *)(v7 + 72) = 0u;
  *(_BYTE *)(v7 + 88) = 0;
  swift_retain();
  Compiler.ByteCodeGen.emitNode(_:)(v8);
  uint64_t result = swift_release();
  if (!v4)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MatchingOptions.Representation>);
    uint64_t v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_182D9CC00;
    *(_DWORD *)(v10 + 32) = 81984;
    uint64_t v17 = v10;
    DSLTree.Node._canOnlyMatchAtStartImpl(_:)((uint64_t)&v17, a1);
    char v12 = v11;
    swift_bridgeObjectRelease();
    uint64_t v13 = (char **)(v2 + *(int *)(type metadata accessor for Compiler.ByteCodeGen(0LL) + 20));
    *((_BYTE *)v13 + *(int *)(type metadata accessor for MEProgram.Builder(0LL) + 88)) = v12 & 1;
    uint64_t v14 = *v13;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v14 + 2) + 1LL,  1,  v14,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
    }
    unint64_t v16 = *((void *)v14 + 2);
    unint64_t v15 = *((void *)v14 + 3);
    if (v16 >= v15 >> 1) {
      uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v15 > 1),  v16 + 1,  1,  v14,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
    }
    *((void *)v14 + 2) = v16 + 1;
    *(void *)&v14[8 * v16 + 32] = 0x1B00000000000000LL;
    *uint64_t v13 = v14;
    return MEProgram.Builder.assemble()(a2);
  }

  return result;
}

void Compiler.ByteCodeGen.emitNode(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DSLTree.Atom(0LL);
  MEMORY[0x1895F8858](v2);
  uint64_t v3 = type metadata accessor for DSLTree.QuantificationKind(0LL);
  MEMORY[0x1895F8858](v3);
  uint64_t v4 = type metadata accessor for DSLTree._AST.QuantificationAmount(0LL);
  MEMORY[0x1895F8858](v4);
  uint64_t v5 = type metadata accessor for DSLTree._AST.GroupKind(0LL);
  MEMORY[0x1895F8858](v5);
  __asm { BR              X10 }

uint64_t sub_182D35418()
{
  if (!v0) {
    return 0LL;
  }
  return v1;
}

uint64_t MEProgram.Builder.assemble()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v68 = (int *)type metadata accessor for MEProgram.Builder(0LL);
  unint64_t v3 = *(void *)(v1 + v68[23]);
  unint64_t v4 = v3 + 64;
  uint64_t v5 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v6 = -1LL;
  if (v5 < 64) {
    uint64_t v6 = ~(-1LL << v5);
  }
  unint64_t v7 = v6 & *(void *)(v3 + 64);
  uint64_t v8 = *(char **)v1;
  swift_bridgeObjectRetain();
  uint64_t v57 = a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_74:
  }
    uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v8);
  int64_t v9 = 0LL;
  int64_t v65 = (unint64_t)(v5 + 63) >> 6;
  unint64_t v10 = (unint64_t)(v8 + 32);
  uint64_t v11 = 0x1A00000000000000LL;
  while (1)
  {
    if (v7)
    {
      unint64_t v12 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v13 = v12 | (v9 << 6);
    }

    else
    {
      int64_t v14 = v9 + 1;
      if (__OFADD__(v9, 1LL)) {
        goto LABEL_73;
      }
      if (v14 >= v65)
      {
LABEL_32:
        uint64_t result = swift_release();
        uint64_t v11 = (uint64_t)v69;
        *uint64_t v69 = v8;
        uint64_t v1 = v58;
        if (v58) {
          return result;
        }
        goto LABEL_33;
      }

      unint64_t v15 = *(void *)(v4 + 8 * v14);
      ++v9;
      if (!v15)
      {
        int64_t v9 = v14 + 1;
        if (v14 + 1 >= v65) {
          goto LABEL_32;
        }
        unint64_t v15 = *(void *)(v4 + 8 * v9);
        if (!v15)
        {
          int64_t v9 = v14 + 2;
          if (v14 + 2 >= v65) {
            goto LABEL_32;
          }
          unint64_t v15 = *(void *)(v4 + 8 * v9);
          if (!v15)
          {
            int64_t v16 = v14 + 3;
            if (v16 >= v65) {
              goto LABEL_32;
            }
            unint64_t v15 = *(void *)(v4 + 8 * v16);
            int64_t v9 = v16;
            if (!v15)
            {
              while (1)
              {
                int64_t v9 = v16 + 1;
                if (__OFADD__(v16, 1LL)) {
                  break;
                }
                if (v9 >= v65) {
                  goto LABEL_32;
                }
                unint64_t v15 = *(void *)(v4 + 8 * v9);
                ++v16;
                if (v15) {
                  goto LABEL_20;
                }
              }

              __break(1u);
LABEL_76:
              __break(1u);
LABEL_77:
              uint64_t v5 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v5);
              if ((v10 & 0x8000000000000000LL) != 0)
              {
LABEL_78:
                __break(1u);
LABEL_79:
                __break(1u);
LABEL_80:
                unint64_t v7 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v7 + 16) + 1LL,  1,  (char *)v7,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
LABEL_38:
                unint64_t v27 = *(void *)(v7 + 16);
                unint64_t v26 = *(void *)(v7 + 24);
                if (v27 >= v26 >> 1) {
                  unint64_t v7 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v26 > 1),  v27 + 1,  1,  (char *)v7,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
                }
                *(void *)(v7 + 16) = v27 + 1;
                *(void *)(v7 + 8 * v27 + 32) = 0x1C00000000000000LL;
                *(void *)uint64_t v11 = v7;
LABEL_41:
                uint64_t v58 = v1;
                uint64_t v28 = *(void *)(v11 + 88);
                uint64_t v5 = *(void *)(v28 + 16);
                swift_bridgeObjectRetain();
                uint64_t v61 = v5;
                if (!v5)
                {
LABEL_59:
                  uint64_t v35 = *(void *)(v11 + 24);
                  uint64_t v56 = *(void *)(v35 + 16);
                  uint64_t v36 = *(void *)(v11 + 48);
                  uint64_t v48 = *(void *)(v11 + 40);
                  uint64_t v52 = *(void *)(v48 + 16);
                  uint64_t v64 = *(void *)(v11 + 120);
                  uint64_t v67 = *(void *)(v11 + 112);
                  uint64_t v46 = *(void *)(v11 + 56);
                  uint64_t v47 = *(void *)(v11 + 64);
                  uint64_t v53 = *(void *)(v47 + 16);
                  uint64_t v54 = *(void *)(v36 + 16);
                  uint64_t v45 = *(void *)(v11 + 72);
                  uint64_t v49 = *(void *)(v45 + 16);
                  uint64_t v50 = *(void *)(v46 + 16);
                  uint64_t v51 = *(void *)(v11 + 96);
                  uint64_t v62 = *(void *)(v11 + 104);
                  char v60 = *(_BYTE *)(v11 + 8);
                  uint64_t v37 = v11 + v68[20];
                  char v55 = *(_BYTE *)(v11 + 9);
                  uint64_t v38 = (int *)type metadata accessor for MEProgram(0LL);
                  uint64_t v39 = v57 + v38[14];
                  uint64_t v40 = type metadata accessor for CaptureList();
                  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 16LL))(v39, v37, v40);
                  uint64_t v41 = *(void *)(v11 + v68[24]);
                  uint64_t v42 = *(void *)(v11 + v68[21]);
                  char v43 = *(_BYTE *)(v11 + v68[22]);
                  *(void *)uint64_t v57 = v7;
                  *(void *)(v57 + 8) = v35;
                  *(void *)(v57 + 16) = v48;
                  *(void *)(v57 + 24) = v36;
                  *(void *)(v57 + 32) = v46;
                  *(void *)(v57 + 40) = v47;
                  *(void *)(v57 + 48) = v45;
                  *(void *)(v57 + 56) = v56;
                  *(void *)(v57 + 64) = v52;
                  *(void *)(v57 + 72) = 0LL;
                  *(void *)(v57 + 80) = 0LL;
                  *(void *)(v57 + 88) = v54;
                  *(void *)(v57 + 96) = v50;
                  *(void *)(v57 + 104) = v53;
                  *(void *)(v57 + 112) = v49;
                  *(void *)(v57 + 120) = v51;
                  *(void *)(v57 + 128) = 0LL;
                  *(void *)(v57 + 136) = v64;
                  *(void *)(v57 + 144) = v67;
                  *(_OWORD *)(v57 + 168) = 0u;
                  *(_OWORD *)(v57 + 152) = 0u;
                  *(void *)(v57 + 184) = v62;
                  *(_BYTE *)(v57 + 192) = v60;
                  *(_BYTE *)(v57 + 193) = v55;
                  *(void *)(v57 + v38[15]) = v41;
                  *(void *)(v57 + v38[16]) = v42;
                  *(_BYTE *)(v57 + v38[17]) = v43;
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  return swift_bridgeObjectRetain();
                }

                unint64_t v29 = 0LL;
                uint64_t v8 = (char *)(v28 + 56);
                uint64_t v59 = v28;
                while (v29 < *(void *)(v28 + 16))
                {
                  unint64_t v4 = *((void *)v8 - 3);
                  if ((v4 & 0x8000000000000000LL) != 0) {
                    goto LABEL_68;
                  }
                  if (v4 >= *(void *)(v7 + 16)) {
                    goto LABEL_69;
                  }
                  unint64_t v30 = *((void *)v8 - 2);
                  if ((v30 & 0x8000000000000000LL) != 0) {
                    goto LABEL_70;
                  }
                  uint64_t v31 = *(void *)(v11 + 80);
                  unint64_t v3 = *(void *)(v31 + 16);
                  if (v30 >= v3) {
                    goto LABEL_71;
                  }
                  unint64_t v63 = v29;
                  uint64_t v11 = v31 + 32;
                  uint64_t v32 = v31 + 32 + 16 * v30;
                  if ((*(_BYTE *)(v32 + 8) & 1) != 0)
                  {
                    __break(1u);
LABEL_82:
                    __break(1u);
                    JUMPOUT(0x182D366E8LL);
                  }

                  unint64_t v10 = *((void *)v8 - 1);
                  uint64_t v1 = *v8;
                  uint64_t v66 = v7;
                  unint64_t v7 = *(void *)(v7 + 8 * v4 + 32);
                  uint64_t v33 = *(void *)v32;
                  uint64_t v5 = specialized Instruction.OpCode.init(rawValue:)(HIBYTE(v7));
                  switch((char)v5)
                  {
                    case 4:
                    case 16:
                    case 17:
                    case 19:
                      goto LABEL_55;
                    case 5:
                    case 6:
                      v33 |= v7 << 16;
                      goto LABEL_55;
                    case 20:
                      if ((_DWORD)v1)
                      {
                        type metadata accessor for Unreachable();
                        lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind( &lazy protocol witness table cache variable for type Unreachable and conformance Unreachable,  (uint64_t (*)(uint64_t))MEMORY[0x18961C108],  MEMORY[0x18961C118]);
                        swift_allocError();
                        uint64_t v44 = 380LL;
                        goto LABEL_65;
                      }

                      if (v10 >= v3) {
                        goto LABEL_76;
                      }
                      uint64_t v34 = v11 + 16 * v10;
                      if ((*(_BYTE *)(v34 + 8) & 1) != 0) {
                        goto LABEL_82;
                      }
                      v33 |= *(void *)v34 << 16;
LABEL_55:
                      unint64_t v7 = v66;
                      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                        unint64_t v7 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v66);
                      }
                      if (v4 >= *(void *)(v7 + 16)) {
                        goto LABEL_72;
                      }
                      unint64_t v29 = v63 + 1;
                      *(void *)(v7 + 8 * v4 + 32) = v33 | (v5 << 56);
                      v8 += 32;
                      uint64_t v11 = (uint64_t)v69;
                      uint64_t v28 = v59;
                      if (v61 == v63 + 1) {
                        goto LABEL_59;
                      }
                      break;
                    default:
                      goto LABEL_63;
                  }
                }

                __break(1u);
LABEL_68:
                __break(1u);
LABEL_69:
                __break(1u);
LABEL_70:
                __break(1u);
LABEL_71:
                __break(1u);
LABEL_72:
                __break(1u);
LABEL_73:
                __break(1u);
                goto LABEL_74;
              }

LABEL_36:
              if (v10 >= *(void *)(v5 + 16)) {
                goto LABEL_79;
              }
              uint64_t v25 = v5 + 16 * v10;
              *(void *)(v25 + 32) = v7;
              *(_BYTE *)(v25 + 40) = 0;
              *(void *)(v11 + 80) = v5;
              unint64_t v7 = (unint64_t)v8;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                goto LABEL_80;
              }
              goto LABEL_38;
            }
          }
        }
      }

  uint64_t result = (uint64_t (*)(unint64_t, unint64_t, unint64_t, uint64_t))_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

  if (v18 >= 0xCCu) {
    return 0;
  }
  if (v14 == 13 && v18 == 10)
  {
    if (v9 == v10)
    {
      unint64_t v7 = _StringGuts._slowEnsureMatchingEncoding(_:)(v7, a3, a4);
      if ((a4 & 0x1000000000000000LL) == 0) {
        goto LABEL_41;
      }
    }

    else if ((a4 & 0x1000000000000000LL) == 0)
    {
LABEL_41:
      unint64_t v7 = (v7 & 0xFFFFFFFFFFFF0000LL) + 65540;
      goto LABEL_50;
    }

    if (v11 <= v7 >> 16)
    {
      __break(1u);
      goto LABEL_65;
    }

    unint64_t v7 = String.UTF8View._foreignIndex(after:)();
LABEL_50:
    if (v4 == v7 >> 14) {
      return 13;
    }
    char v19 = v7;
    if ((v7 & 0xC) != v10)
    {
LABEL_52:
      uint64_t v20 = v19 >> 16;
      if (v19 >> 16 < v11)
      {
        if ((a4 & 0x1000000000000000LL) != 0)
        {
          unint64_t v22 = String.UTF8View._foreignSubscript(position:)();
        }

        else
        {
          if ((a4 & 0x2000000000000000LL) == 0)
          {
            if ((a3 & 0x1000000000000000LL) != 0)
            {
              unint64_t v21 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_57:
              unint64_t v22 = *(_BYTE *)(v21 + v20);
              goto LABEL_60;
            }

  uint64_t v39 = *(void (**)(unsigned __int8 *, const void *, uint64_t))(v4 + 16);
  v39(a1, v27, AssociatedTypeWitness);
  v39( (unsigned __int8 *)((unint64_t)&a1[v46] & v47),  (const void *)(((unint64_t)v27 + v46) & v47),  AssociatedTypeWitness);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16))( (unint64_t)&a1[v48] & v14,  ((unint64_t)v27 + v48) & v14,  v49);
  uint64_t v36 = v50;
  if (!v50) {
    a1[v17] = 0;
  }
LABEL_38:
  if (v36) {
    uint64_t v40 = v17;
  }
  else {
    uint64_t v40 = v17 + 1;
  }
  uint64_t v41 = swift_getAssociatedTypeWitness();
  uint64_t v42 = *(void *)(v41 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v42 + 24))( (unint64_t)&a1[v40 + *(unsigned __int8 *)(v42 + 80)] & ~(unint64_t)*(unsigned __int8 *)(v42 + 80),  ((unint64_t)v27 + v40 + *(unsigned __int8 *)(v42 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80),  v41);
  return a1;
}

  uint64_t v39 = *(void (**)(unsigned __int8 *, const void *, uint64_t))(v4 + 32);
  v39(a1, v27, AssociatedTypeWitness);
  v39( (unsigned __int8 *)((unint64_t)&a1[v46] & v47),  (const void *)(((unint64_t)v27 + v46) & v47),  AssociatedTypeWitness);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 32))( (unint64_t)&a1[v48] & v14,  ((unint64_t)v27 + v48) & v14,  v49);
  uint64_t v36 = v50;
  if (!v50) {
    a1[v17] = 0;
  }
LABEL_38:
  if (v36) {
    uint64_t v40 = v17;
  }
  else {
    uint64_t v40 = v17 + 1;
  }
  uint64_t v41 = swift_getAssociatedTypeWitness();
  uint64_t v42 = *(void *)(v41 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v42 + 40))( (unint64_t)&a1[v40 + *(unsigned __int8 *)(v42 + 80)] & ~(unint64_t)*(unsigned __int8 *)(v42 + 80),  ((unint64_t)v27 + v40 + *(unsigned __int8 *)(v42 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80),  v41);
  return a1;
}

LABEL_20:
      unint64_t v7 = (v15 - 1) & v15;
      unint64_t v13 = __clz(__rbit64(v15)) + (v9 << 6);
    }

    uint64_t v17 = *(uint64_t *)((char *)v69 + v68[24]);
    if (!*(void *)(v17 + 16)
      || (uint64_t v5 = *(void *)(*(void *)(v3 + 56) + 8 * v13),
          unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(*(void *)(*(void *)(v3 + 48) + 8 * v13)),
          (v19 & 1) == 0))
    {
      swift_release();
      uint64_t v11 = (uint64_t)v69;
      *uint64_t v69 = v8;
      lazy protocol witness table accessor for type RegexCompilationError and conformance RegexCompilationError();
      uint64_t v1 = swift_allocError();
      *(void *)uint64_t v23 = 0LL;
      *(void *)(v23 + 8) = 0LL;
      *(_BYTE *)(v23 + 16) = 2;
      uint64_t result = swift_willThrow();
      if (v1) {
        return result;
      }
LABEL_33:
      unint64_t v7 = *(void *)v11;
      if ((*(_BYTE *)(v11 + 136) & 1) != 0) {
        goto LABEL_41;
      }
      unint64_t v10 = *(void *)(v11 + 128);
      uint64_t v8 = *(char **)v11;
      unint64_t v7 = *(void *)(v7 + 16);
      uint64_t v5 = *(void *)(v11 + 80);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        goto LABEL_77;
      }
      if ((v10 & 0x8000000000000000LL) != 0) {
        goto LABEL_78;
      }
      goto LABEL_36;
    }

    uint64_t v1 = *(void *)(*(void *)(v17 + 56) + 8 * v18);
    uint64_t v20 = *(void *)(v5 + 16);
    swift_bridgeObjectRetain();
    if (v20) {
      break;
    }
LABEL_5:
    swift_bridgeObjectRelease();
  }

  unint64_t v21 = 0LL;
  while (v21 < *(void *)(v5 + 16))
  {
    unint64_t v22 = *(void *)(v5 + 32 + 8 * v21);
    if ((v22 & 0x8000000000000000LL) != 0) {
      goto LABEL_61;
    }
    if (v22 >= *((void *)v8 + 2)) {
      goto LABEL_62;
    }
    ++v21;
    *(void *)(v10 + 8 * v22) = (v1 << 16) | 0x1A00000000000000LL | (*(_WORD *)(v10 + 8 * v22) == 1LL);
    if (v20 == v21) {
      goto LABEL_5;
    }
  }

  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  type metadata accessor for Unreachable();
  lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind( &lazy protocol witness table cache variable for type Unreachable and conformance Unreachable,  (uint64_t (*)(uint64_t))MEMORY[0x18961C108],  MEMORY[0x18961C118]);
  swift_allocError();
  uint64_t v44 = 385LL;
LABEL_65:
  MEMORY[0x186E16890]( 0x6572203A4F444F54LL,  0xEC0000006E6F7361LL,  "/Library/Caches/com.apple.xbs/Sources/swiftlang_overlay_Platform_Device/swift-experimental-string-processing/Sources /_StringProcessing/Engine/MEBuilder.swift",  157LL,  2LL,  v44);
  swift_willThrow();
  return swift_bridgeObjectRelease();
}

void Compiler.ByteCodeGen.emitAtom(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DSLTree._AST.Atom(0LL);
  MEMORY[0x1895F8858](v2);
  uint64_t v21[2] = (char *)v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for DSLTree._AST.MatchingOptionSequence(0LL);
  MEMORY[0x1895F8858](v4);
  v21[3] = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DSLTree._AST.Reference(0LL);
  MEMORY[0x1895F8858](v6);
  uint64_t v7 = type metadata accessor for Unicode.Scalar.Properties();
  MEMORY[0x1895F8858](v7);
  uint64_t v8 = type metadata accessor for DSLTree.Atom(0LL);
  uint64_t v9 = MEMORY[0x1895F8858](v8);
  uint64_t v10 = MEMORY[0x1895F8858](v9);
  uint64_t v11 = MEMORY[0x1895F8858](v10);
  v21[1] = (char *)v21 - v12;
  uint64_t v13 = MEMORY[0x1895F8858](v11);
  uint64_t v14 = MEMORY[0x1895F8858](v13);
  v21[4] = (char *)v21 - v15;
  uint64_t v16 = MEMORY[0x1895F8858](v14);
  v21[0] = (char *)v21 - v17;
  MEMORY[0x1895F8858](v16);
  v21[6] = a1;
  outlined init with copy of MEProgram(a1, (uint64_t)v21 - v18, v19);
  uint64_t v20 = (char *)&loc_182D36954 + *((int *)qword_182D37538 + swift_getEnumCaseMultiPayload());
  __asm { BR              X10 }

void sub_182D36964()
{
  uint64_t v2 = (char *)&loc_182D37030 + *((int *)qword_182D37640 + swift_getEnumCaseMultiPayload());
  __asm { BR              X10 }

void sub_182D37040()
{
}

void sub_182D3724C()
{
}

void sub_182D37260()
{
}

void sub_182D37270()
{
}

uint64_t Compiler.ByteCodeGen.emitDot()()
{
  uint64_t v3 = *(void *)(*(void *)v0 + 16LL);
  if (!v3)
  {
    __break(1u);
    goto LABEL_27;
  }

  int v4 = *(_DWORD *)(*(void *)v0 + 4 * v3 + 28);
  if ((v4 & 0x10) == 0)
  {
    uint64_t v2 = *(int *)(type metadata accessor for Compiler.ByteCodeGen(0LL) + 20);
    uint64_t v1 = *(void *)(v0 + v2);
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((v4 & 0x10000) != 0)
    {
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v1 + 16) + 1LL,  1,  (char *)v1,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
        uint64_t v1 = result;
      }

      unint64_t v7 = *(void *)(v1 + 16);
      unint64_t v16 = *(void *)(v1 + 24);
      unint64_t v8 = v7 + 1;
      if (v7 >= v16 >> 1)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v16 > 1),  v7 + 1,  1,  (char *)v1,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
        uint64_t v1 = result;
      }

      uint64_t v9 = 0xC00000000000000LL;
      goto LABEL_18;
    }

    if ((result & 1) != 0)
    {
LABEL_5:
      unint64_t v7 = *(void *)(v1 + 16);
      unint64_t v6 = *(void *)(v1 + 24);
      unint64_t v8 = v7 + 1;
      if (v7 >= v6 >> 1)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v6 > 1),  v7 + 1,  1,  (char *)v1,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
        uint64_t v1 = result;
      }

      uint64_t v9 = 0xC00000000000001LL;
LABEL_18:
      *(void *)(v1 + 16) = v8;
      *(void *)(v1 + 8 * v7 + 32) = v9;
      *(void *)(v0 + specialized Compiler.ByteCodeGen.emitAlternationGen<A>(_:withBacktracking:_:)(*(void *)(v3 + 16), v2) = v1;
      return result;
    }

uint64_t Compiler.ByteCodeGen.emitCharacter(_:)(unint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t result = MEMORY[0x1895F8858](v6);
  int64_t v10 = (int64_t)v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v11 = *v3;
  uint64_t v12 = *(void *)(*v3 + 16);
  if (!v12) {
    goto LABEL_100;
  }
  int v13 = *(_DWORD *)(v11 + 4 * v12 + 28);
  if ((v13 & 0x10000) == 0)
  {
    if ((a2 & 0x2000000000000000LL) != 0) {
      uint64_t v14 = HIBYTE(a2) & 0xF;
    }
    else {
      uint64_t v14 = a1 & 0xFFFFFFFFFFFFLL;
    }
    if (v14)
    {
      uint64_t v15 = 0LL;
      do
      {
        if ((a2 & 0x1000000000000000LL) != 0)
        {
          uint64_t v16 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
        }

        else
        {
          if ((a2 & 0x2000000000000000LL) != 0)
          {
            unint64_t v57 = a1;
            uint64_t v58 = a2 & 0xFFFFFFFFFFFFFFLL;
          }

          else if ((a1 & 0x1000000000000000LL) == 0)
          {
            _StringObject.sharedUTF8.getter();
          }

          uint64_t v16 = _decodeScalar(_:startingAt:)();
        }

        v15 += v17;
        uint64_t result = Compiler.ByteCodeGen.emitMatchScalar(_:)(v16);
      }

      while (v15 < v14);
    }

    return result;
  }

  if ((v13 & 1) != 0)
  {
    if ((Character._isSingleScalar.getter() & 1) == 0) {
      goto LABEL_80;
    }
    uint64_t result = specialized Collection.first.getter(a1, a2);
    if ((result & 0x100000000LL) != 0)
    {
      __break(1u);
      goto LABEL_105;
    }

    Unicode.Scalar.properties.getter();
    char v43 = Unicode.Scalar.Properties.isCased.getter();
    (*(void (**)(int64_t, uint64_t))(v7 + 8))(v10, v6);
    if ((v43 & 1) == 0)
    {
LABEL_80:
      if ((Character._isUppercased.getter() & 1) != 0 && (Character._isLowercased.getter() & 1) != 0) {
        goto LABEL_17;
      }
    }

    uint64_t v44 = type metadata accessor for Compiler.ByteCodeGen(0LL);
    if ((*((_BYTE *)v3 + *(int *)(v44 + 28)) & 1) != 0 || (Character.asciiValue.getter() & 0x100) != 0)
    {
      uint64_t v6 = (uint64_t)v3 + *(int *)(v44 + 20);
      uint64_t v48 = specialized TypedSetVector.store(_:)(a1, a2);
      uint64_t v3 = *(unint64_t **)v6;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v3[2] + 1,  1,  (char *)v3,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
        uint64_t v3 = (unint64_t *)result;
      }

      a2 = (v48 << 16) | 0x800000000000001LL;
LABEL_93:
      a1 = v3[2];
      unint64_t v11 = v3[3];
      int64_t v10 = a1 + 1;
      if (a1 >= v11 >> 1) {
        goto LABEL_101;
      }
      goto LABEL_94;
    }

    uint64_t result = specialized BidirectionalCollection.last.getter(a1, a2);
    if ((result & 0x100000000LL) == 0)
    {
      LODWORD(a2) = result;
      a1 = *(int *)(v44 + 20);
      uint64_t v6 = 0x9C0000000000000LL;
      int64_t v10 = *(unint64_t *)((char *)v3 + a1);
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) != 0)
      {
LABEL_85:
        unint64_t v45 = v6 & 0xFFFFFFFF00000000LL | a2;
        unint64_t v47 = *(void *)(v10 + 16);
        unint64_t v46 = *(void *)(v10 + 24);
        if (v47 >= v46 >> 1)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v46 > 1),  v47 + 1,  1,  (char *)v10,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
          int64_t v10 = result;
        }

        *(void *)(v10 + 16) = v47 + 1;
        *(void *)(v10 + 8 * v47 + 32) = v45;
        *(unint64_t *)((char *)v3 + a1) = v10;
        return result;
      }

LABEL_103:
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v10 + 16) + 1LL,  1,  (char *)v10,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
      int64_t v10 = result;
      goto LABEL_85;
    }

    if ((_DWORD)result == *MEMORY[0x18961C8C8]
      || (_DWORD)result == *MEMORY[0x18961C888]
      || (_DWORD)result == *MEMORY[0x18961C858]
      || (_DWORD)result == *MEMORY[0x18961C898])
    {
      goto LABEL_112;
    }

    uint64_t v62 = v67;
    Compiler.ByteCodeGen.emitNode(_:)(v68);
    uint64_t v12 = v62;
    if (v62)
    {
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      uint64_t v17 = *(char **)v16;
      if (*(void *)(*(void *)v16 + 16LL))
      {
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) != 0)
        {
          unint64_t v25 = *((void *)v17 + 2);
          if (v25) {
            goto LABEL_74;
          }
LABEL_111:
          __break(1u);
LABEL_112:
          type metadata accessor for Unreachable();
          lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind( &lazy protocol witness table cache variable for type Unreachable and conformance Unreachable,  (uint64_t (*)(uint64_t))MEMORY[0x18961C108],  MEMORY[0x18961C118]);
          uint64_t v12 = swift_allocError();
          MEMORY[0x186E16890]( 0x6572203A4F444F54LL,  0xEC0000006E6F7361LL,  "/Library/Caches/com.apple.xbs/Sources/swiftlang_overlay_Platform_Device/swift-experimental-string-processing /Sources/_StringProcessing/ByteCodeGen.swift",  152LL,  2LL,  449LL);
          swift_willThrow();
          uint64_t v17 = *(char **)v16;
          if (*(void *)(*(void *)v16 + 16LL))
          {
            uint64_t result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) != 0)
            {
              unint64_t v25 = *((void *)v17 + 2);
              if (v25) {
                goto LABEL_74;
              }
LABEL_115:
              __break(1u);
              goto LABEL_116;
            }
          }

          else
          {
            __break(1u);
          }

          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v17);
          uint64_t v17 = (char *)result;
          unint64_t v25 = *(void *)(result + 16);
          if (v25) {
            goto LABEL_74;
          }
          goto LABEL_115;
        }

LABEL_105:
    __break(1u);
    return result;
  }

LABEL_17:
  uint64_t v56 = type metadata accessor for Compiler.ByteCodeGen(0LL);
  if ((*((_BYTE *)v3 + *(int *)(v56 + 28)) & 1) != 0 || (Character.asciiValue.getter() & 0x100) != 0)
  {
    uint64_t v6 = (uint64_t)v3 + *(int *)(v56 + 20);
    a2 = (specialized TypedSetVector.store(_:)(a1, a2) << 16) | 0x800000000000000LL;
    uint64_t v3 = *(unint64_t **)v6;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v3[2] + 1,  1,  (char *)v3,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
      uint64_t v3 = (unint64_t *)result;
    }

    goto LABEL_93;
  }

  v49[1] = a1 & 0xFFFFFFFFFFFFLL;
  void v49[2] = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) != 0) {
    unint64_t v18 = HIBYTE(a2) & 0xF;
  }
  else {
    unint64_t v18 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v18)
  {
    __break(1u);
    goto LABEL_103;
  }

  uint64_t v53 = 4 * v18;
  int v19 = (a2 & 0x1000000000000000LL) == 0 || (a1 & 0x800000000000000LL) != 0;
  uint64_t v20 = 11LL;
  if (v19) {
    uint64_t v20 = 7LL;
  }
  unint64_t v21 = 15LL;
  unint64_t v22 = specialized DefaultIndices<>.index(before:)(v20 | (v18 << 16), a1, a2);
  uint64_t v50 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v51 = a2 & 0xFFFFFFFFFFFFFFLL;
  unint64_t v52 = v22 >> 14;
  swift_bridgeObjectRetain();
  uint64_t v23 = 4LL << v19;
  unint64_t v24 = 0LL;
  unint64_t v54 = v18;
  uint64_t v55 = 4LL << v19;
  while (1)
  {
    unint64_t v25 = v21 & 0xC;
    BOOL v26 = (v21 & 1) == 0 || v25 == v23;
    int64_t v10 = v26;
    if (!v26) {
      break;
    }
    unint64_t v27 = v21;
    if (v25 == v23)
    {
      unint64_t v42 = _StringGuts._slowEnsureMatchingEncoding(_:)(v21, a1, a2);
      uint64_t v23 = v55;
      unint64_t v27 = v42;
      if (v18 <= v42 >> 16) {
        goto LABEL_97;
      }
    }

    else if (v18 <= v21 >> 16)
    {
      goto LABEL_97;
    }

    if ((v27 & 1) == 0)
    {
      unint64_t v28 = _StringGuts.scalarAlignSlow(_:)(v27, a1, a2);
      uint64_t v23 = v55;
      unint64_t v27 = v27 & 0xC | v28 & 0xFFFFFFFFFFFFFFF3LL | 1;
    }

  unint64_t v21 = 0LL;
  unint64_t v22 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(17LL);
  v12._unint64_t countAndFlagsBits = 0x616D203A4F444F54LL;
  v12._object = (void *)0xEF20706F72702070LL;
  String.append(_:)(v12);
  _print_unlocked<A, B>(_:_:)();
  int v13 = v21;
  uint64_t v14 = v22;
  type metadata accessor for Unsupported();
  lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind( &lazy protocol witness table cache variable for type Unsupported and conformance Unsupported,  (uint64_t (*)(uint64_t))MEMORY[0x18961C120],  MEMORY[0x18961C130]);
  swift_allocError();
  uint64_t v15 = v13;
  uint64_t v16 = v14;
  uint64_t v17 = 619LL;
LABEL_18:
  MEMORY[0x186E168A8]( v15,  v16,  "/Library/Caches/com.apple.xbs/Sources/swiftlang_overlay_Platform_Device/swift-experimental-string-processing/Sources /_StringProcessing/ConsumerInterface.swift",  158LL,  2LL,  v17);
  return swift_willThrow();
}

  if (v9 == v10)
  {
    uint64_t v7 = _StringGuts._slowEnsureMatchingEncoding(_:)(v7, a3, a4);
    if ((a4 & 0x1000000000000000LL) == 0)
    {
LABEL_19:
      uint64_t v7 = (v7 & 0xFFFFFFFFFFFF0000LL) + 65540;
      if (v4 == v7 >> 14) {
        return v14;
      }
LABEL_27:
      uint64_t v9 = v7 & 0xC;
      uint64_t v15 = v7;
      if (v9 != v10) {
        goto LABEL_28;
      }
      goto LABEL_44;
    }
  }

  else if ((a4 & 0x1000000000000000LL) == 0)
  {
    goto LABEL_19;
  }

  if (v11 > v7 >> 16)
  {
    uint64_t v7 = String.UTF8View._foreignIndex(after:)();
    if (v4 == v7 >> 14) {
      return v14;
    }
    goto LABEL_27;
  }

  __break(1u);
LABEL_44:
  uint64_t v15 = _StringGuts._slowEnsureMatchingEncoding(_:)(v7, a3, a4);
LABEL_28:
  uint64_t v16 = v15 >> 16;
  if (v15 >> 16 >= v11)
  {
    __break(1u);
    goto LABEL_46;
  }

  if ((a4 & 0x1000000000000000LL) != 0)
  {
    unint64_t v18 = String.UTF8View._foreignSubscript(position:)();
  }

  else
  {
    if ((a4 & 0x2000000000000000LL) == 0)
    {
      if ((a3 & 0x1000000000000000LL) != 0)
      {
        uint64_t v17 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_33:
        unint64_t v18 = *(_BYTE *)(v17 + v16);
        goto LABEL_36;
      }

  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v18 = *(void *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(void *)(a1 + 72) = v18;
  *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 0xD;
  unint64_t v8 = v6 - 13;
  if (!v7) {
    unint64_t v8 = -1;
  }
  return (v8 + 1);
}

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 0xE;
  unint64_t v8 = v6 - 14;
  if (!v7) {
    unint64_t v8 = -1;
  }
  return (v8 + 1);
}

  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v18 = *(void *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(void *)(a1 + 72) = v18;
  *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
  return a1;
}

  int v30 = *(void (**)(void *, _BYTE *, uint64_t))(v15 + 16);
  v30(v21, v22, v14);
  v30((void *)(((unint64_t)v21 + v25) & ~v16), (_BYTE *)((unint64_t)&v22[v25] & ~v16), v14);
  if (!v23) {
    *((_BYTE *)v21 + v26) = 0;
  }
LABEL_19:
  if (v23) {
    int v31 = v26;
  }
  else {
    int v31 = v26 + 1;
  }
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v38 + 16))( ((unint64_t)v21 + v18 + v31) & ~v18,  (unint64_t)&v22[v18 + v31] & ~v18,  v37);
  unsigned int v32 = ((v31 + v18) & ~v18) + (((v41 & v40) + v39 + v19) & v36) + *(void *)(v38 + 64);
  uint64_t result = v43;
  uint64_t v34 = (v43 + v32 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unsigned int v35 = (v42 + v32 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  *(void *)uint64_t v34 = *(void *)v35;
  *(_BYTE *)(v34 + 8) = *(_BYTE *)(v35 + 8);
  return result;
}

  int v30 = *(void (**)(void *, _BYTE *, uint64_t))(v15 + 32);
  v30(v21, v22, v14);
  v30((void *)(((unint64_t)v21 + v25) & ~v16), (_BYTE *)((unint64_t)&v22[v25] & ~v16), v14);
  if (!v23) {
    *((_BYTE *)v21 + v26) = 0;
  }
LABEL_19:
  if (v23) {
    int v31 = v26;
  }
  else {
    int v31 = v26 + 1;
  }
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v38 + 32))( ((unint64_t)v21 + v18 + v31) & ~v18,  (unint64_t)&v22[v18 + v31] & ~v18,  v37);
  unsigned int v32 = ((v31 + v18) & ~v18) + (((v41 & v40) + v39 + v19) & v36) + *(void *)(v38 + 64);
  uint64_t result = v43;
  uint64_t v34 = (v43 + v32 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unsigned int v35 = (v42 + v32 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  *(void *)uint64_t v34 = *(void *)v35;
  *(_BYTE *)(v34 + 8) = *(_BYTE *)(v35 + 8);
  return result;
}

  int v31 = *(void (**)(void *, _BYTE *, uint64_t))(v16 + 16);
  v31(v22, v23, v15);
  v31((void *)(((unint64_t)v22 + v26) & ~v17), (_BYTE *)((unint64_t)&v23[v26] & ~v17), v15);
  if (!(_DWORD)v24) {
    *((_BYTE *)v22 + v27) = 0;
  }
LABEL_19:
  if ((_DWORD)v24) {
    unsigned int v32 = v27;
  }
  else {
    unsigned int v32 = v27 + 1;
  }
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v19 + 16))( ((unint64_t)v22 + v20 + v32) & ~v20,  (unint64_t)&v23[v20 + v32] & ~v20,  v34);
  return v35;
}

  int v31 = *(void (**)(void *, _BYTE *, uint64_t))(v16 + 32);
  v31(v22, v23, v15);
  v31((void *)(((unint64_t)v22 + v26) & ~v17), (_BYTE *)((unint64_t)&v23[v26] & ~v17), v15);
  if (!(_DWORD)v24) {
    *((_BYTE *)v22 + v27) = 0;
  }
LABEL_19:
  if ((_DWORD)v24) {
    unsigned int v32 = v27;
  }
  else {
    unsigned int v32 = v27 + 1;
  }
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v19 + 32))( ((unint64_t)v22 + v20 + v32) & ~v20,  (unint64_t)&v23[v20 + v32] & ~v20,  v34);
  return v35;
}

  uint64_t v14 = *(void (**)(void *, _BYTE *, uint64_t))(v5 + 16);
  v14(a1, a2, AssociatedTypeWitness);
  v14((void *)(((unint64_t)a1 + v9) & ~v8), (_BYTE *)((unint64_t)&a2[v9] & ~v8), AssociatedTypeWitness);
  if (!v6) {
    *((_BYTE *)a1 + v10) = 0;
  }
LABEL_19:
  if (v6) {
    uint64_t v15 = v10;
  }
  else {
    uint64_t v15 = v10 + 1;
  }
  uint64_t v16 = swift_getAssociatedTypeWitness();
  uint64_t v17 = *(void *)(v16 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v17 + 16))( ((unint64_t)a1 + v15 + *(unsigned __int8 *)(v17 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80),  (unint64_t)&a2[v15 + *(unsigned __int8 *)(v17 + 80)] & ~(unint64_t)*(unsigned __int8 *)(v17 + 80),  v16);
  return a1;
}

  uint64_t v14 = *(void (**)(void *, _BYTE *, uint64_t))(v5 + 32);
  v14(a1, a2, AssociatedTypeWitness);
  v14((void *)(((unint64_t)a1 + v9) & ~v8), (_BYTE *)((unint64_t)&a2[v9] & ~v8), AssociatedTypeWitness);
  if (!v6) {
    *((_BYTE *)a1 + v10) = 0;
  }
LABEL_19:
  if (v6) {
    uint64_t v15 = v10;
  }
  else {
    uint64_t v15 = v10 + 1;
  }
  uint64_t v16 = swift_getAssociatedTypeWitness();
  uint64_t v17 = *(void *)(v16 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v17 + 32))( ((unint64_t)a1 + v15 + *(unsigned __int8 *)(v17 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80),  (unint64_t)&a2[v15 + *(unsigned __int8 *)(v17 + 80)] & ~(unint64_t)*(unsigned __int8 *)(v17 + 80),  v16);
  return a1;
}

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 4;
  unint64_t v8 = v6 - 4;
  if (!v7) {
    unint64_t v8 = -1;
  }
  return (v8 + 1);
}

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 0x1D;
  unint64_t v8 = v6 - 29;
  if (!v7) {
    unint64_t v8 = -1;
  }
  return (v8 + 1);
}

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 8;
  unint64_t v8 = v6 - 8;
  if (!v7) {
    unint64_t v8 = -1;
  }
  return (v8 + 1);
}

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 3;
  unint64_t v8 = v6 - 3;
  if (!v7) {
    unint64_t v8 = -1;
  }
  return (v8 + 1);
}

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 2;
  unint64_t v8 = v6 - 2;
  if (!v7) {
    unint64_t v8 = -1;
  }
  return (v8 + 1);
}

LABEL_42:
    if ((a2 & 0x1000000000000000LL) != 0)
    {
      uint64_t v34 = String.UnicodeScalarView._foreignIndex(after:)();
      uint64_t v23 = v55;
      unint64_t v33 = v34;
      if (!(_DWORD)v10) {
        goto LABEL_57;
      }
    }

    else
    {
      uint64_t v6 = v27 >> 16;
      if ((a2 & 0x2000000000000000LL) != 0)
      {
        unint64_t v57 = a1;
        uint64_t v58 = v51;
        int v30 = *((unsigned __int8 *)&v57 + v6);
      }

      else
      {
        uint64_t v29 = v50;
        if ((a1 & 0x1000000000000000LL) == 0)
        {
          uint64_t v29 = _StringObject.sharedUTF8.getter();
          uint64_t v23 = v55;
        }

        int v30 = *(unsigned __int8 *)(v29 + v6);
      }

      int v31 = (char)v30;
      unsigned int v32 = __clz(v30 ^ 0xFF) - 24;
      if (v31 >= 0) {
        LOBYTE(v32) = 1;
      }
      unint64_t v11 = v6 + v32;
      unint64_t v33 = (v11 << 16) | 5;
      if (!(_DWORD)v10)
      {
LABEL_57:
        if (v21 >> 16 >= v18) {
          goto LABEL_99;
        }
        goto LABEL_58;
      }
    }

    if (v25 == v23) {
      unint64_t v21 = _StringGuts._slowEnsureMatchingEncoding(_:)(v21, a1, a2);
    }
    if (v21 >> 16 >= v18) {
      goto LABEL_98;
    }
    if ((v21 & 1) == 0) {
      _StringGuts.scalarAlignSlow(_:)(v21, a1, a2);
    }
LABEL_58:
    if ((a2 & 0x1000000000000000LL) != 0)
    {
      unsigned int v35 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }

    else
    {
      if ((a2 & 0x2000000000000000LL) != 0)
      {
        unint64_t v57 = a1;
        uint64_t v58 = v51;
      }

      else if ((a1 & 0x1000000000000000LL) == 0)
      {
        _StringObject.sharedUTF8.getter();
      }

      unsigned int v35 = _decodeScalar(_:startingAt:)();
    }

    unsigned int v36 = v35;
    uint64_t v37 = *(int *)(v56 + 20);
    if (v24 == v52) {
      uint64_t v6 = 0x940000000000000LL;
    }
    else {
      uint64_t v6 = 0x900000000000000LL;
    }
    uint64_t v38 = *(char **)((char *)v3 + v37);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v38 + 2) + 1LL,  1,  v38,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
    }
    unint64_t v40 = *((void *)v38 + 2);
    unint64_t v39 = *((void *)v38 + 3);
    uint64_t v23 = v55;
    if (v40 >= v39 >> 1)
    {
      uint64_t v41 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v39 > 1),  v40 + 1,  1,  v38,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
      uint64_t v23 = v55;
      uint64_t v38 = v41;
    }

    *((void *)v38 + 2) = v40 + 1;
    *(void *)&v38[8 * v40 + 32] = v6 | v36;
    *(unint64_t *)((char *)v3 + v37) = (unint64_t)v38;
    unint64_t v24 = v33 >> 14;
    unint64_t v21 = v33;
    unint64_t v11 = v53;
    unint64_t v18 = v54;
    if (v33 >> 14 == v53) {
      return swift_bridgeObjectRelease();
    }
  }

  unint64_t v27 = v21;
  if (v18 > v21 >> 16) {
    goto LABEL_42;
  }
  __break(1u);
LABEL_97:
  __break(1u);
LABEL_98:
  __break(1u);
LABEL_99:
  __break(1u);
LABEL_100:
  __break(1u);
LABEL_101:
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v11 > 1),  v10,  1,  (char *)v3,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
  uint64_t v3 = (unint64_t *)result;
LABEL_94:
  v3[2] = v10;
  v3[a1 + 4] = a2;
  *(void *)uint64_t v6 = v3;
  return result;
}

    *(void *)(v5 + 16) = 0LL;
    goto LABEL_43;
  }

  int v19 = v40[v20];
  if (v19)
  {
    unint64_t v8 = v20;
    goto LABEL_21;
  }

  while (1)
  {
    unint64_t v8 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v8 >= v12) {
      goto LABEL_31;
    }
    int v19 = v40[v8];
    ++v20;
    if (v19) {
      goto LABEL_21;
    }
  }

    *(void *)(v2 + 16) = 0LL;
    goto LABEL_43;
  }

  uint64_t v16 = v6[v17];
  if (v16)
  {
    uint64_t v5 = v17;
    goto LABEL_23;
  }

  while (1)
  {
    uint64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    uint64_t v16 = v6[v5];
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }

    *(void *)(v2 + 16) = 0LL;
    goto LABEL_43;
  }

  uint64_t v16 = v36[v17];
  if (v16)
  {
    uint64_t v5 = v17;
    goto LABEL_23;
  }

  while (1)
  {
    uint64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v5 >= v9) {
      goto LABEL_33;
    }
    uint64_t v16 = v36[v5];
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }

    *(void *)(v2 + 16) = 0LL;
    goto LABEL_43;
  }

  uint64_t v16 = v6[v17];
  if (v16)
  {
    uint64_t v5 = v17;
    goto LABEL_23;
  }

  while (1)
  {
    uint64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    uint64_t v16 = v6[v5];
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }

uint64_t Compiler.ByteCodeGen.emitMatchScalar(_:)(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  unint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *(void *)(*(void *)v3 + 16LL);
  if (!v9)
  {
    __break(1u);
LABEL_11:
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v8 + 2) + 1LL,  1,  v8,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
    unint64_t v8 = (char *)result;
    goto LABEL_7;
  }

  if ((*(_DWORD *)(*(void *)v3 + 4 * v9 + 28) & 1) != 0
    && (Unicode.Scalar.properties.getter(),
        char v10 = Unicode.Scalar.Properties.isCased.getter(),
        (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5),
        (v10 & 1) != 0))
  {
    uint64_t v5 = *(int *)(type metadata accessor for Compiler.ByteCodeGen(0LL) + 20);
    a1 = a1;
    uint64_t v2 = 0x980000000000000LL;
  }

  else
  {
    uint64_t v5 = *(int *)(type metadata accessor for Compiler.ByteCodeGen(0LL) + 20);
    a1 = a1;
    uint64_t v2 = 0x900000000000000LL;
  }

  unint64_t v8 = *(char **)(v3 + v5);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0) {
    goto LABEL_11;
  }
LABEL_7:
  uint64_t v12 = a1 | v2;
  unint64_t v14 = *((void *)v8 + 2);
  unint64_t v13 = *((void *)v8 + 3);
  if (v14 >= v13 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v13 > 1),  v14 + 1,  1,  v8,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
    unint64_t v8 = (char *)result;
  }

  *((void *)v8 + 2) = v14 + 1;
  *(void *)&v8[8 * v14 + 32] = v12;
  *(void *)(v3 + v5) = v8;
  return result;
}

uint64_t Compiler.ByteCodeGen.emitBackreference(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for AST.Atom.Number();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  uint64_t v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for AST.Reference.Kind();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v8);
  unint64_t v11 = (uint64_t *)((char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  if ((AST.Reference.recursesWholePattern.getter() & 1) != 0)
  {
    unint64_t v41 = 0LL;
    unint64_t v42 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(22LL);
    swift_bridgeObjectRelease();
    unint64_t v41 = 0xD000000000000014LL;
    unint64_t v42 = 0x8000000182DA3870LL;
    type metadata accessor for AST.Reference();
    lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind( &lazy protocol witness table cache variable for type AST.Reference and conformance AST.Reference,  (uint64_t (*)(uint64_t))MEMORY[0x18961C950],  MEMORY[0x18961C960]);
    v12._unint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    unint64_t v13 = v41;
    unint64_t v14 = v42;
    type metadata accessor for Unsupported();
    lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind( &lazy protocol witness table cache variable for type Unsupported and conformance Unsupported,  (uint64_t (*)(uint64_t))MEMORY[0x18961C120],  MEMORY[0x18961C130]);
    swift_allocError();
    MEMORY[0x186E168A8]( v13,  v14,  "/Library/Caches/com.apple.xbs/Sources/swiftlang_overlay_Platform_Device/swift-experimental-string-processing/Sourc es/_StringProcessing/ByteCodeGen.swift",  152LL,  2LL,  144LL);
    return swift_willThrow();
  }

  uint64_t v16 = a1;
  AST.Reference.kind.getter();
  int v17 = (*(uint64_t (**)(uint64_t *, uint64_t))(v9 + 88))(v11, v8);
  if (v17 == *MEMORY[0x18961C930])
  {
    (*(void (**)(uint64_t *, uint64_t))(v9 + 96))(v11, v8);
    (*(void (**)(char *, uint64_t *, uint64_t))(v5 + 32))(v7, v11, v4);
    uint64_t v16 = AST.Atom.Number.value.getter();
    unint64_t v11 = v18;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    if ((v11 & 1) != 0)
    {
      type metadata accessor for Unreachable();
      lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind( &lazy protocol witness table cache variable for type Unreachable and conformance Unreachable,  (uint64_t (*)(uint64_t))MEMORY[0x18961C108],  MEMORY[0x18961C118]);
      swift_allocError();
      MEMORY[0x186E16890]( 0xD000000000000010LL,  0x8000000182DA3890LL,  "/Library/Caches/com.apple.xbs/Sources/swiftlang_overlay_Platform_Device/swift-experimental-string-processing/Sou rces/_StringProcessing/ByteCodeGen.swift",  152LL,  2LL,  150LL);
      return swift_willThrow();
    }

    uint64_t v19 = *(void *)(*(void *)v2 + 16LL);
    if (v19)
    {
      unint64_t v11 = (uint64_t *)(((*(_DWORD *)(*(void *)v2 + 4 * v19 + 28) & 0x10000) == 0) | (unint64_t)(v16 << 16));
      uint64_t v8 = 0x1A00000000000000LL;
      uint64_t v5 = *(int *)(type metadata accessor for Compiler.ByteCodeGen(0LL) + 20);
      uint64_t v16 = *(void *)(v2 + v5);
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) != 0)
      {
LABEL_8:
        unint64_t v20 = (unint64_t)v11 | v8;
        unint64_t v22 = *(void *)(v16 + 16);
        unint64_t v21 = *(void *)(v16 + 24);
        if (v22 >= v21 >> 1)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v21 > 1),  v22 + 1,  1,  (char *)v16,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
          uint64_t v16 = result;
        }

        *(void *)(v16 + 16) = v22 + 1;
        *(void *)(v16 + 8 * v22 + 32) = v20;
        *(void *)(v2 + v5) = v16;
        return result;
      }

LABEL_29:
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v16 + 16) + 1LL,  1,  (char *)v16,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
      uint64_t v16 = result;
      goto LABEL_8;
    }

    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }

  if (v17 == *MEMORY[0x18961C938])
  {
    unint64_t v41 = 0LL;
    unint64_t v42 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(22LL);
    swift_bridgeObjectRelease();
    unint64_t v41 = 0xD000000000000014LL;
    unint64_t v42 = 0x8000000182DA3870LL;
    type metadata accessor for AST.Reference();
    lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind( &lazy protocol witness table cache variable for type AST.Reference and conformance AST.Reference,  (uint64_t (*)(uint64_t))MEMORY[0x18961C950],  MEMORY[0x18961C960]);
    v23._unint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    unint64_t v24 = v41;
    unint64_t v25 = v42;
    type metadata accessor for Unsupported();
    lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind( &lazy protocol witness table cache variable for type Unsupported and conformance Unsupported,  (uint64_t (*)(uint64_t))MEMORY[0x18961C120],  MEMORY[0x18961C130]);
    swift_allocError();
    MEMORY[0x186E168A8]( v24,  v25,  "/Library/Caches/com.apple.xbs/Sources/swiftlang_overlay_Platform_Device/swift-experimental-string-processing/Sourc es/_StringProcessing/ByteCodeGen.swift",  152LL,  2LL,  158LL);
    swift_willThrow();
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v9 + 8))(v11, v8);
  }

  if (v17 != *MEMORY[0x18961C928])
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }

  (*(void (**)(uint64_t *, uint64_t))(v9 + 96))(v11, v8);
  uint64_t v26 = *(void *)(*(void *)v2 + 16LL);
  if (!v26) {
    goto LABEL_28;
  }
  uint64_t v29 = v11;
  uint64_t v27 = *v11;
  unint64_t v28 = (void *)v29[1];
  int v30 = *(_DWORD *)(*(void *)v2 + 4 * v26 + 28);
  int v31 = (uint64_t *)(v2 + *(int *)(type metadata accessor for Compiler.ByteCodeGen(0LL) + 20));
  type metadata accessor for MEProgram.Builder(0LL);
  v32._unint64_t countAndFlagsBits = v27;
  v32._object = v28;
  Swift::Int_optional v43 = CaptureList.indexOfCapture(named:)(v32);
  Swift::Int value = v43.value;
  Swift::Bool is_nil = v43.is_nil;
  swift_bridgeObjectRelease();
  if ((v30 & 0x10000) != 0)
  {
    if (!is_nil)
    {
      uint64_t v35 = 0x1A00000000000000LL;
      goto LABEL_21;
    }

  if (!v10) {
    return 0LL;
  }
  if (v7 < v9) {
    return (*(uint64_t (**)(uint64_t))(v8 + 48))((v15 + a1) & ~v14);
  }
  if (!(_DWORD)v6) {
    return 0LL;
  }
  unint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, v6, AssociatedTypeWitness);
  Swift::String v23 = v22 != 0;
  uint64_t result = (v22 - 1);
  if ((_DWORD)result == 0 || !v23) {
    return 0LL;
  }
  return result;
}

    uint64_t v35 = *(void (**)(unsigned __int8 *, uint64_t))(v4 + 8);
    v35(a1, AssociatedTypeWitness);
    v35((unsigned __int8 *)((unint64_t)&a1[v46] & v47), AssociatedTypeWitness);
    (*(void (**)(unint64_t, uint64_t))(v7 + 8))((unint64_t)&a1[v48] & v14, v49);
    goto LABEL_30;
  }

  unint64_t v28 = 8 * v17;
  uint64_t v27 = a2;
  if (!a1[v17]) {
    goto LABEL_44;
  }
  uint64_t v29 = (a1[v17] - 1) << v28;
  if ((_DWORD)v17)
  {
    else {
      int v30 = 4;
    }
    __asm { BR              X12 }
  }

  if (v29 == -1)
  {
LABEL_44:
    if (!a2[v17]) {
      goto LABEL_34;
    }
    unint64_t v33 = (a2[v17] - 1) << v28;
    if ((_DWORD)v17)
    {
      else {
        uint64_t v34 = 4;
      }
      __asm { BR              X11 }
    }

    uint64_t v27 = a2;
    if (v33 == -1) {
      goto LABEL_34;
    }
    goto LABEL_29;
  }

  if (a2[v17])
  {
    uint64_t v27 = a2;
    if ((a2[v17] - 1) << v28 != -1) {
      goto LABEL_30;
    }
  }

    uint64_t v35 = *(void (**)(unsigned __int8 *, uint64_t))(v4 + 8);
    v35(a1, AssociatedTypeWitness);
    v35((unsigned __int8 *)((unint64_t)&a1[v46] & v47), AssociatedTypeWitness);
    (*(void (**)(unint64_t, uint64_t))(v7 + 8))((unint64_t)&a1[v48] & v14, v49);
    goto LABEL_30;
  }

  unint64_t v28 = 8 * v17;
  uint64_t v27 = a2;
  if (!a1[v17]) {
    goto LABEL_44;
  }
  uint64_t v29 = (a1[v17] - 1) << v28;
  if ((_DWORD)v17)
  {
    else {
      int v30 = 4;
    }
    __asm { BR              X12 }
  }

  if (v29 == -1)
  {
LABEL_44:
    if (!a2[v17]) {
      goto LABEL_34;
    }
    unint64_t v33 = (a2[v17] - 1) << v28;
    if ((_DWORD)v17)
    {
      else {
        uint64_t v34 = 4;
      }
      __asm { BR              X11 }
    }

    uint64_t v27 = a2;
    if (v33 == -1) {
      goto LABEL_34;
    }
    goto LABEL_29;
  }

  if (a2[v17])
  {
    uint64_t v27 = a2;
    if ((a2[v17] - 1) << v28 != -1) {
      goto LABEL_30;
    }
  }

LABEL_26:
    lazy protocol witness table accessor for type RegexCompilationError and conformance RegexCompilationError();
    swift_allocError();
    *(void *)uint64_t v40 = 0LL;
    *(void *)(v40 + 8) = 0LL;
    *(_BYTE *)(v40 + 16) = 2;
    return swift_willThrow();
  }

  if (is_nil) {
    goto LABEL_26;
  }
  uint64_t v35 = 0x1A00000000000001LL;
LABEL_21:
  uint64_t v36 = *v31;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v36 + 16) + 1LL,  1,  (char *)v36,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
    uint64_t v36 = result;
  }

  uint64_t v37 = v35 | (value << 16);
  unint64_t v39 = *(void *)(v36 + 16);
  unint64_t v38 = *(void *)(v36 + 24);
  if (v39 >= v38 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v38 > 1),  v39 + 1,  1,  (char *)v36,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
    uint64_t v36 = result;
  }

  *(void *)(v36 + 16) = v39 + 1;
  *(void *)(v36 + 8 * v39 + 32) = v37;
  *int v31 = v36;
  return result;
}

    __break(1u);
    return result;
  }

  swift_release();
  unint64_t v25 = MEMORY[0x18961AFE8];
LABEL_22:
  if (*(void *)(v25 + 16) == 1LL)
  {
    outlined init with copy of Any(v25 + 32, v28);
    return swift_bridgeObjectRelease();
  }

  else
  {
    *(void *)&uint64_t v36 = v25;
    swift_getCanonicalSpecializedMetadata();
    lazy protocol witness table accessor for type PartialRangeUpTo<String.Index> and conformance PartialRangeUpTo<A>( &lazy protocol witness table cache variable for type [Any] and conformance [A],  (uint64_t)&unk_189C49988,  (uint64_t)&cache variable for noncanonical specialized generic type metadata for [Any],  MEMORY[0x189618458]);
    return static TypeConstruction.tuple<A>(of:)();
  }

  __break(1u);
  return result;
}

    swift_storeEnumTagMultiPayload();
    return a1;
  }

  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  return a1;
}

Swift::Void __swiftcall MEProgram.Builder.buildUnresolvedReference(id:isScalarMode:)( _StringProcessing::ReferenceID id, Swift::Bool isScalarMode)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for MEProgram.Builder(0LL);
  MEMORY[0x1895F8858](v6);
  uint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Swift::UInt v9 = *(void *)id.base;
  uint64_t v10 = *(char **)v3;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v10 + 2) + 1LL,  1,  v10,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
  }
  unint64_t v12 = *((void *)v10 + 2);
  unint64_t v11 = *((void *)v10 + 3);
  if (v12 >= v11 >> 1) {
    uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v11 > 1),  v12 + 1,  1,  v10,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
  }
  *((void *)v10 + 2) = v12 + 1;
  *(void *)&v10[8 * v12 + 32] = isScalarMode | 0x1A00000000000000LL;
  *(void *)uint64_t v3 = v10;
  outlined init with copy of MEProgram((uint64_t)v3, (uint64_t)v8, type metadata accessor for MEProgram.Builder);
  uint64_t v13 = *(void *)(*(void *)v8 + 16LL);
  outlined destroy of MEProgram((uint64_t)v8, type metadata accessor for MEProgram.Builder);
  uint64_t v14 = *(int *)(v6 + 92);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v33 = *(void *)&v3[v14];
  uint64_t v16 = v33;
  *(void *)&v3[v14] = 0x8000000000000000LL;
  unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(v9);
  uint64_t v19 = *(void *)(v16 + 16);
  BOOL v20 = (v17 & 1) == 0;
  uint64_t v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
    __break(1u);
    goto LABEL_19;
  }

  char v22 = v17;
  if (*(void *)(v16 + 24) >= v21)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v16 = v33;
    }
  }

  else
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v21, isUniquelyReferenced_nonNull_native);
    uint64_t v16 = v33;
    unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v9);
    if ((v22 & 1) != (v24 & 1))
    {
LABEL_21:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return;
    }

    unint64_t v18 = v23;
  }

  *(void *)&v3[v14] = v16;
  swift_bridgeObjectRelease();
  unint64_t v25 = *(void **)&v3[v14];
  if ((v22 & 1) != 0) {
    goto LABEL_14;
  }
  v25[(v18 >> 6) + 8] |= 1LL << v18;
  *(void *)(v25[6] + 8 * v18) = v9;
  *(void *)(v25[7] + 8 * v18) = MEMORY[0x18961AFE8];
  uint64_t v26 = v25[2];
  BOOL v27 = __OFADD__(v26, 1LL);
  uint64_t v28 = v26 + 1;
  if (v27)
  {
    __break(1u);
    goto LABEL_21;
  }

  v25[2] = v28;
LABEL_14:
  Swift::UInt v9 = v25[7];
  uint64_t v3 = *(char **)(v9 + 8 * v18);
  char v29 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v9 + 8 * v18) = v3;
  if ((v29 & 1) == 0)
  {
LABEL_19:
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v3 + 2) + 1LL,  1,  v3,  &demangling cache variable for type metadata for _ContiguousArrayStorage<TypedInt<_InstructionAddress>>);
    *(void *)(v9 + 8 * v18) = v3;
  }

  unint64_t v31 = *((void *)v3 + 2);
  unint64_t v30 = *((void *)v3 + 3);
  if (v31 >= v30 >> 1)
  {
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v30 > 1),  v31 + 1,  1,  v3,  &demangling cache variable for type metadata for _ContiguousArrayStorage<TypedInt<_InstructionAddress>>);
    *(void *)(v9 + 8 * v18) = v3;
  }

  *((void *)v3 + 2) = v31 + 1;
  *(void *)&v3[8 * v31 + 32] = v13 - 1;
}

uint64_t (*AST.Atom.generateConsumer(_:)( void *a1))(unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v3 = type metadata accessor for AST.Atom.CharacterProperty();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  uint64_t v6 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for AST.Atom.Kind();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  uint64_t v10 = (void *)((char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  AST.Atom.kind.getter();
  int v11 = (*(uint64_t (**)(uint64_t *, uint64_t))(v8 + 88))(v10, v7);
  if (v11 == *MEMORY[0x18961C748] || v11 == *MEMORY[0x18961C750]) {
    goto LABEL_35;
  }
  if (v11 == *MEMORY[0x18961C718])
  {
LABEL_6:
    (*(void (**)(uint64_t *, uint64_t))(v8 + 8))(v10, v7);
    return 0LL;
  }

  if (v11 == *MEMORY[0x18961C770])
  {
    (*(void (**)(uint64_t *, uint64_t))(v8 + 96))(v10, v7);
    (*(void (**)(char *, uint64_t *, uint64_t))(v4 + 32))(v6, v10, v3);
    uint64_t v14 = a1[2];
    if (v14)
    {
      if ((*((_DWORD *)a1 + v14 + 7) & 0x10000) != 0) {
        uint64_t v15 = (uint64_t (*)(uint64_t (*)(uint64_t), uint64_t))consumeCharacterWithLeadingScalar(_:);
      }
      else {
        uint64_t v15 = (uint64_t (*)(uint64_t (*)(uint64_t), uint64_t))consumeScalar(_:);
      }
      uint64_t v16 = closure #1 in AST.Atom.CharacterProperty.generateConsumer(_:)((uint64_t)v6, v15, a1);
      if (v1)
      {
        (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      }

      else
      {
        uint64_t v7 = v16;
        uint64_t v18 = v17;
        char v19 = AST.Atom.CharacterProperty.isInverted.getter();
        (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
        if ((v19 & 1) != 0)
        {
          BOOL v20 = (void *)swift_allocObject();
          void v20[2] = v7;
          v20[3] = v18;
          v20[4] = a1;
          swift_bridgeObjectRetain();
          return partial apply for closure #1 in invert #1 (_:) in AST.Atom.CharacterProperty.generateConsumer(_:);
        }
      }

      return (uint64_t (*)(unint64_t, unint64_t, unint64_t, uint64_t))v7;
    }

    __break(1u);
    goto LABEL_35;
  }

  if (v11 == *MEMORY[0x18961C760])
  {
LABEL_35:
    (*(void (**)(uint64_t *, uint64_t))(v8 + 8))(v10, v7);
    goto LABEL_36;
  }

  if (v11 == *MEMORY[0x18961C720] || v11 == *MEMORY[0x18961C700] || v11 == *MEMORY[0x18961C728]) {
    goto LABEL_6;
  }
  if (v11 == *MEMORY[0x18961C710])
  {
    (*(void (**)(uint64_t *, uint64_t))(v8 + 96))(v10, v7);
    uint64_t v7 = consumeName(_:opts:)(*v10, v10[1], (uint64_t)a1);
    swift_bridgeObjectRelease();
    return (uint64_t (*)(unint64_t, unint64_t, unint64_t, uint64_t))v7;
  }

  if (v11 == *MEMORY[0x18961C708]
    || v11 == *MEMORY[0x18961C6E8]
    || v11 == *MEMORY[0x18961C758]
    || v11 == *MEMORY[0x18961C730]
    || v11 == *MEMORY[0x18961C738])
  {
    goto LABEL_6;
  }

  if (v11 != *MEMORY[0x18961C740]
    && v11 != *MEMORY[0x18961C6F0]
    && v11 != *MEMORY[0x18961C6F8]
    && v11 == *MEMORY[0x18961C768])
  {
    return 0LL;
  }

uint64_t MEProgram.Builder.buildConsume(by:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)v2[7];
  uint64_t v6 = v5[2];
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = a2;
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v5[2] + 1LL,  1,  v5,  &demangling cache variable for type metadata for _ContiguousArrayStorage<(_:_:)>);
  }
  unint64_t v9 = v5[2];
  unint64_t v8 = v5[3];
  if (v9 >= v8 >> 1) {
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v8 > 1),  v9 + 1,  1,  v5,  &demangling cache variable for type metadata for _ContiguousArrayStorage<(_:_:)>);
  }
  _OWORD v5[2] = v9 + 1;
  uint64_t v10 = &v5[2 * v9];
  void v10[4] = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed String, @unowned Range<String.Index>) -> (@unowned String.Index?);
  v10[5] = v7;
  v2[7] = (uint64_t)v5;
  uint64_t v11 = *v2;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v11 + 16) + 1LL,  1,  (char *)v11,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
    uint64_t v11 = result;
  }

  unint64_t v14 = *(void *)(v11 + 16);
  unint64_t v13 = *(void *)(v11 + 24);
  if (v14 >= v13 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v13 > 1),  v14 + 1,  1,  (char *)v11,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
    uint64_t v11 = result;
  }

  *(void *)(v11 + 16) = v14 + 1;
  *(void *)(v11 + 8 * v14 + 32) = v6 | 0xD00000000000000LL;
  *uint64_t v2 = v11;
  return result;
}

uint64_t AST.Atom._patternBase.getter()
{
  uint64_t v0 = type metadata accessor for AST.Atom.CharacterProperty();
  uint64_t v25 = *(void *)(v0 - 8);
  uint64_t v26 = v0;
  MEMORY[0x1895F8858](v0);
  char v24 = (char *)&v24 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v2 = type metadata accessor for AST.Atom.EscapedBuiltin();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for AST.Atom.Kind();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1895F8858](v6);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v8);
  unint64_t v12 = (char *)&v24 - v11;
  AST.Atom.kind.getter();
  unint64_t v13 = *(uint64_t (**)(char *, uint64_t))(v7 + 88);
  int v14 = v13(v12, v6);
  if (v14 == *MEMORY[0x18961C760])
  {
    (*(void (**)(char *, uint64_t))(v7 + 96))(v12, v6);
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v12, v2);
    AST.Atom.EscapedBuiltin.dslAssertionKind.getter(&v28);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }

  else
  {
    if (v14 == *MEMORY[0x18961C6F0])
    {
      char v15 = 9;
      goto LABEL_11;
    }

    if (v14 == *MEMORY[0x18961C6F8])
    {
      char v15 = 10;
      goto LABEL_11;
    }

    char v28 = 13;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
  }

  char v15 = v28;
  if (v28 != 13)
  {
LABEL_11:
    char v27 = v15;
    return DSLTree.Atom.Assertion._patternBase.getter();
  }

  AST.Atom.kind.getter();
  int v16 = v13(v10, v6);
  if (v16 == *MEMORY[0x18961C770])
  {
    (*(void (**)(char *, uint64_t))(v7 + 96))(v10, v6);
    uint64_t v18 = v24;
    uint64_t v17 = v25;
    uint64_t v19 = v26;
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v24, v10, v26);
    char v20 = AST.Atom.CharacterProperty.isUnprintableProperty.getter();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v18, v19);
    if ((v20 & 1) != 0) {
      return AST.Atom._regexBase.getter();
    }
    return AST.Atom._dslBase.getter();
  }

  int v22 = v16;
  if (v16 == *MEMORY[0x18961C720] || v16 == *MEMORY[0x18961C700] || v16 == *MEMORY[0x18961C728])
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }

  else
  {
    int v23 = *MEMORY[0x18961C710];
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    if (v22 != v23) {
      return AST.Atom._dslBase.getter();
    }
  }

  return AST.Atom._regexBase.getter();
}

uint64_t Compiler.ByteCodeGen.emitQuotedLiteral(_:)(unint64_t a1, unint64_t object)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v76 = *(void *)(v6 - 8);
  uint64_t v77 = v6;
  MEMORY[0x1895F8858](v6);
  uint64_t v75 = (char *)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = *(void *)(*(void *)v2 + 16LL);
  if (!v8) {
    goto LABEL_105;
  }
  if ((*(_DWORD *)(*(void *)v2 + 4 * v8 + 28) & 0x10000) == 0)
  {
    uint64_t v9 = HIBYTE(object) & 0xF;
    unint64_t v80 = a1;
    unint64_t v81 = object;
    if ((object & 0x2000000000000000LL) == 0) {
      uint64_t v9 = a1 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v82 = 0LL;
    unint64_t v83 = v9;
    swift_bridgeObjectRetain();
    Swift::String_optional v10 = String.Iterator.next()();
    if (!v10.value._object) {
      return swift_bridgeObjectRelease();
    }
    uint64_t countAndFlagsBits = v10.value._countAndFlagsBits;
    object = (unint64_t)v10.value._object;
    while (1)
    {
      uint64_t v12 = HIBYTE(object) & 0xF;
      if ((object & 0x2000000000000000LL) == 0) {
        uint64_t v12 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
      }
      uint64_t v78 = v12;
      if (v12) {
        break;
      }
LABEL_36:
      swift_bridgeObjectRelease();
      Swift::String_optional v29 = String.Iterator.next()();
      uint64_t countAndFlagsBits = v29.value._countAndFlagsBits;
      object = (unint64_t)v29.value._object;
      if (!v29.value._object) {
        return swift_bridgeObjectRelease();
      }
    }

    unint64_t v73 = (object & 0xFFFFFFFFFFFFFFFLL) + 32;
    uint64_t v74 = object & 0xFFFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain_n();
    uint64_t v13 = 0LL;
    uint64_t v14 = countAndFlagsBits;
    while (1)
    {
      if ((object & 0x1000000000000000LL) != 0)
      {
        unsigned int v18 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
        uint64_t v20 = v19;
      }

      else
      {
        if ((object & 0x2000000000000000LL) != 0)
        {
          v79[0] = countAndFlagsBits;
          v79[1] = v74;
          unsigned int v18 = *((unsigned __int8 *)v79 + v13);
          if (*((char *)v79 + v13) < 0) {
            __asm { BR              X9 }
          }
        }

        else
        {
          uint64_t v17 = v73;
          if ((countAndFlagsBits & 0x1000000000000000LL) == 0) {
            uint64_t v17 = _StringObject.sharedUTF8.getter();
          }
          unsigned int v18 = *(unsigned __int8 *)(v17 + v13);
          if (*(char *)(v17 + v13) < 0) {
            __asm { BR              X9 }
          }
        }

        uint64_t v20 = 1LL;
      }

      uint64_t v21 = *(void *)(*(void *)v3 + 16LL);
      if (!v21) {
        break;
      }
      if ((*(_DWORD *)(*(void *)v3 + 4 * v21 + 28) & 1) != 0
        && (int v22 = v75,
            Unicode.Scalar.properties.getter(),
            char v23 = Unicode.Scalar.Properties.isCased.getter(),
            (*(void (**)(char *, uint64_t))(v76 + 8))(v22, v77),
            (v23 & 1) != 0))
      {
        uint64_t v24 = *(int *)(type metadata accessor for Compiler.ByteCodeGen(0LL) + 20);
        uint64_t v25 = *(char **)(v3 + v24);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v25 + 2) + 1LL,  1,  v25,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
        }
        a1 = *((void *)v25 + 2);
        unint64_t v26 = *((void *)v25 + 3);
        unint64_t v27 = a1 + 1;
        if (a1 >= v26 >> 1) {
          uint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v26 > 1),  a1 + 1,  1,  v25,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
        }
        uint64_t v15 = v18;
        uint64_t v16 = 0x980000000000000LL;
      }

      else
      {
        uint64_t v24 = *(int *)(type metadata accessor for Compiler.ByteCodeGen(0LL) + 20);
        uint64_t v25 = *(char **)(v3 + v24);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v25 + 2) + 1LL,  1,  v25,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
        }
        a1 = *((void *)v25 + 2);
        unint64_t v28 = *((void *)v25 + 3);
        unint64_t v27 = a1 + 1;
        if (a1 >= v28 >> 1) {
          uint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v28 > 1),  a1 + 1,  1,  v25,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
        }
        uint64_t v15 = v18;
        uint64_t v16 = 0x900000000000000LL;
      }

      *((void *)v25 + 2) = v27;
      *(void *)&v25[8 * a1 + 32] = v15 | v16;
      *(void *)(v3 + v24) = v25;
      v13 += v20;
      uint64_t countAndFlagsBits = v14;
      if (v13 >= v78)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_36;
      }
    }

LABEL_55:
    __break(1u);
LABEL_56:
    uint64_t v30 = object & 0x2000000000000000LL;
    uint64_t v39 = HIBYTE(object) & 0xF;
    uint64_t v40 = a1 & 0xFFFFFFFFFFFFLL;
    goto LABEL_96;
  }

  uint64_t v74 = type metadata accessor for Compiler.ByteCodeGen(0LL);
  uint64_t v30 = object & 0x2000000000000000LL;
  unint64_t v80 = a1;
  unint64_t v81 = object;
  uint64_t v68 = a1 & 0xFFFFFFFFFFFFLL;
  uint64_t v69 = HIBYTE(object) & 0xF;
  if ((object & 0x2000000000000000LL) != 0) {
    unint64_t v31 = HIBYTE(object) & 0xF;
  }
  else {
    unint64_t v31 = a1 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v82 = 0LL;
  unint64_t v83 = v31;
  swift_bridgeObjectRetain();
  Swift::String_optional v32 = String.Iterator.next()();
  if (!v32.value._object)
  {
LABEL_57:
    swift_bridgeObjectRelease();
    if (!v31) {
      goto LABEL_95;
    }
    int v41 = (object & 0x1000000000000000LL) == 0 || (a1 & 0x800000000000000LL) != 0;
    uint64_t v42 = 11LL;
    if (v41) {
      uint64_t v42 = 7LL;
    }
    uint64_t v70 = 4 * v31;
    unint64_t v43 = 15LL;
    unint64_t v73 = v42 | (v31 << 16);
    unint64_t v72 = (unint64_t)specialized DefaultIndices<>.index(before:)(v73, a1, object) >> 14;
    uint64_t v78 = 4LL << v41;
    v79[0] = 15LL;
    uint64_t v66 = (object & 0xFFFFFFFFFFFFFFFLL) + 32;
    uint64_t v67 = object & 0xFFFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain();
    unint64_t v44 = 0LL;
    unint64_t v71 = object;
    while (1)
    {
      specialized DefaultIndices.formIndex(after:)(v79, a1, object);
      if ((v43 & 0xC) != v78 && (v43 & 1) != 0) {
        break;
      }
      if ((v43 & 0xC) == v78) {
        unint64_t v43 = _StringGuts._slowEnsureMatchingEncoding(_:)(v43, a1, object);
      }
      if (v43 >> 16 >= v31) {
        goto LABEL_104;
      }
      if ((v43 & 1) != 0) {
        goto LABEL_72;
      }
      _StringGuts.scalarAlignSlow(_:)(v43, a1, object);
      if ((object & 0x1000000000000000LL) != 0)
      {
LABEL_93:
        unsigned int v45 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
        goto LABEL_78;
      }

LABEL_73:
      if (v30)
      {
        unint64_t v80 = a1;
        unint64_t v81 = v67;
      }

      else if ((a1 & 0x1000000000000000LL) == 0)
      {
        _StringObject.sharedUTF8.getter();
      }

      unsigned int v45 = _decodeScalar(_:startingAt:)();
LABEL_78:
      unsigned int v46 = v45;
      uint64_t v47 = *(void *)(*(void *)v3 + 16LL);
      if (!v47)
      {
        __break(1u);
LABEL_103:
        __break(1u);
LABEL_104:
        __break(1u);
LABEL_105:
        __break(1u);
LABEL_106:
        __break(1u);
LABEL_107:
        __break(1u);
        JUMPOUT(0x182D39B00LL);
      }

      unint64_t v48 = a1;
      unint64_t v49 = v31;
      uint64_t v50 = v30;
      if ((*(_DWORD *)(*(void *)v3 + 4 * v47 + 28) & 1) != 0
        && (uint64_t v51 = v75,
            Unicode.Scalar.properties.getter(),
            char v52 = Unicode.Scalar.Properties.isCased.getter(),
            (*(void (**)(char *, uint64_t))(v76 + 8))(v51, v77),
            (v52 & 1) != 0))
      {
        uint64_t v53 = *(int *)(v74 + 20);
        BOOL v54 = v44 == v72;
        uint64_t v55 = 0x980000000000000LL;
        uint64_t v56 = 0x9C0000000000000LL;
      }

      else
      {
        uint64_t v53 = *(int *)(v74 + 20);
        BOOL v54 = v44 == v72;
        uint64_t v55 = 0x900000000000000LL;
        uint64_t v56 = 0x940000000000000LL;
      }

      if (v54) {
        uint64_t v57 = v56;
      }
      else {
        uint64_t v57 = v55;
      }
      uint64_t v58 = *(char **)(v3 + v53);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v58 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v58 + 2) + 1LL,  1,  v58,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
      }
      unint64_t v60 = *((void *)v58 + 2);
      unint64_t v59 = *((void *)v58 + 3);
      if (v60 >= v59 >> 1) {
        uint64_t v58 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v59 > 1),  v60 + 1,  1,  v58,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
      }
      *((void *)v58 + 2) = v60 + 1;
      *(void *)&v58[8 * v60 + 32] = v57 | v46;
      *(void *)(v3 + v53) = v58;
      unint64_t v43 = v79[0];
      unint64_t v44 = v79[0] >> 14;
      uint64_t v30 = v50;
      unint64_t v31 = v49;
      a1 = v48;
      object = v71;
      if (v79[0] >> 14 == v70) {
        return swift_bridgeObjectRelease();
      }
    }

    if (v43 >> 16 >= v31) {
      goto LABEL_103;
    }
LABEL_72:
    if ((object & 0x1000000000000000LL) != 0) {
      goto LABEL_93;
    }
    goto LABEL_73;
  }

  unint64_t v33 = v32.value._countAndFlagsBits;
  uint64_t v34 = v32.value._object;
  while (1)
  {
    if (v33 == 2573 && v34 == (void *)0xE200000000000000LL || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      goto LABEL_45;
    }

    if ((Character._isSingleScalar.getter() & 1) == 0) {
      break;
    }
    unint64_t v36 = specialized Collection.first.getter(v33, (unint64_t)v34);
    if ((v36 & 0x100000000LL) != 0) {
      goto LABEL_106;
    }
    if ((v36 & 0xFFFFFF80) != 0) {
      break;
    }
    unint64_t v37 = specialized Collection.first.getter(v33, (unint64_t)v34);
    if ((v37 & 0x100000000LL) != 0) {
      goto LABEL_107;
    }
    int v38 = v37;
    swift_bridgeObjectRelease();
    if ((v38 & 0xFFFFFF00) != 0)
    {
      __break(1u);
      goto LABEL_55;
    }

      uint64_t v51 = _StringGuts.validateScalarIndex(_:)(a4, a7, a8);
      if ((a8 & 0x1000000000000000LL) == 0)
      {
        char v52 = v51 >> 16;
        if ((a8 & 0x2000000000000000LL) != 0)
        {
          uint64_t v57 = a7;
          uint64_t v58 = a8 & 0xFFFFFFFFFFFFFFLL;
          uint64_t v53 = *((unsigned __int8 *)&v57 + v52);
        }

        else if ((a7 & 0x1000000000000000LL) != 0)
        {
          uint64_t v53 = *(unsigned __int8 *)((a8 & 0xFFFFFFFFFFFFFFFLL) + 0x20 + (v51 >> 16));
        }

        else
        {
          uint64_t v53 = *(unsigned __int8 *)(_StringObject.sharedUTF8.getter() + v52);
        }

        uint64_t v55 = (char)v53;
        uint64_t v56 = __clz(v53 ^ 0xFF) - 24;
        if (v55 >= 0) {
          LOBYTE(v56) = 1;
        }
        return ((v52 + v56) << 16) | 5;
      }

      return String.UnicodeScalarView._foreignIndex(after:)();
    }

    if (v19 >= v20) {
      return 0LL;
    }
    unint64_t v31 = String.index(after:)();
    if (v20 >= v31 >> 14)
    {
      char v23 = v31;
      uint64_t v34 = String.subscript.getter();
      unint64_t v36 = v35;
      if (v34 != 2573) {
        goto LABEL_49;
      }
    }

    else
    {
      Swift::String_optional v32 = String.subscript.getter();
      if ((v32 ^ v33) < 0x4000)
      {
        swift_bridgeObjectRelease();
        return 0LL;
      }

      char v23 = v33;
      uint64_t v42 = Substring.subscript.getter();
      unint64_t v36 = v43;
      swift_bridgeObjectRelease();
      if (v42 != 2573) {
        goto LABEL_49;
      }
    }

    if (v36 == 0xE200000000000000LL) {
      goto LABEL_50;
    }
LABEL_49:
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_50:
      swift_bridgeObjectRelease();
      if ((a1 & 1) != 0) {
        return v23;
      }
      return 0LL;
    }

    unint64_t v44 = Character.asciiValue.getter();
    swift_bridgeObjectRelease();
    if ((v44 & 0x100) == 0)
    {
      if (v44 <= 0x3Fu)
      {
        unsigned int v45 = v44;
        goto LABEL_59;
      }

      if ((char)v44 >= 64)
      {
        unsigned int v45 = v44 & 0x3F;
        a2 = a3;
LABEL_59:
        unsigned int v46 = (1LL << v45) & a2;
        if ((a1 & 1) != 0)
        {
          if (!v46) {
            return v23;
          }
        }

        else if (v46)
        {
          return v23;
        }

        return 0LL;
      }
    }

    if ((a1 & 1) != 0) {
      return v23;
    }
    return 0LL;
  }

  uint64_t v21 = (a3 >> v16) & 1;
  if (v16 <= 0x3Fu) {
    int v22 = (a2 >> v16) & 1;
  }
  else {
    int v22 = v21;
  }
  if (((v22 ^ a1) & 1) != 0) {
    char v23 = v17;
  }
  else {
    char v23 = 0LL;
  }
  if ((v18 & 1) != 0 && ((v22 ^ a1) & 1) != 0)
  {
    if ((a6 & 1) == 0)
    {
      if ((a1 & 1) != 0) {
        return v17;
      }
      else {
        return 0LL;
      }
    }

    uint64_t v24 = _StringGuts.validateInclusiveScalarIndex(_:)(v17, a7, a8);
    if (v24 < 0x4000)
    {
      __break(1u);
    }

    else
    {
      uint64_t v25 = v24;
      if ((a8 & 0x1000000000000000LL) == 0)
      {
        if ((a8 & 0x2000000000000000LL) != 0)
        {
          uint64_t v57 = a7;
          uint64_t v58 = a8 & 0xFFFFFFFFFFFFFFLL;
          int v38 = (char *)&v57 + (v24 >> 16);
          if ((*(v38 - 1) & 0xC0) == 0x80)
          {
            unint64_t v28 = 0LL;
            uint64_t v39 = v38 - 2;
            do
              uint64_t v40 = v39[v28--] & 0xC0;
            while (v40 == 128);
            goto LABEL_44;
          }
        }

        else
        {
          if ((a7 & 0x1000000000000000LL) != 0) {
            unint64_t v26 = (a8 & 0xFFFFFFFFFFFFFFFLL) + 32;
          }
          else {
            unint64_t v26 = _StringObject.sharedUTF8.getter();
          }
          unint64_t v27 = (v25 >> 16) + v26;
          if ((*(_BYTE *)(v27 - 1) & 0xC0) == 0x80)
          {
            unint64_t v28 = 0LL;
            Swift::String_optional v29 = v27 - 2;
            do
              uint64_t v30 = *(_BYTE *)(v29 + v28--) & 0xC0;
            while (v30 == 128);
LABEL_44:
            int v41 = 1 - v28;
            return (v25 - (v41 << 16)) & 0xFFFFFFFFFFFF0000LL | 5;
          }
        }

        int v41 = 1LL;
        return (v25 - (v41 << 16)) & 0xFFFFFFFFFFFF0000LL | 5;
      }
    }

    return String.UnicodeScalarView._foreignIndex(before:)();
  }

  return v23;
}

            if (v36 >> 14 < v60 >> 14) {
              goto LABEL_112;
            }
            uint64_t v87 = v60;
            uint64_t result = Substring.index(_:offsetBy:limitedBy:)();
            unint64_t v31 = v88 & 1;
            unint64_t v49 = v87;
            unint64_t v141 = result;
            int v38 = v123;
            uint64_t v50 = v124;
LABEL_22:
            BYTE4(v132) = 1;
            unint64_t v128 = v36;
            if ((v132 & ((v49 ^ v50) < 0x4000)) == 0)
            {
              if (v49 >> 14 < v50 >> 14) {
                goto LABEL_116;
              }
              ++v120;
              uint64_t result = Substring.subscript.getter();
              uint64_t v39 = result;
              int v41 = v92;
              unint64_t v145 = v94;
              uint64_t v146 = v93;
              unint64_t v44 = 0;
              unint64_t v128 = v36;
              BYTE4(v132) = v132;
              unsigned int v45 = v131;
              if (v131)
              {
                unint64_t v128 = v36;
                BYTE4(v132) = v132;
                goto LABEL_95;
              }

              goto LABEL_83;
            }

            goto LABEL_23;
          }

          uint64_t v67 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          uint64_t result = swift_bridgeObjectRelease();
          unint64_t v26 = v138;
          if ((v67 & 1) != 0) {
            goto LABEL_44;
          }
          BOOL v54 = v127;
          uint64_t v51 = v139;
          unint64_t v37 = v140;
          uint64_t v3 = v136;
        }

        else
        {
          BOOL v54 = v127;
          unint64_t v26 = v138;
        }

LABEL_45:
    Swift::String_optional v35 = String.Iterator.next()();
    unint64_t v33 = v35.value._countAndFlagsBits;
    uint64_t v34 = v35.value._object;
    if (!v35.value._object) {
      goto LABEL_57;
    }
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_95:
  uint64_t v40 = v68;
  uint64_t v39 = v69;
LABEL_96:
  if (!v30) {
    uint64_t v39 = v40;
  }
  unint64_t v80 = a1;
  unint64_t v81 = object;
  uint64_t v82 = 0LL;
  unint64_t v83 = v39;
  swift_bridgeObjectRetain();
  Swift::String_optional v62 = String.Iterator.next()();
  unint64_t v61 = v62.value._countAndFlagsBits;
  if (v62.value._object)
  {
    unint64_t v63 = v62.value._object;
    do
    {
      Compiler.ByteCodeGen.emitCharacter(_:)(v61, (unint64_t)v63);
      swift_bridgeObjectRelease();
      Swift::String_optional v64 = String.Iterator.next()();
      unint64_t v61 = v64.value._countAndFlagsBits;
      unint64_t v63 = v64.value._object;
    }

    while (v64.value._object);
  }

  return swift_bridgeObjectRelease();
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

BOOL specialized Sequence.allSatisfy(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = (uint64_t *)(a1 + 32);
  do
  {
    uint64_t v5 = v3;
    if (!v3) {
      break;
    }
    uint64_t v6 = *v4++;
    swift_retain();
    DSLTree.Node._canOnlyMatchAtStartImpl(_:)(a2, v6);
    char v8 = v7;
    swift_release();
    uint64_t v3 = v5 - 1;
  }

  while ((v8 & 1) != 0);
  return v5 == 0;
}

void DSLTree.Atom.CharacterClass.asRuntimeModel(_:)()
{
  __asm { BR              X10 }

uint64_t sub_182D39BE0@<X0>(uint64_t a1@<X1>, unsigned __int8 a2@<W8>)
{
  return specialized _CharacterClassModel.init(cc:options:isInverted:)(a2, a1, 0) & 0x10101FF;
}

void sub_182D39C78()
{
}

uint64_t specialized Compiler.ByteCodeGen.emitAlternationGen<A>(_:withBacktracking:_:)( uint64_t a1, uint64_t a2)
{
  uint64_t v37 = a1;
  uint64_t v35 = type metadata accessor for DSLTree.CustomCharacterClass.Member(0LL);
  uint64_t v42 = *(void *)(v35 - 8);
  MEMORY[0x1895F8858](v35);
  uint64_t v40 = (uint64_t)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DSLTree.CustomCharacterClass.Member?);
  MEMORY[0x1895F8858](v5);
  char v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = *(int *)(type metadata accessor for Compiler.ByteCodeGen(0LL) + 20);
  uint64_t v41 = a2;
  uint64_t v9 = (char **)(a2 + v8);
  Swift::String_optional v10 = *(char **)(a2 + v8 + 80);
  unint64_t v11 = *((void *)v10 + 2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_29;
  }
  while (1)
  {
    unint64_t v13 = *((void *)v10 + 2);
    unint64_t v12 = *((void *)v10 + 3);
    uint64_t v34 = v7;
    if (v13 >= v12 >> 1) {
      Swift::String_optional v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v12 > 1),  v13 + 1,  1,  v10);
    }
    *((void *)v10 + 2) = v13 + 1;
    uint64_t v14 = &v10[16 * v13];
    *((void *)v14 + 4) = 0LL;
    v14[40] = 1;
    v9[10] = v10;
    uint64_t v36 = specialized Collection.dropLast(_:)(1LL, v37);
    uint64_t v39 = v15;
    uint64_t v17 = v16;
    int64_t v19 = v18 >> 1;
    swift_bridgeObjectRetain();
    if (v17 == v19) {
      break;
    }
    unint64_t v38 = v11;
    while (v17 < v19)
    {
      uint64_t v25 = v40;
      outlined init with copy of MEProgram( v39 + *(void *)(v42 + 72) * v17,  v40,  type metadata accessor for DSLTree.CustomCharacterClass.Member);
      unint64_t v27 = *((void *)v10 + 2);
      unint64_t v26 = *((void *)v10 + 3);
      if (v27 >= v26 >> 1) {
        Swift::String_optional v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v26 > 1),  v27 + 1,  1,  v10);
      }
      *((void *)v10 + 2) = v27 + 1;
      char v7 = (char *)(16 * v27);
      unint64_t v28 = &v10[16 * v27];
      *((void *)v28 + 4) = 0LL;
      v28[40] = 1;
      v9[10] = v10;
      MEProgram.Builder.buildSave(_:)(v27);
      Compiler.ByteCodeGen.emitCCCMember(_:)(v25);
      if (v2)
      {
        swift_unknownObjectRelease();
        return outlined destroy of MEProgram(v25, type metadata accessor for DSLTree.CustomCharacterClass.Member);
      }

      outlined destroy of MEProgram(v25, type metadata accessor for DSLTree.CustomCharacterClass.Member);
      Swift::String_optional v29 = *v9;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        Swift::String_optional v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v29 + 2) + 1LL,  1,  v29,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
      }
      unint64_t v31 = *((void *)v29 + 2);
      unint64_t v30 = *((void *)v29 + 3);
      if (v31 >= v30 >> 1) {
        Swift::String_optional v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v30 > 1),  v31 + 1,  1,  v29,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
      }
      *((void *)v29 + 2) = v31 + 1;
      *(void *)&v29[8 * v31 + 32] = 0x1200000000000000LL;
      *uint64_t v9 = v29;
      unint64_t v11 = v38;
      MEProgram.Builder.buildBranch(to:)(v38);
      uint64_t v32 = *((void *)*v9 + 2);
      Swift::String_optional v10 = v9[10];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        Swift::String_optional v10 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v10);
      }
      if (v27 >= *((void *)v10 + 2)) {
        goto LABEL_28;
      }
      unint64_t v33 = &v7[(void)v10];
      *((void *)v33 + 4) = v32;
      ++v17;
      v33[40] = 0;
      v9[10] = v10;
      if (v19 == v17) {
        goto LABEL_5;
      }
    }

    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    Swift::String_optional v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v11 + 1,  1,  v10);
  }

LABEL_5:
  swift_unknownObjectRelease();
  uint64_t v20 = (uint64_t)v34;
  specialized BidirectionalCollection.last.getter(v37, (uint64_t)v34);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v42 + 48))(v20, 1LL, v35);
  if ((_DWORD)result == 1)
  {
LABEL_31:
    __break(1u);
    return result;
  }

  Compiler.ByteCodeGen.emitCCCMember(_:)(v20);
  uint64_t result = outlined destroy of MEProgram(v20, type metadata accessor for DSLTree.CustomCharacterClass.Member);
  if (!v2)
  {
    uint64_t v22 = *((void *)*v9 + 2);
    uint64_t v23 = (uint64_t)v9[10];
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v23);
      uint64_t v23 = result;
    }

    if (v11 < *(void *)(v23 + 16))
    {
      unint64_t v24 = v23 + 16 * v11;
      *(void *)(v24 + 32) = v22;
      *(_BYTE *)(v24 + 40) = 0;
      v9[10] = (char *)v23;
      return result;
    }

    __break(1u);
    goto LABEL_31;
  }

  return result;
}

  char v7 = (v3[3] >> 1) - v3[2];
  uint64_t result = type metadata accessor for DSLTree.CustomCharacterClass.Member(0LL);
  if (v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  uint64_t result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }

  uint64_t v8 = v3[2];
  uint64_t v9 = __OFADD__(v8, v2);
  Swift::String_optional v10 = v8 + v2;
  if (!v9)
  {
    v3[2] = v10;
    goto LABEL_14;
  }

  if ((*(void *)(v3 + 24) >> 1) - *(void *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  swift_arrayInitWithCopy();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v2)
  {
LABEL_14:
    *uint64_t v1 = v3;
    return result;
  }

  char v7 = *(void *)(v3 + 16);
  uint64_t v8 = __OFADD__(v7, v2);
  uint64_t v9 = v7 + v2;
  if (!v8)
  {
    *(void *)(v3 + 16) = v9;
    goto LABEL_14;
  }

  v19(v24, v8);
  uint64_t v25 = 0;
  return v25 & 1;
}

      swift_bridgeObjectRelease();
      uint64_t v6 = String.Iterator.next()();
      uint64_t countAndFlagsBits = v6.value._countAndFlagsBits;
      object = (uint64_t)v6.value._object;
      if (!v6.value._object) {
        goto LABEL_19;
      }
    }

    unint64_t v12 = ~v9;
    unint64_t v13 = *(void *)(v7 + 48);
    while (1)
    {
      uint64_t v14 = (void *)(v13 + 16 * v10);
      uint64_t v15 = *v14 == countAndFlagsBits && object == v14[1];
      if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        break;
      }
      Swift::String_optional v10 = (v10 + 1) & v12;
      if (((*(void *)(v11 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) == 0) {
        goto LABEL_5;
      }
    }

    swift_bridgeObjectRelease();
    object = 1LL;
  }

          if (v8 == ++v9) {
            return v10;
          }
        }
      }

      return (char *)MEMORY[0x18961AFE8];
    case 2uLL:
      Swift::String_optional v10 = *(char **)((a1 & 0xFFFFFFFFFFFFFFBLL) + 0x18);
      if (v10)
      {
        uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFFBLL) + 0x10);
        swift_bridgeObjectRetain();
        a4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  1LL,  1,  MEMORY[0x18961AFE8]);
        uint64_t v6 = *((void *)a4 + 2);
        unint64_t v11 = *((void *)a4 + 3);
        uint64_t v4 = v6 + 1;
        if (v6 >= v11 >> 1) {
LABEL_34:
        }
          a4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v11 > 1),  v4,  1,  a4);
        *((void *)a4 + 2) = v4;
        unint64_t v18 = &a4[16 * v6];
        *((void *)v18 + 4) = v5;
        *((void *)v18 + 5) = v10;
        return a4;
      }

      return (char *)v23;
    case 6uLL:
      int64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree._AST.QuantificationAmount, DSLTree.QuantificationKind, DSLTree.Node));
      uint64_t v20 = *(void *)(swift_projectBox() + *(int *)(v19 + 64));
      goto LABEL_25;
    case 0xCuLL:
      uint64_t v20 = *(void *)swift_projectBox();
LABEL_25:
      uint64_t v21 = DSLTree.Node.getNamedCaptures()(v20);
      specialized Array.append<A>(contentsOf:)(v21);
      return (char *)v23;
    default:
      return (char *)v23;
  }

uint64_t specialized Compiler.ByteCodeGen.emitAlternationGen<A>(_:withBacktracking:_:)( unint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = (void *)(a2 + *(int *)(type metadata accessor for Compiler.ByteCodeGen(0LL) + 20));
  uint64_t v6 = (char *)v5[10];
  unint64_t v7 = *((void *)v6 + 2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_22;
  }
  while (1)
  {
    unint64_t v9 = *((void *)v6 + 2);
    unint64_t v8 = *((void *)v6 + 3);
    uint64_t v10 = v9 + 1;
    if (v9 >= v8 >> 1) {
      uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v8 > 1),  v9 + 1,  1,  v6);
    }
    *((void *)v6 + 2) = v10;
    unint64_t v11 = &v6[16 * v9];
    *((void *)v11 + 4) = 0LL;
    v11[40] = 1;
    v5[10] = v6;
    unint64_t v12 = *(void *)(a1 + 16);
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    if (v12 < 2) {
      break;
    }
    uint64_t v24 = (v12 - 1) & 0x7FFFFFFFFFFFFFFFLL;
    if (!v24) {
      break;
    }
    uint64_t v13 = 0LL;
    unint64_t v25 = a1;
    while (1)
    {
      uint64_t v14 = v7;
      uint64_t v15 = *(void *)(a1 + 8 * v13 + 32);
      a1 = *((void *)v6 + 2);
      unint64_t v16 = *((void *)v6 + 3);
      swift_retain();
      if (a1 >= v16 >> 1) {
        uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v16 > 1),  a1 + 1,  1,  v6);
      }
      *((void *)v6 + 2) = a1 + 1;
      uint64_t v10 = 16 * a1;
      uint64_t v17 = &v6[16 * a1];
      *((void *)v17 + 4) = 0LL;
      v17[40] = 1;
      v5[10] = v6;
      MEProgram.Builder.buildSave(_:)(a1);
      Compiler.ByteCodeGen.emitNode(_:)(v15);
      swift_release();
      if (v3) {
        return swift_unknownObjectRelease_n();
      }
      unint64_t v7 = v14;
      MEProgram.Builder.buildBranch(to:)(v14);
      uint64_t v18 = *(void *)(*v5 + 16LL);
      uint64_t v6 = (char *)v5[10];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v6);
      }
      if (a1 >= *((void *)v6 + 2)) {
        break;
      }
      int64_t v19 = &v6[v10];
      *((void *)v19 + 4) = v18;
      ++v13;
      v19[40] = 0;
      v5[10] = v6;
      a1 = v25;
      if (v24 == v13) {
        goto LABEL_14;
      }
    }

    __break(1u);
LABEL_22:
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v7 + 1,  1,  v6);
  }

LABEL_14:
  swift_unknownObjectRelease_n();
  uint64_t v20 = *(void *)(a1 + 16);
  if (!v20)
  {
    __break(1u);
LABEL_24:
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v6);
    uint64_t v6 = (char *)result;
    goto LABEL_17;
  }

  uint64_t v21 = *(void *)(a1 + 32 + 8 * v20 - 8);
  swift_retain();
  Compiler.ByteCodeGen.emitNode(_:)(v21);
  uint64_t result = swift_release();
  if (v3) {
    return result;
  }
  uint64_t v10 = *(void *)(*v5 + 16LL);
  uint64_t v6 = (char *)v5[10];
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0) {
    goto LABEL_24;
  }
LABEL_17:
  if (v7 >= *((void *)v6 + 2))
  {
    __break(1u);
  }

  else
  {
    uint64_t v23 = &v6[16 * v7];
    *((void *)v23 + 4) = v10;
    v23[40] = 0;
    v5[10] = v6;
  }

  return result;
}

      unint64_t v7 = v5;
      return v7 << 16;
    }

    unint64_t v9 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000LL) == 0) {
      unint64_t v9 = a2 & 0xFFFFFFFFFFFFLL;
    }
    if (v5 != v9) {
      return _StringGuts.foreignScalarAlign(_:)();
    }
  }

  return result;
}

  uint64_t v24 = v20 + v15;
  if (!v17) {
    ++v24;
  }
  return (*(uint64_t (**)(unint64_t, uint64_t))(v14 + 8))((v24 + v16) & ~v15, v13);
}

  if (v17) {
    uint64_t v24 = v15;
  }
  else {
    uint64_t v24 = v15 + 1;
  }
  return (*(uint64_t (**)(unint64_t, uint64_t))(v14 + 8))((v24 + v20 + v16) & ~v15, v13);
}

  unint64_t v12 = swift_getAssociatedTypeWitness();
  if (v4) {
    uint64_t v13 = a1;
  }
  else {
    uint64_t v13 = a1 + 1;
  }
  return (*(uint64_t (**)(unint64_t, uint64_t))(*(void *)(v12 - 8) + 8LL))( (v13 + *(unsigned __int8 *)(*(void *)(v12 - 8) + 80LL) + v8) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v12 - 8) + 80LL),  v12);
}

uint64_t specialized Collection.dropLast(_:)(uint64_t result, uint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
  }

  else
  {
    type metadata accessor for DSLTree.CustomCharacterClass.Member(0LL);
    return a2;
  }

  return result;
}

uint64_t MEProgram.Builder.buildSave(_:)(uint64_t a1)
{
  uint64_t v3 = *(char **)v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v3 + 2) + 1LL,  1,  v3,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
  }
  unint64_t v5 = *((void *)v3 + 2);
  unint64_t v4 = *((void *)v3 + 3);
  if (v5 >= v4 >> 1) {
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v4 > 1),  v5 + 1,  1,  v3,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
  }
  *((void *)v3 + 2) = v5 + 1;
  *(void *)&v3[8 * v5 + 32] = 0x1000000000000000LL;
  *(void *)uint64_t v1 = v3;
  uint64_t v6 = *((void *)v3 + 2);
  uint64_t v7 = *(void *)(v1 + 88);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v7 + 16) + 1LL,  1,  (char *)v7);
    uint64_t v7 = result;
  }

  unint64_t v10 = *(void *)(v7 + 16);
  unint64_t v9 = *(void *)(v7 + 24);
  if (v10 >= v9 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v9 > 1),  v10 + 1,  1,  (char *)v7);
    uint64_t v7 = result;
  }

  *(void *)(v7 + 16) = v10 + 1;
  unint64_t v11 = v7 + 32 * v10;
  *(void *)(v11 + 32) = v6 - 1;
  *(void *)(v11 + 40) = a1;
  *(void *)(v11 + 48) = 0LL;
  *(_BYTE *)(v11 + 56) = 1;
  *(void *)(v1 + 88) = v7;
  return result;
}

uint64_t MEProgram.Builder.buildBranch(to:)(uint64_t a1)
{
  uint64_t v3 = *(char **)v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v3 + 2) + 1LL,  1,  v3,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
  }
  unint64_t v5 = *((void *)v3 + 2);
  unint64_t v4 = *((void *)v3 + 3);
  if (v5 >= v4 >> 1) {
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v4 > 1),  v5 + 1,  1,  v3,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
  }
  *((void *)v3 + 2) = v5 + 1;
  *(void *)&v3[8 * v5 + 32] = 0x400000000000000LL;
  *(void *)uint64_t v1 = v3;
  uint64_t v6 = *((void *)v3 + 2);
  uint64_t v7 = *(void *)(v1 + 88);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v7 + 16) + 1LL,  1,  (char *)v7);
    uint64_t v7 = result;
  }

  unint64_t v10 = *(void *)(v7 + 16);
  unint64_t v9 = *(void *)(v7 + 24);
  if (v10 >= v9 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v9 > 1),  v10 + 1,  1,  (char *)v7);
    uint64_t v7 = result;
  }

  *(void *)(v7 + 16) = v10 + 1;
  unint64_t v11 = v7 + 32 * v10;
  *(void *)(v11 + 32) = v6 - 1;
  *(void *)(v11 + 40) = a1;
  *(void *)(v11 + 48) = 0LL;
  *(_BYTE *)(v11 + 56) = 1;
  *(void *)(v1 + 88) = v7;
  return result;
}

uint64_t MEProgram.Builder.buildClearThrough(_:)(uint64_t a1)
{
  uint64_t v3 = *(char **)v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v3 + 2) + 1LL,  1,  v3,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
  }
  unint64_t v5 = *((void *)v3 + 2);
  unint64_t v4 = *((void *)v3 + 3);
  if (v5 >= v4 >> 1) {
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v4 > 1),  v5 + 1,  1,  v3,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
  }
  *((void *)v3 + 2) = v5 + 1;
  *(void *)&v3[8 * v5 + 32] = 0x1300000000000000LL;
  *(void *)uint64_t v1 = v3;
  uint64_t v6 = *((void *)v3 + 2);
  uint64_t v7 = *(void *)(v1 + 88);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v7 + 16) + 1LL,  1,  (char *)v7);
    uint64_t v7 = result;
  }

  unint64_t v10 = *(void *)(v7 + 16);
  unint64_t v9 = *(void *)(v7 + 24);
  if (v10 >= v9 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v9 > 1),  v10 + 1,  1,  (char *)v7);
    uint64_t v7 = result;
  }

  *(void *)(v7 + 16) = v10 + 1;
  unint64_t v11 = v7 + 32 * v10;
  *(void *)(v11 + 32) = v6 - 1;
  *(void *)(v11 + 40) = a1;
  *(void *)(v11 + 48) = 0LL;
  *(_BYTE *)(v11 + 56) = 1;
  *(void *)(v1 + 88) = v7;
  return result;
}

uint64_t MEProgram.Builder.buildSaveAddress(_:)(uint64_t a1)
{
  uint64_t v3 = *(char **)v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v3 + 2) + 1LL,  1,  v3,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
  }
  unint64_t v5 = *((void *)v3 + 2);
  unint64_t v4 = *((void *)v3 + 3);
  if (v5 >= v4 >> 1) {
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v4 > 1),  v5 + 1,  1,  v3,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
  }
  *((void *)v3 + 2) = v5 + 1;
  *(void *)&v3[8 * v5 + 32] = 0x1100000000000000LL;
  *(void *)uint64_t v1 = v3;
  uint64_t v6 = *((void *)v3 + 2);
  uint64_t v7 = *(void *)(v1 + 88);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v7 + 16) + 1LL,  1,  (char *)v7);
    uint64_t v7 = result;
  }

  unint64_t v10 = *(void *)(v7 + 16);
  unint64_t v9 = *(void *)(v7 + 24);
  if (v10 >= v9 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v9 > 1),  v10 + 1,  1,  (char *)v7);
    uint64_t v7 = result;
  }

  *(void *)(v7 + 16) = v10 + 1;
  unint64_t v11 = v7 + 32 * v10;
  *(void *)(v11 + 32) = v6 - 1;
  *(void *)(v11 + 40) = a1;
  *(void *)(v11 + 48) = 0LL;
  *(_BYTE *)(v11 + 56) = 1;
  *(void *)(v1 + 88) = v7;
  return result;
}

uint64_t Compiler.ByteCodeGen.emitNoncapturingGroup(_:_:)(unint64_t a1, uint64_t a2)
{
  uint64_t v68 = a2;
  uint64_t v5 = type metadata accessor for AST.MatchingOptionSequence();
  unint64_t v65 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v66 = (uint64_t)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for AST.Group.Kind();
  unint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  unint64_t v10 = (char *)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v11 = *v2;
  uint64_t v12 = *(void *)(*v2 + 16);
  if (v12)
  {
    uint64_t v64 = v5;
    uint64_t v5 = *(unsigned int *)(v11 + 4 * v12 + 28);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v69 = v2;
    uint64_t v67 = v3;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_3;
    }
    goto LABEL_122;
  }

  while (1)
  {
    __break(1u);
LABEL_122:
    unint64_t v11 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v12 + 1,  1,  (char *)v11);
LABEL_3:
    unint64_t v15 = *(void *)(v11 + 16);
    unint64_t v14 = *(void *)(v11 + 24);
    if (v15 >= v14 >> 1) {
      unint64_t v11 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v14 > 1),  v15 + 1,  1,  (char *)v11);
    }
    *(void *)(v11 + 16) = v15 + 1;
    *(_DWORD *)(v11 + 4 * v15 + 32) = v5;
    unint64_t v16 = (char *)v69;
    *uint64_t v69 = v11;
    uint64_t v17 = (char *)a1;
    __int16 v18 = AST.Group.Kind.lookaroundKind.getter();
    LOWORD(v12) = v18;
    if ((v18 & 1) == 0)
    {
      type metadata accessor for Unsupported();
      lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind( &lazy protocol witness table cache variable for type Unsupported and conformance Unsupported,  (uint64_t (*)(uint64_t))MEMORY[0x18961C120],  MEMORY[0x18961C130]);
      swift_allocError();
      MEMORY[0x186E168A8]( 0xD000000000000014LL,  0x8000000182DA3670LL,  "/Library/Caches/com.apple.xbs/Sources/swiftlang_overlay_Platform_Device/swift-experimental-string-processing/Sou rces/_StringProcessing/ByteCodeGen.swift",  152LL,  2LL,  374LL);
      swift_willThrow();
      goto LABEL_71;
    }

LABEL_28:
    uint64_t v5 = (uint64_t)&v16[*(int *)(type metadata accessor for Compiler.ByteCodeGen(0LL) + 20)];
    uint64_t v17 = *(char **)(v5 + 80);
    a1 = *((void *)v17 + 2);
    LOBYTE(result) = swift_isUniquelyReferenced_nonNull_native();
    if ((v12 & 0x100) != 0) {
      goto LABEL_52;
    }
    if ((result & 1) == 0) {
      goto LABEL_132;
    }
LABEL_30:
    unint64_t v27 = *((void *)v17 + 2);
    unint64_t v26 = *((void *)v17 + 3);
    if (v27 >= v26 >> 1) {
      uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v26 > 1),  v27 + 1,  1,  v17);
    }
    *((void *)v17 + 2) = v27 + 1;
    unint64_t v28 = &v17[16 * v27];
    *((void *)v28 + 4) = 0LL;
    v28[40] = 1;
    *(void *)(v5 + 80) = v17;
    unint64_t v11 = *((void *)v17 + 2);
    unint64_t v29 = *((void *)v17 + 3);
    if (v11 >= v29 >> 1) {
      uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v29 > 1),  v11 + 1,  1,  v17);
    }
    *((void *)v17 + 2) = v11 + 1;
    uint64_t v7 = 16 * v11;
    unint64_t v30 = &v17[16 * v11];
    *((void *)v30 + 4) = 0LL;
    v30[40] = 1;
    *(void *)(v5 + 80) = v17;
    MEProgram.Builder.buildSave(_:)(v11);
    MEProgram.Builder.buildSave(_:)(a1);
    uint64_t v31 = v67;
    Compiler.ByteCodeGen.emitNode(_:)(v68);
    if (v31)
    {
      while (1)
      {
LABEL_71:
        uint64_t v17 = *(char **)v16;
        if (*(void *)(*(void *)v16 + 16LL))
        {
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) != 0)
          {
            uint64_t v25 = *((void *)v17 + 2);
            if (v25) {
              goto LABEL_74;
            }
            goto LABEL_125;
          }
        }

        else
        {
          __break(1u);
        }

        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v17);
        uint64_t v17 = (char *)result;
        uint64_t v25 = *(void *)(result + 16);
        if (v25) {
          goto LABEL_74;
        }
LABEL_125:
        __break(1u);
LABEL_126:
        __break(1u);
LABEL_127:
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v17);
        uint64_t v17 = (char *)result;
        uint64_t v25 = *(void *)(result + 16);
        if (v25) {
          goto LABEL_74;
        }
LABEL_51:
        __break(1u);
LABEL_52:
        if ((result & 1) == 0) {
          uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  a1 + 1,  1,  v17);
        }
        unint64_t v38 = *((void *)v17 + 2);
        unint64_t v37 = *((void *)v17 + 3);
        if (v38 >= v37 >> 1) {
          uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v37 > 1),  v38 + 1,  1,  v17);
        }
        *((void *)v17 + 2) = v38 + 1;
        uint64_t v39 = &v17[16 * v38];
        *((void *)v39 + 4) = 0LL;
        v39[40] = 1;
        *(void *)(v5 + 80) = v17;
        unint64_t v11 = *((void *)v17 + 2);
        unint64_t v40 = *((void *)v17 + 3);
        if (v11 >= v40 >> 1) {
          uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v40 > 1),  v11 + 1,  1,  v17);
        }
        *((void *)v17 + 2) = v11 + 1;
        uint64_t v7 = 16 * v11;
        uint64_t v41 = &v17[16 * v11];
        *((void *)v41 + 4) = 0LL;
        v41[40] = 1;
        *(void *)(v5 + 80) = v17;
        MEProgram.Builder.buildSave(_:)(v11);
        MEProgram.Builder.buildSave(_:)(a1);
        uint64_t v42 = v67;
        Compiler.ByteCodeGen.emitNode(_:)(v68);
        if (!v42)
        {
          MEProgram.Builder.buildClearThrough(_:)(a1);
          uint64_t v17 = *(char **)v5;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v17 + 2) + 1LL,  1,  v17,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
          }
          unint64_t v8 = *((void *)v17 + 2);
          unint64_t v43 = *((void *)v17 + 3);
          if (v8 >= v43 >> 1) {
            uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v43 > 1),  v8 + 1,  1,  v17,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
          }
          *((void *)v17 + 2) = v8 + 1;
          *(void *)&v17[8 * v8 + 32] = 0x1C00000000000001LL;
          *(void *)uint64_t v5 = v17;
          unint64_t v44 = *((void *)v17 + 2);
          unint64_t v16 = *(char **)(v5 + 80);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v16);
          }
          unint64_t v45 = *((void *)v16 + 2);
          if (a1 >= v45)
          {
            __break(1u);
          }

          else
          {
            unint64_t v8 = (unint64_t)(v16 + 32);
            uint64_t v46 = (uint64_t)&v16[16 * a1 + 32];
            *(void *)uint64_t v46 = v44;
            *(_BYTE *)(v46 + 8) = 0;
            *(void *)(v5 + 80) = v16;
            unint64_t v44 = *((void *)v17 + 2);
            unint64_t v45 = *((void *)v17 + 3);
            a1 = v44 + 1;
            if (v44 < v45 >> 1) {
              goto LABEL_67;
            }
          }

          uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v45 > 1),  a1,  1,  v17,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
LABEL_67:
          *((void *)v17 + 2) = a1;
          *(void *)&v17[8 * v44 + 32] = 0x1200000000000000LL;
          *(void *)uint64_t v5 = v17;
          unint64_t v10 = (char *)*((void *)v17 + 2);
          unint64_t v47 = *((void *)v17 + 3);
          a1 = (unint64_t)(v10 + 1);
          if ((unint64_t)v10 >= v47 >> 1) {
            uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v47 > 1),  (int64_t)(v10 + 1),  1,  v17,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
          }
          *((void *)v17 + 2) = a1;
          *(void *)&v17[8 * (void)v10 + 32] = 0x1C00000000000000LL;
          *(void *)uint64_t v5 = v17;
          if (v11 < *((void *)v16 + 2))
          {
LABEL_70:
            unint64_t v48 = v8 + v7;
            *(void *)unint64_t v48 = *((void *)v17 + 2);
            *(_BYTE *)(v48 + 8) = 0;
            *(void *)(v5 + 80) = v16;
            unint64_t v16 = (char *)v69;
            goto LABEL_99;
          }

          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v17);
          uint64_t v17 = (char *)result;
          uint64_t v25 = *(void *)(result + 16);
          if (v25) {
            goto LABEL_74;
          }
LABEL_102:
          __break(1u);
          goto LABEL_103;
        }
      }
    }

    MEProgram.Builder.buildClearThrough(_:)(a1);
    uint64_t v17 = *(char **)v5;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v17 + 2) + 1LL,  1,  v17,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
    }
    unint64_t v33 = *((void *)v17 + 2);
    unint64_t v32 = *((void *)v17 + 3);
    if (v33 >= v32 >> 1) {
      uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v32 > 1),  v33 + 1,  1,  v17,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
    }
    *((void *)v17 + 2) = v33 + 1;
    *(void *)&v17[8 * v33 + 32] = 0x1200000000000000LL;
    *(void *)uint64_t v5 = v17;
    unint64_t v8 = *((void *)v17 + 2);
    unint64_t v34 = *((void *)v17 + 3);
    if (v8 >= v34 >> 1) {
      uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v34 > 1),  v8 + 1,  1,  v17,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
    }
    *((void *)v17 + 2) = v8 + 1;
    *(void *)&v17[8 * v8 + 32] = 0x1C00000000000000LL;
    *(void *)uint64_t v5 = v17;
    unint64_t v10 = (char *)*((void *)v17 + 2);
    unint64_t v16 = *(char **)(v5 + 80);
    LODWORD(result) = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v16);
      unint64_t v16 = (char *)result;
    }

    unint64_t v35 = *((void *)v16 + 2);
    if (a1 >= v35)
    {
      __break(1u);
LABEL_143:
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v35 > 1),  a1,  1,  v17,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
      uint64_t v17 = (char *)result;
      goto LABEL_45;
    }

    unint64_t v8 = (unint64_t)(v16 + 32);
    uint64_t v36 = (uint64_t)&v16[16 * a1 + 32];
    *(void *)uint64_t v36 = v10;
    *(_BYTE *)(v36 + 8) = 0;
    *(void *)(v5 + 80) = v16;
    unint64_t v10 = (char *)*((void *)v17 + 2);
    unint64_t v35 = *((void *)v17 + 3);
    a1 = (unint64_t)(v10 + 1);
LABEL_45:
    *((void *)v17 + 2) = a1;
    *(void *)&v17[8 * (void)v10 + 32] = 0x1C00000000000000LL;
    *(void *)uint64_t v5 = v17;
    if (v11 < *((void *)v16 + 2)) {
      goto LABEL_70;
    }
    __break(1u);
LABEL_47:
    if ((_DWORD)result == *MEMORY[0x18961C8C0]) {
      goto LABEL_48;
    }
    if ((_DWORD)result == *MEMORY[0x18961C890])
    {
      uint64_t v5 = (uint64_t)&v16[*(int *)(type metadata accessor for Compiler.ByteCodeGen(0LL) + 20)];
      unint64_t v49 = *(char **)(v5 + 80);
      unint64_t v11 = *((void *)v49 + 2);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v11 + 1,  1,  v49);
      }
      unint64_t v51 = *((void *)v49 + 2);
      unint64_t v50 = *((void *)v49 + 3);
      if (v51 >= v50 >> 1) {
        unint64_t v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v50 > 1),  v51 + 1,  1,  v49);
      }
      *((void *)v49 + 2) = v51 + 1;
      char v52 = &v49[16 * v51];
      *((void *)v52 + 4) = 0LL;
      unint64_t v8 = 1LL;
      v52[40] = 1;
      *(void *)(v5 + 80) = v49;
      a1 = *((void *)v49 + 2);
      unint64_t v53 = *((void *)v49 + 3);
      if (a1 >= v53 >> 1) {
        unint64_t v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v53 > 1),  a1 + 1,  1,  v49);
      }
      *((void *)v49 + 2) = a1 + 1;
      uint64_t v7 = 16 * a1;
      BOOL v54 = &v49[16 * a1];
      *((void *)v54 + 4) = 0LL;
      v54[40] = 1;
      *(void *)(v5 + 80) = v49;
      MEProgram.Builder.buildSaveAddress(_:)(a1);
      MEProgram.Builder.buildSave(_:)(v11);
      uint64_t v55 = v67;
      Compiler.ByteCodeGen.emitNode(_:)(v68);
      uint64_t v12 = v55;
      if (!v55)
      {
        MEProgram.Builder.buildClearThrough(_:)(v11);
        uint64_t v17 = *(char **)v5;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v17 + 2) + 1LL,  1,  v17,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
        }
        unint64_t v8 = *((void *)v17 + 2);
        unint64_t v56 = *((void *)v17 + 3);
        if (v8 >= v56 >> 1) {
          uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v56 > 1),  v8 + 1,  1,  v17,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
        }
        *((void *)v17 + 2) = v8 + 1;
        *(void *)&v17[8 * v8 + 32] = 0x1C00000000000001LL;
        *(void *)uint64_t v5 = v17;
        unint64_t v57 = *((void *)v17 + 2);
        unint64_t v16 = *(char **)(v5 + 80);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v16);
        }
        unint64_t v58 = *((void *)v16 + 2);
        if (v11 >= v58)
        {
          __break(1u);
        }

        else
        {
          unint64_t v8 = (unint64_t)(v16 + 32);
          uint64_t v59 = (uint64_t)&v16[16 * v11 + 32];
          *(void *)uint64_t v59 = v57;
          *(_BYTE *)(v59 + 8) = 0;
          *(void *)(v5 + 80) = v16;
          unint64_t v57 = *((void *)v17 + 2);
          unint64_t v58 = *((void *)v17 + 3);
          unint64_t v11 = v57 + 1;
          if (v57 < v58 >> 1)
          {
LABEL_91:
            *((void *)v17 + 2) = v11;
            *(void *)&v17[8 * v57 + 32] = 0x1200000000000000LL;
            *(void *)uint64_t v5 = v17;
            unint64_t v10 = (char *)*((void *)v17 + 2);
            unint64_t v60 = *((void *)v17 + 3);
            unint64_t v11 = (unint64_t)(v10 + 1);
            if ((unint64_t)v10 >= v60 >> 1) {
              uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v60 > 1),  (int64_t)(v10 + 1),  1,  v17,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
            }
            *((void *)v17 + 2) = v11;
            *(void *)&v17[8 * (void)v10 + 32] = 0x1C00000000000000LL;
            *(void *)uint64_t v5 = v17;
            if (a1 < *((void *)v16 + 2))
            {
              unint64_t v61 = v8 + v7;
              *(void *)unint64_t v61 = *((void *)v17 + 2);
              *(_BYTE *)(v61 + 8) = 0;
              *(void *)(v5 + 80) = v16;
              unint64_t v16 = (char *)v69;
              goto LABEL_117;
            }

            __break(1u);
            goto LABEL_159;
          }
        }

        uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v58 > 1),  v11,  1,  v17,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
        goto LABEL_91;
      }

      uint64_t v17 = *(char **)v16;
      if (*(void *)(*(void *)v16 + 16LL))
      {
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) != 0)
        {
          uint64_t v25 = *((void *)v17 + 2);
          if (v25) {
            goto LABEL_74;
          }
          goto LABEL_98;
        }
      }

      else
      {
        __break(1u);
      }

      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v17);
      uint64_t v17 = (char *)result;
      uint64_t v25 = *(void *)(result + 16);
      if (v25) {
        goto LABEL_74;
      }
LABEL_98:
      __break(1u);
LABEL_99:
      uint64_t v17 = *(char **)v16;
      if (!*(void *)(*(void *)v16 + 16LL)) {
        goto LABEL_147;
      }
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0) {
        goto LABEL_148;
      }
      uint64_t v25 = *((void *)v17 + 2);
      if (v25) {
        goto LABEL_74;
      }
      goto LABEL_102;
    }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

LABEL_160:
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v17);
        uint64_t v17 = (char *)result;
        uint64_t v25 = *(void *)(result + 16);
        if (v25) {
          goto LABEL_74;
        }
        goto LABEL_111;
      }

        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(rawValue > 1),  v108,  1,  v103,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
        uint64_t v103 = (char *)result;
        goto LABEL_104;
      }
    }

    __break(1u);
    goto LABEL_160;
  }

  return result;
}

LABEL_159:
      __break(1u);
      goto LABEL_160;
    }

LABEL_116:
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
LABEL_117:
    uint64_t v17 = *(char **)v16;
    if (!*(void *)(*(void *)v16 + 16LL)) {
      goto LABEL_139;
    }
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0)
    {
      uint64_t v25 = *((void *)v17 + 2);
      if (v25) {
        goto LABEL_74;
      }
      goto LABEL_120;
    }

LABEL_140:
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v17);
    uint64_t v17 = (char *)result;
    uint64_t v25 = *(void *)(result + 16);
    if (v25) {
      goto LABEL_74;
    }
LABEL_120:
    __break(1u);
  }

  (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  LODWORD(result) = (*(uint64_t (**)(char *, uint64_t))(v8 + 88))(v10, v7);
  if ((_DWORD)result != *MEMORY[0x18961C868] && (_DWORD)result != *MEMORY[0x18961C878])
  {
    if ((_DWORD)result != *MEMORY[0x18961C8B0]) {
      goto LABEL_47;
    }
    (*(void (**)(char *, uint64_t))(v8 + 96))(v10, v7);
    a1 = v65;
    uint64_t v5 = v64;
    (*(void (**)(uint64_t, char *, uint64_t))(v65 + 32))(v66, v10, v64);
    uint64_t v21 = type metadata accessor for Compiler.ByteCodeGen(0LL);
    if ((v16[*(int *)(v21 + 24)] & 1) == 0)
    {
      unint64_t v8 = (unint64_t)&v16[*(int *)(v21 + 20)];
      uint64_t v12 = *(int *)(type metadata accessor for MEProgram.Builder(0LL) + 84);
      uint64_t v7 = *(void *)(v8 + v12);
      uint64_t v17 = *(char **)(v7 + 16);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
        if (!v17) {
          goto LABEL_137;
        }
      }

      else
      {
        uint64_t v7 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v7);
        if (!v17)
        {
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
      }

      uint64_t v17 = (char *)(v7 + 4LL * (void)(v17 - 1) + 32);
      MatchingOptions.Representation.apply(_:)(v66);
      *(void *)(v8 + v12) = v7;
    }

    unint64_t v22 = *(void *)(v11 + 16);
    char v23 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)unint64_t v16 = v11;
    if ((v23 & 1) != 0)
    {
      if (!v22) {
        goto LABEL_130;
      }
    }

    else
    {
      unint64_t v11 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v11);
      *(void *)unint64_t v16 = v11;
      if (!v22)
      {
LABEL_130:
        __break(1u);
LABEL_131:
        __break(1u);
LABEL_132:
        uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  a1 + 1,  1,  v17);
        goto LABEL_30;
      }
    }

    if (v22 > *(void *)(v11 + 16)) {
      goto LABEL_131;
    }
    unint64_t v8 = v66;
    MatchingOptions.Representation.apply(_:)(v66);
    (*(void (**)(unint64_t, uint64_t))(a1 + 8))(v8, v5);
    uint64_t v24 = v67;
    Compiler.ByteCodeGen.emitNode(_:)(v68);
    uint64_t v12 = v24;
    if (!v24) {
      goto LABEL_117;
    }
    uint64_t v17 = *(char **)v16;
    if (*(void *)(*(void *)v16 + 16LL))
    {
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) != 0)
      {
        uint64_t v25 = *((void *)v17 + 2);
        if (v25) {
          goto LABEL_74;
        }
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
    }

    else
    {
      __break(1u);
    }

    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v17);
    uint64_t v17 = (char *)result;
    uint64_t v25 = *(void *)(result + 16);
    if (v25) {
      goto LABEL_74;
    }
    goto LABEL_27;
  }

  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
LABEL_48:
  type metadata accessor for Unreachable();
  lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind( &lazy protocol witness table cache variable for type Unreachable and conformance Unreachable,  (uint64_t (*)(uint64_t))MEMORY[0x18961C108],  MEMORY[0x18961C118]);
  swift_allocError();
  MEMORY[0x186E16890]( 0xD000000000000023LL,  0x8000000182DA3640LL,  "/Library/Caches/com.apple.xbs/Sources/swiftlang_overlay_Platform_Device/swift-experimental-string-processing/Sources /_StringProcessing/ByteCodeGen.swift",  152LL,  2LL,  452LL);
  swift_willThrow();
  uint64_t v17 = *(char **)v16;
  if (!*(void *)(*(void *)v16 + 16LL)) {
    goto LABEL_126;
  }
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0) {
    goto LABEL_127;
  }
  uint64_t v25 = *((void *)v17 + 2);
  if (!v25) {
    goto LABEL_51;
  }
LABEL_74:
  *((void *)v17 + 2) = v25 - 1;
  *(void *)unint64_t v16 = v17;
  return result;
}

Swift::Void __swiftcall MatchingOptions.beginScope()()
{
  uint64_t v2 = *v0;
  uint64_t v3 = *((void *)*v0 + 2);
  if (v3)
  {
    int v1 = *(_DWORD *)&v2[4 * v3 + 28];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0) {
      goto LABEL_3;
    }
  }

  else
  {
    __break(1u);
  }

  uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0LL, v3 + 1, 1, v2);
LABEL_3:
  unint64_t v5 = *((void *)v2 + 2);
  unint64_t v4 = *((void *)v2 + 3);
  if (v5 >= v4 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v4 > 1),  v5 + 1,  1,  v2);
  }
  *((void *)v2 + 2) = v5 + 1;
  *(_DWORD *)&v2[4 * v5 + 32] = v1;
  unint64_t *v0 = v2;
}

uint64_t Compiler.ByteCodeGen.emitQuantification(_:_:_:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v104 = a3;
  uint64_t v5 = type metadata accessor for DSLTree._AST.QuantificationKind(0LL);
  MEMORY[0x1895F8858](v5);
  uint64_t v7 = &v87[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v8 = type metadata accessor for DSLTree.QuantificationKind(0LL);
  MEMORY[0x1895F8858](v8);
  unint64_t v10 = &v87[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v11 = type metadata accessor for AST.Quantification.Kind();
  uint64_t v111 = *(void *)(v11 - 8);
  uint64_t v12 = MEMORY[0x1895F8858](v11);
  uint64_t v103 = &v87[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v14 = MEMORY[0x1895F8858](v12);
  unint64_t v16 = &v87[-v15];
  MEMORY[0x1895F8858](v14);
  __int16 v18 = &v87[-v17];
  outlined init with copy of MEProgram(a2, (uint64_t)v10, type metadata accessor for DSLTree.QuantificationKind);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      outlined init with take of DSLTree.QuantificationKind( (uint64_t)v10,  (uint64_t)v7,  type metadata accessor for DSLTree._AST.QuantificationKind);
      uint64_t v20 = v106;
      AST.Quantification.Kind.applying(_:)(*v106, (uint64_t)v18);
      outlined destroy of MEProgram((uint64_t)v7, type metadata accessor for DSLTree._AST.QuantificationKind);
    }

    else
    {
      uint64_t v20 = v106;
      MatchingOptions.defaultQuantificationKind.getter(*v106, (uint64_t)v18);
    }
  }

  else
  {
    outlined init with take of DSLTree.QuantificationKind( (uint64_t)v10,  (uint64_t)v7,  type metadata accessor for DSLTree._AST.QuantificationKind);
    (*(void (**)(char *, _BYTE *, uint64_t))(v111 + 32))(v18, v7, v11);
    uint64_t v20 = v106;
  }

  uint64_t v21 = a1;
  uint64_t v22 = AST.Quantification.Amount.bounds.getter();
  if ((v25 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v111 + 8))(v18, v11);
    type metadata accessor for Unreachable();
    lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind( &lazy protocol witness table cache variable for type Unreachable and conformance Unreachable,  (uint64_t (*)(uint64_t))MEMORY[0x18961C108],  MEMORY[0x18961C118]);
    swift_allocError();
    MEMORY[0x186E16890]( 0xD000000000000017LL,  0x8000000182DA3690LL,  "/Library/Caches/com.apple.xbs/Sources/swiftlang_overlay_Platform_Device/swift-experimental-string-processing/Sourc es/_StringProcessing/ByteCodeGen.swift",  152LL,  2LL,  487LL);
    return swift_willThrow();
  }

  uint64_t v26 = v22;
  uint64_t v27 = v23;
  unint64_t v28 = v24 & 1;
  if ((v24 & 1) == 0)
  {
    if (!v23) {
      return (*(uint64_t (**)(char *, uint64_t))(v111 + 8))(v18, v11);
    }
    uint64_t v27 = v23 - v22;
    if (v23 < v22) {
      return (*(uint64_t (**)(char *, uint64_t))(v111 + 8))(v18, v11);
    }
    if (__OFSUB__(v23, v22))
    {
      __break(1u);
      goto LABEL_106;
    }
  }

  uint64_t v100 = v27;
  uint64_t v30 = type metadata accessor for Compiler.ByteCodeGen(0LL);
  a1 = (uint64_t)v20 + *(int *)(v30 + 20);
  uint64_t v31 = *(char **)(a1 + 80);
  unint64_t v99 = *((void *)v31 + 2);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  int v102 = v28;
  uint64_t v97 = v30;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    uint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v99 + 1,  1,  v31);
  }
  unint64_t v34 = *((void *)v31 + 2);
  unint64_t v33 = *((void *)v31 + 3);
  if (v34 >= v33 >> 1) {
    uint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v33 > 1),  v34 + 1,  1,  v31);
  }
  *((void *)v31 + 2) = v34 + 1;
  unint64_t v35 = &v31[16 * v34];
  *((void *)v35 + 4) = 0LL;
  v35[40] = 1;
  *(void *)(a1 + 80) = v31;
  unint64_t v37 = *((void *)v31 + 2);
  unint64_t v36 = *((void *)v31 + 3);
  unint64_t v38 = v37 + 1;
  unint64_t v101 = v37;
  if (v37 >= v36 >> 1) {
    uint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v36 > 1),  v37 + 1,  1,  v31);
  }
  *((void *)v31 + 2) = v38;
  uint64_t v39 = 16 * v101;
  unint64_t v40 = &v31[16 * v101];
  *((void *)v40 + 4) = 0LL;
  v40[40] = 1;
  *(void *)(a1 + 80) = v31;
  unint64_t v42 = *((void *)v31 + 2);
  unint64_t v41 = *((void *)v31 + 3);
  uint64_t v96 = v39;
  if (v42 >= v41 >> 1) {
    uint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v41 > 1),  v42 + 1,  1,  v31);
  }
  *((void *)v31 + 2) = v42 + 1;
  unint64_t v98 = v42;
  uint64_t v90 = 16 * v42;
  unint64_t v43 = &v31[16 * v42];
  *((void *)v43 + 4) = 0LL;
  uint64_t v44 = 1LL;
  _BYTE v43[40] = 1;
  *(void *)(a1 + 80) = v31;
  unint64_t v46 = *((void *)v31 + 2);
  unint64_t v45 = *((void *)v31 + 3);
  if (v46 >= v45 >> 1) {
    uint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v45 > 1),  v46 + 1,  1,  v31);
  }
  uint64_t v94 = 0LL;
  *((void *)v31 + 2) = v46 + 1;
  uint64_t v89 = 16 * v46;
  unint64_t v47 = &v31[16 * v46];
  *((void *)v47 + 4) = 0LL;
  v47[40] = 1;
  *(void *)(a1 + 80) = v31;
  if (v26 < 2) {
    goto LABEL_30;
  }
  uint64_t v44 = *(void *)(a1 + 96);
  if (__OFADD__(v44, 1LL)) {
    goto LABEL_100;
  }
  *(void *)(a1 + 96) = v44 + 1;
  uint64_t v31 = *(char **)a1;
  char v48 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v94 = v44;
  uint64_t v95 = (void (*)(char *, uint64_t))(v26 | (v44 << 16) | 0x100000000000000LL);
  uint64_t v44 = v46;
  if ((v48 & 1) == 0) {
    goto LABEL_102;
  }
  while (1)
  {
    unint64_t v50 = *((void *)v31 + 2);
    unint64_t v49 = *((void *)v31 + 3);
    if (v50 >= v49 >> 1) {
      uint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v49 > 1),  v50 + 1,  1,  v31,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
    }
    *((void *)v31 + 2) = v50 + 1;
    *(void *)&v31[8 * v50 + 32] = v95;
    *(void *)a1 = v31;
    unint64_t v46 = v44;
LABEL_30:
    unint64_t v92 = v46;
    uint64_t v93 = 0LL;
    int v51 = v102;
    BOOL v91 = v102 == 0;
    if (!v102 && v100 >= 1)
    {
      uint64_t v52 = *(void *)(a1 + 96);
      if (__OFADD__(v52, 1LL)) {
        goto LABEL_101;
      }
      *(void *)(a1 + 96) = v52 + 1;
      uint64_t v53 = v100 | (v52 << 16) | 0x100000000000000LL;
      BOOL v54 = *(char **)a1;
      char v55 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v93 = v52;
      if ((v55 & 1) == 0) {
        BOOL v54 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v54 + 2) + 1LL,  1,  v54,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
      }
      unint64_t v57 = *((void *)v54 + 2);
      unint64_t v56 = *((void *)v54 + 3);
      if (v57 >= v56 >> 1) {
        BOOL v54 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v56 > 1),  v57 + 1,  1,  v54,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
      }
      *((void *)v54 + 2) = v57 + 1;
      *(void *)&v54[8 * v57 + 32] = v53;
      *(void *)a1 = v54;
      int v51 = v102;
    }

    uint64_t v58 = v111;
    uint64_t v59 = *(void (**)(char *))(v111 + 104);
    int v88 = *MEMORY[0x18961C380];
    v59(v16);
    lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind( &lazy protocol witness table cache variable for type AST.Quantification.Kind and conformance AST.Quantification.Kind,  (uint64_t (*)(uint64_t))MEMORY[0x18961C398],  MEMORY[0x18961C3B0]);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    uint64_t v95 = *(void (**)(char *, uint64_t))(v58 + 8);
    v95(v16, v11);
    unint64_t v16 = v108;
    if (v109 != v107) {
      goto LABEL_41;
    }
    if (v110 == v108)
    {
      swift_bridgeObjectRelease_n();
      uint64_t v20 = v106;
    }

    else
    {
LABEL_41:
      char v60 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v20 = v106;
      if ((v60 & 1) == 0) {
        goto LABEL_49;
      }
    }

    if (*(_BYTE *)(a1 + 136) == 1)
    {
      unint64_t v16 = *(char **)(a1 + 80);
      uint64_t v21 = *((void *)v16 + 2);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_106:
      }
        unint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v21 + 1,  1,  v16);
      unint64_t v62 = *((void *)v16 + 2);
      unint64_t v61 = *((void *)v16 + 3);
      if (v62 >= v61 >> 1) {
        unint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v61 > 1),  v62 + 1,  1,  v16);
      }
      *((void *)v16 + 2) = v62 + 1;
      uint64_t v63 = &v16[16 * v62];
      *((void *)v63 + 4) = 0LL;
      v63[40] = 1;
      *(void *)(a1 + 80) = v16;
      *(void *)(a1 + 128) = v21;
      *(_BYTE *)(a1 + 136) = 0;
      int v51 = v102;
    }

    else
    {
      uint64_t v21 = *(void *)(a1 + 128);
    }

    MEProgram.Builder.buildSaveAddress(_:)(v21);
LABEL_49:
    uint64_t v44 = *(void *)(*(void *)a1 + 16LL);
    uint64_t v31 = *(char **)(a1 + 80);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v31);
    }
    if (v99 >= *((void *)v31 + 2))
    {
      __break(1u);
LABEL_98:
      unint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v16);
      goto LABEL_58;
    }

    uint64_t v64 = &v31[16 * v99];
    *((void *)v64 + 4) = v44;
    v64[40] = 0;
    *(void *)(a1 + 80) = v31;
    if (v26 != 1)
    {
      if (v26)
      {
        if (v26 < 2)
        {
          __break(1u);
          goto LABEL_112;
        }

        MEProgram.Builder.buildCondBranch(to:ifZeroElseDecrement:)(v98, v94);
      }

      else
      {
        MEProgram.Builder.buildBranch(to:)(v98);
      }
    }

    uint64_t v31 = *(char **)a1;
    uint64_t v44 = *(void *)(*(void *)a1 + 16LL);
    unint64_t v16 = *(char **)(a1 + 80);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      goto LABEL_98;
    }
LABEL_58:
    if (v101 < *((void *)v16 + 2)) {
      break;
    }
    __break(1u);
LABEL_100:
    __break(1u);
LABEL_101:
    __break(1u);
LABEL_102:
    uint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v31 + 2) + 1LL,  1,  v31,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
  }

  unint64_t v65 = &v16[v96];
  *((void *)v65 + 4) = v44;
  v65[40] = 0;
  *(void *)(a1 + 80) = v16;
  if ((*((_BYTE *)v20 + *(int *)(v97 + 28)) & 1) == 0)
  {
    uint64_t v44 = v51 != 0;
    int v66 = DSLTree.Node.guaranteesForwardProgress.getter(v104);
    uint64_t v67 = v105;
    if (((v66 | v91) & 1) != 0)
    {
      uint64_t v97 = 0LL;
      int v68 = v44 & ~v66;
      char v69 = 1;
      goto LABEL_68;
    }

LABEL_112:
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          uint64_t result = _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }

        return ((uint64_t (*)(char *, uint64_t))v95)(v18, v11);
      }
    }

    uint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v31 + 2) + 1LL,  1,  v31,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
    goto LABEL_65;
  }

  uint64_t v70 = v105;
  if (v51) {
    goto LABEL_63;
  }
  Compiler.ByteCodeGen.emitNode(_:)(v104);
  if (v70) {
    return ((uint64_t (*)(char *, uint64_t))v95)(v18, v11);
  }
LABEL_74:
  if (v26 >= 2) {
    MEProgram.Builder.buildBranch(to:)(v99);
  }
  uint64_t v74 = *(void *)(*(void *)a1 + 16LL);
  uint64_t v75 = *(char **)(a1 + 80);
  char v76 = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v77 = v98;
  if ((v76 & 1) == 0) {
    uint64_t v75 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v75);
  }
  BOOL v78 = v77 >= *((void *)v75 + 2);
  unint64_t v79 = v92;
  if (v78)
  {
    __break(1u);
    goto LABEL_108;
  }

  unint64_t v80 = &v75[v90];
  *((void *)v80 + 4) = v74;
  v80[40] = 0;
  *(void *)(a1 + 80) = v75;
  if (!v51)
  {
    if (v100)
    {
      if (v100 < 1) {
        goto LABEL_113;
      }
      MEProgram.Builder.buildCondBranch(to:ifZeroElseDecrement:)(v79, v93);
    }

    else
    {
      MEProgram.Builder.buildBranch(to:)(v79);
    }
  }

  uint64_t v81 = v111;
  uint64_t v82 = v103;
  (*(void (**)(_BYTE *, char *, uint64_t))(v111 + 16))(v103, v18, v11);
  int v83 = (*(uint64_t (**)(_BYTE *, uint64_t))(v81 + 88))(v82, v11);
  if (v83 != *MEMORY[0x18961C388])
  {
    if (v83 == *MEMORY[0x18961C390])
    {
      v95(v18, v11);
      MEProgram.Builder.buildSave(_:)(v101);
      goto LABEL_94;
    }

    if (v83 == v88)
    {
      v95(v18, v11);
      uint64_t v75 = *(char **)a1;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0) {
        goto LABEL_90;
      }
      goto LABEL_110;
    }

    goto LABEL_114;
  }

  v95(v18, v11);
  while (1)
  {
    MEProgram.Builder.buildSplit(to:saving:)(v101, v79);
LABEL_94:
    uint64_t v74 = *(void *)(*(void *)a1 + 16LL);
    uint64_t v75 = *(char **)(a1 + 80);
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
LABEL_108:
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v75);
      uint64_t v75 = (char *)result;
    }

    if (v79 < *((void *)v75 + 2)) {
      break;
    }
    __break(1u);
LABEL_110:
    uint64_t v75 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v75 + 2) + 1LL,  1,  v75,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
LABEL_90:
    unint64_t v85 = *((void *)v75 + 2);
    unint64_t v84 = *((void *)v75 + 3);
    if (v85 >= v84 >> 1) {
      uint64_t v75 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v84 > 1),  v85 + 1,  1,  v75,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
    }
    *((void *)v75 + 2) = v85 + 1;
    *(void *)&v75[8 * v85 + 32] = 0x1200000000000000LL;
    *(void *)a1 = v75;
  }

  uint64_t v86 = &v75[v89];
  *((void *)v86 + 4) = v74;
  v86[40] = 0;
  *(void *)(a1 + 80) = v75;
  return result;
}

uint64_t AST.Quantification.Kind.applying(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for AST.Quantification.Kind();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1895F8858](v6);
  unint64_t v10 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = MEMORY[0x1895F8858](v8);
  uint64_t v13 = (char *)v27 - v12;
  uint64_t result = MEMORY[0x1895F8858](v11);
  unint64_t v16 = (char *)v27 - v15;
  uint64_t v17 = *(void *)(a1 + 16);
  if (!v17)
  {
    __break(1u);
    return result;
  }

  int v18 = *(_DWORD *)(a1 + 4 * v17 + 28);
  int64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v19((char *)v27 - v15, v3, v6);
  if ((v18 & 0x20) == 0)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v16, v6);
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v19)(a2, v3, v6);
  }

  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 104);
  v20(v13, *MEMORY[0x18961C380], v6);
  lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind( &lazy protocol witness table cache variable for type AST.Quantification.Kind and conformance AST.Quantification.Kind,  (uint64_t (*)(uint64_t))MEMORY[0x18961C398],  MEMORY[0x18961C3A8]);
  char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v22 = *(void (**)(char *, uint64_t))(v7 + 8);
  v22(v13, v6);
  v22(v16, v6);
  if ((v21 & 1) != 0) {
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v19)(a2, v3, v6);
  }
  uint64_t v23 = *MEMORY[0x18961C388];
  v20(v10, v23, v6);
  lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind( &lazy protocol witness table cache variable for type AST.Quantification.Kind and conformance AST.Quantification.Kind,  (uint64_t (*)(uint64_t))MEMORY[0x18961C398],  MEMORY[0x18961C3B0]);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  v22(v10, v6);
  if (v27[2] == v27[0] && v27[3] == v27[1])
  {
    swift_bridgeObjectRelease_n();
  }

  else
  {
    char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v24 & 1) == 0)
    {
      uint64_t v26 = a2;
      uint64_t v25 = v23;
      return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v20)(v26, v25, v6);
    }
  }

  uint64_t v25 = *MEMORY[0x18961C390];
  uint64_t v26 = a2;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v20)(v26, v25, v6);
}

uint64_t MatchingOptions.defaultQuantificationKind.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(result + 16);
  if (v3)
  {
    int v4 = *(_DWORD *)(result + 4 * v3 + 28);
    if ((v4 & 0x80000) != 0)
    {
      uint64_t v8 = *MEMORY[0x18961C380];
      uint64_t v5 = type metadata accessor for AST.Quantification.Kind();
      uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 104LL);
      uint64_t v9 = a2;
      uint64_t v10 = v8;
    }

    else
    {
      uint64_t v5 = type metadata accessor for AST.Quantification.Kind();
      uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 104LL);
      if ((v4 & 0x20) != 0) {
        uint64_t v7 = (unsigned int *)MEMORY[0x18961C390];
      }
      else {
        uint64_t v7 = (unsigned int *)MEMORY[0x18961C388];
      }
      uint64_t v10 = *v7;
      uint64_t v9 = a2;
    }

    return v6(v9, v10, v5);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t Compiler.ByteCodeGen.tryEmitFastQuant(_:_:_:_:)( unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v80 = a4;
  uint64_t v81 = a3;
  uint64_t v82 = a2;
  unint64_t v79 = a1;
  uint64_t v7 = type metadata accessor for AST.Group.Kind();
  uint64_t v76 = *(void *)(v7 - 8);
  uint64_t v77 = v7;
  MEMORY[0x1895F8858](v7);
  uint64_t v75 = (char *)&v71 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DSLTree._AST.GroupKind(0LL);
  MEMORY[0x1895F8858](v9);
  uint64_t v11 = (char *)&v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for DSLTree.Atom(0LL);
  MEMORY[0x1895F8858](v12);
  uint64_t v14 = (uint64_t)&v71 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for AST.Quantification.Kind();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = MEMORY[0x1895F8858](v15);
  int64_t v19 = (char *)&v71 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = MEMORY[0x1895F8858](v17);
  uint64_t v22 = (char *)&v71 - v21;
  MEMORY[0x1895F8858](v20);
  char v24 = (char *)&v71 - v23;
  unint64_t v25 = *(void *)v5;
  uint64_t v26 = *(void *)(*(void *)v5 + 16LL);
  if (!v26)
  {
LABEL_44:
    __break(1u);
LABEL_45:
    char v69 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v25 > 1),  v5,  1,  (char *)v12,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
    uint64_t v67 = v74;
    uint64_t v12 = (uint64_t)v69;
LABEL_39:
    *(void *)(v12 + 16) = v5;
    *(void *)(v12 + 8 * a5 + 32) = v19;
    *(uint64_t *)((char *)v67 + v14) = v12;
    char v30 = 1;
    return v30 & 1;
  }

  int v78 = *(_DWORD *)(v25 + 4 * v26 + 28);
  if ((*(_BYTE *)(v5 + *(int *)(type metadata accessor for Compiler.ByteCodeGen(0LL) + 28)) & 1) != 0 || v81 >= 256)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v24, v82, v15);
    goto LABEL_11;
  }

  uint64_t v74 = (uint64_t *)v5;
  unsigned int v27 = a5 & 1;
  unint64_t v28 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  v28(v24, v82, v15);
  if (!v27 && v80 > 255)
  {
LABEL_11:
    (*(void (**)(char *, uint64_t))(v16 + 8))(v24, v15);
LABEL_12:
    char v30 = 0;
    return v30 & 1;
  }

  unint64_t v72 = v28;
  unsigned int v73 = v27;
  (*(void (**)(char *, void, uint64_t))(v16 + 104))(v22, *MEMORY[0x18961C390], v15);
  lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind( &lazy protocol witness table cache variable for type AST.Quantification.Kind and conformance AST.Quantification.Kind,  (uint64_t (*)(uint64_t))MEMORY[0x18961C398],  MEMORY[0x18961C3A8]);
  a5 = dispatch thunk of static Equatable.== infix(_:_:)();
  unint64_t v29 = *(void (**)(char *, uint64_t))(v16 + 8);
  v29(v22, v15);
  v29(v24, v15);
  char v30 = 0;
  if ((a5 & 1) == 0)
  {
    switch((v79 >> 59) & 0x1E | (v79 >> 2) & 1)
    {
      case 3uLL:
        uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree._AST.GroupKind, DSLTree.Node));
        uint64_t v32 = swift_projectBox();
        uint64_t v33 = *(void *)(v32 + *(int *)(v31 + 48));
        outlined init with copy of MEProgram(v32, (uint64_t)v11, type metadata accessor for DSLTree._AST.GroupKind);
        unint64_t v35 = v75;
        uint64_t v34 = v76;
        uint64_t v36 = v77;
        (*(void (**)(char *, void, uint64_t))(v76 + 104))(v75, *MEMORY[0x18961C860], v77);
        char v37 = MEMORY[0x186E16D1C](v11, v35);
        (*(void (**)(char *, uint64_t))(v34 + 8))(v35, v36);
        outlined destroy of MEProgram((uint64_t)v11, type metadata accessor for DSLTree._AST.GroupKind);
        if ((v37 & 1) == 0) {
          goto LABEL_12;
        }
        uint64_t v38 = v33;
LABEL_22:
        char v30 = Compiler.ByteCodeGen.tryEmitFastQuant(_:_:_:_:)(v38, v82, v81, v80, v73);
        return v30 & 1;
      case 7uLL:
        char v40 = *(_BYTE *)((v79 & 0xFFFFFFFFFFFFFFBLL) + 0x18);
        uint64_t v83 = *(void *)((v79 & 0xFFFFFFFFFFFFFFBLL) + 0x10);
        char v84 = v40;
        char v41 = DSLTree.CustomCharacterClass.asAsciiBitset(_:)(*v74);
        if (v41 == 2LL) {
          goto LABEL_12;
        }
        uint64_t v44 = v42;
        uint64_t v45 = v43;
        BOOL v46 = (v78 & 0x10000) == 0;
        char v47 = v41 & 1;
        type metadata accessor for Compiler.ByteCodeGen(0LL);
        MEProgram.Builder.buildQuantify(bitset:_:_:_:isScalarSemantics:)(v47, v44, v45, v82, v81, v80, v73, v46);
        char v30 = 1;
        return v30 & 1;
      case 8uLL:
        uint64_t v48 = swift_projectBox();
        outlined init with copy of MEProgram(v48, v14, type metadata accessor for DSLTree.Atom);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            if (*(void *)v14 == 2573LL && *(void *)(v14 + 8) == 0xE200000000000000LL
              || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              goto LABEL_12;
            }

            uint64_t v12 = Character.asciiValue.getter();
            swift_bridgeObjectRelease();
            if ((v12 & 0x100) != 0) {
              goto LABEL_12;
            }
            char v68 = (v78 & 0x10000) == 0;
            uint64_t v14 = *(int *)(type metadata accessor for Compiler.ByteCodeGen(0LL) + 20);
            v72(v22, v82, v15);
            int64_t v19 = (char *)specialized static QuantifyPayload.packInfoValues(_:_:_:_:isScalarSemantics:)( (uint64_t)v22,  v81,  v80,  v73,  1,  v68);
            v29(v22, v15);
            int64_t v5 = (int64_t)&v19[v12];
            __break(1u);
            goto LABEL_44;
          case 2u:
            char v49 = (v78 & 0x10000) == 0;
            char v85 = *(_BYTE *)v14;
            DSLTree.Atom.CharacterClass.asRuntimeModel(_:)();
            int v51 = v50;
            type metadata accessor for Compiler.ByteCodeGen(0LL);
            MEProgram.Builder.buildQuantify(model:_:_:_:isScalarSemantics:)( v51 & 0x101FF | (((v51 & 0xFF000000) != 0) << 24),  v82,  v81,  v80,  v73,  v49);
            char v30 = 1;
            return v30 & 1;
          case 8u:
            char v52 = (v78 & 0x10000) == 0;
            uint64_t v53 = *(int *)(type metadata accessor for Compiler.ByteCodeGen(0LL) + 20);
            v72(v22, v82, v15);
            uint64_t v54 = specialized static QuantifyPayload.packInfoValues(_:_:_:_:isScalarSemantics:)( (uint64_t)v22,  v81,  v80,  v73,  2,  v52);
            v29(v22, v15);
            uint64_t v55 = v54 + 1;
            if (v54 == -1)
            {
              __break(1u);
            }

            else
            {
              uint64_t v14 = 0x1500000000000000LL;
              uint64_t v54 = *(uint64_t *)((char *)v74 + v53);
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0) {
                goto LABEL_27;
              }
            }

            uint64_t v54 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v54 + 16) + 1LL,  1,  (char *)v54,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
LABEL_27:
            uint64_t v56 = v55 | v14;
            unint64_t v58 = *(void *)(v54 + 16);
            unint64_t v57 = *(void *)(v54 + 24);
            uint64_t v59 = v74;
            if (v58 >= v57 >> 1)
            {
              uint64_t v70 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v57 > 1),  v58 + 1,  1,  (char *)v54,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
              uint64_t v59 = v74;
              uint64_t v54 = (uint64_t)v70;
            }

            *(void *)(v54 + 16) = v58 + 1;
            *(void *)(v54 + 8 * v58 + 32) = v56;
            *(uint64_t *)((char *)v59 + v53) = v54;
            char v30 = 1;
            return v30 & 1;
          case 9u:
            char v60 = (v78 & 0x10000) == 0;
            uint64_t v14 = *(int *)(type metadata accessor for Compiler.ByteCodeGen(0LL) + 20);
            v72(v22, v82, v15);
            uint64_t v61 = specialized static QuantifyPayload.packInfoValues(_:_:_:_:isScalarSemantics:)( (uint64_t)v22,  v81,  v80,  v73,  2,  v60);
            v29(v22, v15);
            uint64_t v12 = *(uint64_t *)((char *)v74 + v14);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v12 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v12 + 16) + 1LL,  1,  (char *)v12,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
            }
            int64_t v19 = (char *)(v61 | 0x1500000000000000LL);
            goto LABEL_38;
          case 0xAu:
            uint64_t v62 = *(void *)(*v74 + 16);
            if (v62)
            {
              char v63 = (v78 & 0x10000) == 0;
              unint64_t v64 = *(unsigned int *)(*v74 + 4 * v62 + 28);
              uint64_t v14 = *(int *)(type metadata accessor for Compiler.ByteCodeGen(0LL) + 20);
              v72(v19, v82, v15);
              uint64_t v65 = (v64 >> 4) & 1;
              uint64_t v66 = specialized static QuantifyPayload.packInfoValues(_:_:_:_:isScalarSemantics:)( (uint64_t)v19,  v81,  v80,  v73,  2,  v63);
              v29(v19, v15);
              int64_t v5 = v65 + v66;
              if (!__CFADD__(v65, v66))
              {
LABEL_35:
                uint64_t v12 = *(uint64_t *)((char *)v74 + v14);
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  uint64_t v12 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v12 + 16) + 1LL,  1,  (char *)v12,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
                }
                int64_t v19 = (char *)(v5 | 0x1500000000000000LL);
LABEL_38:
                a5 = *(void *)(v12 + 16);
                unint64_t v25 = *(void *)(v12 + 24);
                int64_t v5 = a5 + 1;
                uint64_t v67 = v74;
                if (a5 < v25 >> 1) {
                  goto LABEL_39;
                }
                goto LABEL_45;
              }
            }

            else
            {
              __break(1u);
            }

            __break(1u);
            JUMPOUT(0x182D3CF74LL);
          default:
            outlined destroy of MEProgram(v14, type metadata accessor for DSLTree.Atom);
            goto LABEL_12;
        }

      case 0xCuLL:
        uint64_t v38 = *(void *)swift_projectBox();
        goto LABEL_22;
      default:
        return v30 & 1;
    }
  }

  return v30 & 1;
}

uint64_t MEProgram.Builder.buildCondBranch(to:ifZeroElseDecrement:)(uint64_t a1, uint64_t a2)
{
  int64_t v5 = *(char **)v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    int64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v5 + 2) + 1LL,  1,  v5,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
  }
  unint64_t v7 = *((void *)v5 + 2);
  unint64_t v6 = *((void *)v5 + 3);
  if (v7 >= v6 >> 1) {
    int64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v6 > 1),  v7 + 1,  1,  v5,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
  }
  *((void *)v5 + 2) = v7 + 1;
  *(void *)&v5[8 * v7 + 32] = a2 | 0x500000000000000LL;
  *(void *)uint64_t v2 = v5;
  uint64_t v8 = *((void *)v5 + 2);
  uint64_t v9 = *(void *)(v2 + 88);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v9 + 16) + 1LL,  1,  (char *)v9);
    uint64_t v9 = result;
  }

  unint64_t v12 = *(void *)(v9 + 16);
  unint64_t v11 = *(void *)(v9 + 24);
  if (v12 >= v11 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v11 > 1),  v12 + 1,  1,  (char *)v9);
    uint64_t v9 = result;
  }

  *(void *)(v9 + 16) = v12 + 1;
  unint64_t v13 = v9 + 32 * v12;
  *(void *)(v13 + 32) = v8 - 1;
  *(void *)(v13 + 40) = a1;
  *(void *)(v13 + 48) = 0LL;
  *(_BYTE *)(v13 + 56) = 1;
  *(void *)(v2 + 88) = v9;
  return result;
}

uint64_t DSLTree.Node.guaranteesForwardProgress.getter(unint64_t a1)
{
  while (2)
  {
    unint64_t v1 = a1;
    uint64_t v2 = type metadata accessor for DSLTree._AST.QuantificationAmount(0LL);
    MEMORY[0x1895F8858](v2);
    int v4 = (char *)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v5 = type metadata accessor for DSLTree.Atom(0LL);
    MEMORY[0x1895F8858](v5);
    unint64_t v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v8 = type metadata accessor for AST.Group.Kind();
    uint64_t v9 = *(void *)(v8 - 8);
    MEMORY[0x1895F8858](v8);
    unint64_t v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v12 = type metadata accessor for DSLTree._AST.GroupKind(0LL);
    MEMORY[0x1895F8858](v12);
    uint64_t v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    char v15 = 0;
    switch((v1 >> 59) & 0x1E | (v1 >> 2) & 1)
    {
      case 0uLL:
        unint64_t v16 = 0LL;
        uint64_t v17 = *(void *)(v1 + 16);
        uint64_t v18 = *(void *)(v17 + 16);
        while (2)
        {
          char v15 = v18 == v16;
          if (v18 == v16) {
            return v15 & 1;
          }
          if (v16 < *(void *)(v17 + 16))
          {
            unint64_t v19 = v16 + 1;
            uint64_t v20 = *(void *)(v17 + 32 + 8 * v16);
            swift_retain();
            LOBYTE(v20) = DSLTree.Node.guaranteesForwardProgress.getter(v20);
            swift_release();
            unint64_t v16 = v19;
            if ((v20 & 1) == 0) {
              return v15 & 1;
            }
            continue;
          }

          break;
        }

        __break(1u);
        goto LABEL_36;
      case 1uLL:
        unint64_t v21 = 0LL;
        uint64_t v22 = *(void *)((v1 & 0xFFFFFFFFFFFFFFFBLL) + 0x10);
        uint64_t v23 = *(void *)(v22 + 16);
        do
        {
          char v15 = v23 != v21;
          if (v23 == v21) {
            break;
          }
          if (v21 >= *(void *)(v22 + 16))
          {
LABEL_36:
            __break(1u);
            JUMPOUT(0x182D3D570LL);
          }

          unint64_t v24 = v21 + 1;
          uint64_t v25 = *(void *)(v22 + 32 + 8 * v21);
          swift_retain();
          LOBYTE(v25) = DSLTree.Node.guaranteesForwardProgress.getter(v25);
          swift_release();
          unint64_t v21 = v24;
        }

        while ((v25 & 1) == 0);
        return v15 & 1;
      case 2uLL:
        a1 = *(void *)((v1 & 0xFFFFFFFFFFFFFFFBLL) + 0x30);
        continue;
      case 3uLL:
        uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree._AST.GroupKind, DSLTree.Node));
        uint64_t v27 = swift_projectBox();
        uint64_t v28 = *(void *)(v27 + *(int *)(v26 + 48));
        outlined init with copy of MEProgram(v27, (uint64_t)v14, type metadata accessor for DSLTree._AST.GroupKind);
        (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v14, v8);
        int v29 = (*(uint64_t (**)(char *, uint64_t))(v9 + 88))(v11, v8);
        char v15 = 0;
        if (v29 != *MEMORY[0x18961C8C8]
          && v29 != *MEMORY[0x18961C888]
          && v29 != *MEMORY[0x18961C858]
          && v29 != *MEMORY[0x18961C898])
        {
          char v15 = DSLTree.Node.guaranteesForwardProgress.getter(v28);
          (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
        }

        return v15 & 1;
      case 6uLL:
        uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree._AST.QuantificationAmount, DSLTree.QuantificationKind, DSLTree.Node));
        uint64_t v31 = swift_projectBox();
        uint64_t v32 = *(void *)(v31 + *(int *)(v30 + 64));
        outlined init with copy of MEProgram( v31,  (uint64_t)v4,  type metadata accessor for DSLTree._AST.QuantificationAmount);
        uint64_t v33 = AST.Quantification.Amount.bounds.getter();
        char v35 = v34;
        outlined destroy of MEProgram((uint64_t)v4, type metadata accessor for DSLTree._AST.QuantificationAmount);
        char v15 = 0;
        if ((v35 & 1) == 0 && v33 >= 1) {
          char v15 = DSLTree.Node.guaranteesForwardProgress.getter(v32);
        }
        return v15 & 1;
      case 7uLL:
        char v36 = *(_BYTE *)((v1 & 0xFFFFFFFFFFFFFFBLL) + 0x18);
        uint64_t v42 = *(void *)((v1 & 0xFFFFFFFFFFFFFFBLL) + 0x10);
        char v43 = v36;
        char v15 = DSLTree.CustomCharacterClass.guaranteesForwardProgress.getter();
        return v15 & 1;
      case 8uLL:
        uint64_t v37 = swift_projectBox();
        outlined init with copy of MEProgram(v37, (uint64_t)v7, type metadata accessor for DSLTree.Atom);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 3)
        {
          char v15 = 0;
        }

        else if (EnumCaseMultiPayload == 4 || EnumCaseMultiPayload == 6)
        {
          outlined destroy of MEProgram((uint64_t)v7, type metadata accessor for DSLTree.Atom);
          char v15 = 0;
        }

        else
        {
          outlined destroy of MEProgram((uint64_t)v7, type metadata accessor for DSLTree.Atom);
          char v15 = 1;
        }

        return v15 & 1;
      case 0xAuLL:
        unint64_t v39 = *(void *)((v1 & 0xFFFFFFFFFFFFFFBLL) + 0x18);
        if ((v39 & 0x2000000000000000LL) != 0) {
          uint64_t v40 = HIBYTE(v39) & 0xF;
        }
        else {
          uint64_t v40 = *(void *)((v1 & 0xFFFFFFFFFFFFFFBLL) + 0x10) & 0xFFFFFFFFFFFFLL;
        }
        char v15 = v40 != 0;
        return v15 & 1;
      case 0xCuLL:
        a1 = *(void *)swift_projectBox();
        continue;
      default:
        return v15 & 1;
    }
  }

uint64_t MEProgram.Builder.buildCondBranch(to:ifSamePositionAs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 | 0x600000000000000LL;
  uint64_t v5 = *(char **)v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v5 + 2) + 1LL,  1,  v5,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
  }
  unint64_t v7 = *((void *)v5 + 2);
  unint64_t v6 = *((void *)v5 + 3);
  if (v7 >= v6 >> 1) {
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v6 > 1),  v7 + 1,  1,  v5,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
  }
  *((void *)v5 + 2) = v7 + 1;
  *(void *)&v5[8 * v7 + 32] = v4;
  *(void *)uint64_t v2 = v5;
  uint64_t v8 = *((void *)v5 + 2);
  uint64_t v9 = *(void *)(v2 + 88);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v9 + 16) + 1LL,  1,  (char *)v9);
    uint64_t v9 = result;
  }

  unint64_t v12 = *(void *)(v9 + 16);
  unint64_t v11 = *(void *)(v9 + 24);
  if (v12 >= v11 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v11 > 1),  v12 + 1,  1,  (char *)v9);
    uint64_t v9 = result;
  }

  *(void *)(v9 + 16) = v12 + 1;
  unint64_t v13 = v9 + 32 * v12;
  *(void *)(v13 + 32) = v8 - 1;
  *(void *)(v13 + 40) = a1;
  *(void *)(v13 + 48) = 0LL;
  *(_BYTE *)(v13 + 56) = 1;
  *(void *)(v2 + 88) = v9;
  return result;
}

uint64_t MEProgram.Builder.buildSplit(to:saving:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(char **)v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v5 + 2) + 1LL,  1,  v5,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
  }
  unint64_t v7 = *((void *)v5 + 2);
  unint64_t v6 = *((void *)v5 + 3);
  if (v7 >= v6 >> 1) {
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v6 > 1),  v7 + 1,  1,  v5,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
  }
  *((void *)v5 + 2) = v7 + 1;
  *(void *)&v5[8 * v7 + 32] = 0x1400000000000000LL;
  *(void *)uint64_t v2 = v5;
  uint64_t v8 = *((void *)v5 + 2);
  uint64_t v9 = *(void *)(v2 + 88);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v9 + 16) + 1LL,  1,  (char *)v9);
    uint64_t v9 = result;
  }

  unint64_t v12 = *(void *)(v9 + 16);
  unint64_t v11 = *(void *)(v9 + 24);
  if (v12 >= v11 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v11 > 1),  v12 + 1,  1,  (char *)v9);
    uint64_t v9 = result;
  }

  *(void *)(v9 + 16) = v12 + 1;
  unint64_t v13 = v9 + 32 * v12;
  *(void *)(v13 + 32) = v8 - 1;
  *(void *)(v13 + 40) = a1;
  *(void *)(v13 + 48) = a2;
  *(_BYTE *)(v13 + 56) = 0;
  *(void *)(v2 + 88) = v9;
  return result;
}

uint64_t DSLTree.CustomCharacterClass.asAsciiBitset(_:)(uint64_t a1)
{
  uint64_t v18 = a1;
  uint64_t v2 = type metadata accessor for DSLTree.CustomCharacterClass.Member(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t result = MEMORY[0x1895F8858](v2);
  unint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *(void *)v1;
  unint64_t v8 = v1[8];
  uint64_t v17 = *(void *)(*(void *)v1 + 16LL);
  if (v17)
  {
    uint64_t v19 = 0LL;
    uint64_t v20 = 0LL;
    unint64_t v9 = 0LL;
    unint64_t v10 = v8;
    while (v9 < *(void *)(v7 + 16))
    {
      outlined init with copy of MEProgram( v7 + ((*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))
      + *(void *)(v3 + 72) * v9,
        (uint64_t)v6,
        type metadata accessor for DSLTree.CustomCharacterClass.Member);
      unint64_t v11 = v8;
      unint64_t v12 = DSLTree.CustomCharacterClass.Member.asAsciiBitset(_:_:)(v18, v8);
      uint64_t v14 = v13;
      uint64_t v16 = v15;
      uint64_t result = outlined destroy of MEProgram( (uint64_t)v6,  type metadata accessor for DSLTree.CustomCharacterClass.Member);
      if (v12 == 2LL)
      {
        uint64_t v19 = v14;
        uint64_t v20 = v16;
      }

      else if (v10 == 2LL)
      {
        unint64_t v12 = v10;
      }

      else
      {
        unint64_t v12 = v10 & 1;
        v19 |= v14;
        v20 |= v16;
      }

      ++v9;
      unint64_t v10 = v12;
      unint64_t v8 = v11;
      if (v17 == v9) {
        return v12;
      }
    }

    __break(1u);
LABEL_14:
    __break(1u);
  }

  else
  {
    uint64_t v19 = 0LL;
    uint64_t v20 = 0LL;
    return v8;
  }

  return result;
}

uint64_t MEProgram.Builder.buildQuantify(bitset:_:_:_:isScalarSemantics:)( char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, int a8)
{
  uint64_t v32 = a5;
  uint64_t v33 = a6;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  int v30 = a7 & 1;
  int v31 = a8;
  uint64_t v11 = type metadata accessor for AST.Quantification.Kind();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1895F8858](v11);
  uint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = (char *)v8[6];
  uint64_t v16 = *((void *)v15 + 2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v16 + 1,  1,  v15);
  }
  unint64_t v18 = *((void *)v15 + 2);
  unint64_t v17 = *((void *)v15 + 3);
  if (v18 >= v17 >> 1) {
    uint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v17 > 1),  v18 + 1,  1,  v15);
  }
  *((void *)v15 + 2) = v18 + 1;
  uint64_t v19 = &v15[24 * v18];
  v19[32] = a1 & 1;
  uint64_t v21 = v28;
  uint64_t v20 = v29;
  *((void *)v19 + 5) = a2;
  *((void *)v19 + 6) = v21;
  v8[6] = (uint64_t)v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v20, v11);
  uint64_t v22 = specialized static QuantifyPayload.packInfoValues(_:_:_:_:isScalarSemantics:)( (uint64_t)v14,  v32,  v33,  v30,  0,  v31 & 1);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  uint64_t v23 = v16 + v22;
  if (__CFADD__(v16, v22))
  {
    __break(1u);
  }

  else
  {
    uint64_t v22 = *v8;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0) {
      goto LABEL_7;
    }
  }

  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v22 + 16) + 1LL,  1,  (char *)v22,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
  uint64_t v22 = result;
LABEL_7:
  unint64_t v26 = *(void *)(v22 + 16);
  unint64_t v25 = *(void *)(v22 + 24);
  if (v26 >= v25 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v25 > 1),  v26 + 1,  1,  (char *)v22,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
    uint64_t v22 = result;
  }

  *(void *)(v22 + 16) = v26 + 1;
  *(void *)(v22 + 8 * v26 + 32) = v23 | 0x1500000000000000LL;
  *unint64_t v8 = v22;
  return result;
}

uint64_t MEProgram.Builder.buildQuantify(model:_:_:_:isScalarSemantics:)( int a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6)
{
  char v12 = a5 & 1;
  uint64_t v13 = type metadata accessor for AST.Quantification.Kind();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1895F8858](v13);
  uint64_t v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a2, v13);
  uint64_t v17 = a1;
  if ((a1 & 0x1000000) != 0)
  {
    uint64_t v17 = a1 | 0x200LL;
    if ((a1 & 0x10000) != 0) {
      goto LABEL_3;
    }
  }

  else if ((a1 & 0x10000) != 0)
  {
LABEL_3:
    uint64_t v18 = 1024LL;
    goto LABEL_6;
  }

  uint64_t v18 = 0LL;
LABEL_6:
  uint64_t v19 = v17 + v18;
  uint64_t v20 = specialized static QuantifyPayload.packInfoValues(_:_:_:_:isScalarSemantics:)( (uint64_t)v16,  a3,  a4,  v12,  3,  a6 & 1);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  uint64_t v21 = v19 + v20;
  if (__CFADD__(v19, v20))
  {
    __break(1u);
  }

  else
  {
    uint64_t v20 = *v6;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0) {
      goto LABEL_8;
    }
  }

  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v20 + 16) + 1LL,  1,  (char *)v20,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
  uint64_t v20 = result;
LABEL_8:
  unint64_t v24 = *(void *)(v20 + 16);
  unint64_t v23 = *(void *)(v20 + 24);
  if (v24 >= v23 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v23 > 1),  v24 + 1,  1,  (char *)v20,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
    uint64_t v20 = result;
  }

  *(void *)(v20 + 16) = v24 + 1;
  *(void *)(v20 + 8 * v24 + 32) = v21 | 0x1500000000000000LL;
  *unint64_t v6 = v20;
  return result;
}

void *Compiler.ByteCodeGen.coalescingCustomCharacterClassMembers(_:)(uint64_t a1)
{
  uint64_t v103 = type metadata accessor for DSLTree.Atom(0LL);
  uint64_t v3 = MEMORY[0x1895F8858](v103);
  uint64_t v97 = (uint64_t)&v95 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = MEMORY[0x1895F8858](v3);
  uint64_t v101 = (uint64_t)&v95 - v6;
  uint64_t v7 = MEMORY[0x1895F8858](v5);
  uint64_t v102 = (uint64_t)&v95 - v8;
  uint64_t v9 = MEMORY[0x1895F8858](v7);
  uint64_t v100 = (uint64_t)&v95 - v10;
  uint64_t v11 = MEMORY[0x1895F8858](v9);
  uint64_t v99 = (uint64_t)&v95 - v12;
  MEMORY[0x1895F8858](v11);
  uint64_t v98 = (uint64_t)&v95 - v13;
  uint64_t v14 = type metadata accessor for DSLTree.CustomCharacterClass.Member(0LL);
  uint64_t v107 = *(void *)(v14 - 8);
  uint64_t v108 = v14;
  uint64_t v15 = MEMORY[0x1895F8858](v14);
  uint64_t v105 = (uint64_t)&v95 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = MEMORY[0x1895F8858](v15);
  uint64_t v19 = (uint64_t *)((char *)&v95 - v18);
  MEMORY[0x1895F8858](v17);
  uint64_t v21 = (char *)&v95 - v20;
  uint64_t v110 = v1;
  uint64_t v22 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay17_StringProcessing7DSLTreeV20CustomCharacterClassV6MemberOG_ALs5NeverOTg5( partial apply for closure #1 in Compiler.ByteCodeGen.coalescingCustomCharacterClassMembers(_:),  (uint64_t)v109,  a1);
  uint64_t v23 = v22;
  uint64_t v112 = (void *)MEMORY[0x18961AFE8];
  uint64_t v106 = *(void *)(v22 + 16);
  if (!v106)
  {
    swift_bridgeObjectRelease();
    goto LABEL_95;
  }

  unint64_t v24 = 0LL;
  char v25 = 0;
  unint64_t v26 = (char *)&outlined read-only object #0 of Compiler.ByteCodeGen.coalescingCustomCharacterClassMembers(_:);
  uint64_t v104 = v22;
  while (2)
  {
    if (v24 >= *(void *)(v23 + 16))
    {
      __break(1u);
LABEL_98:
      __break(1u);
LABEL_99:
      __break(1u);
LABEL_100:
      __break(1u);
LABEL_101:
      __break(1u);
LABEL_102:
      __break(1u);
LABEL_103:
      __break(1u);
LABEL_104:
      __break(1u);
LABEL_105:
      __break(1u);
LABEL_106:
      __break(1u);
LABEL_107:
      __break(1u);
LABEL_108:
      __break(1u);
      JUMPOUT(0x182D3E780LL);
    }

    unint64_t v28 = (*(unsigned __int8 *)(v107 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v107 + 80);
    uint64_t v29 = *(void *)(v107 + 72);
    outlined init with copy of MEProgram( v23 + v28 + v29 * v24,  (uint64_t)v21,  type metadata accessor for DSLTree.CustomCharacterClass.Member);
    outlined init with copy of MEProgram( (uint64_t)v21,  (uint64_t)v19,  type metadata accessor for DSLTree.CustomCharacterClass.Member);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v30 = v98;
        outlined init with take of DSLTree.QuantificationKind( (uint64_t)v19,  v98,  type metadata accessor for DSLTree.Atom);
        outlined init with copy of MEProgram(v30, v99, type metadata accessor for DSLTree.Atom);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 1)
        {
          unsigned int v48 = *(_DWORD *)v99;
          if (*(_DWORD *)v99 > 0x7Fu)
          {
            int v78 = (*(_DWORD *)v99 & 0x3F) << 8;
            if (v48 >= 0x800)
            {
              unsigned int v81 = v48 >> 12;
              int v82 = (v78 | (v48 >> 6) & 0x3F) << 8;
              unsigned int v83 = HIWORD(v48);
              unsigned int v49 = (((v82 | (v48 >> 12) & 0x3F) << 8) | (v48 >> 18)) - 2122219023;
              int v84 = (v82 | v81) + 8487393;
              if (!v83) {
                unsigned int v49 = v84;
              }
            }

            else
            {
              unsigned int v49 = (v78 | (v48 >> 6)) + 33217;
            }
          }

          else
          {
            unsigned int v49 = v48 + 1;
          }

          uint64_t v111 = (v49 + 0xFEFEFEFEFEFEFFLL) & ~(-1LL << (8 * (4 - (__clz(v49) >> 3))));
          uint64_t v33 = MEMORY[0x186E16FB0](&v111);
          uint64_t v32 = v50;
        }

        else
        {
          if (EnumCaseMultiPayload)
          {
            outlined destroy of MEProgram(v99, type metadata accessor for DSLTree.Atom);
            uint64_t v52 = v98;
            goto LABEL_42;
          }

          uint64_t v33 = *(void *)v99;
          uint64_t v32 = *(void *)(v99 + 8);
        }

        outlined destroy of MEProgram(v98, type metadata accessor for DSLTree.Atom);
        outlined destroy of MEProgram((uint64_t)v21, type metadata accessor for DSLTree.CustomCharacterClass.Member);
        unint64_t v51 = *((void *)v26 + 2);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          if (!v51) {
            goto LABEL_104;
          }
        }

        else
        {
          unint64_t v26 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v26);
          if (!v51) {
            goto LABEL_104;
          }
        }

        if (v51 > *((void *)v26 + 2)) {
          goto LABEL_105;
        }
        swift_bridgeObjectRetain();
        MEMORY[0x186E17010](v33, v32);
LABEL_4:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_5;
      case 1u:
        uint64_t v34 = (uint64_t)v19
        uint64_t v35 = v100;
        outlined init with take of DSLTree.QuantificationKind( (uint64_t)v19,  v100,  type metadata accessor for DSLTree.Atom);
        outlined init with take of DSLTree.QuantificationKind(v34, v102, type metadata accessor for DSLTree.Atom);
        outlined init with copy of MEProgram(v35, v101, type metadata accessor for DSLTree.Atom);
        int v36 = swift_getEnumCaseMultiPayload();
        if (v36 == 1)
        {
          unsigned int v53 = *(_DWORD *)v101;
          if (*(_DWORD *)v101 >= 0x80u)
          {
            int v79 = (*(_DWORD *)v101 & 0x3F) << 8;
            uint64_t v23 = v104;
            if (v53 >= 0x800)
            {
              unsigned int v85 = v53 >> 12;
              int v86 = (v79 | (v53 >> 6) & 0x3F) << 8;
              unsigned int v87 = HIWORD(v53);
              unsigned int v54 = (((v86 | (v53 >> 12) & 0x3F) << 8) | (v53 >> 18)) - 2122219023;
              int v88 = (v86 | v85) + 8487393;
              if (!v87) {
                unsigned int v54 = v88;
              }
            }

            else
            {
              unsigned int v54 = (v79 | (v53 >> 6)) + 33217;
            }
          }

          else
          {
            unsigned int v54 = v53 + 1;
            uint64_t v23 = v104;
          }

          uint64_t v111 = (v54 + 0xFEFEFEFEFEFEFFLL) & ~(-1LL << (8 * (4 - (__clz(v54) >> 3))));
          uint64_t v95 = MEMORY[0x186E16FB0](&v111);
          uint64_t v96 = v55;
        }

        else
        {
          if (v36)
          {
            outlined destroy of MEProgram(v101, type metadata accessor for DSLTree.Atom);
            outlined destroy of MEProgram(v100, type metadata accessor for DSLTree.Atom);
            uint64_t v52 = v102;
LABEL_42:
            outlined destroy of MEProgram(v52, type metadata accessor for DSLTree.Atom);
LABEL_43:
            if ((v25 & 1) != 0) {
              goto LABEL_44;
            }
LABEL_26:
            char v47 = v112;
            goto LABEL_58;
          }

          uint64_t v37 = *(void *)(v101 + 8);
          uint64_t v95 = *(void *)v101;
          uint64_t v96 = v37;
          uint64_t v23 = v104;
        }

        outlined destroy of MEProgram(v100, type metadata accessor for DSLTree.Atom);
        outlined init with copy of MEProgram(v102, v97, type metadata accessor for DSLTree.Atom);
        int v56 = swift_getEnumCaseMultiPayload();
        if (v56 == 1)
        {
          unsigned int v71 = *(_DWORD *)v97;
          if (*(_DWORD *)v97 > 0x7Fu)
          {
            int v80 = (*(_DWORD *)v97 & 0x3F) << 8;
            if (v71 >= 0x800)
            {
              unsigned int v89 = v71 >> 12;
              int v90 = (v80 | (v71 >> 6) & 0x3F) << 8;
              unsigned int v91 = HIWORD(v71);
              unsigned int v72 = (((v90 | (v71 >> 12) & 0x3F) << 8) | (v71 >> 18)) - 2122219023;
              int v92 = (v90 | v89) + 8487393;
              if (!v91) {
                unsigned int v72 = v92;
              }
            }

            else
            {
              unsigned int v72 = (v80 | (v71 >> 6)) + 33217;
            }
          }

          else
          {
            unsigned int v72 = v71 + 1;
          }

          uint64_t v111 = (v72 + 0xFEFEFEFEFEFEFFLL) & ~(-1LL << (8 * (4 - (__clz(v72) >> 3))));
          uint64_t v58 = MEMORY[0x186E16FB0](&v111);
          uint64_t v57 = v73;
          goto LABEL_66;
        }

        if (v56)
        {
          outlined destroy of MEProgram(v97, type metadata accessor for DSLTree.Atom);
          outlined destroy of MEProgram(v102, type metadata accessor for DSLTree.Atom);
          swift_bridgeObjectRelease();
          if ((v25 & 1) == 0) {
            goto LABEL_26;
          }
LABEL_44:
          uint64_t v59 = finish() in Accumulator #1 in Compiler.ByteCodeGen.coalescingCustomCharacterClassMembers(_:)(v26);
          swift_bridgeObjectRelease();
          uint64_t v60 = *(void *)(v59 + 16);
          char v47 = v112;
          int64_t v61 = v112[2];
          int64_t v62 = v61 + v60;
          if (__OFADD__(v61, v60)) {
            goto LABEL_98;
          }
          size_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          if ((_DWORD)isUniquelyReferenced_nonNull_native && (int64_t v64 = v47[3] >> 1, v64 >= v62))
          {
            if (*(void *)(v59 + 16))
            {
LABEL_48:
              if (v64 - v47[2] < v60) {
                goto LABEL_103;
              }
              swift_arrayInitWithCopy();
              if (v60)
              {
                uint64_t v65 = v47[2];
                BOOL v66 = __OFADD__(v65, v60);
                uint64_t v67 = v65 + v60;
                if (v66) {
                  goto LABEL_108;
                }
                v47[2] = v67;
              }

              goto LABEL_57;
            }
          }

          else
          {
            if (v61 <= v62) {
              int64_t v68 = v61 + v60;
            }
            else {
              int64_t v68 = v61;
            }
            char v47 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( isUniquelyReferenced_nonNull_native,  v68,  1,  v47,  &demangling cache variable for type metadata for _ContiguousArrayStorage<DSLTree.CustomCharacterClass.Member>,  type metadata accessor for DSLTree.CustomCharacterClass.Member);
            int64_t v64 = v47[3] >> 1;
            if (*(void *)(v59 + 16)) {
              goto LABEL_48;
            }
          }

          if (v60) {
            goto LABEL_99;
          }
LABEL_57:
          swift_bridgeObjectRelease();
          uint64_t v112 = v47;
          unint64_t v26 = (char *)&outlined read-only object #0 of Compiler.ByteCodeGen.coalescingCustomCharacterClassMembers(_:);
LABEL_58:
          outlined init with take of DSLTree.QuantificationKind( (uint64_t)v21,  v105,  type metadata accessor for DSLTree.CustomCharacterClass.Member);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            char v47 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v47[2] + 1LL,  1,  v47,  &demangling cache variable for type metadata for _ContiguousArrayStorage<DSLTree.CustomCharacterClass.Member>,  type metadata accessor for DSLTree.CustomCharacterClass.Member);
          }
          unint64_t v70 = v47[2];
          unint64_t v69 = v47[3];
          if (v70 >= v69 >> 1) {
            char v47 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v69 > 1,  v70 + 1,  1,  v47,  &demangling cache variable for type metadata for _ContiguousArrayStorage<DSLTree.CustomCharacterClass.Member>,  type metadata accessor for DSLTree.CustomCharacterClass.Member);
          }
          v47[2] = v70 + 1;
          outlined init with take of DSLTree.QuantificationKind( v105,  (uint64_t)v47 + v28 + v70 * v29,  type metadata accessor for DSLTree.CustomCharacterClass.Member);
          char v25 = 0;
          uint64_t v112 = v47;
          uint64_t v23 = v104;
          goto LABEL_6;
        }

        uint64_t v58 = *(void *)v97;
        uint64_t v57 = *(void *)(v97 + 8);
LABEL_66:
        outlined destroy of MEProgram(v102, type metadata accessor for DSLTree.Atom);
        outlined destroy of MEProgram((uint64_t)v21, type metadata accessor for DSLTree.CustomCharacterClass.Member);
        unint64_t v74 = *((void *)v26 + 2);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          if (!v74) {
            goto LABEL_106;
          }
        }

        else
        {
          unint64_t v26 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v26);
          if (!v74) {
            goto LABEL_106;
          }
        }

        if (v74 > *((void *)v26 + 2)) {
          goto LABEL_107;
        }
        swift_bridgeObjectRetain();
        MEMORY[0x186E17010](v95, v96);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v76 = *((void *)v26 + 2);
        unint64_t v75 = *((void *)v26 + 3);
        if (v76 >= v75 >> 1) {
          unint64_t v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v75 > 1),  v76 + 1,  1,  v26);
        }
        *((void *)v26 + 2) = v76 + 1;
        uint64_t v77 = &v26[16 * v76];
        *((void *)v77 + 4) = v58;
        *((void *)v77 + 5) = v57;
LABEL_5:
        char v25 = 1;
LABEL_6:
        if (v106 != ++v24) {
          continue;
        }
        swift_bridgeObjectRelease();
        if ((v25 & 1) == 0)
        {
LABEL_95:
          swift_bridgeObjectRelease();
          return v112;
        }

        size_t v93 = finish() in Accumulator #1 in Compiler.ByteCodeGen.coalescingCustomCharacterClassMembers(_:)(v26);
        swift_bridgeObjectRelease();
        specialized Array.append<A>(contentsOf:)(v93);
        return v112;
      case 3u:
        outlined destroy of MEProgram((uint64_t)v21, type metadata accessor for DSLTree.CustomCharacterClass.Member);
        uint64_t v39 = *v19;
        uint64_t v38 = (void *)v19[1];
        unint64_t v40 = *((void *)v26 + 2);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          if (!v40) {
            goto LABEL_101;
          }
        }

        else
        {
          unint64_t v26 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v26);
          if (!v40) {
            goto LABEL_101;
          }
        }

        if (v40 > *((void *)v26 + 2)) {
          goto LABEL_102;
        }
        swift_bridgeObjectRetain();
        v27._uint64_t countAndFlagsBits = v39;
        v27._object = v38;
        String.append(_:)(v27);
        goto LABEL_4;
      case 4u:
        outlined destroy of MEProgram((uint64_t)v19, type metadata accessor for DSLTree.CustomCharacterClass.Member);
        uint64_t v41 = *((void *)v26 + 2);
        if (!v41) {
          goto LABEL_100;
        }
        uint64_t v42 = &v26[16 * v41];
        uint64_t v44 = *((void *)v42 + 2);
        unint64_t v43 = *((void *)v42 + 3);
        uint64_t v45 = v44 & 0xFFFFFFFFFFFFLL;
        if ((v43 & 0x2000000000000000LL) != 0) {
          uint64_t v46 = HIBYTE(v43) & 0xF;
        }
        else {
          uint64_t v46 = v45;
        }
        if (!v46) {
          goto LABEL_43;
        }
        outlined destroy of MEProgram((uint64_t)v21, type metadata accessor for DSLTree.CustomCharacterClass.Member);
        goto LABEL_5;
      default:
        outlined destroy of MEProgram((uint64_t)v19, type metadata accessor for DSLTree.CustomCharacterClass.Member);
        if ((v25 & 1) == 0) {
          goto LABEL_26;
        }
        goto LABEL_44;
    }
  }

void closure #1 in Compiler.ByteCodeGen.coalescingCustomCharacterClassMembers(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DSLTree.CustomCharacterClass.Member(0LL);
  MEMORY[0x1895F8858](v2);
  outlined init with copy of MEProgram( a1,  (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL),  type metadata accessor for DSLTree.CustomCharacterClass.Member);
  uint64_t v4 = (char *)&loc_182D3E828 + dword_182D3EA64[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }

uint64_t sub_182D3E838()
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree.Atom, DSLTree.Atom));
  outlined destroy of MEProgram(v2 + *(int *)(v3 + 48), type metadata accessor for DSLTree.Atom);
  outlined destroy of MEProgram(v2, type metadata accessor for DSLTree.Atom);
  return outlined init with copy of MEProgram(v1, v0, type metadata accessor for DSLTree.CustomCharacterClass.Member);
}

uint64_t Compiler.ByteCodeGen.coalescingCustomCharacterClass(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(*(void *)v2 + 16LL);
  if (v4)
  {
    uint64_t v5 = *(void **)result;
    char v6 = *(_BYTE *)(result + 8);
    if ((*(_DWORD *)(*(void *)v2 + 4 * v4 + 28) & 0x10000) != 0) {
      uint64_t v5 = Compiler.ByteCodeGen.coalescingCustomCharacterClassMembers(_:)(*(void *)result);
    }
    else {
      swift_bridgeObjectRetain();
    }
    uint64_t v7 = Compiler.ByteCodeGen.flatteningCustomCharacterClassMembers(_:)((uint64_t)v5);
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)a2 = v7;
    *(_BYTE *)(a2 + 8) = v6;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay17_StringProcessing7DSLTreeV20CustomCharacterClassV6MemberOG_ALs5NeverOTg5( void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v19 = a1;
  uint64_t v20 = a2;
  uint64_t v6 = type metadata accessor for DSLTree.CustomCharacterClass.Member(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int64_t v10 = *(void *)(a3 + 16);
  uint64_t v11 = MEMORY[0x18961AFE8];
  if (v10)
  {
    uint64_t v21 = MEMORY[0x18961AFE8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0LL, v10, 0);
    uint64_t v11 = v21;
    unint64_t v18 = (*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    uint64_t v12 = a3 + v18;
    uint64_t v13 = *(void *)(v7 + 72);
    while (1)
    {
      v19(v12);
      if (v4) {
        break;
      }
      uint64_t v4 = 0LL;
      uint64_t v21 = v11;
      unint64_t v15 = *(void *)(v11 + 16);
      unint64_t v14 = *(void *)(v11 + 24);
      if (v15 >= v14 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
        uint64_t v11 = v21;
      }

      *(void *)(v11 + 16) = v15 + 1;
      outlined init with take of DSLTree.QuantificationKind( (uint64_t)v9,  v11 + v18 + v15 * v13,  type metadata accessor for DSLTree.CustomCharacterClass.Member);
      v12 += v13;
      if (!--v10) {
        return v11;
      }
    }

    swift_release();
  }

  return v11;
}

uint64_t finish() in Accumulator #1 in Compiler.ByteCodeGen.coalescingCustomCharacterClassMembers(_:)( void *a1)
{
  uint64_t v3 = type metadata accessor for DSLTree.CustomCharacterClass.Member(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x1895F8858](v3);
  uint64_t v6 = MEMORY[0x1895F8858](v5);
  uint64_t v8 = (uint64_t *)((char *)&v71 - v7);
  MEMORY[0x1895F8858](v6);
  int v78 = (uint64_t *)((char *)&v71 - v10);
  uint64_t v11 = a1[2];
  uint64_t v79 = v11 - 1;
  if (v11 == 1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DSLTree.CustomCharacterClass.Member>);
    unint64_t v12 = (*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    size_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_182D9CC00;
    unint64_t v14 = (void *)(v13 + v12);
    uint64_t v15 = a1[5];
    *unint64_t v14 = a1[4];
    v14[1] = v15;
    swift_storeEnumTagMultiPayload();
    swift_bridgeObjectRetain();
    return v13;
  }

  unsigned int v72 = v9;
  swift_bridgeObjectRetain();
  unint64_t v74 = a1;
  swift_unknownObjectRetain();
  size_t v13 = MEMORY[0x18961AFE8];
  uint64_t v73 = v11;
  if (!v11 || (uint64_t v77 = v79 & 0x7FFFFFFFFFFFFFFFLL, (v79 & 0x7FFFFFFFFFFFFFFFLL) == 0))
  {
LABEL_33:
    unsigned int v54 = v74;
    swift_unknownObjectRelease_n();
    if (v73)
    {
      uint64_t v55 = (uint64_t)&v54[2 * v73 + 4];
      uint64_t v56 = *(void *)(v55 - 16);
      unint64_t v57 = *(void *)(v55 - 8);
      swift_bridgeObjectRetain();
      unint64_t v58 = specialized Collection.dropFirst(_:)( 1uLL,  v56,  v57,  (uint64_t (*)(uint64_t, unint64_t, unint64_t, uint64_t, unint64_t))MEMORY[0x189617E38],  MEMORY[0x189618078]);
      uint64_t v60 = v59;
      uint64_t v62 = v61;
      uint64_t v64 = v63;
      swift_bridgeObjectRelease();
      if ((v58 ^ v60) < 0x4000)
      {
        swift_bridgeObjectRelease();
        return v13;
      }

      uint64_t v65 = MEMORY[0x186E16F74](v58, v60, v62, v64);
      uint64_t v67 = v66;
      swift_bridgeObjectRelease();
      uint64_t v1 = v72;
      *unsigned int v72 = v65;
      v1[1] = v67;
      swift_storeEnumTagMultiPayload();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
LABEL_37:
        unint64_t v69 = *(void *)(v13 + 16);
        unint64_t v68 = *(void *)(v13 + 24);
        if (v69 >= v68 >> 1) {
          size_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v68 > 1,  v69 + 1,  1,  (void *)v13,  &demangling cache variable for type metadata for _ContiguousArrayStorage<DSLTree.CustomCharacterClass.Member>,  type metadata accessor for DSLTree.CustomCharacterClass.Member);
        }
        *(void *)(v13 + 16) = v69 + 1;
        outlined init with take of DSLTree.QuantificationKind( (uint64_t)v1,  v13 + ((*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
        + *(void *)(v4 + 72) * v69,
          type metadata accessor for DSLTree.CustomCharacterClass.Member);
        return v13;
      }
    }

    else
    {
LABEL_44:
      __break(1u);
    }

    size_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v13 + 16) + 1LL,  1,  (void *)v13,  &demangling cache variable for type metadata for _ContiguousArrayStorage<DSLTree.CustomCharacterClass.Member>,  type metadata accessor for DSLTree.CustomCharacterClass.Member);
    goto LABEL_37;
  }

  uint64_t v16 = 0LL;
  uint64_t v1 = v74 + 7;
  unint64_t v75 = v8;
  uint64_t v76 = v4;
  uint64_t v80 = v3;
  while (1)
  {
    if (v79 == v16)
    {
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }

    uint64_t v18 = *(v1 - 3);
    unint64_t v17 = *(v1 - 2);
    unint64_t v19 = *v1;
    uint64_t v81 = *(v1 - 1);
    int v82 = (void *)v13;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    if (v16)
    {
      size_t v13 = specialized Collection.dropFirst(_:)( 1uLL,  v18,  v17,  (uint64_t (*)(uint64_t, unint64_t, unint64_t, uint64_t, unint64_t))MEMORY[0x189617E38],  MEMORY[0x189618078]);
      unint64_t v21 = v20;
      swift_bridgeObjectRelease();
      if (__OFSUB__(Substring.distance(from:to:)(), 1LL)) {
        goto LABEL_42;
      }
      uint64_t v22 = Substring.index(_:offsetBy:limitedBy:)();
      if ((v23 & 1) != 0) {
        unint64_t v24 = v21;
      }
      else {
        unint64_t v24 = v22;
      }
      if (v24 >> 14 < v13 >> 14) {
        goto LABEL_43;
      }
      uint64_t v25 = Substring.subscript.getter();
      unint64_t v27 = v26;
      uint64_t v29 = v28;
      uint64_t v31 = v30;
    }

    else
    {
      uint64_t v25 = specialized Collection.dropLast(_:)( 1LL,  v18,  v17,  (uint64_t (*)(uint64_t, unint64_t))MEMORY[0x189617E20],  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))MEMORY[0x189617E38],  (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t))MEMORY[0x189618078]);
      unint64_t v27 = v32;
      uint64_t v29 = v33;
      uint64_t v31 = v34;
    }

    swift_bridgeObjectRelease();
    if ((v25 ^ v27) >= 0x4000)
    {
      uint64_t v36 = MEMORY[0x186E16F74](v25, v27, v29, v31);
      uint64_t v38 = v37;
      swift_bridgeObjectRelease();
      uint64_t v39 = v78;
      *int v78 = v36;
      v39[1] = v38;
      swift_storeEnumTagMultiPayload();
      uint64_t v35 = v82;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v35 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v35[2] + 1LL,  1,  v35,  &demangling cache variable for type metadata for _ContiguousArrayStorage<DSLTree.CustomCharacterClass.Member>,  type metadata accessor for DSLTree.CustomCharacterClass.Member);
      }
      unint64_t v41 = v35[2];
      unint64_t v40 = v35[3];
      uint64_t v4 = v76;
      if (v41 >= v40 >> 1) {
        uint64_t v35 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v40 > 1,  v41 + 1,  1,  v35,  &demangling cache variable for type metadata for _ContiguousArrayStorage<DSLTree.CustomCharacterClass.Member>,  type metadata accessor for DSLTree.CustomCharacterClass.Member);
      }
      v35[2] = v41 + 1;
      outlined init with take of DSLTree.QuantificationKind( (uint64_t)v78,  (uint64_t)v35 + ((*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
      + *(void *)(v4 + 72) * v41,
        type metadata accessor for DSLTree.CustomCharacterClass.Member);
    }

    else
    {
      swift_bridgeObjectRelease();
      uint64_t v4 = v76;
      uint64_t v35 = v82;
    }

    uint64_t v42 = HIBYTE(v17) & 0xF;
    if ((v17 & 0x2000000000000000LL) == 0) {
      uint64_t v42 = v18 & 0xFFFFFFFFFFFFLL;
    }
    if (!v42) {
      break;
    }
    String.index(before:)();
    uint64_t v43 = String.subscript.getter();
    uint64_t v45 = v44;
    swift_bridgeObjectRelease();
    uint64_t v46 = (uint64_t)v75;
    *unint64_t v75 = v43;
    *(void *)(v46 + 8) = v45;
    type metadata accessor for DSLTree.Atom(0LL);
    swift_storeEnumTagMultiPayload();
    uint64_t v47 = HIBYTE(v19) & 0xF;
    if ((v19 & 0x2000000000000000LL) == 0) {
      uint64_t v47 = v81 & 0xFFFFFFFFFFFFLL;
    }
    if (!v47) {
      goto LABEL_47;
    }
    unsigned int v48 = (uint64_t *)(v46
    uint64_t v49 = String.subscript.getter();
    uint64_t v51 = v50;
    swift_bridgeObjectRelease();
    *unsigned int v48 = v49;
    v48[1] = v51;
    swift_storeEnumTagMultiPayload();
    swift_storeEnumTagMultiPayload();
    size_t v13 = (size_t)v35;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      size_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v35[2] + 1LL,  1,  v35,  &demangling cache variable for type metadata for _ContiguousArrayStorage<DSLTree.CustomCharacterClass.Member>,  type metadata accessor for DSLTree.CustomCharacterClass.Member);
    }
    unint64_t v53 = *(void *)(v13 + 16);
    unint64_t v52 = *(void *)(v13 + 24);
    if (v53 >= v52 >> 1) {
      size_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v52 > 1,  v53 + 1,  1,  (void *)v13,  &demangling cache variable for type metadata for _ContiguousArrayStorage<DSLTree.CustomCharacterClass.Member>,  type metadata accessor for DSLTree.CustomCharacterClass.Member);
    }
    ++v16;
    v1 += 2;
    *(void *)(v13 + 16) = v53 + 1;
    outlined init with take of DSLTree.QuantificationKind( v46,  v13 + ((*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
    + *(void *)(v4 + 72) * v53,
      type metadata accessor for DSLTree.CustomCharacterClass.Member);
    if (v77 == v16) {
      goto LABEL_33;
    }
  }

  swift_bridgeObjectRelease();
  __break(1u);
LABEL_47:
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t Compiler.ByteCodeGen.flatteningCustomCharacterClassMembers(_:)(uint64_t a1)
{
  uint64_t v69 = type metadata accessor for DSLTree.Atom(0LL);
  MEMORY[0x1895F8858](v69);
  uint64_t v3 = (Swift::Int *)((char *)&v64 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v70 = type metadata accessor for DSLTree.CustomCharacterClass.Member(0LL);
  uint64_t v4 = MEMORY[0x1895F8858](v70);
  uint64_t v64 = (char *)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = MEMORY[0x1895F8858](v4);
  uint64_t v8 = (char **)((char *)&v64 - v7);
  uint64_t v9 = MEMORY[0x1895F8858](v6);
  uint64_t v11 = (Swift::Int *)((char *)&v64 - v10);
  MEMORY[0x1895F8858](v9);
  unint64_t v14 = (char *)&v64 - v13;
  uint64_t v15 = MEMORY[0x18961AFF8];
  uint64_t v74 = MEMORY[0x18961AFF8];
  uint64_t v75 = MEMORY[0x18961AFF8];
  uint64_t v73 = (void *)MEMORY[0x18961AFE8];
  uint64_t v16 = *(void *)(a1 + 16);
  uint64_t v68 = v12;
  if (v16)
  {
    uint64_t v17 = v16;
    uint64_t v18 = 0LL;
    uint64_t v19 = *(void *)(v12 + 72);
    unint64_t v65 = (*(unsigned __int8 *)(v12 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
    uint64_t v66 = a1 + v65;
    uint64_t v67 = v19;
    unint64_t v20 = (void *)MEMORY[0x18961AFE8];
    uint64_t v21 = v16;
    while (1)
    {
      outlined init with copy of MEProgram( v66 + v67 * v18,  (uint64_t)v14,  type metadata accessor for DSLTree.CustomCharacterClass.Member);
      outlined init with copy of MEProgram( (uint64_t)v14,  (uint64_t)v11,  type metadata accessor for DSLTree.CustomCharacterClass.Member);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 3)
      {
        outlined destroy of MEProgram((uint64_t)v14, type metadata accessor for DSLTree.CustomCharacterClass.Member);
        unint64_t v28 = v11[1];
        uint64_t v29 = HIBYTE(v28) & 0xF;
        if ((v28 & 0x2000000000000000LL) == 0) {
          uint64_t v29 = *v11 & 0xFFFFFFFFFFFFLL;
        }
        v72[0] = *v11;
        v72[1] = v28;
        v72[2] = 0LL;
        v72[3] = v29;
        Swift::String_optional v30 = String.Iterator.next()();
        if (v30.value._object)
        {
          Swift::Int countAndFlagsBits = v30.value._countAndFlagsBits;
          object = v30.value._object;
          do
          {
            specialized Set._Variant.insert(_:)(&v71, countAndFlagsBits, (Swift::Int)object);
            swift_bridgeObjectRelease();
            Swift::String_optional v33 = String.Iterator.next()();
            Swift::Int countAndFlagsBits = v33.value._countAndFlagsBits;
            object = v33.value._object;
          }

          while (v33.value._object);
        }
      }

      else
      {
        if (EnumCaseMultiPayload)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v20 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v20[2] + 1LL,  1,  v20,  &demangling cache variable for type metadata for _ContiguousArrayStorage<DSLTree.CustomCharacterClass.Member>,  type metadata accessor for DSLTree.CustomCharacterClass.Member);
          }
          unint64_t v35 = v20[2];
          unint64_t v34 = v20[3];
          if (v35 >= v34 >> 1) {
            unint64_t v20 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v34 > 1,  v35 + 1,  1,  v20,  &demangling cache variable for type metadata for _ContiguousArrayStorage<DSLTree.CustomCharacterClass.Member>,  type metadata accessor for DSLTree.CustomCharacterClass.Member);
          }
          void v20[2] = v35 + 1;
          outlined init with take of DSLTree.QuantificationKind( (uint64_t)v14,  (uint64_t)v20 + v65 + v35 * v67,  type metadata accessor for DSLTree.CustomCharacterClass.Member);
          uint64_t v73 = v20;
          uint64_t v26 = (uint64_t)v11;
          unint64_t v27 = type metadata accessor for DSLTree.CustomCharacterClass.Member;
          goto LABEL_26;
        }

        outlined init with take of DSLTree.QuantificationKind( (uint64_t)v11,  (uint64_t)v3,  type metadata accessor for DSLTree.Atom);
        int v23 = swift_getEnumCaseMultiPayload();
        if (v23 == 1)
        {
          outlined destroy of MEProgram((uint64_t)v14, type metadata accessor for DSLTree.CustomCharacterClass.Member);
          specialized Set._Variant.insert(_:)(v72, *(unsigned int *)v3);
          goto LABEL_5;
        }

        if (v23)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v20 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v20[2] + 1LL,  1,  v20,  &demangling cache variable for type metadata for _ContiguousArrayStorage<DSLTree.CustomCharacterClass.Member>,  type metadata accessor for DSLTree.CustomCharacterClass.Member);
          }
          unint64_t v25 = v20[2];
          unint64_t v24 = v20[3];
          if (v25 >= v24 >> 1) {
            unint64_t v20 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v24 > 1,  v25 + 1,  1,  v20,  &demangling cache variable for type metadata for _ContiguousArrayStorage<DSLTree.CustomCharacterClass.Member>,  type metadata accessor for DSLTree.CustomCharacterClass.Member);
          }
          void v20[2] = v25 + 1;
          outlined init with take of DSLTree.QuantificationKind( (uint64_t)v14,  (uint64_t)v20 + v65 + v25 * v67,  type metadata accessor for DSLTree.CustomCharacterClass.Member);
          uint64_t v73 = v20;
          uint64_t v26 = (uint64_t)v3;
          unint64_t v27 = type metadata accessor for DSLTree.Atom;
LABEL_26:
          outlined destroy of MEProgram(v26, v27);
          uint64_t v21 = v17;
          goto LABEL_5;
        }

        outlined destroy of MEProgram((uint64_t)v14, type metadata accessor for DSLTree.CustomCharacterClass.Member);
        specialized Set._Variant.insert(_:)(v72, *v3, v3[1]);
      }

      swift_bridgeObjectRelease();
LABEL_5:
      if (++v18 == v21)
      {
        uint64_t v15 = v75;
        break;
      }
    }
  }

  int64_t v36 = *(void *)(v15 + 16);
  Swift::Int v37 = MEMORY[0x18961AFE8];
  if (v36)
  {
    v72[0] = MEMORY[0x18961AFE8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0LL, v36, 0);
    size_t v38 = v72[0];
    uint64_t result = specialized _NativeSet.startIndex.getter(v15);
    int64_t v40 = result;
    LODWORD(v42) = v41;
    char v44 = v43 & 1;
    uint64_t v67 = v15 + 56;
    while ((v44 & 1) == 0)
    {
      if (v40 < 0 || v40 >= 1LL << *(_BYTE *)(v15 + 32))
      {
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
        break;
      }

      if (*(_DWORD *)(v15 + 36) != (_DWORD)v42) {
        goto LABEL_56;
      }
      uint64_t v45 = (void *)(*(void *)(v15 + 48) + 16 * v40);
      uint64_t v46 = v45[1];
      *uint64_t v8 = *v45;
      v8[1] = v46;
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
      v72[0] = v38;
      unint64_t v47 = *(void *)(v38 + 16);
      unint64_t v48 = *(void *)(v38 + 24);
      swift_bridgeObjectRetain();
      if (v47 >= v48 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v48 > 1, v47 + 1, 1);
        size_t v38 = v72[0];
      }

      *(void *)(v38 + 16) = v47 + 1;
      outlined init with take of DSLTree.QuantificationKind( (uint64_t)v8,  v38 + ((*(unsigned __int8 *)(v68 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v68 + 80))
      + *(void *)(v68 + 72) * v47,
        type metadata accessor for DSLTree.CustomCharacterClass.Member);
      uint64_t result = specialized _NativeSet.index(after:)(v40, v42, 0, v15);
      int64_t v40 = result;
      uint64_t v42 = v49;
      char v44 = v50 & 1;
      if (!--v36)
      {
        swift_bridgeObjectRelease();
        outlined consume of Set<Character>.Index._Variant(v40, v42, v44);
        Swift::Int v37 = MEMORY[0x18961AFE8];
        goto LABEL_41;
      }
    }

    __break(1u);
    goto LABEL_61;
  }

  size_t v38 = MEMORY[0x18961AFE8];
LABEL_41:
  specialized Array.append<A>(contentsOf:)(v38);
  uint64_t v51 = v74;
  int64_t v52 = *(void *)(v74 + 16);
  if (v52)
  {
    v72[0] = v37;
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0LL, v52, 0);
    size_t v53 = v72[0];
    uint64_t result = specialized _NativeSet.startIndex.getter(v51);
    int64_t v54 = result;
    int v56 = v55;
    char v58 = v57 & 1;
    uint64_t v59 = v64;
    while ((v58 & 1) == 0)
    {
      if (v54 < 0 || v54 >= 1LL << *(_BYTE *)(v51 + 32)) {
        goto LABEL_57;
      }
      if (*(_DWORD *)(v51 + 36) != v56) {
        goto LABEL_59;
      }
      *uint64_t v59 = *(_DWORD *)(*(void *)(v51 + 48) + 4 * v54);
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
      v72[0] = v53;
      unint64_t v61 = *(void *)(v53 + 16);
      unint64_t v60 = *(void *)(v53 + 24);
      if (v61 >= v60 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v60 > 1, v61 + 1, 1);
        uint64_t v59 = v64;
        size_t v53 = v72[0];
      }

      *(void *)(v53 + 16) = v61 + 1;
      outlined init with take of DSLTree.QuantificationKind( (uint64_t)v59,  v53 + ((*(unsigned __int8 *)(v68 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v68 + 80))
      + *(void *)(v68 + 72) * v61,
        type metadata accessor for DSLTree.CustomCharacterClass.Member);
      uint64_t result = specialized _NativeSet.index(after:)(v54, v56, 0, v51);
      int64_t v54 = result;
      int v56 = v62;
      char v58 = v63 & 1;
      if (!--v52)
      {
        outlined consume of Set<Character>.Index._Variant(result, v62, v58);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        goto LABEL_53;
      }
    }

LABEL_61:
    __break(1u);
    return result;
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  size_t v53 = MEMORY[0x18961AFE8];
LABEL_53:
  specialized Array.append<A>(contentsOf:)(v53);
  return (uint64_t)v73;
}

size_t specialized Array.append<A>(contentsOf:)(size_t result)
{
  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16LL);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  size_t v6 = result;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v5 <= v3[3] >> 1)
  {
    if (*(void *)(v6 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }

  if (v4 <= v5) {
    int64_t v11 = v4 + v2;
  }
  else {
    int64_t v11 = v4;
  }
  uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( result,  v11,  1,  v3,  &demangling cache variable for type metadata for _ContiguousArrayStorage<DSLTree.CustomCharacterClass.Member>,  type metadata accessor for DSLTree.CustomCharacterClass.Member);
  uint64_t v3 = (void *)result;
  if (!*(void *)(v6 + 16))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v6 = result;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(v6 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }

  if (v4 <= v5) {
    int64_t v10 = v4 + v2;
  }
  else {
    int64_t v10 = v4;
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)result,  v10,  1,  (char *)v3);
  uint64_t v3 = result;
  if (!*(void *)(v6 + 16))
  {
LABEL_13:
    uint64_t result = swift_bridgeObjectRelease();
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }

_StringProcessing::DSLTree::CustomCharacterClass __swiftcall DSLTree.CustomCharacterClass.init(members:isInverted:)( Swift::OpaquePointer members, Swift::Bool isInverted)
{
  *(Swift::OpaquePointer *)uint64_t v2 = members;
  *(_BYTE *)(v2 + 8) = isInverted;
  result.members = members;
  result.isInverted = isInverted;
  return result;
}

uint64_t Compiler.ByteCodeGen.emitCharacterInCCC(_:)(unint64_t a1, unint64_t a2)
{
  uint64_t v8 = *(void *)(*(void *)v3 + 16LL);
  if (!v8) {
    goto LABEL_40;
  }
  unint64_t v5 = a2;
  unint64_t v7 = a1;
  if ((*(_DWORD *)(*(void *)v3 + 4 * v8 + 28) & 0x10000) != 0) {
    return Compiler.ByteCodeGen.emitCharacter(_:)(a1, a2);
  }
  uint64_t v2 = (char **)(v43 + *(int *)(type metadata accessor for Compiler.ByteCodeGen(0LL) + 20));
  uint64_t v6 = v2[10];
  unint64_t v4 = *((void *)v6 + 2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_41;
  }
  while (1)
  {
    unint64_t v10 = *((void *)v6 + 2);
    unint64_t v9 = *((void *)v6 + 3);
    if (v10 >= v9 >> 1) {
      uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v9 > 1),  v10 + 1,  1,  v6);
    }
    *((void *)v6 + 2) = v10 + 1;
    int64_t v11 = &v6[16 * v10];
    *((void *)v11 + 4) = 0LL;
    v11[40] = 1;
    v2[10] = v6;
    swift_bridgeObjectRetain();
    unint64_t v39 = v7;
    uint64_t v12 = specialized Collection.dropLast(_:)( 1LL,  v7,  v5,  (uint64_t (*)(uint64_t, unint64_t))specialized Collection.count.getter,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))String.UnicodeScalarView.index(_:offsetBy:limitedBy:),  MEMORY[0x189617D68]);
    unint64_t v14 = v13;
    unint64_t v16 = v15;
    unint64_t v7 = v17;
    unint64_t v40 = v5;
    swift_bridgeObjectRelease();
    unint64_t v42 = v12;
    if ((v12 ^ v14) < 0x4000) {
      break;
    }
    uint64_t v21 = (v7 & 0xFFFFFFFFFFFFFFFLL) + 32;
    unint64_t v22 = v12;
    uint64_t v41 = v4;
    while (1)
    {
      _StringGuts.validateScalarIndex(_:in:)(v22, v42, v14, v16, v7);
      if ((v7 & 0x1000000000000000LL) != 0)
      {
        uint64_t v23 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
        _StringGuts.validateScalarIndex(_:)(v22, v16, v7);
        unint64_t v22 = String.UnicodeScalarView._foreignIndex(after:)();
      }

      else
      {
        if ((v7 & 0x2000000000000000LL) != 0)
        {
          unint64_t v44 = v16;
          uint64_t v45 = v7 & 0xFFFFFFFFFFFFFFLL;
          uint64_t v23 = _decodeScalar(_:startingAt:)();
          unint64_t v26 = _StringGuts.validateScalarIndex(_:)(v22, v16, v7) >> 16;
          unint64_t v44 = v16;
          uint64_t v45 = v7 & 0xFFFFFFFFFFFFFFLL;
          int v27 = *((unsigned __int8 *)&v44 + v26);
        }

        else
        {
          if ((v16 & 0x1000000000000000LL) == 0) {
            _StringObject.sharedUTF8.getter();
          }
          uint64_t v23 = _decodeScalar(_:startingAt:)();
          unint64_t v24 = _StringGuts.validateScalarIndex(_:)(v22, v16, v7);
          uint64_t v25 = v21;
          if ((v16 & 0x1000000000000000LL) == 0) {
            uint64_t v25 = _StringObject.sharedUTF8.getter();
          }
          unint64_t v26 = v24 >> 16;
          int v27 = *(unsigned __int8 *)(v25 + (v24 >> 16));
        }

        int v28 = (char)v27;
        unsigned int v29 = __clz(v27 ^ 0xFF) - 24;
        if (v28 >= 0) {
          LOBYTE(v29) = 1;
        }
        unint64_t v22 = ((v26 + v29) << 16) | 5;
      }

      Swift::String_optional v30 = v2[10];
      unint64_t v31 = *((void *)v30 + 2);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        Swift::String_optional v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v31 + 1,  1,  v30);
      }
      unint64_t v33 = *((void *)v30 + 2);
      unint64_t v32 = *((void *)v30 + 3);
      if (v33 >= v32 >> 1) {
        Swift::String_optional v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v32 > 1),  v33 + 1,  1,  v30);
      }
      *((void *)v30 + 2) = v33 + 1;
      unint64_t v34 = &v30[16 * v33];
      *((void *)v34 + 4) = 0LL;
      v34[40] = 1;
      v2[10] = v30;
      MEProgram.Builder.buildSave(_:)(v31);
      Compiler.ByteCodeGen.emitMatchScalar(_:)(v23);
      unint64_t v35 = *v2;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v35 + 2) + 1LL,  1,  v35,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
      }
      unint64_t v5 = *((void *)v35 + 2);
      unint64_t v36 = *((void *)v35 + 3);
      if (v5 >= v36 >> 1) {
        unint64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v36 > 1),  v5 + 1,  1,  v35,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
      }
      *((void *)v35 + 2) = v5 + 1;
      *(void *)&v35[8 * v5 + 32] = 0x1200000000000000LL;
      *uint64_t v2 = v35;
      unint64_t v4 = v41;
      MEProgram.Builder.buildBranch(to:)(v41);
      uint64_t v37 = *((void *)*v2 + 2);
      uint64_t v6 = v2[10];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v6);
      }
      if (v31 >= *((void *)v6 + 2)) {
        break;
      }
      size_t v38 = &v6[16 * v31];
      *((void *)v38 + 4) = v37;
      v38[40] = 0;
      v2[10] = v6;
      uint64_t v21 = (v7 & 0xFFFFFFFFFFFFFFFLL) + 32;
      if ((v22 ^ v14) < 0x4000) {
        goto LABEL_7;
      }
    }

    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v4 + 1,  1,  v6);
  }

void Compiler.ByteCodeGen.emitCCCMember(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DSLTree.Atom(0LL);
  uint64_t v3 = MEMORY[0x1895F8858](v2);
  MEMORY[0x1895F8858](v3);
  uint64_t v4 = type metadata accessor for DSLTree.CustomCharacterClass.Member(0LL);
  MEMORY[0x1895F8858](v4);
  outlined init with copy of MEProgram(a1, (uint64_t)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL), v6);
  unint64_t v7 = (char *)&loc_182D401F4 + *((int *)qword_182D41188 + swift_getEnumCaseMultiPayload());
  __asm { BR              X10 }

uint64_t sub_182D40204()
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    outlined destroy of MEProgram(v2, type metadata accessor for DSLTree.Atom);
    unsigned int v7 = *(_DWORD *)v0;
    if (*(_DWORD *)v0 > 0x7Fu)
    {
      int v10 = (*(_DWORD *)v0 & 0x3F) << 8;
      if (v7 >= 0x800)
      {
        unsigned int v11 = v7 >> 12;
        int v12 = (v10 | (v7 >> 6) & 0x3F) << 8;
        unsigned int v13 = HIWORD(v7);
        unsigned int v8 = (((v12 | (v7 >> 12) & 0x3F) << 8) | (v7 >> 18)) - 2122219023;
        int v14 = (v12 | v11) + 8487393;
        if (!v13) {
          unsigned int v8 = v14;
        }
      }

      else
      {
        unsigned int v8 = (v10 | (v7 >> 6)) + 33217;
      }
    }

    else
    {
      unsigned int v8 = v7 + 1;
    }

    *(void *)(v3 - 96) = (v8 + 0xFEFEFEFEFEFEFFLL) & ~(-1LL << (8 * (4 - (__clz(v8) >> 3))));
    unint64_t v5 = MEMORY[0x186E16FB0](v3 - 96);
    goto LABEL_7;
  }

  if (!EnumCaseMultiPayload)
  {
    outlined destroy of MEProgram(v2, type metadata accessor for DSLTree.Atom);
    unint64_t v5 = *(void *)v0;
    unint64_t v6 = *(void *)(v0 + 8);
LABEL_7:
    Compiler.ByteCodeGen.emitCharacterInCCC(_:)(v5, v6);
    return swift_bridgeObjectRelease();
  }

  Compiler.ByteCodeGen.emitAtom(_:)(v2);
  outlined destroy of MEProgram(v2, type metadata accessor for DSLTree.Atom);
  return outlined destroy of MEProgram(v0, type metadata accessor for DSLTree.Atom);
}

void sub_182D41134()
{
}

uint64_t Compiler.ByteCodeGen.emitCustomCharacterClass(_:)(uint64_t a1)
{
  uint64_t v4 = type metadata accessor for DSLTree.CustomCharacterClass.Member(0LL);
  uint64_t v179 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x1895F8858](v4);
  uint64_t v6 = MEMORY[0x1895F8858](v5);
  uint64_t v8 = (uint64_t)&v142 - v7;
  uint64_t v9 = MEMORY[0x1895F8858](v6);
  unsigned int v11 = (char *)&v142 - v10;
  uint64_t v12 = MEMORY[0x1895F8858](v9);
  uint64_t v180 = (uint64_t)&v142 - v13;
  uint64_t v14 = MEMORY[0x1895F8858](v12);
  uint64_t v146 = (char *)&v142 - v15;
  uint64_t v16 = MEMORY[0x1895F8858](v14);
  uint64_t v156 = (uint64_t)&v142 - v17;
  uint64_t v18 = MEMORY[0x1895F8858](v16);
  unint64_t v20 = (char *)&v142 - v19;
  uint64_t v21 = MEMORY[0x1895F8858](v18);
  uint64_t v153 = (uint64_t)&v142 - v22;
  uint64_t v23 = MEMORY[0x1895F8858](v21);
  uint64_t v163 = (char *)&v142 - v24;
  uint64_t v25 = MEMORY[0x1895F8858](v23);
  uint64_t v154 = (uint64_t)&v142 - v26;
  uint64_t v27 = MEMORY[0x1895F8858](v25);
  uint64_t v162 = (char *)&v142 - v28;
  uint64_t v29 = MEMORY[0x1895F8858](v27);
  uint64_t v157 = (uint64_t)&v142 - v30;
  uint64_t v31 = MEMORY[0x1895F8858](v29);
  unint64_t v177 = (unint64_t)&v142 - v32;
  uint64_t v33 = MEMORY[0x1895F8858](v31);
  uint64_t v176 = (uint64_t)&v142 - v34;
  MEMORY[0x1895F8858](v33);
  uint64_t v37 = (uint64_t)&v142 - v36;
  uint64_t v150 = (_StringProcessing::MatchingOptions *)v1;
  uint64_t v38 = *(void *)v1;
  uint64_t v39 = *(void *)(*(void *)v1 + 16LL);
  if (!v39) {
    goto LABEL_154;
  }
  uint64_t v144 = v35;
  unint64_t v2 = *(void *)a1;
  uint64_t v174 = *(unsigned __int8 *)(a1 + 8);
  if ((*(_DWORD *)(v38 + 4 * v39 + 28) & 0x10000) != 0)
  {
    uint64_t v1 = (uint64_t)v150;
    unint64_t v2 = (unint64_t)Compiler.ByteCodeGen.coalescingCustomCharacterClassMembers(_:)(v2);
  }

  else
  {
    swift_bridgeObjectRetain();
  }

  uint64_t v147 = v20;
  uint64_t v148 = v11;
  uint64_t v149 = v4;
  uint64_t v151 = v8;
  uint64_t v40 = Compiler.ByteCodeGen.flatteningCustomCharacterClassMembers(_:)(v2);
  swift_bridgeObjectRelease();
  uint64_t v41 = *(void *)(v40 + 16);
  if (v41)
  {
    uint64_t v175 = v38;
    uint64_t v185 = 0LL;
    unint64_t v178 = 0LL;
    unint64_t v42 = 0LL;
    uint64_t v8 = v174;
    unint64_t v2 = (unint64_t)type metadata accessor for DSLTree.CustomCharacterClass.Member;
    do
    {
      if (v42 >= *(void *)(v40 + 16)) {
        goto LABEL_145;
      }
      uint64_t v43 = v40;
      outlined init with copy of MEProgram( v40 + ((*(unsigned __int8 *)(v179 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v179 + 80))
      + *(void *)(v179 + 72) * v42,
        v37,
        type metadata accessor for DSLTree.CustomCharacterClass.Member);
      uint64_t v1 = DSLTree.CustomCharacterClass.Member.asAsciiBitset(_:_:)(v175, v174);
      unint64_t v45 = v44;
      uint64_t v47 = v46;
      outlined destroy of MEProgram(v37, type metadata accessor for DSLTree.CustomCharacterClass.Member);
      if (v1 == 2LL)
      {
        unint64_t v178 = v45;
        uint64_t v185 = v47;
      }

      else if (v8 == 2LL)
      {
        uint64_t v1 = v8;
      }

      else
      {
        uint64_t v1 = v8 & 1;
        v178 |= v45;
        v185 |= v47;
      }

      ++v42;
      uint64_t v8 = v1;
      uint64_t v40 = v43;
    }

    while (v41 != v42);
  }

  else
  {
    unint64_t v178 = 0LL;
    uint64_t v185 = 0LL;
    uint64_t v1 = v174;
  }

  if (v1 != 2LL)
  {
    uint64_t v48 = type metadata accessor for Compiler.ByteCodeGen(0LL);
    if ((*((_BYTE *)&v150->stack._rawValue + *(int *)(v48 + 28)) & 1) == 0)
    {
      uint64_t v49 = v48;
      swift_bridgeObjectRelease();
      uint64_t v50 = *((void *)v150->stack._rawValue + 2);
      if (v50)
      {
        char v51 = v1 & 1;
        int v52 = *((_DWORD *)v150->stack._rawValue + v50 + 7);
        uint64_t v8 = (uint64_t)v150 + *(int *)(v49 + 20);
        size_t v53 = *(char **)(v8 + 48);
        unint64_t v2 = *((void *)v53 + 2);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        if ((v52 & 0x10000) != 0)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            size_t v53 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v2 + 1,  1,  v53);
          }
          unint64_t v136 = *((void *)v53 + 2);
          unint64_t v135 = *((void *)v53 + 3);
          if (v136 >= v135 >> 1) {
            size_t v53 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v135 > 1),  v136 + 1,  1,  v53);
          }
          *((void *)v53 + 2) = v136 + 1;
          uint64_t v137 = &v53[24 * v136];
          v137[32] = v51;
          uint64_t v138 = v185;
          *((void *)v137 + 5) = v178;
          *((void *)v137 + 6) = v138;
          *(void *)(v8 + 48) = v53;
          uint64_t v1 = 0xA00000000000000LL;
        }

        else
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            size_t v53 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v2 + 1,  1,  v53);
          }
          unint64_t v56 = *((void *)v53 + 2);
          unint64_t v55 = *((void *)v53 + 3);
          if (v56 >= v55 >> 1) {
            size_t v53 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v55 > 1),  v56 + 1,  1,  v53);
          }
          *((void *)v53 + 2) = v56 + 1;
          char v57 = &v53[24 * v56];
          v57[32] = v51;
          uint64_t v58 = v185;
          *((void *)v57 + 5) = v178;
          *((void *)v57 + 6) = v58;
          *(void *)(v8 + 48) = v53;
          uint64_t v1 = 0xA00000000000001LL;
        }

        uint64_t v49 = *(void *)v8;
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) != 0) {
          goto LABEL_135;
        }
      }

      else
      {
        __break(1u);
      }

      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v49 + 16) + 1LL,  1,  (char *)v49,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
      uint64_t v49 = result;
LABEL_135:
      unint64_t v139 = v1 | (v2 << 16);
      unint64_t v141 = *(void *)(v49 + 16);
      unint64_t v140 = *(void *)(v49 + 24);
      if (v141 >= v140 >> 1)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v140 > 1),  v141 + 1,  1,  (char *)v49,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
        uint64_t v49 = result;
      }

      *(void *)(v49 + 16) = v141 + 1;
      *(void *)(v49 + 8 * v141 + 32) = v139;
      *(void *)uint64_t v8 = v49;
      return result;
    }
  }

  uint64_t v59 = type metadata accessor for Compiler.ByteCodeGen(0LL);
  uint64_t v60 = (uint64_t)v150;
  char v61 = *((_BYTE *)&v150->stack._rawValue + *(int *)(v59 + 28));
  uint64_t v143 = v59;
  if ((v61 & 1) == 0)
  {
    uint64_t v181 = v40;
    char v182 = v174;
    DSLTree.CustomCharacterClass.coalescingASCIIMembers(_:)((_StringProcessing::MatchingOptions)v150->stack._rawValue);
    swift_bridgeObjectRelease();
    uint64_t v40 = v183;
    uint64_t v174 = v184;
  }

  unint64_t v2 = (unint64_t)v148;
  uint64_t v62 = (uint64_t)v147;
  uint64_t v63 = (uint64_t)v163;
  uint64_t v64 = (uint64_t)v162;
  uint64_t v1 = MEMORY[0x18961AFE8];
  uint64_t v183 = MEMORY[0x18961AFE8];
  uint64_t v65 = *(void *)(v40 + 16);
  swift_bridgeObjectRetain();
  uint64_t v172 = v65;
  if (v65)
  {
    unint64_t v66 = 0LL;
    uint64_t v37 = (uint64_t)v146;
    uint64_t v145 = v40;
LABEL_32:
    if (v66 >= *(void *)(v40 + 16)) {
      goto LABEL_146;
    }
    uint64_t v67 = *(void *)(v179 + 72);
    unint64_t v178 = (*(unsigned __int8 *)(v179 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v179 + 80);
    uint64_t v175 = v66;
    uint64_t v185 = v67;
    uint64_t v68 = v176;
    outlined init with copy of MEProgram( v40 + v178 + v67 * v66,  v176,  type metadata accessor for DSLTree.CustomCharacterClass.Member);
    uint64_t v69 = v68;
    uint64_t v1 = v177;
    outlined init with copy of MEProgram(v69, v177, type metadata accessor for DSLTree.CustomCharacterClass.Member);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 4)
    {
      uint64_t v1 = (uint64_t)type metadata accessor for DSLTree.CustomCharacterClass.Member;
      outlined destroy of MEProgram(v177, type metadata accessor for DSLTree.CustomCharacterClass.Member);
LABEL_30:
      outlined destroy of MEProgram(v176, type metadata accessor for DSLTree.CustomCharacterClass.Member);
      goto LABEL_31;
    }

    if (EnumCaseMultiPayload != 2)
    {
      outlined destroy of MEProgram(v177, type metadata accessor for DSLTree.CustomCharacterClass.Member);
      goto LABEL_74;
    }

    uint64_t v71 = *(void *)v177;
    uint64_t v164 = *(void *)(*(void *)v177 + 16LL);
    if (!v164)
    {
LABEL_72:
      swift_bridgeObjectRelease();
      uint64_t v1 = (uint64_t)type metadata accessor for DSLTree.CustomCharacterClass.Member;
      goto LABEL_30;
    }

    unint64_t v72 = 0LL;
    uint64_t v169 = v71;
    uint64_t v170 = v71 + v178;
    while (1)
    {
      if (v72 >= *(void *)(v71 + 16)) {
        goto LABEL_147;
      }
      unint64_t v173 = v72;
      uint64_t v1 = v157;
      outlined init with copy of MEProgram( v170 + v72 * v185,  v157,  type metadata accessor for DSLTree.CustomCharacterClass.Member);
      outlined init with take of DSLTree.QuantificationKind( v1,  v64,  type metadata accessor for DSLTree.CustomCharacterClass.Member);
      int v73 = swift_getEnumCaseMultiPayload();
      if (v73 != 2)
      {
        if (v73 != 4)
        {
          outlined destroy of MEProgram(v64, type metadata accessor for DSLTree.CustomCharacterClass.Member);
          swift_bridgeObjectRelease();
          goto LABEL_74;
        }

        outlined destroy of MEProgram(v64, type metadata accessor for DSLTree.CustomCharacterClass.Member);
        goto LABEL_71;
      }

      uint64_t v74 = *(void *)v64;
      uint64_t v158 = *(void *)(*(void *)v64 + 16LL);
      if (v158) {
        break;
      }
LABEL_70:
      swift_bridgeObjectRelease();
LABEL_71:
      unint64_t v72 = v173 + 1;
      uint64_t v71 = v169;
      if (v173 + 1 == v164) {
        goto LABEL_72;
      }
    }

    unint64_t v75 = 0LL;
    uint64_t v165 = v74;
    uint64_t v166 = v74 + v178;
    while (1)
    {
      if (v75 >= *(void *)(v74 + 16)) {
        goto LABEL_149;
      }
      unint64_t v171 = v75;
      uint64_t v1 = v154;
      outlined init with copy of MEProgram( v166 + v75 * v185,  v154,  type metadata accessor for DSLTree.CustomCharacterClass.Member);
      outlined init with take of DSLTree.QuantificationKind( v1,  v63,  type metadata accessor for DSLTree.CustomCharacterClass.Member);
      int v76 = swift_getEnumCaseMultiPayload();
      if (v76 == 4)
      {
        outlined destroy of MEProgram(v63, type metadata accessor for DSLTree.CustomCharacterClass.Member);
      }

      else
      {
        if (v76 != 2)
        {
          outlined destroy of MEProgram(v63, type metadata accessor for DSLTree.CustomCharacterClass.Member);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_74;
        }

        uint64_t v77 = *(void *)v63;
        uint64_t v155 = *(void *)(*(void *)v63 + 16LL);
        if (v155)
        {
          unint64_t v78 = 0LL;
          uint64_t v161 = v77 + v178;
          uint64_t v160 = v77;
          do
          {
            if (v78 >= *(void *)(v77 + 16)) {
              goto LABEL_150;
            }
            uint64_t v1 = v153;
            outlined init with copy of MEProgram( v161 + v78 * v185,  v153,  type metadata accessor for DSLTree.CustomCharacterClass.Member);
            outlined init with take of DSLTree.QuantificationKind( v1,  v62,  type metadata accessor for DSLTree.CustomCharacterClass.Member);
            int v79 = swift_getEnumCaseMultiPayload();
            if (v79 == 4)
            {
              outlined destroy of MEProgram(v62, type metadata accessor for DSLTree.CustomCharacterClass.Member);
            }

            else
            {
              if (v79 != 2)
              {
                outlined destroy of MEProgram(v62, type metadata accessor for DSLTree.CustomCharacterClass.Member);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
LABEL_83:
                swift_bridgeObjectRelease();
                uint64_t v40 = v145;
LABEL_74:
                outlined init with take of DSLTree.QuantificationKind( v176,  v2,  type metadata accessor for DSLTree.CustomCharacterClass.Member);
                uint64_t v1 = v183;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                {
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v1 + 16) + 1LL,  1);
                  uint64_t v1 = v183;
                }

                unint64_t v89 = *(void *)(v1 + 16);
                unint64_t v88 = *(void *)(v1 + 24);
                if (v89 >= v88 >> 1)
                {
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v88 > 1,  v89 + 1,  1);
                  uint64_t v1 = v183;
                }

                *(void *)(v1 + 16) = v89 + 1;
                outlined init with take of DSLTree.QuantificationKind( v2,  v1 + v178 + v89 * v185,  type metadata accessor for DSLTree.CustomCharacterClass.Member);
                uint64_t v63 = (uint64_t)v163;
                uint64_t v64 = (uint64_t)v162;
LABEL_31:
                unint64_t v66 = v175 + 1;
                if (v175 + 1 == v172)
                {
                  uint64_t v1 = v183;
                  uint64_t v60 = (uint64_t)v150;
                  goto LABEL_85;
                }

                goto LABEL_32;
              }

              uint64_t v80 = *(void *)v62;
              uint64_t v159 = *(void *)(*(void *)v62 + 16LL);
              if (v159)
              {
                unint64_t v81 = 0LL;
                uint64_t v167 = v80;
                uint64_t v168 = v80 + v178;
                do
                {
                  if (v81 >= *(void *)(v80 + 16)) {
                    goto LABEL_148;
                  }
                  uint64_t v1 = v156;
                  outlined init with copy of MEProgram( v168 + v81 * v185,  v156,  type metadata accessor for DSLTree.CustomCharacterClass.Member);
                  outlined init with take of DSLTree.QuantificationKind( v1,  v37,  type metadata accessor for DSLTree.CustomCharacterClass.Member);
                  int v82 = swift_getEnumCaseMultiPayload();
                  if (v82 == 4)
                  {
                    outlined destroy of MEProgram(v37, type metadata accessor for DSLTree.CustomCharacterClass.Member);
                  }

                  else
                  {
                    if (v82 != 2)
                    {
                      outlined destroy of MEProgram(v37, type metadata accessor for DSLTree.CustomCharacterClass.Member);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      goto LABEL_83;
                    }

                    unint64_t v83 = 0LL;
                    uint64_t v84 = *(void *)v37;
                    uint64_t v85 = *(void *)(*(void *)v37 + 16LL);
                    uint64_t v86 = *(void *)v37 + v178;
                    while (v85 != v83)
                    {
                      if (v83 >= *(void *)(v84 + 16))
                      {
                        __break(1u);
LABEL_145:
                        __break(1u);
LABEL_146:
                        __break(1u);
LABEL_147:
                        __break(1u);
LABEL_148:
                        __break(1u);
LABEL_149:
                        __break(1u);
LABEL_150:
                        __break(1u);
LABEL_151:
                        __break(1u);
                        goto LABEL_152;
                      }

                      ++v83;
                      uint64_t v87 = v86 + v185;
                      uint64_t v1 = v180;
                      unint64_t v2 = (unint64_t)type metadata accessor for DSLTree.CustomCharacterClass.Member;
                      outlined init with copy of MEProgram( v86,  v180,  type metadata accessor for DSLTree.CustomCharacterClass.Member);
                      uint64_t v37 = DSLTree.CustomCharacterClass.Member.isOnlyTrivia.getter();
                      outlined destroy of MEProgram(v1, type metadata accessor for DSLTree.CustomCharacterClass.Member);
                      uint64_t v86 = v87;
                      if ((v37 & 1) == 0)
                      {
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        unint64_t v2 = (unint64_t)v148;
                        uint64_t v37 = (uint64_t)v146;
                        uint64_t v62 = (uint64_t)v147;
                        uint64_t v40 = v145;
                        goto LABEL_74;
                      }
                    }

                    swift_bridgeObjectRelease();
                    unint64_t v2 = (unint64_t)v148;
                    uint64_t v37 = (uint64_t)v146;
                    uint64_t v62 = (uint64_t)v147;
                  }

                  ++v81;
                  uint64_t v80 = v167;
                }

                while (v81 != v159);
              }

              swift_bridgeObjectRelease();
              uint64_t v63 = (uint64_t)v163;
              uint64_t v64 = (uint64_t)v162;
            }

            ++v78;
            uint64_t v77 = v160;
          }

          while (v78 != v155);
        }

        swift_bridgeObjectRelease();
        uint64_t v40 = v145;
      }

      unint64_t v75 = v171 + 1;
      uint64_t v74 = v165;
      if (v171 + 1 == v158) {
        goto LABEL_70;
      }
    }
  }

LABEL_152:
    __break(1u);
LABEL_153:
    __break(1u);
LABEL_154:
    __break(1u);
LABEL_155:
    uint64_t v1 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v2 + 1,  1,  (char *)v1);
  }

LABEL_90:
  swift_unknownObjectRelease();
  unint64_t v98 = v177;
  MEProgram.Builder.buildSave(_:)(v177);
  uint64_t v99 = *(void *)(v180 + 16);
  if (!v99)
  {
    uint64_t result = swift_release();
    __break(1u);
    return result;
  }

  uint64_t v100 = v144;
  outlined init with copy of MEProgram( v180 + ((*(unsigned __int8 *)(v179 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v179 + 80))
  + *(void *)(v179 + 72) * (v99 - 1),
    v144,
    type metadata accessor for DSLTree.CustomCharacterClass.Member);
  swift_release();
  uint64_t v101 = v152;
  Compiler.ByteCodeGen.emitCCCMember(_:)(v100);
  uint64_t result = outlined destroy of MEProgram(v100, type metadata accessor for DSLTree.CustomCharacterClass.Member);
  if (!v101)
  {
    uint64_t v103 = *(char **)v37;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v103 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v103 + 2) + 1LL,  1,  v103,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
    }
    unint64_t v105 = *((void *)v103 + 2);
    unint64_t v104 = *((void *)v103 + 3);
    if (v105 >= v104 >> 1) {
      uint64_t v103 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v104 > 1),  v105 + 1,  1,  v103,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
    }
    *((void *)v103 + 2) = v105 + 1;
    *(void *)&v103[8 * v105 + 32] = 0x1200000000000000LL;
    *(void *)uint64_t v37 = v103;
    unint64_t v107 = *((void *)v103 + 2);
    unint64_t v106 = *((void *)v103 + 3);
    if (v107 >= v106 >> 1) {
      uint64_t v103 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v106 > 1),  v107 + 1,  1,  v103,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
    }
    *((void *)v103 + 2) = v107 + 1;
    *(void *)&v103[8 * v107 + 32] = 0x1C00000000000000LL;
    *(void *)uint64_t v37 = v103;
    int64_t v108 = *((void *)v103 + 2);
    unint64_t v109 = *(void *)(v37 + 80);
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v109);
      unint64_t v109 = result;
    }

    unint64_t rawValue = *(void *)(v109 + 16);
    if (v98 >= rawValue)
    {
      __break(1u);
    }

    else
    {
      unint64_t v111 = v109 + 16 * v98;
      *(void *)(v111 + 32) = v108;
      *(_BYTE *)(v111 + 40) = 0;
      *(void *)(v37 + 80) = v109;
      unint64_t rawValue = (unint64_t)v150->stack._rawValue;
      uint64_t v112 = *((void *)v150->stack._rawValue + 2);
      if (v112)
      {
        int v113 = *(_DWORD *)(rawValue + 4 * v112 + 28);
        unint64_t v109 = *((void *)v103 + 2);
        unint64_t rawValue = *((void *)v103 + 3);
        int64_t v108 = v109 + 1;
        if ((v113 & 0x10000) != 0)
        {
          if (rawValue >> 1 <= v109)
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(rawValue > 1),  v109 + 1,  1,  v103,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
            uint64_t v103 = (char *)result;
          }

          *((void *)v103 + 2) = v108;
          uint64_t v114 = &v103[8 * v109];
          uint64_t v115 = 0x700000000010000LL;
          goto LABEL_142;
        }

        if (rawValue >> 1 > v109)
        {
LABEL_104:
          *((void *)v103 + 2) = v108;
          uint64_t v114 = &v103[8 * v109];
          uint64_t v115 = 0x700000000010001LL;
LABEL_142:
          *((void *)v114 + 4) = v115;
          *(void *)uint64_t v37 = v103;
          return result;
        }

  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void DSLTree.CustomCharacterClass.Member.generateConsumer(_:)()
{
  uint64_t v1 = type metadata accessor for DSLTree.Atom(0LL);
  uint64_t v2 = MEMORY[0x1895F8858](v1);
  MEMORY[0x1895F8858](v2);
  uint64_t v3 = type metadata accessor for DSLTree.CustomCharacterClass.Member(0LL);
  MEMORY[0x1895F8858](v3);
  outlined init with copy of MEProgram(v0, (uint64_t)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL), v5);
  uint64_t v6 = (char *)&loc_182D425DC + *((int *)qword_182D42BC8 + swift_getEnumCaseMultiPayload());
  __asm { BR              X10 }

uint64_t sub_182D425EC()
{
  uint64_t v5 = v0
  outlined init with take of DSLTree.QuantificationKind(v0, v2, type metadata accessor for DSLTree.Atom);
  outlined init with take of DSLTree.QuantificationKind(v5, v1, type metadata accessor for DSLTree.Atom);
  uint64_t v6 = DSLTree.Atom.literalCharacterValue.getter();
  if (!v7)
  {
    outlined destroy of MEProgram(v1, type metadata accessor for DSLTree.Atom);
    *(void *)(v4 - 96) = 0LL;
    *(void *)(v4 - 88) = 0xE000000000000000LL;
    _print_unlocked<A, B>(_:_:)();
    outlined destroy of MEProgram(v2, type metadata accessor for DSLTree.Atom);
    v24._Swift::Int countAndFlagsBits = 0x676E6172206E6920LL;
    v24._object = (void *)0xE900000000000065LL;
    String.append(_:)(v24);
    uint64_t v25 = *(void *)(v4 - 96);
    uint64_t v26 = *(void *)(v4 - 88);
    type metadata accessor for Unsupported();
    lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind( &lazy protocol witness table cache variable for type Unsupported and conformance Unsupported,  (uint64_t (*)(uint64_t))MEMORY[0x18961C120],  MEMORY[0x18961C130]);
    swift_allocError();
    uint64_t v21 = v25;
    uint64_t v22 = v26;
    uint64_t v23 = 189LL;
    goto LABEL_15;
  }

  unint64_t v8 = v6;
  unint64_t v9 = v7;
  uint64_t v10 = DSLTree.Atom.literalCharacterValue.getter();
  if (!v11)
  {
    outlined destroy of MEProgram(v2, type metadata accessor for DSLTree.Atom);
    swift_bridgeObjectRelease();
    *(void *)(v4 - 96) = 0LL;
    *(void *)(v4 - 88) = 0xE000000000000000LL;
    _print_unlocked<A, B>(_:_:)();
    outlined destroy of MEProgram(v1, type metadata accessor for DSLTree.Atom);
    v28._Swift::Int countAndFlagsBits = 0x676E6172206E6920LL;
    v28._object = (void *)0xE900000000000065LL;
    String.append(_:)(v28);
    uint64_t v29 = *(void *)(v4 - 96);
    uint64_t v30 = *(void *)(v4 - 88);
    type metadata accessor for Unsupported();
    lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind( &lazy protocol witness table cache variable for type Unsupported and conformance Unsupported,  (uint64_t (*)(uint64_t))MEMORY[0x18961C120],  MEMORY[0x18961C130]);
    swift_allocError();
    uint64_t v21 = v29;
    uint64_t v22 = v30;
    uint64_t v23 = 192LL;
    goto LABEL_15;
  }

  unint64_t v12 = v10;
  unint64_t v13 = v11;
  if ((Character.hasExactlyOneScalar.getter() & 1) == 0) {
    goto LABEL_12;
  }
  uint64_t result = specialized Collection.first.getter(v8, v9);
  if ((result & 0x100000000LL) != 0)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  *(void *)(v4 - 72) = result;
  if ((Unicode.Scalar.isNFC.getter(result) & 1) == 0)
  {
LABEL_12:
    swift_bridgeObjectRelease();
    outlined destroy of MEProgram(v1, type metadata accessor for DSLTree.Atom);
    outlined destroy of MEProgram(v2, type metadata accessor for DSLTree.Atom);
    lazy protocol witness table accessor for type RegexCompilationError and conformance RegexCompilationError();
    swift_allocError();
    *(void *)uint64_t v27 = v8;
    *(void *)(v27 + 8) = v9;
LABEL_13:
    *(_BYTE *)(v27 + 16) = 1;
    return swift_willThrow();
  }

  swift_bridgeObjectRelease();
  if ((Character.hasExactlyOneScalar.getter() & 1) == 0) {
    goto LABEL_17;
  }
  uint64_t result = specialized Collection.first.getter(v12, v13);
  if ((result & 0x100000000LL) != 0)
  {
LABEL_24:
    __break(1u);
    return result;
  }

  unsigned int v15 = result;
  if ((Unicode.Scalar.isNFC.getter(result) & 1) == 0)
  {
LABEL_17:
    outlined destroy of MEProgram(v1, type metadata accessor for DSLTree.Atom);
    outlined destroy of MEProgram(v2, type metadata accessor for DSLTree.Atom);
    lazy protocol witness table accessor for type RegexCompilationError and conformance RegexCompilationError();
    swift_allocError();
    *(void *)uint64_t v27 = v12;
    *(void *)(v27 + 8) = v13;
    goto LABEL_13;
  }

  swift_bridgeObjectRelease();
  if (v15 < *(void *)(v4 - 72))
  {
    *(void *)(v4 - 96) = 0LL;
    *(void *)(v4 - 88) = 0xE000000000000000LL;
    _StringGuts.grow(_:)(19LL);
    uint64_t v16 = *(void *)(v4 - 88);
    *(void *)(v4 - 96) = *(void *)(v4 - 96);
    *(void *)(v4 - 88) = v16;
    v17._Swift::Int countAndFlagsBits = 0x2064696C61766E49LL;
    v17._object = (void *)0xEE002065676E6172LL;
    String.append(_:)(v17);
    _print_unlocked<A, B>(_:_:)();
    outlined destroy of MEProgram(v2, type metadata accessor for DSLTree.Atom);
    v18._Swift::Int countAndFlagsBits = 45LL;
    v18._object = (void *)0xE100000000000000LL;
    String.append(_:)(v18);
    _print_unlocked<A, B>(_:_:)();
    outlined destroy of MEProgram(v1, type metadata accessor for DSLTree.Atom);
    uint64_t v19 = *(void *)(v4 - 96);
    uint64_t v20 = *(void *)(v4 - 88);
    type metadata accessor for Unsupported();
    lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind( &lazy protocol witness table cache variable for type Unsupported and conformance Unsupported,  (uint64_t (*)(uint64_t))MEMORY[0x18961C120],  MEMORY[0x18961C130]);
    swift_allocError();
    uint64_t v21 = v19;
    uint64_t v22 = v20;
    uint64_t v23 = 203LL;
LABEL_15:
    MEMORY[0x186E168A8]( v21,  v22,  "/Library/Caches/com.apple.xbs/Sources/swiftlang_overlay_Platform_Device/swift-experimental-string-processing/Sourc es/_StringProcessing/ConsumerInterface.swift",  158LL,  2LL,  v23);
    return swift_willThrow();
  }

  outlined destroy of MEProgram(v1, type metadata accessor for DSLTree.Atom);
  uint64_t result = outlined destroy of MEProgram(v2, type metadata accessor for DSLTree.Atom);
  uint64_t v31 = *(void *)(v3 + 16);
  if (!v31)
  {
    __break(1u);
    goto LABEL_23;
  }

  int v32 = *(_DWORD *)(v3 + 4 * v31 + 28);
  char v33 = v32 & 1;
  if ((v32 & 0x10000) != 0)
  {
    uint64_t v35 = swift_allocObject();
    *(_BYTE *)(v35 + 16) = 1;
    *(_DWORD *)(v35 + 20) = *(void *)(v4 - 72);
    *(_DWORD *)(v35 + 24) = v15;
    *(_BYTE *)(v35 + 28) = v33;
    return (uint64_t)closure #1 in DSLTree.CustomCharacterClass.Member.generateConsumer(_:)partial apply;
  }

  else
  {
    uint64_t v34 = swift_allocObject();
    *(_BYTE *)(v34 + 16) = 0;
    *(_DWORD *)(v34 + 20) = *(void *)(v4 - 72);
    *(_DWORD *)(v34 + 24) = v15;
    *(_BYTE *)(v34 + 28) = v33;
    return (uint64_t)partial apply for closure #1 in DSLTree.CustomCharacterClass.Member.generateConsumer(_:);
  }

void sub_182D42B1C()
{
}

_StringProcessing::DSLTree::CustomCharacterClass __swiftcall DSLTree.CustomCharacterClass.coalescingASCIIMembers(_:)( _StringProcessing::MatchingOptions a1)
{
  unint64_t rawValue = a1.stack._rawValue;
  uint64_t v3 = v1;
  uint64_t v4 = type metadata accessor for DSLTree.CustomCharacterClass.Member(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = (void *)MEMORY[0x1895F8858](v4);
  unint64_t v9 = (char *)v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *(void *)v2;
  LODWORD(v8) = v2[8];
  uint64_t v11 = *(void *)(*(void *)v2 + 16LL);
  int v32 = v3;
  uint64_t v33 = v11;
  int v31 = v8;
  v30[1] = v6;
  if (v11)
  {
    unint64_t v12 = 0LL;
    unint64_t v13 = (void *)MEMORY[0x18961AFE8];
    uint64_t v14 = (void *)MEMORY[0x18961AFE8];
    while (v12 < *(void *)(v10 + 16))
    {
      unint64_t v24 = (*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
      uint64_t v25 = *(void *)(v5 + 72);
      outlined init with copy of MEProgram( v10 + v24 + v25 * v12,  (uint64_t)v9,  type metadata accessor for DSLTree.CustomCharacterClass.Member);
      if (DSLTree.CustomCharacterClass.Member.asAsciiBitset(_:_:)((uint64_t)rawValue, 0) == 2LL)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v13 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v13[2] + 1LL,  1,  v13,  &demangling cache variable for type metadata for _ContiguousArrayStorage<DSLTree.CustomCharacterClass.Member>,  type metadata accessor for DSLTree.CustomCharacterClass.Member);
        }
        unint64_t v27 = v13[2];
        unint64_t v26 = v13[3];
        unint64_t v28 = v27 + 1;
        if (v27 >= v26 >> 1)
        {
          size_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v26 > 1,  v27 + 1,  1,  v13,  &demangling cache variable for type metadata for _ContiguousArrayStorage<DSLTree.CustomCharacterClass.Member>,  type metadata accessor for DSLTree.CustomCharacterClass.Member);
          unint64_t v13 = (void *)v23;
        }

        else
        {
          size_t v23 = (size_t)v13;
        }
      }

      else
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v14 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v14[2] + 1LL,  1,  v14,  &demangling cache variable for type metadata for _ContiguousArrayStorage<DSLTree.CustomCharacterClass.Member>,  type metadata accessor for DSLTree.CustomCharacterClass.Member);
        }
        unint64_t v27 = v14[2];
        unint64_t v29 = v14[3];
        unint64_t v28 = v27 + 1;
        if (v27 >= v29 >> 1)
        {
          size_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v29 > 1,  v27 + 1,  1,  v14,  &demangling cache variable for type metadata for _ContiguousArrayStorage<DSLTree.CustomCharacterClass.Member>,  type metadata accessor for DSLTree.CustomCharacterClass.Member);
          uint64_t v14 = (void *)v23;
        }

        else
        {
          size_t v23 = (size_t)v14;
        }
      }

      ++v12;
      *(void *)(v23 + 16) = v28;
      uint64_t v6 = (void *)outlined init with take of DSLTree.QuantificationKind( (uint64_t)v9,  v23 + v24 + v27 * v25,  type metadata accessor for DSLTree.CustomCharacterClass.Member);
      if (v33 == v12) {
        goto LABEL_4;
      }
    }

    __break(1u);
  }

  else
  {
    uint64_t v14 = (void *)MEMORY[0x18961AFE8];
    unint64_t v13 = (void *)MEMORY[0x18961AFE8];
LABEL_4:
    if (v14[2] && v13[2])
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DSLTree.CustomCharacterClass.Member>);
      uint64_t v15 = *(void *)(v5 + 72);
      unint64_t v16 = (*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
      uint64_t v17 = swift_allocObject();
      *(_OWORD *)(v17 + 16) = xmmword_182D9CC20;
      unint64_t v18 = v17 + v16;
      *(void *)unint64_t v18 = v14;
      *(_BYTE *)(v18 + 8) = 0;
      swift_storeEnumTagMultiPayload();
      uint64_t v19 = v17 + v16 + v15;
      *(void *)uint64_t v19 = v13;
      *(_BYTE *)(v19 + 8) = 0;
      uint64_t v6 = (void *)swift_storeEnumTagMultiPayload();
      uint64_t v20 = v32;
      *int v32 = v17;
      *((_BYTE *)v20 + 8) = v31;
    }

    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v21 = v32;
      char v22 = v31;
      *int v32 = v10;
      *((_BYTE *)v21 + 8) = v22;
      uint64_t v6 = (void *)swift_bridgeObjectRetain();
    }
  }

  result.members._unint64_t rawValue = v6;
  result.isInverted = v7;
  return result;
}

uint64_t DSLTree.CustomCharacterClass.Member.isOnlyTrivia.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DSLTree.CustomCharacterClass.Member(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x1895F8858](v2);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v4);
  uint64_t v8 = (uint64_t *)((char *)&v17 - v7);
  outlined init with copy of MEProgram(v1, (uint64_t)&v17 - v7, v9);
  uint64_t result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 4)
  {
    outlined destroy of MEProgram((uint64_t)v8, type metadata accessor for DSLTree.CustomCharacterClass.Member);
    return 1LL;
  }

  else if ((_DWORD)result == 2)
  {
    unint64_t v11 = 0LL;
    uint64_t v12 = *v8;
    uint64_t v13 = *(void *)(v12 + 16);
    while (1)
    {
      if (v13 == v11)
      {
        swift_bridgeObjectRelease();
        return 1LL;
      }

      if (v11 >= *(void *)(v12 + 16)) {
        break;
      }
      unint64_t v14 = v11 + 1;
      uint64_t v15 = outlined init with copy of MEProgram( v12 + ((*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))
            + *(void *)(v3 + 72) * v11,
              (uint64_t)v6,
              type metadata accessor for DSLTree.CustomCharacterClass.Member);
      char v16 = DSLTree.CustomCharacterClass.Member.isOnlyTrivia.getter(v15);
      uint64_t result = outlined destroy of MEProgram( (uint64_t)v6,  type metadata accessor for DSLTree.CustomCharacterClass.Member);
      unint64_t v11 = v14;
      if ((v16 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        return 0LL;
      }
    }

    __break(1u);
  }

  else
  {
    outlined destroy of MEProgram((uint64_t)v8, type metadata accessor for DSLTree.CustomCharacterClass.Member);
    return 0LL;
  }

  return result;
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DSLTree.CustomCharacterClass.Member(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1895F8858](v6);
  uint64_t v23 = (uint64_t)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = MEMORY[0x1895F8858](v8);
  uint64_t v12 = (char *)&v20 - v11;
  uint64_t v13 = MEMORY[0x18961AFE8];
  uint64_t v24 = MEMORY[0x18961AFE8];
  uint64_t v22 = *(void *)(a1 + 16);
  if (v22)
  {
    unint64_t v14 = 0LL;
    uint64_t v20 = a2;
    uint64_t v21 = a1;
    while (v14 < *(void *)(a1 + 16))
    {
      unint64_t v15 = (*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
      uint64_t v16 = *(void *)(v7 + 72);
      outlined init with copy of MEProgram( a1 + v15 + v16 * v14,  (uint64_t)v12,  type metadata accessor for DSLTree.CustomCharacterClass.Member);
      char v17 = closure #1 in PrettyPrinter.printAsPattern(_:wrap:terminateLine:)((uint64_t)v12);
      if (v3)
      {
        outlined destroy of MEProgram((uint64_t)v12, type metadata accessor for DSLTree.CustomCharacterClass.Member);
        swift_release();
        swift_bridgeObjectRelease();
        return v13;
      }

      if ((v17 & 1) != 0)
      {
        outlined init with take of DSLTree.QuantificationKind( (uint64_t)v12,  v23,  type metadata accessor for DSLTree.CustomCharacterClass.Member);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v13 + 16) + 1LL,  1);
        }
        uint64_t v13 = v24;
        unint64_t v19 = *(void *)(v24 + 16);
        unint64_t v18 = *(void *)(v24 + 24);
        if (v19 >= v18 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v18 > 1,  v19 + 1,  1);
          uint64_t v13 = v24;
        }

        *(void *)(v13 + 16) = v19 + 1;
        uint64_t result = outlined init with take of DSLTree.QuantificationKind( v23,  v13 + v15 + v19 * v16,  type metadata accessor for DSLTree.CustomCharacterClass.Member);
        uint64_t v3 = 0LL;
        a1 = v21;
      }

      else
      {
        uint64_t result = outlined destroy of MEProgram( (uint64_t)v12,  type metadata accessor for DSLTree.CustomCharacterClass.Member);
      }

      if (v22 == ++v14)
      {
        uint64_t v13 = v24;
        goto LABEL_15;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return v13;
  }

  return result;
}

uint64_t Compiler.ByteCodeGen.emitConcatenation(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v65 = type metadata accessor for DSLTree.Atom(0LL);
  uint64_t v4 = MEMORY[0x1895F8858](v65);
  unint64_t v66 = (uint64_t *)((char *)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  MEMORY[0x1895F8858](v4);
  uint64_t v67 = (uint64_t)&v62 - v6;
  unint64_t v7 = *(void *)(a1 + 16);
  if (v7)
  {
    uint64_t v8 = (char *)(a1 + 32);
    uint64_t v9 = (char *)MEMORY[0x18961AFE8];
    while (1)
    {
      unint64_t v10 = *(void *)v8;
      v8 += 8;
      swift_retain();
      unint64_t v11 = flatten #1 (_:) in Compiler.ByteCodeGen.emitConcatenation(_:)(v10);
      swift_release();
      uint64_t v12 = *(void *)(v11 + 16);
      int64_t v13 = *((void *)v9 + 2);
      int64_t v14 = v13 + v12;
      if (__OFADD__(v13, v12))
      {
LABEL_71:
        __break(1u);
LABEL_72:
        __break(1u);
LABEL_73:
        __break(1u);
LABEL_74:
        __break(1u);
LABEL_75:
        __break(1u);
LABEL_76:
        uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v8 + 2) + 1LL,  1,  v8);
LABEL_58:
        unint64_t v58 = *((void *)v8 + 2);
        unint64_t v57 = *((void *)v8 + 3);
        unint64_t v59 = v58 + 1;
        if (v58 >= v57 >> 1) {
          uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v57 > 1),  v58 + 1,  1,  v8);
        }
        *((void *)v8 + 2) = v59;
        *(void *)&v8[8 * v58 + 32] = v7 | 0x5000000000000000LL;
        goto LABEL_63;
      }

      char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
      if ((_DWORD)isUniquelyReferenced_nonNull_native && v14 <= *((void *)v9 + 3) >> 1)
      {
        if (!*(void *)(v11 + 16)) {
          goto LABEL_3;
        }
      }

      else
      {
        if (v13 <= v14) {
          int64_t v16 = v13 + v12;
        }
        else {
          int64_t v16 = v13;
        }
        uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( isUniquelyReferenced_nonNull_native,  v16,  1,  v9);
        if (!*(void *)(v11 + 16))
        {
LABEL_3:
          swift_bridgeObjectRelease();
          if (v12) {
            goto LABEL_72;
          }
          goto LABEL_4;
        }
      }

      if ((*((void *)v9 + 3) >> 1) - *((void *)v9 + 2) < v12) {
        goto LABEL_74;
      }
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      if (v12)
      {
        uint64_t v17 = *((void *)v9 + 2);
        BOOL v18 = __OFADD__(v17, v12);
        uint64_t v19 = v17 + v12;
        if (v18) {
          goto LABEL_75;
        }
        *((void *)v9 + 2) = v19;
      }

LABEL_4:
      if (!--v7) {
        goto LABEL_19;
      }
    }
  }

  uint64_t v9 = (char *)MEMORY[0x18961AFE8];
LABEL_19:
  uint64_t v69 = 0LL;
  unint64_t v70 = 0xE000000000000000LL;
  uint64_t v20 = *((void *)v9 + 2);
  if (!v20)
  {
    uint64_t v64 = (char *)MEMORY[0x18961AFE8];
    goto LABEL_62;
  }

  unint64_t v21 = 0LL;
  uint64_t v68 = v9 + 32;
  uint64_t v64 = (char *)MEMORY[0x18961AFE8];
  uint64_t v63 = v20 - 1;
  uint64_t v8 = (char *)type metadata accessor for DSLTree.Atom;
  while (2)
  {
    char v22 = 0;
    unint64_t v7 = v21;
    while (1)
    {
      if (v7 >= *((void *)v9 + 2))
      {
        __break(1u);
        goto LABEL_71;
      }

      unint64_t v26 = *(void *)&v68[8 * v7];
      int v27 = (v26 >> 59) & 0x1E | (v26 >> 2) & 1;
      if (v27 == 10)
      {
        uint64_t v23 = *(void *)((v26 & 0xFFFFFFFFFFFFFFBLL) + 0x10);
        uint64_t v24 = *(void **)((v26 & 0xFFFFFFFFFFFFFFBLL) + 0x18);
        swift_retain();
        v25._Swift::Int countAndFlagsBits = v23;
        v25._object = v24;
        String.append(_:)(v25);
        swift_release();
        goto LABEL_23;
      }

      if (v27 == 9) {
        break;
      }
      if (v27 != 8) {
        goto LABEL_43;
      }
      uint64_t v28 = swift_projectBox();
      uint64_t v29 = v67;
      outlined init with copy of MEProgram(v28, v67, type metadata accessor for DSLTree.Atom);
      uint64_t v30 = v29;
      int v31 = v66;
      outlined init with copy of MEProgram(v30, (uint64_t)v66, type metadata accessor for DSLTree.Atom);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload)
      {
        if (EnumCaseMultiPayload != 1)
        {
          swift_retain();
          outlined destroy of MEProgram((uint64_t)v66, type metadata accessor for DSLTree.Atom);
          outlined destroy of MEProgram(v67, type metadata accessor for DSLTree.Atom);
          if ((v22 & 1) != 0) {
            goto LABEL_44;
          }
          goto LABEL_50;
        }

        unsigned int v33 = *(_DWORD *)v66;
        if (*(_DWORD *)v66 >= 0x80u)
        {
          int v41 = (*(_DWORD *)v66 & 0x3F) << 8;
          if (v33 >= 0x800)
          {
            unsigned int v42 = v33 >> 12;
            int v43 = (v41 | (v33 >> 6) & 0x3F) << 8;
            unsigned int v44 = HIWORD(v33);
            unsigned int v34 = (((v43 | (v33 >> 12) & 0x3F) << 8) | (v33 >> 18)) - 2122219023;
            int v45 = (v43 | v42) + 8487393;
            if (!v44) {
              unsigned int v34 = v45;
            }
          }

          else
          {
            unsigned int v34 = (v41 | (v33 >> 6)) + 33217;
          }
        }

        else
        {
          unsigned int v34 = v33 + 1;
        }

        unsigned int v35 = __clz(v34);
        uint64_t v36 = 4 - (v35 >> 3);
        uint64_t v71 = (v34 + 0xFEFEFEFEFEFEFFLL) & ~(-1LL << (8 * (4 - (v35 >> 3))));
        swift_retain();
        uint64_t v37 = MEMORY[0x186E16FB0](&v71, v36);
        uint64_t v39 = v38;
      }

      else
      {
        uint64_t v37 = *v31;
        uint64_t v39 = v31[1];
        swift_retain();
      }

      outlined destroy of MEProgram(v67, type metadata accessor for DSLTree.Atom);
      MEMORY[0x186E17010](v37, v39);
      swift_release();
      swift_bridgeObjectRelease();
LABEL_23:
      ++v7;
      char v22 = 1;
      if (v20 == v7)
      {
        swift_bridgeObjectRelease();
        uint64_t v55 = v69;
        unint64_t v56 = v70;
        unint64_t v7 = swift_allocObject();
        *(void *)(v7 + 16) = v55;
        *(void *)(v7 + 24) = v56;
        uint64_t v8 = v64;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          goto LABEL_76;
        }
        goto LABEL_58;
      }
    }

    uint64_t v40 = v69 & 0xFFFFFFFFFFFFLL;
    if ((v70 & 0x2000000000000000LL) != 0) {
      uint64_t v40 = HIBYTE(v70) & 0xF;
    }
    if (v40) {
      goto LABEL_23;
    }
LABEL_43:
    swift_retain();
    if ((v22 & 1) == 0)
    {
LABEL_50:
      char v51 = v64;
      goto LABEL_51;
    }

LABEL_44:
    uint64_t v46 = v69;
    unint64_t v47 = v70;
    uint64_t v48 = swift_allocObject();
    *(void *)(v48 + 16) = v46;
    *(void *)(v48 + 24) = v47;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v64 + 2) + 1LL,  1,  v64);
    }
    unint64_t v50 = *((void *)v64 + 2);
    unint64_t v49 = *((void *)v64 + 3);
    if (v50 >= v49 >> 1) {
      uint64_t v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v49 > 1),  v50 + 1,  1,  v64);
    }
    char v51 = v64;
    *((void *)v64 + 2) = v50 + 1;
    *(void *)&v51[8 * v50 + 32] = v48 | 0x5000000000000000LL;
    uint64_t v69 = 0LL;
    unint64_t v70 = 0xE000000000000000LL;
LABEL_51:
    uint64_t v64 = v51;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v64 + 2) + 1LL,  1,  v64);
    }
    unint64_t v53 = *((void *)v64 + 2);
    unint64_t v52 = *((void *)v64 + 3);
    if (v53 >= v52 >> 1) {
      uint64_t v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v52 > 1),  v53 + 1,  1,  v64);
    }
    unint64_t v21 = v7 + 1;
    int64_t v54 = v64;
    *((void *)v64 + 2) = v53 + 1;
    *(void *)&v54[8 * v53 + 32] = v26;
    if (v63 != v7) {
      continue;
    }
    break;
  }

    *(void *)(v5 + 16) = 0LL;
    goto LABEL_45;
  }

  unint64_t v21 = v40[v22];
  if (v21)
  {
    uint64_t v8 = v22;
    goto LABEL_30;
  }

  while (1)
  {
    uint64_t v8 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v8 >= v39) {
      goto LABEL_33;
    }
    unint64_t v21 = v40[v8];
    ++v22;
    if (v21) {
      goto LABEL_30;
    }
  }

    *(void *)(v5 + 16) = 0LL;
    goto LABEL_45;
  }

  unint64_t v21 = v39[v22];
  if (v21)
  {
    uint64_t v8 = v22;
    goto LABEL_30;
  }

  while (1)
  {
    uint64_t v8 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v8 >= v38) {
      goto LABEL_33;
    }
    unint64_t v21 = v39[v8];
    ++v22;
    if (v21) {
      goto LABEL_30;
    }
  }

    *(void *)(v5 + 16) = 0LL;
    goto LABEL_45;
  }

  unint64_t v21 = v40[v22];
  if (v21)
  {
    uint64_t v8 = v22;
    goto LABEL_30;
  }

  while (1)
  {
    uint64_t v8 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v8 >= v39) {
      goto LABEL_33;
    }
    unint64_t v21 = v40[v8];
    ++v22;
    if (v21) {
      goto LABEL_30;
    }
  }

LABEL_62:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = v64;
  unint64_t v59 = *((void *)v64 + 2);
  if (v59)
  {
LABEL_63:
    unint64_t v7 = 0LL;
    while (1)
    {
      if (v7 >= *((void *)v8 + 2)) {
        goto LABEL_73;
      }
      uint64_t v60 = *(void *)&v8[8 * v7 + 32];
      swift_retain();
      Compiler.ByteCodeGen.emitNode(_:)(v60);
      if (v2) {
        break;
      }
      swift_release();
      if (v59 == ++v7) {
        return swift_bridgeObjectRelease();
      }
    }

    swift_release();
  }

  return swift_bridgeObjectRelease();
}

unint64_t flatten #1 (_:) in Compiler.ByteCodeGen.emitConcatenation(_:)(unint64_t result)
{
  unint64_t v1 = result;
  int v2 = (result >> 59) & 0x1E | (result >> 2) & 1;
  if (v2 == 12)
  {
    int64_t v16 = (uint64_t *)swift_projectBox();
LABEL_24:
    uint64_t v17 = *v16;
    swift_retain();
    uint64_t v6 = flatten #1 (_:) in Compiler.ByteCodeGen.emitConcatenation(_:)(v17);
    swift_release();
    return v6;
  }

  if (v2 == 4)
  {
    int64_t v16 = (uint64_t *)((result & 0xFFFFFFFFFFFFFFBLL) + 16);
    goto LABEL_24;
  }

  if (v2 != 1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DSLTree.Node>);
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_182D9CC00;
    *(void *)(v6 + 32) = v1;
    swift_retain();
    return v6;
  }

  uint64_t v3 = *(void *)((result & 0xFFFFFFFFFFFFFFBLL) + 0x10);
  uint64_t v4 = *(void *)(v3 + 16);
  if (!v4) {
    return MEMORY[0x18961AFE8];
  }
  unint64_t v5 = 0LL;
  uint64_t v6 = MEMORY[0x18961AFE8];
  while (v5 < *(void *)(v3 + 16))
  {
    uint64_t v7 = *(void *)(v3 + 32 + 8 * v5);
    swift_retain();
    uint64_t v8 = flatten #1 (_:) in Compiler.ByteCodeGen.emitConcatenation(_:)(v7);
    uint64_t result = swift_release();
    uint64_t v9 = *(void *)(v8 + 16);
    int64_t v10 = *(void *)(v6 + 16);
    int64_t v11 = v10 + v9;
    if (__OFADD__(v10, v9)) {
      goto LABEL_29;
    }
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((_DWORD)result && v11 <= *(void *)(v6 + 24) >> 1)
    {
      if (*(void *)(v8 + 16)) {
        goto LABEL_18;
      }
    }

    else
    {
      if (v10 <= v11) {
        int64_t v12 = v10 + v9;
      }
      else {
        int64_t v12 = v10;
      }
      uint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)result,  v12,  1,  (char *)v6);
      uint64_t v6 = result;
      if (*(void *)(v8 + 16))
      {
LABEL_18:
        if ((*(void *)(v6 + 24) >> 1) - *(void *)(v6 + 16) < v9) {
          goto LABEL_31;
        }
        swift_arrayInitWithCopy();
        uint64_t result = swift_bridgeObjectRelease();
        if (v9)
        {
          uint64_t v13 = *(void *)(v6 + 16);
          BOOL v14 = __OFADD__(v13, v9);
          uint64_t v15 = v13 + v9;
          if (v14) {
            goto LABEL_32;
          }
          *(void *)(v6 + 16) = v15;
        }

        goto LABEL_7;
      }
    }

    uint64_t result = swift_bridgeObjectRelease();
    if (v9) {
      goto LABEL_30;
    }
LABEL_7:
    if (v4 == ++v5) {
      return v6;
    }
  }

  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

uint64_t DSLTree.Atom.literalCharacterValue.getter()
{
  uint64_t v1 = type metadata accessor for DSLTree.Atom(0LL);
  MEMORY[0x1895F8858](v1);
  uint64_t v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of MEProgram(v0, (uint64_t)v3, v4);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    unsigned int v7 = *(_DWORD *)v3;
    if (*(_DWORD *)v3 > 0x7Fu)
    {
      int v9 = (*(_DWORD *)v3 & 0x3F) << 8;
      if (v7 >= 0x800)
      {
        unsigned int v10 = v7 >> 12;
        int v11 = (v9 | (v7 >> 6) & 0x3F) << 8;
        unsigned int v12 = HIWORD(v7);
        unsigned int v8 = (((v11 | (v7 >> 12) & 0x3F) << 8) | (v7 >> 18)) - 2122219023;
        int v13 = (v11 | v10) + 8487393;
        if (!v12) {
          unsigned int v8 = v13;
        }
      }

      else
      {
        unsigned int v8 = (v9 | (v7 >> 6)) + 33217;
      }
    }

    else
    {
      unsigned int v8 = v7 + 1;
    }

    uint64_t v15 = (v8 + 0xFEFEFEFEFEFEFFLL) & ~(-1LL << (8 * (4 - (__clz(v8) >> 3))));
    return MEMORY[0x186E16FB0](&v15);
  }

  else if (EnumCaseMultiPayload)
  {
    outlined destroy of MEProgram((uint64_t)v3, type metadata accessor for DSLTree.Atom);
    return 0LL;
  }

  else
  {
    return *(void *)v3;
  }

void CaptureTransform.callAsFunction(_:)()
{
  __asm { BR              X10 }

{
  uint64_t v0;
  __int128 v1;
  _BYTE v2[24];
  outlined init with take of CaptureTransform.Closure((__int128 *)(v0 + 16), (uint64_t)&v1);
  outlined init with take of CaptureTransform.Closure(&v1, (uint64_t)v2);
  __asm { BR              X10 }

uint64_t sub_182D43CC4()
{
  uint64_t v4 = (void (*)(void *))v7[7];
  v7[3] = MEMORY[0x189618C50];
  unint64_t v5 = (void *)swift_allocObject();
  v7[0] = v5;
  _OWORD v5[2] = v3;
  v5[3] = v2;
  _OWORD v5[4] = v1;
  v5[5] = v0;
  swift_bridgeObjectRetain();
  v4(v7);
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v7);
}

_OWORD *constructExistentialOutputComponent(from:component:optionalCount:)@<X0>( uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t *a3@<X8>)
{
  if (v31 == 1)
  {
    uint64_t result = (_OWORD *)outlined destroy of (range: Range<String.Index>, value: Any?)?( (uint64_t)&v28,  &demangling cache variable for type metadata for (range: Range<String.Index>, value: Any?)?);
    if (a2 >= 1)
    {
      uint64_t v6 = static TypeConstruction.optionalType<A>(of:depth:)();
      a3[3] = type metadata accessor for Optional();
      boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(a3);
      return (_OWORD *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))( boxed_opaque_existential_0,  1LL,  1LL,  v6);
    }

    goto LABEL_11;
  }

  uint64_t v8 = v28;
  uint64_t v9 = v29;
  uint64_t v32 = v28;
  uint64_t v33 = v29;
  outlined init with take of Any?((uint64_t)&v30, (uint64_t)v34);
  uint64_t v28 = v8;
  uint64_t v29 = v9;
  outlined init with copy of Any?((uint64_t)v34, (uint64_t)&v30);
  v24[0] = v8;
  v24[1] = v9;
  outlined init with take of Any?((uint64_t)v34, (uint64_t)&v25);
  outlined destroy of (range: Range<String.Index>, value: Any?)?( (uint64_t)v24,  &demangling cache variable for type metadata for (range: Range<String.Index>, value: Any?));
  if (!v31)
  {
    uint64_t v14 = String.subscript.getter();
    uint64_t v16 = v15;
    uint64_t v18 = v17;
    uint64_t v20 = v19;
    uint64_t v27 = MEMORY[0x189618C50];
    unint64_t v21 = (void *)swift_allocObject();
    *(void *)&__int128 v26 = v21;
    void v21[2] = v14;
    v21[3] = v16;
    v21[4] = v18;
    v21[5] = v20;
    uint64_t result = (_OWORD *)outlined destroy of Any?((uint64_t)&v30);
    if ((a2 & 0x8000000000000000LL) == 0) {
      goto LABEL_6;
    }
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    return result;
  }

  uint64_t result = outlined init with take of Any(&v30, &v26);
  if (a2 < 0) {
    goto LABEL_10;
  }
LABEL_6:
  while (a2)
  {
    outlined init with copy of Any((uint64_t)&v26, (uint64_t)v22);
    uint64_t v10 = v23;
    int v11 = __swift_project_boxed_opaque_existential_0(v22, v23);
    uint64_t v36 = type metadata accessor for Optional();
    unsigned int v12 = __swift_allocate_boxed_opaque_existential_0(v35);
    uint64_t v13 = *(void *)(v10 - 8);
    (*(void (**)(uint64_t *, void *, uint64_t))(v13 + 16))(v12, v11, v10);
    (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v13 + 56))(v12, 0LL, 1LL, v10);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v26);
    outlined init with take of Any(v35, &v26);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v22);
    --a2;
  }

  return outlined init with take of Any(&v26, a3);
}

_OWORD *sub_182D43FFC()
{
  uint64_t result = (*(void *(**)(__int128 *__return_ptr, uint64_t))(v3 - 72))(&v5, v2);
  if (!v1)
  {
    if (v6)
    {
      outlined init with take of Any(&v5, v7);
      return outlined init with take of Any(v7, v0);
    }

    else
    {
      uint64_t result = (_OWORD *)outlined destroy of Any?((uint64_t)&v5);
      _OWORD *v0 = 0u;
      v0[1] = 0u;
    }
  }

  return result;
}

uint64_t DSLTree.CustomCharacterClass.containsDot.getter()
{
  uint64_t v1 = type metadata accessor for DSLTree.CustomCharacterClass.Member(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = MEMORY[0x1895F8858](v1);
  uint64_t v22 = (uint64_t)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = MEMORY[0x1895F8858](v3);
  unsigned int v7 = (char *)&v21 - v6;
  uint64_t v8 = MEMORY[0x1895F8858](v5);
  uint64_t v10 = (char *)&v21 - v9;
  uint64_t result = MEMORY[0x1895F8858](v8);
  uint64_t v13 = (char *)&v21 - v12;
  uint64_t v14 = *v0;
  uint64_t v15 = *(void *)(*v0 + 16);
  if (!v15) {
    return 0LL;
  }
  unint64_t v16 = 0LL;
  uint64_t v21 = *v0;
  while (v16 < *(void *)(v14 + 16))
  {
    outlined init with copy of MEProgram( v14 + ((*(unsigned __int8 *)(v2 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))
    + *(void *)(v2 + 72) * v16,
      (uint64_t)v13,
      type metadata accessor for DSLTree.CustomCharacterClass.Member);
    outlined init with take of DSLTree.QuantificationKind( (uint64_t)v13,  (uint64_t)v10,  type metadata accessor for DSLTree.CustomCharacterClass.Member);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v18 = v22;
      uint64_t v19 = outlined init with copy of MEProgram( (uint64_t)v10,  v22,  type metadata accessor for DSLTree.CustomCharacterClass.Member);
      char v20 = *(_BYTE *)(v18 + 8);
      uint64_t v23 = *(void *)v18;
      char v24 = v20;
      LOBYTE(v18) = DSLTree.CustomCharacterClass.containsDot.getter(v19);
      uint64_t v14 = v21;
      swift_bridgeObjectRelease();
      uint64_t result = outlined destroy of MEProgram( (uint64_t)v10,  type metadata accessor for DSLTree.CustomCharacterClass.Member);
      if ((v18 & 1) != 0) {
        return 1LL;
      }
    }

    else
    {
      if (!EnumCaseMultiPayload)
      {
        outlined init with copy of MEProgram( (uint64_t)v10,  (uint64_t)v7,  type metadata accessor for DSLTree.CustomCharacterClass.Member);
        type metadata accessor for DSLTree.Atom(0LL);
        if (swift_getEnumCaseMultiPayload() == 10)
        {
          outlined destroy of MEProgram((uint64_t)v10, type metadata accessor for DSLTree.CustomCharacterClass.Member);
          return 1LL;
        }

        outlined destroy of MEProgram((uint64_t)v7, type metadata accessor for DSLTree.Atom);
      }

      uint64_t result = outlined destroy of MEProgram( (uint64_t)v10,  type metadata accessor for DSLTree.CustomCharacterClass.Member);
    }

    if (v15 == ++v16) {
      return 0LL;
    }
  }

  __break(1u);
  return result;
}

uint64_t DSLTree.CustomCharacterClass.guaranteesForwardProgress.getter()
{
  uint64_t v1 = type metadata accessor for DSLTree.CustomCharacterClass.Member(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t result = MEMORY[0x1895F8858](v1);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = *v0;
  uint64_t v7 = *(void *)(v6 + 16);
  if (v7)
  {
    unint64_t v8 = 0LL;
    while (1)
    {
      if (v8 >= *(void *)(v6 + 16))
      {
        __break(1u);
        return result;
      }

      outlined init with copy of MEProgram( v6 + ((*(unsigned __int8 *)(v2 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))
      + *(void *)(v2 + 72) * v8,
        (uint64_t)v5,
        type metadata accessor for DSLTree.CustomCharacterClass.Member);
      uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if ((_DWORD)EnumCaseMultiPayload != 4) {
        break;
      }
      ++v8;
      uint64_t result = outlined destroy of MEProgram( (uint64_t)v5,  type metadata accessor for DSLTree.CustomCharacterClass.Member);
      if (v7 == v8) {
        goto LABEL_15;
      }
    }

    if ((_DWORD)EnumCaseMultiPayload != 5)
    {
      if ((_DWORD)EnumCaseMultiPayload == 6)
      {
        char v20 = *(_BYTE *)(*(void *)v5 + 24LL);
        uint64_t v21 = *(void *)(*(void *)v5 + 16LL);
        char v22 = v20;
        char v19 = DSLTree.CustomCharacterClass.guaranteesForwardProgress.getter(EnumCaseMultiPayload, v10);
        swift_release();
        return v19 & 1;
      }

      if ((_DWORD)EnumCaseMultiPayload != 7)
      {
        outlined destroy of MEProgram((uint64_t)v5, type metadata accessor for DSLTree.CustomCharacterClass.Member);
        char v19 = 1;
        return v19 & 1;
      }
    }

    uint64_t v11 = *(void *)(*(void *)v5 + 16LL);
    char v12 = *(_BYTE *)(*(void *)v5 + 24LL);
    uint64_t v13 = *(void *)(*(void *)v5 + 32LL);
    char v14 = *(_BYTE *)(*(void *)v5 + 40LL);
    uint64_t v21 = v11;
    char v22 = v12;
    uint64_t v15 = swift_bridgeObjectRetain();
    uint64_t v17 = DSLTree.CustomCharacterClass.guaranteesForwardProgress.getter(v15, v16);
    if ((v17 & 1) != 0)
    {
      uint64_t v21 = v13;
      char v22 = v14;
      char v19 = DSLTree.CustomCharacterClass.guaranteesForwardProgress.getter(v17, v18);
      swift_release();
      swift_bridgeObjectRelease();
      return v19 & 1;
    }

    swift_release();
    swift_bridgeObjectRelease();
  }

LABEL_15:
  char v19 = 0;
  return v19 & 1;
}

    __break(1u);
    return result;
  }

  if (__OFSUB__(8LL, result))
  {
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v6 = MEMORY[0x186E1707C](48LL, 0xE100000000000000LL, 8 - result);
  unint64_t v8 = 21852LL;
LABEL_12:
  uint64_t v10 = v8;
  String.append(_:)(*(Swift::String *)&v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v9._Swift::Int countAndFlagsBits = v2;
  v9._object = v4;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v10;
}

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

  if (v23) {
    uint64_t v27 = v15;
  }
  else {
    uint64_t v27 = v15 + 1;
  }
  return (*(uint64_t (**)(unint64_t, uint64_t))(v32 + 8))((v27 + v16 + v22) & ~v15, v14);
}

uint64_t AnyRegexOutput.Element.range.getter()
{
  if (v4[3] == 1LL)
  {
    outlined destroy of (range: Range<String.Index>, value: Any?)?( (uint64_t)&v3,  &demangling cache variable for type metadata for (range: Range<String.Index>, value: Any?)?);
    return 0LL;
  }

  else
  {
    uint64_t v1 = v3;
    outlined destroy of Any?((uint64_t)v4);
  }

  return v1;
}

uint64_t specialized Sequence<>.existentialOutput(from:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12 = MEMORY[0x18961AFE8];
  uint64_t v43 = MEMORY[0x18961AFE8];
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRetain();
  unint64_t v14 = *(void *)(a5 + 16);
  uint64_t v28 = a6;
  if (v14)
  {
    unint64_t v15 = 0LL;
    uint64_t v16 = a5 + 32;
    while (v15 < v14)
    {
      outlined init with copy of AnyRegexOutput.ElementRepresentation(v16, (uint64_t)&v29);
      *((void *)&v34 + 1) = a3;
      uint64_t v42 = a4;
      __int128 v36 = v29;
      __int128 v37 = v30;
      __int128 v38 = v31;
      __int128 v39 = v32;
      __int128 v40 = v33;
      __int128 v41 = v34;
      if (BYTE1(v34) == 1)
      {
        uint64_t v17 = a1;
        uint64_t v18 = a2;
        __int128 v33 = v40;
        __int128 v34 = v41;
        uint64_t v35 = v42;
        __int128 v29 = v36;
        __int128 v30 = v37;
        __int128 v31 = v38;
        __int128 v32 = v39;
        swift_bridgeObjectRetain();
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0) {
          uint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v12 + 16) + 1LL,  1);
        }
        uint64_t v12 = v43;
        unint64_t v20 = *(void *)(v43 + 16);
        unint64_t v19 = *(void *)(v43 + 24);
        if (v20 >= v19 >> 1)
        {
          uint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v19 > 1),  v20 + 1,  1);
          uint64_t v12 = v43;
        }

        *(void *)(v12 + 16) = v20 + 1;
        uint64_t v21 = v12 + 104 * v20;
        *(_OWORD *)(v21 + 80) = v32;
        *(_OWORD *)(v21 + 96) = v33;
        *(_OWORD *)(v21 + 112) = v34;
        *(void *)(v21 + 128) = v35;
        *(_OWORD *)(v21 + 32) = v29;
        *(_OWORD *)(v21 + 48) = v30;
        *(_OWORD *)(v21 + 64) = v31;
        a2 = v18;
        a1 = v17;
      }

      else
      {
        swift_bridgeObjectRetain();
        uint64_t result = outlined destroy of AnyRegexOutput.Element((uint64_t)&v36);
      }

      ++v15;
      unint64_t v14 = *(void *)(a5 + 16);
      v16 += 88LL;
      if (v15 == v14) {
        goto LABEL_12;
      }
    }

    __break(1u);
    goto LABEL_26;
  }

LABEL_12:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  int64_t v22 = *(void *)(v12 + 16);
  if (v22)
  {
    uint64_t v43 = MEMORY[0x18961AFE8];
    uint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v22,  0);
    unint64_t v23 = 0LL;
    uint64_t v24 = v12 + 32;
    while (v23 < *(void *)(v12 + 16))
    {
      outlined init with copy of AnyRegexOutput.Element(v24, (uint64_t)&v36);
      constructExistentialOutputComponent(from:component:optionalCount:)((uint64_t)&v36 + 8, v36, (uint64_t *)&v29);
      outlined destroy of AnyRegexOutput.Element((uint64_t)&v36);
      uint64_t v25 = v43;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v25 + 16) + 1LL,  1);
        uint64_t v25 = v43;
      }

      unint64_t v27 = *(void *)(v25 + 16);
      unint64_t v26 = *(void *)(v25 + 24);
      if (v27 >= v26 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v26 > 1),  v27 + 1,  1);
        uint64_t v25 = v43;
      }

      ++v23;
      *(void *)(v25 + 16) = v27 + 1;
      uint64_t result = (uint64_t)outlined init with take of Any(&v29, (_OWORD *)(v25 + 32 * v27 + 32));
      v24 += 104LL;
      if (v22 == v23)
      {
        swift_release();
        goto LABEL_22;
      }
    }

    v9 |= v28;
    v26 |= v27;
    __int128 v29 = String.Iterator.next()();
    Swift::Int countAndFlagsBits = v29.value._countAndFlagsBits;
    object = (char *)v29.value._object;
    if (!v29.value._object) {
      goto LABEL_41;
    }
  }

  if ((Character._isSingleScalar.getter() & 1) == 0) {
    goto LABEL_42;
  }
  uint64_t result = specialized Collection.first.getter(countAndFlagsBits, (unint64_t)object);
  if ((result & 0x100000000LL) != 0) {
    goto LABEL_47;
  }
  if ((result & 0xFFFFFF80) != 0) {
    goto LABEL_42;
  }
  uint64_t result = specialized Collection.first.getter(countAndFlagsBits, (unint64_t)object);
  if ((result & 0x100000000LL) != 0) {
    goto LABEL_48;
  }
  Swift::Int countAndFlagsBits = result;
  uint64_t result = swift_bridgeObjectRelease();
  if ((countAndFlagsBits & 0xFFFFFF00) == 0)
  {
    __int128 v30 = countAndFlagsBits;
    __int128 v31 = *(void *)(a1 + 16);
    if (!v31) {
      goto LABEL_32;
    }
    goto LABEL_23;
  }

  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
  return result;
}

  uint64_t v11 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  *(void *)(*(void *)(v11 + 48) + 8 * a2) = v5;
  uint64_t v12 = *(void *)(v11 + 16);
  uint64_t v13 = __OFADD__(v12, 1LL);
  unint64_t v14 = v12 + 1;
  if (!v13)
  {
    *(void *)(v11 + 16) = v14;
    return result;
  }

  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

  uint64_t v11 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  *(_DWORD *)(*(void *)(v11 + 48) + 4 * a2) = v5;
  uint64_t v12 = *(void *)(v11 + 16);
  uint64_t v13 = __OFADD__(v12, 1LL);
  unint64_t v14 = v12 + 1;
  if (!v13)
  {
    *(void *)(v11 + 16) = v14;
    return result;
  }

  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t Compiler.emit()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v29 = a1;
  uint64_t v2 = v1;
  uint64_t v3 = type metadata accessor for CaptureList();
  uint64_t v27 = *(void *)(v3 - 8);
  uint64_t v28 = v3;
  MEMORY[0x1895F8858](v3);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = v5;
  uint64_t v6 = (int *)type metadata accessor for Compiler.ByteCodeGen(0LL);
  uint64_t v7 = MEMORY[0x1895F8858](v6);
  uint64_t v9 = (uint64_t *)((char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  MEMORY[0x1895F8858](v7);
  uint64_t v11 = (char *)&v23 - v10;
  uint64_t v12 = v2[4];
  uint64_t v25 = v2[3];
  uint64_t v26 = v12;
  uint64_t v30 = v2[2];
  swift_bridgeObjectRetain();
  static CaptureList.Builder.build(_:)((unint64_t *)&v30, (uint64_t)v5);
  uint64_t v13 = (char *)v9 + v6[5];
  uint64_t v14 = MEMORY[0x18961AFE8];
  *(void *)uint64_t v13 = MEMORY[0x18961AFE8];
  *((_WORD *)v13 + 4) = 0;
  *((void *)v13 + 2) = specialized Dictionary.init(dictionaryLiteral:)(v14);
  *((void *)v13 + 3) = v14;
  *((void *)v13 + 4) = specialized Dictionary.init(dictionaryLiteral:)(v14);
  *((void *)v13 + 5) = v14;
  *((void *)v13 + 6) = v14;
  *((void *)v13 + 7) = v14;
  *((void *)v13 + 8) = v14;
  *((void *)v13 + 9) = v14;
  *((void *)v13 + 10) = v14;
  *((void *)v13 + 11) = v14;
  *((_OWORD *)v13 + 6) = 0u;
  *((_OWORD *)v13 + 7) = 0u;
  *((void *)v13 + 16) = 0LL;
  v13[136] = 1;
  unint64_t v15 = (int *)type metadata accessor for MEProgram.Builder(0LL);
  uint64_t v16 = &v13[v15[20]];
  CaptureList.init(arrayLiteral:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MatchingOptions.Representation>);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_182D9CC00;
  uint64_t v18 = v15[21];
  *(_DWORD *)(v17 + 32) = 81984;
  *(void *)&v13[v18] = v17;
  v13[v15[22]] = 0;
  uint64_t v19 = v15[23];
  *(void *)&v13[v19] = specialized Dictionary.init(dictionaryLiteral:)(v14);
  uint64_t v20 = v15[24];
  *(void *)&v13[v20] = specialized Dictionary.init(dictionaryLiteral:)(v14);
  *((_BYTE *)v9 + v6[6]) = 0;
  uint64_t v21 = v26;
  *uint64_t v9 = v25;
  *(uint64_t *)((char *)v9 + v6[7]) = v21;
  (*(void (**)(char *, char *, uint64_t))(v27 + 40))(v16, v24, v28);
  v13[8] = (v21 & 2) != 0;
  v13[9] = (v21 & 4) != 0;
  outlined init with take of DSLTree.QuantificationKind( (uint64_t)v9,  (uint64_t)v11,  type metadata accessor for Compiler.ByteCodeGen);
  Compiler.ByteCodeGen.emitRoot(_:)(v2[2], v29);
  outlined destroy of MEProgram((uint64_t)v11, type metadata accessor for Compiler.ByteCodeGen);
  return swift_release();
}

uint64_t Compiler.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AnyHashableType()
{
  return _typeName(_:qualified:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AnyHashableType()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AnyHashableType()
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AnyHashableType()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t RegexCompilationError.description.getter(uint64_t a1, uint64_t a2, char a3)
{
  if (!a3)
  {
    _StringGuts.grow(_:)(56LL);
    v6._Swift::Int countAndFlagsBits = 0xD00000000000001ELL;
    v6._object = (void *)0x8000000182DA32A0LL;
    String.append(_:)(v6);
    v7._Swift::Int countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    v8._object = (void *)0x8000000182DA32C0LL;
    v8._Swift::Int countAndFlagsBits = 0xD000000000000014LL;
    String.append(_:)(v8);
    v9._Swift::Int countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    unint64_t v4 = 10046LL;
    unint64_t v5 = 0xE200000000000000LL;
    goto LABEL_5;
  }

  if (a3 == 1)
  {
    _StringGuts.grow(_:)(50LL);
    v3._Swift::Int countAndFlagsBits = 39LL;
    v3._object = (void *)0xE100000000000000LL;
    String.append(_:)(v3);
    Character.write<A>(to:)();
    unint64_t v4 = 0xD00000000000002FLL;
    unint64_t v5 = 0x8000000182DA3270LL;
LABEL_5:
    String.append(_:)(*(Swift::String *)&v4);
    return 0LL;
  }

  return 0xD000000000000034LL;
}

void RegexCompilationError.hash(into:)(uint64_t a1, Swift::UInt a2, Swift::UInt a3, char a4)
{
  if (a4)
  {
    if (a4 == 1)
    {
      Hasher._combine(_:)(2uLL);
      JUMPOUT(0x186E16E84LL);
    }

    Swift::UInt v6 = 0LL;
  }

  else
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(a2);
    Swift::UInt v6 = a3;
  }

  Hasher._combine(_:)(v6);
}

Swift::Int RegexCompilationError.hashValue.getter(Swift::UInt a1, Swift::UInt a2, char a3)
{
  if (!a3)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(a1);
    Swift::UInt v6 = a2;
LABEL_6:
    Hasher._combine(_:)(v6);
    return Hasher._finalize()();
  }

  if (a3 != 1)
  {
    Swift::UInt v6 = 0LL;
    goto LABEL_6;
  }

  Hasher._combine(_:)(2uLL);
  MEMORY[0x186E16E84](v8, a1, a2);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance RegexCompilationError()
{
  return RegexCompilationError.hashValue.getter(*(void *)v0, *(void *)(v0 + 8), *(_BYTE *)(v0 + 16));
}

void protocol witness for Hashable.hash(into:) in conformance RegexCompilationError(uint64_t a1)
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RegexCompilationError()
{
  Swift::UInt v2 = *(void *)v0;
  Swift::UInt v1 = *(void *)(v0 + 8);
  int v3 = *(unsigned __int8 *)(v0 + 16);
  Hasher.init(_seed:)();
  if (!v3)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v2);
    Swift::UInt v4 = v1;
LABEL_6:
    Hasher._combine(_:)(v4);
    return Hasher._finalize()();
  }

  if (v3 != 1)
  {
    Swift::UInt v4 = 0LL;
    goto LABEL_6;
  }

  Hasher._combine(_:)(2uLL);
  MEMORY[0x186E16E84](v6, v2, v1);
  return Hasher._finalize()();
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance RegexCompilationError()
{
  return RegexCompilationError.description.getter(*(void *)v0, *(void *)(v0 + 8), *(_BYTE *)(v0 + 16));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RegexCompilationError( uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  int v6 = *((unsigned __int8 *)a1 + 16);
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  int v9 = *((unsigned __int8 *)a2 + 16);
  if (v6)
  {
    if (v6 == 1)
    {
      if (v9 == 1)
      {
        if (v4 != v7 || v5 != v8) {
          return _stringCompareWithSmolCheck(_:_:expecting:)();
        }
        return 1LL;
      }
    }

    else if (v9 == 2 && (v8 | v7) == 0)
    {
      return 1LL;
    }

    return 0LL;
  }

  if (v9) {
    return 0LL;
  }
  return v4 == v7 && v5 == v8;
}

uint64_t _CompileOptions.rawValue.getter()
{
  return *(void *)v0;
}

_StringProcessing::_CompileOptions __swiftcall _CompileOptions.init(rawValue:)( _StringProcessing::_CompileOptions rawValue)
{
  v1->unint64_t rawValue = rawValue.rawValue;
  return rawValue;
}

void static _CompileOptions.disableOptimizations.getter(void *a1@<X8>)
{
  *a1 = 1LL;
}

void static _CompileOptions.enableTracing.getter(void *a1@<X8>)
{
  *a1 = 2LL;
}

void static _CompileOptions.enableMetrics.getter(void *a1@<X8>)
{
  *a1 = 4LL;
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = 0LL;
    uint64_t v5 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v7 = *v5++;
      uint64_t v6 = v7;
      if ((v7 & ~v4) == 0) {
        uint64_t v6 = 0LL;
      }
      v4 |= v6;
      --v3;
    }

    while (v3);
  }

  else
  {
    uint64_t v4 = 0LL;
  }

  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t static _CompileOptions.default.getter@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for default != -1) {
    uint64_t result = swift_once();
  }
  *a1 = 0LL;
  return result;
}

void *protocol witness for OptionSet.init(rawValue:) in conformance _CompileOptions@<X0>( void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void protocol witness for SetAlgebra.init() in conformance _CompileOptions(void *a1@<X8>)
{
  *a1 = 0LL;
}

void *protocol witness for SetAlgebra.union(_:) in conformance _CompileOptions@<X0>( void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

void *protocol witness for SetAlgebra.intersection(_:) in conformance _CompileOptions@<X0>( void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

void *protocol witness for SetAlgebra.symmetricDifference(_:) in conformance _CompileOptions@<X0>( void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance _CompileOptions(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

void *protocol witness for SetAlgebra.remove(_:) in conformance _CompileOptions@<X0>( void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(void *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *protocol witness for SetAlgebra.update(with:) in conformance _CompileOptions@<X0>( uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  *v2 |= *result;
  uint64_t v5 = v4 & v3;
  *(void *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

void *protocol witness for SetAlgebra.formUnion(_:) in conformance _CompileOptions(void *result)
{
  *v1 |= *result;
  return result;
}

void *protocol witness for SetAlgebra.formIntersection(_:) in conformance _CompileOptions(void *result)
{
  *v1 &= *result;
  return result;
}

void *protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance _CompileOptions( void *result)
{
  *v1 ^= *result;
  return result;
}

void *protocol witness for SetAlgebra.subtracting(_:) in conformance _CompileOptions@<X0>( void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance _CompileOptions(void *a1)
{
  return (*v1 & ~*a1) == 0LL;
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance _CompileOptions(void *a1)
{
  return (*v1 & *a1) == 0LL;
}

BOOL protocol witness for SetAlgebra.isSuperset(of:) in conformance _CompileOptions(void *a1)
{
  return (*a1 & ~*v1) == 0LL;
}

BOOL protocol witness for SetAlgebra.isEmpty.getter in conformance _CompileOptions()
{
  return *v0 == 0LL;
}

uint64_t protocol witness for SetAlgebra.init<A>(_:) in conformance _CompileOptions()
{
  return SetAlgebra.init<A>(_:)();
}

void *protocol witness for SetAlgebra.subtract(_:) in conformance _CompileOptions(void *result)
{
  *v1 &= ~*result;
  return result;
}

uint64_t AST.Atom.singleScalarASCIIValue.getter()
{
  uint64_t v0 = type metadata accessor for AST.Atom.Kind();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1895F8858](v0);
  uint64_t v3 = (uint64_t *)((char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  unint64_t v4 = AST.Atom.singleScalar.getter();
  if ((v4 & 0x1FFFFFF80LL) != 0)
  {
    AST.Atom.kind.getter();
    if ((*(unsigned int (**)(void *, uint64_t))(v1 + 88))(v3, v0) == *MEMORY[0x18961C748])
    {
      (*(void (**)(void *, uint64_t))(v1 + 96))(v3, v0);
      BOOL v5 = *v3 == 2573LL && v3[1] == 0xE200000000000000LL;
      if (!v5 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        unsigned int v6 = Character.asciiValue.getter();
        swift_bridgeObjectRelease();
        int v7 = (v6 >> 8) & 1;
        return v6 | (v7 << 8);
      }

      swift_bridgeObjectRelease();
    }

    else
    {
      (*(void (**)(void *, uint64_t))(v1 + 8))(v3, v0);
    }

    LOBYTE(v6) = 0;
    int v7 = 1;
  }

  else
  {
    LOBYTE(v6) = v4;
    int v7 = 0;
  }

  return v6 | (v7 << 8);
}

uint64_t DSLTree.Atom.singleScalarASCIIValue.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DSLTree._AST.Atom(0LL);
  MEMORY[0x1895F8858](v2);
  unint64_t v4 = &v23[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v5 = type metadata accessor for DSLTree.Atom(0LL);
  uint64_t v6 = MEMORY[0x1895F8858](v5);
  uint64_t v8 = &v23[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v9 = MEMORY[0x1895F8858](v6);
  uint64_t v11 = &v23[-v10];
  uint64_t v12 = MEMORY[0x1895F8858](v9);
  uint64_t v14 = &v23[-v13];
  MEMORY[0x1895F8858](v12);
  uint64_t v16 = &v23[-v15];
  outlined init with copy of MEProgram(v1, (uint64_t)&v23[-v15], v17);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 7)
  {
    outlined init with copy of MEProgram((uint64_t)v16, (uint64_t)v8, type metadata accessor for DSLTree.Atom);
    outlined init with take of DSLTree.QuantificationKind( (uint64_t)v8,  (uint64_t)v4,  type metadata accessor for DSLTree._AST.Atom);
    unsigned int v21 = AST.Atom.singleScalarASCIIValue.getter();
    LOBYTE(v8) = v21;
    int v20 = (v21 >> 8) & 1;
    outlined destroy of MEProgram((uint64_t)v4, type metadata accessor for DSLTree._AST.Atom);
  }

  else if (EnumCaseMultiPayload == 1)
  {
    outlined init with copy of MEProgram((uint64_t)v16, (uint64_t)v11, type metadata accessor for DSLTree.Atom);
    int v20 = *v11 > 0x7Fu;
    if (*v11 <= 0x7Fu) {
      LOBYTE(v8) = *v11;
    }
    else {
      LOBYTE(v8) = 0;
    }
  }

  else
  {
    if (!EnumCaseMultiPayload)
    {
      outlined init with copy of MEProgram((uint64_t)v16, (uint64_t)v14, type metadata accessor for DSLTree.Atom);
      BOOL v19 = *v14 == 2573LL && v14[1] == 0xE200000000000000LL;
      if (!v19 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        LODWORD(v8) = Character.asciiValue.getter();
        swift_bridgeObjectRelease();
        int v20 = (v8 >> 8) & 1;
        goto LABEL_16;
      }

      swift_bridgeObjectRelease();
    }

    LOBYTE(v8) = 0;
    int v20 = 1;
  }

LABEL_16:
  outlined destroy of MEProgram((uint64_t)v16, type metadata accessor for DSLTree.Atom);
  return v8 | (v20 << 8);
}

  uint64_t v18 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1LL << a3;
  BOOL v19 = (Swift::Int *)(*(void *)(v18 + 48) + 16 * a3);
  *BOOL v19 = v8;
  v19[1] = a2;
  int v20 = *(void *)(v18 + 16);
  unsigned int v21 = __OFADD__(v20, 1LL);
  int64_t v22 = v20 + 1;
  if (!v21)
  {
    *(void *)(v18 + 16) = v22;
    return result;
  }

  __break(1u);
LABEL_19:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

  __int128 v36 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v15 + 16);
  v36(v23, v24, v14);
  v36((_BYTE *)((unint64_t)&v23[v49] & v50), (_BYTE *)((unint64_t)&v24[v49] & v50), v14);
  __int128 v37 = v53;
  __int128 v38 = v54;
  if (!(_DWORD)v25) {
    v23[v27] = 0;
  }
LABEL_35:
  if ((_DWORD)v25) {
    unsigned int v44 = v27;
  }
  else {
    unsigned int v44 = v27 + 1;
  }
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v56 + 24))( (unint64_t)&v23[v18 + v44] & ~v18,  (unint64_t)&v24[v18 + v44] & ~v18,  v37);
  int v45 = ((v44 + v18) & ~v18) + (((v59 & v58) + v57 + v19) & v22) + *(void *)(v56 + 64);
  uint64_t v46 = (v38 + v45 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v47 = (v32 + v45 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  *(void *)uint64_t v46 = *(void *)v47;
  *(_BYTE *)(v46 + 8) = *(_BYTE *)(v47 + 8);
  return v38;
}

  __int128 v36 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v15 + 32);
  v36(v23, v24, v14);
  v36((_BYTE *)((unint64_t)&v23[v49] & v50), (_BYTE *)((unint64_t)&v24[v49] & v50), v14);
  __int128 v37 = v53;
  __int128 v38 = v54;
  if (!(_DWORD)v25) {
    v23[v27] = 0;
  }
LABEL_35:
  if ((_DWORD)v25) {
    unsigned int v44 = v27;
  }
  else {
    unsigned int v44 = v27 + 1;
  }
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v56 + 40))( (unint64_t)&v23[v18 + v44] & ~v18,  (unint64_t)&v24[v18 + v44] & ~v18,  v37);
  int v45 = ((v44 + v18) & ~v18) + (((v59 & v58) + v57 + v19) & v22) + *(void *)(v56 + 64);
  uint64_t v46 = (v38 + v45 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v47 = (v32 + v45 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  *(void *)uint64_t v46 = *(void *)v47;
  *(_BYTE *)(v46 + 8) = *(_BYTE *)(v47 + 8);
  return v38;
}

  uint64_t v17 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 16);
  v17(a1, a2, AssociatedTypeWitness);
  v17((_BYTE *)((unint64_t)&a1[v28] & v27), (_BYTE *)((unint64_t)&a2[v28] & v27), AssociatedTypeWitness);
  if (!(_DWORD)v6) {
    a1[v10] = 0;
  }
LABEL_34:
  if ((_DWORD)v6) {
    uint64_t v23 = v10;
  }
  else {
    uint64_t v23 = v10 + 1;
  }
  uint64_t v24 = swift_getAssociatedTypeWitness();
  uint64_t v25 = *(void *)(v24 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v25 + 24))( (unint64_t)&a1[v23 + *(unsigned __int8 *)(v25 + 80)] & ~(unint64_t)*(unsigned __int8 *)(v25 + 80),  (unint64_t)&a2[v23 + *(unsigned __int8 *)(v25 + 80)] & ~(unint64_t)*(unsigned __int8 *)(v25 + 80),  v24);
  return a1;
}

  uint64_t v17 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 32);
  v17(a1, a2, AssociatedTypeWitness);
  v17((_BYTE *)((unint64_t)&a1[v28] & v27), (_BYTE *)((unint64_t)&a2[v28] & v27), AssociatedTypeWitness);
  if (!(_DWORD)v6) {
    a1[v10] = 0;
  }
LABEL_34:
  if ((_DWORD)v6) {
    uint64_t v23 = v10;
  }
  else {
    uint64_t v23 = v10 + 1;
  }
  uint64_t v24 = swift_getAssociatedTypeWitness();
  uint64_t v25 = *(void *)(v24 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v25 + 40))( (unint64_t)&a1[v23 + *(unsigned __int8 *)(v25 + 80)] & ~(unint64_t)*(unsigned __int8 *)(v25 + 80),  (unint64_t)&a2[v23 + *(unsigned __int8 *)(v25 + 80)] & ~(unint64_t)*(unsigned __int8 *)(v25 + 80),  v24);
  return a1;
}

BOOL String.isEqualByUAX44LM2(to:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a2;
  uint64_t v5 = a1;
  uint64_t v6 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000LL) == 0) {
    uint64_t v6 = a3 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v7 = 4 * v6;
  uint64_t v46 = HIBYTE(a2) & 0xF;
  if (!v6)
  {
    unint64_t v8 = 0LL;
    unint64_t v12 = 15LL;
LABEL_39:
    uint64_t v36 = v5 & 0xFFFFFFFFFFFFLL;
    if ((v4 & 0x2000000000000000LL) != 0) {
      uint64_t v36 = v46;
    }
    BOOL v37 = v12 >> 14 == 4 * v36;
    return v8 == v7 && v37;
  }

  unint64_t v8 = 0LL;
  uint64_t v9 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v9 = HIBYTE(a2) & 0xF;
  }
  unint64_t v10 = 4 * v9;
  unint64_t v11 = 15LL;
  unint64_t v12 = 15LL;
  while (2)
  {
    uint64_t v13 = v5;
    unint64_t v45 = v12;
    unint64_t v14 = v12 >> 14;
    while (1)
    {
      if (v14 >= v10) {
        goto LABEL_38;
      }
      String.subscript.getter();
      char v16 = Character.isWhitespace.getter();
      swift_bridgeObjectRelease();
      if ((v16 & 1) != 0) {
        goto LABEL_9;
      }
      if (String.subscript.getter() != 45 || v17 != 0xE100000000000000LL)
      {
        char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v18 & 1) != 0) {
          goto LABEL_9;
        }
        if (String.subscript.getter() != 95 || v19 != 0xE100000000000000LL) {
          break;
        }
      }

      swift_bridgeObjectRelease();
LABEL_9:
      unint64_t v15 = String.index(after:)();
      unint64_t v11 = v15;
      if (v15 >> 14 >= v7)
      {
        unint64_t v8 = v15 >> 14;
LABEL_38:
        uint64_t v5 = v13;
        unint64_t v4 = a2;
        unint64_t v12 = v45;
        goto LABEL_39;
      }
    }

    char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v20 & 1) != 0) {
      goto LABEL_9;
    }
    uint64_t v5 = v13;
    unint64_t v4 = a2;
    String.subscript.getter();
    char v21 = Character.isWhitespace.getter();
    swift_bridgeObjectRelease();
    if ((v21 & 1) != 0) {
      goto LABEL_23;
    }
    if (String.subscript.getter() == 45 && v22 == 0xE100000000000000LL)
    {
LABEL_21:
      swift_bridgeObjectRelease();
      goto LABEL_23;
    }

    char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v23 & 1) != 0) {
      goto LABEL_23;
    }
    if (String.subscript.getter() == 95 && v24 == 0xE100000000000000LL) {
      goto LABEL_21;
    }
    char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v25 & 1) != 0)
    {
LABEL_23:
      unint64_t v12 = String.index(after:)();
      unint64_t v8 = v11 >> 14;
      if (v11 >> 14 < v7) {
        continue;
      }
      goto LABEL_39;
    }

    break;
  }

  uint64_t v26 = String.subscript.getter();
  uint64_t v28 = v27;
  if (v26 == String.subscript.getter() && v28 == v29)
  {
LABEL_30:
    swift_bridgeObjectRelease_n();
    goto LABEL_35;
  }

  char v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v42 & 1) != 0) {
    goto LABEL_35;
  }
  uint64_t v30 = String.subscript.getter();
  uint64_t v31 = MEMORY[0x186E16E24](v30);
  uint64_t v39 = v32;
  uint64_t v40 = v31;
  swift_bridgeObjectRelease();
  uint64_t v33 = String.subscript.getter();
  uint64_t v34 = MEMORY[0x186E16E24](v33);
  uint64_t v43 = v35;
  swift_bridgeObjectRelease();
  if (v40 == v34 && v39 == v43) {
    goto LABEL_30;
  }
  char v41 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v41 & 1) != 0)
  {
LABEL_35:
    unint64_t v11 = String.index(after:)();
    goto LABEL_23;
  }

  return 0LL;
}

uint64_t consumeName(_:opts:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 16);
  if (v3)
  {
    uint64_t v5 = result;
    if ((*(_DWORD *)(a3 + 4 * v3 + 28) & 0x10000) != 0) {
      uint64_t v6 = (uint64_t (*)(uint64_t (*)(uint64_t), uint64_t))consumeCharacterWithLeadingScalar(_:);
    }
    else {
      uint64_t v6 = (uint64_t (*)(uint64_t (*)(uint64_t), uint64_t))consumeScalar(_:);
    }
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = v5;
    *(void *)(v7 + 24) = a2;
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = partial apply for closure #1 in consumeName(_:opts:);
    *(void *)(v8 + 24) = v7;
    swift_bridgeObjectRetain();
    uint64_t v9 = v6(partial apply for closure #1 in propertyScalarPredicate(_:), v8);
    swift_release();
    return v9;
  }

  else
  {
    __break(1u);
  }

  return result;
}

BOOL closure #1 in consumeName(_:opts:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = Unicode.Scalar.Properties.name.getter();
  if (v11)
  {
    BOOL v12 = String.isEqualByUAX44LM2(to:)(a2, a3, v10, v11);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
    if (v12)
    {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      return 1;
    }
  }

  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  }

  uint64_t v14 = Unicode.Scalar.Properties.nameAlias.getter();
  unint64_t v16 = v15;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if (v16)
  {
    BOOL v13 = String.isEqualByUAX44LM2(to:)(a2, a3, v14, v16);
    swift_bridgeObjectRelease();
  }

  else
  {
    return 0;
  }

  return v13;
}

unint64_t AST.Atom.singleScalar.getter()
{
  uint64_t v0 = type metadata accessor for AST.Atom.EscapedBuiltin();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1895F8858](v0);
  uint64_t v3 = &v16[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v4 = type metadata accessor for AST.Atom.Scalar();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  uint64_t v7 = &v16[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v8 = type metadata accessor for AST.Atom.Kind();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v8);
  unint64_t v11 = &v16[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  AST.Atom.kind.getter();
  int v12 = (*(uint64_t (**)(_BYTE *, uint64_t))(v9 + 88))(v11, v8);
  if (v12 == *MEMORY[0x18961C750])
  {
    (*(void (**)(_BYTE *, uint64_t))(v9 + 96))(v11, v8);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 32))(v7, v11, v4);
    unsigned int v13 = AST.Atom.Scalar.value.getter();
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
    LOBYTE(v4) = 0;
  }

  else if (v12 == *MEMORY[0x18961C760])
  {
    (*(void (**)(_BYTE *, uint64_t))(v9 + 96))(v11, v8);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v1 + 32))(v3, v11, v0);
    unint64_t v14 = AST.Atom.EscapedBuiltin.scalarValue.getter();
    unsigned int v13 = v14;
    uint64_t v4 = HIDWORD(v14) & 1;
    (*(void (**)(_BYTE *, uint64_t))(v1 + 8))(v3, v0);
  }

  else
  {
    (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
    unsigned int v13 = 0;
    LOBYTE(v4) = 1;
  }

  return v13 | ((unint64_t)v4 << 32);
}

unint64_t DSLTree.CustomCharacterClass.Member.asAsciiBitset(_:_:)(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DSLTree.Atom(0LL);
  uint64_t v7 = MEMORY[0x1895F8858](v6);
  uint64_t v9 = (uint64_t)v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = MEMORY[0x1895F8858](v7);
  object = (char *)v39 - v11;
  MEMORY[0x1895F8858](v10);
  unint64_t v14 = (char *)v39 - v13;
  uint64_t v15 = type metadata accessor for DSLTree.CustomCharacterClass.Member(0LL);
  MEMORY[0x1895F8858](v15);
  uint64_t countAndFlagsBits = (uint64_t)v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of MEProgram(v3, countAndFlagsBits, v18);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload != 3)
  {
    if (EnumCaseMultiPayload == 1)
    {
LABEL_33:
      uint64_t v33 = countAndFlagsBits
      outlined init with take of DSLTree.QuantificationKind( countAndFlagsBits,  (uint64_t)object,  type metadata accessor for DSLTree.Atom);
      outlined init with take of DSLTree.QuantificationKind(v33, v9, type metadata accessor for DSLTree.Atom);
      uint64_t v34 = DSLTree.Atom.singleScalarASCIIValue.getter();
      outlined destroy of MEProgram((uint64_t)object, type metadata accessor for DSLTree.Atom);
      if ((v34 & 0x100) == 0)
      {
        __int16 v35 = DSLTree.Atom.singleScalarASCIIValue.getter();
        unint64_t result = outlined destroy of MEProgram(v9, type metadata accessor for DSLTree.Atom);
        if ((v35 & 0x100) == 0)
        {
          uint64_t v36 = *(void *)(a1 + 16);
          if (!v36) {
            goto LABEL_46;
          }
          char v22 = specialized DSLTree.CustomCharacterClass.AsciiBitset.init(low:high:isInverted:isCaseInsensitive:)( v34,  v35,  a2 & 1,  *(_DWORD *)(a1 + 4 * v36 + 28) & 1);
          return v22 & 1;
        }

        return 2LL;
      }

      BOOL v37 = type metadata accessor for DSLTree.Atom;
      uint64_t v38 = v9;
    }

    else
    {
      if (!EnumCaseMultiPayload)
      {
        outlined init with take of DSLTree.QuantificationKind( countAndFlagsBits,  (uint64_t)v14,  type metadata accessor for DSLTree.Atom);
        uint64_t v20 = DSLTree.Atom.singleScalarASCIIValue.getter();
        unint64_t result = outlined destroy of MEProgram((uint64_t)v14, type metadata accessor for DSLTree.Atom);
        if ((v20 & 0x100) == 0)
        {
          if (!*(void *)(a1 + 16)) {
            goto LABEL_45;
          }
          char v22 = specialized DSLTree.CustomCharacterClass.AsciiBitset.init(_:_:_:)(v20, a2 & 1);
          return v22 & 1;
        }

        return 2LL;
      }

      BOOL v37 = type metadata accessor for DSLTree.CustomCharacterClass.Member;
      uint64_t v38 = countAndFlagsBits;
    }

    outlined destroy of MEProgram(v38, v37);
    return 2LL;
  }

  unint64_t v23 = *(void *)(countAndFlagsBits + 8);
  uint64_t v24 = HIBYTE(v23) & 0xF;
  if ((v23 & 0x2000000000000000LL) == 0) {
    uint64_t v24 = *(void *)countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  }
  v39[0] = *(void *)countAndFlagsBits;
  v39[1] = v23;
  v39[2] = 0LL;
  v39[3] = v24;
  Swift::String_optional v25 = String.Iterator.next()();
  if (!v25.value._object)
  {
LABEL_41:
    swift_bridgeObjectRelease();
    return a2 & 1;
  }

  uint64_t countAndFlagsBits = v25.value._countAndFlagsBits;
  object = (char *)v25.value._object;
  uint64_t v26 = 0LL;
  uint64_t v9 = 0LL;
  while (1)
  {
    if (countAndFlagsBits == 2573 && object == (char *)0xE200000000000000LL
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_42:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return 2LL;
    }

    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      break;
    }
    swift_bridgeObjectRelease();
    unsigned int v30 = 10;
    uint64_t v31 = *(void *)(a1 + 16);
    if (!v31)
    {
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }

LABEL_23:
    if (v30 <= 0x3F)
    {
      uint64_t v27 = 0LL;
      uint64_t v28 = 1LL << v30;
    }

    else
    {
      if ((char)v30 > 63)
      {
        int v32 = *(_DWORD *)(a1 + 32 + 4 * v31 - 4);
        uint64_t v27 = 1LL << v30;
        if ((v32 & 1) != 0 && (v30 <= 0x5A || v30 - 123 >= 0xFFFFFFE6))
        {
          uint64_t v28 = 0LL;
          v27 |= 1LL << (v30 + 32);
          goto LABEL_12;
        }
      }

      else
      {
        uint64_t v27 = 0LL;
      }

      uint64_t v28 = 0LL;
    }

    uint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v18 >> 14);
    unint64_t result = Hasher._finalize()();
    uint64_t v19 = -1LL << *(_BYTE *)(v4 + 32);
    uint64_t v20 = result & ~v19;
    char v21 = v20 >> 6;
    if (((-1LL << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      int v12 = __clz(__rbit64((-1LL << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v24 = v21 == v23;
        if (v21 == v23) {
          char v21 = 0LL;
        }
        v22 |= v24;
        Swift::String_optional v25 = *(void *)(v11 + 8 * v21);
      }

      while (v25 == -1);
      int v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }

    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v12;
    *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
    ++*(void *)(v4 + 16);
  }

  uint64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t v26 = *(_BYTE *)(v2 + 32);
    uint64_t v27 = 1LL << v26;
    if (1LL << v26 > 63)
    {
      uint64_t v28 = (unint64_t)(v27 + 63) >> 6;
      if ((v26 & 0x3Fu) >= 8)
      {
        Swift::String_optional v29 = v28 & 0x3FFFFFFFFFFFFFCLL;
        unsigned int v30 = (_OWORD *)(v2 + 72);
        uint64_t v31 = v28 & 0x3FFFFFFFFFFFFFCLL;
        do
        {
          *(v30 - 1) = 0uLL;
          *unsigned int v30 = 0uLL;
          v30 += 2;
          v31 -= 4LL;
        }

        while (v31);
        uint64_t v1 = v0;
        if (v28 == v29) {
          goto LABEL_42;
        }
      }

      else
      {
        Swift::String_optional v29 = 0LL;
        uint64_t v1 = v0;
      }

      int v32 = v28 - v29;
      uint64_t v33 = (void *)(v2 + 8 * v29 + 56);
      do
      {
        *v33++ = 0LL;
        --v32;
      }

      while (v32);
    }

    else
    {
      *uint64_t v6 = -1LL << v27;
      uint64_t v1 = v0;
    }

    uint64_t v8 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    uint64_t v18 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v14);
    uint64_t v19 = *v18;
    uint64_t v20 = v18[1];
    Hasher.init(_seed:)();
    MEMORY[0x186E16E84](v37, v19, v20);
    unint64_t result = Hasher._finalize()();
    char v21 = -1LL << *(_BYTE *)(v4 + 32);
    char v22 = result & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1LL << v22) & ~*(void *)(v10 + 8 * (v22 >> 6))) != 0)
    {
      uint64_t v11 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v24 = 0;
      Swift::String_optional v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v26 = v23 == v25;
        if (v23 == v25) {
          unint64_t v23 = 0LL;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v10 + 8 * v23);
      }

      while (v27 == -1);
      uint64_t v11 = __clz(__rbit64(~v27)) + (v23 << 6);
    }

    *(void *)(v10 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v11;
    int v12 = (void *)(*(void *)(v4 + 48) + 16 * v11);
    *int v12 = v19;
    v12[1] = v20;
    ++*(void *)(v4 + 16);
  }

  uint64_t v17 = v15 + 3;
  if (v17 >= v9)
  {
LABEL_33:
    uint64_t v28 = *(_BYTE *)(v2 + 32);
    Swift::String_optional v29 = 1LL << v28;
    if (1LL << v28 > 63)
    {
      unsigned int v30 = (unint64_t)(v29 + 63) >> 6;
      if ((v28 & 0x3Fu) >= 8)
      {
        uint64_t v31 = v30 & 0x3FFFFFFFFFFFFFCLL;
        int v32 = (_OWORD *)(v2 + 72);
        uint64_t v33 = v30 & 0x3FFFFFFFFFFFFFCLL;
        do
        {
          *(v32 - 1) = 0uLL;
          *int v32 = 0uLL;
          v32 += 2;
          v33 -= 4LL;
        }

        while (v33);
        uint64_t v1 = v0;
        if (v30 == v31) {
          goto LABEL_42;
        }
      }

      else
      {
        uint64_t v31 = 0LL;
        uint64_t v1 = v0;
      }

      uint64_t v34 = v30 - v31;
      __int16 v35 = (void *)(v2 + 8 * v31 + 56);
      do
      {
        *v35++ = 0LL;
        --v34;
      }

      while (v34);
    }

    else
    {
      uint64_t v1 = v0;
      *uint64_t v36 = -1LL << v29;
    }

    uint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    uint64_t v18 = *(_DWORD *)(*(void *)(v2 + 48) + 4 * v14);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v18);
    unint64_t result = Hasher._finalize()();
    uint64_t v19 = -1LL << *(_BYTE *)(v4 + 32);
    uint64_t v20 = result & ~v19;
    char v21 = v20 >> 6;
    if (((-1LL << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      int v12 = __clz(__rbit64((-1LL << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v24 = v21 == v23;
        if (v21 == v23) {
          char v21 = 0LL;
        }
        v22 |= v24;
        Swift::String_optional v25 = *(void *)(v11 + 8 * v21);
      }

      while (v25 == -1);
      int v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }

    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v12;
    *(_DWORD *)(*(void *)(v4 + 48) + 4 * v12) = v18;
    ++*(void *)(v4 + 16);
  }

  uint64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t v26 = *(_BYTE *)(v2 + 32);
    uint64_t v27 = 1LL << v26;
    if (1LL << v26 > 63)
    {
      uint64_t v28 = (unint64_t)(v27 + 63) >> 6;
      if ((v26 & 0x3Fu) >= 8)
      {
        Swift::String_optional v29 = v28 & 0x3FFFFFFFFFFFFFCLL;
        unsigned int v30 = (_OWORD *)(v2 + 72);
        uint64_t v31 = v28 & 0x3FFFFFFFFFFFFFCLL;
        do
        {
          *(v30 - 1) = 0uLL;
          *unsigned int v30 = 0uLL;
          v30 += 2;
          v31 -= 4LL;
        }

        while (v31);
        uint64_t v1 = v0;
        if (v28 == v29) {
          goto LABEL_42;
        }
      }

      else
      {
        Swift::String_optional v29 = 0LL;
        uint64_t v1 = v0;
      }

      int v32 = v28 - v29;
      uint64_t v33 = (void *)(v2 + 8 * v29 + 56);
      do
      {
        *v33++ = 0LL;
        --v32;
      }

      while (v32);
    }

    else
    {
      *uint64_t v6 = -1LL << v27;
      uint64_t v1 = v0;
    }

    uint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v18 >> 14);
    unint64_t result = Hasher._finalize()();
    uint64_t v19 = -1LL << *(_BYTE *)(v4 + 32);
    uint64_t v20 = result & ~v19;
    char v21 = v20 >> 6;
    if (((-1LL << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      int v12 = __clz(__rbit64((-1LL << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }

        uint64_t v24 = v21 == v23;
        if (v21 == v23) {
          char v21 = 0LL;
        }
        v22 |= v24;
        Swift::String_optional v25 = *(void *)(v11 + 8 * v21);
      }

      while (v25 == -1);
      int v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }

    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v12;
    *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
    ++*(void *)(v4 + 16);
  }

  uint64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    unint64_t result = swift_release();
    uint64_t v1 = v0;
    goto LABEL_35;
  }

  uint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    uint64_t v5 = v17;
    goto LABEL_23;
  }

  while (1)
  {
    uint64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    uint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }

    uint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    uint64_t v18 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v14);
    uint64_t v20 = *v18;
    uint64_t v19 = v18[1];
    Hasher.init(_seed:)();
    MEMORY[0x186E16E84](v29, v20, v19);
    unint64_t result = Hasher._finalize()();
    char v21 = -1LL << *(_BYTE *)(v4 + 32);
    char v22 = result & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1LL << v22) & ~*(void *)(v10 + 8 * (v22 >> 6))) != 0)
    {
      uint64_t v11 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v24 = 0;
      Swift::String_optional v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }

        uint64_t v26 = v23 == v25;
        if (v23 == v25) {
          unint64_t v23 = 0LL;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v10 + 8 * v23);
      }

      while (v27 == -1);
      uint64_t v11 = __clz(__rbit64(~v27)) + (v23 << 6);
    }

    *(void *)(v10 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v11;
    int v12 = (void *)(*(void *)(v4 + 48) + 16 * v11);
    *int v12 = v20;
    v12[1] = v19;
    ++*(void *)(v4 + 16);
    unint64_t result = swift_bridgeObjectRetain();
  }

  uint64_t v17 = v15 + 3;
  if (v17 >= v28)
  {
LABEL_33:
    unint64_t result = swift_release();
    uint64_t v1 = v0;
    goto LABEL_35;
  }

  uint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    uint64_t v5 = v17;
    goto LABEL_23;
  }

  while (1)
  {
    uint64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v5 >= v28) {
      goto LABEL_33;
    }
    uint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }

    uint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    uint64_t v18 = *(_DWORD *)(*(void *)(v2 + 48) + 4 * v14);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v18);
    unint64_t result = Hasher._finalize()();
    uint64_t v19 = -1LL << *(_BYTE *)(v4 + 32);
    uint64_t v20 = result & ~v19;
    char v21 = v20 >> 6;
    if (((-1LL << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      int v12 = __clz(__rbit64((-1LL << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }

        uint64_t v24 = v21 == v23;
        if (v21 == v23) {
          char v21 = 0LL;
        }
        v22 |= v24;
        Swift::String_optional v25 = *(void *)(v11 + 8 * v21);
      }

      while (v25 == -1);
      int v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }

    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v12;
    *(_DWORD *)(*(void *)(v4 + 48) + 4 * v12) = v18;
    ++*(void *)(v4 + 16);
  }

  uint64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    unint64_t result = swift_release();
    uint64_t v1 = v0;
    goto LABEL_35;
  }

  uint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    uint64_t v5 = v17;
    goto LABEL_23;
  }

  while (1)
  {
    uint64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    uint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }

uint64_t Unicode.Scalar.isNFC.getter(unsigned int a1)
{
  uint64_t v2 = type metadata accessor for Unicode._NFC();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Unicode._NFC.Iterator();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int v10 = (a1 & 0x3F) << 8;
  unsigned int v11 = (v10 | (a1 >> 6)) + 33217;
  int v12 = (v10 | (a1 >> 6) & 0x3F) << 8;
  int v13 = (((v12 | (a1 >> 12) & 0x3F) << 8) | (a1 >> 18)) - 2122219023;
  int v14 = (v12 | (a1 >> 12)) + 8487393;
  if (HIWORD(a1)) {
    int v14 = v13;
  }
  if (a1 >= 0x800) {
    unsigned int v11 = v14;
  }
  if (a1 <= 0x7F) {
    unsigned int v11 = a1 + 1;
  }
  uint64_t v21 = (v11 + 0xFEFEFEFEFEFEFFLL) & ~(-1LL << (8 * (4 - (__clz(v11) >> 3))));
  uint64_t v15 = MEMORY[0x186E16FB0](&v21);
  MEMORY[0x186E16FBC](v15);
  Unicode._NFC.makeIterator()();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v16 = Unicode._NFC.Iterator.next()();
  if ((v16 & 0x100000000LL) != 0)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    return 0LL;
  }

  else
  {
    int v17 = v16;
    uint64_t v18 = Unicode._NFC.Iterator.next()();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    return BYTE4(v18) & (v17 == a1);
  }

uint64_t closure #1 in DSLTree.CustomCharacterClass.Member.generateConsumer(_:)( unint64_t a1, unint64_t a2, unint64_t a3, int a4, unsigned int a5, unsigned int a6, int a7)
{
  int v46 = a7;
  unsigned int v51 = a6;
  unsigned int v52 = a5;
  uint64_t v49 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v45 = *(void *)(v49 - 8);
  MEMORY[0x1895F8858](v49);
  uint64_t v48 = &v43[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v12 = type metadata accessor for Unicode._NFC();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1895F8858](v12);
  uint64_t v15 = &v43[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v50 = type metadata accessor for Unicode._NFC.Iterator();
  uint64_t v16 = *(void *)(v50 - 8);
  MEMORY[0x1895F8858](v50);
  uint64_t v18 = &v43[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  int v44 = a4;
  uint64_t v47 = String.index(after:isScalarSemantics:)(a3, (a4 & 1) == 0, a1, a2);
  if ((a4 & 1) == 0)
  {
    _StringGuts.validateScalarIndex(_:)(a3, a1, a2);
    if ((a2 & 0x1000000000000000LL) != 0) {
      goto LABEL_34;
    }
    unsigned int v24 = v52;
    if ((a2 & 0x2000000000000000LL) != 0)
    {
      unint64_t v53 = a1;
      uint64_t v54 = a2 & 0xFFFFFFFFFFFFFFLL;
    }

    else if ((a1 & 0x1000000000000000LL) == 0)
    {
      _StringObject.sharedUTF8.getter();
    }

    unsigned int v21 = _decodeScalar(_:startingAt:)();
    unsigned int v23 = v51;
    goto LABEL_12;
  }

  uint64_t v19 = String.subscript.getter();
  MEMORY[0x186E16FBC](v19);
  Unicode._NFC.makeIterator()();
  (*(void (**)(_BYTE *, uint64_t))(v13 + 8))(v15, v12);
  uint64_t v20 = Unicode._NFC.Iterator.next()();
  if ((v20 & 0x100000000LL) != 0)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(_BYTE *, uint64_t))(v16 + 8))(v18, v50);
  }

  else
  {
    unsigned int v21 = v20;
    uint64_t v22 = Unicode._NFC.Iterator.next()();
    swift_bridgeObjectRelease();
    (*(void (**)(_BYTE *, uint64_t))(v16 + 8))(v18, v50);
    if ((v22 & 0x100000000LL) != 0)
    {
      while (1)
      {
        unsigned int v23 = v51;
        unsigned int v24 = v52;
LABEL_12:
        if (v23 >= v24) {
          break;
        }
        __break(1u);
LABEL_34:
        unsigned int v21 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }

      if (v21 >= v24 && v21 <= v23) {
        return v47;
      }
      if ((v46 & 1) != 0)
      {
        uint64_t v26 = v48;
        Unicode.Scalar.properties.getter();
        char v27 = Unicode.Scalar.Properties.changesWhenLowercased.getter();
        uint64_t v28 = *(void (**)(_BYTE *, uint64_t))(v45 + 8);
        v28(v26, v49);
        if ((v27 & 1) != 0)
        {
          Swift::String_optional v29 = v48;
          Unicode.Scalar.properties.getter();
          uint64_t v30 = Unicode.Scalar.Properties.lowercaseMapping.getter();
          unint64_t v32 = v31;
          v28(v29, v49);
          unint64_t v33 = (v44 & 1) != 0 ? String.singleNFCScalar.getter(v30, v32) : String.singleScalar.getter(v30, v32);
          unint64_t v34 = v33;
          swift_bridgeObjectRelease();
        }

        __int16 v35 = v48;
        Unicode.Scalar.properties.getter();
        char v36 = Unicode.Scalar.Properties.changesWhenUppercased.getter();
        v28(v35, v49);
        if ((v36 & 1) != 0)
        {
          BOOL v37 = v48;
          Unicode.Scalar.properties.getter();
          uint64_t v38 = Unicode.Scalar.Properties.uppercaseMapping.getter();
          unint64_t v40 = v39;
          v28(v37, v49);
          unint64_t v41 = (v44 & 1) != 0 ? String.singleNFCScalar.getter(v38, v40) : String.singleScalar.getter(v38, v40);
          unint64_t v42 = v41;
          swift_bridgeObjectRelease();
        }
      }
    }
  }

  return 0LL;
}

uint64_t String.index(after:isScalarSemantics:)( unint64_t a1, char a2, unint64_t a3, unint64_t a4)
{
  if ((a2 & 1) == 0) {
    return String.index(after:)();
  }
  unint64_t v6 = _StringGuts.validateScalarIndex(_:)(a1, a3, a4);
  if ((a4 & 0x1000000000000000LL) != 0) {
    return String.UnicodeScalarView._foreignIndex(after:)();
  }
  unint64_t v7 = v6 >> 16;
  if ((a4 & 0x2000000000000000LL) != 0)
  {
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    int v9 = *((unsigned __int8 *)v14 + v7);
  }

  else
  {
    if ((a3 & 0x1000000000000000LL) != 0)
    {
      uint64_t v8 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
    }

    else
    {
      unint64_t v13 = v6 >> 16;
      uint64_t v8 = _StringObject.sharedUTF8.getter();
      unint64_t v7 = v13;
    }

    int v9 = *(unsigned __int8 *)(v8 + v7);
  }

  int v11 = (char)v9;
  unsigned int v12 = __clz(v9 ^ 0xFF) - 24;
  if (v11 >= 0) {
    LOBYTE(v12) = 1;
  }
  return ((v7 + v12) << 16) | 5;
}

unint64_t String.singleNFCScalar.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Unicode._NFC();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  unint64_t v7 = &v19[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v8 = type metadata accessor for Unicode._NFC.Iterator();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v8);
  int v11 = &v19[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v12 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v12 = a1 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t result = specialized Collection.first.getter(a1, a2);
  if (v14)
  {
    MEMORY[0x186E16FBC](result);
    Unicode._NFC.makeIterator()();
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
    uint64_t v15 = Unicode._NFC.Iterator.next()();
    if ((v15 & 0x100000000LL) != 0)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
    }

    else
    {
      unsigned int v16 = v15;
      uint64_t v17 = Unicode._NFC.Iterator.next()();
      swift_bridgeObjectRelease();
      (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
      if ((v17 & 0x100000000LL) != 0)
      {
        unsigned __int8 v18 = 0;
LABEL_12:
        v19[12] = v18;
        return v16 | ((unint64_t)v18 << 32);
      }
    }

LABEL_11:
    unsigned int v16 = 0;
    unsigned __int8 v18 = 1;
    goto LABEL_12;
  }

  __break(1u);
  return result;
}

    v18[(v12 >> 6) + 8] |= 1LL << v12;
    uint64_t v20 = (uint64_t *)(v18[6] + 16 * v12);
    *uint64_t v20 = a2;
    v20[1] = a3;
    *(void *)(v18[7] + 8 * v12) = a1;
    unsigned int v21 = v18[2];
    uint64_t v22 = __OFADD__(v21, 1LL);
    unsigned int v23 = v21 + 1;
    if (!v22)
    {
      v18[2] = v23;
      return swift_bridgeObjectRetain();
    }

    goto LABEL_14;
  }

  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a4 & 1);
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v16 & 1) == (v19 & 1))
  {
    uint64_t v12 = result;
    unsigned __int8 v18 = (void *)*v5;
    if ((v16 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    v15[(v10 >> 6) + 8] |= 1LL << v10;
    uint64_t v20 = 8 * v10;
    *(void *)(v15[6] + v20) = a2;
    *(void *)(v15[7] + v20) = a1;
    unsigned int v21 = v15[2];
    uint64_t v22 = __OFADD__(v21, 1LL);
    unsigned int v23 = v21 + 1;
    if (!v22)
    {
      unint64_t result = 0LL;
      _OWORD v15[2] = v23;
      return result;
    }

    goto LABEL_14;
  }

  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v12, a3 & 1);
  unsigned __int8 v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v13 & 1) == (v19 & 1))
  {
    uint64_t v10 = v18;
    uint64_t v15 = (void *)*v4;
    if ((v13 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    uint64_t v19 = 0x4000000000LL;
    goto LABEL_12;
  }

unint64_t String.singleScalar.getter(unint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    goto LABEL_16;
  }
  uint64_t v5 = 4 * v2;
  unint64_t v6 = _StringGuts.validateScalarIndex(_:)(0xFuLL, a1, a2);
  if ((a2 & 0x1000000000000000LL) != 0)
  {
LABEL_16:
    LODWORD(result) = 0;
    unsigned __int8 v13 = 1;
    goto LABEL_17;
  }

  unint64_t v7 = v6 >> 16;
  if ((a2 & 0x2000000000000000LL) != 0)
  {
    v14[0] = a1;
    v14[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    int v9 = *((unsigned __int8 *)v14 + v7);
  }

  else
  {
    if ((a1 & 0x1000000000000000LL) != 0) {
      uint64_t v8 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    }
    else {
      uint64_t v8 = _StringObject.sharedUTF8.getter();
    }
    int v9 = *(unsigned __int8 *)(v8 + v7);
  }

  int v10 = (char)v9;
  unsigned int v11 = __clz(v9 ^ 0xFF) - 24;
  if (v10 >= 0) {
    LOBYTE(v11) = 1;
  }
LABEL_13:
  unint64_t result = specialized Collection.first.getter(a1, a2);
  if ((result & 0x100000000LL) == 0)
  {
    unsigned __int8 v13 = 0;
LABEL_17:
    LOBYTE(v14[0]) = v13;
    return result | ((unint64_t)v13 << 32);
  }

  __break(1u);
  return result;
}

uint64_t closure #2 in DSLTree.CustomCharacterClass.Member.generateConsumer(_:)()
{
  return 0LL;
}

uint64_t closure #1 in scriptScalarPredicate(_:)(unsigned int a1)
{
  uint64_t v2 = type metadata accessor for Unicode.Script();
  uint64_t v3 = (uint64_t (*)(uint64_t))MEMORY[0x18961CDA0];
  uint64_t v4 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  unint64_t v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Unicode.Script.init(_:)(a1, (uint64_t)v6);
  lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind( &lazy protocol witness table cache variable for type Unicode.Script and conformance Unicode.Script,  v3,  MEMORY[0x18961CDB8]);
  dispatch thunk of RawRepresentable.rawValue.getter();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v2);
  dispatch thunk of RawRepresentable.rawValue.getter();
  if (v9[2] == v9[0] && v9[3] == v9[1]) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t Unicode.Script.init(_:)@<X0>(unsigned int a1@<W0>, uint64_t a2@<X8>)
{
  char Script = _swift_string_processing_getScript(a1);
  _StringGuts.grow(_:)(27LL);
  swift_bridgeObjectRelease();
  v7[0] = 0xD000000000000019LL;
  v7[1] = 0x8000000182DA3D50LL;
  v4._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  LOBYTE(v7[0]) = Script;
  uint64_t result = type metadata accessor for Unicode.Script();
  uint64_t v6 = *(void *)(result - 8);
  if (*(void *)(v6 + 64) == 1LL) {
    return (*(uint64_t (**)(uint64_t, void *, uint64_t))(v6 + 16))(a2, v7, result);
  }
  __break(1u);
  return result;
}

void *static Unicode.Script.extensions(for:)(unsigned int a1)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  uint64_t v2 = type metadata accessor for Unicode.Script();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  MEMORY[0x1895F8858](v2);
  unsigned __int8 v17 = 0;
  ScriptExtensions = _swift_string_processing_getScriptExtensions(a1, &v17);
  if (ScriptExtensions)
  {
    uint64_t v6 = v17;
    if (v17)
    {
      char v7 = ScriptExtensions;
      uint64_t v8 = (void *)MEMORY[0x18961AFE8];
      int v9 = MEMORY[0x18961CDA0];
      do
      {
        char v10 = *v7++;
        char v16 = v10;
        if (v4 != 1) {
          __break(1u);
        }
        (*(void (**)(_BYTE *, char *, uint64_t))(v3 + 16))(&v15[-16], &v16, v2);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v8 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v8[2] + 1LL,  1,  v8,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Unicode.Script>,  (uint64_t (*)(void))v9);
        }
        unint64_t v12 = v8[2];
        unint64_t v11 = v8[3];
        if (v12 >= v11 >> 1) {
          uint64_t v8 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v11 > 1,  v12 + 1,  1,  v8,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Unicode.Script>,  (uint64_t (*)(void))v9);
        }
        _OWORD v8[2] = v12 + 1;
        (*(void (**)(unint64_t, _BYTE *, uint64_t))(v3 + 32))( (unint64_t)v8 + ((*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))
        + *(void *)(v3 + 72) * v12,
          &v15[-16],
          v2);
        --v6;
      }

      while (v6);
    }

    else
    {
      return (void *)MEMORY[0x18961AFE8];
    }
  }

  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Unicode.Script>);
    unint64_t v13 = (*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
    uint64_t v8 = (void *)swift_allocObject();
    *((_OWORD *)v8 + 1) = xmmword_182D9CC00;
    Unicode.Script.init(_:)(a1, (uint64_t)v8 + v13);
  }

  return v8;
}

uint64_t closure #1 in categoryScalarPredicate(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for Unicode.GeneralCategory();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  char v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Unicode.Scalar.properties.getter();
  Unicode.Scalar.Properties.generalCategory.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  LOBYTE(a2) = MEMORY[0x186E175EC](a2, v6);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return a2 & 1;
}

BOOL closure #1 in categoriesScalarPredicate(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for Unicode.GeneralCategory();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  char v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Unicode.Scalar.properties.getter();
  Unicode.Scalar.Properties.generalCategory.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  uint64_t v11 = 0LL;
  uint64_t v12 = *(void *)(a2 + 16);
  do
  {
    uint64_t v13 = v11;
    if (v12 == v11) {
      break;
    }
    ++v11;
  }

  while ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v12 != v13;
}

uint64_t specialized closure #1 in propertyScalarPredicate(_:)()
{
  uint64_t v0 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = MEMORY[0x1895F8858](v0);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v2);
  uint64_t v6 = (char *)&v11 - v5;
  Unicode.Scalar.properties.getter();
  char v7 = Unicode.Scalar.Properties.isHexDigit.getter();
  (*(void (**)(char *, char *, uint64_t))(v1 + 16))(v4, v6, v0);
  if ((v7 & 1) != 0) {
    char v8 = Unicode.Scalar.Properties.isASCIIHexDigit.getter();
  }
  else {
    char v8 = 0;
  }
  uint64_t v9 = *(void (**)(char *, uint64_t))(v1 + 8);
  v9(v4, v0);
  v9(v6, v0);
  return v8 & 1;
}

uint64_t specialized closure #1 in propertyScalarPredicate(_:)(uint64_t a1)
{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, (uint64_t (*)(uint64_t))MEMORY[0x18961AC58]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x18961AC88]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x18961ACA8]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, (uint64_t (*)(uint64_t))MEMORY[0x18961ADC8]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x18961ACC8]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x18961AD48]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x18961AD50]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x18961AD90]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, (uint64_t (*)(uint64_t))MEMORY[0x18961AD58]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x18961AD60]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, (uint64_t (*)(uint64_t))MEMORY[0x18961AD68]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, (uint64_t (*)(uint64_t))MEMORY[0x18961ADB8]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x18961AC60]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x18961ADA0]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x18961AC38]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x18961AD18]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x18961ACD0]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x18961ADD0]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x18961AD20]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x18961AC18]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x18961AD98]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x18961ACB0]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x18961ACE8]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, (uint64_t (*)(uint64_t))MEMORY[0x18961AC20]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x18961AC68]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x18961AC90]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x18961ADD8]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x18961AD28]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x18961AD40]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, (uint64_t (*)(uint64_t))MEMORY[0x18961AC98]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x18961AD80]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x18961AC40]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x18961ADC0]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x18961AD88]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x18961ACD8]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x18961AD30]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x18961ACE0]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x18961ADE0]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x18961AC70]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x18961AD08]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x18961AD70]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x18961AD10]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x18961AC48]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x18961AD38]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, (uint64_t (*)(uint64_t))MEMORY[0x18961AC78]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x18961ACA0]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, MEMORY[0x18961AC28]);
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)( a1,  (uint64_t (*)(char *))closure #3 in Unicode.POSIXProperty.generateConsumer(_:));
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)( a1,  (uint64_t (*)(char *))closure #5 in Unicode.POSIXProperty.generateConsumer(_:));
}

{
  return specialized closure #1 in propertyScalarPredicate(_:)(a1, (uint64_t (*)(uint64_t))MEMORY[0x18961AC20]);
}

BOOL specialized closure #1 in propertyScalarPredicate(_:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Unicode.NumericType?);
  MEMORY[0x1895F8858](v0);
  uint64_t v2 = (char *)&v15 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x1895F8858](v3);
  char v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v5);
  uint64_t v9 = (char *)&v15 - v8;
  Unicode.Scalar.properties.getter();
  char v10 = Unicode.Scalar.Properties.isAlphabetic.getter();
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v7, v9, v3);
  if ((v10 & 1) != 0)
  {
    uint64_t v11 = *(void (**)(char *, uint64_t))(v4 + 8);
    v11(v7, v3);
    BOOL v12 = 1LL;
  }

  else
  {
    Unicode.Scalar.Properties.numericType.getter();
    uint64_t v11 = *(void (**)(char *, uint64_t))(v4 + 8);
    v11(v7, v3);
    uint64_t v13 = type metadata accessor for Unicode.NumericType();
    BOOL v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48LL))(v2, 1LL, v13) != 1;
    outlined destroy of (range: Range<String.Index>, value: Any?)?( (uint64_t)v2,  &demangling cache variable for type metadata for Unicode.NumericType?);
  }

  v11(v9, v3);
  return v12;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char v11;
  void (*v12)(char *, uint64_t);
  uint64_t v14;
  uint64_t v0 = type metadata accessor for Unicode.GeneralCategory();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = MEMORY[0x1895F8858](v0);
  uint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v2);
  uint64_t v6 = (char *)&v14 - v5;
  char v7 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  char v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Unicode.Scalar.properties.getter();
  Unicode.Scalar.Properties.generalCategory.getter();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v4, *MEMORY[0x18961AAF0], v0);
  uint64_t v11 = dispatch thunk of static Equatable.== infix(_:_:)();
  BOOL v12 = *(void (**)(char *, uint64_t))(v1 + 8);
  v12(v4, v0);
  v12(v6, v0);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return (v11 & 1) == 0;
}

uint64_t specialized closure #1 in propertyScalarPredicate(_:)(uint64_t a1, uint64_t (*a2)(char *))
{
  uint64_t v3 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Unicode.Scalar.properties.getter();
  LOBYTE(a2) = a2(v6);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return a2 & 1;
}

uint64_t specialized closure #1 in propertyScalarPredicate(_:)(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = Unicode.Scalar.properties.getter();
  LOBYTE(a2) = a2(v7);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return a2 & 1;
}

uint64_t closure #1 in propertyScalarPredicate(_:)(uint64_t a1, uint64_t (*a2)(char *))
{
  uint64_t v3 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Unicode.Scalar.properties.getter();
  LOBYTE(a2) = a2(v6);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return a2 & 1;
}

uint64_t (*consumeScalar(_:)( uint64_t a1, uint64_t a2))(unint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  swift_retain();
  return partial apply for closure #1 in consumeScalar(_:);
}

uint64_t specialized closure #1 in consumeScalar(_:)( unint64_t a1, unint64_t a2, unint64_t a3)
{
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    if (_StringGuts.foreignErrorCorrectedScalar(startingAt:)() <= 0x7F)
    {
      _StringGuts.validateScalarIndex(_:)(a3, a1, a2);
      return String.UnicodeScalarView._foreignIndex(after:)();
    }

    return 0LL;
  }

  if ((a2 & 0x2000000000000000LL) == 0)
  {
    if ((a1 & 0x1000000000000000LL) == 0) {
      _StringObject.sharedUTF8.getter();
    }
    if (_decodeScalar(_:startingAt:)() <= 0x7F)
    {
      unint64_t v6 = _StringGuts.validateScalarIndex(_:)(a3, a1, a2) >> 16;
      if ((a1 & 0x1000000000000000LL) != 0) {
        uint64_t v7 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      }
      else {
        uint64_t v7 = _StringObject.sharedUTF8.getter();
      }
      int v8 = *(unsigned __int8 *)(v7 + v6);
      goto LABEL_12;
    }

    return 0LL;
  }

  unint64_t v12 = a1;
  uint64_t v13 = a2 & 0xFFFFFFFFFFFFFFLL;
  unint64_t v6 = _StringGuts.validateScalarIndex(_:)(a3, a1, a2) >> 16;
  unint64_t v12 = a1;
  uint64_t v13 = a2 & 0xFFFFFFFFFFFFFFLL;
  int v8 = *((unsigned __int8 *)&v12 + v6);
LABEL_12:
  int v10 = (char)v8;
  unsigned int v11 = __clz(v8 ^ 0xFF) - 24;
  if (v10 >= 0) {
    LOBYTE(v11) = 1;
  }
  return ((v6 + v11) << 16) | 5;
}

uint64_t (*consumeCharacterWithLeadingScalar(_:)(uint64_t a1, uint64_t a2))()
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  swift_retain();
  return partial apply for closure #1 in consumeCharacterWithLeadingScalar(_:);
}

uint64_t specialized closure #1 in consumeCharacterWithSingleScalar(_:)()
{
  char v0 = Character.hasExactlyOneScalar.getter();
  swift_bridgeObjectRelease();
  if ((v0 & 1) == 0) {
    return 0LL;
  }
  unint64_t v1 = String.subscript.getter();
  unint64_t v3 = specialized Collection.first.getter(v1, v2);
  uint64_t result = swift_bridgeObjectRelease();
  if ((v3 & 0x100000000LL) != 0)
  {
    __break(1u);
  }

  else
  {
    if ((v3 & 0xFFFFFF80) != 0) {
      return 0LL;
    }
    return String.index(after:)();
  }

  return result;
}

uint64_t closure #1 in invert #1 (_:) in AST.Atom.CharacterProperty.generateConsumer(_:)( unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t a6, uint64_t a7)
{
  uint64_t result = a5();
  if ((v12 & 1) == 0) {
    return 0LL;
  }
  uint64_t v13 = *(void *)(a7 + 16);
  if (v13) {
    return String.index(after:isScalarSemantics:)(a3, (*(_DWORD *)(a7 + 4 * v13 + 28) & 0x10000) == 0, a1, a2);
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in AST.Atom.CharacterProperty.generateConsumer(_:)( uint64_t a1, uint64_t (*a2)(uint64_t (*)(uint64_t a1), uint64_t), void *a3)
{
  unint64_t v177 = a3;
  unint64_t v171 = a2;
  uint64_t v147 = type metadata accessor for AST.Atom.CharacterProperty.JavaSpecial();
  uint64_t v146 = *(void *)(v147 - 8);
  MEMORY[0x1895F8858](v147);
  uint64_t v145 = (char *)&v144 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v150 = type metadata accessor for AST.Atom.CharacterProperty.PCRESpecialCategory();
  uint64_t v149 = *(void *)(v150 - 8);
  MEMORY[0x1895F8858](v150);
  uint64_t v148 = (char *)&v144 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v153 = type metadata accessor for Unicode.POSIXProperty();
  uint64_t v152 = *(void *)(v153 - 8);
  MEMORY[0x1895F8858](v153);
  uint64_t v151 = (char *)&v144 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v156 = type metadata accessor for Unicode.Block();
  uint64_t v155 = *(void *)(v156 - 8);
  MEMORY[0x1895F8858](v156);
  uint64_t v154 = (char *)&v144 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v161 = type metadata accessor for Unicode.CanonicalCombiningClass();
  uint64_t v158 = *(void *)(v161 - 8);
  MEMORY[0x1895F8858](v161);
  uint64_t v159 = v8;
  uint64_t v160 = (char *)&v144 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v166 = type metadata accessor for Unicode.NumericType();
  uint64_t v163 = *(void *)(v166 - 8);
  MEMORY[0x1895F8858](v166);
  uint64_t v164 = v9;
  uint64_t v165 = (char *)&v144 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v170 = type metadata accessor for Unicode.Script();
  uint64_t v167 = *(void *)(v170 - 8);
  MEMORY[0x1895F8858](v170);
  uint64_t v168 = v10;
  uint64_t v169 = (char *)&v144 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for Unicode.BinaryProperty();
  uint64_t v174 = *(void *)(v11 - 8);
  uint64_t v175 = v11;
  MEMORY[0x1895F8858](v11);
  unint64_t v173 = (char *)&v144 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Unicode.ExtendedGeneralCategory();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1895F8858](v13);
  char v16 = (char *)&v144 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for AST.Atom.CharacterProperty.Kind();
  uint64_t v18 = *(uint64_t (***)(char *, uint64_t))(v17 - 8);
  uint64_t v19 = MEMORY[0x1895F8858](v17);
  uint64_t v162 = (char *)&v144 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = MEMORY[0x1895F8858](v19);
  uint64_t v172 = (char *)&v144 - v22;
  uint64_t v23 = MEMORY[0x1895F8858](v21);
  Swift::String_optional v25 = (char *)&v144 - v24;
  uint64_t v26 = MEMORY[0x1895F8858](v23);
  uint64_t v28 = (uint64_t (*)())((char *)&v144 - v27);
  MEMORY[0x1895F8858](v26);
  uint64_t v30 = (char *)&v144 - v29;
  uint64_t v157 = a1;
  AST.Atom.CharacterProperty.kind.getter();
  uint64_t result = v18[11](v30, v17);
  int v32 = *MEMORY[0x18961C650];
  unint64_t v178 = v30;
  if ((_DWORD)result == v32)
  {
    ((void (*)(uint64_t (*)(), char *, uint64_t))v18[2])(v28, v30, v17);
    v18[12]((char *)v28, v17);
    (*(void (**)(char *, uint64_t (*)(), uint64_t))(v14 + 32))(v16, v28, v13);
    uint64_t v33 = v176;
    uint64_t v34 = Unicode.ExtendedGeneralCategory.generateConsumer(_:)(v177);
    uint64_t v35 = v17;
    char v36 = (char *)v18;
    if (!v33) {
      uint64_t v28 = (uint64_t (*)())v34;
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    goto LABEL_18;
  }

  BOOL v37 = v177;
  if ((_DWORD)result == *MEMORY[0x18961C698])
  {
    ((void (*)(char *, char *, uint64_t))v18[2])(v25, v178, v17);
    uint64_t v172 = (char *)v18;
    uint64_t v38 = v17;
    v18[12](v25, v17);
    unint64_t v40 = v173;
    uint64_t v41 = v174;
    uint64_t v42 = v175;
    (*(void (**)(char *, char *, uint64_t))(v174 + 32))(v173, v25, v175);
    uint64_t v43 = v176;
    uint64_t v44 = Unicode.BinaryProperty.generateConsumer(_:)(v37);
    if (v43)
    {
      (*(void (**)(char *, uint64_t))(v41 + 8))(v40, v42);
      char v36 = v172;
      uint64_t v35 = v38;
LABEL_18:
      (*((void (**)(char *, uint64_t))v36 + 1))(v178, v35);
      return (uint64_t)v28;
    }

    uint64_t v28 = (uint64_t (*)())v44;
    uint64_t v68 = v45;
    (*(void (**)(char *, uint64_t))(v41 + 8))(v40, v42);
    if ((v39 & 1) == 0)
    {
      uint64_t v69 = (void *)swift_allocObject();
      v69[2] = v28;
      v69[3] = v68;
      v69[4] = v37;
      swift_bridgeObjectRetain();
      uint64_t v28 = closure #1 in invert #1 (_:) in AST.Atom.CharacterProperty.generateConsumer(_:)partial apply;
    }

    char v36 = v172;
LABEL_17:
    uint64_t v35 = v38;
    goto LABEL_18;
  }

  if ((_DWORD)result == *MEMORY[0x18961C6A0])
  {
    int v46 = (void (**)(char *, uint64_t))v18;
    uint64_t v47 = v18[2];
    uint64_t v48 = v172;
    uint64_t v49 = v17;
    ((void (*)(char *, char *, uint64_t))v47)(v172, v178, v17);
    v46[12](v48, v17);
    uint64_t v50 = v167;
    unsigned int v51 = *(void (**)(char *, char *, uint64_t))(v167 + 32);
    unint64_t v53 = v169;
    uint64_t v52 = v170;
    v51(v169, v48, v170);
    unint64_t v54 = (*(unsigned __int8 *)(v50 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80);
    char v36 = (char *)v46;
    uint64_t v55 = swift_allocObject();
    v51((char *)(v55 + v54), v53, v52);
    unint64_t v56 = partial apply for closure #1 in scriptScalarPredicate(_:);
LABEL_10:
    uint64_t v57 = v171(v56, v55);
    uint64_t v35 = v49;
LABEL_13:
    uint64_t v28 = (uint64_t (*)())v57;
    swift_release();
    goto LABEL_18;
  }

  if ((_DWORD)result == *MEMORY[0x18961C658])
  {
    unint64_t v58 = (void (**)(char *, uint64_t))v18;
    unint64_t v59 = v18[2];
    uint64_t v60 = v172;
    uint64_t v61 = v17;
    ((void (*)(char *, char *, uint64_t))v59)(v172, v178, v17);
    v58[12](v60, v17);
    uint64_t v62 = v167;
    uint64_t v63 = *(void (**)(char *, char *, uint64_t))(v167 + 32);
    uint64_t v65 = v169;
    uint64_t v64 = v170;
    v63(v169, v60, v170);
    unint64_t v66 = (*(unsigned __int8 *)(v62 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v62 + 80);
    char v36 = (char *)v58;
    uint64_t v67 = swift_allocObject();
    v63((char *)(v67 + v66), v65, v64);
    uint64_t v57 = v171((uint64_t (*)(uint64_t))partial apply for closure #1 in scriptExtensionScalarPredicate(_:), v67);
    uint64_t v35 = v61;
    goto LABEL_13;
  }

  if ((_DWORD)result == *MEMORY[0x18961C688])
  {
    unint64_t v70 = (uint64_t *)v172;
    uint64_t v35 = v17;
    char v36 = (char *)v18;
    ((void (*)(char *, char *, uint64_t))v18[2])(v172, v178, v35);
    v18[12]((char *)v70, v35);
    uint64_t v28 = (uint64_t (*)())consumeName(_:opts:)(*v70, v70[1], (uint64_t)v37);
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }

  uint64_t v71 = (char *)v18;
  if ((_DWORD)result == *MEMORY[0x18961C638])
  {
    unint64_t v72 = v172;
    ((void (*)(char *, char *, uint64_t))v18[2])(v172, v178, v17);
    v18[12](v72, v17);
    uint64_t v73 = v163;
    uint64_t v74 = *(void (**)(char *, char *, uint64_t))(v163 + 32);
    int v76 = v165;
    uint64_t v75 = v166;
    v74(v165, v72, v166);
    unint64_t v77 = (*(unsigned __int8 *)(v73 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v73 + 80);
    uint64_t v78 = swift_allocObject();
    v74((char *)(v78 + v77), v76, v75);
    uint64_t v35 = v17;
    uint64_t v28 = (uint64_t (*)())v171( partial apply for closure #5 in closure #1 in AST.Atom.CharacterProperty.generateConsumer(_:),  v78);
    swift_release();
    char v36 = v71;
    goto LABEL_18;
  }

  if ((_DWORD)result == *MEMORY[0x18961C648])
  {
    int v79 = v18[2];
    uint64_t v80 = v172;
    uint64_t v81 = v17;
    char v36 = v71;
    ((void (*)(char *, char *, uint64_t))v79)(v172, v178, v81);
    (*((void (**)(char *, uint64_t))v71 + 12))(v80, v81);
    uint64_t v82 = *(void *)v80;
    uint64_t v83 = swift_allocObject();
    *(void *)(v83 + 16) = v82;
    uint64_t v57 = v171( (uint64_t (*)(uint64_t))partial apply for closure #4 in closure #1 in AST.Atom.CharacterProperty.generateConsumer(_:),  v83);
    uint64_t v35 = v81;
    goto LABEL_13;
  }

  uint64_t v35 = v17;
  if ((_DWORD)result == *MEMORY[0x18961C6B0])
  {
    char v36 = (char *)v18;
    uint64_t v84 = v162;
    ((void (*)(char *, char *, uint64_t))v18[2])(v162, v178, v35);
    uint64_t v38 = v35;
    v18[12](v84, v35);
    uint64_t v28 = *(uint64_t (**)())v85;
    uint64_t v86 = *((void *)v85 + 1);
    uint64_t v87 = type metadata accessor for AST.Atom.CharacterProperty.Kind.MapKind();
    uint64_t v88 = *(void *)(v87 - 8);
    int v89 = (*(uint64_t (**)(char *, uint64_t))(v88 + 88))(v84, v87);
    if (v89 == *MEMORY[0x18961C608])
    {
      uint64_t v90 = swift_allocObject();
      *(void *)(v90 + 16) = v28;
      *(void *)(v90 + 24) = v86;
      unint64_t v91 = partial apply for closure #7 in closure #1 in AST.Atom.CharacterProperty.generateConsumer(_:);
LABEL_36:
      uint64_t v28 = (uint64_t (*)())v171(v91, v90);
      swift_release();
      goto LABEL_17;
    }

    if (v89 == *MEMORY[0x18961C618])
    {
      uint64_t v90 = swift_allocObject();
      *(void *)(v90 + 16) = v28;
      *(void *)(v90 + 24) = v86;
      unint64_t v91 = partial apply for closure #8 in closure #1 in AST.Atom.CharacterProperty.generateConsumer(_:);
      goto LABEL_36;
    }

    if (v89 == *MEMORY[0x18961C610])
    {
      uint64_t v90 = swift_allocObject();
      *(void *)(v90 + 16) = v28;
      *(void *)(v90 + 24) = v86;
      unint64_t v91 = partial apply for closure #9 in closure #1 in AST.Atom.CharacterProperty.generateConsumer(_:);
      goto LABEL_36;
    }

    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v88 + 8))(v84, v87);
    goto LABEL_40;
  }

  if ((_DWORD)result == *MEMORY[0x18961C670])
  {
    char v36 = (char *)v18;
    uint64_t v92 = v172;
    ((void (*)(char *, char *, uint64_t))v18[2])(v172, v178, v35);
    v18[12](v92, v35);
    uint64_t v93 = v158;
    uint64_t v49 = v35;
    uint64_t v94 = *(void (**)(char *, char *, uint64_t))(v158 + 32);
    unint64_t v96 = v160;
    uint64_t v95 = v161;
    v94(v160, v92, v161);
    unint64_t v97 = (*(unsigned __int8 *)(v93 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v93 + 80);
    uint64_t v55 = swift_allocObject();
    v94((char *)(v55 + v97), v96, v95);
    unint64_t v56 = partial apply for closure #6 in closure #1 in AST.Atom.CharacterProperty.generateConsumer(_:);
    goto LABEL_10;
  }

  if ((_DWORD)result == *MEMORY[0x18961C660])
  {
    char v36 = (char *)v18;
    unint64_t v98 = v172;
    ((void (*)(char *, char *, uint64_t))v18[2])(v172, v178, v35);
    v18[12](v98, v35);
    uint64_t v99 = v35;
    uint64_t v100 = *(void *)v98;
    uint64_t v101 = *((void *)v98 + 1);
    uint64_t v102 = swift_allocObject();
    *(void *)(v102 + 16) = v100;
    *(void *)(v102 + 24) = v101;
    uint64_t v57 = v171( (uint64_t (*)(uint64_t))partial apply for closure #3 in closure #1 in AST.Atom.CharacterProperty.generateConsumer(_:),  v102);
    uint64_t v35 = v99;
    goto LABEL_13;
  }

  if ((_DWORD)result == *MEMORY[0x18961C680])
  {
    char v36 = (char *)v18;
    uint64_t v103 = v172;
    ((void (*)(char *, char *, uint64_t))v18[2])(v172, v178, v35);
    v18[12](v103, v35);
    uint64_t v104 = v155;
    unint64_t v105 = v154;
    unint64_t v106 = v103;
    uint64_t v107 = v156;
    (*(void (**)(char *, char *, uint64_t))(v155 + 32))(v154, v106, v156);
    uint64_t v179 = 0LL;
    unint64_t v180 = 0xE000000000000000LL;
    uint64_t v108 = v35;
    _StringGuts.grow(_:)(19LL);
    v109._uint64_t countAndFlagsBits = 0xD000000000000011LL;
    v109._object = (void *)0x8000000182DA3D10LL;
    String.append(_:)(v109);
    _print_unlocked<A, B>(_:_:)();
    (*(void (**)(char *, uint64_t))(v104 + 8))(v105, v107);
    uint64_t v110 = v179;
    unint64_t v111 = v180;
    type metadata accessor for Unsupported();
    lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind( &lazy protocol witness table cache variable for type Unsupported and conformance Unsupported,  (uint64_t (*)(uint64_t))MEMORY[0x18961C120],  MEMORY[0x18961C130]);
    swift_allocError();
    uint64_t v112 = v110;
    unint64_t v113 = v111;
    uint64_t v35 = v108;
    uint64_t v114 = 424LL;
LABEL_47:
    MEMORY[0x186E168A8]( v112,  v113,  "/Library/Caches/com.apple.xbs/Sources/swiftlang_overlay_Platform_Device/swift-experimental-string-processing/Sourc es/_StringProcessing/ConsumerInterface.swift",  158LL,  2LL,  v114);
    goto LABEL_48;
  }

  if ((_DWORD)result == *MEMORY[0x18961C690])
  {
    char v36 = (char *)v18;
    unint64_t v120 = v172;
    ((void (*)(char *, char *, uint64_t))v18[2])(v172, v178, v35);
    v18[12](v120, v35);
    uint64_t v121 = v152;
    uint64_t v122 = v151;
    uint64_t v123 = v120;
    uint64_t v124 = v153;
    (*(void (**)(char *, char *, uint64_t))(v152 + 32))(v151, v123, v153);
    uint64_t v28 = (uint64_t (*)())Unicode.POSIXProperty.generateConsumer(_:)((uint64_t)v37);
    (*(void (**)(char *, uint64_t))(v121 + 8))(v122, v124);
    goto LABEL_18;
  }

  if ((_DWORD)result == *MEMORY[0x18961C640])
  {
    char v36 = (char *)v18;
    unint64_t v125 = v172;
    ((void (*)(char *, char *, uint64_t))v18[2])(v172, v178, v35);
    v18[12](v125, v35);
    uint64_t v126 = v149;
    uint64_t v127 = v148;
    uint64_t v128 = v125;
    uint64_t v129 = v150;
    (*(void (**)(char *, char *, uint64_t))(v149 + 32))(v148, v128, v150);
    uint64_t v179 = 0LL;
    unint64_t v180 = 0xE000000000000000LL;
    uint64_t v130 = v35;
    _StringGuts.grow(_:)(26LL);
    v131._object = (void *)0x8000000182DA3CF0LL;
    v131._uint64_t countAndFlagsBits = 0xD000000000000018LL;
    String.append(_:)(v131);
    _print_unlocked<A, B>(_:_:)();
    (*(void (**)(char *, uint64_t))(v126 + 8))(v127, v129);
    uint64_t v132 = v179;
    unint64_t v133 = v180;
    type metadata accessor for Unsupported();
    lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind( &lazy protocol witness table cache variable for type Unsupported and conformance Unsupported,  (uint64_t (*)(uint64_t))MEMORY[0x18961C120],  MEMORY[0x18961C130]);
    swift_allocError();
    uint64_t v112 = v132;
    unint64_t v113 = v133;
    uint64_t v35 = v130;
    uint64_t v114 = 430LL;
    goto LABEL_47;
  }

  if ((_DWORD)result == *MEMORY[0x18961C630])
  {
    char v36 = (char *)v18;
    uint64_t v134 = v172;
    ((void (*)(char *, char *, uint64_t))v18[2])(v172, v178, v35);
    v18[12](v134, v35);
    uint64_t v135 = v146;
    unint64_t v136 = v145;
    uint64_t v137 = v134;
    uint64_t v138 = v147;
    (*(void (**)(char *, char *, uint64_t))(v146 + 32))(v145, v137, v147);
    uint64_t v179 = 0LL;
    unint64_t v180 = 0xE000000000000000LL;
    uint64_t v139 = v35;
    _StringGuts.grow(_:)(26LL);
    v140._object = (void *)0x8000000182DA3CD0LL;
    v140._uint64_t countAndFlagsBits = 0xD000000000000018LL;
    String.append(_:)(v140);
    _print_unlocked<A, B>(_:_:)();
    (*(void (**)(char *, uint64_t))(v135 + 8))(v136, v138);
    uint64_t v141 = v179;
    unint64_t v142 = v180;
    type metadata accessor for Unsupported();
    lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind( &lazy protocol witness table cache variable for type Unsupported and conformance Unsupported,  (uint64_t (*)(uint64_t))MEMORY[0x18961C120],  MEMORY[0x18961C130]);
    swift_allocError();
    uint64_t v112 = v141;
    unint64_t v113 = v142;
    uint64_t v35 = v139;
    uint64_t v114 = 433LL;
    goto LABEL_47;
  }

  if ((_DWORD)result == *MEMORY[0x18961C6A8])
  {
    type metadata accessor for Unreachable();
    lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind( &lazy protocol witness table cache variable for type Unreachable and conformance Unreachable,  (uint64_t (*)(uint64_t))MEMORY[0x18961C108],  MEMORY[0x18961C118]);
    swift_allocError();
    MEMORY[0x186E16890]( 0xD000000000000017LL,  0x8000000182DA3CB0LL,  "/Library/Caches/com.apple.xbs/Sources/swiftlang_overlay_Platform_Device/swift-experimental-string-processing/Sourc es/_StringProcessing/ConsumerInterface.swift",  158LL,  2LL,  436LL);
    swift_willThrow();
    uint64_t v35 = v17;
    char v36 = (char *)v18;
    goto LABEL_18;
  }

  if ((_DWORD)result == *MEMORY[0x18961C668])
  {
    uint64_t v28 = closure #1 in closure #1 in AST.Atom.CharacterProperty.generateConsumer(_:);
LABEL_60:
    uint64_t v35 = v17;
    char v36 = (char *)v18;
    goto LABEL_18;
  }

  if ((_DWORD)result == *MEMORY[0x18961C6B8])
  {
    uint64_t v28 = (uint64_t (*)())v171( (uint64_t (*)(uint64_t))closure #2 in closure #1 in AST.Atom.CharacterProperty.generateConsumer(_:),  0LL);
    goto LABEL_60;
  }

  uint64_t v38 = v17;
  uint64_t v71 = (char *)v18;
  if ((_DWORD)result != *MEMORY[0x18961C678])
  {
LABEL_40:
    uint64_t v179 = 0LL;
    unint64_t v180 = 0xE000000000000000LL;
    v115._uint64_t countAndFlagsBits = 0x206E776F6E6B6E55LL;
    v115._object = (void *)0xED000020646E696BLL;
    String.append(_:)(v115);
    unint64_t v116 = v172;
    AST.Atom.CharacterProperty.kind.getter();
    _print_unlocked<A, B>(_:_:)();
    char v36 = v71;
    (*((void (**)(char *, uint64_t))v71 + 1))(v116, v38);
    uint64_t v117 = v179;
    unint64_t v118 = v180;
    type metadata accessor for Unreachable();
    lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind( &lazy protocol witness table cache variable for type Unreachable and conformance Unreachable,  (uint64_t (*)(uint64_t))MEMORY[0x18961C108],  MEMORY[0x18961C118]);
    swift_allocError();
    unint64_t v119 = v118;
    uint64_t v35 = v38;
    MEMORY[0x186E16890]( v117,  v119,  "/Library/Caches/com.apple.xbs/Sources/swiftlang_overlay_Platform_Device/swift-experimental-string-processing/Sourc es/_StringProcessing/ConsumerInterface.swift",  158LL,  2LL,  440LL);
LABEL_48:
    swift_willThrow();
    goto LABEL_18;
  }

  uint64_t v143 = v177[2];
  if (v143)
  {
    if ((*((_DWORD *)v177 + v143 + 7) & 0x10000) != 0) {
      uint64_t v28 = specialized closure #1 in consumeCharacterWithSingleScalar(_:);
    }
    else {
      uint64_t v28 = (uint64_t (*)())specialized closure #1 in consumeScalar(_:);
    }
    goto LABEL_60;
  }

  __break(1u);
  return result;
}

uint64_t closure #1 in closure #1 in AST.Atom.CharacterProperty.generateConsumer(_:)()
{
  return String.index(after:)();
}

BOOL closure #2 in closure #1 in AST.Atom.CharacterProperty.generateConsumer(_:)()
{
  uint64_t v0 = type metadata accessor for Unicode.GeneralCategory();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = MEMORY[0x1895F8858](v0);
  uint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v2);
  uint64_t v6 = (char *)&v14 - v5;
  uint64_t v7 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Unicode.Scalar.properties.getter();
  Unicode.Scalar.Properties.generalCategory.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v4, *MEMORY[0x18961AA18], v0);
  char v11 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v12 = *(void (**)(char *, uint64_t))(v1 + 8);
  v12(v4, v0);
  v12(v6, v0);
  return (v11 & 1) == 0;
}

uint64_t Unicode.ExtendedGeneralCategory.generateConsumer(_:)(void *a1)
{
  uint64_t v3 = type metadata accessor for Unicode.GeneralCategory();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = MEMORY[0x1895F8858](v3);
  uint64_t v150 = (char *)&v149 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v6);
  uint64_t v8 = (char *)&v149 - v7;
  uint64_t v9 = type metadata accessor for Unicode.ExtendedGeneralCategory();
  uint64_t v10 = *(void *)(v9 - 8);
  int v11 = MEMORY[0x1895F8858](v9);
  uint64_t v13 = (char *)&v149 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = a1[2];
  if (v14)
  {
    if ((*((_DWORD *)a1 + v14 + 7) & 0x10000) != 0) {
      a1 = consumeCharacterWithLeadingScalar(_:);
    }
    else {
      a1 = consumeScalar(_:);
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, v1, v9);
    int v11 = (*(uint64_t (**)(char *, uint64_t))(v10 + 88))(v13, v9);
    if (v11 == *MEMORY[0x18961CD38])
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Unicode.GeneralCategory>);
      uint64_t v15 = *(void *)(v4 + 72);
      unint64_t v16 = (*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
      uint64_t v17 = swift_allocObject();
      *(_OWORD *)(v17 + 16) = xmmword_182D9CC60;
      unint64_t v18 = v17 + v16;
      uint64_t v19 = *(void (**)(unint64_t, void, uint64_t))(v4 + 104);
      v19(v18, *MEMORY[0x18961AAF0], v3);
      v19(v18 + v15, *MEMORY[0x18961AAE8], v3);
      v19(v18 + 2 * v15, *MEMORY[0x18961AAF8], v3);
      v19(v18 + 3 * v15, *MEMORY[0x18961AA10], v3);
      v19(v18 + 4 * v15, *MEMORY[0x18961AA18], v3);
      uint64_t v20 = swift_allocObject();
      *(void *)(v20 + 16) = v17;
      uint64_t v21 = closure #1 in categoriesScalarPredicate(_:)partial apply;
LABEL_82:
      uint64_t v147 = ((uint64_t (*)(uint64_t (*)(), uint64_t))a1)(v21, v20);
      swift_release();
      return v147;
    }

    if (v11 == *MEMORY[0x18961CD60])
    {
      (*(void (**)(char *, void, uint64_t))(v4 + 104))(v8, *MEMORY[0x18961AAF0], v3);
      uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
      uint64_t v23 = v150;
      v22(v150, v8, v3);
      unint64_t v24 = (*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
      uint64_t v20 = swift_allocObject();
      v22((char *)(v20 + v24), v23, v3);
      uint64_t v21 = (uint64_t (*)())partial apply for closure #1 in categoryScalarPredicate(_:);
      goto LABEL_82;
    }

    if (v11 == *MEMORY[0x18961CD40])
    {
      (*(void (**)(char *, void, uint64_t))(v4 + 104))(v8, *MEMORY[0x18961AAE8], v3);
      Swift::String_optional v25 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
      uint64_t v26 = v150;
      v25(v150, v8, v3);
      unint64_t v27 = (*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
      uint64_t v20 = swift_allocObject();
      v25((char *)(v20 + v27), v26, v3);
      uint64_t v21 = (uint64_t (*)())partial apply for closure #1 in categoryScalarPredicate(_:);
      goto LABEL_82;
    }

    if (v11 == *MEMORY[0x18961CC58])
    {
      (*(void (**)(char *, void, uint64_t))(v4 + 104))(v8, *MEMORY[0x18961AA18], v3);
      uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
      uint64_t v29 = v150;
      v28(v150, v8, v3);
      unint64_t v30 = (*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
      uint64_t v20 = swift_allocObject();
      v28((char *)(v20 + v30), v29, v3);
      uint64_t v21 = (uint64_t (*)())partial apply for closure #1 in categoryScalarPredicate(_:);
      goto LABEL_82;
    }

    if (v11 == *MEMORY[0x18961CC50])
    {
      (*(void (**)(char *, void, uint64_t))(v4 + 104))(v8, *MEMORY[0x18961AA10], v3);
      unint64_t v31 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
      int v32 = v150;
      v31(v150, v8, v3);
      unint64_t v33 = (*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
      uint64_t v20 = swift_allocObject();
      v31((char *)(v20 + v33), v32, v3);
      uint64_t v21 = (uint64_t (*)())partial apply for closure #1 in categoryScalarPredicate(_:);
      goto LABEL_82;
    }

    if (v11 == *MEMORY[0x18961CD78])
    {
      (*(void (**)(char *, void, uint64_t))(v4 + 104))(v8, *MEMORY[0x18961AAF8], v3);
      uint64_t v34 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
      uint64_t v35 = v150;
      v34(v150, v8, v3);
      unint64_t v36 = (*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
      uint64_t v20 = swift_allocObject();
      v34((char *)(v20 + v36), v35, v3);
      uint64_t v21 = (uint64_t (*)())partial apply for closure #1 in categoryScalarPredicate(_:);
      goto LABEL_82;
    }

    if (v11 == *MEMORY[0x18961CD48])
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Unicode.GeneralCategory>);
      uint64_t v37 = *(void *)(v4 + 72);
      unint64_t v38 = (*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
      uint64_t v39 = swift_allocObject();
      *(_OWORD *)(v39 + 16) = xmmword_182D9CC60;
      unint64_t v40 = v39 + v38;
      uint64_t v41 = *(void (**)(unint64_t, void, uint64_t))(v4 + 104);
      v41(v40, *MEMORY[0x18961AAA8], v3);
      v41(v40 + v37, *MEMORY[0x18961AA90], v3);
      v41(v40 + 2 * v37, *MEMORY[0x18961AAA0], v3);
      v41(v40 + 3 * v37, *MEMORY[0x18961AA68], v3);
      v41(v40 + 4 * v37, *MEMORY[0x18961AA20], v3);
      uint64_t v20 = swift_allocObject();
      *(void *)(v20 + 16) = v39;
      uint64_t v21 = closure #1 in categoriesScalarPredicate(_:)partial apply;
      goto LABEL_82;
    }

    if (v11 == *MEMORY[0x18961CC60])
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Unicode.GeneralCategory>);
      uint64_t v42 = *(void *)(v4 + 72);
      unint64_t v43 = (*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
      uint64_t v44 = swift_allocObject();
      *(_OWORD *)(v44 + 16) = xmmword_182D9CC30;
      unint64_t v45 = v44 + v43;
      int v46 = *(void (**)(unint64_t, void, uint64_t))(v4 + 104);
      v46(v45, *MEMORY[0x18961AAA8], v3);
      v46(v45 + v42, *MEMORY[0x18961AA90], v3);
      v46(v45 + 2 * v42, *MEMORY[0x18961AAA0], v3);
      uint64_t v20 = swift_allocObject();
      *(void *)(v20 + 16) = v44;
      uint64_t v21 = (uint64_t (*)())partial apply for closure #1 in categoriesScalarPredicate(_:);
      goto LABEL_82;
    }

    if (v11 == *MEMORY[0x18961CCE0])
    {
      (*(void (**)(char *, void, uint64_t))(v4 + 104))(v8, *MEMORY[0x18961AA90], v3);
      uint64_t v47 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
      uint64_t v48 = v150;
      v47(v150, v8, v3);
      unint64_t v49 = (*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
      uint64_t v20 = swift_allocObject();
      v47((char *)(v20 + v49), v48, v3);
      uint64_t v21 = (uint64_t (*)())partial apply for closure #1 in categoryScalarPredicate(_:);
      goto LABEL_82;
    }

    if (v11 == *MEMORY[0x18961CCB8])
    {
      (*(void (**)(char *, void, uint64_t))(v4 + 104))(v8, *MEMORY[0x18961AA68], v3);
      uint64_t v50 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
      unsigned int v51 = v150;
      v50(v150, v8, v3);
      unint64_t v52 = (*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
      uint64_t v20 = swift_allocObject();
      v50((char *)(v20 + v52), v51, v3);
      uint64_t v21 = (uint64_t (*)())partial apply for closure #1 in categoryScalarPredicate(_:);
      goto LABEL_82;
    }

    if (v11 == *MEMORY[0x18961CC68])
    {
      (*(void (**)(char *, void, uint64_t))(v4 + 104))(v8, *MEMORY[0x18961AA20], v3);
      unint64_t v53 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
      unint64_t v54 = v150;
      v53(v150, v8, v3);
      unint64_t v55 = (*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
      uint64_t v20 = swift_allocObject();
      v53((char *)(v20 + v55), v54, v3);
      uint64_t v21 = (uint64_t (*)())partial apply for closure #1 in categoryScalarPredicate(_:);
      goto LABEL_82;
    }
  }

  else
  {
    __break(1u);
  }

  if (v11 == *MEMORY[0x18961CCF0])
  {
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v8, *MEMORY[0x18961AAA0], v3);
    unint64_t v56 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    uint64_t v57 = v150;
    v56(v150, v8, v3);
    unint64_t v58 = (*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v20 = swift_allocObject();
    v56((char *)(v20 + v58), v57, v3);
    uint64_t v21 = (uint64_t (*)())partial apply for closure #1 in categoryScalarPredicate(_:);
    goto LABEL_82;
  }

  if (v11 == *MEMORY[0x18961CCF8])
  {
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v8, *MEMORY[0x18961AAA8], v3);
    unint64_t v59 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    uint64_t v60 = v150;
    v59(v150, v8, v3);
    unint64_t v61 = (*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v20 = swift_allocObject();
    v59((char *)(v20 + v61), v60, v3);
    uint64_t v21 = (uint64_t (*)())partial apply for closure #1 in categoryScalarPredicate(_:);
    goto LABEL_82;
  }

  if (v11 == *MEMORY[0x18961CD30])
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Unicode.GeneralCategory>);
    uint64_t v62 = *(void *)(v4 + 72);
    unint64_t v63 = (*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v64 = swift_allocObject();
    *(_OWORD *)(v64 + 16) = xmmword_182D9CC30;
    unint64_t v65 = v64 + v63;
    unint64_t v66 = *(void (**)(unint64_t, void, uint64_t))(v4 + 104);
    v66(v65, *MEMORY[0x18961AA78], v3);
    v66(v65 + v62, *MEMORY[0x18961AA38], v3);
    v66(v65 + 2 * v62, *MEMORY[0x18961AA50], v3);
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 16) = v64;
    uint64_t v21 = closure #1 in categoriesScalarPredicate(_:)partial apply;
    goto LABEL_82;
  }

  if (v11 == *MEMORY[0x18961CC88])
  {
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v8, *MEMORY[0x18961AA38], v3);
    uint64_t v67 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    uint64_t v68 = v150;
    v67(v150, v8, v3);
    unint64_t v69 = (*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v20 = swift_allocObject();
    v67((char *)(v20 + v69), v68, v3);
    uint64_t v21 = (uint64_t (*)())partial apply for closure #1 in categoryScalarPredicate(_:);
    goto LABEL_82;
  }

  if (v11 == *MEMORY[0x18961CCA0])
  {
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v8, *MEMORY[0x18961AA50], v3);
    unint64_t v70 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    uint64_t v71 = v150;
    v70(v150, v8, v3);
    unint64_t v72 = (*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v20 = swift_allocObject();
    v70((char *)(v20 + v72), v71, v3);
    uint64_t v21 = (uint64_t (*)())partial apply for closure #1 in categoryScalarPredicate(_:);
    goto LABEL_82;
  }

  if (v11 == *MEMORY[0x18961CCC8])
  {
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v8, *MEMORY[0x18961AA78], v3);
    uint64_t v73 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    uint64_t v74 = v150;
    v73(v150, v8, v3);
    unint64_t v75 = (*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v20 = swift_allocObject();
    v73((char *)(v20 + v75), v74, v3);
    uint64_t v21 = (uint64_t (*)())partial apply for closure #1 in categoryScalarPredicate(_:);
    goto LABEL_82;
  }

  if (v11 == *MEMORY[0x18961CD50])
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Unicode.GeneralCategory>);
    uint64_t v76 = *(void *)(v4 + 72);
    unint64_t v77 = (*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v78 = swift_allocObject();
    *(_OWORD *)(v78 + 16) = xmmword_182D9CC30;
    unint64_t v79 = v78 + v77;
    uint64_t v80 = *(void (**)(unint64_t, void, uint64_t))(v4 + 104);
    v80(v79, *MEMORY[0x18961AA48], v3);
    v80(v79 + v76, *MEMORY[0x18961AA40], v3);
    v80(v79 + 2 * v76, *MEMORY[0x18961AA28], v3);
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 16) = v78;
    uint64_t v21 = closure #1 in categoriesScalarPredicate(_:)partial apply;
    goto LABEL_82;
  }

  if (v11 == *MEMORY[0x18961CC98])
  {
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v8, *MEMORY[0x18961AA48], v3);
    uint64_t v81 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    uint64_t v82 = v150;
    v81(v150, v8, v3);
    unint64_t v83 = (*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v20 = swift_allocObject();
    v81((char *)(v20 + v83), v82, v3);
    uint64_t v21 = (uint64_t (*)())partial apply for closure #1 in categoryScalarPredicate(_:);
    goto LABEL_82;
  }

  if (v11 == *MEMORY[0x18961CC90])
  {
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v8, *MEMORY[0x18961AA40], v3);
    uint64_t v84 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    uint64_t v85 = v150;
    v84(v150, v8, v3);
    unint64_t v86 = (*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v20 = swift_allocObject();
    v84((char *)(v20 + v86), v85, v3);
    uint64_t v21 = (uint64_t (*)())partial apply for closure #1 in categoryScalarPredicate(_:);
    goto LABEL_82;
  }

  if (v11 == *MEMORY[0x18961CC70])
  {
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v8, *MEMORY[0x18961AA28], v3);
    uint64_t v87 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    uint64_t v88 = v150;
    v87(v150, v8, v3);
    unint64_t v89 = (*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v20 = swift_allocObject();
    v87((char *)(v20 + v89), v88, v3);
    uint64_t v21 = (uint64_t (*)())partial apply for closure #1 in categoryScalarPredicate(_:);
    goto LABEL_82;
  }

  if (v11 == *MEMORY[0x18961CC80])
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Unicode.GeneralCategory>);
    uint64_t v90 = *(void *)(v4 + 72);
    unint64_t v91 = (*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v92 = swift_allocObject();
    *(_OWORD *)(v92 + 16) = xmmword_182D9CC50;
    unint64_t v93 = v92 + v91;
    uint64_t v94 = *(void (**)(unint64_t, void, uint64_t))(v4 + 104);
    v94(v93, *MEMORY[0x18961AAD8], v3);
    v94(v93 + v90, *MEMORY[0x18961AA88], v3);
    v94(v93 + 2 * v90, *MEMORY[0x18961AA98], v3);
    v94(v93 + 3 * v90, *MEMORY[0x18961AAB0], v3);
    v94(v93 + 4 * v90, *MEMORY[0x18961AAC8], v3);
    v94(v93 + 5 * v90, *MEMORY[0x18961AAB8], v3);
    v94(v93 + 6 * v90, *MEMORY[0x18961AAC0], v3);
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 16) = v92;
    uint64_t v21 = closure #1 in categoriesScalarPredicate(_:)partial apply;
    goto LABEL_82;
  }

  if (v11 == *MEMORY[0x18961CD28])
  {
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v8, *MEMORY[0x18961AAD8], v3);
    uint64_t v95 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    unint64_t v96 = v150;
    v95(v150, v8, v3);
    unint64_t v97 = (*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v20 = swift_allocObject();
    v95((char *)(v20 + v97), v96, v3);
    uint64_t v21 = (uint64_t (*)())partial apply for closure #1 in categoryScalarPredicate(_:);
    goto LABEL_82;
  }

  if (v11 == *MEMORY[0x18961CCD8])
  {
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v8, *MEMORY[0x18961AA88], v3);
    unint64_t v98 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    uint64_t v99 = v150;
    v98(v150, v8, v3);
    unint64_t v100 = (*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v20 = swift_allocObject();
    v98((char *)(v20 + v100), v99, v3);
    uint64_t v21 = (uint64_t (*)())partial apply for closure #1 in categoryScalarPredicate(_:);
    goto LABEL_82;
  }

  if (v11 == *MEMORY[0x18961CD00])
  {
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v8, *MEMORY[0x18961AAB0], v3);
    uint64_t v101 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    uint64_t v102 = v150;
    v101(v150, v8, v3);
    unint64_t v103 = (*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v20 = swift_allocObject();
    v101((char *)(v20 + v103), v102, v3);
    uint64_t v21 = (uint64_t (*)())partial apply for closure #1 in categoryScalarPredicate(_:);
    goto LABEL_82;
  }

  if (v11 == *MEMORY[0x18961CD08])
  {
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v8, *MEMORY[0x18961AAB8], v3);
    uint64_t v104 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    unint64_t v105 = v150;
    v104(v150, v8, v3);
    unint64_t v106 = (*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v20 = swift_allocObject();
    v104((char *)(v20 + v106), v105, v3);
    uint64_t v21 = (uint64_t (*)())partial apply for closure #1 in categoryScalarPredicate(_:);
    goto LABEL_82;
  }

  if (v11 == *MEMORY[0x18961CD18])
  {
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v8, *MEMORY[0x18961AAC8], v3);
    uint64_t v107 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    uint64_t v108 = v150;
    v107(v150, v8, v3);
    unint64_t v109 = (*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v20 = swift_allocObject();
    v107((char *)(v20 + v109), v108, v3);
    uint64_t v21 = (uint64_t (*)())partial apply for closure #1 in categoryScalarPredicate(_:);
    goto LABEL_82;
  }

  if (v11 == *MEMORY[0x18961CD10])
  {
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v8, *MEMORY[0x18961AAC0], v3);
    uint64_t v110 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    unint64_t v111 = v150;
    v110(v150, v8, v3);
    unint64_t v112 = (*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v20 = swift_allocObject();
    v110((char *)(v20 + v112), v111, v3);
    uint64_t v21 = (uint64_t (*)())partial apply for closure #1 in categoryScalarPredicate(_:);
    goto LABEL_82;
  }

  if (v11 == *MEMORY[0x18961CCE8])
  {
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v8, *MEMORY[0x18961AA98], v3);
    unint64_t v113 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    uint64_t v114 = v150;
    v113(v150, v8, v3);
    unint64_t v115 = (*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v20 = swift_allocObject();
    v113((char *)(v20 + v115), v114, v3);
    uint64_t v21 = (uint64_t (*)())partial apply for closure #1 in categoryScalarPredicate(_:);
    goto LABEL_82;
  }

  if (v11 == *MEMORY[0x18961CD58])
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Unicode.GeneralCategory>);
    uint64_t v116 = *(void *)(v4 + 72);
    unint64_t v117 = (*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v118 = swift_allocObject();
    *(_OWORD *)(v118 + 16) = xmmword_182D9CC40;
    unint64_t v119 = v118 + v117;
    unint64_t v120 = *(void (**)(unint64_t, void, uint64_t))(v4 + 104);
    v120(v119, *MEMORY[0x18961AA08], v3);
    v120(v119 + v116, *MEMORY[0x18961AA60], v3);
    v120(v119 + 2 * v116, *MEMORY[0x18961AA70], v3);
    v120(v119 + 3 * v116, *MEMORY[0x18961AA30], v3);
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 16) = v118;
    uint64_t v21 = closure #1 in categoriesScalarPredicate(_:)partial apply;
    goto LABEL_82;
  }

  if (v11 == *MEMORY[0x18961CCB0])
  {
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v8, *MEMORY[0x18961AA60], v3);
    uint64_t v121 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    uint64_t v122 = v150;
    v121(v150, v8, v3);
    unint64_t v123 = (*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v20 = swift_allocObject();
    v121((char *)(v20 + v123), v122, v3);
    uint64_t v21 = (uint64_t (*)())partial apply for closure #1 in categoryScalarPredicate(_:);
    goto LABEL_82;
  }

  if (v11 == *MEMORY[0x18961CCC0])
  {
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v8, *MEMORY[0x18961AA70], v3);
    uint64_t v124 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    unint64_t v125 = v150;
    v124(v150, v8, v3);
    unint64_t v126 = (*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v20 = swift_allocObject();
    v124((char *)(v20 + v126), v125, v3);
    uint64_t v21 = (uint64_t (*)())partial apply for closure #1 in categoryScalarPredicate(_:);
    goto LABEL_82;
  }

  if (v11 == *MEMORY[0x18961CC48])
  {
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v8, *MEMORY[0x18961AA08], v3);
    uint64_t v127 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    uint64_t v128 = v150;
    v127(v150, v8, v3);
    unint64_t v129 = (*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v20 = swift_allocObject();
    v127((char *)(v20 + v129), v128, v3);
    uint64_t v21 = (uint64_t (*)())partial apply for closure #1 in categoryScalarPredicate(_:);
    goto LABEL_82;
  }

  if (v11 == *MEMORY[0x18961CC78])
  {
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v8, *MEMORY[0x18961AA30], v3);
    uint64_t v130 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    Swift::String v131 = v150;
    v130(v150, v8, v3);
    unint64_t v132 = (*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v20 = swift_allocObject();
    v130((char *)(v20 + v132), v131, v3);
    uint64_t v21 = (uint64_t (*)())partial apply for closure #1 in categoryScalarPredicate(_:);
    goto LABEL_82;
  }

  if (v11 == *MEMORY[0x18961CD70])
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Unicode.GeneralCategory>);
    uint64_t v133 = *(void *)(v4 + 72);
    unint64_t v134 = (*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v135 = swift_allocObject();
    *(_OWORD *)(v135 + 16) = xmmword_182D9CC30;
    unint64_t v136 = v135 + v134;
    uint64_t v137 = *(void (**)(unint64_t, void, uint64_t))(v4 + 104);
    v137(v136, *MEMORY[0x18961AA80], v3);
    v137(v136 + v133, *MEMORY[0x18961AA58], v3);
    v137(v136 + 2 * v133, *MEMORY[0x18961AAD0], v3);
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 16) = v135;
    uint64_t v21 = closure #1 in categoriesScalarPredicate(_:)partial apply;
    goto LABEL_82;
  }

  if (v11 == *MEMORY[0x18961CCA8])
  {
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v8, *MEMORY[0x18961AA58], v3);
    uint64_t v138 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    uint64_t v139 = v150;
    v138(v150, v8, v3);
    unint64_t v140 = (*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v20 = swift_allocObject();
    v138((char *)(v20 + v140), v139, v3);
    uint64_t v21 = (uint64_t (*)())partial apply for closure #1 in categoryScalarPredicate(_:);
    goto LABEL_82;
  }

  if (v11 == *MEMORY[0x18961CD20])
  {
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v8, *MEMORY[0x18961AAD0], v3);
    uint64_t v141 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    unint64_t v142 = v150;
    v141(v150, v8, v3);
    unint64_t v143 = (*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v20 = swift_allocObject();
    v141((char *)(v20 + v143), v142, v3);
    uint64_t v21 = (uint64_t (*)())partial apply for closure #1 in categoryScalarPredicate(_:);
    goto LABEL_82;
  }

  if (v11 == *MEMORY[0x18961CCD0])
  {
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v8, *MEMORY[0x18961AA80], v3);
    uint64_t v144 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    uint64_t v145 = v150;
    v144(v150, v8, v3);
    unint64_t v146 = (*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v20 = swift_allocObject();
    v144((char *)(v20 + v146), v145, v3);
    uint64_t v21 = (uint64_t (*)())partial apply for closure #1 in categoryScalarPredicate(_:);
    goto LABEL_82;
  }

  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t Unicode.BinaryProperty.generateConsumer(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Unicode.BinaryProperty();
  uint64_t v5 = *(void *)(v4 - 8);
  int v6 = MEMORY[0x1895F8858](v4);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[2];
  if (v9)
  {
    if ((*((_DWORD *)a1 + v9 + 7) & 0x10000) != 0) {
      a1 = consumeCharacterWithLeadingScalar(_:);
    }
    else {
      a1 = consumeScalar(_:);
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v2, v4);
    int v6 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v8, v4);
    if (v6 == *MEMORY[0x18961CA98])
    {
      uint64_t v10 = specialized closure #1 in propertyScalarPredicate(_:);
      return ((uint64_t (*)(void *, void))a1)(v10, 0LL);
    }

    if (v6 == *MEMORY[0x18961CA20])
    {
      uint64_t v10 = specialized closure #1 in propertyScalarPredicate(_:);
      return ((uint64_t (*)(void *, void))a1)(v10, 0LL);
    }

    if (v6 == *MEMORY[0x18961CA48])
    {
      uint64_t v10 = specialized closure #1 in propertyScalarPredicate(_:);
      return ((uint64_t (*)(void, void))a1)(v10, 0LL);
    }

    if (v6 == *MEMORY[0x18961CA68])
    {
      uint64_t v10 = specialized closure #1 in propertyScalarPredicate(_:);
      return ((uint64_t (*)(void, void))a1)(v10, 0LL);
    }

    if (v6 == *MEMORY[0x18961CBD0])
    {
      uint64_t v10 = specialized closure #1 in propertyScalarPredicate(_:);
      return ((uint64_t (*)(void, void))a1)(v10, 0LL);
    }

    if (v6 == *MEMORY[0x18961CB48]) {
      goto LABEL_17;
    }
    if (v6 == *MEMORY[0x18961CAA0])
    {
      uint64_t v10 = specialized closure #1 in propertyScalarPredicate(_:);
      return ((uint64_t (*)(void, void))a1)(v10, 0LL);
    }

    if (v6 == *MEMORY[0x18961CB58])
    {
      uint64_t v10 = specialized closure #1 in propertyScalarPredicate(_:);
      return ((uint64_t (*)(void, void))a1)(v10, 0LL);
    }

    if (v6 == *MEMORY[0x18961CB60])
    {
      uint64_t v10 = specialized closure #1 in propertyScalarPredicate(_:);
      return ((uint64_t (*)(void, void))a1)(v10, 0LL);
    }

    if (v6 == *MEMORY[0x18961CBA0])
    {
      uint64_t v10 = specialized closure #1 in propertyScalarPredicate(_:);
      return ((uint64_t (*)(void, void))a1)(v10, 0LL);
    }

    if (v6 == *MEMORY[0x18961CB68])
    {
      uint64_t v10 = specialized closure #1 in propertyScalarPredicate(_:);
      return ((uint64_t (*)(void, void))a1)(v10, 0LL);
    }
  }

  else
  {
    __break(1u);
  }

  if (v6 == *MEMORY[0x18961CB70])
  {
    uint64_t v10 = specialized closure #1 in propertyScalarPredicate(_:);
    return ((uint64_t (*)(void, void))a1)(v10, 0LL);
  }

  if (v6 == *MEMORY[0x18961CB78])
  {
    uint64_t v10 = specialized closure #1 in propertyScalarPredicate(_:);
    return ((uint64_t (*)(void, void))a1)(v10, 0LL);
  }

  if (v6 == *MEMORY[0x18961CBC0])
  {
    uint64_t v10 = specialized closure #1 in propertyScalarPredicate(_:);
    return ((uint64_t (*)(void, void))a1)(v10, 0LL);
  }

  if (v6 == *MEMORY[0x18961CA28])
  {
    uint64_t v10 = specialized closure #1 in propertyScalarPredicate(_:);
    return ((uint64_t (*)(void, void))a1)(v10, 0LL);
  }

  if (v6 == *MEMORY[0x18961CBA8])
  {
    uint64_t v10 = specialized closure #1 in propertyScalarPredicate(_:);
    return ((uint64_t (*)(void, void))a1)(v10, 0LL);
  }

  if (v6 == *MEMORY[0x18961CC18])
  {
    uint64_t v10 = specialized closure #1 in propertyScalarPredicate(_:);
    return ((uint64_t (*)(void, void))a1)(v10, 0LL);
  }

  if (v6 == *MEMORY[0x18961CB10])
  {
    uint64_t v10 = specialized closure #1 in propertyScalarPredicate(_:);
    return ((uint64_t (*)(void, void))a1)(v10, 0LL);
  }

  if (v6 != *MEMORY[0x18961CAD0])
  {
    if (v6 == *MEMORY[0x18961CAA8])
    {
      uint64_t v10 = specialized closure #1 in propertyScalarPredicate(_:);
      return ((uint64_t (*)(void, void))a1)(v10, 0LL);
    }

    if (v6 == *MEMORY[0x18961CBD8])
    {
      uint64_t v10 = specialized closure #1 in propertyScalarPredicate(_:);
      return ((uint64_t (*)(void, void))a1)(v10, 0LL);
    }

    if (v6 == *MEMORY[0x18961CB18])
    {
      uint64_t v10 = specialized closure #1 in propertyScalarPredicate(_:);
      return ((uint64_t (*)(void, void))a1)(v10, 0LL);
    }

    if (v6 == *MEMORY[0x18961CBF8])
    {
      uint64_t v10 = specialized closure #1 in propertyScalarPredicate(_:);
      return ((uint64_t (*)(void, void))a1)(v10, 0LL);
    }

    if (v6 != *MEMORY[0x18961CB50])
    {
      if (v6 == *MEMORY[0x18961CB98])
      {
        uint64_t v10 = specialized closure #1 in propertyScalarPredicate(_:);
        return ((uint64_t (*)(void, void))a1)(v10, 0LL);
      }

      if (v6 == *MEMORY[0x18961CA80])
      {
        uint64_t v10 = specialized closure #1 in propertyScalarPredicate(_:);
        return ((uint64_t (*)(void, void))a1)(v10, 0LL);
      }

      if (v6 == *MEMORY[0x18961CAF8])
      {
        uint64_t v10 = specialized closure #1 in propertyScalarPredicate(_:);
        return ((uint64_t (*)(void, void))a1)(v10, 0LL);
      }

      if (v6 != *MEMORY[0x18961CA88])
      {
        if (v6 == *MEMORY[0x18961CC00])
        {
          uint64_t v10 = specialized closure #1 in propertyScalarPredicate(_:);
          return ((uint64_t (*)(void, void))a1)(v10, 0LL);
        }

        if (v6 != *MEMORY[0x18961CBE0])
        {
          if (v6 == *MEMORY[0x18961CA30])
          {
            uint64_t v10 = specialized closure #1 in propertyScalarPredicate(_:);
            return ((uint64_t (*)(void, void))a1)(v10, 0LL);
          }

          if (v6 == *MEMORY[0x18961CA50])
          {
            uint64_t v10 = specialized closure #1 in propertyScalarPredicate(_:);
            return ((uint64_t (*)(void, void))a1)(v10, 0LL);
          }

          if (v6 == *MEMORY[0x18961CBE8])
          {
            uint64_t v10 = specialized closure #1 in propertyScalarPredicate(_:);
            return ((uint64_t (*)(void, void))a1)(v10, 0LL);
          }

          if (v6 == *MEMORY[0x18961CA18])
          {
            uint64_t v10 = specialized closure #1 in propertyScalarPredicate(_:);
            return ((uint64_t (*)(void, void))a1)(v10, 0LL);
          }

          if (v6 == *MEMORY[0x18961CB38])
          {
            uint64_t v10 = specialized closure #1 in propertyScalarPredicate(_:);
            return ((uint64_t (*)(void, void))a1)(v10, 0LL);
          }

          if (v6 == *MEMORY[0x18961CA58])
          {
            uint64_t v10 = specialized closure #1 in propertyScalarPredicate(_:);
            return ((uint64_t (*)(void, void))a1)(v10, 0LL);
          }

          if (v6 == *MEMORY[0x18961CB80])
          {
            uint64_t v10 = specialized closure #1 in propertyScalarPredicate(_:);
            return ((uint64_t (*)(void, void))a1)(v10, 0LL);
          }

          if (v6 == *MEMORY[0x18961CC20])
          {
            uint64_t v10 = specialized closure #1 in propertyScalarPredicate(_:);
            return ((uint64_t (*)(void, void))a1)(v10, 0LL);
          }

          if (v6 == *MEMORY[0x18961CBC8])
          {
            uint64_t v10 = specialized closure #1 in propertyScalarPredicate(_:);
            return ((uint64_t (*)(void, void))a1)(v10, 0LL);
          }

          if (v6 == *MEMORY[0x18961CB88])
          {
            uint64_t v10 = specialized closure #1 in propertyScalarPredicate(_:);
            return ((uint64_t (*)(void, void))a1)(v10, 0LL);
          }

          if (v6 != *MEMORY[0x18961CAE8]
            && v6 != *MEMORY[0x18961CBB8]
            && v6 != *MEMORY[0x18961CB90]
            && v6 != *MEMORY[0x18961CAF0]
            && v6 != *MEMORY[0x18961CA90]
            && v6 != *MEMORY[0x18961CAD8]
            && v6 != *MEMORY[0x18961CC28]
            && v6 != *MEMORY[0x18961CAE0])
          {
            if (v6 == *MEMORY[0x18961CAC0])
            {
              uint64_t v10 = specialized closure #1 in propertyScalarPredicate(_:);
              return ((uint64_t (*)(void, void))a1)(v10, 0LL);
            }

            if (v6 == *MEMORY[0x18961CB20])
            {
              uint64_t v10 = specialized closure #1 in propertyScalarPredicate(_:);
              return ((uint64_t (*)(void, void))a1)(v10, 0LL);
            }

            if (v6 != *MEMORY[0x18961CBB0])
            {
              if (v6 == *MEMORY[0x18961CAC8])
              {
                uint64_t v10 = specialized closure #1 in propertyScalarPredicate(_:);
                return ((uint64_t (*)(void, void))a1)(v10, 0LL);
              }

              if (v6 == *MEMORY[0x18961CBF0])
              {
                uint64_t v10 = specialized closure #1 in propertyScalarPredicate(_:);
                return ((uint64_t (*)(void, void))a1)(v10, 0LL);
              }

              if (v6 == *MEMORY[0x18961CB28])
              {
                uint64_t v10 = closure #2 in Unicode.BinaryProperty.generateConsumer(_:);
                return ((uint64_t (*)(void, void))a1)(v10, 0LL);
              }

              if (v6 == *MEMORY[0x18961CA38])
              {
                uint64_t v10 = specialized closure #1 in propertyScalarPredicate(_:);
                return ((uint64_t (*)(void, void))a1)(v10, 0LL);
              }

              if (v6 == *MEMORY[0x18961CB00])
              {
                uint64_t v10 = specialized closure #1 in propertyScalarPredicate(_:);
                return ((uint64_t (*)(void, void))a1)(v10, 0LL);
              }

              if (v6 == *MEMORY[0x18961CB40])
              {
                uint64_t v10 = specialized closure #1 in propertyScalarPredicate(_:);
                return ((uint64_t (*)(void, void))a1)(v10, 0LL);
              }

              if (v6 == *MEMORY[0x18961CB08])
              {
                uint64_t v10 = specialized closure #1 in propertyScalarPredicate(_:);
                return ((uint64_t (*)(void, void))a1)(v10, 0LL);
              }

              if (v6 == *MEMORY[0x18961CC30])
              {
                uint64_t v10 = specialized closure #1 in propertyScalarPredicate(_:);
                return ((uint64_t (*)(void, void))a1)(v10, 0LL);
              }

              if (v6 == *MEMORY[0x18961CB30])
              {
                uint64_t v10 = specialized closure #1 in propertyScalarPredicate(_:);
                return ((uint64_t (*)(void, void))a1)(v10, 0LL);
              }

              if (v6 == *MEMORY[0x18961CA40])
              {
                uint64_t v10 = specialized closure #1 in propertyScalarPredicate(_:);
                return ((uint64_t (*)(void, void))a1)(v10, 0LL);
              }

              if (v6 == *MEMORY[0x18961CA60])
              {
                uint64_t v10 = specialized closure #1 in propertyScalarPredicate(_:);
                return ((uint64_t (*)(void, void))a1)(v10, 0LL);
              }

              if (v6 == *MEMORY[0x18961CC10])
              {
                uint64_t v10 = specialized closure #1 in propertyScalarPredicate(_:);
                return ((uint64_t (*)(void, void))a1)(v10, 0LL);
              }

              if (v6 == *MEMORY[0x18961CA70]
                || v6 == *MEMORY[0x18961CA78]
                || v6 == *MEMORY[0x18961CAB0]
                || v6 == *MEMORY[0x18961CAB8])
              {
                uint64_t v21 = 0LL;
                unint64_t v22 = 0xE000000000000000LL;
                _StringGuts.grow(_:)(22LL);
                v18._object = (void *)0x8000000182DA3D30LL;
                v18._uint64_t countAndFlagsBits = 0xD000000000000014LL;
                String.append(_:)(v18);
                _print_unlocked<A, B>(_:_:)();
                uint64_t v19 = v21;
                unint64_t v20 = v22;
                type metadata accessor for Unsupported();
                lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind( &lazy protocol witness table cache variable for type Unsupported and conformance Unsupported,  (uint64_t (*)(uint64_t))MEMORY[0x18961C120],  MEMORY[0x18961C130]);
                swift_allocError();
                uint64_t v15 = v19;
                unint64_t v16 = v20;
                uint64_t v17 = 612LL;
                goto LABEL_18;
              }

              (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
            }
          }
        }
      }
    }
  }

BOOL closure #3 in closure #1 in AST.Atom.CharacterProperty.generateConsumer(_:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Unicode.Scalar.properties.getter();
  uint64_t v9 = Unicode.Scalar.Properties.age.getter();
  uint64_t v11 = v10;
  char v13 = v12;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if ((v13 & 1) != 0) {
    return 0LL;
  }
  BOOL v14 = v9 <= a2;
  if (v9 == a2) {
    return v11 <= a3;
  }
  return v14;
}

BOOL closure #4 in closure #1 in AST.Atom.CharacterProperty.generateConsumer(_:)(double a1)
{
  uint64_t v2 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Unicode.Scalar.properties.getter();
  double v6 = COERCE_DOUBLE(Unicode.Scalar.Properties.numericValue.getter());
  BOOL v8 = (v7 & 1) == 0;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v6 == a1 && v8;
}

uint64_t closure #5 in closure #1 in AST.Atom.CharacterProperty.generateConsumer(_:)(int a1, uint64_t a2)
{
  uint64_t v32 = a2;
  int v31 = a1;
  uint64_t v2 = type metadata accessor for Unicode.NumericType();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  unint64_t v30 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Unicode.NumericType?, Unicode.NumericType?));
  MEMORY[0x1895F8858](v5);
  char v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Unicode.NumericType?);
  uint64_t v9 = MEMORY[0x1895F8858](v8);
  uint64_t v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = MEMORY[0x1895F8858](v9);
  BOOL v14 = (char *)&v29 - v13;
  MEMORY[0x1895F8858](v12);
  uint64_t v16 = (char *)&v29 - v15;
  uint64_t v17 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1895F8858](v17);
  unint64_t v20 = (char *)&v29 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Unicode.Scalar.properties.getter();
  Unicode.Scalar.Properties.numericType.getter();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v14, v32, v2);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v3 + 56))(v14, 0LL, 1LL, v2);
  uint64_t v21 = (uint64_t)&v7[*(int *)(v5 + 48)];
  outlined init with take of (offset: Int, element: (CaptureList.Capture, Processor._StoredCapture))?( (uint64_t)v16,  (uint64_t)v7,  &demangling cache variable for type metadata for Unicode.NumericType?);
  outlined init with take of (offset: Int, element: (CaptureList.Capture, Processor._StoredCapture))?( (uint64_t)v14,  v21,  &demangling cache variable for type metadata for Unicode.NumericType?);
  unint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  if (v22((uint64_t)v7, 1LL, v2) == 1)
  {
    int v23 = v22(v21, 1LL, v2);
    if (v23 == 1) {
      unint64_t v24 = &demangling cache variable for type metadata for Unicode.NumericType?;
    }
    else {
      unint64_t v24 = &demangling cache variable for type metadata for (Unicode.NumericType?, Unicode.NumericType?);
    }
    if (v23 == 1) {
      char v25 = -1;
    }
    else {
      char v25 = 0;
    }
  }

  else
  {
    outlined init with copy of (range: Range<String.Index>, value: Any?)?( (uint64_t)v7,  (uint64_t)v11,  &demangling cache variable for type metadata for Unicode.NumericType?);
    if (v22(v21, 1LL, v2) == 1)
    {
      (*(void (**)(char *, uint64_t))(v3 + 8))(v11, v2);
      char v25 = 0;
      unint64_t v24 = &demangling cache variable for type metadata for (Unicode.NumericType?, Unicode.NumericType?);
    }

    else
    {
      uint64_t v26 = v30;
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(v30, v21, v2);
      char v25 = dispatch thunk of static Equatable.== infix(_:_:)();
      unint64_t v27 = *(void (**)(char *, uint64_t))(v3 + 8);
      v27(v26, v2);
      v27(v11, v2);
      unint64_t v24 = &demangling cache variable for type metadata for Unicode.NumericType?;
    }
  }

  outlined destroy of (range: Range<String.Index>, value: Any?)?((uint64_t)v7, v24);
  return v25 & 1;
}

uint64_t closure #6 in closure #1 in AST.Atom.CharacterProperty.generateConsumer(_:)()
{
  uint64_t v0 = type metadata accessor for Unicode.CanonicalCombiningClass();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1895F8858](v0);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  char v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Unicode.Scalar.properties.getter();
  Unicode.Scalar.Properties.canonicalCombiningClass.getter();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  char v8 = static Unicode.CanonicalCombiningClass.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v8 & 1;
}

uint64_t closure #7 in closure #1 in AST.Atom.CharacterProperty.generateConsumer(_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v7 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = Unicode.Scalar.properties.getter();
  uint64_t v12 = a4(v11);
  uint64_t v14 = v13;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  if (v12 == a2 && v14 == a3) {
    char v16 = 1;
  }
  else {
    char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  return v16 & 1;
}

uint64_t Unicode.POSIXProperty.generateConsumer(_:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Unicode.POSIXProperty();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *(void *)(a1 + 16);
  if (!v7)
  {
    __break(1u);
    goto LABEL_18;
  }

  int v8 = *(_DWORD *)(a1 + 4 * v7 + 28);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v1, v3);
  int v9 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v6, v3);
  if (v9 != *MEMORY[0x18961C9E0])
  {
    if (v9 == *MEMORY[0x18961C9E8])
    {
      uint64_t v10 = closure #2 in Unicode.POSIXProperty.generateConsumer(_:);
      goto LABEL_14;
    }

    if (v9 == *MEMORY[0x18961C9F0])
    {
      uint64_t v10 = specialized closure #1 in propertyScalarPredicate(_:);
      goto LABEL_14;
    }

    if (v9 == *MEMORY[0x18961C9F8])
    {
      uint64_t v10 = specialized closure #1 in propertyScalarPredicate(_:);
      goto LABEL_14;
    }

    if (v9 == *MEMORY[0x18961C9D8])
    {
      uint64_t v10 = specialized closure #1 in propertyScalarPredicate(_:);
      goto LABEL_14;
    }

    if (v9 == *MEMORY[0x18961CA00])
    {
      uint64_t v10 = specialized closure #1 in propertyScalarPredicate(_:);
      goto LABEL_14;
    }

BOOL closure #2 in Unicode.BinaryProperty.generateConsumer(_:)(int a1)
{
  return (a1 - 127462) < 0x1A;
}

uint64_t closure #2 in Unicode.POSIXProperty.generateConsumer(_:)(int a1)
{
  uint64_t v2 = type metadata accessor for Unicode.GeneralCategory();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x1895F8858](v2);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v4);
  int v8 = (char *)&v15 - v7;
  uint64_t v9 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](v9);
  uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Unicode.Scalar.properties.getter();
  Unicode.Scalar.Properties.generalCategory.getter();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v6, *MEMORY[0x18961AA80], v2);
  LOBYTE(v12) = MEMORY[0x186E175EC](v8, v6);
  uint64_t v13 = *(void (**)(char *, uint64_t))(v3 + 8);
  v13(v6, v2);
  v13(v8, v2);
  return v12 & 1 | (a1 == 9);
}

uint64_t closure #3 in Unicode.POSIXProperty.generateConsumer(_:)(uint64_t a1)
{
  uint64_t v34 = type metadata accessor for Unicode.GeneralCategory();
  uint64_t v2 = *(void *)(v34 - 8);
  uint64_t v3 = MEMORY[0x1895F8858](v34);
  uint64_t v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v3);
  uint64_t v7 = (char *)&v32 - v6;
  uint64_t v8 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x1895F8858](v8);
  uint64_t v35 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = MEMORY[0x1895F8858](v10);
  uint64_t v14 = (char *)&v32 - v13;
  MEMORY[0x1895F8858](v12);
  char v16 = (char *)&v32 - v15;
  char v17 = Unicode.Scalar.Properties.isWhitespace.getter();
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v18(v16, a1, v8);
  if ((v17 & 1) != 0)
  {
    uint64_t v19 = *(void (**)(char *, uint64_t))(v9 + 8);
    v19(v16, v8);
    v18(v14, a1, v8);
LABEL_4:
    v19(v14, v8);
    unint64_t v24 = v35;
    v18(v35, a1, v8);
    goto LABEL_5;
  }

  Unicode.Scalar.Properties.generalCategory.getter();
  uint64_t v19 = *(void (**)(char *, uint64_t))(v9 + 8);
  v19(v16, v8);
  uint64_t v20 = *MEMORY[0x18961AAF0];
  uint64_t v21 = v34;
  unint64_t v33 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 104);
  v33(v5, v20, v34);
  char v22 = MEMORY[0x186E175EC](v7, v5);
  int v23 = *(void (**)(char *, uint64_t))(v2 + 8);
  v23(v5, v21);
  v23(v7, v21);
  v18(v14, a1, v8);
  if ((v22 & 1) != 0) {
    goto LABEL_4;
  }
  Unicode.Scalar.Properties.generalCategory.getter();
  v19(v14, v8);
  uint64_t v28 = v33;
  uint64_t v27 = v34;
  v33(v5, *MEMORY[0x18961AAF8], v34);
  char v29 = MEMORY[0x186E175EC](v7, v5);
  v23(v5, v27);
  v23(v7, v27);
  unint64_t v24 = v35;
  v18(v35, a1, v8);
  if ((v29 & 1) == 0)
  {
    Unicode.Scalar.Properties.generalCategory.getter();
    v19(v24, v8);
    uint64_t v30 = v34;
    v28(v5, *MEMORY[0x18961AA18], v34);
    char v31 = MEMORY[0x186E175EC](v7, v5);
    v23(v5, v30);
    v23(v7, v30);
    char v25 = v31 ^ 1;
    return v25 & 1;
  }

uint64_t closure #5 in Unicode.POSIXProperty.generateConsumer(_:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Unicode.NumericType?);
  MEMORY[0x1895F8858](v2);
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1895F8858](v5);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = MEMORY[0x1895F8858](v7);
  uint64_t v12 = (char *)&v23 - v11;
  MEMORY[0x1895F8858](v10);
  uint64_t v14 = (char *)&v23 - v13;
  char v15 = Unicode.Scalar.Properties.isAlphabetic.getter();
  char v16 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v16(v14, a1, v5);
  if ((v15 & 1) != 0)
  {
    char v17 = *(void (**)(char *, uint64_t))(v6 + 8);
    v17(v14, v5);
    v16(v12, a1, v5);
    char v18 = 1;
  }

  else
  {
    Unicode.Scalar.Properties.numericType.getter();
    char v17 = *(void (**)(char *, uint64_t))(v6 + 8);
    v17(v14, v5);
    uint64_t v19 = type metadata accessor for Unicode.NumericType();
    char v18 = 1;
    int v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 48LL))(v4, 1LL, v19);
    outlined destroy of (range: Range<String.Index>, value: Any?)?( (uint64_t)v4,  &demangling cache variable for type metadata for Unicode.NumericType?);
    v16(v12, a1, v5);
    if (v20 == 1) {
      char v18 = Unicode.Scalar.Properties.isJoinControl.getter();
    }
  }

  v17(v12, v5);
  v16(v9, a1, v5);
  if ((v18 & 1) != 0) {
    char v21 = 1;
  }
  else {
    char v21 = Unicode.Scalar.Properties.isDash.getter();
  }
  v17(v9, v5);
  return v21 & 1;
}

Swift::Void __swiftcall Processor.SavePoint.takePositionFromQuantifiedRange(_:)(Swift::String a1)
{
  if ((*(_BYTE *)(v1 + 40) & 1) == 0)
  {
    unint64_t countAndFlagsBits = a1._countAndFlagsBits;
    unint64_t v3 = *(void *)(v1 + 24);
    a1._unint64_t countAndFlagsBits = *(void *)(v1 + 32);
    *(void *)(v1 + 8) = a1._countAndFlagsBits;
    *(_BYTE *)(v1 + 16) = 0;
    unint64_t v4 = v3 >> 14;
    unint64_t v5 = (unint64_t)a1._countAndFlagsBits >> 14;
    if (v3 >> 14 == (unint64_t)a1._countAndFlagsBits >> 14)
    {
      unint64_t v3 = 0LL;
      unint64_t v6 = 0LL;
LABEL_15:
      *(void *)(v1 + 24) = v3;
      *(void *)(v1 + 32) = v6;
      *(_BYTE *)(v1 + 40) = v4 == v5;
      return;
    }

    unint64_t object = (unint64_t)a1._object;
    if (*(_BYTE *)(v1 + 41) != 1)
    {
      unint64_t v6 = String.index(before:)();
      if (v4 <= v6 >> 14) {
        goto LABEL_15;
      }
      do
      {
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        unint64_t v6 = String.UnicodeScalarView._foreignIndex(before:)();
      }

      while (v4 > v6 >> 14);
      goto LABEL_15;
    }

    unint64_t v8 = _StringGuts.validateInclusiveScalarIndex(_:)( a1._countAndFlagsBits,  countAndFlagsBits,  (unint64_t)a1._object);
    if (v8 < 0x4000) {
      goto LABEL_23;
    }
    if ((object & 0x1000000000000000LL) != 0) {
      goto LABEL_24;
    }
    if ((object & 0x2000000000000000LL) != 0)
    {
      v19[0] = countAndFlagsBits;
      v19[1] = object & 0xFFFFFFFFFFFFFFLL;
      uint64_t v14 = (char *)v19 + (v8 >> 16);
      if ((*(v14 - 1) & 0xC0) == 0x80)
      {
        uint64_t v11 = 0LL;
        char v15 = v14 - 2;
        do
          int v16 = v15[v11--] & 0xC0;
        while (v16 == 128);
        goto LABEL_19;
      }
    }

    else
    {
      if ((countAndFlagsBits & 0x1000000000000000LL) != 0)
      {
        uint64_t v9 = (object & 0xFFFFFFFFFFFFFFFLL) + 32;
      }

      else
      {
        unint64_t v18 = v8;
        uint64_t v9 = _StringObject.sharedUTF8.getter();
        unint64_t v8 = v18;
      }

      unint64_t v10 = (v8 >> 16) + v9;
      if ((*(_BYTE *)(v10 - 1) & 0xC0) == 0x80)
      {
        uint64_t v11 = 0LL;
        unint64_t v12 = v10 - 2;
        do
          int v13 = *(_BYTE *)(v12 + v11--) & 0xC0;
        while (v13 == 128);
LABEL_19:
        uint64_t v17 = 1 - v11;
        goto LABEL_21;
      }
    }

    uint64_t v17 = 1LL;
LABEL_21:
    unint64_t v6 = (v8 - (v17 << 16)) & 0xFFFFFFFFFFFF0000LL | 5;
    if (v4 <= v6 >> 14) {
      goto LABEL_15;
    }
    goto LABEL_22;
  }

  __break(1u);
}

Swift::Void __swiftcall Processor.cycle()()
{
  unint64_t v1 = *(void *)(v0 + 72);
  if ((v1 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v2 = *(void *)(v0 + 56);
    if (v1 < *(void *)(v2 + 16))
    {
      unint64_t v3 = (char *)&loc_182D4C304
         + dword_182D4D094[specialized Instruction.OpCode.init(rawValue:)(HIBYTE(*(void *)(v2 + 8 * v1 + 32)))];
      __asm { BR              X10 }
    }
  }

  __break(1u);
  JUMPOUT(0x182D4CDE0LL);
}

void sub_182D4CF80()
{
}

void MEProgram.description.getter()
{
  v1._unint64_t countAndFlagsBits = MEMORY[0x186E17100](v0[1], MEMORY[0x189617AB0]);
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._unint64_t countAndFlagsBits = 10LL;
  v2._unint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v2);
  uint64_t v3 = v0[4];
  if (*(void *)(v3 + 16))
  {
    _StringGuts.grow(_:)(21LL);
    swift_bridgeObjectRelease();
    uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:));
    v5._unint64_t countAndFlagsBits = MEMORY[0x186E17100](v3, v4);
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    v6._unint64_t countAndFlagsBits = 0xD000000000000013LL;
    v6._unint64_t object = (void *)0x8000000182DA3150LL;
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
  }

  uint64_t v7 = *v0;
  uint64_t v8 = *(void *)(*v0 + 16LL);
  if (v8)
  {
    unint64_t v9 = 0LL;
    uint64_t v10 = v7 + 32;
    while (v9 < *(void *)(v7 + 16))
    {
      unint64_t v12 = *(void *)(v10 + 8 * v9);
      v13._unint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v13);
      swift_bridgeObjectRelease();
      v14._unint64_t countAndFlagsBits = 8285LL;
      v14._unint64_t object = (void *)0xE200000000000000LL;
      String.append(_:)(v14);
      v15._unint64_t countAndFlagsBits = Instruction.description.getter(v12);
      String.append(_:)(v15);
      swift_bridgeObjectRelease();
      v16._unint64_t countAndFlagsBits = 91LL;
      v16._unint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v16);
      swift_bridgeObjectRelease();
      unsigned int v17 = specialized Instruction.OpCode.init(rawValue:)(HIBYTE(v12));
      if (v17 <= 0x11 && ((1 << v17) & 0x30010) != 0)
      {
        if ((v12 & 0xFFFFFFFFFFFFFFLL) >= *(void *)(v7 + 16)) {
          goto LABEL_13;
        }
        v18._unint64_t countAndFlagsBits = Instruction.description.getter(*(void *)(v10 + 8 * (v12 & 0xFFFFFFFFFFFFFFLL)));
        String.append(_:)(v18);
        swift_bridgeObjectRelease();
        v19._unint64_t countAndFlagsBits = 539963168LL;
        v19._unint64_t object = (void *)0xE400000000000000LL;
        String.append(_:)(v19);
        swift_bridgeObjectRelease();
      }

      ++v9;
      v11._unint64_t countAndFlagsBits = 10LL;
      v11._unint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v11);
      if (v8 == v9) {
        return;
      }
    }

    __break(1u);
LABEL_13:
    __break(1u);
  }

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance QuantifyPayload.PayloadType( char *a1, char *a2)
{
  return qword_182DA0678[*a1] == qword_182DA0678[*a2];
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance QuantifyPayload.PayloadType()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(qword_182DA0678[v1]);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance QuantifyPayload.PayloadType()
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance QuantifyPayload.PayloadType()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(qword_182DA0678[v1]);
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance QuantifyPayload.PayloadType@<X0>( unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = specialized QuantifyPayload.PayloadType.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance QuantifyPayload.PayloadType( void *a1@<X8>)
{
  *a1 = qword_182DA0678[*v1];
}

uint64_t DSLTree.Atom.Assertion.rawValue.getter()
{
  return *v0;
}

_StringProcessing::DSLTree::Atom::Assertion_optional __swiftcall DSLTree.Atom.Assertion.init(rawValue:)( Swift::UInt64 rawValue)
{
  char v2 = 13;
  if (rawValue < 0xD) {
    char v2 = rawValue;
  }
  *uint64_t v1 = v2;
  return (_StringProcessing::DSLTree::Atom::Assertion_optional)rawValue;
}

void *protocol witness for RawRepresentable.init(rawValue:) in conformance Instruction@<X0>( void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Instruction(void *a1@<X8>)
{
  *a1 = *v1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Instruction()
{
  Swift::UInt64 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Instruction()
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Instruction()
{
  Swift::UInt64 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Instruction(void *a1, void *a2)
{
  return *a1 == *a2;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Instruction.OpCode( unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void protocol witness for Hashable.hash(into:) in conformance Instruction.OpCode()
{
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Instruction.OpCode@<X0>( unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = specialized Instruction.OpCode.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Instruction.OpCode( void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t specialized TypedSetVector.store(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if (*(void *)(v6 + 16))
  {
    unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if ((v8 & 1) != 0) {
      return *(void *)(*(void *)(v6 + 56) + 8 * v7);
    }
  }

  uint64_t v10 = (char *)v3[1];
  uint64_t v9 = *((void *)v10 + 2);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v9 + 1,  1,  v10);
  }
  unint64_t v12 = *((void *)v10 + 2);
  unint64_t v11 = *((void *)v10 + 3);
  if (v12 >= v11 >> 1) {
    uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v11 > 1),  v12 + 1,  1,  v10);
  }
  *((void *)v10 + 2) = v12 + 1;
  Swift::String v13 = &v10[16 * v12];
  *((void *)v13 + 4) = a1;
  *((void *)v13 + 5) = a2;
  v3[1] = (uint64_t)v10;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v16 = *v3;
  *uint64_t v3 = 0x8000000000000000LL;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v9, a1, a2, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v16;
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t specialized Sequence.forEach(_:)(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    char v2 = (uint64_t *)(result + 32);
    do
    {
      uint64_t v3 = *v2++;
      swift_retain();
      PrettyPrinter.printAsPattern(convertedFromAST:isTopLevel:)(v3, 0LL);
      unint64_t result = swift_release();
      --v1;
    }

    while (v1);
  }

  return result;
}

uint64_t Character._isHorizontalWhitespace.getter(unint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Unicode.GeneralCategory();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1895F8858](v4);
  char v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v6);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1895F8858](v11);
  Swift::String v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v15 = specialized Collection.first.getter(a1, a2);
  if ((v15 & 0x100000000LL) != 0)
  {
    char v16 = 0;
  }

  else if ((_DWORD)v15 == 9)
  {
    char v16 = 1;
  }

  else
  {
    Unicode.Scalar.properties.getter();
    Unicode.Scalar.Properties.generalCategory.getter();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v8, *MEMORY[0x18961AA80], v4);
    char v16 = MEMORY[0x186E175EC](v10, v8);
    unsigned int v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v8, v4);
    v17(v10, v4);
  }

  return v16 & 1;
}

uint64_t Character._isNewline.getter(unint64_t a1, unint64_t a2)
{
  unint64_t v2 = specialized Collection.first.getter(a1, a2);
  BOOL v3 = (v2 - 8232) < 2 || v2 == 133;
  unsigned int v4 = (v2 - 14) > 0xFFFFFFFB || v3;
  if ((v2 & 0x100000000LL) != 0) {
    return 0LL;
  }
  else {
    return v4;
  }
}

Swift::Void __swiftcall Processor.signalFailure(preservingCaptures:)(Swift::Bool preservingCaptures)
{
  unint64_t v2 = (void *)v1;
  uint64_t v4 = v1 + 152;
  BOOL v3 = *(char **)(v1 + 152);
  unint64_t v5 = *((void *)v3 + 2);
  if (v5)
  {
    unint64_t v7 = v5 - 1;
    if ((v3[80 * v5 - 8] & 1) == 0)
    {
      uint64_t v9 = *(void *)v1;
      char v8 = *(void **)(v1 + 8);
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        goto LABEL_18;
      }
      goto LABEL_8;
    }

    specialized Array._customRemoveLast()((uint64_t)&v18);
    BOOL v3 = v22;
    if (v22)
    {
      char v8 = v23;
      uint64_t v4 = v24;
      uint64_t v9 = v21;
      unint64_t v7 = v19;
      char v10 = v20 & 1;
      *(void *)(v1 + 72) = v18;
      if ((v10 & 1) != 0) {
        goto LABEL_11;
      }
    }

    else
    {
      specialized Array.remove(at:)(*(void *)(*(void *)v4 + 16LL) - 1LL, (uint64_t)&v18);
      unint64_t v7 = v19;
      char v17 = v20;
      uint64_t v9 = v21;
      BOOL v3 = v22;
      char v8 = v23;
      uint64_t v4 = v24;
      *(void *)(v1 + 72) = v18;
      if ((v17 & 1) != 0) {
        goto LABEL_11;
      }
    }

    while (1)
    {
      uint64_t v15 = v2[20];
      v2[8] = v7;
      uint64_t v16 = *(void *)(v15 + 16);
      if (!__OFSUB__(v16, v9)) {
        break;
      }
      __break(1u);
LABEL_18:
      BOOL v3 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v3);
LABEL_8:
      if (v5 > *((void *)v3 + 2))
      {
        __break(1u);
LABEL_20:
        __break(1u);
        return;
      }

      swift_bridgeObjectRetain();
      v11._unint64_t countAndFlagsBits = v9;
      v11._unint64_t object = v8;
      Processor.SavePoint.takePositionFromQuantifiedRange(_:)(v11);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(void *)uint64_t v4 = v3;
      if (v5 > *((void *)v3 + 2)) {
        goto LABEL_20;
      }
      uint64_t v12 = *(void *)&v3[80 * v7 + 32];
      uint64_t v13 = (uint64_t)&v3[80 * v7 + 32];
      unint64_t v7 = *(void *)(v13 + 8);
      int v14 = *(unsigned __int8 *)(v13 + 16);
      uint64_t v9 = *(void *)(v13 + 48);
      BOOL v3 = *(char **)(v13 + 56);
      char v8 = *(void **)(v13 + 64);
      uint64_t v4 = *(void *)(v13 + 72);
      v2[9] = v12;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v14 == 1) {
LABEL_11:
      }
        unint64_t v7 = v2[8];
    }

    specialized RangeReplaceableCollection<>.removeLast(_:)(v16 - v9);
    swift_bridgeObjectRelease();
    v2[16] = v8;
    swift_bridgeObjectRelease();
    v2[18] = v4;
    swift_bridgeObjectRelease();
    if (!preservingCaptures) {
      v2[21] = v3;
    }
  }

  else
  {
    *(_BYTE *)(v1 + 193) = 1;
  }

unint64_t Processor.isAtStartOfLine(_:)(uint64_t a1)
{
  unint64_t v3 = v1[8];
  if ((v1[2] ^ v3) < 0x4000) {
    return 1LL;
  }
  unint64_t v5 = *v1;
  if ((a1 & 0x10000000000000LL) != 0)
  {
    unint64_t v9 = v1[1];
    unint64_t v10 = _StringGuts.validateInclusiveScalarIndex(_:)(v3, v5, v9);
    if (v10 < 0x4000)
    {
      __break(1u);
    }

    else if ((v9 & 0x1000000000000000LL) == 0)
    {
      if ((v9 & 0x2000000000000000LL) != 0)
      {
        unint64_t v25 = v5;
        uint64_t v26 = v9 & 0xFFFFFFFFFFFFFFLL;
        uint64_t v16 = (char *)&v25 + (v10 >> 16);
        if ((*(v16 - 1) & 0xC0) == 0x80)
        {
          uint64_t v13 = 0LL;
          char v17 = v16 - 2;
          do
            int v18 = v17[v13--] & 0xC0;
          while (v18 == 128);
          goto LABEL_22;
        }
      }

      else
      {
        if ((v5 & 0x1000000000000000LL) != 0)
        {
          uint64_t v11 = (v9 & 0xFFFFFFFFFFFFFFFLL) + 32;
        }

        else
        {
          unint64_t v24 = v10;
          uint64_t v11 = _StringObject.sharedUTF8.getter();
          unint64_t v10 = v24;
        }

        unint64_t v12 = (v10 >> 16) + v11;
        if ((*(_BYTE *)(v12 - 1) & 0xC0) == 0x80)
        {
          uint64_t v13 = 0LL;
          unint64_t v14 = v12 - 2;
          do
            int v15 = *(_BYTE *)(v14 + v13--) & 0xC0;
          while (v15 == 128);
LABEL_22:
          uint64_t v19 = 1 - v13;
LABEL_24:
          _StringGuts.validateScalarIndex(_:)((v10 - (v19 << 16)) & 0xFFFFFFFFFFFF0000LL | 5, v5, v9);
          if ((v9 & 0x2000000000000000LL) != 0)
          {
            unint64_t v25 = v5;
            uint64_t v26 = v9 & 0xFFFFFFFFFFFFFFLL;
          }

          else if ((v5 & 0x1000000000000000LL) == 0)
          {
            _StringObject.sharedUTF8.getter();
          }

          int v20 = _decodeScalar(_:startingAt:)();
LABEL_29:
          int v21 = v20;
          unsigned int v22 = v20 - 14;
          unint64_t result = 1LL;
          return result;
        }
      }

      uint64_t v19 = 1LL;
      goto LABEL_24;
    }

    unint64_t v23 = String.UnicodeScalarView._foreignIndex(before:)();
    _StringGuts.validateScalarIndex(_:)(v23, v5, v9);
    int v20 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    goto LABEL_29;
  }

  String.index(before:)();
  unint64_t v6 = String.subscript.getter();
  unint64_t result = specialized Collection.first.getter(v6, v7);
  if ((result & 0x100000000LL) != 0)
  {
    __break(1u);
    return result;
  }

  int v8 = result;
  swift_bridgeObjectRelease();
  unint64_t result = 1LL;
  return result;
}

unint64_t Processor.isAtEndOfLine(_:)(uint64_t a1)
{
  unint64_t v3 = v1[8];
  if ((v1[3] ^ v3) < 0x4000) {
    return 1LL;
  }
  unint64_t v5 = *v1;
  if ((a1 & 0x10000000000000LL) != 0)
  {
    unint64_t v9 = v1[1];
    _StringGuts.validateScalarIndex(_:)(v3, v5, v9);
    if ((v9 & 0x1000000000000000LL) != 0)
    {
      int v10 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }

    else
    {
      if ((v9 & 0x2000000000000000LL) == 0 && (v5 & 0x1000000000000000LL) == 0) {
        _StringObject.sharedUTF8.getter();
      }
      int v10 = _decodeScalar(_:startingAt:)();
    }

    int v11 = v10;
    unsigned int v12 = v10 - 14;
    unint64_t result = 1LL;
  }

  else
  {
    unint64_t v6 = String.subscript.getter();
    unint64_t result = specialized Collection.first.getter(v6, v7);
    if ((result & 0x100000000LL) != 0)
    {
      __break(1u);
    }

    else
    {
      int v8 = result;
      swift_bridgeObjectRelease();
      unint64_t result = 1LL;
    }
  }

  return result;
}

void Processor.builtinAssert(by:)(unsigned __int8 a1)
{
  __asm { BR              X10 }

unint64_t sub_182D4DF4C()
{
  unint64_t v2 = v0[3] >> 14;
  if (v2 == v0[8] >> 14)
  {
    char v3 = 1;
    return v3 & 1;
  }

  unint64_t v5 = *v0;
  unint64_t v4 = v0[1];
  if ((v1 & 0x10000000000000LL) != 0)
  {
    unint64_t v10 = _StringGuts.validateScalarIndex(_:)(v0[8], *v0, v0[1]);
    if ((v4 & 0x1000000000000000LL) != 0)
    {
      uint64_t v16 = String.UnicodeScalarView._foreignIndex(after:)();
    }

    else
    {
      unint64_t v11 = v10 >> 16;
      if ((v4 & 0x2000000000000000LL) != 0)
      {
        unint64_t v21 = v5;
        uint64_t v22 = v4 & 0xFFFFFFFFFFFFFFLL;
        int v13 = *((unsigned __int8 *)&v21 + v11);
      }

      else
      {
        if ((v5 & 0x1000000000000000LL) != 0) {
          uint64_t v12 = (v4 & 0xFFFFFFFFFFFFFFFLL) + 32;
        }
        else {
          uint64_t v12 = _StringObject.sharedUTF8.getter();
        }
        int v13 = *(unsigned __int8 *)(v12 + v11);
      }

      int v14 = (char)v13;
      unsigned int v15 = __clz(v13 ^ 0xFF) - 24;
      if (v14 >= 0) {
        LOBYTE(v15) = 1;
      }
      uint64_t v16 = ((v11 + v15) << 16) | 5;
    }

    if ((v0[3] ^ v16) >= 0x4000) {
      goto LABEL_30;
    }
    unint64_t v18 = *v0;
    unint64_t v17 = v0[1];
    _StringGuts.validateScalarIndex(_:)(v0[8], *v0, v17);
    if ((v17 & 0x1000000000000000LL) != 0)
    {
      int v20 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }

    else
    {
      if ((v17 & 0x2000000000000000LL) == 0)
      {
        if ((v18 & 0x1000000000000000LL) == 0) {
          _StringObject.sharedUTF8.getter();
        }
        swift_bridgeObjectRetain();
        int v19 = _decodeScalar(_:startingAt:)();
        swift_bridgeObjectRelease();
LABEL_27:
        char v3 = 1;
        goto LABEL_30;
      }

      unint64_t v21 = v18;
      uint64_t v22 = v17 & 0xFFFFFFFFFFFFFFLL;
      int v20 = _decodeScalar(_:startingAt:)();
    }

    int v19 = v20;
    goto LABEL_27;
  }

  if (v2 != (unint64_t)String.index(after:)() >> 14)
  {
LABEL_30:
    char v3 = 0;
    return v3 & 1;
  }

  unint64_t v6 = String.subscript.getter();
  unint64_t result = specialized Collection.first.getter(v6, v7);
  if ((result & 0x100000000LL) == 0)
  {
    int v9 = result;
    swift_bridgeObjectRelease();
    char v3 = 1;
    goto LABEL_30;
  }

  __break(1u);
  return result;
}

void sub_182D4E394()
{
}

Swift::Bool __swiftcall Processor.atSimpleBoundary(_:_:)( Swift::Bool a1, _StringProcessing::MatchingOptions::SemanticLevel a2)
{
  unint64_t v3 = v2[2] >> 14;
  unint64_t v4 = v2[3] >> 14;
  if (v3 == v4)
  {
    char v5 = 0;
    return v5 & 1;
  }

  char v8 = a2 & 1;
  unint64_t v9 = v2[8];
  if (v9 >> 14 != v3)
  {
    unint64_t v10 = *v2;
    if ((a2 & 1) == 0)
    {
      unint64_t v11 = String.index(before:)();
      goto LABEL_23;
    }

    unint64_t v12 = v2[1];
    unint64_t v13 = _StringGuts.validateInclusiveScalarIndex(_:)(v2[8], *v2, v12);
    if (v13 < 0x4000)
    {
      __break(1u);
    }

    else if ((v12 & 0x1000000000000000LL) == 0)
    {
      if ((v12 & 0x2000000000000000LL) != 0)
      {
        v25[0] = v10;
        v25[1] = v12 & 0xFFFFFFFFFFFFFFLL;
        int v19 = (char *)v25 + (v13 >> 16);
        if ((*(v19 - 1) & 0xC0) == 0x80)
        {
          uint64_t v16 = 0LL;
          int v20 = v19 - 2;
          do
            int v21 = v20[v16--] & 0xC0;
          while (v21 == 128);
          goto LABEL_20;
        }
      }

      else
      {
        if ((v10 & 0x1000000000000000LL) != 0)
        {
          uint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFFLL) + 32;
        }

        else
        {
          unint64_t v24 = v13;
          uint64_t v14 = _StringObject.sharedUTF8.getter();
          unint64_t v13 = v24;
        }

        unint64_t v15 = (v13 >> 16) + v14;
        if ((*(_BYTE *)(v15 - 1) & 0xC0) == 0x80)
        {
          uint64_t v16 = 0LL;
          unint64_t v17 = v15 - 2;
          do
            int v18 = *(_BYTE *)(v17 + v16--) & 0xC0;
          while (v18 == 128);
LABEL_20:
          uint64_t v22 = 1 - v16;
LABEL_22:
          unint64_t v11 = (v13 - (v22 << 16)) & 0xFFFFFFFFFFFF0000LL | 5;
          goto LABEL_23;
        }
      }

      uint64_t v22 = 1LL;
      goto LABEL_22;
    }

    unint64_t v11 = String.UnicodeScalarView._foreignIndex(before:)();
LABEL_23:
    Swift::Bool v23 = a1;
    char v5 = matchesWord #1 (at:) in Processor.atSimpleBoundary(_:_:)(v11, v8, v2, a1);
    if (v9 >> 14 != v4) {
      v5 ^= matchesWord #1 (at:) in Processor.atSimpleBoundary(_:_:)(v9, v8, v2, v23);
    }
    return v5 & 1;
  }

  return matchesWord #1 (at:) in Processor.atSimpleBoundary(_:_:)(v2[8], a2 & 1, v2, a1);
}

BOOL String.isOnWordBoundary(at:in:using:_:)( unint64_t a1, unint64_t a2, unint64_t a3, uint64_t *a4, uint64_t a5)
{
  unint64_t v5 = a1 >> 14;
  unint64_t v6 = a2 >> 14;
  if (a1 >> 14 == a2 >> 14) {
    return 1LL;
  }
  unint64_t v7 = a3 >> 14;
  if (v5 == a3 >> 14) {
    return 1LL;
  }
  unint64_t v10 = a2;
  if (*a4)
  {
    if (specialized Set.contains(_:)(a1, *a4)) {
      return 1LL;
    }
  }

  if ((*(_BYTE *)(a5 + 8) & 1) == 0)
  {
    unint64_t v10 = *(void *)a5;
    unint64_t v6 = *(void *)a5 >> 14;
    if (v5 < v6) {
      return 0LL;
    }
  }

  swift_bridgeObjectRelease();
  uint64_t v13 = MEMORY[0x18961AFF8];
  uint64_t v16 = MEMORY[0x18961AFF8];
  if (v6 < v7 && v5 >= v6)
  {
    do
    {
      specialized Set._Variant.insert(_:)(&v15, v10);
      unint64_t v10 = String._wordIndex(after:)();
    }

    while (v10 >> 14 < v7 && v5 >= v10 >> 14);
    uint64_t v13 = v16;
  }

  *a4 = v13;
  *(void *)a5 = v10;
  *(_BYTE *)(a5 + 8) = 0;
  return specialized Set.contains(_:)(a1, v13);
}

unint64_t String._thoroughMatchAnyNonNewline(at:limitedBy:isScalarSemantics:)( unint64_t a1, unint64_t a2, char a3, unint64_t a4, unint64_t a5)
{
  unint64_t v8 = a1 >> 14;
  unint64_t v9 = a2 >> 14;
  if ((a3 & 1) != 0)
  {
    if (v8 < v9)
    {
      _StringGuts.validateScalarIndex(_:)(a1, a4, a5);
      if ((a5 & 0x1000000000000000LL) != 0)
      {
        int v17 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }

      else
      {
        if ((a5 & 0x2000000000000000LL) != 0)
        {
          unint64_t v27 = a4;
          uint64_t v28 = a5 & 0xFFFFFFFFFFFFFFLL;
        }

        else if ((a4 & 0x1000000000000000LL) == 0)
        {
          _StringObject.sharedUTF8.getter();
        }

        int v17 = _decodeScalar(_:startingAt:)();
      }

      if ((v17 - 14) <= 0xFFFFFFFB)
      {
        unint64_t v13 = 0LL;
        if ((v17 - 8232) >= 2 && v17 != 133)
        {
          unint64_t v18 = _StringGuts.validateScalarIndex(_:)(a1, a4, a5);
          if ((a5 & 0x1000000000000000LL) != 0)
          {
            return String.UnicodeScalarView._foreignIndex(after:)();
          }

          else
          {
            unint64_t v19 = v18 >> 16;
            if ((a5 & 0x2000000000000000LL) != 0)
            {
              unint64_t v27 = a4;
              uint64_t v28 = a5 & 0xFFFFFFFFFFFFFFLL;
              int v21 = *((unsigned __int8 *)&v27 + v19);
            }

            else
            {
              if ((a4 & 0x1000000000000000LL) != 0) {
                uint64_t v20 = (a5 & 0xFFFFFFFFFFFFFFFLL) + 32;
              }
              else {
                uint64_t v20 = _StringObject.sharedUTF8.getter();
              }
              int v21 = *(unsigned __int8 *)(v20 + v19);
            }

            int v25 = (char)v21;
            unsigned int v26 = __clz(v21 ^ 0xFF) - 24;
            if (v25 >= 0) {
              LOBYTE(v26) = 1;
            }
            return ((v19 + v26) << 16) | 5;
          }
        }

        return v13;
      }
    }

    return 0LL;
  }

  if (v8 >= v9) {
    return 0LL;
  }
  unint64_t v10 = String.index(after:)();
  if (v9 >= v10 >> 14)
  {
    unint64_t v13 = v10;
    unint64_t v14 = String.subscript.getter();
    unint64_t v16 = v15;
  }

  else
  {
    uint64_t v11 = String.subscript.getter();
    if ((v11 ^ v12) < 0x4000)
    {
      swift_bridgeObjectRelease();
      return 0LL;
    }

    unint64_t v13 = v12;
    unint64_t v14 = Substring.subscript.getter();
    unint64_t v16 = v22;
    swift_bridgeObjectRelease();
  }

  unint64_t result = specialized Collection.first.getter(v14, v16);
  if ((result & 0x100000000LL) == 0)
  {
    int v24 = result;
    swift_bridgeObjectRelease();
    return 0LL;
  }

  __break(1u);
  return result;
}

uint64_t String._quickASCIICharacter(at:limitedBy:)( unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4 = a2 >> 14;
  if (a2 >> 14 == a1 >> 14) {
    return 0;
  }
  unint64_t v7 = a1;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000LL) == 0) {
    LOBYTE(v8) = 1;
  }
  unint64_t v9 = a1 & 0xC;
  uint64_t v10 = 4LL << v8;
  if (v9 == 4LL << v8) {
    a1 = _StringGuts._slowEnsureMatchingEncoding(_:)(a1, a3, a4);
  }
  if ((a4 & 0x2000000000000000LL) != 0) {
    unint64_t v11 = HIBYTE(a4) & 0xF;
  }
  else {
    unint64_t v11 = a3 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v12 = a1 >> 16;
  if (a1 >> 16 >= v11)
  {
    __break(1u);
LABEL_22:
    unsigned __int8 v14 = String.UTF8View._foreignSubscript(position:)();
    if ((v14 & 0x80) != 0) {
      return 0;
    }
    goto LABEL_17;
  }

  if ((a4 & 0x1000000000000000LL) != 0) {
    goto LABEL_22;
  }
  if ((a4 & 0x2000000000000000LL) != 0)
  {
    unint64_t v25 = a3;
    uint64_t v26 = a4 & 0xFFFFFFFFFFFFFFLL;
    unsigned __int8 v14 = *((_BYTE *)&v25 + v12);
    if ((v14 & 0x80) != 0) {
      return 0;
    }
  }

  else
  {
    if ((a3 & 0x1000000000000000LL) != 0) {
      uint64_t v13 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
    }
    else {
      uint64_t v13 = _StringObject.sharedUTF8.getter();
    }
    unsigned __int8 v14 = *(_BYTE *)(v13 + v12);
    if ((v14 & 0x80) != 0) {
      return 0;
    }
  }

LABEL_46:
      unint64_t v24 = v15 >> 16;
      uint64_t v17 = _StringObject.sharedUTF8.getter();
      unint64_t v16 = v24;
      goto LABEL_33;
    }

    unint64_t v25 = a3;
    uint64_t v26 = a4 & 0xFFFFFFFFFFFFFFLL;
    unsigned __int8 v18 = *((_BYTE *)&v25 + v16);
  }

  __break(1u);
  return result;
}

LABEL_67:
            uint64_t v21 = _StringObject.sharedUTF8.getter();
            goto LABEL_57;
          }

          unint64_t v25 = a3;
          uint64_t v26 = a4 & 0xFFFFFFFFFFFFFFLL;
          unsigned __int8 v22 = *((_BYTE *)&v25 + v20);
        }

LABEL_60:
        if (v22 < 0xCCu) {
          return 13;
        }
        return 0;
      }

      __break(1u);
      goto LABEL_67;
    }

#error "182D4F010: switch analysis failed: failed to propagate the switch expression (funcsize=242)"
uint64_t String._quickMatch(_:at:limitedBy:isScalarSemantics:)( char a1,  unint64_t a2,  unint64_t a3,  uint64_t a4,  unint64_t a5,  unint64_t a6)
{
  char v7;
  String._quickASCIICharacter(at:limitedBy:)(a2, a3, a5, a6);
  if (v7 != 2) {
    __asm { BR              X11 }
  }

  return 0LL;
}

uint64_t Processor.runQuantify(_:)(unint64_t a1)
{
  unint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for AST.Quantification.Kind();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1895F8858](v4);
  unint64_t v8 = (unint64_t)&v421 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v6);
  uint64_t v10 = (char *)&v421 - v9;
  uint64_t v11 = (a1 >> 27);
  unint64_t v12 = (a1 >> 18) & 0x1FF;
  BOOL v37 = v12 == 1;
  uint64_t v13 = v12 == 1;
  uint64_t v14 = v11 + (v12 >> 1);
  if (v37) {
    uint64_t v14 = -1LL;
  }
  unint64_t v438 = v14;
  uint64_t v15 = (a1 >> 16) & 3;
  unint64_t v16 = (unsigned int *)MEMORY[0x18961C388];
  if (v15)
  {
    if (v15 == 1)
    {
      uint64_t v17 = (unsigned int *)MEMORY[0x18961C390];
    }

    else
    {
      if (v15 != 2) {
        goto LABEL_1412;
      }
      uint64_t v17 = (unsigned int *)MEMORY[0x18961C380];
    }

    uint64_t v18 = *v17;
  }

  else
  {
    uint64_t v18 = *MEMORY[0x18961C388];
  }

  unint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 104);
  v19((char *)&v421 - v9, v18, v4);
  v19((char *)v8, *v16, v4);
  unint64_t v20 = lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind( &lazy protocol witness table cache variable for type AST.Quantification.Kind and conformance AST.Quantification.Kind,  (uint64_t (*)(uint64_t))MEMORY[0x18961C398],  MEMORY[0x18961C3B0]);
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v21 = *(void *)(v5 + 8);
  ((void (*)(char *, uint64_t))v21)(v10, v4);
  dispatch thunk of RawRepresentable.rawValue.getter();
  ((void (*)(unint64_t, uint64_t))v21)(v8, v4);
  unint64_t v22 = v447;
  int64_t v23 = v444;
  if (v446 == v443 && v447 == v444)
  {
    unint64_t v24 = 1LL;
    int64_t v23 = v447;
  }

  else
  {
    unint64_t v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((a1 >> 27))
  {
    int v25 = 0;
    int v26 = 0;
    if ((_DWORD)v11 == 1) {
      goto LABEL_20;
    }
  }

  else
  {
    int v25 = v13;
  }

  uint64_t v13 = 0LL;
  int v26 = v25;
LABEL_20:
  unint64_t v442 = a1 & 0x4000000000LL;
  v436 = v2;
  switch((a1 >> 35) & 7)
  {
    case 0uLL:
      unint64_t v8 = v2[1];
      unint64_t v437 = *v2;
      unint64_t v27 = v2[12];
      unint64_t v28 = *(void *)(v27 + 16);
      int v433 = v24;
      if (!v26)
      {
        if ((_DWORD)v13)
        {
          uint64_t v21 = 0LL;
          unint64_t v110 = v27 + 24LL * (unsigned __int16)a1;
          int v111 = *(unsigned __int8 *)(v110 + 32);
          unint64_t v430 = v2[5];
          unint64_t v20 = v430 >> 14;
          uint64_t v13 = v437;
          unint64_t v112 = *(void *)(v110 + 40);
          unint64_t v432 = *(void *)(v110 + 48);
          char v113 = (v8 & 0x1000000000000000LL) == 0 || (v437 & 0x800000000000000LL) != 0;
          uint64_t v114 = 4LL << v113;
          unint64_t v115 = v2[8];
          uint64_t v116 = HIBYTE(v8) & 0xF;
          unint64_t v429 = v116;
          unint64_t v428 = v437 & 0xFFFFFFFFFFFFLL;
          if ((v8 & 0x2000000000000000LL) == 0) {
            uint64_t v116 = v437 & 0xFFFFFFFFFFFFLL;
          }
          unint64_t v441 = v116;
          unint64_t v434 = (v8 & 0xFFFFFFFFFFFFFFFLL) + 32;
          unint64_t v435 = v8 & 0xFFFFFFFFFFFFFFLL;
          uint64_t v431 = v112;
          LODWORD(v438) = v111;
          LODWORD(v427) = v111 ^ (v112 >> 13) & 1;
          unint64_t v426 = (unint64_t)v445;
          int64_t v23 = v115;
          unint64_t v439 = v115;
          unint64_t v440 = v114;
          while (1)
          {
            unint64_t v2 = (unint64_t *)(v115 >> 14);
            if (v115 >> 14 == v20) {
              goto LABEL_249;
            }
            a1 = v115 & 0xC;
            unint64_t v120 = v115;
            if (a1 == v114)
            {
              unint64_t v120 = _StringGuts._slowEnsureMatchingEncoding(_:)(v115, v13, v8);
              uint64_t v114 = v440;
            }

            unint64_t v22 = v120 >> 16;
            if (v120 >> 16 >= v441)
            {
              __break(1u);
LABEL_1318:
              __break(1u);
LABEL_1319:
              __break(1u);
LABEL_1320:
              __break(1u);
LABEL_1321:
              __break(1u);
LABEL_1322:
              __break(1u);
LABEL_1323:
              __break(1u);
LABEL_1324:
              __break(1u);
LABEL_1325:
              __break(1u);
LABEL_1326:
              __break(1u);
LABEL_1327:
              __break(1u);
LABEL_1328:
              __break(1u);
LABEL_1329:
              __break(1u);
LABEL_1330:
              __break(1u);
LABEL_1331:
              __break(1u);
LABEL_1332:
              __break(1u);
LABEL_1333:
              __break(1u);
LABEL_1334:
              __break(1u);
              goto LABEL_1335;
            }

            if ((v8 & 0x1000000000000000LL) != 0)
            {
              unsigned __int8 v147 = String.UTF8View._foreignSubscript(position:)();
              uint64_t v114 = v440;
              unsigned __int8 v122 = v147;
              if ((v147 & 0x80) != 0) {
                goto LABEL_249;
              }
            }

            else if ((v8 & 0x2000000000000000LL) != 0)
            {
              unint64_t v446 = v13;
              unint64_t v447 = v435;
              unsigned __int8 v122 = *((_BYTE *)&v446 + v22);
              if ((v122 & 0x80) != 0) {
                goto LABEL_249;
              }
            }

            else
            {
              uint64_t v121 = v434;
              if ((v13 & 0x1000000000000000LL) == 0)
              {
                uint64_t v121 = _StringObject.sharedUTF8.getter();
                uint64_t v114 = v440;
              }

              unsigned __int8 v122 = *(_BYTE *)(v121 + v22);
              if ((v122 & 0x80) != 0) {
                goto LABEL_249;
              }
            }

            unint64_t v129 = v115;
            if (a1 == v114)
            {
              unint64_t v129 = _StringGuts._slowEnsureMatchingEncoding(_:)(v115, v13, v8);
              uint64_t v114 = v440;
              if ((v8 & 0x1000000000000000LL) == 0)
              {
LABEL_281:
                a1 = (v129 & 0xFFFFFFFFFFFF0000LL) + 65540;
                if (v20 == a1 >> 14) {
                  goto LABEL_344;
                }
                goto LABEL_346;
              }
            }

            else if ((v8 & 0x1000000000000000LL) == 0)
            {
              goto LABEL_281;
            }

            if (v441 <= v129 >> 16) {
              goto LABEL_1341;
            }
            a1 = String.UTF8View._foreignIndex(after:)();
            uint64_t v114 = v440;
            if (v20 == a1 >> 14)
            {
LABEL_344:
              if (v122 >= 0x40u) {
                unint64_t v148 = v432;
              }
              else {
                unint64_t v148 = v431;
              }
              goto LABEL_242;
            }

LABEL_346:
            unint64_t v149 = a1;
            if ((a1 & 0xC) == v114)
            {
              unint64_t v149 = _StringGuts._slowEnsureMatchingEncoding(_:)(a1, v13, v8);
              uint64_t v114 = v440;
            }

            unint64_t v150 = v149 >> 16;
            if (v149 >> 16 >= v441) {
              goto LABEL_1342;
            }
            if ((v8 & 0x1000000000000000LL) != 0)
            {
              uint64_t v13 = v437;
              unsigned __int8 v152 = String.UTF8View._foreignSubscript(position:)();
              uint64_t v114 = v440;
            }

            else if ((v8 & 0x2000000000000000LL) != 0)
            {
              unint64_t v446 = v437;
              unint64_t v447 = v435;
              unsigned __int8 v152 = *((_BYTE *)&v446 + v150);
              uint64_t v13 = v437;
            }

            else
            {
              uint64_t v151 = v434;
              if ((v437 & 0x1000000000000000LL) == 0)
              {
                uint64_t v151 = _StringObject.sharedUTF8.getter();
                uint64_t v114 = v440;
              }

              unsigned __int8 v152 = *(_BYTE *)(v151 + v150);
              uint64_t v13 = v437;
            }

            if (v152 > 0xCBu) {
              goto LABEL_249;
            }
            if (v122 != 13 || v152 != 10) {
              goto LABEL_344;
            }
            if ((a1 & 0xC) == v114)
            {
              uint64_t v154 = _StringGuts._slowEnsureMatchingEncoding(_:)(a1, v13, v8);
              uint64_t v114 = v440;
              a1 = v154;
              if ((v8 & 0x1000000000000000LL) != 0)
              {
LABEL_367:
                if (v441 <= a1 >> 16) {
                  goto LABEL_1378;
                }
                a1 = String.UTF8View._foreignIndex(after:)();
                uint64_t v114 = v440;
                goto LABEL_369;
              }
            }

            else if ((v8 & 0x1000000000000000LL) != 0)
            {
              goto LABEL_367;
            }

            a1 = (a1 & 0xFFFFFFFFFFFF0000LL) + 65540;
LABEL_369:
            if (v20 == a1 >> 14) {
              goto LABEL_381;
            }
            unint64_t v155 = a1;
            if ((a1 & 0xC) == v114)
            {
              unint64_t v155 = _StringGuts._slowEnsureMatchingEncoding(_:)(a1, v437, v8);
              uint64_t v114 = v440;
            }

            unint64_t v156 = v155 >> 16;
            if (v155 >> 16 >= v441) {
              goto LABEL_1379;
            }
            if ((v8 & 0x1000000000000000LL) != 0)
            {
              uint64_t v13 = v437;
              unsigned __int8 v158 = String.UTF8View._foreignSubscript(position:)();
              uint64_t v114 = v440;
            }

            else if ((v8 & 0x2000000000000000LL) != 0)
            {
              unint64_t v446 = v437;
              unint64_t v447 = v435;
              unsigned __int8 v158 = *((_BYTE *)&v446 + v156);
              uint64_t v13 = v437;
            }

            else
            {
              uint64_t v157 = v434;
              if ((v437 & 0x1000000000000000LL) == 0)
              {
                uint64_t v157 = _StringObject.sharedUTF8.getter();
                uint64_t v114 = v440;
              }

              unsigned __int8 v158 = *(_BYTE *)(v157 + v156);
              uint64_t v13 = v437;
            }

            if (v158 < 0xCCu)
            {
LABEL_381:
              if ((v427 & 1) == 0) {
                goto LABEL_1255;
              }
              if (v442)
              {
                if ((a1 & 0xC) != v114 && (a1 & 1) != 0)
                {
                  if (v441 < a1 >> 16) {
                    goto LABEL_1395;
                  }
                  goto LABEL_393;
                }

                if ((a1 & 0xC) == v114)
                {
                  uint64_t v164 = _StringGuts._slowEnsureMatchingEncoding(_:)(a1, v13, v8);
                  uint64_t v114 = v440;
                  a1 = v164;
                }

                if (v441 < a1 >> 16) {
                  goto LABEL_1396;
                }
                if ((a1 & 1) != 0)
                {
LABEL_393:
                  if (a1 < 0x4000) {
                    goto LABEL_1384;
                  }
                }

                else
                {
                  unint64_t v165 = _StringGuts.scalarAlignSlow(_:)(a1, v13, v8);
                  uint64_t v114 = v440;
                  a1 = a1 & 0xC | v165 & 0xFFFFFFFFFFFFFFF3LL | 1;
                  if (a1 < 0x4000) {
                    goto LABEL_1384;
                  }
                }

                if ((v8 & 0x1000000000000000LL) != 0)
                {
                  uint64_t v143 = String.UnicodeScalarView._foreignIndex(before:)();
                  goto LABEL_329;
                }

                if ((v8 & 0x2000000000000000LL) != 0)
                {
                  unint64_t v446 = v13;
                  unint64_t v447 = v435;
                  if ((*((_BYTE *)&v446 + (a1 >> 16) - 1) & 0xC0) != 0x80) {
                    goto LABEL_407;
                  }
                  uint64_t v160 = 0LL;
                  do
                    int v162 = *(_BYTE *)(v426 + (a1 >> 16) + v160--) & 0xC0;
                  while (v162 == 128);
LABEL_406:
                  uint64_t v163 = 1 - v160;
                }

                else
                {
                  uint64_t v159 = v434;
                  if ((v13 & 0x1000000000000000LL) == 0)
                  {
                    uint64_t v159 = _StringObject.sharedUTF8.getter();
                    uint64_t v114 = v440;
                  }

                  if ((*(_BYTE *)((a1 >> 16) + v159 - 1) & 0xC0) == 0x80)
                  {
                    uint64_t v160 = 0LL;
                    do
                      int v161 = *(_BYTE *)(v159 + (a1 >> 16) - 2 + v160--) & 0xC0;
                    while (v161 == 128);
                    goto LABEL_406;
                  }

LABEL_407:
                  uint64_t v163 = 1LL;
                }

                a1 = (a1 - (v163 << 16)) & 0xFFFFFFFFFFFF0000LL | 5;
                goto LABEL_242;
              }

              if ((v438 & 1) == 0) {
                goto LABEL_1255;
              }
              goto LABEL_242;
            }

LABEL_249:
            if (!v442)
            {
              unint64_t v123 = String.index(after:)();
              if (v20 >= v123 >> 14)
              {
                a1 = v123;
                unint64_t v126 = String.subscript.getter();
                unint64_t v128 = v130;
                if (v126 != 2573) {
                  goto LABEL_301;
                }
              }

              else
              {
                uint64_t v124 = String.subscript.getter();
                if (!((v124 ^ v125) >> 14))
                {
                  swift_bridgeObjectRelease();
LABEL_1255:
                  else {
                    int64_t v412 = 0LL;
                  }
                  unint64_t v413 = v439;
                  if ((v433 & (v21 != 1)) != 0)
                  {
                    int v414 = 0;
                  }

                  else
                  {
                    unint64_t v413 = 0LL;
                    int v414 = 1;
                  }

                  if (v21 >= 1) {
                    unint64_t v20 = v115;
                  }
                  else {
                    unint64_t v20 = 0LL;
                  }
                  if (v21 >= 1) {
                    uint64_t v13 = v412;
                  }
                  else {
                    uint64_t v13 = 0LL;
                  }
                  if (v21 >= 1) {
                    unint64_t v22 = v413;
                  }
                  else {
                    unint64_t v22 = 0LL;
                  }
                  if (v21 >= 1) {
                    int v100 = v414;
                  }
                  else {
                    int v100 = 0;
                  }
                  unint64_t v2 = v436;
                  if (v21 < 1) {
                    goto LABEL_1309;
                  }
                  goto LABEL_1281;
                }

                a1 = v125;
                unint64_t v126 = Substring.subscript.getter();
                unint64_t v128 = v127;
                swift_bridgeObjectRelease();
                if (v126 != 2573) {
                  goto LABEL_301;
                }
              }

              if (v128 == 0xE200000000000000LL) {
                goto LABEL_241;
              }
LABEL_301:
              if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
                goto LABEL_241;
              }
              if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                char v146 = 10;
                uint64_t v114 = v440;
              }

              else
              {
                if ((Character._isSingleScalar.getter() & 1) == 0) {
                  goto LABEL_241;
                }
                unint64_t v134 = specialized Collection.first.getter(v126, v128);
                if ((v134 & 0x100000000LL) != 0) {
                  goto LABEL_1408;
                }
                if ((v134 & 0xFFFFFF80) != 0)
                {
LABEL_241:
                  swift_bridgeObjectRelease();
                  uint64_t v114 = v440;
                  if ((v438 & 1) == 0) {
                    goto LABEL_1255;
                  }
                  goto LABEL_242;
                }

                unint64_t v135 = specialized Collection.first.getter(v126, v128);
                if ((v135 & 0x100000000LL) != 0) {
                  goto LABEL_1409;
                }
                int v136 = v135;
                swift_bridgeObjectRelease();
                if ((v136 & 0xFFFFFF00) != 0) {
                  goto LABEL_1363;
                }
                uint64_t v114 = v440;
                if ((v136 & 0xC0) != 0)
                {
                  if ((((_BYTE)v136 - 64) & 0xC0) != 0) {
                    uint64_t v137 = 0LL;
                  }
                  else {
                    uint64_t v137 = (v432 >> v136) & 1;
                  }
                  if ((v438 & 1) != 0)
                  {
LABEL_313:
                    if (v137) {
                      goto LABEL_1255;
                    }
                    goto LABEL_242;
                  }

                  goto LABEL_336;
                }

                char v146 = v136;
              }

              uint64_t v137 = (1LL << v146) & v431;
              if ((v438 & 1) != 0) {
                goto LABEL_313;
              }
LABEL_336:
              if (!v137) {
                goto LABEL_1255;
              }
              goto LABEL_242;
            }

            a1 = v115 & 0xC;
            BOOL v118 = (v115 & 1) == 0 || a1 == v114;
            unint64_t v2 = (unint64_t *)v118;
            if (v118)
            {
              unint64_t v119 = v115;
              if (a1 == v114) {
                unint64_t v119 = _StringGuts._slowEnsureMatchingEncoding(_:)(v115, v13, v8);
              }
              unint64_t v22 = v119 >> 16;
              if (v119 >> 16 >= v441) {
                goto LABEL_1333;
              }
              if ((v119 & 1) == 0) {
                _StringGuts.scalarAlignSlow(_:)(v119, v13, v8);
              }
            }

            else
            {
              unint64_t v22 = v115 >> 16;
              if (v115 >> 16 >= v441) {
                goto LABEL_1334;
              }
            }

            if ((v8 & 0x1000000000000000LL) != 0)
            {
              unsigned int v131 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
            }

            else
            {
              if ((v8 & 0x2000000000000000LL) != 0)
              {
                unint64_t v446 = v13;
                unint64_t v447 = v435;
              }

              else if ((v13 & 0x1000000000000000LL) == 0)
              {
                _StringObject.sharedUTF8.getter();
              }

              unsigned int v131 = _decodeScalar(_:startingAt:)();
            }

            uint64_t v114 = v440;
            if (v131 < 0x80)
            {
              unint64_t v132 = v431;
              if ((v131 & 0xC0) != 0) {
                unint64_t v132 = v432;
              }
              uint64_t v133 = (1LL << v131) & v132;
              if ((_DWORD)v438)
              {
                if (v133) {
                  goto LABEL_1255;
                }
              }

              else if (!v133)
              {
                goto LABEL_1255;
              }
            }

            else if ((v438 & 1) == 0)
            {
              goto LABEL_1255;
            }

            if ((_DWORD)v2)
            {
              unint64_t v138 = v115;
              if (a1 == v440)
              {
                uint64_t v153 = _StringGuts._slowEnsureMatchingEncoding(_:)(v115, v13, v8);
                uint64_t v114 = v440;
                unint64_t v138 = v153;
              }

              if (v441 <= v138 >> 16)
              {
                __break(1u);
LABEL_1338:
                __break(1u);
LABEL_1339:
                __break(1u);
LABEL_1340:
                __break(1u);
LABEL_1341:
                __break(1u);
LABEL_1342:
                __break(1u);
LABEL_1343:
                __break(1u);
LABEL_1344:
                __break(1u);
LABEL_1345:
                __break(1u);
LABEL_1346:
                __break(1u);
LABEL_1347:
                __break(1u);
LABEL_1348:
                __break(1u);
LABEL_1349:
                __break(1u);
LABEL_1350:
                __break(1u);
LABEL_1351:
                __break(1u);
LABEL_1352:
                __break(1u);
LABEL_1353:
                __break(1u);
LABEL_1354:
                __break(1u);
LABEL_1355:
                __break(1u);
LABEL_1356:
                __break(1u);
LABEL_1357:
                __break(1u);
LABEL_1358:
                __break(1u);
LABEL_1359:
                __break(1u);
LABEL_1360:
                __break(1u);
LABEL_1361:
                __break(1u);
LABEL_1362:
                __break(1u);
LABEL_1363:
                __break(1u);
LABEL_1364:
                __break(1u);
LABEL_1365:
                __break(1u);
LABEL_1366:
                __break(1u);
LABEL_1367:
                __break(1u);
LABEL_1368:
                __break(1u);
LABEL_1369:
                __break(1u);
LABEL_1370:
                __break(1u);
LABEL_1371:
                __break(1u);
LABEL_1372:
                __break(1u);
LABEL_1373:
                __break(1u);
LABEL_1374:
                __break(1u);
LABEL_1375:
                __break(1u);
LABEL_1376:
                __break(1u);
LABEL_1377:
                __break(1u);
LABEL_1378:
                __break(1u);
LABEL_1379:
                __break(1u);
LABEL_1380:
                __break(1u);
LABEL_1381:
                __break(1u);
LABEL_1382:
                __break(1u);
LABEL_1383:
                __break(1u);
LABEL_1384:
                __break(1u);
LABEL_1385:
                __break(1u);
LABEL_1386:
                __break(1u);
LABEL_1387:
                __break(1u);
LABEL_1388:
                __break(1u);
LABEL_1389:
                __break(1u);
LABEL_1390:
                __break(1u);
LABEL_1391:
                __break(1u);
LABEL_1392:
                __break(1u);
LABEL_1393:
                __break(1u);
LABEL_1394:
                __break(1u);
LABEL_1395:
                __break(1u);
LABEL_1396:
                __break(1u);
LABEL_1397:
                __break(1u);
LABEL_1398:
                __break(1u);
LABEL_1399:
                __break(1u);
                JUMPOUT(0x182D53E3CLL);
              }

              if ((v138 & 1) == 0)
              {
                unint64_t v139 = _StringGuts.scalarAlignSlow(_:)(v138, v13, v8);
                uint64_t v114 = v440;
                unint64_t v138 = v138 & 0xC | v139 & 0xFFFFFFFFFFFFFFF3LL | 1;
              }
            }

            else
            {
              unint64_t v138 = v115;
              if (v441 <= v115 >> 16) {
                goto LABEL_1338;
              }
            }

            if ((v8 & 0x1000000000000000LL) != 0)
            {
              uint64_t v143 = String.UnicodeScalarView._foreignIndex(after:)();
LABEL_329:
              uint64_t v114 = v440;
              a1 = v143;
              goto LABEL_242;
            }

            unint64_t v140 = v138 >> 16;
            if ((v8 & 0x2000000000000000LL) != 0)
            {
              unint64_t v446 = v13;
              unint64_t v447 = v435;
              int v142 = *((unsigned __int8 *)&v446 + v140);
            }

            else
            {
              uint64_t v141 = v434;
              if ((v13 & 0x1000000000000000LL) == 0)
              {
                uint64_t v141 = _StringObject.sharedUTF8.getter();
                uint64_t v114 = v440;
              }

              int v142 = *(unsigned __int8 *)(v141 + v140);
            }

            int v144 = (char)v142;
            unsigned int v145 = __clz(v142 ^ 0xFF) - 24;
            if (v144 >= 0) {
              LOBYTE(v145) = 1;
            }
            a1 = ((v140 + v145) << 16) | 5;
LABEL_242:
            BOOL v37 = v21++ == 0;
            if (v37) {
              int64_t v117 = a1;
            }
            else {
              int64_t v117 = v23;
            }
            if (v21 >= 0) {
              int64_t v23 = v117;
            }
            unint64_t v439 = v115;
            unint64_t v115 = a1;
          }
        }

        int64_t v23 = (a1 >> 27);
        unint64_t v20 = v2[8];
        if (!v438)
        {
          uint64_t v21 = 0LL;
          uint64_t v13 = v2[8];
          a1 = v13;
LABEL_890:
          unint64_t v22 = v20;
          unint64_t v20 = a1;
LABEL_1297:
          unint64_t v2 = v436;
          if (v21 == 0 || (v433 & 1) == 0 || v21 <= (unint64_t)v23)
          {
            uint64_t v13 = 0LL;
            unint64_t v22 = 0LL;
            int v100 = 1;
          }

          else
          {
            int v100 = 0;
          }

          goto LABEL_1281;
        }

        unint64_t v212 = 0LL;
        uint64_t v21 = 0LL;
        unint64_t v213 = v27 + 24LL * (unsigned __int16)a1;
        int v214 = *(unsigned __int8 *)(v213 + 32);
        unint64_t v426 = v2[5];
        unint64_t v215 = v426 >> 14;
        unint64_t v216 = *(void *)(v213 + 40);
        unint64_t v428 = *(void *)(v213 + 48);
        char v217 = (v8 & 0x1000000000000000LL) == 0 || (v437 & 0x800000000000000LL) != 0;
        uint64_t v218 = 4LL << v217;
        uint64_t v219 = HIBYTE(v8) & 0xF;
        uint64_t v425 = v219;
        uint64_t v424 = v437 & 0xFFFFFFFFFFFFLL;
        if ((v8 & 0x2000000000000000LL) == 0) {
          uint64_t v219 = v437 & 0xFFFFFFFFFFFFLL;
        }
        unint64_t v441 = v219;
        unint64_t v430 = (v8 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v431 = v8 & 0xFFFFFFFFFFFFFFLL;
        uint64_t v427 = v216;
        LODWORD(v432) = v214;
        int v423 = v214 ^ (v216 >> 13) & 1;
        v422 = v445;
        a1 = v20;
        uint64_t v13 = v20;
        unint64_t v429 = v426 >> 14;
        unint64_t v439 = v218;
        while (1)
        {
          unint64_t v435 = v212;
          int64_t v220 = v23;
          unint64_t v440 = v20;
          unint64_t v20 = a1;
          unint64_t v2 = (unint64_t *)(a1 >> 14);
          if (a1 >> 14 == v215)
          {
LABEL_545:
            if (!v442)
            {
              int64_t v23 = v220;
              unint64_t v227 = String.index(after:)();
              if (v215 >= v227 >> 14)
              {
                a1 = v227;
                unint64_t v230 = String.subscript.getter();
                unint64_t v232 = v234;
                if (v230 == 2573) {
                  goto LABEL_585;
                }
              }

              else
              {
                uint64_t v228 = String.subscript.getter();
                if (!((v228 ^ v229) >> 14))
                {
                  swift_bridgeObjectRelease();
                  int64_t v23 = v220;
LABEL_1296:
                  unint64_t v22 = v440;
                  goto LABEL_1297;
                }

                a1 = v229;
                unint64_t v230 = Substring.subscript.getter();
                unint64_t v232 = v231;
                swift_bridgeObjectRelease();
                int64_t v23 = v220;
                unint64_t v215 = v429;
                if (v230 != 2573) {
                  goto LABEL_597;
                }
LABEL_585:
                if (v232 == 0xE200000000000000LL)
                {
LABEL_608:
                  swift_bridgeObjectRelease();
                  uint64_t v218 = v439;
LABEL_609:
                  if ((v432 & 1) == 0) {
                    goto LABEL_1296;
                  }
                  goto LABEL_655;
                }
              }

LABEL_597:
              if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
              {
                if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                {
                  swift_bridgeObjectRelease();
                  char v250 = 10;
                  uint64_t v218 = v439;
                  goto LABEL_631;
                }

                if ((Character._isSingleScalar.getter() & 1) != 0)
                {
                  unint64_t v238 = specialized Collection.first.getter(v230, v232);
                  if ((v238 & 0x100000000LL) != 0) {
                    goto LABEL_1410;
                  }
                  if ((v238 & 0xFFFFFF80) == 0)
                  {
                    unint64_t v239 = specialized Collection.first.getter(v230, v232);
                    if ((v239 & 0x100000000LL) != 0) {
                      goto LABEL_1411;
                    }
                    int v240 = v239;
                    swift_bridgeObjectRelease();
                    if ((v240 & 0xFFFFFF00) != 0) {
                      goto LABEL_1377;
                    }
                    uint64_t v218 = v439;
                    if ((v240 & 0xC0) != 0)
                    {
                      if ((((_BYTE)v240 - 64) & 0xC0) != 0) {
                        uint64_t v241 = 0LL;
                      }
                      else {
                        uint64_t v241 = (v428 >> v240) & 1;
                      }
LABEL_632:
                      if ((v432 & 1) != 0)
                      {
                        if (v241) {
                          goto LABEL_1296;
                        }
                      }

                      else if (!v241)
                      {
                        goto LABEL_1296;
                      }

                      goto LABEL_655;
                    }

                    char v250 = v240;
LABEL_631:
                    uint64_t v241 = (1LL << v250) & v427;
                    goto LABEL_632;
                  }
                }
              }

              goto LABEL_608;
            }

            int64_t v23 = v220;
            a1 = v20 & 0xC;
            BOOL v221 = (v20 & 1) == 0 || a1 == v218;
            int v222 = v221;
            if (v221)
            {
              unint64_t v223 = v20;
              if (a1 == v218) {
                unint64_t v223 = _StringGuts._slowEnsureMatchingEncoding(_:)(v20, v437, v8);
              }
              if (v223 >> 16 >= v441) {
                goto LABEL_1350;
              }
              if ((v223 & 1) == 0) {
                _StringGuts.scalarAlignSlow(_:)(v223, v437, v8);
              }
            }

            else if (v20 >> 16 >= v441)
            {
              goto LABEL_1351;
            }

            if ((v8 & 0x1000000000000000LL) != 0)
            {
              unsigned int v235 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
            }

            else
            {
              if ((v8 & 0x2000000000000000LL) != 0)
              {
                unint64_t v446 = v437;
                unint64_t v447 = v431;
              }

              else if ((v437 & 0x1000000000000000LL) == 0)
              {
                _StringObject.sharedUTF8.getter();
              }

              unsigned int v235 = _decodeScalar(_:startingAt:)();
            }

            uint64_t v218 = v439;
            if (v235 < 0x80)
            {
              unint64_t v236 = v427;
              if ((v235 & 0xC0) != 0) {
                unint64_t v236 = v428;
              }
              uint64_t v237 = (1LL << v235) & v236;
              if ((_DWORD)v432)
              {
                if (v237) {
                  goto LABEL_1296;
                }
              }

              else if (!v237)
              {
                goto LABEL_1296;
              }
            }

            else if ((v432 & 1) == 0)
            {
              goto LABEL_1296;
            }

            if (v222)
            {
              unint64_t v242 = v20;
              if (a1 == v439)
              {
                uint64_t v260 = _StringGuts._slowEnsureMatchingEncoding(_:)(v20, v437, v8);
                uint64_t v218 = v439;
                unint64_t v242 = v260;
              }

              if (v441 <= v242 >> 16) {
                goto LABEL_1354;
              }
              if ((v242 & 1) == 0)
              {
                unint64_t v243 = _StringGuts.scalarAlignSlow(_:)(v242, v437, v8);
                uint64_t v218 = v439;
                unint64_t v242 = v242 & 0xC | v243 & 0xFFFFFFFFFFFFFFF3LL | 1;
              }
            }

            else
            {
              unint64_t v242 = v20;
              if (v441 <= v20 >> 16) {
                goto LABEL_1355;
              }
            }

            if ((v8 & 0x1000000000000000LL) == 0)
            {
              unint64_t v244 = v242 >> 16;
              if ((v8 & 0x2000000000000000LL) != 0)
              {
                unint64_t v446 = v437;
                unint64_t v447 = v431;
                int v246 = *((unsigned __int8 *)&v446 + v244);
              }

              else
              {
                uint64_t v245 = v430;
                if ((v437 & 0x1000000000000000LL) == 0)
                {
                  uint64_t v245 = _StringObject.sharedUTF8.getter();
                  uint64_t v218 = v439;
                }

                int v246 = *(unsigned __int8 *)(v245 + v244);
              }

              int v248 = (char)v246;
              unsigned int v249 = __clz(v246 ^ 0xFF) - 24;
              if (v248 >= 0) {
                LOBYTE(v249) = 1;
              }
              a1 = ((v244 + v249) << 16) | 5;
              goto LABEL_655;
            }

            uint64_t v247 = String.UnicodeScalarView._foreignIndex(after:)();
            goto LABEL_625;
          }

          a1 &= 0xCu;
          unint64_t v224 = v20;
          if ((v20 & 0xC) == v218)
          {
            unint64_t v224 = _StringGuts._slowEnsureMatchingEncoding(_:)(v20, v437, v8);
            uint64_t v218 = v439;
          }

          unint64_t v22 = v224 >> 16;
          if (v224 >> 16 >= v441) {
            goto LABEL_1329;
          }
          if ((v8 & 0x1000000000000000LL) != 0)
          {
            unsigned __int8 v251 = String.UTF8View._foreignSubscript(position:)();
            uint64_t v218 = v439;
            unsigned __int8 v226 = v251;
            if ((v251 & 0x80) != 0) {
              goto LABEL_545;
            }
          }

          else if ((v8 & 0x2000000000000000LL) != 0)
          {
            unint64_t v446 = v437;
            unint64_t v447 = v431;
            unsigned __int8 v226 = *((_BYTE *)&v446 + v22);
            if ((v226 & 0x80) != 0) {
              goto LABEL_545;
            }
          }

          else
          {
            uint64_t v225 = v430;
            if ((v437 & 0x1000000000000000LL) == 0)
            {
              uint64_t v225 = _StringObject.sharedUTF8.getter();
              uint64_t v218 = v439;
            }

            unsigned __int8 v226 = *(_BYTE *)(v225 + v22);
            if ((v226 & 0x80) != 0) {
              goto LABEL_545;
            }
          }

          unint64_t v233 = v20;
          if (a1 == v218)
          {
            unint64_t v233 = _StringGuts._slowEnsureMatchingEncoding(_:)(v20, v437, v8);
            uint64_t v218 = v439;
            if ((v8 & 0x1000000000000000LL) == 0)
            {
LABEL_577:
              a1 = (v233 & 0xFFFFFFFFFFFF0000LL) + 65540;
              if (v215 == a1 >> 14) {
                goto LABEL_643;
              }
              goto LABEL_645;
            }
          }

          else if ((v8 & 0x1000000000000000LL) == 0)
          {
            goto LABEL_577;
          }

          if (v441 <= v233 >> 16) {
            goto LABEL_1356;
          }
          a1 = String.UTF8View._foreignIndex(after:)();
          uint64_t v218 = v439;
          if (v215 == a1 >> 14)
          {
LABEL_643:
            int64_t v23 = v220;
            if (v226 >= 0x40u) {
              uint64_t v252 = &v449;
            }
            else {
              uint64_t v252 = &v448;
            }
            goto LABEL_655;
          }

LABEL_645:
          unint64_t v253 = a1 & 0xC;
          unint64_t v254 = a1;
          if (v253 == v218)
          {
            unint64_t v254 = _StringGuts._slowEnsureMatchingEncoding(_:)(a1, v437, v8);
            unint64_t v253 = a1 & 0xC;
            uint64_t v218 = v439;
          }

          unint64_t v255 = v254 >> 16;
          if (v254 >> 16 >= v441) {
            goto LABEL_1357;
          }
          if ((v8 & 0x1000000000000000LL) != 0)
          {
            unint64_t v259 = v253;
            unsigned __int8 v257 = String.UTF8View._foreignSubscript(position:)();
            unint64_t v253 = v259;
            uint64_t v218 = v439;
          }

          else if ((v8 & 0x2000000000000000LL) != 0)
          {
            unint64_t v446 = v437;
            unint64_t v447 = v431;
            unsigned __int8 v257 = *((_BYTE *)&v446 + v255);
          }

          else
          {
            uint64_t v256 = v430;
            if ((v437 & 0x1000000000000000LL) == 0)
            {
              unint64_t v261 = v253;
              uint64_t v256 = _StringObject.sharedUTF8.getter();
              unint64_t v253 = v261;
              uint64_t v218 = v439;
            }

            unsigned __int8 v257 = *(_BYTE *)(v256 + v255);
          }

          unint64_t v215 = v429;
          if (v257 > 0xCBu) {
            goto LABEL_545;
          }
          if (v226 != 13 || v257 != 10) {
            goto LABEL_643;
          }
          if (v253 == v218)
          {
            uint64_t v262 = _StringGuts._slowEnsureMatchingEncoding(_:)(a1, v437, v8);
            uint64_t v218 = v439;
            a1 = v262;
            if ((v8 & 0x1000000000000000LL) != 0)
            {
LABEL_673:
              if (v441 <= a1 >> 16) {
                goto LABEL_1391;
              }
              a1 = String.UTF8View._foreignIndex(after:)();
              uint64_t v218 = v439;
              goto LABEL_675;
            }
          }

          else if ((v8 & 0x1000000000000000LL) != 0)
          {
            goto LABEL_673;
          }

          a1 = (a1 & 0xFFFFFFFFFFFF0000LL) + 65540;
LABEL_675:
          if (v215 != a1 >> 14)
          {
            unint64_t v263 = a1;
            if ((a1 & 0xC) == v218)
            {
              unint64_t v263 = _StringGuts._slowEnsureMatchingEncoding(_:)(a1, v437, v8);
              uint64_t v218 = v439;
            }

            unint64_t v264 = v263 >> 16;
            if (v263 >> 16 >= v441) {
              goto LABEL_1392;
            }
            if ((v8 & 0x1000000000000000LL) != 0)
            {
              unsigned __int8 v266 = String.UTF8View._foreignSubscript(position:)();
              uint64_t v218 = v439;
            }

            else if ((v8 & 0x2000000000000000LL) != 0)
            {
              unint64_t v446 = v437;
              unint64_t v447 = v431;
              unsigned __int8 v266 = *((_BYTE *)&v446 + v264);
            }

            else
            {
              uint64_t v265 = v430;
              if ((v437 & 0x1000000000000000LL) == 0)
              {
                uint64_t v265 = _StringObject.sharedUTF8.getter();
                uint64_t v218 = v439;
              }

              unsigned __int8 v266 = *(_BYTE *)(v265 + v264);
            }

            if (v266 >= 0xCCu) {
              goto LABEL_545;
            }
          }

          int64_t v23 = v220;
          if ((v423 & 1) == 0) {
            goto LABEL_1296;
          }
          if (!v442) {
            goto LABEL_609;
          }
          if ((a1 & 0xC) == v218 || (a1 & 1) == 0)
          {
            if ((a1 & 0xC) == v218)
            {
              uint64_t v273 = _StringGuts._slowEnsureMatchingEncoding(_:)(a1, v437, v8);
              uint64_t v218 = v439;
              a1 = v273;
            }

            if (v441 < a1 >> 16) {
              goto LABEL_1402;
            }
            if ((a1 & 1) == 0)
            {
              unint64_t v274 = _StringGuts.scalarAlignSlow(_:)(a1, v437, v8);
              uint64_t v218 = v439;
              a1 = a1 & 0xC | v274 & 0xFFFFFFFFFFFFFFF3LL | 1;
              if (a1 < 0x4000) {
                goto LABEL_1398;
              }
              goto LABEL_698;
            }
          }

          else if (v441 < a1 >> 16)
          {
            goto LABEL_1401;
          }

          if (a1 < 0x4000) {
            goto LABEL_1398;
          }
LABEL_698:
          if ((v8 & 0x1000000000000000LL) == 0)
          {
            unint64_t v267 = a1 >> 16;
            if ((v8 & 0x2000000000000000LL) != 0)
            {
              unint64_t v446 = v437;
              unint64_t v447 = v431;
              if ((*((_BYTE *)&v446 + v267 - 1) & 0xC0) != 0x80) {
                goto LABEL_711;
              }
              uint64_t v269 = 0LL;
              do
                int v271 = v422[v267 + v269--] & 0xC0;
              while (v271 == 128);
LABEL_710:
              uint64_t v272 = 1 - v269;
            }

            else
            {
              uint64_t v268 = v430;
              if ((v437 & 0x1000000000000000LL) == 0)
              {
                uint64_t v268 = _StringObject.sharedUTF8.getter();
                uint64_t v218 = v439;
              }

              if ((*(_BYTE *)(v267 + v268 - 1) & 0xC0) == 0x80)
              {
                uint64_t v269 = 0LL;
                do
                  int v270 = *(_BYTE *)(v268 + v267 - 2 + v269--) & 0xC0;
                while (v270 == 128);
                goto LABEL_710;
              }

LABEL_711:
              uint64_t v272 = 1LL;
            }

            a1 = (a1 - (v272 << 16)) & 0xFFFFFFFFFFFF0000LL | 5;
            goto LABEL_655;
          }

          uint64_t v247 = String.UnicodeScalarView._foreignIndex(before:)();
LABEL_625:
          uint64_t v218 = v439;
          a1 = v247;
LABEL_655:
          unint64_t v212 = (unint64_t)++v21 >> 63;
          if (v21 == v23) {
            uint64_t v258 = a1;
          }
          else {
            uint64_t v258 = v13;
          }
          if (v21 >= 0) {
            uint64_t v13 = v258;
          }
          if ((v21 & 0x8000000000000000LL) == 0 && v21 >= v438) {
            goto LABEL_890;
          }
        }
      }

      uint64_t v21 = 0LL;
      unint64_t v29 = v27 + 24LL * (unsigned __int16)a1;
      int v30 = *(unsigned __int8 *)(v29 + 32);
      unint64_t v430 = v2[5];
      unint64_t v20 = v430 >> 14;
      uint64_t v13 = v437;
      unint64_t v31 = *(void *)(v29 + 40);
      unint64_t v432 = *(void *)(v29 + 48);
      char v32 = (v8 & 0x1000000000000000LL) == 0 || (v437 & 0x800000000000000LL) != 0;
      uint64_t v33 = 4LL << v32;
      unint64_t v34 = v2[8];
      uint64_t v35 = HIBYTE(v8) & 0xF;
      unint64_t v429 = v35;
      unint64_t v428 = v437 & 0xFFFFFFFFFFFFLL;
      if ((v8 & 0x2000000000000000LL) == 0) {
        uint64_t v35 = v437 & 0xFFFFFFFFFFFFLL;
      }
      unint64_t v441 = v35;
      unint64_t v434 = (v8 & 0xFFFFFFFFFFFFFFFLL) + 32;
      unint64_t v435 = v8 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v431 = v31;
      LODWORD(v438) = v30;
      LODWORD(v427) = v30 ^ (v31 >> 13) & 1;
      unint64_t v426 = (unint64_t)v445;
      int64_t v23 = v34;
      unint64_t v439 = v34;
      unint64_t v440 = v33;
      while (1)
      {
        unint64_t v2 = (unint64_t *)(v34 >> 14);
        if (v34 >> 14 == v20) {
          break;
        }
        a1 = v34 & 0xC;
        unint64_t v39 = v34;
        if (a1 == v33)
        {
          unint64_t v39 = _StringGuts._slowEnsureMatchingEncoding(_:)(v34, v13, v8);
          uint64_t v33 = v440;
        }

        unint64_t v40 = v39 >> 16;
        if (v39 >> 16 >= v441)
        {
          __break(1u);
          goto LABEL_1313;
        }

        if ((v8 & 0x1000000000000000LL) != 0)
        {
          uint64_t v65 = String.UTF8View._foreignSubscript(position:)();
          uint64_t v33 = v440;
          unint64_t v22 = v65;
          if ((v65 & 0x80) != 0) {
            break;
          }
        }

        else if ((v8 & 0x2000000000000000LL) != 0)
        {
          unint64_t v446 = v13;
          unint64_t v447 = v435;
          unint64_t v22 = *((unsigned __int8 *)&v446 + v40);
          if ((v22 & 0x80) != 0) {
            break;
          }
        }

        else
        {
          uint64_t v41 = v434;
          if ((v13 & 0x1000000000000000LL) == 0)
          {
            uint64_t v41 = _StringObject.sharedUTF8.getter();
            uint64_t v33 = v440;
          }

          unint64_t v22 = *(unsigned __int8 *)(v41 + v40);
          if ((v22 & 0x80) != 0) {
            break;
          }
        }

        unint64_t v48 = v34;
        if (a1 == v33)
        {
          unint64_t v48 = _StringGuts._slowEnsureMatchingEncoding(_:)(v34, v13, v8);
          uint64_t v33 = v440;
          if ((v8 & 0x1000000000000000LL) == 0)
          {
LABEL_69:
            a1 = (v48 & 0xFFFFFFFFFFFF0000LL) + 65540;
            if (v20 == a1 >> 14) {
              goto LABEL_132;
            }
            goto LABEL_134;
          }
        }

        else if ((v8 & 0x1000000000000000LL) == 0)
        {
          goto LABEL_69;
        }

        if (v441 <= v48 >> 16) {
          goto LABEL_1324;
        }
        unint64_t v66 = String.UTF8View._foreignIndex(after:)();
        uint64_t v33 = v440;
        a1 = v66;
        if (v20 == v66 >> 14)
        {
LABEL_132:
          else {
            unint64_t v67 = v431;
          }
          goto LABEL_30;
        }

LABEL_134:
        unint64_t v68 = a1;
        if ((a1 & 0xC) == v33)
        {
          unint64_t v68 = _StringGuts._slowEnsureMatchingEncoding(_:)(a1, v13, v8);
          uint64_t v33 = v440;
        }

        uint64_t v13 = v68 >> 16;
        if (v68 >> 16 >= v441) {
          goto LABEL_1325;
        }
        if ((v8 & 0x1000000000000000LL) != 0)
        {
          uint64_t v13 = v437;
          unsigned __int8 v70 = String.UTF8View._foreignSubscript(position:)();
          uint64_t v33 = v440;
        }

        else if ((v8 & 0x2000000000000000LL) != 0)
        {
          unint64_t v446 = v437;
          unint64_t v447 = v435;
          unsigned __int8 v70 = *((_BYTE *)&v446 + v13);
          uint64_t v13 = v437;
        }

        else
        {
          uint64_t v69 = v434;
          if ((v437 & 0x1000000000000000LL) == 0)
          {
            uint64_t v69 = _StringObject.sharedUTF8.getter();
            uint64_t v33 = v440;
          }

          unsigned __int8 v70 = *(_BYTE *)(v69 + v13);
          uint64_t v13 = v437;
        }

        if (v70 > 0xCBu) {
          break;
        }
        if ((a1 & 0xC) == v33)
        {
          uint64_t v72 = _StringGuts._slowEnsureMatchingEncoding(_:)(a1, v13, v8);
          uint64_t v33 = v440;
          a1 = v72;
          if ((v8 & 0x1000000000000000LL) == 0)
          {
LABEL_152:
            a1 = (a1 & 0xFFFFFFFFFFFF0000LL) + 65540;
            if (v20 == a1 >> 14) {
              goto LABEL_169;
            }
            goto LABEL_158;
          }
        }

        else if ((v8 & 0x1000000000000000LL) == 0)
        {
          goto LABEL_152;
        }

        if (v441 <= a1 >> 16) {
          goto LABEL_1364;
        }
        a1 = String.UTF8View._foreignIndex(after:)();
        uint64_t v33 = v440;
        if (v20 == a1 >> 14) {
          goto LABEL_169;
        }
LABEL_158:
        unint64_t v73 = a1;
        if ((a1 & 0xC) == v33)
        {
          unint64_t v73 = _StringGuts._slowEnsureMatchingEncoding(_:)(a1, v437, v8);
          uint64_t v33 = v440;
        }

        unint64_t v74 = v73 >> 16;
        if (v73 >> 16 >= v441) {
          goto LABEL_1365;
        }
        if ((v8 & 0x1000000000000000LL) != 0)
        {
          uint64_t v13 = v437;
          unsigned __int8 v76 = String.UTF8View._foreignSubscript(position:)();
          uint64_t v33 = v440;
        }

        else if ((v8 & 0x2000000000000000LL) != 0)
        {
          unint64_t v446 = v437;
          unint64_t v447 = v435;
          unsigned __int8 v76 = *((_BYTE *)&v446 + v74);
          uint64_t v13 = v437;
        }

        else
        {
          uint64_t v75 = v434;
          if ((v437 & 0x1000000000000000LL) == 0)
          {
            uint64_t v75 = _StringObject.sharedUTF8.getter();
            uint64_t v33 = v440;
          }

          unsigned __int8 v76 = *(_BYTE *)(v75 + v74);
          uint64_t v13 = v437;
        }

        if (v76 >= 0xCCu) {
          break;
        }
LABEL_169:
        if ((v427 & 1) == 0) {
          goto LABEL_1202;
        }
        if (v442)
        {
          if ((a1 & 0xC) != v33 && (a1 & 1) != 0)
          {
            if (v441 < a1 >> 16) {
              goto LABEL_1383;
            }
            goto LABEL_181;
          }

          if ((a1 & 0xC) == v33)
          {
            uint64_t v83 = _StringGuts._slowEnsureMatchingEncoding(_:)(a1, v13, v8);
            uint64_t v33 = v440;
            a1 = v83;
          }

          if (v441 < a1 >> 16) {
            goto LABEL_1382;
          }
          if ((a1 & 1) != 0)
          {
LABEL_181:
            if (a1 < 0x4000) {
              goto LABEL_1372;
            }
          }

          else
          {
            unint64_t v84 = _StringGuts.scalarAlignSlow(_:)(a1, v13, v8);
            uint64_t v33 = v440;
            a1 = a1 & 0xC | v84 & 0xFFFFFFFFFFFFFFF3LL | 1;
            if (a1 < 0x4000) {
              goto LABEL_1372;
            }
          }

          if ((v8 & 0x1000000000000000LL) != 0)
          {
            uint64_t v61 = String.UnicodeScalarView._foreignIndex(before:)();
            goto LABEL_117;
          }

          unint64_t v77 = a1 >> 16;
          if ((v8 & 0x2000000000000000LL) != 0)
          {
            unint64_t v446 = v13;
            unint64_t v447 = v435;
            if ((*((_BYTE *)&v446 + v77 - 1) & 0xC0) != 0x80) {
              goto LABEL_195;
            }
            uint64_t v79 = 0LL;
            do
              int v81 = *(_BYTE *)(v426 + v77 + v79--) & 0xC0;
            while (v81 == 128);
LABEL_194:
            uint64_t v82 = 1 - v79;
          }

          else
          {
            uint64_t v78 = v434;
            if ((v13 & 0x1000000000000000LL) == 0)
            {
              uint64_t v78 = _StringObject.sharedUTF8.getter();
              uint64_t v33 = v440;
            }

            if ((*(_BYTE *)(v77 + v78 - 1) & 0xC0) == 0x80)
            {
              uint64_t v79 = 0LL;
              do
                int v80 = *(_BYTE *)(v78 + v77 - 2 + v79--) & 0xC0;
              while (v80 == 128);
              goto LABEL_194;
            }

LABEL_195:
            uint64_t v82 = 1LL;
          }

          a1 = (a1 - (v82 << 16)) & 0xFFFFFFFFFFFF0000LL | 5;
          goto LABEL_30;
        }

        if ((v438 & 1) == 0) {
          goto LABEL_1202;
        }
LABEL_30:
        BOOL v342 = __CFADD__(v21++, 1LL);
        if (v342) {
          int64_t v36 = a1;
        }
        else {
          int64_t v36 = v23;
        }
        if (v21 >= 0) {
          int64_t v23 = v36;
        }
        unint64_t v439 = v34;
        unint64_t v34 = a1;
      }

      if (v442)
      {
        a1 = v34 & 0xC;
        BOOL v37 = (v34 & 1) == 0 || a1 == v33;
        unint64_t v2 = (unint64_t *)v37;
        if (v37)
        {
          unint64_t v38 = v34;
          if (a1 == v33) {
            unint64_t v38 = _StringGuts._slowEnsureMatchingEncoding(_:)(v34, v13, v8);
          }
          unint64_t v22 = v38 >> 16;
          if (v38 >> 16 >= v441) {
            goto LABEL_1319;
          }
          if ((v38 & 1) == 0) {
            _StringGuts.scalarAlignSlow(_:)(v38, v13, v8);
          }
        }

        else
        {
          unint64_t v22 = v34 >> 16;
          if (v34 >> 16 >= v441) {
            goto LABEL_1320;
          }
        }

        if ((v8 & 0x1000000000000000LL) != 0)
        {
          unsigned int v50 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
        }

        else
        {
          if ((v8 & 0x2000000000000000LL) != 0)
          {
            unint64_t v446 = v13;
            unint64_t v447 = v435;
          }

          else if ((v13 & 0x1000000000000000LL) == 0)
          {
            _StringObject.sharedUTF8.getter();
          }

          unsigned int v50 = _decodeScalar(_:startingAt:)();
        }

        uint64_t v33 = v440;
        if (v50 < 0x80)
        {
          unint64_t v51 = v431;
          if ((v50 & 0xC0) != 0) {
            unint64_t v51 = v432;
          }
          uint64_t v52 = (1LL << v50) & v51;
          if ((_DWORD)v438)
          {
            if (v52) {
              goto LABEL_1202;
            }
          }

          else if (!v52)
          {
            goto LABEL_1202;
          }
        }

        else if ((v438 & 1) == 0)
        {
          goto LABEL_1202;
        }

        if ((_DWORD)v2)
        {
          unint64_t v22 = v34;
          if (a1 == v440)
          {
            uint64_t v71 = _StringGuts._slowEnsureMatchingEncoding(_:)(v34, v13, v8);
            uint64_t v33 = v440;
            unint64_t v22 = v71;
          }

          if (v441 <= v22 >> 16) {
            goto LABEL_1321;
          }
          if ((v22 & 1) == 0)
          {
            unint64_t v57 = _StringGuts.scalarAlignSlow(_:)(v22, v13, v8);
            uint64_t v33 = v440;
            unint64_t v22 = v22 & 0xC | v57 & 0xFFFFFFFFFFFFFFF3LL | 1;
          }
        }

        else
        {
          unint64_t v22 = v34;
          if (v441 <= v34 >> 16) {
            goto LABEL_1322;
          }
        }

        if ((v8 & 0x1000000000000000LL) != 0)
        {
          uint64_t v61 = String.UnicodeScalarView._foreignIndex(after:)();
LABEL_117:
          uint64_t v33 = v440;
          a1 = v61;
          goto LABEL_30;
        }

        unint64_t v58 = v22 >> 16;
        if ((v8 & 0x2000000000000000LL) != 0)
        {
          unint64_t v446 = v13;
          unint64_t v447 = v435;
          int v60 = *((unsigned __int8 *)&v446 + v58);
        }

        else
        {
          uint64_t v59 = v434;
          if ((v13 & 0x1000000000000000LL) == 0)
          {
            uint64_t v59 = _StringObject.sharedUTF8.getter();
            uint64_t v33 = v440;
          }

          int v60 = *(unsigned __int8 *)(v59 + v58);
        }

        int v62 = (char)v60;
        unsigned int v63 = __clz(v60 ^ 0xFF) - 24;
        if (v62 >= 0) {
          LOBYTE(v63) = 1;
        }
        a1 = ((v58 + v63) << 16) | 5;
        goto LABEL_30;
      }

      unint64_t v42 = String.index(after:)();
      if (v20 >= v42 >> 14)
      {
        a1 = v42;
        unint64_t v45 = String.subscript.getter();
        unint64_t v47 = v49;
        if (v45 != 2573) {
          goto LABEL_89;
        }
LABEL_77:
        if (v47 == 0xE200000000000000LL) {
          goto LABEL_29;
        }
LABEL_89:
        if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          goto LABEL_29;
        }
        if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          char v64 = 10;
          uint64_t v33 = v440;
        }

        else
        {
          if ((Character._isSingleScalar.getter() & 1) == 0) {
            goto LABEL_29;
          }
          unint64_t v53 = specialized Collection.first.getter(v45, v47);
          if ((v53 & 0x100000000LL) != 0)
          {
LABEL_1404:
            __break(1u);
LABEL_1405:
            __break(1u);
LABEL_1406:
            __break(1u);
LABEL_1407:
            __break(1u);
LABEL_1408:
            __break(1u);
LABEL_1409:
            __break(1u);
LABEL_1410:
            __break(1u);
LABEL_1411:
            __break(1u);
LABEL_1412:
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
            JUMPOUT(0x182D53ED4LL);
          }

          if ((v53 & 0xFFFFFF80) != 0)
          {
LABEL_29:
            swift_bridgeObjectRelease();
            uint64_t v33 = v440;
            if ((v438 & 1) == 0) {
              goto LABEL_1202;
            }
            goto LABEL_30;
          }

          unint64_t v54 = specialized Collection.first.getter(v45, v47);
          if ((v54 & 0x100000000LL) != 0) {
            goto LABEL_1405;
          }
          int v55 = v54;
          swift_bridgeObjectRelease();
          if ((v55 & 0xFFFFFF00) != 0) {
            goto LABEL_1349;
          }
          uint64_t v33 = v440;
          if ((v55 & 0xC0) != 0)
          {
            if ((((_BYTE)v55 - 64) & 0xC0) != 0) {
              uint64_t v56 = 0LL;
            }
            else {
              uint64_t v56 = (v432 >> v55) & 1;
            }
            if ((v438 & 1) != 0)
            {
LABEL_101:
              if (v56) {
                goto LABEL_1202;
              }
              goto LABEL_30;
            }

            goto LABEL_124;
          }

          char v64 = v55;
        }

        uint64_t v56 = (1LL << v64) & v431;
        if ((v438 & 1) != 0) {
          goto LABEL_101;
        }
LABEL_124:
        if (!v56) {
          goto LABEL_1202;
        }
        goto LABEL_30;
      }

      uint64_t v43 = String.subscript.getter();
      if ((v43 ^ v44) >> 14)
      {
        a1 = v44;
        unint64_t v45 = Substring.subscript.getter();
        unint64_t v47 = v46;
        swift_bridgeObjectRelease();
        if (v45 != 2573) {
          goto LABEL_89;
        }
        goto LABEL_77;
      }

      swift_bridgeObjectRelease();
LABEL_1202:
      else {
        int64_t v407 = 0LL;
      }
      unint64_t v408 = v439;
      if ((v433 & (v21 != 0)) != 0)
      {
        int v409 = 0;
      }

      else
      {
        unint64_t v408 = 0LL;
        int v409 = 1;
      }

      if (v21 >= 0) {
        unint64_t v20 = v34;
      }
      else {
        unint64_t v20 = 0LL;
      }
      if (v21 >= 0) {
        uint64_t v13 = v407;
      }
      else {
        uint64_t v13 = 0LL;
      }
      if (v21 >= 0) {
        unint64_t v22 = v408;
      }
      else {
        unint64_t v22 = 0LL;
      }
      if (v21 >= 0) {
        int v100 = v409;
      }
      else {
        int v100 = 0;
      }
      unint64_t v2 = v436;
      if (v21 < 0) {
        goto LABEL_1309;
      }
LABEL_1281:
      if (!v100)
      {
        unint64_t v441 = v20;
        unint64_t v415 = v2[9];
        v416 = v2;
        unint64_t v2 = (unint64_t *)(v415 + 1);
        if (!__OFADD__(v415, 1LL))
        {
          unint64_t v20 = v22;
          unint64_t v22 = v416[16];
          uint64_t v21 = v416[21];
          a1 = *(void *)(v416[20] + 16LL);
          int64_t v23 = v416[18];
          unint64_t v8 = v416[19];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0) {
            goto LABEL_1284;
          }
          goto LABEL_1336;
        }

LABEL_1335:
        __break(1u);
LABEL_1336:
        unint64_t v8 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v8 + 16) + 1LL,  1,  (char *)v8);
LABEL_1284:
        unint64_t v418 = *(void *)(v8 + 16);
        unint64_t v417 = *(void *)(v8 + 24);
        if (v418 >= v417 >> 1) {
          unint64_t v8 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v417 > 1),  v418 + 1,  1,  (char *)v8);
        }
        *(void *)(v8 + 16) = v418 + 1;
        unint64_t v419 = v8 + 80 * v418;
        *(void *)(v419 + 32) = v2;
        *(void *)(v419 + 40) = 0LL;
        *(_BYTE *)(v419 + 48) = 1;
        *(void *)(v419 + 56) = v13;
        *(void *)(v419 + 64) = v20;
        *(_BYTE *)(v419 + 72) = 0;
        unint64_t v20 = v441;
        *(_BYTE *)(v419 + 73) = v442 >> 38;
        *(void *)(v419 + 80) = a1;
        *(void *)(v419 + 88) = v21;
        *(void *)(v419 + 96) = v22;
        *(void *)(v419 + 104) = v23;
        unint64_t v2 = v436;
        v436[19] = v8;
      }

      v2[8] = v20;
      return 1LL;
    case 1uLL:
      unint64_t v91 = *v2;
      int64_t v23 = v2[1];
      unint64_t v8 = a1;
      unint64_t v20 = v2[8];
      unint64_t v92 = v2[5];
      if (v26)
      {
        int v433 = v24;
        BOOL v93 = v442 == 0;
        uint64_t v94 = String.matchScalar(_:at:limitedBy:boundaryCheck:isCaseInsensitive:)( a1,  v20,  v92,  v93,  0,  v91,  v23);
        if ((v95 & 1) == 0)
        {
          unint64_t v96 = v94;
          uint64_t v97 = 1LL;
          a1 = v20;
          do
          {
            uint64_t v21 = v20;
            uint64_t v98 = v97;
            unint64_t v20 = v96;
            if (v97) {
              uint64_t v13 = a1;
            }
            else {
              uint64_t v13 = v96;
            }
            if (v97 >= 0) {
              a1 = v13;
            }
            unint64_t v96 = String.matchScalar(_:at:limitedBy:boundaryCheck:isCaseInsensitive:)(v8, v96, v92, v93, 0, v91, v23);
            uint64_t v97 = v98 + 1;
          }

          while ((v99 & 1) == 0);
          if (v98 < 0) {
            goto LABEL_1309;
          }
          if ((v433 & (v97 != 1)) != 0)
          {
            int v100 = 0;
            unint64_t v2 = v436;
            unint64_t v22 = v21;
            goto LABEL_1281;
          }

          unint64_t v2 = v436;
        }

        uint64_t v13 = 0LL;
        unint64_t v22 = 0LL;
        int v100 = 1;
        goto LABEL_1281;
      }

      if ((_DWORD)v13)
      {
        uint64_t v21 = v24;
        BOOL v166 = v442 == 0;
        unint64_t v167 = String.matchScalar(_:at:limitedBy:boundaryCheck:isCaseInsensitive:)( a1,  v2[8],  v2[5],  v166,  0,  *v2,  v2[1]);
        if ((v168 & 1) == 0)
        {
          unint64_t v169 = -1LL;
          a1 = v20;
          do
          {
            unint64_t v170 = v20;
            unint64_t v20 = v167;
            uint64_t v171 = v169 + 2;
            BOOL v342 = __CFADD__(v169++, 1LL);
            if (v342) {
              unint64_t v172 = v167;
            }
            else {
              unint64_t v172 = a1;
            }
            if (v171 >= 0) {
              a1 = v172;
            }
            unint64_t v167 = String.matchScalar(_:at:limitedBy:boundaryCheck:isCaseInsensitive:)(v8, v167, v92, v166, 0, v91, v23);
          }

          while ((v173 & 1) == 0);
          uint64_t v174 = (v21 & (v169 != 0)) != 0 ? a1 : 0LL;
          unint64_t v175 = (v21 & (v169 != 0)) != 0 ? v170 : 0LL;
          BOOL v176 = (v21 & (v169 != 0)) == 0;
          BOOL v177 = v169 > 0x7FFFFFFFFFFFFFFELL;
          BOOL v178 = v169 > 0x7FFFFFFFFFFFFFFELL;
          if (v169 <= 0x7FFFFFFFFFFFFFFELL)
          {
            uint64_t v13 = v174;
          }

          else
          {
            unint64_t v20 = 0LL;
            uint64_t v13 = 0LL;
          }

          unint64_t v22 = v177 ? 0LL : v175;
          int v100 = !v177 && v176;
          unint64_t v2 = v436;
          if (!v178) {
            goto LABEL_1281;
          }
        }

LABEL_1309:
        Processor.signalFailure(preservingCaptures:)(0);
        return 0LL;
      }

      unint64_t v434 = (a1 >> 27);
      if (v438)
      {
        char v275 = v24;
        BOOL v276 = v442 == 0;
        unint64_t v277 = String.matchScalar(_:at:limitedBy:boundaryCheck:isCaseInsensitive:)( a1,  v20,  v92,  v276,  0,  v91,  v23);
        if ((v278 & 1) != 0)
        {
          LOBYTE(v334) = 0;
          uint64_t v21 = 0LL;
          a1 = v20;
          unint64_t v281 = v20;
LABEL_1243:
          LOBYTE(v24) = v275;
          int v100 = 0;
          unint64_t v22 = 0LL;
          char v332 = 1;
          uint64_t v13 = 0LL;
          unint64_t v331 = 0LL;
          if ((v334 & 1) != 0 || v21 < v434)
          {
LABEL_1249:
            unint64_t v2 = v436;
            unint64_t v20 = v331;
            if ((v332 & 1) != 0) {
              goto LABEL_1309;
            }
            goto LABEL_1281;
          }

LABEL_1245:
          if (v21 == 0 || (v24 & 1) == 0 || v21 <= v434)
          {
            uint64_t v13 = 0LL;
            unint64_t v22 = 0LL;
            char v332 = 0;
            int v100 = 1;
            unint64_t v331 = v20;
          }

          else
          {
            int v100 = 0;
            char v332 = 0;
            unint64_t v331 = v20;
            uint64_t v13 = a1;
            unint64_t v22 = v281;
          }

          goto LABEL_1249;
        }

        uint64_t v279 = 1LL;
        a1 = v20;
        while (1)
        {
          unint64_t v281 = v20;
          uint64_t v21 = v279;
          unint64_t v20 = v277;
          if (v434 == v279) {
            unint64_t v282 = v277;
          }
          else {
            unint64_t v282 = a1;
          }
          if (v21 >= 0) {
            a1 = v282;
          }
          if ((v21 & 0x8000000000000000LL) == 0 && v21 >= v438) {
            break;
          }
          unint64_t v277 = String.matchScalar(_:at:limitedBy:boundaryCheck:isCaseInsensitive:)(v8, v277, v92, v276, 0, v91, v23);
          uint64_t v279 = v21 + 1;
          if ((v280 & 1) != 0)
          {
            unint64_t v334 = (unint64_t)v21 >> 63;
            goto LABEL_1243;
          }
        }

        LOBYTE(v24) = v275;
      }

      else
      {
        uint64_t v21 = 0LL;
        a1 = v20;
        unint64_t v281 = v20;
      }

      if (v21 < v434)
      {
        unint64_t v331 = 0LL;
        uint64_t v13 = 0LL;
        unint64_t v22 = 0LL;
        int v100 = 0;
        char v332 = 1;
        goto LABEL_1249;
      }

      goto LABEL_1245;
    case 2uLL:
      int v433 = v24;
      unint64_t v20 = *v2;
      unint64_t v8 = v2[1];
      unint64_t v85 = v2[8];
      unint64_t v86 = v2[5];
      unint64_t v437 = *v2;
      if (v26)
      {
        unint64_t v87 = v86 >> 14;
        if (v86 >> 14 <= v85 >> 14) {
          goto LABEL_901;
        }
        unint64_t v441 = a1;
        unint64_t v2 = 0LL;
        uint64_t v88 = (v20 >> 59) & 1;
        if ((v8 & 0x1000000000000000LL) == 0) {
          LOBYTE(v88) = 1;
        }
        uint64_t v89 = 4LL << v88;
        uint64_t v90 = HIBYTE(v8) & 0xF;
        if ((v8 & 0x2000000000000000LL) == 0) {
          uint64_t v90 = v20 & 0xFFFFFFFFFFFFLL;
        }
        unint64_t v438 = v90;
        unint64_t v439 = v89;
        unint64_t v434 = v8 & 0xFFFFFFFFFFFFFFLL;
        unint64_t v435 = v86;
        unint64_t v432 = (v8 & 0xFFFFFFFFFFFFFFFLL) + 32;
        int64_t v23 = 1LL;
        uint64_t v13 = v85;
        a1 = v85;
        while (1)
        {
          unint64_t v313 = a1;
          a1 = v85;
          if ((v441 & 1) == 0)
          {
            unint64_t v440 = v313;
            uint64_t v21 = v85 & 0xC;
            unint64_t v314 = v85;
            if (v21 == v439) {
              unint64_t v314 = _StringGuts._slowEnsureMatchingEncoding(_:)(v85, v20, v8);
            }
            unint64_t v315 = v314 >> 16;
            if (v314 >> 16 >= v438) {
              goto LABEL_1314;
            }
            if ((v8 & 0x1000000000000000LL) != 0)
            {
              unint64_t v22 = String.UTF8View._foreignSubscript(position:)();
              if ((v22 & 0x80) != 0) {
                goto LABEL_800;
              }
            }

            else if ((v8 & 0x2000000000000000LL) != 0)
            {
              unint64_t v446 = v20;
              unint64_t v447 = v434;
              unint64_t v22 = *((unsigned __int8 *)&v446 + v315);
              if ((v22 & 0x80) != 0) {
                goto LABEL_800;
              }
            }

            else
            {
              uint64_t v316 = v432;
              if ((v20 & 0x1000000000000000LL) == 0) {
                uint64_t v316 = _StringObject.sharedUTF8.getter();
              }
              unint64_t v22 = *(unsigned __int8 *)(v316 + v315);
              if ((v22 & 0x80) != 0) {
                goto LABEL_800;
              }
            }

            unint64_t v318 = v85;
            if (v21 == v439)
            {
              unint64_t v318 = _StringGuts._slowEnsureMatchingEncoding(_:)(v85, v20, v8);
              if ((v8 & 0x1000000000000000LL) == 0) {
                goto LABEL_827;
              }
            }

            else if ((v8 & 0x1000000000000000LL) == 0)
            {
LABEL_827:
              unint64_t v85 = (v318 & 0xFFFFFFFFFFFF0000LL) + 65540;
              if (v87 == v85 >> 14) {
                goto LABEL_847;
              }
              goto LABEL_849;
            }

            if (v438 <= v318 >> 16) {
              goto LABEL_1331;
            }
            unint64_t v85 = String.UTF8View._foreignIndex(after:)();
            if (v87 == v85 >> 14)
            {
LABEL_847:
              goto LABEL_802;
            }

LABEL_849:
            uint64_t v21 = v85 & 0xC;
            unint64_t v324 = v85;
            if (v21 == v439) {
              unint64_t v324 = _StringGuts._slowEnsureMatchingEncoding(_:)(v85, v20, v8);
            }
            unint64_t v20 = v324 >> 16;
            if (v324 >> 16 >= v438) {
              goto LABEL_1332;
            }
            if ((v8 & 0x1000000000000000LL) != 0)
            {
              unint64_t v20 = v437;
              unsigned __int8 v326 = String.UTF8View._foreignSubscript(position:)();
            }

            else if ((v8 & 0x2000000000000000LL) != 0)
            {
              unint64_t v446 = v437;
              unint64_t v447 = v434;
              unsigned __int8 v326 = *((_BYTE *)&v446 + v20);
              unint64_t v20 = v437;
            }

            else
            {
              uint64_t v325 = v432;
              if ((v437 & 0x1000000000000000LL) == 0) {
                uint64_t v325 = _StringObject.sharedUTF8.getter();
              }
              unsigned __int8 v326 = *(_BYTE *)(v325 + v20);
              unint64_t v20 = v437;
            }

            if (v326 <= 0xCBu)
            {
              if (v21 == v439)
              {
                unint64_t v85 = _StringGuts._slowEnsureMatchingEncoding(_:)(v85, v20, v8);
                unint64_t v22 = v440;
                if ((v8 & 0x1000000000000000LL) != 0) {
                  goto LABEL_868;
                }
LABEL_864:
                unint64_t v327 = (v85 & 0xFFFFFFFFFFFF0000LL) + 65540;
              }

              else
              {
                unint64_t v22 = v440;
                if ((v8 & 0x1000000000000000LL) == 0) {
                  goto LABEL_864;
                }
LABEL_868:
                if (v438 <= v85 >> 16) {
                  goto LABEL_1374;
                }
                unint64_t v327 = String.UTF8View._foreignIndex(after:)();
              }

              if (v87 == v327 >> 14)
              {
                unint64_t v85 = a1;
                goto LABEL_881;
              }

              if ((v327 & 0xC) == v439) {
                unint64_t v327 = _StringGuts._slowEnsureMatchingEncoding(_:)(v327, v20, v8);
              }
              unint64_t v328 = v327 >> 16;
              if (v327 >> 16 >= v438) {
                goto LABEL_1362;
              }
              if ((v8 & 0x1000000000000000LL) != 0)
              {
                unsigned __int8 v309 = String.UTF8View._foreignSubscript(position:)();
              }

              else if ((v8 & 0x2000000000000000LL) != 0)
              {
                unint64_t v446 = v20;
                unint64_t v447 = v434;
                unsigned __int8 v309 = *((_BYTE *)&v446 + v328);
              }

              else
              {
                uint64_t v329 = v432;
                if ((v20 & 0x1000000000000000LL) == 0) {
                  uint64_t v329 = _StringObject.sharedUTF8.getter();
                }
                unsigned __int8 v309 = *(_BYTE *)(v329 + v328);
              }

              if (v309 < 0xCCu) {
                goto LABEL_1197;
              }
            }

LABEL_800:
            unint64_t v310 = String._thoroughMatchAnyNonNewline(at:limitedBy:isScalarSemantics:)(a1, v435, v442 != 0, v20, v8);
            if ((v311 & 1) != 0)
            {
              unint64_t v2 = (unint64_t *)(v23 - 1);
LABEL_1197:
              unint64_t v85 = a1;
              unint64_t v22 = v440;
LABEL_881:
              if ((v433 & (v2 != 0LL)) != 0)
              {
                char v330 = 0;
                int v100 = 0;
                goto LABEL_1199;
              }

              unint64_t v2 = v436;
LABEL_901:
              uint64_t v13 = 0LL;
              unint64_t v22 = 0LL;
              int v100 = 1;
              unint64_t v20 = v85;
              goto LABEL_1281;
            }

            goto LABEL_801;
          }

          if (v442) {
            break;
          }
          unint64_t v310 = String.index(after:)();
LABEL_801:
          unint64_t v85 = v310;
LABEL_802:
          unint64_t v2 = (unint64_t *)((char *)v2 + 1);
          if (v23) {
            uint64_t v312 = v13;
          }
          else {
            uint64_t v312 = v85;
          }
          if (v23 >= 0) {
            uint64_t v13 = v312;
          }
          ++v23;
          if (v87 <= v85 >> 14)
          {
            unint64_t v2 = (unint64_t *)(v23 - 1);
            unint64_t v22 = a1;
            if (((v23 - 1) & 0x8000000000000000LL) == 0) {
              goto LABEL_881;
            }
LABEL_1198:
            unint64_t v85 = 0LL;
            uint64_t v13 = 0LL;
            unint64_t v22 = 0LL;
            int v100 = 0;
            char v330 = 1;
LABEL_1199:
            unint64_t v2 = v436;
            unint64_t v20 = v85;
            if ((v330 & 1) != 0) {
              goto LABEL_1309;
            }
            goto LABEL_1281;
          }
        }

        if ((v85 & 0xC) == v439 || (v85 & 1) == 0)
        {
          unint64_t v317 = v85;
          if ((v85 & 0xC) == v439) {
            unint64_t v317 = _StringGuts._slowEnsureMatchingEncoding(_:)(v85, v20, v8);
          }
          if (v438 <= v317 >> 16) {
            goto LABEL_1340;
          }
          if ((v317 & 1) == 0)
          {
            unint64_t v317 = v317 & 0xC | _StringGuts.scalarAlignSlow(_:)(v317, v20, v8) & 0xFFFFFFFFFFFFFFF3LL | 1;
            if ((v8 & 0x1000000000000000LL) == 0)
            {
LABEL_834:
              unint64_t v319 = v317 >> 16;
              if ((v8 & 0x2000000000000000LL) != 0)
              {
                unint64_t v446 = v20;
                unint64_t v447 = v434;
                int v321 = *((unsigned __int8 *)&v446 + v319);
              }

              else
              {
                uint64_t v320 = v432;
                if ((v20 & 0x1000000000000000LL) == 0) {
                  uint64_t v320 = _StringObject.sharedUTF8.getter();
                }
                int v321 = *(unsigned __int8 *)(v320 + v319);
              }

              int v322 = (char)v321;
              unsigned int v323 = __clz(v321 ^ 0xFF) - 24;
              if (v322 >= 0) {
                LOBYTE(v323) = 1;
              }
              unint64_t v85 = ((v319 + v323) << 16) | 5;
              goto LABEL_802;
            }

            goto LABEL_866;
          }
        }

        else
        {
          unint64_t v317 = v85;
          if (v438 <= v85 >> 16) {
            goto LABEL_1339;
          }
        }

        if ((v8 & 0x1000000000000000LL) == 0) {
          goto LABEL_834;
        }
LABEL_866:
        unint64_t v310 = String.UnicodeScalarView._foreignIndex(after:)();
        goto LABEL_801;
      }

      if ((_DWORD)v13)
      {
        unint64_t v2 = (unint64_t *)(v86 >> 14);
        if (v86 >> 14 > v85 >> 14)
        {
          uint64_t v107 = 0LL;
          uint64_t v108 = (v20 >> 59) & 1;
          if ((v8 & 0x1000000000000000LL) == 0) {
            LOBYTE(v108) = 1;
          }
          unint64_t v440 = 4LL << v108;
          unint64_t v441 = a1;
          if ((v8 & 0x2000000000000000LL) != 0) {
            uint64_t v109 = HIBYTE(v8) & 0xF;
          }
          else {
            uint64_t v109 = v20 & 0xFFFFFFFFFFFFLL;
          }
          unint64_t v438 = v8 & 0xFFFFFFFFFFFFFFLL;
          unint64_t v439 = v109;
          unint64_t v434 = (v8 & 0xFFFFFFFFFFFFFFFLL) + 32;
          unint64_t v435 = v86;
          uint64_t v13 = v85;
          a1 = v85;
          while (1)
          {
            int64_t v23 = a1;
            a1 = v85;
            if ((v441 & 1) == 0)
            {
              uint64_t v21 = v85 & 0xC;
              unint64_t v390 = v85;
              if (v21 == v440) {
                unint64_t v390 = _StringGuts._slowEnsureMatchingEncoding(_:)(v85, v20, v8);
              }
              unint64_t v22 = v390 >> 16;
              if (v390 >> 16 >= v439) {
                goto LABEL_1323;
              }
              if ((v8 & 0x1000000000000000LL) != 0)
              {
                char v392 = String.UTF8View._foreignSubscript(position:)();
                if (v392 < 0) {
                  goto LABEL_1116;
                }
              }

              else if ((v8 & 0x2000000000000000LL) != 0)
              {
                unint64_t v446 = v20;
                unint64_t v447 = v438;
                char v392 = *((_BYTE *)&v446 + v22);
                if (v392 < 0) {
                  goto LABEL_1116;
                }
              }

              else
              {
                uint64_t v391 = v434;
                if ((v20 & 0x1000000000000000LL) == 0) {
                  uint64_t v391 = _StringObject.sharedUTF8.getter();
                }
                char v392 = *(_BYTE *)(v391 + v22);
                if (v392 < 0) {
                  goto LABEL_1116;
                }
              }

              unint64_t v394 = v85;
              if (v21 == v440)
              {
                unint64_t v394 = _StringGuts._slowEnsureMatchingEncoding(_:)(v85, v20, v8);
                if ((v8 & 0x1000000000000000LL) == 0) {
                  goto LABEL_1143;
                }
              }

              else if ((v8 & 0x1000000000000000LL) == 0)
              {
LABEL_1143:
                unint64_t v85 = (v394 & 0xFFFFFFFFFFFF0000LL) + 65540;
                goto LABEL_1165;
              }

              if (v439 <= v394 >> 16) {
                goto LABEL_1347;
              }
              unint64_t v85 = String.UTF8View._foreignIndex(after:)();
              if (v2 == (unint64_t *)(v85 >> 14))
              {
LABEL_1163:
                goto LABEL_1118;
              }

LABEL_1165:
              uint64_t v21 = v85 & 0xC;
              unint64_t v400 = v85;
              if (v21 == v440) {
                unint64_t v400 = _StringGuts._slowEnsureMatchingEncoding(_:)(v85, v437, v8);
              }
              unint64_t v401 = v400 >> 16;
              if (v400 >> 16 >= v439) {
                goto LABEL_1348;
              }
              if ((v8 & 0x1000000000000000LL) != 0)
              {
                unint64_t v20 = v437;
                unsigned __int8 v403 = String.UTF8View._foreignSubscript(position:)();
              }

              else if ((v8 & 0x2000000000000000LL) != 0)
              {
                unint64_t v446 = v437;
                unint64_t v447 = v438;
                unsigned __int8 v403 = *((_BYTE *)&v446 + v401);
                unint64_t v20 = v437;
              }

              else
              {
                uint64_t v402 = v434;
                if ((v437 & 0x1000000000000000LL) == 0) {
                  uint64_t v402 = _StringObject.sharedUTF8.getter();
                }
                unsigned __int8 v403 = *(_BYTE *)(v402 + v401);
                unint64_t v20 = v437;
              }

              if (v403 > 0xCBu)
              {
LABEL_1116:
                unint64_t v386 = String._thoroughMatchAnyNonNewline(at:limitedBy:isScalarSemantics:)(a1, v435, v442 != 0, v20, v8);
                if ((v387 & 1) != 0) {
                  goto LABEL_1223;
                }
                goto LABEL_1117;
              }

              if (v392 != 13 || v403 != 10) {
                goto LABEL_1163;
              }
              if (v21 == v440)
              {
                unint64_t v85 = _StringGuts._slowEnsureMatchingEncoding(_:)(v85, v20, v8);
                if ((v8 & 0x1000000000000000LL) != 0) {
                  goto LABEL_1184;
                }
LABEL_1180:
                unint64_t v404 = (v85 & 0xFFFFFFFFFFFF0000LL) + 65540;
              }

              else
              {
                if ((v8 & 0x1000000000000000LL) == 0) {
                  goto LABEL_1180;
                }
LABEL_1184:
                if (v439 <= v85 >> 16) {
                  goto LABEL_1387;
                }
                unint64_t v404 = String.UTF8View._foreignIndex(after:)();
              }

              if ((v404 & 0xC) == v440) {
                unint64_t v404 = _StringGuts._slowEnsureMatchingEncoding(_:)(v404, v20, v8);
              }
              unint64_t v405 = v404 >> 16;
              if (v404 >> 16 >= v439) {
                goto LABEL_1376;
              }
              if ((v8 & 0x1000000000000000LL) != 0)
              {
                unsigned __int8 v385 = String.UTF8View._foreignSubscript(position:)();
              }

              else if ((v8 & 0x2000000000000000LL) != 0)
              {
                unint64_t v446 = v20;
                unint64_t v447 = v438;
                unsigned __int8 v385 = *((_BYTE *)&v446 + v405);
              }

              else
              {
                uint64_t v406 = v434;
                if ((v20 & 0x1000000000000000LL) == 0) {
                  uint64_t v406 = _StringObject.sharedUTF8.getter();
                }
                unsigned __int8 v385 = *(_BYTE *)(v406 + v405);
              }

              if (v385 < 0xCCu)
              {
LABEL_1223:
                uint64_t v388 = v107;
                unint64_t v85 = a1;
LABEL_1224:
                else {
                  uint64_t v410 = 0LL;
                }
                else {
                  unint64_t v411 = 0LL;
                }
                BOOL v333 = v388 < 1;
                if (v388 >= 1) {
                  unint64_t v20 = v85;
                }
                else {
                  unint64_t v20 = 0LL;
                }
                if (v388 >= 1) {
                  uint64_t v13 = v410;
                }
                else {
                  uint64_t v13 = 0LL;
                }
                if (v388 >= 1) {
                  unint64_t v22 = v411;
                }
                else {
                  unint64_t v22 = 0LL;
                }
                int v100 = v388 >= 1 && (v433 & (v388 != 1)) == 0;
LABEL_1308:
                unint64_t v2 = v436;
                if (v333) {
                  goto LABEL_1309;
                }
                goto LABEL_1281;
              }

              goto LABEL_1116;
            }

            if (v442) {
              break;
            }
            unint64_t v386 = String.index(after:)();
LABEL_1117:
            unint64_t v85 = v386;
LABEL_1118:
            uint64_t v388 = v107 + 1;
            if (v107) {
              uint64_t v389 = v13;
            }
            else {
              uint64_t v389 = v85;
            }
            if (v388 >= 0) {
              uint64_t v13 = v389;
            }
            ++v107;
            int64_t v23 = a1;
          }

          if ((v85 & 0xC) == v440 || (v85 & 1) == 0)
          {
            unint64_t v393 = v85;
            if ((v85 & 0xC) == v440) {
              unint64_t v393 = _StringGuts._slowEnsureMatchingEncoding(_:)(v85, v20, v8);
            }
            if (v439 <= v393 >> 16) {
              goto LABEL_1353;
            }
            if ((v393 & 1) == 0)
            {
              unint64_t v393 = v393 & 0xC | _StringGuts.scalarAlignSlow(_:)(v393, v20, v8) & 0xFFFFFFFFFFFFFFF3LL | 1;
              if ((v8 & 0x1000000000000000LL) == 0)
              {
LABEL_1150:
                unint64_t v395 = v393 >> 16;
                if ((v8 & 0x2000000000000000LL) != 0)
                {
                  unint64_t v446 = v20;
                  unint64_t v447 = v438;
                  int v397 = *((unsigned __int8 *)&v446 + v395);
                }

                else
                {
                  uint64_t v396 = v434;
                  if ((v20 & 0x1000000000000000LL) == 0) {
                    uint64_t v396 = _StringObject.sharedUTF8.getter();
                  }
                  int v397 = *(unsigned __int8 *)(v396 + v395);
                }

                int v398 = (char)v397;
                unsigned int v399 = __clz(v397 ^ 0xFF) - 24;
                if (v398 >= 0) {
                  LOBYTE(v399) = 1;
                }
                unint64_t v85 = ((v395 + v399) << 16) | 5;
                goto LABEL_1118;
              }

              goto LABEL_1182;
            }
          }

          else
          {
            unint64_t v393 = v85;
            if (v439 <= v85 >> 16) {
              goto LABEL_1352;
            }
          }

          if ((v8 & 0x1000000000000000LL) == 0) {
            goto LABEL_1150;
          }
LABEL_1182:
          unint64_t v386 = String.UnicodeScalarView._foreignIndex(after:)();
          goto LABEL_1117;
        }

LABEL_894:
        unint64_t v20 = 0LL;
        uint64_t v13 = 0LL;
        unint64_t v22 = 0LL;
        int v100 = 0;
        BOOL v333 = 1;
        goto LABEL_1308;
      }

      unint64_t v434 = (a1 >> 27);
      if (!v438)
      {
        unint64_t v2 = 0LL;
        uint64_t v21 = v85;
        a1 = v85;
LABEL_884:
        uint64_t v188 = v2;
        BOOL v342 = (unint64_t)v2 >= v434;
        unint64_t v2 = v436;
        if (!v342) {
          goto LABEL_1309;
        }
        goto LABEL_1291;
      }

      unint64_t v185 = v86 >> 14;
      uint64_t v186 = (v20 >> 59) & 1;
      if ((v8 & 0x1000000000000000LL) == 0) {
        LOBYTE(v186) = 1;
      }
      uint64_t v187 = HIBYTE(v8) & 0xF;
      if ((v8 & 0x2000000000000000LL) == 0) {
        uint64_t v187 = v20 & 0xFFFFFFFFFFFFLL;
      }
      unint64_t v439 = v187;
      if (v185 > v85 >> 14)
      {
        unint64_t v435 = v86;
        uint64_t v188 = 0LL;
        int64_t v23 = 0LL;
        unint64_t v440 = 4LL << v186;
        unint64_t v441 = a1;
        unint64_t v429 = (v8 & 0xFFFFFFFFFFFFFFFLL) + 32;
        unint64_t v430 = v8 & 0xFFFFFFFFFFFFFFLL;
        unint64_t v2 = (unint64_t *)1;
        unint64_t v20 = v85;
        uint64_t v21 = v85;
        uint64_t v431 = v86 >> 14;
        while (1)
        {
          a1 = v85;
          if ((v441 & 1) == 0)
          {
            unint64_t v432 = v21;
            unint64_t v189 = v85;
            if ((v85 & 0xC) == v440) {
              unint64_t v189 = _StringGuts._slowEnsureMatchingEncoding(_:)(v85, v437, v8);
            }
            unint64_t v190 = v189 >> 16;
            if (v189 >> 16 >= v439) {
              goto LABEL_1346;
            }
            if ((v8 & 0x1000000000000000LL) != 0)
            {
              char v192 = String.UTF8View._foreignSubscript(position:)();
              if (v192 < 0) {
                goto LABEL_526;
              }
            }

            else if ((v8 & 0x2000000000000000LL) != 0)
            {
              unint64_t v446 = v437;
              unint64_t v447 = v430;
              char v192 = *((_BYTE *)&v446 + v190);
              if (v192 < 0) {
                goto LABEL_526;
              }
            }

            else
            {
              uint64_t v191 = v429;
              if ((v437 & 0x1000000000000000LL) == 0) {
                uint64_t v191 = _StringObject.sharedUTF8.getter();
              }
              char v192 = *(_BYTE *)(v191 + v190);
              if (v192 < 0) {
                goto LABEL_526;
              }
            }

            unint64_t v195 = v85;
            if ((v85 & 0xC) == v440)
            {
              unint64_t v195 = _StringGuts._slowEnsureMatchingEncoding(_:)(v85, v437, v8);
              if ((v8 & 0x1000000000000000LL) != 0) {
                goto LABEL_489;
              }
LABEL_471:
              unint64_t v85 = (v195 & 0xFFFFFFFFFFFF0000LL) + 65540;
              if (v185 == v85 >> 14)
              {
LABEL_491:
                uint64_t v21 = v432;
                goto LABEL_528;
              }
            }

            else
            {
              if ((v8 & 0x1000000000000000LL) == 0) {
                goto LABEL_471;
              }
LABEL_489:
              if (v439 <= v195 >> 16) {
                goto LABEL_1368;
              }
              unint64_t v85 = String.UTF8View._foreignIndex(after:)();
              if (v185 == v85 >> 14) {
                goto LABEL_491;
              }
            }

            unint64_t v201 = v85;
            if ((v85 & 0xC) == v440) {
              unint64_t v201 = _StringGuts._slowEnsureMatchingEncoding(_:)(v85, v437, v8);
            }
            unint64_t v202 = v201 >> 16;
            if (v201 >> 16 >= v439) {
              goto LABEL_1369;
            }
            if ((v8 & 0x1000000000000000LL) != 0)
            {
              unsigned __int8 v204 = String.UTF8View._foreignSubscript(position:)();
            }

            else if ((v8 & 0x2000000000000000LL) != 0)
            {
              unint64_t v446 = v437;
              unint64_t v447 = v430;
              unsigned __int8 v204 = *((_BYTE *)&v446 + v202);
            }

            else
            {
              uint64_t v203 = v429;
              if ((v437 & 0x1000000000000000LL) == 0) {
                uint64_t v203 = _StringObject.sharedUTF8.getter();
              }
              unsigned __int8 v204 = *(_BYTE *)(v203 + v202);
            }

            unint64_t v185 = v431;
            if (v204 > 0xCBu) {
              goto LABEL_526;
            }
            if (v192 == 13 && v204 == 10)
            {
              if ((v85 & 0xC) == v440)
              {
                unint64_t v85 = _StringGuts._slowEnsureMatchingEncoding(_:)(v85, v437, v8);
                uint64_t v21 = v432;
                if ((v8 & 0x1000000000000000LL) != 0) {
                  goto LABEL_512;
                }
LABEL_508:
                unint64_t v205 = (v85 & 0xFFFFFFFFFFFF0000LL) + 65540;
              }

              else
              {
                uint64_t v21 = v432;
                if ((v8 & 0x1000000000000000LL) == 0) {
                  goto LABEL_508;
                }
LABEL_512:
                if (v439 <= v85 >> 16)
                {
                  __break(1u);
LABEL_1401:
                  __break(1u);
LABEL_1402:
                  __break(1u);
                  JUMPOUT(0x182D53E50LL);
                }

                unint64_t v205 = String.UTF8View._foreignIndex(after:)();
              }

              if (v185 == v205 >> 14) {
                goto LABEL_1315;
              }
              if ((v205 & 0xC) == v440) {
                unint64_t v205 = _StringGuts._slowEnsureMatchingEncoding(_:)(v205, v437, v8);
              }
              unint64_t v206 = v205 >> 16;
              if (v205 >> 16 >= v439) {
                goto LABEL_1390;
              }
              if ((v8 & 0x1000000000000000LL) != 0)
              {
                unsigned __int8 v208 = String.UTF8View._foreignSubscript(position:)();
              }

              else if ((v8 & 0x2000000000000000LL) != 0)
              {
                unint64_t v446 = v437;
                unint64_t v447 = v430;
                unsigned __int8 v208 = *((_BYTE *)&v446 + v206);
              }

              else
              {
                uint64_t v207 = v429;
                if ((v437 & 0x1000000000000000LL) == 0) {
                  uint64_t v207 = _StringObject.sharedUTF8.getter();
                }
                unsigned __int8 v208 = *(_BYTE *)(v207 + v206);
              }

              unint64_t v185 = v431;
              if (v208 < 0xCCu)
              {
LABEL_1288:
                unint64_t v85 = a1;
                a1 = v20;
                unint64_t v2 = v436;
                uint64_t v21 = v432;
                goto LABEL_1289;
              }

LABEL_526:
              unint64_t v209 = String._thoroughMatchAnyNonNewline(at:limitedBy:isScalarSemantics:)(a1, v435, v442 != 0, v437, v8);
              if ((v210 & 1) != 0) {
                goto LABEL_1288;
              }
              unint64_t v85 = v209;
              uint64_t v21 = v432;
              goto LABEL_528;
            }

            goto LABEL_491;
          }

          if (v442) {
            break;
          }
          unint64_t v85 = String.index(after:)();
LABEL_528:
          else {
            uint64_t v211 = v21;
          }
          int64_t v23 = (unint64_t)v2 >> 63;
          unint64_t v2 = (unint64_t *)((char *)v2 + 1);
          uint64_t v188 = (unint64_t *)((char *)v188 + 1);
          unint64_t v20 = a1;
          if (v185 <= v85 >> 14)
          {
            uint64_t v188 = (unint64_t *)((char *)v2 - 1);
            goto LABEL_1252;
          }
        }

        uint64_t v193 = v437;
        if ((v85 & 0xC) == v440 || (v85 & 1) == 0)
        {
          unint64_t v194 = v85;
          if ((v85 & 0xC) == v440) {
            unint64_t v194 = _StringGuts._slowEnsureMatchingEncoding(_:)(v85, v437, v8);
          }
          if (v439 <= v194 >> 16) {
            goto LABEL_1371;
          }
          if ((v194 & 1) == 0)
          {
            unint64_t v194 = v194 & 0xC | _StringGuts.scalarAlignSlow(_:)(v194, v193, v8) & 0xFFFFFFFFFFFFFFF3LL | 1;
            if ((v8 & 0x1000000000000000LL) == 0)
            {
LABEL_478:
              unint64_t v196 = v194 >> 16;
              if ((v8 & 0x2000000000000000LL) != 0)
              {
                unint64_t v446 = v193;
                unint64_t v447 = v430;
                int v198 = *((unsigned __int8 *)&v446 + v196);
              }

              else
              {
                uint64_t v197 = v429;
                if ((v193 & 0x1000000000000000LL) == 0) {
                  uint64_t v197 = _StringObject.sharedUTF8.getter();
                }
                int v198 = *(unsigned __int8 *)(v197 + v196);
              }

              int v199 = (char)v198;
              unsigned int v200 = __clz(v198 ^ 0xFF) - 24;
              if (v199 >= 0) {
                LOBYTE(v200) = 1;
              }
              unint64_t v85 = ((v196 + v200) << 16) | 5;
              unint64_t v185 = v431;
              goto LABEL_528;
            }

            goto LABEL_510;
          }
        }

        else
        {
          unint64_t v194 = v85;
          if (v439 <= v85 >> 16) {
            goto LABEL_1370;
          }
        }

        if ((v8 & 0x1000000000000000LL) == 0) {
          goto LABEL_478;
        }
LABEL_510:
        unint64_t v85 = String.UnicodeScalarView._foreignIndex(after:)();
        unint64_t v185 = v431;
        goto LABEL_528;
      }

      int64_t v23 = 0LL;
      uint64_t v188 = 0LL;
      uint64_t v21 = v85;
      a1 = v85;
      goto LABEL_1289;
    case 4uLL:
      unint64_t v101 = *v2;
      unint64_t v8 = v2[1];
      unint64_t v435 = (a1 >> 10) & 1;
      unint64_t v437 = (a1 >> 9) & 1;
      unint64_t v439 = v101;
      if ((v26 & 1) != 0)
      {
        int v102 = a1;
        unint64_t v20 = v2[8];
        unint64_t v434 = v2[5];
        unint64_t v429 = v434 >> 14;
        if (v434 >> 14 <= v20 >> 14) {
          goto LABEL_1278;
        }
        int v433 = v24;
        int64_t v103 = 0LL;
        LODWORD(v428) = v442 == 0;
        uint64_t v104 = (v101 >> 59) & 1;
        if ((v8 & 0x1000000000000000LL) == 0) {
          LOBYTE(v104) = 1;
        }
        unint64_t v441 = 4LL << v104;
        uint64_t v105 = HIBYTE(v8) & 0xF;
        if ((v8 & 0x2000000000000000LL) == 0) {
          uint64_t v105 = v101 & 0xFFFFFFFFFFFFLL;
        }
        unint64_t v438 = v105;
        uint64_t v431 = (v8 & 0xFFFFFFFFFFFFFFFLL) + 32;
        unint64_t v432 = v8 & 0xFFFFFFFFFFFFFFLL;
        int64_t v23 = 1LL;
        unint64_t v430 = a1;
        uint64_t v13 = v20;
        unint64_t v106 = v20;
        unint64_t v2 = (unint64_t *)v429;
        while (1)
        {
          unint64_t v440 = v106;
          unint64_t v106 = v20;
          uint64_t v21 = v20 & 0xC;
          unint64_t v337 = v20;
          if (v21 == v441)
          {
            unint64_t v337 = _StringGuts._slowEnsureMatchingEncoding(_:)(v20, v101, v8);
            unint64_t v101 = v439;
          }

          unint64_t v338 = v337 >> 16;
          if (v337 >> 16 >= v438)
          {
LABEL_1313:
            __break(1u);
LABEL_1314:
            __break(1u);
LABEL_1315:
            uint64_t v188 = (unint64_t *)((char *)v2 - 1);
LABEL_1316:
            unint64_t v85 = a1;
            a1 = v20;
LABEL_1252:
            unint64_t v2 = v436;
LABEL_1289:
            int v100 = 0;
            unint64_t v20 = 0LL;
            char v359 = 1;
            uint64_t v13 = 0LL;
            unint64_t v22 = 0LL;
LABEL_1291:
            if (v188 != 0LL && (v433 & 1) != 0 && (unint64_t)v188 > v434)
            {
              int v100 = 0;
              unint64_t v20 = v85;
              uint64_t v13 = v21;
              unint64_t v22 = a1;
              goto LABEL_1281;
            }

            uint64_t v13 = 0LL;
            unint64_t v22 = 0LL;
            char v359 = 0;
            int v100 = 1;
            unint64_t v20 = v85;
            goto LABEL_1280;
          }

          if ((v8 & 0x1000000000000000LL) != 0)
          {
            uint64_t v345 = String.UTF8View._foreignSubscript(position:)();
            unint64_t v101 = v439;
            unint64_t v22 = v345;
            if ((v345 & 0x80) != 0) {
              goto LABEL_1000;
            }
          }

          else if ((v8 & 0x2000000000000000LL) != 0)
          {
            unint64_t v446 = v101;
            unint64_t v447 = v432;
            unint64_t v22 = *((unsigned __int8 *)&v446 + v338);
            if ((v22 & 0x80) != 0) {
              goto LABEL_1000;
            }
          }

          else
          {
            uint64_t v339 = v431;
            if ((v101 & 0x1000000000000000LL) == 0)
            {
              uint64_t v339 = _StringObject.sharedUTF8.getter();
              unint64_t v101 = v439;
            }

            unint64_t v22 = *(unsigned __int8 *)(v339 + v338);
            if ((v22 & 0x80) != 0) {
              goto LABEL_1000;
            }
          }

          unint64_t v340 = v20;
          if (v21 == v441)
          {
            unint64_t v340 = _StringGuts._slowEnsureMatchingEncoding(_:)(v20, v101, v8);
            unint64_t v101 = v439;
            if ((v8 & 0x1000000000000000LL) == 0)
            {
LABEL_923:
              unint64_t v20 = (v340 & 0xFFFFFFFFFFFF0000LL) + 65540;
              goto LABEL_968;
            }
          }

          else if ((v8 & 0x1000000000000000LL) == 0)
          {
            goto LABEL_923;
          }

          if (v438 <= v340 >> 16) {
            goto LABEL_1326;
          }
          unint64_t v346 = String.UTF8View._foreignIndex(after:)();
          unint64_t v101 = v439;
          unint64_t v20 = v346;
          if (v2 == (unint64_t *)(v346 >> 14))
          {
LABEL_924:
            int v341 = 1;
            goto LABEL_925;
          }

LABEL_968:
          unint64_t v2 = (unint64_t *)a1;
          uint64_t v21 = v20 & 0xC;
          unint64_t v347 = v20;
          if (v21 == v441)
          {
            unint64_t v347 = _StringGuts._slowEnsureMatchingEncoding(_:)(v20, v101, v8);
            unint64_t v101 = v439;
          }

          a1 = v347 >> 16;
          if (v347 >> 16 >= v438) {
            goto LABEL_1327;
          }
          if ((v8 & 0x1000000000000000LL) != 0)
          {
            unsigned __int8 v349 = String.UTF8View._foreignSubscript(position:)();
            unint64_t v101 = v439;
          }

          else if ((v8 & 0x2000000000000000LL) != 0)
          {
            unint64_t v446 = v101;
            unint64_t v447 = v432;
            unsigned __int8 v349 = *((_BYTE *)&v446 + a1);
          }

          else
          {
            uint64_t v348 = v431;
            if ((v101 & 0x1000000000000000LL) == 0)
            {
              uint64_t v348 = _StringObject.sharedUTF8.getter();
              unint64_t v101 = v439;
            }

            unsigned __int8 v349 = *(_BYTE *)(v348 + a1);
          }

          a1 = (unint64_t)v2;
          unint64_t v2 = (unint64_t *)v429;
          if (v349 > 0xCBu) {
            goto LABEL_1000;
          }
          int v341 = 1;
          if (v22 == 13 && v349 == 10)
          {
            if (v21 == v441)
            {
              uint64_t v350 = _StringGuts._slowEnsureMatchingEncoding(_:)(v20, v101, v8);
              unint64_t v101 = v439;
              unint64_t v20 = v350;
              if ((v8 & 0x1000000000000000LL) != 0) {
                goto LABEL_986;
              }
LABEL_983:
              unint64_t v20 = (v20 & 0xFFFFFFFFFFFF0000LL) + 65540;
              if (v2 != (unint64_t *)(v20 >> 14))
              {
LABEL_988:
                unint64_t v352 = v20;
                if ((v20 & 0xC) == v441)
                {
                  unint64_t v352 = _StringGuts._slowEnsureMatchingEncoding(_:)(v20, v101, v8);
                  unint64_t v101 = v439;
                }

                uint64_t v21 = v352 >> 16;
                if (v352 >> 16 >= v438) {
                  goto LABEL_1367;
                }
                if ((v8 & 0x1000000000000000LL) != 0)
                {
                  unsigned __int8 v354 = String.UTF8View._foreignSubscript(position:)();
                  unint64_t v101 = v439;
                }

                else if ((v8 & 0x2000000000000000LL) != 0)
                {
                  unint64_t v446 = v101;
                  unint64_t v447 = v432;
                  unsigned __int8 v354 = *((_BYTE *)&v446 + v21);
                }

                else
                {
                  uint64_t v353 = v431;
                  if ((v101 & 0x1000000000000000LL) == 0)
                  {
                    uint64_t v353 = _StringObject.sharedUTF8.getter();
                    unint64_t v101 = v439;
                  }

                  unsigned __int8 v354 = *(_BYTE *)(v353 + v21);
                }

                if (v354 > 0xCBu)
                {
LABEL_1000:
                  uint64_t v355 = String._thoroughMatchBuiltinCC(_:at:limitedBy:isInverted:isStrictASCII:isScalarSemantics:)( a1,  v106,  v434,  v437,  v435,  v442 != 0,  v101,  v8);
                  if ((v356 & 1) != 0)
                  {
LABEL_1275:
                    unint64_t v20 = v106;
                    unint64_t v22 = v440;
                    unint64_t v2 = v436;
                    if ((v103 & 0x8000000000000000LL) == 0) {
                      goto LABEL_1276;
                    }
LABEL_1007:
                    unint64_t v20 = 0LL;
                    uint64_t v13 = 0LL;
                    unint64_t v22 = 0LL;
                    int v100 = 0;
                    char v359 = 1;
                    goto LABEL_1280;
                  }

                  unint64_t v20 = v355;
                  unint64_t v101 = v439;
                  goto LABEL_905;
                }
              }
            }

            else
            {
              if ((v8 & 0x1000000000000000LL) == 0) {
                goto LABEL_983;
              }
LABEL_986:
              if (v438 <= v20 >> 16) {
                goto LABEL_1366;
              }
              unint64_t v351 = String.UTF8View._foreignIndex(after:)();
              unint64_t v101 = v439;
              unint64_t v20 = v351;
            }

            int v341 = 0;
          }

LABEL_925:
          switch(v102)
          {
            case 0:
            case 1:
              goto LABEL_904;
            case 2:
              BOOL v342 = (v22 - 48) >= 0xAu;
              goto LABEL_946;
            case 3:
              int v344 = v22 == 32 || v22 == 9;
              goto LABEL_949;
            case 4:
            case 5:
              if ((v20 & 0xC) == v441)
              {
                unint64_t v357 = _StringGuts._slowEnsureMatchingEncoding(_:)(v20, v101, v8);
                unint64_t v101 = v439;
                unint64_t v20 = v357;
                if (v357 < 0x4000) {
                  goto LABEL_1373;
                }
              }

              else if (v20 < 0x4000)
              {
                goto LABEL_1373;
              }

              if ((v8 & 0x1000000000000000LL) == 0) {
                goto LABEL_956;
              }
              if (v438 >= v20 >> 16) {
                goto LABEL_903;
              }
              goto LABEL_1386;
            case 6:
              if (v22 - 9 >= 5 && v22 != 32)
              {
LABEL_959:
                if ((a1 & 0x200) == 0) {
                  goto LABEL_1275;
                }
                break;
              }

              if ((v20 & 0xC) == v441)
              {
                unint64_t v358 = _StringGuts._slowEnsureMatchingEncoding(_:)(v20, v101, v8);
                unint64_t v101 = v439;
                unint64_t v20 = v358;
                if (v358 < 0x4000) {
                  goto LABEL_1375;
                }
              }

              else if (v20 < 0x4000)
              {
                goto LABEL_1375;
              }

              if ((v8 & 0x1000000000000000LL) != 0)
              {
                if (v438 < v20 >> 16) {
                  goto LABEL_1389;
                }
LABEL_903:
                uint64_t v335 = String.UTF8View._foreignIndex(before:)();
                unint64_t v101 = v439;
                unint64_t v20 = v335;
LABEL_904:
                if ((a1 & 0x200) != 0) {
                  goto LABEL_1275;
                }
              }

              else
              {
LABEL_956:
                unint64_t v20 = (v20 & 0xFFFFFFFFFFFF0000LL) - 65532;
                if ((a1 & 0x200) != 0) {
                  goto LABEL_1275;
                }
              }

              break;
            case 7:
              BOOL v342 = v22 != 95 && (v22 - 65) >= 0x1Au;
LABEL_946:
              int v344 = !v342;
LABEL_949:
              if ((_DWORD)v437 != v344) {
                break;
              }
              int64_t v103 = v23 - 1;
              goto LABEL_1275;
            default:
              __break(1u);
              goto LABEL_1404;
          }

LABEL_905:
          ++v103;
          if (v23) {
            uint64_t v336 = v13;
          }
          else {
            uint64_t v336 = v20;
          }
          if (v23 >= 0) {
            uint64_t v13 = v336;
          }
          ++v23;
          if ((unint64_t)v2 <= v20 >> 14)
          {
            int64_t v103 = v23 - 1;
            unint64_t v22 = v106;
            unint64_t v2 = v436;
            if (v23 - 1 < 0) {
              goto LABEL_1007;
            }
LABEL_1276:
            if ((v433 & (v103 != 0)) != 0)
            {
              char v359 = 0;
              int v100 = 0;
              goto LABEL_1280;
            }

LABEL_1278:
            char v359 = 0;
LABEL_1279:
            uint64_t v13 = 0LL;
            unint64_t v22 = 0LL;
            int v100 = 1;
LABEL_1280:
            if ((v359 & 1) != 0) {
              goto LABEL_1309;
            }
            goto LABEL_1281;
          }
        }
      }

      if ((_DWORD)v13)
      {
        int v433 = v24;
        int v179 = a1;
        unint64_t v20 = v2[8];
        unint64_t v434 = v2[5];
        unint64_t v180 = v434 >> 14;
        if (v434 >> 14 <= v20 >> 14) {
          goto LABEL_1007;
        }
        unint64_t v181 = a1;
        a1 = 0LL;
        LODWORD(v429) = v442 == 0;
        uint64_t v182 = (v101 >> 59) & 1;
        if ((v8 & 0x1000000000000000LL) == 0) {
          LOBYTE(v182) = 1;
        }
        unint64_t v2 = (unint64_t *)(4LL << v182);
        uint64_t v183 = HIBYTE(v8) & 0xF;
        if ((v8 & 0x2000000000000000LL) == 0) {
          uint64_t v183 = v101 & 0xFFFFFFFFFFFFLL;
        }
        unint64_t v438 = v183;
        uint64_t v431 = (v8 & 0xFFFFFFFFFFFFFFFLL) + 32;
        unint64_t v432 = v8 & 0xFFFFFFFFFFFFFFLL;
        unint64_t v441 = v181;
        unint64_t v430 = v181;
        uint64_t v13 = v20;
        unint64_t v184 = v20;
        while (1)
        {
          unint64_t v440 = v184;
          unint64_t v184 = v20;
          uint64_t v21 = v20 & 0xC;
          unint64_t v362 = v20;
          if ((unint64_t *)v21 == v2)
          {
            unint64_t v362 = _StringGuts._slowEnsureMatchingEncoding(_:)(v20, v101, v8);
            unint64_t v101 = v439;
          }

          unint64_t v22 = v362 >> 16;
          if (v362 >> 16 >= v438) {
            goto LABEL_1318;
          }
          if ((v8 & 0x1000000000000000LL) != 0)
          {
            unsigned __int8 v371 = String.UTF8View._foreignSubscript(position:)();
            unint64_t v101 = v439;
            unsigned __int8 v364 = v371;
            if ((v371 & 0x80) != 0) {
              goto LABEL_1104;
            }
          }

          else if ((v8 & 0x2000000000000000LL) != 0)
          {
            unint64_t v446 = v101;
            unint64_t v447 = v432;
            unsigned __int8 v364 = *((_BYTE *)&v446 + v22);
            if ((v364 & 0x80) != 0) {
              goto LABEL_1104;
            }
          }

          else
          {
            uint64_t v363 = v431;
            if ((v101 & 0x1000000000000000LL) == 0)
            {
              uint64_t v363 = _StringObject.sharedUTF8.getter();
              unint64_t v101 = v439;
            }

            unsigned __int8 v364 = *(_BYTE *)(v363 + v22);
            if ((v364 & 0x80) != 0) {
              goto LABEL_1104;
            }
          }

          unint64_t v365 = v20;
          if ((unint64_t *)v21 == v2)
          {
            unint64_t v365 = _StringGuts._slowEnsureMatchingEncoding(_:)(v20, v101, v8);
            unint64_t v101 = v439;
            if ((v8 & 0x1000000000000000LL) == 0)
            {
LABEL_1028:
              unint64_t v20 = (v365 & 0xFFFFFFFFFFFF0000LL) + 65540;
              if (v180 == v20 >> 14) {
                goto LABEL_1029;
              }
              goto LABEL_1072;
            }
          }

          else if ((v8 & 0x1000000000000000LL) == 0)
          {
            goto LABEL_1028;
          }

          if (v438 <= v365 >> 16) {
            goto LABEL_1343;
          }
          unint64_t v372 = String.UTF8View._foreignIndex(after:)();
          unint64_t v101 = v439;
          unint64_t v20 = v372;
          if (v180 == v372 >> 14)
          {
LABEL_1029:
            int v366 = 1;
            goto LABEL_1030;
          }

LABEL_1072:
          int64_t v23 = v20 & 0xC;
          unint64_t v373 = v20;
          if ((unint64_t *)v23 == v2)
          {
            unint64_t v373 = _StringGuts._slowEnsureMatchingEncoding(_:)(v20, v101, v8);
            unint64_t v101 = v439;
          }

          uint64_t v21 = v373 >> 16;
          if (v373 >> 16 >= v438) {
            goto LABEL_1344;
          }
          if ((v8 & 0x1000000000000000LL) != 0)
          {
            unsigned __int8 v375 = String.UTF8View._foreignSubscript(position:)();
            unint64_t v101 = v439;
          }

          else if ((v8 & 0x2000000000000000LL) != 0)
          {
            unint64_t v446 = v101;
            unint64_t v447 = v432;
            unsigned __int8 v375 = *((_BYTE *)&v446 + v21);
          }

          else
          {
            uint64_t v374 = v431;
            if ((v101 & 0x1000000000000000LL) == 0)
            {
              uint64_t v374 = _StringObject.sharedUTF8.getter();
              unint64_t v101 = v439;
            }

            unsigned __int8 v375 = *(_BYTE *)(v374 + v21);
          }

          if (v375 > 0xCBu) {
            goto LABEL_1104;
          }
          int v366 = 1;
          if (v364 != 13 || v375 != 10) {
            goto LABEL_1030;
          }
          if ((unint64_t *)v23 == v2)
          {
            uint64_t v376 = _StringGuts._slowEnsureMatchingEncoding(_:)(v20, v101, v8);
            unint64_t v101 = v439;
            unint64_t v20 = v376;
            if ((v8 & 0x1000000000000000LL) == 0)
            {
LABEL_1087:
              unint64_t v20 = (v20 & 0xFFFFFFFFFFFF0000LL) + 65540;
              goto LABEL_1091;
            }
          }

          else if ((v8 & 0x1000000000000000LL) == 0)
          {
            goto LABEL_1087;
          }

          if (v438 <= v20 >> 16) {
            goto LABEL_1380;
          }
          uint64_t v377 = String.UTF8View._foreignIndex(after:)();
          unint64_t v101 = v439;
          unint64_t v20 = v377;
LABEL_1091:
          if (v180 != v20 >> 14)
          {
            unint64_t v378 = v20;
            if ((unint64_t *)(v20 & 0xC) == v2)
            {
              unint64_t v378 = _StringGuts._slowEnsureMatchingEncoding(_:)(v20, v101, v8);
              unint64_t v101 = v439;
            }

            uint64_t v21 = v378 >> 16;
            if (v378 >> 16 >= v438) {
              goto LABEL_1381;
            }
            if ((v8 & 0x1000000000000000LL) != 0)
            {
              unsigned __int8 v380 = String.UTF8View._foreignSubscript(position:)();
              unint64_t v101 = v439;
            }

            else if ((v8 & 0x2000000000000000LL) != 0)
            {
              unint64_t v446 = v101;
              unint64_t v447 = v432;
              unsigned __int8 v380 = *((_BYTE *)&v446 + v21);
            }

            else
            {
              uint64_t v379 = v431;
              if ((v101 & 0x1000000000000000LL) == 0)
              {
                uint64_t v379 = _StringObject.sharedUTF8.getter();
                unint64_t v101 = v439;
              }

              unsigned __int8 v380 = *(_BYTE *)(v379 + v21);
            }

            if (v380 > 0xCBu)
            {
LABEL_1104:
              uint64_t v381 = String._thoroughMatchBuiltinCC(_:at:limitedBy:isInverted:isStrictASCII:isScalarSemantics:)( v441,  v184,  v434,  v437,  v435,  v442 != 0,  v101,  v8);
              if ((v382 & 1) != 0) {
                goto LABEL_1110;
              }
              unint64_t v20 = v381;
              unint64_t v101 = v439;
              goto LABEL_1010;
            }
          }

          int v366 = 0;
LABEL_1030:
          switch(v179)
          {
            case 0:
            case 1:
              goto LABEL_1009;
            case 2:
              BOOL v367 = (v364 - 48) >= 0xAu;
              goto LABEL_1052;
            case 3:
              int v369 = v364 == 32 || v364 == 9;
              goto LABEL_1055;
            case 4:
            case 5:
              if ((unint64_t *)(v20 & 0xC) == v2)
              {
                unint64_t v383 = _StringGuts._slowEnsureMatchingEncoding(_:)(v20, v101, v8);
                unint64_t v101 = v439;
                unint64_t v20 = v383;
                if (v383 < 0x4000) {
                  goto LABEL_1385;
                }
              }

              else if (v20 < 0x4000)
              {
                goto LABEL_1385;
              }

              if ((v8 & 0x1000000000000000LL) == 0) {
                goto LABEL_1008;
              }
              if (v438 < v20 >> 16) {
                goto LABEL_1397;
              }
              goto LABEL_1063;
            case 6:
              if (v364 - 9 < 5 || v364 == 32)
              {
                if (((v366 | v429) & 1) == 0)
                {
                  if ((unint64_t *)(v20 & 0xC) == v2)
                  {
                    unint64_t v384 = _StringGuts._slowEnsureMatchingEncoding(_:)(v20, v101, v8);
                    unint64_t v101 = v439;
                    unint64_t v20 = v384;
                    if (v384 < 0x4000) {
                      goto LABEL_1388;
                    }
                  }

                  else if (v20 < 0x4000)
                  {
                    goto LABEL_1388;
                  }

                  if ((v8 & 0x1000000000000000LL) != 0)
                  {
                    if (v438 < v20 >> 16) {
                      goto LABEL_1399;
                    }
LABEL_1063:
                    uint64_t v370 = String.UTF8View._foreignIndex(before:)();
                    unint64_t v101 = v439;
                    unint64_t v20 = v370;
                  }

                  else
                  {
LABEL_1008:
                    unint64_t v20 = (v20 & 0xFFFFFFFFFFFF0000LL) - 65532;
                  }
                }

LABEL_1009:
                if ((v441 & 0x200) != 0)
                {
LABEL_1110:
                  uint64_t v360 = a1;
                  unint64_t v20 = v184;
                  unint64_t v22 = v440;
LABEL_1111:
                  if (v360 < 1)
                  {
                    unint64_t v20 = 0LL;
                    uint64_t v13 = 0LL;
                    unint64_t v22 = 0LL;
                    int v100 = 0;
                    char v359 = 1;
                    unint64_t v2 = v436;
                    goto LABEL_1280;
                  }

                  unint64_t v2 = v436;
                  char v359 = 0;
                  if ((v433 & (v360 != 1)) != 0)
                  {
                    int v100 = 0;
                    goto LABEL_1280;
                  }

                  goto LABEL_1279;
                }
              }

              else
              {
LABEL_1065:
                if ((v441 & 0x200) == 0) {
                  goto LABEL_1110;
                }
              }

              break;
            case 7:
              BOOL v367 = v364 != 95 && (v364 - 65) >= 0x1Au;
LABEL_1052:
              int v369 = !v367;
LABEL_1055:
              if ((_DWORD)v437 == v369) {
                goto LABEL_1110;
              }
              break;
            default:
              goto LABEL_1406;
          }

LABEL_1010:
          uint64_t v360 = a1 + 1;
          if (a1) {
            uint64_t v361 = v13;
          }
          else {
            uint64_t v361 = v20;
          }
          if (v360 >= 0) {
            uint64_t v13 = v361;
          }
          ++a1;
          unint64_t v22 = v184;
          if (v180 <= v20 >> 14) {
            goto LABEL_1111;
          }
        }
      }

      unint64_t v434 = (a1 >> 27);
      unint64_t v283 = v2[8];
      if (!v438)
      {
        int v433 = v24;
        unint64_t v24 = 0LL;
        uint64_t v308 = v283;
        unint64_t v2 = (unint64_t *)v283;
LABEL_893:
        a1 = v24;
        BOOL v342 = v24 >= v434;
        LOBYTE(v24) = v433;
        if (v342) {
          goto LABEL_1304;
        }
        goto LABEL_894;
      }

      unint64_t v429 = v2[5];
      uint64_t v284 = (v101 >> 59) & 1;
      if ((v8 & 0x1000000000000000LL) == 0) {
        LOBYTE(v284) = 1;
      }
      uint64_t v285 = HIBYTE(v8) & 0xF;
      if ((v8 & 0x2000000000000000LL) == 0) {
        uint64_t v285 = v101 & 0xFFFFFFFFFFFFLL;
      }
      unint64_t v440 = v285;
      unint64_t v432 = v429 >> 14;
      if (v429 >> 14 <= v283 >> 14)
      {
        LOBYTE(v287) = 0;
        a1 = 0LL;
        uint64_t v308 = v283;
        unint64_t v2 = (unint64_t *)v283;
        goto LABEL_1302;
      }

      LODWORD(v425) = v442 == 0;
      int v433 = v24;
      unint64_t v286 = a1;
      a1 = 0LL;
      unint64_t v287 = 0LL;
      uint64_t v288 = 4LL << v284;
      unint64_t v428 = v8 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v427 = (v8 & 0xFFFFFFFFFFFFFFFLL) + 32;
      unint64_t v24 = 1LL;
      unint64_t v441 = v286;
      unint64_t v426 = v286;
      int64_t v23 = v283;
      uint64_t v13 = v283;
      uint64_t v431 = 4LL << v284;
      break;
    default:
      goto LABEL_1328;
  }

  while (1)
  {
    unint64_t v430 = v287;
    unint64_t v2 = (unint64_t *)v283;
    uint64_t v21 = v283 & 0xC;
    unint64_t v289 = v283;
    if (v21 == v288)
    {
      unint64_t v289 = _StringGuts._slowEnsureMatchingEncoding(_:)(v283, v101, v8);
      uint64_t v288 = v431;
      unint64_t v101 = v439;
    }

    unint64_t v22 = v289 >> 16;
    if (v289 >> 16 >= v440) {
      goto LABEL_1330;
    }
    if ((v8 & 0x1000000000000000LL) != 0)
    {
      char v294 = String.UTF8View._foreignSubscript(position:)();
      uint64_t v288 = v431;
      unint64_t v101 = v439;
      char v291 = v294;
      if (v294 < 0) {
        goto LABEL_788;
      }
    }

    else if ((v8 & 0x2000000000000000LL) != 0)
    {
      unint64_t v446 = v101;
      unint64_t v447 = v428;
      char v291 = *((_BYTE *)&v446 + v22);
      if (v291 < 0) {
        goto LABEL_788;
      }
    }

    else
    {
      uint64_t v290 = v427;
      if ((v101 & 0x1000000000000000LL) == 0)
      {
        uint64_t v290 = _StringObject.sharedUTF8.getter();
        uint64_t v288 = v431;
        unint64_t v101 = v439;
      }

      char v291 = *(_BYTE *)(v290 + v22);
      if (v291 < 0) {
        goto LABEL_788;
      }
    }

    unint64_t v292 = v283;
    if (v21 == v288)
    {
      unint64_t v292 = _StringGuts._slowEnsureMatchingEncoding(_:)(v283, v101, v8);
      uint64_t v288 = v431;
      unint64_t v101 = v439;
      if ((v8 & 0x1000000000000000LL) == 0)
      {
LABEL_748:
        unint64_t v293 = (v292 & 0xFFFFFFFFFFFF0000LL) + 65540;
        goto LABEL_754;
      }
    }

    else if ((v8 & 0x1000000000000000LL) == 0)
    {
      goto LABEL_748;
    }

    if (v440 <= v292 >> 16) {
      goto LABEL_1358;
    }
    uint64_t v295 = String.UTF8View._foreignIndex(after:)();
    unint64_t v101 = v439;
    unint64_t v293 = v295;
    uint64_t v288 = v431;
LABEL_754:
    if (v432 == v293 >> 14) {
      goto LABEL_755;
    }
    unint64_t v20 = v293 & 0xC;
    unint64_t v296 = v293;
    if (v20 == v288)
    {
      unint64_t v296 = _StringGuts._slowEnsureMatchingEncoding(_:)(v293, v101, v8);
      uint64_t v288 = v431;
      unint64_t v101 = v439;
    }

    uint64_t v21 = v296 >> 16;
    if (v296 >> 16 >= v440) {
      goto LABEL_1359;
    }
    if ((v8 & 0x1000000000000000LL) != 0)
    {
      unsigned __int8 v298 = String.UTF8View._foreignSubscript(position:)();
      uint64_t v288 = v431;
      unint64_t v101 = v439;
    }

    else if ((v8 & 0x2000000000000000LL) != 0)
    {
      unint64_t v446 = v101;
      unint64_t v447 = v428;
      unsigned __int8 v298 = *((_BYTE *)&v446 + v21);
    }

    else
    {
      uint64_t v297 = v427;
      if ((v101 & 0x1000000000000000LL) == 0)
      {
        uint64_t v297 = _StringObject.sharedUTF8.getter();
        uint64_t v288 = v431;
        unint64_t v101 = v439;
      }

      unsigned __int8 v298 = *(_BYTE *)(v297 + v21);
    }

    if (v298 > 0xCBu) {
      goto LABEL_788;
    }
    if (v291 != 13 || v298 != 10) {
      goto LABEL_755;
    }
    if (v20 == v288)
    {
      uint64_t v300 = _StringGuts._slowEnsureMatchingEncoding(_:)(v293, v101, v8);
      uint64_t v288 = v431;
      unint64_t v101 = v439;
      unint64_t v293 = v300;
      if ((v8 & 0x1000000000000000LL) != 0)
      {
LABEL_773:
        if (v440 <= v293 >> 16) {
          goto LABEL_1393;
        }
        uint64_t v301 = String.UTF8View._foreignIndex(after:)();
        unint64_t v101 = v439;
        unint64_t v299 = v301;
        uint64_t v288 = v431;
        goto LABEL_775;
      }
    }

    else if ((v8 & 0x1000000000000000LL) != 0)
    {
      goto LABEL_773;
    }

    unint64_t v299 = (v293 & 0xFFFFFFFFFFFF0000LL) + 65540;
LABEL_775:
    if (v432 == v299 >> 14) {
      goto LABEL_755;
    }
    unint64_t v302 = v299;
    if ((v299 & 0xC) == v288)
    {
      unint64_t v302 = _StringGuts._slowEnsureMatchingEncoding(_:)(v299, v101, v8);
      unint64_t v101 = v439;
    }

    uint64_t v21 = v302 >> 16;
    if (v302 >> 16 >= v440) {
      goto LABEL_1394;
    }
    if ((v8 & 0x1000000000000000LL) != 0)
    {
      unsigned __int8 v304 = String.UTF8View._foreignSubscript(position:)();
      unint64_t v101 = v439;
    }

    else if ((v8 & 0x2000000000000000LL) != 0)
    {
      unint64_t v446 = v101;
      unint64_t v447 = v428;
      unsigned __int8 v304 = *((_BYTE *)&v446 + v21);
    }

    else
    {
      uint64_t v303 = v427;
      if ((v101 & 0x1000000000000000LL) == 0)
      {
        uint64_t v303 = _StringObject.sharedUTF8.getter();
        unint64_t v101 = v439;
      }

      unsigned __int8 v304 = *(_BYTE *)(v303 + v21);
    }

    if (v304 <= 0xCBu) {
LABEL_755:
    }
      __asm { BR              X9 }

LABEL_788:
    unint64_t v305 = String._thoroughMatchBuiltinCC(_:at:limitedBy:isInverted:isStrictASCII:isScalarSemantics:)( v441,  v2,  v429,  v437,  v435,  v442 != 0,  v101,  v8);
    if ((v306 & 1) != 0)
    {
      unint64_t v283 = (unint64_t)v2;
      unint64_t v2 = (unint64_t *)v23;
      LOBYTE(v24) = v433;
      uint64_t v308 = v13;
      LOBYTE(v287) = v430;
LABEL_1302:
      int v100 = 0;
      unint64_t v20 = 0LL;
      BOOL v333 = 1;
      uint64_t v13 = 0LL;
      unint64_t v22 = 0LL;
      if ((v287 & 1) != 0 || a1 < v434) {
        goto LABEL_1308;
      }
LABEL_1304:
      if (a1 == 0 || (v24 & 1) == 0 || a1 <= v434)
      {
        uint64_t v13 = 0LL;
        unint64_t v22 = 0LL;
        BOOL v333 = 0;
        int v100 = 1;
        unint64_t v20 = v283;
      }

      else
      {
        int v100 = 0;
        BOOL v333 = 0;
        unint64_t v20 = v283;
        uint64_t v13 = v308;
        unint64_t v22 = (unint64_t)v2;
      }

      goto LABEL_1308;
    }

    unint64_t v283 = v305;
    unint64_t v101 = v439;
    uint64_t v288 = v431;
    if (v434 == v24) {
      unint64_t v307 = v305;
    }
    else {
      unint64_t v307 = v13;
    }
    if ((v24 & 0x8000000000000000LL) == 0LL) {
      uint64_t v308 = v307;
    }
    else {
      uint64_t v308 = v13;
    }
    if ((v24 & 0x8000000000000000LL) == 0 && v24 >= v438) {
      goto LABEL_893;
    }
    uint64_t v13 = v308;
    unint64_t v287 = v24++ >> 63;
    ++a1;
    int64_t v23 = (int64_t)v2;
    if (v432 <= v305 >> 14)
    {
      a1 = v24 - 1;
      LOBYTE(v24) = v433;
      goto LABEL_1302;
    }
  }

unint64_t String.matchASCIIBitset(_:at:limitedBy:isScalarSemantics:)( unsigned __int8 a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, char a6, unint64_t a7, unint64_t a8)
{
  unsigned __int8 v16 = String._quickASCIICharacter(at:limitedBy:)(a4, a5, a7, a8);
  if (v18 == 2)
  {
    unint64_t v19 = a4 >> 14;
    unint64_t v20 = a5 >> 14;
    if ((a6 & 1) != 0)
    {
      if (v19 >= v20) {
        return 0LL;
      }
      _StringGuts.validateScalarIndex(_:)(a4, a7, a8);
      if ((a8 & 0x1000000000000000LL) != 0)
      {
        unsigned int v37 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
        if (v37 >= 0x80) {
          goto LABEL_39;
        }
      }

      else
      {
        if ((a8 & 0x2000000000000000LL) != 0)
        {
          unint64_t v57 = a7;
          uint64_t v58 = a8 & 0xFFFFFFFFFFFFFFLL;
        }

        else if ((a7 & 0x1000000000000000LL) == 0)
        {
          _StringObject.sharedUTF8.getter();
        }

        unsigned int v37 = _decodeScalar(_:startingAt:)();
        if (v37 >= 0x80)
        {
LABEL_39:
          if ((a1 & 1) != 0) {
            goto LABEL_73;
          }
          return 0LL;
        }
      }

      char v47 = v37;
      if ((v37 & 0xC0) != 0)
      {
        char v47 = v37 & 0x3F;
        unint64_t v48 = a3;
      }

      else
      {
        unint64_t v48 = a2;
      }

      uint64_t v49 = (1LL << v47) & v48;
      if ((a1 & 1) != 0)
      {
        if (v49) {
          return 0LL;
        }
      }

      else if (!v49)
      {
        return 0LL;
      }

uint64_t String.matchScalar(_:at:limitedBy:boundaryCheck:isCaseInsensitive:)( int a1, unint64_t a2, unint64_t a3, int a4, char a5, unint64_t a6, unint64_t a7)
{
  int v39 = a4;
  uint64_t v13 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1895F8858](v13);
  unint64_t v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v15);
  unint64_t v19 = (char *)&v38 - v18;
  if (a2 >> 14 >= a3 >> 14) {
    return 0LL;
  }
  _StringGuts.validateScalarIndex(_:)(a2, a6, a7);
  if ((a7 & 0x1000000000000000LL) != 0)
  {
    int v20 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    if ((a5 & 1) != 0) {
      goto LABEL_8;
    }
  }

  else
  {
    if ((a7 & 0x2000000000000000LL) != 0)
    {
      unint64_t v40 = a6;
      uint64_t v41 = a7 & 0xFFFFFFFFFFFFFFLL;
    }

    else if ((a6 & 0x1000000000000000LL) == 0)
    {
      _StringObject.sharedUTF8.getter();
    }

    int v20 = _decodeScalar(_:startingAt:)();
    if ((a5 & 1) != 0)
    {
LABEL_8:
      unint64_t v38 = a6;
      Unicode.Scalar.properties.getter();
      uint64_t v21 = Unicode.Scalar.Properties.lowercaseMapping.getter();
      uint64_t v23 = v22;
      unint64_t v24 = *(void (**)(char *, uint64_t))(v14 + 8);
      v24(v19, v13);
      Unicode.Scalar.properties.getter();
      uint64_t v25 = Unicode.Scalar.Properties.lowercaseMapping.getter();
      uint64_t v27 = v26;
      v24(v17, v13);
      if (v21 == v25 && v23 == v27)
      {
        swift_bridgeObjectRelease_n();
        a6 = v38;
      }

      else
      {
        char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        a6 = v38;
        if ((v29 & 1) == 0) {
          return 0LL;
        }
      }

      goto LABEL_17;
    }
  }

  if (v20 != a1) {
    return 0LL;
  }
LABEL_17:
  unint64_t v30 = _StringGuts.validateScalarIndex(_:)(a2, a6, a7);
  if ((a7 & 0x1000000000000000LL) != 0)
  {
    uint64_t v34 = String.UnicodeScalarView._foreignIndex(after:)();
    if ((v39 & 1) == 0) {
      return v34;
    }
    goto LABEL_28;
  }

  unint64_t v31 = v30 >> 16;
  if ((a7 & 0x2000000000000000LL) != 0)
  {
    unint64_t v40 = a6;
    uint64_t v41 = a7 & 0xFFFFFFFFFFFFFFLL;
    int v33 = *((unsigned __int8 *)&v40 + v31);
  }

  else
  {
    if ((a6 & 0x1000000000000000LL) != 0) {
      uint64_t v32 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
    }
    else {
      uint64_t v32 = _StringObject.sharedUTF8.getter();
    }
    int v33 = *(unsigned __int8 *)(v32 + v31);
  }

  int v35 = (char)v33;
  unsigned int v36 = __clz(v33 ^ 0xFF) - 24;
  if (v35 >= 0) {
    LOBYTE(v36) = 1;
  }
  uint64_t v34 = ((v31 + v36) << 16) | 5;
  if ((v39 & 1) != 0)
  {
LABEL_28:
    if ((String.isOnGraphemeClusterBoundary(_:)() & 1) != 0) {
      return v34;
    }
    return 0LL;
  }

  return v34;
}

uint64_t specialized Array.init(repeating:count:)(uint64_t result, uint64_t a2)
{
  if (a2 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v2 = a2;
    uint64_t v3 = result;
    if (a2)
    {
      uint64_t v4 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v4 + 16) = v2;
      uint64_t v5 = v4 + 32;
      do
      {
        outlined init with copy of Any(v3, v5);
        v5 += 32LL;
        --v2;
      }

      while (v2);
    }

    else
    {
      uint64_t v4 = MEMORY[0x18961AFE8];
    }

    __swift_destroy_boxed_opaque_existential_0(v3);
    return v4;
  }

  return result;
}

uint64_t specialized Array.init(repeating:count:)(uint64_t result, unint64_t a2)
{
  if ((a2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    return result;
  }

  if (!a2) {
    return MEMORY[0x18961AFE8];
  }
  unint64_t v3 = result;
  unint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(void *)(result + 16) = a2;
  uint64_t v4 = (unint64_t *)(result + 32);
  if (a2 < 4)
  {
    unint64_t v5 = 0LL;
LABEL_9:
    unint64_t v9 = a2 - v5;
    do
    {
      *v4++ = v3;
      --v9;
    }

    while (v9);
    return result;
  }

  unint64_t v5 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  v4 += a2 & 0xFFFFFFFFFFFFFFFCLL;
  int64x2_t v6 = vdupq_n_s64(v3);
  uint64_t v7 = (int64x2_t *)(result + 48);
  unint64_t v8 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v7[-1] = v6;
    *uint64_t v7 = v6;
    v7 += 2;
    v8 -= 4LL;
  }

  while (v8);
  if (v5 != a2) {
    goto LABEL_9;
  }
  return result;
}

__int128 *specialized Array.init(repeating:count:)(__int128 *result, uint64_t a2)
{
  if (a2 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v2 = a2;
    unint64_t v3 = result;
    if (a2)
    {
      uint64_t v4 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v4 + 16) = v2;
      uint64_t v5 = v4 + 32;
      do
      {
        outlined init with copy of Processor._StoredCapture(v3, v5);
        v5 += 72LL;
        --v2;
      }

      while (v2);
    }

    else
    {
      uint64_t v4 = MEMORY[0x18961AFE8];
    }

    outlined destroy of Processor._StoredCapture((uint64_t)v3);
    return (__int128 *)v4;
  }

  return result;
}

unint64_t String.UnicodeScalarView.index(_:offsetBy:limitedBy:)( unint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  unint64_t v7 = a3;
  uint64_t v10 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000LL) == 0) {
    LOBYTE(v10) = 1;
  }
  uint64_t v11 = 4LL << v10;
  if ((a3 & 0xC) == 4LL << v10) {
LABEL_57:
  }
    unint64_t v7 = _StringGuts._slowEnsureMatchingEncoding(_:)(v7, a4, a5);
  unint64_t v12 = a1;
  if ((a1 & 0xC) == v11) {
    unint64_t v12 = _StringGuts._slowEnsureMatchingEncoding(_:)(a1, a4, a5);
  }
  unint64_t result = _StringGuts.validateInclusiveScalarIndex(_:)(a1, a4, a5);
  v7 >>= 14;
  if (a2 < 0)
  {
    uint64_t v11 = 0LL;
    a1 = v12 >> 14;
    int v20 = (char *)&v28 + 6;
    while (1)
    {
      if (a1 >= v7 && v7 >= result >> 14) {
        return 0LL;
      }
      if (result < 0x10000)
      {
LABEL_56:
        __break(1u);
        goto LABEL_57;
      }

      if ((a5 & 0x1000000000000000LL) != 0)
      {
        uint64_t v27 = v20;
        unint64_t result = String.UnicodeScalarView._foreignIndex(before:)();
        int v20 = v27;
        goto LABEL_48;
      }

      unint64_t v21 = result >> 16;
      if ((a5 & 0x2000000000000000LL) != 0)
      {
        unint64_t v29 = a4;
        uint64_t v30 = a5 & 0xFFFFFFFFFFFFFFLL;
        if ((*((_BYTE *)&v29 + v21 - 1) & 0xC0) != 0x80) {
          goto LABEL_46;
        }
        uint64_t v23 = 0LL;
        do
          int v25 = v20[v21 + v23--] & 0xC0;
        while (v25 == 128);
      }

      else
      {
        uint64_t v22 = (a5 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if ((a4 & 0x1000000000000000LL) == 0)
        {
          uint64_t v28 = v20;
          uint64_t v22 = _StringObject.sharedUTF8.getter();
          int v20 = v28;
        }

        if ((*(_BYTE *)(v21 + v22 - 1) & 0xC0) != 0x80)
        {
LABEL_46:
          uint64_t v26 = 1LL;
          goto LABEL_47;
        }

        uint64_t v23 = 0LL;
        do
          int v24 = *(_BYTE *)(v22 + v21 - 2 + v23--) & 0xC0;
        while (v24 == 128);
      }

      uint64_t v26 = 1 - v23;
LABEL_47:
      unint64_t result = ((v21 - v26) << 16) | 5;
LABEL_48:
      if (--v11 <= a2)
      {
        if (a1 < v7 || result >> 14 >= v7) {
          return result;
        }
        return 0LL;
      }
    }
  }

  a1 = v12 >> 14;
  if (a2)
  {
    if ((a5 & 0x2000000000000000LL) != 0) {
      unint64_t v14 = HIBYTE(a5) & 0xF;
    }
    else {
      unint64_t v14 = a4 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v11 = a5 & 0xFFFFFFFFFFFFFFLL;
    while (v7 < a1 || result >> 14 < v7)
    {
      unint64_t v15 = result >> 16;
      if (result >> 16 >= v14)
      {
        __break(1u);
        goto LABEL_56;
      }

      if ((a5 & 0x1000000000000000LL) != 0)
      {
        unint64_t result = String.UnicodeScalarView._foreignIndex(after:)();
      }

      else
      {
        if ((a5 & 0x2000000000000000LL) != 0)
        {
          unint64_t v29 = a4;
          uint64_t v30 = a5 & 0xFFFFFFFFFFFFFFLL;
          int v17 = *((unsigned __int8 *)&v29 + v15);
        }

        else
        {
          uint64_t v16 = (a5 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a4 & 0x1000000000000000LL) == 0) {
            uint64_t v16 = _StringObject.sharedUTF8.getter();
          }
          int v17 = *(unsigned __int8 *)(v16 + v15);
        }

        int v18 = (char)v17;
        unsigned int v19 = __clz(v17 ^ 0xFF) - 24;
        if (v18 >= 0) {
          LOBYTE(v19) = 1;
        }
        unint64_t result = ((v15 + v19) << 16) | 5;
      }

      if (!--a2) {
        goto LABEL_27;
      }
    }

    return 0LL;
  }

Swift::Bool __swiftcall Processor.match(_:isCaseInsensitive:)(Swift::String _, Swift::Bool isCaseInsensitive)
{
  unint64_t v3 = *(void *)(v2 + 40) >> 14;
  if (v3 <= *(void *)(v2 + 64) >> 14) {
    goto LABEL_14;
  }
  unint64_t object = _._object;
  uint64_t countAndFlagsBits = _._countAndFlagsBits;
  unint64_t v7 = String.index(after:)();
  if (v3 >= v7 >> 14)
  {
    unint64_t v10 = v7;
    uint64_t v11 = String.subscript.getter();
    uint64_t v13 = v12;
    if (!isCaseInsensitive)
    {
LABEL_10:
      if (v11 == countAndFlagsBits && v13 == object) {
        goto LABEL_12;
      }
      char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v21 & 1) == 0) {
        goto LABEL_14;
      }
      goto LABEL_16;
    }
  }

  else
  {
    uint64_t v8 = String.subscript.getter();
    if ((v8 ^ v9) < 0x4000)
    {
      swift_bridgeObjectRelease();
LABEL_14:
      Processor.signalFailure(preservingCaptures:)(0);
      return 0;
    }

    unint64_t v10 = v9;
    uint64_t v11 = Substring.subscript.getter();
    uint64_t v13 = v18;
    swift_bridgeObjectRelease();
    if (!isCaseInsensitive) {
      goto LABEL_10;
    }
  }

  uint64_t v14 = MEMORY[0x186E16E24](v11, v13);
  uint64_t v16 = v15;
  swift_bridgeObjectRelease();
  if (v14 == MEMORY[0x186E16E24](countAndFlagsBits, object) && v16 == v17)
  {
    swift_bridgeObjectRelease();
LABEL_12:
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }

  char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v19 & 1) == 0) {
    goto LABEL_14;
  }
LABEL_16:
  *(void *)(v2 + 64) = v10;
  return 1;
}

unint64_t String.matchSeq(_:at:limitedBy:isScalarSemantics:)( unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, char a7, unint64_t a8, unint64_t a9)
{
  unint64_t v12 = a3;
  unint64_t v13 = a2;
  unint64_t v14 = a1 ^ a2;
  if ((a7 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if (v14 < 0x4000)
    {
LABEL_3:
      swift_bridgeObjectRelease();
      goto LABEL_5;
    }

    uint64_t v16 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
    uint64_t v17 = (a8 >> 59) & 1;
    if ((a9 & 0x1000000000000000LL) == 0) {
      LOBYTE(v17) = 1;
    }
    uint64_t v18 = 4LL << v17;
    if ((a9 & 0x2000000000000000LL) != 0) {
      unint64_t v19 = HIBYTE(a9) & 0xF;
    }
    else {
      unint64_t v19 = a8 & 0xFFFFFFFFFFFFLL;
    }
    unint64_t v20 = a1;
    while (1)
    {
      _StringGuts.validateScalarIndex(_:in:)(v20, a1, v13, v12, a4);
      if ((a4 & 0x1000000000000000LL) != 0)
      {
        int v21 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
        _StringGuts.validateScalarIndex(_:)(v20, v12, a4);
        unint64_t v20 = String.UnicodeScalarView._foreignIndex(after:)();
      }

      else
      {
        if ((a4 & 0x2000000000000000LL) != 0)
        {
          unint64_t v56 = v12;
          uint64_t v57 = a4 & 0xFFFFFFFFFFFFFFLL;
          int v21 = _decodeScalar(_:startingAt:)();
          unint64_t v24 = _StringGuts.validateScalarIndex(_:)(v20, v12, a4) >> 16;
          unint64_t v56 = v12;
          uint64_t v57 = a4 & 0xFFFFFFFFFFFFFFLL;
          int v25 = *((unsigned __int8 *)&v56 + v24);
        }

        else
        {
          if ((v12 & 0x1000000000000000LL) == 0) {
            _StringObject.sharedUTF8.getter();
          }
          int v21 = _decodeScalar(_:startingAt:)();
          unint64_t v22 = _StringGuts.validateScalarIndex(_:)(v20, v12, a4);
          uint64_t v23 = v16;
          if ((v12 & 0x1000000000000000LL) == 0) {
            uint64_t v23 = _StringObject.sharedUTF8.getter();
          }
          unint64_t v24 = v22 >> 16;
          int v25 = *(unsigned __int8 *)(v23 + (v22 >> 16));
        }

        int v26 = (char)v25;
        unsigned int v27 = __clz(v25 ^ 0xFF) - 24;
        if (v26 >= 0) {
          LOBYTE(v27) = 1;
        }
        unint64_t v20 = ((v24 + v27) << 16) | 5;
      }

      if (a6 >> 14 <= a5 >> 14) {
        break;
      }
      unint64_t v28 = a5 & 0xC;
      BOOL v29 = (a5 & 1) == 0 || v28 == v18;
      int v30 = v29;
      if (v29)
      {
        unint64_t result = a5;
        if (v28 == v18) {
          unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(a5, a8, a9);
        }
        if (result >> 16 >= v19)
        {
          __break(1u);
LABEL_83:
          __break(1u);
LABEL_84:
          __break(1u);
LABEL_85:
          __break(1u);
          return result;
        }

        if ((result & 1) == 0) {
          _StringGuts.scalarAlignSlow(_:)(result, a8, a9);
        }
      }

      else
      {
        unint64_t result = a5;
        if (a5 >> 16 >= v19) {
          goto LABEL_83;
        }
      }

      if ((a9 & 0x1000000000000000LL) != 0)
      {
        unint64_t result = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
        if ((_DWORD)result != v21) {
          break;
        }
      }

      else
      {
        if ((a9 & 0x2000000000000000LL) != 0)
        {
          unint64_t v56 = a8;
          uint64_t v57 = a9 & 0xFFFFFFFFFFFFFFLL;
        }

        else if ((a8 & 0x1000000000000000LL) == 0)
        {
          _StringObject.sharedUTF8.getter();
        }

        unint64_t result = _decodeScalar(_:startingAt:)();
        if ((_DWORD)result != v21) {
          break;
        }
      }

      if (v30)
      {
        unint64_t v13 = a2;
        if (v28 == v18)
        {
          unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(a5, a8, a9);
          a5 = result;
        }

        unint64_t v12 = a3;
        uint64_t v16 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if (v19 <= a5 >> 16) {
          goto LABEL_84;
        }
        if ((a5 & 1) == 0) {
          a5 = a5 & 0xC | _StringGuts.scalarAlignSlow(_:)(a5, a8, a9) & 0xFFFFFFFFFFFFFFF3LL | 1;
        }
      }

      else
      {
        unint64_t v13 = a2;
        unint64_t v12 = a3;
        uint64_t v16 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if (v19 <= a5 >> 16) {
          goto LABEL_85;
        }
      }

      if ((a9 & 0x1000000000000000LL) != 0)
      {
        a5 = String.UnicodeScalarView._foreignIndex(after:)();
      }

      else
      {
        unint64_t v31 = a5 >> 16;
        if ((a9 & 0x2000000000000000LL) != 0)
        {
          unint64_t v56 = a8;
          uint64_t v57 = a9 & 0xFFFFFFFFFFFFFFLL;
          int v33 = *((unsigned __int8 *)&v56 + v31);
        }

        else
        {
          uint64_t v32 = (a9 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a8 & 0x1000000000000000LL) == 0) {
            uint64_t v32 = _StringObject.sharedUTF8.getter();
          }
          int v33 = *(unsigned __int8 *)(v32 + v31);
        }

        int v34 = (char)v33;
        unsigned int v35 = __clz(v33 ^ 0xFF) - 24;
        if (v34 >= 0) {
          LOBYTE(v35) = 1;
        }
        a5 = ((v31 + v35) << 16) | 5;
      }

      if ((v20 ^ v13) < 0x4000) {
        goto LABEL_3;
      }
    }
  }

  else
  {
    if (v14 < 0x4000)
    {
LABEL_5:
      if (a6 >> 14 >= a5 >> 14) {
        return a5;
      }
      else {
        return 0LL;
      }
    }

    unint64_t v36 = a6 >> 14;
    while (1)
    {
      uint64_t v38 = Substring.subscript.getter();
      uint64_t v40 = v39;
      uint64_t v41 = Substring.index(after:)();
      if (v36 <= a5 >> 14) {
        break;
      }
      uint64_t v42 = v41;
      unint64_t v43 = String.index(after:)();
      if (v36 >= v43 >> 14)
      {
        unint64_t v49 = v43;
        uint64_t v46 = String.subscript.getter();
        uint64_t v48 = v50;
        a5 = v49;
      }

      else
      {
        uint64_t v44 = String.subscript.getter();
        if ((v44 ^ v45) < 0x4000)
        {
          swift_bridgeObjectRelease();
          break;
        }

        a5 = v45;
        uint64_t v46 = Substring.subscript.getter();
        uint64_t v48 = v47;
        swift_bridgeObjectRelease();
      }

      if (v46 == v38 && v48 == v40)
      {
        swift_bridgeObjectRelease_n();
      }

      else
      {
        char v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v37 & 1) == 0) {
          return 0LL;
        }
      }

      if ((v42 ^ a2) < 0x4000) {
        goto LABEL_5;
      }
    }
  }

  swift_bridgeObjectRelease();
  return 0LL;
}

uint64_t specialized RangeReplaceableCollection<>.removeLast()()
{
  uint64_t v1 = v0[1];
  if ((v1 & 0x2000000000000000LL) == 0)
  {
    if ((*v0 & 0xFFFFFFFFFFFFLL) != 0)
    {
LABEL_5:
      String.index(before:)();
      return String.remove(at:)();
    }

    __break(1u);
  }

  if ((v1 & 0xF00000000000000LL) != 0) {
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

unint64_t specialized RangeReplaceableCollection<>.removeLast(_:)(unint64_t result)
{
  if (result)
  {
    if ((result & 0x8000000000000000LL) != 0)
    {
      __break(1u);
    }

    else
    {
      unint64_t v2 = *(void *)(*(void *)v1 + 16LL);
      BOOL v3 = v2 >= result;
      uint64_t result = v2 - result;
      if (v3) {
        return specialized Array.replaceSubrange<A>(_:with:)(result, v2);
      }
    }

    __break(1u);
  }

  return result;
}

uint64_t Processor.clearThrough(_:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 152);
  while (*(void *)(v3 + 16))
  {
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0)
    {
      uint64_t v5 = *(void *)(v3 + 16);
      if (!v5) {
        goto LABEL_8;
      }
    }

    else
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v3);
      uint64_t v3 = result;
      uint64_t v5 = *(void *)(result + 16);
      if (!v5)
      {
LABEL_8:
        __break(1u);
LABEL_9:
        *(void *)(v1 + 152) = v3;
        uint64_t v8 = *(void *)(v1 + 72);
        BOOL v9 = __OFADD__(v8, 1LL);
        uint64_t v10 = v8 + 1;
        if (!v9)
        {
          *(void *)(v1 + 72) = v10;
          return result;
        }

        __break(1u);
        break;
      }
    }

    uint64_t v6 = v5 - 1;
    uint64_t v7 = *(void *)(v3 + 80 * v6 + 32);
    *(void *)(v3 + 16) = v6;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (v7 == a1) {
      goto LABEL_9;
    }
  }

  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SentinelValue()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SentinelValue()
{
  return Hasher._finalize()();
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance SentinelValue()
{
  return 0xD000000000000010LL;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SentinelValue()
{
  return 1LL;
}

uint64_t specialized MutableCollection._setAll(to:)(unint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0) {
    goto LABEL_15;
  }
  for (; v4; uint64_t v3 = result)
  {
    unint64_t v6 = *(void *)(v3 + 16);
    unint64_t v7 = v4 - 1;
    if (v4 - 1 >= v6) {
      unint64_t v7 = *(void *)(v3 + 16);
    }
    if (v7 >= 4)
    {
      unint64_t v9 = v7 + 1;
      uint64_t v10 = v9 & 3;
      if ((v9 & 3) == 0) {
        uint64_t v10 = 4LL;
      }
      unint64_t v8 = v9 - v10;
      int64x2_t v11 = vdupq_n_s64(a1);
      unint64_t v12 = (int64x2_t *)(v3 + 48);
      unint64_t v13 = v8;
      do
      {
        v12[-1] = v11;
        *unint64_t v12 = v11;
        v12 += 2;
        v13 -= 4LL;
      }

      while (v13);
    }

    else
    {
      unint64_t v8 = 0LL;
    }

    while (v8 < v6)
    {
      *(void *)(v3 + 32 + 8 * v8++) = a1;
      if (v4 == v8) {
        goto LABEL_13;
      }
    }

    __break(1u);
LABEL_15:
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v3);
  }

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int64x2_t v11;
  int64x2_t *v12;
  unint64_t v13;
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0) {
    goto LABEL_15;
  }
  for (; v4; uint64_t v3 = result)
  {
    unint64_t v6 = *(void *)(v3 + 16);
    unint64_t v7 = v4 - 1;
    if (v4 - 1 >= v6) {
      unint64_t v7 = *(void *)(v3 + 16);
    }
    if (v7 >= 4)
    {
      unint64_t v9 = v7 + 1;
      uint64_t v10 = v9 & 3;
      if ((v9 & 3) == 0) {
        uint64_t v10 = 4LL;
      }
      unint64_t v8 = v9 - v10;
      int64x2_t v11 = vdupq_n_s64(a1);
      unint64_t v12 = (int64x2_t *)(v3 + 48);
      unint64_t v13 = v8;
      do
      {
        v12[-1] = v11;
        *unint64_t v12 = v11;
        v12 += 2;
        v13 -= 4LL;
      }

      while (v13);
    }

    else
    {
      unint64_t v8 = 0LL;
    }

    while (v8 < v6)
    {
      *(void *)(v3 + 32 + 8 * v8++) = a1;
      if (v4 == v8) {
        goto LABEL_13;
      }
    }

    __break(1u);
LABEL_15:
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v3);
  }

uint64_t Processor.Registers.description.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 16LL);
  if (v2)
  {
    swift_bridgeObjectRetain();
    v3._uint64_t countAndFlagsBits = 8250LL;
    v3._unint64_t object = (void *)0xE200000000000000LL;
    String.append(_:)(v3);
    v4._uint64_t countAndFlagsBits = MEMORY[0x186E17100](v1, MEMORY[0x189617AB0]);
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
    v5._uint64_t countAndFlagsBits = 10LL;
    v5._unint64_t object = (void *)0xE100000000000000LL;
    String.append(_:)(v5);
    uint64_t v2 = 0x73746E656D656C65LL;
  }

  uint64_t v14 = v2;
  uint64_t v6 = v0[6];
  if (*(void *)(v6 + 16))
  {
    swift_bridgeObjectRetain();
    v7._uint64_t countAndFlagsBits = 8250LL;
    v7._unint64_t object = (void *)0xE200000000000000LL;
    String.append(_:)(v7);
    v8._uint64_t countAndFlagsBits = MEMORY[0x186E17100](v6, MEMORY[0x189618740]);
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    v9._uint64_t countAndFlagsBits = 10LL;
    v9._unint64_t object = (void *)0xE100000000000000LL;
    String.append(_:)(v9);
    uint64_t v10 = 1937010281LL;
    unint64_t v11 = 0xE400000000000000LL;
  }

  else
  {
    uint64_t v10 = 0LL;
    unint64_t v11 = 0xE000000000000000LL;
  }

  unint64_t v12 = v11;
  String.append(_:)(*(Swift::String *)&v10);
  swift_bridgeObjectRelease();
  return v14;
}

char *CaptureList.createElements(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v76 = type metadata accessor for CaptureList.Capture();
  uint64_t v75 = *(void *)(v76 - 8);
  MEMORY[0x1895F8858](v76);
  uint64_t v78 = (char *)&v62 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: (CaptureList.Capture, Processor._StoredCapture)));
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v65 = (char *)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CaptureList.Capture, Processor._StoredCapture)?);
  MEMORY[0x1895F8858](v8);
  uint64_t v10 = (char *)&v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CaptureList.Capture, Processor._StoredCapture));
  uint64_t v74 = *(void *)(v77 - 8);
  uint64_t v11 = MEMORY[0x1895F8858](v77);
  uint64_t v71 = (char *)&v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v11);
  uint64_t v64 = (uint64_t)&v62 - v13;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: (CaptureList.Capture, Processor._StoredCapture))?);
  uint64_t v15 = MEMORY[0x1895F8858](v14);
  uint64_t v17 = (uint64_t *)((char *)&v62 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  MEMORY[0x1895F8858](v15);
  unint64_t v73 = (uint64_t *)((char *)&v62 - v18);
  uint64_t v88 = CaptureList.captures.getter();
  uint64_t v89 = 0LL;
  uint64_t v90 = a1;
  uint64_t v91 = 0LL;
  unsigned int v63 = &v81;
  uint64_t v19 = a2 + 64;
  uint64_t v66 = (uint64_t)v84 + 8;
  char v92 = 0;
  swift_bridgeObjectRetain();
  uint64_t v72 = 0LL;
  uint64_t v79 = (char *)MEMORY[0x18961AFE8];
  uint64_t v70 = v5;
  uint64_t v69 = v6;
  unint64_t v68 = v10;
  unint64_t v67 = v17;
LABEL_2:
  specialized Zip2Sequence.Iterator.next()((uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 48))(v10, 1LL, v77) == 1)
  {
    outlined destroy of (range: Range<String.Index>, value: Any?)?( (uint64_t)v10,  &demangling cache variable for type metadata for (CaptureList.Capture, Processor._StoredCapture)?);
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v17, 1LL, 1LL, v5);
  }

  else
  {
    uint64_t v20 = v64;
    outlined init with take of (offset: Int, element: (CaptureList.Capture, Processor._StoredCapture))?( (uint64_t)v10,  v64,  &demangling cache variable for type metadata for (CaptureList.Capture, Processor._StoredCapture));
    uint64_t v21 = (uint64_t)&v65[*(int *)(v5 + 48)];
    uint64_t result = (char *)outlined init with take of (offset: Int, element: (CaptureList.Capture, Processor._StoredCapture))?( v20,  v21,  &demangling cache variable for type metadata for (CaptureList.Capture, Processor._StoredCapture));
    uint64_t v23 = v72 + 1;
    if (__OFADD__(v72, 1LL))
    {
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }

    uint64_t v24 = (uint64_t)v17 + *(int *)(v5 + 48);
    void *v17 = v72;
    outlined init with take of (offset: Int, element: (CaptureList.Capture, Processor._StoredCapture))?( v21,  v24,  &demangling cache variable for type metadata for (CaptureList.Capture, Processor._StoredCapture));
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v17, 0LL, 1LL, v5);
    uint64_t v72 = v23;
  }

  int v25 = v73;
  outlined init with take of (offset: Int, element: (CaptureList.Capture, Processor._StoredCapture))?( (uint64_t)v17,  (uint64_t)v73,  &demangling cache variable for type metadata for (offset: Int, element: (CaptureList.Capture, Processor._StoredCapture))?);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v6 + 48))(v25, 1LL, v5) == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v79;
  }

  uint64_t v26 = *v25;
  uint64_t v27 = *(int *)(v77 + 48);
  unint64_t v28 = (char *)v25 + *(int *)(v5 + 48) + v27;
  BOOL v29 = v71;
  uint64_t v30 = (uint64_t)&v71[v27];
  unint64_t v31 = *(void (**)(char *))(v75 + 32);
  uint64_t v32 = v76;
  v31(v71);
  __int128 v33 = *((_OWORD *)v28 + 3);
  *(_OWORD *)(v30 + 32) = *((_OWORD *)v28 + 2);
  *(_OWORD *)(v30 + 48) = v33;
  *(_BYTE *)(v30 + 64) = v28[64];
  __int128 v34 = *((_OWORD *)v28 + 1);
  *(_OWORD *)uint64_t v30 = *(_OWORD *)v28;
  *(_OWORD *)(v30 + 16) = v34;
  ((void (*)(char *, char *, uint64_t))v31)(v78, v29, v32);
  uint64_t v35 = CaptureList.Capture.optionalDepth.getter();
  if ((*(_BYTE *)(v30 + 16) & 1) != 0)
  {
    __int128 v81 = 0u;
    __int128 v80 = 0u;
    uint64_t v82 = 0LL;
    uint64_t v83 = 1LL;
  }

  else
  {
    __int128 v80 = *(_OWORD *)v30;
    outlined init with copy of Any?(v30 + 24, (uint64_t)v63);
  }

  outlined destroy of Processor._StoredCapture(v30);
  uint64_t result = (char *)CaptureList.Capture.name.getter();
  unint64_t v36 = result;
  uint64_t v38 = v37;
  int64_t v39 = 0LL;
  uint64_t v40 = 1LL << *(_BYTE *)(a2 + 32);
  if (v40 < 64) {
    uint64_t v41 = ~(-1LL << v40);
  }
  else {
    uint64_t v41 = -1LL;
  }
  unint64_t v42 = v41 & *(void *)(a2 + 64);
  int64_t v43 = (unint64_t)(v40 + 63) >> 6;
  while (v42)
  {
    unint64_t v44 = __clz(__rbit64(v42));
    v42 &= v42 - 1;
    unint64_t v45 = v44 | (v39 << 6);
LABEL_15:
    if (*(void *)(*(void *)(a2 + 56) + 8 * v45) == v26)
    {
      uint64_t v49 = v35;
      char v50 = 0;
      uint64_t v51 = *(void *)(*(void *)(a2 + 48) + 8 * v45);
LABEL_37:
      unint64_t v52 = v78;
      char v53 = CaptureList.Capture.visibleInTypedOutput.getter();
      (*(void (**)(char *, uint64_t))(v75 + 8))(v52, v76);
      *(void *)&v84[0] = v49;
      outlined init with take of (offset: Int, element: (CaptureList.Capture, Processor._StoredCapture))?( (uint64_t)&v80,  v66,  &demangling cache variable for type metadata for (range: Range<String.Index>, value: Any?)?);
      *((void *)&v85 + 1) = v36;
      *(void *)&__int128 v86 = v38;
      *((void *)&v86 + 1) = v51;
      LOBYTE(v87) = v50;
      HIBYTE(v87) = v53 & 1;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v79 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v79 + 2) + 1LL,  1,  v79);
      }
      uint64_t v5 = v70;
      uint64_t v6 = v69;
      uint64_t v10 = v68;
      uint64_t v17 = v67;
      unint64_t v55 = *((void *)v79 + 2);
      unint64_t v54 = *((void *)v79 + 3);
      if (v55 >= v54 >> 1) {
        uint64_t v79 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v54 > 1),  v55 + 1,  1,  v79);
      }
      unint64_t v56 = v79;
      *((void *)v79 + 2) = v55 + 1;
      uint64_t v57 = &v56[88 * v55];
      __int128 v58 = v84[1];
      *((_OWORD *)v57 + 2) = v84[0];
      *((_OWORD *)v57 + 3) = v58;
      __int128 v59 = v84[2];
      __int128 v60 = v85;
      __int128 v61 = v86;
      *((_WORD *)v57 + 56) = v87;
      *((_OWORD *)v57 + 5) = v60;
      *((_OWORD *)v57 + 6) = v61;
      *((_OWORD *)v57 + 4) = v59;
      goto LABEL_2;
    }
  }

  int64_t v46 = v39 + 1;
  if (__OFADD__(v39, 1LL))
  {
    __break(1u);
    goto LABEL_44;
  }

  if (v46 >= v43)
  {
LABEL_36:
    uint64_t v49 = v35;
    uint64_t v51 = 0LL;
    char v50 = 1;
    goto LABEL_37;
  }

  unint64_t v47 = *(void *)(v19 + 8 * v46);
  ++v39;
  if (v47) {
    goto LABEL_34;
  }
  int64_t v39 = v46 + 1;
  if (v46 + 1 >= v43) {
    goto LABEL_36;
  }
  unint64_t v47 = *(void *)(v19 + 8 * v39);
  if (v47) {
    goto LABEL_34;
  }
  int64_t v39 = v46 + 2;
  if (v46 + 2 >= v43) {
    goto LABEL_36;
  }
  unint64_t v47 = *(void *)(v19 + 8 * v39);
  if (v47) {
    goto LABEL_34;
  }
  int64_t v39 = v46 + 3;
  if (v46 + 3 >= v43) {
    goto LABEL_36;
  }
  unint64_t v47 = *(void *)(v19 + 8 * v39);
  if (v47) {
    goto LABEL_34;
  }
  int64_t v39 = v46 + 4;
  if (v46 + 4 >= v43) {
    goto LABEL_36;
  }
  unint64_t v47 = *(void *)(v19 + 8 * v39);
  if (v47)
  {
LABEL_34:
    unint64_t v42 = (v47 - 1) & v47;
    unint64_t v45 = __clz(__rbit64(v47)) + (v39 << 6);
    goto LABEL_15;
  }

  int64_t v48 = v46 + 5;
  if (v48 >= v43) {
    goto LABEL_36;
  }
  unint64_t v47 = *(void *)(v19 + 8 * v48);
  if (v47)
  {
    int64_t v39 = v48;
    goto LABEL_34;
  }

  while (1)
  {
    int64_t v39 = v48 + 1;
    if (__OFADD__(v48, 1LL)) {
      break;
    }
    if (v39 >= v43) {
      goto LABEL_36;
    }
    unint64_t v47 = *(void *)(v19 + 8 * v39);
    ++v48;
    if (v47) {
      goto LABEL_34;
    }
  }

unint64_t Instruction.description.getter(unint64_t a1)
{
  switch(specialized Instruction.OpCode.init(rawValue:)(HIBYTE(a1)))
  {
    case 1u:
      unint64_t v60 = 0LL;
      _StringGuts.grow(_:)(16LL);
      _print_unlocked<A, B>(_:_:)();
      v2._uint64_t countAndFlagsBits = 32LL;
      v2._unint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v2);
      v3._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v3);
      swift_bridgeObjectRelease();
      v4._uint64_t countAndFlagsBits = 0x5B746E69203E2D20LL;
      v4._unint64_t object = (void *)0xE800000000000000LL;
      String.append(_:)(v4);
      goto LABEL_51;
    case 2u:
      unint64_t v60 = 0LL;
      _print_unlocked<A, B>(_:_:)();
      v5._uint64_t countAndFlagsBits = 0x5B736F70203E2D20LL;
      v5._unint64_t object = (void *)0xE800000000000000LL;
      String.append(_:)(v5);
      goto LABEL_51;
    case 4u:
      unint64_t v60 = 0LL;
      _print_unlocked<A, B>(_:_:)();
      v6._uint64_t countAndFlagsBits = 32LL;
      v6._unint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v6);
      goto LABEL_32;
    case 5u:
      unint64_t v60 = 0LL;
      _print_unlocked<A, B>(_:_:)();
      v7._uint64_t countAndFlagsBits = 32LL;
      v7._unint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v7);
      v8._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v8);
      swift_bridgeObjectRelease();
      v9._uint64_t countAndFlagsBits = 35LL;
      v9._unint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v9);
      swift_bridgeObjectRelease();
      uint64_t v10 = 1953392928LL;
      goto LABEL_8;
    case 6u:
      unint64_t v60 = 0LL;
      _print_unlocked<A, B>(_:_:)();
      v11._uint64_t countAndFlagsBits = 32LL;
      v11._unint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v11);
      v12._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v12);
      swift_bridgeObjectRelease();
      v13._uint64_t countAndFlagsBits = 35LL;
      v13._unint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v13);
      swift_bridgeObjectRelease();
      uint64_t v10 = 1936683040LL;
LABEL_8:
      v14._uint64_t countAndFlagsBits = v10 & 0xFFFF0000FFFFFFFFLL | 0x5B00000000LL;
      v14._unint64_t object = (void *)0xE500000000000000LL;
      String.append(_:)(v14);
      goto LABEL_51;
    case 7u:
      unint64_t v60 = 0LL;
      _print_unlocked<A, B>(_:_:)();
      v15._uint64_t countAndFlagsBits = 32LL;
      v15._unint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v15);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (isScalarDistance: Bool, TypedInt<_Distance>));
      goto LABEL_25;
    case 8u:
      if ((unsigned __int16)a1 == 1LL)
      {
        _StringGuts.grow(_:)(29LL);
        swift_bridgeObjectRelease();
        unint64_t v16 = 0xD00000000000001ALL;
      }

      else
      {
        unint64_t v16 = 0x686320686374616DLL;
      }

      goto LABEL_50;
    case 9u:
      if ((a1 & 0x40000000000000LL) != 0) {
        uint64_t v17 = 1702195828LL;
      }
      else {
        uint64_t v17 = 0x65736C6166LL;
      }
      if ((a1 & 0x40000000000000LL) != 0) {
        uint64_t v18 = (void *)0xE400000000000000LL;
      }
      else {
        uint64_t v18 = (void *)0xE500000000000000LL;
      }
      unint64_t v60 = 0LL;
      if ((a1 & 0x80000000000000LL) != 0)
      {
        _StringGuts.grow(_:)(49LL);
        unint64_t v19 = 0xD00000000000001CLL;
        unint64_t v20 = 0x8000000182DA3190LL;
      }

      else
      {
        _StringGuts.grow(_:)(34LL);
        unint64_t v19 = 0x616353686374616DLL;
        unint64_t v20 = 0xED0000272072616CLL;
      }

      String.append(_:)(*(Swift::String *)&v19);
      Unicode.Scalar.write<A>(to:)();
      v52._unint64_t object = (void *)0x8000000182DA3170LL;
      v52._uint64_t countAndFlagsBits = 0xD000000000000011LL;
      String.append(_:)(v52);
      v53._uint64_t countAndFlagsBits = v17;
      v53._unint64_t object = v18;
      String.append(_:)(v53);
      swift_bridgeObjectRelease();
      return v60;
    case 0xAu:
      if ((unsigned __int16)a1 == 1LL)
      {
        _StringGuts.grow(_:)(28LL);
        swift_bridgeObjectRelease();
        unint64_t v16 = 0xD000000000000019LL;
      }

      else
      {
        _StringGuts.grow(_:)(22LL);
        swift_bridgeObjectRelease();
        unint64_t v16 = 0xD000000000000013LL;
      }

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance Instruction()
{
  return Instruction.description.getter(*v0);
}

uint64_t Executor.firstMatch<A>(_:subjectBounds:searchBounds:graphemeSemantic:)@<X0>( unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X8>)
{
  LODWORD(v58) = a7;
  unint64_t v56 = (__int128 *)a4;
  uint64_t v57 = a6;
  uint64_t v14 = type metadata accessor for MEProgram(0LL);
  MEMORY[0x1895F8858](v14);
  unint64_t v16 = (uint64_t *)((char *)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  outlined init with copy of MEProgram(v8, (uint64_t)v16, v17);
  swift_bridgeObjectRetain();
  uint64_t v18 = v16;
  unint64_t v19 = a2;
  uint64_t v20 = a3;
  unint64_t v21 = v57;
  specialized Processor.init(program:input:subjectBounds:searchBounds:matchMode:isTracingEnabled:shouldMeasureMetrics:)( v18,  a1,  a2,  v20,  (uint64_t)v56,  a5,  v57,  1,  (uint64_t)&v74);
  unint64_t v22 = v87;
  Executor._match<A>(_:from:using:)(a1, a2, a5, (uint64_t)&v74, (uint64_t)&v70);
  if (v22)
  {
    __int128 v67 = v84;
    __int128 v68 = v85;
    __int128 v69 = v86;
    __int128 v63 = v80;
    __int128 v64 = v81;
    __int128 v65 = v82;
    __int128 v66 = v83;
    v60[1] = v76;
    v60[2] = v77;
    __int128 v61 = v78;
    __int128 v62 = v79;
    __int128 v59 = v74;
    v60[0] = v75;
    return outlined release of Processor((uint64_t)&v59);
  }

  unint64_t v87 = v21 >> 14;
  uint64_t v47 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v48 = a2 & 0xFFFFFFFFFFFFFFLL;
  Swift::String v55 = &v83;
  unint64_t v56 = &v82;
  Swift::String v49 = &v84;
  Swift::String v50 = (char *)&v83 + 8;
  uint64_t v52 = a2;
  uint64_t v53 = v8;
  uint64_t v54 = a8;
  unint64_t v51 = a1;
  while (1)
  {
    uint64_t v24 = v71;
    if (v71)
    {
      uint64_t v44 = v73;
      __int128 v58 = v72;
      uint64_t v45 = v70;
      __int128 v67 = v84;
      __int128 v68 = v85;
      __int128 v69 = v86;
      __int128 v63 = v80;
      __int128 v64 = v81;
      __int128 v65 = v82;
      __int128 v66 = v83;
      v60[1] = v76;
      v60[2] = v77;
      __int128 v61 = v78;
      __int128 v62 = v79;
      __int128 v59 = v74;
      v60[0] = v75;
      uint64_t result = outlined release of Processor((uint64_t)&v59);
      *(void *)a8 = v45;
      *(void *)(a8 + 8) = v24;
      *(_OWORD *)(a8 + 16) = v58;
      *(void *)(a8 + 32) = v44;
      return result;
    }

    if (v87 <= a5 >> 14)
    {
      __int128 v67 = v84;
      __int128 v68 = v85;
      __int128 v69 = v86;
      __int128 v63 = v80;
      __int128 v64 = v81;
      __int128 v65 = v82;
      __int128 v66 = v83;
      v60[1] = v76;
      v60[2] = v77;
      __int128 v61 = v78;
      __int128 v62 = v79;
      __int128 v59 = v74;
      v60[0] = v75;
      uint64_t result = outlined release of Processor((uint64_t)&v59);
      *(_OWORD *)a8 = 0u;
      *(_OWORD *)(a8 + 16) = 0u;
      *(void *)(a8 + 32) = 0LL;
      return result;
    }

    if ((v58 & 1) != 0)
    {
      uint64_t v25 = v57;
      uint64_t v26 = String.index(_:offsetBy:limitedBy:)();
      a5 = (v27 & 1) != 0 ? v25 : v26;
    }

    else
    {
      unint64_t v28 = _StringGuts.validateScalarIndex(_:)(a5, a1, v19);
      if ((v19 & 0x1000000000000000LL) != 0)
      {
        a5 = String.UnicodeScalarView._foreignIndex(after:)();
      }

      else
      {
        unint64_t v29 = v28 >> 16;
        if ((v19 & 0x2000000000000000LL) != 0)
        {
          *(void *)&__int128 v59 = a1;
          *((void *)&v59 + 1) = v48;
          int v31 = *((unsigned __int8 *)&v60[-1] + v29);
        }

        else
        {
          uint64_t v30 = v47;
          if ((a1 & 0x1000000000000000LL) == 0) {
            uint64_t v30 = _StringObject.sharedUTF8.getter();
          }
          int v31 = *(unsigned __int8 *)(v30 + v29);
        }

        int v32 = (char)v31;
        unsigned int v33 = __clz(v31 ^ 0xFF) - 24;
        if (v32 >= 0) {
          LOBYTE(v33) = 1;
        }
        a5 = ((v29 + v33) << 16) | 5;
      }
    }

    __int128 v78 = a5;
    specialized MutableCollection._setAll(to:)(0LL);
    *((void *)&v60[0] + 1) = &type metadata for SentinelValue;
    uint64_t v34 = *((void *)&v82 + 1);
    uint64_t v35 = *(void *)(*((void *)&v82 + 1) + 16LL);
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0) {
      break;
    }
    *((void *)&v82 + 1) = v34;
    if (v35) {
      goto LABEL_22;
    }
LABEL_25:
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v59);
    specialized MutableCollection._setAll(to:)(0xFuLL);
    uint64_t v38 = *((void *)&v83 + 1);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      specialized Array.replaceSubrange<A>(_:with:)(0LL, *(void *)(v38 + 16));
    }

    else
    {
      *((void *)&v83 + 1) = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)( 0LL,  *(void *)(v38 + 24) >> 1);
      swift_bridgeObjectRelease();
    }

    uint64_t v39 = v84;
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      specialized Array.replaceSubrange<A>(_:with:)(0LL, *(void *)(v39 + 16));
    }

    else
    {
      *(void *)&__int128 v84 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)( 0LL,  *(void *)(v39 + 24) >> 1);
      swift_bridgeObjectRelease();
    }

    uint64_t v40 = *((void *)&v84 + 1);
    uint64_t v41 = *(void *)(*((void *)&v84 + 1) + 16LL);
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0)
    {
      *((void *)&v84 + 1) = v40;
      if (v41) {
        goto LABEL_33;
      }
    }

    else
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v40);
      uint64_t v40 = result;
      *((void *)&v84 + 1) = result;
      if (v41)
      {
LABEL_33:
        unint64_t v42 = 0LL;
        uint64_t v43 = 32LL;
        do
        {
          __int128 v59 = 0uLL;
          LOBYTE(v60[0]) = 1;
          *(_OWORD *)((char *)v60 + 8) = 0u;
          *(_OWORD *)((char *)&v60[1] + 8) = 0u;
          *((void *)&v60[2] + 1) = 0LL;
          LOBYTE(v61) = 1;
          *((void *)&v84 + 1) = v40;
          if (v42 >= *(void *)(v40 + 16)) {
            goto LABEL_45;
          }
          ++v42;
          uint64_t result = outlined assign with take of Processor._StoredCapture(&v59, v40 + v43);
          uint64_t v40 = *((void *)&v84 + 1);
          v43 += 72LL;
        }

        while (v41 != v42);
      }
    }

    BYTE1(v86) = 0;
    MEMORY[0x186E17880](*((void *)&v86 + 1));
    *((void *)&v86 + 1) = 0LL;
    a1 = v51;
    unint64_t v19 = v52;
    Executor._match<A>(_:from:using:)(v51, v52, a5, (uint64_t)&v74, (uint64_t)&v70);
    a8 = v54;
  }

  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v34);
  uint64_t v34 = result;
  *((void *)&v82 + 1) = result;
  if (!v35) {
    goto LABEL_25;
  }
LABEL_22:
  unint64_t v36 = 0LL;
  uint64_t v37 = 32LL;
  while (1)
  {
    *((void *)&v82 + 1) = v34;
    if (v36 >= *(void *)(v34 + 16)) {
      break;
    }
    ++v36;
    uint64_t result = (uint64_t)__swift_assign_boxed_opaque_existential_0((uint64_t *)(v34 + v37), (uint64_t *)&v59);
    uint64_t v34 = *((void *)&v82 + 1);
    v37 += 32LL;
    if (v35 == v36) {
      goto LABEL_25;
    }
  }

  __break(1u);
LABEL_45:
  __break(1u);
  return result;
}

void Executor._match<A>(_:from:using:)( uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7 = v5;
  unint64_t v35 = a3;
  uint64_t v34 = a1;
  uint64_t v11 = type metadata accessor for CaptureList();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1895F8858](v11);
  uint64_t v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for Engine(0LL);
  MEMORY[0x1895F8858](v15);
  uint64_t v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (i == 1)
  {
    uint64_t v19 = *(void *)(a4 + 200);
    if (v19)
    {
      MEMORY[0x186E1788C](v19);
      swift_willThrow();
    }

    else
    {
      *(void *)(a5 + 32) = 0LL;
      *(_OWORD *)a5 = 0u;
      *(_OWORD *)(a5 + 16) = 0u;
    }
  }

  else
  {
    uint64_t v30 = v11;
    uint64_t v32 = a2;
    uint64_t v33 = v6;
    uint64_t v20 = v7;
    unint64_t v21 = *(void *)(a4 + 64);
    uint64_t v22 = *(void *)(a4 + 168);
    outlined init with copy of MEProgram(v20, (uint64_t)v17, type metadata accessor for Engine);
    uint64_t v23 = type metadata accessor for MEProgram(0LL);
    uint64_t v24 = *(void *)&v17[*(int *)(v23 + 60)];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined destroy of MEProgram((uint64_t)v17, type metadata accessor for MEProgram);
    unint64_t v31 = v21;
    if (v21 >> 14 < v35 >> 14)
    {
      __break(1u);
    }

    else
    {
      unint64_t v25 = v35;
      outlined init with copy of MEProgram(v20, (uint64_t)v17, type metadata accessor for Engine);
      uint64_t v26 = v30;
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v14, &v17[*(int *)(v23 + 56)], v30);
      outlined destroy of MEProgram((uint64_t)v17, type metadata accessor for MEProgram);
      char v27 = CaptureList.createElements(_:)(v22, v24);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v26);
      uint64_t v28 = v32;
      *(void *)a5 = v34;
      *(void *)(a5 + 8) = v28;
      *(void *)(a5 + 16) = v27;
      *(void *)(a5 + 24) = v25;
      *(void *)(a5 + 32) = v31;
      swift_bridgeObjectRetain();
    }
  }

uint64_t Executor.match<A>(_:in:_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  char v12 = a5 & 1;
  uint64_t v13 = type metadata accessor for MEProgram(0LL);
  MEMORY[0x1895F8858](v13);
  uint64_t v15 = (uint64_t *)((char *)v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  outlined init with copy of MEProgram(v6, (uint64_t)v15, v16);
  swift_bridgeObjectRetain();
  specialized Processor.init(program:input:subjectBounds:searchBounds:matchMode:isTracingEnabled:shouldMeasureMetrics:)( v15,  a1,  a2,  a3,  a4,  a3,  a4,  v12,  (uint64_t)v19);
  Executor._match<A>(_:from:using:)(a1, a2, a3, (uint64_t)v19, a6);
  v18[10] = v19[10];
  v18[11] = v19[11];
  v18[12] = v19[12];
  v18[6] = v19[6];
  v18[7] = v19[7];
  v18[8] = v19[8];
  v18[9] = v19[9];
  v18[2] = v19[2];
  int8x16_t v18[3] = v19[3];
  v18[4] = v19[4];
  v18[5] = v19[5];
  v18[0] = v19[0];
  v18[1] = v19[1];
  return outlined release of Processor((uint64_t)v18);
}

uint64_t Regex._literalPattern.getter()
{
  uint64_t v1 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MatchingOptions.Representation>);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_182D9CC00;
  *(_DWORD *)(v2 + 32) = 81984;
  uint64_t v9 = MEMORY[0x18961AFE8];
  LiteralPrinter.outputNode(_:)(*(void *)(v1 + 24));
  uint64_t v3 = *(void *)(v9 + 16);
  MEMORY[0x186E16F80](v3);
  if (v3)
  {
    Swift::String v4 = (_BYTE *)(v9 + 48);
    while ((*v4 & 1) == 0)
    {
      uint64_t v6 = *((void *)v4 - 2);
      uint64_t v5 = (void *)*((void *)v4 - 1);
      swift_bridgeObjectRetain();
      v7._uint64_t countAndFlagsBits = v6;
      v7._unint64_t object = v5;
      String.append(_:)(v7);
      outlined consume of PatternSegment(v6, (uint64_t)v5, 0);
      v4 += 24;
      if (!--v3) {
        goto LABEL_7;
      }
    }

    swift_bridgeObjectRelease();
  }

void LiteralPrinter.outputNode(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DSLTree.Atom(0LL);
  MEMORY[0x1895F8858](v2);
  uint64_t v3 = type metadata accessor for DSLTree.QuantificationKind(0LL);
  MEMORY[0x1895F8858](v3);
  uint64_t v4 = type metadata accessor for DSLTree._AST.QuantificationAmount(0LL);
  MEMORY[0x1895F8858](v4);
  uint64_t v5 = type metadata accessor for AST.Group.Kind();
  MEMORY[0x1895F8858](v5);
  uint64_t v6 = type metadata accessor for AST.MatchingOptionSequence();
  MEMORY[0x1895F8858](v6);
  uint64_t v7 = type metadata accessor for DSLTree._AST.GroupKind(0LL);
  MEMORY[0x1895F8858](v7);
  __asm { BR              X10 }

uint64_t sub_182D57A34()
{
  uint64_t v2 = *(void *)(v0 + 8);
  swift_retain();
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v2 + 16) + 1LL,  1,  (char *)v2,  &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
    uint64_t v2 = result;
  }

  unint64_t v5 = *(void *)(v2 + 16);
  unint64_t v4 = *(void *)(v2 + 24);
  if (v5 >= v4 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v4 > 1),  v5 + 1,  1,  (char *)v2,  &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
    uint64_t v2 = result;
  }

  *(void *)(v2 + 16) = v5 + 1;
  unint64_t v6 = v2 + 24 * v5;
  *(void *)(v6 + 32) = v1;
  *(void *)(v6 + 40) = 0LL;
  *(_BYTE *)(v6 + 48) = 1;
  *(void *)(v0 + 8) = v2;
  return result;
}

double LiteralPrinter.outputCapture(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  if (a2)
  {
    String.append(_:)(*(Swift::String *)&a1);
    v6._uint64_t countAndFlagsBits = 62LL;
    v6._unint64_t object = (void *)0xE100000000000000LL;
    String.append(_:)(v6);
    uint64_t v7 = *(char **)(v3 + 8);
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v7 + 2) + 1LL,  1,  v7,  &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
    }
    unint64_t v9 = *((void *)v7 + 2);
    unint64_t v8 = *((void *)v7 + 3);
    if (v9 >= v8 >> 1) {
      uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v8 > 1),  v9 + 1,  1,  v7,  &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
    }
    *((void *)v7 + 2) = v9 + 1;
    uint64_t v10 = &v7[24 * v9];
    *((void *)v10 + 4) = 3948328LL;
    *((void *)v10 + 5) = 0xE300000000000000LL;
    v10[48] = 0;
    swift_bridgeObjectRelease();
    *(void *)(v3 + 8) = v7;
  }

  else
  {
    uint64_t v11 = *(char **)(v3 + 8);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v11 + 2) + 1LL,  1,  v11,  &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
    }
    unint64_t v13 = *((void *)v11 + 2);
    unint64_t v12 = *((void *)v11 + 3);
    if (v13 >= v12 >> 1) {
      uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v12 > 1),  v13 + 1,  1,  v11,  &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
    }
    *((void *)v11 + 2) = v13 + 1;
    uint64_t v14 = &v11[24 * v13];
    *((_OWORD *)v14 + 2) = xmmword_182D9CC90;
    v14[48] = 0;
    *(void *)(v4 + 8) = v11;
  }

  LiteralPrinter.outputNode(_:)(a3);
  uint64_t v15 = *(char **)(v4 + 8);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v15 + 2) + 1LL,  1,  v15,  &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
  }
  unint64_t v17 = *((void *)v15 + 2);
  unint64_t v16 = *((void *)v15 + 3);
  if (v17 >= v16 >> 1) {
    uint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v16 > 1),  v17 + 1,  1,  v15,  &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
  }
  *((void *)v15 + 2) = v17 + 1;
  *(void *)&double result = 41LL;
  uint64_t v19 = &v15[24 * v17];
  *((_OWORD *)v19 + 2) = xmmword_182D9CC70;
  v19[48] = 0;
  *(void *)(v4 + 8) = v15;
  return result;
}

uint64_t DSLTree._AST.GroupKind._patternString.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for AST.MatchingOptionSequence();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  unint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<String>);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  unint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for AST.Group.Kind();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1895F8858](v10);
  unint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v1, v10);
  int v14 = (*(uint64_t (**)(char *, uint64_t))(v11 + 88))(v13, v10);
  if (v14 == *MEMORY[0x18961C868])
  {
    (*(void (**)(char *, uint64_t))(v11 + 96))(v13, v10);
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v13, v6);
    uint64_t v23 = 3948328LL;
    unint64_t v24 = 0xE300000000000000LL;
    MEMORY[0x186E16DDC](&v22, v6);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    v15._uint64_t countAndFlagsBits = 62LL;
    v15._unint64_t object = (void *)0xE100000000000000LL;
    String.append(_:)(v15);
    return v23;
  }

  int v17 = v14;
  if (v14 == *MEMORY[0x18961C878])
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    return 0LL;
  }

  else
  {
    if (v14 == *MEMORY[0x18961C8B0])
    {
      (*(void (**)(char *, uint64_t))(v11 + 96))(v13, v10);
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v13, v2);
      uint64_t v18 = AST.MatchingOptionSequence._patternString.getter();
      unint64_t v20 = v19;
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      uint64_t v23 = v18;
      unint64_t v24 = v20;
      swift_bridgeObjectRetain();
      v21._uint64_t countAndFlagsBits = 58LL;
      v21._unint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v21);
      swift_bridgeObjectRelease();
      return v23;
    }

    if (v14 == *MEMORY[0x18961C8C0])
    {
      return 40LL;
    }

    else
    {
      uint64_t result = 2178856LL;
      if (v17 == *MEMORY[0x18961C860])
      {
        return 3817256LL;
      }

      else if (v17 == *MEMORY[0x18961C880])
      {
        return 8142632LL;
      }

      else if (v17 == *MEMORY[0x18961C890])
      {
        return 4079400LL;
      }

      else if (v17 == *MEMORY[0x18961C8C8])
      {
        return 4013864LL;
      }

      else if (v17 != *MEMORY[0x18961C888])
      {
        if (v17 == *MEMORY[0x18961C8A0])
        {
          return 2768680LL;
        }

        else if (v17 == *MEMORY[0x18961C858])
        {
          return 1027358504LL;
        }

        else if (v17 == *MEMORY[0x18961C898])
        {
          return 557596456LL;
        }

        else if (v17 == *MEMORY[0x18961C8A8])
        {
          return 708591400LL;
        }

        else if (v17 == *MEMORY[0x18961C8D0])
        {
          return 0x3A72732A28LL;
        }

        else if (v17 == *MEMORY[0x18961C870])
        {
          return 0x3A7273612A28LL;
        }

        else
        {
          uint64_t result = _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
        }
      }
    }
  }

  return result;
}

uint64_t LiteralPrinter.outputQuantification(_:_:_:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v80 = a2;
  uint64_t v6 = type metadata accessor for AST.Atom.Number();
  uint64_t v79 = *(void *)(v6 - 8);
  uint64_t v7 = MEMORY[0x1895F8858](v6);
  __int128 v77 = (char *)&v74 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = MEMORY[0x1895F8858](v7);
  __int128 v76 = (char *)&v74 - v10;
  uint64_t v11 = MEMORY[0x1895F8858](v9);
  __int128 v78 = (char *)&v74 - v12;
  uint64_t v13 = MEMORY[0x1895F8858](v11);
  Swift::String v15 = (char *)&v74 - v14;
  MEMORY[0x1895F8858](v13);
  int v17 = (char *)&v74 - v16;
  uint64_t v18 = type metadata accessor for AST.Quantification.Amount();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x1895F8858](v18);
  Swift::String v21 = (char *)&v74 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Swift::String v22 = (char *)v3[1];
  if (LiteralPrinter.requiresGrouping(_:)(a3, *v3))
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v74 = a1;
    uint64_t v75 = v6;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      Swift::String v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v22 + 2) + 1LL,  1,  v22,  &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
    }
    unint64_t v25 = *((void *)v22 + 2);
    unint64_t v24 = *((void *)v22 + 3);
    if (v25 >= v24 >> 1) {
      Swift::String v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v24 > 1),  v25 + 1,  1,  v22,  &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
    }
    *((void *)v22 + 2) = v25 + 1;
    uint64_t v26 = &v22[24 * v25];
    *((_OWORD *)v26 + 2) = xmmword_182D9CCA0;
    v26[48] = 0;
    v3[1] = (uint64_t)v22;
    char v27 = v3;
    LiteralPrinter.outputNode(_:)(a3);
    uint64_t v28 = (char *)v3[1];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v28 + 2) + 1LL,  1,  v28,  &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
    }
    unint64_t v30 = *((void *)v28 + 2);
    unint64_t v29 = *((void *)v28 + 3);
    if (v30 >= v29 >> 1) {
      uint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v29 > 1),  v30 + 1,  1,  v28,  &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
    }
    *((void *)v28 + 2) = v30 + 1;
    unint64_t v31 = &v28[24 * v30];
    *((_OWORD *)v31 + 2) = xmmword_182D9CC70;
    v31[48] = 0;
    v27[1] = (uint64_t)v28;
    a1 = v74;
    uint64_t v6 = v75;
  }

  else
  {
    LiteralPrinter.outputNode(_:)(a3);
    char v27 = v3;
  }

  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v21, a1, v18);
  int v32 = (*(uint64_t (**)(char *, uint64_t))(v19 + 88))(v21, v18);
  if (v32 == *MEMORY[0x18961C3E8])
  {
    (*(void (**)(char *, uint64_t))(v19 + 96))(v21, v18);
    uint64_t v33 = v79;
    (*(void (**)(char *, char *, uint64_t))(v79 + 32))(v17, v21, v6);
    uint64_t v82 = 123LL;
    unint64_t v83 = 0xE100000000000000LL;
    uint64_t v34 = AST.Atom.Number.value.getter();
    if ((v35 & 1) == 0)
    {
      uint64_t v36 = v34;
      (*(void (**)(char *, uint64_t))(v33 + 8))(v17, v6);
LABEL_15:
      uint64_t v81 = v36;
      v37._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v37);
      swift_bridgeObjectRelease();
      uint64_t v38 = 125LL;
      unint64_t v39 = 0xE100000000000000LL;
LABEL_19:
      String.append(_:)(*(Swift::String *)&v38);
      uint64_t v46 = v82;
      unint64_t v45 = v83;
      uint64_t v47 = (char *)v27[1];
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v47 + 2) + 1LL,  1,  v47,  &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
      }
      unint64_t v49 = *((void *)v47 + 2);
      unint64_t v48 = *((void *)v47 + 3);
      if (v49 >= v48 >> 1) {
        uint64_t v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v48 > 1),  v49 + 1,  1,  v47,  &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
      }
      *((void *)v47 + 2) = v49 + 1;
      Swift::String v50 = &v47[24 * v49];
      *((void *)v50 + 4) = v46;
      *((void *)v50 + 5) = v45;
      v50[48] = 0;
      swift_bridgeObjectRelease();
      goto LABEL_24;
    }

    __break(1u);
    goto LABEL_52;
  }

  if (v32 == *MEMORY[0x18961C3F0])
  {
    (*(void (**)(char *, uint64_t))(v19 + 96))(v21, v18);
    uint64_t v40 = v79;
    (*(void (**)(char *, char *, uint64_t))(v79 + 32))(v15, v21, v6);
    uint64_t v82 = 123LL;
    unint64_t v83 = 0xE100000000000000LL;
    uint64_t v41 = AST.Atom.Number.value.getter();
    if ((v42 & 1) == 0)
    {
      uint64_t v43 = v41;
      (*(void (**)(char *, uint64_t))(v40 + 8))(v15, v6);
      uint64_t v81 = v43;
      v44._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v44);
      swift_bridgeObjectRelease();
      uint64_t v38 = 32044LL;
      unint64_t v39 = 0xE200000000000000LL;
      goto LABEL_19;
    }

LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }

  if (v32 == *MEMORY[0x18961C3D8])
  {
    (*(void (**)(char *, uint64_t))(v19 + 96))(v21, v18);
    uint64_t v52 = v78;
    uint64_t v53 = v79;
    (*(void (**)(char *, char *, uint64_t))(v79 + 32))(v78, v21, v6);
    uint64_t v82 = 11387LL;
    unint64_t v83 = 0xE200000000000000LL;
    uint64_t v54 = AST.Atom.Number.value.getter();
    if ((v55 & 1) == 0)
    {
      uint64_t v36 = v54;
      (*(void (**)(char *, uint64_t))(v53 + 8))(v52, v6);
      goto LABEL_15;
    }

    goto LABEL_53;
  }

  if (v32 == *MEMORY[0x18961C3D0])
  {
    (*(void (**)(char *, uint64_t))(v19 + 96))(v21, v18);
    uint64_t v57 = v79;
    __int128 v58 = *(void (**)(char *, char *, uint64_t))(v79 + 32);
    __int128 v59 = v76;
    v58(v76, v21, v6);
    unint64_t v60 = v77;
    v58(v77, v56, v6);
    uint64_t v82 = 123LL;
    unint64_t v83 = 0xE100000000000000LL;
    uint64_t v61 = AST.Atom.Number.value.getter();
    if ((v62 & 1) == 0)
    {
      uint64_t v81 = v61;
      v63._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v63);
      swift_bridgeObjectRelease();
      v64._uint64_t countAndFlagsBits = 44LL;
      v64._unint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v64);
      uint64_t v65 = AST.Atom.Number.value.getter();
      if ((v66 & 1) == 0)
      {
        uint64_t v36 = v65;
        __int128 v67 = *(void (**)(char *, uint64_t))(v57 + 8);
        v67(v60, v6);
        v67(v59, v6);
        goto LABEL_15;
      }

      goto LABEL_55;
    }

LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }

  if (v32 == *MEMORY[0x18961C3C8])
  {
    uint64_t v47 = (char *)v27[1];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v47 + 2) + 1LL,  1,  v47,  &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
    }
    unint64_t v69 = *((void *)v47 + 2);
    unint64_t v68 = *((void *)v47 + 3);
    if (v69 >= v68 >> 1) {
      uint64_t v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v68 > 1),  v69 + 1,  1,  v47,  &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
    }
    *((void *)v47 + 2) = v69 + 1;
    __int128 v70 = xmmword_182D9CCD0;
LABEL_50:
    uint64_t v73 = &v47[24 * v69];
    *((_OWORD *)v73 + 2) = v70;
    v73[48] = 0;
LABEL_24:
    v27[1] = (uint64_t)v47;
    return LiteralPrinter.outputQuantificationKind(_:)(v80);
  }

  if (v32 == *MEMORY[0x18961C3F8])
  {
    uint64_t v47 = (char *)v27[1];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v47 + 2) + 1LL,  1,  v47,  &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
    }
    unint64_t v69 = *((void *)v47 + 2);
    unint64_t v71 = *((void *)v47 + 3);
    if (v69 >= v71 >> 1) {
      uint64_t v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v71 > 1),  v69 + 1,  1,  v47,  &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
    }
    *((void *)v47 + 2) = v69 + 1;
    __int128 v70 = xmmword_182D9CCC0;
    goto LABEL_50;
  }

  if (v32 == *MEMORY[0x18961C400])
  {
    uint64_t v47 = (char *)v27[1];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v47 + 2) + 1LL,  1,  v47,  &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
    }
    unint64_t v69 = *((void *)v47 + 2);
    unint64_t v72 = *((void *)v47 + 3);
    if (v69 >= v72 >> 1) {
      uint64_t v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v72 > 1),  v69 + 1,  1,  v47,  &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
    }
    *((void *)v47 + 2) = v69 + 1;
    __int128 v70 = xmmword_182D9CCB0;
    goto LABEL_50;
  }

LABEL_56:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

double LiteralPrinter.outputCustomCharacterClass(_:)(uint64_t a1)
{
  unint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DSLTree.Atom(0LL);
  uint64_t v5 = MEMORY[0x1895F8858](v4);
  uint64_t v46 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = MEMORY[0x1895F8858](v5);
  unint64_t v45 = (char *)&v42 - v8;
  MEMORY[0x1895F8858](v7);
  Swift::String v44 = (char *)&v42 - v9;
  uint64_t v52 = type metadata accessor for DSLTree.CustomCharacterClass.Member(0LL);
  uint64_t v10 = *(void *)(v52 - 8);
  uint64_t v11 = MEMORY[0x1895F8858](v52);
  uint64_t v49 = (uint64_t)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = MEMORY[0x1895F8858](v11);
  uint64_t v15 = (uint64_t)&v42 - v14;
  uint64_t v16 = MEMORY[0x1895F8858](v13);
  *(void *)&__int128 v50 = (char *)&v42 - v17;
  uint64_t v18 = MEMORY[0x1895F8858](v16);
  uint64_t v20 = (char *)&v42 - v19;
  MEMORY[0x1895F8858](v18);
  Swift::String v22 = (char *)&v42 - v21;
  uint64_t v23 = *(char **)a1;
  char v24 = *(_BYTE *)(a1 + 8);
  unint64_t v47 = v2;
  unint64_t v51 = v23;
  if ((v24 & 1) != 0)
  {
    unint64_t v25 = 0xE200000000000000LL;
    uint64_t v15 = 24155LL;
  }

  else
  {
    unint64_t v25 = MEMORY[0x18961AFE8];
    unint64_t v53 = MEMORY[0x18961AFE8];
    *(void *)&__int128 v48 = *((void *)v23 + 2);
    if ((void)v48)
    {
      *(void *)&__int128 v43 = v15;
      unint64_t v2 = 0LL;
      do
      {
        if (v2 >= *((void *)v23 + 2)) {
          goto LABEL_33;
        }
        unint64_t v26 = (*(unsigned __int8 *)(v10 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
        uint64_t v15 = v10;
        uint64_t v27 = *(void *)(v10 + 72);
        outlined init with copy of MEProgram( (uint64_t)&v23[v26 + v27 * v2],  (uint64_t)v22,  type metadata accessor for DSLTree.CustomCharacterClass.Member);
        outlined init with copy of MEProgram( (uint64_t)v22,  (uint64_t)v20,  type metadata accessor for DSLTree.CustomCharacterClass.Member);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        outlined destroy of MEProgram((uint64_t)v20, type metadata accessor for DSLTree.CustomCharacterClass.Member);
        if (EnumCaseMultiPayload == 4)
        {
          outlined destroy of MEProgram((uint64_t)v22, type metadata accessor for DSLTree.CustomCharacterClass.Member);
        }

        else
        {
          outlined init with take of DSLTree.QuantificationKind( (uint64_t)v22,  v50,  type metadata accessor for DSLTree.CustomCharacterClass.Member);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v25 + 16) + 1LL,  1);
          }
          unint64_t v25 = v53;
          unint64_t v30 = *(void *)(v53 + 16);
          unint64_t v29 = *(void *)(v53 + 24);
          if (v30 >= v29 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v29 > 1,  v30 + 1,  1);
            unint64_t v25 = v53;
          }

          *(void *)(v25 + 16) = v30 + 1;
          outlined init with take of DSLTree.QuantificationKind( v50,  v25 + v26 + v30 * v27,  type metadata accessor for DSLTree.CustomCharacterClass.Member);
          uint64_t v23 = v51;
        }

        ++v2;
        uint64_t v10 = v15;
      }

      while ((void)v48 != v2);
      unint64_t v25 = v53;
      unint64_t v2 = v47;
      uint64_t v15 = v43;
    }

    if (*(void *)(v25 + 16) == 1LL)
    {
      outlined init with copy of MEProgram( v25 + ((*(unsigned __int8 *)(v10 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80)),  v15,  type metadata accessor for DSLTree.CustomCharacterClass.Member);
      swift_release();
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        char v31 = *(_BYTE *)(v15 + 8);
        unint64_t v53 = *(void *)v15;
        LOBYTE(v54) = v31;
        LiteralPrinter.outputCustomCharacterClass(_:)(&v53);
        swift_bridgeObjectRelease();
        return result;
      }

      outlined destroy of MEProgram(v15, type metadata accessor for DSLTree.CustomCharacterClass.Member);
    }

    else
    {
      swift_release();
    }

    unint64_t v25 = 0xE100000000000000LL;
    uint64_t v15 = 91LL;
  }

  uint64_t v23 = *(char **)(v2 + 8);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_34;
  }
  while (1)
  {
    unint64_t v34 = *((void *)v23 + 2);
    unint64_t v33 = *((void *)v23 + 3);
    if (v34 >= v33 >> 1) {
      uint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v33 > 1),  v34 + 1,  1,  v23,  &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
    }
    *((void *)v23 + 2) = v34 + 1;
    char v35 = &v23[24 * v34];
    *((void *)v35 + 4) = v15;
    *((void *)v35 + 5) = v25;
    v35[48] = 0;
    swift_bridgeObjectRelease();
    *(void *)(v2 + 8) = v23;
    uint64_t v23 = v51;
    uint64_t v36 = *((void *)v51 + 2);
    swift_bridgeObjectRetain();
    if (!v36) {
      break;
    }
    __int128 v50 = xmmword_182D9CD10;
    __int128 v48 = xmmword_182D9CD00;
    __int128 v43 = xmmword_182D9CCF0;
    __int128 v42 = xmmword_182D9CCE0;
    if (*((void *)v23 + 2))
    {
      outlined init with copy of MEProgram( (uint64_t)&v23[(*(unsigned __int8 *)(v10 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80)],  v49,  type metadata accessor for DSLTree.CustomCharacterClass.Member);
      Swift::String v37 = (char *)&loc_182D5959C + *((int *)qword_182D59C80 + swift_getEnumCaseMultiPayload());
      __asm { BR              X9 }
    }

    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    uint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v23 + 2) + 1LL,  1,  v23,  &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
  }

  swift_bridgeObjectRelease();
  uint64_t v38 = *(char **)(v2 + 8);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v38 + 2) + 1LL,  1,  v38,  &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
  }
  unint64_t v40 = *((void *)v38 + 2);
  unint64_t v39 = *((void *)v38 + 3);
  if (v40 >= v39 >> 1) {
    uint64_t v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v39 > 1),  v40 + 1,  1,  v38,  &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
  }
  *((void *)v38 + 2) = v40 + 1;
  *(void *)&double result = 93LL;
  uint64_t v41 = &v38[24 * v40];
  *((_OWORD *)v41 + 2) = xmmword_182D9CD20;
  v41[48] = 0;
  *(void *)(v2 + 8) = v38;
  return result;
}

void LiteralPrinter.outputAtom(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DSLTree._AST.Atom(0LL);
  MEMORY[0x1895F8858](v2);
  uint64_t v3 = type metadata accessor for DSLTree._AST.MatchingOptionSequence(0LL);
  MEMORY[0x1895F8858](v3);
  uint64_t v4 = type metadata accessor for DSLTree._AST.Reference(0LL);
  MEMORY[0x1895F8858](v4);
  uint64_t v5 = type metadata accessor for DSLTree.Atom(0LL);
  MEMORY[0x1895F8858](v5);
  outlined init with copy of MEProgram(a1, (uint64_t)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL), v7);
  uint64_t v8 = (char *)&loc_182D59DC4 + dword_182D5AD2C[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }

uint64_t sub_182D59DD4()
{
  unint64_t v3 = *v1;
  unint64_t v4 = v1[1];
  if ((specialized Set.contains(_:)(v3, v4, metachars) & 1) != 0)
  {
    *(void *)(v2 - 80) = 0LL;
    *(void *)(v2 - 72) = 0xE000000000000000LL;
    v5._uint64_t countAndFlagsBits = 92LL;
    v5._unint64_t object = (void *)0xE100000000000000LL;
    String.append(_:)(v5);
    Character.write<A>(to:)();
    swift_bridgeObjectRelease();
    unint64_t v7 = *(void *)(v2 - 80);
    uint64_t v6 = *(void *)(v2 - 72);
  }

  else
  {
    unint64_t v7 = Character.escapingConfusable.getter(v3, v4);
    uint64_t v6 = v8;
    swift_bridgeObjectRelease();
  }

  uint64_t v9 = *(char **)(v0 + 8);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v9 + 2) + 1LL,  1,  v9,  &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
  }
  unint64_t v11 = *((void *)v9 + 2);
  unint64_t v10 = *((void *)v9 + 3);
  if (v11 >= v10 >> 1) {
    uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v10 > 1),  v11 + 1,  1,  v9,  &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
  }
  *((void *)v9 + 2) = v11 + 1;
  uint64_t v12 = &v9[24 * v11];
  *((void *)v12 + 4) = v7;
  *((void *)v12 + 5) = v6;
  v12[48] = 0;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v0 + 8) = v9;
  return result;
}

BOOL LiteralPrinter.requiresGrouping(_:)(unint64_t a1, uint64_t a2)
{
  int v3 = (a1 >> 59) & 0x1E | (a1 >> 2) & 1;
  if (v3 == 10)
  {
    uint64_t v9 = a1 & 0xFFFFFFFFFFFFFFBLL;
    v11._uint64_t countAndFlagsBits = *(void *)((a1 & 0xFFFFFFFFFFFFFFBLL) + 0x10);
    v11._unint64_t object = *(void **)(v9 + 24);
    specialized LiteralPrinter.prepareQuotedLiteral(_:)(v11, a2);
    uint64_t v10 = String.count.getter();
    swift_bridgeObjectRelease();
    return v10 > 1;
  }

  else if (v3 == 1 && (uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFFFBLL) + 0x10), (v5 = *(void *)(v4 + 16)) != 0))
  {
    if (v5 == 1)
    {
      uint64_t v6 = *(void *)(v4 + 32);
      swift_retain();
      char v7 = LiteralPrinter.requiresGrouping(_:)(v6, a2);
      swift_release();
      return v7 & 1;
    }

    else
    {
      return 1LL;
    }
  }

  else
  {
    return 0LL;
  }

uint64_t LiteralPrinter.outputQuantificationKind(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AST.Quantification.Kind();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x1895F8858](v2);
  uint64_t v6 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v4);
  uint64_t v8 = (char *)&v48 - v7;
  uint64_t v9 = type metadata accessor for DSLTree._AST.QuantificationKind(0LL);
  uint64_t v10 = MEMORY[0x1895F8858](v9);
  uint64_t v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v10);
  uint64_t v14 = (char *)&v48 - v13;
  uint64_t v15 = type metadata accessor for DSLTree.QuantificationKind(0LL);
  uint64_t v16 = MEMORY[0x1895F8858](v15);
  uint64_t v18 = (char *)&v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v16);
  uint64_t v20 = (char *)&v48 - v19;
  outlined init with copy of MEProgram(a1, (uint64_t)&v48 - v19, v21);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload != 1)
    {
      MatchingOptions.defaultQuantificationKind.getter(*v49, (uint64_t)v18);
      swift_storeEnumTagMultiPayload();
      LiteralPrinter.outputQuantificationKind(_:)(v18);
      return outlined destroy of MEProgram((uint64_t)v18, type metadata accessor for DSLTree.QuantificationKind);
    }

    outlined init with take of DSLTree.QuantificationKind( (uint64_t)v20,  (uint64_t)v12,  type metadata accessor for DSLTree._AST.QuantificationKind);
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v12, v2);
    int v23 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v6, v2);
    uint64_t v6 = (char *)v49;
    if (v23 == *MEMORY[0x18961C388])
    {
      outlined destroy of MEProgram((uint64_t)v12, type metadata accessor for DSLTree._AST.QuantificationKind);
      uint64_t v2 = *((void *)v6 + 1);
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v2 + 16) + 1LL,  1,  (char *)v2,  &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
        uint64_t v2 = result;
      }

      unint64_t v26 = *(void *)(v2 + 16);
      unint64_t v25 = *(void *)(v2 + 24);
      if (v26 >= v25 >> 1)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v25 > 1),  v26 + 1,  1,  (char *)v2,  &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
        uint64_t v2 = result;
      }

      *(void *)(v2 + 16) = v26 + 1;
      __int128 v27 = xmmword_182D9CE30;
LABEL_40:
      uint64_t v43 = v2 + 24 * v26;
      *(_OWORD *)(v43 + 32) = v27;
      *(_BYTE *)(v43 + 48) = 0;
      *((void *)v6 + 1) = v2;
      return result;
    }

    if (v23 == *MEMORY[0x18961C390])
    {
      outlined destroy of MEProgram((uint64_t)v12, type metadata accessor for DSLTree._AST.QuantificationKind);
      uint64_t v2 = *((void *)v6 + 1);
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) != 0)
      {
LABEL_18:
        unint64_t v26 = *(void *)(v2 + 16);
        unint64_t v35 = *(void *)(v2 + 24);
        if (v26 >= v35 >> 1)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v35 > 1),  v26 + 1,  1,  (char *)v2,  &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
          uint64_t v2 = result;
        }

        *(void *)(v2 + 16) = v26 + 1;
        __int128 v27 = xmmword_182D9CCB0;
        goto LABEL_40;
      }

LABEL_48:
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v2 + 16) + 1LL,  1,  (char *)v2,  &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
      uint64_t v2 = result;
      goto LABEL_18;
    }

    if (v23 == *MEMORY[0x18961C380])
    {
      outlined destroy of MEProgram((uint64_t)v12, type metadata accessor for DSLTree._AST.QuantificationKind);
      uint64_t v2 = *((void *)v6 + 1);
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) != 0)
      {
LABEL_37:
        unint64_t v26 = *(void *)(v2 + 16);
        unint64_t v42 = *(void *)(v2 + 24);
        if (v26 >= v42 >> 1)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v42 > 1),  v26 + 1,  1,  (char *)v2,  &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
          uint64_t v2 = result;
        }

        *(void *)(v2 + 16) = v26 + 1;
        __int128 v27 = xmmword_182D9CCC0;
        goto LABEL_40;
      }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

uint64_t Unicode.Scalar.escapedString.getter(int a1)
{
  switch(a1)
  {
    case 9:
      return 29788LL;
    case 10:
      return 28252LL;
    case 13:
      return 29276LL;
  }

  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  uint64_t v2 = String.init<A>(_:radix:uppercase:)();
  uint64_t v4 = v3;
  uint64_t v5 = String.count.getter();
  uint64_t result = String.count.getter();
  if (v5 <= 4)
  {
    if (!__OFSUB__(4LL, result))
    {
      uint64_t v6 = MEMORY[0x186E1707C](48LL, 0xE100000000000000LL, 4 - result);
      uint64_t v8 = 30044LL;
      goto LABEL_12;
    }

uint64_t LiteralPrinter.outputReference(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for AST.Atom.Number();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1895F8858](v4);
  uint64_t v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v6);
  uint64_t v10 = (char *)&v42 - v9;
  uint64_t v11 = type metadata accessor for AST.Reference.Kind();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1895F8858](v11);
  uint64_t v14 = (uint64_t *)((char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  AST.Reference.kind.getter();
  int v15 = (*(uint64_t (**)(uint64_t *, uint64_t))(v12 + 88))(v14, v11);
  if (v15 == *MEMORY[0x18961C930])
  {
    (*(void (**)(uint64_t *, uint64_t))(v12 + 96))(v14, v11);
    (*(void (**)(char *, uint64_t *, uint64_t))(v5 + 32))(v10, v14, v4);
    uint64_t v16 = AST.Atom.Number.value.getter();
    char v18 = v17;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    if ((v18 & 1) == 0)
    {
      if (v16 <= 9)
      {
        uint64_t v44 = 92LL;
        unint64_t v45 = 0xE100000000000000LL;
        uint64_t v43 = v16;
        v19._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v19);
        swift_bridgeObjectRelease();
LABEL_23:
        uint64_t v38 = v44;
        unint64_t v37 = v45;
        int v28 = *(char **)(v2 + 8);
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          int v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v28 + 2) + 1LL,  1,  v28,  &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
        }
        unint64_t v40 = *((void *)v28 + 2);
        unint64_t v39 = *((void *)v28 + 3);
        if (v40 >= v39 >> 1) {
          int v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v39 > 1),  v40 + 1,  1,  v28,  &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
        }
        *((void *)v28 + 2) = v40 + 1;
        uint64_t v41 = &v28[24 * v40];
        *((void *)v41 + 4) = v38;
        *((void *)v41 + 5) = v37;
        v41[48] = 0;
        uint64_t result = swift_bridgeObjectRelease();
LABEL_28:
        *(void *)(v2 + 8) = v28;
        return result;
      }

      uint64_t v44 = 8087388LL;
      unint64_t v45 = 0xE300000000000000LL;
      uint64_t v43 = v16;
      goto LABEL_21;
    }

uint64_t AST.MatchingOptionSequence._patternString.getter()
{
  uint64_t v1 = type metadata accessor for AST.MatchingOption.Kind();
  uint64_t v54 = *(void *)(v1 - 8);
  uint64_t v55 = v1;
  MEMORY[0x1895F8858](v1);
  uint64_t v3 = (char *)v48 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v53 = type metadata accessor for AST.MatchingOption();
  uint64_t v4 = *(void *)(v53 - 8);
  uint64_t v5 = MEMORY[0x1895F8858](v53);
  unint64_t v51 = (char *)v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)v48 - v7;
  uint64_t v50 = v0;
  uint64_t result = AST.MatchingOptionSequence.adding.getter();
  uint64_t v10 = result;
  uint64_t v52 = *(void **)(result + 16);
  if (v52)
  {
    unint64_t v11 = 0LL;
    uint64_t v12 = MEMORY[0x18961AFE8];
    while (v11 < *(void *)(v10 + 16))
    {
      uint64_t v14 = v53;
      (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))( v8,  v10 + ((*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
      + *(void *)(v4 + 72) * v11,
        v53);
      AST.MatchingOption.kind.getter();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v8, v14);
      uint64_t v15 = AST.MatchingOption.Kind._patternString.getter();
      uint64_t v17 = v16;
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v3, v55);
      if (v17)
      {
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v12 + 16) + 1LL,  1,  (char *)v12);
          uint64_t v12 = result;
        }

        unint64_t v19 = *(void *)(v12 + 16);
        unint64_t v18 = *(void *)(v12 + 24);
        if (v19 >= v18 >> 1)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v18 > 1),  v19 + 1,  1,  (char *)v12);
          uint64_t v12 = result;
        }

        *(void *)(v12 + 16) = v19 + 1;
        unint64_t v13 = v12 + 16 * v19;
        *(void *)(v13 + 32) = v15;
        *(void *)(v13 + 40) = v17;
      }
    }

    __break(1u);
    goto LABEL_33;
  }

  uint64_t v12 = MEMORY[0x18961AFE8];
LABEL_12:
  swift_bridgeObjectRelease();
  uint64_t v56 = v12;
  uint64_t CanonicalSpecializedMetadata = swift_getCanonicalSpecializedMetadata();
  v48[1] = lazy protocol witness table accessor for type PartialRangeUpTo<String.Index> and conformance PartialRangeUpTo<A>( &lazy protocol witness table cache variable for type [String] and conformance [A],  (uint64_t)&unk_189C4BD40,  (uint64_t)&cache variable for noncanonical specialized generic type metadata for [String],  MEMORY[0x189618458]);
  v48[2] = CanonicalSpecializedMetadata;
  uint64_t v21 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v23 = v22;
  swift_bridgeObjectRelease();
  uint64_t result = AST.MatchingOptionSequence.removing.getter();
  uint64_t v24 = result;
  uint64_t v25 = *(void *)(result + 16);
  uint64_t v52 = v23;
  uint64_t v49 = v21;
  if (v25)
  {
    unint64_t v26 = 0LL;
    uint64_t v27 = MEMORY[0x18961AFE8];
    while (v26 < *(void *)(v24 + 16))
    {
      unint64_t v29 = v51;
      uint64_t v30 = v53;
      (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))( v51,  v24 + ((*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
      + *(void *)(v4 + 72) * v26,
        v53);
      AST.MatchingOption.kind.getter();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v29, v30);
      uint64_t v31 = AST.MatchingOption.Kind._patternString.getter();
      uint64_t v33 = v32;
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v3, v55);
      if (v33)
      {
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v27 + 16) + 1LL,  1,  (char *)v27);
          uint64_t v27 = result;
        }

        unint64_t v35 = *(void *)(v27 + 16);
        unint64_t v34 = *(void *)(v27 + 24);
        if (v35 >= v34 >> 1)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v34 > 1),  v35 + 1,  1,  (char *)v27);
          uint64_t v27 = result;
        }

        *(void *)(v27 + 16) = v35 + 1;
        unint64_t v28 = v27 + 16 * v35;
        *(void *)(v28 + 32) = v31;
        *(void *)(v28 + 40) = v33;
      }

      if (v25 == ++v26) {
        goto LABEL_23;
      }
    }

uint64_t LiteralPrinter.outputUnconvertedAST(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for AST.Atom.CharacterProperty();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  uint64_t v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for AST.Atom.Kind();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v8);
  unint64_t v11 = (uint64_t *)((char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  AST.Atom.kind.getter();
  int v12 = (*(uint64_t (**)(uint64_t *, uint64_t))(v9 + 88))(v11, v8);
  if (v12 == *MEMORY[0x18961C770])
  {
    (*(void (**)(uint64_t *, uint64_t))(v9 + 96))(v11, v8);
    (*(void (**)(char *, uint64_t *, uint64_t))(v5 + 32))(v7, v11, v4);
    uint64_t v13 = AST.Atom.CharacterProperty._regexBase.getter();
    uint64_t v15 = v14;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    if (v15)
    {
      uint64_t v16 = *(char **)(v2 + 8);
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v16 + 2) + 1LL,  1,  v16,  &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
      }
      unint64_t v18 = *((void *)v16 + 2);
      unint64_t v17 = *((void *)v16 + 3);
      if (v18 >= v17 >> 1) {
        uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v17 > 1),  v18 + 1,  1,  v16,  &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
      }
      *((void *)v16 + 2) = v18 + 1;
      unint64_t v19 = &v16[24 * v18];
      *((void *)v19 + 4) = v13;
      *((void *)v19 + 5) = v15;
      v19[48] = 0;
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v2 + 8) = v16;
      return result;
    }

    type metadata accessor for DSLTree.Atom(0LL);
    uint64_t v38 = swift_allocBox();
    uint64_t v40 = v39;
    uint64_t v41 = type metadata accessor for AST.Atom();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 16LL))(v40, a1, v41);
    swift_storeEnumTagMultiPayload();
    unint64_t v26 = *(char **)(v2 + 8);
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v26 + 2) + 1LL,  1,  v26,  &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
    }
    unint64_t v43 = *((void *)v26 + 2);
    unint64_t v42 = *((void *)v26 + 3);
    if (v43 >= v42 >> 1) {
      unint64_t v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v42 > 1),  v43 + 1,  1,  v26,  &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
    }
    *((void *)v26 + 2) = v43 + 1;
    Swift::String v44 = &v26[24 * v43];
    *((void *)v44 + 4) = v38 | 0x4000000000000000LL;
    *((void *)v44 + 5) = 0LL;
    v44[48] = 1;
    uint64_t result = swift_release();
LABEL_24:
    *(void *)(v2 + 8) = v26;
    return result;
  }

  if (v12 == *MEMORY[0x18961C710])
  {
    (*(void (**)(uint64_t *, uint64_t))(v9 + 96))(v11, v8);
    v21._uint64_t countAndFlagsBits = *v11;
    char v22 = (void *)v11[1];
    uint64_t v45 = 8080988LL;
    unint64_t v46 = 0xE300000000000000LL;
    v21._unint64_t object = v22;
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    v23._uint64_t countAndFlagsBits = 125LL;
    v23._unint64_t object = (void *)0xE100000000000000LL;
    String.append(_:)(v23);
    uint64_t v25 = v45;
    unint64_t v24 = v46;
    unint64_t v26 = *(char **)(v2 + 8);
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v26 + 2) + 1LL,  1,  v26,  &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
    }
    unint64_t v28 = *((void *)v26 + 2);
    unint64_t v27 = *((void *)v26 + 3);
    if (v28 >= v27 >> 1) {
      unint64_t v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v27 > 1),  v28 + 1,  1,  v26,  &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
    }
    *((void *)v26 + 2) = v28 + 1;
    unint64_t v29 = &v26[24 * v28];
    *((void *)v29 + 4) = v25;
    *((void *)v29 + 5) = v24;
    v29[48] = 0;
    uint64_t result = swift_bridgeObjectRelease();
    goto LABEL_24;
  }

  type metadata accessor for DSLTree.Atom(0LL);
  uint64_t v30 = swift_allocBox();
  uint64_t v32 = v31;
  uint64_t v33 = type metadata accessor for AST.Atom();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 16LL))(v32, a1, v33);
  swift_storeEnumTagMultiPayload();
  unint64_t v34 = *(char **)(v2 + 8);
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v34 + 2) + 1LL,  1,  v34,  &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
  }
  unint64_t v36 = *((void *)v34 + 2);
  unint64_t v35 = *((void *)v34 + 3);
  if (v36 >= v35 >> 1) {
    unint64_t v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v35 > 1),  v36 + 1,  1,  v34,  &demangling cache variable for type metadata for _ContiguousArrayStorage<PatternSegment>);
  }
  *((void *)v34 + 2) = v36 + 1;
  unint64_t v37 = &v34[24 * v36];
  *((void *)v37 + 4) = v30 | 0x4000000000000000LL;
  *((void *)v37 + 5) = 0LL;
  v37[48] = 1;
  swift_release();
  *(void *)(v2 + 8) = v34;
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t String.containsRegexMetaCharacters.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  uint64_t v18 = a1;
  unint64_t v19 = a2;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v20 = 0LL;
  uint64_t v21 = v2;
  swift_bridgeObjectRetain();
  Swift::String_optional v3 = String.Iterator.next()();
  uint64_t object = (uint64_t)v3.value._object;
  if (v3.value._object)
  {
    uint64_t countAndFlagsBits = v3.value._countAndFlagsBits;
    while (1)
    {
      uint64_t v7 = metachars;
      if (*(void *)(metachars + 16))
      {
        Hasher.init(_seed:)();
        MEMORY[0x186E16E84](v17, countAndFlagsBits, object);
        Swift::Int v8 = Hasher._finalize()();
        uint64_t v9 = -1LL << *(_BYTE *)(v7 + 32);
        unint64_t v10 = v8 & ~v9;
        uint64_t v11 = v7 + 56;
        if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0) {
          break;
        }
      }

LABEL_19:
  swift_bridgeObjectRelease();
  return object;
}

  unint64_t v34 = *(void (**)(void *, _BYTE *, uint64_t))(v15 + 16);
  v34(v23, v24, v40);
  v34((void *)(((unint64_t)v23 + v37) & ~v16), (_BYTE *)((unint64_t)&v24[v37] & ~v16), v40);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v17 + 16))( ((unint64_t)v23 + v28) & v38,  (unint64_t)&v24[v28] & v38,  v39);
  if (!v30) {
    *((_BYTE *)v23 + v29) = 0;
  }
LABEL_21:
  if (v30) {
    unint64_t v35 = v29;
  }
  else {
    unint64_t v35 = v29 + 1;
  }
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v41 + 16))( ((unint64_t)v23 + v20 + v35) & ~v20,  (unint64_t)&v24[v20 + v35] & ~v20,  v42);
  return v43;
}

  unint64_t v34 = *(void (**)(void *, _BYTE *, uint64_t))(v15 + 32);
  v34(v23, v24, v40);
  v34((void *)(((unint64_t)v23 + v37) & ~v16), (_BYTE *)((unint64_t)&v24[v37] & ~v16), v40);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v17 + 32))( ((unint64_t)v23 + v28) & v38,  (unint64_t)&v24[v28] & v38,  v39);
  if (!v30) {
    *((_BYTE *)v23 + v29) = 0;
  }
LABEL_21:
  if (v30) {
    unint64_t v35 = v29;
  }
  else {
    unint64_t v35 = v29 + 1;
  }
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v41 + 32))( ((unint64_t)v23 + v20 + v35) & ~v20,  (unint64_t)&v24[v20 + v35] & ~v20,  v42);
  return v43;
}

uint64_t AST.Atom.CharacterProperty._regexBase.getter()
{
  uint64_t v0 = type metadata accessor for Unicode.Script();
  uint64_t v81 = *(void *)(v0 - 8);
  uint64_t v82 = v0;
  uint64_t v1 = MEMORY[0x1895F8858](v0);
  uint64_t v79 = (char *)&v75 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v1);
  uint64_t v80 = (char *)&v75 - v3;
  uint64_t v4 = type metadata accessor for Unicode.POSIXProperty();
  uint64_t v77 = *(void *)(v4 - 8);
  uint64_t v78 = v4;
  MEMORY[0x1895F8858](v4);
  __int128 v76 = (char *)&v75 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Unicode.ExtendedGeneralCategory();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  uint64_t v9 = (char *)&v75 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Unicode.BinaryProperty();
  uint64_t v83 = *(void *)(v10 - 8);
  uint64_t v84 = v10;
  MEMORY[0x1895F8858](v10);
  uint64_t v12 = (char *)&v75 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for AST.Atom.CharacterProperty.Kind();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1895F8858](v13);
  uint64_t v16 = (uint64_t *)((char *)&v75 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  if ((AST.Atom.CharacterProperty.isInverted.getter() & 1) != 0) {
    uint64_t v17 = 20572LL;
  }
  else {
    uint64_t v17 = 28764LL;
  }
  AST.Atom.CharacterProperty.kind.getter();
  int v18 = (*(uint64_t (**)(uint64_t *, uint64_t))(v14 + 88))(v16, v13);
  if (v18 == *MEMORY[0x18961C650])
  {
    (*(void (**)(uint64_t *, uint64_t))(v14 + 96))(v16, v13);
    (*(void (**)(char *, uint64_t *, uint64_t))(v7 + 32))(v9, v16, v6);
    uint64_t v85 = v17;
    unint64_t v86 = 0xE200000000000000LL;
    v19._uint64_t countAndFlagsBits = 123LL;
    v19._uint64_t object = (void *)0xE100000000000000LL;
    String.append(_:)(v19);
    uint64_t v20 = Unicode.ExtendedGeneralCategory.rawValue.getter();
    char v22 = v21;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    v23._uint64_t countAndFlagsBits = v20;
    v23._uint64_t object = v22;
    String.append(_:)(v23);
LABEL_14:
    swift_bridgeObjectRelease();
    uint64_t v36 = 125LL;
    unint64_t v37 = 0xE100000000000000LL;
    goto LABEL_33;
  }

  int v24 = v18;
  if (v18 == *MEMORY[0x18961C698])
  {
    (*(void (**)(uint64_t *, uint64_t))(v14 + 96))(v16, v13);
    int v25 = *((unsigned __int8 *)v16
    uint64_t v27 = v83;
    uint64_t v26 = v84;
    (*(void (**)(char *, uint64_t *, uint64_t))(v83 + 32))(v12, v16, v84);
    if (v25) {
      uint64_t v28 = 0LL;
    }
    else {
      uint64_t v28 = 0x65736C61663DLL;
    }
    if (v25) {
      unint64_t v29 = (void *)0xE000000000000000LL;
    }
    else {
      unint64_t v29 = (void *)0xE600000000000000LL;
    }
    uint64_t v85 = v17;
    unint64_t v86 = 0xE200000000000000LL;
    v30._uint64_t countAndFlagsBits = 123LL;
    v30._uint64_t object = (void *)0xE100000000000000LL;
    String.append(_:)(v30);
    uint64_t v31 = Unicode.BinaryProperty.rawValue.getter();
    uint64_t v33 = v32;
    (*(void (**)(char *, uint64_t))(v27 + 8))(v12, v26);
    v34._uint64_t countAndFlagsBits = v31;
    v34._uint64_t object = v33;
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    v35._uint64_t countAndFlagsBits = v28;
    v35._uint64_t object = v29;
    String.append(_:)(v35);
    goto LABEL_14;
  }

  if (v18 == *MEMORY[0x18961C6A0])
  {
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t *, uint64_t))(v14 + 96))(v16, v13);
    uint64_t v39 = v80;
    uint64_t v38 = v81;
    uint64_t v40 = v16;
    uint64_t v41 = v82;
    (*(void (**)(char *, uint64_t *, uint64_t))(v81 + 32))(v80, v40, v82);
    uint64_t v85 = 14939LL;
    unint64_t v86 = 0xE200000000000000LL;
    char v42 = AST.Atom.CharacterProperty.isInverted.getter();
    BOOL v43 = (v42 & 1) == 0;
    if ((v42 & 1) != 0) {
      uint64_t v44 = 94LL;
    }
    else {
      uint64_t v44 = 0LL;
    }
    if (v43) {
      unint64_t v45 = 0xE000000000000000LL;
    }
    else {
      unint64_t v45 = 0xE100000000000000LL;
    }
    unint64_t v46 = v45;
    String.append(_:)(*(Swift::String *)&v44);
    swift_bridgeObjectRelease();
    uint64_t v47 = 0x3D747069726373LL;
    unint64_t v48 = 0xE700000000000000LL;
LABEL_31:
    String.append(_:)(*(Swift::String *)&v47);
    uint64_t v55 = Unicode.Script.rawValue.getter();
LABEL_32:
    uint64_t v57 = v55;
    __int128 v58 = v56;
    (*(void (**)(char *, uint64_t))(v38 + 8))(v39, v41);
    v59._uint64_t countAndFlagsBits = v57;
    v59._uint64_t object = v58;
    String.append(_:)(v59);
    swift_bridgeObjectRelease();
    uint64_t v36 = 23866LL;
    unint64_t v37 = 0xE200000000000000LL;
    goto LABEL_33;
  }

  if (v18 == *MEMORY[0x18961C658])
  {
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t *, uint64_t))(v14 + 96))(v16, v13);
    uint64_t v38 = v81;
    uint64_t v39 = v79;
    uint64_t v49 = v16;
    uint64_t v41 = v82;
    (*(void (**)(char *, uint64_t *, uint64_t))(v81 + 32))(v79, v49, v82);
    uint64_t v85 = 14939LL;
    unint64_t v86 = 0xE200000000000000LL;
    char v50 = AST.Atom.CharacterProperty.isInverted.getter();
    BOOL v51 = (v50 & 1) == 0;
    if ((v50 & 1) != 0) {
      uint64_t v52 = 94LL;
    }
    else {
      uint64_t v52 = 0LL;
    }
    if (v51) {
      unint64_t v53 = 0xE000000000000000LL;
    }
    else {
      unint64_t v53 = 0xE100000000000000LL;
    }
    unint64_t v54 = v53;
    String.append(_:)(*(Swift::String *)&v52);
    swift_bridgeObjectRelease();
    uint64_t v47 = 1031299955LL;
    unint64_t v48 = 0xE400000000000000LL;
    goto LABEL_31;
  }

  if (v18 == *MEMORY[0x18961C688])
  {
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t *, uint64_t))(v14 + 96))(v16, v13);
    v61._uint64_t countAndFlagsBits = *v16;
    char v62 = (void *)v16[1];
    uint64_t v85 = 8080988LL;
    unint64_t v86 = 0xE300000000000000LL;
    v61._uint64_t object = v62;
    String.append(_:)(v61);
    goto LABEL_14;
  }

  if (v18 == *MEMORY[0x18961C690])
  {
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t *, uint64_t))(v14 + 96))(v16, v13);
    uint64_t v39 = v76;
    uint64_t v38 = v77;
    Swift::String v63 = v16;
    uint64_t v41 = v78;
    (*(void (**)(char *, uint64_t *, uint64_t))(v77 + 32))(v76, v63, v78);
    uint64_t v85 = 14939LL;
    unint64_t v86 = 0xE200000000000000LL;
    char v64 = AST.Atom.CharacterProperty.isInverted.getter();
    BOOL v65 = (v64 & 1) == 0;
    if ((v64 & 1) != 0) {
      uint64_t v66 = 94LL;
    }
    else {
      uint64_t v66 = 0LL;
    }
    if (v65) {
      unint64_t v67 = 0xE000000000000000LL;
    }
    else {
      unint64_t v67 = 0xE100000000000000LL;
    }
    unint64_t v68 = v67;
    String.append(_:)(*(Swift::String *)&v66);
    swift_bridgeObjectRelease();
    uint64_t v55 = Unicode.POSIXProperty.rawValue.getter();
    goto LABEL_32;
  }

  if (v18 == *MEMORY[0x18961C668])
  {
    uint64_t v85 = v17;
    unint64_t v86 = 0xE200000000000000LL;
    uint64_t v36 = 0x7D796E417BLL;
    unint64_t v37 = 0xE500000000000000LL;
  }

  else if (v18 == *MEMORY[0x18961C6B8])
  {
    uint64_t v85 = v17;
    unint64_t v86 = 0xE200000000000000LL;
    uint64_t v36 = 0x656E67697373417BLL;
    unint64_t v37 = 0xEA00000000007D64LL;
  }

  else
  {
    int v69 = *MEMORY[0x18961C678];
    swift_bridgeObjectRelease();
    if (v24 != v69)
    {
      (*(void (**)(uint64_t *, uint64_t))(v14 + 8))(v16, v13);
      return 0LL;
    }

    uint64_t v85 = 14939LL;
    unint64_t v86 = 0xE200000000000000LL;
    char v70 = AST.Atom.CharacterProperty.isInverted.getter();
    BOOL v71 = (v70 & 1) == 0;
    if ((v70 & 1) != 0) {
      uint64_t v72 = 94LL;
    }
    else {
      uint64_t v72 = 0LL;
    }
    if (v71) {
      unint64_t v73 = 0xE000000000000000LL;
    }
    else {
      unint64_t v73 = 0xE100000000000000LL;
    }
    unint64_t v74 = v73;
    String.append(_:)(*(Swift::String *)&v72);
    swift_bridgeObjectRelease();
    uint64_t v36 = 0x5D3A6969637361LL;
    unint64_t v37 = 0xE700000000000000LL;
  }

uint64_t one-time initialization function for metachars()
{
  uint64_t result = specialized Set.init<A>(_:)(0x7C7D7B29285D5B5CLL, 0xEF2D2E245E3F2A2BLL);
  metachars = result;
  return result;
}

uint64_t specialized Set.init<A>(_:)(Swift::Int a1, unint64_t a2)
{
  uint64_t v4 = Set.init(minimumCapacity:)();
  uint64_t v12 = v4;
  uint64_t v5 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
  }
  v11[2] = a1;
  v11[3] = a2;
  v11[4] = 0LL;
  v11[5] = v5;
  Swift::String_optional v6 = String.Iterator.next()();
  if (v6.value._object)
  {
    Swift::Int countAndFlagsBits = v6.value._countAndFlagsBits;
    uint64_t object = v6.value._object;
    do
    {
      specialized Set._Variant.insert(_:)(v11, countAndFlagsBits, (Swift::Int)object);
      swift_bridgeObjectRelease();
      Swift::String_optional v9 = String.Iterator.next()();
      Swift::Int countAndFlagsBits = v9.value._countAndFlagsBits;
      uint64_t object = v9.value._object;
    }

    while (v9.value._object);
    uint64_t v4 = v12;
  }

  swift_bridgeObjectRelease();
  return v4;
}

unint64_t Character.escapingConfusable.getter(unint64_t a1, unint64_t a2)
{
  char v4 = Character.isConfusable.getter();
  swift_bridgeObjectRetain();
  if ((v4 & 1) == 0) {
    return a1;
  }
  unint64_t result = specialized Collection.first.getter(a1, a2);
  if ((result & 0x100000000LL) == 0)
  {
    if ((result & 0xFFFFFF80) != 0)
    {
      int v17 = (result & 0x3F) << 8;
      unsigned int v6 = (v17 | (result >> 6)) + 33217;
      unsigned int v18 = (v17 | (result >> 6) & 0x3F) << 8;
      unsigned int v19 = (((v18 | (result >> 12) & 0x3F) << 8) | (result >> 18)) - 2122219023;
      unsigned int v20 = (v18 | (result >> 12)) + 8487393;
      if (WORD1(result)) {
        unsigned int v20 = v19;
      }
      goto LABEL_6;
    }

    if (result <= 0xFF)
    {
      unsigned int v6 = (result + 1);
LABEL_6:
      v21[0] = (v6 + 0xFEFEFEFEFEFEFFLL) & ~(-1LL << (8 * ((4 - (__clz(v6) >> 3)) & 7)));
      uint64_t v7 = MEMORY[0x186E16FB0](v21);
      uint64_t v9 = v8;
      unint64_t v10 = specialized Collection.dropFirst(_:)( 1uLL,  a1,  a2,  (uint64_t (*)(uint64_t, unint64_t, unint64_t, uint64_t, unint64_t))String.UnicodeScalarView.index(_:offsetBy:limitedBy:),  MEMORY[0x189617D68]);
      uint64_t v12 = v11;
      uint64_t v14 = v13;
      uint64_t v16 = v15;
      swift_bridgeObjectRelease();
      uint64_t v22 = v7;
      uint64_t v23 = v9;
      v21[0] = v10;
      v21[1] = v12;
      void v21[2] = v14;
      v21[3] = v16;
      v21[4] = specialized implicit closure #1 in Character.escapingConfusable.getter;
      v21[5] = 0LL;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazySequence<FlattenSequence<LazyMapSequence<Substring.UnicodeScalarView, String>>>);
      lazy protocol witness table accessor for type [Any.Type] and conformance [A]( &lazy protocol witness table cache variable for type LazySequence<FlattenSequence<LazyMapSequence<Substring.UnicodeScalarView, String>>> and conformance LazySequence<A>,  &demangling cache variable for type metadata for LazySequence<FlattenSequence<LazyMapSequence<Substring.UnicodeScalarView, String>>>,  MEMORY[0x189619250]);
      String.append<A>(contentsOf:)();
      swift_bridgeObjectRelease();
      return v22;
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

unint64_t specialized implicit closure #1 in String.escapingConfusableCharacters()@<X0>( unint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t result = Character.escapingConfusable.getter(*a1, a1[1]);
  *a2 = result;
  a2[1] = v4;
  return result;
}

BOOL specialized Set.contains(_:)(unint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0LL;
  }
  Hasher.init(_seed:)();
  Swift::UInt64 v4 = a1 >> 14;
  Hasher._combine(_:)(v4);
  Swift::Int v5 = Hasher._finalize()();
  uint64_t v6 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v7 = v5 & ~v6;
  if (((*(void *)(a2 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v7) & 1) == 0) {
    return 0LL;
  }
  uint64_t v8 = ~v6;
  do
  {
    uint64_t v9 = *(void *)(*(void *)(a2 + 48) + 8 * v7) >> 14;
    BOOL result = v9 == v4;
    if (v9 == v4) {
      break;
    }
    unint64_t v7 = (v7 + 1) & v8;
  }

  while (((*(void *)(a2 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v7) & 1) != 0);
  return result;
}

uint64_t specialized Set.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a3 + 16)) {
    return 0LL;
  }
  Hasher.init(_seed:)();
  MEMORY[0x186E16E84](v15, a1, a2);
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1LL << *(_BYTE *)(a3 + 32);
  unint64_t v8 = v6 & ~v7;
  uint64_t v9 = a3 + 56;
  if (((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) == 0) {
    return 0LL;
  }
  uint64_t v10 = ~v7;
  uint64_t v11 = *(void *)(a3 + 48);
  while (1)
  {
    uint64_t v12 = (void *)(v11 + 16 * v8);
    BOOL v13 = *v12 == a1 && v12[1] == a2;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      break;
    }
    unint64_t v8 = (v8 + 1) & v10;
    if (((*(void *)(v9 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) == 0) {
      return 0LL;
    }
  }

  return 1LL;
}

uint64_t specialized implicit closure #1 in Character.escapingConfusable.getter@<X0>( int *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = Unicode.Scalar.escapedString.getter(*a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t AST.MatchingOption.Kind._patternString.getter()
{
  uint64_t v1 = type metadata accessor for AST.MatchingOption.Kind();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1895F8858](v1);
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v0, v1);
  int v5 = (*(uint64_t (**)(char *, uint64_t))(v2 + 88))(v4, v1);
  if (v5 == *MEMORY[0x18961C2E8]) {
    return 105LL;
  }
  int v7 = v5;
  if (v5 == *MEMORY[0x18961C338]) {
    return 74LL;
  }
  if (v5 == *MEMORY[0x18961C350]) {
    return 109LL;
  }
  if (v5 == *MEMORY[0x18961C2F0]) {
    return 110LL;
  }
  if (v5 == *MEMORY[0x18961C2B8]) {
    return 115LL;
  }
  if (v5 == *MEMORY[0x18961C300]) {
    return 85LL;
  }
  if (v5 == *MEMORY[0x18961C348]) {
    return 120LL;
  }
  if (v5 == *MEMORY[0x18961C2D0]) {
    return 30840LL;
  }
  if (v5 == *MEMORY[0x18961C320]) {
    return 119LL;
  }
  if (v5 == *MEMORY[0x18961C2D8]) {
    return 68LL;
  }
  if (v5 == *MEMORY[0x18961C308]) {
    return 80LL;
  }
  if (v5 == *MEMORY[0x18961C2E0]) {
    return 83LL;
  }
  if (v5 == *MEMORY[0x18961C2C0]) {
    return 87LL;
  }
  uint64_t result = 2103933817LL;
  if (v7 != *MEMORY[0x18961C330])
  {
    if (v7 == *MEMORY[0x18961C318])
    {
      return 2104982393LL;
    }

    else if (v7 == *MEMORY[0x18961C340])
    {
      return 88LL;
    }

    else if (v7 == *MEMORY[0x18961C328])
    {
      return 117LL;
    }

    else if (v7 == *MEMORY[0x18961C2C8])
    {
      return 98LL;
    }

    else
    {
      uint64_t result = 0LL;
      if (v7 != *MEMORY[0x18961C310] && v7 != *MEMORY[0x18961C2F8])
      {
        uint64_t result = _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
    }
  }

  return result;
}

uint64_t MatchingOptions.Representation.apply(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AST.MatchingOption.Kind();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x1895F8858](v2);
  uint64_t v75 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = MEMORY[0x1895F8858](v4);
  uint64_t v77 = (char *)&v53 - v7;
  uint64_t v8 = MEMORY[0x1895F8858](v6);
  uint64_t v10 = (char *)&v53 - v9;
  MEMORY[0x1895F8858](v8);
  uint64_t v12 = (char *)&v53 - v11;
  uint64_t v13 = type metadata accessor for AST.MatchingOption();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1895F8858](v13);
  unint64_t v74 = (char *)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v15);
  unsigned int v18 = (char *)&v53 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Location?);
  MEMORY[0x1895F8858](v19);
  uint64_t v21 = (char *)&v53 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  AST.MatchingOptionSequence.caretLoc.getter();
  uint64_t v22 = type metadata accessor for Source.Location();
  int v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 48LL))(v21, 1LL, v22);
  outlined destroy of (range: Range<String.Index>, value: Any?)?( (uint64_t)v21,  &demangling cache variable for type metadata for Source.Location?);
  if (v23 != 1) {
    *uint64_t v78 = 81984;
  }
  uint64_t v69 = a1;
  uint64_t v24 = AST.MatchingOptionSequence.adding.getter();
  uint64_t v76 = *(void *)(v24 + 16);
  if (v76)
  {
    unint64_t v25 = 0LL;
    int v73 = *MEMORY[0x18961C2E8];
    int v72 = *MEMORY[0x18961C338];
    int v71 = *MEMORY[0x18961C350];
    int v70 = *MEMORY[0x18961C2F0];
    int v68 = *MEMORY[0x18961C2B8];
    int v67 = *MEMORY[0x18961C300];
    int v66 = *MEMORY[0x18961C348];
    int v65 = *MEMORY[0x18961C2D0];
    int v64 = *MEMORY[0x18961C320];
    int v63 = *MEMORY[0x18961C2D8];
    int v62 = *MEMORY[0x18961C308];
    int v61 = *MEMORY[0x18961C2E0];
    int v60 = *MEMORY[0x18961C2C0];
    int v59 = *MEMORY[0x18961C330];
    int v58 = *MEMORY[0x18961C318];
    int v57 = *MEMORY[0x18961C340];
    int v56 = *MEMORY[0x18961C328];
    int v55 = *MEMORY[0x18961C2C8];
    int v54 = *MEMORY[0x18961C310];
    int v53 = *MEMORY[0x18961C2F8];
    while (v25 < *(void *)(v24 + 16))
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v14 + 16))( v18,  v24 + ((*(unsigned __int8 *)(v14 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))
      + *(void *)(v14 + 72) * v25,
        v13);
      AST.MatchingOption.kind.getter();
      (*(void (**)(char *, uint64_t))(v14 + 8))(v18, v13);
      (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v10, v12, v2);
      int v28 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v10, v2);
      if (v28 == v73)
      {
        char v29 = 0;
      }

      else if (v28 == v72)
      {
        char v29 = 1;
      }

      else if (v28 == v71)
      {
        char v29 = 2;
      }

      else if (v28 == v70)
      {
        char v29 = 3;
      }

      else if (v28 == v68)
      {
        char v29 = 4;
      }

      else if (v28 == v67)
      {
        char v29 = 5;
      }

      else if (v28 == v66)
      {
        char v29 = 20;
      }

      else if (v28 == v65)
      {
        char v29 = 21;
      }

      else if (v28 == v64)
      {
        char v29 = 6;
      }

      else if (v28 == v63)
      {
        char v29 = 10;
      }

      else if (v28 == v62)
      {
        char v29 = 11;
      }

      else if (v28 == v61)
      {
        char v29 = 12;
      }

      else if (v28 == v60)
      {
        char v29 = 13;
      }

      else if (v28 == v59)
      {
        char v29 = 14;
      }

      else if (v28 == v58)
      {
        char v29 = 15;
      }

      else if (v28 == v57)
      {
        char v29 = 16;
      }

      else if (v28 == v56)
      {
        char v29 = 17;
      }

      else if (v28 == v55)
      {
        char v29 = 18;
      }

      else if (v28 == v54)
      {
        char v29 = 19;
      }

      else
      {
        if (v28 != v53) {
          goto LABEL_121;
        }
        char v29 = 9;
      }

      (*(void (**)(char *, uint64_t))(v3 + 8))(v12, v2);
      int v26 = 1 << v29;
      BOOL v30 = ((1 << v29) & 0x70000) != 0;
      BOOL v31 = (*v78 & 0x70000) != 0;
      BOOL v32 = v30 && v31;
      if (v30 && v31) {
        unsigned int v33 = *v78 & 0xFFF8FFFF;
      }
      else {
        unsigned int v33 = *v78;
      }
      BOOL v34 = ((1 << v29) & 0xC000) != 0;
      BOOL v35 = (v33 & 0xC000) != 0;
      BOOL v36 = v34 && v35;
      if (v34 && v35) {
        v33 &= 0xFFFF3FFF;
      }
      if ((v26 & 0x80020) != 0 && (v33 & 0x80020) != 0) {
        unsigned int v37 = v33 & 0xFFF7FFDF;
      }
      else {
        unsigned int v37 = v33;
      }
      BOOL v38 = (v26 & 0x80020) != 0 && (v33 & 0x80020) != 0 || (v37 & v26) == 0;
      if (v32 || v36 || (v26 & 0x80020) != 0 && (v33 & 0x80020) != 0 || (v37 & v26) == 0)
      {
        if ((v37 & v26) != 0) {
          int v26 = 0;
        }
        int v27 = v26 | v37;
        if (!v38) {
          int v27 = v33;
        }
        *uint64_t v78 = v27;
      }

      if (v76 == ++v25) {
        goto LABEL_64;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_64:
    swift_bridgeObjectRelease();
    uint64_t v39 = AST.MatchingOptionSequence.removing.getter();
    uint64_t v40 = *(void *)(v39 + 16);
    if (!v40) {
      return swift_bridgeObjectRelease();
    }
    unint64_t v41 = 0LL;
    int v42 = *MEMORY[0x18961C2E8];
    LODWORD(v76) = *MEMORY[0x18961C338];
    int v73 = *MEMORY[0x18961C350];
    int v72 = *MEMORY[0x18961C2F0];
    int v71 = *MEMORY[0x18961C2B8];
    int v70 = *MEMORY[0x18961C300];
    LODWORD(v69) = *MEMORY[0x18961C348];
    int v68 = *MEMORY[0x18961C2D0];
    int v67 = *MEMORY[0x18961C320];
    int v66 = *MEMORY[0x18961C2D8];
    int v65 = *MEMORY[0x18961C308];
    int v64 = *MEMORY[0x18961C2E0];
    int v63 = *MEMORY[0x18961C2C0];
    int v62 = *MEMORY[0x18961C330];
    int v61 = *MEMORY[0x18961C318];
    int v60 = *MEMORY[0x18961C340];
    int v59 = *MEMORY[0x18961C328];
    int v58 = *MEMORY[0x18961C2C8];
    int v57 = *MEMORY[0x18961C310];
    int v56 = *MEMORY[0x18961C2F8];
    BOOL v43 = v77;
    while (v41 < *(void *)(v39 + 16))
    {
      unint64_t v45 = v74;
      (*(void (**)(char *, unint64_t, uint64_t))(v14 + 16))( v74,  v39 + ((*(unsigned __int8 *)(v14 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))
      + *(void *)(v14 + 72) * v41,
        v13);
      AST.MatchingOption.kind.getter();
      (*(void (**)(char *, uint64_t))(v14 + 8))(v45, v13);
      unint64_t v46 = v75;
      (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v75, v43, v2);
      int v47 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v46, v2);
      if (v47 == v42)
      {
        char v48 = 0;
      }

      else if (v47 == (_DWORD)v76)
      {
        char v48 = 1;
      }

      else if (v47 == v73)
      {
        char v48 = 2;
      }

      else if (v47 == v72)
      {
        char v48 = 3;
      }

      else if (v47 == v71)
      {
        char v48 = 4;
      }

      else if (v47 == v70)
      {
        char v48 = 5;
      }

      else if (v47 == (_DWORD)v69)
      {
        char v48 = 20;
      }

      else if (v47 == v68)
      {
        char v48 = 21;
      }

      else if (v47 == v67)
      {
        char v48 = 6;
      }

      else if (v47 == v66)
      {
        char v48 = 10;
      }

      else if (v47 == v65)
      {
        char v48 = 11;
      }

      else if (v47 == v64)
      {
        char v48 = 12;
      }

      else if (v47 == v63)
      {
        char v48 = 13;
      }

      else if (v47 == v62)
      {
        char v48 = 14;
      }

      else if (v47 == v61)
      {
        char v48 = 15;
      }

      else if (v47 == v60)
      {
        char v48 = 16;
      }

      else if (v47 == v59)
      {
        char v48 = 17;
      }

      else if (v47 == v58)
      {
        char v48 = 18;
      }

      else if (v47 == v57)
      {
        char v48 = 19;
      }

      else
      {
        if (v47 != v56) {
          goto LABEL_121;
        }
        char v48 = 9;
      }

      (*(void (**)(char *, uint64_t))(v3 + 8))(v77, v2);
      int v49 = 1 << v48;
      if (((1 << v48) & 0x80020) != 0 && (*v78 & 0x80020) != 0) {
        unsigned int v50 = *v78 & 0xFFF7FFDF;
      }
      else {
        unsigned int v50 = *v78;
      }
      int v51 = v50 & v49;
      if (((1 << v48) & 0x80020) != 0 && (*v78 & 0x80020) != 0 || v51)
      {
        if (v51) {
          int v44 = ~v49;
        }
        else {
          int v44 = -1;
        }
        *uint64_t v78 = v50 & v44;
      }

      if (v40 == ++v41) {
        return swift_bridgeObjectRelease();
      }
    }
  }

  __break(1u);
LABEL_121:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance MatchingOptions.SemanticLevel( unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void protocol witness for Hashable.hash(into:) in conformance MatchingOptions.SemanticLevel()
{
}

_DWORD *protocol witness for OptionSet.init(rawValue:) in conformance MatchingOptions.Representation@<X0>( _DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

_DWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance MatchingOptions.Representation@<X0>( _DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance MatchingOptions.Representation( _DWORD *a1@<X8>)
{
  *a1 = *v1;
}

void protocol witness for SetAlgebra.init() in conformance MatchingOptions.Representation(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

_DWORD *protocol witness for SetAlgebra.union(_:) in conformance MatchingOptions.Representation@<X0>( _DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

_DWORD *protocol witness for SetAlgebra.intersection(_:) in conformance MatchingOptions.Representation@<X0>( _DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

_DWORD *protocol witness for SetAlgebra.symmetricDifference(_:) in conformance MatchingOptions.Representation@<X0>( _DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance MatchingOptions.Representation( _DWORD *a1, int *a2)
{
  int v3 = *a2;
  int v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

_DWORD *protocol witness for SetAlgebra.remove(_:) in conformance MatchingOptions.Representation@<X0>( _DWORD *result@<X0>, uint64_t a2@<X8>)
{
  int v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(_DWORD *)a2 = v3;
  *(_BYTE *)(a2 + 4) = v3 == 0;
  return result;
}

int *protocol witness for SetAlgebra.update(with:) in conformance MatchingOptions.Representation@<X0>( int *result@<X0>, uint64_t a2@<X8>)
{
  int v3 = *result;
  int v4 = *v2;
  *v2 |= *result;
  int v5 = v4 & v3;
  *(_DWORD *)a2 = v5;
  *(_BYTE *)(a2 + 4) = v5 == 0;
  return result;
}

_DWORD *protocol witness for SetAlgebra.formUnion(_:) in conformance MatchingOptions.Representation( _DWORD *result)
{
  *v1 |= *result;
  return result;
}

_DWORD *protocol witness for SetAlgebra.formIntersection(_:) in conformance MatchingOptions.Representation( _DWORD *result)
{
  *v1 &= *result;
  return result;
}

_DWORD *protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance MatchingOptions.Representation( _DWORD *result)
{
  *v1 ^= *result;
  return result;
}

_DWORD *protocol witness for SetAlgebra.subtracting(_:) in conformance MatchingOptions.Representation@<X0>( _DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance MatchingOptions.Representation(_DWORD *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance MatchingOptions.Representation( _DWORD *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL protocol witness for SetAlgebra.isSuperset(of:) in conformance MatchingOptions.Representation( _DWORD *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL protocol witness for SetAlgebra.isEmpty.getter in conformance MatchingOptions.Representation()
{
  return *v0 == 0;
}

_DWORD *protocol witness for SetAlgebra.subtract(_:) in conformance MatchingOptions.Representation( _DWORD *result)
{
  *v1 &= ~*result;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance MatchingOptions.Representation( _DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance MatchingOptions.Representation@<X0>( uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  int v3 = specialized SetAlgebra<>.init(arrayLiteral:)(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t renderAsBuilderDSL(ast:maxTopDownLevels:minBottomUpLevels:)(uint64_t a1)
{
  uint64_t v12 = a1;
  uint64_t v1 = type metadata accessor for AST();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1895F8858](v1);
  int v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for PrettyPrinter();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  PrettyPrinter.init(maxTopDownLevels:minBottomUpLevels:)();
  outlined init with copy of Any(v12, (uint64_t)v13);
  swift_dynamicCast();
  PrettyPrinter.printAsPattern(_:)();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  uint64_t countAndFlagsBits = PrettyPrinter.finish()()._countAndFlagsBits;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return countAndFlagsBits;
}

uint64_t PrettyPrinter.printAsPattern(_:)()
{
  uint64_t v0 = type metadata accessor for AST.Node();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1895F8858](v0);
  uint64_t v3 = (char *)&v28 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  AST.root.getter();
  unint64_t v4 = convert #1 () in AST.Node.dslTreeNode.getter((uint64_t)v3);
  if (((v4 >> 59) & 0x1E | (v4 >> 2) & 1) == 0xC)
  {
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  }

  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree.Node, DSLTree._AST.ASTNode));
    uint64_t v9 = swift_allocBox();
    uint64_t v11 = (char *)v10 + *(int *)(v8 + 48);
    *uint64_t v10 = v4;
    (*(void (**)(char *, char *, uint64_t))(v1 + 32))(v11, v3, v0);
    unint64_t v4 = v9 | 0x6000000000000000LL;
  }

  unint64_t v28 = v4;
  uint64_t v12 = DSLTree.Node.getNamedCaptures()(v4, v5, v6, v7);
  uint64_t v13 = v12;
  uint64_t v14 = *((void *)v12 + 2);
  if (v14)
  {
    unint64_t v15 = 0LL;
    uint64_t v16 = (void **)(v12 + 40);
    while (v15 < *((void *)v13 + 2))
    {
      uint64_t v17 = (uint64_t)*(v16 - 1);
      unsigned int v18 = *v16;
      v29._uint64_t countAndFlagsBits = 0LL;
      v29._uint64_t object = (void *)0xE000000000000000LL;
      swift_bridgeObjectRetain();
      _StringGuts.grow(_:)(34LL);
      swift_bridgeObjectRelease();
      ++v15;
      v29._uint64_t countAndFlagsBits = 544499052LL;
      v29._uint64_t object = (void *)0xE400000000000000LL;
      v19._uint64_t countAndFlagsBits = v17;
      v19._uint64_t object = v18;
      String.append(_:)(v19);
      swift_bridgeObjectRelease();
      v20._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      v20._uint64_t object = (void *)0x8000000182DA3D70LL;
      String.append(_:)(v20);
      PrettyPrinter.print(_:)(v29);
      swift_bridgeObjectRelease();
      v16 += 2;
      if (v14 == v15) {
        goto LABEL_8;
      }
    }

    __break(1u);
    uint64_t result = swift_unexpectedError();
    __break(1u);
  }

  else
  {
LABEL_8:
    uint64_t v21 = swift_bridgeObjectRelease();
    MEMORY[0x1895F8858](v21);
    *(&v28 - 2) = v28;
    PrettyPrinter.printBlock(_:startDelimiter:endDelimiter:_:)();
    swift_release();
    uint64_t v22 = *(void *)(PrettyPrinter.inlineMatchingOptions.getter() + 16);
    uint64_t result = swift_bridgeObjectRelease();
    if (v22)
    {
      do
      {
        unint64_t v24 = (unint64_t)PrettyPrinter.popMatchingOptions()();
        *(&v28 - 2) = MEMORY[0x1895F8858](v24);
        *((_BYTE *)&v28 - 8) = v25 & 1;
        PrettyPrinter.printIndented(_:)();
        swift_bridgeObjectRelease();
        v26._uint64_t countAndFlagsBits = 125LL;
        v26._uint64_t object = (void *)0xE100000000000000LL;
        PrettyPrinter.print(_:)(v26);
        uint64_t v27 = *(void *)(PrettyPrinter.inlineMatchingOptions.getter() + 16);
        uint64_t result = swift_bridgeObjectRelease();
      }

      while (v27);
    }
  }

  return result;
}

uint64_t PrettyPrinter.printBackoff(_:)(unint64_t a1)
{
  uint64_t v3 = type metadata accessor for Diagnostics();
  MEMORY[0x1895F8858](v3);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AST.GlobalMatchingOptionSequence?);
  MEMORY[0x1895F8858](v4);
  uint64_t v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for AST.Node();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  BOOL v30 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for AST();
  uint64_t v31 = *(void *)(v10 - 8);
  MEMORY[0x1895F8858](v10);
  uint64_t v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for DSLTree._AST.ASTNode(0LL);
  MEMORY[0x1895F8858](v13);
  unint64_t v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AST.Node?);
  MEMORY[0x1895F8858](v16);
  unsigned int v18 = (char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (((a1 >> 59) & 0x1E | (a1 >> 2) & 1) == 0xC)
  {
    uint64_t v29 = v10;
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree.Node, DSLTree._AST.ASTNode));
    uint64_t v28 = v1;
    uint64_t v20 = v19;
    uint64_t v21 = swift_projectBox();
    outlined init with copy of MEProgram( v21 + *(int *)(v20 + 48),  (uint64_t)v15,  type metadata accessor for DSLTree._AST.ASTNode);
    uint64_t v22 = v6;
    int v23 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
    v23(v18, v15, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v18, 0LL, 1LL, v7);
    outlined destroy of (range: Range<String.Index>, value: Any?)?( (uint64_t)v18,  &demangling cache variable for type metadata for AST.Node?);
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree.Node, DSLTree._AST.ASTNode));
    uint64_t v25 = swift_projectBox();
    outlined init with copy of MEProgram( v25 + *(int *)(v24 + 48),  (uint64_t)v15,  type metadata accessor for DSLTree._AST.ASTNode);
    v23(v30, v15, v7);
    uint64_t v26 = type metadata accessor for AST.GlobalMatchingOptionSequence();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56LL))(v22, 1LL, 1LL, v26);
    Diagnostics.init()();
    AST.init(_:globalOptions:diags:)();
    PrettyPrinter.printAsCanonical(_:delimiters:terminateLine:)();
    return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v12, v29);
  }

  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v18, 1LL, 1LL, v7);
    uint64_t result = outlined destroy of (range: Range<String.Index>, value: Any?)?( (uint64_t)v18,  &demangling cache variable for type metadata for AST.Node?);
    __break(1u);
  }

  return result;
}

char *DSLTree.Node.getNamedCaptures()(unint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v23 = MEMORY[0x18961AFE8];
  switch((a1 >> 59) & 0x1E | (a1 >> 2) & 1)
  {
    case 1uLL:
      uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFFFFBLL) + 0x10);
      uint64_t v8 = *(void *)(v7 + 16);
      if (v8)
      {
        unint64_t v9 = 0LL;
        uint64_t v10 = (char *)MEMORY[0x18961AFE8];
        while (1)
        {
          unint64_t v11 = *(void *)(v7 + 16);
          if (v9 >= v11)
          {
            __break(1u);
LABEL_30:
            __break(1u);
LABEL_31:
            __break(1u);
LABEL_32:
            __break(1u);
LABEL_33:
            __break(1u);
            goto LABEL_34;
          }

          uint64_t v12 = *(void *)(v7 + 32 + 8 * v9);
          swift_retain();
          unint64_t v6 = DSLTree.Node.getNamedCaptures()(v12);
          swift_release();
          int64_t v5 = *(void *)(v6 + 16);
          int64_t v13 = *((void *)v10 + 2);
          int64_t v4 = v13 + v5;
          if (__OFADD__(v13, v5)) {
            goto LABEL_31;
          }
          char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
          if ((_DWORD)isUniquelyReferenced_nonNull_native && v4 <= *((void *)v10 + 3) >> 1)
          {
            if (!*(void *)(v6 + 16)) {
              goto LABEL_4;
            }
          }

          else
          {
            if (v13 <= v4) {
              int64_t v15 = v13 + v5;
            }
            else {
              int64_t v15 = v13;
            }
            uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( isUniquelyReferenced_nonNull_native,  v15,  1,  v10);
            if (!*(void *)(v6 + 16))
            {
LABEL_4:
              swift_bridgeObjectRelease();
              if (v5) {
                goto LABEL_30;
              }
              goto LABEL_5;
            }
          }

          unint64_t v11 = *((void *)v10 + 2);
          swift_arrayInitWithCopy();
          swift_bridgeObjectRelease();
          if (v5)
          {
            uint64_t v16 = *((void *)v10 + 2);
            BOOL v17 = __OFADD__(v16, v5);
            unint64_t v11 = v16 + v5;
            if (v17) {
              goto LABEL_33;
            }
            *((void *)v10 + 2) = v11;
          }

uint64_t PrettyPrinter.printAsPattern(convertedFromAST:isTopLevel:)(unint64_t a1, int a2)
{
  LODWORD(v66) = a2;
  uint64_t v44 = type metadata accessor for AST.Atom.CharacterProperty();
  _BYTE v43[4] = *(void *)(v44 - 8);
  MEMORY[0x1895F8858](v44);
  v43[3] = (char *)v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v49 = type metadata accessor for AST.Atom.Kind();
  uint64_t v47 = *(void *)(v49 - 8);
  MEMORY[0x1895F8858](v49);
  char v48 = (char *)v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DSLTree._AST.Atom(0LL);
  MEMORY[0x1895F8858](v6);
  unsigned int v50 = (char *)v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v53 = type metadata accessor for DSLTree.Atom(0LL);
  uint64_t v8 = MEMORY[0x1895F8858](v53);
  int v54 = (char *)v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = MEMORY[0x1895F8858](v8);
  int v55 = (char *)v43 - v11;
  uint64_t v12 = MEMORY[0x1895F8858](v10);
  v43[1] = (char *)v43 - v13;
  MEMORY[0x1895F8858](v12);
  void v43[2] = (char *)v43 - v14;
  uint64_t v15 = type metadata accessor for AST.Quantification.Amount();
  uint64_t v62 = *(void *)(v15 - 8);
  uint64_t v63 = v15;
  MEMORY[0x1895F8858](v15);
  int v61 = (char *)v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v60 = type metadata accessor for AST.Quantification.Kind();
  uint64_t v58 = *(void *)(v60 - 8);
  uint64_t v17 = MEMORY[0x1895F8858](v60);
  int v51 = (char *)v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = MEMORY[0x1895F8858](v17);
  int v59 = (char *)v43 - v20;
  uint64_t v21 = MEMORY[0x1895F8858](v19);
  int v57 = (char *)v43 - v22;
  uint64_t v23 = MEMORY[0x1895F8858](v21);
  int v56 = (char *)v43 - v24;
  MEMORY[0x1895F8858](v23);
  unint64_t v46 = (char *)v43 - v25;
  uint64_t v26 = type metadata accessor for DSLTree._AST.QuantificationKind(0LL);
  MEMORY[0x1895F8858](v26);
  unint64_t v45 = (char *)v43 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AST.Quantification.Kind?);
  MEMORY[0x1895F8858](v28);
  int v64 = (char *)v43 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = type metadata accessor for DSLTree.QuantificationKind(0LL);
  uint64_t v31 = MEMORY[0x1895F8858](v30);
  MEMORY[0x1895F8858](v31);
  uint64_t v52 = (char *)v43 - v32;
  uint64_t v33 = type metadata accessor for DSLTree._AST.QuantificationAmount(0LL);
  MEMORY[0x1895F8858](v33);
  int v65 = (char *)v43 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v35 = type metadata accessor for AST.Group.Kind();
  MEMORY[0x1895F8858](v35);
  uint64_t v36 = type metadata accessor for DSLTree._AST.GroupKind(0LL);
  MEMORY[0x1895F8858](v36);
  unint64_t v68 = a1;
  uint64_t v37 = PrettyPrinter.maxTopDownLevels.getter();
  if ((v38 & 1) != 0 || PrettyPrinter.depth.getter() < v37)
  {
    uint64_t v39 = PrettyPrinter.minBottomUpLevels.getter();
    if ((v40 & 1) != 0
      || (uint64_t v41 = v39,
          lazy protocol witness table accessor for type DSLTree._Tree and conformance DSLTree._Tree(),
          v41 < _TreeNode.height.getter()))
    {
      uint64_t v67 = v2;
      __asm { BR              X10 }
    }
  }

  return PrettyPrinter.printBackoff(_:)(a1);
}

uint64_t closure #1 in PrettyPrinter.printInlineMatchingOptions()(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v35 = a1;
  uint64_t v5 = type metadata accessor for AST.MatchingOption.Kind();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t result = MEMORY[0x1895F8858](v5);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *(void *)(a2 + 16);
  if (v10)
  {
    uint64_t v11 = *(void *)(type metadata accessor for AST.MatchingOption() - 8);
    uint64_t v12 = a2 + ((*(unsigned __int8 *)(v11 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    uint64_t v13 = 1702195828LL;
    if ((a3 & 1) == 0) {
      uint64_t v13 = 0x65736C6166LL;
    }
    uint64_t v34 = v13;
    if ((a3 & 1) != 0) {
      uint64_t v14 = (void *)0xE400000000000000LL;
    }
    else {
      uint64_t v14 = (void *)0xE500000000000000LL;
    }
    uint64_t v15 = *(void *)(v11 + 72);
    int v16 = *MEMORY[0x18961C2E8];
    unint64_t v32 = 0x8000000182DA3DB0LL;
    int v33 = *MEMORY[0x18961C350];
    int v31 = *MEMORY[0x18961C2B8];
    unint64_t v30 = 0x8000000182DA3D90LL;
    int v17 = *MEMORY[0x18961C300];
    int v28 = *MEMORY[0x18961C2D8];
    int v29 = v17;
    int v26 = *MEMORY[0x18961C308];
    int v24 = *MEMORY[0x18961C2E0];
    int v22 = *MEMORY[0x18961C2C0];
    unint64_t v27 = 0x8000000182DA3E30LL;
    unint64_t v25 = 0x8000000182DA3E10LL;
    unint64_t v23 = 0x8000000182DA3DF0LL;
    unint64_t v21 = 0x8000000182DA3DD0LL;
    while (1)
    {
      AST.MatchingOption.kind.getter();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v6 + 88))(v9, v5);
      if ((_DWORD)result == v16) {
        break;
      }
      if ((_DWORD)result == v33)
      {
        v36._uint64_t countAndFlagsBits = 0LL;
        v36._uint64_t object = (void *)0xE000000000000000LL;
        _StringGuts.grow(_:)(28LL);
        swift_bridgeObjectRelease();
        v36._uint64_t countAndFlagsBits = 0xD000000000000019LL;
        uint64_t v18 = (void *)v32;
        goto LABEL_23;
      }

      if ((_DWORD)result == v31)
      {
        v36._uint64_t countAndFlagsBits = 0LL;
        v36._uint64_t object = (void *)0xE000000000000000LL;
        _StringGuts.grow(_:)(23LL);
        swift_bridgeObjectRelease();
        v36._uint64_t countAndFlagsBits = 0xD000000000000014LL;
        uint64_t v18 = (void *)v30;
        goto LABEL_23;
      }

      if ((_DWORD)result != v29)
      {
        if ((_DWORD)result == v28)
        {
          v36._uint64_t countAndFlagsBits = 0LL;
          v36._uint64_t object = (void *)0xE000000000000000LL;
          _StringGuts.grow(_:)(20LL);
          swift_bridgeObjectRelease();
          v36._uint64_t countAndFlagsBits = 0xD000000000000011LL;
          uint64_t v18 = (void *)v27;
        }

        else if ((_DWORD)result == v26)
        {
          v36._uint64_t countAndFlagsBits = 0LL;
          v36._uint64_t object = (void *)0xE000000000000000LL;
          _StringGuts.grow(_:)(30LL);
          swift_bridgeObjectRelease();
          v36._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
          uint64_t v18 = (void *)v25;
        }

        else if ((_DWORD)result == v24)
        {
          v36._uint64_t countAndFlagsBits = 0LL;
          v36._uint64_t object = (void *)0xE000000000000000LL;
          _StringGuts.grow(_:)(24LL);
          swift_bridgeObjectRelease();
          v36._uint64_t countAndFlagsBits = 0xD000000000000015LL;
          uint64_t v18 = (void *)v23;
        }

        else
        {
          if ((_DWORD)result != v22)
          {
            uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
            goto LABEL_24;
          }

          v36._uint64_t countAndFlagsBits = 0LL;
          v36._uint64_t object = (void *)0xE000000000000000LL;
          _StringGuts.grow(_:)(28LL);
          swift_bridgeObjectRelease();
          v36._uint64_t countAndFlagsBits = 0xD000000000000019LL;
          uint64_t v18 = (void *)v21;
        }

        goto LABEL_23;
      }

LABEL_24:
      v12 += v15;
      if (!--v10) {
        return result;
      }
    }

    v36._uint64_t countAndFlagsBits = 0LL;
    v36._uint64_t object = (void *)0xE000000000000000LL;
    _StringGuts.grow(_:)(16LL);
    swift_bridgeObjectRelease();
    v36._uint64_t countAndFlagsBits = 0x7365726F6E67692ELL;
    uint64_t v18 = (void *)0xED00002865736143LL;
LABEL_23:
    v36._uint64_t object = v18;
    v19._uint64_t countAndFlagsBits = v34;
    v19._uint64_t object = v14;
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20._uint64_t countAndFlagsBits = 41LL;
    v20._uint64_t object = (void *)0xE100000000000000LL;
    String.append(_:)(v20);
    PrettyPrinter.print(_:)(v36);
    uint64_t result = swift_bridgeObjectRelease();
    goto LABEL_24;
  }

  return result;
}

  if (v5 < 2) {
    return 0LL;
  }
  uint64_t v14 = (*(uint64_t (**)(void))(v4 + 48))();
  if (v14 >= 2) {
    return v14 - 1;
  }
  else {
    return 0LL;
  }
}

Swift::Void __swiftcall PrettyPrinter.printConcatenationAsPattern(_:isTopLevel:)( Swift::OpaquePointer _, Swift::Bool isTopLevel)
{
  BOOL v3 = isTopLevel;
  uint64_t v99 = type metadata accessor for DSLTree.Atom(0LL);
  uint64_t v5 = MEMORY[0x1895F8858](v99);
  uint64_t v98 = (int *)&v92[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  MEMORY[0x1895F8858](v5);
  uint64_t v97 = (uint64_t *)&v92[-v7];
  unint64_t v8 = *((void *)_._rawValue + 2);
  uint64_t v94 = v2;
  BOOL v93 = v3;
  if (v8)
  {
    *(void *)&v115[0] = MEMORY[0x18961AFE8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0LL, v8, 0);
    uint64_t v9 = *(void *)&v115[0];
    uint64_t v10 = (unint64_t *)((char *)_._rawValue + 32);
    do
    {
      unint64_t v12 = *v10++;
      unint64_t v11 = v12;
      *(void *)&v115[0] = v9;
      unint64_t v13 = *(void *)(v9 + 16);
      unint64_t v14 = *(void *)(v9 + 24);
      swift_retain();
      if (v13 >= v14 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v14 > 1),  v13 + 1,  1);
        uint64_t v9 = *(void *)&v115[0];
      }

      *(void *)(v9 + 16) = v13 + 1;
      uint64_t v15 = v9 + 24 * v13;
      *(void *)(v15 + 32) = v11;
      *(void *)(v15 + 40) = 0LL;
      *(_BYTE *)(v15 + 48) = 0;
      --v8;
    }

    while (v8);
    unint64_t v16 = v13 + 1;
    v111._uint64_t countAndFlagsBits = 0LL;
    v111._uint64_t object = (void *)0xE000000000000000LL;
  }

  else
  {
    uint64_t v9 = MEMORY[0x18961AFE8];
    unint64_t v16 = *(void *)(MEMORY[0x18961AFE8] + 16LL);
    v111._uint64_t countAndFlagsBits = 0LL;
    v111._uint64_t object = (void *)0xE000000000000000LL;
    int v100 = (char *)MEMORY[0x18961AFE8];
    if (!v16)
    {
LABEL_55:
      swift_bridgeObjectRelease();
      uint64_t v82 = swift_bridgeObjectRelease();
      uint64_t v85 = v100;
      goto LABEL_44;
    }
  }

  unint64_t v17 = 0LL;
  uint64_t v18 = v9 + 48;
  int v100 = (char *)MEMORY[0x18961AFE8];
  unint64_t v101 = v16;
  unint64_t v95 = v16 - 1;
  uint64_t v96 = v9 + 48;
  uint64_t v102 = v9;
LABEL_11:
  _._unint64_t rawValue = 0LL;
  Swift::String v19 = (char *)(v18 + 24 * v17);
  unint64_t v20 = v17;
  do
  {
    if (v20 >= *(void *)(v9 + 16))
    {
      __break(1u);
      goto LABEL_57;
    }

    unint64_t v8 = *((void *)v19 - 2);
    uint64_t v22 = *((void *)v19 - 1);
    unint64_t v17 = v20 + 1;
    char v23 = *v19;
    if ((*v19 & 1) != 0)
    {
LABEL_27:
      if (((uint64_t)_._rawValue & 1) != 0)
      {
        uint64_t countAndFlagsBits = v111._countAndFlagsBits;
        uint64_t object = v111._object;
        *(void *)&__int128 v104 = 34LL;
        *((void *)&v104 + 1) = 0xE100000000000000LL;
        outlined copy of PrettyPrinter.NodeToPrint(v8, v22, v23);
        v69._uint64_t countAndFlagsBits = countAndFlagsBits;
        v69._uint64_t object = object;
        String.append(_:)(v69);
        v70._uint64_t countAndFlagsBits = 34LL;
        v70._uint64_t object = (void *)0xE100000000000000LL;
        String.append(_:)(v70);
        swift_bridgeObjectRelease();
        __int128 v71 = v104;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          int v100 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v100 + 2) + 1LL,  1,  v100,  &demangling cache variable for type metadata for _ContiguousArrayStorage<PrettyPrinter.NodeToPrint>);
        }
        unint64_t v73 = *((void *)v100 + 2);
        unint64_t v72 = *((void *)v100 + 3);
        if (v73 >= v72 >> 1) {
          int v100 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v72 > 1),  v73 + 1,  1,  v100,  &demangling cache variable for type metadata for _ContiguousArrayStorage<PrettyPrinter.NodeToPrint>);
        }
        unint64_t v74 = v100;
        *((void *)v100 + 2) = v73 + 1;
        uint64_t v75 = &v74[24 * v73];
        *((_OWORD *)v75 + 2) = v71;
        v75[48] = 1;
        v111._uint64_t countAndFlagsBits = 0LL;
        v111._uint64_t object = (void *)0xE000000000000000LL;
      }

      else
      {
        outlined copy of PrettyPrinter.NodeToPrint(v8, v22, v23);
        unint64_t v74 = v100;
      }

      int v100 = v74;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v18 = v96;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        int v100 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v100 + 2) + 1LL,  1,  v100,  &demangling cache variable for type metadata for _ContiguousArrayStorage<PrettyPrinter.NodeToPrint>);
      }
      unint64_t v16 = v101;
      _._unint64_t rawValue = (void *)*((void *)v100 + 2);
      unint64_t v77 = *((void *)v100 + 3);
      if ((unint64_t)_._rawValue >= v77 >> 1)
      {
        uint64_t v80 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v77 > 1),  (int64_t)_._rawValue + 1,  1,  v100,  &demangling cache variable for type metadata for _ContiguousArrayStorage<PrettyPrinter.NodeToPrint>);
        unint64_t v16 = v101;
        int v100 = v80;
      }

      uint64_t v78 = v100;
      *((void *)v100 + 2) = (char *)_._rawValue + 1;
      uint64_t v79 = &v78[24 * (uint64_t)_._rawValue];
      *((void *)v79 + 4) = v8;
      *((void *)v79 + 5) = v22;
      v79[48] = v23;
      uint64_t v9 = v102;
      if (v95 == v20)
      {
        LOBYTE(v3) = v93;
        goto LABEL_55;
      }

      goto LABEL_11;
    }

    int v24 = (v8 >> 59) & 0x1E | (v8 >> 2) & 1;
    if (v24 == 10)
    {
      uint64_t v34 = *(void *)((v8 & 0xFFFFFFFFFFFFFFBLL) + 0x10);
      unint64_t v35 = *(void *)((v8 & 0xFFFFFFFFFFFFFFBLL) + 0x18);
      outlined copy of PrettyPrinter.NodeToPrint(*((void *)v19 - 2), *((void *)v19 - 1), 0);
      unint64_t v36 = String.subscript.getter();
      specialized Collection<>._ranges<A>(of:)(92LL, 0xE100000000000000LL, v36, v37, v38, v39, (uint64_t)&v104);
      swift_bridgeObjectRelease();
      v115[4] = v108;
      v115[5] = v109;
      v115[6] = v110;
      v115[0] = v104;
      v115[1] = v105;
      v115[2] = v106;
      v115[3] = v107;
      uint64_t v40 = specialized RangeReplaceableCollection._replacing<A, B>(_:with:maxReplacements:)( (uint64_t)v115,  23644LL,  0xE200000000000000LL,  0x7FFFFFFFFFFFFFFFuLL,  v34,  v35);
      unint64_t v42 = v41;
      outlined release of RangesCollection<ZSearcher<Substring>>((uint64_t)v115);
      unint64_t v43 = String.subscript.getter();
      specialized Collection<>._ranges<A>(of:)(34LL, 0xE100000000000000LL, v43, v44, v45, v46, (uint64_t)&v104);
      swift_bridgeObjectRelease();
      v114[4] = v108;
      v114[5] = v109;
      v114[6] = v110;
      v114[0] = v104;
      v114[1] = v105;
      v114[2] = v106;
      v114[3] = v107;
      uint64_t v47 = specialized RangeReplaceableCollection._replacing<A, B>(_:with:maxReplacements:)( (uint64_t)v114,  8796LL,  0xE200000000000000LL,  0x7FFFFFFFFFFFFFFFuLL,  v40,  v42);
      uint64_t v33 = v48;
      outlined release of RangesCollection<ZSearcher<Substring>>((uint64_t)v114);
      swift_bridgeObjectRelease();
      uint64_t v32 = v47;
LABEL_26:
      uint64_t v66 = v33;
      String.append(_:)(*(Swift::String *)&v32);
      swift_bridgeObjectRelease();
      outlined consume of PrettyPrinter.NodeToPrint(v8, v22, 0);
      unint64_t v16 = v101;
      goto LABEL_15;
    }

    if (v24 != 9)
    {
      if (v24 != 8) {
        goto LABEL_27;
      }
      uint64_t v25 = swift_projectBox();
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload)
      {
        if (EnumCaseMultiPayload != 1) {
          goto LABEL_27;
        }
        uint64_t v27 = v25;
        int v28 = v98;
        outlined init with copy of MEProgram(v27, (uint64_t)v98, type metadata accessor for DSLTree.Atom);
        int v29 = *v28;
        *(void *)&__int128 v104 = 8090972LL;
        *((void *)&v104 + 1) = 0xE300000000000000LL;
        int v103 = v29;
        outlined copy of PrettyPrinter.NodeToPrint(v8, v22, 0);
        lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        v30._uint64_t countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
        String.append(_:)(v30);
        swift_bridgeObjectRelease();
        v31._uint64_t countAndFlagsBits = 125LL;
        v31._uint64_t object = (void *)0xE100000000000000LL;
        String.append(_:)(v31);
        uint64_t v33 = *((void *)&v104 + 1);
        uint64_t v32 = v104;
      }

      else
      {
        uint64_t v49 = v25;
        unsigned int v50 = v97;
        outlined init with copy of MEProgram(v49, (uint64_t)v97, type metadata accessor for DSLTree.Atom);
        uint64_t v52 = *v50;
        unint64_t v51 = v50[1];
        outlined copy of PrettyPrinter.NodeToPrint(v8, v22, 0);
        unint64_t v53 = String.subscript.getter();
        specialized Collection<>._ranges<A>(of:)(92LL, 0xE100000000000000LL, v53, v54, v55, v56, (uint64_t)&v104);
        swift_bridgeObjectRelease();
        v113[4] = v108;
        v113[5] = v109;
        v113[6] = v110;
        v113[0] = v104;
        v113[1] = v105;
        v113[2] = v106;
        v113[3] = v107;
        uint64_t v57 = specialized RangeReplaceableCollection._replacing<A, B>(_:with:maxReplacements:)( (uint64_t)v113,  23644LL,  0xE200000000000000LL,  0x7FFFFFFFFFFFFFFFuLL,  v52,  v51);
        unint64_t v59 = v58;
        outlined release of RangesCollection<ZSearcher<Substring>>((uint64_t)v113);
        swift_bridgeObjectRelease();
        unint64_t v60 = String.subscript.getter();
        specialized Collection<>._ranges<A>(of:)(34LL, 0xE100000000000000LL, v60, v61, v62, v63, (uint64_t)&v104);
        swift_bridgeObjectRelease();
        v112[4] = v108;
        v112[5] = v109;
        v112[6] = v110;
        v112[0] = v104;
        v112[1] = v105;
        v112[2] = v106;
        v112[3] = v107;
        uint64_t v64 = specialized RangeReplaceableCollection._replacing<A, B>(_:with:maxReplacements:)( (uint64_t)v112,  8796LL,  0xE200000000000000LL,  0x7FFFFFFFFFFFFFFFuLL,  v57,  v59);
        uint64_t v33 = v65;
        outlined release of RangesCollection<ZSearcher<Substring>>((uint64_t)v112);
        swift_bridgeObjectRelease();
        uint64_t v32 = v64;
      }

      goto LABEL_26;
    }

    unint64_t v21 = v111._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    if (!v21) {
      goto LABEL_27;
    }
LABEL_15:
    v19 += 24;
    _._unint64_t rawValue = (void *)1;
    ++v20;
    uint64_t v9 = v102;
  }

  while (v16 != v17);
  swift_bridgeObjectRelease();
  *(void *)&__int128 v104 = 34LL;
  *((void *)&v104 + 1) = 0xE100000000000000LL;
  String.append(_:)(v111);
  v81._uint64_t countAndFlagsBits = 34LL;
  v81._uint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v81);
  swift_bridgeObjectRelease();
  unint64_t v8 = *((void *)&v104 + 1);
  _._unint64_t rawValue = (void *)v104;
  Swift::String v19 = v100;
  uint64_t v82 = swift_isUniquelyReferenced_nonNull_native();
  if ((v82 & 1) == 0) {
    goto LABEL_58;
  }
  while (2)
  {
    LOBYTE(v3) = v93;
    unint64_t v84 = *((void *)v100 + 2);
    unint64_t v83 = *((void *)v100 + 3);
    if (v84 >= v83 >> 1)
    {
      uint64_t v82 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v83 > 1),  v84 + 1,  1,  v100,  &demangling cache variable for type metadata for _ContiguousArrayStorage<PrettyPrinter.NodeToPrint>);
      int v100 = (char *)v82;
    }

    uint64_t v85 = v100;
    *((void *)v100 + 2) = v84 + 1;
    unint64_t v86 = &v85[24 * v84];
    *((Swift::OpaquePointer *)v86 + 4) = _;
    *((void *)v86 + 5) = v8;
    v86[48] = 1;
LABEL_44:
    unint64_t v87 = v85;
    uint64_t v88 = (char *)*((void *)v85 + 2);
    if (v3)
    {
      if (!v88)
      {
LABEL_46:
        swift_bridgeObjectRelease();
        return;
      }

      goto LABEL_48;
    }

    if (v88 == (char *)1)
    {
LABEL_48:
      Swift::String v19 = 0LL;
      uint64_t v89 = (unsigned __int8 *)(v85 + 48);
      while (v19 < v88)
      {
        _._unint64_t rawValue = (void *)*((void *)v89 - 2);
        unint64_t v8 = *((void *)v89 - 1);
        int v91 = *v89;
        if (v91 == 1)
        {
          swift_bridgeObjectRetain();
          v90._uint64_t countAndFlagsBits = (uint64_t)_._rawValue;
          v90._uint64_t object = (void *)v8;
          PrettyPrinter.print(_:)(v90);
        }

        else
        {
          swift_retain();
          PrettyPrinter.printAsPattern(convertedFromAST:isTopLevel:)(_._rawValue, 0LL);
        }

        ++v19;
        outlined consume of PrettyPrinter.NodeToPrint((uint64_t)_._rawValue, v8, v91);
        uint64_t v88 = (char *)*((void *)v87 + 2);
        v89 += 24;
        if (v19 == v88) {
          goto LABEL_46;
        }
      }

LABEL_57:
      __break(1u);
LABEL_58:
      uint64_t v82 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v19 + 2) + 1LL,  1,  v19,  &demangling cache variable for type metadata for _ContiguousArrayStorage<PrettyPrinter.NodeToPrint>);
      int v100 = (char *)v82;
      continue;
    }

    break;
  }

  MEMORY[0x1895F8858](v82);
  *(void *)&v92[-16] = v87;
  PrettyPrinter.printBlock(_:startDelimiter:endDelimiter:_:)();
  swift_bridgeObjectRelease();
}

uint64_t AST.Quantification.Amount._patternBase.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for AST.Atom.Number();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x1895F8858](v2);
  uint64_t v48 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = MEMORY[0x1895F8858](v4);
  unint64_t v8 = (char *)&v47 - v7;
  uint64_t v9 = MEMORY[0x1895F8858](v6);
  unint64_t v11 = (char *)&v47 - v10;
  uint64_t v12 = MEMORY[0x1895F8858](v9);
  unint64_t v14 = (char *)&v47 - v13;
  MEMORY[0x1895F8858](v12);
  unint64_t v16 = (char *)&v47 - v15;
  uint64_t v17 = type metadata accessor for AST.Quantification.Amount();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1895F8858](v17);
  unint64_t v20 = (char *)&v47 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, v1, v17);
  int v21 = (*(uint64_t (**)(char *, uint64_t))(v18 + 88))(v20, v17);
  if (v21 == *MEMORY[0x18961C3E8])
  {
    (*(void (**)(char *, uint64_t))(v18 + 96))(v20, v17);
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v16, v20, v2);
    v49[0] = 0LL;
    v49[1] = 0xE000000000000000LL;
    _StringGuts.grow(_:)(17LL);
    swift_bridgeObjectRelease();
    strcpy((char *)v49, "Repeat(count: ");
    HIBYTE(v49[1]) = -18;
    uint64_t v22 = AST.Atom.Number._patternBase.getter();
    int v24 = v23;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v16, v2);
LABEL_3:
    v25._uint64_t countAndFlagsBits = v22;
    v25._uint64_t object = v24;
    String.append(_:)(v25);
LABEL_4:
    swift_bridgeObjectRelease();
    uint64_t v26 = 41LL;
    unint64_t v27 = 0xE100000000000000LL;
LABEL_7:
    String.append(_:)(*(Swift::String *)&v26);
    return v49[0];
  }

  if (v21 == *MEMORY[0x18961C3F0])
  {
    (*(void (**)(char *, uint64_t))(v18 + 96))(v20, v17);
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v14, v20, v2);
    strcpy((char *)v49, "Repeat(");
    v49[1] = 0xE700000000000000LL;
    uint64_t v28 = AST.Atom.Number._patternBase.getter();
    Swift::String v30 = v29;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v14, v2);
    v31._uint64_t countAndFlagsBits = v28;
    v31._uint64_t object = v30;
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    uint64_t v26 = 690892334LL;
    unint64_t v27 = 0xE400000000000000LL;
    goto LABEL_7;
  }

  if (v21 == *MEMORY[0x18961C3D8])
  {
    (*(void (**)(char *, uint64_t))(v18 + 96))(v20, v17);
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v11, v20, v2);
    strcpy((char *)v49, "Repeat(...");
    BYTE3(v49[1]) = 0;
    HIDWORD(v49[1]) = -369098752;
    uint64_t v22 = AST.Atom.Number._patternBase.getter();
    int v24 = v33;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v11, v2);
    goto LABEL_3;
  }

  if (v21 == *MEMORY[0x18961C3D0])
  {
    (*(void (**)(char *, uint64_t))(v18 + 96))(v20, v17);
    unint64_t v35 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
    v35(v8, v20, v2);
    unint64_t v36 = v48;
    v35(v48, v34, v2);
    strcpy((char *)v49, "Repeat(");
    v49[1] = 0xE700000000000000LL;
    uint64_t v37 = AST.Atom.Number._patternBase.getter();
    uint64_t v39 = v38;
    uint64_t v40 = *(void (**)(char *, uint64_t))(v3 + 8);
    v40(v8, v2);
    v41._uint64_t countAndFlagsBits = v37;
    v41._uint64_t object = v39;
    String.append(_:)(v41);
    swift_bridgeObjectRelease();
    v42._uint64_t countAndFlagsBits = 3026478LL;
    v42._uint64_t object = (void *)0xE300000000000000LL;
    String.append(_:)(v42);
    uint64_t v43 = AST.Atom.Number._patternBase.getter();
    uint64_t v45 = v44;
    v40(v36, v2);
    v46._uint64_t countAndFlagsBits = v43;
    v46._uint64_t object = v45;
    String.append(_:)(v46);
    goto LABEL_4;
  }

  if (v21 == *MEMORY[0x18961C3C8]) {
    return 0x6F4D724F6F72655ALL;
  }
  if (v21 == *MEMORY[0x18961C3F8]) {
    return 0x726F4D724F656E4FLL;
  }
  if (v21 == *MEMORY[0x18961C400]) {
    return 0x6C616E6F6974704FLL;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void printAtom #1 (_:) in PrettyPrinter.printAsPattern(convertedFromAST:isTopLevel:)( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, Swift::String *a5)
{
  BOOL v9 = *(void *)(a4 + 16) == 0x72656761652ELL && *(void *)(a4 + 24) == 0xE600000000000000LL;
  if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    Swift::String v14 = a5[1];
    swift_bridgeObjectRetain();
    uint64_t v10 = 40LL;
    unint64_t v11 = 0xE100000000000000LL;
  }

  else
  {
    specialized RangeReplaceableCollection<>.removeLast()();
    swift_bridgeObjectRelease();
    Swift::String v14 = a5[1];
    swift_bridgeObjectRetain();
    uint64_t v10 = 8236LL;
    unint64_t v11 = 0xE200000000000000LL;
  }

  String.append(_:)(*(Swift::String *)&v10);
  PrettyPrinter.output(_:)(v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v12._uint64_t countAndFlagsBits = 41LL;
  v12._uint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v12);
  v13._uint64_t countAndFlagsBits = a1;
  v13._uint64_t object = a2;
  PrettyPrinter.output(_:)(v13);
  swift_bridgeObjectRelease();
  PrettyPrinter.terminateLine()();
}

void printSimpleCCC #1 (_:) in PrettyPrinter.printAsPattern(convertedFromAST:isTopLevel:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)a1;
  char v7 = *(_BYTE *)(a1 + 8);
  PrettyPrinter.indent()();
  BOOL v8 = *(void *)(a3 + 16) == 0x72656761652ELL && *(void *)(a3 + 24) == 0xE600000000000000LL;
  if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    BOOL v9 = *(void **)(a4 + 24);
    v15._uint64_t countAndFlagsBits = *(void *)(a4 + 16);
    v15._uint64_t object = v9;
    swift_bridgeObjectRetain();
    uint64_t v10 = 40LL;
    unint64_t v11 = 0xE100000000000000LL;
  }

  else
  {
    specialized RangeReplaceableCollection<>.removeLast()();
    swift_bridgeObjectRelease();
    Swift::String v12 = *(void **)(a4 + 24);
    v15._uint64_t countAndFlagsBits = *(void *)(a4 + 16);
    v15._uint64_t object = v12;
    swift_bridgeObjectRetain();
    uint64_t v10 = 8236LL;
    unint64_t v11 = 0xE200000000000000LL;
  }

  String.append(_:)(*(Swift::String *)&v10);
  PrettyPrinter.output(_:)(v15);
  swift_bridgeObjectRelease();
  v15._uint64_t countAndFlagsBits = v6;
  LOBYTE(v15._object) = v7;
  v16.members._unint64_t rawValue = &v15;
  v16.isInverted = 0;
  PrettyPrinter.printAsPattern(_:wrap:terminateLine:)(v16, 0, v13);
  v14._uint64_t countAndFlagsBits = 41LL;
  v14._uint64_t object = (void *)0xE100000000000000LL;
  PrettyPrinter.output(_:)(v14);
  PrettyPrinter.terminateLine()();
}

Swift::Void __swiftcall PrettyPrinter.printAsPattern(_:wrap:terminateLine:)( _StringProcessing::DSLTree::CustomCharacterClass _, Swift::Bool wrap, Swift::Bool terminateLine)
{
  Swift::Bool isInverted = _.isInverted;
  unint64_t rawValue = (unsigned __int8 *)_.members._rawValue;
  uint64_t v6 = type metadata accessor for DSLTree.CustomCharacterClass.Member(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  BOOL v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *(void *)rawValue;
  int v11 = rawValue[8];
  uint64_t v36 = *(void *)rawValue;
  LOBYTE(v37) = v11;
  if ((DSLTree.CustomCharacterClass.hasUnprintableProperty.getter() & 1) != 0)
  {
    uint64_t v36 = v10;
    LOBYTE(v37) = v11;
    v38.members._unint64_t rawValue = &v36;
    v38.Swift::Bool isInverted = 1;
    PrettyPrinter.printAsRegex(_:asFullRegex:terminateLine:)(v38, wrap, v12);
    return;
  }

  if (*(void *)(v10 + 16) == 1LL)
  {
    outlined init with copy of MEProgram( v10 + ((*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)),  (uint64_t)v9,  type metadata accessor for DSLTree.CustomCharacterClass.Member);
    PrettyPrinter.printAsPattern(_:wrap:)((uint64_t)v9);
    uint64_t v13 = outlined destroy of MEProgram((uint64_t)v9, type metadata accessor for DSLTree.CustomCharacterClass.Member);
    if (wrap) {
      PrettyPrinter.terminateLine()();
    }
    if (v11)
    {
LABEL_22:
      MEMORY[0x1895F8858](v13);
      *((_BYTE *)&v32 - 16) = wrap;
      PrettyPrinter.printIndented(_:)();
    }
  }

  else
  {
    uint64_t v36 = 0LL;
    unint64_t v37 = 0xE000000000000000LL;
    uint64_t v14 = swift_bridgeObjectRetain();
    uint64_t v15 = specialized _ArrayProtocol.filter(_:)(v14, (uint64_t)&v36);
    uint64_t v16 = v15;
    uint64_t v18 = v36;
    uint64_t v17 = (void *)v37;
    uint64_t v19 = HIBYTE(v37) & 0xF;
    if ((v37 & 0x2000000000000000LL) == 0) {
      uint64_t v19 = v36 & 0xFFFFFFFFFFFFLL;
    }
    if (v19 && !*(void *)(v15 + 16))
    {
      swift_bridgeObjectRelease();
      unint64_t v34 = 0LL;
      unint64_t v35 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(24LL);
      swift_bridgeObjectRelease();
      unint64_t v34 = 0xD000000000000015LL;
      unint64_t v35 = 0x8000000182DA3F60LL;
      v33._uint64_t countAndFlagsBits = 34LL;
      v33._uint64_t object = (void *)0xE100000000000000LL;
      swift_bridgeObjectRetain();
      v23._uint64_t countAndFlagsBits = v18;
      v23._uint64_t object = v17;
      String.append(_:)(v23);
      v24._uint64_t countAndFlagsBits = 34LL;
      v24._uint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v24);
      swift_bridgeObjectRelease();
      String.append(_:)(v33);
      swift_bridgeObjectRelease();
      v25._uint64_t countAndFlagsBits = 41LL;
      v25._uint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v25);
      uint64_t v27 = v34;
      uint64_t v26 = (void *)v35;
      PrettyPrinter.indent()();
      if (isInverted)
      {
        unint64_t v34 = 677736015LL;
        unint64_t v35 = 0xE400000000000000LL;
        v28._uint64_t countAndFlagsBits = v27;
        v28._uint64_t object = v26;
        String.append(_:)(v28);
        swift_bridgeObjectRelease();
        v29._uint64_t countAndFlagsBits = 41LL;
        v29._uint64_t object = (void *)0xE100000000000000LL;
        String.append(_:)(v29);
        unint64_t v30 = v34;
        uint64_t v26 = (void *)v35;
      }

      else
      {
        unint64_t v30 = v27;
      }

      Swift::String v31 = v26;
      PrettyPrinter.output(_:)(*(Swift::String *)&v30);
      swift_bridgeObjectRelease();
      if (wrap) {
        PrettyPrinter.terminateLine()();
      }
      uint64_t v13 = swift_bridgeObjectRelease();
      if (v11) {
        goto LABEL_22;
      }
    }

    else
    {
      v20._uint64_t countAndFlagsBits = 0x6574636172616843LL;
      v20._uint64_t object = (void *)0xEF287373616C4372LL;
      PrettyPrinter.print(_:)(v20);
      MEMORY[0x1895F8858](v21);
      *(&v32 - 2) = (uint64_t)&v36;
      *(&v32 - 1) = v16;
      PrettyPrinter.printIndented(_:)();
      swift_bridgeObjectRelease();
      PrettyPrinter.indent()();
      v22._uint64_t countAndFlagsBits = 41LL;
      v22._uint64_t object = (void *)0xE100000000000000LL;
      PrettyPrinter.output(_:)(v22);
      if (wrap) {
        PrettyPrinter.terminateLine()();
      }
      uint64_t v13 = swift_bridgeObjectRelease();
      if (v11) {
        goto LABEL_22;
      }
    }
  }

void DSLTree.Atom._patternBase(_:)(uint64_t a1)
{
  uint64_t v18 = a1;
  uint64_t v2 = type metadata accessor for AST.Quantification.Kind();
  uint64_t v16 = *(void *)(v2 - 8);
  uint64_t v17 = v2;
  MEMORY[0x1895F8858](v2);
  uint64_t v15 = (char *)v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for AST.MatchingOption.Kind();
  uint64_t v20 = *(void *)(v4 - 8);
  uint64_t v21 = v4;
  MEMORY[0x1895F8858](v4);
  uint64_t v19 = type metadata accessor for AST.MatchingOption();
  MEMORY[0x1895F8858](v19);
  uint64_t v5 = type metadata accessor for DSLTree._AST.MatchingOptionSequence(0LL);
  MEMORY[0x1895F8858](v5);
  uint64_t v6 = type metadata accessor for AST.Atom.CharacterProperty();
  v13[2] = *(void *)(v6 - 8);
  v13[3] = v6;
  MEMORY[0x1895F8858](v6);
  v13[1] = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for AST.Atom.Kind();
  MEMORY[0x1895F8858](v14);
  uint64_t v8 = type metadata accessor for DSLTree._AST.Atom(0LL);
  MEMORY[0x1895F8858](v8);
  uint64_t v9 = type metadata accessor for DSLTree.Atom(0LL);
  MEMORY[0x1895F8858](v9);
  outlined init with copy of MEProgram(v1, (uint64_t)v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL), v11);
  Swift::Bool v12 = (char *)&loc_182D61990 + *((int *)qword_182D61E70 + swift_getEnumCaseMultiPayload());
  __asm { BR              X10 }

uint64_t sub_182D619A0()
{
  uint64_t v1 = String._quoted.getter(*(void *)v0, *(void *)(v0 + 8));
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t DSLTree.CustomCharacterClass.isSimplePrint.getter()
{
  uint64_t v1 = type metadata accessor for DSLTree.Atom(0LL);
  MEMORY[0x1895F8858](v1);
  uint64_t v3 = (char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for DSLTree.CustomCharacterClass.Member(0LL);
  uint64_t v5 = MEMORY[0x1895F8858](v4);
  uint64_t v6 = MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)&v29 - v7;
  uint64_t v9 = MEMORY[0x1895F8858](v6);
  int v11 = (char *)&v29 - v10;
  MEMORY[0x1895F8858](v9);
  uint64_t v15 = (char *)&v29 - v12;
  uint64_t v16 = *v0;
  uint64_t v17 = *(void *)(*v0 + 16);
  if (v17 != 1)
  {
    uint64_t result = MEMORY[0x18961AFE8];
    uint64_t v36 = MEMORY[0x18961AFE8];
    if (!v17)
    {
LABEL_26:
      uint64_t v28 = *(void *)(result + 16);
      swift_release();
      return v28 == 0;
    }

    uint64_t v32 = v14;
    uint64_t v29 = v1;
    unint64_t v20 = 0LL;
    uint64_t v21 = MEMORY[0x18961AFE8];
    unint64_t v30 = v3;
    uint64_t v31 = v4;
    uint64_t v34 = v13;
    uint64_t v35 = v17;
    uint64_t v33 = v16;
    while (1)
    {
      if (v20 >= *(void *)(v16 + 16))
      {
        __break(1u);
        return result;
      }

      unint64_t v22 = (*(unsigned __int8 *)(v13 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
      uint64_t v23 = *(void *)(v13 + 72);
      outlined init with copy of MEProgram( v16 + v22 + v23 * v20,  (uint64_t)v11,  type metadata accessor for DSLTree.CustomCharacterClass.Member);
      outlined init with copy of MEProgram( (uint64_t)v11,  (uint64_t)v8,  type metadata accessor for DSLTree.CustomCharacterClass.Member);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 4 || EnumCaseMultiPayload == 3)
      {
        outlined destroy of MEProgram((uint64_t)v8, type metadata accessor for DSLTree.CustomCharacterClass.Member);
      }

      else
      {
        if (EnumCaseMultiPayload)
        {
          outlined destroy of MEProgram((uint64_t)v8, type metadata accessor for DSLTree.CustomCharacterClass.Member);
          goto LABEL_19;
        }

        outlined init with take of DSLTree.QuantificationKind( (uint64_t)v8,  (uint64_t)v3,  type metadata accessor for DSLTree.Atom);
        int v25 = swift_getEnumCaseMultiPayload();
        if (v25)
        {
          if (v25 != 1)
          {
            outlined destroy of MEProgram((uint64_t)v3, type metadata accessor for DSLTree.Atom);
LABEL_19:
            outlined init with take of DSLTree.QuantificationKind( (uint64_t)v11,  v32,  type metadata accessor for DSLTree.CustomCharacterClass.Member);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v21 + 16) + 1LL,  1);
            }
            uint64_t v21 = v36;
            unint64_t v27 = *(void *)(v36 + 16);
            unint64_t v26 = *(void *)(v36 + 24);
            if (v27 >= v26 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v26 > 1,  v27 + 1,  1);
              uint64_t v21 = v36;
            }

            *(void *)(v21 + 16) = v27 + 1;
            uint64_t result = outlined init with take of DSLTree.QuantificationKind( v32,  v21 + v22 + v27 * v23,  type metadata accessor for DSLTree.CustomCharacterClass.Member);
            uint64_t v3 = v30;
            goto LABEL_10;
          }
        }

        else
        {
          outlined destroy of MEProgram((uint64_t)v3, type metadata accessor for DSLTree.Atom);
        }
      }

      uint64_t result = outlined destroy of MEProgram( (uint64_t)v11,  type metadata accessor for DSLTree.CustomCharacterClass.Member);
LABEL_10:
      ++v20;
      uint64_t v13 = v34;
      uint64_t v16 = v33;
      if (v35 == v20)
      {
        uint64_t result = v36;
        goto LABEL_26;
      }
    }
  }

  outlined init with copy of MEProgram( v16 + ((*(unsigned __int8 *)(v13 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80)),  (uint64_t)&v29 - v12,  type metadata accessor for DSLTree.CustomCharacterClass.Member);
  int v18 = swift_getEnumCaseMultiPayload();
  if (v18 == 7 || v18 == 6 || v18 == 5)
  {
    outlined destroy of MEProgram((uint64_t)v15, type metadata accessor for DSLTree.CustomCharacterClass.Member);
    return 0LL;
  }

  else
  {
    outlined destroy of MEProgram((uint64_t)v15, type metadata accessor for DSLTree.CustomCharacterClass.Member);
    return 1LL;
  }

uint64_t AST.Atom._regexBase.getter()
{
  uint64_t v33 = type metadata accessor for AST.Atom.EscapedBuiltin();
  uint64_t v0 = *(void *)(v33 - 8);
  MEMORY[0x1895F8858](v33);
  uint64_t v2 = (char *)&v32 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for AST.Atom.CharacterProperty();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x1895F8858](v3);
  uint64_t v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v5);
  uint64_t v9 = (char *)&v32 - v8;
  uint64_t v10 = type metadata accessor for AST.Atom.Kind();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1895F8858](v10);
  uint64_t v13 = (uint64_t *)((char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  AST.Atom.kind.getter();
  int v14 = (*(uint64_t (**)(uint64_t *, uint64_t))(v11 + 88))(v13, v10);
  if (v14 == *MEMORY[0x18961C748] || v14 == *MEMORY[0x18961C750] || v14 == *MEMORY[0x18961C718])
  {
    (*(void (**)(uint64_t *, uint64_t))(v11 + 8))(v13, v10);
    uint64_t v17 = AST.Atom.literalStringValue.getter();
    if (v18) {
      return v17;
    }
    __break(1u);
  }

  else
  {
    if (v14 == *MEMORY[0x18961C770])
    {
      (*(void (**)(uint64_t *, uint64_t))(v11 + 96))(v13, v10);
      unint64_t v20 = *(void (**)(char *, uint64_t *, uint64_t))(v4 + 32);
      v20(v9, v13, v3);
      uint64_t v19 = AST.Atom.CharacterProperty._regexBase.getter();
      uint64_t v22 = v21;
      v20(v7, (uint64_t *)v9, v3);
      if (v22)
      {
        (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
        return v19;
      }

      uint64_t v34 = 0LL;
      unint64_t v35 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(21LL);
      v27._uint64_t countAndFlagsBits = 0xD000000000000013LL;
      v27._uint64_t object = (void *)0x8000000182DA3B40LL;
      String.append(_:)(v27);
      _print_unlocked<A, B>(_:_:)();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
      return v34;
    }

    if (v14 == *MEMORY[0x18961C760])
    {
      (*(void (**)(uint64_t *, uint64_t))(v11 + 96))(v13, v10);
      uint64_t v23 = v33;
      (*(void (**)(char *, uint64_t *, uint64_t))(v0 + 32))(v2, v13, v33);
      uint64_t v34 = 0LL;
      unint64_t v35 = 0xE000000000000000LL;
      v24._uint64_t countAndFlagsBits = 92LL;
      v24._uint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v24);
      AST.Atom.EscapedBuiltin.character.getter();
      (*(void (**)(char *, uint64_t))(v0 + 8))(v2, v23);
      Character.write<A>(to:)();
LABEL_24:
      swift_bridgeObjectRelease();
      return v34;
    }

    if (v14 == *MEMORY[0x18961C720])
    {
      (*(void (**)(uint64_t *, uint64_t))(v11 + 96))(v13, v10);
      uint64_t v34 = 0LL;
      unint64_t v35 = 0xE000000000000000LL;
      uint64_t v25 = 25436LL;
      unint64_t v26 = 0xE200000000000000LL;
LABEL_23:
      String.append(_:)(*(Swift::String *)&v25);
      Character.write<A>(to:)();
      goto LABEL_24;
    }

    if (v14 == *MEMORY[0x18961C700])
    {
      (*(void (**)(uint64_t *, uint64_t))(v11 + 96))(v13, v10);
      uint64_t v34 = 0LL;
      unint64_t v35 = 0xE000000000000000LL;
      uint64_t v25 = 2968924LL;
      unint64_t v26 = 0xE300000000000000LL;
      goto LABEL_23;
    }

    if (v14 == *MEMORY[0x18961C728])
    {
      (*(void (**)(uint64_t *, uint64_t))(v11 + 96))(v13, v10);
      uint64_t v34 = 0LL;
      unint64_t v35 = 0xE000000000000000LL;
      uint64_t v25 = 0x2D435C2D4D5CLL;
      unint64_t v26 = 0xE600000000000000LL;
      goto LABEL_23;
    }

    if (v14 == *MEMORY[0x18961C710])
    {
      (*(void (**)(uint64_t *, uint64_t))(v11 + 96))(v13, v10);
      v29._uint64_t countAndFlagsBits = *v13;
      unint64_t v30 = (void *)v13[1];
      uint64_t v34 = 8080988LL;
      unint64_t v35 = 0xE300000000000000LL;
      v29._uint64_t object = v30;
      String.append(_:)(v29);
      swift_bridgeObjectRelease();
      v31._uint64_t countAndFlagsBits = 125LL;
      v31._uint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v31);
      return v34;
    }

    if (v14 == *MEMORY[0x18961C708])
    {
      (*(void (**)(uint64_t *, uint64_t))(v11 + 8))(v13, v10);
      return 0xD00000000000001BLL;
    }

    if (v14 == *MEMORY[0x18961C6E8])
    {
      (*(void (**)(uint64_t *, uint64_t))(v11 + 8))(v13, v10);
      return 0xD000000000000017LL;
    }

    if (v14 == *MEMORY[0x18961C758])
    {
      (*(void (**)(uint64_t *, uint64_t))(v11 + 8))(v13, v10);
      return 0xD000000000000014LL;
    }

    if (v14 == *MEMORY[0x18961C730] || v14 == *MEMORY[0x18961C738])
    {
      uint64_t v19 = 0xD000000000000023LL;
      (*(void (**)(uint64_t *, uint64_t))(v11 + 8))(v13, v10);
      return v19;
    }

    if (v14 == *MEMORY[0x18961C740]) {
      return 46LL;
    }
    if (v14 != *MEMORY[0x18961C6F0] && v14 != *MEMORY[0x18961C6F8] && v14 == *MEMORY[0x18961C768]) {
      return 0x2365756C6176233CLL;
    }
  }

  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t String._quoted.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = specialized RangeReplaceableCollection<>._replacing<A, B>(_:with:maxReplacements:)( 92LL,  0xE100000000000000LL,  23644LL,  0xE200000000000000LL,  0x7FFFFFFFFFFFFFFFuLL,  a1,  a2);
  uint64_t v4 = specialized RangeReplaceableCollection<>._replacing<A, B>(_:with:maxReplacements:)( 34LL,  0xE100000000000000LL,  8796LL,  0xE200000000000000LL,  0x7FFFFFFFFFFFFFFFuLL,  v2,  v3);
  uint64_t v6 = v5;
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = v4;
  v7._uint64_t object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = 34LL;
  v8._uint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v8);
  return 34LL;
}

uint64_t DSLTree.CustomCharacterClass.hasUnprintableProperty.getter()
{
  uint64_t v1 = type metadata accessor for DSLTree.CustomCharacterClass.Member(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t result = MEMORY[0x1895F8858](v1);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v6 = 0LL;
  uint64_t v7 = *v0;
  uint64_t v8 = *(void *)(*v0 + 16);
  while (1)
  {
    unint64_t v9 = v6;
    if (v8 == v6) {
      return v8 != v9;
    }
    if (v6 >= *(void *)(v7 + 16)) {
      break;
    }
    ++v6;
    outlined init with copy of MEProgram( v7 + ((*(unsigned __int8 *)(v2 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))
    + *(void *)(v2 + 72) * v9,
      (uint64_t)v5,
      type metadata accessor for DSLTree.CustomCharacterClass.Member);
    char v10 = DSLTree.CustomCharacterClass.Member.isUnprintableMember.getter();
    uint64_t result = outlined destroy of MEProgram((uint64_t)v5, type metadata accessor for DSLTree.CustomCharacterClass.Member);
    if ((v10 & 1) != 0) {
      return v8 != v9;
    }
  }

  __break(1u);
  return result;
}

Swift::Void __swiftcall PrettyPrinter.printAsRegex(_:asFullRegex:terminateLine:)( _StringProcessing::DSLTree::CustomCharacterClass _, Swift::Bool asFullRegex, Swift::Bool terminateLine)
{
  Swift::Bool isInverted = _.isInverted;
  unint64_t rawValue = (unsigned __int8 *)_.members._rawValue;
  uint64_t v6 = type metadata accessor for DSLTree.CustomCharacterClass.Member(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  unint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *(void *)rawValue;
  int v11 = rawValue[8];
  PrettyPrinter.indent()();
  if (isInverted)
  {
    v12._uint64_t countAndFlagsBits = 12067LL;
    v12._uint64_t object = (void *)0xE200000000000000LL;
    PrettyPrinter.output(_:)(v12);
  }

  v13._uint64_t countAndFlagsBits = 91LL;
  v13._uint64_t object = (void *)0xE100000000000000LL;
  PrettyPrinter.output(_:)(v13);
  if (v11)
  {
    v14._uint64_t countAndFlagsBits = 94LL;
    v14._uint64_t object = (void *)0xE100000000000000LL;
    PrettyPrinter.output(_:)(v14);
  }

  uint64_t v15 = *(void *)(v10 + 16);
  if (v15)
  {
    unint64_t v16 = 0LL;
    while (v16 < *(void *)(v10 + 16))
    {
      unint64_t v17 = v16 + 1;
      outlined init with copy of MEProgram( v10 + ((*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
      + *(void *)(v7 + 72) * v16,
        (uint64_t)v9,
        type metadata accessor for DSLTree.CustomCharacterClass.Member);
      PrettyPrinter.printAsRegex(_:)((uint64_t)v9);
      outlined destroy of MEProgram((uint64_t)v9, type metadata accessor for DSLTree.CustomCharacterClass.Member);
      unint64_t v16 = v17;
      if (v15 == v17) {
        goto LABEL_9;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_9:
    v18._uint64_t countAndFlagsBits = 93LL;
    v18._uint64_t object = (void *)0xE100000000000000LL;
    PrettyPrinter.output(_:)(v18);
    if (isInverted)
    {
      uint64_t v19 = 9007LL;
      unint64_t v20 = 0xE200000000000000LL;
      if (asFullRegex) {
        PrettyPrinter.print(_:)(*(Swift::String *)&v19);
      }
      else {
        PrettyPrinter.output(_:)(*(Swift::String *)&v19);
      }
    }
  }

void PrettyPrinter.printAsPattern(_:wrap:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DSLTree._AST.Atom(0LL);
  MEMORY[0x1895F8858](v2);
  uint64_t v3 = type metadata accessor for DSLTree.Atom(0LL);
  uint64_t v4 = MEMORY[0x1895F8858](v3);
  uint64_t v5 = MEMORY[0x1895F8858](v4);
  uint64_t v6 = MEMORY[0x1895F8858](v5);
  MEMORY[0x1895F8858](v6);
  uint64_t v7 = type metadata accessor for DSLTree.CustomCharacterClass.Member(0LL);
  MEMORY[0x1895F8858](v7);
  outlined init with copy of MEProgram(a1, (uint64_t)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL), v9);
  uint64_t v10 = (char *)sub_182D62CD4 + 4 * byte_182D9CE80[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }

uint64_t sub_182D62CD4()
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      outlined destroy of MEProgram(v2, type metadata accessor for DSLTree.Atom);
      uint64_t v7 = *v1;
      unint64_t v6 = v1[1];
      if ((v0 & 1) != 0)
      {
        *(void *)(v5 - 96) = 0x796E612E28656E4FLL;
        *(void *)(v5 - 88) = 0xEB0000000028664FLL;
        uint64_t v8 = String._quoted.getter(v7, v6);
        uint64_t v10 = v9;
        swift_bridgeObjectRelease();
        v11._uint64_t countAndFlagsBits = v8;
        v11._uint64_t object = v10;
        String.append(_:)(v11);
        goto LABEL_6;
      }

      *(void *)(v5 - 96) = 0LL;
      *(void *)(v5 - 88) = 0xE000000000000000LL;
      _StringGuts.grow(_:)(24LL);
      swift_bridgeObjectRelease();
      *(void *)(v5 - 96) = 0xD000000000000015LL;
      *(void *)(v5 - 88) = 0x8000000182DA3F60LL;
      uint64_t v32 = String._quoted.getter(v7, v6);
      uint64_t v34 = v33;
      swift_bridgeObjectRelease();
      v35._uint64_t countAndFlagsBits = v32;
      v35._uint64_t object = v34;
      String.append(_:)(v35);
      goto LABEL_16;
    case 1u:
      outlined destroy of MEProgram(v2, type metadata accessor for DSLTree.Atom);
      int v12 = *(_DWORD *)v1;
      if ((v0 & 1) == 0)
      {
        *(void *)(v5 - 96) = 0LL;
        *(void *)(v5 - 88) = 0xE000000000000000LL;
        _StringGuts.grow(_:)(24LL);
        swift_bridgeObjectRelease();
        *(void *)(v5 - 96) = 0xD000000000000015LL;
        *(void *)(v5 - 88) = 0x8000000182DA3F60LL;
        *(void *)(v5 - 112) = 8090972LL;
        *(void *)(v5 - 104) = 0xE300000000000000LL;
        *(_DWORD *)(v5 - 116) = v12;
        lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        v36._uint64_t countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
        String.append(_:)(v36);
        swift_bridgeObjectRelease();
        v37._uint64_t countAndFlagsBits = 125LL;
        v37._uint64_t object = (void *)0xE100000000000000LL;
        String.append(_:)(v37);
        v38._uint64_t countAndFlagsBits = *(void *)(v5 - 112);
        uint64_t v39 = *(void **)(v5 - 104);
        *(void *)(v5 - 112) = 34LL;
        *(void *)(v5 - 104) = 0xE100000000000000LL;
        v38._uint64_t object = v39;
        String.append(_:)(v38);
        swift_bridgeObjectRelease();
        v40._uint64_t countAndFlagsBits = 34LL;
        v40._uint64_t object = (void *)0xE100000000000000LL;
        String.append(_:)(v40);
        uint64_t v21 = *(void *)(v5 - 112);
        uint64_t v22 = *(void *)(v5 - 104);
        goto LABEL_15;
      }

      *(void *)(v5 - 96) = 0x796E612E28656E4FLL;
      *(void *)(v5 - 88) = 0xEB0000000028664FLL;
      *(void *)(v5 - 112) = 8090972LL;
      *(void *)(v5 - 104) = 0xE300000000000000LL;
      *(_DWORD *)(v5 - 116) = v12;
      lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      v13._uint64_t countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
      String.append(_:)(v13);
      swift_bridgeObjectRelease();
      v14._uint64_t countAndFlagsBits = 125LL;
      v14._uint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v14);
      v15._uint64_t countAndFlagsBits = *(void *)(v5 - 112);
      unint64_t v16 = *(void **)(v5 - 104);
      *(void *)(v5 - 112) = 34LL;
      *(void *)(v5 - 104) = 0xE100000000000000LL;
      v15._uint64_t object = v16;
      String.append(_:)(v15);
      swift_bridgeObjectRelease();
      v17._uint64_t countAndFlagsBits = 34LL;
      v17._uint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v17);
      String.append(_:)(*(Swift::String *)(v5 - 112));
LABEL_6:
      swift_bridgeObjectRelease();
      uint64_t v18 = 10537LL;
      unint64_t v19 = 0xE200000000000000LL;
      goto LABEL_17;
    case 2u:
      outlined destroy of MEProgram(v2, type metadata accessor for DSLTree.Atom);
      char v20 = *(_BYTE *)v1;
      if ((v0 & 1) == 0)
      {
        *(_BYTE *)(v5 - 96) = v20;
        DSLTree.Atom.CharacterClass._patternBase.getter();
        goto LABEL_18;
      }

      *(void *)(v5 - 96) = 677736015LL;
      *(void *)(v5 - 88) = 0xE400000000000000LL;
      *(_BYTE *)(v5 - 112) = v20;
      DSLTree.Atom.CharacterClass._patternBase.getter();
LABEL_15:
      String.append(_:)(*(Swift::String *)&v21);
      goto LABEL_16;
    case 7u:
      outlined destroy of MEProgram(v2, type metadata accessor for DSLTree.Atom);
      outlined init with take of DSLTree.QuantificationKind( (uint64_t)v1,  v3,  type metadata accessor for DSLTree._AST.Atom);
      uint64_t v23 = AST.Atom._patternBase.getter();
      uint64_t v25 = v24;
      char v27 = v26;
      outlined destroy of MEProgram(v3, type metadata accessor for DSLTree._AST.Atom);
      if ((v27 & 1) != 0 && (v0 & 1) != 0)
      {
        *(void *)(v5 - 96) = 677736015LL;
        *(void *)(v5 - 88) = 0xE400000000000000LL;
        v28._uint64_t countAndFlagsBits = v23;
        v28._uint64_t object = v25;
        String.append(_:)(v28);
LABEL_16:
        swift_bridgeObjectRelease();
        uint64_t v18 = 41LL;
        unint64_t v19 = 0xE100000000000000LL;
LABEL_17:
        String.append(_:)(*(Swift::String *)&v18);
        uint64_t v41 = *(void *)(v5 - 96);
        uint64_t v42 = *(void *)(v5 - 88);
LABEL_18:
        PrettyPrinter.output(_:)(*(Swift::String *)&v41);
      }

      else
      {
        v43._uint64_t countAndFlagsBits = v23;
        v43._uint64_t object = v25;
        PrettyPrinter.output(_:)(v43);
      }

      return swift_bridgeObjectRelease();
    default:
      *(void *)(v5 - 96) = 0LL;
      *(void *)(v5 - 88) = 0xE000000000000000LL;
      _StringGuts.grow(_:)(17LL);
      uint64_t v29 = *(void *)(v5 - 88);
      *(void *)(v5 - 96) = *(void *)(v5 - 96);
      *(void *)(v5 - 88) = v29;
      v30._uint64_t countAndFlagsBits = 0x4F444F54202F2F20LL;
      v30._uint64_t object = (void *)0xEF206D6F7441203ALL;
      String.append(_:)(v30);
      _print_unlocked<A, B>(_:_:)();
      outlined destroy of MEProgram(v2, type metadata accessor for DSLTree.Atom);
      PrettyPrinter.print(_:)(*(Swift::String *)(v5 - 96));
      swift_bridgeObjectRelease();
      return outlined destroy of MEProgram((uint64_t)v1, type metadata accessor for DSLTree.Atom);
  }

uint64_t closure #1 in PrettyPrinter.printAsPattern(_:wrap:terminateLine:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DSLTree.Atom(0LL);
  MEMORY[0x1895F8858](v2);
  uint64_t v4 = (char *)v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for DSLTree.CustomCharacterClass.Member(0LL);
  MEMORY[0x1895F8858](v5);
  uint64_t v7 = (char *)v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of MEProgram(a1, (uint64_t)v7, v8);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload != 4)
  {
    if (EnumCaseMultiPayload == 3)
    {
      uint64_t v17 = specialized RangeReplaceableCollection<>._replacing<A, B>(_:with:maxReplacements:)( 92LL,  0xE100000000000000LL,  23644LL,  0xE200000000000000LL,  0x7FFFFFFFFFFFFFFFuLL,  *(void *)v7,  *((void *)v7 + 1));
      unint64_t v19 = v18;
      swift_bridgeObjectRelease();
      uint64_t v20 = specialized RangeReplaceableCollection<>._replacing<A, B>(_:with:maxReplacements:)( 34LL,  0xE100000000000000LL,  8796LL,  0xE200000000000000LL,  0x7FFFFFFFFFFFFFFFuLL,  v17,  v19);
      unint64_t v22 = v21;
      swift_bridgeObjectRelease();
      uint64_t v23 = v20;
    }

    else
    {
      if (EnumCaseMultiPayload)
      {
        Swift::String v24 = type metadata accessor for DSLTree.CustomCharacterClass.Member;
        uint64_t v25 = (uint64_t)v7;
LABEL_12:
        outlined destroy of MEProgram(v25, v24);
        return 1LL;
      }

      outlined init with take of DSLTree.QuantificationKind( (uint64_t)v7,  (uint64_t)v4,  type metadata accessor for DSLTree.Atom);
      int v10 = swift_getEnumCaseMultiPayload();
      if (v10 == 7)
      {
LABEL_11:
        Swift::String v24 = type metadata accessor for DSLTree.Atom;
        uint64_t v25 = (uint64_t)v4;
        goto LABEL_12;
      }

      if (v10 != 1)
      {
        if (!v10)
        {
          uint64_t v11 = specialized RangeReplaceableCollection<>._replacing<A, B>(_:with:maxReplacements:)( 92LL,  0xE100000000000000LL,  23644LL,  0xE200000000000000LL,  0x7FFFFFFFFFFFFFFFuLL,  *(void *)v4,  *((void *)v4 + 1));
          uint64_t v13 = specialized RangeReplaceableCollection<>._replacing<A, B>(_:with:maxReplacements:)( 34LL,  0xE100000000000000LL,  8796LL,  0xE200000000000000LL,  0x7FFFFFFFFFFFFFFFuLL,  v11,  v12);
          Swift::String v15 = v14;
          swift_bridgeObjectRelease();
          v16._uint64_t countAndFlagsBits = v13;
          v16._uint64_t object = v15;
          String.append(_:)(v16);
          swift_bridgeObjectRelease();
LABEL_15:
          swift_bridgeObjectRelease();
          return 0LL;
        }

        goto LABEL_11;
      }

      int v27 = *(_DWORD *)v4;
      uint64_t v32 = 8090972LL;
      unint64_t v33 = 0xE300000000000000LL;
      v31[3] = v27;
      lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      v28._uint64_t countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
      String.append(_:)(v28);
      swift_bridgeObjectRelease();
      v29._uint64_t countAndFlagsBits = 125LL;
      v29._uint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v29);
      uint64_t v23 = v32;
      unint64_t v22 = v33;
    }

    unint64_t v30 = v22;
    String.append(_:)(*(Swift::String *)&v23);
    goto LABEL_15;
  }

  outlined destroy of MEProgram((uint64_t)v7, type metadata accessor for DSLTree.CustomCharacterClass.Member);
  return 0LL;
}

void closure #2 in PrettyPrinter.printAsPattern(_:wrap:terminateLine:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for DSLTree.CustomCharacterClass.Member(0LL);
  uint64_t v33 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: DSLTree.CustomCharacterClass.Member));
  uint64_t v36 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v8);
  uint64_t v32 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: DSLTree.CustomCharacterClass.Member)?);
  uint64_t v11 = MEMORY[0x1895F8858](v10);
  uint64_t v13 = (unint64_t *)((char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  MEMORY[0x1895F8858](v11);
  Swift::String v15 = (uint64_t *)((char *)&v31 - v14);
  PrettyPrinter.indent()();
  uint64_t v17 = *a2;
  unint64_t v16 = a2[1];
  uint64_t v18 = HIBYTE(v16) & 0xF;
  if ((v16 & 0x2000000000000000LL) == 0) {
    uint64_t v18 = v17 & 0xFFFFFFFFFFFFLL;
  }
  if (v18)
  {
    v38._uint64_t countAndFlagsBits = 0x28664F796E612ELL;
    v38._uint64_t object = (void *)0xE700000000000000LL;
    v37._uint64_t countAndFlagsBits = 34LL;
    v37._uint64_t object = (void *)0xE100000000000000LL;
    swift_bridgeObjectRetain();
    v19._uint64_t countAndFlagsBits = v17;
    v19._uint64_t object = (void *)v16;
    String.append(_:)(v19);
    v20._uint64_t countAndFlagsBits = 34LL;
    v20._uint64_t object = (void *)0xE100000000000000LL;
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    String.append(_:)(v37);
    swift_bridgeObjectRelease();
    v21._uint64_t countAndFlagsBits = 41LL;
    v21._uint64_t object = (void *)0xE100000000000000LL;
    String.append(_:)(v21);
    PrettyPrinter.output(_:)(v38);
    swift_bridgeObjectRelease();
    if (*(void *)(a3 + 16))
    {
      v22._uint64_t countAndFlagsBits = 44LL;
      v22._uint64_t object = (void *)0xE100000000000000LL;
      PrettyPrinter.output(_:)(v22);
    }

    PrettyPrinter.terminateLine()();
  }

  unint64_t v23 = 0LL;
  unint64_t v24 = *(void *)(a3 + 16);
  uint64_t v34 = a3;
  unint64_t v35 = v24 - 1;
  while (1)
  {
    if (v23 == v24)
    {
      uint64_t v25 = 1LL;
      unint64_t v23 = v24;
      goto LABEL_13;
    }

    if (v23 >= v24) {
      break;
    }
    uint64_t v26 = (uint64_t)&v32[*(int *)(v8 + 48)];
    outlined init with copy of MEProgram( v34 + ((*(unsigned __int8 *)(v33 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80))
    + *(void *)(v33 + 72) * v23,
      v26,
      type metadata accessor for DSLTree.CustomCharacterClass.Member);
    uint64_t v27 = (uint64_t)v13 + *(int *)(v8 + 48);
    *uint64_t v13 = v23;
    outlined init with take of DSLTree.QuantificationKind( v26,  v27,  type metadata accessor for DSLTree.CustomCharacterClass.Member);
    uint64_t v25 = 0LL;
    ++v23;
LABEL_13:
    uint64_t v28 = v36;
    (*(void (**)(unint64_t *, uint64_t, uint64_t, uint64_t))(v36 + 56))(v13, v25, 1LL, v8);
    outlined init with take of (offset: Int, element: (CaptureList.Capture, Processor._StoredCapture))?( (uint64_t)v13,  (uint64_t)v15,  &demangling cache variable for type metadata for (offset: Int, element: DSLTree.CustomCharacterClass.Member)?);
    uint64_t v29 = *v15;
    outlined init with take of DSLTree.QuantificationKind( (uint64_t)v15 + *(int *)(v8 + 48),  (uint64_t)v7,  type metadata accessor for DSLTree.CustomCharacterClass.Member);
    PrettyPrinter.printAsPattern(_:wrap:)((uint64_t)v7);
    outlined destroy of MEProgram((uint64_t)v7, type metadata accessor for DSLTree.CustomCharacterClass.Member);
    if (v29 != v35)
    {
      v30._uint64_t countAndFlagsBits = 44LL;
      v30._uint64_t object = (void *)0xE100000000000000LL;
      PrettyPrinter.output(_:)(v30);
    }

    PrettyPrinter.terminateLine()();
  }

  __break(1u);
}

void DSLTree.Atom.CharacterClass._patternBase.getter()
{
  __asm { BR              X10 }

uint64_t sub_182D63BF0()
{
  return 0x74696769642ELL;
}

void sub_182D63CFC()
{
}

void PrettyPrinter.printAsRegex(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DSLTree._AST.Atom(0LL);
  MEMORY[0x1895F8858](v2);
  uint64_t v3 = type metadata accessor for DSLTree.Atom(0LL);
  uint64_t v4 = MEMORY[0x1895F8858](v3);
  uint64_t v5 = MEMORY[0x1895F8858](v4);
  uint64_t v6 = MEMORY[0x1895F8858](v5);
  MEMORY[0x1895F8858](v6);
  uint64_t v7 = type metadata accessor for DSLTree.CustomCharacterClass.Member(0LL);
  MEMORY[0x1895F8858](v7);
  outlined init with copy of MEProgram(a1, (uint64_t)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL), v9);
  uint64_t v10 = (char *)sub_182D63EA8 + 4 * byte_182D9CEA6[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }

uint64_t sub_182D63EA8()
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 7)
  {
    outlined destroy of MEProgram(v2, type metadata accessor for DSLTree.Atom);
    outlined init with take of DSLTree.QuantificationKind((uint64_t)v1, v0, type metadata accessor for DSLTree._AST.Atom);
    uint64_t v7 = AST.Atom._regexBase.getter();
    uint64_t v9 = v8;
    outlined destroy of MEProgram(v0, type metadata accessor for DSLTree._AST.Atom);
    v10._uint64_t countAndFlagsBits = v7;
    v10._uint64_t object = v9;
    PrettyPrinter.output(_:)(v10);
    return swift_bridgeObjectRelease();
  }

  else if (EnumCaseMultiPayload)
  {
    *(void *)(v4 - 96) = 0LL;
    *(void *)(v4 - 88) = 0xE000000000000000LL;
    _StringGuts.grow(_:)(17LL);
    uint64_t v11 = *(void *)(v4 - 88);
    *(void *)(v4 - 96) = *(void *)(v4 - 96);
    *(void *)(v4 - 88) = v11;
    v12._uint64_t countAndFlagsBits = 0x4F444F54202F2F20LL;
    v12._uint64_t object = (void *)0xEF206D6F7441203ALL;
    String.append(_:)(v12);
    _print_unlocked<A, B>(_:_:)();
    outlined destroy of MEProgram(v2, type metadata accessor for DSLTree.Atom);
    PrettyPrinter.print(_:)(*(Swift::String *)(v4 - 96));
    swift_bridgeObjectRelease();
    return outlined destroy of MEProgram((uint64_t)v1, type metadata accessor for DSLTree.Atom);
  }

  else
  {
    outlined destroy of MEProgram(v2, type metadata accessor for DSLTree.Atom);
    PrettyPrinter.output(_:)(*v1);
    return swift_bridgeObjectRelease();
  }

void DSLTree.Atom._regexBase.getter()
{
  uint64_t v1 = type metadata accessor for AST.MatchingOption.Kind();
  v9[1] = *(void *)(v1 - 8);
  MEMORY[0x1895F8858](v1);
  uint64_t v2 = type metadata accessor for AST.MatchingOption();
  MEMORY[0x1895F8858](v2);
  uint64_t v3 = type metadata accessor for DSLTree._AST.MatchingOptionSequence(0LL);
  MEMORY[0x1895F8858](v3);
  uint64_t v4 = type metadata accessor for DSLTree._AST.Atom(0LL);
  MEMORY[0x1895F8858](v4);
  uint64_t v5 = type metadata accessor for DSLTree.Atom(0LL);
  MEMORY[0x1895F8858](v5);
  outlined init with copy of MEProgram(v0, (uint64_t)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL), v7);
  uint64_t v8 = (char *)&loc_182D64390 + *((int *)qword_182D64628 + swift_getEnumCaseMultiPayload());
  __asm { BR              X10 }

uint64_t sub_182D643A8()
{
  return *(void *)v0;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance StringLiteralBuilder()
{
  v1._uint64_t countAndFlagsBits = 34LL;
  v1._uint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v1);
  return 34LL;
}

uint64_t DSLTree.Atom.Assertion._patternBase.getter()
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_182D646D8 + 4 * byte_182D9CEAE[*v0]))( 0xD000000000000012LL,  0x8000000182DA3A30LL);
}

uint64_t sub_182D646D8@<X0>(uint64_t a1@<X8>)
{
  return a1 + 2;
}

uint64_t AST.Atom.CharacterProperty.isUnprintableProperty.getter()
{
  uint64_t v0 = type metadata accessor for Unicode.POSIXProperty();
  uint64_t v24 = *(void *)(v0 - 8);
  uint64_t v25 = v0;
  MEMORY[0x1895F8858](v0);
  unint64_t v23 = (char *)&v22 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v2 = type metadata accessor for Unicode.ExtendedGeneralCategory();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Unicode.BinaryProperty();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for AST.Atom.CharacterProperty.Kind();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1895F8858](v10);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  AST.Atom.CharacterProperty.kind.getter();
  int v14 = (*(uint64_t (**)(char *, uint64_t))(v11 + 88))(v13, v10);
  if (v14 == *MEMORY[0x18961C650])
  {
    (*(void (**)(char *, uint64_t))(v11 + 96))(v13, v10);
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v13, v2);
    if ((*(unsigned int (**)(char *, uint64_t))(v3 + 88))(v5, v2) != *MEMORY[0x18961CC98])
    {
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      return 1LL;
    }

    return 0LL;
  }

  uint64_t v15 = v7;
  uint64_t v17 = v23;
  uint64_t v16 = v24;
  uint64_t v18 = v25;
  if (v14 == *MEMORY[0x18961C698])
  {
    (*(void (**)(char *, uint64_t))(v11 + 96))(v13, v10);
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v9, v13, v6);
    if ((*(unsigned int (**)(char *, uint64_t))(v15 + 88))(v9, v6) != *MEMORY[0x18961CA40])
    {
      (*(void (**)(char *, uint64_t))(v15 + 8))(v9, v6);
      return 1LL;
    }

    return 0LL;
  }

  if (v14 == *MEMORY[0x18961C6A0] || v14 == *MEMORY[0x18961C658])
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    return 1LL;
  }

  if (v14 != *MEMORY[0x18961C690])
  {
    if (v14 == *MEMORY[0x18961C678]) {
      return 1LL;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    return 0LL;
  }

  (*(void (**)(char *, uint64_t))(v11 + 96))(v13, v10);
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v17, v13, v18);
  int v21 = (*(uint64_t (**)(char *, uint64_t))(v16 + 88))(v17, v18);
  uint64_t result = 0LL;
  if (v21 != *MEMORY[0x18961C9D8] && v21 != *MEMORY[0x18961CA00])
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v17, v18);
    return 1LL;
  }

  return result;
}

uint64_t AST.Atom.CharacterProperty._dslBase.getter()
{
  uint64_t v0 = type metadata accessor for Unicode.POSIXProperty();
  uint64_t v23 = *(void *)(v0 - 8);
  uint64_t v24 = v0;
  MEMORY[0x1895F8858](v0);
  uint64_t v22 = (char *)&v21 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v2 = type metadata accessor for Unicode.ExtendedGeneralCategory();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Unicode.BinaryProperty();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for AST.Atom.CharacterProperty.Kind();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1895F8858](v10);
  uint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  AST.Atom.CharacterProperty.kind.getter();
  int v14 = (*(uint64_t (**)(char *, uint64_t))(v11 + 88))(v13, v10);
  if (v14 == *MEMORY[0x18961C650])
  {
    (*(void (**)(char *, uint64_t))(v11 + 96))(v13, v10);
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v13, v2);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }

  else
  {
    uint64_t v16 = v7;
    uint64_t v17 = v22;
    uint64_t v18 = v23;
    uint64_t v19 = v24;
    if (v14 == *MEMORY[0x18961C698])
    {
      (*(void (**)(char *, uint64_t))(v11 + 96))(v13, v10);
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v9, v13, v6);
      (*(void (**)(char *, uint64_t))(v16 + 8))(v9, v6);
    }

    else if (v14 == *MEMORY[0x18961C690])
    {
      (*(void (**)(char *, uint64_t))(v11 + 96))(v13, v10);
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v17, v13, v19);
      int v20 = (*(uint64_t (**)(char *, uint64_t))(v18 + 88))(v17, v19);
      if (v20 == *MEMORY[0x18961C9D8]) {
        return 0x64726F772ELL;
      }
      if (v20 == *MEMORY[0x18961CA00]) {
        return 0x696769447865682ELL;
      }
      (*(void (**)(char *, uint64_t))(v18 + 8))(v17, v19);
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    }
  }

  return 0LL;
}

uint64_t AST.Atom._dslBase.getter()
{
  uint64_t v50 = type metadata accessor for AST.Atom.EscapedBuiltin();
  uint64_t v48 = *(void *)(v50 - 8);
  uint64_t v0 = MEMORY[0x1895F8858](v50);
  uint64_t v47 = (char *)&v46 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v0);
  uint64_t v49 = (char *)&v46 - v2;
  uint64_t v3 = type metadata accessor for AST.Atom.CharacterProperty();
  uint64_t v52 = *(void *)(v3 - 8);
  uint64_t v53 = v3;
  MEMORY[0x1895F8858](v3);
  unint64_t v51 = (char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for AST.Atom.ScalarSequence();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for AST.Atom.Scalar();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](v9);
  uint64_t v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for AST.Atom.Kind();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1895F8858](v13);
  uint64_t v16 = (char *)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  AST.Atom.kind.getter();
  int v17 = (*(uint64_t (**)(char *, uint64_t))(v14 + 88))(v16, v13);
  if (v17 == *MEMORY[0x18961C748])
  {
    (*(void (**)(char *, uint64_t))(v14 + 96))(v16, v13);
    return *(void *)v16;
  }

  if (v17 == *MEMORY[0x18961C750])
  {
    (*(void (**)(char *, uint64_t))(v14 + 96))(v16, v13);
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v16, v9);
    int v19 = AST.Atom.Scalar.value.getter();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    uint64_t v56 = 8090972LL;
    unint64_t v57 = 0xE300000000000000LL;
    LODWORD(v55) = v19;
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v20._uint64_t countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    v21._uint64_t countAndFlagsBits = 125LL;
    v21._uint64_t object = (void *)0xE100000000000000LL;
    String.append(_:)(v21);
    return v56;
  }

  if (v17 == *MEMORY[0x18961C718])
  {
    (*(void (**)(char *, uint64_t))(v14 + 96))(v16, v13);
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v16, v5);
    uint64_t v22 = AST.Atom.ScalarSequence.scalarValues.getter();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    int64_t v23 = *(void *)(v22 + 16);
    if (!v23)
    {
      swift_bridgeObjectRelease();
      uint64_t v27 = MEMORY[0x18961AFE8];
LABEL_19:
      uint64_t v56 = v27;
      swift_getCanonicalSpecializedMetadata();
      lazy protocol witness table accessor for type PartialRangeUpTo<String.Index> and conformance PartialRangeUpTo<A>( &lazy protocol witness table cache variable for type [String] and conformance [A],  (uint64_t)&unk_189C4BD40,  (uint64_t)&cache variable for noncanonical specialized generic type metadata for [String],  MEMORY[0x189618458]);
      uint64_t v18 = BidirectionalCollection<>.joined(separator:)();
      swift_bridgeObjectRelease();
      return v18;
    }

    uint64_t v55 = MEMORY[0x18961AFE8];
    uint64_t v24 = &v55;
    unsigned int v25 = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v23,  0);
    unint64_t v26 = 0LL;
    uint64_t v27 = v55;
    while (v26 < *(void *)(v22 + 16))
    {
      int v28 = *(_DWORD *)(v22 + 4 * v26 + 32);
      uint64_t v56 = 8090972LL;
      unint64_t v57 = 0xE300000000000000LL;
      int v54 = v28;
      lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      v29._uint64_t countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
      uint64_t v24 = &v56;
      String.append(_:)(v29);
      swift_bridgeObjectRelease();
      v30._uint64_t countAndFlagsBits = 125LL;
      v30._uint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v30);
      uint64_t v32 = v56;
      unint64_t v31 = v57;
      uint64_t v55 = v27;
      unint64_t v34 = *(void *)(v27 + 16);
      unint64_t v33 = *(void *)(v27 + 24);
      if (v34 >= v33 >> 1)
      {
        uint64_t v24 = &v55;
        unsigned int v25 = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v33 > 1),  v34 + 1,  1);
        uint64_t v27 = v55;
      }

      ++v26;
      *(void *)(v27 + 16) = v34 + 1;
      unint64_t v35 = v27 + 16 * v34;
      *(void *)(v35 + 32) = v32;
      *(void *)(v35 + 40) = v31;
      if (v23 == v26)
      {
        swift_bridgeObjectRelease();
        goto LABEL_19;
      }
    }

    __break(1u);
    goto LABEL_40;
  }

  if (v17 == *MEMORY[0x18961C770])
  {
    (*(void (**)(char *, uint64_t))(v14 + 96))(v16, v13);
    Swift::String v37 = v51;
    uint64_t v36 = v52;
    uint64_t v38 = v53;
    (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v51, v16, v53);
    uint64_t v18 = AST.Atom.CharacterProperty._dslBase.getter();
    (*(void (**)(char *, uint64_t))(v36 + 8))(v37, v38);
    return v18;
  }

  if (v17 == *MEMORY[0x18961C760])
  {
    (*(void (**)(char *, uint64_t))(v14 + 96))(v16, v13);
    uint64_t v27 = v48;
    uint64_t v24 = (uint64_t *)v49;
    uint64_t v22 = v50;
    (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v49, v16, v50);
    uint64_t v39 = v47;
    (*(void (**)(char *, uint64_t *, uint64_t))(v27 + 16))(v47, v24, v22);
    unsigned int v25 = (*(uint64_t (**)(char *, uint64_t))(v27 + 88))(v39, v22);
    if (v25 == *MEMORY[0x18961C538])
    {
      (*(void (**)(uint64_t *, uint64_t))(v27 + 8))(v24, v22);
      return 0x74696769642ELL;
    }

    if (v25 == *MEMORY[0x18961C588])
    {
      (*(void (**)(uint64_t *, uint64_t))(v27 + 8))(v24, v22);
      return 0x692E74696769642ELL;
    }

    if (v25 == *MEMORY[0x18961C5A8])
    {
      (*(void (**)(uint64_t *, uint64_t))(v27 + 8))(v24, v22);
      return 0xD000000000000015LL;
    }

    if (v25 == *MEMORY[0x18961C5B0])
    {
      (*(void (**)(uint64_t *, uint64_t))(v27 + 8))(v24, v22);
      return 0xD00000000000001ELL;
    }

    if (v25 == *MEMORY[0x18961C510])
    {
      (*(void (**)(uint64_t *, uint64_t))(v27 + 8))(v24, v22);
      return 0xD000000000000019LL;
    }

LABEL_40:
    if (v25 == *MEMORY[0x18961C580])
    {
      (*(void (**)(uint64_t *, uint64_t))(v27 + 8))(v24, v22);
      return 0xD000000000000010LL;
    }

    if (v25 == *MEMORY[0x18961C518])
    {
      (*(void (**)(uint64_t *, uint64_t))(v27 + 8))(v24, v22);
      return 0x707365746968772ELL;
    }

    if (v25 == *MEMORY[0x18961C550])
    {
      (*(void (**)(uint64_t *, uint64_t))(v27 + 8))(v24, v22);
      return 0xD000000000000014LL;
    }

    if (v25 == *MEMORY[0x18961C530])
    {
      uint64_t v41 = v22;
      uint64_t v18 = 0xD000000000000013LL;
      (*(void (**)(uint64_t *, uint64_t))(v27 + 8))(v24, v41);
      return v18;
    }

    if (v25 == *MEMORY[0x18961C568])
    {
LABEL_56:
      (*(void (**)(char *, uint64_t))(v48 + 8))(v49, v50);
      return 0xD00000000000001CLL;
    }

    if (v25 == *MEMORY[0x18961C558])
    {
      (*(void (**)(char *, uint64_t))(v48 + 8))(v49, v50);
      return 0x64726F772ELL;
    }

    if (v25 == *MEMORY[0x18961C598])
    {
      (*(void (**)(char *, uint64_t))(v48 + 8))(v49, v50);
      return 0x6E692E64726F772ELL;
    }

    if (v25 != *MEMORY[0x18961C578] && v25 != *MEMORY[0x18961C548])
    {
      if (v25 == *MEMORY[0x18961C590]) {
        goto LABEL_56;
      }
      if (v25 == *MEMORY[0x18961C570])
      {
        (*(void (**)(char *, uint64_t))(v48 + 8))(v49, v50);
        return 0xD000000000000015LL;
      }

      if (v25 == *MEMORY[0x18961C5B8])
      {
        (*(void (**)(char *, uint64_t))(v48 + 8))(v49, v50);
        return 0xD000000000000020LL;
      }

      if (v25 != *MEMORY[0x18961C540])
      {
        if (v25 == *MEMORY[0x18961C5C0])
        {
          (*(void (**)(char *, uint64_t))(v48 + 8))(v49, v50);
          return 0xD000000000000025LL;
        }

        else if (v25 == *MEMORY[0x18961C528])
        {
          (*(void (**)(char *, uint64_t))(v48 + 8))(v49, v50);
          return 0xD00000000000001ALL;
        }

        else if (v25 == *MEMORY[0x18961C560])
        {
          (*(void (**)(char *, uint64_t))(v48 + 8))(v49, v50);
          return 0xD000000000000023LL;
        }

        else
        {
          uint64_t v56 = 0LL;
          unint64_t v57 = 0xE000000000000000LL;
          _StringGuts.grow(_:)(16LL);
          v42._uint64_t countAndFlagsBits = 0x7365203A4F444F54LL;
          v42._uint64_t object = (void *)0xEE00206465706163LL;
          String.append(_:)(v42);
          Swift::String v43 = v49;
          uint64_t v44 = v50;
          _print_unlocked<A, B>(_:_:)();
          uint64_t v45 = *(void (**)(char *, uint64_t))(v48 + 8);
          v45(v43, v44);
          uint64_t v18 = v56;
          v45(v47, v44);
        }

        return v18;
      }
    }

    uint64_t v18 = 0xD000000000000013LL;
    (*(void (**)(char *, uint64_t))(v48 + 8))(v49, v50);
    return v18;
  }

  if (v17 == *MEMORY[0x18961C710])
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    return 0xD00000000000001CLL;
  }

  if (v17 == *MEMORY[0x18961C708])
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    return 0xD00000000000001BLL;
  }

  if (v17 == *MEMORY[0x18961C6E8])
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    return 0xD000000000000017LL;
  }

  if (v17 == *MEMORY[0x18961C758])
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    return 0xD000000000000014LL;
  }

  if (v17 == *MEMORY[0x18961C730] || v17 == *MEMORY[0x18961C738])
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    return 0xD000000000000023LL;
  }

  if (v17 == *MEMORY[0x18961C740]) {
    return 3092015LL;
  }
  if (v17 != *MEMORY[0x18961C6F0] && v17 != *MEMORY[0x18961C6F8])
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    return 0LL;
  }

  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t AST.Atom.Number._patternBase.getter()
{
  if ((v0 & 1) != 0) {
    return 0x7265626D756E233CLL;
  }
  else {
    return dispatch thunk of CustomStringConvertible.description.getter();
  }
}

uint64_t DSLTree.CustomCharacterClass.Member.isUnprintableMember.getter()
{
  uint64_t v1 = type metadata accessor for AST.Atom.CharacterProperty();
  uint64_t v78 = *(void *)(v1 - 8);
  uint64_t v79 = v1;
  MEMORY[0x1895F8858](v1);
  unint64_t v77 = (char *)&v72 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for AST.Atom.Kind();
  uint64_t v82 = *(void *)(v3 - 8);
  uint64_t v83 = v3;
  uint64_t v4 = MEMORY[0x1895F8858](v3);
  unint64_t v74 = (char *)&v72 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v4);
  Swift::String v81 = (char *)&v72 - v6;
  uint64_t v7 = type metadata accessor for DSLTree._AST.Atom(0LL);
  uint64_t v8 = MEMORY[0x1895F8858](v7);
  uint64_t v76 = (uint64_t)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = MEMORY[0x1895F8858](v8);
  uint64_t v75 = (uint64_t)&v72 - v11;
  uint64_t v12 = MEMORY[0x1895F8858](v10);
  uint64_t v73 = (uint64_t)&v72 - v13;
  MEMORY[0x1895F8858](v12);
  uint64_t v80 = (uint64_t)&v72 - v14;
  uint64_t v15 = type metadata accessor for DSLTree.CustomCharacterClass.Member(0LL);
  uint64_t v16 = MEMORY[0x1895F8858](v15);
  uint64_t v18 = (uint64_t *)((char *)&v72 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v19 = MEMORY[0x1895F8858](v16);
  Swift::String v21 = (uint64_t *)((char *)&v72 - v20);
  uint64_t v22 = MEMORY[0x1895F8858](v19);
  uint64_t v24 = (uint64_t *)((char *)&v72 - v23);
  uint64_t v25 = MEMORY[0x1895F8858](v22);
  uint64_t v27 = (char *)&v72 - v26;
  uint64_t v28 = MEMORY[0x1895F8858](v25);
  Swift::String v30 = (char *)&v72 - v29;
  uint64_t v31 = MEMORY[0x1895F8858](v28);
  unint64_t v33 = (char *)&v72 - v32;
  MEMORY[0x1895F8858](v31);
  unint64_t v35 = (char *)&v72 - v34;
  outlined init with copy of MEProgram(v0, (uint64_t)&v72 - v34, v36);
  uint64_t v37 = (uint64_t)v35;
  char v38 = 0;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      outlined init with copy of MEProgram( (uint64_t)v35,  (uint64_t)v33,  type metadata accessor for DSLTree.CustomCharacterClass.Member);
      type metadata accessor for DSLTree.Atom(0LL);
      if (swift_getEnumCaseMultiPayload() != 7)
      {
        uint64_t v67 = (uint64_t)v33;
        goto LABEL_26;
      }

      uint64_t v39 = v80;
      outlined init with take of DSLTree.QuantificationKind( (uint64_t)v33,  v80,  type metadata accessor for DSLTree._AST.Atom);
      Swift::String v40 = v81;
      AST.Atom.kind.getter();
      uint64_t v42 = v82;
      uint64_t v41 = v83;
      int v43 = (*(uint64_t (**)(char *, uint64_t))(v82 + 88))(v40, v83);
      if (v43 == *MEMORY[0x18961C770])
      {
        (*(void (**)(char *, uint64_t))(v42 + 96))(v40, v41);
        uint64_t v45 = v77;
        uint64_t v44 = v78;
        uint64_t v46 = v79;
        (*(void (**)(char *, char *, uint64_t))(v78 + 32))(v77, v40, v79);
        char v38 = AST.Atom.CharacterProperty.isUnprintableProperty.getter();
        (*(void (**)(char *, uint64_t))(v44 + 8))(v45, v46);
      }

      else if (v43 == *MEMORY[0x18961C720] || v43 == *MEMORY[0x18961C700] || v43 == *MEMORY[0x18961C728])
      {
        (*(void (**)(char *, uint64_t))(v42 + 8))(v40, v41);
        char v38 = 1;
      }

      else
      {
        char v38 = v43 == *MEMORY[0x18961C710];
        (*(void (**)(char *, uint64_t))(v42 + 8))(v40, v41);
      }

      uint64_t v70 = v39;
      goto LABEL_39;
    case 1u:
      outlined init with copy of MEProgram( (uint64_t)v35,  (uint64_t)v27,  type metadata accessor for DSLTree.CustomCharacterClass.Member);
      type metadata accessor for DSLTree.Atom(0LL);
      if (swift_getEnumCaseMultiPayload() != 7)
      {
        outlined destroy of MEProgram(v47, type metadata accessor for DSLTree.Atom);
        uint64_t v67 = (uint64_t)v27;
LABEL_26:
        outlined destroy of MEProgram(v67, type metadata accessor for DSLTree.Atom);
        char v38 = 0;
        goto LABEL_40;
      }

      if (swift_getEnumCaseMultiPayload() != 7)
      {
        outlined destroy of MEProgram((uint64_t)v27, type metadata accessor for DSLTree._AST.Atom);
        uint64_t v67 = v47;
        goto LABEL_26;
      }

      uint64_t v48 = v73;
      outlined init with take of DSLTree.QuantificationKind( (uint64_t)v27,  v73,  type metadata accessor for DSLTree._AST.Atom);
      uint64_t v49 = v75;
      outlined init with take of DSLTree.QuantificationKind(v47, v75, type metadata accessor for DSLTree._AST.Atom);
      uint64_t v50 = v74;
      AST.Atom.kind.getter();
      uint64_t v52 = v82;
      uint64_t v51 = v83;
      int v53 = (*(uint64_t (**)(char *, uint64_t))(v82 + 88))(v50, v83);
      if (v53 == *MEMORY[0x18961C770])
      {
        (*(void (**)(char *, uint64_t))(v52 + 96))(v50, v51);
        int v54 = v77;
        uint64_t v55 = v78;
        uint64_t v56 = v79;
        (*(void (**)(char *, char *, uint64_t))(v78 + 32))(v77, v50, v79);
        char v57 = AST.Atom.CharacterProperty.isUnprintableProperty.getter();
        (*(void (**)(char *, uint64_t))(v55 + 8))(v54, v56);
        outlined destroy of MEProgram(v48, type metadata accessor for DSLTree._AST.Atom);
        uint64_t v58 = v76;
        outlined init with take of DSLTree.QuantificationKind(v49, v76, type metadata accessor for DSLTree._AST.Atom);
        if ((v57 & 1) != 0) {
          goto LABEL_37;
        }
LABEL_32:
        char v38 = AST.Atom.isQuantifiable.getter();
        goto LABEL_38;
      }

      int v68 = v53;
      if (v53 == *MEMORY[0x18961C720] || v53 == *MEMORY[0x18961C700] || v53 == *MEMORY[0x18961C728])
      {
        (*(void (**)(char *, uint64_t))(v52 + 8))(v50, v51);
      }

      else
      {
        int v69 = *MEMORY[0x18961C710];
        (*(void (**)(char *, uint64_t))(v52 + 8))(v50, v51);
        if (v68 != v69)
        {
          outlined destroy of MEProgram(v48, type metadata accessor for DSLTree._AST.Atom);
          uint64_t v58 = v76;
          outlined init with take of DSLTree.QuantificationKind(v49, v76, type metadata accessor for DSLTree._AST.Atom);
          goto LABEL_32;
        }
      }

      outlined destroy of MEProgram(v48, type metadata accessor for DSLTree._AST.Atom);
      uint64_t v58 = v76;
      outlined init with take of DSLTree.QuantificationKind(v49, v76, type metadata accessor for DSLTree._AST.Atom);
LABEL_37:
      char v38 = 1;
LABEL_38:
      uint64_t v70 = v58;
LABEL_39:
      outlined destroy of MEProgram(v70, type metadata accessor for DSLTree._AST.Atom);
LABEL_40:
      outlined destroy of MEProgram(v37, type metadata accessor for DSLTree.CustomCharacterClass.Member);
      return v38 & 1;
    case 2u:
      uint64_t v59 = outlined init with copy of MEProgram( (uint64_t)v35,  (uint64_t)v30,  type metadata accessor for DSLTree.CustomCharacterClass.Member);
      char v60 = v30[8];
      uint64_t v84 = *(void *)v30;
      char v85 = v60;
      char v38 = DSLTree.CustomCharacterClass.hasUnprintableProperty.getter(v59);
      goto LABEL_17;
    case 5u:
      outlined init with copy of MEProgram( (uint64_t)v35,  (uint64_t)v24,  type metadata accessor for DSLTree.CustomCharacterClass.Member);
      uint64_t v61 = *v24;
      goto LABEL_14;
    case 6u:
      outlined init with copy of MEProgram( (uint64_t)v35,  (uint64_t)v21,  type metadata accessor for DSLTree.CustomCharacterClass.Member);
      uint64_t v61 = *v21;
      goto LABEL_14;
    case 7u:
      outlined init with copy of MEProgram( (uint64_t)v35,  (uint64_t)v18,  type metadata accessor for DSLTree.CustomCharacterClass.Member);
      uint64_t v61 = *v18;
LABEL_14:
      char v62 = *(_BYTE *)(v61 + 24);
      uint64_t v63 = *(void *)(v61 + 32);
      char v64 = *(_BYTE *)(v61 + 40);
      uint64_t v84 = *(void *)(v61 + 16);
      char v85 = v62;
      uint64_t v65 = swift_bridgeObjectRetain();
      uint64_t v66 = DSLTree.CustomCharacterClass.hasUnprintableProperty.getter(v65);
      if ((v66 & 1) != 0)
      {
        swift_release();
        swift_bridgeObjectRelease();
        char v38 = 1;
      }

      else
      {
        uint64_t v84 = v63;
        char v85 = v64;
        char v38 = DSLTree.CustomCharacterClass.hasUnprintableProperty.getter(v66);
        swift_release();
LABEL_17:
        swift_bridgeObjectRelease();
      }

      goto LABEL_40;
    default:
      goto LABEL_40;
  }

unint64_t convert #1 () in AST.Node.dslTreeNode.getter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v287 = a1;
  uint64_t v223 = type metadata accessor for AST.CustomCharacterClass();
  uint64_t v221 = *(void *)(v223 - 8);
  MEMORY[0x1895F8858](v223);
  int64_t v220 = (char *)&v219 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v225 = type metadata accessor for AST.Atom.ScalarSequence();
  uint64_t v224 = *(void *)(v225 - 8);
  MEMORY[0x1895F8858](v225);
  int v222 = (char *)&v219 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v231 = type metadata accessor for AST.Atom.Kind();
  uint64_t v229 = *(void *)(v231 - 8);
  MEMORY[0x1895F8858](v231);
  unint64_t v230 = (char *)&v219 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v228 = type metadata accessor for AST.Atom();
  uint64_t v227 = *(void *)(v228 - 8);
  MEMORY[0x1895F8858](v228);
  unsigned __int8 v226 = (char *)&v219 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v234 = type metadata accessor for AST.Trivia();
  uint64_t v233 = *(void *)(v234 - 8);
  MEMORY[0x1895F8858](v234);
  unint64_t v232 = (char *)&v219 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v239 = type metadata accessor for AST.Quote();
  uint64_t v238 = *(void *)(v239 - 8);
  MEMORY[0x1895F8858](v239);
  uint64_t v237 = (char *)&v219 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v252 = type metadata accessor for AST.Quantification.Kind();
  uint64_t v251 = *(void *)(v252 - 8);
  MEMORY[0x1895F8858](v252);
  char v250 = (char *)&v219 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v249 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Quantification.Kind>);
  uint64_t v248 = *(void *)(v249 - 8);
  MEMORY[0x1895F8858](v249);
  uint64_t v247 = (char *)&v219 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v246 = type metadata accessor for AST.Quantification.Amount();
  uint64_t v245 = *(void *)(v246 - 8);
  MEMORY[0x1895F8858](v246);
  unint64_t v244 = (char *)&v219 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v243 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Quantification.Amount>);
  uint64_t v242 = *(void *)(v243 - 8);
  MEMORY[0x1895F8858](v243);
  uint64_t v241 = (char *)&v219 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v262 = type metadata accessor for AST.Quantification();
  uint64_t v260 = *(void *)(v262 - 8);
  MEMORY[0x1895F8858](v262);
  unint64_t v259 = (char *)&v219 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v267 = type metadata accessor for AST.Conditional.Condition.Kind();
  uint64_t v266 = *(void *)(v267 - 8);
  MEMORY[0x1895F8858](v267);
  uint64_t v265 = (char *)&v219 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v264 = type metadata accessor for AST.Conditional.Condition();
  uint64_t v263 = *(void *)(v264 - 8);
  MEMORY[0x1895F8858](v264);
  unint64_t v261 = (char *)&v219 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v258 = type metadata accessor for AST.Conditional();
  uint64_t v272 = *(void *)(v258 - 8);
  MEMORY[0x1895F8858](v258);
  int v271 = (char *)&v219 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v257 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<String>);
  uint64_t v256 = *(void *)(v257 - 8);
  MEMORY[0x1895F8858](v257);
  unint64_t v255 = (char *)&v219 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for AST.Group.Kind();
  uint64_t v273 = *(void *)(v18 - 8);
  uint64_t v274 = v18;
  uint64_t v19 = MEMORY[0x1895F8858](v18);
  unint64_t v236 = (char *)&v219 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v19);
  BOOL v276 = (char *)&v219 - v21;
  uint64_t v275 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Group.Kind>);
  uint64_t v270 = *(void *)(v275 - 8);
  uint64_t v22 = MEMORY[0x1895F8858](v275);
  unsigned int v235 = (char *)&v219 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v22);
  uint64_t v269 = (char *)&v219 - v24;
  uint64_t v25 = type metadata accessor for AST.Group();
  uint64_t v281 = *(void *)(v25 - 8);
  uint64_t v282 = v25;
  MEMORY[0x1895F8858](v25);
  char v280 = (char *)&v219 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = type metadata accessor for AST.Concatenation();
  uint64_t v278 = *(void *)(v27 - 8);
  uint64_t v279 = v27;
  MEMORY[0x1895F8858](v27);
  unint64_t v277 = (char *)&v219 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = type metadata accessor for AST.Alternation();
  uint64_t v30 = *(void *)(v29 - 8);
  MEMORY[0x1895F8858](v29);
  uint64_t v32 = (char *)&v219 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v33 = type metadata accessor for AST.Node();
  uint64_t v34 = *(void *)(v33 - 8);
  uint64_t v35 = MEMORY[0x1895F8858](v33);
  int v240 = (char *)&v219 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v37 = MEMORY[0x1895F8858](v35);
  unint64_t v254 = (char *)&v219 - v38;
  uint64_t v39 = MEMORY[0x1895F8858](v37);
  unint64_t v253 = (char *)&v219 - v40;
  uint64_t v41 = MEMORY[0x1895F8858](v39);
  uint64_t v268 = (char *)&v219 - v42;
  uint64_t v43 = MEMORY[0x1895F8858](v41);
  uint64_t v45 = (char *)&v219 - v44;
  uint64_t v46 = MEMORY[0x1895F8858](v43);
  uint64_t v48 = (char *)&v219 - v47;
  MEMORY[0x1895F8858](v46);
  uint64_t v50 = (uint64_t *)((char *)&v219 - v49);
  uint64_t v284 = *(void (**)(char *, uint64_t, uint64_t))(v34 + 16);
  v284((char *)&v219 - v49, v287, v33);
  unsigned int isUniquelyReferenced_nonNull_native = (*(uint64_t (**)(uint64_t *, uint64_t))(v34 + 88))(v50, v33);
  int v52 = *MEMORY[0x18961C7D8];
  uint64_t v285 = v33;
  uint64_t v287 = v34;
  if (isUniquelyReferenced_nonNull_native == v52)
  {
    (*(void (**)(uint64_t *, uint64_t))(v34 + 96))(v50, v33);
    uint64_t v282 = *v50;
    uint64_t v53 = swift_projectBox();
    (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v32, v53, v29);
    uint64_t v54 = AST.Alternation.children.getter();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v32, v29);
    int64_t v55 = *(void *)(v54 + 16);
    if (!v55)
    {
      swift_bridgeObjectRelease();
      uint64_t v67 = MEMORY[0x18961AFE8];
LABEL_34:
      uint64_t v32 = (char *)swift_allocObject();
      swift_release();
      *((void *)v32 + 2) = v67;
      return (unint64_t)v32;
    }

    v286[0] = MEMORY[0x18961AFE8];
    unsigned int isUniquelyReferenced_nonNull_native = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v55,  0);
    char v57 = 0LL;
    uint64_t v58 = v287;
    unint64_t v283 = (char *)v55;
    while ((unint64_t)v57 < *(void *)(v54 + 16))
    {
      uint64_t v59 = v285;
      v284( v48,  v54 + ((*(unsigned __int8 *)(v58 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v58 + 80))
      + *(void *)(v58 + 72) * (void)v57,
        v285);
      char v60 = v2;
      unint64_t v61 = convert #1 () in AST.Node.dslTreeNode.getter(v48);
      if (v2) {
        goto LABEL_89;
      }
      uint64_t v62 = v61;
      if (((v61 >> 59) & 0x1E | (v61 >> 2) & 1) == 0xC)
      {
        (*(void (**)(char *, uint64_t))(v58 + 8))(v48, v59);
      }

      else
      {
        uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree.Node, DSLTree._AST.ASTNode));
        uint64_t v64 = swift_allocBox();
        uint64_t v65 = *(int *)(v63 + 48);
        uint64_t v58 = v287;
        *uint64_t v66 = v62;
        (*(void (**)(char *, char *, uint64_t))(v58 + 32))((char *)v66 + v65, v48, v59);
        uint64_t v62 = v64 | 0x6000000000000000LL;
      }

      uint64_t v67 = v286[0];
      unsigned int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v50 = 0LL;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        unsigned int isUniquelyReferenced_nonNull_native = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v67 + 16) + 1LL,  1);
        uint64_t v58 = v287;
        uint64_t v67 = v286[0];
      }

      unint64_t v69 = *(void *)(v67 + 16);
      unint64_t v68 = *(void *)(v67 + 24);
      if (v69 >= v68 >> 1)
      {
        unsigned int isUniquelyReferenced_nonNull_native = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v68 > 1),  v69 + 1,  1);
        uint64_t v58 = v287;
        uint64_t v67 = v286[0];
      }

      ++v57;
      *(void *)(v67 + 16) = v69 + 1;
      *(void *)(v67 + 8 * v69 + 32) = v62;
      uint64_t v2 = v60;
      if (v283 == v57)
      {
        swift_bridgeObjectRelease();
        goto LABEL_34;
      }
    }

    __break(1u);
    goto LABEL_69;
  }

  if (isUniquelyReferenced_nonNull_native == *MEMORY[0x18961C7E8])
  {
    (*(void (**)(uint64_t *, uint64_t))(v287 + 96))(v50, v285);
    uint64_t v70 = *v50;
    uint64_t v71 = swift_projectBox();
    uint64_t v72 = v277;
    uint64_t v73 = v278;
    uint64_t v74 = v279;
    (*(void (**)(char *, uint64_t, uint64_t))(v278 + 16))(v277, v71, v279);
    uint64_t v75 = AST.Concatenation.children.getter();
    (*(void (**)(char *, uint64_t))(v73 + 8))(v72, v74);
    int64_t v76 = *(void *)(v75 + 16);
    if (!v76)
    {
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v89 = MEMORY[0x18961AFE8];
LABEL_41:
      uint64_t v107 = swift_allocObject();
      *(void *)(v107 + 16) = v89;
      return v107 | 4;
    }

    uint64_t v282 = v70;
    v286[0] = MEMORY[0x18961AFE8];
    unsigned int isUniquelyReferenced_nonNull_native = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v76,  0);
    unint64_t v77 = 0LL;
    unint64_t v283 = v45;
    while (v77 < *(void *)(v75 + 16))
    {
      uint64_t v78 = v287;
      uint64_t v79 = v285;
      v284( v45,  v75 + ((*(unsigned __int8 *)(v78 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v78 + 80))
      + *(void *)(v287 + 72) * v77,
        v285);
      unint64_t v80 = convert #1 () in AST.Node.dslTreeNode.getter(v45);
      if (v2) {
        goto LABEL_89;
      }
      uint64_t v81 = v80;
      if (((v80 >> 59) & 0x1E | (v80 >> 2) & 1) == 0xC)
      {
        (*(void (**)(char *, uint64_t))(v78 + 8))(v45, v79);
      }

      else
      {
        int64_t v82 = v76;
        uint64_t v83 = v78;
        uint64_t v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree.Node, DSLTree._AST.ASTNode));
        uint64_t v85 = swift_allocBox();
        unint64_t v87 = (char *)v86 + *(int *)(v84 + 48);
        *unint64_t v86 = v81;
        uint64_t v88 = *(void (**)(char *, char *, uint64_t))(v83 + 32);
        int64_t v76 = v82;
        uint64_t v2 = 0LL;
        uint64_t v45 = v283;
        v88(v87, v283, v79);
        uint64_t v81 = v85 | 0x6000000000000000LL;
      }

      uint64_t v89 = v286[0];
      unsigned int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        unsigned int isUniquelyReferenced_nonNull_native = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v89 + 16) + 1LL,  1);
        uint64_t v89 = v286[0];
      }

      unint64_t v91 = *(void *)(v89 + 16);
      unint64_t v90 = *(void *)(v89 + 24);
      uint64_t v50 = (uint64_t *)(v91 + 1);
      if (v91 >= v90 >> 1)
      {
        unsigned int isUniquelyReferenced_nonNull_native = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v90 > 1),  v91 + 1,  1);
        uint64_t v89 = v286[0];
      }

      ++v77;
      *(void *)(v89 + 16) = v50;
      *(void *)(v89 + 8 * v91 + 32) = v81;
      if (v76 == v77)
      {
        swift_release();
        swift_bridgeObjectRelease();
        goto LABEL_41;
      }
    }

    __break(1u);
    goto LABEL_79;
  }

  uint64_t v56 = v287;
  if (isUniquelyReferenced_nonNull_native == *MEMORY[0x18961C820])
  {
    (*(void (**)(uint64_t *, uint64_t))(v287 + 96))(v50, v285);
    unint64_t v283 = (char *)*v50;
    uint64_t v92 = swift_projectBox();
    BOOL v93 = v280;
    (*(void (**)(char *, uint64_t, uint64_t))(v281 + 16))(v280, v92, v282);
    uint64_t v94 = v268;
    AST.Group.child.getter();
    unint64_t v95 = convert #1 () in AST.Node.dslTreeNode.getter(v94);
    if (!v1)
    {
      uint64_t v96 = v95;
      uint64_t v97 = v273;
      uint64_t v98 = v274;
      uint64_t v99 = v276;
      uint64_t v284 = 0LL;
      if (((v95 >> 59) & 0x1E | (v95 >> 2) & 1) == 0xC)
      {
        (*(void (**)(char *, uint64_t))(v287 + 8))(v94, v285);
      }

      else
      {
        uint64_t v113 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree.Node, DSLTree._AST.ASTNode));
        uint64_t v114 = swift_allocBox();
        uint64_t v116 = (char *)v115 + *(int *)(v113 + 48);
        *unint64_t v115 = v96;
        (*(void (**)(char *, char *, uint64_t))(v287 + 32))(v116, v94, v285);
        uint64_t v96 = v114 | 0x6000000000000000LL;
        BOOL v93 = v280;
      }

      int64_t v117 = v269;
      AST.Group.kind.getter();
      BOOL v118 = v93;
      uint64_t v119 = v275;
      uint64_t v32 = v117;
      MEMORY[0x186E16DDC](v275);
      unint64_t v120 = *(void (**)(char *, uint64_t))(v270 + 8);
      v120(v117, v119);
      uint64_t v121 = v98;
      int v122 = (*(uint64_t (**)(char *, uint64_t))(v97 + 88))(v99, v98);
      if (v122 == *MEMORY[0x18961C868])
      {
        (*(void (**)(char *, uint64_t))(v281 + 8))(v118, v282);
        (*(void (**)(char *, uint64_t))(v97 + 96))(v99, v98);
        uint64_t v123 = v256;
        uint64_t v124 = v255;
        uint64_t v125 = v257;
        (*(void (**)(char *, char *, uint64_t))(v256 + 32))(v255, v99, v257);
        uint64_t v126 = swift_allocObject();
        MEMORY[0x186E16DDC](v286, v125);
        (*(void (**)(char *, uint64_t))(v123 + 8))(v124, v125);
        swift_release();
        uint64_t v127 = v286[1];
        *(void *)(v126 + 16) = v286[0];
        *(void *)(v126 + 24) = v127;
      }

      else
      {
        if (v122 == *MEMORY[0x18961C878])
        {
          (*(void (**)(char *, uint64_t))(v281 + 8))(v280, v282);
          swift_release();
          type metadata accessor for Unsupported();
          lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind( &lazy protocol witness table cache variable for type Unsupported and conformance Unsupported,  (uint64_t (*)(uint64_t))MEMORY[0x18961C120],  MEMORY[0x18961C130]);
          swift_allocError();
          MEMORY[0x186E168A8]( 0xD000000000000017LL,  0x8000000182DA3420LL,  "/Library/Caches/com.apple.xbs/Sources/swiftlang_overlay_Platform_Device/swift-experimental-string-processing /Sources/_StringProcessing/Regex/ASTConversion.swift",  160LL,  2LL,  56LL);
          swift_willThrow();
          (*(void (**)(char *, uint64_t))(v97 + 8))(v99, v98);
          swift_release();
          return (unint64_t)v32;
        }

        uint64_t v141 = v282;
        if (v122 != *MEMORY[0x18961C8C0])
        {
          uint64_t v179 = v97;
          uint64_t v180 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree._AST.GroupKind, DSLTree.Node));
          uint64_t v287 = swift_allocBox();
          uint64_t v182 = v181;
          uint64_t v285 = *(int *)(v180 + 48);
          uint64_t v183 = v235;
          unint64_t v184 = v280;
          AST.Group.kind.getter();
          (*(void (**)(char *, uint64_t))(v281 + 8))(v184, v141);
          unint64_t v185 = v236;
          uint64_t v186 = v275;
          MEMORY[0x186E16DDC](v275);
          v120(v183, v186);
          (*(void (**)(uint64_t, char *, uint64_t))(v179 + 32))(v182, v185, v121);
          *(void *)(v182 + v285) = v96;
          uint64_t v32 = (char *)(v287 | 0x1000000000000004LL);
          (*(void (**)(char *, uint64_t))(v179 + 8))(v276, v121);
          swift_release();
          return (unint64_t)v32;
        }

        (*(void (**)(char *, uint64_t))(v281 + 8))(v280, v282);
        uint64_t v126 = swift_allocObject();
        swift_release();
        *(void *)(v126 + 16) = 0LL;
        *(void *)(v126 + 24) = 0LL;
      }

      *(void *)(v126 + 32) = 0LL;
      *(_BYTE *)(v126 + 40) = 1;
      *(void *)(v126 + 48) = v96;
      uint64_t v32 = (char *)(v126 | 0x1000000000000000LL);
      *(_OWORD *)(v126 + 56) = 0u;
      *(_OWORD *)(v126 + 72) = 0u;
      *(_BYTE *)(v126 + 88) = 0;
      return (unint64_t)v32;
    }

LABEL_89:
    swift_unexpectedError();
    __break(1u);
    goto LABEL_90;
  }

  if (isUniquelyReferenced_nonNull_native == *MEMORY[0x18961C7E0])
  {
    (*(void (**)(uint64_t *, uint64_t))(v287 + 96))(v50, v285);
    int v100 = (char *)*v50;
    uint64_t v101 = swift_projectBox();
    uint64_t v102 = v258;
    (*(void (**)(char *, uint64_t, uint64_t))(v272 + 16))(v271, v101, v258);
    int v103 = v253;
    AST.Conditional.trueBranch.getter();
    unint64_t v104 = convert #1 () in AST.Node.dslTreeNode.getter(v103);
    if (!v1)
    {
      uint64_t v105 = v104;
      __int128 v106 = v254;
      if (((v104 >> 59) & 0x1E | (v104 >> 2) & 1) == 0xC)
      {
        (*(void (**)(char *, uint64_t))(v287 + 8))(v103, v285);
      }

      else
      {
        uint64_t v136 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree.Node, DSLTree._AST.ASTNode));
        uint64_t v137 = swift_allocBox();
        unint64_t v139 = (char *)v138 + *(int *)(v136 + 48);
        *unint64_t v138 = v105;
        (*(void (**)(char *, char *, uint64_t))(v287 + 32))(v139, v103, v285);
        uint64_t v105 = v137 | 0x6000000000000000LL;
      }

      AST.Conditional.falseBranch.getter();
      unint64_t v140 = convert #1 () in AST.Node.dslTreeNode.getter(v106);
      unint64_t v283 = v100;
      uint64_t v284 = 0LL;
      if (((v140 >> 59) & 0x1E | (v140 >> 2) & 1) == 0xC)
      {
        (*(void (**)(char *, uint64_t))(v287 + 8))(v106, v285);
      }

      else
      {
        uint64_t v142 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree.Node, DSLTree._AST.ASTNode));
        uint64_t v143 = swift_allocBox();
        unsigned int v145 = (char *)v144 + *(int *)(v142 + 48);
        *int v144 = v140;
        (*(void (**)(char *, char *, uint64_t))(v287 + 32))(v145, v106, v285);
        unint64_t v140 = v143 | 0x6000000000000000LL;
      }

      uint64_t v146 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree._AST.ConditionKind, DSLTree.Node, DSLTree.Node));
      uint64_t v147 = swift_allocBox();
      uint64_t v149 = v148;
      uint64_t v150 = *(int *)(v146 + 48);
      uint64_t v151 = *(int *)(v146 + 64);
      unsigned __int8 v152 = v261;
      uint64_t v153 = v271;
      AST.Conditional.condition.getter();
      (*(void (**)(char *, uint64_t))(v272 + 8))(v153, v102);
      uint64_t v154 = v265;
      AST.Conditional.Condition.kind.getter();
      (*(void (**)(char *, uint64_t))(v263 + 8))(v152, v264);
      (*(void (**)(uint64_t, char *, uint64_t))(v266 + 32))(v149, v154, v267);
      swift_release();
      *(void *)(v149 + v150) = v105;
      *(void *)(v149 + v151) = v140;
      return v147 | 0x2000000000000004LL;
    }

    goto LABEL_89;
  }

  if (isUniquelyReferenced_nonNull_native == *MEMORY[0x18961C800])
  {
    (*(void (**)(uint64_t *, uint64_t))(v287 + 96))(v50, v285);
    __int128 v108 = (char *)*v50;
    uint64_t v109 = swift_projectBox();
    (*(void (**)(char *, uint64_t, uint64_t))(v260 + 16))(v259, v109, v262);
    __int128 v110 = v240;
    AST.Quantification.child.getter();
    unint64_t v111 = convert #1 () in AST.Node.dslTreeNode.getter(v110);
    if (!v1)
    {
      uint64_t v112 = v111;
      unint64_t v283 = v108;
      uint64_t v284 = 0LL;
      if (((v111 >> 59) & 0x1E | (v111 >> 2) & 1) == 0xC)
      {
        (*(void (**)(char *, uint64_t))(v287 + 8))(v110, v285);
      }

      else
      {
        uint64_t v163 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree.Node, DSLTree._AST.ASTNode));
        uint64_t v164 = swift_allocBox();
        BOOL v166 = (char *)v165 + *(int *)(v163 + 48);
        *unint64_t v165 = v112;
        (*(void (**)(char *, char *, uint64_t))(v287 + 32))(v166, v110, v285);
        uint64_t v112 = v164 | 0x6000000000000000LL;
      }

      uint64_t v167 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree._AST.QuantificationAmount, DSLTree.QuantificationKind, DSLTree.Node));
      uint64_t v287 = swift_allocBox();
      uint64_t v169 = v168;
      uint64_t v170 = v168 + *(int *)(v167 + 48);
      uint64_t v171 = *(int *)(v167 + 64);
      unint64_t v172 = v241;
      char v173 = v259;
      AST.Quantification.amount.getter();
      uint64_t v174 = v244;
      uint64_t v175 = v243;
      MEMORY[0x186E16DDC](v243);
      (*(void (**)(char *, uint64_t))(v242 + 8))(v172, v175);
      (*(void (**)(uint64_t, char *, uint64_t))(v245 + 32))(v169, v174, v246);
      BOOL v176 = v247;
      AST.Quantification.kind.getter();
      (*(void (**)(char *, uint64_t))(v260 + 8))(v173, v262);
      BOOL v177 = v250;
      uint64_t v178 = v249;
      MEMORY[0x186E16DDC](v249);
      (*(void (**)(char *, uint64_t))(v248 + 8))(v176, v178);
      (*(void (**)(uint64_t, char *, uint64_t))(v251 + 32))(v170, v177, v252);
      type metadata accessor for DSLTree.QuantificationKind(0LL);
      swift_storeEnumTagMultiPayload();
      swift_release();
      *(void *)(v169 + v171) = v112;
      return v287 | 0x3000000000000000LL;
    }

    goto LABEL_89;
  }

  if (isUniquelyReferenced_nonNull_native == *MEMORY[0x18961C828])
  {
    (*(void (**)(uint64_t *, uint64_t))(v287 + 96))(v50, v285);
    uint64_t v128 = swift_projectBox();
    uint64_t v129 = v238;
    unint64_t v130 = v237;
    uint64_t v131 = v239;
    (*(void (**)(char *, uint64_t, uint64_t))(v238 + 16))(v237, v128, v239);
    uint64_t v132 = swift_allocObject();
    uint64_t v133 = MEMORY[0x186E16D58]();
    uint64_t v135 = v134;
    (*(void (**)(char *, uint64_t))(v129 + 8))(v130, v131);
    swift_release();
    *(void *)(v132 + 16) = v133;
    *(void *)(v132 + 24) = v135;
    return v132 | 0x5000000000000000LL;
  }

  if (isUniquelyReferenced_nonNull_native == *MEMORY[0x18961C830])
  {
    (*(void (**)(uint64_t *, uint64_t))(v287 + 96))(v50, v285);
    uint64_t v155 = swift_projectBox();
    uint64_t v156 = v233;
    uint64_t v157 = v232;
    uint64_t v158 = v234;
    (*(void (**)(char *, uint64_t, uint64_t))(v233 + 16))(v232, v155, v234);
    uint64_t v159 = swift_allocObject();
    uint64_t v160 = MEMORY[0x186E16D70]();
    uint64_t v162 = v161;
    (*(void (**)(char *, uint64_t))(v156 + 8))(v157, v158);
    swift_release();
    *(void *)(v159 + 16) = v160;
    *(void *)(v159 + 24) = v162;
    return v159 | 0x4000000000000004LL;
  }

  if (isUniquelyReferenced_nonNull_native == *MEMORY[0x18961C7F0])
  {
    (*(void (**)(uint64_t *, uint64_t))(v287 + 8))(v50, v285);
    type metadata accessor for Unsupported();
    lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind( &lazy protocol witness table cache variable for type Unsupported and conformance Unsupported,  (uint64_t (*)(uint64_t))MEMORY[0x18961C120],  MEMORY[0x18961C130]);
    swift_allocError();
    MEMORY[0x186E168A8]( 0xD000000000000013LL,  0x8000000182DA3350LL,  "/Library/Caches/com.apple.xbs/Sources/swiftlang_overlay_Platform_Device/swift-experimental-string-processing/Sourc es/_StringProcessing/Regex/ASTConversion.swift",  160LL,  2LL,  79LL);
    swift_willThrow();
    return (unint64_t)v32;
  }

LABEL_69:
  if (isUniquelyReferenced_nonNull_native == *MEMORY[0x18961C810])
  {
    (*(void (**)(uint64_t *, uint64_t))(v56 + 96))(v50, v285);
    uint64_t v188 = swift_projectBox();
    uint64_t v189 = v227;
    unint64_t v190 = v226;
    uint64_t v191 = v228;
    (*(void (**)(char *, uint64_t, uint64_t))(v227 + 16))(v226, v188, v228);
    char v192 = v230;
    AST.Atom.kind.getter();
    uint64_t v193 = v229;
    uint64_t v194 = v231;
    if ((*(unsigned int (**)(char *, uint64_t))(v229 + 88))(v192, v231) == *MEMORY[0x18961C718])
    {
      uint64_t v284 = (void (*)(char *, uint64_t, uint64_t))v2;
      (*(void (**)(char *, uint64_t))(v189 + 8))(v190, v191);
      (*(void (**)(char *, uint64_t))(v193 + 96))(v192, v194);
      uint64_t v195 = v224;
      unint64_t v196 = v222;
      uint64_t v197 = v225;
      (*(void (**)(char *, char *, uint64_t))(v224 + 32))(v222, v192, v225);
      uint64_t v198 = AST.Atom.ScalarSequence.scalarValues.getter();
      (*(void (**)(char *, uint64_t))(v195 + 8))(v196, v197);
      int64_t v199 = *(void *)(v198 + 16);
      if (v199)
      {
        v286[0] = MEMORY[0x18961AFE8];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0LL, v199, 0);
        unint64_t v200 = 0LL;
        uint64_t v201 = v286[0];
        while (v200 < *(void *)(v198 + 16))
        {
          int v202 = *(_DWORD *)(v198 + 4 * v200 + 32);
          type metadata accessor for DSLTree.Atom(0LL);
          uint64_t v203 = swift_allocBox();
          *unsigned __int8 v204 = v202;
          swift_storeEnumTagMultiPayload();
          v286[0] = v201;
          unint64_t v206 = *(void *)(v201 + 16);
          unint64_t v205 = *(void *)(v201 + 24);
          if (v206 >= v205 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v205 > 1),  v206 + 1,  1);
            uint64_t v201 = v286[0];
          }

          ++v200;
          *(void *)(v201 + 16) = v206 + 1;
          *(void *)(v201 + 8 * v206 + 32) = v203 | 0x4000000000000000LL;
          if (v199 == v200)
          {
            swift_release();
            swift_bridgeObjectRelease();
            goto LABEL_87;
          }
        }

        __break(1u);
        goto LABEL_89;
      }

      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v201 = MEMORY[0x18961AFE8];
LABEL_87:
      uint64_t v218 = swift_allocObject();
      *(void *)(v218 + 16) = v201;
      return v218 | 4;
    }

    else
    {
      type metadata accessor for DSLTree.Atom(0LL);
      uint64_t v212 = swift_allocBox();
      AST.Atom.dslTreeAtom.getter(v213);
      (*(void (**)(char *, uint64_t))(v189 + 8))(v190, v191);
      uint64_t v32 = (char *)(v212 | 0x4000000000000000LL);
      (*(void (**)(char *, uint64_t))(v193 + 8))(v192, v194);
      swift_release();
    }

    return (unint64_t)v32;
  }

LABEL_79:
  if (isUniquelyReferenced_nonNull_native == *MEMORY[0x18961C808])
  {
    (*(void (**)(uint64_t *, uint64_t))(v56 + 96))(v50, v285);
    uint64_t v207 = swift_projectBox();
    uint64_t v208 = v221;
    unint64_t v209 = v220;
    uint64_t v210 = v223;
    (*(void (**)(char *, uint64_t, uint64_t))(v221 + 16))(v220, v207, v223);
    uint64_t v211 = swift_allocObject();
    AST.CustomCharacterClass.dslTreeClass.getter(v211 + 16);
    (*(void (**)(char *, uint64_t))(v208 + 8))(v209, v210);
    swift_release();
    return v211 | 0x3000000000000004LL;
  }

  if (isUniquelyReferenced_nonNull_native == *MEMORY[0x18961C7F8])
  {
    (*(void (**)(uint64_t *, uint64_t))(v56 + 96))(v50, v285);
    uint64_t v214 = type metadata accessor for AST.AbsentFunction();
    uint64_t v215 = swift_projectBox();
    type metadata accessor for DSLTree._AST.AbsentFunction(0LL);
    uint64_t v216 = swift_allocBox();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v214 - 8) + 16LL))(v217, v215, v214);
    swift_release();
    return v216 | 0x5000000000000004LL;
  }

  if (isUniquelyReferenced_nonNull_native == *MEMORY[0x18961C818])
  {
    (*(void (**)(uint64_t *, uint64_t))(v56 + 8))(v50, v285);
    return 0x8000000000000000LL;
  }

uint64_t AST.Atom.dslTreeAtom.getter@<X0>(char *a1@<X8>)
{
  uint64_t v48 = a1;
  uint64_t v2 = type metadata accessor for AST.Atom.Scalar();
  uint64_t v44 = *(void *)(v2 - 8);
  uint64_t v45 = v2;
  MEMORY[0x1895F8858](v2);
  uint64_t v43 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for AST.Atom.EscapedBuiltin();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1895F8858](v4);
  uint64_t v42 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v6);
  uint64_t v9 = (char *)&v41 - v8;
  uint64_t v10 = type metadata accessor for AST.Atom.Kind();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x1895F8858](v10);
  uint64_t v46 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = MEMORY[0x1895F8858](v12);
  uint64_t v16 = (char *)&v41 - v15;
  MEMORY[0x1895F8858](v14);
  uint64_t v18 = (char *)&v41 - v17;
  uint64_t v47 = v1;
  AST.Atom.kind.getter();
  uint64_t v19 = *(uint64_t (**)(char *, uint64_t))(v11 + 88);
  int v20 = v19(v18, v10);
  int v21 = *MEMORY[0x18961C760];
  if (v20 != *MEMORY[0x18961C760])
  {
    if (v20 == *MEMORY[0x18961C6F0])
    {
      char v22 = 9;
    }

    else
    {
      if (v20 != *MEMORY[0x18961C6F8])
      {
        LOBYTE(v49[0]) = 13;
        (*(void (**)(char *, uint64_t))(v11 + 8))(v18, v10);
        goto LABEL_3;
      }

      char v22 = 10;
    }

size_t AST.CustomCharacterClass.dslTreeClass.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v22 = type metadata accessor for AST.CustomCharacterClass.Member();
  uint64_t v3 = *(void *)(v22 - 8);
  MEMORY[0x1895F8858](v22);
  uint64_t v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DSLTree.CustomCharacterClass.Member(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  uint64_t v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = AST.CustomCharacterClass.members.getter();
  int64_t v11 = *(void *)(v10 + 16);
  if (v11)
  {
    v19[1] = v1;
    uint64_t v20 = a1;
    uint64_t v23 = MEMORY[0x18961AFE8];
    size_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0LL, v11, 0);
    unint64_t v13 = 0LL;
    int64_t v14 = v11;
    int64_t v21 = v11;
    while (v13 < *(void *)(v10 + 16))
    {
      uint64_t v15 = v22;
      (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))( v5,  v10 + ((*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))
      + *(void *)(v3 + 72) * v13,
        v22);
      convert #1 (_:) in AST.CustomCharacterClass.dslTreeClass.getter( (void (*)(void, void, void))v5,  v9);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v15);
      uint64_t v16 = v23;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v16 + 16) + 1LL,  1);
        int64_t v14 = v21;
        uint64_t v16 = v23;
      }

      unint64_t v18 = *(void *)(v16 + 16);
      unint64_t v17 = *(void *)(v16 + 24);
      if (v18 >= v17 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
        int64_t v14 = v21;
        uint64_t v16 = v23;
      }

      ++v13;
      *(void *)(v16 + 16) = v18 + 1;
      size_t result = outlined init with take of DSLTree.QuantificationKind( (uint64_t)v9,  v16 + ((*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
               + *(void *)(v7 + 72) * v18,
                 type metadata accessor for DSLTree.CustomCharacterClass.Member);
      if (v14 == v13)
      {
        swift_bridgeObjectRelease();
        a1 = v20;
        goto LABEL_11;
      }
    }

    __break(1u);
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v16 = MEMORY[0x18961AFE8];
LABEL_11:
    size_t result = AST.CustomCharacterClass.isInverted.getter();
    *(void *)a1 = v16;
    *(_BYTE *)(a1 + 8) = result & 1;
  }

  return result;
}

uint64_t convert #1 (_:) in AST.CustomCharacterClass.dslTreeClass.getter@<X0>( void (*a1)(void, void, void)@<X0>, char *a2@<X8>)
{
  unint64_t v104 = a1;
  uint64_t v102 = a2;
  uint64_t v2 = type metadata accessor for AST.Trivia();
  uint64_t v89 = *(void *)(v2 - 8);
  uint64_t v90 = v2;
  MEMORY[0x1895F8858](v2);
  unint64_t v91 = (char *)&v85 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v88 = type metadata accessor for AST.CustomCharacterClass.SetOp();
  uint64_t v87 = *(void *)(v88 - 8);
  MEMORY[0x1895F8858](v88);
  unint64_t v86 = (char *)&v85 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v103 = type metadata accessor for DSLTree.CustomCharacterClass.Member(0LL);
  uint64_t v106 = *(void *)(v103 - 8);
  uint64_t v5 = MEMORY[0x1895F8858](v103);
  uint64_t v99 = (char *)&v85 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v5);
  uint64_t v107 = (uint64_t)&v85 - v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.CustomCharacterClass.SetOp>);
  uint64_t v93 = *(void *)(v8 - 8);
  uint64_t v94 = v8;
  MEMORY[0x1895F8858](v8);
  uint64_t v92 = (char *)&v85 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for AST.Quote();
  uint64_t v96 = *(void *)(v10 - 8);
  uint64_t v97 = v10;
  MEMORY[0x1895F8858](v10);
  unint64_t v95 = (char *)&v85 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for AST.Atom();
  uint64_t v100 = *(void *)(v12 - 8);
  uint64_t v101 = v12;
  uint64_t v13 = MEMORY[0x1895F8858](v12);
  uint64_t v98 = (char *)&v85 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v13);
  uint64_t v16 = (char *)&v85 - v15;
  uint64_t v17 = type metadata accessor for AST.CustomCharacterClass.Range();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1895F8858](v17);
  uint64_t v20 = (char *)&v85 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = type metadata accessor for AST.CustomCharacterClass();
  uint64_t v22 = *(void *)(v21 - 8);
  MEMORY[0x1895F8858](v21);
  uint64_t v24 = (char *)&v85 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = type metadata accessor for AST.CustomCharacterClass.Member();
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = MEMORY[0x1895F8858](v25);
  uint64_t v105 = (char *)&v85 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v27);
  uint64_t v30 = (uint64_t *)((char *)&v85 - v29);
  uint64_t v31 = v104;
  unint64_t v104 = *(void (**)(void, void, void))(v26 + 16);
  v104((char *)&v85 - v29, v31, v25);
  int v32 = (*(uint64_t (**)(void *, uint64_t))(v26 + 88))(v30, v25);
  if (v32 == *MEMORY[0x18961C490])
  {
    (*(void (**)(void *, uint64_t))(v26 + 96))(v30, v25);
    uint64_t v33 = (*(uint64_t (**)(char *, void *, uint64_t))(v22 + 32))(v24, v30, v21);
    AST.CustomCharacterClass.dslTreeClass.getter(&v108, v33);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v21);
    char v34 = v109;
    int v35 = v102;
    *(void *)uint64_t v102 = v108;
    _BYTE v35[8] = v34;
    return swift_storeEnumTagMultiPayload();
  }

  if (v32 == *MEMORY[0x18961C488])
  {
    (*(void (**)(void *, uint64_t))(v26 + 96))(v30, v25);
    (*(void (**)(char *, void *, uint64_t))(v18 + 32))(v20, v30, v17);
    uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree.Atom, DSLTree.Atom));
    uint64_t v37 = v102;
    uint64_t v38 = &v102[*(int *)(v36 + 48)];
    AST.CustomCharacterClass.Range.lhs.getter();
    AST.Atom.dslTreeAtom.getter(v37);
    uint64_t v39 = v101;
    Swift::String v40 = *(void (**)(char *, uint64_t))(v100 + 8);
    v40(v16, v101);
    uint64_t v41 = v98;
    AST.CustomCharacterClass.Range.rhs.getter();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
    AST.Atom.dslTreeAtom.getter(v38);
    v40(v41, v39);
    return swift_storeEnumTagMultiPayload();
  }

  if (v32 == *MEMORY[0x18961C478])
  {
    (*(void (**)(void *, uint64_t))(v26 + 96))(v30, v25);
    uint64_t v43 = v100;
    uint64_t v42 = v101;
    (*(void (**)(char *, void *, uint64_t))(v100 + 32))(v16, v30, v101);
    AST.Atom.dslTreeAtom.getter(v102);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v16, v42);
    return swift_storeEnumTagMultiPayload();
  }

  if (v32 == *MEMORY[0x18961C480])
  {
    (*(void (**)(void *, uint64_t))(v26 + 96))(v30, v25);
    uint64_t v45 = v95;
    uint64_t v44 = v96;
    uint64_t v46 = v97;
    uint64_t v47 = (*(uint64_t (**)(char *, void *, uint64_t))(v96 + 32))(v95, v30, v97);
    uint64_t v48 = MEMORY[0x186E16D58](v47);
    uint64_t v50 = v49;
    (*(void (**)(char *, uint64_t))(v44 + 8))(v45, v46);
    uint64_t v51 = v102;
    *(void *)uint64_t v102 = v48;
    *((void *)v51 + 1) = v50;
    return swift_storeEnumTagMultiPayload();
  }

  if (v32 == *MEMORY[0x18961C498])
  {
    (*(void (**)(void *, uint64_t))(v26 + 96))(v30, v25);
    uint64_t v52 = v89;
    uint64_t v53 = v91;
    uint64_t v54 = v30;
    uint64_t v55 = v90;
    uint64_t v56 = (*(uint64_t (**)(char *, void *, uint64_t))(v89 + 32))(v91, v54, v90);
    uint64_t v57 = MEMORY[0x186E16D70](v56);
    uint64_t v59 = v58;
    (*(void (**)(char *, uint64_t))(v52 + 8))(v53, v55);
    char v60 = v102;
    *(void *)uint64_t v102 = v57;
    *((void *)v60 + 1) = v59;
    return swift_storeEnumTagMultiPayload();
  }

  if (v32 == *MEMORY[0x18961C470])
  {
    (*(void (**)(void *, uint64_t))(v26 + 96))(v30, v25);
    uint64_t v61 = *v30;
    uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ([AST.CustomCharacterClass.Member], Source.Located<AST.CustomCharacterClass.SetOp>, [AST.CustomCharacterClass.Member]));
    uint64_t v63 = *(void *)((char *)v30 + *(int *)(v62 + 64));
    (*(void (**)(char *, char *, uint64_t))(v93 + 32))(v92, (char *)v30 + *(int *)(v62 + 48), v94);
    int64_t v64 = *(void *)(v61 + 16);
    uint64_t v65 = MEMORY[0x18961AFE8];
    if (v64)
    {
      uint64_t v108 = MEMORY[0x18961AFE8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0LL, v64, 0);
      unint64_t v66 = 0LL;
      while (v66 < *(void *)(v61 + 16))
      {
        uint64_t v67 = v105;
        v104( v105,  v61 + ((*(unsigned __int8 *)(v26 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80))
        + *(void *)(v26 + 72) * v66,
          v25);
        convert #1 (_:) in AST.CustomCharacterClass.dslTreeClass.getter(v67);
        (*(void (**)(char *, uint64_t))(v26 + 8))(v67, v25);
        uint64_t v68 = v108;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v68 + 16) + 1LL,  1);
          uint64_t v68 = v108;
        }

        unint64_t v70 = *(void *)(v68 + 16);
        unint64_t v69 = *(void *)(v68 + 24);
        if (v70 >= v69 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v69 > 1,  v70 + 1,  1);
          uint64_t v68 = v108;
        }

        ++v66;
        *(void *)(v68 + 16) = v70 + 1;
        outlined init with take of DSLTree.QuantificationKind( v107,  v68 + ((*(unsigned __int8 *)(v106 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v106 + 80))
        + *(void *)(v106 + 72) * v70,
          type metadata accessor for DSLTree.CustomCharacterClass.Member);
        if (v64 == v66)
        {
          swift_bridgeObjectRelease();
          uint64_t v65 = MEMORY[0x18961AFE8];
          goto LABEL_22;
        }
      }

      __break(1u);
      goto LABEL_39;
    }

    swift_bridgeObjectRelease();
    uint64_t v68 = MEMORY[0x18961AFE8];
LABEL_22:
    int64_t v71 = *(void *)(v63 + 16);
    if (v71)
    {
      uint64_t v108 = v65;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0LL, v71, 0);
      unint64_t v72 = 0LL;
      uint64_t v73 = (uint64_t)v99;
      while (v72 < *(void *)(v63 + 16))
      {
        uint64_t v74 = v105;
        v104( v105,  v63 + ((*(unsigned __int8 *)(v26 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80))
        + *(void *)(v26 + 72) * v72,
          v25);
        convert #1 (_:) in AST.CustomCharacterClass.dslTreeClass.getter(v74);
        (*(void (**)(char *, uint64_t))(v26 + 8))(v74, v25);
        uint64_t v75 = v108;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v75 + 16) + 1LL,  1);
          uint64_t v73 = (uint64_t)v99;
          uint64_t v75 = v108;
        }

        unint64_t v77 = *(void *)(v75 + 16);
        unint64_t v76 = *(void *)(v75 + 24);
        if (v77 >= v76 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v76 > 1,  v77 + 1,  1);
          uint64_t v73 = (uint64_t)v99;
          uint64_t v75 = v108;
        }

        ++v72;
        *(void *)(v75 + 16) = v77 + 1;
        outlined init with take of DSLTree.QuantificationKind( v73,  v75 + ((*(unsigned __int8 *)(v106 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v106 + 80))
        + *(void *)(v106 + 72) * v77,
          type metadata accessor for DSLTree.CustomCharacterClass.Member);
        if (v71 == v72)
        {
          swift_bridgeObjectRelease();
          goto LABEL_32;
        }
      }

LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    swift_bridgeObjectRelease();
    uint64_t v75 = MEMORY[0x18961AFE8];
LABEL_32:
    uint64_t v78 = v86;
    uint64_t v79 = v94;
    unint64_t v80 = v92;
    MEMORY[0x186E16DDC](v94);
    int v81 = (*(uint64_t (**)(char *, uint64_t))(v87 + 88))(v78, v88);
    int64_t v82 = v102;
    if (v81 == *MEMORY[0x18961C448] || v81 == *MEMORY[0x18961C450] || v81 == *MEMORY[0x18961C458])
    {
      (*(void (**)(char *, uint64_t))(v93 + 8))(v80, v79);
      uint64_t v83 = swift_allocObject();
      *(void *)(v83 + 16) = v68;
      *(_BYTE *)(v83 + 24) = 0;
      *(void *)(v83 + 32) = v75;
      *(_BYTE *)(v83 + 40) = 0;
      *(void *)int64_t v82 = v83;
      return swift_storeEnumTagMultiPayload();
    }
  }

uint64_t AST.Atom.EscapedBuiltin.dslAssertionKind.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for AST.Atom.EscapedBuiltin();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2, v4);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  if ((_DWORD)result == *MEMORY[0x18961C548])
  {
    *a1 = 11;
  }

  else if ((_DWORD)result == *MEMORY[0x18961C590])
  {
    *a1 = 12;
  }

  else if ((_DWORD)result == *MEMORY[0x18961C570])
  {
    *a1 = 0;
  }

  else if ((_DWORD)result == *MEMORY[0x18961C5B8])
  {
    *a1 = 1;
  }

  else if ((_DWORD)result == *MEMORY[0x18961C540])
  {
    *a1 = 2;
  }

  else if ((_DWORD)result == *MEMORY[0x18961C5C0])
  {
    *a1 = 4;
  }

  else if ((_DWORD)result == *MEMORY[0x18961C5A0])
  {
    *a1 = 3;
  }

  else if ((_DWORD)result == *MEMORY[0x18961C528])
  {
    *a1 = 5;
  }

  else if ((_DWORD)result == *MEMORY[0x18961C560])
  {
    *a1 = 6;
  }

  else
  {
    *a1 = 13;
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }

  return result;
}

uint64_t AST.Atom.EscapedBuiltin.dslCharacterClass.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for AST.Atom.EscapedBuiltin();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2, v4);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  if ((_DWORD)result == *MEMORY[0x18961C538])
  {
    *a1 = 0;
  }

  else if ((_DWORD)result == *MEMORY[0x18961C588])
  {
    *a1 = 1;
  }

  else if ((_DWORD)result == *MEMORY[0x18961C5A8])
  {
    *a1 = 2;
  }

  else if ((_DWORD)result == *MEMORY[0x18961C5B0])
  {
    *a1 = 3;
  }

  else if ((_DWORD)result == *MEMORY[0x18961C510])
  {
    *a1 = 5;
  }

  else if ((_DWORD)result == *MEMORY[0x18961C580])
  {
    *a1 = 4;
  }

  else if ((_DWORD)result == *MEMORY[0x18961C518])
  {
    *a1 = 6;
  }

  else if ((_DWORD)result == *MEMORY[0x18961C550])
  {
    *a1 = 7;
  }

  else if ((_DWORD)result == *MEMORY[0x18961C530])
  {
    *a1 = 8;
  }

  else if ((_DWORD)result == *MEMORY[0x18961C568])
  {
    *a1 = 9;
  }

  else if ((_DWORD)result == *MEMORY[0x18961C558])
  {
    *a1 = 10;
  }

  else if ((_DWORD)result == *MEMORY[0x18961C598])
  {
    *a1 = 11;
  }

  else if ((_DWORD)result == *MEMORY[0x18961C578])
  {
    *a1 = 12;
  }

  else
  {
    *a1 = 14;
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }

  return result;
}

__n128 AnyRegexOutput.init<A>(_:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *(void *)a1;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void *AnyRegexOutput.extractValues<A>(as:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = a2;
  uint64_t v5 = v2[2];
  int64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = MEMORY[0x18961AFE8];
  if (v6)
  {
    uint64_t v19 = a1;
    uint64_t v8 = *v2;
    uint64_t v9 = v2[1];
    uint64_t v24 = MEMORY[0x18961AFE8];
    int64_t v20 = v6;
    __n128 result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0LL, v6, 0);
    unint64_t v11 = 0LL;
    uint64_t v12 = v5 + 32;
    uint64_t v13 = v5;
    while (v11 < *(void *)(v5 + 16))
    {
      outlined init with copy of AnyRegexOutput.ElementRepresentation(v12, (uint64_t)&v21);
      v22[10] = v8;
      v22[11] = v9;
      uint64_t v14 = v21;
      swift_bridgeObjectRetain();
      constructExistentialOutputComponent(from:component:optionalCount:)((uint64_t)v22, v14, (uint64_t *)v23);
      outlined destroy of AnyRegexOutput.Element((uint64_t)&v21);
      uint64_t v7 = v24;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v7 + 16) + 1LL,  1);
        uint64_t v7 = v24;
      }

      unint64_t v16 = *(void *)(v7 + 16);
      unint64_t v15 = *(void *)(v7 + 24);
      if (v16 >= v15 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v15 > 1),  v16 + 1,  1);
        uint64_t v7 = v24;
      }

      ++v11;
      *(void *)(v7 + 16) = v16 + 1;
      __n128 result = outlined init with take of Any(v23, (_OWORD *)(v7 + 32 * v16 + 32));
      v12 += 88LL;
      uint64_t v5 = v13;
      if (v20 == v11)
      {
        uint64_t v4 = a2;
        a1 = v19;
        goto LABEL_10;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_10:
    *(void *)&v23[0] = v7;
    swift_getCanonicalSpecializedMetadata();
    lazy protocol witness table accessor for type PartialRangeUpTo<String.Index> and conformance PartialRangeUpTo<A>( &lazy protocol witness table cache variable for type [Any] and conformance [A],  (uint64_t)&unk_189C49988,  (uint64_t)&cache variable for noncanonical specialized generic type metadata for [Any],  MEMORY[0x189618458]);
    static TypeConstruction.tuple<A>(of:)();
    int v17 = swift_dynamicCast();
    return (void *)(*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56LL))( v4,  v17 ^ 1u,  1LL,  a1);
  }

  return result;
}

uint64_t AnyRegexOutput.Element.substring.getter()
{
  if (v3[3] == 1LL)
  {
    outlined destroy of (range: Range<String.Index>, value: Any?)?( (uint64_t)&v2,  &demangling cache variable for type metadata for (range: Range<String.Index>, value: Any?)?);
    return 0LL;
  }

  else
  {
    outlined destroy of Any?((uint64_t)v3);
    return String.subscript.getter();
  }

_OWORD *AnyRegexOutput.Element.value.getter@<X0>(uint64_t *a1@<X8>)
{
  return constructExistentialOutputComponent(from:component:optionalCount:)((uint64_t)(v1 + 1), *v1, a1);
}

uint64_t AnyRegexOutput.Element.type.getter()
{
  if (v8[3] == 1LL)
  {
    outlined destroy of (range: Range<String.Index>, value: Any?)?( (uint64_t)v7,  &demangling cache variable for type metadata for (range: Range<String.Index>, value: Any?)?);
LABEL_7:
    outlined init with copy of AnyRegexOutput.ElementRepresentation(v0, (uint64_t)v7);
    goto LABEL_8;
  }

  outlined init with copy of Any?((uint64_t)v8, (uint64_t)&v5);
  if (!v6)
  {
    outlined destroy of Any?((uint64_t)v8);
    goto LABEL_7;
  }

  outlined init with take of Any(&v5, &v3);
  __swift_project_boxed_opaque_existential_0(&v3, v4);
  uint64_t DynamicType = swift_getDynamicType();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v3);
  outlined destroy of Any?((uint64_t)v8);
  outlined init with copy of AnyRegexOutput.ElementRepresentation(v0, (uint64_t)v7);
  if (!DynamicType)
  {
LABEL_8:
    outlined destroy of AnyRegexOutput.ElementRepresentation((uint64_t)v7);
    return static TypeConstruction.optionalType<A>(of:depth:)();
  }

  outlined destroy of AnyRegexOutput.ElementRepresentation((uint64_t)v7);
  return DynamicType;
}

uint64_t AnyRegexOutput.Element.name.getter()
{
  uint64_t v1 = *(void *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AnyRegexOutput.startIndex.getter()
{
  return 0LL;
}

uint64_t AnyRegexOutput.count.getter()
{
  return *(void *)(*(void *)(v0 + 16) + 16LL);
}

Swift::Int __swiftcall AnyRegexOutput.index(after:)(Swift::Int after)
{
  BOOL v1 = __OFADD__(after, 1LL);
  Swift::Int result = after + 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

Swift::Int __swiftcall AnyRegexOutput.index(before:)(Swift::Int before)
{
  BOOL v1 = __OFSUB__(before, 1LL);
  Swift::Int result = before - 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

unint64_t AnyRegexOutput.subscript.getter@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  if ((result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v4 = v2[2];
    if (*(void *)(v4 + 16) > result)
    {
      uint64_t v6 = *v2;
      uint64_t v5 = v2[1];
      outlined init with copy of AnyRegexOutput.ElementRepresentation(v4 + 88 * result + 32, a2);
      *(void *)(a2 + 88) = v6;
      *(void *)(a2 + 96) = v5;
      return swift_bridgeObjectRetain();
    }
  }

  __break(1u);
  return result;
}

unint64_t specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)( unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v6 = *(void *)(a6 + 16);
  if (v6 < result || v6 < a3)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v8 = a3 - result;
  if (a2 >= 1)
  {
    return 0LL;
  }

  if (v8 <= 0 && v8 > a2) {
    return 0LL;
  }
LABEL_13:
  BOOL v9 = __OFADD__(result, a2);
  result += a2;
  if (v9) {
    goto LABEL_16;
  }
  if (result > v6) {
LABEL_17:
  }
    __break(1u);
  return result;
}

void *protocol witness for BidirectionalCollection.index(before:) in conformance AnyRegexOutput@<X0>( void *result@<X0>, void *a2@<X8>)
{
  if (__OFSUB__(*result, 1LL)) {
    __break(1u);
  }
  else {
    *a2 = *result - 1LL;
  }
  return result;
}

void *protocol witness for BidirectionalCollection.formIndex(before:) in conformance AnyRegexOutput( void *result)
{
  if (__OFSUB__(*result, 1LL)) {
    __break(1u);
  }
  else {
    --*result;
  }
  return result;
}

void protocol witness for Collection.endIndex.getter in conformance AnyRegexOutput(void *a1@<X8>)
{
  *a1 = *(void *)(*(void *)(v1 + 16) + 16LL);
}

void (*protocol witness for Collection.subscript.read in conformance AnyRegexOutput( void (**a1)(uint64_t *a1), unint64_t *a2))(uint64_t *a1)
{
  Swift::Int result = (void (*)(uint64_t *))malloc(0x68uLL);
  *a1 = result;
  unint64_t v6 = *a2;
  if ((*a2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v7 = v2[2];
    if (v6 < *(void *)(v7 + 16))
    {
      uint64_t v8 = result;
      uint64_t v10 = *v2;
      uint64_t v9 = v2[1];
      outlined init with copy of AnyRegexOutput.ElementRepresentation(v7 + 88 * v6 + 32, (uint64_t)result);
      *((void *)v8 + 11) = v10;
      *((void *)v8 + 12) = v9;
      swift_bridgeObjectRetain();
      return protocol witness for Collection.subscript.read in conformance AnyRegexOutput;
    }
  }

  __break(1u);
  return result;
}

void protocol witness for Collection.subscript.read in conformance AnyRegexOutput(uint64_t *a1)
{
  uint64_t v1 = (void *)*a1;
  outlined destroy of AnyRegexOutput.Element(*a1);
  free(v1);
}

uint64_t *protocol witness for Collection.subscript.getter in conformance AnyRegexOutput@<X0>( uint64_t *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *result;
  if (*result < 0 || (uint64_t v4 = result[1], v5 = v2[2], *(void *)(v5 + 16) < v4))
  {
    __break(1u);
  }

  else
  {
    uint64_t v6 = v2[1];
    a2[2] = *v2;
    a2[3] = v6;
    a2[4] = v5;
    *a2 = v3;
    a2[1] = v4;
    swift_bridgeObjectRetain();
    return (uint64_t *)swift_bridgeObjectRetain();
  }

  return result;
}

void protocol witness for Collection.indices.getter in conformance AnyRegexOutput(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(*(void *)(v1 + 16) + 16LL);
  *a1 = 0LL;
  a1[1] = v2;
}

BOOL protocol witness for Collection.isEmpty.getter in conformance AnyRegexOutput()
{
  return *(void *)(*(void *)(v0 + 16) + 16LL) == 0LL;
}

void *protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance AnyRegexOutput@<X0>( void *result@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v4 = *result + a2;
  if (__OFADD__(*result, a2))
  {
    __break(1u);
  }

  else if (v4 <= *(void *)(*(void *)(v3 + 16) + 16LL))
  {
    *a3 = v4;
    return result;
  }

  __break(1u);
  return result;
}

unint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance AnyRegexOutput@<X0>( unint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3, *v4, v4[1], v4[2]);
  *(void *)a4 = result;
  *(_BYTE *)(a4 + 8) = v7 & 1;
  return result;
}

unint64_t *protocol witness for RandomAccessCollection.distance(from:to:) in conformance AnyRegexOutput( unint64_t *result, unint64_t *a2)
{
  unint64_t v3 = *a2;
  unint64_t v4 = *(void *)(*(void *)(v2 + 16) + 16LL);
  if (*result <= v4 && v3 <= v4) {
    return (unint64_t *)(v3 - *result);
  }
  __break(1u);
  return result;
}

uint64_t *protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance AnyRegexOutput( uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = a2[1];
  if (*result >= *a2)
  {
    BOOL v5 = __OFSUB__(v2, v3);
    BOOL v4 = v2 - v3 < 0;
  }

  else
  {
    BOOL v5 = 0;
    BOOL v4 = 0;
  }

  if (v4 == v5) {
    __break(1u);
  }
  return result;
}

void *protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance AnyRegexOutput( void *result, void *a2)
{
  if (*result < *a2 || a2[1] < *result) {
    __break(1u);
  }
  return result;
}

{
  if (*result < *a2 || a2[1] < result[1]) {
    __break(1u);
  }
  return result;
}

void *protocol witness for Collection.index(after:) in conformance AnyRegexOutput@<X0>( void *result@<X0>, void *a2@<X8>)
{
  if (__OFADD__(*result, 1LL)) {
    __break(1u);
  }
  else {
    *a2 = *result + 1LL;
  }
  return result;
}

void *protocol witness for Collection.formIndex(after:) in conformance AnyRegexOutput(void *result)
{
  if (__OFADD__(*result, 1LL)) {
    __break(1u);
  }
  else {
    ++*result;
  }
  return result;
}

__n128 protocol witness for Sequence.makeIterator() in conformance AnyRegexOutput@<Q0>(uint64_t a1@<X8>)
{
  *(void *)a1 = *(void *)v1;
  __n128 result = *(__n128 *)(v1 + 8);
  *(__n128 *)(a1 + 8) = result;
  *(void *)(a1 + 24) = 0LL;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance AnyRegexOutput()
{
  return *(void *)(*(void *)(v0 + 16) + 16LL);
}

void *protocol witness for Sequence._copyToContiguousArray() in conformance AnyRegexOutput()
{
  uint64_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0, v0[1], v0[2]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance AnyRegexOutput( uint64_t a1, uint64_t a2, unint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3, v3[1], v3[2]);
}

uint64_t AnyRegexOutput.subscript.getter@<X0>( unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v8 = *v3;
  uint64_t v7 = v3[1];
  uint64_t v9 = v3[2];
  unint64_t v10 = *(void *)(v9 + 16);
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRetain();
  if (v10)
  {
    unint64_t v12 = 0LL;
    uint64_t v13 = v9 + 32;
    while (v12 < v10)
    {
      outlined init with copy of AnyRegexOutput.ElementRepresentation(v13, (uint64_t)v23);
      *((void *)&v25 + 1) = v8;
      uint64_t v26 = v7;
      *(_OWORD *)&v20[16] = v24;
      __int128 v21 = v25;
      uint64_t v22 = v7;
      __int128 v17 = v23[0];
      __int128 v18 = v23[1];
      __int128 v19 = v23[2];
      *(_OWORD *)int64_t v20 = v23[3];
      if ((void)v24
        && (*(_OWORD *)&v20[8] == __PAIR128__(a2, a1) || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        uint64_t result = swift_bridgeObjectRelease();
        __int128 v14 = v21;
        *(_OWORD *)(a3 + 64) = *(_OWORD *)&v20[16];
        *(_OWORD *)(a3 + 80) = v14;
        *(void *)(a3 + 96) = v22;
        __int128 v15 = v18;
        *(_OWORD *)a3 = v17;
        *(_OWORD *)(a3 + 16) = v15;
        __int128 v16 = *(_OWORD *)v20;
        *(_OWORD *)(a3 + 32) = v19;
        *(_OWORD *)(a3 + 48) = v16;
        return result;
      }

      ++v12;
      swift_bridgeObjectRetain();
      uint64_t result = outlined destroy of AnyRegexOutput.Element((uint64_t)&v17);
      unint64_t v10 = *(void *)(v9 + 16);
      v13 += 88LL;
      if (v12 == v10) {
        goto LABEL_9;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_9:
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(a3 + 96) = 0LL;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }

  return result;
}

uint64_t Regex.Match<A>.subscript.getter()
{
  return String.subscript.getter();
}

uint64_t Regex.Match<A>.subscript.getter@<X0>( unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v8 = *v3;
  uint64_t v7 = v3[1];
  uint64_t v9 = v3[2];
  unint64_t v10 = *(void *)(v9 + 16);
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRetain();
  if (v10)
  {
    unint64_t v12 = 0LL;
    uint64_t v13 = v9 + 32;
    while (v12 < v10)
    {
      outlined init with copy of AnyRegexOutput.ElementRepresentation(v13, (uint64_t)v23);
      *((void *)&v25 + 1) = v8;
      uint64_t v26 = v7;
      *(_OWORD *)&v20[16] = v24;
      __int128 v21 = v25;
      uint64_t v22 = v7;
      __int128 v17 = v23[0];
      __int128 v18 = v23[1];
      __int128 v19 = v23[2];
      *(_OWORD *)int64_t v20 = v23[3];
      if ((void)v24
        && (*(_OWORD *)&v20[8] == __PAIR128__(a2, a1) || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        uint64_t result = swift_bridgeObjectRelease();
        __int128 v14 = v21;
        *(_OWORD *)(a3 + 64) = *(_OWORD *)&v20[16];
        *(_OWORD *)(a3 + 80) = v14;
        *(void *)(a3 + 96) = v22;
        __int128 v15 = v18;
        *(_OWORD *)a3 = v17;
        *(_OWORD *)(a3 + 16) = v15;
        __int128 v16 = *(_OWORD *)v20;
        *(_OWORD *)(a3 + 32) = v19;
        *(_OWORD *)(a3 + 48) = v16;
        return result;
      }

      ++v12;
      swift_bridgeObjectRetain();
      uint64_t result = outlined destroy of AnyRegexOutput.Element((uint64_t)&v17);
      unint64_t v10 = *(void *)(v9 + 16);
      v13 += 88LL;
      if (v12 == v10) {
        goto LABEL_9;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_9:
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(a3 + 96) = 0LL;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }

  return result;
}

void *Regex<A>.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v7 = type metadata accessor for SyntaxOptions();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  unint64_t v10 = (char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for AST();
  MEMORY[0x1895F8858](v11);
  uint64_t v13 = (char *)v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v15[0] = a1;
  v15[1] = a2;
  static SyntaxOptions.traditional.getter();
  lazy protocol witness table accessor for type String and conformance String();
  parse<A>(_:_:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  if (v3) {
    return (void *)swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>.Program);
  swift_allocObject();
  uint64_t result = specialized Regex.Program.init(ast:)((uint64_t)v13);
  *a3 = result;
  return result;
}

void *Regex.init(ast:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v7 = swift_allocObject();
  uint64_t result = specialized Regex.Program.init(ast:)(a1);
  *a5 = v7;
  return result;
}

uint64_t Regex.init(_:as:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v9 = type metadata accessor for SyntaxOptions();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](v9);
  uint64_t v12 = (char *)v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for AST();
  MEMORY[0x1895F8858](v13);
  __int128 v15 = (char *)v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v26[0] = a1;
  v26[1] = a2;
  static SyntaxOptions.traditional.getter();
  lazy protocol witness table accessor for type String and conformance String();
  parse<A>(_:_:)();
  if (v4)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    return swift_bridgeObjectRelease();
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    swift_bridgeObjectRelease();
    Regex.init(ast:)((uint64_t)v15, a3, v17, v18, &v27);
    uint64_t v19 = v27;
    v26[0] = v27;
    uint64_t v22 = type metadata accessor for Regex(0LL, a3, v20, v21);
    uint64_t result = Regex._verifyType()(v22);
    if ((result & 1) != 0)
    {
      *a4 = v19;
    }

    else
    {
      uint64_t v24 = v23;
      swift_release();
      lazy protocol witness table accessor for type RegexCompilationError and conformance RegexCompilationError();
      swift_allocError();
      *(void *)uint64_t v25 = a3;
      *(void *)(v25 + 8) = v24;
      *(_BYTE *)(v25 + 16) = 0;
      return swift_willThrow();
    }
  }

  return result;
}

uint64_t Regex._verifyType()(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for CaptureList.Capture();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  uint64_t v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for CaptureList();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  uint64_t v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (*(ValueMetadata **)(a1 + 16) == &type metadata for AnyRegexOutput) {
    return 1LL;
  }
  uint64_t v40 = *(void *)(a1 + 16);
  uint64_t v11 = *v1;
  unint64_t v46 = 0LL;
  unint64_t v47 = 0xE000000000000000LL;
  uint64_t v39 = v11;
  unint64_t v41 = *(void *)(v11 + 24);
  static CaptureList.Builder.build(_:)(&v41, (uint64_t)v10);
  uint64_t v12 = CaptureList.captures.getter();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  uint64_t v14 = *(void *)(v12 + 16);
  if (v14)
  {
    unint64_t v15 = 0LL;
    __int128 v16 = (char *)MEMORY[0x18961AFE8];
    while (1)
    {
      if (v15 >= *(void *)(v12 + 16))
      {
        __break(1u);
        return result;
      }

      (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))( v6,  v12 + ((*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
      + *(void *)(v4 + 72) * v15,
        v3);
      uint64_t v17 = CaptureList.Capture.type.getter();
      uint64_t v18 = CaptureList.Capture.optionalDepth.getter();
      if (v18) {
        break;
      }
LABEL_10:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        __int128 v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v16 + 2) + 1LL,  1,  v16);
      }
      unint64_t v23 = *((void *)v16 + 2);
      unint64_t v22 = *((void *)v16 + 3);
      if (v23 >= v22 >> 1) {
        __int128 v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v22 > 1),  v23 + 1,  1,  v16);
      }
      *((void *)v16 + 2) = v23 + 1;
      *(void *)&v16[8 * v23 + 32] = v17;
      uint64_t v24 = CaptureList.Capture.name.getter();
      uint64_t v26 = v25;
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      if (v26)
      {
        v27._uint64_t countAndFlagsBits = v24;
        v27._uint64_t object = v26;
        String.append(_:)(v27);
        swift_bridgeObjectRelease();
      }

      ++v15;
      unint64_t v41 = v46;
      unint64_t v42 = v47;
      uint64_t result = String.UnicodeScalarView.append(_:)();
      unint64_t v46 = v41;
      unint64_t v47 = v42;
      if (v15 == v14) {
        goto LABEL_18;
      }
    }

    uint64_t v19 = v18;
    while (1)
    {
      uint64_t v20 = static TypeConstruction.optionalType(of:)();
      if (__OFSUB__(v19--, 1LL)) {
        break;
      }
      uint64_t v17 = v20;
      if (!v19) {
        goto LABEL_10;
      }
    }

    __break(1u);
LABEL_34:
    swift_bridgeObjectRelease();
  }

  else
  {
    __int128 v16 = (char *)MEMORY[0x18961AFE8];
LABEL_18:
    swift_bridgeObjectRelease();
    if (*((void *)v16 + 2) == 1LL)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      DSLTree.Node.outputDefiningNode.getter(*(void *)(v39 + 24));
      int v29 = (v28 >> 59) & 0x1E | (v28 >> 2) & 1;
      uint64_t v30 = v28 & 0xFFFFFFFFFFFFFFBLL;
      if (v29 == 14) {
        uint64_t v31 = *(void *)(v30 + 16);
      }
      else {
        uint64_t v31 = MEMORY[0x189618C50];
      }
      swift_release();
      return v40 == v31;
    }

    uint64_t v32 = HIBYTE(v47) & 0xF;
    if ((v47 & 0x2000000000000000LL) == 0) {
      uint64_t v32 = v46 & 0xFFFFFFFFFFFFLL;
    }
    unint64_t v41 = v46;
    unint64_t v42 = v47;
    uint64_t v43 = 0LL;
    uint64_t v44 = v32;
    uint64_t v45 = v16;
    swift_bridgeObjectRetain_n();
    Swift::String_optional v34 = String.Iterator.next()();
    uint64_t countAndFlagsBits = v34.value._countAndFlagsBits;
    if (v34.value._object)
    {
      uint64_t object = v34.value._object;
      do
      {
        if (countAndFlagsBits == 32 && object == (void *)0xE100000000000000LL)
        {
          swift_bridgeObjectRelease();
        }

        else
        {
          char v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v36 & 1) == 0) {
            goto LABEL_34;
          }
        }

        Swift::String_optional v37 = String.Iterator.next()();
        uint64_t countAndFlagsBits = v37.value._countAndFlagsBits;
        uint64_t object = v37.value._object;
      }

      while (v37.value._object);
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any.Type]);
  lazy protocol witness table accessor for type [Any.Type] and conformance [A]( &lazy protocol witness table cache variable for type [Any.Type] and conformance [A],  &demangling cache variable for type metadata for [Any.Type],  MEMORY[0x189618458]);
  uint64_t v31 = static TypeConstruction.tupleType<A>(of:labels:)();
  swift_bridgeObjectRelease();
  return v40 == v31;
}

Swift::Bool __swiftcall Regex.contains(captureNamed:)(Swift::String captureNamed)
{
  uint64_t object = captureNamed._object;
  uint64_t countAndFlagsBits = captureNamed._countAndFlagsBits;
  uint64_t v4 = type metadata accessor for CaptureList.Capture();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for CaptureList();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v8);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v22 = *(void *)(*(void *)v1 + 24LL);
  static CaptureList.Builder.build(_:)(&v22, (uint64_t)v11);
  uint64_t v12 = CaptureList.captures.getter();
  Swift::Bool result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  uint64_t v14 = *(void *)(v12 + 16);
  if (v14)
  {
    unint64_t v15 = 0LL;
    while (v15 < *(void *)(v12 + 16))
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))( v7,  v12 + ((*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
      + *(void *)(v5 + 72) * v15,
        v4);
      uint64_t v17 = CaptureList.Capture.name.getter();
      uint64_t v19 = v18;
      Swift::Bool result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      if (v19)
      {
        if (v17 == countAndFlagsBits && v19 == object)
        {
          swift_bridgeObjectRelease();
          Swift::Bool v20 = 1;
          goto LABEL_12;
        }

        char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
        Swift::Bool result = swift_bridgeObjectRelease();
        if ((v16 & 1) != 0)
        {
          Swift::Bool v20 = 1;
          goto LABEL_12;
        }
      }

      if (v14 == ++v15) {
        goto LABEL_10;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_10:
    Swift::Bool v20 = 0;
LABEL_12:
    swift_bridgeObjectRelease();
    return v20;
  }

  return result;
}

uint64_t Regex<A>.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *(void *)(*(void *)a1 + 24LL);
  swift_retain();
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>.Program);
  uint64_t result = swift_allocObject();
  uint64_t v5 = result;
  *(void *)(result + 16) = 0LL;
  if (one-time initialization token for default != -1) {
    uint64_t result = swift_once();
  }
  *(void *)(v5 + 24) = v3;
  *(void *)(v5 + 32) = 0LL;
  *a2 = v5;
  return result;
}

__n128 Regex.Match<A>.init<A>(_:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *(void *)a1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t Regex.init(_:as:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = *(void *)(*(void *)a1 + 24LL);
  swift_retain();
  swift_release();
  type metadata accessor for Regex.Program(0LL, a2, v6, v7);
  uint64_t v13 = (void *)v5;
  uint64_t v8 = Regex.Program.__allocating_init(tree:)((uint64_t *)&v13);
  uint64_t v13 = v8;
  uint64_t v11 = type metadata accessor for Regex(0LL, a2, v9, v10);
  uint64_t result = Regex._verifyType()(v11);
  if ((result & 1) == 0)
  {
    uint64_t result = swift_release();
    uint64_t v8 = 0LL;
  }

  *a3 = v8;
  return result;
}

uint64_t Regex.Program.__allocating_init(ast:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  specialized Regex.Program.init(ast:)(a1);
  return v2;
}

void *Regex.init(_regexString:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = type metadata accessor for SyntaxOptions();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v8);
  uint64_t v11 = &v18[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v12 = type metadata accessor for AST();
  MEMORY[0x1895F8858](v12);
  uint64_t v14 = &v18[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  v19[0] = a1;
  v19[1] = a2;
  static SyntaxOptions.traditional.getter();
  lazy protocol witness table accessor for type String and conformance String();
  parse<A>(_:_:)();
  (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
  swift_bridgeObjectRelease();
  uint64_t result = Regex.init(ast:)((uint64_t)v14, a3, v15, v16, v19);
  *a4 = v19[0];
  return result;
}

void *Regex.init(_regexString:version:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = type metadata accessor for AST();
  MEMORY[0x1895F8858](v8);
  uint64_t v10 = (char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v15[0] = a1;
  v15[1] = a2;
  lazy protocol witness table accessor for type String and conformance String();
  parseWithDelimiters<A>(_:)();
  swift_bridgeObjectRelease();
  uint64_t result = Regex.init(ast:)((uint64_t)v10, a3, v11, v12, v15);
  *a4 = v15[0];
  return result;
}

uint64_t Regex.regex.getter@<X0>(void *a1@<X8>)
{
  *a1 = *v1;
  return swift_retain();
}

void *Regex.init(verbatim:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  uint64_t v9 = v8 | 0x5000000000000000LL;
  type metadata accessor for Regex.Program(0LL, a3, v10, v11);
  uint64_t v13 = v9;
  uint64_t result = Regex.Program.__allocating_init(tree:)(&v13);
  *a4 = result;
  return result;
}

uint64_t Regex.Program.ProgramBox.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  outlined init with take of DSLTree.QuantificationKind( a1,  v2 + direct field offset for Regex.Program.ProgramBox.value,  type metadata accessor for MEProgram);
  return v2;
}

uint64_t Regex.Program.ProgramBox.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t Regex.Program.loweredProgram.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (uint64_t)v1;
  uint64_t v4 = *v1;
  uint64_t v5 = type metadata accessor for MEProgram(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1895F8858](v5);
  uint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v7);
  uint64_t v11 = (char *)&v30 - v10;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MEProgram?);
  uint64_t v13 = MEMORY[0x1895F8858](v12);
  uint64_t v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v13);
  uint64_t v17 = (char *)&v30 - v16;
  loadProgram #1 <A>() in Regex.Program.loweredProgram.getter(v2, (uint64_t)&v30 - v16);
  uint64_t v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  if (v18(v17, 1LL, v5) != 1)
  {
    uint64_t v11 = v17;
    return outlined init with take of DSLTree.QuantificationKind((uint64_t)v11, a1, type metadata accessor for MEProgram);
  }

  uint64_t v30 = v4;
  uint64_t v31 = a1;
  outlined destroy of (range: Range<String.Index>, value: Any?)?( (uint64_t)v17,  &demangling cache variable for type metadata for MEProgram?);
  uint64_t v20 = *(void *)(v2 + 24);
  uint64_t v19 = *(void *)(v2 + 32);
  type metadata accessor for Compiler();
  unint64_t inited = (void *)swift_initStackObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MatchingOptions.Representation>);
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_182D9CC00;
  *(_DWORD *)(v22 + 32) = 81984;
  inited[3] = v22;
  uint64_t v23 = one-time initialization token for default;
  swift_retain();
  if (v23 != -1) {
    swift_once();
  }
  inited[2] = v20;
  inited[4] = v19;
  Compiler.emit()((uint64_t)v11);
  uint64_t v24 = (unint64_t *)(v2 + 16);
  type metadata accessor for Regex.Program.ProgramBox(0LL, *(void *)(v30 + 80), v25, v26);
  outlined init with copy of MEProgram((uint64_t)v11, (uint64_t)v9, type metadata accessor for MEProgram);
  unint64_t v27 = swift_allocObject();
  outlined init with take of DSLTree.QuantificationKind( (uint64_t)v9,  v27 + direct field offset for Regex.Program.ProgramBox.value,  type metadata accessor for MEProgram);
  swift_retain();
  a1 = v31;
  while (!__ldaxr(v24))
  {
    if (!__stlxr(v27, v24))
    {
      swift_release();
      return outlined init with take of DSLTree.QuantificationKind( (uint64_t)v11,  a1,  type metadata accessor for MEProgram);
    }
  }

  __clrex();
  swift_release_n();
  loadProgram #1 <A>() in Regex.Program.loweredProgram.getter(v2, (uint64_t)v15);
  if (v18(v15, 1LL, v5) != 1)
  {
    outlined destroy of MEProgram((uint64_t)v11, type metadata accessor for MEProgram);
    uint64_t v11 = v15;
    return outlined init with take of DSLTree.QuantificationKind((uint64_t)v11, a1, type metadata accessor for MEProgram);
  }

  __break(1u);
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t loadProgram #1 <A>() in Regex.Program.loweredProgram.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = atomic_load((unint64_t *)(a1 + 16));
  if (v3)
  {
    uint64_t v4 = v3 + direct field offset for Regex.Program.ProgramBox.value;
    swift_unknownObjectRetain();
    outlined init with copy of MEProgram(v4, a2, type metadata accessor for MEProgram);
    swift_unknownObjectRelease();
    uint64_t v5 = type metadata accessor for MEProgram(0LL);
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL);
    uint64_t v7 = a2;
    uint64_t v8 = 0LL;
  }

  else
  {
    uint64_t v5 = type metadata accessor for MEProgram(0LL);
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL);
    uint64_t v7 = a2;
    uint64_t v8 = 1LL;
  }

  return v6(v7, v8, 1LL, v5);
}

void *specialized Regex.Program.init(ast:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for AST.Node();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v2[2] = 0LL;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  v2[4] = 0LL;
  AST.root.getter();
  unint64_t v8 = convert #1 () in AST.Node.dslTreeNode.getter((uint64_t)v7);
  uint64_t v9 = type metadata accessor for AST();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))(a1, v9);
  if (((v8 >> 59) & 0x1E | (v8 >> 2) & 1) == 0xC)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }

  else
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree.Node, DSLTree._AST.ASTNode));
    uint64_t v11 = swift_allocBox();
    uint64_t v13 = (char *)v12 + *(int *)(v10 + 48);
    *uint64_t v12 = v8;
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v13, v7, v4);
    unint64_t v8 = v11 | 0x6000000000000000LL;
  }

  v2[3] = v8;
  return v2;
}

void *Regex.Program.__allocating_init(tree:)(uint64_t *a1)
{
  uint64_t v2 = (void *)swift_allocObject();
  uint64_t v3 = *a1;
  v2[2] = 0LL;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  v2[3] = v3;
  v2[4] = 0LL;
  return v2;
}

uint64_t Regex.Program.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t Regex._forceAction(_:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for MEProgram(0LL);
  MEMORY[0x1895F8858](v3);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = (void *)*v1;
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    uint64_t v7 = v6[3];
    uint64_t v8 = v6[4];
    type metadata accessor for Compiler();
    unint64_t inited = (void *)swift_initStackObject();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MatchingOptions.Representation>);
    uint64_t v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_182D9CC00;
    *(_DWORD *)(v10 + 32) = 81984;
    inited[3] = v10;
    uint64_t v11 = one-time initialization token for default;
    swift_retain();
    if (v11 != -1) {
      swift_once();
    }
    inited[2] = v7;
    inited[4] = v8;
    Compiler.emit()((uint64_t)v5);
    outlined destroy of MEProgram((uint64_t)v5, type metadata accessor for MEProgram);
  }

  else
  {
    uint64_t v12 = v6[4];
    if ((*(void *)a1 & ~v12) != 0) {
      v6[4] = v12 | *(void *)a1;
    }
    _OWORD v6[2] = 0LL;
    swift_unknownObjectRelease();
  }

  return 1LL;
}

void *CustomConsumingRegexComponent.regex.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = *(void *)(a1 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  MEMORY[0x1895F8858](a1);
  uint64_t v10 = swift_allocObject();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  *(void *)(v10 + 16) = AssociatedTypeWitness;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))( (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v4,  a1);
  unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a1;
  *(void *)(v13 + 24) = a2;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))( v13 + v12,  (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1);
  *(void *)(v10 + 24) = partial apply for closure #1 in CustomConsumingRegexComponent.regex.getter;
  *(void *)(v10 + 32) = v13;
  type metadata accessor for Regex.Program(0LL, AssociatedTypeWitness, v14, v15);
  uint64_t v18 = v10 | 0x7000000000000000LL;
  uint64_t result = Regex.Program.__allocating_init(tree:)(&v18);
  *a3 = result;
  return result;
}

uint64_t closure #1 in CustomConsumingRegexComponent.regex.getter@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v29 = a5;
  uint64_t v30 = a6;
  uint64_t v27 = a3;
  uint64_t v28 = a4;
  uint64_t v26 = a9;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v15 = type metadata accessor for Optional();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1895F8858](v15);
  uint64_t v18 = (uint64_t *)((char *)&v25 - v17);
  uint64_t v19 = v31;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a8 + 16))( a1,  a2,  v27,  v28,  v29,  a7,  a8);
  if (!v19)
  {
    uint64_t v21 = AssociatedTypeWitness;
    uint64_t v22 = v26;
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 48LL))( v18,  1LL,  TupleTypeMetadata2) == 1)
    {
      uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v16 + 8))(v18, v15);
      *(void *)(v22 + 32) = 0LL;
      *(_OWORD *)uint64_t v22 = 0u;
      *(_OWORD *)(v22 + 16) = 0u;
    }

    else
    {
      uint64_t v23 = (char *)v18 + *(int *)(TupleTypeMetadata2 + 48);
      *(void *)uint64_t v22 = *v18;
      *(void *)(v22 + 32) = v21;
      boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v22 + 8));
      return (*(uint64_t (**)(uint64_t *, char *, uint64_t))(*(void *)(v21 - 8) + 32LL))( boxed_opaque_existential_0,  v23,  v21);
    }
  }

  return result;
}

uint64_t static DSLTree.CustomCharacterClass.generalCategory(_:)@<X0>(uint64_t *a1@<X8>)
{
  Swift::String_optional v34 = a1;
  uint64_t v1 = type metadata accessor for Source.Location();
  MEMORY[0x1895F8858](v1);
  uint64_t v30 = (char *)&v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for AST.Atom.Kind();
  uint64_t v28 = *(void *)(v3 - 8);
  uint64_t v29 = v3;
  MEMORY[0x1895F8858](v3);
  uint64_t v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for AST.Atom();
  uint64_t v32 = *(void *)(v6 - 8);
  uint64_t v33 = v6;
  MEMORY[0x1895F8858](v6);
  uint64_t v31 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Unicode.ExtendedGeneralCategory?);
  MEMORY[0x1895F8858](v8);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for AST.Atom.CharacterProperty.Kind();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1895F8858](v11);
  uint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for AST.Atom.CharacterProperty();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1895F8858](v15);
  uint64_t v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Unicode.GeneralCategory.extendedGeneralCategory.getter((uint64_t)v10);
  uint64_t v19 = type metadata accessor for Unicode.ExtendedGeneralCategory();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48))(v10, 1LL, v19);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v14, v10, v19);
    (*(void (**)(char *, void, uint64_t))(v12 + 104))(v14, *MEMORY[0x18961C650], v11);
    AST.Atom.CharacterProperty.init(_:isInverted:isPOSIX:)();
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v5, v18, v15);
    (*(void (**)(char *, void, uint64_t))(v28 + 104))(v5, *MEMORY[0x18961C770], v29);
    static Source.Location.fake.getter();
    uint64_t v22 = v31;
    AST.Atom.init(_:_:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DSLTree.CustomCharacterClass.Member>);
    uint64_t v24 = (v23 + 32) & ~v23;
    uint64_t v25 = swift_allocObject();
    *(_OWORD *)(v25 + 16) = xmmword_182D9CC00;
    (*(void (**)(uint64_t, char *, uint64_t))(v32 + 32))(v25 + v24, v22, v33);
    type metadata accessor for DSLTree.Atom(0LL);
    swift_storeEnumTagMultiPayload();
    uint64_t result = swift_storeEnumTagMultiPayload();
    uint64_t v26 = v34;
    *Swift::String_optional v34 = v25;
    *((_BYTE *)v26 + 8) = 0;
  }

  return result;
}

uint64_t Unicode.GeneralCategory.extendedGeneralCategory.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Unicode.GeneralCategory();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2, v4);
  int v8 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  if (v8 == *MEMORY[0x18961AAA8])
  {
    uint64_t v9 = (unsigned int *)MEMORY[0x18961CCF8];
  }

  else if (v8 == *MEMORY[0x18961AA90])
  {
    uint64_t v9 = (unsigned int *)MEMORY[0x18961CCE0];
  }

  else if (v8 == *MEMORY[0x18961AAA0])
  {
    uint64_t v9 = (unsigned int *)MEMORY[0x18961CCF0];
  }

  else if (v8 == *MEMORY[0x18961AA68])
  {
    uint64_t v9 = (unsigned int *)MEMORY[0x18961CCB8];
  }

  else if (v8 == *MEMORY[0x18961AA20])
  {
    uint64_t v9 = (unsigned int *)MEMORY[0x18961CC68];
  }

  else if (v8 == *MEMORY[0x18961AA78])
  {
    uint64_t v9 = (unsigned int *)MEMORY[0x18961CCC8];
  }

  else if (v8 == *MEMORY[0x18961AA38])
  {
    uint64_t v9 = (unsigned int *)MEMORY[0x18961CC88];
  }

  else if (v8 == *MEMORY[0x18961AA50])
  {
    uint64_t v9 = (unsigned int *)MEMORY[0x18961CCA0];
  }

  else if (v8 == *MEMORY[0x18961AA48])
  {
    uint64_t v9 = (unsigned int *)MEMORY[0x18961CC98];
  }

  else if (v8 == *MEMORY[0x18961AA40])
  {
    uint64_t v9 = (unsigned int *)MEMORY[0x18961CC90];
  }

  else if (v8 == *MEMORY[0x18961AA28])
  {
    uint64_t v9 = (unsigned int *)MEMORY[0x18961CC70];
  }

  else if (v8 == *MEMORY[0x18961AAD8])
  {
    uint64_t v9 = (unsigned int *)MEMORY[0x18961CD28];
  }

  else if (v8 == *MEMORY[0x18961AA88])
  {
    uint64_t v9 = (unsigned int *)MEMORY[0x18961CCD8];
  }

  else if (v8 == *MEMORY[0x18961AA98])
  {
    uint64_t v9 = (unsigned int *)MEMORY[0x18961CCE8];
  }

  else if (v8 == *MEMORY[0x18961AAB0])
  {
    uint64_t v9 = (unsigned int *)MEMORY[0x18961CD00];
  }

  else if (v8 == *MEMORY[0x18961AAC8])
  {
    uint64_t v9 = (unsigned int *)MEMORY[0x18961CD18];
  }

  else if (v8 == *MEMORY[0x18961AAB8])
  {
    uint64_t v9 = (unsigned int *)MEMORY[0x18961CD08];
  }

  else if (v8 == *MEMORY[0x18961AAC0])
  {
    uint64_t v9 = (unsigned int *)MEMORY[0x18961CD10];
  }

  else if (v8 == *MEMORY[0x18961AA08])
  {
    uint64_t v9 = (unsigned int *)MEMORY[0x18961CC48];
  }

  else if (v8 == *MEMORY[0x18961AA60])
  {
    uint64_t v9 = (unsigned int *)MEMORY[0x18961CCB0];
  }

  else if (v8 == *MEMORY[0x18961AA70])
  {
    uint64_t v9 = (unsigned int *)MEMORY[0x18961CCC0];
  }

  else if (v8 == *MEMORY[0x18961AA30])
  {
    uint64_t v9 = (unsigned int *)MEMORY[0x18961CC78];
  }

  else if (v8 == *MEMORY[0x18961AA80])
  {
    uint64_t v9 = (unsigned int *)MEMORY[0x18961CCD0];
  }

  else if (v8 == *MEMORY[0x18961AA58])
  {
    uint64_t v9 = (unsigned int *)MEMORY[0x18961CCA8];
  }

  else if (v8 == *MEMORY[0x18961AAD0])
  {
    uint64_t v9 = (unsigned int *)MEMORY[0x18961CD20];
  }

  else if (v8 == *MEMORY[0x18961AAF0])
  {
    uint64_t v9 = (unsigned int *)MEMORY[0x18961CD60];
  }

  else if (v8 == *MEMORY[0x18961AAE8])
  {
    uint64_t v9 = (unsigned int *)MEMORY[0x18961CD40];
  }

  else if (v8 == *MEMORY[0x18961AAF8])
  {
    uint64_t v9 = (unsigned int *)MEMORY[0x18961CD78];
  }

  else if (v8 == *MEMORY[0x18961AA10])
  {
    uint64_t v9 = (unsigned int *)MEMORY[0x18961CC50];
  }

  else
  {
    if (v8 != *MEMORY[0x18961AA18])
    {
      uint64_t v14 = type metadata accessor for Unicode.ExtendedGeneralCategory();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))(a1, 1LL, 1LL, v14);
      return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }

    uint64_t v9 = (unsigned int *)MEMORY[0x18961CC58];
  }

  uint64_t v10 = *v9;
  uint64_t v11 = type metadata accessor for Unicode.ExtendedGeneralCategory();
  uint64_t v12 = *(void *)(v11 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 104))(a1, v10, v11);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(a1, 0LL, 1LL, v11);
}

uint64_t DSLTree.CustomCharacterClass.inverted.getter@<X0>(uint64_t a1@<X8>)
{
  char v2 = *(_BYTE *)(v1 + 8);
  *(void *)a1 = *(void *)v1;
  *(_BYTE *)(a1 + 8) = (v2 & 1) == 0;
  return swift_bridgeObjectRetain();
}

_StringProcessing::DSLTree::Atom::Assertion_optional protocol witness for RawRepresentable.init(rawValue:) in conformance DSLTree.Atom.Assertion( Swift::UInt64 *a1)
{
  return DSLTree.Atom.Assertion.init(rawValue:)(*a1);
}

BOOL static DSLTree.Atom.CharacterClass.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void DSLTree.Atom.CharacterClass.hash(into:)()
{
}

Swift::Int DSLTree.Atom.CharacterClass.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void DSLTree.Atom.CharacterClass.inverted.getter()
{
  __asm { BR              X12 }

void sub_182D6BDF0(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void sub_182D6BE5C()
{
}

void DSLTree.Node.hasChildNodes.getter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DSLTree._AST.AbsentFunction(0LL);
  MEMORY[0x1895F8858](v2);
  __asm { BR              X10 }

uint64_t sub_182D6BF1C()
{
  return 1LL;
}

void DSLTree.Node.children.getter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AST.Node();
  MEMORY[0x1895F8858](v2);
  uint64_t v3 = type metadata accessor for DSLTree._AST.AbsentFunction(0LL);
  MEMORY[0x1895F8858](v3);
  __asm { BR              X10 }

uint64_t sub_182D6C05C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DSLTree.Node.appending(_:)(uint64_t a1, unint64_t a2)
{
  if (((a2 >> 59) & 0x1E | (a2 >> 2) & 1) == 1)
  {
    uint64_t v4 = *(char **)((a2 & 0xFFFFFFFFFFFFFFBLL) + 0x10);
    swift_retain();
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v4 + 2) + 1LL,  1,  v4);
    }
    unint64_t v6 = *((void *)v4 + 2);
    unint64_t v5 = *((void *)v4 + 3);
    if (v6 >= v5 >> 1) {
      uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v5 > 1),  v6 + 1,  1,  v4);
    }
    uint64_t v7 = swift_allocObject();
    *((void *)v4 + 2) = v6 + 1;
    *(void *)&v4[8 * v6 + 32] = a1;
    *(void *)(v7 + 16) = v4;
  }

  else
  {
    uint64_t v7 = swift_allocObject();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DSLTree.Node>);
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_182D9CC20;
    *(void *)(v8 + 32) = a2;
    *(void *)(v8 + 40) = a1;
    *(void *)(v7 + 16) = v8;
    swift_retain();
    swift_retain();
  }

  return v7 | 4;
}

uint64_t DSLTree.Node.appendingAlternationCase(_:)(uint64_t a1, unint64_t a2)
{
  if ((a2 >> 59) & 0x1E | (a2 >> 2) & 1)
  {
    uint64_t v4 = swift_allocObject();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DSLTree.Node>);
    uint64_t v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_182D9CC20;
    *(void *)(v5 + 32) = a2;
    *(void *)(v5 + 40) = a1;
    *(void *)(v4 + 16) = v5;
    swift_retain();
    swift_retain();
  }

  else
  {
    unint64_t v6 = *(char **)(a2 + 16);
    swift_retain();
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v6 + 2) + 1LL,  1,  v6);
    }
    unint64_t v8 = *((void *)v6 + 2);
    unint64_t v7 = *((void *)v6 + 3);
    if (v8 >= v7 >> 1) {
      unint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v7 > 1),  v8 + 1,  1,  v6);
    }
    uint64_t v4 = swift_allocObject();
    *((void *)v6 + 2) = v8 + 1;
    *(void *)&v6[8 * v8 + 32] = a1;
    *(void *)(v4 + 16) = v6;
  }

  return v4;
}

uint64_t ReferenceID._raw.getter()
{
  return *(void *)v0;
}

_StringProcessing::ReferenceID __swiftcall ReferenceID.init()()
{
  uint64_t v1 = static ReferenceID.counter;
  if (__OFADD__(static ReferenceID.counter, 1LL))
  {
    __break(1u);
  }

  else
  {
    ++static ReferenceID.counter;
    uint64_t *v0 = v1;
  }

  return result;
}

void ReferenceID.hash(into:)()
{
}

BOOL static ReferenceID.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2;
}

Swift::Int ReferenceID.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void *CaptureTransform.init<A, B>(_:)@<X0>( uint64_t (*a1)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  if ((swift_dynamicCast() & 1) != 0)
  {
    swift_release();
    a2 = swift_allocObject();
    *(void *)(a2 + 16) = a3;
    *(void *)(a2 + 24) = a4;
    *(_OWORD *)(a2 + 32) = v13;
    char v10 = 3;
    uint64_t v11 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Substring) -> (@out B, @error @owned Error);
    a1 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Substring) -> (@out B?, @error @owned Error);
  }

  else
  {
    char v10 = 2;
    uint64_t v11 = partial apply for closure #1 in CaptureTransform.init<A, B>(_:);
  }

  _StringProcessing::ReferenceID result = (void *)swift_allocObject();
  result[2] = a3;
  result[3] = a4;
  result[4] = a1;
  result[5] = a2;
  *(void *)a5 = a3;
  *(void *)(a5 + 8) = a4;
  *(void *)(a5 + 16) = v11;
  *(void *)(a5 + 24) = result;
  *(_BYTE *)(a5 + 32) = v10;
  return result;
}

{
  char v10;
  void *v11;
  void *result;
  __int128 v13;
  type metadata accessor for Optional();
  swift_getFunctionTypeMetadata1();
  swift_getFunctionTypeMetadata1();
  swift_retain();
  if ((swift_dynamicCast() & 1) != 0)
  {
    swift_release();
    a2 = swift_allocObject();
    *(void *)(a2 + 16) = a3;
    *(void *)(a2 + 24) = a4;
    *(_OWORD *)(a2 + 32) = v13;
    char v10 = 1;
    uint64_t v11 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Substring) -> (@out B?, @error @owned Error);
    a1 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Substring) -> (@out B?, @error @owned Error);
  }

  else
  {
    char v10 = 0;
    uint64_t v11 = partial apply for closure #1 in CaptureTransform.init<A, B>(_:);
  }

  _StringProcessing::ReferenceID result = (void *)swift_allocObject();
  result[2] = a3;
  result[3] = a4;
  result[4] = a1;
  result[5] = a2;
  *(void *)a5 = a3;
  *(void *)(a5 + 8) = a4;
  *(void *)(a5 + 16) = v11;
  *(void *)(a5 + 24) = result;
  *(_BYTE *)(a5 + 32) = v10;
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed Substring) -> (@out B, @error @owned Error)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X7>, uint64_t *a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  uint64_t v7 = MEMORY[0x1895F8858](a1);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = v10(v7);
  if (!v3)
  {
    a3[3] = a2;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(a3);
    return (*(uint64_t (**)(uint64_t *, char *, uint64_t))(v6 + 32))(boxed_opaque_existential_0, v9, a2);
  }

  return result;
}

uint64_t closure #1 in CaptureTransform.init<A, B>(_:)@<X0>( uint64_t a1@<X0>, void (*a2)(_BYTE *)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  uint64_t v10 = *(void *)(a3 - 8);
  uint64_t v11 = MEMORY[0x1895F8858](a1);
  uint64_t v13 = &v15[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  outlined init with copy of Any(v11, (uint64_t)v15);
  swift_dynamicCast();
  a5[3] = a4;
  __swift_allocate_boxed_opaque_existential_0(a5);
  a2(v13);
  uint64_t result = (*(uint64_t (**)(_BYTE *, uint64_t))(v10 + 8))(v13, a3);
  if (v5) {
    return __swift_deallocate_boxed_opaque_existential_0((uint64_t)a5);
  }
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed Substring) -> (@out B?, @error @owned Error)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t)@<X4>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  uint64_t v22 = a7;
  uint64_t v14 = type metadata accessor for Optional();
  MEMORY[0x1895F8858](v14);
  uint64_t v16 = (char *)&v21 - v15;
  uint64_t result = a5(a1, a2, a3, a4);
  if (!v7)
  {
    uint64_t v18 = v22;
    uint64_t v19 = *(void *)(a6 - 8);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48))(v16, 1LL, a6);
    if ((_DWORD)result == 1)
    {
      *(_OWORD *)uint64_t v18 = 0u;
      *(_OWORD *)(v18 + 16) = 0u;
    }

    else
    {
      *(void *)(v18 + 24) = a6;
      boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)v18);
      return (*(uint64_t (**)(uint64_t *, char *, uint64_t))(v19 + 32))(boxed_opaque_existential_0, v16, a6);
    }
  }

  return result;
}

uint64_t closure #1 in CaptureTransform.init<A, B>(_:)@<X0>( uint64_t a1@<X0>, void (*a2)(char *)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v20 = a5;
  uint64_t v21 = a2;
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1895F8858](v11);
  uint64_t v14 = (char *)&v20 - v13;
  outlined init with copy of Any(a1, (uint64_t)v22);
  swift_dynamicCast();
  uint64_t v15 = v23;
  v21(v10);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, a3);
  if (!v15)
  {
    uint64_t v17 = v20;
    uint64_t v18 = *(void *)(a4 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v14, 1LL, a4) == 1)
    {
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
      *(_OWORD *)uint64_t v17 = 0u;
      *(_OWORD *)(v17 + 16) = 0u;
    }

    else
    {
      *(void *)(v17 + 24) = a4;
      boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)v17);
      return (*(uint64_t (**)(uint64_t *, char *, uint64_t))(v18 + 32))(boxed_opaque_existential_0, v14, a4);
    }
  }

  return result;
}

void protocol witness for Hashable.hashValue.getter in conformance CaptureTransform()
{
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance CaptureTransform()
{
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance CaptureTransform()
{
  return specialized CaptureTransform.description.getter();
}

void CaptureList.Builder.addCaptures(of:optionalNesting:visibleInTypedOutput:)( uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v21 = a2;
  int v20 = a3;
  uint64_t v4 = type metadata accessor for AST.AbsentFunction.Kind();
  v19[9] = *(void *)(v4 - 8);
  v19[10] = v4;
  MEMORY[0x1895F8858](v4);
  v19[11] = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DSLTree._AST.AbsentFunction(0LL);
  MEMORY[0x1895F8858](v6);
  v19[8] = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DSLTree._AST.QuantificationAmount(0LL);
  MEMORY[0x1895F8858](v8);
  v19[7] = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for AST.Node();
  v19[4] = *(void *)(v10 - 8);
  v19[5] = v10;
  MEMORY[0x1895F8858](v10);
  v19[3] = (char *)v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for AST.Conditional.Condition.Kind();
  MEMORY[0x1895F8858](v12);
  v19[6] = (char *)v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for DSLTree._AST.ConditionKind(0LL);
  MEMORY[0x1895F8858](v14);
  uint64_t v15 = type metadata accessor for Source.Location();
  v19[1] = *(void *)(v15 - 8);
  uint64_t v19[2] = v15;
  MEMORY[0x1895F8858](v15);
  uint64_t v16 = type metadata accessor for CaptureList.Capture();
  MEMORY[0x1895F8858](v16);
  uint64_t v17 = type metadata accessor for CaptureList.Builder.OptionalNesting();
  v19[12] = *(void *)(v17 - 8);
  _OWORD v19[13] = v17;
  uint64_t v18 = MEMORY[0x1895F8858](v17);
  MEMORY[0x1895F8858](v18);
  __asm { BR              X10 }

uint64_t sub_182D6D03C()
{
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    unint64_t v5 = 0LL;
    do
    {
      if (v5 >= *(void *)(v3 + 16))
      {
        __break(1u);
        JUMPOUT(0x182D6D6D0LL);
      }

      unint64_t v6 = v5 + 1;
      uint64_t v7 = *(void *)(v3 + 32 + 8 * v5);
      swift_retain();
      CaptureList.Builder.OptionalNesting.addingOptional.getter();
      CaptureList.Builder.addCaptures(of:optionalNesting:visibleInTypedOutput:)(v7, v1, *(_DWORD *)(v2 - 140) & 1);
      swift_release();
      uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)(v2 - 160) + 8LL))(v1, *(void *)(v2 - 152));
      unint64_t v5 = v6;
    }

    while (v4 != v6);
  }

  return result;
}

uint64_t static CaptureList.Builder.build(_:)@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v21 = a2;
  uint64_t v3 = type metadata accessor for CaptureList.Builder.OptionalNesting();
  uint64_t v19 = *(void *)(v3 - 8);
  uint64_t v20 = v3;
  MEMORY[0x1895F8858](v3);
  unint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Source.Location();
  MEMORY[0x1895F8858](v6);
  uint64_t v7 = type metadata accessor for CaptureList.Capture();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for CaptureList.Builder();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1895F8858](v11);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v15 = *a1;
  CaptureList.Builder.init()();
  DSLTree.Node.outputDefiningNode.getter(v15);
  swift_release();
  static Source.Location.fake.getter();
  CaptureList.Capture.init(name:type:optionalDepth:visibleInTypedOutput:_:)();
  uint64_t v16 = (void (*)(_BYTE *, void))CaptureList.Builder.captures.modify();
  CaptureList.append(_:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v16(v22, 0LL);
  CaptureList.Builder.OptionalNesting.init(canNest:)();
  CaptureList.Builder.addCaptures(of:optionalNesting:visibleInTypedOutput:)(v15, (uint64_t)v5, 1);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v5, v20);
  CaptureList.Builder.captures.getter();
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

void DSLTree.Node.outputDefiningNode.getter(unint64_t a1)
{
  if (((a1 >> 59) & 0x1E | (a1 >> 2) & 1) - 3 > 1)
  {
    swift_retain();
  }

  else
  {
    DSLTree.Node.children.getter(a1);
    if (*(void *)(v1 + 16))
    {
      uint64_t v2 = *(void *)(v1 + 32);
      swift_retain();
      swift_bridgeObjectRelease();
      DSLTree.Node.outputDefiningNode.getter(v2);
      swift_release();
    }

    else
    {
      __break(1u);
    }
  }

void DSLTree.Node._canOnlyMatchAtStartImpl(_:)(uint64_t a1, uint64_t a2)
{
  v16[10] = a1;
  uint64_t v3 = type metadata accessor for AST.Quantification.Amount();
  v16[3] = *(void *)(v3 - 8);
  v16[4] = v3;
  MEMORY[0x1895F8858](v3);
  v16[5] = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for AST.Atom.Number();
  v16[7] = *(void *)(v5 - 8);
  v16[8] = v5;
  MEMORY[0x1895F8858](v5);
  v16[6] = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DSLTree._AST.QuantificationAmount(0LL);
  MEMORY[0x1895F8858](v7);
  v16[9] = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for AST.Group.Kind();
  MEMORY[0x1895F8858](v9);
  uint64_t v10 = type metadata accessor for AST.MatchingOptionSequence();
  v16[1] = *(void *)(v10 - 8);
  v16[2] = v10;
  MEMORY[0x1895F8858](v10);
  v16[0] = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for DSLTree._AST.GroupKind(0LL);
  MEMORY[0x1895F8858](v12);
  uint64_t v13 = type metadata accessor for DSLTree._AST.MatchingOptionSequence(0LL);
  MEMORY[0x1895F8858](v13);
  uint64_t v14 = type metadata accessor for DSLTree.Atom(0LL);
  uint64_t v15 = MEMORY[0x1895F8858](v14);
  MEMORY[0x1895F8858](v15);
  __asm { BR              X10 }

uint64_t sub_182D6DC34()
{
  return 0LL;
}

void sub_182D6DC5C()
{
  uint64_t v1 = *(void *)swift_projectBox();
  swift_retain();
  DSLTree.Node._canOnlyMatchAtStartImpl(_:)(*(void *)(v0 - 96), v1);
  swift_release();
  JUMPOUT(0x182D6DC3CLL);
}

uint64_t sub_182D6DCAC()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree._AST.ConditionKind, DSLTree.Node, DSLTree.Node));
  uint64_t v2 = swift_projectBox();
  uint64_t v3 = *(void *)(v2 + *(int *)(v1 + 48));
  uint64_t v4 = *(void *)(v2 + *(int *)(v1 + 64));
  uint64_t v5 = *(void *)(v0 - 96);
  DSLTree.Node._canOnlyMatchAtStartImpl(_:)(v5, v3);
  if ((v6 & 1) != 0)
  {
    DSLTree.Node._canOnlyMatchAtStartImpl(_:)(v5, v4);
    JUMPOUT(0x182D6DC38LL);
  }

  return sub_182D6DC34();
}

void sub_182D6DD14()
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree._AST.GroupKind, DSLTree.Node));
  uint64_t v6 = swift_projectBox();
  uint64_t v7 = *(char **)(v6 + *(int *)(v5 + 48));
  outlined init with copy of MEProgram(v6, v0, type metadata accessor for DSLTree._AST.GroupKind);
  uint64_t v8 = *(char ***)(v4 - 96);
  uint64_t v9 = *v8;
  uint64_t v10 = *((void *)*v8 + 2);
  if (!v10)
  {
    __break(1u);
    JUMPOUT(0x182D6E300LL);
  }

  int v11 = *(_DWORD *)&v9[4 * v10 + 28];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v10 + 1,  1,  v9);
  }
  unint64_t v13 = *((void *)v9 + 2);
  unint64_t v12 = *((void *)v9 + 3);
  if (v13 >= v12 >> 1) {
    uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v12 > 1),  v13 + 1,  1,  v9);
  }
  *((void *)v9 + 2) = v13 + 1;
  *(_DWORD *)&v9[4 * v13 + 32] = v11;
  uint64_t v14 = *(void *)(v4 - 96);
  *(void *)uint64_t v14 = v9;
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v1 + 32))(v3, v0, v2);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v1 + 88))(v3, v2) != *MEMORY[0x18961C8B0])
  {
    (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v3, v2);
    goto LABEL_12;
  }

  (*(void (**)(uint64_t, uint64_t))(v1 + 96))(v3, v2);
  uint64_t v1 = *(void *)(v4 - 176);
  unint64_t v13 = *(void *)(v4 - 168);
  uint64_t v15 = *(void *)(v4 - 160);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))(v1, v3, v15);
  unint64_t v0 = *((void *)v9 + 2);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)uint64_t v14 = v9;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    goto LABEL_20;
  }
  if (v0)
  {
    while (v0 <= *((void *)v9 + 2))
    {
      v9 += 4 * v0 + 28;
      MatchingOptions.Representation.apply(_:)(v1);
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v1, v15);
LABEL_12:
      DSLTree.Node._canOnlyMatchAtStartImpl(_:)(v14, (uint64_t)v7);
      uint64_t v7 = *(char **)v14;
      if (!*(void *)(*(void *)v14 + 16LL))
      {
        __break(1u);
        JUMPOUT(0x182D6E384LL);
      }

      uint64_t v15 = v17;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
        uint64_t v18 = *((void *)v7 + 2);
        if (v18) {
          goto LABEL_15;
        }
      }

      else
      {
        uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v7);
        uint64_t v18 = *((void *)v7 + 2);
        if (v18)
        {
LABEL_15:
          *((void *)v7 + 2) = v18 - 1;
          *(void *)uint64_t v14 = v7;
          JUMPOUT(0x182D6DC38LL);
        }
      }

      __break(1u);
LABEL_20:
      uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v9);
      *(void *)uint64_t v14 = v9;
      if (!v0) {
        goto LABEL_21;
      }
    }
  }

  else
  {
LABEL_21:
    __break(1u);
  }

  __break(1u);
  JUMPOUT(0x182D6E3D0LL);
}

void DSLTree._Tree.children.getter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AST.Node();
  MEMORY[0x1895F8858](v2);
  uint64_t v3 = type metadata accessor for DSLTree._AST.AbsentFunction(0LL);
  MEMORY[0x1895F8858](v3);
  __asm { BR              X10 }

uint64_t sub_182D6E4F4()
{
  uint64_t v3 = *(void *)(v1 + 16);
  int64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    *(void *)(v2 - 88) = v0;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0LL, v4, 0);
    unint64_t v5 = 0LL;
    uint64_t v0 = *(void *)(v2 - 88);
    do
    {
      if (v5 >= *(void *)(v3 + 16))
      {
        __break(1u);
        JUMPOUT(0x182D6EA5CLL);
      }

      uint64_t v6 = *(void *)(v3 + 32 + 8 * v5);
      *(void *)(v2 - 88) = v0;
      unint64_t v8 = *(void *)(v0 + 16);
      unint64_t v7 = *(void *)(v0 + 24);
      swift_retain();
      if (v8 >= v7 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v7 > 1),  v8 + 1,  1);
        uint64_t v0 = *(void *)(v2 - 88);
      }

      ++v5;
      *(void *)(v0 + 16) = v8 + 1;
      *(void *)(v0 + 8 * v8 + 32) = v6;
    }

    while (v4 != v5);
  }

  return v0;
}

void protocol witness for _TreeNode.children.getter in conformance DSLTree._Tree()
{
}

uint64_t static DSLTree._AST.GroupKind.atomicNonCapturing.getter@<X0>(uint64_t a1@<X8>)
{
  return static DSLTree._AST.GroupKind.atomicNonCapturing.getter( MEMORY[0x18961C890],  (uint64_t (*)(void))MEMORY[0x18961C8D8],  a1);
}

uint64_t static DSLTree._AST.GroupKind.lookahead.getter@<X0>(uint64_t a1@<X8>)
{
  return static DSLTree._AST.GroupKind.atomicNonCapturing.getter( MEMORY[0x18961C8C8],  (uint64_t (*)(void))MEMORY[0x18961C8D8],  a1);
}

uint64_t static DSLTree._AST.GroupKind.negativeLookahead.getter@<X0>(uint64_t a1@<X8>)
{
  return static DSLTree._AST.GroupKind.atomicNonCapturing.getter( MEMORY[0x18961C888],  (uint64_t (*)(void))MEMORY[0x18961C8D8],  a1);
}

uint64_t static DSLTree._AST.QuantificationKind.eager.getter@<X0>(uint64_t a1@<X8>)
{
  return static DSLTree._AST.GroupKind.atomicNonCapturing.getter( MEMORY[0x18961C388],  (uint64_t (*)(void))MEMORY[0x18961C398],  a1);
}

uint64_t static DSLTree._AST.QuantificationKind.reluctant.getter@<X0>(uint64_t a1@<X8>)
{
  return static DSLTree._AST.GroupKind.atomicNonCapturing.getter( MEMORY[0x18961C390],  (uint64_t (*)(void))MEMORY[0x18961C398],  a1);
}

uint64_t static DSLTree._AST.QuantificationKind.possessive.getter@<X0>(uint64_t a1@<X8>)
{
  return static DSLTree._AST.GroupKind.atomicNonCapturing.getter( MEMORY[0x18961C380],  (uint64_t (*)(void))MEMORY[0x18961C398],  a1);
}

uint64_t static DSLTree._AST.QuantificationAmount.zeroOrMore.getter@<X0>(uint64_t a1@<X8>)
{
  return static DSLTree._AST.GroupKind.atomicNonCapturing.getter( MEMORY[0x18961C3C8],  (uint64_t (*)(void))MEMORY[0x18961C408],  a1);
}

uint64_t static DSLTree._AST.QuantificationAmount.oneOrMore.getter@<X0>(uint64_t a1@<X8>)
{
  return static DSLTree._AST.GroupKind.atomicNonCapturing.getter( MEMORY[0x18961C3F8],  (uint64_t (*)(void))MEMORY[0x18961C408],  a1);
}

uint64_t static DSLTree._AST.QuantificationAmount.zeroOrOne.getter@<X0>(uint64_t a1@<X8>)
{
  return static DSLTree._AST.GroupKind.atomicNonCapturing.getter( MEMORY[0x18961C400],  (uint64_t (*)(void))MEMORY[0x18961C408],  a1);
}

uint64_t static DSLTree._AST.GroupKind.atomicNonCapturing.getter@<X0>( unsigned int *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a2(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 104LL))(a3, v4, v5);
}

uint64_t static DSLTree._AST.QuantificationAmount.exactly(_:)@<X0>(uint64_t a1@<X8>)
{
  return static DSLTree._AST.QuantificationAmount.exactly(_:)(MEMORY[0x18961C3E8], a1);
}

uint64_t static DSLTree._AST.QuantificationAmount.nOrMore(_:)@<X0>(uint64_t a1@<X8>)
{
  return static DSLTree._AST.QuantificationAmount.exactly(_:)(MEMORY[0x18961C3F0], a1);
}

uint64_t static DSLTree._AST.QuantificationAmount.upToN(_:)@<X0>(uint64_t a1@<X8>)
{
  return static DSLTree._AST.QuantificationAmount.exactly(_:)(MEMORY[0x18961C3D8], a1);
}

uint64_t static DSLTree._AST.QuantificationAmount.exactly(_:)@<X0>(unsigned int *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Source.Location();
  MEMORY[0x1895F8858](v4);
  static Source.Location.fake.getter();
  AST.Atom.Number.init(_:at:)();
  uint64_t v5 = *a1;
  uint64_t v6 = type metadata accessor for AST.Quantification.Amount();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 104LL))(a2, v5, v6);
}

uint64_t static DSLTree._AST.QuantificationAmount.range(_:_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Source.Location();
  MEMORY[0x1895F8858](v2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AST.Atom.Number, AST.Atom.Number));
  static Source.Location.fake.getter();
  AST.Atom.Number.init(_:at:)();
  static Source.Location.fake.getter();
  AST.Atom.Number.init(_:at:)();
  uint64_t v3 = *MEMORY[0x18961C3D0];
  uint64_t v4 = type metadata accessor for AST.Quantification.Amount();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 104LL))(a1, v3, v4);
}

uint64_t RegexRepetitionBehavior.dslTreeKind.getter@<X0>(uint64_t a1@<X8>)
{
  if (*v1)
  {
    if (*v1 == 1) {
      uint64_t v3 = (unsigned int *)MEMORY[0x18961C390];
    }
    else {
      uint64_t v3 = (unsigned int *)MEMORY[0x18961C380];
    }
  }

  else
  {
    uint64_t v3 = (unsigned int *)MEMORY[0x18961C388];
  }

  uint64_t v4 = *v3;
  uint64_t v5 = type metadata accessor for AST.Quantification.Kind();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 104LL))(a1, v4, v5);
}

uint64_t Regex.Match.range.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t Regex.Match.output.getter(uint64_t a1)
{
  uint64_t v2 = v1[1];
  uint64_t v3 = v1[2];
  if (*(ValueMetadata **)(a1 + 16) == &type metadata for AnyRegexOutput)
  {
    *(void *)&__int128 v6 = *v1;
    *((void *)&v6 + 1) = v2;
    uint64_t v7 = v3;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    specialized Sequence<>.existentialOutput(from:)(*v1, v2, *v1, v2, v3, (uint64_t)&v6);
    outlined init with take of Any(&v6, &v5);
  }

  return swift_dynamicCast();
}

uint64_t Regex.Match.subscript.getter@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = a2;
  uint64_t v32 = *a1;
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](a1);
  int v35 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *v3;
  uint64_t v11 = v3[1];
  uint64_t v13 = v3[2];
  uint64_t v12 = v3[3];
  uint64_t v33 = v3[4];
  uint64_t v34 = v12;
  int64_t v14 = *(void *)(v13 + 16);
  uint64_t v37 = v10;
  uint64_t v38 = v13;
  if (v14)
  {
    uint64_t v27 = v4;
    uint64_t v28 = v8;
    uint64_t v29 = a1;
    uint64_t v30 = v7;
    uint64_t v31 = a3;
    uint64_t v49 = MEMORY[0x18961AFE8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    int64_t v36 = v14;
    uint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v14,  0);
    unint64_t v16 = 0LL;
    uint64_t v17 = v13 + 32;
    while (1)
    {
      if (v16 >= *(void *)(v38 + 16))
      {
        __break(1u);
LABEL_25:
        __break(1u);
        goto LABEL_26;
      }

      outlined init with copy of AnyRegexOutput.ElementRepresentation(v17, (uint64_t)&v45);
      uint64_t v47 = v37;
      uint64_t v48 = v11;
      outlined init with copy of (range: Range<String.Index>, value: Any?)?( (uint64_t)v46,  (uint64_t)v43,  &demangling cache variable for type metadata for (range: Range<String.Index>, value: Any?)?);
      if (v44[3] == 1LL) {
        break;
      }
      outlined init with copy of Any?((uint64_t)v44, (uint64_t)&v41);
      if (!v42)
      {
        swift_bridgeObjectRetain();
        outlined destroy of Any?((uint64_t)v44);
        goto LABEL_9;
      }

      outlined init with take of Any(&v41, &v39);
      __swift_project_boxed_opaque_existential_0(&v39, v40);
      uint64_t DynamicType = swift_getDynamicType();
      swift_bridgeObjectRetain();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)&v39);
      outlined destroy of Any?((uint64_t)v44);
LABEL_10:
      outlined init with copy of AnyRegexOutput.ElementRepresentation((uint64_t)&v45, (uint64_t)v43);
      outlined destroy of AnyRegexOutput.Element((uint64_t)&v45);
      outlined destroy of AnyRegexOutput.ElementRepresentation((uint64_t)v43);
      if (!DynamicType) {
        uint64_t DynamicType = static TypeConstruction.optionalType<A>(of:depth:)();
      }
      uint64_t v19 = v49;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v19 + 16) + 1LL,  1);
        uint64_t v19 = v49;
      }

      unint64_t v21 = *(void *)(v19 + 16);
      unint64_t v20 = *(void *)(v19 + 24);
      if (v21 >= v20 >> 1)
      {
        uint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v20 > 1),  v21 + 1,  1);
        uint64_t v19 = v49;
      }

      ++v16;
      *(void *)(v19 + 16) = v21 + 1;
      *(void *)(v19 + 8 * v21 + 32) = DynamicType;
      v17 += 88LL;
      if (v36 == v16)
      {
        uint64_t v7 = v30;
        uint64_t v8 = v28;
        uint64_t v4 = v27;
        goto LABEL_19;
      }
    }

    swift_bridgeObjectRetain();
    outlined destroy of (range: Range<String.Index>, value: Any?)?( (uint64_t)v43,  &demangling cache variable for type metadata for (range: Range<String.Index>, value: Any?)?);
LABEL_9:
    uint64_t DynamicType = 0LL;
    goto LABEL_10;
  }

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v19 = MEMORY[0x18961AFE8];
LABEL_19:
  uint64_t v45 = v19;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any.Type]);
  lazy protocol witness table accessor for type [Any.Type] and conformance [A]( &lazy protocol witness table cache variable for type [Any.Type] and conformance [A],  &demangling cache variable for type metadata for [Any.Type],  MEMORY[0x189618488]);
  unint64_t v22 = static MemoryLayout.tupleElementIndex<A>(of:elementTypes:)();
  char v24 = v23;
  uint64_t result = swift_bridgeObjectRelease();
  if ((v24 & 1) != 0)
  {
    uint64_t v25 = v38;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v45 = v37;
    v46[0] = v11;
    uint64_t v26 = v35;
    v46[1] = v25;
    v46[2] = v34;
    v46[3] = v33;
    Regex.Match.output.getter(v4);
    swift_getAtKeyPath();
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v26, v7);
  }

  else
  {
    if ((v22 & 0x8000000000000000LL) != 0) {
      goto LABEL_25;
    }
    if (v22 >= *(void *)(v38 + 16))
    {
LABEL_26:
      __break(1u);
    }

    else
    {
      outlined init with copy of AnyRegexOutput.ElementRepresentation(v38 + 88 * v22 + 32, (uint64_t)&v45);
      swift_bridgeObjectRelease();
      uint64_t v47 = v37;
      uint64_t v48 = v11;
      constructExistentialOutputComponent(from:component:optionalCount:)((uint64_t)v46, v45, v43);
      outlined destroy of AnyRegexOutput.Element((uint64_t)&v45);
      swift_getCanonicalSpecializedMetadata();
      return swift_dynamicCast();
    }
  }

  return result;
}

uint64_t Regex.Match.subscript.getter(uint64_t a1, uint64_t a2)
{
  return Regex.Match.output.getter(a2);
}

uint64_t Regex.Match.subscript.getter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v5 = v1[2];
  unint64_t v6 = *(void *)(v5 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v6)
  {
    unint64_t v7 = 0LL;
    uint64_t v8 = v5 + 32;
    while (v7 < v6)
    {
      outlined init with copy of AnyRegexOutput.ElementRepresentation(v8, (uint64_t)v18);
      *((void *)&v19 + 1) = v4;
      uint64_t v20 = v3;
      __int128 v15 = v18[4];
      __int128 v16 = v19;
      uint64_t v17 = v3;
      __int128 v11 = v18[0];
      __int128 v12 = v18[1];
      __int128 v13 = v18[2];
      __int128 v14 = v18[3];
      if ((v19 & 1) == 0 && *((void *)&v15 + 1) == v2)
      {
        swift_bridgeObjectRelease();
        v21[4] = v15;
        v21[5] = v16;
        uint64_t v22 = v17;
        v21[0] = v11;
        v21[1] = v12;
        void v21[2] = v13;
        v21[3] = v14;
        uint64_t v9 = v11;
        swift_bridgeObjectRetain();
        constructExistentialOutputComponent(from:component:optionalCount:)((uint64_t)v21 + 8, v9, (uint64_t *)v18);
        swift_bridgeObjectRelease();
        outlined destroy of AnyRegexOutput.Element((uint64_t)v21);
        return swift_dynamicCast();
      }

      ++v7;
      swift_bridgeObjectRetain();
      outlined destroy of AnyRegexOutput.Element((uint64_t)&v11);
      unint64_t v6 = *(void *)(v5 + 16);
      v8 += 88LL;
      if (v7 == v6) {
        goto LABEL_9;
      }
    }

    __break(1u);
  }

uint64_t Regex.wholeMatch(in:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return Regex.wholeMatch(in:)(a1, a2, 0, a3);
}

uint64_t Regex._match(_:in:mode:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  char v11 = a5 & 1;
  uint64_t v12 = type metadata accessor for Executor(0LL);
  MEMORY[0x1895F8858](v12);
  __int128 v14 = (char *)&v16 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_retain();
  Regex.Program.loweredProgram.getter((uint64_t)v14);
  swift_release();
  Executor.match<A>(_:in:_:)(a1, a2, a3, a4, v11, a6);
  return outlined destroy of MEProgram((uint64_t)v14, type metadata accessor for Executor);
}

uint64_t Regex.prefixMatch(in:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return Regex.wholeMatch(in:)(a1, a2, 1, a3);
}

uint64_t Regex.wholeMatch(in:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, char a3@<W3>, uint64_t a4@<X8>)
{
  uint64_t v4 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v4 = a1;
  }
  uint64_t v5 = 7LL;
  if (((a2 >> 60) & ((a1 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v5 = 11LL;
  }
  return Regex._match(_:in:mode:)(a1, a2, 0xFuLL, v5 | (v4 << 16), a3, a4);
}

uint64_t Regex.firstMatch(in:)@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v3 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v3 = a1;
  }
  uint64_t v4 = 7LL;
  if (((a2 >> 60) & ((a1 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v4 = 11LL;
  }
  return Regex._firstMatch(_:in:)(a1, a2, 0xFuLL, v4 | (v3 << 16), a3);
}

uint64_t Regex._firstMatch(_:in:)@<X0>( unint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v20 = a5;
  uint64_t v11 = type metadata accessor for MEProgram(0LL);
  MEMORY[0x1895F8858](v11);
  uint64_t v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = *v5;
  swift_retain();
  Regex.Program.loweredProgram.getter((uint64_t)v13);
  swift_release();
  LODWORD(v11) = v13[*(int *)(v11 + 68)];
  outlined destroy of MEProgram((uint64_t)v13, type metadata accessor for MEProgram);
  if ((_DWORD)v11 == 1)
  {
    uint64_t v23 = v14;
    uint64_t result = Regex._match(_:in:mode:)(a1, a2, a3, a4, 1, (uint64_t)v21);
    if (v6) {
      return result;
    }
    goto LABEL_3;
  }

  uint64_t v23 = v14;
  uint64_t result = Regex._firstMatch(_:subjectBounds:searchBounds:)(a1, a2, a3, a4, a3, a4, (uint64_t)v21);
  if (!v6)
  {
LABEL_3:
    __int128 v16 = v21[1];
    uint64_t v17 = v22;
    uint64_t v18 = v20;
    *uint64_t v20 = v21[0];
    v18[1] = v16;
    *((void *)v18 + 4) = v17;
  }

  return result;
}

unint64_t Regex.wholeMatch(in:)@<X0>( unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return Regex.prefixMatch(in:)(a1, a2, a3, a4, 0, a5);
}

unint64_t Regex.prefixMatch(in:)@<X0>( unint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W5>, uint64_t a6@<X8>)
{
  if (a2 >> 14 >= result >> 14) {
    return Regex._match(_:in:mode:)(a3, a4, result, a2, a5, a6);
  }
  __break(1u);
  return result;
}

uint64_t BidirectionalCollection<>.wholeMatch<A>(of:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return BidirectionalCollection<>.wholeMatch<A>(of:)( a1,  a2,  a3,  a4,  a5,  (uint64_t)implicit closure #1 in BidirectionalCollection<>.contains<A>(_:),  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))Regex.wholeMatch(in:));
}

uint64_t BidirectionalCollection<>.prefixMatch<A>(of:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return BidirectionalCollection<>.wholeMatch<A>(of:)( a1,  a2,  a3,  a4,  a5,  (uint64_t)implicit closure #1 in BidirectionalCollection<>.contains<A>(_:),  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))Regex.prefixMatch(in:));
}

uint64_t BidirectionalCollection<>.wholeMatch<A>(of:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a5 + 16))(&v17, a3, a5);
  Collection.subscript.getter();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = type metadata accessor for Regex(0LL, AssociatedTypeWitness, v9, v10);
  a7(v13, v14, v15, v16, v11);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t Regex.ignoresCase(_:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return Regex.ignoresCase(_:)(a1, a2, MEMORY[0x18961C2E8], a3);
}

void *RegexComponent.wrapInOption(_:addingIf:)@<X0>( uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v31 = a3;
  int v30 = a2;
  uint64_t v29 = a1;
  uint64_t v32 = a5;
  uint64_t v6 = type metadata accessor for Source.Location();
  MEMORY[0x1895F8858](v6);
  uint64_t v7 = type metadata accessor for AST.MatchingOption.Kind();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  uint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for AST.MatchingOptionSequence();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1895F8858](v11);
  uint64_t v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AST.MatchingOption>);
  type metadata accessor for AST.MatchingOption();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_182D9CC00;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v29, v7);
  static Source.Location.fake.getter();
  AST.MatchingOption.init(_:location:)();
  if ((v30 & 1) != 0) {
    AST.MatchingOptionSequence.init(adding:)();
  }
  else {
    AST.MatchingOptionSequence.init(removing:)();
  }
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree._AST.GroupKind, DSLTree.Node));
  uint64_t v16 = swift_allocBox();
  uint64_t v18 = v17;
  uint64_t v19 = *(int *)(v15 + 48);
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v17, v14, v11);
  uint64_t v20 = *MEMORY[0x18961C8B0];
  uint64_t v21 = type metadata accessor for AST.Group.Kind();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 104LL))(v18, v20, v21);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a4 + 16))(&v33, v31, a4);
  uint64_t v22 = v33;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v24 = *(void *)(v22 + 24);
  swift_retain();
  swift_release();
  *(void *)(v18 + v19) = v24;
  type metadata accessor for Regex.Program(0LL, AssociatedTypeWitness, v25, v26);
  uint64_t v34 = v16 | 0x1000000000000004LL;
  uint64_t result = Regex.Program.__allocating_init(tree:)(&v34);
  *uint64_t v32 = result;
  return result;
}

uint64_t Regex.asciiOnlyWordCharacters(_:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return Regex.ignoresCase(_:)(a1, a2, MEMORY[0x18961C2C0], a3);
}

uint64_t Regex.asciiOnlyDigits(_:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return Regex.ignoresCase(_:)(a1, a2, MEMORY[0x18961C2D8], a3);
}

uint64_t Regex.asciiOnlyWhitespace(_:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return Regex.ignoresCase(_:)(a1, a2, MEMORY[0x18961C2E0], a3);
}

uint64_t Regex.asciiOnlyCharacterClasses(_:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return Regex.ignoresCase(_:)(a1, a2, MEMORY[0x18961C308], a3);
}

uint64_t Regex.wordBoundaryKind(_:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v7 = type metadata accessor for AST.MatchingOption.Kind();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  uint64_t v10 = (char *)v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  LODWORD(a1) = *a1;
  v13[1] = *v3;
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, *MEMORY[0x18961C320], v7);
  uint64_t v11 = MEMORY[0x186E17958](&protocol conformance descriptor for Regex<A>, a2);
  RegexComponent.wrapInOption(_:addingIf:)((uint64_t)v10, (int)a1, a2, v11, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t Regex.dotMatchesNewlines(_:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return Regex.ignoresCase(_:)(a1, a2, MEMORY[0x18961C2B8], a3);
}

uint64_t Regex.anchorsMatchLineEndings(_:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return Regex.ignoresCase(_:)(a1, a2, MEMORY[0x18961C350], a3);
}

uint64_t Regex.ignoresCase(_:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, unsigned int *a3@<X2>, void *a4@<X8>)
{
  uint64_t v9 = type metadata accessor for AST.MatchingOption.Kind();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](v9);
  uint64_t v12 = (char *)v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v15[1] = *v4;
  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, *a3, v9);
  uint64_t v13 = MEMORY[0x186E17958](&protocol conformance descriptor for Regex<A>, a2);
  RegexComponent.wrapInOption(_:addingIf:)((uint64_t)v12, a1, a2, v13, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t Regex.repetitionBehavior(_:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v7 = type metadata accessor for AST.MatchingOption.Kind();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1895F8858](v7);
  uint64_t v11 = (char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v9);
  uint64_t v13 = (char *)v18 - v12;
  int v14 = *a1;
  v18[1] = *v3;
  if (v14 == 2)
  {
    (*(void (**)(char *, void, uint64_t))(v8 + 104))( (char *)v18 - v12,  *MEMORY[0x18961C310],  v7);
    uint64_t v15 = MEMORY[0x186E17958](&protocol conformance descriptor for Regex<A>, a2);
    RegexComponent.wrapInOption(_:addingIf:)((uint64_t)v13, 1, a2, v15, a3);
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v13, v7);
  }

  else
  {
    (*(void (**)(char *, void, uint64_t))(v8 + 104))(v11, *MEMORY[0x18961C300], v7);
    uint64_t v17 = MEMORY[0x186E17958](&protocol conformance descriptor for Regex<A>, a2);
    RegexComponent.wrapInOption(_:addingIf:)((uint64_t)v11, v14 == 1, a2, v17, a3);
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  }

void static RegexRepetitionBehavior.possessive.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

BOOL static RegexRepetitionBehavior.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void static RegexRepetitionBehavior.reluctant.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t Regex.matchingSemantics(_:)@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v7 = type metadata accessor for AST.MatchingOption.Kind();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((*a1 & 1) != 0)
  {
    uint64_t v15 = *v3;
    uint64_t v11 = (unsigned int *)MEMORY[0x18961C328];
  }

  else
  {
    uint64_t v15 = *v3;
    uint64_t v11 = (unsigned int *)MEMORY[0x18961C340];
  }

  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, *v11, v7);
  uint64_t v12 = MEMORY[0x186E17958](&protocol conformance descriptor for Regex<A>, a2);
  RegexComponent.wrapInOption(_:addingIf:)((uint64_t)v10, 1, a2, v12, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t Regex._nsreCompatibility.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = type metadata accessor for AST.MatchingOption.Kind();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = *v2;
  uint64_t v9 = *(void (**)(char *, void, uint64_t))(v6 + 104);
  v9(v8, *MEMORY[0x18961C2F8], v5);
  uint64_t v10 = MEMORY[0x186E17958](&protocol conformance descriptor for Regex<A>, a1);
  RegexComponent.wrapInOption(_:addingIf:)((uint64_t)v8, 1, a1, v10, &v14);
  uint64_t v11 = *(void (**)(char *, uint64_t))(v6 + 8);
  v11(v8, v5);
  uint64_t v13 = v14;
  v9(v8, *MEMORY[0x18961C328], v5);
  RegexComponent.wrapInOption(_:addingIf:)((uint64_t)v8, 1, a1, v10, a2);
  v11(v8, v5);
  return swift_release();
}

void static RegexSemanticLevel.graphemeCluster.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static RegexSemanticLevel.unicodeScalar.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void RegexSemanticLevel.hash(into:)()
{
}

BOOL static RegexSemanticLevel.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MatchMode()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MatchMode()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void RegexRepetitionBehavior.hash(into:)()
{
}

Swift::Int RegexRepetitionBehavior.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void static RegexRepetitionBehavior.eager.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t matchesWord #1 (at:) in Processor.atSimpleBoundary(_:_:)( unint64_t a1, char a2, unint64_t *a3, char a4)
{
  uint64_t v8 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v8);
  uint64_t v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v12 = *a3;
  if ((a2 & 1) != 0)
  {
    unint64_t v15 = a3[1];
    _StringGuts.validateScalarIndex(_:)(a1, v12, v15);
    if ((v15 & 0x1000000000000000LL) != 0)
    {
      unsigned int v17 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }

    else
    {
      if ((v15 & 0x2000000000000000LL) != 0)
      {
        v21[0] = v12;
        v21[1] = v15 & 0xFFFFFFFFFFFFFFLL;
      }

      else if ((v12 & 0x1000000000000000LL) == 0)
      {
        _StringObject.sharedUTF8.getter();
      }

      unsigned int v17 = _decodeScalar(_:startingAt:)();
    }

    unsigned int v18 = v17;
    Unicode.Scalar.properties.getter();
    char v19 = Unicode.Scalar.Properties.isAlphabetic.getter();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    if ((v19 & 1) != 0 || v18 == 95)
    {
      BOOL v14 = v18 < 0x80;
      goto LABEL_15;
    }

    char v16 = 0;
  }

  else
  {
    String.subscript.getter();
    if ((Character.isWordCharacter.getter() & 1) != 0)
    {
      __int16 v13 = Character.asciiValue.getter();
      swift_bridgeObjectRelease();
      BOOL v14 = (v13 & 0x100) == 0;
LABEL_15:
      char v16 = v14 | a4 ^ 1;
      return v16 & 1;
    }

    swift_bridgeObjectRelease();
    char v16 = 0;
  }

  return v16 & 1;
}

uint64_t _RegexFactory.ignoreCapturesInTypedOutput<A>(_:)@<X0>( uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  void (*v6)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v6 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a2 + 16);
  v6(&v15, a1, a2);
  uint64_t v7 = *(void *)(v15 + 24);
  swift_retain();
  swift_release();
  DSLTree.Node.hasChildNodes.getter(v7);
  uint64_t v9 = v8;
  swift_release();
  if ((v9 & 1) != 0)
  {
    uint64_t v10 = swift_allocObject();
    v6(&v15, a1, a2);
    uint64_t v11 = *(void *)(v15 + 24);
    swift_retain();
    swift_release();
    *(void *)(v10 + 16) = v11;
    unint64_t v12 = v10 | 0x2000000000000000LL;
  }

  else
  {
    v6(&v15, a1, a2);
    unint64_t v12 = *(void *)(v15 + 24);
    swift_retain();
    swift_release();
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<Substring>.Program);
  uint64_t result = swift_allocObject();
  BOOL v14 = result;
  *(void *)(result + 16) = 0LL;
  if (one-time initialization token for default != -1) {
    uint64_t result = swift_once();
  }
  *(void *)(v14 + 24) = v12;
  *(void *)(v14 + 32) = 0LL;
  *a3 = v14;
  return result;
}

void *_RegexFactory.accumulate<A, B, C>(_:_:)@<X0>( uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, void *a6@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a4 + 16))(&v17, a2, a4);
  unint64_t v10 = *(void *)(v17 + 24);
  swift_retain();
  swift_release();
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a5 + 16))(&v16, a3, a5);
  uint64_t v11 = *(void *)(v16 + 24);
  swift_retain();
  swift_release();
  uint64_t v12 = DSLTree.Node.appending(_:)(v11, v10);
  swift_release();
  swift_release();
  type metadata accessor for Regex.Program(0LL, a1, v13, v14);
  uint64_t v17 = v12;
  uint64_t result = Regex.Program.__allocating_init(tree:)(&v17);
  *a6 = result;
  return result;
}

void *_RegexFactory.accumulateAlternation<A, B, C>(_:_:)@<X0>( uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, void *a6@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a4 + 16))(&v17, a2, a4);
  unint64_t v10 = *(void *)(v17 + 24);
  swift_retain();
  swift_release();
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a5 + 16))(&v16, a3, a5);
  uint64_t v11 = *(void *)(v16 + 24);
  swift_retain();
  swift_release();
  uint64_t v12 = DSLTree.Node.appendingAlternationCase(_:)(v11, v10);
  swift_release();
  swift_release();
  type metadata accessor for Regex.Program(0LL, a1, v13, v14);
  uint64_t v17 = v12;
  uint64_t result = Regex.Program.__allocating_init(tree:)(&v17);
  *a6 = result;
  return result;
}

void *_RegexFactory.assertion<A>(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return _RegexFactory.assertion<A>(_:)(a1, a2, a3);
}

{
  char v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  void *result;
  uint64_t v11;
  uint64_t v5 = *a1;
  type metadata accessor for DSLTree.Atom(0LL);
  uint64_t v6 = swift_allocBox();
  *uint64_t v7 = v5;
  swift_storeEnumTagMultiPayload();
  type metadata accessor for Regex.Program(0LL, a2, v8, v9);
  uint64_t v11 = v6 | 0x4000000000000000LL;
  uint64_t result = Regex.Program.__allocating_init(tree:)(&v11);
  *a3 = result;
  return result;
}

void *_RegexFactory.empty<A>()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  uint64_t v6 = 0x8000000000000000LL;
  uint64_t result = Regex.Program.__allocating_init(tree:)(&v6);
  *a4 = result;
  return result;
}

void *_RegexFactory.scalar<A>(_:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = swift_allocBox();
  *uint64_t v7 = a1;
  swift_storeEnumTagMultiPayload();
  type metadata accessor for Regex.Program(0LL, a2, v8, v9);
  uint64_t v11 = v6 | 0x4000000000000000LL;
  uint64_t result = Regex.Program.__allocating_init(tree:)(&v11);
  *a3 = result;
  return result;
}

void *_RegexFactory.characterClass<A>(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return _RegexFactory.assertion<A>(_:)(a1, a2, a3);
}

void *_RegexFactory.char<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = swift_allocBox();
  *uint64_t v9 = a1;
  v9[1] = a2;
  swift_storeEnumTagMultiPayload();
  swift_bridgeObjectRetain();
  type metadata accessor for Regex.Program(0LL, a3, v10, v11);
  uint64_t v13 = v8 | 0x4000000000000000LL;
  uint64_t result = Regex.Program.__allocating_init(tree:)(&v13);
  *a4 = result;
  return result;
}

void *_RegexFactory.symbolicReference<A>(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *a1;
  type metadata accessor for DSLTree.Atom(0LL);
  uint64_t v6 = swift_allocBox();
  *uint64_t v7 = v5;
  swift_storeEnumTagMultiPayload();
  type metadata accessor for Regex.Program(0LL, a2, v8, v9);
  uint64_t v11 = v6 | 0x4000000000000000LL;
  uint64_t result = Regex.Program.__allocating_init(tree:)(&v11);
  *a3 = result;
  return result;
}

void *_RegexFactory.customCharacterClass<A>(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *a1;
  char v6 = *((_BYTE *)a1 + 8);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v5;
  *(_BYTE *)(v7 + 24) = v6;
  uint64_t v8 = v7 | 0x3000000000000004LL;
  swift_bridgeObjectRetain();
  type metadata accessor for Regex.Program(0LL, a2, v9, v10);
  uint64_t v12 = v8;
  uint64_t result = Regex.Program.__allocating_init(tree:)(&v12);
  *a3 = result;
  return result;
}

void _RegexFactory.zeroOrOne<A, B>(_:_:)(uint64_t a1, uint64_t a2)
{
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DSLTree.QuantificationKind?);
  MEMORY[0x1895F8858](v3);
  uint64_t v4 = type metadata accessor for DSLTree.QuantificationKind(0LL);
  MEMORY[0x1895F8858](v4);
  __asm { BR              X10 }

void _RegexFactory.zeroOrMore<A, B>(_:_:)(uint64_t a1, uint64_t a2)
{
}

void _RegexFactory.oneOrMore<A, B>(_:_:)(uint64_t a1, uint64_t a2)
{
}

void *sub_182D70C14()
{
  uint64_t v9 = *MEMORY[0x18961C388];
  uint64_t v10 = type metadata accessor for AST.Quantification.Kind();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 104LL))(v6, v9, v10);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v0 + 56))(v6, 0LL, 1LL, v7);
  outlined init with take of DSLTree.QuantificationKind(v6, v5, type metadata accessor for DSLTree.QuantificationKind);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree._AST.QuantificationAmount, DSLTree.QuantificationKind, DSLTree.Node));
  uint64_t v12 = swift_allocBox();
  uint64_t v14 = v13;
  uint64_t v15 = v13 + *(int *)(v11 + 48);
  uint64_t v16 = *(int *)(v11 + 64);
  uint64_t v17 = *v4;
  uint64_t v18 = type metadata accessor for AST.Quantification.Amount();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 104LL))(v14, v17, v18);
  outlined init with take of DSLTree.QuantificationKind(v5, v15, type metadata accessor for DSLTree.QuantificationKind);
  (*(void (**)(uint64_t, uint64_t))(v2 + 16))(v3, v2);
  uint64_t v19 = *(void *)(*(void *)(v8 - 96) + 24LL);
  swift_retain();
  swift_release();
  *(void *)(v14 + v16) = v19;
  type metadata accessor for Regex.Program(0LL, v1, v20, v21);
  *(void *)(v8 - 88) = v12 | 0x3000000000000000LL;
  uint64_t result = Regex.Program.__allocating_init(tree:)((uint64_t *)(v8 - 88));
  **(void **)(v8 - 104) = result;
  return result;
}

void *_RegexFactory.exactly<A, B>(_:_:)@<X0>( uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, void *a4@<X8>)
{
  uint64_t v7 = type metadata accessor for Source.Location();
  MEMORY[0x1895F8858](v7);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree._AST.QuantificationAmount, DSLTree.QuantificationKind, DSLTree.Node));
  uint64_t v9 = swift_allocBox();
  uint64_t v11 = v10;
  uint64_t v12 = *(int *)(v8 + 64);
  static Source.Location.fake.getter();
  AST.Atom.Number.init(_:at:)();
  uint64_t v13 = *MEMORY[0x18961C3E8];
  uint64_t v14 = type metadata accessor for AST.Quantification.Amount();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 104LL))(v11, v13, v14);
  type metadata accessor for DSLTree.QuantificationKind(0LL);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a3 + 16))(&v20, a2, a3);
  uint64_t v15 = *(void *)(v20 + 24);
  swift_retain();
  swift_release();
  *(void *)(v11 + v12) = v15;
  type metadata accessor for Regex.Program(0LL, a1, v16, v17);
  uint64_t v21 = v9 | 0x3000000000000000LL;
  uint64_t result = Regex.Program.__allocating_init(tree:)(&v21);
  *a4 = result;
  return result;
}

void *_RegexFactory.repeating<A, B>(_:_:_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, void *a7@<X8>)
{
  char v16 = *a3;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a6 + 16))(&v17, a5, a6);
  swift_retain();
  swift_release();
  specialized static DSLTree.Node.repeating(_:_:_:)(a1, a2, (uint64_t)&v16);
  uint64_t v12 = v11;
  swift_release();
  type metadata accessor for Regex.Program(0LL, a4, v13, v14);
  uint64_t v17 = v12;
  uint64_t result = Regex.Program.__allocating_init(tree:)(&v17);
  *a7 = result;
  return result;
}

void *_RegexFactory.atomicNonCapturing<A, B>(_:)@<X0>( uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  return _RegexFactory.atomicNonCapturing<A, B>(_:)(a1, a2, a3, MEMORY[0x18961C890], a4);
}

void *_RegexFactory.lookaheadNonCapturing<A, B>(_:)@<X0>( uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  return _RegexFactory.atomicNonCapturing<A, B>(_:)(a1, a2, a3, MEMORY[0x18961C8C8], a4);
}

void *_RegexFactory.negativeLookaheadNonCapturing<A, B>(_:)@<X0>( uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  return _RegexFactory.atomicNonCapturing<A, B>(_:)(a1, a2, a3, MEMORY[0x18961C888], a4);
}

void *_RegexFactory.atomicNonCapturing<A, B>(_:)@<X0>( uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, unsigned int *a4@<X4>, void *a5@<X8>)
{
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DSLTree._AST.GroupKind, DSLTree.Node));
  uint64_t v11 = swift_allocBox();
  uint64_t v13 = v12;
  uint64_t v14 = *(int *)(v10 + 48);
  uint64_t v15 = *a4;
  uint64_t v16 = type metadata accessor for AST.Group.Kind();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 104LL))(v13, v15, v16);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a3 + 16))(&v21, a2, a3);
  uint64_t v17 = *(void *)(v21 + 24);
  swift_retain();
  swift_release();
  *(void *)(v13 + v14) = v17;
  type metadata accessor for Regex.Program(0LL, a1, v18, v19);
  uint64_t v22 = v11 | 0x1000000000000004LL;
  uint64_t result = Regex.Program.__allocating_init(tree:)(&v22);
  *a5 = result;
  return result;
}

void *_RegexFactory.orderedChoice<A, B>(_:)@<X0>( uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DSLTree.Node>);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_182D9CC00;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a3 + 16))(&v14, a2, a3);
  uint64_t v10 = *(void *)(v14 + 24);
  swift_retain();
  swift_release();
  *(void *)(v9 + 32) = v10;
  *(void *)(v8 + 16) = v9;
  type metadata accessor for Regex.Program(0LL, a1, v11, v12);
  uint64_t v14 = v8;
  uint64_t result = Regex.Program.__allocating_init(tree:)(&v14);
  *a4 = result;
  return result;
}

void *_RegexFactory.capture<A, B>(_:)@<X0>( uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 24) = 0LL;
  *(void *)(v8 + 32) = 0LL;
  *(void *)(v8 + 16) = 0LL;
  *(_BYTE *)(v8 + 40) = 1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a3 + 16))(&v13, a2, a3);
  uint64_t v9 = *(void *)(v13 + 24);
  swift_retain();
  swift_release();
  *(void *)(v8 + 48) = v9;
  type metadata accessor for Regex.Program(0LL, a1, v10, v11);
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *(_BYTE *)(v8 + 88) = 0;
  uint64_t v14 = v8 | 0x1000000000000000LL;
  uint64_t result = Regex.Program.__allocating_init(tree:)(&v14);
  *a4 = result;
  return result;
}

void *_RegexFactory.capture<A, B>(_:_:)@<X0>( uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, void *a5@<X8>)
{
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = 0LL;
  *(void *)(v10 + 24) = 0LL;
  *(void *)(v10 + 32) = a1;
  *(_BYTE *)(v10 + 40) = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a4 + 16))(&v15, a3, a4);
  uint64_t v11 = *(void *)(v15 + 24);
  swift_retain();
  swift_release();
  *(void *)(v10 + 48) = v11;
  type metadata accessor for Regex.Program(0LL, a2, v12, v13);
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  *(_BYTE *)(v10 + 88) = 0;
  uint64_t v16 = v10 | 0x1000000000000000LL;
  uint64_t result = Regex.Program.__allocating_init(tree:)(&v16);
  *a5 = result;
  return result;
}

void *_RegexFactory.capture<A, B, C, D>(_:_:_:)@<X0>( uint64_t a1@<X1>, char a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, void *a8@<X8>, uint64_t a9, uint64_t a10)
{
  return _RegexFactory.capture<A, B, C, D>(_:_:_:)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  a10,  (void (*)(_OWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))CaptureTransform.init<A, B>(_:));
}

void *_RegexFactory.captureOptional<A, B, C, D>(_:_:_:)@<X0>( uint64_t a1@<X1>, char a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, void *a8@<X8>, uint64_t a9, uint64_t a10)
{
  return _RegexFactory.capture<A, B, C, D>(_:_:_:)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  a10,  (void (*)(_OWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))CaptureTransform.init<A, B>(_:));
}

void *_RegexFactory.capture<A, B, C, D>(_:_:_:)@<X0>( uint64_t a1@<X1>, char a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, void *a8@<X8>, uint64_t a9, uint64_t a10, void (*a11)(_OWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v16 = swift_allocObject();
  uint64_t v17 = v16;
  *(void *)(v16 + 16) = 0LL;
  *(void *)(v16 + 24) = 0LL;
  if ((a2 & 1) != 0) {
    uint64_t v18 = 0LL;
  }
  else {
    uint64_t v18 = a1;
  }
  *(void *)(v16 + 32) = v18;
  *(_BYTE *)(v16 + 40) = a2 & 1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a10 + 16))(&v28, a9, a10);
  uint64_t v19 = *(void *)(v28 + 24);
  swift_retain();
  swift_release();
  *(void *)(v17 + 48) = v19;
  swift_retain();
  a11(v29, a3, a4, a6, a7);
  char v20 = v30;
  __int128 v21 = v29[1];
  *(_OWORD *)(v17 + 56) = v29[0];
  *(_OWORD *)(v17 + 72) = v21;
  *(_BYTE *)(v17 + 88) = v20;
  type metadata accessor for Regex.Program(0LL, a5, v22, v23);
  uint64_t v31 = v17 | 0x1000000000000000LL;
  uint64_t result = Regex.Program.__allocating_init(tree:)(&v31);
  *a8 = result;
  return result;
}

uint64_t TypedIndex.index(_:offsetBy:limitedBy:)()
{
  if ((v2 & 1) != 0) {
    return 0LL;
  }
  else {
    return v1;
  }
}

uint64_t TypedIndex.startIndex.getter( uint64_t a1, void (*a2)(uint64_t *__return_ptr, void, void))
{
  return v3;
}

uint64_t MutableCollection<>.subscript.getter@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v48 = a1;
  uint64_t v49 = a4;
  uint64_t v6 = *(void *)(a3 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v8 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = MEMORY[0x1895F8858](v8);
  uint64_t v13 = (char *)&v40 - v12;
  uint64_t v41 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v14 = MEMORY[0x1895F8858](v11);
  uint64_t v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v14);
  uint64_t v18 = (char *)&v40 - v17;
  swift_getAssociatedConformanceWitness();
  uint64_t v45 = type metadata accessor for Range();
  uint64_t v43 = *(void *)(v45 - 8);
  uint64_t v19 = MEMORY[0x1895F8858](v45);
  __int128 v21 = (char *)&v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v19);
  uint64_t v40 = (char *)&v40 - v22;
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v46 = a2;
  uint64_t v47 = v4;
  uint64_t v44 = v6;
  dispatch thunk of Collection.endIndex.getter();
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if ((result & 1) != 0)
  {
    uint64_t v25 = v41;
    uint64_t v24 = TupleTypeMetadata2;
    uint64_t v26 = &v13[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v41 + 32);
    v27(v13, v18, AssociatedTypeWitness);
    v27(v26, v16, AssociatedTypeWitness);
    uint64_t v28 = &v10[*(int *)(v24 + 48)];
    uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v25 + 16);
    v29(v10, v13, AssociatedTypeWitness);
    v29(v28, v26, AssociatedTypeWitness);
    v27(v21, v10, AssociatedTypeWitness);
    char v30 = *(void (**)(char *, uint64_t))(v25 + 8);
    v30(v28, AssociatedTypeWitness);
    uint64_t v31 = &v10[*(int *)(v24 + 48)];
    v27(v10, v13, AssociatedTypeWitness);
    v27(v31, v26, AssociatedTypeWitness);
    uint64_t v32 = v45;
    v27(&v21[*(int *)(v45 + 36)], v31, AssociatedTypeWitness);
    v30(v10, AssociatedTypeWitness);
    uint64_t v33 = v43;
    uint64_t v34 = v40;
    (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v40, v21, v32);
    uint64_t v36 = v47;
    uint64_t v35 = v48;
    uint64_t v37 = v46;
    dispatch thunk of Collection._failEarlyRangeCheck(_:bounds:)();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v34, v32);
    uint64_t v38 = type metadata accessor for Slice();
    __int128 v39 = v49;
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v37 - 8) + 16LL))(&v49[*(int *)(v38 + 40)], v36, v37);
    (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v34, v35, v32);
    v27(v39, v34, AssociatedTypeWitness);
    return ((uint64_t (*)(char *, char *, uint64_t))v27)( &v39[*(int *)(v38 + 36)],  &v34[*(int *)(v32 + 36)],  AssociatedTypeWitness);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t TypedIndex.init(rawValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 32LL))(a3, a1);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance TypedIndex<A, B>@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56LL))(a3, 0LL, 1LL, a2);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance TypedIndex<A, B>@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8LL) + 16LL))(a2, v2);
}

uint64_t TypedIndex.count.getter()
{
  return dispatch thunk of Collection.count.getter();
}

uint64_t TypedIndex.index(after:)()
{
  return v1;
}

uint64_t TypedIndex.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v9 = a1;
  uint64_t v3 = (uint64_t (*)(_BYTE *, void))dispatch thunk of Collection.subscript.read();
  uint64_t v5 = v4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16LL))( a2,  v5,  AssociatedTypeWitness);
  return v3(v8, 0LL);
}

uint64_t TypedIndex.distance(from:to:)()
{
  return dispatch thunk of Collection.distance(from:to:)();
}

uint64_t TypedIndex.index(_:offsetBy:)()
{
  return v1;
}

uint64_t protocol witness for Collection.startIndex.getter in conformance TypedIndex<A, B>@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = TypedIndex.startIndex.getter( a1,  (void (*)(uint64_t *__return_ptr, void, void))MEMORY[0x189618828]);
  *a2 = result;
  return result;
}

uint64_t protocol witness for Collection.endIndex.getter in conformance TypedIndex<A, B>@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = TypedIndex.startIndex.getter( a1,  (void (*)(uint64_t *__return_ptr, void, void))MEMORY[0x189618888]);
  *a2 = result;
  return result;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance TypedIndex<A, B>( uint64_t **a1, uint64_t *a2))()
{
  uint64_t v4 = (uint64_t *)malloc(0x28uLL);
  *a1 = v4;
  void v4[4] = (uint64_t)TypedIndex.subscript.read(v4, *a2);
  return protocol witness for Collection.subscript.read in conformance RangesCollection<A>;
}

uint64_t (*TypedIndex.subscript.read(uint64_t *a1, uint64_t a2))()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  *a1 = AssociatedTypeWitness;
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  a1[1] = v5;
  uint64_t v6 = malloc(*(void *)(v5 + 64));
  a1[2] = (uint64_t)v6;
  TypedIndex.subscript.getter(a2, (uint64_t)v6);
  return RangesCollection.subscript.read;
}

void RangesCollection.subscript.read(void *a1)
{
  uint64_t v1 = (void *)a1[2];
  (*(void (**)(void *, void))(a1[1] + 8LL))(v1, *a1);
  free(v1);
}

void protocol witness for Collection._customLastIndexOfEquatableElement(_:) in conformance TypedIndex<A, B>( uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(_WORD *)(a1 + 8) = 256;
}

uint64_t protocol witness for Collection.index(after:) in conformance TypedIndex<A, B>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = TypedIndex.index(after:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance TypedIndex<A, B>(uint64_t *a1)
{
  uint64_t result = TypedIndex.index(after:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance TypedIndex<A, B>@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a2, v2, a1);
  uint64_t v6 = TypedIndex.startIndex.getter(a1, (void (*)(uint64_t *__return_ptr, void, void))MEMORY[0x189618828]);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, a1);
  MEMORY[0x186E17958](&protocol conformance descriptor for TypedIndex<A, B>, a1);
  uint64_t result = type metadata accessor for IndexingIterator();
  *(void *)(a2 + *(int *)(result + 36)) = v6;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance TypedIndex<A, B>(uint64_t a1)
{
  return Collection.underestimatedCount.getter();
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance TypedIndex<A, B>(uint64_t a1)
{
  uint64_t v3 = MEMORY[0x186E17958](&protocol conformance descriptor for TypedIndex<A, B>, a1);
  uint64_t v4 = specialized Collection._copyToContiguousArray()(v1, a1, v3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8LL))(v1, a1);
  return v4;
}

void (*TypedIndex<>.subscript.modify(void *a1, uint64_t a2))(void *a1)
{
  uint64_t v4 = malloc(0x30uLL);
  *a1 = v4;
  void v4[4] = a2;
  v4[5] = dispatch thunk of MutableCollection.subscript.modify();
  return TypedIndex<>.subscript.modify;
}

void TypedIndex<>.subscript.modify(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 40LL))(*a1, 0LL);
  free(v1);
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance <> TypedIndex<A, B>( uint64_t a1, uint64_t *a2)
{
  uint64_t v9 = *a2;
  uint64_t v3 = (uint64_t (*)(_BYTE *, void))dispatch thunk of MutableCollection.subscript.modify();
  uint64_t v5 = v4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 40LL))( v5,  a1,  AssociatedTypeWitness);
  return v3(v8, 0LL);
}

uint64_t (*protocol witness for MutableCollection.subscript.modify in conformance <> TypedIndex<A, B>( void *a1, uint64_t *a2))()
{
  uint64_t v4 = malloc(0x28uLL);
  *a1 = v4;
  void v4[4] = TypedIndex<>.subscript.modify(v4, *a2);
  return protocol witness for Collection.subscript.read in conformance RangesCollection<A>;
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance <> TypedIndex<A, B>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for Slice();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(a1, v5);
}

uint64_t (*protocol witness for MutableCollection.subscript.modify in conformance <> TypedIndex<A, B>( void *a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  uint64_t v8 = malloc(0x28uLL);
  *a1 = v8;
  v8[4] = MutableCollection<>.subscript.modify(v8, a2, a3, a4);
  return protocol witness for Collection.subscript.read in conformance RangesCollection<A>;
}

void protocol witness for Collection.subscript.read in conformance RangesCollection<A>(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32LL))(*a1);
  free(v1);
}

void (*MutableCollection<>.subscript.modify( void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t a1, char a2)
{
  uint64_t v9 = malloc(0x50uLL);
  *a1 = v9;
  v9[1] = a4;
  v9[2] = v4;
  *uint64_t v9 = a3;
  uint64_t v10 = type metadata accessor for Slice();
  v9[3] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  void v9[4] = v11;
  size_t v12 = *(void *)(v11 + 64);
  v9[5] = malloc(v12);
  uint64_t v13 = (char *)malloc(v12);
  v9[6] = v13;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v14 = type metadata accessor for Range();
  v9[7] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v9[8] = v15;
  v9[9] = malloc(*(void *)(v15 + 64));
  (*(void (**)(void))(v15 + 16))();
  MutableCollection<>.subscript.getter(a2, a3, a4, v13);
  return MutableCollection<>.subscript.modify;
}

void MutableCollection<>.subscript.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v4 = *(void *)(*(void *)a1 + 64LL);
  uint64_t v3 = *(void **)(*(void *)a1 + 72LL);
  uint64_t v5 = *(void **)(*(void *)a1 + 48LL);
  uint64_t v10 = *(void *)(*(void *)a1 + 56LL);
  uint64_t v7 = *(void *)(*(void *)a1 + 32LL);
  uint64_t v6 = *(void **)(*(void *)a1 + 40LL);
  uint64_t v8 = *(void *)(*(void *)a1 + 24LL);
  if ((a2 & 1) != 0)
  {
    (*(void (**)(void, void *, void))(v7 + 16))(v2[5], v5, v2[3]);
    MEMORY[0x186E17958](MEMORY[0x18961A5E8], v8);
    _writeBackMutableSlice<A, B>(_:bounds:slice:)();
    uint64_t v9 = *(void (**)(void *, uint64_t))(v7 + 8);
    v9(v6, v8);
    (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v10);
  }

  else
  {
    MEMORY[0x186E17958](MEMORY[0x18961A5E8], v2[3]);
    _writeBackMutableSlice<A, B>(_:bounds:slice:)();
    (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v10);
    uint64_t v9 = *(void (**)(void *, uint64_t))(v7 + 8);
  }

  v9(v5, v8);
  free(v3);
  free(v5);
  free(v6);
  free(v2);
}

uint64_t protocol witness for MutableCollection.partition(by:) in conformance <> TypedIndex<A, B>()
{
  return MutableCollection.partition(by:)();
}

uint64_t protocol witness for MutableCollection._withUnsafeMutableBufferPointerIfSupported<A>(_:) in conformance <> TypedIndex<A, B>()
{
  return MutableCollection._withUnsafeMutableBufferPointerIfSupported<A>(_:)();
}

uint64_t protocol witness for MutableCollection.withContiguousMutableStorageIfAvailable<A>(_:) in conformance <> TypedIndex<A, B>()
{
  return MutableCollection.withContiguousMutableStorageIfAvailable<A>(_:)();
}

uint64_t TypedIndex<>.index(before:)()
{
  return v1;
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance <> TypedIndex<A, B>@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = TypedIndex<>.index(before:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.formIndex(before:) in conformance <> TypedIndex<A, B>( uint64_t *a1)
{
  uint64_t result = TypedIndex<>.index(before:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance <> TypedIndex<A, B>@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = TypedIndex.index(_:offsetBy:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance TypedIndex<A, B>@<X0>( uint64_t a1@<X8>)
{
  uint64_t result = TypedIndex.index(_:offsetBy:limitedBy:)();
  *(void *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance <> TypedIndex<A, B>()
{
  return TypedIndex.distance(from:to:)();
}

uint64_t TypedIndex<>.init(arrayLiteral:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a2 - 8);
  uint64_t v6 = MEMORY[0x1895F8858](a1);
  uint64_t v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v11[1] = v6;
  swift_getAssociatedTypeWitness();
  uint64_t v9 = type metadata accessor for Array();
  MEMORY[0x186E17958](MEMORY[0x189618470], v9);
  dispatch thunk of RangeReplaceableCollection.init<A>(_:)();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a3, v8, a2);
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance <> TypedIndex<A, B>@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return TypedIndex<>.init(arrayLiteral:)(a1, *(void *)(a2 + 16), a3);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance TypedInt<A>(uint64_t a1)
{
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TypedInt<A>()
{
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance TypedInt<A>()
{
  return RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TypedInt<A>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return == infix<A>(_:_:)();
}

BOOL static TypedInt.< infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 < a2;
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance TypedInt<A>( uint64_t *a1, uint64_t *a2)
{
  return static TypedInt.< infix(_:_:)(*a1, *a2);
}

uint64_t TypedInt.description.getter()
{
  v0._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 35LL;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TypedInt<A>()
{
  return TypedInt.description.getter();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance _CharacterClassModel.Representation@<X0>( unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = specialized _CharacterClassModel.Representation.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Instruction.OpCode()
{
  Swift::UInt64 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Instruction.OpCode()
{
  Swift::UInt64 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance _CharacterClassModel()
{
  Swift::UInt64 v1 = *v0;
  Swift::UInt v2 = v0[1];
  Swift::UInt8 v3 = v0[2];
  Swift::UInt8 v4 = v0[3];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance _CharacterClassModel()
{
  Swift::UInt v1 = v0[1];
  Swift::UInt8 v2 = v0[2];
  Swift::UInt8 v3 = v0[3];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance _CharacterClassModel()
{
  Swift::UInt64 v1 = *v0;
  Swift::UInt v2 = v0[1];
  Swift::UInt8 v3 = v0[2];
  Swift::UInt8 v4 = v0[3];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance _CharacterClassModel( unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  if (a1[3]) {
    int v3 = 0x1000000;
  }
  else {
    int v3 = 0;
  }
  if (a1[2]) {
    int v4 = 0x10000;
  }
  else {
    int v4 = 0;
  }
  if (a1[1]) {
    int v5 = 256;
  }
  else {
    int v5 = 0;
  }
  return specialized static _CharacterClassModel.== infix(_:_:)(v5 | v2 | v4 | v3, *a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance _CharacterClassModel.Representation()
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_182D729CC + 4 * byte_182D9CEEF[*v0]))( 0xD000000000000017LL,  0x8000000182DA31F0LL);
}

uint64_t sub_182D729CC()
{
  return 0x3E796E613CLL;
}

uint64_t sub_182D729E0()
{
  return 0x61726720796E613CLL;
}

uint64_t sub_182D72A04()
{
  return 0x3E74696769643CLL;
}

unint64_t sub_182D72A1C()
{
  return 0xD000000000000012LL;
}

uint64_t sub_182D72A38@<X0>(uint64_t a1@<X8>)
{
  return a1 + 1;
}

uint64_t sub_182D72A50()
{
  return 0x707365746968773CLL;
}

uint64_t sub_182D72A70()
{
  return 0x3E64726F773CLL;
}

void _CharacterClassModel.description.getter(int a1)
{
  char v1 = a1;
  BOOL v2 = (a1 & 0x1000000) == 0;
  if ((a1 & 0x1000000) != 0) {
    uint64_t v3 = 544501614LL;
  }
  else {
    uint64_t v3 = 0LL;
  }
  if (v2) {
    unint64_t v4 = 0xE000000000000000LL;
  }
  else {
    unint64_t v4 = 0xE400000000000000LL;
  }
  unint64_t v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  __asm { BR              X10 }

uint64_t sub_182D72B0C()
{
  v0._uint64_t countAndFlagsBits = 0x3E796E613CLL;
  v0._uint64_t object = (void *)0xE500000000000000LL;
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return v2;
}

void protocol witness for CustomStringConvertible.description.getter in conformance _CharacterClassModel()
{
  if (v0[3]) {
    int v1 = 0x1000000;
  }
  else {
    int v1 = 0;
  }
  if (v0[2]) {
    int v2 = 0x10000;
  }
  else {
    int v2 = 0;
  }
  if (v0[1]) {
    int v3 = 256;
  }
  else {
    int v3 = 0;
  }
  _CharacterClassModel.description.getter(v3 | *v0 | v2 | v1);
}

void closure #1 in $defer #1 () in PrettyPrinter.printAsPattern(_:wrap:terminateLine:)(uint64_t a1, char a2)
{
  v3._uint64_t countAndFlagsBits = 0x65747265766E692ELL;
  v3._uint64_t object = (void *)0xE900000000000064LL;
  PrettyPrinter.output(_:)(v3);
  if ((a2 & 1) != 0) {
    PrettyPrinter.terminateLine()();
  }
}

uint64_t _StringGuts._slowEnsureMatchingEncoding(_:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000LL) == 0 || (a2 & 0x800000000000000LL) != 0)
  {
    uint64_t v10 = String.UTF16View.index(_:offsetBy:)();
    uint64_t v11 = v10 + (v4 << 16);
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v13 = v11 & 0xFFFFFFFFFFFF0000LL;
    if (!v4) {
      unint64_t v13 = v12;
    }
    return v13 | 4;
  }

  else
  {
    uint64_t v5 = MEMORY[0x186E17058](15LL, a1 >> 16);
    uint64_t v6 = v5 + (v4 << 16);
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v8 = v6 & 0xFFFFFFFFFFFF0000LL;
    if (!v4) {
      unint64_t v8 = v7;
    }
    return v8 | 8;
  }

unint64_t _StringGuts.validateInclusiveScalarIndex(_:)( unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000LL) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 1) == 0 || (result & 0xC) == 4LL << v5) {
    goto LABEL_9;
  }
  unint64_t v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000LL) == 0) {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 < result >> 16)
  {
    __break(1u);
LABEL_9:
    unint64_t result = _StringGuts.validateInclusiveSubscalarIndex(_:)(result, a2, a3);
    if ((result & 1) == 0) {
      return result & 0xC | _StringGuts.scalarAlignSlow(_:)(result, a2, a3) & 0xFFFFFFFFFFFFFFF3LL | 1;
    }
  }

  return result;
}

unint64_t _StringGuts.validateInclusiveSubscalarIndex(_:)( unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000LL) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 0xC) == 4LL << v5) {
    unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a2, a3);
  }
  unint64_t v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000LL) == 0) {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 < result >> 16) {
    __break(1u);
  }
  return result;
}

unint64_t _StringGuts.scalarAlignSlow(_:)(unint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0xC000) != 0 || result < 0x10000)
  {
    result &= 0xFFFFFFFFFFFF0000LL;
  }

  else
  {
    unint64_t v5 = result >> 16;
    if ((a3 & 0x1000000000000000LL) == 0)
    {
      void v13[2] = v3;
      v13[3] = v4;
      if ((a3 & 0x2000000000000000LL) != 0)
      {
        v13[0] = a2;
        v13[1] = a3 & 0xFFFFFFFFFFFFFFLL;
        if (v5 != (HIBYTE(a3) & 0xF) && (*((_BYTE *)v13 + v5) & 0xC0) == 0x80)
        {
          do
          {
            unint64_t v7 = v5 - 1;
            int v11 = *((_BYTE *)&v12 + v5-- + 7) & 0xC0;
          }

          while (v11 == 128);
          return v7 << 16;
        }

        goto LABEL_14;
      }

      if ((a2 & 0x1000000000000000LL) != 0)
      {
        uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if (v5 == (a2 & 0xFFFFFFFFFFFFLL)) {
          goto LABEL_14;
        }
      }

      else
      {
        unint64_t v12 = result >> 16;
        uint64_t v6 = _StringObject.sharedUTF8.getter();
        unint64_t v5 = v12;
        if (v12 == v10) {
          goto LABEL_14;
        }
      }

      if ((*(_BYTE *)(v6 + v5) & 0xC0) == 0x80)
      {
        do
        {
          unint64_t v7 = v5 - 1;
          int v8 = *(_BYTE *)(v6 - 1 + v5--) & 0xC0;
        }

        while (v8 == 128);
        return v7 << 16;
      }

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(a3 + 16);
  if (!v3) {
    return (void *)MEMORY[0x18961AFE8];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AnyRegexOutput.Element>);
  unint64_t v7 = (void *)swift_allocObject();
  size_t v8 = _swift_stdlib_malloc_size(v7);
  void v7[2] = v3;
  v7[3] = 2 * ((uint64_t)(v8 - 32) / 104);
  uint64_t v9 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v11, (uint64_t)(v7 + 4), v3, a1, a2, a3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v9 != v3)
  {
    __break(1u);
    return (void *)MEMORY[0x18961AFE8];
  }

  return v7;
}

_OWORD *specialized Sequence._copySequenceContents(initializing:)(_OWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = result;
  if (!a2)
  {
    uint64_t v5 = 0LL;
    __int128 v15 = *(_OWORD *)(v3 + 48);
    result[2] = *(_OWORD *)(v3 + 32);
    result[3] = v15;
    result[4] = *(_OWORD *)(v3 + 64);
    *(_OWORD *)((char *)result + 73) = *(_OWORD *)(v3 + 73);
    __int128 v16 = *(_OWORD *)(v3 + 16);
    *unint64_t result = *(_OWORD *)v3;
    result[1] = v16;
    return (_OWORD *)v5;
  }

  uint64_t v5 = a3;
  unint64_t v6 = *(void *)(v3 + 80);
  uint64_t v20 = *(void *)(v3 + 64);
  uint64_t v21 = *(void *)(v3 + 72);
  char v7 = *(_BYTE *)(v3 + 88) & 1;
  uint64_t v8 = *(void *)(v3 + 32);
  uint64_t v17 = *(void *)(v3 + 40);
  uint64_t v18 = *(void *)(v3 + 48);
  uint64_t v19 = *(void *)(v3 + 56);
  unint64_t v10 = *(void *)v3;
  unint64_t v9 = *(void *)(v3 + 8);
  uint64_t v12 = *(void *)(v3 + 16);
  uint64_t v11 = *(void *)(v3 + 24);
  if (!a3)
  {
LABEL_8:
    *(void *)uint64_t v4 = v10;
    *((void *)v4 + 1) = v9;
    *((void *)v4 + 2) = v12;
    *((void *)v4 + 3) = v11;
    *((void *)v4 + 4) = v8;
    *((void *)v4 + 5) = v17;
    *((void *)v4 + 6) = v18;
    *((void *)v4 + 7) = v19;
    *((void *)v4 + 8) = v20;
    *((void *)v4 + 9) = v21;
    *((void *)v4 + 10) = v6;
LABEL_12:
    *((_BYTE *)v4 + 88) = v7;
    return (_OWORD *)v5;
  }

  if ((a3 & 0x8000000000000000LL) == 0)
  {
    uint64_t v14 = 0LL;
    while ((v7 & 1) == 0)
    {
      unint64_t v26 = v10;
      unint64_t v27 = v9;
      uint64_t v28 = v12;
      uint64_t v29 = v11;
      uint64_t v30 = v8;
      uint64_t v31 = v17;
      uint64_t v32 = v18;
      uint64_t v33 = v19;
      uint64_t v34 = v20;
      uint64_t v35 = v21;
      unint64_t v36 = v6;
      char v37 = 0;
      SubstringSearcher.nextRange(in:searchFromEnd:)(v10, v9, v6, (uint64_t)&v22);
      unint64_t v6 = v24;
      char v7 = v25;
      if ((v23 & 1) != 0) {
        goto LABEL_11;
      }
      *(_OWORD *)(a2 + 16 * v14++) = v22;
      if (v5 == v14) {
        goto LABEL_8;
      }
    }

    char v7 = 1;
LABEL_11:
    *(void *)uint64_t v4 = v10;
    *((void *)v4 + 1) = v9;
    *((void *)v4 + 2) = v12;
    *((void *)v4 + 3) = v11;
    *((void *)v4 + 4) = v8;
    *((void *)v4 + 5) = v17;
    *((void *)v4 + 6) = v18;
    *((void *)v4 + 7) = v19;
    *((void *)v4 + 8) = v20;
    *((void *)v4 + 9) = v21;
    *((void *)v4 + 10) = v6;
    uint64_t v5 = v14;
    goto LABEL_12;
  }

  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)( uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v9 = (void *)result;
  if (!a2)
  {
    unint64_t v12 = 0LL;
    goto LABEL_10;
  }

  if (!a3)
  {
LABEL_8:
    unint64_t v12 = a3;
LABEL_10:
    *unint64_t v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = v12;
    return v12;
  }

  if ((a3 & 0x8000000000000000LL) == 0)
  {
    uint64_t v11 = a2;
    unint64_t v12 = 0LL;
    uint64_t v13 = a6 + 32;
    while (1)
    {
      unint64_t v14 = *(void *)(a6 + 16);
      if (v12 == v14) {
        goto LABEL_10;
      }
      if (v12 >= v14)
      {
        __break(1u);
        break;
      }

      ++v12;
      outlined init with copy of AnyRegexOutput.ElementRepresentation(v13, (uint64_t)&v21);
      *((void *)&v26 + 1) = a4;
      uint64_t v33 = a5;
      __int128 v15 = v21;
      __int128 v16 = v22;
      __int128 v27 = v21;
      __int128 v28 = v22;
      __int128 v17 = v24;
      __int128 v18 = v23;
      __int128 v29 = v23;
      __int128 v30 = v24;
      __int128 v19 = v25;
      __int128 v20 = v26;
      *(_OWORD *)(v11 + 64) = v25;
      *(_OWORD *)(v11 + 80) = v20;
      *(void *)(v11 + 96) = a5;
      *(_OWORD *)uint64_t v11 = v15;
      *(_OWORD *)(v11 + 16) = v16;
      *(_OWORD *)(v11 + 32) = v18;
      *(_OWORD *)(v11 + 48) = v17;
      v11 += 104LL;
      __int128 v31 = v19;
      __int128 v32 = v20;
      unint64_t result = swift_bridgeObjectRetain();
      v13 += 88LL;
      if (a3 == v12) {
        goto LABEL_8;
      }
    }
  }

  __break(1u);
  return result;
}

char *specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( char *a1, int64_t a2, char a3)
{
  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  *v3);
  *uint64_t v3 = result;
  return result;
}

{
  char **v3;
  char *result;
  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  *v3);
  *uint64_t v3 = result;
  return result;
}

{
  char **v3;
  char *result;
  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  *v3);
  *uint64_t v3 = result;
  return result;
}

{
  char **v3;
  char *result;
  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  *v3);
  *uint64_t v3 = result;
  return result;
}

{
  char **v3;
  char *result;
  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  *v3);
  *uint64_t v3 = result;
  return result;
}

{
  char **v3;
  char *result;
  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  *v3);
  *uint64_t v3 = result;
  return result;
}

{
  char **v3;
  char *result;
  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  *v3);
  *uint64_t v3 = result;
  return result;
}

size_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( size_t a1, int64_t a2, char a3)
{
  size_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

char *specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }

  else
  {
    unint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy();
  }

  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DSLTree.Node>);
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }

  else
  {
    unint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy();
  }

  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }

  else
  {
    unint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy();
  }

  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PrettyPrinter.NodeToPrint>);
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }

  else
  {
    unint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8]) {
      memmove(v12, v13, 24 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy();
  }

  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DSLTree._Tree>);
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }

  else
  {
    unint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy();
  }

  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AnyRegexOutput.Element>);
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 104);
  }

  else
  {
    unint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[104 * v8]) {
      memmove(v12, v13, 104 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy();
  }

  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any.Type>);
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }

  else
  {
    unint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    memcpy(v13, v14, 8 * v8);
  }

  swift_release();
  return v10;
}

size_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( size_t result, int64_t a2, char a3, void *a4)
{
  char v5 = result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = (void *)MEMORY[0x18961AFE8];
    goto LABEL_19;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DSLTree.CustomCharacterClass.Member>);
  uint64_t v10 = *(void *)(type metadata accessor for DSLTree.CustomCharacterClass.Member(0LL) - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  size_t result = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

  if (result - v12 == 0x8000000000000000LL && v11 == -1) {
    goto LABEL_29;
  }
  void v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  uint64_t v15 = *(void *)(type metadata accessor for DSLTree.CustomCharacterClass.Member(0LL) - 8);
  if ((v5 & 1) != 0)
  {
    if (v13 < a4
      || (unint64_t v16 = (*(unsigned __int8 *)(v15 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80),
          (char *)v13 + v16 >= (char *)a4 + v16 + *(void *)(v15 + 72) * v8))
    {
      swift_arrayInitWithTakeFrontToBack();
    }

    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }

    a4[2] = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy();
  }

  swift_release();
  return (size_t)v13;
}

unint64_t specialized _copySequenceToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 64);
  unint64_t v2 = *(void *)(a1 + 80);
  char v3 = *(_BYTE *)(a1 + 88);
  uint64_t v33 = *(void *)(a1 + 32);
  uint64_t v34 = *(void *)(a1 + 72);
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v31 = *(void *)(a1 + 48);
  uint64_t v32 = *(void *)(a1 + 40);
  unint64_t v5 = *(void *)(a1 + 8);
  unint64_t v30 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v35 = *(void *)(a1 + 24);
  outlined retain of SubstringSearcher(a1);
  int64_t v7 = (void *)MEMORY[0x18961AFE8];
  uint64_t v8 = 0LL;
  if ((v3 & 1) == 0)
  {
    uint64_t v9 = (_OWORD *)(MEMORY[0x18961AFE8] + 32LL);
    uint64_t v27 = v4;
    uint64_t v28 = v1;
    do
    {
      unint64_t v40 = v30;
      unint64_t v41 = v5;
      uint64_t v42 = v6;
      uint64_t v43 = v35;
      uint64_t v44 = v33;
      uint64_t v45 = v32;
      uint64_t v46 = v31;
      uint64_t v47 = v4;
      uint64_t v48 = v1;
      uint64_t v49 = v34;
      unint64_t v50 = v2;
      char v51 = 0;
      unint64_t result = SubstringSearcher.nextRange(in:searchFromEnd:)(v30, v5, v2, (uint64_t)&v36);
      if ((v37 & 1) != 0) {
        break;
      }
      __int128 v11 = v36;
      unint64_t v2 = v38;
      char v12 = v39;
      if (!v8)
      {
        unint64_t v13 = v7[3];
        __int128 v29 = v36;
        int64_t v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
        if (v14 <= 1) {
          uint64_t v15 = 1LL;
        }
        else {
          uint64_t v15 = v14;
        }
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Range<String.Index>>);
        unint64_t v16 = (void *)swift_allocObject();
        int64_t v17 = _swift_stdlib_malloc_size(v16);
        uint64_t v18 = v17 - 32;
        if (v17 < 32) {
          uint64_t v18 = v17 - 17;
        }
        uint64_t v19 = v18 >> 4;
        v16[2] = v15;
        v16[3] = 2 * (v18 >> 4);
        unint64_t v20 = (unint64_t)(v16 + 4);
        uint64_t v21 = v7[3] >> 1;
        if (v7[2])
        {
          __int128 v22 = v7 + 4;
          void v7[2] = 0LL;
        }

        uint64_t v9 = (_OWORD *)(v20 + 16 * v21);
        uint64_t v8 = (v19 & 0x7FFFFFFFFFFFFFFFLL) - v21;
        unint64_t result = swift_release();
        int64_t v7 = v16;
        uint64_t v4 = v27;
        uint64_t v1 = v28;
        __int128 v11 = v29;
      }

      BOOL v23 = __OFSUB__(v8--, 1LL);
      if (v23)
      {
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }

      *v9++ = v11;
    }

    while ((v12 & 1) == 0);
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t result = swift_bridgeObjectRelease();
  unint64_t v24 = v7[3];
  if (v24 < 2) {
    return (unint64_t)v7;
  }
  unint64_t v25 = v24 >> 1;
  BOOL v23 = __OFSUB__(v25, v8);
  uint64_t v26 = v25 - v8;
  if (!v23)
  {
    void v7[2] = v26;
    return (unint64_t)v7;
  }

unint64_t specialized _copySequenceToContiguousArray<A>(_:)(unint64_t result)
{
  unint64_t v1 = *(void *)result;
  unint64_t v2 = *(void *)(result + 8);
  uint64_t v4 = *(void *)(result + 16);
  unint64_t v3 = *(void *)(result + 24);
  uint64_t v5 = *(void *)(result + 48);
  uint64_t v6 = *(void *)(result + 56);
  unint64_t v8 = *(void *)(result + 64);
  unint64_t v7 = *(void *)(result + 72);
  uint64_t v9 = *(void *)(result + 80);
  char v10 = *(_BYTE *)(result + 120);
  uint64_t v118 = *(void *)(result + 184);
  char v11 = *(_BYTE *)(result + 192);
  __int128 v180 = *(_OWORD *)(result + 32);
  uint64_t v181 = v5;
  uint64_t v182 = v6;
  unint64_t v183 = v8;
  unint64_t v184 = v7;
  uint64_t v185 = v9;
  __int128 v12 = *(_OWORD *)(result + 88);
  __int128 v186 = v12;
  __int128 v187 = *(_OWORD *)(result + 104);
  unint64_t v150 = v1;
  char v188 = v10;
  unint64_t v123 = v2 >> 14;
  unint64_t v137 = v1 >> 14;
  if (v2 >> 14 < v1 >> 14)
  {
LABEL_115:
    __break(1u);
LABEL_116:
    __break(1u);
    goto LABEL_117;
  }

  uint64_t v13 = result;
  uint64_t v148 = v12;
  swift_bridgeObjectRetain_n();
  outlined retain of SubstringSearcher((uint64_t)&v180);
  swift_bridgeObjectRetain();
  outlined retain of SubstringSearcher((uint64_t)&v180);
  outlined retain of SplitCollection<SubstringSearcher>(v13);
  uint64_t v143 = v9;
  uint64_t v14 = Substring.subscript.getter();
  char v119 = v11;
  unint64_t v15 = v7;
  uint64_t v17 = v16;
  uint64_t v140 = v4;
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  swift_bridgeObjectRelease();
  unint64_t v139 = v2;
  uint64_t v22 = v148;
  swift_bridgeObjectRetain();
  uint64_t v23 = v14;
  uint64_t v24 = v143;
  uint64_t v25 = v21;
  uint64_t v26 = v148;
  unint64_t v142 = v15;
  uint64_t v27 = specialized SubstringSearcher.State.init(text:pattern:)(v23, v17, v19, v25, v8, v15);
  uint64_t v109 = v28;
  uint64_t v110 = v27;
  unint64_t v141 = v29;
  char v31 = v30 & 1;
  outlined release of RangesCollection<SubstringSearcher>(v13);
  unint64_t result = outlined release of SubstringSearcher((uint64_t)&v180);
  uint64_t v120 = 0LL;
  char v126 = 0;
  char v113 = v188;
  uint64_t v115 = v180;
  uint64_t v116 = *((void *)&v187 + 1);
  uint64_t v114 = *((void *)&v180 + 1);
  uint64_t v130 = v187;
  uint64_t v131 = 0LL;
  BOOL v32 = __OFSUB__((void)v187, 1LL);
  BOOL v117 = v32;
  unint64_t v144 = v8;
  unint64_t v149 = v8 >> 14;
  uint64_t v134 = v187 - 1;
  uint64_t v135 = *((void *)&v186 + 1);
  BOOL v33 = __OFSUB__(v187 - 1, 1LL);
  BOOL v129 = v33;
  uint64_t v127 = v187 - 2;
  uint64_t v121 = v187 - 3;
  BOOL v34 = __OFSUB__(v187 - 2, 1LL);
  BOOL v122 = v34;
  uint64_t v125 = (void *)MEMORY[0x18961AFE8];
  uint64_t v35 = MEMORY[0x18961AFE8] + 32LL;
  uint64_t v111 = v181;
  uint64_t v112 = v182;
  unint64_t v36 = v150;
  LOBYTE(v132) = v119;
  BYTE4(v132) = v119;
  unint64_t v128 = v150;
  uint64_t v37 = v140;
  unint64_t v38 = v123;
  uint64_t v138 = v22;
  unint64_t v136 = v3;
  do
  {
    uint64_t v133 = (void *)v35;
    if (v36 >> 14 == v38)
    {
      if ((v119 & 1) != 0)
      {
LABEL_98:
        char v126 = 1;
        break;
      }

      swift_bridgeObjectRetain();
      uint64_t v39 = Substring.subscript.getter();
      uint64_t v41 = v40;
      uint64_t v145 = v43;
      uint64_t v146 = v42;
      unint64_t result = swift_bridgeObjectRelease();
      char v126 = 1;
      uint64_t v132 = 0LL;
      char v44 = 1;
      uint64_t v45 = v131;
      if (v131)
      {
        LOBYTE(v132) = 0;
        goto LABEL_95;
      }

      goto LABEL_83;
    }

    if (v120 >= v118)
    {
      if (v38 < v36 >> 14)
      {
LABEL_113:
        __break(1u);
LABEL_114:
        __break(1u);
        goto LABEL_115;
      }

      swift_bridgeObjectRetain();
      uint64_t v39 = Substring.subscript.getter();
      uint64_t v41 = v46;
      uint64_t v145 = v48;
      uint64_t v146 = v47;
      unint64_t result = swift_bridgeObjectRelease();
      char v126 = 1;
      char v44 = 1;
      uint64_t v45 = v131;
      if (v131) {
        goto LABEL_95;
      }
LABEL_83:
      unint64_t v95 = v125[3];
      if ((uint64_t)((v95 >> 1) + 0x4000000000000000LL) >= 0)
      {
        int64_t v96 = v95 & 0xFFFFFFFFFFFFFFFELL;
        if (v96 <= 1) {
          uint64_t v97 = 1LL;
        }
        else {
          uint64_t v97 = v96;
        }
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Substring>);
        uint64_t v98 = (void *)swift_allocObject();
        int64_t v99 = _swift_stdlib_malloc_size(v98);
        uint64_t v100 = v99 - 32;
        if (v99 < 32) {
          uint64_t v100 = v99 - 1;
        }
        uint64_t v101 = v100 >> 5;
        v98[2] = v97;
        v98[3] = 2 * (v100 >> 5);
        unint64_t v102 = (unint64_t)(v98 + 4);
        uint64_t v103 = v125[3] >> 1;
        if (v125[2])
        {
          unint64_t v104 = v125 + 4;
          v125[2] = 0LL;
        }

        uint64_t v133 = (void *)(v102 + 32 * v103);
        unint64_t result = swift_release();
        uint64_t v45 = (v101 & 0x7FFFFFFFFFFFFFFFLL) - v103;
        uint64_t v125 = v98;
        uint64_t v24 = v143;
        uint64_t v37 = v140;
        unint64_t v38 = v123;
        uint64_t v26 = v138;
        goto LABEL_95;
      }

LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
      goto LABEL_113;
    }

    uint64_t v189 = v115;
    uint64_t v190 = v114;
    uint64_t v191 = v111;
    uint64_t v192 = v112;
    unint64_t v193 = v144;
    unint64_t v194 = v142;
    uint64_t v195 = v24;
    uint64_t v196 = v26;
    uint64_t v197 = v135;
    uint64_t v198 = v130;
    uint64_t v199 = v116;
    char v200 = v113;
LABEL_23:
    unint64_t v50 = v36;
    if ((v31 & 1) != 0)
    {
      char v31 = 1;
      unint64_t v36 = v141;
      goto LABEL_76;
    }

    unint64_t v36 = v141;
    if (!v130)
    {
      if ((v141 ^ v139) >= 0x4000)
      {
        unint64_t result = Substring.index(after:)();
        char v31 = 0;
        unint64_t v49 = v141;
        unint64_t v141 = result;
      }

      else
      {
        char v31 = 1;
        unint64_t v49 = v141;
        unint64_t v141 = 0LL;
      }

      goto LABEL_22;
    }

    if (*(void *)(v135 + 16))
    {
      if (v117) {
        goto LABEL_110;
      }
      unint64_t v124 = v50;
      unint64_t v51 = v139;
      while (1)
      {
        unint64_t v52 = Substring.index(before:)();
        unint64_t v53 = (unint64_t)Substring.index(before:)() >> 14;
        if (v53 < v149)
        {
          uint64_t v54 = v134;
          goto LABEL_59;
        }

        uint64_t v55 = Substring.subscript.getter();
        uint64_t v57 = v56;
        if (v55 == Substring.subscript.getter() && v57 == v58)
        {
          unint64_t result = swift_bridgeObjectRelease_n();
        }

        else
        {
          char v59 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          unint64_t result = swift_bridgeObjectRelease();
          if ((v59 & 1) == 0)
          {
            uint64_t v54 = v134;
            uint64_t v26 = v138;
            goto LABEL_59;
          }
        }

        if (v129) {
          goto LABEL_106;
        }
        unint64_t v60 = v52;
        if (v53 == v149)
        {
          uint64_t v24 = v143;
          uint64_t v26 = v138;
          goto LABEL_73;
        }

        if (v137 >= v52 >> 14) {
          goto LABEL_107;
        }
        uint64_t v61 = Substring.index(before:)();
        unint64_t v62 = (unint64_t)Substring.index(before:)() >> 14;
        if (v62 >= v149)
        {
          uint64_t v63 = Substring.subscript.getter();
          uint64_t v65 = v64;
          uint64_t v147 = v61;
          if (v63 == Substring.subscript.getter() && v65 == v66)
          {
            unint64_t result = swift_bridgeObjectRelease_n();
            uint64_t v26 = v138;
LABEL_44:
            unint64_t v60 = v147;
            if (v122) {
              goto LABEL_109;
            }
            uint64_t v54 = v121;
            uint64_t v24 = v143;
            uint64_t v37 = v140;
            unint64_t v3 = v136;
            if (v62 != v149)
            {
              while (v137 < v60 >> 14)
              {
                unint64_t v51 = v139;
                uint64_t v68 = Substring.index(before:)();
                unint64_t v69 = Substring.index(before:)();
                uint64_t v70 = v26;
                unint64_t v71 = v69 >> 14;
                if (v69 >> 14 < v149)
                {
                  uint64_t v26 = v70;
                  goto LABEL_59;
                }

                uint64_t v72 = Substring.subscript.getter();
                uint64_t v74 = v73;
                if (v72 == Substring.subscript.getter() && v74 == v75)
                {
                  unint64_t result = swift_bridgeObjectRelease_n();
                }

                else
                {
                  char v76 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  unint64_t result = swift_bridgeObjectRelease();
                  if ((v76 & 1) == 0)
                  {
                    unint64_t v51 = v139;
                    uint64_t v37 = v140;
                    unint64_t v3 = v136;
                    uint64_t v26 = v138;
                    goto LABEL_59;
                  }
                }

                BOOL v77 = __OFSUB__(v54--, 1LL);
                unint64_t v60 = v68;
                if (v77) {
                  goto LABEL_104;
                }
                BOOL v78 = v71 == v149;
                uint64_t v24 = v143;
                uint64_t v37 = v140;
                unint64_t v3 = v136;
                uint64_t v26 = v138;
                if (v78) {
                  goto LABEL_73;
                }
              }

              __break(1u);
LABEL_104:
              __break(1u);
LABEL_105:
              __break(1u);
LABEL_106:
              __break(1u);
LABEL_107:
              __break(1u);
              goto LABEL_108;
            }

LABEL_59:
        uint64_t v79 = Substring.subscript.getter();
        if (*(void *)(v135 + 16))
        {
          unint64_t v81 = v51;
          unint64_t v82 = specialized __RawDictionaryStorage.find<A>(_:)(v79, v80);
          char v84 = v83;
          swift_bridgeObjectRelease();
          if ((v84 & 1) != 0) {
            uint64_t v85 = *(void *)(*(void *)(v135 + 56) + 8 * v82);
          }
          else {
            uint64_t v85 = 0LL;
          }
          uint64_t v24 = v143;
          unint64_t v51 = v81;
          uint64_t v37 = v140;
        }

        else
        {
          swift_bridgeObjectRelease();
          uint64_t v85 = 0LL;
          uint64_t v24 = v143;
        }

        unint64_t result = v36;
        if (__OFSUB__(v54, v85)) {
          goto LABEL_105;
        }
        unint64_t result = Substring.index(_:offsetBy:limitedBy:)();
        unint64_t v36 = result;
        if ((v86 & 1) != 0)
        {
          char v31 = 1;
          unint64_t v38 = v123;
          unint64_t v50 = v124;
          goto LABEL_76;
        }
      }
    }

    unint64_t result = SubstringSearcher.nextRangeNaive(in:searchFromEnd:)(v150, v139, (uint64_t)&v151);
    unint64_t v36 = v154;
    char v31 = v155;
    if ((v153 & 1) == 0)
    {
      unint64_t v141 = v154;
      unint64_t v49 = v151;
      unint64_t v36 = v152;
      goto LABEL_22;
    }

LABEL_76:
    unint64_t v141 = v36;
    if (((v50 >> 14 == v38) & BYTE4(v132)) != 0) {
      goto LABEL_98;
    }
    if (v38 < v50 >> 14) {
      goto LABEL_114;
    }
    unint64_t v36 = v50;
    swift_bridgeObjectRetain();
    uint64_t v39 = Substring.subscript.getter();
    uint64_t v41 = v89;
    uint64_t v145 = v91;
    uint64_t v146 = v90;
    unint64_t result = swift_bridgeObjectRelease();
    char v126 = 1;
    char v44 = 1;
    uint64_t v45 = v131;
    if (!v131) {
      goto LABEL_83;
    }
LABEL_95:
    BOOL v77 = __OFSUB__(v45, 1LL);
    uint64_t v105 = v45 - 1;
    if (v77)
    {
LABEL_108:
      __break(1u);
LABEL_109:
      __break(1u);
LABEL_110:
      __break(1u);
      goto LABEL_111;
    }

    uint64_t v131 = v105;
    *uint64_t v133 = v39;
    v133[1] = v41;
    v133[2] = v146;
    v133[3] = v145;
    uint64_t v35 = (uint64_t)(v133 + 4);
  }

  while ((v44 & 1) == 0);
  unint64_t v151 = v150;
  unint64_t v152 = v139;
  uint64_t v153 = v37;
  unint64_t v154 = v3;
  unint64_t v155 = v128;
  unint64_t v156 = v150;
  unint64_t v157 = v139;
  uint64_t v158 = v37;
  unint64_t v159 = v3;
  uint64_t v160 = v115;
  uint64_t v161 = v114;
  uint64_t v162 = v111;
  uint64_t v163 = v112;
  unint64_t v164 = v144;
  unint64_t v165 = v142;
  uint64_t v166 = v24;
  uint64_t v167 = v26;
  uint64_t v168 = v135;
  uint64_t v169 = v130;
  uint64_t v170 = v116;
  char v171 = v113;
  uint64_t v172 = v110;
  uint64_t v173 = v109;
  unint64_t v174 = v141;
  char v175 = v31 & 1;
  uint64_t v176 = v118;
  char v177 = v119;
  uint64_t v178 = v120;
  char v179 = v126 & 1;
  outlined release of SplitCollection<SubstringSearcher>.Iterator((uint64_t)&v151);
  unint64_t result = (unint64_t)v125;
  unint64_t v106 = v125[3];
  if (v106 < 2) {
    return result;
  }
  unint64_t v107 = v106 >> 1;
  BOOL v77 = __OFSUB__(v107, v131);
  uint64_t v108 = v107 - v131;
  if (v77)
  {
LABEL_117:
    __break(1u);
    return result;
  }

  v125[2] = v108;
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    char v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }

  else
  {
    char v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    memcpy(v13, v14, 8 * v8);
  }

  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    char v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }

  else
  {
    char v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy();
  }

  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TypedInt<_InstructionAddress>?>);
    char v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }

  else
  {
    char v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  unint64_t v15 = 16 * v8;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[v15]) {
      memmove(v13, v14, v15);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    memcpy(v13, v14, v15);
  }

  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(TypedInt<_InstructionAddress>, MEProgram.Builder.AddressFixup)>);
    char v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }

  else
  {
    char v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  unint64_t v15 = 32 * v8;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[v15]) {
      memmove(v13, v14, v15);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    memcpy(v13, v14, v15);
  }

  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DSLTree.CustomCharacterClass.AsciiBitset>);
    char v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }

  else
  {
    char v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8]) {
      memmove(v12, v13, 24 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    memcpy(v12, v13, 24 * v8);
  }

  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Character>);
    char v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }

  else
  {
    char v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy();
  }

  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MatchingOptions.Representation>);
    char v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 29;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 2);
  }

  else
  {
    char v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8]) {
      memmove(v13, v14, 4 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    memcpy(v13, v14, 4 * v8);
  }

  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    char v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }

  else
  {
    char v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy();
  }

  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DSLTree.Node>);
    char v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }

  else
  {
    char v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy();
  }

  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Processor._StoredCapture>);
    char v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 72);
  }

  else
  {
    char v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[72 * v8]) {
      memmove(v12, v13, 72 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy();
  }

  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Processor.SavePoint>);
    char v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 80);
  }

  else
  {
    char v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[80 * v8]) {
      memmove(v12, v13, 80 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy();
  }

  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AnyRegexOutput.ElementRepresentation>);
    char v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 88);
  }

  else
  {
    char v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[88 * v8]) {
      memmove(v12, v13, 88 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy();
  }

  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Substring>);
    char v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }

  else
  {
    char v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy();
  }

  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any.Type>);
    char v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }

  else
  {
    char v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    memcpy(v13, v14, 8 * v8);
  }

  swift_bridgeObjectRelease();
  return v10;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( char *result, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v8 = a2;
  }

  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    int64_t v11 = (char *)swift_allocObject();
    int64_t v12 = _swift_stdlib_malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 25;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 3);
  }

  else
  {
    int64_t v11 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v14 = v11 + 32;
  unint64_t v15 = a4 + 32;
  if ((v6 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v9]) {
      memmove(v14, v15, 8 * v9);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    memcpy(v14, v15, 8 * v9);
  }

  swift_bridgeObjectRelease();
  return v11;
}

{
  char v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  char v6 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v8 = a2;
  }

  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    int64_t v11 = (char *)swift_allocObject();
    int64_t v12 = _swift_stdlib_malloc_size(v11);
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
  }

  else
  {
    int64_t v11 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v13 = v11 + 32;
  uint64_t v14 = a4 + 32;
  if ((v6 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[24 * v9]) {
      memmove(v13, v14, 24 * v9);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy();
  }

  swift_bridgeObjectRelease();
  return v11;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( void *result, int64_t a2, char a3, void *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v7 = a4[3];
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v8 = a2;
  }

  uint64_t v9 = a4[2];
  if (v8 <= v9) {
    uint64_t v10 = a4[2];
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    int64_t v11 = (void *)swift_allocObject();
    int64_t v12 = _swift_stdlib_malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    void v11[2] = v9;
    v11[3] = 2 * (v13 >> 4);
  }

  else
  {
    int64_t v11 = (void *)MEMORY[0x18961AFE8];
  }

  if ((v6 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[2 * v9 + 4]) {
      memmove(v11 + 4, a4 + 4, 16 * v9);
    }
    a4[2] = 0LL;
  }

  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ());
    swift_arrayInitWithCopy();
  }

  swift_bridgeObjectRelease();
  return v11;
}

size_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( size_t result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  char v8 = result;
  if ((a3 & 1) != 0)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000LL < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }

      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v10 = a2;
  }

  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v16 = (void *)MEMORY[0x18961AFE8];
    goto LABEL_19;
  }

  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v13 = *(void *)(a6(0LL) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (void *)swift_allocObject();
  unint64_t result = _swift_stdlib_malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

  if (result - v15 == 0x8000000000000000LL && v14 == -1) {
    goto LABEL_29;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(result - v15) / v14);
LABEL_19:
  uint64_t v18 = *(void *)(a6(0LL) - 8);
  if ((v8 & 1) != 0)
  {
    if (v16 < a4
      || (unint64_t v19 = (*(unsigned __int8 *)(v18 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80),
          (char *)v16 + v19 >= (char *)a4 + v19 + *(void *)(v18 + 72) * v11))
    {
      swift_arrayInitWithTakeFrontToBack();
    }

    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }

    a4[2] = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy();
  }

  swift_bridgeObjectRelease();
  return (size_t)v16;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(Swift::UInt a1)
{
  Swift::Int v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  Swift::Int v4 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  Swift::UInt v2 = *(void *)(a1 + 16);
  Hasher._combine(_:)(v2);
  if (v2)
  {
    unint64_t v3 = (void *)(a1 + 40);
    do
    {
      MEMORY[0x186E16E84](v6, *(v3 - 1), *v3);
      v3 += 2;
      --v2;
    }

    while (v2);
  }

  Swift::Int v4 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ReferenceID, Int>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (!*(void *)(v5 + 16))
  {
LABEL_43:
    uint64_t result = swift_release();
LABEL_44:
    *unint64_t v3 = v7;
    return result;
  }

  char v39 = a2;
  int64_t v8 = 0LL;
  uint64_t v40 = (void *)(v5 + 64);
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = result + 64;
  while (1)
  {
    if (v11)
    {
      unint64_t v16 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v17 = v16 | (v8 << 6);
      goto LABEL_22;
    }

    int64_t v18 = v8 + 1;
    if (__OFADD__(v8, 1LL))
    {
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }

    if (v18 >= v12) {
      goto LABEL_31;
    }
    unint64_t v19 = v40[v18];
    ++v8;
    if (!v19)
    {
      int64_t v8 = v18 + 1;
      if (v18 + 1 >= v12) {
        goto LABEL_31;
      }
      unint64_t v19 = v40[v8];
      if (!v19) {
        break;
      }
    }

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _OWORD *v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  int64_t v39;
  void *v40;
  char v41;
  char v42[72];
  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Character, TypedInt<_ElementRegister>>);
  uint64_t v41 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (!*(void *)(v5 + 16))
  {
LABEL_45:
    uint64_t result = swift_release();
LABEL_46:
    *unint64_t v3 = v7;
    return result;
  }

  int64_t v8 = 0LL;
  uint64_t v40 = (void *)(v5 + 64);
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  char v39 = (unint64_t)(v9 + 63) >> 6;
  int64_t v12 = result + 64;
  while (1)
  {
    if (v11)
    {
      int64_t v18 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v19 = v18 | (v8 << 6);
      goto LABEL_31;
    }

    int64_t v20 = v8 + 1;
    if (__OFADD__(v8, 1LL))
    {
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }

    if (v20 >= v39) {
      goto LABEL_33;
    }
    uint64_t v21 = v40[v20];
    ++v8;
    if (!v21)
    {
      int64_t v8 = v20 + 1;
      if (v20 + 1 >= v39) {
        goto LABEL_33;
      }
      uint64_t v21 = v40[v8];
      if (!v21) {
        break;
      }
    }

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  Swift::UInt v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _OWORD *v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  int64_t v38;
  void *v39;
  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ReferenceID, [TypedInt<_InstructionAddress>]>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (!*(void *)(v5 + 16))
  {
LABEL_45:
    uint64_t result = swift_release();
LABEL_46:
    *unint64_t v3 = v7;
    return result;
  }

  int64_t v8 = 0LL;
  char v39 = (void *)(v5 + 64);
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  unint64_t v38 = (unint64_t)(v9 + 63) >> 6;
  int64_t v12 = result + 64;
  while (1)
  {
    if (v11)
    {
      int64_t v18 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v19 = v18 | (v8 << 6);
      goto LABEL_31;
    }

    int64_t v20 = v8 + 1;
    if (__OFADD__(v8, 1LL))
    {
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }

    if (v20 >= v38) {
      goto LABEL_33;
    }
    uint64_t v21 = v39[v20];
    ++v8;
    if (!v21)
    {
      int64_t v8 = v20 + 1;
      if (v20 + 1 >= v38) {
        goto LABEL_33;
      }
      uint64_t v21 = v39[v8];
      if (!v21) {
        break;
      }
    }

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _OWORD *v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  int64_t v39;
  void *v40;
  char v41;
  char v42[72];
  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Character, Int>);
  uint64_t v41 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (!*(void *)(v5 + 16))
  {
LABEL_45:
    uint64_t result = swift_release();
LABEL_46:
    *unint64_t v3 = v7;
    return result;
  }

  int64_t v8 = 0LL;
  uint64_t v40 = (void *)(v5 + 64);
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  char v39 = (unint64_t)(v9 + 63) >> 6;
  int64_t v12 = result + 64;
  while (1)
  {
    if (v11)
    {
      int64_t v18 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v19 = v18 | (v8 << 6);
      goto LABEL_31;
    }

    int64_t v20 = v8 + 1;
    if (__OFADD__(v8, 1LL))
    {
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }

    if (v20 >= v39) {
      goto LABEL_33;
    }
    uint64_t v21 = v40[v20];
    ++v8;
    if (!v21)
    {
      int64_t v8 = v20 + 1;
      if (v20 + 1 >= v39) {
        goto LABEL_33;
      }
      uint64_t v21 = v40[v8];
      if (!v21) {
        break;
      }
    }

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)( uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= result && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= result && (a4 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
LABEL_7:
    int64_t v18 = (void *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      *(void *)(v18[7] + 8 * v12) = a1;
      return result;
    }

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t result = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0)
  {
    uint64_t v6 = ~v4;
    do
    {
      if (*(void *)(*(void *)(v2 + 48) + 8 * result) == a1) {
        break;
      }
      unint64_t result = (result + 1) & v6;
    }

    while (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0);
  }

  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  BOOL v15;
  unint64_t v3 = v2 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(v2 + 32);
  uint64_t v5 = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0)
  {
    uint64_t v7 = ~v4;
    int64_t v8 = *(void *)(a1 + 16);
    uint64_t v9 = *(void *)(v2 + 48);
    uint64_t v10 = (void *)(a1 + 40);
    do
    {
      char v11 = *(void *)(v9 + 8 * v5);
      if (*(void *)(v11 + 16) == v8)
      {
        if (!v8 || v11 == a1) {
          return v5;
        }
        unint64_t v12 = (void *)(v11 + 40);
        uint64_t v13 = v10;
        BOOL v14 = v8;
        while (1)
        {
          uint64_t v15 = *(v12 - 1) == *(v13 - 1) && *v12 == *v13;
          if (!v15 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
            break;
          }
          v12 += 2;
          v13 += 2;
          if (!--v14) {
            return v5;
          }
        }
      }

      uint64_t v5 = (v5 + 1) & v7;
    }

    while (((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0);
  }

  return v5;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0)
  {
    uint64_t v9 = ~v5;
    uint64_t v10 = *(void *)(v3 + 48);
    do
    {
      char v11 = (void *)(v10 + 16 * v6);
      if (*v11 == a1 && v11[1] == a2) {
        break;
      }
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        break;
      }
      unint64_t v6 = (v6 + 1) & v9;
    }

    while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
  }

  return v6;
}

void *specialized _NativeDictionary.copy()()
{
  unint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ReferenceID, Int>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    *unint64_t v1 = v4;
    return result;
  }

  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Character, TypedInt<_ElementRegister>>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    *unint64_t v1 = v4;
    return result;
  }

  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    uint64_t v23 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v23 >= v13) {
      goto LABEL_26;
    }
    uint64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ReferenceID, [TypedInt<_InstructionAddress>]>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    *unint64_t v1 = v4;
    return result;
  }

  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Character, Int>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    *unint64_t v1 = v4;
    return result;
  }

  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    uint64_t v23 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v23 >= v13) {
      goto LABEL_26;
    }
    uint64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }

unint64_t _StringGuts.validateScalarIndex(_:)( unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000LL) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 1) == 0 || (result & 0xC) == 4LL << v5) {
    goto LABEL_9;
  }
  unint64_t v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000LL) == 0) {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 <= result >> 16)
  {
    __break(1u);
LABEL_9:
    unint64_t result = _StringGuts.validateSubscalarIndex(_:)(result, a2, a3);
    if ((result & 1) == 0) {
      return result & 0xC | _StringGuts.scalarAlignSlow(_:)(result, a2, a3) & 0xFFFFFFFFFFFFFFF3LL | 1;
    }
  }

  return result;
}

unint64_t _StringGuts.validateSubscalarIndex(_:)( unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000LL) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 0xC) == 4LL << v5) {
    unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a2, a3);
  }
  unint64_t v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000LL) == 0) {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 <= result >> 16) {
    __break(1u);
  }
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(a1 + 16),  0,  (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(a1 + 16),  0,  (char *)a1,  &demangling cache variable for type metadata for _ContiguousArrayStorage<String.Index>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(a1 + 16),  0,  (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(a1 + 16),  0,  (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(a1 + 16),  0,  (char *)a1,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Instruction>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(a1 + 16),  0,  (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(a1 + 16),  0,  (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(a1 + 16),  0,  (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(a1 + 16),  0,  (char *)a1);
}

uint64_t specialized Set._Variant.insert(_:)(unint64_t *a1, unint64_t a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a2 >> 14);
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1LL << *(_BYTE *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) != 0)
  {
    uint64_t v9 = ~v7;
    while (a2 >> 14 != *(void *)(*(void *)(v5 + 48) + 8 * v8) >> 14)
    {
      unint64_t v8 = (v8 + 1) & v9;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) == 0) {
        goto LABEL_5;
      }
    }

    uint64_t result = 0LL;
    a2 = *(void *)(*(void *)(*v2 + 48) + 8 * v8);
  }

  else
  {
LABEL_5:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v12 = *v2;
    *uint64_t v2 = 0x8000000000000000LL;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v8, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v12;
    swift_bridgeObjectRelease();
    uint64_t result = 1LL;
  }

  *a1 = a2;
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  Hasher.init(_seed:)();
  MEMORY[0x186E16E84](v21, a2, a3);
  Swift::Int v9 = Hasher._finalize()();
  uint64_t v10 = -1LL << *(_BYTE *)(v8 + 32);
  unint64_t v11 = v9 & ~v10;
  uint64_t v12 = v8 + 56;
  if (((*(void *)(v8 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) != 0)
  {
    uint64_t v13 = ~v10;
    uint64_t v14 = *(void *)(v8 + 48);
    while (1)
    {
      unint64_t v15 = (void *)(v14 + 16 * v11);
      BOOL v16 = *v15 == a2 && v15[1] == a3;
      if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        break;
      }
      unint64_t v11 = (v11 + 1) & v13;
      if (((*(void *)(v12 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) == 0) {
        goto LABEL_9;
      }
    }

    swift_bridgeObjectRelease();
    unint64_t v19 = (Swift::Int *)(*(void *)(*v4 + 48LL) + 16 * v11);
    Swift::Int v20 = v19[1];
    *a1 = *v19;
    a1[1] = v20;
    swift_bridgeObjectRetain();
    return 0LL;
  }

  else
  {
LABEL_9:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v21[0] = *v4;
    *uint64_t v4 = 0x8000000000000000LL;
    swift_bridgeObjectRetain();
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, v11, isUniquelyReferenced_nonNull_native);
    *uint64_t v4 = v21[0];
    swift_bridgeObjectRelease();
    *a1 = a2;
    a1[1] = a3;
    return 1LL;
  }

uint64_t specialized Set._Variant.insert(_:)(_DWORD *a1, Swift::Int a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a2);
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1LL << *(_BYTE *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) != 0)
  {
    uint64_t v9 = ~v7;
    while (*(_DWORD *)(*(void *)(v5 + 48) + 4 * v8) != (_DWORD)a2)
    {
      unint64_t v8 = (v8 + 1) & v9;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) == 0) {
        goto LABEL_5;
      }
    }

    uint64_t result = 0LL;
    LODWORD(a2) = *(_DWORD *)(*(void *)(*v2 + 48) + 4 * v8);
  }

  else
  {
LABEL_5:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v12 = *v2;
    *uint64_t v2 = 0x8000000000000000LL;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v8, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v12;
    swift_bridgeObjectRelease();
    uint64_t result = 1LL;
  }

  *a1 = a2;
  return result;
}

uint64_t specialized _NativeSet.resize(capacity:)()
{
  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String.Index>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
LABEL_43:
    uint64_t result = swift_release();
    *unint64_t v1 = v4;
    return result;
  }

  int64_t v5 = 0LL;
  Swift::Int v6 = (void *)(v2 + 56);
  uint64_t v7 = 1LL << *(_BYTE *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }

    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1LL))
    {
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }

    if (v15 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = v6[v15];
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      unint64_t v16 = v6[v5];
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = v6[v5];
        if (!v16) {
          break;
        }
      }
    }

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  uint64_t v33;
  unint64_t v34;
  void *v35;
  void *v36;
  char v37[72];
  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Character>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
LABEL_43:
    uint64_t result = swift_release();
    *unint64_t v1 = v4;
    return result;
  }

  int64_t v5 = 0LL;
  uint64_t v36 = (void *)(v2 + 56);
  Swift::Int v6 = 1LL << *(_BYTE *)(v2 + 32);
  if (v6 < 64) {
    uint64_t v7 = ~(-1LL << v6);
  }
  else {
    uint64_t v7 = -1LL;
  }
  uint64_t v8 = v7 & *(void *)(v2 + 56);
  unint64_t v9 = (unint64_t)(v6 + 63) >> 6;
  int64_t v10 = result + 56;
  while (1)
  {
    if (v8)
    {
      unint64_t v13 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }

    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1LL))
    {
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }

    if (v15 >= v9) {
      goto LABEL_33;
    }
    unint64_t v16 = v36[v15];
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v9) {
        goto LABEL_33;
      }
      unint64_t v16 = v36[v5];
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v9) {
          goto LABEL_33;
        }
        unint64_t v16 = v36[v5];
        if (!v16) {
          break;
        }
      }
    }

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  Swift::UInt32 v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Unicode.Scalar>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
LABEL_43:
    uint64_t result = swift_release();
    *unint64_t v1 = v4;
    return result;
  }

  int64_t v5 = 0LL;
  Swift::Int v6 = (void *)(v2 + 56);
  uint64_t v7 = 1LL << *(_BYTE *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }

    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1LL))
    {
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }

    if (v15 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = v6[v15];
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      unint64_t v16 = v6[v5];
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = v6[v5];
        if (!v16) {
          break;
        }
      }
    }

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, unint64_t a2, char a3)
{
  unint64_t v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }

  else
  {
    if (v7 > v6)
    {
      uint64_t result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_12;
    }

    specialized _NativeSet.copyAndResize(capacity:)();
  }

  uint64_t v8 = *v3;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v5 >> 14);
  uint64_t result = Hasher._finalize()();
  uint64_t v9 = -1LL << *(_BYTE *)(v8 + 32);
  a2 = result & ~v9;
  if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v10 = ~v9;
    while (v5 >> 14 != *(void *)(*(void *)(v8 + 48) + 8 * a2) >> 14)
    {
      a2 = (a2 + 1) & v10;
      if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
        goto LABEL_12;
      }
    }

    goto LABEL_15;
  }

{
  uint64_t *v3;
  Swift::UInt32 v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  unint64_t v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }

  else
  {
    if (v7 > v6)
    {
      uint64_t result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_12;
    }

    specialized _NativeSet.copyAndResize(capacity:)();
  }

  uint64_t v8 = *v3;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v5);
  uint64_t result = Hasher._finalize()();
  uint64_t v9 = -1LL << *(_BYTE *)(v8 + 32);
  a2 = result & ~v9;
  if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v10 = ~v9;
    while (*(_DWORD *)(*(void *)(v8 + 48) + 4 * a2) != v5)
    {
      a2 = (a2 + 1) & v10;
      if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
        goto LABEL_12;
      }
    }

    goto LABEL_15;
  }

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)( Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  unint64_t v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_16;
  }
  if ((a4 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }

  else
  {
    if (v10 > v9)
    {
      uint64_t result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_16;
    }

    specialized _NativeSet.copyAndResize(capacity:)();
  }

  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  MEMORY[0x186E16E84](v23, v8, a2);
  uint64_t result = Hasher._finalize()();
  uint64_t v12 = -1LL << *(_BYTE *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if (((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) != 0)
  {
    uint64_t v14 = ~v12;
    uint64_t v15 = *(void *)(v11 + 48);
    do
    {
      unint64_t v16 = (void *)(v15 + 16 * a3);
      if (*v16 == v8 && v16[1] == a2) {
        goto LABEL_19;
      }
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) != 0) {
        goto LABEL_19;
      }
      a3 = (a3 + 1) & v14;
    }

    while (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) != 0);
  }

void *specialized _NativeSet.copy()()
{
  unint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String.Index>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *unint64_t v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Character>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *unint64_t v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    uint64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v20 >= v13) {
      goto LABEL_28;
    }
    BOOL v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      BOOL v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        BOOL v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Unicode.Scalar>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *unint64_t v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }

uint64_t specialized _NativeSet.copyAndResize(capacity:)()
{
  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String.Index>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *unint64_t v1 = v4;
    return result;
  }

  int64_t v5 = 0LL;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1LL << *(_BYTE *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }

    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1LL))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }

    if (v15 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  int64_t v28;
  char v29[72];
  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Character>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *unint64_t v1 = v4;
    return result;
  }

  int64_t v5 = 0LL;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1LL << *(_BYTE *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  unint64_t v28 = (unint64_t)(v7 + 63) >> 6;
  int64_t v10 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }

    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1LL))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }

    if (v15 >= v28) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v28) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v28) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  Swift::UInt32 v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Unicode.Scalar>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *unint64_t v1 = v4;
    return result;
  }

  int64_t v5 = 0LL;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1LL << *(_BYTE *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }

    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1LL))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }

    if (v15 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }

LABEL_37:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  if (!v17) {
    return 0LL;
  }
  if (v46 == v17)
  {
    uint64_t v36 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    unint64_t v16 = v46;
    uint64_t v19 = AssociatedTypeWitness;
    return v36(v29, v16, v19);
  }

  uint64_t v29 = (v21 + a1) & ~v20;
  if (v45 == v17)
  {
    uint64_t v36 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
    unint64_t v16 = v45;
    uint64_t v19 = v3;
    return v36(v29, v16, v19);
  }

  unint64_t v37 = (v29 + v22 + v26) & ~v26;
  if (v12 < v16)
  {
    uint64_t v29 = (v37 + v25 + v28) & ~v25;
    uint64_t v36 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
    return v36(v29, v16, v19);
  }

  if (!v13) {
    return 0LL;
  }
  unint64_t v38 = v44 >= v43
  uint64_t v40 = v38 != 0;
  uint64_t result = (v38 - 1);
  if ((_DWORD)result == 0 || !v40) {
    return 0LL;
  }
  return result;
}

uint64_t specialized _NativeDictionary.updateValue(_:forKey:isUnique:)(uint64_t a1, Swift::UInt a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  uint64_t v12 = v11 + ((v9 ^ 1) & 1);
  if (__OFADD__(v11, (v9 ^ 1) & 1))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  unsigned __int8 v13 = v9;
  uint64_t v14 = *(void *)(v8 + 24);
  if (v14 >= v12 && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
LABEL_7:
    int64_t v15 = (void *)*v4;
    if ((v13 & 1) != 0)
    {
LABEL_8:
      uint64_t v16 = v15[7];
      uint64_t result = *(void *)(v16 + 8 * v10);
      *(void *)(v16 + 8 * v10) = a1;
      return result;
    }

void *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)( uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x18961AFE8];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TypedInt<_InstructionAddress>>);
  uint64_t v4 = (void *)swift_allocObject();
  int64_t v5 = _swift_stdlib_malloc_size(v4);
  uint64_t v6 = v5 - 32;
  if (v5 < 32) {
    uint64_t v6 = v5 - 25;
  }
  v4[2] = a1;
  v4[3] = 2 * (v6 >> 3);
  return v4;
}

{
  uint64_t v2;
  void *v4;
  size_t v5;
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x18961AFE8];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Processor.SavePoint>);
  uint64_t v4 = (void *)swift_allocObject();
  int64_t v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * ((uint64_t)(v5 - 32) / 80);
  return v4;
}

{
  uint64_t v2;
  void *v4;
  int64_t v5;
  uint64_t v6;
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x18961AFE8];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Character>);
  uint64_t v4 = (void *)swift_allocObject();
  int64_t v5 = _swift_stdlib_malloc_size(v4);
  uint64_t v6 = v5 - 32;
  if (v5 < 32) {
    uint64_t v6 = v5 - 17;
  }
  v4[2] = a1;
  v4[3] = 2 * (v6 >> 4);
  return v4;
}

uint64_t specialized Array.remove(at:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *v2;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v5);
    uint64_t v5 = result;
  }

  unint64_t v7 = *(void *)(v5 + 16);
  if (v7 <= a1)
  {
    __break(1u);
  }

  else
  {
    uint64_t v8 = v5 + 80 * a1;
    __int128 v9 = *(_OWORD *)(v8 + 32);
    v8 += 32LL;
    char v10 = *(_BYTE *)(v8 + 16);
    unint64_t v11 = v7 - 1;
    char v12 = *(_BYTE *)(v8 + 40);
    char v13 = *(_BYTE *)(v8 + 41);
    uint64_t v14 = *(void *)(v8 + 48);
    uint64_t v15 = *(void *)(v8 + 72);
    *(_OWORD *)a2 = v9;
    *(_BYTE *)(a2 + 16) = v10;
    *(_OWORD *)(a2 + 24) = *(_OWORD *)(v8 + 24);
    *(_BYTE *)(a2 + 40) = v12;
    *(_BYTE *)(a2 + 41) = v13;
    *(void *)(a2 + 48) = v14;
    *(_OWORD *)(a2 + 56) = *(_OWORD *)(v8 + 56);
    *(void *)(a2 + 72) = v15;
    uint64_t result = (uint64_t)memmove((void *)v8, (const void *)(v8 + 80), 80 * (v11 - a1));
    *(void *)(v5 + 16) = v11;
    *uint64_t v2 = v5;
  }

  return result;
}

uint64_t specialized Array._customRemoveLast()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0)
  {
    uint64_t v5 = *(void *)(v3 + 16);
    if (v5)
    {
LABEL_3:
      uint64_t v6 = v5 - 1;
      uint64_t v7 = v3 + 80 * v6;
      char v8 = *(_BYTE *)(v7 + 48);
      char v9 = *(_BYTE *)(v7 + 72);
      char v10 = *(_BYTE *)(v7 + 73);
      uint64_t v11 = *(void *)(v7 + 80);
      uint64_t v12 = *(void *)(v7 + 104);
      *(_OWORD *)a1 = *(_OWORD *)(v7 + 32);
      *(_BYTE *)(a1 + 16) = v8;
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(v7 + 56);
      *(_BYTE *)(a1 + 40) = v9;
      *(_BYTE *)(a1 + 41) = v10;
      *(void *)(a1 + 48) = v11;
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(v7 + 88);
      *(void *)(a1 + 72) = v12;
      *(void *)(v3 + 16) = v6;
      *unint64_t v1 = v3;
      return result;
    }
  }

  else
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v3);
    uint64_t v3 = result;
    uint64_t v5 = *(void *)(result + 16);
    if (v5) {
      goto LABEL_3;
    }
  }

  __break(1u);
  return result;
}

uint64_t specialized DefaultIndices.formIndex(after:)( unint64_t *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v6 = _StringGuts.validateScalarIndex(_:)(*a1, a2, a3);
  if ((a3 & 0x1000000000000000LL) != 0)
  {
    uint64_t result = String.UnicodeScalarView._foreignIndex(after:)();
  }

  else
  {
    unint64_t v7 = v6 >> 16;
    if ((a3 & 0x2000000000000000LL) != 0)
    {
      v13[0] = a2;
      v13[1] = a3 & 0xFFFFFFFFFFFFFFLL;
      int v9 = *((unsigned __int8 *)v13 + v7);
    }

    else
    {
      if ((a2 & 0x1000000000000000LL) != 0) {
        uint64_t v8 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
      }
      else {
        uint64_t v8 = _StringObject.sharedUTF8.getter();
      }
      int v9 = *(unsigned __int8 *)(v8 + v7);
    }

    int v10 = (char)v9;
    unsigned int v11 = __clz(v9 ^ 0xFF) - 24;
    if (v10 >= 0) {
      LOBYTE(v11) = 1;
    }
    uint64_t result = ((v7 + v11) << 16) | 5;
  }

  *a1 = result;
  return result;
}

unint64_t specialized Collection.count.getter(unint64_t a1, unint64_t a2)
{
  uint64_t v4 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v4 = a1;
  }
  uint64_t v5 = 7LL;
  if (((a2 >> 60) & ((a1 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v5 = 11LL;
  }
  unint64_t v6 = v5 | (v4 << 16);
  unint64_t v7 = _StringGuts.validateInclusiveScalarIndex(_:)(0xFuLL, a1, a2);
  unint64_t result = _StringGuts.validateInclusiveScalarIndex(_:)(v6, a1, a2);
  unint64_t v9 = result >> 14;
  if (v7 >> 14 < result >> 14)
  {
    for (uint64_t i = 0LL; ; ++i)
    {
      uint64_t v11 = i + 1;
      if (__OFADD__(i, 1LL)) {
        break;
      }
      if ((a2 & 0x1000000000000000LL) != 0)
      {
        unint64_t result = String.UnicodeScalarView._foreignIndex(after:)();
        unint64_t v7 = result;
      }

      else
      {
        unint64_t v12 = v7 >> 16;
        if ((a2 & 0x2000000000000000LL) != 0)
        {
          unint64_t v22 = a1;
          uint64_t v23 = a2 & 0xFFFFFFFFFFFFFFLL;
          int v13 = *((unsigned __int8 *)&v22 + v12);
        }

        else
        {
          unint64_t result = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a1 & 0x1000000000000000LL) == 0) {
            unint64_t result = _StringObject.sharedUTF8.getter();
          }
          int v13 = *(unsigned __int8 *)(result + v12);
        }

        int v14 = (char)v13;
        unsigned int v15 = __clz(v13 ^ 0xFF) - 24;
        if (v14 >= 0) {
          LOBYTE(v15) = 1;
        }
        unint64_t v7 = ((v12 + v15) << 16) | 5;
      }

      if (v9 <= v7 >> 14) {
        return v11;
      }
    }

    __break(1u);
LABEL_40:
    __break(1u);
    return result;
  }

  if (v9 < v7 >> 14)
  {
    uint64_t v11 = 0LL;
    while (!__OFSUB__(v11--, 1LL))
    {
      if ((a2 & 0x1000000000000000LL) != 0)
      {
        unint64_t result = String.UnicodeScalarView._foreignIndex(before:)();
        unint64_t v7 = result;
      }

      else
      {
        if ((a2 & 0x2000000000000000LL) != 0)
        {
          unint64_t v22 = a1;
          uint64_t v23 = a2 & 0xFFFFFFFFFFFFFFLL;
          if ((*((_BYTE *)&v22 + (v7 >> 16) - 1) & 0xC0) == 0x80)
          {
            uint64_t v20 = 0LL;
            do
              int v21 = *((_BYTE *)&v22 + (v7 >> 16) + v20-- - 2) & 0xC0;
            while (v21 == 128);
            uint64_t v19 = 1 - v20;
          }

          else
          {
            uint64_t v19 = 1LL;
          }
        }

        else
        {
          unint64_t result = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a1 & 0x1000000000000000LL) == 0) {
            unint64_t result = _StringObject.sharedUTF8.getter();
          }
          uint64_t v17 = 0LL;
          do
            int v18 = *(_BYTE *)(result + (v7 >> 16) - 1 + v17--) & 0xC0;
          while (v18 == 128);
          uint64_t v19 = -v17;
        }

        unint64_t v7 = (v7 - (v19 << 16)) & 0xFFFFFFFFFFFF0000LL | 5;
      }

      if (v9 >= v7 >> 14) {
        return v11;
      }
    }

    goto LABEL_40;
  }

  return 0LL;
}

uint64_t specialized DefaultIndices<>.index(before:)( unint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v5 = _StringGuts.validateInclusiveScalarIndex(_:)(a1, a2, a3);
  if (v5 < 0x4000)
  {
    __break(1u);
  }

  else
  {
    unint64_t v6 = v5;
    if ((a3 & 0x1000000000000000LL) == 0)
    {
      if ((a3 & 0x2000000000000000LL) != 0)
      {
        v17[0] = a2;
        v17[1] = a3 & 0xFFFFFFFFFFFFFFLL;
        unint64_t v12 = (char *)v17 + (v5 >> 16);
        if ((*(v12 - 1) & 0xC0) == 0x80)
        {
          uint64_t v9 = 0LL;
          int v13 = v12 - 2;
          do
            int v14 = v13[v9--] & 0xC0;
          while (v14 == 128);
          goto LABEL_13;
        }
      }

      else
      {
        if ((a2 & 0x1000000000000000LL) != 0) {
          uint64_t v7 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
        }
        else {
          uint64_t v7 = _StringObject.sharedUTF8.getter();
        }
        uint64_t v8 = (v6 >> 16) + v7;
        if ((*(_BYTE *)(v8 - 1) & 0xC0) == 0x80)
        {
          uint64_t v9 = 0LL;
          uint64_t v10 = v8 - 2;
          do
            int v11 = *(_BYTE *)(v10 + v9--) & 0xC0;
          while (v11 == 128);
LABEL_13:
          uint64_t v15 = 1 - v9;
          return (v6 - (v15 << 16)) & 0xFFFFFFFFFFFF0000LL | 5;
        }
      }

      uint64_t v15 = 1LL;
      return (v6 - (v15 << 16)) & 0xFFFFFFFFFFFF0000LL | 5;
    }
  }

  return String.UnicodeScalarView._foreignIndex(before:)();
}

void *specialized Sequence._copySequenceContents(initializing:)( void *result, Swift::String_optional *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v5 = result;
  uint64_t v6 = HIBYTE(a5) & 0xF;
  uint64_t v11 = a4;
  unint64_t v12 = a5;
  if ((a5 & 0x2000000000000000LL) == 0) {
    uint64_t v6 = a4 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v13 = v6;
  if (!a2)
  {
    uint64_t v7 = 0LL;
LABEL_14:
    *unint64_t v5 = a4;
    v5[1] = a5;
    _OWORD v5[2] = 0LL;
    v5[3] = v6;
    return (void *)v7;
  }

  uint64_t v7 = a3;
  if (!a3) {
    goto LABEL_14;
  }
  if ((a3 & 0x8000000000000000LL) == 0)
  {
    uint64_t v8 = a2;
    uint64_t v9 = 0LL;
    while (1)
    {
      Swift::String_optional v10 = String.Iterator.next()();
      if (!v10.value._object) {
        break;
      }
      ++v9;
      *v8++ = v10;
      if (v7 == v9)
      {
        a4 = v11;
        a5 = v12;
        goto LABEL_13;
      }
    }

    a4 = v11;
    a5 = v12;
    uint64_t v7 = v9;
LABEL_13:
    uint64_t v6 = v13;
    goto LABEL_14;
  }

  __break(1u);
  return result;
}

unint64_t _StringGuts.validateScalarIndex(_:in:)( unint64_t result, unint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  char v9 = (a5 & 0x1000000000000000LL) == 0 || (a4 & 0x800000000000000LL) != 0;
  unint64_t v10 = result & 0xC;
  uint64_t v11 = 4LL << v9;
  if ((result & 1) == 0 || v10 == v11)
  {
LABEL_9:
    if (v10 == v11) {
      unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a4, a5);
    }
    if (result >> 14 < a2 >> 14 || result >> 14 >= a3 >> 14)
    {
      __break(1u);
    }

    else if ((result & 1) != 0)
    {
      return result;
    }

    return result & 0xC | _StringGuts.scalarAlignSlow(_:)(result, a4, a5) & 0xFFFFFFFFFFFFFFF3LL | 1;
  }

  unint64_t v10 = result >> 14;
  if (result >> 14 < a2 >> 14 || (uint64_t v11 = a3 >> 14, v10 >= a3 >> 14))
  {
    __break(1u);
    goto LABEL_9;
  }

  return result;
}

int64_t specialized _NativeSet.index(after:)(int64_t result, int a2, char a3, uint64_t a4)
{
  if ((a3 & 1) != 0) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (unint64_t result = 1LL << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }

  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }

  unint64_t v8 = v7 & (-2LL << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0LL;
  }
  unint64_t v9 = v5 + 1;
  unint64_t v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    unint64_t v11 = *(void *)(v6 + 8 * v9);
    if (v11) {
      return __clz(__rbit64(v11)) + (v9 << 6);
    }
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      unint64_t v11 = *(void *)(v6 + 8 * v9);
      if (v11) {
        return __clz(__rbit64(v11)) + (v9 << 6);
      }
      while (v10 - 3 != v5)
      {
        unint64_t v11 = *(void *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }

  return result;
}

uint64_t specialized _NativeSet.startIndex.getter(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0LL;
    return __clz(__rbit64(v1)) + v2;
  }

  char v5 = *(_BYTE *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1LL << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64LL;
    return __clz(__rbit64(v1)) + v2;
  }

  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2LL;
  }
  unint64_t v8 = v7 - 2;
  unint64_t v9 = (unint64_t *)(a1 + 72);
  uint64_t v2 = 64LL;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64LL;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }

  return v3;
}

uint64_t specialized Zip2Sequence.Iterator.next()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for CaptureList.Capture();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t result = MEMORY[0x1895F8858](v3);
  unint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (*(_BYTE *)(v1 + 32) == 1)
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CaptureList.Capture, Processor._StoredCapture));
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))( a1,  1LL,  1LL,  v8);
  }

  unint64_t v9 = *(void *)(v1 + 8);
  unint64_t v10 = *(void *)(*(void *)v1 + 16LL);
  if (v9 == v10) {
    goto LABEL_7;
  }
  if (v9 >= v10)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }

  unint64_t v11 = *(void *)v1
  *(void *)(v1 + 8) = v9 + 1;
  uint64_t result = (*(uint64_t (**)(char *, unint64_t, uint64_t))(v4 + 16))(v7, v11, v3);
  uint64_t v13 = *(void *)(v1 + 16);
  unint64_t v12 = *(void *)(v1 + 24);
  unint64_t v14 = *(void *)(v13 + 16);
  if (v12 == v14)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
LABEL_7:
    *(_BYTE *)(v1 + 32) = 1;
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CaptureList.Capture, Processor._StoredCapture));
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56LL))( a1,  1LL,  1LL,  v15);
  }

  if (v12 >= v14) {
    goto LABEL_12;
  }
  uint64_t v16 = (__int128 *)(v13 + 72 * v12 + 32);
  *(void *)(v1 + 24) = v12 + 1;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CaptureList.Capture, Processor._StoredCapture));
  uint64_t v18 = a1 + *(int *)(v17 + 48);
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(a1, v7, v3);
  outlined init with copy of Processor._StoredCapture(v16, v18);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(a1, 0LL, 1LL, v17);
}

uint64_t specialized implicit closure #1 in Collection<>._ranges<A>(of:)(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x18961AFF0];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Character, Int>);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  do
  {
    uint64_t v5 = *(v4 - 1);
    if (!v5) {
      break;
    }
    uint64_t v6 = *(v4 - 2);
    uint64_t v7 = *v4;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v6, *(v4 - 1));
    if ((v9 & 1) != 0)
    {
      __break(1u);
LABEL_11:
      __break(1u);
      return result;
    }

    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    unint64_t v10 = (uint64_t *)(v3[6] + 16 * result);
    *unint64_t v10 = v6;
    v10[1] = v5;
    *(void *)(v3[7] + 8 * result) = v7;
    uint64_t v11 = v3[2];
    BOOL v12 = __OFADD__(v11, 1LL);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v4 += 3;
    v3[2] = v13;
    swift_bridgeObjectRetain();
    --v1;
  }

  while (v1);
  return (unint64_t)v3;
}

{
  uint64_t v1;
  void *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x18961AFF0];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Character, TypedInt<_ElementRegister>>);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  do
  {
    uint64_t v5 = *(v4 - 1);
    if (!v5) {
      break;
    }
    uint64_t v6 = *(v4 - 2);
    uint64_t v7 = *v4;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v6, *(v4 - 1));
    if ((v9 & 1) != 0)
    {
      __break(1u);
LABEL_11:
      __break(1u);
      return result;
    }

    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    unint64_t v10 = (uint64_t *)(v3[6] + 16 * result);
    *unint64_t v10 = v6;
    v10[1] = v5;
    *(void *)(v3[7] + 8 * result) = v7;
    uint64_t v11 = v3[2];
    BOOL v12 = __OFADD__(v11, 1LL);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v4 += 3;
    v3[2] = v13;
    swift_bridgeObjectRetain();
    --v1;
  }

  while (v1);
  return (unint64_t)v3;
}

{
  uint64_t v1;
  void *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x18961AFF0];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<[Character], TypedInt<_SequenceRegister>>);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = (uint64_t *)(a1 + 40);
  do
  {
    uint64_t v5 = *(v4 - 1);
    if (!v5) {
      break;
    }
    uint64_t v6 = *v4;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*(v4 - 1));
    if ((v8 & 1) != 0)
    {
      __break(1u);
LABEL_11:
      __break(1u);
      return result;
    }

    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    char v9 = 8 * result;
    *(void *)(v3[6] + v9) = v5;
    *(void *)(v3[7] + v9) = v6;
    unint64_t v10 = v3[2];
    uint64_t v11 = __OFADD__(v10, 1LL);
    BOOL v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v3[2] = v12;
    swift_bridgeObjectRetain();
    v4 += 2;
    --v1;
  }

  while (v1);
  return (unint64_t)v3;
}

{
  uint64_t v1;
  void *v3;
  uint64_t *v4;
  uint64_t v5;
  Swift::UInt v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x18961AFF0];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ReferenceID, [TypedInt<_InstructionAddress>]>);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = (uint64_t *)(a1 + 40);
  do
  {
    uint64_t v5 = *v4;
    if (!*v4) {
      break;
    }
    uint64_t v6 = *(v4 - 1);
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v6);
    if ((v8 & 1) != 0)
    {
      __break(1u);
LABEL_11:
      __break(1u);
      return result;
    }

    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    char v9 = 8 * result;
    *(void *)(v3[6] + v9) = v6;
    *(void *)(v3[7] + v9) = v5;
    unint64_t v10 = v3[2];
    uint64_t v11 = __OFADD__(v10, 1LL);
    BOOL v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v4 += 2;
    v3[2] = v12;
    swift_bridgeObjectRetain();
    --v1;
  }

  while (v1);
  return (unint64_t)v3;
}

{
  uint64_t v1;
  void *v3;
  uint64_t *i;
  Swift::UInt v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ReferenceID, Int>);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (uint64_t i = (uint64_t *)(a1 + 40); ; i += 2)
    {
      uint64_t v5 = *(i - 1);
      uint64_t v6 = *i;
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
      if ((v8 & 1) != 0) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
      char v9 = 8 * result;
      *(void *)(v3[6] + v9) = v5;
      *(void *)(v3[7] + v9) = v6;
      unint64_t v10 = v3[2];
      uint64_t v11 = __OFADD__(v10, 1LL);
      BOOL v12 = v10 + 1;
      if (v11) {
        goto LABEL_10;
      }
      v3[2] = v12;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }

    __break(1u);
LABEL_10:
    __break(1u);
  }

  else
  {
    return MEMORY[0x18961AFF0];
  }

  return result;
}

uint64_t specialized SubstringSearcher.State.init(text:pattern:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6)
{
  uint64_t v9 = Substring.index(_:offsetBy:limitedBy:)();
  if ((v10 & 1) != 0) {
    unint64_t v11 = a6;
  }
  else {
    unint64_t v11 = v9;
  }
  if (v11 >> 14 < a5 >> 14) {
    goto LABEL_31;
  }
  Substring.subscript.getter();
  uint64_t v12 = Substring.distance(from:to:)();
  swift_bridgeObjectRelease();
  unint64_t v13 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x18961AFE8]);
  unint64_t v14 = a5;
  uint64_t v15 = (void *)v13;
  if (v12 != 4)
  {
    Substring.distance(from:to:)();
LABEL_25:
    swift_bridgeObjectRelease();
    if (a4)
    {
      Substring.index(_:offsetBy:limitedBy:)();
      swift_bridgeObjectRelease();
    }

    return (uint64_t)v15;
  }

  if ((v14 ^ a6) < 0x4000) {
    goto LABEL_25;
  }
  uint64_t v36 = a4;
  uint64_t v16 = 0LL;
  while (1)
  {
    uint64_t v17 = Substring.subscript.getter();
    uint64_t v19 = v18;
    uint64_t v20 = Substring.index(after:)();
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    uint64_t v21 = v20;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v19);
    uint64_t v25 = v15[2];
    BOOL v26 = (v23 & 1) == 0;
    uint64_t v27 = v25 + v26;
    if (__OFADD__(v25, v26)) {
      goto LABEL_29;
    }
    char v28 = v23;
    if (v15[3] >= v27)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v23 & 1) != 0) {
          goto LABEL_10;
        }
      }

      else
      {
        specialized _NativeDictionary.copy()();
        if ((v28 & 1) != 0) {
          goto LABEL_10;
        }
      }
    }

    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v27,  isUniquelyReferenced_nonNull_native);
      unint64_t v29 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v19);
      if ((v28 & 1) != (v30 & 1)) {
        goto LABEL_32;
      }
      unint64_t v24 = v29;
      if ((v28 & 1) != 0)
      {
LABEL_10:
        swift_bridgeObjectRelease();
        *(void *)(v15[7] + 8 * v24) = v16;
        goto LABEL_11;
      }
    }

    v15[(v24 >> 6) + 8] |= 1LL << v24;
    uint64_t v31 = (uint64_t *)(v15[6] + 16 * v24);
    *uint64_t v31 = v17;
    v31[1] = v19;
    *(void *)(v15[7] + 8 * v24) = v16;
    uint64_t v32 = v15[2];
    BOOL v33 = __OFADD__(v32, 1LL);
    uint64_t v34 = v32 + 1;
    if (v33) {
      goto LABEL_30;
    }
    void v15[2] = v34;
LABEL_11:
    swift_bridgeObjectRelease();
    ++v16;
    if ((v21 ^ a6) < 0x4000)
    {
      a4 = v36;
      goto LABEL_25;
    }
  }

  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = MEMORY[0x186E17958](MEMORY[0x189617FE0], MEMORY[0x189617FA8]);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = MEMORY[0x186E17958](MEMORY[0x189617FF0], MEMORY[0x189617FA8]);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = MEMORY[0x186E17958](MEMORY[0x189617FC0], MEMORY[0x189617FA8]);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Substring and conformance Substring()
{
  unint64_t result = lazy protocol witness table cache variable for type Substring and conformance Substring;
  if (!lazy protocol witness table cache variable for type Substring and conformance Substring)
  {
    unint64_t result = MEMORY[0x186E17958](MEMORY[0x189618C68], MEMORY[0x189618C50]);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Substring and conformance Substring);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Substring and conformance Substring;
  if (!lazy protocol witness table cache variable for type Substring and conformance Substring)
  {
    unint64_t result = MEMORY[0x186E17958](MEMORY[0x189618C60], MEMORY[0x189618C50]);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Substring and conformance Substring);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Substring and conformance Substring;
  if (!lazy protocol witness table cache variable for type Substring and conformance Substring)
  {
    unint64_t result = MEMORY[0x186E17958](MEMORY[0x189618C58], MEMORY[0x189618C50]);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Substring and conformance Substring);
  }

  return result;
}

uint64_t type metadata accessor for Regex(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Regex);
}

uint64_t type metadata accessor for ZSearcher(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ZSearcher);
}

uint64_t type metadata accessor for RangesCollection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for RangesCollection);
}

uint64_t type metadata accessor for RegexRangesCollection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for RegexRangesCollection);
}

uint64_t type metadata accessor for SplitCollection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SplitCollection);
}

uint64_t sub_182D7A564()
{
  return swift_deallocObject();
}

uint64_t sub_182D7A578()
{
  return swift_deallocObject();
}

uint64_t sub_182D7A59C()
{
  return swift_deallocObject();
}

uint64_t type metadata accessor for RegexMatchesCollection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for RegexMatchesCollection);
}

uint64_t type metadata accessor for RegexMatchesCollection.Iterator( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for RegexMatchesCollection.Iterator);
}

void type metadata accessor for FixedPatternConsumer()
{
}

uint64_t type metadata accessor for Regex.Match(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Regex.Match);
}

uint64_t specialized static _CharacterClassModel.== infix(_:_:)(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(void))((char *)sub_182D7A688 + 4 * byte_182D9CEFF[a2]))();
}

uint64_t sub_182D7A688@<X0>(unsigned int a1@<W1>, int a2@<W8>)
{
  uint64_t result = 0LL;
  if (!v2 && (((a2 ^ a1) >> 8) & 1) == 0 && ((a2 ^ a1) & 0x10000) == 0) {
    return ((a2 & 0x1000000) == 0) ^ ((a1 & 0x1000000) >> 24);
  }
  return result;
}

uint64_t specialized Collection._failEarlyRangeCheck(_:bounds:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Range();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1895F8858](v4);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v6);
  char v10 = (char *)&v17 - v9;
  char v11 = dispatch thunk of static Comparable.<= infix(_:_:)();
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v12(v10, a1, v4);
  v12(v8, a2, v4);
  if ((v11 & 1) == 0)
  {
    uint64_t v16 = *(void (**)(char *, uint64_t))(v5 + 8);
    v16(v8, v4);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v16)(v10, v4);
    goto LABEL_5;
  }

  char v13 = dispatch thunk of static Comparable.<= infix(_:_:)();
  unint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v14(v8, v4);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v14)(v10, v4);
  if ((v13 & 1) == 0) {
LABEL_5:
  }
    __break(1u);
  return result;
}

uint64_t specialized RegexRangesCollection.subscript.getter(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  __int128 v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  uint64_t v6 = v1;
  RegexMatchesCollection.subscript.getter((uint64_t *)v5, v7);
  uint64_t v3 = v7[3];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = MEMORY[0x186E17940]((char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t CanonicalSpecializedMetadata = swift_getCanonicalSpecializedMetadata();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(CanonicalSpecializedMetadata - 8) + 8LL))( a1,  CanonicalSpecializedMetadata);
  return a1;
}

unint64_t specialized Instruction.OpCode.init(rawValue:)(unint64_t result)
{
  if (result >= 0x1D) {
    return 29LL;
  }
  return result;
}

unint64_t specialized _CharacterClassModel.Representation.init(rawValue:)(unint64_t result)
{
  if (result >= 8) {
    return 8LL;
  }
  return result;
}

unint64_t specialized CaptureTransform.description.getter()
{
  v0._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._uint64_t countAndFlagsBits = 0x5F746C7573657220LL;
  v1._uint64_t object = (void *)0xED00003D65707974LL;
  String.append(_:)(v1);
  v2._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = 62LL;
  v3._uint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v3);
  return 0xD000000000000019LL;
}

uint64_t specialized DSLTree.CustomCharacterClass.AsciiBitset.init(_:_:_:)(uint64_t a1, char a2)
{
  return a2 & 1;
}

uint64_t specialized DSLTree.CustomCharacterClass.AsciiBitset.init(low:high:isInverted:isCaseInsensitive:)( uint64_t result, unsigned __int8 a2, char a3, char a4)
{
  if (a2 >= result)
  {
    uint64_t v5 = 0LL;
    uint64_t v6 = 0LL;
    unint64_t v7 = result;
    while (1)
    {
      int v8 = v7;
      if (v7 >= 0x40)
      {
        else {
          uint64_t v10 = 1LL << v7;
        }
        v5 |= v10;
        if ((a4 & 1) == 0) {
          goto LABEL_9;
        }
      }

      else
      {
        v6 |= 1LL << v7;
        if ((a4 & 1) == 0) {
          goto LABEL_9;
        }
      }

      uint64_t v9 = v5 | (1LL << (v7 + 32));
LABEL_9:
      if (a2 == v7) {
        return a3 & 1;
      }
      ++v7;
      if (v8 == 255)
      {
        __break(1u);
        break;
      }
    }
  }

  __break(1u);
  return result;
}

uint64_t specialized static QuantifyPayload.packInfoValues(_:_:_:_:isScalarSemantics:)( uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6)
{
  uint64_t v12 = type metadata accessor for AST.Quantification.Kind();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1895F8858](v12);
  uint64_t v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a1, v12);
  int v16 = (*(uint64_t (**)(char *, uint64_t))(v13 + 88))(v15, v12);
  uint64_t v17 = 0LL;
  if (v16 == *MEMORY[0x18961C388])
  {
LABEL_4:
    if ((a4 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }

  if (v16 == *MEMORY[0x18961C390])
  {
    uint64_t v17 = 0x10000LL;
    goto LABEL_4;
  }

  if (v16 == *MEMORY[0x18961C380])
  {
    uint64_t v17 = 0x20000LL;
    if ((a4 & 1) == 0)
    {
LABEL_5:
      if (a3 < 0)
      {
LABEL_15:
        __break(1u);
        goto LABEL_16;
      }

      uint64_t v18 = 2 * a3;
      if ((a6 & 1) == 0) {
        goto LABEL_7;
      }
      goto LABEL_11;
    }

uint64_t specialized _CharacterClassModel.init(cc:options:isInverted:)( unsigned __int8 a1, uint64_t a2, char a3)
{
  uint64_t v3 = *(void *)(a2 + 16);
  if (!v3)
  {
    __break(1u);
    JUMPOUT(0x182D7B198LL);
  }

  unsigned int v4 = *(_DWORD *)(a2 + 4 * v3 + 28);
  switch(a1)
  {
    case 2u:
      if ((a3 & 1) != 0) {
        int v5 = 0x1000000;
      }
      else {
        int v5 = 0;
      }
      int v6 = v4 & 0xC00;
      if ((v4 & 0xC00) != 0) {
        goto LABEL_7;
      }
      break;
    case 3u:
    case 4u:
    case 5u:
    case 6u:
      if ((a3 & 1) != 0) {
        int v5 = 0x1000000;
      }
      else {
        int v5 = 0;
      }
      int v6 = v4 & 0x1800;
      if ((v4 & 0x1800) != 0) {
        goto LABEL_7;
      }
      break;
    case 7u:
      if ((a3 & 1) != 0) {
        int v5 = 0x1000000;
      }
      else {
        int v5 = 0;
      }
      int v6 = v4 & 0x2800;
      if ((v4 & 0x2800) != 0) {
LABEL_7:
      }
        int v6 = 0x10000;
      break;
    default:
      int v6 = 0;
      if ((a3 & 1) != 0) {
        int v5 = 0x1000000;
      }
      else {
        int v5 = 0;
      }
      break;
  }

  return (a1 | ((HIWORD(v4) & 1) << 8)) ^ 0x100 | v5 | v6;
}

uint64_t specialized Collection.dropLast(_:)( uint64_t result, uint64_t a2, unint64_t a3, uint64_t (*a4)(uint64_t, unint64_t), uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t), uint64_t (*a6)(uint64_t, uint64_t, uint64_t, unint64_t))
{
  if (result < 0)
  {
    __break(1u);
    goto LABEL_18;
  }

  uint64_t v9 = result;
  uint64_t result = a4(a2, a3);
  if (__OFSUB__(result, v9))
  {
LABEL_18:
    __break(1u);
    return result;
  }

  if ((a3 & 0x2000000000000000LL) != 0) {
    uint64_t v10 = HIBYTE(a3) & 0xF;
  }
  else {
    uint64_t v10 = a2;
  }
  uint64_t v11 = 7LL;
  if (((a3 >> 60) & ((a2 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v11 = 11LL;
  }
  uint64_t v12 = a5(15LL, (result - v9) & ~((result - v9) >> 63), v11 | (v10 << 16), a2, a3);
  if ((a3 & 0x2000000000000000LL) != 0) {
    uint64_t v14 = HIBYTE(a3) & 0xF;
  }
  else {
    uint64_t v14 = a2;
  }
  uint64_t v15 = v14 << 16;
  uint64_t v16 = v15 | 0xB;
  uint64_t v17 = v15 | 7;
  if (((a3 >> 60) & ((a2 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v17 = v16;
  }
  if ((v13 & 1) != 0) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = v12;
  }
  return a6(15LL, v18, a2, a3);
}

uint64_t specialized Processor.Registers.init(_:_:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  unint64_t v4 = a1[15];
  uint64_t v5 = a1[18];
  unint64_t v16 = a1[17];
  uint64_t v6 = a1[1];
  uint64_t v7 = a1[2];
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  uint64_t v10 = a1[5];
  uint64_t v11 = a1[6];
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  outlined destroy of MEProgram((uint64_t)a1, type metadata accessor for MEProgram);
  swift_bridgeObjectRetain();
  uint64_t v12 = specialized Array.init(repeating:count:)(0LL, v4);
  uint64_t v18 = &type metadata for SentinelValue;
  swift_bridgeObjectRetain();
  uint64_t v13 = specialized Array.init(repeating:count:)((uint64_t)v17, v5);
  swift_bridgeObjectRetain();
  uint64_t v14 = specialized Array.init(repeating:count:)(15LL, v16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  uint64_t result = swift_bridgeObjectRelease_n();
  *a2 = v6;
  a2[1] = v7;
  a2[2] = v8;
  a2[3] = v9;
  a2[4] = v10;
  a2[5] = v11;
  a2[6] = v12;
  a2[7] = v13;
  a2[8] = v14;
  return result;
}

__n128 specialized Processor.init(program:input:subjectBounds:searchBounds:matchMode:isTracingEnabled:shouldMeasureMetrics:)@<Q0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>)
{
  uint64_t v29 = a5;
  uint64_t v30 = a7;
  char v15 = a8 & 1;
  uint64_t v16 = type metadata accessor for MEProgram(0LL);
  MEMORY[0x1895F8858](v16);
  uint64_t v18 = (uint64_t *)((char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  char v37 = 1;
  uint64_t v19 = *a1;
  outlined init with copy of MEProgram((uint64_t)a1, (uint64_t)v18, v20);
  swift_bridgeObjectRetain();
  specialized Processor.Registers.init(_:_:)(v18, v38);
  __int128 v31 = 0uLL;
  char v32 = 1;
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  uint64_t v35 = 0LL;
  char v36 = 1;
  uint64_t v21 = specialized Array.init(repeating:count:)(&v31, a1[23]);
  outlined destroy of MEProgram((uint64_t)a1, type metadata accessor for MEProgram);
  unsigned __int8 v22 = v37;
  *(void *)a9 = a2;
  *(void *)(a9 + 8) = a3;
  uint64_t v23 = v29;
  *(void *)(a9 + 16) = a4;
  *(void *)(a9 + 24) = v23;
  uint64_t v24 = v30;
  *(void *)(a9 + 32) = a6;
  *(void *)(a9 + 40) = v24;
  *(_BYTE *)(a9 + 48) = v15;
  *(void *)(a9 + 56) = v19;
  *(void *)(a9 + 64) = a6;
  *(void *)(a9 + 72) = 0LL;
  __int128 v25 = v38[3];
  *(_OWORD *)(a9 + 112) = v38[2];
  *(_OWORD *)(a9 + 128) = v25;
  uint64_t v26 = v39;
  __n128 result = (__n128)v38[1];
  *(_OWORD *)(a9 + 80) = v38[0];
  *(__n128 *)(a9 + 96) = result;
  uint64_t v28 = MEMORY[0x18961AFE8];
  *(void *)(a9 + 144) = v26;
  *(void *)(a9 + 152) = v28;
  *(void *)(a9 + 160) = v28;
  *(void *)(a9 + 168) = v21;
  *(void *)(a9 + 176) = 0LL;
  *(void *)(a9 + 184) = 0LL;
  *(_WORD *)(a9 + 192) = v22;
  *(void *)(a9 + 200) = 0LL;
  return result;
}

unint64_t specialized Array.replaceSubrange<A>(_:with:)(unint64_t result, int64_t a2)
{
  if ((result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_22;
  }

  unint64_t v4 = *v2;
  int64_t v5 = *(void *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  unint64_t v6 = result;
  unint64_t v7 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  unint64_t v8 = result - a2;
  if (__OFSUB__(0LL, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }

  __n128 result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v9 <= *(void *)(v4 + 24) >> 1)
  {
    if (!v8) {
      goto LABEL_20;
    }
  }

  else
  {
    if (v5 <= v9) {
      int64_t v10 = v5 + v8;
    }
    else {
      int64_t v10 = v5;
    }
    __n128 result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)result,  v10,  1,  (char *)v4,  &demangling cache variable for type metadata for _ContiguousArrayStorage<TypedInt<_InstructionAddress>>);
    unint64_t v4 = result;
    if (!v8) {
      goto LABEL_20;
    }
  }

  uint64_t v11 = *(void *)(v4 + 16);
  BOOL v12 = __OFSUB__(v11, a2);
  uint64_t v13 = v11 - a2;
  if (v12) {
    goto LABEL_26;
  }
  __n128 result = v4 + 32 + 8 * v6;
  uint64_t v14 = (const void *)(v4 + 32 + 8 * a2);
  uint64_t v15 = *(void *)(v4 + 16);
  BOOL v12 = __OFADD__(v15, v8);
  uint64_t v16 = v15 + v8;
  if (!v12)
  {
    *(void *)(v4 + 16) = v16;
LABEL_20:
    *Swift::String v2 = v4;
    return result;
  }

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t result, int64_t a2)
{
  if (result < 0)
  {
    __break(1u);
    goto LABEL_21;
  }

  unint64_t v4 = *v2;
  int64_t v5 = *((void *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  uint64_t v6 = result;
  int64_t v7 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  uint64_t v8 = result - a2;
  if (__OFSUB__(0LL, v7))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > *((void *)v4 + 3) >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    unint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( isUniquelyReferenced_nonNull_native,  v11,  1,  v4);
  }

  __n128 result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_19;
  }
  uint64_t v12 = *((void *)v4 + 2);
  BOOL v13 = __OFSUB__(v12, a2);
  uint64_t v14 = v12 - a2;
  if (v13) {
    goto LABEL_25;
  }
  uint64_t v15 = &v4[80 * a2 + 32];
  if (v6 != a2 || &v4[80 * v6 + 32] >= &v15[80 * v14]) {
    __n128 result = (uint64_t)memmove(&v4[80 * v6 + 32], v15, 80 * v14);
  }
  uint64_t v16 = *((void *)v4 + 2);
  BOOL v13 = __OFADD__(v16, v8);
  uint64_t v17 = v16 - v7;
  if (!v13)
  {
    *((void *)v4 + 2) = v17;
LABEL_19:
    *Swift::String v2 = v4;
    return result;
  }

uint64_t specialized Collection._failEarlyRangeCheck(_:bounds:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t), uint64_t (*a6)(char *, char *, uint64_t, uint64_t))
{
  uint64_t v23 = a6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v11 = a5(0LL, AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x1895F8858](v11);
  uint64_t v15 = (char *)&v22 - v14;
  uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](v13);
  uint64_t v18 = (char *)&v22 - v17;
  char v19 = dispatch thunk of static Comparable.<= infix(_:_:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a2, v11);
  if ((v19 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, AssociatedTypeWitness);
    goto LABEL_5;
  }

  char v20 = v23(v18, &v15[*(int *)(v11 + 36)], AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, AssociatedTypeWitness);
  if ((v20 & 1) == 0) {
LABEL_5:
  }
    __break(1u);
  return result;
}

unint64_t specialized Collection.dropFirst(_:)( unint64_t result, uint64_t a2, unint64_t a3, uint64_t (*a4)(uint64_t, unint64_t, unint64_t, uint64_t, unint64_t), uint64_t (*a5)(void))
{
  if ((result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else
  {
    if ((a3 & 0x2000000000000000LL) != 0) {
      uint64_t v5 = HIBYTE(a3) & 0xF;
    }
    else {
      uint64_t v5 = a2 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v6 = 7LL;
    if (((a3 >> 60) & ((a2 & 0x800000000000000LL) == 0)) != 0) {
      uint64_t v6 = 11LL;
    }
    unint64_t v7 = v6 | (v5 << 16);
    uint64_t result = a4(15LL, result, v7, a2, a3);
    if ((v8 & 1) != 0) {
      uint64_t result = v7;
    }
    if (4 * v5 >= result >> 14) {
      return a5();
    }
  }

  __break(1u);
  return result;
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = result;
  LODWORD(result) = 0;
  uint64_t v3 = (int *)(v2 + 32);
  do
  {
    int v5 = *v3++;
    int v4 = v5;
    if ((v5 & ~(_DWORD)result) == 0) {
      int v4 = 0;
    }
    uint64_t result = v4 | result;
    --v1;
  }

  while (v1);
  return result;
}

uint64_t specialized QuantifyPayload.PayloadType.init(rawValue:)(unint64_t a1)
{
  if (a1 >= 5) {
    return 4LL;
  }
  else {
    return (0x304020100uLL >> (8 * a1));
  }
}

uint64_t specialized LiteralPrinter.prepareQuotedLiteral(_:)(Swift::String a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (v2)
  {
    uint64_t object = a1._object;
    uint64_t countAndFlagsBits = a1._countAndFlagsBits;
    if ((*(_DWORD *)(a2 + 4 * v2 + 28) & 0x300000) != 0
      || (String.containsRegexMetaCharacters.getter(a1._countAndFlagsBits, (unint64_t)a1._object) & 1) != 0)
    {
      v5._uint64_t countAndFlagsBits = countAndFlagsBits;
      v5._uint64_t object = object;
      String.append(_:)(v5);
      v6._uint64_t countAndFlagsBits = 17756LL;
      v6._uint64_t object = (void *)0xE200000000000000LL;
      String.append(_:)(v6);
      uint64_t v7 = 20828LL;
    }

    else
    {
      swift_getCanonicalSpecializedMetadata();
      swift_getCanonicalSpecializedMetadata();
      lazy protocol witness table accessor for type LazyMapSequence<String, String> and conformance <> LazyMapSequence<A, B>();
      swift_bridgeObjectRetain();
      uint64_t v7 = BidirectionalCollection<>.joined(separator:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }

    a1._uint64_t countAndFlagsBits = v7;
  }

  else
  {
    __break(1u);
  }

  return a1._countAndFlagsBits;
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t outlined init with copy of AnyRegexOutput.ElementRepresentation(uint64_t a1, uint64_t a2)
{
  return initializeWithCopy for AnyRegexOutput.ElementRepresentation(a2, a1);
}

uint64_t outlined destroy of AnyRegexOutput.Element(uint64_t a1)
{
  return a1;
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t outlined destroy of AnyRegexOutput.ElementRepresentation(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t CanonicalSpecializedMetadata = swift_getCanonicalSpecializedMetadata();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(CanonicalSpecializedMetadata - 8) + 16LL))( a2,  a1,  CanonicalSpecializedMetadata);
  return a2;
}

void *__swift_project_boxed_opaque_existential_0(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) + 16LL) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80LL)));
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8LL);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

unint64_t lazy protocol witness table accessor for type RegexCompilationError and conformance RegexCompilationError()
{
  unint64_t result = lazy protocol witness table cache variable for type RegexCompilationError and conformance RegexCompilationError;
  if (!lazy protocol witness table cache variable for type RegexCompilationError and conformance RegexCompilationError)
  {
    unint64_t result = MEMORY[0x186E17958]( &protocol conformance descriptor for RegexCompilationError,  &type metadata for RegexCompilationError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RegexCompilationError and conformance RegexCompilationError);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type RegexCompilationError and conformance RegexCompilationError;
  if (!lazy protocol witness table cache variable for type RegexCompilationError and conformance RegexCompilationError)
  {
    unint64_t result = MEMORY[0x186E17958]( &protocol conformance descriptor for RegexCompilationError,  &type metadata for RegexCompilationError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RegexCompilationError and conformance RegexCompilationError);
  }

  return result;
}

uint64_t type metadata accessor for MEProgram(uint64_t a1)
{
  return type metadata accessor for MEProgram( a1,  (uint64_t *)&type metadata singleton initialization cache for MEProgram);
}

uint64_t type metadata accessor for Compiler()
{
  return objc_opt_self();
}

uint64_t sub_182D7BDA4()
{
  return swift_deallocObject();
}

uint64_t sub_182D7BDC8()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in CustomConsumingRegexComponent.regex.getter@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = *(unsigned __int8 *)(*(void *)(v7 - 8) + 80LL);
  return closure #1 in CustomConsumingRegexComponent.regex.getter( a1,  a2,  a3,  a4,  a5,  v6 + ((v8 + 32) & ~v8),  v7,  *(void *)(v6 + 24),  a6);
}

uint64_t type metadata accessor for DSLTree.CustomCharacterClass.Member(uint64_t a1)
{
  return type metadata accessor for MEProgram( a1,  (uint64_t *)&type metadata singleton initialization cache for DSLTree.CustomCharacterClass.Member);
}

uint64_t type metadata accessor for DSLTree.Atom(uint64_t a1)
{
  return type metadata accessor for MEProgram( a1,  (uint64_t *)&type metadata singleton initialization cache for DSLTree.Atom);
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = MEMORY[0x186E1794C](255LL, (char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

void specialized static DSLTree.Node.repeating(_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Source.Location();
  MEMORY[0x1895F8858](v6);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DSLTree.QuantificationKind?);
  MEMORY[0x1895F8858](v7);
  uint64_t v8 = type metadata accessor for DSLTree.QuantificationKind(0LL);
  MEMORY[0x1895F8858](v8);
  if ((a1 & 0x8000000000000000LL) == 0 && a1 != a2) {
    __asm { BR              X10 }
  }

  __break(1u);
  JUMPOUT(0x182D7C360LL);
}

uint64_t sub_182D7C374()
{
  return swift_deallocObject();
}

uint64_t sub_182D7C3A0()
{
  return swift_deallocObject();
}

uint64_t type metadata accessor for DSLTree.QuantificationKind(uint64_t a1)
{
  return type metadata accessor for MEProgram( a1,  (uint64_t *)&type metadata singleton initialization cache for DSLTree.QuantificationKind);
}

uint64_t sub_182D7C3D8()
{
  if (*(void *)(v0 + 56)) {
    outlined consume of CaptureTransform.Closure(*(void *)(v0 + 72), *(void *)(v0 + 80), *(_BYTE *)(v0 + 88));
  }
  return swift_deallocObject();
}

uint64_t outlined consume of CaptureTransform.Closure(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 3u) {
    return swift_release();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _CompileOptions and conformance _CompileOptions()
{
  unint64_t result = lazy protocol witness table cache variable for type _CompileOptions and conformance _CompileOptions;
  if (!lazy protocol witness table cache variable for type _CompileOptions and conformance _CompileOptions)
  {
    unint64_t result = MEMORY[0x186E17958]( &protocol conformance descriptor for _CompileOptions,  &type metadata for _CompileOptions);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type _CompileOptions and conformance _CompileOptions);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type _CompileOptions and conformance _CompileOptions;
  if (!lazy protocol witness table cache variable for type _CompileOptions and conformance _CompileOptions)
  {
    unint64_t result = MEMORY[0x186E17958]( &protocol conformance descriptor for _CompileOptions,  &type metadata for _CompileOptions);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type _CompileOptions and conformance _CompileOptions);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type _CompileOptions and conformance _CompileOptions;
  if (!lazy protocol witness table cache variable for type _CompileOptions and conformance _CompileOptions)
  {
    unint64_t result = MEMORY[0x186E17958]( &protocol conformance descriptor for _CompileOptions,  &type metadata for _CompileOptions);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type _CompileOptions and conformance _CompileOptions);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type _CompileOptions and conformance _CompileOptions;
  if (!lazy protocol witness table cache variable for type _CompileOptions and conformance _CompileOptions)
  {
    unint64_t result = MEMORY[0x186E17958]( &protocol conformance descriptor for _CompileOptions,  &type metadata for _CompileOptions);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type _CompileOptions and conformance _CompileOptions);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type AnyRegexOutput and conformance AnyRegexOutput()
{
  unint64_t result = lazy protocol witness table cache variable for type AnyRegexOutput and conformance AnyRegexOutput;
  if (!lazy protocol witness table cache variable for type AnyRegexOutput and conformance AnyRegexOutput)
  {
    unint64_t result = MEMORY[0x186E17958](&protocol conformance descriptor for AnyRegexOutput, &type metadata for AnyRegexOutput);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AnyRegexOutput and conformance AnyRegexOutput);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AnyRegexOutput and conformance AnyRegexOutput;
  if (!lazy protocol witness table cache variable for type AnyRegexOutput and conformance AnyRegexOutput)
  {
    unint64_t result = MEMORY[0x186E17958](&protocol conformance descriptor for AnyRegexOutput, &type metadata for AnyRegexOutput);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AnyRegexOutput and conformance AnyRegexOutput);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AnyRegexOutput and conformance AnyRegexOutput;
  if (!lazy protocol witness table cache variable for type AnyRegexOutput and conformance AnyRegexOutput)
  {
    unint64_t result = MEMORY[0x186E17958](&protocol conformance descriptor for AnyRegexOutput, &type metadata for AnyRegexOutput);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AnyRegexOutput and conformance AnyRegexOutput);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AnyRegexOutput and conformance AnyRegexOutput;
  if (!lazy protocol witness table cache variable for type AnyRegexOutput and conformance AnyRegexOutput)
  {
    unint64_t result = MEMORY[0x186E17958](&protocol conformance descriptor for AnyRegexOutput, &type metadata for AnyRegexOutput);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AnyRegexOutput and conformance AnyRegexOutput);
  }

  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : RandomAccessCollection in AnyRegexOutput()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>( &lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>,  MEMORY[0x189618A58]);
}

unint64_t lazy protocol witness table accessor for type Int and conformance Int()
{
  unint64_t result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    unint64_t result = MEMORY[0x186E17958](MEMORY[0x189618768], MEMORY[0x189618740]);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }

  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in AnyRegexOutput()
{
  return lazy protocol witness table accessor for type Slice<AnyRegexOutput> and conformance <> Slice<A>( &lazy protocol witness table cache variable for type Slice<AnyRegexOutput> and conformance <> Slice<A>,  (uint64_t (*)(void))lazy protocol witness table accessor for type AnyRegexOutput and conformance AnyRegexOutput,  MEMORY[0x18961A5E0]);
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in AnyRegexOutput()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>( &lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>,  MEMORY[0x189618A40]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in AnyRegexOutput()
{
  return lazy protocol witness table accessor for type Slice<AnyRegexOutput> and conformance <> Slice<A>( &lazy protocol witness table cache variable for type Slice<AnyRegexOutput> and conformance <> Slice<A>,  (uint64_t (*)(void))lazy protocol witness table accessor for type AnyRegexOutput and conformance AnyRegexOutput,  MEMORY[0x18961A5C8]);
}

uint64_t lazy protocol witness table accessor for type Slice<AnyRegexOutput> and conformance <> Slice<A>( unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Slice<AnyRegexOutput>);
    uint64_t v8 = a2();
    uint64_t result = MEMORY[0x186E17958](a3, v7, &v8);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t associated type witness table accessor for Collection.Index : Comparable in AnyRegexOutput()
{
  return MEMORY[0x189618758];
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in AnyRegexOutput()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>( &lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>,  MEMORY[0x189618A60]);
}

uint64_t lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>( unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t CanonicalSpecializedMetadata = swift_getCanonicalSpecializedMetadata();
    unint64_t v6 = lazy protocol witness table accessor for type Int and conformance Int();
    v7[0] = MEMORY[0x189618780];
    v7[1] = v6;
    uint64_t result = MEMORY[0x186E17958](a2, CanonicalSpecializedMetadata, v7);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in AnyRegexOutput()
{
  return lazy protocol witness table accessor for type [Any.Type] and conformance [A]( &lazy protocol witness table cache variable for type Slice<AnyRegexOutput> and conformance Slice<A>,  &demangling cache variable for type metadata for Slice<AnyRegexOutput>,  MEMORY[0x18961A5E8]);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in AnyRegexOutput()
{
  return lazy protocol witness table accessor for type [Any.Type] and conformance [A]( &lazy protocol witness table cache variable for type IndexingIterator<AnyRegexOutput> and conformance IndexingIterator<A>,  &demangling cache variable for type metadata for IndexingIterator<AnyRegexOutput>,  MEMORY[0x189619678]);
}

unint64_t lazy protocol witness table accessor for type DSLTree.Atom.Assertion and conformance DSLTree.Atom.Assertion()
{
  unint64_t result = lazy protocol witness table cache variable for type DSLTree.Atom.Assertion and conformance DSLTree.Atom.Assertion;
  if (!lazy protocol witness table cache variable for type DSLTree.Atom.Assertion and conformance DSLTree.Atom.Assertion)
  {
    unint64_t result = MEMORY[0x186E17958]( &protocol conformance descriptor for DSLTree.Atom.Assertion,  &type metadata for DSLTree.Atom.Assertion);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type DSLTree.Atom.Assertion and conformance DSLTree.Atom.Assertion);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type DSLTree.Atom.CharacterClass and conformance DSLTree.Atom.CharacterClass()
{
  unint64_t result = lazy protocol witness table cache variable for type DSLTree.Atom.CharacterClass and conformance DSLTree.Atom.CharacterClass;
  if (!lazy protocol witness table cache variable for type DSLTree.Atom.CharacterClass and conformance DSLTree.Atom.CharacterClass)
  {
    unint64_t result = MEMORY[0x186E17958]( &protocol conformance descriptor for DSLTree.Atom.CharacterClass,  &type metadata for DSLTree.Atom.CharacterClass);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type DSLTree.Atom.CharacterClass and conformance DSLTree.Atom.CharacterClass);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type ReferenceID and conformance ReferenceID()
{
  unint64_t result = lazy protocol witness table cache variable for type ReferenceID and conformance ReferenceID;
  if (!lazy protocol witness table cache variable for type ReferenceID and conformance ReferenceID)
  {
    unint64_t result = MEMORY[0x186E17958](&protocol conformance descriptor for ReferenceID, &type metadata for ReferenceID);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ReferenceID and conformance ReferenceID);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type RegexSemanticLevel and conformance RegexSemanticLevel()
{
  unint64_t result = lazy protocol witness table cache variable for type RegexSemanticLevel and conformance RegexSemanticLevel;
  if (!lazy protocol witness table cache variable for type RegexSemanticLevel and conformance RegexSemanticLevel)
  {
    unint64_t result = MEMORY[0x186E17958]( &protocol conformance descriptor for RegexSemanticLevel,  &type metadata for RegexSemanticLevel);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RegexSemanticLevel and conformance RegexSemanticLevel);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type RegexWordBoundaryKind and conformance RegexWordBoundaryKind()
{
  unint64_t result = lazy protocol witness table cache variable for type RegexWordBoundaryKind and conformance RegexWordBoundaryKind;
  if (!lazy protocol witness table cache variable for type RegexWordBoundaryKind and conformance RegexWordBoundaryKind)
  {
    unint64_t result = MEMORY[0x186E17958]( &protocol conformance descriptor for RegexWordBoundaryKind,  &type metadata for RegexWordBoundaryKind);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RegexWordBoundaryKind and conformance RegexWordBoundaryKind);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type RegexRepetitionBehavior and conformance RegexRepetitionBehavior()
{
  unint64_t result = lazy protocol witness table cache variable for type RegexRepetitionBehavior and conformance RegexRepetitionBehavior;
  if (!lazy protocol witness table cache variable for type RegexRepetitionBehavior and conformance RegexRepetitionBehavior)
  {
    unint64_t result = MEMORY[0x186E17958]( &protocol conformance descriptor for RegexRepetitionBehavior,  &type metadata for RegexRepetitionBehavior);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RegexRepetitionBehavior and conformance RegexRepetitionBehavior);
  }

  return result;
}

ValueMetadata *type metadata accessor for _CompileOptions()
{
  return &type metadata for _CompileOptions;
}

void *initializeBufferWithCopyOfBuffer for AnyRegexOutput(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for AnyRegexOutput(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for AnyRegexOutput(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AnyRegexOutput(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(specialized Compiler.ByteCodeGen.emitAlternationGen<A>(_:withBacktracking:_:)(*(void *)(v3 + 16), v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AnyRegexOutput(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AnyRegexOutput()
{
  return &type metadata for AnyRegexOutput;
}

uint64_t destroy for AnyRegexOutput.Element(uint64_t a1)
{
  if (*(void *)(a1 + 48) >= 2uLL) {
    __swift_destroy_boxed_opaque_existential_0(a1 + 24);
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AnyRegexOutput.Element(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  int v4 = (_OWORD *)(a1 + 8);
  Swift::String v5 = (_OWORD *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 48);
  if (v6 == 1)
  {
    __int128 v7 = *(_OWORD *)(a2 + 24);
    *int v4 = *v5;
    *(_OWORD *)(a1 + 24) = v7;
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  }

  else
  {
    *int v4 = *v5;
    uint64_t v8 = (_OWORD *)(a1 + 24);
    int64_t v9 = (_OWORD *)(a2 + 24);
    if (v6)
    {
      *(void *)(a1 + 48) = v6;
      (**(void (***)(_OWORD *, _OWORD *))(v6 - 8))(v8, v9);
    }

    else
    {
      __int128 v10 = *(_OWORD *)(a2 + 40);
      *uint64_t v8 = *v9;
      *(_OWORD *)(a1 + 40) = v10;
    }
  }

  uint64_t v11 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  uint64_t v12 = *(void *)(a2 + 88);
  uint64_t v13 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = v12;
  *(void *)(a1 + 96) = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AnyRegexOutput.Element(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  int v4 = (__int128 *)(a1 + 8);
  Swift::String v5 = (__int128 *)(a2 + 8);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(a2 + 48);
  if (v6 == 1)
  {
    if (v7 == 1)
    {
      __int128 v8 = *v5;
      __int128 v9 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
LABEL_16:
      *int v4 = v8;
      v4[1] = v9;
      goto LABEL_17;
    }

    *int v4 = *v5;
    uint64_t v12 = (_OWORD *)(a1 + 24);
    uint64_t v13 = (_OWORD *)(a2 + 24);
    uint64_t v14 = *(void *)(a2 + 48);
    if (v14)
    {
      *(void *)(a1 + 48) = v14;
      (**(void (***)(_OWORD *, _OWORD *))(v14 - 8))(v12, v13);
    }

    else
    {
      __int128 v17 = *(_OWORD *)(a2 + 40);
      *uint64_t v12 = *v13;
      *(_OWORD *)(a1 + 40) = v17;
    }
  }

  else
  {
    if (v7 != 1)
    {
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      int v4 = (__int128 *)(a1 + 24);
      uint64_t v15 = (__int128 *)(a2 + 24);
      uint64_t v16 = *(void *)(a2 + 48);
      if (v6)
      {
        if (v16)
        {
          __swift_assign_boxed_opaque_existential_0((uint64_t *)(a1 + 24), (uint64_t *)(a2 + 24));
          goto LABEL_17;
        }

        __swift_destroy_boxed_opaque_existential_0(a1 + 24);
      }

      else if (v16)
      {
        *(void *)(a1 + 48) = v16;
        (**(void (***)(uint64_t, uint64_t))(v16 - 8))(a1 + 24, a2 + 24);
        goto LABEL_17;
      }

      __int128 v8 = *v15;
      __int128 v9 = *(_OWORD *)(a2 + 40);
      goto LABEL_16;
    }

    outlined destroy of (range: Range<String.Index>, value: Any?)?( a1 + 8,  &demangling cache variable for type metadata for (range: Range<String.Index>, value: Any?));
    __int128 v11 = v5[1];
    __int128 v10 = v5[2];
    *int v4 = *v5;
    v4[1] = v11;
    v4[2] = v10;
  }

uint64_t *__swift_assign_boxed_opaque_existential_0(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v9 = *(void *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        uint64_t v10 = *a2;
        swift_retain();
        __n128 result = (uint64_t *)swift_release();
        *uint64_t v3 = v10;
      }

      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }

    else
    {
      result[3] = v5;
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      int v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *__n128 result = *a2;
          swift_retain();
        }

        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }

        return (uint64_t *)swift_release();
      }

      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *uint64_t v3 = *a2;
          swift_retain();
        }

        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }

        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }

  return result;
}

__n128 __swift_memcpy104_8(uint64_t a1, __int128 *a2)
{
  __int128 v2 = *a2;
  __int128 v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  __int128 v5 = a2[4];
  __int128 v6 = a2[5];
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for AnyRegexOutput.Element(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (_OWORD *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  __int128 v5 = (_OWORD *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6 == 1) {
    goto LABEL_4;
  }
  if (*(void *)(a2 + 48) == 1LL)
  {
    outlined destroy of (range: Range<String.Index>, value: Any?)?( a1 + 8,  &demangling cache variable for type metadata for (range: Range<String.Index>, value: Any?));
LABEL_4:
    __int128 v7 = v4[1];
    *__int128 v5 = *v4;
    v5[1] = v7;
    _OWORD v5[2] = v4[2];
    goto LABEL_8;
  }

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  int v8 = (_OWORD *)(a1 + 24);
  uint64_t v9 = (_OWORD *)(a2 + 24);
  if (v6) {
    __swift_destroy_boxed_opaque_existential_0(a1 + 24);
  }
  __int128 v10 = *(_OWORD *)(a2 + 40);
  *int v8 = *v9;
  *(_OWORD *)(a1 + 40) = v10;
LABEL_8:
  uint64_t v11 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v11;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
  uint64_t v12 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v12;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AnyRegexOutput.Element(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 104)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 96);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(specialized Compiler.ByteCodeGen.emitAlternationGen<A>(_:withBacktracking:_:)(*(void *)(v3 + 16), v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AnyRegexOutput.Element(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 104) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 96) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 104) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AnyRegexOutput.Element()
{
  return &type metadata for AnyRegexOutput.Element;
}

uint64_t dispatch thunk of RegexComponent.regex.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t type metadata instantiation function for Regex()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata completion function for Regex.Program()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for Regex.Program(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Regex.Program);
}

uint64_t type metadata completion function for Regex.Program.ProgramBox()
{
  uint64_t result = type metadata accessor for MEProgram(319LL);
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t type metadata accessor for Regex.Program.ProgramBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for Regex.Program.ProgramBox);
}

uint64_t type metadata instantiation function for Regex._RegexInternalAction()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for Regex._RegexInternalAction(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for Regex._RegexInternalAction(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)uint64_t result = 0LL;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)uint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 9) = v3;
  return result;
}

uint64_t getEnumTag for Regex._RegexInternalAction(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t destructiveInjectEnumTag for Regex._RegexInternalAction(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)uint64_t result = (a2 - 1);
    *(_BYTE *)(result + 8) = 1;
  }

  else
  {
    *(_BYTE *)(result + 8) = 0;
  }

  return result;
}

uint64_t type metadata accessor for Regex._RegexInternalAction( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for Regex._RegexInternalAction);
}

uint64_t dispatch thunk of CustomConsumingRegexComponent.consuming(_:startingAt:in:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 16))();
}

void *__swift_memcpy8_8(void *result, void *a2)
{
  *uint64_t result = *a2;
  return result;
}

ValueMetadata *type metadata accessor for DSLTree()
{
  return &type metadata for DSLTree;
}

uint64_t initializeBufferWithCopyOfBuffer for DSLTree.CustomCharacterClass(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DSLTree.CustomCharacterClass(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for DSLTree.CustomCharacterClass(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for DSLTree.CustomCharacterClass(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 9)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DSLTree.CustomCharacterClass(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 8) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 9) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 9) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for DSLTree.CustomCharacterClass()
{
  return &type metadata for DSLTree.CustomCharacterClass;
}

uint64_t initializeBufferWithCopyOfBuffer for DSLTree.CustomCharacterClass.Member( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) == 0)
  {
    __int128 v5 = (char *)&loc_182D7D528 + 4 * byte_182D9CF07[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }

  uint64_t v6 = *a2;
  *a1 = *a2;
  uint64_t v7 = v6 + ((v4 + 16LL) & ~(unint64_t)v4);
  swift_retain();
  return v7;
}

uint64_t destroy for DSLTree.CustomCharacterClass.Member(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      type metadata accessor for DSLTree.Atom(0LL);
      uint64_t result = swift_getEnumCaseMultiPayload();
      switch((int)result)
      {
        case 0:
          goto LABEL_11;
        case 4:
          goto LABEL_12;
        case 6:
          goto LABEL_13;
        case 7:
          goto LABEL_14;
        default:
          return result;
      }

    case 1:
      type metadata accessor for DSLTree.Atom(0LL);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          swift_bridgeObjectRelease();
          break;
        case 4u:
          uint64_t v3 = type metadata accessor for AST.Reference();
          goto LABEL_9;
        case 6u:
          uint64_t v3 = type metadata accessor for AST.MatchingOptionSequence();
          goto LABEL_9;
        case 7u:
          uint64_t v3 = type metadata accessor for AST.Atom();
LABEL_9:
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
          break;
        default:
          break;
      }

      uint64_t result = swift_getEnumCaseMultiPayload();
      switch((int)result)
      {
        case 0:
          goto LABEL_11;
        case 4:
LABEL_12:
          uint64_t v4 = type metadata accessor for AST.Reference();
          goto LABEL_15;
        case 6:
LABEL_13:
          uint64_t v4 = type metadata accessor for AST.MatchingOptionSequence();
          goto LABEL_15;
        case 7:
LABEL_14:
          uint64_t v4 = type metadata accessor for AST.Atom();
LABEL_15:
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
          break;
        default:
          return result;
      }

      break;
    case 2:
    case 3:
    case 4:
LABEL_11:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    case 5:
    case 6:
    case 7:
      uint64_t result = swift_release();
      break;
    default:
      return result;
  }

  return result;
}

void initializeWithCopy for DSLTree.CustomCharacterClass.Member()
{
  uint64_t v0 = (char *)sub_182D7DB24 + 4 * byte_182D9CF47[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }

void *sub_182D7DB24()
{
  uint64_t v2 = type metadata accessor for DSLTree.Atom(0LL);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v3 = v1[1];
      void *v0 = *v1;
      v0[1] = v3;
      swift_bridgeObjectRetain();
      goto LABEL_7;
    case 4u:
      uint64_t v4 = type metadata accessor for AST.Reference();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v4 - 8) + 16LL))(v0, v1, v4);
      goto LABEL_7;
    case 6u:
      uint64_t v5 = type metadata accessor for AST.MatchingOptionSequence();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v5 - 8) + 16LL))(v0, v1, v5);
      goto LABEL_7;
    case 7u:
      uint64_t v6 = type metadata accessor for AST.Atom();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v0, v1, v6);
LABEL_7:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(v0, v1, *(void *)(*(void *)(v2 - 8) + 64LL));
      break;
  }

  swift_storeEnumTagMultiPayload();
  return v0;
}

uint64_t assignWithCopy for DSLTree.CustomCharacterClass.Member(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    outlined destroy of MEProgram(result, type metadata accessor for DSLTree.CustomCharacterClass.Member);
    uint64_t v2 = (char *)&loc_182D7DF78 + 4 * byte_182D9CF67[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }

  return result;
}

uint64_t outlined destroy of MEProgram(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

char *initializeWithTake for DSLTree.CustomCharacterClass.Member(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v10 = type metadata accessor for DSLTree.Atom(0LL);
    int v11 = swift_getEnumCaseMultiPayload();
    switch(v11)
    {
      case 7:
        uint64_t v15 = type metadata accessor for AST.Atom();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32LL))(a1, a2, v15);
        swift_storeEnumTagMultiPayload();
        break;
      case 6:
        uint64_t v16 = type metadata accessor for AST.MatchingOptionSequence();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32LL))(a1, a2, v16);
        swift_storeEnumTagMultiPayload();
        break;
      case 4:
        uint64_t v12 = type metadata accessor for AST.Reference();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32LL))(a1, a2, v12);
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
        break;
    }

    uint64_t v18 = &a1[v17];
    char v19 = &a2[v17];
    int v20 = swift_getEnumCaseMultiPayload();
    switch(v20)
    {
      case 7:
        uint64_t v22 = type metadata accessor for AST.Atom();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 32LL))(v18, v19, v22);
        swift_storeEnumTagMultiPayload();
        break;
      case 6:
        uint64_t v23 = type metadata accessor for AST.MatchingOptionSequence();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 32LL))(v18, v19, v23);
        swift_storeEnumTagMultiPayload();
        break;
      case 4:
        uint64_t v21 = type metadata accessor for AST.Reference();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 32LL))(v18, v19, v21);
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v18, v19, *(void *)(*(void *)(v10 - 8) + 64LL));
        break;
    }

    goto LABEL_26;
  }

  if (!EnumCaseMultiPayload)
  {
    uint64_t v7 = type metadata accessor for DSLTree.Atom(0LL);
    int v8 = swift_getEnumCaseMultiPayload();
    switch(v8)
    {
      case 7:
        uint64_t v13 = type metadata accessor for AST.Atom();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32LL))(a1, a2, v13);
        swift_storeEnumTagMultiPayload();
        break;
      case 6:
        uint64_t v14 = type metadata accessor for AST.MatchingOptionSequence();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32LL))(a1, a2, v14);
        swift_storeEnumTagMultiPayload();
        break;
      case 4:
        uint64_t v9 = type metadata accessor for AST.Reference();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(a1, a2, v9);
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
        break;
    }

char *assignWithTake for DSLTree.CustomCharacterClass.Member(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of MEProgram((uint64_t)a1, type metadata accessor for DSLTree.CustomCharacterClass.Member);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v10 = type metadata accessor for DSLTree.Atom(0LL);
      int v11 = swift_getEnumCaseMultiPayload();
      switch(v11)
      {
        case 7:
          uint64_t v15 = type metadata accessor for AST.Atom();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32LL))(a1, a2, v15);
          swift_storeEnumTagMultiPayload();
          break;
        case 6:
          uint64_t v16 = type metadata accessor for AST.MatchingOptionSequence();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32LL))(a1, a2, v16);
          swift_storeEnumTagMultiPayload();
          break;
        case 4:
          uint64_t v12 = type metadata accessor for AST.Reference();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32LL))(a1, a2, v12);
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
          break;
      }

      uint64_t v18 = &a1[v17];
      char v19 = &a2[v17];
      int v20 = swift_getEnumCaseMultiPayload();
      switch(v20)
      {
        case 7:
          uint64_t v22 = type metadata accessor for AST.Atom();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 32LL))(v18, v19, v22);
          swift_storeEnumTagMultiPayload();
          break;
        case 6:
          uint64_t v23 = type metadata accessor for AST.MatchingOptionSequence();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 32LL))(v18, v19, v23);
          swift_storeEnumTagMultiPayload();
          break;
        case 4:
          uint64_t v21 = type metadata accessor for AST.Reference();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 32LL))(v18, v19, v21);
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(v18, v19, *(void *)(*(void *)(v10 - 8) + 64LL));
          break;
      }

      goto LABEL_27;
    }

    if (!EnumCaseMultiPayload)
    {
      uint64_t v7 = type metadata accessor for DSLTree.Atom(0LL);
      int v8 = swift_getEnumCaseMultiPayload();
      switch(v8)
      {
        case 7:
          uint64_t v13 = type metadata accessor for AST.Atom();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32LL))(a1, a2, v13);
          swift_storeEnumTagMultiPayload();
          break;
        case 6:
          uint64_t v14 = type metadata accessor for AST.MatchingOptionSequence();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32LL))(a1, a2, v14);
          swift_storeEnumTagMultiPayload();
          break;
        case 4:
          uint64_t v9 = type metadata accessor for AST.Reference();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(a1, a2, v9);
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
          break;
      }

uint64_t destructiveInjectEnumTag for DSLTree.CustomCharacterClass.Member()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata completion function for DSLTree.CustomCharacterClass.Member()
{
  uint64_t result = type metadata accessor for DSLTree.Atom(319LL);
  if (v1 <= 0x3F)
  {
    v2[4] = *(void *)(result - 8) + 64LL;
    swift_getTupleTypeLayout2();
    v2[5] = v2;
    v2[6] = "\t";
    v2[7] = &unk_182D9DCB8;
    v2[8] = &unk_182D9DCB8;
    v2[9] = &unk_182D9DCD0;
    v2[10] = &unk_182D9DCD0;
    v2[11] = &unk_182D9DCD0;
    swift_initEnumMetadataMultiPayload();
    return 0LL;
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for DSLTree.Atom(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v6 + 16LL) & ~(unint64_t)v6));
    swift_retain();
  }

  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v7 = a2[1];
        *a1 = *a2;
        a1[1] = v7;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 4u:
        uint64_t v10 = type metadata accessor for AST.Reference();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v10 - 8) + 16LL))(a1, a2, v10);
        swift_storeEnumTagMultiPayload();
        break;
      case 6u:
        uint64_t v11 = type metadata accessor for AST.MatchingOptionSequence();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v11 - 8) + 16LL))(a1, a2, v11);
        swift_storeEnumTagMultiPayload();
        break;
      case 7u:
        uint64_t v12 = type metadata accessor for AST.Atom();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v12 - 8) + 16LL))(a1, a2, v12);
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(v5 + 64));
        break;
    }
  }

  return a1;
}

uint64_t destroy for DSLTree.Atom(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      return swift_bridgeObjectRelease();
    case 4:
      uint64_t v3 = type metadata accessor for AST.Reference();
      goto LABEL_6;
    case 6:
      uint64_t v3 = type metadata accessor for AST.MatchingOptionSequence();
      goto LABEL_6;
    case 7:
      uint64_t v3 = type metadata accessor for AST.Atom();
LABEL_6:
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
      break;
    default:
      return result;
  }

  return result;
}

void *initializeWithCopy for DSLTree.Atom(void *a1, void *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      swift_bridgeObjectRetain();
      goto LABEL_7;
    case 4u:
      uint64_t v7 = type metadata accessor for AST.Reference();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
      goto LABEL_7;
    case 6u:
      uint64_t v8 = type metadata accessor for AST.MatchingOptionSequence();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16LL))(a1, a2, v8);
      goto LABEL_7;
    case 7u:
      uint64_t v9 = type metadata accessor for AST.Atom();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 16LL))(a1, a2, v9);
LABEL_7:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
      break;
  }

  return a1;
}

void *assignWithCopy for DSLTree.Atom(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of MEProgram((uint64_t)a1, type metadata accessor for DSLTree.Atom);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        goto LABEL_8;
      case 4u:
        uint64_t v6 = type metadata accessor for AST.Reference();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
        goto LABEL_8;
      case 6u:
        uint64_t v7 = type metadata accessor for AST.MatchingOptionSequence();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
        goto LABEL_8;
      case 7u:
        uint64_t v8 = type metadata accessor for AST.Atom();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16LL))(a1, a2, v8);
LABEL_8:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
        break;
    }
  }

  return a1;
}

void *initializeWithTake for DSLTree.Atom(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 7:
      uint64_t v8 = type metadata accessor for AST.Atom();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32LL))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
      break;
    case 6:
      uint64_t v9 = type metadata accessor for AST.MatchingOptionSequence();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 32LL))(a1, a2, v9);
      swift_storeEnumTagMultiPayload();
      break;
    case 4:
      uint64_t v7 = type metadata accessor for AST.Reference();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32LL))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
      break;
  }

  return a1;
}

void *assignWithTake for DSLTree.Atom(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of MEProgram((uint64_t)a1, type metadata accessor for DSLTree.Atom);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 7:
        uint64_t v8 = type metadata accessor for AST.Atom();
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32LL))(a1, a2, v8);
        swift_storeEnumTagMultiPayload();
        break;
      case 6:
        uint64_t v9 = type metadata accessor for AST.MatchingOptionSequence();
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 32LL))(a1, a2, v9);
        swift_storeEnumTagMultiPayload();
        break;
      case 4:
        uint64_t v7 = type metadata accessor for AST.Reference();
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32LL))(a1, a2, v7);
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
        break;
    }
  }

  return a1;
}

uint64_t type metadata completion function for DSLTree.Atom()
{
  uint64_t result = type metadata accessor for AST.Reference();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for AST.MatchingOptionSequence();
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for AST.Atom();
      if (v3 <= 0x3F)
      {
        swift_initEnumMetadataMultiPayload();
        return 0LL;
      }
    }
  }

  return result;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for DSLTree.Atom.Assertion(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xF4) {
    goto LABEL_17;
  }
  if (a2 + 12 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 12) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 12;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 12;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 12;
    }
  }

uint64_t storeEnumTagSinglePayload for DSLTree.Atom.Assertion(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 12 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 12) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF4) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF3) {
    return ((uint64_t (*)(void))((char *)&loc_182D7F32C + 4 * byte_182D9CFAC[v4]))();
  }
  *a1 = a2 + 12;
  return ((uint64_t (*)(void))((char *)sub_182D7F360 + 4 * byte_182D9CFA7[v4]))();
}

uint64_t sub_182D7F360(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_182D7F368(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x182D7F370LL);
  }
  return result;
}

uint64_t sub_182D7F37C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x182D7F384LL);
  }
  *(_BYTE *)uint64_t result = a2 + 12;
  return result;
}

uint64_t sub_182D7F388(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_182D7F390(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DSLTree.Atom.Assertion()
{
  return &type metadata for DSLTree.Atom.Assertion;
}

uint64_t getEnumTagSinglePayload for DSLTree.Atom.CharacterClass(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xF3) {
    goto LABEL_17;
  }
  if (a2 + 13 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 13) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 13;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 13;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 13;
    }
  }

uint64_t storeEnumTagSinglePayload for DSLTree.Atom.CharacterClass( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 13 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 13) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF2) {
    return ((uint64_t (*)(void))((char *)&loc_182D7F488 + 4 * byte_182D9CFB6[v4]))();
  }
  *a1 = a2 + 13;
  return ((uint64_t (*)(void))((char *)sub_182D7F4BC + 4 * byte_182D9CFB1[v4]))();
}

uint64_t sub_182D7F4BC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_182D7F4C4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x182D7F4CCLL);
  }
  return result;
}

uint64_t sub_182D7F4D8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x182D7F4E0LL);
  }
  *(_BYTE *)uint64_t result = a2 + 13;
  return result;
}

uint64_t sub_182D7F4E4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_182D7F4EC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DSLTree.Atom.CharacterClass()
{
  return &type metadata for DSLTree.Atom.CharacterClass;
}

ValueMetadata *type metadata accessor for ReferenceID()
{
  return &type metadata for ReferenceID;
}

ValueMetadata *type metadata accessor for DSLTree._AST()
{
  return &type metadata for DSLTree._AST;
}

uint64_t initializeBufferWithCopyOfBuffer for DSLTree._AST.GroupKind(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for DSLTree._AST.GroupKind( a1,  a2,  a3,  (uint64_t (*)(void))MEMORY[0x18961C8D8]);
}

uint64_t destroy for DSLTree._AST.GroupKind(uint64_t a1, uint64_t a2)
{
  return destroy for DSLTree._AST.GroupKind(a1, a2, (uint64_t (*)(void))MEMORY[0x18961C8D8]);
}

uint64_t initializeWithCopy for DSLTree._AST.GroupKind(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for DSLTree._AST.GroupKind(a1, a2, a3, (uint64_t (*)(void))MEMORY[0x18961C8D8]);
}

uint64_t assignWithCopy for DSLTree._AST.GroupKind(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithCopy for DSLTree._AST.GroupKind(a1, a2, a3, (uint64_t (*)(void))MEMORY[0x18961C8D8]);
}

uint64_t initializeWithTake for DSLTree._AST.GroupKind(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithTake for DSLTree._AST.GroupKind(a1, a2, a3, (uint64_t (*)(void))MEMORY[0x18961C8D8]);
}

uint64_t assignWithTake for DSLTree._AST.GroupKind(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for DSLTree._AST.GroupKind(a1, a2, a3, (uint64_t (*)(void))MEMORY[0x18961C8D8]);
}

uint64_t getEnumTagSinglePayload for DSLTree._AST.GroupKind()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_182D7F57C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, (uint64_t (*)(void))MEMORY[0x18961C8D8]);
}

uint64_t storeEnumTagSinglePayload for DSLTree._AST.GroupKind()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_182D7F594(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, (uint64_t (*)(void))MEMORY[0x18961C8D8]);
}

uint64_t type metadata accessor for DSLTree._AST.GroupKind(uint64_t a1)
{
  return type metadata accessor for MEProgram( a1,  (uint64_t *)&type metadata singleton initialization cache for DSLTree._AST.GroupKind);
}

uint64_t type metadata completion function for DSLTree._AST.GroupKind(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for DSLTree._AST.GroupKind( a1,  a2,  a3,  (uint64_t (*)(uint64_t))MEMORY[0x18961C8D8]);
}

uint64_t initializeBufferWithCopyOfBuffer for DSLTree._AST.ConditionKind(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for DSLTree._AST.GroupKind( a1,  a2,  a3,  (uint64_t (*)(void))MEMORY[0x18961C230]);
}

uint64_t destroy for DSLTree._AST.ConditionKind(uint64_t a1, uint64_t a2)
{
  return destroy for DSLTree._AST.GroupKind(a1, a2, (uint64_t (*)(void))MEMORY[0x18961C230]);
}

uint64_t initializeWithCopy for DSLTree._AST.ConditionKind(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for DSLTree._AST.GroupKind(a1, a2, a3, (uint64_t (*)(void))MEMORY[0x18961C230]);
}

uint64_t assignWithCopy for DSLTree._AST.ConditionKind(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithCopy for DSLTree._AST.GroupKind(a1, a2, a3, (uint64_t (*)(void))MEMORY[0x18961C230]);
}

uint64_t initializeWithTake for DSLTree._AST.ConditionKind(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithTake for DSLTree._AST.GroupKind(a1, a2, a3, (uint64_t (*)(void))MEMORY[0x18961C230]);
}

uint64_t assignWithTake for DSLTree._AST.ConditionKind(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for DSLTree._AST.GroupKind(a1, a2, a3, (uint64_t (*)(void))MEMORY[0x18961C230]);
}

uint64_t getEnumTagSinglePayload for DSLTree._AST.ConditionKind()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_182D7F614(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, (uint64_t (*)(void))MEMORY[0x18961C230]);
}

uint64_t __swift_get_extra_inhabitant_indexTm( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48LL))(a1, a2, v6);
}

uint64_t storeEnumTagSinglePayload for DSLTree._AST.ConditionKind()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_182D7F668(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, (uint64_t (*)(void))MEMORY[0x18961C230]);
}

uint64_t __swift_store_extra_inhabitant_indexTm( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v7 = a5(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(a1, a2, a2, v7);
}

uint64_t type metadata accessor for DSLTree._AST.ConditionKind(uint64_t a1)
{
  return type metadata accessor for MEProgram( a1,  (uint64_t *)&type metadata singleton initialization cache for DSLTree._AST.ConditionKind);
}

uint64_t type metadata completion function for DSLTree._AST.ConditionKind(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for DSLTree._AST.GroupKind( a1,  a2,  a3,  (uint64_t (*)(uint64_t))MEMORY[0x18961C230]);
}

uint64_t type metadata completion function for DSLTree._AST.GroupKind( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result = a4(319LL);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for DSLTree._AST.QuantificationKind( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for DSLTree._AST.GroupKind( a1,  a2,  a3,  (uint64_t (*)(void))MEMORY[0x18961C398]);
}

uint64_t destroy for DSLTree._AST.QuantificationKind(uint64_t a1, uint64_t a2)
{
  return destroy for DSLTree._AST.GroupKind(a1, a2, (uint64_t (*)(void))MEMORY[0x18961C398]);
}

uint64_t initializeWithCopy for DSLTree._AST.QuantificationKind(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for DSLTree._AST.GroupKind(a1, a2, a3, (uint64_t (*)(void))MEMORY[0x18961C398]);
}

uint64_t assignWithCopy for DSLTree._AST.QuantificationKind(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithCopy for DSLTree._AST.GroupKind(a1, a2, a3, (uint64_t (*)(void))MEMORY[0x18961C398]);
}

uint64_t initializeWithTake for DSLTree._AST.QuantificationKind(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithTake for DSLTree._AST.GroupKind(a1, a2, a3, (uint64_t (*)(void))MEMORY[0x18961C398]);
}

uint64_t assignWithTake for DSLTree._AST.QuantificationKind(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for DSLTree._AST.GroupKind(a1, a2, a3, (uint64_t (*)(void))MEMORY[0x18961C398]);
}

uint64_t getEnumTagSinglePayload for DSLTree._AST.QuantificationKind()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_182D7F790(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, (uint64_t (*)(void))MEMORY[0x18961C398]);
}

uint64_t storeEnumTagSinglePayload for DSLTree._AST.QuantificationKind()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_182D7F7A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, (uint64_t (*)(void))MEMORY[0x18961C398]);
}

uint64_t type metadata accessor for DSLTree._AST.QuantificationKind(uint64_t a1)
{
  return type metadata accessor for MEProgram( a1,  (uint64_t *)&type metadata singleton initialization cache for DSLTree._AST.QuantificationKind);
}

uint64_t type metadata completion function for DSLTree._AST.QuantificationKind( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for DSLTree._AST.GroupKind( a1,  a2,  a3,  (uint64_t (*)(uint64_t))MEMORY[0x18961C398]);
}

uint64_t initializeBufferWithCopyOfBuffer for DSLTree._AST.QuantificationAmount( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for DSLTree._AST.GroupKind( a1,  a2,  a3,  (uint64_t (*)(void))MEMORY[0x18961C408]);
}

uint64_t destroy for DSLTree._AST.QuantificationAmount(uint64_t a1, uint64_t a2)
{
  return destroy for DSLTree._AST.GroupKind(a1, a2, (uint64_t (*)(void))MEMORY[0x18961C408]);
}

uint64_t initializeWithCopy for DSLTree._AST.QuantificationAmount(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for DSLTree._AST.GroupKind(a1, a2, a3, (uint64_t (*)(void))MEMORY[0x18961C408]);
}

uint64_t assignWithCopy for DSLTree._AST.QuantificationAmount(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithCopy for DSLTree._AST.GroupKind(a1, a2, a3, (uint64_t (*)(void))MEMORY[0x18961C408]);
}

uint64_t initializeWithTake for DSLTree._AST.QuantificationAmount(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithTake for DSLTree._AST.GroupKind(a1, a2, a3, (uint64_t (*)(void))MEMORY[0x18961C408]);
}

uint64_t assignWithTake for DSLTree._AST.QuantificationAmount(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for DSLTree._AST.GroupKind(a1, a2, a3, (uint64_t (*)(void))MEMORY[0x18961C408]);
}

uint64_t getEnumTagSinglePayload for DSLTree._AST.QuantificationAmount()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_182D7F828(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, (uint64_t (*)(void))MEMORY[0x18961C408]);
}

uint64_t storeEnumTagSinglePayload for DSLTree._AST.QuantificationAmount()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_182D7F840(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, (uint64_t (*)(void))MEMORY[0x18961C408]);
}

uint64_t type metadata accessor for DSLTree._AST.QuantificationAmount(uint64_t a1)
{
  return type metadata accessor for MEProgram( a1,  (uint64_t *)&type metadata singleton initialization cache for DSLTree._AST.QuantificationAmount);
}

uint64_t type metadata completion function for DSLTree._AST.QuantificationAmount( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for DSLTree._AST.GroupKind( a1,  a2,  a3,  (uint64_t (*)(uint64_t))MEMORY[0x18961C408]);
}

uint64_t initializeBufferWithCopyOfBuffer for DSLTree._AST.ASTNode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for DSLTree._AST.GroupKind( a1,  a2,  a3,  (uint64_t (*)(void))MEMORY[0x18961C838]);
}

uint64_t destroy for DSLTree._AST.ASTNode(uint64_t a1, uint64_t a2)
{
  return destroy for DSLTree._AST.GroupKind(a1, a2, (uint64_t (*)(void))MEMORY[0x18961C838]);
}

uint64_t initializeWithCopy for DSLTree._AST.ASTNode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for DSLTree._AST.GroupKind(a1, a2, a3, (uint64_t (*)(void))MEMORY[0x18961C838]);
}

uint64_t assignWithCopy for DSLTree._AST.ASTNode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithCopy for DSLTree._AST.GroupKind(a1, a2, a3, (uint64_t (*)(void))MEMORY[0x18961C838]);
}

uint64_t initializeWithTake for DSLTree._AST.ASTNode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithTake for DSLTree._AST.GroupKind(a1, a2, a3, (uint64_t (*)(void))MEMORY[0x18961C838]);
}

uint64_t assignWithTake for DSLTree._AST.ASTNode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for DSLTree._AST.GroupKind(a1, a2, a3, (uint64_t (*)(void))MEMORY[0x18961C838]);
}

uint64_t getEnumTagSinglePayload for DSLTree._AST.ASTNode()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_182D7F8C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, (uint64_t (*)(void))MEMORY[0x18961C838]);
}

uint64_t storeEnumTagSinglePayload for DSLTree._AST.ASTNode()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_182D7F8D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, (uint64_t (*)(void))MEMORY[0x18961C838]);
}

uint64_t type metadata accessor for DSLTree._AST.ASTNode(uint64_t a1)
{
  return type metadata accessor for MEProgram( a1,  (uint64_t *)&type metadata singleton initialization cache for DSLTree._AST.ASTNode);
}

uint64_t type metadata completion function for DSLTree._AST.ASTNode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for DSLTree._AST.GroupKind( a1,  a2,  a3,  (uint64_t (*)(uint64_t))MEMORY[0x18961C838]);
}

uint64_t initializeBufferWithCopyOfBuffer for DSLTree._AST.AbsentFunction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for DSLTree._AST.GroupKind( a1,  a2,  a3,  (uint64_t (*)(void))MEMORY[0x18961C2A8]);
}

uint64_t destroy for DSLTree._AST.AbsentFunction(uint64_t a1, uint64_t a2)
{
  return destroy for DSLTree._AST.GroupKind(a1, a2, (uint64_t (*)(void))MEMORY[0x18961C2A8]);
}

uint64_t initializeWithCopy for DSLTree._AST.AbsentFunction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for DSLTree._AST.GroupKind(a1, a2, a3, (uint64_t (*)(void))MEMORY[0x18961C2A8]);
}

uint64_t assignWithCopy for DSLTree._AST.AbsentFunction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithCopy for DSLTree._AST.GroupKind(a1, a2, a3, (uint64_t (*)(void))MEMORY[0x18961C2A8]);
}

uint64_t initializeWithTake for DSLTree._AST.AbsentFunction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithTake for DSLTree._AST.GroupKind(a1, a2, a3, (uint64_t (*)(void))MEMORY[0x18961C2A8]);
}

uint64_t assignWithTake for DSLTree._AST.AbsentFunction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for DSLTree._AST.GroupKind(a1, a2, a3, (uint64_t (*)(void))MEMORY[0x18961C2A8]);
}

uint64_t getEnumTagSinglePayload for DSLTree._AST.AbsentFunction()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_182D7F958(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, (uint64_t (*)(void))MEMORY[0x18961C2A8]);
}

uint64_t storeEnumTagSinglePayload for DSLTree._AST.AbsentFunction()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_182D7F970(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, (uint64_t (*)(void))MEMORY[0x18961C2A8]);
}

uint64_t type metadata accessor for DSLTree._AST.AbsentFunction(uint64_t a1)
{
  return type metadata accessor for MEProgram( a1,  (uint64_t *)&type metadata singleton initialization cache for DSLTree._AST.AbsentFunction);
}

uint64_t type metadata completion function for DSLTree._AST.AbsentFunction( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for DSLTree._AST.GroupKind( a1,  a2,  a3,  (uint64_t (*)(uint64_t))MEMORY[0x18961C2A8]);
}

uint64_t initializeBufferWithCopyOfBuffer for DSLTree._AST.Reference(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for DSLTree._AST.GroupKind( a1,  a2,  a3,  (uint64_t (*)(void))MEMORY[0x18961C950]);
}

uint64_t destroy for DSLTree._AST.Reference(uint64_t a1, uint64_t a2)
{
  return destroy for DSLTree._AST.GroupKind(a1, a2, (uint64_t (*)(void))MEMORY[0x18961C950]);
}

uint64_t initializeWithCopy for DSLTree._AST.Reference(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for DSLTree._AST.GroupKind(a1, a2, a3, (uint64_t (*)(void))MEMORY[0x18961C950]);
}

uint64_t assignWithCopy for DSLTree._AST.Reference(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithCopy for DSLTree._AST.GroupKind(a1, a2, a3, (uint64_t (*)(void))MEMORY[0x18961C950]);
}

uint64_t initializeWithTake for DSLTree._AST.Reference(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithTake for DSLTree._AST.GroupKind(a1, a2, a3, (uint64_t (*)(void))MEMORY[0x18961C950]);
}

uint64_t assignWithTake for DSLTree._AST.Reference(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for DSLTree._AST.GroupKind(a1, a2, a3, (uint64_t (*)(void))MEMORY[0x18961C950]);
}

uint64_t getEnumTagSinglePayload for DSLTree._AST.Reference()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_182D7F9F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, (uint64_t (*)(void))MEMORY[0x18961C950]);
}

uint64_t storeEnumTagSinglePayload for DSLTree._AST.Reference()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_182D7FA08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, (uint64_t (*)(void))MEMORY[0x18961C950]);
}

uint64_t type metadata accessor for DSLTree._AST.Reference(uint64_t a1)
{
  return type metadata accessor for MEProgram( a1,  (uint64_t *)&type metadata singleton initialization cache for DSLTree._AST.Reference);
}

uint64_t type metadata completion function for DSLTree._AST.Reference(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for DSLTree._AST.GroupKind( a1,  a2,  a3,  (uint64_t (*)(uint64_t))MEMORY[0x18961C950]);
}

uint64_t initializeBufferWithCopyOfBuffer for DSLTree._AST.MatchingOptionSequence( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for DSLTree._AST.GroupKind( a1,  a2,  a3,  (uint64_t (*)(void))MEMORY[0x18961C4F0]);
}

uint64_t destroy for DSLTree._AST.MatchingOptionSequence(uint64_t a1, uint64_t a2)
{
  return destroy for DSLTree._AST.GroupKind(a1, a2, (uint64_t (*)(void))MEMORY[0x18961C4F0]);
}

uint64_t initializeWithCopy for DSLTree._AST.MatchingOptionSequence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for DSLTree._AST.GroupKind(a1, a2, a3, (uint64_t (*)(void))MEMORY[0x18961C4F0]);
}

uint64_t assignWithCopy for DSLTree._AST.MatchingOptionSequence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithCopy for DSLTree._AST.GroupKind(a1, a2, a3, (uint64_t (*)(void))MEMORY[0x18961C4F0]);
}

uint64_t initializeWithTake for DSLTree._AST.MatchingOptionSequence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithTake for DSLTree._AST.GroupKind(a1, a2, a3, (uint64_t (*)(void))MEMORY[0x18961C4F0]);
}

uint64_t assignWithTake for DSLTree._AST.MatchingOptionSequence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for DSLTree._AST.GroupKind(a1, a2, a3, (uint64_t (*)(void))MEMORY[0x18961C4F0]);
}

uint64_t getEnumTagSinglePayload for DSLTree._AST.MatchingOptionSequence()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_182D7FA88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, (uint64_t (*)(void))MEMORY[0x18961C4F0]);
}

uint64_t storeEnumTagSinglePayload for DSLTree._AST.MatchingOptionSequence()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_182D7FAA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, (uint64_t (*)(void))MEMORY[0x18961C4F0]);
}

uint64_t type metadata accessor for DSLTree._AST.MatchingOptionSequence(uint64_t a1)
{
  return type metadata accessor for MEProgram( a1,  (uint64_t *)&type metadata singleton initialization cache for DSLTree._AST.MatchingOptionSequence);
}

uint64_t type metadata completion function for DSLTree._AST.MatchingOptionSequence( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for DSLTree._AST.GroupKind( a1,  a2,  a3,  (uint64_t (*)(uint64_t))MEMORY[0x18961C4F0]);
}

uint64_t initializeBufferWithCopyOfBuffer for DSLTree._AST.Atom(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for DSLTree._AST.GroupKind( a1,  a2,  a3,  (uint64_t (*)(void))MEMORY[0x18961C7B8]);
}

uint64_t initializeBufferWithCopyOfBuffer for DSLTree._AST.GroupKind( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4(0LL);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v6 - 8))(a1, a2, v6);
}

uint64_t destroy for DSLTree._AST.Atom(uint64_t a1, uint64_t a2)
{
  return destroy for DSLTree._AST.GroupKind(a1, a2, (uint64_t (*)(void))MEMORY[0x18961C7B8]);
}

uint64_t destroy for DSLTree._AST.GroupKind(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v4 = a3(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
}

uint64_t initializeWithCopy for DSLTree._AST.Atom(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for DSLTree._AST.GroupKind(a1, a2, a3, (uint64_t (*)(void))MEMORY[0x18961C7B8]);
}

uint64_t initializeWithCopy for DSLTree._AST.GroupKind( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  return a1;
}

uint64_t assignWithCopy for DSLTree._AST.Atom(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithCopy for DSLTree._AST.GroupKind(a1, a2, a3, (uint64_t (*)(void))MEMORY[0x18961C7B8]);
}

uint64_t assignWithCopy for DSLTree._AST.GroupKind( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  return a1;
}

uint64_t initializeWithTake for DSLTree._AST.Atom(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithTake for DSLTree._AST.GroupKind(a1, a2, a3, (uint64_t (*)(void))MEMORY[0x18961C7B8]);
}

uint64_t initializeWithTake for DSLTree._AST.GroupKind( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  return a1;
}

uint64_t assignWithTake for DSLTree._AST.Atom(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for DSLTree._AST.GroupKind(a1, a2, a3, (uint64_t (*)(void))MEMORY[0x18961C7B8]);
}

uint64_t assignWithTake for DSLTree._AST.GroupKind( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for DSLTree._AST.Atom()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_182D7FCA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, (uint64_t (*)(void))MEMORY[0x18961C7B8]);
}

uint64_t storeEnumTagSinglePayload for DSLTree._AST.Atom()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_182D7FCB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, (uint64_t (*)(void))MEMORY[0x18961C7B8]);
}

uint64_t type metadata accessor for DSLTree._AST.Atom(uint64_t a1)
{
  return type metadata accessor for MEProgram( a1,  (uint64_t *)&type metadata singleton initialization cache for DSLTree._AST.Atom);
}

uint64_t type metadata completion function for DSLTree._AST.Atom(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for DSLTree._AST.GroupKind( a1,  a2,  a3,  (uint64_t (*)(uint64_t))MEMORY[0x18961C7B8]);
}

uint64_t destroy for AnyRegexOutput()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Regex.Match(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for Regex.Match(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for Regex.Match(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for Regex.Match(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(specialized Compiler.ByteCodeGen.emitAlternationGen<A>(_:withBacktracking:_:)(*(void *)(v3 + 16), v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Regex.Match(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 40) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for RegexSemanticLevel()
{
  return &type metadata for RegexSemanticLevel;
}

ValueMetadata *type metadata accessor for RegexWordBoundaryKind()
{
  return &type metadata for RegexWordBoundaryKind;
}

ValueMetadata *type metadata accessor for RegexRepetitionBehavior()
{
  return &type metadata for RegexRepetitionBehavior;
}

ValueMetadata *type metadata accessor for _RegexFactory()
{
  return &type metadata for _RegexFactory;
}

ValueMetadata *type metadata accessor for RegexRepetitionBehavior.Kind()
{
  return &type metadata for RegexRepetitionBehavior.Kind;
}

ValueMetadata *type metadata accessor for RegexWordBoundaryKind.Representation()
{
  return &type metadata for RegexWordBoundaryKind.Representation;
}

ValueMetadata *type metadata accessor for RegexSemanticLevel.Representation()
{
  return &type metadata for RegexSemanticLevel.Representation;
}

uint64_t type metadata instantiation function for DefaultSearcherState()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata completion function for DefaultSearcherState( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for DefaultSearcherState.Position( 319LL,  *(void *)(a1 + 16),  *(void *)(a1 + 24),  a4);
  if (v5 <= 0x3F)
  {
    uint64_t result = swift_getAssociatedTypeWitness();
    if (v6 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0LL;
    }
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for DefaultSearcherState(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  if (*(_DWORD *)(v5 + 84)) {
    size_t v7 = *(void *)(v5 + 64);
  }
  else {
    size_t v7 = v6 + 1;
  }
  uint64_t v8 = *(_DWORD *)(v5 + 80);
  uint64_t v9 = ~v8;
  size_t v10 = v7 + v8;
  unint64_t v11 = ((v7 + v8) & v9) + v6;
  if (v8 > 7 || (*(_DWORD *)(v5 + 80) & 0x100000) != 0 || v11 > 0x18)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v8 + 16) & v9));
    swift_retain();
  }

  else
  {
    uint64_t v15 = AssociatedTypeWitness;
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v5 + 48))(a2, 1LL, AssociatedTypeWitness))
    {
      memcpy(a1, a2, v7);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16))( ((unint64_t)a1 + v10) & v9,  ((unint64_t)a2 + v10) & v9,  v15);
    }

    else
    {
      uint64_t v16 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16);
      v16(a1, a2, v15);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0LL, 1LL, v15);
      v16((uint64_t *)(((unint64_t)a1 + v10) & v9), (uint64_t *)(((unint64_t)a2 + v10) & v9), v15);
    }
  }

  return a1;
}

uint64_t destroy for DefaultSearcherState(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 1LL, AssociatedTypeWitness);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  if (!v4)
  {
    uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    v5(a1, AssociatedTypeWitness);
    uint64_t v5 = v8;
  }

  uint64_t v6 = *(void *)(v3 + 64) + a1;
  if (!*(_DWORD *)(v3 + 84)) {
    ++v6;
  }
  return ((uint64_t (*)(unint64_t, uint64_t))v5)( (v6 + *(unsigned __int8 *)(v3 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80),  AssociatedTypeWitness);
}

void *initializeWithCopy for DefaultSearcherState(void *a1, const void *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(a2, 1LL, AssociatedTypeWitness))
  {
    int v6 = *(_DWORD *)(v5 + 84);
    uint64_t v7 = *(void *)(v5 + 64);
    if (v6) {
      size_t v8 = *(void *)(v5 + 64);
    }
    else {
      size_t v8 = v7 + 1;
    }
    memcpy(a1, a2, v8);
    uint64_t v9 = *(void (**)(void *, const void *, uint64_t))(v5 + 16);
  }

  else
  {
    uint64_t v9 = *(void (**)(void *, const void *, uint64_t))(v5 + 16);
    v9(a1, a2, AssociatedTypeWitness);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0LL, 1LL, AssociatedTypeWitness);
    int v6 = *(_DWORD *)(v5 + 84);
    uint64_t v7 = *(void *)(v5 + 64);
  }

  if (v6) {
    uint64_t v10 = v7;
  }
  else {
    uint64_t v10 = v7 + 1;
  }
  v9( (void *)(((unint64_t)a1 + v10 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)),  (const void *)(((unint64_t)a2 + v10 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)),  AssociatedTypeWitness);
  return a1;
}

void *assignWithCopy for DefaultSearcherState(void *a1, void *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  int v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  int v7 = v6(a1, 1LL, AssociatedTypeWitness);
  int v8 = v6(a2, 1LL, AssociatedTypeWitness);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0LL, 1LL, AssociatedTypeWitness);
      goto LABEL_10;
    }
  }

  else
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 24))(a1, a2, AssociatedTypeWitness);
      goto LABEL_10;
    }

    (*(void (**)(void *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
  }

  if (*(_DWORD *)(v5 + 84)) {
    size_t v9 = *(void *)(v5 + 64);
  }
  else {
    size_t v9 = *(void *)(v5 + 64) + 1LL;
  }
  memcpy(a1, a2, v9);
LABEL_10:
  if (*(_DWORD *)(v5 + 84)) {
    uint64_t v10 = *(void *)(v5 + 64);
  }
  else {
    uint64_t v10 = *(void *)(v5 + 64) + 1LL;
  }
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 24))( ((unint64_t)a1 + v10 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80),  ((unint64_t)a2 + v10 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80),  AssociatedTypeWitness);
  return a1;
}

void *initializeWithTake for DefaultSearcherState(void *a1, const void *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(a2, 1LL, AssociatedTypeWitness))
  {
    int v6 = *(_DWORD *)(v5 + 84);
    uint64_t v7 = *(void *)(v5 + 64);
    if (v6) {
      size_t v8 = *(void *)(v5 + 64);
    }
    else {
      size_t v8 = v7 + 1;
    }
    memcpy(a1, a2, v8);
    size_t v9 = *(void (**)(void *, const void *, uint64_t))(v5 + 32);
  }

  else
  {
    size_t v9 = *(void (**)(void *, const void *, uint64_t))(v5 + 32);
    v9(a1, a2, AssociatedTypeWitness);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0LL, 1LL, AssociatedTypeWitness);
    int v6 = *(_DWORD *)(v5 + 84);
    uint64_t v7 = *(void *)(v5 + 64);
  }

  if (v6) {
    uint64_t v10 = v7;
  }
  else {
    uint64_t v10 = v7 + 1;
  }
  v9( (void *)(((unint64_t)a1 + v10 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)),  (const void *)(((unint64_t)a2 + v10 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)),  AssociatedTypeWitness);
  return a1;
}

void *assignWithTake for DefaultSearcherState(void *a1, void *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  int v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  int v7 = v6(a1, 1LL, AssociatedTypeWitness);
  int v8 = v6(a2, 1LL, AssociatedTypeWitness);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0LL, 1LL, AssociatedTypeWitness);
      goto LABEL_10;
    }
  }

  else
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 40))(a1, a2, AssociatedTypeWitness);
      goto LABEL_10;
    }

    (*(void (**)(void *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
  }

  if (*(_DWORD *)(v5 + 84)) {
    size_t v9 = *(void *)(v5 + 64);
  }
  else {
    size_t v9 = *(void *)(v5 + 64) + 1LL;
  }
  memcpy(a1, a2, v9);
LABEL_10:
  if (*(_DWORD *)(v5 + 84)) {
    uint64_t v10 = *(void *)(v5 + 64);
  }
  else {
    uint64_t v10 = *(void *)(v5 + 64) + 1LL;
  }
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 40))( ((unint64_t)a1 + v10 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80),  ((unint64_t)a2 + v10 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80),  AssociatedTypeWitness);
  return a1;
}

uint64_t getEnumTagSinglePayload for DefaultSearcherState(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (v5) {
    unsigned int v6 = v5 - 1;
  }
  else {
    unsigned int v6 = 0;
  }
  uint64_t v7 = *(void *)(v4 + 64);
  uint64_t v8 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v9 = v7 + v8;
  if (v5) {
    uint64_t v10 = v7 + v8;
  }
  else {
    uint64_t v10 = v9 + 1;
  }
  if (!a2) {
    return 0LL;
  }
  if (a2 <= v5) {
    goto LABEL_26;
  }
  uint64_t v11 = (v10 & ~v8) + v7;
  char v12 = 8 * v11;
  if (v11 <= 3)
  {
    unsigned int v14 = ((a2 - v5 + ~(-1 << v12)) >> v12) + 1;
    if (HIWORD(v14))
    {
      int v13 = *(_DWORD *)(a1 + v11);
      if (!v13) {
        goto LABEL_26;
      }
      goto LABEL_17;
    }

    if (v14 > 0xFF)
    {
      int v13 = *(unsigned __int16 *)(a1 + v11);
      if (!*(_WORD *)(a1 + v11)) {
        goto LABEL_26;
      }
      goto LABEL_17;
    }

    if (v14 < 2)
    {
LABEL_26:
      if (v5)
      {
        if (v6 != v5) {
          return (*(uint64_t (**)(uint64_t))(v4 + 48))((v9 + a1) & ~v8);
        }
        unsigned int v17 = (*(uint64_t (**)(uint64_t))(v4 + 48))(a1);
        if (v17 >= 2) {
          return v17 - 1;
        }
        else {
          return 0LL;
        }
      }

      return 0LL;
    }
  }

  int v13 = *(unsigned __int8 *)(a1 + v11);
  if (!*(_BYTE *)(a1 + v11)) {
    goto LABEL_26;
  }
LABEL_17:
  int v15 = (v13 - 1) << v12;
  if ((_DWORD)v11)
  {
    else {
      int v16 = 4;
    }
    __asm { BR              X11 }
  }

  return v5 + v15 + 1;
}

void storeEnumTagSinglePayload for DefaultSearcherState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v6 = 0u;
  uint64_t v7 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(void *)(v7 + 64);
  if (v8) {
    uint64_t v10 = *(void *)(v7 + 64);
  }
  else {
    uint64_t v10 = v9 + 1;
  }
  size_t v11 = ((v10 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)) + v9;
  if (a3 > v8)
  {
    if (v11 > 3)
    {
      unsigned int v6 = 1u;
      if (v8 >= a2) {
LABEL_20:
      }
        __asm { BR              X14 }

void sub_182D80998()
{
  *(_BYTE *)(v0 + v1) = v2;
}

void sub_182D809A0()
{
  *(_WORD *)(v0 + v1) = v2;
}

uint64_t type metadata accessor for DefaultSearcherState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DefaultSearcherState);
}

uint64_t type metadata accessor for DefaultSearcherState.Position( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for DefaultSearcherState.Position);
}

uint64_t type metadata completion function for DefaultSearcherState.Position()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0LL;
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for DefaultSearcherState.Position(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  if (*(_DWORD *)(v5 + 84)) {
    size_t v7 = *(void *)(v5 + 64);
  }
  else {
    size_t v7 = *(void *)(v5 + 64) + 1LL;
  }
  if (*(_DWORD *)(v5 + 80) > 7u || (v6 & 0x100000) != 0 || v7 > 0x18)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v6 + 16LL) & ~(unint64_t)v6));
    swift_retain();
  }

  else
  {
    uint64_t v11 = AssociatedTypeWitness;
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v5 + 48))(a2, 1LL, AssociatedTypeWitness))
    {
      memcpy(a1, a2, v7);
    }

    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, v11);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0LL, 1LL, v11);
    }
  }

  return a1;
}

uint64_t destroy for DefaultSearcherState.Position(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 1LL, AssociatedTypeWitness);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, AssociatedTypeWitness);
  }
  return result;
}

void *initializeWithCopy for DefaultSearcherState.Position(void *a1, const void *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(a2, 1LL, AssociatedTypeWitness))
  {
    if (*(_DWORD *)(v5 + 84)) {
      size_t v6 = *(void *)(v5 + 64);
    }
    else {
      size_t v6 = *(void *)(v5 + 64) + 1LL;
    }
    memcpy(a1, a2, v6);
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0LL, 1LL, AssociatedTypeWitness);
  }

  return a1;
}

void *assignWithCopy for DefaultSearcherState.Position(void *a1, void *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  size_t v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  int v7 = v6(a1, 1LL, AssociatedTypeWitness);
  int v8 = v6(a2, 1LL, AssociatedTypeWitness);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0LL, 1LL, AssociatedTypeWitness);
      return a1;
    }
  }

  else
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 24))(a1, a2, AssociatedTypeWitness);
      return a1;
    }

    (*(void (**)(void *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
  }

  if (*(_DWORD *)(v5 + 84)) {
    size_t v9 = *(void *)(v5 + 64);
  }
  else {
    size_t v9 = *(void *)(v5 + 64) + 1LL;
  }
  memcpy(a1, a2, v9);
  return a1;
}

void *initializeWithTake for DefaultSearcherState.Position(void *a1, const void *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(a2, 1LL, AssociatedTypeWitness))
  {
    if (*(_DWORD *)(v5 + 84)) {
      size_t v6 = *(void *)(v5 + 64);
    }
    else {
      size_t v6 = *(void *)(v5 + 64) + 1LL;
    }
    memcpy(a1, a2, v6);
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0LL, 1LL, AssociatedTypeWitness);
  }

  return a1;
}

void *assignWithTake for DefaultSearcherState.Position(void *a1, void *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  size_t v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  int v7 = v6(a1, 1LL, AssociatedTypeWitness);
  int v8 = v6(a2, 1LL, AssociatedTypeWitness);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0LL, 1LL, AssociatedTypeWitness);
      return a1;
    }
  }

  else
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 40))(a1, a2, AssociatedTypeWitness);
      return a1;
    }

    (*(void (**)(void *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
  }

  if (*(_DWORD *)(v5 + 84)) {
    size_t v9 = *(void *)(v5 + 64);
  }
  else {
    size_t v9 = *(void *)(v5 + 64) + 1LL;
  }
  memcpy(a1, a2, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for DefaultSearcherState.Position(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = v5 - 1;
  if (!v5) {
    unsigned int v6 = 0;
  }
  uint64_t v7 = *(void *)(v4 + 64);
  if (!v5) {
    ++v7;
  }
  if (!a2) {
    return 0LL;
  }
  if (a2 > v6)
  {
    char v8 = 8 * v7;
    unsigned int v10 = ((a2 - v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)(a1 + v7);
      if (v9) {
        goto LABEL_15;
      }
    }

    else
    {
      if (v10 <= 0xFF)
      {
        if (v10 < 2) {
          goto LABEL_22;
        }
LABEL_8:
        int v9 = *(unsigned __int8 *)(a1 + v7);
        if (!*(_BYTE *)(a1 + v7)) {
          goto LABEL_22;
        }
LABEL_15:
        int v11 = (v9 - 1) << v8;
        if ((_DWORD)v7)
        {
          __asm { BR              X12 }
        }

        return v6 + v11 + 1;
      }

      int v9 = *(unsigned __int16 *)(a1 + v7);
      if (*(_WORD *)(a1 + v7)) {
        goto LABEL_15;
      }
    }
  }

LABEL_22:
  if (v5 < 2) {
    return 0LL;
  }
  unsigned int v13 = (*(uint64_t (**)(uint64_t))(v4 + 48))(a1);
  if (v13 >= 2) {
    return v13 - 1;
  }
  else {
    return 0LL;
  }
}

void storeEnumTagSinglePayload for DefaultSearcherState.Position( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v6 = 0u;
  uint64_t v7 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (v8)
  {
    size_t v10 = *(void *)(v7 + 64);
  }

  else
  {
    unsigned int v9 = 0;
    size_t v10 = *(void *)(v7 + 64) + 1LL;
  }

  if (a3 > v9)
  {
    if (v10 > 3)
    {
      unsigned int v6 = 1u;
      if (v9 >= a2) {
LABEL_20:
      }
        __asm { BR              X11 }

void sub_182D81244()
{
  *(_BYTE *)(v0 + v1) = v2;
}

void sub_182D8124C()
{
  *(_WORD *)(v0 + v1) = v2;
}

uint64_t getEnumTag for DefaultSearcherState.Position(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 48LL))( a1,  1LL,  AssociatedTypeWitness);
}

uint64_t destructiveInjectEnumTag for DefaultSearcherState.Position(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56LL))( a1,  a2,  1LL,  AssociatedTypeWitness);
}

void *initializeBufferWithCopyOfBuffer for DSLTree.Node(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  return a1;
}

uint64_t destroy for DSLTree.Node()
{
  return swift_release();
}

void *assignWithTake for DSLTree.Node(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTag for DSLTree.Node(void *a1)
{
  unsigned int v1 = (*a1 >> 59) & 0x1E | (*a1 >> 2) & 1;
  if (v1 <= 0xF) {
    return v1;
  }
  else {
    return (*a1 >> 3) + 16;
  }
}

void *destructiveProjectEnumData for DSLTree.Node(void *result)
{
  *result &= 0xFFFFFFFFFFFFFFBuLL;
  return result;
}

void *destructiveInjectEnumTag for DSLTree.Node(void *result, uint64_t a2)
{
  else {
    *uint64_t result = (8LL * (a2 - 16)) | 0x8000000000000000LL;
  }
  return result;
}

ValueMetadata *type metadata accessor for DSLTree.Node()
{
  return &type metadata for DSLTree.Node;
}

uint64_t *initializeBufferWithCopyOfBuffer for DSLTree.QuantificationKind( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v6 + 16LL) & ~(unint64_t)v6));
    swift_retain();
  }

  else if (swift_getEnumCaseMultiPayload() > 1)
  {
    memcpy(a1, a2, *(void *)(v5 + 64));
  }

  else
  {
    uint64_t v7 = type metadata accessor for AST.Quantification.Kind();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }

  return a1;
}

uint64_t destroy for DSLTree.QuantificationKind(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result <= 1)
  {
    uint64_t v3 = type metadata accessor for AST.Quantification.Kind();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  }

  return result;
}

void *initializeWithCopy for DSLTree.QuantificationKind(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() > 1)
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  else
  {
    uint64_t v6 = type metadata accessor for AST.Quantification.Kind();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }

  return a1;
}

void *assignWithCopy for DSLTree.QuantificationKind(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of MEProgram((uint64_t)a1, type metadata accessor for DSLTree.QuantificationKind);
    if (swift_getEnumCaseMultiPayload() > 1)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    }

    else
    {
      uint64_t v6 = type metadata accessor for AST.Quantification.Kind();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }

  return a1;
}

void *initializeWithTake for DSLTree.QuantificationKind(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() > 1)
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  else
  {
    uint64_t v6 = type metadata accessor for AST.Quantification.Kind();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }

  return a1;
}

void *assignWithTake for DSLTree.QuantificationKind(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of MEProgram((uint64_t)a1, type metadata accessor for DSLTree.QuantificationKind);
    if (swift_getEnumCaseMultiPayload() > 1)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    }

    else
    {
      uint64_t v6 = type metadata accessor for AST.Quantification.Kind();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }

  return a1;
}

uint64_t getEnumTagSinglePayload for DSLTree.QuantificationKind(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48LL))();
}

uint64_t storeEnumTagSinglePayload for DSLTree.QuantificationKind( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56LL))();
}

uint64_t type metadata completion function for DSLTree.QuantificationKind()
{
  uint64_t result = type metadata accessor for AST.Quantification.Kind();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0LL;
  }

  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for MEProgram(uint64_t a1, uint64_t *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = v4 + ((v3 + 16LL) & ~(unint64_t)v3);
    swift_retain();
  }

  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a2[2];
    *(void *)(a1 + 8) = a2[1];
    *(void *)(a1 + 16) = v8;
    uint64_t v9 = a2[4];
    *(void *)(a1 + 24) = a2[3];
    *(void *)(a1 + 32) = v9;
    uint64_t v10 = a2[6];
    *(void *)(a1 + 40) = a2[5];
    *(void *)(a1 + 48) = v10;
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 17);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 19);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 21);
    *(void *)(a1 + 184) = a2[23];
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 9);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 11);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 13);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 15);
    __int128 v11 = *(_OWORD *)(a2 + 7);
    *(_WORD *)(a1 + 192) = *((_WORD *)a2 + 96);
    uint64_t v12 = a3[14];
    uint64_t v17 = (uint64_t)a2 + v12;
    uint64_t v18 = a1 + v12;
    *(_OWORD *)(a1 + 56) = v11;
    uint64_t v13 = type metadata accessor for CaptureList();
    int v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16LL);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v16(v18, v17, v13);
    uint64_t v14 = a3[16];
    *(void *)(v7 + a3[15]) = *(uint64_t *)((char *)a2 + a3[15]);
    *(void *)(v7 + v14) = *(uint64_t *)((char *)a2 + v14);
    *(_BYTE *)(v7 + a3[17]) = *((_BYTE *)a2 + a3[17]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  return v7;
}

uint64_t destroy for MEProgram(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 56);
  uint64_t v5 = type metadata accessor for CaptureList();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MEProgram(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  __int128 v9 = *(_OWORD *)(a2 + 72);
  __int128 v10 = *(_OWORD *)(a2 + 88);
  __int128 v11 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = v11;
  *(_OWORD *)(a1 + 88) = v10;
  *(_OWORD *)(a1 + 72) = v9;
  __int128 v12 = *(_OWORD *)(a2 + 136);
  __int128 v13 = *(_OWORD *)(a2 + 152);
  __int128 v14 = *(_OWORD *)(a2 + 168);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = v14;
  *(_OWORD *)(a1 + 152) = v13;
  *(_WORD *)(a1 + 192) = *(_WORD *)(a2 + 192);
  uint64_t v15 = a3[14];
  uint64_t v20 = a2 + v15;
  uint64_t v21 = a1 + v15;
  *(_OWORD *)(a1 + 136) = v12;
  uint64_t v16 = type metadata accessor for CaptureList();
  char v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16LL);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v19(v21, v20, v16);
  uint64_t v17 = a3[16];
  *(void *)(a1 + a3[15]) = *(void *)(a2 + a3[15]);
  *(void *)(a1 + v17) = *(void *)(a2 + v17);
  *(_BYTE *)(a1 + a3[17]) = *(_BYTE *)(a2 + a3[17]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MEProgram(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(_BYTE *)(a1 + 193) = *(_BYTE *)(a2 + 193);
  uint64_t v6 = a3[14];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for CaptureList();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24LL))(v7, v8, v9);
  *(void *)(a1 + a3[15]) = *(void *)(a2 + a3[15]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[16]) = *(void *)(a2 + a3[16]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + a3[17]) = *(_BYTE *)(a2 + a3[17]);
  return a1;
}

uint64_t initializeWithTake for MEProgram(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  __int128 v7 = *(_OWORD *)(a2 + 56);
  *(_WORD *)(a1 + 192) = *(_WORD *)(a2 + 192);
  uint64_t v8 = a3[14];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  *(_OWORD *)(a1 + 56) = v7;
  uint64_t v11 = type metadata accessor for CaptureList();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32LL))(v9, v10, v11);
  uint64_t v12 = a3[16];
  *(void *)(a1 + a3[15]) = *(void *)(a2 + a3[15]);
  *(void *)(a1 + v12) = *(void *)(a2 + v12);
  *(_BYTE *)(a1 + a3[17]) = *(_BYTE *)(a2 + a3[17]);
  return a1;
}

uint64_t assignWithTake for MEProgram(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  __int128 v6 = *(_OWORD *)(a2 + 168);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(_BYTE *)(a1 + 193) = *(_BYTE *)(a2 + 193);
  uint64_t v7 = a3[14];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_OWORD *)(a1 + 168) = v6;
  uint64_t v10 = type metadata accessor for CaptureList();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40LL))(v8, v9, v10);
  *(void *)(a1 + a3[15]) = *(void *)(a2 + a3[15]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[16]) = *(void *)(a2 + a3[16]);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + a3[17]) = *(_BYTE *)(a2 + a3[17]);
  return a1;
}

uint64_t getEnumTagSinglePayload for MEProgram()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_182D820C4(char *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for CaptureList();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( &a1[*(int *)(a3 + 56)],  a2,  v8);
  }

uint64_t storeEnumTagSinglePayload for MEProgram()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_182D8214C(char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)uint64_t result = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for CaptureList();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( &v5[*(int *)(a4 + 56)],  a2,  a2,  v7);
  }

  return result;
}

uint64_t type metadata completion function for MEProgram()
{
  uint64_t result = type metadata accessor for CaptureList();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for RegexCompilationError(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for PatternSegment( a1,  a2,  a3,  (void (*)(void, uint64_t, uint64_t))outlined copy of RegexCompilationError);
}

uint64_t outlined copy of RegexCompilationError(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 1) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for RegexCompilationError(uint64_t a1)
{
  return outlined consume of RegexCompilationError(*(void *)a1, *(void *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t outlined consume of RegexCompilationError(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t *assignWithCopy for RegexCompilationError(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return assignWithCopy for RegexCompilationError( a1,  a2,  a3,  (void (*)(void, uint64_t, uint64_t))outlined copy of RegexCompilationError,  (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of RegexCompilationError);
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t *assignWithTake for RegexCompilationError(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for RegexCompilationError( a1,  a2,  a3,  (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of RegexCompilationError);
}

uint64_t getEnumTagSinglePayload for RegexCompilationError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RegexCompilationError( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 254;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 17) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 17) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 16) = -(char)a2;
    }
  }

  return result;
}

uint64_t getEnumTag for RegexCompilationError(uint64_t a1)
{
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t destructiveInjectEnumTag for RegexCompilationError(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)__n128 result = a2 - 2;
    *(void *)(result + 8) = 0LL;
    LOBYTE(a2) = 2;
  }

  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for RegexCompilationError()
{
  return &type metadata for RegexCompilationError;
}

uint64_t initializeBufferWithCopyOfBuffer for AnyRegexOutput.ElementRepresentation(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for AnyRegexOutput.ElementRepresentation(uint64_t a1)
{
  if (*(void *)(a1 + 48) >= 2uLL) {
    __swift_destroy_boxed_opaque_existential_0(a1 + 24);
  }
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AnyRegexOutput.ElementRepresentation(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  int v4 = (_OWORD *)(a1 + 8);
  uint64_t v5 = (_OWORD *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 48);
  if (v6 == 1)
  {
    __int128 v7 = *(_OWORD *)(a2 + 24);
    *int v4 = *v5;
    *(_OWORD *)(a1 + 24) = v7;
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  }

  else
  {
    *int v4 = *v5;
    uint64_t v8 = (_OWORD *)(a1 + 24);
    uint64_t v9 = (_OWORD *)(a2 + 24);
    if (v6)
    {
      *(void *)(a1 + 48) = v6;
      (**(void (***)(_OWORD *, _OWORD *))(v6 - 8))(v8, v9);
    }

    else
    {
      __int128 v10 = *(_OWORD *)(a2 + 40);
      *uint64_t v8 = *v9;
      *(_OWORD *)(a1 + 40) = v10;
    }
  }

  uint64_t v11 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AnyRegexOutput.ElementRepresentation(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  int v4 = (__int128 *)(a1 + 8);
  uint64_t v5 = (__int128 *)(a2 + 8);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(a2 + 48);
  if (v6 == 1)
  {
    if (v7 == 1)
    {
      __int128 v8 = *v5;
      __int128 v9 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
LABEL_16:
      *int v4 = v8;
      v4[1] = v9;
      goto LABEL_17;
    }

    *int v4 = *v5;
    uint64_t v12 = (_OWORD *)(a1 + 24);
    __int128 v13 = (_OWORD *)(a2 + 24);
    uint64_t v14 = *(void *)(a2 + 48);
    if (v14)
    {
      *(void *)(a1 + 48) = v14;
      (**(void (***)(_OWORD *, _OWORD *))(v14 - 8))(v12, v13);
    }

    else
    {
      __int128 v17 = *(_OWORD *)(a2 + 40);
      *uint64_t v12 = *v13;
      *(_OWORD *)(a1 + 40) = v17;
    }
  }

  else
  {
    if (v7 != 1)
    {
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      int v4 = (__int128 *)(a1 + 24);
      uint64_t v15 = (__int128 *)(a2 + 24);
      uint64_t v16 = *(void *)(a2 + 48);
      if (v6)
      {
        if (v16)
        {
          __swift_assign_boxed_opaque_existential_0((uint64_t *)(a1 + 24), (uint64_t *)(a2 + 24));
          goto LABEL_17;
        }

        __swift_destroy_boxed_opaque_existential_0(a1 + 24);
      }

      else if (v16)
      {
        *(void *)(a1 + 48) = v16;
        (**(void (***)(uint64_t, uint64_t))(v16 - 8))(a1 + 24, a2 + 24);
        goto LABEL_17;
      }

      __int128 v8 = *v15;
      __int128 v9 = *(_OWORD *)(a2 + 40);
      goto LABEL_16;
    }

    outlined destroy of (range: Range<String.Index>, value: Any?)?( a1 + 8,  &demangling cache variable for type metadata for (range: Range<String.Index>, value: Any?));
    __int128 v11 = v5[1];
    __int128 v10 = v5[2];
    *int v4 = *v5;
    v4[1] = v11;
    v4[2] = v10;
  }

__n128 __swift_memcpy82_8(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  __int128 v5 = *(_OWORD *)(a2 + 64);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for AnyRegexOutput.ElementRepresentation(uint64_t a1, uint64_t a2)
{
  __int128 v4 = (_OWORD *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  __int128 v5 = (_OWORD *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6 == 1) {
    goto LABEL_4;
  }
  if (*(void *)(a2 + 48) == 1LL)
  {
    outlined destroy of (range: Range<String.Index>, value: Any?)?( a1 + 8,  &demangling cache variable for type metadata for (range: Range<String.Index>, value: Any?));
LABEL_4:
    __int128 v7 = v4[1];
    *__int128 v5 = *v4;
    v5[1] = v7;
    _OWORD v5[2] = v4[2];
    goto LABEL_8;
  }

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  __int128 v8 = (_OWORD *)(a1 + 24);
  __int128 v9 = (_OWORD *)(a2 + 24);
  if (v6) {
    __swift_destroy_boxed_opaque_existential_0(a1 + 24);
  }
  __int128 v10 = *(_OWORD *)(a2 + 40);
  *__int128 v8 = *v9;
  *(_OWORD *)(a1 + 40) = v10;
LABEL_8:
  uint64_t v11 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v11;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnyRegexOutput.ElementRepresentation(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 82)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 64);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AnyRegexOutput.ElementRepresentation( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 72) = 0LL;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 80) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 82) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 82) = 0;
    }
    if (a2) {
      *(void *)(result + 64) = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AnyRegexOutput.ElementRepresentation()
{
  return &type metadata for AnyRegexOutput.ElementRepresentation;
}

ValueMetadata *type metadata accessor for MatchingOptions()
{
  return &type metadata for MatchingOptions;
}

void *type metadata accessor for MatchingOptions.Representation()
{
  return &unk_189C49600;
}

uint64_t type metadata instantiation function for FixedPatternConsumer()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t destroy for FixedPatternConsumer(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 24) - 8LL) + 8LL))();
}

uint64_t initializeWithCopy for FixedPatternConsumer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t assignWithCopy for FixedPatternConsumer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t initializeWithTake for FixedPatternConsumer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t assignWithTake for FixedPatternConsumer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

__n128 __swift_memcpy113_8(uint64_t a1, __int128 *a2)
{
  __int128 v2 = *a2;
  __int128 v3 = a2[1];
  __int128 v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  __int128 v6 = a2[5];
  __int128 v7 = a2[6];
  *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t type metadata instantiation function for RegexMatchesCollection()
{
  return swift_allocateGenericValueMetadata();
}

__n128 __swift_memcpy96_8(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  __int128 v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t type metadata completion function for SplitCollection( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for RangesCollection(319LL, *(void *)(a1 + 16), *(void *)(a1 + 24), a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for SplitCollection(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v3 - 8);
  int v7 = *(_DWORD *)(v6 + 80);
  uint64_t v52 = *(void *)(v5 + 64) + v7;
  uint64_t v53 = v6;
  uint64_t v8 = *(void *)(v6 + 64);
  swift_getAssociatedConformanceWitness();
  uint64_t v51 = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(v51 - 8);
  int v10 = *(_DWORD *)(v9 + 80);
  uint64_t v11 = v10;
  uint64_t v12 = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(_DWORD *)(v13 + 80);
  uint64_t v15 = v14 | v11;
  unint64_t v16 = ((v14 | v11) + v8 + (v52 & ~(unint64_t)v7)) & ~(v14 | v11);
  uint64_t v49 = v10;
  uint64_t v50 = v9;
  uint64_t v17 = *(void *)(v9 + 64);
  uint64_t v18 = v17 + v10;
  uint64_t v19 = (v17 + v11) & ~v11;
  uint64_t v20 = *(unsigned int *)(v9 + 84);
  uint64_t v21 = v19 + v17;
  if ((_DWORD)v20) {
    size_t v22 = v19 + v17;
  }
  else {
    size_t v22 = v21 + 1;
  }
  size_t __n = v22;
  int v23 = *(_DWORD *)(v5 + 80) | v7;
  if ((v15 | (unint64_t)(v23 & 0xF8)) <= 7
    && ((v23 | *(_DWORD *)(v13 + 80) | v10) & 0x100000) == 0
    && ((v16 + *(void *)(v13 + 64) + ((v22 + v14) & ~v14) + 7) & 0xFFFFFFFFFFFFFFF8LL) + 9 <= 0x18)
  {
    uint64_t v43 = v18;
    unint64_t v44 = v16 + *(void *)(v13 + 64) + ((v22 + v14) & ~v14);
    uint64_t v47 = *(void *)(v12 - 8);
    uint64_t v48 = v12;
    uint64_t v28 = ~v15;
    uint64_t v45 = ~v14;
    uint64_t v46 = *(_DWORD *)(v13 + 80);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v53 + 16))( ((unint64_t)a1 + v52) & ~(unint64_t)v7,  ((unint64_t)a2 + v52) & ~(unint64_t)v7,  v3);
    uint64_t v29 = (_BYTE *)(((((unint64_t)a1 + v52) & ~(unint64_t)v7) + v8 + v15) & v28);
    uint64_t v30 = (unsigned __int8 *)(((((unint64_t)a2 + v52) & ~(unint64_t)v7) + v8 + v15) & v28);
    uint64_t v27 = a1;
    uint64_t v42 = v21;
    if ((_DWORD)v20)
    {
      uint64_t v31 = v50;
      uint64_t v32 = v51;
      unint64_t v33 = v44;
      size_t v34 = __n;
      if (!(*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v50 + 48))(v30, v20, v51))
      {
LABEL_26:
        unint64_t v38 = *(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v31 + 16);
        v38(v29, v30, v32);
        v38((_BYTE *)((unint64_t)&v29[v43] & ~v49), (unsigned __int8 *)((unint64_t)&v30[v43] & ~v49), v32);
        if (!(_DWORD)v20) {
          v29[v42] = 0;
        }
        goto LABEL_28;
      }
    }

    else
    {
      int v35 = v30[v21];
      uint64_t v31 = v50;
      uint64_t v32 = v51;
      unint64_t v33 = v44;
      size_t v34 = __n;
      if (!v35) {
        goto LABEL_26;
      }
      int v36 = (v35 - 1) << (8 * v42);
      if ((_DWORD)v42)
      {
        else {
          int v37 = 4;
        }
        __asm { BR              X11 }
      }

      if (v36 == -1) {
        goto LABEL_26;
      }
    }

    memcpy(v29, v30, v34);
LABEL_28:
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v47 + 16))( (unint64_t)&v29[v46 + v34] & v45,  (unint64_t)&v30[v46 + v34] & v45,  v48);
    unint64_t v39 = ((unint64_t)a1 + v33 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v40 = ((unint64_t)a2 + v33 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    *(void *)unint64_t v39 = *(void *)v40;
    *(_BYTE *)(v39 + 8) = *(_BYTE *)(v40 + 8);
    return v27;
  }

  uint64_t v26 = *a2;
  *a1 = *a2;
  uint64_t v27 = (uint64_t *)(v26
                  + (((v15 & 0xF8 | v23 & 0xF8) ^ 0x1F8) & ((v15 | v23 & 0xF8) + 16)));
  swift_retain();
  return v27;
}

uint64_t destroy for SplitCollection(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(void *)(v3 - 8);
  unint64_t v8 = (v6 + a1 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  (*(void (**)(unint64_t, uint64_t))(v7 + 8))(v8, v3);
  unint64_t v9 = v8 + *(void *)(v7 + 64);
  swift_getAssociatedConformanceWitness();
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v13 = swift_getAssociatedTypeWitness();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(unsigned __int8 *)(v14 + 80);
  unint64_t v16 = (v9 + (v15 | v12)) & ~(v15 | v12);
  int v17 = *(_DWORD *)(v11 + 84);
  uint64_t v18 = *(void *)(v11 + 64);
  uint64_t v19 = v18 + v12;
  uint64_t v20 = ((v18 + v12) & ~v12) + v18;
  if (v17)
  {
    if ((*(unsigned int (**)(unint64_t, void, uint64_t))(v11 + 48))( v16,  *(unsigned int *)(v11 + 84),  v10))
    {
      goto LABEL_14;
    }

    goto LABEL_13;
  }

  if (!*(_BYTE *)(v16 + v20)) {
    goto LABEL_13;
  }
  int v21 = (*(unsigned __int8 *)(v16 + v20) - 1) << (8 * v20);
  if ((_DWORD)v20)
  {
    else {
      int v22 = 4;
    }
    __asm { BR              X11 }
  }

  if (v21 == -1)
  {
LABEL_13:
    int v23 = *(void (**)(unint64_t, uint64_t))(v11 + 8);
    v23(v16, v10);
    v23((v19 + v16) & ~v12, v10);
  }

uint64_t initializeWithCopy for SplitCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = *(void *)(v5 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v42 = a2;
  uint64_t v43 = a1;
  uint64_t v40 = ~v10;
  uint64_t v41 = v8 + v10;
  uint64_t v11 = (v8 + v10 + a1) & ~v10;
  uint64_t v12 = (v8 + v10 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v11, v12, v5);
  uint64_t v13 = *(void *)(v9 + 64);
  swift_getAssociatedConformanceWitness();
  uint64_t v14 = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v17 = swift_getAssociatedTypeWitness();
  uint64_t v18 = *(unsigned __int8 *)(*(void *)(v17 - 8) + 80LL);
  uint64_t v19 = v18 | v16;
  uint64_t v38 = *(void *)(v17 - 8);
  uint64_t v39 = v13;
  uint64_t v20 = (v18 | v16) + v13;
  uint64_t v36 = ~(v18 | v16);
  uint64_t v37 = v17;
  int v21 = (void *)((v20 + v11) & v36);
  int v22 = (_BYTE *)((v20 + v12) & v36);
  int v23 = *(_DWORD *)(v15 + 84);
  uint64_t v24 = *(void *)(v15 + 64);
  uint64_t v25 = v24 + v16;
  size_t v26 = ((v24 + v16) & ~v16) + v24;
  if (!v23)
  {
    if (!v22[v26]) {
      goto LABEL_17;
    }
    int v27 = (v22[v26] - 1) << (8 * v26);
    if ((_DWORD)v26)
    {
      else {
        int v28 = 4;
      }
      __asm { BR              X11 }
    }

    if (v27 == -1) {
      goto LABEL_17;
    }
LABEL_13:
    if (v23) {
      size_t v29 = v26;
    }
    else {
      size_t v29 = v26 + 1;
    }
    memcpy(v21, v22, v29);
    goto LABEL_19;
  }

uint64_t assignWithCopy for SplitCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24))(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = *(void *)(v5 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v54 = a1;
  uint64_t v55 = a2;
  uint64_t v58 = ~v10;
  uint64_t v59 = v8 + v10;
  uint64_t v11 = (v8 + v10 + a1) & ~v10;
  uint64_t v12 = (v8 + v10 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 24))(v11, v12, v5);
  uint64_t v13 = *(void *)(v9 + 64);
  swift_getAssociatedConformanceWitness();
  uint64_t v14 = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v17 = swift_getAssociatedTypeWitness();
  uint64_t v18 = *(unsigned __int8 *)(*(void *)(v17 - 8) + 80LL);
  uint64_t v19 = v18 | v16;
  uint64_t v56 = *(void *)(v17 - 8);
  uint64_t v57 = v13;
  uint64_t v20 = (v18 | v16) + v13;
  uint64_t v21 = v20 + v11;
  uint64_t v22 = ~(v18 | v16);
  int v23 = (_BYTE *)(v21 & v22);
  uint64_t v24 = (_BYTE *)((v20 + v12) & v22);
  uint64_t v25 = (_BYTE *)*(unsigned int *)(v15 + 84);
  uint64_t v26 = *(void *)(v15 + 64);
  size_t v27 = ((v26 + v16) & ~v16) + v26;
  uint64_t v53 = v17;
  uint64_t v49 = v26 + v16;
  uint64_t v50 = ~v16;
  if ((_DWORD)v25)
  {
    uint64_t v52 = ~(v18 | v16);
    int v28 = *(uint64_t (**)(void))(v15 + 48);
    int v29 = ((uint64_t (*)(_BYTE *, _BYTE *, uint64_t))v28)(v23, v25, v14);
    int v30 = (int)v25;
    uint64_t v25 = v24;
    int v51 = v30;
    int v31 = v28(v24);
    uint64_t v32 = v55;
    if (v29) {
      goto LABEL_3;
    }
    goto LABEL_27;
  }

  char v33 = 8 * v27;
  uint64_t v32 = v55;
  if (!v23[v27]) {
    goto LABEL_18;
  }
  int v34 = (v23[v27] - 1) << v33;
  if ((_DWORD)v27)
  {
    else {
      int v35 = 4;
    }
    __asm { BR              X12 }
  }

  if (v34 == -1)
  {
LABEL_18:
    if (!v24[v27]) {
      goto LABEL_33;
    }
    int v39 = (v24[v27] - 1) << v33;
    uint64_t v52 = v22;
    int v51 = 0;
    if ((_DWORD)v27)
    {
      else {
        int v40 = 4;
      }
      __asm { BR              X11 }
    }

    uint64_t v25 = v24;
    int v31 = v39 + 1;
LABEL_27:
    uint64_t v22 = v52;
    uint64_t v24 = v25;
    LODWORD(v25) = v51;
    if (v31)
    {
      uint64_t v41 = *(void (**)(_BYTE *, uint64_t))(v15 + 8);
      v41(v23, v14);
      v41((_BYTE *)((unint64_t)&v23[v49] & v50), v14);
      goto LABEL_29;
    }

uint64_t initializeWithTake for SplitCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = *(void *)(v5 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v42 = a2;
  uint64_t v43 = a1;
  uint64_t v40 = ~v10;
  uint64_t v41 = v8 + v10;
  uint64_t v11 = (v8 + v10 + a1) & ~v10;
  uint64_t v12 = (v8 + v10 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v11, v12, v5);
  uint64_t v13 = *(void *)(v9 + 64);
  swift_getAssociatedConformanceWitness();
  uint64_t v14 = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v17 = swift_getAssociatedTypeWitness();
  uint64_t v18 = *(unsigned __int8 *)(*(void *)(v17 - 8) + 80LL);
  uint64_t v19 = v18 | v16;
  uint64_t v38 = *(void *)(v17 - 8);
  uint64_t v39 = v13;
  uint64_t v20 = (v18 | v16) + v13;
  uint64_t v36 = ~(v18 | v16);
  uint64_t v37 = v17;
  uint64_t v21 = (void *)((v20 + v11) & v36);
  uint64_t v22 = (_BYTE *)((v20 + v12) & v36);
  int v23 = *(_DWORD *)(v15 + 84);
  uint64_t v24 = *(void *)(v15 + 64);
  uint64_t v25 = v24 + v16;
  size_t v26 = ((v24 + v16) & ~v16) + v24;
  if (!v23)
  {
    if (!v22[v26]) {
      goto LABEL_17;
    }
    int v27 = (v22[v26] - 1) << (8 * v26);
    if ((_DWORD)v26)
    {
      else {
        int v28 = 4;
      }
      __asm { BR              X11 }
    }

    if (v27 == -1) {
      goto LABEL_17;
    }
LABEL_13:
    if (v23) {
      size_t v29 = v26;
    }
    else {
      size_t v29 = v26 + 1;
    }
    memcpy(v21, v22, v29);
    goto LABEL_19;
  }

uint64_t assignWithTake for SplitCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40))(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = *(void *)(v5 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v54 = a1;
  uint64_t v55 = a2;
  uint64_t v58 = ~v10;
  uint64_t v59 = v8 + v10;
  uint64_t v11 = (v8 + v10 + a1) & ~v10;
  uint64_t v12 = (v8 + v10 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 40))(v11, v12, v5);
  uint64_t v13 = *(void *)(v9 + 64);
  swift_getAssociatedConformanceWitness();
  uint64_t v14 = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v17 = swift_getAssociatedTypeWitness();
  uint64_t v18 = *(unsigned __int8 *)(*(void *)(v17 - 8) + 80LL);
  uint64_t v19 = v18 | v16;
  uint64_t v56 = *(void *)(v17 - 8);
  uint64_t v57 = v13;
  uint64_t v20 = (v18 | v16) + v13;
  uint64_t v21 = v20 + v11;
  uint64_t v22 = ~(v18 | v16);
  int v23 = (_BYTE *)(v21 & v22);
  uint64_t v24 = (_BYTE *)((v20 + v12) & v22);
  uint64_t v25 = (_BYTE *)*(unsigned int *)(v15 + 84);
  uint64_t v26 = *(void *)(v15 + 64);
  size_t v27 = ((v26 + v16) & ~v16) + v26;
  uint64_t v53 = v17;
  uint64_t v49 = v26 + v16;
  uint64_t v50 = ~v16;
  if ((_DWORD)v25)
  {
    uint64_t v52 = ~(v18 | v16);
    int v28 = *(uint64_t (**)(void))(v15 + 48);
    int v29 = ((uint64_t (*)(_BYTE *, _BYTE *, uint64_t))v28)(v23, v25, v14);
    int v30 = (int)v25;
    uint64_t v25 = v24;
    int v51 = v30;
    int v31 = v28(v24);
    uint64_t v32 = v55;
    if (v29) {
      goto LABEL_3;
    }
    goto LABEL_27;
  }

  char v33 = 8 * v27;
  uint64_t v32 = v55;
  if (!v23[v27]) {
    goto LABEL_18;
  }
  int v34 = (v23[v27] - 1) << v33;
  if ((_DWORD)v27)
  {
    else {
      int v35 = 4;
    }
    __asm { BR              X12 }
  }

  if (v34 == -1)
  {
LABEL_18:
    if (!v24[v27]) {
      goto LABEL_33;
    }
    int v39 = (v24[v27] - 1) << v33;
    uint64_t v52 = v22;
    int v51 = 0;
    if ((_DWORD)v27)
    {
      else {
        int v40 = 4;
      }
      __asm { BR              X11 }
    }

    uint64_t v25 = v24;
    int v31 = v39 + 1;
LABEL_27:
    uint64_t v22 = v52;
    uint64_t v24 = v25;
    LODWORD(v25) = v51;
    if (v31)
    {
      uint64_t v41 = *(void (**)(_BYTE *, uint64_t))(v15 + 8);
      v41(v23, v14);
      v41((_BYTE *)((unint64_t)&v23[v49] & v50), v14);
      goto LABEL_29;
    }

uint64_t getEnumTagSinglePayload for SplitCollection(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v7 = *(void *)(v4 - 8);
  unsigned int v41 = *(_DWORD *)(v7 + 84);
  unsigned int v42 = *(_DWORD *)(v6 + 84);
  if (v41 <= v42) {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v8 = *(_DWORD *)(v7 + 84);
  }
  swift_getAssociatedConformanceWitness();
  uint64_t v40 = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(v40 - 8);
  int v10 = *(_DWORD *)(v9 + 84);
  if (v10) {
    unsigned int v11 = v10 - 1;
  }
  else {
    unsigned int v11 = 0;
  }
  uint64_t v12 = *(unsigned int *)(v9 + 84);
  uint64_t v13 = swift_getAssociatedTypeWitness();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(unsigned int *)(v14 + 84);
  else {
    unsigned int v16 = *(_DWORD *)(v14 + 84);
  }
  if (v16 <= v8) {
    unsigned int v17 = v8;
  }
  else {
    unsigned int v17 = v16;
  }
  if (v17 <= 0xFE) {
    unsigned int v18 = 254;
  }
  else {
    unsigned int v18 = v17;
  }
  uint64_t v19 = *(void *)(v9 + 64);
  if ((_DWORD)v12) {
    uint64_t v20 = *(void *)(v9 + 64);
  }
  else {
    uint64_t v20 = v19 + 1;
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v21 = v13;
  uint64_t v22 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v23 = *(void *)(v6 + 64) + v22;
  uint64_t v24 = *(void *)(v7 + 64);
  uint64_t v25 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v26 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v27 = v20 + ((v19 + v25) & ~v25) + v26;
  uint64_t v28 = (((v26 | v25) + v24 + (v23 & ~v22)) & ~(v26 | v25)) + *(void *)(v14 + 64) + (v27 & ~v26);
  uint64_t v29 = a1;
  if (v18 < a2)
  {
    unsigned int v30 = ((v28 + 7) & 0xFFFFFFF8) + 9;
    if (v30 < 4) {
      unsigned int v31 = ((a2 - v18 + 255) >> (8 * v30)) + 1;
    }
    else {
      unsigned int v31 = 2;
    }
    if (v31 >= 0x10000) {
      unsigned int v32 = 4;
    }
    else {
      unsigned int v32 = 2;
    }
    if (v31 < 0x100) {
      unsigned int v32 = 1;
    }
    if (v31 >= 2) {
      uint64_t v33 = v32;
    }
    else {
      uint64_t v33 = 0LL;
    }
    __asm { BR              X6 }
  }

  if (v17 < 0xFE)
  {
    unsigned int v35 = *(unsigned __int8 *)(((a1 + v28 + 7) & 0xFFFFFFFFFFFFF8LL) + 8);
    if (v35 >= 2) {
      return ((v35 + 2147483646) & 0x7FFFFFFF) + 1;
    }
    return 0LL;
  }

  if (v42 == v17)
  {
    int v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
    uint64_t v15 = v42;
    uint64_t v21 = AssociatedTypeWitness;
    return v34(v29, v15, v21);
  }

  uint64_t v29 = (v23 + a1) & ~v22;
  if (v41 == v17)
  {
    int v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v15 = v41;
    uint64_t v21 = v4;
    return v34(v29, v15, v21);
  }

  uint64_t v37 = (v29 + v24 + (v26 | v25)) & ~(v26 | v25);
  if (v11 < v15)
  {
    uint64_t v29 = (v27 + v37) & ~v26;
    int v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
    return v34(v29, v15, v21);
  }

  if (!(_DWORD)v12) {
    return 0LL;
  }
  int v38 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v37, v12, v40);
  BOOL v39 = v38 != 0;
  uint64_t result = (v38 - 1);
  if ((_DWORD)result == 0 || !v39) {
    return 0LL;
  }
  return result;
}

void storeEnumTagSinglePayload for SplitCollection(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 + 16);
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v7 = *(void *)(v5 - 8);
  if (*(_DWORD *)(v7 + 84) <= *(_DWORD *)(v6 + 84)) {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v8 = *(_DWORD *)(v7 + 84);
  }
  swift_getAssociatedConformanceWitness();
  uint64_t v9 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  int v10 = *(_DWORD *)(v9 + 84);
  if (v10) {
    unsigned int v11 = v10 - 1;
  }
  else {
    unsigned int v11 = 0;
  }
  int v12 = 0u;
  uint64_t v13 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v13 + 84) <= v11) {
    unsigned int v14 = v11;
  }
  else {
    unsigned int v14 = *(_DWORD *)(v13 + 84);
  }
  if (v14 <= v8) {
    unsigned int v15 = v8;
  }
  else {
    unsigned int v15 = v14;
  }
  if (v15 <= 0xFE) {
    unsigned int v16 = 254;
  }
  else {
    unsigned int v16 = v15;
  }
  uint64_t v17 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v18 = *(unsigned __int8 *)(v13 + 80);
  unint64_t v19 = ((v18 | v17)
       + *(void *)(v7 + 64)
       + ((*(void *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))) & ~(v18 | v17);
  uint64_t v20 = *(void *)(v9 + 64);
  uint64_t v21 = (v20 + v17) & ~v17;
  if (v10) {
    uint64_t v22 = v21 + v20;
  }
  else {
    uint64_t v22 = v21 + v20 + 1;
  }
  size_t v23 = ((((v22 + v18) & ~v18) + *(void *)(v13 + 64) + v19 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 9;
  if (v16 < a3)
  {
    else {
      unsigned int v24 = 2;
    }
    if (v24 >= 0x10000) {
      int v12 = 4;
    }
    else {
      int v12 = 2;
    }
    if (v24 < 0x100) {
      int v12 = 1;
    }
    if (v24 < 2) {
      int v12 = 0;
    }
  }

  if (v16 < a2)
  {
    else {
      int v25 = (~(_BYTE)v16 + a2);
    }
    bzero(a1, v23);
    if ((_DWORD)v23 == 1) {
      *a1 = v25;
    }
    else {
      *(_DWORD *)a1 = v25;
    }
    __asm { BR              X10 }
  }

  __asm { BR              X23 }

void sub_182D844A0()
{
  *(_BYTE *)(v1 + specialized Compiler.ByteCodeGen.emitAlternationGen<A>(_:withBacktracking:_:)(*(void *)(v3 + 16), v2) = v0;
}

void sub_182D844A8()
{
  *(_DWORD *)(v0 + specialized Compiler.ByteCodeGen.emitAlternationGen<A>(_:withBacktracking:_:)(*(void *)(v3 + 16), v2) = 0;
  if (v1) {
    JUMPOUT(0x182D844B0LL);
  }
}

void sub_182D84518()
{
  *int v1 = v0;
}

void sub_182D8453C()
{
  *(_WORD *)(v1 + specialized Compiler.ByteCodeGen.emitAlternationGen<A>(_:withBacktracking:_:)(*(void *)(v3 + 16), v2) = v0;
}

void sub_182D84544()
{
  *(_DWORD *)(v1 + specialized Compiler.ByteCodeGen.emitAlternationGen<A>(_:withBacktracking:_:)(*(void *)(v3 + 16), v2) = v0;
}

void sub_182D8454C()
{
  *(_WORD *)&v3[v5] = 0;
  if (v4)
  {
    if (v2 < 0xFE) {
      JUMPOUT(0x182D84520LL);
    }
    if (v2 >= v4) {
      JUMPOUT(0x182D84558LL);
    }
    if ((_DWORD)v1)
    {
      else {
        int v0 = 4;
      }
      bzero(v3, v1);
      __asm { BR              X10 }
    }
  }

void sub_182D84630()
{
  *(_WORD *)uint64_t v1 = v0;
  *(_BYTE *)(v1 + 2) = BYTE2(v0);
}

void sub_182D84640()
{
  *uint64_t v1 = v0;
}

void sub_182D84744()
{
  *uint64_t v1 = v0;
}

void sub_182D8474C()
{
  *(_WORD *)uint64_t v1 = v0;
  *(_BYTE *)(v1 + 2) = BYTE2(v0);
}

void sub_182D8475C()
{
  *uint64_t v1 = v0;
}

void sub_182D84764()
{
  *uint64_t v1 = v0;
}

uint64_t initializeWithCopy for RegexMatchesCollection(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  __int128 v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v5;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v6 = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_retain();
  if (v6)
  {
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(void *)(a1 + 64) = v6;
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    __int128 v7 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v7;
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
  }

  return a1;
}

uint64_t assignWithCopy for RegexMatchesCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  uint64_t v8 = *(void *)(a2 + 64);
  if (!*(void *)(a1 + 64))
  {
    if (v8)
    {
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return a1;
    }

uint64_t assignWithTake for RegexMatchesCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  __int128 v7 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v7;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_release();
  if (!*(void *)(a1 + 64)) {
    goto LABEL_5;
  }
  uint64_t v10 = *(void *)(a2 + 64);
  if (!v10)
  {
    uint64_t v11 = type metadata accessor for Regex.Match(0LL, *(void *)(a3 + 16), v8, v9);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))(a1 + 56, v11);
LABEL_5:
    __int128 v12 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v12;
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    return a1;
  }

  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v10;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for RegexMatchesCollection(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 96)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(specialized Compiler.ByteCodeGen.emitAlternationGen<A>(_:withBacktracking:_:)(*(void *)(v3 + 16), v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RegexMatchesCollection(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0LL;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 96) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 96) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

uint64_t type metadata completion function for RangesCollection(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (v3 <= 0x3F)
  {
    uint64_t v4 = swift_checkMetadataState();
    uint64_t AssociatedTypeWitness = v4;
    if (v6 <= 0x3F)
    {
      uint64_t AssociatedTypeWitness = type metadata accessor for RangesCollection.Index(319LL, v4, v1, v5);
      if (v7 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0LL;
      }
    }
  }

  return AssociatedTypeWitness;
}

uint64_t *initializeBufferWithCopyOfBuffer for RangesCollection(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v3 - 8);
  int v7 = *(_DWORD *)(v6 + 80);
  uint64_t v53 = *(void *)(v5 + 64) + v7;
  uint64_t v54 = v6;
  uint64_t v8 = *(void *)(v6 + 64);
  swift_getAssociatedConformanceWitness();
  uint64_t v52 = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(v52 - 8);
  int v10 = *(_DWORD *)(v9 + 80);
  uint64_t v11 = v10;
  uint64_t v12 = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(_DWORD *)(v13 + 80);
  uint64_t v15 = v14 | v11;
  unint64_t v16 = ((v14 | v11) + v8 + (v53 & ~(unint64_t)v7)) & ~(v14 | v11);
  uint64_t v17 = *(unsigned int *)(v9 + 84);
  uint64_t v51 = v9;
  uint64_t v18 = *(void *)(v9 + 64);
  uint64_t v19 = v10;
  uint64_t v20 = v18 + v10;
  uint64_t v21 = (v18 + v11) & ~v11;
  uint64_t v22 = v21 + v18;
  if ((_DWORD)v17) {
    size_t v23 = v21 + v18;
  }
  else {
    size_t v23 = v22 + 1;
  }
  uint64_t v55 = v8;
  size_t __n = v23;
  unint64_t v24 = v16 + *(void *)(v13 + 64) + ((v23 + v14) & ~v14);
  unint64_t v25 = v15 | (*(_BYTE *)(v5 + 80) | v7);
  if (v25 <= 7 && ((*(_DWORD *)(v5 + 80) | v7 | *(_DWORD *)(v13 + 80) | v10) & 0x100000) == 0 && v24 <= 0x18)
  {
    uint64_t v46 = v20;
    uint64_t v47 = *(_DWORD *)(v13 + 80);
    uint64_t v49 = *(void *)(v12 - 8);
    uint64_t v50 = v12;
    unint64_t v30 = ~(unint64_t)v7;
    uint64_t v31 = ~v15;
    uint64_t v48 = ~v14;
    uint64_t v32 = v17;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    unint64_t v33 = ((unint64_t)a1 + v53) & v30;
    unint64_t v34 = ((unint64_t)a2 + v53) & v30;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v54 + 16))(v33, v34, v3);
    unsigned int v35 = (_BYTE *)((v33 + v55 + v15) & v31);
    uint64_t v36 = (unsigned __int8 *)((v34 + v55 + v15) & v31);
    uint64_t v29 = a1;
    uint64_t v45 = v22;
    if ((_DWORD)v32)
    {
      uint64_t v37 = v51;
      uint64_t v38 = v52;
      size_t v39 = __n;
      if (!(*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v51 + 48))(v36, v32, v52))
      {
LABEL_26:
        uint64_t v43 = *(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v37 + 16);
        v43(v35, v36, v38);
        v43((_BYTE *)((unint64_t)&v35[v46] & ~v19), (unsigned __int8 *)((unint64_t)&v36[v46] & ~v19), v38);
        if (!(_DWORD)v32) {
          v35[v45] = 0;
        }
        goto LABEL_28;
      }
    }

    else
    {
      int v40 = v36[v22];
      uint64_t v37 = v51;
      uint64_t v38 = v52;
      size_t v39 = __n;
      if (!v40) {
        goto LABEL_26;
      }
      int v41 = (v40 - 1) << (8 * v45);
      if ((_DWORD)v45)
      {
        else {
          int v42 = 4;
        }
        __asm { BR              X11 }
      }

      if (v41 == -1) {
        goto LABEL_26;
      }
    }

    memcpy(v35, v36, v39);
LABEL_28:
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v49 + 16))( (unint64_t)&v35[v47 + v39] & v48,  (unint64_t)&v36[v47 + v39] & v48,  v50);
    return v29;
  }

  uint64_t v28 = *a2;
  *a1 = *a2;
  uint64_t v29 = (uint64_t *)(v28 + ((v25 + 16) & ~v25));
  swift_retain();
  return v29;
}

uint64_t destroy for RangesCollection(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(void *)(v3 - 8);
  unint64_t v8 = (v6 + a1 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  (*(void (**)(unint64_t, uint64_t))(v7 + 8))(v8, v3);
  unint64_t v9 = v8 + *(void *)(v7 + 64);
  swift_getAssociatedConformanceWitness();
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v13 = swift_getAssociatedTypeWitness();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(unsigned __int8 *)(v14 + 80);
  unint64_t v16 = (v9 + (v15 | v12)) & ~(v15 | v12);
  int v17 = *(_DWORD *)(v11 + 84);
  uint64_t v18 = *(void *)(v11 + 64);
  uint64_t v19 = v18 + v12;
  uint64_t v20 = ((v18 + v12) & ~v12) + v18;
  if (v17)
  {
    if ((*(unsigned int (**)(unint64_t, void, uint64_t))(v11 + 48))( v16,  *(unsigned int *)(v11 + 84),  v10))
    {
      goto LABEL_14;
    }

    goto LABEL_13;
  }

  if (!*(_BYTE *)(v16 + v20)) {
    goto LABEL_13;
  }
  int v21 = (*(unsigned __int8 *)(v16 + v20) - 1) << (8 * v20);
  if ((_DWORD)v20)
  {
    else {
      int v22 = 4;
    }
    __asm { BR              X11 }
  }

  if (v21 == -1)
  {
LABEL_13:
    size_t v23 = *(void (**)(unint64_t, uint64_t))(v11 + 8);
    v23(v16, v10);
    v23((v19 + v16) & ~v12, v10);
  }

uint64_t initializeWithCopy for RangesCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = *(void *)(v5 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = v8 + v10;
  uint64_t v35 = a1;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v12, v13, v5);
  uint64_t v14 = *(void *)(v9 + 64);
  swift_getAssociatedConformanceWitness();
  uint64_t v15 = swift_getAssociatedTypeWitness();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v18 = swift_getAssociatedTypeWitness();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = (v20 | v17) + v14;
  int v22 = (void *)((v21 + v12) & ~(v20 | v17));
  size_t v23 = (_BYTE *)((v21 + v13) & ~(v20 | v17));
  uint64_t v24 = *(unsigned int *)(v16 + 84);
  uint64_t v25 = *(void *)(v16 + 64);
  uint64_t v26 = v25 + v17;
  size_t v27 = ((v25 + v17) & ~v17) + v25;
  uint64_t v34 = v18;
  if (!(_DWORD)v24)
  {
    if (!v23[v27]) {
      goto LABEL_17;
    }
    int v28 = (v23[v27] - 1) << (8 * v27);
    if ((_DWORD)v27)
    {
      else {
        int v29 = 4;
      }
      __asm { BR              X11 }
    }

    if (v28 == -1) {
      goto LABEL_17;
    }
LABEL_13:
    if ((_DWORD)v24) {
      size_t v30 = v27;
    }
    else {
      size_t v30 = v27 + 1;
    }
    memcpy(v22, v23, v30);
    goto LABEL_19;
  }

uint64_t assignWithCopy for RangesCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24))(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v5 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = *(void *)(v7 + 64) + v9;
  uint64_t v47 = a1;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 24))(v11, v12, v5);
  uint64_t v13 = *(void *)(v8 + 64);
  swift_getAssociatedConformanceWitness();
  uint64_t v14 = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v17 = swift_getAssociatedTypeWitness();
  uint64_t v18 = *(unsigned __int8 *)(*(void *)(v17 - 8) + 80LL);
  uint64_t v19 = (v18 | v16) + v13;
  uint64_t v20 = (_BYTE *)((v19 + v11) & ~(v18 | v16));
  uint64_t v21 = (_BYTE *)((v19 + v12) & ~(v18 | v16));
  uint64_t v22 = *(unsigned int *)(v15 + 84);
  uint64_t v23 = *(void *)(v15 + 64);
  uint64_t v24 = ~v16;
  uint64_t v25 = v23 + v16;
  size_t v26 = ((v23 + v16) & ~v16) + v23;
  uint64_t v45 = *(void *)(v17 - 8);
  uint64_t v46 = v17;
  uint64_t v44 = ~v16;
  if ((_DWORD)v22)
  {
    size_t v27 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v15 + 48);
    int v28 = v27(v20, v22, v14);
    int v29 = v27(v21, v22, v14);
    if (v28)
    {
      if (!v29) {
        goto LABEL_38;
      }
      goto LABEL_27;
    }

    goto LABEL_25;
  }

  char v30 = 8 * v26;
  if (!v20[v26]) {
    goto LABEL_16;
  }
  int v31 = (v20[v26] - 1) << v30;
  if ((_DWORD)v26)
  {
    else {
      int v32 = 4;
    }
    __asm { BR              X12 }
  }

  if (v31 == -1)
  {
LABEL_16:
    if (!v21[v26]) {
      goto LABEL_31;
    }
    int v33 = (v21[v26] - 1) << v30;
    if ((_DWORD)v26)
    {
      else {
        int v34 = 4;
      }
      __asm { BR              X11 }
    }

    int v29 = v33 + 1;
LABEL_25:
    uint64_t v24 = v44;
    if (v29)
    {
      uint64_t v35 = *(void (**)(_BYTE *, uint64_t))(v15 + 8);
      v35(v20, v14);
      v35((_BYTE *)((unint64_t)&v20[v25] & v44), v14);
      goto LABEL_27;
    }

LABEL_31:
    uint64_t v37 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v15 + 24);
    v37(v20, v21, v14);
    v37((_BYTE *)((unint64_t)&v20[v25] & v24), (_BYTE *)((unint64_t)&v21[v25] & v24), v14);
LABEL_32:
    uint64_t v38 = v46;
    uint64_t v39 = v47;
    uint64_t v40 = v45;
    goto LABEL_33;
  }

  if (v21[v26] && (v21[v26] - 1) << v30 != -1)
  {
LABEL_27:
    if ((_DWORD)v22) {
      size_t v36 = v26;
    }
    else {
      size_t v36 = v26 + 1;
    }
    memcpy(v20, v21, v36);
    goto LABEL_32;
  }

    uint64_t v37 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v15 + 40);
    v37(v20, v21, v14);
    v37((_BYTE *)((unint64_t)&v20[v25] & v24), (_BYTE *)((unint64_t)&v21[v25] & v24), v14);
LABEL_32:
    uint64_t v38 = v46;
    uint64_t v39 = v47;
    uint64_t v40 = v45;
    goto LABEL_33;
  }

  if (v21[v26] && (v21[v26] - 1) << v30 != -1)
  {
LABEL_27:
    if ((_DWORD)v22) {
      size_t v36 = v26;
    }
    else {
      size_t v36 = v26 + 1;
    }
    memcpy(v20, v21, v36);
    goto LABEL_32;
  }

uint64_t initializeWithTake for RangesCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = *(void *)(v5 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = v8 + v10;
  uint64_t v35 = a1;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v12, v13, v5);
  uint64_t v14 = *(void *)(v9 + 64);
  swift_getAssociatedConformanceWitness();
  uint64_t v15 = swift_getAssociatedTypeWitness();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v18 = swift_getAssociatedTypeWitness();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = (v20 | v17) + v14;
  uint64_t v22 = (void *)((v21 + v12) & ~(v20 | v17));
  uint64_t v23 = (_BYTE *)((v21 + v13) & ~(v20 | v17));
  uint64_t v24 = *(unsigned int *)(v16 + 84);
  uint64_t v25 = *(void *)(v16 + 64);
  uint64_t v26 = v25 + v17;
  size_t v27 = ((v25 + v17) & ~v17) + v25;
  uint64_t v34 = v18;
  if (!(_DWORD)v24)
  {
    if (!v23[v27]) {
      goto LABEL_17;
    }
    int v28 = (v23[v27] - 1) << (8 * v27);
    if ((_DWORD)v27)
    {
      else {
        int v29 = 4;
      }
      __asm { BR              X11 }
    }

    if (v28 == -1) {
      goto LABEL_17;
    }
LABEL_13:
    if ((_DWORD)v24) {
      size_t v30 = v27;
    }
    else {
      size_t v30 = v27 + 1;
    }
    memcpy(v22, v23, v30);
    goto LABEL_19;
  }

uint64_t assignWithTake for RangesCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40))(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v5 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = *(void *)(v7 + 64) + v9;
  uint64_t v47 = a1;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 40))(v11, v12, v5);
  uint64_t v13 = *(void *)(v8 + 64);
  swift_getAssociatedConformanceWitness();
  uint64_t v14 = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v17 = swift_getAssociatedTypeWitness();
  uint64_t v18 = *(unsigned __int8 *)(*(void *)(v17 - 8) + 80LL);
  uint64_t v19 = (v18 | v16) + v13;
  uint64_t v20 = (_BYTE *)((v19 + v11) & ~(v18 | v16));
  uint64_t v21 = (_BYTE *)((v19 + v12) & ~(v18 | v16));
  uint64_t v22 = *(unsigned int *)(v15 + 84);
  uint64_t v23 = *(void *)(v15 + 64);
  uint64_t v24 = ~v16;
  uint64_t v25 = v23 + v16;
  size_t v26 = ((v23 + v16) & ~v16) + v23;
  uint64_t v45 = *(void *)(v17 - 8);
  uint64_t v46 = v17;
  uint64_t v44 = ~v16;
  if ((_DWORD)v22)
  {
    size_t v27 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v15 + 48);
    int v28 = v27(v20, v22, v14);
    int v29 = v27(v21, v22, v14);
    if (v28)
    {
      if (!v29) {
        goto LABEL_38;
      }
      goto LABEL_27;
    }

    goto LABEL_25;
  }

  char v30 = 8 * v26;
  if (!v20[v26]) {
    goto LABEL_16;
  }
  int v31 = (v20[v26] - 1) << v30;
  if ((_DWORD)v26)
  {
    else {
      int v32 = 4;
    }
    __asm { BR              X12 }
  }

  if (v31 == -1)
  {
LABEL_16:
    if (!v21[v26]) {
      goto LABEL_31;
    }
    int v33 = (v21[v26] - 1) << v30;
    if ((_DWORD)v26)
    {
      else {
        int v34 = 4;
      }
      __asm { BR              X11 }
    }

    int v29 = v33 + 1;
LABEL_25:
    uint64_t v24 = v44;
    if (v29)
    {
      uint64_t v35 = *(void (**)(_BYTE *, uint64_t))(v15 + 8);
      v35(v20, v14);
      v35((_BYTE *)((unint64_t)&v20[v25] & v44), v14);
      goto LABEL_27;
    }

uint64_t getEnumTagSinglePayload for RangesCollection(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v3 - 8);
  unsigned int v37 = *(_DWORD *)(v6 + 84);
  unsigned int v38 = *(_DWORD *)(v5 + 84);
  if (v37 <= v38) {
    unsigned int v7 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v7 = *(_DWORD *)(v6 + 84);
  }
  swift_getAssociatedConformanceWitness();
  uint64_t v36 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v36 - 8);
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  if ((_DWORD)v9) {
    unsigned int v10 = v9 - 1;
  }
  else {
    unsigned int v10 = 0;
  }
  uint64_t v11 = swift_getAssociatedTypeWitness();
  uint64_t result = a2;
  uint64_t v13 = *(void *)(v11 - 8);
  uint64_t v14 = *(unsigned int *)(v13 + 84);
  else {
    unsigned int v15 = *(_DWORD *)(v13 + 84);
  }
  if (v15 <= v7) {
    unsigned int v15 = v7;
  }
  uint64_t v16 = *(void *)(v8 + 64);
  if ((_DWORD)v9) {
    uint64_t v17 = *(void *)(v8 + 64);
  }
  else {
    uint64_t v17 = v16 + 1;
  }
  if (!a2) {
    return result;
  }
  uint64_t v18 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v19 = *(void *)(v5 + 64) + v18;
  uint64_t v20 = *(void *)(v6 + 64);
  uint64_t v21 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v22 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v23 = v22 | v21;
  uint64_t v24 = v17 + ((v16 + v21) & ~v21) + v22;
  uint64_t v25 = a1;
  if (a2 > v15)
  {
    uint64_t v26 = ((v23 + v20 + (v19 & ~v18)) & ~v23) + *(void *)(v13 + 64) + (v24 & ~v22);
    char v27 = 8 * v26;
    unsigned int v29 = ((a2 - v15 + ~(-1 << v27)) >> v27) + 1;
    if (HIWORD(v29))
    {
      int v28 = *(_DWORD *)(a1 + v26);
      if (v28) {
        goto LABEL_25;
      }
    }

    else
    {
      if (v29 <= 0xFF)
      {
        if (v29 < 2) {
          goto LABEL_34;
        }
LABEL_18:
        int v28 = *(unsigned __int8 *)(a1 + v26);
        if (!*(_BYTE *)(a1 + v26)) {
          goto LABEL_34;
        }
LABEL_25:
        int v30 = (v28 - 1) << v27;
        if ((_DWORD)v26)
        {
          else {
            int v31 = 4;
          }
          __asm { BR              X12 }
        }

        return v15 + v30 + 1;
      }

      int v28 = *(unsigned __int16 *)(a1 + v26);
      if (*(_WORD *)(a1 + v26)) {
        goto LABEL_25;
      }
    }
  }

LABEL_34:
  if (!v15) {
    return 0LL;
  }
  if (v38 == v15)
  {
    int v32 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    uint64_t v14 = v38;
    uint64_t v11 = AssociatedTypeWitness;
    return v32(v25, v14, v11);
  }

  uint64_t v25 = (v19 + a1) & ~v18;
  if (v37 == v15)
  {
    int v32 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
    uint64_t v14 = v37;
    uint64_t v11 = v3;
    return v32(v25, v14, v11);
  }

  uint64_t v33 = (v25 + v20 + v23) & ~v23;
  if (v10 < v14)
  {
    uint64_t v25 = (v24 + v33) & ~v22;
    int v32 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
    return v32(v25, v14, v11);
  }

  if (!(_DWORD)v9) {
    return 0LL;
  }
  int v34 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v33, v9, v36);
  BOOL v35 = v34 != 0;
  uint64_t result = (v34 - 1);
  if ((_DWORD)result == 0 || !v35) {
    return 0LL;
  }
  return result;
}

void storeEnumTagSinglePayload for RangesCollection(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a4 + 16);
  uint64_t v5 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v6 = *(void *)(v4 - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84)) {
    unsigned int v7 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v7 = *(_DWORD *)(v6 + 84);
  }
  swift_getAssociatedConformanceWitness();
  uint64_t v8 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  int v9 = *(_DWORD *)(v8 + 84);
  if (v9) {
    unsigned int v10 = v9 - 1;
  }
  else {
    unsigned int v10 = 0;
  }
  unsigned int v11 = 0u;
  uint64_t v12 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v12 + 84) <= v10) {
    unsigned int v13 = v10;
  }
  else {
    unsigned int v13 = *(_DWORD *)(v12 + 84);
  }
  if (v13 <= v7) {
    unsigned int v14 = v7;
  }
  else {
    unsigned int v14 = v13;
  }
  uint64_t v15 = *(unsigned __int8 *)(v8 + 80);
  if (v9) {
    uint64_t v17 = ((*(void *)(v8 + 64) + v15) & ~v15) + *(void *)(v8 + 64);
  }
  else {
    uint64_t v17 = ((*(void *)(v8 + 64) + v15) & ~v15) + *(void *)(v8 + 64) + 1;
  }
  uint64_t v16 = *(unsigned __int8 *)(v12 + 80);
  size_t v18 = ((v17 + v16) & ~v16)
      + *(void *)(v12 + 64)
      + (((v16 | v15)
        + *(void *)(v6 + 64)
        + ((*(void *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))) & ~(v16 | v15));
  if (a3 > v14)
  {
    if (v18 <= 3)
    {
      unsigned int v19 = ((a3 - v14 + ~(-1 << (8 * v18))) >> (8 * v18)) + 1;
      if (HIWORD(v19))
      {
        unsigned int v11 = 4u;
      }

      else if (v19 >= 0x100)
      {
        unsigned int v11 = 2;
      }

      else
      {
        unsigned int v11 = v19 > 1;
      }
    }

    else
    {
      unsigned int v11 = 1u;
    }
  }

  if (v14 < a2)
  {
    unsigned int v20 = ~v14 + a2;
    if (v18 < 4)
    {
      if ((_DWORD)v18)
      {
        int v21 = v20 & ~(-1 << (8 * v18));
        bzero(a1, v18);
        if ((_DWORD)v18 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }

        else if ((_DWORD)v18 == 2)
        {
          *(_WORD *)a1 = v21;
        }

        else
        {
          *a1 = v21;
        }
      }
    }

    else
    {
      bzero(a1, v18);
      *(_DWORD *)a1 = v20;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X7 }

void sub_182D864E8()
{
  *(_BYTE *)(v1 + specialized Compiler.ByteCodeGen.emitAlternationGen<A>(_:withBacktracking:_:)(*(void *)(v3 + 16), v2) = v0;
}

void sub_182D864F0()
{
  *(_WORD *)(v1 + specialized Compiler.ByteCodeGen.emitAlternationGen<A>(_:withBacktracking:_:)(*(void *)(v3 + 16), v2) = v0;
}

void sub_182D865FC()
{
  _BYTE *v0 = v1;
}

void sub_182D86604()
{
  *(_WORD *)uint64_t v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_182D86614()
{
  _WORD *v0 = v1;
}

void sub_182D8661C()
{
  _DWORD *v0 = v1;
}

uint64_t type metadata accessor for RangesCollection.Index(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for RangesCollection.Index);
}

uint64_t type metadata completion function for RangesCollection.Index()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0LL;
    }
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for RangesCollection.Index(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v8 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = *(unsigned int *)(v5 + 84);
  uint64_t v9 = v8;
  uint64_t v29 = v6 + v8;
  size_t v10 = ((v6 + v9) & ~v9) + v6;
  size_t v30 = v10;
  uint64_t v31 = AssociatedTypeWitness;
  if ((_DWORD)v7) {
    size_t v11 = v10;
  }
  else {
    size_t v11 = v10 + 1;
  }
  uint64_t v12 = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(_DWORD *)(v13 + 80);
  size_t v15 = v11 + v14;
  if ((v14 | (unint64_t)v8) <= 7
    && ((*(_DWORD *)(v13 + 80) | v8) & 0x100000) == 0
    && ((v11 + v14) & ~v14) + *(void *)(v13 + 64) <= 0x18)
  {
    uint64_t v19 = v12;
    uint64_t v28 = ~v14;
    if ((_DWORD)v7)
    {
      unsigned int v20 = a2;
      int v21 = a2;
      uint64_t v22 = v31;
      if (!(*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v5 + 48))(v21, v7, v31))
      {
LABEL_26:
        uint64_t v26 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16);
        v26(a1, v20, v22);
        v26((uint64_t *)(((unint64_t)a1 + v29) & ~v9), (uint64_t *)(((unint64_t)v20 + v29) & ~v9), v22);
        if (!(_DWORD)v7) {
          *((_BYTE *)a1 + v30) = 0;
        }
        goto LABEL_28;
      }
    }

    else
    {
      unsigned int v20 = a2;
      int v23 = *((unsigned __int8 *)a2 + v30);
      uint64_t v22 = v31;
      if (!v23) {
        goto LABEL_26;
      }
      int v24 = (v23 - 1) << (8 * v30);
      if ((_DWORD)v30)
      {
        else {
          int v25 = 4;
        }
        __asm { BR              X11 }
      }

      if (v24 == -1) {
        goto LABEL_26;
      }
    }

    memcpy(a1, v20, v11);
LABEL_28:
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v13 + 16))( ((unint64_t)a1 + v15) & v28,  ((unint64_t)v20 + v15) & v28,  v19);
    return a1;
  }

  uint64_t v18 = *a2;
  *a1 = *a2;
  a1 = (uint64_t *)(v18 + (((v14 | v8) + 16) & ~(v14 | v8)));
  swift_retain();
  return a1;
}

uint64_t destroy for RangesCollection.Index(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  int v4 = *(_DWORD *)(v3 + 84);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = v5 + v6;
  uint64_t v8 = ((v5 + v6) & ~v6) + v5;
  if (v4)
  {
    if ((*(unsigned int (**)(uint64_t, void, uint64_t))(v3 + 48))( a1,  *(unsigned int *)(v3 + 84),  AssociatedTypeWitness))
    {
      goto LABEL_14;
    }

    goto LABEL_13;
  }

  if (!*(_BYTE *)(a1 + v8)) {
    goto LABEL_13;
  }
  int v9 = (*(unsigned __int8 *)(a1 + v8) - 1) << (8 * v8);
  if ((_DWORD)v8)
  {
    else {
      int v10 = 4;
    }
    __asm { BR              X11 }
  }

  if (v9 == -1)
  {
LABEL_13:
    size_t v11 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    v11(a1, AssociatedTypeWitness);
    v11((v7 + a1) & ~v6, AssociatedTypeWitness);
  }

void *initializeWithCopy for RangesCollection.Index(void *a1, _BYTE *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  int v6 = *(_DWORD *)(v5 + 84);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = v7 + v8;
  size_t v10 = ((v7 + v8) & ~v8) + v7;
  if (!v6)
  {
    if (!a2[v10]) {
      goto LABEL_17;
    }
    int v11 = (a2[v10] - 1) << (8 * v10);
    if ((_DWORD)v10)
    {
      else {
        int v12 = 4;
      }
      __asm { BR              X11 }
    }

    if (v11 == -1) {
      goto LABEL_17;
    }
LABEL_13:
    if (v6) {
      size_t v13 = v10;
    }
    else {
      size_t v13 = v10 + 1;
    }
    memcpy(a1, a2, v13);
    goto LABEL_19;
  }

  if ((*(unsigned int (**)(_BYTE *, void, uint64_t))(v5 + 48))( a2,  *(unsigned int *)(v5 + 84),  AssociatedTypeWitness))
  {
    goto LABEL_13;
  }

_BYTE *assignWithCopy for RangesCollection.Index(_BYTE *a1, _BYTE *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = ~v8;
  size_t v10 = ((v7 + v8) & ~v8) + v7;
  uint64_t v27 = ~v8;
  uint64_t v28 = v7 + v8;
  if ((_DWORD)v6)
  {
    int v11 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v5 + 48);
    int v12 = v11(a1, v6, AssociatedTypeWitness);
    int v13 = v11(a2, v6, AssociatedTypeWitness);
    if (v12) {
      goto LABEL_3;
    }
    goto LABEL_27;
  }

  char v14 = 8 * v10;
  if (!a1[v10]) {
    goto LABEL_18;
  }
  int v15 = (a1[v10] - 1) << v14;
  if ((_DWORD)v10)
  {
    else {
      int v16 = 4;
    }
    __asm { BR              X12 }
  }

  if (v15 == -1)
  {
LABEL_18:
    if (!a2[v10]) {
      goto LABEL_33;
    }
    int v18 = (a2[v10] - 1) << v14;
    if ((_DWORD)v10)
    {
      else {
        int v19 = 4;
      }
      __asm { BR              X11 }
    }

    int v13 = v18 + 1;
LABEL_27:
    uint64_t v9 = v27;
    if (v13)
    {
      unsigned int v20 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
      v20(a1, AssociatedTypeWitness);
      v20((_BYTE *)((unint64_t)&a1[v28] & v27), AssociatedTypeWitness);
      goto LABEL_29;
    }

void *initializeWithTake for RangesCollection.Index(void *a1, _BYTE *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  int v6 = *(_DWORD *)(v5 + 84);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = v7 + v8;
  size_t v10 = ((v7 + v8) & ~v8) + v7;
  if (!v6)
  {
    if (!a2[v10]) {
      goto LABEL_17;
    }
    int v11 = (a2[v10] - 1) << (8 * v10);
    if ((_DWORD)v10)
    {
      else {
        int v12 = 4;
      }
      __asm { BR              X11 }
    }

    if (v11 == -1) {
      goto LABEL_17;
    }
LABEL_13:
    if (v6) {
      size_t v13 = v10;
    }
    else {
      size_t v13 = v10 + 1;
    }
    memcpy(a1, a2, v13);
    goto LABEL_19;
  }

  if ((*(unsigned int (**)(_BYTE *, void, uint64_t))(v5 + 48))( a2,  *(unsigned int *)(v5 + 84),  AssociatedTypeWitness))
  {
    goto LABEL_13;
  }

_BYTE *assignWithTake for RangesCollection.Index(_BYTE *a1, _BYTE *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = ~v8;
  size_t v10 = ((v7 + v8) & ~v8) + v7;
  uint64_t v27 = ~v8;
  uint64_t v28 = v7 + v8;
  if ((_DWORD)v6)
  {
    int v11 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v5 + 48);
    int v12 = v11(a1, v6, AssociatedTypeWitness);
    int v13 = v11(a2, v6, AssociatedTypeWitness);
    if (v12) {
      goto LABEL_3;
    }
    goto LABEL_27;
  }

  char v14 = 8 * v10;
  if (!a1[v10]) {
    goto LABEL_18;
  }
  int v15 = (a1[v10] - 1) << v14;
  if ((_DWORD)v10)
  {
    else {
      int v16 = 4;
    }
    __asm { BR              X12 }
  }

  if (v15 == -1)
  {
LABEL_18:
    if (!a2[v10]) {
      goto LABEL_33;
    }
    int v18 = (a2[v10] - 1) << v14;
    if ((_DWORD)v10)
    {
      else {
        int v19 = 4;
      }
      __asm { BR              X11 }
    }

    int v13 = v18 + 1;
LABEL_27:
    uint64_t v9 = v27;
    if (v13)
    {
      unsigned int v20 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
      v20(a1, AssociatedTypeWitness);
      v20((_BYTE *)((unint64_t)&a1[v28] & v27), AssociatedTypeWitness);
      goto LABEL_29;
    }

uint64_t getEnumTagSinglePayload for RangesCollection.Index(uint64_t a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  if ((_DWORD)v6) {
    unsigned int v7 = v6 - 1;
  }
  else {
    unsigned int v7 = 0;
  }
  uint64_t v8 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  if (v9 <= v7) {
    unsigned int v10 = v7;
  }
  else {
    unsigned int v10 = *(_DWORD *)(v8 + 84);
  }
  uint64_t v11 = *(void *)(v5 + 64);
  if ((_DWORD)v6) {
    uint64_t v12 = *(void *)(v5 + 64);
  }
  else {
    uint64_t v12 = v11 + 1;
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v13 = v12 + ((v11 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  uint64_t v14 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v15 = v13 + v14;
  if (a2 <= v10) {
    goto LABEL_29;
  }
  uint64_t v16 = (v15 & ~v14) + *(void *)(v8 + 64);
  char v17 = 8 * v16;
  unsigned int v19 = ((a2 - v10 + ~(-1 << v17)) >> v17) + 1;
  if (HIWORD(v19))
  {
    int v18 = *(_DWORD *)(a1 + v16);
    if (v18) {
      goto LABEL_20;
    }
  }

  else
  {
    if (v19 <= 0xFF)
    {
      if (v19 < 2) {
        goto LABEL_29;
      }
LABEL_13:
      int v18 = *(unsigned __int8 *)(a1 + v16);
      if (!*(_BYTE *)(a1 + v16)) {
        goto LABEL_29;
      }
LABEL_20:
      int v20 = (v18 - 1) << v17;
      if ((_DWORD)v16)
      {
        else {
          int v21 = 4;
        }
        __asm { BR              X12 }
      }

      return v10 + v20 + 1;
    }

    int v18 = *(unsigned __int16 *)(a1 + v16);
    if (*(_WORD *)(a1 + v16)) {
      goto LABEL_20;
    }
  }

void storeEnumTagSinglePayload for RangesCollection.Index(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  int v7 = *(_DWORD *)(v6 + 84);
  if (v7) {
    unsigned int v8 = v7 - 1;
  }
  else {
    unsigned int v8 = 0;
  }
  unsigned int v9 = 0u;
  uint64_t v10 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v10 + 84) <= v8) {
    unsigned int v11 = v8;
  }
  else {
    unsigned int v11 = *(_DWORD *)(v10 + 84);
  }
  uint64_t v12 = *(void *)(v6 + 64);
  unint64_t v13 = (v12 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  if (v7) {
    uint64_t v14 = v13 + v12;
  }
  else {
    uint64_t v14 = v13 + v12 + 1;
  }
  if (a3 > v11)
  {
    if (v15 > 3)
    {
      unsigned int v9 = 1u;
      if (v11 >= a2) {
        goto LABEL_13;
      }
LABEL_19:
      unsigned int v17 = ~v11 + a2;
      if (v15 < 4)
      {
        if ((_DWORD)v15)
        {
          int v18 = v17 & ~(-1 << (8 * v15));
          bzero(a1, v15);
          if ((_DWORD)v15 == 3)
          {
            *(_WORD *)a1 = v18;
            a1[2] = BYTE2(v18);
          }

          else if ((_DWORD)v15 == 2)
          {
            *(_WORD *)a1 = v18;
          }

          else
          {
            *a1 = v18;
          }
        }
      }

      else
      {
        bzero(a1, v15);
        *(_DWORD *)a1 = v17;
      }

      __asm { BR              X10 }
    }

    unsigned int v16 = ((a3 - v11 + ~(-1 << (8 * v15))) >> (8 * v15)) + 1;
    if (HIWORD(v16))
    {
      unsigned int v9 = 4u;
      if (v11 < a2) {
        goto LABEL_19;
      }
LABEL_13:
      __asm { BR              X14 }
    }

    if (v16 >= 0x100) {
      unsigned int v9 = 2;
    }
    else {
      unsigned int v9 = v16 > 1;
    }
  }

  if (v11 < a2) {
    goto LABEL_19;
  }
  goto LABEL_13;
}

void sub_182D87DB0()
{
  _WORD *v0 = v1;
  JUMPOUT(0x182D87D78LL);
}

void sub_182D87DB8()
{
  *(_WORD *)uint64_t v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
  JUMPOUT(0x182D87D78LL);
}

void sub_182D87DC8()
{
  _DWORD *v0 = v1;
  JUMPOUT(0x182D87D78LL);
}

uint64_t destroy for ZSearcher()
{
  return swift_release();
}

uint64_t initializeWithCopy for ZSearcher(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

void *assignWithCopy for ZSearcher(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

_OWORD *assignWithTake for ZSearcher(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ZSearcher(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ZSearcher(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 32) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Range(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = *(_DWORD *)(v6 + 80);
  uint64_t v9 = ~v8;
  uint64_t v10 = v7 + v8;
  unint64_t v11 = ((v7 + v8) & ~v8) + v7;
  if (v8 > 7 || (*(_DWORD *)(v6 + 80) & 0x100000) != 0 || v11 > 0x18)
  {
    uint64_t v14 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v14 + ((v8 + 16) & v9));
    swift_retain();
  }

  else
  {
    size_t v15 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16);
    v15(a1, a2, *(void *)(a3 + 16));
    v15((uint64_t *)(((unint64_t)v4 + v10) & v9), (uint64_t *)(((unint64_t)a2 + v10) & v9), v5);
  }

  return v4;
}

uint64_t destroy for Range(unint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v6 = *(uint64_t (**)(unint64_t, uint64_t))(v4 + 8);
  v6(a1, v3);
  return v6( (*(void *)(v4 + 64) + a1 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80),  v3);
}

unint64_t initializeWithCopy for Range(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16);
  v7(a1, a2, v5);
  v7( (*(void *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80),  (*(void *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80),  v5);
  return a1;
}

unint64_t assignWithCopy for Range(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 24);
  v7(a1, a2, v5);
  v7( (*(void *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80),  (*(void *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80),  v5);
  return a1;
}

unint64_t initializeWithTake for Range(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32);
  v7(a1, a2, v5);
  v7( (*(void *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80),  (*(void *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80),  v5);
  return a1;
}

unint64_t assignWithTake for Range(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 40);
  v7(a1, a2, v5);
  v7( (*(void *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80),  (*(void *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80),  v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for Range(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (!a2) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_18;
  }
  char v8 = 8 * v7;
  if (v7 <= 3)
  {
    unsigned int v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)(a1 + v7);
      if (!v9) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7)) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v10 < 2)
    {
LABEL_18:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0LL;
    }
  }

  int v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7)) {
    goto LABEL_18;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (!(_DWORD)v7) {
    return v5 + v11 + 1;
  }
  return ((uint64_t (*)(void))((char *)&loc_182D88340 + 4 * byte_182D9D09E[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for Range(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8LL);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        unsigned int v11 = 4u;
      }

      else if (v13 >= 0x100)
      {
        unsigned int v11 = 2;
      }

      else
      {
        unsigned int v11 = v13 > 1;
      }
    }

    else
    {
      unsigned int v11 = 1u;
    }
  }

  else
  {
    unsigned int v11 = 0u;
  }

  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        int v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }

        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }

        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }

    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X11 }

uint64_t getEnumTag for Optional(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8LL) + 48LL))(a1, 1LL);
}

uint64_t destructiveInjectEnumTag for Optional(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(a3 + 16) - 8LL) + 56LL))( a1,  a2,  1LL);
}

unint64_t lazy protocol witness table accessor for type MatchingOptions.Representation and conformance MatchingOptions.Representation()
{
  unint64_t result = lazy protocol witness table cache variable for type MatchingOptions.Representation and conformance MatchingOptions.Representation;
  if (!lazy protocol witness table cache variable for type MatchingOptions.Representation and conformance MatchingOptions.Representation)
  {
    unint64_t result = MEMORY[0x186E17958](&protocol conformance descriptor for MatchingOptions.Representation, &unk_189C49600);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type MatchingOptions.Representation and conformance MatchingOptions.Representation);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type MatchingOptions.Representation and conformance MatchingOptions.Representation;
  if (!lazy protocol witness table cache variable for type MatchingOptions.Representation and conformance MatchingOptions.Representation)
  {
    unint64_t result = MEMORY[0x186E17958](&protocol conformance descriptor for MatchingOptions.Representation, &unk_189C49600);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type MatchingOptions.Representation and conformance MatchingOptions.Representation);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type MatchingOptions.Representation and conformance MatchingOptions.Representation;
  if (!lazy protocol witness table cache variable for type MatchingOptions.Representation and conformance MatchingOptions.Representation)
  {
    unint64_t result = MEMORY[0x186E17958](&protocol conformance descriptor for MatchingOptions.Representation, &unk_189C49600);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type MatchingOptions.Representation and conformance MatchingOptions.Representation);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type MatchingOptions.Representation and conformance MatchingOptions.Representation;
  if (!lazy protocol witness table cache variable for type MatchingOptions.Representation and conformance MatchingOptions.Representation)
  {
    unint64_t result = MEMORY[0x186E17958](&protocol conformance descriptor for MatchingOptions.Representation, &unk_189C49600);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type MatchingOptions.Representation and conformance MatchingOptions.Representation);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type RegexSemanticLevel.Representation and conformance RegexSemanticLevel.Representation()
{
  unint64_t result = lazy protocol witness table cache variable for type RegexSemanticLevel.Representation and conformance RegexSemanticLevel.Representation;
  if (!lazy protocol witness table cache variable for type RegexSemanticLevel.Representation and conformance RegexSemanticLevel.Representation)
  {
    unint64_t result = MEMORY[0x186E17958]( &protocol conformance descriptor for RegexSemanticLevel.Representation,  &type metadata for RegexSemanticLevel.Representation);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RegexSemanticLevel.Representation and conformance RegexSemanticLevel.Representation);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type RegexWordBoundaryKind.Representation and conformance RegexWordBoundaryKind.Representation()
{
  unint64_t result = lazy protocol witness table cache variable for type RegexWordBoundaryKind.Representation and conformance RegexWordBoundaryKind.Representation;
  if (!lazy protocol witness table cache variable for type RegexWordBoundaryKind.Representation and conformance RegexWordBoundaryKind.Representation)
  {
    unint64_t result = MEMORY[0x186E17958]( &protocol conformance descriptor for RegexWordBoundaryKind.Representation,  &type metadata for RegexWordBoundaryKind.Representation);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RegexWordBoundaryKind.Representation and conformance RegexWordBoundaryKind.Representation);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type RegexRepetitionBehavior.Kind and conformance RegexRepetitionBehavior.Kind()
{
  unint64_t result = lazy protocol witness table cache variable for type RegexRepetitionBehavior.Kind and conformance RegexRepetitionBehavior.Kind;
  if (!lazy protocol witness table cache variable for type RegexRepetitionBehavior.Kind and conformance RegexRepetitionBehavior.Kind)
  {
    unint64_t result = MEMORY[0x186E17958]( &protocol conformance descriptor for RegexRepetitionBehavior.Kind,  &type metadata for RegexRepetitionBehavior.Kind);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RegexRepetitionBehavior.Kind and conformance RegexRepetitionBehavior.Kind);
  }

  return result;
}

uint64_t associated type witness table accessor for ExpressibleByIntegerLiteral.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral in TypedInt<A>()
{
  return MEMORY[0x1896187A8];
}

void base witness table accessor for Equatable in TypedInt<A>()
{
}

void base witness table accessor for Collection in <> TypedIndex<A, B>()
{
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in <> TypedIndex<A, B>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return associated type witness table accessor for Collection.Indices : BidirectionalCollection in <> TypedIndex<A, B>( a1,  a2,  a3,  (uint64_t)&protocol conformance descriptor for <> TypedIndex<A, B>,  MEMORY[0x189617A18]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in <> TypedIndex<A, B>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return associated type witness table accessor for Collection.Indices : BidirectionalCollection in <> TypedIndex<A, B>( a1,  a2,  a3,  (uint64_t)&protocol conformance descriptor for <> TypedIndex<A, B>,  MEMORY[0x18961A5C8]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : MutableCollection in <> TypedIndex<A, B>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return associated type witness table accessor for Collection.Indices : BidirectionalCollection in <> TypedIndex<A, B>( a1,  a2,  a3,  (uint64_t)&protocol conformance descriptor for <> TypedIndex<A, B>,  MEMORY[0x18961A5D0]);
}

uint64_t base witness table accessor for BidirectionalCollection in <> TypedIndex<A, B>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 - 8) + 8LL);
  return MEMORY[0x186E17958](&protocol conformance descriptor for <> TypedIndex<A, B>, a1, &v4);
}

uint64_t associated type witness table accessor for Collection.Indices : RandomAccessCollection in <> TypedIndex<A, B>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return associated type witness table accessor for Collection.Indices : BidirectionalCollection in <> TypedIndex<A, B>( a1,  a2,  a3,  (uint64_t)&protocol conformance descriptor for <> TypedIndex<A, B>,  MEMORY[0x189617A20]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in <> TypedIndex<A, B>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return associated type witness table accessor for Collection.Indices : BidirectionalCollection in <> TypedIndex<A, B>( a1,  a2,  a3,  (uint64_t)&protocol conformance descriptor for <> TypedIndex<A, B>,  MEMORY[0x18961A5E0]);
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in <> TypedIndex<A, B>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void *)(a3 - 8);
  uint64_t v8 = MEMORY[0x186E17958](a4, a2, &v9);
  return MEMORY[0x186E17958](a5, a1, &v8);
}

void associated type witness table accessor for Sequence.Iterator : IteratorProtocol in TypedIndex<A, B>()
{
}

void base witness table accessor for Sequence in TypedIndex<A, B>()
{
}

void associated type witness table accessor for Collection.Index : Comparable in TypedIndex<A, B>()
{
}

void associated type witness table accessor for Collection.Indices : Collection in TypedIndex<A, B>()
{
}

void associated type witness table accessor for Collection.SubSequence : Collection in TypedIndex<A, B>()
{
}

_UNKNOWN **associated type witness table accessor for ProcessorProtocol.Instruction : InstructionProtocol in Processor()
{
  return &protocol witness table for Instruction;
}

unint64_t instantiation function for generic protocol witness table for Processor(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Processor and conformance Processor();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type Processor and conformance Processor()
{
  unint64_t result = lazy protocol witness table cache variable for type Processor and conformance Processor;
  if (!lazy protocol witness table cache variable for type Processor and conformance Processor)
  {
    unint64_t result = MEMORY[0x186E17958](&protocol conformance descriptor for Processor, &type metadata for Processor);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Processor and conformance Processor);
  }

  return result;
}

uint64_t instantiation function for generic protocol witness table for ZSearcher<A>(uint64_t a1)
{
  uint64_t result = MEMORY[0x186E17958](&protocol conformance descriptor for ZSearcher<A>);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> PredicateSearcher<A>( uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  uint64_t result = MEMORY[0x186E17958](&protocol conformance descriptor for <> PredicateSearcher<A>, a2, &v5);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for PredicateSearcher<A>(uint64_t a1)
{
  uint64_t result = MEMORY[0x186E17958](&protocol conformance descriptor for PredicateSearcher<A>);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for CollectionSearcher.Searched : Collection in PatternOrEmpty<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t instantiation function for generic protocol witness table for <> NaivePatternSearcher<A, B>( uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v5 = *a3;
  uint64_t result = MEMORY[0x186E17958](&protocol conformance descriptor for <> NaivePatternSearcher<A, B>, a2, &v5);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for NaivePatternSearcher<A, B>(uint64_t a1)
{
  uint64_t result = MEMORY[0x186E17958](&protocol conformance descriptor for NaivePatternSearcher<A, B>);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> ConsumerSearcher<A>( uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v8 = *a3;
  uint64_t v5 = v8;
  *(void *)(a1 + 8) = MEMORY[0x186E17958](&protocol conformance descriptor for <> ConsumerSearcher<A>, a2, &v8);
  uint64_t v7 = *(void *)(v5 + 8);
  uint64_t result = MEMORY[0x186E17958](&protocol conformance descriptor for <> ConsumerSearcher<A>, a2, &v7);
  *(void *)(a1 + 16) = result;
  return result;
}

{
  uint64_t result;
  uint64_t v6;
  uint64_t v6 = *a3;
  *(void *)(a1 + 8) = MEMORY[0x186E17958](&protocol conformance descriptor for <> ConsumerSearcher<A>, a2, &v6);
  uint64_t result = MEMORY[0x186E17958](&protocol conformance descriptor for ConsumerSearcher<A>, a2);
  *(void *)(a1 + 16) = result;
  return result;
}

{
  uint64_t result;
  uint64_t v5;
  uint64_t v5 = *a3;
  uint64_t result = MEMORY[0x186E17958](&protocol conformance descriptor for <> ConsumerSearcher<A>, a2, &v5);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> ConsumerSearcher<A>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)a3 + 8LL);
  uint64_t result = MEMORY[0x186E17958](&protocol conformance descriptor for <> ConsumerSearcher<A>, a2, &v5);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> ConsumerSearcher<A>(uint64_t a1)
{
  uint64_t result = MEMORY[0x186E17958](&protocol conformance descriptor for ConsumerSearcher<A>);
  *(void *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for Sequence in RegexMatchesCollection<A>()
{
}

void associated type witness table accessor for Collection.Index : Comparable in RegexMatchesCollection<A>()
{
}

void base witness table accessor for Equatable in RegexMatchesCollection<A>.Index()
{
}

void associated type witness table accessor for Sequence.Iterator : IteratorProtocol in RegexMatchesCollection<A>()
{
}

void associated type witness table accessor for Sequence.Iterator : IteratorProtocol in ReversedMatchesCollection<A>()
{
}

void base witness table accessor for Equatable in MatchesCollection<A>.Index()
{
}

void base witness table accessor for Sequence in MatchesCollection<A>()
{
}

void associated type witness table accessor for Collection.Index : Comparable in MatchesCollection<A>()
{
}

void associated type witness table accessor for Sequence.Iterator : IteratorProtocol in MatchesCollection<A>()
{
}

uint64_t instantiation function for generic protocol witness table for <> PredicateConsumer<A>( uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  uint64_t result = MEMORY[0x186E17958](&protocol conformance descriptor for <> PredicateConsumer<A>, a2, &v5);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for PredicateConsumer<A>(uint64_t a1)
{
  uint64_t result = MEMORY[0x186E17958](&protocol conformance descriptor for PredicateConsumer<A>);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for CollectionConsumer.Consumed : BidirectionalCollection in <> PredicateConsumer<A>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(void *)(a3 - 8);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateConsumer<A>(uint64_t a1)
{
  uint64_t result = MEMORY[0x186E17958](&protocol conformance descriptor for PredicateConsumer<A>);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for CollectionConsumer.Consumed : Collection in PredicateConsumer<A>( uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 24);
}

uint64_t associated type witness table accessor for CollectionConsumer.Consumed : BidirectionalCollection in <> ManyConsumer<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t instantiation function for generic protocol witness table for <> ManyConsumer<A>(uint64_t a1)
{
  uint64_t result = MEMORY[0x186E17958](&protocol conformance descriptor for ManyConsumer<A>);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for CollectionConsumer.Consumed : Collection in ManyConsumer<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t instantiation function for generic protocol witness table for <> FixedPatternConsumer<A, B>( uint64_t a1)
{
  uint64_t result = MEMORY[0x186E17958](&protocol conformance descriptor for FixedPatternConsumer<A, B>);
  *(void *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for Equatable in RangesCollection<A>.Index()
{
}

uint64_t associated type witness table accessor for CollectionConsumer.Consumed : Collection in FixedPatternConsumer<A, B>( uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 32);
}

void associated type witness table accessor for Sequence.Iterator : IteratorProtocol in SplitCollection<A>()
{
}

void base witness table accessor for Sequence in RegexRangesCollection<A>()
{
}

void base witness table accessor for Sequence in RangesCollection<A>()
{
}

void associated type witness table accessor for Collection.Index : Comparable in RangesCollection<A>()
{
}

void associated type witness table accessor for Sequence.Iterator : IteratorProtocol in RegexRangesCollection<A>()
{
}

void associated type witness table accessor for Sequence.Iterator : IteratorProtocol in RangesCollection<A>()
{
}

uint64_t type metadata accessor for RangesIterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for RangesIterator);
}

uint64_t partial apply for implicit closure #1 in RegexRangesCollection.Iterator.next()()
{
  return swift_bridgeObjectRelease();
}

uint64_t outlined consume of Regex<A1.RegexOutput>.Match?<A><A1>(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  return result;
}

uint64_t type metadata accessor for RegexMatchesCollection.Index( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for RegexMatchesCollection.Index);
}

uint64_t type metadata accessor for Executor(uint64_t a1)
{
  return type metadata accessor for MEProgram(a1, (uint64_t *)&type metadata singleton initialization cache for Executor);
}

uint64_t outlined release of Processor(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 200);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  MEMORY[0x186E17880](v3);
  return a1;
}

uint64_t outlined assign with take of Processor._StoredCapture(__int128 *a1, uint64_t a2)
{
  __int128 v4 = *a1;
  *(_BYTE *)(a2 + 16) = *((_BYTE *)a1 + 16);
  *(_OWORD *)a2 = v4;
  uint64_t v5 = (_OWORD *)(a2 + 24);
  if (*(void *)(a2 + 48)) {
    __swift_destroy_boxed_opaque_existential_0(a2 + 24);
  }
  __int128 v6 = *(__int128 *)((char *)a1 + 40);
  *uint64_t v5 = *(__int128 *)((char *)a1 + 24);
  v5[1] = v6;
  uint64_t v7 = *((void *)a1 + 7);
  *(_BYTE *)(a2 + 64) = *((_BYTE *)a1 + 64);
  *(void *)(a2 + 56) = v7;
  return a2;
}

uint64_t type metadata accessor for Engine(uint64_t a1)
{
  return type metadata accessor for MEProgram(a1, (uint64_t *)&type metadata singleton initialization cache for Engine);
}

uint64_t outlined init with copy of MEProgram(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of Processor._StoredCapture(uint64_t a1)
{
  if (*(void *)(a1 + 48)) {
    __swift_destroy_boxed_opaque_existential_0(a1 + 24);
  }
  return a1;
}

uint64_t outlined init with copy of Processor._StoredCapture(__int128 *a1, uint64_t a2)
{
  __int128 v4 = *a1;
  *(_BYTE *)(a2 + 16) = *((_BYTE *)a1 + 16);
  *(_OWORD *)a2 = v4;
  uint64_t v5 = (_OWORD *)(a2 + 24);
  __int128 v6 = (__int128 *)((char *)a1 + 24);
  uint64_t v7 = *((void *)a1 + 6);
  if (v7)
  {
    *(void *)(a2 + 48) = v7;
    (**(void (***)(_OWORD *, _OWORD *))(v7 - 8))(v5, v6);
  }

  else
  {
    __int128 v8 = *(__int128 *)((char *)a1 + 40);
    *uint64_t v5 = *v6;
    v5[1] = v8;
  }

  uint64_t v9 = *((void *)a1 + 7);
  *(_BYTE *)(a2 + 64) = *((_BYTE *)a1 + 64);
  *(void *)(a2 + 56) = v9;
  return a2;
}

uint64_t outlined consume of Processor.SavePoint?( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a8)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  return result;
}

uint64_t outlined init with take of DSLTree.QuantificationKind( uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

uint64_t outlined copy of RegexMatchesCollection<A>.Index<A>(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }

  return result;
}

uint64_t type metadata accessor for SplitCollection.Iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for SplitCollection.Iterator);
}

uint64_t partial apply for closure #1 in MatchesIterator.next()@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return closure #1 in MatchesIterator.next()(a1, a2, v3[4], v3[2], v3[3], a3);
}

uint64_t partial apply for thunk for @callee_guaranteed (@in_guaranteed Range<A.CollectionSearcher.Searched.Collection.Index>, @in_guaranteed A.MatchingCollectionSearcher.Match) -> (@out _MatchResult<A>)( uint64_t a1)
{
  return thunk for @callee_guaranteed (@in_guaranteed Range<A.CollectionSearcher.Searched.Collection.Index>, @in_guaranteed A.MatchingCollectionSearcher.Match) -> (@out _MatchResult<A>)( a1,  *(uint64_t (**)(uint64_t, uint64_t))(v1 + 32));
}

uint64_t type metadata accessor for _MatchResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _MatchResult);
}

uint64_t type metadata accessor for MatchesIterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MatchesIterator);
}

uint64_t type metadata accessor for MatchesCollection.Index(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for MatchesCollection.Index);
}

uint64_t partial apply for closure #1 in ReversedMatchesCollection.Iterator.next()@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return closure #1 in ReversedMatchesCollection.Iterator.next()(a1, a2, v3[4], v3[2], v3[3], a3);
}

uint64_t partial apply for thunk for @callee_guaranteed (@in_guaranteed Range<A.BackwardCollectionSearcher.BackwardSearched.Collection.Index>, @in_guaranteed A.BackwardMatchingCollectionSearcher.Match) -> (@out _BackwardMatchResult<A>)( uint64_t a1)
{
  return thunk for @callee_guaranteed (@in_guaranteed Range<A.BackwardCollectionSearcher.BackwardSearched.Collection.Index>, @in_guaranteed A.BackwardMatchingCollectionSearcher.Match) -> (@out _BackwardMatchResult<A>)( a1,  *(uint64_t (**)(uint64_t, uint64_t))(v1 + 32));
}

uint64_t type metadata accessor for _BackwardMatchResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _BackwardMatchResult);
}

uint64_t type metadata accessor for ReversedMatchesCollection.Iterator( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for ReversedMatchesCollection.Iterator);
}

uint64_t type metadata accessor for PatternOrEmpty.State.Representation( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for PatternOrEmpty.State.Representation);
}

uint64_t type metadata accessor for PatternOrEmpty.State(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PatternOrEmpty.State);
}

unint64_t lazy protocol witness table accessor for type UInt64 and conformance UInt64()
{
  unint64_t result = lazy protocol witness table cache variable for type UInt64 and conformance UInt64;
  if (!lazy protocol witness table cache variable for type UInt64 and conformance UInt64)
  {
    unint64_t result = MEMORY[0x186E17958](MEMORY[0x18961A8F0], MEMORY[0x18961A8C8]);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type UInt64 and conformance UInt64);
  }

  return result;
}

uint64_t specialized MutableCollection<>.subscript.setter()
{
  uint64_t v0 = type metadata accessor for Slice();
  MEMORY[0x186E17958](MEMORY[0x18961A5E8], v0);
  return _writeBackMutableSlice<A, B>(_:bounds:slice:)();
}

uint64_t sub_182D893F8()
{
  return swift_deallocObject();
}

uint64_t sub_182D89424()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in CaptureTransform.init<A, B>(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in CaptureTransform.init<A, B>(_:)( a1,  *(void (**)(char *))(v2 + 32),  *(void *)(v2 + 16),  *(void *)(v2 + 24),  a2);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Substring) -> (@out B?, @error @owned Error)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Substring) -> (@out B?, @error @owned Error)( a1,  a2,  a3,  a4);
}

{
  uint64_t v4;
  uint64_t (*v5)(void *);
  void v7[4];
  v7[3] = a4;
  uint64_t v5 = *(uint64_t (**)(void *))(v4 + 32);
  v7[0] = a1;
  v7[1] = a2;
  void v7[2] = a3;
  return v5(v7);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Substring) -> (@out B?, @error @owned Error)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return thunk for @escaping @callee_guaranteed (@guaranteed Substring) -> (@out B?, @error @owned Error)( a1,  a2,  a3,  a4,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 32),  *(void *)(v5 + 24),  a5);
}

uint64_t *__swift_allocate_boxed_opaque_existential_0(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(_BYTE *)(*(void *)(a1[3] - 8) + 82LL) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }

  return v1;
}

uint64_t partial apply for closure #1 in CaptureTransform.init<A, B>(_:)@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in CaptureTransform.init<A, B>(_:)( a1,  *(void (**)(_BYTE *))(v2 + 32),  *(void *)(v2 + 16),  *(void *)(v2 + 24),  a2);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Substring) -> (@out B, @error @owned Error)@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return thunk for @escaping @callee_guaranteed (@guaranteed Substring) -> (@out B, @error @owned Error)( a1,  *(void *)(v2 + 24),  a2);
}

uint64_t __swift_deallocate_boxed_opaque_existential_0(uint64_t result)
{
  if ((*(_DWORD *)(*(void *)(*(void *)(result + 24) - 8LL) + 80LL) & 0x20000) != 0) {
    JUMPOUT(0x186E179F4LL);
  }
  return result;
}

uint64_t outlined init with copy of AnyRegexOutput.Element(uint64_t a1, uint64_t a2)
{
  return initializeWithCopy for AnyRegexOutput.Element(a2, a1);
}

uint64_t type metadata accessor for Compiler.ByteCodeGen(uint64_t a1)
{
  return type metadata accessor for MEProgram( a1,  (uint64_t *)&type metadata singleton initialization cache for Compiler.ByteCodeGen);
}

uint64_t type metadata accessor for MEProgram.Builder(uint64_t a1)
{
  return type metadata accessor for MEProgram( a1,  (uint64_t *)&type metadata singleton initialization cache for MEProgram.Builder);
}

uint64_t type metadata accessor for MEProgram(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t outlined copy of CaptureTransform?( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (result) {
    return outlined copy of CaptureTransform.Closure(a3, a4, a5);
  }
  return result;
}

uint64_t outlined copy of CaptureTransform.Closure(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 3u) {
    return swift_retain();
  }
  return result;
}

uint64_t outlined consume of CaptureTransform?( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (result) {
    return outlined consume of CaptureTransform.Closure(a3, a4, a5);
  }
  return result;
}

uint64_t sub_182D89624()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Compiler.ByteCodeGen.emitNode(_:)( uint64_t a1, uint64_t a2, __int128 *a3)
{
  if (*((_BYTE *)a3 + 16) == 1) {
    goto LABEL_4;
  }
  v11[5] = *(void *)a3;
  uint64_t v4 = (uint64_t)a3 + 24;
  outlined init with copy of Any?((uint64_t)a3 + 24, (uint64_t)&v7);
  uint64_t v5 = *((void *)&v8 + 1);
  outlined destroy of Any?((uint64_t)&v7);
  if (!v5)
  {
    String.subscript.getter();
    CaptureTransform.callAsFunction(_:)();
    return swift_bridgeObjectRelease();
  }

  if ((a3[1] & 1) != 0)
  {
LABEL_4:
    __int128 v7 = 0u;
    __int128 v8 = 0u;
    uint64_t v9 = 0LL;
    uint64_t v10 = 1LL;
  }

  else
  {
    __int128 v7 = *a3;
    outlined init with copy of Any?(v4, (uint64_t)&v8);
  }

  constructExistentialOutputComponent(from:component:optionalCount:)((uint64_t)&v7, 0LL, v11);
  outlined destroy of (range: Range<String.Index>, value: Any?)?( (uint64_t)&v7,  &demangling cache variable for type metadata for (range: Range<String.Index>, value: Any?)?);
  CaptureTransform.callAsFunction(_:)();
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v11);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed String, @in_guaranteed Processor._StoredCapture) -> (@out Any?, @error @owned Error)( void *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void, uint64_t))(v2 + 16))(*a1, a1[1], a2);
}

uint64_t outlined init with take of CaptureTransform.Closure(__int128 *a1, uint64_t a2)
{
  __int128 v2 = *a1;
  *(_BYTE *)(a2 + 16) = *((_BYTE *)a1 + 16);
  *(_OWORD *)a2 = v2;
  return a2;
}

uint64_t sub_182D897CC()
{
  return swift_deallocObject();
}

uint64_t outlined init with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t CanonicalSpecializedMetadata = swift_getCanonicalSpecializedMetadata();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(CanonicalSpecializedMetadata - 8) + 32LL))( a2,  a1,  CanonicalSpecializedMetadata);
  return a2;
}

void partial apply for closure #1 in Compiler.ByteCodeGen.coalescingCustomCharacterClassMembers(_:)( uint64_t a1)
{
}

uint64_t sub_182D8986C()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed String, @unowned Range<String.Index>) -> (@unowned String.Index?)@<X0>( void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void, void, void, void))(v3 + 16))(*a1, a1[1], *a2, a2[1]);
  *(void *)a3 = result;
  *(_BYTE *)(a3 + 8) = v6 & 1;
  return result;
}

uint64_t sub_182D898D0()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in DSLTree.CustomCharacterClass.Member.generateConsumer(_:)( unint64_t a1, unint64_t a2, unint64_t a3)
{
  return closure #1 in DSLTree.CustomCharacterClass.Member.generateConsumer(_:)( a1,  a2,  a3,  *(unsigned __int8 *)(v3 + 16),  *(_DWORD *)(v3 + 20),  *(_DWORD *)(v3 + 24),  *(unsigned __int8 *)(v3 + 28));
}

uint64_t sub_182D898F0()
{
  return swift_deallocObject();
}

uint64_t outlined consume of Set<Character>.Index._Variant(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined consume of (@escaping @callee_guaranteed (@guaranteed String, @unowned Range<String.Index>) -> (@unowned String.Index?))?( uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UInt32 and conformance UInt32()
{
  unint64_t result = lazy protocol witness table cache variable for type UInt32 and conformance UInt32;
  if (!lazy protocol witness table cache variable for type UInt32 and conformance UInt32)
  {
    unint64_t result = MEMORY[0x186E17958](MEMORY[0x18961A888], MEMORY[0x18961A860]);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type UInt32 and conformance UInt32);
  }

  return result;
}

uint64_t lazy protocol witness table accessor for type PartialRangeUpTo<String.Index> and conformance PartialRangeUpTo<A>( unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t CanonicalSpecializedMetadata = swift_getCanonicalSpecializedMetadata();
    uint64_t result = MEMORY[0x186E17958](a4, CanonicalSpecializedMetadata);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t partial apply for closure #1 in invert #1 (_:) in AST.Atom.CharacterProperty.generateConsumer(_:)( unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  return closure #1 in invert #1 (_:) in AST.Atom.CharacterProperty.generateConsumer(_:)( a1,  a2,  a3,  a4,  *(uint64_t (**)(void))(v4 + 16),  *(void *)(v4 + 24),  *(void *)(v4 + 32));
}

uint64_t sub_182D899B0()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #9 in closure #1 in AST.Atom.CharacterProperty.generateConsumer(_:)( uint64_t a1)
{
  return closure #7 in closure #1 in AST.Atom.CharacterProperty.generateConsumer(_:)( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  MEMORY[0x18961ACF8]) & 1;
}

uint64_t partial apply for closure #8 in closure #1 in AST.Atom.CharacterProperty.generateConsumer(_:)( uint64_t a1)
{
  return closure #7 in closure #1 in AST.Atom.CharacterProperty.generateConsumer(_:)( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  (uint64_t (*)(uint64_t))MEMORY[0x18961AD00]) & 1;
}

uint64_t partial apply for closure #7 in closure #1 in AST.Atom.CharacterProperty.generateConsumer(_:)( uint64_t a1)
{
  return closure #7 in closure #1 in AST.Atom.CharacterProperty.generateConsumer(_:)( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  (uint64_t (*)(uint64_t))MEMORY[0x18961ACF0]) & 1;
}

uint64_t sub_182D89A40()
{
  return objectdestroy_128Tm((uint64_t (*)(void))MEMORY[0x18961AB68]);
}

uint64_t partial apply for closure #6 in closure #1 in AST.Atom.CharacterProperty.generateConsumer(_:)( uint64_t a1)
{
  return partial apply for closure #6 in closure #1 in AST.Atom.CharacterProperty.generateConsumer(_:)( a1,  (uint64_t (*)(void))MEMORY[0x18961AB68],  (uint64_t (*)(uint64_t, uint64_t))closure #6 in closure #1 in AST.Atom.CharacterProperty.generateConsumer(_:));
}

uint64_t sub_182D89A60()
{
  return objectdestroy_128Tm((uint64_t (*)(void))MEMORY[0x18961A9E8]);
}

uint64_t partial apply for closure #5 in closure #1 in AST.Atom.CharacterProperty.generateConsumer(_:)( uint64_t a1)
{
  return partial apply for closure #6 in closure #1 in AST.Atom.CharacterProperty.generateConsumer(_:)( a1,  (uint64_t (*)(void))MEMORY[0x18961A9E8],  (uint64_t (*)(uint64_t, uint64_t))closure #5 in closure #1 in AST.Atom.CharacterProperty.generateConsumer(_:));
}

uint64_t sub_182D89A80()
{
  return swift_deallocObject();
}

BOOL partial apply for closure #4 in closure #1 in AST.Atom.CharacterProperty.generateConsumer(_:)()
{
  return closure #4 in closure #1 in AST.Atom.CharacterProperty.generateConsumer(_:)(*(double *)(v0 + 16));
}

uint64_t sub_182D89A98()
{
  return swift_deallocObject();
}

BOOL partial apply for closure #3 in closure #1 in AST.Atom.CharacterProperty.generateConsumer(_:)( uint64_t a1)
{
  return closure #3 in closure #1 in AST.Atom.CharacterProperty.generateConsumer(_:)( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24));
}

uint64_t sub_182D89AB0()
{
  return objectdestroy_128Tm((uint64_t (*)(void))MEMORY[0x18961CDA0]);
}

BOOL partial apply for closure #1 in scriptExtensionScalarPredicate(_:)(unsigned int a1)
{
  uint64_t v2 = 0LL;
  uint64_t v3 = static Unicode.Script.extensions(for:)(a1)[2];
  uint64_t v4 = (uint64_t (*)(uint64_t))MEMORY[0x18961CDA0];
  uint64_t v5 = MEMORY[0x18961CDB0];
  do
  {
    uint64_t v6 = v2;
    if (v3 == v2) {
      break;
    }
    ++v2;
    lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind( &lazy protocol witness table cache variable for type Unicode.Script and conformance Unicode.Script,  v4,  v5);
  }

  while ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0);
  swift_bridgeObjectRelease();
  return v3 != v6;
}

uint64_t sub_182D89BAC()
{
  return objectdestroy_128Tm((uint64_t (*)(void))MEMORY[0x18961CDA0]);
}

uint64_t partial apply for closure #1 in scriptScalarPredicate(_:)(uint64_t a1)
{
  return partial apply for closure #6 in closure #1 in AST.Atom.CharacterProperty.generateConsumer(_:)( a1,  (uint64_t (*)(void))MEMORY[0x18961CDA0],  (uint64_t (*)(uint64_t, uint64_t))closure #1 in scriptScalarPredicate(_:));
}

uint64_t objectdestroy_116Tm()
{
  return swift_deallocObject();
}

uint64_t sub_182D89BFC()
{
  return objectdestroy_128Tm((uint64_t (*)(void))MEMORY[0x18961AB00]);
}

uint64_t partial apply for closure #1 in categoryScalarPredicate(_:)(uint64_t a1)
{
  return partial apply for closure #6 in closure #1 in AST.Atom.CharacterProperty.generateConsumer(_:)( a1,  (uint64_t (*)(void))MEMORY[0x18961AB00],  closure #1 in categoryScalarPredicate(_:));
}

uint64_t sub_182D89C1C()
{
  return objectdestroy_128Tm((uint64_t (*)(void))MEMORY[0x18961AB00]);
}

uint64_t sub_182D89C28()
{
  return objectdestroy_128Tm((uint64_t (*)(void))MEMORY[0x18961AB00]);
}

uint64_t sub_182D89C34()
{
  return objectdestroy_128Tm((uint64_t (*)(void))MEMORY[0x18961AB00]);
}

uint64_t sub_182D89C40()
{
  return objectdestroy_128Tm((uint64_t (*)(void))MEMORY[0x18961AB00]);
}

uint64_t sub_182D89C4C()
{
  return objectdestroy_128Tm((uint64_t (*)(void))MEMORY[0x18961AB00]);
}

uint64_t sub_182D89C58()
{
  return objectdestroy_128Tm((uint64_t (*)(void))MEMORY[0x18961AB00]);
}

uint64_t sub_182D89C64()
{
  return objectdestroy_128Tm((uint64_t (*)(void))MEMORY[0x18961AB00]);
}

uint64_t sub_182D89C70()
{
  return objectdestroy_128Tm((uint64_t (*)(void))MEMORY[0x18961AB00]);
}

uint64_t sub_182D89C7C()
{
  return objectdestroy_128Tm((uint64_t (*)(void))MEMORY[0x18961AB00]);
}

uint64_t sub_182D89C88()
{
  return objectdestroy_128Tm((uint64_t (*)(void))MEMORY[0x18961AB00]);
}

uint64_t sub_182D89C94()
{
  return objectdestroy_128Tm((uint64_t (*)(void))MEMORY[0x18961AB00]);
}

uint64_t sub_182D89CA0()
{
  return objectdestroy_128Tm((uint64_t (*)(void))MEMORY[0x18961AB00]);
}

uint64_t sub_182D89CAC()
{
  return objectdestroy_128Tm((uint64_t (*)(void))MEMORY[0x18961AB00]);
}

uint64_t sub_182D89CB8()
{
  return objectdestroy_128Tm((uint64_t (*)(void))MEMORY[0x18961AB00]);
}

uint64_t sub_182D89CC4()
{
  return objectdestroy_128Tm((uint64_t (*)(void))MEMORY[0x18961AB00]);
}

uint64_t sub_182D89CD0()
{
  return objectdestroy_128Tm((uint64_t (*)(void))MEMORY[0x18961AB00]);
}

uint64_t sub_182D89CDC()
{
  return objectdestroy_128Tm((uint64_t (*)(void))MEMORY[0x18961AB00]);
}

uint64_t sub_182D89CE8()
{
  return objectdestroy_128Tm((uint64_t (*)(void))MEMORY[0x18961AB00]);
}

uint64_t sub_182D89CF4()
{
  return objectdestroy_128Tm((uint64_t (*)(void))MEMORY[0x18961AB00]);
}

uint64_t sub_182D89D00()
{
  return objectdestroy_128Tm((uint64_t (*)(void))MEMORY[0x18961AB00]);
}

uint64_t sub_182D89D0C()
{
  return objectdestroy_128Tm((uint64_t (*)(void))MEMORY[0x18961AB00]);
}

uint64_t sub_182D89D18()
{
  return objectdestroy_128Tm((uint64_t (*)(void))MEMORY[0x18961AB00]);
}

uint64_t sub_182D89D24()
{
  return objectdestroy_128Tm((uint64_t (*)(void))MEMORY[0x18961AB00]);
}

uint64_t sub_182D89D30()
{
  return objectdestroy_128Tm((uint64_t (*)(void))MEMORY[0x18961AB00]);
}

uint64_t sub_182D89D3C()
{
  return objectdestroy_128Tm((uint64_t (*)(void))MEMORY[0x18961AB00]);
}

uint64_t sub_182D89D48()
{
  return objectdestroy_128Tm((uint64_t (*)(void))MEMORY[0x18961AB00]);
}

uint64_t sub_182D89D54()
{
  return objectdestroy_128Tm((uint64_t (*)(void))MEMORY[0x18961AB00]);
}

uint64_t sub_182D89D60()
{
  return objectdestroy_128Tm((uint64_t (*)(void))MEMORY[0x18961AB00]);
}

uint64_t sub_182D89D6C()
{
  return objectdestroy_128Tm((uint64_t (*)(void))MEMORY[0x18961AB00]);
}

uint64_t objectdestroy_128Tm(uint64_t (*a1)(void))
{
  uint64_t v2 = a1(0LL);
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))( v1 + ((*(unsigned __int8 *)(*(void *)(v2 - 8) + 80LL) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v2 - 8) + 80LL)),  v2);
  return swift_deallocObject();
}

uint64_t partial apply for closure #6 in closure #1 in AST.Atom.CharacterProperty.generateConsumer(_:)( uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(a2(0LL) - 8) + 80LL);
  return a3(a1, v3 + ((v5 + 16) & ~v5));
}

BOOL partial apply for closure #1 in categoriesScalarPredicate(_:)(uint64_t a1)
{
  return closure #1 in categoriesScalarPredicate(_:)(a1, *(void *)(v1 + 16));
}

uint64_t partial apply for closure #1 in consumeCharacterWithLeadingScalar(_:)()
{
  uint64_t v1 = *(uint64_t (**)(unint64_t))(v0 + 16);
  unint64_t v2 = String.subscript.getter();
  unint64_t v4 = specialized Collection.first.getter(v2, v3);
  uint64_t result = swift_bridgeObjectRelease();
  if ((v4 & 0x100000000LL) != 0)
  {
    __break(1u);
  }

  else if ((v1(v4) & 1) != 0)
  {
    return String.index(after:)();
  }

  else
  {
    return 0LL;
  }

  return result;
}

uint64_t lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind( unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = a2(255LL);
    uint64_t result = MEMORY[0x186E17958](a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t outlined init with copy of (range: Range<String.Index>, value: Any?)?( uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

uint64_t partial apply for closure #1 in consumeScalar(_:)( unint64_t a1, unint64_t a2, unint64_t a3)
{
  __int128 v7 = *(uint64_t (**)(uint64_t))(v3 + 16);
  _StringGuts.validateScalarIndex(_:)(a3, a1, a2);
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    uint64_t v8 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
  }

  else
  {
    if ((a2 & 0x2000000000000000LL) != 0)
    {
      unint64_t v16 = a1;
      uint64_t v17 = a2 & 0xFFFFFFFFFFFFFFLL;
    }

    else if ((a1 & 0x1000000000000000LL) == 0)
    {
      _StringObject.sharedUTF8.getter();
    }

    uint64_t v8 = _decodeScalar(_:startingAt:)();
  }

  if ((v7(v8) & 1) == 0) {
    return 0LL;
  }
  unint64_t v9 = _StringGuts.validateScalarIndex(_:)(a3, a1, a2);
  if ((a2 & 0x1000000000000000LL) != 0) {
    return String.UnicodeScalarView._foreignIndex(after:)();
  }
  unint64_t v10 = v9 >> 16;
  if ((a2 & 0x2000000000000000LL) != 0)
  {
    unint64_t v16 = a1;
    uint64_t v17 = a2 & 0xFFFFFFFFFFFFFFLL;
    int v12 = *((unsigned __int8 *)&v16 + v10);
  }

  else
  {
    if ((a1 & 0x1000000000000000LL) != 0) {
      uint64_t v11 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    }
    else {
      uint64_t v11 = _StringObject.sharedUTF8.getter();
    }
    int v12 = *(unsigned __int8 *)(v11 + v10);
  }

  int v14 = (char)v12;
  unsigned int v15 = __clz(v12 ^ 0xFF) - 24;
  if (v14 >= 0) {
    LOBYTE(v15) = 1;
  }
  return ((v10 + v15) << 16) | 5;
}

BOOL partial apply for closure #1 in consumeName(_:opts:)(uint64_t a1)
{
  return closure #1 in consumeName(_:opts:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t partial apply for closure #1 in propertyScalarPredicate(_:)(uint64_t a1)
{
  return closure #1 in propertyScalarPredicate(_:)(a1, *(uint64_t (**)(char *))(v1 + 16));
}

uint64_t partial apply for closure #1 in Compiler.ByteCodeGen.emitMatcher(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed String, @unowned String.Index, @unowned Range<String.Index>) -> (@out (String.Index, Any)?, @error @owned Error)( void *a1, void *a2, void *a3)
{
  return (*(uint64_t (**)(void, void, void, void, void))(v3 + 16))(*a1, a1[1], *a2, *a3, a3[1]);
}

uint64_t partial apply for closure #1 in PrettyPrinter.printAsPattern(_:)()
{
  return PrettyPrinter.printAsPattern(convertedFromAST:isTopLevel:)(*(void *)(v0 + 16), 1);
}

uint64_t partial apply for closure #1 in PrettyPrinter.printInlineMatchingOptions()(uint64_t a1)
{
  return closure #1 in PrettyPrinter.printInlineMatchingOptions()(a1, *(void *)(v1 + 16), *(_BYTE *)(v1 + 24));
}

uint64_t partial apply for closure #2 in PrettyPrinter.printAsPattern(convertedFromAST:isTopLevel:)()
{
  return PrettyPrinter.printAsPattern(convertedFromAST:isTopLevel:)(*(void *)(v0 + 16), 0LL);
}

uint64_t partial apply for closure #1 in PrettyPrinter.printAsPattern(convertedFromAST:isTopLevel:)()
{
  return specialized Sequence.forEach(_:)(*(void *)(v0 + 16));
}

unint64_t lazy protocol witness table accessor for type DSLTree._Tree and conformance DSLTree._Tree()
{
  unint64_t result = lazy protocol witness table cache variable for type DSLTree._Tree and conformance DSLTree._Tree;
  if (!lazy protocol witness table cache variable for type DSLTree._Tree and conformance DSLTree._Tree)
  {
    unint64_t result = MEMORY[0x186E17958](&protocol conformance descriptor for DSLTree._Tree, &type metadata for DSLTree._Tree);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type DSLTree._Tree and conformance DSLTree._Tree);
  }

  return result;
}

uint64_t outlined destroy of (range: Range<String.Index>, value: Any?)?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

uint64_t outlined copy of PrettyPrinter.NodeToPrint(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    return swift_bridgeObjectRetain();
  }
  else {
    return swift_retain();
  }
}

uint64_t outlined release of RangesCollection<ZSearcher<Substring>>(uint64_t a1)
{
  return a1;
}

uint64_t outlined consume of PrettyPrinter.NodeToPrint(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    return swift_bridgeObjectRelease();
  }
  else {
    return swift_release();
  }
}

uint64_t partial apply for closure #4 in PrettyPrinter.printConcatenationAsPattern(_:isTopLevel:)()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = (unsigned __int8 *)(v1 + 48);
    do
    {
      uint64_t v6 = *((void *)v3 - 2);
      __int128 v7 = (void *)*((void *)v3 - 1);
      int v8 = *v3;
      if (v8 == 1)
      {
        swift_bridgeObjectRetain();
        v4._uint64_t countAndFlagsBits = v6;
        v4._uint64_t object = v7;
        PrettyPrinter.print(_:)(v4);
      }

      else
      {
        swift_retain();
        PrettyPrinter.printAsPattern(convertedFromAST:isTopLevel:)(v6, 0LL);
      }

      uint64_t result = outlined consume of PrettyPrinter.NodeToPrint(v6, (uint64_t)v7, v8);
      v3 += 24;
      --v2;
    }

    while (v2);
  }

  return result;
}

uint64_t outlined retain of RangesCollection<ZSearcher<Substring>>(uint64_t a1)
{
  return a1;
}

uint64_t outlined retain of Slice<RangesCollection<ZSearcher<Substring>>>(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of Slice<RangesCollection<ZSearcher<Substring>>>(uint64_t a1)
{
  return a1;
}

void partial apply for closure #2 in PrettyPrinter.printAsPattern(_:wrap:terminateLine:)(uint64_t a1)
{
}

void partial apply for closure #1 in $defer #1 () in PrettyPrinter.printAsPattern(_:wrap:terminateLine:)( uint64_t a1)
{
}

void partial apply for closure #3 in PrettyPrinter.printAsPattern(_:wrap:)(uint64_t a1)
{
}

void partial apply for closure #2 in PrettyPrinter.printAsPattern(_:wrap:)(uint64_t a1)
{
}

void partial apply for closure #1 in PrettyPrinter.printAsPattern(_:wrap:)(uint64_t a1)
{
}

void partial apply for closure #3 in PrettyPrinter.printAsPattern(_:wrap:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(v3 + 16);
  char v7 = *(_BYTE *)(v3 + 24);
  PrettyPrinter.indent()();
  v8._uint64_t countAndFlagsBits = a2;
  v8._uint64_t object = a3;
  PrettyPrinter.output(_:)(v8);
  uint64_t v11 = v6;
  char v12 = v7;
  v13.members._unint64_t rawValue = &v11;
  v13.Swift::Bool isInverted = 0;
  PrettyPrinter.printAsPattern(_:wrap:terminateLine:)(v13, 0, v9);
  v10._uint64_t countAndFlagsBits = 41LL;
  v10._uint64_t object = (void *)0xE100000000000000LL;
  PrettyPrinter.output(_:)(v10);
}

uint64_t outlined init with take of (offset: Int, element: (CaptureList.Capture, Processor._StoredCapture))?( uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

uint64_t outlined consume of PatternSegment(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    return swift_release();
  }
  else {
    return swift_bridgeObjectRelease();
  }
}

uint64_t lazy protocol witness table accessor for type [Any.Type] and conformance [A]( unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = MEMORY[0x186E17958](a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type LazyMapSequence<String, String> and conformance <> LazyMapSequence<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type LazyMapSequence<String, String> and conformance <> LazyMapSequence<A, B>;
  if (!lazy protocol witness table cache variable for type LazyMapSequence<String, String> and conformance <> LazyMapSequence<A, B>)
  {
    uint64_t CanonicalSpecializedMetadata = swift_getCanonicalSpecializedMetadata();
    unint64_t v2 = lazy protocol witness table accessor for type String and conformance String();
    unint64_t result = MEMORY[0x186E17958](MEMORY[0x189619610], CanonicalSpecializedMetadata, &v2);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LazyMapSequence<String, String> and conformance <> LazyMapSequence<A, B>);
  }

  return result;
}

BOOL partial apply for closure #1 in Collection.endOfPrefix(while:)()
{
  return ((*(uint64_t (**)(void))(v0 + 32))() & 1) == 0;
}

uint64_t partial apply for thunk for @callee_guaranteed (@in_guaranteed Regex<A>.Match) -> (@unowned String.Index?)@<X0>( uint64_t a1@<X8>)
{
  return partial apply for thunk for @callee_guaranteed (@in_guaranteed Regex<A>.Match) -> (@unowned String.Index?)(a1);
}

{
  uint64_t v1;
  uint64_t result;
  char v4;
  unint64_t result = (*(uint64_t (**)(void))(v1 + 24))();
  *(void *)a1 = result;
  *(_BYTE *)(a1 + 8) = v4 & 1;
  return result;
}

uint64_t outlined retain of RegexMatchesCollection<A>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = *(void *)(a1 + 64);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of RegexMatchesCollection<A>.Index<A>(v2, v3);
  return a1;
}

uint64_t objectdestroy_328Tm()
{
  if (*(void *)(v0 + 88))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in RegexMatchesCollection.Iterator.next()( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(v4 + 16);
  uint64_t v8 = *a1;
  __int128 v6 = *(_OWORD *)(a1 + 3);
  __int128 v9 = *(_OWORD *)(a1 + 1);
  __int128 v10 = v6;
  type metadata accessor for RegexMatchesCollection(0LL, v5, a3, a4);
  return RegexMatchesCollection.searchIndex(after:)((uint64_t)&v8);
}

uint64_t partial apply for thunk for @callee_guaranteed (@in_guaranteed Regex<A>.Match) -> (@out RegexMatchesCollection<A>.Index)()
{
  return (*(uint64_t (**)(void))(v0 + 24))();
}

uint64_t sub_182D8A828()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in RegexMatchesCollection.init(input:subjectBounds:searchBounds:regex:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)a2 = *(void *)a1;
  *(void *)(a2 + 8) = v2;
  *(void *)(a2 + 16) = v3;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t outlined retain of SubstringSearcher(uint64_t a1)
{
  return a1;
}

uint64_t outlined retain of SplitCollection<SubstringSearcher>(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of RangesCollection<SubstringSearcher>(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of SubstringSearcher(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of SplitCollection<SubstringSearcher>.Iterator(uint64_t a1)
{
  return a1;
}

uint64_t sub_182D8AA34()
{
  return swift_deallocObject();
}

uint64_t sub_182D8AA44()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #3 in Collection<>.split<A>(separator:maxSplits:omittingEmptySubsequences:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[0] = a2;
  v6[1] = a3;
  _OWORD v6[2] = a4;
  return MEMORY[0x186E178F8](a1, v6, a5);
}

uint64_t initializeBufferWithCopyOfBuffer for PatternSegment(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for PatternSegment( a1,  a2,  a3,  (void (*)(void, uint64_t, uint64_t))outlined copy of PatternSegment);
}

uint64_t outlined copy of PatternSegment(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    return swift_retain();
  }
  else {
    return swift_bridgeObjectRetain();
  }
}

uint64_t destroy for PatternSegment(uint64_t a1)
{
  return outlined consume of PatternSegment(*(void *)a1, *(void *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t *assignWithCopy for PatternSegment(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return assignWithCopy for PatternSegment( a1,  a2,  a3,  (void (*)(void, uint64_t, uint64_t))outlined copy of PatternSegment,  (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of PatternSegment);
}

uint64_t *assignWithTake for PatternSegment(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for PatternSegment( a1,  a2,  a3,  (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of PatternSegment);
}

ValueMetadata *type metadata accessor for PatternSegment()
{
  return &type metadata for PatternSegment;
}

uint64_t initializeBufferWithCopyOfBuffer for PrettyPrinter.NodeToPrint(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for PatternSegment( a1,  a2,  a3,  (void (*)(void, uint64_t, uint64_t))outlined copy of PrettyPrinter.NodeToPrint);
}

uint64_t destroy for PrettyPrinter.NodeToPrint(uint64_t a1)
{
  return outlined consume of PrettyPrinter.NodeToPrint(*(void *)a1, *(void *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for PatternSegment( uint64_t a1, uint64_t *a2, uint64_t a3, void (*a4)(void, uint64_t, uint64_t))
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = *((unsigned __int8 *)a2 + 16);
  a4(*a2, v6, v7);
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = v7;
  return a1;
}

uint64_t *assignWithCopy for PrettyPrinter.NodeToPrint(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return assignWithCopy for PatternSegment( a1,  a2,  a3,  (void (*)(void, uint64_t, uint64_t))outlined copy of PrettyPrinter.NodeToPrint,  (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of PrettyPrinter.NodeToPrint);
}

uint64_t *assignWithCopy for PatternSegment( uint64_t *a1, uint64_t *a2, uint64_t a3, void (*a4)(void, uint64_t, uint64_t), void (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  uint64_t v9 = *((unsigned __int8 *)a2 + 16);
  a4(*a2, v8, v9);
  uint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  uint64_t v12 = *((unsigned __int8 *)a1 + 16);
  *a1 = v7;
  a1[1] = v8;
  *((_BYTE *)a1 + 16) = v9;
  a5(v10, v11, v12);
  return a1;
}

uint64_t *assignWithTake for PrettyPrinter.NodeToPrint(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for PatternSegment( a1,  a2,  a3,  (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of PrettyPrinter.NodeToPrint);
}

uint64_t *assignWithTake for PatternSegment( uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  char v5 = *(_BYTE *)(a2 + 16);
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  uint64_t v8 = *((unsigned __int8 *)a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_BYTE *)a1 + 16) = v5;
  a4(v6, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for PatternSegment(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PatternSegment(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 255;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 17) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 17) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 16) = -(char)a2;
    }
  }

  return result;
}

uint64_t getEnumTag for PrettyPrinter.NodeToPrint(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t destructiveInjectEnumTag for PrettyPrinter.NodeToPrint(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for PrettyPrinter.NodeToPrint()
{
  return &type metadata for PrettyPrinter.NodeToPrint;
}

void *assignWithCopy for DSLTree(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for DSLTree(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x70 && *(_BYTE *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 112);
  }
  unsigned int v3 = ((((*(void *)a1 >> 57) & 0x78 | *(void *)a1 & 7) >> 2) & 0xFFFFFF9F | (32 * (*(void *)a1 & 3))) ^ 0x7F;
  if (v3 >= 0x6F) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for DSLTree(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x6F)
  {
    *(void *)unint64_t result = a2 - 112;
    if (a3 >= 0x70) {
      *(_BYTE *)(result + 8) = 1;
    }
  }

  else
  {
    if (a3 >= 0x70) {
      *(_BYTE *)(result + 8) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 5) & 3 | (4 * (-a2 & 0x7F));
      *(void *)unint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007LL;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for DSLTree._Tree()
{
  return &type metadata for DSLTree._Tree;
}

ValueMetadata *type metadata accessor for _SequenceRegister()
{
  return &type metadata for _SequenceRegister;
}

ValueMetadata *type metadata accessor for _ElementRegister()
{
  return &type metadata for _ElementRegister;
}

uint64_t getEnumTagSinglePayload for MEProgram.Builder.AddressFixup(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for MEProgram.Builder.AddressFixup(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_BYTE *)(result + 16) = 0;
    *(void *)unint64_t result = (a2 - 1);
    *(void *)(result + 8) = 0LL;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 17) = v3;
  return result;
}

ValueMetadata *type metadata accessor for MEProgram.Builder.AddressFixup()
{
  return &type metadata for MEProgram.Builder.AddressFixup;
}

uint64_t initializeBufferWithCopyOfBuffer for MEProgram.Builder(uint64_t a1, uint64_t *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = v4 + ((v3 + 16LL) & ~(unint64_t)v3);
    swift_retain();
  }

  else
  {
    uint64_t v7 = a1;
    *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
    uint64_t v8 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v8;
    uint64_t v9 = a2[5];
    *(void *)(a1 + 32) = a2[4];
    *(void *)(a1 + 40) = v9;
    uint64_t v10 = a2[7];
    *(void *)(a1 + 48) = a2[6];
    *(void *)(a1 + 56) = v10;
    uint64_t v11 = a2[9];
    *(void *)(a1 + 64) = a2[8];
    *(void *)(a1 + 72) = v11;
    uint64_t v12 = a2[11];
    *(void *)(a1 + 80) = a2[10];
    *(void *)(a1 + 88) = v12;
    __int128 v13 = *((_OWORD *)a2 + 6);
    __int128 v14 = *((_OWORD *)a2 + 7);
    *(void *)(a1 + 128) = a2[16];
    *(_BYTE *)(a1 + 136) = *((_BYTE *)a2 + 136);
    uint64_t v15 = a3[20];
    uint64_t v21 = (uint64_t)a2 + v15;
    uint64_t v22 = a1 + v15;
    *(_OWORD *)(a1 + 96) = v13;
    *(_OWORD *)(a1 + 112) = v14;
    uint64_t v16 = type metadata accessor for CaptureList();
    int v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16LL);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v20(v22, v21, v16);
    uint64_t v17 = a3[22];
    *(void *)(v7 + a3[21]) = *(uint64_t *)((char *)a2 + a3[21]);
    *(_BYTE *)(v7 + v17) = *((_BYTE *)a2 + v17);
    uint64_t v18 = a3[24];
    *(void *)(v7 + a3[23]) = *(uint64_t *)((char *)a2 + a3[23]);
    *(void *)(v7 + v18) = *(uint64_t *)((char *)a2 + v18);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  return v7;
}

uint64_t destroy for MEProgram.Builder(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 80);
  uint64_t v5 = type metadata accessor for CaptureList();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MEProgram.Builder(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  uint64_t v8 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v8;
  uint64_t v9 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v9;
  uint64_t v10 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v10;
  __int128 v11 = *(_OWORD *)(a2 + 96);
  __int128 v12 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  uint64_t v13 = a3[20];
  uint64_t v19 = a2 + v13;
  uint64_t v20 = a1 + v13;
  *(_OWORD *)(a1 + 96) = v11;
  *(_OWORD *)(a1 + 112) = v12;
  uint64_t v14 = type metadata accessor for CaptureList();
  uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16LL);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v18(v20, v19, v14);
  uint64_t v15 = a3[22];
  *(void *)(a1 + a3[21]) = *(void *)(a2 + a3[21]);
  *(_BYTE *)(a1 + v15) = *(_BYTE *)(a2 + v15);
  uint64_t v16 = a3[24];
  *(void *)(a1 + a3[23]) = *(void *)(a2 + a3[23]);
  *(void *)(a1 + v16) = *(void *)(a2 + v16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MEProgram.Builder(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  uint64_t v6 = *(void *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(void *)(a1 + 128) = v6;
  uint64_t v7 = a3[20];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for CaptureList();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24LL))(v8, v9, v10);
  *(void *)(a1 + a3[21]) = *(void *)(a2 + a3[21]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + a3[22]) = *(_BYTE *)(a2 + a3[22]);
  *(void *)(a1 + a3[23]) = *(void *)(a2 + a3[23]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[24]) = *(void *)(a2 + a3[24]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for MEProgram.Builder(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  __int128 v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  __int128 v7 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v7;
  __int128 v8 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v8;
  __int128 v9 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  uint64_t v10 = a3[20];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  *(_OWORD *)(a1 + 112) = v9;
  uint64_t v13 = type metadata accessor for CaptureList();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32LL))(v11, v12, v13);
  uint64_t v14 = a3[22];
  *(void *)(a1 + a3[21]) = *(void *)(a2 + a3[21]);
  *(_BYTE *)(a1 + v14) = *(_BYTE *)(a2 + v14);
  uint64_t v15 = a3[24];
  *(void *)(a1 + a3[23]) = *(void *)(a2 + a3[23]);
  *(void *)(a1 + v15) = *(void *)(a2 + v15);
  return a1;
}

uint64_t assignWithTake for MEProgram.Builder(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRelease();
  __int128 v6 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v6;
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  uint64_t v7 = a3[20];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for CaptureList();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40LL))(v8, v9, v10);
  *(void *)(a1 + a3[21]) = *(void *)(a2 + a3[21]);
  swift_bridgeObjectRelease();
  uint64_t v11 = a3[23];
  *(_BYTE *)(a1 + a3[22]) = *(_BYTE *)(a2 + a3[22]);
  *(void *)(a1 + v11) = *(void *)(a2 + v11);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[24]) = *(void *)(a2 + a3[24]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MEProgram.Builder()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_182D8B6FC(char *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for CaptureList();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( &a1[*(int *)(a3 + 80)],  a2,  v8);
  }

uint64_t storeEnumTagSinglePayload for MEProgram.Builder()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_182D8B784(char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)unint64_t result = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for CaptureList();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( &v5[*(int *)(a4 + 80)],  a2,  a2,  v7);
  }

  return result;
}

uint64_t type metadata completion function for MEProgram.Builder()
{
  uint64_t result = type metadata accessor for CaptureList();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

void *initializeBufferWithCopyOfBuffer for Compiler.ByteCodeGen(void *a1, void *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (void *)(v4 + ((v3 + 16LL) & ~(unint64_t)v3));
    swift_retain();
  }

  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    *(void *)uint64_t v9 = *(void *)((char *)a2 + v8);
    *((_WORD *)v9 + 4) = *(_WORD *)((char *)a2 + v8 + 8);
    uint64_t v12 = *(void *)((char *)a2 + v8 + 16);
    uint64_t v11 = *(void *)((char *)a2 + v8 + 24);
    *((void *)v9 + 2) = v12;
    *((void *)v9 + 3) = v11;
    uint64_t v13 = *((void *)v10 + 5);
    *((void *)v9 + 4) = *((void *)v10 + 4);
    *((void *)v9 + 5) = v13;
    uint64_t v23 = *((void *)v10 + 7);
    *((void *)v9 + 6) = *((void *)v10 + 6);
    *((void *)v9 + 7) = v23;
    uint64_t v24 = *((void *)v10 + 9);
    *((void *)v9 + 8) = *((void *)v10 + 8);
    *((void *)v9 + 9) = v24;
    uint64_t v25 = *((void *)v10 + 11);
    *((void *)v9 + 10) = *((void *)v10 + 10);
    *((void *)v9 + 11) = v25;
    __int128 v14 = *((_OWORD *)v10 + 7);
    *((_OWORD *)v9 + 6) = *((_OWORD *)v10 + 6);
    *((_OWORD *)v9 + 7) = v14;
    *((void *)v9 + 16) = *((void *)v10 + 16);
    v9[136] = v10[136];
    uint64_t v15 = (int *)type metadata accessor for MEProgram.Builder(0LL);
    uint64_t v16 = v15[20];
    uint64_t v21 = &v10[v16];
    uint64_t v22 = &v9[v16];
    uint64_t v17 = type metadata accessor for CaptureList();
    uint64_t v20 = *(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16LL);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v20(v22, v21, v17);
    *(void *)&v9[v15[21]] = *(void *)&v10[v15[21]];
    v9[v15[22]] = v10[v15[22]];
    *(void *)&v9[v15[23]] = *(void *)&v10[v15[23]];
    *(void *)&v9[v15[24]] = *(void *)&v10[v15[24]];
    uint64_t v18 = a3[7];
    *((_BYTE *)v7 + a3[6]) = *((_BYTE *)a2 + a3[6]);
    *(void *)((char *)v7 + v18) = *(void *)((char *)a2 + v18);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  return v7;
}

uint64_t destroy for Compiler.ByteCodeGen(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = v4 + *(int *)(type metadata accessor for MEProgram.Builder(0LL) + 80);
  uint64_t v6 = type metadata accessor for CaptureList();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(v5, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for Compiler.ByteCodeGen(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v4 = a3[5];
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  *(void *)uint64_t v5 = *(void *)((char *)a2 + v4);
  *((_WORD *)v5 + 4) = *(_WORD *)((char *)a2 + v4 + 8);
  uint64_t v7 = *(void *)((char *)a2 + v4 + 24);
  *((void *)v5 + 2) = *(void *)((char *)a2 + v4 + 16);
  *((void *)v5 + 3) = v7;
  uint64_t v15 = *(void *)((char *)a2 + v4 + 40);
  *((void *)v5 + 4) = *(void *)((char *)a2 + v4 + 32);
  *((void *)v5 + 5) = v15;
  uint64_t v18 = *(void *)((char *)a2 + v4 + 56);
  *((void *)v5 + 6) = *(void *)((char *)a2 + v4 + 48);
  *((void *)v5 + 7) = v18;
  uint64_t v19 = *(void *)((char *)a2 + v4 + 72);
  *((void *)v5 + 8) = *(void *)((char *)a2 + v4 + 64);
  *((void *)v5 + 9) = v19;
  uint64_t v20 = *(void *)((char *)a2 + v4 + 88);
  *((void *)v5 + 10) = *(void *)((char *)a2 + v4 + 80);
  *((void *)v5 + 11) = v20;
  __int128 v8 = *(_OWORD *)((char *)a2 + v4 + 112);
  *((_OWORD *)v5 + 6) = *(_OWORD *)((char *)a2 + v4 + 96);
  *((_OWORD *)v5 + 7) = v8;
  *((void *)v5 + 16) = *(void *)((char *)a2 + v4 + 128);
  v5[136] = *((_BYTE *)a2 + v4 + 136);
  uint64_t v9 = (int *)type metadata accessor for MEProgram.Builder(0LL);
  uint64_t v10 = v9[20];
  uint64_t v16 = &v6[v10];
  uint64_t v17 = &v5[v10];
  uint64_t v11 = type metadata accessor for CaptureList();
  __int128 v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v14(v17, v16, v11);
  *(void *)&v5[v9[21]] = *(void *)&v6[v9[21]];
  v5[v9[22]] = v6[v9[22]];
  *(void *)&v5[v9[23]] = *(void *)&v6[v9[23]];
  *(void *)&v5[v9[24]] = *(void *)&v6[v9[24]];
  uint64_t v12 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  *(void *)((char *)a1 + v12) = *(void *)((char *)a2 + v12);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for Compiler.ByteCodeGen(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  __int128 v8 = (char *)a2 + v6;
  *(void *)((char *)a1 + v6) = *(void *)((char *)a2 + v6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7[8] = v8[8];
  _OWORD v7[9] = v8[9];
  *((void *)v7 + 2) = *((void *)v8 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v7 + 3) = *((void *)v8 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v7 + 4) = *((void *)v8 + 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v7 + 5) = *((void *)v8 + 5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v7 + 6) = *((void *)v8 + 6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v7 + 7) = *((void *)v8 + 7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v7 + 8) = *((void *)v8 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v7 + 9) = *((void *)v8 + 9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v7 + 10) = *((void *)v8 + 10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v7 + 11) = *((void *)v8 + 11);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v7 + 12) = *((void *)v8 + 12);
  *((void *)v7 + 13) = *((void *)v8 + 13);
  *((void *)v7 + 14) = *((void *)v8 + 14);
  *((void *)v7 + 15) = *((void *)v8 + 15);
  uint64_t v9 = *((void *)v8 + 16);
  v7[136] = v8[136];
  *((void *)v7 + 16) = v9;
  uint64_t v10 = (int *)type metadata accessor for MEProgram.Builder(0LL);
  uint64_t v11 = v10[20];
  uint64_t v12 = &v7[v11];
  uint64_t v13 = &v8[v11];
  uint64_t v14 = type metadata accessor for CaptureList();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 24LL))(v12, v13, v14);
  *(void *)&v7[v10[21]] = *(void *)&v8[v10[21]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7[v10[22]] = v8[v10[22]];
  *(void *)&v7[v10[23]] = *(void *)&v8[v10[23]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v7[v10[24]] = *(void *)&v8[v10[24]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  return a1;
}

void *initializeWithTake for Compiler.ByteCodeGen(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  __int128 v8 = (char *)a2 + v6;
  *(void *)uint64_t v7 = *(void *)((char *)a2 + v6);
  *((_WORD *)v7 + 4) = *(_WORD *)((char *)a2 + v6 + 8);
  __int128 v9 = *(_OWORD *)((char *)a2 + v6 + 32);
  *((_OWORD *)v7 + 1) = *(_OWORD *)((char *)a2 + v6 + 16);
  *((_OWORD *)v7 + 2) = v9;
  __int128 v10 = *(_OWORD *)((char *)a2 + v6 + 64);
  *((_OWORD *)v7 + 3) = *(_OWORD *)((char *)a2 + v6 + 48);
  *((_OWORD *)v7 + 4) = v10;
  __int128 v11 = *(_OWORD *)((char *)a2 + v6 + 96);
  *((_OWORD *)v7 + 5) = *(_OWORD *)((char *)a2 + v6 + 80);
  *((_OWORD *)v7 + 6) = v11;
  *((_OWORD *)v7 + 7) = *(_OWORD *)((char *)a2 + v6 + 112);
  *((void *)v7 + 16) = *(void *)((char *)a2 + v6 + 128);
  v7[136] = *((_BYTE *)a2 + v6 + 136);
  uint64_t v12 = (int *)type metadata accessor for MEProgram.Builder(0LL);
  uint64_t v13 = v12[20];
  uint64_t v14 = &v7[v13];
  uint64_t v15 = &v8[v13];
  uint64_t v16 = type metadata accessor for CaptureList();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32LL))(v14, v15, v16);
  *(void *)&v7[v12[21]] = *(void *)&v8[v12[21]];
  v7[v12[22]] = v8[v12[22]];
  *(void *)&v7[v12[23]] = *(void *)&v8[v12[23]];
  *(void *)&v7[v12[24]] = *(void *)&v8[v12[24]];
  uint64_t v17 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  *(void *)((char *)a1 + v17) = *(void *)((char *)a2 + v17);
  return a1;
}

void *assignWithTake for Compiler.ByteCodeGen(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  __int128 v8 = (char *)a2 + v6;
  *(void *)((char *)a1 + v6) = *(void *)((char *)a2 + v6);
  swift_bridgeObjectRelease();
  v7[8] = v8[8];
  _OWORD v7[9] = v8[9];
  *((void *)v7 + 2) = *((void *)v8 + 2);
  swift_bridgeObjectRelease();
  *((void *)v7 + 3) = *((void *)v8 + 3);
  swift_bridgeObjectRelease();
  *((void *)v7 + 4) = *((void *)v8 + 4);
  swift_bridgeObjectRelease();
  *((void *)v7 + 5) = *((void *)v8 + 5);
  swift_bridgeObjectRelease();
  *((void *)v7 + 6) = *((void *)v8 + 6);
  swift_bridgeObjectRelease();
  *((void *)v7 + 7) = *((void *)v8 + 7);
  swift_bridgeObjectRelease();
  *((void *)v7 + 8) = *((void *)v8 + 8);
  swift_bridgeObjectRelease();
  *((void *)v7 + 9) = *((void *)v8 + 9);
  swift_bridgeObjectRelease();
  *((void *)v7 + 10) = *((void *)v8 + 10);
  swift_bridgeObjectRelease();
  *((void *)v7 + 11) = *((void *)v8 + 11);
  swift_bridgeObjectRelease();
  __int128 v9 = *((_OWORD *)v8 + 7);
  *((_OWORD *)v7 + 6) = *((_OWORD *)v8 + 6);
  *((_OWORD *)v7 + 7) = v9;
  *((void *)v7 + 16) = *((void *)v8 + 16);
  v7[136] = v8[136];
  __int128 v10 = (int *)type metadata accessor for MEProgram.Builder(0LL);
  uint64_t v11 = v10[20];
  uint64_t v12 = &v7[v11];
  uint64_t v13 = &v8[v11];
  uint64_t v14 = type metadata accessor for CaptureList();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 40LL))(v12, v13, v14);
  *(void *)&v7[v10[21]] = *(void *)&v8[v10[21]];
  swift_bridgeObjectRelease();
  v7[v10[22]] = v8[v10[22]];
  *(void *)&v7[v10[23]] = *(void *)&v8[v10[23]];
  swift_bridgeObjectRelease();
  *(void *)&v7[v10[24]] = *(void *)&v8[v10[24]];
  swift_bridgeObjectRelease();
  uint64_t v15 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  *(void *)((char *)a1 + v15) = *(void *)((char *)a2 + v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for Compiler.ByteCodeGen()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_182D8C290(char *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for MEProgram.Builder(0LL);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( &a1[*(int *)(a3 + 20)],  a2,  v8);
  }

uint64_t storeEnumTagSinglePayload for Compiler.ByteCodeGen()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_182D8C318(char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)uint64_t result = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for MEProgram.Builder(0LL);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( &v5[*(int *)(a4 + 20)],  a2,  a2,  v7);
  }

  return result;
}

uint64_t type metadata completion function for Compiler.ByteCodeGen()
{
  uint64_t result = type metadata accessor for MEProgram.Builder(319LL);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

ValueMetadata *type metadata accessor for _Distance()
{
  return &type metadata for _Distance;
}

ValueMetadata *type metadata accessor for AssertionPayload()
{
  return &type metadata for AssertionPayload;
}

uint64_t getEnumTagSinglePayload for QuantifyPayload.PayloadType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }

uint64_t storeEnumTagSinglePayload for QuantifyPayload.PayloadType( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_182D8C518 + 4 * byte_182D9D0B1[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_182D8C54C + 4 * byte_182D9D0AC[v4]))();
}

uint64_t sub_182D8C54C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_182D8C554(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x182D8C55CLL);
  }
  return result;
}

uint64_t sub_182D8C568(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x182D8C570LL);
  }
  *(_BYTE *)uint64_t result = a2 + 3;
  return result;
}

uint64_t sub_182D8C574(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_182D8C57C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for QuantifyPayload.PayloadType()
{
  return &type metadata for QuantifyPayload.PayloadType;
}

uint64_t getEnumTagSinglePayload for Instruction.OpCode(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xE4) {
    goto LABEL_17;
  }
  if (a2 + 28 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 28) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 28;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 28;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 28;
    }
  }

uint64_t storeEnumTagSinglePayload for Instruction.OpCode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 28 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 28) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xE4) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xE3) {
    return ((uint64_t (*)(void))((char *)&loc_182D8C674 + 4 * byte_182D9D0BB[v4]))();
  }
  *a1 = a2 + 28;
  return ((uint64_t (*)(void))((char *)sub_182D8C6A8 + 4 * byte_182D9D0B6[v4]))();
}

uint64_t sub_182D8C6A8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_182D8C6B0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x182D8C6B8LL);
  }
  return result;
}

uint64_t sub_182D8C6C4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x182D8C6CCLL);
  }
  *(_BYTE *)uint64_t result = a2 + 28;
  return result;
}

uint64_t sub_182D8C6D0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_182D8C6D8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTag for Instruction.OpCode(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for Instruction.OpCode(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for Instruction.OpCode()
{
  return &type metadata for Instruction.OpCode;
}

uint64_t type metadata completion function for PatternOrEmpty.State.Representation()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    void v3[4] = *(void *)(result - 8) + 64LL;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    uint64_t result = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      swift_getTupleTypeLayout2();
      v3[5] = v3;
      swift_initEnumMetadataMultiPayload();
      return 0LL;
    }
  }

  return result;
}

uint64_t getEnumTag for PatternOrEmpty.State.Representation(uint64_t a1)
{
  unint64_t v2 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64LL);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  unint64_t v4 = ((*(void *)(*(void *)(AssociatedTypeWitness - 8) + 64LL)
  if (v4 <= v2) {
    unint64_t v4 = v2;
  }
  uint64_t result = *(unsigned __int8 *)(a1 + v4);
  if (result >= 2)
  {
    else {
      uint64_t v6 = 4LL;
    }
    __asm { BR              X12 }
  }

  return result;
}

void destructiveInjectEnumTag for PatternOrEmpty.State.Representation(_BYTE *a1, unsigned int a2)
{
  unint64_t v4 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64LL);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (((*(void *)(*(void *)(AssociatedTypeWitness - 8) + 64LL)
       + *(unsigned __int8 *)(*(void *)(AssociatedTypeWitness - 8) + 80LL)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(AssociatedTypeWitness - 8) + 80LL))
     + *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64LL) <= v4)
    size_t v6 = v4;
  else {
    size_t v6 = ((*(void *)(*(void *)(AssociatedTypeWitness - 8) + 64LL)
  }
  if (a2 > 1)
  {
    unsigned int v7 = a2 - 2;
    if (v6 < 4)
    {
      unsigned int v8 = v7 >> (8 * v6);
      int v9 = v7 & ~(-1 << (8 * v6));
      a1[v6] = v8 + 2;
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *(_WORD *)a1 = v9;
        a1[2] = BYTE2(v9);
      }

      else if ((_DWORD)v6 == 2)
      {
        *(_WORD *)a1 = v9;
      }

      else
      {
        *a1 = v9;
      }
    }

    else
    {
      a1[v6] = 2;
      bzero(a1, v6);
      *(_DWORD *)a1 = v7;
    }
  }

  else
  {
    a1[v6] = a2;
  }

ValueMetadata *type metadata accessor for SentinelValue()
{
  return &type metadata for SentinelValue;
}

uint64_t getEnumTagSinglePayload for Executor()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_182D8CB28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, type metadata accessor for Engine);
}

uint64_t storeEnumTagSinglePayload for Executor()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_182D8CB40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, type metadata accessor for Engine);
}

uint64_t type metadata completion function for Executor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for DSLTree._AST.GroupKind(a1, a2, a3, type metadata accessor for MEProgram);
}

uint64_t type metadata completion function for RangesIterator()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    uint64_t AssociatedTypeWitness = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0LL;
      }
    }
  }

  return AssociatedTypeWitness;
}

uint64_t *initializeBufferWithCopyOfBuffer for RangesIterator(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = *(void *)(v3 - 8);
  int v7 = *(_DWORD *)(v6 + 80);
  uint64_t v8 = v7;
  uint64_t v9 = v5 + v7;
  uint64_t v10 = (v5 + v8) & ~v8;
  uint64_t v11 = *(void *)(v6 + 64);
  uint64_t v12 = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(_DWORD *)(v13 + 80);
  uint64_t v15 = v11 + v14;
  uint64_t v16 = (v7 | *(_BYTE *)(v4 + 80) | *(_BYTE *)(v13 + 80));
  if (v16 <= 7
    && ((v15 + v10) & (unint64_t)~v14) + *(void *)(v13 + 64) <= 0x18
    && ((v7 | *(_DWORD *)(v4 + 80) | *(_DWORD *)(v13 + 80)) & 0x100000) == 0)
  {
    unint64_t v21 = ~(unint64_t)v7;
    uint64_t v22 = ~v14;
    uint64_t v23 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v4 + 16);
    uint64_t v20 = a1;
    uint64_t v26 = v12;
    v23(a1, a2, AssociatedTypeWitness);
    unint64_t v24 = ((unint64_t)a2 + v9) & ~v8;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))( ((unint64_t)a1 + v9) & v21,  v24,  v3);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v13 + 16))( ((((unint64_t)a1 + v9) & v21) + v15) & v22,  (v24 + v15) & v22,  v26);
  }

  else
  {
    uint64_t v19 = *a2;
    *a1 = *a2;
    uint64_t v20 = (uint64_t *)(v19 + ((v16 + 16) & ~v16));
    swift_retain();
  }

  return v20;
}

uint64_t destroy for RangesIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(void *)(v3 - 8);
  unint64_t v8 = (v6 + a1 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  (*(void (**)(unint64_t, uint64_t))(v7 + 8))(v8, v3);
  uint64_t v9 = *(void *)(v7 + 64);
  uint64_t v10 = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(unint64_t, uint64_t))(*(void *)(v10 - 8) + 8LL))( (v8 + v9 + *(unsigned __int8 *)(*(void *)(v10 - 8) + 80LL)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v10 - 8) + 80LL),  v10);
}

uint64_t initializeWithCopy for RangesIterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v5 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = *(void *)(v7 + 64) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v11, v12, v5);
  uint64_t v13 = *(void *)(v8 + 64);
  uint64_t v14 = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(v14 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v15 + 16))( (v13 + *(unsigned __int8 *)(v15 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80),  (v13 + *(unsigned __int8 *)(v15 + 80) + v12) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80),  v14);
  return a1;
}

uint64_t assignWithCopy for RangesIterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24))(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v5 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = *(void *)(v7 + 64) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 24))(v11, v12, v5);
  uint64_t v13 = *(void *)(v8 + 64);
  uint64_t v14 = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(v14 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v15 + 24))( (v13 + *(unsigned __int8 *)(v15 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80),  (v13 + *(unsigned __int8 *)(v15 + 80) + v12) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80),  v14);
  return a1;
}

uint64_t initializeWithTake for RangesIterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v5 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = *(void *)(v7 + 64) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v11, v12, v5);
  uint64_t v13 = *(void *)(v8 + 64);
  uint64_t v14 = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(v14 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v15 + 32))( (v13 + *(unsigned __int8 *)(v15 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80),  (v13 + *(unsigned __int8 *)(v15 + 80) + v12) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80),  v14);
  return a1;
}

uint64_t assignWithTake for RangesIterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40))(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v5 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = *(void *)(v7 + 64) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 40))(v11, v12, v5);
  uint64_t v13 = *(void *)(v8 + 64);
  uint64_t v14 = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(v14 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v15 + 40))( (v13 + *(unsigned __int8 *)(v15 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80),  (v13 + *(unsigned __int8 *)(v15 + 80) + v12) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80),  v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for RangesIterator(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t v8 = *(void *)(v5 - 8);
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  else {
    unsigned int v10 = *(_DWORD *)(v8 + 84);
  }
  uint64_t v11 = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(unsigned int *)(v12 + 84);
  else {
    unsigned int v14 = *(_DWORD *)(v12 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v15 = v11;
  uint64_t v16 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v17 = *(void *)(v6 + 64) + v16;
  uint64_t v18 = *(void *)(v8 + 64);
  uint64_t v19 = *(unsigned __int8 *)(v12 + 80);
  if (a2 <= v14) {
    goto LABEL_26;
  }
  uint64_t v20 = ((v18 + v19 + (v17 & ~v16)) & ~v19) + *(void *)(v12 + 64);
  char v21 = 8 * v20;
  if (v20 <= 3)
  {
    unsigned int v23 = ((a2 - v14 + ~(-1 << v21)) >> v21) + 1;
    if (HIWORD(v23))
    {
      int v22 = *(_DWORD *)(a1 + v20);
      if (!v22) {
        goto LABEL_26;
      }
      goto LABEL_17;
    }

    if (v23 > 0xFF)
    {
      int v22 = *(unsigned __int16 *)(a1 + v20);
      if (!*(_WORD *)(a1 + v20)) {
        goto LABEL_26;
      }
      goto LABEL_17;
    }

    if (v23 < 2)
    {
LABEL_26:
      if (v14)
      {
        if ((_DWORD)v7 == v14) {
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, v7, AssociatedTypeWitness);
        }
        uint64_t v26 = (v17 + a1) & ~v16;
        if ((_DWORD)v9 == v14) {
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v26, v9, v5);
        }
        else {
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))((v26 + v18 + v19) & ~v19, v13, v15);
        }
      }

      return 0LL;
    }
  }

  int v22 = *(unsigned __int8 *)(a1 + v20);
  if (!*(_BYTE *)(a1 + v20)) {
    goto LABEL_26;
  }
LABEL_17:
  int v24 = (v22 - 1) << v21;
  if ((_DWORD)v20)
  {
    else {
      int v25 = 4;
    }
    __asm { BR              X12 }
  }

  return v14 + v24 + 1;
}

void storeEnumTagSinglePayload for RangesIterator(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 16);
  uint64_t v8 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v9 = *(void *)(v7 - 8);
  if (*(_DWORD *)(v9 + 84) <= *(_DWORD *)(v8 + 84)) {
    unsigned int v10 = *(_DWORD *)(v8 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v11 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v11 + 84) <= v10) {
    unsigned int v12 = v10;
  }
  else {
    unsigned int v12 = *(_DWORD *)(v11 + 84);
  }
  size_t v13 = ((*(void *)(v9 + 64)
        + *(unsigned __int8 *)(v11 + 80)
  if (a3 <= v12)
  {
    unsigned int v15 = 0u;
    unsigned int v14 = a1;
  }

  else
  {
    unsigned int v14 = a1;
    if (v13 <= 3)
    {
      unsigned int v17 = ((a3 - v12 + ~(-1 << (8 * v13))) >> (8 * v13)) + 1;
      if (HIWORD(v17))
      {
        unsigned int v15 = 4u;
      }

      else if (v17 >= 0x100)
      {
        unsigned int v15 = 2;
      }

      else
      {
        unsigned int v15 = v17 > 1;
      }
    }

    else
    {
      unsigned int v15 = 1u;
    }
  }

  if (v12 < a2)
  {
    unsigned int v16 = ~v12 + a2;
    if (v13 < 4)
    {
      if ((_DWORD)v13)
      {
        int v18 = v16 & ~(-1 << (8 * v13));
        bzero(v14, v13);
        if ((_DWORD)v13 == 3)
        {
          *(_WORD *)unsigned int v14 = v18;
          void v14[2] = BYTE2(v18);
        }

        else if ((_DWORD)v13 == 2)
        {
          *(_WORD *)unsigned int v14 = v18;
        }

        else
        {
          *unsigned int v14 = v18;
        }
      }
    }

    else
    {
      bzero(v14, v13);
      *(_DWORD *)unsigned int v14 = v16;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X17 }

uint64_t destroy for RegexMatchesCollection.Iterator(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 64);
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  return result;
}

uint64_t initializeWithCopy for RegexMatchesCollection.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  __int128 v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v5;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v6 = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_retain();
  if (v6)
  {
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(void *)(a1 + 64) = v6;
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    __int128 v7 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v7;
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
  }

  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  return a1;
}

uint64_t assignWithCopy for RegexMatchesCollection.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  uint64_t v8 = *(void *)(a2 + 64);
  if (!*(void *)(a1 + 64))
  {
    if (v8)
    {
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }

uint64_t assignWithTake for RegexMatchesCollection.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  __int128 v7 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v7;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_release();
  if (!*(void *)(a1 + 64)) {
    goto LABEL_5;
  }
  uint64_t v10 = *(void *)(a2 + 64);
  if (!v10)
  {
    uint64_t v11 = type metadata accessor for Regex.Match(0LL, *(void *)(a3 + 16), v8, v9);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))(a1 + 56, v11);
LABEL_5:
    __int128 v12 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v12;
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    goto LABEL_6;
  }

  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v10;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
LABEL_6:
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  return a1;
}

uint64_t getEnumTagSinglePayload for RegexMatchesCollection.Iterator(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 113)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(specialized Compiler.ByteCodeGen.emitAlternationGen<A>(_:withBacktracking:_:)(*(void *)(v3 + 16), v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RegexMatchesCollection.Iterator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 104) = 0LL;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 112) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 113) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 113) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

uint64_t type metadata accessor for RegexRangesCollection.Iterator( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for RegexRangesCollection.Iterator);
}

uint64_t type metadata completion function for SplitCollection.Iterator(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v1 = *(void *)(a1 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (v4 <= 0x3F)
  {
    swift_getAssociatedConformanceWitness();
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    if (v6 <= 0x3F)
    {
      uint64_t AssociatedTypeWitness = type metadata accessor for RangesIterator(319LL, v2, v1, v5);
      if (v7 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0LL;
      }
    }
  }

  return AssociatedTypeWitness;
}

uint64_t *initializeBufferWithCopyOfBuffer for SplitCollection.Iterator(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  swift_getAssociatedConformanceWitness();
  uint64_t v45 = AssociatedTypeWitness;
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  int v9 = *(_DWORD *)(v8 + 80);
  uint64_t v40 = v6 + v9;
  uint64_t v46 = v3;
  uint64_t v41 = v8;
  uint64_t v42 = v7;
  uint64_t v10 = *(void *)(v8 + 64);
  uint64_t v43 = v5;
  LODWORD(AssociatedTypeWitness) = *(_DWORD *)(v5 + 80);
  uint64_t v11 = *(void *)(v3 - 8);
  LODWORD(v5) = *(_DWORD *)(v11 + 80);
  uint64_t v12 = v5;
  uint64_t v13 = swift_getAssociatedTypeWitness();
  uint64_t v14 = *(void *)(v13 - 8);
  int v15 = *(_DWORD *)(v14 + 80);
  uint64_t v16 = v15;
  uint64_t v17 = (v5 | AssociatedTypeWitness | v15);
  uint64_t v18 = v10 + v17;
  uint64_t v19 = v6 + v5;
  uint64_t v20 = (v6 + v12) & ~v12;
  uint64_t v48 = v11;
  uint64_t v21 = *(void *)(v11 + 64) + v15;
  int v22 = (AssociatedTypeWitness | v5 | v15 | v9) & 0x100000;
  if ((v17 | (unint64_t)v9) > 7
    || v22 != 0
    || ((((v18 + ((v6 + v9) & ~(unint64_t)v9)) & ~v17)
       + ((v21 + v20) & ~v16)
       + *(void *)(v14 + 64)
       + 23) & 0xFFFFFFFFFFFFFFF8LL)
     + 9 > 0x18)
  {
    uint64_t v25 = *a2;
    *a1 = *a2;
    uint64_t v29 = (uint64_t *)(v25
                    + (((v17 | v9) + 16) & ((v17 | v9) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8LL)));
    swift_retain();
  }

  else
  {
    uint64_t v26 = ~v17;
    uint64_t v38 = ~v12;
    uint64_t v39 = ~v16;
    unsigned int v37 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v43 + 16);
    uint64_t v47 = v13;
    uint64_t v44 = ((v21 + v20) & ~v16) + *(void *)(v14 + 64);
    v37(a1, a2, v45);
    unint64_t v27 = ((unint64_t)a1 + v40) & ~(unint64_t)v9;
    unint64_t v28 = ((unint64_t)a2 + v40) & ~(unint64_t)v9;
    uint64_t v29 = a1;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v41 + 16))(v27, v28, v42);
    unint64_t v30 = (v27 + v18) & v26;
    unint64_t v31 = (v28 + v18) & v26;
    v37((uint64_t *)v30, (uint64_t *)v31, v45);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v48 + 16))( (v19 + v30) & v38,  (v19 + v31) & v38,  v46);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v14 + 16))( (v21 + ((v19 + v30) & v38)) & v39,  (v21 + ((v19 + v31) & v38)) & v39,  v47);
    unint64_t v32 = (v30 + v44 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v33 = (v31 + v44 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    *(void *)unint64_t v32 = *(void *)v33;
    *(_BYTE *)(v32 + 8) = *(_BYTE *)(v33 + 8);
    unint64_t v34 = (v30 + v44 + 23) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v35 = (v31 + v44 + 23) & 0xFFFFFFFFFFFFFFF8LL;
    *(void *)unint64_t v34 = *(void *)v35;
    *(_BYTE *)(v34 + 8) = *(_BYTE *)(v35 + 8);
  }

  return v29;
}

uint64_t destroy for SplitCollection.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v21(a1, AssociatedTypeWitness);
  uint64_t v20 = *(void *)(v5 + 64);
  swift_getAssociatedConformanceWitness();
  uint64_t v6 = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(v6 - 8);
  unint64_t v8 = (v20 + a1 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  (*(void (**)(unint64_t, uint64_t))(v7 + 8))(v8, v6);
  unint64_t v9 = v8 + *(void *)(v7 + 64);
  int v10 = *(_DWORD *)(v5 + 80);
  uint64_t v11 = *(void *)(v3 - 8);
  uint64_t v12 = *(_DWORD *)(v11 + 80);
  int v13 = *(_DWORD *)(v11 + 80) | v10;
  uint64_t v14 = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(_DWORD *)(v15 + 80);
  uint64_t v17 = (v13 | *(_DWORD *)(v15 + 80));
  unint64_t v18 = (v9 + v17) & ~v17;
  v21(v18, AssociatedTypeWitness);
  (*(void (**)(unint64_t, uint64_t))(v11 + 8))((v20 + v12 + v18) & ~v12, v3);
  return (*(uint64_t (**)(unint64_t, uint64_t))(v15 + 8))( (*(void *)(v11 + 64) + v16 + ((v20 + v12 + v18) & ~v12)) & ~v16,  v14);
}

uint64_t initializeWithCopy for SplitCollection.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  uint64_t v38 = a1;
  v37(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v36 = v8;
  swift_getAssociatedConformanceWitness();
  uint64_t v9 = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = v8 + v11;
  uint64_t v13 = (v8 + v11 + a1) & ~v11;
  uint64_t v14 = (v12 + a2) & ~v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v13, v14, v9);
  uint64_t v15 = *(void *)(v10 + 64);
  int v16 = *(_DWORD *)(v7 + 80);
  uint64_t v17 = *(void *)(v5 - 8);
  uint64_t v18 = *(_DWORD *)(v17 + 80);
  int v19 = *(_DWORD *)(v17 + 80) | v16;
  uint64_t v35 = swift_getAssociatedTypeWitness();
  uint64_t v20 = *(void *)(v35 - 8);
  uint64_t v21 = *(_DWORD *)(v20 + 80);
  uint64_t v22 = (v19 | *(_DWORD *)(v20 + 80));
  uint64_t v23 = v15 + v22;
  uint64_t v24 = (v15 + v22 + v13) & ~v22;
  uint64_t v25 = (v23 + v14) & ~v22;
  v37(v24, v25, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))((v36 + v18 + v24) & ~v18, (v36 + v18 + v25) & ~v18, v5);
  uint64_t v26 = *(void *)(v17 + 64) + v21;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))( (v26 + ((v36 + v18 + v24) & ~v18)) & ~v21,  (v26 + ((v36 + v18 + v25) & ~v18)) & ~v21,  v35);
  uint64_t v27 = ((v26 + ((v36 + v18) & ~v18)) & ~v21) + *(void *)(v20 + 64);
  uint64_t v28 = v27 + v24;
  uint64_t v29 = v27 + v25;
  unint64_t v30 = (v28 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v31 = (v29 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  *(void *)unint64_t v30 = *(void *)v31;
  *(_BYTE *)(v30 + 8) = *(_BYTE *)(v31 + 8);
  unint64_t v32 = (v28 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v33 = (v29 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  *(void *)unint64_t v32 = *(void *)v33;
  *(_BYTE *)(v32 + 8) = *(_BYTE *)(v33 + 8);
  return v38;
}

uint64_t assignWithCopy for SplitCollection.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  uint64_t v38 = a1;
  v37(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v36 = v8;
  swift_getAssociatedConformanceWitness();
  uint64_t v9 = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = v8 + v11;
  uint64_t v13 = (v8 + v11 + a1) & ~v11;
  uint64_t v14 = (v12 + a2) & ~v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 24))(v13, v14, v9);
  uint64_t v15 = *(void *)(v10 + 64);
  int v16 = *(_DWORD *)(v7 + 80);
  uint64_t v17 = *(void *)(v5 - 8);
  uint64_t v18 = *(_DWORD *)(v17 + 80);
  int v19 = *(_DWORD *)(v17 + 80) | v16;
  uint64_t v35 = swift_getAssociatedTypeWitness();
  uint64_t v20 = *(void *)(v35 - 8);
  uint64_t v21 = *(_DWORD *)(v20 + 80);
  uint64_t v22 = (v19 | *(_DWORD *)(v20 + 80));
  uint64_t v23 = v15 + v22;
  uint64_t v24 = (v15 + v22 + v13) & ~v22;
  uint64_t v25 = (v23 + v14) & ~v22;
  v37(v24, v25, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 24))((v36 + v18 + v24) & ~v18, (v36 + v18 + v25) & ~v18, v5);
  uint64_t v26 = *(void *)(v17 + 64) + v21;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 24))( (v26 + ((v36 + v18 + v24) & ~v18)) & ~v21,  (v26 + ((v36 + v18 + v25) & ~v18)) & ~v21,  v35);
  uint64_t v27 = ((v26 + ((v36 + v18) & ~v18)) & ~v21) + *(void *)(v20 + 64);
  uint64_t v28 = v27 + v24;
  uint64_t v29 = v27 + v25;
  unint64_t v30 = (v28 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v31 = (v29 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  *(void *)unint64_t v30 = *(void *)v31;
  *(_BYTE *)(v30 + 8) = *(_BYTE *)(v31 + 8);
  unint64_t v32 = (v28 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v33 = (v29 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  *(void *)unint64_t v32 = *(void *)v33;
  *(_BYTE *)(v32 + 8) = *(_BYTE *)(v33 + 8);
  return v38;
}

uint64_t initializeWithTake for SplitCollection.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
  uint64_t v38 = a1;
  v37(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v36 = v8;
  swift_getAssociatedConformanceWitness();
  uint64_t v9 = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = v8 + v11;
  uint64_t v13 = (v8 + v11 + a1) & ~v11;
  uint64_t v14 = (v12 + a2) & ~v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v13, v14, v9);
  uint64_t v15 = *(void *)(v10 + 64);
  int v16 = *(_DWORD *)(v7 + 80);
  uint64_t v17 = *(void *)(v5 - 8);
  uint64_t v18 = *(_DWORD *)(v17 + 80);
  int v19 = *(_DWORD *)(v17 + 80) | v16;
  uint64_t v35 = swift_getAssociatedTypeWitness();
  uint64_t v20 = *(void *)(v35 - 8);
  uint64_t v21 = *(_DWORD *)(v20 + 80);
  uint64_t v22 = (v19 | *(_DWORD *)(v20 + 80));
  uint64_t v23 = v15 + v22;
  uint64_t v24 = (v15 + v22 + v13) & ~v22;
  uint64_t v25 = (v23 + v14) & ~v22;
  v37(v24, v25, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32))((v36 + v18 + v24) & ~v18, (v36 + v18 + v25) & ~v18, v5);
  uint64_t v26 = *(void *)(v17 + 64) + v21;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 32))( (v26 + ((v36 + v18 + v24) & ~v18)) & ~v21,  (v26 + ((v36 + v18 + v25) & ~v18)) & ~v21,  v35);
  uint64_t v27 = ((v26 + ((v36 + v18) & ~v18)) & ~v21) + *(void *)(v20 + 64);
  uint64_t v28 = v27 + v24;
  uint64_t v29 = v27 + v25;
  unint64_t v30 = (v28 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v31 = (v29 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  *(void *)unint64_t v30 = *(void *)v31;
  *(_BYTE *)(v30 + 8) = *(_BYTE *)(v31 + 8);
  unint64_t v32 = (v28 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v33 = (v29 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  *(void *)unint64_t v32 = *(void *)v33;
  *(_BYTE *)(v32 + 8) = *(_BYTE *)(v33 + 8);
  return v38;
}

uint64_t assignWithTake for SplitCollection.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  uint64_t v38 = a1;
  v37(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v36 = v8;
  swift_getAssociatedConformanceWitness();
  uint64_t v9 = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = v8 + v11;
  uint64_t v13 = (v8 + v11 + a1) & ~v11;
  uint64_t v14 = (v12 + a2) & ~v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 40))(v13, v14, v9);
  uint64_t v15 = *(void *)(v10 + 64);
  int v16 = *(_DWORD *)(v7 + 80);
  uint64_t v17 = *(void *)(v5 - 8);
  uint64_t v18 = *(_DWORD *)(v17 + 80);
  int v19 = *(_DWORD *)(v17 + 80) | v16;
  uint64_t v35 = swift_getAssociatedTypeWitness();
  uint64_t v20 = *(void *)(v35 - 8);
  uint64_t v21 = *(_DWORD *)(v20 + 80);
  uint64_t v22 = (v19 | *(_DWORD *)(v20 + 80));
  uint64_t v23 = v15 + v22;
  uint64_t v24 = (v15 + v22 + v13) & ~v22;
  uint64_t v25 = (v23 + v14) & ~v22;
  v37(v24, v25, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 40))((v36 + v18 + v24) & ~v18, (v36 + v18 + v25) & ~v18, v5);
  uint64_t v26 = *(void *)(v17 + 64) + v21;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 40))( (v26 + ((v36 + v18 + v24) & ~v18)) & ~v21,  (v26 + ((v36 + v18 + v25) & ~v18)) & ~v21,  v35);
  uint64_t v27 = ((v26 + ((v36 + v18) & ~v18)) & ~v21) + *(void *)(v20 + 64);
  uint64_t v28 = v27 + v24;
  uint64_t v29 = v27 + v25;
  unint64_t v30 = (v28 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v31 = (v29 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  *(void *)unint64_t v30 = *(void *)v31;
  *(_BYTE *)(v30 + 8) = *(_BYTE *)(v31 + 8);
  unint64_t v32 = (v28 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v33 = (v29 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  *(void *)unint64_t v32 = *(void *)v33;
  *(_BYTE *)(v32 + 8) = *(_BYTE *)(v33 + 8);
  return v38;
}

uint64_t getEnumTagSinglePayload for SplitCollection.Iterator(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  swift_getAssociatedConformanceWitness();
  uint64_t v40 = AssociatedTypeWitness;
  uint64_t v38 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v38 - 8);
  unsigned int v39 = *(_DWORD *)(v8 + 84);
  else {
    unsigned int v9 = *(_DWORD *)(v8 + 84);
  }
  uint64_t v10 = *(void *)(v4 - 8);
  unsigned int v37 = *(_DWORD *)(v10 + 84);
  else {
    unsigned int v11 = *(_DWORD *)(v10 + 84);
  }
  uint64_t v12 = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(unsigned int *)(v13 + 84);
  else {
    unsigned int v15 = *(_DWORD *)(v13 + 84);
  }
  if (v15 <= v9) {
    unsigned int v16 = v9;
  }
  else {
    unsigned int v16 = v15;
  }
  if (v16 <= 0xFE) {
    unsigned int v16 = 254;
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v17 = v12;
  uint64_t v18 = *(void *)(v6 + 64);
  uint64_t v19 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v20 = v18 + v19;
  uint64_t v21 = *(void *)(v8 + 64);
  uint64_t v22 = *(_DWORD *)(v10 + 80);
  uint64_t v23 = *(_DWORD *)(v13 + 80);
  uint64_t v24 = (*(_DWORD *)(v10 + 80) | *(_DWORD *)(v6 + 80) | *(_DWORD *)(v13 + 80));
  uint64_t v25 = v18 + v22;
  uint64_t v26 = (v18 + v22) & ~v22;
  uint64_t v27 = *(void *)(v10 + 64) + v23;
  uint64_t v28 = ((v27 + v26) & ~v23) + *(void *)(v13 + 64);
  uint64_t v29 = a1;
  if (v16 < a2)
  {
    unsigned int v30 = ((((v21 + (v20 & ~(_DWORD)v19) + v24) & ~(_DWORD)v24) + v28 + 23) & 0xFFFFFFF8) + 9;
    if (v30 < 4) {
      unsigned int v31 = ((a2 - v16 + 255) >> (8 * v30)) + 1;
    }
    else {
      unsigned int v31 = 2;
    }
    if (v31 >= 0x10000) {
      unsigned int v32 = 4;
    }
    else {
      unsigned int v32 = 2;
    }
    if (v31 < 0x100) {
      unsigned int v32 = 1;
    }
    if (v31 >= 2) {
      uint64_t v33 = v32;
    }
    else {
      uint64_t v33 = 0LL;
    }
    __asm { BR              X20 }
  }

  if ((_DWORD)v7 == v16)
  {
LABEL_30:
    unint64_t v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
    uint64_t v14 = v7;
    uint64_t v17 = v40;
    return v34(v29, v14, v17);
  }

  uint64_t v29 = (v20 + a1) & ~v19;
  if (v39 == v16)
  {
    unint64_t v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    uint64_t v14 = v39;
    uint64_t v17 = v38;
    return v34(v29, v14, v17);
  }

  uint64_t v29 = (v29 + v21 + v24) & ~v24;
  if (v15 == v16)
  {
    if ((_DWORD)v7 != v15)
    {
      uint64_t v29 = (v25 + v29) & ~v22;
      if (v37 == v15)
      {
        unint64_t v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
        uint64_t v14 = v37;
        uint64_t v17 = v4;
      }

      else
      {
        uint64_t v29 = (v27 + v29) & ~v23;
        unint64_t v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
      }

      return v34(v29, v14, v17);
    }

    goto LABEL_30;
  }

  unsigned int v36 = *(unsigned __int8 *)(((v29 + v28 + 7) & 0xFFFFFFFFFFFFF8LL) + 8);
  if (v36 >= 2) {
    return ((v36 + 2147483646) & 0x7FFFFFFF) + 1;
  }
  else {
    return 0LL;
  }
}

void storeEnumTagSinglePayload for SplitCollection.Iterator( _BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a4 + 16);
  uint64_t v5 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  swift_getAssociatedConformanceWitness();
  uint64_t v7 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v7 + 84) <= v6) {
    unsigned int v8 = v6;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v7 + 84);
  }
  uint64_t v9 = *(void *)(v4 - 8);
  if (*(_DWORD *)(v9 + 84) <= v6) {
    unsigned int v10 = v6;
  }
  else {
    unsigned int v10 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v11 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  int v12 = *(_DWORD *)(v11 + 80);
  if (*(_DWORD *)(v11 + 84) <= v10) {
    unsigned int v13 = v10;
  }
  else {
    unsigned int v13 = *(_DWORD *)(v11 + 84);
  }
  if (v13 <= v8) {
    unsigned int v14 = v8;
  }
  else {
    unsigned int v14 = v13;
  }
  if (v14 <= 0xFE) {
    unsigned int v14 = 254;
  }
  uint64_t v15 = (*(_DWORD *)(v9 + 80) | *(_DWORD *)(v5 + 80) | v12);
  size_t v16 = ((((*(void *)(v7 + 64)
          + ((*(void *)(v5 + 64) + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
          + v15) & ~v15)
        + ((*(void *)(v9 + 64)
          + *(_DWORD *)(v11 + 80)
          + ((*(void *)(v5 + 64) + *(_DWORD *)(v9 + 80)) & ~(unint64_t)*(_DWORD *)(v9 + 80))) & ~(unint64_t)*(_DWORD *)(v11 + 80))
        + *(void *)(v11 + 64)
        + 23) & 0xFFFFFFFFFFFFFFF8LL)
      + 9;
  if (v14 >= a3)
  {
    int v19 = 0u;
  }

  else
  {
    if (v16 <= 3) {
      unsigned int v17 = ((a3 - v14 + 255) >> (8
    }
                                * (((((*(_BYTE *)(v7 + 64)
                                     + ((*(_BYTE *)(v5 + 64) + *(_BYTE *)(v7 + 80)) & ~*(_BYTE *)(v7 + 80))
                                     + v15) & ~(_BYTE)v15)
                                   + ((*(_BYTE *)(v9 + 64)
                                     + v12
                                     + ((*(_BYTE *)(v5 + 64) + *(_DWORD *)(v9 + 80)) & ~*(_DWORD *)(v9 + 80))) & ~(_BYTE)v12)
                                   + *(_BYTE *)(v11 + 64)
                                   + 23) & 0xF8)
                                 + 9)))
          + 1;
    else {
      unsigned int v17 = 2;
    }
    if (v17 >= 0x10000) {
      int v18 = 4;
    }
    else {
      int v18 = 2;
    }
    if (v17 < 0x100) {
      int v18 = 1;
    }
    if (v17 >= 2) {
      int v19 = v18;
    }
    else {
      int v19 = 0;
    }
  }

  if (v14 < a2)
  {
    else {
      int v20 = (~(_BYTE)v14 + a2);
    }
    bzero(a1, v16);
    if ((_DWORD)v16 == 1) {
      *a1 = v20;
    }
    else {
      *(_DWORD *)a1 = v20;
    }
    __asm { BR              X10 }
  }

  __asm { BR              X7 }

void sub_182D8EF78()
{
  *(_BYTE *)(v1 + specialized Compiler.ByteCodeGen.emitAlternationGen<A>(_:withBacktracking:_:)(*(void *)(v3 + 16), v2) = v0;
  JUMPOUT(0x182D8F058LL);
}

void sub_182D8EF80(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + specialized Compiler.ByteCodeGen.emitAlternationGen<A>(_:withBacktracking:_:)(*(void *)(v3 + 16), v2) = 0;
  if (a2) {
    JUMPOUT(0x182D8EF88LL);
  }
  JUMPOUT(0x182D8F058LL);
}

void sub_182D8EFE0()
{
  *(_WORD *)(v1 + specialized Compiler.ByteCodeGen.emitAlternationGen<A>(_:withBacktracking:_:)(*(void *)(v3 + 16), v2) = v0;
  JUMPOUT(0x182D8F058LL);
}

void sub_182D8EFE8()
{
  *(_DWORD *)(v1 + specialized Compiler.ByteCodeGen.emitAlternationGen<A>(_:withBacktracking:_:)(*(void *)(v3 + 16), v2) = v0;
  JUMPOUT(0x182D8F058LL);
}

uint64_t sub_182D8EFF0(uint64_t a1, int a2)
{
  *(_WORD *)(a1 + v8) = 0;
  if (!a2) {
    JUMPOUT(0x182D8F058LL);
  }
  if (v6 == v4)
  {
    uint64_t v2 = *(uint64_t (**)(void))(v5 + 56);
  }

  else
  {
    if (v9 != v4) {
      JUMPOUT(0x182D8EFFCLL);
    }
    uint64_t v2 = *(uint64_t (**)(void))(v7 + 56);
  }

  return v2();
}

uint64_t destroy for SubstringSearcher()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SubstringSearcher(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v4;
  uint64_t v5 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v5;
  uint64_t v6 = *(void *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(void *)(a1 + 80) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SubstringSearcher(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  uint64_t v4 = *(void *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(void *)(a1 + 80) = v4;
  return a1;
}

__n128 __swift_memcpy89_8(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  __int128 v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for SubstringSearcher(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v5;
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  return a1;
}

uint64_t getEnumTagSinglePayload for SubstringSearcher(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 89)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(specialized Compiler.ByteCodeGen.emitAlternationGen<A>(_:withBacktracking:_:)(*(void *)(v3 + 16), v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SubstringSearcher(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 88) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 89) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 89) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for SubstringSearcher()
{
  return &type metadata for SubstringSearcher;
}

uint64_t destroy for SubstringSearcher.State()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SubstringSearcher.State(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SubstringSearcher.State(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(void *)(a1 + 16) = v4;
  return a1;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for SubstringSearcher.State(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for SubstringSearcher.State(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 25)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SubstringSearcher.State(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(_BYTE *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 25) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 25) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for SubstringSearcher.State()
{
  return &type metadata for SubstringSearcher.State;
}

uint64_t type metadata accessor for ManyConsumer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ManyConsumer);
}

void *initializeBufferWithCopyOfBuffer for PredicateConsumer(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

uint64_t destroy for PredicateConsumer()
{
  return swift_release();
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

_OWORD *assignWithTake for PredicateConsumer(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t type metadata accessor for PredicateConsumer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PredicateConsumer);
}

uint64_t type metadata completion function for MatchesIterator()
{
  return type metadata completion function for MatchesIterator();
}

{
  uint64_t AssociatedTypeWitness;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    uint64_t AssociatedTypeWitness = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0LL;
      }
    }
  }

  return AssociatedTypeWitness;
}

uint64_t *initializeBufferWithCopyOfBuffer for MatchesIterator(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for MatchesIterator(a1, a2, a3);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t *, uint64_t *, uint64_t);
  unint64_t v24;
  uint64_t AssociatedTypeWitness;
  uint64_t v27;
  uint64_t v3 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = *(void *)(v3 - 8);
  uint64_t v7 = *(_DWORD *)(v6 + 80);
  uint64_t v8 = v7;
  int v9 = v5 + v7;
  unsigned int v10 = (v5 + v8) & ~v8;
  uint64_t v11 = *(void *)(v6 + 64);
  int v12 = swift_getAssociatedTypeWitness();
  unsigned int v13 = *(void *)(v12 - 8);
  unsigned int v14 = *(_DWORD *)(v13 + 80);
  uint64_t v15 = v11 + v14;
  size_t v16 = (v7 | *(_BYTE *)(v4 + 80) | *(_BYTE *)(v13 + 80));
  if (v16 <= 7
    && ((v11 + v14 + v10) & (unint64_t)~v14) + *(void *)(v13 + 64) <= 0x18
    && ((v7 | *(_DWORD *)(v4 + 80) | *(_DWORD *)(v13 + 80)) & 0x100000) == 0)
  {
    uint64_t v21 = ~(unint64_t)v7;
    uint64_t v22 = ~v14;
    uint64_t v23 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v4 + 16);
    int v20 = a1;
    uint64_t v27 = v12;
    v23(a1, a2, AssociatedTypeWitness);
    uint64_t v24 = ((unint64_t)a2 + v9) & ~v8;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))( ((unint64_t)a1 + v9) & v21,  v24,  v3);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v13 + 16))( ((((unint64_t)a1 + v9) & v21) + v15) & v22,  (v24 + v15) & v22,  v27);
  }

  else
  {
    int v19 = *a2;
    *a1 = *a2;
    int v20 = (uint64_t *)(v19 + ((v16 + 16) & ~v16));
    swift_retain();
  }

  return v20;
}

uint64_t destroy for MatchesIterator(uint64_t a1, uint64_t a2)
{
  return destroy for MatchesIterator(a1, a2);
}

{
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(void *)(v3 - 8);
  uint64_t v8 = (v6 + a1 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  (*(void (**)(unint64_t, uint64_t))(v7 + 8))(v8, v3);
  int v9 = *(void *)(v7 + 64);
  unsigned int v10 = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(unint64_t, uint64_t))(*(void *)(v10 - 8) + 8LL))( (v8 + v9 + *(unsigned __int8 *)(*(void *)(v10 - 8) + 80LL)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v10 - 8) + 80LL),  v10);
}

uint64_t initializeWithCopy for MatchesIterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for MatchesIterator(a1, a2, a3);
}

{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v5 - 8);
  int v9 = *(unsigned __int8 *)(v8 + 80);
  unsigned int v10 = *(void *)(v7 + 64) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  int v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v11, v12, v5);
  unsigned int v13 = *(void *)(v8 + 64);
  unsigned int v14 = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(v14 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v15 + 16))( (v13 + *(unsigned __int8 *)(v15 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80),  (v13 + *(unsigned __int8 *)(v15 + 80) + v12) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80),  v14);
  return a1;
}

uint64_t assignWithCopy for MatchesIterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithCopy for MatchesIterator(a1, a2, a3);
}

{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24))(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v5 - 8);
  int v9 = *(unsigned __int8 *)(v8 + 80);
  unsigned int v10 = *(void *)(v7 + 64) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  int v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 24))(v11, v12, v5);
  unsigned int v13 = *(void *)(v8 + 64);
  unsigned int v14 = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(v14 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v15 + 24))( (v13 + *(unsigned __int8 *)(v15 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80),  (v13 + *(unsigned __int8 *)(v15 + 80) + v12) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80),  v14);
  return a1;
}

uint64_t initializeWithTake for MatchesIterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithTake for MatchesIterator(a1, a2, a3);
}

{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v5 - 8);
  int v9 = *(unsigned __int8 *)(v8 + 80);
  unsigned int v10 = *(void *)(v7 + 64) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  int v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v11, v12, v5);
  unsigned int v13 = *(void *)(v8 + 64);
  unsigned int v14 = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(v14 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v15 + 32))( (v13 + *(unsigned __int8 *)(v15 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80),  (v13 + *(unsigned __int8 *)(v15 + 80) + v12) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80),  v14);
  return a1;
}

uint64_t assignWithTake for MatchesIterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for MatchesIterator(a1, a2, a3);
}

{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40))(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v5 - 8);
  int v9 = *(unsigned __int8 *)(v8 + 80);
  unsigned int v10 = *(void *)(v7 + 64) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  int v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 40))(v11, v12, v5);
  unsigned int v13 = *(void *)(v8 + 64);
  unsigned int v14 = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(v14 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v15 + 40))( (v13 + *(unsigned __int8 *)(v15 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80),  (v13 + *(unsigned __int8 *)(v15 + 80) + v12) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80),  v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for MatchesIterator(uint64_t a1, unsigned int a2, uint64_t a3)
{
  return getEnumTagSinglePayload for MatchesIterator(a1, a2, a3);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t AssociatedTypeWitness;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = *(void *)(v4 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  else {
    int v9 = *(_DWORD *)(v7 + 84);
  }
  unsigned int v10 = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(v10 - 8);
  int v12 = *(unsigned int *)(v11 + 84);
  else {
    unsigned int v13 = *(_DWORD *)(v11 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  unsigned int v14 = v10;
  uint64_t v15 = *(unsigned __int8 *)(v7 + 80);
  size_t v16 = *(void *)(v5 + 64) + v15;
  unsigned int v17 = *(void *)(v7 + 64);
  int v18 = *(unsigned __int8 *)(v11 + 80);
  if (a2 <= v13) {
    goto LABEL_26;
  }
  int v19 = ((v17 + v18 + (v16 & ~v15)) & ~v18) + *(void *)(v11 + 64);
  int v20 = 8 * v19;
  if (v19 <= 3)
  {
    uint64_t v22 = ((a2 - v13 + ~(-1 << v20)) >> v20) + 1;
    if (HIWORD(v22))
    {
      uint64_t v21 = *(_DWORD *)(a1 + v19);
      if (!v21) {
        goto LABEL_26;
      }
      goto LABEL_17;
    }

    if (v22 > 0xFF)
    {
      uint64_t v21 = *(unsigned __int16 *)(a1 + v19);
      if (!*(_WORD *)(a1 + v19)) {
        goto LABEL_26;
      }
      goto LABEL_17;
    }

    if (v22 < 2)
    {
LABEL_26:
      if (v13)
      {
        if ((_DWORD)v6 == v13) {
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, v6, AssociatedTypeWitness);
        }
        uint64_t v25 = (v16 + a1) & ~v15;
        if ((_DWORD)v8 == v13) {
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v25, v8, v4);
        }
        else {
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))((v25 + v17 + v18) & ~v18, v12, v14);
        }
      }

      return 0LL;
    }
  }

  uint64_t v21 = *(unsigned __int8 *)(a1 + v19);
  if (!*(_BYTE *)(a1 + v19)) {
    goto LABEL_26;
  }
LABEL_17:
  uint64_t v23 = (v21 - 1) << v20;
  if ((_DWORD)v19)
  {
    else {
      uint64_t v24 = 4;
    }
    __asm { BR              X12 }
  }

  return v13 + v23 + 1;
}

void storeEnumTagSinglePayload for MatchesIterator(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  size_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  uint64_t v7 = *(void *)(a4 + 16);
  uint64_t v8 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  int v9 = *(void *)(v7 - 8);
  if (*(_DWORD *)(v9 + 84) <= *(_DWORD *)(v8 + 84)) {
    unsigned int v10 = *(_DWORD *)(v8 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v11 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v11 + 84) <= v10) {
    int v12 = v10;
  }
  else {
    int v12 = *(_DWORD *)(v11 + 84);
  }
  unsigned int v13 = ((*(void *)(v9 + 64)
        + *(unsigned __int8 *)(v11 + 80)
  if (a3 <= v12)
  {
    unsigned int v14 = 0u;
  }

  else if (v13 <= 3)
  {
    size_t v16 = ((a3 - v12 + ~(-1 << (8 * v13))) >> (8 * v13)) + 1;
    if (HIWORD(v16))
    {
      unsigned int v14 = 4u;
    }

    else if (v16 >= 0x100)
    {
      unsigned int v14 = 2;
    }

    else
    {
      unsigned int v14 = v16 > 1;
    }
  }

  else
  {
    unsigned int v14 = 1u;
  }

  if (v12 < a2)
  {
    uint64_t v15 = ~v12 + a2;
    if (v13 < 4)
    {
      if ((_DWORD)v13)
      {
        unsigned int v17 = v15 & ~(-1 << (8 * v13));
        bzero(a1, v13);
        if ((_DWORD)v13 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }

        else if ((_DWORD)v13 == 2)
        {
          *(_WORD *)a1 = v17;
        }

        else
        {
          *a1 = v17;
        }
      }
    }

    else
    {
      bzero(a1, v13);
      *(_DWORD *)a1 = v15;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X17 }

uint64_t type metadata completion function for _MatchResult()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0LL;
    }
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for _MatchResult(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = v6 + v9;
  uint64_t v11 = (*(_BYTE *)(v5 + 80) | *(_BYTE *)(v8 + 80));
  if (v11 > 7
    || ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) != 0
    || (v10 & (unint64_t)~v9) + *(void *)(v8 + 64) > 0x18)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v11 + 16) & ~v11));
    swift_retain();
  }

  else
  {
    uint64_t v15 = v7;
    uint64_t v16 = ~v9;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))( ((unint64_t)a1 + v10) & v16,  ((unint64_t)a2 + v10) & v16,  v15);
  }

  return a1;
}

uint64_t destroy for _MatchResult(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, AssociatedTypeWitness);
  uint64_t v4 = *(void *)(v3 + 64);
  uint64_t v5 = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(unint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))( (v4 + a1 + *(unsigned __int8 *)(*(void *)(v5 - 8) + 80LL)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v5 - 8) + 80LL),  v5);
}

uint64_t initializeWithCopy for _MatchResult(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))( (v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80),  (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80),  v7);
  return a1;
}

uint64_t assignWithCopy for _MatchResult(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24))(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 24))( (v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80),  (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80),  v7);
  return a1;
}

uint64_t initializeWithTake for _MatchResult(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32))( (v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80),  (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80),  v7);
  return a1;
}

uint64_t assignWithTake for _MatchResult(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40))(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 40))( (v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80),  (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80),  v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for _MatchResult(uint64_t a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  else {
    unsigned int v10 = *(_DWORD *)(v8 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v11 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v12 = *(void *)(v5 + 64) + v11;
  if (a2 <= v10) {
    goto LABEL_23;
  }
  uint64_t v13 = (v12 & ~v11) + *(void *)(v8 + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((a2 - v10 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)(a1 + v13);
      if (!v15) {
        goto LABEL_23;
      }
      goto LABEL_14;
    }

    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)(a1 + v13);
      if (!*(_WORD *)(a1 + v13)) {
        goto LABEL_23;
      }
      goto LABEL_14;
    }

    if (v16 < 2)
    {
LABEL_23:
      if (v10)
      {
        else {
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))((v12 + a1) & ~v11, v9, v7);
        }
      }

      return 0LL;
    }
  }

  int v15 = *(unsigned __int8 *)(a1 + v13);
  if (!*(_BYTE *)(a1 + v13)) {
    goto LABEL_23;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if ((_DWORD)v13)
  {
    else {
      int v18 = 4;
    }
    __asm { BR              X12 }
  }

  return v10 + v17 + 1;
}

void storeEnumTagSinglePayload for _MatchResult(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v8 + 84) <= v7) {
    unsigned int v9 = v7;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v8 + 84);
  }
  if (a3 <= v9)
  {
    unsigned int v11 = 0u;
  }

  else if (v10 <= 3)
  {
    unsigned int v13 = ((a3 - v9 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
    if (HIWORD(v13))
    {
      unsigned int v11 = 4u;
    }

    else if (v13 >= 0x100)
    {
      unsigned int v11 = 2;
    }

    else
    {
      unsigned int v11 = v13 > 1;
    }
  }

  else
  {
    unsigned int v11 = 1u;
  }

  if (v9 < a2)
  {
    unsigned int v12 = ~v9 + a2;
    if (v10 < 4)
    {
      if ((_DWORD)v10)
      {
        int v14 = v12 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if ((_DWORD)v10 == 3)
        {
          *(_WORD *)a1 = v14;
          a1[2] = BYTE2(v14);
        }

        else if ((_DWORD)v10 == 2)
        {
          *(_WORD *)a1 = v14;
        }

        else
        {
          *a1 = v14;
        }
      }
    }

    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v12;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X13 }

uint64_t type metadata completion function for MatchesCollection(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (v3 <= 0x3F)
  {
    uint64_t v4 = swift_checkMetadataState();
    uint64_t AssociatedTypeWitness = v4;
    if (v6 <= 0x3F)
    {
      uint64_t AssociatedTypeWitness = type metadata accessor for MatchesCollection.Index(319LL, v4, v1, v5);
      if (v7 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0LL;
      }
    }
  }

  return AssociatedTypeWitness;
}

uint64_t *initializeBufferWithCopyOfBuffer for MatchesCollection(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v3 - 8);
  int v62 = *(_DWORD *)(v6 + 80);
  uint64_t v58 = *(void *)(v5 + 64) + v62;
  uint64_t v55 = v62;
  uint64_t v59 = v6;
  uint64_t v7 = *(void *)(v6 + 64);
  swift_getAssociatedConformanceWitness();
  uint64_t v57 = AssociatedTypeWitness;
  uint64_t v54 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v54 - 8);
  int v9 = *(_DWORD *)(v8 + 80);
  uint64_t v53 = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(v53 - 8);
  int v11 = *(_DWORD *)(v10 + 80);
  uint64_t v12 = v11;
  uint64_t v13 = swift_getAssociatedTypeWitness();
  uint64_t v14 = *(void *)(v13 - 8);
  unint64_t v15 = *(_DWORD *)(v14 + 80);
  unint64_t v16 = v11 | v15 | v9;
  uint64_t v60 = v7;
  unsigned int v17 = *(_DWORD *)(v8 + 84);
  unsigned int v18 = *(_DWORD *)(v10 + 84);
  uint64_t v51 = v9;
  uint64_t v52 = v8;
  uint64_t v19 = *(void *)(v8 + 64);
  uint64_t v20 = v19 + v9;
  uint64_t v21 = ((v19 + v51) & ~v51) + v19;
  uint64_t v22 = (v21 + v12) & ~v12;
  uint64_t v61 = v10;
  uint64_t v23 = *(void *)(v10 + 64);
  if (v18 | v17) {
    size_t v24 = v22 + v23;
  }
  else {
    size_t v24 = v22 + v23 + 1;
  }
  unint64_t v25 = v16 | (*(_BYTE *)(v5 + 80) | v62);
  if (v25 <= 7
    && ((*(_DWORD *)(v5 + 80) | v62 | v11 | v9 | *(_DWORD *)(v14 + 80)) & 0x100000) == 0
    && *(void *)(v14 + 64)
     + ((v16 + v7 + (v58 & ~(unint64_t)v62)) & ~v16)
     + ((v24 + v15) & ~v15) <= 0x18)
  {
    uint64_t v29 = v11;
    unsigned int v45 = v17;
    unsigned int v46 = v18;
    uint64_t v43 = v20;
    uint64_t v44 = v22 + v23;
    uint64_t v48 = v21;
    uint64_t v50 = *(void *)(v13 - 8);
    uint64_t v63 = v13;
    int v30 = v18 | v17;
    uint64_t v31 = ~v55;
    uint64_t v32 = ~v16;
    uint64_t v47 = ~v12;
    uint64_t v49 = *(_DWORD *)(v14 + 80);
    uint64_t v56 = ~v15;
    uint64_t v33 = a1;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, v57);
    unint64_t v34 = ((unint64_t)a1 + v58) & v31;
    unint64_t v35 = ((unint64_t)a2 + v58) & v31;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v59 + 16))(v34, v35, v3);
    unsigned int v36 = (void *)((v34 + v60 + v16) & v32);
    unsigned int v37 = (unsigned __int8 *)((v35 + v60 + v16) & v32);
    if (v30)
    {
      if (v45 >= v46) {
        int v38 = (*(uint64_t (**)(unsigned __int8 *))(v52 + 48))(v37);
      }
      else {
        int v38 = (*(uint64_t (**)(unint64_t))(v61 + 48))((unint64_t)&v37[v29 + v48] & v47);
      }
      if (v38)
      {
LABEL_26:
        memcpy(v36, v37, v24);
LABEL_30:
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v50 + 16))( ((unint64_t)v36 + v49 + v24) & v56,  (unint64_t)&v37[v49 + v24] & v56,  v63);
        return v33;
      }
    }

    else if (v37[v44])
    {
      int v39 = (v37[v44] - 1) << (8 * v44);
      if ((_DWORD)v44)
      {
        else {
          int v40 = 4;
        }
        __asm { BR              X11 }
      }

      if (v39 != -1) {
        goto LABEL_26;
      }
    }

    uint64_t v41 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v52 + 16);
    v41(v36, v37, v54);
    v41((void *)(((unint64_t)v36 + v43) & ~v51), (unsigned __int8 *)((unint64_t)&v37[v43] & ~v51), v54);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v61 + 16))( ((unint64_t)v36 + v29 + v48) & v47,  (unint64_t)&v37[v29 + v48] & v47,  v53);
    if (!v30) {
      *((_BYTE *)v36 + v44) = 0;
    }
    goto LABEL_30;
  }

  uint64_t v28 = *a2;
  *a1 = *a2;
  uint64_t v33 = (uint64_t *)(v28 + ((v25 + 16) & ~v25));
  swift_retain();
  return v33;
}

uint64_t destroy for MatchesCollection(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(void *)(v3 - 8);
  unint64_t v8 = (v6 + a1 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  (*(void (**)(unint64_t, uint64_t))(v7 + 8))(v8, v3);
  unint64_t v9 = v8 + *(void *)(v7 + 64);
  swift_getAssociatedConformanceWitness();
  uint64_t v31 = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(v31 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v30 = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(v30 - 8);
  uint64_t v13 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v14 = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(unsigned __int8 *)(*(void *)(v14 - 8) + 80LL);
  unint64_t v16 = (v9 + (v13 | v15 | v11)) & ~(v13 | v15 | v11);
  uint64_t v17 = *(unsigned int *)(v10 + 84);
  unsigned int v18 = *(_DWORD *)(v12 + 84);
  uint64_t v19 = *(void *)(v10 + 64);
  uint64_t v20 = ~v13;
  uint64_t v21 = ((v19 + v11) & ~v11) + v19 + v13;
  uint64_t v22 = (v21 & ~v13) + *(void *)(v12 + 64);
  int v23 = v18 | v17;
  uint64_t v32 = *(void *)(v14 - 8);
  uint64_t v29 = v19 + v11;
  if (v18 | v17)
  {
    if (v17 >= v18)
    {
    }

    else if ((*(unsigned int (**)(unint64_t))(v12 + 48))((v21 + v16) & v20))
    {
      goto LABEL_15;
    }

    goto LABEL_14;
  }

  if (!*(_BYTE *)(v16 + v22)) {
    goto LABEL_14;
  }
  int v24 = (*(unsigned __int8 *)(v16 + v22) - 1) << (8 * v22);
  if ((_DWORD)v22)
  {
    else {
      int v25 = 4;
    }
    __asm { BR              X11 }
  }

  if (v24 == -1)
  {
LABEL_14:
    uint64_t v26 = *(void (**)(unint64_t, uint64_t))(v10 + 8);
    v26(v16, v31);
    v26((v29 + v16) & ~v11, v31);
    (*(void (**)(unint64_t, uint64_t))(v12 + 8))((v21 + v16) & v20, v30);
  }

uint64_t initializeWithCopy for MatchesCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = *(void *)(v5 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = v8 + v10;
  uint64_t v43 = a1;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v12, v13, v5);
  uint64_t v14 = *(void *)(v9 + 64);
  swift_getAssociatedConformanceWitness();
  uint64_t v40 = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(v40 - 8);
  uint64_t v16 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v39 = swift_getAssociatedTypeWitness();
  uint64_t v17 = *(void *)(v39 - 8);
  uint64_t v18 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v19 = swift_getAssociatedTypeWitness();
  uint64_t v20 = *(unsigned __int8 *)(*(void *)(v19 - 8) + 80LL);
  uint64_t v21 = v18 | v20 | v16;
  uint64_t v22 = v21 + v14;
  int v23 = (void *)((v21 + v14 + v12) & ~v21);
  int v24 = (_BYTE *)((v22 + v13) & ~v21);
  uint64_t v25 = *(unsigned int *)(v15 + 84);
  unsigned int v26 = *(_DWORD *)(v17 + 84);
  uint64_t v27 = *(void *)(v15 + 64);
  uint64_t v28 = ((v27 + v16) & ~v16) + v27 + v18;
  size_t v29 = (v28 & ~v18) + *(void *)(v17 + 64);
  int v30 = v26 | v25;
  uint64_t v41 = *(void *)(v19 - 8);
  uint64_t v42 = v19;
  uint64_t v37 = v27 + v16;
  uint64_t v38 = ~v18;
  if (!(v26 | v25))
  {
    if (!v24[v29]) {
      goto LABEL_19;
    }
    int v31 = (v24[v29] - 1) << (8 * v29);
    if ((_DWORD)v29)
    {
      else {
        int v32 = 4;
      }
      __asm { BR              X11 }
    }

    if (v31 == -1) {
      goto LABEL_19;
    }
    goto LABEL_14;
  }

  if (v25 >= v26)
  {
LABEL_14:
    if (v30) {
      size_t v33 = v29;
    }
    else {
      size_t v33 = v29 + 1;
    }
    memcpy(v23, v24, v33);
    goto LABEL_21;
  }

uint64_t assignWithCopy for MatchesCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24))(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = *(void *)(v5 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = v8 + v10;
  uint64_t v66 = a1;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 24))(v12, v13, v5);
  uint64_t v14 = *(void *)(v9 + 64);
  swift_getAssociatedConformanceWitness();
  uint64_t v68 = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(v68 - 8);
  uint64_t v16 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v69 = swift_getAssociatedTypeWitness();
  uint64_t v17 = *(void *)(v69 - 8);
  uint64_t v18 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v19 = swift_getAssociatedTypeWitness();
  uint64_t v20 = *(unsigned __int8 *)(*(void *)(v19 - 8) + 80LL);
  uint64_t v21 = v18 | v20 | v16;
  uint64_t v22 = (_BYTE *)((v21 + v14 + v12) & ~v21);
  int v23 = (_BYTE *)((v21 + v14 + v13) & ~v21);
  uint64_t v24 = *(unsigned int *)(v15 + 84);
  uint64_t v25 = *(unsigned int *)(v17 + 84);
  char v67 = (void *)v15;
  uint64_t v26 = *(void *)(v15 + 64);
  uint64_t v27 = ~v16;
  uint64_t v28 = v26 + v16;
  uint64_t v29 = (v26 + v16) & ~v16;
  uint64_t v30 = v17;
  uint64_t v31 = ~v18;
  uint64_t v32 = v29 + v26 + v18;
  size_t v33 = (v32 & ~v18) + *(void *)(v17 + 64);
  int v34 = v25 | v24;
  uint64_t v64 = v19;
  uint64_t v65 = *(void *)(v19 - 8);
  uint64_t v62 = v27;
  uint64_t v63 = ~v18;
  uint64_t v61 = v28;
  if (v25 | v24)
  {
    if (v24 >= v25)
    {
      unsigned int v46 = (uint64_t (*)(_BYTE *, uint64_t, uint64_t))v67[6];
      int v47 = v46(v22, v24, v68);
      int v42 = v46(v23, v24, v68);
      if (v47)
      {
LABEL_4:
        if (!v42) {
          goto LABEL_41;
        }
        goto LABEL_30;
      }
    }

    else
    {
      unint64_t v35 = (unint64_t)&v22[v32] & v31;
      unsigned int v36 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v30 + 48);
      uint64_t v60 = v22;
      uint64_t v37 = v20;
      size_t v38 = v33;
      uint64_t v39 = v30;
      int v40 = v25 | v24;
      uint64_t v41 = v31;
      int v59 = v36(v35, v25, v69);
      int v34 = v40;
      uint64_t v30 = v39;
      size_t v33 = v38;
      uint64_t v20 = v37;
      uint64_t v22 = v60;
      int v42 = v36((unint64_t)&v23[v32] & v41, v25, v69);
      if (v59) {
        goto LABEL_4;
      }
    }

    if (!v42)
    {
LABEL_34:
      uint64_t v52 = (void (*)(_BYTE *, _BYTE *, uint64_t))v67[3];
      v52(v22, v23, v68);
      v52((_BYTE *)((unint64_t)&v22[v61] & v62), (_BYTE *)((unint64_t)&v23[v61] & v62), v68);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v30 + 24))( (unint64_t)&v22[v32] & v63,  (unint64_t)&v23[v32] & v63,  v69);
LABEL_35:
      uint64_t v53 = v65;
      uint64_t v54 = v66;
      uint64_t v55 = v64;
      goto LABEL_36;
    }

    goto LABEL_29;
  }

  char v43 = 8 * v33;
  if (!v22[v33]) {
    goto LABEL_28;
  }
  int v44 = (v22[v33] - 1) << v43;
  if ((_DWORD)v33)
  {
    else {
      int v45 = 4;
    }
    __asm { BR              X12 }
  }

  if (v44 == -1)
  {
LABEL_28:
    if (!v23[v33]) {
      goto LABEL_34;
    }
    int v48 = (v23[v33] - 1) << v43;
    if ((_DWORD)v33)
    {
      else {
        int v49 = 4;
      }
      __asm { BR              X11 }
    }

    if (v48 == -1) {
      goto LABEL_34;
    }
LABEL_29:
    uint64_t v50 = (void (*)(_BYTE *, uint64_t))v67[1];
    v50(v22, v68);
    v50((_BYTE *)((unint64_t)&v22[v61] & v62), v68);
    (*(void (**)(unint64_t, uint64_t))(v30 + 8))((unint64_t)&v22[v32] & v63, v69);
    goto LABEL_30;
  }

  if (v23[v33] && (v23[v33] - 1) << v43 != -1)
  {
LABEL_30:
    if (v34) {
      size_t v51 = v33;
    }
    else {
      size_t v51 = v33 + 1;
    }
    memcpy(v22, v23, v51);
    goto LABEL_35;
  }

LABEL_41:
  uint64_t v58 = (void (*)(_BYTE *, _BYTE *, uint64_t))v67[2];
  v58(v22, v23, v68);
  v58((_BYTE *)((unint64_t)&v22[v61] & v62), (_BYTE *)((unint64_t)&v23[v61] & v62), v68);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v30 + 16))( (unint64_t)&v22[v32] & v63,  (unint64_t)&v23[v32] & v63,  v69);
  uint64_t v53 = v65;
  uint64_t v54 = v66;
  uint64_t v55 = v64;
  if (!v34) {
    v22[v33] = 0;
  }
LABEL_36:
  if (v34) {
    size_t v56 = v33;
  }
  else {
    size_t v56 = v33 + 1;
  }
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v53 + 24))( (unint64_t)&v22[v20 + v56] & ~v20,  (unint64_t)&v23[v20 + v56] & ~v20,  v55);
  return v54;
}

  uint64_t v58 = (void (*)(_BYTE *, _BYTE *, uint64_t))v67[4];
  v58(v22, v23, v68);
  v58((_BYTE *)((unint64_t)&v22[v61] & v62), (_BYTE *)((unint64_t)&v23[v61] & v62), v68);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v30 + 32))( (unint64_t)&v22[v32] & v63,  (unint64_t)&v23[v32] & v63,  v69);
  uint64_t v53 = v65;
  uint64_t v54 = v66;
  uint64_t v55 = v64;
  if (!v34) {
    v22[v33] = 0;
  }
LABEL_36:
  if (v34) {
    size_t v56 = v33;
  }
  else {
    size_t v56 = v33 + 1;
  }
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v53 + 40))( (unint64_t)&v22[v20 + v56] & ~v20,  (unint64_t)&v23[v20 + v56] & ~v20,  v55);
  return v54;
}

uint64_t initializeWithTake for MatchesCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = *(void *)(v5 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = v8 + v10;
  uint64_t v43 = a1;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v12, v13, v5);
  uint64_t v14 = *(void *)(v9 + 64);
  swift_getAssociatedConformanceWitness();
  uint64_t v40 = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(v40 - 8);
  uint64_t v16 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v39 = swift_getAssociatedTypeWitness();
  uint64_t v17 = *(void *)(v39 - 8);
  uint64_t v18 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v19 = swift_getAssociatedTypeWitness();
  uint64_t v20 = *(unsigned __int8 *)(*(void *)(v19 - 8) + 80LL);
  uint64_t v21 = v18 | v20 | v16;
  uint64_t v22 = v21 + v14;
  int v23 = (void *)((v21 + v14 + v12) & ~v21);
  uint64_t v24 = (_BYTE *)((v22 + v13) & ~v21);
  uint64_t v25 = *(unsigned int *)(v15 + 84);
  unsigned int v26 = *(_DWORD *)(v17 + 84);
  uint64_t v27 = *(void *)(v15 + 64);
  uint64_t v28 = ((v27 + v16) & ~v16) + v27 + v18;
  size_t v29 = (v28 & ~v18) + *(void *)(v17 + 64);
  int v30 = v26 | v25;
  uint64_t v41 = *(void *)(v19 - 8);
  uint64_t v42 = v19;
  uint64_t v37 = v27 + v16;
  uint64_t v38 = ~v18;
  if (!(v26 | v25))
  {
    if (!v24[v29]) {
      goto LABEL_19;
    }
    int v31 = (v24[v29] - 1) << (8 * v29);
    if ((_DWORD)v29)
    {
      else {
        int v32 = 4;
      }
      __asm { BR              X11 }
    }

    if (v31 == -1) {
      goto LABEL_19;
    }
    goto LABEL_14;
  }

  if (v25 >= v26)
  {
LABEL_14:
    if (v30) {
      size_t v33 = v29;
    }
    else {
      size_t v33 = v29 + 1;
    }
    memcpy(v23, v24, v33);
    goto LABEL_21;
  }

uint64_t assignWithTake for MatchesCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40))(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = *(void *)(v5 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = v8 + v10;
  uint64_t v66 = a1;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 40))(v12, v13, v5);
  uint64_t v14 = *(void *)(v9 + 64);
  swift_getAssociatedConformanceWitness();
  uint64_t v68 = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(v68 - 8);
  uint64_t v16 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v69 = swift_getAssociatedTypeWitness();
  uint64_t v17 = *(void *)(v69 - 8);
  uint64_t v18 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v19 = swift_getAssociatedTypeWitness();
  uint64_t v20 = *(unsigned __int8 *)(*(void *)(v19 - 8) + 80LL);
  uint64_t v21 = v18 | v20 | v16;
  uint64_t v22 = (_BYTE *)((v21 + v14 + v12) & ~v21);
  int v23 = (_BYTE *)((v21 + v14 + v13) & ~v21);
  uint64_t v24 = *(unsigned int *)(v15 + 84);
  uint64_t v25 = *(unsigned int *)(v17 + 84);
  char v67 = (void *)v15;
  uint64_t v26 = *(void *)(v15 + 64);
  uint64_t v27 = ~v16;
  uint64_t v28 = v26 + v16;
  uint64_t v29 = (v26 + v16) & ~v16;
  uint64_t v30 = v17;
  uint64_t v31 = ~v18;
  uint64_t v32 = v29 + v26 + v18;
  size_t v33 = (v32 & ~v18) + *(void *)(v17 + 64);
  int v34 = v25 | v24;
  uint64_t v64 = v19;
  uint64_t v65 = *(void *)(v19 - 8);
  uint64_t v62 = v27;
  uint64_t v63 = ~v18;
  uint64_t v61 = v28;
  if (v25 | v24)
  {
    if (v24 >= v25)
    {
      unsigned int v46 = (uint64_t (*)(_BYTE *, uint64_t, uint64_t))v67[6];
      int v47 = v46(v22, v24, v68);
      int v42 = v46(v23, v24, v68);
      if (v47)
      {
LABEL_4:
        if (!v42) {
          goto LABEL_41;
        }
        goto LABEL_30;
      }
    }

    else
    {
      unint64_t v35 = (unint64_t)&v22[v32] & v31;
      unsigned int v36 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v30 + 48);
      uint64_t v60 = v22;
      uint64_t v37 = v20;
      size_t v38 = v33;
      uint64_t v39 = v30;
      int v40 = v25 | v24;
      uint64_t v41 = v31;
      int v59 = v36(v35, v25, v69);
      int v34 = v40;
      uint64_t v30 = v39;
      size_t v33 = v38;
      uint64_t v20 = v37;
      uint64_t v22 = v60;
      int v42 = v36((unint64_t)&v23[v32] & v41, v25, v69);
      if (v59) {
        goto LABEL_4;
      }
    }

    if (!v42)
    {
LABEL_34:
      uint64_t v52 = (void (*)(_BYTE *, _BYTE *, uint64_t))v67[5];
      v52(v22, v23, v68);
      v52((_BYTE *)((unint64_t)&v22[v61] & v62), (_BYTE *)((unint64_t)&v23[v61] & v62), v68);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v30 + 40))( (unint64_t)&v22[v32] & v63,  (unint64_t)&v23[v32] & v63,  v69);
LABEL_35:
      uint64_t v53 = v65;
      uint64_t v54 = v66;
      uint64_t v55 = v64;
      goto LABEL_36;
    }

    goto LABEL_29;
  }

  char v43 = 8 * v33;
  if (!v22[v33]) {
    goto LABEL_28;
  }
  int v44 = (v22[v33] - 1) << v43;
  if ((_DWORD)v33)
  {
    else {
      int v45 = 4;
    }
    __asm { BR              X12 }
  }

  if (v44 == -1)
  {
LABEL_28:
    if (!v23[v33]) {
      goto LABEL_34;
    }
    int v48 = (v23[v33] - 1) << v43;
    if ((_DWORD)v33)
    {
      else {
        int v49 = 4;
      }
      __asm { BR              X11 }
    }

    if (v48 == -1) {
      goto LABEL_34;
    }
LABEL_29:
    uint64_t v50 = (void (*)(_BYTE *, uint64_t))v67[1];
    v50(v22, v68);
    v50((_BYTE *)((unint64_t)&v22[v61] & v62), v68);
    (*(void (**)(unint64_t, uint64_t))(v30 + 8))((unint64_t)&v22[v32] & v63, v69);
    goto LABEL_30;
  }

  if (v23[v33] && (v23[v33] - 1) << v43 != -1)
  {
LABEL_30:
    if (v34) {
      size_t v51 = v33;
    }
    else {
      size_t v51 = v33 + 1;
    }
    memcpy(v22, v23, v51);
    goto LABEL_35;
  }

uint64_t getEnumTagSinglePayload for MatchesCollection(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v3 - 8);
  unsigned int v45 = *(_DWORD *)(v6 + 84);
  unsigned int v46 = *(_DWORD *)(v5 + 84);
  if (v45 <= v46) {
    unsigned int v7 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v7 = *(_DWORD *)(v6 + 84);
  }
  swift_getAssociatedConformanceWitness();
  uint64_t v42 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v42 - 8);
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  uint64_t v41 = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(v41 - 8);
  unsigned int v43 = *(_DWORD *)(v10 + 84);
  unsigned int v44 = v9;
  if (v43 <= v9) {
    unsigned int v11 = v9;
  }
  else {
    unsigned int v11 = *(_DWORD *)(v10 + 84);
  }
  if (v11) {
    unsigned int v12 = v11 - 1;
  }
  else {
    unsigned int v12 = 0;
  }
  unsigned int v13 = v11;
  uint64_t v14 = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(unsigned int *)(v15 + 84);
  else {
    unsigned int v17 = *(_DWORD *)(v15 + 84);
  }
  if (v17 <= v7) {
    unsigned int v17 = v7;
  }
  if (v13) {
    uint64_t v18 = *(void *)(v10 + 64);
  }
  else {
    uint64_t v18 = *(void *)(v10 + 64) + 1LL;
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v19 = v14;
  uint64_t v20 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v21 = *(void *)(v5 + 64) + v20;
  uint64_t v22 = *(void *)(v6 + 64);
  uint64_t v23 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v24 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v25 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v26 = v24 | v25 | v23;
  uint64_t v27 = ((*(void *)(v8 + 64) + v23) & ~v23) + *(void *)(v8 + 64) + v24;
  uint64_t v28 = v18 + (v27 & ~v24);
  uint64_t v29 = a1;
  if (a2 <= v17) {
    goto LABEL_37;
  }
  uint64_t v30 = ((v26 + v22 + (v21 & ~v20)) & ~v26) + *(void *)(v15 + 64) + ((v28 + v25) & ~v25);
  char v31 = 8 * v30;
  unsigned int v33 = ((a2 - v17 + ~(-1 << v31)) >> v31) + 1;
  if (HIWORD(v33))
  {
    int v32 = *(_DWORD *)(a1 + v30);
    if (v32) {
      goto LABEL_28;
    }
  }

  else
  {
    if (v33 <= 0xFF)
    {
      if (v33 < 2) {
        goto LABEL_37;
      }
LABEL_21:
      int v32 = *(unsigned __int8 *)(a1 + v30);
      if (!*(_BYTE *)(a1 + v30)) {
        goto LABEL_37;
      }
LABEL_28:
      int v34 = (v32 - 1) << v31;
      if ((_DWORD)v30)
      {
        else {
          int v35 = 4;
        }
        __asm { BR              X12 }
      }

      return v17 + v34 + 1;
    }

    int v32 = *(unsigned __int16 *)(a1 + v30);
    if (*(_WORD *)(a1 + v30)) {
      goto LABEL_28;
    }
  }

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> storeEnumTagSinglePayload for MatchesCollection( uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a4 + 16);
  uint64_t v5 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v6 = *(void *)(v4 - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84)) {
    unsigned int v7 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v7 = *(_DWORD *)(v6 + 84);
  }
  swift_getAssociatedConformanceWitness();
  uint64_t v8 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  uint64_t v10 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v10 + 84) > v9) {
    unsigned int v9 = *(_DWORD *)(v10 + 84);
  }
  if (v9) {
    unsigned int v11 = v9 - 1;
  }
  else {
    unsigned int v11 = 0;
  }
  unsigned int v12 = 0u;
  uint64_t v13 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v13 + 84) <= v11) {
    unsigned int v14 = v11;
  }
  else {
    unsigned int v14 = *(_DWORD *)(v13 + 84);
  }
  if (v14 <= v7) {
    unsigned int v15 = v7;
  }
  else {
    unsigned int v15 = v14;
  }
  uint64_t v16 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v17 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v19 = ((*(void *)(v8 + 64) + v16) & ~v16) + *(void *)(v8 + 64);
  if (v9) {
    uint64_t v20 = ((v19 + v17) & ~v17) + *(void *)(v10 + 64);
  }
  else {
    uint64_t v20 = ((v19 + v17) & ~v17) + *(void *)(v10 + 64) + 1;
  }
  uint64_t v18 = *(unsigned __int8 *)(v13 + 80);
  size_t v21 = ((v20 + v18) & ~v18)
      + *(void *)(v13 + 64)
      + (((v17 | v18 | v16)
        + *(void *)(v6 + 64)
        + ((*(void *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))) & ~(v17 | v18 | v16));
  if (a3 > v15)
  {
    if (v21 <= 3)
    {
      unsigned int v22 = ((a3 - v15 + ~(-1 << (8 * v21))) >> (8 * v21)) + 1;
      if (HIWORD(v22))
      {
        unsigned int v12 = 4u;
      }

      else if (v22 >= 0x100)
      {
        unsigned int v12 = 2;
      }

      else
      {
        unsigned int v12 = v22 > 1;
      }
    }

    else
    {
      unsigned int v12 = 1u;
    }
  }

  if (v15 < a2)
  {
    unsigned int v23 = ~v15 + a2;
    if (v21 < 4)
    {
      if ((_DWORD)v21)
      {
        int v24 = v23 & ~(-1 << (8 * v21));
        bzero(v26, v21);
        if ((_DWORD)v21 == 3)
        {
          *(_WORD *)uint64_t v26 = v24;
          void v26[2] = BYTE2(v24);
        }

        else if ((_DWORD)v21 == 2)
        {
          *(_WORD *)uint64_t v26 = v24;
        }

        else
        {
          *uint64_t v26 = v24;
        }
      }
    }

    else
    {
      bzero(v26, v21);
      *(_DWORD *)uint64_t v26 = v23;
    }

    __asm { BR              X10 }
  }

void sub_182D9231C()
{
  *(_BYTE *)(v1 + specialized Compiler.ByteCodeGen.emitAlternationGen<A>(_:withBacktracking:_:)(*(void *)(v3 + 16), v2) = v0;
}

void sub_182D92324()
{
  *(_WORD *)(v1 + specialized Compiler.ByteCodeGen.emitAlternationGen<A>(_:withBacktracking:_:)(*(void *)(v3 + 16), v2) = v0;
}

void sub_182D92440()
{
  *uint64_t v1 = v0;
}

void sub_182D924D0()
{
  *uint64_t v1 = v0;
}

void sub_182D924D8()
{
  *(_WORD *)uint64_t v1 = v0;
  *(_BYTE *)(v1 + 2) = BYTE2(v0);
}

void sub_182D924E8()
{
  *uint64_t v1 = v0;
}

uint64_t type metadata accessor for MatchesCollection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MatchesCollection);
}

uint64_t type metadata completion function for MatchesCollection.Index()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0LL;
    }
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for MatchesCollection.Index(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v3 = *(unsigned int *)(v2 + 84);
  uint64_t v4 = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v2 + 64);
  uint64_t v31 = v2;
  int v7 = *(_DWORD *)(v2 + 80);
  uint64_t v30 = v6 + v7;
  int v8 = *(_DWORD *)(v5 + 80);
  uint64_t v9 = *(unsigned int *)(v5 + 84);
  unint64_t v32 = (v30 & ~(unint64_t)v7) + v6 + v8;
  uint64_t v33 = v5;
  uint64_t v34 = v4;
  uint64_t v10 = *(void *)(v5 + 64);
  uint64_t v36 = (v32 & ~(unint64_t)v8) + v10;
  else {
    size_t v11 = (v32 & ~(unint64_t)v8) + v10 + 1;
  }
  uint64_t v12 = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(v12 - 8);
  unint64_t v14 = *(_DWORD *)(v13 + 80);
  size_t v15 = v11 + v14;
  unint64_t v16 = v8 | v14 | v7;
  if (v16 <= 7
    && ((v8 | *(_DWORD *)(v13 + 80) | v7) & 0x100000) == 0
    && ((v11 + v14) & ~v14) + *(void *)(v13 + 64) <= 0x18)
  {
    uint64_t v28 = ~v14;
    uint64_t v29 = v12;
    int v27 = v9 | v3;
    if (v9 | v3)
    {
      else {
        int v21 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v33 + 48))( ((unint64_t)a2 + v32) & ~(unint64_t)v8,  v9,  v34);
      }
      uint64_t v20 = a1;
      uint64_t v22 = v36;
      if (v21)
      {
LABEL_26:
        memcpy(v20, a2, v11);
LABEL_30:
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v13 + 16))( ((unint64_t)v20 + v15) & v28,  ((unint64_t)a2 + v15) & v28,  v29);
        return v20;
      }
    }

    else
    {
      uint64_t v22 = v36;
      uint64_t v20 = a1;
      if (*((_BYTE *)a2 + v36))
      {
        int v23 = (*((unsigned __int8 *)a2 + v36) - 1) << (8 * v36);
        if ((_DWORD)v36)
        {
          else {
            int v24 = 4;
          }
          __asm { BR              X11 }
        }

        if (v23 != -1) {
          goto LABEL_26;
        }
      }
    }

    uint64_t v25 = *(void (**)(void *, uint64_t *, uint64_t))(v31 + 16);
    v25(v20, a2, AssociatedTypeWitness);
    v25( (void *)(((unint64_t)v20 + v30) & ~(unint64_t)v7),  (uint64_t *)(((unint64_t)a2 + v30) & ~(unint64_t)v7),  AssociatedTypeWitness);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v33 + 16))( ((unint64_t)v20 + v32) & ~(unint64_t)v8,  ((unint64_t)a2 + v32) & ~(unint64_t)v8,  v34);
    if (!v27) {
      *((_BYTE *)v20 + v22) = 0;
    }
    goto LABEL_30;
  }

  uint64_t v19 = *a2;
  *a1 = *a2;
  uint64_t v20 = (uint64_t *)(v19 + ((v16 + 16) & ~v16));
  swift_retain();
  return v20;
}

uint64_t destroy for MatchesCollection.Index(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v4 = *(unsigned int *)(v3 + 84);
  uint64_t v5 = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t v8 = *(void *)(v3 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v10 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v11 = ((v8 + v9) & ~v9) + v8 + v10;
  uint64_t v12 = (v11 & ~v10) + *(void *)(v6 + 64);
  int v13 = v7 | v4;
  uint64_t v22 = ~v10;
  uint64_t v23 = v5;
  uint64_t v21 = v8 + v9;
  if (v7 | v4)
  {
    else {
      int v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))((v11 + a1) & ~v10, v7, v5);
    }
    if (!v14)
    {
LABEL_14:
      uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
      v17(a1, AssociatedTypeWitness);
      v17((v21 + a1) & ~v9, AssociatedTypeWitness);
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))((v11 + a1) & v22, v23);
    }
  }

  else
  {
    if (!*(_BYTE *)(a1 + v12)) {
      goto LABEL_14;
    }
    int v15 = (*(unsigned __int8 *)(a1 + v12) - 1) << (8 * v12);
    if ((_DWORD)v12)
    {
      else {
        int v16 = 4;
      }
      __asm { BR              X11 }
    }

    if (v15 == -1) {
      goto LABEL_14;
    }
  }

  uint64_t v18 = swift_getAssociatedTypeWitness();
  if (v13) {
    uint64_t v19 = a1;
  }
  else {
    uint64_t v19 = a1 + 1;
  }
  return (*(uint64_t (**)(unint64_t, uint64_t))(*(void *)(v18 - 8) + 8LL))( (v19 + *(unsigned __int8 *)(*(void *)(v18 - 8) + 80LL) + v12) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v18 - 8) + 80LL),  v18);
}

void *initializeWithCopy for MatchesCollection.Index(void *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v4 = *(unsigned int *)(v3 + 84);
  uint64_t v5 = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t v8 = *(void *)(v3 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v10 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v11 = ((v8 + v9) & ~v9) + v8 + v10;
  size_t v12 = (v11 & ~v10) + *(void *)(v6 + 64);
  int v13 = v7 | v4;
  uint64_t v24 = v8 + v9;
  uint64_t v25 = ~v10;
  if (v7 | v4)
  {
    else {
      int v14 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))( (unint64_t)&a2[v11] & ~v10,  v7,  v5);
    }
    int v15 = a1;
    if (v14)
    {
LABEL_14:
      if (v13) {
        size_t v18 = v12;
      }
      else {
        size_t v18 = v12 + 1;
      }
      memcpy(v15, a2, v18);
      goto LABEL_21;
    }
  }

  else
  {
    int v15 = a1;
    if (a2[v12])
    {
      int v16 = (a2[v12] - 1) << (8 * v12);
      if ((_DWORD)v12)
      {
        else {
          int v17 = 4;
        }
        __asm { BR              X11 }
      }

      if (v16 != -1) {
        goto LABEL_14;
      }
    }
  }

  uint64_t v19 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v3 + 16);
  v19(v15, a2, AssociatedTypeWitness);
  v19( (void *)(((unint64_t)v15 + v24) & ~v9),  (unsigned __int8 *)((unint64_t)&a2[v24] & ~v9),  AssociatedTypeWitness);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))( ((unint64_t)v15 + v11) & v25,  (unint64_t)&a2[v11] & v25,  v5);
  if (!v13) {
    *((_BYTE *)v15 + v12) = 0;
  }
LABEL_21:
  if (v13) {
    size_t v20 = v12;
  }
  else {
    size_t v20 = v12 + 1;
  }
  uint64_t v21 = swift_getAssociatedTypeWitness();
  uint64_t v22 = *(void *)(v21 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v22 + 16))( ((unint64_t)v15 + v20 + *(unsigned __int8 *)(v22 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80),  (unint64_t)&a2[v20 + *(unsigned __int8 *)(v22 + 80)] & ~(unint64_t)*(unsigned __int8 *)(v22 + 80),  v21);
  return v15;
}

unsigned __int8 *assignWithCopy for MatchesCollection.Index(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v5 = *(unsigned int *)(v4 + 84);
  uint64_t v6 = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(void *)(v4 + 64);
  uint64_t v10 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v11 = ~v10;
  uint64_t v12 = v9 + v10;
  uint64_t v13 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v14 = ~v13;
  uint64_t v15 = ((v9 + v10) & ~v10) + v9 + v13;
  uint64_t v16 = *(void *)(v7 + 64);
  size_t v17 = (v15 & ~v13) + v16;
  int v50 = v8 | v5;
  uint64_t v48 = v15;
  uint64_t v49 = v6;
  uint64_t v46 = v12;
  uint64_t v47 = v11;
  if (v8 | v5)
  {
    if (v5 >= v8)
    {
      uint64_t v31 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v4 + 48);
      int v32 = v31(a1, v5, AssociatedTypeWitness);
      int v26 = v31(a2, v5, AssociatedTypeWitness);
      if (v32)
      {
LABEL_4:
        int v27 = a2;
        if (!v26) {
          goto LABEL_36;
        }
LABEL_30:
        int v36 = v50;
        if (v50) {
          size_t v37 = v17;
        }
        else {
          size_t v37 = v17 + 1;
        }
        memcpy(a1, v27, v37);
        goto LABEL_38;
      }
    }

    else
    {
      uint64_t v18 = v6;
      unint64_t v19 = (unint64_t)&a1[v15] & v14;
      size_t v20 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48);
      uint64_t v21 = v7;
      unsigned int v45 = a1;
      size_t v22 = (v15 & ~v13) + v16;
      uint64_t v23 = v18;
      uint64_t v24 = v15;
      int v44 = v20(v19, v8, v18);
      unint64_t v25 = (unint64_t)&a2[v24] & v14;
      size_t v17 = v22;
      a1 = v45;
      uint64_t v7 = v21;
      int v26 = v20(v25, v8, v23);
      if (v44) {
        goto LABEL_4;
      }
    }

    int v27 = a2;
    if (!v26)
    {
LABEL_34:
      int v38 = *(void (**)(unsigned __int8 *, const void *, uint64_t))(v4 + 24);
      v38(a1, v27, AssociatedTypeWitness);
      v38( (unsigned __int8 *)((unint64_t)&a1[v46] & v47),  (const void *)(((unint64_t)v27 + v46) & v47),  AssociatedTypeWitness);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 24))( (unint64_t)&a1[v48] & v14,  ((unint64_t)v27 + v48) & v14,  v49);
      int v36 = v50;
      goto LABEL_38;
    }

void *initializeWithTake for MatchesCollection.Index(void *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v4 = *(unsigned int *)(v3 + 84);
  uint64_t v5 = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t v8 = *(void *)(v3 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v10 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v11 = ((v8 + v9) & ~v9) + v8 + v10;
  size_t v12 = (v11 & ~v10) + *(void *)(v6 + 64);
  int v13 = v7 | v4;
  uint64_t v24 = v8 + v9;
  uint64_t v25 = ~v10;
  if (v7 | v4)
  {
    else {
      int v14 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))( (unint64_t)&a2[v11] & ~v10,  v7,  v5);
    }
    uint64_t v15 = a1;
    if (v14)
    {
LABEL_14:
      if (v13) {
        size_t v18 = v12;
      }
      else {
        size_t v18 = v12 + 1;
      }
      memcpy(v15, a2, v18);
      goto LABEL_21;
    }
  }

  else
  {
    uint64_t v15 = a1;
    if (a2[v12])
    {
      int v16 = (a2[v12] - 1) << (8 * v12);
      if ((_DWORD)v12)
      {
        else {
          int v17 = 4;
        }
        __asm { BR              X11 }
      }

      if (v16 != -1) {
        goto LABEL_14;
      }
    }
  }

  unint64_t v19 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v3 + 32);
  v19(v15, a2, AssociatedTypeWitness);
  v19( (void *)(((unint64_t)v15 + v24) & ~v9),  (unsigned __int8 *)((unint64_t)&a2[v24] & ~v9),  AssociatedTypeWitness);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32))( ((unint64_t)v15 + v11) & v25,  (unint64_t)&a2[v11] & v25,  v5);
  if (!v13) {
    *((_BYTE *)v15 + v12) = 0;
  }
LABEL_21:
  if (v13) {
    size_t v20 = v12;
  }
  else {
    size_t v20 = v12 + 1;
  }
  uint64_t v21 = swift_getAssociatedTypeWitness();
  uint64_t v22 = *(void *)(v21 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v22 + 32))( ((unint64_t)v15 + v20 + *(unsigned __int8 *)(v22 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80),  (unint64_t)&a2[v20 + *(unsigned __int8 *)(v22 + 80)] & ~(unint64_t)*(unsigned __int8 *)(v22 + 80),  v21);
  return v15;
}

unsigned __int8 *assignWithTake for MatchesCollection.Index(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v5 = *(unsigned int *)(v4 + 84);
  uint64_t v6 = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(void *)(v4 + 64);
  uint64_t v10 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v11 = ~v10;
  uint64_t v12 = v9 + v10;
  uint64_t v13 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v14 = ~v13;
  uint64_t v15 = ((v9 + v10) & ~v10) + v9 + v13;
  uint64_t v16 = *(void *)(v7 + 64);
  size_t v17 = (v15 & ~v13) + v16;
  int v50 = v8 | v5;
  uint64_t v48 = v15;
  uint64_t v49 = v6;
  uint64_t v46 = v12;
  uint64_t v47 = v11;
  if (v8 | v5)
  {
    if (v5 >= v8)
    {
      uint64_t v31 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v4 + 48);
      int v32 = v31(a1, v5, AssociatedTypeWitness);
      int v26 = v31(a2, v5, AssociatedTypeWitness);
      if (v32)
      {
LABEL_4:
        int v27 = a2;
        if (!v26) {
          goto LABEL_36;
        }
LABEL_30:
        int v36 = v50;
        if (v50) {
          size_t v37 = v17;
        }
        else {
          size_t v37 = v17 + 1;
        }
        memcpy(a1, v27, v37);
        goto LABEL_38;
      }
    }

    else
    {
      uint64_t v18 = v6;
      unint64_t v19 = (unint64_t)&a1[v15] & v14;
      size_t v20 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48);
      uint64_t v21 = v7;
      unsigned int v45 = a1;
      size_t v22 = (v15 & ~v13) + v16;
      uint64_t v23 = v18;
      uint64_t v24 = v15;
      int v44 = v20(v19, v8, v18);
      unint64_t v25 = (unint64_t)&a2[v24] & v14;
      size_t v17 = v22;
      a1 = v45;
      uint64_t v7 = v21;
      int v26 = v20(v25, v8, v23);
      if (v44) {
        goto LABEL_4;
      }
    }

    int v27 = a2;
    if (!v26)
    {
LABEL_34:
      int v38 = *(void (**)(unsigned __int8 *, const void *, uint64_t))(v4 + 40);
      v38(a1, v27, AssociatedTypeWitness);
      v38( (unsigned __int8 *)((unint64_t)&a1[v46] & v47),  (const void *)(((unint64_t)v27 + v46) & v47),  AssociatedTypeWitness);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 40))( (unint64_t)&a1[v48] & v14,  ((unint64_t)v27 + v48) & v14,  v49);
      int v36 = v50;
      goto LABEL_38;
    }

uint64_t getEnumTagSinglePayload for MatchesCollection.Index(uint64_t a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v4 = *(unsigned int *)(v3 + 84);
  uint64_t v27 = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(v27 - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  else {
    int v7 = *(_DWORD *)(v5 + 84);
  }
  if (v7) {
    unsigned int v8 = v7 - 1;
  }
  else {
    unsigned int v8 = 0;
  }
  uint64_t v9 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  if (v10 <= v8) {
    unsigned int v11 = v8;
  }
  else {
    unsigned int v11 = *(_DWORD *)(v9 + 84);
  }
  if (v7) {
    uint64_t v12 = *(void *)(v5 + 64);
  }
  else {
    uint64_t v12 = *(void *)(v5 + 64) + 1LL;
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v13 = *(unsigned __int8 *)(v5 + 80);
  unint64_t v14 = ((*(void *)(v3 + 64) + *(unsigned __int8 *)(v3 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))
      + *(void *)(v3 + 64)
      + v13;
  unint64_t v15 = v12 + (v14 & ~v13);
  uint64_t v16 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v17 = v15 + v16;
  if (a2 <= v11) {
    goto LABEL_32;
  }
  uint64_t v18 = (v17 & ~v16) + *(void *)(v9 + 64);
  char v19 = 8 * v18;
  unsigned int v21 = ((a2 - v11 + ~(-1 << v19)) >> v19) + 1;
  if (HIWORD(v21))
  {
    int v20 = *(_DWORD *)(a1 + v18);
    if (v20) {
      goto LABEL_23;
    }
  }

  else
  {
    if (v21 <= 0xFF)
    {
      if (v21 < 2) {
        goto LABEL_32;
      }
LABEL_16:
      int v20 = *(unsigned __int8 *)(a1 + v18);
      if (!*(_BYTE *)(a1 + v18)) {
        goto LABEL_32;
      }
LABEL_23:
      int v22 = (v20 - 1) << v19;
      if ((_DWORD)v18)
      {
        else {
          int v23 = 4;
        }
        __asm { BR              X12 }
      }

      return v11 + v22 + 1;
    }

    int v20 = *(unsigned __int16 *)(a1 + v18);
    if (*(_WORD *)(a1 + v18)) {
      goto LABEL_23;
    }
  }

void storeEnumTagSinglePayload for MatchesCollection.Index(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v6 + 84) <= v5) {
    unsigned int v7 = v5;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v6 + 84);
  }
  if (v7) {
    unsigned int v8 = v7 - 1;
  }
  else {
    unsigned int v8 = 0;
  }
  unsigned int v9 = 0u;
  uint64_t v10 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v10 + 84) <= v8) {
    unsigned int v11 = v8;
  }
  else {
    unsigned int v11 = *(_DWORD *)(v10 + 84);
  }
  uint64_t v13 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v14 = *(void *)(v6 + 64);
  if (v7) {
    uint64_t v15 = ((v12 + v13) & ~v13) + v14;
  }
  else {
    uint64_t v15 = ((v12 + v13) & ~v13) + v14 + 1;
  }
  uint64_t v16 = *(unsigned __int8 *)(v10 + 80);
  size_t v17 = ((v15 + v16) & ~v16) + *(void *)(v10 + 64);
  if (a3 > v11)
  {
    if (v17 <= 3)
    {
      unsigned int v18 = ((a3 - v11 + ~(-1 << (8 * v17))) >> (8 * v17)) + 1;
      if (HIWORD(v18))
      {
        unsigned int v9 = 4u;
      }

      else if (v18 >= 0x100)
      {
        unsigned int v9 = 2;
      }

      else
      {
        unsigned int v9 = v18 > 1;
      }
    }

    else
    {
      unsigned int v9 = 1u;
    }
  }

  if (v11 < a2)
  {
    unsigned int v19 = ~v11 + a2;
    if (v17 < 4)
    {
      if ((_DWORD)v17)
      {
        int v20 = v19 & ~(-1 << (8 * v17));
        bzero(a1, v17);
        if ((_DWORD)v17 == 3)
        {
          *(_WORD *)a1 = v20;
          a1[2] = BYTE2(v20);
        }

        else if ((_DWORD)v17 == 2)
        {
          *(_WORD *)a1 = v20;
        }

        else
        {
          *a1 = v20;
        }
      }
    }

    else
    {
      bzero(a1, ((v15 + v16) & ~v16) + *(void *)(v10 + 64));
      *(_DWORD *)a1 = v19;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X17 }

void sub_182D941EC()
{
  *(_BYTE *)(v1 + specialized Compiler.ByteCodeGen.emitAlternationGen<A>(_:withBacktracking:_:)(*(void *)(v3 + 16), v2) = v0;
}

void sub_182D941F4()
{
  *(_WORD *)(v1 + specialized Compiler.ByteCodeGen.emitAlternationGen<A>(_:withBacktracking:_:)(*(void *)(v3 + 16), v2) = v0;
}

void sub_182D942A0()
{
  *uint64_t v1 = v0;
}

void sub_182D942A8()
{
  *(_WORD *)uint64_t v1 = v0;
  *(_BYTE *)(v1 + 2) = BYTE2(v0);
}

void sub_182D942B8()
{
  *uint64_t v1 = v0;
}

uint64_t type metadata completion function for ReversedMatchesCollection()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0LL;
    }
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ReversedMatchesCollection( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = *(void *)(v5 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = *(void *)(v7 + 64) + v9;
  uint64_t v11 = (*(_BYTE *)(v7 + 80) | *(_BYTE *)(v8 + 80));
  if (v11 > 7
    || ((*(_DWORD *)(v7 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) != 0
    || (v10 & (unint64_t)~v9) + *(void *)(v8 + 64) > 0x18)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v11 + 16) & ~v11));
    swift_retain();
  }

  else
  {
    uint64_t v15 = ~v9;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, AssociatedTypeWitness);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))( ((unint64_t)a1 + v10) & v15,  ((unint64_t)a2 + v10) & v15,  v5);
  }

  return a1;
}

uint64_t destroy for ReversedMatchesCollection(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
  return (*(uint64_t (**)(unint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))( (*(void *)(v5 + 64) + a1 + *(unsigned __int8 *)(*(void *)(v3 - 8) + 80LL)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v3 - 8) + 80LL),  v3);
}

uint64_t initializeWithCopy for ReversedMatchesCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v5 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))( (*(void *)(v7 + 64) + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80),  (*(void *)(v7 + 64) + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80),  v5);
  return a1;
}

uint64_t assignWithCopy for ReversedMatchesCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24))(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v5 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 24))( (*(void *)(v7 + 64) + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80),  (*(void *)(v7 + 64) + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80),  v5);
  return a1;
}

uint64_t initializeWithTake for ReversedMatchesCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v5 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32))( (*(void *)(v7 + 64) + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80),  (*(void *)(v7 + 64) + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80),  v5);
  return a1;
}

uint64_t assignWithTake for ReversedMatchesCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40))(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v5 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 40))( (*(void *)(v7 + 64) + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80),  (*(void *)(v7 + 64) + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80),  v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReversedMatchesCollection(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(void *)(v5 - 8);
  uint64_t v10 = *(unsigned int *)(v9 + 84);
  else {
    unsigned int v11 = *(_DWORD *)(v9 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v12 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v13 = *(void *)(v7 + 64) + v12;
  if (a2 <= v11) {
    goto LABEL_23;
  }
  uint64_t v14 = (v13 & ~v12) + *(void *)(v9 + 64);
  char v15 = 8 * v14;
  if (v14 <= 3)
  {
    unsigned int v17 = ((a2 - v11 + ~(-1 << v15)) >> v15) + 1;
    if (HIWORD(v17))
    {
      int v16 = *(_DWORD *)(a1 + v14);
      if (!v16) {
        goto LABEL_23;
      }
      goto LABEL_14;
    }

    if (v17 > 0xFF)
    {
      int v16 = *(unsigned __int16 *)(a1 + v14);
      if (!*(_WORD *)(a1 + v14)) {
        goto LABEL_23;
      }
      goto LABEL_14;
    }

    if (v17 < 2)
    {
LABEL_23:
      if (v11)
      {
        if (v8 >= v10) {
          return (*(uint64_t (**)(uint64_t, void, uint64_t))(v7 + 48))( a1,  *(unsigned int *)(v7 + 84),  AssociatedTypeWitness);
        }
        else {
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))((v13 + a1) & ~v12, v10, v5);
        }
      }

      return 0LL;
    }
  }

  int v16 = *(unsigned __int8 *)(a1 + v14);
  if (!*(_BYTE *)(a1 + v14)) {
    goto LABEL_23;
  }
LABEL_14:
  int v18 = (v16 - 1) << v15;
  if ((_DWORD)v14)
  {
    else {
      int v19 = 4;
    }
    __asm { BR              X12 }
  }

  return v11 + v18 + 1;
}

void storeEnumTagSinglePayload for ReversedMatchesCollection( _BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 16);
  uint64_t v8 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v9 = *(void *)(v7 - 8);
  if (*(_DWORD *)(v9 + 84) <= *(_DWORD *)(v8 + 84)) {
    unsigned int v10 = *(_DWORD *)(v8 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  size_t v12 = ((*(void *)(v8 + 64) + v11) & ~v11) + *(void *)(v9 + 64);
  if (a3 <= v10)
  {
    unsigned int v13 = 0u;
  }

  else if (v12 <= 3)
  {
    unsigned int v15 = ((a3 - v10 + ~(-1 << (8 * v12))) >> (8 * v12)) + 1;
    if (HIWORD(v15))
    {
      unsigned int v13 = 4u;
    }

    else if (v15 >= 0x100)
    {
      unsigned int v13 = 2;
    }

    else
    {
      unsigned int v13 = v15 > 1;
    }
  }

  else
  {
    unsigned int v13 = 1u;
  }

  if (v10 < a2)
  {
    unsigned int v14 = ~v10 + a2;
    if (v12 < 4)
    {
      if ((_DWORD)v12)
      {
        int v16 = v14 & ~(-1 << (8 * v12));
        bzero(a1, v12);
        if ((_DWORD)v12 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }

        else if ((_DWORD)v12 == 2)
        {
          *(_WORD *)a1 = v16;
        }

        else
        {
          *a1 = v16;
        }
      }
    }

    else
    {
      bzero(a1, ((*(void *)(v8 + 64) + v11) & ~v11) + *(void *)(v9 + 64));
      *(_DWORD *)a1 = v14;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X15 }

uint64_t type metadata accessor for ReversedMatchesCollection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for ReversedMatchesCollection);
}

uint64_t type metadata completion function for ReversedMatchesCollection.Iterator()
{
  return type metadata completion function for MatchesIterator();
}

uint64_t *initializeBufferWithCopyOfBuffer for ReversedMatchesCollection.Iterator( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for MatchesIterator(a1, a2, a3);
}

uint64_t destroy for ReversedMatchesCollection.Iterator(uint64_t a1, uint64_t a2)
{
  return destroy for MatchesIterator(a1, a2);
}

uint64_t initializeWithCopy for ReversedMatchesCollection.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for MatchesIterator(a1, a2, a3);
}

uint64_t assignWithCopy for ReversedMatchesCollection.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithCopy for MatchesIterator(a1, a2, a3);
}

uint64_t initializeWithTake for ReversedMatchesCollection.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithTake for MatchesIterator(a1, a2, a3);
}

uint64_t assignWithTake for ReversedMatchesCollection.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for MatchesIterator(a1, a2, a3);
}

uint64_t getEnumTagSinglePayload for ReversedMatchesCollection.Iterator( uint64_t a1, unsigned int a2, uint64_t a3)
{
  return getEnumTagSinglePayload for MatchesIterator(a1, a2, a3);
}

void storeEnumTagSinglePayload for ReversedMatchesCollection.Iterator( _BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
}

uint64_t type metadata completion function for _BackwardMatchResult()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0LL;
    }
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for _BackwardMatchResult(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = v6 + v9;
  uint64_t v11 = (*(_BYTE *)(v5 + 80) | *(_BYTE *)(v8 + 80));
  if (v11 > 7
    || ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) != 0
    || (v10 & (unint64_t)~v9) + *(void *)(v8 + 64) > 0x18)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v11 + 16) & ~v11));
    swift_retain();
  }

  else
  {
    uint64_t v15 = v7;
    uint64_t v16 = ~v9;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))( ((unint64_t)a1 + v10) & v16,  ((unint64_t)a2 + v10) & v16,  v15);
  }

  return a1;
}

uint64_t destroy for _BackwardMatchResult(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, AssociatedTypeWitness);
  uint64_t v4 = *(void *)(v3 + 64);
  uint64_t v5 = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(unint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))( (v4 + a1 + *(unsigned __int8 *)(*(void *)(v5 - 8) + 80LL)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v5 - 8) + 80LL),  v5);
}

uint64_t initializeWithCopy for _BackwardMatchResult(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))( (v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80),  (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80),  v7);
  return a1;
}

uint64_t assignWithCopy for _BackwardMatchResult(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24))(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 24))( (v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80),  (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80),  v7);
  return a1;
}

uint64_t initializeWithTake for _BackwardMatchResult(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32))( (v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80),  (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80),  v7);
  return a1;
}

uint64_t assignWithTake for _BackwardMatchResult(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40))(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 40))( (v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80),  (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80),  v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for _BackwardMatchResult(uint64_t a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  else {
    unsigned int v10 = *(_DWORD *)(v8 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v11 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v12 = *(void *)(v5 + 64) + v11;
  if (a2 <= v10) {
    goto LABEL_23;
  }
  uint64_t v13 = (v12 & ~v11) + *(void *)(v8 + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((a2 - v10 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)(a1 + v13);
      if (!v15) {
        goto LABEL_23;
      }
      goto LABEL_14;
    }

    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)(a1 + v13);
      if (!*(_WORD *)(a1 + v13)) {
        goto LABEL_23;
      }
      goto LABEL_14;
    }

    if (v16 < 2)
    {
LABEL_23:
      if (v10)
      {
        else {
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))((v12 + a1) & ~v11, v9, v7);
        }
      }

      return 0LL;
    }
  }

  int v15 = *(unsigned __int8 *)(a1 + v13);
  if (!*(_BYTE *)(a1 + v13)) {
    goto LABEL_23;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if ((_DWORD)v13)
  {
    else {
      int v18 = 4;
    }
    __asm { BR              X12 }
  }

  return v10 + v17 + 1;
}

void storeEnumTagSinglePayload for _BackwardMatchResult(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v8 + 84) <= v7) {
    unsigned int v9 = v7;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v8 + 84);
  }
  if (a3 <= v9)
  {
    unsigned int v11 = 0u;
  }

  else if (v10 <= 3)
  {
    unsigned int v13 = ((a3 - v9 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
    if (HIWORD(v13))
    {
      unsigned int v11 = 4u;
    }

    else if (v13 >= 0x100)
    {
      unsigned int v11 = 2;
    }

    else
    {
      unsigned int v11 = v13 > 1;
    }
  }

  else
  {
    unsigned int v11 = 1u;
  }

  if (v9 < a2)
  {
    unsigned int v12 = ~v9 + a2;
    if (v10 < 4)
    {
      if ((_DWORD)v10)
      {
        int v14 = v12 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if ((_DWORD)v10 == 3)
        {
          *(_WORD *)a1 = v14;
          a1[2] = BYTE2(v14);
        }

        else if ((_DWORD)v10 == 2)
        {
          *(_WORD *)a1 = v14;
        }

        else
        {
          *a1 = v14;
        }
      }
    }

    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v12;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X13 }

uint64_t type metadata completion function for ManyConsumer()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t type metadata accessor for ConsumerSearcher(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ConsumerSearcher);
}

uint64_t type metadata completion function for FixedPatternConsumer()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for FixedPatternConsumer(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8LL);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7 && *(void *)(v4 + 64) <= 0x18uLL && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }

  else
  {
    uint64_t v8 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain();
  }

  return v3;
}

uint64_t getEnumTagSinglePayload for FixedPatternConsumer(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (!a2) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_18;
  }
  uint64_t v7 = *(void *)(v4 + 64);
  char v8 = 8 * v7;
  if (v7 <= 3)
  {
    unsigned int v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)(a1 + v7);
      if (!v9) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7)) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v10 < 2)
    {
LABEL_18:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0LL;
    }
  }

  int v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7)) {
    goto LABEL_18;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (!(_DWORD)v7) {
    return v5 + v11 + 1;
  }
  return ((uint64_t (*)(void))((char *)&loc_182D9663C + 4 * byte_182D9D1A2[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for FixedPatternConsumer( _WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8LL);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        unsigned int v11 = 4u;
      }

      else if (v13 >= 0x100)
      {
        unsigned int v11 = 2;
      }

      else
      {
        unsigned int v11 = v13 > 1;
      }
    }

    else
    {
      unsigned int v11 = 1u;
    }
  }

  else
  {
    unsigned int v11 = 0u;
  }

  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        int v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }

        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }

        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }

    else
    {
      bzero(a1, *(void *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X11 }

void type metadata accessor for NaivePatternSearcher()
{
}

uint64_t type metadata completion function for PatternOrEmpty()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Optional(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  int v7 = *(_DWORD *)(v6 + 80);
  if (*(_DWORD *)(v6 + 84)) {
    size_t v8 = *(void *)(v6 + 64);
  }
  else {
    size_t v8 = *(void *)(v6 + 64) + 1LL;
  }
  if (*(_DWORD *)(v6 + 80) > 7u || (v7 & 0x100000) != 0 || v8 > 0x18)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v7 + 16LL) & ~(unint64_t)v7));
    swift_retain();
  }

  else if ((*(unsigned int (**)(uint64_t *, uint64_t, void))(v6 + 48))(a2, 1LL, *(void *)(a3 + 16)))
  {
    memcpy(a1, a2, v8);
  }

  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0LL, 1LL, v5);
  }

  return a1;
}

uint64_t destroy for Optional(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(a1, 1LL, v3);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  }
  return result;
}

void *initializeWithCopy for Optional(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1LL, v5))
  {
    if (*(_DWORD *)(v6 + 84)) {
      size_t v7 = *(void *)(v6 + 64);
    }
    else {
      size_t v7 = *(void *)(v6 + 64) + 1LL;
    }
    memcpy(a1, a2, v7);
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0LL, 1LL, v5);
  }

  return a1;
}

void *assignWithCopy for Optional(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  size_t v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1LL, v5);
  int v9 = v7(a2, 1LL, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0LL, 1LL, v5);
      return a1;
    }
  }

  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 24))(a1, a2, v5);
      return a1;
    }

    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
  }

  if (*(_DWORD *)(v6 + 84)) {
    size_t v10 = *(void *)(v6 + 64);
  }
  else {
    size_t v10 = *(void *)(v6 + 64) + 1LL;
  }
  memcpy(a1, a2, v10);
  return a1;
}

void *initializeWithTake for Optional(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1LL, v5))
  {
    if (*(_DWORD *)(v6 + 84)) {
      size_t v7 = *(void *)(v6 + 64);
    }
    else {
      size_t v7 = *(void *)(v6 + 64) + 1LL;
    }
    memcpy(a1, a2, v7);
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0LL, 1LL, v5);
  }

  return a1;
}

void *assignWithTake for Optional(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  size_t v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1LL, v5);
  int v9 = v7(a2, 1LL, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0LL, 1LL, v5);
      return a1;
    }
  }

  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 40))(a1, a2, v5);
      return a1;
    }

    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
  }

  if (*(_DWORD *)(v6 + 84)) {
    size_t v10 = *(void *)(v6 + 64);
  }
  else {
    size_t v10 = *(void *)(v6 + 64) + 1LL;
  }
  memcpy(a1, a2, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for Optional(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = v5 - 1;
  if (!v5) {
    unsigned int v6 = 0;
  }
  uint64_t v7 = *(void *)(v4 + 64);
  if (!v5) {
    ++v7;
  }
  if (!a2) {
    return 0LL;
  }
  int v8 = a2 - v6;
  if (a2 > v6)
  {
    char v9 = 8 * v7;
    unsigned int v11 = ((v8 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)(a1 + v7);
      if (v10) {
        goto LABEL_15;
      }
    }

    else
    {
      if (v11 <= 0xFF)
      {
        if (v11 < 2) {
          goto LABEL_24;
        }
LABEL_8:
        int v10 = *(unsigned __int8 *)(a1 + v7);
        if (!*(_BYTE *)(a1 + v7)) {
          goto LABEL_24;
        }
LABEL_15:
        int v12 = (v10 - 1) << v9;
        if ((_DWORD)v7)
        {
          else {
            int v13 = 4;
          }
          __asm { BR              X12 }
        }

        return v6 + v12 + 1;
      }

      int v10 = *(unsigned __int16 *)(a1 + v7);
      if (*(_WORD *)(a1 + v7)) {
        goto LABEL_15;
      }
    }
  }

void storeEnumTagSinglePayload for Optional(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6 = 0u;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8LL);
  int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (v8)
  {
    size_t v10 = *(void *)(v7 + 64);
  }

  else
  {
    unsigned int v9 = 0;
    size_t v10 = *(void *)(v7 + 64) + 1LL;
  }

  BOOL v11 = a3 >= v9;
  unsigned int v12 = a3 - v9;
  if (v12 != 0 && v11)
  {
    if (v10 > 3)
    {
      unsigned int v6 = 1u;
      if (v9 < a2) {
        goto LABEL_14;
      }
      goto LABEL_21;
    }

    unsigned int v13 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
    if (HIWORD(v13))
    {
      unsigned int v6 = 4u;
      if (v9 < a2)
      {
LABEL_14:
        unsigned int v14 = ~v9 + a2;
        if (v10 < 4)
        {
          if ((_DWORD)v10)
          {
            int v15 = v14 & ~(-1 << (8 * v10));
            bzero(a1, v10);
            if ((_DWORD)v10 == 3)
            {
              *a1 = v15;
              *((_BYTE *)a1 + 2) = BYTE2(v15);
            }

            else if ((_DWORD)v10 == 2)
            {
              *a1 = v15;
            }

            else
            {
              *(_BYTE *)a1 = v15;
            }
          }
        }

        else
        {
          bzero(a1, v10);
          *(_DWORD *)a1 = v14;
        }

        __asm { BR              X10 }
      }

void sub_182D96FC0()
{
  *(_BYTE *)(v0 + v1) = v2;
}

void sub_182D96FC8()
{
  *(_WORD *)(v0 + v1) = v2;
}

uint64_t type metadata accessor for PatternOrEmpty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PatternOrEmpty);
}

uint64_t type metadata completion function for PatternOrEmpty.State( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for PatternOrEmpty.State.Representation( 319LL,  *(void *)(a1 + 16),  *(void *)(a1 + 24),  a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PatternOrEmpty.State.Representation(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  uint64_t v10 = *(_DWORD *)(v8 + 80);
  uint64_t v11 = v9 + v10;
  unint64_t v12 = ((v9 + v10) & ~v10) + v9;
  if (v12 <= v6) {
    unint64_t v13 = v6;
  }
  else {
    unint64_t v13 = v12;
  }
  uint64_t v14 = (*(_BYTE *)(v5 + 80) | *(_BYTE *)(v8 + 80));
  if (v14 > 7 || ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) != 0 || v13 + 1 > 0x18)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v14 + 16) & ~v14));
    swift_retain();
  }

  else
  {
    uint64_t v18 = v7;
    unsigned int v19 = *((unsigned __int8 *)a2 + v13);
    if (v19 >= 2)
    {
      else {
        uint64_t v20 = 4LL;
      }
      __asm { BR              X14 }
    }

    if (v19 == 1)
    {
      uint64_t v21 = ~v10;
      int v22 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16);
      v22(a1, a2, v7);
      v22((uint64_t *)(((unint64_t)a1 + v11) & v21), (uint64_t *)(((unint64_t)a2 + v11) & v21), v18);
      *((_BYTE *)a1 + v13) = 1;
    }

    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      *((_BYTE *)a1 + v13) = 0;
    }
  }

  return a1;
}

uint64_t destroy for PatternOrEmpty.State.Representation(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v4 = *(void *)(v3 + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v5 = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = v7 + v8;
  unint64_t v10 = ((v7 + v8) & ~v8) + v7;
  if (v10 <= v4) {
    unint64_t v10 = v4;
  }
  unsigned int v11 = *(unsigned __int8 *)(a1 + v10);
  if (v11 >= 2)
  {
    else {
      uint64_t v12 = 4LL;
    }
    __asm { BR              X15 }
  }

  if (v11 != 1) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, AssociatedTypeWitness);
  }
  uint64_t v14 = ~v8;
  int v15 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v15(a1, v5);
  return ((uint64_t (*)(uint64_t, uint64_t))v15)((v9 + a1) & v14, v5);
}

uint64_t initializeWithCopy for PatternOrEmpty.State.Representation(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v9 + v10;
  unint64_t v12 = ((v9 + v10) & ~v10) + v9;
  if (v12 <= v6) {
    unint64_t v13 = v6;
  }
  else {
    unint64_t v13 = v12;
  }
  unsigned int v14 = *(unsigned __int8 *)(a2 + v13);
  if (v14 >= 2)
  {
    else {
      uint64_t v15 = 4LL;
    }
    __asm { BR              X14 }
  }

  if (v14 == 1)
  {
    uint64_t v16 = ~v10;
    uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
    v17(a1, a2, v7);
    v17((v11 + a1) & v16, (v11 + a2) & v16, v7);
    *(_BYTE *)(a1 + v13) = 1;
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    *(_BYTE *)(a1 + v13) = 0;
  }

  return a1;
}

uint64_t assignWithCopy for PatternOrEmpty.State.Representation(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
    unint64_t v6 = *(void *)(v5 + 64);
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    uint64_t v7 = swift_getAssociatedTypeWitness();
    uint64_t v8 = *(void *)(v7 - 8);
    uint64_t v9 = *(void *)(v8 + 64);
    uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
    uint64_t v11 = v9 + v10;
    unint64_t v12 = ((v9 + v10) & ~v10) + v9;
    if (v12 <= v6) {
      unint64_t v13 = v6;
    }
    else {
      unint64_t v13 = v12;
    }
    unsigned int v14 = *(unsigned __int8 *)(a1 + v13);
    if (v14 >= 2)
    {
      else {
        uint64_t v15 = 4LL;
      }
      __asm { BR              X13 }
    }

    uint64_t v16 = ~v10;
    if (v14 == 1)
    {
      uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
      v17(a1, v7);
      v17((v11 + a1) & v16, v7);
    }

    else
    {
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
    }

    unsigned int v18 = *(unsigned __int8 *)(a2 + v13);
    if (v18 >= 2)
    {
      else {
        uint64_t v19 = 4LL;
      }
      __asm { BR              X12 }
    }

    if (v18 == 1)
    {
      uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
      v20(a1, a2, v7);
      v20((v11 + a1) & v16, (v11 + a2) & v16, v7);
      *(_BYTE *)(a1 + v13) = 1;
    }

    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      *(_BYTE *)(a1 + v13) = 0;
    }
  }

  return a1;
}

uint64_t initializeWithTake for PatternOrEmpty.State.Representation(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v9 + v10;
  unint64_t v12 = ((v9 + v10) & ~v10) + v9;
  if (v12 <= v6) {
    unint64_t v13 = v6;
  }
  else {
    unint64_t v13 = v12;
  }
  unsigned int v14 = *(unsigned __int8 *)(a2 + v13);
  if (v14 >= 2)
  {
    else {
      uint64_t v15 = 4LL;
    }
    __asm { BR              X14 }
  }

  if (v14 == 1)
  {
    uint64_t v16 = ~v10;
    uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32);
    v17(a1, a2, v7);
    v17((v11 + a1) & v16, (v11 + a2) & v16, v7);
    *(_BYTE *)(a1 + v13) = 1;
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
    *(_BYTE *)(a1 + v13) = 0;
  }

  return a1;
}

uint64_t assignWithTake for PatternOrEmpty.State.Representation(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
    unint64_t v6 = *(void *)(v5 + 64);
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    uint64_t v7 = swift_getAssociatedTypeWitness();
    uint64_t v8 = *(void *)(v7 - 8);
    uint64_t v9 = *(void *)(v8 + 64);
    uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
    uint64_t v11 = v9 + v10;
    unint64_t v12 = ((v9 + v10) & ~v10) + v9;
    if (v12 <= v6) {
      unint64_t v13 = v6;
    }
    else {
      unint64_t v13 = v12;
    }
    unsigned int v14 = *(unsigned __int8 *)(a1 + v13);
    if (v14 >= 2)
    {
      else {
        uint64_t v15 = 4LL;
      }
      __asm { BR              X13 }
    }

    uint64_t v16 = ~v10;
    if (v14 == 1)
    {
      uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
      v17(a1, v7);
      v17((v11 + a1) & v16, v7);
    }

    else
    {
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
    }

    unsigned int v18 = *(unsigned __int8 *)(a2 + v13);
    if (v18 >= 2)
    {
      else {
        uint64_t v19 = 4LL;
      }
      __asm { BR              X12 }
    }

    if (v18 == 1)
    {
      uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32);
      v20(a1, a2, v7);
      v20((v11 + a1) & v16, (v11 + a2) & v16, v7);
      *(_BYTE *)(a1 + v13) = 1;
    }

    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
      *(_BYTE *)(a1 + v13) = 0;
    }
  }

  return a1;
}

uint64_t getEnumTagSinglePayload for PatternOrEmpty.State.Representation(uint64_t a1, unsigned int a2)
{
  unint64_t v4 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64LL);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (((*(void *)(*(void *)(AssociatedTypeWitness - 8) + 64LL)
       + *(unsigned __int8 *)(*(void *)(AssociatedTypeWitness - 8) + 80LL)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(AssociatedTypeWitness - 8) + 80LL))
     + *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64LL) <= v4)
    unint64_t v6 = v4;
  else {
    unint64_t v6 = ((*(void *)(*(void *)(AssociatedTypeWitness - 8) + 64LL)
  }
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFE) {
    goto LABEL_22;
  }
  unint64_t v7 = v6 + 1;
  char v8 = 8 * (v6 + 1);
  if ((v6 + 1) <= 3)
  {
    unsigned int v11 = ((a2 + ~(-1 << v8) - 253) >> v8) + 1;
    if (HIWORD(v11))
    {
      int v9 = *(_DWORD *)(a1 + v7);
      if (!v9) {
        goto LABEL_22;
      }
      goto LABEL_15;
    }

    if (v11 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7)) {
        goto LABEL_22;
      }
      goto LABEL_15;
    }

    if (v11 < 2)
    {
LABEL_22:
      unsigned int v13 = *(unsigned __int8 *)(a1 + v6);
      if (v13 >= 3) {
        return (v13 ^ 0xFF) + 1;
      }
      else {
        return 0LL;
      }
    }
  }

  int v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7)) {
    goto LABEL_22;
  }
LABEL_15:
  int v12 = (v9 - 1) << v8;
  if ((_DWORD)v7)
  {
    __asm { BR              X11 }
  }

  return (v12 + 254);
}

void storeEnumTagSinglePayload for PatternOrEmpty.State.Representation( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  unint64_t v6 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64LL);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  unint64_t v8 = ((*(void *)(*(void *)(AssociatedTypeWitness - 8) + 64LL)
  if (v8 <= v6) {
    unint64_t v8 = v6;
  }
  size_t v9 = v8 + 1;
  if (a3 < 0xFE)
  {
    unsigned int v10 = 0u;
  }

  else if (v9 <= 3)
  {
    unsigned int v12 = ((a3 + ~(-1 << (8 * v9)) - 253) >> (8 * v9)) + 1;
    if (HIWORD(v12))
    {
      unsigned int v10 = 4u;
    }

    else if (v12 >= 0x100)
    {
      unsigned int v10 = 2;
    }

    else
    {
      unsigned int v10 = v12 > 1;
    }
  }

  else
  {
    unsigned int v10 = 1u;
  }

  if (a2 <= 0xFD) {
    __asm { BR              X11 }
  }

  unsigned int v11 = a2 - 254;
  if (v9 < 4)
  {
    if ((_DWORD)v8 != -1)
    {
      int v13 = v11 & ~(-1 << (8 * v9));
      bzero(a1, v9);
      if ((_DWORD)v9 == 3)
      {
        *(_WORD *)a1 = v13;
        a1[2] = BYTE2(v13);
      }

      else if ((_DWORD)v9 == 2)
      {
        *(_WORD *)a1 = v13;
      }

      else
      {
        *a1 = v13;
      }
    }
  }

  else
  {
    bzero(a1, v8 + 1);
    *(_DWORD *)a1 = v11;
  }

  __asm { BR              X10 }

void *assignWithCopy for PredicateConsumer(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t type metadata accessor for PredicateSearcher(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PredicateSearcher);
}

uint64_t initializeBufferWithCopyOfBuffer for Executor(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for MEProgram(0LL);
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80LL);
  uint64_t v6 = *a2;
  *(void *)a1 = *a2;
  if ((v5 & 0x20000) != 0)
  {
    a1 = v6 + ((v5 + 16LL) & ~(unint64_t)v5);
    swift_retain();
  }

  else
  {
    unint64_t v7 = (int *)v4;
    uint64_t v8 = a2[2];
    *(void *)(a1 + 8) = a2[1];
    *(void *)(a1 + 16) = v8;
    uint64_t v9 = a2[4];
    *(void *)(a1 + 24) = a2[3];
    *(void *)(a1 + 32) = v9;
    uint64_t v10 = a2[6];
    *(void *)(a1 + 40) = a2[5];
    *(void *)(a1 + 48) = v10;
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 17);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 19);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 21);
    *(void *)(a1 + 184) = a2[23];
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 9);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 11);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 13);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 15);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 7);
    *(_WORD *)(a1 + 192) = *((_WORD *)a2 + 96);
    uint64_t v11 = *(int *)(v4 + 56);
    uint64_t v15 = (uint64_t)a2 + v11;
    uint64_t v16 = a1 + v11;
    uint64_t v12 = type metadata accessor for CaptureList();
    unsigned int v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16LL);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v14(v16, v15, v12);
    *(void *)(a1 + v7[15]) = *(uint64_t *)((char *)a2 + v7[15]);
    *(void *)(a1 + v7[16]) = *(uint64_t *)((char *)a2 + v7[16]);
    *(_BYTE *)(a1 + v7[17]) = *((_BYTE *)a2 + v7[17]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  return a1;
}

uint64_t destroy for Executor(uint64_t a1)
{
  uint64_t v2 = a1 + *(int *)(type metadata accessor for MEProgram(0LL) + 56);
  uint64_t v3 = type metadata accessor for CaptureList();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(v2, v3);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Executor(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  __int128 v7 = *(_OWORD *)(a2 + 72);
  __int128 v8 = *(_OWORD *)(a2 + 88);
  __int128 v9 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = v9;
  *(_OWORD *)(a1 + 88) = v8;
  *(_OWORD *)(a1 + 72) = v7;
  __int128 v10 = *(_OWORD *)(a2 + 136);
  __int128 v11 = *(_OWORD *)(a2 + 152);
  __int128 v12 = *(_OWORD *)(a2 + 168);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = v12;
  *(_OWORD *)(a1 + 152) = v11;
  *(_OWORD *)(a1 + 136) = v10;
  *(_WORD *)(a1 + 192) = *(_WORD *)(a2 + 192);
  int v13 = (int *)type metadata accessor for MEProgram(0LL);
  uint64_t v14 = v13[14];
  uint64_t v18 = a2 + v14;
  uint64_t v19 = a1 + v14;
  uint64_t v15 = type metadata accessor for CaptureList();
  uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16LL);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v17(v19, v18, v15);
  *(void *)(a1 + v13[15]) = *(void *)(a2 + v13[15]);
  *(void *)(a1 + v13[16]) = *(void *)(a2 + v13[16]);
  *(_BYTE *)(a1 + v13[17]) = *(_BYTE *)(a2 + v13[17]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Executor(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(_BYTE *)(a1 + 193) = *(_BYTE *)(a2 + 193);
  uint64_t v4 = (int *)type metadata accessor for MEProgram(0LL);
  uint64_t v5 = v4[14];
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = type metadata accessor for CaptureList();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 24LL))(v6, v7, v8);
  *(void *)(a1 + v4[15]) = *(void *)(a2 + v4[15]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + v4[16]) = *(void *)(a2 + v4[16]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + v4[17]) = *(_BYTE *)(a2 + v4[17]);
  return a1;
}

uint64_t initializeWithTake for Executor(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_WORD *)(a1 + 192) = *(_WORD *)(a2 + 192);
  uint64_t v5 = (int *)type metadata accessor for MEProgram(0LL);
  uint64_t v6 = v5[14];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for CaptureList();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
  *(void *)(a1 + v5[15]) = *(void *)(a2 + v5[15]);
  *(void *)(a1 + v5[16]) = *(void *)(a2 + v5[16]);
  *(_BYTE *)(a1 + v5[17]) = *(_BYTE *)(a2 + v5[17]);
  return a1;
}

uint64_t assignWithTake for Executor(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(_BYTE *)(a1 + 193) = *(_BYTE *)(a2 + 193);
  __int128 v4 = (int *)type metadata accessor for MEProgram(0LL);
  uint64_t v5 = v4[14];
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = type metadata accessor for CaptureList();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 40LL))(v6, v7, v8);
  *(void *)(a1 + v4[15]) = *(void *)(a2 + v4[15]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + v4[16]) = *(void *)(a2 + v4[16]);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + v4[17]) = *(_BYTE *)(a2 + v4[17]);
  return a1;
}

uint64_t getEnumTagSinglePayload for Engine()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_182D98A0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, type metadata accessor for MEProgram);
}

uint64_t storeEnumTagSinglePayload for Engine()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_182D98A24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, type metadata accessor for MEProgram);
}

uint64_t destroy for Processor.Registers()
{
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for Processor.Registers(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for Processor.Registers(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy72_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for Processor.Registers(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Processor.Registers(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 72)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Processor.Registers(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 72) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 72) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for Processor.Registers()
{
  return &type metadata for Processor.Registers;
}

uint64_t destroy for Processor.SavePoint()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Processor.SavePoint(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v4;
  uint64_t v5 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Processor.SavePoint(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  __int128 v5 = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy80_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for Processor.SavePoint(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Processor.SavePoint(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 56);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(specialized Compiler.ByteCodeGen.emitAlternationGen<A>(_:withBacktracking:_:)(*(void *)(v3 + 16), v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Processor.SavePoint(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0LL;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 80) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 56) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for Processor.SavePoint()
{
  return &type metadata for Processor.SavePoint;
}

void *initializeBufferWithCopyOfBuffer for StringLiteralBuilder(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for StringLiteralBuilder()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for StringLiteralBuilder(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for StringLiteralBuilder(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for StringLiteralBuilder(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(specialized Compiler.ByteCodeGen.emitAlternationGen<A>(_:withBacktracking:_:)(*(void *)(v3 + 16), v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for StringLiteralBuilder(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void *type metadata accessor for StringLiteralBuilder()
{
  return &unk_189C4B5D0;
}

uint64_t type metadata accessor for TypedInt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TypedInt);
}

uint64_t getEnumTagSinglePayload for _CharacterClassModel.Representation( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xF9) {
    goto LABEL_17;
  }
  if (a2 + 7 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 7) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 7;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }

uint64_t storeEnumTagSinglePayload for _CharacterClassModel.Representation( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF8) {
    return ((uint64_t (*)(void))((char *)&loc_182D9924C + 4 * byte_182D9D1F9[v4]))();
  }
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_182D99280 + 4 * byte_182D9D1F4[v4]))();
}

uint64_t sub_182D99280(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_182D99288(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x182D99290LL);
  }
  return result;
}

uint64_t sub_182D9929C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x182D992A4LL);
  }
  *(_BYTE *)__n128 result = a2 + 7;
  return result;
}

uint64_t sub_182D992A8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_182D992B0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for _CharacterClassModel.Representation()
{
  return &type metadata for _CharacterClassModel.Representation;
}

_DWORD *__swift_memcpy4_1(_DWORD *result, _DWORD *a2)
{
  *__n128 result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for _CharacterClassModel(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 4)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 1);
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for _CharacterClassModel(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_DWORD *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 4) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 4) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 1) = a2 + 1;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for _CharacterClassModel()
{
  return &type metadata for _CharacterClassModel;
}

uint64_t destroy for CaptureTransform(uint64_t a1)
{
  return outlined consume of CaptureTransform.Closure(*(void *)(a1 + 16), *(void *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

uint64_t initializeWithCopy for CaptureTransform(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  unsigned __int8 v5 = *(_BYTE *)(a2 + 32);
  outlined copy of CaptureTransform.Closure(v3, v4, v5);
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = v5;
  return a1;
}

uint64_t assignWithCopy for CaptureTransform(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  unsigned __int8 v5 = *(_BYTE *)(a2 + 32);
  outlined copy of CaptureTransform.Closure(v3, v4, v5);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v4;
  unsigned __int8 v8 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v5;
  outlined consume of CaptureTransform.Closure(v6, v7, v8);
  return a1;
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for CaptureTransform(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 32);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  __int128 v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  unsigned __int8 v7 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v3;
  outlined consume of CaptureTransform.Closure(v4, v5, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for CaptureTransform(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 33)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CaptureTransform(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(_BYTE *)(result + 32) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 33) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 33) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for CaptureTransform()
{
  return &type metadata for CaptureTransform;
}

uint64_t initializeBufferWithCopyOfBuffer for CaptureTransform.Closure(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for PatternSegment( a1,  a2,  a3,  (void (*)(void, uint64_t, uint64_t))outlined copy of CaptureTransform.Closure);
}

uint64_t destroy for CaptureTransform.Closure(uint64_t a1)
{
  return outlined consume of CaptureTransform.Closure(*(void *)a1, *(void *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t *assignWithCopy for CaptureTransform.Closure(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return assignWithCopy for RegexCompilationError( a1,  a2,  a3,  (void (*)(void, uint64_t, uint64_t))outlined copy of CaptureTransform.Closure,  (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of CaptureTransform.Closure);
}

uint64_t *assignWithCopy for RegexCompilationError( uint64_t *a1, uint64_t *a2, uint64_t a3, void (*a4)(void, uint64_t, uint64_t), void (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  uint64_t v9 = *((unsigned __int8 *)a2 + 16);
  a4(*a2, v8, v9);
  uint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  *a1 = v7;
  a1[1] = v8;
  uint64_t v12 = *((unsigned __int8 *)a1 + 16);
  *((_BYTE *)a1 + 16) = v9;
  a5(v10, v11, v12);
  return a1;
}

uint64_t *assignWithTake for CaptureTransform.Closure(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for RegexCompilationError( a1,  a2,  a3,  (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of CaptureTransform.Closure);
}

uint64_t *assignWithTake for RegexCompilationError( uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  char v5 = *(_BYTE *)(a2 + 16);
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v8 = *((unsigned __int8 *)a1 + 16);
  *((_BYTE *)a1 + 16) = v5;
  a4(v6, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for CaptureTransform.Closure(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CaptureTransform.Closure( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 253;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 17) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 17) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 16) = -(char)a2;
    }
  }

  return result;
}

uint64_t destructiveInjectEnumTag for CaptureTransform.Closure(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for CaptureTransform.Closure()
{
  return &type metadata for CaptureTransform.Closure;
}

__n128 __swift_memcpy136_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __int128 v2 = *(_OWORD *)(a2 + 16);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  __int128 v6 = *(_OWORD *)(a2 + 96);
  __int128 v7 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for MEProgram.RegisterInfo(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 136)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for MEProgram.RegisterInfo(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 136) = v3;
  return result;
}

ValueMetadata *type metadata accessor for MEProgram.RegisterInfo()
{
  return &type metadata for MEProgram.RegisterInfo;
}

void destroy for Processor()
{
}

uint64_t initializeWithCopy for Processor(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  __int128 v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  uint64_t v5 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v5;
  uint64_t v6 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v6;
  uint64_t v7 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v7;
  uint64_t v8 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v8;
  uint64_t v11 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v11;
  uint64_t v12 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v12;
  uint64_t v9 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v9;
  *(_WORD *)(a1 + 192) = *(_WORD *)(a2 + 192);
  uint64_t v13 = *(void *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  MEMORY[0x186E1788C](v13);
  *(void *)(a1 + 200) = v13;
  return a1;
}

uint64_t assignWithCopy for Processor(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 184);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(void *)(a1 + 184) = v4;
  *(_BYTE *)(a1 + 193) = *(_BYTE *)(a2 + 193);
  uint64_t v5 = *(void *)(a1 + 200);
  uint64_t v6 = *(void *)(a2 + 200);
  MEMORY[0x186E1788C](v6);
  *(void *)(a1 + 200) = v6;
  MEMORY[0x186E17880](v5);
  return a1;
}

__n128 __swift_memcpy208_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __int128 v2 = *(_OWORD *)(a2 + 16);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __int128 v5 = *(_OWORD *)(a2 + 80);
  __int128 v6 = *(_OWORD *)(a2 + 96);
  __int128 v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  __n128 result = *(__n128 *)(a2 + 144);
  __int128 v9 = *(_OWORD *)(a2 + 160);
  __int128 v10 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v10;
  *(__n128 *)(a1 + 144) = result;
  *(_OWORD *)(a1 + 160) = v9;
  return result;
}

uint64_t assignWithTake for Processor(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  __int128 v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(_WORD *)(a1 + 192) = *(_WORD *)(a2 + 192);
  uint64_t v6 = *(void *)(a1 + 200);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  MEMORY[0x186E17880](v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for Processor(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 208)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(specialized Compiler.ByteCodeGen.emitAlternationGen<A>(_:withBacktracking:_:)(*(void *)(v3 + 16), v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Processor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 200) = 0LL;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 208) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 208) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for Processor()
{
  return &type metadata for Processor;
}

uint64_t destroy for Processor._StoredCapture(uint64_t result)
{
  if (*(void *)(result + 48)) {
    return __swift_destroy_boxed_opaque_existential_0(result + 24);
  }
  return result;
}

uint64_t initializeWithCopy for Processor._StoredCapture(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  uint64_t v4 = (_OWORD *)(a1 + 24);
  __int128 v5 = (_OWORD *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 48);
  if (v6)
  {
    *(void *)(a1 + 48) = v6;
    (**(void (***)(_OWORD *, _OWORD *))(v6 - 8))(v4, v5);
  }

  else
  {
    __int128 v7 = v5[1];
    *uint64_t v4 = *v5;
    v4[1] = v7;
  }

  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return a1;
}

uint64_t assignWithCopy for Processor._StoredCapture(uint64_t a1, __int128 *a2)
{
  __int128 v4 = *a2;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  *(_OWORD *)a1 = v4;
  __int128 v5 = (_OWORD *)(a1 + 24);
  uint64_t v6 = (__int128 *)((char *)a2 + 24);
  uint64_t v7 = *((void *)a2 + 6);
  if (!*(void *)(a1 + 48))
  {
    if (v7)
    {
      *(void *)(a1 + 48) = v7;
      (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 24, (uint64_t)a2 + 24);
      goto LABEL_8;
    }

__n128 __swift_memcpy65_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for Processor._StoredCapture(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  __int128 v4 = (_OWORD *)(a1 + 24);
  if (*(void *)(a1 + 48)) {
    __swift_destroy_boxed_opaque_existential_0(a1 + 24);
  }
  __int128 v5 = *(_OWORD *)(a2 + 40);
  *__int128 v4 = *(_OWORD *)(a2 + 24);
  v4[1] = v5;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for Processor._StoredCapture(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 65)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 48);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Processor._StoredCapture( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 56) = 0LL;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 64) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 65) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 65) = 0;
    }
    if (a2) {
      *(void *)(result + 48) = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for Processor._StoredCapture()
{
  return &type metadata for Processor._StoredCapture;
}

uint64_t getEnumTagSinglePayload for DSLTree.CustomCharacterClass.AsciiBitset( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF && a1[24]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for DSLTree.CustomCharacterClass.AsciiBitset( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 24) = 0;
    }
    if (a2) {
      *(_BYTE *)__n128 result = a2 + 1;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for DSLTree.CustomCharacterClass.AsciiBitset()
{
  return &type metadata for DSLTree.CustomCharacterClass.AsciiBitset;
}

ValueMetadata *type metadata accessor for _InstructionAddress()
{
  return &type metadata for _InstructionAddress;
}

ValueMetadata *type metadata accessor for Instruction()
{
  return &type metadata for Instruction;
}

uint64_t type metadata completion function for TypedIndex()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ManyConsumer(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unsigned int v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7 && *(void *)(v4 + 64) <= 0x18uLL && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }

  else
  {
    uint64_t v8 = *a2;
    *unsigned int v3 = *a2;
    unsigned int v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain();
  }

  return v3;
}

uint64_t destroy for TypedIndex(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 16) - 8LL) + 8LL))();
}

uint64_t initializeWithCopy for TypedIndex(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t assignWithCopy for TypedIndex(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t initializeWithTake for TypedIndex(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t assignWithTake for TypedIndex(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t getEnumTagSinglePayload for ManyConsumer(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (!a2) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_18;
  }
  uint64_t v7 = *(void *)(v4 + 64);
  char v8 = 8 * v7;
  if (v7 <= 3)
  {
    unsigned int v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)(a1 + v7);
      if (!v9) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7)) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v10 < 2)
    {
LABEL_18:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0LL;
    }
  }

  int v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7)) {
    goto LABEL_18;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (!(_DWORD)v7) {
    return v5 + v11 + 1;
  }
  return ((uint64_t (*)(void))((char *)&loc_182D9A310 + 4 * byte_182D9D1FE[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for ManyConsumer(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8LL);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        unsigned int v11 = 4u;
      }

      else if (v13 >= 0x100)
      {
        unsigned int v11 = 2;
      }

      else
      {
        unsigned int v11 = v13 > 1;
      }
    }

    else
    {
      unsigned int v11 = 1u;
    }
  }

  else
  {
    unsigned int v11 = 0u;
  }

  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        int v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }

        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }

        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }

    else
    {
      bzero(a1, *(void *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X11 }

uint64_t type metadata accessor for TypedIndex(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TypedIndex);
}

uint64_t getEnumTagSinglePayload for AnyHashableType(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 8)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AnyHashableType(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 8) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 8) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AnyHashableType()
{
  return &type metadata for AnyHashableType;
}

unint64_t destroy for RegexMatchesCollection.Index(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  if (result >= 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  return result;
}

uint64_t initializeWithCopy for RegexMatchesCollection.Index(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    __int128 v4 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v4;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
  }

  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  return a1;
}

uint64_t assignWithCopy for RegexMatchesCollection.Index(uint64_t a1, __int128 *a2)
{
  unint64_t v4 = *((void *)a2 + 1);
  if (*(void *)(a1 + 8) < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *((void *)a2 + 1);
      *(void *)(a1 + 16) = *((void *)a2 + 2);
      *(_OWORD *)(a1 + 24) = *(__int128 *)((char *)a2 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return a1;
    }

uint64_t assignWithTake for RegexMatchesCollection.Index(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_5:
    __int128 v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    return a1;
  }

  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for RegexMatchesCollection.Index(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for RegexMatchesCollection.Index( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 32) = 0LL;
    *(_OWORD *)unint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 40) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 40) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }

  return result;
}

uint64_t getEnumTag for RegexMatchesCollection.Index(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

double destructiveInjectEnumTag for RegexMatchesCollection.Index(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    double result = 0.0;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(void *)a1 = a2 ^ 0x80000000;
  }

  else if (a2)
  {
    *(void *)(a1 + 8) = (a2 - 1);
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for LazyMapSequence(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 16 > 0x18)
  {
    uint64_t v9 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }

  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unsigned int v10 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8LL);
    uint64_t v11 = v10[1];
    unsigned int v12 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8LL);
    *unsigned int v12 = *v10;
    v12[1] = v11;
  }

  swift_retain();
  return v4;
}

uint64_t destroy for LazyMapSequence(uint64_t a1, uint64_t a2)
{
  return swift_release();
}

uint64_t initializeWithCopy for LazyMapSequence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 16))();
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8LL);
  size_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v9 = v8[1];
  *int v7 = *v8;
  v7[1] = v9;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for LazyMapSequence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 24))();
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8LL);
  size_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v9 = v8[1];
  *int v7 = *v8;
  v7[1] = v9;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for LazyMapSequence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 32))();
  *(_OWORD *)((*(void *)(v5 + 64) + 7LL + a1) & 0xFFFFFFFFFFFFF8LL) = *(_OWORD *)((*(void *)(v5 + 64) + 7LL + a2) & 0xFFFFFFFFFFFFF8LL);
  return a1;
}

uint64_t assignWithTake for LazyMapSequence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 40))();
  *(_OWORD *)((*(void *)(v5 + 64) + 7LL + a1) & 0xFFFFFFFFFFFFFFF8LL) = *(_OWORD *)((*(void *)(v5 + 64) + 7LL + a2) & 0xFFFFFFFFFFFFF8LL);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for LazyMapSequence(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v6 = 0x7FFFFFFF;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v7 = *(void *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      unint64_t v12 = *(void *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8LL);
      if (v12 >= 0xFFFFFFFF) {
        LODWORD(v12) = -1;
      }
      return (v12 + 1);
    }

    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }

  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 16) & 0xFFFFFFF8) != 0) {
      unsigned int v8 = 2;
    }
    else {
      unsigned int v8 = a2 - v6 + 1;
    }
    if (v8 >= 0x10000) {
      unsigned int v9 = 4;
    }
    else {
      unsigned int v9 = 2;
    }
    if (v8 < 0x100) {
      unsigned int v9 = 1;
    }
    if (v8 >= 2) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0LL;
    }
    return ((uint64_t (*)(void))((char *)&loc_182D9ABB8 + 4 * byte_182D9D20C[v10]))();
  }

void storeEnumTagSinglePayload for LazyMapSequence( unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8LL);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu) {
    unsigned int v6 = 0x7FFFFFFF;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v5 + 84);
  }
  if (v6 >= a3)
  {
    int v9 = 0u;
    if (a2 <= v6) {
      goto LABEL_17;
    }
  }

  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v7 = a3 - v6 + 1;
    }
    else {
      unsigned int v7 = 2;
    }
    if (v7 >= 0x10000) {
      int v8 = 4;
    }
    else {
      int v8 = 2;
    }
    if (v7 < 0x100) {
      int v8 = 1;
    }
    if (v7 >= 2) {
      int v9 = v8;
    }
    else {
      int v9 = 0;
    }
    if (a2 <= v6) {
LABEL_17:
    }
      __asm { BR              X12 }
  }

  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    unsigned int v10 = ~v6 + a2;
    bzero(a1, ((*(void *)(v5 + 64) + 7LL) & 0xFFFFFFFFFFFFFFF8LL) + 16);
    *a1 = v10;
  }

  __asm { BR              X10 }

void sub_182D9AD30()
{
  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x182D9ADA8LL);
}

void sub_182D9AD38(uint64_t a1, int a2)
{
  *(_DWORD *)(v2 + v3) = 0;
  if (a2) {
    JUMPOUT(0x182D9AD40LL);
  }
  JUMPOUT(0x182D9ADA8LL);
}

void sub_182D9AD80()
{
  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x182D9ADA8LL);
}

void sub_182D9AD88()
{
  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x182D9ADA8LL);
}

uint64_t sub_182D9AD90(uint64_t a1, int a2, unsigned int a3)
{
  *(_WORD *)(v5 + v6) = 0;
  if (!a2) {
    JUMPOUT(0x182D9ADA8LL);
  }
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0) {
      JUMPOUT(0x182D9ADA4LL);
    }
    JUMPOUT(0x182D9AD9CLL);
  }

  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

unint64_t lazy protocol witness table accessor for type AnyHashableType and conformance AnyHashableType()
{
  unint64_t result = lazy protocol witness table cache variable for type AnyHashableType and conformance AnyHashableType;
  if (!lazy protocol witness table cache variable for type AnyHashableType and conformance AnyHashableType)
  {
    unint64_t result = MEMORY[0x186E17958]( &protocol conformance descriptor for AnyHashableType,  &type metadata for AnyHashableType);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AnyHashableType and conformance AnyHashableType);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Instruction and conformance Instruction()
{
  unint64_t result = lazy protocol witness table cache variable for type Instruction and conformance Instruction;
  if (!lazy protocol witness table cache variable for type Instruction and conformance Instruction)
  {
    unint64_t result = MEMORY[0x186E17958](&protocol conformance descriptor for Instruction, &type metadata for Instruction);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Instruction and conformance Instruction);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type CaptureTransform and conformance CaptureTransform()
{
  unint64_t result = lazy protocol witness table cache variable for type CaptureTransform and conformance CaptureTransform;
  if (!lazy protocol witness table cache variable for type CaptureTransform and conformance CaptureTransform)
  {
    unint64_t result = MEMORY[0x186E17958]( &protocol conformance descriptor for CaptureTransform,  &type metadata for CaptureTransform);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CaptureTransform and conformance CaptureTransform);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type _CharacterClassModel and conformance _CharacterClassModel()
{
  unint64_t result = lazy protocol witness table cache variable for type _CharacterClassModel and conformance _CharacterClassModel;
  if (!lazy protocol witness table cache variable for type _CharacterClassModel and conformance _CharacterClassModel)
  {
    unint64_t result = MEMORY[0x186E17958]( &protocol conformance descriptor for _CharacterClassModel,  &type metadata for _CharacterClassModel);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type _CharacterClassModel and conformance _CharacterClassModel);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type _CharacterClassModel.Representation and conformance _CharacterClassModel.Representation()
{
  unint64_t result = lazy protocol witness table cache variable for type _CharacterClassModel.Representation and conformance _CharacterClassModel.Representation;
  if (!lazy protocol witness table cache variable for type _CharacterClassModel.Representation and conformance _CharacterClassModel.Representation)
  {
    unint64_t result = MEMORY[0x186E17958]( &protocol conformance descriptor for _CharacterClassModel.Representation,  &type metadata for _CharacterClassModel.Representation);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type _CharacterClassModel.Representation and conformance _CharacterClassModel.Representation);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type SubstringSearcher and conformance SubstringSearcher()
{
  unint64_t result = lazy protocol witness table cache variable for type SubstringSearcher and conformance SubstringSearcher;
  if (!lazy protocol witness table cache variable for type SubstringSearcher and conformance SubstringSearcher)
  {
    unint64_t result = MEMORY[0x186E17958]( &protocol conformance descriptor for SubstringSearcher,  &type metadata for SubstringSearcher);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SubstringSearcher and conformance SubstringSearcher);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type SentinelValue and conformance SentinelValue()
{
  unint64_t result = lazy protocol witness table cache variable for type SentinelValue and conformance SentinelValue;
  if (!lazy protocol witness table cache variable for type SentinelValue and conformance SentinelValue)
  {
    unint64_t result = MEMORY[0x186E17958](&protocol conformance descriptor for SentinelValue, &type metadata for SentinelValue);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SentinelValue and conformance SentinelValue);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Instruction.OpCode and conformance Instruction.OpCode()
{
  unint64_t result = lazy protocol witness table cache variable for type Instruction.OpCode and conformance Instruction.OpCode;
  if (!lazy protocol witness table cache variable for type Instruction.OpCode and conformance Instruction.OpCode)
  {
    unint64_t result = MEMORY[0x186E17958]( &protocol conformance descriptor for Instruction.OpCode,  &type metadata for Instruction.OpCode);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Instruction.OpCode and conformance Instruction.OpCode);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type QuantifyPayload.PayloadType and conformance QuantifyPayload.PayloadType()
{
  unint64_t result = lazy protocol witness table cache variable for type QuantifyPayload.PayloadType and conformance QuantifyPayload.PayloadType;
  if (!lazy protocol witness table cache variable for type QuantifyPayload.PayloadType and conformance QuantifyPayload.PayloadType)
  {
    unint64_t result = MEMORY[0x186E17958]( &protocol conformance descriptor for QuantifyPayload.PayloadType,  &type metadata for QuantifyPayload.PayloadType);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type QuantifyPayload.PayloadType and conformance QuantifyPayload.PayloadType);
  }

  return result;
}

ValueMetadata *type metadata accessor for Processor.ProcessorMetrics()
{
  return &type metadata for Processor.ProcessorMetrics;
}

uint64_t getEnumTagSinglePayload for RegexRepetitionBehavior(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }

uint64_t storeEnumTagSinglePayload for RegexRepetitionBehavior(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_182D9B134 + 4 * byte_182D9D220[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_182D9B168 + 4 * byte_182D9D21B[v4]))();
}

uint64_t sub_182D9B168(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_182D9B170(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x182D9B178LL);
  }
  return result;
}

uint64_t sub_182D9B184(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x182D9B18CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_182D9B190(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_182D9B198(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for State()
{
  return &type metadata for State;
}

ValueMetadata *type metadata accessor for Controller()
{
  return &type metadata for Controller;
}

ValueMetadata *type metadata accessor for MatchMode()
{
  return &type metadata for MatchMode;
}

ValueMetadata *type metadata accessor for _CallStackAddress()
{
  return &type metadata for _CallStackAddress;
}

ValueMetadata *type metadata accessor for MEProgram.Builder._AddressToken()
{
  return &type metadata for MEProgram.Builder._AddressToken;
}

ValueMetadata *type metadata accessor for _PositionRegister()
{
  return &type metadata for _PositionRegister;
}

ValueMetadata *type metadata accessor for _ValueRegister()
{
  return &type metadata for _ValueRegister;
}

ValueMetadata *type metadata accessor for _CaptureRegister()
{
  return &type metadata for _CaptureRegister;
}

ValueMetadata *type metadata accessor for _IntRegister()
{
  return &type metadata for _IntRegister;
}

uint64_t destroy for TypedSetVector()
{
  return swift_bridgeObjectRelease();
}

void *initializeBufferWithCopyOfBuffer for TypedSetVector(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for TypedSetVector(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for TypedSetVector(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PredicateConsumer(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PredicateConsumer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

uint64_t type metadata accessor for TypedSetVector(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TypedSetVector);
}

uint64_t getEnumTagSinglePayload for RegexSemanticLevel(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

uint64_t storeEnumTagSinglePayload for RegexSemanticLevel(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_182D9B498 + 4 * byte_182D9D22A[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_182D9B4CC + 4 * byte_182D9D225[v4]))();
}

uint64_t sub_182D9B4CC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_182D9B4D4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x182D9B4DCLL);
  }
  return result;
}

uint64_t sub_182D9B4E8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x182D9B4F0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_182D9B4F4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_182D9B4FC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *destructiveInjectEnumTag for MatchingOptions.SemanticLevel(_BYTE *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for MatchingOptions.SemanticLevel()
{
  return &type metadata for MatchingOptions.SemanticLevel;
}

unint64_t lazy protocol witness table accessor for type MatchingOptions.SemanticLevel and conformance MatchingOptions.SemanticLevel()
{
  unint64_t result = lazy protocol witness table cache variable for type MatchingOptions.SemanticLevel and conformance MatchingOptions.SemanticLevel;
  if (!lazy protocol witness table cache variable for type MatchingOptions.SemanticLevel and conformance MatchingOptions.SemanticLevel)
  {
    unint64_t result = MEMORY[0x186E17958]( &protocol conformance descriptor for MatchingOptions.SemanticLevel,  &type metadata for MatchingOptions.SemanticLevel);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type MatchingOptions.SemanticLevel and conformance MatchingOptions.SemanticLevel);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type MatchMode and conformance MatchMode()
{
  unint64_t result = lazy protocol witness table cache variable for type MatchMode and conformance MatchMode;
  if (!lazy protocol witness table cache variable for type MatchMode and conformance MatchMode)
  {
    unint64_t result = MEMORY[0x186E17958](&protocol conformance descriptor for MatchMode, &type metadata for MatchMode);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type MatchMode and conformance MatchMode);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type State and conformance State()
{
  unint64_t result = lazy protocol witness table cache variable for type State and conformance State;
  if (!lazy protocol witness table cache variable for type State and conformance State)
  {
    unint64_t result = MEMORY[0x186E17958](&protocol conformance descriptor for State, &type metadata for State);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type State and conformance State);
  }

  return result;
}

uint64_t _swift_string_processing_getScalarBitArrayIdx(unsigned int a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v3 = a1 / 0x4400uLL;
  unint64_t v4 = *a2;
  if (*a2 < v3) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  unint64_t v5 = (a1 / 0x110uLL) & 0x3F;
  unint64_t v6 = a2[v3 + 1];
  if (((v6 >> v5) & 1) == 0) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  unsigned __int16 v7 = *(_WORD *)(a3 + 2 * v3);
  if ((_DWORD)v5) {
    v7 += vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v6 << -(char)v5)));
  }
  uint64_t v8 = 5LL * v7;
  uint64_t v9 = (uint64_t)&a2[5 * v7 + 1 + v4];
  uint64_t v10 = (a1 % 0x110) >> 6;
  unint64_t v11 = *(void *)(v9 + 8LL * v10);
  if (((v11 >> (a1 % 0x110)) & 1) == 0) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  unsigned int v12 = (a1 % 0x110) & 0x3F;
  unsigned __int16 v13 = *(_WORD *)(a3 + 2 * (v4 + v10 + v8));
  unsigned __int16 v14 = v13 + vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v11 << -(char)v12)));
  if (v12) {
    unsigned __int16 v13 = v14;
  }
  return (*(void *)(v9 + 32) >> 16) + v13;
}

uint64_t _swift_string_processing_getScript(unsigned int a1)
{
  int v1 = 0;
  int v2 = 1638;
  while (1)
  {
    int v3 = v2 - v1;
    if (v2 < v1) {
      ++v3;
    }
    int v4 = v1 + (v3 >> 1);
    int v5 = v4;
    unsigned int v6 = v4 == 1638 ? 1114111 : (_swift_stdlib_scripts[v4 + 1] & 0x1FFFFF) - 1;
    unsigned int v7 = _swift_stdlib_scripts[v4];
    if ((v7 & 0x1FFFFF) <= a1 && v6 >= a1) {
      break;
    }
    if ((v7 & 0x1FFFFF) <= a1) {
      int v9 = v2;
    }
    else {
      int v9 = v4 - 1;
    }
    if (v6 < a1) {
      int v1 = v5 + 1;
    }
    else {
      int v2 = v9;
    }
    if (v2 < v1) {
      return 255LL;
    }
  }

  return v7 >> 21;
}

char *_swift_string_processing_getScriptExtensions(unsigned int a1, _BYTE *a2)
{
  uint64_t ScalarBitArrayIdx = _swift_string_processing_getScalarBitArrayIdx( a1,  _swift_stdlib_script_extensions,  (uint64_t)&_swift_stdlib_script_extensions_ranks);
  if (ScalarBitArrayIdx == 0x7FFFFFFFFFFFFFFFLL) {
    return 0LL;
  }
  unsigned int v5 = _swift_stdlib_script_extensions_data_indices[ScalarBitArrayIdx];
  *a2 = v5 >> 11;
  return (char *)&_swift_stdlib_script_extensions_data + (v5 & 0x7FF);
}

Swift::Int_optional __swiftcall CaptureList.indexOfCapture(named:)(Swift::String named)
{
  Swift::Int v1 = MEMORY[0x18961C040](named._countAndFlagsBits, named._object);
  result.Swift::Int value = v1;
  result.Swift::Bool is_nil = v2;
  return result;
}

uint64_t CaptureList.Capture.optionalDepth.getter()
{
  return MEMORY[0x18961C048]();
}

uint64_t CaptureList.Capture.visibleInTypedOutput.getter()
{
  return MEMORY[0x18961C050]();
}

uint64_t CaptureList.Capture.init(name:type:optionalDepth:visibleInTypedOutput:_:)()
{
  return MEMORY[0x18961C058]();
}

uint64_t CaptureList.Capture.name.getter()
{
  return MEMORY[0x18961C060]();
}

uint64_t CaptureList.Capture.type.getter()
{
  return MEMORY[0x18961C068]();
}

uint64_t type metadata accessor for CaptureList.Capture()
{
  return MEMORY[0x18961C070]();
}

uint64_t CaptureList.init(arrayLiteral:)()
{
  return MEMORY[0x18961C080]();
}

uint64_t CaptureList.append(_:)()
{
  return MEMORY[0x18961C088]();
}

uint64_t CaptureList.Builder.addCaptures(of:optionalNesting:visibleInTypedOutput:)()
{
  return MEMORY[0x18961C090]();
}

uint64_t CaptureList.Builder.OptionalNesting.addingOptional.getter()
{
  return MEMORY[0x18961C098]();
}

uint64_t CaptureList.Builder.OptionalNesting.disablingNesting.getter()
{
  return MEMORY[0x18961C0A0]();
}

uint64_t CaptureList.Builder.OptionalNesting.depth.getter()
{
  return MEMORY[0x18961C0A8]();
}

uint64_t CaptureList.Builder.OptionalNesting.init(canNest:)()
{
  return MEMORY[0x18961C0B0]();
}

uint64_t type metadata accessor for CaptureList.Builder.OptionalNesting()
{
  return MEMORY[0x18961C0B8]();
}

uint64_t CaptureList.Builder.captures.modify()
{
  return MEMORY[0x18961C0C0]();
}

uint64_t CaptureList.Builder.captures.getter()
{
  return MEMORY[0x18961C0C8]();
}

uint64_t CaptureList.Builder.init()()
{
  return MEMORY[0x18961C0D0]();
}

uint64_t type metadata accessor for CaptureList.Builder()
{
  return MEMORY[0x18961C0D8]();
}

uint64_t CaptureList.captures.getter()
{
  return MEMORY[0x18961C0E0]();
}

uint64_t type metadata accessor for CaptureList()
{
  return MEMORY[0x18961C0E8]();
}

uint64_t Diagnostics.init()()
{
  return MEMORY[0x18961C0F8]();
}

uint64_t type metadata accessor for Diagnostics()
{
  return MEMORY[0x18961C100]();
}

uint64_t type metadata accessor for Unreachable()
{
  return MEMORY[0x18961C108]();
}

uint64_t Unreachable.init(_:file:line:)()
{
  return MEMORY[0x18961C110]();
}

uint64_t type metadata accessor for Unsupported()
{
  return MEMORY[0x18961C120]();
}

uint64_t Unsupported.init(_:file:line:)()
{
  return MEMORY[0x18961C128]();
}

uint64_t PrettyPrinter.printBlock(_:startDelimiter:endDelimiter:_:)()
{
  return MEMORY[0x18961C138]();
}

uint64_t PrettyPrinter.printIndented(_:)()
{
  return MEMORY[0x18961C140]();
}

Swift::Void __swiftcall PrettyPrinter.terminateLine()()
{
}

uint64_t PrettyPrinter.init(maxTopDownLevels:minBottomUpLevels:)()
{
  return MEMORY[0x18961C150]();
}

uint64_t PrettyPrinter.maxTopDownLevels.getter()
{
  return MEMORY[0x18961C158]();
}

uint64_t PrettyPrinter.printAsCanonical(_:delimiters:terminateLine:)()
{
  return MEMORY[0x18961C160]();
}

uint64_t PrettyPrinter.minBottomUpLevels.getter()
{
  return MEMORY[0x18961C168]();
}

Swift::tuple_OpaquePointer_Bool __swiftcall PrettyPrinter.popMatchingOptions()()
{
  uint64_t v0 = (void *)MEMORY[0x18961C170]();
  result._0._unint64_t rawValue = v0;
  result._1 = v1;
  return result;
}

Swift::Void __swiftcall PrettyPrinter.pushMatchingOptions(_:isAdded:)(Swift::OpaquePointer _, Swift::Bool isAdded)
{
}

uint64_t PrettyPrinter.inlineMatchingOptions.getter()
{
  return MEMORY[0x18961C180]();
}

uint64_t PrettyPrinter.quantificationBehavior.getter()
{
  return MEMORY[0x18961C188]();
}

uint64_t PrettyPrinter.quantificationBehavior.setter()
{
  return MEMORY[0x18961C190]();
}

uint64_t PrettyPrinter.depth.getter()
{
  return MEMORY[0x18961C198]();
}

Swift::Void __swiftcall PrettyPrinter.print(_:)(Swift::String a1)
{
}

Swift::String __swiftcall PrettyPrinter.finish()()
{
  uint64_t v0 = MEMORY[0x18961C1A8]();
  result._uint64_t object = v1;
  result._uint64_t countAndFlagsBits = v0;
  return result;
}

Swift::Void __swiftcall PrettyPrinter.indent()()
{
}

Swift::Void __swiftcall PrettyPrinter.output(_:)(Swift::String a1)
{
}

uint64_t type metadata accessor for PrettyPrinter()
{
  return MEMORY[0x18961C1C0]();
}

uint64_t static SyntaxOptions.traditional.getter()
{
  return MEMORY[0x18961C1D0]();
}

uint64_t type metadata accessor for SyntaxOptions()
{
  return MEMORY[0x18961C1D8]();
}

uint64_t static TypeConstruction.tupleType<A>(of:labels:)()
{
  return MEMORY[0x18961C1E0]();
}

uint64_t static TypeConstruction.optionalType<A>(of:depth:)()
{
  return MEMORY[0x18961C1E8]();
}

uint64_t static TypeConstruction.optionalType(of:)()
{
  return MEMORY[0x18961C1F0]();
}

uint64_t static TypeConstruction.tuple<A>(of:)()
{
  return MEMORY[0x18961C1F8]();
}

uint64_t parseWithDelimiters<A>(_:)()
{
  return MEMORY[0x18961C200]();
}

uint64_t AST.Alternation.children.getter()
{
  return MEMORY[0x18961C208]();
}

uint64_t type metadata accessor for AST.Alternation()
{
  return MEMORY[0x18961C210]();
}

uint64_t AST.Conditional.trueBranch.getter()
{
  return MEMORY[0x18961C218]();
}

uint64_t AST.Conditional.falseBranch.getter()
{
  return MEMORY[0x18961C220]();
}

uint64_t type metadata accessor for AST.Conditional.Condition.Kind()
{
  return MEMORY[0x18961C230]();
}

uint64_t AST.Conditional.Condition.kind.getter()
{
  return MEMORY[0x18961C240]();
}

uint64_t type metadata accessor for AST.Conditional.Condition()
{
  return MEMORY[0x18961C248]();
}

uint64_t AST.Conditional.condition.getter()
{
  return MEMORY[0x18961C250]();
}

uint64_t type metadata accessor for AST.Conditional()
{
  return MEMORY[0x18961C258]();
}

uint64_t AST.Concatenation.children.getter()
{
  return MEMORY[0x18961C260]();
}

uint64_t type metadata accessor for AST.Concatenation()
{
  return MEMORY[0x18961C268]();
}

uint64_t type metadata accessor for AST.AbsentFunction.Kind()
{
  return MEMORY[0x18961C290]();
}

uint64_t AST.AbsentFunction.kind.getter()
{
  return MEMORY[0x18961C298]();
}

uint64_t AST.AbsentFunction.children.getter()
{
  return MEMORY[0x18961C2A0]();
}

uint64_t type metadata accessor for AST.AbsentFunction()
{
  return MEMORY[0x18961C2A8]();
}

uint64_t type metadata accessor for AST.MatchingOption.Kind()
{
  return MEMORY[0x18961C358]();
}

uint64_t AST.MatchingOption.kind.getter()
{
  return MEMORY[0x18961C360]();
}

uint64_t type metadata accessor for AST.MatchingOption()
{
  return MEMORY[0x18961C368]();
}

uint64_t AST.MatchingOption.init(_:location:)()
{
  return MEMORY[0x18961C378]();
}

uint64_t type metadata accessor for AST.Quantification.Kind()
{
  return MEMORY[0x18961C398]();
}

uint64_t AST.Quantification.kind.getter()
{
  return MEMORY[0x18961C3B8]();
}

uint64_t AST.Quantification.child.getter()
{
  return MEMORY[0x18961C3C0]();
}

uint64_t AST.Quantification.Amount.bounds.getter()
{
  return MEMORY[0x18961C3E0]();
}

uint64_t type metadata accessor for AST.Quantification.Amount()
{
  return MEMORY[0x18961C408]();
}

uint64_t AST.Quantification.amount.getter()
{
  return MEMORY[0x18961C418]();
}

uint64_t type metadata accessor for AST.Quantification()
{
  return MEMORY[0x18961C420]();
}

uint64_t AST.CustomCharacterClass.isInverted.getter()
{
  return MEMORY[0x18961C428]();
}

uint64_t AST.CustomCharacterClass.Range.lhs.getter()
{
  return MEMORY[0x18961C430]();
}

uint64_t AST.CustomCharacterClass.Range.rhs.getter()
{
  return MEMORY[0x18961C438]();
}

uint64_t type metadata accessor for AST.CustomCharacterClass.Range()
{
  return MEMORY[0x18961C440]();
}

uint64_t type metadata accessor for AST.CustomCharacterClass.SetOp()
{
  return MEMORY[0x18961C460]();
}

uint64_t type metadata accessor for AST.CustomCharacterClass.Member()
{
  return MEMORY[0x18961C4A0]();
}

uint64_t AST.CustomCharacterClass.members.getter()
{
  return MEMORY[0x18961C4B0]();
}

uint64_t type metadata accessor for AST.CustomCharacterClass()
{
  return MEMORY[0x18961C4B8]();
}

uint64_t AST.MatchingOptionSequence.resetsCurrentOptions.getter()
{
  return MEMORY[0x18961C4C0]();
}

uint64_t AST.MatchingOptionSequence.init(adding:)()
{
  return MEMORY[0x18961C4C8]();
}

uint64_t AST.MatchingOptionSequence.adding.getter()
{
  return MEMORY[0x18961C4D0]();
}

uint64_t AST.MatchingOptionSequence.caretLoc.getter()
{
  return MEMORY[0x18961C4D8]();
}

uint64_t AST.MatchingOptionSequence.init(removing:)()
{
  return MEMORY[0x18961C4E0]();
}

uint64_t AST.MatchingOptionSequence.removing.getter()
{
  return MEMORY[0x18961C4E8]();
}

uint64_t type metadata accessor for AST.MatchingOptionSequence()
{
  return MEMORY[0x18961C4F0]();
}

uint64_t type metadata accessor for AST.GlobalMatchingOptionSequence()
{
  return MEMORY[0x18961C500]();
}

uint64_t AST.Atom.EscapedBuiltin.scalarValue.getter()
{
  return MEMORY[0x18961C520]();
}

uint64_t AST.Atom.EscapedBuiltin.character.getter()
{
  return MEMORY[0x18961C5C8]();
}

uint64_t type metadata accessor for AST.Atom.EscapedBuiltin()
{
  return MEMORY[0x18961C5D0]();
}

uint64_t AST.Atom.ScalarSequence.scalarValues.getter()
{
  return MEMORY[0x18961C5D8]();
}

uint64_t type metadata accessor for AST.Atom.ScalarSequence()
{
  return MEMORY[0x18961C5E0]();
}

uint64_t AST.Atom.isQuantifiable.getter()
{
  return MEMORY[0x18961C5E8]();
}

uint64_t AST.Atom.CharacterProperty.isInverted.getter()
{
  return MEMORY[0x18961C5F0]();
}

uint64_t type metadata accessor for AST.Atom.CharacterProperty.JavaSpecial()
{
  return MEMORY[0x18961C5F8]();
}

uint64_t type metadata accessor for AST.Atom.CharacterProperty.PCRESpecialCategory()
{
  return MEMORY[0x18961C600]();
}

uint64_t type metadata accessor for AST.Atom.CharacterProperty.Kind.MapKind()
{
  return MEMORY[0x18961C620]();
}

uint64_t type metadata accessor for AST.Atom.CharacterProperty.Kind()
{
  return MEMORY[0x18961C6C0]();
}

uint64_t AST.Atom.CharacterProperty.kind.getter()
{
  return MEMORY[0x18961C6C8]();
}

uint64_t type metadata accessor for AST.Atom.CharacterProperty()
{
  return MEMORY[0x18961C6D0]();
}

uint64_t AST.Atom.CharacterProperty.init(_:isInverted:isPOSIX:)()
{
  return MEMORY[0x18961C6D8]();
}

uint64_t AST.Atom.literalStringValue.getter()
{
  return MEMORY[0x18961C6E0]();
}

uint64_t type metadata accessor for AST.Atom.Kind()
{
  return MEMORY[0x18961C778]();
}

uint64_t AST.Atom.kind.getter()
{
  return MEMORY[0x18961C780]();
}

uint64_t AST.Atom.Number.value.getter()
{
  return MEMORY[0x18961C788]();
}

uint64_t type metadata accessor for AST.Atom.Number()
{
  return MEMORY[0x18961C790]();
}

uint64_t AST.Atom.Number.init(_:at:)()
{
  return MEMORY[0x18961C7A0]();
}

uint64_t AST.Atom.Scalar.value.getter()
{
  return MEMORY[0x18961C7A8]();
}

uint64_t type metadata accessor for AST.Atom.Scalar()
{
  return MEMORY[0x18961C7B0]();
}

uint64_t type metadata accessor for AST.Atom()
{
  return MEMORY[0x18961C7B8]();
}

uint64_t AST.Atom.init(_:_:)()
{
  return MEMORY[0x18961C7D0]();
}

uint64_t type metadata accessor for AST.Node()
{
  return MEMORY[0x18961C838]();
}

uint64_t AST.root.getter()
{
  return MEMORY[0x18961C848]();
}

uint64_t AST.Group.Kind.lookaroundKind.getter()
{
  return MEMORY[0x18961C850]();
}

uint64_t static AST.Group.Kind.== infix(_:_:)()
{
  return MEMORY[0x18961C8B8]();
}

uint64_t type metadata accessor for AST.Group.Kind()
{
  return MEMORY[0x18961C8D8]();
}

uint64_t AST.Group.kind.getter()
{
  return MEMORY[0x18961C8E8]();
}

uint64_t AST.Group.child.getter()
{
  return MEMORY[0x18961C8F0]();
}

uint64_t type metadata accessor for AST.Group()
{
  return MEMORY[0x18961C8F8]();
}

uint64_t AST.Quote.literal.getter()
{
  return MEMORY[0x18961C900]();
}

uint64_t type metadata accessor for AST.Quote()
{
  return MEMORY[0x18961C908]();
}

uint64_t AST.Trivia.contents.getter()
{
  return MEMORY[0x18961C910]();
}

uint64_t type metadata accessor for AST.Trivia()
{
  return MEMORY[0x18961C918]();
}

uint64_t AST.Reference.recursesWholePattern.getter()
{
  return MEMORY[0x18961C920]();
}

uint64_t type metadata accessor for AST.Reference.Kind()
{
  return MEMORY[0x18961C940]();
}

uint64_t AST.Reference.kind.getter()
{
  return MEMORY[0x18961C948]();
}

uint64_t type metadata accessor for AST.Reference()
{
  return MEMORY[0x18961C950]();
}

uint64_t type metadata accessor for AST()
{
  return MEMORY[0x18961C968]();
}

uint64_t AST.init(_:globalOptions:diags:)()
{
  return MEMORY[0x18961C970]();
}

uint64_t parse<A>(_:_:)()
{
  return MEMORY[0x18961C978]();
}

uint64_t Source.Located.value.getter()
{
  return MEMORY[0x18961C980]();
}

uint64_t static Source.Location.fake.getter()
{
  return MEMORY[0x18961C990]();
}

uint64_t type metadata accessor for Source.Location()
{
  return MEMORY[0x18961C998]();
}

uint64_t _TreeNode.height.getter()
{
  return MEMORY[0x18961C9A8]();
}

uint64_t Array.init()()
{
  return MEMORY[0x189617790]();
}

uint64_t Character.asciiValue.getter()
{
  return MEMORY[0x189617A30]();
}

Swift::String __swiftcall Character.lowercased()()
{
  uint64_t v0 = MEMORY[0x189617A38]();
  result._uint64_t object = v1;
  result._uint64_t countAndFlagsBits = v0;
  return result;
}

uint64_t Character.isConfusable.getter()
{
  return MEMORY[0x18961C9B0]();
}

uint64_t Character.isWordCharacter.getter()
{
  return MEMORY[0x18961C9B8]();
}

uint64_t Character.hasExactlyOneScalar.getter()
{
  return MEMORY[0x18961C9C0]();
}

uint64_t Character.isWhitespace.getter()
{
  return MEMORY[0x189617A50]();
}

uint64_t Character._isLowercased.getter()
{
  return MEMORY[0x189617A58]();
}

uint64_t Character._isUppercased.getter()
{
  return MEMORY[0x189617A60]();
}

uint64_t Character._isSingleScalar.getter()
{
  return MEMORY[0x189617A70]();
}

uint64_t Character.hash(into:)()
{
  return MEMORY[0x189617A88]();
}

uint64_t Character.write<A>(to:)()
{
  return MEMORY[0x189617A90]();
}

uint64_t Character.isNumber.getter()
{
  return MEMORY[0x189617AA0]();
}

uint64_t dispatch thunk of BidirectionalCollection.index(before:)()
{
  return MEMORY[0x189617AD0]();
}

uint64_t dispatch thunk of BidirectionalCollection.formIndex(before:)()
{
  return MEMORY[0x189617AE8]();
}

uint64_t BidirectionalCollection<>.joined(separator:)()
{
  return MEMORY[0x189617B30]();
}

uint64_t dispatch thunk of static Comparable.< infix(_:_:)()
{
  return MEMORY[0x189617B40]();
}

uint64_t dispatch thunk of static Comparable.>= infix(_:_:)()
{
  return MEMORY[0x189617B48]();
}

uint64_t dispatch thunk of static Comparable.<= infix(_:_:)()
{
  return MEMORY[0x189617B50]();
}

uint64_t static Comparable.> infix(_:_:)()
{
  return MEMORY[0x189617B58]();
}

uint64_t static Comparable.>= infix(_:_:)()
{
  return MEMORY[0x189617B60]();
}

uint64_t static Comparable.<= infix(_:_:)()
{
  return MEMORY[0x189617B68]();
}

uint64_t MutableCollection.withContiguousMutableStorageIfAvailable<A>(_:)()
{
  return MEMORY[0x189617B80]();
}

uint64_t MutableCollection._withUnsafeMutableBufferPointerIfSupported<A>(_:)()
{
  return MEMORY[0x189617B88]();
}

uint64_t MutableCollection.swapAt(_:_:)()
{
  return MEMORY[0x189617B90]();
}

uint64_t MutableCollection.partition(by:)()
{
  return MEMORY[0x189617B98]();
}

uint64_t dispatch thunk of MutableCollection.subscript.modify()
{
  return MEMORY[0x189617BD0]();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return MEMORY[0x189617C20]();
}

uint64_t String._wordIndex(after:)()
{
  return MEMORY[0x189617C88]();
}

uint64_t String.isOnGraphemeClusterBoundary(_:)()
{
  return MEMORY[0x18961C9C8]();
}

uint64_t static String._fromSubstring(_:)()
{
  return MEMORY[0x189617CE0]();
}

Swift::Void __swiftcall String.reserveCapacity(_:)(Swift::Int a1)
{
}

uint64_t String.UnicodeScalarView._foreignIndex(after:)()
{
  return MEMORY[0x189617D20]();
}

uint64_t String.UnicodeScalarView._foreignIndex(before:)()
{
  return MEMORY[0x189617D28]();
}

uint64_t String.UnicodeScalarView.append(_:)()
{
  return MEMORY[0x189617D40]();
}

uint64_t static String._uncheckedFromUTF8(_:)()
{
  return MEMORY[0x189617D80]();
}

uint64_t String._nfc.getter()
{
  return MEMORY[0x189617DC0]();
}

uint64_t String.count.getter()
{
  return MEMORY[0x189617E20]();
}

uint64_t String.index(after:)()
{
  return MEMORY[0x189617E28]();
}

uint64_t String.index(before:)()
{
  return MEMORY[0x189617E30]();
}

uint64_t String.index(_:offsetBy:limitedBy:)()
{
  return MEMORY[0x189617E38]();
}

uint64_t String.append(contentsOf:)()
{
  return MEMORY[0x189617E58]();
}

uint64_t String.append<A>(contentsOf:)()
{
  return MEMORY[0x189617E60]();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
}

{
  MEMORY[0x189617E70](a1._countAndFlagsBits, a1._object);
}

uint64_t String.remove(at:)()
{
  return MEMORY[0x189617E88]();
}

Swift::String_optional __swiftcall String.Iterator.next()()
{
  uint64_t v0 = MEMORY[0x189617EA8]();
  result.value._uint64_t object = v1;
  result.value._uint64_t countAndFlagsBits = v0;
  return result;
}

uint64_t String.UTF8View._foreignIndex(after:)()
{
  return MEMORY[0x189617EB8]();
}

uint64_t String.UTF8View._foreignIndex(before:)()
{
  return MEMORY[0x189617EC0]();
}

uint64_t String.UTF8View._foreignIndex(_:offsetBy:)()
{
  return MEMORY[0x189617ED0]();
}

uint64_t String.UTF8View._foreignSubscript(position:)()
{
  return MEMORY[0x189617EE0]();
}

uint64_t String.UTF16View.index(_:offsetBy:)()
{
  return MEMORY[0x189617F48]();
}

Swift::String __swiftcall String.init(repeating:count:)(Swift::String repeating, Swift::Int count)
{
  uint64_t v2 = MEMORY[0x189617F90](repeating._countAndFlagsBits, repeating._object, count);
  result._uint64_t object = v3;
  result._uint64_t countAndFlagsBits = v2;
  return result;
}

uint64_t String.init<A>(_:radix:uppercase:)()
{
  return MEMORY[0x189617FF8]();
}

uint64_t String.subscript.getter()
{
  return MEMORY[0x189618040]();
}

{
  return MEMORY[0x189618078]();
}

uint64_t dispatch thunk of Sequence.makeIterator()()
{
  return MEMORY[0x189618080]();
}

uint64_t Sequence._copyContents(initializing:)()
{
  return MEMORY[0x1896180E0]();
}

uint64_t Sequence.withContiguousStorageIfAvailable<A>(_:)()
{
  return MEMORY[0x1896180F8]();
}

uint64_t dispatch thunk of RawRepresentable.rawValue.getter()
{
  return MEMORY[0x189618220]();
}

uint64_t RawRepresentable<>.hashValue.getter()
{
  return MEMORY[0x189618290]();
}

uint64_t RawRepresentable<>._rawHashValue(seed:)()
{
  return MEMORY[0x189618298]();
}

uint64_t RawRepresentable<>.hash(into:)()
{
  return MEMORY[0x1896182A0]();
}

uint64_t Array.description.getter()
{
  return MEMORY[0x189618318]();
}

uint64_t static Array._allocateBufferUninitialized(minimumCapacity:)()
{
  return MEMORY[0x189618390]();
}

uint64_t Array.count.getter()
{
  return MEMORY[0x1896183D8]();
}

uint64_t Array.append(_:)()
{
  return MEMORY[0x1896183E8]();
}

uint64_t Array.endIndex.getter()
{
  return MEMORY[0x1896183F0]();
}

uint64_t type metadata accessor for Array()
{
  return MEMORY[0x189618410]();
}

uint64_t Array.init<A>(_:)()
{
  return MEMORY[0x189618438]();
}

uint64_t Array.subscript.getter()
{
  return MEMORY[0x1896184A8]();
}

uint64_t Set.init(minimumCapacity:)()
{
  return MEMORY[0x189618668]();
}

uint64_t RandomAccessCollection<>.indices.getter()
{
  return MEMORY[0x189618818]();
}

uint64_t dispatch thunk of Collection.startIndex.getter()
{
  return MEMORY[0x189618828]();
}

uint64_t dispatch thunk of Collection._failEarlyRangeCheck(_:bounds:)()
{
  return MEMORY[0x189618838]();
}

uint64_t dispatch thunk of Collection.count.getter()
{
  return MEMORY[0x189618848]();
}

uint64_t dispatch thunk of Collection.index(after:)()
{
  return MEMORY[0x189618850]();
}

uint64_t dispatch thunk of Collection.index(_:offsetBy:limitedBy:)()
{
  return MEMORY[0x189618858]();
}

uint64_t dispatch thunk of Collection.index(_:offsetBy:)()
{
  return MEMORY[0x189618860]();
}

uint64_t dispatch thunk of Collection.isEmpty.getter()
{
  return MEMORY[0x189618878]();
}

uint64_t dispatch thunk of Collection.distance(from:to:)()
{
  return MEMORY[0x189618880]();
}

uint64_t dispatch thunk of Collection.endIndex.getter()
{
  return MEMORY[0x189618888]();
}

uint64_t dispatch thunk of Collection.formIndex(after:)()
{
  return MEMORY[0x189618890]();
}

uint64_t Collection.firstIndex(where:)()
{
  return MEMORY[0x1896188B0]();
}

uint64_t Collection.underestimatedCount.getter()
{
  return MEMORY[0x1896188B8]();
}

uint64_t Collection._copyToContiguousArray()()
{
  return MEMORY[0x1896188C0]();
}

uint64_t Collection.count.getter()
{
  return MEMORY[0x1896188C8]();
}

uint64_t Collection.first.getter()
{
  return MEMORY[0x1896188D0]();
}

uint64_t Collection.index(_:offsetBy:limitedBy:)()
{
  return MEMORY[0x1896188D8]();
}

uint64_t Collection.index(_:offsetBy:)()
{
  return MEMORY[0x1896188E0]();
}

uint64_t Collection.prefix(_:)()
{
  return MEMORY[0x1896188E8]();
}

uint64_t Collection.isEmpty.getter()
{
  return MEMORY[0x1896188F8]();
}

uint64_t Collection.distance(from:to:)()
{
  return MEMORY[0x189618900]();
}

uint64_t Collection.dropFirst(_:)()
{
  return MEMORY[0x189618910]();
}

uint64_t Collection.subscript.getter()
{
  return MEMORY[0x189618918]();
}

{
  return MEMORY[0x189618920]();
}

uint64_t Collection<>.indices.getter()
{
  return MEMORY[0x189618928]();
}

uint64_t Collection<>.firstIndex(of:)()
{
  return MEMORY[0x189618930]();
}

uint64_t Collection<>.subscript.getter()
{
  return MEMORY[0x189618940]();
}

uint64_t dispatch thunk of Collection.subscript.getter()
{
  return MEMORY[0x189618948]();
}

uint64_t dispatch thunk of Collection.subscript.read()
{
  return MEMORY[0x189618950]();
}

uint64_t dispatch thunk of RangeReplaceableCollection.removeSubrange(_:)()
{
  return MEMORY[0x189618958]();
}

uint64_t dispatch thunk of RangeReplaceableCollection.append<A>(contentsOf:)()
{
  return MEMORY[0x189618968]();
}

uint64_t RangeReplaceableCollection.removeSubrange<A>(_:)()
{
  return MEMORY[0x189618990]();
}

uint64_t dispatch thunk of RangeReplaceableCollection.init()()
{
  return MEMORY[0x1896189F0]();
}

uint64_t dispatch thunk of RangeReplaceableCollection.init<A>(_:)()
{
  return MEMORY[0x1896189F8]();
}

uint64_t Range.isEmpty.getter()
{
  return MEMORY[0x189618A08]();
}

uint64_t type metadata accessor for Range()
{
  return MEMORY[0x189618A18]();
}

uint64_t type metadata accessor for Optional()
{
  return MEMORY[0x189618AC0]();
}

uint64_t Substring.index(after:)()
{
  return MEMORY[0x189618BD0]();
}

uint64_t Substring.index(before:)()
{
  return MEMORY[0x189618BD8]();
}

uint64_t Substring.index(_:offsetBy:limitedBy:)()
{
  return MEMORY[0x189618BE0]();
}

uint64_t Substring.distance(from:to:)()
{
  return MEMORY[0x189618C40]();
}

uint64_t Substring.subscript.getter()
{
  return MEMORY[0x189618C90]();
}

{
  return MEMORY[0x189618CA0]();
}

uint64_t Substring.init(_:)()
{
  return MEMORY[0x189618C98]();
}

uint64_t dispatch thunk of IteratorProtocol.next()()
{
  return MEMORY[0x189618CB0]();
}

uint64_t BinaryInteger.description.getter()
{
  return MEMORY[0x189618ED0]();
}

uint64_t ArraySlice.startIndex.getter()
{
  return MEMORY[0x189618F40]();
}

Swift::Bool __swiftcall ArraySlice._hoistableIsNativeTypeChecked()()
{
  return MEMORY[0x189618F60]();
}

uint64_t ArraySlice.endIndex.getter()
{
  return MEMORY[0x189618F70]();
}

uint64_t SetAlgebra.init<A>(_:)()
{
  return MEMORY[0x189619010]();
}

uint64_t static _SetStorage.copy(original:)()
{
  return MEMORY[0x189619188]();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x189619190]();
}

uint64_t _StringGuts.foreignScalarAlign(_:)()
{
  return MEMORY[0x1896191D0]();
}

uint64_t _StringGuts.foreignErrorCorrectedScalar(startingAt:)()
{
  return MEMORY[0x1896191E0]();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
}

uint64_t static MemoryLayout.tupleElementIndex<A>(of:elementTypes:)()
{
  return MEMORY[0x18961C9D0]();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return MEMORY[0x189619440]();
}

uint64_t _decodeScalar(_:startingAt:)()
{
  return MEMORY[0x189619448]();
}

uint64_t _arrayForceCast<A, B>(_:)()
{
  return MEMORY[0x189619658]();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return MEMORY[0x189619660]();
}

uint64_t type metadata accessor for IndexingIterator()
{
  return MEMORY[0x189619668]();
}

uint64_t type metadata accessor for PartialRangeFrom()
{
  return MEMORY[0x189619680]();
}

uint64_t type metadata accessor for PartialRangeUpTo()
{
  return MEMORY[0x189619698]();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return MEMORY[0x1896198A8]();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return MEMORY[0x189619948]();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x189619950]();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return MEMORY[0x189619960]();
}

uint64_t _writeBackMutableSlice<A, B>(_:bounds:slice:)()
{
  return MEMORY[0x189619CB8]();
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return MEMORY[0x189619CC8]();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return MEMORY[0x18961A050]();
}

uint64_t == infix<A>(_:_:)()
{
  return MEMORY[0x18961A128]();
}

uint64_t _copySequenceToContiguousArray<A>(_:)()
{
  return MEMORY[0x18961A2C0]();
}

uint64_t _copyCollectionToContiguousArray<A>(_:)()
{
  return MEMORY[0x18961A2E8]();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x18961A398]();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x18961A3A0]();
}

uint64_t Error._getEmbeddedNSError()()
{
  return MEMORY[0x18961A3C0]();
}

uint64_t Error._code.getter()
{
  return MEMORY[0x18961A3C8]();
}

uint64_t Error._domain.getter()
{
  return MEMORY[0x18961A3D0]();
}

uint64_t Error._userInfo.getter()
{
  return MEMORY[0x18961A3D8]();
}

uint64_t type metadata accessor for Slice()
{
  return MEMORY[0x18961A5B0]();
}

uint64_t Hasher.init(_seed:)()
{
  return MEMORY[0x18961A680]();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt8 a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt32 a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt64 a1)
{
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return MEMORY[0x18961A6C0]();
}

uint64_t type metadata accessor for Unicode.NumericType()
{
  return MEMORY[0x18961A9E8]();
}

uint64_t Unicode.POSIXProperty.rawValue.getter()
{
  return MEMORY[0x18961CA08]();
}

uint64_t type metadata accessor for Unicode.POSIXProperty()
{
  return MEMORY[0x18961CA10]();
}

uint64_t Unicode.BinaryProperty.rawValue.getter()
{
  return MEMORY[0x18961CC08]();
}

uint64_t type metadata accessor for Unicode.BinaryProperty()
{
  return MEMORY[0x18961CC38]();
}

uint64_t Unicode.ExtendedGeneralCategory.rawValue.getter()
{
  return MEMORY[0x18961CD68]();
}

uint64_t type metadata accessor for Unicode.ExtendedGeneralCategory()
{
  return MEMORY[0x18961CD80]();
}

uint64_t type metadata accessor for Unicode.Block()
{
  return MEMORY[0x18961CD90]();
}

uint64_t Unicode.Script.rawValue.getter()
{
  return MEMORY[0x18961CD98]();
}

uint64_t type metadata accessor for Unicode.Script()
{
  return MEMORY[0x18961CDA0]();
}

uint64_t static Unicode.GeneralCategory.== infix(_:_:)()
{
  return MEMORY[0x18961AAE0]();
}

uint64_t type metadata accessor for Unicode.GeneralCategory()
{
  return MEMORY[0x18961AB00]();
}

uint64_t static Unicode.CanonicalCombiningClass.== infix(_:_:)()
{
  return MEMORY[0x18961AB50]();
}

uint64_t type metadata accessor for Unicode.CanonicalCombiningClass()
{
  return MEMORY[0x18961AB68]();
}

uint64_t Unicode._NFC.makeIterator()()
{
  return MEMORY[0x18961ABA8]();
}

uint64_t Unicode._NFC.Iterator.next()()
{
  return MEMORY[0x18961ABB0]();
}

uint64_t type metadata accessor for Unicode._NFC.Iterator()
{
  return MEMORY[0x18961ABB8]();
}

uint64_t type metadata accessor for Unicode._NFC()
{
  return MEMORY[0x18961ABC0]();
}

uint64_t Unicode.Scalar.Properties.isHexDigit.getter()
{
  return MEMORY[0x18961AC20]();
}

uint64_t Unicode.Scalar.Properties.numericType.getter()
{
  return MEMORY[0x18961AC50]();
}

uint64_t Unicode.Scalar.Properties.isAlphabetic.getter()
{
  return MEMORY[0x18961AC58]();
}

uint64_t Unicode.Scalar.Properties.isWhitespace.getter()
{
  return MEMORY[0x18961AC78]();
}

uint64_t Unicode.Scalar.Properties.numericValue.getter()
{
  return MEMORY[0x18961AC80]();
}

uint64_t Unicode.Scalar.Properties.isJoinControl.getter()
{
  return MEMORY[0x18961AC98]();
}

uint64_t Unicode.Scalar.Properties.generalCategory.getter()
{
  return MEMORY[0x18961ACB8]();
}

uint64_t Unicode.Scalar.Properties.isASCIIHexDigit.getter()
{
  return MEMORY[0x18961ACC0]();
}

uint64_t Unicode.Scalar.Properties.lowercaseMapping.getter()
{
  return MEMORY[0x18961ACF0]();
}

uint64_t Unicode.Scalar.Properties.uppercaseMapping.getter()
{
  return MEMORY[0x18961AD00]();
}

uint64_t Unicode.Scalar.Properties.changesWhenLowercased.getter()
{
  return MEMORY[0x18961AD58]();
}

uint64_t Unicode.Scalar.Properties.changesWhenUppercased.getter()
{
  return MEMORY[0x18961AD68]();
}

uint64_t Unicode.Scalar.Properties.canonicalCombiningClass.getter()
{
  return MEMORY[0x18961AD78]();
}

uint64_t Unicode.Scalar.Properties.age.getter()
{
  return MEMORY[0x18961ADA8]();
}

uint64_t Unicode.Scalar.Properties.name.getter()
{
  return MEMORY[0x18961ADB0]();
}

uint64_t Unicode.Scalar.Properties.isDash.getter()
{
  return MEMORY[0x18961ADB8]();
}

uint64_t Unicode.Scalar.Properties.isCased.getter()
{
  return MEMORY[0x18961ADC8]();
}

uint64_t Unicode.Scalar.Properties.nameAlias.getter()
{
  return MEMORY[0x18961ADE8]();
}

uint64_t type metadata accessor for Unicode.Scalar.Properties()
{
  return MEMORY[0x18961ADF0]();
}

uint64_t Unicode.Scalar.properties.getter()
{
  return MEMORY[0x18961AE00]();
}

uint64_t Unicode.Scalar.write<A>(to:)()
{
  return MEMORY[0x18961AE10]();
}

uint64_t _typeName(_:qualified:)()
{
  return MEMORY[0x18961AF88]();
}

void bzero(void *a1, size_t a2)
{
}

void free(void *a1)
{
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x1895FBC88](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1895FBCE0](ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1895FBE18](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1895FBE30](__dst, __src, __len);
}

uint64_t objc_opt_self()
{
  return MEMORY[0x189616750]();
}

uint64_t swift_allocBox()
{
  return MEMORY[0x18961B0A0]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x18961B0A8]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x18961B0B0]();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return MEMORY[0x18961B0B8]();
}

uint64_t swift_allocateGenericValueMetadata()
{
  return MEMORY[0x18961B0C0]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x18961B0D8]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x18961B0E0]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x18961B0E8]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x18961B0F0]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x18961B108]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x18961B110]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x18961B118]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x18961B120]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x18961B128]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x18961B150]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x18961B158]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x18961B180]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x18961B1E8]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x18961B1F0]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x18961B218]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x18961B220]();
}

uint64_t swift_getAtKeyPath()
{
  return MEMORY[0x18961B228]();
}

uint64_t swift_getCanonicalSpecializedMetadata()
{
  return MEMORY[0x18961B240]();
}

uint64_t swift_getDynamicType()
{
  return MEMORY[0x18961B248]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x18961B250]();
}

uint64_t swift_getEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x18961B258]();
}

uint64_t swift_getFunctionTypeMetadata1()
{
  return MEMORY[0x18961B280]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x18961B290]();
}

uint64_t swift_getKeyPath()
{
  return MEMORY[0x18961B298]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x18961B2D0]();
}

uint64_t swift_getTupleTypeLayout2()
{
  return MEMORY[0x18961B2E0]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x18961B2F8]();
}

uint64_t swift_getTupleTypeMetadata3()
{
  return MEMORY[0x18961B300]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x18961B310]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x18961B318]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x18961B328]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x18961B330]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x18961B338]();
}

uint64_t swift_initEnumMetadataSinglePayload()
{
  return MEMORY[0x18961B340]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x18961B348]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x18961B358]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x18961B390]();
}

uint64_t swift_once()
{
  return MEMORY[0x18961B3B8]();
}

uint64_t swift_projectBox()
{
  return MEMORY[0x18961B3C0]();
}

uint64_t swift_release()
{
  return MEMORY[0x18961B3C8]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x18961B3D0]();
}

uint64_t swift_retain()
{
  return MEMORY[0x18961B3E0]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x18961B408]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x18961B418]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x18961B430]();
}

uint64_t swift_storeEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x18961B438]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x18961B450]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x18961B458]();
}

uint64_t swift_unknownObjectRelease_n()
{
  return MEMORY[0x18961B460]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x18961B468]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x18961B518]();
}