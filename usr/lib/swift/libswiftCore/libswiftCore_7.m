double swift_initEnumMetadataMultiPayload(uint64_t a1, __int16 a2, unint64_t a3, char *a4)
{
  unsigned int v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t **v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  unint64_t **v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t *v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  swift::MetadataAllocator *Metadata;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  BOOL v46;
  int v47;
  int v48;
  double result;
  __int128 v50;
  double v51;
  v4 = a3;
  if (!(_DWORD)a3)
  {
    v8 = 0LL;
    v11 = 0;
    v7 = 0LL;
    v10 = 1;
    goto LABEL_22;
  }

  if ((_DWORD)a3 == 1)
  {
    v6 = 0LL;
    v7 = 0LL;
    v8 = 0LL;
    LOBYTE(v9) = 1;
    LOBYTE(v10) = 1;
  }

  else
  {
    v12 = 0LL;
    v13 = 0LL;
    v14 = 0LL;
    v15 = 0LL;
    v6 = a3 & 0xFFFFFFFE;
    v16 = (unint64_t **)(a4 + 8);
    LOBYTE(v17) = 1;
    v18 = v6;
    LOBYTE(v19) = 1;
    LOBYTE(v20) = 1;
    LOBYTE(a3) = 1;
    do
    {
      v21 = (uint64_t)*(v16 - 1);
      if (v14 <= *(void *)v21) {
        v14 = *(void *)v21;
      }
      if (v15 <= **v16) {
        v15 = **v16;
      }
      v22 = *(_DWORD *)(v21 + 16);
      v23 = *((_DWORD *)*v16 + 4);
      v12 |= v22;
      v13 |= v23;
      v17 = v17 & ((v22 & 0x10000) == 0);
      v19 = v19 & ((v23 & 0x10000) == 0);
      v20 = v20 & ((v22 & 0x100000) == 0);
      a3 = a3 & ((v23 & 0x100000) == 0);
      v16 += 2;
      v18 -= 2LL;
    }

    while (v18);
    if (v14 <= v15) {
      v8 = v15;
    }
    else {
      v8 = v14;
    }
    v10 = a3 & v20;
    v9 = v19 & v17;
    v7 = v13 | v12;
    if (v6 == v4) {
      goto LABEL_19;
    }
  }

  v24 = (unint64_t **)&a4[8 * v6];
  v25 = v4 - v6;
  do
  {
    v27 = *v24++;
    v26 = v27;
    v28 = *v27;
    if (v8 <= *v27) {
      v8 = v28;
    }
    v29 = *((_DWORD *)v26 + 4);
    v7 |= v29;
    v9 = v9 & ((v29 & 0x10000) == 0);
    v10 = v10 & ((v29 & 0x100000) == 0);
    --v25;
  }

  while (v25);
LABEL_19:
  if (v9) {
    v11 = 0;
  }
  else {
    v11 = 0x10000;
  }
LABEL_22:
  v30 = *(void *)(a1 + 8);
  v31 = (unint64_t)*(unsigned int *)(v30 + 20) >> 24;
  if (*(void *)(a1 + 8 * v31) != v8) {
    *(void *)(a1 + 8 * v31) = v8;
  }
  v32 = *(_DWORD *)(v30 + 24);
  if (!v32)
  {
LABEL_27:
    if (v4 < 2) {
      goto LABEL_28;
    }
    goto LABEL_31;
  }

  if (v8 >= 4)
  {
    ++v4;
    goto LABEL_27;
  }

  v4 += (v32 + ~(-1 << (8 * v8))) >> (8 * v8);
  if (v4 < 2)
  {
LABEL_28:
    v33 = 0;
    v34 = *(void *)(a1 - 8);
    if ((a2 & 0x100) != 0) {
      goto LABEL_38;
    }
LABEL_37:
    Metadata = swift::allocateMetadata(0x70uLL, (const char *)8, a3, a4);
    v38 = *(_OWORD *)(v34 + 16);
    v37 = *(_OWORD *)(v34 + 32);
    *(_OWORD *)Metadata = *(_OWORD *)v34;
    *((_OWORD *)Metadata + 1) = v38;
    *((_OWORD *)Metadata + 2) = v37;
    v39 = *(_OWORD *)(v34 + 96);
    v41 = *(_OWORD *)(v34 + 48);
    v40 = *(_OWORD *)(v34 + 64);
    *((_OWORD *)Metadata + 5) = *(_OWORD *)(v34 + 80);
    *((_OWORD *)Metadata + 6) = v39;
    *((_OWORD *)Metadata + 3) = v41;
    *((_OWORD *)Metadata + 4) = v40;
    *(void *)(a1 - 8) = Metadata;
    v34 = (uint64_t)Metadata;
    goto LABEL_38;
  }

uint64_t swift_getMultiPayloadEnumTagSinglePayload(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 - 8);
  unint64_t v4 = *(void *)(v3 + 64);
  unsigned int v5 = *(_DWORD *)(v3 + 84);
  if (a2 > v5)
  {
    if (v4 > 3) {
      goto LABEL_5;
    }
    unsigned int v6 = ((a2 - v5 + ~(-1 << (8 * v4))) >> (8 * v4)) + 1;
    if (v6 < 2) {
      goto LABEL_11;
    }
    if (v6 >= 0x100)
    {
      if (v6 >= 0x10000) {
        int v7 = *(_DWORD *)&a1[v4];
      }
      else {
        int v7 = *(unsigned __int16 *)&a1[v4];
      }
    }

    else
    {
LABEL_5:
      int v7 = a1[v4];
    }

    if (v7)
    {
      int v8 = (v7 - 1) << (8 * v4);
      if (v4 > 3) {
        int v8 = 0;
      }
      int v9 = 0;
      switch(v4)
      {
        case 0uLL:
          return v5 + (v9 | v8) + 1;
        case 1uLL:
          int v9 = *a1;
          break;
        case 2uLL:
          int v9 = *(unsigned __int16 *)a1;
          break;
        case 3uLL:
          int v9 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          break;
        default:
          int v9 = *(_DWORD *)a1;
          break;
      }

      return v5 + (v9 | v8) + 1;
    }
  }

void swift_storeMultiPayloadEnumTagSinglePayload(_BYTE *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
}

double swift_initEnumMetadataMultiPayloadWithLayoutString( void *a1, __int16 a2, unint64_t a3, char *a4)
{
  unint64_t v4 = (unint64_t **)a4;
  unsigned int v5 = a3;
  if ((_DWORD)a3)
  {
    unint64_t v7 = 0LL;
    uint64_t v8 = 0LL;
    unint64_t v9 = 0LL;
    LOBYTE(v10) = 1;
    uint64_t v11 = (uint64_t *)a4;
    LOBYTE(v12) = 1;
    uint64_t v13 = a3;
    do
    {
      uint64_t v15 = *v11++;
      uint64_t v14 = v15;
      uint64_t v16 = *(void *)(v15 - 8);
      if (v9 <= *(void *)(v16 + 64)) {
        unint64_t v9 = *(void *)(v16 + 64);
      }
      int v17 = *(_DWORD *)(v16 + 80);
      v7 |= v17;
      int v10 = v10 & ((v17 & 0x10000) == 0);
      int v12 = v12 & ((v17 & 0x100000) == 0);
      v8 += _swift_refCountBytesForMetatype(v14) + 8;
      --v13;
    }

    while (v13);
    if (v10) {
      int v18 = 0;
    }
    else {
      int v18 = 0x10000;
    }
    int v54 = v18;
    v19 = a1;
  }

  else
  {
    v19 = a1;
    unint64_t v9 = 0LL;
    uint64_t v8 = 0LL;
    int v54 = 0;
    unint64_t v7 = 0LL;
    int v12 = 1;
  }

  uint64_t v20 = v19[1];
  unint64_t v21 = (unint64_t)*(unsigned int *)(v20 + 20) >> 24;
  if (v19[v21] != v9) {
    v19[v21] = v9;
  }
  int v22 = *(_DWORD *)(v20 + 24);
  unsigned int v23 = v5;
  if (v22)
  {
    if (v9 < 4)
    {
      unsigned int v23 = ((v22 + ~(-1 << (8 * v9))) >> (8 * v9)) + v5;
      if (v23 < 2) {
        goto LABEL_17;
      }
      goto LABEL_19;
    }

    unsigned int v23 = v5 + 1;
  }

  if (v23 < 2)
  {
LABEL_17:
    uint64_t v24 = 0LL;
    goto LABEL_23;
  }

void storeMultiPayloadExtraInhabitantTag(uint64_t a1, size_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a4 + (((unint64_t)*(unsigned int *)(*(void *)(a4 + 8) + 20LL) >> 21) & 0x7F8));
  int v5 = -(int)a2;
  unsigned int v6 = (_BYTE *)(a1 + v4);
  switch(*(void *)(*(void *)(a4 - 8) + 64LL) - v4)
  {
    case 0LL:
      return;
    case 1LL:
      *unsigned int v6 = v5;
      break;
    case 2LL:
      *(_WORD *)unsigned int v6 = v5;
      break;
    case 3LL:
      *(_WORD *)unsigned int v6 = v5;
      v6[2] = BYTE2(v5);
      break;
    case 4LL:
      *(_DWORD *)unsigned int v6 = v5;
      break;
    default:
      *(_DWORD *)unsigned int v6 = v5;
      bzero(v6 + 4, a2);
      break;
  }

void swift_storeEnumTagMultiPayload(_BYTE *a1, size_t a2, unsigned int a3)
{
  unint64_t v4 = *(unsigned int *)(*(void *)(a2 + 8) + 20LL);
  unint64_t v5 = *(void *)(a2 + ((v4 >> 21) & 0x7F8));
  unint64_t v6 = *(void *)(*(void *)(a2 - 8) + 64LL) - v5;
  unsigned int v7 = v4 & 0xFFFFFF;
  unsigned int v8 = a3 - v7;
  if (a3 >= v7)
  {
    if (v5 <= 3) {
      int v10 = v8 & ~(-1 << (8 * v5));
    }
    else {
      int v10 = a3 - v7;
    }
    if (v5 <= 3) {
      v7 += v8 >> (8 * v5);
    }
    uint64_t v11 = &a1[v5];
    switch(v6)
    {
      case 0uLL:
        goto LABEL_21;
      case 1uLL:
        *uint64_t v11 = v7;
        a2 = v5 - 4;
        if (v5 > 4) {
          goto LABEL_24;
        }
        goto LABEL_21;
      case 2uLL:
        *(_WORD *)uint64_t v11 = v7;
        a2 = v5 - 4;
        if (v5 > 4) {
          goto LABEL_24;
        }
        goto LABEL_21;
      case 3uLL:
        *(_WORD *)uint64_t v11 = v7;
        v11[2] = BYTE2(v7);
        goto LABEL_21;
      case 4uLL:
        *(_DWORD *)uint64_t v11 = v7;
        a2 = v5 - 4;
        if (v5 > 4) {
          goto LABEL_24;
        }
        goto LABEL_21;
      default:
        *(_DWORD *)uint64_t v11 = v7;
        bzero(v11 + 4, a2);
        a2 = v5 - 4;
        if (v5 <= 4)
        {
LABEL_21:
          switch(v5)
          {
            case 0uLL:
              return;
            case 1uLL:
              *a1 = v10;
              break;
            case 2uLL:
              *(_WORD *)a1 = v10;
              break;
            case 3uLL:
              *(_WORD *)a1 = v10;
              a1[2] = BYTE2(v10);
              break;
            case 4uLL:
              *(_DWORD *)a1 = v10;
              break;
            default:
              goto LABEL_24;
          }
        }

        else
        {
LABEL_24:
          *(_DWORD *)a1 = v10;
          int v12 = a1 + 4;
LABEL_25:
          bzero(v12, a2);
        }

        break;
    }
  }

  else
  {
    unint64_t v9 = &a1[v5];
    switch(v6)
    {
      case 0uLL:
        return;
      case 1uLL:
        *unint64_t v9 = a3;
        break;
      case 2uLL:
        *(_WORD *)unint64_t v9 = a3;
        break;
      case 3uLL:
        *(_WORD *)unint64_t v9 = a3;
        v9[2] = BYTE2(a3);
        break;
      case 4uLL:
        *(_DWORD *)unint64_t v9 = a3;
        break;
      default:
        *(_DWORD *)unint64_t v9 = a3;
        int v12 = v9 + 4;
        goto LABEL_25;
    }
  }

uint64_t swift_getEnumCaseMultiPayload(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(*(void *)(a2 + 8) + 20LL);
  uint64_t v3 = *(void *)(a2 + ((v2 >> 21) & 0x7F8));
  unsigned int v4 = v2 & 0xFFFFFF;
  uint64_t v5 = 0LL;
  switch(*(void *)(*(void *)(a2 - 8) + 64LL) - v3)
  {
    case 0LL:
      goto LABEL_7;
    case 1LL:
      uint64_t v5 = a1[v3];
      int v6 = v5 - v4;
      goto LABEL_8;
    case 2LL:
      uint64_t v5 = *(unsigned __int16 *)&a1[v3];
LABEL_7:
      int v6 = v5 - v4;
      return v5;
    case 3LL:
      uint64_t v5 = *(unsigned __int16 *)&a1[v3] | (a1[v3 + 2] << 16);
      int v6 = v5 - v4;
      goto LABEL_8;
    default:
      uint64_t v5 = *(unsigned int *)&a1[v3];
      int v6 = v5 - v4;
LABEL_8:
      int v7 = 0;
      switch(v3)
      {
        case 0LL:
          goto LABEL_15;
        case 1LL:
          int v7 = *a1;
          goto LABEL_15;
        case 2LL:
          int v7 = *(unsigned __int16 *)a1;
          goto LABEL_15;
        case 3LL:
          int v7 = *(unsigned __int16 *)a1 | (a1[2] << 16);
LABEL_15:
          int v9 = v7 | (v6 << (8 * v3));
          break;
        default:
          int v9 = *(_DWORD *)a1;
          break;
      }

      return v9 + v4;
  }

void swift::runtime::environment::initialize(swift::runtime::environment *this, void *a2)
{
  unint64_t v2 = (const char **)*MEMORY[0x1895FB100];
  uint64_t v3 = *(const char **)*MEMORY[0x1895FB100];
  if (v3)
  {
    unsigned __int8 v109 = 0;
    while (1)
    {
      if (strncmp(v3, "SWIFT_", 6uLL)) {
        goto LABEL_6;
      }
      int v10 = strncmp(v3, "SWIFT_DEBUG_HELP=", 0x11uLL);
      BOOL v12 = v10 == 0;
      if (!v10)
      {
        uint64_t v3 = *v2;
      }

      if (!strncmp(v3, "SWIFT_DEBUG_ENABLE_METADATA_ALLOCATION_ITERATION=", 0x31uLL))
      {
        uint64_t v3 = *v2;
        BOOL v12 = 1;
      }

      if (!strncmp(v3, "SWIFT_DEBUG_ENABLE_METADATA_BACKTRACE_LOGGING=", 0x2EuLL))
      {
        uint64_t v3 = *v2;
        BOOL v12 = 1;
      }

      if (!strncmp(v3, "SWIFT_DEBUG_IMPLICIT_OBJC_ENTRYPOINT=", 0x25uLL))
      {
        uint64_t v15 = v3 + 37;
        unint64_t v16 = strtol(v15, &__endptr, 0);
        if (*__endptr)
        {
          char v19 = 2;
          swift::warning( 0LL,  "Warning: cannot parse value %s=%s, defaulting to %u.\n",  v17,  v18,  "SWIFT_DEBUG_IMPLICIT_OBJC_ENTRYPOINT",  v15,  2LL);
        }

        else if ((v16 & 0x8000000000000000LL) != 0)
        {
          swift::warning( 0LL,  "Warning: %s=%s out of bounds, clamping to 0.\n",  v17,  v18,  "SWIFT_DEBUG_IMPLICIT_OBJC_ENTRYPOINT",  v15);
          char v19 = 0;
        }

        else if (v16 < 0x100)
        {
          char v19 = v16;
        }

        else
        {
          char v19 = -1;
          swift::warning( 0LL,  "Warning: %s=%s out of bounds, clamping to %d.\n",  v17,  v18,  "SWIFT_DEBUG_IMPLICIT_OBJC_ENTRYPOINT",  v15,  255LL);
        }

        swift::runtime::environment::SWIFT_DEBUG_IMPLICIT_OBJC_ENTRYPOINT_variable = v19;
        uint64_t v3 = *v2;
        BOOL v12 = 1;
      }

      if (!strncmp(v3, "SWIFT_DETERMINISTIC_HASHING=", 0x1CuLL))
      {
        uint64_t v3 = *v2;
        BOOL v12 = 1;
      }

      if (!strncmp(v3, "SWIFT_ENABLE_MANGLED_NAME_VERIFICATION=", 0x27uLL))
      {
        uint64_t v3 = *v2;
        BOOL v12 = 1;
      }

      if (!strncmp(v3, "SWIFT_DEBUG_ENABLE_MALLOC_SCRIBBLE=", 0x23uLL))
      {
        uint64_t v3 = *v2;
        BOOL v12 = 1;
      }

      if (!strncmp(v3, "SWIFT_DEBUG_ENABLE_COW_CHECKS=", 0x1EuLL))
      {
        uint64_t v3 = *v2;
        BOOL v12 = 1;
      }

      if (!strncmp(v3, "SWIFT_ENABLE_ASYNC_JOB_DISPATCH_INTEGRATION=", 0x2CuLL))
      {
        BOOL v12 = 1;
        uint64_t v3 = *v2;
      }

      if (!strncmp(v3, "SWIFT_DEBUG_VALIDATE_UNCHECKED_CONTINUATIONS=", 0x2DuLL))
      {
        uint64_t v3 = *v2;
        BOOL v12 = 1;
      }

      if (!strncmp(v3, "SWIFT_DEBUG_VALIDATE_SHARED_CACHE_PROTOCOL_CONFORMANCES=", 0x38uLL))
      {
        uint64_t v3 = *v2;
        BOOL v12 = 1;
      }

      if (!strncmp(v3, "SWIFT_DEBUG_ENABLE_SHARED_CACHE_PROTOCOL_CONFORMANCES=", 0x36uLL))
      {
        BOOL v12 = 1;
        uint64_t v3 = *v2;
      }

      if (!strncmp(v3, "SWIFT_DEBUG_CONCURRENCY_ENABLE_COOPERATIVE_QUEUES=", 0x32uLL))
      {
        BOOL v12 = 1;
        uint64_t v3 = *v2;
      }

      if (!strncmp(v3, "SWIFT_BINARY_COMPATIBILITY_VERSION=", 0x23uLL)) {
        break;
      }
LABEL_41:
      if (!strncmp(v3, "SWIFT_DEBUG_FAILED_TYPE_LOOKUP=", 0x1FuLL))
      {
        uint64_t v3 = *v2;
        BOOL v12 = 1;
      }

      if (strncmp(v3, "SWIFT_DEBUG_VALIDATE_EXTERNAL_GENERIC_METADATA_BUILDER=", 0x37uLL)) {
        goto LABEL_48;
      }
      v35 = v3 + 55;
      unint64_t v36 = strtol(v35, &__endptr, 0);
      if (*__endptr)
      {
        uint64_t v108 = 0LL;
        swift::warning( 0LL,  "Warning: cannot parse value %s=%s, defaulting to %u.\n",  v37,  v38,  "SWIFT_DEBUG_VALIDATE_EXTERNAL_GENERIC_METADATA_BUILDER",  v35);
      }

      else
      {
        if ((v36 & 0x8000000000000000LL) == 0)
        {
          if (v36 < 0x100)
          {
            char v39 = v36;
          }

          else
          {
            char v39 = -1;
            swift::warning( 0LL,  "Warning: %s=%s out of bounds, clamping to %d.\n",  v37,  v38,  "SWIFT_DEBUG_VALIDATE_EXTERNAL_GENERIC_METADATA_BUILDER",  v35,  255LL);
          }

          goto LABEL_47;
        }

        swift::warning( 0LL,  "Warning: %s=%s out of bounds, clamping to 0.\n",  v37,  v38,  "SWIFT_DEBUG_VALIDATE_EXTERNAL_GENERIC_METADATA_BUILDER",  v35);
      }

      char v39 = 0;
LABEL_47:
      swift::runtime::environment::SWIFT_DEBUG_VALIDATE_EXTERNAL_GENERIC_METADATA_BUILDER_variable = v39;
      uint64_t v3 = *v2;
      BOOL v12 = 1;
LABEL_48:
      if (!strncmp(v3, "SWIFT_DEBUG_ENABLE_LIB_PRESPECIALIZED=", 0x26uLL))
      {
        BOOL v12 = 1;
        uint64_t v3 = *v2;
      }

      if (!strncmp(v3, "SWIFT_DEBUG_LIB_PRESPECIALIZED_PATH=", 0x24uLL))
      {
        int v42 = *((unsigned __int8 *)v3 + 36);
        v41 = v3 + 36;
        if (v42) {
          uint64_t v43 = v41;
        }
        else {
          uint64_t v43 = "";
        }
        swift::runtime::environment::SWIFT_DEBUG_LIB_PRESPECIALIZED_PATH_variable = strdup(v43);
        uint64_t v3 = *v2;
        BOOL v12 = 1;
      }

      if (!strncmp(v3, "SWIFT_DEBUG_LIB_PRESPECIALIZED_DISABLED_PROCESSES=", 0x32uLL))
      {
        int v45 = *((unsigned __int8 *)v3 + 50);
        v44 = v3 + 50;
        if (v45) {
          unint64_t v46 = v44;
        }
        else {
          unint64_t v46 = "";
        }
        swift::runtime::environment::SWIFT_DEBUG_LIB_PRESPECIALIZED_DISABLED_PROCESSES_variable = strdup(v46);
        uint64_t v3 = *v2;
        BOOL v12 = 1;
      }

      if (!strncmp(v3, "SWIFT_DEBUG_LIB_PRESPECIALIZED_ENABLED_PROCESSES=", 0x31uLL))
      {
        int v48 = *((unsigned __int8 *)v3 + 49);
        v47 = v3 + 49;
        if (v48) {
          int v49 = v47;
        }
        else {
          int v49 = "";
        }
        swift::runtime::environment::SWIFT_DEBUG_LIB_PRESPECIALIZED_ENABLED_PROCESSES_variable = strdup(v49);
        uint64_t v3 = *v2;
        BOOL v12 = 1;
      }

      if (!strncmp(v3, "SWIFT_DEBUG_ENABLE_LIB_PRESPECIALIZED_LOGGING=", 0x2EuLL))
      {
        uint64_t v3 = *v2;
        BOOL v12 = 1;
      }

      if (!strncmp(v3, "SWIFT_ROOT=", 0xBuLL))
      {
        int v52 = *((unsigned __int8 *)v3 + 11);
        v51 = v3 + 11;
        if (v52) {
          unsigned int v53 = v51;
        }
        else {
          unsigned int v53 = "";
        }
        swift::runtime::environment::SWIFT_ROOT_variable = strdup(v53);
        uint64_t v3 = *v2;
        BOOL v12 = 1;
      }

      if (!strncmp(v3, "SWIFT_BACKTRACE=", 0x10uLL))
      {
        int v58 = *((unsigned __int8 *)v3 + 16);
        __int128 v57 = v3 + 16;
        if (v58) {
          unint64_t v59 = v57;
        }
        else {
          unint64_t v59 = "";
        }
        swift::runtime::environment::SWIFT_BACKTRACE_variable = strdup(v59);
        uint64_t v3 = *v2;
        if (strncmp(*v2, "SWIFT_IS_CURRENT_EXECUTOR_LEGACY_MODE_OVERRIDE=", 0x2FuLL)) {
          goto LABEL_6;
        }
      }

      else if (strncmp(v3, "SWIFT_IS_CURRENT_EXECUTOR_LEGACY_MODE_OVERRIDE=", 0x2FuLL))
      {
        if (!v12 && !strncmp(v3, "SWIFT_DEBUG_", 0xCuLL))
        {
          int v54 = strchr(v3, 61);
          if (!v54) {
            int v54 = (char *)&v3[strlen(v3)];
          }
          swift::warning(0LL, "Warning: unknown environment variable %.*s\n", v55, v56, v54 - v3, v3);
        }

        goto LABEL_6;
      }

      int v5 = *((unsigned __int8 *)v3 + 47);
      unsigned int v4 = v3 + 47;
      if (v5) {
        int v6 = v4;
      }
      else {
        int v6 = "";
      }
      swift::runtime::environment::SWIFT_IS_CURRENT_EXECUTOR_LEGACY_MODE_OVERRIDE_variable = (uint64_t)strdup(v6);
LABEL_6:
      int v9 = v2[1];
      ++v2;
      uint64_t v3 = v9;
      if (!v9)
      {
        if ((v109 & 1) != 0)
        {
          swift::warning(0LL, "Swift runtime debugging:\n", v7, v8);
          swift::warning( 0LL,  "%7s %s [default: %s] - %s\n",  v60,  v61,  "BOOL",  "SWIFT_DEBUG_ENABLE_METADATA_ALLOCATION_ITERATION",  "false",  "Enable additional metadata allocation tracking for swift-inspect to use.");
          swift::warning( 0LL,  "%7s %s [default: %s] - %s\n",  v62,  v63,  "BOOL",  "SWIFT_DEBUG_ENABLE_METADATA_BACKTRACE_LOGGING",  "false",  "Enable logging of backtraces for each metadata allocation. Requires SWIFT_DEBUG_ENABLE_METADATA_ALLOCATION_I TERATION to be enabled.");
          swift::warning( 0LL,  "%7s %s [default: %s] - %s\n",  v64,  v65,  "uint8_t",  "SWIFT_DEBUG_IMPLICIT_OBJC_ENTRYPOINT",  "2",  "Print warnings when using implicit @objc entrypoints. Set to desired reporting level, 0-3.");
          swift::warning( 0LL,  "%7s %s [default: %s] - %s\n",  v66,  v67,  "BOOL",  "SWIFT_DETERMINISTIC_HASHING",  "false",  "Disable randomized hash seeding.");
          swift::warning( 0LL,  "%7s %s [default: %s] - %s\n",  v68,  v69,  "BOOL",  "SWIFT_ENABLE_MANGLED_NAME_VERIFICATION",  "false",  "Enable verification that metadata can roundtrip through a mangled name each time metadata is instantiated.");
          swift::warning( 0LL,  "%7s %s [default: %s] - %s\n",  v70,  v71,  "BOOL",  "SWIFT_DEBUG_ENABLE_MALLOC_SCRIBBLE",  "false",  "Scribble on runtime allocations such as metadata allocations.");
          swift::warning( 0LL,  "%7s %s [default: %s] - %s\n",  v72,  v73,  "BOOL",  "SWIFT_DEBUG_ENABLE_COW_CHECKS",  "false",  "Enable internal checks for copy-on-write operations.");
          swift::warning( 0LL,  "%7s %s [default: %s] - %s\n",  v74,  v75,  "BOOL",  "SWIFT_ENABLE_ASYNC_JOB_DISPATCH_INTEGRATION",  "true",  "Enable use of dispatch_async_swift_job when available.");
          swift::warning( 0LL,  "%7s %s [default: %s] - %s\n",  v76,  v77,  "BOOL",  "SWIFT_DEBUG_VALIDATE_UNCHECKED_CONTINUATIONS",  "false",  "Check for and error on double-calls of unchecked continuations.");
          swift::warning( 0LL,  "%7s %s [default: %s] - %s\n",  v78,  v79,  "BOOL",  "SWIFT_DEBUG_VALIDATE_SHARED_CACHE_PROTOCOL_CONFORMANCES",  "false",  "Validate shared cache protocol conformance results against the lists of conformances in the shared cache images.");
          swift::warning( 0LL,  "%7s %s [default: %s] - %s\n",  v80,  v81,  "BOOL",  "SWIFT_DEBUG_ENABLE_SHARED_CACHE_PROTOCOL_CONFORMANCES",  "true",  "Enable querying precomputed protocol conformances in the shared cache.");
          swift::warning( 0LL,  "%7s %s [default: %s] - %s\n",  v82,  v83,  "BOOL",  "SWIFT_DEBUG_CONCURRENCY_ENABLE_COOPERATIVE_QUEUES",  "true",  "Enable dispatch cooperative queues in the global executor.");
          swift::warning( 0LL,  "%7s %s [default: %s] - %s\n",  v84,  v85,  "uint32_t",  "SWIFT_BINARY_COMPATIBILITY_VERSION",  "0",  "Set the binary compatibility level of the Swift Standard Library");
          swift::warning( 0LL,  "%7s %s [default: %s] - %s\n",  v86,  v87,  "BOOL",  "SWIFT_DEBUG_FAILED_TYPE_LOOKUP",  "false",  "Enable warnings when we fail to look up a type by name.");
          swift::warning( 0LL,  "%7s %s [default: %s] - %s\n",  v88,  v89,  "uint8_t",  "SWIFT_DEBUG_VALIDATE_EXTERNAL_GENERIC_METADATA_BUILDER",  "0",  "Validate the external metadata builder by running it in parallel with the runtime's builder, and checking th at they produce the same output. Level 0 does no validation. Level 1 does silent validation unless a validat ion failure occurs. Level 2 enables full debug logging in the builder.");
          swift::warning( 0LL,  "%7s %s [default: %s] - %s\n",  v90,  v91,  "BOOL",  "SWIFT_DEBUG_ENABLE_LIB_PRESPECIALIZED",  "true",  "Enable use of prespecializations library.");
          swift::warning( 0LL,  "%7s %s [default: %s] - %s\n",  v92,  v93,  "string",  "SWIFT_DEBUG_LIB_PRESPECIALIZED_PATH",  "",  "A path to a prespecializations library to use at runtime. In order to be used, this library must be loaded i nto the process by other means (such as DYLD_INSERT_LIBRARIES) before Swift tries to use it.");
          swift::warning( 0LL,  "%7s %s [default: %s] - %s\n",  v94,  v95,  "string",  "SWIFT_DEBUG_LIB_PRESPECIALIZED_DISABLED_PROCESSES",  "",  "A colon-separated list of process names where the prespecializations library will be forcibly disabled.");
          swift::warning( 0LL,  "%7s %s [default: %s] - %s\n",  v96,  v97,  "string",  "SWIFT_DEBUG_LIB_PRESPECIALIZED_ENABLED_PROCESSES",  "",  "A colon-separated list of process names where the prespecializations library will be forcibly enabled. This overrides the disabled processes list in the prespecializations library, as well as the list in SWIFT_DEBUG_ LIB_PRESPECIALIZED_DISABLED_PROCESSES.");
          swift::warning( 0LL,  "%7s %s [default: %s] - %s\n",  v98,  v99,  "BOOL",  "SWIFT_DEBUG_ENABLE_LIB_PRESPECIALIZED_LOGGING",  "false",  "Enable debug logging of prespecializations library use.");
          swift::warning( 0LL,  "%7s %s [default: %s] - %s\n",  v100,  v101,  "string",  "SWIFT_ROOT",  "",  "Overrides the root directory of the Swift installation. This is used to locate auxiliary files relative to t he runtime itself.");
          swift::warning( 0LL,  "%7s %s [default: %s] - %s\n",  v102,  v103,  "string",  "SWIFT_BACKTRACE",  "",  "A comma-separated list of key=value pairs that controls the crash catching and backtracing support in the ru ntime. See docs/Backtracing.rst in the Swift repository for details.");
          swift::warning( 0LL,  "%7s %s [default: %s] - %s\n",  v104,  v105,  "string",  "SWIFT_IS_CURRENT_EXECUTOR_LEGACY_MODE_OVERRIDE",  "",  "Allows for suppressing 'is current executor' equality check crashes. As since Swift 6.0 checking for current executor equality, may crash and will never return 'false' because we are calling into library implemented SerialExecutor.checkIsolation which should crash if the isolation is not the expected one. Some old code may rely on the non-crashing behavior. This flag enables temporarily restoring the legacy 'nocrash' behavior un til adopting code has been adjusted. Legal values are:  'legacy' (Legacy behavior),  'swift6' (Swift 6.0+ behavior)");
          swift::warning(0LL, "SWIFT_DEBUG_HELP=YES - Print this help.", v106, v107);
        }

        return;
      }
    }

    __int128 v29 = v3 + 35;
    unint64_t v30 = strtoll(v29, &__endptr, 0);
    if (*__endptr)
    {
      swift::warning( 0LL,  "Warning: cannot parse value %s=%s, defaulting to %u.\n",  v31,  v32,  "SWIFT_BINARY_COMPATIBILITY_VERSION",  v29,  0LL);
    }

    else
    {
      if ((v30 & 0x8000000000000000LL) == 0)
      {
        if (HIDWORD(v30))
        {
          int v33 = -1;
          swift::warning( 0LL,  "Warning: %s=%s out of bounds, clamping to %u.\n",  v31,  v32,  "SWIFT_BINARY_COMPATIBILITY_VERSION",  v29,  0xFFFFFFFFLL);
        }

        else
        {
          int v33 = v30;
        }

        goto LABEL_40;
      }

      swift::warning( 0LL,  "Warning: %s=%s out of bounds, clamping to 0.\n",  v31,  v32,  "SWIFT_BINARY_COMPATIBILITY_VERSION",  v29,  v108);
    }

    int v33 = 0;
LABEL_40:
    swift::runtime::environment::SWIFT_BINARY_COMPATIBILITY_VERSION_variable = v33;
    uint64_t v3 = *v2;
    BOOL v12 = 1;
    goto LABEL_41;
  }

const char *anonymous namespace'::parse_BOOL( _anonymous_namespace_ *this, const char *a2, const char *a3, char *a4)
{
  if (!a2) {
    return a3;
  }
  uint64_t v5 = 1LL;
  switch(*a2)
  {
    case '0':
    case 'F':
    case 'N':
    case 'f':
    case 'n':
      uint64_t v5 = 0LL;
      break;
    case '1':
    case 'T':
    case 'Y':
    case 't':
    case 'y':
      return (const char *)v5;
    default:
      int v6 = "false";
      if ((_DWORD)a3) {
        int v6 = "true";
      }
      swift::warning(0LL, "Warning: cannot parse value %s=%s, defaulting to %s.\n", a3, a4, this, a2, v6);
      return a3;
  }

  return (const char *)v5;
}

uint64_t swift_COWChecksEnabled()
{
  if (swift::runtime::environment::initializeToken != -1) {
    dispatch_once_f( &swift::runtime::environment::initializeToken,  0LL,  (dispatch_function_t)swift::runtime::environment::initialize);
  }
  return swift::runtime::environment::SWIFT_DEBUG_ENABLE_COW_CHECKS_variable;
}

uint64_t concurrencyEnableCooperativeQueues()
{
  if (swift::runtime::environment::initializeToken != -1) {
    dispatch_once_f( &swift::runtime::environment::initializeToken,  0LL,  (dispatch_function_t)swift::runtime::environment::initialize);
  }
  return swift::runtime::environment::SWIFT_DEBUG_CONCURRENCY_ENABLE_COOPERATIVE_QUEUES_variable;
}

uint64_t concurrencyEnableJobDispatchIntegration()
{
  if (swift::runtime::environment::initializeToken != -1) {
    dispatch_once_f( &swift::runtime::environment::initializeToken,  0LL,  (dispatch_function_t)swift::runtime::environment::initialize);
  }
  return swift::runtime::environment::SWIFT_ENABLE_ASYNC_JOB_DISPATCH_INTEGRATION_variable;
}

uint64_t concurrencyValidateUncheckedContinuations()
{
  if (swift::runtime::environment::initializeToken != -1) {
    dispatch_once_f( &swift::runtime::environment::initializeToken,  0LL,  (dispatch_function_t)swift::runtime::environment::initialize);
  }
  return swift::runtime::environment::SWIFT_DEBUG_VALIDATE_UNCHECKED_CONTINUATIONS_variable;
}

uint64_t concurrencyIsCurrentExecutorLegacyModeOverride()
{
  if (swift::runtime::environment::initializeToken != -1) {
    dispatch_once_f( &swift::runtime::environment::initializeToken,  0LL,  (dispatch_function_t)swift::runtime::environment::initialize);
  }
  return swift::runtime::environment::SWIFT_IS_CURRENT_EXECUTOR_LEGACY_MODE_OVERRIDE_variable;
}

unint64_t _swift_setWillThrowHandler(unint64_t result)
{
  return result;
}

uint64_t swift_willThrow()
{
  v1 = (uint64_t (*)(uint64_t))atomic_load(&_swift_willThrow);
  if (v1) {
    return v1(v0);
  }
  return result;
}

void swift_willThrowTypedImpl(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (void (*)(uint64_t))atomic_load(&_swift_willThrowTypedImpl);
  if (v3)
  {
    v3(a1);
  }

  else
  {
    unsigned int v4 = (void (*)(void))atomic_load(&_swift_willThrow);
    if (v4)
    {
      uint64_t v5 = swift_allocError(a2, a3, a1, 0);
      v4();
      swift_errorRelease(v5);
    }
  }

void swift::dumpStackTraceEntry(swift *this, swift::SymbolInfo *a2, void *a3)
{
  int v3 = (int)a3;
  int v5 = (int)this;
  swift::SymbolInfo::lookup(a2, (uint64_t)v21);
  if (!v22)
  {
    fprintf((FILE *)*MEMORY[0x1895F89D0], "%-4u %-34s 0x%0.16tx\n", v5, "<unknown>", (ptrdiff_t)a2);
    return;
  }

  Filename = (const char *)swift::SymbolInfo::getFilename((swift::SymbolInfo *)v21);
  int v7 = Filename;
  if (Filename) {
    Filename = (const char *)strlen(Filename);
  }
  unsigned int v8 = Filename;
  do
  {
    if (!v8) {
      break;
    }
    int v9 = (v8--)[(void)(v7 - 1)];
  }

  while (v9 != 47);
  memset(&__p, 0, sizeof(__p));
  if (!v22)
  {
    std::__throw_bad_optional_access[abi:nn180100]();
    swift::withCurrentBacktrace(v19);
    return;
  }

  if (_ContiguousArrayBuffer.mutableCount.getter((uint64_t)v21))
  {
    swift::SymbolInfo::getSymbolAddress((swift::SymbolInfo *)v21);
    int v10 = (const char *)_ContiguousArrayBuffer.mutableCount.getter((uint64_t)v21);
    uint64_t v11 = __cxa_demangle(v10, 0LL, 0LL, &status);
    if (status)
    {
      BOOL v12 = (_WORD *)_ContiguousArrayBuffer.mutableCount.getter((uint64_t)v21);
      uint64_t v13 = (const char *)_ContiguousArrayBuffer.mutableCount.getter((uint64_t)v21);
      size_t v14 = strlen(v13);
      v23[9] = 1;
      char v25 = 1;
      __int16 v26 = 0;
      char v27 = 1;
      uint64_t v28 = 0LL;
      uint64_t v29 = 0LL;
      v30[0] = &unk_189B8B0E8;
      v30[1] = swift::Demangle::__runtime::genericParameterName;
      __int128 v31 = v30;
      *(_WORD *)unsigned int v23 = 257;
      memset(&v23[2], 0, 7);
      uint64_t v24 = 0x101000001010101LL;
      swift::Demangle::__runtime::demangleSymbolAsString(v12, v14, (uint64_t)v23, &v32);
      std::string __p = v32;
      v32.__r_.__value_.__s.__size_ = 0;
      v32.__r_.__value_.__s.__data_[0] = 0;
      uint64_t v15 = v31;
      if (v31 == v30)
      {
        uint64_t v16 = 4LL;
        uint64_t v15 = v30;
        goto LABEL_20;
      }

      if (v31)
      {
        uint64_t v16 = 5LL;
LABEL_20:
        (*(void (**)(void))(*v15 + 8 * v16))();
      }
    }

    else
    {
      int v17 = v11;
      std::string::append(&__p, v11);
      free(v17);
    }
  }

  else
  {
    swift::SymbolInfo::getBaseAddress((swift::SymbolInfo *)v21);
    MEMORY[0x186E0BC88](&__p, "<unavailable>");
  }

  int v18 = (FILE *)*MEMORY[0x1895F89D0];
  if (v3) {
  else
  }
    fprintf(v18, "%-4u %-34s 0x%0.16lx %s + %td\n");
}

uint64_t swift::withCurrentBacktrace(void *a1)
{
  v1 = (void *)a1[3];
  if (v1)
  {
    if (v1 == a1)
    {
      unsigned int v8 = v7;
      (*(void (**)(void *, _BYTE *))(*a1 + 24LL))(a1, v7);
    }

    else
    {
      unsigned int v8 = (_BYTE *)(*(uint64_t (**)(void))(*v1 + 16LL))(a1[3]);
    }
  }

  else
  {
    unsigned int v8 = 0LL;
  }

  int v2 = backtrace(v9, 128);
  uint64_t v11 = v9;
  int v10 = v2;
  if (v8)
  {
    (*(void (**)(_BYTE *, void ***, int *))(*(void *)v8 + 48LL))(v8, &v11, &v10);
    int v3 = v8;
    if (v8 == v7)
    {
      uint64_t v4 = 4LL;
      int v3 = v7;
    }

    else
    {
      if (!v8) {
        return 1LL;
      }
      uint64_t v4 = 5LL;
    }

    (*(void (**)(void))(*v3 + 8 * v4))();
    return 1LL;
  }

  std::__throw_bad_function_call[abi:nn180100]();
  return (uint64_t)swift::printCurrentBacktrace(v6);
}

void *swift::printCurrentBacktrace(swift *this)
{
  int v6 = (int)this;
  v4[0] = off_189B8B278;
  v4[1] = &v6;
  int v5 = v4;
  int v1 = backtrace(v7, 128);
  int v9 = v7;
  int v8 = v1;
  if (!v5)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    return (void *)_swift_runtime_on_report();
  }

  (*(void (**)(void *, void ***, int *))(*v5 + 48LL))(v5, &v9, &v8);
  uint64_t result = v5;
  if (v5 == v4)
  {
    uint64_t v3 = 4LL;
    uint64_t result = v4;
  }

  else
  {
    if (!v5) {
      return result;
    }
    uint64_t v3 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

uint64_t _swift_shouldReportFatalErrorsToDebugger()
{
  return _swift_reportFatalErrorsToDebugger;
}

char *swift_reportError(int a1, char *a2)
{
  uint64_t v3 = (FILE **)MEMORY[0x1895F89D0];
  fputs(a2, (FILE *)*MEMORY[0x1895F89D0]);
  fflush(*v3);
  asl_log(0LL, 0LL, 3, "%s", a2);
  int v8 = 0LL;
  uint64_t v5 = qword_18C565C20[0];
LABEL_3:
  if (v5)
  {
    swift_asprintf(&v8, v4, v5, a2);
    uint64_t result = v8;
  }

  else
  {
    uint64_t result = strdup(a2);
    int v8 = result;
  }

  do
  {
    unint64_t v7 = __ldxr(qword_18C565C20);
    if (v7 != v5)
    {
      __clrex();
      uint64_t v5 = v7;
      if (v8)
      {
        free(v8);
        int v8 = 0LL;
      }

      goto LABEL_3;
    }
  }

  while (__stlxr((unint64_t)result, qword_18C565C20));
  return result;
}

void swift::fatalErrorv(swift *this, char *__format, va_list a3, char *a4)
{
  LODWORD(v5) = vsnprintf(0LL, 0LL, __format, a3);
  int v6 = 0LL;
  if ((v5 & 0x80000000) == 0)
  {
    size_t v7 = ((_DWORD)v5 + 1);
    uint64_t v5 = (char *)malloc(v7);
    int v6 = v5;
    if (v5)
    {
      LODWORD(v5) = vsnprintf(v5, v7, __format, a3);
      if ((v5 & 0x80000000) != 0)
      {
        free(v6);
        int v6 = 0LL;
      }
    }
  }

  swift_reportError((int)v5, (char *)v6);
  abort();
}

void swift::fatalError(swift *this, char *a2, const char *a3, char *a4, ...)
{
}

void swift::warningv(swift *this, char *__format, va_list a3, char *a4)
{
  char v5 = (char)this;
  int v6 = vsnprintf(0LL, 0LL, __format, a3);
  if (v6 < 0) {
    goto LABEL_5;
  }
  size_t v7 = (v6 + 1);
  int v8 = (char *)malloc(v7);
  int v9 = v8;
  if (v8 && vsnprintf(v8, v7, __format, a3) < 0)
  {
    free(v9);
LABEL_5:
    int v9 = 0LL;
  }

  int v10 = (FILE **)MEMORY[0x1895F89D0];
  fputs(v9, (FILE *)*MEMORY[0x1895F89D0]);
  fflush(*v10);
  asl_log(0LL, 0LL, 3, "%s", v9);
  if ((v5 & 1) != 0)
  {
    fputs("Current stack trace:\n", *v10);
    swift::printCurrentBacktrace((swift *)1);
  }

  free(v9);
}

void swift::warning(swift *this, char *a2, const char *a3, char *a4, ...)
{
}

void swift_reportWarning(swift *a1, uint64_t a2, const char *a3, char *a4)
{
}

void swift_deletedMethodError(swift *a1, uint64_t a2, const char *a3, char *a4)
{
}

void swift::swift_abortRetainOverflow(swift *this, uint64_t a2, const char *a3, char *a4)
{
}

void swift::swift_abortUnownedRetainOverflow(swift *this, uint64_t a2, const char *a3, char *a4)
{
}

void swift::swift_abortWeakRetainOverflow(swift *this, uint64_t a2, const char *a3, char *a4)
{
}

void swift::swift_abortRetainUnowned(swift *this, const void *a2, const char *a3, char *a4)
{
  if (!this) {
    swift::fatalError( 0LL,  "Fatal error: Attempted to read an unowned reference but the object was already deallocated",  a3,  a4);
  }
  swift::fatalError( this,  "Fatal error: Attempted to read an unowned reference but object %p was already deallocated",  a3,  a4,  this);
}

void swift::swift_abortDynamicReplacementDisabling( swift *this, uint64_t a2, const char *a3, char *a4)
{
}

void std::__throw_bad_optional_access[abi:nn180100]()
{
}

void std::__throw_bad_function_call[abi:nn180100]()
{
}

void swift_asprintf(char **a1, const char *a2, ...)
{
  int v3 = vsnprintf(0LL, 0LL, "%s%s", va);
  *a1 = 0LL;
  if ((v3 & 0x80000000) == 0)
  {
    size_t v4 = (v3 + 1);
    char v5 = (char *)malloc(v4);
    if (v5)
    {
      int v6 = v5;
      else {
        *a1 = v6;
      }
    }
  }

{
  int v3;
  size_t v4;
  char *v5;
  char *v6;
  va_list va;
  va_start(va, a2);
  int v3 = vsnprintf(0LL, 0LL, ".%ld", va);
  *a1 = 0LL;
  if ((v3 & 0x80000000) == 0)
  {
    size_t v4 = (v3 + 1);
    char v5 = (char *)malloc(v4);
    if (v5)
    {
      int v6 = v5;
      else {
        *a1 = v6;
      }
    }
  }

{
  int v3;
  size_t v4;
  char *v5;
  char *v6;
  va_list va;
  va_start(va, a2);
  int v3 = vsnprintf(0LL, 0LL, "<%s %p depth = %u>", va);
  *a1 = 0LL;
  if ((v3 & 0x80000000) == 0)
  {
    size_t v4 = (v3 + 1);
    char v5 = (char *)malloc(v4);
    if (v5)
    {
      int v6 = v5;
      else {
        *a1 = v6;
      }
    }
  }

void *std::__function::__func<swift::printCurrentBacktrace(unsigned int)::$_0,std::allocator<swift::printCurrentBacktrace(unsigned int)::$_0>,void ()(void **,int)>::__clone( uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_189B8B278;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift::printCurrentBacktrace(unsigned int)::$_0,std::allocator<swift::printCurrentBacktrace(unsigned int)::$_0>,void ()(void **,int)>::__clone( uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_189B8B278;
  a2[1] = v2;
  return result;
}

void std::__function::__func<swift::printCurrentBacktrace(unsigned int)::$_0,std::allocator<swift::printCurrentBacktrace(unsigned int)::$_0>,void ()(void **,int)>::operator()( uint64_t a1, void *a2, int *a3)
{
  int v3 = *a3;
  int v4 = **(_DWORD **)(a1 + 8);
  if (v4 < *a3)
  {
    int v6 = (swift::SymbolInfo **)(*a2 + 8LL * v4);
    do
    {
      size_t v7 = *v6++;
      swift::dumpStackTraceEntry((swift *)(v4 - **(_DWORD **)(a1 + 8)), v7, 0LL);
      ++v4;
    }

    while (v3 != v4);
  }

uint64_t _swift_stdlib_getDefaultErrorCode(uint64_t a1, void *a2)
{
  if (*a2 == 513LL) {
    return (*(unsigned int (**)(void))(*(a2 - 1) + 88LL))();
  }
  else {
    return 1LL;
  }
}

void _swift_exceptionPersonality(uint64_t a1, uint64_t a2, const char *a3, char *a4)
{
}

uint64_t swift::runtime::AccessSet::insert( unint64_t *a1, void *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v5 = *a1;
  if (*a1)
  {
    int v6 = "modification";
    size_t v7 = (void *)*a1;
    do
    {
      uint64_t v8 = v7[2];
      if (*v7 == a4)
      {
        if ((a5 & 1) != 0)
        {
          uint64_t v15 = a5 & 1;
          uint64_t v16 = a4;
          if ((v8 & 1) == 0) {
            int v6 = "read";
          }
LABEL_13:
          __int16 v26 = (swift::SymbolInfo *)v7[1];
          int v10 = v26;
          snprintf(__str, 0x64uLL, "Simultaneous accesses to 0x%lx, but modification requires exclusive access", v16);
          uint64_t v11 = (FILE **)MEMORY[0x1895F89D0];
          fprintf((FILE *)*MEMORY[0x1895F89D0], "%s.\n", __str);
          snprintf(v24, 0x32uLL, "Previous access (a %s) started at", v6);
          fprintf(*v11, "%s ", v24);
          if (v10)
          {
            swift::dumpStackTraceEntry(0LL, v10, (void *)1);
            fprintf(*v11, " (0x%lx).\n", v10);
          }

          else
          {
            fwrite("<unknown>.\n", 0xBuLL, 1uLL, *v11);
          }

          BOOL v12 = "modification";
          if (!v15) {
            BOOL v12 = "read";
          }
          snprintf(v23, 0x32uLL, "Current access (a %s) started at", v12);
          fprintf(*v11, "%s:\n", v23);
          swift::printCurrentBacktrace((swift *)1);
          uint64_t v20 = v24;
          __int128 v21 = xmmword_1817FFC90;
          char v22 = &v26;
          v17[0] = 2LL;
          v17[1] = "exclusivity-violation";
          v17[2] = v23;
          v17[3] = 1LL;
          v17[4] = v16;
          v17[5] = 1LL;
          v17[6] = &v20;
          __int128 v18 = 0u;
          __int128 v19 = 0u;
          _swift_reportToDebugger(1LL, __str, v17);
          swift::fatalError(0LL, "Fatal access conflict detected.\n", v13, v14);
        }

        if ((v8 & 1) != 0)
        {
          uint64_t v15 = a5 & 1;
          uint64_t v16 = a4;
          goto LABEL_13;
        }
      }

      size_t v7 = (void *)(v8 & 0xFFFFFFFFFFFFFFFELL);
    }

    while ((v8 & 0xFFFFFFFFFFFFFFFELL) != 0);
  }

  if ((a5 & 0x20) != 0)
  {
    *a2 = a4;
    a2[1] = a3;
    a2[2] = a5 & 1 | v5;
    *a1 = (unint64_t)a2;
  }

  return (a5 >> 5) & 1;
}

uint64_t swift_beginAccess(uint64_t result, void *a2, unint64_t a3, uint64_t a4)
{
  if (_swift_disableExclusivityChecking
    || ((uint64_t v7 = result, !a4) ? (v8 = v4) : (v8 = a4),
        int v9 = swift::runtime::SwiftTLSContext::get((swift::runtime::SwiftTLSContext *)result),
        uint64_t result = swift::runtime::AccessSet::insert(v9, a2, v8, v7, a3),
        (result & 1) == 0))
  {
    *a2 = 0LL;
  }

  return result;
}

swift::runtime::SwiftTLSContext *swift_endAccess(swift::runtime::SwiftTLSContext *result)
{
  if (*(void *)result)
  {
    int v1 = result;
    uint64_t result = (swift::runtime::SwiftTLSContext *)swift::runtime::SwiftTLSContext::get(result);
    unint64_t v2 = *(void *)result;
    if (*(swift::runtime::SwiftTLSContext **)result == v1)
    {
      *(void *)uint64_t result = *((void *)v1 + 2) & 0xFFFFFFFFFFFFFFFELL;
    }

    else
    {
      do
      {
        unint64_t v3 = v2;
        uint64_t v4 = *(void *)(v2 + 16);
        unint64_t v2 = v4 & 0xFFFFFFFFFFFFFFFELL;
        if ((v4 & 0xFFFFFFFFFFFFFFFELL) == 0) {
          abort();
        }
      }

      while ((swift::runtime::SwiftTLSContext *)v2 != v1);
      *(void *)(v3 + 16) = *((void *)v1 + 2) & 0xFFFFFFFFFFFFFFFELL | v4 & 1;
    }
  }

  return result;
}

uint64_t *swift_task_enterThreadLocalContext(swift::runtime::SwiftTLSContext *a1)
{
  uint64_t result = swift::runtime::SwiftTLSContext::get(a1);
  uint64_t v3 = *(void *)a1;
  uint64_t v4 = *result;
  if (*(void *)a1)
  {
    if (v4)
    {
      uint64_t v5 = *((void *)a1 + 1);
      *uint64_t result = v3;
      *(void *)(v5 + 16) = *(void *)(v5 + 16) & 1LL | v4;
      *(void *)a1 = v4;
    }

    else
    {
      *uint64_t result = v3;
      *(void *)a1 = 0LL;
    }

    *((void *)a1 + 1) = 0LL;
  }

  else if (v4)
  {
    *(void *)a1 = v4;
  }

  return result;
}

unint64_t *swift_task_exitThreadLocalContext(swift::runtime::SwiftTLSContext *a1)
{
  uint64_t result = swift::runtime::SwiftTLSContext::get(a1);
  unint64_t v3 = *(void *)a1;
  unint64_t v4 = *result;
  if (*(void *)a1)
  {
    if (v4 == v3)
    {
      *(void *)a1 = 0LL;
      *((void *)a1 + 1) = 0LL;
    }

    else
    {
      unint64_t v5 = *result;
      while (1)
      {
        unint64_t v6 = v5;
        unint64_t v5 = *(void *)(v5 + 16) & 0xFFFFFFFFFFFFFFFELL;
        if (!v5) {
          break;
        }
        if (v5 == v3) {
          goto LABEL_13;
        }
      }

      unint64_t v6 = 0LL;
LABEL_13:
      *uint64_t result = v3;
      *(void *)(v6 + 16) &= 1uLL;
      *(void *)a1 = v4;
      *((void *)a1 + 1) = v6;
    }
  }

  else if (v4)
  {
    unint64_t v7 = *result;
    do
    {
      unint64_t v8 = v7;
      unint64_t v7 = *(void *)(v7 + 16) & 0xFFFFFFFFFFFFFFFELL;
    }

    while (v7);
    *uint64_t result = 0LL;
    *(void *)a1 = v4;
    *((void *)a1 + 1) = v8;
  }

  return result;
}

BOOL swift::TargetOpaqueExistentialContainer<swift::InProcess>::isValueInline(uint64_t a1)
{
  return (*(_BYTE *)(*(void *)(*(void *)(a1 + 24) - 8LL) + 82LL) & 2) == 0;
}

void *swift::TargetOpaqueExistentialContainer<swift::InProcess>::projectValue(void *result)
{
  int v1 = *(_DWORD *)(*(void *)(result[3] - 8LL) + 80LL);
  if ((v1 & 0x20000) != 0) {
    return (void *)(*result + ((v1 + 16LL) & ~(unint64_t)v1));
  }
  return result;
}

BOOL _swift_isObjCTypeNameSerializable(void *a1)
{
  int v1 = a1;
  uint64_t v2 = *a1;
  if (*a1 > 0x7FFuLL) {
    LODWORD(v2) = 0;
  }
  BOOL result = 1LL;
  if ((v2 - 515) >= 2 && (_DWORD)v2 != 773)
  {
    if ((_DWORD)v2)
    {
      return 0LL;
    }

    else if ((v1[4] & 2) != 0)
    {
      if (!v1[8]) {
        int v1 = (void *)v1[1];
      }
      if ((v1[5] & 4) == 0)
      {
        unint64_t v4 = (_DWORD *)v1[8];
        while (v4)
        {
          BOOL result = (*v4 & 0x1F) != 2;
          if ((*v4 & 0x1F) == 2) {
            break;
          }
          uint64_t v7 = (int)v4[1];
          unint64_t v5 = v4 + 1;
          uint64_t v6 = v7;
          if (!(_DWORD)v7) {
            break;
          }
          unint64_t v4 = (_DWORD *)((char *)v5 + (v6 & 0xFFFFFFFFFFFFFFFELL));
          if ((v6 & 1) != 0) {
            unint64_t v4 = *(_DWORD **)v4;
          }
        }
      }
    }
  }

  return result;
}

uint64_t swift_getFunctionReplacement(swift::runtime::SwiftTLSContext *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (*(void *)a1 == a2) {
    return 0LL;
  }
  unint64_t v3 = swift::runtime::SwiftTLSContext::get(a1);
  if (*((_BYTE *)v3 + 8))
  {
    uint64_t v2 = 0LL;
    *((_BYTE *)v3 + 8) = 0;
  }

  return v2;
}

uint64_t swift_getOrigOfReplaceable(swift::runtime::SwiftTLSContext *a1)
{
  uint64_t v1 = *(void *)a1;
  *((_BYTE *)swift::runtime::SwiftTLSContext::get(a1) + 8) = 1;
  return v1;
}

uint64_t swift::compareGenericMetadata(uint64_t a1, uint64_t a2, const char *a3, char *a4)
{
  if (a1 == a2) {
    return 1LL;
  }
  uint64_t v6 = *(void *)a1;
  if (*(void *)a1 > 0x7FFuLL) {
    LODWORD(v6) = 0;
  }
  uint64_t v7 = *(void *)a2;
  if (*(void *)a2 > 0x7FFuLL) {
    LODWORD(v7) = 0;
  }
  if ((_DWORD)v6 != (_DWORD)v7)
  {
    validationLog(1, "Kinds do not match");
    goto LABEL_30;
  }

  unint64_t v8 = 0LL;
  if ((int)v6 <= 514)
  {
    if ((v6 - 512) >= 3)
    {
      if ((_DWORD)v6) {
        goto LABEL_17;
      }
      if ((*(_BYTE *)(a1 + 32) & 2) == 0)
      {
        unint64_t v8 = 0LL;
LABEL_20:
        if ((*(_BYTE *)(a2 + 32) & 2) == 0)
        {
          int v10 = 0LL;
          goto LABEL_26;
        }

        uint64_t v11 = (int **)(a2 + 64);
        goto LABEL_25;
      }

      int v9 = (int **)(a1 + 64);
      goto LABEL_16;
    }

void validationLog(char a1, const char *a2, ...)
{
  if ((a1 & 1) != 0) {
    goto LABEL_5;
  }
  if (swift::runtime::environment::initializeToken != -1) {
    dispatch_once_f( &swift::runtime::environment::initializeToken,  0LL,  (dispatch_function_t)swift::runtime::environment::initialize);
  }
  if (swift::runtime::environment::SWIFT_DEBUG_VALIDATE_EXTERNAL_GENERIC_METADATA_BUILDER_variable >= 2u)
  {
LABEL_5:
    unint64_t v3 = (FILE *)*MEMORY[0x1895F89D0];
    fputs("GenericMetadataBuilder validation: ", (FILE *)*MEMORY[0x1895F89D0]);
    vfprintf(v3, a2, va);
    fputs("\n", v3);
  }

uint64_t swift::compareGenericMetadata(swift::TargetMetadata<swift::InProcess> const*,swift::TargetMetadata<swift::InProcess> const*)::$_0::operator()( uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(int *)(v2 + 32);
  uint64_t v4 = v3 + v2 + 32;
  if (!(_DWORD)v3) {
    uint64_t v4 = 0LL;
  }
  if (a1 && (*(_DWORD *)(v4 + 8) & 2) != 0)
  {
    uint64_t v5 = a1 + 8 * (*(unsigned int *)(v2 + 24) + ((4 * (unint64_t)*(unsigned int *)(v2 + 20) + 7) >> 3)) + 8;
    return v5 - a1;
  }

  if (a1)
  {
    uint64_t v6 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v6)
    {
      uint64_t v5 = a1 + 8 * v6 + 4LL * *(unsigned int *)(v2 + 20);
      return v5 - a1;
    }
  }

  return a2;
}

void swift::validateExternalGenericMetadataBuilder(uint64_t a1, int *a2)
{
  int v2 = *a2 & 0x1F;
  if ((v2 - 19) >= 0xFFFFFFFE && (*a2 & 0x80) != 0)
  {
    if (v2 != 17 && v2 != 18) {
      abort();
    }
    uint64_t v5 = a2[8];
    swift::GenericMetadataBuilder<InProcessReaderWriter>::GenericMetadataBuilder(v12, (InProcessReaderWriter *)&v11);
    if ((_DWORD)v5) {
      uint64_t v6 = (uint64_t)a2 + v5 + 32;
    }
    else {
      uint64_t v6 = 0LL;
    }
    swift::GenericMetadataBuilder<InProcessReaderWriter>::extraDataSize(v12, a2, v6, (uint64_t)v8);
    swift::GenericMetadataBuilder<InProcessReaderWriter>::~GenericMetadataBuilder((unsigned int *)v12);
    if (v10 != 1) {
      __asm { BR              X10 }
    }

    if (v9 >= 0) {
      uint64_t v7 = (const char *)v8;
    }
    else {
      uint64_t v7 = (const char *)v8[0];
    }
    validationLog(0, "error getting extra data size: %s", v7);
    if (v10 != -1) {
      ((void (*)(InProcessReaderWriter **, void *))off_189B8B3B0[v10])(v12, v8);
    }
  }

uint64_t printToStderr(const char *a1, ...)
{
  return vfprintf((FILE *)*MEMORY[0x1895F89D0], a1, va);
}

void swift::GenericMetadataBuilder<InProcessReaderWriter>::Dumper<void (*)(char const*,...)>::dumpMetadata( void (**a1)(const char *, ...)@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v33 = (void *)*(a2 - 1);
  int v34 = 0;
  swift::GenericMetadataBuilder<InProcessReaderWriter>::Dumper<void (*)(char const*,...)>::printPointer<swift::TargetMetadata<swift::InProcess> const>( a1,  "  value witnesses: ",  v33,  "\n");
  swift::GenericMetadataBuilder<InProcessReaderWriter>::Dumper<void (*)(char const*,...)>::dumpVWT( a1,  (uint64_t)v33,  (uint64_t)v29);
  if (v32)
  {
    if (v32 == 1) {
      uint64_t v7 = v29;
    }
    else {
      uint64_t v7 = 0LL;
    }
    uint64_t v8 = (uint64_t)&v31;
    if (v32 != 1) {
      uint64_t v8 = 23LL;
    }
    if (*(char *)v8 < 0)
    {
      uint64_t v16 = 8LL;
      if (v32 == 1) {
        uint64_t v16 = (uint64_t)&v30;
      }
      std::string::__init_copy_ctor_external((std::string *)a3, *(const std::string::value_type **)v7, *(void *)v16);
    }

    else
    {
      *(_OWORD *)a3 = *(_OWORD *)v7;
      *(void *)(a3 + 16) = *((void *)v7 + 2);
    }

    *(_DWORD *)(a3 + 24) = 1;
    goto LABEL_21;
  }

  if (*a2 <= 0x7FFuLL) {
    char v9 = (swift *)*a2;
  }
  else {
    char v9 = 0LL;
  }
  StringForMetadataKind = swift::getStringForMetadataKind(v9, v6);
  int v12 = *a1;
  if (!StringForMetadataKind)
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    goto LABEL_33;
  }

  std::string::size_type v13 = v11;
  if (v11 >= 0x7FFFFFFFFFFFFFF8LL) {
    abort();
  }
  size_t v14 = StringForMetadataKind;
  if (v11 >= 0x17)
  {
    uint64_t v18 = (v11 & 0xFFFFFFFFFFFFFFF8LL) + 8;
    if ((v11 | 7) != 0x17) {
      uint64_t v18 = v11 | 7;
    }
    uint64_t v19 = v18 + 1;
    int v15 = (std::string *)operator new(v18 + 1);
    __dst.__r_.__value_.__l.__size_ = v13;
    __dst.__r_.__value_.__l.__cap_ = v19 | 0x8000000000000000LL;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
    goto LABEL_30;
  }

  __dst.__r_.__value_.__s.__size_ = v11;
  int v15 = &__dst;
  if (v11) {
LABEL_30:
  }
    memmove(v15, v14, v13);
  v15->__r_.__value_.__s.__data_[v13] = 0;
  p_dst = &__dst;
  if ((__dst.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
LABEL_33:
  v12("  kind: %#x (%s)\n", (_DWORD)v9, (const char *)p_dst);
  if (*a2 <= 0x7FFuLL && *a2)
  {
    if (*a2 - 515 >= 0xFFFFFFFD)
    {
      swift::GenericMetadataBuilder<InProcessReaderWriter>::Dumper<void (*)(char const*,...)>::dumpValueMetadata( a1,  a2,  (uint64_t)a2,  (uint64_t)&__dst);
      int v20 = v28;
      if (v28)
      {
        if (v28 == 1) {
          char v21 = &__dst;
        }
        else {
          char v21 = 0LL;
        }
        uint64_t v22 = (uint64_t)&__dst.__r_.__value_.__r.__words[2] + 7;
        if (v28 != 1) {
          uint64_t v22 = 23LL;
        }
        if (*(char *)v22 < 0)
        {
          unsigned int v23 = (const std::string::value_type *)v21->__r_.__value_.__r.__words[0];
LABEL_60:
          BOOL v25 = v20 == 1;
          p_size = (std::string::size_type *)8;
          if (v25) {
            p_size = &__dst.__r_.__value_.__l.__size_;
          }
          std::string::__init_copy_ctor_external((std::string *)a3, v23, *p_size);
          int v20 = v28;
          goto LABEL_63;
        }

        goto LABEL_57;
      }
    }

uint64_t swift::GenericMetadataBuilder<InProcessReaderWriter>::Dumper<void (*)(char const*,...)>::printPointer<swift::TargetMetadata<swift::InProcess> const>( void (**a1)(const char *, ...), const char *a2, void *a3, const char *a4)
{
  if (v11 >= 0) {
    uint64_t v7 = v10;
  }
  else {
    uint64_t v7 = (void **)v10[0];
  }
  p_p = (const char *)&__p;
  if (v13 < 0) {
    p_p = (const char *)__p;
  }
  (*a1)("%#llx - %s (%s + %llu)", a3, (const char *)v7, p_p, v14);
  if (v13 < 0)
  {
    operator delete(__p);
    if ((v11 & 0x80000000) == 0) {
      return ((uint64_t (*)(const char *, ...))*a1)("%s", a4);
    }
LABEL_10:
    operator delete(v10[0]);
    return ((uint64_t (*)(const char *, ...))*a1)("%s", a4);
  }

  if (v11 < 0) {
    goto LABEL_10;
  }
  return ((uint64_t (*)(const char *, ...))*a1)("%s", a4);
}

void swift::GenericMetadataBuilder<InProcessReaderWriter>::Dumper<void (*)(char const*,...)>::dumpVWT( void (**a1)(const char *, ...)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6 = v14;
  if (v14) {
    goto LABEL_9;
  }
  swift::GenericMetadataBuilder<InProcessReaderWriter>::Dumper<void (*)(char const*,...)>::dumpVWTFunctionField<swift::OpaqueValue * (* const)(swift::TargetValueBuffer<swift::InProcess> *,swift::TargetValueBuffer<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*)>( a1,  "destroy",  (void **)(a2 + 8),  (uint64_t)v11);
  int v6 = v14;
  if (v14) {
    goto LABEL_9;
  }
  swift::GenericMetadataBuilder<InProcessReaderWriter>::Dumper<void (*)(char const*,...)>::dumpVWTFunctionField<swift::OpaqueValue * (* const)(swift::TargetValueBuffer<swift::InProcess> *,swift::TargetValueBuffer<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*)>( a1,  "initializeWithCopy",  (void **)(a2 + 16),  (uint64_t)v11);
  int v6 = v14;
  if (v14) {
    goto LABEL_9;
  }
  swift::GenericMetadataBuilder<InProcessReaderWriter>::Dumper<void (*)(char const*,...)>::dumpVWTFunctionField<swift::OpaqueValue * (* const)(swift::TargetValueBuffer<swift::InProcess> *,swift::TargetValueBuffer<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*)>( a1,  "assignWithCopy",  (void **)(a2 + 24),  (uint64_t)v11);
  int v6 = v14;
  if (v14) {
    goto LABEL_9;
  }
  swift::GenericMetadataBuilder<InProcessReaderWriter>::Dumper<void (*)(char const*,...)>::dumpVWTFunctionField<swift::OpaqueValue * (* const)(swift::TargetValueBuffer<swift::InProcess> *,swift::TargetValueBuffer<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*)>( a1,  "initializeWithTake",  (void **)(a2 + 32),  (uint64_t)v11);
  int v6 = v14;
  if (v14) {
    goto LABEL_9;
  }
  swift::GenericMetadataBuilder<InProcessReaderWriter>::Dumper<void (*)(char const*,...)>::dumpVWTFunctionField<swift::OpaqueValue * (* const)(swift::TargetValueBuffer<swift::InProcess> *,swift::TargetValueBuffer<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*)>( a1,  "assignWithTake",  (void **)(a2 + 40),  (uint64_t)v11);
  int v6 = v14;
  if (v14) {
    goto LABEL_9;
  }
  swift::GenericMetadataBuilder<InProcessReaderWriter>::Dumper<void (*)(char const*,...)>::dumpVWTFunctionField<swift::OpaqueValue * (* const)(swift::TargetValueBuffer<swift::InProcess> *,swift::TargetValueBuffer<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*)>( a1,  "getEnumTagSinglePayload",  (void **)(a2 + 48),  (uint64_t)v11);
  int v6 = v14;
  if (v14) {
    goto LABEL_9;
  }
  swift::GenericMetadataBuilder<InProcessReaderWriter>::Dumper<void (*)(char const*,...)>::dumpVWTFunctionField<swift::OpaqueValue * (* const)(swift::TargetValueBuffer<swift::InProcess> *,swift::TargetValueBuffer<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*)>( a1,  "storeEnumTagSinglePayload",  (void **)(a2 + 56),  (uint64_t)v11);
  int v6 = v14;
  if (v14) {
    goto LABEL_9;
  }
  (*a1)("    %s: %#llx (%llu)\n", "size", *(void *)(a2 + 64), *(void *)(a2 + 64));
  (*a1)("    %s: %#llx (%llu)\n", "stride", *(void *)(a2 + 72), *(void *)(a2 + 72));
  (*a1)("    %s: %#llx (%llu)\n", "flags", *(unsigned int *)(a2 + 80), *(unsigned int *)(a2 + 80));
  (*a1)("    %s: %#llx (%llu)\n", "extraInhabitantCount", *(unsigned int *)(a2 + 84), *(unsigned int *)(a2 + 84));
  if (!a2) {
    goto LABEL_27;
  }
  if ((*(_DWORD *)(a2 + 80) & 0x200000) != 0
    && ((swift::GenericMetadataBuilder<InProcessReaderWriter>::Dumper<void (*)(char const*,...)>::dumpVWTFunctionField<swift::OpaqueValue * (* const)(swift::TargetValueBuffer<swift::InProcess> *,swift::TargetValueBuffer<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*)>( a1,  "getEnumTag",  (void **)(a2 + 88),  (uint64_t)v11),  (int v6 = v14) != 0)
     || (swift::GenericMetadataBuilder<InProcessReaderWriter>::Dumper<void (*)(char const*,...)>::dumpVWTFunctionField<swift::OpaqueValue * (* const)(swift::TargetValueBuffer<swift::InProcess> *,swift::TargetValueBuffer<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*)>( a1,  "destructiveProjectEnumData",  (void **)(a2 + 96),  (uint64_t)v11),  (int v6 = v14) != 0)
     || (swift::GenericMetadataBuilder<InProcessReaderWriter>::Dumper<void (*)(char const*,...)>::dumpVWTFunctionField<swift::OpaqueValue * (* const)(swift::TargetValueBuffer<swift::InProcess> *,swift::TargetValueBuffer<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*)>( a1,  "destructiveInjectEnumTag",  (void **)(a2 + 104),  (uint64_t)v11),  (int v6 = v14) != 0)))
  {
LABEL_9:
    if (v6 == 1) {
      uint64_t v7 = v11;
    }
    else {
      uint64_t v7 = 0LL;
    }
    uint64_t v8 = (uint64_t)&v13;
    if (v6 != 1) {
      uint64_t v8 = 23LL;
    }
    if (*(char *)v8 < 0)
    {
      BOOL v9 = v6 == 1;
      uint64_t v10 = 8LL;
      if (v9) {
        uint64_t v10 = (uint64_t)&v12;
      }
      std::string::__init_copy_ctor_external((std::string *)a3, *(const std::string::value_type **)v7, *(void *)v10);
      int v6 = v14;
    }

    else
    {
      *(_OWORD *)a3 = *(_OWORD *)v7;
      *(void *)(a3 + 16) = *((void *)v7 + 2);
    }

    *(_DWORD *)(a3 + 24) = 1;
    if (v6 != -1) {
      ((void (*)(char *, _BYTE *))off_189B8B2E0[v6])(&v15, v11);
    }
  }

  else
  {
LABEL_27:
    *(_DWORD *)(a3 + 24) = 0;
  }

unint64_t swift::GenericMetadataBuilder<InProcessReaderWriter>::Dumper<void (*)(char const*,...)>::dumpValueMetadata@<X0>( void (**a1)(const char *, ...)@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *(int **)(a3 + 8);
  swift::GenericMetadataBuilder<InProcessReaderWriter>::Dumper<void (*)(char const*,...)>::printPointer<swift::TargetMetadata<swift::InProcess> const>( a1,  "  description: ",  v7,  "\n");
  if ((*((_BYTE *)v7 + 2) & 0x10) != 0) {
    swift::GenericMetadataBuilder<InProcessReaderWriter>::Dumper<void (*)(char const*,...)>::printPointer<swift::TargetMetadata<swift::InProcess> const>( a1,  "  layout string: ",  *(void **)(a3 - 16),  "\n");
  }
  uint64_t v8 = (char *)v7 + v7[2] + 8;
  swift::GenericMetadataBuilder<InProcessReaderWriter>::Dumper<void (*)(char const*,...)>::printPointer<swift::TargetMetadata<swift::InProcess> const>( a1,  "  name: ",  v8,  "\n");
  unint64_t result = ((uint64_t (*)(const char *, ...))*a1)("        %s\n", v8);
  unint64_t v13 = *a2;
  if (*a2 == 512)
  {
    unint64_t v14 = a2[1];
    uint64_t v15 = *(unsigned int *)(v14 + 24);
    if ((_DWORD)v15 && *(_DWORD *)(v14 + 20))
    {
      unint64_t v16 = 0LL;
      int v17 = &a2[v15];
      do
      {
        unint64_t result = ((uint64_t (*)(const char *, ...))*a1)("  fieldOffset[%u]: %u\n", v16, *((_DWORD *)v17 + v16));
        ++v16;
      }

      while (v16 < *(unsigned int *)(v14 + 20));
    }
  }

  else if (v13 <= 0x7FF && (v13 - 515) >= 0xFFFFFFFE && HIBYTE(*(_DWORD *)(a2[1] + 20)))
  {
    unint64_t v18 = (unint64_t)*(unsigned int *)(a2[1] + 20) >> 24;
    (*a1)("  offset: %u\n", HIBYTE(*(_DWORD *)(a2[1] + 20)));
    unint64_t result = ((uint64_t (*)(const char *, ...))*a1)("  payload size: %llu\n", a2[v18]);
  }

  int v19 = *v7;
  if ((*v7 & 0x80) != 0)
  {
    int v20 = *v7 & 0x1F;
    if (v20 == 16)
    {
      int v21 = *((unsigned __int16 *)v7 + 26);
      if ((v19 & 0x20000000) != 0)
      {
        unint64_t result = swift::getResilientImmediateMembersOffset((uint64_t)v7, v10, v11, v12);
        if (!v21) {
          goto LABEL_39;
        }
      }

      else
      {
        if ((v19 & 0x10000000) != 0)
        {
          int v22 = 0;
          unsigned int v23 = v7 + 6;
        }

        else
        {
          int v22 = v7[7];
          unsigned int v23 = v7 + 8;
        }

        unint64_t result = (v22 - *v23);
        if (!*((_WORD *)v7 + 26)) {
          goto LABEL_39;
        }
      }
    }

    else
    {
      if (v20 != 17 && v20 != 18) {
        abort();
      }
      int v21 = *((unsigned __int16 *)v7 + 18);
      unint64_t result = 2LL;
      if (!*((_WORD *)v7 + 18)) {
        goto LABEL_39;
      }
    }

    uint64_t v24 = 0LL;
    uint64_t v25 = a3 + 8LL * (int)result;
    do
    {
      uint64_t v30 = *(void **)(v25 + 8 * v24);
      int v31 = 0;
      (*a1)("  genericArg[%u]: ", v24);
      __int16 v26 = v30;
      InProcessReaderWriter::getSymbolInfo<swift::TargetMetadata<swift::InProcess> const>(v30, (uint64_t)v32);
      uint64_t v27 = v32;
      if (v33 < 0) {
        uint64_t v27 = (void **)v32[0];
      }
      if (v35 >= 0) {
        p_p = (const char *)&__p;
      }
      else {
        p_p = (const char *)__p;
      }
      (*a1)("%#llx - %s (%s + %llu)", v26, (const char *)v27, p_p, v36);
      if (v35 < 0)
      {
        operator delete(__p);
        if (v33 < 0) {
LABEL_38:
        }
          operator delete(v32[0]);
      }

      else if (v33 < 0)
      {
        goto LABEL_38;
      }

      unint64_t result = ((uint64_t (*)(const char *))*a1)("\n");
      if (v31 != -1) {
        unint64_t result = ((uint64_t (*)(void **, void **))off_189B8B2C0[v31])(v32, &v30);
      }
      ++v24;
    }

    while (v21 != v24);
  }

unint64_t InProcessReaderWriter::getSymbolInfo<swift::TargetMetadata<swift::InProcess> const>@<X0>( void *a1@<X1>, uint64_t a2@<X8>)
{
  unint64_t result = dladdr(a1, &__s);
  if (!(_DWORD)result)
  {
    strcpy((char *)(a2 + 23), "\t<unknown>");
    strcpy((char *)a2, "<unknown>");
    *(_BYTE *)(a2 + 47) = 9;
    *(void *)(a2 + 48) = 0LL;
    return result;
  }

  dli_fname = __s.dli_fname;
  if (__s.dli_fname)
  {
    dli_sname = __s.dli_sname;
    if (__s.dli_sname) {
      goto LABEL_4;
    }
  }

  else
  {
    dli_fname = "<unknown>";
    __s.dli_fname = "<unknown>";
    dli_sname = __s.dli_sname;
    if (__s.dli_sname) {
      goto LABEL_4;
    }
  }

  dli_sname = "<unknown>";
  __s.dli_sname = "<unknown>";
LABEL_4:
  uint64_t v7 = strrchr(dli_fname, 47);
  if (v7) {
    dli_fname = v7 + 1;
  }
  size_t v8 = strlen(dli_sname);
  if (v8 > 0x7FFFFFFFFFFFFFF7LL) {
LABEL_26:
  }
    abort();
  size_t v9 = v8;
  if (v8 >= 0x17)
  {
    uint64_t v11 = (v8 & 0xFFFFFFFFFFFFFFF8LL) + 8;
    if ((v8 | 7) != 0x17) {
      uint64_t v11 = v8 | 7;
    }
    uint64_t v12 = v11 + 1;
    uint64_t v10 = operator new(v11 + 1);
    *(void *)(a2 + 8) = v9;
    *(void *)(a2 + 16) = v12 | 0x8000000000000000LL;
    *(void *)a2 = v10;
    goto LABEL_14;
  }

  *(_BYTE *)(a2 + 23) = v8;
  uint64_t v10 = (void *)a2;
  if (v8) {
LABEL_14:
  }
    memmove(v10, dli_sname, v9);
  *((_BYTE *)v10 + v9) = 0;
  unint64_t result = strlen(dli_fname);
  if (result > 0x7FFFFFFFFFFFFFF7LL) {
    goto LABEL_26;
  }
  size_t v13 = result;
  if (result >= 0x17)
  {
    uint64_t v15 = (result & 0xFFFFFFFFFFFFFFF8LL) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v15 = result | 7;
    }
    uint64_t v16 = v15 + 1;
    unint64_t v14 = operator new(v15 + 1);
    *(void *)(a2 + 32) = v13;
    *(void *)(a2 + 40) = v16 | 0x8000000000000000LL;
    *(void *)(a2 + 24) = v14;
  }

  else
  {
    unint64_t v14 = (void *)(a2 + 24);
    *(_BYTE *)(a2 + 47) = result;
    if (!result) {
      goto LABEL_23;
    }
  }

  unint64_t result = (unint64_t)memmove(v14, dli_fname, v13);
LABEL_23:
  *((_BYTE *)v14 + v13) = 0;
  *(void *)(a2 + 48) = (_BYTE *)a1 - (char *)__s.dli_fbase;
  return result;
}

uint64_t swift::GenericMetadataBuilder<InProcessReaderWriter>::Dumper<void (*)(char const*,...)>::dumpVWTFunctionField<swift::OpaqueValue * (* const)(swift::TargetValueBuffer<swift::InProcess> *,swift::TargetValueBuffer<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*)>@<X0>( void (**a1)(const char *, ...)@<X0>, const char *a2@<X2>, void **a3@<X3>, uint64_t a4@<X8>)
{
  int v6 = *a3;
  (*a1)("    %s: ", a2);
  InProcessReaderWriter::getSymbolInfo<swift::TargetMetadata<swift::InProcess> const>(v6, (uint64_t)v10);
  if (v11 >= 0) {
    uint64_t v7 = v10;
  }
  else {
    uint64_t v7 = (void **)v10[0];
  }
  p_p = (const char *)&__p;
  if (v13 < 0) {
    p_p = (const char *)__p;
  }
  (*a1)("%#llx - %s (%s + %llu)", v6, (const char *)v7, p_p, v14);
  if (v13 < 0)
  {
    operator delete(__p);
    if ((v11 & 0x80000000) == 0) {
      goto LABEL_8;
    }
LABEL_10:
    operator delete(v10[0]);
    goto LABEL_8;
  }

  if (v11 < 0) {
    goto LABEL_10;
  }
LABEL_8:
  uint64_t result = ((uint64_t (*)(const char *))*a1)("\n");
  *(_DWORD *)(a4 + 24) = 0;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN21InProcessReaderWriter6BufferIKcEEN5swift12BuilderErrorEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSB_SD_EEEEEEDcSH_DpT0_( uint64_t a1, uint64_t a2)
{
}

swift::BuilderError *swift::BuilderError::BuilderError(swift::BuilderError *this, const char *__format, ...)
{
  *(void *)this = 0LL;
  *((void *)this + 1) = 0LL;
  *((void *)this + 2) = 0LL;
  int v4 = vsnprintf(0LL, 0LL, __format, va);
  if (v4 < 0) {
    goto LABEL_6;
  }
  size_t v5 = (v4 + 1);
  int v6 = (char *)malloc(v5);
  if (!v6) {
    goto LABEL_6;
  }
  uint64_t v7 = v6;
  if (vsnprintf(v6, v5, __format, va) < 0)
  {
    free(v7);
LABEL_6:
    size_t v8 = 0LL;
    uint64_t v7 = "<could not create error string>";
    goto LABEL_7;
  }

  size_t v8 = v7;
LABEL_7:
  MEMORY[0x186E0BC88](this, v7);
  free(v8);
  return this;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN21InProcessReaderWriter6BufferIKN5swift14TargetMetadataINSA_9InProcessEEEEENSA_12BuilderErrorEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSF_SG_EEEEEEDcSK_DpT0_( uint64_t a1, uint64_t a2)
{
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN21InProcessReaderWriter6BufferIKN5swift23TargetValueWitnessTableINSA_9InProcessEEEEENSA_12BuilderErrorEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSF_SG_EEEEEEDcSK_DpT0_( uint64_t a1, uint64_t a2)
{
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN5swift12BuilderErrorEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS8_SA_EEEEEEDcSE_DpT0_( uint64_t a1, uint64_t a2)
{
}

void swift::GenericMetadataBuilder<InProcessReaderWriter>::extraDataSize( InProcessReaderWriter **a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  size_t v8 = (char *)a2 + a2[2] + 8;
  if (!v8) {
    size_t v8 = "<unknown>";
  }
  InProcessReaderWriter::log( *a1,  "GenericMetadataBuilder.h",  835,  "extraDataSize",  "Getting extra data size for %s",  v8);
  int v9 = *a2;
  int v10 = *a2 & 0x1F;
  if ((*(_BYTE *)(a3 + 8) & 1) != 0)
  {
    unint64_t v12 = 8 * (*(unsigned __int16 *)(a3 + 22) + (unint64_t)*(unsigned __int16 *)(a3 + 20));
    InProcessReaderWriter::log( *a1,  "GenericMetadataBuilder.h",  853,  "extraDataSize",  "Value type descriptor has extra data pattern, extra data size: %zu");
    goto LABEL_12;
  }

  int v10 = *a2 & 0x1F;
  if (v10 == 18)
  {
    if (HIBYTE(a2[5]))
    {
      unint64_t v12 = (((unint64_t)a2[5] >> 21) & 0x7F8) - 16;
      InProcessReaderWriter::log( *a1,  "GenericMetadataBuilder.h",  890,  "extraDataSize",  "Enum descriptor has payload size offset, computed extra data size: %zu");
      goto LABEL_12;
    }

    if ((v9 & 0x80) != 0)
    {
      unint64_t v12 = 8LL * *((unsigned __int16 *)a2 + 20);
      InProcessReaderWriter::log( *a1,  "GenericMetadataBuilder.h",  899,  "extraDataSize",  "Enum descriptor has no payload size offset, computed extra data size from generic arguments, extra data size: %zu");
      goto LABEL_12;
    }

    int v10 = 18;
  }

  else if (v10 == 17)
  {
    uint64_t v11 = a2[6];
    if ((_DWORD)v11)
    {
      unint64_t v12 = (8 * v11 + 4LL * a2[5] - 9) & 0xFFFFFFFFFFFFFFF8LL;
      InProcessReaderWriter::log( *a1,  "GenericMetadataBuilder.h",  869,  "extraDataSize",  "Struct descriptor has field offset vector, computed extra data size: %zu");
LABEL_12:
      *(void *)a4 = v12;
      *(_DWORD *)(a4 + 24) = 0;
      return;
    }

    if ((v9 & 0x80) != 0)
    {
      unint64_t v12 = 8LL * *((unsigned __int16 *)a2 + 20);
      InProcessReaderWriter::log( *a1,  "GenericMetadataBuilder.h",  878,  "extraDataSize",  "Struct descriptor has no field offset vector, computed extra data size from generic arguments, extra data size: %zu");
      goto LABEL_12;
    }

    int v10 = 17;
  }

InProcessReaderWriter **swift::GenericMetadataBuilder<InProcessReaderWriter>::GenericMetadataBuilder( InProcessReaderWriter **a1, InProcessReaderWriter *a2)
{
  *a1 = a2;
  uint64_t v4 = (uint64_t)(a1 + 29);
  InProcessReaderWriter::getSymbolPointer<char>(a2, "_swift_pod_copy", (uint64_t)(a1 + 1));
  InProcessReaderWriter::getSymbolPointer<char>(a2, "_swift_pod_destroy", (uint64_t)(a1 + 5));
  InProcessReaderWriter::getSymbolPointer<char>( a2,  "_swift_pod_direct_initializeBufferWithCopyOfBuffer",  (uint64_t)(a1 + 9));
  InProcessReaderWriter::getSymbolPointer<char>( a2,  "_swift_pod_indirect_initializeBufferWithCopyOfBuffer",  (uint64_t)(a1 + 13));
  InProcessReaderWriter::getSymbolPointer<char>(a2, "$sBi8_WV", (uint64_t)(a1 + 17));
  InProcessReaderWriter::getSymbolPointer<char>(a2, "$sBi16_WV", (uint64_t)(a1 + 21));
  InProcessReaderWriter::getSymbolPointer<char>(a2, "$sBi32_WV", (uint64_t)(a1 + 25));
  InProcessReaderWriter::getSymbolPointer<char>(a2, "$sBi64_WV", v4);
  InProcessReaderWriter::getSymbolPointer<char>(a2, "$sBi128_WV", (uint64_t)(a1 + 33));
  InProcessReaderWriter::getSymbolPointer<char>(a2, "$sBi256_WV", (uint64_t)(a1 + 37));
  InProcessReaderWriter::getSymbolPointer<char>(a2, "$sBi512_WV", (uint64_t)(a1 + 41));
  return a1;
}

void InProcessReaderWriter::getSymbolPointer<char>( InProcessReaderWriter *a1@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  int v6 = dlsym((void *)0xFFFFFFFFFFFFFFFDLL, a2);
  InProcessReaderWriter::log( a1,  "GenericMetadataBuilder.cpp",  233,  "getSymbolPointer",  "getSymbolPointer(%s) -> %p",  a2,  v6);
  if (v6)
  {
    *(void *)a3 = v6;
    *(_DWORD *)(a3 + 24) = 0;
  }

  else
  {
    swift::BuilderError::BuilderError((swift::BuilderError *)__p, "dlsym could not find symbol '%s'", a2);
    if (SHIBYTE(v9) < 0)
    {
      std::string::__init_copy_ctor_external( (std::string *)a3,  (const std::string::value_type *)__p[0],  (std::string::size_type)__p[1]);
      int v7 = SHIBYTE(v9);
      *(_DWORD *)(a3 + 24) = 1;
      if (v7 < 0) {
        operator delete(__p[0]);
      }
    }

    else
    {
      *(_OWORD *)a3 = *(_OWORD *)__p;
      *(void *)(a3 + 16) = v9;
      *(_DWORD *)(a3 + 24) = 1;
    }
  }

void InProcessReaderWriter::log( InProcessReaderWriter *this, const char *a2, int a3, const char *a4, const char *a5, ...)
{
  if (swift::runtime::environment::initializeToken != -1) {
    dispatch_once_f( &swift::runtime::environment::initializeToken,  0LL,  (dispatch_function_t)swift::runtime::environment::initialize);
  }
  if (swift::runtime::environment::SWIFT_DEBUG_VALIDATE_EXTERNAL_GENERIC_METADATA_BUILDER_variable >= 2u)
  {
    uint64_t v9 = (FILE **)MEMORY[0x1895F89D0];
    fprintf((FILE *)*MEMORY[0x1895F89D0], "%s:%u:%s: ", a2, a3, a4);
    vfprintf(*v9, a5, va);
    fputs("\n", *v9);
  }

unsigned int *swift::GenericMetadataBuilder<InProcessReaderWriter>::~GenericMetadataBuilder( unsigned int *a1)
{
  uint64_t v2 = a1[88];
  if ((_DWORD)v2 != -1) {
    ((void (*)(char *, unsigned int *))off_189B8B2D0[v2])(&v14, a1 + 82);
  }
  a1[88] = -1;
  uint64_t v3 = a1[80];
  if ((_DWORD)v3 != -1) {
    ((void (*)(char *, unsigned int *))off_189B8B2D0[v3])(&v15, a1 + 74);
  }
  a1[80] = -1;
  uint64_t v4 = a1[72];
  if ((_DWORD)v4 != -1) {
    ((void (*)(char *, unsigned int *))off_189B8B2D0[v4])(&v16, a1 + 66);
  }
  a1[72] = -1;
  uint64_t v5 = a1[64];
  if ((_DWORD)v5 != -1) {
    ((void (*)(char *, unsigned int *))off_189B8B2D0[v5])(&v17, a1 + 58);
  }
  a1[64] = -1;
  uint64_t v6 = a1[56];
  if ((_DWORD)v6 != -1) {
    ((void (*)(char *, unsigned int *))off_189B8B2D0[v6])(&v18, a1 + 50);
  }
  a1[56] = -1;
  uint64_t v7 = a1[48];
  if ((_DWORD)v7 != -1) {
    ((void (*)(char *, unsigned int *))off_189B8B2D0[v7])(&v19, a1 + 42);
  }
  a1[48] = -1;
  uint64_t v8 = a1[40];
  if ((_DWORD)v8 != -1) {
    ((void (*)(char *, unsigned int *))off_189B8B2D0[v8])(&v20, a1 + 34);
  }
  a1[40] = -1;
  uint64_t v9 = a1[32];
  if ((_DWORD)v9 != -1) {
    ((void (*)(char *, unsigned int *))off_189B8B2B0[v9])(&v21, a1 + 26);
  }
  a1[32] = -1;
  uint64_t v10 = a1[24];
  if ((_DWORD)v10 != -1) {
    ((void (*)(char *, unsigned int *))off_189B8B2B0[v10])(&v22, a1 + 18);
  }
  a1[24] = -1;
  uint64_t v11 = a1[16];
  if ((_DWORD)v11 != -1) {
    ((void (*)(char *, unsigned int *))off_189B8B2B0[v11])(&v23, a1 + 10);
  }
  a1[16] = -1;
  uint64_t v12 = a1[8];
  if ((_DWORD)v12 != -1) {
    ((void (*)(char *, unsigned int *))off_189B8B2B0[v12])(&v24, a1 + 2);
  }
  a1[8] = -1;
  return a1;
}

void swift::GenericMetadataBuilder<InProcessReaderWriter>::buildGenericValueMetadata( InProcessReaderWriter **a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  size_t v13 = a6 + 32;
  InProcessReaderWriter::log( *a1,  "GenericMetadataBuilder.h",  424,  "buildGenericValueMetadata",  "Extra data size is %zu, allocating %zu bytes total",  a6,  a6 + 32);
  __int16 v27 = 18;
  char v15 = swift::MetadataAllocator::Allocate((swift::MetadataAllocator *)&v27, v13, (const char *)8, v14);
  swift::GenericMetadataBuilder<InProcessReaderWriter>::initializeValueMetadataFromPattern( a1,  (uint64_t)v15,  16LL,  (unint64_t)a2,  a5,  (uint64_t)&v27);
  if (v30)
  {
    if (v30 == 1) {
      char v16 = &v27;
    }
    else {
      char v16 = 0LL;
    }
    uint64_t v17 = (uint64_t)&v29;
    if (v30 != 1) {
      uint64_t v17 = 23LL;
    }
    if (*(char *)v17 < 0)
    {
      uint64_t v21 = 8LL;
      if (v30 == 1) {
        uint64_t v21 = (uint64_t)&v28;
      }
      std::string::__init_copy_ctor_external((std::string *)a7, *(const std::string::value_type **)v16, *(void *)v21);
    }

    else
    {
      *(_OWORD *)a7 = *(_OWORD *)v16;
      *(void *)(a7 + 16) = *((void *)v16 + 2);
    }

    *(_DWORD *)(a7 + 24) = 1;
    goto LABEL_27;
  }

  swift::GenericMetadataBuilder<InProcessReaderWriter>::installGenericArguments( a1,  (uint64_t)v15,  16LL,  a2,  a3,  a4,  (uint64_t)v23);
  int v18 = v26;
  if (!v26)
  {
    *(void *)a7 = v15;
    *(void *)(a7 + 8) = v13;
    *(void *)(a7 + 16) = 16LL;
    *(_DWORD *)(a7 + 24) = 0;
LABEL_26:
    ((void (*)(char *, _BYTE *))off_189B8B2E0[v18])(&v31, v23);
    goto LABEL_27;
  }

  if (v26 == 1) {
    char v19 = v23;
  }
  else {
    char v19 = 0LL;
  }
  uint64_t v20 = (uint64_t)&v25;
  if (v26 != 1) {
    uint64_t v20 = 23LL;
  }
  if (*(char *)v20 < 0)
  {
    uint64_t v22 = 8LL;
    if (v26 == 1) {
      uint64_t v22 = (uint64_t)&v24;
    }
    std::string::__init_copy_ctor_external((std::string *)a7, *(const std::string::value_type **)v19, *(void *)v22);
    int v18 = v26;
  }

  else
  {
    *(_OWORD *)a7 = *(_OWORD *)v19;
    *(void *)(a7 + 16) = *((void *)v19 + 2);
  }

  *(_DWORD *)(a7 + 24) = 1;
  if (v18 != -1) {
    goto LABEL_26;
  }
LABEL_27:
  if (v30 != -1) {
    ((void (*)(_BYTE *, __int16 *))off_189B8B2E0[v30])(v23, &v27);
  }
}

void swift::GenericMetadataBuilder<InProcessReaderWriter>::initializeValueMetadataFromPattern( InProcessReaderWriter **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, unint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v10 = (unint64_t *)(a2 + a3);
  if ((*(_BYTE *)(a5 + 8) & 1) == 0) {
    goto LABEL_11;
  }
  bzero(v10 + 2, 8LL * *(unsigned __int16 *)(a5 + 20));
  InProcessReaderWriter::log( *a1,  "GenericMetadataBuilder.h",  289,  "initializeValueMetadataFromPattern",  "Writing %hu words of extra data from offset %hu",  *(unsigned __int16 *)(a5 + 22),  *(unsigned __int16 *)(a5 + 20));
  uint64_t v13 = *(int *)(a5 + 16);
  uint64_t v14 = *(unsigned __int16 *)(a5 + 22);
  uint64_t v15 = (_DWORD)v13 ? v13 + a5 + 16 : 0LL;
  if (!*(_WORD *)(a5 + 22)) {
    goto LABEL_11;
  }
  uint64_t v16 = *(unsigned __int16 *)(a5 + 20);
  if (v14 < 0xA || (unint64_t)(a2 + a3 + 8 * v16 - v15 + 16) < 0x20)
  {
    uint64_t v17 = 0LL;
LABEL_9:
    int v18 = (void *)(a3 + 8 * (v17 + v16) + a2 + 16);
    char v19 = (uint64_t *)(v15 + 8 * v17);
    uint64_t v20 = v14 - v17;
    do
    {
      uint64_t v21 = *v19++;
      *v18++ = v21;
      --v20;
    }

    while (v20);
    goto LABEL_11;
  }

  uint64_t v17 = (unsigned __int16)v14 & 0xFFFC;
  uint64_t v24 = (__int128 *)(v15 + 16);
  char v25 = (_OWORD *)(a3 + 8 * v16 + a2 + 32);
  uint64_t v26 = v17;
  do
  {
    __int128 v27 = *v24;
    *(v25 - 1) = *(v24 - 1);
    *char v25 = v27;
    v24 += 2;
    v25 += 2;
    v26 -= 4LL;
  }

  while (v26);
  if (v17 != v14) {
    goto LABEL_9;
  }
LABEL_11:
  uint64_t v22 = *(int *)(a5 + 12);
  if ((_DWORD)v22)
  {
    char v23 = (void *)((v22 & 0xFFFFFFFFFFFFFFFELL) + a5 + 12);
    if ((v22 & 1) != 0) {
      char v23 = (void *)*v23;
    }
  }

  else
  {
    char v23 = 0LL;
  }

  InProcessReaderWriter::log( *a1,  "GenericMetadataBuilder.h",  314,  "initializeValueMetadataFromPattern",  "Setting initial value witnesses");
  *(v10 - 1) = (unint64_t)v23;
  InProcessReaderWriter::log( *a1,  "GenericMetadataBuilder.h",  322,  "initializeValueMetadataFromPattern",  "Setting metadata kind %#x",  *(_DWORD *)(a5 + 8) >> 21);
  *uint64_t v10 = (unint64_t)*(unsigned int *)(a5 + 8) >> 21;
  InProcessReaderWriter::log( *a1,  "GenericMetadataBuilder.h",  326,  "initializeValueMetadataFromPattern",  "Setting descriptor");
  v10[1] = a4;
  *(_DWORD *)(a6 + 24) = 0;
}

void swift::GenericMetadataBuilder<InProcessReaderWriter>::installGenericArguments( InProcessReaderWriter **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, _DWORD *a4@<X4>, uint64_t a5@<X5>, unint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v14 = a4 + 2;
  uint64_t v15 = (char *)a4 + a4[2] + 8;
  if (!v15) {
    uint64_t v15 = "<unknown>";
  }
  InProcessReaderWriter::log(*a1, "GenericMetadataBuilder.h", 343, "installGenericArguments", "Building %s", v15);
  if ((*a4 & 0x80) != 0)
  {
    uint64_t v16 = 0LL;
    switch(*a4 & 0x1F)
    {
      case 1:
        uint64_t v16 = v14;
        break;
      case 2:
      case 4:
        uint64_t v16 = a4 + 1;
        break;
      case 0x10:
        uint64_t v16 = a4 + 12;
        break;
      case 0x11:
      case 0x12:
        uint64_t v16 = a4 + 8;
        break;
      default:
        break;
    }
  }

  else
  {
    uint64_t v16 = 0LL;
  }

  if ((*a4 & 0x1Fu) - 17 >= 2) {
    abort();
  }
  unint64_t v17 = *((unsigned __int16 *)v16 + 4);
  if (a6 >= v17)
  {
    InProcessReaderWriter::log( *a1,  "GenericMetadataBuilder.h",  362,  "installGenericArguments",  "Installing %hu generic arguments at offset %d",  v17,  2);
    uint64_t v18 = *((unsigned __int16 *)v16 + 4);
    if (*((_WORD *)v16 + 4))
    {
      if (v18 >= 8 && (unint64_t)(a2 + a3 - a5 + 16) >= 0x20)
      {
        uint64_t v19 = (unsigned __int16)v18 & 0xFFFC;
        char v25 = (_OWORD *)(a3 + a2 + 32);
        uint64_t v26 = (__int128 *)(a5 + 16);
        uint64_t v27 = v19;
        do
        {
          __int128 v28 = *v26;
          *(v25 - 1) = *(v26 - 1);
          *char v25 = v28;
          v25 += 2;
          v26 += 2;
          v27 -= 4LL;
        }

        while (v27);
        if (v19 == v18) {
          goto LABEL_20;
        }
      }

      else
      {
        uint64_t v19 = 0LL;
      }

      uint64_t v20 = (void *)(a3 + a2 + 8 * v19 + 16);
      uint64_t v21 = (uint64_t *)(a5 + 8 * v19);
      uint64_t v22 = v18 - v19;
      do
      {
        uint64_t v23 = *v21++;
        *v20++ = v23;
        --v22;
      }

      while (v22);
    }

uint64_t swift::BuilderErrorOr<std::monostate>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 24);
  uint64_t v4 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)v4 == -1) {
      return a1;
    }
LABEL_5:
    uint64_t v6 = a1;
    ((void (*)(uint64_t *, uint64_t, uint64_t))off_189B8B2F0[v4])(&v6, a1, a2);
    return a1;
  }

  if ((_DWORD)v4 != -1) {
    goto LABEL_5;
  }
  ((void (*)(char *, uint64_t, uint64_t))off_189B8B2E0[v3])(&v7, a1, a2);
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN5swift12BuilderErrorEEEEE16__generic_assignB8nn180100INS0_17__move_assignmentISB_LNS0_6_TraitE1EEEEEvOT_EUlRSH_OT0_E_JRNS0_6__baseILSF_1EJS8_SA_EEEOSP_EEEDcSH_DpT0_( uint64_t result)
{
  uint64_t v1 = *(void *)result;
  uint64_t v2 = *(unsigned int *)(*(void *)result + 24LL);
  if ((_DWORD)v2 != -1)
  {
    if (!(_DWORD)v2) {
      return result;
    }
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_189B8B2E0[v2])(&v3, v1);
  }

  *(_DWORD *)(v1 + 24) = 0;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN5swift12BuilderErrorEEEEE16__generic_assignB8nn180100INS0_17__move_assignmentISB_LNS0_6_TraitE1EEEEEvOT_EUlRSH_OT0_E_JRNS0_6__baseILSF_1EJS8_SA_EEEOSP_EEEDcSH_DpT0_( __n128 **a1, uint64_t a2, __n128 *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (*a1)[1].n128_u32[2];
  if ((_DWORD)v5 == -1) {
    goto LABEL_7;
  }
  if ((_DWORD)v5 != 1)
  {
    ((void (*)(char *, __n128 *))off_189B8B2E0[v5])(&v8, v4);
LABEL_7:
    v4[1].n128_u32[2] = -1;
    __n128 result = *a3;
    v4[1].n128_u64[0] = a3[1].n128_u64[0];
    *uint64_t v4 = result;
    a3->n128_u64[1] = 0LL;
    a3[1].n128_u64[0] = 0LL;
    a3->n128_u64[0] = 0LL;
    v4[1].n128_u32[2] = 1;
    return result;
  }

  __n128 result = *a3;
  *(void *)(a2 + 16) = a3[1].n128_u64[0];
  *(__n128 *)a2 = result;
  a3[1].n128_u8[7] = 0;
  a3->n128_u8[0] = 0;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN5swift22GenericMetadataBuilderI21InProcessReaderWriterE19ConstructedMetadataENS8_12BuilderErrorEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSC_SD_EEEEEEDcSH_DpT0_( uint64_t a1, uint64_t a2)
{
}

void swift::GenericMetadataBuilder<InProcessReaderWriter>::initializeGenericMetadata( InProcessReaderWriter **a1@<X0>, uint64_t a2@<X1>, const char *a3@<X2>, char *a4@<X3>, uint64_t a5@<X8>)
{
  if (a2) {
    char v7 = (void *)(a2 + 16);
  }
  else {
    char v7 = 0LL;
  }
  if (!a2 || ((unsigned int v8 = *v7 - 515, *v7 <= 0x7FFuLL) ? (v9 = v8 > 0xFFFFFFFC) : (v9 = 0), !v9))
  {
LABEL_34:
    unint64_t v22 = *(void *)(a2 + 16);
    if (v22 > 0x7FF) {
      LODWORD(v22) = 0;
    }
    swift::BuilderError::BuilderError( (swift::BuilderError *)&__p,  "Don't know how to initialize metadata kind %#x",  v22);
    if ((char)__p.__r_.__value_.__s.__size_ < 0)
    {
      std::string::__init_copy_ctor_external( (std::string *)a5,  __p.__r_.__value_.__l.__data_,  __p.__r_.__value_.__l.__size_);
      int size = (char)__p.__r_.__value_.__s.__size_;
      *(_DWORD *)(a5 + 24) = 1;
      if (size < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }

    else
    {
      *(std::string *)a5 = __p;
      *(_DWORD *)(a5 + 24) = 1;
    }

    return;
  }

  uint64_t v10 = (_DWORD *)v7[1];
  int v11 = *v10 & 0x1F;
  if (v11 == 18 || v11 == 17)
  {
    uint64_t v12 = v10 + 7;
  }

  else
  {
    if (v11 != 16) {
      abort();
    }
    uint64_t v12 = v10 + 11;
  }

  uint64_t v13 = (int)v12[1];
  uint64_t v14 = (char *)v12 + v13 + 4;
  if (!(_DWORD)v13) {
    uint64_t v14 = 0LL;
  }
  uint64_t v15 = *((int *)v14 + 1);
  uint64_t v16 = -4LL - (void)v14;
  if ((_DWORD)v15) {
    BOOL v17 = v15 == v16;
  }
  else {
    BOOL v17 = 1;
  }
  if (v17)
  {
    InProcessReaderWriter::log( *a1,  "GenericMetadataBuilder.h",  471,  "initializeGenericMetadata",  "Type has no completion function, skipping initialization");
    goto LABEL_23;
  }

  if (*v7 == 512LL)
  {
    swift::GenericMetadataBuilder<InProcessReaderWriter>::initializeStructMetadata(a1, a2, a3, (uint64_t)v7, a4, &__p);
    int v18 = v27;
    if (v27)
    {
      if (v27 == 1) {
        p_p = &__p;
      }
      else {
        p_p = 0LL;
      }
      uint64_t v20 = (uint64_t)&__p.__r_.__value_.__r.__words[2] + 7;
      if (v27 != 1) {
        uint64_t v20 = 23LL;
      }
      if (*(char *)v20 < 0)
      {
        uint64_t v21 = (const std::string::value_type *)p_p->__r_.__value_.__r.__words[0];
LABEL_53:
        BOOL v17 = v18 == 1;
        p_int size = (std::string::size_type *)8;
        if (v17) {
          p_int size = &__p.__r_.__value_.__l.__size_;
        }
        std::string::__init_copy_ctor_external((std::string *)a5, v21, *p_size);
        int v18 = v27;
        goto LABEL_56;
      }

      goto LABEL_51;
    }

void swift::GenericMetadataBuilder<InProcessReaderWriter>::initializeStructMetadata( InProcessReaderWriter **a1@<X0>, uint64_t a2@<X1>, const char *a3@<X2>, uint64_t a4@<X3>, char *a5@<X4>, std::string *a6@<X8>)
{
  uint64_t v9 = *(void *)(a4 + 8);
  uint64_t v11 = *(int *)(v9 + 16);
  uint64_t v10 = v9 + 16;
  uint64_t v12 = v11 + v10;
  if ((_DWORD)v11) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0LL;
  }
  uint64_t v14 = *(unsigned int *)(v13 + 12);
  InProcessReaderWriter::log(*a1, "GenericMetadataBuilder.h", 690, "initializeStructMetadata", "%zu fields", v14);
  *(void *)&__int128 v82 = 0LL;
  if (!(_DWORD)v14)
  {
    int v40 = 0;
    uint64_t v39 = 0LL;
    unsigned int v43 = 0;
    unint64_t v17 = 0LL;
    int v41 = 0;
LABEL_47:
    int v44 = 0;
    int v45 = 0;
LABEL_49:
    LODWORD(v83) = v40 | v41 | v45 | v44;
    HIDWORD(v83) = v43;
    unint64_t v46 = (v39 + v17) & ~v17;
    if (v46 <= 1) {
      unint64_t v46 = 1LL;
    }
    *((void *)&v82 + 1) = v46;
    v47 = *(_OWORD **)(a4 - 8);
    InProcessReaderWriter::getSymbolInfo<swift::TargetMetadata<swift::InProcess> const>(v47, (uint64_t)&v70);
    if (v72 >= 0) {
      uint64_t v48 = (const char *)&v70;
    }
    else {
      uint64_t v48 = (const char *)v70;
    }
    p_p = (const char *)&__p;
    if (v74 < 0) {
      p_p = (const char *)__p;
    }
    InProcessReaderWriter::log( *a1,  "GenericMetadataBuilder.h",  776,  "initializeStructMetadata",  "Initializing new VWT from old VWT %#llx - %s (%s + %llu)",  v47,  v48,  p_p,  v75);
    if (v74 < 0)
    {
      operator delete(__p);
      if ((v72 & 0x80000000) == 0) {
        goto LABEL_58;
      }
    }

    else if ((v72 & 0x80000000) == 0)
    {
      goto LABEL_58;
    }

    operator delete(v70);
LABEL_58:
    LOWORD(v70) = 18;
    v51 = swift::MetadataAllocator::Allocate((swift::MetadataAllocator *)&v70, 0x58uLL, (const char *)8, v50);
    __int128 v52 = v47[1];
    *(_OWORD *)v51 = *v47;
    *((_OWORD *)v51 + 1) = v52;
    __int128 v53 = v47[2];
    __int128 v54 = v47[3];
    __int128 v55 = v47[4];
    *((void *)v51 + 10) = *((void *)v47 + 10);
    *((_OWORD *)v51 + 3) = v54;
    *((_OWORD *)v51 + 4) = v55;
    *((_OWORD *)v51 + 2) = v53;
    *(void *)v51 = *(void *)v47;
    *((void *)v51 + 1) = *((void *)v47 + 1);
    *((void *)v51 + 2) = *((void *)v47 + 2);
    *((void *)v51 + 3) = *((void *)v47 + 3);
    *((void *)v51 + 4) = *((void *)v47 + 4);
    *((void *)v51 + 5) = *((void *)v47 + 5);
    *((void *)v51 + 6) = *((void *)v47 + 6);
    *((void *)v51 + 7) = *((void *)v47 + 7);
    swift::GenericMetadataBuilder<InProcessReaderWriter>::installCommonValueWitnesses( (uint64_t)a1,  (uint64_t)&v82,  v51,  (uint64_t)&v70);
    int v56 = (int)__p;
    if ((_DWORD)__p)
    {
      if ((_DWORD)__p == 1) {
        __int128 v57 = &v70;
      }
      else {
        __int128 v57 = 0LL;
      }
      uint64_t v58 = (uint64_t)&v72;
      if ((_DWORD)__p != 1) {
        uint64_t v58 = 23LL;
      }
      if (*(char *)v58 < 0)
      {
        uint64_t v59 = 8LL;
        if ((_DWORD)__p == 1) {
          uint64_t v59 = (uint64_t)&v71;
        }
        std::string::__init_copy_ctor_external(a6, (const std::string::value_type *)*v57, *(void *)v59);
        int v56 = (int)__p;
      }

      else
      {
        *(_OWORD *)&a6->__r_.__value_.__l.__data_ = *(_OWORD *)v57;
        a6->__r_.__value_.__l.__cap_ = (std::string::size_type)v57[2];
      }

      LODWORD(a6[1].__r_.__value_.__l.__data_) = 1;
      if (v56 == -1) {
        return;
      }
    }

    else
    {
      *((_OWORD *)v51 + 4) = v82;
      *((void *)v51 + 10) = v83;
      *(void *)(a2 + 8) = v51;
      LODWORD(a6[1].__r_.__value_.__l.__data_) = 0;
    }

    ((void (*)(void *, void **))off_189B8B2E0[v56])(v80, &v70);
    return;
  }

  uint64_t v16 = 0LL;
  unint64_t v66 = 0LL;
  unint64_t v17 = 0LL;
  uint64_t v61 = a4 + 8LL * *(unsigned int *)(v10 + 8);
  v62 = a6;
  uint64_t v60 = a4;
  uint64_t v18 = v13 + 20;
  uint64_t v19 = (int *)(v13 + 24);
  unsigned int v63 = 0;
  char v64 = 1;
  char v65 = 1;
  while (1)
  {
    uint64_t v20 = *v19;
    uint64_t v21 = (_DWORD)v20 ? (void *)(v18 + v20 + 4) : 0LL;
    v70 = v21;
    LODWORD(__p) = 0;
    uint64_t v22 = *(v19 - 1);
    uint64_t v23 = (_DWORD)v22 ? (_BYTE *)(v18 + v22) : 0LL;
    v80[0] = v23;
    int v81 = 0;
    SymbolicMangledNameStringRef = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef(v23, v15);
    unint64_t v26 = v25;
    InProcessReaderWriter::log( *a1,  "GenericMetadataBuilder.h",  720,  "initializeStructMetadata",  "Examining field %u '%s' type '%.*s' (mangled name is %zu bytes)",  v16,  (const char *)v70,  v25,  SymbolicMangledNameStringRef,  v25);
    InProcessReaderWriter::getTypeByMangledName( (uint64_t)*a1,  a2,  a3,  a5,  (unsigned __int8 *)SymbolicMangledNameStringRef,  v26,  (uint64_t)&v76);
    int v27 = v79;
    if (v79)
    {
      std::string v28 = (const void **)&v76;
      if (v79 != 1) {
        std::string v28 = 0LL;
      }
      uint64_t v29 = (uint64_t)&v78;
      if (v79 != 1) {
        uint64_t v29 = 23LL;
      }
      if (*(char *)v29 < 0)
      {
        uint64_t v37 = (const std::string::value_type *)*v28;
        uint64_t v38 = (uint64_t)&v77;
        if (v79 != 1) {
          uint64_t v38 = 8LL;
        }
        uint64_t v30 = v62;
        std::string::__init_copy_ctor_external(v62, v37, *(void *)v38);
      }

      else
      {
        uint64_t v30 = v62;
        *(_OWORD *)&v62->__r_.__value_.__l.__data_ = *(_OWORD *)v28;
        v62->__r_.__value_.__l.__cap_ = (std::string::size_type)v28[2];
      }

      LODWORD(v30[1].__r_.__value_.__l.__data_) = 1;
    }

    else
    {
      char v31 = v76;
      InProcessReaderWriter::log( *a1,  "GenericMetadataBuilder.h",  727,  "initializeStructMetadata",  "Looked up field type metadata %p",  v76);
      uint64_t v32 = *(v31 - 1);
      unint64_t v33 = (v66 + *(unsigned __int8 *)(v32 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80);
      *(_DWORD *)(v61 + 4 * v16) = v33;
      unint64_t v66 = v33 + *(void *)(v32 + 64);
      int v35 = *(_DWORD *)(v32 + 80);
      unsigned int v34 = *(_DWORD *)(v32 + 84);
      v64 &= (v35 & 0x10000) == 0;
      v65 &= (v35 & 0x100000) == 0;
      unsigned int v36 = v63;
      if (v34 > v63) {
        unsigned int v36 = v34;
      }
      unsigned int v63 = v36;
    }

    if (v79 != -1) {
      ((void (*)(char *, void **))off_189B8B2C0[v79])(v84, &v76);
    }
    if (v81 != -1) {
      ((void (*)(void **, void *))off_189B8B2B0[v81])(&v76, v80);
    }
    if ((_DWORD)__p != -1) {
      ((void (*)(void *, void **))off_189B8B2B0[__p])(v80, &v70);
    }
    if (v27) {
      break;
    }
    v19 += 3;
    ++v16;
    v18 += 12LL;
    if (v14 == v16)
    {
      uint64_t v39 = v66;
      *(void *)&__int128 v82 = v66;
      int v40 = v17 & 0xFFECFFFF;
      if ((v64 & 1) != 0) {
        int v41 = 0;
      }
      else {
        int v41 = 0x10000;
      }
      if ((v65 & 1) == 0)
      {
        int v45 = 0x20000;
        int v44 = 0x100000;
        a6 = v62;
        a4 = v60;
        unsigned int v43 = v63;
        goto LABEL_49;
      }

      BOOL v42 = v66 >= 0x19 || v17 >= 8;
      a6 = v62;
      a4 = v60;
      unsigned int v43 = v63;
      if (v42)
      {
        int v44 = 0;
        int v45 = 0x20000;
        goto LABEL_49;
      }

      goto LABEL_47;
    }
  }

void InProcessReaderWriter::getTypeByMangledName( uint64_t a1@<X0>, uint64_t a2@<X1>, const char *a3@<X2>, char *a4@<X3>, unsigned __int8 *a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v11 = 0LL;
  if (a2) {
    uint64_t v12 = a2 + 16;
  }
  else {
    uint64_t v12 = 0LL;
  }
  int v26 = 0;
  uint64_t v13 = *(void *)v12;
  if (*(void *)v12 > 0x7FFuLL) {
    LODWORD(v13) = 0;
  }
  if ((int)v13 <= 514)
  {
    if ((v13 - 512) >= 3)
    {
      if ((_DWORD)v13) {
        goto LABEL_15;
      }
      if ((*(_BYTE *)(v12 + 32) & 2) == 0)
      {
        uint64_t v11 = 0LL;
        goto LABEL_15;
      }

      uint64_t v14 = (uint64_t *)(v12 + 64);
      goto LABEL_14;
    }

void swift::GenericMetadataBuilder<InProcessReaderWriter>::installCommonValueWitnesses( uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  int v7 = *(_DWORD *)(a2 + 16);
  if ((v7 & 0x10000) != 0)
  {
    if ((v7 & 0x100000) == 0)
    {
      InProcessReaderWriter::log( *(InProcessReaderWriter **)a1,  "GenericMetadataBuilder.h",  658,  "installCommonValueWitnesses",  "Is bitwise takable, setting pod_copy as initializeWithTake");
      uint64_t v16 = (void **)(a1 + 8);
      int v17 = *(_DWORD *)(a1 + 32);
      if (v17) {
        goto LABEL_13;
      }
      a3[4] = *v16;
    }

__n128 std::__function::__func<InProcessReaderWriter::getTypeByMangledName(InProcessReaderWriter::WritableData<swift::FullMetadata<swift::TargetMetadata<swift::InProcess>>>,swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::StringRef)::{lambda(unsigned int,unsigned int)#1},std::allocator<InProcessReaderWriter::getTypeByMangledName(InProcessReaderWriter::WritableData<swift::FullMetadata<swift::TargetMetadata<swift::InProcess>>>,swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::StringRef)::{lambda(unsigned int,unsigned int)#1}>,void const* ()(unsigned int,unsigned int)>::__clone( uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_189B8B320;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<InProcessReaderWriter::getTypeByMangledName(InProcessReaderWriter::WritableData<swift::FullMetadata<swift::TargetMetadata<swift::InProcess>>>,swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::StringRef)::{lambda(unsigned int,unsigned int)#1},std::allocator<InProcessReaderWriter::getTypeByMangledName(InProcessReaderWriter::WritableData<swift::FullMetadata<swift::TargetMetadata<swift::InProcess>>>,swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::StringRef)::{lambda(unsigned int,unsigned int)#1}>,void const* ()(unsigned int,unsigned int)>::__clone( uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_189B8B320;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

const void *std::__function::__func<InProcessReaderWriter::getTypeByMangledName(InProcessReaderWriter::WritableData<swift::FullMetadata<swift::TargetMetadata<swift::InProcess>>>,swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::StringRef)::{lambda(unsigned int,unsigned int)#1},std::allocator<InProcessReaderWriter::getTypeByMangledName(InProcessReaderWriter::WritableData<swift::FullMetadata<swift::TargetMetadata<swift::InProcess>>>,swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::StringRef)::{lambda(unsigned int,unsigned int)#1}>,void const* ()(unsigned int,unsigned int)>::operator()( uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  unsigned int v3 = *a2;
  unsigned int v4 = *a3;
  uint64_t v5 = *(InProcessReaderWriter **)(a1 + 16);
  Metadata = (const void *)swift::SubstGenericParametersFromMetadata::getMetadata( *(swift::SubstGenericParametersFromMetadata **)(a1 + 8),  *a2,  *a3);
  InProcessReaderWriter::log( v5,  "GenericMetadataBuilder.cpp",  256,  "operator()",  "substitutions.getMetadata(%u, %u).Ptr = %p",  v3,  v4,  Metadata);
  return Metadata;
}

__n128 std::__function::__func<InProcessReaderWriter::getTypeByMangledName(InProcessReaderWriter::WritableData<swift::FullMetadata<swift::TargetMetadata<swift::InProcess>>>,swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::StringRef)::{lambda(swift::TargetMetadata<swift::InProcess> const*,unsigned int)#1},std::allocator<InProcessReaderWriter::getTypeByMangledName(InProcessReaderWriter::WritableData<swift::FullMetadata<swift::TargetMetadata<swift::InProcess>>>,swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::StringRef)::{lambda(swift::TargetMetadata<swift::InProcess> const*,unsigned int)#1}>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone( uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_189B8B368;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<InProcessReaderWriter::getTypeByMangledName(InProcessReaderWriter::WritableData<swift::FullMetadata<swift::TargetMetadata<swift::InProcess>>>,swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::StringRef)::{lambda(swift::TargetMetadata<swift::InProcess> const*,unsigned int)#1},std::allocator<InProcessReaderWriter::getTypeByMangledName(InProcessReaderWriter::WritableData<swift::FullMetadata<swift::TargetMetadata<swift::InProcess>>>,swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::StringRef)::{lambda(swift::TargetMetadata<swift::InProcess> const*,unsigned int)#1}>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone( uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_189B8B368;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

const void *std::__function::__func<InProcessReaderWriter::getTypeByMangledName(InProcessReaderWriter::WritableData<swift::FullMetadata<swift::TargetMetadata<swift::InProcess>>>,swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::StringRef)::{lambda(swift::TargetMetadata<swift::InProcess> const*,unsigned int)#1},std::allocator<InProcessReaderWriter::getTypeByMangledName(InProcessReaderWriter::WritableData<swift::FullMetadata<swift::TargetMetadata<swift::InProcess>>>,swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::StringRef)::{lambda(swift::TargetMetadata<swift::InProcess> const*,unsigned int)#1}>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::operator()( uint64_t a1, uint64_t *a2, int *a3)
{
  unsigned int v3 = (const void *)*a2;
  int v4 = *a3;
  uint64_t v5 = *(InProcessReaderWriter **)(a1 + 16);
  WitnessTable = (const void *)swift::SubstGenericParametersFromMetadata::getWitnessTable(*(void *)(a1 + 8), *a2, *a3);
  InProcessReaderWriter::log( v5,  "GenericMetadataBuilder.cpp",  262,  "operator()",  "substitutions.getWitnessTable(%p, %u) = %p",  v3,  v4,  WitnessTable);
  return WitnessTable;
}

uint64_t swift::BuilderErrorOr<InProcessReaderWriter::Buffer<swift::TargetMetadata<swift::InProcess> const>>::BuilderErrorOr( uint64_t a1, void *a2)
{
  *(void *)a1 = 0LL;
  *(_DWORD *)(a1 + 24) = 0;
  int v4 = (const char *)((uint64_t (*)(void, void, void))a2[1])(*a2, 0LL, 0LL);
  size_t v5 = strlen(v4);
  if (v5 >= 0x7FFFFFFFFFFFFFF8LL) {
    abort();
  }
  size_t v6 = v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8LL) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    int v7 = (__int128 *)operator new(v8 + 1);
    *((void *)&v12 + 1) = v6;
    unint64_t v13 = v9 | 0x8000000000000000LL;
    *(void *)&__int128 v12 = v7;
    goto LABEL_8;
  }

  HIBYTE(v13) = v5;
  int v7 = &v12;
  if (v5) {
LABEL_8:
  }
    memmove(v7, v4, v6);
  *((_BYTE *)v7 + v6) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v10 == -1)
  {
LABEL_15:
    *(_OWORD *)a1 = v12;
    *(void *)(a1 + 16) = v13;
    *(_DWORD *)(a1 + 24) = 1;
    goto LABEL_16;
  }

  if ((_DWORD)v10 != 1)
  {
    ((void (*)(char *, uint64_t))off_189B8B2C0[v10])(&v14, a1);
    goto LABEL_15;
  }

  *(_OWORD *)a1 = v12;
  *(void *)(a1 + 16) = v13;
LABEL_16:
  ((void (*)(void, uint64_t, const char *))a2[1])(*a2, 1LL, v4);
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJPN5swift19TargetValueMetadataINS8_9InProcessEEENS8_12BuilderErrorEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSC_SD_EEEEEEDcSH_DpT0_( uint64_t a1, uint64_t a2)
{
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJmN5swift12BuilderErrorEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSB_1EJmS9_EEEEEEDcSD_DpT0_( uint64_t a1, uint64_t a2)
{
}

void *swift_slowAlloc(size_t __size, unint64_t a2)
{
  if (a2 > 0xF)
  {
    if (a2 == -1LL) {
      size_t v3 = 16LL;
    }
    else {
      size_t v3 = a2 + 1;
    }
    __memptr = 0LL;
    posix_memalign(&__memptr, v3, __size);
    __n128 result = __memptr;
  }

  else
  {
    __n128 result = malloc(__size);
  }

  if (!result) {
    swift::hashable_support::findHashableBaseTypeOfHashableType();
  }
  return result;
}

void *_swift_allocObject_(uint64_t a1, size_t __size, unint64_t a3)
{
  __n128 result = swift_slowAlloc(__size, a3);
  *__n128 result = a1;
  result[1] = 3LL;
  return result;
}

unint64_t *_swift_retain_(unint64_t *result, uint64_t a2, uint64_t a3, char *a4)
{
  int v4 = result + 1;
  uint64_t v5 = result[1];
  unint64_t v6 = v5 + 0x200000000LL;
  if (v5 + 0x200000000LL < 0)
  {
    uint64_t v7 = result[1];
    if ((_DWORD)v5 == -1) {
      return result;
    }
    return swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::incrementSlow(result + 1, v7, 1LL, a4);
  }

  do
  {
    uint64_t v7 = __ldxr(v4);
    if (v7 == v5)
    {
      if (!__stxr(v6, v4)) {
        return result;
      }
    }

    else
    {
      __clrex();
    }

    uint64_t v5 = v7;
    unint64_t v6 = v7 + 0x200000000LL;
  }

  while (v7 + 0x200000000LL >= 0);
  if ((_DWORD)v7 != -1) {
    return swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::incrementSlow(result + 1, v7, 1LL, a4);
  }
  return result;
}

uint64_t _swift_retain_n_(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  if (a1 < 1) {
    return a1;
  }
  uint64_t v6 = *(void *)(a1 + 8);
  if ((_DWORD)a2 != 1 && (v6 & 0x80000000FFFFFFFFLL) == 0x80000000FFFFFFFFLL) {
    return a1;
  }
  uint64_t v8 = (unint64_t *)(a1 + 8);
  uint64_t v9 = a2 << 33;
  int64_t v10 = v6 + (a2 << 33);
  if (v10 < 0)
  {
    uint64_t v11 = *(void *)(a1 + 8);
    if ((_DWORD)v6 == -1) {
      return a1;
    }
    goto LABEL_12;
  }

  do
  {
    uint64_t v11 = __ldxr(v8);
    if (v11 == v6)
    {
      if (!__stxr(v10, v8)) {
        return a1;
      }
    }

    else
    {
      __clrex();
    }

    uint64_t v6 = v11;
    int64_t v10 = v11 + v9;
  }

  while (v11 + v9 >= 0);
  if ((_DWORD)v11 != -1) {
LABEL_12:
  }
    swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::incrementSlow(v8, v11, a2, a4);
  return a1;
}

uint64_t _swift_release_(uint64_t result)
{
  if (result < 1) {
    return result;
  }
  uint64_t v1 = result;
  result += 8LL;
  uint64_t v2 = *(void *)(v1 + 8);
  unint64_t v3 = v2 - 0x200000000LL;
  if (v2 - 0x200000000LL < 0)
  {
    uint64_t v4 = *(void *)(v1 + 8);
    if ((_DWORD)v2 == -1) {
      return result;
    }
    return swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::doDecrementSlow<(swift::PerformDeinit)1>( (unint64_t *)result,  v4,  1LL);
  }

  do
  {
    uint64_t v4 = __ldxr((unint64_t *)result);
    if (v4 == v2)
    {
    }

    else
    {
      __clrex();
    }

    uint64_t v2 = v4;
    unint64_t v3 = v4 - 0x200000000LL;
  }

  while (v4 - 0x200000000LL >= 0);
  if ((_DWORD)v4 != -1) {
    return swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::doDecrementSlow<(swift::PerformDeinit)1>( (unint64_t *)result,  v4,  1LL);
  }
  return result;
}

uint64_t _swift_release_n_(uint64_t result, uint64_t a2)
{
  if (result >= 1)
  {
    uint64_t v3 = *(void *)(result + 8);
    if ((_DWORD)a2 == 1 || (v3 & 0x80000000FFFFFFFFLL) != 0x80000000FFFFFFFFLL)
    {
      result += 8LL;
      if (a2 < 2 || (v3 & 0x8000000000000000LL) == 0)
      {
        uint64_t v4 = a2 << 33;
        while (v3 - v4 >= 0)
        {
          uint64_t v5 = __ldxr((unint64_t *)result);
          if (v5 == v3)
          {
          }

          else
          {
            __clrex();
          }

          uint64_t v3 = v5;
          if (a2 >= 2)
          {
            uint64_t v3 = v5;
            if (v5 < 0) {
              goto LABEL_17;
            }
          }
        }
      }

      uint64_t v5 = v3;
LABEL_17:
      if ((_DWORD)v5 != -1) {
        return swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::doDecrementSlow<(swift::PerformDeinit)1>( (unint64_t *)result,  v5,  a2);
      }
    }
  }

  return result;
}

uint64_t _swift_tryRetain_(uint64_t a1, uint64_t a2, const char *a3, char *a4)
{
  if (a1 < 1) {
    return 0LL;
  }
  uint64_t v4 = a1;
  uint64_t v5 = (unint64_t *)(a1 + 8);
  for (uint64_t i = *(void *)(v4 + 8); ; uint64_t i = v7)
  {
    if (i < 0)
    {
      if ((~i & 0x1FFFFFFFFLL) == 0) {
        return 0LL;
      }
    }

    else if ((i & 0x100000000LL) != 0)
    {
      return 0LL;
    }

    if (i + 0x200000000LL < 0) {
      break;
    }
    unint64_t v7 = __ldxr(v5);
    if (v7 == i)
    {
      if (!__stxr(i + 0x200000000LL, v5)) {
        return v4;
      }
    }

    else
    {
      __clrex();
    }
  }

  if ((_DWORD)i != -1
    && !swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::tryIncrementSlow( (swift *)v5,  i,  a3,  a4))
  {
    return 0LL;
  }

  return v4;
}

void *swift_allocObject(uint64_t a1, size_t __size, unint64_t a3)
{
  if ((char *)_swift_allocObject == (char *)_swift_allocObject_)
  {
    __n128 result = swift_slowAlloc(__size, a3);
    *__n128 result = a1;
    result[1] = 3LL;
  }

  else
  {
    if ((_swift_enableSwizzlingOfAllocationAndRefCountingFunctions_forInstrumentsOnly & 1) == 0) {
      _swift_enableSwizzlingOfAllocationAndRefCountingFunctions_forInstrumentsOnly = 1;
    }
    return ((void *(*)(uint64_t, size_t, unint64_t))_swift_allocObject)(a1, __size, a3);
  }

  return result;
}

void *swift_initStackObject(uint64_t a1, void *a2)
{
  *a2 = a1;
  a2[1] = 5LL;
  return a2;
}

uint64_t swift_initStaticObject(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 - 8);
  v5[0] = a2;
  v5[1] = a1;
  if (v3 != -1) {
    dispatch_once_f((dispatch_once_t *)(a2 - 8), v5, (dispatch_function_t)swift_initStaticObject::$_0::__invoke);
  }
  return a2;
}

void swift_verifyEndOfLifetime(uint64_t a1, uint64_t a2, const char *a3, char *a4)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4 < 0 && *(void *)(a1 + 8) != 0xFFFFFFFFLL)
  {
    uint64_t v5 = (unsigned __int128 *)(8 * v4 + 16);
    do
      unsigned __int128 v6 = __ldxp(v5);
    while (__stxp(v6, v5));
  }

  swift::fatalError(0LL, "Fatal error: Stack object escaped\n", a3, a4);
}

void *swift_bufferAllocate(uint64_t a1, size_t __size, unint64_t a3)
{
  if ((char *)_swift_allocObject == (char *)_swift_allocObject_)
  {
    __n128 result = swift_slowAlloc(__size, a3);
    *__n128 result = a1;
    result[1] = 3LL;
  }

  else
  {
    if ((_swift_enableSwizzlingOfAllocationAndRefCountingFunctions_forInstrumentsOnly & 1) == 0) {
      _swift_enableSwizzlingOfAllocationAndRefCountingFunctions_forInstrumentsOnly = 1;
    }
    return ((void *(*)(uint64_t, size_t, unint64_t))_swift_allocObject)(a1, __size, a3);
  }

  return result;
}

void *swift_makeBoxUnique(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  if (swift_isUniquelyReferenced_nonNull_native(*a1)) {
    return (void *)v6;
  }
  unint64_t v7 = swift_allocBox(a2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16LL))(v8, v6 + ((a3 + 16) & ~a3), a2);
  *a1 = (uint64_t)v7;
  if ((_swift_enableSwizzlingOfAllocationAndRefCountingFunctions_forInstrumentsOnly & 1) != 0)
  {
    _swift_release(v6);
    return v7;
  }

  if (v6 >= 1)
  {
    uint64_t v9 = (unint64_t *)(v6 + 8);
    uint64_t v10 = *(void *)(v6 + 8);
    unint64_t v11 = v10 - 0x200000000LL;
    if (v10 - 0x200000000LL < 0)
    {
      uint64_t v12 = *(void *)(v6 + 8);
      if ((_DWORD)v10 == -1) {
        return v7;
      }
      goto LABEL_12;
    }

    do
    {
      uint64_t v12 = __ldxr(v9);
      if (v12 == v10)
      {
        if (!__stlxr(v11, v9)) {
          return v7;
        }
      }

      else
      {
        __clrex();
      }

      uint64_t v10 = v12;
      unint64_t v11 = v12 - 0x200000000LL;
    }

    while (v12 - 0x200000000LL >= 0);
    if ((_DWORD)v12 != -1) {
LABEL_12:
    }
      swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::doDecrementSlow<(swift::PerformDeinit)1>( v9,  v12,  1LL);
  }

  return v7;
}

void *swift_allocBox(uint64_t a1)
{
  uint64_t v45 = a1;
  unint64_t v1 = atomic_load((unint64_t *)&qword_18C476A18);
  if (v1 && *(void *)(v1 + 40) == v45) {
    goto LABEL_56;
  }
  do
    unsigned int v2 = __ldaxr((unsigned int *)&Boxes);
  while (__stxr(v2 + 1, (unsigned int *)&Boxes));
  do
  {
    unint64_t v3 = atomic_load(&qword_18C4769F8);
    unint64_t v4 = atomic_load((unint64_t *)&qword_18C476A00);
    unsigned int v5 = atomic_load((unsigned int *)&dword_18C4769F4);
    unint64_t v6 = atomic_load(&qword_18C4769F8);
  }

  while (v3 != v6);
  if (v3) {
    BOOL v7 = v4 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7 && v5 != 0)
  {
    if (v9)
    {
      qword_18C476A18 = *v9;
      unint64_t v1 = *v9;
      do
        unsigned int v10 = __ldxr((unsigned int *)&Boxes);
      while (__stlxr(v10 - 1, (unsigned int *)&Boxes));
      goto LABEL_56;
    }
  }

  do
    unsigned int v11 = __ldxr((unsigned int *)&Boxes);
  while (__stlxr(v11 - 1, (unsigned int *)&Boxes));
  uint64_t v46 = v45;
  os_unfair_lock_lock((os_unfair_lock_t)&unk_18C476A08);
  uint64_t v12 = qword_18C476A00;
  BOOL v13 = (qword_18C476A00 & 3) == 0;
  if ((qword_18C476A00 & 0xFFFFFFFFFFFFFFFCLL) == 0) {
    BOOL v13 = 1;
  }
  BOOL v44 = v13;
  if (v13) {
    int v14 = 4;
  }
  else {
    int v14 = *(unsigned __int8 *)(qword_18C476A00 & 0xFFFFFFFFFFFFFFFCLL);
  }
  unint64_t v15 = dword_18C4769F4;
  uint64_t v16 = (_DWORD *)qword_18C4769F8;
  if (!v17)
  {
    char v43 = v12;
    __src = v16 + 2;
    unint64_t v42 = v12 & 0xFFFFFFFFFFFFFFFCLL;
    uint64_t v21 = (v15 + 1);
    if ((1LL << v14) / (unint64_t)((1LL << v14) - v21) < 4)
    {
      LOBYTE(v26) = v43;
      if (v16) {
        goto LABEL_46;
      }
    }

    else
    {
      unsigned int v22 = (v14 + 1);
      if (v22 >= 0x11) {
        unsigned int v23 = 4;
      }
      else {
        unsigned int v23 = 2;
      }
      if (v22 < 9) {
        size_t v24 = 1LL;
      }
      else {
        size_t v24 = v23;
      }
      unint64_t v25 = (unint64_t)calloc(2LL << v14, v24);
      if (!v25) {
        swift::hashable_support::findHashableBaseTypeOfHashableType();
      }
      if ((_DWORD)v24 != 1)
      {
        if ((_DWORD)v24 == 4) {
          size_t v24 = 3LL;
        }
        else {
          size_t v24 = 2LL;
        }
      }

      unint64_t v26 = v24 | v25;
      *(_BYTE *)unint64_t v25 = v14 + 1;
      if (v14) {
        __asm { BR              X9 }
      }

      atomic_store(v26, (unint64_t *)&qword_18C476A00);
      if (!v44)
      {
        int v27 = malloc(0x10uLL);
        *int v27 = qword_18C476A10;
        v27[1] = v42;
        qword_18C476A10 = (uint64_t)v27;
      }

      LODWORD(v21) = v15 + 1;
      if (v16)
      {
LABEL_46:
        unint64_t v28 = (unint64_t)v16;
      }
    }

    uint64_t v29 = v16;
    unint64_t v30 = v15 + (v15 >> 2);
    if (v30 <= v15 + 1) {
      unint64_t v30 = v15 + 1;
    }
    size_t v31 = malloc_good_size(8 * v30 + 8);
    char v32 = malloc(v31);
    if (!v32) {
      swift::hashable_support::findHashableBaseTypeOfHashableType();
    }
    unint64_t v28 = (unint64_t)v32;
    *char v32 = (v31 + 0x7FFFFFFF8LL) >> 3;
    if (v29)
    {
      memcpy(v32 + 2, __src, 8 * v15);
      unint64_t v33 = malloc(0x10uLL);
      *unint64_t v33 = qword_18C476A10;
      v33[1] = v29;
      qword_18C476A10 = (uint64_t)v33;
    }

    atomic_store(v28, &qword_18C4769F8);
LABEL_53:
    __int16 v47 = 1;
    unsigned int v34 = swift::MetadataAllocator::Allocate((swift::MetadataAllocator *)&v47, 0x30uLL, (const char *)8, v18);
    uint64_t v35 = v45;
    int v36 = *(unsigned __int8 *)(*(void *)(v45 - 8) + 80LL);
    *(void *)unsigned int v34 = 0LL;
    *((void *)v34 + 2) = 0LL;
    *((void *)v34 + 3) = 1280LL;
    *((_DWORD *)v34 + 8) = (v36 + 16) & ~v36;
    *((void *)v34 + 5) = v35;
    *(void *)(v28 + 8 * v15 + 8) = v34;
    atomic_store(v21, (unsigned int *)&dword_18C4769F4);
    __asm { BR              X11 }
  }

  unint64_t v1 = *v17;
  __dmb(0xBu);
  if (!Boxes)
  {
    uint64_t v19 = (void **)qword_18C476A10;
    if (qword_18C476A10)
    {
      do
      {
        int v20 = (void **)*v19;
        free(v19[1]);
        free(v19);
        uint64_t v19 = v20;
      }

      while (v20);
    }

    qword_18C476A10 = 0LL;
  }

  os_unfair_lock_unlock((os_unfair_lock_t)&unk_18C476A08);
  qword_18C476A18 = v1;
LABEL_56:
  if (v1) {
    unint64_t v37 = v1 + 24;
  }
  else {
    unint64_t v37 = 0LL;
  }
  uint64_t v38 = *(void *)(*(void *)(v1 + 40) - 8LL);
  size_t v39 = (*(_DWORD *)(v1 + 32) + *(_DWORD *)(v38 + 64));
  if ((char *)_swift_allocObject == (char *)_swift_allocObject_)
  {
    __n128 result = swift_slowAlloc(v39, *(_DWORD *)(v38 + 80) & 0xF8 | 7LL);
    *__n128 result = v37;
    result[1] = 3LL;
  }

  else
  {
    if ((_swift_enableSwizzlingOfAllocationAndRefCountingFunctions_forInstrumentsOnly & 1) == 0) {
      _swift_enableSwizzlingOfAllocationAndRefCountingFunctions_forInstrumentsOnly = 1;
    }
    return (void *)_swift_allocObject(v37, v39);
  }

  return result;
}

uint64_t swift_release(uint64_t result)
{
  uint64_t v1 = result;
  if ((_swift_enableSwizzlingOfAllocationAndRefCountingFunctions_forInstrumentsOnly & 1) != 0) {
    return _swift_release(result);
  }
  if (result >= 1)
  {
    result += 8LL;
    uint64_t v2 = *(void *)(v1 + 8);
    unint64_t v3 = v2 - 0x200000000LL;
    if (v2 - 0x200000000LL < 0)
    {
      uint64_t v4 = *(void *)(v1 + 8);
      if ((_DWORD)v2 == -1) {
        return result;
      }
    }

    else
    {
      do
      {
        uint64_t v4 = __ldxr((unint64_t *)result);
        if (v4 == v2)
        {
        }

        else
        {
          __clrex();
        }

        uint64_t v2 = v4;
        unint64_t v3 = v4 - 0x200000000LL;
      }

      while (v4 - 0x200000000LL >= 0);
      if ((_DWORD)v4 == -1) {
        return result;
      }
    }

    return swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::doDecrementSlow<(swift::PerformDeinit)1>( (unint64_t *)result,  v4,  1LL);
  }

  return result;
}

void swift_deallocBox(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if ((v1 & 0x80000000FFFFFFFFLL) != 0x80000000FFFFFFFFLL)
  {
    if ((v1 & 0x8000000000000000LL) == 0 || *(void *)(a1 + 8) == 0xFFFFFFFFLL)
    {
      *(void *)(a1 + 8) = v1 & 0x80000000FFFFFFFFLL | 0x100000000LL;
    }

    else
    {
      uint64_t v2 = (unsigned __int128 *)(8 * v1 + 16);
      do
      {
        unsigned __int128 v4 = __ldxp(v2);
        uint64_t v3 = v4;
      }

      while (__stxp(v4, v2));
      unsigned int v5 = DWORD2(v4);
      uint64_t v6 = HIDWORD(*((void *)&v4 + 1));
      unint64_t v7 = v4 - 0x200000000LL;
      if ((uint64_t)v4 - 0x200000000LL < 0)
      {
        uint64_t v10 = v4;
        uint64_t v14 = HIDWORD(*((void *)&v4 + 1));
        if ((_DWORD)v4 != -1)
        {
LABEL_20:
          uint64_t v15 = v14;
          unint64_t v16 = v10 - 0x200000000LL;
          if (v10 - 0x200000000LL >= 0)
          {
LABEL_23:
            while (1)
            {
              unint64_t v17 = v5;
              unint64_t v18 = v5 | (unint64_t)(v15 << 32);
              do
              {
                while (1)
                {
                  unsigned __int128 v19 = __ldxp(v2);
                  unsigned int v5 = DWORD2(v19);
                  int v20 = (void)v19 != v10;
                  if (*((void *)&v19 + 1) != v18) {
                    ++v20;
                  }
                  if (!v20) {
                    break;
                  }
                  if (!__stlxp(v19, v2)) {
                    goto LABEL_30;
                  }
                }
              }

              while (__stlxp(__PAIR128__(v17, v16), v2));
LABEL_30:
              if ((void)v19 == v10 && *((void *)&v19 + 1) == v18) {
                break;
              }
              uint64_t v15 = HIDWORD(*((void *)&v19 + 1));
              uint64_t v10 = v19;
              unint64_t v16 = v19 - 0x200000000LL;
            }
          }

          else
          {
LABEL_21:
            if ((_DWORD)v10 != -1)
            {
              unint64_t v16 = v10 & 0x80000000FFFFFFFFLL | 0x100000000LL;
              goto LABEL_23;
            }
          }
        }
      }

      else
      {
        while (1)
        {
          unint64_t v8 = v5;
          unint64_t v9 = v5 | (unint64_t)(v6 << 32);
          do
          {
            while (1)
            {
              unsigned __int128 v11 = __ldxp(v2);
              unsigned int v5 = DWORD2(v11);
              uint64_t v10 = v11;
              int v12 = (void)v11 != v3;
              if (*((void *)&v11 + 1) != v9) {
                ++v12;
              }
              if (!v12) {
                break;
              }
              if (!__stlxp(v11, v2)) {
                goto LABEL_14;
              }
            }
          }

          while (__stlxp(__PAIR128__(v8, v7), v2));
LABEL_14:
          if ((void)v11 == v3 && *((void *)&v11 + 1) == v9) {
            break;
          }
          uint64_t v14 = HIDWORD(*((void *)&v11 + 1));
          uint64_t v6 = HIDWORD(*((void *)&v11 + 1));
          uint64_t v3 = v11;
          unint64_t v7 = v11 - 0x200000000LL;
          if ((uint64_t)v11 - 0x200000000LL < 0)
          {
            if ((_DWORD)v11 == -1) {
              break;
            }
            goto LABEL_20;
          }
        }
      }
    }
  }

  swift_deallocObject(a1);
}

void swift_deallocObject(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 < 0)
  {
    if ((~v2 & 0x1FFFFFFFFLL) != 0) {
      goto LABEL_6;
    }
LABEL_5:
    if ((v2 & 0x7FFFFFFEFFFFFFFELL) == 2)
    {
LABEL_19:
      swift_slowDealloc((void *)a1);
      return;
    }

    goto LABEL_6;
  }

  if ((v2 & 0x100000000LL) != 0) {
    goto LABEL_5;
  }
LABEL_6:
  if (a1 < 1) {
    return;
  }
  uint64_t v3 = (unint64_t *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 8);
  if ((~v4 & 0x80000000FFFFFFFFLL) == 0) {
    return;
  }
  if ((v4 & 0x8000000000000000LL) != 0) {
    goto LABEL_17;
  }
  unint64_t v5 = *(void *)(a1 + 8);
  while (1)
  {
    unsigned int v6 = (v5 >> 1) - 1;
    unint64_t v4 = __ldxr(v3);
    if (v4 == v5)
    {
      if (!__stxr((2 * v6) | v5 & 0xFFFFFFFF00000001LL, v3))
      {
        char v7 = 1;
        goto LABEL_15;
      }
    }

    else
    {
      __clrex();
    }

    char v7 = 0;
LABEL_15:
    if ((v7 & 1) != 0) {
      break;
    }
    unint64_t v5 = v4;
    if ((v4 & 0x8000000000000000LL) != 0)
    {
LABEL_17:
      unint64_t v5 = v4;
      if (v4 != 0xFFFFFFFFLL)
      {
        if ((swift::HeapObjectSideTableEntry::decrementUnownedShouldFree( (swift::HeapObjectSideTableEntry *)(8 * v4),  1) & 1) == 0) {
          return;
        }
        goto LABEL_19;
      }
    }
  }

  if ((v6 & 0x7FFFFFFF) == 0) {
    goto LABEL_19;
  }
}

uint64_t swift_projectBox(uint64_t result)
{
  if (result) {
    result += *(unsigned int *)(*(void *)result + 8LL);
  }
  return result;
}

_UNKNOWN **swift_allocEmptyBox(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  if ((_swift_enableSwizzlingOfAllocationAndRefCountingFunctions_forInstrumentsOnly & 1) != 0)
  {
  }

  {
    uint64_t v4 = qword_18C565A98;
    unint64_t v5 = qword_18C565A98 + 0x200000000LL;
    if (qword_18C565A98 + 0x200000000LL < 0)
    {
      uint64_t v6 = qword_18C565A98;
      if ((_DWORD)qword_18C565A98 == -1) {
      goto LABEL_10;
      }
    }

    do
    {
      uint64_t v6 = __ldxr((unint64_t *)&qword_18C565A98);
      if (v6 == v4)
      {
      }

      else
      {
        __clrex();
      }

      uint64_t v4 = v6;
      unint64_t v5 = v6 + 0x200000000LL;
    }

    while (v6 + 0x200000000LL >= 0);
    if ((_DWORD)v6 != -1) {
LABEL_10:
    }
      swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::incrementSlow( (unint64_t *)&qword_18C565A98,  v6,  1LL,  a4);
  }
}

unint64_t *swift_retain(unint64_t *result, uint64_t a2, uint64_t a3, char *a4)
{
  if ((_swift_enableSwizzlingOfAllocationAndRefCountingFunctions_forInstrumentsOnly & 1) != 0) {
    return _swift_retain(result, (uint64_t)_swift_retain, a3, a4);
  }
  if ((uint64_t)result >= 1)
  {
    uint64_t v4 = result + 1;
    uint64_t v5 = result[1];
    unint64_t v6 = v5 + 0x200000000LL;
    if (v5 + 0x200000000LL < 0)
    {
      uint64_t v7 = result[1];
      if ((_DWORD)v5 == -1) {
        return result;
      }
    }

    else
    {
      do
      {
        uint64_t v7 = __ldxr(v4);
        if (v7 == v5)
        {
          if (!__stxr(v6, v4)) {
            return result;
          }
        }

        else
        {
          __clrex();
        }

        uint64_t v5 = v7;
        unint64_t v6 = v7 + 0x200000000LL;
      }

      while (v7 + 0x200000000LL >= 0);
      if ((_DWORD)v7 == -1) {
        return result;
      }
    }

    return swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::incrementSlow(result + 1, v7, 1LL, a4);
  }

  return result;
}

unint64_t *swift_retain_x1(uint64_t a1, unint64_t *a2, uint64_t a3, char *a4)
{
  __n128 result = a2;
  if ((_swift_enableSwizzlingOfAllocationAndRefCountingFunctions_forInstrumentsOnly & 1) != 0) {
    return _swift_retain(a2, (uint64_t)_swift_retain, a3, a4);
  }
  if ((uint64_t)a2 >= 1)
  {
    uint64_t v5 = a2 + 1;
    uint64_t v6 = a2[1];
    unint64_t v7 = v6 + 0x200000000LL;
    if (v6 + 0x200000000LL < 0)
    {
      uint64_t v8 = a2[1];
      if ((_DWORD)v6 == -1) {
        return result;
      }
    }

    else
    {
      do
      {
        uint64_t v8 = __ldxr(v5);
        if (v8 == v6)
        {
          if (!__stxr(v7, v5)) {
            return result;
          }
        }

        else
        {
          __clrex();
        }

        uint64_t v6 = v8;
        unint64_t v7 = v8 + 0x200000000LL;
      }

      while (v8 + 0x200000000LL >= 0);
      if ((_DWORD)v8 == -1) {
        return result;
      }
    }

    return swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::incrementSlow(result + 1, v8, 1LL, a4);
  }

  return result;
}

unint64_t *swift_retain_x2(uint64_t a1, uint64_t a2, unint64_t *a3, char *a4)
{
  __n128 result = a3;
  if ((_swift_enableSwizzlingOfAllocationAndRefCountingFunctions_forInstrumentsOnly & 1) != 0) {
    return _swift_retain(a3, (uint64_t)_swift_retain, (uint64_t)a3, a4);
  }
  if ((uint64_t)a3 >= 1)
  {
    uint64_t v5 = a3 + 1;
    uint64_t v6 = a3[1];
    unint64_t v7 = v6 + 0x200000000LL;
    if (v6 + 0x200000000LL < 0)
    {
      uint64_t v8 = a3[1];
      if ((_DWORD)v6 == -1) {
        return result;
      }
    }

    else
    {
      do
      {
        uint64_t v8 = __ldxr(v5);
        if (v8 == v6)
        {
          if (!__stxr(v7, v5)) {
            return result;
          }
        }

        else
        {
          __clrex();
        }

        uint64_t v6 = v8;
        unint64_t v7 = v8 + 0x200000000LL;
      }

      while (v8 + 0x200000000LL >= 0);
      if ((_DWORD)v8 == -1) {
        return result;
      }
    }

    return swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::incrementSlow(a3 + 1, v8, 1LL, a4);
  }

  return result;
}

unint64_t *swift_retain_x3(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  __n128 result = a4;
  if ((_swift_enableSwizzlingOfAllocationAndRefCountingFunctions_forInstrumentsOnly & 1) != 0) {
    return _swift_retain(a4, (uint64_t)_swift_retain, a3, (char *)a4);
  }
  if ((uint64_t)a4 >= 1)
  {
    uint64_t v5 = a4 + 1;
    uint64_t v6 = a4[1];
    unint64_t v7 = v6 + 0x200000000LL;
    if (v6 + 0x200000000LL < 0)
    {
      uint64_t v8 = a4[1];
      if ((_DWORD)v6 == -1) {
        return result;
      }
    }

    else
    {
      do
      {
        uint64_t v8 = __ldxr(v5);
        if (v8 == v6)
        {
          if (!__stxr(v7, v5)) {
            return result;
          }
        }

        else
        {
          __clrex();
        }

        uint64_t v6 = v8;
        unint64_t v7 = v8 + 0x200000000LL;
      }

      while (v8 + 0x200000000LL >= 0);
      if ((_DWORD)v8 == -1) {
        return result;
      }
    }

    return swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::incrementSlow( a4 + 1,  v8,  1LL,  (char *)a4);
  }

  return result;
}

unint64_t *swift_retain_x4(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, unint64_t *a5)
{
  __n128 result = a5;
  if ((_swift_enableSwizzlingOfAllocationAndRefCountingFunctions_forInstrumentsOnly & 1) != 0) {
    return _swift_retain(a5, (uint64_t)_swift_retain, a3, a4);
  }
  if ((uint64_t)a5 >= 1)
  {
    uint64_t v6 = a5 + 1;
    uint64_t v7 = a5[1];
    unint64_t v8 = v7 + 0x200000000LL;
    if (v7 + 0x200000000LL < 0)
    {
      uint64_t v9 = a5[1];
      if ((_DWORD)v7 == -1) {
        return result;
      }
    }

    else
    {
      do
      {
        uint64_t v9 = __ldxr(v6);
        if (v9 == v7)
        {
          if (!__stxr(v8, v6)) {
            return result;
          }
        }

        else
        {
          __clrex();
        }

        uint64_t v7 = v9;
        unint64_t v8 = v9 + 0x200000000LL;
      }

      while (v9 + 0x200000000LL >= 0);
      if ((_DWORD)v9 == -1) {
        return result;
      }
    }

    return swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::incrementSlow(a5 + 1, v9, 1LL, a4);
  }

  return result;
}

unint64_t *swift_retain_x5( uint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, unint64_t *a6)
{
  __n128 result = a6;
  if ((_swift_enableSwizzlingOfAllocationAndRefCountingFunctions_forInstrumentsOnly & 1) != 0) {
    return _swift_retain(a6, (uint64_t)_swift_retain, a3, a4);
  }
  if ((uint64_t)a6 >= 1)
  {
    uint64_t v7 = a6 + 1;
    uint64_t v8 = a6[1];
    unint64_t v9 = v8 + 0x200000000LL;
    if (v8 + 0x200000000LL < 0)
    {
      uint64_t v10 = a6[1];
      if ((_DWORD)v8 == -1) {
        return result;
      }
    }

    else
    {
      do
      {
        uint64_t v10 = __ldxr(v7);
        if (v10 == v8)
        {
          if (!__stxr(v9, v7)) {
            return result;
          }
        }

        else
        {
          __clrex();
        }

        uint64_t v8 = v10;
        unint64_t v9 = v10 + 0x200000000LL;
      }

      while (v10 + 0x200000000LL >= 0);
      if ((_DWORD)v10 == -1) {
        return result;
      }
    }

    return swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::incrementSlow(a6 + 1, v10, 1LL, a4);
  }

  return result;
}

unint64_t *swift_retain_x6( uint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, unint64_t *a7)
{
  __n128 result = a7;
  if ((_swift_enableSwizzlingOfAllocationAndRefCountingFunctions_forInstrumentsOnly & 1) != 0) {
    return _swift_retain(a7, (uint64_t)_swift_retain, a3, a4);
  }
  if ((uint64_t)a7 >= 1)
  {
    uint64_t v8 = a7 + 1;
    uint64_t v9 = a7[1];
    unint64_t v10 = v9 + 0x200000000LL;
    if (v9 + 0x200000000LL < 0)
    {
      uint64_t v11 = a7[1];
      if ((_DWORD)v9 == -1) {
        return result;
      }
    }

    else
    {
      do
      {
        uint64_t v11 = __ldxr(v8);
        if (v11 == v9)
        {
          if (!__stxr(v10, v8)) {
            return result;
          }
        }

        else
        {
          __clrex();
        }

        uint64_t v9 = v11;
        unint64_t v10 = v11 + 0x200000000LL;
      }

      while (v11 + 0x200000000LL >= 0);
      if ((_DWORD)v11 == -1) {
        return result;
      }
    }

    return swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::incrementSlow(a7 + 1, v11, 1LL, a4);
  }

  return result;
}

unint64_t *swift_retain_x7( uint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t *a8)
{
  __n128 result = a8;
  if ((_swift_enableSwizzlingOfAllocationAndRefCountingFunctions_forInstrumentsOnly & 1) != 0) {
    return _swift_retain(a8, (uint64_t)_swift_retain, a3, a4);
  }
  if ((uint64_t)a8 >= 1)
  {
    uint64_t v9 = a8 + 1;
    uint64_t v10 = a8[1];
    unint64_t v11 = v10 + 0x200000000LL;
    if (v10 + 0x200000000LL < 0)
    {
      uint64_t v12 = a8[1];
      if ((_DWORD)v10 == -1) {
        return result;
      }
    }

    else
    {
      do
      {
        uint64_t v12 = __ldxr(v9);
        if (v12 == v10)
        {
          if (!__stxr(v11, v9)) {
            return result;
          }
        }

        else
        {
          __clrex();
        }

        uint64_t v10 = v12;
        unint64_t v11 = v12 + 0x200000000LL;
      }

      while (v12 + 0x200000000LL >= 0);
      if ((_DWORD)v12 == -1) {
        return result;
      }
    }

    return swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::incrementSlow(a8 + 1, v12, 1LL, a4);
  }

  return result;
}

unint64_t *swift_retain_x8@<X0>(uint64_t a1@<X2>, char *a2@<X3>, unint64_t *a3@<X8>)
{
  __n128 result = a3;
  if ((_swift_enableSwizzlingOfAllocationAndRefCountingFunctions_forInstrumentsOnly & 1) != 0) {
    return _swift_retain(a3, (uint64_t)_swift_retain, a1, a2);
  }
  if ((uint64_t)a3 >= 1)
  {
    uint64_t v4 = a3 + 1;
    uint64_t v5 = result[1];
    unint64_t v6 = v5 + 0x200000000LL;
    if (v5 + 0x200000000LL < 0)
    {
      uint64_t v7 = result[1];
      if ((_DWORD)v5 == -1) {
        return result;
      }
    }

    else
    {
      do
      {
        uint64_t v7 = __ldxr(v4);
        if (v7 == v5)
        {
          if (!__stxr(v6, v4)) {
            return result;
          }
        }

        else
        {
          __clrex();
        }

        uint64_t v5 = v7;
        unint64_t v6 = v7 + 0x200000000LL;
      }

      while (v7 + 0x200000000LL >= 0);
      if ((_DWORD)v7 == -1) {
        return result;
      }
    }

    return swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::incrementSlow(result + 1, v7, 1LL, a2);
  }

  return result;
}

unint64_t *swift_retain_x9(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  __n128 result = v4;
  if ((_swift_enableSwizzlingOfAllocationAndRefCountingFunctions_forInstrumentsOnly & 1) != 0) {
    return _swift_retain(v4, (uint64_t)_swift_retain, a3, a4);
  }
  if ((uint64_t)v4 >= 1)
  {
    unint64_t v6 = v4 + 1;
    uint64_t v7 = v4[1];
    unint64_t v8 = v7 + 0x200000000LL;
    if (v7 + 0x200000000LL < 0)
    {
      uint64_t v9 = v4[1];
      if ((_DWORD)v7 == -1) {
        return result;
      }
    }

    else
    {
      do
      {
        uint64_t v9 = __ldxr(v6);
        if (v9 == v7)
        {
          if (!__stxr(v8, v6)) {
            return result;
          }
        }

        else
        {
          __clrex();
        }

        uint64_t v7 = v9;
        unint64_t v8 = v9 + 0x200000000LL;
      }

      while (v9 + 0x200000000LL >= 0);
      if ((_DWORD)v9 == -1) {
        return result;
      }
    }

    return swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::incrementSlow(v4 + 1, v9, 1LL, a4);
  }

  return result;
}

unint64_t *swift_retain_x10(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  __n128 result = v4;
  if ((_swift_enableSwizzlingOfAllocationAndRefCountingFunctions_forInstrumentsOnly & 1) != 0) {
    return _swift_retain(v4, (uint64_t)_swift_retain, a3, a4);
  }
  if ((uint64_t)v4 >= 1)
  {
    unint64_t v6 = v4 + 1;
    uint64_t v7 = v4[1];
    unint64_t v8 = v7 + 0x200000000LL;
    if (v7 + 0x200000000LL < 0)
    {
      uint64_t v9 = result[1];
      if ((_DWORD)v7 == -1) {
        return result;
      }
    }

    else
    {
      do
      {
        uint64_t v9 = __ldxr(v6);
        if (v9 == v7)
        {
          if (!__stxr(v8, v6)) {
            return result;
          }
        }

        else
        {
          __clrex();
        }

        uint64_t v7 = v9;
        unint64_t v8 = v9 + 0x200000000LL;
      }

      while (v9 + 0x200000000LL >= 0);
      if ((_DWORD)v9 == -1) {
        return result;
      }
    }

    return swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::incrementSlow(result + 1, v9, 1LL, a4);
  }

  return result;
}

unint64_t *swift_retain_x11(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  __n128 result = v4;
  if ((_swift_enableSwizzlingOfAllocationAndRefCountingFunctions_forInstrumentsOnly & 1) != 0) {
    return _swift_retain(v4, (uint64_t)_swift_retain, a3, a4);
  }
  if ((uint64_t)v4 >= 1)
  {
    unint64_t v6 = v4 + 1;
    uint64_t v7 = v4[1];
    unint64_t v8 = v7 + 0x200000000LL;
    if (v7 + 0x200000000LL < 0)
    {
      uint64_t v9 = result[1];
      if ((_DWORD)v7 == -1) {
        return result;
      }
    }

    else
    {
      do
      {
        uint64_t v9 = __ldxr(v6);
        if (v9 == v7)
        {
          if (!__stxr(v8, v6)) {
            return result;
          }
        }

        else
        {
          __clrex();
        }

        uint64_t v7 = v9;
        unint64_t v8 = v9 + 0x200000000LL;
      }

      while (v9 + 0x200000000LL >= 0);
      if ((_DWORD)v9 == -1) {
        return result;
      }
    }

    return swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::incrementSlow(result + 1, v9, 1LL, a4);
  }

  return result;
}

unint64_t *swift_retain_x12(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  __n128 result = v4;
  if ((_swift_enableSwizzlingOfAllocationAndRefCountingFunctions_forInstrumentsOnly & 1) != 0) {
    return _swift_retain(v4, (uint64_t)_swift_retain, a3, a4);
  }
  if ((uint64_t)v4 >= 1)
  {
    unint64_t v6 = v4 + 1;
    uint64_t v7 = v4[1];
    unint64_t v8 = v7 + 0x200000000LL;
    if (v7 + 0x200000000LL < 0)
    {
      uint64_t v9 = v4[1];
      if ((_DWORD)v7 == -1) {
        return result;
      }
    }

    else
    {
      do
      {
        uint64_t v9 = __ldxr(v6);
        if (v9 == v7)
        {
          if (!__stxr(v8, v6)) {
            return result;
          }
        }

        else
        {
          __clrex();
        }

        uint64_t v7 = v9;
        unint64_t v8 = v9 + 0x200000000LL;
      }

      while (v9 + 0x200000000LL >= 0);
      if ((_DWORD)v9 == -1) {
        return result;
      }
    }

    return swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::incrementSlow(v4 + 1, v9, 1LL, a4);
  }

  return result;
}

unint64_t *swift_retain_x13(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  __n128 result = v4;
  if ((_swift_enableSwizzlingOfAllocationAndRefCountingFunctions_forInstrumentsOnly & 1) != 0) {
    return _swift_retain(v4, (uint64_t)_swift_retain, a3, a4);
  }
  if ((uint64_t)v4 >= 1)
  {
    unint64_t v6 = v4 + 1;
    uint64_t v7 = v4[1];
    unint64_t v8 = v7 + 0x200000000LL;
    if (v7 + 0x200000000LL < 0)
    {
      uint64_t v9 = v4[1];
      if ((_DWORD)v7 == -1) {
        return result;
      }
    }

    else
    {
      do
      {
        uint64_t v9 = __ldxr(v6);
        if (v9 == v7)
        {
          if (!__stxr(v8, v6)) {
            return result;
          }
        }

        else
        {
          __clrex();
        }

        uint64_t v7 = v9;
        unint64_t v8 = v9 + 0x200000000LL;
      }

      while (v9 + 0x200000000LL >= 0);
      if ((_DWORD)v9 == -1) {
        return result;
      }
    }

    return swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::incrementSlow(v4 + 1, v9, 1LL, a4);
  }

  return result;
}

unint64_t *swift_retain_x14(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  __n128 result = v4;
  if ((_swift_enableSwizzlingOfAllocationAndRefCountingFunctions_forInstrumentsOnly & 1) != 0) {
    return _swift_retain(v4, (uint64_t)_swift_retain, a3, a4);
  }
  if ((uint64_t)v4 >= 1)
  {
    unint64_t v6 = v4 + 1;
    uint64_t v7 = v4[1];
    unint64_t v8 = v7 + 0x200000000LL;
    if (v7 + 0x200000000LL < 0)
    {
      uint64_t v9 = v4[1];
      if ((_DWORD)v7 == -1) {
        return result;
      }
    }

    else
    {
      do
      {
        uint64_t v9 = __ldxr(v6);
        if (v9 == v7)
        {
          if (!__stxr(v8, v6)) {
            return result;
          }
        }

        else
        {
          __clrex();
        }

        uint64_t v7 = v9;
        unint64_t v8 = v9 + 0x200000000LL;
      }

      while (v9 + 0x200000000LL >= 0);
      if ((_DWORD)v9 == -1) {
        return result;
      }
    }

    return swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::incrementSlow(v4 + 1, v9, 1LL, a4);
  }

  return result;
}

unint64_t *swift_retain_x15(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  __n128 result = v4;
  if ((_swift_enableSwizzlingOfAllocationAndRefCountingFunctions_forInstrumentsOnly & 1) != 0) {
    return _swift_retain(v4, (uint64_t)_swift_retain, a3, a4);
  }
  if ((uint64_t)v4 >= 1)
  {
    unint64_t v6 = v4 + 1;
    uint64_t v7 = v4[1];
    unint64_t v8 = v7 + 0x200000000LL;
    if (v7 + 0x200000000LL < 0)
    {
      uint64_t v9 = v4[1];
      if ((_DWORD)v7 == -1) {
        return result;
      }
    }

    else
    {
      do
      {
        uint64_t v9 = __ldxr(v6);
        if (v9 == v7)
        {
          if (!__stxr(v8, v6)) {
            return result;
          }
        }

        else
        {
          __clrex();
        }

        uint64_t v7 = v9;
        unint64_t v8 = v9 + 0x200000000LL;
      }

      while (v9 + 0x200000000LL >= 0);
      if ((_DWORD)v9 == -1) {
        return result;
      }
    }

    return swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::incrementSlow(v4 + 1, v9, 1LL, a4);
  }

  return result;
}

unint64_t *swift_retain_x19(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  __n128 result = v4;
  if ((_swift_enableSwizzlingOfAllocationAndRefCountingFunctions_forInstrumentsOnly & 1) != 0) {
    return _swift_retain(v4, (uint64_t)_swift_retain, a3, a4);
  }
  if ((uint64_t)v4 >= 1)
  {
    unint64_t v6 = v4 + 1;
    uint64_t v7 = v4[1];
    unint64_t v8 = v7 + 0x200000000LL;
    if (v7 + 0x200000000LL < 0)
    {
      uint64_t v9 = v4[1];
      if ((_DWORD)v7 == -1) {
        return result;
      }
    }

    else
    {
      do
      {
        uint64_t v9 = __ldxr(v6);
        if (v9 == v7)
        {
          if (!__stxr(v8, v6)) {
            return result;
          }
        }

        else
        {
          __clrex();
        }

        uint64_t v7 = v9;
        unint64_t v8 = v9 + 0x200000000LL;
      }

      while (v9 + 0x200000000LL >= 0);
      if ((_DWORD)v9 == -1) {
        return result;
      }
    }

    return swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::incrementSlow(v4 + 1, v9, 1LL, a4);
  }

  return result;
}

unint64_t *swift_retain_x20(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  __n128 result = v4;
  if ((_swift_enableSwizzlingOfAllocationAndRefCountingFunctions_forInstrumentsOnly & 1) != 0) {
    return _swift_retain(v4, (uint64_t)_swift_retain, a3, a4);
  }
  if ((uint64_t)v4 >= 1)
  {
    unint64_t v6 = v4 + 1;
    uint64_t v7 = v4[1];
    unint64_t v8 = v7 + 0x200000000LL;
    if (v7 + 0x200000000LL < 0)
    {
      uint64_t v9 = v4[1];
      if ((_DWORD)v7 == -1) {
        return result;
      }
    }

    else
    {
      do
      {
        uint64_t v9 = __ldxr(v6);
        if (v9 == v7)
        {
          if (!__stxr(v8, v6)) {
            return result;
          }
        }

        else
        {
          __clrex();
        }

        uint64_t v7 = v9;
        unint64_t v8 = v9 + 0x200000000LL;
      }

      while (v9 + 0x200000000LL >= 0);
      if ((_DWORD)v9 == -1) {
        return result;
      }
    }

    return swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::incrementSlow(v4 + 1, v9, 1LL, a4);
  }

  return result;
}

unint64_t *swift_retain_x21(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  __n128 result = v4;
  if ((_swift_enableSwizzlingOfAllocationAndRefCountingFunctions_forInstrumentsOnly & 1) != 0) {
    return _swift_retain(v4, (uint64_t)_swift_retain, a3, a4);
  }
  if ((uint64_t)v4 >= 1)
  {
    unint64_t v6 = v4 + 1;
    uint64_t v7 = v4[1];
    unint64_t v8 = v7 + 0x200000000LL;
    if (v7 + 0x200000000LL < 0)
    {
      uint64_t v9 = v4[1];
      if ((_DWORD)v7 == -1) {
        return result;
      }
    }

    else
    {
      do
      {
        uint64_t v9 = __ldxr(v6);
        if (v9 == v7)
        {
          if (!__stxr(v8, v6)) {
            return result;
          }
        }

        else
        {
          __clrex();
        }

        uint64_t v7 = v9;
        unint64_t v8 = v9 + 0x200000000LL;
      }

      while (v9 + 0x200000000LL >= 0);
      if ((_DWORD)v9 == -1) {
        return result;
      }
    }

    return swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::incrementSlow(v4 + 1, v9, 1LL, a4);
  }

  return result;
}

unint64_t *swift_retain_x22(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  __n128 result = v4;
  if ((_swift_enableSwizzlingOfAllocationAndRefCountingFunctions_forInstrumentsOnly & 1) != 0) {
    return _swift_retain(v4, (uint64_t)_swift_retain, a3, a4);
  }
  if ((uint64_t)v4 >= 1)
  {
    unint64_t v6 = v4 + 1;
    uint64_t v7 = v4[1];
    unint64_t v8 = v7 + 0x200000000LL;
    if (v7 + 0x200000000LL < 0)
    {
      uint64_t v9 = v4[1];
      if ((_DWORD)v7 == -1) {
        return result;
      }
    }

    else
    {
      do
      {
        uint64_t v9 = __ldxr(v6);
        if (v9 == v7)
        {
          if (!__stxr(v8, v6)) {
            return result;
          }
        }

        else
        {
          __clrex();
        }

        uint64_t v7 = v9;
        unint64_t v8 = v9 + 0x200000000LL;
      }

      while (v9 + 0x200000000LL >= 0);
      if ((_DWORD)v9 == -1) {
        return result;
      }
    }

    return swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::incrementSlow(v4 + 1, v9, 1LL, a4);
  }

  return result;
}

unint64_t *swift_retain_x23(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  __n128 result = v4;
  if ((_swift_enableSwizzlingOfAllocationAndRefCountingFunctions_forInstrumentsOnly & 1) != 0) {
    return _swift_retain(v4, (uint64_t)_swift_retain, a3, a4);
  }
  if ((uint64_t)v4 >= 1)
  {
    unint64_t v6 = v4 + 1;
    uint64_t v7 = v4[1];
    unint64_t v8 = v7 + 0x200000000LL;
    if (v7 + 0x200000000LL < 0)
    {
      uint64_t v9 = v4[1];
      if ((_DWORD)v7 == -1) {
        return result;
      }
    }

    else
    {
      do
      {
        uint64_t v9 = __ldxr(v6);
        if (v9 == v7)
        {
          if (!__stxr(v8, v6)) {
            return result;
          }
        }

        else
        {
          __clrex();
        }

        uint64_t v7 = v9;
        unint64_t v8 = v9 + 0x200000000LL;
      }

      while (v9 + 0x200000000LL >= 0);
      if ((_DWORD)v9 == -1) {
        return result;
      }
    }

    return swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::incrementSlow(v4 + 1, v9, 1LL, a4);
  }

  return result;
}

unint64_t *swift_retain_x24(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  __n128 result = v4;
  if ((_swift_enableSwizzlingOfAllocationAndRefCountingFunctions_forInstrumentsOnly & 1) != 0) {
    return _swift_retain(v4, (uint64_t)_swift_retain, a3, a4);
  }
  if ((uint64_t)v4 >= 1)
  {
    unint64_t v6 = v4 + 1;
    uint64_t v7 = v4[1];
    unint64_t v8 = v7 + 0x200000000LL;
    if (v7 + 0x200000000LL < 0)
    {
      uint64_t v9 = v4[1];
      if ((_DWORD)v7 == -1) {
        return result;
      }
    }

    else
    {
      do
      {
        uint64_t v9 = __ldxr(v6);
        if (v9 == v7)
        {
          if (!__stxr(v8, v6)) {
            return result;
          }
        }

        else
        {
          __clrex();
        }

        uint64_t v7 = v9;
        unint64_t v8 = v9 + 0x200000000LL;
      }

      while (v9 + 0x200000000LL >= 0);
      if ((_DWORD)v9 == -1) {
        return result;
      }
    }

    return swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::incrementSlow(v4 + 1, v9, 1LL, a4);
  }

  return result;
}

unint64_t *swift_retain_x25(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  __n128 result = v4;
  if ((_swift_enableSwizzlingOfAllocationAndRefCountingFunctions_forInstrumentsOnly & 1) != 0) {
    return _swift_retain(v4, (uint64_t)_swift_retain, a3, a4);
  }
  if ((uint64_t)v4 >= 1)
  {
    unint64_t v6 = v4 + 1;
    uint64_t v7 = v4[1];
    unint64_t v8 = v7 + 0x200000000LL;
    if (v7 + 0x200000000LL < 0)
    {
      uint64_t v9 = v4[1];
      if ((_DWORD)v7 == -1) {
        return result;
      }
    }

    else
    {
      do
      {
        uint64_t v9 = __ldxr(v6);
        if (v9 == v7)
        {
          if (!__stxr(v8, v6)) {
            return result;
          }
        }

        else
        {
          __clrex();
        }

        uint64_t v7 = v9;
        unint64_t v8 = v9 + 0x200000000LL;
      }

      while (v9 + 0x200000000LL >= 0);
      if ((_DWORD)v9 == -1) {
        return result;
      }
    }

    return swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::incrementSlow(v4 + 1, v9, 1LL, a4);
  }

  return result;
}

unint64_t *swift_retain_x26(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  __n128 result = v4;
  if ((_swift_enableSwizzlingOfAllocationAndRefCountingFunctions_forInstrumentsOnly & 1) != 0) {
    return _swift_retain(v4, (uint64_t)_swift_retain, a3, a4);
  }
  if ((uint64_t)v4 >= 1)
  {
    unint64_t v6 = v4 + 1;
    uint64_t v7 = v4[1];
    unint64_t v8 = v7 + 0x200000000LL;
    if (v7 + 0x200000000LL < 0)
    {
      uint64_t v9 = v4[1];
      if ((_DWORD)v7 == -1) {
        return result;
      }
    }

    else
    {
      do
      {
        uint64_t v9 = __ldxr(v6);
        if (v9 == v7)
        {
          if (!__stxr(v8, v6)) {
            return result;
          }
        }

        else
        {
          __clrex();
        }

        uint64_t v7 = v9;
        unint64_t v8 = v9 + 0x200000000LL;
      }

      while (v9 + 0x200000000LL >= 0);
      if ((_DWORD)v9 == -1) {
        return result;
      }
    }

    return swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::incrementSlow(v4 + 1, v9, 1LL, a4);
  }

  return result;
}

unint64_t *swift_retain_x27(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  __n128 result = v4;
  if ((_swift_enableSwizzlingOfAllocationAndRefCountingFunctions_forInstrumentsOnly & 1) != 0) {
    return _swift_retain(v4, (uint64_t)_swift_retain, a3, a4);
  }
  if ((uint64_t)v4 >= 1)
  {
    unint64_t v6 = v4 + 1;
    uint64_t v7 = v4[1];
    unint64_t v8 = v7 + 0x200000000LL;
    if (v7 + 0x200000000LL < 0)
    {
      uint64_t v9 = v4[1];
      if ((_DWORD)v7 == -1) {
        return result;
      }
    }

    else
    {
      do
      {
        uint64_t v9 = __ldxr(v6);
        if (v9 == v7)
        {
          if (!__stxr(v8, v6)) {
            return result;
          }
        }

        else
        {
          __clrex();
        }

        uint64_t v7 = v9;
        unint64_t v8 = v9 + 0x200000000LL;
      }

      while (v9 + 0x200000000LL >= 0);
      if ((_DWORD)v9 == -1) {
        return result;
      }
    }

    return swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::incrementSlow(v4 + 1, v9, 1LL, a4);
  }

  return result;
}

unint64_t *swift_retain_x28(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  __n128 result = v4;
  if ((_swift_enableSwizzlingOfAllocationAndRefCountingFunctions_forInstrumentsOnly & 1) != 0) {
    return _swift_retain(v4, (uint64_t)_swift_retain, a3, a4);
  }
  if ((uint64_t)v4 >= 1)
  {
    unint64_t v6 = v4 + 1;
    uint64_t v7 = v4[1];
    unint64_t v8 = v7 + 0x200000000LL;
    if (v7 + 0x200000000LL < 0)
    {
      uint64_t v9 = v4[1];
      if ((_DWORD)v7 == -1) {
        return result;
      }
    }

    else
    {
      do
      {
        uint64_t v9 = __ldxr(v6);
        if (v9 == v7)
        {
          if (!__stxr(v8, v6)) {
            return result;
          }
        }

        else
        {
          __clrex();
        }

        uint64_t v7 = v9;
        unint64_t v8 = v9 + 0x200000000LL;
      }

      while (v9 + 0x200000000LL >= 0);
      if ((_DWORD)v9 == -1) {
        return result;
      }
    }

    return swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::incrementSlow(v4 + 1, v9, 1LL, a4);
  }

  return result;
}

uint64_t swift_nonatomic_retain(uint64_t result, uint64_t a2, uint64_t a3, char *a4)
{
  if (result >= 1)
  {
    uint64_t v4 = *(void *)(result + 8);
    if (v4 + 0x200000000LL < 0)
    {
      if ((_DWORD)v4 != -1)
      {
        uint64_t v5 = result;
        swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::incrementNonAtomicSlow( (unsigned __int128 *)(result + 8),  v4,  1LL,  a4);
        return v5;
      }
    }

    else
    {
      *(void *)(result + 8) = v4 + 0x200000000LL;
    }
  }

  return result;
}

uint64_t swift_retain_n(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  if ((_swift_enableSwizzlingOfAllocationAndRefCountingFunctions_forInstrumentsOnly & 1) == 0)
  {
    if (a1 < 1) {
      return a1;
    }
    uint64_t v6 = *(void *)(a1 + 8);
    if ((_DWORD)a2 != 1 && (v6 & 0x80000000FFFFFFFFLL) == 0x80000000FFFFFFFFLL) {
      return a1;
    }
    unint64_t v8 = (unint64_t *)(a1 + 8);
    uint64_t v9 = a2 << 33;
    int64_t v10 = v6 + (a2 << 33);
    if (v10 < 0)
    {
      uint64_t v11 = *(void *)(a1 + 8);
      if ((_DWORD)v6 == -1) {
        return a1;
      }
    }

    else
    {
      do
      {
        uint64_t v11 = __ldxr(v8);
        if (v11 == v6)
        {
          if (!__stxr(v10, v8)) {
            return a1;
          }
        }

        else
        {
          __clrex();
        }

        uint64_t v6 = v11;
        int64_t v10 = v11 + v9;
      }

      while (v11 + v9 >= 0);
      if ((_DWORD)v11 == -1) {
        return a1;
      }
    }

    swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::incrementSlow(v8, v11, a2, a4);
    return a1;
  }

  return _swift_retain_n(a1, a2, a2, (char *)_swift_retain_n);
}

uint64_t swift_nonatomic_retain_n(uint64_t result, uint64_t a2, uint64_t a3, char *a4)
{
  if (result >= 1)
  {
    uint64_t v5 = *(void *)(result + 8);
    if ((_DWORD)a2 == 1 || (v5 & 0x80000000FFFFFFFFLL) != 0x80000000FFFFFFFFLL)
    {
      if (v5 + (a2 << 33) < 0)
      {
        if ((_DWORD)v5 != -1)
        {
          uint64_t v6 = result;
          swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::incrementNonAtomicSlow( (unsigned __int128 *)(result + 8),  v5,  a2,  a4);
          return v6;
        }
      }

      else
      {
        *(void *)(result + 8) = v5 + (a2 << 33);
      }
    }
  }

  return result;
}

void swift_release_x1(uint64_t a1, uint64_t a2)
{
  if ((_swift_enableSwizzlingOfAllocationAndRefCountingFunctions_forInstrumentsOnly & 1) != 0)
  {
    _swift_release(a2);
    return;
  }

  if (a2 >= 1)
  {
    uint64_t v2 = (unint64_t *)(a2 + 8);
    uint64_t v3 = *(void *)(a2 + 8);
    unint64_t v4 = v3 - 0x200000000LL;
    if (v3 - 0x200000000LL < 0)
    {
      uint64_t v5 = *(void *)(a2 + 8);
      if ((_DWORD)v3 == -1) {
        return;
      }
    }

    else
    {
      do
      {
        uint64_t v5 = __ldxr(v2);
        if (v5 == v3)
        {
          if (!__stlxr(v4, v2)) {
            return;
          }
        }

        else
        {
          __clrex();
        }

        uint64_t v3 = v5;
        unint64_t v4 = v5 - 0x200000000LL;
      }

      while (v5 - 0x200000000LL >= 0);
      if ((_DWORD)v5 == -1) {
        return;
      }
    }

    swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::doDecrementSlow<(swift::PerformDeinit)1>( v2,  v5,  1LL);
  }

void swift_release_x2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_swift_enableSwizzlingOfAllocationAndRefCountingFunctions_forInstrumentsOnly & 1) != 0)
  {
    _swift_release(a3);
    return;
  }

  if (a3 >= 1)
  {
    uint64_t v3 = (unint64_t *)(a3 + 8);
    uint64_t v4 = *(void *)(a3 + 8);
    unint64_t v5 = v4 - 0x200000000LL;
    if (v4 - 0x200000000LL < 0)
    {
      uint64_t v6 = *(void *)(a3 + 8);
      if ((_DWORD)v4 == -1) {
        return;
      }
    }

    else
    {
      do
      {
        uint64_t v6 = __ldxr(v3);
        if (v6 == v4)
        {
          if (!__stlxr(v5, v3)) {
            return;
          }
        }

        else
        {
          __clrex();
        }

        uint64_t v4 = v6;
        unint64_t v5 = v6 - 0x200000000LL;
      }

      while (v6 - 0x200000000LL >= 0);
      if ((_DWORD)v6 == -1) {
        return;
      }
    }

    swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::doDecrementSlow<(swift::PerformDeinit)1>( v3,  v6,  1LL);
  }

void swift_release_x3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((_swift_enableSwizzlingOfAllocationAndRefCountingFunctions_forInstrumentsOnly & 1) != 0)
  {
    _swift_release(a4);
    return;
  }

  if (a4 >= 1)
  {
    uint64_t v4 = (unint64_t *)(a4 + 8);
    uint64_t v5 = *(void *)(a4 + 8);
    unint64_t v6 = v5 - 0x200000000LL;
    if (v5 - 0x200000000LL < 0)
    {
      uint64_t v7 = *(void *)(a4 + 8);
      if ((_DWORD)v5 == -1) {
        return;
      }
    }

    else
    {
      do
      {
        uint64_t v7 = __ldxr(v4);
        if (v7 == v5)
        {
          if (!__stlxr(v6, v4)) {
            return;
          }
        }

        else
        {
          __clrex();
        }

        uint64_t v5 = v7;
        unint64_t v6 = v7 - 0x200000000LL;
      }

      while (v7 - 0x200000000LL >= 0);
      if ((_DWORD)v7 == -1) {
        return;
      }
    }

    swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::doDecrementSlow<(swift::PerformDeinit)1>( v4,  v7,  1LL);
  }

void swift_release_x4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if ((_swift_enableSwizzlingOfAllocationAndRefCountingFunctions_forInstrumentsOnly & 1) != 0)
  {
    _swift_release(a5);
    return;
  }

  if (a5 >= 1)
  {
    uint64_t v5 = (unint64_t *)(a5 + 8);
    uint64_t v6 = *(void *)(a5 + 8);
    unint64_t v7 = v6 - 0x200000000LL;
    if (v6 - 0x200000000LL < 0)
    {
      uint64_t v8 = *(void *)(a5 + 8);
      if ((_DWORD)v6 == -1) {
        return;
      }
    }

    else
    {
      do
      {
        uint64_t v8 = __ldxr(v5);
        if (v8 == v6)
        {
          if (!__stlxr(v7, v5)) {
            return;
          }
        }

        else
        {
          __clrex();
        }

        uint64_t v6 = v8;
        unint64_t v7 = v8 - 0x200000000LL;
      }

      while (v8 - 0x200000000LL >= 0);
      if ((_DWORD)v8 == -1) {
        return;
      }
    }

    swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::doDecrementSlow<(swift::PerformDeinit)1>( v5,  v8,  1LL);
  }

void swift_release_x5(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((_swift_enableSwizzlingOfAllocationAndRefCountingFunctions_forInstrumentsOnly & 1) != 0)
  {
    _swift_release(a6);
    return;
  }

  if (a6 >= 1)
  {
    uint64_t v6 = (unint64_t *)(a6 + 8);
    uint64_t v7 = *(void *)(a6 + 8);
    unint64_t v8 = v7 - 0x200000000LL;
    if (v7 - 0x200000000LL < 0)
    {
      uint64_t v9 = *(void *)(a6 + 8);
      if ((_DWORD)v7 == -1) {
        return;
      }
    }

    else
    {
      do
      {
        uint64_t v9 = __ldxr(v6);
        if (v9 == v7)
        {
          if (!__stlxr(v8, v6)) {
            return;
          }
        }

        else
        {
          __clrex();
        }

        uint64_t v7 = v9;
        unint64_t v8 = v9 - 0x200000000LL;
      }

      while (v9 - 0x200000000LL >= 0);
      if ((_DWORD)v9 == -1) {
        return;
      }
    }

    swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::doDecrementSlow<(swift::PerformDeinit)1>( v6,  v9,  1LL);
  }

void swift_release_x6(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if ((_swift_enableSwizzlingOfAllocationAndRefCountingFunctions_forInstrumentsOnly & 1) != 0)
  {
    _swift_release(a7);
    return;
  }

  if (a7 >= 1)
  {
    uint64_t v7 = (unint64_t *)(a7 + 8);
    uint64_t v8 = *(void *)(a7 + 8);
    unint64_t v9 = v8 - 0x200000000LL;
    if (v8 - 0x200000000LL < 0)
    {
      uint64_t v10 = *(void *)(a7 + 8);
      if ((_DWORD)v8 == -1) {
        return;
      }
    }

    else
    {
      do
      {
        uint64_t v10 = __ldxr(v7);
        if (v10 == v8)
        {
          if (!__stlxr(v9, v7)) {
            return;
          }
        }

        else
        {
          __clrex();
        }

        uint64_t v8 = v10;
        unint64_t v9 = v10 - 0x200000000LL;
      }

      while (v10 - 0x200000000LL >= 0);
      if ((_DWORD)v10 == -1) {
        return;
      }
    }

    swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::doDecrementSlow<(swift::PerformDeinit)1>( v7,  v10,  1LL);
  }

void swift_release_x7( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((_swift_enableSwizzlingOfAllocationAndRefCountingFunctions_forInstrumentsOnly & 1) != 0)
  {
    _swift_release(a8);
    return;
  }

  if (a8 >= 1)
  {
    uint64_t v8 = (unint64_t *)(a8 + 8);
    uint64_t v9 = *(void *)(a8 + 8);
    unint64_t v10 = v9 - 0x200000000LL;
    if (v9 - 0x200000000LL < 0)
    {
      uint64_t v11 = *(void *)(a8 + 8);
      if ((_DWORD)v9 == -1) {
        return;
      }
    }

    else
    {
      do
      {
        uint64_t v11 = __ldxr(v8);
        if (v11 == v9)
        {
          if (!__stlxr(v10, v8)) {
            return;
          }
        }

        else
        {
          __clrex();
        }

        uint64_t v9 = v11;
        unint64_t v10 = v11 - 0x200000000LL;
      }

      while (v11 - 0x200000000LL >= 0);
      if ((_DWORD)v11 == -1) {
        return;
      }
    }

    swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::doDecrementSlow<(swift::PerformDeinit)1>( v8,  v11,  1LL);
  }

void swift_release_x8(uint64_t a1@<X8>)
{
  if ((_swift_enableSwizzlingOfAllocationAndRefCountingFunctions_forInstrumentsOnly & 1) != 0)
  {
    _swift_release(a1);
    return;
  }

  if (a1 >= 1)
  {
    uint64_t v1 = (unint64_t *)(a1 + 8);
    uint64_t v2 = *(void *)(a1 + 8);
    unint64_t v3 = v2 - 0x200000000LL;
    if (v2 - 0x200000000LL < 0)
    {
      uint64_t v4 = *(void *)(a1 + 8);
      if ((_DWORD)v2 == -1) {
        return;
      }
    }

    else
    {
      do
      {
        uint64_t v4 = __ldxr(v1);
        if (v4 == v2)
        {
          if (!__stlxr(v3, v1)) {
            return;
          }
        }

        else
        {
          __clrex();
        }

        uint64_t v2 = v4;
        unint64_t v3 = v4 - 0x200000000LL;
      }

      while (v4 - 0x200000000LL >= 0);
      if ((_DWORD)v4 == -1) {
        return;
      }
    }

    swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::doDecrementSlow<(swift::PerformDeinit)1>( v1,  v4,  1LL);
  }

void swift_release_x9()
{
  if ((_swift_enableSwizzlingOfAllocationAndRefCountingFunctions_forInstrumentsOnly & 1) != 0)
  {
    _swift_release(v0);
    return;
  }

  if (v0 >= 1)
  {
    uint64_t v1 = (unint64_t *)(v0 + 8);
    uint64_t v2 = *(void *)(v0 + 8);
    unint64_t v3 = v2 - 0x200000000LL;
    if (v2 - 0x200000000LL < 0)
    {
      uint64_t v4 = v2;
      if ((_DWORD)v2 == -1) {
        return;
      }
    }

    else
    {
      do
      {
        uint64_t v4 = __ldxr(v1);
        if (v4 == v2)
        {
          if (!__stlxr(v3, v1)) {
            return;
          }
        }

        else
        {
          __clrex();
        }

        uint64_t v2 = v4;
        unint64_t v3 = v4 - 0x200000000LL;
      }

      while (v4 - 0x200000000LL >= 0);
      if ((_DWORD)v4 == -1) {
        return;
      }
    }

    swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::doDecrementSlow<(swift::PerformDeinit)1>( v1,  v4,  1LL);
  }

void swift_release_x10()
{
  if ((_swift_enableSwizzlingOfAllocationAndRefCountingFunctions_forInstrumentsOnly & 1) != 0)
  {
    _swift_release(v0);
    return;
  }

  if (v0 >= 1)
  {
    uint64_t v1 = (unint64_t *)(v0 + 8);
    uint64_t v2 = *(void *)(v0 + 8);
    unint64_t v3 = v2 - 0x200000000LL;
    if (v2 - 0x200000000LL < 0)
    {
      uint64_t v4 = v2;
      if ((_DWORD)v2 == -1) {
        return;
      }
    }

    else
    {
      do
      {
        uint64_t v4 = __ldxr(v1);
        if (v4 == v2)
        {
          if (!__stlxr(v3, v1)) {
            return;
          }
        }

        else
        {
          __clrex();
        }

        uint64_t v2 = v4;
        unint64_t v3 = v4 - 0x200000000LL;
      }

      while (v4 - 0x200000000LL >= 0);
      if ((_DWORD)v4 == -1) {
        return;
      }
    }

    swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::doDecrementSlow<(swift::PerformDeinit)1>( v1,  v4,  1LL);
  }

void swift_release_x11()
{
  if ((_swift_enableSwizzlingOfAllocationAndRefCountingFunctions_forInstrumentsOnly & 1) != 0)
  {
    _swift_release(v0);
    return;
  }

  if (v0 >= 1)
  {
    uint64_t v1 = (unint64_t *)(v0 + 8);
    uint64_t v2 = *(void *)(v0 + 8);
    unint64_t v3 = v2 - 0x200000000LL;
    if (v2 - 0x200000000LL < 0)
    {
      uint64_t v4 = *(void *)(v0 + 8);
      if ((_DWORD)v2 == -1) {
        return;
      }
    }

    else
    {
      do
      {
        uint64_t v4 = __ldxr(v1);
        if (v4 == v2)
        {
          if (!__stlxr(v3, v1)) {
            return;
          }
        }

        else
        {
          __clrex();
        }

        uint64_t v2 = v4;
        unint64_t v3 = v4 - 0x200000000LL;
      }

      while (v4 - 0x200000000LL >= 0);
      if ((_DWORD)v4 == -1) {
        return;
      }
    }

    swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::doDecrementSlow<(swift::PerformDeinit)1>( v1,  v4,  1LL);
  }

void swift_release_x12()
{
  if ((_swift_enableSwizzlingOfAllocationAndRefCountingFunctions_forInstrumentsOnly & 1) != 0)
  {
    _swift_release(v0);
    return;
  }

  if (v0 >= 1)
  {
    uint64_t v1 = (unint64_t *)(v0 + 8);
    uint64_t v2 = *(void *)(v0 + 8);
    unint64_t v3 = v2 - 0x200000000LL;
    if (v2 - 0x200000000LL < 0)
    {
      uint64_t v4 = *(void *)(v0 + 8);
      if ((_DWORD)v2 == -1) {
        return;
      }
    }

    else
    {
      do
      {
        uint64_t v4 = __ldxr(v1);
        if (v4 == v2)
        {
          if (!__stlxr(v3, v1)) {
            return;
          }
        }

        else
        {
          __clrex();
        }

        uint64_t v2 = v4;
        unint64_t v3 = v4 - 0x200000000LL;
      }

      while (v4 - 0x200000000LL >= 0);
      if ((_DWORD)v4 == -1) {
        return;
      }
    }

    swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::doDecrementSlow<(swift::PerformDeinit)1>( v1,  v4,  1LL);
  }

void swift_release_x13()
{
  if ((_swift_enableSwizzlingOfAllocationAndRefCountingFunctions_forInstrumentsOnly & 1) != 0)
  {
    _swift_release(v0);
    return;
  }

  if (v0 >= 1)
  {
    uint64_t v1 = (unint64_t *)(v0 + 8);
    uint64_t v2 = *(void *)(v0 + 8);
    unint64_t v3 = v2 - 0x200000000LL;
    if (v2 - 0x200000000LL < 0)
    {
      uint64_t v4 = *(void *)(v0 + 8);
      if ((_DWORD)v2 == -1) {
        return;
      }
    }

    else
    {
      do
      {
        uint64_t v4 = __ldxr(v1);
        if (v4 == v2)
        {
          if (!__stlxr(v3, v1)) {
            return;
          }
        }

        else
        {
          __clrex();
        }

        uint64_t v2 = v4;
        unint64_t v3 = v4 - 0x200000000LL;
      }

      while (v4 - 0x200000000LL >= 0);
      if ((_DWORD)v4 == -1) {
        return;
      }
    }

    swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::doDecrementSlow<(swift::PerformDeinit)1>( v1,  v4,  1LL);
  }

void swift_release_x14()
{
  if ((_swift_enableSwizzlingOfAllocationAndRefCountingFunctions_forInstrumentsOnly & 1) != 0)
  {
    _swift_release(v0);
    return;
  }

  if (v0 >= 1)
  {
    uint64_t v1 = (unint64_t *)(v0 + 8);
    uint64_t v2 = *(void *)(v0 + 8);
    unint64_t v3 = v2 - 0x200000000LL;
    if (v2 - 0x200000000LL < 0)
    {
      uint64_t v4 = *(void *)(v0 + 8);
      if ((_DWORD)v2 == -1) {
        return;
      }
    }

    else
    {
      do
      {
        uint64_t v4 = __ldxr(v1);
        if (v4 == v2)
        {
          if (!__stlxr(v3, v1)) {
            return;
          }
        }

        else
        {
          __clrex();
        }

        uint64_t v2 = v4;
        unint64_t v3 = v4 - 0x200000000LL;
      }

      while (v4 - 0x200000000LL >= 0);
      if ((_DWORD)v4 == -1) {
        return;
      }
    }

    swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::doDecrementSlow<(swift::PerformDeinit)1>( v1,  v4,  1LL);
  }

void swift_release_x15()
{
  if ((_swift_enableSwizzlingOfAllocationAndRefCountingFunctions_forInstrumentsOnly & 1) != 0)
  {
    _swift_release(v0);
    return;
  }

  if (v0 >= 1)
  {
    uint64_t v1 = (unint64_t *)(v0 + 8);
    uint64_t v2 = *(void *)(v0 + 8);
    unint64_t v3 = v2 - 0x200000000LL;
    if (v2 - 0x200000000LL < 0)
    {
      uint64_t v4 = *(void *)(v0 + 8);
      if ((_DWORD)v2 == -1) {
        return;
      }
    }

    else
    {
      do
      {
        uint64_t v4 = __ldxr(v1);
        if (v4 == v2)
        {
          if (!__stlxr(v3, v1)) {
            return;
          }
        }

        else
        {
          __clrex();
        }

        uint64_t v2 = v4;
        unint64_t v3 = v4 - 0x200000000LL;
      }

      while (v4 - 0x200000000LL >= 0);
      if ((_DWORD)v4 == -1) {
        return;
      }
    }

    swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::doDecrementSlow<(swift::PerformDeinit)1>( v1,  v4,  1LL);
  }

void swift_release_x19()
{
  if ((_swift_enableSwizzlingOfAllocationAndRefCountingFunctions_forInstrumentsOnly & 1) != 0)
  {
    _swift_release(v0);
    return;
  }

  if (v0 >= 1)
  {
    uint64_t v1 = (unint64_t *)(v0 + 8);
    uint64_t v2 = *(void *)(v0 + 8);
    unint64_t v3 = v2 - 0x200000000LL;
    if (v2 - 0x200000000LL < 0)
    {
      uint64_t v4 = *(void *)(v0 + 8);
      if ((_DWORD)v2 == -1) {
        return;
      }
    }

    else
    {
      do
      {
        uint64_t v4 = __ldxr(v1);
        if (v4 == v2)
        {
          if (!__stlxr(v3, v1)) {
            return;
          }
        }

        else
        {
          __clrex();
        }

        uint64_t v2 = v4;
        unint64_t v3 = v4 - 0x200000000LL;
      }

      while (v4 - 0x200000000LL >= 0);
      if ((_DWORD)v4 == -1) {
        return;
      }
    }

    swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::doDecrementSlow<(swift::PerformDeinit)1>( v1,  v4,  1LL);
  }

void swift_release_x20()
{
  if ((_swift_enableSwizzlingOfAllocationAndRefCountingFunctions_forInstrumentsOnly & 1) != 0)
  {
    _swift_release(v0);
    return;
  }

  if (v0 >= 1)
  {
    uint64_t v1 = (unint64_t *)(v0 + 8);
    uint64_t v2 = *(void *)(v0 + 8);
    unint64_t v3 = v2 - 0x200000000LL;
    if (v2 - 0x200000000LL < 0)
    {
      uint64_t v4 = *(void *)(v0 + 8);
      if ((_DWORD)v2 == -1) {
        return;
      }
    }

    else
    {
      do
      {
        uint64_t v4 = __ldxr(v1);
        if (v4 == v2)
        {
          if (!__stlxr(v3, v1)) {
            return;
          }
        }

        else
        {
          __clrex();
        }

        uint64_t v2 = v4;
        unint64_t v3 = v4 - 0x200000000LL;
      }

      while (v4 - 0x200000000LL >= 0);
      if ((_DWORD)v4 == -1) {
        return;
      }
    }

    swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::doDecrementSlow<(swift::PerformDeinit)1>( v1,  v4,  1LL);
  }

void swift_release_x21()
{
  if ((_swift_enableSwizzlingOfAllocationAndRefCountingFunctions_forInstrumentsOnly & 1) != 0)
  {
    _swift_release(v0);
    return;
  }

  if (v0 >= 1)
  {
    uint64_t v1 = (unint64_t *)(v0 + 8);
    uint64_t v2 = *(void *)(v0 + 8);
    unint64_t v3 = v2 - 0x200000000LL;
    if (v2 - 0x200000000LL < 0)
    {
      uint64_t v4 = *(void *)(v0 + 8);
      if ((_DWORD)v2 == -1) {
        return;
      }
    }

    else
    {
      do
      {
        uint64_t v4 = __ldxr(v1);
        if (v4 == v2)
        {
          if (!__stlxr(v3, v1)) {
            return;
          }
        }

        else
        {
          __clrex();
        }

        uint64_t v2 = v4;
        unint64_t v3 = v4 - 0x200000000LL;
      }

      while (v4 - 0x200000000LL >= 0);
      if ((_DWORD)v4 == -1) {
        return;
      }
    }

    swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::doDecrementSlow<(swift::PerformDeinit)1>( v1,  v4,  1LL);
  }

void swift_release_x22()
{
  if ((_swift_enableSwizzlingOfAllocationAndRefCountingFunctions_forInstrumentsOnly & 1) != 0)
  {
    _swift_release(v0);
    return;
  }

  if (v0 >= 1)
  {
    uint64_t v1 = (unint64_t *)(v0 + 8);
    uint64_t v2 = *(void *)(v0 + 8);
    unint64_t v3 = v2 - 0x200000000LL;
    if (v2 - 0x200000000LL < 0)
    {
      uint64_t v4 = *(void *)(v0 + 8);
      if ((_DWORD)v2 == -1) {
        return;
      }
    }

    else
    {
      do
      {
        uint64_t v4 = __ldxr(v1);
        if (v4 == v2)
        {
          if (!__stlxr(v3, v1)) {
            return;
          }
        }

        else
        {
          __clrex();
        }

        uint64_t v2 = v4;
        unint64_t v3 = v4 - 0x200000000LL;
      }

      while (v4 - 0x200000000LL >= 0);
      if ((_DWORD)v4 == -1) {
        return;
      }
    }

    swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::doDecrementSlow<(swift::PerformDeinit)1>( v1,  v4,  1LL);
  }

void swift_release_x23()
{
  if ((_swift_enableSwizzlingOfAllocationAndRefCountingFunctions_forInstrumentsOnly & 1) != 0)
  {
    _swift_release(v0);
    return;
  }

  if (v0 >= 1)
  {
    uint64_t v1 = (unint64_t *)(v0 + 8);
    uint64_t v2 = *(void *)(v0 + 8);
    unint64_t v3 = v2 - 0x200000000LL;
    if (v2 - 0x200000000LL < 0)
    {
      uint64_t v4 = *(void *)(v0 + 8);
      if ((_DWORD)v2 == -1) {
        return;
      }
    }

    else
    {
      do
      {
        uint64_t v4 = __ldxr(v1);
        if (v4 == v2)
        {
          if (!__stlxr(v3, v1)) {
            return;
          }
        }

        else
        {
          __clrex();
        }

        uint64_t v2 = v4;
        unint64_t v3 = v4 - 0x200000000LL;
      }

      while (v4 - 0x200000000LL >= 0);
      if ((_DWORD)v4 == -1) {
        return;
      }
    }

    swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::doDecrementSlow<(swift::PerformDeinit)1>( v1,  v4,  1LL);
  }

void swift_release_x24()
{
  if ((_swift_enableSwizzlingOfAllocationAndRefCountingFunctions_forInstrumentsOnly & 1) != 0)
  {
    _swift_release(v0);
    return;
  }

  if (v0 >= 1)
  {
    uint64_t v1 = (unint64_t *)(v0 + 8);
    uint64_t v2 = *(void *)(v0 + 8);
    unint64_t v3 = v2 - 0x200000000LL;
    if (v2 - 0x200000000LL < 0)
    {
      uint64_t v4 = *(void *)(v0 + 8);
      if ((_DWORD)v2 == -1) {
        return;
      }
    }

    else
    {
      do
      {
        uint64_t v4 = __ldxr(v1);
        if (v4 == v2)
        {
          if (!__stlxr(v3, v1)) {
            return;
          }
        }

        else
        {
          __clrex();
        }

        uint64_t v2 = v4;
        unint64_t v3 = v4 - 0x200000000LL;
      }

      while (v4 - 0x200000000LL >= 0);
      if ((_DWORD)v4 == -1) {
        return;
      }
    }

    swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::doDecrementSlow<(swift::PerformDeinit)1>( v1,  v4,  1LL);
  }

void swift_release_x25()
{
  if ((_swift_enableSwizzlingOfAllocationAndRefCountingFunctions_forInstrumentsOnly & 1) != 0)
  {
    _swift_release(v0);
    return;
  }

  if (v0 >= 1)
  {
    uint64_t v1 = (unint64_t *)(v0 + 8);
    uint64_t v2 = *(void *)(v0 + 8);
    unint64_t v3 = v2 - 0x200000000LL;
    if (v2 - 0x200000000LL < 0)
    {
      uint64_t v4 = *(void *)(v0 + 8);
      if ((_DWORD)v2 == -1) {
        return;
      }
    }

    else
    {
      do
      {
        uint64_t v4 = __ldxr(v1);
        if (v4 == v2)
        {
          if (!__stlxr(v3, v1)) {
            return;
          }
        }

        else
        {
          __clrex();
        }

        uint64_t v2 = v4;
        unint64_t v3 = v4 - 0x200000000LL;
      }

      while (v4 - 0x200000000LL >= 0);
      if ((_DWORD)v4 == -1) {
        return;
      }
    }

    swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::doDecrementSlow<(swift::PerformDeinit)1>( v1,  v4,  1LL);
  }

void swift_release_x26()
{
  if ((_swift_enableSwizzlingOfAllocationAndRefCountingFunctions_forInstrumentsOnly & 1) != 0)
  {
    _swift_release(v0);
    return;
  }

  if (v0 >= 1)
  {
    uint64_t v1 = (unint64_t *)(v0 + 8);
    uint64_t v2 = *(void *)(v0 + 8);
    unint64_t v3 = v2 - 0x200000000LL;
    if (v2 - 0x200000000LL < 0)
    {
      uint64_t v4 = *(void *)(v0 + 8);
      if ((_DWORD)v2 == -1) {
        return;
      }
    }

    else
    {
      do
      {
        uint64_t v4 = __ldxr(v1);
        if (v4 == v2)
        {
          if (!__stlxr(v3, v1)) {
            return;
          }
        }

        else
        {
          __clrex();
        }

        uint64_t v2 = v4;
        unint64_t v3 = v4 - 0x200000000LL;
      }

      while (v4 - 0x200000000LL >= 0);
      if ((_DWORD)v4 == -1) {
        return;
      }
    }

    swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::doDecrementSlow<(swift::PerformDeinit)1>( v1,  v4,  1LL);
  }

void swift_release_x27()
{
  if ((_swift_enableSwizzlingOfAllocationAndRefCountingFunctions_forInstrumentsOnly & 1) != 0)
  {
    _swift_release(v0);
    return;
  }

  if (v0 >= 1)
  {
    uint64_t v1 = (unint64_t *)(v0 + 8);
    uint64_t v2 = *(void *)(v0 + 8);
    unint64_t v3 = v2 - 0x200000000LL;
    if (v2 - 0x200000000LL < 0)
    {
      uint64_t v4 = *(void *)(v0 + 8);
      if ((_DWORD)v2 == -1) {
        return;
      }
    }

    else
    {
      do
      {
        uint64_t v4 = __ldxr(v1);
        if (v4 == v2)
        {
          if (!__stlxr(v3, v1)) {
            return;
          }
        }

        else
        {
          __clrex();
        }

        uint64_t v2 = v4;
        unint64_t v3 = v4 - 0x200000000LL;
      }

      while (v4 - 0x200000000LL >= 0);
      if ((_DWORD)v4 == -1) {
        return;
      }
    }

    swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::doDecrementSlow<(swift::PerformDeinit)1>( v1,  v4,  1LL);
  }

void swift_release_x28()
{
  if ((_swift_enableSwizzlingOfAllocationAndRefCountingFunctions_forInstrumentsOnly & 1) != 0)
  {
    _swift_release(v0);
    return;
  }

  if (v0 >= 1)
  {
    uint64_t v1 = (unint64_t *)(v0 + 8);
    uint64_t v2 = *(void *)(v0 + 8);
    unint64_t v3 = v2 - 0x200000000LL;
    if (v2 - 0x200000000LL < 0)
    {
      uint64_t v4 = *(void *)(v0 + 8);
      if ((_DWORD)v2 == -1) {
        return;
      }
    }

    else
    {
      do
      {
        uint64_t v4 = __ldxr(v1);
        if (v4 == v2)
        {
          if (!__stlxr(v3, v1)) {
            return;
          }
        }

        else
        {
          __clrex();
        }

        uint64_t v2 = v4;
        unint64_t v3 = v4 - 0x200000000LL;
      }

      while (v4 - 0x200000000LL >= 0);
      if ((_DWORD)v4 == -1) {
        return;
      }
    }

    swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::doDecrementSlow<(swift::PerformDeinit)1>( v1,  v4,  1LL);
  }

uint64_t swift_nonatomic_release(uint64_t result)
{
  if (result < 1) {
    return result;
  }
  uint64_t v1 = *(void *)(result + 8);
  if ((v1 & 0x80000000FFFFFFFELL) == 2)
  {
    if (v1 > 0x1FFFFFFFFLL)
    {
      *(void *)(result + 8) = v1 - 0x200000000LL;
      return result;
    }

    if ((_DWORD)v1 == -1) {
      return result;
    }
LABEL_11:
    *(void *)(result + 8) = v1 & 0x80000000FFFFFFFFLL | 0x100000000LL;
    return _swift_release_dealloc((void *)result);
  }

  if (v1 - 0x200000000LL >= 0)
  {
    *(void *)(result + 8) = v1 - 0x200000000LL;
    return result;
  }

  if ((_DWORD)v1 != -1)
  {
    if (v1 < 0) {
      return swift::HeapObjectSideTableEntry::decrementNonAtomicStrong<(swift::PerformDeinit)1>( (void **)(8 * v1),  1LL);
    }
    goto LABEL_11;
  }

  return result;
}

uint64_t swift_release_n(uint64_t result, uint64_t a2)
{
  if ((_swift_enableSwizzlingOfAllocationAndRefCountingFunctions_forInstrumentsOnly & 1) != 0) {
    return _swift_release_n(result, a2);
  }
  if (result >= 1)
  {
    uint64_t v3 = *(void *)(result + 8);
    if ((_DWORD)a2 == 1 || (v3 & 0x80000000FFFFFFFFLL) != 0x80000000FFFFFFFFLL)
    {
      result += 8LL;
      if (a2 < 2 || (v3 & 0x8000000000000000LL) == 0)
      {
        uint64_t v4 = a2 << 33;
        while (v3 - v4 >= 0)
        {
          uint64_t v5 = __ldxr((unint64_t *)result);
          if (v5 == v3)
          {
          }

          else
          {
            __clrex();
          }

          uint64_t v3 = v5;
          if (a2 >= 2)
          {
            uint64_t v3 = v5;
            if (v5 < 0) {
              goto LABEL_18;
            }
          }
        }
      }

      uint64_t v5 = v3;
LABEL_18:
      if ((_DWORD)v5 != -1) {
        return swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::doDecrementSlow<(swift::PerformDeinit)1>( (unint64_t *)result,  v5,  a2);
      }
    }
  }

  return result;
}

uint64_t swift_nonatomic_release_n(uint64_t result, uint64_t a2)
{
  if (result >= 1)
  {
    uint64_t v2 = *(void *)(result + 8);
    if ((v2 & 0x80000000FFFFFFFELL) == 2)
    {
      uint64_t v3 = v2 - (a2 << 33);
      if (v3 < 0)
      {
        if ((_DWORD)v2 == -1) {
          return result;
        }
LABEL_14:
        *(void *)(result + 8) = v2 & 0x80000000FFFFFFFFLL | 0x100000000LL;
        return _swift_release_dealloc((void *)result);
      }

uint64_t swift_retainCount(uint64_t a1)
{
  if (a1 < 1) {
    return 0LL;
  }
  unint64_t v1 = *(void *)(a1 + 8);
  if ((v1 & 0x8000000000000000LL) != 0 && *(void *)(a1 + 8) != 0xFFFFFFFFLL)
  {
    uint64_t v2 = (unsigned __int128 *)(8 * v1 + 16);
    do
    {
      unsigned __int128 v3 = __ldxp(v2);
      unint64_t v1 = v3;
    }

    while (__stxp(v3, v2));
  }

  return ((v1 >> 33) & 0x3FFFFFFF) + 1;
}

uint64_t swift_unownedRetainCount(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1 < 0 && *(void *)(a1 + 8) != 0xFFFFFFFFLL)
  {
    uint64_t v2 = (unsigned __int128 *)(8 * v1 + 16);
    do
    {
      unsigned __int128 v3 = __ldxp(v2);
      LODWORD(swift_asprintf(v0, v1) = v3;
    }

    while (__stxp(v3, v2));
  }

  return v1 >> 1;
}

uint64_t swift_weakRetainCount(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = (unsigned __int128 *)(8 * v1 + 16);
  do
    unsigned __int128 v3 = __ldxp(v2);
  while (__stxp(v3, v2));
  return DWORD2(v3);
}

uint64_t swift_unownedRetain(uint64_t a1, uint64_t a2, const char *a3, char *a4)
{
  if (a1 >= 1) {
    swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::incrementUnowned( (unint64_t *)(a1 + 8),  1LL,  a3,  a4);
  }
  return a1;
}

unint64_t *swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::incrementUnowned( unint64_t *result, uint64_t a2, const char *a3, char *a4)
{
  unint64_t v4 = *result;
  if ((~*result & 0x80000000FFFFFFFFLL) == 0) {
    return result;
  }
  if ((v4 & 0x8000000000000000LL) != 0) {
    goto LABEL_16;
  }
  unint64_t v5 = *result;
  do
  {
    do
    {
      unsigned int v6 = 2 * (a2 + (v5 >> 1));
      if (v6 == -2 || v6 >> 1 != (_DWORD)a2 + (v5 >> 1)) {
        return (unint64_t *)swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::incrementUnownedSlow( result,  a2,  a3,  a4);
      }
      unint64_t v4 = __ldxr(result);
      if (v4 == v5)
      {
        if (!__stxr(v5 & 0xFFFFFFFF00000001LL | (2LL * (v6 >> 1)), result))
        {
          char v8 = 1;
          goto LABEL_14;
        }
      }

      else
      {
        __clrex();
      }

      char v8 = 0;
LABEL_14:
      if ((v8 & 1) != 0) {
        return result;
      }
      unint64_t v5 = v4;
    }

    while ((v4 & 0x8000000000000000LL) == 0);
LABEL_16:
    unint64_t v5 = v4;
  }

  while (v4 == 0xFFFFFFFFLL);
  __n128 result = (unint64_t *)(8 * v4 + 16);
  do
  {
    unsigned __int128 v11 = __ldxp((unsigned __int128 *)result);
    unsigned int v10 = DWORD2(v11);
    uint64_t v9 = v11;
  }

  while (__stxp(v11, (unsigned __int128 *)result));
  if ((v11 & 0x8000000000000000LL) == 0 || v11 != 0xFFFFFFFFLL)
  {
    unsigned int v12 = 2 * (a2 + (v11 >> 1));
    if (v12 == -2 || v12 >> 1 != (_DWORD)a2 + (v11 >> 1)) {
LABEL_43:
    }
      swift::RefCounts<swift::SideTableRefCountBits>::incrementUnownedSlow((swift *)result, a2, a3, a4);
    uint64_t v14 = HIDWORD(*((void *)&v11 + 1));
    while (1)
    {
      unint64_t v15 = v9 & 0xFFFFFFFF00000001LL | (2LL * (v12 >> 1));
      unint64_t v16 = v10;
      unint64_t v17 = v10 | (unint64_t)(v14 << 32);
      do
      {
        while (1)
        {
          unsigned __int128 v18 = __ldxp((unsigned __int128 *)result);
          unsigned int v10 = DWORD2(v18);
          int v19 = (void)v18 != v9;
          if (*((void *)&v18 + 1) != v17) {
            ++v19;
          }
          if (!v19) {
            break;
          }
        }
      }

      while (__stxp(__PAIR128__(v16, v15), (unsigned __int128 *)result));
LABEL_35:
      if ((void)v18 == v9 && *((void *)&v18 + 1) == v17) {
        break;
      }
      unsigned int v12 = 2 * (a2 + (v18 >> 1));
      BOOL v21 = v12 != -2 && v12 >> 1 == (_DWORD)a2 + (v18 >> 1);
      uint64_t v9 = v18;
      uint64_t v14 = HIDWORD(*((void *)&v18 + 1));
      if (!v21) {
        goto LABEL_43;
      }
    }
  }

  return result;
}

void swift_unownedRelease(uint64_t a1)
{
  if (a1 < 1) {
    return;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if ((~v2 & 0x80000000FFFFFFFFLL) == 0) {
    return;
  }
  unsigned __int128 v3 = (unint64_t *)(a1 + 8);
  if ((v2 & 0x8000000000000000LL) != 0) {
    goto LABEL_12;
  }
  unint64_t v4 = *(void *)(a1 + 8);
  while (1)
  {
    unsigned int v5 = (v4 >> 1) - 1;
    unint64_t v2 = __ldxr(v3);
    if (v2 == v4)
    {
      if (!__stxr((2 * v5) | v4 & 0xFFFFFFFF00000001LL, v3))
      {
        char v6 = 1;
        goto LABEL_10;
      }
    }

    else
    {
      __clrex();
    }

    char v6 = 0;
LABEL_10:
    if ((v6 & 1) != 0) {
      break;
    }
    unint64_t v4 = v2;
    if ((v2 & 0x8000000000000000LL) != 0)
    {
LABEL_12:
      unint64_t v4 = v2;
      if (v2 != 0xFFFFFFFFLL)
      {
        if ((swift::HeapObjectSideTableEntry::decrementUnownedShouldFree( (swift::HeapObjectSideTableEntry *)(8 * v2),  1) & 1) == 0) {
          return;
        }
        goto LABEL_14;
      }
    }
  }

  if ((v5 & 0x7FFFFFFF) == 0) {
LABEL_14:
  }
    swift_slowDealloc((void *)a1);
}

uint64_t swift_nonatomic_unownedRetain(uint64_t a1, uint64_t a2, const char *a3, char *a4)
{
  if (a1 >= 1) {
    swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::incrementUnownedNonAtomic( (unint64_t *)(a1 + 8),  1LL,  a3,  a4);
  }
  return a1;
}

unint64_t *swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::incrementUnownedNonAtomic( unint64_t *result, uint64_t a2, const char *a3, char *a4)
{
  unint64_t v4 = *result;
  if ((~*result & 0x80000000FFFFFFFFLL) != 0)
  {
    if ((v4 & 0x8000000000000000LL) == 0 || *result == 0xFFFFFFFFLL)
    {
      unsigned int v6 = 2 * (a2 + (v4 >> 1));
      else {
        return (unint64_t *)swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::incrementUnownedSlow( result,  a2,  a3,  a4);
      }
    }

    else
    {
      __n128 result = (unint64_t *)(8 * v4 + 16);
      do
        unsigned __int128 v5 = __ldxp((unsigned __int128 *)result);
      while (__stxp(v5, (unsigned __int128 *)result));
      if ((v5 & 0x8000000000000000LL) == 0 || v5 != 0xFFFFFFFFLL)
      {
        unsigned int v8 = 2 * (a2 + (v5 >> 1));
        do
          __ldxp((unsigned __int128 *)result);
        while (__stxp( __PAIR128__(DWORD2(v5), v5 & 0xFFFFFFFF00000001LL | (2LL * (v8 >> 1))),  (unsigned __int128 *)result));
      }
    }
  }

  return result;
}

void swift_nonatomic_unownedRelease(unint64_t *a1)
{
  if ((uint64_t)a1 >= 1)
  {
    if (swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::decrementUnownedShouldFreeNonAtomic( a1 + 1,  1)) {
      swift_slowDealloc(a1);
    }
  }

uint64_t swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::decrementUnownedShouldFreeNonAtomic( unint64_t *a1, int a2)
{
  unint64_t v2 = *a1;
  if ((~*a1 & 0x80000000FFFFFFFFLL) == 0) {
    return 0LL;
  }
  if ((v2 & 0x8000000000000000LL) == 0 || *a1 == 0xFFFFFFFFLL)
  {
    int v8 = (v2 >> 1) - a2;
    unint64_t v9 = (2 * v8) | v2 & 0xFFFFFFFF00000001LL;
    BOOL v3 = (v8 & 0x7FFFFFFF) == 0LL;
    *a1 = v9;
    return v3;
  }

  unint64_t v4 = (void *)(8 * v2);
  unsigned __int128 v5 = (unsigned __int128 *)(8 * v2 + 16);
  do
    unsigned __int128 v6 = __ldxp(v5);
  while (__stxp(v6, v5));
  do
    __ldxp(v5);
  while (__stxp( __PAIR128__(DWORD2(v6), (2 * ((v6 >> 1) - a2)) | (unint64_t)v6 & 0xFFFFFFFF00000001LL),  v5));
  do
    unsigned __int128 v7 = __ldxp(v5);
  while (__stxp(v7, v5));
  do
    __ldxp(v5);
  while (__stxp(v7, v5));
  if (DWORD2(v7) == 1) {
    swift_slowDealloc(v4);
  }
  return 1LL;
}

uint64_t swift_unownedRetain_n(uint64_t a1, uint64_t a2, const char *a3, char *a4)
{
  if (a1 >= 1) {
    swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::incrementUnowned( (unint64_t *)(a1 + 8),  a2,  a3,  a4);
  }
  return a1;
}

void swift_unownedRelease_n(uint64_t a1, int a2)
{
  if (a1 < 1) {
    return;
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if ((~v3 & 0x80000000FFFFFFFFLL) == 0) {
    return;
  }
  unint64_t v4 = (unint64_t *)(a1 + 8);
  if ((v3 & 0x8000000000000000LL) != 0) {
    goto LABEL_12;
  }
  unint64_t v5 = *(void *)(a1 + 8);
  while (1)
  {
    unsigned int v6 = (v5 >> 1) - a2;
    unint64_t v3 = __ldxr(v4);
    if (v3 == v5)
    {
      if (!__stxr((2 * v6) | v5 & 0xFFFFFFFF00000001LL, v4))
      {
        char v7 = 1;
        goto LABEL_10;
      }
    }

    else
    {
      __clrex();
    }

    char v7 = 0;
LABEL_10:
    if ((v7 & 1) != 0) {
      break;
    }
    unint64_t v5 = v3;
    if ((v3 & 0x8000000000000000LL) != 0)
    {
LABEL_12:
      unint64_t v5 = v3;
      if (v3 != 0xFFFFFFFFLL)
      {
        if ((swift::HeapObjectSideTableEntry::decrementUnownedShouldFree( (swift::HeapObjectSideTableEntry *)(8 * v3),  a2) & 1) == 0) {
          return;
        }
        goto LABEL_14;
      }
    }
  }

  if ((v6 & 0x7FFFFFFF) == 0) {
LABEL_14:
  }
    swift_slowDealloc((void *)a1);
}

uint64_t swift_nonatomic_unownedRetain_n(uint64_t a1, uint64_t a2, const char *a3, char *a4)
{
  if (a1 >= 1) {
    swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::incrementUnownedNonAtomic( (unint64_t *)(a1 + 8),  a2,  a3,  a4);
  }
  return a1;
}

void swift_nonatomic_unownedRelease_n(unint64_t *a1, int a2)
{
  if ((uint64_t)a1 >= 1)
  {
    if (swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::decrementUnownedShouldFreeNonAtomic( a1 + 1,  a2)) {
      swift_slowDealloc(a1);
    }
  }

uint64_t swift_tryRetain(uint64_t a1, uint64_t a2, const char *a3, char *a4)
{
  uint64_t v4 = a1;
  if ((_swift_enableSwizzlingOfAllocationAndRefCountingFunctions_forInstrumentsOnly & 1) != 0) {
    return _swift_tryRetain(a1, (uint64_t)_swift_tryRetain, a3, a4);
  }
  if (a1 < 1) {
    return 0LL;
  }
  unint64_t v5 = (unint64_t *)(a1 + 8);
  for (uint64_t i = *(void *)(v4 + 8); ; uint64_t i = v7)
  {
    if (i < 0)
    {
      if ((~i & 0x1FFFFFFFFLL) == 0) {
        return 0LL;
      }
    }

    else if ((i & 0x100000000LL) != 0)
    {
      return 0LL;
    }

    if (i + 0x200000000LL < 0) {
      break;
    }
    unint64_t v7 = __ldxr(v5);
    if (v7 == i)
    {
      if (!__stxr(i + 0x200000000LL, v5)) {
        return v4;
      }
    }

    else
    {
      __clrex();
    }
  }

  if ((_DWORD)i != -1
    && !swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::tryIncrementSlow( (swift *)v5,  i,  a3,  a4))
  {
    return 0LL;
  }

  return v4;
}

unint64_t swift_isDeallocating(uint64_t a1)
{
  if (a1 < 1) {
    return 0LL;
  }
  unint64_t v1 = *(void *)(a1 + 8);
  unint64_t v2 = (unsigned __int128 *)(8 * v1 + 16);
  do
    unsigned __int128 v3 = __ldxp(v2);
  while (__stxp(v3, v2));
  return DWORD1(v3) & 1;
}

uint64_t swift_setDeallocating(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8);
  if ((v1 & 0x80000000FFFFFFFFLL) != 0x80000000FFFFFFFFLL)
  {
    if ((v1 & 0x8000000000000000LL) == 0 || *(void *)(result + 8) == 0xFFFFFFFFLL)
    {
      *(void *)(result + 8) = v1 & 0x80000000FFFFFFFFLL | 0x100000000LL;
    }

    else
    {
      unint64_t v2 = (unsigned __int128 *)(8 * v1 + 16);
      do
      {
        unsigned __int128 v4 = __ldxp(v2);
        uint64_t v3 = v4;
      }

      while (__stxp(v4, v2));
      unsigned int v5 = DWORD2(v4);
      uint64_t v6 = HIDWORD(*((void *)&v4 + 1));
      unint64_t v7 = v4 - 0x200000000LL;
      if ((uint64_t)v4 - 0x200000000LL < 0)
      {
        uint64_t v10 = v4;
        uint64_t v14 = HIDWORD(*((void *)&v4 + 1));
        if ((_DWORD)v4 != -1)
        {
LABEL_20:
          uint64_t v15 = v14;
          unint64_t v16 = v10 - 0x200000000LL;
          if (v10 - 0x200000000LL >= 0)
          {
LABEL_23:
            while (1)
            {
              unint64_t v17 = v5;
              unint64_t v18 = v5 | (unint64_t)(v15 << 32);
              do
              {
                while (1)
                {
                  unsigned __int128 v19 = __ldxp(v2);
                  unsigned int v5 = DWORD2(v19);
                  int v20 = (void)v19 != v10;
                  if (*((void *)&v19 + 1) != v18) {
                    ++v20;
                  }
                  if (!v20) {
                    break;
                  }
                  if (!__stlxp(v19, v2)) {
                    goto LABEL_30;
                  }
                }
              }

              while (__stlxp(__PAIR128__(v17, v16), v2));
LABEL_30:
              if ((void)v19 == v10 && *((void *)&v19 + 1) == v18) {
                break;
              }
              uint64_t v15 = HIDWORD(*((void *)&v19 + 1));
              uint64_t v10 = v19;
              unint64_t v16 = v19 - 0x200000000LL;
            }
          }

          else
          {
LABEL_21:
            if ((_DWORD)v10 != -1)
            {
              unint64_t v16 = v10 & 0x80000000FFFFFFFFLL | 0x100000000LL;
              goto LABEL_23;
            }
          }
        }
      }

      else
      {
        while (1)
        {
          unint64_t v8 = v5;
          unint64_t v9 = v5 | (unint64_t)(v6 << 32);
          do
          {
            while (1)
            {
              unsigned __int128 v11 = __ldxp(v2);
              unsigned int v5 = DWORD2(v11);
              uint64_t v10 = v11;
              int v12 = (void)v11 != v3;
              if (*((void *)&v11 + 1) != v9) {
                ++v12;
              }
              if (!v12) {
                break;
              }
              if (!__stlxp(v11, v2)) {
                goto LABEL_14;
              }
            }
          }

          while (__stlxp(__PAIR128__(v8, v7), v2));
LABEL_14:
          if ((void)v11 == v3 && *((void *)&v11 + 1) == v9) {
            break;
          }
          uint64_t v14 = HIDWORD(*((void *)&v11 + 1));
          uint64_t v6 = HIDWORD(*((void *)&v11 + 1));
          uint64_t v3 = v11;
          unint64_t v7 = v11 - 0x200000000LL;
          if ((uint64_t)v11 - 0x200000000LL < 0)
          {
            if ((_DWORD)v11 == -1) {
              return result;
            }
            goto LABEL_20;
          }
        }
      }
    }
  }

  return result;
}

uint64_t swift_unownedRetainStrong(uint64_t this, uint64_t a2, const char *a3, char *a4)
{
  if (this >= 1)
  {
    unsigned int v5 = (unint64_t *)(this + 8);
    for (uint64_t i = *(void *)(this + 8); ; uint64_t i = v7)
    {
      if (i < 0)
      {
        if ((~i & 0x1FFFFFFFFLL) == 0) {
          goto LABEL_15;
        }
      }

      else if ((i & 0x100000000LL) != 0)
      {
        goto LABEL_15;
      }

      if (i + 0x200000000LL < 0) {
        break;
      }
      unint64_t v7 = __ldxr(v5);
      if (v7 == i)
      {
        if (!__stxr(i + 0x200000000LL, v5)) {
          return this;
        }
      }

      else
      {
        __clrex();
      }
    }

    if ((_DWORD)i != -1
      && (swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::tryIncrementSlow( (swift *)v5,  i,  a3,  a4) & 1) == 0)
    {
LABEL_15:
      swift::swift_abortRetainUnowned((swift *)this, (const void *)i, a3, a4);
    }
  }

  return this;
}

uint64_t swift_nonatomic_unownedRetainStrong(uint64_t result, uint64_t a2, const char *a3, char *a4)
{
  if (result >= 1)
  {
    uint64_t v4 = *(void *)(result + 8);
    if (v4 < 0)
    {
      if ((~v4 & 0x1FFFFFFFFLL) == 0) {
        goto LABEL_11;
      }
    }

    else if ((v4 & 0x100000000LL) != 0)
    {
      goto LABEL_11;
    }

    if (v4 + 0x200000000LL < 0)
    {
      if ((_DWORD)v4 != -1)
      {
        uint64_t v6 = (swift *)result;
        char v5 = swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::tryIncrementNonAtomicSlow( (swift *)(result + 8),  v4,  a3,  a4);
        __n128 result = (uint64_t)v6;
        if ((v5 & 1) == 0) {
LABEL_11:
        }
          swift::swift_abortRetainUnowned((swift *)result, (const void *)v4, a3, a4);
      }
    }

    else
    {
      *(void *)(result + 8) = v4 + 0x200000000LL;
    }
  }

  return result;
}

uint64_t swift_unownedRetainStrongAndRelease(uint64_t this, uint64_t a2, const char *a3, char *a4)
{
  if (this >= 1)
  {
    uint64_t v4 = (swift *)this;
    char v5 = (unint64_t *)(this + 8);
    for (uint64_t i = *(void *)(this + 8); ; uint64_t i = v7)
    {
      if (i < 0)
      {
        if ((~i & 0x1FFFFFFFFLL) == 0) {
          goto LABEL_18;
        }
      }

      else if ((i & 0x100000000LL) != 0)
      {
        goto LABEL_18;
      }

      if (i + 0x200000000LL < 0) {
        break;
      }
      unint64_t v7 = __ldxr(v5);
      if (v7 == i)
      {
        if (!__stxr(i + 0x200000000LL, v5)) {
          goto LABEL_12;
        }
      }

      else
      {
        __clrex();
      }
    }

    if ((_DWORD)i != -1)
    {
      this = swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::tryIncrementSlow( (swift *)(this + 8),  i,  a3,  a4);
      if ((this & 1) == 0) {
LABEL_18:
      }
        swift::swift_abortRetainUnowned(v4, (const void *)i, a3, a4);
    }

uint64_t swift_nonatomic_unownedRetainStrongAndRelease(uint64_t result, uint64_t a2, const char *a3, char *a4)
{
  if (result >= 1)
  {
    uint64_t v4 = *(void *)(result + 8);
    if (v4 < 0)
    {
      if ((~v4 & 0x1FFFFFFFFLL) == 0) {
        goto LABEL_12;
      }
    }

    else if ((v4 & 0x100000000LL) != 0)
    {
      goto LABEL_12;
    }

    char v5 = (unint64_t *)(result + 8);
    if (v4 + 0x200000000LL < 0)
    {
      if ((_DWORD)v4 != -1)
      {
        unint64_t v7 = (unint64_t *)(result + 8);
        uint64_t v8 = result;
        char v6 = swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::tryIncrementNonAtomicSlow( (swift *)(result + 8),  v4,  a3,  a4);
        char v5 = v7;
        __n128 result = v8;
        if ((v6 & 1) == 0) {
LABEL_12:
        }
          swift::swift_abortRetainUnowned((swift *)result, (const void *)v4, a3, a4);
      }
    }

    else
    {
      *char v5 = v4 + 0x200000000LL;
    }

    return swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::decrementUnownedShouldFreeNonAtomic( v5,  1);
  }

  return result;
}

uint64_t swift_unownedCheck(uint64_t result, const void *a2, const char *a3, char *a4)
{
  if (result >= 1)
  {
    uint64_t v4 = *(void *)(result + 8);
    if ((v4 & 0x8000000000000000LL) == 0 || *(void *)(result + 8) == 0xFFFFFFFFLL)
    {
      if ((v4 & 0x100000000LL) != 0) {
        goto LABEL_7;
      }
    }

    else
    {
      char v5 = (unsigned __int128 *)(8 * v4 + 16);
      do
        unsigned __int128 v6 = __ldxp(v5);
      while (__stxp(v6, v5));
      if ((v6 & 0x100000000LL) != 0) {
LABEL_7:
      }
        swift::swift_abortRetainUnowned((swift *)result, a2, a3, a4);
    }
  }

  return result;
}

uint64_t _swift_release_dealloc(void *a1)
{
  return (*(uint64_t (**)(void))(*a1 - 16LL))();
}

void swift_rootObjCDealloc(uint64_t a1)
{
}

void swift_deallocClassInstance(uint64_t a1)
{
  if (a1 >= 1)
  {
    unint64_t v2 = *(void *)(a1 + 8);
    if ((v2 & 0x8000000000000000LL) != 0 && *(void *)(a1 + 8) != 0xFFFFFFFFLL)
    {
      uint64_t v3 = (unsigned __int128 *)(8 * v2 + 16);
      do
      {
        unsigned __int128 v4 = __ldxp(v3);
        unint64_t v2 = v4;
      }

      while (__stxp(v4, v3));
    }

    uint64_t v5 = (v2 >> 33) & 0x3FFFFFFF;
    if (v5)
    {
      uint64_t TypeContextDescriptor = swift::TargetMetadata<swift::InProcess>::getTypeContextDescriptor(*(unint64_t **)a1);
      if (TypeContextDescriptor) {
        unint64_t v9 = (const char *)(*(int *)(TypeContextDescriptor + 8) + TypeContextDescriptor + 8);
      }
      else {
        unint64_t v9 = "<unknown>";
      }
      swift::fatalError( 0LL,  "Object %p of class %s deallocated with non-zero retain count %zd. This object's deinit, or something called from it, may have created a strong reference to self which outlived deinit, resulting in a dangling reference.\n",  v7,  v8,  a1,  v9,  v5 + 1);
    }
  }

  if ((*(void *)(a1 + 8) & 0x8000000000000001LL) != 1) {
    objc_destructInstance((id)a1);
  }
  swift_deallocObject(a1);
}

uint64_t swift::TargetMetadata<swift::InProcess>::getTypeContextDescriptor(unint64_t *a1)
{
  uint64_t v1 = 0LL;
  unint64_t v2 = *a1;
  if (*a1 > 0x7FF) {
    LODWORD(v2) = 0;
  }
  if ((int)v2 > 514)
  {
    if ((_DWORD)v2 != 515 && (_DWORD)v2 != 516) {
      return v1;
    }
    goto LABEL_10;
  }

  if ((v2 - 512) < 3)
  {
LABEL_10:
    unsigned __int128 v4 = (uint64_t *)(a1 + 1);
    return *v4;
  }

  if (!(_DWORD)v2)
  {
    if ((a1[4] & 2) == 0) {
      return 0LL;
    }
    unsigned __int128 v4 = (uint64_t *)(a1 + 8);
    return *v4;
  }

  return v1;
}

void swift_deallocPartialClassInstance(void *a1, uint64_t a2)
{
  if (!a1) {
    return;
  }
  uint64_t v2 = a2;
  uint64_t v3 = *a1 & 0xFFFFFFFF8LL;
  if ((*(_BYTE *)(v3 + 32) & 2) == 0)
  {
LABEL_43:

    return;
  }

  uint64_t v15 = a1;
  if (v3 != a2)
  {
    while ((*(_BYTE *)(v3 + 32) & 2) != 0)
    {
      unsigned __int128 v11 = *(void (**)(void))(v3 + 72);
      if (v11)
      {
        v11();
        a1 = v15;
      }

      uint64_t v3 = *(void *)(v3 + 8);
      uint64_t v12 = *(void *)v3;
      if (*(void *)v3 > 0x7FFuLL) {
        LODWORD(v12) = 0;
      }
      if ((_DWORD)v12)
      {
        if ((_DWORD)v12 == 773) {
          uint64_t v3 = *(void *)(v3 + 8);
        }
        else {
          uint64_t v3 = 0LL;
        }
      }

      if (v3 == v2) {
        goto LABEL_9;
      }
    }

    BOOL v13 = (objc_class *)v3;
    goto LABEL_42;
  }

void swift_deallocUninitializedObject(uint64_t a1)
{
  uint64_t v2 = (unint64_t *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 0x80000000FFFFFFFFLL) != 0x80000000FFFFFFFFLL)
  {
    if ((v3 & 0x8000000000000000LL) == 0 || *(void *)(a1 + 8) == 0xFFFFFFFFLL)
    {
      *uint64_t v2 = v3 & 0x80000000FFFFFFFFLL | 0x100000000LL;
    }

    else
    {
      unsigned __int128 v4 = (unsigned __int128 *)(8 * v3 + 16);
      do
      {
        unsigned __int128 v6 = __ldxp(v4);
        uint64_t v5 = v6;
      }

      while (__stxp(v6, v4));
      unsigned int v7 = DWORD2(v6);
      uint64_t v8 = HIDWORD(*((void *)&v6 + 1));
      unint64_t v9 = v6 - 0x200000000LL;
      if ((uint64_t)v6 - 0x200000000LL < 0)
      {
        uint64_t v12 = v6;
        uint64_t v16 = HIDWORD(*((void *)&v6 + 1));
        if ((_DWORD)v6 != -1)
        {
LABEL_20:
          uint64_t v17 = v16;
          unint64_t v18 = v12 - 0x200000000LL;
          if (v12 - 0x200000000LL >= 0)
          {
LABEL_23:
            while (1)
            {
              unint64_t v19 = v7;
              unint64_t v20 = v7 | (unint64_t)(v17 << 32);
              do
              {
                while (1)
                {
                  unsigned __int128 v21 = __ldxp(v4);
                  unsigned int v7 = DWORD2(v21);
                  int v22 = (void)v21 != v12;
                  if (*((void *)&v21 + 1) != v20) {
                    ++v22;
                  }
                  if (!v22) {
                    break;
                  }
                  if (!__stlxp(v21, v4)) {
                    goto LABEL_30;
                  }
                }
              }

              while (__stlxp(__PAIR128__(v19, v18), v4));
LABEL_30:
              if ((void)v21 == v12 && *((void *)&v21 + 1) == v20) {
                break;
              }
              uint64_t v17 = HIDWORD(*((void *)&v21 + 1));
              uint64_t v12 = v21;
              unint64_t v18 = v21 - 0x200000000LL;
            }
          }

          else
          {
LABEL_21:
            if ((_DWORD)v12 != -1)
            {
              unint64_t v18 = v12 & 0x80000000FFFFFFFFLL | 0x100000000LL;
              goto LABEL_23;
            }
          }
        }
      }

      else
      {
        while (1)
        {
          unint64_t v10 = v7;
          unint64_t v11 = v7 | (unint64_t)(v8 << 32);
          do
          {
            while (1)
            {
              unsigned __int128 v13 = __ldxp(v4);
              unsigned int v7 = DWORD2(v13);
              uint64_t v12 = v13;
              int v14 = (void)v13 != v5;
              if (*((void *)&v13 + 1) != v11) {
                ++v14;
              }
              if (!v14) {
                break;
              }
              if (!__stlxp(v13, v4)) {
                goto LABEL_14;
              }
            }
          }

          while (__stlxp(__PAIR128__(v10, v9), v4));
LABEL_14:
          if ((void)v13 == v5 && *((void *)&v13 + 1) == v11) {
            break;
          }
          uint64_t v16 = HIDWORD(*((void *)&v13 + 1));
          uint64_t v8 = HIDWORD(*((void *)&v13 + 1));
          uint64_t v5 = v13;
          unint64_t v9 = v13 - 0x200000000LL;
          if ((uint64_t)v13 - 0x200000000LL < 0)
          {
            if ((_DWORD)v13 == -1) {
              break;
            }
            goto LABEL_20;
          }
        }
      }
    }
  }

  unint64_t v24 = *v2;
  if ((*v2 & 0x8000000000000000LL) != 0)
  {
    if ((~v24 & 0x1FFFFFFFFLL) != 0) {
      goto LABEL_42;
    }
LABEL_41:
    if ((v24 & 0x7FFFFFFEFFFFFFFELL) == 2)
    {
LABEL_57:
      swift_slowDealloc((void *)a1);
      return;
    }

    goto LABEL_42;
  }

  if ((v24 & 0x100000000LL) != 0) {
    goto LABEL_41;
  }
LABEL_42:
  if (a1 < 1) {
    return;
  }
  unint64_t v25 = *v2;
  if ((~*v2 & 0x80000000FFFFFFFFLL) == 0) {
    return;
  }
  if ((v25 & 0x8000000000000000LL) != 0) {
    goto LABEL_55;
  }
  unint64_t v26 = *v2;
  while (1)
  {
    unsigned int v27 = (v26 >> 1) - 1;
    unint64_t v25 = __ldxr(v2);
    if (v25 == v26)
    {
      if (!__stxr((2 * v27) | v26 & 0xFFFFFFFF00000001LL, v2))
      {
        char v28 = 1;
        goto LABEL_53;
      }
    }

    else
    {
      __clrex();
    }

    char v28 = 0;
LABEL_53:
    if ((v28 & 1) != 0) {
      break;
    }
    unint64_t v26 = v25;
    if ((v25 & 0x8000000000000000LL) != 0)
    {
LABEL_55:
      unint64_t v26 = v25;
      if (v25 != 0xFFFFFFFFLL)
      {
        if ((swift::HeapObjectSideTableEntry::decrementUnownedShouldFree( (swift::HeapObjectSideTableEntry *)(8 * v25),  1) & 1) == 0) {
          return;
        }
        goto LABEL_57;
      }
    }
  }

  if ((v27 & 0x7FFFFFFF) == 0) {
    goto LABEL_57;
  }
}

uint64_t *swift_weakInit(uint64_t *a1, uint64_t a2, const char *a3, char *a4)
{
  if (a2) {
    unint64_t v5 = swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::formWeakReference( (unint64_t *)(a2 + 8),  a2,  a3,  a4);
  }
  else {
    unint64_t v5 = 0LL;
  }
  uint64_t v6 = v5 | 1;
  if (!v5) {
    uint64_t v6 = 0LL;
  }
  *a1 = v6;
  return a1;
}

uint64_t *swift_weakAssign(uint64_t *a1, uint64_t a2, const char *a3, char *a4)
{
  if (a2) {
    unint64_t v5 = swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::formWeakReference( (unint64_t *)(a2 + 8),  a2,  a3,  a4);
  }
  else {
    unint64_t v5 = 0LL;
  }
  uint64_t v6 = v5 | 1;
  if (!v5) {
    uint64_t v6 = 0LL;
  }
  uint64_t v7 = *a1;
  *a1 = v6;
  uint64_t v8 = (unsigned __int128 *)(v7 & 0x7FFFFFFFFFFFFFFELL);
  if ((v7 & 0x7FFFFFFFFFFFFFFELL) != 0)
  {
    unint64_t v9 = v8 + 1;
    do
      unsigned __int128 v10 = __ldxp(v9);
    while (__stxp(v10, v9));
    do
    {
      while (1)
      {
        unsigned __int128 v13 = __ldxp(v9);
        uint64_t v12 = *((void *)&v13 + 1);
        unint64_t v11 = v13;
        int v14 = (void)v13 != (void)v10;
        if (*((void *)&v13 + 1) != *((void *)&v10 + 1)) {
          ++v14;
        }
        if (!v14) {
          break;
        }
        if (!__stxp(v13, v9)) {
          goto LABEL_15;
        }
      }
    }

    while (__stxp(__PAIR128__((DWORD2(v10) - 1), v10), v9));
LABEL_15:
    if ((void)v13 == (void)v10 && *((void *)&v13 + 1) == *((void *)&v10 + 1))
    {
      if (DWORD2(v10) == 1) {
LABEL_32:
      }
        swift_slowDealloc(v8);
    }

    else
    {
      do
      {
        unint64_t v19 = (v12 - 1);
        do
        {
          while (1)
          {
            unsigned __int128 v20 = __ldxp(v9);
            int v21 = (void)v20 != v11;
            if (*((void *)&v20 + 1) != v12) {
              ++v21;
            }
            if (!v21) {
              break;
            }
            if (!__stxp(v20, v9)) {
              goto LABEL_22;
            }
          }
        }

        while (__stxp(__PAIR128__(v19, v11), v9));
LABEL_22:
        uint64_t v17 = *((void *)&v20 + 1) ^ v12;
        uint64_t v18 = v20 ^ v11;
        uint64_t v12 = v20 >> 64;
        unint64_t v11 = v20;
      }

      while (v18 | v17);
      if (!(_DWORD)v19) {
        goto LABEL_32;
      }
    }
  }

  return a1;
}

uint64_t swift_weakLoadStrong(void *a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v4 = *a1 & 0x7FFFFFFFFFFFFFFELL;
  if (v4)
  {
    unint64_t v5 = (unsigned __int128 *)(v4 + 16);
    do
    {
      unsigned __int128 v8 = __ldxp(v5);
      unsigned int v7 = DWORD2(v8);
      uint64_t v6 = v8;
    }

    while (__stxp(v8, v5));
    if ((v8 & 0x100000000LL) == 0)
    {
      uint64_t v9 = HIDWORD(*((void *)&v8 + 1));
      while (v6 + 0x200000000LL >= 0)
      {
        unint64_t v10 = v7;
        unint64_t v11 = v7 | (unint64_t)(v9 << 32);
        do
        {
          while (1)
          {
            unsigned __int128 v12 = __ldxp(v5);
            unsigned int v7 = DWORD2(v12);
            int v13 = (void)v12 != v6;
            if (*((void *)&v12 + 1) != v11) {
              ++v13;
            }
            if (!v13) {
              break;
            }
            if (!__stxp(v12, v5)) {
              goto LABEL_14;
            }
          }
        }

        while (__stxp(__PAIR128__(v10, v6 + 0x200000000LL), v5));
LABEL_14:
        if ((void)v12 == v6 && *((void *)&v12 + 1) == v11) {
          return *(void *)v4;
        }
        uint64_t v9 = HIDWORD(*((void *)&v12 + 1));
        uint64_t v6 = v12;
        if ((v12 & 0x100000000LL) != 0) {
          return 0LL;
        }
      }

      if ((_DWORD)v6 == -1
        || swift::RefCounts<swift::SideTableRefCountBits>::tryIncrementSlow( (swift *)v5,  v6,  (const char *)(v7 | (unint64_t)(v9 << 32)),  a4))
      {
        return *(void *)v4;
      }
    }
  }

  return 0LL;
}

uint64_t swift_weakTakeStrong(uint64_t *a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v4 = *a1;
  *a1 = 0LL;
  return swift::WeakReference::nativeTakeStrongFromBits((uint64_t)a1, v4, a3, a4);
}

void swift_weakDestroy(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0LL;
  uint64_t v2 = (unsigned __int128 *)(v1 & 0x7FFFFFFFFFFFFFFELL);
  if ((v1 & 0x7FFFFFFFFFFFFFFELL) != 0)
  {
    uint64_t v3 = v2 + 1;
    do
      unsigned __int128 v4 = __ldxp(v3);
    while (__stxp(v4, v3));
    do
    {
      while (1)
      {
        unsigned __int128 v7 = __ldxp(v3);
        uint64_t v6 = *((void *)&v7 + 1);
        unint64_t v5 = v7;
        int v8 = (void)v7 != (void)v4;
        if (*((void *)&v7 + 1) != *((void *)&v4 + 1)) {
          ++v8;
        }
        if (!v8) {
          break;
        }
        if (!__stxp(v7, v3)) {
          goto LABEL_10;
        }
      }
    }

    while (__stxp(__PAIR128__((DWORD2(v4) - 1), v4), v3));
LABEL_10:
    if ((void)v7 == (void)v4 && *((void *)&v7 + 1) == *((void *)&v4 + 1))
    {
      if (DWORD2(v4) == 1) {
LABEL_27:
      }
        swift_slowDealloc(v2);
    }

    else
    {
      do
      {
        unint64_t v12 = (v6 - 1);
        do
        {
          while (1)
          {
            unsigned __int128 v13 = __ldxp(v3);
            int v14 = (void)v13 != v5;
            if (*((void *)&v13 + 1) != v6) {
              ++v14;
            }
            if (!v14) {
              break;
            }
            if (!__stxp(v13, v3)) {
              goto LABEL_17;
            }
          }
        }

        while (__stxp(__PAIR128__(v12, v5), v3));
LABEL_17:
        uint64_t v10 = *((void *)&v13 + 1) ^ v6;
        uint64_t v11 = v13 ^ v5;
        uint64_t v6 = v13 >> 64;
        unint64_t v5 = v13;
      }

      while (v11 | v10);
      if (!(_DWORD)v12) {
        goto LABEL_27;
      }
    }
  }

swift *swift_weakCopyInit(swift *result, void *a2, const char *a3, char *a4)
{
  uint64_t v4 = *a2 & 0x7FFFFFFFFFFFFFFELL;
  if (v4)
  {
    unint64_t v5 = (unsigned __int128 *)(v4 + 16);
    do
      unsigned __int128 v6 = __ldxp(v5);
    while (__stxp(v6, v5));
    if ((v6 & 0x100000000LL) != 0)
    {
      uint64_t v4 = 0LL;
    }

    else
    {
      do
      {
        unsigned __int128 v8 = __ldxp(v5);
        unint64_t v7 = v8;
      }

      while (__stxp(v8, v5));
      if (DWORD2(v8) == -1) {
LABEL_20:
      }
        swift::swift_abortWeakRetainOverflow(result, (uint64_t)a2, a3, a4);
      unsigned int v9 = DWORD2(v8);
      uint64_t v10 = HIDWORD(*((void *)&v8 + 1));
      while (1)
      {
        unint64_t v11 = v9 + 1;
        unint64_t v12 = v9 | (unint64_t)(v10 << 32);
        unsigned __int128 v13 = (unsigned __int128 *)(v4 + 16);
        do
        {
          while (1)
          {
            unsigned __int128 v14 = __ldxp(v13);
            unsigned int v9 = DWORD2(v14);
            int v15 = (void)v14 != v7;
            if (*((void *)&v14 + 1) != v12) {
              ++v15;
            }
            if (!v15) {
              break;
            }
            if (!__stxp(v14, v13)) {
              goto LABEL_15;
            }
          }
        }

        while (__stxp(__PAIR128__(v11, v7), v13));
LABEL_15:
        if ((void)v14 == v7 && *((void *)&v14 + 1) == v12) {
          break;
        }
        uint64_t v10 = HIDWORD(*((void *)&v14 + 1));
        unint64_t v7 = v14;
        if (DWORD2(v14) == -1) {
          goto LABEL_20;
        }
      }
    }
  }

  if (v4) {
    uint64_t v17 = v4 | 1;
  }
  else {
    uint64_t v17 = 0LL;
  }
  *(void *)__n128 result = v17;
  return result;
}

void *swift_weakTakeInit(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0LL;
  *__n128 result = v2;
  return result;
}

uint64_t *swift_weakCopyAssign(uint64_t *a1, uint64_t *a2, const char *a3, char *a4)
{
  return a1;
}

void swift::WeakReference::nativeCopyAssign(uint64_t *a1, uint64_t *a2, const char *a3, char *a4)
{
  if (a1 == a2) {
    return;
  }
  uint64_t v6 = *a1;
  *a1 = 0LL;
  unint64_t v7 = (unsigned __int128 *)(v6 & 0x7FFFFFFFFFFFFFFELL);
  if ((v6 & 0x7FFFFFFFFFFFFFFELL) != 0)
  {
    unsigned __int128 v8 = v7 + 1;
    do
      unsigned __int128 v9 = __ldxp(v8);
    while (__stxp(v9, v8));
    do
    {
      while (1)
      {
        unsigned __int128 v12 = __ldxp(v8);
        uint64_t v11 = *((void *)&v12 + 1);
        unint64_t v10 = v12;
        int v13 = (void)v12 != (void)v9;
        if (*((void *)&v12 + 1) != *((void *)&v9 + 1)) {
          ++v13;
        }
        if (!v13) {
          break;
        }
        if (!__stxp(v12, v8)) {
          goto LABEL_11;
        }
      }
    }

    while (__stxp(__PAIR128__((DWORD2(v9) - 1), v9), v8));
LABEL_11:
    if ((void)v12 != (void)v9 || *((void *)&v12 + 1) != *((void *)&v9 + 1))
    {
      do
      {
        unint64_t v30 = (v11 - 1);
        do
        {
          while (1)
          {
            unsigned __int128 v31 = __ldxp(v8);
            int v32 = (void)v31 != v10;
            if (*((void *)&v31 + 1) != v11) {
              ++v32;
            }
            if (!v32) {
              break;
            }
            if (!__stxp(v31, v8)) {
              goto LABEL_37;
            }
          }
        }

        while (__stxp(__PAIR128__(v30, v10), v8));
LABEL_37:
        uint64_t v28 = *((void *)&v31 + 1) ^ v11;
        uint64_t v29 = v31 ^ v10;
        uint64_t v11 = v31 >> 64;
        unint64_t v10 = v31;
      }

      while (v29 | v28);
      if ((_DWORD)v30) {
        goto LABEL_17;
      }
      goto LABEL_53;
    }

    if (DWORD2(v9) == 1) {
LABEL_53:
    }
      swift_slowDealloc(v7);
  }

uint64_t *swift_weakTakeAssign(uint64_t *a1, uint64_t *a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *a1;
    *a1 = 0LL;
    unint64_t v5 = (unsigned __int128 *)(v4 & 0x7FFFFFFFFFFFFFFELL);
    if ((v4 & 0x7FFFFFFFFFFFFFFELL) != 0)
    {
      uint64_t v6 = v5 + 1;
      do
        unsigned __int128 v7 = __ldxp(v6);
      while (__stxp(v7, v6));
      do
      {
        while (1)
        {
          unsigned __int128 v10 = __ldxp(v6);
          uint64_t v9 = *((void *)&v10 + 1);
          unint64_t v8 = v10;
          int v11 = (void)v10 != (void)v7;
          if (*((void *)&v10 + 1) != *((void *)&v7 + 1)) {
            ++v11;
          }
          if (!v11) {
            break;
          }
          if (!__stxp(v10, v6)) {
            goto LABEL_11;
          }
        }
      }

      while (__stxp(__PAIR128__((DWORD2(v7) - 1), v7), v6));
LABEL_11:
      if ((void)v10 != (void)v7 || *((void *)&v10 + 1) != *((void *)&v7 + 1))
      {
        do
        {
          unint64_t v17 = (v9 - 1);
          do
          {
            while (1)
            {
              unsigned __int128 v18 = __ldxp(v6);
              int v19 = (void)v18 != v8;
              if (*((void *)&v18 + 1) != v9) {
                ++v19;
              }
              if (!v19) {
                break;
              }
              if (!__stxp(v18, v6)) {
                goto LABEL_19;
              }
            }
          }

          while (__stxp(__PAIR128__(v17, v8), v6));
LABEL_19:
          uint64_t v15 = *((void *)&v18 + 1) ^ v9;
          uint64_t v16 = v18 ^ v8;
          uint64_t v9 = v18 >> 64;
          unint64_t v8 = v18;
        }

        while (v16 | v15);
        if ((_DWORD)v17) {
          goto LABEL_17;
        }
        goto LABEL_29;
      }

      if (DWORD2(v7) == 1) {
LABEL_29:
      }
        swift_slowDealloc(v5);
    }

uint64_t swift_initStaticObject::$_0::__invoke(uint64_t this, void *a2)
{
  uint64_t v2 = *(void **)this;
  *uint64_t v2 = *(void *)(this + 8);
  v2[1] = 0x80000004FFFFFFFFLL;
  return this;
}

uint64_t swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::doDecrementSlow<(swift::PerformDeinit)1>( unint64_t *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a3 != 1 && (a2 & 0x80000000FFFFFFFFLL) == 0x80000000FFFFFFFFLL) {
    return 0LL;
  }
  BOOL v4 = a3 > 1;
  uint64_t v5 = a3 << 33;
  while (1)
  {
    BOOL v6 = a2 >= 0 || a3 < 2;
    if (v6 && ((a2 - v5) & 0x8000000000000000LL) == 0)
    {
      unint64_t v7 = __ldxr(a1);
      if (v7 != a2) {
        goto LABEL_5;
      }
      if (!__stlxr(a2 - v5, a1)) {
        return 0LL;
      }
      goto LABEL_6;
    }

    if ((_DWORD)a2 == -1) {
      return 0LL;
    }
    if (a2 < 0) {
      break;
    }
    unint64_t v7 = __ldxr(a1);
    if (v7 != a2)
    {
LABEL_5:
      __clrex();
      goto LABEL_6;
    }

    if (!__stlxr(a2 & 0x80000000FFFFFFFFLL | 0x100000000LL, a1))
    {
      __dmb(9u);
      unint64_t v8 = a1 - 1;
LABEL_22:
      _swift_release_dealloc(v8);
      return 1LL;
    }

uint64_t swift::WeakReference::nativeTakeStrongFromBits(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  BOOL v4 = (unsigned __int128 *)(a2 & 0x7FFFFFFFFFFFFFFELL);
  if ((a2 & 0x7FFFFFFFFFFFFFFELL) == 0) {
    return 0LL;
  }
  uint64_t v5 = v4 + 1;
  do
  {
    unsigned __int128 v8 = __ldxp(v5);
    unsigned int v7 = DWORD2(v8);
    uint64_t v6 = v8;
  }

  while (__stxp(v8, v5));
  if ((v8 & 0x100000000LL) != 0)
  {
    uint64_t v15 = 0LL;
  }

  else
  {
    uint64_t v9 = HIDWORD(*((void *)&v8 + 1));
    while (v6 + 0x200000000LL >= 0)
    {
      unint64_t v10 = v7;
      unint64_t v11 = v7 | (unint64_t)(v9 << 32);
      do
      {
        while (1)
        {
          unsigned __int128 v12 = __ldxp(v5);
          unsigned int v7 = DWORD2(v12);
          int v13 = (void)v12 != v6;
          if (*((void *)&v12 + 1) != v11) {
            ++v13;
          }
          if (!v13) {
            break;
          }
          if (!__stxp(v12, v5)) {
            goto LABEL_14;
          }
        }
      }

      while (__stxp(__PAIR128__(v10, v6 + 0x200000000LL), v5));
LABEL_14:
      if ((void)v12 == v6 && *((void *)&v12 + 1) == v11) {
        goto LABEL_24;
      }
      uint64_t v9 = HIDWORD(*((void *)&v12 + 1));
      uint64_t v6 = v12;
      if ((v12 & 0x100000000LL) != 0)
      {
        uint64_t v15 = 0LL;
        goto LABEL_25;
      }
    }

    if ((_DWORD)v6 == -1
      || swift::RefCounts<swift::SideTableRefCountBits>::tryIncrementSlow( (swift *)(v4 + 1),  v6,  (const char *)(v7 | (unint64_t)(v9 << 32)),  a4))
    {
LABEL_24:
      uint64_t v15 = *(void *)v4;
      goto LABEL_25;
    }

    uint64_t v15 = 0LL;
  }

  do
LABEL_25:
    unsigned __int128 v16 = __ldxp(v5);
  while (__stxp(v16, v5));
  do
  {
    while (1)
    {
      unsigned __int128 v19 = __ldxp(v5);
      uint64_t v18 = *((void *)&v19 + 1);
      unint64_t v17 = v19;
      int v20 = (void)v19 != (void)v16;
      if (*((void *)&v19 + 1) != *((void *)&v16 + 1)) {
        ++v20;
      }
      if (!v20) {
        break;
      }
      if (!__stxp(v19, v5)) {
        goto LABEL_32;
      }
    }
  }

  while (__stxp(__PAIR128__((DWORD2(v16) - 1), v16), v5));
LABEL_32:
  if ((void)v19 == (void)v16 && *((void *)&v19 + 1) == *((void *)&v16 + 1))
  {
    if (DWORD2(v16) == 1) {
LABEL_49:
    }
      swift_slowDealloc(v4);
  }

  else
  {
    do
    {
      unint64_t v25 = (v18 - 1);
      do
      {
        while (1)
        {
          unsigned __int128 v26 = __ldxp(v5);
          int v27 = (void)v26 != v17;
          if (*((void *)&v26 + 1) != v18) {
            ++v27;
          }
          if (!v27) {
            break;
          }
          if (!__stxp(v26, v5)) {
            goto LABEL_39;
          }
        }
      }

      while (__stxp(__PAIR128__(v25, v17), v5));
LABEL_39:
      uint64_t v23 = *((void *)&v26 + 1) ^ v18;
      uint64_t v24 = v26 ^ v17;
      uint64_t v18 = v26 >> 64;
      unint64_t v17 = v26;
    }

    while (v24 | v23);
    if (!(_DWORD)v25) {
      goto LABEL_49;
    }
  }

  return v15;
}

void swift::ConcurrentReadableHashMap<swift::HashMapElementWrapper<anonymous namespace'::BoxCacheEntry>,swift::LazyMutex>::find<swift::TargetMetadata<swift::InProcess> const*>( uint64_t a1, char a2)
{
  if ((v2 & 1) == 0)
  {
    char v5 = a2;
    a2 = v5;
    if (v3)
    {
      unint64_t v4 = __swift::__runtime::llvm::hashing::detail::fixed_seed_override;
      if (!__swift::__runtime::llvm::hashing::detail::fixed_seed_override) {
        unint64_t v4 = 0xFF51AFD7ED558CCDLL;
      }
      __swift::__runtime::llvm::hashing::detail::get_execution_seed(void)::seed = v4;
      a2 = v5;
    }
  }

  __asm { BR              X13 }

void anonymous namespace'::destroyGenericBox()
{
}

uint64_t swift::HeapObjectSideTableEntry::decrementNonAtomicStrong<(swift::PerformDeinit)1>( void **a1, uint64_t a2)
{
  unsigned __int8 v2 = (unsigned __int128 *)(a1 + 2);
  do
  {
    unsigned __int128 v4 = __ldxp(v2);
    uint64_t v3 = v4;
  }

  while (__stxp(v4, v2));
  unsigned int v5 = DWORD2(v4);
  uint64_t v6 = HIDWORD(*((void *)&v4 + 1));
  if ((_DWORD)a2 == 1)
  {
    BOOL v9 = 0;
LABEL_8:
    uint64_t v10 = a2 << 33;
    while (v3 - v10 >= 0)
    {
      unint64_t v11 = v5;
      unint64_t v12 = v5 | (unint64_t)(v6 << 32);
      do
      {
        while (1)
        {
          unsigned __int128 v14 = __ldxp(v2);
          unsigned int v5 = DWORD2(v14);
          uint64_t v13 = v14;
          int v15 = (void)v14 != v3;
          if (*((void *)&v14 + 1) != v12) {
            ++v15;
          }
          if (!v15) {
            break;
          }
          if (!__stlxp(v14, v2)) {
            goto LABEL_17;
          }
        }
      }

      while (__stlxp(__PAIR128__(v11, v3 - v10), v2));
LABEL_17:
      if ((void)v14 == v3 && *((void *)&v14 + 1) == v12) {
        return 0LL;
      }
      uint64_t v17 = HIDWORD(*((void *)&v14 + 1));
      BOOL v18 = (v14 & 0x8000000000000000LL) != 0LL && v9;
      uint64_t v3 = v14;
      uint64_t v6 = HIDWORD(*((void *)&v14 + 1));
      if (v18) {
        goto LABEL_30;
      }
    }

    uint64_t v17 = v6;
    uint64_t v13 = v3;
LABEL_30:
    uint64_t v7 = v13;
    uint64_t v6 = v17;
    uint64_t v3 = v13;
    goto LABEL_31;
  }

  uint64_t v7 = v4;
  BOOL v9 = a2 > 1;
LABEL_31:
  if (v7 == 0xFFFFFFFFLL || (_DWORD)a2 != 1 && (v3 & 0x80000000FFFFFFFFLL) == 0x80000000FFFFFFFFLL) {
    return 0LL;
  }
  while (1)
  {
    int64_t v19 = v3 - (a2 << 33);
    BOOL v21 = a2 >= 2 && v3 < 0 || v19 < 0;
    char v22 = !v21;
    if (v21)
    {
      if ((_DWORD)v3 == -1) {
        return 0LL;
      }
      int64_t v19 = v3 & 0x80000000FFFFFFFFLL | 0x100000000LL;
    }

    unint64_t v23 = v5;
    unint64_t v24 = v5 | (unint64_t)(v6 << 32);
    do
    {
      while (1)
      {
        unsigned __int128 v25 = __ldxp(v2);
        unsigned int v5 = DWORD2(v25);
        int v26 = (void)v25 != v3;
        if (*((void *)&v25 + 1) != v24) {
          ++v26;
        }
        if (!v26) {
          break;
        }
        if (!__stlxp(v25, v2)) {
          goto LABEL_54;
        }
      }
    }

    while (__stlxp(__PAIR128__(v23, v19), v2));
LABEL_54:
    if ((void)v25 == v3 && *((void *)&v25 + 1) == v24) {
      break;
    }
    uint64_t v6 = HIDWORD(*((void *)&v25 + 1));
    uint64_t v3 = v25;
  }

  if ((v22 & 1) != 0) {
    return 0LL;
  }
  __dmb(9u);
  _swift_release_dealloc(*a1);
  return 1LL;
}

uint64_t swift::HeapObjectSideTableEntry::decrementUnownedShouldFree( swift::HeapObjectSideTableEntry *this, int a2)
{
  unsigned __int8 v2 = (unsigned __int128 *)((char *)this + 16);
  do
    unsigned __int128 v3 = __ldxp(v2);
  while (__stxp(v3, v2));
  int v4 = (v3 >> 1) - a2;
  do
  {
    while (1)
    {
      unsigned __int128 v7 = __ldxp(v2);
      uint64_t v6 = *((void *)&v7 + 1);
      uint64_t v5 = v7;
      int v8 = (void)v7 != (void)v3;
      if (*((void *)&v7 + 1) != *((void *)&v3 + 1)) {
        ++v8;
      }
      if (!v8) {
        break;
      }
      if (!__stxp(v7, v2)) {
        goto LABEL_12;
      }
    }
  }

  while (__stxp(__PAIR128__(DWORD2(v3), (2 * v4) | (unint64_t)v3 & 0xFFFFFFFF00000001LL), v2));
LABEL_12:
  if ((void)v7 != (void)v3 || *((void *)&v7 + 1) != *((void *)&v3 + 1))
  {
    do
    {
      int v4 = (v5 >> 1) - a2;
      do
      {
        while (1)
        {
          unsigned __int128 v14 = __ldxp(v2);
          int v15 = (void)v14 != v5;
          if (*((void *)&v14 + 1) != v6) {
            ++v15;
          }
          if (!v15) {
            break;
          }
          if (!__stxp(v14, v2)) {
            goto LABEL_20;
          }
        }
      }

      while (__stxp(__PAIR128__(v6, (2 * v4) | v5 & 0xFFFFFFFF00000001LL), v2));
LABEL_20:
      uint64_t v12 = *((void *)&v14 + 1) ^ v6;
      uint64_t v13 = v14 ^ v5;
      uint64_t v6 = *((void *)&v14 + 1);
      uint64_t v5 = v14;
    }

    while (v13 | v12);
  }

  if ((v4 & 0x7FFFFFFF) != 0) {
    return 0LL;
  }
  do
    unsigned __int128 v16 = __ldxp(v2);
  while (__stxp(v16, v2));
  unint64_t v17 = (DWORD2(v16) - 1);
  do
  {
    while (1)
    {
      unsigned __int128 v20 = __ldxp(v2);
      uint64_t v19 = *((void *)&v20 + 1);
      unint64_t v18 = v20;
      int v21 = (void)v20 != (void)v16;
      if (*((void *)&v20 + 1) != *((void *)&v16 + 1)) {
        ++v21;
      }
      if (!v21) {
        break;
      }
      if (!__stxp(v20, v2)) {
        goto LABEL_37;
      }
    }
  }

  while (__stxp(__PAIR128__(v17, v16), v2));
LABEL_37:
  if ((void)v20 == (void)v16 && *((void *)&v20 + 1) == *((void *)&v16 + 1))
  {
    uint64_t v10 = 1LL;
    if (!this) {
      return v10;
    }
    goto LABEL_54;
  }

  do
  {
    unint64_t v17 = (v19 - 1);
    do
    {
      while (1)
      {
        unsigned __int128 v25 = __ldxp(v2);
        int v26 = (void)v25 != v18;
        if (*((void *)&v25 + 1) != v19) {
          ++v26;
        }
        if (!v26) {
          break;
        }
        if (!__stxp(v25, v2)) {
          goto LABEL_44;
        }
      }
    }

    while (__stxp(__PAIR128__(v17, v18), v2));
LABEL_44:
    uint64_t v23 = *((void *)&v25 + 1) ^ v19;
    uint64_t v24 = v25 ^ v18;
    uint64_t v19 = *((void *)&v25 + 1);
    unint64_t v18 = v25;
  }

  while (v24 | v23);
  uint64_t v10 = 1LL;
  if (this)
  {
LABEL_54:
    if (!(_DWORD)v17)
    {
      swift_slowDealloc(this);
      return 1LL;
    }
  }

  return v10;
}

uint64_t swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::doDecrementSlow<(swift::PerformDeinit)0>( unint64_t *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a3 != 1 && (a2 & 0x80000000FFFFFFFFLL) == 0x80000000FFFFFFFFLL) {
    return 0LL;
  }
  BOOL v4 = a3 > 1;
  uint64_t v5 = a3 << 33;
  while (1)
  {
    BOOL v6 = a2 >= 0 || a3 < 2;
    unint64_t v7 = a2 - v5;
    if (a2 - v5 < 0) {
      BOOL v6 = 0;
    }
    if (!v6) {
      break;
    }
LABEL_16:
    unint64_t v8 = __ldxr(a1);
    if (v8 == a2)
    {
      if (!__stlxr(v7, a1)) {
        return !v6;
      }
    }

    else
    {
      __clrex();
    }

    a2 = v8;
  }

  if ((_DWORD)a2 == -1) {
    return 0LL;
  }
  if ((a2 & 0x8000000000000000LL) == 0)
  {
    unint64_t v7 = a2 & 0x80000000FFFFFFFFLL | 0x100000000LL;
    goto LABEL_16;
  }

  BOOL v9 = (unsigned __int128 *)(8 * a2 + 16);
  do
  {
    unsigned __int128 v11 = __ldxp(v9);
    uint64_t v10 = v11;
  }

  while (__stxp(v11, v9));
  unsigned int v12 = DWORD2(v11);
  uint64_t v13 = HIDWORD(*((void *)&v11 + 1));
  if ((_DWORD)a3 == 1)
  {
    BOOL v4 = 0;
    goto LABEL_28;
  }

  uint64_t v14 = v11;
  if (a3 >= 2 && (v11 & 0x8000000000000000LL) != 0)
  {
    uint64_t v15 = HIDWORD(*((void *)&v11 + 1));
  }

  else
  {
LABEL_28:
    while (v10 - v5 >= 0)
    {
      unint64_t v16 = v12;
      unint64_t v17 = v12 | (unint64_t)(v13 << 32);
      do
      {
        while (1)
        {
          unsigned __int128 v19 = __ldxp(v9);
          unsigned int v12 = DWORD2(v19);
          uint64_t v18 = v19;
          int v20 = (void)v19 != v10;
          if (*((void *)&v19 + 1) != v17) {
            ++v20;
          }
          if (!v20) {
            break;
          }
          if (!__stlxp(v19, v9)) {
            goto LABEL_36;
          }
        }
      }

      while (__stlxp(__PAIR128__(v16, v10 - v5), v9));
LABEL_36:
      if ((void)v19 == v10 && *((void *)&v19 + 1) == v17) {
        return 0LL;
      }
      uint64_t v22 = HIDWORD(*((void *)&v19 + 1));
      BOOL v23 = (v19 & 0x8000000000000000LL) != 0LL && v4;
      uint64_t v10 = v19;
      uint64_t v13 = HIDWORD(*((void *)&v19 + 1));
      if (v23) {
        goto LABEL_46;
      }
    }

    uint64_t v22 = v13;
    uint64_t v18 = v10;
LABEL_46:
    uint64_t v14 = v18;
    uint64_t v15 = v22;
    uint64_t v10 = v18;
  }

  if (v14 == 0xFFFFFFFFLL || (_DWORD)a3 != 1 && (v10 & 0x80000000FFFFFFFFLL) == 0x80000000FFFFFFFFLL) {
    return 0LL;
  }
  while (1)
  {
    int64_t v24 = v10 - v5;
    BOOL v26 = a3 >= 2 && v10 < 0 || v24 < 0;
    int v27 = !v26;
    if (v26)
    {
      if ((_DWORD)v10 == -1) {
        return 0LL;
      }
      int64_t v24 = v10 & 0x80000000FFFFFFFFLL | 0x100000000LL;
    }

    unint64_t v28 = v12;
    unint64_t v29 = v12 | (unint64_t)(v15 << 32);
    do
    {
      while (1)
      {
        unsigned __int128 v30 = __ldxp(v9);
        unsigned int v12 = DWORD2(v30);
        int v31 = (void)v30 != v10;
        if (*((void *)&v30 + 1) != v29) {
          ++v31;
        }
        if (!v31) {
          break;
        }
        if (!__stlxp(v30, v9)) {
          goto LABEL_70;
        }
      }
    }

    while (__stlxp(__PAIR128__(v28, v24), v9));
LABEL_70:
    if ((void)v30 == v10 && *((void *)&v30 + 1) == v29) {
      return v27 ^ 1u;
    }
    uint64_t v15 = HIDWORD(*((void *)&v30 + 1));
    uint64_t v10 = v30;
  }

uint64_t swift::initializeProtocolLookup(swift *this)
{
  return objc_addLoadImageFunc2();
}

void anonymous namespace'::addImageCallback<&anonymous namespace'::TextSegment,&anonymous namespace'::ProtocolsSection,0,&(swift::addImageProtocolsBlockCallbackUnsafe(void const*,void const*,unsigned long))>( swift *a1)
{
  unint64_t v2 = _dyld_lookup_section_info();
  if (v2) {
    swift::addImageProtocolsBlockCallbackUnsafe(a1, v2, v3);
  }
}

uint64_t swift::initializeProtocolConformanceLookup(swift *this)
{
  return objc_addLoadImageFunc2();
}

void anonymous namespace'::addImageCallback<&anonymous namespace'::TextSegment,&anonymous namespace'::ProtocolConformancesSection,1,&(swift::addImageProtocolConformanceBlockCallbackUnsafe(void const*,void const*,unsigned long))>( swift *a1)
{
  unint64_t v2 = _dyld_lookup_section_info();
  if (v2) {
    swift::addImageProtocolConformanceBlockCallbackUnsafe(a1, v2, v3);
  }
}

uint64_t swift::initializeTypeMetadataRecordLookup(swift *this)
{
  return objc_addLoadImageFunc2();
}

void anonymous namespace'::addImageCallback<&anonymous namespace'::TextSegment,&anonymous namespace'::TypeMetadataRecordSection,2,&(swift::addImageTypeMetadataRecordBlockCallbackUnsafe(void const*,void const*,unsigned long))>( swift *a1)
{
  unint64_t v2 = _dyld_lookup_section_info();
  if (v2) {
    swift::addImageTypeMetadataRecordBlockCallbackUnsafe(a1, v2, v3);
  }
}

uint64_t swift::initializeDynamicReplacementLookup(swift *this)
{
  return objc_addLoadImageFunc2();
}

void anonymous namespace'::addImageCallback2Sections<&anonymous namespace'::TextSegment,&anonymous namespace'::DynamicReplacementSection,&anonymous namespace'::TextSegment,&anonymous namespace'::DynamicReplacementSomeSection,3,4,&(swift::addImageDynamicReplacementBlockCallback(void const*,void const*,unsigned long,void const*,unsigned long))>( swift *a1)
{
  uint64_t v2 = _dyld_lookup_section_info();
  if (v2)
  {
    BOOL v4 = (unsigned int *)v2;
    uint64_t v5 = v3;
    unint64_t v6 = _dyld_lookup_section_info();
    swift::addImageDynamicReplacementBlockCallback(a1, v4, v5, v6, v7);
  }

uint64_t swift::initializeAccessibleFunctionsLookup(swift *this)
{
  return objc_addLoadImageFunc2();
}

void anonymous namespace'::addImageCallback<&anonymous namespace'::TextSegment,&anonymous namespace'::AccessibleFunctionsSection,5,&(swift::addImageAccessibleFunctionsBlockCallbackUnsafe(void const*,void const*,unsigned long))>( swift *a1)
{
  unint64_t v2 = _dyld_lookup_section_info();
  if (v2) {
    swift::addImageAccessibleFunctionsBlockCallbackUnsafe(a1, v2, v3);
  }
}

uint64_t swift::SymbolInfo::getFilename(swift::SymbolInfo *this)
{
  return *(void *)this;
}

uint64_t swift::SymbolInfo::getBaseAddress(swift::SymbolInfo *this)
{
  return *((void *)this + 1);
}

uint64_t swift::SymbolInfo::getSymbolAddress(swift::SymbolInfo *this)
{
  return *((void *)this + 3);
}

uint64_t swift::SymbolInfo::lookup@<X0>(swift::SymbolInfo *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = dladdr(this, &v7);
  if ((_DWORD)result)
  {
    __int128 v5 = *(_OWORD *)&v7.dli_sname;
    *(_OWORD *)a2 = *(_OWORD *)&v7.dli_fname;
    *(_OWORD *)(a2 + 16) = v5;
    char v6 = 1;
  }

  else
  {
    char v6 = 0;
    *(_BYTE *)a2 = 0;
  }

  *(_BYTE *)(a2 + 32) = v6;
  return result;
}

void *swift_copyKeyPathTrivialIndices(void *__src, void *__dst, size_t a3)
{
  return memcpy(__dst, __src, a3);
}

uint64_t equateGenericArguments(const void *a1, const void *a2)
{
  return 1LL;
}

uint64_t hashGenericArguments(const void *a1)
{
  return 0LL;
}

void (*swift_readAtKeyPath(uint64_t *a1, uint64_t a2, uint64_t **a3, char *a4))(uint64_t *a1)
{
  uint64_t v6 = swift::TargetMetadata<swift::InProcess>::getGenericArgs(*a3, a2, (const char *)a3, a4)[1];
  *a1 = v6;
  BufferIn = swift::TargetMetadata<swift::InProcess>::allocateBufferIn(v6, a1 + 1);
  swift_getAtKeyPath(a2, v8, v9, (uint64_t)BufferIn);
  return _destroy_temporary_continuation;
}

void _destroy_temporary_continuation(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void **)(a1 + 1);
  uint64_t v4 = swift::TargetMetadata<swift::InProcess>::projectBufferFrom(*a1, (uint64_t)(a1 + 1));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v4, v2);
  swift::TargetMetadata<swift::InProcess>::deallocateBufferIn(*a1, v3);
}

void (*swift_modifyAtWritableKeyPath(void *a1, uint64_t a2, uint64_t a3))(id *a1)
{
  *a1 = v4;
  return _release_owner_continuation;
}

void _release_owner_continuation(id *a1)
{
}

void (*swift_modifyAtReferenceWritableKeyPath(void *a1, uint64_t a2))(id *a1)
{
  *a1 = v3;
  return _release_owner_continuation;
}

void *swift_copyPOD(void *a1, const void *a2, uint64_t a3)
{
  return memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
}

_BYTE *swift::metadataimpl::BufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<unsigned char,1ul,1ul,1ul>>,true,1ul,1ul,(swift::metadataimpl::FixedPacking)1>::initializeBufferWithCopyOfBuffer( _BYTE *result, _BYTE *a2)
{
  *uint64_t result = *a2;
  return result;
}

_BYTE *swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<unsigned char,1ul,1ul,1ul>>::initializeWithCopy( _BYTE *result, _BYTE *a2)
{
  *uint64_t result = *a2;
  return result;
}

_BYTE *swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<unsigned char,1ul,1ul,1ul>>::assignWithCopy( _BYTE *result, _BYTE *a2)
{
  *uint64_t result = *a2;
  return result;
}

_BYTE *swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<unsigned char,1ul,1ul,1ul>>::initializeWithTake( _BYTE *result, _BYTE *a2)
{
  *uint64_t result = *a2;
  return result;
}

_BYTE *swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<unsigned char,1ul,1ul,1ul>>::assignWithTake( _BYTE *result, _BYTE *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t swift::metadataimpl::FixedSizeBufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<unsigned char,1ul,1ul,1ul>>,true,1ul,1ul,false>::getEnumTagSinglePayload( unsigned __int8 *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  unsigned int v2 = a2 + 255;
  if (v2 >> 8 < 0xFF)
  {
    int v3 = a1[1];
    if (!a1[1]) {
      return 0LL;
    }
    return (*a1 | (v3 << 8)) - 255;
  }

  if (v2 >= 0xFFFF00)
  {
    int v3 = *(_DWORD *)(a1 + 1);
    if (v3) {
      return (*a1 | (v3 << 8)) - 255;
    }
  }

  else
  {
    int v3 = *(unsigned __int16 *)(a1 + 1);
    if (*(_WORD *)(a1 + 1)) {
      return (*a1 | (v3 << 8)) - 255;
    }
  }

  return 0LL;
}

void swift::metadataimpl::FixedSizeBufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<unsigned char,1ul,1ul,1ul>>,true,1ul,1ul,false>::storeEnumTagSinglePayload( _BYTE *a1, int a2, int a3)
{
  if (a3 && (unsigned int v3 = a3 + 255, (a3 + 255) >= 0x100))
  {
    if (v3 >= 0xFFFF00) {
      unsigned int v4 = 4;
    }
    else {
      unsigned int v4 = 2;
    }
    if (v3 >> 8 < 0xFF) {
      uint64_t v5 = 1LL;
    }
    else {
      uint64_t v5 = v4;
    }
    if (a2)
    {
      unsigned int v6 = ((a2 - 1) >> 8) + 1;
      *a1 = a2 - 1;
      switch((int)v5)
      {
        case 1:
          a1[1] = v6;
          break;
        case 2:
          *(_WORD *)(a1 + 1) = v6;
          break;
        case 3:
          *(_WORD *)(a1 + 1) = v6;
          a1[3] = BYTE2(v6);
          break;
        case 4:
          *(_DWORD *)(a1 + 1) = v6;
          break;
        default:
          *(_DWORD *)(a1 + 1) = v6;
          goto LABEL_22;
      }
    }

    else
    {
      switch(v5)
      {
        case 1LL:
          a1[1] = 0;
          break;
        case 2LL:
          *(_WORD *)(a1 + 1) = 0;
          break;
        case 3LL:
          a1[3] = 0;
          *(_WORD *)(a1 + 1) = 0;
          break;
        case 4LL:
          *(_DWORD *)(a1 + 1) = 0;
          break;
        default:
          *(_DWORD *)(a1 + 1) = 0;
LABEL_22:
          bzero(a1 + 5, v5 - 4);
          break;
      }
    }
  }

  else if (a2)
  {
    *a1 = a2 - 1;
  }

_WORD *swift::metadataimpl::BufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<unsigned short,2ul,2ul,2ul>>,true,2ul,2ul,(swift::metadataimpl::FixedPacking)1>::initializeBufferWithCopyOfBuffer( _WORD *result, _WORD *a2)
{
  *uint64_t result = *a2;
  return result;
}

_WORD *swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<unsigned short,2ul,2ul,2ul>>::initializeWithCopy( _WORD *result, _WORD *a2)
{
  *uint64_t result = *a2;
  return result;
}

_WORD *swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<unsigned short,2ul,2ul,2ul>>::assignWithCopy( _WORD *result, _WORD *a2)
{
  *uint64_t result = *a2;
  return result;
}

_WORD *swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<unsigned short,2ul,2ul,2ul>>::initializeWithTake( _WORD *result, _WORD *a2)
{
  *uint64_t result = *a2;
  return result;
}

_WORD *swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<unsigned short,2ul,2ul,2ul>>::assignWithTake( _WORD *result, _WORD *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t swift::metadataimpl::FixedSizeBufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<unsigned short,2ul,2ul,2ul>>,true,2ul,2ul,false>::getEnumTagSinglePayload( unsigned __int16 *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  unsigned int v2 = a2 + 0xFFFF;
  if (v2 < 0xFF0000)
  {
    int v3 = *((unsigned __int8 *)a1 + 2);
    if (!*((_BYTE *)a1 + 2)) {
      return 0LL;
    }
    return (*a1 | (v3 << 16)) - 0xFFFF;
  }

  if (v2 <= 0xFFFEFFFF)
  {
    int v3 = a1[1];
    if (a1[1]) {
      return (*a1 | (v3 << 16)) - 0xFFFF;
    }
  }

  else
  {
    int v3 = *(_DWORD *)(a1 + 1);
    if (v3) {
      return (*a1 | (v3 << 16)) - 0xFFFF;
    }
  }

  return 0LL;
}

void swift::metadataimpl::FixedSizeBufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<unsigned short,2ul,2ul,2ul>>,true,2ul,2ul,false>::storeEnumTagSinglePayload( uint64_t a1, int a2, int a3)
{
  if (a3 && (unsigned int v3 = a3 + 0xFFFF, (a3 + 0xFFFF) >= 0x10000))
  {
    if (v3 <= 0xFFFEFFFF) {
      unsigned int v4 = 2;
    }
    else {
      unsigned int v4 = 4;
    }
    if (v3 < 0xFF0000) {
      uint64_t v5 = 1LL;
    }
    else {
      uint64_t v5 = v4;
    }
    if (a2)
    {
      unsigned int v6 = ((a2 - 1) >> 16) + 1;
      *(_WORD *)a1 = a2 - 1;
      switch((int)v5)
      {
        case 1:
          *(_BYTE *)(a1 + 2) = v6;
          break;
        case 2:
          *(_WORD *)(a1 + 2) = v6;
          break;
        case 3:
          *(_WORD *)(a1 + 2) = v6;
          *(_BYTE *)(a1 + 4) = BYTE2(v6);
          break;
        case 4:
          *(_DWORD *)(a1 + 2) = v6;
          break;
        default:
          *(_DWORD *)(a1 + 2) = v6;
          goto LABEL_22;
      }
    }

    else
    {
      switch(v5)
      {
        case 1LL:
          *(_BYTE *)(a1 + 2) = 0;
          break;
        case 2LL:
          *(_WORD *)(a1 + 2) = 0;
          break;
        case 3LL:
          *(_BYTE *)(a1 + 4) = 0;
          *(_WORD *)(a1 + 2) = 0;
          break;
        case 4LL:
          *(_DWORD *)(a1 + 2) = 0;
          break;
        default:
          *(_DWORD *)(a1 + 2) = 0;
LABEL_22:
          bzero((void *)(a1 + 6), v5 - 4);
          break;
      }
    }
  }

  else if (a2)
  {
    *(_WORD *)a1 = a2 - 1;
  }

_DWORD *swift::metadataimpl::BufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<unsigned int,4ul,4ul,4ul>>,true,4ul,4ul,(swift::metadataimpl::FixedPacking)1>::initializeBufferWithCopyOfBuffer( _DWORD *result, _DWORD *a2)
{
  *uint64_t result = *a2;
  return result;
}

_DWORD *swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<unsigned int,4ul,4ul,4ul>>::initializeWithCopy( _DWORD *result, _DWORD *a2)
{
  *uint64_t result = *a2;
  return result;
}

_DWORD *swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<unsigned int,4ul,4ul,4ul>>::assignWithCopy( _DWORD *result, _DWORD *a2)
{
  *uint64_t result = *a2;
  return result;
}

_DWORD *swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<unsigned int,4ul,4ul,4ul>>::initializeWithTake( _DWORD *result, _DWORD *a2)
{
  *uint64_t result = *a2;
  return result;
}

_DWORD *swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<unsigned int,4ul,4ul,4ul>>::assignWithTake( _DWORD *result, _DWORD *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t swift::metadataimpl::FixedSizeBufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<unsigned int,4ul,4ul,4ul>>,true,4ul,4ul,false>::getEnumTagSinglePayload( uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 4)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t swift::metadataimpl::FixedSizeBufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<unsigned int,4ul,4ul,4ul>>,true,4ul,4ul,false>::storeEnumTagSinglePayload( uint64_t result, int a2, int a3)
{
  if (a3)
  {
    if (a2)
    {
      *(_DWORD *)uint64_t result = a2 - 1;
      *(_BYTE *)(result + 4) = 1;
    }

    else
    {
      *(_BYTE *)(result + 4) = 0;
    }
  }

  else if (a2)
  {
    *(_DWORD *)uint64_t result = a2 - 1;
  }

  return result;
}

void *swift::metadataimpl::BufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<unsigned long long,8ul,8ul,8ul>>,true,8ul,8ul,(swift::metadataimpl::FixedPacking)1>::initializeBufferWithCopyOfBuffer( void *result, void *a2)
{
  *uint64_t result = *a2;
  return result;
}

void *swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<unsigned long long,8ul,8ul,8ul>>::initializeWithCopy( void *result, void *a2)
{
  *uint64_t result = *a2;
  return result;
}

void *swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<unsigned long long,8ul,8ul,8ul>>::assignWithCopy( void *result, void *a2)
{
  *uint64_t result = *a2;
  return result;
}

void *swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<unsigned long long,8ul,8ul,8ul>>::initializeWithTake( void *result, void *a2)
{
  *uint64_t result = *a2;
  return result;
}

void *swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<unsigned long long,8ul,8ul,8ul>>::assignWithTake( void *result, void *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t swift::metadataimpl::FixedSizeBufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<unsigned long long,8ul,8ul,8ul>>,true,8ul,8ul,false>::getEnumTagSinglePayload( uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t swift::metadataimpl::FixedSizeBufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<unsigned long long,8ul,8ul,8ul>>,true,8ul,8ul,false>::storeEnumTagSinglePayload( uint64_t result, int a2, int a3)
{
  if (a3)
  {
    if (a2)
    {
      *(_DWORD *)uint64_t result = a2 - 1;
      *(_DWORD *)(result + 4) = 0;
      *(_BYTE *)(result + 8) = 1;
    }

    else
    {
      *(_BYTE *)(result + 8) = 0;
    }
  }

  else if (a2)
  {
    *(void *)uint64_t result = (a2 - 1);
  }

  return result;
}

char *swift::metadataimpl::BufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<anonymous namespace'::int128_like,16ul,16ul,16ul>>,true,16ul,16ul,(swift::metadataimpl::FixedPacking)0>::initializeBufferWithCopyOfBuffer( unint64_t **a1, unint64_t **a2, uint64_t a3, char *a4)
{
  uint64_t v4 = *(void *)(a3 - 8);
  uint64_t v5 = *a2;
  *a1 = *a2;
  swift_retain(v5, (uint64_t)a2, a3, a4);
  return (char *)v5 + ((*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
}

__n128 swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<anonymous namespace'::int128_like,16ul,16ul,16ul>>::initializeWithCopy( __n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

__n128 swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<anonymous namespace'::int128_like,16ul,16ul,16ul>>::assignWithCopy( __n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

__n128 swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<anonymous namespace'::int128_like,16ul,16ul,16ul>>::initializeWithTake( __n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

__n128 swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<anonymous namespace'::int128_like,16ul,16ul,16ul>>::assignWithTake( __n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t swift::metadataimpl::FixedSizeBufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<anonymous namespace'::int128_like,16ul,16ul,16ul>>,true,16ul,16ul,false>::getEnumTagSinglePayload( uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t swift::metadataimpl::FixedSizeBufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<anonymous namespace'::int128_like,16ul,16ul,16ul>>,true,16ul,16ul,false>::storeEnumTagSinglePayload( uint64_t result, int a2, int a3)
{
  if (a3)
  {
    if (a2)
    {
      *(_DWORD *)__n128 result = a2 - 1;
      *(void *)(result + 4) = 0LL;
      *(_DWORD *)(result + 12) = 0;
      *(_BYTE *)(result + 16) = 1;
    }

    else
    {
      *(_BYTE *)(result + 16) = 0;
    }
  }

  else if (a2)
  {
    *(_DWORD *)__n128 result = a2 - 1;
    *(void *)(result + 4) = 0LL;
    *(_DWORD *)(result + 12) = 0;
  }

  return result;
}

char *swift::metadataimpl::BufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<anonymous namespace'::int256_like,16ul,32ul,32ul>>,true,32ul,16ul,(swift::metadataimpl::FixedPacking)0>::initializeBufferWithCopyOfBuffer( unint64_t **a1, unint64_t **a2, uint64_t a3, char *a4)
{
  uint64_t v4 = *(void *)(a3 - 8);
  uint64_t v5 = *a2;
  *a1 = *a2;
  swift_retain(v5, (uint64_t)a2, a3, a4);
  return (char *)v5 + ((*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
}

__n128 swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<anonymous namespace'::int256_like,16ul,32ul,32ul>>::initializeWithCopy( _OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

__n128 swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<anonymous namespace'::int256_like,16ul,32ul,32ul>>::assignWithCopy( _OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

__n128 swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<anonymous namespace'::int256_like,16ul,32ul,32ul>>::initializeWithTake( _OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

__n128 swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<anonymous namespace'::int256_like,16ul,32ul,32ul>>::assignWithTake( _OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t swift::metadataimpl::FixedSizeBufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<anonymous namespace'::int256_like,16ul,32ul,32ul>>,true,32ul,16ul,false>::getEnumTagSinglePayload( uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t swift::metadataimpl::FixedSizeBufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<anonymous namespace'::int256_like,16ul,32ul,32ul>>,true,32ul,16ul,false>::storeEnumTagSinglePayload( uint64_t result, int a2, int a3)
{
  if (a3)
  {
    if (a2)
    {
      *(_DWORD *)__n128 result = a2 - 1;
      *(void *)(result + 4) = 0LL;
      *(void *)(result + 20) = 0LL;
      *(void *)(result + 12) = 0LL;
      *(_DWORD *)(result + 28) = 0;
      *(_BYTE *)(result + 32) = 1;
    }

    else
    {
      *(_BYTE *)(result + 32) = 0;
    }
  }

  else if (a2)
  {
    *(_DWORD *)__n128 result = a2 - 1;
    *(void *)(result + 4) = 0LL;
    *(void *)(result + 20) = 0LL;
    *(void *)(result + 12) = 0LL;
    *(_DWORD *)(result + 28) = 0;
  }

  return result;
}

char *swift::metadataimpl::BufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<anonymous namespace'::int512_like,16ul,64ul,64ul>>,true,64ul,16ul,(swift::metadataimpl::FixedPacking)0>::initializeBufferWithCopyOfBuffer( unint64_t **a1, unint64_t **a2, uint64_t a3, char *a4)
{
  uint64_t v4 = *(void *)(a3 - 8);
  uint64_t v5 = *a2;
  *a1 = *a2;
  swift_retain(v5, (uint64_t)a2, a3, a4);
  return (char *)v5 + ((*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
}

__n128 swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<anonymous namespace'::int512_like,16ul,64ul,64ul>>::initializeWithCopy( uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<anonymous namespace'::int512_like,16ul,64ul,64ul>>::assignWithCopy( uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<anonymous namespace'::int512_like,16ul,64ul,64ul>>::initializeWithTake( uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<anonymous namespace'::int512_like,16ul,64ul,64ul>>::assignWithTake( uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t swift::metadataimpl::FixedSizeBufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<anonymous namespace'::int512_like,16ul,64ul,64ul>>,true,64ul,16ul,false>::getEnumTagSinglePayload( uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t swift::metadataimpl::FixedSizeBufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<anonymous namespace'::int512_like,16ul,64ul,64ul>>,true,64ul,16ul,false>::storeEnumTagSinglePayload( uint64_t result, int a2, int a3)
{
  if (a3)
  {
    if (a2)
    {
      *(_DWORD *)__n128 result = a2 - 1;
      *(_OWORD *)(result + 4) = 0u;
      *(_OWORD *)(result + 20) = 0u;
      *(_OWORD *)(result + 36) = 0u;
      *(_OWORD *)(result + 48) = 0u;
      *(_BYTE *)(result + 64) = 1;
    }

    else
    {
      *(_BYTE *)(result + 64) = 0;
    }
  }

  else if (a2)
  {
    *(_DWORD *)__n128 result = a2 - 1;
    *(_OWORD *)(result + 4) = 0u;
    *(_OWORD *)(result + 20) = 0u;
    *(_OWORD *)(result + 36) = 0u;
    *(_OWORD *)(result + 48) = 0u;
  }

  return result;
}

void *swift::metadataimpl::BufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<long,8ul,8ul,8ul>>,true,8ul,8ul,(swift::metadataimpl::FixedPacking)1>::initializeBufferWithCopyOfBuffer( void *result, void *a2)
{
  *__n128 result = *a2;
  return result;
}

void *swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<long,8ul,8ul,8ul>>::initializeWithCopy( void *result, void *a2)
{
  *__n128 result = *a2;
  return result;
}

void *swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<long,8ul,8ul,8ul>>::assignWithCopy( void *result, void *a2)
{
  *__n128 result = *a2;
  return result;
}

void *swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<long,8ul,8ul,8ul>>::initializeWithTake( void *result, void *a2)
{
  *__n128 result = *a2;
  return result;
}

void *swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<long,8ul,8ul,8ul>>::assignWithTake( void *result, void *a2)
{
  *__n128 result = *a2;
  return result;
}

uint64_t swift::metadataimpl::FixedSizeBufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<long,8ul,8ul,8ul>>,true,8ul,8ul,false>::getEnumTagSinglePayload( uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t swift::metadataimpl::FixedSizeBufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<long,8ul,8ul,8ul>>,true,8ul,8ul,false>::storeEnumTagSinglePayload( uint64_t result, int a2, int a3)
{
  if (a3)
  {
    if (a2)
    {
      *(_DWORD *)__n128 result = a2 - 1;
      *(_DWORD *)(result + 4) = 0;
      *(_BYTE *)(result + 8) = 1;
    }

    else
    {
      *(_BYTE *)(result + 8) = 0;
    }
  }

  else if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
  }

  return result;
}

float swift::metadataimpl::BufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<float,4ul,4ul,4ul>>,true,4ul,4ul,(swift::metadataimpl::FixedPacking)1>::initializeBufferWithCopyOfBuffer( _DWORD *a1, float *a2)
{
  float result = *a2;
  *a1 = *(_DWORD *)a2;
  return result;
}

float swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<float,4ul,4ul,4ul>>::initializeWithCopy( _DWORD *a1, float *a2)
{
  float result = *a2;
  *a1 = *(_DWORD *)a2;
  return result;
}

float swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<float,4ul,4ul,4ul>>::assignWithCopy( _DWORD *a1, float *a2)
{
  float result = *a2;
  *a1 = *(_DWORD *)a2;
  return result;
}

float swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<float,4ul,4ul,4ul>>::initializeWithTake( _DWORD *a1, float *a2)
{
  float result = *a2;
  *a1 = *(_DWORD *)a2;
  return result;
}

float swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<float,4ul,4ul,4ul>>::assignWithTake( _DWORD *a1, float *a2)
{
  float result = *a2;
  *a1 = *(_DWORD *)a2;
  return result;
}

uint64_t swift::metadataimpl::FixedSizeBufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<float,4ul,4ul,4ul>>,true,4ul,4ul,false>::getEnumTagSinglePayload( uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 4)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t swift::metadataimpl::FixedSizeBufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<float,4ul,4ul,4ul>>,true,4ul,4ul,false>::storeEnumTagSinglePayload( uint64_t result, int a2, int a3)
{
  if (a3)
  {
    if (a2)
    {
      *(_DWORD *)float result = a2 - 1;
      *(_BYTE *)(result + 4) = 1;
    }

    else
    {
      *(_BYTE *)(result + 4) = 0;
    }
  }

  else if (a2)
  {
    *(_DWORD *)float result = a2 - 1;
  }

  return result;
}

double swift::metadataimpl::BufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<double,8ul,8ul,8ul>>,true,8ul,8ul,(swift::metadataimpl::FixedPacking)1>::initializeBufferWithCopyOfBuffer( void *a1, double *a2)
{
  double result = *a2;
  *a1 = *(void *)a2;
  return result;
}

double swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<double,8ul,8ul,8ul>>::initializeWithCopy( void *a1, double *a2)
{
  double result = *a2;
  *a1 = *(void *)a2;
  return result;
}

double swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<double,8ul,8ul,8ul>>::assignWithCopy( void *a1, double *a2)
{
  double result = *a2;
  *a1 = *(void *)a2;
  return result;
}

double swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<double,8ul,8ul,8ul>>::initializeWithTake( void *a1, double *a2)
{
  double result = *a2;
  *a1 = *(void *)a2;
  return result;
}

double swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<double,8ul,8ul,8ul>>::assignWithTake( void *a1, double *a2)
{
  double result = *a2;
  *a1 = *(void *)a2;
  return result;
}

uint64_t swift::metadataimpl::FixedSizeBufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<double,8ul,8ul,8ul>>,true,8ul,8ul,false>::getEnumTagSinglePayload( uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t swift::metadataimpl::FixedSizeBufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<double,8ul,8ul,8ul>>,true,8ul,8ul,false>::storeEnumTagSinglePayload( uint64_t result, int a2, int a3)
{
  if (a3)
  {
    if (a2)
    {
      *(_DWORD *)double result = a2 - 1;
      *(_DWORD *)(result + 4) = 0;
      *(_BYTE *)(result + 8) = 1;
    }

    else
    {
      *(_BYTE *)(result + 8) = 0;
    }
  }

  else if (a2)
  {
    *(void *)double result = (a2 - 1);
  }

  return result;
}

char *swift::metadataimpl::BufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<anonymous namespace'::float80_like,16ul,16ul,16ul>>,true,16ul,16ul,(swift::metadataimpl::FixedPacking)0>::initializeBufferWithCopyOfBuffer( unint64_t **a1, unint64_t **a2, uint64_t a3, char *a4)
{
  uint64_t v4 = *(void *)(a3 - 8);
  uint64_t v5 = *a2;
  *a1 = *a2;
  swift_retain(v5, (uint64_t)a2, a3, a4);
  return (char *)v5 + ((*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
}

__n128 swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<anonymous namespace'::float80_like,16ul,16ul,16ul>>::initializeWithCopy( __n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

__n128 swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<anonymous namespace'::float80_like,16ul,16ul,16ul>>::assignWithCopy( __n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

__n128 swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<anonymous namespace'::float80_like,16ul,16ul,16ul>>::initializeWithTake( __n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

__n128 swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<anonymous namespace'::float80_like,16ul,16ul,16ul>>::assignWithTake( __n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t swift::metadataimpl::FixedSizeBufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<anonymous namespace'::float80_like,16ul,16ul,16ul>>,true,16ul,16ul,false>::getEnumTagSinglePayload( uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t swift::metadataimpl::FixedSizeBufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<anonymous namespace'::float80_like,16ul,16ul,16ul>>,true,16ul,16ul,false>::storeEnumTagSinglePayload( uint64_t result, int a2, int a3)
{
  if (a3)
  {
    if (a2)
    {
      *(_DWORD *)__n128 result = a2 - 1;
      *(void *)(result + 4) = 0LL;
      *(_DWORD *)(result + 12) = 0;
      *(_BYTE *)(result + 16) = 1;
    }

    else
    {
      *(_BYTE *)(result + 16) = 0;
    }
  }

  else if (a2)
  {
    *(_DWORD *)__n128 result = a2 - 1;
    *(void *)(result + 4) = 0LL;
    *(_DWORD *)(result + 12) = 0;
  }

  return result;
}

unint64_t **swift::metadataimpl::BufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::SwiftRetainableBox>,true,8ul,8ul,(swift::metadataimpl::FixedPacking)1>::initializeBufferWithCopyOfBuffer( unint64_t **a1, unint64_t **a2, uint64_t a3, char *a4)
{
  uint64_t v5 = *a2;
  swift_retain(*a2, (uint64_t)a2, a3, a4);
  *a1 = v5;
  return a1;
}

uint64_t swift::metadataimpl::ValueWitnesses<swift::metadataimpl::SwiftRetainableBox>::destroy(uint64_t *a1)
{
  return swift_release(*a1);
}

unint64_t **swift::metadataimpl::ValueWitnesses<swift::metadataimpl::SwiftRetainableBox>::initializeWithCopy( unint64_t **a1, unint64_t **a2, uint64_t a3, char *a4)
{
  uint64_t v5 = *a2;
  swift_retain(*a2, (uint64_t)a2, a3, a4);
  *a1 = v5;
  return a1;
}

uint64_t *swift::metadataimpl::ValueWitnesses<swift::metadataimpl::SwiftRetainableBox>::assignWithCopy( uint64_t *a1, unint64_t **a2, uint64_t a3, char *a4)
{
  uint64_t v5 = *a1;
  unsigned int v6 = *a2;
  swift_retain(*a2, (uint64_t)a2, a3, a4);
  *a1 = (uint64_t)v6;
  swift_release(v5);
  return a1;
}

void *swift::metadataimpl::ValueWitnesses<swift::metadataimpl::SwiftRetainableBox>::initializeWithTake( void *result, void *a2)
{
  *__n128 result = *a2;
  return result;
}

uint64_t *swift::metadataimpl::ValueWitnesses<swift::metadataimpl::SwiftRetainableBox>::assignWithTake( uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  *a1 = *a2;
  swift_release(v3);
  return a1;
}

uint64_t swift::metadataimpl::FixedSizeBufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::SwiftRetainableBox>,true,8ul,8ul,true>::getEnumTagSinglePayload( uint64_t a1, int a2)
{
  if (a2 < 0 && *(_BYTE *)(a1 + 8)) {
    return *(_DWORD *)a1 ^ 0x80000000;
  }
  if (HIDWORD(*(void *)a1)) {
    return 0LL;
  }
  return *(void *)a1 + 1;
}

uint64_t swift::metadataimpl::FixedSizeBufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::SwiftRetainableBox>,true,8ul,8ul,true>::storeEnumTagSinglePayload( uint64_t result, int a2, int a3)
{
  if ((a3 & 0x80000000) == 0)
  {
    if (a2 < 0)
    {
      *(void *)__n128 result = a2 ^ 0x80000000;
      return result;
    }

    if (!a2) {
      return result;
    }
LABEL_7:
    *(void *)__n128 result = (a2 - 1);
    return result;
  }

  if (a2 < 0)
  {
    *(_DWORD *)__n128 result = a2 ^ 0x80000000;
    *(_DWORD *)(result + 4) = 0;
    *(_BYTE *)(result + 8) = 1;
    return result;
  }

  *(_BYTE *)(result + 8) = 0;
  if (a2) {
    goto LABEL_7;
  }
  return result;
}

unint64_t *swift::metadataimpl::BufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::BridgeObjectBox>,true,8ul,8ul,(swift::metadataimpl::FixedPacking)1>::initializeBufferWithCopyOfBuffer( unint64_t *a1, unint64_t *a2, uint64_t a3, char *a4)
{
  *a1 = swift_bridgeObjectRetain(*a2, (uint64_t)a2, a3, a4);
  return a1;
}

void swift::metadataimpl::ValueWitnesses<swift::metadataimpl::BridgeObjectBox>::destroy(uint64_t *a1)
{
}

unint64_t *swift::metadataimpl::ValueWitnesses<swift::metadataimpl::BridgeObjectBox>::initializeWithCopy( unint64_t *a1, unint64_t *a2, uint64_t a3, char *a4)
{
  *a1 = swift_bridgeObjectRetain(*a2, (uint64_t)a2, a3, a4);
  return a1;
}

uint64_t *swift::metadataimpl::ValueWitnesses<swift::metadataimpl::BridgeObjectBox>::assignWithCopy( uint64_t *a1, unint64_t *a2, uint64_t a3, char *a4)
{
  uint64_t v5 = *a1;
  *a1 = swift_bridgeObjectRetain(*a2, (uint64_t)a2, a3, a4);
  swift_bridgeObjectRelease(v5);
  return a1;
}

void *swift::metadataimpl::ValueWitnesses<swift::metadataimpl::BridgeObjectBox>::initializeWithTake( void *result, void *a2)
{
  *__n128 result = *a2;
  return result;
}

uint64_t *swift::metadataimpl::ValueWitnesses<swift::metadataimpl::BridgeObjectBox>::assignWithTake( uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v3);
  return a1;
}

uint64_t swift::metadataimpl::FixedSizeBufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::BridgeObjectBox>,true,8ul,8ul,true>::getEnumTagSinglePayload( uint64_t a1, int a2)
{
  if (a2 < 0 && *(_BYTE *)(a1 + 8)) {
    return *(_DWORD *)a1 ^ 0x80000000;
  }
  if (HIDWORD(*(void *)a1)) {
    return 0LL;
  }
  return *(void *)a1 + 1;
}

uint64_t swift::metadataimpl::FixedSizeBufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::BridgeObjectBox>,true,8ul,8ul,true>::storeEnumTagSinglePayload( uint64_t result, int a2, int a3)
{
  if ((a3 & 0x80000000) == 0)
  {
    if (a2 < 0)
    {
      *(void *)__n128 result = a2 ^ 0x80000000;
      return result;
    }

    if (!a2) {
      return result;
    }
LABEL_7:
    *(void *)__n128 result = (a2 - 1);
    return result;
  }

  if (a2 < 0)
  {
    *(_DWORD *)__n128 result = a2 ^ 0x80000000;
    *(_DWORD *)(result + 4) = 0;
    *(_BYTE *)(result + 8) = 1;
    return result;
  }

  *(_BYTE *)(result + 8) = 0;
  if (a2) {
    goto LABEL_7;
  }
  return result;
}

void *swift::metadataimpl::BufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::RawPointerBox>,true,8ul,8ul,(swift::metadataimpl::FixedPacking)1>::initializeBufferWithCopyOfBuffer( void *result, void *a2)
{
  *__n128 result = *a2;
  return result;
}

void *swift::metadataimpl::ValueWitnesses<swift::metadataimpl::RawPointerBox>::initializeWithCopy( void *result, void *a2)
{
  *__n128 result = *a2;
  return result;
}

void *swift::metadataimpl::ValueWitnesses<swift::metadataimpl::RawPointerBox>::assignWithCopy( void *result, void *a2)
{
  *__n128 result = *a2;
  return result;
}

void *swift::metadataimpl::ValueWitnesses<swift::metadataimpl::RawPointerBox>::initializeWithTake( void *result, void *a2)
{
  *__n128 result = *a2;
  return result;
}

void *swift::metadataimpl::ValueWitnesses<swift::metadataimpl::RawPointerBox>::assignWithTake( void *result, void *a2)
{
  *__n128 result = *a2;
  return result;
}

uint64_t swift::metadataimpl::FixedSizeBufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::RawPointerBox>,true,8ul,8ul,true>::getEnumTagSinglePayload( uint64_t a1, unsigned int a2)
{
  if (a2 >= 2 && *(_BYTE *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 2);
  }
  else {
    return *(void *)a1 == 0LL;
  }
}

uint64_t swift::metadataimpl::FixedSizeBufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::RawPointerBox>,true,8ul,8ul,true>::storeEnumTagSinglePayload( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 < 2)
  {
    if (a2 >= 2)
    {
      *(_DWORD *)__n128 result = a2 - 2;
      *(_DWORD *)(result + 4) = 0;
      return result;
    }
  }

  else
  {
    if (a2 > 1)
    {
      *(_DWORD *)__n128 result = a2 - 2;
      *(_DWORD *)(result + 4) = 0;
      *(_BYTE *)(result + 8) = 1;
      return result;
    }

    *(_BYTE *)(result + 8) = 0;
  }

  if (a2) {
    *(void *)__n128 result = 0LL;
  }
  return result;
}

__n128 swift::metadataimpl::BufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<swift::TargetValueBuffer<swift::InProcess>,8ul,24ul,24ul>>,true,24ul,8ul,(swift::metadataimpl::FixedPacking)1>::initializeBufferWithCopyOfBuffer( __n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

__n128 swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<swift::TargetValueBuffer<swift::InProcess>,8ul,24ul,24ul>>::initializeWithCopy( __n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

__n128 swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<swift::TargetValueBuffer<swift::InProcess>,8ul,24ul,24ul>>::assignWithCopy( __n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

__n128 swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<swift::TargetValueBuffer<swift::InProcess>,8ul,24ul,24ul>>::initializeWithTake( __n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

__n128 swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<swift::TargetValueBuffer<swift::InProcess>,8ul,24ul,24ul>>::assignWithTake( __n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t swift::metadataimpl::FixedSizeBufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<swift::TargetValueBuffer<swift::InProcess>,8ul,24ul,24ul>>,true,24ul,8ul,false>::getEnumTagSinglePayload( uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t swift::metadataimpl::FixedSizeBufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<swift::TargetValueBuffer<swift::InProcess>,8ul,24ul,24ul>>,true,24ul,8ul,false>::storeEnumTagSinglePayload( uint64_t result, int a2, int a3)
{
  if (a3)
  {
    if (a2)
    {
      *(_DWORD *)__n128 result = a2 - 1;
      *(void *)(result + 12) = 0LL;
      *(void *)(result + 4) = 0LL;
      *(_DWORD *)(result + 20) = 0;
      *(_BYTE *)(result + 24) = 1;
    }

    else
    {
      *(_BYTE *)(result + 24) = 0;
    }
  }

  else if (a2)
  {
    *(_DWORD *)__n128 result = a2 - 1;
    *(void *)(result + 12) = 0LL;
    *(void *)(result + 4) = 0LL;
    *(_DWORD *)(result + 20) = 0;
  }

  return result;
}

void *swift::metadataimpl::BufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::ObjCRetainableBox>,true,8ul,8ul,(swift::metadataimpl::FixedPacking)1>::initializeBufferWithCopyOfBuffer( void *a1, id *a2)
{
  *a1 = *a2;
  return a1;
}

void swift::metadataimpl::ValueWitnesses<swift::metadataimpl::ObjCRetainableBox>::destroy(id *a1)
{
}

void *swift::metadataimpl::ValueWitnesses<swift::metadataimpl::ObjCRetainableBox>::initializeWithCopy( void *a1, id *a2)
{
  *a1 = *a2;
  return a1;
}

void **swift::metadataimpl::ValueWitnesses<swift::metadataimpl::ObjCRetainableBox>::assignWithCopy( void **a1, id *a2)
{
  uint64_t v3 = *a1;
  *a1 = *a2;

  return a1;
}

void *swift::metadataimpl::ValueWitnesses<swift::metadataimpl::ObjCRetainableBox>::initializeWithTake( void *result, void *a2)
{
  *__n128 result = *a2;
  return result;
}

void **swift::metadataimpl::ValueWitnesses<swift::metadataimpl::ObjCRetainableBox>::assignWithTake( void **a1, void **a2)
{
  uint64_t v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t swift::metadataimpl::FixedSizeBufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::ObjCRetainableBox>,true,8ul,8ul,true>::getEnumTagSinglePayload( uint64_t a1, int a2)
{
  if (a2 < 0 && *(_BYTE *)(a1 + 8)) {
    return *(_DWORD *)a1 ^ 0x80000000;
  }
  if (HIDWORD(*(void *)a1)) {
    return 0LL;
  }
  return *(void *)a1 + 1;
}

uint64_t swift::metadataimpl::FixedSizeBufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::ObjCRetainableBox>,true,8ul,8ul,true>::storeEnumTagSinglePayload( uint64_t result, int a2, int a3)
{
  if ((a3 & 0x80000000) == 0)
  {
    if (a2 < 0)
    {
      *(void *)__n128 result = a2 ^ 0x80000000;
      return result;
    }

    if (!a2) {
      return result;
    }
LABEL_7:
    *(void *)__n128 result = (a2 - 1);
    return result;
  }

  if (a2 < 0)
  {
    *(_DWORD *)__n128 result = a2 ^ 0x80000000;
    *(_DWORD *)(result + 4) = 0;
    *(_BYTE *)(result + 8) = 1;
    return result;
  }

  *(_BYTE *)(result + 8) = 0;
  if (a2) {
    goto LABEL_7;
  }
  return result;
}

char *swift::metadataimpl::BufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<ctypes::anonymous namespace'::BD,16ul,96ul,96ul>>,true,96ul,16ul,(swift::metadataimpl::FixedPacking)0>::initializeBufferWithCopyOfBuffer( unint64_t **a1, unint64_t **a2, uint64_t a3, char *a4)
{
  uint64_t v4 = *(void *)(a3 - 8);
  uint64_t v5 = *a2;
  *a1 = *a2;
  swift_retain(v5, (uint64_t)a2, a3, a4);
  return (char *)v5 + ((*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
}

__n128 swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<ctypes::anonymous namespace'::BD,16ul,96ul,96ul>>::initializeWithCopy( uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  __int128 v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

__n128 swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<ctypes::anonymous namespace'::BD,16ul,96ul,96ul>>::assignWithCopy( uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  __int128 v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

__n128 swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<ctypes::anonymous namespace'::BD,16ul,96ul,96ul>>::initializeWithTake( uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  __int128 v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

__n128 swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<ctypes::anonymous namespace'::BD,16ul,96ul,96ul>>::assignWithTake( uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  __int128 v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t swift::metadataimpl::FixedSizeBufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<ctypes::anonymous namespace'::BD,16ul,96ul,96ul>>,true,96ul,16ul,false>::getEnumTagSinglePayload( uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 96)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t swift::metadataimpl::FixedSizeBufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<ctypes::anonymous namespace'::BD,16ul,96ul,96ul>>,true,96ul,16ul,false>::storeEnumTagSinglePayload( uint64_t result, int a2, int a3)
{
  if (a3)
  {
    if (a2)
    {
      *(_DWORD *)__n128 result = a2 - 1;
      *(_OWORD *)(result + 4) = 0u;
      *(_OWORD *)(result + 20) = 0u;
      *(_OWORD *)(result + 36) = 0u;
      *(_OWORD *)(result + 52) = 0u;
      *(_OWORD *)(result + 68) = 0u;
      *(_OWORD *)(result + 80) = 0u;
      *(_BYTE *)(result + 96) = 1;
    }

    else
    {
      *(_BYTE *)(result + 96) = 0;
    }
  }

  else if (a2)
  {
    *(_DWORD *)__n128 result = a2 - 1;
    *(_OWORD *)(result + 4) = 0u;
    *(_OWORD *)(result + 20) = 0u;
    *(_OWORD *)(result + 36) = 0u;
    *(_OWORD *)(result + 52) = 0u;
    *(_OWORD *)(result + 68) = 0u;
    *(_OWORD *)(result + 80) = 0u;
  }

  return result;
}

char *swift::metadataimpl::BufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<ctypes::anonymous namespace'::Bd,16ul,96ul,96ul>>,true,96ul,16ul,(swift::metadataimpl::FixedPacking)0>::initializeBufferWithCopyOfBuffer( unint64_t **a1, unint64_t **a2, uint64_t a3, char *a4)
{
  uint64_t v4 = *(void *)(a3 - 8);
  __int128 v5 = *a2;
  *a1 = *a2;
  swift_retain(v5, (uint64_t)a2, a3, a4);
  return (char *)v5 + ((*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
}

__n128 swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<ctypes::anonymous namespace'::Bd,16ul,96ul,96ul>>::initializeWithCopy( uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  __int128 v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

__n128 swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<ctypes::anonymous namespace'::Bd,16ul,96ul,96ul>>::assignWithCopy( uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  __int128 v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

__n128 swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<ctypes::anonymous namespace'::Bd,16ul,96ul,96ul>>::initializeWithTake( uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  __int128 v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

__n128 swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<ctypes::anonymous namespace'::Bd,16ul,96ul,96ul>>::assignWithTake( uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  __int128 v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t swift::metadataimpl::FixedSizeBufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<ctypes::anonymous namespace'::Bd,16ul,96ul,96ul>>,true,96ul,16ul,false>::getEnumTagSinglePayload( uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 96)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t swift::metadataimpl::FixedSizeBufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<ctypes::anonymous namespace'::Bd,16ul,96ul,96ul>>,true,96ul,16ul,false>::storeEnumTagSinglePayload( uint64_t result, int a2, int a3)
{
  if (a3)
  {
    if (a2)
    {
      *(_DWORD *)__n128 result = a2 - 1;
      *(_OWORD *)(result + 4) = 0u;
      *(_OWORD *)(result + 20) = 0u;
      *(_OWORD *)(result + 36) = 0u;
      *(_OWORD *)(result + 52) = 0u;
      *(_OWORD *)(result + 68) = 0u;
      *(_OWORD *)(result + 80) = 0u;
      *(_BYTE *)(result + 96) = 1;
    }

    else
    {
      *(_BYTE *)(result + 96) = 0;
    }
  }

  else if (a2)
  {
    *(_DWORD *)__n128 result = a2 - 1;
    *(_OWORD *)(result + 4) = 0u;
    *(_OWORD *)(result + 20) = 0u;
    *(_OWORD *)(result + 36) = 0u;
    *(_OWORD *)(result + 52) = 0u;
    *(_OWORD *)(result + 68) = 0u;
    *(_OWORD *)(result + 80) = 0u;
  }

  return result;
}

__n128 swift::metadataimpl::BufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<ctypes::anonymous namespace'::Be,8ul,16ul,16ul>>,true,16ul,8ul,(swift::metadataimpl::FixedPacking)1>::initializeBufferWithCopyOfBuffer( __n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

__n128 swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<ctypes::anonymous namespace'::Be,8ul,16ul,16ul>>::initializeWithCopy( __n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

__n128 swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<ctypes::anonymous namespace'::Be,8ul,16ul,16ul>>::assignWithCopy( __n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

__n128 swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<ctypes::anonymous namespace'::Be,8ul,16ul,16ul>>::initializeWithTake( __n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

__n128 swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<ctypes::anonymous namespace'::Be,8ul,16ul,16ul>>::assignWithTake( __n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t swift::metadataimpl::FixedSizeBufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<ctypes::anonymous namespace'::Be,8ul,16ul,16ul>>,true,16ul,8ul,false>::getEnumTagSinglePayload( uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t swift::metadataimpl::FixedSizeBufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::NativeBox<ctypes::anonymous namespace'::Be,8ul,16ul,16ul>>,true,16ul,8ul,false>::storeEnumTagSinglePayload( uint64_t result, int a2, int a3)
{
  if (a3)
  {
    if (a2)
    {
      *(_DWORD *)__n128 result = a2 - 1;
      *(void *)(result + 4) = 0LL;
      *(_DWORD *)(result + 12) = 0;
      *(_BYTE *)(result + 16) = 1;
    }

    else
    {
      *(_BYTE *)(result + 16) = 0;
    }
  }

  else if (a2)
  {
    *(_DWORD *)__n128 result = a2 - 1;
    *(void *)(result + 4) = 0LL;
    *(_DWORD *)(result + 12) = 0;
  }

  return result;
}

_WORD *_ZN5swift12metadataimpl20BufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv2_hLm2ELm2ELm2EEEEELb1ELm2ELm2ELNS0_12FixedPackingE1EE32initializeBufferWithCopyOfBufferEPNS_17TargetValueBufferINS_9InProcessEEESC_PKNS_14TargetMetadataISA_EE( _WORD *result, _WORD *a2)
{
  *__n128 result = *a2;
  return result;
}

_WORD *_ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv2_hLm2ELm2ELm2EEEE18initializeWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( _WORD *result, _WORD *a2)
{
  *__n128 result = *a2;
  return result;
}

_WORD *_ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv2_hLm2ELm2ELm2EEEE14assignWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( _WORD *result, _WORD *a2)
{
  *__n128 result = *a2;
  return result;
}

_WORD *_ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv2_hLm2ELm2ELm2EEEE18initializeWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( _WORD *result, _WORD *a2)
{
  *__n128 result = *a2;
  return result;
}

_WORD *_ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv2_hLm2ELm2ELm2EEEE14assignWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( _WORD *result, _WORD *a2)
{
  *__n128 result = *a2;
  return result;
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv2_hLm2ELm2ELm2EEEEELb1ELm2ELm2ELb0EE23getEnumTagSinglePayloadEPKNS_11OpaqueValueEjPKNS_14TargetMetadataINS_9InProcessEEE( unsigned __int16 *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  unsigned int v2 = a2 + 0xFFFF;
  if (v2 < 0xFF0000)
  {
    int v3 = *((unsigned __int8 *)a1 + 2);
    if (!*((_BYTE *)a1 + 2)) {
      return 0LL;
    }
    return (*a1 | (v3 << 16)) - 0xFFFF;
  }

  if (v2 <= 0xFFFEFFFF)
  {
    int v3 = a1[1];
    if (a1[1]) {
      return (*a1 | (v3 << 16)) - 0xFFFF;
    }
  }

  else
  {
    int v3 = *(_DWORD *)(a1 + 1);
    if (v3) {
      return (*a1 | (v3 << 16)) - 0xFFFF;
    }
  }

  return 0LL;
}

void _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv2_hLm2ELm2ELm2EEEEELb1ELm2ELm2ELb0EE25storeEnumTagSinglePayloadEPNS_11OpaqueValueEjjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, int a2, int a3)
{
  if (a3 && (unsigned int v3 = a3 + 0xFFFF, (a3 + 0xFFFF) >= 0x10000))
  {
    if (v3 <= 0xFFFEFFFF) {
      unsigned int v4 = 2;
    }
    else {
      unsigned int v4 = 4;
    }
    if (v3 < 0xFF0000) {
      uint64_t v5 = 1LL;
    }
    else {
      uint64_t v5 = v4;
    }
    if (a2)
    {
      unsigned int v6 = ((a2 - 1) >> 16) + 1;
      *(_WORD *)a1 = a2 - 1;
      switch((int)v5)
      {
        case 1:
          *(_BYTE *)(a1 + 2) = v6;
          break;
        case 2:
          *(_WORD *)(a1 + 2) = v6;
          break;
        case 3:
          *(_WORD *)(a1 + 2) = v6;
          *(_BYTE *)(a1 + 4) = BYTE2(v6);
          break;
        case 4:
          *(_DWORD *)(a1 + 2) = v6;
          break;
        default:
          *(_DWORD *)(a1 + 2) = v6;
          goto LABEL_22;
      }
    }

    else
    {
      switch(v5)
      {
        case 1LL:
          *(_BYTE *)(a1 + 2) = 0;
          break;
        case 2LL:
          *(_WORD *)(a1 + 2) = 0;
          break;
        case 3LL:
          *(_BYTE *)(a1 + 4) = 0;
          *(_WORD *)(a1 + 2) = 0;
          break;
        case 4LL:
          *(_DWORD *)(a1 + 2) = 0;
          break;
        default:
          *(_DWORD *)(a1 + 2) = 0;
LABEL_22:
          bzero((void *)(a1 + 6), v5 - 4);
          break;
      }
    }
  }

  else if (a2)
  {
    *(_WORD *)a1 = a2 - 1;
  }

_DWORD *_ZN5swift12metadataimpl20BufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv3_hLm4ELm4ELm4EEEEELb1ELm4ELm4ELNS0_12FixedPackingE1EE32initializeBufferWithCopyOfBufferEPNS_17TargetValueBufferINS_9InProcessEEESC_PKNS_14TargetMetadataISA_EE( _DWORD *result, _DWORD *a2)
{
  *__n128 result = *a2;
  return result;
}

_DWORD *_ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv3_hLm4ELm4ELm4EEEE18initializeWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( _DWORD *result, _DWORD *a2)
{
  *__n128 result = *a2;
  return result;
}

_DWORD *_ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv3_hLm4ELm4ELm4EEEE14assignWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( _DWORD *result, _DWORD *a2)
{
  *__n128 result = *a2;
  return result;
}

_DWORD *_ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv3_hLm4ELm4ELm4EEEE18initializeWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( _DWORD *result, _DWORD *a2)
{
  *__n128 result = *a2;
  return result;
}

_DWORD *_ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv3_hLm4ELm4ELm4EEEE14assignWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( _DWORD *result, _DWORD *a2)
{
  *__n128 result = *a2;
  return result;
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv3_hLm4ELm4ELm4EEEEELb1ELm4ELm4ELb0EE23getEnumTagSinglePayloadEPKNS_11OpaqueValueEjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 4)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv3_hLm4ELm4ELm4EEEEELb1ELm4ELm4ELb0EE25storeEnumTagSinglePayloadEPNS_11OpaqueValueEjjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t result, int a2, int a3)
{
  if (a3)
  {
    if (a2)
    {
      *(_DWORD *)__n128 result = a2 - 1;
      *(_BYTE *)(result + 4) = 1;
    }

    else
    {
      *(_BYTE *)(result + 4) = 0;
    }
  }

  else if (a2)
  {
    *(_DWORD *)__n128 result = a2 - 1;
  }

  return result;
}

_DWORD *_ZN5swift12metadataimpl20BufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv4_hLm4ELm4ELm4EEEEELb1ELm4ELm4ELNS0_12FixedPackingE1EE32initializeBufferWithCopyOfBufferEPNS_17TargetValueBufferINS_9InProcessEEESC_PKNS_14TargetMetadataISA_EE( _DWORD *result, _DWORD *a2)
{
  *__n128 result = *a2;
  return result;
}

_DWORD *_ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv4_hLm4ELm4ELm4EEEE18initializeWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( _DWORD *result, _DWORD *a2)
{
  *__n128 result = *a2;
  return result;
}

_DWORD *_ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv4_hLm4ELm4ELm4EEEE14assignWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( _DWORD *result, _DWORD *a2)
{
  *__n128 result = *a2;
  return result;
}

_DWORD *_ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv4_hLm4ELm4ELm4EEEE18initializeWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( _DWORD *result, _DWORD *a2)
{
  *__n128 result = *a2;
  return result;
}

_DWORD *_ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv4_hLm4ELm4ELm4EEEE14assignWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( _DWORD *result, _DWORD *a2)
{
  *__n128 result = *a2;
  return result;
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv4_hLm4ELm4ELm4EEEEELb1ELm4ELm4ELb0EE23getEnumTagSinglePayloadEPKNS_11OpaqueValueEjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 4)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv4_hLm4ELm4ELm4EEEEELb1ELm4ELm4ELb0EE25storeEnumTagSinglePayloadEPNS_11OpaqueValueEjjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t result, int a2, int a3)
{
  if (a3)
  {
    if (a2)
    {
      *(_DWORD *)__n128 result = a2 - 1;
      *(_BYTE *)(result + 4) = 1;
    }

    else
    {
      *(_BYTE *)(result + 4) = 0;
    }
  }

  else if (a2)
  {
    *(_DWORD *)__n128 result = a2 - 1;
  }

  return result;
}

double _ZN5swift12metadataimpl20BufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv8_hLm8ELm8ELm8EEEEELb1ELm8ELm8ELNS0_12FixedPackingE1EE32initializeBufferWithCopyOfBufferEPNS_17TargetValueBufferINS_9InProcessEEESC_PKNS_14TargetMetadataISA_EE( void *a1, double *a2)
{
  double result = *a2;
  *a1 = *(void *)a2;
  return result;
}

double _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv8_hLm8ELm8ELm8EEEE18initializeWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( void *a1, double *a2)
{
  double result = *a2;
  *a1 = *(void *)a2;
  return result;
}

double _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv8_hLm8ELm8ELm8EEEE14assignWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( void *a1, double *a2)
{
  double result = *a2;
  *a1 = *(void *)a2;
  return result;
}

double _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv8_hLm8ELm8ELm8EEEE18initializeWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( void *a1, double *a2)
{
  double result = *a2;
  *a1 = *(void *)a2;
  return result;
}

double _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv8_hLm8ELm8ELm8EEEE14assignWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( void *a1, double *a2)
{
  double result = *a2;
  *a1 = *(void *)a2;
  return result;
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv8_hLm8ELm8ELm8EEEEELb1ELm8ELm8ELb0EE23getEnumTagSinglePayloadEPKNS_11OpaqueValueEjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv8_hLm8ELm8ELm8EEEEELb1ELm8ELm8ELb0EE25storeEnumTagSinglePayloadEPNS_11OpaqueValueEjjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t result, int a2, int a3)
{
  if (a3)
  {
    if (a2)
    {
      *(_DWORD *)double result = a2 - 1;
      *(_DWORD *)(result + 4) = 0;
      *(_BYTE *)(result + 8) = 1;
    }

    else
    {
      *(_BYTE *)(result + 8) = 0;
    }
  }

  else if (a2)
  {
    *(void *)double result = (a2 - 1);
  }

  return result;
}

char *_ZN5swift12metadataimpl20BufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv16_hLm16ELm16ELm16EEEEELb1ELm16ELm16ELNS0_12FixedPackingE0EE32initializeBufferWithCopyOfBufferEPNS_17TargetValueBufferINS_9InProcessEEESC_PKNS_14TargetMetadataISA_EE( unint64_t **a1, unint64_t **a2, uint64_t a3, char *a4)
{
  uint64_t v4 = *(void *)(a3 - 8);
  uint64_t v5 = *a2;
  *a1 = *a2;
  swift_retain(v5, (uint64_t)a2, a3, a4);
  return (char *)v5 + ((*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv16_hLm16ELm16ELm16EEEE18initializeWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( __n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv16_hLm16ELm16ELm16EEEE14assignWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( __n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv16_hLm16ELm16ELm16EEEE18initializeWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( __n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv16_hLm16ELm16ELm16EEEE14assignWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( __n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv16_hLm16ELm16ELm16EEEEELb1ELm16ELm16ELb0EE23getEnumTagSinglePayloadEPKNS_11OpaqueValueEjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv16_hLm16ELm16ELm16EEEEELb1ELm16ELm16ELb0EE25storeEnumTagSinglePayloadEPNS_11OpaqueValueEjjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t result, int a2, int a3)
{
  if (a3)
  {
    if (a2)
    {
      *(_DWORD *)__n128 result = a2 - 1;
      *(void *)(result + 4) = 0LL;
      *(_DWORD *)(result + 12) = 0;
      *(_BYTE *)(result + 16) = 1;
    }

    else
    {
      *(_BYTE *)(result + 16) = 0;
    }
  }

  else if (a2)
  {
    *(_DWORD *)__n128 result = a2 - 1;
    *(void *)(result + 4) = 0LL;
    *(_DWORD *)(result + 12) = 0;
  }

  return result;
}

char *_ZN5swift12metadataimpl20BufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv32_hLm16ELm32ELm32EEEEELb1ELm32ELm16ELNS0_12FixedPackingE0EE32initializeBufferWithCopyOfBufferEPNS_17TargetValueBufferINS_9InProcessEEESC_PKNS_14TargetMetadataISA_EE( unint64_t **a1, unint64_t **a2, uint64_t a3, char *a4)
{
  uint64_t v4 = *(void *)(a3 - 8);
  uint64_t v5 = *a2;
  *a1 = *a2;
  swift_retain(v5, (uint64_t)a2, a3, a4);
  return (char *)v5 + ((*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv32_hLm16ELm32ELm32EEEE18initializeWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( _OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv32_hLm16ELm32ELm32EEEE14assignWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( _OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv32_hLm16ELm32ELm32EEEE18initializeWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( _OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv32_hLm16ELm32ELm32EEEE14assignWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( _OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv32_hLm16ELm32ELm32EEEEELb1ELm32ELm16ELb0EE23getEnumTagSinglePayloadEPKNS_11OpaqueValueEjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv32_hLm16ELm32ELm32EEEEELb1ELm32ELm16ELb0EE25storeEnumTagSinglePayloadEPNS_11OpaqueValueEjjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t result, int a2, int a3)
{
  if (a3)
  {
    if (a2)
    {
      *(_DWORD *)__n128 result = a2 - 1;
      *(void *)(result + 4) = 0LL;
      *(void *)(result + 20) = 0LL;
      *(void *)(result + 12) = 0LL;
      *(_DWORD *)(result + 28) = 0;
      *(_BYTE *)(result + 32) = 1;
    }

    else
    {
      *(_BYTE *)(result + 32) = 0;
    }
  }

  else if (a2)
  {
    *(_DWORD *)__n128 result = a2 - 1;
    *(void *)(result + 4) = 0LL;
    *(void *)(result + 20) = 0LL;
    *(void *)(result + 12) = 0LL;
    *(_DWORD *)(result + 28) = 0;
  }

  return result;
}

char *_ZN5swift12metadataimpl20BufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv64_hLm16ELm64ELm64EEEEELb1ELm64ELm16ELNS0_12FixedPackingE0EE32initializeBufferWithCopyOfBufferEPNS_17TargetValueBufferINS_9InProcessEEESC_PKNS_14TargetMetadataISA_EE( unint64_t **a1, unint64_t **a2, uint64_t a3, char *a4)
{
  uint64_t v4 = *(void *)(a3 - 8);
  uint64_t v5 = *a2;
  *a1 = *a2;
  swift_retain(v5, (uint64_t)a2, a3, a4);
  return (char *)v5 + ((*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv64_hLm16ELm64ELm64EEEE18initializeWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  __n128 result = (__n128)a2[1];
  __int128 v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v3;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv64_hLm16ELm64ELm64EEEE14assignWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  __n128 result = (__n128)a2[1];
  __int128 v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v3;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv64_hLm16ELm64ELm64EEEE18initializeWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  __n128 result = (__n128)a2[1];
  __int128 v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v3;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv64_hLm16ELm64ELm64EEEE14assignWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  __n128 result = (__n128)a2[1];
  __int128 v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v3;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv64_hLm16ELm64ELm64EEEEELb1ELm64ELm16ELb0EE23getEnumTagSinglePayloadEPKNS_11OpaqueValueEjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv64_hLm16ELm64ELm64EEEEELb1ELm64ELm16ELb0EE25storeEnumTagSinglePayloadEPNS_11OpaqueValueEjjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t result, int a2, int a3)
{
  if (a3)
  {
    if (a2)
    {
      *(_DWORD *)__n128 result = a2 - 1;
      *(_OWORD *)(result + 4) = 0u;
      *(_OWORD *)(result + 20) = 0u;
      *(_OWORD *)(result + 36) = 0u;
      *(_OWORD *)(result + 48) = 0u;
      *(_BYTE *)(result + 64) = 1;
    }

    else
    {
      *(_BYTE *)(result + 64) = 0;
    }
  }

  else if (a2)
  {
    *(_DWORD *)__n128 result = a2 - 1;
    *(_OWORD *)(result + 4) = 0u;
    *(_OWORD *)(result + 20) = 0u;
    *(_OWORD *)(result + 36) = 0u;
    *(_OWORD *)(result + 48) = 0u;
  }

  return result;
}

_DWORD *_ZN5swift12metadataimpl20BufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv2_tLm4ELm4ELm4EEEEELb1ELm4ELm4ELNS0_12FixedPackingE1EE32initializeBufferWithCopyOfBufferEPNS_17TargetValueBufferINS_9InProcessEEESC_PKNS_14TargetMetadataISA_EE( _DWORD *result, _DWORD *a2)
{
  *__n128 result = *a2;
  return result;
}

_DWORD *_ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv2_tLm4ELm4ELm4EEEE18initializeWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( _DWORD *result, _DWORD *a2)
{
  *__n128 result = *a2;
  return result;
}

_DWORD *_ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv2_tLm4ELm4ELm4EEEE14assignWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( _DWORD *result, _DWORD *a2)
{
  *__n128 result = *a2;
  return result;
}

_DWORD *_ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv2_tLm4ELm4ELm4EEEE18initializeWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( _DWORD *result, _DWORD *a2)
{
  *__n128 result = *a2;
  return result;
}

_DWORD *_ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv2_tLm4ELm4ELm4EEEE14assignWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( _DWORD *result, _DWORD *a2)
{
  *__n128 result = *a2;
  return result;
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv2_tLm4ELm4ELm4EEEEELb1ELm4ELm4ELb0EE23getEnumTagSinglePayloadEPKNS_11OpaqueValueEjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 4)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv2_tLm4ELm4ELm4EEEEELb1ELm4ELm4ELb0EE25storeEnumTagSinglePayloadEPNS_11OpaqueValueEjjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t result, int a2, int a3)
{
  if (a3)
  {
    if (a2)
    {
      *(_DWORD *)__n128 result = a2 - 1;
      *(_BYTE *)(result + 4) = 1;
    }

    else
    {
      *(_BYTE *)(result + 4) = 0;
    }
  }

  else if (a2)
  {
    *(_DWORD *)__n128 result = a2 - 1;
  }

  return result;
}

double _ZN5swift12metadataimpl20BufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv3_tLm8ELm8ELm8EEEEELb1ELm8ELm8ELNS0_12FixedPackingE1EE32initializeBufferWithCopyOfBufferEPNS_17TargetValueBufferINS_9InProcessEEESC_PKNS_14TargetMetadataISA_EE( void *a1, double *a2)
{
  double result = *a2;
  *a1 = *(void *)a2;
  return result;
}

double _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv3_tLm8ELm8ELm8EEEE18initializeWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( void *a1, double *a2)
{
  double result = *a2;
  *a1 = *(void *)a2;
  return result;
}

double _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv3_tLm8ELm8ELm8EEEE14assignWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( void *a1, double *a2)
{
  double result = *a2;
  *a1 = *(void *)a2;
  return result;
}

double _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv3_tLm8ELm8ELm8EEEE18initializeWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( void *a1, double *a2)
{
  double result = *a2;
  *a1 = *(void *)a2;
  return result;
}

double _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv3_tLm8ELm8ELm8EEEE14assignWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( void *a1, double *a2)
{
  double result = *a2;
  *a1 = *(void *)a2;
  return result;
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv3_tLm8ELm8ELm8EEEEELb1ELm8ELm8ELb0EE23getEnumTagSinglePayloadEPKNS_11OpaqueValueEjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv3_tLm8ELm8ELm8EEEEELb1ELm8ELm8ELb0EE25storeEnumTagSinglePayloadEPNS_11OpaqueValueEjjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t result, int a2, int a3)
{
  if (a3)
  {
    if (a2)
    {
      *(_DWORD *)double result = a2 - 1;
      *(_DWORD *)(result + 4) = 0;
      *(_BYTE *)(result + 8) = 1;
    }

    else
    {
      *(_BYTE *)(result + 8) = 0;
    }
  }

  else if (a2)
  {
    *(void *)double result = (a2 - 1);
  }

  return result;
}

double _ZN5swift12metadataimpl20BufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv4_tLm8ELm8ELm8EEEEELb1ELm8ELm8ELNS0_12FixedPackingE1EE32initializeBufferWithCopyOfBufferEPNS_17TargetValueBufferINS_9InProcessEEESC_PKNS_14TargetMetadataISA_EE( void *a1, double *a2)
{
  double result = *a2;
  *a1 = *(void *)a2;
  return result;
}

double _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv4_tLm8ELm8ELm8EEEE18initializeWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( void *a1, double *a2)
{
  double result = *a2;
  *a1 = *(void *)a2;
  return result;
}

double _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv4_tLm8ELm8ELm8EEEE14assignWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( void *a1, double *a2)
{
  double result = *a2;
  *a1 = *(void *)a2;
  return result;
}

double _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv4_tLm8ELm8ELm8EEEE18initializeWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( void *a1, double *a2)
{
  double result = *a2;
  *a1 = *(void *)a2;
  return result;
}

double _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv4_tLm8ELm8ELm8EEEE14assignWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( void *a1, double *a2)
{
  double result = *a2;
  *a1 = *(void *)a2;
  return result;
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv4_tLm8ELm8ELm8EEEEELb1ELm8ELm8ELb0EE23getEnumTagSinglePayloadEPKNS_11OpaqueValueEjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv4_tLm8ELm8ELm8EEEEELb1ELm8ELm8ELb0EE25storeEnumTagSinglePayloadEPNS_11OpaqueValueEjjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t result, int a2, int a3)
{
  if (a3)
  {
    if (a2)
    {
      *(_DWORD *)double result = a2 - 1;
      *(_DWORD *)(result + 4) = 0;
      *(_BYTE *)(result + 8) = 1;
    }

    else
    {
      *(_BYTE *)(result + 8) = 0;
    }
  }

  else if (a2)
  {
    *(void *)double result = (a2 - 1);
  }

  return result;
}

char *_ZN5swift12metadataimpl20BufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv8_tLm16ELm16ELm16EEEEELb1ELm16ELm16ELNS0_12FixedPackingE0EE32initializeBufferWithCopyOfBufferEPNS_17TargetValueBufferINS_9InProcessEEESC_PKNS_14TargetMetadataISA_EE( unint64_t **a1, unint64_t **a2, uint64_t a3, char *a4)
{
  uint64_t v4 = *(void *)(a3 - 8);
  uint64_t v5 = *a2;
  *a1 = *a2;
  swift_retain(v5, (uint64_t)a2, a3, a4);
  return (char *)v5 + ((*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv8_tLm16ELm16ELm16EEEE18initializeWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( __n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv8_tLm16ELm16ELm16EEEE14assignWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( __n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv8_tLm16ELm16ELm16EEEE18initializeWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( __n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv8_tLm16ELm16ELm16EEEE14assignWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( __n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv8_tLm16ELm16ELm16EEEEELb1ELm16ELm16ELb0EE23getEnumTagSinglePayloadEPKNS_11OpaqueValueEjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv8_tLm16ELm16ELm16EEEEELb1ELm16ELm16ELb0EE25storeEnumTagSinglePayloadEPNS_11OpaqueValueEjjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t result, int a2, int a3)
{
  if (a3)
  {
    if (a2)
    {
      *(_DWORD *)__n128 result = a2 - 1;
      *(void *)(result + 4) = 0LL;
      *(_DWORD *)(result + 12) = 0;
      *(_BYTE *)(result + 16) = 1;
    }

    else
    {
      *(_BYTE *)(result + 16) = 0;
    }
  }

  else if (a2)
  {
    *(_DWORD *)__n128 result = a2 - 1;
    *(void *)(result + 4) = 0LL;
    *(_DWORD *)(result + 12) = 0;
  }

  return result;
}

char *_ZN5swift12metadataimpl20BufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv16_tLm16ELm32ELm32EEEEELb1ELm32ELm16ELNS0_12FixedPackingE0EE32initializeBufferWithCopyOfBufferEPNS_17TargetValueBufferINS_9InProcessEEESC_PKNS_14TargetMetadataISA_EE( unint64_t **a1, unint64_t **a2, uint64_t a3, char *a4)
{
  uint64_t v4 = *(void *)(a3 - 8);
  uint64_t v5 = *a2;
  *a1 = *a2;
  swift_retain(v5, (uint64_t)a2, a3, a4);
  return (char *)v5 + ((*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv16_tLm16ELm32ELm32EEEE18initializeWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( _OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv16_tLm16ELm32ELm32EEEE14assignWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( _OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv16_tLm16ELm32ELm32EEEE18initializeWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( _OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv16_tLm16ELm32ELm32EEEE14assignWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( _OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv16_tLm16ELm32ELm32EEEEELb1ELm32ELm16ELb0EE23getEnumTagSinglePayloadEPKNS_11OpaqueValueEjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv16_tLm16ELm32ELm32EEEEELb1ELm32ELm16ELb0EE25storeEnumTagSinglePayloadEPNS_11OpaqueValueEjjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t result, int a2, int a3)
{
  if (a3)
  {
    if (a2)
    {
      *(_DWORD *)__n128 result = a2 - 1;
      *(void *)(result + 4) = 0LL;
      *(void *)(result + 20) = 0LL;
      *(void *)(result + 12) = 0LL;
      *(_DWORD *)(result + 28) = 0;
      *(_BYTE *)(result + 32) = 1;
    }

    else
    {
      *(_BYTE *)(result + 32) = 0;
    }
  }

  else if (a2)
  {
    *(_DWORD *)__n128 result = a2 - 1;
    *(void *)(result + 4) = 0LL;
    *(void *)(result + 20) = 0LL;
    *(void *)(result + 12) = 0LL;
    *(_DWORD *)(result + 28) = 0;
  }

  return result;
}

char *_ZN5swift12metadataimpl20BufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv32_tLm16ELm64ELm64EEEEELb1ELm64ELm16ELNS0_12FixedPackingE0EE32initializeBufferWithCopyOfBufferEPNS_17TargetValueBufferINS_9InProcessEEESC_PKNS_14TargetMetadataISA_EE( unint64_t **a1, unint64_t **a2, uint64_t a3, char *a4)
{
  uint64_t v4 = *(void *)(a3 - 8);
  uint64_t v5 = *a2;
  *a1 = *a2;
  swift_retain(v5, (uint64_t)a2, a3, a4);
  return (char *)v5 + ((*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv32_tLm16ELm64ELm64EEEE18initializeWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  __n128 result = (__n128)a2[1];
  __int128 v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v3;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv32_tLm16ELm64ELm64EEEE14assignWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  __n128 result = (__n128)a2[1];
  __int128 v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v3;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv32_tLm16ELm64ELm64EEEE18initializeWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  __n128 result = (__n128)a2[1];
  __int128 v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v3;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv32_tLm16ELm64ELm64EEEE14assignWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  __n128 result = (__n128)a2[1];
  __int128 v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v3;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv32_tLm16ELm64ELm64EEEEELb1ELm64ELm16ELb0EE23getEnumTagSinglePayloadEPKNS_11OpaqueValueEjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv32_tLm16ELm64ELm64EEEEELb1ELm64ELm16ELb0EE25storeEnumTagSinglePayloadEPNS_11OpaqueValueEjjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t result, int a2, int a3)
{
  if (a3)
  {
    if (a2)
    {
      *(_DWORD *)__n128 result = a2 - 1;
      *(_OWORD *)(result + 4) = 0u;
      *(_OWORD *)(result + 20) = 0u;
      *(_OWORD *)(result + 36) = 0u;
      *(_OWORD *)(result + 48) = 0u;
      *(_BYTE *)(result + 64) = 1;
    }

    else
    {
      *(_BYTE *)(result + 64) = 0;
    }
  }

  else if (a2)
  {
    *(_DWORD *)__n128 result = a2 - 1;
    *(_OWORD *)(result + 4) = 0u;
    *(_OWORD *)(result + 20) = 0u;
    *(_OWORD *)(result + 36) = 0u;
    *(_OWORD *)(result + 48) = 0u;
  }

  return result;
}

char *_ZN5swift12metadataimpl20BufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv64_tLm16ELm128ELm128EEEEELb1ELm128ELm16ELNS0_12FixedPackingE0EE32initializeBufferWithCopyOfBufferEPNS_17TargetValueBufferINS_9InProcessEEESC_PKNS_14TargetMetadataISA_EE( unint64_t **a1, unint64_t **a2, uint64_t a3, char *a4)
{
  uint64_t v4 = *(void *)(a3 - 8);
  uint64_t v5 = *a2;
  *a1 = *a2;
  swift_retain(v5, (uint64_t)a2, a3, a4);
  return (char *)v5 + ((*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv64_tLm16ELm128ELm128EEEE18initializeWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  __n128 result = (__n128)a2[1];
  __int128 v5 = a2[2];
  __int128 v4 = a2[3];
  __int128 v7 = a2[4];
  __int128 v6 = a2[5];
  __int128 v8 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v3;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv64_tLm16ELm128ELm128EEEE14assignWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  __n128 result = (__n128)a2[1];
  __int128 v5 = a2[2];
  __int128 v4 = a2[3];
  __int128 v7 = a2[4];
  __int128 v6 = a2[5];
  __int128 v8 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v3;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv64_tLm16ELm128ELm128EEEE18initializeWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  __n128 result = (__n128)a2[1];
  __int128 v5 = a2[2];
  __int128 v4 = a2[3];
  __int128 v7 = a2[4];
  __int128 v6 = a2[5];
  __int128 v8 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v3;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv64_tLm16ELm128ELm128EEEE14assignWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  __n128 result = (__n128)a2[1];
  __int128 v5 = a2[2];
  __int128 v4 = a2[3];
  __int128 v7 = a2[4];
  __int128 v6 = a2[5];
  __int128 v8 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v3;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv64_tLm16ELm128ELm128EEEEELb1ELm128ELm16ELb0EE23getEnumTagSinglePayloadEPKNS_11OpaqueValueEjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 128)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv64_tLm16ELm128ELm128EEEEELb1ELm128ELm16ELb0EE25storeEnumTagSinglePayloadEPNS_11OpaqueValueEjjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t result, int a2, int a3)
{
  if (a3)
  {
    if (a2)
    {
      *(_DWORD *)__n128 result = a2 - 1;
      *(_OWORD *)(result + 4) = 0u;
      *(_OWORD *)(result + 20) = 0u;
      *(_OWORD *)(result + 36) = 0u;
      *(_OWORD *)(result + 52) = 0u;
      *(_OWORD *)(result + 68) = 0u;
      *(_OWORD *)(result + 84) = 0u;
      *(_OWORD *)(result + 100) = 0u;
      *(_OWORD *)(result + 112) = 0u;
      *(_BYTE *)(result + 128) = 1;
    }

    else
    {
      *(_BYTE *)(result + 128) = 0;
    }
  }

  else if (a2)
  {
    *(_DWORD *)__n128 result = a2 - 1;
    *(_OWORD *)(result + 4) = 0u;
    *(_OWORD *)(result + 20) = 0u;
    *(_OWORD *)(result + 36) = 0u;
    *(_OWORD *)(result + 52) = 0u;
    *(_OWORD *)(result + 68) = 0u;
    *(_OWORD *)(result + 84) = 0u;
    *(_OWORD *)(result + 100) = 0u;
    *(_OWORD *)(result + 112) = 0u;
  }

  return result;
}

double _ZN5swift12metadataimpl20BufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv2_jLm8ELm8ELm8EEEEELb1ELm8ELm8ELNS0_12FixedPackingE1EE32initializeBufferWithCopyOfBufferEPNS_17TargetValueBufferINS_9InProcessEEESC_PKNS_14TargetMetadataISA_EE( void *a1, double *a2)
{
  double result = *a2;
  *a1 = *(void *)a2;
  return result;
}

double _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv2_jLm8ELm8ELm8EEEE18initializeWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( void *a1, double *a2)
{
  double result = *a2;
  *a1 = *(void *)a2;
  return result;
}

double _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv2_jLm8ELm8ELm8EEEE14assignWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( void *a1, double *a2)
{
  double result = *a2;
  *a1 = *(void *)a2;
  return result;
}

double _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv2_jLm8ELm8ELm8EEEE18initializeWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( void *a1, double *a2)
{
  double result = *a2;
  *a1 = *(void *)a2;
  return result;
}

double _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv2_jLm8ELm8ELm8EEEE14assignWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( void *a1, double *a2)
{
  double result = *a2;
  *a1 = *(void *)a2;
  return result;
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv2_jLm8ELm8ELm8EEEEELb1ELm8ELm8ELb0EE23getEnumTagSinglePayloadEPKNS_11OpaqueValueEjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv2_jLm8ELm8ELm8EEEEELb1ELm8ELm8ELb0EE25storeEnumTagSinglePayloadEPNS_11OpaqueValueEjjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t result, int a2, int a3)
{
  if (a3)
  {
    if (a2)
    {
      *(_DWORD *)double result = a2 - 1;
      *(_DWORD *)(result + 4) = 0;
      *(_BYTE *)(result + 8) = 1;
    }

    else
    {
      *(_BYTE *)(result + 8) = 0;
    }
  }

  else if (a2)
  {
    *(void *)double result = (a2 - 1);
  }

  return result;
}

char *_ZN5swift12metadataimpl20BufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv3_jLm16ELm16ELm16EEEEELb1ELm16ELm16ELNS0_12FixedPackingE0EE32initializeBufferWithCopyOfBufferEPNS_17TargetValueBufferINS_9InProcessEEESC_PKNS_14TargetMetadataISA_EE( unint64_t **a1, unint64_t **a2, uint64_t a3, char *a4)
{
  uint64_t v4 = *(void *)(a3 - 8);
  __int128 v5 = *a2;
  *a1 = *a2;
  swift_retain(v5, (uint64_t)a2, a3, a4);
  return (char *)v5 + ((*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv3_jLm16ELm16ELm16EEEE18initializeWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( __n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv3_jLm16ELm16ELm16EEEE14assignWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( __n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv3_jLm16ELm16ELm16EEEE18initializeWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( __n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv3_jLm16ELm16ELm16EEEE14assignWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( __n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv3_jLm16ELm16ELm16EEEEELb1ELm16ELm16ELb0EE23getEnumTagSinglePayloadEPKNS_11OpaqueValueEjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv3_jLm16ELm16ELm16EEEEELb1ELm16ELm16ELb0EE25storeEnumTagSinglePayloadEPNS_11OpaqueValueEjjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t result, int a2, int a3)
{
  if (a3)
  {
    if (a2)
    {
      *(_DWORD *)__n128 result = a2 - 1;
      *(void *)(result + 4) = 0LL;
      *(_DWORD *)(result + 12) = 0;
      *(_BYTE *)(result + 16) = 1;
    }

    else
    {
      *(_BYTE *)(result + 16) = 0;
    }
  }

  else if (a2)
  {
    *(_DWORD *)__n128 result = a2 - 1;
    *(void *)(result + 4) = 0LL;
    *(_DWORD *)(result + 12) = 0;
  }

  return result;
}

char *_ZN5swift12metadataimpl20BufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv4_jLm16ELm16ELm16EEEEELb1ELm16ELm16ELNS0_12FixedPackingE0EE32initializeBufferWithCopyOfBufferEPNS_17TargetValueBufferINS_9InProcessEEESC_PKNS_14TargetMetadataISA_EE( unint64_t **a1, unint64_t **a2, uint64_t a3, char *a4)
{
  uint64_t v4 = *(void *)(a3 - 8);
  __int128 v5 = *a2;
  *a1 = *a2;
  swift_retain(v5, (uint64_t)a2, a3, a4);
  return (char *)v5 + ((*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv4_jLm16ELm16ELm16EEEE18initializeWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( __n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv4_jLm16ELm16ELm16EEEE14assignWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( __n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv4_jLm16ELm16ELm16EEEE18initializeWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( __n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv4_jLm16ELm16ELm16EEEE14assignWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( __n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv4_jLm16ELm16ELm16EEEEELb1ELm16ELm16ELb0EE23getEnumTagSinglePayloadEPKNS_11OpaqueValueEjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv4_jLm16ELm16ELm16EEEEELb1ELm16ELm16ELb0EE25storeEnumTagSinglePayloadEPNS_11OpaqueValueEjjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t result, int a2, int a3)
{
  if (a3)
  {
    if (a2)
    {
      *(_DWORD *)__n128 result = a2 - 1;
      *(void *)(result + 4) = 0LL;
      *(_DWORD *)(result + 12) = 0;
      *(_BYTE *)(result + 16) = 1;
    }

    else
    {
      *(_BYTE *)(result + 16) = 0;
    }
  }

  else if (a2)
  {
    *(_DWORD *)__n128 result = a2 - 1;
    *(void *)(result + 4) = 0LL;
    *(_DWORD *)(result + 12) = 0;
  }

  return result;
}

char *_ZN5swift12metadataimpl20BufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv8_jLm16ELm32ELm32EEEEELb1ELm32ELm16ELNS0_12FixedPackingE0EE32initializeBufferWithCopyOfBufferEPNS_17TargetValueBufferINS_9InProcessEEESC_PKNS_14TargetMetadataISA_EE( unint64_t **a1, unint64_t **a2, uint64_t a3, char *a4)
{
  uint64_t v4 = *(void *)(a3 - 8);
  __int128 v5 = *a2;
  *a1 = *a2;
  swift_retain(v5, (uint64_t)a2, a3, a4);
  return (char *)v5 + ((*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv8_jLm16ELm32ELm32EEEE18initializeWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( _OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv8_jLm16ELm32ELm32EEEE14assignWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( _OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv8_jLm16ELm32ELm32EEEE18initializeWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( _OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv8_jLm16ELm32ELm32EEEE14assignWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( _OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv8_jLm16ELm32ELm32EEEEELb1ELm32ELm16ELb0EE23getEnumTagSinglePayloadEPKNS_11OpaqueValueEjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv8_jLm16ELm32ELm32EEEEELb1ELm32ELm16ELb0EE25storeEnumTagSinglePayloadEPNS_11OpaqueValueEjjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t result, int a2, int a3)
{
  if (a3)
  {
    if (a2)
    {
      *(_DWORD *)__n128 result = a2 - 1;
      *(void *)(result + 4) = 0LL;
      *(void *)(result + 20) = 0LL;
      *(void *)(result + 12) = 0LL;
      *(_DWORD *)(result + 28) = 0;
      *(_BYTE *)(result + 32) = 1;
    }

    else
    {
      *(_BYTE *)(result + 32) = 0;
    }
  }

  else if (a2)
  {
    *(_DWORD *)__n128 result = a2 - 1;
    *(void *)(result + 4) = 0LL;
    *(void *)(result + 20) = 0LL;
    *(void *)(result + 12) = 0LL;
    *(_DWORD *)(result + 28) = 0;
  }

  return result;
}

char *_ZN5swift12metadataimpl20BufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv16_jLm16ELm64ELm64EEEEELb1ELm64ELm16ELNS0_12FixedPackingE0EE32initializeBufferWithCopyOfBufferEPNS_17TargetValueBufferINS_9InProcessEEESC_PKNS_14TargetMetadataISA_EE( unint64_t **a1, unint64_t **a2, uint64_t a3, char *a4)
{
  uint64_t v4 = *(void *)(a3 - 8);
  __int128 v5 = *a2;
  *a1 = *a2;
  swift_retain(v5, (uint64_t)a2, a3, a4);
  return (char *)v5 + ((*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv16_jLm16ELm64ELm64EEEE18initializeWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  __n128 result = (__n128)a2[1];
  __int128 v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v3;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv16_jLm16ELm64ELm64EEEE14assignWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  __n128 result = (__n128)a2[1];
  __int128 v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v3;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv16_jLm16ELm64ELm64EEEE18initializeWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  __n128 result = (__n128)a2[1];
  __int128 v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v3;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv16_jLm16ELm64ELm64EEEE14assignWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  __n128 result = (__n128)a2[1];
  __int128 v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v3;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv16_jLm16ELm64ELm64EEEEELb1ELm64ELm16ELb0EE23getEnumTagSinglePayloadEPKNS_11OpaqueValueEjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv16_jLm16ELm64ELm64EEEEELb1ELm64ELm16ELb0EE25storeEnumTagSinglePayloadEPNS_11OpaqueValueEjjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t result, int a2, int a3)
{
  if (a3)
  {
    if (a2)
    {
      *(_DWORD *)__n128 result = a2 - 1;
      *(_OWORD *)(result + 4) = 0u;
      *(_OWORD *)(result + 20) = 0u;
      *(_OWORD *)(result + 36) = 0u;
      *(_OWORD *)(result + 48) = 0u;
      *(_BYTE *)(result + 64) = 1;
    }

    else
    {
      *(_BYTE *)(result + 64) = 0;
    }
  }

  else if (a2)
  {
    *(_DWORD *)__n128 result = a2 - 1;
    *(_OWORD *)(result + 4) = 0u;
    *(_OWORD *)(result + 20) = 0u;
    *(_OWORD *)(result + 36) = 0u;
    *(_OWORD *)(result + 48) = 0u;
  }

  return result;
}

char *_ZN5swift12metadataimpl20BufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv32_jLm16ELm128ELm128EEEEELb1ELm128ELm16ELNS0_12FixedPackingE0EE32initializeBufferWithCopyOfBufferEPNS_17TargetValueBufferINS_9InProcessEEESC_PKNS_14TargetMetadataISA_EE( unint64_t **a1, unint64_t **a2, uint64_t a3, char *a4)
{
  uint64_t v4 = *(void *)(a3 - 8);
  __int128 v5 = *a2;
  *a1 = *a2;
  swift_retain(v5, (uint64_t)a2, a3, a4);
  return (char *)v5 + ((*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv32_jLm16ELm128ELm128EEEE18initializeWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  __n128 result = (__n128)a2[1];
  __int128 v5 = a2[2];
  __int128 v4 = a2[3];
  __int128 v7 = a2[4];
  __int128 v6 = a2[5];
  __int128 v8 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v3;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv32_jLm16ELm128ELm128EEEE14assignWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  __n128 result = (__n128)a2[1];
  __int128 v5 = a2[2];
  __int128 v4 = a2[3];
  __int128 v7 = a2[4];
  __int128 v6 = a2[5];
  __int128 v8 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v3;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv32_jLm16ELm128ELm128EEEE18initializeWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  __n128 result = (__n128)a2[1];
  __int128 v5 = a2[2];
  __int128 v4 = a2[3];
  __int128 v7 = a2[4];
  __int128 v6 = a2[5];
  __int128 v8 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v3;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv32_jLm16ELm128ELm128EEEE14assignWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  __n128 result = (__n128)a2[1];
  __int128 v5 = a2[2];
  __int128 v4 = a2[3];
  __int128 v7 = a2[4];
  __int128 v6 = a2[5];
  __int128 v8 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v3;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv32_jLm16ELm128ELm128EEEEELb1ELm128ELm16ELb0EE23getEnumTagSinglePayloadEPKNS_11OpaqueValueEjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 128)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv32_jLm16ELm128ELm128EEEEELb1ELm128ELm16ELb0EE25storeEnumTagSinglePayloadEPNS_11OpaqueValueEjjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t result, int a2, int a3)
{
  if (a3)
  {
    if (a2)
    {
      *(_DWORD *)__n128 result = a2 - 1;
      *(_OWORD *)(result + 4) = 0u;
      *(_OWORD *)(result + 20) = 0u;
      *(_OWORD *)(result + 36) = 0u;
      *(_OWORD *)(result + 52) = 0u;
      *(_OWORD *)(result + 68) = 0u;
      *(_OWORD *)(result + 84) = 0u;
      *(_OWORD *)(result + 100) = 0u;
      *(_OWORD *)(result + 112) = 0u;
      *(_BYTE *)(result + 128) = 1;
    }

    else
    {
      *(_BYTE *)(result + 128) = 0;
    }
  }

  else if (a2)
  {
    *(_DWORD *)__n128 result = a2 - 1;
    *(_OWORD *)(result + 4) = 0u;
    *(_OWORD *)(result + 20) = 0u;
    *(_OWORD *)(result + 36) = 0u;
    *(_OWORD *)(result + 52) = 0u;
    *(_OWORD *)(result + 68) = 0u;
    *(_OWORD *)(result + 84) = 0u;
    *(_OWORD *)(result + 100) = 0u;
    *(_OWORD *)(result + 112) = 0u;
  }

  return result;
}

char *_ZN5swift12metadataimpl20BufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv64_jLm16ELm256ELm256EEEEELb1ELm256ELm16ELNS0_12FixedPackingE0EE32initializeBufferWithCopyOfBufferEPNS_17TargetValueBufferINS_9InProcessEEESC_PKNS_14TargetMetadataISA_EE( unint64_t **a1, unint64_t **a2, uint64_t a3, char *a4)
{
  uint64_t v4 = *(void *)(a3 - 8);
  __int128 v5 = *a2;
  *a1 = *a2;
  swift_retain(v5, (uint64_t)a2, a3, a4);
  return (char *)v5 + ((*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv64_jLm16ELm256ELm256EEEE18initializeWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  __n128 result = (__n128)a2[1];
  __int128 v5 = a2[2];
  __int128 v4 = a2[3];
  __int128 v7 = a2[4];
  __int128 v6 = a2[5];
  __int128 v9 = a2[6];
  __int128 v8 = a2[7];
  __int128 v11 = a2[8];
  __int128 v10 = a2[9];
  __int128 v13 = a2[10];
  __int128 v12 = a2[11];
  __int128 v15 = a2[12];
  __int128 v14 = a2[13];
  __int128 v16 = a2[15];
  *(_OWORD *)(a1 + 224) = a2[14];
  *(_OWORD *)(a1 + 240) = v16;
  *(_OWORD *)(a1 + 192) = v15;
  *(_OWORD *)(a1 + 208) = v14;
  *(_OWORD *)(a1 + 160) = v13;
  *(_OWORD *)(a1 + 176) = v12;
  *(_OWORD *)(a1 + 128) = v11;
  *(_OWORD *)(a1 + 144) = v10;
  *(_OWORD *)(a1 + 96) = v9;
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v3;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv64_jLm16ELm256ELm256EEEE14assignWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  __n128 result = (__n128)a2[1];
  __int128 v5 = a2[2];
  __int128 v4 = a2[3];
  __int128 v7 = a2[4];
  __int128 v6 = a2[5];
  __int128 v9 = a2[6];
  __int128 v8 = a2[7];
  __int128 v11 = a2[8];
  __int128 v10 = a2[9];
  __int128 v13 = a2[10];
  __int128 v12 = a2[11];
  __int128 v15 = a2[12];
  __int128 v14 = a2[13];
  __int128 v16 = a2[15];
  *(_OWORD *)(a1 + 224) = a2[14];
  *(_OWORD *)(a1 + 240) = v16;
  *(_OWORD *)(a1 + 192) = v15;
  *(_OWORD *)(a1 + 208) = v14;
  *(_OWORD *)(a1 + 160) = v13;
  *(_OWORD *)(a1 + 176) = v12;
  *(_OWORD *)(a1 + 128) = v11;
  *(_OWORD *)(a1 + 144) = v10;
  *(_OWORD *)(a1 + 96) = v9;
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v3;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv64_jLm16ELm256ELm256EEEE18initializeWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  __n128 result = (__n128)a2[1];
  __int128 v5 = a2[2];
  __int128 v4 = a2[3];
  __int128 v7 = a2[4];
  __int128 v6 = a2[5];
  __int128 v9 = a2[6];
  __int128 v8 = a2[7];
  __int128 v11 = a2[8];
  __int128 v10 = a2[9];
  __int128 v13 = a2[10];
  __int128 v12 = a2[11];
  __int128 v15 = a2[12];
  __int128 v14 = a2[13];
  __int128 v16 = a2[15];
  *(_OWORD *)(a1 + 224) = a2[14];
  *(_OWORD *)(a1 + 240) = v16;
  *(_OWORD *)(a1 + 192) = v15;
  *(_OWORD *)(a1 + 208) = v14;
  *(_OWORD *)(a1 + 160) = v13;
  *(_OWORD *)(a1 + 176) = v12;
  *(_OWORD *)(a1 + 128) = v11;
  *(_OWORD *)(a1 + 144) = v10;
  *(_OWORD *)(a1 + 96) = v9;
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v3;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv64_jLm16ELm256ELm256EEEE14assignWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  __n128 result = (__n128)a2[1];
  __int128 v5 = a2[2];
  __int128 v4 = a2[3];
  __int128 v7 = a2[4];
  __int128 v6 = a2[5];
  __int128 v9 = a2[6];
  __int128 v8 = a2[7];
  __int128 v11 = a2[8];
  __int128 v10 = a2[9];
  __int128 v13 = a2[10];
  __int128 v12 = a2[11];
  __int128 v15 = a2[12];
  __int128 v14 = a2[13];
  __int128 v16 = a2[15];
  *(_OWORD *)(a1 + 224) = a2[14];
  *(_OWORD *)(a1 + 240) = v16;
  *(_OWORD *)(a1 + 192) = v15;
  *(_OWORD *)(a1 + 208) = v14;
  *(_OWORD *)(a1 + 160) = v13;
  *(_OWORD *)(a1 + 176) = v12;
  *(_OWORD *)(a1 + 128) = v11;
  *(_OWORD *)(a1 + 144) = v10;
  *(_OWORD *)(a1 + 96) = v9;
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v3;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv64_jLm16ELm256ELm256EEEEELb1ELm256ELm16ELb0EE23getEnumTagSinglePayloadEPKNS_11OpaqueValueEjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 256)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv64_jLm16ELm256ELm256EEEEELb1ELm256ELm16ELb0EE25storeEnumTagSinglePayloadEPNS_11OpaqueValueEjjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t result, int a2, int a3)
{
  if (a3)
  {
    if (a2)
    {
      *(_DWORD *)__n128 result = a2 - 1;
      *(_OWORD *)(result + 4) = 0u;
      *(_OWORD *)(result + 20) = 0u;
      *(_OWORD *)(result + 36) = 0u;
      *(_OWORD *)(result + 52) = 0u;
      *(_OWORD *)(result + 68) = 0u;
      *(_OWORD *)(result + 84) = 0u;
      *(_OWORD *)(result + 100) = 0u;
      *(_OWORD *)(result + 116) = 0u;
      *(_OWORD *)(result + 132) = 0u;
      *(_OWORD *)(result + 148) = 0u;
      *(_OWORD *)(result + 164) = 0u;
      *(_OWORD *)(result + 180) = 0u;
      *(_OWORD *)(result + 196) = 0u;
      *(_OWORD *)(result + 212) = 0u;
      *(_OWORD *)(result + 228) = 0u;
      *(_OWORD *)(result + 240) = 0u;
      *(_BYTE *)(result + 256) = 1;
    }

    else
    {
      *(_BYTE *)(result + 256) = 0;
    }
  }

  else if (a2)
  {
    *(_DWORD *)__n128 result = a2 - 1;
    *(_OWORD *)(result + 4) = 0u;
    *(_OWORD *)(result + 20) = 0u;
    *(_OWORD *)(result + 36) = 0u;
    *(_OWORD *)(result + 52) = 0u;
    *(_OWORD *)(result + 68) = 0u;
    *(_OWORD *)(result + 84) = 0u;
    *(_OWORD *)(result + 100) = 0u;
    *(_OWORD *)(result + 116) = 0u;
    *(_OWORD *)(result + 132) = 0u;
    *(_OWORD *)(result + 148) = 0u;
    *(_OWORD *)(result + 164) = 0u;
    *(_OWORD *)(result + 180) = 0u;
    *(_OWORD *)(result + 196) = 0u;
    *(_OWORD *)(result + 212) = 0u;
    *(_OWORD *)(result + 228) = 0u;
    *(_OWORD *)(result + 240) = 0u;
  }

  return result;
}

char *_ZN5swift12metadataimpl20BufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv2_yLm16ELm16ELm16EEEEELb1ELm16ELm16ELNS0_12FixedPackingE0EE32initializeBufferWithCopyOfBufferEPNS_17TargetValueBufferINS_9InProcessEEESC_PKNS_14TargetMetadataISA_EE( unint64_t **a1, unint64_t **a2, uint64_t a3, char *a4)
{
  uint64_t v4 = *(void *)(a3 - 8);
  __int128 v5 = *a2;
  *a1 = *a2;
  swift_retain(v5, (uint64_t)a2, a3, a4);
  return (char *)v5 + ((*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv2_yLm16ELm16ELm16EEEE18initializeWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( __n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv2_yLm16ELm16ELm16EEEE14assignWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( __n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv2_yLm16ELm16ELm16EEEE18initializeWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( __n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv2_yLm16ELm16ELm16EEEE14assignWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( __n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv2_yLm16ELm16ELm16EEEEELb1ELm16ELm16ELb0EE23getEnumTagSinglePayloadEPKNS_11OpaqueValueEjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv2_yLm16ELm16ELm16EEEEELb1ELm16ELm16ELb0EE25storeEnumTagSinglePayloadEPNS_11OpaqueValueEjjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t result, int a2, int a3)
{
  if (a3)
  {
    if (a2)
    {
      *(_DWORD *)__n128 result = a2 - 1;
      *(void *)(result + 4) = 0LL;
      *(_DWORD *)(result + 12) = 0;
      *(_BYTE *)(result + 16) = 1;
    }

    else
    {
      *(_BYTE *)(result + 16) = 0;
    }
  }

  else if (a2)
  {
    *(_DWORD *)__n128 result = a2 - 1;
    *(void *)(result + 4) = 0LL;
    *(_DWORD *)(result + 12) = 0;
  }

  return result;
}

char *_ZN5swift12metadataimpl20BufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv3_yLm16ELm32ELm32EEEEELb1ELm32ELm16ELNS0_12FixedPackingE0EE32initializeBufferWithCopyOfBufferEPNS_17TargetValueBufferINS_9InProcessEEESC_PKNS_14TargetMetadataISA_EE( unint64_t **a1, unint64_t **a2, uint64_t a3, char *a4)
{
  uint64_t v4 = *(void *)(a3 - 8);
  __int128 v5 = *a2;
  *a1 = *a2;
  swift_retain(v5, (uint64_t)a2, a3, a4);
  return (char *)v5 + ((*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv3_yLm16ELm32ELm32EEEE18initializeWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( _OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv3_yLm16ELm32ELm32EEEE14assignWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( _OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv3_yLm16ELm32ELm32EEEE18initializeWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( _OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv3_yLm16ELm32ELm32EEEE14assignWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( _OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv3_yLm16ELm32ELm32EEEEELb1ELm32ELm16ELb0EE23getEnumTagSinglePayloadEPKNS_11OpaqueValueEjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv3_yLm16ELm32ELm32EEEEELb1ELm32ELm16ELb0EE25storeEnumTagSinglePayloadEPNS_11OpaqueValueEjjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t result, int a2, int a3)
{
  if (a3)
  {
    if (a2)
    {
      *(_DWORD *)__n128 result = a2 - 1;
      *(void *)(result + 4) = 0LL;
      *(void *)(result + 20) = 0LL;
      *(void *)(result + 12) = 0LL;
      *(_DWORD *)(result + 28) = 0;
      *(_BYTE *)(result + 32) = 1;
    }

    else
    {
      *(_BYTE *)(result + 32) = 0;
    }
  }

  else if (a2)
  {
    *(_DWORD *)__n128 result = a2 - 1;
    *(void *)(result + 4) = 0LL;
    *(void *)(result + 20) = 0LL;
    *(void *)(result + 12) = 0LL;
    *(_DWORD *)(result + 28) = 0;
  }

  return result;
}

char *_ZN5swift12metadataimpl20BufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv4_yLm16ELm32ELm32EEEEELb1ELm32ELm16ELNS0_12FixedPackingE0EE32initializeBufferWithCopyOfBufferEPNS_17TargetValueBufferINS_9InProcessEEESC_PKNS_14TargetMetadataISA_EE( unint64_t **a1, unint64_t **a2, uint64_t a3, char *a4)
{
  uint64_t v4 = *(void *)(a3 - 8);
  __int128 v5 = *a2;
  *a1 = *a2;
  swift_retain(v5, (uint64_t)a2, a3, a4);
  return (char *)v5 + ((*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv4_yLm16ELm32ELm32EEEE18initializeWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( _OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv4_yLm16ELm32ELm32EEEE14assignWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( _OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv4_yLm16ELm32ELm32EEEE18initializeWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( _OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv4_yLm16ELm32ELm32EEEE14assignWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( _OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv4_yLm16ELm32ELm32EEEEELb1ELm32ELm16ELb0EE23getEnumTagSinglePayloadEPKNS_11OpaqueValueEjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv4_yLm16ELm32ELm32EEEEELb1ELm32ELm16ELb0EE25storeEnumTagSinglePayloadEPNS_11OpaqueValueEjjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t result, int a2, int a3)
{
  if (a3)
  {
    if (a2)
    {
      *(_DWORD *)__n128 result = a2 - 1;
      *(void *)(result + 4) = 0LL;
      *(void *)(result + 20) = 0LL;
      *(void *)(result + 12) = 0LL;
      *(_DWORD *)(result + 28) = 0;
      *(_BYTE *)(result + 32) = 1;
    }

    else
    {
      *(_BYTE *)(result + 32) = 0;
    }
  }

  else if (a2)
  {
    *(_DWORD *)__n128 result = a2 - 1;
    *(void *)(result + 4) = 0LL;
    *(void *)(result + 20) = 0LL;
    *(void *)(result + 12) = 0LL;
    *(_DWORD *)(result + 28) = 0;
  }

  return result;
}

char *_ZN5swift12metadataimpl20BufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv8_yLm16ELm64ELm64EEEEELb1ELm64ELm16ELNS0_12FixedPackingE0EE32initializeBufferWithCopyOfBufferEPNS_17TargetValueBufferINS_9InProcessEEESC_PKNS_14TargetMetadataISA_EE( unint64_t **a1, unint64_t **a2, uint64_t a3, char *a4)
{
  uint64_t v4 = *(void *)(a3 - 8);
  __int128 v5 = *a2;
  *a1 = *a2;
  swift_retain(v5, (uint64_t)a2, a3, a4);
  return (char *)v5 + ((*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv8_yLm16ELm64ELm64EEEE18initializeWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  __n128 result = (__n128)a2[1];
  __int128 v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v3;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv8_yLm16ELm64ELm64EEEE14assignWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  __n128 result = (__n128)a2[1];
  __int128 v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v3;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv8_yLm16ELm64ELm64EEEE18initializeWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  __n128 result = (__n128)a2[1];
  __int128 v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v3;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv8_yLm16ELm64ELm64EEEE14assignWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  __n128 result = (__n128)a2[1];
  __int128 v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v3;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv8_yLm16ELm64ELm64EEEEELb1ELm64ELm16ELb0EE23getEnumTagSinglePayloadEPKNS_11OpaqueValueEjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv8_yLm16ELm64ELm64EEEEELb1ELm64ELm16ELb0EE25storeEnumTagSinglePayloadEPNS_11OpaqueValueEjjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t result, int a2, int a3)
{
  if (a3)
  {
    if (a2)
    {
      *(_DWORD *)__n128 result = a2 - 1;
      *(_OWORD *)(result + 4) = 0u;
      *(_OWORD *)(result + 20) = 0u;
      *(_OWORD *)(result + 36) = 0u;
      *(_OWORD *)(result + 48) = 0u;
      *(_BYTE *)(result + 64) = 1;
    }

    else
    {
      *(_BYTE *)(result + 64) = 0;
    }
  }

  else if (a2)
  {
    *(_DWORD *)__n128 result = a2 - 1;
    *(_OWORD *)(result + 4) = 0u;
    *(_OWORD *)(result + 20) = 0u;
    *(_OWORD *)(result + 36) = 0u;
    *(_OWORD *)(result + 48) = 0u;
  }

  return result;
}

char *_ZN5swift12metadataimpl20BufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv16_yLm16ELm128ELm128EEEEELb1ELm128ELm16ELNS0_12FixedPackingE0EE32initializeBufferWithCopyOfBufferEPNS_17TargetValueBufferINS_9InProcessEEESC_PKNS_14TargetMetadataISA_EE( unint64_t **a1, unint64_t **a2, uint64_t a3, char *a4)
{
  uint64_t v4 = *(void *)(a3 - 8);
  __int128 v5 = *a2;
  *a1 = *a2;
  swift_retain(v5, (uint64_t)a2, a3, a4);
  return (char *)v5 + ((*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv16_yLm16ELm128ELm128EEEE18initializeWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  __n128 result = (__n128)a2[1];
  __int128 v5 = a2[2];
  __int128 v4 = a2[3];
  __int128 v7 = a2[4];
  __int128 v6 = a2[5];
  __int128 v8 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v3;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv16_yLm16ELm128ELm128EEEE14assignWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  __n128 result = (__n128)a2[1];
  __int128 v5 = a2[2];
  __int128 v4 = a2[3];
  __int128 v7 = a2[4];
  __int128 v6 = a2[5];
  __int128 v8 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v3;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv16_yLm16ELm128ELm128EEEE18initializeWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  __n128 result = (__n128)a2[1];
  __int128 v5 = a2[2];
  __int128 v4 = a2[3];
  __int128 v7 = a2[4];
  __int128 v6 = a2[5];
  __int128 v8 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v3;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv16_yLm16ELm128ELm128EEEE14assignWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  __n128 result = (__n128)a2[1];
  __int128 v5 = a2[2];
  __int128 v4 = a2[3];
  __int128 v7 = a2[4];
  __int128 v6 = a2[5];
  __int128 v8 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v3;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv16_yLm16ELm128ELm128EEEEELb1ELm128ELm16ELb0EE23getEnumTagSinglePayloadEPKNS_11OpaqueValueEjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 128)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv16_yLm16ELm128ELm128EEEEELb1ELm128ELm16ELb0EE25storeEnumTagSinglePayloadEPNS_11OpaqueValueEjjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t result, int a2, int a3)
{
  if (a3)
  {
    if (a2)
    {
      *(_DWORD *)__n128 result = a2 - 1;
      *(_OWORD *)(result + 4) = 0u;
      *(_OWORD *)(result + 20) = 0u;
      *(_OWORD *)(result + 36) = 0u;
      *(_OWORD *)(result + 52) = 0u;
      *(_OWORD *)(result + 68) = 0u;
      *(_OWORD *)(result + 84) = 0u;
      *(_OWORD *)(result + 100) = 0u;
      *(_OWORD *)(result + 112) = 0u;
      *(_BYTE *)(result + 128) = 1;
    }

    else
    {
      *(_BYTE *)(result + 128) = 0;
    }
  }

  else if (a2)
  {
    *(_DWORD *)__n128 result = a2 - 1;
    *(_OWORD *)(result + 4) = 0u;
    *(_OWORD *)(result + 20) = 0u;
    *(_OWORD *)(result + 36) = 0u;
    *(_OWORD *)(result + 52) = 0u;
    *(_OWORD *)(result + 68) = 0u;
    *(_OWORD *)(result + 84) = 0u;
    *(_OWORD *)(result + 100) = 0u;
    *(_OWORD *)(result + 112) = 0u;
  }

  return result;
}

char *_ZN5swift12metadataimpl20BufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv32_yLm16ELm256ELm256EEEEELb1ELm256ELm16ELNS0_12FixedPackingE0EE32initializeBufferWithCopyOfBufferEPNS_17TargetValueBufferINS_9InProcessEEESC_PKNS_14TargetMetadataISA_EE( unint64_t **a1, unint64_t **a2, uint64_t a3, char *a4)
{
  uint64_t v4 = *(void *)(a3 - 8);
  __int128 v5 = *a2;
  *a1 = *a2;
  swift_retain(v5, (uint64_t)a2, a3, a4);
  return (char *)v5 + ((*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv32_yLm16ELm256ELm256EEEE18initializeWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  __n128 result = (__n128)a2[1];
  __int128 v5 = a2[2];
  __int128 v4 = a2[3];
  __int128 v7 = a2[4];
  __int128 v6 = a2[5];
  __int128 v9 = a2[6];
  __int128 v8 = a2[7];
  __int128 v11 = a2[8];
  __int128 v10 = a2[9];
  __int128 v13 = a2[10];
  __int128 v12 = a2[11];
  __int128 v15 = a2[12];
  __int128 v14 = a2[13];
  __int128 v16 = a2[15];
  *(_OWORD *)(a1 + 224) = a2[14];
  *(_OWORD *)(a1 + 240) = v16;
  *(_OWORD *)(a1 + 192) = v15;
  *(_OWORD *)(a1 + 208) = v14;
  *(_OWORD *)(a1 + 160) = v13;
  *(_OWORD *)(a1 + 176) = v12;
  *(_OWORD *)(a1 + 128) = v11;
  *(_OWORD *)(a1 + 144) = v10;
  *(_OWORD *)(a1 + 96) = v9;
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v3;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv32_yLm16ELm256ELm256EEEE14assignWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  __n128 result = (__n128)a2[1];
  __int128 v5 = a2[2];
  __int128 v4 = a2[3];
  __int128 v7 = a2[4];
  __int128 v6 = a2[5];
  __int128 v9 = a2[6];
  __int128 v8 = a2[7];
  __int128 v11 = a2[8];
  __int128 v10 = a2[9];
  __int128 v13 = a2[10];
  __int128 v12 = a2[11];
  __int128 v15 = a2[12];
  __int128 v14 = a2[13];
  __int128 v16 = a2[15];
  *(_OWORD *)(a1 + 224) = a2[14];
  *(_OWORD *)(a1 + 240) = v16;
  *(_OWORD *)(a1 + 192) = v15;
  *(_OWORD *)(a1 + 208) = v14;
  *(_OWORD *)(a1 + 160) = v13;
  *(_OWORD *)(a1 + 176) = v12;
  *(_OWORD *)(a1 + 128) = v11;
  *(_OWORD *)(a1 + 144) = v10;
  *(_OWORD *)(a1 + 96) = v9;
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v3;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv32_yLm16ELm256ELm256EEEE18initializeWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  __n128 result = (__n128)a2[1];
  __int128 v5 = a2[2];
  __int128 v4 = a2[3];
  __int128 v7 = a2[4];
  __int128 v6 = a2[5];
  __int128 v9 = a2[6];
  __int128 v8 = a2[7];
  __int128 v11 = a2[8];
  __int128 v10 = a2[9];
  __int128 v13 = a2[10];
  __int128 v12 = a2[11];
  __int128 v15 = a2[12];
  __int128 v14 = a2[13];
  __int128 v16 = a2[15];
  *(_OWORD *)(a1 + 224) = a2[14];
  *(_OWORD *)(a1 + 240) = v16;
  *(_OWORD *)(a1 + 192) = v15;
  *(_OWORD *)(a1 + 208) = v14;
  *(_OWORD *)(a1 + 160) = v13;
  *(_OWORD *)(a1 + 176) = v12;
  *(_OWORD *)(a1 + 128) = v11;
  *(_OWORD *)(a1 + 144) = v10;
  *(_OWORD *)(a1 + 96) = v9;
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v3;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv32_yLm16ELm256ELm256EEEE14assignWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  __n128 result = (__n128)a2[1];
  __int128 v5 = a2[2];
  __int128 v4 = a2[3];
  __int128 v7 = a2[4];
  __int128 v6 = a2[5];
  __int128 v9 = a2[6];
  __int128 v8 = a2[7];
  __int128 v11 = a2[8];
  __int128 v10 = a2[9];
  __int128 v13 = a2[10];
  __int128 v12 = a2[11];
  __int128 v15 = a2[12];
  __int128 v14 = a2[13];
  __int128 v16 = a2[15];
  *(_OWORD *)(a1 + 224) = a2[14];
  *(_OWORD *)(a1 + 240) = v16;
  *(_OWORD *)(a1 + 192) = v15;
  *(_OWORD *)(a1 + 208) = v14;
  *(_OWORD *)(a1 + 160) = v13;
  *(_OWORD *)(a1 + 176) = v12;
  *(_OWORD *)(a1 + 128) = v11;
  *(_OWORD *)(a1 + 144) = v10;
  *(_OWORD *)(a1 + 96) = v9;
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v3;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv32_yLm16ELm256ELm256EEEEELb1ELm256ELm16ELb0EE23getEnumTagSinglePayloadEPKNS_11OpaqueValueEjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 256)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv32_yLm16ELm256ELm256EEEEELb1ELm256ELm16ELb0EE25storeEnumTagSinglePayloadEPNS_11OpaqueValueEjjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t result, int a2, int a3)
{
  if (a3)
  {
    if (a2)
    {
      *(_DWORD *)__n128 result = a2 - 1;
      *(_OWORD *)(result + 4) = 0u;
      *(_OWORD *)(result + 20) = 0u;
      *(_OWORD *)(result + 36) = 0u;
      *(_OWORD *)(result + 52) = 0u;
      *(_OWORD *)(result + 68) = 0u;
      *(_OWORD *)(result + 84) = 0u;
      *(_OWORD *)(result + 100) = 0u;
      *(_OWORD *)(result + 116) = 0u;
      *(_OWORD *)(result + 132) = 0u;
      *(_OWORD *)(result + 148) = 0u;
      *(_OWORD *)(result + 164) = 0u;
      *(_OWORD *)(result + 180) = 0u;
      *(_OWORD *)(result + 196) = 0u;
      *(_OWORD *)(result + 212) = 0u;
      *(_OWORD *)(result + 228) = 0u;
      *(_OWORD *)(result + 240) = 0u;
      *(_BYTE *)(result + 256) = 1;
    }

    else
    {
      *(_BYTE *)(result + 256) = 0;
    }
  }

  else if (a2)
  {
    *(_DWORD *)__n128 result = a2 - 1;
    *(_OWORD *)(result + 4) = 0u;
    *(_OWORD *)(result + 20) = 0u;
    *(_OWORD *)(result + 36) = 0u;
    *(_OWORD *)(result + 52) = 0u;
    *(_OWORD *)(result + 68) = 0u;
    *(_OWORD *)(result + 84) = 0u;
    *(_OWORD *)(result + 100) = 0u;
    *(_OWORD *)(result + 116) = 0u;
    *(_OWORD *)(result + 132) = 0u;
    *(_OWORD *)(result + 148) = 0u;
    *(_OWORD *)(result + 164) = 0u;
    *(_OWORD *)(result + 180) = 0u;
    *(_OWORD *)(result + 196) = 0u;
    *(_OWORD *)(result + 212) = 0u;
    *(_OWORD *)(result + 228) = 0u;
    *(_OWORD *)(result + 240) = 0u;
  }

  return result;
}

char *_ZN5swift12metadataimpl20BufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv64_yLm16ELm512ELm512EEEEELb1ELm512ELm16ELNS0_12FixedPackingE0EE32initializeBufferWithCopyOfBufferEPNS_17TargetValueBufferINS_9InProcessEEESC_PKNS_14TargetMetadataISA_EE( unint64_t **a1, unint64_t **a2, uint64_t a3, char *a4)
{
  uint64_t v4 = *(void *)(a3 - 8);
  __int128 v5 = *a2;
  *a1 = *a2;
  swift_retain(v5, (uint64_t)a2, a3, a4);
  return (char *)v5 + ((*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv64_yLm16ELm512ELm512EEEE18initializeWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 32);
  __int128 v5 = *(_OWORD *)(a2 + 48);
  __int128 v6 = *(_OWORD *)(a2 + 64);
  __int128 v7 = *(_OWORD *)(a2 + 80);
  __int128 v8 = *(_OWORD *)(a2 + 96);
  __int128 v9 = *(_OWORD *)(a2 + 112);
  __int128 v10 = *(_OWORD *)(a2 + 128);
  __int128 v11 = *(_OWORD *)(a2 + 144);
  __int128 v12 = *(_OWORD *)(a2 + 160);
  __int128 v13 = *(_OWORD *)(a2 + 176);
  __int128 v14 = *(_OWORD *)(a2 + 192);
  __int128 v15 = *(_OWORD *)(a2 + 208);
  __int128 v16 = *(_OWORD *)(a2 + 224);
  __int128 v17 = *(_OWORD *)(a2 + 240);
  __int128 v18 = *(_OWORD *)(a2 + 256);
  __int128 v19 = *(_OWORD *)(a2 + 272);
  __int128 v20 = *(_OWORD *)(a2 + 288);
  __int128 v21 = *(_OWORD *)(a2 + 304);
  __int128 v22 = *(_OWORD *)(a2 + 320);
  __int128 v23 = *(_OWORD *)(a2 + 336);
  __int128 v24 = *(_OWORD *)(a2 + 352);
  __int128 v25 = *(_OWORD *)(a2 + 368);
  __int128 v26 = *(_OWORD *)(a2 + 384);
  __int128 v27 = *(_OWORD *)(a2 + 400);
  __int128 v28 = *(_OWORD *)(a2 + 416);
  __int128 v29 = *(_OWORD *)(a2 + 432);
  __int128 v30 = *(_OWORD *)(a2 + 448);
  __int128 v31 = *(_OWORD *)(a2 + 464);
  __int128 v32 = *(_OWORD *)(a2 + 496);
  *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 480);
  *(_OWORD *)(a1 + 496) = v32;
  *(_OWORD *)(a1 + 448) = v30;
  *(_OWORD *)(a1 + 464) = v31;
  *(_OWORD *)(a1 + 416) = v28;
  *(_OWORD *)(a1 + 432) = v29;
  *(_OWORD *)(a1 + 384) = v26;
  *(_OWORD *)(a1 + 400) = v27;
  *(_OWORD *)(a1 + 352) = v24;
  *(_OWORD *)(a1 + 368) = v25;
  *(_OWORD *)(a1 + 320) = v22;
  *(_OWORD *)(a1 + 336) = v23;
  *(_OWORD *)(a1 + 288) = v20;
  *(_OWORD *)(a1 + 304) = v21;
  *(_OWORD *)(a1 + 256) = v18;
  *(_OWORD *)(a1 + 272) = v19;
  *(_OWORD *)(a1 + 224) = v16;
  *(_OWORD *)(a1 + 240) = v17;
  *(_OWORD *)(a1 + 192) = v14;
  *(_OWORD *)(a1 + 208) = v15;
  *(_OWORD *)(a1 + 160) = v12;
  *(_OWORD *)(a1 + 176) = v13;
  *(_OWORD *)(a1 + 128) = v10;
  *(_OWORD *)(a1 + 144) = v11;
  *(_OWORD *)(a1 + 96) = v8;
  *(_OWORD *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = v5;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv64_yLm16ELm512ELm512EEEE14assignWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 32);
  __int128 v5 = *(_OWORD *)(a2 + 48);
  __int128 v6 = *(_OWORD *)(a2 + 64);
  __int128 v7 = *(_OWORD *)(a2 + 80);
  __int128 v8 = *(_OWORD *)(a2 + 96);
  __int128 v9 = *(_OWORD *)(a2 + 112);
  __int128 v10 = *(_OWORD *)(a2 + 128);
  __int128 v11 = *(_OWORD *)(a2 + 144);
  __int128 v12 = *(_OWORD *)(a2 + 160);
  __int128 v13 = *(_OWORD *)(a2 + 176);
  __int128 v14 = *(_OWORD *)(a2 + 192);
  __int128 v15 = *(_OWORD *)(a2 + 208);
  __int128 v16 = *(_OWORD *)(a2 + 224);
  __int128 v17 = *(_OWORD *)(a2 + 240);
  __int128 v18 = *(_OWORD *)(a2 + 256);
  __int128 v19 = *(_OWORD *)(a2 + 272);
  __int128 v20 = *(_OWORD *)(a2 + 288);
  __int128 v21 = *(_OWORD *)(a2 + 304);
  __int128 v22 = *(_OWORD *)(a2 + 320);
  __int128 v23 = *(_OWORD *)(a2 + 336);
  __int128 v24 = *(_OWORD *)(a2 + 352);
  __int128 v25 = *(_OWORD *)(a2 + 368);
  __int128 v26 = *(_OWORD *)(a2 + 384);
  __int128 v27 = *(_OWORD *)(a2 + 400);
  __int128 v28 = *(_OWORD *)(a2 + 416);
  __int128 v29 = *(_OWORD *)(a2 + 432);
  __int128 v30 = *(_OWORD *)(a2 + 448);
  __int128 v31 = *(_OWORD *)(a2 + 464);
  __int128 v32 = *(_OWORD *)(a2 + 496);
  *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 480);
  *(_OWORD *)(a1 + 496) = v32;
  *(_OWORD *)(a1 + 448) = v30;
  *(_OWORD *)(a1 + 464) = v31;
  *(_OWORD *)(a1 + 416) = v28;
  *(_OWORD *)(a1 + 432) = v29;
  *(_OWORD *)(a1 + 384) = v26;
  *(_OWORD *)(a1 + 400) = v27;
  *(_OWORD *)(a1 + 352) = v24;
  *(_OWORD *)(a1 + 368) = v25;
  *(_OWORD *)(a1 + 320) = v22;
  *(_OWORD *)(a1 + 336) = v23;
  *(_OWORD *)(a1 + 288) = v20;
  *(_OWORD *)(a1 + 304) = v21;
  *(_OWORD *)(a1 + 256) = v18;
  *(_OWORD *)(a1 + 272) = v19;
  *(_OWORD *)(a1 + 224) = v16;
  *(_OWORD *)(a1 + 240) = v17;
  *(_OWORD *)(a1 + 192) = v14;
  *(_OWORD *)(a1 + 208) = v15;
  *(_OWORD *)(a1 + 160) = v12;
  *(_OWORD *)(a1 + 176) = v13;
  *(_OWORD *)(a1 + 128) = v10;
  *(_OWORD *)(a1 + 144) = v11;
  *(_OWORD *)(a1 + 96) = v8;
  *(_OWORD *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = v5;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv64_yLm16ELm512ELm512EEEE18initializeWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 32);
  __int128 v5 = *(_OWORD *)(a2 + 48);
  __int128 v6 = *(_OWORD *)(a2 + 64);
  __int128 v7 = *(_OWORD *)(a2 + 80);
  __int128 v8 = *(_OWORD *)(a2 + 96);
  __int128 v9 = *(_OWORD *)(a2 + 112);
  __int128 v10 = *(_OWORD *)(a2 + 128);
  __int128 v11 = *(_OWORD *)(a2 + 144);
  __int128 v12 = *(_OWORD *)(a2 + 160);
  __int128 v13 = *(_OWORD *)(a2 + 176);
  __int128 v14 = *(_OWORD *)(a2 + 192);
  __int128 v15 = *(_OWORD *)(a2 + 208);
  __int128 v16 = *(_OWORD *)(a2 + 224);
  __int128 v17 = *(_OWORD *)(a2 + 240);
  __int128 v18 = *(_OWORD *)(a2 + 256);
  __int128 v19 = *(_OWORD *)(a2 + 272);
  __int128 v20 = *(_OWORD *)(a2 + 288);
  __int128 v21 = *(_OWORD *)(a2 + 304);
  __int128 v22 = *(_OWORD *)(a2 + 320);
  __int128 v23 = *(_OWORD *)(a2 + 336);
  __int128 v24 = *(_OWORD *)(a2 + 352);
  __int128 v25 = *(_OWORD *)(a2 + 368);
  __int128 v26 = *(_OWORD *)(a2 + 384);
  __int128 v27 = *(_OWORD *)(a2 + 400);
  __int128 v28 = *(_OWORD *)(a2 + 416);
  __int128 v29 = *(_OWORD *)(a2 + 432);
  __int128 v30 = *(_OWORD *)(a2 + 448);
  __int128 v31 = *(_OWORD *)(a2 + 464);
  __int128 v32 = *(_OWORD *)(a2 + 496);
  *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 480);
  *(_OWORD *)(a1 + 496) = v32;
  *(_OWORD *)(a1 + 448) = v30;
  *(_OWORD *)(a1 + 464) = v31;
  *(_OWORD *)(a1 + 416) = v28;
  *(_OWORD *)(a1 + 432) = v29;
  *(_OWORD *)(a1 + 384) = v26;
  *(_OWORD *)(a1 + 400) = v27;
  *(_OWORD *)(a1 + 352) = v24;
  *(_OWORD *)(a1 + 368) = v25;
  *(_OWORD *)(a1 + 320) = v22;
  *(_OWORD *)(a1 + 336) = v23;
  *(_OWORD *)(a1 + 288) = v20;
  *(_OWORD *)(a1 + 304) = v21;
  *(_OWORD *)(a1 + 256) = v18;
  *(_OWORD *)(a1 + 272) = v19;
  *(_OWORD *)(a1 + 224) = v16;
  *(_OWORD *)(a1 + 240) = v17;
  *(_OWORD *)(a1 + 192) = v14;
  *(_OWORD *)(a1 + 208) = v15;
  *(_OWORD *)(a1 + 160) = v12;
  *(_OWORD *)(a1 + 176) = v13;
  *(_OWORD *)(a1 + 128) = v10;
  *(_OWORD *)(a1 + 144) = v11;
  *(_OWORD *)(a1 + 96) = v8;
  *(_OWORD *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = v5;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv64_yLm16ELm512ELm512EEEE14assignWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 32);
  __int128 v5 = *(_OWORD *)(a2 + 48);
  __int128 v6 = *(_OWORD *)(a2 + 64);
  __int128 v7 = *(_OWORD *)(a2 + 80);
  __int128 v8 = *(_OWORD *)(a2 + 96);
  __int128 v9 = *(_OWORD *)(a2 + 112);
  __int128 v10 = *(_OWORD *)(a2 + 128);
  __int128 v11 = *(_OWORD *)(a2 + 144);
  __int128 v12 = *(_OWORD *)(a2 + 160);
  __int128 v13 = *(_OWORD *)(a2 + 176);
  __int128 v14 = *(_OWORD *)(a2 + 192);
  __int128 v15 = *(_OWORD *)(a2 + 208);
  __int128 v16 = *(_OWORD *)(a2 + 224);
  __int128 v17 = *(_OWORD *)(a2 + 240);
  __int128 v18 = *(_OWORD *)(a2 + 256);
  __int128 v19 = *(_OWORD *)(a2 + 272);
  __int128 v20 = *(_OWORD *)(a2 + 288);
  __int128 v21 = *(_OWORD *)(a2 + 304);
  __int128 v22 = *(_OWORD *)(a2 + 320);
  __int128 v23 = *(_OWORD *)(a2 + 336);
  __int128 v24 = *(_OWORD *)(a2 + 352);
  __int128 v25 = *(_OWORD *)(a2 + 368);
  __int128 v26 = *(_OWORD *)(a2 + 384);
  __int128 v27 = *(_OWORD *)(a2 + 400);
  __int128 v28 = *(_OWORD *)(a2 + 416);
  __int128 v29 = *(_OWORD *)(a2 + 432);
  __int128 v30 = *(_OWORD *)(a2 + 448);
  __int128 v31 = *(_OWORD *)(a2 + 464);
  __int128 v32 = *(_OWORD *)(a2 + 496);
  *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 480);
  *(_OWORD *)(a1 + 496) = v32;
  *(_OWORD *)(a1 + 448) = v30;
  *(_OWORD *)(a1 + 464) = v31;
  *(_OWORD *)(a1 + 416) = v28;
  *(_OWORD *)(a1 + 432) = v29;
  *(_OWORD *)(a1 + 384) = v26;
  *(_OWORD *)(a1 + 400) = v27;
  *(_OWORD *)(a1 + 352) = v24;
  *(_OWORD *)(a1 + 368) = v25;
  *(_OWORD *)(a1 + 320) = v22;
  *(_OWORD *)(a1 + 336) = v23;
  *(_OWORD *)(a1 + 288) = v20;
  *(_OWORD *)(a1 + 304) = v21;
  *(_OWORD *)(a1 + 256) = v18;
  *(_OWORD *)(a1 + 272) = v19;
  *(_OWORD *)(a1 + 224) = v16;
  *(_OWORD *)(a1 + 240) = v17;
  *(_OWORD *)(a1 + 192) = v14;
  *(_OWORD *)(a1 + 208) = v15;
  *(_OWORD *)(a1 + 160) = v12;
  *(_OWORD *)(a1 + 176) = v13;
  *(_OWORD *)(a1 + 128) = v10;
  *(_OWORD *)(a1 + 144) = v11;
  *(_OWORD *)(a1 + 96) = v8;
  *(_OWORD *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = v5;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv64_yLm16ELm512ELm512EEEEELb1ELm512ELm16ELb0EE23getEnumTagSinglePayloadEPKNS_11OpaqueValueEjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 512)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv64_yLm16ELm512ELm512EEEEELb1ELm512ELm16ELb0EE25storeEnumTagSinglePayloadEPNS_11OpaqueValueEjjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t result, int a2, int a3)
{
  if (a3)
  {
    if (a2)
    {
      *(_DWORD *)__n128 result = a2 - 1;
      *(_OWORD *)(result + 20) = 0u;
      *(_OWORD *)(result + 36) = 0u;
      *(_OWORD *)(result + 52) = 0u;
      *(_OWORD *)(result + 68) = 0u;
      *(_OWORD *)(result + 84) = 0u;
      *(_OWORD *)(result + 100) = 0u;
      *(_OWORD *)(result + 116) = 0u;
      *(_OWORD *)(result + 132) = 0u;
      *(_OWORD *)(result + 148) = 0u;
      *(_OWORD *)(result + 164) = 0u;
      *(_OWORD *)(result + 180) = 0u;
      *(_OWORD *)(result + 196) = 0u;
      *(_OWORD *)(result + 212) = 0u;
      *(_OWORD *)(result + 228) = 0u;
      *(_OWORD *)(result + 244) = 0u;
      *(_OWORD *)(result + 4) = 0u;
      *(_OWORD *)(result + 496) = 0u;
      *(_OWORD *)(result + 260) = 0u;
      *(_OWORD *)(result + 276) = 0u;
      *(_OWORD *)(result + 292) = 0u;
      *(_OWORD *)(result + 308) = 0u;
      *(_OWORD *)(result + 324) = 0u;
      *(_OWORD *)(result + 340) = 0u;
      *(_OWORD *)(result + 356) = 0u;
      *(_OWORD *)(result + 372) = 0u;
      *(_OWORD *)(result + 388) = 0u;
      *(_OWORD *)(result + 404) = 0u;
      *(_OWORD *)(result + 420) = 0u;
      *(_OWORD *)(result + 436) = 0u;
      *(_OWORD *)(result + 452) = 0u;
      *(_OWORD *)(result + 468) = 0u;
      *(_OWORD *)(result + 484) = 0u;
      *(_BYTE *)(result + 512) = 1;
    }

    else
    {
      *(_BYTE *)(result + 512) = 0;
    }
  }

  else if (a2)
  {
    *(_DWORD *)__n128 result = a2 - 1;
    *(_OWORD *)(result + 20) = 0u;
    *(_OWORD *)(result + 36) = 0u;
    *(_OWORD *)(result + 52) = 0u;
    *(_OWORD *)(result + 68) = 0u;
    *(_OWORD *)(result + 84) = 0u;
    *(_OWORD *)(result + 100) = 0u;
    *(_OWORD *)(result + 116) = 0u;
    *(_OWORD *)(result + 132) = 0u;
    *(_OWORD *)(result + 148) = 0u;
    *(_OWORD *)(result + 164) = 0u;
    *(_OWORD *)(result + 180) = 0u;
    *(_OWORD *)(result + 196) = 0u;
    *(_OWORD *)(result + 212) = 0u;
    *(_OWORD *)(result + 228) = 0u;
    *(_OWORD *)(result + 244) = 0u;
    *(_OWORD *)(result + 496) = 0u;
    *(_OWORD *)(result + 4) = 0u;
    result += 4LL;
    *(_OWORD *)(result + 256) = 0u;
    *(_OWORD *)(result + 272) = 0u;
    *(_OWORD *)(result + 288) = 0u;
    *(_OWORD *)(result + 304) = 0u;
    *(_OWORD *)(result + 320) = 0u;
    *(_OWORD *)(result + 336) = 0u;
    *(_OWORD *)(result + 352) = 0u;
    *(_OWORD *)(result + 368) = 0u;
    *(_OWORD *)(result + 384) = 0u;
    *(_OWORD *)(result + 400) = 0u;
    *(_OWORD *)(result + 416) = 0u;
    *(_OWORD *)(result + 432) = 0u;
    *(_OWORD *)(result + 448) = 0u;
    *(_OWORD *)(result + 464) = 0u;
    *(_OWORD *)(result + 480) = 0u;
  }

  return result;
}

double _ZN5swift12metadataimpl20BufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv2_fLm8ELm8ELm8EEEEELb1ELm8ELm8ELNS0_12FixedPackingE1EE32initializeBufferWithCopyOfBufferEPNS_17TargetValueBufferINS_9InProcessEEESC_PKNS_14TargetMetadataISA_EE( void *a1, double *a2)
{
  double result = *a2;
  *a1 = *(void *)a2;
  return result;
}

double _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv2_fLm8ELm8ELm8EEEE18initializeWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( void *a1, double *a2)
{
  double result = *a2;
  *a1 = *(void *)a2;
  return result;
}

double _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv2_fLm8ELm8ELm8EEEE14assignWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( void *a1, double *a2)
{
  double result = *a2;
  *a1 = *(void *)a2;
  return result;
}

double _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv2_fLm8ELm8ELm8EEEE18initializeWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( void *a1, double *a2)
{
  double result = *a2;
  *a1 = *(void *)a2;
  return result;
}

double _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv2_fLm8ELm8ELm8EEEE14assignWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( void *a1, double *a2)
{
  double result = *a2;
  *a1 = *(void *)a2;
  return result;
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv2_fLm8ELm8ELm8EEEEELb1ELm8ELm8ELb0EE23getEnumTagSinglePayloadEPKNS_11OpaqueValueEjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv2_fLm8ELm8ELm8EEEEELb1ELm8ELm8ELb0EE25storeEnumTagSinglePayloadEPNS_11OpaqueValueEjjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t result, int a2, int a3)
{
  if (a3)
  {
    if (a2)
    {
      *(_DWORD *)double result = a2 - 1;
      *(_DWORD *)(result + 4) = 0;
      *(_BYTE *)(result + 8) = 1;
    }

    else
    {
      *(_BYTE *)(result + 8) = 0;
    }
  }

  else if (a2)
  {
    *(void *)double result = (a2 - 1);
  }

  return result;
}

char *_ZN5swift12metadataimpl20BufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv4_fLm16ELm16ELm16EEEEELb1ELm16ELm16ELNS0_12FixedPackingE0EE32initializeBufferWithCopyOfBufferEPNS_17TargetValueBufferINS_9InProcessEEESC_PKNS_14TargetMetadataISA_EE( unint64_t **a1, unint64_t **a2, uint64_t a3, char *a4)
{
  uint64_t v4 = *(void *)(a3 - 8);
  __int128 v5 = *a2;
  *a1 = *a2;
  swift_retain(v5, (uint64_t)a2, a3, a4);
  return (char *)v5 + ((*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv4_fLm16ELm16ELm16EEEE18initializeWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( __n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv4_fLm16ELm16ELm16EEEE14assignWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( __n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv4_fLm16ELm16ELm16EEEE18initializeWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( __n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv4_fLm16ELm16ELm16EEEE14assignWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( __n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv4_fLm16ELm16ELm16EEEEELb1ELm16ELm16ELb0EE23getEnumTagSinglePayloadEPKNS_11OpaqueValueEjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv4_fLm16ELm16ELm16EEEEELb1ELm16ELm16ELb0EE25storeEnumTagSinglePayloadEPNS_11OpaqueValueEjjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t result, int a2, int a3)
{
  if (a3)
  {
    if (a2)
    {
      *(_DWORD *)__n128 result = a2 - 1;
      *(void *)(result + 4) = 0LL;
      *(_DWORD *)(result + 12) = 0;
      *(_BYTE *)(result + 16) = 1;
    }

    else
    {
      *(_BYTE *)(result + 16) = 0;
    }
  }

  else if (a2)
  {
    *(_DWORD *)__n128 result = a2 - 1;
    *(void *)(result + 4) = 0LL;
    *(_DWORD *)(result + 12) = 0;
  }

  return result;
}

char *_ZN5swift12metadataimpl20BufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv8_fLm16ELm32ELm32EEEEELb1ELm32ELm16ELNS0_12FixedPackingE0EE32initializeBufferWithCopyOfBufferEPNS_17TargetValueBufferINS_9InProcessEEESC_PKNS_14TargetMetadataISA_EE( unint64_t **a1, unint64_t **a2, uint64_t a3, char *a4)
{
  uint64_t v4 = *(void *)(a3 - 8);
  __int128 v5 = *a2;
  *a1 = *a2;
  swift_retain(v5, (uint64_t)a2, a3, a4);
  return (char *)v5 + ((*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv8_fLm16ELm32ELm32EEEE18initializeWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( _OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv8_fLm16ELm32ELm32EEEE14assignWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( _OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv8_fLm16ELm32ELm32EEEE18initializeWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( _OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv8_fLm16ELm32ELm32EEEE14assignWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( _OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv8_fLm16ELm32ELm32EEEEELb1ELm32ELm16ELb0EE23getEnumTagSinglePayloadEPKNS_11OpaqueValueEjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv8_fLm16ELm32ELm32EEEEELb1ELm32ELm16ELb0EE25storeEnumTagSinglePayloadEPNS_11OpaqueValueEjjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t result, int a2, int a3)
{
  if (a3)
  {
    if (a2)
    {
      *(_DWORD *)__n128 result = a2 - 1;
      *(void *)(result + 4) = 0LL;
      *(void *)(result + 20) = 0LL;
      *(void *)(result + 12) = 0LL;
      *(_DWORD *)(result + 28) = 0;
      *(_BYTE *)(result + 32) = 1;
    }

    else
    {
      *(_BYTE *)(result + 32) = 0;
    }
  }

  else if (a2)
  {
    *(_DWORD *)__n128 result = a2 - 1;
    *(void *)(result + 4) = 0LL;
    *(void *)(result + 20) = 0LL;
    *(void *)(result + 12) = 0LL;
    *(_DWORD *)(result + 28) = 0;
  }

  return result;
}

char *_ZN5swift12metadataimpl20BufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv16_fLm16ELm64ELm64EEEEELb1ELm64ELm16ELNS0_12FixedPackingE0EE32initializeBufferWithCopyOfBufferEPNS_17TargetValueBufferINS_9InProcessEEESC_PKNS_14TargetMetadataISA_EE( unint64_t **a1, unint64_t **a2, uint64_t a3, char *a4)
{
  uint64_t v4 = *(void *)(a3 - 8);
  __int128 v5 = *a2;
  *a1 = *a2;
  swift_retain(v5, (uint64_t)a2, a3, a4);
  return (char *)v5 + ((*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv16_fLm16ELm64ELm64EEEE18initializeWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  __n128 result = (__n128)a2[1];
  __int128 v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v3;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv16_fLm16ELm64ELm64EEEE14assignWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  __n128 result = (__n128)a2[1];
  __int128 v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v3;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv16_fLm16ELm64ELm64EEEE18initializeWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  __n128 result = (__n128)a2[1];
  __int128 v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v3;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv16_fLm16ELm64ELm64EEEE14assignWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  __n128 result = (__n128)a2[1];
  __int128 v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v3;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv16_fLm16ELm64ELm64EEEEELb1ELm64ELm16ELb0EE23getEnumTagSinglePayloadEPKNS_11OpaqueValueEjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv16_fLm16ELm64ELm64EEEEELb1ELm64ELm16ELb0EE25storeEnumTagSinglePayloadEPNS_11OpaqueValueEjjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t result, int a2, int a3)
{
  if (a3)
  {
    if (a2)
    {
      *(_DWORD *)__n128 result = a2 - 1;
      *(_OWORD *)(result + 4) = 0u;
      *(_OWORD *)(result + 20) = 0u;
      *(_OWORD *)(result + 36) = 0u;
      *(_OWORD *)(result + 48) = 0u;
      *(_BYTE *)(result + 64) = 1;
    }

    else
    {
      *(_BYTE *)(result + 64) = 0;
    }
  }

  else if (a2)
  {
    *(_DWORD *)__n128 result = a2 - 1;
    *(_OWORD *)(result + 4) = 0u;
    *(_OWORD *)(result + 20) = 0u;
    *(_OWORD *)(result + 36) = 0u;
    *(_OWORD *)(result + 48) = 0u;
  }

  return result;
}

char *_ZN5swift12metadataimpl20BufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv32_fLm16ELm128ELm128EEEEELb1ELm128ELm16ELNS0_12FixedPackingE0EE32initializeBufferWithCopyOfBufferEPNS_17TargetValueBufferINS_9InProcessEEESC_PKNS_14TargetMetadataISA_EE( unint64_t **a1, unint64_t **a2, uint64_t a3, char *a4)
{
  uint64_t v4 = *(void *)(a3 - 8);
  __int128 v5 = *a2;
  *a1 = *a2;
  swift_retain(v5, (uint64_t)a2, a3, a4);
  return (char *)v5 + ((*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv32_fLm16ELm128ELm128EEEE18initializeWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  __n128 result = (__n128)a2[1];
  __int128 v5 = a2[2];
  __int128 v4 = a2[3];
  __int128 v7 = a2[4];
  __int128 v6 = a2[5];
  __int128 v8 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v3;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv32_fLm16ELm128ELm128EEEE14assignWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  __n128 result = (__n128)a2[1];
  __int128 v5 = a2[2];
  __int128 v4 = a2[3];
  __int128 v7 = a2[4];
  __int128 v6 = a2[5];
  __int128 v8 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v3;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv32_fLm16ELm128ELm128EEEE18initializeWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  __n128 result = (__n128)a2[1];
  __int128 v5 = a2[2];
  __int128 v4 = a2[3];
  __int128 v7 = a2[4];
  __int128 v6 = a2[5];
  __int128 v8 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v3;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv32_fLm16ELm128ELm128EEEE14assignWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  __n128 result = (__n128)a2[1];
  __int128 v5 = a2[2];
  __int128 v4 = a2[3];
  __int128 v7 = a2[4];
  __int128 v6 = a2[5];
  __int128 v8 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v3;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv32_fLm16ELm128ELm128EEEEELb1ELm128ELm16ELb0EE23getEnumTagSinglePayloadEPKNS_11OpaqueValueEjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 128)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv32_fLm16ELm128ELm128EEEEELb1ELm128ELm16ELb0EE25storeEnumTagSinglePayloadEPNS_11OpaqueValueEjjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t result, int a2, int a3)
{
  if (a3)
  {
    if (a2)
    {
      *(_DWORD *)__n128 result = a2 - 1;
      *(_OWORD *)(result + 4) = 0u;
      *(_OWORD *)(result + 20) = 0u;
      *(_OWORD *)(result + 36) = 0u;
      *(_OWORD *)(result + 52) = 0u;
      *(_OWORD *)(result + 68) = 0u;
      *(_OWORD *)(result + 84) = 0u;
      *(_OWORD *)(result + 100) = 0u;
      *(_OWORD *)(result + 112) = 0u;
      *(_BYTE *)(result + 128) = 1;
    }

    else
    {
      *(_BYTE *)(result + 128) = 0;
    }
  }

  else if (a2)
  {
    *(_DWORD *)__n128 result = a2 - 1;
    *(_OWORD *)(result + 4) = 0u;
    *(_OWORD *)(result + 20) = 0u;
    *(_OWORD *)(result + 36) = 0u;
    *(_OWORD *)(result + 52) = 0u;
    *(_OWORD *)(result + 68) = 0u;
    *(_OWORD *)(result + 84) = 0u;
    *(_OWORD *)(result + 100) = 0u;
    *(_OWORD *)(result + 112) = 0u;
  }

  return result;
}

char *_ZN5swift12metadataimpl20BufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv64_fLm16ELm256ELm256EEEEELb1ELm256ELm16ELNS0_12FixedPackingE0EE32initializeBufferWithCopyOfBufferEPNS_17TargetValueBufferINS_9InProcessEEESC_PKNS_14TargetMetadataISA_EE( unint64_t **a1, unint64_t **a2, uint64_t a3, char *a4)
{
  uint64_t v4 = *(void *)(a3 - 8);
  __int128 v5 = *a2;
  *a1 = *a2;
  swift_retain(v5, (uint64_t)a2, a3, a4);
  return (char *)v5 + ((*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv64_fLm16ELm256ELm256EEEE18initializeWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  __n128 result = (__n128)a2[1];
  __int128 v5 = a2[2];
  __int128 v4 = a2[3];
  __int128 v7 = a2[4];
  __int128 v6 = a2[5];
  __int128 v9 = a2[6];
  __int128 v8 = a2[7];
  __int128 v11 = a2[8];
  __int128 v10 = a2[9];
  __int128 v13 = a2[10];
  __int128 v12 = a2[11];
  __int128 v15 = a2[12];
  __int128 v14 = a2[13];
  __int128 v16 = a2[15];
  *(_OWORD *)(a1 + 224) = a2[14];
  *(_OWORD *)(a1 + 240) = v16;
  *(_OWORD *)(a1 + 192) = v15;
  *(_OWORD *)(a1 + 208) = v14;
  *(_OWORD *)(a1 + 160) = v13;
  *(_OWORD *)(a1 + 176) = v12;
  *(_OWORD *)(a1 + 128) = v11;
  *(_OWORD *)(a1 + 144) = v10;
  *(_OWORD *)(a1 + 96) = v9;
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v3;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv64_fLm16ELm256ELm256EEEE14assignWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  __n128 result = (__n128)a2[1];
  __int128 v5 = a2[2];
  __int128 v4 = a2[3];
  __int128 v7 = a2[4];
  __int128 v6 = a2[5];
  __int128 v9 = a2[6];
  __int128 v8 = a2[7];
  __int128 v11 = a2[8];
  __int128 v10 = a2[9];
  __int128 v13 = a2[10];
  __int128 v12 = a2[11];
  __int128 v15 = a2[12];
  __int128 v14 = a2[13];
  __int128 v16 = a2[15];
  *(_OWORD *)(a1 + 224) = a2[14];
  *(_OWORD *)(a1 + 240) = v16;
  *(_OWORD *)(a1 + 192) = v15;
  *(_OWORD *)(a1 + 208) = v14;
  *(_OWORD *)(a1 + 160) = v13;
  *(_OWORD *)(a1 + 176) = v12;
  *(_OWORD *)(a1 + 128) = v11;
  *(_OWORD *)(a1 + 144) = v10;
  *(_OWORD *)(a1 + 96) = v9;
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v3;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv64_fLm16ELm256ELm256EEEE18initializeWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  __n128 result = (__n128)a2[1];
  __int128 v5 = a2[2];
  __int128 v4 = a2[3];
  __int128 v7 = a2[4];
  __int128 v6 = a2[5];
  __int128 v9 = a2[6];
  __int128 v8 = a2[7];
  __int128 v11 = a2[8];
  __int128 v10 = a2[9];
  __int128 v13 = a2[10];
  __int128 v12 = a2[11];
  __int128 v15 = a2[12];
  __int128 v14 = a2[13];
  __int128 v16 = a2[15];
  *(_OWORD *)(a1 + 224) = a2[14];
  *(_OWORD *)(a1 + 240) = v16;
  *(_OWORD *)(a1 + 192) = v15;
  *(_OWORD *)(a1 + 208) = v14;
  *(_OWORD *)(a1 + 160) = v13;
  *(_OWORD *)(a1 + 176) = v12;
  *(_OWORD *)(a1 + 128) = v11;
  *(_OWORD *)(a1 + 144) = v10;
  *(_OWORD *)(a1 + 96) = v9;
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v3;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv64_fLm16ELm256ELm256EEEE14assignWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  __n128 result = (__n128)a2[1];
  __int128 v5 = a2[2];
  __int128 v4 = a2[3];
  __int128 v7 = a2[4];
  __int128 v6 = a2[5];
  __int128 v9 = a2[6];
  __int128 v8 = a2[7];
  __int128 v11 = a2[8];
  __int128 v10 = a2[9];
  __int128 v13 = a2[10];
  __int128 v12 = a2[11];
  __int128 v15 = a2[12];
  __int128 v14 = a2[13];
  __int128 v16 = a2[15];
  *(_OWORD *)(a1 + 224) = a2[14];
  *(_OWORD *)(a1 + 240) = v16;
  *(_OWORD *)(a1 + 192) = v15;
  *(_OWORD *)(a1 + 208) = v14;
  *(_OWORD *)(a1 + 160) = v13;
  *(_OWORD *)(a1 + 176) = v12;
  *(_OWORD *)(a1 + 128) = v11;
  *(_OWORD *)(a1 + 144) = v10;
  *(_OWORD *)(a1 + 96) = v9;
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v3;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv64_fLm16ELm256ELm256EEEEELb1ELm256ELm16ELb0EE23getEnumTagSinglePayloadEPKNS_11OpaqueValueEjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 256)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv64_fLm16ELm256ELm256EEEEELb1ELm256ELm16ELb0EE25storeEnumTagSinglePayloadEPNS_11OpaqueValueEjjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t result, int a2, int a3)
{
  if (a3)
  {
    if (a2)
    {
      *(_DWORD *)__n128 result = a2 - 1;
      *(_OWORD *)(result + 4) = 0u;
      *(_OWORD *)(result + 20) = 0u;
      *(_OWORD *)(result + 36) = 0u;
      *(_OWORD *)(result + 52) = 0u;
      *(_OWORD *)(result + 68) = 0u;
      *(_OWORD *)(result + 84) = 0u;
      *(_OWORD *)(result + 100) = 0u;
      *(_OWORD *)(result + 116) = 0u;
      *(_OWORD *)(result + 132) = 0u;
      *(_OWORD *)(result + 148) = 0u;
      *(_OWORD *)(result + 164) = 0u;
      *(_OWORD *)(result + 180) = 0u;
      *(_OWORD *)(result + 196) = 0u;
      *(_OWORD *)(result + 212) = 0u;
      *(_OWORD *)(result + 228) = 0u;
      *(_OWORD *)(result + 240) = 0u;
      *(_BYTE *)(result + 256) = 1;
    }

    else
    {
      *(_BYTE *)(result + 256) = 0;
    }
  }

  else if (a2)
  {
    *(_DWORD *)__n128 result = a2 - 1;
    *(_OWORD *)(result + 4) = 0u;
    *(_OWORD *)(result + 20) = 0u;
    *(_OWORD *)(result + 36) = 0u;
    *(_OWORD *)(result + 52) = 0u;
    *(_OWORD *)(result + 68) = 0u;
    *(_OWORD *)(result + 84) = 0u;
    *(_OWORD *)(result + 100) = 0u;
    *(_OWORD *)(result + 116) = 0u;
    *(_OWORD *)(result + 132) = 0u;
    *(_OWORD *)(result + 148) = 0u;
    *(_OWORD *)(result + 164) = 0u;
    *(_OWORD *)(result + 180) = 0u;
    *(_OWORD *)(result + 196) = 0u;
    *(_OWORD *)(result + 212) = 0u;
    *(_OWORD *)(result + 228) = 0u;
    *(_OWORD *)(result + 240) = 0u;
  }

  return result;
}

char *_ZN5swift12metadataimpl20BufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv2_dLm16ELm16ELm16EEEEELb1ELm16ELm16ELNS0_12FixedPackingE0EE32initializeBufferWithCopyOfBufferEPNS_17TargetValueBufferINS_9InProcessEEESC_PKNS_14TargetMetadataISA_EE( unint64_t **a1, unint64_t **a2, uint64_t a3, char *a4)
{
  uint64_t v4 = *(void *)(a3 - 8);
  __int128 v5 = *a2;
  *a1 = *a2;
  swift_retain(v5, (uint64_t)a2, a3, a4);
  return (char *)v5 + ((*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv2_dLm16ELm16ELm16EEEE18initializeWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( __n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv2_dLm16ELm16ELm16EEEE14assignWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( __n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv2_dLm16ELm16ELm16EEEE18initializeWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( __n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv2_dLm16ELm16ELm16EEEE14assignWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( __n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv2_dLm16ELm16ELm16EEEEELb1ELm16ELm16ELb0EE23getEnumTagSinglePayloadEPKNS_11OpaqueValueEjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv2_dLm16ELm16ELm16EEEEELb1ELm16ELm16ELb0EE25storeEnumTagSinglePayloadEPNS_11OpaqueValueEjjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t result, int a2, int a3)
{
  if (a3)
  {
    if (a2)
    {
      *(_DWORD *)__n128 result = a2 - 1;
      *(void *)(result + 4) = 0LL;
      *(_DWORD *)(result + 12) = 0;
      *(_BYTE *)(result + 16) = 1;
    }

    else
    {
      *(_BYTE *)(result + 16) = 0;
    }
  }

  else if (a2)
  {
    *(_DWORD *)__n128 result = a2 - 1;
    *(void *)(result + 4) = 0LL;
    *(_DWORD *)(result + 12) = 0;
  }

  return result;
}

char *_ZN5swift12metadataimpl20BufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv4_dLm16ELm32ELm32EEEEELb1ELm32ELm16ELNS0_12FixedPackingE0EE32initializeBufferWithCopyOfBufferEPNS_17TargetValueBufferINS_9InProcessEEESC_PKNS_14TargetMetadataISA_EE( unint64_t **a1, unint64_t **a2, uint64_t a3, char *a4)
{
  uint64_t v4 = *(void *)(a3 - 8);
  __int128 v5 = *a2;
  *a1 = *a2;
  swift_retain(v5, (uint64_t)a2, a3, a4);
  return (char *)v5 + ((*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv4_dLm16ELm32ELm32EEEE18initializeWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( _OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv4_dLm16ELm32ELm32EEEE14assignWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( _OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv4_dLm16ELm32ELm32EEEE18initializeWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( _OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv4_dLm16ELm32ELm32EEEE14assignWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( _OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv4_dLm16ELm32ELm32EEEEELb1ELm32ELm16ELb0EE23getEnumTagSinglePayloadEPKNS_11OpaqueValueEjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv4_dLm16ELm32ELm32EEEEELb1ELm32ELm16ELb0EE25storeEnumTagSinglePayloadEPNS_11OpaqueValueEjjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t result, int a2, int a3)
{
  if (a3)
  {
    if (a2)
    {
      *(_DWORD *)__n128 result = a2 - 1;
      *(void *)(result + 4) = 0LL;
      *(void *)(result + 20) = 0LL;
      *(void *)(result + 12) = 0LL;
      *(_DWORD *)(result + 28) = 0;
      *(_BYTE *)(result + 32) = 1;
    }

    else
    {
      *(_BYTE *)(result + 32) = 0;
    }
  }

  else if (a2)
  {
    *(_DWORD *)__n128 result = a2 - 1;
    *(void *)(result + 4) = 0LL;
    *(void *)(result + 20) = 0LL;
    *(void *)(result + 12) = 0LL;
    *(_DWORD *)(result + 28) = 0;
  }

  return result;
}

char *_ZN5swift12metadataimpl20BufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv8_dLm16ELm64ELm64EEEEELb1ELm64ELm16ELNS0_12FixedPackingE0EE32initializeBufferWithCopyOfBufferEPNS_17TargetValueBufferINS_9InProcessEEESC_PKNS_14TargetMetadataISA_EE( unint64_t **a1, unint64_t **a2, uint64_t a3, char *a4)
{
  uint64_t v4 = *(void *)(a3 - 8);
  __int128 v5 = *a2;
  *a1 = *a2;
  swift_retain(v5, (uint64_t)a2, a3, a4);
  return (char *)v5 + ((*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv8_dLm16ELm64ELm64EEEE18initializeWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  __n128 result = (__n128)a2[1];
  __int128 v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v3;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv8_dLm16ELm64ELm64EEEE14assignWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  __n128 result = (__n128)a2[1];
  __int128 v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v3;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv8_dLm16ELm64ELm64EEEE18initializeWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  __n128 result = (__n128)a2[1];
  __int128 v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v3;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv8_dLm16ELm64ELm64EEEE14assignWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  __n128 result = (__n128)a2[1];
  __int128 v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v3;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv8_dLm16ELm64ELm64EEEEELb1ELm64ELm16ELb0EE23getEnumTagSinglePayloadEPKNS_11OpaqueValueEjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv8_dLm16ELm64ELm64EEEEELb1ELm64ELm16ELb0EE25storeEnumTagSinglePayloadEPNS_11OpaqueValueEjjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t result, int a2, int a3)
{
  if (a3)
  {
    if (a2)
    {
      *(_DWORD *)__n128 result = a2 - 1;
      *(_OWORD *)(result + 4) = 0u;
      *(_OWORD *)(result + 20) = 0u;
      *(_OWORD *)(result + 36) = 0u;
      *(_OWORD *)(result + 48) = 0u;
      *(_BYTE *)(result + 64) = 1;
    }

    else
    {
      *(_BYTE *)(result + 64) = 0;
    }
  }

  else if (a2)
  {
    *(_DWORD *)__n128 result = a2 - 1;
    *(_OWORD *)(result + 4) = 0u;
    *(_OWORD *)(result + 20) = 0u;
    *(_OWORD *)(result + 36) = 0u;
    *(_OWORD *)(result + 48) = 0u;
  }

  return result;
}

char *_ZN5swift12metadataimpl20BufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv16_dLm16ELm128ELm128EEEEELb1ELm128ELm16ELNS0_12FixedPackingE0EE32initializeBufferWithCopyOfBufferEPNS_17TargetValueBufferINS_9InProcessEEESC_PKNS_14TargetMetadataISA_EE( unint64_t **a1, unint64_t **a2, uint64_t a3, char *a4)
{
  uint64_t v4 = *(void *)(a3 - 8);
  __int128 v5 = *a2;
  *a1 = *a2;
  swift_retain(v5, (uint64_t)a2, a3, a4);
  return (char *)v5 + ((*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv16_dLm16ELm128ELm128EEEE18initializeWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  __n128 result = (__n128)a2[1];
  __int128 v5 = a2[2];
  __int128 v4 = a2[3];
  __int128 v7 = a2[4];
  __int128 v6 = a2[5];
  __int128 v8 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v3;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv16_dLm16ELm128ELm128EEEE14assignWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  __n128 result = (__n128)a2[1];
  __int128 v5 = a2[2];
  __int128 v4 = a2[3];
  __int128 v7 = a2[4];
  __int128 v6 = a2[5];
  __int128 v8 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v3;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv16_dLm16ELm128ELm128EEEE18initializeWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  __n128 result = (__n128)a2[1];
  __int128 v5 = a2[2];
  __int128 v4 = a2[3];
  __int128 v7 = a2[4];
  __int128 v6 = a2[5];
  __int128 v8 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v3;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv16_dLm16ELm128ELm128EEEE14assignWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  __n128 result = (__n128)a2[1];
  __int128 v5 = a2[2];
  __int128 v4 = a2[3];
  __int128 v7 = a2[4];
  __int128 v6 = a2[5];
  __int128 v8 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v3;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv16_dLm16ELm128ELm128EEEEELb1ELm128ELm16ELb0EE23getEnumTagSinglePayloadEPKNS_11OpaqueValueEjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 128)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv16_dLm16ELm128ELm128EEEEELb1ELm128ELm16ELb0EE25storeEnumTagSinglePayloadEPNS_11OpaqueValueEjjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t result, int a2, int a3)
{
  if (a3)
  {
    if (a2)
    {
      *(_DWORD *)__n128 result = a2 - 1;
      *(_OWORD *)(result + 4) = 0u;
      *(_OWORD *)(result + 20) = 0u;
      *(_OWORD *)(result + 36) = 0u;
      *(_OWORD *)(result + 52) = 0u;
      *(_OWORD *)(result + 68) = 0u;
      *(_OWORD *)(result + 84) = 0u;
      *(_OWORD *)(result + 100) = 0u;
      *(_OWORD *)(result + 112) = 0u;
      *(_BYTE *)(result + 128) = 1;
    }

    else
    {
      *(_BYTE *)(result + 128) = 0;
    }
  }

  else if (a2)
  {
    *(_DWORD *)__n128 result = a2 - 1;
    *(_OWORD *)(result + 4) = 0u;
    *(_OWORD *)(result + 20) = 0u;
    *(_OWORD *)(result + 36) = 0u;
    *(_OWORD *)(result + 52) = 0u;
    *(_OWORD *)(result + 68) = 0u;
    *(_OWORD *)(result + 84) = 0u;
    *(_OWORD *)(result + 100) = 0u;
    *(_OWORD *)(result + 112) = 0u;
  }

  return result;
}

char *_ZN5swift12metadataimpl20BufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv32_dLm16ELm256ELm256EEEEELb1ELm256ELm16ELNS0_12FixedPackingE0EE32initializeBufferWithCopyOfBufferEPNS_17TargetValueBufferINS_9InProcessEEESC_PKNS_14TargetMetadataISA_EE( unint64_t **a1, unint64_t **a2, uint64_t a3, char *a4)
{
  uint64_t v4 = *(void *)(a3 - 8);
  __int128 v5 = *a2;
  *a1 = *a2;
  swift_retain(v5, (uint64_t)a2, a3, a4);
  return (char *)v5 + ((*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv32_dLm16ELm256ELm256EEEE18initializeWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  __n128 result = (__n128)a2[1];
  __int128 v5 = a2[2];
  __int128 v4 = a2[3];
  __int128 v7 = a2[4];
  __int128 v6 = a2[5];
  __int128 v9 = a2[6];
  __int128 v8 = a2[7];
  __int128 v11 = a2[8];
  __int128 v10 = a2[9];
  __int128 v13 = a2[10];
  __int128 v12 = a2[11];
  __int128 v15 = a2[12];
  __int128 v14 = a2[13];
  __int128 v16 = a2[15];
  *(_OWORD *)(a1 + 224) = a2[14];
  *(_OWORD *)(a1 + 240) = v16;
  *(_OWORD *)(a1 + 192) = v15;
  *(_OWORD *)(a1 + 208) = v14;
  *(_OWORD *)(a1 + 160) = v13;
  *(_OWORD *)(a1 + 176) = v12;
  *(_OWORD *)(a1 + 128) = v11;
  *(_OWORD *)(a1 + 144) = v10;
  *(_OWORD *)(a1 + 96) = v9;
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v3;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv32_dLm16ELm256ELm256EEEE14assignWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  __n128 result = (__n128)a2[1];
  __int128 v5 = a2[2];
  __int128 v4 = a2[3];
  __int128 v7 = a2[4];
  __int128 v6 = a2[5];
  __int128 v9 = a2[6];
  __int128 v8 = a2[7];
  __int128 v11 = a2[8];
  __int128 v10 = a2[9];
  __int128 v13 = a2[10];
  __int128 v12 = a2[11];
  __int128 v15 = a2[12];
  __int128 v14 = a2[13];
  __int128 v16 = a2[15];
  *(_OWORD *)(a1 + 224) = a2[14];
  *(_OWORD *)(a1 + 240) = v16;
  *(_OWORD *)(a1 + 192) = v15;
  *(_OWORD *)(a1 + 208) = v14;
  *(_OWORD *)(a1 + 160) = v13;
  *(_OWORD *)(a1 + 176) = v12;
  *(_OWORD *)(a1 + 128) = v11;
  *(_OWORD *)(a1 + 144) = v10;
  *(_OWORD *)(a1 + 96) = v9;
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v3;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv32_dLm16ELm256ELm256EEEE18initializeWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  __n128 result = (__n128)a2[1];
  __int128 v5 = a2[2];
  __int128 v4 = a2[3];
  __int128 v7 = a2[4];
  __int128 v6 = a2[5];
  __int128 v9 = a2[6];
  __int128 v8 = a2[7];
  __int128 v11 = a2[8];
  __int128 v10 = a2[9];
  __int128 v13 = a2[10];
  __int128 v12 = a2[11];
  __int128 v15 = a2[12];
  __int128 v14 = a2[13];
  __int128 v16 = a2[15];
  *(_OWORD *)(a1 + 224) = a2[14];
  *(_OWORD *)(a1 + 240) = v16;
  *(_OWORD *)(a1 + 192) = v15;
  *(_OWORD *)(a1 + 208) = v14;
  *(_OWORD *)(a1 + 160) = v13;
  *(_OWORD *)(a1 + 176) = v12;
  *(_OWORD *)(a1 + 128) = v11;
  *(_OWORD *)(a1 + 144) = v10;
  *(_OWORD *)(a1 + 96) = v9;
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v3;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv32_dLm16ELm256ELm256EEEE14assignWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  __n128 result = (__n128)a2[1];
  __int128 v5 = a2[2];
  __int128 v4 = a2[3];
  __int128 v7 = a2[4];
  __int128 v6 = a2[5];
  __int128 v9 = a2[6];
  __int128 v8 = a2[7];
  __int128 v11 = a2[8];
  __int128 v10 = a2[9];
  __int128 v13 = a2[10];
  __int128 v12 = a2[11];
  __int128 v15 = a2[12];
  __int128 v14 = a2[13];
  __int128 v16 = a2[15];
  *(_OWORD *)(a1 + 224) = a2[14];
  *(_OWORD *)(a1 + 240) = v16;
  *(_OWORD *)(a1 + 192) = v15;
  *(_OWORD *)(a1 + 208) = v14;
  *(_OWORD *)(a1 + 160) = v13;
  *(_OWORD *)(a1 + 176) = v12;
  *(_OWORD *)(a1 + 128) = v11;
  *(_OWORD *)(a1 + 144) = v10;
  *(_OWORD *)(a1 + 96) = v9;
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v3;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv32_dLm16ELm256ELm256EEEEELb1ELm256ELm16ELb0EE23getEnumTagSinglePayloadEPKNS_11OpaqueValueEjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 256)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv32_dLm16ELm256ELm256EEEEELb1ELm256ELm16ELb0EE25storeEnumTagSinglePayloadEPNS_11OpaqueValueEjjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t result, int a2, int a3)
{
  if (a3)
  {
    if (a2)
    {
      *(_DWORD *)__n128 result = a2 - 1;
      *(_OWORD *)(result + 4) = 0u;
      *(_OWORD *)(result + 20) = 0u;
      *(_OWORD *)(result + 36) = 0u;
      *(_OWORD *)(result + 52) = 0u;
      *(_OWORD *)(result + 68) = 0u;
      *(_OWORD *)(result + 84) = 0u;
      *(_OWORD *)(result + 100) = 0u;
      *(_OWORD *)(result + 116) = 0u;
      *(_OWORD *)(result + 132) = 0u;
      *(_OWORD *)(result + 148) = 0u;
      *(_OWORD *)(result + 164) = 0u;
      *(_OWORD *)(result + 180) = 0u;
      *(_OWORD *)(result + 196) = 0u;
      *(_OWORD *)(result + 212) = 0u;
      *(_OWORD *)(result + 228) = 0u;
      *(_OWORD *)(result + 240) = 0u;
      *(_BYTE *)(result + 256) = 1;
    }

    else
    {
      *(_BYTE *)(result + 256) = 0;
    }
  }

  else if (a2)
  {
    *(_DWORD *)__n128 result = a2 - 1;
    *(_OWORD *)(result + 4) = 0u;
    *(_OWORD *)(result + 20) = 0u;
    *(_OWORD *)(result + 36) = 0u;
    *(_OWORD *)(result + 52) = 0u;
    *(_OWORD *)(result + 68) = 0u;
    *(_OWORD *)(result + 84) = 0u;
    *(_OWORD *)(result + 100) = 0u;
    *(_OWORD *)(result + 116) = 0u;
    *(_OWORD *)(result + 132) = 0u;
    *(_OWORD *)(result + 148) = 0u;
    *(_OWORD *)(result + 164) = 0u;
    *(_OWORD *)(result + 180) = 0u;
    *(_OWORD *)(result + 196) = 0u;
    *(_OWORD *)(result + 212) = 0u;
    *(_OWORD *)(result + 228) = 0u;
    *(_OWORD *)(result + 240) = 0u;
  }

  return result;
}

char *_ZN5swift12metadataimpl20BufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv64_dLm16ELm512ELm512EEEEELb1ELm512ELm16ELNS0_12FixedPackingE0EE32initializeBufferWithCopyOfBufferEPNS_17TargetValueBufferINS_9InProcessEEESC_PKNS_14TargetMetadataISA_EE( unint64_t **a1, unint64_t **a2, uint64_t a3, char *a4)
{
  uint64_t v4 = *(void *)(a3 - 8);
  __int128 v5 = *a2;
  *a1 = *a2;
  swift_retain(v5, (uint64_t)a2, a3, a4);
  return (char *)v5 + ((*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv64_dLm16ELm512ELm512EEEE18initializeWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 32);
  __int128 v5 = *(_OWORD *)(a2 + 48);
  __int128 v6 = *(_OWORD *)(a2 + 64);
  __int128 v7 = *(_OWORD *)(a2 + 80);
  __int128 v8 = *(_OWORD *)(a2 + 96);
  __int128 v9 = *(_OWORD *)(a2 + 112);
  __int128 v10 = *(_OWORD *)(a2 + 128);
  __int128 v11 = *(_OWORD *)(a2 + 144);
  __int128 v12 = *(_OWORD *)(a2 + 160);
  __int128 v13 = *(_OWORD *)(a2 + 176);
  __int128 v14 = *(_OWORD *)(a2 + 192);
  __int128 v15 = *(_OWORD *)(a2 + 208);
  __int128 v16 = *(_OWORD *)(a2 + 224);
  __int128 v17 = *(_OWORD *)(a2 + 240);
  __int128 v18 = *(_OWORD *)(a2 + 256);
  __int128 v19 = *(_OWORD *)(a2 + 272);
  __int128 v20 = *(_OWORD *)(a2 + 288);
  __int128 v21 = *(_OWORD *)(a2 + 304);
  __int128 v22 = *(_OWORD *)(a2 + 320);
  __int128 v23 = *(_OWORD *)(a2 + 336);
  __int128 v24 = *(_OWORD *)(a2 + 352);
  __int128 v25 = *(_OWORD *)(a2 + 368);
  __int128 v26 = *(_OWORD *)(a2 + 384);
  __int128 v27 = *(_OWORD *)(a2 + 400);
  __int128 v28 = *(_OWORD *)(a2 + 416);
  __int128 v29 = *(_OWORD *)(a2 + 432);
  __int128 v30 = *(_OWORD *)(a2 + 448);
  __int128 v31 = *(_OWORD *)(a2 + 464);
  __int128 v32 = *(_OWORD *)(a2 + 496);
  *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 480);
  *(_OWORD *)(a1 + 496) = v32;
  *(_OWORD *)(a1 + 448) = v30;
  *(_OWORD *)(a1 + 464) = v31;
  *(_OWORD *)(a1 + 416) = v28;
  *(_OWORD *)(a1 + 432) = v29;
  *(_OWORD *)(a1 + 384) = v26;
  *(_OWORD *)(a1 + 400) = v27;
  *(_OWORD *)(a1 + 352) = v24;
  *(_OWORD *)(a1 + 368) = v25;
  *(_OWORD *)(a1 + 320) = v22;
  *(_OWORD *)(a1 + 336) = v23;
  *(_OWORD *)(a1 + 288) = v20;
  *(_OWORD *)(a1 + 304) = v21;
  *(_OWORD *)(a1 + 256) = v18;
  *(_OWORD *)(a1 + 272) = v19;
  *(_OWORD *)(a1 + 224) = v16;
  *(_OWORD *)(a1 + 240) = v17;
  *(_OWORD *)(a1 + 192) = v14;
  *(_OWORD *)(a1 + 208) = v15;
  *(_OWORD *)(a1 + 160) = v12;
  *(_OWORD *)(a1 + 176) = v13;
  *(_OWORD *)(a1 + 128) = v10;
  *(_OWORD *)(a1 + 144) = v11;
  *(_OWORD *)(a1 + 96) = v8;
  *(_OWORD *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = v5;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv64_dLm16ELm512ELm512EEEE14assignWithCopyEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 32);
  __int128 v5 = *(_OWORD *)(a2 + 48);
  __int128 v6 = *(_OWORD *)(a2 + 64);
  __int128 v7 = *(_OWORD *)(a2 + 80);
  __int128 v8 = *(_OWORD *)(a2 + 96);
  __int128 v9 = *(_OWORD *)(a2 + 112);
  __int128 v10 = *(_OWORD *)(a2 + 128);
  __int128 v11 = *(_OWORD *)(a2 + 144);
  __int128 v12 = *(_OWORD *)(a2 + 160);
  __int128 v13 = *(_OWORD *)(a2 + 176);
  __int128 v14 = *(_OWORD *)(a2 + 192);
  __int128 v15 = *(_OWORD *)(a2 + 208);
  __int128 v16 = *(_OWORD *)(a2 + 224);
  __int128 v17 = *(_OWORD *)(a2 + 240);
  __int128 v18 = *(_OWORD *)(a2 + 256);
  __int128 v19 = *(_OWORD *)(a2 + 272);
  __int128 v20 = *(_OWORD *)(a2 + 288);
  __int128 v21 = *(_OWORD *)(a2 + 304);
  __int128 v22 = *(_OWORD *)(a2 + 320);
  __int128 v23 = *(_OWORD *)(a2 + 336);
  __int128 v24 = *(_OWORD *)(a2 + 352);
  __int128 v25 = *(_OWORD *)(a2 + 368);
  __int128 v26 = *(_OWORD *)(a2 + 384);
  __int128 v27 = *(_OWORD *)(a2 + 400);
  __int128 v28 = *(_OWORD *)(a2 + 416);
  __int128 v29 = *(_OWORD *)(a2 + 432);
  __int128 v30 = *(_OWORD *)(a2 + 448);
  __int128 v31 = *(_OWORD *)(a2 + 464);
  __int128 v32 = *(_OWORD *)(a2 + 496);
  *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 480);
  *(_OWORD *)(a1 + 496) = v32;
  *(_OWORD *)(a1 + 448) = v30;
  *(_OWORD *)(a1 + 464) = v31;
  *(_OWORD *)(a1 + 416) = v28;
  *(_OWORD *)(a1 + 432) = v29;
  *(_OWORD *)(a1 + 384) = v26;
  *(_OWORD *)(a1 + 400) = v27;
  *(_OWORD *)(a1 + 352) = v24;
  *(_OWORD *)(a1 + 368) = v25;
  *(_OWORD *)(a1 + 320) = v22;
  *(_OWORD *)(a1 + 336) = v23;
  *(_OWORD *)(a1 + 288) = v20;
  *(_OWORD *)(a1 + 304) = v21;
  *(_OWORD *)(a1 + 256) = v18;
  *(_OWORD *)(a1 + 272) = v19;
  *(_OWORD *)(a1 + 224) = v16;
  *(_OWORD *)(a1 + 240) = v17;
  *(_OWORD *)(a1 + 192) = v14;
  *(_OWORD *)(a1 + 208) = v15;
  *(_OWORD *)(a1 + 160) = v12;
  *(_OWORD *)(a1 + 176) = v13;
  *(_OWORD *)(a1 + 128) = v10;
  *(_OWORD *)(a1 + 144) = v11;
  *(_OWORD *)(a1 + 96) = v8;
  *(_OWORD *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = v5;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv64_dLm16ELm512ELm512EEEE18initializeWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 32);
  __int128 v5 = *(_OWORD *)(a2 + 48);
  __int128 v6 = *(_OWORD *)(a2 + 64);
  __int128 v7 = *(_OWORD *)(a2 + 80);
  __int128 v8 = *(_OWORD *)(a2 + 96);
  __int128 v9 = *(_OWORD *)(a2 + 112);
  __int128 v10 = *(_OWORD *)(a2 + 128);
  __int128 v11 = *(_OWORD *)(a2 + 144);
  __int128 v12 = *(_OWORD *)(a2 + 160);
  __int128 v13 = *(_OWORD *)(a2 + 176);
  __int128 v14 = *(_OWORD *)(a2 + 192);
  __int128 v15 = *(_OWORD *)(a2 + 208);
  __int128 v16 = *(_OWORD *)(a2 + 224);
  __int128 v17 = *(_OWORD *)(a2 + 240);
  __int128 v18 = *(_OWORD *)(a2 + 256);
  __int128 v19 = *(_OWORD *)(a2 + 272);
  __int128 v20 = *(_OWORD *)(a2 + 288);
  __int128 v21 = *(_OWORD *)(a2 + 304);
  __int128 v22 = *(_OWORD *)(a2 + 320);
  __int128 v23 = *(_OWORD *)(a2 + 336);
  __int128 v24 = *(_OWORD *)(a2 + 352);
  __int128 v25 = *(_OWORD *)(a2 + 368);
  __int128 v26 = *(_OWORD *)(a2 + 384);
  __int128 v27 = *(_OWORD *)(a2 + 400);
  __int128 v28 = *(_OWORD *)(a2 + 416);
  __int128 v29 = *(_OWORD *)(a2 + 432);
  __int128 v30 = *(_OWORD *)(a2 + 448);
  __int128 v31 = *(_OWORD *)(a2 + 464);
  __int128 v32 = *(_OWORD *)(a2 + 496);
  *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 480);
  *(_OWORD *)(a1 + 496) = v32;
  *(_OWORD *)(a1 + 448) = v30;
  *(_OWORD *)(a1 + 464) = v31;
  *(_OWORD *)(a1 + 416) = v28;
  *(_OWORD *)(a1 + 432) = v29;
  *(_OWORD *)(a1 + 384) = v26;
  *(_OWORD *)(a1 + 400) = v27;
  *(_OWORD *)(a1 + 352) = v24;
  *(_OWORD *)(a1 + 368) = v25;
  *(_OWORD *)(a1 + 320) = v22;
  *(_OWORD *)(a1 + 336) = v23;
  *(_OWORD *)(a1 + 288) = v20;
  *(_OWORD *)(a1 + 304) = v21;
  *(_OWORD *)(a1 + 256) = v18;
  *(_OWORD *)(a1 + 272) = v19;
  *(_OWORD *)(a1 + 224) = v16;
  *(_OWORD *)(a1 + 240) = v17;
  *(_OWORD *)(a1 + 192) = v14;
  *(_OWORD *)(a1 + 208) = v15;
  *(_OWORD *)(a1 + 160) = v12;
  *(_OWORD *)(a1 + 176) = v13;
  *(_OWORD *)(a1 + 128) = v10;
  *(_OWORD *)(a1 + 144) = v11;
  *(_OWORD *)(a1 + 96) = v8;
  *(_OWORD *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = v5;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 _ZN5swift12metadataimpl14ValueWitnessesINS0_9NativeBoxIDv64_dLm16ELm512ELm512EEEE14assignWithTakeEPNS_11OpaqueValueES7_PKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 32);
  __int128 v5 = *(_OWORD *)(a2 + 48);
  __int128 v6 = *(_OWORD *)(a2 + 64);
  __int128 v7 = *(_OWORD *)(a2 + 80);
  __int128 v8 = *(_OWORD *)(a2 + 96);
  __int128 v9 = *(_OWORD *)(a2 + 112);
  __int128 v10 = *(_OWORD *)(a2 + 128);
  __int128 v11 = *(_OWORD *)(a2 + 144);
  __int128 v12 = *(_OWORD *)(a2 + 160);
  __int128 v13 = *(_OWORD *)(a2 + 176);
  __int128 v14 = *(_OWORD *)(a2 + 192);
  __int128 v15 = *(_OWORD *)(a2 + 208);
  __int128 v16 = *(_OWORD *)(a2 + 224);
  __int128 v17 = *(_OWORD *)(a2 + 240);
  __int128 v18 = *(_OWORD *)(a2 + 256);
  __int128 v19 = *(_OWORD *)(a2 + 272);
  __int128 v20 = *(_OWORD *)(a2 + 288);
  __int128 v21 = *(_OWORD *)(a2 + 304);
  __int128 v22 = *(_OWORD *)(a2 + 320);
  __int128 v23 = *(_OWORD *)(a2 + 336);
  __int128 v24 = *(_OWORD *)(a2 + 352);
  __int128 v25 = *(_OWORD *)(a2 + 368);
  __int128 v26 = *(_OWORD *)(a2 + 384);
  __int128 v27 = *(_OWORD *)(a2 + 400);
  __int128 v28 = *(_OWORD *)(a2 + 416);
  __int128 v29 = *(_OWORD *)(a2 + 432);
  __int128 v30 = *(_OWORD *)(a2 + 448);
  __int128 v31 = *(_OWORD *)(a2 + 464);
  __int128 v32 = *(_OWORD *)(a2 + 496);
  *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 480);
  *(_OWORD *)(a1 + 496) = v32;
  *(_OWORD *)(a1 + 448) = v30;
  *(_OWORD *)(a1 + 464) = v31;
  *(_OWORD *)(a1 + 416) = v28;
  *(_OWORD *)(a1 + 432) = v29;
  *(_OWORD *)(a1 + 384) = v26;
  *(_OWORD *)(a1 + 400) = v27;
  *(_OWORD *)(a1 + 352) = v24;
  *(_OWORD *)(a1 + 368) = v25;
  *(_OWORD *)(a1 + 320) = v22;
  *(_OWORD *)(a1 + 336) = v23;
  *(_OWORD *)(a1 + 288) = v20;
  *(_OWORD *)(a1 + 304) = v21;
  *(_OWORD *)(a1 + 256) = v18;
  *(_OWORD *)(a1 + 272) = v19;
  *(_OWORD *)(a1 + 224) = v16;
  *(_OWORD *)(a1 + 240) = v17;
  *(_OWORD *)(a1 + 192) = v14;
  *(_OWORD *)(a1 + 208) = v15;
  *(_OWORD *)(a1 + 160) = v12;
  *(_OWORD *)(a1 + 176) = v13;
  *(_OWORD *)(a1 + 128) = v10;
  *(_OWORD *)(a1 + 144) = v11;
  *(_OWORD *)(a1 + 96) = v8;
  *(_OWORD *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = v5;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv64_dLm16ELm512ELm512EEEEELb1ELm512ELm16ELb0EE23getEnumTagSinglePayloadEPKNS_11OpaqueValueEjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 512)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t _ZN5swift12metadataimpl29FixedSizeBufferValueWitnessesINS0_14ValueWitnessesINS0_9NativeBoxIDv64_dLm16ELm512ELm512EEEEELb1ELm512ELm16ELb0EE25storeEnumTagSinglePayloadEPNS_11OpaqueValueEjjPKNS_14TargetMetadataINS_9InProcessEEE( uint64_t result, int a2, int a3)
{
  if (a3)
  {
    if (a2)
    {
      *(_DWORD *)__n128 result = a2 - 1;
      *(_OWORD *)(result + 20) = 0u;
      *(_OWORD *)(result + 36) = 0u;
      *(_OWORD *)(result + 52) = 0u;
      *(_OWORD *)(result + 68) = 0u;
      *(_OWORD *)(result + 84) = 0u;
      *(_OWORD *)(result + 100) = 0u;
      *(_OWORD *)(result + 116) = 0u;
      *(_OWORD *)(result + 132) = 0u;
      *(_OWORD *)(result + 148) = 0u;
      *(_OWORD *)(result + 164) = 0u;
      *(_OWORD *)(result + 180) = 0u;
      *(_OWORD *)(result + 196) = 0u;
      *(_OWORD *)(result + 212) = 0u;
      *(_OWORD *)(result + 228) = 0u;
      *(_OWORD *)(result + 244) = 0u;
      *(_OWORD *)(result + 4) = 0u;
      *(_OWORD *)(result + 496) = 0u;
      *(_OWORD *)(result + 260) = 0u;
      *(_OWORD *)(result + 276) = 0u;
      *(_OWORD *)(result + 292) = 0u;
      *(_OWORD *)(result + 308) = 0u;
      *(_OWORD *)(result + 324) = 0u;
      *(_OWORD *)(result + 340) = 0u;
      *(_OWORD *)(result + 356) = 0u;
      *(_OWORD *)(result + 372) = 0u;
      *(_OWORD *)(result + 388) = 0u;
      *(_OWORD *)(result + 404) = 0u;
      *(_OWORD *)(result + 420) = 0u;
      *(_OWORD *)(result + 436) = 0u;
      *(_OWORD *)(result + 452) = 0u;
      *(_OWORD *)(result + 468) = 0u;
      *(_OWORD *)(result + 484) = 0u;
      *(_BYTE *)(result + 512) = 1;
    }

    else
    {
      *(_BYTE *)(result + 512) = 0;
    }
  }

  else if (a2)
  {
    *(_DWORD *)__n128 result = a2 - 1;
    *(_OWORD *)(result + 20) = 0u;
    *(_OWORD *)(result + 36) = 0u;
    *(_OWORD *)(result + 52) = 0u;
    *(_OWORD *)(result + 68) = 0u;
    *(_OWORD *)(result + 84) = 0u;
    *(_OWORD *)(result + 100) = 0u;
    *(_OWORD *)(result + 116) = 0u;
    *(_OWORD *)(result + 132) = 0u;
    *(_OWORD *)(result + 148) = 0u;
    *(_OWORD *)(result + 164) = 0u;
    *(_OWORD *)(result + 180) = 0u;
    *(_OWORD *)(result + 196) = 0u;
    *(_OWORD *)(result + 212) = 0u;
    *(_OWORD *)(result + 228) = 0u;
    *(_OWORD *)(result + 244) = 0u;
    *(_OWORD *)(result + 496) = 0u;
    *(_OWORD *)(result + 4) = 0u;
    result += 4LL;
    *(_OWORD *)(result + 256) = 0u;
    *(_OWORD *)(result + 272) = 0u;
    *(_OWORD *)(result + 288) = 0u;
    *(_OWORD *)(result + 304) = 0u;
    *(_OWORD *)(result + 320) = 0u;
    *(_OWORD *)(result + 336) = 0u;
    *(_OWORD *)(result + 352) = 0u;
    *(_OWORD *)(result + 368) = 0u;
    *(_OWORD *)(result + 384) = 0u;
    *(_OWORD *)(result + 400) = 0u;
    *(_OWORD *)(result + 416) = 0u;
    *(_OWORD *)(result + 432) = 0u;
    *(_OWORD *)(result + 448) = 0u;
    *(_OWORD *)(result + 464) = 0u;
    *(_OWORD *)(result + 480) = 0u;
  }

  return result;
}

void *swift::metadataimpl::BufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::PointerPointerBox>,true,8ul,8ul,(swift::metadataimpl::FixedPacking)1>::initializeBufferWithCopyOfBuffer( void *result, void *a2)
{
  *__n128 result = *a2;
  return result;
}

void *swift::metadataimpl::ValueWitnesses<swift::metadataimpl::PointerPointerBox>::initializeWithCopy( void *result, void *a2)
{
  *__n128 result = *a2;
  return result;
}

void *swift::metadataimpl::ValueWitnesses<swift::metadataimpl::PointerPointerBox>::assignWithCopy( void *result, void *a2)
{
  *__n128 result = *a2;
  return result;
}

void *swift::metadataimpl::ValueWitnesses<swift::metadataimpl::PointerPointerBox>::initializeWithTake( void *result, void *a2)
{
  *__n128 result = *a2;
  return result;
}

void *swift::metadataimpl::ValueWitnesses<swift::metadataimpl::PointerPointerBox>::assignWithTake( void *result, void *a2)
{
  *__n128 result = *a2;
  return result;
}

uint64_t swift::metadataimpl::FixedSizeBufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::PointerPointerBox>,true,8ul,8ul,true>::getEnumTagSinglePayload( uint64_t a1, int a2)
{
  if (a2 < 0 && *(_BYTE *)(a1 + 8)) {
    return *(_DWORD *)a1 ^ 0x80000000;
  }
  if (HIDWORD(*(void *)a1)) {
    return 0LL;
  }
  return *(void *)a1 + 1;
}

uint64_t swift::metadataimpl::FixedSizeBufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::PointerPointerBox>,true,8ul,8ul,true>::storeEnumTagSinglePayload( uint64_t result, int a2, int a3)
{
  if ((a3 & 0x80000000) == 0)
  {
    if (a2 < 0)
    {
      *(void *)__n128 result = a2 ^ 0x80000000;
      return result;
    }

    if (!a2) {
      return result;
    }
LABEL_7:
    *(void *)__n128 result = (a2 - 1);
    return result;
  }

  if (a2 < 0)
  {
    *(_DWORD *)__n128 result = a2 ^ 0x80000000;
    *(_DWORD *)(result + 4) = 0;
    *(_BYTE *)(result + 8) = 1;
    return result;
  }

  *(_BYTE *)(result + 8) = 0;
  if (a2) {
    goto LABEL_7;
  }
  return result;
}

void *swift::metadataimpl::BufferValueWitnesses<swift::metadataimpl::ValueWitnesses<anonymous namespace'::ThickFunctionBox>,true,16ul,8ul,(swift::metadataimpl::FixedPacking)1>::initializeBufferWithCopyOfBuffer( void *a1, void *a2, uint64_t a3, char *a4)
{
  *a1 = *a2;
  __int128 v5 = (unint64_t *)a2[1];
  swift_retain(v5, (uint64_t)a2, a3, a4);
  a1[1] = v5;
  return a1;
}

uint64_t swift::metadataimpl::ValueWitnesses<anonymous namespace'::ThickFunctionBox>::destroy(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 8));
}

void *swift::metadataimpl::ValueWitnesses<anonymous namespace'::ThickFunctionBox>::initializeWithCopy( void *a1, void *a2, uint64_t a3, char *a4)
{
  *a1 = *a2;
  __int128 v5 = (unint64_t *)a2[1];
  swift_retain(v5, (uint64_t)a2, a3, a4);
  a1[1] = v5;
  return a1;
}

void *swift::metadataimpl::ValueWitnesses<anonymous namespace'::ThickFunctionBox>::assignWithCopy( void *a1, void *a2, uint64_t a3, char *a4)
{
  *a1 = *a2;
  uint64_t v5 = a1[1];
  __int128 v6 = (unint64_t *)a2[1];
  swift_retain(v6, (uint64_t)a2, a3, a4);
  a1[1] = v6;
  swift_release(v5);
  return a1;
}

void *swift::metadataimpl::ValueWitnesses<anonymous namespace'::ThickFunctionBox>::initializeWithTake( void *result, void *a2)
{
  *__n128 result = *a2;
  result[1] = a2[1];
  return result;
}

void *swift::metadataimpl::ValueWitnesses<anonymous namespace'::ThickFunctionBox>::assignWithTake( void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = a1[1];
  a1[1] = a2[1];
  swift_release(v3);
  return a1;
}

uint64_t swift::metadataimpl::FixedSizeBufferValueWitnesses<swift::metadataimpl::ValueWitnesses<anonymous namespace'::ThickFunctionBox>,true,16ul,8ul,true>::getEnumTagSinglePayload( uint64_t a1, int a2)
{
  if (a2 < 0 && *(_BYTE *)(a1 + 16)) {
    return *(_DWORD *)a1 ^ 0x80000000;
  }
  if (HIDWORD(*(void *)a1)) {
    return 0LL;
  }
  return *(void *)a1 + 1;
}

uint64_t swift::metadataimpl::FixedSizeBufferValueWitnesses<swift::metadataimpl::ValueWitnesses<anonymous namespace'::ThickFunctionBox>,true,16ul,8ul,true>::storeEnumTagSinglePayload( uint64_t result, int a2, int a3)
{
  if ((a3 & 0x80000000) == 0)
  {
    if (a2 < 0)
    {
      *(_DWORD *)__n128 result = a2 ^ 0x80000000;
      *(void *)(result + 4) = 0LL;
      *(_DWORD *)(result + 12) = 0;
      return result;
    }

    if (!a2) {
      return result;
    }
LABEL_7:
    *(void *)__n128 result = (a2 - 1);
    return result;
  }

  if (a2 < 0)
  {
    *(_DWORD *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 4) = 0LL;
    *(_DWORD *)(result + 12) = 0;
    *(_BYTE *)(result + 16) = 1;
    return result;
  }

  *(_BYTE *)(result + 16) = 0;
  if (a2) {
    goto LABEL_7;
  }
  return result;
}

char *swift::metadataimpl::BufferValueWitnesses<swift::metadataimpl::ValueWitnesses<anonymous namespace'::DiffFunctionBox>,true,48ul,8ul,(swift::metadataimpl::FixedPacking)0>::initializeBufferWithCopyOfBuffer( unint64_t **a1, unint64_t **a2, uint64_t a3, char *a4)
{
  uint64_t v4 = *(void *)(a3 - 8);
  uint64_t v5 = *a2;
  *a1 = *a2;
  swift_retain(v5, (uint64_t)a2, a3, a4);
  return (char *)v5 + ((*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
}

uint64_t swift::metadataimpl::ValueWitnesses<anonymous namespace'::DiffFunctionBox>::destroy(uint64_t *a1)
{
  return swift_release(a1[5]);
}

void *swift::metadataimpl::ValueWitnesses<anonymous namespace'::DiffFunctionBox>::initializeWithCopy( void *a1, void *a2, uint64_t a3, char *a4)
{
  *a1 = *a2;
  __int128 v6 = (unint64_t *)a2[1];
  swift_retain(v6, (uint64_t)a2, a3, a4);
  a1[1] = v6;
  a1[2] = a2[2];
  __int128 v7 = (unint64_t *)a2[3];
  swift_retain(v7, v8, v9, v10);
  a1[3] = v7;
  a1[4] = a2[4];
  __int128 v11 = (unint64_t *)a2[5];
  swift_retain(v11, v12, v13, v14);
  a1[5] = v11;
  return a1;
}

void *swift::metadataimpl::ValueWitnesses<anonymous namespace'::DiffFunctionBox>::assignWithCopy( void *a1, void *a2, uint64_t a3, char *a4)
{
  *a1 = *a2;
  uint64_t v6 = a1[1];
  __int128 v7 = (unint64_t *)a2[1];
  swift_retain(v7, (uint64_t)a2, a3, a4);
  a1[1] = v7;
  swift_release(v6);
  a1[2] = a2[2];
  uint64_t v8 = a1[3];
  uint64_t v9 = (unint64_t *)a2[3];
  swift_retain(v9, v10, v11, v12);
  a1[3] = v9;
  swift_release(v8);
  a1[4] = a2[4];
  uint64_t v13 = a1[5];
  __int128 v14 = (unint64_t *)a2[5];
  swift_retain(v14, v15, v16, v17);
  a1[5] = v14;
  swift_release(v13);
  return a1;
}

void *swift::metadataimpl::ValueWitnesses<anonymous namespace'::DiffFunctionBox>::initializeWithTake( void *result, void *a2)
{
  *__n128 result = *a2;
  result[1] = a2[1];
  result[2] = a2[2];
  result[3] = a2[3];
  result[4] = a2[4];
  result[5] = a2[5];
  return result;
}

void *swift::metadataimpl::ValueWitnesses<anonymous namespace'::DiffFunctionBox>::assignWithTake( void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a1[1];
  a1[1] = a2[1];
  swift_release(v4);
  a1[2] = a2[2];
  uint64_t v5 = a1[3];
  a1[3] = a2[3];
  swift_release(v5);
  a1[4] = a2[4];
  uint64_t v6 = a1[5];
  a1[5] = a2[5];
  swift_release(v6);
  return a1;
}

uint64_t swift::metadataimpl::FixedSizeBufferValueWitnesses<swift::metadataimpl::ValueWitnesses<anonymous namespace'::DiffFunctionBox>,true,48ul,8ul,true>::getEnumTagSinglePayload( uint64_t a1, int a2)
{
  if (a2 < 0 && *(_BYTE *)(a1 + 48)) {
    return *(_DWORD *)a1 ^ 0x80000000;
  }
  if (HIDWORD(*(void *)a1)) {
    return 0LL;
  }
  return *(void *)a1 + 1;
}

double swift::metadataimpl::FixedSizeBufferValueWitnesses<swift::metadataimpl::ValueWitnesses<anonymous namespace'::DiffFunctionBox>,true,48ul,8ul,true>::storeEnumTagSinglePayload( uint64_t a1, int a2, int a3)
{
  if ((a3 & 0x80000000) == 0)
  {
    if (a2 < 0)
    {
      *(_DWORD *)a1 = a2 ^ 0x80000000;
      double result = 0.0;
      *(_OWORD *)(a1 + 4) = 0u;
      *(_OWORD *)(a1 + 20) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      return result;
    }

    if (!a2) {
      return result;
    }
LABEL_7:
    *(void *)a1 = (a2 - 1);
    return result;
  }

  if (a2 < 0)
  {
    *(_DWORD *)a1 = a2 ^ 0x80000000;
    double result = 0.0;
    *(_OWORD *)(a1 + 4) = 0u;
    *(_OWORD *)(a1 + 20) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_BYTE *)(a1 + 48) = 1;
    return result;
  }

  *(_BYTE *)(a1 + 48) = 0;
  if (a2) {
    goto LABEL_7;
  }
  return result;
}

void *swift::metadataimpl::BufferValueWitnesses<swift::metadataimpl::ValueWitnesses<anonymous namespace'::TrivialThickFunctionBox>,true,16ul,8ul,(swift::metadataimpl::FixedPacking)1>::initializeBufferWithCopyOfBuffer( void *result, void *a2)
{
  *double result = *a2;
  result[1] = a2[1];
  return result;
}

void *swift::metadataimpl::ValueWitnesses<anonymous namespace'::TrivialThickFunctionBox>::initializeWithCopy( void *result, void *a2)
{
  *double result = *a2;
  result[1] = a2[1];
  return result;
}

void *swift::metadataimpl::ValueWitnesses<anonymous namespace'::TrivialThickFunctionBox>::assignWithCopy( void *result, void *a2)
{
  *double result = *a2;
  result[1] = a2[1];
  return result;
}

void *swift::metadataimpl::ValueWitnesses<anonymous namespace'::TrivialThickFunctionBox>::initializeWithTake( void *result, void *a2)
{
  *double result = *a2;
  result[1] = a2[1];
  return result;
}

void *swift::metadataimpl::ValueWitnesses<anonymous namespace'::TrivialThickFunctionBox>::assignWithTake( void *result, void *a2)
{
  *double result = *a2;
  result[1] = a2[1];
  return result;
}

uint64_t swift::metadataimpl::FixedSizeBufferValueWitnesses<swift::metadataimpl::ValueWitnesses<anonymous namespace'::TrivialThickFunctionBox>,true,16ul,8ul,true>::getEnumTagSinglePayload( uint64_t a1, int a2)
{
  if (a2 < 0 && *(_BYTE *)(a1 + 16)) {
    return *(_DWORD *)a1 ^ 0x80000000;
  }
  if (HIDWORD(*(void *)a1)) {
    return 0LL;
  }
  return *(void *)a1 + 1;
}

uint64_t swift::metadataimpl::FixedSizeBufferValueWitnesses<swift::metadataimpl::ValueWitnesses<anonymous namespace'::TrivialThickFunctionBox>,true,16ul,8ul,true>::storeEnumTagSinglePayload( uint64_t result, int a2, int a3)
{
  if ((a3 & 0x80000000) == 0)
  {
    if (a2 < 0)
    {
      *(_DWORD *)double result = a2 ^ 0x80000000;
      *(void *)(result + 4) = 0LL;
      *(_DWORD *)(result + 12) = 0;
      return result;
    }

    if (!a2) {
      return result;
    }
LABEL_7:
    *(void *)double result = (a2 - 1);
    return result;
  }

  if (a2 < 0)
  {
    *(_DWORD *)double result = a2 ^ 0x80000000;
    *(void *)(result + 4) = 0LL;
    *(_DWORD *)(result + 12) = 0;
    *(_BYTE *)(result + 16) = 1;
    return result;
  }

  *(_BYTE *)(result + 16) = 0;
  if (a2) {
    goto LABEL_7;
  }
  return result;
}

void *swift::metadataimpl::BufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::FunctionPointerBox>,true,8ul,8ul,(swift::metadataimpl::FixedPacking)1>::initializeBufferWithCopyOfBuffer( void *result, void *a2)
{
  *double result = *a2;
  return result;
}

void *swift::metadataimpl::ValueWitnesses<swift::metadataimpl::FunctionPointerBox>::initializeWithCopy( void *result, void *a2)
{
  *double result = *a2;
  return result;
}

void *swift::metadataimpl::ValueWitnesses<swift::metadataimpl::FunctionPointerBox>::assignWithCopy( void *result, void *a2)
{
  *double result = *a2;
  return result;
}

void *swift::metadataimpl::ValueWitnesses<swift::metadataimpl::FunctionPointerBox>::initializeWithTake( void *result, void *a2)
{
  *double result = *a2;
  return result;
}

void *swift::metadataimpl::ValueWitnesses<swift::metadataimpl::FunctionPointerBox>::assignWithTake( void *result, void *a2)
{
  *double result = *a2;
  return result;
}

uint64_t swift::metadataimpl::FixedSizeBufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::FunctionPointerBox>,true,8ul,8ul,true>::getEnumTagSinglePayload( uint64_t a1, int a2)
{
  if (a2 < 0 && *(_BYTE *)(a1 + 8)) {
    return *(_DWORD *)a1 ^ 0x80000000;
  }
  if (HIDWORD(*(void *)a1)) {
    return 0LL;
  }
  return *(void *)a1 + 1;
}

uint64_t swift::metadataimpl::FixedSizeBufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::FunctionPointerBox>,true,8ul,8ul,true>::storeEnumTagSinglePayload( uint64_t result, int a2, int a3)
{
  if ((a3 & 0x80000000) == 0)
  {
    if (a2 < 0)
    {
      *(void *)double result = a2 ^ 0x80000000;
      return result;
    }

    if (!a2) {
      return result;
    }
LABEL_7:
    *(void *)double result = (a2 - 1);
    return result;
  }

  if (a2 < 0)
  {
    *(_DWORD *)double result = a2 ^ 0x80000000;
    *(_DWORD *)(result + 4) = 0;
    *(_BYTE *)(result + 8) = 1;
    return result;
  }

  *(_BYTE *)(result + 8) = 0;
  if (a2) {
    goto LABEL_7;
  }
  return result;
}

uint64_t swift::metadataimpl::FixedSizeBufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::AggregateBox<>>,true,0ul,1ul,false>::getEnumTagSinglePayload( unsigned int *a1, int a2)
{
  if (a2)
  {
    unsigned int v2 = a2 + 1;
    if ((a2 + 1) >= 2)
    {
      if (v2 >= 0x100)
      {
        if (v2 >= 0x10000)
        {
          uint64_t result = *a1;
          if ((_DWORD)result) {
            return result;
          }
        }

        else
        {
          uint64_t result = *(unsigned __int16 *)a1;
          if ((_DWORD)result) {
            return result;
          }
        }
      }

      else
      {
        uint64_t result = *(unsigned __int8 *)a1;
        if ((_DWORD)result) {
          return result;
        }
      }
    }
  }

  return 0LL;
}

void swift::metadataimpl::FixedSizeBufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::AggregateBox<>>,true,0ul,1ul,false>::storeEnumTagSinglePayload( _BYTE *a1, int a2, int a3)
{
  if (a3)
  {
    unsigned int v3 = a3 + 1;
    if ((a3 + 1) >= 2)
    {
      if (v3 >= 0x10000) {
        unsigned int v4 = 4;
      }
      else {
        unsigned int v4 = 2;
      }
      if (v3 < 0x100) {
        uint64_t v5 = 1LL;
      }
      else {
        uint64_t v5 = v4;
      }
      if (a2)
      {
        switch((int)v5)
        {
          case 1:
            *a1 = a2;
            break;
          case 2:
            *(_WORD *)a1 = a2;
            break;
          case 3:
            *(_WORD *)a1 = a2;
            a1[2] = BYTE2(a2);
            break;
          case 4:
            *(_DWORD *)a1 = a2;
            break;
          default:
            *(_DWORD *)a1 = a2;
            bzero(a1 + 4, v5 - 4);
            break;
        }
      }

      else
      {
        switch(v5)
        {
          case 1LL:
            *a1 = 0;
            break;
          case 2LL:
            *(_WORD *)a1 = 0;
            break;
          case 3LL:
            a1[2] = 0;
            *(_WORD *)a1 = 0;
            break;
          case 4LL:
            *(_DWORD *)a1 = 0;
            break;
          default:
            *(_DWORD *)a1 = 0;
            bzero(a1 + 4, v5 - 4);
            break;
        }
      }
    }
  }

uint64_t swift::libPrespecializedImageLoaded(swift *this)
{
  uint64_t result = dyld_shared_cache_some_image_overridden();
  if ((_DWORD)result) {
    atomic_store(1u, disablePrespecializedMetadata);
  }
  return result;
}

const void *swift::getLibPrespecializedMetadata(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1895F8858](a1);
  if ((disableForValidation & 1) != 0) {
    return 0LL;
  }
  unsigned __int8 v3 = atomic_load(disablePrespecializedMetadata);
  if ((v3 & 1) != 0) {
    return 0LL;
  }
  uint64_t v4 = v2;
  uint64_t v5 = (uint64_t **)v1;
  if (qword_18C476A50 != -1) {
    dispatch_once_f( &qword_18C476A50,  &LibPrespecialized,  (dispatch_function_t)swift::Lazy<LibPrespecializedState>::defaultInitCallback);
  }
  if (dword_18C476A28 == 2)
  {
    if ((*(_DWORD *)v5 & 0x80) == 0) {
      return 0LL;
    }
    pointer_hash_table_entry = 0LL;
    switch(*(_DWORD *)v5 & 0x1F)
    {
      case 1:
        uint64_t v8 = v5 + 1;
        goto LABEL_65;
      case 2:
      case 4:
        uint64_t v8 = (uint64_t **)((char *)v5 + 4);
        goto LABEL_65;
      case 0x10:
        uint64_t v8 = v5 + 6;
        goto LABEL_65;
      case 0x11:
      case 0x12:
        uint64_t v8 = v5 + 4;
LABEL_65:
        __int128 v27 = *(void **)(LibPrespecialized + 24);
        if (!*v27) {
          goto LABEL_74;
        }
        uint64_t v28 = 0LL;
        uint64_t v29 = *((unsigned __int16 *)v8 + 4);
        break;
      default:
        return pointer_hash_table_entry;
    }

    while (1)
    {
      __int128 v30 = (void *)v27[2 * v28 + 1];
LABEL_67:
      if (++v28 == *v27)
      {
LABEL_74:
        if (prespecializedLoggingEnabled) {
          fprintf( (FILE *)*MEMORY[0x1895F89D0],  "Prespecializations library: Looking up description %p in debug table, no entry found.\n");
        }
        return 0LL;
      }
    }

    __int128 v31 = v30 + 2;
    uint64_t v32 = v29;
    uint64_t v33 = (uint64_t *)v4;
    while (v32)
    {
      uint64_t v35 = *v31++;
      uint64_t v34 = v35;
      uint64_t v36 = *v33++;
      --v32;
      if (v34 != v36) {
        goto LABEL_67;
      }
    }

    if (prespecializedLoggingEnabled)
    {
      unint64_t v42 = v5;
      uint64_t v41 = v28;
      fprintf( (FILE *)*MEMORY[0x1895F89D0],  "Prespecializations library: Looking up description %p in debug table, found %p.\n",  v42,  (const void *)v27[2 * v28 + 2]);
      uint64_t v28 = v41;
    }

    return (const void *)v27[2 * v28 + 2];
  }

  else
  {
    if (dword_18C476A28 != 1)
    {
      if (!dword_18C476A28 && (*(_DWORD *)v5 & 0x80) != 0)
      {
        pointer_hash_table_entry = 0LL;
        switch(*(_DWORD *)v5 & 0x1F)
        {
          case 1:
            __int128 v7 = v5 + 1;
            goto LABEL_20;
          case 2:
          case 4:
            __int128 v7 = (uint64_t **)((char *)v5 + 4);
            goto LABEL_20;
          case 0x10:
            __int128 v7 = v5 + 6;
            goto LABEL_20;
          case 0x11:
          case 0x12:
            __int128 v7 = v5 + 4;
LABEL_20:
            uint64_t v9 = *((unsigned __int16 *)v7 + 2);
            if (!*((_WORD *)v7 + 2)) {
              goto LABEL_24;
            }
            uint64_t v10 = (char *)v7 + 12;
            break;
          default:
            return pointer_hash_table_entry;
        }

        do
        {
          if ((*v10 & 0x3F) != 0) {
            return 0LL;
          }
          ++v10;
          --v9;
        }

        while (v9);
LABEL_24:
        BOOL v12 = qword_18C476A30 <= (unint64_t)LibPrespecialized
           && unk_18C476A38 > (unint64_t)LibPrespecialized;
        if (v12)
        {
          BOOL v13 = qword_18C476A30 <= (unint64_t)v5 && unk_18C476A38 > (unint64_t)v5;
          if (!v13
            || (qword_18C476A40 <= (unint64_t)v5
              ? (BOOL v14 = *(void *)algn_18C476A48 > (unint64_t)v5)
              : (BOOL v14 = 0),
                v14))
          {
            if (prespecializedLoggingEnabled) {
              fprintf( (FILE *)*MEMORY[0x1895F89D0],  "Prespecializations library: Rejecting descriptor %p, not in the shared cache\n");
            }
            return 0LL;
          }
        }

        uint64_t v15 = *((unsigned __int16 *)v7 + 4);
        if (*((_WORD *)v7 + 4))
        {
          uint64_t v16 = 0LL;
          while (1)
          {
            if (v12)
            {
              unint64_t v17 = *(void *)(v4 + 8 * v16);
              if (qword_18C476A30 > v17 || unk_18C476A38 <= v17) {
                break;
              }
              if (qword_18C476A40 <= v17 && *(void *)algn_18C476A48 > v17) {
                break;
              }
            }

            if (v15 == ++v16) {
              goto LABEL_56;
            }
          }

          if (prespecializedLoggingEnabled) {
            fprintf( (FILE *)*MEMORY[0x1895F89D0],  "Prespecializations library: Rejecting argument %u %p to descriptor %p, not in the shared cache\n");
          }
          return 0LL;
        }

void _swift_validatePrespecializedMetadata(_DWORD *a1, _DWORD *a2)
{
  if (a1) {
    *a1 = 0;
  }
  if (a2) {
    *a2 = 0;
  }
  if (qword_18C476A60 != -1) {
    dispatch_once_f( &qword_18C476A60,  &swift::getLibPrespecializedData(void)::$_0::operator() const(void)::TheLazy,  (dispatch_function_t)swift::getLibPrespecializedData(void)::$_0::operator() const(void)::{lambda(void *)#1}::__invoke);
  }
  if (swift::getLibPrespecializedData(void)::$_0::operator() const(void)::TheLazy)
  {
    disableForValidation = 1;
    uint64_t v4 = *(uint64_t **)(swift::getLibPrespecializedData(void)::$_0::operator() const(void)::TheLazy + 8);
    uint64_t v5 = *v4;
    if (*v4)
    {
      uint64_t v6 = v4 + 2;
      __int128 v7 = (FILE **)MEMORY[0x1895F89D0];
      while (1)
      {
        uint64_t v8 = (char *)*(v6 - 1);
        if (v8)
        {
          if (*v6) {
            break;
          }
        }

_DWORD *swift::getLibPrespecializedData(void)::$_0::operator() const(void)::{lambda(void *)#1}::__invoke( swift::runtime::environment *a1)
{
  uint64_t result = findLibPrespecialized(a1);
  *(void *)a1 = result;
  return result;
}

_DWORD *findLibPrespecialized(swift::runtime::environment *a1)
{
  if (swift::runtime::environment::initializeToken != -1) {
    dispatch_once_f( &swift::runtime::environment::initializeToken,  0LL,  (dispatch_function_t)swift::runtime::environment::initialize);
  }
  if (!swift::runtime::environment::SWIFT_DEBUG_ENABLE_LIB_PRESPECIALIZED_variable)
  {
    if (prespecializedLoggingEnabled)
    {
      uint64_t v4 = (FILE *)*MEMORY[0x1895F89D0];
      swift::runtime::environment::SWIFT_DEBUG_ENABLE_LIB_PRESPECIALIZED(a1);
      fprintf(v4, "Prespecializations library: Disabling, SWIFT_DEBUG_ENABLE_LIB_PRESPECIALIZED = %d\n");
    }

    return 0LL;
  }

  if (swift::runtime::environment::SWIFT_DEBUG_LIB_PRESPECIALIZED_PATH_variable
    && *swift::runtime::environment::SWIFT_DEBUG_LIB_PRESPECIALIZED_PATH_variable)
  {
    uint64_t v1 = dlopen(swift::runtime::environment::SWIFT_DEBUG_LIB_PRESPECIALIZED_PATH_variable, 17);
    if (!v1)
    {
      uint64_t v11 = dlerror();
      swift::warning(0LL, "Failed to load prespecializations library: %s\n", v12, v13, v11);
      return 0LL;
    }

    swift_prespecialized_data = dlsym(v1, "_swift_prespecializationsData");
    if (prespecializedLoggingEnabled)
    {
      fprintf( (FILE *)*MEMORY[0x1895F89D0],  "Prespecializations library: Loaded custom library from %s, found dataPtr %p\n");
      goto LABEL_58;
    }
  }

  else
  {
    if ((dyld_shared_cache_some_image_overridden() & 1) != 0)
    {
      if (prespecializedLoggingEnabled)
      {
        unsigned __int8 v3 = (FILE *)*MEMORY[0x1895F89D0];
        dyld_shared_cache_some_image_overridden();
        fprintf( v3,  "Prespecializations library: Not calling _dyld_get_swift_prespecialized_data dyld_shared_cache_some_image_overridden = %d\n");
      }

      return 0LL;
    }

    swift_prespecialized_data = (_DWORD *)_dyld_get_swift_prespecialized_data();
    if (prespecializedLoggingEnabled)
    {
      fprintf( (FILE *)*MEMORY[0x1895F89D0],  "Prespecializations library: Got dataPtr %p from _dyld_get_swift_prespecialized_data\n");
LABEL_58:
      if (!swift_prespecialized_data) {
        return swift_prespecialized_data;
      }
      goto LABEL_16;
    }
  }

  if (!swift_prespecialized_data) {
    return swift_prespecialized_data;
  }
LABEL_16:
  if (*swift_prespecialized_data != 1)
  {
    if (prespecializedLoggingEnabled) {
      fprintf( (FILE *)*MEMORY[0x1895F89D0],  "Prespecializations library: Unknown major version %u, disabling\n",  *swift_prespecialized_data);
    }
    return 0LL;
  }

  uint64_t v5 = (const char **)MEMORY[0x1895F8960];
  if (*MEMORY[0x1895F8960])
  {
    if (swift::runtime::environment::initializeToken != -1) {
      dispatch_once_f( &swift::runtime::environment::initializeToken,  0LL,  (dispatch_function_t)swift::runtime::environment::initialize);
    }
    uint64_t v6 = (const char *)swift::runtime::environment::SWIFT_DEBUG_LIB_PRESPECIALIZED_ENABLED_PROCESSES_variable;
    if (swift::runtime::environment::SWIFT_DEBUG_LIB_PRESPECIALIZED_ENABLED_PROCESSES_variable
      && *swift::runtime::environment::SWIFT_DEBUG_LIB_PRESPECIALIZED_ENABLED_PROCESSES_variable)
    {
      __int128 v7 = *v5;
      size_t v8 = strlen(*v5);
      uint64_t v9 = strchr(swift::runtime::environment::SWIFT_DEBUG_LIB_PRESPECIALIZED_ENABLED_PROCESSES_variable, 58);
      if (v9)
      {
        size_t v10 = v9;
        while (v10 - v6 != v8 || strncmp(v6, v7, v8))
        {
          uint64_t v6 = v10 + 1;
          size_t v10 = strchr(v10 + 1, 58);
          if (!v10) {
            goto LABEL_33;
          }
        }

        goto LABEL_51;
      }

uint64_t swift::runtime::environment::SWIFT_DEBUG_ENABLE_LIB_PRESPECIALIZED( swift::runtime::environment *this)
{
  if (swift::runtime::environment::initializeToken != -1) {
    dispatch_once_f( &swift::runtime::environment::initializeToken,  0LL,  (dispatch_function_t)swift::runtime::environment::initialize);
  }
  return swift::runtime::environment::SWIFT_DEBUG_ENABLE_LIB_PRESPECIALIZED_variable;
}

void *swift::PrebuiltStringMap<char const*,swift::TargetMetadata<swift::InProcess> *,&swift::LibPrespecializedData<swift::InProcess>::stringIsNull>::find( unint64_t *a1, char *__s2, size_t __n)
{
  unint64_t v5 = 0xC6A4A7935BD1E995LL * __n;
  size_t v6 = __n & 0xFFFFFFFFFFFFFFF8LL;
  if ((__n & 0xFFFFFFFFFFFFFFF8LL) != 0)
  {
    __int128 v7 = (unsigned __int8 *)&__s2[v6];
    char v8 = __n;
    uint64_t v9 = __s2;
    do
    {
      uint64_t v10 = *(void *)v9;
      v9 += 8;
      v8 -= 8;
      unint64_t v5 = 0xC6A4A7935BD1E995LL
         * ((0xC6A4A7935BD1E995LL * ((0xC6A4A7935BD1E995LL * v10) ^ ((0xC6A4A7935BD1E995LL * v10) >> 47))) ^ v5);
      v6 -= 8LL;
    }

    while (v6);
  }

  else
  {
    __int128 v7 = (unsigned __int8 *)__s2;
    char v8 = __n;
  }

  switch(v8 & 7)
  {
    case 1:
      goto LABEL_13;
    case 2:
      goto LABEL_12;
    case 3:
      goto LABEL_11;
    case 4:
      goto LABEL_10;
    case 5:
      goto LABEL_9;
    case 6:
      goto LABEL_8;
    case 7:
      v5 ^= (unint64_t)v7[6] << 48;
LABEL_8:
      v5 ^= (unint64_t)v7[5] << 40;
LABEL_9:
      v5 ^= (unint64_t)v7[4] << 32;
LABEL_10:
      v5 ^= (unint64_t)v7[3] << 24;
LABEL_11:
      v5 ^= (unint64_t)v7[2] << 16;
LABEL_12:
      v5 ^= (unint64_t)v7[1] << 8;
LABEL_13:
      v5 ^= *v7;
      break;
    default:
      break;
  }

  unint64_t v11 = 0LL;
  unint64_t v12 = 0xC6A4A7935BD1E995LL * ((0xC6A4A7935BD1E995LL * v5) ^ ((0xC6A4A7935BD1E995LL * v5) >> 47));
  BOOL v13 = a1 + 1;
  unint64_t v14 = *a1;
  unint64_t v15 = (v12 ^ (v12 >> 47)) % *a1;
  do
  {
    uint64_t v16 = v13[2 * v15];
    if (!v16) {
      break;
    }
    if (v15 + 1 < v14) {
      ++v15;
    }
    else {
      unint64_t v15 = 0LL;
    }
    ++v11;
  }

  while (v11 <= v14);
  return 0LL;
}

uint64_t swift::Demangle::__runtime::StackAllocatedDemangler<4096ul>::~StackAllocatedDemangler(uint64_t a1)
{
  *(void *)a1 = off_189B8E500;
  uint64_t v2 = (void *)(a1 + 544);
  unsigned __int8 v3 = *(void **)(a1 + 568);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    unsigned __int8 v3 = v2;
  }

  else
  {
    if (!v3) {
      goto LABEL_6;
    }
    uint64_t v4 = 5LL;
  }

  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  *(void *)a1 = off_189B8E4D8;
  swift::Demangle::__runtime::NodeFactory::freeSlabs(*(void **)(a1 + 24));
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5) {
    *(_BYTE *)(v5 + 48) = 0;
  }
  return a1;
}

void swift::Demangle::__runtime::StackAllocatedDemangler<4096ul>::~StackAllocatedDemangler(void *a1)
{
  *a1 = off_189B8E500;
  uint64_t v2 = a1 + 68;
  unsigned __int8 v3 = (void *)a1[71];
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    unsigned __int8 v3 = v2;
  }

  else
  {
    if (!v3) {
      goto LABEL_6;
    }
    uint64_t v4 = 5LL;
  }

  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  *a1 = off_189B8E4D8;
  swift::Demangle::__runtime::NodeFactory::freeSlabs((void *)a1[3]);
  uint64_t v5 = a1[5];
  if (v5) {
    *(_BYTE *)(v5 + 48) = 0;
  }
  operator delete(a1);
}

void __swift::__runtime::llvm::function_ref<swift::Demangle::__runtime::Node * ()(swift::Demangle::__runtime::SymbolicReferenceKind,void const*)>::callback_fn<getMetadataFromNameKeyedMap(LibPrespecializedState const&,swift::TargetTypeContextDescriptor<swift::InProcess> const*,void const* const*)::$_0>( uint64_t a1, uint64_t a2, const char *a3, char *a4)
{
}

void LibPrespecializedState::LibPrespecializedState(LibPrespecializedState *this)
{
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  if (swift::runtime::environment::initializeToken != -1) {
    dispatch_once_f( &swift::runtime::environment::initializeToken,  0LL,  (dispatch_function_t)swift::runtime::environment::initialize);
  }
  prespecializedLoggingEnabled = swift::runtime::environment::SWIFT_DEBUG_ENABLE_LIB_PRESPECIALIZED_LOGGING_variable;
  *(void *)this = findLibPrespecialized(this);
  shared_cache_range = (swift::MetadataAllocator *)_dyld_get_shared_cache_range();
  *((void *)this + 2) = shared_cache_range;
  *((void *)this + 3) = (char *)shared_cache_range + v5;
  unsigned __int8 v3 = (char *)swift::MetadataAllocator::InitialPoolLocation(shared_cache_range);
  *((void *)this + 4) = v3;
  *((void *)this + 5) = &v3[v4];
  *((_DWORD *)this + 2) = LibPrespecializedState::computeMapConfiguration((uint64_t)this, *(void *)this);
}

uint64_t LibPrespecializedState::computeMapConfiguration(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 3LL;
  }
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned int v5 = *(_DWORD *)(a2 + 4);
  if (v5 >= 3)
  {
    unint64_t v6 = *(void *)(a2 + 24);
    if (!(v4 | v6)) {
      goto LABEL_4;
    }
  }

  else
  {
    unint64_t v6 = 0LL;
    if (!v4)
    {
LABEL_4:
      if (prespecializedLoggingEnabled) {
        fprintf( (FILE *)*MEMORY[0x1895F89D0],  "Prespecializations library: No prespecializations map available from data at %p, disabling.\n",  (const void *)a2);
      }
      return 3LL;
    }
  }

  if (!v6)
  {
    if (prespecializedLoggingEnabled) {
      fprintf( (FILE *)*MEMORY[0x1895F89D0],  "Prespecializations library: Data at %p only contains name-keyed map.\n",  (const void *)a2);
    }
    return 0LL;
  }

  if (v4)
  {
    if (v5 >= 3) {
      uint64_t v8 = *(void *)(a2 + 32) & 1LL;
    }
    else {
      uint64_t v8 = 0LL;
    }
    else {
      BOOL v9 = v8 != 0;
    }
    if (prespecializedLoggingEnabled)
    {
      uint64_t v10 = "name";
      if (v9) {
        uint64_t v10 = "pointer";
      }
      unint64_t v12 = (const void *)a2;
      BOOL v11 = v9;
      fprintf( (FILE *)*MEMORY[0x1895F89D0],  "Prespecializations library: Data at %p contains both maps. Using %s keyed map.\n",  v12,  v10);
      if (v11) {
        goto LABEL_24;
      }
    }

    else if (v9)
    {
LABEL_24:
      if (*(void *)(a1 + 16) > v6) {
        return 2LL;
      }
      if (*(void *)(a1 + 24) > v6) {
        return 1LL;
      }
      return 2LL;
    }

    return 0LL;
  }

  if (prespecializedLoggingEnabled) {
    fprintf( (FILE *)*MEMORY[0x1895F89D0],  "Prespecializations library: Data at %p only contains pointer-keyed map.\n",  (const void *)a2);
  }
  return 1LL;
}

char *_swift_relocateClassMetadata(unsigned int *a1, int *a2, const char *a3, char *a4)
{
  if ((*a1 & 0x20000000) != 0)
  {
    uint64_t v8 = (int)a1[6];
    if ((_DWORD)v8) {
      BOOL v9 = (unint64_t *)((char *)a1 + v8 + 24);
    }
    else {
      BOOL v9 = 0LL;
    }
    uint64_t v10 = atomic_load(v9);
    if (v10)
    {
      unint64_t v11 = v9[1];
    }

    else
    {
      unint64_t v11 = computeMetadataBoundsFromSuperclass(a1, (uint64_t)v9, a3, a4);
      uint64_t v10 = v12;
    }
  }

  else
  {
    if ((*a1 & 0x10000000) != 0)
    {
      unsigned int v6 = 0;
      __int128 v7 = a1 + 6;
    }

    else
    {
      unsigned int v6 = a1[7];
      __int128 v7 = a1 + 8;
    }

    uint64_t v10 = 8LL * (int)(v6 - *v7);
    unint64_t v11 = *((void *)a1 + 3);
  }

  size_t v13 = 8 * (v11 + HIDWORD(v11));
  int v14 = 8 * v11;
  unint64_t v15 = (char *)swift::MetadataAllocator::Allocate( (swift::MetadataAllocator *)&getResilientMetadataAllocator(void)::allocator,  v13,  (const char *)8,  a4)
      + 8 * v11;
  bzero(&v15[v10], 8LL * a1[8]);
  uint64_t v16 = a2[1];
  size_t v17 = (char *)a2 + v16 + 4;
  int v18 = a2[3];
  if (!(_DWORD)v16) {
    size_t v17 = 0LL;
  }
  char v19 = value witness table for Builtin.NativeObject;
  if ((v18 & 2) == 0) {
    char v19 = (uint64_t (**)())&value witness table for Builtin.UnknownObject;
  }
  *((void *)v15 - 2) = v17;
  *((void *)v15 - 1) = v19;
  uint64_t v20 = a2[5];
  __int128 v21 = (char *)a2 + v20 + 20;
  if (!(_DWORD)v20) {
    __int128 v21 = 0LL;
  }
  *(void *)unint64_t v15 = v21;
  *((void *)v15 + 1) = 0LL;
  *((void *)v15 + 2) = MEMORY[0x1896163A0];
  *((void *)v15 + 3) = 0LL;
  uint64_t v22 = a2[4];
  uint64_t v23 = ((unint64_t)a2 + v22 + 16) | 2;
  if (!(_DWORD)v22) {
    uint64_t v23 = 2LL;
  }
  *((void *)v15 + 4) = v23;
  *((_DWORD *)v15 + 10) = v18;
  *(void *)(v15 + 44) = 0LL;
  *((_DWORD *)v15 + 13) = 0;
  *((_DWORD *)v15 + 14) = v13;
  *((_DWORD *)v15 + 15) = v14;
  uint64_t v24 = a2[2];
  if ((_DWORD)v24) {
    unsigned __int16 v25 = (char *)a2 + v24 + 8;
  }
  else {
    unsigned __int16 v25 = 0LL;
  }
  *((void *)v15 + 8) = a1;
  *((void *)v15 + 9) = v25;
  return v15;
}

uint64_t swift_allocateMetadataPack(uint64_t result, unint64_t a2)
{
  if ((result & 1) == 0)
  {
    uint64_t v53 = result;
    unint64_t v54 = a2;
    uint64_t v2 = (void *)atomic_load((unint64_t *)&qword_18C486B80);
    if (v2 && v54 == *v2)
    {
      if (!v54) {
        return (unint64_t)(v2 + 1) | 1;
      }
      uint64_t v3 = 0LL;
      unsigned int v4 = 1;
      while (*(void *)(v53 + 8 * v3) == v2[v3 + 1])
      {
        uint64_t v3 = v4++;
        if (v54 == v3) {
          return (unint64_t)(v2 + 1) | 1;
        }
      }
    }

    do
      unsigned int v5 = __ldaxr((unsigned int *)&MetadataPacks);
    while (__stxr(v5 + 1, (unsigned int *)&MetadataPacks));
    do
    {
      unint64_t v6 = atomic_load(&qword_18C486B60);
      unint64_t v7 = atomic_load((unint64_t *)&qword_18C486B68);
      unsigned int v8 = atomic_load((unsigned int *)&dword_18C486B5C);
      unint64_t v9 = atomic_load(&qword_18C486B60);
    }

    while (v6 != v9);
    if (v6) {
      BOOL v10 = v7 == 0;
    }
    else {
      BOOL v10 = 1;
    }
    if (!v10 && v8 != 0)
    {
      if (v12)
      {
        qword_18C486B80 = *v12;
        uint64_t v2 = (void *)*v12;
        do
          unsigned int v13 = __ldxr((unsigned int *)&MetadataPacks);
        while (__stlxr(v13 - 1, (unsigned int *)&MetadataPacks));
        return (unint64_t)(v2 + 1) | 1;
      }
    }

    do
      unsigned int v14 = __ldxr((unsigned int *)&MetadataPacks);
    while (__stlxr(v14 - 1, (unsigned int *)&MetadataPacks));
    uint64_t v15 = v53;
    unint64_t v16 = v54;
    v55[0] = v53;
    v55[1] = v54;
    os_unfair_lock_lock((os_unfair_lock_t)&unk_18C486B70);
    char v17 = qword_18C486B68;
    BOOL v18 = (qword_18C486B68 & 3) == 0;
    if ((qword_18C486B68 & 0xFFFFFFFFFFFFFFFCLL) == 0) {
      BOOL v18 = 1;
    }
    BOOL v49 = v18;
    unint64_t v50 = qword_18C486B68 & 0xFFFFFFFFFFFFFFFCLL;
    if (v18) {
      int v19 = 4;
    }
    else {
      int v19 = *(unsigned __int8 *)(qword_18C486B68 & 0xFFFFFFFFFFFFFFFCLL);
    }
    unint64_t v20 = dword_18C486B5C;
    __int128 v21 = (_DWORD *)qword_18C486B60;
    if (v22)
    {
      uint64_t v2 = *v22;
      __dmb(0xBu);
      if (!MetadataPacks)
      {
        uint64_t v24 = (void **)qword_18C486B78;
        if (qword_18C486B78)
        {
          do
          {
            unsigned __int16 v25 = (void **)*v24;
            free(v24[1]);
            free(v24);
            uint64_t v24 = v25;
          }

          while (v25);
        }

        qword_18C486B78 = 0LL;
      }

      os_unfair_lock_unlock((os_unfair_lock_t)&unk_18C486B70);
      qword_18C486B80 = (uint64_t)v2;
      return (unint64_t)(v2 + 1) | 1;
    }

    char v51 = v17;
    __src = v21 + 2;
    unsigned int v48 = v20 + 1;
    if ((1LL << v19) / ((1LL << v19) - (unint64_t)(v20 + 1)) < 4)
    {
      char v52 = v17;
      __int128 v30 = v21;
      if (!v21) {
        goto LABEL_53;
      }
    }

    else
    {
      unsigned int v26 = (v19 + 1);
      if (v26 >= 0x11) {
        unsigned int v27 = 4;
      }
      else {
        unsigned int v27 = 2;
      }
      if (v26 < 9) {
        size_t v28 = 1LL;
      }
      else {
        size_t v28 = v27;
      }
      unint64_t v29 = (unint64_t)calloc(2LL << v19, v28);
      if (!v29) {
        swift::hashable_support::findHashableBaseTypeOfHashableType();
      }
      if ((_DWORD)v28 != 1)
      {
        if ((_DWORD)v28 == 4) {
          size_t v28 = 3LL;
        }
        else {
          size_t v28 = 2LL;
        }
      }

      unint64_t v31 = v28 | v29;
      *(_BYTE *)unint64_t v29 = v19 + 1;
      char v52 = v28 | v29;
      if (v19) {
        __asm { BR              X8 }
      }

      atomic_store(v31, (unint64_t *)&qword_18C486B68);
      if (!v49)
      {
        uint64_t v32 = malloc(0x10uLL);
        *uint64_t v32 = qword_18C486B78;
        v32[1] = v50;
        qword_18C486B78 = (uint64_t)v32;
      }

      __int128 v30 = v21;
      if (!v21) {
        goto LABEL_53;
      }
    }

    unint64_t v33 = (unint64_t)v30;
    if (v20 < *v30)
    {
LABEL_59:
      LOWORD(v56) = 24;
      size_t v39 = swift::MetadataAllocator::Allocate( (swift::MetadataAllocator *)&v56,  8LL * v16 + 8,  (const char *)8,  v23);
      *(void *)size_t v39 = v16;
      if (!v16) {
        goto LABEL_67;
      }
      if (v16 < 0xE) {
        goto LABEL_64;
      }
      int v40 = 0;
      unint64_t v41 = 0LL;
      if (!(_DWORD)v16 || (v16 - 1) >> 32) {
        goto LABEL_65;
      }
      if ((unint64_t)v39 - v15 + 8 >= 0x20)
      {
        unint64_t v41 = v16 & 0xFFFFFFFFFFFFFFFCLL;
        int v40 = v16 & 0xFFFFFFFC;
        unsigned int v43 = (__int128 *)(v15 + 16);
        BOOL v44 = (_OWORD *)((char *)v39 + 24);
        unint64_t v45 = v16 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          __int128 v46 = *v43;
          *(v44 - 1) = *(v43 - 1);
          _OWORD *v44 = v46;
          v43 += 2;
          v44 += 2;
          v45 -= 4LL;
        }

        while (v45);
        if (v16 == v41)
        {
LABEL_67:
          *(void *)(v33 + 8 + 8 * v20) = v39;
          atomic_store(v48, (unsigned int *)&dword_18C486B5C);
          __asm { BR              X11 }
        }
      }

      else
      {
LABEL_64:
        unint64_t v41 = 0LL;
        int v40 = 0;
      }

uint64_t swift_allocateWitnessTablePack(uint64_t result, unint64_t a2)
{
  if ((result & 1) == 0)
  {
    uint64_t v53 = result;
    unint64_t v54 = a2;
    uint64_t v2 = (void *)atomic_load((unint64_t *)&qword_18C486BB0);
    if (v2 && v54 == *v2)
    {
      if (!v54) {
        return (unint64_t)(v2 + 1) | 1;
      }
      uint64_t v3 = 0LL;
      unsigned int v4 = 1;
      while (*(void *)(v53 + 8 * v3) == v2[v3 + 1])
      {
        uint64_t v3 = v4++;
        if (v54 == v3) {
          return (unint64_t)(v2 + 1) | 1;
        }
      }
    }

    do
      unsigned int v5 = __ldaxr((unsigned int *)&WitnessTablePacks);
    while (__stxr(v5 + 1, (unsigned int *)&WitnessTablePacks));
    do
    {
      unint64_t v6 = atomic_load(&qword_18C486B90);
      unint64_t v7 = atomic_load((unint64_t *)&qword_18C486B98);
      unsigned int v8 = atomic_load((unsigned int *)&dword_18C486B8C);
      unint64_t v9 = atomic_load(&qword_18C486B90);
    }

    while (v6 != v9);
    if (v6) {
      BOOL v10 = v7 == 0;
    }
    else {
      BOOL v10 = 1;
    }
    if (!v10 && v8 != 0)
    {
      if (v12)
      {
        qword_18C486BB0 = *v12;
        uint64_t v2 = (void *)*v12;
        do
          unsigned int v13 = __ldxr((unsigned int *)&WitnessTablePacks);
        while (__stlxr(v13 - 1, (unsigned int *)&WitnessTablePacks));
        return (unint64_t)(v2 + 1) | 1;
      }
    }

    do
      unsigned int v14 = __ldxr((unsigned int *)&WitnessTablePacks);
    while (__stlxr(v14 - 1, (unsigned int *)&WitnessTablePacks));
    uint64_t v15 = v53;
    unint64_t v16 = v54;
    v55[0] = v53;
    v55[1] = v54;
    os_unfair_lock_lock((os_unfair_lock_t)&unk_18C486BA0);
    char v17 = qword_18C486B98;
    BOOL v18 = (qword_18C486B98 & 3) == 0;
    if ((qword_18C486B98 & 0xFFFFFFFFFFFFFFFCLL) == 0) {
      BOOL v18 = 1;
    }
    BOOL v49 = v18;
    unint64_t v50 = qword_18C486B98 & 0xFFFFFFFFFFFFFFFCLL;
    if (v18) {
      int v19 = 4;
    }
    else {
      int v19 = *(unsigned __int8 *)(qword_18C486B98 & 0xFFFFFFFFFFFFFFFCLL);
    }
    unint64_t v20 = dword_18C486B8C;
    __int128 v21 = (_DWORD *)qword_18C486B90;
    if (v22)
    {
      uint64_t v2 = *v22;
      __dmb(0xBu);
      if (!WitnessTablePacks)
      {
        uint64_t v24 = (void **)qword_18C486BA8;
        if (qword_18C486BA8)
        {
          do
          {
            unsigned __int16 v25 = (void **)*v24;
            free(v24[1]);
            free(v24);
            uint64_t v24 = v25;
          }

          while (v25);
        }

        qword_18C486BA8 = 0LL;
      }

      os_unfair_lock_unlock((os_unfair_lock_t)&unk_18C486BA0);
      qword_18C486BB0 = (uint64_t)v2;
      return (unint64_t)(v2 + 1) | 1;
    }

    char v51 = v17;
    __src = v21 + 2;
    unsigned int v48 = v20 + 1;
    if ((1LL << v19) / ((1LL << v19) - (unint64_t)(v20 + 1)) < 4)
    {
      char v52 = v17;
      __int128 v30 = v21;
      if (!v21) {
        goto LABEL_53;
      }
    }

    else
    {
      unsigned int v26 = (v19 + 1);
      if (v26 >= 0x11) {
        unsigned int v27 = 4;
      }
      else {
        unsigned int v27 = 2;
      }
      if (v26 < 9) {
        size_t v28 = 1LL;
      }
      else {
        size_t v28 = v27;
      }
      unint64_t v29 = (unint64_t)calloc(2LL << v19, v28);
      if (!v29) {
        swift::hashable_support::findHashableBaseTypeOfHashableType();
      }
      if ((_DWORD)v28 != 1)
      {
        if ((_DWORD)v28 == 4) {
          size_t v28 = 3LL;
        }
        else {
          size_t v28 = 2LL;
        }
      }

      unint64_t v31 = v28 | v29;
      *(_BYTE *)unint64_t v29 = v19 + 1;
      char v52 = v28 | v29;
      if (v19) {
        __asm { BR              X8 }
      }

      atomic_store(v31, (unint64_t *)&qword_18C486B98);
      if (!v49)
      {
        uint64_t v32 = malloc(0x10uLL);
        *uint64_t v32 = qword_18C486BA8;
        v32[1] = v50;
        qword_18C486BA8 = (uint64_t)v32;
      }

      __int128 v30 = v21;
      if (!v21) {
        goto LABEL_53;
      }
    }

    unint64_t v33 = (unint64_t)v30;
    if (v20 < *v30)
    {
LABEL_59:
      LOWORD(v56) = 25;
      size_t v39 = swift::MetadataAllocator::Allocate( (swift::MetadataAllocator *)&v56,  8LL * v16 + 8,  (const char *)8,  v23);
      *(void *)size_t v39 = v16;
      if (!v16) {
        goto LABEL_67;
      }
      if (v16 < 0xE) {
        goto LABEL_64;
      }
      int v40 = 0;
      unint64_t v41 = 0LL;
      if (!(_DWORD)v16 || (v16 - 1) >> 32) {
        goto LABEL_65;
      }
      if ((unint64_t)v39 - v15 + 8 >= 0x20)
      {
        unint64_t v41 = v16 & 0xFFFFFFFFFFFFFFFCLL;
        int v40 = v16 & 0xFFFFFFFC;
        unsigned int v43 = (__int128 *)(v15 + 16);
        BOOL v44 = (_OWORD *)((char *)v39 + 24);
        unint64_t v45 = v16 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          __int128 v46 = *v43;
          *(v44 - 1) = *(v43 - 1);
          _OWORD *v44 = v46;
          v43 += 2;
          v44 += 2;
          v45 -= 4LL;
        }

        while (v45);
        if (v16 == v41)
        {
LABEL_67:
          *(void *)(v33 + 8 + 8 * v20) = v39;
          atomic_store(v48, (unsigned int *)&dword_18C486B8C);
          __asm { BR              X11 }
        }
      }

      else
      {
LABEL_64:
        unint64_t v41 = 0LL;
        int v40 = 0;
      }

uint64_t swift::getResilientMetadataBounds(uint64_t a1, uint64_t a2, const char *a3, char *a4)
{
  uint64_t v4 = *(int *)(a1 + 24);
  unsigned int v5 = (unint64_t *)(v4 + a1 + 24);
  if (!(_DWORD)v4) {
    unsigned int v5 = 0LL;
  }
  if (atomic_load(v5)) {
    return v5[1];
  }
  else {
    return computeMetadataBoundsFromSuperclass((unsigned int *)a1, (uint64_t)v5, a3, a4);
  }
}

uint64_t computeMetadataBoundsFromSuperclass(unsigned int *a1, uint64_t a2, const char *a3, char *a4)
{
  unint64_t v6 = *a1;
  if ((v6 & 0x80) != 0)
  {
    __int16 v10 = *((_WORD *)a1 + 29);
    unint64_t v11 = &v9[2 * (v10 & 1)];
    if ((v10 & 1) != 0) {
      v11 += 4 * *v9;
    }
    unint64_t v8 = (unint64_t)v11 + (v10 & 2);
    if ((v10 & 2) != 0
      && (uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)*v11), v12.i16[0] = vaddlv_u8(v12), v8 += 2LL * v12.u32[0], *v11))
    {
      unsigned int v7 = *(unsigned __int16 *)((char *)&v11[v12.u32[0] - 1] + (v10 & 2));
    }

    else
    {
      unsigned int v7 = 0;
    }
  }

  else
  {
    unsigned int v7 = 0;
    unint64_t v8 = ((unint64_t)&a1[4 * ((v6 >> 7) & 1) + 11] + 3) & 0xFFFFFFFFFFFFFFFCLL;
  }

  unsigned int v13 = (int *)(((v8 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 12LL * v7);
  uint64_t v14 = *v13;
  uint64_t v15 = (char *)v13 + v14;
  if ((_DWORD)v14) {
    BOOL v16 = v15 == 0LL;
  }
  else {
    BOOL v16 = 1;
  }
  if (v16)
  {
    LODWORD(v17) = 3;
    LODWORD(v18) = 10;
  }

  else
  {
    switch((v6 >> 25) & 7)
    {
      case 0u:
        goto LABEL_17;
      case 1u:
        uint64_t v15 = *(char **)v15;
        if (!v15) {
          swift::fatalError(0LL, "instantiating class metadata for class with missing weak-linked ancestor", a3, a4);
        }
LABEL_17:
        int v19 = (int *)(v15 + 24);
        if ((v15[3] & 0x20) != 0)
        {
          uint64_t v29 = *v19;
          __int128 v30 = (unint64_t *)((char *)v19 + v29);
          if ((_DWORD)v29) {
            unint64_t v31 = v30;
          }
          else {
            unint64_t v31 = 0LL;
          }
          if (atomic_load(v31)) {
            unint64_t v17 = v31[1];
          }
          else {
            unint64_t v17 = computeMetadataBoundsFromSuperclass();
          }
        }

        else
        {
          unint64_t v17 = *(void *)v19;
        }

        goto LABEL_35;
      case 2u:
        Class v20 = objc_lookUpClass(v15);
        goto LABEL_21;
      case 3u:
        Class v20 = *(Class *)v15;
LABEL_21:
        uint64_t InitializedObjCClass = swift_getInitializedObjCClass((uint64_t)v20);
        if ((*(_BYTE *)(InitializedObjCClass + 32) & 2) != 0)
        {
          unint64_t v22 = *(unsigned int *)(InitializedObjCClass + 60);
          unint64_t v23 = *(unsigned int *)(InitializedObjCClass + 56) - v22;
          uint64_t v24 = v22 >> 3;
          unint64_t v25 = (v23 << 29) & 0xFFFFFFFF00000000LL;
          unint64_t v26 = v23 >> 3;
          BOOL v27 = v26 >= 0xA;
          uint64_t v28 = 0xA00000000LL;
          if (v27) {
            uint64_t v28 = v25;
          }
          unint64_t v17 = v28 | v24;
        }

        else
        {
          unint64_t v17 = 0xA00000003LL;
        }

unint64_t swift::getResilientImmediateMembersOffset(uint64_t a1, uint64_t a2, const char *a3, char *a4)
{
  uint64_t v4 = *(int *)(a1 + 24);
  if ((_DWORD)v4) {
    unsigned int v5 = (unint64_t *)(v4 + a1 + 24);
  }
  else {
    unsigned int v5 = 0LL;
  }
  unint64_t v6 = *v5;
  if (!*v5)
  {
    computeMetadataBoundsFromSuperclass((unsigned int *)a1, (uint64_t)v5, a3, a4);
    unint64_t v6 = v7;
  }

  return v6 >> 3;
}

uint64_t swift::TargetMetadata<swift::InProcess>::isCanonicalStaticallySpecializedGenericMetadata(uint64_t a1)
{
  unint64_t v1 = *(void *)a1;
  if (*(void *)a1 == 512LL)
  {
    uint64_t v2 = *(void *)(a1 + 8);
    if ((*(_BYTE *)v2 & 0x80) != 0)
    {
      uint64_t v3 = *(int *)(v2 + 32);
      uint64_t v4 = v3 + v2 + 32;
      if (!(_DWORD)v3) {
        uint64_t v4 = 0LL;
      }
      if ((*(_BYTE *)(v4 + 8) & 2) != 0) {
        return (*(void *)(a1
      }
                          + 8
                          * (*(unsigned int *)(v2 + 24) + ((4 * (unint64_t)*(unsigned int *)(v2 + 20) + 7) >> 3))) >> 1) & 1LL;
    }

    return 0LL;
  }

  if (v1 > 0x7FF || (v1 - 513) > 1)
  {
    BOOL v7 = v1 > 0x7FF || *(void *)a1 == 0LL;
    if (v7 && (**(_BYTE **)(a1 + 64) & 0x80) != 0) {
      return (*(unsigned __int8 *)(a1 + 40) >> 4) & 1;
    }
    return 0LL;
  }

  uint64_t v8 = *(void *)(a1 + 8);
  if ((*(_BYTE *)v8 & 0x80) == 0) {
    return 0LL;
  }
  uint64_t v9 = *(int *)(v8 + 32);
  uint64_t v10 = v9 + v8 + 32;
  if (!(_DWORD)v9) {
    uint64_t v10 = 0LL;
  }
  if ((*(_BYTE *)(v10 + 8) & 2) == 0) {
    return 0LL;
  }
  if (*(_BYTE *)(v8 + 23)) {
    uint64_t v11 = *(unsigned __int16 *)(v8 + 40) + 1LL;
  }
  else {
    uint64_t v11 = *(unsigned __int16 *)(v8 + 40);
  }
  return (*(void *)(a1 + 8 * v11 + 16) >> 1) & 1LL;
}

char *swift_allocateGenericClassMetadata(unsigned int *a1, const char *a2, uint64_t a3, char *a4)
{
  if ((*a1 & 0x20000000) != 0)
  {
    uint64_t v9 = (int)a1[6];
    if ((_DWORD)v9) {
      uint64_t v10 = (unint64_t *)((char *)a1 + v9 + 24);
    }
    else {
      uint64_t v10 = 0LL;
    }
    uint64_t v11 = atomic_load(v10);
    if (v11)
    {
      unint64_t v12 = v10[1];
    }

    else
    {
      unint64_t v12 = computeMetadataBoundsFromSuperclass(a1, (uint64_t)v10, (const char *)a3, a4);
      uint64_t v11 = v13;
    }
  }

  else
  {
    if ((*a1 & 0x10000000) != 0)
    {
      unsigned int v7 = 0;
      uint64_t v8 = a1 + 6;
    }

    else
    {
      unsigned int v7 = a1[7];
      uint64_t v8 = a1 + 8;
    }

    uint64_t v11 = 8LL * (int)(v7 - *v8);
    unint64_t v12 = *((void *)a1 + 3);
  }

  unint64_t v14 = v12;
  if ((*(_BYTE *)(a3 + 8) & 1) != 0) {
    unint64_t v14 = v12
  }
        + ((unint64_t)(*(unsigned __int16 *)(a3 + 38) + *(unsigned __int16 *)(a3 + 36)) << 32);
  __int16 v35 = 17;
  uint64_t v15 = (char *)swift::MetadataAllocator::Allocate( (swift::MetadataAllocator *)&v35,  8 * (HIDWORD(v14) + v14),  (const char *)8,  a4)
      + 8 * v14;
  BOOL v16 = &v15[8 * HIDWORD(v12)];
  if ((*(_BYTE *)(a3 + 8) & 1) != 0)
  {
    bzero(&v15[8 * HIDWORD(v12)], 8LL * *(unsigned __int16 *)(a3 + 36));
    uint64_t v17 = *(int *)(a3 + 32);
    if ((_DWORD)v17) {
      unint64_t v18 = (const void *)(v17 + a3 + 32);
    }
    else {
      unint64_t v18 = 0LL;
    }
    memcpy(&v16[8 * *(unsigned __int16 *)(a3 + 36)], v18, 8LL * *(unsigned __int16 *)(a3 + 38));
  }

  int v19 = &v15[v11];
  bzero(v19, 8LL * a1[8]);
  int v21 = *(_DWORD *)(a3 + 8);
  if (v21 < 0)
  {
    uint64_t v22 = a3 + 8LL * (v21 & 1);
    uint64_t v24 = *(int *)(v22 + 32);
    uint64_t v23 = v22 + 32;
    unint64_t v25 = (const void *)(v24 + v23);
    if ((_DWORD)v24) {
      unint64_t v26 = v25;
    }
    else {
      unint64_t v26 = 0LL;
    }
    memcpy(&v19[8 * *(unsigned __int16 *)(v23 + 4)], v26, 8LL * *(unsigned __int16 *)(v23 + 6));
  }

  uint64_t v27 = *(int *)(a3 + 12);
  uint64_t v28 = v27 + a3 + 12;
  if (!(_DWORD)v27) {
    uint64_t v28 = 0LL;
  }
  int v29 = *(_DWORD *)(a3 + 20);
  __int128 v30 = value witness table for Builtin.NativeObject;
  if ((v29 & 2) == 0) {
    __int128 v30 = (uint64_t (**)())&value witness table for Builtin.UnknownObject;
  }
  *((void *)v15 - 2) = v28;
  *((void *)v15 - 1) = v30;
  unint64_t v31 = &v16[8 * *(unsigned __int16 *)(a3 + 26)];
  *((void *)v31 + 4) = &v16[8 * *(unsigned __int16 *)(a3 + 28)];
  *(void *)uint64_t v15 = v31;
  *((void *)v15 + 1) = 0LL;
  *((void *)v15 + 2) = MEMORY[0x1896163A0];
  *((void *)v15 + 3) = 0LL;
  *((void *)v15 + 4) = (unint64_t)&v16[8 * *(unsigned __int16 *)(a3 + 24)] | 2;
  *((_DWORD *)v15 + 10) = v29;
  *(void *)(v15 + 44) = 0LL;
  *((_DWORD *)v15 + 13) = 0;
  *((_DWORD *)v15 + 14) = 8 * (HIDWORD(v12) + v12);
  uint64_t v32 = *(int *)(a3 + 16);
  *((_DWORD *)v15 + 15) = 8 * v12;
  uint64_t v33 = v32 + a3 + 16;
  if (!(_DWORD)v32) {
    uint64_t v33 = 0LL;
  }
  *((void *)v15 + 8) = a1;
  *((void *)v15 + 9) = v33;
  installGenericArguments((uint64_t)v15, a1, a2, v20);
  return v15;
}

swift::MetadataAllocator *swift::MetadataAllocator::Allocate( swift::MetadataAllocator *this, size_t __size, const char *a3, char *a4)
{
  unsigned int v7 = this;
  if (swift::MetadataAllocator::Allocate(unsigned long,unsigned long)::getenvToken != -1) {
    dispatch_once_f( &swift::MetadataAllocator::Allocate(unsigned long,unsigned long)::getenvToken,  0LL,  (dispatch_function_t)checkAllocatorDebugEnvironmentVariables);
  }
  if (__size <= 0x2000)
  {
    uint64_t v33 = a3;
    uint64_t v34 = (unsigned __int16 *)v7;
    uint64_t v9 = &qword_18C487000;
    if (_swift_debug_metadataAllocationIterationEnabled) {
      size_t v10 = __size + 8;
    }
    else {
      size_t v10 = __size;
    }
    do
    {
      unsigned __int128 v13 = __ldxp(&AllocationPool);
      unint64_t v12 = *((void *)&v13 + 1);
      unint64_t v11 = v13;
    }

    while (__stxp(v13, &AllocationPool));
    while (1)
    {
      while (1)
      {
        size_t v14 = v12 - v10;
        if (v12 >= v10)
        {
          uint64_t v17 = (char *)(v11 + v10);
          if (!v11)
          {
            do
              unsigned __int128 v24 = __ldxp(&AllocationPool);
            while (__stxp(v24, &AllocationPool));
            swift::fatalError( 0LL,  "Metadata allocator corruption: allocation is NULL. curState: {%p, %zu} - curStateReRead: {%p, %zu} - newSt ate: {%p, %zu} - allocatedNewPage: %s - requested size: %zu - sizeWithHeader: %zu - alignment: %zu - Tag: %d\n",  a3,  a4,  0LL,  v12,  v24,  v11 + v10,  v12 - v10,  "false",  __size,  v10,  v33,  *v34);
          }

          BOOL v16 = (swift::MetadataAllocator *)v11;
        }

        else
        {
          if (*((_BYTE *)v9 + 48)) {
            uint64_t v15 = 16368LL;
          }
          else {
            uint64_t v15 = 0x4000LL;
          }
          this = (swift::MetadataAllocator *)swift_slowAlloc(0x4000uLL, 0LL);
          BOOL v16 = this;
          if (swift::runtime::environment::initializeToken != -1) {
            dispatch_once_f( &swift::runtime::environment::initializeToken,  0LL,  (dispatch_function_t)swift::runtime::environment::initialize);
          }
          if (swift::runtime::environment::SWIFT_DEBUG_ENABLE_MALLOC_SCRIBBLE_variable) {
            this = (swift::MetadataAllocator *)memset(v16, 170, 0x4000uLL);
          }
          uint64_t v9 = &qword_18C487000;
          if (_swift_debug_metadataAllocationIterationEnabled)
          {
            uint64_t v23 = (void *)((char *)v16 + v15);
            *uint64_t v23 = v11 + v12;
            v23[1] = v15;
          }

          size_t v14 = v15 - v10;
          uint64_t v17 = (char *)v16 + v10;
        }

        do
        {
          while (1)
          {
            unsigned __int128 v18 = __ldxp(&AllocationPool);
            int v19 = (void)v18 != v11;
            if (*((void *)&v18 + 1) != v12) {
              ++v19;
            }
            if (!v19) {
              break;
            }
            if (!__stxp(v18, &AllocationPool)) {
              goto LABEL_33;
            }
          }
        }

        while (__stxp(__PAIR128__(v14, (unint64_t)v17), &AllocationPool));
LABEL_33:
        uint64_t v20 = v18 ^ v11 | *((void *)&v18 + 1) ^ v12;
        BOOL v21 = v20 == 0;
        if (!v20) {
          break;
        }
        if (v12 < v10)
        {
          swift_slowDealloc(v16);
          uint64_t v9 = &qword_18C487000;
        }

        unint64_t v12 = v18 >> 64;
        unint64_t v11 = v18;
        if (v21) {
          return v4;
        }
      }

      if (*((_BYTE *)v9 + 48)) {
        break;
      }
      if (swift::runtime::environment::initializeToken == -1)
      {
        if (!__size) {
          return v16;
        }
      }

      else
      {
        dispatch_once_f( &swift::runtime::environment::initializeToken,  0LL,  (dispatch_function_t)swift::runtime::environment::initialize);
        uint64_t v9 = &qword_18C487000;
        if (!__size) {
          return v16;
        }
      }

      if (!swift::runtime::environment::SWIFT_DEBUG_ENABLE_MALLOC_SCRIBBLE_variable) {
        return v16;
      }
      uint64_t v22 = 0LL;
      do
      {
        if (*((unsigned __int8 *)v16 + v22) != 170)
        {
          unint64_t v26 = (unsigned __int8 *)v16 + v22;
          unint64_t v27 = __size - v22;
          if (v27 >= 0x10) {
            uint64_t v28 = 16LL;
          }
          else {
            uint64_t v28 = v27;
          }
          if (v27 <= 0x10) {
            int v29 = "";
          }
          else {
            int v29 = "...";
          }
          __swift::__runtime::llvm::toHex(v26, v28, 0, &v35);
          if ((v35.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            uint64_t v32 = &v35;
          }
          else {
            uint64_t v32 = (std::string *)v35.__r_.__value_.__r.__words[0];
          }
          swift::fatalError(0LL, "corrupt metadata allocation arena detected at %p: %s%s", v30, v31, v26, v32, v29);
        }

        ++v22;
      }

      while (__size != v22);
      uint64_t v4 = v16;
      if (v21) {
        return v4;
      }
    }

    *(_WORD *)BOOL v16 = __size;
    *((_WORD *)v16 + 1) = *v34;
    uint64_t v4 = (swift::MetadataAllocator *)((char *)v16 + 8);
    checkScribble((char *)v16 + 8, __size);
  }

  else
  {
    uint64_t v8 = (swift::MetadataAllocator *)swift_slowAlloc(__size, (unint64_t)(a3 - 1));
    if (swift::runtime::environment::initializeToken != -1) {
      dispatch_once_f( &swift::runtime::environment::initializeToken,  0LL,  (dispatch_function_t)swift::runtime::environment::initialize);
    }
    uint64_t v4 = v8;
    if (swift::runtime::environment::SWIFT_DEBUG_ENABLE_MALLOC_SCRIBBLE_variable) {
      memset(v8, 170, __size);
    }
  }

  return v4;
}

void *installGenericArguments(uint64_t a1, _DWORD *a2, const char *__src, char *a4)
{
  unsigned int v6 = *a2;
  int v7 = *a2 & 0x1F;
  if ((*a2 & 0x80) == 0)
  {
    uint64_t v8 = 0LL;
    uint64_t v9 = 4LL;
    if ((v7 - 17) < 2)
    {
      LODWORD(v10) = 2;
      goto LABEL_20;
    }

    if (v7 == 16) {
      goto LABEL_10;
    }
LABEL_34:
    abort();
  }

  if (v7 == 18 || v7 == 17)
  {
    uint64_t v8 = (unsigned __int16 *)(a2 + 8);
    uint64_t v9 = (uint64_t)(a2 + 9);
    LODWORD(v10) = 2;
    goto LABEL_20;
  }

  if (v7 != 16) {
    goto LABEL_34;
  }
  uint64_t v8 = (unsigned __int16 *)(a2 + 12);
  uint64_t v9 = (uint64_t)(a2 + 13);
LABEL_10:
  if ((v6 & 0x20000000) != 0)
  {
    uint64_t v13 = (int)a2[6];
    size_t v14 = (unint64_t *)((char *)a2 + v13 + 24);
    if (!(_DWORD)v13) {
      size_t v14 = 0LL;
    }
    unint64_t v15 = *v14;
    if (!*v14)
    {
      computeMetadataBoundsFromSuperclass(a2, (uint64_t)v14, __src, a4);
      unint64_t v15 = v16;
    }

    unint64_t v10 = v15 >> 3;
  }

  else
  {
    if ((v6 & 0x10000000) != 0)
    {
      int v11 = 0;
      unint64_t v12 = a2 + 6;
    }

    else
    {
      int v11 = a2[7];
      unint64_t v12 = a2 + 8;
    }

    LODWORD(v10) = v11 - *v12;
  }

uint64_t swift_allocateGenericValueMetadata(_DWORD *a1, const char *a2, uint64_t a3, char *a4)
{
  __int16 v16 = 18;
  int v7 = swift::MetadataAllocator::Allocate((swift::MetadataAllocator *)&v16, (size_t)(a4 + 32), (const char *)8, a4);
  uint64_t v9 = v7;
  if ((*(_BYTE *)(a3 + 8) & 1) != 0)
  {
    bzero((char *)v7 + 32, 8LL * *(unsigned __int16 *)(a3 + 20));
    uint64_t v10 = *(int *)(a3 + 16);
    if ((_DWORD)v10) {
      int v11 = (const void *)(v10 + a3 + 16);
    }
    else {
      int v11 = 0LL;
    }
    memcpy((char *)v9 + 8 * *(unsigned __int16 *)(a3 + 20) + 32, v11, 8LL * *(unsigned __int16 *)(a3 + 22));
  }

  uint64_t v12 = *(int *)(a3 + 12);
  if ((_DWORD)v12)
  {
    uint64_t v13 = (void *)((v12 & 0xFFFFFFFFFFFFFFFELL) + a3 + 12);
    if ((v12 & 1) != 0) {
      uint64_t v13 = (void *)*v13;
    }
  }

  else
  {
    uint64_t v13 = 0LL;
  }

  *((void *)v9 + 2) = (unint64_t)*(unsigned int *)(a3 + 8) >> 21;
  uint64_t v14 = (uint64_t)v9 + 16;
  *(void *)(v14 - 8) = v13;
  *(void *)(v14 + 8) = a1;
  installGenericArguments(v14, a1, a2, v8);
  return v14;
}

uint64_t swift_allocateGenericValueMetadataWithLayoutString(_DWORD *a1, const char *a2, uint64_t a3, char *a4)
{
  __int16 v16 = 18;
  int v7 = swift::MetadataAllocator::Allocate((swift::MetadataAllocator *)&v16, (size_t)(a4 + 32), (const char *)8, a4);
  uint64_t v9 = v7;
  if ((*(_BYTE *)(a3 + 8) & 1) != 0)
  {
    bzero((char *)v7 + 32, 8LL * *(unsigned __int16 *)(a3 + 20));
    uint64_t v10 = *(int *)(a3 + 16);
    if ((_DWORD)v10) {
      int v11 = (const void *)(v10 + a3 + 16);
    }
    else {
      int v11 = 0LL;
    }
    memcpy((char *)v9 + 8 * *(unsigned __int16 *)(a3 + 20) + 32, v11, 8LL * *(unsigned __int16 *)(a3 + 22));
  }

  uint64_t v12 = *(int *)(a3 + 12);
  if ((_DWORD)v12)
  {
    uint64_t v13 = (void *)((v12 & 0xFFFFFFFFFFFFFFFELL) + a3 + 12);
    if ((v12 & 1) != 0) {
      uint64_t v13 = (void *)*v13;
    }
  }

  else
  {
    uint64_t v13 = 0LL;
  }

  *((void *)v9 + 2) = (unint64_t)*(unsigned int *)(a3 + 8) >> 21;
  uint64_t v14 = (uint64_t)v9 + 16;
  *(void *)(v14 - 8) = v13;
  *(void *)(v14 + 8) = a1;
  installGenericArguments(v14, a1, a2, v8);
  return v14;
}

unint64_t swift_getCanonicalSpecializedMetadata(const char *a1, uint64_t *a2, unint64_t *a3)
{
  BOOL v21 = a2;
  uint64_t v22 = a1;
  unint64_t v5 = *a2;
  if (*a2 != 512 && (v5 <= 0x7FF ? (BOOL v6 = (v5 - 513) > 1) : (BOOL v6 = 1), v6))
  {
    if (v5 <= 0x7FF && *a2 != 0LL)
    {
      uint64_t v9 = 0LL;
      unint64_t result = *a3;
      if (*a3) {
        return result;
      }
      goto LABEL_17;
    }

    uint64_t v8 = (unsigned __int16 **)(a2 + 8);
  }

  else
  {
    uint64_t v8 = (unsigned __int16 **)(a2 + 1);
  }

  uint64_t v9 = *v8;
  unint64_t result = *a3;
  if (*a3) {
    return result;
  }
LABEL_17:
  CanonicalMetadataPrespecializationCachingOnceToken = swift::TargetTypeContextDescriptor<swift::InProcess>::getCanonicalMetadataPrespecializationCachingOnceToken(v9);
  if (CanonicalMetadataPrespecializationCachingOnceToken)
  {
    if (*(void *)CanonicalMetadataPrespecializationCachingOnceToken != -1LL) {
      dispatch_once_f( (dispatch_once_t *)CanonicalMetadataPrespecializationCachingOnceToken,  v9,  (dispatch_function_t)cacheCanonicalSpecializedMetadata(swift::TargetTypeContextDescriptor<swift::InProcess> const*,long *)::$_0::__invoke);
    }
  }

  GenericArgs = swift::TargetMetadata<swift::InProcess>::getGenericArgs(a2, v12, v13, v14);
  Cache = getCache(v9);
  swift::MetadataCacheKey::MetadataCacheKey((uint64_t)v20, Cache + 7, (uint64_t)GenericArgs);
  v17[0] = v20[0];
  v17[1] = v20[1];
  unint64_t result = v19;
  atomic_store(v19, a3);
  return result;
}

char *swift::TargetTypeContextDescriptor<swift::InProcess>::getCanonicalMetadataPrespecializationCachingOnceToken( unsigned __int16 *a1)
{
  int v2 = *(_DWORD *)a1;
  int v3 = *(_DWORD *)a1 & 0x1F;
  if (v3 == 16)
  {
    if ((v2 & 0x80000) == 0) {
      return 0LL;
    }
    TrailingObjectsImpl = (int *)swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetClassDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetClassDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(a1);
    unint64_t v5 = TrailingObjectsImpl;
    if ((a1[1] & 8) == 0) {
      return (char *)TrailingObjectsImpl + *TrailingObjectsImpl;
    }
    unint64_t v7 = swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetClassDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetClassDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(a1);
    unint64_t v8 = *(unsigned int *)a1;
    if ((v8 & 0x40000000) != 0)
    {
      unsigned int v9 = *(_DWORD *)swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetClassDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetClassDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(a1);
      if ((*(_DWORD *)a1 & 0x20000000) != 0) {
        goto LABEL_14;
      }
    }

    else
    {
      unsigned int v9 = 0;
      if ((v8 & 0x20000000) != 0)
      {
LABEL_14:
        uint64_t v10 = *((_DWORD *)a1 + 7) & 1;
LABEL_17:
        TrailingObjectsImpl = &v5[*(unsigned int *)(v7 + 4 * ((v8 >> 30) & 1) + 12LL * v9 + 4 * v10)];
        return (char *)TrailingObjectsImpl + *TrailingObjectsImpl;
      }
    }

    uint64_t v10 = 0LL;
    goto LABEL_17;
  }

  if (v3 != 17)
  {
    if (v3 != 18) {
      abort();
    }
    if ((v2 & 0x80000) != 0) {
      goto LABEL_5;
    }
    return 0LL;
  }

  if ((v2 & 0x80000) == 0) {
    return 0LL;
  }
LABEL_5:
  TrailingObjectsImpl = (int *)swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetEnumDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetEnumDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(a1);
  return (char *)TrailingObjectsImpl + *TrailingObjectsImpl;
}

dispatch_once_t *getCache(_DWORD *a1)
{
  int v1 = *a1 & 0x1F;
  if (v1 == 18 || v1 == 17)
  {
    int v2 = a1 + 7;
  }

  else
  {
    if (v1 != 16) {
      abort();
    }
    int v2 = a1 + 11;
  }

  uint64_t v3 = *v2;
  uint64_t v4 = (dispatch_once_t *)((char *)v2 + v3);
  if ((_DWORD)v3) {
    BOOL v5 = v4 == 0LL;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    __int128 v60 = (unsigned __int16 *)a1;
    BOOL v6 = (unsigned __int16 **)atomic_load((unint64_t *)&qword_18C575828);
    if (v6 && *v6 == v60) {
      return (dispatch_once_t *)(v6 + 1);
    }
    do
    do
    {
      unint64_t v8 = atomic_load(&qword_18C575808);
      unint64_t v9 = atomic_load((unint64_t *)&qword_18C575810);
      unsigned int v10 = atomic_load((unsigned int *)&dword_18C575804);
      unint64_t v11 = atomic_load(&qword_18C575808);
    }

    while (v8 != v11);
    if (v8) {
      BOOL v12 = v9 == 0;
    }
    else {
      BOOL v12 = 1;
    }
    if (!v12 && v10 != 0)
    {
      if (v14)
      {
        qword_18C575828 = *v14;
        BOOL v6 = (unsigned __int16 **)*v14;
        do
        return (dispatch_once_t *)(v6 + 1);
      }
    }

    do
    context[0] = v60;
    os_unfair_lock_lock((os_unfair_lock_t)&unk_18C575818);
    uint64_t v17 = qword_18C575810;
    BOOL v18 = (qword_18C575810 & 3) == 0;
    if ((qword_18C575810 & 0xFFFFFFFFFFFFFFFCLL) == 0) {
      BOOL v18 = 1;
    }
    BOOL v59 = v18;
    if (v18) {
      int v19 = 4;
    }
    else {
      int v19 = *(unsigned __int8 *)(qword_18C575810 & 0xFFFFFFFFFFFFFFFCLL);
    }
    unint64_t v23 = dword_18C575804;
    uint64_t v24 = (_DWORD *)qword_18C575808;
    if (v25)
    {
      BOOL v6 = *v25;
      __dmb(0xBu);
      {
        unint64_t v27 = (void **)qword_18C575820;
        if (qword_18C575820)
        {
          do
          {
            uint64_t v28 = (void **)*v27;
            free(v27[1]);
            free(v27);
            unint64_t v27 = v28;
          }

          while (v28);
        }

        qword_18C575820 = 0LL;
      }

      os_unfair_lock_unlock((os_unfair_lock_t)&unk_18C575818);
      qword_18C575828 = (uint64_t)v6;
      return (dispatch_once_t *)(v6 + 1);
    }

    char v58 = v17;
    unint64_t v57 = v17 & 0xFFFFFFFFFFFFFFFCLL;
    uint64_t v29 = (v23 + 1);
    if ((1LL << v19) / (unint64_t)((1LL << v19) - v29) < 4)
    {
      LOBYTE(v34) = v58;
      if (v24) {
        goto LABEL_68;
      }
    }

    else
    {
      unsigned int v30 = (v19 + 1);
      if (v30 >= 0x11) {
        unsigned int v31 = 4;
      }
      else {
        unsigned int v31 = 2;
      }
      if (v30 < 9) {
        size_t v32 = 1LL;
      }
      else {
        size_t v32 = v31;
      }
      unint64_t v33 = (unint64_t)calloc(2LL << v19, v32);
      if (!v33) {
        swift::hashable_support::findHashableBaseTypeOfHashableType();
      }
      if ((_DWORD)v32 != 1)
      {
        if ((_DWORD)v32 == 4) {
          size_t v32 = 3LL;
        }
        else {
          size_t v32 = 2LL;
        }
      }

      unint64_t v34 = v32 | v33;
      *(_BYTE *)unint64_t v33 = v19 + 1;
      if (v19) {
        __asm { BR              X8 }
      }

      atomic_store(v34, (unint64_t *)&qword_18C575810);
      if (!v59)
      {
        std::string v35 = malloc(0x10uLL);
        void *v35 = qword_18C575820;
        v35[1] = v57;
        qword_18C575820 = (uint64_t)v35;
      }

      LODWORD(v29) = v23 + 1;
      if (v24)
      {
LABEL_68:
        unint64_t v36 = (unint64_t)v24;
      }
    }

    unint64_t v37 = v23 + (v23 >> 2);
    if (v37 <= v23 + 1) {
      unint64_t v37 = v23 + 1;
    }
    size_t v38 = malloc_good_size(8 * v37 + 8);
    unint64_t v39 = malloc(v38);
    if (!v39) {
      swift::hashable_support::findHashableBaseTypeOfHashableType();
    }
    unint64_t v36 = (unint64_t)v39;
    _DWORD *v39 = (v38 + 0x7FFFFFFF8LL) >> 3;
    if (v24)
    {
      memcpy(v39 + 2, v24 + 2, 8 * v23);
      int v40 = malloc(0x10uLL);
      *int v40 = qword_18C575820;
      v40[1] = v24;
      qword_18C575820 = (uint64_t)v40;
    }

    atomic_store(v36, &qword_18C575808);
LABEL_75:
    __int16 v61 = 20;
    unint64_t v41 = swift::MetadataAllocator::Allocate((swift::MetadataAllocator *)&v61, 0x50uLL, (const char *)8, v26);
    unsigned int v42 = v60;
    *(void *)unint64_t v41 = v60;
    if ((*(_DWORD *)v42 & 0x80) != 0)
    {
      unsigned int v43 = 0LL;
      switch(*(_DWORD *)v42 & 0x1F)
      {
        case 1:
          unsigned int v43 = v42 + 4;
          break;
        case 2:
        case 4:
          unsigned int v43 = v42 + 2;
          break;
        case 0x10:
          unsigned int v43 = v42 + 24;
          break;
        case 0x11:
        case 0x12:
          unsigned int v43 = v42 + 16;
          break;
        default:
          break;
      }
    }

    else
    {
      unsigned int v43 = 0LL;
    }

    *((void *)v41 + 1) = 0LL;
    *((void *)v41 + 2) = 0LL;
    *((_DWORD *)v41 + 8) = 0;
    *((void *)v41 + 3) = 0LL;
    *((void *)v41 + 5) = 0LL;
    *((void *)v41 + 6) = 0LL;
    *((_DWORD *)v41 + 14) = 0;
    BOOL v44 = (char *)(v43 + 6);
    unint64_t v45 = (_DWORD *)(((unint64_t)v43 + v43[2] + 15) & 0xFFFFFFFFFFFFFFFCLL);
    unsigned __int16 v46 = v43[5];
    uint64_t v47 = v46 & 1;
    if ((v46 & 1) != 0)
    {
      unsigned int v48 = &v45[3 * v43[3]];
      int v49 = *v48;
      if ((unsigned __int16)*v48)
      {
        unint64_t v50 = &v48[v47];
        goto LABEL_87;
      }
    }

    else
    {
      int v49 = 0;
    }

    unint64_t v50 = 0LL;
LABEL_87:
    uint64_t v51 = *(void *)(v43 + 2);
    *((_DWORD *)v41 + 16) = 0;
    *((_DWORD *)v41 + 17) = v49;
    *((void *)v41 + 9) = v50;
    uint64_t v52 = (unsigned __int16)v51;
    if ((_WORD)v51)
    {
      int v53 = 0;
      do
      {
        if (*v44 < 0) {
          *((_WORD *)v41 + 32) = ++v53;
        }
        ++v44;
        --v52;
      }

      while (v52);
    }

    if ((v51 & 0xFFFF0000) != 0)
    {
      int v54 = 0;
      uint64_t v55 = 12LL * WORD1(v51);
      do
      {
        if ((*v45 & 0x9F) == 0x80) {
          *((_WORD *)v41 + 33) = ++v54;
        }
        v45 += 3;
        v55 -= 12LL;
      }

      while (v55);
    }

    *(void *)(v36 + 8 + 8 * v23) = v41;
    atomic_store(v29, (unsigned int *)&dword_18C575804);
    __asm { BR              X11 }
  }

  uint64_t v20 = a1 + 12;
  if (v1 != 16) {
    uint64_t v20 = 0LL;
  }
  if (v1 == 17) {
    uint64_t v20 = a1 + 8;
  }
  if (v1 == 18) {
    BOOL v21 = a1 + 8;
  }
  else {
    BOOL v21 = v20;
  }
  if ((*a1 & 0x80) != 0) {
    uint64_t v22 = v21;
  }
  else {
    uint64_t v22 = 0LL;
  }
  context[0] = v4;
  context[1] = v22;
  if (v4[9] != -1) {
  return v4;
  }
}

uint64_t swift::MetadataCacheKey::MetadataCacheKey(uint64_t result, _OWORD *a2, uint64_t a3)
{
  *(void *)unint64_t result = a3;
  *(_OWORD *)(result + 8) = *a2;
  uint64_t v3 = *(unsigned __int16 *)(result + 8);
  uint64_t v4 = (1455063249 * v3);
  if (*(_WORD *)(result + 8))
  {
    unint64_t v5 = 0LL;
    uint64_t v6 = *(void *)(result + 16);
    uint64_t v7 = *(unsigned __int16 *)(result + 14);
    uint64_t v8 = v7 + v3;
    do
    {
      if (v5 >= *(unsigned __int16 *)(result + 12)
        || *(_WORD *)(v6 + 8 * v5)
        || (uint64_t v9 = v6 + 8 * v5, v7 != *(unsigned __int16 *)(v9 + 2)))
      {
        uint64_t v4 = __ROR8__(v4, 10) ^ (*(void *)(a3 + 8 * v7) >> 19) ^ *(void *)(a3 + 8 * v7);
      }

      else
      {
        unint64_t v10 = *(void *)(a3 + 8LL * *(unsigned __int16 *)(v9 + 4));
        ++v5;
        if (v10)
        {
          uint64_t v11 = 0LL;
          do
          {
            uint64_t v4 = __ROR8__(v4, 10) ^ (*(void *)((*(void *)(a3 + 8 * v7) & 0xFFFFFFFFFFFFFFFELL) + 8 * v11) >> 19) ^ *(void *)((*(void *)(a3 + 8 * v7) & 0xFFFFFFFFFFFFFFFELL) + 8 * v11);
            ++v11;
          }

          while (v10 > v11);
        }
      }

      ++v7;
    }

    while (v7 != v8);
  }

  *(_DWORD *)(result + 24) = (unint64_t)(668265261 * v4) >> 10;
  return result;
}

void swift::LockingConcurrentMap<anonymous namespace'::GenericCacheEntry,swift::LockingConcurrentMapStorage<anonymous namespace'::GenericCacheEntry,(unsigned short)14>>::getOrInsert<swift::MetadataCacheKey,swift::MetadataRequest &,swift::TargetMetadata<swift::InProcess> const*&>( unint64_t a1@<X0>, _OWORD *a2@<X1>, const char **a3@<X2>, unint64_t **a4@<X8>)
{
  uint64_t v6 = (os_unfair_lock_s *)(a1 + 48);
  unint64_t v18 = a1 + 48;
  int v19 = 0LL;
  __int16 v20 = 0;
  __int128 v7 = a2[1];
  v17[0] = *a2;
  v17[1] = v7;
  unint64_t v10 = v8;
  if ((v11 & 1) == 0)
  {
LABEL_8:
    *a4 = v10;
    a4[1] = (unint64_t *)v12;
    goto LABEL_10;
  }

  if (v19) {
    LOBYTE(v20) = 1;
  }
  if (HIBYTE(v20) != 4)
  {
    if (!HIBYTE(v20)) {
      abort();
    }
    goto LABEL_8;
  }

  uint64_t v13 = 0LL;
  unint64_t v14 = v8[4];
  *a4 = v8;
  a4[1] = (unint64_t *)v14;
LABEL_10:
  a4[2] = v13;
  unsigned int v15 = v19;
  if (v19)
  {
    os_unfair_lock_unlock(v19 + 2);
    unsigned int v16 = *(void **)&v15[4]._os_unfair_lock_opaque;
    *(void *)&v15[4]._os_unfair_lock_opaque = 0LL;
    if (v16) {
      operator delete(v16);
    }
    swift_slowDealloc(v15);
  }

uint64_t _swift_getGenericMetadata(const char *a1, uint64_t a2, _DWORD *a3)
{
  Cache = getCache(a3);
  uint64_t v6 = Cache;
  uint64_t v7 = *((unsigned __int16 *)Cache + 28);
  __int16 v8 = *((_WORD *)Cache + 29);
  unint64_t v9 = *((unsigned __int16 *)Cache + 30);
  uint64_t v10 = *((unsigned __int16 *)Cache + 31);
  dispatch_once_t v11 = Cache[8];
  unint64_t v12 = (1455063249 * v7);
  if (*((_WORD *)Cache + 28))
  {
    unint64_t v13 = 0LL;
    uint64_t v14 = *((unsigned __int16 *)Cache + 31);
    do
    {
      if (v13 >= v9 || *(_WORD *)(v11 + 8 * v13) || (dispatch_once_t v15 = v11 + 8 * v13, v14 != *(unsigned __int16 *)(v15 + 2)))
      {
        unint64_t v12 = __ROR8__(v12, 10) ^ (*(void *)(a2 + 8 * v14) >> 19) ^ *(void *)(a2 + 8 * v14);
      }

      else
      {
        unint64_t v16 = *(void *)(a2 + 8LL * *(unsigned __int16 *)(v15 + 4));
        ++v13;
        if (v16)
        {
          uint64_t v17 = 0LL;
          do
          {
            unint64_t v18 = *(void *)((*(void *)(a2 + 8 * v14) & 0xFFFFFFFFFFFFFFFELL) + 8 * v17);
            unint64_t v12 = __ROR8__(v12, 10) ^ (v18 >> 19) ^ v18;
            ++v17;
          }

          while (v16 > v17);
        }
      }

      ++v14;
    }

    while (v14 != v10 + v7);
  }

  *(void *)&__int128 v31 = a2;
  WORD4(v31) = v7;
  WORD5(v31) = v8;
  WORD6(v31) = v9;
  HIWORD(v31) = v10;
  *(void *)&__int128 v32 = v11;
  DWORD2(v32) = (668265261 * v12) >> 10;
  unint64_t v19 = atomic_load((unint64_t *)v6 + 5);
  if (!v19
    || (int v20 = *(_DWORD *)(v19 + 24),
        unint64_t v35 = v19 + 40,
        __int128 v36 = *(_OWORD *)(v19 + 8),
        LODWORD(v37) = v20,
        !swift::MetadataCacheKey::operator==((uint64_t)&v31, (uint64_t)&v35)))
  {
    do
      unsigned int v21 = __ldaxr((unsigned int *)v6);
    while (__stxr(v21 + 1, (unsigned int *)v6));
    do
    {
      unint64_t v22 = atomic_load((unint64_t *)v6 + 1);
      unint64_t v23 = atomic_load((unint64_t *)v6 + 2);
      uint64_t v24 = atomic_load((unsigned int *)v6 + 1);
      unint64_t v25 = atomic_load((unint64_t *)v6 + 1);
    }

    while (v22 != v25);
    if (v22) {
      unint64_t v26 = v22 + 8;
    }
    else {
      unint64_t v26 = 0LL;
    }
    unint64_t v35 = (unint64_t)v6;
    *(void *)&__int128 v36 = v23;
    *((void *)&v36 + 1) = v26;
    uint64_t v37 = v24;
    if (!v27)
    {
      do
        unsigned int v30 = __ldxr((unsigned int *)v6);
      while (__stlxr(v30 - 1, (unsigned int *)v6));
      __int128 v33 = v31;
      __int128 v34 = v32;
      os_unfair_lock_lock((os_unfair_lock_t)v6 + 6);
      __asm { BR              X8 }
    }

    v6[5] = *v27;
    unint64_t v19 = *v27;
    do
      unsigned int v28 = __ldxr((unsigned int *)v6);
    while (__stlxr(v28 - 1, (unsigned int *)v6));
  }
}

uint64_t sub_1817572C8( int a1, int a2, int a3, char *a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__src, uint64_t a11, uint64_t a12, int a13, char a14, char *a15, uint64_t a16, os_unfair_lock_t lock, uint64_t a18, uint64_t a19, unint64_t a20, uint64_t a21, uint64_t a22, os_unfair_lock_t a23, uint64_t a24, char a25, char a26, const void *a27, unsigned __int16 a28, unsigned __int16 a29, unsigned __int16 a30, unsigned __int16 a31, uint64_t a32, int a33, int a34, char a35, uint64_t a36, uint64_t a37, int a38)
{
  unint64_t v43 = (a20 >> (4 * v40)) & 0xF;
  if ((_DWORD)v43)
  {
    uint64_t v44 = (v43 - 1);
    if (v44 < v38)
    {
      uint64_t v45 = *(void *)(a21 + 8LL * v44);
      int v46 = *(_DWORD *)(v45 + 24);
      *(void *)(v42 - 120) = v45 + 40;
      _OWORD *v41 = *(_OWORD *)(v45 + 8);
      *(_DWORD *)(v42 - 96) = v46;
      if (swift::MetadataCacheKey::operator==((uint64_t)&a35, v42 - 120))
      {
        uint64_t v47 = *(void *)(a21 + 8 * v44);
        __dmb(0xBu);
        if (*(_DWORD *)v39)
        {
          os_unfair_lock_unlock(lock);
          *(void *)(v39 + 40) = v47;
        }

        else
        {
          __int128 v78 = *(void ***)(v39 + 32);
          if (v78)
          {
            do
            {
              __int128 v79 = (void **)*v78;
              free(v78[1]);
              free(v78);
              __int128 v78 = v79;
            }

            while (v79);
          }

          *(void *)(v39 + 32) = 0LL;
          os_unfair_lock_unlock(lock);
          *(void *)(v39 + 40) = v47;
        }

        JUMPOUT(0x18175714CLL);
      }
    }

    JUMPOUT(0x1817572A8LL);
  }

  uint64_t v84 = (v38 + 1);
  if ((1LL << a12) / (unint64_t)((1LL << a12) - v84) > 3)
  {
    return ((uint64_t (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void *, uint64_t))((char *)&loc_18175740C + *((int *)qword_181757A10 + (v48 & 3))))( v48,  v49,  v50,  v51,  v52,  v53,  v54,  v55,  a9,  __src,  a11);
  }

  if ((a14 & 1) != 0 || v38 >= *(_DWORD *)a15)
  {
    unint64_t v58 = v38 + (v38 >> 2);
    if (v58 <= v38 + 1) {
      unint64_t v58 = v38 + 1;
    }
    size_t v59 = malloc_good_size(8 * v58 + 8);
    __int128 v60 = (char *)malloc(v59);
    if (!v60) {
      swift::hashable_support::findHashableBaseTypeOfHashableType();
    }
    unint64_t v57 = v60;
    *(_DWORD *)__int128 v60 = (v59 + 0x7FFFFFFF8LL) >> 3;
    if ((a14 & 1) == 0)
    {
      memcpy(v60 + 8, __src, 8 * a22);
      __int16 v61 = malloc(0x10uLL);
      *__int16 v61 = *(void *)(v39 + 32);
      v61[1] = a15;
      *(void *)(v39 + 32) = v61;
    }

    atomic_store((unint64_t)v57, (unint64_t *)(v39 + 8));
  }

  else
  {
    unint64_t v57 = a15;
  }

  size_t v62 = 8 * (a28 + (unint64_t)a31 + a29) + 40;
  *(_WORD *)(v42 - 120) = 14;
  __int128 v63 = swift::MetadataAllocator::Allocate((swift::MetadataAllocator *)(v42 - 120), v62, (const char *)8, a4);
  __int128 v64 = a27;
  unsigned __int16 v65 = a28;
  unsigned __int16 v66 = a29;
  uint64_t v67 = a30;
  unsigned __int16 v68 = a31;
  uint64_t v69 = a32;
  int v70 = a33;
  a26 = 0;
  uint64_t v71 = a24;
  if (!a24)
  {
    int v82 = (void *)a27;
    unsigned __int16 v81 = a28;
    int v80 = a33;
    uint64_t v71 = (uint64_t)swift_slowAlloc(0x30uLL, 0xFuLL);
    *(_OWORD *)uint64_t v71 = 0u;
    *(_OWORD *)(v71 + 16) = 0u;
    *(_OWORD *)(v71 + 32) = 0u;
    *(void *)uint64_t v71 = 1LL;
    *(void *)(v71 + 16) = 0LL;
    *(void *)(v71 + 24) = 0LL;
    os_unfair_lock_lock((os_unfair_lock_t)(v71 + 8));
    int v70 = v80;
    unsigned __int16 v65 = v81;
    __int128 v64 = v82;
    a24 = v71;
  }

  uint64_t v83 = v57 + 8;
  *(void *)__int128 v63 = v71 | 8;
  *((_WORD *)v63 + 4) = v65;
  *((_WORD *)v63 + 5) = v66;
  *((_WORD *)v63 + 6) = v67;
  *((_WORD *)v63 + 7) = v68;
  *((void *)v63 + 2) = v69;
  *((_DWORD *)v63 + 6) = v70;
  *((void *)v63 + 4) = 0LL;
  __int128 v72 = (char *)v63 + 40;
  uint64_t WitnessTablePack = (uint64_t)memcpy((char *)v63 + 40, v64, 8LL * (unsigned __int16)(v66 + v65 + v68));
  if ((_DWORD)v67)
  {
    __int128 v74 = (unsigned __int16 *)(v69 + 4);
    do
    {
      uint64_t v76 = *(v74 - 1);
      unint64_t v77 = *(void *)&v72[8 * *v74];
      if (*(v74 - 2) == 1)
      {
        uint64_t v75 = 8 * v76;
        uint64_t WitnessTablePack = swift_allocateWitnessTablePack(*(void *)&v72[8 * v76], v77);
      }

      else
      {
        if (*(v74 - 2)) {
          goto LABEL_23;
        }
        uint64_t v75 = 8 * v76;
        uint64_t WitnessTablePack = swift_allocateMetadataPack(*(void *)&v72[8 * v76], v77);
      }

      *(void *)&v72[v75] = WitnessTablePack;
LABEL_23:
      v74 += 4;
      --v67;
    }

    while (v67);
  }

  v83[a22] = v63;
  atomic_store(v84, (unsigned int *)(v39 + 4));
  return ((uint64_t (*)(uint64_t))((char *)&loc_1817576AC + *((int *)qword_181757A20 + (a20 & 3))))(WitnessTablePack);
}

uint64_t swift_getCanonicalPrespecializedGenericMetadata( const char *a1, uint64_t a2, _DWORD *context, dispatch_once_t *predicate)
{
  if (*predicate != -1) {
    dispatch_once_f( predicate,  context,  (dispatch_function_t)cacheCanonicalSpecializedMetadata(swift::TargetTypeContextDescriptor<swift::InProcess> const*,long *)::$_0::__invoke);
  }
  return _swift_getGenericMetadata(a1, a2, context);
}

unint64_t swift_getSingletonMetadata(const char *a1, unsigned int *a2)
{
  if (qword_18C476A78 != -1) {
  uint64_t v29 = &SingletonMetadata;
  }
  unint64_t v30 = 0LL;
  __int16 v31 = 0;
  SingletonMetadataInitialization = (int *)swift::TargetTypeContextDescriptor<swift::InProcess>::getSingletonMetadataInitialization(a2);
  uint64_t v5 = *SingletonMetadataInitialization;
  if ((_DWORD)v5) {
    uint64_t v6 = (unint64_t *)((char *)SingletonMetadataInitialization + v5);
  }
  else {
    uint64_t v6 = 0LL;
  }
  uint64_t v7 = v6 + 1;
  __int16 v8 = (unint64_t *)atomic_load(v6 + 1);
  if (v8)
  {
LABEL_11:
    goto LABEL_12;
  }

  unint64_t v9 = swift_slowAlloc(0x10uLL, 7uLL);
  HIBYTE(v31) = 0;
  unint64_t v10 = (unint64_t)swift_slowAlloc(0x30uLL, 0xFuLL);
  *(_OWORD *)unint64_t v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_OWORD *)(v10 + 32) = 0u;
  *(void *)unint64_t v10 = 1LL;
  *(void *)(v10 + 16) = 0LL;
  *(void *)(v10 + 24) = 0LL;
  os_unfair_lock_lock((os_unfair_lock_t)(v10 + 8));
  unint64_t v30 = v10;
  *unint64_t v9 = v10 | 8;
  v9[1] = 0LL;
  do
  {
    __int16 v8 = (unint64_t *)__ldaxr(v7);
    if (v8)
    {
      __clrex();
      swift_slowDealloc(v9);
      goto LABEL_11;
    }
  }

  while (__stlxr((unint64_t)v9, v7));
  if (v30) {
    LOBYTE(v31) = 1;
  }
  if (HIBYTE(v31) != 4)
  {
    if (!HIBYTE(v31))
    {
      unint64_t v17 = swift::TargetTypeContextDescriptor<swift::InProcess>::getSingletonMetadataInitialization(a2);
      uint64_t v20 = *(int *)(v17 + 4);
      unsigned int v21 = (char *)(v20 + v17 + 4);
      if ((_DWORD)v20) {
        unint64_t v22 = (int *)v21;
      }
      else {
        unint64_t v22 = 0LL;
      }
      if ((*a2 & 0x2000001F) == 0x20000010)
      {
        uint64_t v23 = *v22;
        uint64_t v24 = (uint64_t (*)(unsigned int *))((char *)v22 + v23);
        if ((_DWORD)v23) {
          BOOL v25 = v24 == 0LL;
        }
        else {
          BOOL v25 = 1;
        }
        if (v25) {
          unsigned int v21 = _swift_relocateClassMetadata(a2, v22, v18, v19);
        }
        else {
          unsigned int v21 = (char *)v24(a2);
        }
      }

      else if (*(void *)v22 > 0x7FFuLL || *(void *)v22 == 0LL)
      {
        if ((*((void *)v22 + 4) & 3LL) == 1) {
          *((void *)v22 + 4) ^= 3uLL;
        }
        unint64_t v27 = value witness table for Builtin.NativeObject;
        if ((v22[10] & 2) == 0) {
          unint64_t v27 = (uint64_t (**)())&value witness table for Builtin.UnknownObject;
        }
        *((void *)v22 - 1) = v27;
      }

      if ((*(_DWORD *)(*((void *)v21 - 1) + 80LL) & 0x400000) != 0) {
        char v28 = 1;
      }
      else {
        char v28 = 2;
      }
      HIBYTE(v31) = v28;
      v9[1] = v21;
    }

LABEL_12:
    unint64_t v13 = v12;
    unint64_t v14 = v30;
    if (!v30) {
      return v13;
    }
    goto LABEL_13;
  }

  unint64_t v13 = v9[1];
  unint64_t v14 = v30;
  if (!v30) {
    return v13;
  }
LABEL_13:
  os_unfair_lock_unlock((os_unfair_lock_t)(v14 + 8));
  dispatch_once_t v15 = *(void **)(v14 + 16);
  *(void *)(v14 + 16) = 0LL;
  if (v15) {
    operator delete(v15);
  }
  swift_slowDealloc((void *)v14);
  return v13;
}

_DWORD *swift::Lazy<anonymous namespace'::SingletonTypeMetadataCache>::defaultInitCallback(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

unint64_t swift_getObjCClassMetadata(unint64_t result)
{
  if (result && (*(_BYTE *)(result + 32) & 2) == 0)
  {
    unint64_t v40 = result;
    unint64_t v1 = atomic_load((unint64_t *)&qword_18C486B50);
    if (v1 && *(void *)(v1 + 24) == v40) {
      goto LABEL_58;
    }
    do
      unsigned int v2 = __ldaxr((unsigned int *)&ObjCClassWrappers);
    while (__stxr(v2 + 1, (unsigned int *)&ObjCClassWrappers));
    do
    {
      unint64_t v3 = atomic_load(&qword_18C486B30);
      unint64_t v4 = atomic_load((unint64_t *)&qword_18C486B38);
      unsigned int v5 = atomic_load((unsigned int *)&dword_18C486B2C);
      unint64_t v6 = atomic_load(&qword_18C486B30);
    }

    while (v3 != v6);
    if (v3) {
      BOOL v7 = v4 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7 && v5 != 0)
    {
      if (v9)
      {
        qword_18C486B50 = *v9;
        unint64_t v1 = *v9;
        do
          unsigned int v10 = __ldxr((unsigned int *)&ObjCClassWrappers);
        while (__stlxr(v10 - 1, (unsigned int *)&ObjCClassWrappers));
LABEL_58:
        if (v1) {
          return v1 + 16;
        }
        else {
          return 0LL;
        }
      }
    }

    do
      unsigned int v11 = __ldxr((unsigned int *)&ObjCClassWrappers);
    while (__stlxr(v11 - 1, (unsigned int *)&ObjCClassWrappers));
    unint64_t v41 = v40;
    os_unfair_lock_lock((os_unfair_lock_t)&unk_18C486B40);
    uint64_t v12 = qword_18C486B38;
    BOOL v13 = (qword_18C486B38 & 3) == 0;
    if ((qword_18C486B38 & 0xFFFFFFFFFFFFFFFCLL) == 0) {
      BOOL v13 = 1;
    }
    BOOL v39 = v13;
    if (v13) {
      int v14 = 4;
    }
    else {
      int v14 = *(unsigned __int8 *)(qword_18C486B38 & 0xFFFFFFFFFFFFFFFCLL);
    }
    unint64_t v15 = dword_18C486B2C;
    unint64_t v16 = (_DWORD *)qword_18C486B30;
    if (v17)
    {
      unint64_t v1 = *v17;
      __dmb(0xBu);
      if (!ObjCClassWrappers)
      {
        unint64_t v19 = (void **)qword_18C486B48;
        if (qword_18C486B48)
        {
          do
          {
            uint64_t v20 = (void **)*v19;
            free(v19[1]);
            free(v19);
            unint64_t v19 = v20;
          }

          while (v20);
        }

        qword_18C486B48 = 0LL;
      }

      os_unfair_lock_unlock((os_unfair_lock_t)&unk_18C486B40);
      qword_18C486B50 = v1;
      goto LABEL_58;
    }

    char v38 = v12;
    __src = v16 + 2;
    unint64_t v37 = v12 & 0xFFFFFFFFFFFFFFFCLL;
    uint64_t v21 = (v15 + 1);
    if ((1LL << v14) / (unint64_t)((1LL << v14) - v21) < 4)
    {
      LOBYTE(v26) = v38;
      if (v16) {
        goto LABEL_48;
      }
    }

    else
    {
      unsigned int v22 = (v14 + 1);
      if (v22 >= 0x11) {
        unsigned int v23 = 4;
      }
      else {
        unsigned int v23 = 2;
      }
      if (v22 < 9) {
        size_t v24 = 1LL;
      }
      else {
        size_t v24 = v23;
      }
      unint64_t v25 = (unint64_t)calloc(2LL << v14, v24);
      if (!v25) {
        swift::hashable_support::findHashableBaseTypeOfHashableType();
      }
      if ((_DWORD)v24 != 1)
      {
        if ((_DWORD)v24 == 4) {
          size_t v24 = 3LL;
        }
        else {
          size_t v24 = 2LL;
        }
      }

      unint64_t v26 = v24 | v25;
      *(_BYTE *)unint64_t v25 = v14 + 1;
      if (v14) {
        __asm { BR              X9 }
      }

      atomic_store(v26, (unint64_t *)&qword_18C486B38);
      if (!v39)
      {
        unint64_t v27 = malloc(0x10uLL);
        *unint64_t v27 = qword_18C486B48;
        v27[1] = v37;
        qword_18C486B48 = (uint64_t)v27;
      }

      LODWORD(v21) = v15 + 1;
      if (v16)
      {
LABEL_48:
        unint64_t v28 = (unint64_t)v16;
      }
    }

    uint64_t v29 = v16;
    unint64_t v30 = v15 + (v15 >> 2);
    if (v30 <= v15 + 1) {
      unint64_t v30 = v15 + 1;
    }
    size_t v31 = malloc_good_size(8 * v30 + 8);
    __int128 v32 = malloc(v31);
    if (!v32) {
      swift::hashable_support::findHashableBaseTypeOfHashableType();
    }
    unint64_t v28 = (unint64_t)v32;
    *__int128 v32 = (v31 + 0x7FFFFFFF8LL) >> 3;
    if (v29)
    {
      memcpy(v32 + 2, __src, 8 * v15);
      __int128 v33 = malloc(0x10uLL);
      *__int128 v33 = qword_18C486B48;
      v33[1] = v29;
      qword_18C486B48 = (uint64_t)v33;
    }

    atomic_store(v28, &qword_18C486B30);
LABEL_55:
    __int16 v42 = 2;
    __int128 v34 = swift::MetadataAllocator::Allocate((swift::MetadataAllocator *)&v42, 0x20uLL, (const char *)8, v18);
    unint64_t v35 = v40;
    *((void *)v34 + 1) = &value witness table for Builtin.UnknownObject;
    *((void *)v34 + 2) = 773LL;
    *((void *)v34 + 3) = v35;
    *(void *)(v28 + 8 * v15 + 8) = v34;
    atomic_store(v21, (unsigned int *)&dword_18C486B2C);
    __asm { BR              X11 }
  }

  return result;
}

void *swift_getObjCClassFromMetadata(void *result)
{
  if (result)
  {
    if (*result == 773LL) {
      return (void *)result[1];
    }
  }

  return result;
}

void *swift::swift_getObjCClassFromMetadataConditional(void *result)
{
  if (result)
  {
    if (*result <= 0x7FFuLL && *result != 0LL)
    {
      if (*result == 773LL) {
        return (void *)result[1];
      }
      else {
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t swift_getFunctionTypeMetadata0(unint64_t a1, unint64_t a2)
{
  v4[0] = a1;
  memset(&v4[1], 0, 24);
  v4[4] = a2;
  v4[5] = 0LL;
  int v5 = 0;
  uint64_t v6 = 0LL;
  if (v2) {
    return v2 + 16;
  }
  else {
    return 0LL;
  }
}

uint64_t swift_getFunctionTypeMetadata( unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  v6[0] = a1;
  v6[1] = 0LL;
  v6[2] = a2;
  v6[3] = a3;
  v6[4] = a4;
  v6[5] = 0LL;
  int v7 = 0;
  uint64_t v8 = 0LL;
  if (v4) {
    return v4 + 16;
  }
  else {
    return 0LL;
  }
}

uint64_t swift_getFunctionTypeMetadata1(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = a2;
  v6[0] = a1;
  v6[1] = 0LL;
  v6[2] = (unint64_t)&v5;
  v6[3] = 0LL;
  v6[4] = a3;
  v6[5] = 0LL;
  int v7 = 0;
  uint64_t v8 = 0LL;
  if (v3) {
    return v3 + 16;
  }
  else {
    return 0LL;
  }
}

uint64_t swift_getFunctionTypeMetadata2(unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  v6[0] = a2;
  v6[1] = a3;
  v7[0] = a1;
  v7[1] = 0LL;
  v7[2] = (unint64_t)v6;
  v7[3] = 0LL;
  v7[4] = a4;
  v7[5] = 0LL;
  int v8 = 0;
  uint64_t v9 = 0LL;
  if (v4) {
    return v4 + 16;
  }
  else {
    return 0LL;
  }
}

uint64_t swift_getFunctionTypeMetadata3( unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  v7[0] = a2;
  v7[1] = a3;
  v7[2] = a4;
  v8[0] = a1;
  v8[1] = 0LL;
  void v8[2] = (unint64_t)v7;
  v8[3] = 0LL;
  v8[4] = a5;
  v8[5] = 0LL;
  int v9 = 0;
  uint64_t v10 = 0LL;
  if (v5) {
    return v5 + 16;
  }
  else {
    return 0LL;
  }
}

uint64_t swift::StableAddressConcurrentReadableHashMap<anonymous namespace'::FunctionCacheEntry,swift::TaggedMetadataAllocator<(unsigned short)3>,swift::LazyMutex>::getOrInsert<anonymous namespace'::FunctionCacheEntry::Key>( unint64_t *a1)
{
  uint64_t v2 = atomic_load((unint64_t *)&qword_18C486BE0);
  {
    do
      unsigned int v3 = __ldaxr((unsigned int *)&FunctionTypes);
    while (__stxr(v3 + 1, (unsigned int *)&FunctionTypes));
    int v14 = a1;
    do
    {
      unint64_t v4 = atomic_load(&qword_18C486BC0);
      unint64_t v5 = atomic_load((unint64_t *)&qword_18C486BC8);
      unsigned int v6 = atomic_load((unsigned int *)&dword_18C486BBC);
      unint64_t v7 = atomic_load(&qword_18C486BC0);
    }

    while (v4 != v7);
    if (v4) {
      BOOL v8 = v5 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8 && v6 != 0)
    {
      __asm { BR              X8 }
    }

    do
      unsigned int v10 = __ldxr((unsigned int *)&FunctionTypes);
    while (__stlxr(v10 - 1, (unsigned int *)&FunctionTypes));
    __int128 v11 = *((_OWORD *)v14 + 1);
    v16[0] = *(_OWORD *)v14;
    v16[1] = v11;
    __int128 v12 = *((_OWORD *)v14 + 3);
    v16[2] = *((_OWORD *)v14 + 2);
    v16[3] = v12;
    os_unfair_lock_lock((os_unfair_lock_t)&unk_18C486BD0);
    char v15 = qword_18C486BC8;
    __asm { BR              X8 }
  }

  return v2;
}

uint64_t swift_getFunctionTypeMetadataDifferentiable( unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  v7[0] = a1;
  v7[1] = a2;
  v7[2] = a3;
  void v7[3] = a4;
  v7[4] = a5;
  v7[5] = 0LL;
  int v8 = 0;
  uint64_t v9 = 0LL;
  if (v5) {
    return v5 + 16;
  }
  else {
    return 0LL;
  }
}

uint64_t swift_getFunctionTypeMetadataGlobalActor( unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  v8[0] = a1;
  v8[1] = a2;
  void v8[2] = a3;
  v8[3] = a4;
  v8[4] = a5;
  v8[5] = a6;
  int v9 = 0;
  uint64_t v10 = 0LL;
  if (v6) {
    return v6 + 16;
  }
  else {
    return 0LL;
  }
}

uint64_t swift_getExtendedFunctionTypeMetadata( unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, int a7, uint64_t a8)
{
  if (!a8) {
    goto LABEL_18;
  }
  if (*(void *)a8 <= 0x7FFuLL && *(void *)a8 - 515 >= 0xFFFFFFFE)
  {
    if (*(EnumDescriptor **)(a8 + 8) != &nominal type descriptor for Never) {
      goto LABEL_18;
    }
    a1 &= ~0x1000000uLL;
  }

  else
  {
    if (*(void *)a8 != 771LL) {
      goto LABEL_18;
    }
    if (*(_DWORD *)(a8 + 12) != 1) {
      goto LABEL_18;
    }
    unint64_t v9 = *(unsigned int *)(a8 + 8);
    if ((v9 & 0x80000000) == 0) {
      goto LABEL_18;
    }
    uint64_t v10 = *(void *)(a8 + 8 * ((v9 >> 30) & 1) + 16);
    uint64_t v11 = v10 & 1;
    __int128 v12 = (void *)(v10 & 0xFFFFFFFFFFFFFFFELL);
    if (v11 || v12 != &protocol descriptor for Error) {
      goto LABEL_18;
    }
  }

  a8 = 0LL;
  a7 &= ~1u;
  if (!a7) {
    a1 &= ~0x80000000uLL;
  }
LABEL_18:
  v16[0] = a1;
  v16[1] = a2;
  v16[2] = a3;
  v16[3] = a4;
  _OWORD v16[4] = a5;
  v16[5] = a6;
  int v17 = a7;
  uint64_t v18 = a8;
  if (v14) {
    return v14 + 16;
  }
  else {
    return 0LL;
  }
}

uint64_t swift_getTupleTypeLayout2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  unsigned int v3 = *(_DWORD *)(a2 + 20);
  uint64_t v4 = *(_DWORD *)(a3 + 16);
  uint64_t v5 = (*(void *)a2 + v4) & ~v4;
  if (v3 <= *(_DWORD *)(a3 + 20)) {
    unsigned int v3 = *(_DWORD *)(a3 + 20);
  }
  unint64_t v6 = v5 + *(void *)a3;
  else {
    uint64_t v7 = *(_DWORD *)(a2 + 16);
  }
  int v8 = *(_DWORD *)(a3 + 16) | *(_DWORD *)(a2 + 16);
  int v9 = v8 & 0x10000;
  int v10 = v8 & 0x100000;
  else {
    int v13 = 0x20000;
  }
  unsigned int v14 = v9 | v10 | v7 | v13;
  *(void *)(a1 + 16) = v14;
  unint64_t v15 = (v6 + v7) & ~v7;
  if (v15 <= 1) {
    unint64_t v15 = 1LL;
  }
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v15;
  if (v3)
  {
    *(_DWORD *)(a1 + 16) = v14;
    *(_DWORD *)(a1 + 20) = v3;
  }

  return v5;
}

uint64_t swift_getTupleTypeLayout(uint64_t result, uint64_t a2, unsigned __int16 a3, uint64_t a4)
{
  *(void *)unint64_t result = 0LL;
  *(void *)(result + 8) = 0LL;
  *(void *)(result + 16) = 0LL;
  int v4 = a3;
  if (a3)
  {
    uint64_t v5 = 0LL;
    unsigned int v6 = 0;
    unint64_t v7 = 0LL;
    unint64_t v8 = 0LL;
    LOBYTE(v9) = 1;
    LOBYTE(v10) = 1;
    do
    {
      uint64_t v11 = *(void *)(a4 + 8 * v5);
      int v12 = *(_DWORD *)(v11 + 16);
      unint64_t v13 = v12;
      unint64_t v14 = (v7 + v13) & ~v13;
      if (a2)
      {
        *(_DWORD *)(a2 + 4 * v5) = v14;
        int v12 = *(_DWORD *)(v11 + 16);
        unint64_t v13 = v12;
      }

      if (v6 <= *(_DWORD *)(v11 + 20)) {
        unsigned int v6 = *(_DWORD *)(v11 + 20);
      }
      unint64_t v7 = *(void *)v11 + v14;
      if (v8 <= v13) {
        unint64_t v8 = v13;
      }
      int v9 = ((v12 & 0x10000) == 0) & v9;
      int v10 = ((v12 & 0x100000) == 0) & v10;
      ++v5;
    }

    while (a3 != (unint64_t)v5);
    if (v9) {
      int v4 = 0;
    }
    else {
      int v4 = 0x10000;
    }
    if (v8 >= 8 || v7 >= 0x19) {
      int v16 = 0;
    }
    else {
      int v16 = v10;
    }
    *(void *)unint64_t result = v7;
    int v17 = v8 & 0xFFECFFFF;
    if (!v10)
    {
      int v18 = 0x100000;
      goto LABEL_23;
    }
  }

  else
  {
    int v17 = 0;
    unint64_t v7 = 0LL;
    unint64_t v8 = 0LL;
    unsigned int v6 = 0;
    int v16 = 1;
  }

  int v18 = 0;
LABEL_23:
  if (v16) {
    int v19 = 0;
  }
  else {
    int v19 = 0x20000;
  }
  unsigned int v20 = v18 | v17 | v4 | v19;
  *(void *)(result + 16) = v20;
  unint64_t v21 = (v7 + v8) & ~v8;
  if (v21 <= 1) {
    unint64_t v21 = 1LL;
  }
  *(void *)(result + 8) = v21;
  if (v6)
  {
    *(void *)unint64_t result = v7;
    *(_DWORD *)(result + 16) = v20;
    *(_DWORD *)(result + 20) = v6;
  }

  return result;
}

uint64_t swift_getTupleTypeLayout3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  unsigned int v4 = *(_DWORD *)(a2 + 20);
  unsigned int v5 = *(_DWORD *)(a2 + 16);
  uint64_t v6 = *(_DWORD *)(a3 + 16);
  uint64_t v7 = (*(void *)a2 + v6) & ~v6;
  if (v4 <= *(_DWORD *)(a3 + 20)) {
    unsigned int v4 = *(_DWORD *)(a3 + 20);
  }
  int v8 = *(_DWORD *)(a3 + 16) | *(_DWORD *)(a2 + 16);
  int v9 = *(_DWORD *)(a4 + 16);
  if (v4 <= *(_DWORD *)(a4 + 20)) {
    unsigned int v4 = *(_DWORD *)(a4 + 20);
  }
  unint64_t v10 = ((v7 + *(void *)a3 + v9) & ~(unint64_t)v9) + *(void *)a4;
  else {
    uint64_t v11 = v5;
  }
  int v12 = v9 | v8;
  int v13 = (v9 | v8) & 0x10000;
  int v14 = v12 & 0x100000;
  else {
    int v17 = 0x20000;
  }
  unsigned int v18 = v13 | v14 | v11 | v17;
  *(void *)(a1 + 16) = v18;
  unint64_t v19 = (v10 + v11) & ~v11;
  if (v19 <= 1) {
    unint64_t v19 = 1LL;
  }
  *(void *)a1 = v10;
  *(void *)(a1 + 8) = v19;
  if (v4)
  {
    *(_DWORD *)(a1 + 16) = v18;
    *(_DWORD *)(a1 + 20) = v4;
  }

  return v7;
}

unint64_t *swift_getTupleTypeMetadata(const char *a1, int a2, uint64_t a3, const char *a4, uint64_t a5)
{
  uint64_t v32 = a5;
  __int128 v33 = a1;
  unsigned int v5 = (unint64_t *)(unsigned __int16)a2;
  if (!(_WORD)a2) {
    return (unint64_t *)&unk_189B8D178;
  }
  if (qword_18C476AB8 == -1)
  {
    if ((a2 & 0x10000) == 0)
    {
LABEL_4:
      *(void *)&__int128 v30 = v5;
      *((void *)&v30 + 1) = a3;
      size_t v31 = a4;
      return (unint64_t *)v35;
    }
  }

  else
  {
    if ((a2 & 0x10000) == 0) {
      goto LABEL_4;
    }
  }

  __int128 v34 = v5;
  uint64_t v35 = a3;
  __int128 v36 = a4;
  do
    unsigned int v10 = __ldaxr((unsigned int *)&TupleTypes);
  while (__stxr(v10 + 1, (unsigned int *)&TupleTypes));
  do
  {
    unint64_t v11 = atomic_load(&qword_18C476A88);
    unint64_t v12 = atomic_load((unint64_t *)&qword_18C476A90);
    unsigned int v13 = atomic_load((unsigned int *)&dword_18C476A84);
    unint64_t v14 = atomic_load(&qword_18C476A88);
  }

  while (v11 != v14);
  if (v11) {
    BOOL v15 = v12 == 0;
  }
  else {
    BOOL v15 = 1;
  }
  BOOL v16 = v15 || v13 == 0;
  if (v16
  {
    do
      unsigned int v20 = __ldxr((unsigned int *)&TupleTypes);
    while (__stlxr(v20 - 1, (unsigned int *)&TupleTypes));
  }

  else
  {
    unsigned int v18 = *v17;
    do
      unsigned int v19 = __ldxr((unsigned int *)&TupleTypes);
    while (__stlxr(v19 - 1, (unsigned int *)&TupleTypes));
    if (v18) {
  }
    }

  size_t v21 = (strlen(a4) + 9) & 0xFFFFFFFFFFFFFFF8LL;
  LOWORD(v34) = 13;
  unsigned int v23 = (char *)swift::MetadataAllocator::Allocate((swift::MetadataAllocator *)&v34, v21, (const char *)1, v22);
  _swift_strlcpy(v23, a4, v21);
  *(void *)&__int128 v28 = v5;
  *((void *)&v28 + 1) = a3;
  uint64_t v29 = v23;
  uint64_t v9 = v35;
  if (*(char **)(v35 + 16) != v23)
  {
    if (v21 <= 0x2000)
    {
      do
        unsigned __int128 v24 = __ldxp(&AllocationPool);
      while (__stxp(v24, &AllocationPool));
      if (&v23[v21] == (char *)v24)
      {
        if (swift::runtime::environment::initializeToken != -1) {
          dispatch_once_f( &swift::runtime::environment::initializeToken,  0LL,  (dispatch_function_t)swift::runtime::environment::initialize);
        }
        if (swift::runtime::environment::SWIFT_DEBUG_ENABLE_MALLOC_SCRIBBLE_variable) {
          memset(v23, 170, v21);
        }
        do
        {
          while (1)
          {
            unsigned __int128 v25 = __ldxp(&AllocationPool);
            int v26 = (void)v25 != (void)v24;
            if (*((void *)&v25 + 1) != *((void *)&v24 + 1)) {
              ++v26;
            }
            if (!v26) {
              break;
            }
            if (!__stxp(v25, &AllocationPool)) {
              return (unint64_t *)v9;
            }
          }
        }

        while (__stxp(__PAIR128__(v21 + *((void *)&v24 + 1), (unint64_t)v23), &AllocationPool));
      }
    }

    else
    {
      swift_slowDealloc(v23);
    }
  }

  return (unint64_t *)v9;
}

double swift::Lazy<anonymous namespace'::TupleCache>::defaultInitCallback(uint64_t a1)
{
  *(void *)(a1 + 48) = 0LL;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

void swift::LockingConcurrentMap<anonymous namespace'::TupleCacheEntry,anonymous namespace'::TupleCacheStorage>::getOrInsert<anonymous namespace'::TupleCacheEntry::Key,swift::MetadataRequest &,swift::TargetValueWitnessTable<swift::InProcess> const*&>( __int128 *a1@<X0>, const char **a2@<X1>, uint64_t *a3@<X2>, unint64_t **a4@<X8>)
{
  __int128 v59 = *a1;
  __int128 v60 = (const char *)*((void *)a1 + 2);
  uint64_t v7 = (unint64_t *)atomic_load((unint64_t *)&qword_18C476AA8);
  if (v7 && (void)v59 == v7[15])
  {
    if ((void)v59)
    {
      uint64_t v8 = 0LL;
      while (*(void *)(*((void *)&v59 + 1) + 8 * v8) == v7[2 * v8 + 17])
      {
        if ((void)v59 == ++v8) {
          goto LABEL_7;
        }
      }
    }

    else
    {
LABEL_7:
      uint64_t v9 = (const char *)v7[16];
      if (v60 == v9 || v60 && v9 && !strcmp(v60, v9)) {
        goto LABEL_67;
      }
    }
  }

  do
    unsigned int v10 = __ldaxr((unsigned int *)&TupleTypes);
  while (__stxr(v10 + 1, (unsigned int *)&TupleTypes));
  do
  {
    unint64_t v11 = atomic_load(&qword_18C476A88);
    unint64_t v12 = atomic_load((unint64_t *)&qword_18C476A90);
    unsigned int v13 = atomic_load((unsigned int *)&dword_18C476A84);
    unint64_t v14 = atomic_load(&qword_18C476A88);
  }

  while (v11 != v14);
  if (v11) {
    BOOL v15 = v12 == 0;
  }
  else {
    BOOL v15 = 1;
  }
  if (!v15 && v13 != 0)
  {
    if (v17)
    {
      qword_18C476AA8 = *v17;
      uint64_t v7 = (unint64_t *)*v17;
      do
        unsigned int v18 = __ldxr((unsigned int *)&TupleTypes);
      while (__stlxr(v18 - 1, (unsigned int *)&TupleTypes));
      goto LABEL_67;
    }
  }

  do
    unsigned int v19 = __ldxr((unsigned int *)&TupleTypes);
  while (__stlxr(v19 - 1, (unsigned int *)&TupleTypes));
  unint64_t v57 = a3;
  unsigned int v20 = a2;
  __int128 v61 = v59;
  size_t v62 = v60;
  os_unfair_lock_lock((os_unfair_lock_t)&unk_18C476A98);
  char v21 = qword_18C476A90;
  BOOL v22 = (qword_18C476A90 & 3) == 0;
  if ((qword_18C476A90 & 0xFFFFFFFFFFFFFFFCLL) == 0) {
    BOOL v22 = 1;
  }
  BOOL v55 = v22;
  unint64_t v56 = qword_18C476A90 & 0xFFFFFFFFFFFFFFFCLL;
  if (v22) {
    int v23 = 4;
  }
  else {
    int v23 = *(unsigned __int8 *)(qword_18C476A90 & 0xFFFFFFFFFFFFFFFCLL);
  }
  unint64_t v24 = dword_18C476A84;
  unsigned __int128 v25 = (_DWORD *)qword_18C476A88;
  int v26 = (const void *)(qword_18C476A88 + 8);
  uint64_t v29 = v27;
  if (!v27)
  {
    unsigned int v54 = v24 + 1;
    if ((1LL << v23) / ((1LL << v23) - (unint64_t)(v24 + 1)) < 4)
    {
      __int128 v36 = v57;
      char v58 = v21;
      if (v25) {
        goto LABEL_55;
      }
    }

    else
    {
      unsigned int v30 = (v23 + 1);
      if (v30 >= 0x11) {
        unsigned int v31 = 4;
      }
      else {
        unsigned int v31 = 2;
      }
      if (v30 < 9) {
        size_t v32 = 1LL;
      }
      else {
        size_t v32 = v31;
      }
      unint64_t v33 = (unint64_t)calloc(2LL << v23, v32);
      if (!v33) {
        swift::hashable_support::findHashableBaseTypeOfHashableType();
      }
      if ((_DWORD)v32 != 1)
      {
        if ((_DWORD)v32 == 4) {
          size_t v32 = 3LL;
        }
        else {
          size_t v32 = 2LL;
        }
      }

      unint64_t v37 = v32 | v33;
      *(_BYTE *)unint64_t v33 = v23 + 1;
      char v58 = v32 | v33;
      if (v23) {
        __asm { BR              X8 }
      }

      atomic_store(v37, (unint64_t *)&qword_18C476A90);
      if (!v55)
      {
        char v38 = malloc(0x10uLL);
        LOBYTE(v37) = v58;
        *char v38 = qword_18C476AA0;
        v38[1] = v56;
        qword_18C476AA0 = (uint64_t)v38;
      }

      int v26 = v25 + 2;
      __int128 v36 = v57;
      if (v25)
      {
LABEL_55:
        unint64_t v39 = (unint64_t)v25;
      }
    }

    unint64_t v40 = v24 + (v24 >> 2);
    if (v40 <= v24 + 1) {
      unint64_t v40 = v24 + 1;
    }
    size_t v41 = malloc_good_size(8 * v40 + 8);
    __int16 v42 = malloc(v41);
    if (!v42) {
      swift::hashable_support::findHashableBaseTypeOfHashableType();
    }
    unint64_t v39 = (unint64_t)v42;
    _DWORD *v42 = (v41 + 0x7FFFFFFF8LL) >> 3;
    if (v25)
    {
      memcpy(v42 + 2, v26, 8 * v24);
      unint64_t v43 = malloc(0x10uLL);
      *unint64_t v43 = qword_18C476AA0;
      v43[1] = v25;
      qword_18C476AA0 = (uint64_t)v43;
    }

    atomic_store(v39, &qword_18C476A88);
LABEL_62:
    unint64_t v44 = v24;
    uint64_t v45 = v59;
    LOWORD(v63) = 13;
    int v46 = swift::MetadataAllocator::Allocate((swift::MetadataAllocator *)&v63, 16 * v59 + 136, (const char *)8, v28);
    uint64_t v47 = *v36;
    unint64_t v48 = (unint64_t)swift_slowAlloc(0x30uLL, 0xFuLL);
    *(_OWORD *)unint64_t v48 = 0u;
    *(_OWORD *)(v48 + 16) = 0u;
    *(_OWORD *)(v48 + 32) = 0u;
    *(void *)unint64_t v48 = 1LL;
    *(void *)(v48 + 16) = 0LL;
    *(void *)(v48 + 24) = 0LL;
    os_unfair_lock_lock((os_unfair_lock_t)(v48 + 8));
    *(void *)int v46 = v48 | 9;
    *((_DWORD *)v46 + 24) = 0;
    uint64_t v49 = v60;
    *((void *)v46 + 15) = v45;
    *((void *)v46 + 16) = v49;
    *((void *)v46 + 13) = v47;
    *((void *)v46 + 14) = 769LL;
    if (v45)
    {
      uint64_t v50 = 0LL;
      uint64_t v51 = *((void *)&v59 + 1);
      do
      {
        *((void *)v46 + 2 * v50 + 17) = *(void *)(v51 + 8 * v50);
        ++v50;
      }

      while (v45 != v50);
    }

    *(void *)(v39 + 8 + 8 * v44) = v46;
    atomic_store(v54, (unsigned int *)&dword_18C476A84);
    __asm { BR              X11 }
  }

  uint64_t v7 = *v27;
  __dmb(0xBu);
  if (TupleTypes)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)&unk_18C476A98);
    qword_18C476AA8 = (uint64_t)v7;
    a2 = v20;
  }

  else
  {
    __int128 v34 = (void **)qword_18C476AA0;
    if (qword_18C476AA0)
    {
      do
      {
        uint64_t v35 = (void **)*v34;
        free(v34[1]);
        free(v34);
        __int128 v34 = v35;
      }

      while (v35);
    }

    a2 = v20;
    qword_18C476AA0 = 0LL;
    os_unfair_lock_unlock((os_unfair_lock_t)&unk_18C476A98);
    qword_18C476AA8 = (uint64_t)v7;
    if (!v29) {
      abort();
    }
  }

unint64_t *swift_getTupleTypeMetadata2( const char *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5)
{
  v6[0] = a2;
  v6[1] = a3;
  return swift_getTupleTypeMetadata(a1, 2, (uint64_t)v6, a4, a5);
}

unint64_t *swift_getTupleTypeMetadata3( const char *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, uint64_t a6)
{
  v7[0] = a2;
  v7[1] = a3;
  v7[2] = a4;
  return swift_getTupleTypeMetadata(a1, 3, (uint64_t)v7, a5, a6);
}

uint64_t swift::equalContexts(const char *a1, const char *a2)
{
  if (a1 == a2) {
    return 1LL;
  }
  uint64_t v17 = v2;
  uint64_t v18 = v3;
  uint64_t result = 0LL;
  if (a1 && a2)
  {
    if ((*(_DWORD *)a1 & 0x40) != 0
      || (*(_DWORD *)a2 & 0x40) != 0
      || ((*(_DWORD *)a2 ^ *(_DWORD *)a1) & 0x1F) != 0)
    {
      return 0LL;
    }

    uint64_t v7 = *((int *)a1 + 1);
    if ((_DWORD)v7)
    {
      uint64_t v8 = &a1[(v7 & 0xFFFFFFFFFFFFFFFELL) + 4];
      if ((v7 & 1) != 0) {
        uint64_t v8 = *(const char **)v8;
      }
    }

    else
    {
      uint64_t v8 = 0LL;
    }

    uint64_t v9 = *((int *)a2 + 1);
    if ((_DWORD)v9)
    {
      unsigned int v10 = &a2[(v9 & 0xFFFFFFFFFFFFFFFELL) + 4];
      if ((v9 & 1) != 0) {
        unsigned int v10 = *(const char **)v10;
      }
    }

    else
    {
      unsigned int v10 = 0LL;
    }

    uint64_t result = swift::equalContexts(v8, v10);
    if ((_DWORD)result)
    {
      if ((*a1 & 0x1Fu) - 1 >= 2)
      {
        if ((*a1 & 0x1F) == 0)
        {
          int v11 = strcmp(&a1[*((int *)a1 + 2) + 8], &a2[*((int *)a2 + 2) + 8]);
          return v11 == 0;
        }

        if ((*a1 & 0x10) != 0)
        {
          swift::ParsedTypeIdentity::parse((uint64_t)a1, (uint64_t)v14);
          unsigned int v13 = __s2;
          size_t v12 = v16;
          swift::ParsedTypeIdentity::parse((uint64_t)a2, (uint64_t)v14);
          if (v12 == v16)
          {
            if (!v12) {
              return 1LL;
            }
            int v11 = memcmp(v13, __s2, v12);
            return v11 == 0;
          }
        }
      }

      return 0LL;
    }
  }

  return result;
}

uint64_t swift_compareTypeContextDescriptors(_DWORD *a1, _DWORD *a2)
{
  if (a1 == a2) {
    return 1LL;
  }
  uint64_t v16 = v2;
  uint64_t v17 = v3;
  uint64_t result = 0LL;
  if (a1 && a2)
  {
    uint64_t v7 = (int)a1[1];
    if ((_DWORD)v7)
    {
      uint64_t v8 = (char *)a1 + (v7 & 0xFFFFFFFFFFFFFFFELL) + 4;
      if ((v7 & 1) != 0) {
        uint64_t v8 = *(const char **)v8;
      }
    }

    else
    {
      uint64_t v8 = 0LL;
    }

    uint64_t v9 = (int)a2[1];
    if ((_DWORD)v9)
    {
      unsigned int v10 = (char *)a2 + (v9 & 0xFFFFFFFFFFFFFFFELL) + 4;
      if ((v9 & 1) != 0) {
        unsigned int v10 = *(const char **)v10;
      }
    }

    else
    {
      unsigned int v10 = 0LL;
    }

    uint64_t result = swift::equalContexts(v8, v10);
    if ((_DWORD)result)
    {
      swift::ParsedTypeIdentity::parse((uint64_t)a1, (uint64_t)v13);
      size_t v12 = __s2;
      size_t v11 = v15;
      swift::ParsedTypeIdentity::parse((uint64_t)a2, (uint64_t)v13);
      if (v11 != v15) {
        return 0LL;
      }
      return !v11 || memcmp(v12, __s2, v11) == 0;
    }
  }

  return result;
}

char *_swift_pod_indirect_initializeBufferWithCopyOfBuffer( unint64_t **a1, unint64_t **a2, uint64_t a3, char *a4)
{
  uint64_t v4 = *(void *)(a3 - 8);
  unsigned int v5 = *a2;
  *a1 = *a2;
  swift_retain(v5, (uint64_t)a2, a3, a4);
  return (char *)v5 + ((*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
}

void *_swift_pod_copy(void *a1, const void *a2, uint64_t a3)
{
  return memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
}

void *_swift_pod_direct_initializeBufferWithCopyOfBuffer(void *a1, const void *a2, uint64_t a3)
{
  return memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
}

__n128 swift::installCommonValueWitnesses(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if ((v2 & 0x10000) != 0)
  {
    if ((v2 & 0x100000) == 0) {
      *(void *)(a2 + 32) = _swift_pod_copy;
    }
  }

  else
  {
    int64_t v3 = *(_DWORD *)(a1 + 16) | (*(void *)a1 << 16) | ((unint64_t)(*(_DWORD *)(a1 + 20) != 0) << 48);
    if (v3 <= 524294)
    {
      switch(v3)
      {
        case 65536LL:
          uint64_t v4 = &value witness table for Builtin.Int8;
          goto LABEL_25;
        case 131073LL:
          uint64_t v4 = &value witness table for Builtin.Int16;
          goto LABEL_25;
        case 262147LL:
          uint64_t v4 = &value witness table for Builtin.Int32;
          goto LABEL_25;
      }
    }

    else if (v3 > 2097182)
    {
      if (v3 == 2097183)
      {
        uint64_t v4 = (ValueWitnessTable *)&value witness table for Builtin.Int256;
        goto LABEL_25;
      }

      if (v3 == 4194367)
      {
        uint64_t v4 = (ValueWitnessTable *)&value witness table for Builtin.Int512;
        goto LABEL_25;
      }
    }

    else
    {
      if (v3 == 524295)
      {
        uint64_t v4 = &value witness table for Builtin.Int64;
        goto LABEL_25;
      }

      if (v3 == 1048591)
      {
        uint64_t v4 = &value witness table for Builtin.Int128;
LABEL_25:
        *(_OWORD *)a2 = *(_OWORD *)&v4->initializeBufferWithCopyOfBuffer;
        *(_OWORD *)(a2 + 16) = *(_OWORD *)&v4->initializeWithCopy;
        *(_OWORD *)(a2 + 32) = *(_OWORD *)&v4->initializeWithTake;
        __n128 result = *(__n128 *)&v4->getEnumTagSinglePayload;
        *(__n128 *)(a2 + 48) = result;
        return result;
      }
    }

    if ((v2 & 0x20000) != 0) {
      unsigned int v5 = _swift_pod_indirect_initializeBufferWithCopyOfBuffer;
    }
    else {
      unsigned int v5 = _swift_pod_direct_initializeBufferWithCopyOfBuffer;
    }
    *(void *)a2 = v5;
    *(void *)(a2 + 8) = _swift_pod_destroy;
    *(void *)(a2 + 16) = _swift_pod_copy;
    *(void *)(a2 + 24) = _swift_pod_copy;
    *(void *)(a2 + 32) = _swift_pod_copy;
    *(void *)(a2 + 40) = _swift_pod_copy;
  }

  return result;
}

void swift_initStructMetadata(uint64_t a1, __int16 a2, unint64_t a3, char *a4, uint64_t a5)
{
  unint64_t v39 = 0LL;
  uint64_t v40 = 0LL;
  uint64_t v41 = 0LL;
  if (a3)
  {
    uint64_t v6 = 0LL;
    unint64_t v7 = 0LL;
    unint64_t v8 = 0LL;
    LOBYTE(v9) = 1;
    LOBYTE(v10) = 1;
    do
    {
      uint64_t v11 = *(void *)&a4[8 * v6];
      int v12 = *(_DWORD *)(v11 + 16);
      unint64_t v13 = v12;
      unint64_t v14 = (v7 + v13) & ~v13;
      if (*(_DWORD *)(a5 + 4 * v6) != (_DWORD)v14)
      {
        *(_DWORD *)(a5 + 4 * v6) = v14;
        int v12 = *(_DWORD *)(v11 + 16);
        unint64_t v13 = v12;
      }

      unint64_t v7 = *(void *)v11 + v14;
      if (v8 <= v13) {
        unint64_t v8 = v13;
      }
      int v9 = ((v12 & 0x10000) == 0) & v9;
      int v10 = ((v12 & 0x100000) == 0) & v10;
      ++v6;
    }

    while (a3 != v6);
    if (v9) {
      int v15 = 0;
    }
    else {
      int v15 = 0x10000;
    }
    if (v8 >= 8 || v7 >= 0x19) {
      int v17 = 0;
    }
    else {
      int v17 = v10;
    }
    unint64_t v39 = v7;
    int v18 = v8 & 0xFFECFFFF;
    if (!v10)
    {
      int v19 = 0x100000;
      goto LABEL_21;
    }
  }

  else
  {
    int v18 = 0;
    unint64_t v7 = 0LL;
    int v15 = 0;
    unint64_t v8 = 0LL;
    int v17 = 1;
  }

  int v19 = 0;
LABEL_21:
  if (v17) {
    int v20 = 0;
  }
  else {
    int v20 = 0x20000;
  }
  int v21 = v19 | v18 | v15 | v20;
  LODWORD(v41) = v21;
  unint64_t v22 = (v7 + v8) & ~v8;
  if (v22 <= 1) {
    uint64_t v23 = 1LL;
  }
  else {
    uint64_t v23 = v22;
  }
  uint64_t v40 = v23;
  if (!a3)
  {
    unsigned int v26 = 0;
    goto LABEL_49;
  }

  unint64_t v24 = a3 - 1;
  if (a3 == 1)
  {
    unint64_t v25 = 0LL;
    unsigned int v26 = 0;
    goto LABEL_45;
  }

  unsigned int v26 = 0;
  unint64_t v25 = 0LL;
  if (!(_DWORD)a3)
  {
    LODWORD(v24) = 0;
LABEL_45:
    unsigned int v31 = v24 + 1;
    do
    {
      unsigned int v32 = *(_DWORD *)(*(void *)&a4[8 * v25] + 20LL);
      if (v32 > v26) {
        unsigned int v26 = v32;
      }
      unint64_t v25 = v31++;
    }

    while (v25 < a3);
    goto LABEL_49;
  }

  unint64_t v27 = HIDWORD(v24);
  LODWORD(v24) = 0;
  if (v27) {
    goto LABEL_45;
  }
  unsigned int v28 = 0;
  unint64_t v25 = a3 & 0xFFFFFFFFFFFFFFFELL;
  LODWORD(v24) = a3 & 0xFFFFFFFE;
  uint64_t v29 = a4 + 8;
  unint64_t v30 = a3 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    if (*(_DWORD *)(*(void *)v29 + 20LL) > v28) {
      unsigned int v28 = *(_DWORD *)(*(void *)v29 + 20LL);
    }
    v29 += 16;
    v30 -= 2LL;
  }

  while (v30);
  unsigned int v26 = v27 <= v28 ? v28 : v27;
  if (v25 != a3) {
    goto LABEL_45;
  }
LABEL_49:
  uint64_t v33 = *(void *)(a1 - 8);
  if ((a2 & 0x100) == 0)
  {
    __int16 v42 = 12;
    __int128 v34 = swift::MetadataAllocator::Allocate((swift::MetadataAllocator *)&v42, 0x58uLL, (const char *)8, a4);
    __int128 v35 = *(_OWORD *)(v33 + 16);
    *(_OWORD *)__int128 v34 = *(_OWORD *)v33;
    *((_OWORD *)v34 + 1) = v35;
    __int128 v36 = *(_OWORD *)(v33 + 32);
    __int128 v37 = *(_OWORD *)(v33 + 48);
    __int128 v38 = *(_OWORD *)(v33 + 64);
    *((void *)v34 + 10) = *(void *)(v33 + 80);
    *((_OWORD *)v34 + 3) = v37;
    *((_OWORD *)v34 + 4) = v38;
    *((_OWORD *)v34 + 2) = v36;
    *(void *)(a1 - 8) = v34;
    uint64_t v33 = (uint64_t)v34;
  }

  HIDWORD(v41) = v26;
  swift::installCommonValueWitnesses((uint64_t)&v39, v33);
  *(void *)(v33 + 64) = v7;
  *(void *)(v33 + 72) = v23;
  *(_DWORD *)(v33 + 80) = v21;
  *(_DWORD *)(v33 + 84) = v26;
}

void swift_initStructMetadataWithLayoutString( uint64_t *a1, __int16 a2, unint64_t a3, char *a4, uint64_t a5, uint64_t a6)
{
  v63[0] = 0LL;
  if (a3)
  {
    uint64_t v11 = 0LL;
    unint64_t v12 = 0LL;
    unint64_t v13 = 0LL;
    LOBYTE(v14) = 1;
    LOBYTE(v15) = 1;
    do
    {
      uint64_t v16 = *(void *)&a4[8 * v11];
      if (!*(_BYTE *)(a5 + v11)) {
        uint64_t v16 = *(void *)(v16 - 8) + 64LL;
      }
      int v17 = *(_DWORD *)(v16 + 16);
      unint64_t v18 = v17;
      unint64_t v19 = (v12 + v18) & ~v18;
      if (*(_DWORD *)(a6 + 4 * v11) != (_DWORD)v19)
      {
        *(_DWORD *)(a6 + 4 * v11) = v19;
        int v17 = *(_DWORD *)(v16 + 16);
        unint64_t v18 = v17;
      }

      unint64_t v12 = *(void *)v16 + v19;
      if (v13 <= v18) {
        unint64_t v13 = v18;
      }
      int v14 = ((v17 & 0x10000) == 0) & v14;
      int v15 = ((v17 & 0x100000) == 0) & v15;
      ++v11;
    }

    while (a3 != v11);
    if (v14) {
      int v20 = 0;
    }
    else {
      int v20 = 0x10000;
    }
    if (v13 >= 8 || v12 >= 0x19) {
      int v22 = 0;
    }
    else {
      int v22 = v15;
    }
    v63[0] = v12;
    int v23 = v13 & 0xFFECFFFF;
    if (!v15)
    {
      int v24 = 0x100000;
      goto LABEL_23;
    }
  }

  else
  {
    int v23 = 0;
    unint64_t v12 = 0LL;
    int v20 = 0;
    unint64_t v13 = 0LL;
    int v22 = 1;
  }

  int v24 = 0;
LABEL_23:
  if (v22) {
    int v25 = 0;
  }
  else {
    int v25 = 0x20000;
  }
  int v26 = v24 | v23 | v20 | v25;
  int v64 = v26;
  unsigned int v65 = 0;
  unint64_t v27 = (v12 + v13) & ~v13;
  if (v27 <= 1) {
    unint64_t v27 = 1LL;
  }
  unint64_t v57 = v27;
  v63[1] = v27;
  if (a3)
  {
    unint64_t v28 = 0LL;
    unsigned int v29 = 0;
    uint64_t v30 = 0LL;
    unsigned int v31 = 1;
    do
    {
      if (*(_BYTE *)(a5 + v28))
      {
        unsigned int v33 = *(_DWORD *)(*(void *)&a4[8 * v28] + 20LL);
        if (v33 > v29) {
          unsigned int v29 = v33;
        }
      }

      else
      {
        uint64_t v32 = *(void *)&a4[8 * v28];
        if (*(_DWORD *)(*(void *)(v32 - 8) + 84LL) > v29) {
          unsigned int v29 = *(_DWORD *)(*(void *)(v32 - 8) + 84LL);
        }
        v30 += _swift_refCountBytesForMetatype(v32);
      }

      unint64_t v28 = v31++;
    }

    while (v28 < a3);
  }

  else
  {
    uint64_t v30 = 0LL;
    unsigned int v29 = 0;
  }

  LOWORD(v61) = 26;
  __int128 v34 = swift::MetadataAllocator::Allocate( (swift::MetadataAllocator *)&v61,  (v30 + 31) & 0xFFFFFFFFFFFFFFF8LL,  (const char *)1,  a4);
  __int128 v36 = v34;
  *((void *)v34 + 1) = v30;
  uint64_t v37 = 16LL;
  __int128 v61 = v34;
  uint64_t v62 = 16LL;
  unint64_t v59 = 0LL;
  unint64_t v60 = 0LL;
  uint64_t v58 = 0LL;
  if (a3)
  {
    unint64_t v38 = 0LL;
    unsigned int v39 = 1;
    do
    {
      unsigned int v41 = *(unsigned __int8 *)(a5 + v38);
      uint64_t v42 = *(void *)&a4[8 * v38];
      if (*(_BYTE *)(a5 + v38))
      {
        unint64_t v43 = (v60 + *(unsigned __int8 *)(v42 + 16)) & ~(unint64_t)*(unsigned __int8 *)(v42 + 16);
        if (v41 <= 4)
        {
          if (v41 >= 3) {
            uint64_t v44 = 0x700000000000000LL;
          }
          else {
            uint64_t v44 = 0x600000000000000LL;
          }
          uint64_t v45 = v62;
          *(void *)((char *)v61 + v62) = (v43 - v60 + v59) | v44;
          uint64_t v62 = v45 + 8;
        }

        unint64_t v40 = *(void *)v42;
        unint64_t v60 = *(void *)v42 + v43;
        unint64_t v59 = v40 - 8;
      }

      else
      {
        _swift_addRefCountStringForMetatype((uint64_t *)&v61, &v58, (unint64_t *)v42, &v60, &v59);
      }

      unint64_t v38 = v39++;
    }

    while (v38 < a3);
    unint64_t v46 = v59;
    uint64_t v47 = v61;
    uint64_t v37 = v62;
    uint64_t v48 = v58 & 0x7FFFFFFFFFFFFFFFLL;
  }

  else
  {
    uint64_t v48 = 0LL;
    unint64_t v46 = 0LL;
    uint64_t v47 = v34;
  }

  *(void *)((char *)v47 + v37) = v46;
  void *v47 = v48;
  uint64_t v49 = *a1;
  if (!(_DWORD)v49 || (_DWORD)v49 == 773 || (_DWORD)v49 == 515) {
    uint64_t v50 = (swift::MetadataAllocator **)(a1 - 3);
  }
  else {
    uint64_t v50 = (swift::MetadataAllocator **)(a1 - 2);
  }
  *uint64_t v50 = v36;
  uint64_t v51 = *(a1 - 1);
  if ((a2 & 0x100) == 0)
  {
    __int16 v66 = 12;
    uint64_t v52 = swift::MetadataAllocator::Allocate((swift::MetadataAllocator *)&v66, 0x58uLL, (const char *)8, v35);
    __int128 v53 = *(_OWORD *)(v51 + 16);
    *(_OWORD *)uint64_t v52 = *(_OWORD *)v51;
    *((_OWORD *)v52 + 1) = v53;
    __int128 v54 = *(_OWORD *)(v51 + 32);
    __int128 v55 = *(_OWORD *)(v51 + 48);
    __int128 v56 = *(_OWORD *)(v51 + 64);
    *((void *)v52 + 10) = *(void *)(v51 + 80);
    *((_OWORD *)v52 + 3) = v55;
    *((_OWORD *)v52 + 4) = v56;
    *((_OWORD *)v52 + 2) = v54;
    *(a1 - 1) = (uint64_t)v52;
    uint64_t v51 = (uint64_t)v52;
  }

  *(void *)(v51 + 8) = swift_generic_destroy;
  *(void *)(v51 + 16) = swift_generic_initWithCopy;
  *(void *)(v51 + 24) = swift_generic_assignWithCopy;
  *(void *)(v51 + 32) = swift_generic_initWithTake;
  *(void *)(v51 + 40) = swift_generic_assignWithTake;
  unsigned int v65 = v29;
  swift::installCommonValueWitnesses((uint64_t)v63, v51);
  *(void *)(v51 + 64) = v12;
  *(void *)(v51 + 72) = v57;
  *(_DWORD *)(v51 + 80) = v26;
  *(_DWORD *)(v51 + 84) = v29;
}

uint64_t _swift_refCountBytesForMetatype(uint64_t a1)
{
  unint64_t v1 = *(uint64_t (***)())(a1 - 8);
  if (!v1[8] || (*((_BYTE *)v1 + 82) & 1) == 0) {
    return 0LL;
  }
  if (*(void *)a1 != 769LL)
  {
    if (v1 == value witness table for Builtin.BridgeObject
      || v1 == value witness table for Builtin.NativeObject
      || v1 == (uint64_t (**)())&value witness table for Builtin.UnknownObject)
    {
      return 8LL;
    }

    if (*(void *)a1 <= 0x7FFuLL) {
      int v9 = *(void *)a1;
    }
    else {
      int v9 = 0;
    }
    if (v9 <= 514)
    {
      if ((v9 - 512) >= 3)
      {
        if (v9) {
          return 16LL;
        }
LABEL_31:
        if ((*(_BYTE *)(a1 + 32) & 2) != 0) {
          return 16LL;
        }
        return 8LL;
      }
    }

    else
    {
      if (v9 > 770)
      {
        uint64_t v2 = 8LL;
        if (v9 == 771 || v9 == 774) {
          return v2;
        }
        if (v9 != 773) {
          return 16LL;
        }
        a1 = *(void *)(a1 + 8);
        if (!a1) {
          return 16LL;
        }
        goto LABEL_31;
      }

      if (v9 != 515 && v9 != 516) {
        return 16LL;
      }
    }

    uint64_t v10 = *(void *)(a1 + 8);
    if (v10 && (*(_BYTE *)(v10 + 2) & 0x10) != 0) {
      return *(void *)(*(void *)(a1 - 16) + 8LL);
    }
    return 16LL;
  }

  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    return 0LL;
  }
  uint64_t v5 = 0LL;
  uint64_t v2 = 0LL;
  uint64_t v6 = a1 + 24;
  do
    v2 += _swift_refCountBytesForMetatype(*(void *)(v6 + 16LL * v5++));
  while (v4 != v5);
  return v2;
}

uint64_t *_swift_addRefCountStringForMetatype( uint64_t *result, void *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  unint64_t v5 = *a4;
  uint64_t v6 = *(a3 - 1);
  int v7 = *(_DWORD *)(v6 + 80);
  unint64_t v8 = (*a4 + v7) & ~(unint64_t)v7;
  *a4 = v8;
  int v9 = (void *)(v6 + 64);
  uint64_t v10 = *(void *)(v6 + 64);
  if (!v10) {
    return result;
  }
  unint64_t v13 = v8 - v5 + *a5;
  if ((v7 & 0x10000) == 0)
  {
    unint64_t v14 = v13 + v10;
LABEL_4:
    *a5 = v14;
LABEL_26:
    *a4 += *v9;
    return result;
  }

  int v17 = result;
  if (*a3 != 769)
  {
    if ((uint64_t (**)())v6 == value witness table for Builtin.NativeObject)
    {
      uint64_t v21 = v13 | 0x200000000000000LL;
      goto LABEL_23;
    }

    if ((ValueWitnessTable *)v6 != &value witness table for Builtin.UnknownObject)
    {
      if ((uint64_t (**)())v6 == value witness table for Builtin.BridgeObject)
      {
        uint64_t v21 = v13 | 0x800000000000000LL;
        goto LABEL_23;
      }

      if (*a3 <= 0x7FF) {
        int v19 = *a3;
      }
      else {
        int v19 = 0;
      }
      int v20 = a3;
      if (!v19 || v19 == 773 && (int v20 = (unint64_t *)a3[1]) != 0LL)
      {
        if ((v20[4] & 2) == 0) {
          goto LABEL_20;
        }
      }

      else
      {
        __n128 result = (uint64_t *)swift::TargetMetadata<swift::InProcess>::hasLayoutString(a3);
        if ((_DWORD)result)
        {
          int v22 = (const char *)*(a3 - 2);
          size_t v23 = *((void *)v22 + 1);
          if (!v23)
          {
            uint64_t v36 = *(a3 - 1);
            uint64_t v37 = *(void *)(v36 + 64);
            int v9 = (void *)(v36 + 64);
            *a5 += v37;
            goto LABEL_26;
          }

          uint64_t v24 = *(void *)v22;
          *a2 |= *(void *)v22;
          __n128 result = (uint64_t *)memcpy((void *)(*v17 + v17[1]), v22 + 16, v23);
          if (v24 < 0) {
            __n128 result = (uint64_t *)swift::swift_resolve_resilientAccessors(*v17, v17[1], v22 + 16, (uint64_t *)a3);
          }
          if (v13)
          {
            uint64_t v25 = v17[1];
            *(void *)(*v17 + v25) += v13;
            v17[1] = v25;
          }

          *a5 = *(void *)&v22[v23 + 16];
          v17[1] += v23;
          goto LABEL_25;
        }

        if (*a3 <= 0x7FF) {
          int v26 = *a3;
        }
        else {
          int v26 = 0;
        }
        if (v26 == 774 || v26 == 771)
        {
          if (*a3 == 771) {
            unint64_t v27 = a3;
          }
          else {
            unint64_t v27 = 0LL;
          }
          uint64_t v28 = 0xE00000000000000LL;
          *(void *)(*v17 + v17[1]) = v28 | v13;
          v17[1] += 8LL;
          uint64_t v29 = *(a3 - 1);
          uint64_t v31 = *(void *)(v29 + 64);
          int v9 = (void *)(v29 + 64);
          uint64_t v30 = v31;
          BOOL v32 = *((int *)v27 + 2) < 0;
          uint64_t v33 = -24LL;
          if (!v32) {
            uint64_t v33 = -8LL;
          }
          unint64_t v14 = v33 + v30;
          goto LABEL_4;
        }
      }

      *(void *)(*v17 + v17[1]) = v13 | 0xC00000000000000LL;
      uint64_t v34 = *v17;
      uint64_t v35 = v17[1] + 8;
      v17[1] = v35;
      *(void *)(v34 + v35) = a3;
      goto LABEL_24;
    }

uint64_t swift::TargetMetadata<swift::InProcess>::hasLayoutString(unint64_t *a1)
{
  uint64_t result = 0LL;
  unint64_t v3 = *a1;
  if (*a1 > 0x7FF) {
    LODWORD(v3) = 0;
  }
  if ((int)v3 <= 514)
  {
    if ((v3 - 512) >= 3)
    {
      if ((_DWORD)v3) {
        return result;
      }
      if ((a1[4] & 2) == 0) {
        return 0LL;
      }
      uint64_t v4 = a1[8];
      if (!v4) {
        return 0LL;
      }
      return (*(unsigned __int8 *)(v4 + 2) >> 4) & 1;
    }

swift::MetadataAllocator *swift_initRawStructMetadata( swift::MetadataAllocator *result, __int16 a2, uint64_t *a3, char *a4)
{
  int v4 = (int)a4;
  uint64_t v6 = (swift::MetadataAllocator *)*((void *)result - 1);
  if ((a2 & 0x100) == 0)
  {
    int v7 = result;
    __int16 v17 = 12;
    uint64_t result = swift::MetadataAllocator::Allocate((swift::MetadataAllocator *)&v17, 0x58uLL, (const char *)8, a4);
    __int128 v8 = *((_OWORD *)v6 + 1);
    *(_OWORD *)uint64_t result = *(_OWORD *)v6;
    *((_OWORD *)result + 1) = v8;
    __int128 v9 = *((_OWORD *)v6 + 2);
    __int128 v10 = *((_OWORD *)v6 + 3);
    __int128 v11 = *((_OWORD *)v6 + 4);
    *((void *)result + 10) = *((void *)v6 + 10);
    *((_OWORD *)result + 3) = v10;
    *((_OWORD *)result + 4) = v11;
    *((_OWORD *)result + 2) = v9;
    *((void *)v7 - 1) = result;
    uint64_t v6 = result;
  }

  uint64_t v12 = *a3;
  uint64_t v13 = a3[1];
  int v14 = *((unsigned __int8 *)a3 + 16);
  int v15 = *((_DWORD *)a3 + 5);
  uint64_t v16 = v13 * v4;
  if (v4 >= 0)
  {
    v13 *= v4;
    uint64_t v12 = v16;
  }

  *((void *)v6 + 8) = v12;
  *((void *)v6 + 9) = v13;
  *((_DWORD *)v6 + 20) = v14 | 0x800000;
  *((_DWORD *)v6 + 21) = v15;
  return result;
}

uint64_t supportsLazyObjcClassNames(void)
{
  if (qword_18C486BF0 != -1) {
    dispatch_once_f( &qword_18C486BF0,  &supportsLazyObjcClassNames(void)::$_0::operator() const(void)::TheLazy,  (dispatch_function_t)supportsLazyObjcClassNames(void)::$_0::operator() const(void)::{lambda(void *)#1}::__invoke);
  }
  return supportsLazyObjcClassNames(void)::$_0::operator() const(void)::TheLazy;
}

uint64_t getSuperclassMetadata(uint64_t a1, uint64_t *a2)
{
  int v4 = a2 + 8;
  uint64_t v3 = a2[8];
  uint64_t v5 = *(int *)(v3 + 20);
  uint64_t v6 = (_BYTE *)(v5 + v3 + 20);
  if ((_DWORD)v5) {
    BOOL v7 = v6 == 0LL;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    return 0LL;
  }
  SymbolicMangledNameStringRef = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef(v6, (const char *)a2);
  int v14 = SymbolicMangledNameStringRef;
  int v15 = v11;
  uint64_t v16 = 0LL;
  v43[0] = SymbolicMangledNameStringRef;
  v43[1] = v11;
  int v37 = 0;
  uint64_t v17 = *a2;
  if ((int)v17 <= 514)
  {
    if ((v17 - 512) >= 3)
    {
      if ((_DWORD)v17) {
        goto LABEL_18;
      }
      unint64_t v18 = v4;
      if ((a2[4] & 2) == 0)
      {
        uint64_t v16 = 0LL;
        goto LABEL_18;
      }

      goto LABEL_17;
    }

uint64_t swift::SubstGenericParametersFromMetadata::SubstGenericParametersFromMetadata( uint64_t a1, uint64_t a2, const char *a3, char *a4)
{
  uint64_t v5 = 0LL;
  *(_DWORD *)a1 = 0;
  uint64_t v6 = *(void *)a2;
  if (*(void *)a2 > 0x7FFuLL) {
    LODWORD(v6) = 0;
  }
  if ((int)v6 > 514)
  {
    if ((_DWORD)v6 != 515 && (_DWORD)v6 != 516) {
      goto LABEL_12;
    }
LABEL_10:
    BOOL v7 = (uint64_t *)(a2 + 8);
    goto LABEL_11;
  }

  if (!(_DWORD)v6)
  {
    if ((*(_BYTE *)(a2 + 32) & 2) == 0)
    {
      uint64_t v5 = 0LL;
      goto LABEL_12;
    }

    BOOL v7 = (uint64_t *)(a2 + 64);
LABEL_11:
    uint64_t v5 = *v7;
  }

const void **__swift::__runtime::llvm::StringRef::str@<X0>(const void **this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = (void *)a2;
  uint64_t v3 = *this;
  if (!*this)
  {
    *(void *)a2 = 0LL;
    *(void *)(a2 + 8) = 0LL;
    *(void *)(a2 + 16) = 0LL;
    return this;
  }

  size_t v4 = (size_t)this[1];
  if (v4 >= 0x7FFFFFFFFFFFFFF8LL) {
    abort();
  }
  if (v4 >= 0x17)
  {
    uint64_t v5 = (v4 & 0xFFFFFFFFFFFFFFF8LL) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v5 = v4 | 7;
    }
    uint64_t v6 = v5 + 1;
    BOOL v7 = operator new(v5 + 1);
    v2[1] = v4;
    v2[2] = v6 | 0x8000000000000000LL;
    *uint64_t v2 = v7;
    uint64_t v2 = v7;
  }

  else
  {
    *(_BYTE *)(a2 + 23) = v4;
    if (!v4) {
      goto LABEL_11;
    }
  }

  this = (const void **)memmove(v2, v3, v4);
LABEL_11:
  *((_BYTE *)v2 + v4) = 0;
  return this;
}

swift *swift_initClassMetadata(uint64_t a1, __int16 a2, size_t a3, uint64_t a4, uint64_t a5)
{
  return _swift_initClassMetadataImpl(a1, a2, a3, a4, a5, 0);
}

swift *_swift_initClassMetadataImpl(uint64_t a1, __int16 a2, size_t a3, uint64_t a4, uint64_t a5, char a6)
{
  if ((a6 & 1) != 0) {
    unint64_t v10 = 1LL;
  }
  else {
    unint64_t v10 = 255LL;
  }
  if ((a6 & 1) != 0) {
    uint64_t v11 = 257LL;
  }
  else {
    uint64_t v11 = 255LL;
  }
  uint64_t result = (swift *)getSuperclassMetadata(v11, (uint64_t *)a1);
  if (!result)
  {
    *(void *)(a1 + 8) = 0LL;
    uint64_t v17 = (swift **)(a1 + 8);
LABEL_14:
    uint64_t result = (swift *)swift::getRootSuperclass(result);
    *uint64_t v17 = result;
LABEL_15:
    if (_swift_initClassMetadataImpl(swift::TargetClassMetadata<swift::InProcess,swift::TargetAnyClassMetadataObjCInterop<swift::InProcess>> *,swift::ClassLayoutFlags,unsigned long,swift::TargetTypeLayout<swift::InProcess> const* const*,unsigned long *,BOOL)::onceToken != -1) {
      dispatch_once_f( &_swift_initClassMetadataImpl(swift::TargetClassMetadata<swift::InProcess,swift::TargetAnyClassMetadataObjCInterop<swift::InProcess>> *,swift::ClassLayoutFlags,unsigned long,swift::TargetTypeLayout<swift::InProcess> const* const*,unsigned long *,BOOL)::onceToken,  0LL,  (dispatch_function_t)_swift_initClassMetadataImpl(swift::TargetClassMetadata<swift::InProcess,swift::TargetAnyClassMetadataObjCInterop<swift::InProcess>> *,swift::ClassLayoutFlags,unsigned long,swift::TargetTypeLayout<swift::InProcess> const* const*,unsigned long *,BOOL)::$_0::__invoke);
    }
    v171 = v17;
    unint64_t v18 = *v17;
    if (v18)
    {
      int v19 = v18;
      do
      {
        if ((*((_BYTE *)v19 + 32) & 2) == 0) {
          break;
        }
        uint64_t v21 = *((void *)v19 + 8);
        unsigned int v22 = *(_DWORD *)v21;
        if ((*(_DWORD *)v21 & 0x80) != 0)
        {
          unsigned int v23 = *(unsigned __int16 *)(v21 + 56);
          if (*(_WORD *)(v21 + 56))
          {
            if ((v22 & 0x20000000) != 0)
            {
              uint64_t v26 = *(int *)(v21 + 24);
              unint64_t v27 = (unint64_t *)(v26 + v21 + 24);
              if (!(_DWORD)v26) {
                unint64_t v27 = 0LL;
              }
              unint64_t v28 = *v27;
              if (!*v27)
              {
                computeMetadataBoundsFromSuperclass(*((unsigned int **)v19 + 8), (uint64_t)v27, v14, v15);
                unsigned int v23 = *(unsigned __int16 *)(v21 + 56);
              }

              unint64_t v29 = v28 >> 3;
            }

            else
            {
              if ((v22 & 0x10000000) != 0)
              {
                int v24 = 0;
                uint64_t v25 = (_DWORD *)(v21 + 24);
              }

              else
              {
                int v24 = *(_DWORD *)(v21 + 28);
                uint64_t v25 = (_DWORD *)(v21 + 32);
              }

              LODWORD(v29) = v24 - *v25;
            }

            uint64_t result = (swift *)memcpy((void *)(a1 + 8LL * (int)v29), (char *)v18 + 8 * (int)v29, 8LL * v23);
            unsigned int v22 = *(_DWORD *)v21;
          }
        }

        if ((a2 & 0x100) == 0 && (v22 & 0x80000000) != 0)
        {
          if ((v22 & 0x80) != 0)
          {
            __int16 v33 = *(_WORD *)(v21 + 58);
            uint64_t v34 = &v32[2 * (v33 & 1)];
            if ((v33 & 1) != 0) {
              v34 += 4 * *v32;
            }
            unint64_t v31 = (unint64_t)v34 + (v33 & 2);
            if ((v33 & 2) != 0
              && (uint8x8_t v35 = (uint8x8_t)vcnt_s8((int8x8_t)*v34), v35.i16[0] = vaddlv_u8(v35), v31 += 2LL * v35.u32[0], *v34))
            {
              unsigned int v30 = *(unsigned __int16 *)((char *)&v34[v35.u32[0] - 1] + (v33 & 2));
            }

            else
            {
              unsigned int v30 = 0;
            }
          }

          else
          {
            unsigned int v30 = 0;
            unint64_t v31 = (v21 + 16LL * ((v22 >> 7) & 1) + 47) & 0xFFFFFFFFFFFFFFFCLL;
          }

          __int16 v36 = (unsigned int *)(((v31 + 3) & 0xFFFFFFFFFFFFFFFCLL)
                               + 12LL * v30
                               + 4LL * ((v22 >> 29) & 1)
                               + 4LL * ((v22 & 0x30000) == 0x20000)
                               + 12LL * ((v22 & 0x30000) == 0x10000));
          if ((v22 & 0x20000000) != 0)
          {
            uint64_t v38 = *(int *)(v21 + 24);
            if ((_DWORD)v38) {
              unsigned int v39 = (unint64_t *)(v38 + v21 + 24);
            }
            else {
              unsigned int v39 = 0LL;
            }
            unint64_t v40 = atomic_load(v39);
            if (!v40)
            {
              computeMetadataBoundsFromSuperclass((unsigned int *)v21, (uint64_t)v39, v14, v15);
              unint64_t v40 = v41;
            }

            unsigned int v37 = *v36 + (v40 >> 3);
          }

          else
          {
            unsigned int v37 = *v36;
          }

          uint64_t result = (swift *)memcpy((void *)(a1 + 8LL * v37), (char *)v18 + 8 * v37, 8LL * v36[1]);
        }

        unsigned int v20 = *(_DWORD *)(v21 + 40);
        if (v20)
        {
          if ((*(_BYTE *)(v21 + 3) & 0x20) != 0)
          {
            uint64_t v42 = *(int *)(v21 + 24);
            if ((_DWORD)v42) {
              unint64_t v43 = (unint64_t *)(v42 + v21 + 24);
            }
            else {
              unint64_t v43 = 0LL;
            }
            unint64_t v44 = atomic_load(v43);
            if (!v44)
            {
              computeMetadataBoundsFromSuperclass((unsigned int *)v21, (uint64_t)v43, v14, v15);
              unint64_t v44 = v45;
            }

            unsigned int v20 = *(_DWORD *)(v21 + 40) + (v44 >> 3);
          }

          uint64_t result = (swift *)memcpy((void *)(a1 + 8LL * v20), (char *)v18 + 8 * v20, 8LL * *(unsigned int *)(v21 + 36));
        }

        int v19 = (swift *)*((void *)v19 + 1);
      }

      while (v19);
      if ((**(_BYTE **)(a1 + 64) & 0x80) != 0 || (*((_BYTE *)v18 + 32) & 2) != 0 && (**((_BYTE **)v18 + 8) & 0x80) != 0)
      {
        Class Class = object_getClass((id)a1);
        uint64_t result = (swift *)object_getClass(v18);
        Class[1].isa = (Class)result;
      }
    }

    if ((a2 & 0x100) == 0)
    {
      uint64_t v47 = *(unsigned int **)(a1 + 64);
      unint64_t v48 = *v47;
      if ((v48 & 0x80000000) != 0)
      {
        if ((v48 & 0x80) != 0)
        {
          uint64_t v51 = (unsigned __int16 *)((((unint64_t)&v47[4 * ((v48 >> 7) & 1) + 11]
                                     + *((unsigned __int16 *)v47 + 26)
                                     + 3) & 0xFFFFFFFFFFFFFFFCLL)
                                   + 12LL * *((unsigned __int16 *)v47 + 27));
          __int16 v52 = *((_WORD *)v47 + 29);
          __int128 v53 = &v51[2 * (v52 & 1)];
          if ((v52 & 1) != 0) {
            v53 += 4 * *v51;
          }
          unint64_t v50 = (unint64_t)v53 + (v52 & 2);
          if ((v52 & 2) != 0
            && (uint8x8_t v54 = (uint8x8_t)vcnt_s8((int8x8_t)*v53), v54.i16[0] = vaddlv_u8(v54), v50 += 2LL * v54.u32[0], *v53))
          {
            unsigned int v49 = *(unsigned __int16 *)((char *)&v53[v54.u32[0] - 1] + (v52 & 2));
          }

          else
          {
            unsigned int v49 = 0;
          }
        }

        else
        {
          unsigned int v49 = 0;
          unint64_t v50 = ((unint64_t)&v47[4 * ((v48 >> 7) & 1) + 11] + 3) & 0xFFFFFFFFFFFFFFFCLL;
        }

        __int128 v55 = (unsigned int *)(((v50 + 3) & 0xFFFFFFFFFFFFFFFCLL)
                             + 12LL * v49
                             + 4 * ((v48 >> 29) & 1)
                             + 4LL * ((v48 & 0x30000) == 0x20000)
                             + 12LL * ((v48 & 0x30000) == 0x10000));
        if ((v48 & 0x20000000) != 0)
        {
          uint64_t v57 = (int)v47[6];
          if ((_DWORD)v57) {
            uint64_t v58 = (unint64_t *)((char *)v47 + v57 + 24);
          }
          else {
            uint64_t v58 = 0LL;
          }
          unint64_t v59 = atomic_load(v58);
          if (!v59)
          {
            computeMetadataBoundsFromSuperclass(*(unsigned int **)(a1 + 64), (uint64_t)v58, v14, v15);
            unint64_t v59 = v60;
          }

          unsigned int v56 = *v55 + (v59 >> 3);
        }

        else
        {
          unsigned int v56 = *v55;
        }

        uint64_t result = (swift *)swift::TargetClassDescriptor<swift::InProcess>::getMethodDescriptors((unsigned __int16 *)v47);
        uint64_t v61 = v55[1];
        if ((_DWORD)v61)
        {
          if (v61 >= 9)
          {
            uint64_t v62 = 0LL;
            if (!__CFADD__(v56, v61 - 1) && !((unint64_t)(v61 - 1) >> 32))
            {
              uint64_t v63 = v61 & 7;
              if ((v61 & 7) == 0) {
                uint64_t v63 = 8LL;
              }
              uint64_t v62 = v61 - v63;
              uint64_t v64 = (uint64_t)result + 60;
              uint64_t v65 = v62;
              unsigned int v66 = v56;
              do
              {
                uint64_t v67 = (const float *)(v64 - 56);
                unsigned __int128 v68 = (unsigned __int128)vld2q_f32(v67);
                v69.i64[0] = v64 - 56;
                v69.i64[1] = v64 - 48;
                v70.i64[0] = v64 - 40;
                v70.i64[1] = v64 - 32;
                uint64_t v71 = (const float *)(v64 - 24);
                unsigned __int128 v72 = (unsigned __int128)vld2q_f32(v71);
                v73.i64[0] = v64 - 24;
                v73.i64[1] = v64 - 16;
                v74.i64[0] = v64 - 8;
                v74.i64[1] = v64;
                uint64_t v75 = (int8x16_t *)(a1 + 8LL * v66);
                v76.i64[0] = SDWORD2(v68);
                v76.i64[1] = SHIDWORD(v68);
                int8x16_t v77 = (int8x16_t)vceqzq_s64(v76);
                v76.i64[0] = (int)v68;
                v76.i64[1] = SDWORD1(v68);
                int8x16_t v78 = (int8x16_t)vceqzq_s64(v76);
                v76.i64[0] = SDWORD2(v72);
                v76.i64[1] = SHIDWORD(v72);
                int8x16_t v79 = (int8x16_t)vceqzq_s64(v76);
                v76.i64[0] = (int)v72;
                v76.i64[1] = SDWORD1(v72);
                int8x16_t *v75 = vbicq_s8((int8x16_t)vaddw_s32(v69, *(int32x2_t *)&v68), v78);
                v75[1] = vbicq_s8((int8x16_t)vaddw_high_s32(v70, (int32x4_t)v68), v77);
                v75[2] = vbicq_s8((int8x16_t)vaddw_s32(v73, *(int32x2_t *)&v72), (int8x16_t)vceqzq_s64(v76));
                v75[3] = vbicq_s8((int8x16_t)vaddw_high_s32(v74, (int32x4_t)v72), v79);
                v64 += 64LL;
                v66 += 8;
                v65 -= 8LL;
              }

              while (v65);
            }
          }

          else
          {
            uint64_t v62 = 0LL;
          }

          uint64_t v80 = v61 - v62;
          unsigned __int16 v81 = (int *)((char *)result + 8 * v62 + 4);
          unsigned int v82 = v56 + v62;
          uint64_t v83 = v81;
          do
          {
            uint64_t v84 = *v81;
            v81 += 2;
            uint64_t v85 = (char *)v83 + v84;
            if ((_DWORD)v84) {
              uint64_t v86 = v85;
            }
            else {
              uint64_t v86 = 0LL;
            }
            *(void *)(a1 + 8LL * v82) = v86;
            v83 += 2;
            ++v82;
            --v80;
          }

          while (v80);
        }
      }

      if ((*((_BYTE *)v47 + 3) & 0x40) != 0)
      {
        uint64_t result = (swift *)swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetClassDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetClassDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl((unsigned __int16 *)v47);
        v87 = result;
        if ((*((_BYTE *)v47 + 3) & 0x40) != 0)
        {
          uint64_t result = (swift *)swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetClassDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetClassDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl((unsigned __int16 *)v47);
          unint64_t v89 = *v47;
          v88 = (char *)result + 4 * ((v89 >> 30) & 1);
          if ((v89 & 0x40000000) != 0) {
            uint64_t result = (swift *)swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetClassDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetClassDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl((unsigned __int16 *)v47);
          }
        }

        else
        {
          v88 = 0LL;
        }

        size_t v170 = (size_t)v87;
        uint64_t v90 = *(unsigned int *)v87;
        if ((_DWORD)v90)
        {
          v91 = (int *)(v88 + 4);
          while (1)
          {
            uint64_t v96 = *(v91 - 1);
            if ((_DWORD)v96) {
              break;
            }
            v97 = 0LL;
            uint64_t v98 = *v91;
            if ((_DWORD)v98) {
              goto LABEL_117;
            }
LABEL_110:
            v88 += 12;
            v91 += 3;
            if (!--v90) {
              goto LABEL_143;
            }
          }

          v97 = (unsigned __int16 *)&v88[v96 & 0xFFFFFFFFFFFFFFFELL];
          if ((v96 & 1) != 0) {
            v97 = *(unsigned __int16 **)v97;
          }
          uint64_t v98 = *v91;
          if (!(_DWORD)v98) {
            goto LABEL_110;
          }
LABEL_117:
          v99 = &v88[(v98 & 0xFFFFFFFFFFFFFFFELL) + 4];
          if ((v98 & 1) != 0) {
            v99 = *(char **)v99;
          }
          if (!v97 || !v99) {
            goto LABEL_110;
          }
          uint64_t result = (swift *)swift::TargetClassDescriptor<swift::InProcess>::getMethodDescriptors(v97);
          unint64_t v102 = v99 - (char *)result;
          if (v99 < (char *)result || v99 >= (char *)result + 8 * v100) {
            swift::fatalError( 0LL,  "resilient vtable at %p contains out-of-bounds method descriptor %p\n",  v101,  v15,  v170,  v99);
          }
          unint64_t v104 = *(unsigned int *)v97;
          if ((v104 & 0x80000000) != 0)
          {
            if ((v104 & 0x80) != 0)
            {
              unsigned __int16 v109 = v97[29];
              v110 = &v108[2 * (v109 & 1)];
              if ((v109 & 1) != 0) {
                v110 += 4 * *v108;
              }
              unint64_t v107 = (unint64_t)v110 + (v109 & 2);
              if ((v109 & 2) != 0
                && (uint8x8_t v111 = (uint8x8_t)vcnt_s8((int8x8_t)*v110),
                    v111.i16[0] = vaddlv_u8(v111),
                    v107 += 2LL * v111.u32[0],
                    *v110))
              {
                unsigned int v106 = *(unsigned __int16 *)((char *)&v110[v111.u32[0] - 1] + (v109 & 2));
              }

              else
              {
                unsigned int v106 = 0;
              }
            }

            else
            {
              unsigned int v106 = 0;
              unint64_t v107 = ((unint64_t)&v97[8 * ((v104 >> 7) & 1) + 23] + 1) & 0xFFFFFFFFFFFFFFFCLL;
            }

            v105 = (unsigned int *)(((v107 + 3) & 0xFFFFFFFFFFFFFFFCLL)
                                  + 12LL * v106
                                  + 4 * ((v104 >> 29) & 1)
                                  + 4LL * ((v104 & 0x30000) == 0x20000)
                                  + 12LL * ((v104 & 0x30000) == 0x10000));
            if ((v104 & 0x20000000) != 0) {
              goto LABEL_137;
            }
          }

          else
          {
            v105 = 0LL;
            if ((v104 & 0x20000000) != 0)
            {
LABEL_137:
              uint64_t v112 = *((int *)v97 + 6);
              if ((_DWORD)v112) {
                v113 = (unint64_t *)((char *)v97 + v112 + 24);
              }
              else {
                v113 = 0LL;
              }
              unint64_t v114 = atomic_load(v113);
              if (!v114)
              {
                uint64_t result = (swift *)computeMetadataBoundsFromSuperclass((unsigned int *)v97, (uint64_t)v113, v101, v15);
                unint64_t v114 = v115;
              }

              unsigned int v92 = *v105 + (v114 >> 3);
              goto LABEL_106;
            }
          }

          unsigned int v92 = *v105;
LABEL_106:
          unint64_t v93 = (v102 >> 3) + v92;
          uint64_t v94 = v91[1];
          if ((_DWORD)v94) {
            uint64_t v95 = (uint64_t)&v88[v94 + 8];
          }
          else {
            uint64_t v95 = 0LL;
          }
          *(void *)(a1 + 8 * v93) = v95;
          goto LABEL_110;
        }
      }
    }

swift *swift_initClassMetadata2(uint64_t a1, __int16 a2, size_t a3, uint64_t a4, uint64_t a5)
{
  return _swift_initClassMetadataImpl(a1, a2, a3, a4, a5, 1);
}

swift *swift_updateClassMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return _swift_updateClassMetadataImpl(a1, a3, a4, a5, 0);
}

swift *_swift_updateClassMetadataImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if ((a5 & 1) != 0) {
    unint64_t v9 = 1LL;
  }
  else {
    unint64_t v9 = 255LL;
  }
  if ((a5 & 1) != 0) {
    uint64_t v10 = 257LL;
  }
  else {
    uint64_t v10 = 255LL;
  }
  uint64_t result = (swift *)getSuperclassMetadata(v10, (uint64_t *)a1);
  if (result) {
    BOOL v14 = v9 >= v12;
  }
  else {
    BOOL v14 = 1;
  }
  if (v14)
  {
    uint64_t v15 = *(void *)(a1 + 32) & 0x7FFFFFFFF8LL;
    uint64_t v16 = *(void *)(a1 + 8);
    if (!v16 || v16 == swift::getRootSuperclass(result))
    {
      unsigned int v18 = 16;
      unint64_t v19 = 7LL;
    }

    else
    {
      uint64_t v17 = *(void *)(a1 + 8);
      if ((*(_BYTE *)(v17 + 32) & 2) != 0)
      {
        unsigned int v18 = *(_DWORD *)(v17 + 48);
        unint64_t v19 = *(unsigned __int16 *)(v17 + 52);
      }

      else
      {
        unsigned int v18 = *(_DWORD *)(v15 + 4);
        unint64_t v19 = 15LL;
      }
    }

    unsigned int v20 = *(_DWORD *)(v15 + 4);
    if (v18 > v20)
    {
      *(_DWORD *)(v15 + 4) = v18;
      unsigned int v20 = v18;
    }

    unint64_t v21 = v20;
    if (a2)
    {
      uint64_t v22 = 0LL;
      do
      {
        uint64_t v25 = *(void *)(a3 + 8 * v22);
        if (*(void *)(a4 + 8 * v22) || *(void *)v25)
        {
          unint64_t v23 = *(unsigned __int8 *)(v25 + 16);
          unint64_t v24 = (v21 + v23) & ~v23;
          *(void *)(a4 + 8 * v22) = v24;
          unint64_t v21 = v24 + *(void *)v25;
          if (v19 <= v23) {
            unint64_t v19 = v23;
          }
        }

        ++v22;
      }

      while (a2 != v22);
    }

    *(_DWORD *)(a1 + 48) = v21;
    previously = (objc_class *)a1;
    *(_WORD *)(a1 + 52) = v19;
    if (v21 != *(_DWORD *)(v15 + 8)) {
      *(_DWORD *)(v15 + 8) = v21;
    }
    if (a2)
    {
      uint64_t v26 = *(void *)(a1 + 32) & 0x7FFFFFFFF8LL;
      unint64_t v27 = *(swift::MetadataAllocator **)(v26 + 0x30);
      if (v27)
      {
        uint64_t v28 = 0LL;
        int v29 = 0;
        char v30 = 0;
        do
        {
          unint64_t v31 = *(uint64_t **)(a3 + 8 * v28);
          uint64_t v32 = (uint64_t)v27 + 32 * v28 + 8;
          __int16 v33 = *(void **)v32;
          if (*(void *)v32)
          {
            uint64_t v34 = *(void *)(a4 + 8 * v28);
            if (*v33 != v34) {
              *__int16 v33 = v34;
            }
          }

          uint64_t v35 = *v31;
          if (*v31 != *(_DWORD *)(v32 + 28))
          {
            if ((v30 & 1) == 0)
            {
              unint64_t v27 = swift::MetadataAllocator::Allocate( (swift::MetadataAllocator *)&getResilientMetadataAllocator(void)::allocator,  (32 * a2) | 8,  (const char *)4,  v13);
              memcpy(v27, *(const void **)(v26 + 48), (32 * a2) | 8);
              *(void *)(v26 + 48) = v27;
              uint64_t v32 = (uint64_t)v27 + 32 * v28 + 8;
              uint64_t v35 = *v31;
            }

            *(_DWORD *)(v32 + 28) = v35;
            *(void *)(v32 + 16) = 0LL;
            int v36 = -1;
            do
              ++v36;
            while (*((unsigned __int8 *)v31 + 16) + 1 != 1 << v36);
            *(_DWORD *)(v32 + 24) = v36;
            char v30 = 1;
          }

          uint64_t v28 = ++v29;
        }

        while (v29 != a2);
      }
    }

    _objc_realizeClassFromSwift(previously, previously);
    return 0LL;
  }

  return result;
}

swift *swift_updateClassMetadata2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return _swift_updateClassMetadataImpl(a1, a3, a4, a5, 1);
}

uint64_t swift_lookUpClassMethod(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  unint64_t v6 = *a3;
  if ((v6 & 0x80000000) != 0)
  {
    if ((v6 & 0x80) != 0)
    {
      __int16 v11 = *((_WORD *)a3 + 29);
      unint64_t v12 = &v10[2 * (v11 & 1)];
      if ((v11 & 1) != 0) {
        v12 += 4 * *v10;
      }
      unint64_t v9 = (unint64_t)v12 + (v11 & 2);
      if ((v11 & 2) != 0
        && (uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)*v12), v13.i16[0] = vaddlv_u8(v13), v9 += 2LL * v13.u32[0], *v12))
      {
        unsigned int v8 = *(unsigned __int16 *)((char *)&v12[v13.u32[0] - 1] + (v11 & 2));
      }

      else
      {
        unsigned int v8 = 0;
      }
    }

    else
    {
      unsigned int v8 = 0;
      unint64_t v9 = ((unint64_t)&a3[4 * ((v6 >> 7) & 1) + 11] + 3) & 0xFFFFFFFFFFFFFFFCLL;
    }

    BOOL v7 = (int *)(((v9 + 3) & 0xFFFFFFFFFFFFFFFCLL)
               + 12LL * v8
               + 4 * ((v6 >> 29) & 1)
               + 4LL * ((v6 & 0x30000) == 0x20000)
               + 12LL * ((v6 & 0x30000) == 0x10000));
  }

  else
  {
    BOOL v7 = 0LL;
  }

  unint64_t MethodDescriptors = swift::TargetClassDescriptor<swift::InProcess>::getMethodDescriptors((unsigned __int16 *)a3);
  if ((*((_BYTE *)a3 + 3) & 0x20) != 0)
  {
    uint64_t v18 = (int)a3[6];
    if ((_DWORD)v18) {
      unint64_t v19 = (unint64_t *)((char *)a3 + v18 + 24);
    }
    else {
      unint64_t v19 = 0LL;
    }
    unint64_t v20 = atomic_load(v19);
    if (!v20)
    {
      computeMetadataBoundsFromSuperclass(a3, (uint64_t)v19, v14, v15);
      unint64_t v20 = v21;
    }

    int v17 = *v7 + (v20 >> 3);
  }

  else
  {
    int v17 = *v7;
  }

  return *(void *)(a1 + 8LL * (v17 + ((a2 - MethodDescriptors) >> 3)));
}

unint64_t swift::TargetClassDescriptor<swift::InProcess>::getMethodDescriptors(unsigned __int16 *a1)
{
  unint64_t v1 = *(unsigned int *)a1;
  if ((v1 & 0x80000000) == 0) {
    return 0LL;
  }
  if ((v1 & 0x80) != 0)
  {
    unsigned __int16 v6 = a1[29];
    BOOL v7 = &v5[2 * (v6 & 1)];
    if ((v6 & 1) != 0) {
      v7 += 4 * *v5;
    }
    unint64_t v4 = (unint64_t)v7 + (v6 & 2);
    if ((v6 & 2) != 0
      && (uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)*v7), v8.i16[0] = vaddlv_u8(v8), v4 += 2LL * v8.u32[0], *v7))
    {
      unsigned int v3 = *(unsigned __int16 *)((char *)&v7[v8.u32[0] - 1] + (v6 & 2));
    }

    else
    {
      unsigned int v3 = 0;
    }
  }

  else
  {
    unsigned int v3 = 0;
    unint64_t v4 = ((unint64_t)&a1[8 * ((v1 >> 7) & 1) + 23] + 1) & 0xFFFFFFFFFFFFFFFCLL;
  }

  return ((v4 + 3) & 0xFFFFFFFFFFFFFFFCLL)
       + 12LL * v3
       + 4 * ((v1 >> 29) & 1)
       + 4LL * ((v1 & 0x30000) == 0x20000)
       + 12LL * ((v1 & 0x30000) == 0x10000)
       + ((v1 >> 28) & 8);
}

unint64_t swift_getMetatypeMetadata(uint64_t a1)
{
  uint64_t v41 = a1;
  unint64_t v1 = atomic_load((unint64_t *)&qword_18C486C30);
  if (v1 && *(void *)(v1 + 24) == v41) {
    goto LABEL_56;
  }
  do
    unsigned int v2 = __ldaxr((unsigned int *)&MetatypeTypes);
  while (__stxr(v2 + 1, (unsigned int *)&MetatypeTypes));
  do
  {
    unint64_t v3 = atomic_load(&qword_18C486C10);
    unint64_t v4 = atomic_load((unint64_t *)&qword_18C486C18);
    unsigned int v5 = atomic_load((unsigned int *)&dword_18C486C0C);
    unint64_t v6 = atomic_load(&qword_18C486C10);
  }

  while (v3 != v6);
  if (v3) {
    BOOL v7 = v4 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7 && v5 != 0)
  {
    if (v9)
    {
      qword_18C486C30 = *v9;
      unint64_t v1 = *v9;
      do
        unsigned int v10 = __ldxr((unsigned int *)&MetatypeTypes);
      while (__stlxr(v10 - 1, (unsigned int *)&MetatypeTypes));
      goto LABEL_56;
    }
  }

  do
    unsigned int v11 = __ldxr((unsigned int *)&MetatypeTypes);
  while (__stlxr(v11 - 1, (unsigned int *)&MetatypeTypes));
  uint64_t v42 = v41;
  os_unfair_lock_lock((os_unfair_lock_t)&unk_18C486C20);
  uint64_t v12 = qword_18C486C18;
  BOOL v13 = (qword_18C486C18 & 3) == 0;
  if ((qword_18C486C18 & 0xFFFFFFFFFFFFFFFCLL) == 0) {
    BOOL v13 = 1;
  }
  BOOL v40 = v13;
  if (v13) {
    int v14 = 4;
  }
  else {
    int v14 = *(unsigned __int8 *)(qword_18C486C18 & 0xFFFFFFFFFFFFFFFCLL);
  }
  unint64_t v15 = dword_18C486C0C;
  uint64_t v16 = (_DWORD *)qword_18C486C10;
  if (!v17)
  {
    char v39 = v12;
    __src = v16 + 2;
    unint64_t v38 = v12 & 0xFFFFFFFFFFFFFFFCLL;
    uint64_t v21 = (v15 + 1);
    if ((1LL << v14) / (unint64_t)((1LL << v14) - v21) < 4)
    {
      LOBYTE(v26) = v39;
      if (v16) {
        goto LABEL_46;
      }
    }

    else
    {
      unsigned int v22 = (v14 + 1);
      if (v22 >= 0x11) {
        unsigned int v23 = 4;
      }
      else {
        unsigned int v23 = 2;
      }
      if (v22 < 9) {
        size_t v24 = 1LL;
      }
      else {
        size_t v24 = v23;
      }
      unint64_t v25 = (unint64_t)calloc(2LL << v14, v24);
      if (!v25) {
        swift::hashable_support::findHashableBaseTypeOfHashableType();
      }
      if ((_DWORD)v24 != 1)
      {
        if ((_DWORD)v24 == 4) {
          size_t v24 = 3LL;
        }
        else {
          size_t v24 = 2LL;
        }
      }

      unint64_t v26 = v24 | v25;
      *(_BYTE *)unint64_t v25 = v14 + 1;
      if (v14) {
        __asm { BR              X9 }
      }

      atomic_store(v26, (unint64_t *)&qword_18C486C18);
      if (!v40)
      {
        unint64_t v27 = malloc(0x10uLL);
        *unint64_t v27 = qword_18C486C28;
        v27[1] = v38;
        qword_18C486C28 = (uint64_t)v27;
      }

      LODWORD(v21) = v15 + 1;
      if (v16)
      {
LABEL_46:
        unint64_t v28 = (unint64_t)v16;
      }
    }

    int v29 = v16;
    unint64_t v30 = v15 + (v15 >> 2);
    if (v30 <= v15 + 1) {
      unint64_t v30 = v15 + 1;
    }
    size_t v31 = malloc_good_size(8 * v30 + 8);
    uint64_t v32 = malloc(v31);
    if (!v32) {
      swift::hashable_support::findHashableBaseTypeOfHashableType();
    }
    unint64_t v28 = (unint64_t)v32;
    *uint64_t v32 = (v31 + 0x7FFFFFFF8LL) >> 3;
    if (v29)
    {
      memcpy(v32 + 2, __src, 8 * v15);
      __int16 v33 = malloc(0x10uLL);
      *__int16 v33 = qword_18C486C28;
      v33[1] = v29;
      qword_18C486C28 = (uint64_t)v33;
    }

    atomic_store(v28, &qword_18C486C10);
LABEL_53:
    __int16 v43 = 4;
    uint64_t v34 = swift::MetadataAllocator::Allocate((swift::MetadataAllocator *)&v43, 0x20uLL, (const char *)8, v18);
    uint64_t v35 = v41;
    *((void *)v34 + 1) = value witness table for Builtin.NativeObject.Type;
    *((void *)v34 + 2) = 772LL;
    *((void *)v34 + 3) = v35;
    *(void *)(v28 + 8 * v15 + 8) = v34;
    atomic_store(v21, (unsigned int *)&dword_18C486C0C);
    __asm { BR              X11 }
  }

  unint64_t v1 = *v17;
  __dmb(0xBu);
  if (!MetatypeTypes)
  {
    unint64_t v19 = (void **)qword_18C486C28;
    if (qword_18C486C28)
    {
      do
      {
        unint64_t v20 = (void **)*v19;
        free(v19[1]);
        free(v19);
        unint64_t v19 = v20;
      }

      while (v20);
    }

    qword_18C486C28 = 0LL;
  }

  os_unfair_lock_unlock((os_unfair_lock_t)&unk_18C486C20);
  qword_18C486C30 = v1;
LABEL_56:
  if (v1) {
    return v1 + 16;
  }
  else {
    return 0LL;
  }
}

unint64_t swift_getExistentialMetatypeMetadata(void *a1)
{
  unint64_t v46 = a1;
  unint64_t v1 = atomic_load((unint64_t *)&qword_18C486C60);
  if (v1 && *(void **)(v1 + 24) == v46) {
    goto LABEL_63;
  }
  do
    unsigned int v2 = __ldaxr((unsigned int *)&ExistentialMetatypes);
  while (__stxr(v2 + 1, (unsigned int *)&ExistentialMetatypes));
  do
  {
    unint64_t v3 = atomic_load(&qword_18C486C40);
    unint64_t v4 = atomic_load((unint64_t *)&qword_18C486C48);
    unsigned int v5 = atomic_load((unsigned int *)&dword_18C486C3C);
    unint64_t v6 = atomic_load(&qword_18C486C40);
  }

  while (v3 != v6);
  if (v3) {
    BOOL v7 = v4 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7 && v5 != 0)
  {
    if (v9)
    {
      qword_18C486C60 = *v9;
      unint64_t v1 = *v9;
      do
        unsigned int v10 = __ldxr((unsigned int *)&ExistentialMetatypes);
      while (__stlxr(v10 - 1, (unsigned int *)&ExistentialMetatypes));
      goto LABEL_63;
    }
  }

  do
    unsigned int v11 = __ldxr((unsigned int *)&ExistentialMetatypes);
  while (__stlxr(v11 - 1, (unsigned int *)&ExistentialMetatypes));
  uint64_t v47 = v46;
  os_unfair_lock_lock((os_unfair_lock_t)&unk_18C486C50);
  uint64_t v12 = qword_18C486C48;
  BOOL v13 = (qword_18C486C48 & 3) == 0;
  if ((qword_18C486C48 & 0xFFFFFFFFFFFFFFFCLL) == 0) {
    BOOL v13 = 1;
  }
  BOOL v45 = v13;
  if (v13) {
    int v14 = 4;
  }
  else {
    int v14 = *(unsigned __int8 *)(qword_18C486C48 & 0xFFFFFFFFFFFFFFFCLL);
  }
  unint64_t v15 = dword_18C486C3C;
  uint64_t v16 = (_DWORD *)qword_18C486C40;
  if (!v17)
  {
    char v44 = v12;
    __src = v16 + 2;
    unint64_t v43 = v12 & 0xFFFFFFFFFFFFFFFCLL;
    uint64_t v21 = (v15 + 1);
    if ((1LL << v14) / (unint64_t)((1LL << v14) - v21) < 4)
    {
      LOBYTE(v26) = v44;
      if (v16) {
        goto LABEL_46;
      }
    }

    else
    {
      unsigned int v22 = (v14 + 1);
      if (v22 >= 0x11) {
        unsigned int v23 = 4;
      }
      else {
        unsigned int v23 = 2;
      }
      if (v22 < 9) {
        size_t v24 = 1LL;
      }
      else {
        size_t v24 = v23;
      }
      unint64_t v25 = (unint64_t)calloc(2LL << v14, v24);
      if (!v25) {
        swift::hashable_support::findHashableBaseTypeOfHashableType();
      }
      if ((_DWORD)v24 != 1)
      {
        if ((_DWORD)v24 == 4) {
          size_t v24 = 3LL;
        }
        else {
          size_t v24 = 2LL;
        }
      }

      unint64_t v26 = v24 | v25;
      *(_BYTE *)unint64_t v25 = v14 + 1;
      if (v14) {
        __asm { BR              X8 }
      }

      atomic_store(v26, (unint64_t *)&qword_18C486C48);
      if (!v45)
      {
        unint64_t v27 = malloc(0x10uLL);
        *unint64_t v27 = qword_18C486C58;
        v27[1] = v43;
        qword_18C486C58 = (uint64_t)v27;
      }

      LODWORD(v21) = v15 + 1;
      if (v16)
      {
LABEL_46:
        unint64_t v28 = (unint64_t)v16;
      }
    }

    int v29 = v16;
    unint64_t v30 = v15 + (v15 >> 2);
    if (v30 <= v15 + 1) {
      unint64_t v30 = v15 + 1;
    }
    size_t v31 = malloc_good_size(8 * v30 + 8);
    uint64_t v32 = malloc(v31);
    if (!v32) {
      swift::hashable_support::findHashableBaseTypeOfHashableType();
    }
    unint64_t v28 = (unint64_t)v32;
    *uint64_t v32 = (v31 + 0x7FFFFFFF8LL) >> 3;
    if (v29)
    {
      memcpy(v32 + 2, __src, 8 * v15);
      __int16 v33 = malloc(0x10uLL);
      *__int16 v33 = qword_18C486C58;
      v33[1] = v29;
      qword_18C486C58 = (uint64_t)v33;
    }

    atomic_store(v28, &qword_18C486C40);
LABEL_53:
    unint64_t v34 = v28 + 8;
    __int16 v48 = 6;
    uint64_t v35 = swift::MetadataAllocator::Allocate((swift::MetadataAllocator *)&v48, 0x28uLL, (const char *)8, v18);
    int v36 = v35;
    unsigned int v37 = v46;
    *((void *)v35 + 2) = 0LL;
    *((_DWORD *)v35 + 8) = 0;
    uint64_t v38 = *v37;
    if (*v37 > 0x7FFuLL) {
      LODWORD(v38) = 0;
    }
    if ((_DWORD)v38 == 774)
    {
      BOOL v40 = (int *)(v37 + 2);
    }

    else
    {
      int v39 = 0;
      if ((_DWORD)v38 != 771) {
        goto LABEL_60;
      }
      BOOL v40 = (int *)(v37 + 1);
    }

    int v39 = *v40;
LABEL_60:
    *((void *)v35 + 2) = 774LL;
    *((void *)v35 + 1) = getExistentialMetatypeValueWitnesses(v39 & 0xFFFFFF);
    *((void *)v36 + 3) = v37;
    *((_DWORD *)v36 + 8) = v39;
    *(void *)(v34 + 8 * v15) = v36;
    atomic_store(v21, (unsigned int *)&dword_18C486C3C);
    __asm { BR              X11 }
  }

  unint64_t v1 = *v17;
  __dmb(0xBu);
  if (!ExistentialMetatypes)
  {
    unint64_t v19 = (void **)qword_18C486C58;
    if (qword_18C486C58)
    {
      do
      {
        unint64_t v20 = (void **)*v19;
        free(v19[1]);
        free(v19);
        unint64_t v19 = v20;
      }

      while (v20);
    }

    qword_18C486C58 = 0LL;
  }

  os_unfair_lock_unlock((os_unfair_lock_t)&unk_18C486C50);
  qword_18C486C60 = v1;
LABEL_63:
  if (v1) {
    return v1 + 16;
  }
  else {
    return 0LL;
  }
}

uint64_t swift::TargetExistentialTypeMetadata<swift::InProcess>::getRepresentation(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8);
  int v2 = v1 & 0x3F000000;
  BOOL v3 = v1 >= 0;
  if (v2 == 0x1000000) {
    return 2LL;
  }
  else {
    return v3;
  }
}

uint64_t swift::TargetExistentialTypeMetadata<swift::InProcess>::mayTakeValue( uint64_t a1, swift::SwiftError **a2)
{
  int v2 = *(_DWORD *)(a1 + 8);
  int v3 = v2 & 0x3F000000;
  int v4 = v2 >= 0;
  if (v3 == 0x1000000) {
    int v4 = 2;
  }
  if (v4 == 2) {
    return swift::SwiftError::isPureNSError(*a2, a2);
  }
  if (v4 == 1) {
    return 1LL;
  }
  return swift::TargetOpaqueExistentialContainer<swift::InProcess>::isValueInline((uint64_t)a2);
}

swift::SwiftError **swift::TargetExistentialTypeMetadata<swift::InProcess>::projectValue( uint64_t a1, swift::SwiftError **a2)
{
  int v2 = a2;
  int v3 = *(_DWORD *)(a1 + 8);
  int v4 = v3 & 0x3F000000;
  int v5 = v3 >= 0;
  if (v4 == 0x1000000) {
    int v5 = 2;
  }
  if (v5 == 2)
  {
    BOOL v7 = *a2;
    if (!swift::SwiftError::isPureNSError(*a2, a2))
    {
      uint64_t v8 = *(unsigned __int8 *)(*(void *)(*((void *)v7 + 5) - 8LL) + 80LL);
      return (swift::SwiftError **)(((unint64_t)v7 + v8 + 72) & ~v8);
    }
  }

  else if (v5 != 1)
  {
    return (swift::SwiftError **)swift::TargetOpaqueExistentialContainer<swift::InProcess>::projectValue(a2);
  }

  return v2;
}

unint64_t swift::TargetExistentialTypeMetadata<swift::InProcess>::getDynamicType( uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 8);
  int v3 = v2 & 0x3F000000;
  int v4 = v2 >= 0;
  if (v3 == 0x1000000) {
    int v4 = 2;
  }
  if (!v4) {
    return *(void *)(a2 + 24);
  }
  if (v4 == 2) {
    return swift::SwiftError::getType(*(swift::SwiftError **)a2, (const void *)a2);
  }
  return swift_getObjectType(*(void *)a2);
}

uint64_t (***swift::_getSimpleProtocolTypeMetadata(_DWORD *a1))()
{
  int v2 = a1;
  return swift_getExistentialTypeMetadata(HIWORD(*a1) & 1, 0LL, 1LL, (uint64_t *)&v2);
}

uint64_t (***swift_getExistentialTypeMetadata(int a1, uint64_t a2, uint64_t a3, uint64_t *a4))()
{
  if (a2 || a3)
  {
    *(void *)&__int128 v82 = a2;
    DWORD2(v82) = a1 | (2 * a3);
    uint64_t v83 = a4;
    unint64_t v6 = atomic_load((unint64_t *)&qword_18C486C90);
    if (!v6) {
      goto LABEL_18;
    }
    unint64_t v7 = *(unsigned int *)(v6 + 16);
    if (((DWORD2(v82) ^ ((v7 & 0x80000000) != 0LL)) & 1) != 0) {
      goto LABEL_18;
    }
    if ((v7 & 0x40000000) != 0)
    {
      if ((void)v82 != *(void *)(v6 + 24)) {
        goto LABEL_18;
      }
    }

    else if ((void)v82)
    {
      goto LABEL_18;
    }

    unint64_t v8 = (unint64_t)DWORD2(v82) >> 1;
    if (DWORD2(v82) >> 1 == *(_DWORD *)(v6 + 20))
    {
      if (DWORD2(v82) < 2)
      {
LABEL_97:
        if (v6) {
          return (uint64_t (***)())(v6 + 8);
        }
        else {
          return 0LL;
        }
      }

      unint64_t v9 = v83;
      uint64_t v10 = 8 * ((v7 >> 30) & 1) + 24;
      while (1)
      {
        uint64_t v11 = *v9++;
        if (v11 != *(void *)(v6 + v10)) {
          break;
        }
        v10 += 8LL;
        if (!--v8) {
          goto LABEL_97;
        }
      }
    }

    do
LABEL_18:
      unsigned int v12 = __ldaxr((unsigned int *)&ExistentialTypes);
    while (__stxr(v12 + 1, (unsigned int *)&ExistentialTypes));
    do
    {
      unint64_t v13 = atomic_load(&qword_18C486C70);
      unint64_t v14 = atomic_load((unint64_t *)&qword_18C486C78);
      unsigned int v15 = atomic_load((unsigned int *)&dword_18C486C6C);
      unint64_t v16 = atomic_load(&qword_18C486C70);
    }

    while (v13 != v16);
    if (v13) {
      BOOL v17 = v14 == 0;
    }
    else {
      BOOL v17 = 1;
    }
    if (!v17 && v15 != 0)
    {
      if (v19)
      {
        qword_18C486C90 = *v19;
        unint64_t v6 = *v19;
        do
          unsigned int v20 = __ldxr((unsigned int *)&ExistentialTypes);
        while (__stlxr(v20 - 1, (unsigned int *)&ExistentialTypes));
        goto LABEL_97;
      }
    }

    do
      unsigned int v21 = __ldxr((unsigned int *)&ExistentialTypes);
    while (__stlxr(v21 - 1, (unsigned int *)&ExistentialTypes));
    __int128 v84 = v82;
    uint64_t v85 = v83;
    os_unfair_lock_lock((os_unfair_lock_t)&unk_18C486C80);
    uint64_t v22 = qword_18C486C78;
    BOOL v23 = (qword_18C486C78 & 3) == 0;
    if ((qword_18C486C78 & 0xFFFFFFFFFFFFFFFCLL) == 0) {
      BOOL v23 = 1;
    }
    BOOL v81 = v23;
    if (v23) {
      int v24 = 4;
    }
    else {
      int v24 = *(unsigned __int8 *)(qword_18C486C78 & 0xFFFFFFFFFFFFFFFCLL);
    }
    unint64_t v25 = dword_18C486C6C;
    unint64_t v26 = (_DWORD *)qword_18C486C70;
    unint64_t v27 = (const void *)(qword_18C486C70 + 8);
    if (v28)
    {
      unint64_t v6 = *v28;
      __dmb(0xBu);
      if (!ExistentialTypes)
      {
        unint64_t v30 = (void **)qword_18C486C88;
        if (qword_18C486C88)
        {
          do
          {
            size_t v31 = (void **)*v30;
            free(v30[1]);
            free(v30);
            unint64_t v30 = v31;
          }

          while (v31);
        }

        qword_18C486C88 = 0LL;
      }

      os_unfair_lock_unlock((os_unfair_lock_t)&unk_18C486C80);
      qword_18C486C90 = v6;
      goto LABEL_97;
    }

    unsigned int v79 = v25 + 1;
    unint64_t v80 = v25;
    if ((1LL << v24) / ((1LL << v24) - (unint64_t)(v25 + 1)) < 4)
    {
      LOBYTE(v36) = v22;
      if (v26) {
        goto LABEL_61;
      }
    }

    else
    {
      unsigned int v32 = (v24 + 1);
      if (v32 >= 0x11) {
        unsigned int v33 = 4;
      }
      else {
        unsigned int v33 = 2;
      }
      if (v32 < 9) {
        size_t v34 = 1LL;
      }
      else {
        size_t v34 = v33;
      }
      unint64_t v35 = (unint64_t)calloc(2LL << v24, v34);
      if (!v35) {
        swift::hashable_support::findHashableBaseTypeOfHashableType();
      }
      if ((_DWORD)v34 != 1)
      {
        if ((_DWORD)v34 == 4) {
          size_t v34 = 3LL;
        }
        else {
          size_t v34 = 2LL;
        }
      }

      unint64_t v36 = v34 | v35;
      *(_BYTE *)unint64_t v35 = v24 + 1;
      if (v24) {
        __asm { BR              X8 }
      }

      atomic_store(v36, (unint64_t *)&qword_18C486C78);
      if (!v81)
      {
        unsigned int v37 = malloc(0x10uLL);
        *unsigned int v37 = qword_18C486C88;
        v37[1] = v22 & 0xFFFFFFFFFFFFFFFCLL;
        qword_18C486C88 = (uint64_t)v37;
      }

      unint64_t v27 = v26 + 2;
      if (v26)
      {
LABEL_61:
        unint64_t v38 = (unint64_t)v26;
      }
    }

    unint64_t v39 = v25 + (v25 >> 2);
    if (v39 <= v25 + 1) {
      unint64_t v39 = v25 + 1;
    }
    size_t v40 = malloc_good_size(8 * v39 + 8);
    uint64_t v41 = malloc(v40);
    if (!v41) {
      swift::hashable_support::findHashableBaseTypeOfHashableType();
    }
    unint64_t v38 = (unint64_t)v41;
    _DWORD *v41 = (v40 + 0x7FFFFFFF8LL) >> 3;
    if (v26)
    {
      memcpy(v41 + 2, v27, 8 * v25);
      uint64_t v42 = malloc(0x10uLL);
      void *v42 = qword_18C486C88;
      v42[1] = v26;
      qword_18C486C88 = (uint64_t)v42;
    }

    atomic_store(v38, &qword_18C486C70);
LABEL_68:
    unint64_t v43 = (unint64_t)DWORD2(v82) >> 1;
    if ((void)v82) {
      ++v43;
    }
    LOWORD(v86) = 7;
    char v44 = swift::MetadataAllocator::Allocate((swift::MetadataAllocator *)&v86, 8 * v43 + 24, (const char *)8, v29);
    unsigned int v45 = 0;
    uint64_t v46 = v82;
    unint64_t v47 = DWORD2(v82);
    __int16 v48 = v83;
    *((void *)v44 + 1) = 771LL;
    *((void *)v44 + 2) = 0LL;
    unint64_t v49 = v47 >> 1;
    if (v47 >= 2)
    {
      unint64_t v50 = (v49 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v50 >= 7)
      {
        unint64_t v52 = v50 + 1;
        uint64_t v53 = (v50 + 1) & 0x3FFFFFFFFFFFFFF8LL;
        uint64_t v51 = (char *)&v48[v53];
        uint8x8_t v54 = (int8x16_t *)(v48 + 4);
        int32x4_t v55 = 0uLL;
        int8x16_t v56 = (int8x16_t)vdupq_n_s64(1uLL);
        uint64_t v57 = v53;
        int32x4_t v58 = 0uLL;
        do
        {
          int8x16_t v60 = v54[-2];
          int8x16_t v59 = v54[-1];
          int8x16_t v62 = *v54;
          int8x16_t v61 = v54[1];
          v54 += 4;
          int32x4_t v55 = vsubq_s32( v55,  vuzp1q_s32( (int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v60, v56)),  (int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v59, v56))));
          int32x4_t v58 = vsubq_s32( v58,  vuzp1q_s32( (int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v62, v56)),  (int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v61, v56))));
          v57 -= 8LL;
        }

        while (v57);
        unsigned int v45 = vaddvq_s32(vaddq_s32(v58, v55));
        if (v52 == v53) {
          goto LABEL_79;
        }
      }

      else
      {
        unsigned int v45 = 0;
        uint64_t v51 = (char *)v48;
      }

      do
      {
        char v63 = *v51;
        v51 += 8;
        if ((v63 & 1) == 0) {
          ++v45;
        }
      }

      while (v51 != (char *)&v48[v49]);
    }

unint64_t swift_getExtendedExistentialTypeShape(int *a1)
{
  uint64_t v1 = *a1;
  if ((_DWORD)v1) {
    int v2 = (unint64_t *)((char *)a1 + v1);
  }
  else {
    int v2 = 0LL;
  }
  unint64_t v3 = atomic_load(v2);
  if (!v3)
  {
    *(void *)&__int128 v45 = a1;
    int v4 = (char *)a1 + a1[2] + 8;
    if (v4) {
      size_t v5 = strlen(v4);
    }
    else {
      size_t v5 = 0LL;
    }
    *((void *)&v45 + 1) = v4;
    size_t v46 = v5;
    unint64_t v6 = atomic_load((unint64_t *)&qword_18C486CC0);
    if (!v6) {
      goto LABEL_16;
    }
    if (*(void *)v6 != (void)v45)
    {
      unint64_t v7 = (const char *)(*(int *)(*(void *)v6 + 8LL) + *(void *)v6 + 8LL);
      if (v7)
      {
        do
LABEL_16:
          unsigned int v8 = __ldaxr((unsigned int *)&ExtendedExistentialTypeShapes);
        while (__stxr(v8 + 1, (unsigned int *)&ExtendedExistentialTypeShapes));
        do
        {
          unint64_t v9 = atomic_load(&qword_18C486CA0);
          unint64_t v10 = atomic_load((unint64_t *)&qword_18C486CA8);
          unsigned int v11 = atomic_load((unsigned int *)&dword_18C486C9C);
          unint64_t v12 = atomic_load(&qword_18C486CA0);
        }

        while (v9 != v12);
        if (v9) {
          BOOL v13 = v10 == 0;
        }
        else {
          BOOL v13 = 1;
        }
        BOOL v14 = v13 || v11 == 0;
        if (v14
        {
          do
            unsigned int v17 = __ldxr((unsigned int *)&ExtendedExistentialTypeShapes);
          while (__stlxr(v17 - 1, (unsigned int *)&ExtendedExistentialTypeShapes));
          __int128 v47 = v45;
          size_t v48 = v46;
          os_unfair_lock_lock((os_unfair_lock_t)&unk_18C486CB0);
          uint64_t v18 = qword_18C486CA8;
          BOOL v19 = (qword_18C486CA8 & 3) == 0;
          if ((qword_18C486CA8 & 0xFFFFFFFFFFFFFFFCLL) == 0) {
            BOOL v19 = 1;
          }
          BOOL v44 = v19;
          if (v19) {
            int v20 = 4;
          }
          else {
            int v20 = *(unsigned __int8 *)(qword_18C486CA8 & 0xFFFFFFFFFFFFFFFCLL);
          }
          unint64_t v21 = dword_18C486C9C;
          uint64_t v22 = (_DWORD *)qword_18C486CA0;
          if (!v23)
          {
            unint64_t v43 = v22;
            uint64_t v27 = (v21 + 1);
            __src = v22 + 2;
            if ((1LL << v20) / (unint64_t)((1LL << v20) - v27) < 4)
            {
              LOBYTE(v32) = v18;
            }

            else
            {
              unsigned int v28 = (v20 + 1);
              if (v28 >= 0x11) {
                unsigned int v29 = 4;
              }
              else {
                unsigned int v29 = 2;
              }
              if (v28 < 9) {
                size_t v30 = 1LL;
              }
              else {
                size_t v30 = v29;
              }
              unint64_t v31 = (unint64_t)calloc(2LL << v20, v30);
              if (!v31) {
                swift::hashable_support::findHashableBaseTypeOfHashableType();
              }
              if ((_DWORD)v30 != 1)
              {
                if ((_DWORD)v30 == 4) {
                  size_t v30 = 3LL;
                }
                else {
                  size_t v30 = 2LL;
                }
              }

              unint64_t v32 = v30 | v31;
              *(_BYTE *)unint64_t v31 = v20 + 1;
              if (v20) {
                __asm { BR              X8 }
              }

              atomic_store(v32, (unint64_t *)&qword_18C486CA8);
              if (!v44)
              {
                unsigned int v33 = malloc(0x10uLL);
                *unsigned int v33 = qword_18C486CB8;
                v33[1] = v18 & 0xFFFFFFFFFFFFFFFCLL;
                qword_18C486CB8 = (uint64_t)v33;
              }

              LODWORD(v27) = v21 + 1;
            }

            if (!v43 || (unint64_t v34 = (unint64_t)v43, v21 >= *v43))
            {
              unint64_t v35 = v21 + (v21 >> 2);
              unint64_t v36 = v21;
              if (v35 <= v21 + 1) {
                unint64_t v35 = v21 + 1;
              }
              size_t v37 = malloc_good_size(8 * v35 + 8);
              unint64_t v38 = malloc(v37);
              if (!v38) {
                swift::hashable_support::findHashableBaseTypeOfHashableType();
              }
              unint64_t v34 = (unint64_t)v38;
              *unint64_t v38 = (v37 + 0x7FFFFFFF8LL) >> 3;
              unint64_t v21 = v36;
              if (v43)
              {
                memcpy(v38 + 2, __src, 8 * v36);
                unint64_t v39 = malloc(0x10uLL);
                void *v39 = qword_18C486CB8;
                v39[1] = v43;
                qword_18C486CB8 = (uint64_t)v39;
              }

              atomic_store(v34, &qword_18C486CA0);
            }

            __int16 v49 = 23;
            size_t v40 = swift::MetadataAllocator::Allocate((swift::MetadataAllocator *)&v49, 8uLL, (const char *)8, v24);
            *(void *)size_t v40 = v45;
            *(void *)(v34 + 8 * v21 + 8) = v40;
            atomic_store(v27, (unsigned int *)&dword_18C486C9C);
            __asm { BR              X11 }
          }

          unint64_t v6 = *v23;
          __dmb(0xBu);
          if (!ExtendedExistentialTypeShapes)
          {
            unint64_t v25 = (void **)qword_18C486CB8;
            if (qword_18C486CB8)
            {
              do
              {
                unint64_t v26 = (void **)*v25;
                free(v25[1]);
                free(v25);
                unint64_t v25 = v26;
              }

              while (v26);
            }

            qword_18C486CB8 = 0LL;
          }

          os_unfair_lock_unlock((os_unfair_lock_t)&unk_18C486CB0);
          qword_18C486CC0 = v6;
        }

        else
        {
          qword_18C486CC0 = *v15;
          unint64_t v6 = *v15;
          do
            unsigned int v16 = __ldxr((unsigned int *)&ExtendedExistentialTypeShapes);
          while (__stlxr(v16 - 1, (unsigned int *)&ExtendedExistentialTypeShapes));
        }

        goto LABEL_69;
      }

      if (v46) {
        goto LABEL_16;
      }
    }

unint64_t swift_getExtendedExistentialTypeMetadata_unique(unsigned int *a1, uint64_t a2)
{
  __int128 v66 = v69[0];
  __int128 v67 = v69[1];
  unsigned __int128 v68 = v70;
  unint64_t v2 = atomic_load((unint64_t *)&qword_18C486CF0);
  if (v2)
  {
    uint64_t v74 = v68;
    v73[0] = v66;
    v73[1] = v67;
    unint64_t v3 = *(unsigned int **)(v2 + 24);
    if (v3 == v68)
    {
    }
  }

  do
    unsigned int v5 = __ldaxr((unsigned int *)&ExtendedExistentialTypes);
  while (__stxr(v5 + 1, (unsigned int *)&ExtendedExistentialTypes));
  do
  {
    unint64_t v6 = atomic_load(&qword_18C486CD0);
    unint64_t v7 = atomic_load((unint64_t *)&qword_18C486CD8);
    unsigned int v8 = atomic_load((unsigned int *)&dword_18C486CCC);
    unint64_t v9 = atomic_load(&qword_18C486CD0);
  }

  while (v6 != v9);
  if (v6) {
    BOOL v10 = v7 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10 && v8 != 0)
  {
    if (v12)
    {
      qword_18C486CF0 = *v12;
      unint64_t v2 = *v12;
      do
        unsigned int v13 = __ldxr((unsigned int *)&ExtendedExistentialTypes);
      while (__stlxr(v13 - 1, (unsigned int *)&ExtendedExistentialTypes));
      goto LABEL_79;
    }
  }

  do
    unsigned int v14 = __ldxr((unsigned int *)&ExtendedExistentialTypes);
  while (__stlxr(v14 - 1, (unsigned int *)&ExtendedExistentialTypes));
  v71[0] = v66;
  v71[1] = v67;
  unsigned __int128 v72 = v68;
  os_unfair_lock_lock((os_unfair_lock_t)&unk_18C486CE0);
  uint64_t v15 = qword_18C486CD8;
  BOOL v16 = (qword_18C486CD8 & 3) == 0;
  if ((qword_18C486CD8 & 0xFFFFFFFFFFFFFFFCLL) == 0) {
    BOOL v16 = 1;
  }
  BOOL v64 = v16;
  if (v16) {
    int v17 = 4;
  }
  else {
    int v17 = *(unsigned __int8 *)(qword_18C486CD8 & 0xFFFFFFFFFFFFFFFCLL);
  }
  unint64_t v18 = dword_18C486CCC;
  BOOL v19 = (_DWORD *)qword_18C486CD0;
  int v20 = (const void *)(qword_18C486CD0 + 8);
  if (!v21)
  {
    uint64_t v62 = (v18 + 1);
    unint64_t v63 = v18;
    if ((1LL << v17) / (unint64_t)((1LL << v17) - v62) < 4)
    {
      LOBYTE(v29) = v15;
      if (!v19) {
        goto LABEL_49;
      }
    }

    else
    {
      unsigned int v25 = (v17 + 1);
      if (v25 >= 0x11) {
        unsigned int v26 = 4;
      }
      else {
        unsigned int v26 = 2;
      }
      if (v25 < 9) {
        size_t v27 = 1LL;
      }
      else {
        size_t v27 = v26;
      }
      unint64_t v28 = (unint64_t)calloc(2LL << v17, v27);
      if (!v28) {
        swift::hashable_support::findHashableBaseTypeOfHashableType();
      }
      if ((_DWORD)v27 != 1)
      {
        if ((_DWORD)v27 == 4) {
          size_t v27 = 3LL;
        }
        else {
          size_t v27 = 2LL;
        }
      }

      unint64_t v29 = v27 | v28;
      *(_BYTE *)unint64_t v28 = v17 + 1;
      if (v17) {
        __asm { BR              X8 }
      }

      atomic_store(v29, (unint64_t *)&qword_18C486CD8);
      if (!v64)
      {
        size_t v30 = malloc(0x10uLL);
        *size_t v30 = qword_18C486CE8;
        v30[1] = v15 & 0xFFFFFFFFFFFFFFFCLL;
        qword_18C486CE8 = (uint64_t)v30;
      }

      int v20 = v19 + 2;
      if (!v19) {
        goto LABEL_49;
      }
    }

    unint64_t v31 = (unint64_t)v19;
    if (v18 < *v19)
    {
LABEL_55:
      if ((*((_BYTE *)v68 + 1) & 1) != 0) {
        size_t v36 = 8LL * *((unsigned __int16 *)v68 + 10) + 32;
      }
      else {
        size_t v36 = 32LL;
      }
      v75[0] = 22;
      size_t v37 = swift::MetadataAllocator::Allocate((swift::MetadataAllocator *)v75, v36, (const char *)8, v22);
      unint64_t v38 = (const void *)v66;
      __int16 v39 = WORD4(v66);
      __int16 v40 = WORD5(v66);
      uint64_t v41 = WORD6(v66);
      __int16 v42 = HIWORD(v66);
      uint64_t v43 = v67;
      BOOL v44 = v68;
      unint64_t v45 = *v68;
      if ((v45 & 0x400) == 0) {
        goto LABEL_87;
      }
      uint64_t v47 = *v46;
      ExistentialValueWitnesses = (uint64_t (**)())((char *)v46 + (v47 & 0xFFFFFFFFFFFFFFFELL));
      if ((v47 & 1) != 0) {
        ExistentialValueWitnesses = (uint64_t (**)())*ExistentialValueWitnesses;
      }
      if (!ExistentialValueWitnesses)
      {
LABEL_87:
        uint64_t v65 = v67;
        __int16 v49 = HIWORD(v66);
        unint64_t v50 = (const void *)v66;
        int v51 = *((unsigned __int16 *)v68 + 6);
        int v52 = *((unsigned __int16 *)v68 + 4);
        switch(*v68)
        {
          case 0u:
            char v53 = 1;
            goto LABEL_65;
          case 1u:
            char v53 = 0;
LABEL_65:
            ExistentialValueWitnesses = getExistentialValueWitnesses(v53, v51 - v52, 0);
            break;
          case 2u:
            ExistentialValueWitnesses = getExistentialMetatypeValueWitnesses(v51 - v52);
            break;
          default:
            abort();
        }

        unint64_t v38 = v50;
        __int16 v42 = v49;
        uint64_t v43 = v65;
      }

      unint64_t v54 = v31 + 8;
      *(void *)size_t v37 = 0LL;
      *((void *)v37 + 1) = ExistentialValueWitnesses;
      *((void *)v37 + 2) = 775LL;
      *((void *)v37 + 3) = v44;
      int32x4_t v55 = (char *)v37 + 32;
      memcpy((char *)v37 + 32, v38, 8LL * (unsigned __int16)(v40 + v39 + v42));
      if (!(_DWORD)v41)
      {
LABEL_76:
        *(void *)(v54 + 8 * v63) = v37;
        atomic_store(v62, (unsigned int *)&dword_18C486CCC);
        __asm { BR              X11 }
      }

      int8x16_t v56 = (unsigned __int16 *)(v43 + 4);
      while (1)
      {
        uint64_t v59 = *(v56 - 1);
        unint64_t v60 = *(void *)&v55[8 * *v56];
        if (*(v56 - 2) == 1)
        {
          uint64_t v57 = 8 * v59;
          uint64_t WitnessTablePack = swift_allocateWitnessTablePack(*(void *)&v55[8 * v59], v60);
        }

        else
        {
          if (*(v56 - 2)) {
            goto LABEL_72;
          }
          uint64_t v57 = 8 * v59;
          uint64_t WitnessTablePack = swift_allocateMetadataPack(*(void *)&v55[8 * v59], v60);
        }

        *(void *)&v55[v57] = WitnessTablePack;
LABEL_72:
        v56 += 4;
        if (!--v41) {
          goto LABEL_76;
        }
      }
    }

uint64_t anonymous namespace'::ExtendedExistentialTypeCacheEntry::Key::Key( uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v6 = v33;
  uint64_t v7 = v34;
  uint64_t v8 = v35;
  uint64_t v9 = v29;
  if (v29)
  {
    unsigned __int16 v10 = 0;
    __int16 v11 = 0;
    unint64_t v12 = v31;
    do
    {
      int v13 = *v12++;
      BOOL v14 = v13 < 0;
      if (v13 < 0) {
        unsigned __int16 v10 = v11 + 1;
      }
      if (v14) {
        ++v11;
      }
      --v9;
    }

    while (v9);
    uint64_t v15 = v30;
    if (v30) {
      goto LABEL_9;
    }
LABEL_15:
    __int16 v16 = 0;
    goto LABEL_16;
  }

  unsigned __int16 v10 = 0;
  uint64_t v15 = v30;
  if (!v30) {
    goto LABEL_15;
  }
LABEL_9:
  __int16 v16 = 0;
  __int16 v17 = 0;
  unint64_t v18 = v32;
  uint64_t v19 = 12 * v15;
  do
  {
    int v20 = *v18;
    v18 += 3;
    int v21 = v20 & 0x9F;
    if (v21 == 128) {
      __int16 v16 = ++v17;
    }
    v19 -= 12LL;
  }

  while (v19);
LABEL_16:
  *(void *)a1 = a3;
  *(_WORD *)(a1 + 8) = v10;
  *(_WORD *)(a1 + 10) = v16;
  *(_WORD *)(a1 + 12) = v6;
  *(_WORD *)(a1 + 14) = v7;
  *(void *)(a1 + 16) = v8;
  uint64_t v22 = 1455063249 * v10;
  if (v10)
  {
    unint64_t v23 = 0LL;
    uint64_t v24 = v10 + v7;
    do
    {
      if (v23 >= v6 || *(_WORD *)(v8 + 8 * v23) || (uint64_t v25 = v8 + 8 * v23, v7 != *(unsigned __int16 *)(v25 + 2)))
      {
        uint64_t v22 = __ROR8__(v22, 10) ^ (*(void *)(a3 + 8 * v7) >> 19) ^ *(void *)(a3 + 8 * v7);
      }

      else
      {
        unint64_t v26 = *(void *)(a3 + 8LL * *(unsigned __int16 *)(v25 + 4));
        ++v23;
        if (v26)
        {
          uint64_t v27 = 0LL;
          do
          {
            uint64_t v22 = __ROR8__(v22, 10) ^ (*(void *)((*(void *)(a3 + 8 * v7) & 0xFFFFFFFFFFFFFFFELL) + 8 * v27) >> 19) ^ *(void *)((*(void *)(a3 + 8 * v7) & 0xFFFFFFFFFFFFFFFELL) + 8 * v27);
            ++v27;
          }

          while (v26 > v27);
        }
      }

      ++v7;
    }

    while (v7 != v24);
  }

  *(_DWORD *)(a1 + 24) = (unint64_t)(668265261 * v22) >> 10;
  *(void *)(a1 + 32) = a2;
  return a1;
}

unint64_t swift_getExtendedExistentialTypeMetadata(int *a1, uint64_t a2)
{
  ExtendedExistentialTypeShape = (unsigned int *)swift_getExtendedExistentialTypeShape(a1);
  return swift_getExtendedExistentialTypeMetadata_unique(ExtendedExistentialTypeShape, a2);
}

uint64_t swift_getForeignTypeMetadata(__int16 a1, uint64_t *a2)
{
  unint64_t v2 = a2;
  uint64_t v4 = a2[1];
  if (qword_18C476AF8 != -1) {
  uint64_t v62 = v4;
  }
  unsigned int v5 = (unint64_t *)atomic_load((unint64_t *)&qword_18C476AE8);
  if (!v5
    || (swift::ParsedTypeIdentity::parse(v62, (uint64_t)v64),
        size_t v6 = v66,
        uint64_t v7 = __s2,
        swift::ParsedTypeIdentity::parse(*(void *)(v5[1] + 8), (uint64_t)v64),
        v6 != v66)
    || v6 && memcmp(v7, __s2, v6))
  {
    do
      unsigned int v8 = __ldaxr((unsigned int *)&ForeignMetadata);
    while (__stxr(v8 + 1, (unsigned int *)&ForeignMetadata));
    do
    {
      unint64_t v9 = atomic_load(&qword_18C476AC8);
      unint64_t v10 = atomic_load((unint64_t *)&qword_18C476AD0);
      unsigned int v11 = atomic_load((unsigned int *)&dword_18C476AC4);
      unint64_t v12 = atomic_load(&qword_18C476AC8);
    }

    while (v9 != v12);
    if (v9) {
      BOOL v13 = v10 == 0;
    }
    else {
      BOOL v13 = 1;
    }
    if (!v13 && v11 != 0)
    {
      if (v15)
      {
        qword_18C476AE8 = *v15;
        unsigned int v5 = (unint64_t *)*v15;
        do
          unsigned int v16 = __ldxr((unsigned int *)&ForeignMetadata);
        while (__stlxr(v16 - 1, (unsigned int *)&ForeignMetadata));
      }
    }

    do
      unsigned int v17 = __ldxr((unsigned int *)&ForeignMetadata);
    while (__stlxr(v17 - 1, (unsigned int *)&ForeignMetadata));
    uint64_t v18 = v62;
    uint64_t v63 = v62;
    os_unfair_lock_lock((os_unfair_lock_t)&unk_18C476AD8);
    char v19 = qword_18C476AD0;
    BOOL v20 = (qword_18C476AD0 & 3) == 0;
    if ((qword_18C476AD0 & 0xFFFFFFFFFFFFFFFCLL) == 0) {
      BOOL v20 = 1;
    }
    BOOL v59 = v20;
    unint64_t v60 = qword_18C476AD0 & 0xFFFFFFFFFFFFFFFCLL;
    if (v20) {
      int v21 = 4;
    }
    else {
      int v21 = *(unsigned __int8 *)(qword_18C476AD0 & 0xFFFFFFFFFFFFFFFCLL);
    }
    unint64_t v22 = dword_18C476AC4;
    unint64_t v23 = qword_18C476AC8;
    char v26 = v19;
    uint64_t v27 = v24;
    if (v24)
    {
      unsigned int v5 = *v24;
      __dmb(0xBu);
      if (ForeignMetadata)
      {
        os_unfair_lock_unlock((os_unfair_lock_t)&unk_18C476AD8);
        qword_18C476AE8 = (uint64_t)v5;
      }

      else
      {
        unint64_t v32 = (void **)qword_18C476AE0;
        if (qword_18C476AE0)
        {
          do
          {
            unsigned __int16 v33 = (void **)*v32;
            free(v32[1]);
            free(v32);
            unint64_t v32 = v33;
          }

          while (v33);
          qword_18C476AE0 = 0LL;
          os_unfair_lock_unlock((os_unfair_lock_t)&unk_18C476AD8);
          qword_18C476AE8 = (uint64_t)v5;
          if (!v27) {
            abort();
          }
        }

        else
        {
          qword_18C476AE0 = 0LL;
          os_unfair_lock_unlock((os_unfair_lock_t)&unk_18C476AD8);
          qword_18C476AE8 = (uint64_t)v5;
        }
      }
    }

    char v61 = v26;
    int8x16_t v56 = (unsigned int *)v18;
    uint64_t v57 = (v22 + 1);
    unint64_t v58 = v22;
    if ((1LL << v21) / (unint64_t)((1LL << v21) - v57) < 4)
    {
      LOBYTE(v34) = v26;
      uint64_t v35 = (_DWORD *)v23;
      if (v23) {
        goto LABEL_52;
      }
    }

    else
    {
      unsigned int v28 = (v21 + 1);
      if (v28 >= 0x11) {
        unsigned int v29 = 4;
      }
      else {
        unsigned int v29 = 2;
      }
      if (v28 < 9) {
        size_t v30 = 1LL;
      }
      else {
        size_t v30 = v29;
      }
      unint64_t v31 = (unint64_t)calloc(2LL << v21, v30);
      if (!v31) {
        swift::hashable_support::findHashableBaseTypeOfHashableType();
      }
      if ((_DWORD)v30 != 1)
      {
        if ((_DWORD)v30 == 4) {
          size_t v30 = 3LL;
        }
        else {
          size_t v30 = 2LL;
        }
      }

      unint64_t v34 = v30 | v31;
      *(_BYTE *)unint64_t v31 = v21 + 1;
      if (v21) {
        __asm { BR              X8 }
      }

      atomic_store(v34, (unint64_t *)&qword_18C476AD0);
      if (!v59)
      {
        size_t v36 = malloc(0x10uLL);
        *size_t v36 = qword_18C476AE0;
        v36[1] = v60;
        qword_18C476AE0 = (uint64_t)v36;
      }

      uint64_t v35 = (_DWORD *)v23;
      if (v23)
      {
LABEL_52:
        unint64_t v37 = (unint64_t)v35;
      }
    }

    unint64_t v38 = v22 + (v22 >> 2);
    if (v38 <= v22 + 1) {
      unint64_t v38 = v22 + 1;
    }
    size_t v39 = malloc_good_size(8 * v38 + 8);
    __int16 v40 = malloc(v39);
    if (!v40) {
      swift::hashable_support::findHashableBaseTypeOfHashableType();
    }
    unint64_t v37 = (unint64_t)v40;
    *__int16 v40 = (v39 + 0x7FFFFFFF8LL) >> 3;
    if (v35)
    {
      memcpy(v40 + 2, (const void *)(v23 + 8), 8 * v22);
      uint64_t v41 = malloc(0x10uLL);
      void *v41 = qword_18C476AE0;
      v41[1] = v35;
      qword_18C476AE0 = (uint64_t)v41;
    }

    atomic_store(v37, &qword_18C476AC8);
LABEL_59:
    unint64_t v42 = v37 + 8;
    v64[0] = 15;
    uint64_t v43 = swift::MetadataAllocator::Allocate((swift::MetadataAllocator *)v64, 0x10uLL, (const char *)8, v25);
    unint64_t ForeignMetadataInitialization = swift::TargetTypeContextDescriptor<swift::InProcess>::getForeignMetadataInitialization(v56);
    uint64_t v48 = *(int *)ForeignMetadataInitialization;
    if (!(_DWORD)v48 || v48 == -(uint64_t)ForeignMetadataInitialization)
    {
      unsigned int v50 = v57;
      if ((areAllTransitiveMetadataComplete_cheap(v2, v45, v46, v47) & 1) != 0)
      {
        uint64_t v53 = 4LL;
        goto LABEL_70;
      }

      int v51 = v2;
      char v52 = 3;
    }

    else
    {
      __int16 v49 = (ValueWitnessTable *)*(v2 - 1);
      unsigned int v50 = v57;
      if (!v49)
      {
        __int16 v49 = &value witness table for Builtin.UnknownObject;
        *(v2 - 1) = (uint64_t)&value witness table for Builtin.UnknownObject;
      }

      int v51 = v2;
      if ((v49->flags & 0x400000) != 0) {
        char v52 = 1;
      }
      else {
        char v52 = 2;
      }
    }

    unint64_t v54 = (unint64_t)swift_slowAlloc(0x30uLL, 0xFuLL);
    *(_OWORD *)unint64_t v54 = 0u;
    *(_OWORD *)(v54 + 16) = 0u;
    *(_OWORD *)(v54 + 32) = 0u;
    *(void *)unint64_t v54 = 1LL;
    *(void *)(v54 + 16) = 0LL;
    *(void *)(v54 + 24) = 0LL;
    os_unfair_lock_lock((os_unfair_lock_t)(v54 + 8));
    uint64_t v53 = v54 | v52 | 8u;
    unint64_t v2 = v51;
LABEL_70:
    *(void *)uint64_t v43 = v53;
    *((void *)v43 + 1) = v2;
    *(void *)(v42 + 8 * v58) = v43;
    atomic_store(v50, (unsigned int *)&dword_18C476AC4);
    __asm { BR              X11 }
  }
}

void *swift::TargetMetadata<swift::InProcess>::allocateBoxForExistentialIn(uint64_t a1, void *a2)
{
  unint64_t v2 = a2;
  if ((*(_BYTE *)(*(void *)(a1 - 8) + 82LL) & 2) != 0)
  {
    *a2 = swift_allocBox(a1);
    return (void *)v3;
  }

  return v2;
}

void swift::TargetMetadata<swift::InProcess>::deallocateBoxForExistentialIn(uint64_t a1, uint64_t *a2)
{
  if ((*(_BYTE *)(*(void *)(a1 - 8) + 82LL) & 2) != 0) {
    swift_deallocBox(*a2);
  }
}

void *swift::TargetMetadata<swift::InProcess>::allocateBufferIn(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    uint64_t v4 = swift_slowAlloc(*(void *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return v4;
  }

  return a2;
}

uint64_t swift::TargetMetadata<swift::InProcess>::projectBufferFrom(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(void *)(a1 - 8) + 82LL) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

void swift::TargetMetadata<swift::InProcess>::deallocateBufferIn(uint64_t a1, void **a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80LL) & 0x20000) != 0) {
    swift_slowDealloc(*a2);
  }
}

const char *swift::getStringForMetadataKind(swift *this, MetadataKind a2)
{
  if ((int)this <= 767)
  {
    switch((int)this)
    {
      case 512:
        uint64_t result = "Struct";
        break;
      case 513:
        uint64_t result = "Enum";
        break;
      case 514:
        uint64_t result = "Optional";
        break;
      case 515:
        uint64_t result = "ForeignClass";
        break;
      case 516:
        uint64_t result = "ForeignReferenceType";
        break;
      default:
        if ((_DWORD)this) {
LABEL_26:
        }
          uint64_t result = "<unknown>";
        else {
          uint64_t result = "Class";
        }
        break;
    }
  }

  else
  {
    switch((int)this)
    {
      case 768:
        uint64_t result = "Opaque";
        break;
      case 769:
        uint64_t result = "Tuple";
        break;
      case 770:
        uint64_t result = "Function";
        break;
      case 771:
        uint64_t result = "Existential";
        break;
      case 772:
        uint64_t result = "Metatype";
        break;
      case 773:
        uint64_t result = "ObjCClassWrapper";
        break;
      case 774:
        uint64_t result = "ExistentialMetatype";
        break;
      case 775:
        uint64_t result = "ExtendedExistential";
        break;
      default:
        switch((int)this)
        {
          case 1280:
            uint64_t result = "HeapGenericLocalVariable";
            break;
          case 1281:
            uint64_t result = "ErrorObject";
            break;
          case 1282:
            uint64_t result = "Task";
            break;
          case 1283:
            uint64_t result = "Job";
            break;
          default:
            if ((_DWORD)this != 1024) {
              goto LABEL_26;
            }
            uint64_t result = "HeapLocalVariable";
            break;
        }

        break;
    }
  }

  return result;
}

uint64_t swift::_getWitnessTable(int *a1, uint64_t *a2, uint64_t a3, char *a4)
{
  unint64_t v5 = a1[3];
  if ((v5 & 0x20000) == 0) {
    goto LABEL_2;
  }
  unint64_t v10 = (_DWORD *)(((unint64_t)&a1[3 * BYTE1(v5) + 4 + ((v5 >> 6) & 1)] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((v5 & 0x10000) != 0)
  {
    uint64_t v11 = *v10;
    if (!v10) {
      goto LABEL_2;
    }
  }

  else
  {
    uint64_t v11 = 0LL;
    if (!v10) {
      goto LABEL_2;
    }
  }

  unsigned int v16 = &v10[(v5 >> 16) & 1];
  unsigned int v17 = (unsigned __int16 *)&v16[2 * v11];
  unsigned int v18 = v17[1];
  if ((v18 & 1) == 0 && ((v5 & 0x10000) == 0 || !*v10))
  {
    uint64_t v19 = *a1;
    BOOL v20 = (char *)a1 + (v19 & 0xFFFFFFFFFFFFFFFELL);
    if ((v19 & 1) != 0) {
      BOOL v20 = *(char **)v20;
    }
    if (*((_DWORD *)v20 + 4) + 1 == *v17 && v18 <= 1 && *((_DWORD *)v17 + 1) == 0)
    {
LABEL_2:
      uint64_t v6 = a1[2];
      unint64_t v7 = (unint64_t)a1 + v6 + 8;
      if ((_DWORD)v6) {
        BOOL v8 = v7 == 0;
      }
      else {
        BOOL v8 = 1;
      }
      if (v8) {
        return 0LL;
      }
      if ((v5 & 0x80) != 0)
      {
        unint64_t v12 = a1 + 1;
        unsigned int v13 = (v5 >> 3) & 7;
        if (v13 == 1)
        {
          uint64_t v44 = *(void *)((char *)v12 + *v12);
          uint64_t v45 = *a1;
          if ((_DWORD)v45) {
            goto LABEL_199;
          }
          goto LABEL_197;
        }

        if (!v13)
        {
          uint64_t v14 = *v12;
          uint64_t v15 = (char *)v12 + v14;
          goto LABEL_193;
        }

        goto LABEL_198;
      }

      return v7;
    }
  }

  unint64_t v22 = a1 + 1;
  unsigned int v23 = (v5 >> 3) & 7;
  if (v23 == 1)
  {
    uint64_t v25 = *(_BYTE **)((char *)v22 + *v22);
    if (!v25) {
      goto LABEL_38;
    }
  }

  else
  {
    if (v23) {
      goto LABEL_38;
    }
    uint64_t v24 = *v22;
    if (!(_DWORD)v24) {
      goto LABEL_38;
    }
    uint64_t v25 = (char *)v22 + v24;
    if (!v25) {
      goto LABEL_38;
    }
  }

  if ((*v25 & 0x80) == 0)
  {
    uint64_t v26 = *((int *)v17 + 2);
    if ((_DWORD)v26 && v26 != -8LL - (void)v17)
    {
      if ((v5 & 0x10000) != 0) {
        uint64_t v55 = *v10;
      }
      else {
        uint64_t v55 = 0LL;
      }
      unint64_t v60 = &v16[2 * v55];
      uint64_t v61 = (int)v60[2];
      uint64_t v62 = (unint64_t *)((char *)v60 + v61 + 8);
      if ((_DWORD)v61) {
        uint64_t v63 = v62;
      }
      else {
        uint64_t v63 = 0LL;
      }
      unint64_t v7 = *v63;
      if (!*v63)
      {
        uint64_t v64 = *a1;
        if ((_DWORD)v64)
        {
          uint64_t v65 = (char *)a1 + (v64 & 0xFFFFFFFFFFFFFFFELL);
          if ((v64 & 1) != 0) {
            uint64_t v65 = *(char **)v65;
          }
        }

        else
        {
          uint64_t v65 = 0LL;
        }

        if ((v5 & 0x10000) != 0) {
          uint64_t v122 = *v10;
        }
        else {
          uint64_t v122 = 0LL;
        }
        size_t v123 = 8 * ((*((_DWORD *)v65 + 4) + 1) + ((unint64_t)HIWORD(v16[2 * v122]) >> 1));
        LOWORD(v144) = 19;
        uint64_t v124 = swift::MetadataAllocator::Allocate((swift::MetadataAllocator *)&v144, v123, (const char *)8, a4);
        bzero(v124, v123);
        unint64_t v125 = instantiateWitnessTable(a2, a1, 0LL, (char *)v124);
        unint64_t v7 = (unint64_t)v125;
        while (1)
        {
          unint64_t v126 = __ldxr(v63);
          if (v126) {
            break;
          }
          if (!__stlxr((unint64_t)v125, v63))
          {
            char v127 = 1;
            goto LABEL_213;
          }
        }

        char v127 = 0;
        __clrex();
LABEL_213:
        if ((v127 & 1) == 0)
        {
          do
            unsigned __int128 v128 = __ldxp(&AllocationPool);
          while (__stxp(v128, &AllocationPool));
          unint64_t v7 = v126;
          if ((swift::MetadataAllocator *)((char *)v124 + 8) == (swift::MetadataAllocator *)v128)
          {
            if (swift::runtime::environment::initializeToken != -1) {
              dispatch_once_f( &swift::runtime::environment::initializeToken,  0LL,  (dispatch_function_t)swift::runtime::environment::initialize);
            }
            if (swift::runtime::environment::SWIFT_DEBUG_ENABLE_MALLOC_SCRIBBLE_variable) {
              *(void *)uint64_t v124 = 0xAAAAAAAAAAAAAAAALL;
            }
            do
            {
              while (1)
              {
                unsigned __int128 v129 = __ldxp(&AllocationPool);
                int v130 = (void)v129 != (void)v128;
                if (*((void *)&v129 + 1) != *((void *)&v128 + 1)) {
                  ++v130;
                }
                if (!v130) {
                  break;
                }
                if (!__stxp(v129, &AllocationPool)) {
                  return v126;
                }
              }
            }

            while (__stxp(__PAIR128__(*((void *)&v128 + 1) + 8LL, (unint64_t)v124), &AllocationPool));
            return v126;
          }
        }
      }

      return v7;
    }
  }

uint64_t swift::_getWitnessTableRelative(int *a1, unsigned __int16 *a2)
{
  unint64_t v3 = a1[3];
  if ((v3 & 0x20000) == 0) {
    goto LABEL_2;
  }
  BOOL v8 = a1 + 4;
  unint64_t v9 = (_DWORD *)(((unint64_t)&a1[3 * BYTE1(v3) + 4 + ((v3 >> 6) & 1)] + ((v3 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((v3 & 0x10000) != 0)
  {
    uint64_t v10 = *v9;
    if (!v9) {
      goto LABEL_2;
    }
  }

  else
  {
    uint64_t v10 = 0LL;
    if (!v9) {
      goto LABEL_2;
    }
  }

  unsigned int v18 = (unsigned __int16 *)&v9[2 * v10 + (WORD1(v3) & 1)];
  unsigned int v19 = v18[1];
  if ((v19 & 1) != 0 || (v3 & 0x10000) != 0 && *v9) {
    goto LABEL_30;
  }
  uint64_t v20 = *a1;
  int v21 = (char *)a1 + (v20 & 0xFFFFFFFFFFFFFFFELL);
  if ((v20 & 1) != 0) {
    int v21 = *(char **)v21;
  }
  if (*((_DWORD *)v21 + 4) + 1 != *v18 || (v19 <= 1 ? (BOOL v22 = *((_DWORD *)v18 + 1) == 0) : (BOOL v22 = 0), !v22))
  {
LABEL_30:
    uint64_t v23 = *((int *)v18 + 2);
    uint64_t v24 = (void *)((char *)v18 + v23 + 8);
    if ((_DWORD)v23) {
      BOOL v25 = v24 == 0LL;
    }
    else {
      BOOL v25 = 1;
    }
    if (v25)
    {
      v155 = v18;
      uint64_t v26 = (void *)atomic_load((unint64_t *)&qword_18C5758B0);
      if (!v26 || (unsigned __int16 *)*v26 != v155)
      {
        v153 = a1 + 4;
        do
        do
        {
          unint64_t v28 = atomic_load(&qword_18C575890);
          unint64_t v29 = atomic_load((unint64_t *)&qword_18C575898);
          unsigned int v30 = atomic_load((unsigned int *)&dword_18C57588C);
          unint64_t v31 = atomic_load(&qword_18C575890);
        }

        while (v28 != v31);
        if (v28) {
          BOOL v32 = v29 == 0;
        }
        else {
          BOOL v32 = 1;
        }
        BOOL v33 = v32 || v30 == 0;
        if (v33
        {
          do
          int v156 = v155;
          os_unfair_lock_lock((os_unfair_lock_t)&unk_18C5758A0);
          char v37 = qword_18C575898;
          BOOL v38 = (qword_18C575898 & 3) == 0;
          if ((qword_18C575898 & 0xFFFFFFFFFFFFFFFCLL) == 0) {
            BOOL v38 = 1;
          }
          BOOL v148 = v38;
          unint64_t v150 = qword_18C575898 & 0xFFFFFFFFFFFFFFFCLL;
          if (v38) {
            int v39 = 4;
          }
          else {
            int v39 = *(unsigned __int8 *)(qword_18C575898 & 0xFFFFFFFFFFFFFFFCLL);
          }
          unint64_t v40 = dword_18C57588C;
          unint64_t v41 = qword_18C575890;
          if (!v42)
          {
            __src = (void *)(v41 + 8);
            v146 = (_DWORD *)v41;
            if ((1LL << v39) / ((1LL << v39) - (unint64_t)(v40 + 1)) < 4)
            {
              unsigned int v52 = (_DWORD *)v41;
              LOBYTE(v41) = v37;
            }

            else
            {
              int v44 = v39;
              char v45 = v39;
              unsigned __int8 v46 = v39 + 1;
              if (v46 >= 0x11u) {
                unsigned int v47 = 4;
              }
              else {
                unsigned int v47 = 2;
              }
              if (v46 < 9u) {
                size_t v48 = 1LL;
              }
              else {
                size_t v48 = v47;
              }
              unint64_t v49 = (unint64_t)calloc(2LL << v45, v48);
              if (!v49) {
                swift::hashable_support::findHashableBaseTypeOfHashableType();
              }
              if ((_DWORD)v48 != 1)
              {
                if ((_DWORD)v48 == 4) {
                  size_t v48 = 3LL;
                }
                else {
                  size_t v48 = 2LL;
                }
              }

              unint64_t v41 = v48 | v49;
              *(_BYTE *)unint64_t v49 = v46;
              if (v44) {
                __asm { BR              X8 }
              }

              atomic_store(v41, (unint64_t *)&qword_18C575898);
              if (!v148)
              {
                size_t v53 = malloc(0x10uLL);
                *size_t v53 = qword_18C5758A8;
                v53[1] = v150;
                qword_18C5758A8 = (uint64_t)v53;
              }

              unsigned int v52 = v146;
            }

            if (!v52 || (unint64_t v54 = (unint64_t)v52, v40 >= *v52))
            {
              unint64_t v55 = v40 + (v40 >> 2);
              if (v55 <= v40 + 1) {
                unint64_t v55 = v40 + 1;
              }
              size_t v56 = malloc_good_size(8 * v55 + 8);
              uint64_t v57 = malloc(v56);
              if (!v57) {
                swift::hashable_support::findHashableBaseTypeOfHashableType();
              }
              unint64_t v54 = (unint64_t)v57;
              *uint64_t v57 = (v56 + 0x7FFFFFFF8LL) >> 3;
              if (v52)
              {
                memcpy(v57 + 2, __src, 8 * v40);
                unint64_t v58 = malloc(0x10uLL);
                *unint64_t v58 = qword_18C5758A8;
                v58[1] = v52;
                qword_18C5758A8 = (uint64_t)v58;
              }

              atomic_store(v54, &qword_18C575890);
            }

            v157[0] = 21;
            unint64_t v59 = swift::MetadataAllocator::Allocate((swift::MetadataAllocator *)v157, 0x40uLL, (const char *)8, v43);
            *(void *)unint64_t v59 = v155;
            *(_OWORD *)((char *)v59 + 8) = 0u;
            *(_OWORD *)((char *)v59 + 24) = 0u;
            *(_OWORD *)((char *)v59 + 40) = 0u;
            *((void *)v59 + 7) = 0LL;
            *(void *)(v54 + 8 * v40 + 8) = v59;
            atomic_store(v40 + 1, (unsigned int *)&dword_18C57588C);
            __asm { BR              X11 }
          }

          uint64_t v26 = *v42;
          __dmb(0xBu);
          {
            BOOL v8 = v153;
          }

          else
          {
            unsigned int v50 = (void **)qword_18C5758A8;
            BOOL v8 = v153;
            if (qword_18C5758A8)
            {
              do
              {
                unsigned int v51 = (void **)*v50;
                free(v50[1]);
                free(v50);
                unsigned int v50 = v51;
              }

              while (v51);
            }

            qword_18C5758A8 = 0LL;
          }

          os_unfair_lock_unlock((os_unfair_lock_t)&unk_18C5758A0);
          qword_18C5758B0 = (uint64_t)v26;
        }

        else
        {
          qword_18C5758B0 = *v34;
          uint64_t v26 = (void *)*v34;
          do
          BOOL v8 = v153;
        }
      }

      uint64_t v24 = v26 + 1;
    }

    else if (v24[7] != -1LL)
    {
    }

    unint64_t v60 = (os_unfair_lock_s *)(v24 + 6);
    v155 = a2;
    uint64_t v61 = (unint64_t *)atomic_load(v24 + 5);
    if (v61 && (unsigned __int16 *)v61[1] == v155)
    {
LABEL_173:
      unint64_t ForeignWitnessTable = atomic_load(v61);
      if (ForeignWitnessTable >= 2 && (ForeignWitnessTable & 1) != 0)
      {
        os_unfair_lock_lock(v60);
        unint64_t ForeignWitnessTable = *v61;
        if ((*v61 & 1) != 0
          && (unint64_t v134 = ForeignWitnessTable & 0xFFFFFFFFFFFFFFFELL, (ForeignWitnessTable & 0xFFFFFFFFFFFFFFFELL) != 0))
        {
          ++*(void *)v134;
          os_unfair_lock_unlock(v60);
          os_unfair_lock_lock((os_unfair_lock_t)(v134 + 8));
          os_unfair_lock_unlock((os_unfair_lock_t)(v134 + 8));
          os_unfair_lock_lock(v60);
          if (*(void *)v134 == 1LL) {
            swift_slowDealloc((void *)(ForeignWitnessTable & 0xFFFFFFFFFFFFFFFELL));
          }
          else {
            --*(void *)v134;
          }
          os_unfair_lock_unlock(v60);
          unint64_t ForeignWitnessTable = *v61;
        }

        else
        {
          os_unfair_lock_unlock(v60);
        }
      }

      if (!ForeignWitnessTable) {
        return ForeignWitnessTable | 1;
      }
      unsigned int v135 = a1[3];
      if ((v135 & 0x80) == 0) {
        return ForeignWitnessTable | 1;
      }
      uint64_t v136 = a1 + 1;
      int v137 = (v135 >> 3) & 7;
      if (v137 == 1)
      {
        uint64_t v140 = *(void *)((char *)v136 + *v136);
        uint64_t v141 = *a1;
        if ((_DWORD)v141) {
          goto LABEL_197;
        }
      }

      else
      {
        if (!v137)
        {
          uint64_t v138 = *v136;
          uint64_t v139 = (char *)v136 + v138;
          if ((_DWORD)v138) {
            uint64_t v140 = (uint64_t)v139;
          }
          else {
            uint64_t v140 = 0LL;
          }
          uint64_t v141 = *a1;
          if (!(_DWORD)v141) {
            goto LABEL_193;
          }
LABEL_197:
          uint64_t v142 = (void *)((char *)a1 + (v141 & 0xFFFFFFFFFFFFFFFELL));
          if ((v141 & 1) != 0) {
            uint64_t v142 = (void *)*v142;
          }
          goto LABEL_199;
        }

        uint64_t v140 = 0LL;
        uint64_t v141 = *a1;
        if ((_DWORD)v141) {
          goto LABEL_197;
        }
      }

unint64_t swift_getAssociatedTypeWitness( uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  unint64_t result = atomic_load((unint64_t *)&a2[((unint64_t)a5 - a4) & 0x7FFFFFFF8LL]);
  if ((result & 1) != 0) {
    return swift_getAssociatedTypeWitnessSlow(a1, a2, a3, a4, a5);
  }
  return result;
}

unint64_t swift_getAssociatedTypeWitnessSlow( uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  if (swift_getAssociatedTypeWitnessSlow::Override) {
    return swift_getAssociatedTypeWitnessSlow::Override(a1, a2, a3, a4, a5, swift_getAssociatedTypeWitnessSlowImpl);
  }
  else {
    return swift_getAssociatedTypeWitnessSlowImpl(a1, a2, a3, a4, a5);
  }
}

uint64_t swift_getAssociatedTypeWitnessRelative( const char *a1, const char *a2, unint64_t a3, uint64_t a4, _DWORD *a5)
{
  BOOL v8 = &a2[4 * (((unint64_t)a5 - a4) >> 3)];
  unint64_t v9 = (_BYTE *)((unint64_t)&v8[*(int *)v8] & 0xFFFFFFFFFFFFFFFELL);
  uint64_t v10 = *(int *)a2;
  uint64_t v11 = &a2[v10 & 0xFFFFFFFFFFFFFFFELL];
  if ((v10 & 1) != 0) {
    uint64_t v11 = *(const char **)v11;
  }
  uint64_t v12 = *(int *)v11;
  if ((_DWORD)v12)
  {
    uint64_t v13 = (uint64_t)&v11[v12 & 0xFFFFFFFFFFFFFFFELL];
    if ((v12 & 1) != 0) {
      uint64_t v13 = *(void *)v13;
    }
  }

  else
  {
    uint64_t v13 = 0LL;
  }

  SymbolicMangledNameStringRef = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef(v9, a2);
  unint64_t v16 = (unint64_t)v15;
  v59[0] = SymbolicMangledNameStringRef;
  v59[1] = v15;
  ConformingSuperclass = swift::findConformingSuperclass(a3, (uint64_t)v11);
  uint64_t v21 = 0LL;
  int v53 = 0;
  uint64_t v22 = (uint64_t)*ConformingSuperclass;
  if ((int)v22 <= 514)
  {
    if ((v22 - 512) >= 3)
    {
      if ((_DWORD)v22) {
        goto LABEL_20;
      }
      if (((_BYTE)ConformingSuperclass[4] & 2) == 0)
      {
        uint64_t v21 = 0LL;
        goto LABEL_20;
      }

      uint64_t v23 = (uint64_t *)(ConformingSuperclass + 8);
      goto LABEL_19;
    }

unint64_t swift_getAssociatedConformanceWitness( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5 = atomic_load((unint64_t *)(a1 + ((a5 - a4) & 0x7FFFFFFF8LL)));
  if ((v5 & 1) != 0) {
    return swift_getAssociatedConformanceWitnessSlow(a1, a2, a3, a4, a5);
  }
  else {
    return v5;
  }
}

unint64_t swift_getAssociatedConformanceWitnessSlow( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (swift_getAssociatedConformanceWitnessSlow::Override) {
    return swift_getAssociatedConformanceWitnessSlow::Override( a1,  a2,  a3,  a4,  a5,  swift_getAssociatedConformanceWitnessSlowImpl);
  }
  unint64_t v12 = a5 - a4;
  unint64_t result = atomic_load((unint64_t *)(a1 + 8LL * (v12 >> 3)));
  if ((result & 1) != 0)
  {
    SymbolicMangledNameStringRef = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef( (_BYTE *)(result & 0xFFFFFFFFFFFFFFFELL | (*(unsigned __int8 *)(result & 0xFFFFFFFFFFFFFFFELL) == 255)),  v10);
    uint64_t v15 = (v12 >> 3);
    uint64_t v16 = *(int *)(SymbolicMangledNameStringRef + 1);
    if ((_DWORD)v16) {
      unint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))&SymbolicMangledNameStringRef[v16 + 1])(a3, a2, a1);
    }
    else {
      unint64_t result = MEMORY[0](a3, a2, a1);
    }
    atomic_store(result, (unint64_t *)(a1 + 8 * v15));
  }

  return result;
}

uint64_t swift_getAssociatedConformanceWitnessRelative( uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = a1;
  if ((a1 & 1) != 0) {
    uint64_t v8 = *(void *)(a1 & 0xFFFFFFFFFFFFFFFELL);
  }
  unint64_t v9 = (int *)(v8 + 4LL * ((unint64_t)(a5 - a4) >> 3));
  SymbolicMangledNameStringRef = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef( (_BYTE *)(((unint64_t)v9 + *v9) & 0xFFFFFFFFFFFFFFFELL | (*(unsigned __int8 *)(((unint64_t)v9 + *v9) & 0xFFFFFFFFFFFFFFFELL) == 255)),  a2);
  uint64_t v12 = *(int *)(SymbolicMangledNameStringRef + 1);
  if ((_DWORD)v12) {
    uint64_t v13 = (uint64_t (*)(uint64_t, const char *, uint64_t))&SymbolicMangledNameStringRef[v12 + 1];
  }
  else {
    uint64_t v13 = 0LL;
  }
  return v13(a3, a2, a1);
}

BOOL swift_compareWitnessTables(uint64_t *a1, uint64_t *a2)
{
  return swift::MetadataCacheKey::areWitnessTablesEqual(a1, a2);
}

BOOL swift::MetadataCacheKey::areWitnessTablesEqual(uint64_t *a1, uint64_t *a2)
{
  if (a1 == a2) {
    return 1LL;
  }
  unint64_t v2 = (int *)*a1;
  unint64_t v3 = (int *)*a2;
  if (*a1 == *a2) {
    return 1LL;
  }
  if ((v2[3] & 0x80) == 0 || (v3[3] & 0x80) == 0) {
    return 0LL;
  }
  CanonicalTypeMetadata = swift::TargetProtocolConformanceDescriptor<swift::InProcess>::getCanonicalTypeMetadata(*a1);
  BOOL v6 = swift::TargetProtocolConformanceDescriptor<swift::InProcess>::getCanonicalTypeMetadata((uint64_t)v3);
  BOOL result = 0LL;
  if (CanonicalTypeMetadata && v6 && CanonicalTypeMetadata == v6)
  {
    uint64_t v7 = *v2;
    if ((_DWORD)v7)
    {
      uint64_t v8 = (void *)((char *)v2 + (v7 & 0xFFFFFFFFFFFFFFFELL));
      if ((v7 & 1) != 0) {
        uint64_t v8 = (void *)*v8;
      }
    }

    else
    {
      uint64_t v8 = 0LL;
    }

    uint64_t v9 = *v3;
    if ((_DWORD)v9)
    {
      uint64_t v10 = (void *)((char *)v3 + (v9 & 0xFFFFFFFFFFFFFFFELL));
      if ((v9 & 1) != 0) {
        uint64_t v10 = (void *)*v10;
      }
    }

    else
    {
      uint64_t v10 = 0LL;
    }

    return v8 == v10;
  }

  return result;
}

BOOL swift_compareProtocolConformanceDescriptors(int *a1, int *a2)
{
  if (a1 == a2) {
    return 1LL;
  }
  if ((a1[3] & 0x80) == 0 || (a2[3] & 0x80) == 0) {
    return 0LL;
  }
  CanonicalTypeMetadata = swift::TargetProtocolConformanceDescriptor<swift::InProcess>::getCanonicalTypeMetadata((uint64_t)a1);
  BOOL v6 = swift::TargetProtocolConformanceDescriptor<swift::InProcess>::getCanonicalTypeMetadata((uint64_t)a2);
  BOOL result = 0LL;
  if (CanonicalTypeMetadata && v6 && CanonicalTypeMetadata == v6)
  {
    uint64_t v7 = *a1;
    if ((_DWORD)v7)
    {
      uint64_t v8 = (void *)((char *)a1 + (v7 & 0xFFFFFFFFFFFFFFFELL));
      if ((v7 & 1) != 0) {
        uint64_t v8 = (void *)*v8;
      }
    }

    else
    {
      uint64_t v8 = 0LL;
    }

    uint64_t v9 = *a2;
    if ((_DWORD)v9)
    {
      uint64_t v10 = (void *)((char *)a2 + (v9 & 0xFFFFFFFFFFFFFFFELL));
      if ((v9 & 1) != 0) {
        uint64_t v10 = (void *)*v10;
      }
    }

    else
    {
      uint64_t v10 = 0LL;
    }

    return v8 == v10;
  }

  return result;
}

unint64_t *swift_checkMetadataState(const char *a1, uint64_t a2)
{
  unint64_t v3 = a1;
  return performOnMetadataCache<swift::MetadataResponse,swift_checkMetadataState::CheckStateCallbacks>(a2, &v3);
}

unint64_t *performOnMetadataCache<swift::MetadataResponse,swift_checkMetadataState::CheckStateCallbacks>( uint64_t a1, const char **a2)
{
  unint64_t v3 = (void *)a1;
  if (!swift::TargetMetadata<swift::InProcess>::isCanonicalStaticallySpecializedGenericMetadata(a1))
  {
    uint64_t v6 = *v3;
    if (*v3 > 0x7FFuLL || *v3 == 0LL)
    {
      uint64_t v8 = (unsigned int **)(v3 + 8);
    }

    else
    {
      if ((v6 - 515) <= 0xFFFFFFFC)
      {
        if (v6 != 515)
        {
          if (v6 != 769 || !v3[1]) {
            return v3;
          }
          if (qword_18C476AB8 != -1) {
        }
          }

        uint64_t v49 = v3[1];
        if (qword_18C476AF8 != -1) {
        v65[0] = v49;
        }
        do
          unsigned int v50 = __ldaxr((unsigned int *)&ForeignMetadata);
        while (__stxr(v50 + 1, (unsigned int *)&ForeignMetadata));
        do
        {
          unint64_t v51 = atomic_load(&qword_18C476AC8);
          unint64_t v52 = atomic_load((unint64_t *)&qword_18C476AD0);
          unsigned int v53 = atomic_load((unsigned int *)&dword_18C476AC4);
          unint64_t v54 = atomic_load(&qword_18C476AC8);
        }

        while (v51 != v54);
        if (v51) {
          BOOL v55 = v52 == 0;
        }
        else {
          BOOL v55 = 1;
        }
        if (v55 || v53 == 0)
        {
          uint64_t v61 = 0LL;
        }

        else
        {
          if (v61) {
            uint64_t v61 = (unint64_t *)*v61;
          }
        }

        do
          unsigned int v63 = __ldxr((unsigned int *)&ForeignMetadata);
        while (__stlxr(v63 - 1, (unsigned int *)&ForeignMetadata));
      }

      uint64_t v8 = (unsigned int **)(v3 + 1);
    }

    uint64_t v10 = *v8;
    unsigned int v11 = **v8;
    if ((v11 & 0x80) == 0)
    {
      int v12 = HIWORD(v11) & 3;
      switch(v12)
      {
        case 2:
          if (qword_18C476AF8 != -1) {
          v65[0] = (uint64_t)v10;
          }
          do
            unsigned int v38 = __ldaxr((unsigned int *)&ForeignMetadata);
          while (__stxr(v38 + 1, (unsigned int *)&ForeignMetadata));
          do
          {
            unint64_t v39 = atomic_load(&qword_18C476AC8);
            unint64_t v40 = atomic_load((unint64_t *)&qword_18C476AD0);
            unsigned int v41 = atomic_load((unsigned int *)&dword_18C476AC4);
            unint64_t v42 = atomic_load(&qword_18C476AC8);
          }

          while (v39 != v42);
          if (v39) {
            BOOL v43 = v40 == 0;
          }
          else {
            BOOL v43 = 1;
          }
          if (v43 || v41 == 0)
          {
            uint64_t v61 = 0LL;
          }

          else
          {
            if (v61) {
              uint64_t v61 = (unint64_t *)*v61;
            }
          }

          do
            unsigned int v62 = __ldxr((unsigned int *)&ForeignMetadata);
          while (__stlxr(v62 - 1, (unsigned int *)&ForeignMetadata));
        case 1:
          if (qword_18C476A78 != -1) {
          SingletonMetadataInitialization = (int *)swift::TargetTypeContextDescriptor<swift::InProcess>::getSingletonMetadataInitialization(v10);
          }
          uint64_t v46 = *SingletonMetadataInitialization;
          if ((_DWORD)v46) {
            unsigned int v47 = (unint64_t *)((char *)SingletonMetadataInitialization + v46);
          }
          else {
            unsigned int v47 = 0LL;
          }
          size_t v48 = (unint64_t *)atomic_load(v47 + 1);
        case 0:
          return v3;
      }

void swift::blockOnMetadataDependency(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  p_p = &__p;
  uint64_t v8 = (char *)operator new(0x10uLL);
  *(void *)uint64_t v8 = a1;
  *((void *)v8 + 1) = a2;
  unint64_t v86 = v8 + 16;
  int v87 = v8 + 16;
  std::string __p = v8;
  swift::blockOnMetadataDependency(swift::MetadataDependency,swift::MetadataDependency)::$_0::operator()( (uint64_t **)&p_p,  a3,  a4);
  uint64_t v10 = (void *)*((void *)v86 - 2);
  uint64_t v9 = *((void *)v86 - 1);
  v88[0] = v9;
  while (1)
  {
    uint64_t v16 = *v10;
    if (*v10 > 0x7FFuLL || *v10 == 0LL)
    {
      unint64_t v18 = (unsigned int **)(v10 + 8);
      goto LABEL_29;
    }

    if (v16 != 515)
    {
      if (v16 != 769 || !v10[1]) {
        goto LABEL_2;
      }
      if (qword_18C476AB8 != -1) {
      char v19 = atomic_load(v10 - 14);
      }
      unsigned int v13 = v19 & 7;
      if (v9 > 62)
      {
        if (v9 != 255)
        {
          if (v9 != 63) {
            goto LABEL_159;
          }
          if (v13 > 1) {
            goto LABEL_3;
          }
          os_unfair_lock_lock((os_unfair_lock_t)&unk_18C476AB0);
          uint64_t v21 = *(v10 - 14);
          unsigned __int8 v22 = v21 & 7;
          goto LABEL_130;
        }

        if (v13) {
          goto LABEL_3;
        }
        os_unfair_lock_lock((os_unfair_lock_t)&unk_18C476AB0);
        uint64_t v21 = *(v10 - 14);
        unsigned __int8 v22 = v21 & 7;
        if ((*(_DWORD *)(v10 - 14) & 7) == 0) {
          goto LABEL_130;
        }
      }

      else
      {
        if (v9)
        {
          if (v9 != 1) {
            goto LABEL_159;
          }
          if (v13 > 2) {
            goto LABEL_3;
          }
          os_unfair_lock_lock((os_unfair_lock_t)&unk_18C476AB0);
          uint64_t v21 = *(v10 - 14);
          unsigned __int8 v22 = v21 & 7;
LABEL_130:
          v81[0] = v22;
          unsigned int v79 = (uint64_t *)(v21 & 0xFFFFFFFFFFFFFFF0LL);
          if ((v21 & 8) != 0 && v79)
          {
            uint64_t v80 = *(void *)((v21 & 0xFFFFFFFFFFFFFFF0LL) + 0x18);
            uint64_t v20 = *(void *)((v21 & 0xFFFFFFFFFFFFFFF0LL) + 0x20);
          }

          else
          {
            uint64_t v80 = 0LL;
            if (v79 && (v21 & 8) == 0)
            {
              uint64_t v80 = *v79;
              uint64_t v20 = *(void *)((v21 & 0xFFFFFFFFFFFFFFF0LL) + 8);
            }
          }

          uint64_t v82 = v80;
          unsigned int v83 = (void *)v20;
          unsigned int v78 = (os_unfair_lock_s *)&unk_18C476AB0;
          goto LABEL_143;
        }

        if (v13 > 3) {
          goto LABEL_3;
        }
        os_unfair_lock_lock((os_unfair_lock_t)&unk_18C476AB0);
        uint64_t v21 = *(v10 - 14);
        unsigned __int8 v22 = v21 & 7;
      }

uint64_t swift::blockOnMetadataDependency(swift::MetadataDependency,swift::MetadataDependency)::$_0::operator()( uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v8 = (void *)(*a1)[1];
  unint64_t v7 = (*a1)[2];
  if ((unint64_t)v8 >= v7)
  {
    uint64_t v10 = (void *)*v6;
    uint64_t v11 = ((uint64_t)v8 - *v6) >> 4;
    unint64_t v12 = v11 + 1;
    uint64_t v13 = v7 - (void)v10;
    if (v13 >> 3 > v12) {
      unint64_t v12 = v13 >> 3;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 >> 60) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v15 = (char *)operator new(16 * v14);
    }

    else
    {
      uint64_t v15 = 0LL;
    }

    uint64_t v16 = &v15[16 * v11];
    *(void *)uint64_t v16 = a2;
    *((void *)v16 + 1) = a3;
    uint64_t v9 = v16 + 16;
    if (v8 != v10)
    {
      do
      {
        *((_OWORD *)v16 - 1) = *((_OWORD *)v8 - 1);
        v16 -= 16;
        v8 -= 2;
      }

      while (v8 != v10);
      uint64_t v8 = (void *)*v6;
    }

    *uint64_t v6 = (uint64_t)v16;
    v6[1] = (uint64_t)v9;
    void v6[2] = (uint64_t)&v15[16 * v14];
    if (v8) {
      operator delete(v8);
    }
  }

  else
  {
    *uint64_t v8 = a2;
    v8[1] = a3;
    uint64_t v9 = v8 + 2;
  }

  v6[1] = (uint64_t)v9;
  uint64_t result = **a1;
  uint64_t v18 = (*a1)[1];
  if (result != v18 - 16)
  {
    char v19 = (void *)**a1;
    do
    {
      if (*v19 == a2) {
        diagnoseMetadataDependencyCycle(result, (v18 - result) >> 4);
      }
      v19 += 2;
      result += 16LL;
    }

    while (v19 != (void *)(v18 - 16));
  }

  return result;
}

void *swift::MetadataAllocator::InitialPoolLocation(swift::MetadataAllocator *this)
{
  return &InitialAllocationPool;
}

void checkAllocatorDebugEnvironmentVariables(void *a1, uint64_t a2, const char *a3, char *a4)
{
  if (swift::runtime::environment::initializeToken != -1) {
    dispatch_once_f( &swift::runtime::environment::initializeToken,  0LL,  (dispatch_function_t)swift::runtime::environment::initialize);
  }
  if (swift::runtime::environment::SWIFT_DEBUG_ENABLE_MALLOC_SCRIBBLE_variable) {
    memset(&InitialAllocationPool, 170, 0x10000uLL);
  }
  _swift_debug_metadataAllocationIterationEnabled = swift::runtime::environment::SWIFT_DEBUG_ENABLE_METADATA_ALLOCATION_ITERATION_variable;
  if (swift::runtime::environment::SWIFT_DEBUG_ENABLE_METADATA_ALLOCATION_ITERATION_variable)
  {
    do
      unsigned __int128 v4 = __ldxp(&AllocationPool);
    while (__stxp(v4, &AllocationPool));
    qword_18C486AF0 = 0LL;
    *(void *)algn_18C486AF8 = 65520LL;
    do
      __ldxp(&AllocationPool);
    while (__stxp(__PAIR128__(65520LL, v4), &AllocationPool));
  }

  else if (swift::runtime::environment::SWIFT_DEBUG_ENABLE_METADATA_BACKTRACE_LOGGING_variable)
  {
    swift::warning( 0LL,  "Warning: SWIFT_DEBUG_ENABLE_METADATA_BACKTRACE_LOGGING without SWIFT_DEBUG_ENABLE_METADATA_ALLOCATION_ITERATION has no effect.\n",  a3,  a4);
  }

uint64_t swift::runtime::environment::SWIFT_DEBUG_ENABLE_METADATA_BACKTRACE_LOGGING( swift::runtime::environment *this)
{
  if (swift::runtime::environment::initializeToken != -1) {
    dispatch_once_f( &swift::runtime::environment::initializeToken,  0LL,  (dispatch_function_t)swift::runtime::environment::initialize);
  }
  return swift::runtime::environment::SWIFT_DEBUG_ENABLE_METADATA_BACKTRACE_LOGGING_variable;
}

void *recordBacktrace(void *a1)
{
  unint64_t v5 = a1;
  v3[0] = off_189B8D2E8;
  v3[1] = &v5;
  unsigned __int128 v4 = v3;
  swift::withCurrentBacktrace(v3);
  uint64_t result = v4;
  if (v4 == v3)
  {
    uint64_t v2 = 4LL;
    uint64_t result = v3;
  }

  else
  {
    if (!v4) {
      return result;
    }
    uint64_t v2 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v2))();
}

void checkScribble(char *a1, unint64_t a2)
{
  if (swift::runtime::environment::initializeToken != -1) {
    dispatch_once_f( &swift::runtime::environment::initializeToken,  0LL,  (dispatch_function_t)swift::runtime::environment::initialize);
  }
  if (swift::runtime::environment::SWIFT_DEBUG_ENABLE_MALLOC_SCRIBBLE_variable) {
    BOOL v4 = a2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    unint64_t v5 = (unsigned __int8 *)a1;
    do
    {
      if (*a1 != 170)
      {
        if (a2 >= 0x10) {
          uint64_t v6 = 16LL;
        }
        else {
          uint64_t v6 = a2;
        }
        if (a2 <= 0x10) {
          unint64_t v7 = "";
        }
        else {
          unint64_t v7 = "...";
        }
        __swift::__runtime::llvm::toHex(v5, v6, 0, &v11);
        if ((v11.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t v10 = &v11;
        }
        else {
          uint64_t v10 = (std::string *)v11.__r_.__value_.__r.__words[0];
        }
        swift::fatalError(0LL, "corrupt metadata allocation arena detected at %p: %s%s", v8, v9, a1, v10, v7);
      }

      ++v5;
      ++a1;
      --a2;
    }

    while (a2);
  }

swift::MetadataAllocator *swift::allocateMetadata( size_t __size, const char *a2, unint64_t a3, char *a4)
{
  __int16 v5 = 12;
  return swift::MetadataAllocator::Allocate((swift::MetadataAllocator *)&v5, __size, a2, a4);
}

BOOL swift::TargetMetadata<swift::InProcess>::satisfiesClassConstraint(uint64_t a1)
{
  unint64_t v1 = *(void *)a1;
  if (*(void *)a1 == 771LL) {
    return (*(_DWORD *)(a1 + 8) & 0x80FFFFFF) == 0;
  }
  if (v1 > 0x7FF) {
    LODWORD(swift_asprintf(v0, v1) = 0;
  }
  BOOL result = 1LL;
  if ((_DWORD)v1) {
    return (_DWORD)v1 == 515 || (_DWORD)v1 == 773;
  }
  return result;
}

uint64_t swift_getTypeContextDescriptor(unint64_t *a1)
{
  uint64_t v1 = 0LL;
  unint64_t v2 = *a1;
  if (*a1 > 0x7FF) {
    LODWORD(v2) = 0;
  }
  if ((int)v2 > 514)
  {
    if ((_DWORD)v2 != 515 && (_DWORD)v2 != 516) {
      return v1;
    }
    goto LABEL_10;
  }

  if ((v2 - 512) < 3)
  {
LABEL_10:
    BOOL v4 = (uint64_t *)(a1 + 1);
    return *v4;
  }

  if (!(_DWORD)v2)
  {
    if ((a1[4] & 2) == 0) {
      return 0LL;
    }
    BOOL v4 = (uint64_t *)(a1 + 8);
    return *v4;
  }

  return v1;
}

uint64_t swift_getKeyPath(uint64_t a1, uint64_t a2)
{
  if (swift_getKeyPath::Override) {
    return swift_getKeyPath::Override(a1, a2, swift_getKeyPathImpl);
  }
  else {
    return swift_getKeyPathImpl(a1, a2);
  }
}

unint64_t swift_getAssociatedTypeWitnessSlowImpl( uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v64 = a3;
  uint64_t v65 = (uint64_t *)a2;
  uint64_t v63 = a4;
  unint64_t v6 = (unint64_t)a5 - a4;
  unint64_t result = atomic_load((unint64_t *)&a2[8 * (((unint64_t)a5 - a4) >> 3)]);
  if ((result & 1) != 0)
  {
    int v10 = *(unsigned __int8 *)(result & 0xFFFFFFFFFFFFFFFELL);
    std::string v11 = (_BYTE *)(result & 0xFFFFFFFFFFFFFFFELL | (v10 == 255));
    uint64_t v12 = *v65;
    uint64_t v13 = *(int *)*v65;
    if ((_DWORD)v13)
    {
      unint64_t v14 = (void *)((v13 & 0xFFFFFFFFFFFFFFFELL) + v12);
      if ((v13 & 1) != 0) {
        unint64_t v14 = (void *)*v14;
      }
    }

    else
    {
      unint64_t v14 = 0LL;
    }

    unsigned int v62 = v14;
    SymbolicMangledNameStringRef = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef(v11, a2);
    uint64_t v17 = v16;
    v61[0] = SymbolicMangledNameStringRef;
    v61[1] = v16;
    __int16 v60 = 1;
    unsigned int v58 = "freshly constructed error";
    unint64_t v59 = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
    if (v10 != 255)
    {
      ConformingSuperclass = swift::findConformingSuperclass(v64, v12);
      swift::SubstGenericParametersFromMetadata::SubstGenericParametersFromMetadata( (uint64_t)v50,  (uint64_t)ConformingSuperclass,  v19,  v20);
      v45[0] = off_189B8D3C0;
      v45[1] = v50;
      unint64_t v46 = v45;
      v43[0] = &off_189B8D408;
      v43[1] = v50;
      unint64_t v44 = v43;
      swift_getTypeByMangledName(v47, a1, SymbolicMangledNameStringRef, v17, v51, v45, v43);
      swift::TypeLookupErrorOr<swift::TypeInfo>::operator=((uint64_t *)&v58, v47);
      if (v49 == 1) {
        ((void (*)(uint64_t, uint64_t, void))v47[1])(v47[0], 3LL, 0LL);
      }
      uint64_t v21 = v44;
      if (v44 == v43)
      {
        uint64_t v22 = 4LL;
        uint64_t v21 = v43;
      }

      else
      {
        if (!v44) {
          goto LABEL_20;
        }
        uint64_t v22 = 5LL;
      }

      (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_20:
      unint64_t v26 = v46;
      if (v46 == v45)
      {
        uint64_t v27 = 4LL;
        unint64_t v26 = v45;
      }

      else
      {
        if (!v46) {
          goto LABEL_25;
        }
        uint64_t v27 = 5LL;
      }

      (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_25:
      if (v52 != &v53) {
        free(v52);
      }
      goto LABEL_34;
    }

    v56[0] = off_189B8D330;
    v56[1] = v64;
    uint64_t v57 = v56;
    uint64_t v23 = operator new(0x28uLL);
    *uint64_t v23 = off_189B8D378;
    v23[1] = &v62;
    v23[2] = &v65;
    v23[3] = &v64;
    v23[4] = &v63;
    char v55 = v23;
    swift_getTypeByMangledName(v50, a1, SymbolicMangledNameStringRef, v17, 0LL, v56, v54);
    swift::TypeLookupErrorOr<swift::TypeInfo>::operator=((uint64_t *)&v58, v50);
    unsigned int v24 = v55;
    if (v55 == v54)
    {
      uint64_t v25 = 4LL;
      unsigned int v24 = v54;
    }

    else
    {
      if (!v55)
      {
LABEL_29:
        unsigned int v28 = v57;
        if (v57 == v56)
        {
          uint64_t v29 = 4LL;
          unsigned int v28 = v56;
        }

        else
        {
          if (!v57) {
            goto LABEL_34;
          }
          uint64_t v29 = 5LL;
        }

        (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_34:
        if (v60)
        {
          if (v60 == 1)
          {
            uint64_t v30 = (const char *)((uint64_t (*)(const char *, void, void))v59)(v58, 0LL, 0LL);
            goto LABEL_41;
          }
        }

        else
        {
          unint64_t result = (unint64_t)v58;
          if (v58)
          {
            if (!v59) {
              atomic_store((unint64_t)v58, (unint64_t *)&a2[8 * (v6 >> 3)]);
            }
            return result;
          }
        }

        uint64_t v30 = "NULL metadata but no error was provided";
LABEL_41:
        v42[0] = (const void *)swift_getTypeName(v64, 1LL);
        v42[1] = v31;
        v41[0] = findAssociatedTypeName((uint64_t)v62, a5);
        v41[1] = v32;
        uint64_t v33 = v50;
        __swift::__runtime::llvm::StringRef::str(v41, (uint64_t)v50);
        if (v51 < 0) {
          uint64_t v33 = (uint64_t *)v50[0];
        }
        dispatch_once_t v34 = v47;
        __swift::__runtime::llvm::StringRef::str(v42, (uint64_t)v47);
        if (v48 < 0) {
          dispatch_once_t v34 = (uint64_t *)v47[0];
        }
        uint64_t v35 = (uint64_t)v62 + *((int *)v62 + 2) + 8;
        __swift::__runtime::llvm::StringRef::str(v61, (uint64_t)v39);
        if (v40 >= 0) {
          dispatch_once_t v38 = v39;
        }
        else {
          dispatch_once_t v38 = (void *)v39[0];
        }
        swift::fatalError( 0LL,  "failed to demangle witness for associated type '%s' in conformance '%s: %s' from mangled name '%s' - %s\n",  v36,  v37,  v33,  v34,  v35,  v38,  v30);
      }

      uint64_t v25 = 5LL;
    }

    (*(void (**)(void))(*v24 + 8 * v25))();
    goto LABEL_29;
  }

  return result;
}

unint64_t swift_getAssociatedConformanceWitnessSlowImpl( uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6 = a5 - a4;
  unint64_t result = atomic_load((unint64_t *)(a1 + 8LL * ((unint64_t)(a5 - a4) >> 3)));
  if ((result & 1) != 0)
  {
    SymbolicMangledNameStringRef = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef( (_BYTE *)(result & 0xFFFFFFFFFFFFFFFELL | (*(unsigned __int8 *)(result & 0xFFFFFFFFFFFFFFFELL) == 255)),  a2);
    uint64_t v12 = (v6 >> 3);
    uint64_t v13 = *(int *)(SymbolicMangledNameStringRef + 1);
    if ((_DWORD)v13) {
      unint64_t result = ((uint64_t (*)(uint64_t, const char *, uint64_t))&SymbolicMangledNameStringRef[v13 + 1])( a3,  a2,  a1);
    }
    else {
      unint64_t result = MEMORY[0](a3, a2, a1);
    }
    atomic_store(result, (unint64_t *)(a1 + 8 * v12));
  }

  return result;
}

void cacheCanonicalSpecializedMetadata(swift::TargetTypeContextDescriptor<swift::InProcess> const*,long *)::$_0::__invoke( unsigned __int16 *a1)
{
  Cache = getCache(a1);
  int v3 = *(_DWORD *)a1 & 0x1F;
  if (v3 == 16)
  {
    if ((*(_DWORD *)a1 & 0x80000) == 0) {
      return;
    }
    unint64_t TrailingObjectsImpl = swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetClassDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetClassDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(a1);
    unint64_t v5 = *(unsigned int *)a1;
    if ((v5 & 0x40000000) != 0)
    {
      unsigned int v6 = *(_DWORD *)swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetClassDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetClassDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(a1);
      if ((*(_DWORD *)a1 & 0x20000000) != 0) {
        goto LABEL_5;
      }
    }

    else
    {
      unsigned int v6 = 0;
      if ((v5 & 0x20000000) != 0)
      {
LABEL_5:
        uint64_t v7 = *((_DWORD *)a1 + 7) & 1LL;
        goto LABEL_39;
      }
    }

    uint64_t v7 = 0LL;
LABEL_39:
    uint64_t v37 = TrailingObjectsImpl + 4 * ((v5 >> 30) & 1) + 12LL * v6;
    uint64_t v38 = swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetClassDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetClassDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(a1);
    uint64_t v39 = *(unsigned int *)(v37 + 4 * v7);
    if ((_DWORD)v39)
    {
      char v40 = (int *)v38;
      unint64_t v41 = (int *)(v38 + 4 * v39);
      do
      {
        v62[0] = (void *)((uint64_t (*)(uint64_t))((char *)v40 + *v40))(256LL);
        GenericArgs = swift::TargetMetadata<swift::InProcess>::getGenericArgs((uint64_t *)v62[0], v42, v43, v44);
        uint64_t v46 = *((unsigned __int16 *)Cache + 28);
        unint64_t v47 = *((unsigned __int16 *)Cache + 30);
        uint64_t v48 = *((unsigned __int16 *)Cache + 31);
        dispatch_once_t v49 = Cache[8];
        unint64_t v50 = (1455063249 * v46);
        if (*((_WORD *)Cache + 28))
        {
          unint64_t v51 = 0LL;
          uint64_t v52 = *((unsigned __int16 *)Cache + 31);
          do
          {
            if (v51 >= v47 || *(_WORD *)(v49 + 8 * v51) || (dispatch_once_t v53 = v49 + 8 * v51, v52 != *(unsigned __int16 *)(v53 + 2)))
            {
              unint64_t v50 = __ROR8__(v50, 10) ^ ((unint64_t)GenericArgs[v52] >> 19) ^ GenericArgs[v52];
            }

            else
            {
              unint64_t v54 = GenericArgs[*(unsigned __int16 *)(v53 + 4)];
              ++v51;
              if (v54)
              {
                uint64_t v55 = 0LL;
                do
                {
                  unint64_t v50 = __ROR8__(v50, 10) ^ (*(void *)((GenericArgs[v52] & 0xFFFFFFFFFFFFFFFELL) + 8 * v55) >> 19) ^ *(void *)((GenericArgs[v52] & 0xFFFFFFFFFFFFFFFELL) + 8 * v55);
                  ++v55;
                }

                while (v54 > v55);
              }
            }

            ++v52;
          }

          while (v52 != v48 + v46);
        }

        __int16 v56 = *((_WORD *)Cache + 29);
        __int128 v64 = (unint64_t)(Cache + 6);
        LOWORD(v65) = 0;
        unint64_t v66 = GenericArgs;
        LOWORD(v67) = v46;
        WORD1(v67) = v56;
        WORD2(v67) = v47;
        WORD3(v67) = v48;
        *((void *)&v67 + 1) = v49;
        LODWORD(v68) = (668265261 * v50) >> 10;
        if ((v59 & 1) != 0)
        {
          if (*((void *)&v64 + 1)) {
            LOBYTE(v65) = 1;
          }
          if (BYTE1(v65) != 4)
          {
            if (!BYTE1(v65)) {
              goto LABEL_65;
            }
          }
        }

        else
        {
        }

        __int16 v60 = (void *)*((void *)&v64 + 1);
        if (*((void *)&v64 + 1))
        {
          os_unfair_lock_unlock((os_unfair_lock_t)(*((void *)&v64 + 1) + 8LL));
          char v61 = (void *)v60[2];
          v60[2] = 0LL;
          if (v61) {
            operator delete(v61);
          }
          swift_slowDealloc(v60);
        }

        ++v40;
      }

      while (v40 != v41);
    }

    return;
  }

  if (v3 == 17)
  {
    CanonicalMetadataPrespecializations = (int *)swift::TargetEnumDescriptor<swift::InProcess>::getCanonicalMetadataPrespecializations(a1);
    if (!v8) {
      return;
    }
    goto LABEL_11;
  }

  if (v3 != 18) {
LABEL_65:
  }
    abort();
  CanonicalMetadataPrespecializations = (int *)swift::TargetEnumDescriptor<swift::InProcess>::getCanonicalMetadataPrespecializations(a1);
  if (v8)
  {
LABEL_11:
    uint64_t v12 = &CanonicalMetadataPrespecializations[v8];
    do
    {
      uint64_t v13 = swift::TargetMetadata<swift::InProcess>::getGenericArgs( (uint64_t *)((char *)CanonicalMetadataPrespecializations + *CanonicalMetadataPrespecializations),  v8,  v9,  v10);
      uint64_t v14 = *((unsigned __int16 *)Cache + 28);
      unint64_t v15 = *((unsigned __int16 *)Cache + 30);
      uint64_t v16 = *((unsigned __int16 *)Cache + 31);
      dispatch_once_t v17 = Cache[8];
      unint64_t v18 = (1455063249 * v14);
      if (*((_WORD *)Cache + 28))
      {
        unint64_t v19 = 0LL;
        uint64_t v20 = *((unsigned __int16 *)Cache + 31);
        do
        {
          if (v19 >= v15 || *(_WORD *)(v17 + 8 * v19) || (dispatch_once_t v21 = v17 + 8 * v19, v20 != *(unsigned __int16 *)(v21 + 2)))
          {
            unint64_t v18 = __ROR8__(v18, 10) ^ ((unint64_t)v13[v20] >> 19) ^ v13[v20];
          }

          else
          {
            unint64_t v22 = v13[*(unsigned __int16 *)(v21 + 4)];
            ++v19;
            if (v22)
            {
              uint64_t v23 = 0LL;
              do
              {
                unint64_t v24 = *(void *)((v13[v20] & 0xFFFFFFFFFFFFFFFELL) + 8 * v23);
                unint64_t v18 = __ROR8__(v18, 10) ^ (v24 >> 19) ^ v24;
                ++v23;
              }

              while (v22 > v23);
            }
          }

          ++v20;
        }

        while (v20 != v16 + v14);
      }

      __int16 v25 = *((_WORD *)Cache + 29);
      v62[0] = v13;
      LOWORD(v62[1]) = v14;
      WORD1(v62[1]) = v25;
      WORD2(v62[1]) = v15;
      HIWORD(v62[1]) = v16;
      *(void *)&__int128 v63 = v17;
      DWORD2(v63) = (668265261 * v18) >> 10;
      unint64_t v26 = atomic_load((unint64_t *)Cache + 5);
      if (!v26
        || (int v27 = *(_DWORD *)(v26 + 24),
            unint64_t v66 = (uint64_t *)(v26 + 40),
            __int128 v67 = *(_OWORD *)(v26 + 8),
            LODWORD(v68) = v27,
            !swift::MetadataCacheKey::operator==((uint64_t)v62, (uint64_t)&v66)))
      {
        do
          unsigned int v28 = __ldaxr((unsigned int *)Cache);
        while (__stxr(v28 + 1, (unsigned int *)Cache));
        do
        {
          unint64_t v29 = atomic_load((unint64_t *)Cache + 1);
          unint64_t v30 = atomic_load((unint64_t *)Cache + 2);
          uint64_t v31 = atomic_load((unsigned int *)Cache + 1);
          unint64_t v32 = atomic_load((unint64_t *)Cache + 1);
        }

        while (v29 != v32);
        if (v29) {
          unint64_t v33 = v29 + 8;
        }
        else {
          unint64_t v33 = 0LL;
        }
        unint64_t v66 = Cache;
        *(void *)&__int128 v67 = v30;
        *((void *)&v67 + 1) = v33;
        uint64_t v68 = v31;
        if (!v34)
        {
          do
            unsigned int v36 = __ldxr((unsigned int *)Cache);
          while (__stlxr(v36 - 1, (unsigned int *)Cache));
          __int128 v64 = *(_OWORD *)v62;
          __int128 v65 = v63;
          os_unfair_lock_lock((os_unfair_lock_t)Cache + 6);
          __asm { BR              X8 }
        }

        Cache[5] = *v34;
        unint64_t v26 = *v34;
        do
          unsigned int v35 = __ldxr((unsigned int *)Cache);
        while (__stlxr(v35 - 1, (unsigned int *)Cache));
      }

      ++CanonicalMetadataPrespecializations;
    }

    while (CanonicalMetadataPrespecializations != v12);
  }

unint64_t swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetClassDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetClassDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl( unsigned __int16 *a1)
{
  unint64_t v1 = *(unsigned int *)a1;
  if ((v1 & 0x80) != 0)
  {
    uint64_t v9 = (uint64_t)&a1[8 * ((v1 >> 7) & 1) + 22];
    int v10 = (unsigned __int16 *)(((v9 + a1[26] + 3) & 0xFFFFFFFFFFFFFFFCLL) + 12LL * a1[27]);
    unsigned __int16 v11 = a1[29];
    uint64_t v12 = &v10[2 * (v11 & 1)];
    if ((v11 & 1) != 0) {
      v12 += 4 * *v10;
    }
    unint64_t v2 = (unint64_t)v12 + (v11 & 2);
    if ((v11 & 2) != 0
      && (uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)*v12), v13.i16[0] = vaddlv_u8(v13), v2 += 2LL * v13.u32[0], *v12))
    {
      unsigned int v6 = *(unsigned __int16 *)((char *)&v12[v13.u32[0] - 1] + (v11 & 2));
    }

    else
    {
      unsigned int v6 = 0;
    }

    uint64_t v3 = (v1 >> 29) & 1;
    BOOL v4 = (v1 & 0x30000) == 0x20000;
    BOOL v5 = (v1 & 0x30000) == 0x10000;
    if ((v1 & 0x80000000) != 0)
    {
      unint64_t v15 = (unsigned __int16 *)(((v9 + a1[26] + 3) & 0xFFFFFFFFFFFFFFFCLL) + 12LL * a1[27]);
      unsigned __int16 v16 = a1[29];
      dispatch_once_t v17 = &v15[2 * (v16 & 1)];
      if ((v16 & 1) != 0) {
        v17 += 4 * *v15;
      }
      unint64_t v8 = (unint64_t)v17 + (v16 & 2);
      if ((v16 & 2) != 0
        && (uint8x8_t v18 = (uint8x8_t)vcnt_s8((int8x8_t)*v17), v18.i16[0] = vaddlv_u8(v18), v8 += 2LL * v18.u32[0], *v17))
      {
        unsigned int v7 = *(unsigned __int16 *)((char *)&v17[v18.u32[0] - 1] + (v16 & 2));
      }

      else
      {
        unsigned int v7 = 0;
      }

      goto LABEL_18;
    }
  }

  else
  {
    unint64_t v2 = ((unint64_t)&a1[8 * ((v1 >> 7) & 1) + 23] + 1) & 0xFFFFFFFFFFFFFFFCLL;
    uint64_t v3 = (v1 >> 29) & 1;
    BOOL v4 = (v1 & 0x30000) == 0x20000;
    BOOL v5 = (v1 & 0x30000) == 0x10000;
    unsigned int v6 = 0;
    if ((v1 & 0x80000000) != 0)
    {
      unsigned int v7 = 0;
      unint64_t v8 = ((unint64_t)&a1[8 * ((v1 >> 7) & 1) + 23] + 1) & 0xFFFFFFFFFFFFFFFCLL;
LABEL_18:
      uint64_t v14 = *(unsigned int *)(((v8 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 12LL * v7 + 4 * v3 + 4 * v4 + 12LL * v5 + 4);
      return ((v2 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 12LL * v6 + 4 * v3 + 4 * v4 + 12LL * v5 + ((v1 >> 28) & 8) + 8 * v14;
    }
  }

  uint64_t v14 = 0LL;
  return ((v2 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 12LL * v6 + 4 * v3 + 4 * v4 + 12LL * v5 + ((v1 >> 28) & 8) + 8 * v14;
}

uint64_t swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetClassDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetClassDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl( unsigned __int16 *a1)
{
  unint64_t TrailingObjectsImpl = swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetClassDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetClassDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(a1);
  unint64_t v3 = *(unsigned int *)a1;
  if ((v3 & 0x40000000) != 0)
  {
    unsigned int v4 = *(_DWORD *)swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetClassDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetClassDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(a1);
    unsigned int v5 = *(_DWORD *)a1;
    if ((*(_DWORD *)a1 & 0x20000000) != 0)
    {
LABEL_3:
      uint64_t v6 = *((_DWORD *)a1 + 7) & 1LL;
      if ((v5 & 0x80000) != 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }

  else
  {
    unsigned int v4 = 0;
    unsigned int v5 = *(_DWORD *)a1;
    if ((v3 & 0x20000000) != 0) {
      goto LABEL_3;
    }
  }

  uint64_t v6 = 0LL;
  if ((v5 & 0x80000) != 0)
  {
LABEL_4:
    unint64_t v7 = swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetClassDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetClassDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(a1);
    unint64_t v8 = *(unsigned int *)a1;
    if ((v8 & 0x40000000) != 0)
    {
      unsigned int v9 = *(_DWORD *)swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetClassDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetClassDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(a1);
      if ((*(_DWORD *)a1 & 0x20000000) != 0) {
        goto LABEL_6;
      }
    }

    else
    {
      unsigned int v9 = 0;
      if ((v8 & 0x20000000) != 0)
      {
LABEL_6:
        uint64_t v10 = *((_DWORD *)a1 + 7) & 1;
LABEL_12:
        uint64_t v11 = *(unsigned int *)(v7 + 4 * ((v8 >> 30) & 1) + 12LL * v9 + 4 * v10);
        return TrailingObjectsImpl + 4 * ((v3 >> 30) & 1) + 12LL * v4 + 4 * v6 + 4LL * ((v5 >> 19) & 1) + 4 * v11;
      }
    }

    uint64_t v10 = 0LL;
    goto LABEL_12;
  }

unint64_t swift::LockingConcurrentMapStorage<anonymous namespace'::GenericCacheEntry,(unsigned short)14>::getOrInsert<swift::MetadataCacheKey,swift::MetadataWaitQueue::Worker &,swift::MetadataRequest &,swift::TargetMetadata<swift::InProcess> const*&>( unint64_t a1, _OWORD *a2)
{
  __int128 v3 = a2[1];
  *(_OWORD *)unsigned __int16 v16 = *a2;
  __int128 v17 = v3;
  unint64_t v4 = atomic_load((unint64_t *)(a1 + 40));
  if (!v4
    || (int v5 = *(_DWORD *)(v4 + 24),
        unint64_t v20 = v4 + 40,
        __int128 v21 = *(_OWORD *)(v4 + 8),
        LODWORD(v22) = v5,
        !swift::MetadataCacheKey::operator==((uint64_t)v16, (uint64_t)&v20)))
  {
    do
      unsigned int v6 = __ldaxr((unsigned int *)a1);
    while (__stxr(v6 + 1, (unsigned int *)a1));
    do
    {
      unint64_t v7 = atomic_load((unint64_t *)(a1 + 8));
      unint64_t v8 = atomic_load((unint64_t *)(a1 + 16));
      uint64_t v9 = atomic_load((unsigned int *)(a1 + 4));
      unint64_t v10 = atomic_load((unint64_t *)(a1 + 8));
    }

    while (v7 != v10);
    if (v7) {
      unint64_t v11 = v7 + 8;
    }
    else {
      unint64_t v11 = 0LL;
    }
    unint64_t v20 = a1;
    *(void *)&__int128 v21 = v8;
    *((void *)&v21 + 1) = v11;
    uint64_t v22 = v9;
    if (!v12)
    {
      do
        unsigned int v14 = __ldxr((unsigned int *)a1);
      while (__stlxr(v14 - 1, (unsigned int *)a1));
      __int128 v18 = *(_OWORD *)v16;
      __int128 v19 = v17;
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 24));
      __asm { BR              X8 }
    }

    *(void *)(a1 + 40) = *v12;
    unint64_t v4 = *v12;
    do
      unsigned int v13 = __ldxr((unsigned int *)a1);
    while (__stlxr(v13 - 1, (unsigned int *)a1));
  }

  return v4;
}

uint64_t swift::ConcurrentReadableHashMap<swift::HashMapElementWrapper<anonymous namespace'::GenericCacheEntry>,swift::Mutex>::Snapshot::find<swift::MetadataCacheKey>( void *a1)
{
  if (a1[1] && a1[3] && a1[2]) {
    __asm { BR              X8 }
  }

  return 0LL;
}

BOOL swift::MetadataCacheKey::operator==(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)) {
    return 0LL;
  }
  uint64_t v4 = *(unsigned __int16 *)(a1 + 14);
  uint64_t v5 = *(unsigned __int16 *)(a1 + 8);
  uint64_t v6 = *(unsigned __int16 *)(a1 + 10);
  size_t v7 = 8 * (v5 + v4 + v6);
  uint64_t v8 = *(unsigned __int16 *)(a2 + 14);
  uint64_t v9 = *(unsigned __int16 *)(a2 + 8);
  uint64_t v10 = *(unsigned __int16 *)(a2 + 10);
  if (v7 != 8 * (v9 + v8 + v10)) {
    return 0LL;
  }
  unint64_t v11 = *(void **)a1;
  uint64_t v12 = *(void **)a2;
  BOOL result = 0LL;
  if ((_DWORD)v5 == (_DWORD)v9 && (_DWORD)v6 == (_DWORD)v10 && (_DWORD)v4 == (_DWORD)v8)
  {
    unint64_t v14 = *(unsigned __int16 *)(a1 + 12);
    if (*(_WORD *)(a1 + 12))
    {
      unint64_t v15 = *(unsigned __int16 **)(a1 + 16);
      unsigned __int16 v16 = *(unsigned __int16 **)(a2 + 16);
      if (*v15 != *v16 || v15[1] != v16[1] || v15[2] != v16[2]) {
        return 0LL;
      }
      __int128 v17 = v15 + 6;
      __int128 v18 = v16 + 6;
      uint64_t v19 = 1LL;
      do
      {
        unint64_t v20 = v19;
        if (v14 == v19) {
          break;
        }
        if (*(v17 - 2) != *(v18 - 2)) {
          break;
        }
        if (*(v17 - 1) != *(v18 - 1)) {
          break;
        }
        int v22 = *v17;
        v17 += 4;
        int v21 = v22;
        int v23 = *v18;
        v18 += 4;
        ++v19;
      }

      while (v21 == v23);
      if (v20 < v14) {
        return 0LL;
      }
    }

    if ((_DWORD)v4)
    {
      int v24 = v4;
      __int16 v25 = v11;
      unint64_t v26 = v12;
      while (*v25 == *v26)
      {
        ++v26;
        ++v25;
        if (!--v24) {
          goto LABEL_24;
        }
      }

      return 0LL;
    }

unint64_t swift::ConcurrentReadableHashMap<swift::HashMapElementWrapper<anonymous namespace'::GenericCacheEntry>,swift::Mutex>::resize( uint64_t a1, uint64_t a2, int a3)
{
  char v6 = a3 + 1;
  unsigned int v7 = (a3 + 1);
  if (v7 >= 0x11) {
    unsigned int v8 = 4;
  }
  else {
    unsigned int v8 = 2;
  }
  if (v7 < 9) {
    size_t v9 = 1LL;
  }
  else {
    size_t v9 = v8;
  }
  unint64_t v10 = (unint64_t)calloc(2LL << a3, v9);
  if (!v10) {
    swift::hashable_support::findHashableBaseTypeOfHashableType();
  }
  if ((_DWORD)v9 != 1)
  {
    if ((_DWORD)v9 == 4) {
      size_t v9 = 3LL;
    }
    else {
      size_t v9 = 2LL;
    }
  }

  unint64_t v11 = v9 | v10;
  *(_BYTE *)unint64_t v10 = v6;
  if (a3) {
    __asm { BR              X0 }
  }

  unint64_t v12 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  atomic_store(v11, (unint64_t *)(a1 + 16));
  if ((a2 & 3) != 0 && v12)
  {
    unsigned int v13 = malloc(0x10uLL);
    *unsigned int v13 = *(void *)(a1 + 32);
    v13[1] = v12;
    *(void *)(a1 + 32) = v13;
  }

  return v11;
}

uint64_t swift::MetadataCacheEntryBase<anonymous namespace'::GenericCacheEntry,void const*>::awaitSatisfyingState( unint64_t *a1, os_unfair_lock_t lock, const char *a3)
{
  char v6 = atomic_load(a1);
  unsigned int v7 = v6 & 7;
  if (v7 - 1 >= 3)
  {
    if (v7 == 4) {
      return a1[4];
    }
    if ((v6 & 7) != 0) {
      goto LABEL_60;
    }
    uint64_t v9 = (unsigned __int16)a3 & 0x100;
  }

  else
  {
    if (a3 > 0x3Eu)
    {
      if (v7 > 1) {
        goto LABEL_15;
      }
    }

    else if ((_BYTE)a3)
    {
      if (v7 >= 3) {
        return a1[4];
      }
    }

    uint64_t v9 = (unsigned __int16)a3 & 0x100;
    if ((v6 & 8) != 0 && ((unsigned __int16)a3 & 0x100) != 0)
    {
LABEL_15:
      uint64_t v8 = a1[4];
      if (v7 == 1 || v7 == 3 || v7 == 2) {
        return v8;
      }
LABEL_60:
      abort();
    }
  }

  unint64_t v10 = 0LL;
  os_unfair_lock_t v24 = lock;
  __int16 v25 = 0LL;
  int v11 = a3;
  __int16 v26 = 0;
  while (1)
  {
    os_unfair_lock_lock(lock);
    if (v10)
    {
      if (*v10 == 1LL)
      {
        unint64_t v12 = (void *)v10[2];
        v10[2] = 0LL;
        if (v12) {
          operator delete(v12);
        }
        swift_slowDealloc(v10);
      }

      else
      {
        --*v10;
      }
    }

    unint64_t v13 = *a1;
    uint64_t v14 = *a1 & 7;
    if ((_DWORD)v14)
    {
      if ((_DWORD)v14 == 4)
      {
LABEL_50:
        os_unfair_lock_unlock(lock);
        uint64_t v8 = a1[4];
        goto LABEL_55;
      }

      goto LABEL_60;
    }

uint64_t swift::MetadataCacheEntryBase<anonymous namespace'::GenericCacheEntry,void const*>::doInitialization( uint64_t a1, uint64_t a2, const char *a3, char *a4)
{
  __int16 v5 = (__int16)a3;
  uint64_t v8 = *(uint64_t **)(a1 + 32);
  uint64_t v31 = *(void *)(a2 + 8);
  uint64_t v30 = *(__int128 **)(v31 + 16);
  if (!v30)
  {
    __int128 v32 = 0u;
    __int128 v33 = 0u;
    uint64_t v30 = &v32;
  }

  int v9 = a3;
  while (1)
  {
    unsigned int v10 = *(unsigned __int8 *)(a2 + 17);
    if (v10 > 2) {
      goto LABEL_25;
    }
    else {
      BOOL v11 = 1;
    }
    uint64_t v12 = 1LL;
    if (v11) {
      uint64_t v12 = 8LL;
    }
    unint64_t v13 = (_DWORD *)v8[v12];
    int v14 = *v13 & 0x1F;
    if (v14 == 18 || v14 == 17)
    {
      unint64_t v15 = v13 + 7;
    }

    else
    {
      if (v14 != 16) {
        goto LABEL_50;
      }
      unint64_t v15 = v13 + 11;
    }

    uint64_t v16 = (int)v15[1];
    uint64_t v17 = (char *)v15 + v16 + 4;
    if ((_DWORD)v16) {
      __int128 v18 = v17;
    }
    else {
      __int128 v18 = 0LL;
    }
    uint64_t v19 = *((int *)v18 + 1);
    unint64_t v20 = &v18[v19 + 4];
    if (!(_DWORD)v19) {
      unint64_t v20 = 0LL;
    }
    uint64_t v21 = ((uint64_t (*)(uint64_t *, __int128 *))v20)(v8, v30);
    if (v21)
    {
      uint64_t v22 = v21;
      unsigned __int8 v23 = (*(_BYTE *)(*(v8 - 1) + 82) & 0x40) != 0 ? 1 : 2;
    }

    else
    {
LABEL_25:
      uint64_t v24 = checkTransitiveCompleteness(v8, a2, a3, a4);
      if (!v24)
      {
        *(_BYTE *)(a2 + 17) = 4;
        uint64_t v25 = *(void *)(v31 + 16);
        *(void *)(v31 + 16) = 0LL;
        return *(void *)(a1 + 32);
      }

      uint64_t v22 = v24;
      unsigned __int8 v23 = 3;
    }

    uint64_t v4 = a2;
    *(_BYTE *)(a2 + 17) = v23;
    if (v9 > 62) {
      break;
    }
    if (v9)
    {
      if (v9 != 1) {
        goto LABEL_50;
      }
      if (v23 == 3) {
        goto LABEL_39;
      }
    }

void swift::MetadataCacheEntryBase<anonymous namespace'::GenericCacheEntry,void const*>::finishAndPublishProgress( unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(unsigned __int8 *)(a2 + 17);
  if (a3 || a5)
  {
    unint64_t v11 = (unint64_t)operator new(0x20uLL);
    *(void *)unint64_t v11 = a3;
    *(void *)(v11 + 8) = a4;
    *(void *)(v11 + 16) = a5;
  }

  else
  {
    unint64_t v11 = 0LL;
  }

  uint64_t v12 = *(os_unfair_lock_s **)a2;
  os_unfair_lock_lock(*(os_unfair_lock_t *)a2);
  atomic_store(v11 | v10, a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a2 + 8) + 8LL));
  unint64_t v13 = *(void **)(a2 + 8);
  if (*v13 == 1LL)
  {
    int v14 = (void *)v13[2];
    v13[2] = 0LL;
    if (v14) {
      operator delete(v14);
    }
    swift_slowDealloc(v13);
  }

  else
  {
    --*v13;
  }

  os_unfair_lock_unlock(v12);
  *(_BYTE *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = 0LL;
}

void swift::MetadataCacheEntryBase<anonymous namespace'::GenericCacheEntry,void const*>::notifyWaitingThreadsOfProgress( unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(os_unfair_lock_s **)a2;
  os_unfair_lock_lock(*(os_unfair_lock_t *)a2);
  int v9 = *(void **)(a2 + 8);
  if (*v9 == 1LL)
  {
    unint64_t v10 = *(void *)(a2 + 8);
  }

  else
  {
    unint64_t v10 = (unint64_t)swift_slowAlloc(0x30uLL, 0xFuLL);
    *(_OWORD *)unint64_t v10 = 0u;
    *(_OWORD *)(v10 + 16) = 0u;
    *(_OWORD *)(v10 + 32) = 0u;
    *(void *)unint64_t v10 = 1LL;
    *(void *)(v10 + 16) = 0LL;
    *(void *)(v10 + 24) = 0LL;
    os_unfair_lock_lock((os_unfair_lock_t)(v10 + 8));
    uint64_t v11 = v9[2];
    v9[2] = 0LL;
    uint64_t v12 = *(void **)(v10 + 16);
    *(void *)(v10 + 16) = v11;
    if (v12) {
      operator delete(v12);
    }
  }

  *(void *)(v10 + 24) = a3;
  *(void *)(v10 + 32) = a4;
  atomic_store(*(unsigned __int8 *)(a2 + 17) | v10 | 8, a1);
  if ((void *)v10 != v9)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a2 + 8) + 8LL));
    unint64_t v13 = *(void **)(a2 + 8);
    if (*v13 == 1LL)
    {
      int v14 = (void *)v13[2];
      v13[2] = 0LL;
      if (v14) {
        operator delete(v14);
      }
      swift_slowDealloc(v13);
    }

    else
    {
      --*v13;
    }

    *(void *)(a2 + 8) = v10;
  }

  os_unfair_lock_unlock(v8);
}

uint64_t checkTransitiveCompleteness(uint64_t *a1, uint64_t a2, const char *a3, char *a4)
{
  uint64_t v19 = v21;
  uint64_t v20 = 0x800000000LL;
  *(_OWORD *)int v14 = 0u;
  *(_OWORD *)std::string __p = 0u;
  int v16 = 1065353216;
  v12[4] = &v19;
  uint64_t v13 = 0LL;
  v12[0] = &v18;
  v12[1] = &v17;
  v12[2] = v14;
  v12[3] = &v13;
  __int128 v18 = a1;
  int v17 = 1;
  if ((findAnyTransitiveMetadata<checkTransitiveCompleteness(swift::TargetMetadata<swift::InProcess> const*)::$_0 &>( a1,  v12,  a3,  a4) & 1) != 0)
  {
LABEL_4:
    uint64_t v7 = v13;
    uint64_t v8 = __p[0];
    if (!__p[0]) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  while ((_DWORD)v20)
  {
    char v6 = (uint64_t *)v19[v20 - 1];
    LODWORD(v20) = v20 - 1;
    if (findAnyTransitiveMetadata<checkTransitiveCompleteness(swift::TargetMetadata<swift::InProcess> const*)::$_0 &>( v6,  v12,  v4,  v5)) {
      goto LABEL_4;
    }
  }

  uint64_t v7 = 0LL;
  uint64_t v8 = __p[0];
  if (__p[0])
  {
    do
    {
LABEL_5:
      int v9 = (void *)*v8;
      operator delete(v8);
      uint64_t v8 = v9;
    }

    while (v9);
  }

uint64_t findAnyTransitiveMetadata<checkTransitiveCompleteness(swift::TargetMetadata<swift::InProcess> const*)::$_0 &>( uint64_t *a1, void *a2, const char *a3, char *a4)
{
  uint64_t v6 = *a1;
  BOOL v7 = (unint64_t)*a1 > 0x7FF || *a1 == 0LL;
  if (v7)
  {
    uint64_t v8 = (_DWORD *)a1[8];
    uint64_t v9 = a1[1];
    if (v9
      && (*(_BYTE *)(v9 + 32) & 2) != 0
      && (checkTransitiveCompleteness(swift::TargetMetadata<swift::InProcess> const*)::$_0::operator()(a2, v9) & 1) != 0)
    {
      return 1LL;
    }

    unsigned int v10 = *v8;
    if ((*v8 & 0x80) == 0) {
      return 0LL;
    }
  }

  else
  {
    if ((v6 - 515) < 0xFFFFFFFD)
    {
      if (v6 == 515)
      {
        uint64_t v36 = a1[2];
        if (v36
          && (checkTransitiveCompleteness(swift::TargetMetadata<swift::InProcess> const*)::$_0::operator()(a2, v36) & 1) != 0)
        {
          return 1LL;
        }
      }

      else if (v6 == 769)
      {
        uint64_t v11 = a1[1];
        if (v11)
        {
          uint64_t v12 = 0LL;
          uint64_t v13 = a1 + 3;
          uint64_t v14 = v11 - 1;
          do
          {
            uint64_t result = checkTransitiveCompleteness(swift::TargetMetadata<swift::InProcess> const*)::$_0::operator()( a2,  v13[2 * v12]);
            if ((result & 1) != 0) {
              break;
            }
            BOOL v7 = v14 == v12++;
          }

          while (!v7);
          return result;
        }
      }

      return 0LL;
    }

    uint64_t v8 = (_DWORD *)a1[1];
    unsigned int v10 = *v8;
    if ((*v8 & 0x80) == 0) {
      return 0LL;
    }
  }

  int v16 = v10 & 0x1F;
  if (v16 == 18 || v16 == 17)
  {
    int v17 = (unsigned __int16 *)(v8 + 8);
    LODWORD(v20) = 2;
  }

  else
  {
    if (v16 != 16) {
      abort();
    }
    int v17 = (unsigned __int16 *)(v8 + 12);
    if ((v10 & 0x20000000) != 0)
    {
      uint64_t v37 = (int)v8[6];
      if ((_DWORD)v37) {
        uint64_t v38 = (unint64_t *)((char *)v8 + v37 + 24);
      }
      else {
        uint64_t v38 = 0LL;
      }
      unint64_t v39 = *v38;
      if (!*v38)
      {
        computeMetadataBoundsFromSuperclass(v8, (uint64_t)v38, a3, a4);
        unint64_t v39 = v40;
      }

      unint64_t v20 = v39 >> 3;
    }

    else
    {
      if ((v10 & 0x10000000) != 0)
      {
        int v18 = 0;
        uint64_t v19 = v8 + 6;
      }

      else
      {
        int v18 = v8[7];
        uint64_t v19 = v8 + 8;
      }

      LODWORD(v20) = v18 - *v19;
    }
  }

  unsigned __int16 v21 = v17[5];
  uint64_t v22 = v21 & 1;
  if ((v21 & 1) != 0)
  {
    uint64_t v23 = v17[2];
    uint64_t v24 = (_DWORD *)((((unint64_t)v17 + v23 + 15) & 0xFFFFFFFFFFFFFFFCLL) + 12LL * v17[3]);
    int v25 = HIWORD(*v24);
    __int16 v26 = &v24[v22];
    else {
      uint64_t v27 = 0LL;
    }
    if (!v17[2]) {
      return 0LL;
    }
  }

  else
  {
    int v25 = 0;
    uint64_t v27 = 0LL;
    uint64_t v23 = v17[2];
    if (!v17[2]) {
      return 0LL;
    }
  }

  int v28 = 0;
  unsigned int v29 = &a1[(int)v20];
  uint64_t v30 = (char *)(v17 + 6);
  uint64_t v31 = &v30[v23];
  while (1)
  {
    int v32 = *v30;
    if ((v32 & 0x80000000) == 0) {
      goto LABEL_38;
    }
    if ((v32 & 0x3F) == 0)
    {
      if ((checkTransitiveCompleteness(swift::TargetMetadata<swift::InProcess> const*)::$_0::operator()(a2, v29[v25]) & 1) != 0) {
        return 1LL;
      }
      goto LABEL_37;
    }

    unint64_t v33 = v29[LOWORD(v27[2 * v28 + 1])];
    if (v33) {
      break;
    }
LABEL_36:
    ++v28;
LABEL_37:
    ++v25;
LABEL_38:
    if (++v30 == v31) {
      return 0LL;
    }
  }

  dispatch_once_t v34 = (uint64_t *)(v29[v25] & 0xFFFFFFFFFFFFFFFELL);
  if (v33 <= 1) {
    uint64_t v35 = 1LL;
  }
  else {
    uint64_t v35 = v29[LOWORD(v27[2 * v28 + 1])];
  }
  while ((checkTransitiveCompleteness(swift::TargetMetadata<swift::InProcess> const*)::$_0::operator()(a2, *v34) & 1) == 0)
  {
    ++v34;
    if (!--v35) {
      goto LABEL_36;
    }
  }

  return 1LL;
}

uint64_t checkTransitiveCompleteness(swift::TargetMetadata<swift::InProcess> const*)::$_0::operator()( void *a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v17 = a2;
  uint64_t v4 = (int *)a1[1];
  uint64_t v5 = *v4;
  uint64_t v6 = (void *)(*a1 + 8 * v5);
  if (!(_DWORD)v5) {
    goto LABEL_8;
  }
  uint64_t v7 = 8 * v5;
  uint64_t v8 = (void *)*a1;
  while (*v8 != a2)
  {
    ++v8;
    v7 -= 8LL;
    if (!v7)
    {
      uint64_t v8 = (void *)(*a1 + 8 * v5);
      break;
    }
  }

  if ((int)v5 > 7)
  {
    std::__hash_table<swift::TargetMetadata<swift::InProcess> const*,std::hash<swift::TargetMetadata<swift::InProcess> const*>,std::equal_to<swift::TargetMetadata<swift::InProcess> const*>,std::allocator<swift::TargetMetadata<swift::InProcess> const*>>::__emplace_unique_key_args<swift::TargetMetadata<swift::InProcess> const*,swift::TargetMetadata<swift::InProcess> const* const&>( a1[2],  &v17,  &v17);
    if ((v15 & 1) == 0) {
      return 0LL;
    }
    uint64_t v2 = v17;
  }

  else
  {
LABEL_8:
    *uint64_t v4 = v5 + 1;
    *uint64_t v6 = a2;
  }

  uint64_t v18 = 256LL;
  performOnMetadataCache<swift::MetadataResponse,swift_checkMetadataState::CheckStateCallbacks>(v2, &v18);
  if (!v9) {
    return 0LL;
  }
  if (v9 == 1)
  {
    uint64_t v10 = a1[4];
    uint64_t v11 = v17;
    uint64_t v12 = *(unsigned int *)(v10 + 8);
    if (v12 >= *(_DWORD *)(v10 + 12))
    {
      uint64_t v16 = v17;
      __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(v10, (const void *)(v10 + 16), v12 + 1, 8LL);
      uint64_t v11 = v16;
      LODWORD(v12) = *(_DWORD *)(v10 + 8);
    }

    uint64_t result = 0LL;
    *(void *)(*(void *)v10 + 8LL * v12) = v11;
    ++*(_DWORD *)(v10 + 8);
  }

  else
  {
    uint64_t v14 = (void *)a1[3];
    uint64_t result = 1LL;
    *uint64_t v14 = v17;
    v14[1] = 1LL;
  }

  return result;
}

void *std::__hash_table<swift::TargetMetadata<swift::InProcess> const*,std::hash<swift::TargetMetadata<swift::InProcess> const*>,std::equal_to<swift::TargetMetadata<swift::InProcess> const*>,std::allocator<swift::TargetMetadata<swift::InProcess> const*>>::__emplace_unique_key_args<swift::TargetMetadata<swift::InProcess> const*,swift::TargetMetadata<swift::InProcess> const* const&>( uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = HIDWORD(*a2);
  unint64_t v7 = 0x9DDFEA08EB382D69LL * ((8 * *a2 + 8LL) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69LL
     * ((0x9DDFEA08EB382D69LL * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69LL * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69LL
         * ((0x9DDFEA08EB382D69LL * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69LL * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }

    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }

    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2) {
            return i;
          }
        }

        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }

          else
          {
            v13 &= v9 - 1;
          }

          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }

  uint64_t i = operator new(0x18uLL);
  *uint64_t i = 0LL;
  i[1] = v8;
  i[2] = *a3;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1LL;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t prime = v18;
    }
    else {
      size_t prime = v17;
    }
    if (prime == 1)
    {
      size_t prime = 2LL;
    }

    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v9 = *(void *)(a1 + 8);
    }

    if (prime > v9) {
      goto LABEL_41;
    }
    if (prime < v9)
    {
      unint64_t v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (uint8x8_t v21 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        unint64_t v20 = std::__next_prime(v20);
      }

      else
      {
        uint64_t v22 = 1LL << -(char)__clz(v20 - 1);
        if (v20 >= 2) {
          unint64_t v20 = v22;
        }
      }

      if (prime <= v20) {
        size_t prime = v20;
      }
      if (prime < v9) {
LABEL_41:
      }
        std::__hash_table<swift::TargetMetadata<swift::InProcess> const*,std::hash<swift::TargetMetadata<swift::InProcess> const*>,std::equal_to<swift::TargetMetadata<swift::InProcess> const*>,std::allocator<swift::TargetMetadata<swift::InProcess> const*>>::__do_rehash<true>( a1,  prime);
    }

    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }

    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }

  uint64_t v23 = *(void *)a1;
  uint64_t v24 = *(void **)(*(void *)a1 + 8 * v3);
  if (v24)
  {
    *uint64_t i = *v24;
LABEL_55:
    *uint64_t v24 = i;
    goto LABEL_56;
  }

  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v23 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v25 = *(void *)(*i + 8LL);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v25 >= v9) {
        v25 %= v9;
      }
    }

    else
    {
      v25 &= v9 - 1;
    }

    uint64_t v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_55;
  }

void std::__throw_bad_array_new_length[abi:nn180100]()
{
}

void std::__hash_table<swift::TargetMetadata<swift::InProcess> const*,std::hash<swift::TargetMetadata<swift::InProcess> const*>,std::equal_to<swift::TargetMetadata<swift::InProcess> const*>,std::allocator<swift::TargetMetadata<swift::InProcess> const*>>::__do_rehash<true>( uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v4 = operator new(8 * a2);
    uint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0LL;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0LL;
    while (a2 != v6);
    unint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }

      else
      {
        v8 &= a2 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      uint64_t v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v13 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v13 >= a2) {
              v13 %= a2;
            }
          }

          else
          {
            v13 &= a2 - 1;
          }

          if (v13 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v13))
            {
              *(void *)(*(void *)a1 + 8 * v13) = v7;
              goto LABEL_19;
            }

            *unint64_t v7 = *v11;
            uint64_t v12 = 8 * v13;
            *uint64_t v11 = **(void **)(*(void *)a1 + v12);
            **(void **)(*(void *)a1 + v12) = v11;
            uint64_t v11 = v7;
          }

          unint64_t v13 = v8;
LABEL_19:
          unint64_t v7 = v11;
          uint64_t v11 = (void *)*v11;
          unint64_t v8 = v13;
        }

        while (v11);
      }
    }
  }

  else
  {
    uint8x8_t v10 = *(void **)a1;
    *(void *)a1 = 0LL;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0LL;
  }

unint64_t swift::TargetEnumDescriptor<swift::InProcess>::getCanonicalMetadataPrespecializations( unsigned __int16 *a1)
{
  unint64_t v1 = *(unsigned int *)a1;
  if ((v1 & 0x80000) == 0) {
    return 0LL;
  }
  if ((v1 & 0x80) != 0)
  {
    unsigned __int16 v6 = a1[21];
    unint64_t v7 = &v5[2 * (v6 & 1)];
    if ((v6 & 1) != 0) {
      v7 += 4 * *v5;
    }
    unint64_t v4 = (unint64_t)v7 + (v6 & 2);
    if ((v6 & 2) != 0
      && (uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)*v7), v8.i16[0] = vaddlv_u8(v8), v4 += 2LL * v8.u32[0], *v7))
    {
      unsigned int v3 = *(unsigned __int16 *)((char *)&v7[v8.u32[0] - 1] + (v6 & 2));
    }

    else
    {
      unsigned int v3 = 0;
    }
  }

  else
  {
    unsigned int v3 = 0;
    unint64_t v4 = ((unint64_t)&a1[8 * ((v1 >> 7) & 1) + 15] + 1) & 0xFFFFFFFFFFFFFFFCLL;
  }

  return ((v4 + 3) & 0xFFFFFFFFFFFFFFFCLL)
       + 12LL * v3
       + 4LL * ((v1 & 0x30000) == 0x20000)
       + 12LL * ((v1 & 0x30000) == 0x10000)
       + 4LL * ((v1 >> 19) & 1);
}

uint64_t swift::TargetClassDescriptor<swift::InProcess>::getCanonicalMetadataPrespecializations( unsigned int *a1)
{
  if ((*((_BYTE *)a1 + 2) & 8) == 0) {
    return 0LL;
  }
  swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetClassDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetClassDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl((unsigned __int16 *)a1);
  if ((*a1 & 0x40000000) != 0) {
    swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetClassDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetClassDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl((unsigned __int16 *)a1);
  }
  unint64_t TrailingObjectsImpl = swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetClassDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetClassDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl((unsigned __int16 *)a1);
  unint64_t v4 = *a1;
  if ((v4 & 0x40000000) != 0)
  {
    unsigned int v5 = *(_DWORD *)swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetClassDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetClassDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl((unsigned __int16 *)a1);
    unsigned int v6 = *a1;
    if ((*a1 & 0x20000000) != 0) {
      goto LABEL_7;
    }
LABEL_9:
    uint64_t v7 = 0LL;
    return TrailingObjectsImpl + 4 * ((v4 >> 30) & 1) + 12LL * v5 + 4 * v7 + 4LL * ((v6 >> 19) & 1);
  }

  unsigned int v5 = 0;
  unsigned int v6 = *a1;
  if ((v4 & 0x20000000) == 0) {
    goto LABEL_9;
  }
LABEL_7:
  uint64_t v7 = a1[7] & 1;
  return TrailingObjectsImpl + 4 * ((v4 >> 30) & 1) + 12LL * v5 + 4 * v7 + 4LL * ((v6 >> 19) & 1);
}

void swift::ConcurrentReadableHashMap<swift::HashMapElementWrapper<anonymous namespace'::GlobalMetadataCacheEntry>,swift::LazyMutex>::find<swift::TargetTypeContextDescriptor<swift::InProcess> const*>( uint64_t a1, char a2)
{
  if ((v2 & 1) == 0)
  {
    char v5 = a2;
    a2 = v5;
    if (v3)
    {
      unint64_t v4 = __swift::__runtime::llvm::hashing::detail::fixed_seed_override;
      if (!__swift::__runtime::llvm::hashing::detail::fixed_seed_override) {
        unint64_t v4 = 0xFF51AFD7ED558CCDLL;
      }
      __swift::__runtime::llvm::hashing::detail::get_execution_seed(void)::seed = v4;
      a2 = v5;
    }
  }

  __asm { BR              X13 }

uint64_t *swift::Lazy<anonymous namespace'::GenericMetadataCache>::getWithInit<swift::TargetGenericContext<swift::InProcess> const&>(swift::TargetGenericContext<swift::InProcess> const&)::Data::init( uint64_t *result)
{
  uint64_t v1 = *result;
  unsigned __int8 v2 = (unsigned __int16 *)result[1];
  *(void *)uint64_t v1 = 0LL;
  *(void *)(v1 + 8) = 0LL;
  *(_DWORD *)(v1 + 24) = 0;
  *(void *)(v1 + 16) = 0LL;
  *(void *)(v1 + 32) = 0LL;
  *(void *)(v1 + 40) = 0LL;
  *(_DWORD *)(v1 + 48) = 0;
  int v3 = (char *)(v2 + 6);
  unint64_t v4 = (_DWORD *)(((unint64_t)v2 + v2[2] + 15) & 0xFFFFFFFFFFFFFFFCLL);
  unsigned __int16 v5 = v2[5];
  uint64_t v6 = v5 & 1;
  if ((v5 & 1) != 0)
  {
    uint64_t v7 = &v4[3 * v2[3]];
    int v8 = *v7;
    if ((unsigned __int16)*v7)
    {
      uint8x8_t v9 = &v7[v6];
      goto LABEL_6;
    }
  }

  else
  {
    int v8 = 0;
  }

  uint8x8_t v9 = 0LL;
LABEL_6:
  uint64_t v10 = *(void *)(v2 + 2);
  *(_DWORD *)(v1 + 56) = 0;
  *(_DWORD *)(v1 + 60) = v8;
  *(void *)(v1 + 64) = v9;
  uint64_t v11 = (unsigned __int16)v10;
  if ((_WORD)v10)
  {
    int v12 = 0;
    do
    {
      if (*v3 < 0) {
        *(_WORD *)(v1 + 56) = ++v12;
      }
      ++v3;
      --v11;
    }

    while (v11);
  }

  if ((v10 & 0xFFFF0000) != 0)
  {
    int v13 = 0;
    uint64_t v14 = 12LL * WORD1(v10);
    do
    {
      if ((*v4 & 0x9F) == 0x80) {
        *(_WORD *)(v1 + 58) = ++v13;
      }
      v4 += 3;
      v14 -= 12LL;
    }

    while (v14);
  }

  return result;
}

uint64_t areAllTransitiveMetadataComplete_cheap(uint64_t *a1, uint64_t a2, const char *a3, char *a4)
{
  uint64_t v5 = *a1;
  BOOL v6 = (unint64_t)*a1 > 0x7FF || *a1 == 0LL;
  if (v6)
  {
    uint64_t v7 = (_DWORD *)a1[8];
    uint64_t v8 = a1[1];
    if (v8
      && (*(_BYTE *)(v8 + 32) & 2) != 0
      && areAllTransitiveMetadataComplete_cheap(swift::TargetMetadata<swift::InProcess> const*)::$_0::operator()((void *)v8))
    {
      return 0LL;
    }

    unsigned int v9 = *v7;
    if ((*v7 & 0x80) == 0) {
      return 1LL;
    }
  }

  else
  {
    if ((v5 - 515) < 0xFFFFFFFD)
    {
      if (v5 == 515)
      {
        uint64_t v36 = (void *)a1[2];
        if (v36
          && areAllTransitiveMetadataComplete_cheap(swift::TargetMetadata<swift::InProcess> const*)::$_0::operator()(v36))
        {
          return 0LL;
        }
      }

      else if (v5 == 769)
      {
        uint64_t v10 = a1[1];
        if (v10)
        {
          uint64_t v11 = 0LL;
          int v12 = a1 + 3;
          uint64_t v13 = v10 - 1;
          do
          {
            BOOL v14 = areAllTransitiveMetadataComplete_cheap(swift::TargetMetadata<swift::InProcess> const*)::$_0::operator()((void *)v12[2 * v11]);
            if (v14) {
              break;
            }
            BOOL v6 = v13 == v11++;
          }

          while (!v6);
          return !v14;
        }
      }

      return 1LL;
    }

    uint64_t v7 = (_DWORD *)a1[1];
    unsigned int v9 = *v7;
    if ((*v7 & 0x80) == 0) {
      return 1LL;
    }
  }

  int v16 = v9 & 0x1F;
  if (v16 == 18 || v16 == 17)
  {
    unint64_t v17 = (unsigned __int16 *)(v7 + 8);
    LODWORD(v20) = 2;
  }

  else
  {
    if (v16 != 16) {
      abort();
    }
    unint64_t v17 = (unsigned __int16 *)(v7 + 12);
    if ((v9 & 0x20000000) != 0)
    {
      uint64_t v37 = (int)v7[6];
      if ((_DWORD)v37) {
        uint64_t v38 = (unint64_t *)((char *)v7 + v37 + 24);
      }
      else {
        uint64_t v38 = 0LL;
      }
      unint64_t v39 = *v38;
      if (!*v38)
      {
        computeMetadataBoundsFromSuperclass(v7, (uint64_t)v38, a3, a4);
        unint64_t v39 = v40;
      }

      unint64_t v20 = v39 >> 3;
    }

    else
    {
      if ((v9 & 0x10000000) != 0)
      {
        int v18 = 0;
        uint64_t v19 = v7 + 6;
      }

      else
      {
        int v18 = v7[7];
        uint64_t v19 = v7 + 8;
      }

      LODWORD(v20) = v18 - *v19;
    }
  }

  unsigned __int16 v21 = v17[5];
  uint64_t v22 = v21 & 1;
  if ((v21 & 1) != 0)
  {
    uint64_t v23 = v17[2];
    uint64_t v24 = (_DWORD *)((((unint64_t)v17 + v23 + 15) & 0xFFFFFFFFFFFFFFFCLL) + 12LL * v17[3]);
    int v25 = HIWORD(*v24);
    __int16 v26 = &v24[v22];
    else {
      uint64_t v27 = 0LL;
    }
    if (!v17[2]) {
      return 1LL;
    }
  }

  else
  {
    int v25 = 0;
    uint64_t v27 = 0LL;
    uint64_t v23 = v17[2];
    if (!v17[2]) {
      return 1LL;
    }
  }

  int v28 = 0;
  unsigned int v29 = &a1[(int)v20];
  uint64_t v30 = (char *)(v17 + 6);
  uint64_t v31 = &v30[v23];
  while (1)
  {
    int v32 = *v30;
    if ((v32 & 0x80000000) == 0) {
      goto LABEL_38;
    }
    if ((v32 & 0x3F) == 0)
    {
      if (areAllTransitiveMetadataComplete_cheap(swift::TargetMetadata<swift::InProcess> const*)::$_0::operator()((void *)v29[v25])) {
        return 0LL;
      }
      goto LABEL_37;
    }

    unint64_t v33 = v29[LOWORD(v27[2 * v28 + 1])];
    if (v33) {
      break;
    }
LABEL_36:
    ++v28;
LABEL_37:
    ++v25;
LABEL_38:
    if (++v30 == v31) {
      return 1LL;
    }
  }

  dispatch_once_t v34 = (void **)(v29[v25] & 0xFFFFFFFFFFFFFFFELL);
  if (v33 <= 1) {
    uint64_t v35 = 1LL;
  }
  else {
    uint64_t v35 = v29[LOWORD(v27[2 * v28 + 1])];
  }
  while (!areAllTransitiveMetadataComplete_cheap(swift::TargetMetadata<swift::InProcess> const*)::$_0::operator()(*v34))
  {
    ++v34;
    if (!--v35) {
      goto LABEL_36;
    }
  }

  return 0LL;
}

BOOL areAllTransitiveMetadataComplete_cheap(swift::TargetMetadata<swift::InProcess> const*)::$_0::operator()( void *a1)
{
  uint64_t v5 = *a1;
  if (*a1 > 0x7FFuLL || *a1 == 0LL)
  {
    uint64_t v7 = (unsigned int **)(a1 + 8);
  }

  else
  {
    if ((v5 - 515) <= 0xFFFFFFFC)
    {
      if (v5 != 515)
      {
        if (v5 == 769) {
          return a1[1] != 0LL;
        }
        return 0LL;
      }

      uint64_t v11 = (unsigned int *)a1[1];
LABEL_30:
      swift::TargetTypeContextDescriptor<swift::InProcess>::getForeignMetadataInitialization(v11);
      return 0LL;
    }

    uint64_t v7 = (unsigned int **)(a1 + 1);
  }

  uint64_t v8 = *v7;
  unsigned int v9 = **v7;
  if ((v9 & 0x80) != 0)
  {
    if ((v9 & 0x1F) - 17 >= 2)
    {
      if ((v9 & 0x1F) != 0x10) {
        goto LABEL_31;
      }
      if ((v9 & 0x20000000) != 0)
      {
        uint64_t v12 = (int)v8[6];
        if ((_DWORD)v12) {
          uint64_t v13 = (void *)((char *)v8 + v12 + 24);
        }
        else {
          uint64_t v13 = 0LL;
        }
        if (!*v13) {
          computeMetadataBoundsFromSuperclass(v8, (uint64_t)v13, v2, v3);
        }
      }
    }

    getCache(v8);
  }

  else
  {
    int v10 = HIWORD(v9) & 3;
    if (!v10) {
      return 0LL;
    }
    if (v10 != 1)
    {
      if (v10 == 2)
      {
        uint64_t v11 = v8;
        goto LABEL_30;
      }

unint64_t swift::TargetTypeContextDescriptor<swift::InProcess>::getForeignMetadataInitialization( unsigned int *a1)
{
  unint64_t v1 = *a1;
  int v2 = *a1 & 0x1F;
  if (v2 == 18)
  {
    if ((v1 & 0x80) == 0)
    {
      unsigned int v5 = 0;
      BOOL v6 = &a1[4 * ((v1 >> 7) & 1)];
LABEL_10:
      unint64_t v7 = ((unint64_t)v6 + 31) & 0xFFFFFFFFFFFFFFFCLL;
      return ((v7 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 12LL * v5;
    }

    uint64_t v8 = &a1[4 * ((v1 >> 7) & 1)];
LABEL_13:
    __int16 v10 = *((_WORD *)a1 + 21);
    uint64_t v11 = &v9[2 * (v10 & 1)];
    if ((v10 & 1) != 0) {
      v11 += 4 * *v9;
    }
    unint64_t v7 = (unint64_t)v11 + (v10 & 2);
    if ((v10 & 2) != 0
      && (uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)*v11), v12.i16[0] = vaddlv_u8(v12), v7 += 2LL * v12.u32[0], *v11))
    {
      unsigned int v5 = *(unsigned __int16 *)((char *)&v11[v12.u32[0] - 1] + (v10 & 2));
    }

    else
    {
      unsigned int v5 = 0;
    }

    return ((v7 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 12LL * v5;
  }

  if (v2 == 17)
  {
    if ((v1 & 0x80) == 0)
    {
      unsigned int v5 = 0;
      BOOL v6 = &a1[4 * ((v1 >> 7) & 1)];
      goto LABEL_10;
    }

    uint64_t v8 = &a1[4 * ((v1 >> 7) & 1)];
    goto LABEL_13;
  }

  if (v2 != 16) {
    abort();
  }
  if ((v1 & 0x80) != 0)
  {
    __int16 v15 = *((_WORD *)a1 + 29);
    int v16 = &v14[2 * (v15 & 1)];
    if ((v15 & 1) != 0) {
      v16 += 4 * *v14;
    }
    unint64_t v4 = (unint64_t)v16 + (v15 & 2);
    if ((v15 & 2) != 0
      && (uint8x8_t v17 = (uint8x8_t)vcnt_s8((int8x8_t)*v16), v17.i16[0] = vaddlv_u8(v17), v4 += 2LL * v17.u32[0], *v16))
    {
      unsigned int v3 = *(unsigned __int16 *)((char *)&v16[v17.u32[0] - 1] + (v15 & 2));
    }

    else
    {
      unsigned int v3 = 0;
    }
  }

  else
  {
    unsigned int v3 = 0;
    unint64_t v4 = ((unint64_t)&a1[4 * ((v1 >> 7) & 1) + 11] + 3) & 0xFFFFFFFFFFFFFFFCLL;
  }

  return ((v4 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 12LL * v3 + 4 * ((v1 >> 29) & 1);
}

void supportsLazyObjcClassNames(void)::$_0::operator() const(void)::{lambda(void *)#1}::__invoke(_BYTE *a1)
{
  *a1 = 1;
}

void *installLazyClassNameHook(void)::$_0::__invoke(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 32) & 2) != 0) {
    return copyGenericClassObjCName(a1);
  }
  else {
    return (void *)installLazyClassNameHook(void)::oldHook();
  }
}

void *copyGenericClassObjCName(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1895F8858](a1);
  __int128 v25 = xmmword_18180BFB0;
  uint64_t v26 = 0LL;
  char v27 = 0;
  unsigned int v62 = 0LL;
  uint64_t v29 = 0LL;
  uint64_t v30 = 0LL;
  uint64_t v28 = 0LL;
  char v31 = 0;
  __int128 v43 = 0u;
  __int128 v44 = 0u;
  __int128 v45 = 0u;
  __int128 v46 = 0u;
  __int128 v47 = 0u;
  __int128 v48 = 0u;
  __int128 v49 = 0u;
  __int128 v50 = 0u;
  __int128 v51 = 0u;
  __int128 v52 = 0u;
  __int128 v53 = 0u;
  __int128 v54 = 0u;
  __int128 v55 = 0u;
  __int128 v56 = 0u;
  __int128 v57 = 0u;
  __int128 v58 = 0u;
  __int128 v59 = 0u;
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  __int128 v36 = 0u;
  __int128 v37 = 0u;
  __int128 v38 = 0u;
  __int128 v39 = 0u;
  __int128 v40 = 0u;
  __int128 v41 = 0u;
  __int128 v42 = 0u;
  int v60 = 0;
  v24[0] = off_189B8D1A0;
  v24[1] = &v63;
  v24[2] = &v64;
  unint64_t v4 = _swift_buildDemanglingForMetadata(v1, (swift::Demangle::__runtime::NodeFactory *)v24, v2, v3);
  if (!v4)
  {
    unsigned __int16 v21 = 0LL;
    asprintf(&v21, "$SwiftEmergencyPlaceholderClassName%016lx", v1);
    uint64_t v13 = v21;
    goto LABEL_15;
  }

  unsigned int v5 = (swift::Demangle::__runtime::Node *)v4;
  Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(v24, 236);
  swift::Demangle::__runtime::Node::addChild(Node, v5, (swift::Demangle::__runtime::NodeFactory *)v24, v7, v8);
  unsigned int v9 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(v24, 99);
  swift::Demangle::__runtime::Node::addChild( v9,  (swift::Demangle::__runtime::Node *)Node,  (swift::Demangle::__runtime::NodeFactory *)v24,  v10,  v11);
  swift::Demangle::__runtime::mangleNodeOld( (swift::Demangle::__runtime *)v9,  (swift::Demangle::__runtime::Node *)v24,  v12);
  if ((_DWORD)v21)
  {
    __int128 v64 = 0LL;
    asprintf(&v64, "$SwiftEmergencyPlaceholderClassName%016lx", v1);
    uint64_t v13 = v64;
    goto LABEL_15;
  }

  if (v23 <= 5)
  {
    size_t v14 = v23 + 1;
LABEL_14:
    uint64_t v13 = swift_slowAlloc(v14, 0LL);
    memcpy(v13, v22, v23);
    *((_BYTE *)v13 + v23) = 0;
    goto LABEL_15;
  }

  unsigned int v15 = 1599370311;
  unsigned int v16 = bswap32(*(_DWORD *)v22);
  if (v16 == 1599370311 && (v16 = bswap32(v22[2]) >> 16, unsigned int v15 = 17267, v16 == 17267))
  {
    int v17 = 0;
  }

  else if (v16 < v15)
  {
    int v17 = -1;
  }

  else
  {
    int v17 = 1;
  }

  size_t v14 = v23 + 1;
  if (v17) {
    goto LABEL_14;
  }
  uint64_t v13 = swift_slowAlloc(v23 + 2, 0LL);
  memcpy(v13, v22, v23);
  *((_BYTE *)v13 + v23) = 36;
  *((_BYTE *)v13 + v14) = 0;
LABEL_15:
  v24[0] = off_189B8E500;
  int v18 = v62;
  if (v62 == v61)
  {
    uint64_t v19 = 4LL;
    int v18 = v61;
  }

  else
  {
    if (!v62) {
      goto LABEL_20;
    }
    uint64_t v19 = 5LL;
  }

  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_20:
  v24[0] = off_189B8E4D8;
  swift::Demangle::__runtime::NodeFactory::freeSlabs((void *)v25);
  if (v26) {
    *(_BYTE *)(v26 + 48) = 0;
  }
  return v13;
}

char *swift::metadataimpl::BufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::OpaqueExistentialBox<0u>>,true,32ul,8ul,(swift::metadataimpl::FixedPacking)0>::initializeBufferWithCopyOfBuffer( unint64_t **a1, unint64_t **a2, uint64_t a3, char *a4)
{
  uint64_t v4 = *(void *)(a3 - 8);
  unsigned int v5 = *a2;
  *a1 = *a2;
  swift_retain(v5, (uint64_t)a2, a3, a4);
  return (char *)v5 + ((*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
}

uint64_t swift::metadataimpl::ValueWitnesses<swift::metadataimpl::OpaqueExistentialBox<0u>>::destroy( uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0) {
    return swift_release(*a1);
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

unint64_t **swift::metadataimpl::ValueWitnesses<swift::metadataimpl::OpaqueExistentialBox<0u>>::initializeWithCopy( unint64_t **a1, unint64_t **a2, uint64_t a3, char *a4)
{
  a1[3] = a2[3];
  uint64_t v5 = (uint64_t)a2[3];
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(_BYTE *)(v6 + 82) & 2) != 0)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    swift_retain(v7, (uint64_t)a2, v5, a4);
  }

  else
  {
    (*(void (**)(unint64_t **))(v6 + 16))(a1);
  }

  return a1;
}

__n128 swift::metadataimpl::ValueWitnesses<swift::metadataimpl::OpaqueExistentialBox<0u>>::initializeWithTake( __n128 *a1, __n128 *a2)
{
  a1[1].n128_u64[1] = a2[1].n128_u64[1];
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t swift::metadataimpl::FixedSizeBufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::OpaqueExistentialBox<0u>>,true,32ul,8ul,true>::getEnumTagSinglePayload( uint64_t a1, int a2)
{
  if (a2 < 0 && *(_BYTE *)(a1 + 32)) {
    return *(_DWORD *)a1 ^ 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (HIDWORD(v2)) {
    return 0LL;
  }
  else {
    return (v2 + 1);
  }
}

uint64_t swift::metadataimpl::FixedSizeBufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::OpaqueExistentialBox<0u>>,true,32ul,8ul,true>::storeEnumTagSinglePayload( uint64_t result, int a2, int a3)
{
  if ((a3 & 0x80000000) == 0)
  {
    if (a2 < 0)
    {
      *(_DWORD *)__n128 result = a2 ^ 0x80000000;
      *(void *)(result + 4) = 0LL;
      *(void *)(result + 20) = 0LL;
      *(void *)(result + 12) = 0LL;
      *(_DWORD *)(result + 28) = 0;
      return result;
    }

    if (!a2) {
      return result;
    }
LABEL_7:
    *(void *)(result + 24) = (a2 - 1);
    return result;
  }

  if (a2 < 0)
  {
    *(_DWORD *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 4) = 0LL;
    *(void *)(result + 20) = 0LL;
    *(void *)(result + 12) = 0LL;
    *(_DWORD *)(result + 28) = 0;
    *(_BYTE *)(result + 32) = 1;
    return result;
  }

  *(_BYTE *)(result + 32) = 0;
  if (a2) {
    goto LABEL_7;
  }
  return result;
}

uint64_t *swift::metadataimpl::OpaqueExistentialBoxBase::assignWithTake<swift::metadataimpl::OpaqueExistentialBox<0u>::Container>( uint64_t *a1, uint64_t *a2)
{
  if (a2 == a1) {
    return a1;
  }
  uint64_t v4 = a2[3];
  uint64_t v5 = a1[3];
  if (v4 == v5)
  {
    uint64_t v8 = *(void *)(v4 - 8);
    if ((*(_BYTE *)(v8 + 82) & 2) == 0)
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 40))(a1, a2, a2[3]);
      return a1;
    }

    uint64_t v10 = *a1;
    *a1 = *a2;
LABEL_15:
    swift_release(v10);
    return a1;
  }

  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v4 - 8);
  if ((*(_BYTE *)(v6 + 82) & 2) != 0)
  {
    uint64_t v9 = *a1;
    a1[3] = v4;
    if ((*(_BYTE *)(v7 + 82) & 2) != 0) {
      *a1 = *a2;
    }
    else {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 32))(a1, a2, v4);
    }
    uint64_t v10 = v9;
    goto LABEL_15;
  }

  (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v12, a1, a1[3]);
  a1[3] = a2[3];
  if ((*(_BYTE *)(v7 + 82) & 2) != 0) {
    *a1 = *a2;
  }
  else {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v4 - 8) + 32LL))(a1, a2, v4);
  }
  (*(void (**)(_BYTE *, uint64_t))(*(void *)(v5 - 8) + 8LL))(v12, v5);
  return a1;
}

unsigned int *swift::TargetExtendedExistentialTypeShape<swift::InProcess>::getGeneralizationSignature@<X0>( unsigned int *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = *result;
  if ((v2 & 0x100) == 0)
  {
    *(void *)(a2 + 32) = 0LL;
    *(void *)(a2 + 8) = 0LL;
    *(void *)(a2 + 16) = 0LL;
    *(void *)a2 = 0LL;
    *(_DWORD *)(a2 + 24) = 0;
    return result;
  }

  unsigned int v3 = result + 4;
  if ((v2 & 0x1000) != 0)
  {
    uint64_t v4 = (char *)&swift::ImplicitGenericParamDescriptors;
    if ((v2 & 0x800) == 0) {
      goto LABEL_7;
    }
  }

  else
  {
    uint64_t v4 = (char *)((((unint64_t)&v3[(v2 >> 8) & 1] + 3) & 0xFFFFFFFFFFFFFFFCLL)
                + 4 * ((v2 >> 9) & 1)
                + 4 * ((v2 >> 10) & 1));
    if ((v2 & 0x800) == 0)
    {
      v4 += *((unsigned __int16 *)result + 4);
LABEL_7:
      uint64_t v5 = *((unsigned __int16 *)result + 4);
      int v6 = 1;
      goto LABEL_9;
    }
  }

  int v6 = 0;
  uint64_t v5 = 0LL;
LABEL_9:
  int v7 = *result & 0x1100;
  if (v7 == 256) {
    uint64_t v8 = *(unsigned __int16 *)v3;
  }
  else {
    uint64_t v8 = 0LL;
  }
  unint64_t v9 = (((unint64_t)&v3[(v2 >> 8) & 1] + 3) & 0xFFFFFFFFFFFFFFFCLL)
     + 4 * ((v2 >> 9) & 1)
     + 4LL * ((v2 >> 10) & 1);
  unint64_t v10 = ((v9 + v8 + v5 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 12LL * *((unsigned __int16 *)result + 5);
  if ((v2 & 0x2000) != 0)
  {
    if (v6)
    {
      uint64_t v13 = *((unsigned __int16 *)result + 4);
      if (v7 != 256)
      {
LABEL_16:
        uint64_t v14 = 0LL;
LABEL_19:
        unint64_t v15 = (v9 + v14 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
        unsigned int v16 = *((unsigned __int16 *)result + 9) + *((unsigned __int16 *)result + 5);
        if (v6) {
          uint64_t v17 = *((unsigned __int16 *)result + 4);
        }
        else {
          uint64_t v17 = 0LL;
        }
        int v11 = *(_DWORD *)(v15 + 12LL * v16);
        if (v7 == 256) {
          uint64_t v18 = *(unsigned __int16 *)v3;
        }
        else {
          uint64_t v18 = 0LL;
        }
        unint64_t v12 = ((v9 + v18 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 12LL * v16 + 4LL * ((v2 >> 13) & 1);
        goto LABEL_26;
      }
    }

    else
    {
      uint64_t v13 = 0LL;
      if (v7 != 256) {
        goto LABEL_16;
      }
    }

    uint64_t v14 = *(unsigned __int16 *)v3;
    goto LABEL_19;
  }

  int v11 = 0;
  unint64_t v12 = 0LL;
LABEL_26:
  *(void *)a2 = *v3;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = v10;
  *(_DWORD *)(a2 + 24) = v11;
  *(void *)(a2 + 32) = v12;
  return result;
}

uint64_t _getForeignWitnessTable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v37[0] = a2;
  v37[1] = a3;
  os_unfair_lock_lock((os_unfair_lock_t)&unk_18C575848);
  char v5 = qword_18C575840;
  BOOL v6 = (qword_18C575840 & 3) == 0;
  if ((qword_18C575840 & 0xFFFFFFFFFFFFFFFCLL) == 0) {
    BOOL v6 = 1;
  }
  BOOL v34 = v6;
  unint64_t v35 = qword_18C575840 & 0xFFFFFFFFFFFFFFFCLL;
  if (v6) {
    int v7 = 4;
  }
  else {
    int v7 = *(unsigned __int8 *)(qword_18C575840 & 0xFFFFFFFFFFFFFFFCLL);
  }
  size_t v8 = dword_18C575834;
  unint64_t v9 = (_DWORD *)qword_18C575838;
  uint64_t v10 = qword_18C575838 + 8;
  if (!v11)
  {
    __int128 v33 = v9;
    __src = (void *)v10;
    uint64_t v32 = (v8 + 1);
    if ((1LL << v7) / (unint64_t)((1LL << v7) - v32) < 4)
    {
      LOBYTE(v19) = v5;
      unint64_t v20 = v33;
      uint64_t v21 = a1;
      uint64_t v22 = a3;
      if (v33) {
        goto LABEL_30;
      }
    }

    else
    {
      unsigned int v15 = (v7 + 1);
      if (v15 >= 0x11) {
        unsigned int v16 = 4;
      }
      else {
        unsigned int v16 = 2;
      }
      if (v15 < 9) {
        size_t v17 = 1LL;
      }
      else {
        size_t v17 = v16;
      }
      unint64_t v18 = (unint64_t)calloc(2LL << v7, v17);
      if (!v18) {
        swift::hashable_support::findHashableBaseTypeOfHashableType();
      }
      if ((_DWORD)v17 != 1)
      {
        if ((_DWORD)v17 == 4) {
          size_t v17 = 3LL;
        }
        else {
          size_t v17 = 2LL;
        }
      }

      unint64_t v19 = v17 | v18;
      *(_BYTE *)unint64_t v18 = v7 + 1;
      if (v7) {
        __asm { BR              X8 }
      }

      atomic_store(v19, (unint64_t *)&qword_18C575840);
      if (!v34)
      {
        size_t v23 = malloc(0x10uLL);
        *size_t v23 = qword_18C575850;
        v23[1] = v35;
        qword_18C575850 = (uint64_t)v23;
      }

      uint64_t v21 = a1;
      uint64_t v22 = a3;
      unint64_t v20 = v33;
      if (v33)
      {
LABEL_30:
        unint64_t v24 = (unint64_t)v20;
      }
    }

    unint64_t v25 = v8 + (v8 >> 2);
    size_t v26 = v8;
    if (v25 <= v8 + 1) {
      unint64_t v25 = v8 + 1;
    }
    size_t v8 = malloc_good_size(24 * v25 + 8);
    char v27 = malloc(v8);
    if (!v27) {
      swift::hashable_support::findHashableBaseTypeOfHashableType();
    }
    unint64_t v24 = (unint64_t)v27;
    *char v27 = (v8 - 8) / 0x18;
    LODWORD(v8) = v26;
    if (v20)
    {
      memcpy(v27 + 2, __src, 24 * v26);
      uint64_t v28 = malloc(0x10uLL);
      *uint64_t v28 = qword_18C575850;
      v28[1] = v20;
      qword_18C575850 = (uint64_t)v28;
    }

    atomic_store(v24, &qword_18C575838);
LABEL_37:
    uint64_t v29 = (void *)(v24 + 24LL * v8);
    v29[1] = a2;
    void v29[2] = v22;
    v29[3] = v21;
    atomic_store(v32, (unsigned int *)&dword_18C575834);
    __asm { BR              X11 }
  }

  uint64_t v12 = *(void *)(v11 + 16);
  __dmb(0xBu);
  if (!ForeignWitnessTables)
  {
    uint64_t v13 = (void **)qword_18C575850;
    if (qword_18C575850)
    {
      do
      {
        uint64_t v14 = (void **)*v13;
        free(v13[1]);
        free(v13);
        uint64_t v13 = v14;
      }

      while (v14);
    }

    qword_18C575850 = 0LL;
  }

  os_unfair_lock_unlock((os_unfair_lock_t)&unk_18C575848);
  return v12;
}

void swift::ConcurrentReadableHashMap<anonymous namespace'::ForeignWitnessTableCacheEntry,swift::LazyMutex>::find<anonymous namespace'::ForeignWitnessTableCacheEntry::Key>( uint64_t *a1, char a2)
{
  __asm { BR              X8 }

uint64_t *sub_181768310( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *__s2, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34)
{
  uint64_t v37 = (v43 >> (4 * v34)) & 0xF;
  if (!(_DWORD)v37) {
    return 0LL;
  }
  unint64_t v38 = (v37 - 1);
  if (v38 >= v35
    || (__int128 v39 = (uint64_t *)(v44 + 24LL * v38), v39[1] != v36[1])
    || (swift::ParsedTypeIdentity::parse(*v36, (uint64_t)v45),
        __int128 v41 = v46,
        size_t v40 = v47,
        swift::ParsedTypeIdentity::parse(*v39, (uint64_t)v45),
        v40 != v47)
    || v40 && memcmp(v41, v46, v40))
  {
    JUMPOUT(0x1817682F0LL);
  }

  return v39;
}

unint64_t anonymous namespace'::hash_value(uint64_t *a1)
{
  uint64_t v3 = *((void *)&v12[0] + 1);
  unint64_t v2 = *(void **)&v12[0];
  uint64_t v14 = 0LL;
  memset(v13, 0, sizeof(v13));
  memset(v12, 0, sizeof(v12));
  __int128 v11 = 0u;
  if ((v4 & 1) == 0)
  {
    uint64_t v9 = v3;
    uint64_t v10 = v2;
    uint64_t v3 = v9;
    unint64_t v2 = v10;
    if (v7)
    {
      unint64_t v8 = __swift::__runtime::llvm::hashing::detail::fixed_seed_override;
      if (!__swift::__runtime::llvm::hashing::detail::fixed_seed_override) {
        unint64_t v8 = 0xFF51AFD7ED558CCDLL;
      }
      __swift::__runtime::llvm::hashing::detail::get_execution_seed(void)::seed = v8;
      uint64_t v3 = v9;
      unint64_t v2 = v10;
    }
  }

  uint64_t v5 = a1[1];
  uint64_t v15 = __swift::__runtime::llvm::hashing::detail::get_execution_seed(void)::seed;
  *(void *)&__int128 v11 = v5;
  *((void *)&v11 + 1) = __swift::__runtime::llvm::hash_value(v2, v3);
  return __swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper::combine( (__swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper *)&v11,  0LL,  (char *)v12,  (char *)v13);
}

unint64_t *__swift::__runtime::llvm::hashing::detail::hash_state::mix( unint64_t *this, const char *a2)
{
  unint64_t v2 = this[1];
  unint64_t v4 = this[2];
  unint64_t v3 = this[3];
  unint64_t v5 = 0xB492B66FBE98F273LL * __ROR8__(v2 + *this + v3 + *((void *)a2 + 1), 37);
  *this = v5;
  unint64_t v6 = this[4];
  unint64_t v7 = this[5];
  uint64_t v8 = __ROR8__(v6 + v2 + *((void *)a2 + 6), 42);
  unint64_t v9 = this[6];
  unint64_t v10 = v9 ^ v5;
  *this = v10;
  this[1] = 0xB492B66FBE98F273LL * v8;
  unint64_t v11 = 0xB492B66FBE98F273LL * v8 + v3 + *((void *)a2 + 5);
  unint64_t v12 = 0xB492B66FBE98F273LL * __ROR8__(v7 + v4, 33);
  this[1] = v11;
  this[2] = v12;
  this[3] = 0xB492B66FBE98F273LL * v6;
  this[4] = v7 + v10;
  uint64_t v13 = *(void *)a2 - 0x4B6D499041670D8DLL * v6;
  this[3] = v13;
  uint64_t v14 = *((void *)a2 + 3);
  unint64_t v15 = __ROR8__(v13 + v14 + v7 + v10, 21);
  this[4] = v15;
  uint64_t v16 = __ROR8__(*((void *)a2 + 1) + *((void *)a2 + 2) + v13, 44);
  this[3] = *((void *)a2 + 1) + *((void *)a2 + 2) + v13 + v14;
  this[4] = v15 + v13 + v16;
  this[5] = v12 + v9;
  unint64_t v17 = *((void *)a2 + 2) + v11;
  this[6] = v17;
  unint64_t v18 = *((void *)a2 + 4) + v12 + v9;
  this[5] = v18;
  uint64_t v19 = *((void *)a2 + 7);
  unint64_t v20 = __ROR8__(v18 + v19 + v17, 21);
  this[6] = v20;
  unint64_t v21 = v20 + v18 + __ROR8__(*((void *)a2 + 5) + *((void *)a2 + 6) + v18, 44);
  this[5] = *((void *)a2 + 5) + *((void *)a2 + 6) + v18 + v19;
  this[6] = v21;
  this[2] = v10;
  *this = v12;
  return this;
}

void *__swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>( uint64_t a1, uint64_t *a2, void *__dst, unint64_t a4, uint64_t a5)
{
  uint64_t __src = a5;
  if ((unint64_t)(__dst + 1) <= a4)
  {
    *std::string __dst = a5;
    return __dst + 1;
  }

  else
  {
    unint64_t v8 = a4 - (void)__dst;
    memcpy(__dst, &__src, a4 - (void)__dst);
    if (*a2)
    {
      __swift::__runtime::llvm::hashing::detail::hash_state::mix((unint64_t *)(a1 + 64), (const char *)a1);
      uint64_t v9 = *a2 + 64;
    }

    else
    {
      unint64_t v10 = *(void *)(a1 + 120);
      uint64_t v11 = __ROR8__(v10 ^ 0xB492B66FBE98F273LL, 49);
      unint64_t v12 = v10 ^ (v10 >> 47);
      uint64_t v13 = *(void *)(a1 + 8);
      uint64_t v14 = v13 + v10 + v11;
      uint64_t v15 = *(void *)(a1 + 48);
      uint64_t v16 = *(void *)(a1 + 56);
      uint64_t v17 = *(void *)(a1 + 40);
      uint64_t v18 = v17 + v11 - 0x4B6D499041670D8DLL * __ROR8__(v15 + v10 - 0x4B6D499041670D8DLL * v10, 42);
      unint64_t v19 = 0x9DDFEA08EB382D69LL
          * ((0x9DDFEA08EB382D69LL * (v10 ^ 0xB492B66FBE98F273LL)) ^ ((0x9DDFEA08EB382D69LL
                                                                     * (v10 ^ 0xB492B66FBE98F273LL)) >> 47) ^ 0xB492B66FBE98F273LL);
      unint64_t v20 = 0x9DDFEA08EB382D69LL
          * (v10 ^ (((0x9DDFEA08EB382D69LL * (v12 ^ (0xB492B66FBE98F273LL * v10))) ^ v10) >> 47) ^ (0x9DDFEA08EB382D69LL
                                                                                                  * (v12 ^ (0xB492B66FBE98F273LL * v10))));
      unint64_t v21 = 0x9DDFEA08EB382D69LL * (v20 ^ (v20 >> 47));
      unint64_t v22 = 0xB492B66FBE98F273LL * __ROR8__(v12 - 0x622015F714C7D297LL * (v19 ^ (v19 >> 47)), 33);
      uint64_t v23 = *(void *)a1 - 0x6D8ED9027DD26057LL * v10;
      uint64_t v25 = *(void *)(a1 + 16);
      uint64_t v24 = *(void *)(a1 + 24);
      uint64_t v26 = v23 + v13 + v25;
      unint64_t v27 = v21 ^ (0xB492B66FBE98F273LL * __ROR8__(v14, 37));
      unint64_t v28 = v22 + *(void *)(a1 + 32) + v21;
      *(void *)(a1 + 64) = v22;
      *(void *)(a1 + 72) = v18;
      *(void *)(a1 + 80) = v27;
      *(void *)(a1 + 88) = v26 + v24;
      *(void *)(a1 + 96) = __ROR8__(v26, 44) + v23 + __ROR8__(v23 + v12 + v24 + v27, 21);
      *(void *)(a1 + 104) = v17 + v15 + v28 + v16;
      *(void *)(a1 + 112) = __ROR8__(v18 + v25 + v16 + v28, 21) + v28 + __ROR8__(v17 + v15 + v28, 44);
      uint64_t v9 = 64LL;
    }

    *a2 = v9;
    if (a1 + 8 - v8 <= a4)
    {
      memcpy((void *)a1, (char *)&__src + v8, 8 - v8);
      a1 += 8 - v8;
    }
  }

  return (void *)a1;
}

unint64_t __swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper::combine( __swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper *this, uint64_t a2, char *__src, char *a4)
{
  if (!a2) {
    return __swift::__runtime::llvm::hashing::detail::hash_short(this, __src - (char *)this, *((void *)this + 15));
  }
  if (this != (__swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper *)__src && __src != a4)
  {
    if ((char *)this + 1 != __src)
    {
      if (__src + 1 == a4)
      {
        char v20 = *(a4 - 1);
        *(_BYTE *)this = v20;
        goto LABEL_45;
      }

      uint64_t v7 = __src - (char *)this;
      uint64_t v8 = a4 - __src;
      if (__src - (char *)this != a4 - __src)
      {
        uint64_t v21 = __src - (char *)this;
        do
        {
          uint64_t v22 = v21;
          uint64_t v21 = v8;
          uint64_t v8 = v22 % v8;
        }

        while (v8);
        if (v21)
        {
          uint64_t v23 = (__swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper *)((char *)this + v21);
          do
          {
            char v25 = *((_BYTE *)v23 - 1);
            uint64_t v23 = (__swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper *)((char *)v23 - 1);
            char v24 = v25;
            uint64_t v26 = (__swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper *)((char *)v23 + v7);
            unint64_t v27 = v23;
            do
            {
              unint64_t v28 = v27;
              unint64_t v27 = v26;
              *(_BYTE *)unint64_t v28 = *(_BYTE *)v26;
              uint64_t v29 = (char *)(a4 - (char *)v26);
              BOOL v30 = __OFSUB__(v7, v29);
              uint64_t v32 = v7 - (void)v29;
              char v31 = (v32 < 0) ^ v30;
              uint64_t v26 = (__swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper *)((char *)this + v32);
              if (v31) {
                uint64_t v26 = (__swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper *)((char *)v27 + v7);
              }
            }

            while (v26 != v23);
            *(_BYTE *)unint64_t v27 = v24;
          }

          while (v23 != this);
        }

        goto LABEL_45;
      }

      uint64_t v9 = &a4[~(unint64_t)__src];
      unint64_t v10 = &__src[~(unint64_t)this];
      if (v9 >= v10) {
        uint64_t v11 = &__src[~(unint64_t)this];
      }
      else {
        uint64_t v11 = &a4[~(unint64_t)__src];
      }
      unint64_t v12 = (unint64_t)(v11 + 1);
      uint64_t v13 = __src;
      uint64_t v14 = this;
      if (v12 < 8) {
        goto LABEL_41;
      }
      if (v9 >= v10) {
        uint64_t v9 = &__src[~(unint64_t)this];
      }
      uint64_t v15 = v9 + 1;
      if (&v15[(void)__src] > (char *)this)
      {
        uint64_t v13 = __src;
        uint64_t v14 = this;
        if (&v15[(void)this] > __src) {
          goto LABEL_41;
        }
      }

      if (v12 >= 0x20)
      {
        unint64_t v16 = v12 & 0xFFFFFFFFFFFFFFE0LL;
        __int128 v33 = (__int128 *)((char *)this + 16);
        char v34 = __src + 16;
        unint64_t v35 = v12 & 0xFFFFFFFFFFFFFFE0LL;
        do
        {
          __int128 v36 = *(v33 - 1);
          __int128 v37 = *v33;
          __int128 v38 = *(_OWORD *)v34;
          *(v33 - 1) = *((_OWORD *)v34 - 1);
          *__int128 v33 = v38;
          *((_OWORD *)v34 - 1) = v36;
          *(_OWORD *)char v34 = v37;
          v33 += 2;
          v34 += 32;
          v35 -= 32LL;
        }

        while (v35);
        if (v12 == v16) {
          goto LABEL_45;
        }
        if ((v12 & 0x18) == 0)
        {
          uint64_t v14 = (__swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper *)((char *)this + v16);
          uint64_t v13 = &__src[v16];
          goto LABEL_41;
        }
      }

      else
      {
        unint64_t v16 = 0LL;
      }

      uint64_t v13 = &__src[v12 & 0xFFFFFFFFFFFFFFF8LL];
      uint64_t v14 = (__swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper *)((char *)this
                                                                                       + (v12 & 0xFFFFFFFFFFFFFFF8LL));
      __int128 v39 = (uint64_t *)((char *)this + v16);
      size_t v40 = &__src[v16];
      unint64_t v41 = v16 - (v12 & 0xFFFFFFFFFFFFFFF8LL);
      do
      {
        uint64_t v42 = *v39;
        *v39++ = *(void *)v40;
        *(void *)size_t v40 = v42;
        v40 += 8;
        v41 += 8LL;
      }

      while (v41);
      if (v12 == (v12 & 0xFFFFFFFFFFFFFFF8LL)) {
        goto LABEL_45;
      }
LABEL_41:
      unint64_t v43 = v13 + 1;
      uint64_t v44 = (char *)v14 + 1;
      do
      {
        char v45 = *(v44 - 1);
        *(v44 - 1) = *(v43 - 1);
        *(v43 - 1) = v45;
        if (v44 == __src) {
          break;
        }
        ++v44;
      }

      while (v43++ != a4);
      goto LABEL_45;
    }

    char v18 = *(_BYTE *)this;
    uint64_t v19 = a4 - __src;
    memmove(this, __src, a4 - __src);
    *((_BYTE *)this + v19) = v18;
  }

unint64_t __swift::__runtime::llvm::hashing::detail::hash_short( __swift::__runtime::llvm::hashing::detail *this, unint64_t a2, unint64_t a3)
{
  if (a2 - 4 <= 4)
  {
    unint64_t v3 = *(unsigned int *)((char *)this + a2 - 4) ^ a3;
    unint64_t v4 = 0x9DDFEA08EB382D69LL * (v3 ^ (a2 + 8LL * *(unsigned int *)this));
    unint64_t v5 = v3 ^ (v4 >> 47) ^ v4;
    return 0x9DDFEA08EB382D69LL * ((0x9DDFEA08EB382D69LL * v5) ^ ((0x9DDFEA08EB382D69LL * v5) >> 47));
  }

  if (a2 - 9 <= 7)
  {
    uint64_t v7 = *(void *)((char *)this + a2 - 8);
    uint64_t v8 = __ROR8__(v7 + a2, a2);
    return (0x9DDFEA08EB382D69LL
          * ((0x9DDFEA08EB382D69LL
            * (v8 ^ ((0x9DDFEA08EB382D69LL * (*(void *)this ^ a3 ^ v8)) >> 47) ^ (0x9DDFEA08EB382D69LL
                                                                                  * (*(void *)this ^ a3 ^ v8)))) ^ ((0x9DDFEA08EB382D69LL * (v8 ^ ((0x9DDFEA08EB382D69LL * (*(void *)this ^ a3 ^ v8)) >> 47) ^ (0x9DDFEA08EB382D69LL * (*(void *)this ^ a3 ^ v8)))) >> 47))) ^ v7;
  }

  if (a2 - 17 <= 0xF)
  {
    uint64_t v9 = *((void *)this + 1);
    unint64_t v10 = 0x9AE16A3B2F90404FLL * *(void *)((char *)this + a2 - 8);
    uint64_t v11 = __ROR8__(0xB492B66FBE98F273LL * *(void *)this - v9, 43)
    unint64_t v12 = a3 + a2 + __ROR8__(v9 ^ 0xC949D7C7509E6557LL, 20) - 0x4B6D499041670D8DLL * *(void *)this - v10;
    unint64_t v5 = v12 ^ ((0x9DDFEA08EB382D69LL * (v11 ^ v12)) >> 47) ^ (0x9DDFEA08EB382D69LL * (v11 ^ v12));
    return 0x9DDFEA08EB382D69LL * ((0x9DDFEA08EB382D69LL * v5) ^ ((0x9DDFEA08EB382D69LL * v5) >> 47));
  }

  if (a2 >= 0x21)
  {
    uint64_t v13 = (char *)this + a2;
    uint64_t v14 = *(void *)((char *)this + a2 - 16);
    uint64_t v15 = *(void *)((char *)this + a2 - 8);
    uint64_t v16 = *(void *)this - 0x3C5A37A36834CED9LL * (v14 + a2);
    uint64_t v18 = *((void *)this + 2);
    uint64_t v17 = *((void *)this + 3);
    uint64_t v19 = __ROR8__(v16 + v17, 52);
    uint64_t v20 = v16 + *((void *)this + 1);
    uint64_t v21 = __ROR8__(v20, 7);
    uint64_t v22 = v20 + v18;
    uint64_t v23 = v21 + __ROR8__(*(void *)this - 0x3C5A37A36834CED9LL * (v14 + a2), 37) + v19;
    uint64_t v24 = *(void *)((char *)this + a2 - 32) + v18;
    uint64_t v25 = __ROR8__(v24 + v15, 52);
    uint64_t v26 = v23 + __ROR8__(v22, 31);
    uint64_t v27 = __ROR8__(v24, 37);
    uint64_t v28 = *((void *)v13 - 3) + v24;
    uint64_t v29 = __ROR8__(v28, 7);
    uint64_t v30 = v28 + v14;
    uint64_t v31 = __ROR8__(v30, 31);
    unint64_t v32 = ((0xC3A5C85C97CB3127LL
          * ((0xC3A5C85C97CB3127LL * (v30 + v15 + v26) - 0x651E95C4D06FBFB1LL * (v22 + v17 + v27 + v25 + v29 + v31)) ^ ((0xC3A5C85C97CB3127LL * (v30 + v15 + v26) - 0x651E95C4D06FBFB1LL * (v22 + v17 + v27 + v25 + v29 + v31)) >> 47))) ^ a3)
        + v26;
    return 0x9AE16A3B2F90404FLL * (v32 ^ (v32 >> 47));
  }

  if (a2)
  {
    unint64_t v32 = (0x9AE16A3B2F90404FLL
         * (*(unsigned __int8 *)this | ((unint64_t)*((unsigned __int8 *)this + (a2 >> 1)) << 8))) ^ (0xC949D7C7509E6557LL * (a2 + 4LL * *((unsigned __int8 *)this + a2 - 1))) ^ a3;
    return 0x9AE16A3B2F90404FLL * (v32 ^ (v32 >> 47));
  }

  return a3 ^ 0x9AE16A3B2F90404FLL;
}

char *instantiateWitnessTable(uint64_t *a1, int *a2, const char *a3, char *a4)
{
  unint64_t v8 = a2[3];
  if ((v8 & 0x20000) != 0)
  {
    unint64_t v10 = (unsigned int *)(((unint64_t)&a2[3 * BYTE1(v8) + 4 + ((v8 >> 6) & 1)] + ((v8 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFFCLL);
    if ((v8 & 0x10000) != 0) {
      uint64_t v11 = *v10;
    }
    else {
      uint64_t v11 = 0LL;
    }
    uint64_t v9 = &v10[2 * v11 + (WORD1(v8) & 1)];
  }

  else
  {
    uint64_t v9 = 0LL;
  }

  GenericArgs = swift::TargetMetadata<swift::InProcess>::getGenericArgs(a1, (uint64_t)a2, a3, a4);
  uint64_t v15 = *(unsigned __int16 *)v9;
  unint64_t v16 = (unint64_t)*((unsigned __int16 *)v9 + 1) >> 1;
  uint64_t v17 = &a4[8 * v16];
  *(void *)uint64_t v17 = a2;
  uint64_t v18 = a2[2];
  uint64_t v19 = (char *)a2 + v18 + 8;
  if ((_DWORD)v18) {
    BOOL v20 = v19 == 0LL;
  }
  else {
    BOOL v20 = 1;
  }
  if (!v20 && v15 >= 2)
  {
    if (v15 >= 0xB && (uint64_t v22 = &a4[8 * v16], (unint64_t)(v22 - v19) >= 0x20))
    {
      unint64_t v60 = (v15 - 1) & 0xFFFFFFFFFFFFFFFCLL;
      uint64_t v23 = v60 | 1;
      char v61 = v22 + 24;
      unsigned int v62 = (__int128 *)(v19 + 24);
      unint64_t v63 = v60;
      do
      {
        __int128 v64 = *v62;
        *(v61 - 1) = *(v62 - 1);
        *char v61 = v64;
        v61 += 2;
        v62 += 2;
        v63 -= 4LL;
      }

      while (v63);
      if (v15 - 1 == v60) {
        goto LABEL_20;
      }
    }

    else
    {
      uint64_t v23 = 1LL;
    }

    uint64_t v24 = v15 - v23;
    uint64_t v25 = 8 * v23;
    uint64_t v26 = &v19[v25];
    uint64_t v27 = &a4[8 * v16 + v25];
    do
    {
      uint64_t v28 = *(void *)v26;
      v26 += 8;
      *(void *)uint64_t v27 = v28;
      v27 += 8;
      --v24;
    }

    while (v24);
  }

double swift::Lazy<swift::MetadataCache<anonymous namespace'::WitnessTableCacheEntry,(unsigned short)16>>::defaultInitCallback( uint64_t a1)
{
  *(void *)(a1 + 48) = 0LL;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

void swift::ConcurrentReadableHashMap<swift::HashMapElementWrapper<anonymous namespace'::GlobalWitnessTableCacheEntry>,swift::LazyMutex>::find<swift::TargetGenericWitnessTable<swift::InProcess> const*>( uint64_t a1, char a2)
{
  if ((v2 & 1) == 0)
  {
    char v5 = a2;
    a2 = v5;
    if (v3)
    {
      unint64_t v4 = __swift::__runtime::llvm::hashing::detail::fixed_seed_override;
      if (!__swift::__runtime::llvm::hashing::detail::fixed_seed_override) {
        unint64_t v4 = 0xFF51AFD7ED558CCDLL;
      }
      __swift::__runtime::llvm::hashing::detail::get_execution_seed(void)::seed = v4;
      a2 = v5;
    }
  }

  __asm { BR              X13 }

double swift::Lazy<swift::MetadataCache<anonymous namespace'::RelativeWitnessTableCacheEntry,(unsigned short)16>>::defaultInitCallback( uint64_t a1)
{
  *(void *)(a1 + 48) = 0LL;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

void swift::ConcurrentReadableHashMap<swift::HashMapElementWrapper<anonymous namespace'::GlobalRelativeWitnessTableCacheEntry>,swift::LazyMutex>::find<swift::TargetGenericWitnessTable<swift::InProcess> const*>( uint64_t a1, char a2)
{
  if ((v2 & 1) == 0)
  {
    char v5 = a2;
    a2 = v5;
    if (v3)
    {
      unint64_t v4 = __swift::__runtime::llvm::hashing::detail::fixed_seed_override;
      if (!__swift::__runtime::llvm::hashing::detail::fixed_seed_override) {
        unint64_t v4 = 0xFF51AFD7ED558CCDLL;
      }
      __swift::__runtime::llvm::hashing::detail::get_execution_seed(void)::seed = v4;
      a2 = v5;
    }
  }

  __asm { BR              X13 }

const char *findAssociatedTypeName(uint64_t a1, _DWORD *a2)
{
  uint64_t v2 = *(int *)(a1 + 20);
  int v3 = (const char *)(v2 + a1 + 20);
  if ((_DWORD)v2) {
    BOOL v4 = v3 == 0LL;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t v5 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v5)
    {
      uint64_t v7 = (_DWORD *)(a1 + 12LL * *(unsigned int *)(a1 + 12) + 24);
      size_t v8 = strlen(v3);
      for (uint64_t i = 8 * v5; i; i -= 8LL)
      {
        if ((*v7 & 0xF) == 7)
        {
          if (v8)
          {
            unint64_t v10 = memchr(v3, 32, v8);
            unint64_t v11 = v10 - v3;
            if (!v10) {
              unint64_t v11 = -1LL;
            }
          }

          else
          {
            unint64_t v11 = -1LL;
          }

          if (v8 >= v11) {
            unint64_t v12 = v11;
          }
          else {
            unint64_t v12 = v8;
          }
          if (v7 == a2) {
            return v3;
          }
          BOOL v13 = v8 > v11;
          BOOL v14 = v8 > v11;
          if (v13) {
            v3 += v12 + 1;
          }
          else {
            v3 += v12;
          }
          size_t v8 = v8 - v12 - v14;
        }

        v7 += 2;
      }
    }
  }

  return 0LL;
}

void *std::__function::__func<swift_getAssociatedTypeWitnessRelativeSlowImpl(swift::MetadataRequest,swift::TargetRelativeWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_0,std::allocator<swift_getAssociatedTypeWitnessRelativeSlowImpl(swift::MetadataRequest,swift::TargetRelativeWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_0>,void const* ()(unsigned int,unsigned int)>::__clone( uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = off_189B8D258;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift_getAssociatedTypeWitnessRelativeSlowImpl(swift::MetadataRequest,swift::TargetRelativeWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_0,std::allocator<swift_getAssociatedTypeWitnessRelativeSlowImpl(swift::MetadataRequest,swift::TargetRelativeWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_0>,void const* ()(unsigned int,unsigned int)>::__clone( uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_189B8D258;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<swift_getAssociatedTypeWitnessRelativeSlowImpl(swift::MetadataRequest,swift::TargetRelativeWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_0,std::allocator<swift_getAssociatedTypeWitnessRelativeSlowImpl(swift::MetadataRequest,swift::TargetRelativeWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_0>,void const* ()(unsigned int,unsigned int)>::operator()( uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  return swift::SubstGenericParametersFromMetadata::getMetadata( *(swift::SubstGenericParametersFromMetadata **)(a1 + 8),  *a2,  *a3);
}

void *std::__function::__func<swift_getAssociatedTypeWitnessRelativeSlowImpl(swift::MetadataRequest,swift::TargetRelativeWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_1,std::allocator<swift_getAssociatedTypeWitnessRelativeSlowImpl(swift::MetadataRequest,swift::TargetRelativeWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone( uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = off_189B8D2A0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift_getAssociatedTypeWitnessRelativeSlowImpl(swift::MetadataRequest,swift::TargetRelativeWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_1,std::allocator<swift_getAssociatedTypeWitnessRelativeSlowImpl(swift::MetadataRequest,swift::TargetRelativeWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone( uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_189B8D2A0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<swift_getAssociatedTypeWitnessRelativeSlowImpl(swift::MetadataRequest,swift::TargetRelativeWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_1,std::allocator<swift_getAssociatedTypeWitnessRelativeSlowImpl(swift::MetadataRequest,swift::TargetRelativeWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::operator()( uint64_t a1, uint64_t *a2, int *a3)
{
  return swift::SubstGenericParametersFromMetadata::getWitnessTable(*(void *)(a1 + 8), *a2, *a3);
}

void diagnoseMetadataDependencyCycle(uint64_t a1, uint64_t a2)
{
  v26.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x58uLL);
  *(_OWORD *)&v26.__r_.__value_.__r.__words[1] = xmmword_18180C3E0;
  strcpy( v26.__r_.__value_.__l.__data_,  "runtime error: unresolvable type metadata dependency cycle detected\n  Request for ");
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4 > 62)
  {
    if (v4 == 63)
    {
      uint64_t v5 = "layout of ";
      goto LABEL_11;
    }

    if (v4 == 255)
    {
      uint64_t v5 = "abstract metadata for ";
      goto LABEL_11;
    }
  }

  else
  {
    if (!v4)
    {
      uint64_t v5 = "transitive completion of ";
      goto LABEL_11;
    }

    if (v4 == 1)
    {
      uint64_t v5 = "completion of ";
LABEL_11:
      std::string::append(&v26, v5);
      swift::nameForMetadata((uint64_t *)&__p, *(Class *)a1);
      if (SHIBYTE(v20) >= 0) {
        p_p = (const std::string::value_type *)&__p;
      }
      else {
        p_p = (const std::string::value_type *)__p;
      }
      if (SHIBYTE(v20) >= 0) {
        std::string::size_type v7 = HIBYTE(v20);
      }
      else {
        std::string::size_type v7 = (std::string::size_type)v19;
      }
      std::string::append(&v26, p_p, v7);
      if (SHIBYTE(v20) < 0) {
        operator delete(__p);
      }
      if (a2 == 1)
      {
LABEL_43:
        std::string::append(&v26, "\nAborting!\n");
        if (_swift_shouldReportFatalErrorsToDebugger())
        {
          std::string __p = (void *)2;
          uint64_t v19 = "type-metadata-cycle";
          BOOL v20 = "fetching metadata";
          uint64_t v21 = 1LL;
          Class v22 = *(Class *)a1;
          __int128 v25 = 0u;
          __int128 v24 = 0u;
          __int128 v23 = 0u;
          if ((v26.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            unint64_t v16 = &v26;
          }
          else {
            unint64_t v16 = (std::string *)v26.__r_.__value_.__r.__words[0];
          }
          _swift_reportToDebugger(1LL, v16, &__p);
        }

        if ((v26.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t v17 = &v26;
        }
        else {
          uint64_t v17 = (std::string *)v26.__r_.__value_.__r.__words[0];
        }
        swift::fatalError(0LL, "%s", v14, v15, v17);
      }

      uint64_t v8 = 16 * a2 - 16;
      uint64_t v9 = (uint64_t *)(a1 + 24);
      while (1)
      {
        if ((char)v26.__r_.__value_.__s.__size_ < 0 && v26.__r_.__value_.__l.__size_ >> 17)
        {
          std::string::append(&v26, "\n  (cycle too long, limiting diagnostic text)");
          goto LABEL_43;
        }

        std::string::append(&v26, "\n  depends on ");
        uint64_t v13 = *v9;
        if (*v9 > 62)
        {
          if (v13 == 63)
          {
            unint64_t v10 = "layout of ";
            goto LABEL_22;
          }

          if (v13 == 255)
          {
            unint64_t v10 = "abstract metadata for ";
            goto LABEL_22;
          }
        }

        else
        {
          if (!v13)
          {
            unint64_t v10 = "transitive completion of ";
            goto LABEL_22;
          }

          if (v13 == 1)
          {
            unint64_t v10 = "completion of ";
            goto LABEL_22;
          }
        }

        unint64_t v10 = "<corrupted requirement> for ";
LABEL_22:
        std::string::append(&v26, v10);
        swift::nameForMetadata((uint64_t *)&__p, (Class)*(v9 - 1));
        if (SHIBYTE(v20) >= 0) {
          unint64_t v11 = (const std::string::value_type *)&__p;
        }
        else {
          unint64_t v11 = (const std::string::value_type *)__p;
        }
        if (SHIBYTE(v20) >= 0) {
          std::string::size_type v12 = HIBYTE(v20);
        }
        else {
          std::string::size_type v12 = (std::string::size_type)v19;
        }
        std::string::append(&v26, v11, v12);
        if (SHIBYTE(v20) < 0) {
          operator delete(__p);
        }
        v9 += 2;
        v8 -= 16LL;
        if (!v8) {
          goto LABEL_43;
        }
      }
    }
  }

  uint64_t v5 = "<corrupted requirement> for ";
  goto LABEL_11;
}

void checkMetadataDependency(swift::MetadataDependency)::CheckDependencyResult::forForeignMetadata( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (qword_18C476AF8 != -1) {
  uint64_t v24 = a2;
  }
  do
    unsigned int v6 = __ldaxr((unsigned int *)&ForeignMetadata);
  while (__stxr(v6 + 1, (unsigned int *)&ForeignMetadata));
  do
  {
    unint64_t v7 = atomic_load(&qword_18C476AC8);
    unint64_t v8 = atomic_load((unint64_t *)&qword_18C476AD0);
    unsigned int v9 = atomic_load((unsigned int *)&dword_18C476AC4);
    unint64_t v10 = atomic_load(&qword_18C476AC8);
  }

  while (v7 != v10);
  if (v7) {
    BOOL v11 = v8 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11 || v9 == 0)
  {
    uint64_t v13 = 0LL;
  }

  else
  {
    if (v14) {
      uint64_t v13 = *v14;
    }
    else {
      uint64_t v13 = 0LL;
    }
  }

  do
    unsigned int v15 = __ldxr((unsigned int *)&ForeignMetadata);
  while (__stlxr(v15 - 1, (unsigned int *)&ForeignMetadata));
  uint64_t v16 = *a1;
  char v17 = atomic_load(v13);
  unsigned int v18 = v17 & 7;
  if (v16 > 62)
  {
    if (v16 == 255)
    {
      if (v18) {
        goto LABEL_36;
      }
      os_unfair_lock_lock((os_unfair_lock_t)&unk_18C476AF0);
      unint64_t v20 = *v13;
      uint64_t v21 = *v13 & 7;
      if ((*(_DWORD *)v13 & 7) != 0) {
        goto LABEL_34;
      }
    }

    else
    {
      if (v16 != 63) {
LABEL_44:
      }
        abort();
      if (v18 > 1) {
        goto LABEL_36;
      }
      os_unfair_lock_lock((os_unfair_lock_t)&unk_18C476AF0);
      unint64_t v20 = *v13;
      uint64_t v21 = *v13 & 7;
    }

double swift::Lazy<swift::MetadataCache<anonymous namespace'::ForeignMetadataCacheEntry,(unsigned short)15>>::defaultInitCallback( uint64_t a1)
{
  *(void *)(a1 + 48) = 0LL;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

void swift::ConcurrentReadableHashMap<swift::HashMapElementWrapper<anonymous namespace'::ForeignMetadataCacheEntry>,swift::Mutex>::find<anonymous namespace'::ForeignMetadataCacheEntry::Key>( uint64_t *a1, char a2)
{
  __asm { BR              X8 }

uint64_t sub_181769BEC( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *__s2, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34)
{
  uint64_t v37 = (v44 >> (4 * v35)) & 0xF;
  if (!(_DWORD)v37) {
    return 0LL;
  }
  unint64_t v38 = (v37 - 1);
  if (v38 >= v34
    || (uint64_t v39 = *(void *)(v45 + 8 * v38),
        swift::ParsedTypeIdentity::parse(*v36, (uint64_t)v46),
        uint64_t v40 = *(void *)(v39 + 8),
        uint64_t v42 = v47,
        size_t v41 = v48,
        swift::ParsedTypeIdentity::parse(*(void *)(v40 + 8), (uint64_t)v46),
        v41 != v48)
    || v41 && memcmp(v42, v47, v41))
  {
    JUMPOUT(0x181769BCCLL);
  }

  return v45 + 8 * v38;
}

unint64_t swift::TargetTypeContextDescriptor<swift::InProcess>::getSingletonMetadataInitialization( unsigned int *a1)
{
  unint64_t v1 = *a1;
  int v2 = *a1 & 0x1F;
  if (v2 == 16)
  {
    if ((v1 & 0x80) != 0)
    {
      std::string::size_type v12 = (unsigned __int16 *)((((unint64_t)&a1[4 * ((v1 >> 7) & 1) + 11]
                                 + *((unsigned __int16 *)a1 + 26)
                                 + 3) & 0xFFFFFFFFFFFFFFFCLL)
                               + 12LL * *((unsigned __int16 *)a1 + 27));
      __int16 v13 = *((_WORD *)a1 + 29);
      BOOL v14 = &v12[2 * (v13 & 1)];
      if ((v13 & 1) != 0) {
        v14 += 4 * *v12;
      }
      unint64_t v6 = (unint64_t)v14 + (v13 & 2);
      if ((v13 & 2) != 0
        && (uint8x8_t v15 = (uint8x8_t)vcnt_s8((int8x8_t)*v14), v15.i16[0] = vaddlv_u8(v15), v6 += 2LL * v15.u32[0], *v14))
      {
        unsigned int v5 = *(unsigned __int16 *)((char *)&v14[v15.u32[0] - 1] + (v13 & 2));
      }

      else
      {
        unsigned int v5 = 0;
      }
    }

    else
    {
      unsigned int v5 = 0;
      unint64_t v6 = ((unint64_t)&a1[4 * ((v1 >> 7) & 1) + 11] + 3) & 0xFFFFFFFFFFFFFFFCLL;
    }

    unint64_t v11 = ((v6 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 12LL * v5 + 4LL * ((v1 >> 29) & 1);
  }

  else
  {
    if (v2 != 17 && v2 != 18) {
      abort();
    }
    if ((v1 & 0x80) != 0)
    {
      __int16 v8 = *((_WORD *)a1 + 21);
      unsigned int v9 = &v7[2 * (v8 & 1)];
      if ((v8 & 1) != 0) {
        v9 += 4 * *v7;
      }
      unint64_t v4 = (unint64_t)v9 + (v8 & 2);
      if ((v8 & 2) != 0
        && (uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)*v9), v10.i16[0] = vaddlv_u8(v10), v4 += 2LL * v10.u32[0], *v9))
      {
        unsigned int v3 = *(unsigned __int16 *)((char *)&v9[v10.u32[0] - 1] + (v8 & 2));
      }

      else
      {
        unsigned int v3 = 0;
      }
    }

    else
    {
      unsigned int v3 = 0;
      unint64_t v4 = ((unint64_t)&a1[4 * ((v1 >> 7) & 1) + 7] + 3) & 0xFFFFFFFFFFFFFFFCLL;
    }

    unint64_t v11 = ((v4 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 12LL * v3;
  }

  return v11 + 4LL * ((v1 & 0x30000) == 0x20000);
}

void *std::__function::__func<recordBacktrace(void *)::$_0,std::allocator<recordBacktrace(void *)::$_0>,void ()(void **,int)>::__clone( uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = off_189B8D2E8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<recordBacktrace(void *)::$_0,std::allocator<recordBacktrace(void *)::$_0>,void ()(void **,int)>::__clone( uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_189B8D2E8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<recordBacktrace(void *)::$_0,std::allocator<recordBacktrace(void *)::$_0>,void ()(void **,int)>::operator()( uint64_t a1, const void **a2, int *a3)
{
  unint64_t v4 = *a2;
  uint64_t v5 = *a3;
  unint64_t v6 = malloc(8 * v5 + 24);
  v6[1] = **(void **)(a1 + 8);
  *((_DWORD *)v6 + 4) = v5;
  double result = memcpy(v6 + 3, v4, 8 * v5);
  uint64_t v8 = _swift_debug_metadataAllocationBacktraceList;
  *unint64_t v6 = _swift_debug_metadataAllocationBacktraceList;
  unint64_t v9 = __ldxr((unint64_t *)&_swift_debug_metadataAllocationBacktraceList);
  if (v9 != v8)
  {
    __clrex();
    while (1)
    {
LABEL_8:
      *unint64_t v6 = v9;
      unint64_t v10 = __ldxr((unint64_t *)&_swift_debug_metadataAllocationBacktraceList);
      if (v10 == v9)
      {
      }

      else
      {
        __clrex();
      }

      unint64_t v9 = v10;
    }
  }

  return result;
}

void __swift::__runtime::llvm::toHex( unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, std::string *a4@<X8>)
{
  uint64_t v5 = a2;
  a4->__r_.__value_.__r.__words[0] = 0LL;
  a4->__r_.__value_.__l.__size_ = 0LL;
  a4->__r_.__value_.__l.__cap_ = 0LL;
  std::string::reserve(a4, 2 * a2);
  if (v5)
  {
    if (a3) {
      char v8 = 32;
    }
    else {
      char v8 = 0;
    }
    do
    {
      unsigned int v9 = *a1++;
      std::string::push_back(a4, a0123456789abcd[(unint64_t)v9 >> 4] | v8);
      std::string::push_back(a4, a0123456789abcd[v9 & 0xF] | v8);
      --v5;
    }

    while (v5);
  }

void *swift_getKeyPath::$_0::__invoke(swift_getKeyPath::$_0 *this, void *a2)
{
  double result = (void *)swift::getOverride_getKeyPath(this);
  swift_getKeyPath::Override = result;
  return result;
}

void *swift_getAssociatedTypeWitnessSlow::$_0::__invoke( swift_getAssociatedTypeWitnessSlow::$_0 *this, void *a2)
{
  double result = (void *)swift::getOverride_getAssociatedTypeWitnessSlow(this);
  swift_getAssociatedTypeWitnessSlow::Override = result;
  return result;
}

uint64_t *swift::TypeLookupErrorOr<swift::TypeInfo>::operator=(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((unsigned __int16 *)a1 + 12);
  int v5 = *((unsigned __int16 *)a2 + 12);
  if (v4 == v5)
  {
    if (*((_WORD *)a1 + 12))
    {
      if (a1 != a2 && v4 == 1)
      {
        ((void (*)(uint64_t, uint64_t, void))a1[1])(*a1, 3LL, 0LL);
        uint64_t v6 = *a2;
        unint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, void))a2[1];
        a1[1] = (uint64_t)v7;
        *a1 = v7(v6, 2LL, 0LL);
      }
    }

    else
    {
      __int128 v9 = *(_OWORD *)a2;
      *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
      *(_OWORD *)a1 = v9;
    }
  }

  else
  {
    if (v4 == 1) {
      ((void (*)(uint64_t, uint64_t, void))a1[1])(*a1, 3LL, 0LL);
    }
    if (v5 == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *a2 = 0LL;
      a2[1] = (uint64_t)swift::TypeLookupError::nop;
    }

    else if (!v5)
    {
      __int128 v8 = *(_OWORD *)a2;
      a1[2] = a2[2];
      *(_OWORD *)a1 = v8;
    }
  }

  *((_WORD *)a1 + 12) = *((_WORD *)a2 + 12);
  return a1;
}

uint64_t swift::TypeLookupError::nop()
{
  return 0LL;
}

void *std::__function::__func<swift_getAssociatedTypeWitnessSlowImpl(swift::MetadataRequest,swift::TargetWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_0,std::allocator<swift_getAssociatedTypeWitnessSlowImpl(swift::MetadataRequest,swift::TargetWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_0>,void const* ()(unsigned int,unsigned int)>::__clone( uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = off_189B8D330;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift_getAssociatedTypeWitnessSlowImpl(swift::MetadataRequest,swift::TargetWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_0,std::allocator<swift_getAssociatedTypeWitnessSlowImpl(swift::MetadataRequest,swift::TargetWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_0>,void const* ()(unsigned int,unsigned int)>::__clone( uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_189B8D330;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<swift_getAssociatedTypeWitnessSlowImpl(swift::MetadataRequest,swift::TargetWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_0,std::allocator<swift_getAssociatedTypeWitnessSlowImpl(swift::MetadataRequest,swift::TargetWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_0>,void const* ()(unsigned int,unsigned int)>::operator()( uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  if (*a3 | *a2) {
    return 0LL;
  }
  else {
    return *(void *)(a1 + 8);
  }
}

__n128 std::__function::__func<swift_getAssociatedTypeWitnessSlowImpl(swift::MetadataRequest,swift::TargetWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_1,std::allocator<swift_getAssociatedTypeWitnessSlowImpl(swift::MetadataRequest,swift::TargetWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone( uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_189B8D378;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<swift_getAssociatedTypeWitnessSlowImpl(swift::MetadataRequest,swift::TargetWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_1,std::allocator<swift_getAssociatedTypeWitnessSlowImpl(swift::MetadataRequest,swift::TargetWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone( uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_189B8D378;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t std::__function::__func<swift_getAssociatedTypeWitnessSlowImpl(swift::MetadataRequest,swift::TargetWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_1,std::allocator<swift_getAssociatedTypeWitnessSlowImpl(swift::MetadataRequest,swift::TargetWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::operator()( void **a1, uint64_t *a2, unsigned int *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = *a1[1];
  uint64_t v5 = *a2;
  uint64_t v6 = v4 + 12LL * *(unsigned int *)(v4 + 12) + 8 * v3 + 24;
  uint64_t v7 = *a1[2];
  uint64_t v8 = *a1[3];
  uint64_t v9 = *a1[4];
  unint64_t result = atomic_load((unint64_t *)(v7 + ((v6 - v9) & 0x7FFFFFFF8LL)));
  if ((result & 1) != 0) {
    return swift_getAssociatedConformanceWitnessSlow(v7, v8, v5, v9, v6);
  }
  return result;
}

void *std::__function::__func<swift_getAssociatedTypeWitnessSlowImpl(swift::MetadataRequest,swift::TargetWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_2,std::allocator<swift_getAssociatedTypeWitnessSlowImpl(swift::MetadataRequest,swift::TargetWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_2>,void const* ()(unsigned int,unsigned int)>::__clone( uint64_t a1)
{
  unint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *unint64_t result = off_189B8D3C0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift_getAssociatedTypeWitnessSlowImpl(swift::MetadataRequest,swift::TargetWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_2,std::allocator<swift_getAssociatedTypeWitnessSlowImpl(swift::MetadataRequest,swift::TargetWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_2>,void const* ()(unsigned int,unsigned int)>::__clone( uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_189B8D3C0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<swift_getAssociatedTypeWitnessSlowImpl(swift::MetadataRequest,swift::TargetWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_2,std::allocator<swift_getAssociatedTypeWitnessSlowImpl(swift::MetadataRequest,swift::TargetWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_2>,void const* ()(unsigned int,unsigned int)>::operator()( uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  return swift::SubstGenericParametersFromMetadata::getMetadata( *(swift::SubstGenericParametersFromMetadata **)(a1 + 8),  *a2,  *a3);
}

void *std::__function::__func<swift_getAssociatedTypeWitnessSlowImpl(swift::MetadataRequest,swift::TargetWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_3,std::allocator<swift_getAssociatedTypeWitnessSlowImpl(swift::MetadataRequest,swift::TargetWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_3>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone( uint64_t a1)
{
  unint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *unint64_t result = &off_189B8D408;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift_getAssociatedTypeWitnessSlowImpl(swift::MetadataRequest,swift::TargetWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_3,std::allocator<swift_getAssociatedTypeWitnessSlowImpl(swift::MetadataRequest,swift::TargetWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_3>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone( uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_189B8D408;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<swift_getAssociatedTypeWitnessSlowImpl(swift::MetadataRequest,swift::TargetWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_3,std::allocator<swift_getAssociatedTypeWitnessSlowImpl(swift::MetadataRequest,swift::TargetWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_3>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::operator()( uint64_t a1, uint64_t *a2, int *a3)
{
  return swift::SubstGenericParametersFromMetadata::getWitnessTable(*(void *)(a1 + 8), *a2, *a3);
}

void *swift_getAssociatedConformanceWitnessSlow::$_0::__invoke( swift_getAssociatedConformanceWitnessSlow::$_0 *this, void *a2)
{
  unint64_t result = (void *)swift::getOverride_getAssociatedConformanceWitnessSlow(this);
  swift_getAssociatedConformanceWitnessSlow::Override = result;
  return result;
}

unint64_t swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetEnumDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetEnumDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl( unsigned __int16 *a1)
{
  unint64_t v1 = *(unsigned int *)a1;
  if ((v1 & 0x80) != 0)
  {
    uint64_t v8 = (uint64_t)&a1[8 * ((v1 >> 7) & 1) + 14];
    uint64_t v9 = (unsigned __int16 *)(((v8 + a1[18] + 3) & 0xFFFFFFFFFFFFFFFCLL) + 12LL * a1[19]);
    unsigned __int16 v10 = a1[21];
    unint64_t v11 = &v9[2 * (v10 & 1)];
    if ((v10 & 1) != 0) {
      v11 += 4 * *v9;
    }
    unint64_t v2 = (unint64_t)v11 + (v10 & 2);
    if ((v10 & 2) != 0
      && (uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)*v11), v12.i16[0] = vaddlv_u8(v12), v2 += 2LL * v12.u32[0], *v11))
    {
      unsigned int v5 = *(unsigned __int16 *)((char *)&v11[v12.u32[0] - 1] + (v10 & 2));
    }

    else
    {
      unsigned int v5 = 0;
    }

    BOOL v3 = (v1 & 0x30000) == 0x20000;
    BOOL v4 = (v1 & 0x30000) == 0x10000;
    if ((v1 & 0x80000) != 0)
    {
      BOOL v14 = (unsigned __int16 *)(((v8 + a1[18] + 3) & 0xFFFFFFFFFFFFFFFCLL) + 12LL * a1[19]);
      unsigned __int16 v15 = a1[21];
      uint64_t v16 = &v14[2 * (v15 & 1)];
      if ((v15 & 1) != 0) {
        v16 += 4 * *v14;
      }
      unint64_t v7 = (unint64_t)v16 + (v15 & 2);
      if ((v15 & 2) != 0
        && (uint8x8_t v17 = (uint8x8_t)vcnt_s8((int8x8_t)*v16), v17.i16[0] = vaddlv_u8(v17), v7 += 2LL * v17.u32[0], *v16))
      {
        unsigned int v6 = *(unsigned __int16 *)((char *)&v16[v17.u32[0] - 1] + (v15 & 2));
      }

      else
      {
        unsigned int v6 = 0;
      }

      goto LABEL_18;
    }
  }

  else
  {
    unint64_t v2 = ((unint64_t)&a1[8 * ((v1 >> 7) & 1) + 15] + 1) & 0xFFFFFFFFFFFFFFFCLL;
    BOOL v3 = (v1 & 0x30000) == 0x20000;
    BOOL v4 = (v1 & 0x30000) == 0x10000;
    unsigned int v5 = 0;
    if ((v1 & 0x80000) != 0)
    {
      unsigned int v6 = 0;
      unint64_t v7 = ((unint64_t)&a1[8 * ((v1 >> 7) & 1) + 15] + 1) & 0xFFFFFFFFFFFFFFFCLL;
LABEL_18:
      uint64_t v13 = *(unsigned int *)(((v7 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 12LL * v6 + 4 * v3 + 12LL * v4);
      return ((v2 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 12LL * v5 + 4 * v3 + 12LL * v4 + 4 * ((v1 >> 19) & 1) + 4 * v13;
    }
  }

  uint64_t v13 = 0LL;
  return ((v2 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 12LL * v5 + 4 * v3 + 12LL * v4 + 4 * ((v1 >> 19) & 1) + 4 * v13;
}

unint64_t swift::MetadataCacheEntryBase<anonymous namespace'::SingletonMetadataCacheEntry,int>::awaitSatisfyingState( unint64_t *a1, const char *a2)
{
  char v4 = atomic_load(a1);
  unsigned int v5 = v4 & 7;
  if (v5 - 1 >= 3)
  {
    if (v5 == 4) {
      return a1[1];
    }
    if ((v4 & 7) != 0) {
      goto LABEL_60;
    }
    uint64_t v7 = (unsigned __int16)a2 & 0x100;
  }

  else
  {
    if (a2 > 0x3Eu)
    {
      if (v5 > 1) {
        goto LABEL_15;
      }
    }

    else if ((_BYTE)a2)
    {
      if (v5 >= 3) {
        return a1[1];
      }
    }

    uint64_t v7 = (unsigned __int16)a2 & 0x100;
    if ((v4 & 8) != 0 && ((unsigned __int16)a2 & 0x100) != 0)
    {
LABEL_15:
      unint64_t v6 = a1[1];
      if (v5 == 1 || v5 == 3 || v5 == 2) {
        return v6;
      }
LABEL_60:
      abort();
    }
  }

  uint64_t v8 = 0LL;
  Class v22 = &SingletonMetadata;
  uint64_t v23 = 0LL;
  __int16 v24 = 0;
  int v9 = a2;
  while (1)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&SingletonMetadata);
    if (v8)
    {
      if (*v8 == 1LL)
      {
        unsigned __int16 v10 = (void *)v8[2];
        void v8[2] = 0LL;
        if (v10) {
          operator delete(v10);
        }
        swift_slowDealloc(v8);
      }

      else
      {
        --*v8;
      }
    }

    unint64_t v11 = *a1;
    uint64_t v12 = *a1 & 7;
    if ((_DWORD)v12)
    {
      if ((_DWORD)v12 == 4)
      {
LABEL_50:
        os_unfair_lock_unlock((os_unfair_lock_t)&SingletonMetadata);
        unint64_t v6 = a1[1];
        goto LABEL_55;
      }

      goto LABEL_60;
    }

unint64_t swift::MetadataCacheEntryBase<anonymous namespace'::SingletonMetadataCacheEntry,int>::doInitialization( unint64_t *a1, uint64_t a2, const char *a3, char *a4)
{
  __int16 v5 = (__int16)a3;
  unint64_t v8 = a1[1];
  uint64_t v32 = *(void *)(a2 + 8);
  int v31 = *(__int128 **)(v32 + 16);
  if (!v31)
  {
    __int128 v33 = 0u;
    __int128 v34 = 0u;
    int v31 = &v33;
  }

  int v30 = (unsigned int **)(v8 + 8);
  int v9 = a3;
  while (1)
  {
    unsigned int v10 = *(unsigned __int8 *)(a2 + 17);
    if (v10 > 2) {
      break;
    }
    uint64_t v11 = *(void *)v8;
    if (*(void *)v8 > 0x7FFuLL) {
      LODWORD(v11) = 0;
    }
    uint64_t v12 = (unsigned int **)(v8 + 8);
    if ((v11 - 512) < 5
      || !(_DWORD)v11 && (uint64_t v12 = (unsigned int **)(v8 + 64), (*(_BYTE *)(v8 + 32) & 2) != 0))
    {
      unint64_t v13 = *v12;
    }

    else
    {
      unint64_t v13 = 0LL;
    }

    unint64_t SingletonMetadataInitialization = swift::TargetTypeContextDescriptor<swift::InProcess>::getSingletonMetadataInitialization(v13);
    uint64_t v15 = *(int *)(SingletonMetadataInitialization + 8);
    uint64_t v16 = (_DWORD)v15
        ? ((uint64_t (*)(unint64_t, __int128 *, void))(v15 + SingletonMetadataInitialization + 8))( v8,  v31,  0LL)
        : MEMORY[0](v8, v31, 0LL);
    if (!v16) {
      break;
    }
    uint64_t v17 = v16;
    if ((*(_BYTE *)(*(void *)(v8 - 8) + 82LL) & 0x40) != 0) {
      unsigned __int8 v18 = 1;
    }
    else {
      unsigned __int8 v18 = 2;
    }
LABEL_22:
    uint64_t v4 = a2;
    *(_BYTE *)(a2 + 17) = v18;
    if (v9 > 62)
    {
      if (v9 != 63)
      {
        if (v9 == 255)
        {
LABEL_37:
          Class v22 = *(_OWORD **)(v32 + 16);
          if (!v22)
          {
            if ((unint64_t)v33 | *((void *)&v33 + 1) | (unint64_t)v34 | *((void *)&v34 + 1))
            {
              Class v22 = operator new(0x20uLL);
              __int128 v24 = v34;
              *Class v22 = v33;
              v22[1] = v24;
              __int128 v25 = *(void **)(v32 + 16);
              *(void *)(v32 + 16) = v22;
              if (v25)
              {
                operator delete(v25);
                Class v22 = *(_OWORD **)(v32 + 16);
              }
            }

            else
            {
              Class v22 = 0LL;
            }
          }

          *(void *)(v32 + 16) = 0LL;
          unint64_t result = a1[1];
          if (v18 == 1 || v18 == 3 || v18 == 2) {
            return result;
          }
        }

void swift::ConcurrentReadableHashMap<swift::HashMapElementWrapper<anonymous namespace'::ObjCClassCacheEntry>,swift::LazyMutex>::find<swift::TargetClassMetadata<swift::InProcess,swift::TargetAnyClassMetadataObjCInterop<swift::InProcess>> const*>( uint64_t a1, char a2)
{
  if ((v2 & 1) == 0)
  {
    char v5 = a2;
    a2 = v5;
    if (v3)
    {
      unint64_t v4 = __swift::__runtime::llvm::hashing::detail::fixed_seed_override;
      if (!__swift::__runtime::llvm::hashing::detail::fixed_seed_override) {
        unint64_t v4 = 0xFF51AFD7ED558CCDLL;
      }
      __swift::__runtime::llvm::hashing::detail::get_execution_seed(void)::seed = v4;
      a2 = v5;
    }
  }

  __asm { BR              X13 }

void swift::ConcurrentReadableHashMap<swift::HashMapElementWrapper<anonymous namespace'::PackCacheEntry<swift::TargetMetadata<swift::InProcess>>>,swift::LazyMutex>::find<anonymous namespace'::PackCacheEntry<swift::TargetMetadata<swift::InProcess>>::Key>( void *a1, char a2)
{
  unint64_t v6 = 0LL;
  if (a1[1])
  {
    uint64_t v4 = 0LL;
    do
    {
      uint64_t v5 = *(void *)(*a1 + 8 * v4);
      unint64_t v6 = __swift::__runtime::llvm::hash_combine<__swift::__runtime::llvm::hash_code,swift::TargetMetadata<swift::InProcess> const*>( &v6,  &v5);
      ++v4;
    }

    while (v4 != a1[1]);
  }

  __asm { BR              X13 }

uint64_t sub_18176ADEC()
{
  uint64_t v5 = (v3 >> (4 * v0)) & 0xF;
  if (!(_DWORD)v5) {
    return 0LL;
  }
  unint64_t v6 = (v5 - 1);
  if (v6 >= v2) {
    goto LABEL_10;
  }
  uint64_t v7 = *(void **)(v1 + 8 * v6);
  uint64_t v8 = v4[1];
  if (v8 != *v7) {
    goto LABEL_10;
  }
  if (v8)
  {
    uint64_t v9 = 0LL;
    unsigned int v10 = v7 + 1;
    unsigned int v11 = 1;
    while (*(void *)(*v4 + 8 * v9) == v10[v9])
    {
      uint64_t v9 = v11++;
      if (v8 == v9) {
        return v1 + 8 * v6;
      }
    }

unint64_t __swift::__runtime::llvm::hash_combine<__swift::__runtime::llvm::hash_code,swift::TargetMetadata<swift::InProcess> const*>( void *a1, uint64_t *a2)
{
  uint64_t v12 = 0LL;
  memset(v11, 0, sizeof(v11));
  memset(v10, 0, sizeof(v10));
  if ((v2 & 1) == 0)
  {
    uint64_t v8 = a2;
    uint64_t v9 = a1;
    a2 = v8;
    a1 = v9;
    if (v6)
    {
      unint64_t v7 = __swift::__runtime::llvm::hashing::detail::fixed_seed_override;
      if (!__swift::__runtime::llvm::hashing::detail::fixed_seed_override) {
        unint64_t v7 = 0xFF51AFD7ED558CCDLL;
      }
      __swift::__runtime::llvm::hashing::detail::get_execution_seed(void)::seed = v7;
      a2 = v8;
      a1 = v9;
    }
  }

  uint64_t v3 = *a1;
  uint64_t v13 = __swift::__runtime::llvm::hashing::detail::get_execution_seed(void)::seed;
  *(void *)&v10[0] = v3;
  uint64_t v14 = 0LL;
  uint64_t v4 = (char *)__swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>( (uint64_t)v10,  &v14,  (void *)v10 + 1,  (unint64_t)v11,  *a2);
  return __swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper::combine( (__swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper *)v10,  v14,  v4,  (char *)v11);
}

void swift::ConcurrentReadableHashMap<swift::HashMapElementWrapper<anonymous namespace'::PackCacheEntry<swift::TargetWitnessTable<swift::InProcess>>>,swift::LazyMutex>::find<anonymous namespace'::PackCacheEntry<swift::TargetWitnessTable<swift::InProcess>>::Key>( void *a1, char a2)
{
  unint64_t v6 = 0LL;
  if (a1[1])
  {
    uint64_t v4 = 0LL;
    do
    {
      uint64_t v5 = *(void *)(*a1 + 8 * v4);
      unint64_t v6 = __swift::__runtime::llvm::hash_combine<__swift::__runtime::llvm::hash_code,swift::TargetMetadata<swift::InProcess> const*>( &v6,  &v5);
      ++v4;
    }

    while (v4 != a1[1]);
  }

  __asm { BR              X13 }

uint64_t sub_18176B068()
{
  uint64_t v5 = (v3 >> (4 * v0)) & 0xF;
  if (!(_DWORD)v5) {
    return 0LL;
  }
  unint64_t v6 = (v5 - 1);
  if (v6 >= v2) {
    goto LABEL_10;
  }
  unint64_t v7 = *(void **)(v1 + 8 * v6);
  uint64_t v8 = v4[1];
  if (v8 != *v7) {
    goto LABEL_10;
  }
  if (v8)
  {
    uint64_t v9 = 0LL;
    unsigned int v10 = v7 + 1;
    unsigned int v11 = 1;
    while (*(void *)(*v4 + 8 * v9) == v10[v9])
    {
      uint64_t v9 = v11++;
      if (v8 == v9) {
        return v1 + 8 * v6;
      }
    }

uint64_t anonymous namespace'::FunctionCacheEntry::matchesKey(uint64_t a1, unint64_t *a2)
{
  unint64_t v2 = *a2;
  if (*a2 != *(void *)(a1 + 24)) {
    return 0LL;
  }
  unint64_t v5 = a2[1];
  if ((v2 & 0x8000000) != 0)
  {
    if (v5 != *(void *)((a1
                          + 8LL * (unsigned __int16)*a2
                          + 4 * ((unsigned __int16)*a2 & (unint64_t)((uint64_t)(*a2 << 38) >> 63))
                          + 47) & 0xFFFFFFFFFFFFFFF8LL))
      return 0LL;
  }

  else if (v5)
  {
    return 0LL;
  }

  if (a2[4] != *(void *)(a1 + 32)) {
    return 0LL;
  }
  unint64_t v6 = a2[5];
  if ((v2 & 0x10000000) != 0)
  {
    if (v6 == *(void *)(((a1
                           + 8LL * (unsigned __int16)*a2
                           + 4 * ((unsigned __int16)*a2 & (unint64_t)((uint64_t)(*a2 << 38) >> 63))
                           + 47) & 0xFFFFFFFFFFFFFFF8LL)
                         + 8 * ((*a2 >> 27) & 1)))
      goto LABEL_11;
    return 0LL;
  }

  if (v6) {
    return 0LL;
  }
LABEL_11:
  if ((v2 & 0x80000000) != 0) {
    int v7 = *(_DWORD *)(((a1
  }
                     + 8LL * (unsigned __int16)*a2
                     + 4 * ((unsigned __int16)*a2 & (unint64_t)((uint64_t)(*a2 << 38) >> 63))
                     + 47) & 0xFFFFFFFFFFFFFFF8LL)
                   + 8 * ((v2 >> 27) & 1)
                   + 8 * ((v2 >> 28) & 1));
  else {
    int v7 = 0;
  }
  if (*((_DWORD *)a2 + 12) != v7) {
    return 0LL;
  }
  unint64_t v8 = a2[7];
  if (v8 != swift::TargetFunctionTypeMetadata<swift::InProcess>::getThrownError(a1 + 16)) {
    return 0LL;
  }
  if ((unsigned __int16)*a2)
  {
    uint64_t v10 = 0LL;
    uint64_t v11 = a1 + 40;
    uint64_t result = 1LL;
    while (1)
    {
      if (*(void *)(a2[2] + 8 * v10) != *(void *)(v11 + 8 * v10)) {
        return 0LL;
      }
      if ((*a2 & 0x2000000) != 0)
      {
        int v12 = *(_DWORD *)(a2[3] + 4 * v10);
        uint64_t v13 = *(void *)(a1 + 24);
        if ((v13 & 0x2000000) == 0)
        {
LABEL_24:
          int v14 = 0;
          goto LABEL_25;
        }
      }

      else
      {
        int v12 = 0;
        uint64_t v13 = *(void *)(a1 + 24);
        if ((v13 & 0x2000000) == 0) {
          goto LABEL_24;
        }
      }

      int v14 = *(_DWORD *)(v11 + 8LL * (unsigned __int16)v13 + 4 * v10);
LABEL_25:
      if (v12 != v14) {
        return 0LL;
      }
    }
  }

  return 1LL;
}

unint64_t anonymous namespace'::hash_value(unsigned __int16 *a1)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v17 = *((void *)a1 + 1);
  unint64_t v3 = (uint64_t *)(a1 + 16);
  uint64_t v4 = (uint64_t *)(a1 + 20);
  int v16 = *((_DWORD *)a1 + 12);
  unint64_t v5 = (uint64_t *)(a1 + 28);
  uint64_t v21 = 0LL;
  memset(v20, 0, sizeof(v20));
  memset(v19, 0, sizeof(v19));
  if ((v6 & 1) == 0)
  {
    uint64_t v13 = (uint64_t *)(a1 + 20);
    int v14 = (uint64_t *)(a1 + 16);
    uint64_t v15 = v2;
    unint64_t v3 = v14;
    uint64_t v2 = v15;
    uint64_t v4 = v13;
    if (v11)
    {
      unint64_t v12 = __swift::__runtime::llvm::hashing::detail::fixed_seed_override;
      if (!__swift::__runtime::llvm::hashing::detail::fixed_seed_override) {
        unint64_t v12 = 0xFF51AFD7ED558CCDLL;
      }
      __swift::__runtime::llvm::hashing::detail::get_execution_seed(void)::seed = v12;
      unint64_t v3 = v14;
      uint64_t v2 = v15;
      uint64_t v4 = v13;
    }
  }

  uint64_t v22 = __swift::__runtime::llvm::hashing::detail::get_execution_seed(void)::seed;
  *(void *)&v19[0] = v2;
  unint64_t result = __swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper::combine<unsigned long,swift::TargetMetadata<swift::InProcess> const*,swift::TargetMetadata<swift::InProcess> const*,unsigned int,swift::TargetMetadata<swift::InProcess> const*>( (__swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper *)v19,  0LL,  (void *)v19 + 1,  (char *)v20,  &v17,  v3,  v4,  &v16,  v5);
  unint64_t v18 = result;
  uint64_t v8 = *a1;
  if (*a1)
  {
    uint64_t v9 = 0LL;
    do
    {
      *(void *)&v19[0] = *(void *)(*((void *)a1 + 2) + 8 * v9);
      unint64_t v18 = __swift::__runtime::llvm::hash_combine<__swift::__runtime::llvm::hash_code,swift::TargetMetadata<swift::InProcess> const*>( &v18,  (uint64_t *)v19);
      if ((*((_BYTE *)a1 + 3) & 2) != 0) {
        int v10 = *(_DWORD *)(*((void *)a1 + 3) + 4 * v9);
      }
      else {
        int v10 = 0;
      }
      LODWORD(v19[0]) = v10;
      unint64_t result = __swift::__runtime::llvm::hash_combine<__swift::__runtime::llvm::hash_code,unsigned int>( &v18,  (int *)v19);
      unint64_t v18 = result;
      ++v9;
    }

    while (v8 != v9);
  }

  return result;
}

unint64_t __swift::__runtime::llvm::hash_combine<__swift::__runtime::llvm::hash_code,unsigned int>( void *a1, int *a2)
{
  uint64_t v12 = 0LL;
  memset(v11, 0, sizeof(v11));
  memset(v10, 0, sizeof(v10));
  if ((v2 & 1) == 0)
  {
    uint64_t v8 = a2;
    uint64_t v9 = a1;
    a2 = v8;
    a1 = v9;
    if (v6)
    {
      unint64_t v7 = __swift::__runtime::llvm::hashing::detail::fixed_seed_override;
      if (!__swift::__runtime::llvm::hashing::detail::fixed_seed_override) {
        unint64_t v7 = 0xFF51AFD7ED558CCDLL;
      }
      __swift::__runtime::llvm::hashing::detail::get_execution_seed(void)::seed = v7;
      a2 = v8;
      a1 = v9;
    }
  }

  uint64_t v3 = *a1;
  uint64_t v13 = __swift::__runtime::llvm::hashing::detail::get_execution_seed(void)::seed;
  *(void *)&v10[0] = v3;
  uint64_t v14 = 0LL;
  uint64_t v4 = (char *)__swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>( (uint64_t)v10,  &v14,  (_DWORD *)v10 + 2,  (unint64_t)v11,  *a2);
  return __swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper::combine( (__swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper *)v10,  v14,  v4,  (char *)v11);
}

unint64_t __swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper::combine<unsigned long,swift::TargetMetadata<swift::InProcess> const*,swift::TargetMetadata<swift::InProcess> const*,unsigned int,swift::TargetMetadata<swift::InProcess> const*>( __swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, void *a3, char *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, int *a8, uint64_t *a9)
{
  unint64_t v20 = a2;
  uint64_t v14 = __swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>( (uint64_t)a1,  (uint64_t *)&v20,  a3,  (unint64_t)a4,  *a5);
  unint64_t v21 = v20;
  uint64_t v15 = __swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>( (uint64_t)a1,  (uint64_t *)&v21,  v14,  (unint64_t)a4,  *a6);
  unint64_t v22 = v21;
  int v16 = __swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>( (uint64_t)a1,  (uint64_t *)&v22,  v15,  (unint64_t)a4,  *a7);
  unint64_t v23 = v22;
  uint64_t v17 = __swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>( (uint64_t)a1,  (uint64_t *)&v23,  v16,  (unint64_t)a4,  *a8);
  unint64_t v24 = v23;
  unint64_t v18 = (char *)__swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>( (uint64_t)a1,  (uint64_t *)&v24,  v17,  (unint64_t)a4,  *a9);
  return __swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper::combine(a1, v24, v18, a4);
}

_DWORD *__swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>( uint64_t a1, uint64_t *a2, _DWORD *__dst, unint64_t a4, int a5)
{
  int __src = a5;
  if ((unint64_t)(__dst + 1) <= a4)
  {
    *std::string __dst = a5;
    return __dst + 1;
  }

  else
  {
    unint64_t v8 = a4 - (void)__dst;
    memcpy(__dst, &__src, a4 - (void)__dst);
    if (*a2)
    {
      __swift::__runtime::llvm::hashing::detail::hash_state::mix((unint64_t *)(a1 + 64), (const char *)a1);
      uint64_t v9 = *a2 + 64;
    }

    else
    {
      unint64_t v10 = *(void *)(a1 + 120);
      uint64_t v11 = __ROR8__(v10 ^ 0xB492B66FBE98F273LL, 49);
      unint64_t v12 = v10 ^ (v10 >> 47);
      uint64_t v13 = *(void *)(a1 + 8);
      uint64_t v14 = v13 + v10 + v11;
      uint64_t v15 = *(void *)(a1 + 48);
      uint64_t v16 = *(void *)(a1 + 56);
      uint64_t v17 = *(void *)(a1 + 40);
      uint64_t v18 = v17 + v11 - 0x4B6D499041670D8DLL * __ROR8__(v15 + v10 - 0x4B6D499041670D8DLL * v10, 42);
      unint64_t v19 = 0x9DDFEA08EB382D69LL
          * ((0x9DDFEA08EB382D69LL * (v10 ^ 0xB492B66FBE98F273LL)) ^ ((0x9DDFEA08EB382D69LL
                                                                     * (v10 ^ 0xB492B66FBE98F273LL)) >> 47) ^ 0xB492B66FBE98F273LL);
      unint64_t v20 = 0x9DDFEA08EB382D69LL
          * (v10 ^ (((0x9DDFEA08EB382D69LL * (v12 ^ (0xB492B66FBE98F273LL * v10))) ^ v10) >> 47) ^ (0x9DDFEA08EB382D69LL
                                                                                                  * (v12 ^ (0xB492B66FBE98F273LL * v10))));
      unint64_t v21 = 0x9DDFEA08EB382D69LL * (v20 ^ (v20 >> 47));
      unint64_t v22 = 0xB492B66FBE98F273LL * __ROR8__(v12 - 0x622015F714C7D297LL * (v19 ^ (v19 >> 47)), 33);
      uint64_t v23 = *(void *)a1 - 0x6D8ED9027DD26057LL * v10;
      uint64_t v25 = *(void *)(a1 + 16);
      uint64_t v24 = *(void *)(a1 + 24);
      uint64_t v26 = v23 + v13 + v25;
      unint64_t v27 = v21 ^ (0xB492B66FBE98F273LL * __ROR8__(v14, 37));
      unint64_t v28 = v22 + *(void *)(a1 + 32) + v21;
      *(void *)(a1 + 64) = v22;
      *(void *)(a1 + 72) = v18;
      *(void *)(a1 + 80) = v27;
      *(void *)(a1 + 88) = v26 + v24;
      *(void *)(a1 + 96) = __ROR8__(v26, 44) + v23 + __ROR8__(v23 + v12 + v24 + v27, 21);
      *(void *)(a1 + 104) = v17 + v15 + v28 + v16;
      *(void *)(a1 + 112) = __ROR8__(v18 + v25 + v16 + v28, 21) + v28 + __ROR8__(v17 + v15 + v28, 44);
      uint64_t v9 = 64LL;
    }

    *a2 = v9;
    if (a1 + 4 - v8 <= a4)
    {
      memcpy((void *)a1, (char *)&__src + v8, 4 - v8);
      a1 += 4 - v8;
    }
  }

  return (_DWORD *)a1;
}

void swift::ConcurrentReadableHashMap<swift::HashMapElementWrapper<anonymous namespace'::TupleCacheEntry>,swift::Mutex>::find<anonymous namespace'::TupleCacheEntry::Key>( uint64_t a1, char a2)
{
  uint64_t v3 = *(const char **)(a1 + 16);
  unint64_t v6 = __swift::__runtime::llvm::hashing::detail::hash_combine_range_impl<swift::TargetMetadata<swift::InProcess> const* const>( *(void **)(a1 + 8),  *(void *)(a1 + 8) + 8LL * *(void *)a1);
  v5[0] = v3;
  if (v3) {
    size_t v4 = strlen(v3);
  }
  else {
    size_t v4 = 0LL;
  }
  v5[1] = v4;
  __swift::__runtime::llvm::hash_combine<__swift::__runtime::llvm::hash_code,__swift::__runtime::llvm::StringRef>( &v6,  (uint64_t)v5);
  __asm { BR              X8 }

uint64_t sub_18176B8D4()
{
  uint64_t v5 = (v2 >> (4 * v4)) & 0xF;
  if (!(_DWORD)v5) {
    return 0LL;
  }
  unint64_t v6 = (v5 - 1);
  if (v6 >= v1) {
    goto LABEL_14;
  }
  uint64_t v7 = *(void *)(v0 + 8 * v6);
  uint64_t v8 = *v3;
  if (*v3 != *(void *)(v7 + 120)) {
    goto LABEL_14;
  }
  if (v8)
  {
    uint64_t v9 = 0LL;
    while (*(void *)(v3[1] + 8 * v9) == *(void *)(v7 + 136 + 16LL * v9))
    {
      if (v8 == ++v9) {
        goto LABEL_8;
      }
    }

unint64_t __swift::__runtime::llvm::hash_combine<__swift::__runtime::llvm::hash_code,__swift::__runtime::llvm::StringRef>( void *a1, uint64_t a2)
{
  uint64_t v14 = 0LL;
  memset(v13, 0, sizeof(v13));
  memset(v12, 0, sizeof(v12));
  if ((v2 & 1) == 0)
  {
    uint64_t v11 = a1;
    uint64_t v7 = a2;
    a2 = v7;
    int v9 = v8;
    a1 = v11;
    if (v9)
    {
      unint64_t v10 = __swift::__runtime::llvm::hashing::detail::fixed_seed_override;
      if (!__swift::__runtime::llvm::hashing::detail::fixed_seed_override) {
        unint64_t v10 = 0xFF51AFD7ED558CCDLL;
      }
      __swift::__runtime::llvm::hashing::detail::get_execution_seed(void)::seed = v10;
      a1 = v11;
      a2 = v7;
    }
  }

  uint64_t v3 = *a1;
  uint64_t v15 = __swift::__runtime::llvm::hashing::detail::get_execution_seed(void)::seed;
  *(void *)&v12[0] = v3;
  uint64_t v16 = 0LL;
  unint64_t v4 = __swift::__runtime::llvm::hash_value(*(void **)a2, *(void *)(a2 + 8));
  uint64_t v5 = (char *)__swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>( (uint64_t)v12,  &v16,  (void *)v12 + 1,  (unint64_t)v13,  v4);
  return __swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper::combine( (__swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper *)v12,  v16,  v5,  (char *)v13);
}

unint64_t __swift::__runtime::llvm::hashing::detail::hash_combine_range_impl<swift::TargetMetadata<swift::InProcess> const* const>( void *a1, uint64_t a2)
{
  uint64_t v2 = a2;
  unint64_t v4 = &unk_18C471000;
  if ((v3 & 1) == 0)
  {
    uint64_t v70 = a1;
    unint64_t v4 = &unk_18C471000;
    int v67 = v66;
    uint64_t v2 = a2;
    a1 = v70;
    if (v67)
    {
      unint64_t v68 = __swift::__runtime::llvm::hashing::detail::fixed_seed_override;
      if (!__swift::__runtime::llvm::hashing::detail::fixed_seed_override) {
        unint64_t v68 = 0xFF51AFD7ED558CCDLL;
      }
      __swift::__runtime::llvm::hashing::detail::get_execution_seed(void)::seed = v68;
      unint64_t v4 = (void *)&unk_18C471000;
      uint64_t v2 = a2;
      a1 = v70;
    }
  }

  unint64_t v5 = v4[136];
  unint64_t v6 = v2 - (void)a1;
  if ((unint64_t)(v2 - (void)a1) <= 0x40) {
    return __swift::__runtime::llvm::hashing::detail::hash_short( (__swift::__runtime::llvm::hashing::detail *)a1,  v6,  v5);
  }
  unint64_t v8 = 0x9DDFEA08EB382D69LL
     * ((0x9DDFEA08EB382D69LL * (v5 ^ 0xB492B66FBE98F273LL)) ^ ((0x9DDFEA08EB382D69LL * (v5 ^ 0xB492B66FBE98F273LL)) >> 47) ^ 0xB492B66FBE98F273LL);
  uint64_t v9 = __ROR8__(v5 ^ 0xB492B66FBE98F273LL, 49);
  unint64_t v10 = v5 ^ (v5 >> 47);
  unint64_t v11 = v5 ^ (((0x9DDFEA08EB382D69LL * (v10 ^ (0xB492B66FBE98F273LL * v5))) ^ v5) >> 47) ^ (0x9DDFEA08EB382D69LL
                                                                                          * (v10 ^ (0xB492B66FBE98F273LL
                                                                                                  * v5)));
  uint64_t v12 = a1[1];
  uint64_t v13 = a1[6];
  uint64_t v14 = a1[7];
  uint64_t v15 = v9 + v5 + v12;
  uint64_t v16 = a1[5];
  unint64_t v17 = v16 + v9 - 0x4B6D499041670D8DLL * __ROR8__(v13 + v5 - 0x4B6D499041670D8DLL * v5, 42);
  unint64_t v18 = v10 - 0x622015F714C7D297LL * (v8 ^ (v8 >> 47));
  uint64_t v19 = *a1 - 0x6D8ED9027DD26057LL * v5;
  uint64_t v20 = a1[2];
  uint64_t v21 = a1[3];
  uint64_t v22 = v19 + v12 + v20;
  unint64_t v23 = 0x9DDFEA08EB382D69LL * ((0x9DDFEA08EB382D69LL * v11) ^ ((0x9DDFEA08EB382D69LL * v11) >> 47));
  uint64_t v24 = __ROR8__(v18, 33);
  unint64_t v25 = (0xB492B66FBE98F273LL * __ROR8__(v15, 37)) ^ v23;
  uint64_t v26 = __ROR8__(v22, 44) + v19 + __ROR8__(v25 + v10 + v19 + v21, 21);
  unint64_t v27 = 0xB492B66FBE98F273LL * v24;
  uint64_t v28 = v22 + v21;
  uint64_t v29 = v23 + a1[4] - 0x4B6D499041670D8DLL * v24;
  uint64_t v30 = __ROR8__(v17 + v20 + v14 + v29, 21) + v29 + __ROR8__(v16 + v13 + v29, 44);
  uint64_t v31 = v16 + v13 + v29 + v14;
  unint64_t v32 = (v6 & 0xFFFFFFFFFFFFFFC0LL) - 64;
  if ((v6 & 0xFFFFFFFFFFFFFFC0LL) == 0x40)
  {
    unint64_t v33 = v25;
  }

  else
  {
    __int128 v34 = a1 + 15;
    do
    {
      uint64_t v35 = *(v34 - 6);
      uint64_t v36 = __ROR8__(v17 + v28 + v27 + v35, 37);
      uint64_t v38 = *(v34 - 2);
      uint64_t v37 = *(v34 - 1);
      unint64_t v17 = v38 + v28 - 0x4B6D499041670D8DLL * __ROR8__(v17 + v26 + v37, 42);
      uint64_t v39 = v25 + v31;
      uint64_t v40 = *(v34 - 7) - 0x4B6D499041670D8DLL * v26;
      uint64_t v41 = *(v34 - 4);
      uint64_t v42 = *(v34 - 5);
      uint64_t v43 = v40 + v35 + v42;
      unint64_t v33 = (0xB492B66FBE98F273LL * v36) ^ v30;
      unint64_t v27 = 0xB492B66FBE98F273LL * __ROR8__(v39, 33);
      uint64_t v26 = __ROR8__(v43, 44) + v40 + __ROR8__(v33 + v31 + v40 + v41, 21);
      uint64_t v28 = v43 + v41;
      unint64_t v44 = v27 + v30 + *(v34 - 3);
      uint64_t v45 = *v34;
      v34 += 8;
      uint64_t v46 = __ROR8__(v17 + v42 + v44 + v45, 21);
      unint64_t v47 = v38 + v37 + v44;
      uint64_t v30 = v46 + v44 + __ROR8__(v47, 44);
      uint64_t v31 = v47 + v45;
      unint64_t v25 = v33;
      v32 -= 64LL;
    }

    while (v32);
  }

  if ((v6 & 0x3F) != 0)
  {
    uint64_t v48 = *(void *)(v2 - 56);
    uint64_t v49 = *(void *)(v2 - 16);
    uint64_t v50 = *(void *)(v2 - 8);
    uint64_t v51 = v33 + v31;
    unint64_t v52 = (0xB492B66FBE98F273LL * __ROR8__(v17 + v28 + v27 + v48, 37)) ^ v30;
    uint64_t v54 = *(void *)(v2 - 32);
    uint64_t v53 = *(void *)(v2 - 24);
    unint64_t v17 = v53 + v28 - 0x4B6D499041670D8DLL * __ROR8__(v17 + v26 + v49, 42);
    uint64_t v55 = v52 + v31;
    uint64_t v56 = *(void *)(v2 - 64) - 0x4B6D499041670D8DLL * v26;
    uint64_t v59 = v2 - 48;
    uint64_t v57 = *(void *)(v2 - 48);
    uint64_t v58 = *(void *)(v59 + 8);
    uint64_t v60 = v56 + v48 + v57;
    unint64_t v27 = 0xB492B66FBE98F273LL * __ROR8__(v51, 33);
    uint64_t v26 = __ROR8__(v60, 44) + v56 + __ROR8__(v55 + v56 + v58, 21);
    uint64_t v28 = v60 + v58;
    unint64_t v61 = v27 + v30 + v54;
    unint64_t v62 = v53 + v49 + v61;
    uint64_t v30 = __ROR8__(v17 + v57 + v61 + v50, 21) + v61 + __ROR8__(v62, 44);
    uint64_t v31 = v62 + v50;
    unint64_t v33 = v52;
  }

  unint64_t v63 = 0x9DDFEA08EB382D69LL
      * (v30 ^ ((0x9DDFEA08EB382D69LL * (v26 ^ v30)) >> 47) ^ (0x9DDFEA08EB382D69LL * (v26 ^ v30)));
  uint64_t v64 = v27 - 0x4B6D499041670D8DLL * (v6 ^ (v6 >> 47)) - 0x622015F714C7D297LL * (v63 ^ (v63 >> 47));
  unint64_t v65 = 0x9DDFEA08EB382D69LL
      * ((v33
        - 0x4B6D499041670D8DLL * (v17 ^ (v17 >> 47))
        - 0x622015F714C7D297LL
        * ((0x9DDFEA08EB382D69LL
          * (v31 ^ ((0x9DDFEA08EB382D69LL * (v28 ^ v31)) >> 47) ^ (0x9DDFEA08EB382D69LL * (v28 ^ v31)))) ^ ((0x9DDFEA08EB382D69LL * (v31 ^ ((0x9DDFEA08EB382D69LL * (v28 ^ v31)) >> 47) ^ (0x9DDFEA08EB382D69LL * (v28 ^ v31)))) >> 47))) ^ v64);
  return 0x9DDFEA08EB382D69LL
       * ((0x9DDFEA08EB382D69LL * (v64 ^ (v65 >> 47) ^ v65)) ^ ((0x9DDFEA08EB382D69LL * (v64 ^ (v65 >> 47) ^ v65)) >> 47));
}

unint64_t *swift::MetadataCacheEntryBase<anonymous namespace'::TupleCacheEntry,swift::TargetTupleTypeMetadata<swift::InProcess>::Element>::awaitSatisfyingState( unint64_t *a1, const char *a2)
{
  char v4 = atomic_load(a1);
  unsigned int v5 = v4 & 7;
  if (v5 - 1 >= 3)
  {
    if (v5 == 4) {
      return a1 + 14;
    }
    if ((v4 & 7) != 0) {
      goto LABEL_55;
    }
    uint64_t v7 = (unsigned __int16)a2 & 0x100;
  }

  else
  {
    if (a2 > 0x3Eu)
    {
      if (v5 > 1) {
        goto LABEL_15;
      }
    }

    else if ((_BYTE)a2)
    {
      if (v5 > 2) {
        return a1 + 14;
      }
    }

    uint64_t v7 = (unsigned __int16)a2 & 0x100;
    if ((v4 & 8) != 0 && ((unsigned __int16)a2 & 0x100) != 0)
    {
LABEL_15:
      if (v5 - 1 < 3) {
        return a1 + 14;
      }
      goto LABEL_55;
    }
  }

  unint64_t v8 = 0LL;
  uint64_t v22 = &unk_18C476AB0;
  unint64_t v23 = 0LL;
  __int16 v24 = 0;
  int v9 = a2;
  while (1)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&unk_18C476AB0);
    if (v8)
    {
      if (*v8 == 1LL)
      {
        unint64_t v10 = (void *)v8[2];
        void v8[2] = 0LL;
        if (v10) {
          operator delete(v10);
        }
        swift_slowDealloc(v8);
      }

      else
      {
        --*v8;
      }
    }

    unint64_t v11 = *a1;
    uint64_t v12 = *a1 & 7;
    if ((v12 - 1) >= 3)
    {
      if (!(_DWORD)v12) {
        goto LABEL_19;
      }
      if ((_DWORD)v12 != 4) {
        goto LABEL_55;
      }
LABEL_46:
      os_unfair_lock_unlock((os_unfair_lock_t)&unk_18C476AB0);
      goto LABEL_49;
    }

    if (v9 > 62)
    {
      if (v9 == 63)
      {
        goto LABEL_34;
      }

      if (v9 != 255) {
        goto LABEL_55;
      }
LABEL_48:
      os_unfair_lock_unlock((os_unfair_lock_t)&unk_18C476AB0);
      if ((v12 - 1) >= 3) {
LABEL_55:
      }
        abort();
LABEL_49:
      unint64_t v6 = (uint64_t *)(a1 + 14);
      goto LABEL_50;
    }

    if (v9)
    {
      if (v9 != 1) {
        goto LABEL_55;
      }
    }

uint64_t *swift::MetadataCacheEntryBase<anonymous namespace'::TupleCacheEntry,swift::TargetTupleTypeMetadata<swift::InProcess>::Element>::doInitialization( uint64_t a1, unint64_t a2, const char *a3, char *a4)
{
  unint64_t v6 = (uint64_t *)(a1 + 112);
  uint64_t v7 = (uint64_t *)(a1 + 136);
  uint64_t v65 = a1 + 16;
  uint64_t v66 = *(void *)(a2 + 8);
  uint64_t v67 = a3;
  __int16 v68 = (__int16)a3;
  unint64_t v63 = (unint64_t *)(a1 + 144);
  uint64_t v64 = (uint64_t *)(a1 + 112);
  int v8 = a3;
  int v69 = a3;
LABEL_6:
  unsigned int v9 = *(unsigned __int8 *)(a2 + 17);
  if (v9 == 3) {
    goto LABEL_67;
  }
  uint64_t v10 = *(void *)(a1 + 120);
  if (v10)
  {
    uint64_t v11 = 0LL;
    uint64_t v12 = 0LL;
    char v13 = 1;
    do
    {
      uint64_t v14 = v7[2 * v12];
      uint64_t v71 = 319LL;
      performOnMetadataCache<swift::MetadataResponse,swift_checkMetadataState::CheckStateCallbacks>(v14, &v71);
      if (a2)
      {
        if (a2 > 0x3F)
        {
          unsigned __int8 v32 = 1;
          uint64_t v70 = 63LL;
          uint64_t v11 = v14;
          unint64_t v6 = v64;
          int v8 = v69;
          *(_BYTE *)(a2 + 17) = 1;
          if (!v14) {
            goto LABEL_109;
          }
LABEL_71:
          if (v32 - 1 >= 3)
          {
            if (v32 == 4) {
              goto LABEL_118;
            }
            goto LABEL_127;
          }

void *tuple_initializeBufferWithCopyOfBuffer<true,true>(void *a1, const void *a2, uint64_t a3)
{
  return memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
}

void *tuple_initializeWithCopy<true,true>(void *a1, const void *a2, uint64_t a3)
{
  return memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
}

void *tuple_assignWithCopy<true,true>(void *a1, const void *a2, uint64_t a3)
{
  return memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
}

void *tuple_initializeWithTake<true,true>(void *a1, const void *a2, uint64_t a3)
{
  return memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
}

void *tuple_assignWithTake<true,true>(void *a1, const void *a2, uint64_t a3)
{
  return memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
}

uint64_t tuple_getEnumTagSinglePayload<true,true>(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_11;
  }
  unint64_t v7 = *(void *)(v4 + 64);
  if (v7 > 3) {
    goto LABEL_5;
  }
  unsigned int v8 = ((v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
  if (v8 < 2) {
    goto LABEL_11;
  }
  if (v8 >= 0x100)
  {
    if (v8 >= 0x10000) {
      int v9 = *(_DWORD *)&a1[v7];
    }
    else {
      int v9 = *(unsigned __int16 *)&a1[v7];
    }
  }

  else
  {
LABEL_5:
    int v9 = a1[v7];
  }

  if (!v9)
  {
LABEL_11:
    if (!v5) {
      return 0LL;
    }
    uint64_t v12 = a3 + 16LL * *(unsigned int *)(a3 - 104);
    return (*(uint64_t (**)(unsigned __int8 *))(*(void *)(*(void *)(v12 + 24) - 8LL) + 48LL))(&a1[*(void *)(v12 + 32)]);
  }

  int v10 = (v9 - 1) << (8 * v7);
  if (v7 > 3) {
    int v10 = 0;
  }
  int v11 = 0;
  switch(v7)
  {
    case 0uLL:
      return v5 + (v11 | v10) + 1;
    case 1uLL:
      int v11 = *a1;
      break;
    case 2uLL:
      int v11 = *(unsigned __int16 *)a1;
      break;
    case 3uLL:
      int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
      break;
    default:
      int v11 = *(_DWORD *)a1;
      break;
  }

  return v5 + (v11 | v10) + 1;
}

void tuple_storeEnumTagSinglePayload<true,true>(_BYTE *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 - 8);
  unint64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = *(unsigned int *)(v7 + 84);
  int v10 = &a1[v8];
  if (a3 <= v9)
  {
    if (v9 >= a2)
    {
LABEL_39:
      if ((_DWORD)a2)
      {
LABEL_40:
        uint64_t v17 = a4 + 16LL * *(unsigned int *)(a4 - 104);
        (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(*(void *)(v17 + 24) - 8LL) + 56LL))( &a1[*(void *)(v17 + 32)],  a2,  v9);
      }

      return;
    }

    unsigned int v14 = 0;
LABEL_10:
    unsigned int v15 = ~(_DWORD)v9 + a2;
    if (v8 > 3)
    {
      int v16 = 1;
      goto LABEL_15;
    }

    char v11 = 8 * v8;
    int v12 = ~(-1 << (8 * v8));
LABEL_13:
    int v16 = (v15 >> v11) + 1;
    if (!v8)
    {
LABEL_21:
      switch(v14)
      {
        case 0u:
          return;
        case 1u:
          *int v10 = v16;
          break;
        case 2u:
          *(_WORD *)int v10 = v16;
          break;
        case 3u:
          *(_WORD *)int v10 = v16;
          v10[2] = BYTE2(v16);
          break;
        case 4u:
          *(_DWORD *)int v10 = v16;
          break;
        default:
          *(_DWORD *)int v10 = v16;
          bzero(v10 + 4, v14 - 4LL);
          break;
      }

      return;
    }

    v15 &= v12;
LABEL_15:
    switch(v8)
    {
      case 1uLL:
        *a1 = v15;
        break;
      case 2uLL:
        *(_WORD *)a1 = v15;
        break;
      case 3uLL:
        *(_WORD *)a1 = v15;
        a1[2] = BYTE2(v15);
        break;
      case 4uLL:
        *(_DWORD *)a1 = v15;
        break;
      default:
        *(_DWORD *)a1 = v15;
        bzero(a1 + 4, v8 - 4);
        break;
    }

    goto LABEL_21;
  }

  if (v8 > 3) {
    goto LABEL_9;
  }
  char v11 = 8 * v8;
  int v12 = ~(-1 << (8 * v8));
  unsigned int v13 = ((a3 - v9 + v12) >> (8 * v8)) + 1;
  if (v13 < 2)
  {
    if (v9 < a2)
    {
      unsigned int v14 = 0;
      unsigned int v15 = ~(_DWORD)v9 + a2;
      goto LABEL_13;
    }

    goto LABEL_39;
  }

  if (v13 >= 0x100)
  {
    if (v13 >= 0x10000) {
      unsigned int v14 = 4;
    }
    else {
      unsigned int v14 = 2;
    }
  }

  else
  {
LABEL_9:
    unsigned int v14 = 1;
  }

  switch(v14)
  {
    case 1u:
      *int v10 = 0;
      if ((_DWORD)a2) {
        goto LABEL_40;
      }
      break;
    case 2u:
      *(_WORD *)int v10 = 0;
      if ((_DWORD)a2) {
        goto LABEL_40;
      }
      break;
    case 3u:
      v10[2] = 0;
      *(_WORD *)int v10 = 0;
      goto LABEL_39;
    case 4u:
      *(_DWORD *)int v10 = 0;
      if ((_DWORD)a2) {
        goto LABEL_40;
      }
      break;
    default:
      *(_DWORD *)int v10 = 0;
      bzero(v10 + 4, v14 - 4LL);
      if ((_DWORD)a2) {
        goto LABEL_40;
      }
      break;
  }

uint64_t tuple_initializeBufferWithCopyOfBuffer<false,true>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 8);
  if (v4)
  {
    uint64_t v6 = 0LL;
    uint64_t v7 = a3 + 24;
    do
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v7 + 16LL * v6) - 8LL) + 16LL))( a1 + *(void *)(v7 + 16LL * v6 + 8),  a2 + *(void *)(v7 + 16LL * v6 + 8));
      ++v6;
    }

    while (v4 != v6);
  }

  return a1;
}

uint64_t tuple_destroy<false,true>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (v2)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)(a2 + 32);
    do
    {
      unint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(*(v4 - 1) - 8LL) + 8LL))(v3 + *v4);
      v4 += 2;
      --v2;
    }

    while (v2);
  }

  return result;
}

uint64_t tuple_initializeWithCopy<false,true>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 8);
  if (v4)
  {
    uint64_t v6 = 0LL;
    uint64_t v7 = a3 + 24;
    do
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v7 + 16LL * v6) - 8LL) + 16LL))( a1 + *(void *)(v7 + 16LL * v6 + 8),  a2 + *(void *)(v7 + 16LL * v6 + 8));
      ++v6;
    }

    while (v4 != v6);
  }

  return a1;
}

uint64_t tuple_assignWithCopy<false,true>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 8);
  if (v4)
  {
    uint64_t v6 = 0LL;
    uint64_t v7 = a3 + 24;
    do
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v7 + 16LL * v6) - 8LL) + 24LL))( a1 + *(void *)(v7 + 16LL * v6 + 8),  a2 + *(void *)(v7 + 16LL * v6 + 8));
      ++v6;
    }

    while (v4 != v6);
  }

  return a1;
}

uint64_t tuple_initializeWithTake<false,true>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 8);
  if (v4)
  {
    uint64_t v6 = 0LL;
    uint64_t v7 = a3 + 24;
    do
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v7 + 16LL * v6) - 8LL) + 32LL))( a1 + *(void *)(v7 + 16LL * v6 + 8),  a2 + *(void *)(v7 + 16LL * v6 + 8));
      ++v6;
    }

    while (v4 != v6);
  }

  return a1;
}

uint64_t tuple_assignWithTake<false,true>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 8);
  if (v4)
  {
    uint64_t v6 = 0LL;
    uint64_t v7 = a3 + 24;
    do
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v7 + 16LL * v6) - 8LL) + 40LL))( a1 + *(void *)(v7 + 16LL * v6 + 8),  a2 + *(void *)(v7 + 16LL * v6 + 8));
      ++v6;
    }

    while (v4 != v6);
  }

  return a1;
}

uint64_t tuple_getEnumTagSinglePayload<false,true>(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_11;
  }
  unint64_t v7 = *(void *)(v4 + 64);
  if (v7 > 3) {
    goto LABEL_5;
  }
  unsigned int v8 = ((v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
  if (v8 < 2) {
    goto LABEL_11;
  }
  if (v8 >= 0x100)
  {
    if (v8 >= 0x10000) {
      int v9 = *(_DWORD *)&a1[v7];
    }
    else {
      int v9 = *(unsigned __int16 *)&a1[v7];
    }
  }

  else
  {
LABEL_5:
    int v9 = a1[v7];
  }

  if (!v9)
  {
LABEL_11:
    if (!v5) {
      return 0LL;
    }
    uint64_t v12 = a3 + 16LL * *(unsigned int *)(a3 - 104);
    return (*(uint64_t (**)(unsigned __int8 *))(*(void *)(*(void *)(v12 + 24) - 8LL) + 48LL))(&a1[*(void *)(v12 + 32)]);
  }

  int v10 = (v9 - 1) << (8 * v7);
  if (v7 > 3) {
    int v10 = 0;
  }
  int v11 = 0;
  switch(v7)
  {
    case 0uLL:
      return v5 + (v11 | v10) + 1;
    case 1uLL:
      int v11 = *a1;
      break;
    case 2uLL:
      int v11 = *(unsigned __int16 *)a1;
      break;
    case 3uLL:
      int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
      break;
    default:
      int v11 = *(_DWORD *)a1;
      break;
  }

  return v5 + (v11 | v10) + 1;
}

void tuple_storeEnumTagSinglePayload<false,true>(_BYTE *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 - 8);
  unint64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = *(unsigned int *)(v7 + 84);
  int v10 = &a1[v8];
  if (a3 <= v9)
  {
    if (v9 >= a2)
    {
LABEL_39:
      if ((_DWORD)a2)
      {
LABEL_40:
        uint64_t v17 = a4 + 16LL * *(unsigned int *)(a4 - 104);
        (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(*(void *)(v17 + 24) - 8LL) + 56LL))( &a1[*(void *)(v17 + 32)],  a2,  v9);
      }

      return;
    }

    unsigned int v14 = 0;
LABEL_10:
    unsigned int v15 = ~(_DWORD)v9 + a2;
    if (v8 > 3)
    {
      int v16 = 1;
      goto LABEL_15;
    }

    char v11 = 8 * v8;
    int v12 = ~(-1 << (8 * v8));
LABEL_13:
    int v16 = (v15 >> v11) + 1;
    if (!v8)
    {
LABEL_21:
      switch(v14)
      {
        case 0u:
          return;
        case 1u:
          *int v10 = v16;
          break;
        case 2u:
          *(_WORD *)int v10 = v16;
          break;
        case 3u:
          *(_WORD *)int v10 = v16;
          v10[2] = BYTE2(v16);
          break;
        case 4u:
          *(_DWORD *)int v10 = v16;
          break;
        default:
          *(_DWORD *)int v10 = v16;
          bzero(v10 + 4, v14 - 4LL);
          break;
      }

      return;
    }

    v15 &= v12;
LABEL_15:
    switch(v8)
    {
      case 1uLL:
        *a1 = v15;
        break;
      case 2uLL:
        *(_WORD *)a1 = v15;
        break;
      case 3uLL:
        *(_WORD *)a1 = v15;
        a1[2] = BYTE2(v15);
        break;
      case 4uLL:
        *(_DWORD *)a1 = v15;
        break;
      default:
        *(_DWORD *)a1 = v15;
        bzero(a1 + 4, v8 - 4);
        break;
    }

    goto LABEL_21;
  }

  if (v8 > 3) {
    goto LABEL_9;
  }
  char v11 = 8 * v8;
  int v12 = ~(-1 << (8 * v8));
  unsigned int v13 = ((a3 - v9 + v12) >> (8 * v8)) + 1;
  if (v13 < 2)
  {
    if (v9 < a2)
    {
      unsigned int v14 = 0;
      unsigned int v15 = ~(_DWORD)v9 + a2;
      goto LABEL_13;
    }

    goto LABEL_39;
  }

  if (v13 >= 0x100)
  {
    if (v13 >= 0x10000) {
      unsigned int v14 = 4;
    }
    else {
      unsigned int v14 = 2;
    }
  }

  else
  {
LABEL_9:
    unsigned int v14 = 1;
  }

  switch(v14)
  {
    case 1u:
      *int v10 = 0;
      if ((_DWORD)a2) {
        goto LABEL_40;
      }
      break;
    case 2u:
      *(_WORD *)int v10 = 0;
      if ((_DWORD)a2) {
        goto LABEL_40;
      }
      break;
    case 3u:
      v10[2] = 0;
      *(_WORD *)int v10 = 0;
      goto LABEL_39;
    case 4u:
      *(_DWORD *)int v10 = 0;
      if ((_DWORD)a2) {
        goto LABEL_40;
      }
      break;
    default:
      *(_DWORD *)int v10 = 0;
      bzero(v10 + 4, v14 - 4LL);
      if ((_DWORD)a2) {
        goto LABEL_40;
      }
      break;
  }

uint64_t tuple_initializeBufferWithCopyOfBuffer<true,false>( unint64_t **a1, unint64_t **a2, uint64_t a3, char *a4)
{
  unsigned int v6 = *a2;
  *a1 = *a2;
  swift_retain(v6, (uint64_t)a2, a3, a4);
  uint64_t v7 = *(unsigned __int8 *)(*(void *)(a3 - 8) + 80LL);
  return (uint64_t)*a1 + ((v7 + 16) & ~v7);
}

void *tuple_initializeWithCopy<true,false>(void *a1, const void *a2, uint64_t a3)
{
  return memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
}

void *tuple_assignWithCopy<true,false>(void *a1, const void *a2, uint64_t a3)
{
  return memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
}

void *tuple_initializeWithTake<true,false>(void *a1, const void *a2, uint64_t a3)
{
  return memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
}

void *tuple_assignWithTake<true,false>(void *a1, const void *a2, uint64_t a3)
{
  return memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
}

uint64_t tuple_getEnumTagSinglePayload<true,false>(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_11;
  }
  unint64_t v7 = *(void *)(v4 + 64);
  if (v7 > 3) {
    goto LABEL_5;
  }
  unsigned int v8 = ((v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
  if (v8 < 2) {
    goto LABEL_11;
  }
  if (v8 >= 0x100)
  {
    if (v8 >= 0x10000) {
      int v9 = *(_DWORD *)&a1[v7];
    }
    else {
      int v9 = *(unsigned __int16 *)&a1[v7];
    }
  }

  else
  {
LABEL_5:
    int v9 = a1[v7];
  }

  if (!v9)
  {
LABEL_11:
    if (!v5) {
      return 0LL;
    }
    uint64_t v12 = a3 + 16LL * *(unsigned int *)(a3 - 104);
    return (*(uint64_t (**)(unsigned __int8 *))(*(void *)(*(void *)(v12 + 24) - 8LL) + 48LL))(&a1[*(void *)(v12 + 32)]);
  }

  int v10 = (v9 - 1) << (8 * v7);
  if (v7 > 3) {
    int v10 = 0;
  }
  int v11 = 0;
  switch(v7)
  {
    case 0uLL:
      return v5 + (v11 | v10) + 1;
    case 1uLL:
      int v11 = *a1;
      break;
    case 2uLL:
      int v11 = *(unsigned __int16 *)a1;
      break;
    case 3uLL:
      int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
      break;
    default:
      int v11 = *(_DWORD *)a1;
      break;
  }

  return v5 + (v11 | v10) + 1;
}

void tuple_storeEnumTagSinglePayload<true,false>(_BYTE *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 - 8);
  unint64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = *(unsigned int *)(v7 + 84);
  int v10 = &a1[v8];
  if (a3 <= v9)
  {
    if (v9 >= a2)
    {
LABEL_39:
      if ((_DWORD)a2)
      {
LABEL_40:
        uint64_t v17 = a4 + 16LL * *(unsigned int *)(a4 - 104);
        (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(*(void *)(v17 + 24) - 8LL) + 56LL))( &a1[*(void *)(v17 + 32)],  a2,  v9);
      }

      return;
    }

    unsigned int v14 = 0;
LABEL_10:
    unsigned int v15 = ~(_DWORD)v9 + a2;
    if (v8 > 3)
    {
      int v16 = 1;
      goto LABEL_15;
    }

    char v11 = 8 * v8;
    int v12 = ~(-1 << (8 * v8));
LABEL_13:
    int v16 = (v15 >> v11) + 1;
    if (!v8)
    {
LABEL_21:
      switch(v14)
      {
        case 0u:
          return;
        case 1u:
          *int v10 = v16;
          break;
        case 2u:
          *(_WORD *)int v10 = v16;
          break;
        case 3u:
          *(_WORD *)int v10 = v16;
          v10[2] = BYTE2(v16);
          break;
        case 4u:
          *(_DWORD *)int v10 = v16;
          break;
        default:
          *(_DWORD *)int v10 = v16;
          bzero(v10 + 4, v14 - 4LL);
          break;
      }

      return;
    }

    v15 &= v12;
LABEL_15:
    switch(v8)
    {
      case 1uLL:
        *a1 = v15;
        break;
      case 2uLL:
        *(_WORD *)a1 = v15;
        break;
      case 3uLL:
        *(_WORD *)a1 = v15;
        a1[2] = BYTE2(v15);
        break;
      case 4uLL:
        *(_DWORD *)a1 = v15;
        break;
      default:
        *(_DWORD *)a1 = v15;
        bzero(a1 + 4, v8 - 4);
        break;
    }

    goto LABEL_21;
  }

  if (v8 > 3) {
    goto LABEL_9;
  }
  char v11 = 8 * v8;
  int v12 = ~(-1 << (8 * v8));
  unsigned int v13 = ((a3 - v9 + v12) >> (8 * v8)) + 1;
  if (v13 < 2)
  {
    if (v9 < a2)
    {
      unsigned int v14 = 0;
      unsigned int v15 = ~(_DWORD)v9 + a2;
      goto LABEL_13;
    }

    goto LABEL_39;
  }

  if (v13 >= 0x100)
  {
    if (v13 >= 0x10000) {
      unsigned int v14 = 4;
    }
    else {
      unsigned int v14 = 2;
    }
  }

  else
  {
LABEL_9:
    unsigned int v14 = 1;
  }

  switch(v14)
  {
    case 1u:
      *int v10 = 0;
      if ((_DWORD)a2) {
        goto LABEL_40;
      }
      break;
    case 2u:
      *(_WORD *)int v10 = 0;
      if ((_DWORD)a2) {
        goto LABEL_40;
      }
      break;
    case 3u:
      v10[2] = 0;
      *(_WORD *)int v10 = 0;
      goto LABEL_39;
    case 4u:
      *(_DWORD *)int v10 = 0;
      if ((_DWORD)a2) {
        goto LABEL_40;
      }
      break;
    default:
      *(_DWORD *)int v10 = 0;
      bzero(v10 + 4, v14 - 4LL);
      if ((_DWORD)a2) {
        goto LABEL_40;
      }
      break;
  }

uint64_t tuple_initializeBufferWithCopyOfBuffer<false,false>( unint64_t **a1, unint64_t **a2, uint64_t a3, char *a4)
{
  unsigned int v6 = *a2;
  *a1 = *a2;
  swift_retain(v6, (uint64_t)a2, a3, a4);
  uint64_t v7 = *(unsigned __int8 *)(*(void *)(a3 - 8) + 80LL);
  return (uint64_t)*a1 + ((v7 + 16) & ~v7);
}

uint64_t tuple_destroy<false,false>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (v2)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)(a2 + 32);
    do
    {
      unint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(*(v4 - 1) - 8LL) + 8LL))(v3 + *v4);
      v4 += 2;
      --v2;
    }

    while (v2);
  }

  return result;
}

uint64_t tuple_initializeWithCopy<false,false>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 8);
  if (v4)
  {
    uint64_t v6 = 0LL;
    uint64_t v7 = a3 + 24;
    do
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v7 + 16LL * v6) - 8LL) + 16LL))( a1 + *(void *)(v7 + 16LL * v6 + 8),  a2 + *(void *)(v7 + 16LL * v6 + 8));
      ++v6;
    }

    while (v4 != v6);
  }

  return a1;
}

uint64_t tuple_assignWithCopy<false,false>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 8);
  if (v4)
  {
    uint64_t v6 = 0LL;
    uint64_t v7 = a3 + 24;
    do
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v7 + 16LL * v6) - 8LL) + 24LL))( a1 + *(void *)(v7 + 16LL * v6 + 8),  a2 + *(void *)(v7 + 16LL * v6 + 8));
      ++v6;
    }

    while (v4 != v6);
  }

  return a1;
}

uint64_t tuple_initializeWithTake<false,false>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 8);
  if (v4)
  {
    uint64_t v6 = 0LL;
    uint64_t v7 = a3 + 24;
    do
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v7 + 16LL * v6) - 8LL) + 32LL))( a1 + *(void *)(v7 + 16LL * v6 + 8),  a2 + *(void *)(v7 + 16LL * v6 + 8));
      ++v6;
    }

    while (v4 != v6);
  }

  return a1;
}

uint64_t tuple_assignWithTake<false,false>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 8);
  if (v4)
  {
    uint64_t v6 = 0LL;
    uint64_t v7 = a3 + 24;
    do
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v7 + 16LL * v6) - 8LL) + 40LL))( a1 + *(void *)(v7 + 16LL * v6 + 8),  a2 + *(void *)(v7 + 16LL * v6 + 8));
      ++v6;
    }

    while (v4 != v6);
  }

  return a1;
}

uint64_t tuple_getEnumTagSinglePayload<false,false>(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_11;
  }
  unint64_t v7 = *(void *)(v4 + 64);
  if (v7 > 3) {
    goto LABEL_5;
  }
  unsigned int v8 = ((v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
  if (v8 < 2) {
    goto LABEL_11;
  }
  if (v8 >= 0x100)
  {
    if (v8 >= 0x10000) {
      int v9 = *(_DWORD *)&a1[v7];
    }
    else {
      int v9 = *(unsigned __int16 *)&a1[v7];
    }
  }

  else
  {
LABEL_5:
    int v9 = a1[v7];
  }

  if (!v9)
  {
LABEL_11:
    if (!v5) {
      return 0LL;
    }
    uint64_t v12 = a3 + 16LL * *(unsigned int *)(a3 - 104);
    return (*(uint64_t (**)(unsigned __int8 *))(*(void *)(*(void *)(v12 + 24) - 8LL) + 48LL))(&a1[*(void *)(v12 + 32)]);
  }

  int v10 = (v9 - 1) << (8 * v7);
  if (v7 > 3) {
    int v10 = 0;
  }
  int v11 = 0;
  switch(v7)
  {
    case 0uLL:
      return v5 + (v11 | v10) + 1;
    case 1uLL:
      int v11 = *a1;
      break;
    case 2uLL:
      int v11 = *(unsigned __int16 *)a1;
      break;
    case 3uLL:
      int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
      break;
    default:
      int v11 = *(_DWORD *)a1;
      break;
  }

  return v5 + (v11 | v10) + 1;
}

void tuple_storeEnumTagSinglePayload<false,false>(_BYTE *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 - 8);
  unint64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = *(unsigned int *)(v7 + 84);
  int v10 = &a1[v8];
  if (a3 <= v9)
  {
    if (v9 >= a2)
    {
LABEL_39:
      if ((_DWORD)a2)
      {
LABEL_40:
        uint64_t v17 = a4 + 16LL * *(unsigned int *)(a4 - 104);
        (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(*(void *)(v17 + 24) - 8LL) + 56LL))( &a1[*(void *)(v17 + 32)],  a2,  v9);
      }

      return;
    }

    unsigned int v14 = 0;
LABEL_10:
    unsigned int v15 = ~(_DWORD)v9 + a2;
    if (v8 > 3)
    {
      int v16 = 1;
      goto LABEL_15;
    }

    char v11 = 8 * v8;
    int v12 = ~(-1 << (8 * v8));
LABEL_13:
    int v16 = (v15 >> v11) + 1;
    if (!v8)
    {
LABEL_21:
      switch(v14)
      {
        case 0u:
          return;
        case 1u:
          *int v10 = v16;
          break;
        case 2u:
          *(_WORD *)int v10 = v16;
          break;
        case 3u:
          *(_WORD *)int v10 = v16;
          v10[2] = BYTE2(v16);
          break;
        case 4u:
          *(_DWORD *)int v10 = v16;
          break;
        default:
          *(_DWORD *)int v10 = v16;
          bzero(v10 + 4, v14 - 4LL);
          break;
      }

      return;
    }

    v15 &= v12;
LABEL_15:
    switch(v8)
    {
      case 1uLL:
        *a1 = v15;
        break;
      case 2uLL:
        *(_WORD *)a1 = v15;
        break;
      case 3uLL:
        *(_WORD *)a1 = v15;
        a1[2] = BYTE2(v15);
        break;
      case 4uLL:
        *(_DWORD *)a1 = v15;
        break;
      default:
        *(_DWORD *)a1 = v15;
        bzero(a1 + 4, v8 - 4);
        break;
    }

    goto LABEL_21;
  }

  if (v8 > 3) {
    goto LABEL_9;
  }
  char v11 = 8 * v8;
  int v12 = ~(-1 << (8 * v8));
  unsigned int v13 = ((a3 - v9 + v12) >> (8 * v8)) + 1;
  if (v13 < 2)
  {
    if (v9 < a2)
    {
      unsigned int v14 = 0;
      unsigned int v15 = ~(_DWORD)v9 + a2;
      goto LABEL_13;
    }

    goto LABEL_39;
  }

  if (v13 >= 0x100)
  {
    if (v13 >= 0x10000) {
      unsigned int v14 = 4;
    }
    else {
      unsigned int v14 = 2;
    }
  }

  else
  {
LABEL_9:
    unsigned int v14 = 1;
  }

  switch(v14)
  {
    case 1u:
      *int v10 = 0;
      if ((_DWORD)a2) {
        goto LABEL_40;
      }
      break;
    case 2u:
      *(_WORD *)int v10 = 0;
      if ((_DWORD)a2) {
        goto LABEL_40;
      }
      break;
    case 3u:
      v10[2] = 0;
      *(_WORD *)int v10 = 0;
      goto LABEL_39;
    case 4u:
      *(_DWORD *)int v10 = 0;
      if ((_DWORD)a2) {
        goto LABEL_40;
      }
      break;
    default:
      *(_DWORD *)int v10 = 0;
      bzero(v10 + 4, v14 - 4LL);
      if ((_DWORD)a2) {
        goto LABEL_40;
      }
      break;
  }

void *std::__function::__func<getSuperclassMetadata::$_0,std::allocator<getSuperclassMetadata::$_0>,void const* ()(unsigned int,unsigned int)>::__clone( uint64_t a1)
{
  unint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *unint64_t result = off_189B8D5B0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<getSuperclassMetadata::$_0,std::allocator<getSuperclassMetadata::$_0>,void const* ()(unsigned int,unsigned int)>::__clone( uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_189B8D5B0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<getSuperclassMetadata::$_0,std::allocator<getSuperclassMetadata::$_0>,void const* ()(unsigned int,unsigned int)>::operator()( uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  return swift::SubstGenericParametersFromMetadata::getMetadata( *(swift::SubstGenericParametersFromMetadata **)(a1 + 8),  *a2,  *a3);
}

void *std::__function::__func<getSuperclassMetadata::$_1,std::allocator<getSuperclassMetadata::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone( uint64_t a1)
{
  unint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *unint64_t result = off_189B8D5F8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<getSuperclassMetadata::$_1,std::allocator<getSuperclassMetadata::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone( uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_189B8D5F8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<getSuperclassMetadata::$_1,std::allocator<getSuperclassMetadata::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::operator()( uint64_t a1, uint64_t *a2, int *a3)
{
  return swift::SubstGenericParametersFromMetadata::getWitnessTable(*(void *)(a1 + 8), *a2, *a3);
}

void swift::ConcurrentReadableHashMap<swift::HashMapElementWrapper<anonymous namespace'::MetatypeCacheEntry>,swift::LazyMutex>::find<swift::TargetMetadata<swift::InProcess> const*>( uint64_t a1, char a2)
{
  if ((v2 & 1) == 0)
  {
    char v5 = a2;
    a2 = v5;
    if (v3)
    {
      unint64_t v4 = __swift::__runtime::llvm::hashing::detail::fixed_seed_override;
      if (!__swift::__runtime::llvm::hashing::detail::fixed_seed_override) {
        unint64_t v4 = 0xFF51AFD7ED558CCDLL;
      }
      __swift::__runtime::llvm::hashing::detail::get_execution_seed(void)::seed = v4;
      a2 = v5;
    }
  }

  __asm { BR              X13 }

void swift::ConcurrentReadableHashMap<swift::HashMapElementWrapper<anonymous namespace'::ExistentialMetatypeCacheEntry>,swift::LazyMutex>::find<swift::TargetMetadata<swift::InProcess> const*>( uint64_t a1, char a2)
{
  if ((v2 & 1) == 0)
  {
    char v5 = a2;
    a2 = v5;
    if (v3)
    {
      unint64_t v4 = __swift::__runtime::llvm::hashing::detail::fixed_seed_override;
      if (!__swift::__runtime::llvm::hashing::detail::fixed_seed_override) {
        unint64_t v4 = 0xFF51AFD7ED558CCDLL;
      }
      __swift::__runtime::llvm::hashing::detail::get_execution_seed(void)::seed = v4;
      a2 = v5;
    }
  }

  __asm { BR              X13 }

uint64_t (**getExistentialMetatypeValueWitnesses(unsigned int a1))()
{
  if (a1 < 3) {
    return off_189B8D7E8[a1];
  }
  unsigned int v42 = a1;
  unint64_t v1 = atomic_load((unint64_t *)&qword_18C5758E0);
  if (!v1 || v42 != ((unint64_t)(*(void *)(v1 + 64) + 0x7FFFFFFF8LL) >> 3))
  {
    do
      unsigned int v2 = __ldaxr((unsigned int *)&ExistentialMetatypeValueWitnessTables);
    while (__stxr(v2 + 1, (unsigned int *)&ExistentialMetatypeValueWitnessTables));
    do
    {
      unint64_t v3 = atomic_load(&qword_18C5758C0);
      unint64_t v4 = atomic_load((unint64_t *)&qword_18C5758C8);
      unsigned int v5 = atomic_load((unsigned int *)&dword_18C5758BC);
      unint64_t v6 = atomic_load(&qword_18C5758C0);
    }

    while (v3 != v6);
    if (v3) {
      BOOL v7 = v4 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7 && v5 != 0)
    {
      if (v9)
      {
        qword_18C5758E0 = *v9;
        unint64_t v1 = *v9;
        do
          unsigned int v10 = __ldxr((unsigned int *)&ExistentialMetatypeValueWitnessTables);
        while (__stlxr(v10 - 1, (unsigned int *)&ExistentialMetatypeValueWitnessTables));
        return (uint64_t (**)())v1;
      }
    }

    do
      unsigned int v11 = __ldxr((unsigned int *)&ExistentialMetatypeValueWitnessTables);
    while (__stlxr(v11 - 1, (unsigned int *)&ExistentialMetatypeValueWitnessTables));
    unsigned int v43 = v42;
    os_unfair_lock_lock((os_unfair_lock_t)&unk_18C5758D0);
    uint64_t v12 = qword_18C5758C8;
    BOOL v13 = (qword_18C5758C8 & 3) == 0;
    if ((qword_18C5758C8 & 0xFFFFFFFFFFFFFFFCLL) == 0) {
      BOOL v13 = 1;
    }
    BOOL v41 = v13;
    if (v13) {
      int v14 = 4;
    }
    else {
      int v14 = *(unsigned __int8 *)(qword_18C5758C8 & 0xFFFFFFFFFFFFFFFCLL);
    }
    unint64_t v15 = dword_18C5758BC;
    int v16 = (_DWORD *)qword_18C5758C0;
    if (v17)
    {
      unint64_t v1 = *v17;
      __dmb(0xBu);
      if (!ExistentialMetatypeValueWitnessTables)
      {
        int v19 = (void **)qword_18C5758D8;
        if (qword_18C5758D8)
        {
          do
          {
            uint64_t v20 = (void **)*v19;
            free(v19[1]);
            free(v19);
            int v19 = v20;
          }

          while (v20);
        }

        qword_18C5758D8 = 0LL;
      }

      os_unfair_lock_unlock((os_unfair_lock_t)&unk_18C5758D0);
      qword_18C5758E0 = v1;
      return (uint64_t (**)())v1;
    }

    char v40 = v12;
    int __src = v16 + 2;
    unint64_t v39 = v12 & 0xFFFFFFFFFFFFFFFCLL;
    uint64_t v21 = (v15 + 1);
    if ((1LL << v14) / (unint64_t)((1LL << v14) - v21) < 4)
    {
      LOBYTE(v26) = v40;
      if (v16) {
        goto LABEL_48;
      }
    }

    else
    {
      unsigned int v22 = (v14 + 1);
      if (v22 >= 0x11) {
        unsigned int v23 = 4;
      }
      else {
        unsigned int v23 = 2;
      }
      if (v22 < 9) {
        size_t v24 = 1LL;
      }
      else {
        size_t v24 = v23;
      }
      unint64_t v25 = (unint64_t)calloc(2LL << v14, v24);
      if (!v25) {
        swift::hashable_support::findHashableBaseTypeOfHashableType();
      }
      if ((_DWORD)v24 != 1)
      {
        if ((_DWORD)v24 == 4) {
          size_t v24 = 3LL;
        }
        else {
          size_t v24 = 2LL;
        }
      }

      unint64_t v26 = v24 | v25;
      *(_BYTE *)unint64_t v25 = v14 + 1;
      if (v14) {
        __asm { BR              X9 }
      }

      atomic_store(v26, (unint64_t *)&qword_18C5758C8);
      if (!v41)
      {
        unint64_t v27 = malloc(0x10uLL);
        *unint64_t v27 = qword_18C5758D8;
        v27[1] = v39;
        qword_18C5758D8 = (uint64_t)v27;
      }

      LODWORD(v21) = v15 + 1;
      if (v16)
      {
LABEL_48:
        unint64_t v28 = (unint64_t)v16;
      }
    }

    int v29 = v16;
    unint64_t v30 = v15 + (v15 >> 2);
    if (v30 <= v15 + 1) {
      unint64_t v30 = v15 + 1;
    }
    size_t v31 = malloc_good_size(8 * v30 + 8);
    unsigned __int8 v32 = malloc(v31);
    if (!v32) {
      swift::hashable_support::findHashableBaseTypeOfHashableType();
    }
    unint64_t v28 = (unint64_t)v32;
    *unsigned __int8 v32 = (v31 + 0x7FFFFFFF8LL) >> 3;
    if (v29)
    {
      memcpy(v32 + 2, __src, 8 * v15);
      int v33 = malloc(0x10uLL);
      *int v33 = qword_18C5758D8;
      v33[1] = v29;
      qword_18C5758D8 = (uint64_t)v33;
    }

    atomic_store(v28, &qword_18C5758C0);
LABEL_55:
    __int16 v44 = 5;
    unint64_t v34 = swift::MetadataAllocator::Allocate((swift::MetadataAllocator *)&v44, 0x58uLL, (const char *)8, v18);
    uint64_t v35 = v42;
    *(void *)unint64_t v34 = swift::metadataimpl::NonFixedBufferValueWitnesses<swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedExistentialMetatypeBox,true>,true>::initializeBufferWithCopyOfBuffer;
    *((void *)v34 + 1) = swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedExistentialMetatypeBox,true>::destroy;
    *((void *)v34 + 2) = swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedExistentialMetatypeBox,true>::initializeWithCopy;
    *((void *)v34 + 3) = swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedExistentialMetatypeBox,true>::assignWithCopy;
    *((void *)v34 + 4) = swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedExistentialMetatypeBox,true>::initializeWithTake;
    *((void *)v34 + 5) = swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedExistentialMetatypeBox,true>::assignWithTake;
    *((void *)v34 + 6) = swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedExistentialMetatypeBox,true>::getEnumTagSinglePayload;
    *((void *)v34 + 7) = swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedExistentialMetatypeBox,true>::storeEnumTagSinglePayload;
    uint64_t v36 = 8 * v35 + 8;
    *((void *)v34 + 8) = v36;
    *((void *)v34 + 9) = v36;
    *((void *)v34 + 10) = 0x7FFFFFFF00020007LL;
    *(void *)(v28 + 8 * v15 + 8) = v34;
    atomic_store(v21, (unsigned int *)&dword_18C5758BC);
    __asm { BR              X11 }
  }

  return (uint64_t (**)())v1;
}

void *swift::metadataimpl::BufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::ExistentialMetatypeBox<1u>>,true,16ul,8ul,(swift::metadataimpl::FixedPacking)1>::initializeBufferWithCopyOfBuffer( void *result, void *a2)
{
  result[1] = a2[1];
  *unint64_t result = *a2;
  return result;
}

void *swift::metadataimpl::ValueWitnesses<swift::metadataimpl::ExistentialMetatypeBox<1u>>::initializeWithCopy( void *result, void *a2)
{
  result[1] = a2[1];
  *unint64_t result = *a2;
  return result;
}

void *swift::metadataimpl::ValueWitnesses<swift::metadataimpl::ExistentialMetatypeBox<1u>>::assignWithCopy( void *result, void *a2)
{
  result[1] = a2[1];
  *unint64_t result = *a2;
  return result;
}

void *swift::metadataimpl::ValueWitnesses<swift::metadataimpl::ExistentialMetatypeBox<1u>>::initializeWithTake( void *result, void *a2)
{
  result[1] = a2[1];
  *unint64_t result = *a2;
  return result;
}

void *swift::metadataimpl::ValueWitnesses<swift::metadataimpl::ExistentialMetatypeBox<1u>>::assignWithTake( void *result, void *a2)
{
  result[1] = a2[1];
  *unint64_t result = *a2;
  return result;
}

uint64_t swift::metadataimpl::FixedSizeBufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::ExistentialMetatypeBox<1u>>,true,16ul,8ul,true>::getEnumTagSinglePayload( uint64_t a1, int a2)
{
  if (a2 < 0 && *(_BYTE *)(a1 + 16)) {
    return *(_DWORD *)a1 ^ 0x80000000;
  }
  if (HIDWORD(*(void *)a1)) {
    return 0LL;
  }
  return *(void *)a1 + 1;
}

uint64_t swift::metadataimpl::FixedSizeBufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::ExistentialMetatypeBox<1u>>,true,16ul,8ul,true>::storeEnumTagSinglePayload( uint64_t result, int a2, int a3)
{
  if ((a3 & 0x80000000) == 0)
  {
    if (a2 < 0)
    {
      *(_DWORD *)unint64_t result = a2 ^ 0x80000000;
      *(void *)(result + 4) = 0LL;
      *(_DWORD *)(result + 12) = 0;
      return result;
    }

    if (!a2) {
      return result;
    }
LABEL_7:
    *(void *)unint64_t result = (a2 - 1);
    return result;
  }

  if (a2 < 0)
  {
    *(_DWORD *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 4) = 0LL;
    *(_DWORD *)(result + 12) = 0;
    *(_BYTE *)(result + 16) = 1;
    return result;
  }

  *(_BYTE *)(result + 16) = 0;
  if (a2) {
    goto LABEL_7;
  }
  return result;
}

void *swift::metadataimpl::BufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::ExistentialMetatypeBox<2u>>,true,24ul,8ul,(swift::metadataimpl::FixedPacking)1>::initializeBufferWithCopyOfBuffer( void *result, void *a2)
{
  result[1] = a2[1];
  result[2] = a2[2];
  *unint64_t result = *a2;
  return result;
}

void *swift::metadataimpl::ValueWitnesses<swift::metadataimpl::ExistentialMetatypeBox<2u>>::initializeWithCopy( void *result, void *a2)
{
  result[1] = a2[1];
  result[2] = a2[2];
  *unint64_t result = *a2;
  return result;
}

void *swift::metadataimpl::ValueWitnesses<swift::metadataimpl::ExistentialMetatypeBox<2u>>::assignWithCopy( void *result, void *a2)
{
  result[1] = a2[1];
  result[2] = a2[2];
  *unint64_t result = *a2;
  return result;
}

void *swift::metadataimpl::ValueWitnesses<swift::metadataimpl::ExistentialMetatypeBox<2u>>::initializeWithTake( void *result, void *a2)
{
  result[1] = a2[1];
  result[2] = a2[2];
  *unint64_t result = *a2;
  return result;
}

void *swift::metadataimpl::ValueWitnesses<swift::metadataimpl::ExistentialMetatypeBox<2u>>::assignWithTake( void *result, void *a2)
{
  result[1] = a2[1];
  result[2] = a2[2];
  *unint64_t result = *a2;
  return result;
}

uint64_t swift::metadataimpl::FixedSizeBufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::ExistentialMetatypeBox<2u>>,true,24ul,8ul,true>::getEnumTagSinglePayload( uint64_t a1, int a2)
{
  if (a2 < 0 && *(_BYTE *)(a1 + 24)) {
    return *(_DWORD *)a1 ^ 0x80000000;
  }
  if (HIDWORD(*(void *)a1)) {
    return 0LL;
  }
  return *(void *)a1 + 1;
}

uint64_t swift::metadataimpl::FixedSizeBufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::ExistentialMetatypeBox<2u>>,true,24ul,8ul,true>::storeEnumTagSinglePayload( uint64_t result, int a2, int a3)
{
  if ((a3 & 0x80000000) == 0)
  {
    if (a2 < 0)
    {
      *(_DWORD *)unint64_t result = a2 ^ 0x80000000;
      *(void *)(result + 12) = 0LL;
      *(void *)(result + 4) = 0LL;
      *(_DWORD *)(result + 20) = 0;
      return result;
    }

    if (!a2) {
      return result;
    }
LABEL_7:
    *(void *)unint64_t result = (a2 - 1);
    return result;
  }

  if (a2 < 0)
  {
    *(_DWORD *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 12) = 0LL;
    *(void *)(result + 4) = 0LL;
    *(_DWORD *)(result + 20) = 0;
    *(_BYTE *)(result + 24) = 1;
    return result;
  }

  *(_BYTE *)(result + 24) = 0;
  if (a2) {
    goto LABEL_7;
  }
  return result;
}

void swift::ConcurrentReadableHashMap<swift::HashMapElementWrapper<anonymous namespace'::ExistentialMetatypeValueWitnessTableCacheEntry>,swift::LazyMutex>::find<unsigned int>( uint64_t a1, char a2)
{
  if ((v2 & 1) == 0)
  {
    char v5 = a2;
    a2 = v5;
    if (v3)
    {
      unint64_t v4 = __swift::__runtime::llvm::hashing::detail::fixed_seed_override;
      if (!__swift::__runtime::llvm::hashing::detail::fixed_seed_override) {
        unint64_t v4 = 0xFF51AFD7ED558CCDLL;
      }
      __swift::__runtime::llvm::hashing::detail::get_execution_seed(void)::seed = v4;
      a2 = v5;
    }
  }

  __asm { BR              X14 }

char *swift::metadataimpl::NonFixedBufferValueWitnesses<swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedExistentialMetatypeBox,true>,true>::initializeBufferWithCopyOfBuffer( unint64_t **a1, unint64_t **a2, uint64_t a3, char *a4)
{
  uint64_t v4 = *(void *)(a3 - 8);
  char v5 = *a2;
  *a1 = *a2;
  swift_retain(v5, (uint64_t)a2, a3, a4);
  return (char *)v5 + ((*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
}

void *swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedExistentialMetatypeBox,true>::initializeWithCopy( void *result, void *a2, uint64_t a3)
{
  uint64_t v3 = *(_DWORD *)(a3 + 16) & 0xFFFFFF;
  if ((_DWORD)v3)
  {
    uint64_t v4 = 0LL;
    uint64_t v4 = *(_DWORD *)(a3 + 16) & 0xFFFFFCLL;
    char v5 = (__int128 *)(a2 + 3);
    unint64_t v6 = result + 3;
    uint64_t v7 = v4;
    do
    {
      __int128 v8 = *v5;
      *(v6 - 1) = *(v5 - 1);
      *unint64_t v6 = v8;
      v5 += 2;
      v6 += 2;
      v7 -= 4LL;
    }

    while (v7);
    if (v4 != v3)
    {
LABEL_7:
      uint64_t v9 = v3 - v4;
      uint64_t v10 = 8 * v4 + 8;
      unsigned int v11 = (void *)((char *)result + v10);
      uint64_t v12 = (void *)((char *)a2 + v10);
      do
      {
        uint64_t v13 = *v12++;
        *v11++ = v13;
        --v9;
      }

      while (v9);
    }
  }

  *unint64_t result = *a2;
  return result;
}

void *swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedExistentialMetatypeBox,true>::assignWithCopy( void *result, void *a2, uint64_t a3)
{
  uint64_t v3 = *(_DWORD *)(a3 + 16) & 0xFFFFFF;
  if ((_DWORD)v3)
  {
    uint64_t v4 = 0LL;
    uint64_t v4 = *(_DWORD *)(a3 + 16) & 0xFFFFFCLL;
    char v5 = (__int128 *)(a2 + 3);
    unint64_t v6 = result + 3;
    uint64_t v7 = v4;
    do
    {
      __int128 v8 = *v5;
      *(v6 - 1) = *(v5 - 1);
      *unint64_t v6 = v8;
      v5 += 2;
      v6 += 2;
      v7 -= 4LL;
    }

    while (v7);
    if (v4 != v3)
    {
LABEL_7:
      uint64_t v9 = v3 - v4;
      uint64_t v10 = 8 * v4 + 8;
      unsigned int v11 = (void *)((char *)result + v10);
      uint64_t v12 = (void *)((char *)a2 + v10);
      do
      {
        uint64_t v13 = *v12++;
        *v11++ = v13;
        --v9;
      }

      while (v9);
    }
  }

  *unint64_t result = *a2;
  return result;
}

void *swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedExistentialMetatypeBox,true>::initializeWithTake( void *result, void *a2, uint64_t a3)
{
  uint64_t v3 = *(_DWORD *)(a3 + 16) & 0xFFFFFF;
  if ((_DWORD)v3)
  {
    uint64_t v4 = 0LL;
    uint64_t v4 = *(_DWORD *)(a3 + 16) & 0xFFFFFCLL;
    char v5 = (__int128 *)(a2 + 3);
    unint64_t v6 = result + 3;
    uint64_t v7 = v4;
    do
    {
      __int128 v8 = *v5;
      *(v6 - 1) = *(v5 - 1);
      *unint64_t v6 = v8;
      v5 += 2;
      v6 += 2;
      v7 -= 4LL;
    }

    while (v7);
    if (v4 != v3)
    {
LABEL_7:
      uint64_t v9 = v3 - v4;
      uint64_t v10 = 8 * v4 + 8;
      unsigned int v11 = (void *)((char *)result + v10);
      uint64_t v12 = (void *)((char *)a2 + v10);
      do
      {
        uint64_t v13 = *v12++;
        *v11++ = v13;
        --v9;
      }

      while (v9);
    }
  }

  *unint64_t result = *a2;
  return result;
}

void *swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedExistentialMetatypeBox,true>::assignWithTake( void *result, void *a2, uint64_t a3)
{
  uint64_t v3 = *(_DWORD *)(a3 + 16) & 0xFFFFFF;
  if ((_DWORD)v3)
  {
    uint64_t v4 = 0LL;
    uint64_t v4 = *(_DWORD *)(a3 + 16) & 0xFFFFFCLL;
    char v5 = (__int128 *)(a2 + 3);
    unint64_t v6 = result + 3;
    uint64_t v7 = v4;
    do
    {
      __int128 v8 = *v5;
      *(v6 - 1) = *(v5 - 1);
      *unint64_t v6 = v8;
      v5 += 2;
      v6 += 2;
      v7 -= 4LL;
    }

    while (v7);
    if (v4 != v3)
    {
LABEL_7:
      uint64_t v9 = v3 - v4;
      uint64_t v10 = 8 * v4 + 8;
      unsigned int v11 = (void *)((char *)result + v10);
      uint64_t v12 = (void *)((char *)a2 + v10);
      do
      {
        uint64_t v13 = *v12++;
        *v11++ = v13;
        --v9;
      }

      while (v9);
    }
  }

  *unint64_t result = *a2;
  return result;
}

uint64_t swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedExistentialMetatypeBox,true>::getEnumTagSinglePayload( unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 - 8);
  unsigned int v4 = *(_DWORD *)(v3 + 84);
  if (a2 <= v4) {
    goto LABEL_11;
  }
  unint64_t v5 = *(void *)(v3 + 64);
  if (v5 > 3) {
    goto LABEL_5;
  }
  unsigned int v6 = ((a2 - v4 + ~(-1 << (8 * v5))) >> (8 * v5)) + 1;
  if (v6 < 2) {
    goto LABEL_11;
  }
  if (v6 >= 0x100)
  {
    if (v6 >= 0x10000) {
      int v7 = *(_DWORD *)&a1[v5];
    }
    else {
      int v7 = *(unsigned __int16 *)&a1[v5];
    }
  }

  else
  {
LABEL_5:
    int v7 = a1[v5];
  }

  if (!v7)
  {
LABEL_11:
    if (!v4) {
      return 0LL;
    }
    if (HIDWORD(*(void *)a1)) {
      return 0LL;
    }
    return *(void *)a1 + 1;
  }

  int v8 = (v7 - 1) << (8 * v5);
  if (v5 > 3) {
    int v8 = 0;
  }
  int v9 = 0;
  switch(v5)
  {
    case 0uLL:
      return v4 + (v9 | v8) + 1;
    case 1uLL:
      int v9 = *a1;
      break;
    case 2uLL:
      int v9 = *(unsigned __int16 *)a1;
      break;
    case 3uLL:
      int v9 = *(unsigned __int16 *)a1 | (a1[2] << 16);
      break;
    default:
      int v9 = *(_DWORD *)a1;
      break;
  }

  return v4 + (v9 | v8) + 1;
}

void swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedExistentialMetatypeBox,true>::storeEnumTagSinglePayload( _BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a4 - 8);
  unint64_t v7 = *(void *)(v6 + 64);
  unsigned int v8 = *(_DWORD *)(v6 + 84);
  int v9 = &a1[v7];
  if (a3 <= v8)
  {
    if (v8 >= a2) {
      goto LABEL_37;
    }
    unsigned int v13 = 0;
LABEL_10:
    unsigned int v14 = ~v8 + a2;
    if (v7 > 3)
    {
      int v15 = 1;
      goto LABEL_15;
    }

    char v10 = 8 * v7;
    int v11 = ~(-1 << (8 * v7));
LABEL_13:
    int v15 = (v14 >> v10) + 1;
    if (!v7)
    {
LABEL_21:
      switch(v13)
      {
        case 0u:
          return;
        case 1u:
          *int v9 = v15;
          break;
        case 2u:
          *(_WORD *)int v9 = v15;
          break;
        case 3u:
          *(_WORD *)int v9 = v15;
          v9[2] = BYTE2(v15);
          break;
        case 4u:
          *(_DWORD *)int v9 = v15;
          break;
        default:
          *(_DWORD *)int v9 = v15;
          bzero(v9 + 4, v13 - 4LL);
          break;
      }

      return;
    }

    v14 &= v11;
LABEL_15:
    switch(v7)
    {
      case 1uLL:
        *a1 = v14;
        break;
      case 2uLL:
        *(_WORD *)a1 = v14;
        break;
      case 3uLL:
        *(_WORD *)a1 = v14;
        a1[2] = BYTE2(v14);
        break;
      case 4uLL:
        *(_DWORD *)a1 = v14;
        break;
      default:
        *(_DWORD *)a1 = v14;
        bzero(a1 + 4, v7 - 4);
        break;
    }

    goto LABEL_21;
  }

  if (v7 > 3) {
    goto LABEL_9;
  }
  char v10 = 8 * v7;
  int v11 = ~(-1 << (8 * v7));
  unsigned int v12 = ((a3 - v8 + v11) >> (8 * v7)) + 1;
  if (v12 >= 2)
  {
    if (v12 >= 0x100)
    {
      if (v12 >= 0x10000) {
        unsigned int v13 = 4;
      }
      else {
        unsigned int v13 = 2;
      }
      if (v8 < a2) {
        goto LABEL_10;
      }
      goto LABEL_31;
    }

uint64_t *swift::metadataimpl::OpaqueExistentialBoxBase::assignWithCopy<swift::metadataimpl::OpaqueExistentialBox<0u>::Container>( uint64_t *a1, unint64_t **a2, uint64_t a3, char *a4)
{
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  if (v6 == (unint64_t *)v7)
  {
    uint64_t v13 = *(v6 - 1);
    if ((*(_BYTE *)(v13 + 82) & 2) == 0)
    {
      (*(void (**)(uint64_t *, unint64_t **, unint64_t *))(v13 + 24))(a1, a2, a2[3]);
      return a1;
    }

    int v15 = *a2;
    uint64_t v16 = *a1;
    *a1 = (uint64_t)*a2;
    swift_retain(v15, (uint64_t)a2, a3, a4);
    uint64_t v17 = v16;
LABEL_15:
    swift_release(v17);
    return a1;
  }

  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(v6 - 1);
  if ((*(_BYTE *)(v8 + 82) & 2) != 0)
  {
    uint64_t v14 = *a1;
    a1[3] = (uint64_t)v6;
    if ((*(_BYTE *)(v9 + 82) & 2) != 0)
    {
      int v19 = *a2;
      *a1 = (uint64_t)*a2;
      swift_retain(v19, (uint64_t)a2, a3, a4);
    }

    else
    {
      (*(void (**)(uint64_t *, unint64_t **, unint64_t *))(v9 + 16))(a1, a2, v6);
    }

    uint64_t v17 = v14;
    goto LABEL_15;
  }

  (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v8 + 32))(v21, a1, a1[3]);
  a1[3] = (uint64_t)a2[3];
  if ((*(_BYTE *)(v9 + 82) & 2) != 0)
  {
    unint64_t v18 = *a2;
    *a1 = (uint64_t)*a2;
    swift_retain(v18, v10, v11, v12);
  }

  else
  {
    (*(void (**)(uint64_t *, unint64_t **, unint64_t *))(*(v6 - 1) + 16))(a1, a2, v6);
  }

  (*(void (**)(_BYTE *, uint64_t))(*(void *)(v7 - 8) + 8LL))(v21, v7);
  return a1;
}

uint64_t *swift::metadataimpl::OpaqueExistentialBoxBase::assignWithCopy<swift::metadataimpl::OpaqueExistentialBox<1u>::Container>( uint64_t *a1, unint64_t **a2, uint64_t a3, char *a4)
{
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  if (v6 == (unint64_t *)v7)
  {
    uint64_t v13 = *(v6 - 1);
    if ((*(_BYTE *)(v13 + 82) & 2) == 0)
    {
      (*(void (**)(uint64_t *, unint64_t **, unint64_t *))(v13 + 24))(a1, a2, a2[3]);
      return a1;
    }

    int v15 = *a2;
    uint64_t v16 = *a1;
    *a1 = (uint64_t)*a2;
    swift_retain(v15, (uint64_t)a2, a3, a4);
    uint64_t v17 = v16;
LABEL_15:
    swift_release(v17);
    return a1;
  }

  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(v6 - 1);
  if ((*(_BYTE *)(v8 + 82) & 2) != 0)
  {
    uint64_t v14 = *a1;
    a1[3] = (uint64_t)v6;
    a1[4] = (uint64_t)a2[4];
    if ((*(_BYTE *)(v9 + 82) & 2) != 0)
    {
      int v19 = *a2;
      *a1 = (uint64_t)*a2;
      swift_retain(v19, (uint64_t)a2, a3, a4);
    }

    else
    {
      (*(void (**)(uint64_t *, unint64_t **, unint64_t *))(*(v6 - 1) + 16))(a1, a2, v6);
    }

    uint64_t v17 = v14;
    goto LABEL_15;
  }

  (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v8 + 32))(v21, a1, a1[3]);
  a1[3] = (uint64_t)a2[3];
  a1[4] = (uint64_t)a2[4];
  if ((*(_BYTE *)(v9 + 82) & 2) != 0)
  {
    unint64_t v18 = *a2;
    *a1 = (uint64_t)*a2;
    swift_retain(v18, v10, v11, v12);
  }

  else
  {
    (*(void (**)(uint64_t *, unint64_t **, unint64_t *))(*(v6 - 1) + 16))(a1, a2, v6);
  }

  (*(void (**)(_BYTE *, uint64_t))(*(void *)(v7 - 8) + 8LL))(v21, v7);
  return a1;
}

void *swift::metadataimpl::OpaqueExistentialBoxBase::assignWithCopy<swift::metadataimpl::NonFixedOpaqueExistentialBox::Container,swift::TargetMetadata<swift::InProcess> const*>( void *a1, void *a2, uint64_t a3, char *a4)
{
  if (a2 == a1) {
    return a1;
  }
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  if (v6 == v7)
  {
    uint64_t v26 = *(void *)(v6 - 8);
    if ((*(_BYTE *)(v26 + 82) & 2) == 0)
    {
      (*(void (**)(void *, void *, void))(v26 + 24))(a1, a2, a2[3]);
      return a1;
    }

    char v40 = (unint64_t *)*a2;
    uint64_t v41 = *a1;
    *a1 = *a2;
    swift_retain(v40, (uint64_t)a2, a3, a4);
    uint64_t v42 = v41;
LABEL_31:
    swift_release(v42);
    return a1;
  }

  uint64_t v9 = *(void *)(v7 - 8);
  uint64_t v10 = *(void *)(v6 - 8);
  if ((*(_BYTE *)(v9 + 82) & 2) != 0)
  {
    uint64_t v27 = *a1;
    int v28 = *(_DWORD *)(a3 + 8);
    a1[3] = v6;
    uint64_t v29 = *(void *)&v28 & 0xFFFFFFLL;
    if ((_DWORD)v29)
    {
      uint64_t v30 = 0LL;
      uint64_t v30 = v29 & 0xFFFFFC;
      size_t v31 = (__int128 *)(a2 + 6);
      unsigned __int8 v32 = a1 + 6;
      uint64_t v33 = v29 & 0xFFFFFC;
      do
      {
        __int128 v34 = *v31;
        *(v32 - 1) = *(v31 - 1);
        *unsigned __int8 v32 = v34;
        v31 += 2;
        v32 += 2;
        v33 -= 4LL;
      }

      while (v33);
      if (v30 != v29)
      {
LABEL_22:
        uint64_t v35 = v29 - v30;
        uint64_t v36 = 8 * v30 + 32;
        int v37 = (void *)((char *)a1 + v36);
        uint64_t v38 = (void *)((char *)a2 + v36);
        do
        {
          uint64_t v39 = *v38++;
          *v37++ = v39;
          --v35;
        }

        while (v35);
      }
    }

    if ((*(_BYTE *)(v10 + 82) & 2) != 0)
    {
      __int16 v44 = (unint64_t *)*a2;
      *a1 = *a2;
      swift_retain(v44, (uint64_t)a2, a3, a4);
    }

    else
    {
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
    }

    uint64_t v42 = v27;
    goto LABEL_31;
  }

  (*(void (**)(_BYTE *, void *, void))(v9 + 32))(v46, a1, a1[3]);
  int v14 = *(_DWORD *)(a3 + 8);
  a1[3] = a2[3];
  uint64_t v15 = *(void *)&v14 & 0xFFFFFFLL;
  if ((_DWORD)v15)
  {
    uint64_t v16 = 0LL;
    uint64_t v16 = v15 & 0xFFFFFC;
    uint64_t v17 = (__int128 *)(a2 + 6);
    unint64_t v18 = a1 + 6;
    uint64_t v19 = v15 & 0xFFFFFC;
    do
    {
      __int128 v20 = *v17;
      *(v18 - 1) = *(v17 - 1);
      *unint64_t v18 = v20;
      v17 += 2;
      v18 += 2;
      v19 -= 4LL;
    }

    while (v19);
    if (v16 != v15)
    {
LABEL_10:
      uint64_t v21 = v15 - v16;
      uint64_t v22 = 8 * v16 + 32;
      unsigned int v23 = (void *)((char *)a1 + v22);
      size_t v24 = (void *)((char *)a2 + v22);
      do
      {
        uint64_t v25 = *v24++;
        *v23++ = v25;
        --v21;
      }

      while (v21);
    }
  }

  if ((*(_BYTE *)(v10 + 82) & 2) != 0)
  {
    unsigned int v43 = (unint64_t *)*a2;
    *a1 = *a2;
    swift_retain(v43, v11, v12, v13);
  }

  else
  {
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  }

  (*(void (**)(_BYTE *, uint64_t))(*(void *)(v7 - 8) + 8LL))(v46, v7);
  return a1;
}

void swift::ConcurrentReadableHashMap<swift::HashMapElementWrapper<anonymous namespace'::ExistentialCacheEntry>,swift::LazyMutex>::find<anonymous namespace'::ExistentialCacheEntry::Key>( uint64_t a1, char a2)
{
  unsigned int v4 = *(_DWORD *)(a1 + 8);
  char v7 = v4 & 1;
  LODWORD(v6) = v4 >> 1;
  unint64_t v8 = __swift::__runtime::llvm::hash_combine<swift::TargetMetadata<swift::InProcess> const*,swift::ProtocolClassConstraint,unsigned int>( (void *)a1,  &v7,  (int *)&v6);
  if (*(_DWORD *)(a1 + 8) >= 2u)
  {
    uint64_t v5 = 0LL;
    do
    {
      uint64_t v6 = *(void *)(*(void *)(a1 + 16) + 8 * v5);
      unint64_t v8 = __swift::__runtime::llvm::hash_combine<__swift::__runtime::llvm::hash_code,swift::TargetMetadata<swift::InProcess> const*>( &v8,  &v6);
      ++v5;
    }

    while (v5 != (unint64_t)*(unsigned int *)(a1 + 8) >> 1);
  }

  __asm { BR              X13 }

uint64_t sub_18176F504()
{
  uint64_t v5 = (v3 >> (4 * v0)) & 0xF;
  if (!(_DWORD)v5) {
    return 0LL;
  }
  unint64_t v6 = (v5 - 1);
  if (v6 >= v2) {
    goto LABEL_15;
  }
  uint64_t v7 = *(void *)(v1 + 8 * v6);
  unint64_t v8 = *(unsigned int *)(v4 + 8);
  unint64_t v9 = *(unsigned int *)(v7 + 16);
  uint64_t v10 = (v9 & 0x40000000) != 0 ? *(void *)(v7 + 24) : 0LL;
  if (*(void *)v4 != v10) {
    goto LABEL_15;
  }
  unint64_t v11 = v8 >> 1;
  if (*(_DWORD *)(v4 + 8) >> 1 != *(_DWORD *)(v7 + 20)) {
    goto LABEL_15;
  }
  if (v8 >= 2)
  {
    uint64_t v12 = *(uint64_t **)(v4 + 16);
    uint64_t v13 = (uint64_t *)(v7 + 8 * ((v9 >> 30) & 1) + 24);
    while (1)
    {
      uint64_t v15 = *v12++;
      uint64_t v14 = v15;
      uint64_t v16 = *v13++;
      if (v14 != v16) {
        break;
      }
      if (!--v11) {
        return v1 + 8 * v6;
      }
    }

unint64_t __swift::__runtime::llvm::hash_combine<swift::TargetMetadata<swift::InProcess> const*,swift::ProtocolClassConstraint,unsigned int>( void *a1, char *a2, int *a3)
{
  uint64_t v15 = 0LL;
  memset(v14, 0, sizeof(v14));
  memset(v13, 0, sizeof(v13));
  if ((v4 & 1) == 0)
  {
    unint64_t v11 = a2;
    uint64_t v12 = a1;
    a2 = v11;
    a1 = v12;
    if (v9)
    {
      unint64_t v10 = __swift::__runtime::llvm::hashing::detail::fixed_seed_override;
      if (!__swift::__runtime::llvm::hashing::detail::fixed_seed_override) {
        unint64_t v10 = 0xFF51AFD7ED558CCDLL;
      }
      __swift::__runtime::llvm::hashing::detail::get_execution_seed(void)::seed = v10;
      a2 = v11;
      a1 = v12;
    }
  }

  uint64_t v5 = *a1;
  uint64_t v16 = __swift::__runtime::llvm::hashing::detail::get_execution_seed(void)::seed;
  *(void *)&v13[0] = v5;
  uint64_t v17 = 0LL;
  unint64_t v6 = __swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper::combine_data<swift::ProtocolClassConstraint>( (uint64_t)v13,  &v17,  (_BYTE *)v13 + 8,  (unint64_t)v14,  *a2);
  uint64_t v18 = v17;
  uint64_t v7 = (char *)__swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>( (uint64_t)v13,  &v18,  v6,  (unint64_t)v14,  *a3);
  return __swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper::combine( (__swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper *)v13,  v18,  v7,  (char *)v14);
}

_BYTE *__swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper::combine_data<swift::ProtocolClassConstraint>( uint64_t a1, uint64_t *a2, _BYTE *__dst, unint64_t a4, char a5)
{
  char __src = a5;
  if ((unint64_t)(__dst + 1) <= a4)
  {
    *std::string __dst = a5;
    return __dst + 1;
  }

  else
  {
    unint64_t v8 = a4 - (void)__dst;
    memcpy(__dst, &__src, a4 - (void)__dst);
    if (*a2)
    {
      __swift::__runtime::llvm::hashing::detail::hash_state::mix((unint64_t *)(a1 + 64), (const char *)a1);
      uint64_t v9 = *a2 + 64;
    }

    else
    {
      unint64_t v10 = *(void *)(a1 + 120);
      uint64_t v11 = __ROR8__(v10 ^ 0xB492B66FBE98F273LL, 49);
      unint64_t v12 = v10 ^ (v10 >> 47);
      uint64_t v13 = *(void *)(a1 + 8);
      uint64_t v14 = v13 + v10 + v11;
      uint64_t v15 = *(void *)(a1 + 48);
      uint64_t v16 = *(void *)(a1 + 56);
      uint64_t v17 = *(void *)(a1 + 40);
      uint64_t v18 = v17 + v11 - 0x4B6D499041670D8DLL * __ROR8__(v15 + v10 - 0x4B6D499041670D8DLL * v10, 42);
      unint64_t v19 = 0x9DDFEA08EB382D69LL
          * ((0x9DDFEA08EB382D69LL * (v10 ^ 0xB492B66FBE98F273LL)) ^ ((0x9DDFEA08EB382D69LL
                                                                     * (v10 ^ 0xB492B66FBE98F273LL)) >> 47) ^ 0xB492B66FBE98F273LL);
      unint64_t v20 = 0x9DDFEA08EB382D69LL
          * (v10 ^ (((0x9DDFEA08EB382D69LL * (v12 ^ (0xB492B66FBE98F273LL * v10))) ^ v10) >> 47) ^ (0x9DDFEA08EB382D69LL
                                                                                                  * (v12 ^ (0xB492B66FBE98F273LL * v10))));
      unint64_t v21 = 0x9DDFEA08EB382D69LL * (v20 ^ (v20 >> 47));
      unint64_t v22 = 0xB492B66FBE98F273LL * __ROR8__(v12 - 0x622015F714C7D297LL * (v19 ^ (v19 >> 47)), 33);
      uint64_t v23 = *(void *)a1 - 0x6D8ED9027DD26057LL * v10;
      uint64_t v25 = *(void *)(a1 + 16);
      uint64_t v24 = *(void *)(a1 + 24);
      uint64_t v26 = v23 + v13 + v25;
      unint64_t v27 = v21 ^ (0xB492B66FBE98F273LL * __ROR8__(v14, 37));
      unint64_t v28 = v22 + *(void *)(a1 + 32) + v21;
      *(void *)(a1 + 64) = v22;
      *(void *)(a1 + 72) = v18;
      *(void *)(a1 + 80) = v27;
      *(void *)(a1 + 88) = v26 + v24;
      *(void *)(a1 + 96) = __ROR8__(v26, 44) + v23 + __ROR8__(v23 + v12 + v24 + v27, 21);
      *(void *)(a1 + 104) = v17 + v15 + v28 + v16;
      *(void *)(a1 + 112) = __ROR8__(v18 + v25 + v16 + v28, 21) + v28 + __ROR8__(v17 + v15 + v28, 44);
      uint64_t v9 = 64LL;
    }

    *a2 = v9;
    if (a1 + 1 - v8 <= a4)
    {
      memcpy((void *)a1, &__src + v8, 1 - v8);
      a1 += 1 - v8;
    }
  }

  return (_BYTE *)a1;
}

uint64_t (**getExistentialValueWitnesses(char a1, unsigned int a2, int a3))()
{
  if (a3 == 1) {
    return (uint64_t (**)())&value witness table for Builtin.UnknownObject;
  }
  if ((a1 & 1) != 0)
  {
    if (!a2) {
      return OpaqueExistentialValueWitnesses_0;
    }
    if (a2 == 1) {
      return OpaqueExistentialValueWitnesses_1;
    }
    unsigned int v84 = a2;
    unint64_t v3 = atomic_load((unint64_t *)&qword_18C486D20);
    if (!v3 || v84 != ((unint64_t)(*(void *)(v3 + 64) + 0x7FFFFFFE0LL) >> 3))
    {
      do
        unsigned int v17 = __ldaxr((unsigned int *)&OpaqueExistentialValueWitnessTables);
      while (__stxr(v17 + 1, (unsigned int *)&OpaqueExistentialValueWitnessTables));
      do
      {
        unint64_t v18 = atomic_load(&qword_18C486D00);
        unint64_t v19 = atomic_load((unint64_t *)&qword_18C486D08);
        unsigned int v20 = atomic_load((unsigned int *)&dword_18C486CFC);
        unint64_t v21 = atomic_load(&qword_18C486D00);
      }

      while (v18 != v21);
      if (v18) {
        BOOL v22 = v19 == 0;
      }
      else {
        BOOL v22 = 1;
      }
      if (!v22 && v20 != 0)
      {
        if (v24)
        {
          qword_18C486D20 = *v24;
          unint64_t v3 = *v24;
          do
            unsigned int v25 = __ldxr((unsigned int *)&OpaqueExistentialValueWitnessTables);
          while (__stlxr(v25 - 1, (unsigned int *)&OpaqueExistentialValueWitnessTables));
          return (uint64_t (**)())v3;
        }
      }

      do
        unsigned int v26 = __ldxr((unsigned int *)&OpaqueExistentialValueWitnessTables);
      while (__stlxr(v26 - 1, (unsigned int *)&OpaqueExistentialValueWitnessTables));
      unsigned int v85 = v84;
      os_unfair_lock_lock((os_unfair_lock_t)&unk_18C486D10);
      uint64_t v27 = qword_18C486D08;
      BOOL v28 = (qword_18C486D08 & 3) == 0;
      if ((qword_18C486D08 & 0xFFFFFFFFFFFFFFFCLL) == 0) {
        BOOL v28 = 1;
      }
      BOOL v83 = v28;
      if (v28) {
        int v29 = 4;
      }
      else {
        int v29 = *(unsigned __int8 *)(qword_18C486D08 & 0xFFFFFFFFFFFFFFFCLL);
      }
      unint64_t v41 = dword_18C486CFC;
      uint64_t v42 = (_DWORD *)qword_18C486D00;
      if (!v43)
      {
        char v81 = v27;
        __srca = v42 + 2;
        unint64_t v79 = v27 & 0xFFFFFFFFFFFFFFFCLL;
        uint64_t v47 = (v41 + 1);
        if ((1LL << v29) / (unint64_t)((1LL << v29) - v47) < 4)
        {
          LOBYTE(v53) = v81;
        }

        else
        {
          unsigned int v48 = (v29 + 1);
          if (v48 >= 0x11) {
            unsigned int v49 = 4;
          }
          else {
            unsigned int v49 = 2;
          }
          if (v48 < 9) {
            size_t v50 = 1LL;
          }
          else {
            size_t v50 = v49;
          }
          unint64_t v51 = (unint64_t)calloc(2LL << v29, v50);
          if (!v51) {
            swift::hashable_support::findHashableBaseTypeOfHashableType();
          }
          if ((_DWORD)v50 != 1)
          {
            if ((_DWORD)v50 == 4) {
              size_t v50 = 3LL;
            }
            else {
              size_t v50 = 2LL;
            }
          }

          unint64_t v53 = v50 | v51;
          *(_BYTE *)unint64_t v51 = v29 + 1;
          if (v29) {
            __asm { BR              X9 }
          }

          atomic_store(v53, (unint64_t *)&qword_18C486D08);
          if (!v83)
          {
            uint64_t v65 = malloc(0x10uLL);
            void *v65 = qword_18C486D18;
            v65[1] = v79;
            qword_18C486D18 = (uint64_t)v65;
          }

          LODWORD(v47) = v41 + 1;
        }

        if (!v42 || (unint64_t v66 = (unint64_t)v42, v41 >= *v42))
        {
          uint64_t v67 = v42;
          unint64_t v68 = v41 + (v41 >> 2);
          if (v68 <= v41 + 1) {
            unint64_t v68 = v41 + 1;
          }
          size_t v69 = malloc_good_size(8 * v68 + 8);
          uint64_t v70 = malloc(v69);
          if (!v70) {
            swift::hashable_support::findHashableBaseTypeOfHashableType();
          }
          unint64_t v66 = (unint64_t)v70;
          _DWORD *v70 = (v69 + 0x7FFFFFFF8LL) >> 3;
          if (v67)
          {
            memcpy(v70 + 2, __srca, 8 * v41);
            uint64_t v71 = malloc(0x10uLL);
            void *v71 = qword_18C486D18;
            v71[1] = v67;
            qword_18C486D18 = (uint64_t)v71;
          }

          atomic_store(v66, &qword_18C486D00);
        }

        __int16 v86 = 8;
        unint64_t v72 = swift::MetadataAllocator::Allocate((swift::MetadataAllocator *)&v86, 0x58uLL, (const char *)8, v44);
        uint64_t v73 = v84;
        *(void *)unint64_t v72 = swift::metadataimpl::NonFixedBufferValueWitnesses<swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedOpaqueExistentialBox,true>,true>::initializeBufferWithCopyOfBuffer;
        *((void *)v72 + 1) = swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedOpaqueExistentialBox,true>::destroy;
        *((void *)v72 + 2) = swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedOpaqueExistentialBox,true>::initializeWithCopy;
        *((void *)v72 + 3) = swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedOpaqueExistentialBox,true>::assignWithCopy;
        *((void *)v72 + 4) = swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedOpaqueExistentialBox,true>::initializeWithTake;
        *((void *)v72 + 5) = swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedOpaqueExistentialBox,true>::assignWithTake;
        *((void *)v72 + 6) = swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedOpaqueExistentialBox,true>::getEnumTagSinglePayload;
        *((void *)v72 + 7) = swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedOpaqueExistentialBox,true>::storeEnumTagSinglePayload;
        uint64_t v74 = 8 * v73 + 32;
        *((void *)v72 + 10) = 0x7FFFFFFF00030007LL;
        *((void *)v72 + 8) = v74;
        *((void *)v72 + 9) = v74;
        *(void *)(v66 + 8 * v41 + 8) = v72;
        atomic_store(v47, (unsigned int *)&dword_18C486CFC);
        __asm { BR              X11 }
      }

      unint64_t v3 = *v43;
      __dmb(0xBu);
      if (!OpaqueExistentialValueWitnessTables)
      {
        uint64_t v45 = (void **)qword_18C486D18;
        if (qword_18C486D18)
        {
          do
          {
            uint64_t v46 = (void **)*v45;
            free(v45[1]);
            free(v45);
            uint64_t v45 = v46;
          }

          while (v46);
        }

        qword_18C486D18 = 0LL;
      }

      uint64_t v64 = (os_unfair_lock_s *)&unk_18C486D10;
LABEL_120:
      os_unfair_lock_unlock(v64);
      *(void *)&v64[4]._os_unfair_lock_opaque = v3;
    }
  }

  else
  {
    if (a2 < 3) {
      return (uint64_t (**)())*(&off_189B8D800 + (int)a2);
    }
    unsigned int v84 = a2;
    unint64_t v3 = atomic_load((unint64_t *)&qword_18C575910);
    if (!v3 || v84 != ((unint64_t)(*(void *)(v3 + 64) + 0x7FFFFFFF8LL) >> 3))
    {
      do
        unsigned int v4 = __ldaxr((unsigned int *)&ClassExistentialValueWitnessTables);
      while (__stxr(v4 + 1, (unsigned int *)&ClassExistentialValueWitnessTables));
      do
      {
        unint64_t v5 = atomic_load(&qword_18C5758F0);
        unint64_t v6 = atomic_load((unint64_t *)&qword_18C5758F8);
        unsigned int v7 = atomic_load((unsigned int *)&dword_18C5758EC);
        unint64_t v8 = atomic_load(&qword_18C5758F0);
      }

      while (v5 != v8);
      if (v5) {
        BOOL v9 = v6 == 0;
      }
      else {
        BOOL v9 = 1;
      }
      BOOL v10 = v9 || v7 == 0;
      if (v10
      {
        do
          unsigned int v13 = __ldxr((unsigned int *)&ClassExistentialValueWitnessTables);
        while (__stlxr(v13 - 1, (unsigned int *)&ClassExistentialValueWitnessTables));
        unsigned int v85 = v84;
        os_unfair_lock_lock((os_unfair_lock_t)&unk_18C575900);
        uint64_t v14 = qword_18C5758F8;
        BOOL v15 = (qword_18C5758F8 & 3) == 0;
        if ((qword_18C5758F8 & 0xFFFFFFFFFFFFFFFCLL) == 0) {
          BOOL v15 = 1;
        }
        BOOL v82 = v15;
        if (v15) {
          int v16 = 4;
        }
        else {
          int v16 = *(unsigned __int8 *)(qword_18C5758F8 & 0xFFFFFFFFFFFFFFFCLL);
        }
        unint64_t v30 = dword_18C5758EC;
        size_t v31 = (_DWORD *)qword_18C5758F0;
        if (!v32)
        {
          char v80 = v14;
          char __src = v31 + 2;
          unint64_t v78 = v14 & 0xFFFFFFFFFFFFFFFCLL;
          uint64_t v36 = (v30 + 1);
          if ((1LL << v16) / (unint64_t)((1LL << v16) - v36) < 4)
          {
            LOBYTE(v52) = v80;
          }

          else
          {
            unsigned int v37 = (v16 + 1);
            if (v37 >= 0x11) {
              unsigned int v38 = 4;
            }
            else {
              unsigned int v38 = 2;
            }
            if (v37 < 9) {
              size_t v39 = 1LL;
            }
            else {
              size_t v39 = v38;
            }
            unint64_t v40 = (unint64_t)calloc(2LL << v16, v39);
            if (!v40) {
              swift::hashable_support::findHashableBaseTypeOfHashableType();
            }
            if ((_DWORD)v39 != 1)
            {
              if ((_DWORD)v39 == 4) {
                size_t v39 = 3LL;
              }
              else {
                size_t v39 = 2LL;
              }
            }

            unint64_t v52 = v39 | v40;
            *(_BYTE *)unint64_t v40 = v16 + 1;
            if (v16) {
              __asm { BR              X9 }
            }

            atomic_store(v52, (unint64_t *)&qword_18C5758F8);
            if (!v82)
            {
              char v54 = malloc(0x10uLL);
              *char v54 = qword_18C575908;
              v54[1] = v78;
              qword_18C575908 = (uint64_t)v54;
            }

            LODWORD(v36) = v30 + 1;
          }

          if (!v31 || (unint64_t v55 = (unint64_t)v31, v30 >= *v31))
          {
            uint64_t v56 = v31;
            unint64_t v57 = v30 + (v30 >> 2);
            if (v57 <= v30 + 1) {
              unint64_t v57 = v30 + 1;
            }
            size_t v58 = malloc_good_size(8 * v57 + 8);
            uint64_t v59 = malloc(v58);
            if (!v59) {
              swift::hashable_support::findHashableBaseTypeOfHashableType();
            }
            unint64_t v55 = (unint64_t)v59;
            *uint64_t v59 = (v58 + 0x7FFFFFFF8LL) >> 3;
            if (v56)
            {
              memcpy(v59 + 2, __src, 8 * v30);
              uint64_t v60 = malloc(0x10uLL);
              *uint64_t v60 = qword_18C575908;
              v60[1] = v56;
              qword_18C575908 = (uint64_t)v60;
            }

            atomic_store(v55, &qword_18C5758F0);
          }

          __int16 v86 = 9;
          unint64_t v61 = swift::MetadataAllocator::Allocate((swift::MetadataAllocator *)&v86, 0x58uLL, (const char *)8, v33);
          uint64_t v62 = v84;
          *(void *)unint64_t v61 = swift::metadataimpl::NonFixedBufferValueWitnesses<swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedClassExistentialBox,true>,true>::initializeBufferWithCopyOfBuffer;
          *((void *)v61 + 1) = swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedClassExistentialBox,true>::destroy;
          *((void *)v61 + 2) = swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedClassExistentialBox,true>::initializeWithCopy;
          *((void *)v61 + 3) = swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedClassExistentialBox,true>::assignWithCopy;
          *((void *)v61 + 4) = swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedClassExistentialBox,true>::initializeWithTake;
          *((void *)v61 + 5) = swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedClassExistentialBox,true>::assignWithTake;
          *((void *)v61 + 6) = swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedClassExistentialBox,true>::getEnumTagSinglePayload;
          *((void *)v61 + 7) = swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedClassExistentialBox,true>::storeEnumTagSinglePayload;
          uint64_t v63 = 8 * v62 + 8;
          *((void *)v61 + 10) = 0x7FFFFFFF00030007LL;
          *((void *)v61 + 8) = v63;
          *((void *)v61 + 9) = v63;
          *(void *)(v55 + 8 * v30 + 8) = v61;
          atomic_store(v36, (unsigned int *)&dword_18C5758EC);
          __asm { BR              X11 }
        }

        unint64_t v3 = *v32;
        __dmb(0xBu);
        if (!ClassExistentialValueWitnessTables)
        {
          __int128 v34 = (void **)qword_18C575908;
          if (qword_18C575908)
          {
            do
            {
              uint64_t v35 = (void **)*v34;
              free(v34[1]);
              free(v34);
              __int128 v34 = v35;
            }

            while (v35);
          }

          qword_18C575908 = 0LL;
        }

        uint64_t v64 = (os_unfair_lock_s *)&unk_18C575900;
        goto LABEL_120;
      }

      qword_18C575910 = *v11;
      unint64_t v3 = *v11;
      do
        unsigned int v12 = __ldxr((unsigned int *)&ClassExistentialValueWitnessTables);
      while (__stlxr(v12 - 1, (unsigned int *)&ClassExistentialValueWitnessTables));
    }
  }

  return (uint64_t (**)())v3;
}

void **swift::metadataimpl::BufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::ClassExistentialBox<1u>>,true,16ul,8ul,(swift::metadataimpl::FixedPacking)1>::initializeBufferWithCopyOfBuffer( void **a1, void **a2, uint64_t a3, char *a4)
{
  a1[1] = a2[1];
  unint64_t v5 = *a2;
  *a1 = *a2;
  swift_unknownObjectRetain(v5, (uint64_t)a2, a3, a4);
  return a1;
}

void swift::metadataimpl::ValueWitnesses<swift::metadataimpl::ClassExistentialBox<1u>>::destroy(id *a1)
{
}

void **swift::metadataimpl::ValueWitnesses<swift::metadataimpl::ClassExistentialBox<1u>>::initializeWithCopy( void **a1, void **a2, uint64_t a3, char *a4)
{
  a1[1] = a2[1];
  unint64_t v5 = *a2;
  *a1 = *a2;
  swift_unknownObjectRetain(v5, (uint64_t)a2, a3, a4);
  return a1;
}

uint64_t swift::metadataimpl::ValueWitnesses<swift::metadataimpl::ClassExistentialBox<1u>>::assignWithCopy( uint64_t a1, void **a2, uint64_t a3, char *a4)
{
  *(void *)(a1 + 8) = a2[1];
  unint64_t v5 = *a2;
  unint64_t v6 = *(void **)a1;
  *(void *)a1 = *a2;
  swift_unknownObjectRetain(v5, (uint64_t)a2, a3, a4);
  swift_unknownObjectRelease(v6);
  return a1;
}

void *swift::metadataimpl::ValueWitnesses<swift::metadataimpl::ClassExistentialBox<1u>>::initializeWithTake( void *result, void *a2)
{
  result[1] = a2[1];
  *unint64_t result = *a2;
  return result;
}

uint64_t swift::metadataimpl::ValueWitnesses<swift::metadataimpl::ClassExistentialBox<1u>>::assignWithTake( uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = a2[1];
  unint64_t v3 = *(void **)a1;
  *(void *)a1 = *a2;
  swift_unknownObjectRelease(v3);
  return a1;
}

uint64_t swift::metadataimpl::FixedSizeBufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::ClassExistentialBox<1u>>,true,16ul,8ul,true>::getEnumTagSinglePayload( uint64_t a1, int a2)
{
  if (a2 < 0 && *(_BYTE *)(a1 + 16)) {
    return *(_DWORD *)a1 ^ 0x80000000;
  }
  if (HIDWORD(*(void *)a1)) {
    return 0LL;
  }
  return *(void *)a1 + 1;
}

uint64_t swift::metadataimpl::FixedSizeBufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::ClassExistentialBox<1u>>,true,16ul,8ul,true>::storeEnumTagSinglePayload( uint64_t result, int a2, int a3)
{
  if ((a3 & 0x80000000) == 0)
  {
    if (a2 < 0)
    {
      *(_DWORD *)unint64_t result = a2 ^ 0x80000000;
      *(void *)(result + 4) = 0LL;
      *(_DWORD *)(result + 12) = 0;
      return result;
    }

    if (!a2) {
      return result;
    }
LABEL_7:
    *(void *)unint64_t result = (a2 - 1);
    return result;
  }

  if (a2 < 0)
  {
    *(_DWORD *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 4) = 0LL;
    *(_DWORD *)(result + 12) = 0;
    *(_BYTE *)(result + 16) = 1;
    return result;
  }

  *(_BYTE *)(result + 16) = 0;
  if (a2) {
    goto LABEL_7;
  }
  return result;
}

void **swift::metadataimpl::BufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::ClassExistentialBox<2u>>,true,24ul,8ul,(swift::metadataimpl::FixedPacking)1>::initializeBufferWithCopyOfBuffer( void **a1, void **a2, uint64_t a3, char *a4)
{
  a1[1] = a2[1];
  a1[2] = a2[2];
  unint64_t v5 = *a2;
  *a1 = *a2;
  swift_unknownObjectRetain(v5, (uint64_t)a2, a3, a4);
  return a1;
}

void swift::metadataimpl::ValueWitnesses<swift::metadataimpl::ClassExistentialBox<2u>>::destroy(id *a1)
{
}

void **swift::metadataimpl::ValueWitnesses<swift::metadataimpl::ClassExistentialBox<2u>>::initializeWithCopy( void **a1, void **a2, uint64_t a3, char *a4)
{
  a1[1] = a2[1];
  a1[2] = a2[2];
  unint64_t v5 = *a2;
  *a1 = *a2;
  swift_unknownObjectRetain(v5, (uint64_t)a2, a3, a4);
  return a1;
}

uint64_t swift::metadataimpl::ValueWitnesses<swift::metadataimpl::ClassExistentialBox<2u>>::assignWithCopy( uint64_t a1, void **a2, uint64_t a3, char *a4)
{
  *(void *)(a1 + 8) = a2[1];
  *(void *)(a1 + 16) = a2[2];
  unint64_t v5 = *a2;
  unint64_t v6 = *(void **)a1;
  *(void *)a1 = *a2;
  swift_unknownObjectRetain(v5, (uint64_t)a2, a3, a4);
  swift_unknownObjectRelease(v6);
  return a1;
}

void *swift::metadataimpl::ValueWitnesses<swift::metadataimpl::ClassExistentialBox<2u>>::initializeWithTake( void *result, void *a2)
{
  result[1] = a2[1];
  result[2] = a2[2];
  *unint64_t result = *a2;
  return result;
}

uint64_t swift::metadataimpl::ValueWitnesses<swift::metadataimpl::ClassExistentialBox<2u>>::assignWithTake( uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = a2[1];
  *(void *)(a1 + 16) = a2[2];
  unint64_t v3 = *(void **)a1;
  *(void *)a1 = *a2;
  swift_unknownObjectRelease(v3);
  return a1;
}

uint64_t swift::metadataimpl::FixedSizeBufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::ClassExistentialBox<2u>>,true,24ul,8ul,true>::getEnumTagSinglePayload( uint64_t a1, int a2)
{
  if (a2 < 0 && *(_BYTE *)(a1 + 24)) {
    return *(_DWORD *)a1 ^ 0x80000000;
  }
  if (HIDWORD(*(void *)a1)) {
    return 0LL;
  }
  return *(void *)a1 + 1;
}

uint64_t swift::metadataimpl::FixedSizeBufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::ClassExistentialBox<2u>>,true,24ul,8ul,true>::storeEnumTagSinglePayload( uint64_t result, int a2, int a3)
{
  if ((a3 & 0x80000000) == 0)
  {
    if (a2 < 0)
    {
      *(_DWORD *)unint64_t result = a2 ^ 0x80000000;
      *(void *)(result + 12) = 0LL;
      *(void *)(result + 4) = 0LL;
      *(_DWORD *)(result + 20) = 0;
      return result;
    }

    if (!a2) {
      return result;
    }
LABEL_7:
    *(void *)unint64_t result = (a2 - 1);
    return result;
  }

  if (a2 < 0)
  {
    *(_DWORD *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 12) = 0LL;
    *(void *)(result + 4) = 0LL;
    *(_DWORD *)(result + 20) = 0;
    *(_BYTE *)(result + 24) = 1;
    return result;
  }

  *(_BYTE *)(result + 24) = 0;
  if (a2) {
    goto LABEL_7;
  }
  return result;
}

void swift::ConcurrentReadableHashMap<swift::HashMapElementWrapper<anonymous namespace'::ClassExistentialValueWitnessTableCacheEntry>,swift::LazyMutex>::find<unsigned int>( uint64_t a1, char a2)
{
  if ((v2 & 1) == 0)
  {
    char v5 = a2;
    a2 = v5;
    if (v3)
    {
      unint64_t v4 = __swift::__runtime::llvm::hashing::detail::fixed_seed_override;
      if (!__swift::__runtime::llvm::hashing::detail::fixed_seed_override) {
        unint64_t v4 = 0xFF51AFD7ED558CCDLL;
      }
      __swift::__runtime::llvm::hashing::detail::get_execution_seed(void)::seed = v4;
      a2 = v5;
    }
  }

  __asm { BR              X14 }

char *swift::metadataimpl::NonFixedBufferValueWitnesses<swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedClassExistentialBox,true>,true>::initializeBufferWithCopyOfBuffer( unint64_t **a1, unint64_t **a2, uint64_t a3, char *a4)
{
  uint64_t v4 = *(void *)(a3 - 8);
  char v5 = *a2;
  *a1 = *a2;
  swift_retain(v5, (uint64_t)a2, a3, a4);
  return (char *)v5 + ((*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
}

void swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedClassExistentialBox,true>::destroy( id *a1)
{
}

void *swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedClassExistentialBox,true>::initializeWithCopy( void *a1, void *a2, uint64_t a3, char *a4)
{
  uint64_t v5 = *(_DWORD *)(a3 + 8) & 0xFFFFFF;
  if ((_DWORD)v5)
  {
    uint64_t v6 = 0LL;
    uint64_t v6 = *(_DWORD *)(a3 + 8) & 0xFFFFFCLL;
    unsigned int v7 = (__int128 *)(a2 + 3);
    unint64_t v8 = a1 + 3;
    uint64_t v9 = v6;
    do
    {
      __int128 v10 = *v7;
      *(v8 - 1) = *(v7 - 1);
      *unint64_t v8 = v10;
      v7 += 2;
      v8 += 2;
      v9 -= 4LL;
    }

    while (v9);
    if (v6 != v5)
    {
LABEL_7:
      uint64_t v11 = v5 - v6;
      uint64_t v12 = 8 * v6 + 8;
      unsigned int v13 = (void *)((char *)a1 + v12);
      uint64_t v14 = (void *)((char *)a2 + v12);
      do
      {
        uint64_t v15 = *v14++;
        *v13++ = v15;
        --v11;
      }

      while (v11);
    }
  }

  int v16 = (void *)*a2;
  *a1 = *a2;
  swift_unknownObjectRetain(v16, (uint64_t)a2, a3, a4);
  return a1;
}

void **swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedClassExistentialBox,true>::assignWithCopy( void **a1, void *a2, uint64_t a3, char *a4)
{
  uint64_t v5 = *(_DWORD *)(a3 + 8) & 0xFFFFFF;
  if ((_DWORD)v5)
  {
    uint64_t v6 = 0LL;
    uint64_t v6 = *(_DWORD *)(a3 + 8) & 0xFFFFFCLL;
    unsigned int v7 = (__int128 *)(a2 + 3);
    unint64_t v8 = a1 + 3;
    uint64_t v9 = v6;
    do
    {
      __int128 v10 = *v7;
      *(v8 - 1) = *(v7 - 1);
      *unint64_t v8 = v10;
      v7 += 2;
      v8 += 2;
      v9 -= 4LL;
    }

    while (v9);
    if (v6 != v5)
    {
LABEL_7:
      uint64_t v11 = v5 - v6;
      uint64_t v12 = 8 * v6 + 8;
      unsigned int v13 = (void **)((char *)a1 + v12);
      uint64_t v14 = (void *)((char *)a2 + v12);
      do
      {
        uint64_t v15 = *v14++;
        *v13++ = v15;
        --v11;
      }

      while (v11);
    }
  }

  int v16 = (void *)*a2;
  unsigned int v17 = *a1;
  *a1 = (void *)*a2;
  swift_unknownObjectRetain(v16, (uint64_t)a2, a3, a4);
  swift_unknownObjectRelease(v17);
  return a1;
}

void *swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedClassExistentialBox,true>::initializeWithTake( void *result, void *a2, uint64_t a3)
{
  uint64_t v3 = *(_DWORD *)(a3 + 8) & 0xFFFFFF;
  if ((_DWORD)v3)
  {
    uint64_t v4 = 0LL;
    uint64_t v4 = *(_DWORD *)(a3 + 8) & 0xFFFFFCLL;
    uint64_t v5 = (__int128 *)(a2 + 3);
    uint64_t v6 = result + 3;
    uint64_t v7 = v4;
    do
    {
      __int128 v8 = *v5;
      *(v6 - 1) = *(v5 - 1);
      *uint64_t v6 = v8;
      v5 += 2;
      v6 += 2;
      v7 -= 4LL;
    }

    while (v7);
    if (v4 != v3)
    {
LABEL_7:
      uint64_t v9 = v3 - v4;
      uint64_t v10 = 8 * v4 + 8;
      uint64_t v11 = (void *)((char *)result + v10);
      uint64_t v12 = (void *)((char *)a2 + v10);
      do
      {
        uint64_t v13 = *v12++;
        *v11++ = v13;
        --v9;
      }

      while (v9);
    }
  }

  *unint64_t result = *a2;
  return result;
}

void **swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedClassExistentialBox,true>::assignWithTake( void **a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *(_DWORD *)(a3 + 8) & 0xFFFFFF;
  if ((_DWORD)v4)
  {
    uint64_t v5 = 0LL;
    uint64_t v5 = *(_DWORD *)(a3 + 8) & 0xFFFFFCLL;
    uint64_t v6 = (__int128 *)(a2 + 3);
    uint64_t v7 = a1 + 3;
    uint64_t v8 = v5;
    do
    {
      __int128 v9 = *v6;
      *(v7 - 1) = *(v6 - 1);
      *uint64_t v7 = v9;
      v6 += 2;
      v7 += 2;
      v8 -= 4LL;
    }

    while (v8);
    if (v5 != v4)
    {
LABEL_7:
      uint64_t v10 = v4 - v5;
      uint64_t v11 = 8 * v5 + 8;
      uint64_t v12 = (void **)((char *)a1 + v11);
      uint64_t v13 = (void *)((char *)a2 + v11);
      do
      {
        uint64_t v14 = *v13++;
        *v12++ = v14;
        --v10;
      }

      while (v10);
    }
  }

  uint64_t v15 = *a1;
  *a1 = (void *)*a2;
  swift_unknownObjectRelease(v15);
  return a1;
}

uint64_t swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedClassExistentialBox,true>::getEnumTagSinglePayload( unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 - 8);
  unsigned int v4 = *(_DWORD *)(v3 + 84);
  if (a2 <= v4) {
    goto LABEL_11;
  }
  unint64_t v5 = *(void *)(v3 + 64);
  if (v5 > 3) {
    goto LABEL_5;
  }
  unsigned int v6 = ((a2 - v4 + ~(-1 << (8 * v5))) >> (8 * v5)) + 1;
  if (v6 < 2) {
    goto LABEL_11;
  }
  if (v6 >= 0x100)
  {
    if (v6 >= 0x10000) {
      int v7 = *(_DWORD *)&a1[v5];
    }
    else {
      int v7 = *(unsigned __int16 *)&a1[v5];
    }
  }

  else
  {
LABEL_5:
    int v7 = a1[v5];
  }

  if (!v7)
  {
LABEL_11:
    if (!v4) {
      return 0LL;
    }
    if (HIDWORD(*(void *)a1)) {
      return 0LL;
    }
    return *(void *)a1 + 1;
  }

  int v8 = (v7 - 1) << (8 * v5);
  if (v5 > 3) {
    int v8 = 0;
  }
  int v9 = 0;
  switch(v5)
  {
    case 0uLL:
      return v4 + (v9 | v8) + 1;
    case 1uLL:
      int v9 = *a1;
      break;
    case 2uLL:
      int v9 = *(unsigned __int16 *)a1;
      break;
    case 3uLL:
      int v9 = *(unsigned __int16 *)a1 | (a1[2] << 16);
      break;
    default:
      int v9 = *(_DWORD *)a1;
      break;
  }

  return v4 + (v9 | v8) + 1;
}

void swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedClassExistentialBox,true>::storeEnumTagSinglePayload( _BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a4 - 8);
  unint64_t v7 = *(void *)(v6 + 64);
  unsigned int v8 = *(_DWORD *)(v6 + 84);
  int v9 = &a1[v7];
  if (a3 <= v8)
  {
    if (v8 >= a2) {
      goto LABEL_37;
    }
    unsigned int v13 = 0;
LABEL_10:
    unsigned int v14 = ~v8 + a2;
    if (v7 > 3)
    {
      int v15 = 1;
      goto LABEL_15;
    }

    char v10 = 8 * v7;
    int v11 = ~(-1 << (8 * v7));
LABEL_13:
    int v15 = (v14 >> v10) + 1;
    if (!v7)
    {
LABEL_21:
      switch(v13)
      {
        case 0u:
          return;
        case 1u:
          *int v9 = v15;
          break;
        case 2u:
          *(_WORD *)int v9 = v15;
          break;
        case 3u:
          *(_WORD *)int v9 = v15;
          v9[2] = BYTE2(v15);
          break;
        case 4u:
          *(_DWORD *)int v9 = v15;
          break;
        default:
          *(_DWORD *)int v9 = v15;
          bzero(v9 + 4, v13 - 4LL);
          break;
      }

      return;
    }

    v14 &= v11;
LABEL_15:
    switch(v7)
    {
      case 1uLL:
        *a1 = v14;
        break;
      case 2uLL:
        *(_WORD *)a1 = v14;
        break;
      case 3uLL:
        *(_WORD *)a1 = v14;
        a1[2] = BYTE2(v14);
        break;
      case 4uLL:
        *(_DWORD *)a1 = v14;
        break;
      default:
        *(_DWORD *)a1 = v14;
        bzero(a1 + 4, v7 - 4);
        break;
    }

    goto LABEL_21;
  }

  if (v7 > 3) {
    goto LABEL_9;
  }
  char v10 = 8 * v7;
  int v11 = ~(-1 << (8 * v7));
  unsigned int v12 = ((a3 - v8 + v11) >> (8 * v7)) + 1;
  if (v12 >= 2)
  {
    if (v12 >= 0x100)
    {
      if (v12 >= 0x10000) {
        unsigned int v13 = 4;
      }
      else {
        unsigned int v13 = 2;
      }
      if (v8 < a2) {
        goto LABEL_10;
      }
      goto LABEL_31;
    }

char *swift::metadataimpl::BufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::OpaqueExistentialBox<1u>>,true,40ul,8ul,(swift::metadataimpl::FixedPacking)0>::initializeBufferWithCopyOfBuffer( unint64_t **a1, unint64_t **a2, uint64_t a3, char *a4)
{
  uint64_t v4 = *(void *)(a3 - 8);
  unint64_t v5 = *a2;
  *a1 = *a2;
  swift_retain(v5, (uint64_t)a2, a3, a4);
  return (char *)v5 + ((*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
}

uint64_t swift::metadataimpl::ValueWitnesses<swift::metadataimpl::OpaqueExistentialBox<1u>>::destroy( uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0) {
    return swift_release(*a1);
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

unint64_t **swift::metadataimpl::ValueWitnesses<swift::metadataimpl::OpaqueExistentialBox<1u>>::initializeWithCopy( unint64_t **a1, unint64_t **a2, uint64_t a3, char *a4)
{
  a1[3] = a2[3];
  a1[4] = a2[4];
  uint64_t v5 = (uint64_t)a2[3];
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(_BYTE *)(v6 + 82) & 2) != 0)
  {
    unint64_t v7 = *a2;
    *a1 = *a2;
    swift_retain(v7, (uint64_t)a2, v5, a4);
  }

  else
  {
    (*(void (**)(unint64_t **))(v6 + 16))(a1);
  }

  return a1;
}

__n128 swift::metadataimpl::ValueWitnesses<swift::metadataimpl::OpaqueExistentialBox<1u>>::initializeWithTake( __n128 *a1, __n128 *a2)
{
  a1[1].n128_u64[1] = a2[1].n128_u64[1];
  a1[2].n128_u64[0] = a2[2].n128_u64[0];
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t swift::metadataimpl::FixedSizeBufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::OpaqueExistentialBox<1u>>,true,40ul,8ul,true>::getEnumTagSinglePayload( uint64_t a1, int a2)
{
  if (a2 < 0 && *(_BYTE *)(a1 + 40)) {
    return *(_DWORD *)a1 ^ 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (HIDWORD(v2)) {
    return 0LL;
  }
  else {
    return (v2 + 1);
  }
}

double swift::metadataimpl::FixedSizeBufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::OpaqueExistentialBox<1u>>,true,40ul,8ul,true>::storeEnumTagSinglePayload( uint64_t a1, int a2, int a3)
{
  if ((a3 & 0x80000000) == 0)
  {
    if (a2 < 0)
    {
      *(_DWORD *)a1 = a2 ^ 0x80000000;
      double result = 0.0;
      *(_OWORD *)(a1 + 4) = 0u;
      *(_OWORD *)(a1 + 20) = 0u;
      *(_DWORD *)(a1 + 36) = 0;
      return result;
    }

    if (!a2) {
      return result;
    }
LABEL_7:
    *(void *)(a1 + 24) = (a2 - 1);
    return result;
  }

  if (a2 < 0)
  {
    *(_DWORD *)a1 = a2 ^ 0x80000000;
    double result = 0.0;
    *(_OWORD *)(a1 + 4) = 0u;
    *(_OWORD *)(a1 + 20) = 0u;
    *(_DWORD *)(a1 + 36) = 0;
    *(_BYTE *)(a1 + 40) = 1;
    return result;
  }

  *(_BYTE *)(a1 + 40) = 0;
  if (a2) {
    goto LABEL_7;
  }
  return result;
}

uint64_t *swift::metadataimpl::OpaqueExistentialBoxBase::assignWithTake<swift::metadataimpl::OpaqueExistentialBox<1u>::Container>( uint64_t *a1, uint64_t *a2)
{
  if (a2 == a1) {
    return a1;
  }
  uint64_t v4 = a2[3];
  uint64_t v5 = a1[3];
  if (v4 == v5)
  {
    uint64_t v8 = *(void *)(v4 - 8);
    if ((*(_BYTE *)(v8 + 82) & 2) == 0)
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 40))(a1, a2, a2[3]);
      return a1;
    }

    uint64_t v10 = *a1;
    *a1 = *a2;
LABEL_15:
    swift_release(v10);
    return a1;
  }

  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v4 - 8);
  if ((*(_BYTE *)(v6 + 82) & 2) != 0)
  {
    uint64_t v9 = *a1;
    a1[3] = v4;
    a1[4] = a2[4];
    if ((*(_BYTE *)(v7 + 82) & 2) != 0) {
      *a1 = *a2;
    }
    else {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v4 - 8) + 32LL))(a1, a2, v4);
    }
    uint64_t v10 = v9;
    goto LABEL_15;
  }

  (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v12, a1, a1[3]);
  a1[3] = a2[3];
  a1[4] = a2[4];
  if ((*(_BYTE *)(v7 + 82) & 2) != 0) {
    *a1 = *a2;
  }
  else {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v4 - 8) + 32LL))(a1, a2, v4);
  }
  (*(void (**)(_BYTE *, uint64_t))(*(void *)(v5 - 8) + 8LL))(v12, v5);
  return a1;
}

void swift::ConcurrentReadableHashMap<swift::HashMapElementWrapper<anonymous namespace'::OpaqueExistentialValueWitnessTableCacheEntry>,swift::LazyMutex>::find<unsigned int>( uint64_t a1, char a2)
{
  if ((v2 & 1) == 0)
  {
    char v5 = a2;
    a2 = v5;
    if (v3)
    {
      unint64_t v4 = __swift::__runtime::llvm::hashing::detail::fixed_seed_override;
      if (!__swift::__runtime::llvm::hashing::detail::fixed_seed_override) {
        unint64_t v4 = 0xFF51AFD7ED558CCDLL;
      }
      __swift::__runtime::llvm::hashing::detail::get_execution_seed(void)::seed = v4;
      a2 = v5;
    }
  }

  __asm { BR              X14 }

char *swift::metadataimpl::NonFixedBufferValueWitnesses<swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedOpaqueExistentialBox,true>,true>::initializeBufferWithCopyOfBuffer( unint64_t **a1, unint64_t **a2, uint64_t a3, char *a4)
{
  uint64_t v4 = *(void *)(a3 - 8);
  char v5 = *a2;
  *a1 = *a2;
  swift_retain(v5, (uint64_t)a2, a3, a4);
  return (char *)v5 + ((*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
}

uint64_t swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedOpaqueExistentialBox,true>::destroy( uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0) {
    return swift_release(*a1);
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

void *swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedOpaqueExistentialBox,true>::initializeWithCopy( void *a1, void *a2, uint64_t a3, char *a4)
{
  int v5 = *(_DWORD *)(a3 + 8);
  a1[3] = a2[3];
  uint64_t v6 = *(void *)&v5 & 0xFFFFFFLL;
  if ((_DWORD)v6)
  {
    uint64_t v7 = 0LL;
    uint64_t v7 = v6 & 0xFFFFFC;
    uint64_t v8 = (__int128 *)(a2 + 6);
    uint64_t v9 = a1 + 6;
    uint64_t v10 = v6 & 0xFFFFFC;
    do
    {
      __int128 v11 = *v8;
      *(v9 - 1) = *(v8 - 1);
      *uint64_t v9 = v11;
      v8 += 2;
      v9 += 2;
      v10 -= 4LL;
    }

    while (v10);
    if (v7 != v6)
    {
LABEL_7:
      uint64_t v12 = v6 - v7;
      uint64_t v13 = 8 * v7 + 32;
      unsigned int v14 = (void *)((char *)a1 + v13);
      int v15 = (void *)((char *)a2 + v13);
      do
      {
        uint64_t v16 = *v15++;
        *v14++ = v16;
        --v12;
      }

      while (v12);
    }
  }

  uint64_t v17 = a2[3];
  uint64_t v18 = *(void *)(v17 - 8);
  if ((*(_BYTE *)(v18 + 82) & 2) != 0)
  {
    unint64_t v19 = (unint64_t *)*a2;
    *a1 = *a2;
    swift_retain(v19, (uint64_t)a2, v17, a4);
  }

  else
  {
    (*(void (**)(void *))(v18 + 16))(a1);
  }

  return a1;
}

__n128 swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedOpaqueExistentialBox,true>::initializeWithTake( __n128 *a1, __n128 *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a3 + 8);
  a1[1].n128_u64[1] = a2[1].n128_u64[1];
  uint64_t v4 = *(void *)&v3 & 0xFFFFFFLL;
  if ((_DWORD)v4)
  {
    uint64_t v5 = 0LL;
    uint64_t v5 = v4 & 0xFFFFFC;
    uint64_t v6 = a2 + 3;
    uint64_t v7 = a1 + 3;
    uint64_t v8 = v4 & 0xFFFFFC;
    do
    {
      __n128 v9 = *v6;
      v7[-1] = v6[-1];
      *uint64_t v7 = v9;
      v6 += 2;
      v7 += 2;
      v8 -= 4LL;
    }

    while (v8);
    if (v5 != v4)
    {
LABEL_7:
      uint64_t v10 = v4 - v5;
      uint64_t v11 = 8 * v5 + 32;
      uint64_t v12 = (unint64_t *)((char *)a1->n128_u64 + v11);
      uint64_t v13 = (uint64_t *)((char *)a2 + v11);
      do
      {
        uint64_t v14 = *v13++;
        *v12++ = v14;
        --v10;
      }

      while (v10);
    }
  }

  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedOpaqueExistentialBox,true>::getEnumTagSinglePayload( unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 - 8);
  unsigned int v4 = *(_DWORD *)(v3 + 84);
  if (a2 <= v4) {
    goto LABEL_11;
  }
  unint64_t v5 = *(void *)(v3 + 64);
  if (v5 > 3) {
    goto LABEL_5;
  }
  unsigned int v6 = ((a2 - v4 + ~(-1 << (8 * v5))) >> (8 * v5)) + 1;
  if (v6 < 2) {
    goto LABEL_11;
  }
  if (v6 >= 0x100)
  {
    if (v6 >= 0x10000) {
      int v7 = *(_DWORD *)&a1[v5];
    }
    else {
      int v7 = *(unsigned __int16 *)&a1[v5];
    }
  }

  else
  {
LABEL_5:
    int v7 = a1[v5];
  }

  if (!v7)
  {
LABEL_11:
    if (!v4) {
      return 0LL;
    }
    unint64_t v10 = *((void *)a1 + 3);
    if (HIDWORD(v10)) {
      return 0LL;
    }
    else {
      return (v10 + 1);
    }
  }

  int v8 = (v7 - 1) << (8 * v5);
  if (v5 > 3) {
    int v8 = 0;
  }
  int v9 = 0;
  switch(v5)
  {
    case 0uLL:
      return v4 + (v9 | v8) + 1;
    case 1uLL:
      int v9 = *a1;
      break;
    case 2uLL:
      int v9 = *(unsigned __int16 *)a1;
      break;
    case 3uLL:
      int v9 = *(unsigned __int16 *)a1 | (a1[2] << 16);
      break;
    default:
      int v9 = *(_DWORD *)a1;
      break;
  }

  return v4 + (v9 | v8) + 1;
}

void swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedOpaqueExistentialBox,true>::storeEnumTagSinglePayload( uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a4 - 8);
  unint64_t v7 = *(void *)(v6 + 64);
  unsigned int v8 = *(_DWORD *)(v6 + 84);
  int v9 = (_BYTE *)(a1 + v7);
  if (a3 <= v8)
  {
    if (v8 >= a2) {
      goto LABEL_37;
    }
    unsigned int v13 = 0;
LABEL_10:
    unsigned int v14 = ~v8 + a2;
    if (v7 > 3)
    {
      int v15 = 1;
      goto LABEL_15;
    }

    char v10 = 8 * v7;
    int v11 = ~(-1 << (8 * v7));
LABEL_13:
    int v15 = (v14 >> v10) + 1;
    if (!v7)
    {
LABEL_21:
      switch(v13)
      {
        case 0u:
          return;
        case 1u:
          *int v9 = v15;
          break;
        case 2u:
          *(_WORD *)int v9 = v15;
          break;
        case 3u:
          *(_WORD *)int v9 = v15;
          v9[2] = BYTE2(v15);
          break;
        case 4u:
          *(_DWORD *)int v9 = v15;
          break;
        default:
          *(_DWORD *)int v9 = v15;
          bzero(v9 + 4, v13 - 4LL);
          break;
      }

      return;
    }

    v14 &= v11;
LABEL_15:
    switch(v7)
    {
      case 1uLL:
        *(_BYTE *)a1 = v14;
        break;
      case 2uLL:
        *(_WORD *)a1 = v14;
        break;
      case 3uLL:
        *(_WORD *)a1 = v14;
        *(_BYTE *)(a1 + 2) = BYTE2(v14);
        break;
      case 4uLL:
        *(_DWORD *)a1 = v14;
        break;
      default:
        *(_DWORD *)a1 = v14;
        bzero((void *)(a1 + 4), v7 - 4);
        break;
    }

    goto LABEL_21;
  }

  if (v7 > 3) {
    goto LABEL_9;
  }
  char v10 = 8 * v7;
  int v11 = ~(-1 << (8 * v7));
  unsigned int v12 = ((a3 - v8 + v11) >> (8 * v7)) + 1;
  if (v12 >= 2)
  {
    if (v12 >= 0x100)
    {
      if (v12 >= 0x10000) {
        unsigned int v13 = 4;
      }
      else {
        unsigned int v13 = 2;
      }
      if (v8 < a2) {
        goto LABEL_10;
      }
      goto LABEL_31;
    }

uint64_t *swift::metadataimpl::OpaqueExistentialBoxBase::assignWithTake<swift::metadataimpl::NonFixedOpaqueExistentialBox::Container,swift::TargetMetadata<swift::InProcess> const*>( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if (a2 == a1) {
    return a1;
  }
  uint64_t v5 = a2[3];
  uint64_t v6 = a1[3];
  if (v5 == v6)
  {
    uint64_t v22 = *(void *)(v5 - 8);
    if ((*(_BYTE *)(v22 + 82) & 2) == 0)
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v22 + 40))(a1, a2, a2[3]);
      return a1;
    }

    uint64_t v36 = *a1;
    *a1 = *a2;
LABEL_31:
    swift_release(v36);
    return a1;
  }

  uint64_t v8 = *(void *)(v6 - 8);
  uint64_t v9 = *(void *)(v5 - 8);
  if ((*(_BYTE *)(v8 + 82) & 2) != 0)
  {
    uint64_t v23 = *a1;
    int v24 = *(_DWORD *)(a3 + 8);
    a1[3] = v5;
    uint64_t v25 = *(void *)&v24 & 0xFFFFFFLL;
    if ((_DWORD)v25)
    {
      uint64_t v26 = 0LL;
      uint64_t v26 = v25 & 0xFFFFFC;
      uint64_t v27 = (__int128 *)(a2 + 6);
      BOOL v28 = a1 + 6;
      uint64_t v29 = v25 & 0xFFFFFC;
      do
      {
        __int128 v30 = *v27;
        *(v28 - 1) = *(v27 - 1);
        *BOOL v28 = v30;
        v27 += 2;
        v28 += 2;
        v29 -= 4LL;
      }

      while (v29);
      if (v26 != v25)
      {
LABEL_22:
        uint64_t v31 = v25 - v26;
        uint64_t v32 = 8 * v26 + 32;
        uint64_t v33 = (uint64_t *)((char *)a1 + v32);
        __int128 v34 = (uint64_t *)((char *)a2 + v32);
        do
        {
          uint64_t v35 = *v34++;
          *v33++ = v35;
          --v31;
        }

        while (v31);
      }
    }

    if ((*(_BYTE *)(v9 + 82) & 2) != 0) {
      *a1 = *a2;
    }
    else {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v5 - 8) + 32LL))(a1, a2, v5);
    }
    uint64_t v36 = v23;
    goto LABEL_31;
  }

  (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v8 + 32))(v38, a1, a1[3]);
  int v10 = *(_DWORD *)(a3 + 8);
  a1[3] = a2[3];
  uint64_t v11 = *(void *)&v10 & 0xFFFFFFLL;
  if ((_DWORD)v11)
  {
    uint64_t v12 = 0LL;
    uint64_t v12 = v11 & 0xFFFFFC;
    unsigned int v13 = (__int128 *)(a2 + 6);
    unsigned int v14 = a1 + 6;
    uint64_t v15 = v11 & 0xFFFFFC;
    do
    {
      __int128 v16 = *v13;
      *(v14 - 1) = *(v13 - 1);
      *unsigned int v14 = v16;
      v13 += 2;
      v14 += 2;
      v15 -= 4LL;
    }

    while (v15);
    if (v12 != v11)
    {
LABEL_10:
      uint64_t v17 = v11 - v12;
      uint64_t v18 = 8 * v12 + 32;
      unint64_t v19 = (uint64_t *)((char *)a1 + v18);
      unsigned int v20 = (uint64_t *)((char *)a2 + v18);
      do
      {
        uint64_t v21 = *v20++;
        *v19++ = v21;
        --v17;
      }

      while (v17);
    }
  }

  if ((*(_BYTE *)(v9 + 82) & 2) != 0) {
    *a1 = *a2;
  }
  else {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v5 - 8) + 32LL))(a1, a2, v5);
  }
  (*(void (**)(_BYTE *, uint64_t))(*(void *)(v6 - 8) + 8LL))(v38, v6);
  return a1;
}

void swift::ConcurrentReadableHashMap<swift::HashMapElementWrapper<anonymous namespace'::ExtendedExistentialTypeShapeCacheEntry>,swift::LazyMutex>::find<anonymous namespace'::ExtendedExistentialTypeShapeCacheEntry::Key>( uint64_t a1, char a2)
{
  __asm { BR              X8 }

void sub_181771D44( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v15 = (a10 >> (4 * v13)) & 0xF;
  if (!(_DWORD)v15) {
    goto LABEL_8;
  }
  unint64_t v16 = (v15 - 1);
  if (v16 < v12)
  {
    uint64_t v17 = **(void **)(a12 + 8 * v16);
    if (v17 == *(void *)v14) {
      goto LABEL_8;
    }
    size_t v18 = *(void *)(v14 + 16);
    unint64_t v19 = (const char *)(*(int *)(v17 + 8) + v17 + 8);
    if (!v19) {
      JUMPOUT(0x181771D20LL);
    }
    if (strlen(v19) == v18 && (!v18 || !memcmp(v19, *(const void **)(v14 + 8), v18))) {
LABEL_8:
    }
      JUMPOUT(0x181771E14LL);
  }

  JUMPOUT(0x181771D24LL);
}

void swift::ConcurrentReadableHashMap<swift::HashMapElementWrapper<anonymous namespace'::ExtendedExistentialTypeCacheEntry>,swift::LazyMutex>::find<anonymous namespace'::ExtendedExistentialTypeCacheEntry::Key>( uint64_t a1, char a2)
{
  v3[0] = *(_DWORD *)(a1 + 24);
  __swift::__runtime::llvm::hash_combine<__swift::__runtime::llvm::hash_code,unsigned int>((void *)(a1 + 32), v3);
  __asm { BR              X8 }

uint64_t sub_181771EDC()
{
  uint64_t v4 = (v10 >> (4 * v3)) & 0xF;
  if (!(_DWORD)v4) {
    return 0LL;
  }
  unint64_t v5 = (v4 - 1);
  if (v5 >= v1
    || (uint64_t v6 = *(void *)(v0 + 8 * v5),
        uint64_t v12 = *(void *)(v2 + 32),
        __int128 v7 = *(_OWORD *)(v2 + 16),
        v11[0] = *(_OWORD *)v2,
        v11[1] = v7,
        uint64_t v8 = *(void *)(v6 + 24),
        v8 != v12)
    || !swift::MetadataCacheKey::operator==((uint64_t)v13, (uint64_t)v11))
  {
    JUMPOUT(0x181771EBCLL);
  }

  return v0 + 8 * v5;
}

uint64_t swift::MetadataCacheEntryBase<anonymous namespace'::ForeignMetadataCacheEntry,int>::awaitSatisfyingState( unint64_t *a1, __int16 a2)
{
  char v4 = atomic_load(a1);
  unsigned int v5 = v4 & 7;
  if (v5 - 1 >= 3)
  {
    if (v5 == 4) {
      return a1[1];
    }
    if ((v4 & 7) != 0) {
      goto LABEL_60;
    }
    uint64_t v7 = a2 & 0x100;
  }

  else
  {
    if (a2 > 0x3Eu)
    {
      if (v5 > 1) {
        goto LABEL_15;
      }
    }

    else if ((_BYTE)a2)
    {
      if (v5 >= 3) {
        return a1[1];
      }
    }

    uint64_t v7 = a2 & 0x100;
    if ((v4 & 8) != 0 && (a2 & 0x100) != 0)
    {
LABEL_15:
      uint64_t v6 = a1[1];
      if (v5 == 1 || v5 == 3 || v5 == 2) {
        return v6;
      }
LABEL_60:
      abort();
    }
  }

  uint64_t v8 = 0LL;
  uint64_t v21 = &unk_18C476AF0;
  uint64_t v22 = 0LL;
  __int16 v23 = 0;
  int v9 = a2;
  while (1)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&unk_18C476AF0);
    if (v8)
    {
      if (*v8 == 1LL)
      {
        unint64_t v10 = (void *)v8[2];
        void v8[2] = 0LL;
        if (v10) {
          operator delete(v10);
        }
        swift_slowDealloc(v8);
      }

      else
      {
        --*v8;
      }
    }

    unint64_t v11 = *a1;
    uint64_t v12 = *a1 & 7;
    if ((_DWORD)v12)
    {
      if ((_DWORD)v12 == 4)
      {
LABEL_50:
        os_unfair_lock_unlock((os_unfair_lock_t)&unk_18C476AF0);
        uint64_t v6 = a1[1];
        goto LABEL_55;
      }

      goto LABEL_60;
    }

uint64_t swift::MetadataCacheEntryBase<anonymous namespace'::ForeignMetadataCacheEntry,int>::doInitialization( uint64_t a1, uint64_t a2, __int16 a3)
{
  uint64_t v7 = *(uint64_t **)(a1 + 8);
  uint64_t v8 = *(void *)(a2 + 8);
  size_t v39 = *(__int128 **)(v8 + 16);
  if (!v39)
  {
    __int128 v41 = 0u;
    __int128 v42 = 0u;
    size_t v39 = &v41;
  }

  uint64_t v40 = a3;
  int v9 = a3;
  for (uint64_t i = v7; ; uint64_t i = *(uint64_t **)(a1 + 8))
  {
    unsigned int v11 = *(unsigned __int8 *)(a2 + 17);
    unint64_t ForeignMetadataInitialization = (int *)swift::TargetTypeContextDescriptor<swift::InProcess>::getForeignMetadataInitialization((unsigned int *)i[1]);
    uint64_t v16 = *ForeignMetadataInitialization;
    uint64_t v17 = (int *)((char *)ForeignMetadataInitialization + v16);
    BOOL v18 = !(_DWORD)v16 || v17 == 0LL;
    if (v18 || (uint64_t v19 = ((uint64_t (*)(uint64_t *, __int128 *, void))v17)(v7, v39, 0LL)) == 0)
    {
      uint64_t v20 = checkTransitiveCompleteness(v7, v13, v14, v15);
      if (!v20)
      {
        unsigned __int8 v29 = 4;
        *(_BYTE *)(a2 + 17) = 4;
        unsigned __int8 v21 = 4;
        goto LABEL_40;
      }

      unsigned __int8 v21 = 3;
    }

    else
    {
      uint64_t v20 = v19;
      unsigned __int8 v21 = (*(_BYTE *)(*(v7 - 1) + 82) & 0x40) != 0 ? 1 : 2;
    }

    uint64_t v3 = v13;
    *(_BYTE *)(a2 + 17) = v21;
    if (v9 > 62) {
      break;
    }
    if (v9)
    {
      if (v9 != 1) {
        goto LABEL_52;
      }
      if (v21 == 3) {
        goto LABEL_38;
      }
    }

void swift::ConcurrentReadableHashMap<swift::HashMapElementWrapper<anonymous namespace'::WitnessTableCacheEntry>,swift::Mutex>::find<swift::TargetMetadata<swift::InProcess> const*>( uint64_t a1, char a2)
{
  if ((v2 & 1) == 0)
  {
    char v5 = a2;
    a2 = v5;
    if (v3)
    {
      unint64_t v4 = __swift::__runtime::llvm::hashing::detail::fixed_seed_override;
      if (!__swift::__runtime::llvm::hashing::detail::fixed_seed_override) {
        unint64_t v4 = 0xFF51AFD7ED558CCDLL;
      }
      __swift::__runtime::llvm::hashing::detail::get_execution_seed(void)::seed = v4;
      a2 = v5;
    }
  }

  __asm { BR              X13 }

void swift::ConcurrentReadableHashMap<swift::HashMapElementWrapper<anonymous namespace'::RelativeWitnessTableCacheEntry>,swift::Mutex>::find<swift::TargetMetadata<swift::InProcess> const*>( uint64_t a1, char a2)
{
  if ((v2 & 1) == 0)
  {
    char v5 = a2;
    a2 = v5;
    if (v3)
    {
      unint64_t v4 = __swift::__runtime::llvm::hashing::detail::fixed_seed_override;
      if (!__swift::__runtime::llvm::hashing::detail::fixed_seed_override) {
        unint64_t v4 = 0xFF51AFD7ED558CCDLL;
      }
      __swift::__runtime::llvm::hashing::detail::get_execution_seed(void)::seed = v4;
      a2 = v5;
    }
  }

  __asm { BR              X13 }

unint64_t swift::ResolveAsSymbolicReference::operator()( swift::Demangle::__runtime::NodeFactory **a1, int a2, int a3, uint64_t a4, swift::SymbolInfo *this)
{
  if ((_DWORD)a4) {
    int v9 = (char *)this + (int)a4;
  }
  else {
    int v9 = 0LL;
  }
  if (a2 == 1) {
    unint64_t v10 = v9;
  }
  else {
    unint64_t v10 = (void *)((char *)this + (int)a4);
  }
  if (a3 == 1)
  {
    if (a2) {
      abort();
    }
    unint64_t v10 = (void *)*v10;
  }

  if (!v10)
  {
    swift::SymbolInfo::lookup(this, (uint64_t)v24);
    if (v24[32])
    {
      if (swift::SymbolInfo::getFilename((swift::SymbolInfo *)v24)) {
        Filename = (const char *)swift::SymbolInfo::getFilename((swift::SymbolInfo *)v24);
      }
      else {
        Filename = "<unknown>";
      }
      else {
        uint64_t v22 = "<unknown>";
      }
    }

    else
    {
      uint64_t v22 = "<unknown>";
      Filename = "<unknown>";
    }

    swift::fatalError( 0LL,  "Failed to look up symbolic reference at %p - offset %d - symbol %s in %s\n",  v20,  v21,  this,  a4,  v22,  Filename);
  }

  __int16 v11 = 299;
  switch(a2)
  {
    case 0:
      int v12 = *(_DWORD *)v10 & 0x1F;
      if (v12 == 3)
      {
        __int16 v13 = 181;
        uint64_t v14 = *a1;
        return swift::Demangle::__runtime::NodeFactory::createNode(v14, v13, (uint64_t)v10);
      }

      if (v12 == 4)
      {
        __int16 v13 = 301;
        uint64_t v14 = *a1;
        return swift::Demangle::__runtime::NodeFactory::createNode(v14, v13, (uint64_t)v10);
      }

      if ((*(_DWORD *)v10 & 0x10) == 0) {
        return 0LL;
      }
      Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode( *a1,  233,  (uint64_t)v10);
      uint64_t v16 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*a1, 232);
      swift::Demangle::__runtime::Node::addChild(v16, Node, *a1, v18, v19);
      return (unint64_t)v16;
    case 2:
      __int16 v11 = 336;
      goto LABEL_18;
    case 3:
      __int16 v11 = 337;
      goto LABEL_18;
    case 4:
      __int16 v11 = 347;
      goto LABEL_18;
    default:
LABEL_18:
      uint64_t v14 = *a1;
      __int16 v13 = v11;
      return swift::Demangle::__runtime::NodeFactory::createNode(v14, v13, (uint64_t)v10);
  }

unsigned int *swift::ResolveToDemanglingForContext::operator()( swift::Demangle::__runtime::NodeFactory **a1, int a2, int a3, int a4, uint64_t a5)
{
  char v5 = (uint64_t *)(a5 + a4);
  if (a4) {
    uint64_t v6 = (uint64_t *)(a5 + a4);
  }
  else {
    uint64_t v6 = 0LL;
  }
  if (a2 == 1) {
    char v5 = v6;
  }
  if (a3 == 1)
  {
    if (a2) {
      abort();
    }
    char v5 = (uint64_t *)*v5;
  }

  return _buildDemanglingForSymbolicReference(a2, (uint64_t **)v5, *a1);
}

unsigned int *_buildDemanglingForSymbolicReference( int a1, uint64_t **a2, swift::Demangle::__runtime::NodeFactory *a3)
{
  switch(a1)
  {
    case 0:
      return swift::_buildDemanglingForContext(a2, 0LL, 0LL, a3);
    case 1:
      uint64_t v6 = a3;
      __int16 v7 = 299;
      return (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(v6, v7, (uint64_t)a2);
    case 2:
      uint64_t v6 = a3;
      __int16 v7 = 336;
      return (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(v6, v7, (uint64_t)a2);
    case 3:
      uint64_t v6 = a3;
      __int16 v7 = 337;
      return (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(v6, v7, (uint64_t)a2);
    case 4:
      uint64_t v6 = a3;
      __int16 v7 = 347;
      return (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(v6, v7, (uint64_t)a2);
    default:
      abort();
  }

void swift::addImageTypeMetadataRecordBlockCallbackUnsafe(swift *this, unint64_t a2, const void *a3)
{
}

void _registerTypeMetadataRecords(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v6 = (os_unfair_lock_s *)(a1 + 64);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  __int16 v7 = *(unint64_t **)(a1 + 56);
  if (v7) {
    unint64_t v8 = *v7;
  }
  else {
    unint64_t v8 = 0LL;
  }
  int v9 = *(unint64_t **)(a1 + 56);
  if (v8 >= *(void *)(a1 + 40))
  {
    if (2 * v8 <= 0x10) {
      unint64_t v10 = 16LL;
    }
    else {
      unint64_t v10 = 2 * v8;
    }
    __int16 v11 = (unint64_t *)malloc((32 * (v10 >> 1)) | 8);
    if (!v11) {
      swift::hashable_support::findHashableBaseTypeOfHashableType();
    }
    int v9 = v11;
    *__int16 v11 = 0LL;
    if (v7)
    {
      if (v8)
      {
        int v12 = v11 + 1;
        __int16 v13 = (__int128 *)(v7 + 1);
        unint64_t v14 = v8;
        do
        {
          __int128 v15 = *v13++;
          *v12++ = v15;
          --v14;
        }

        while (v14);
      }

      atomic_store(v8, v11);
      uint64_t v16 = malloc(0x10uLL);
      *uint64_t v16 = *(void *)(a1 + 72);
      v16[1] = v7;
      *(void *)(a1 + 72) = v16;
    }

    *(void *)(a1 + 40) = v10;
    atomic_store((unint64_t)v9, (unint64_t *)(a1 + 56));
  }

  uint64_t v17 = &v9[2 * v8];
  v17[1] = a2;
  _OWORD v17[2] = a3;
  atomic_store(v8 + 1, v9);
  __dmb(0xBu);
  if (!*(void *)(a1 + 48))
  {
    uint64_t v18 = *(void **)(a1 + 72);
    if (v18)
    {
      do
      {
        uint64_t v20 = (void *)*v18;
        uint64_t v19 = (unint64_t *)v18[1];
        unint64_t v21 = -1LL;
        do
        {
          unint64_t v22 = atomic_load(v19);
          ++v21;
        }

        while (v21 < v22);
        free(v19);
        free(v18);
        uint64_t v18 = v20;
      }

      while (v20);
    }

    *(void *)(a1 + 72) = 0LL;
  }

  os_unfair_lock_unlock(v6);
}

uint64_t swift::Lazy<TypeMetadataPrivateState>::defaultInitCallback(uint64_t a1)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + 8) = 0LL;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 72) = 0LL;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 64) = 0;
  return swift::initializeTypeMetadataRecordLookup((swift *)a1);
}

void swift_registerTypeMetadataRecords(unint64_t a1, unint64_t a2)
{
  if (qword_18C486D78 != -1) {
    dispatch_once_f( &qword_18C486D78,  &TypeMetadataRecords,  (dispatch_function_t)swift::Lazy<TypeMetadataPrivateState>::defaultInitCallback);
  }
  _registerTypeMetadataRecords((uint64_t)&TypeMetadataRecords, a1, a2);
}

BOOL swift::_isCImportedTagType(_DWORD *a1, uint64_t a2)
{
  if ((*a1 & 0x1Fu) - 17 > 1) {
    return 0LL;
  }
  if (!*(_BYTE *)(a2 + 80)) {
    goto LABEL_10;
  }
  if (*(void *)(a2 + 56) != 1LL)
  {
    if (!*(void *)(a2 + 72)) {
      goto LABEL_10;
    }
    return 0LL;
  }

  if (**(_BYTE **)(a2 + 48) == 116 || *(void *)(a2 + 72) != 0LL) {
    return 0LL;
  }
LABEL_10:
  uint64_t v5 = (int)a1[1];
  int v3 = a1 + 1;
  uint64_t v4 = v5;
  if (!(_DWORD)v5)
  {
    uint64_t v6 = 0LL;
    goto LABEL_17;
  }

  uint64_t v6 = (char *)v3 + (v4 & 0xFFFFFFFFFFFFFFFELL);
  if ((v4 & 1) == 0) {
    goto LABEL_17;
  }
LABEL_15:
  uint64_t v6 = *(char **)v6;
LABEL_17:
  while ((*v6 & 0x1F) != 0)
  {
    uint64_t v10 = *((int *)v6 + 1);
    unint64_t v8 = v6 + 4;
    uint64_t v9 = v10;
    if ((_DWORD)v10)
    {
      uint64_t v6 = &v8[v9 & 0xFFFFFFFFFFFFFFFELL];
      if ((v9 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v6 = 0LL;
    }
  }

  uint64_t v11 = (uint64_t)&v6[*((int *)v6 + 2) + 8];
  return *(_WORD *)v11 == 24415 && *(_BYTE *)(v11 + 2) == 67;
}

size_t swift::ParsedTypeIdentity::parse@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_BYTE *)(a2 + 80) = 0;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_BYTE *)(a2 + 32) = 0;
  uint64_t v4 = *(int *)(a1 + 8);
  uint64_t v5 = (const char *)(v4 + a1 + 8);
  if (v5) {
    size_t result = strlen((const char *)(v4 + a1 + 8));
  }
  else {
    size_t result = 0LL;
  }
  *(void *)a2 = v5;
  *(void *)(a2 + 8) = result;
  if ((*(_BYTE *)(a1 + 2) & 4) == 0)
  {
    *(_OWORD *)(a2 + 16) = *(_OWORD *)a2;
    return result;
  }

  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_BYTE *)(a2 + 80) = 1;
  __int16 v7 = &v5[result];
  unint64_t v8 = &v5[result + 1];
  size_t result = strlen(v8);
  if (result)
  {
    uint64_t v9 = v7;
    do
    {
      int v11 = *((unsigned __int8 *)v9 + 1);
      switch(v11)
      {
        case 'S':
          *(void *)(a2 + 48) = v9 + 2;
          uint64_t v10 = (void *)(a2 + 56);
          break;
        case 'R':
          *(void *)(a2 + 64) = v9 + 2;
          uint64_t v10 = (void *)(a2 + 72);
          break;
        case 'N':
          uint64_t v5 = v9 + 2;
          *(void *)(a2 + 32) = v9 + 2;
          uint64_t v10 = (void *)(a2 + 40);
          break;
        default:
          goto LABEL_10;
      }

      __int16 v7 = &v8[result];
      *uint64_t v10 = result - 1;
LABEL_10:
      uint64_t v9 = &v8[result];
      v8 += result + 1;
      size_t result = strlen(v8);
    }

    while (result);
  }

  *(void *)(a2 + 16) = v5;
  *(void *)(a2 + 24) = v7 - v5;
  return result;
}

uint64_t swift::_contextDescriptorMatchesMangling(const char *a1, const char *a2)
{
  if (!a1) {
    return a2 == 0LL;
  }
  uint64_t v9 = a1;
  uint64_t v10 = &v157;
  while (1)
  {
    int v11 = *((unsigned __int16 *)a2 + 8);
    if (v11 == 232)
    {
      int v12 = *((unsigned __int8 *)a2 + 18);
      if ((v12 - 1) >= 2)
      {
        if (v12 != 5 || !*((_DWORD *)a2 + 2))
        {
          a2 = 0LL;
          goto LABEL_16;
        }

        a2 = *(const char **)a2;
      }

      a2 = *(const char **)a2;
      if (!a2) {
        goto LABEL_16;
      }
      int v11 = *((unsigned __int16 *)a2 + 8);
    }

const char *_findContextDescriptor( swift::Demangle::__runtime::Node *a1, swift::Demangle::__runtime::Demangler *a2)
{
  unint64_t v4 = a1;
  if (*((_WORD *)a1 + 8) == 232)
  {
    int v5 = *((unsigned __int8 *)a1 + 18);
    uint64_t v6 = (swift::Demangle::__runtime::Node **)a1;
    if ((v5 - 1) < 2)
    {
LABEL_6:
      unint64_t v4 = *v6;
      goto LABEL_8;
    }

    if (v5 == 5 && *((_DWORD *)a1 + 2))
    {
      uint64_t v6 = *(swift::Demangle::__runtime::Node ***)a1;
      goto LABEL_6;
    }

    unint64_t v4 = 0LL;
  }

const char *_findExtendedTypeContextDescriptor(unsigned int *a1, char *a2, uint64_t *a3)
{
  if ((*a1 & 0x1F) != 1) {
    return 0LL;
  }
  uint64_t v6 = (int)a1[2];
  if ((_DWORD)v6) {
    __int16 v7 = (char *)a1 + v6 + 8;
  }
  else {
    __int16 v7 = 0LL;
  }
  SymbolicMangledNameStringRef = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef(v7, a2);
  uint64_t v10 = (uint64_t)v8;
  unint64_t v11 = *a1;
  if ((v11 & 0x80) != 0)
  {
    unsigned int v14 = *((unsigned __int16 *)a1 + 6);
    BOOL v13 = a1 + 3;
    uint64_t v12 = v14;
    if (*((_WORD *)v13 + 1))
    {
      unint64_t v15 = ((unint64_t)&v13[2 * ((v11 >> 7) & 1)] + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      uint64_t v16 = 12LL * *((unsigned __int16 *)v13 + 1);
      unsigned int v17 = (int *)(v15 + 8);
      unint64_t v18 = v15 + 4;
      do
      {
        if ((*(v17 - 2) & 0x1F) == 1)
        {
          uint64_t v19 = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef((_BYTE *)(v18 + *(v17 - 1)), v8);
          if (v8 == (const char *)1
            && *v19 == 120
            && swift::Demangle::__runtime::makeSymbolicMangledNameStringRef((_BYTE *)(v18 + *v17 + 4), (const char *)1) == SymbolicMangledNameStringRef)
          {
            return 0LL;
          }
        }

        v17 += 3;
        v18 += 12LL;
        v16 -= 12LL;
      }

      while (v16);
    }
  }

  v32[0] = off_189B8D850;
  v32[1] = a2;
  uint64_t v33 = v32;
  unint64_t v20 = swift::Demangle::__runtime::Demangler::demangleType( (uint64_t)a2,  (uint64_t)SymbolicMangledNameStringRef,  v10,  v32);
  uint64_t v22 = v20;
  if (a3) {
    *a3 = v20;
  }
  __int16 v23 = v33;
  if (v33 == v32)
  {
    uint64_t v24 = 4LL;
    __int16 v23 = v32;
  }

  else
  {
    if (!v33) {
      goto LABEL_21;
    }
    uint64_t v24 = 5LL;
  }

  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_21:
  uint64_t v25 = v22;
  if (a3) {
    uint64_t v25 = *a3;
  }
  if (!v25) {
    return 0LL;
  }
  if (*(_WORD *)(v25 + 16) == 232)
  {
    uint64_t v26 = v22;
    if (a3) {
      uint64_t v26 = *a3;
    }
    int v27 = *(unsigned __int8 *)(v26 + 18);
    if (a3) {
      uint64_t v22 = *a3;
    }
    int v28 = *(unsigned __int8 *)(v22 + 18);
    if ((v28 - 1) >= 2)
    {
      if (v28 != 5 || !*(_DWORD *)(v22 + 8))
      {
        uint64_t v22 = 0LL;
        if (!a3) {
          goto LABEL_44;
        }
LABEL_41:
        *a3 = v22;
        goto LABEL_42;
      }

      uint64_t v22 = *(void *)v22;
    }

    uint64_t v22 = *(void *)v22;
    if (!a3)
    {
LABEL_44:
      if ((swift::Demangle::__runtime::isSpecialized((swift::Demangle::__runtime *)v22, v21) & 1) == 0) {
        return _findContextDescriptor( (swift::Demangle::__runtime::Node *)v22,  (swift::Demangle::__runtime::Demangler *)a2);
      }
      goto LABEL_45;
    }

    goto LABEL_41;
  }

  if (!a3) {
    goto LABEL_44;
  }
  uint64_t v22 = *a3;
LABEL_42:
  if ((swift::Demangle::__runtime::isSpecialized((swift::Demangle::__runtime *)v22, v21) & 1) == 0)
  {
LABEL_49:
    uint64_t v22 = *a3;
    return _findContextDescriptor((swift::Demangle::__runtime::Node *)v22, (swift::Demangle::__runtime::Demangler *)a2);
  }

  uint64_t v22 = *a3;
LABEL_45:
  swift::Demangle::__runtime::getUnspecialized(v22, (swift::Demangle::__runtime::Node *)a2, (uint64_t)v30);
  if (v30[0]) {
    return 0LL;
  }
  uint64_t v22 = v31;
  if (a3)
  {
    *a3 = v31;
    goto LABEL_49;
  }

  return _findContextDescriptor((swift::Demangle::__runtime::Node *)v22, (swift::Demangle::__runtime::Demangler *)a2);
}

uint64_t DemanglerForRuntimeTypeResolution<swift::Demangle::__runtime::Demangler>::~DemanglerForRuntimeTypeResolution( uint64_t a1)
{
  *(void *)a1 = off_189B8E500;
  uint64_t v2 = (void *)(a1 + 544);
  uint64_t v3 = *(void **)(a1 + 568);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
  }

  else
  {
    if (!v3) {
      goto LABEL_6;
    }
    uint64_t v4 = 5LL;
  }

  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  *(void *)a1 = off_189B8E4D8;
  swift::Demangle::__runtime::NodeFactory::freeSlabs(*(void **)(a1 + 24));
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5) {
    *(_BYTE *)(v5 + 48) = 0;
  }
  return a1;
}

uint64_t _swift_registerConcurrencyStandardTypeDescriptors(uint64_t result)
{
  concurrencyDescriptors = result;
  return result;
}

void swift::addImageProtocolsBlockCallbackUnsafe(swift *this, unint64_t a2, const void *a3)
{
}

void _registerProtocols(unint64_t a1, unint64_t a2)
{
  uint64_t v4 = qword_18C486DC0;
  if (qword_18C486DC0) {
    unint64_t v5 = *(void *)qword_18C486DC0;
  }
  else {
    unint64_t v5 = 0LL;
  }
  uint64_t v6 = (unint64_t *)qword_18C486DC0;
  if (v5 >= qword_18C486DB0)
  {
    if (2 * v5 <= 0x10) {
      unint64_t v7 = 16LL;
    }
    else {
      unint64_t v7 = 2 * v5;
    }
    unsigned int v8 = (unint64_t *)malloc((32 * (v7 >> 1)) | 8);
    if (!v8) {
      swift::hashable_support::findHashableBaseTypeOfHashableType();
    }
    uint64_t v6 = v8;
    *unsigned int v8 = 0LL;
    if (v4)
    {
      if (v5)
      {
        unint64_t v9 = v8 + 1;
        uint64_t v10 = (__int128 *)(v4 + 8);
        unint64_t v11 = v5;
        do
        {
          __int128 v12 = *v10++;
          *v9++ = v12;
          --v11;
        }

        while (v11);
      }

      atomic_store(v5, v8);
      BOOL v13 = malloc(0x10uLL);
      *BOOL v13 = qword_18C486DD0;
      v13[1] = v4;
      qword_18C486DD0 = (uint64_t)v13;
    }

    qword_18C486DB0 = v7;
    atomic_store((unint64_t)v6, (unint64_t *)&qword_18C486DC0);
  }

  unsigned int v14 = &v6[2 * v5];
  v14[1] = a1;
  v14[2] = a2;
  atomic_store(v5 + 1, v6);
  __dmb(0xBu);
  if (!qword_18C486DB8)
  {
    unint64_t v15 = (void *)qword_18C486DD0;
    if (qword_18C486DD0)
    {
      do
      {
        unsigned int v17 = (void *)*v15;
        uint64_t v16 = (unint64_t *)v15[1];
        unint64_t v18 = -1LL;
        do
        {
          unint64_t v19 = atomic_load(v16);
          ++v18;
        }

        while (v18 < v19);
        free(v16);
        free(v15);
        unint64_t v15 = v17;
      }

      while (v17);
    }

    qword_18C486DD0 = 0LL;
  }

  os_unfair_lock_unlock((os_unfair_lock_t)&unk_18C486DC8);
}

uint64_t swift::Lazy<anonymous namespace'::ProtocolMetadataPrivateState>::defaultInitCallback(uint64_t a1)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + 8) = 0LL;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 72) = 0LL;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 64) = 0;
  return swift::initializeProtocolLookup((swift *)a1);
}

void swift_registerProtocols(unint64_t a1, unint64_t a2)
{
  if (qword_18C486DD8 != -1) {
  _registerProtocols(a1, a2);
  }
}

uint64_t swift::_gatherGenericParameterCounts(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  __int128 v20 = xmmword_18180BFB0;
  char v22 = 0;
  unint64_t v57 = 0LL;
  uint64_t v24 = 0LL;
  uint64_t v25 = 0LL;
  uint64_t v23 = 0LL;
  char v26 = 0;
  __int128 v38 = 0u;
  __int128 v39 = 0u;
  __int128 v40 = 0u;
  __int128 v41 = 0u;
  __int128 v42 = 0u;
  __int128 v43 = 0u;
  __int128 v44 = 0u;
  __int128 v45 = 0u;
  __int128 v46 = 0u;
  __int128 v47 = 0u;
  __int128 v48 = 0u;
  __int128 v49 = 0u;
  __int128 v50 = 0u;
  __int128 v51 = 0u;
  __int128 v52 = 0u;
  __int128 v53 = 0u;
  __int128 v54 = 0u;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  __int128 v36 = 0u;
  __int128 v37 = 0u;
  int v55 = 0;
  unint64_t v18 = (void (**)(swift::Demangle::__runtime::Demangler *__hidden))off_189B8D828;
  *(_BYTE *)(a3 + 48) = 1;
  uint64_t v21 = a3;
  __int128 v19 = *(_OWORD *)(a3 + 8);
  Extendeduint64_t TypeContextDescriptor = _findExtendedTypeContextDescriptor(a1, (char *)&v18, 0LL);
  uint64_t v6 = 0LL;
  if (ExtendedTypeContextDescriptor) {
    unint64_t v7 = ExtendedTypeContextDescriptor;
  }
  else {
    unint64_t v7 = a1;
  }
  if ((*(_BYTE *)v7 & 0x80) != 0)
  {
    unint64_t v9 = v7 + 1;
    uint64_t v8 = (int)v7[1];
    if ((_DWORD)v8)
    {
      uint64_t v10 = (void *)((char *)v9 + (v8 & 0xFFFFFFFFFFFFFFFELL));
      if ((v8 & 1) != 0) {
        uint64_t v10 = (void *)*v10;
      }
    }

    else
    {
      uint64_t v10 = 0LL;
    }

    swift::_gatherGenericParameterCounts(v10, a2, &v18);
    if ((*(_DWORD *)v10 & 0x80) != 0)
    {
      unsigned int v11 = 0;
      switch(*(_DWORD *)v10 & 0x1F)
      {
        case 1:
          __int128 v12 = v10 + 1;
          goto LABEL_16;
        case 2:
        case 4:
          __int128 v12 = (void *)((char *)v10 + 4);
          goto LABEL_16;
        case 0x10:
          __int128 v12 = v10 + 6;
          goto LABEL_16;
        case 0x11:
        case 0x12:
          __int128 v12 = v10 + 4;
LABEL_16:
          unsigned int v11 = *((unsigned __int16 *)v12 + 2);
          break;
        default:
          break;
      }
    }

    else
    {
      unsigned int v11 = 0;
    }

    if ((*v7 & 0x80) != 0)
    {
      uint64_t v6 = 0LL;
      switch(*v7 & 0x1F)
      {
        case 1:
          unint64_t v9 = v7 + 2;
          goto LABEL_22;
        case 2:
        case 4:
          goto LABEL_22;
        case 0x10:
          unint64_t v9 = v7 + 12;
          goto LABEL_22;
        case 0x11:
        case 0x12:
          unint64_t v9 = v7 + 8;
LABEL_22:
          unsigned int v13 = *((unsigned __int16 *)v9 + 2);
          if (v11 >= v13) {
            goto LABEL_26;
          }
          uint64_t v14 = *(unsigned int *)(a2 + 8);
          if (v14 >= *(_DWORD *)(a2 + 12))
          {
            __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (const void *)(a2 + 16), v14 + 1, 4LL);
            LODWORD(v14) = *(_DWORD *)(a2 + 8);
          }

          *(_DWORD *)(*(void *)a2 + 4LL * v14) = v13;
          ++*(_DWORD *)(a2 + 8);
          uint64_t v6 = 1LL;
          break;
        default:
          break;
      }
    }

    else
    {
LABEL_26:
      uint64_t v6 = 0LL;
    }
  }

  unint64_t v18 = off_189B8E500;
  unint64_t v15 = v57;
  if (v57 == v56)
  {
    uint64_t v16 = 4LL;
    unint64_t v15 = v56;
  }

  else
  {
    if (!v57) {
      goto LABEL_32;
    }
    uint64_t v16 = 5LL;
  }

  (*(void (**)(void *))(*v15 + 8 * v16))(v15);
LABEL_32:
  unint64_t v18 = off_189B8E4D8;
  swift::Demangle::__runtime::NodeFactory::freeSlabs((void *)v20);
  if (v21) {
    *(_BYTE *)(v21 + 48) = 0;
  }
  return v6;
}

unsigned int *__swift::__runtime::llvm::SmallVectorTemplateBase<unsigned int,true>::push_back( unsigned int *result, int a2)
{
  uint64_t v3 = result;
  uint64_t v4 = result[2];
  if (v4 >= result[3])
  {
    size_t result = (unsigned int *)__swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod( (uint64_t)result,  result + 4,  v4 + 1,  4LL);
    LODWORD(v4) = v3[2];
  }

  *(_DWORD *)(*(void *)v3 + 4LL * v4) = a2;
  ++v3[2];
  return result;
}

uint64_t swift_getTypeByMangledNameInEnvironment( unsigned __int8 *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  int v25 = 1;
  uint64_t v26 = a3;
  uint64_t v27 = a4;
  __int128 v28 = v30;
  uint64_t v29 = 0x800000000LL;
  v30[32] = 0LL;
  v20[0] = off_189B8DD40;
  v20[1] = &v25;
  uint64_t v21 = v20;
  v18[0] = off_189B8DD88;
  v18[1] = &v25;
  __int128 v19 = v18;
  swift_getTypeByMangledName(0LL, a1, a2, a4, v20, v18, (uint64_t)&v22);
  uint64_t v6 = v19;
  if (v19 == v18)
  {
    uint64_t v7 = 4LL;
    uint64_t v6 = v18;
  }

  else
  {
    if (!v19) {
      goto LABEL_6;
    }
    uint64_t v7 = 5LL;
  }

  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
  uint64_t v8 = v21;
  if (v21 == v20)
  {
    uint64_t v9 = 4LL;
    uint64_t v8 = v20;
    goto LABEL_10;
  }

  if (v21)
  {
    uint64_t v9 = 5LL;
LABEL_10:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }

  int v10 = v24;
  if (v24 != 1) {
    goto LABEL_23;
  }
  if (swift::runtime::environment::initializeToken != -1) {
    dispatch_once_f( &swift::runtime::environment::initializeToken,  0LL,  (dispatch_function_t)swift::runtime::environment::initialize);
  }
  int v10 = v24;
  if (swift::runtime::environment::SWIFT_DEBUG_FAILED_TYPE_LOOKUP_variable)
  {
    if (v24 == 1) {
      unsigned int v11 = &v22;
    }
    else {
      unsigned int v11 = 0LL;
    }
    if (v24 == 1) {
      uint64_t v12 = (uint64_t)&v23;
    }
    else {
      uint64_t v12 = 8LL;
    }
    uint64_t v13 = (*(uint64_t (**)(uint64_t, void, void))v12)(*v11, 0LL, 0LL);
    swift::warning(0LL, "failed type lookup for %.*s: %s\n", v14, v15, a2, a1, v13);
    (*(void (**)(uint64_t, uint64_t, uint64_t))v12)(*v11, 1LL, v13);
    uint64_t v16 = 0LL;
    if (v24 != 1) {
      goto LABEL_28;
    }
  }

  else
  {
LABEL_23:
    if (v10) {
      uint64_t v16 = 0LL;
    }
    else {
      uint64_t v16 = v22;
    }
    if (v10 != 1) {
      goto LABEL_28;
    }
  }

  v23(v22, 3LL, 0LL);
LABEL_28:
  if (v28 != v30) {
    free(v28);
  }
  return v16;
}

void *swift_getTypeByMangledName@<X0>( const char *a1@<X0>, unsigned __int8 *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, void *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14 = swift_getTypeByMangledName::Override;
  unint64_t v15 = (void *)a5[3];
  if (!swift_getTypeByMangledName::Override)
  {
    if (v15)
    {
      if (v15 != a5)
      {
        uint64_t v27 = (void *)(*(uint64_t (**)(void *))(*v15 + 16LL))(v15);
        unsigned int v17 = (void *)a6[3];
        if (v17) {
          goto LABEL_9;
        }
LABEL_25:
        int v25 = 0LL;
        goto LABEL_29;
      }

      uint64_t v27 = v26;
      (*(void (**)(void *, void *))(*a5 + 24LL))(a5, v26);
      unsigned int v17 = (void *)a6[3];
      if (!v17) {
        goto LABEL_25;
      }
    }

    else
    {
      uint64_t v27 = 0LL;
      unsigned int v17 = (void *)a6[3];
      if (!v17) {
        goto LABEL_25;
      }
    }

uint64_t swift_getTypeByMangledNameInEnvironmentInMetadataState( uint64_t a1, unsigned __int8 *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  int v26 = 1;
  uint64_t v27 = a4;
  uint64_t v28 = a5;
  uint64_t v29 = v31;
  uint64_t v30 = 0x800000000LL;
  v31[32] = 0LL;
  v21[0] = off_189B8DDD0;
  v21[1] = &v26;
  uint64_t v22 = v21;
  v19[0] = off_189B8DE18;
  v19[1] = &v26;
  __int128 v20 = v19;
  swift_getTypeByMangledName((const char *)(a1 & 0xFFFFFFFFFFFFFEFFLL), a2, a3, a5, v21, v19, (uint64_t)&v23);
  uint64_t v7 = v20;
  if (v20 == v19)
  {
    uint64_t v8 = 4LL;
    uint64_t v7 = v19;
  }

  else
  {
    if (!v20) {
      goto LABEL_6;
    }
    uint64_t v8 = 5LL;
  }

  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  uint64_t v9 = v22;
  if (v22 == v21)
  {
    uint64_t v10 = 4LL;
    uint64_t v9 = v21;
    goto LABEL_10;
  }

  if (v22)
  {
    uint64_t v10 = 5LL;
LABEL_10:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }

  int v11 = v25;
  if (v25 != 1) {
    goto LABEL_23;
  }
  if (swift::runtime::environment::initializeToken != -1) {
    dispatch_once_f( &swift::runtime::environment::initializeToken,  0LL,  (dispatch_function_t)swift::runtime::environment::initialize);
  }
  int v11 = v25;
  if (swift::runtime::environment::SWIFT_DEBUG_FAILED_TYPE_LOOKUP_variable)
  {
    if (v25 == 1) {
      uint64_t v12 = &v23;
    }
    else {
      uint64_t v12 = 0LL;
    }
    if (v25 == 1) {
      uint64_t v13 = (uint64_t)&v24;
    }
    else {
      uint64_t v13 = 8LL;
    }
    uint64_t v14 = (*(uint64_t (**)(uint64_t, void, void))v13)(*v12, 0LL, 0LL);
    swift::warning(0LL, "failed type lookup for %.*s: %s\n", v15, v16, a3, a2, v14);
    (*(void (**)(uint64_t, uint64_t, uint64_t))v13)(*v12, 1LL, v14);
    uint64_t v17 = 0LL;
    if (v25 != 1) {
      goto LABEL_28;
    }
  }

  else
  {
LABEL_23:
    if (v11) {
      uint64_t v17 = 0LL;
    }
    else {
      uint64_t v17 = v23;
    }
    if (v11 != 1) {
      goto LABEL_28;
    }
  }

  v24(v23, 3LL, 0LL);
LABEL_28:
  if (v29 != v31) {
    free(v29);
  }
  return v17;
}

uint64_t swift_getTypeByMangledNameInContextImpl( unsigned __int8 *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  int v25 = 0;
  uint64_t v26 = a3;
  uint64_t v27 = a4;
  uint64_t v28 = v30;
  uint64_t v29 = 0x800000000LL;
  v30[32] = 0LL;
  v20[0] = off_189B8D898;
  v20[1] = &v25;
  uint64_t v21 = v20;
  v18[0] = off_189B8D8E0;
  v18[1] = &v25;
  uint64_t v19 = v18;
  swift_getTypeByMangledName(0LL, a1, a2, a4, v20, v18, (uint64_t)&v22);
  uint64_t v6 = v19;
  if (v19 == v18)
  {
    uint64_t v7 = 4LL;
    uint64_t v6 = v18;
  }

  else
  {
    if (!v19) {
      goto LABEL_6;
    }
    uint64_t v7 = 5LL;
  }

  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
  uint64_t v8 = v21;
  if (v21 == v20)
  {
    uint64_t v9 = 4LL;
    uint64_t v8 = v20;
    goto LABEL_10;
  }

  if (v21)
  {
    uint64_t v9 = 5LL;
LABEL_10:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }

  int v10 = v24;
  if (v24 != 1) {
    goto LABEL_23;
  }
  if (swift::runtime::environment::initializeToken != -1) {
    dispatch_once_f( &swift::runtime::environment::initializeToken,  0LL,  (dispatch_function_t)swift::runtime::environment::initialize);
  }
  int v10 = v24;
  if (swift::runtime::environment::SWIFT_DEBUG_FAILED_TYPE_LOOKUP_variable)
  {
    if (v24 == 1) {
      int v11 = &v22;
    }
    else {
      int v11 = 0LL;
    }
    if (v24 == 1) {
      uint64_t v12 = (uint64_t)&v23;
    }
    else {
      uint64_t v12 = 8LL;
    }
    uint64_t v13 = (*(uint64_t (**)(uint64_t, void, void))v12)(*v11, 0LL, 0LL);
    swift::warning(0LL, "failed type lookup for %.*s: %s\n", v14, v15, a2, a1, v13);
    (*(void (**)(uint64_t, uint64_t, uint64_t))v12)(*v11, 1LL, v13);
    uint64_t v16 = 0LL;
    if (v24 != 1) {
      goto LABEL_28;
    }
  }

  else
  {
LABEL_23:
    if (v10) {
      uint64_t v16 = 0LL;
    }
    else {
      uint64_t v16 = v22;
    }
    if (v10 != 1) {
      goto LABEL_28;
    }
  }

  v23(v22, 3LL, 0LL);
LABEL_28:
  if (v28 != v30) {
    free(v28);
  }
  return v16;
}

uint64_t swift_getTypeByMangledNameInContextInMetadataStateImpl( uint64_t a1, unsigned __int8 *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  int v26 = 0;
  uint64_t v27 = a4;
  uint64_t v28 = a5;
  uint64_t v29 = v31;
  uint64_t v30 = 0x800000000LL;
  v31[32] = 0LL;
  v21[0] = off_189B8D928;
  v21[1] = &v26;
  uint64_t v22 = v21;
  v19[0] = off_189B8D970;
  v19[1] = &v26;
  __int128 v20 = v19;
  swift_getTypeByMangledName((const char *)(a1 & 0xFFFFFFFFFFFFFEFFLL), a2, a3, a5, v21, v19, (uint64_t)&v23);
  uint64_t v7 = v20;
  if (v20 == v19)
  {
    uint64_t v8 = 4LL;
    uint64_t v7 = v19;
  }

  else
  {
    if (!v20) {
      goto LABEL_6;
    }
    uint64_t v8 = 5LL;
  }

  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  uint64_t v9 = v22;
  if (v22 == v21)
  {
    uint64_t v10 = 4LL;
    uint64_t v9 = v21;
    goto LABEL_10;
  }

  if (v22)
  {
    uint64_t v10 = 5LL;
LABEL_10:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }

  int v11 = v25;
  if (v25 != 1) {
    goto LABEL_23;
  }
  if (swift::runtime::environment::initializeToken != -1) {
    dispatch_once_f( &swift::runtime::environment::initializeToken,  0LL,  (dispatch_function_t)swift::runtime::environment::initialize);
  }
  int v11 = v25;
  if (swift::runtime::environment::SWIFT_DEBUG_FAILED_TYPE_LOOKUP_variable)
  {
    if (v25 == 1) {
      uint64_t v12 = &v23;
    }
    else {
      uint64_t v12 = 0LL;
    }
    if (v25 == 1) {
      uint64_t v13 = (uint64_t)&v24;
    }
    else {
      uint64_t v13 = 8LL;
    }
    uint64_t v14 = (*(uint64_t (**)(uint64_t, void, void))v13)(*v12, 0LL, 0LL);
    swift::warning(0LL, "failed type lookup for %.*s: %s\n", v15, v16, a3, a2, v14);
    (*(void (**)(uint64_t, uint64_t, uint64_t))v13)(*v12, 1LL, v14);
    uint64_t v17 = 0LL;
    if (v25 != 1) {
      goto LABEL_28;
    }
  }

  else
  {
LABEL_23:
    if (v11) {
      uint64_t v17 = 0LL;
    }
    else {
      uint64_t v17 = v23;
    }
    if (v11 != 1) {
      goto LABEL_28;
    }
  }

  v24(v23, 3LL, 0LL);
LABEL_28:
  if (v29 != v31) {
    free(v29);
  }
  return v17;
}

uint64_t swift_stdlib_getTypeByMangledNameUntrusted(unsigned __int8 *a1, unint64_t a2)
{
  if (!a2)
  {
LABEL_5:
    uint64_t v13 = 0LL;
    int v11 = 0LL;
    swift_getTypeByMangledName(0LL, a1, a2, 0LL, v12, v10, (uint64_t)v14);
    if (v15 == 1)
    {
      ((void (*)(void, uint64_t, void))v14[1])(v14[0], 3LL, 0LL);
      uint64_t v4 = 0LL;
    }

    else
    {
      uint64_t v4 = 0LL;
      if (!v15) {
        uint64_t v4 = v14[0];
      }
    }

    unint64_t v5 = v11;
    if (v11 == v10)
    {
      uint64_t v6 = 4LL;
      unint64_t v5 = v10;
    }

    else
    {
      if (!v11) {
        goto LABEL_15;
      }
      uint64_t v6 = 5LL;
    }

    (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_15:
    uint64_t v7 = v13;
    if (v13 == v12)
    {
      uint64_t v8 = 4LL;
      uint64_t v7 = v12;
    }

    else
    {
      if (!v13) {
        return v4;
      }
      uint64_t v8 = 5LL;
    }

    (*(void (**)(void))(*v7 + 8 * v8))();
    return v4;
  }

  unint64_t v2 = a2;
  uint64_t v3 = a1;
  while (*v3 - 32 < 0xFFFFFFE1)
  {
    ++v3;
    if (!--v2) {
      goto LABEL_5;
    }
  }

  return 0LL;
}

void *swift::getTypePackByMangledName@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X3>, void *a4@<X4>, uint64_t a5@<X8>)
{
  __int128 v47 = xmmword_18180BFB0;
  char v49 = 0;
  unsigned int v84 = 0LL;
  uint64_t v51 = 0LL;
  uint64_t v52 = 0LL;
  uint64_t v50 = 0LL;
  char v53 = 0;
  __int128 v65 = 0u;
  __int128 v66 = 0u;
  __int128 v67 = 0u;
  __int128 v68 = 0u;
  __int128 v69 = 0u;
  __int128 v70 = 0u;
  __int128 v71 = 0u;
  __int128 v72 = 0u;
  __int128 v73 = 0u;
  __int128 v74 = 0u;
  __int128 v75 = 0u;
  __int128 v76 = 0u;
  __int128 v77 = 0u;
  __int128 v78 = 0u;
  __int128 v79 = 0u;
  __int128 v80 = 0u;
  __int128 v81 = 0u;
  __int128 v54 = 0u;
  __int128 v55 = 0u;
  __int128 v56 = 0u;
  __int128 v57 = 0u;
  __int128 v58 = 0u;
  __int128 v59 = 0u;
  __int128 v60 = 0u;
  __int128 v61 = 0u;
  __int128 v62 = 0u;
  __int128 v63 = 0u;
  __int128 v64 = 0u;
  int v82 = 0;
  uint64_t v48 = 0LL;
  v46[1] = &v85;
  v46[2] = &v86;
  v46[0] = off_189B8D9B8;
  __int128 v36 = off_189B8D850;
  v37[0] = v46;
  __int128 v38 = &v36;
  unint64_t v8 = swift::Demangle::__runtime::Demangler::demangleType((uint64_t)v46, a1, a2, &v36);
  uint64_t v9 = v38;
  if (v38 == &v36)
  {
    uint64_t v10 = 4LL;
    uint64_t v9 = &v36;
  }

  else
  {
    if (!v38) {
      goto LABEL_6;
    }
    uint64_t v10 = 5LL;
  }

  (*v9)[v10]();
LABEL_6:
  if (!v8)
  {
    *(_WORD *)(a5 + 16) = 1;
    *(void *)a5 = "Demangling failed";
    *(void *)(a5 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
    goto LABEL_60;
  }

  int v11 = (void *)a3[3];
  if (v11)
  {
    if (v11 != a3)
    {
      __int128 v35 = (void *)(*(uint64_t (**)(void *))(*v11 + 16LL))(v11);
      uint64_t v12 = (void *)a4[3];
      if (!v12) {
        goto LABEL_16;
      }
LABEL_13:
      if (v12 == a4)
      {
        __int128 v33 = v32;
        (*(void (**)(void *, void *))(*a4 + 24LL))(a4, v32);
      }

      else
      {
        __int128 v33 = (void *)(*(uint64_t (**)(void *))(*v12 + 16LL))(v12);
      }

      goto LABEL_18;
    }

    __int128 v35 = v34;
    (*(void (**)(void *, void *))(*a3 + 24LL))(a3, v34);
    uint64_t v12 = (void *)a4[3];
    if (v12) {
      goto LABEL_13;
    }
  }

  else
  {
    __int128 v35 = 0LL;
    uint64_t v12 = (void *)a4[3];
    if (v12) {
      goto LABEL_13;
    }
  }

uint64_t DemanglerForRuntimeTypeResolution<swift::Demangle::__runtime::StackAllocatedDemangler<2048ul>>::~DemanglerForRuntimeTypeResolution( uint64_t a1)
{
  *(void *)a1 = off_189B8E500;
  unint64_t v2 = (void *)(a1 + 544);
  uint64_t v3 = *(void **)(a1 + 568);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
  }

  else
  {
    if (!v3) {
      goto LABEL_6;
    }
    uint64_t v4 = 5LL;
  }

  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  *(void *)a1 = off_189B8E4D8;
  swift::Demangle::__runtime::NodeFactory::freeSlabs(*(void **)(a1 + 24));
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5) {
    *(_BYTE *)(v5 + 48) = 0;
  }
  return a1;
}

uint64_t swift_func_getParameterCount(char *a1, unint64_t a2)
{
  __int128 v13 = xmmword_18180BFB0;
  uint64_t v14 = 0LL;
  char v15 = 0;
  uint64_t v50 = 0LL;
  uint64_t v17 = 0LL;
  uint64_t v18 = 0LL;
  uint64_t v16 = 0LL;
  char v19 = 0;
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  __int128 v36 = 0u;
  __int128 v37 = 0u;
  __int128 v38 = 0u;
  __int128 v39 = 0u;
  __int128 v40 = 0u;
  __int128 v41 = 0u;
  __int128 v42 = 0u;
  __int128 v43 = 0u;
  __int128 v44 = 0u;
  __int128 v45 = 0u;
  __int128 v46 = 0u;
  __int128 v47 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  int v48 = 0;
  v12[0] = off_189B8B130;
  v12[1] = &v51;
  v12[2] = &v52;
  uint64_t FunctionTypeFromMethod = extractFunctionTypeFromMethod((swift::Demangle::__runtime::Demangler *)v12, a1, a2);
  if (!FunctionTypeFromMethod)
  {
    uint64_t v6 = 0xFFFFFFFFLL;
    goto LABEL_19;
  }

  uint64_t v3 = swift::Demangle::__runtime::Node::findByKind(FunctionTypeFromMethod, 3LL, 1);
  int v4 = *(unsigned __int8 *)(v3 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*(_DWORD *)(v3 + 8))
    {
      uint64_t v7 = 0LL;
      goto LABEL_10;
    }

    uint64_t v5 = *(uint64_t **)v3;
  }

  else
  {
    uint64_t v5 = (uint64_t *)v3;
  }

  uint64_t v7 = *v5;
LABEL_10:
  uint64_t v8 = *(void *)v7;
  if (*(_WORD *)(v8 + 16) != 223) {
    uint64_t v8 = v3;
  }
  uint64_t v6 = *(unsigned __int8 *)(v8 + 18);
  if ((_DWORD)v6 != 1)
  {
    if ((_DWORD)v6 == 5)
    {
      uint64_t v6 = *(unsigned int *)(v8 + 8);
    }

    else if ((_DWORD)v6 != 2)
    {
      uint64_t v6 = 0LL;
    }
  }

uint64_t extractFunctionTypeFromMethod( swift::Demangle::__runtime::Demangler *a1, char *a2, unint64_t a3)
{
  if (a3)
  {
    unint64_t v3 = a3;
    int v4 = a2;
    while (*(unsigned __int8 *)v4 - 32 < 0xFFFFFFE1)
    {
      ++v4;
      if (!--v3) {
        goto LABEL_5;
      }
    }

    return 0LL;
  }

unint64_t swift_func_getReturnTypeInfo(char *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v41 = xmmword_18180BFB0;
  char v43 = 0;
  __int128 v78 = 0LL;
  uint64_t v46 = 0LL;
  uint64_t v44 = 0LL;
  uint64_t v45 = 0LL;
  char v47 = 0;
  __int128 v59 = 0u;
  __int128 v60 = 0u;
  __int128 v61 = 0u;
  __int128 v62 = 0u;
  __int128 v63 = 0u;
  __int128 v64 = 0u;
  __int128 v65 = 0u;
  __int128 v66 = 0u;
  __int128 v67 = 0u;
  __int128 v68 = 0u;
  __int128 v69 = 0u;
  __int128 v70 = 0u;
  __int128 v71 = 0u;
  __int128 v72 = 0u;
  __int128 v73 = 0u;
  __int128 v74 = 0u;
  __int128 v75 = 0u;
  __int128 v48 = 0u;
  __int128 v49 = 0u;
  __int128 v50 = 0u;
  __int128 v51 = 0u;
  __int128 v52 = 0u;
  __int128 v53 = 0u;
  __int128 v54 = 0u;
  __int128 v55 = 0u;
  __int128 v56 = 0u;
  __int128 v57 = 0u;
  __int128 v58 = 0u;
  int v76 = 0;
  v40[0] = off_189B8B130;
  v40[1] = &v79;
  uint64_t v42 = 0LL;
  v40[2] = &v80;
  uint64_t FunctionTypeFromMethod = extractFunctionTypeFromMethod((swift::Demangle::__runtime::Demangler *)v40, a1, a2);
  if (!FunctionTypeFromMethod) {
    goto LABEL_24;
  }
  int v7 = *(unsigned __int8 *)(FunctionTypeFromMethod + 18);
  if (v7 == 1)
  {
    uint64_t v9 = *(swift::Demangle::__runtime::Node **)FunctionTypeFromMethod;
    if (*(void *)FunctionTypeFromMethod) {
      goto LABEL_11;
    }
    goto LABEL_24;
  }

  if (v7 == 5)
  {
    uint64_t v10 = *(unsigned int *)(FunctionTypeFromMethod + 8);
    if ((_DWORD)v10)
    {
      uint64_t v9 = *(swift::Demangle::__runtime::Node **)(*(void *)FunctionTypeFromMethod + 8 * (v10 - 1));
      if (v9) {
        goto LABEL_11;
      }
    }

uint64_t swift_func_getParameterTypeInfo( char *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __int128 v51 = xmmword_18180BFB0;
  char v53 = 0;
  size_t v88 = 0LL;
  uint64_t v56 = 0LL;
  uint64_t v54 = 0LL;
  uint64_t v55 = 0LL;
  char v57 = 0;
  __int128 v69 = 0u;
  __int128 v70 = 0u;
  __int128 v71 = 0u;
  __int128 v72 = 0u;
  __int128 v73 = 0u;
  __int128 v74 = 0u;
  __int128 v75 = 0u;
  __int128 v76 = 0u;
  __int128 v77 = 0u;
  __int128 v78 = 0u;
  __int128 v79 = 0u;
  __int128 v80 = 0u;
  __int128 v81 = 0u;
  __int128 v82 = 0u;
  __int128 v83 = 0u;
  __int128 v84 = 0u;
  __int128 v85 = 0u;
  __int128 v58 = 0u;
  __int128 v59 = 0u;
  __int128 v60 = 0u;
  __int128 v61 = 0u;
  __int128 v62 = 0u;
  __int128 v63 = 0u;
  __int128 v64 = 0u;
  __int128 v65 = 0u;
  __int128 v66 = 0u;
  __int128 v67 = 0u;
  __int128 v68 = 0u;
  int v86 = 0;
  v50[0] = off_189B8B130;
  v50[1] = &v89;
  uint64_t v52 = 0LL;
  uint64_t v50[2] = &v90;
  uint64_t FunctionTypeFromMethod = extractFunctionTypeFromMethod((swift::Demangle::__runtime::Demangler *)v50, a1, a2);
  if (!FunctionTypeFromMethod)
  {
    a6 = 0xFFFFFFFFLL;
    goto LABEL_67;
  }

  uint64_t v11 = swift::Demangle::__runtime::Node::findByKind(FunctionTypeFromMethod, 3LL, 1);
  int v12 = *(unsigned __int8 *)(v11 + 18);
  if ((v12 - 1) < 2)
  {
    __int128 v13 = (uint64_t **)v11;
LABEL_8:
    uint64_t v14 = *v13;
    goto LABEL_10;
  }

  if (v12 == 5 && *(_DWORD *)(v11 + 8))
  {
    __int128 v13 = *(uint64_t ***)v11;
    goto LABEL_8;
  }

  uint64_t v14 = 0LL;
LABEL_10:
  uint64_t v15 = *v14;
  if (*(_WORD *)(v15 + 16) == 223) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = v11;
  }
  if (!v16) {
    goto LABEL_48;
  }
  uint64_t v17 = *(unsigned __int8 *)(v16 + 18);
  switch((_DWORD)v17)
  {
    case 1:
LABEL_22:
      goto LABEL_23;
    case 5:
      uint64_t v17 = *(unsigned int *)(v16 + 8);
      goto LABEL_22;
    case 2:
      uint64_t v17 = 2LL;
      goto LABEL_23;
  }

  uint64_t v17 = 0LL;
  if ((_DWORD)a6)
  {
LABEL_48:
    a6 = 4294967294LL;
    goto LABEL_67;
  }

_BYTE *swift_distributed_getWitnessTables(unsigned int *a1, uint64_t a2)
{
  uint64_t v35 = v37;
  uint64_t v36 = 0x400000000LL;
  int v29 = 1;
  uint64_t v30 = a1;
  uint64_t v31 = a2;
  __int128 v32 = v34;
  uint64_t v33 = 0x800000000LL;
  v34[32] = 0LL;
  unint64_t v2 = *a1;
  unint64_t v3 = (char *)a1 + 2 * (v2 & 0xFFF);
  int v4 = (const char *)*((unsigned __int16 *)v3 + 1);
  v25[0] = off_189B8DF80;
  v25[1] = &v29;
  uint64_t v26 = v25;
  v23[0] = off_189B8DFC8;
  v23[1] = &v29;
  uint64_t v24 = v23;
  v21[0] = off_189B8E010;
  v21[1] = &v29;
  __int128 v22 = v21;
  swift::_checkGenericRequirements( (uint64_t)(v3 + 4),  v4,  (unint64_t)&v4[(void)(v3 + 4) + 3] & 0xFFFFFFFFFFFFFFFCLL,  (unsigned __int16)(v2 >> 12),  (uint64_t)&v35,  v25,  (uint64_t)v23,  v21,  (uint64_t)v27);
  unint64_t v5 = v22;
  if (v22 == v21)
  {
    uint64_t v6 = 4LL;
    unint64_t v5 = v21;
  }

  else
  {
    if (!v22) {
      goto LABEL_6;
    }
    uint64_t v6 = 5LL;
  }

  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  int v7 = v24;
  if (v24 == v23)
  {
    uint64_t v8 = 4LL;
    int v7 = v23;
  }

  else
  {
    if (!v24) {
      goto LABEL_11;
    }
    uint64_t v8 = 5LL;
  }

  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_11:
  uint64_t v9 = v26;
  if (v26 == v25)
  {
    uint64_t v10 = 4LL;
    uint64_t v9 = v25;
  }

  else
  {
    if (!v26) {
      goto LABEL_16;
    }
    uint64_t v10 = 5LL;
  }

  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_16:
  if (v28)
  {
    ((void (*)(void, uint64_t, void))v27[1])(v27[0], 3LL, 0LL);
    uint64_t v11 = 0LL;
  }

  else
  {
    uint64_t v12 = v36;
    if ((_DWORD)v36)
    {
      size_t v13 = 8LL * v36;
      uint64_t v14 = malloc(v13);
      uint64_t v11 = v14;
      uint64_t v15 = 0LL;
      uint64_t v16 = v35;
      unint64_t v17 = 0LL;
      uint64_t v15 = v12 & 0xFFFFFFFC;
      do
      {
        __int128 v18 = *(_OWORD *)&v16[v17 / 8 + 2];
        unint64_t v19 = &v14[v17];
        _OWORD *v19 = *(_OWORD *)&v16[v17 / 8];
        v19[1] = v18;
        v17 += 32LL;
      }

      while ((v13 & 0x7FFFFFFE0LL) != v17);
      if (v15 != v12)
      {
LABEL_34:
        do
        {
          *(void *)&v14[8 * v15] = v16[v15];
          ++v15;
        }

        while (v12 != v15);
      }
    }

    else
    {
      uint64_t v11 = 0LL;
    }
  }

  if (v32 != v34) {
    free(v32);
  }
  if (v35 != v37) {
    free(v35);
  }
  return v11;
}

uint64_t swift_getOpaqueTypeMetadataImpl( unsigned __int8 a1, const char *a2, unsigned __int16 *a3, unsigned int a4)
{
  int v7 = a3 + 4;
  unint64_t v8 = *(unsigned int *)a3;
  if ((v8 & 0x80) != 0)
  {
    unsigned __int16 v12 = a3[7];
    size_t v13 = &v11[2 * (v12 & 1)];
    if ((v12 & 1) != 0) {
      v13 += 4 * *v11;
    }
    unint64_t v10 = (unint64_t)v13 + (v12 & 2);
    if ((v12 & 2) != 0
      && (uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)*v13), v14.i16[0] = vaddlv_u8(v14), v10 += 2LL * v14.u32[0], *v13))
    {
      unsigned int v9 = *(unsigned __int16 *)((char *)&v13[v14.u32[0] - 1] + (v12 & 2));
    }

    else
    {
      unsigned int v9 = 0;
    }
  }

  else
  {
    unsigned int v9 = 0;
    unint64_t v10 = ((unint64_t)&v7[4 * ((v8 >> 7) & 1) + 1] + 1) & 0xFFFFFFFFFFFFFFFCLL;
  }

  uint64_t v15 = (int *)(((v10 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 12LL * v9 + 4LL * a4);
  uint64_t v16 = *v15;
  unint64_t v17 = (char *)v15 + v16;
  if ((_DWORD)v16) {
    __int128 v18 = v17;
  }
  else {
    __int128 v18 = 0LL;
  }
  SymbolicMangledNameStringRef = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef(v18, a2);
  int v33 = 0;
  int v34 = a3;
  uint64_t v35 = a2;
  uint64_t v36 = v38;
  uint64_t v37 = 0x800000000LL;
  v38[32] = 0LL;
  v29[0] = off_189B8DB48;
  v29[1] = &v33;
  uint64_t v30 = v29;
  v27[0] = off_189B8DB90;
  v27[1] = &v33;
  char v28 = v27;
  swift_getTypeByMangledName((const char *)a1, SymbolicMangledNameStringRef, v20, (uint64_t)a2, v29, v27, (uint64_t)v31);
  if (v32 == 1)
  {
    ((void (*)(void, uint64_t, void))v31[1])(v31[0], 3LL, 0LL);
  }

  else if (!v32)
  {
    uint64_t v21 = v31[0];
    goto LABEL_17;
  }

  uint64_t v21 = 0LL;
LABEL_17:
  __int128 v22 = v28;
  if (v28 == v27)
  {
    uint64_t v23 = 4LL;
    __int128 v22 = v27;
  }

  else
  {
    if (!v28) {
      goto LABEL_22;
    }
    uint64_t v23 = 5LL;
  }

  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_22:
  uint64_t v24 = v30;
  if (v30 == v29)
  {
    uint64_t v25 = 4LL;
    uint64_t v24 = v29;
  }

  else
  {
    if (!v30) {
      goto LABEL_27;
    }
    uint64_t v25 = 5LL;
  }

  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_27:
  if (v36 != v38) {
    free(v36);
  }
  return v21;
}

uint64_t swift_getOpaqueTypeConformance2(const char *a1, unsigned __int16 *a2, unsigned int a3)
{
  return swift_getOpaqueTypeMetadataImpl(0, a1, a2, a3);
}

uint64_t swift_getOpaqueTypeConformance(const char *a1, unsigned __int16 *a2, unsigned int a3)
{
  return swift_getOpaqueTypeMetadataImpl(0, a1, a2, a3);
}

uint64_t _swift_instantiateCheckedGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((*(_BYTE *)a1 & 0x80) == 0) {
    return 0LL;
  }
  __int128 v22 = xmmword_18180BFB0;
  char v24 = 0;
  __int128 v59 = 0LL;
  uint64_t v26 = 0LL;
  uint64_t v27 = 0LL;
  uint64_t v25 = 0LL;
  char v28 = 0;
  __int128 v40 = 0u;
  __int128 v41 = 0u;
  __int128 v42 = 0u;
  __int128 v43 = 0u;
  __int128 v44 = 0u;
  __int128 v45 = 0u;
  __int128 v46 = 0u;
  __int128 v47 = 0u;
  __int128 v48 = 0u;
  __int128 v49 = 0u;
  __int128 v50 = 0u;
  __int128 v51 = 0u;
  __int128 v52 = 0u;
  __int128 v53 = 0u;
  __int128 v54 = 0u;
  __int128 v55 = 0u;
  __int128 v56 = 0u;
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  __int128 v36 = 0u;
  __int128 v37 = 0u;
  __int128 v38 = 0u;
  __int128 v39 = 0u;
  int v57 = 0;
  uint64_t v23 = 0LL;
  v21[1] = &v60;
  v21[2] = &v61;
  v21[0] = off_189B8D9B8;
  __int128 v18 = v20;
  uint64_t v19 = 0x800000000LL;
  uint64_t v3 = 0LL;
  if (swift::_gatherWrittenGenericParameters((unsigned int *)a1, a2, a3, (uint64_t)&v18, (uint64_t)v21))
  {
    v16[0] = v17;
    v16[1] = (void *)0x800000000LL;
    size_t v13 = v15;
    uint64_t v14 = 0x800000000LL;
    _gatherGenericParameters( (unsigned int *)a1,  (char *)v18,  v19,  0LL,  (uint64_t)v16,  (uint64_t)&v13,  (uint64_t)v21,  (uint64_t)v11);
    if (v12)
    {
      ((void (*)(void, uint64_t, void))v11[1])(v11[0], 3LL, 0LL);
      uint64_t v3 = 0LL;
    }

    else
    {
      uint64_t v8 = *(int *)(a1 + 12);
      unsigned int v9 = (uint64_t (*)(void, void, void))(v8 + a1 + 12);
      if (!(_DWORD)v8) {
        unsigned int v9 = 0LL;
      }
      unint64_t v10 = v13;
      switch((int)v14)
      {
        case 1:
          unint64_t v10 = *(void **)v13;
          goto LABEL_23;
        case 2:
          uint64_t v3 = v9(0LL, *(void *)v13, *((void *)v13 + 1));
          break;
        case 3:
          uint64_t v3 = ((uint64_t (*)(void, void, void, void))v9)( 0LL,  *(void *)v13,  *((void *)v13 + 1),  *((void *)v13 + 2));
          break;
        default:
LABEL_23:
          uint64_t v3 = ((uint64_t (*)(void, void *))v9)(0LL, v10);
          break;
      }
    }

    if (v13 != v15) {
      free(v13);
    }
    if (v16[0] != v17) {
      free(v16[0]);
    }
  }

  if (v18 != v20) {
    free(v18);
  }
  v21[0] = off_189B8E500;
  unint64_t v5 = v59;
  if (v59 == v58)
  {
    uint64_t v6 = 4LL;
    unint64_t v5 = v58;
  }

  else
  {
    if (!v59) {
      goto LABEL_17;
    }
    uint64_t v6 = 5LL;
  }

  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_17:
  v21[0] = off_189B8E4D8;
  swift::Demangle::__runtime::NodeFactory::freeSlabs((void *)v22);
  if (v23) {
    *(_BYTE *)(v23 + 48) = 0;
  }
  return v3;
}

uint64_t swift::_gatherWrittenGenericParameters( unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a1) {
    return 0LL;
  }
  if ((*a1 & 0x80) == 0) {
    return 1LL;
  }
  uint64_t v6 = 1LL;
  switch(*a1 & 0x1F)
  {
    case 1u:
      unsigned int v9 = a1 + 2;
      goto LABEL_10;
    case 2u:
    case 4u:
      unsigned int v9 = a1 + 1;
      goto LABEL_10;
    case 0x10u:
      unsigned int v9 = a1 + 12;
      goto LABEL_10;
    case 0x11u:
    case 0x12u:
      unsigned int v9 = a1 + 8;
LABEL_10:
      if (!*((_WORD *)v9 + 2)) {
        return v6;
      }
      unsigned int v10 = 0;
      char v11 = 0;
      uint64_t v12 = (uint64_t)v9 + *((unsigned __int16 *)v9 + 2) + 12;
      size_t v13 = (const void *)(a4 + 16);
      uint64_t v14 = (char *)(v9 + 3);
      break;
    default:
      return v6;
  }

  do
  {
    if ((*v14 & 0x80000000) == 0)
    {
      uint64_t v15 = v14 + 1;
      do
      {
        unint64_t v16 = *(unsigned int *)(a4 + 8);
        if (v16 >= *(unsigned int *)(a4 + 12))
        {
          uint64_t v18 = a2;
          uint64_t v19 = v13;
          __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(a4, v13, v16 + 1, 8LL);
          size_t v13 = v19;
          a2 = v18;
          unint64_t v16 = *(unsigned int *)(a4 + 8);
        }

        *(void *)(*(void *)a4 + 8 * v16) = 0LL;
        ++*(_DWORD *)(a4 + 8);
        int v17 = *v15++;
      }

      while ((v17 & 0x80000000) == 0);
      uint64_t v14 = v15 - 1;
      char v11 = 1;
    }

    uint64_t v20 = *(void *)(a2 + 8LL * v10);
    unint64_t v21 = *(unsigned int *)(a4 + 8);
    if (v21 >= *(unsigned int *)(a4 + 12))
    {
      __int128 v47 = v13;
      uint64_t v48 = a2;
      __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(a4, v13, v21 + 1, 8LL);
      size_t v13 = v47;
      a2 = v48;
      unint64_t v21 = *(unsigned int *)(a4 + 8);
    }

    *(void *)(*(void *)a4 + 8 * v21) = v20;
    ++*(_DWORD *)(a4 + 8);
    ++v10;
    ++v14;
  }

  while (v14 != (char *)v12);
  if ((v11 & 1) == 0) {
    return 1LL;
  }
LABEL_23:
  uint64_t v22 = a2;
  __int128 v56 = v58;
  uint64_t v57 = 0x800000000LL;
  swift::_gatherGenericParameterCounts(a1, (uint64_t)&v56, a5);
  v55[0] = a4;
  v55[1] = &v56;
  if (*((_WORD *)v9 + 3))
  {
    uint64_t v24 = 12LL * *((unsigned __int16 *)v9 + 3);
    uint64_t v25 = (int *)((((unint64_t)v9 + *((unsigned __int16 *)v9 + 2) + 15) & 0xFFFFFFFFFFFFFFFCLL) + 8);
    uint64_t v26 = v25;
    while (1)
    {
      if ((*(v25 - 2) & 0x1F) != 1) {
        goto LABEL_30;
      }
      SymbolicMangledNameStringRef = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef( (_BYTE *)v26 + *(v25 - 1) - 4,  v23);
      uint64_t v32 = demangleToGenericParamRef((uint64_t)SymbolicMangledNameStringRef, v31);
      if (!(_BYTE)v23) {
        goto LABEL_30;
      }
      if (v32 >= (unint64_t)v57
        || (!(_DWORD)v32 ? (int v33 = 0) : (int v33 = *((_DWORD *)v56 + (v32 - 1))),
            (uint64_t v34 = (v33 + HIDWORD(v32)), v34 >= *((_DWORD *)v56 + v32))
         || *(_DWORD *)(a4 + 8) <= v34))
      {
LABEL_67:
        uint64_t v6 = 0LL;
        goto LABEL_68;
      }

      if (!*(void *)(*(void *)a4 + 8 * v34)) {
        break;
      }
      __int128 v35 = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef((_BYTE *)v26 + *v25, v23);
      uint64_t v37 = demangleToGenericParamRef((uint64_t)v35, v36);
      if (!(_BYTE)v23) {
        goto LABEL_30;
      }
      int v38 = (_DWORD)v37 ? *((_DWORD *)v56 + (v37 - 1)) : 0;
      unsigned int v42 = v38 + HIDWORD(v37);
      __int128 v29 = (void *)(*(void *)a4 + 8LL * v42);
      if (*v29) {
        goto LABEL_67;
      }
      uint64_t v41 = *(void *)(*(void *)a4 + 8 * v34);
      if (!v41) {
        goto LABEL_67;
      }
LABEL_29:
      *__int128 v29 = v41;
LABEL_30:
      v26 += 3;
      v25 += 3;
      v24 -= 12LL;
      if (!v24) {
        goto LABEL_66;
      }
    }

    __int128 v39 = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef((_BYTE *)v26 + *v25, v23);
    v51[0] = off_189B8E058;
    v51[1] = v55;
    __int128 v52 = v51;
    v49[0] = off_189B8E0A0;
    v49[1] = v55;
    __int128 v50 = v49;
    swift_getTypeByMangledName((const char *)0xFF, v39, v40, v22, v51, v49, (uint64_t)v53);
    if (v54 == 1)
    {
      ((void (*)(void, uint64_t, void))v53[1])(v53[0], 3LL, 0LL);
    }

    else if (!v54)
    {
      uint64_t v41 = v53[0];
      goto LABEL_58;
    }

    uint64_t v41 = 0LL;
LABEL_58:
    __int128 v44 = v50;
    if (v50 == v49)
    {
      __int128 v44 = v49;
      uint64_t v45 = 4LL;
    }

    else
    {
      if (!v50) {
        goto LABEL_63;
      }
      uint64_t v45 = 5LL;
    }

    (*(void (**)(void))(*v44 + 8 * v45))();
LABEL_63:
    uint64_t v27 = v52;
    if (v52 == v51)
    {
      uint64_t v27 = v51;
      uint64_t v28 = 4LL;
    }

    else
    {
      if (!v52) {
        goto LABEL_27;
      }
      uint64_t v28 = 5LL;
    }

    (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_27:
    if (!v41) {
      goto LABEL_67;
    }
    __int128 v29 = (void *)(*(void *)a4 + 8 * v34);
    goto LABEL_29;
  }

void _gatherGenericParameters( unsigned int *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v16 = *(unsigned int *)(a5 + 8);
  if ((_DWORD)v16)
  {
    int v17 = *(_DWORD *)(*(void *)a5 + 4 * v16 - 4);
  }

  else if ((*a1 & 0x80) != 0)
  {
    int v17 = 0;
    switch(*a1 & 0x1F)
    {
      case 1u:
        uint64_t v18 = a1 + 2;
        goto LABEL_10;
      case 2u:
      case 4u:
        uint64_t v18 = a1 + 1;
        goto LABEL_10;
      case 0x10u:
        uint64_t v18 = a1 + 12;
        goto LABEL_10;
      case 0x11u:
      case 0x12u:
        uint64_t v18 = a1 + 8;
LABEL_10:
        int v17 = *((unsigned __int16 *)v18 + 2);
        break;
      default:
        break;
    }
  }

  else
  {
    int v17 = 0;
  }

  if (a3 != getLocalGenericParams(a1) && (a4 || a3 != v17))
  {
    if (a3 < 0) {
      goto LABEL_162;
    }
    uint64_t v23 = operator new(0x38uLL);
    *uint64_t v23 = a1;
    v23[1] = a2;
    v23[2] = a3;
    void v23[3] = a4;
    void v23[4] = a3;
    v23[5] = a1;
    *((_DWORD *)v23 + 12) = v17;
    char v24 = 1;
    *(void *)a8 = v23;
    *(void *)(a8 + 8) = swift::TypeLookupError::TypeLookupError<_gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_0>(_gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_0 const&)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
    goto LABEL_159;
  }

  if (!(_DWORD)v16)
  {
LABEL_158:
    char v24 = 0;
    *(_BYTE *)a8 = 0;
LABEL_159:
    *(_BYTE *)(a8 + 16) = v24;
    return;
  }

  uint64_t v119 = v121;
  uint64_t v120 = 0x800000000LL;
  if ((*a1 & 0x80) != 0)
  {
    uint64_t v22 = 0LL;
    switch(*a1 & 0x1F)
    {
      case 1u:
        uint64_t v22 = (unsigned __int16 *)(a1 + 2);
        goto LABEL_26;
      case 2u:
      case 4u:
        uint64_t v22 = (unsigned __int16 *)(a1 + 1);
        uint64_t v108 = a2;
        if (!a4) {
          goto LABEL_46;
        }
        goto LABEL_27;
      case 0x10u:
        uint64_t v22 = (unsigned __int16 *)(a1 + 12);
        uint64_t v108 = a2;
        if (!a4) {
          goto LABEL_46;
        }
        goto LABEL_27;
      case 0x11u:
      case 0x12u:
        uint64_t v22 = (unsigned __int16 *)(a1 + 8);
        uint64_t v108 = a2;
        if (!a4) {
          goto LABEL_46;
        }
        goto LABEL_27;
      default:
LABEL_26:
        uint64_t v108 = a2;
        if (a4) {
          goto LABEL_27;
        }
        goto LABEL_46;
    }
  }

  uint64_t v22 = 0LL;
  uint64_t v108 = a2;
  if (!a4) {
    goto LABEL_46;
  }
LABEL_27:
  LODWORD(v25) = 0;
  uint64_t v26 = *(void *)a4;
  if (*(void *)a4 > 0x7FFuLL) {
    LODWORD(v26) = 0;
  }
  if ((int)v26 > 514)
  {
    if ((_DWORD)v26 != 515 && (_DWORD)v26 != 516) {
      goto LABEL_47;
    }
    goto LABEL_36;
  }

  if ((v26 - 512) < 3)
  {
LABEL_36:
    uint64_t v27 = (uint64_t *)(a4 + 8);
    goto LABEL_37;
  }

  if ((_DWORD)v26)
  {
LABEL_47:
    __int128 v30 = v121;
    goto LABEL_48;
  }

  if ((*(_BYTE *)(a4 + 32) & 2) == 0)
  {
LABEL_46:
    LODWORD(v25) = 0;
    goto LABEL_47;
  }

  uint64_t v27 = (uint64_t *)(a4 + 64);
LABEL_37:
  uint64_t v25 = *v27;
  if (!v25) {
    goto LABEL_47;
  }
  if ((int)v26 > 514)
  {
    uint64_t v28 = (int **)(a4 + 8);
  }

  else if ((v26 - 512) >= 3)
  {
    uint64_t v28 = (int **)(a4 + 64);
  }

  else
  {
    uint64_t v28 = (int **)(a4 + 8);
  }

  int v29 = **v28;
  if ((v29 & 0x80) == 0) {
    goto LABEL_46;
  }
  LODWORD(v25) = 0;
  unsigned int v34 = v29 & 0x1F;
  if (v34 > 0x12) {
    goto LABEL_47;
  }
  int v35 = 1 << v34;
  __int128 v30 = v121;
  if ((v35 & 0x70016) == 0) {
    goto LABEL_48;
  }
  uint64_t v36 = 0LL;
  if ((int)v26 > 514 || (v26 - 512) < 3)
  {
    __int128 v68 = (unsigned __int16 **)(a4 + 8);
  }

  else
  {
    if ((_DWORD)v26) {
      goto LABEL_122;
    }
    if ((*(_BYTE *)(a4 + 32) & 2) == 0)
    {
      uint64_t v36 = 0LL;
      goto LABEL_122;
    }

    __int128 v68 = (unsigned __int16 **)(a4 + 64);
  }

  uint64_t v36 = *v68;
LABEL_122:
  if ((*(_DWORD *)v36 & 0x80) != 0)
  {
    __int128 v69 = 0LL;
    switch(*(_DWORD *)v36 & 0x1F)
    {
      case 1:
        __int128 v69 = v36 + 4;
        break;
      case 2:
      case 4:
        __int128 v69 = v36 + 2;
        break;
      case 0x10:
        __int128 v69 = v36 + 24;
        break;
      case 0x11:
      case 0x12:
        __int128 v69 = v36 + 16;
        break;
      default:
        break;
    }
  }

  else
  {
    __int128 v69 = 0LL;
  }

  uint64_t v107 = v36;
  if ((v69[5] & 1) != 0) {
    unsigned int v70 = *(_DWORD *)((((unint64_t)v69 + v69[2] + 15) & 0xFFFFFFFFFFFFFFFCLL) + 12LL * v69[3]);
  }
  else {
    unsigned int v70 = 0;
  }
  __int128 v71 = &swift::TargetMetadata<swift::InProcess>::getGenericArgs((uint64_t *)a4, v19, v20, v21)[HIWORD(v70)];
  uint64_t v72 = v69[2];
  if (v69[2])
  {
    __int128 v73 = v69 + 6;
    __int128 v74 = v107;
    if (v72 < 8)
    {
      unsigned int v75 = 0;
      __int128 v76 = (unsigned __int8 *)(v69 + 6);
LABEL_136:
      a2 = v108;
LABEL_148:
      int v100 = (unsigned __int8 *)v73 + v72;
      do
      {
        unsigned int v101 = *v76++;
        v75 += v101 >> 7;
      }

      while (v76 != v100);
      goto LABEL_150;
    }

    if (v72 < 0x20)
    {
      unsigned int v75 = 0;
      uint64_t v77 = 0LL;
      goto LABEL_145;
    }

    int32x4_t v78 = 0uLL;
    uint64_t v77 = (unsigned __int16)v72 & 0xFFE0;
    int32x4_t v79 = 0uLL;
    __int128 v80 = (uint8x16_t *)(v69 + 14);
    uint64_t v81 = v77;
    int32x4_t v82 = 0uLL;
    int32x4_t v83 = 0uLL;
    int32x4_t v84 = 0uLL;
    int32x4_t v85 = 0uLL;
    int32x4_t v86 = 0uLL;
    int32x4_t v87 = 0uLL;
    do
    {
      uint8x16_t v88 = vshrq_n_u8(v80[-1], 7uLL);
      uint8x16_t v89 = vshrq_n_u8(*v80, 7uLL);
      uint16x8_t v90 = vmovl_u8(*(uint8x8_t *)v88.i8);
      uint16x8_t v91 = vmovl_high_u8(v88);
      uint16x8_t v92 = vmovl_u8(*(uint8x8_t *)v89.i8);
      uint16x8_t v93 = vmovl_high_u8(v89);
      int32x4_t v83 = (int32x4_t)vaddw_high_u16((uint32x4_t)v83, v91);
      int32x4_t v82 = (int32x4_t)vaddw_u16((uint32x4_t)v82, *(uint16x4_t *)v91.i8);
      int32x4_t v79 = (int32x4_t)vaddw_high_u16((uint32x4_t)v79, v90);
      int32x4_t v78 = (int32x4_t)vaddw_u16((uint32x4_t)v78, *(uint16x4_t *)v90.i8);
      int32x4_t v87 = (int32x4_t)vaddw_high_u16((uint32x4_t)v87, v93);
      int32x4_t v86 = (int32x4_t)vaddw_u16((uint32x4_t)v86, *(uint16x4_t *)v93.i8);
      int32x4_t v85 = (int32x4_t)vaddw_high_u16((uint32x4_t)v85, v92);
      int32x4_t v84 = (int32x4_t)vaddw_u16((uint32x4_t)v84, *(uint16x4_t *)v92.i8);
      v80 += 2;
      v81 -= 32LL;
    }

    while (v81);
    unsigned int v75 = vaddvq_s32( vaddq_s32( vaddq_s32(vaddq_s32(v84, v78), vaddq_s32(v86, v82)),  vaddq_s32(vaddq_s32(v85, v79), vaddq_s32(v87, v83))));
    if (v77 != v72)
    {
      if ((v72 & 0x18) == 0)
      {
        __int128 v76 = (unsigned __int8 *)v73 + v77;
        goto LABEL_136;
      }

void installGetClassHook(void)
{
}

uint64_t getObjCClassByMangledName(char *__s, objc_class **a2)
{
  if (__s)
  {
    size_t v4 = strlen(__s);
    if (v4 < 3 || (*(_WORD *)__s == 21599 ? (BOOL v5 = __s[2] == 116) : (BOOL v5 = 0), !v5))
    {
      size_t v6 = strlen(__s);
      goto LABEL_9;
    }

    v32[2] = 0LL;
    unsigned int v33 = 0LL;
    uint64_t v34 = 2400LL;
    uint64_t v35 = 0LL;
    char v36 = 0;
    v32[0] = off_189B8E500;
    v32[1] = 0LL;
    __int128 v71 = 0LL;
    uint64_t v38 = 0LL;
    uint64_t v39 = 0LL;
    uint64_t v37 = 0LL;
    char v40 = 0;
    __int128 v52 = 0u;
    __int128 v53 = 0u;
    __int128 v54 = 0u;
    __int128 v55 = 0u;
    __int128 v56 = 0u;
    __int128 v57 = 0u;
    __int128 v58 = 0u;
    __int128 v59 = 0u;
    __int128 v60 = 0u;
    __int128 v61 = 0u;
    __int128 v62 = 0u;
    __int128 v63 = 0u;
    __int128 v64 = 0u;
    __int128 v65 = 0u;
    __int128 v66 = 0u;
    __int128 v67 = 0u;
    __int128 v68 = 0u;
    __int128 v41 = 0u;
    __int128 v42 = 0u;
    __int128 v43 = 0u;
    __int128 v44 = 0u;
    __int128 v45 = 0u;
    __int128 v46 = 0u;
    __int128 v47 = 0u;
    __int128 v48 = 0u;
    __int128 v49 = 0u;
    __int128 v50 = 0u;
    __int128 v51 = 0u;
    int v69 = 0;
    size_t v10 = strlen(__s);
    unint64_t v31 = 0LL;
    unint64_t TypeByMangledNameUntrusted = swift::Demangle::__runtime::Demangler::demangleSymbol((uint64_t)v32, __s, v10, v30);
    char v11 = v31;
    if (v31 == v30)
    {
      uint64_t v12 = 4LL;
      char v11 = v30;
    }

    else
    {
      if (!v31) {
        goto LABEL_24;
      }
      uint64_t v12 = 5LL;
    }

    (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_24:
    if (!TypeByMangledNameUntrusted)
    {
      char v17 = 0;
      goto LABEL_51;
    }

    int v13 = *(unsigned __int8 *)(TypeByMangledNameUntrusted + 18);
    switch(v13)
    {
      case 1:
        uint64_t v15 = 0LL;
        break;
      case 2:
        uint64_t v15 = 1LL;
        break;
      case 5:
        uint64_t v14 = *(unsigned int *)(TypeByMangledNameUntrusted + 8);
        if (!(_DWORD)v14) {
          goto LABEL_36;
        }
        uint64_t v15 = v14 - 1;
        unint64_t v16 = *(void *)TypeByMangledNameUntrusted;
LABEL_34:
        if (*(_WORD *)(*(void *)(v16 + 8 * v15) + 16LL) == 221)
        {
          unint64_t TypeByMangledNameUntrusted = 0LL;
          char v17 = 0;
          goto LABEL_51;
        }

uint64_t swift::SubstGenericParametersFromMetadata::buildDescriptorPath( uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v3 = (uint64_t)a2;
  if (!a2) {
    return v3;
  }
  __int128 v14 = xmmword_18180BFB0;
  char v16 = 0;
  __int128 v51 = 0LL;
  uint64_t v18 = 0LL;
  uint64_t v19 = 0LL;
  uint64_t v17 = 0LL;
  char v20 = 0;
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  __int128 v36 = 0u;
  __int128 v37 = 0u;
  __int128 v38 = 0u;
  __int128 v39 = 0u;
  __int128 v40 = 0u;
  __int128 v41 = 0u;
  __int128 v42 = 0u;
  __int128 v43 = 0u;
  __int128 v44 = 0u;
  __int128 v45 = 0u;
  __int128 v46 = 0u;
  __int128 v47 = 0u;
  __int128 v48 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  int v49 = 0;
  uint64_t v12 = (void (**)(swift::Demangle::__runtime::Demangler *__hidden))off_189B8D828;
  *(_BYTE *)(a3 + 48) = 1;
  uint64_t v15 = a3;
  __int128 v13 = *(_OWORD *)(a3 + 8);
  Extendeduint64_t TypeContextDescriptor = _findExtendedTypeContextDescriptor(a2, (char *)&v12, 0LL);
  if (ExtendedTypeContextDescriptor) {
    size_t v6 = ExtendedTypeContextDescriptor;
  }
  else {
    size_t v6 = (_DWORD *)v3;
  }
  uint64_t v7 = (int)v6[1];
  if ((_DWORD)v7)
  {
    uint64_t v8 = (void *)((char *)v6 + (v7 & 0xFFFFFFFFFFFFFFFELL) + 4);
    if ((v7 & 1) != 0) {
      uint64_t v8 = (void *)*v8;
    }
  }

  else
  {
    uint64_t v8 = 0LL;
  }

  uint64_t v3 = swift::SubstGenericParametersFromMetadata::buildDescriptorPath(a1, v8, &v12);
  if ((*v6 & 0x80) != 0) {
    __asm { BR              X12 }
  }

  uint64_t v12 = off_189B8E500;
  unsigned int v9 = v51;
  if (v51 == v50)
  {
    uint64_t v10 = 4LL;
    unsigned int v9 = v50;
  }

  else
  {
    if (!v51) {
      goto LABEL_16;
    }
    uint64_t v10 = 5LL;
  }

  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_16:
  uint64_t v12 = off_189B8E4D8;
  swift::Demangle::__runtime::NodeFactory::freeSlabs((void *)v14);
  if (v15) {
    *(_BYTE *)(v15 + 48) = 0;
  }
  return v3;
}

uint64_t swift::SubstGenericParametersFromMetadata::buildEnvironmentPath(uint64_t a1, _DWORD *a2)
{
  unint64_t v2 = (unsigned __int16 *)(a2 + 1);
  if ((*a2 & 0xFFF) != 0)
  {
    int v4 = 0;
    LODWORD(__swift::__runtime::llvm::hash_value(v4, v5) = 0;
    size_t v6 = &v2[*a2 & 0xFFF];
    uint64_t v7 = (unint64_t *)(a1 + 24);
    uint64_t v8 = (const void *)(a1 + 40);
    v9.i64[0] = -1LL;
    v9.i64[1] = -1LL;
    uint64_t v10 = (uint8x16_t *)v6;
    while (1)
    {
      int v11 = v4;
      int v4 = *v2;
      uint64_t v12 = (v4 - v11);
      __int128 v13 = &v10->i8[v12];
      if ((_DWORD)v12) {
        break;
      }
      unsigned int v14 = 0;
      LOBYTE(v15) = 0;
LABEL_19:
      v55[0] = v10;
      v55[1] = v12;
      int v56 = v4;
      int v57 = v5;
      unsigned int v58 = v14;
      char v59 = v15 & 1;
      uint64_t v46 = *(unsigned int *)(a1 + 32);
      unint64_t v47 = *(void *)(a1 + 24);
      if (v46 >= *(_DWORD *)(a1 + 36))
      {
        unint64_t v51 = v46 + 1;
        BOOL v52 = v47 + 32 * v46 > (unint64_t)v55;
        if (v47 <= (unint64_t)v55 && v52)
        {
          __int128 v54 = (char *)v55 - v47;
          __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v7, v8, v51, 32LL);
          unint64_t v47 = *v7;
          __int128 v48 = &v54[*v7];
        }

        else
        {
          __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v7, v8, v51, 32LL);
          unint64_t v47 = *v7;
          __int128 v48 = (char *)v55;
        }

        v9.i64[0] = -1LL;
        v9.i64[1] = -1LL;
      }

      else
      {
        __int128 v48 = (char *)v55;
      }

      uint64_t v5 = v14 + v5;
      int v49 = (_OWORD *)(v47 + 32LL * *(unsigned int *)(a1 + 32));
      __int128 v50 = *((_OWORD *)v48 + 1);
      *int v49 = *(_OWORD *)v48;
      v49[1] = v50;
      ++*(_DWORD *)(a1 + 32);
      ++v2;
      uint64_t v10 = (uint8x16_t *)v13;
      if (v2 == v6) {
        return v5;
      }
    }

    if (v12 < 8)
    {
      LOBYTE(v15) = 0;
      unsigned int v14 = 0;
      char v16 = (char *)v10;
      goto LABEL_18;
    }

    if (v12 >= 0x20)
    {
      int8x16_t v18 = 0uLL;
      uint64_t v17 = v12 & 0xFFFFFFE0;
      int8x16_t v19 = 0uLL;
      char v20 = v10 + 1;
      int32x4_t v21 = 0uLL;
      uint64_t v22 = v17;
      int32x4_t v23 = 0uLL;
      int32x4_t v24 = 0uLL;
      int32x4_t v25 = 0uLL;
      int32x4_t v26 = 0uLL;
      int32x4_t v27 = 0uLL;
      int32x4_t v28 = 0uLL;
      int32x4_t v29 = 0uLL;
      do
      {
        int8x16_t v30 = (int8x16_t)v20[-1];
        int8x16_t v31 = vcgtq_s8(v30, v9);
        uint8x16_t v32 = vshrq_n_u8((uint8x16_t)v30, 7uLL);
        uint8x16_t v33 = vshrq_n_u8(*v20, 7uLL);
        uint16x8_t v34 = vmovl_u8(*(uint8x8_t *)v32.i8);
        uint16x8_t v35 = vmovl_high_u8(v32);
        uint16x8_t v36 = vmovl_u8(*(uint8x8_t *)v33.i8);
        uint16x8_t v37 = vmovl_high_u8(v33);
        int32x4_t v25 = (int32x4_t)vaddw_high_u16((uint32x4_t)v25, v35);
        int32x4_t v24 = (int32x4_t)vaddw_u16((uint32x4_t)v24, *(uint16x4_t *)v35.i8);
        int32x4_t v23 = (int32x4_t)vaddw_high_u16((uint32x4_t)v23, v34);
        int32x4_t v21 = (int32x4_t)vaddw_u16((uint32x4_t)v21, *(uint16x4_t *)v34.i8);
        int32x4_t v29 = (int32x4_t)vaddw_high_u16((uint32x4_t)v29, v37);
        int32x4_t v28 = (int32x4_t)vaddw_u16((uint32x4_t)v28, *(uint16x4_t *)v37.i8);
        int32x4_t v27 = (int32x4_t)vaddw_high_u16((uint32x4_t)v27, v36);
        int32x4_t v26 = (int32x4_t)vaddw_u16((uint32x4_t)v26, *(uint16x4_t *)v36.i8);
        int8x16_t v18 = vorrq_s8(v31, v18);
        int8x16_t v19 = vorrq_s8(vcgtq_s8(*(int8x16_t *)v20, v9), v19);
        v20 += 2;
        v22 -= 32LL;
      }

      while (v22);
      unsigned int v14 = vaddvq_s32( vaddq_s32( vaddq_s32(vaddq_s32(v26, v21), vaddq_s32(v28, v24)),  vaddq_s32(vaddq_s32(v27, v23), vaddq_s32(v29, v25))));
      unsigned int v15 = vmaxvq_u8((uint8x16_t)vcltzq_s8(vshlq_n_s8(vorrq_s8(v18, v19), 7uLL))) & 1;
      if (v17 == v12) {
        goto LABEL_19;
      }
      if ((v12 & 0x18) == 0)
      {
        char v16 = &v10->i8[v17];
        do
        {
LABEL_18:
          int v45 = *v16++;
          v14 += (v45 & 0x80) >> 7;
          LOBYTE(v15) = (v45 >= 0) | v15;
        }

        while (v16 != v13);
        goto LABEL_19;
      }
    }

    else
    {
      unsigned int v15 = 0;
      unsigned int v14 = 0;
      uint64_t v17 = 0LL;
    }

    char v16 = &v10->i8[v12 & 0xFFFFFFF8];
    int8x8_t v38 = vdup_n_s8(v15);
    int32x4_t v39 = 0uLL;
    int32x4_t v40 = (int32x4_t)v14;
    __int128 v41 = (int8x8_t *)&v10->i8[v17];
    uint64_t v42 = v17 - (v12 & 0xFFFFFFF8);
    do
    {
      int8x8_t v43 = *v41++;
      uint16x8_t v44 = vmovl_u8(vshr_n_u8((uint8x8_t)v43, 7uLL));
      int32x4_t v39 = (int32x4_t)vaddw_high_u16((uint32x4_t)v39, v44);
      int32x4_t v40 = (int32x4_t)vaddw_u16((uint32x4_t)v40, *(uint16x4_t *)v44.i8);
      int8x8_t v38 = vorr_s8(vcgt_s8(v43, (int8x8_t)-1LL), v38);
      v42 += 8LL;
    }

    while (v42);
    unsigned int v14 = vaddvq_s32(vaddq_s32(v40, v39));
    LOBYTE(v15) = vmaxv_u8((uint8x8_t)vcltz_s8(vshl_n_s8(v38, 7uLL))) & 1;
    if ((v12 & 0xFFFFFFF8) == v12) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }

  return 0LL;
}

uint64_t swift::SubstGenericParametersFromMetadata::buildShapePath(uint64_t a1, unsigned int *a2)
{
  int v4 = v35;
  if (v35)
  {
    uint64_t v5 = a1 + 24;
    unint64_t v6 = *(void *)(a1 + 24);
    int32x4_t v29 = v36;
    unint64_t v30 = v35;
    int v31 = v35;
    unsigned int v32 = 0;
    int v33 = v35;
    char v34 = 0;
    uint64_t v7 = *(unsigned int *)(a1 + 32);
    uint64_t v8 = (char *)&v29;
    if (v7 >= *(_DWORD *)(a1 + 36))
    {
      unint64_t v25 = v7 + 1;
      BOOL v26 = v6 + 32 * v7 > (unint64_t)&v29;
      if (v6 <= (unint64_t)&v29 && v26)
      {
        int32x4_t v28 = (char *)&v29 - v6;
        __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (const void *)(a1 + 40), v25, 32LL);
        unint64_t v6 = *(void *)(a1 + 24);
        uint64_t v8 = &v28[v6];
      }

      else
      {
        __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (const void *)(a1 + 40), v25, 32LL);
        unint64_t v6 = *(void *)(a1 + 24);
        uint64_t v8 = (char *)&v29;
      }
    }

    int8x16_t v9 = (_OWORD *)(v6 + 32LL * *(unsigned int *)(a1 + 32));
    __int128 v10 = *((_OWORD *)v8 + 1);
    *int8x16_t v9 = *(_OWORD *)v8;
    v9[1] = v10;
    ++*(_DWORD *)(a1 + 32);
    unsigned int v11 = v35;
  }

  else
  {
    unsigned int v11 = 0;
  }

  unint64_t v12 = *a2;
  if ((v12 & 0x800) != 0) {
    __int128 v13 = (char *)&swift::ImplicitGenericParamDescriptors;
  }
  else {
    __int128 v13 = (char *)((((unint64_t)&a2[2 * ((v12 >> 8) & 1) + 4] + 3) & 0xFFFFFFFFFFFFFFFCLL)
  }
                 + 4 * ((v12 >> 9) & 1)
                 + 4LL * ((v12 >> 10) & 1));
  unint64_t v14 = *((unsigned __int16 *)a2 + 4) - (unint64_t)v11;
  uint64_t v15 = (v14 + v4);
  uint64_t v16 = a1 + 24;
  unint64_t v17 = *(void *)(a1 + 24);
  int32x4_t v29 = &v13[v11];
  unint64_t v30 = v14;
  int v31 = v14 + v4;
  unsigned int v32 = v11;
  int v33 = v14;
  char v34 = 0;
  uint64_t v18 = *(unsigned int *)(a1 + 32);
  int8x16_t v19 = (char *)&v29;
  if (v18 >= *(_DWORD *)(a1 + 36))
  {
    unint64_t v23 = v18 + 1;
    BOOL v24 = v17 + 32 * v18 > (unint64_t)&v29;
    if (v17 <= (unint64_t)&v29 && v24)
    {
      int32x4_t v27 = (char *)&v29 - v17;
      __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(v16, (const void *)(a1 + 40), v23, 32LL);
      unint64_t v17 = *(void *)(a1 + 24);
      int8x16_t v19 = &v27[v17];
    }

    else
    {
      __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(v16, (const void *)(a1 + 40), v23, 32LL);
      unint64_t v17 = *(void *)(a1 + 24);
      int8x16_t v19 = (char *)&v29;
    }
  }

  char v20 = (_OWORD *)(v17 + 32LL * *(unsigned int *)(a1 + 32));
  __int128 v21 = *((_OWORD *)v19 + 1);
  *char v20 = *(_OWORD *)v19;
  v20[1] = v21;
  ++*(_DWORD *)(a1 + 32);
  return v15;
}

unsigned int **swift::SubstGenericParametersFromMetadata::setup(unsigned int **this)
{
  if (!*((_DWORD *)this + 8))
  {
    uint64_t v1 = (uint64_t)this;
    int v2 = *(_DWORD *)this;
    if (*(_DWORD *)this == 2)
    {
      this = (unsigned int **)swift::SubstGenericParametersFromMetadata::buildShapePath((uint64_t)this, this[1]);
    }

    else
    {
      if (v2 != 1)
      {
        if (v2) {
          return this;
        }
        __int128 v9 = xmmword_18180BFB0;
        uint64_t v10 = 0LL;
        char v11 = 0;
        uint64_t v46 = 0LL;
        uint64_t v13 = 0LL;
        uint64_t v14 = 0LL;
        uint64_t v12 = 0LL;
        char v15 = 0;
        __int128 v27 = 0u;
        __int128 v28 = 0u;
        __int128 v29 = 0u;
        __int128 v30 = 0u;
        __int128 v31 = 0u;
        __int128 v32 = 0u;
        __int128 v33 = 0u;
        __int128 v34 = 0u;
        __int128 v35 = 0u;
        __int128 v36 = 0u;
        __int128 v37 = 0u;
        __int128 v38 = 0u;
        __int128 v39 = 0u;
        __int128 v40 = 0u;
        __int128 v41 = 0u;
        __int128 v42 = 0u;
        __int128 v43 = 0u;
        __int128 v16 = 0u;
        __int128 v17 = 0u;
        __int128 v18 = 0u;
        __int128 v19 = 0u;
        __int128 v20 = 0u;
        __int128 v21 = 0u;
        __int128 v22 = 0u;
        __int128 v23 = 0u;
        __int128 v24 = 0u;
        __int128 v25 = 0u;
        __int128 v26 = 0u;
        int v44 = 0;
        v8[1] = &v47;
        void v8[2] = &v48;
        v8[0] = off_189B8D9B8;
        *((_DWORD *)this + 74) = swift::SubstGenericParametersFromMetadata::buildDescriptorPath( (uint64_t)this,  this[1],  (uint64_t)v8);
        uint64_t v3 = *(unsigned __int16 **)(v1 + 8);
        if ((*(_DWORD *)v3 & 0x80) != 0)
        {
          switch(*(_DWORD *)v3 & 0x1F)
          {
            case 1:
              int v4 = v3 + 4;
              goto LABEL_14;
            case 2:
            case 4:
              int v4 = v3 + 2;
              goto LABEL_14;
            case 0x10:
              int v4 = v3 + 24;
              goto LABEL_14;
            case 0x11:
            case 0x12:
              int v4 = v3 + 16;
LABEL_14:
              if ((v4[5] & 1) != 0) {
                int v5 = *(unsigned __int16 *)((((unint64_t)v4 + v4[2] + 15) & 0xFFFFFFFFFFFFFFFCLL)
              }
                                         + 12LL * v4[3]
                                         + 2);
              else {
                int v5 = 0;
              }
              *(_DWORD *)(v1 + 300) = v5;
              break;
            default:
              break;
          }
        }

        v8[0] = off_189B8E500;
        unint64_t v6 = v46;
        if (v46 == v45)
        {
          uint64_t v7 = 4LL;
          unint64_t v6 = v45;
        }

        else
        {
          if (!v46) {
            goto LABEL_23;
          }
          uint64_t v7 = 5LL;
        }

        (*(void (**)(void *))(*v6 + 8 * v7))(v6);
LABEL_23:
        v8[0] = off_189B8E4D8;
        this = (unsigned int **)swift::Demangle::__runtime::NodeFactory::freeSlabs((void *)v9);
        if (v10) {
          *(_BYTE *)(v10 + 48) = 0;
        }
        return this;
      }

      this = (unsigned int **)swift::SubstGenericParametersFromMetadata::buildEnvironmentPath((uint64_t)this, this[1]);
    }

    *(_DWORD *)(v1 + 296) = (_DWORD)this;
  }

  return this;
}

uint64_t swift::SubstGenericParametersFromMetadata::getMetadata( swift::SubstGenericParametersFromMetadata *this, unsigned int a2, unsigned int a3)
{
  if (!*((void *)this + 2)) {
    return 0LL;
  }
  swift::SubstGenericParametersFromMetadata::setup((unsigned int **)this);
  if (*((_DWORD *)this + 8) <= a2) {
    return 0LL;
  }
  uint64_t v6 = *((void *)this + 3) + 32LL * a2;
  if (*(_DWORD *)(v6 + 16) <= a3) {
    return 0LL;
  }
  unsigned int v7 = *((_DWORD *)this + 75) + *(_DWORD *)(v6 + 20);
  if (*(_BYTE *)(v6 + 28))
  {
    uint64_t v8 = *(uint8x16_t **)v6;
    __int128 v9 = (uint8x16_t *)(*(void *)v6 + a3);
    if ((v9->i8[0] & 0x80000000) == 0) {
      return 0LL;
    }
    if (a3)
    {
      if (a3 < 8)
      {
        char v11 = v8;
        goto LABEL_22;
      }

      if (a3 >= 0x20)
      {
        uint64_t v12 = a3 & 0xFFFFFFE0;
        int32x4_t v13 = 0uLL;
        int32x4_t v14 = (int32x4_t)v7;
        char v15 = v8 + 1;
        uint64_t v16 = v12;
        int32x4_t v17 = 0uLL;
        int32x4_t v18 = 0uLL;
        int32x4_t v19 = 0uLL;
        int32x4_t v20 = 0uLL;
        int32x4_t v21 = 0uLL;
        int32x4_t v22 = 0uLL;
        do
        {
          uint8x16_t v23 = vshrq_n_u8(v15[-1], 7uLL);
          uint8x16_t v24 = vshrq_n_u8(*v15, 7uLL);
          uint16x8_t v25 = vmovl_u8(*(uint8x8_t *)v23.i8);
          uint16x8_t v26 = vmovl_high_u8(v23);
          uint16x8_t v27 = vmovl_u8(*(uint8x8_t *)v24.i8);
          uint16x8_t v28 = vmovl_high_u8(v24);
          int32x4_t v18 = (int32x4_t)vaddw_high_u16((uint32x4_t)v18, v26);
          int32x4_t v17 = (int32x4_t)vaddw_u16((uint32x4_t)v17, *(uint16x4_t *)v26.i8);
          int32x4_t v13 = (int32x4_t)vaddw_high_u16((uint32x4_t)v13, v25);
          int32x4_t v14 = (int32x4_t)vaddw_u16((uint32x4_t)v14, *(uint16x4_t *)v25.i8);
          int32x4_t v22 = (int32x4_t)vaddw_high_u16((uint32x4_t)v22, v28);
          int32x4_t v21 = (int32x4_t)vaddw_u16((uint32x4_t)v21, *(uint16x4_t *)v28.i8);
          int32x4_t v20 = (int32x4_t)vaddw_high_u16((uint32x4_t)v20, v27);
          int32x4_t v19 = (int32x4_t)vaddw_u16((uint32x4_t)v19, *(uint16x4_t *)v27.i8);
          v15 += 2;
          v16 -= 32LL;
        }

        while (v16);
        unsigned int v7 = vaddvq_s32( vaddq_s32( vaddq_s32(vaddq_s32(v19, v14), vaddq_s32(v21, v17)),  vaddq_s32(vaddq_s32(v20, v13), vaddq_s32(v22, v18))));
        if (v12 == a3) {
          return *(void *)(*((void *)this + 2) + 8LL * v7);
        }
        if ((a3 & 0x18) == 0)
        {
          char v11 = (uint8x16_t *)((char *)v8 + v12);
          do
          {
LABEL_22:
            unsigned int v35 = v11->u8[0];
            char v11 = (uint8x16_t *)((char *)v11 + 1);
            v7 += v35 >> 7;
          }

          while (v11 != v9);
          return *(void *)(*((void *)this + 2) + 8LL * v7);
        }
      }

      else
      {
        uint64_t v12 = 0LL;
      }

      char v11 = (uint8x16_t *)((char *)v8 + (a3 & 0xFFFFFFF8));
      int32x4_t v29 = 0uLL;
      int32x4_t v30 = (int32x4_t)v7;
      __int128 v31 = (uint8x8_t *)&v8->i8[v12];
      uint64_t v32 = v12 - (a3 & 0xFFFFFFF8);
      do
      {
        uint8x8_t v33 = *v31++;
        uint16x8_t v34 = vmovl_u8(vshr_n_u8(v33, 7uLL));
        int32x4_t v29 = (int32x4_t)vaddw_high_u16((uint32x4_t)v29, v34);
        int32x4_t v30 = (int32x4_t)vaddw_u16((uint32x4_t)v30, *(uint16x4_t *)v34.i8);
        v32 += 8LL;
      }

      while (v32);
      unsigned int v7 = vaddvq_s32(vaddq_s32(v30, v29));
      goto LABEL_22;
    }
  }

  else
  {
    v7 += a3;
  }

  return *(void *)(*((void *)this + 2) + 8LL * v7);
}

uint64_t swift::SubstGenericParametersFromMetadata::getMetadataKeyArgOrdinal( swift::SubstGenericParametersFromMetadata *this, int a2)
{
  if (!*((void *)this + 2)) {
    return 0LL;
  }
  swift::SubstGenericParametersFromMetadata::setup((unsigned int **)this);
  return *(void *)(*((void *)this + 2) + 8LL * (*((_DWORD *)this + 75) + a2));
}

uint64_t swift::SubstGenericParametersFromMetadata::getWitnessTable(uint64_t a1, uint64_t a2, int a3)
{
  if (!*(void *)(a1 + 16)) {
    return 0LL;
  }
  swift::SubstGenericParametersFromMetadata::setup((unsigned int **)a1);
  return *(void *)(*(void *)(a1 + 16) + 8LL * (*(_DWORD *)(a1 + 296) + a3 + *(_DWORD *)(a1 + 300)));
}

uint64_t demangleToGenericParamRef(uint64_t a1, uint64_t a2)
{
  __int128 v16 = xmmword_18180BFB0;
  uint64_t v17 = 0LL;
  char v18 = 0;
  __int128 v53 = 0LL;
  uint64_t v20 = 0LL;
  uint64_t v21 = 0LL;
  uint64_t v19 = 0LL;
  char v22 = 0;
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  __int128 v36 = 0u;
  __int128 v37 = 0u;
  __int128 v38 = 0u;
  __int128 v39 = 0u;
  __int128 v40 = 0u;
  __int128 v41 = 0u;
  __int128 v42 = 0u;
  __int128 v43 = 0u;
  __int128 v44 = 0u;
  __int128 v45 = 0u;
  __int128 v46 = 0u;
  __int128 v47 = 0u;
  __int128 v48 = 0u;
  __int128 v49 = 0u;
  __int128 v50 = 0u;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  int v51 = 0;
  v15[0] = off_189B8B130;
  v15[1] = &v54;
  v15[2] = &v55;
  int32x4_t v14 = 0LL;
  int v2 = (void *)swift::Demangle::__runtime::Demangler::demangleType((uint64_t)v15, a1, a2, v13);
  uint64_t v3 = v14;
  if (v14 == v13)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v13;
  }

  else
  {
    if (!v14) {
      goto LABEL_6;
    }
    uint64_t v4 = 5LL;
  }

  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (!v2)
  {
    uint64_t v6 = 0LL;
    uint64_t v7 = 0LL;
    goto LABEL_24;
  }

  if (*((_WORD *)v2 + 8) == 232)
  {
    int v5 = *((unsigned __int8 *)v2 + 18);
    if ((v5 - 1) < 2)
    {
LABEL_12:
      int v2 = (void *)*v2;
      goto LABEL_15;
    }

    if (v5 == 5 && *((_DWORD *)v2 + 2))
    {
      int v2 = (void *)*v2;
      goto LABEL_12;
    }

    int v2 = 0LL;
  }

void swift::addImageDynamicReplacementBlockCallback( swift *this, unsigned int *a2, uint64_t a3, unint64_t a4, char *a5)
{
  unint64_t v6 = a4;
  int v8 = a2;
  if (a5) {
    uint64_t v9 = 8LL * *(unsigned int *)(a4 + 4) + 8;
  }
  else {
    uint64_t v9 = 0LL;
  }
  uint64_t v10 = a2[1];
  if (qword_18C486DF0 != -1) {
    dispatch_once_f( &qword_18C486DF0,  &DynamicReplacementLock,  (dispatch_function_t)swift::Lazy<swift::Mutex>::defaultInitCallback);
  }
  os_unfair_lock_lock((os_unfair_lock_t)&DynamicReplacementLock);
  if (a3 < 1) {
    goto LABEL_24;
  }
  uint64_t v11 = (unsigned int *)((char *)v8 + a3);
  uint64_t v12 = v8[1];
  if (!v8[1]) {
    goto LABEL_21;
  }
LABEL_8:
  int32x4_t v13 = (int *)(v8 + 2);
  uint64_t v14 = (uint64_t)&v8[2 * v12 + 2];
  do
  {
    char v15 = (char *)v13 + *v13;
    uint64_t v16 = *((unsigned int *)v15 + 1);
    if ((_DWORD)v16)
    {
      uint64_t v17 = 0LL;
      uint64_t v18 = 16 * v16;
      uint64_t v19 = v15 + 20;
      do
      {
        uint64_t v22 = *(int *)&v19[v17 - 12];
        __int128 v23 = &v15[v17 + 8 + (v22 & 0xFFFFFFFFFFFFFFFELL)];
        if ((v22 & 1) != 0)
        {
          __int128 v23 = *(char **)v23;
          if (v23)
          {
LABEL_18:
            __int128 v24 = &v23[*(int *)v23];
            if ((v19[v17] & 1) == 0)
            {
              __int128 v25 = (void *)*((void *)v24 + 1);
              if (v25)
              {
                *((void *)v24 + 1) = v25[1];
                *(void *)__int128 v24 = *v25;
              }
            }

            uint64_t v20 = *(int *)&v19[v17 - 8];
            uint64_t v21 = &v15[v17 + *(int *)&v19[v17 - 4]];
            *((void *)v21 + 2) = *(void *)v24;
            v21 += 16;
            *((void *)v21 + 1) = *((void *)v24 + 1);
            *(void *)__int128 v24 = &v15[v17 + 12 + v20];
            *((void *)v24 + 1) = v21;
          }
        }

        else if (&v15[v17 + (v22 & 0xFFFFFFFFFFFFFFFELL)] != (char *)-8LL)
        {
          goto LABEL_18;
        }

        v17 += 16LL;
      }

      while (v18 != v17);
    }

    v13 += 2;
  }

  while (v13 != (int *)v14);
LABEL_21:
  while (1)
  {
    v8 += 2 * v10 + 2;
    if (v8 >= v11) {
      break;
    }
    uint64_t v10 = v8[1];
    uint64_t v12 = v10;
    if (v8[1]) {
      goto LABEL_8;
    }
  }

_DWORD *swift::Lazy<swift::Mutex>::defaultInitCallback(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

void swift_enableDynamicReplacementScope(uint64_t a1)
{
  if (qword_18C486DF0 != -1) {
    dispatch_once_f( &qword_18C486DF0,  &DynamicReplacementLock,  (dispatch_function_t)swift::Lazy<swift::Mutex>::defaultInitCallback);
  }
  os_unfair_lock_lock((os_unfair_lock_t)&DynamicReplacementLock);
  uint64_t v2 = *(unsigned int *)(a1 + 4);
  if ((_DWORD)v2)
  {
    uint64_t v3 = 0LL;
    uint64_t v4 = 16 * v2;
    uint64_t v5 = a1 + 20;
    do
    {
      uint64_t v8 = *(int *)(v5 + v3 - 12);
      uint64_t v9 = (int *)(a1 + v3 + (v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
      if ((v8 & 1) != 0)
      {
        uint64_t v9 = *(int **)v9;
        if (v9)
        {
LABEL_11:
          uint64_t v10 = (void *)((char *)v9 + *v9);
          if ((*(_BYTE *)(v5 + v3) & 1) == 0)
          {
            uint64_t v11 = (void *)v10[1];
            if (v11)
            {
              v10[1] = v11[1];
              *uint64_t v10 = *v11;
            }
          }

          uint64_t v6 = *(int *)(v5 + v3 - 8);
          uint64_t v7 = a1 + v3 + *(int *)(v5 + v3 - 4);
          *(void *)(v7 + 16) = *v10;
          v7 += 16LL;
          *(void *)(v7 + 8) = v10[1];
          *uint64_t v10 = a1 + v3 + v6 + 12;
          v10[1] = v7;
        }
      }

      else if (a1 + v3 + (v8 & 0xFFFFFFFFFFFFFFFELL) != -8LL)
      {
        goto LABEL_11;
      }

      v3 += 16LL;
    }

    while (v4 != v3);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)&DynamicReplacementLock);
}

void swift_disableDynamicReplacementScope(uint64_t a1)
{
  if (qword_18C486DF0 != -1) {
    dispatch_once_f( &qword_18C486DF0,  &DynamicReplacementLock,  (dispatch_function_t)swift::Lazy<swift::Mutex>::defaultInitCallback);
  }
  os_unfair_lock_lock((os_unfair_lock_t)&DynamicReplacementLock);
  uint64_t v6 = *(unsigned int *)(a1 + 4);
  if ((_DWORD)v6)
  {
    uint64_t v7 = (int *)(a1 + 8);
    uint64_t v8 = a1 + 8 + 16 * v6;
    do
    {
      uint64_t v9 = *v7;
      uint64_t v10 = (int *)((char *)v7 + (v9 & 0xFFFFFFFFFFFFFFFELL));
      if ((v9 & 1) != 0) {
        uint64_t v10 = *(int **)v10;
      }
      uint64_t v11 = (void *)((char *)v10 + *v10);
      uint64_t v12 = (void *)((char *)v7 + v7[2] + 8);
      do
      {
        if (!v11) {
          swift::swift_abortDynamicReplacementDisabling(v2, v3, v4, v5);
        }
        int32x4_t v13 = v11;
        uint64_t v11 = (void *)v11[1];
      }

      while (v11 != v12);
      v13[1] = v12[1];
      *int32x4_t v13 = *v12;
      v7 += 4;
    }

    while (v7 != (int *)v8);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)&DynamicReplacementLock);
}

void *swift_getTypeByMangledNode@<X0>( const char *a1@<X0>, uint64_t a2@<X1>, swift::Demangle::__runtime::Node *a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, void *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14 = swift_getTypeByMangledNode::Override;
  char v15 = (void *)a5[3];
  if (!swift_getTypeByMangledNode::Override)
  {
    if (v15)
    {
      if (v15 != a5)
      {
        uint64_t v27 = (void *)(*(uint64_t (**)(void *))(*v15 + 16LL))(v15);
        uint64_t v17 = (void *)a6[3];
        if (v17) {
          goto LABEL_9;
        }
LABEL_25:
        __int128 v25 = 0LL;
        goto LABEL_29;
      }

      uint64_t v27 = v26;
      (*(void (**)(void *, void *))(*a5 + 24LL))(a5, v26);
      uint64_t v17 = (void *)a6[3];
      if (!v17) {
        goto LABEL_25;
      }
    }

    else
    {
      uint64_t v27 = 0LL;
      uint64_t v17 = (void *)a6[3];
      if (!v17) {
        goto LABEL_25;
      }
    }

void swift_getTypeByMangledNodeImpl( const char *a1@<X0>, uint64_t a2@<X1>, swift::Demangle::__runtime::Node *a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, void *a6@<X5>, uint64_t a7@<X8>)
{
  if (*((_WORD *)a3 + 8) == 299)
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t))a3)(a4);
    *(_WORD *)(a7 + 24) = 0;
    *(void *)a7 = v9;
    *(void *)(a7 + 8) = 0LL;
    *(_BYTE *)(a7 + 16) = 0;
    if (!v9)
    {
      *(void *)a7 = "unknown error";
      *(void *)(a7 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
      *(_WORD *)(a7 + 24) = 1;
    }

    return;
  }

  int32x4_t v13 = (void *)a5[3];
  if (v13)
  {
    if (v13 != a5)
    {
      uint64_t v35 = (void *)(*(uint64_t (**)(void *))(*v13 + 16LL))(v13);
      uint64_t v14 = (void *)a6[3];
      if (!v14) {
        goto LABEL_12;
      }
LABEL_9:
      if (v14 == a6)
      {
        __int128 v33 = v32;
        (*(void (**)(void *, void *))(*a6 + 24LL))(a6, v32);
      }

      else
      {
        __int128 v33 = (void *)(*(uint64_t (**)(void *))(*v14 + 16LL))(v14);
      }

      goto LABEL_14;
    }

    uint64_t v35 = v34;
    (*(void (**)(void *, void *))(*a5 + 24LL))(a5, v34);
    uint64_t v14 = (void *)a6[3];
    if (v14) {
      goto LABEL_9;
    }
  }

  else
  {
    uint64_t v35 = 0LL;
    uint64_t v14 = (void *)a6[3];
    if (v14) {
      goto LABEL_9;
    }
  }

void *swift_getTypeByMangledNameImpl@<X0>( const char *a1@<X0>, unsigned __int8 *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, void *a6@<X5>, uint64_t a7@<X8>)
{
  __int128 v59 = xmmword_18180BFB0;
  uint64_t v60 = 0LL;
  char v61 = 0;
  unint64_t v96 = 0LL;
  uint64_t v63 = 0LL;
  uint64_t v64 = 0LL;
  uint64_t v62 = 0LL;
  char v65 = 0;
  __int128 v77 = 0u;
  __int128 v78 = 0u;
  __int128 v79 = 0u;
  __int128 v80 = 0u;
  __int128 v81 = 0u;
  __int128 v82 = 0u;
  __int128 v83 = 0u;
  __int128 v84 = 0u;
  __int128 v85 = 0u;
  __int128 v86 = 0u;
  __int128 v87 = 0u;
  __int128 v88 = 0u;
  __int128 v89 = 0u;
  __int128 v90 = 0u;
  __int128 v91 = 0u;
  __int128 v92 = 0u;
  __int128 v93 = 0u;
  __int128 v66 = 0u;
  __int128 v67 = 0u;
  __int128 v68 = 0u;
  __int128 v69 = 0u;
  __int128 v70 = 0u;
  __int128 v71 = 0u;
  __int128 v72 = 0u;
  __int128 v73 = 0u;
  __int128 v74 = 0u;
  __int128 v75 = 0u;
  __int128 v76 = 0u;
  int v94 = 0;
  std::string __dst = &v97;
  unsigned int v58 = v98;
  int v56 = (void (**)(swift::Demangle::__runtime::Demangler *__hidden))off_189B8D9B8;
  if (a3)
  {
    unint64_t v14 = 0LL;
    unint64_t v15 = -1LL;
    unsigned int v16 = 1;
    do
    {
      unsigned int v17 = a2[v14];
      if (v17 == 46)
      {
        BOOL v18 = v15 == -1LL;
        unint64_t v15 = v14;
        if (!v18) {
          goto LABEL_19;
        }
      }

      else if (v17 < 0x20)
      {
        goto LABEL_19;
      }

      unint64_t v14 = v16++;
    }

    while (v14 < a3);
    if (v15 != -1LL)
    {
      uint64_t v19 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(&v56, 24);
      if (a3 >= v15) {
        size_t v20 = v15;
      }
      else {
        size_t v20 = a3;
      }
      uint64_t v51 = a4;
      if (v20)
      {
        uint64_t v21 = (char *)__dst;
        if (!__dst || (char *)__dst + v20 > (char *)v58)
        {
          uint64_t v22 = 2LL * *((void *)&v59 + 1);
          if (2LL * *((void *)&v59 + 1) <= v20 + 1) {
            uint64_t v22 = v20 + 1;
          }
          *((void *)&v59 + 1) = v22;
          uint64_t v23 = v22 + 8;
          char v24 = malloc(v22 + 8);
          uint64_t v25 = (void *)((char *)v24 + v23);
          *char v24 = v59;
          uint64_t v21 = (char *)(v24 + 1);
          unsigned int v58 = v25;
          *(void *)&__int128 v59 = v24;
        }

        std::string __dst = &v21[v20];
        memmove(v21, a2, v20);
      }

      else
      {
        uint64_t v21 = 0LL;
      }

      uint64_t v30 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText( &v56,  153,  (uint64_t)v21,  v20);
      if (a3 >= v15 + 1) {
        unint64_t v31 = v15 + 1;
      }
      else {
        unint64_t v31 = a3;
      }
      size_t v32 = a3 - v31;
      if (v15 + 1 >= a3)
      {
        uint64_t v34 = 0LL;
      }

      else
      {
        __int128 v33 = &a2[v31];
        uint64_t v34 = (char *)__dst;
        if (!__dst || (char *)__dst + v32 > (char *)v58)
        {
          uint64_t v35 = 2LL * *((void *)&v59 + 1);
          if (2LL * *((void *)&v59 + 1) <= v32 + 1) {
            uint64_t v35 = v32 + 1;
          }
          *((void *)&v59 + 1) = v35;
          uint64_t v36 = v35 + 8;
          __int128 v37 = malloc(v35 + 8);
          __int128 v38 = (void *)((char *)v37 + v36);
          *__int128 v37 = v59;
          uint64_t v34 = (char *)(v37 + 1);
          unsigned int v58 = v38;
          *(void *)&__int128 v59 = v37;
        }

        std::string __dst = &v34[v32];
        memmove(v34, v33, v32);
      }

      int v39 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText( &v56,  101,  (uint64_t)v34,  v32);
      swift::Demangle::__runtime::Node::addChild(v19, v30, (swift::Demangle::__runtime::NodeFactory *)&v56, v40, v41);
      swift::Demangle::__runtime::Node::addChild(v19, v39, (swift::Demangle::__runtime::NodeFactory *)&v56, v42, v43);
      a4 = v51;
      uint64_t v28 = (void *)a5[3];
      if (!v28) {
        goto LABEL_45;
      }
LABEL_26:
      if (v28 == a5)
      {
        uint64_t v55 = v54;
        (*(void (**)(void *, void *))(*a5 + 24LL))(a5, v54);
        uint64_t v29 = (void *)a6[3];
        if (v29) {
          goto LABEL_46;
        }
      }

      else
      {
        uint64_t v55 = (void *)(*(uint64_t (**)(void *))(*v28 + 16LL))(v28);
        uint64_t v29 = (void *)a6[3];
        if (v29) {
          goto LABEL_46;
        }
      }

void DemanglerForRuntimeTypeResolution<swift::Demangle::__runtime::Demangler>::~DemanglerForRuntimeTypeResolution( void *a1)
{
  *a1 = off_189B8E500;
  uint64_t v2 = a1 + 68;
  uint64_t v3 = (void *)a1[71];
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
  }

  else
  {
    if (!v3) {
      goto LABEL_6;
    }
    uint64_t v4 = 5LL;
  }

  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  *a1 = off_189B8E4D8;
  swift::Demangle::__runtime::NodeFactory::freeSlabs((void *)a1[3]);
  uint64_t v5 = a1[5];
  if (v5) {
    *(_BYTE *)(v5 + 48) = 0;
  }
  operator delete(a1);
}

void *std::__function::__func<swift::ResolveAsSymbolicReference,std::allocator<swift::ResolveAsSymbolicReference>,swift::Demangle::__runtime::Node * ()(swift::Demangle::__runtime::SymbolicReferenceKind,swift::Demangle::__runtime::Directness,int,void const*)>::__clone( uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_189B8D850;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift::ResolveAsSymbolicReference,std::allocator<swift::ResolveAsSymbolicReference>,swift::Demangle::__runtime::Node * ()(swift::Demangle::__runtime::SymbolicReferenceKind,swift::Demangle::__runtime::Directness,int,void const*)>::__clone( uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_189B8D850;
  a2[1] = v2;
  return result;
}

unint64_t std::__function::__func<swift::ResolveAsSymbolicReference,std::allocator<swift::ResolveAsSymbolicReference>,swift::Demangle::__runtime::Node * ()(swift::Demangle::__runtime::SymbolicReferenceKind,swift::Demangle::__runtime::Directness,int,void const*)>::operator()( uint64_t a1, unsigned __int8 *a2, int *a3, unsigned int *a4, swift::SymbolInfo **a5)
{
  return swift::ResolveAsSymbolicReference::operator()( (swift::Demangle::__runtime::NodeFactory **)(a1 + 8),  *a2,  *a3,  *a4,  *a5);
}

unsigned __int16 ***swift::Demangle::__runtime::getObjCClassOrProtocolName@<X0>( unsigned __int16 ***result@<X0>, uint64_t a2@<X8>)
{
  int v2 = *((unsigned __int16 *)result + 8);
  if (v2 != 24 && v2 != 180) {
    goto LABEL_21;
  }
  int v3 = *((unsigned __int8 *)result + 18);
  uint64_t v4 = result;
  if (v3 != 2)
  {
    if (v3 != 5 || *((_DWORD *)result + 2) != 2) {
      goto LABEL_21;
    }
    uint64_t v4 = (unsigned __int16 ***)*result;
  }

  uint64_t v5 = *v4;
  uint64_t v6 = *v5;
  int v7 = *v6;
  int v8 = *((unsigned __int8 *)v6 + 2);
  if (v7 != 24415 || v8 != 67) {
    goto LABEL_21;
  }
  if (v3 == 2) {
    goto LABEL_17;
  }
  if (*((_DWORD *)result + 2) >= 2u)
  {
    uint64_t result = (unsigned __int16 ***)*result;
LABEL_17:
    uint64_t v10 = result[1];
    goto LABEL_19;
  }

  uint64_t v10 = 0LL;
LABEL_19:
  if (*((_WORD *)v10 + 8) == 101)
  {
    *(_OWORD *)a2 = *(_OWORD *)v10;
    *(_BYTE *)(a2 + 16) = 1;
    return result;
  }

StructDescriptor *descriptorFromStandardMangling(int **a1)
{
  int v1 = *((unsigned __int8 *)a1 + 18);
  if (v1 == 2)
  {
    if (*((_WORD *)*a1 + 8) != 153) {
      return 0LL;
    }
    int v3 = 0;
    int v2 = (int ***)a1;
  }

  else
  {
    if (v1 != 5) {
      return 0LL;
    }
    if (*((_DWORD *)a1 + 2) < 2u) {
      return 0LL;
    }
    int v2 = (int ***)*a1;
    if (*(_WORD *)(*(void *)*a1 + 16LL) != 153) {
      return 0LL;
    }
    int v3 = 1;
  }

  uint64_t v4 = *v2;
  uint64_t v5 = *v4;
  int v6 = *v5;
  int v7 = *((unsigned __int8 *)v5 + 4);
  if (v6 != 1718187859 || v7 != 116) {
    return 0LL;
  }
  if (v3) {
    a1 = (int **)*a1;
  }
  if (*((_WORD *)a1[1] + 8) != 101) {
    return 0LL;
  }
  uint64_t v9 = (int **)a1[1];
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  switch((unint64_t)v11)
  {
    case 3uLL:
      if (*(_WORD *)v10 != 25939 || *((_BYTE *)v10 + 2) != 116)
      {
        if (*(_WORD *)v10 == 28233 && *((_BYTE *)v10 + 2) == 116) {
          return &nominal type descriptor for Int;
        }
        goto LABEL_289;
      }

      return &nominal type descriptor for Set;
    case 4uLL:
      if (*v10 != 1819242306)
      {
        if (*v10 == 1953384789) {
          return &nominal type descriptor for UInt;
        }
        goto LABEL_289;
      }

      return &nominal type descriptor for Bool;
    case 5uLL:
      if (*v10 == 1634890305 && *((_BYTE *)v10 + 4) == 121) {
        return &nominal type descriptor for Array;
      }
      if (*v10 != 1634692166 || *((_BYTE *)v10 + 4) != 116)
      {
        if (*v10 == 1735287122 && *((_BYTE *)v10 + 4) == 101) {
          return &nominal type descriptor for Range;
        }
        goto LABEL_289;
      }

      return &nominal type descriptor for Float;
    case 6uLL:
      if (*v10 != 1651863364 || *((_WORD *)v10 + 2) != 25964)
      {
        if (*v10 == 1769108563 && *((_WORD *)v10 + 2) == 26478) {
          return &nominal type descriptor for String;
        }
        goto LABEL_289;
      }

      return &nominal type descriptor for Double;
    case 7uLL:
      return (StructDescriptor *)&protocol descriptor for Numeric;
    case 8uLL:
      if (*(void *)v10 == 0x6C616E6F6974704FLL) {
        return (StructDescriptor *)&nominal type descriptor for Optional;
      }
      if (*(void *)v10 != 0x656C626168736148LL)
      {
        if (*(void *)v10 == 0x65636E6575716553LL) {
          return (StructDescriptor *)&protocol descriptor for Sequence;
        }
        goto LABEL_289;
      }

      return (StructDescriptor *)&protocol descriptor for Hashable;
    case 9uLL:
      if (*(void *)v10 == 0x6574636172616843LL && *((_BYTE *)v10 + 8) == 114) {
        return &nominal type descriptor for Character;
      }
      if (*(void *)v10 == 0x6E69727473627553LL && *((_BYTE *)v10 + 8) == 103) {
        return &nominal type descriptor for Substring;
      }
      if (*(void *)v10 == 0x6C6261646F636E45LL && *((_BYTE *)v10 + 8) == 101) {
        return (StructDescriptor *)&protocol descriptor for Encodable;
      }
      if (*(void *)v10 != 0x6C6261646F636544LL || *((_BYTE *)v10 + 8) != 101)
      {
        if (*(void *)v10 == 0x6C62617461757145LL && *((_BYTE *)v10 + 8) == 101) {
          return (StructDescriptor *)&protocol descriptor for Equatable;
        }
        goto LABEL_289;
      }

      return (StructDescriptor *)&protocol descriptor for Decodable;
    case 0xAuLL:
      if (*(void *)v10 == 0x616E6F6974636944LL && *((_WORD *)v10 + 4) == 31090) {
        return &nominal type descriptor for Dictionary;
      }
      if (*(void *)v10 == 0x62617261706D6F43LL && *((_WORD *)v10 + 4) == 25964) {
        return (StructDescriptor *)&protocol descriptor for Comparable;
      }
      if (*(void *)v10 != 0x697463656C6C6F43LL || *((_WORD *)v10 + 4) != 28271)
      {
        if (*(void *)v10 == 0x6261656469727453LL && *((_WORD *)v10 + 4) == 25964) {
          return (StructDescriptor *)&protocol descriptor for Strideable;
        }
        goto LABEL_289;
      }

      return (StructDescriptor *)&protocol descriptor for Collection;
    case 0xBuLL:
      return &nominal type descriptor for ClosedRange;
    case 0xDuLL:
      if (*(void *)v10 != 0x6E4964656E676953LL || *(void *)((char *)v10 + 5) != 0x72656765746E4964LL)
      {
        goto LABEL_289;
      }

      return (StructDescriptor *)&protocol descriptor for SignedInteger;
    case 0xEuLL:
      if (*(void *)v10 != 0x49746C7561666544LL || *(void *)((char *)v10 + 6) != 0x73656369646E4974LL)
      {
        goto LABEL_289;
      }

      return &nominal type descriptor for DefaultIndices;
    case 0xFuLL:
      if (*(void *)v10 != 0x64656E6769736E55LL || *(void *)((char *)v10 + 7) != 0x72656765746E4964LL)
      {
        goto LABEL_289;
      }

      return (StructDescriptor *)&protocol descriptor for UnsignedInteger;
    case 0x10uLL:
      if (*(void *)v10 == 0x64497463656A624FLL && *((void *)v10 + 1) == 0x7265696669746E65LL) {
        return &nominal type descriptor for ObjectIdentifier;
      }
      if (*(void *)v10 == 0x6152656661736E55LL && *((void *)v10 + 1) == 0x7265746E696F5077LL) {
        return &nominal type descriptor for UnsafeRawPointer;
      }
      if (*(void *)v10 != 0x726F746172657449LL || *((void *)v10 + 1) != 0x6C6F636F746F7250LL)
      {
        if (*(void *)v10 == 0x6572706552776152LL && *((void *)v10 + 1) == 0x656C6261746E6573LL) {
          return (StructDescriptor *)&protocol descriptor for RawRepresentable;
        }
        goto LABEL_289;
      }

      return (StructDescriptor *)&protocol descriptor for IteratorProtocol;
    case 0x11uLL:
      if (*(void *)v10 != 0x43656C626174754DLL
        || *((void *)v10 + 1) != 0x6F697463656C6C6FLL
        || *((_BYTE *)v10 + 16) != 110)
      {
        goto LABEL_289;
      }

      return (StructDescriptor *)&protocol descriptor for MutableCollection;
    case 0x13uLL:
      if (*(void *)v10 != 0x7542656661736E55LL
        || *((void *)v10 + 1) != 0x6E696F5072656666LL
        || *(void *)((char *)v10 + 11) != 0x7265746E696F5072LL)
      {
        if (*(void *)v10 == 0x6C467972616E6942LL
          && *((void *)v10 + 1) == 0x6F50676E6974616FLL
          && *(void *)((char *)v10 + 11) == 0x746E696F50676E69LL)
        {
          return (StructDescriptor *)&protocol descriptor for BinaryFloatingPoint;
        }

        goto LABEL_289;
      }

      return &nominal type descriptor for UnsafeBufferPointer;
    case 0x14uLL:
      if (*(void *)v10 != 0x754D656661736E55LL
        || *((void *)v10 + 1) != 0x696F50656C626174LL
        || v10[4] != 1919251566)
      {
        goto LABEL_289;
      }

      return &nominal type descriptor for UnsafeMutablePointer;
    case 0x15uLL:
      if (*(void *)v10 != 0x754E6D6F646E6152LL
        || *((void *)v10 + 1) != 0x656E65477265626DLL
        || *(void *)((char *)v10 + 13) != 0x726F746172656E65LL)
      {
        goto LABEL_289;
      }

      return (StructDescriptor *)&protocol descriptor for RandomNumberGenerator;
    case 0x16uLL:
      if (*(void *)v10 != 0x6152656661736E55LL
        || *((void *)v10 + 1) != 0x5072656666754277LL
        || *(void *)((char *)v10 + 14) != 0x7265746E696F5072LL)
      {
        if (*(void *)v10 == 0x63416D6F646E6152LL
          && *((void *)v10 + 1) == 0x6C6C6F4373736563LL
          && *(void *)((char *)v10 + 14) == 0x6E6F697463656C6CLL)
        {
          return (StructDescriptor *)&protocol descriptor for RandomAccessCollection;
        }

        goto LABEL_289;
      }

      return &nominal type descriptor for UnsafeRawBufferPointer;
    case 0x17uLL:
      if (*(void *)v10 != 0x754D656661736E55LL
        || *((void *)v10 + 1) != 0x776152656C626174LL
        || *(void *)((char *)v10 + 15) != 0x7265746E696F5077LL)
      {
        if (*(void *)v10 == 0x7463657269646942LL
          && *((void *)v10 + 1) == 0x6C6F436C616E6F69LL
          && *(void *)((char *)v10 + 15) == 0x6E6F697463656C6CLL)
        {
          return (StructDescriptor *)&protocol descriptor for BidirectionalCollection;
        }

        goto LABEL_289;
      }

      uint64_t result = &nominal type descriptor for UnsafeMutableRawPointer;
      break;
    case 0x1AuLL:
      if (*(void *)v10 != 0x754D656661736E55LL
        || *((void *)v10 + 1) != 0x667542656C626174LL
        || *((void *)v10 + 2) != 0x746E696F50726566LL
        || *((_WORD *)v10 + 12) != 29285)
      {
        if (*(void *)v10 == 0x70655265676E6152LL
          && *((void *)v10 + 1) == 0x656C62616563616CLL
          && *((void *)v10 + 2) == 0x697463656C6C6F43LL
          && *((_WORD *)v10 + 12) == 28271)
        {
          return (StructDescriptor *)&protocol descriptor for RangeReplaceableCollection;
        }

LABEL_289:
        uint64_t v74 = concurrencyDescriptors;
        if (concurrencyDescriptors)
        {
          uint64_t result = 0LL;
          switch((unint64_t)v11)
          {
            case 4uLL:
              if (*v10 != 1802723668) {
                return 0LL;
              }
              uint64_t v74 = concurrencyDescriptors + 136;
              return *(StructDescriptor **)v74;
            case 5uLL:
              int v75 = *v10;
              int v76 = *((unsigned __int8 *)v10 + 4);
              if (v75 != 1869898561 || v76 != 114) {
                return 0LL;
              }
              return *(StructDescriptor **)v74;
            case 8uLL:
              if (*(void *)v10 != 0x726F747563657845LL) {
                return 0LL;
              }
              uint64_t v74 = concurrencyDescriptors + 40;
              return *(StructDescriptor **)v74;
            case 9uLL:
              if (*(void *)v10 == 0x756F72476B736154LL && *((_BYTE *)v10 + 8) == 112)
              {
                uint64_t v74 = concurrencyDescriptors + 56;
                return *(StructDescriptor **)v74;
              }

              uint64_t v79 = *(void *)v10;
              int v80 = *((unsigned __int8 *)v10 + 8);
              if (v79 == 0x6F7463416E69614DLL && v80 == 114)
              {
                uint64_t v74 = concurrencyDescriptors + 104;
                return *(StructDescriptor **)v74;
              }

              return 0LL;
            case 0xAuLL:
              uint64_t v82 = *(void *)v10;
              int v83 = *((unsigned __int16 *)v10 + 4);
              if (v82 != 0x4A64656E776F6E55LL || v83 != 25199) {
                return 0LL;
              }
              uint64_t v74 = concurrencyDescriptors + 96;
              return *(StructDescriptor **)v74;
            case 0xBuLL:
              uint64_t v85 = *(void *)v10;
              uint64_t v86 = *(void *)((char *)v10 + 3);
              if (v85 != 0x727453636E797341LL || v86 != 0x6D6165727453636ELL) {
                return 0LL;
              }
              uint64_t v74 = concurrencyDescriptors + 120;
              return *(StructDescriptor **)v74;
            case 0xCuLL:
              if (*(void *)v10 == 0x636578456B736154LL && v10[2] == 1919906933)
              {
                uint64_t v74 = concurrencyDescriptors + 72;
                return *(StructDescriptor **)v74;
              }

              uint64_t v89 = *(void *)v10;
              int v90 = v10[2];
              if (v89 == 0x6F6972506B736154LL && v90 == 2037672306)
              {
                uint64_t v74 = concurrencyDescriptors + 112;
                return *(StructDescriptor **)v74;
              }

              return 0LL;
            case 0xDuLL:
              uint64_t v92 = *(void *)v10;
              uint64_t v93 = *(void *)((char *)v10 + 5);
              if (v92 != 0x716553636E797341LL || v93 != 0x65636E6575716553LL) {
                return 0LL;
              }
              uint64_t v74 = concurrencyDescriptors + 88;
              return *(StructDescriptor **)v74;
            case 0xEuLL:
              uint64_t v95 = *(void *)v10;
              uint64_t v96 = *(void *)((char *)v10 + 6);
              if (v95 != 0x78456C6169726553LL || v96 != 0x726F747563657845LL) {
                return 0LL;
              }
              uint64_t v74 = concurrencyDescriptors + 48;
              return *(StructDescriptor **)v74;
            case 0x11uLL:
              if (*(void *)v10 == 0x616C6C65636E6143LL
                && *((void *)v10 + 1) == 0x6F7272456E6F6974LL
                && *((_BYTE *)v10 + 16) == 114)
              {
                uint64_t v74 = concurrencyDescriptors + 24;
                return *(StructDescriptor **)v74;
              }

              if (*(void *)v10 == 0x676E69776F726854LL
                && *((void *)v10 + 1) == 0x756F72476B736154LL
                && *((_BYTE *)v10 + 16) == 112)
              {
                uint64_t v74 = concurrencyDescriptors + 64;
                return *(StructDescriptor **)v74;
              }

              uint64_t v102 = *(void *)v10;
              uint64_t v103 = *((void *)v10 + 1);
              int v104 = *((unsigned __int8 *)v10 + 16);
              if (v102 == 0x7543656661736E55LL && v103 == 0x736154746E657272LL && v104 == 107)
              {
                uint64_t v74 = concurrencyDescriptors + 144;
                return *(StructDescriptor **)v74;
              }

              return 0LL;
            case 0x12uLL:
              uint64_t v107 = *(void *)v10;
              uint64_t v108 = *((void *)v10 + 1);
              int v109 = *((unsigned __int16 *)v10 + 8);
              if (v107 != 0x6F43656661736E55LL || v108 != 0x697461756E69746ELL || v109 != 28271) {
                return 0LL;
              }
              uint64_t v74 = concurrencyDescriptors + 16;
              return *(StructDescriptor **)v74;
            case 0x13uLL:
              if (*(void *)v10 == 0x4364656B63656843LL
                && *((void *)v10 + 1) == 0x7461756E69746E6FLL
                && *(void *)((char *)v10 + 11) == 0x6E6F697461756E69LL)
              {
                uint64_t v74 = concurrencyDescriptors + 8;
                return *(StructDescriptor **)v74;
              }

              uint64_t v114 = *(void *)v10;
              uint64_t v115 = *((void *)v10 + 1);
              uint64_t v116 = *(void *)((char *)v10 + 11);
              if (v114 == 0x726854636E797341LL && v115 == 0x727453676E69776FLL && v116 == 0x6D6165727453676ELL)
              {
                uint64_t v74 = concurrencyDescriptors + 128;
                return *(StructDescriptor **)v74;
              }

              return 0LL;
            case 0x15uLL:
              if (*(void *)v10 == 0x5364656E776F6E55LL
                && *((void *)v10 + 1) == 0x6578456C61697265LL
                && *(void *)((char *)v10 + 13) == 0x726F747563657845LL)
              {
                uint64_t v74 = concurrencyDescriptors + 32;
              }

              else
              {
                uint64_t v121 = *(void *)v10;
                uint64_t v122 = *((void *)v10 + 1);
                uint64_t v123 = *(void *)((char *)v10 + 13);
                if (v121 != 0x657449636E797341LL || v122 != 0x6F7250726F746172LL || v123 != 0x6C6F636F746F7250LL) {
                  return 0LL;
                }
                uint64_t v74 = concurrencyDescriptors + 80;
              }

              return *(StructDescriptor **)v74;
            default:
              return result;
          }
        }

        return 0LL;
      }

      uint64_t result = &nominal type descriptor for UnsafeMutableBufferPointer;
      break;
    case 0x1DuLL:
      if (*(void *)v10 != 0x754D656661736E55LL
        || *((void *)v10 + 1) != 0x776152656C626174LL
        || *((void *)v10 + 2) != 0x6F50726566667542LL
        || *(void *)((char *)v10 + 21) != 0x7265746E696F5072LL)
      {
        goto LABEL_289;
      }

      return &nominal type descriptor for UnsafeMutableRawBufferPointer;
    case 0x21uLL:
      if (*(void *)v10 != 0x656C65726F747541LL
        || *((void *)v10 + 1) != 0x736E55676E697361LL
        || *((void *)v10 + 2) != 0x626174754D656661LL
        || *((void *)v10 + 3) != 0x65746E696F50656CLL
        || *((_BYTE *)v10 + 32) != 114)
      {
        goto LABEL_289;
      }

      return &nominal type descriptor for AutoreleasingUnsafeMutablePointer;
    default:
      goto LABEL_289;
  }

  return result;
}

const char *_searchTypeMetadataRecords(uint64_t a1, uint64_t a2)
{
  if (!a2 || *(_WORD *)(a2 + 16) != 24) {
    goto LABEL_15;
  }
  int v4 = *(unsigned __int8 *)(a2 + 18);
  uint64_t v5 = (unsigned __int16 ***)a2;
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*(_DWORD *)(a2 + 8)) {
      goto LABEL_15;
    }
    uint64_t v5 = *(unsigned __int16 ****)a2;
  }

  int v6 = *v5;
  if (v6 && *((_WORD *)v6 + 8) == 153 && *((_BYTE *)v6 + 18) == 3 && v6[1] == (unsigned __int16 *)3)
  {
    int v7 = *v6;
    int v8 = *v7;
    int v9 = *((unsigned __int8 *)v7 + 2);
    if (v8 == 24415 && v9 == 67) {
      return 0LL;
    }
  }

void swift::ConcurrentReadableHashMap<anonymous namespace'::NominalTypeDescriptorCacheEntry,swift::LazyMutex>::getOrInsert<__swift::__runtime::llvm::StringRef,_findContextDescriptor(swift::Demangle::__runtime::Node *,swift::Demangle::__runtime::Demangler &)::$_0>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v36[0] = a2;
  v36[1] = a3;
  int v6 = (os_unfair_lock_s *)(a1 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 24));
  uint64_t v7 = *(void *)(a1 + 16);
  BOOL v8 = (v7 & 3) == 0;
  if ((v7 & 0xFFFFFFFFFFFFFFFCLL) == 0) {
    BOOL v8 = 1;
  }
  BOOL v35 = v8;
  if (v8) {
    int v9 = 4;
  }
  else {
    int v9 = *(unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFCLL);
  }
  unint64_t v10 = *(unsigned int *)(a1 + 4);
  os_signpost_id_t v11 = *(_DWORD **)(a1 + 8);
  if (!v12)
  {
    char __src = v11 + 2;
    unsigned int v34 = v10 + 1;
    if ((1LL << v9) / ((1LL << v9) - (unint64_t)(v10 + 1)) < 4)
    {
      LOBYTE(v21) = v7;
      if (v11) {
        goto LABEL_30;
      }
    }

    else
    {
      unsigned int v17 = (v9 + 1);
      if (v17 >= 0x11) {
        unsigned int v18 = 4;
      }
      else {
        unsigned int v18 = 2;
      }
      if (v17 < 9) {
        size_t v19 = 1LL;
      }
      else {
        size_t v19 = v18;
      }
      unint64_t v20 = (unint64_t)calloc(2LL << v9, v19);
      if (!v20) {
        swift::hashable_support::findHashableBaseTypeOfHashableType();
      }
      if ((_DWORD)v19 != 1)
      {
        if ((_DWORD)v19 == 4) {
          size_t v19 = 3LL;
        }
        else {
          size_t v19 = 2LL;
        }
      }

      unint64_t v21 = v19 | v20;
      *(_BYTE *)unint64_t v20 = v9 + 1;
      if (v9) {
        __asm { BR              X8 }
      }

      atomic_store(v21, (unint64_t *)(a1 + 16));
      if (!v35)
      {
        uint64_t v22 = malloc(0x10uLL);
        *uint64_t v22 = *(void *)(a1 + 32);
        v22[1] = v7 & 0xFFFFFFFFFFFFFFFCLL;
        *(void *)(a1 + 32) = v22;
      }

      if (v11)
      {
LABEL_30:
        unint64_t v23 = (unint64_t)v11;
      }
    }

    char v24 = v11;
    unint64_t v25 = v10 + (v10 >> 2);
    if (v25 <= v10 + 1) {
      unint64_t v25 = v10 + 1;
    }
    size_t v26 = malloc_good_size(24 * v25 + 8);
    unint64_t v27 = malloc(v26);
    if (!v27) {
      swift::hashable_support::findHashableBaseTypeOfHashableType();
    }
    unint64_t v23 = (unint64_t)v27;
    *unint64_t v27 = (v26 - 8) / 0x18;
    if (v24)
    {
      memcpy(v27 + 2, __src, 24 * v10);
      uint64_t v28 = malloc(0x10uLL);
      *uint64_t v28 = *(void *)(a1 + 32);
      v28[1] = v24;
      *(void *)(a1 + 32) = v28;
    }

    atomic_store(v23, (unint64_t *)(a1 + 8));
LABEL_37:
    uint64_t v29 = (void *)(v23 + 24LL * v10);
    unint64_t v30 = **(const void ***)a4;
    size_t v31 = *(void *)(*(void *)a4 + 8LL);
    void v29[3] = **(void **)(a4 + 8);
    size_t v32 = malloc(v31);
    memcpy(v32, v30, v31);
    v29[1] = v32;
    void v29[2] = v31;
    atomic_store(v34, (unsigned int *)(a1 + 4));
    __asm { BR              X11 }
  }

  __dmb(0xBu);
  if (!*(_DWORD *)a1)
  {
    uint64_t v15 = *(void ***)(a1 + 32);
    unint64_t v14 = (void *)(a1 + 32);
    int32x4_t v13 = v15;
    if (v15)
    {
      do
      {
        unsigned int v16 = (void **)*v13;
        free(v13[1]);
        free(v13);
        int32x4_t v13 = v16;
      }

      while (v16);
    }

    *unint64_t v14 = 0LL;
  }

  os_unfair_lock_unlock(v6);
}

unsigned int *__swift::__runtime::llvm::function_ref<swift::Demangle::__runtime::Node * ()(swift::Demangle::__runtime::SymbolicReferenceKind,void const*)>::callback_fn<swift::ExpandResolvedSymbolicReferences>( swift::Demangle::__runtime::NodeFactory **a1, int a2, uint64_t **a3)
{
  return _buildDemanglingForSymbolicReference(a2, a3, *a1);
}

void swift::ConcurrentReadableHashMap<anonymous namespace'::NominalTypeDescriptorCacheEntry,swift::LazyMutex>::find<__swift::__runtime::llvm::StringRef>( uint64_t a1, char a2)
{
  __asm { BR              X8 }

uint64_t sub_18177B8E8()
{
  uint64_t v6 = (v3 >> (4 * v5)) & 0xF;
  if (!(_DWORD)v6) {
    return 0LL;
  }
  unint64_t v7 = (v6 - 1);
  if (v7 >= v2
    || (uint64_t v8 = v1 + v7 * (unint64_t)v0, v9 = *(void *)(v4 + 8), v9 != *(void *)(v8 + 8))
    || v9 && memcmp(*(const void **)v4, *(const void **)v8, v9))
  {
    JUMPOUT(0x18177B8C8LL);
  }

  return v8;
}

void *std::__function::__func<swift_getTypeByMangledNameInContextImpl(char const*,unsigned long,swift::TargetContextDescriptor<swift::InProcess> const*,void const* const*)::$_0,std::allocator<swift_getTypeByMangledNameInContextImpl(char const*,unsigned long,swift::TargetContextDescriptor<swift::InProcess> const*,void const* const*)::$_0>,void const* ()(unsigned int,unsigned int)>::__clone( uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_189B8D898;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift_getTypeByMangledNameInContextImpl(char const*,unsigned long,swift::TargetContextDescriptor<swift::InProcess> const*,void const* const*)::$_0,std::allocator<swift_getTypeByMangledNameInContextImpl(char const*,unsigned long,swift::TargetContextDescriptor<swift::InProcess> const*,void const* const*)::$_0>,void const* ()(unsigned int,unsigned int)>::__clone( uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_189B8D898;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<swift_getTypeByMangledNameInContextImpl(char const*,unsigned long,swift::TargetContextDescriptor<swift::InProcess> const*,void const* const*)::$_0,std::allocator<swift_getTypeByMangledNameInContextImpl(char const*,unsigned long,swift::TargetContextDescriptor<swift::InProcess> const*,void const* const*)::$_0>,void const* ()(unsigned int,unsigned int)>::operator()( uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!*(void *)(v3 + 16)) {
    return 0LL;
  }
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  swift::SubstGenericParametersFromMetadata::setup(*(unsigned int ***)(a1 + 8));
  uint64_t v6 = *(void *)(v3 + 24) + 32 * v4;
  unsigned int v7 = *(_DWORD *)(v3 + 300) + *(_DWORD *)(v6 + 20);
  if (*(_BYTE *)(v6 + 28))
  {
    uint64_t v8 = *(uint8x16_t **)v6;
    size_t v9 = (uint8x16_t *)(*(void *)v6 + v5);
    if ((v9->i8[0] & 0x80000000) == 0) {
      return 0LL;
    }
    if ((_DWORD)v5)
    {
      if (v5 < 8)
      {
        os_signpost_id_t v11 = v8;
        goto LABEL_22;
      }

      if (v5 >= 0x20)
      {
        uint64_t v12 = v5 & 0xFFFFFFE0;
        int32x4_t v13 = 0uLL;
        int32x4_t v14 = (int32x4_t)v7;
        uint64_t v15 = v8 + 1;
        uint64_t v16 = v12;
        int32x4_t v17 = 0uLL;
        int32x4_t v18 = 0uLL;
        int32x4_t v19 = 0uLL;
        int32x4_t v20 = 0uLL;
        int32x4_t v21 = 0uLL;
        int32x4_t v22 = 0uLL;
        do
        {
          uint8x16_t v23 = vshrq_n_u8(v15[-1], 7uLL);
          uint8x16_t v24 = vshrq_n_u8(*v15, 7uLL);
          uint16x8_t v25 = vmovl_u8(*(uint8x8_t *)v23.i8);
          uint16x8_t v26 = vmovl_high_u8(v23);
          uint16x8_t v27 = vmovl_u8(*(uint8x8_t *)v24.i8);
          uint16x8_t v28 = vmovl_high_u8(v24);
          int32x4_t v18 = (int32x4_t)vaddw_high_u16((uint32x4_t)v18, v26);
          int32x4_t v17 = (int32x4_t)vaddw_u16((uint32x4_t)v17, *(uint16x4_t *)v26.i8);
          int32x4_t v13 = (int32x4_t)vaddw_high_u16((uint32x4_t)v13, v25);
          int32x4_t v14 = (int32x4_t)vaddw_u16((uint32x4_t)v14, *(uint16x4_t *)v25.i8);
          int32x4_t v22 = (int32x4_t)vaddw_high_u16((uint32x4_t)v22, v28);
          int32x4_t v21 = (int32x4_t)vaddw_u16((uint32x4_t)v21, *(uint16x4_t *)v28.i8);
          int32x4_t v20 = (int32x4_t)vaddw_high_u16((uint32x4_t)v20, v27);
          int32x4_t v19 = (int32x4_t)vaddw_u16((uint32x4_t)v19, *(uint16x4_t *)v27.i8);
          v15 += 2;
          v16 -= 32LL;
        }

        while (v16);
        unsigned int v7 = vaddvq_s32( vaddq_s32( vaddq_s32(vaddq_s32(v19, v14), vaddq_s32(v21, v17)),  vaddq_s32(vaddq_s32(v20, v13), vaddq_s32(v22, v18))));
        if (v12 == v5) {
          return *(void *)(*(void *)(v3 + 16) + 8LL * v7);
        }
        if ((v5 & 0x18) == 0)
        {
          os_signpost_id_t v11 = (uint8x16_t *)((char *)v8 + v12);
          do
          {
LABEL_22:
            unsigned int v35 = v11->u8[0];
            os_signpost_id_t v11 = (uint8x16_t *)((char *)v11 + 1);
            v7 += v35 >> 7;
          }

          while (v11 != v9);
          return *(void *)(*(void *)(v3 + 16) + 8LL * v7);
        }
      }

      else
      {
        uint64_t v12 = 0LL;
      }

      os_signpost_id_t v11 = (uint8x16_t *)((char *)v8 + (v5 & 0xFFFFFFF8));
      int32x4_t v29 = 0uLL;
      int32x4_t v30 = (int32x4_t)v7;
      size_t v31 = (uint8x8_t *)&v8->i8[v12];
      uint64_t v32 = v12 - (v5 & 0xFFFFFFF8);
      do
      {
        uint8x8_t v33 = *v31++;
        uint16x8_t v34 = vmovl_u8(vshr_n_u8(v33, 7uLL));
        int32x4_t v29 = (int32x4_t)vaddw_high_u16((uint32x4_t)v29, v34);
        int32x4_t v30 = (int32x4_t)vaddw_u16((uint32x4_t)v30, *(uint16x4_t *)v34.i8);
        v32 += 8LL;
      }

      while (v32);
      unsigned int v7 = vaddvq_s32(vaddq_s32(v30, v29));
      if ((v5 & 0xFFFFFFF8) == v5) {
        return *(void *)(*(void *)(v3 + 16) + 8LL * v7);
      }
      goto LABEL_22;
    }
  }

  else
  {
    v7 += v5;
  }

  return *(void *)(*(void *)(v3 + 16) + 8LL * v7);
}

void *std::__function::__func<swift_getTypeByMangledNameInContextImpl(char const*,unsigned long,swift::TargetContextDescriptor<swift::InProcess> const*,void const* const*)::$_1,std::allocator<swift_getTypeByMangledNameInContextImpl(char const*,unsigned long,swift::TargetContextDescriptor<swift::InProcess> const*,void const* const*)::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone( uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_189B8D8E0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift_getTypeByMangledNameInContextImpl(char const*,unsigned long,swift::TargetContextDescriptor<swift::InProcess> const*,void const* const*)::$_1,std::allocator<swift_getTypeByMangledNameInContextImpl(char const*,unsigned long,swift::TargetContextDescriptor<swift::InProcess> const*,void const* const*)::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone( uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_189B8D8E0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<swift_getTypeByMangledNameInContextImpl(char const*,unsigned long,swift::TargetContextDescriptor<swift::InProcess> const*,void const* const*)::$_1,std::allocator<swift_getTypeByMangledNameInContextImpl(char const*,unsigned long,swift::TargetContextDescriptor<swift::InProcess> const*,void const* const*)::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::operator()( uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!*(void *)(v3 + 16)) {
    return 0LL;
  }
  int v4 = *a3;
  swift::SubstGenericParametersFromMetadata::setup(*(unsigned int ***)(a1 + 8));
  return *(void *)(*(void *)(v3 + 16) + 8LL * (*(_DWORD *)(v3 + 296) + v4 + *(_DWORD *)(v3 + 300)));
}

void *std::__function::__func<swift_getTypeByMangledNameInContextInMetadataStateImpl(unsigned long,char const*,unsigned long,swift::TargetContextDescriptor<swift::InProcess> const*,void const* const*)::$_0,std::allocator<swift_getTypeByMangledNameInContextInMetadataStateImpl(unsigned long,char const*,unsigned long,swift::TargetContextDescriptor<swift::InProcess> const*,void const* const*)::$_0>,void const* ()(unsigned int,unsigned int)>::__clone( uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_189B8D928;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift_getTypeByMangledNameInContextInMetadataStateImpl(unsigned long,char const*,unsigned long,swift::TargetContextDescriptor<swift::InProcess> const*,void const* const*)::$_0,std::allocator<swift_getTypeByMangledNameInContextInMetadataStateImpl(unsigned long,char const*,unsigned long,swift::TargetContextDescriptor<swift::InProcess> const*,void const* const*)::$_0>,void const* ()(unsigned int,unsigned int)>::__clone( uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_189B8D928;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<swift_getTypeByMangledNameInContextInMetadataStateImpl(unsigned long,char const*,unsigned long,swift::TargetContextDescriptor<swift::InProcess> const*,void const* const*)::$_0,std::allocator<swift_getTypeByMangledNameInContextInMetadataStateImpl(unsigned long,char const*,unsigned long,swift::TargetContextDescriptor<swift::InProcess> const*,void const* const*)::$_0>,void const* ()(unsigned int,unsigned int)>::operator()( uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!*(void *)(v3 + 16)) {
    return 0LL;
  }
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  swift::SubstGenericParametersFromMetadata::setup(*(unsigned int ***)(a1 + 8));
  uint64_t v6 = *(void *)(v3 + 24) + 32 * v4;
  unsigned int v7 = *(_DWORD *)(v3 + 300) + *(_DWORD *)(v6 + 20);
  if (*(_BYTE *)(v6 + 28))
  {
    uint64_t v8 = *(uint8x16_t **)v6;
    size_t v9 = (uint8x16_t *)(*(void *)v6 + v5);
    if ((v9->i8[0] & 0x80000000) == 0) {
      return 0LL;
    }
    if ((_DWORD)v5)
    {
      if (v5 < 8)
      {
        os_signpost_id_t v11 = v8;
        goto LABEL_22;
      }

      if (v5 >= 0x20)
      {
        uint64_t v12 = v5 & 0xFFFFFFE0;
        int32x4_t v13 = 0uLL;
        int32x4_t v14 = (int32x4_t)v7;
        uint64_t v15 = v8 + 1;
        uint64_t v16 = v12;
        int32x4_t v17 = 0uLL;
        int32x4_t v18 = 0uLL;
        int32x4_t v19 = 0uLL;
        int32x4_t v20 = 0uLL;
        int32x4_t v21 = 0uLL;
        int32x4_t v22 = 0uLL;
        do
        {
          uint8x16_t v23 = vshrq_n_u8(v15[-1], 7uLL);
          uint8x16_t v24 = vshrq_n_u8(*v15, 7uLL);
          uint16x8_t v25 = vmovl_u8(*(uint8x8_t *)v23.i8);
          uint16x8_t v26 = vmovl_high_u8(v23);
          uint16x8_t v27 = vmovl_u8(*(uint8x8_t *)v24.i8);
          uint16x8_t v28 = vmovl_high_u8(v24);
          int32x4_t v18 = (int32x4_t)vaddw_high_u16((uint32x4_t)v18, v26);
          int32x4_t v17 = (int32x4_t)vaddw_u16((uint32x4_t)v17, *(uint16x4_t *)v26.i8);
          int32x4_t v13 = (int32x4_t)vaddw_high_u16((uint32x4_t)v13, v25);
          int32x4_t v14 = (int32x4_t)vaddw_u16((uint32x4_t)v14, *(uint16x4_t *)v25.i8);
          int32x4_t v22 = (int32x4_t)vaddw_high_u16((uint32x4_t)v22, v28);
          int32x4_t v21 = (int32x4_t)vaddw_u16((uint32x4_t)v21, *(uint16x4_t *)v28.i8);
          int32x4_t v20 = (int32x4_t)vaddw_high_u16((uint32x4_t)v20, v27);
          int32x4_t v19 = (int32x4_t)vaddw_u16((uint32x4_t)v19, *(uint16x4_t *)v27.i8);
          v15 += 2;
          v16 -= 32LL;
        }

        while (v16);
        unsigned int v7 = vaddvq_s32( vaddq_s32( vaddq_s32(vaddq_s32(v19, v14), vaddq_s32(v21, v17)),  vaddq_s32(vaddq_s32(v20, v13), vaddq_s32(v22, v18))));
        if (v12 == v5) {
          return *(void *)(*(void *)(v3 + 16) + 8LL * v7);
        }
        if ((v5 & 0x18) == 0)
        {
          os_signpost_id_t v11 = (uint8x16_t *)((char *)v8 + v12);
          do
          {
LABEL_22:
            unsigned int v35 = v11->u8[0];
            os_signpost_id_t v11 = (uint8x16_t *)((char *)v11 + 1);
            v7 += v35 >> 7;
          }

          while (v11 != v9);
          return *(void *)(*(void *)(v3 + 16) + 8LL * v7);
        }
      }

      else
      {
        uint64_t v12 = 0LL;
      }

      os_signpost_id_t v11 = (uint8x16_t *)((char *)v8 + (v5 & 0xFFFFFFF8));
      int32x4_t v29 = 0uLL;
      int32x4_t v30 = (int32x4_t)v7;
      size_t v31 = (uint8x8_t *)&v8->i8[v12];
      uint64_t v32 = v12 - (v5 & 0xFFFFFFF8);
      do
      {
        uint8x8_t v33 = *v31++;
        uint16x8_t v34 = vmovl_u8(vshr_n_u8(v33, 7uLL));
        int32x4_t v29 = (int32x4_t)vaddw_high_u16((uint32x4_t)v29, v34);
        int32x4_t v30 = (int32x4_t)vaddw_u16((uint32x4_t)v30, *(uint16x4_t *)v34.i8);
        v32 += 8LL;
      }

      while (v32);
      unsigned int v7 = vaddvq_s32(vaddq_s32(v30, v29));
      if ((v5 & 0xFFFFFFF8) == v5) {
        return *(void *)(*(void *)(v3 + 16) + 8LL * v7);
      }
      goto LABEL_22;
    }
  }

  else
  {
    v7 += v5;
  }

  return *(void *)(*(void *)(v3 + 16) + 8LL * v7);
}

void *std::__function::__func<swift_getTypeByMangledNameInContextInMetadataStateImpl(unsigned long,char const*,unsigned long,swift::TargetContextDescriptor<swift::InProcess> const*,void const* const*)::$_1,std::allocator<swift_getTypeByMangledNameInContextInMetadataStateImpl(unsigned long,char const*,unsigned long,swift::TargetContextDescriptor<swift::InProcess> const*,void const* const*)::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone( uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_189B8D970;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift_getTypeByMangledNameInContextInMetadataStateImpl(unsigned long,char const*,unsigned long,swift::TargetContextDescriptor<swift::InProcess> const*,void const* const*)::$_1,std::allocator<swift_getTypeByMangledNameInContextInMetadataStateImpl(unsigned long,char const*,unsigned long,swift::TargetContextDescriptor<swift::InProcess> const*,void const* const*)::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone( uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_189B8D970;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<swift_getTypeByMangledNameInContextInMetadataStateImpl(unsigned long,char const*,unsigned long,swift::TargetContextDescriptor<swift::InProcess> const*,void const* const*)::$_1,std::allocator<swift_getTypeByMangledNameInContextInMetadataStateImpl(unsigned long,char const*,unsigned long,swift::TargetContextDescriptor<swift::InProcess> const*,void const* const*)::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::operator()( uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!*(void *)(v3 + 16)) {
    return 0LL;
  }
  int v4 = *a3;
  swift::SubstGenericParametersFromMetadata::setup(*(unsigned int ***)(a1 + 8));
  return *(void *)(*(void *)(v3 + 16) + 8LL * (*(_DWORD *)(v3 + 296) + v4 + *(_DWORD *)(v3 + 300)));
}

void DemanglerForRuntimeTypeResolution<swift::Demangle::__runtime::StackAllocatedDemangler<2048ul>>::~DemanglerForRuntimeTypeResolution( void *a1)
{
  *a1 = off_189B8E500;
  uint64_t v2 = a1 + 68;
  uint64_t v3 = (void *)a1[71];
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
  }

  else
  {
    if (!v3) {
      goto LABEL_6;
    }
    uint64_t v4 = 5LL;
  }

  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  *a1 = off_189B8E4D8;
  swift::Demangle::__runtime::NodeFactory::freeSlabs((void *)a1[3]);
  uint64_t v5 = a1[5];
  if (v5) {
    *(_BYTE *)(v5 + 48) = 0;
  }
  operator delete(a1);
}

void swift::Demangle::__runtime::TypeDecoder<anonymous namespace'::DecodedMetadataBuilder>::decodeMangledType( uint64_t **a1@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, unsigned int a3@<W2>, unint64_t *a4@<X8>)
{
  uint64_t v6 = a4;
  if (a3 > 0x400)
  {
LABEL_2:
    *((_WORD *)a4 + 8) = 1;
    unsigned int v7 = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
    uint64_t v8 = "Mangled type is too complex";
LABEL_3:
    *uint64_t v6 = (unint64_t)v8;
    v6[1] = (unint64_t)v7;
    return;
  }

  unsigned int v9 = a3;
  unint64_t v10 = (void (*)(uint64_t, int))a2;
  os_signpost_id_t v11 = a1;
  while (2)
  {
    if (!v10)
    {
      *((_WORD *)a4 + 8) = 1;
      unsigned int v7 = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
      uint64_t v8 = "Node is NULL";
      goto LABEL_3;
    }

    int v12 = *((unsigned __int16 *)v10 + 8);
    switch(*((_WORD *)v10 + 8))
    {
      case 3:
        int v13 = *((unsigned __int8 *)v10 + 18);
        if (v13 != 5)
        {
          if (v13 == 3)
          {
            int v95 = *((_DWORD *)v10 + 2);
            uint64_t v45 = *(const char **)v10;
          }

          else
          {
LABEL_217:
            int v95 = 0;
            uint64_t v45 = "";
          }

          uint64_t v97 = operator new(0x28uLL);
          uint64_t v40 = v97;
          void *v97 = "TypeDecoder.h:%u: Node kind %u %.*s - %s";
          uint64_t v98 = 0x300000475LL;
LABEL_225:
          v97[1] = v98;
          *((_DWORD *)v97 + 4) = v95;
          int v100 = "no children";
          goto LABEL_459;
        }

        if (!*((_DWORD *)v10 + 2)) {
          goto LABEL_217;
        }
        goto LABEL_49;
      case 0xB:
      case 0x16:
      case 0x40:
      case 0x41:
      case 0x52:
      case 0xA5:
      case 0xA6:
      case 0xDE:
        uint64_t v14 = 0LL;
        int v23 = 0;
        int v24 = *((unsigned __int8 *)v10 + 18);
        uint16x8_t v25 = "";
        switch(*((_BYTE *)v10 + 18))
        {
          case 1:
            int v23 = 0;
            uint64_t v14 = 1LL;
            goto LABEL_82;
          case 2:
            goto LABEL_83;
          case 3:
            uint64_t v14 = 0LL;
            int v23 = *((_DWORD *)v10 + 2);
            uint16x8_t v25 = *(const char **)v10;
            goto LABEL_82;
          case 5:
            uint64_t v14 = *((unsigned int *)v10 + 2);
            if (v14 <= 1)
            {
              int v23 = 0;
LABEL_82:
              int v39 = operator new(0x28uLL);
              uint64_t v40 = v39;
              void *v39 = "TypeDecoder.h:%u: Node kind %u %.*s - fewer children (%zu) than required (2)";
              int v41 = 884;
LABEL_184:
              *((_DWORD *)v39 + 2) = v41;
              *((_DWORD *)v39 + 3) = v12;
              *((_DWORD *)v39 + 4) = v23;
              v39[3] = v25;
              goto LABEL_536;
            }

LABEL_359:
                    unint64_t v142 = *((unsigned __int8 *)v10 + 18);
                    if ((_DWORD)v142 == 1)
                    {
                      unint64_t v143 = *(unsigned __int16 *)(*((void *)v10 + v141) + 16LL) == 130;
                    }

                    else
                    {
                      if ((_DWORD)v142 != 2)
                      {
                        char v146 = 0;
                        unsigned int v147 = *(const char **)v10;
                        if (*(_WORD *)(*(void *)(*(void *)v10 + 8LL * v141) + 16LL) == 130)
                        {
                          v140 |= 0x10u;
                          unint64_t v143 = v141 + 1;
                        }

                        else
                        {
                          unint64_t v143 = v141;
                        }

LABEL_383:
                        if (*(_WORD *)(*(void *)&v147[8 * v143] + 16LL) == 68)
                        {
                          size_t v148 = (const char *)v10;
                          if ((v146 & 1) == 0) {
                            size_t v148 = *(const char **)v10;
                          }
                          HIDWORD(v150) = **(unsigned __int8 **)&v148[8 * v143];
                          LODWORD(v150) = (HIDWORD(v150) << 24) - 1677721600;
                          unsigned __int8 v149 = v150 >> 25;
                          if (v149 > 7u) {
                            unint64_t v151 = 0LL;
                          }
                          else {
                            unint64_t v151 = qword_18180C9A8[(char)v149];
                          }
                          unint64_t v143 = (v143 + 1);
                        }

                        else
                        {
                          unint64_t v151 = 0LL;
                        }

                        v159 = (const char *)v10;
                        if ((v146 & 1) == 0) {
                          v159 = *(const char **)v10;
                        }
                        if (*(_WORD *)(*(void *)&v159[8 * v143] + 16LL) == 272)
                        {
                          uint64_t v160 = 0LL;
                          LODWORD(v143) = v143 + 1;
                          uint64_t v161 = 0x1000000LL;
                          goto LABEL_901;
                        }

                        uint64_t v162 = (const char *)v10;
                        if ((v146 & 1) == 0) {
                          uint64_t v162 = *(const char **)v10;
                        }
                        if (*(_WORD *)(*(void *)&v162[8 * v143] + 16LL) != 273)
                        {
                          uint64_t v160 = 0LL;
                          uint64_t v161 = 0LL;
                          goto LABEL_901;
                        }

                        if ((_DWORD)v142 != 1)
                        {
                          if ((_DWORD)v142 == 5)
                          {
                            unint64_t v142 = *((unsigned int *)v10 + 2);
                          }

                          else
                          {
                            if ((_DWORD)v142 != 2) {
                              goto LABEL_738;
                            }
                            unint64_t v142 = 2LL;
                          }
                        }

                        if (v142 > v143)
                        {
                          v286 = (const char *)v10;
                          if ((v146 & 1) == 0) {
                            v286 = *(const char **)v10;
                          }
                          v287 = *(const char ***)&v286[8 * v143];
LABEL_739:
                          int v288 = *((unsigned __int8 *)v287 + 18);
                          if ((v288 - 1) < 2)
                          {
                            unint64_t v289 = v151;
                            unint64_t v290 = v139;
                            goto LABEL_744;
                          }

                          if (v288 == 5)
                          {
                            if (*((_DWORD *)v287 + 2))
                            {
                              unint64_t v289 = v151;
                              unint64_t v290 = v139;
                              v287 = (const char **)*v287;
LABEL_744:
                              int v291 = *((unsigned __int16 *)v6 + 8);
                              if (v6 && v291 == 1) {
                                return;
                              }
                              if (*((_WORD *)v6 + 8))
                              {
                                LODWORD(v143) = v143 + 1;
                                v140 |= 1u;
                                if (v291 == 1) {
                                  ((void (*)(unint64_t, uint64_t, void))v6[1])(*v6, 3LL, 0LL);
                                }
                                uint64_t v160 = 0LL;
                              }

                              else
                              {
                                uint64_t v160 = *v6;
                                LODWORD(v143) = v143 + 1;
                                v140 |= 1u;
                              }

                              uint64_t v161 = 0x1000000LL;
                              unint64_t v139 = v290;
                              unint64_t v151 = v289;
LABEL_901:
                              uint64_t v364 = v143;
                              unint64_t v365 = *((unsigned __int8 *)v10 + 18);
                              if ((_DWORD)v365 == 1)
                              {
                                v366 = v6;
                                int v377 = 0;
                                if (*(_WORD *)(*((void *)v10 + (*(_WORD *)(*((void *)v10 + v364) + 16LL) == 66))
                                              + 16LL) == 271)
                                  LODWORD(v378) = 3;
                                else {
                                  LODWORD(v378) = 2;
                                }
                                int v379 = *((unsigned __int16 *)v10 + 8);
                                v380 = "";
                                unint64_t v365 = 1LL;
LABEL_943:
                                uint64_t v40 = operator new(0x30uLL);
                                *(void *)uint64_t v40 = "TypeDecoder.h:%u: Node kind %u %.*s - fewer children (%zu) than required (%u)";
                                v40[2] = 1006;
                                void v40[3] = v379;
                                v40[4] = v377;
                                *((void *)v40 + 3) = v380;
                                *((void *)v40 + 4) = v365;
                                v40[10] = v378;
                                *((_WORD *)v366 + 8) = 1;
                                v366[1] = (unint64_t)swift::TypeLookupError::TypeLookupError<swift::TypeLookupError swift::TypeLookupErrorImpl<int,unsigned int,int,char const*,unsigned long,unsigned int>(char const*,int,unsigned int,int,char const*,unsigned long,unsigned int)::{lambda(void)#1}>(swift::TypeLookupError swift::TypeLookupErrorImpl<int,unsigned int,int,char const*,unsigned long,unsigned int>(char const*,int,unsigned int,int,char const*,unsigned long,unsigned int)::{lambda(void)#1} const&)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
                                v393 = operator new(0x30uLL);
                                __int128 v394 = *((_OWORD *)v40 + 1);
                                _OWORD *v393 = *(_OWORD *)v40;
                                v393[1] = v394;
                                v393[2] = *((_OWORD *)v40 + 2);
                                unint64_t *v366 = (unint64_t)v393;
                                goto LABEL_770;
                              }

                              uint64_t v524 = v42;
                              v366 = v6;
                              if ((_DWORD)v365 == 2)
                              {
                                int v367 = *(unsigned __int16 *)(*((void *)v10 + v364) + 16LL);
                                BOOL v368 = v367 == 66;
                                if (v367 == 66) {
                                  unsigned int v369 = v364 + 1;
                                }
                                else {
                                  unsigned int v369 = v364;
                                }
                                unsigned int v370 = v368;
                                if (*(_WORD *)(*((void *)v10 + v369) + 16LL) == 271) {
                                  unsigned int v371 = v369 + 1;
                                }
                                else {
                                  unsigned int v371 = v369;
                                }
                                unint64_t v372 = (unint64_t)v370 << 30;
                                unint64_t v373 = (unint64_t)(*(_WORD *)(*((void *)v10 + v369) + 16LL) == 271) << 29;
                                unint64_t v374 = (unint64_t)(v151 != 0) << 27;
                                char v375 = 1;
                                unint64_t v376 = 2LL;
                              }

                              else
                              {
                                char v375 = 0;
                                unint64_t v376 = *((unsigned int *)v10 + 2);
                                BOOL v381 = *(unsigned __int16 *)(*(void *)(*(void *)v10 + 8 * v364) + 16LL) == 66;
                                if (*(_WORD *)(*(void *)(*(void *)v10 + 8 * v364) + 16LL) == 66) {
                                  LODWORD(v364) = v364 + 1;
                                }
                                else {
                                  unsigned int v371 = v364;
                                }
                                unint64_t v372 = (unint64_t)v381 << 30;
                                unint64_t v373 = (unint64_t)(*(_WORD *)(*(void *)(*(void *)v10
                                unint64_t v374 = (unint64_t)(v151 != 0) << 27;
                              }

                              unint64_t v378 = v371 + 2;
                              if (v376 < v378)
                              {
                                int v377 = 0;
                                int v379 = *((unsigned __int16 *)v10 + 8);
                                v380 = "";
                                if ((_DWORD)v365 != 2)
                                {
                                  if ((_DWORD)v365 == 5)
                                  {
                                    int v377 = 0;
                                    unint64_t v365 = *((unsigned int *)v10 + 2);
                                  }

                                  else
                                  {
                                    if ((_DWORD)v365 == 3)
                                    {
                                      int v377 = *((_DWORD *)v10 + 2);
                                      v380 = *(const char **)v10;
                                    }

                                    unint64_t v365 = 0LL;
                                  }
                                }

                                goto LABEL_943;
                              }

                              LOBYTE(v534) = 0;
                              *(void *)&__int128 v541 = &v542;
                              *((void *)&v541 + 1) = 0x800000000LL;
                              uint64_t v382 = (uint64_t)v366;
                              unint64_t v506 = v139;
                              uint64_t v509 = v160;
                              unint64_t v503 = v151;
                              unint64_t v514 = v374;
                              if ((_DWORD)v365 != 2)
                              {
                                if ((_DWORD)v365 != 5) {
                                  goto LABEL_936;
                                }
                                unint64_t v365 = *((unsigned int *)v10 + 2);
                              }

                              if (v365 > v371)
                              {
                                v383 = (const char *)v10;
                                if ((v375 & 1) == 0) {
                                  v383 = *(const char **)v10;
                                }
                                unint64_t v384 = v373;
                                unint64_t v385 = v372;
                                uint64_t v386 = v161;
                                v387 = *(uint64_t **)&v383[8 * v371];
LABEL_937:
                                uint64_t v388 = v9 + 1;
                                if (LOBYTE(v547[0]))
                                {
                                  *(_WORD *)(v382 + 16) = 1;
                                  v390 = v545;
                                  v389 = (uint64_t (*)(const void *, uint64_t, void))v546;
                                  *(void *)(v382 + 8) = v546;
                                  *(void *)uint64_t v382 = v389(v390, 2LL, 0LL);
                                  v389(v390, 3LL, 0LL);
                                  goto LABEL_965;
                                }

                                int v391 = *((unsigned __int16 *)v10 + 8);
                                if (v391 == 82 || v391 == 64)
                                {
                                  unint64_t v392 = (v386 | v524 | v385) & 0xFFFFFFFFFBFFFFFFLL | DWORD2(v541) & 0xF9FFFFFF | (v514 | v384) & 0xFFFFFFFFFBFFFFFFLL | ((unint64_t)v534 << 25) & 0xFFFFFFFFFBFFFFFFLL;
                                }

                                else
                                {
                                  unint64_t v392 = (v386 | v524 | v385) & 0xFFFFFFFFFBFFFFFFLL | DWORD2(v541) & 0xF9FFFFFF | (v514 | v384) & 0xFFFFFFFFFBFFFFFFLL | ((unint64_t)v534 << 25) & 0xFFFFFFFFFBFFFFFFLL;
                                  if (v391 != 166)
                                  {
                                    uint64_t v395 = 0LL;
LABEL_946:
                                    int v396 = *((unsigned __int8 *)v10 + 18);
                                    if (v396 == 2)
                                    {
                                      unint64_t v397 = *((unsigned __int8 *)v10 + 18);
                                    }

                                    else
                                    {
                                      if (v396 != 5) {
                                        goto LABEL_954;
                                      }
                                      unint64_t v397 = *((unsigned int *)v10 + 2);
                                    }

                                    unint64_t v398 = v371 + 1;
                                    if (v397 > v398)
                                    {
                                      uint64_t v399 = *((void *)v10 + v398);
                                      goto LABEL_955;
                                    }

LABEL_954:
                                    uint64_t v399 = 0LL;
LABEL_955:
                                    if (v539[0] == 1)
                                    {
                                      *(_WORD *)(v382 + 16) = 1;
                                      *(_OWORD *)uint64_t v382 = v538;
                                      *(void *)&__int128 v538 = 0LL;
                                      *((void *)&v538 + 1) = swift::TypeLookupError::nop;
                                      ((void (*)(void, uint64_t, void))swift::TypeLookupError::nop)( 0LL,  3LL,  0LL);
                                    }

                                    else
                                    {
                                      if (v140) {
                                        unint64_t v400 = v395 | v392 | 0x80000000;
                                      }
                                      else {
                                        unint64_t v400 = v395 | v392;
                                      }
                                      if (v539[0]) {
                                        unint64_t v401 = 0LL;
                                      }
                                      else {
                                        unint64_t v401 = v538;
                                      }
                                      if (v539[0] == 1) {
                                        (*((void (**)(void, uint64_t, void))&v538 + 1))(v538, 3LL, 0LL);
                                      }
                                    }

LABEL_965:
                                    v251 = (void *)v541;
                                    goto LABEL_1084;
                                  }
                                }

                                uint64_t v395 = 0x4000000LL;
                                goto LABEL_946;
                              }

LABEL_936:
                              unint64_t v384 = v373;
                              unint64_t v385 = v372;
                              uint64_t v386 = v161;
                              v387 = 0LL;
                              goto LABEL_937;
                            }

                            int v293 = 0;
                            int v292 = *((unsigned __int16 *)v287 + 8);
                          }

                          else
                          {
                            int v292 = *((unsigned __int16 *)v287 + 8);
                            if (v288 == 3)
                            {
                              int v293 = *((_DWORD *)v287 + 2);
                              v294 = *v287;
LABEL_986:
                              uint64_t v97 = operator new(0x28uLL);
                              uint64_t v40 = v97;
                              void *v97 = "TypeDecoder.h:%u: Node kind %u %.*s - %s";
                              *((_DWORD *)v97 + 2) = 971;
                              *((_DWORD *)v97 + 3) = v292;
                              *((_DWORD *)v97 + 4) = v293;
                              int v100 = "Thrown error node is missing child";
                              v97[3] = v294;
                              goto LABEL_768;
                            }

                            int v293 = 0;
                          }

                          v294 = "";
                          goto LABEL_986;
                        }

LABEL_738:
                        v287 = 0LL;
                        goto LABEL_739;
                      }

                      if (*(_WORD *)(*((void *)v10 + v141) + 16LL) == 130)
                      {
                        v140 |= 0x10u;
                        unint64_t v143 = v141 + 1;
                      }

                      else
                      {
                        unint64_t v143 = v141;
                      }
                    }

                    char v146 = 1;
                    unsigned int v147 = (const char *)v10;
                    goto LABEL_383;
                  }

                  int v172 = 0;
                  int v171 = *((unsigned __int16 *)v138 + 8);
                }

                else
                {
                  int v171 = *((unsigned __int16 *)v138 + 8);
                  if (v144 == 3)
                  {
                    int v172 = *((_DWORD *)v138 + 2);
                    __int128 v173 = *v138;
LABEL_691:
                    uint64_t v97 = operator new(0x28uLL);
                    uint64_t v40 = v97;
                    void *v97 = "TypeDecoder.h:%u: Node kind %u %.*s - %s";
                    *((_DWORD *)v97 + 2) = 911;
                    *((_DWORD *)v97 + 3) = v171;
                    *((_DWORD *)v97 + 4) = v172;
                    int v100 = "Global actor node is missing child";
                    v97[3] = v173;
                    goto LABEL_768;
                  }

                  int v172 = 0;
                }

                __int128 v173 = "";
                goto LABEL_691;
              }

              v131 = (const char *)v10;
            }

            v510 = a1;
            unint64_t v139 = 0LL;
            unsigned int v140 = 2 * (*(_WORD *)(*(void *)&v131[8 * v133] + 16LL) == 129);
            if (*(_WORD *)(*(void *)&v131[8 * v133] + 16LL) == 129) {
              unsigned int v141 = v133 + 1;
            }
            else {
              unsigned int v141 = v133;
            }
            goto LABEL_359;
          default:
            goto LABEL_82;
        }

      case 0xD:
      case 0xE:
      case 0xF:
      case 0x11:
      case 0x12:
        uint64_t v14 = 0LL;
        int v23 = 0;
        uint16x8_t v25 = "";
        switch(*((_BYTE *)v10 + 18))
        {
          case 1:
            int v23 = 0;
            uint64_t v14 = 1LL;
            goto LABEL_183;
          case 2:
            *(void *)&__int128 v541 = &v542;
            *((void *)&v541 + 1) = 0x800000000LL;
            __int128 v81 = (const char *)v10;
            goto LABEL_177;
          case 3:
            uint64_t v14 = 0LL;
            int v23 = *((_DWORD *)v10 + 2);
            uint16x8_t v25 = *(const char **)v10;
            goto LABEL_183;
          case 5:
            uint64_t v14 = *((unsigned int *)v10 + 2);
            if (v14 <= 1)
            {
              int v23 = 0;
LABEL_183:
              int v39 = operator new(0x28uLL);
              uint64_t v40 = v39;
              void *v39 = "TypeDecoder.h:%u: Node kind %u %.*s - fewer children (%zu) than required (2)";
              int v41 = 647;
              goto LABEL_184;
            }

            *(void *)&__int128 v541 = &v542;
            *((void *)&v541 + 1) = 0x800000000LL;
            if (*((_DWORD *)v10 + 2) < 2u)
            {
              uint64_t v82 = 0LL;
            }

            else
            {
              __int128 v81 = *(const char **)v10;
LABEL_177:
              uint64_t v82 = *((void *)v81 + 1);
            }

            if (LOBYTE(v547[0])) {
              goto LABEL_179;
            }
            int v102 = *((unsigned __int8 *)v10 + 18);
            if (v102 == 5 && *((_DWORD *)v10 + 2))
            {
              unint64_t v10 = *(void (**)(uint64_t, int))v10;
LABEL_243:
              uint64_t v103 = *(unsigned __int16 ***)v10;
            }

            else
            {
              uint64_t v103 = 0LL;
            }

            if (*((_WORD *)v103 + 8) != 232) {
              goto LABEL_570;
            }
            int v215 = *((unsigned __int8 *)v103 + 18);
            if (v215 == 5 && *((_DWORD *)v103 + 2))
            {
              uint64_t v103 = (unsigned __int16 **)*v103;
LABEL_569:
              uint64_t v103 = (unsigned __int16 **)*v103;
            }

LABEL_570:
            swift::Demangle::__runtime::getObjCClassOrProtocolName((unsigned __int16 ***)v103, (uint64_t)&v545);
            if (LOBYTE(v547[0]))
            {
              __swift::__runtime::llvm::StringRef::str((const void **)&v545, (uint64_t)&v538);
              if (v540 < 0) {
                operator delete((void *)v538);
              }
              goto LABEL_662;
            }

            *(void *)&__int128 v538 = 0LL;
            v534 = 0LL;
            if (!LOBYTE(v547[0]))
            {
              goto LABEL_662;
            }

LABEL_819:
                return;
              }
            }

            else if (v158 == 3)
            {
              int v174 = *(_DWORD *)(v156 + 8);
              __int128 v175 = *(const char **)v156;
LABEL_437:
              uint64_t v97 = operator new(0x28uLL);
              uint64_t v40 = v97;
              void *v97 = "TypeDecoder.h:%u: Node kind %u %.*s - %s";
              *((_DWORD *)v97 + 2) = 733;
              *((_DWORD *)v97 + 3) = v157;
              *((_DWORD *)v97 + 4) = v174;
              int v100 = "wrong node kind or no text";
              v97[3] = v175;
              goto LABEL_768;
            }

            int v174 = 0;
            __int128 v175 = "";
            goto LABEL_437;
          default:
            goto LABEL_390;
        }

      case 0x53:
        uint64_t v14 = 0LL;
        int v48 = 0;
        uint64_t v49 = (uint64_t *)"";
        switch(*((_BYTE *)v10 + 18))
        {
          case 1:
            int v48 = 0;
            uint64_t v14 = 1LL;
            goto LABEL_512;
          case 2:
            v209 = (const char *)v10;
            goto LABEL_712;
          case 3:
            uint64_t v14 = 0LL;
            int v48 = *((_DWORD *)v10 + 2);
            uint64_t v49 = *(uint64_t **)v10;
            goto LABEL_512;
          case 5:
            uint64_t v14 = *((unsigned int *)v10 + 2);
            if (v14 <= 1)
            {
              int v48 = 0;
LABEL_512:
              int v39 = operator new(0x28uLL);
              uint64_t v40 = v39;
              void *v39 = "TypeDecoder.h:%u: Node kind %u %.*s - fewer children (%zu) than required (2)";
              uint64_t v196 = 0x5300000336LL;
LABEL_535:
              v39[1] = v196;
              *((_DWORD *)v39 + 4) = v48;
              v39[3] = v49;
              goto LABEL_536;
            }

            v209 = *(const char **)v10;
LABEL_712:
            if (v539[0] == 1)
            {
              *((_WORD *)v6 + 8) = 1;
              *(_OWORD *)uint64_t v6 = v538;
              *(void *)&__int128 v538 = 0LL;
              *((void *)&v538 + 1) = swift::TypeLookupError::nop;
              ((void (*)(void, uint64_t, void))swift::TypeLookupError::nop)(0LL, 3LL, 0LL);
              return;
            }

            *(void *)&__int128 v541 = &v542;
            *((void *)&v541 + 1) = 0x800000000LL;
            v545 = v547;
            uint64_t v546 = 0x800000000LL;
            int v275 = *((unsigned __int8 *)v10 + 18);
            if (v275 == 2) {
              goto LABEL_718;
            }
            if (v275 == 5 && *((_DWORD *)v10 + 2) >= 2u)
            {
              unint64_t v10 = *(void (**)(uint64_t, int))v10;
LABEL_718:
              uint64_t v276 = *((void *)v10 + 1);
            }

            else
            {
              uint64_t v276 = 0LL;
            }

            int v304 = *(unsigned __int16 *)(v276 + 16);
            if (v304 == 84)
            {
              *uint64_t v6 = (unint64_t)"unknown error";
              v6[1] = (unint64_t)swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
              *((_WORD *)v6 + 8) = 1;
            }

            else
            {
              if (*(_BYTE *)(v276 + 18) == 3)
              {
                int v307 = *(_DWORD *)(v276 + 8);
                uint64_t v49 = *(uint64_t **)v276;
              }

              else
              {
                int v307 = 0;
              }

              v415 = operator new(0x28uLL);
              *(void *)v415 = "TypeDecoder.h:%u: Node kind %u %.*s - %s";
              v415[2] = 833;
              v415[3] = v304;
              v415[4] = v307;
              *((void *)v415 + 3) = v49;
              *((void *)v415 + 4) = "is not requirement list";
              *((_WORD *)v6 + 8) = 1;
              v6[1] = (unint64_t)swift::TypeLookupError::TypeLookupError<swift::TypeLookupError swift::TypeLookupErrorImpl<int,unsigned int,int,char const*,char const*>(char const*,int,unsigned int,int,char const*,char const*)::{lambda(void)#1}>(swift::TypeLookupError swift::TypeLookupErrorImpl<int,unsigned int,int,char const*,char const*>(char const*,int,unsigned int,int,char const*,char const*)::{lambda(void)#1} const&)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
              v416 = operator new(0x28uLL);
              __int128 v417 = *((_OWORD *)v415 + 1);
              _OWORD *v416 = *(_OWORD *)v415;
              v416[1] = v417;
              *((void *)v416 + 4) = *((void *)v415 + 4);
              *uint64_t v6 = (unint64_t)v416;
              operator delete(v415);
            }

            if (v545 != v547) {
              free(v545);
            }
            if (v539[0] == 1) {
              (*((void (**)(void, uint64_t, void))&v538 + 1))(v538, 3LL, 0LL);
            }
            return;
          default:
            goto LABEL_512;
        }

      case 0x55:
        uint64_t v85 = (_anonymous_namespace_::DecodedMetadataBuilder *)*a1;
        int v86 = 0;
        int v87 = 0;
LABEL_316:
        *((_WORD *)v6 + 8) = 0;
        *uint64_t v6 = GenericTypeParameterType;
        if (!GenericTypeParameterType) {
          goto LABEL_317;
        }
        return;
      case 0x63:
        int v15 = *((unsigned __int8 *)v10 + 18);
        if (v15 != 5)
        {
          if (v15 == 3)
          {
            int v96 = *((_DWORD *)v10 + 2);
            uint64_t v45 = *(const char **)v10;
          }

          else
          {
LABEL_219:
            int v96 = 0;
            uint64_t v45 = "";
          }

          uint64_t v97 = operator new(0x28uLL);
          uint64_t v40 = v97;
          void *v97 = "TypeDecoder.h:%u: Node kind %u %.*s - %s";
          uint64_t v99 = 0x6300000257LL;
          goto LABEL_230;
        }

        if (!*((_DWORD *)v10 + 2)) {
          goto LABEL_219;
        }
        goto LABEL_49;
      case 0x73:
        unint64_t v65 = 0LL;
        *(void *)&__int128 v541 = &v542;
        *((void *)&v541 + 1) = 0x800000000LL;
        v545 = v547;
        uint64_t v546 = 0x800000000LL;
        *(void *)&__int128 v538 = v539;
        *((void *)&v538 + 1) = 0x800000000LL;
        unsigned int v66 = v9 + 1;
        while (2)
        {
          unint64_t v67 = *((unsigned __int8 *)v10 + 18);
          switch((_DWORD)v67)
          {
            case 1:
              unint64_t v68 = *((unsigned __int8 *)v10 + 18);
              break;
            case 5:
              unint64_t v68 = *((unsigned int *)v10 + 2);
              break;
            case 2:
              unint64_t v68 = 2LL;
              break;
            default:
              goto LABEL_235;
          }

          if (v68 > v65)
          {
            unsigned int v69 = v67 - 1;
            if ((_DWORD)v67 != 1)
            {
              if ((_DWORD)v67 == 5)
              {
                goto LABEL_140;
              }

              unint64_t v67 = 2LL;
            }

            if (v67 > v65)
            {
LABEL_136:
              __int128 v70 = (const char *)v10;
              if (v69 >= 2) {
                __int128 v70 = *(const char **)v10;
              }
              uint64_t v71 = *(void *)&v70[8 * v65];
              goto LABEL_141;
            }

LABEL_140:
            uint64_t v71 = 0LL;
LABEL_141:
            int v72 = *(unsigned __int16 *)(v71 + 16);
            switch(*(_WORD *)(v71 + 16))
            {
              case 'i':
              case 'k':
              case 'l':
                goto LABEL_124;
              case 'j':
                if (*(_BYTE *)(v71 + 18) == 3) {
                  goto LABEL_124;
                }
                v407 = operator new(0x28uLL);
                v408 = v407;
                void *v407 = "TypeDecoder.h:%u: Node kind %u %.*s - %s";
                uint64_t v409 = 0x6A00000418LL;
                goto LABEL_971;
              case 'p':
                if (*(_BYTE *)(v71 + 18) == 3) {
                  goto LABEL_124;
                }
                v407 = operator new(0x28uLL);
                v408 = v407;
                void *v407 = "TypeDecoder.h:%u: Node kind %u %.*s - %s";
                uint64_t v409 = 0x7000000434LL;
LABEL_971:
                v407[1] = v409;
                *((_DWORD *)v407 + 4) = 0;
                v407[3] = "";
                v407[4] = "expected text";
                *((_WORD *)v6 + 8) = 1;
                v6[1] = (unint64_t)swift::TypeLookupError::TypeLookupError<swift::TypeLookupError swift::TypeLookupErrorImpl<int,unsigned int,int,char const*,char const*>(char const*,int,unsigned int,int,char const*,char const*)::{lambda(void)#1}>(swift::TypeLookupError swift::TypeLookupErrorImpl<int,unsigned int,int,char const*,char const*>(char const*,int,unsigned int,int,char const*,char const*)::{lambda(void)#1} const&)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
                v410 = operator new(0x28uLL);
                __int128 v411 = v408[1];
                _OWORD *v410 = *v408;
                v410[1] = v411;
                *((void *)v410 + 4) = *((void *)v408 + 4);
                *uint64_t v6 = (unint64_t)v410;
                operator delete(v408);
                goto LABEL_1079;
              case 'q':
                int v73 = *(unsigned __int8 *)(v71 + 18);
                uint64_t v74 = v71;
                if (v73 == 5)
                {
                  if (*(_DWORD *)(v71 + 8))
                  {
                    uint64_t v74 = *(void *)v71;
LABEL_150:
                    if (*(_WORD *)(*(void *)v74 + 16LL) == 114)
                    {
                      if ((v73 - 1) <= 1)
                      {
                        if (*(_BYTE *)(*(void *)v71 + 18LL) != 3)
                        {
                          int v439 = 0;
                          v440 = "";
LABEL_1075:
                          v424 = operator new(0x28uLL);
                          v255 = v424;
                          void *v424 = "TypeDecoder.h:%u: Node kind %u %.*s - %s";
                          v424[1] = 0x7100000426LL;
                          *((_DWORD *)v424 + 4) = v439;
                          v425 = "expected convention name";
LABEL_1076:
                          v424[3] = v440;
LABEL_1077:
                          v424[4] = v425;
                          *((_WORD *)v6 + 8) = 1;
                          v256 = swift::TypeLookupError::TypeLookupError<swift::TypeLookupError swift::TypeLookupErrorImpl<int,unsigned int,int,char const*,char const*>(char const*,int,unsigned int,int,char const*,char const*)::{lambda(void)#1}>(swift::TypeLookupError swift::TypeLookupErrorImpl<int,unsigned int,int,char const*,char const*>(char const*,int,unsigned int,int,char const*,char const*)::{lambda(void)#1} const&)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
                          goto LABEL_1078;
                        }

  if (v53 == 5)
  {
    if (v54 == (swift::Demangle::__runtime::Node **)(*v17 + 8LL * *((unsigned int *)v17 + 2)))
    {
LABEL_156:
      int v17 = 0LL;
      *(_BYTE *)(a1 + 97) = 0;
      return (swift::Demangle::__runtime::Node *)v17;
    }
  }

  else
  {
    uint64_t v62 = (swift::Demangle::__runtime::Node **)(v17 + 1);
    if (v53 != 1) {
      uint64_t v62 = 0LL;
    }
    if (v53 == 2) {
      uint64_t v63 = (swift::Demangle::__runtime::Node **)(v17 + 2);
    }
    else {
      uint64_t v63 = v62;
    }
    if (v54 == v63) {
      goto LABEL_156;
    }
  }

  uint64_t v64 = *v54;
  if (!v64) {
    goto LABEL_156;
  }
  unint64_t v65 = *((unsigned __int8 *)v64 + 18);
  if (v65 == 5 && *((_DWORD *)v64 + 2))
  {
    uint64_t v64 = *(swift::Demangle::__runtime::Node **)v64;
LABEL_154:
    unsigned int v66 = *(swift::Demangle::__runtime::Node **)v64;
    if (a5 != 2) {
      goto LABEL_184;
    }
    goto LABEL_158;
  }

  unsigned int v66 = 0LL;
  if (a5 != 2) {
    goto LABEL_184;
  }
LABEL_158:
  unint64_t v67 = v66;
  while (1)
  {
    unsigned int v69 = *((unsigned __int16 *)v67 + 8);
    if (v69 != 44) {
      break;
    }
    __int128 v70 = *((unsigned __int8 *)v67 + 18);
    if (v70 != 2)
    {
      if (v70 != 5 || *((_DWORD *)v67 + 2) < 2u)
      {
        unint64_t v68 = 0LL;
        goto LABEL_169;
      }

      unint64_t v67 = *(swift::Demangle::__runtime::Node **)v67;
    }

    unint64_t v68 = (swift::Demangle::__runtime::Node *)*((void *)v67 + 1);
LABEL_169:
    uint64_t v71 = *((unsigned __int8 *)v68 + 18);
    if ((v71 - 1) < 2)
    {
LABEL_161:
      unint64_t v67 = *(swift::Demangle::__runtime::Node **)v68;
    }

    else
    {
      unint64_t v67 = 0LL;
      if (v71 == 5)
      {
        unint64_t v67 = 0LL;
        if (*((_DWORD *)v68 + 2))
        {
          unint64_t v68 = *(swift::Demangle::__runtime::Node **)v68;
          goto LABEL_161;
        }
      }
    }
  }

  int v72 = (v69 - 22) > 0x3C || ((1LL << (v69 - 22)) & 0x1000080000000001LL) == 0;
  if (!v72 || v69 == 222 || v69 == 245)
  {
    int v73 = *((unsigned __int16 *)v17 + 8);
    if ((v73 == 117 || v73 == 70) && !*(_BYTE *)(a1 + 45)) {
      goto LABEL_207;
    }
    if (v85) {
      goto LABEL_183;
    }
    int v75 = v66;
    while (1)
    {
LABEL_196:
      int v76 = v75;
      __int128 v77 = *((unsigned __int16 *)v75 + 8);
      if (v77 != 232)
      {
        uint64_t v79 = (v77 - 44) > 0x26 || ((1LL << (v77 - 44)) & 0x4000200001LL) == 0;
        if (!v79 || v77 == 245)
        {
LABEL_206:
          goto LABEL_207;
        }

            uint64_t v74 = 0LL;
            goto LABEL_141;
          default:
            if ((_DWORD)v12 == 1) {
              goto LABEL_19;
            }
            if ((_DWORD)v12 == 5)
            {
LABEL_41:
            }

            else
            {
LABEL_17:
              if ((_DWORD)v12 != 2) {
                goto LABEL_42;
              }
              int v12 = 2LL;
LABEL_19:
              if (v12 <= v7)
              {
LABEL_42:
                int v16 = 0LL;
                goto LABEL_43;
              }
            }

            int v15 = a2;
            if ((v13 & 1) == 0) {
              int v15 = *(swift::Demangle::__runtime::Node **)a2;
            }
            int v16 = (swift::Demangle::__runtime::Node *)*((void *)v15 + v7);
LABEL_43:
            LODWORD(v7) = v7 + 1;
            goto LABEL_10;
        }
      }

    case 2u:
      goto LABEL_6;
  }

LABEL_1125:
            uint64_t v462 = v512;
            v463 = *(uint64_t **)v512;
            v460 = *(uint64_t **)v512;
LABEL_1126:
            v316 = &v463[*(unsigned int *)(v462 + 8)];
LABEL_1130:
            while (v460 != v316)
            {
              v467 = (uint64_t **)*v460;
              if (*(_WORD *)(*v460 + 16) != 42) {
                goto LABEL_1129;
              }
              int v468 = *((unsigned __int8 *)v467 + 18);
              if (v468 == 5 && *((_DWORD *)v467 + 2))
              {
                v467 = (uint64_t **)*v467;
LABEL_1136:
                v469 = (uint64_t **)*v467;
                goto LABEL_1138;
              }

              v469 = 0LL;
LABEL_1138:
              int v470 = *((unsigned __int8 *)v469 + 18);
              if ((v470 - 1) >= 2)
              {
                if (v470 != 5 || !*((_DWORD *)v469 + 2))
                {
                  v471 = 0LL;
                  goto LABEL_1144;
                }

                v469 = (uint64_t **)*v469;
              }

              v471 = (uint64_t **)*v469;
LABEL_1144:
              int v472 = *((unsigned __int8 *)v471 + 18);
              if ((v472 - 1) <= 1)
              {
                v548[0] = **v471;
              }

              else
              {
                v548[0] = *(void *)**v471;
                if (v472 == 5) {
                  v471 = (uint64_t **)*v471;
                }
              }

              uint64_t v525 = *v471[1];
              __swift::__runtime::llvm::SmallVectorImpl<std::pair<unsigned int,unsigned int>>::emplace_back<unsigned long long,unsigned long long>( (uint64_t)v526,  (unsigned int *)v548,  &v525);
LABEL_1129:
              ++v460;
            }

            unint64_t v473 = v529;
            if ((_DWORD)v529)
            {
              unint64_t v474 = 0LL;
              v475 = v528;
              do
              {
                if (v475[v474])
                {
                  unsigned int v476 = 0;
                  do
                  {
                    v477 = *v11;
                    uint64_t v478 = (*v11)[4];
                    if (v478)
                    {
                      LODWORD(v548[0]) = v474;
                      LODWORD(v525) = v476;
                      uint64_t v479 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v478 + 48LL))( v478,  v548,  &v525);
                      uint64_t v483 = v479;
                      uint64_t v484 = v477[11];
                      if (v477[10] != v484 && (v479 & 1) != 0)
                      {
                        unint64_t v485 = *(void *)(v484 - 8);
                        v548[0] = v479;
                        if (v485 >= *(void *)((v479 & 0xFFFFFFFFFFFFFFFELL) - 8))
                        {
                          uint64_t NumElements = swift::TargetPackPointer<swift::InProcess,swift::TargetMetadata>::getNumElements( v548,  v480,  v481,  v482);
                          swift::fatalError( 0LL,  "Pack index %zu exceeds pack length %zu\n",  v499,  v500,  v485,  NumElements);
                        }

                        uint64_t v483 = *(void *)((v479 & 0xFFFFFFFFFFFFFFFELL) + 8 * v485);
                      }
                    }

                    else
                    {
                      uint64_t v483 = 0LL;
                    }

                    uint64_t v486 = v532;
                    if (v532 >= (unint64_t)HIDWORD(v532))
                    {
                      __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod( (uint64_t)&v531,  v533,  v532 + 1LL,  8LL);
                      uint64_t v486 = v532;
                    }

                    *((void *)v531 + v486) = v483;
                    LODWORD(v532) = v532 + 1;
                    ++v476;
                    v475 = v528;
                  }

                  while (v476 < *((_DWORD *)v528 + v474));
                  unint64_t v473 = v529;
                }

                ++v474;
              }

              while (v474 < v473);
            }

            unsigned int v487 = *(unsigned __int8 *)(v53 + 18);
            switch(v487)
            {
              case 1u:
                goto LABEL_1176;
              case 5u:
                unsigned int v487 = *(_DWORD *)(v53 + 8);
                if (!v487) {
                  break;
                }
                goto LABEL_1176;
              case 2u:
LABEL_1176:
                uint64_t v490 = 0LL;
                unint64_t v491 = 0LL;
                BOOL v488 = 1;
                unint64_t v492 = v487;
                while (1)
                {
                  unint64_t v493 = *(unsigned __int8 *)(v53 + 18);
                  unsigned int v494 = v493 - 1;
                  if ((_DWORD)v493 != 1)
                  {
                    if ((_DWORD)v493 == 5)
                    {
                      unint64_t v493 = *(unsigned int *)(v53 + 8);
                    }

                    else
                    {
                      if ((_DWORD)v493 != 2) {
                        goto LABEL_1187;
                      }
                      unint64_t v493 = 2LL;
                    }
                  }

                  if (v493 > v491)
                  {
                    v495 = (const char *)v53;
                    if (v494 >= 2) {
                      v495 = *(const char **)v53;
                    }
                    uint64_t v496 = *(void *)&v495[8 * v491];
                    goto LABEL_1188;
                  }

LABEL_1187:
                  uint64_t v496 = 0LL;
LABEL_1188:
                  if (!a4 || *((_WORD *)a4 + 8) != 1)
                  {
                    if (*((_WORD *)a4 + 8)) {
                      uint64_t v497 = 0LL;
                    }
                    else {
                      uint64_t v497 = *a4;
                    }
                    v548[0] = v497;
                    __swift::__runtime::llvm::SmallVectorImpl<std::pair<swift::MetadataOrPack,swift::MetadataOrPack>>::emplace_back<swift::MetadataOrPack&,swift::MetadataOrPack>( (uint64_t)&v534,  (uint64_t *)((char *)v531 + v490),  v548);
                    if (*((_WORD *)a4 + 8) == 1) {
                      ((void (*)(unint64_t, uint64_t, void))a4[1])(*a4, 3LL, 0LL);
                    }
                    BOOL v488 = ++v491 < v492;
                    v490 += 8LL;
                    if (v492 != v491) {
                      continue;
                    }
                  }

                  goto LABEL_1166;
                }
            }

            BOOL v488 = 0;
LABEL_1166:
            if (v526[0] != v527) {
              free(v526[0]);
            }
            if (v528 != v530) {
              free(v528);
            }
            if (v488) {
              goto LABEL_1002;
            }
            int v489 = *((unsigned __int8 *)v10 + 18);
            if (v489 == 5 && *((_DWORD *)v10 + 2))
            {
LABEL_491:
              unint64_t v10 = *(void (**)(uint64_t, int))v10;
LABEL_492:
              v198 = *(const char **)v10;
              goto LABEL_493;
            }

            v198 = 0LL;
LABEL_493:
            uint64_t v200 = v198 + 16;
            int v199 = *((unsigned __int16 *)v198 + 8);
            if (v199 != 212)
            {
              v258 = a4;
              if (v198[18] == 3)
              {
                int v259 = *((_DWORD *)v198 + 2);
                v260 = *(const char **)v198;
              }

              else
              {
                int v259 = 0;
                v260 = "";
              }

              v313 = operator new(0x28uLL);
              v205 = v313;
              void *v313 = "TypeDecoder.h:%u: Node kind %u %.*s - %s";
              *((_DWORD *)v313 + 2) = 1384;
              *((_DWORD *)v313 + 3) = v199;
              *((_DWORD *)v313 + 4) = v259;
              v314 = "expected layout";
LABEL_1000:
              v313[3] = v260;
              v313[4] = v314;
              *((_WORD *)v258 + 8) = 1;
              v258[1] = (unint64_t)swift::TypeLookupError::TypeLookupError<swift::TypeLookupError swift::TypeLookupErrorImpl<int,unsigned int,int,char const*,char const*>(char const*,int,unsigned int,int,char const*,char const*)::{lambda(void)#1}>(swift::TypeLookupError swift::TypeLookupErrorImpl<int,unsigned int,int,char const*,char const*>(char const*,int,unsigned int,int,char const*,char const*)::{lambda(void)#1} const&)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
              v420 = operator new(0x28uLL);
              __int128 v421 = v205[1];
              _OWORD *v420 = *v205;
              v420[1] = v421;
              *((void *)v420 + 4) = *((void *)v205 + 4);
              unint64_t *v258 = (unint64_t)v420;
LABEL_1001:
              operator delete(v205);
              goto LABEL_1002;
            }

            int v201 = *((unsigned __int8 *)v198 + 18);
            v202 = v198;
            if ((v201 - 1) >= 2)
            {
              if (v201 == 5)
              {
                v203 = *(const char **)v198;
                v202 = *(const char **)v198;
                goto LABEL_992;
              }

              v202 = 0LL;
            }

            if (v201 == 1)
            {
              uint64_t v200 = v198 + 8;
            }

            else if (v201 != 2)
            {
              if (v201 == 5)
              {
                v203 = *(const char **)v198;
LABEL_992:
                uint64_t v200 = &v203[8 * *((unsigned int *)v198 + 2)];
              }

              else
              {
                uint64_t v200 = 0LL;
              }
            }

            if (v202 == v200)
            {
LABEL_1049:
              *a4 = (unint64_t)"unknown error";
              a4[1] = (unint64_t)swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
              *((_WORD *)a4 + 8) = 1;
              goto LABEL_1002;
            }

            uint64_t v426 = v9 + 1;
            v427 = "";
            while (2)
            {
              v428 = *(uint64_t **)v202;
              int v429 = *(unsigned __int16 *)(*(void *)v202 + 16LL);
              if (v429 == 213)
              {
                char v430 = 1;
                goto LABEL_1038;
              }

              if (v429 == 214)
              {
                char v430 = 0;
LABEL_1038:
                LOBYTE(v528) = v430;
                int v431 = *((unsigned __int8 *)v428 + 18);
                if ((v431 - 1) >= 2)
                {
                  if (v431 != 5)
                  {
                    if (v431 != 3)
                    {
LABEL_1087:
                      int v445 = 0;
                      int v444 = 1394;
                      v446 = a4;
                      v443 = "no children";
                      goto LABEL_1119;
                    }

                    v443 = "no children";
                    int v444 = 1394;
                    goto LABEL_1089;
                  }

                  if (!*((_DWORD *)v428 + 2)) {
                    goto LABEL_1087;
                  }
                  v428 = (uint64_t *)*v428;
                }

                if (a4 && *((_WORD *)a4 + 8) == 1) {
                  goto LABEL_1002;
                }
                if (*((_WORD *)a4 + 8)) {
                  v432 = 0LL;
                }
                else {
                  v432 = (void *)*a4;
                }
                v526[0] = v432;
                if (*((_WORD *)a4 + 8) == 1) {
                  ((void (*)(unint64_t, uint64_t, void))a4[1])(*a4, 3LL, 0LL);
                }
                v202 += 8;
                if (v202 == v200) {
                  goto LABEL_1049;
                }
                continue;
              }

              break;
            }

            v443 = "unhandled field type";
            int v444 = 1391;
            if (*((_BYTE *)v428 + 18) == 3)
            {
LABEL_1089:
              int v445 = *((_DWORD *)v428 + 2);
              v427 = (const char *)*v428;
              goto LABEL_1118;
            }

            int v445 = 0;
            v427 = "";
LABEL_1118:
            v446 = a4;
LABEL_1119:
            v464 = operator new(0x28uLL);
            *(void *)v464 = "TypeDecoder.h:%u: Node kind %u %.*s - %s";
            v464[2] = v444;
            v464[3] = v429;
            v464[4] = v445;
            *((void *)v464 + 3) = v427;
            *((void *)v464 + 4) = v443;
            *((_WORD *)v446 + 8) = 1;
            v446[1] = (unint64_t)swift::TypeLookupError::TypeLookupError<swift::TypeLookupError swift::TypeLookupErrorImpl<int,unsigned int,int,char const*,char const*>(char const*,int,unsigned int,int,char const*,char const*)::{lambda(void)#1}>(swift::TypeLookupError swift::TypeLookupErrorImpl<int,unsigned int,int,char const*,char const*>(char const*,int,unsigned int,int,char const*,char const*)::{lambda(void)#1} const&)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
            v465 = operator new(0x28uLL);
            __int128 v466 = *((_OWORD *)v464 + 1);
            _OWORD *v465 = *(_OWORD *)v464;
            v465[1] = v466;
            *((void *)v465 + 4) = *((void *)v464 + 4);
            unint64_t *v446 = (unint64_t)v465;
            operator delete(v464);
LABEL_1002:
            if (v531 != v533) {
              free(v531);
            }
            if (v545 != v547) {
              free(v545);
            }
            if (v534 != v536) {
              free(v534);
            }
            v251 = (void *)v538;
            if ((_WORD *)v538 != v539) {
              goto LABEL_1084;
            }
            return;
          default:
LABEL_497:
            v204 = operator new(0x28uLL);
            v205 = v204;
            void *v204 = "TypeDecoder.h:%u: Node kind %u %.*s - %s";
            v204[1] = 0xD300000524LL;
            *((_DWORD *)v204 + 4) = v50;
            v206 = "no children";
            v204[3] = v52;
            goto LABEL_811;
        }

      case 0xDF:
        v545 = v547;
        uint64_t v546 = 0x800000000LL;
        *(void *)&__int128 v541 = &v542;
        *((void *)&v541 + 1) = 0x800000000LL;
        int v75 = *((unsigned __int8 *)v10 + 18);
        int v76 = (const char *)v10;
        if (v75 == 5)
        {
          __int128 v77 = *(const char **)v10;
          int v76 = *(const char **)v10;
LABEL_465:
          __int128 v192 = &v77[8 * *((unsigned int *)v10 + 2)];
          goto LABEL_581;
        }

        int v76 = 0LL;
LABEL_461:
        switch(v75)
        {
          case 1:
            __int128 v192 = (char *)v10 + 8;
            break;
          case 2:
            __int128 v192 = (char *)v10 + 16;
            break;
          case 5:
            __int128 v77 = *(const char **)v10;
            goto LABEL_465;
          default:
            __int128 v192 = 0LL;
            break;
        }

LABEL_581:
        if (v76 == v192)
        {
          uint64_t v247 = 0LL;
          uint64_t v248 = 0LL;
          v249 = &v542;
          v250 = v547;
LABEL_680:
          goto LABEL_1016;
        }

        unsigned int v522 = v9 + 1;
        v520 = v6;
        v504 = v192;
        while (1)
        {
          v218 = *(uint64_t **)v76;
          if (*(_WORD *)(*(void *)v76 + 16LL) != 224)
          {
            int v252 = *((unsigned __int16 *)v10 + 8);
            if (*((_BYTE *)v10 + 18) == 3)
            {
              int v253 = *((_DWORD *)v10 + 2);
              v254 = *(const char **)v10;
            }

            else
            {
              int v253 = 0;
              v254 = "";
            }

            v308 = operator new(0x28uLL);
            v309 = v308;
            void *v308 = "TypeDecoder.h:%u: Node kind %u %.*s - %s";
            *((_DWORD *)v308 + 2) = 1158;
            *((_DWORD *)v308 + 3) = v252;
            *((_DWORD *)v308 + 4) = v253;
            v310 = "unexpected kind";
LABEL_796:
            v308[3] = v254;
            v308[4] = v310;
            *((_WORD *)v6 + 8) = 1;
            v6[1] = (unint64_t)swift::TypeLookupError::TypeLookupError<swift::TypeLookupError swift::TypeLookupErrorImpl<int,unsigned int,int,char const*,char const*>(char const*,int,unsigned int,int,char const*,char const*)::{lambda(void)#1}>(swift::TypeLookupError swift::TypeLookupErrorImpl<int,unsigned int,int,char const*,char const*>(char const*,int,unsigned int,int,char const*,char const*)::{lambda(void)#1} const&)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
            v311 = operator new(0x28uLL);
            __int128 v312 = v309[1];
            _OWORD *v311 = *v309;
            v311[1] = v312;
            *((void *)v311 + 4) = *((void *)v309 + 4);
            *uint64_t v6 = (unint64_t)v311;
            operator delete(v309);
LABEL_1016:
            v251 = v545;
            if (v545 == v547) {
              return;
            }
LABEL_1084:
            free(v251);
            return;
          }

          uint64_t v219 = *v218;
          if (*(_WORD *)(v219 + 16) == 276)
          {
            if (*(_BYTE *)(v219 + 18) == 3)
            {
              int v257 = *(_DWORD *)(v219 + 8);
              v254 = *(const char **)v219;
            }

            else
            {
              int v257 = 0;
              v254 = "";
            }

            v308 = operator new(0x28uLL);
            v309 = v308;
            void *v308 = "TypeDecoder.h:%u: Node kind %u %.*s - %s";
            v308[1] = 0x1140000048CLL;
            *((_DWORD *)v308 + 4) = v257;
            v310 = "no children";
            goto LABEL_796;
          }

          v526[0] = 0LL;
          v526[1] = 0LL;
          v220 = *(uint64_t **)v76;
          unsigned int v221 = *(unsigned __int8 *)(*(void *)v76 + 18LL);
          if (v221 - 1 > 1) {
            v222 = *(void **)*v220;
          }
          else {
            v222 = (void *)*v220;
          }
          if (*((_WORD *)v222 + 8) == 225)
          {
            *(_OWORD *)v526 = *(_OWORD *)v222;
            v220 = *(uint64_t **)v76;
            unsigned int v221 = *(unsigned __int8 *)(*(void *)v76 + 18LL);
            unint64_t v223 = 1LL;
          }

          else
          {
            unint64_t v223 = 0LL;
          }

          unint64_t v224 = v221;
          if (v221 != 1)
          {
            if (v221 == 2) {
              goto LABEL_602;
            }
            if (v221 != 5) {
              goto LABEL_603;
            }
            unint64_t v224 = *((unsigned int *)v220 + 2);
          }

          if (v224 > v223)
          {
            if (v221 - 1 >= 2) {
              v220 = (uint64_t *)*v220;
            }
LABEL_602:
            v225 = (const char *)v220[v223];
            goto LABEL_604;
          }

LABEL_603:
          v225 = 0LL;
LABEL_604:
          v537[0] = (uint64_t)&v545;
          v537[1] = (uint64_t)&v541;
          v537[2] = (uint64_t)v526;
          if (*((_WORD *)v225 + 8) == 232)
          {
            int v226 = *((unsigned __int8 *)v225 + 18);
            if ((v226 - 1) >= 2)
            {
              if (v226 != 5 || !*((_DWORD *)v225 + 2))
              {
                v225 = 0LL;
                goto LABEL_611;
              }

              v225 = *(const char **)v225;
            }

            v225 = *(const char **)v225;
          }

LABEL_611:
          if (*((_WORD *)v225 + 8) == 229)
          {
            switch(v225[18])
            {
              case 1:
                int v418 = 0;
                v419 = "";
                uint64_t v227 = 1LL;
                goto LABEL_1014;
              case 2:
                goto LABEL_615;
              case 3:
                uint64_t v227 = 0LL;
                int v418 = *((_DWORD *)v225 + 2);
                v419 = *(const char **)v225;
                goto LABEL_1014;
              case 5:
                uint64_t v227 = *((unsigned int *)v225 + 2);
                if (v227 <= 1)
                {
                  int v418 = 0;
LABEL_1013:
                  v419 = "";
LABEL_1014:
                  v422 = operator new(0x28uLL);
                  void *v422 = "TypeDecoder.h:%u: Node kind %u %.*s - fewer children (%zu) than required (2)";
                  v422[1] = 0xE5000005EBLL;
                  *((_DWORD *)v422 + 4) = v418;
                  v422[3] = v419;
                  v422[4] = v227;
                  uint64_t v515 = (uint64_t)v422;
                  uint64_t v4 = swift::TypeLookupError::TypeLookupError<swift::TypeLookupError swift::TypeLookupErrorImpl<int,unsigned int,int,char const*,unsigned long>(char const*,int,unsigned int,int,char const*,unsigned long)::{lambda(void)#1}>(swift::TypeLookupError swift::TypeLookupErrorImpl<int,unsigned int,int,char const*,unsigned long>(char const*,int,unsigned int,int,char const*,unsigned long)::{lambda(void)#1} const&)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
LABEL_1015:
                  *((_WORD *)v6 + 8) = 1;
                  v6[1] = (unint64_t)v4;
                  *uint64_t v6 = ((uint64_t (*)(uint64_t, uint64_t, void))v4)(v515, 2LL, 0LL);
                  ((void (*)(uint64_t, uint64_t, void))v4)(v515, 3LL, 0LL);
                  goto LABEL_1016;
                }

                v225 = *(const char **)v225;
LABEL_615:
                v228 = *(const char **)v225;
                if (v539[0] == 1)
                {
                  uint64_t v4 = (void (*)(uint64_t, int))*((void *)&v538 + 1);
                  uint64_t v515 = (*((uint64_t (**)(void, uint64_t, void))&v538 + 1))(v538, 2LL, 0LL);
                  char v231 = 0;
                  int v232 = 1;
                }

                else
                {
                  v235 = v4;
                  if (v539[0]) {
                    uint64_t v236 = 0LL;
                  }
                  else {
                    uint64_t v236 = v538;
                  }
                  if (v237)
                  {
                    uint64_t v238 = v237;
                    uint64_t v239 = 0LL;
                    int v232 = 0;
                    while (1)
                    {
                      uint64_t v240 = (*v11)[11];
                      if ((*v11)[10] == v240) {
                        goto LABEL_1195;
                      }
                      *(void *)(v240 - 8) = v239;
                      int v241 = v536[0];
                      if (v536[0] == 1)
                      {
                        v235 = (void (*)(uint64_t, int))v535;
                        uint64_t v515 = ((uint64_t (*)(void *, uint64_t, void))v535)(v534, 2LL, 0LL);
                        int v232 = 1;
                      }

                      else
                      {
                        if (v536[0]) {
                          v242 = 0LL;
                        }
                        else {
                          v242 = v534;
                        }
                        uint64_t v243 = v546;
                        if (v546 >= (unint64_t)HIDWORD(v546))
                        {
                          __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod( (uint64_t)&v545,  v547,  v546 + 1LL,  8LL);
                          uint64_t v243 = v546;
                        }

                        v545[v243] = v242;
                        LODWORD(v546) = v546 + 1;
                        __int128 v244 = *(_OWORD *)v526;
                        uint64_t v245 = DWORD2(v541);
                        if (DWORD2(v541) >= (unint64_t)HIDWORD(v541))
                        {
                          __int128 v501 = *(_OWORD *)v526;
                          __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod( (uint64_t)&v541,  &v542,  DWORD2(v541) + 1LL,  16LL);
                          __int128 v244 = v501;
                          uint64_t v245 = DWORD2(v541);
                        }

                        *(_OWORD *)(v541 + 16 * v245) = v244;
                        ++DWORD2(v541);
                      }

                      if (v536[0] == 1) {
                        ((void (*)(void *, uint64_t, void))v535)(v534, 3LL, 0LL);
                      }
                      if (v241 == 1) {
                        break;
                      }
                      if (v238 == ++v239) {
                        goto LABEL_649;
                      }
                    }

                    char v231 = 0;
                    uint64_t v6 = v520;
                    __int128 v192 = v504;
                    uint64_t v4 = v235;
                  }

                  else
                  {
                    int v232 = 0;
LABEL_649:
                    uint64_t v246 = (*v11)[11];
                    uint64_t v6 = v520;
                    __int128 v192 = v504;
                    if ((*v11)[10] == v246) {
                      goto LABEL_1196;
                    }
                    uint64_t v4 = v235;
                    (*v11)[11] = v246 - 16;
                    char v231 = 1;
                  }
                }

                if (v539[0] == 1) {
                  (*((void (**)(void, uint64_t, void))&v538 + 1))(v538, 3LL, 0LL);
                }
                if ((v231 & 1) == 0) {
                  goto LABEL_655;
                }
                goto LABEL_583;
              default:
                int v418 = 0;
                uint64_t v227 = 0LL;
                goto LABEL_1013;
            }
          }

          int v233 = v539[0];
          if (v539[0] == 1)
          {
            uint64_t v4 = (void (*)(uint64_t, int))*((void *)&v538 + 1);
            uint64_t v515 = (*((uint64_t (**)(void, uint64_t, void))&v538 + 1))(v538, 2LL, 0LL);
            int v232 = 1;
          }

          else
          {
            if (v539[0]) {
              uint64_t v234 = 0LL;
            }
            else {
              uint64_t v234 = v538;
            }
            int v232 = 0;
          }

          if (v539[0] == 1) {
            (*((void (**)(void, uint64_t, void))&v538 + 1))(v538, 3LL, 0LL);
          }
          if (v233 == 1)
          {
LABEL_655:
            if (v232) {
              goto LABEL_1015;
            }
          }

          else
          {
LABEL_583:
            v515 &= 0xFFFFFFFFFFFFFF00LL;
          }

          v76 += 8;
          if (v76 == v192)
          {
            v250 = v545;
            uint64_t v248 = v546;
            v249 = (uint64_t *)v541;
            uint64_t v247 = DWORD2(v541);
            goto LABEL_680;
          }
        }

      case 0xE0:
        int v17 = *((unsigned __int8 *)v10 + 18);
        int32x4_t v18 = (const char *)v10;
        if (v17 != 5)
        {
          if (v17 == 3)
          {
            int v95 = *((_DWORD *)v10 + 2);
            uint64_t v45 = *(const char **)v10;
          }

          else
          {
LABEL_223:
            int v95 = 0;
            uint64_t v45 = "";
          }

          uint64_t v97 = operator new(0x28uLL);
          uint64_t v40 = v97;
          void *v97 = "TypeDecoder.h:%u: Node kind %u %.*s - %s";
          uint64_t v98 = 0xE0000004A4LL;
          goto LABEL_225;
        }

        if (!*((_DWORD *)v10 + 2)) {
          goto LABEL_223;
        }
        int32x4_t v18 = *(const char **)v10;
LABEL_27:
        if (*(_WORD *)(*(void *)v18 + 16LL) == 225)
        {
          switch(*((_BYTE *)v10 + 18))
          {
            case 1:
              int v135 = 0;
              unint64_t v134 = "";
              uint64_t v14 = 1LL;
              goto LABEL_479;
            case 2:
              goto LABEL_45;
            case 3:
              uint64_t v14 = 0LL;
              int v135 = *((_DWORD *)v10 + 2);
              unint64_t v134 = *(const char **)v10;
              goto LABEL_479;
            case 5:
              uint64_t v14 = *((unsigned int *)v10 + 2);
              if (v14 <= 1)
              {
                int v135 = 0;
LABEL_478:
                unint64_t v134 = "";
LABEL_479:
                int v39 = operator new(0x28uLL);
                uint64_t v40 = v39;
                void *v39 = "TypeDecoder.h:%u: Node kind %u %.*s - fewer children (%zu) than required (2)";
                uint64_t v136 = 0xE0000004AALL;
LABEL_480:
                v39[1] = v136;
                *((_DWORD *)v39 + 4) = v135;
                v39[3] = v134;
LABEL_536:
                v39[4] = v14;
                goto LABEL_537;
              }

LABEL_755:
        *((_BYTE *)v207 + 72) = v296;
        *((_WORD *)v6 + 8) = 0;
        *uint64_t v6 = v295;
        if (!v295)
        {
LABEL_317:
          *uint64_t v6 = (unint64_t)"unknown error";
          v6[1] = (unint64_t)swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
          *((_WORD *)v6 + 8) = 1;
        }

        return;
      case 0x127:
        int v26 = 0;
        uint16x8_t v27 = "";
        switch(*((_BYTE *)v10 + 18))
        {
          case 1:
          case 2:
            goto LABEL_545;
          case 3:
            int v26 = *((_DWORD *)v10 + 2);
            uint16x8_t v27 = *(const char **)v10;
            break;
          case 5:
            if (*((_DWORD *)v10 + 2)) {
              goto LABEL_544;
            }
            int v26 = 0;
            break;
          default:
            break;
        }

        uint64_t v97 = operator new(0x28uLL);
        uint64_t v40 = v97;
        void *v97 = "TypeDecoder.h:%u: Node kind %u %.*s - %s";
        uint64_t v197 = 0x12700000583LL;
        goto LABEL_766;
      case 0x128:
        int v26 = 0;
        uint16x8_t v27 = "";
        switch(*((_BYTE *)v10 + 18))
        {
          case 1:
          case 2:
            goto LABEL_545;
          case 3:
            int v26 = *((_DWORD *)v10 + 2);
            uint16x8_t v27 = *(const char **)v10;
            break;
          case 5:
            if (*((_DWORD *)v10 + 2)) {
              goto LABEL_544;
            }
            int v26 = 0;
            break;
          default:
            break;
        }

        uint64_t v97 = operator new(0x28uLL);
        uint64_t v40 = v97;
        void *v97 = "TypeDecoder.h:%u: Node kind %u %.*s - %s";
        uint64_t v197 = 0x1280000058DLL;
        goto LABEL_766;
      case 0x129:
        uint64_t v14 = 0LL;
        int v48 = 0;
        uint64_t v49 = (uint64_t *)"";
        switch(*((_BYTE *)v10 + 18))
        {
          case 1:
            int v48 = 0;
            uint64_t v14 = 1LL;
            goto LABEL_534;
          case 2:
            v210 = (const char *)v10;
            goto LABEL_720;
          case 3:
            uint64_t v14 = 0LL;
            int v48 = *((_DWORD *)v10 + 2);
            uint64_t v49 = *(uint64_t **)v10;
            goto LABEL_534;
          case 5:
            uint64_t v14 = *((unsigned int *)v10 + 2);
            if (v14 <= 1)
            {
              int v48 = 0;
LABEL_534:
              int v39 = operator new(0x28uLL);
              uint64_t v40 = v39;
              void *v39 = "TypeDecoder.h:%u: Node kind %u %.*s - fewer children (%zu) than required (2)";
              uint64_t v196 = 0x12900000599LL;
              goto LABEL_535;
            }

            v210 = *(const char **)v10;
LABEL_720:
            uint64_t v277 = v9 + 1;
            if ((unsigned __int16)v542 == 1)
            {
LABEL_721:
              *((_WORD *)v6 + 8) = 1;
              *(_OWORD *)uint64_t v6 = v541;
              *((void *)&v541 + 1) = swift::TypeLookupError::nop;
              *(void *)&__int128 v541 = 0LL;
              ((void (*)(void, uint64_t, void))swift::TypeLookupError::nop)(0LL, 3LL, 0LL);
              return;
            }

            int v278 = *((unsigned __int8 *)v10 + 18);
            if (v278 == 2) {
              goto LABEL_726;
            }
            if (v278 == 5 && *((_DWORD *)v10 + 2) >= 2u)
            {
              unint64_t v10 = *(void (**)(uint64_t, int))v10;
LABEL_726:
              uint64_t v279 = *((void *)v10 + 1);
            }

            else
            {
              uint64_t v279 = 0LL;
            }

            if (LOWORD(v547[0]) == 1) {
              v305 = (uint64_t (*)())v546;
            }
            else {
              v305 = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
            }
            v306 = "unknown error";
            if (LOWORD(v547[0]) == 1) {
              v306 = (const char *)v545;
            }
            *((_WORD *)v6 + 8) = 1;
            *uint64_t v6 = (unint64_t)v306;
            v6[1] = (unint64_t)v305;
            goto LABEL_819;
          default:
            goto LABEL_534;
        }

      case 0x12A:
        int v26 = 0;
        uint16x8_t v27 = "";
        switch(*((_BYTE *)v10 + 18))
        {
          case 1:
          case 2:
            goto LABEL_545;
          case 3:
            int v26 = *((_DWORD *)v10 + 2);
            uint16x8_t v27 = *(const char **)v10;
            goto LABEL_765;
          case 5:
            if (*((_DWORD *)v10 + 2))
            {
LABEL_544:
              unint64_t v10 = *(void (**)(uint64_t, int))v10;
LABEL_545:
              else {
                unsigned int v7 = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
              }
              uint64_t v8 = "unknown error";
              *((_WORD *)v6 + 8) = 1;
              goto LABEL_3;
            }

            int v26 = 0;
LABEL_765:
            uint64_t v97 = operator new(0x28uLL);
            uint64_t v40 = v97;
            void *v97 = "TypeDecoder.h:%u: Node kind %u %.*s - %s";
            uint64_t v197 = 0x12A000005A7LL;
            break;
          default:
            goto LABEL_765;
        }

LABEL_766:
        v97[1] = v197;
        goto LABEL_767;
      case 0x12C:
        int v78 = 0;
        uint64_t v79 = *((unsigned __int8 *)v10 + 18);
        int v80 = "";
        switch(*((_BYTE *)v10 + 18))
        {
          case 1:
            goto LABEL_540;
          case 2:
            int v78 = 0;
            uint64_t v79 = 2LL;
            goto LABEL_540;
          case 3:
            int v78 = *((_DWORD *)v10 + 2);
            int v80 = *(const char **)v10;
            goto LABEL_539;
          case 5:
            uint64_t v79 = *((unsigned int *)v10 + 2);
            if (v79 < 3)
            {
              int v78 = 0;
LABEL_540:
              uint64_t v40 = operator new(0x28uLL);
              *(void *)uint64_t v40 = "TypeDecoder.h:%u: Node kind %u %.*s - fewer children (%zu) than required (3)";
              *((void *)v40 + 1) = 0x12C000005B3LL;
              v40[4] = v78;
              *((void *)v40 + 3) = v80;
              *((void *)v40 + 4) = v79;
              goto LABEL_537;
            }

            uint64_t v280 = *(void *)(*(void *)v10 + 8LL);
            int v281 = *(unsigned __int16 *)(v280 + 16);
            int v282 = *(unsigned __int8 *)(v280 + 18);
            if (v281 != 102 || v282 != 4)
            {
              if (v282 == 3)
              {
                int v284 = *(_DWORD *)(v280 + 8);
                v285 = *(const char **)v280;
              }

              else
              {
                int v284 = 0;
                v285 = "";
              }

              uint64_t v97 = operator new(0x28uLL);
              uint64_t v40 = v97;
              void *v97 = "TypeDecoder.h:%u: Node kind %u %.*s - %s";
              *((_DWORD *)v97 + 2) = 1466;
              *((_DWORD *)v97 + 3) = v281;
              *((_DWORD *)v97 + 4) = v284;
              int v100 = "unexpected kind or no index";
              v97[3] = v285;
              goto LABEL_768;
            }

            v328 = 0LL;
            v502 = **(unsigned int ****)v10;
            v505 = *(const char **)v280;
            uint64_t v542 = 0LL;
            __int128 v541 = 0uLL;
            if (*((_DWORD *)v10 + 2) >= 3u) {
              v328 = *(uint64_t **)(*(void *)v10 + 16LL);
            }
            unint64_t v329 = 0LL;
            v330 = 0LL;
            v331 = 0LL;
            v332 = 0LL;
            uint64_t v333 = v9 + 1;
            v508 = v328;
            break;
          default:
LABEL_539:
            uint64_t v79 = 0LL;
            goto LABEL_540;
        }

        while (1)
        {
          unint64_t v334 = *((unsigned __int8 *)v328 + 18);
          if ((_DWORD)v334 != 1)
          {
            if ((_DWORD)v334 == 5)
            {
              unint64_t v334 = *((unsigned int *)v328 + 2);
            }

            else
            {
              if ((_DWORD)v334 != 2) {
                goto LABEL_1094;
              }
              unint64_t v334 = 2LL;
            }
          }

          if (v334 <= v329)
          {
LABEL_1094:
            LODWORD(v545) = (unint64_t)(v331 - v330) >> 3;
            std::vector<unsigned int>::push_back[abi:nn180100]((uint64_t)&v541, &v545);
            uint64_t v452 = 0LL;
            uint64_t v453 = 0LL;
            v545 = 0LL;
            uint64_t v546 = 0LL;
            v547[0] = 0LL;
            uint64_t v454 = v541;
            if (*((void *)&v541 + 1) - (void)v541 != 4LL)
            {
              unint64_t v455 = 0LL;
              unsigned int v456 = 1;
              do
              {
                uint64_t v457 = *(unsigned int *)(v454 + 4 * v455);
                unint64_t v455 = v456;
                int v458 = *(_DWORD *)(v454 + 4LL * v456);
                *(void *)&__int128 v538 = &v330[8 * v457];
                LODWORD(v534) = v458 - v457;
                std::vector<__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>>::emplace_back<swift::MetadataOrPack*,unsigned int>( (uint64_t)&v545,  &v538,  (unsigned int *)&v534);
                uint64_t v454 = v541;
                ++v456;
              }

              while (((uint64_t)(*((void *)&v541 + 1) - v541) >> 2) - 1 > v455);
              uint64_t v453 = (uint64_t)v545;
              uint64_t v452 = v546;
            }

            if (v545)
            {
              uint64_t v546 = (uint64_t)v545;
              operator delete(v545);
            }

LABEL_1100:
            if ((void)v541)
            {
              *((void *)&v541 + 1) = v541;
              operator delete((void *)v541);
            }

            if (v330) {
              operator delete(v330);
            }
            return;
          }

          LODWORD(v545) = (unint64_t)(v331 - v330) >> 3;
          std::vector<unsigned int>::push_back[abi:nn180100]((uint64_t)&v541, &v545);
          unint64_t v335 = *((unsigned __int8 *)v328 + 18);
          unsigned int v336 = v335 - 1;
          if ((_DWORD)v335 != 1)
          {
            if ((_DWORD)v335 == 5)
            {
              unint64_t v335 = *((unsigned int *)v328 + 2);
            }

            else
            {
              if ((_DWORD)v335 != 2) {
                goto LABEL_848;
              }
              unint64_t v335 = 2LL;
            }
          }

          if (v335 <= v329)
          {
LABEL_848:
            v338 = 0LL;
            goto LABEL_849;
          }

          v337 = v328;
          if (v336 >= 2) {
            v337 = (uint64_t *)*v328;
          }
          v338 = (uint64_t *)v337[v329];
LABEL_849:
          if (*((_WORD *)v338 + 8) != 235) {
            goto LABEL_1094;
          }
          v339 = v338 + 2;
          int v340 = *((unsigned __int8 *)v338 + 18);
          v341 = v338;
          unint64_t v513 = v329;
          if ((v340 - 1) >= 2)
          {
            if (v340 == 5)
            {
              uint64_t v342 = *v338;
              v341 = (void *)*v338;
LABEL_858:
              v339 = (void *)(v342 + 8LL * *((unsigned int *)v338 + 2));
              goto LABEL_861;
            }

            v341 = 0LL;
          }

          switch(v340)
          {
            case 1:
              v339 = v338 + 1;
              break;
            case 2:
              break;
            case 5:
              uint64_t v342 = *v338;
              goto LABEL_858;
            default:
              v339 = 0LL;
              break;
          }

LABEL_861:
          if (v341 != v339)
          {
            v343 = v339;
            v517 = v339;
            while (1)
            {
              int v344 = *((unsigned __int16 *)v6 + 8);
              if (v6 && v344 == 1) {
                goto LABEL_1100;
              }
              unint64_t v345 = *((_WORD *)v6 + 8) ? 0LL : *v6;
              if (v331 >= v332) {
                break;
              }
              *(void *)v331 = v345;
              v331 += 8;
LABEL_892:
              if (v344 == 1) {
                ((void (*)(unint64_t, uint64_t, void))v6[1])(*v6, 3LL, 0LL);
              }
              if (++v341 == v343) {
                goto LABEL_832;
              }
            }

            uint64_t v346 = (v331 - v330) >> 3;
            unint64_t v347 = v346 + 1;
            if ((v332 - v330) >> 2 > v347) {
              unint64_t v347 = (v332 - v330) >> 2;
            }
            unint64_t v348 = 0x1FFFFFFFFFFFFFFFLL;
            unint64_t v523 = v348;
            if (v348)
            {
              if (v348 >> 61) {
                std::__throw_bad_array_new_length[abi:nn180100]();
              }
              v349 = v6;
              v350 = operator new(8 * v348);
            }

            else
            {
              v349 = v6;
              v350 = 0LL;
            }

            v351 = &v350[8 * v346];
            *(void *)v351 = v345;
            v352 = v351 + 8;
            if (v331 == v330)
            {
              v330 = &v350[8 * v346];
              v343 = v517;
              unint64_t v356 = v523;
            }

            else
            {
              unint64_t v353 = v331 - v330 - 8;
              if (v353 < 0x168
                || (unint64_t v354 = (v331 - 8 - v330) & 0xFFFFFFFFFFFFFFF8LL,
                    &v350[v331 - v330 - 8 - v354] > &v350[v331 - v330 - 8])
                || &v331[-v354 - 8] > v331 - 8
                || (unint64_t)(v330 - v350) < 0x20)
              {
                v355 = v331;
                v343 = v517;
                unint64_t v356 = v523;
                goto LABEL_886;
              }

              uint64_t v358 = (v353 >> 3) + 1;
              uint64_t v359 = 8 * (v358 & 0x3FFFFFFFFFFFFFFCLL);
              v355 = &v331[-v359];
              v351 -= v359;
              v360 = &v350[8 * v346 - 16];
              v361 = v331 - 16;
              uint64_t v362 = v358 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                __int128 v363 = *(_OWORD *)v361;
                *(v360 - 1) = *((_OWORD *)v361 - 1);
                _OWORD *v360 = v363;
                v360 -= 2;
                v361 -= 32;
                v362 -= 4LL;
              }

              while (v362);
              v343 = v517;
              unint64_t v356 = v523;
              if (v358 != (v358 & 0x3FFFFFFFFFFFFFFCLL))
              {
                do
                {
LABEL_886:
                  uint64_t v357 = *((void *)v355 - 1);
                  v355 -= 8;
                  *((void *)v351 - 1) = v357;
                  v351 -= 8;
                }

                while (v355 != v330);
              }

              v331 = v330;
              v330 = v351;
            }

            v332 = &v350[8 * v356];
            if (v331)
            {
              operator delete(v331);
              int v344 = *((unsigned __int16 *)v349 + 8);
            }

            v331 = v352;
            uint64_t v6 = v349;
            os_signpost_id_t v11 = a1;
            goto LABEL_892;
          }

LABEL_832:
          unint64_t v329 = v513 + 1;
          v328 = v508;
        }

      case 0x152:
        int v57 = *((unsigned __int8 *)v10 + 18);
        if (v57 == 2)
        {
          uint64_t v191 = *(void *)v10;
          *(void *)&__int128 v541 = &v542;
          *((void *)&v541 + 1) = 0x800000000LL;
        }

        else
        {
          if (v57 == 3)
          {
            int v58 = *((_DWORD *)v10 + 2);
            uint64_t v45 = *(const char **)v10;
            goto LABEL_458;
          }

          if (v57 != 5 || *((_DWORD *)v10 + 2) < 2u)
          {
            int v58 = 0;
            uint64_t v45 = "";
LABEL_458:
            uint64_t v97 = operator new(0x28uLL);
            uint64_t v40 = v97;
            void *v97 = "TypeDecoder.h:%u: Node kind %u %.*s - %s";
            v97[1] = 0x152000002F8LL;
            *((_DWORD *)v97 + 4) = v58;
            int v100 = "not enough children";
            goto LABEL_459;
          }

          uint64_t v191 = **(void **)v10;
          *(void *)&__int128 v541 = &v542;
          *((void *)&v541 + 1) = 0x800000000LL;
          if (*((_DWORD *)v10 + 2) < 2u)
          {
            uint64_t v263 = 0LL;
LABEL_684:
            if (LOBYTE(v547[0]))
            {
              *((_WORD *)v6 + 8) = 1;
              v265 = v545;
              v264 = (uint64_t (*)(const void *, uint64_t, void))v546;
              v6[1] = v546;
              *uint64_t v6 = v264(v265, 2LL, 0LL);
              v264(v265, 3LL, 0LL);
            }

            else
            {
            }

            v251 = (void *)v541;
            goto LABEL_1084;
          }

          unint64_t v10 = *(void (**)(uint64_t, int))v10;
        }

        uint64_t v263 = *((void *)v10 + 1);
        goto LABEL_684;
      default:
        if (*((_BYTE *)v10 + 18) == 3)
        {
          int v89 = *((_DWORD *)v10 + 2);
          uint64_t v45 = *(const char **)v10;
        }

        else
        {
          int v89 = 0;
          uint64_t v45 = "";
        }

        uint64_t v97 = operator new(0x28uLL);
        uint64_t v40 = v97;
        void *v97 = "TypeDecoder.h:%u: Node kind %u %.*s - %s";
        *((_DWORD *)v97 + 2) = 1499;
        *((_DWORD *)v97 + 3) = v12;
        *((_DWORD *)v97 + 4) = v89;
        int v100 = "unexpected kind";
        goto LABEL_459;
    }
  }

unint64_t anonymous namespace'::DecodedMetadataBuilder::createObjCClassType@<X0>( const char *a1@<X0>, uint64_t a2@<X8>)
{
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  Class Class = objc_getClass(a1);
  unint64_t result = swift_getObjCClassMetadata((unint64_t)Class);
  *(_WORD *)(a2 + 16) = 0;
  *(void *)a2 = result;
  if (!result)
  {
    *(void *)a2 = "unknown error";
    *(void *)(a2 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
    *(_WORD *)(a2 + 16) = 1;
  }

  return result;
}

uint64_t swift::Demangle::__runtime::TypeDecoder<anonymous namespace'::DecodedMetadataBuilder>::decodeMangledTypeDecl@<X0>( swift::Demangle::__runtime::Node *a1@<X1>, uint64_t result@<X0>, unsigned int a3@<W2>, void *a4@<X3>, void *a5@<X4>, uint64_t a6@<X8>)
{
  if (a3 > 0x400)
  {
LABEL_2:
    unsigned int v7 = "Mangled type is too complex";
    goto LABEL_3;
  }

  os_signpost_id_t v11 = (swift::Demangle::__runtime::Node ***)result;
  uint64_t v12 = a3 + 1;
  while (1)
  {
    int v13 = *((unsigned __int16 *)a1 + 8);
    if (v13 != 232) {
      break;
    }
    int v14 = *((unsigned __int8 *)a1 + 18);
    if ((v14 - 1) >= 2)
    {
      if (v14 != 5 || !*((_DWORD *)a1 + 2))
      {
        a1 = 0LL;
        goto LABEL_9;
      }

      a1 = *(swift::Demangle::__runtime::Node **)a1;
    }

    a1 = *(swift::Demangle::__runtime::Node **)a1;
LABEL_9:
    uint64_t v12 = (v12 + 1);
    if ((_DWORD)v12 == 1026) {
      goto LABEL_2;
    }
  }

  if (v13 == 233) {
    goto LABEL_15;
  }
  uint64_t v15 = 0LL;
  int v16 = 0;
  uint64_t v17 = *((unsigned __int8 *)a1 + 18);
  int32x4_t v18 = "";
  int v19 = a1;
  switch(*((_BYTE *)a1 + 18))
  {
    case 1:
      int v16 = 0;
      uint64_t v15 = 1LL;
      goto LABEL_23;
    case 2:
      goto LABEL_26;
    case 3:
      uint64_t v15 = 0LL;
      int v16 = *((_DWORD *)a1 + 2);
      int32x4_t v18 = *(const char **)a1;
      goto LABEL_23;
    case 5:
      uint64_t v15 = *((unsigned int *)a1 + 2);
      if (v15 <= 1)
      {
        int v16 = 0;
LABEL_23:
        unint64_t result = (uint64_t)operator new(0x28uLL);
        *(void *)unint64_t result = "TypeDecoder.h:%u: Node kind %u %.*s - Number of node children (%zu) less than required (2)";
        *(_DWORD *)(result + 8) = 1667;
        *(_DWORD *)(result + 12) = v13;
        *(_DWORD *)(result + 16) = v16;
        *(void *)(result + 24) = v18;
        *(void *)(result + 32) = v15;
        goto LABEL_24;
      }

      int v19 = *(swift::Demangle::__runtime::Node **)a1;
LABEL_26:
      int v20 = *(const char **)v19;
      int v21 = *(unsigned __int16 *)(*(void *)v19 + 16LL);
      if (v21 == 153) {
        goto LABEL_15;
      }
      if (v21 != 71) {
        goto LABEL_41;
      }
      int v22 = *((unsigned __int8 *)v20 + 18);
      if (v22 == 2) {
        goto LABEL_40;
      }
      if (v22 == 3)
      {
        int v23 = *((_DWORD *)v20 + 2);
        int v24 = *(const char **)v20;
        goto LABEL_34;
      }

      if (v22 != 5 || *((_DWORD *)v20 + 2) < 2u)
      {
        int v23 = 0;
        int v24 = "";
LABEL_34:
        if ((_DWORD)v17 != 2)
        {
          if ((_DWORD)v17 == 5) {
            uint64_t v17 = *((unsigned int *)a1 + 2);
          }
          else {
            uint64_t v17 = 0LL;
          }
        }

        unint64_t result = (uint64_t)operator new(0x28uLL);
        *(void *)unint64_t result = "TypeDecoder.h:%u: Node kind %u %.*s - Number of parentContext children (%zu) less than required (2)";
        *(void *)(result + 8) = 0x4700000696LL;
        *(_DWORD *)(result + 16) = v23;
        *(void *)(result + 24) = v24;
        *(void *)(result + 32) = v17;
LABEL_24:
        *(void *)a6 = result;
        *(void *)(a6 + 8) = swift::TypeLookupError::TypeLookupError<swift::TypeLookupError swift::TypeLookupErrorImpl<int,unsigned int,int,char const*,unsigned long>(char const*,int,unsigned int,int,char const*,unsigned long)::{lambda(void)#1}>(swift::TypeLookupError swift::TypeLookupErrorImpl<int,unsigned int,int,char const*,unsigned long>(char const*,int,unsigned int,int,char const*,unsigned long)::{lambda(void)#1} const&)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
        goto LABEL_4;
      }

      int v20 = *(const char **)v20;
LABEL_40:
      int v20 = (const char *)*((void *)v20 + 1);
LABEL_41:
      int v25 = v27;
      if (v27)
      {
        *a5 = 0LL;
        if (v25 == 1) {
          ((void (*)(void, uint64_t, void))v26[1])(v26[0], 3LL, 0LL);
        }
      }

      else
      {
        *a5 = v26[0];
      }

      unint64_t result = swift::Demangle::__runtime::getUnspecialized((uint64_t)a1, **v11, (uint64_t)v26);
      if (LODWORD(v26[0]))
      {
        unsigned int v7 = "Failed to unspecialize type";
      }

      else
      {
        a1 = v28;
LABEL_15:
        unint64_t result = (uint64_t)_findContextDescriptor(a1, **v11);
        *a4 = result;
        if (result)
        {
          *(_BYTE *)a6 = 0;
          *(_BYTE *)(a6 + 16) = 0;
          return result;
        }

        unsigned int v7 = "Failed to create type decl";
      }

void *swift::Demangle::__runtime::TypeDecoder<anonymous namespace'::DecodedMetadataBuilder>::decodeGenericArgs@<X0>( void *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unsigned int v7 = (const char *)(a2 + 16);
  int v6 = *(unsigned __int16 *)(a2 + 16);
  if (v6 != 235)
  {
    if (*(_BYTE *)(a2 + 18) == 3)
    {
      int v14 = *(_DWORD *)(a2 + 8);
      uint64_t v15 = *(const char **)a2;
    }

    else
    {
      int v14 = 0;
      uint64_t v15 = "";
    }

    unint64_t result = operator new(0x28uLL);
    *unint64_t result = "TypeDecoder.h:%u: Node kind %u %.*s - %s";
    *((_DWORD *)result + 2) = 1636;
    *((_DWORD *)result + 3) = v6;
    *((_DWORD *)result + 4) = v14;
    result[3] = v15;
    result[4] = "is not TypeList";
    char v16 = 1;
    *(void *)a5 = result;
    *(void *)(a5 + 8) = swift::TypeLookupError::TypeLookupError<swift::TypeLookupError swift::TypeLookupErrorImpl<int,unsigned int,int,char const*,char const*>(char const*,int,unsigned int,int,char const*,char const*)::{lambda(void)#1}>(swift::TypeLookupError swift::TypeLookupErrorImpl<int,unsigned int,int,char const*,char const*>(char const*,int,unsigned int,int,char const*,char const*)::{lambda(void)#1} const&)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
    goto LABEL_32;
  }

  unint64_t v10 = result;
  int v11 = *(unsigned __int8 *)(a2 + 18);
  uint64_t v12 = (const char *)a2;
  if ((v11 - 1) >= 2)
  {
    if (v11 == 5)
    {
      int v13 = *(const char **)a2;
      uint64_t v12 = *(const char **)a2;
      goto LABEL_14;
    }

    uint64_t v12 = 0LL;
  }

  switch(v11)
  {
    case 1:
      unsigned int v7 = (const char *)(a2 + 8);
      goto LABEL_31;
    case 2:
      goto LABEL_19;
    case 5:
      int v13 = *(const char **)a2;
LABEL_14:
      unsigned int v7 = &v13[8 * *(unsigned int *)(a2 + 8)];
      if (v12 != v7) {
        goto LABEL_19;
      }
      goto LABEL_31;
  }

  unsigned int v7 = 0LL;
  if (!v12)
  {
LABEL_31:
    char v16 = 0;
    *(_BYTE *)a5 = 0;
LABEL_32:
    *(_BYTE *)(a5 + 16) = v16;
    return result;
  }

  while (1)
  {
LABEL_19:
    int v17 = v24;
    if (v24 == 1)
    {
      uint64_t v18 = v22;
      int v19 = v23;
      *(void *)(a5 + 8) = v23;
      unint64_t result = (void *)v19(v18, 2LL, 0LL);
      *(void *)a5 = result;
      *(_BYTE *)(a5 + 16) = 1;
    }

    else
    {
      if (v24) {
        uint64_t v20 = 0LL;
      }
      else {
        uint64_t v20 = v22;
      }
      unint64_t v21 = *(unsigned int *)(a4 + 8);
      if (v21 >= *(unsigned int *)(a4 + 12))
      {
        unint64_t result = __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod( a4,  (const void *)(a4 + 16),  v21 + 1,  8LL);
        unint64_t v21 = *(unsigned int *)(a4 + 8);
      }

      *(void *)(*(void *)a4 + 8 * v21) = v20;
      ++*(_DWORD *)(a4 + 8);
    }

    if (v24 == 1) {
      unint64_t result = (void *)v23(v22, 3LL, 0LL);
    }
    if (v17 == 1) {
      return result;
    }
    v12 += 8;
    if (v12 == v7) {
      goto LABEL_31;
    }
  }

void anonymous namespace'::DecodedMetadataBuilder::createBoundGenericType( uint64_t *a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  if ((*(_DWORD *)a2 & 0x10) != 0)
  {
    if ((a5 & 1) != 0)
    {
      *(_WORD *)(a6 + 16) = 1;
      *(void *)(a6 + 8) = _ZZN5swift15TypeLookupErrorC1IZNS_L19TypeLookupErrorImplIJEEES0_PKcDpT_EUlvE_EERKT_ENUlPvNS0_7CommandESB_E_8__invokeESB_SC_SB_;
      int v11 = operator new(8uLL);
      *int v11 = "Tried to build a bound generic type where the parent type is a pack";
      *(void *)a6 = v11;
    }

    else
    {
      v24[0] = v25;
      v24[1] = (void *)0x800000000LL;
      unint64_t v21 = v23;
      uint64_t v22 = 0x800000000LL;
      _gatherGenericParameters((unsigned int *)a2, a3, a4, a5, (uint64_t)v24, (uint64_t)&v21, *a1, (uint64_t)&v18);
      if (v20)
      {
        *(_WORD *)(a6 + 16) = 1;
        uint64_t v9 = v18;
        unint64_t v10 = v19;
        *(void *)(a6 + 8) = v19;
        *(void *)a6 = v10(v9, 2LL, 0LL);
        v10(v9, 3LL, 0LL);
      }

      else
      {
        uint64_t v14 = *(int *)(a2 + 12);
        uint64_t v13 = a2 + 12;
        uint64_t v12 = v14;
        if (!(_DWORD)v14) {
          goto LABEL_17;
        }
        uint64_t v15 = (uint64_t (*)(uint64_t, void, void))(v12 + v13);
        if (!(v12 + v13)) {
          goto LABEL_17;
        }
        char v16 = v21;
        switch((int)v22)
        {
          case 1:
            char v16 = *(void **)v21;
            goto LABEL_12;
          case 2:
            uint64_t v17 = v15(255LL, *(void *)v21, *((void *)v21 + 1));
            break;
          case 3:
            uint64_t v17 = ((uint64_t (*)(uint64_t, void, void, void))v15)( 255LL,  *(void *)v21,  *((void *)v21 + 1),  *((void *)v21 + 2));
            break;
          default:
LABEL_12:
            uint64_t v17 = ((uint64_t (*)(uint64_t, void *))v15)(255LL, v16);
            break;
        }

        *(_WORD *)(a6 + 16) = 0;
        *(void *)a6 = v17;
        if (!v17)
        {
LABEL_17:
          *(void *)a6 = "unknown error";
          *(void *)(a6 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
          *(_WORD *)(a6 + 16) = 1;
        }
      }

      if (v21 != v23) {
        free(v21);
      }
      if (v24[0] != v25) {
        free(v24[0]);
      }
    }
  }

  else if ((*(_DWORD *)a2 & 0x1F) != 3 {
         || (SimpleProtocolTypeMetadata = swift::_getSimpleProtocolTypeMetadata((_DWORD *)a2),
  }
             *(_WORD *)(a6 + 16) = 0,
             (*(void *)a6 = SimpleProtocolTypeMetadata) == 0LL))
  {
    *(void *)a6 = "unknown error";
    *(void *)(a6 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
    *(_WORD *)(a6 + 16) = 1;
  }

uint64_t anonymous namespace'::DecodedMetadataBuilder::createBuiltinType@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  switch(a2)
  {
    case 2LL:
      switch(*(_WORD *)result)
      {
        case 0x7742:
          *(_WORD *)(a3 + 16) = 0;
          uint64_t v3 = &type metadata for Builtin.Word;
          break;
        case 0x6F42:
          *(_WORD *)(a3 + 16) = 0;
          uint64_t v3 = &type metadata for Builtin.NativeObject;
          break;
        case 0x6242:
          *(_WORD *)(a3 + 16) = 0;
          uint64_t v3 = &type metadata for Builtin.BridgeObject;
          break;
        case 0x7042:
          *(_WORD *)(a3 + 16) = 0;
          uint64_t v3 = &type metadata for Builtin.RawPointer;
          break;
        case 0x4242:
          *(_WORD *)(a3 + 16) = 0;
          uint64_t v3 = &type metadata for Builtin.UnsafeValueBuffer;
          break;
        case 0x4F42:
          *(_WORD *)(a3 + 16) = 0;
          uint64_t v3 = (uint64_t (***)())&type metadata for Builtin.UnknownObject;
          break;
        case 0x6342:
          *(_WORD *)(a3 + 16) = 0;
          uint64_t v3 = &type metadata for Builtin.RawUnsafeContinuation;
          break;
        case 0x4442:
          *(_WORD *)(a3 + 16) = 0;
          uint64_t v3 = &type metadata for Builtin.DefaultActorStorage;
          break;
        case 0x6442:
          *(_WORD *)(a3 + 16) = 0;
          uint64_t v3 = &type metadata for Builtin.NonDefaultDistributedActorStorage;
          break;
        case 0x6542:
          *(_WORD *)(a3 + 16) = 0;
          uint64_t v3 = &type metadata for Builtin.Executor;
          break;
        case 0x6A42:
          *(_WORD *)(a3 + 16) = 0;
          uint64_t v3 = &type metadata for Builtin.Job;
          break;
        default:
          goto LABEL_74;
      }

      goto LABEL_293;
    case 4LL:
      switch(*(_DWORD *)result)
      {
        case 0x5F316942:
          *(_WORD *)(a3 + 16) = 0;
          uint64_t v3 = &type metadata for Builtin.Int1;
          break;
        case 0x5F376942:
          *(_WORD *)(a3 + 16) = 0;
          uint64_t v3 = &type metadata for Builtin.Int7;
          break;
        case 0x5F386942:
          *(_WORD *)(a3 + 16) = 0;
          uint64_t v3 = (uint64_t (***)())&type metadata for Builtin.Int8;
          break;
        default:
          goto LABEL_74;
      }

      goto LABEL_293;
    case 5LL:
      if (*(_DWORD *)result == 909207874 && *(_BYTE *)(result + 4) == 95)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = (uint64_t (***)())&type metadata for Builtin.Int16;
        goto LABEL_293;
      }

      if (*(_DWORD *)result == 842230082 && *(_BYTE *)(result + 4) == 95)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = (uint64_t (***)())&type metadata for Builtin.Int32;
        goto LABEL_293;
      }

      if (*(_DWORD *)result == 859203906 && *(_BYTE *)(result + 4) == 95)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Int63;
        goto LABEL_293;
      }

      if (*(_DWORD *)result == 875981122 && *(_BYTE *)(result + 4) == 95)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = (uint64_t (***)())&type metadata for Builtin.Int64;
        goto LABEL_293;
      }

      if (*(_DWORD *)result == 909207106 && *(_BYTE *)(result + 4) == 95)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.FPIEEE16;
        goto LABEL_293;
      }

      if (*(_DWORD *)result == 842229314 && *(_BYTE *)(result + 4) == 95)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.FPIEEE32;
        goto LABEL_293;
      }

      if (*(_DWORD *)result == 875980354 && *(_BYTE *)(result + 4) == 95)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.FPIEEE64;
        goto LABEL_293;
      }

      if (*(_DWORD *)result == 809002562 && *(_BYTE *)(result + 4) == 95)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.FPIEEE80;
        goto LABEL_293;
      }

      goto LABEL_74;
    case 6LL:
      if (*(_DWORD *)result == 842099010 && *(_WORD *)(result + 4) == 24376)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = (uint64_t (***)())&type metadata for Builtin.Int128;
        goto LABEL_293;
      }

      if (*(_DWORD *)result == 892496194 && *(_WORD *)(result + 4) == 24374)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = (uint64_t (***)())&type metadata for Builtin.Int256;
        goto LABEL_293;
      }

      if (*(_DWORD *)result == 825583938 && *(_WORD *)(result + 4) == 24370)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = (uint64_t (***)())&type metadata for Builtin.Int512;
        goto LABEL_293;
      }

      if (*(_DWORD *)result == 842098242 && *(_WORD *)(result + 4) == 24376)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.FPIEEE128;
        goto LABEL_293;
      }

      goto LABEL_74;
    case 8LL:
      switch(*(void *)result)
      {
        case 0x5F3276425F386942LL:
          *(_WORD *)(a3 + 16) = 0;
          uint64_t v3 = &type metadata for Builtin.Vec2xInt8;
          break;
        case 0x5F3376425F386942LL:
          *(_WORD *)(a3 + 16) = 0;
          uint64_t v3 = &type metadata for Builtin.Vec3xInt8;
          break;
        case 0x5F3476425F386942LL:
          *(_WORD *)(a3 + 16) = 0;
          uint64_t v3 = &type metadata for Builtin.Vec4xInt8;
          break;
        case 0x5F3876425F386942LL:
          *(_WORD *)(a3 + 16) = 0;
          uint64_t v3 = &type metadata for Builtin.Vec8xInt8;
          break;
        default:
          goto LABEL_74;
      }

      goto LABEL_293;
    case 9LL:
      if (*(void *)result == 0x363176425F386942LL && *(_BYTE *)(result + 8) == 95)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Vec16xInt8;
        goto LABEL_293;
      }

      if (*(void *)result == 0x323376425F386942LL && *(_BYTE *)(result + 8) == 95)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Vec32xInt8;
        goto LABEL_293;
      }

      if (*(void *)result == 0x343676425F386942LL && *(_BYTE *)(result + 8) == 95)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Vec64xInt8;
        goto LABEL_293;
      }

      if (*(void *)result == 0x3276425F36316942LL && *(_BYTE *)(result + 8) == 95)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Vec2xInt16;
        goto LABEL_293;
      }

      if (*(void *)result == 0x3376425F36316942LL && *(_BYTE *)(result + 8) == 95)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Vec3xInt16;
        goto LABEL_293;
      }

      if (*(void *)result == 0x3476425F36316942LL && *(_BYTE *)(result + 8) == 95)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Vec4xInt16;
        goto LABEL_293;
      }

      if (*(void *)result == 0x3876425F36316942LL && *(_BYTE *)(result + 8) == 95)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Vec8xInt16;
        goto LABEL_293;
      }

      if (*(void *)result == 0x3276425F32336942LL && *(_BYTE *)(result + 8) == 95)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Vec2xInt32;
        goto LABEL_293;
      }

      if (*(void *)result == 0x3376425F32336942LL && *(_BYTE *)(result + 8) == 95)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Vec3xInt32;
        goto LABEL_293;
      }

      if (*(void *)result == 0x3476425F32336942LL && *(_BYTE *)(result + 8) == 95)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Vec4xInt32;
        goto LABEL_293;
      }

      if (*(void *)result == 0x3876425F32336942LL && *(_BYTE *)(result + 8) == 95)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Vec8xInt32;
        goto LABEL_293;
      }

      if (*(void *)result == 0x3276425F34366942LL && *(_BYTE *)(result + 8) == 95)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Vec2xInt64;
        goto LABEL_293;
      }

      if (*(void *)result == 0x3376425F34366942LL && *(_BYTE *)(result + 8) == 95)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Vec3xInt64;
        goto LABEL_293;
      }

      if (*(void *)result == 0x3476425F34366942LL && *(_BYTE *)(result + 8) == 95)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Vec4xInt64;
        goto LABEL_293;
      }

      if (*(void *)result == 0x3876425F34366942LL && *(_BYTE *)(result + 8) == 95)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Vec8xInt64;
        goto LABEL_293;
      }

      if (*(void *)result == 0x3276425F32336642LL && *(_BYTE *)(result + 8) == 95)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Vec2xFPIEEE32;
        goto LABEL_293;
      }

      if (*(void *)result == 0x3376425F32336642LL && *(_BYTE *)(result + 8) == 95)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Vec3xFPIEEE32;
        goto LABEL_293;
      }

      if (*(void *)result == 0x3476425F32336642LL && *(_BYTE *)(result + 8) == 95)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Vec4xFPIEEE32;
        goto LABEL_293;
      }

      if (*(void *)result == 0x3876425F32336642LL && *(_BYTE *)(result + 8) == 95)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Vec8xFPIEEE32;
        goto LABEL_293;
      }

      if (*(void *)result == 0x3276425F34366642LL && *(_BYTE *)(result + 8) == 95)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Vec2xFPIEEE64;
        goto LABEL_293;
      }

      if (*(void *)result == 0x3376425F34366642LL && *(_BYTE *)(result + 8) == 95)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Vec3xFPIEEE64;
        goto LABEL_293;
      }

      if (*(void *)result == 0x3476425F34366642LL && *(_BYTE *)(result + 8) == 95)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Vec4xFPIEEE64;
        goto LABEL_293;
      }

      if (*(void *)result == 0x3876425F34366642LL && *(_BYTE *)(result + 8) == 95)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Vec8xFPIEEE64;
        goto LABEL_293;
      }

      goto LABEL_74;
    case 10LL:
      if (*(void *)result == 0x3176425F36316942LL && *(_WORD *)(result + 8) == 24374)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Vec16xInt16;
      }

      else if (*(void *)result == 0x3376425F36316942LL && *(_WORD *)(result + 8) == 24370)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Vec32xInt16;
      }

      else if (*(void *)result == 0x3676425F36316942LL && *(_WORD *)(result + 8) == 24372)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Vec64xInt16;
      }

      else if (*(void *)result == 0x3176425F32336942LL && *(_WORD *)(result + 8) == 24374)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Vec16xInt32;
      }

      else if (*(void *)result == 0x3376425F32336942LL && *(_WORD *)(result + 8) == 24370)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Vec32xInt32;
      }

      else if (*(void *)result == 0x3676425F32336942LL && *(_WORD *)(result + 8) == 24372)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Vec64xInt32;
      }

      else if (*(void *)result == 0x3176425F34366942LL && *(_WORD *)(result + 8) == 24374)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Vec16xInt64;
      }

      else if (*(void *)result == 0x3376425F34366942LL && *(_WORD *)(result + 8) == 24370)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Vec32xInt64;
      }

      else if (*(void *)result == 0x3676425F34366942LL && *(_WORD *)(result + 8) == 24372)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Vec64xInt64;
      }

      else if (*(void *)result == 0x3176425F32336642LL && *(_WORD *)(result + 8) == 24374)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Vec16xFPIEEE32;
      }

      else if (*(void *)result == 0x3376425F32336642LL && *(_WORD *)(result + 8) == 24370)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Vec32xFPIEEE32;
      }

      else if (*(void *)result == 0x3676425F32336642LL && *(_WORD *)(result + 8) == 24372)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Vec64xFPIEEE32;
      }

      else if (*(void *)result == 0x3176425F34366642LL && *(_WORD *)(result + 8) == 24374)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Vec16xFPIEEE64;
      }

      else if (*(void *)result == 0x3376425F34366642LL && *(_WORD *)(result + 8) == 24370)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Vec32xFPIEEE64;
      }

      else
      {
        if (*(void *)result != 0x3676425F34366642LL || *(_WORD *)(result + 8) != 24372)
        {
LABEL_74:
          *(void *)a3 = "unknown error";
          *(void *)(a3 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
          *(_WORD *)(a3 + 16) = 1;
          return result;
        }

        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Vec64xFPIEEE64;
      }

LABEL_293:
      *(void *)a3 = v3 + 1;
      return result;
    default:
      goto LABEL_74;
  }

void *anonymous namespace'::DecodedMetadataBuilder::createMetatypeType@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (!a1 || (a1 & 1) != 0)
  {
    *(_WORD *)(a2 + 16) = 1;
    *(void *)(a2 + 8) = _ZZN5swift15TypeLookupErrorC1IZNS_L19TypeLookupErrorImplIJEEES0_PKcDpT_EUlvE_EERKT_ENUlPvNS0_7CommandESB_E_8__invokeESB_SC_SB_;
    unint64_t result = operator new(8uLL);
    *unint64_t result = "Tried to build a metatype from a pack";
    *(void *)a2 = result;
  }

  else
  {
    unint64_t result = (void *)swift_getMetatypeMetadata(a1);
    *(_WORD *)(a2 + 16) = 0;
    *(void *)a2 = result;
    if (!result)
    {
      *(void *)a2 = "unknown error";
      *(void *)(a2 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
      *(_WORD *)(a2 + 16) = 1;
    }
  }

  return result;
}

void *anonymous namespace'::DecodedMetadataBuilder::createExistentialMetatypeType@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  if (!a1 || (a1 & 1) != 0)
  {
    *(_WORD *)(a2 + 16) = 1;
    *(void *)(a2 + 8) = _ZZN5swift15TypeLookupErrorC1IZNS_L19TypeLookupErrorImplIJEEES0_PKcDpT_EUlvE_EERKT_ENUlPvNS0_7CommandESB_E_8__invokeESB_SC_SB_;
    unint64_t result = operator new(8uLL);
    uint64_t v5 = "Tried to build an existential metatype from a pack";
LABEL_11:
    *unint64_t result = v5;
    *(void *)a2 = result;
    return result;
  }

  uint64_t v3 = *a1;
  if ((_DWORD)v3 != 771 && (_DWORD)v3 != 774)
  {
    *(_WORD *)(a2 + 16) = 1;
    *(void *)(a2 + 8) = _ZZN5swift15TypeLookupErrorC1IZNS_L19TypeLookupErrorImplIJEEES0_PKcDpT_EUlvE_EERKT_ENUlPvNS0_7CommandESB_E_8__invokeESB_SC_SB_;
    unint64_t result = operator new(8uLL);
    uint64_t v5 = "Tried to build an existential metatype from a type that was neither an existential nor an existential metatype";
    goto LABEL_11;
  }

  unint64_t result = (void *)swift_getExistentialMetatypeMetadata(a1);
  *(_WORD *)(a2 + 16) = 0;
  *(void *)a2 = result;
  if (!result)
  {
    *(void *)a2 = "unknown error";
    *(void *)(a2 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
    *(_WORD *)(a2 + 16) = 1;
  }

  return result;
}

void anonymous namespace'::DecodedMetadataBuilder::createSymbolicExtendedExistentialType( uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v7 = *(unsigned __int16 *)(a1 + 16);
  if (v7 == 337)
  {
    ExtendedExistentialTypeShape = (int *)swift_getExtendedExistentialTypeShape(*(int **)a1);
  }

  else
  {
    if (v7 != 336)
    {
      *(_WORD *)(a4 + 16) = 1;
      *(void *)(a4 + 8) = _ZZN5swift15TypeLookupErrorC1IZNS_L19TypeLookupErrorImplIJEEES0_PKcDpT_EUlvE_EERKT_ENUlPvNS0_7CommandESB_E_8__invokeESB_SC_SB_;
      char v16 = operator new(8uLL);
      uint64_t v17 = "Tried to build an extended existential metatype from an unexpected shape node";
LABEL_19:
      *char v16 = v17;
      *(void *)a4 = v16;
      return;
    }

    ExtendedExistentialTypeShape = *(int **)a1;
  }

  swift::TargetExtendedExistentialTypeShape<swift::InProcess>::getGeneralizationSignature( (unsigned int *)ExtendedExistentialTypeShape,  (uint64_t)v40);
  if (a3 != v40[0])
  {
    *(_WORD *)(a4 + 16) = 1;
    *(void *)(a4 + 8) = _ZZN5swift15TypeLookupErrorC1IZNS_L19TypeLookupErrorImplIJEEES0_PKcDpT_EUlvE_EERKT_ENUlPvNS0_7CommandESB_E_8__invokeESB_SC_SB_;
    char v16 = operator new(8uLL);
    uint64_t v17 = "Length mismatch building an extended existential metatype";
    goto LABEL_19;
  }

  uint64_t v37 = v39;
  uint64_t v38 = 0x800000000LL;
  if (a3)
  {
    unsigned int v11 = 0;
    uint64_t v12 = 8 * a3;
    uint64_t v13 = a2;
    do
    {
      uint64_t v14 = *v13;
      if (*v13) {
        BOOL v15 = (*v13 & 1) == 0;
      }
      else {
        BOOL v15 = 0;
      }
      if (!v15) {
        swift::fatalError(0LL, "Expected metadata but got a metadata pack\n", v9, v10);
      }
      if (v11 >= HIDWORD(v38))
      {
        __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v39, v11 + 1LL, 8LL);
        unsigned int v11 = v38;
      }

      *((void *)v37 + v11) = v14;
      unsigned int v11 = v38 + 1;
      LODWORD(v38) = v38 + 1;
      ++v13;
      v12 -= 8LL;
    }

    while (v12);
    uint64_t v18 = (const char *)v40[0];
  }

  else
  {
    uint64_t v18 = 0LL;
  }

  v32[0] = off_189B8D9E0;
  v32[1] = a2;
  v32[2] = a3;
  uint8x8_t v33 = v32;
  v30[0] = &unk_189B8DA28;
  v30[1] = a2;
  v30[2] = a3;
  size_t v31 = v30;
  v28[0] = &unk_189B8DA70;
  int32x4_t v29 = v28;
  swift::_checkGenericRequirements(v41, v18, v42, v40[1], (uint64_t)&v37, v32, (uint64_t)v30, v28, (uint64_t)&v34);
  int v19 = v29;
  if (v29 == v28)
  {
    uint64_t v20 = 4LL;
    int v19 = v28;
  }

  else
  {
    if (!v29) {
      goto LABEL_26;
    }
    uint64_t v20 = 5LL;
  }

  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_26:
  unint64_t v21 = v31;
  if (v31 == v30)
  {
    uint64_t v22 = 4LL;
    unint64_t v21 = v30;
  }

  else
  {
    if (!v31) {
      goto LABEL_31;
    }
    uint64_t v22 = 5LL;
  }

  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_31:
  int v23 = v33;
  if (v33 == v32)
  {
    uint64_t v24 = 4LL;
    int v23 = v32;
    goto LABEL_35;
  }

  if (v33)
  {
    uint64_t v24 = 5LL;
LABEL_35:
    (*(void (**)(void))(*v23 + 8 * v24))();
  }

  if (v36)
  {
    *(_WORD *)(a4 + 16) = 1;
    uint64_t v25 = v34;
    int v26 = v35;
    *(void *)(a4 + 8) = v35;
    *(void *)a4 = v26(v25, 2LL, 0LL);
  }

  else
  {
    unint64_t ExtendedExistentialTypeMetadata_unique = swift_getExtendedExistentialTypeMetadata_unique( (unsigned int *)ExtendedExistentialTypeShape,  (uint64_t)v37);
    *(_WORD *)(a4 + 16) = 0;
    *(void *)a4 = ExtendedExistentialTypeMetadata_unique;
    if (!ExtendedExistentialTypeMetadata_unique)
    {
      *(void *)a4 = "unknown error";
      *(void *)(a4 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
      *(_WORD *)(a4 + 16) = 1;
    }
  }

  if (v36) {
    v35(v34, 3LL, 0LL);
  }
  if (v37 != v39) {
    free(v37);
  }
}

uint64_t swift::Demangle::__runtime::TypeDecoder<anonymous namespace'::DecodedMetadataBuilder>::decodeMangledProtocolType( swift::Demangle::__runtime::Node ***a1, int **a2, swift::Demangle::__runtime::NodeFactory *a3)
{
  int v6 = (_DWORD)a3 - 1025;
  while (1)
  {
    int v8 = *((unsigned __int16 *)a2 + 8);
    int v9 = *((unsigned __int8 *)a2 + 18);
    if (v8 != 232) {
      break;
    }
    if (v9 == 5 && *((_DWORD *)a2 + 2))
    {
      a2 = (int **)*a2;
LABEL_7:
      a2 = (int **)*a2;
      BOOL v7 = __CFADD__(v6++, 1);
      if (v7) {
        return 0LL;
      }
    }

    else
    {
      a2 = 0LL;
      BOOL v7 = __CFADD__(v6++, 1);
      if (v7) {
        return 0LL;
      }
    }
  }

  if (v9 != 2)
  {
    if (v9 != 5 || ((unsigned int v10 = *((_DWORD *)a2 + 2), v8 == 180) ? (v11 = v10 > 1) : (v11 = 0), !v11))
    {
      if (v8 == 181) {
        goto LABEL_25;
      }
LABEL_24:
      if (v8 != 347) {
        return 0LL;
      }
LABEL_25:
      uint64_t v13 = *a1;
      if (v8 == 347)
      {
        uint64_t v14 = *(void *)((char *)*a2 + **a2);
        if (v14) {
          return v14 | 1;
        }
      }

void *anonymous namespace'::DecodedMetadataBuilder::createProtocolCompositionType@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  int v7 = 0;
  if ((a4 & 1) != 0 || a3)
  {
LABEL_9:
    if ((a3 & 1) != 0)
    {
      *(_WORD *)(a5 + 16) = 1;
      *(void *)(a5 + 8) = _ZZN5swift15TypeLookupErrorC1IZNS_L19TypeLookupErrorImplIJEEES0_PKcDpT_EUlvE_EERKT_ENUlPvNS0_7CommandESB_E_8__invokeESB_SC_SB_;
      unint64_t result = operator new(8uLL);
      *unint64_t result = "Tried to build a protocol composition where the superclass type is a pack";
      *(void *)a5 = result;
      return result;
    }
  }

  else if (a2)
  {
    uint64_t v8 = 8 * a2;
    int v9 = a1;
    while ((*v9 & 1) == 0 && (*(_BYTE *)((*v9 & 0xFFFFFFFFFFFFFFFELL) + 2) & 1) != 0)
    {
      ++v9;
      v8 -= 8LL;
      if (!v8)
      {
        int v7 = 1;
        goto LABEL_9;
      }
    }

    int v7 = 0;
  }

  else
  {
    int v7 = 1;
  }

  unint64_t result = swift_getExistentialTypeMetadata(v7, a3, a2, a1);
  *(_WORD *)(a5 + 16) = 0;
  *(void *)a5 = result;
  if (!result)
  {
    *(void *)a5 = "unknown error";
    *(void *)(a5 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
    *(_WORD *)(a5 + 16) = 1;
  }

  return result;
}

uint64_t **swift::Demangle::__runtime::decodeRequirement<swift::MetadataOrPack,anonymous namespace'::DecodedMetadataBuilder::BuiltRequirement,anonymous namespace'::DecodedMetadataBuilder::BuiltInverseRequirement,anonymous namespace'::DecodedMetadataBuilder::BuiltLayoutConstraint,anonymous namespace'::DecodedMetadataBuilder>( uint64_t **result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v7 = *((unsigned __int8 *)result + 18);
  uint64_t v8 = result;
  if ((v7 - 1) >= 2)
  {
    if (v7 == 5)
    {
      int v9 = *result;
      uint64_t v8 = (uint64_t **)*result;
      goto LABEL_9;
    }

    uint64_t v8 = 0LL;
  }

  switch(v7)
  {
    case 1:
      unsigned int v10 = result + 1;
      if (v8 != result + 1) {
        goto LABEL_21;
      }
      break;
    case 2:
      unsigned int v10 = result + 2;
      if (v8 != result + 2) {
        goto LABEL_21;
      }
      break;
    case 5:
      int v9 = *result;
LABEL_9:
      unsigned int v10 = (uint64_t **)&v9[*((unsigned int *)result + 2)];
      if (v8 == v10) {
        return result;
      }
      while (1)
      {
LABEL_21:
        uint64_t v14 = *v8;
        int v15 = *((unsigned __int16 *)*v8 + 8);
        if (v15 == 37 || v15 == 42) {
          goto LABEL_20;
        }
        int v16 = *((unsigned __int8 *)v14 + 18);
        if (v16 != 2)
        {
          if (v16 != 5 || *((_DWORD *)v14 + 2) != 2) {
            return result;
          }
          uint64_t v14 = (uint64_t *)*v14;
        }

        int v17 = (uint64_t *)*v14;
        uint64_t v47 = a4;
        int v18 = (unsigned __int16)v46;
        if ((_WORD)v46)
        {
LABEL_85:
          if (v18 == 1) {
            return (uint64_t **)v45(v44, 3LL, 0LL);
          }
          return result;
        }

        BOOL v19 = v44;
        if (!v44) {
          return result;
        }
        uint64_t v20 = *v8;
        int v21 = *((unsigned __int16 *)*v8 + 8);
        if (v21 == 354)
        {
          int v24 = *((unsigned __int8 *)v20 + 18);
          uint64_t v25 = *v8;
          if (v24 == 5 && *((_DWORD *)v20 + 2))
          {
            uint64_t v25 = (uint64_t *)*v20;
LABEL_41:
            uint64_t v26 = *v25;
          }

          else
          {
            uint64_t v26 = 0LL;
          }

          if (*(_WORD *)(v26 + 16) != 232) {
            return result;
          }
          int v40 = *(unsigned __int8 *)(v26 + 18);
          if (v40 != 1 && (v40 != 5 || *(_DWORD *)(v26 + 8) != 1)) {
            return result;
          }
          if (v24 == 5) {
            uint64_t v20 = (uint64_t *)*v20;
          }
          uint64_t v11 = *(unsigned __int8 *)v20[1];
          unint64_t v12 = *(unsigned int *)(a3 + 8);
          if (v12 >= *(unsigned int *)(a3 + 12))
          {
            unint64_t result = (uint64_t **)__swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod( a3,  (const void *)(a3 + 16),  v12 + 1,  16LL);
            unint64_t v12 = *(unsigned int *)(a3 + 8);
          }

          uint64_t v13 = (void *)(*(void *)a3 + 16 * v12);
          *uint64_t v13 = v19;
          v13[1] = v11;
          ++*(_DWORD *)(a3 + 8);
          goto LABEL_20;
        }

        if (v21 == 39) {
          break;
        }
        if (v21 == 36)
        {
          int v22 = *((unsigned __int8 *)v20 + 18);
          if (v22 == 2) {
            goto LABEL_36;
          }
          if (v22 == 5 && *((_DWORD *)v20 + 2) >= 2u)
          {
            uint64_t v20 = (uint64_t *)*v20;
LABEL_36:
            uint64_t v23 = v20[1];
          }

          else
          {
            uint64_t v23 = 0LL;
          }

          uint64_t v47 = a4;
          uint64_t v29 = 1LL;
LABEL_52:
          int v18 = (unsigned __int16)v46;
          if ((_WORD)v46) {
            goto LABEL_85;
          }
          uint16x8_t v28 = v44;
          if (!v44) {
            return result;
          }
          goto LABEL_54;
        }

        uint16x8_t v28 = 0LL;
LABEL_54:
        int v30 = *v8;
        int v31 = *((unsigned __int16 *)*v8 + 8);
        switch(v31)
        {
          case ')':
            int v32 = *((unsigned __int8 *)v30 + 18);
            if (v32 == 2) {
              goto LABEL_62;
            }
            if (v32 == 5 && *((_DWORD *)v30 + 2) >= 2u)
            {
              int v30 = (uint64_t *)*v30;
LABEL_62:
              size_t v33 = (unsigned __int8 **)v30[1];
            }

            else
            {
              size_t v33 = 0LL;
            }

            if (*((_WORD *)v33 + 8) != 101) {
              return result;
            }
            unsigned int v34 = **v33 - 66;
            if (v34 > 0x2B || ((1LL << v34) & 0x808000F180FLL) == 0) {
              return result;
            }
            LODWORD(v44) = 3;
            os_signpost_id_t v45 = v19;
            goto LABEL_71;
          case '\'':
            LODWORD(v44) = 2;
LABEL_64:
            os_signpost_id_t v45 = v19;
            int v46 = v28;
LABEL_71:
            uint64_t v35 = *(unsigned int *)(a2 + 8);
            unint64_t v36 = *(void *)a2;
            if (v35 >= *(_DWORD *)(a2 + 12))
            {
              unint64_t v41 = v35 + 1;
              BOOL v42 = v36 + 24LL * v35 > (unint64_t)&v44;
              if (v36 > (unint64_t)&v44 || !v42)
              {
                unint64_t result = (uint64_t **)__swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod( a2,  (const void *)(a2 + 16),  v41,  24LL);
                unint64_t v36 = *(void *)a2;
                goto LABEL_72;
              }

              unsigned int v43 = (char *)&v44 - v36;
              unint64_t result = (uint64_t **)__swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod( a2,  (const void *)(a2 + 16),  v41,  24LL);
              unint64_t v36 = *(void *)a2;
              unint64_t v37 = &v43[*(void *)a2];
            }

            else
            {
LABEL_72:
              unint64_t v37 = (char *)&v44;
            }

            uint64_t v38 = v36 + 24LL * *(unsigned int *)(a2 + 8);
            __int128 v39 = *(_OWORD *)v37;
            *(void *)(v38 + 16) = *((void *)v37 + 2);
            *(_OWORD *)uint64_t v38 = v39;
            ++*(_DWORD *)(a2 + 8);
            break;
          case '$':
            LODWORD(v44) = 0;
            goto LABEL_64;
        }

uint64_t anonymous namespace'::DecodedMetadataBuilder::createGenericTypeParameterType( _anonymous_namespace_::DecodedMetadataBuilder *this, int a2, int a3)
{
  uint64_t result = *((void *)this + 4);
  if (result)
  {
    LODWORD(v13) = a2;
    int v14 = a3;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, int *))(*(void *)result + 48LL))(result, &v13, &v14);
    uint64_t v8 = *((void *)this + 11);
    if (*((void *)this + 10) != v8 && (result & 1) != 0)
    {
      unint64_t v9 = *(void *)(v8 - 8);
      uint64_t v13 = result;
      if (v9 >= *(void *)((result & 0xFFFFFFFFFFFFFFFELL) - 8))
      {
        uint64_t NumElements = swift::TargetPackPointer<swift::InProcess,swift::TargetMetadata>::getNumElements(&v13, v5, v6, v7);
        swift::fatalError(0LL, "Pack index %zu exceeds pack length %zu\n", v11, v12, v9, NumElements, v13);
      }

      return *(void *)((result & 0xFFFFFFFFFFFFFFFELL) + 8 * v9);
    }
  }

  return result;
}

void *swift::Demangle::__runtime::TypeDecoder<anonymous namespace'::DecodedMetadataBuilder>::decodeMangledFunctionInputType@<X0>( void *result@<X0>, uint64_t *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, _BYTE *a5@<X4>, uint64_t a6@<X8>)
{
  if (a3 > 0x400) {
    goto LABEL_2;
  }
  while (1)
  {
    int v8 = *((unsigned __int16 *)a2 + 8);
    if (v8 != 232 && v8 != 3) {
      break;
    }
    int v10 = *((unsigned __int8 *)a2 + 18);
    if ((v10 - 1) >= 2)
    {
      if (v10 != 5 || !*((_DWORD *)a2 + 2))
      {
        a2 = 0LL;
        goto LABEL_7;
      }

      a2 = (uint64_t *)*a2;
    }

    a2 = (uint64_t *)*a2;
LABEL_7:
    if (++a3 == 1025) {
      goto LABEL_2;
    }
  }

  unsigned int v33 = a3;
  v32[0] = a5;
  v32[1] = &v33;
  v32[2] = a4;
  void v32[3] = result;
  if (v8 != 223)
  {
    __int128 v34 = 0uLL;
    int v36 = 0;
    uint64_t v35 = 0LL;
    char v14 = v31;
    if (v31)
    {
      int v15 = v29;
      int v16 = v30;
      *(void *)(a6 + 8) = v30;
      *(void *)a6 = v16(v15, 2LL, 0LL);
      uint64_t result = (void *)v16(v15, 3LL, 0LL);
      char v14 = 1;
    }

    else
    {
      *(_BYTE *)a6 = 0;
    }

    *(_BYTE *)(a6 + 16) = v14;
    return result;
  }

  int v11 = *((unsigned __int8 *)a2 + 18);
  unint64_t v12 = a2;
  if ((v11 - 1) >= 2)
  {
    if (v11 == 5)
    {
      uint64_t v13 = (uint64_t *)*a2;
      unint64_t v12 = (uint64_t *)*a2;
      goto LABEL_29;
    }

    unint64_t v12 = 0LL;
  }

  switch(v11)
  {
    case 1:
      int v17 = a2 + 1;
      break;
    case 2:
      int v17 = a2 + 2;
      break;
    case 5:
      uint64_t v13 = (uint64_t *)*a2;
LABEL_29:
      int v17 = &v13[*((unsigned int *)a2 + 2)];
      break;
    default:
      int v17 = 0LL;
      break;
  }

  if (v12 == v17)
  {
LABEL_2:
    *(_BYTE *)a6 = 0;
    *(_BYTE *)(a6 + 16) = 0;
    return result;
  }

  while (2)
  {
    int v18 = (uint64_t *)*v12;
    BOOL v19 = (uint64_t *)(*v12 + 16);
    if (*(_WORD *)v19 != 224) {
      goto LABEL_35;
    }
    int v36 = 0;
    uint64_t v35 = 0LL;
    __int128 v34 = 0uLL;
    int v20 = *((unsigned __int8 *)v18 + 18);
    int v21 = v18;
    if ((v20 - 1) >= 2)
    {
      if (v20 == 5)
      {
        uint64_t v22 = *v18;
        int v21 = (uint64_t *)*v18;
LABEL_45:
        BOOL v19 = (uint64_t *)(v22 + 8LL * *((unsigned int *)v18 + 2));
        if (v21 != v19) {
          break;
        }
        goto LABEL_35;
      }

      int v21 = 0LL;
    }

    switch(v20)
    {
      case 1:
        BOOL v19 = v18 + 1;
        if (v21 != v18 + 1) {
          goto LABEL_54;
        }
        goto LABEL_35;
      case 2:
        goto LABEL_53;
      case 5:
        uint64_t v22 = *v18;
        goto LABEL_45;
    }

    BOOL v19 = 0LL;
    if (!v21)
    {
LABEL_35:
      if (++v12 == v17) {
        goto LABEL_2;
      }
      continue;
    }

    break;
  }

void anonymous namespace'::DecodedMetadataBuilder::createFunctionType( uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, unint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  if (!a3 || (a3 & 1) != 0)
  {
    *(_WORD *)(a9 + 16) = 1;
    *(void *)(a9 + 8) = _ZZN5swift15TypeLookupErrorC1IZNS_L19TypeLookupErrorImplIJEEES0_PKcDpT_EUlvE_EERKT_ENUlPvNS0_7CommandESB_E_8__invokeESB_SC_SB_;
    int v21 = operator new(8uLL);
    *int v21 = "Tried to build a function type where the result type is a pack";
    *(void *)a9 = v21;
    return;
  }

  unint64_t v11 = a7;
  unint64_t v12 = a4;
  unint64_t v51 = v53;
  uint64_t v52 = 0x800000000LL;
  int v15 = v50;
  int v48 = v50;
  uint64_t v49 = 0x800000000LL;
  if (a2 >= 9)
  {
    uint64_t v45 = a5;
    unint64_t v17 = a6;
    uint64_t v18 = a8;
    __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v53, a2, 8LL);
    unint64_t v19 = v12 & 0x2000000;
    uint64_t v20 = (v12 >> 25) & 1;
    if ((v12 & 0x2000000) != 0 && a2 > HIDWORD(v49))
    {
      __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v50, a2, 4LL);
      unint64_t v19 = v12 & 0x2000000;
      LODWORD(v20) = 1;
    }

    a8 = v18;
    a6 = v17;
    a5 = v45;
    unint64_t v11 = a7;
LABEL_11:
    uint64_t v22 = 32 * a2;
    uint64_t v23 = (_DWORD *)(a1 + 24);
    while (1)
    {
      uint64_t v24 = *((void *)v23 - 1);
      if (!v24 || (*((void *)v23 - 1) & 1LL) != 0) {
        break;
      }
      uint64_t v26 = v52;
      if (v52 >= (unint64_t)HIDWORD(v52))
      {
        unsigned int v44 = v15;
        uint64_t v47 = a8;
        unint64_t v33 = a6;
        uint64_t v34 = a5;
        unint64_t v42 = v11;
        unint64_t v35 = v19;
        __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod( (uint64_t)&v51,  v53,  v52 + 1LL,  8LL);
        unint64_t v19 = v35;
        a5 = v34;
        a6 = v33;
        unint64_t v11 = v42;
        int v15 = v44;
        a8 = v47;
        uint64_t v26 = v52;
      }

      *((void *)v51 + v26) = v24;
      LODWORD(v52) = v52 + 1;
      if ((_DWORD)v20)
      {
        int v27 = *v23;
        uint64_t v28 = v49;
        if (v49 >= (unint64_t)HIDWORD(v49))
        {
          uint64_t v29 = v15;
          unsigned int v43 = v15;
          uint64_t v46 = a8;
          unint64_t v30 = a6;
          uint64_t v31 = a5;
          unint64_t v41 = v11;
          unint64_t v32 = v19;
          __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod( (uint64_t)&v48,  v29,  v49 + 1LL,  4LL);
          unint64_t v19 = v32;
          a5 = v31;
          a6 = v30;
          unint64_t v11 = v41;
          int v15 = v43;
          a8 = v46;
          uint64_t v28 = v49;
        }

        *((_DWORD *)v48 + v28) = v27;
        LODWORD(v49) = v49 + 1;
      }

      v23 += 8;
      v22 -= 32LL;
      if (!v22) {
        goto LABEL_24;
      }
    }

    *(_WORD *)(a9 + 16) = 1;
    *(void *)(a9 + 8) = _ZZN5swift15TypeLookupErrorC1IZNS_L19TypeLookupErrorImplIJEEES0_PKcDpT_EUlvE_EERKT_ENUlPvNS0_7CommandESB_E_8__invokeESB_SC_SB_;
    int v36 = operator new(8uLL);
    *int v36 = "Tried to build a function type where a parameter type is a pack";
    *(void *)a9 = v36;
    goto LABEL_34;
  }

  unint64_t v19 = a4 & 0x2000000;
  if (a2)
  {
    uint64_t v20 = (a4 >> 25) & 1;
    goto LABEL_11;
  }

uint64_t swift::Demangle::__runtime::TypeDecoder<anonymous namespace'::DecodedMetadataBuilder>::decodeImplFunctionParam<swift::Demangle::__runtime::ImplFunctionParam<swift::MetadataOrPack>>( uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 > 0x400) {
    return 1LL;
  }
  int v8 = *(unsigned __int8 *)(a2 + 18);
  uint64_t v9 = 1LL;
  if (v8 == 2)
  {
    unint64_t v11 = (char ***)a2;
  }

  else
  {
    if (v8 != 5) {
      return v9;
    }
    uint64_t v10 = *(unsigned int *)(a2 + 8);
    unint64_t v11 = *(char ****)a2;
    uint64_t v9 = v10 - 1;
  }

  if (*((_WORD *)*v11 + 8) != 106) {
    return 1LL;
  }
  unint64_t v12 = v11[v9];
  if (*((_WORD *)v12 + 8) != 232) {
    return 1LL;
  }
  uint64_t ConventionFromString = swift::Demangle::__runtime::ImplFunctionParam<swift::MetadataOrPack>::getConventionFromString( **v11,  (size_t)(*v11)[1]);
  if ((ConventionFromString & 0xFF00000000LL) == 0) {
    return 1LL;
  }
  uint64_t v9 = 1LL;
  if (v20 == 1)
  {
LABEL_29:
    ((void (*)(void, uint64_t, void))v19[1])(v19[0], 3LL, 0LL);
    return v9;
  }

  unsigned __int8 v18 = 0;
  if (*(_BYTE *)(a2 + 18) != 5) {
    goto LABEL_23;
  }
  if ((*(_DWORD *)(a2 + 8) - 3) > 1)
  {
    LOBYTE(DifferentiabilityFromString) = 0;
  }

  else
  {
    uint64_t v13 = *(void *)(*(void *)a2 + 8LL);
    if (*(_WORD *)(v13 + 16) != 110) {
      goto LABEL_27;
    }
    unsigned __int16 DifferentiabilityFromString = swift::Demangle::__runtime::ImplFunctionParam<swift::MetadataOrPack>::getDifferentiabilityFromString( *(void **)v13,  *(void *)(v13 + 8));
    if (DifferentiabilityFromString < 0x100u) {
      goto LABEL_27;
    }
    unsigned __int8 v18 = DifferentiabilityFromString;
    if (*(_BYTE *)(a2 + 18) != 5) {
      goto LABEL_23;
    }
  }

  if (*(_DWORD *)(a2 + 8) == 4)
  {
    if (*(_WORD *)(*(void *)(*(void *)a2 + 16LL) + 16LL) == 111)
    {
      unsigned __int8 v18 = DifferentiabilityFromString | 2;
      goto LABEL_23;
    }

uint64_t swift::Demangle::__runtime::TypeDecoder<anonymous namespace'::DecodedMetadataBuilder>::decodeImplFunctionParam<swift::Demangle::__runtime::ImplFunctionResult<swift::MetadataOrPack>>( uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 > 0x400) {
    return 1LL;
  }
  int v8 = *(unsigned __int8 *)(a2 + 18);
  uint64_t v9 = 1LL;
  if (v8 == 2)
  {
    unint64_t v11 = (_DWORD ***)a2;
  }

  else
  {
    if (v8 != 5) {
      return v9;
    }
    uint64_t v10 = *(unsigned int *)(a2 + 8);
    unint64_t v11 = *(_DWORD ****)a2;
    uint64_t v9 = v10 - 1;
  }

  if (*((_WORD *)*v11 + 8) != 106) {
    return 1LL;
  }
  unint64_t v12 = v11[v9];
  if (*((_WORD *)v12 + 8) != 232) {
    return 1LL;
  }
  uint64_t ConventionFromString = swift::Demangle::__runtime::ImplFunctionResult<swift::MetadataOrPack>::getConventionFromString( **v11,  (size_t)(*v11)[1]);
  if ((ConventionFromString & 0xFF00000000LL) == 0) {
    return 1LL;
  }
  uint64_t v9 = 1LL;
  if (v20 == 1)
  {
LABEL_29:
    ((void (*)(void, uint64_t, void))v19[1])(v19[0], 3LL, 0LL);
    return v9;
  }

  unsigned __int8 v18 = 0;
  if (*(_BYTE *)(a2 + 18) != 5) {
    goto LABEL_23;
  }
  if ((*(_DWORD *)(a2 + 8) - 3) > 1)
  {
    LOBYTE(DifferentiabilityFromString) = 0;
  }

  else
  {
    uint64_t v13 = *(void *)(*(void *)a2 + 8LL);
    if (*(_WORD *)(v13 + 16) != 110) {
      goto LABEL_27;
    }
    unsigned __int16 DifferentiabilityFromString = swift::Demangle::__runtime::ImplFunctionParam<swift::MetadataOrPack>::getDifferentiabilityFromString( *(void **)v13,  *(void *)(v13 + 8));
    if (DifferentiabilityFromString < 0x100u) {
      goto LABEL_27;
    }
    unsigned __int8 v18 = DifferentiabilityFromString;
    if (*(_BYTE *)(a2 + 18) != 5) {
      goto LABEL_23;
    }
  }

  if (*(_DWORD *)(a2 + 8) == 4)
  {
    if (*(_WORD *)(*(void *)(*(void *)a2 + 16LL) + 16LL) == 111)
    {
      unsigned __int8 v18 = DifferentiabilityFromString | 2;
      goto LABEL_23;
    }

uint64_t swift::Demangle::__runtime::TypeDecoder<anonymous namespace'::DecodedMetadataBuilder>::decodeImplFunctionPart<swift::Demangle::__runtime::ImplFunctionResult<swift::MetadataOrPack>>( uint64_t a1, _DWORD ***a2, unsigned int a3, uint64_t a4)
{
  if (a3 > 0x400) {
    return 1LL;
  }
  int v6 = a2;
  int v8 = *((unsigned __int8 *)a2 + 18);
  if (v8 != 2)
  {
    if (v8 == 5 && *((_DWORD *)a2 + 2) == 2)
    {
      uint64_t v9 = (_WORD **)*a2;
      if (*((_WORD *)**a2 + 8) == 106) {
        goto LABEL_8;
      }
    }

    return 1LL;
  }

  uint64_t v9 = (_WORD **)a2;
  if (*((_WORD *)*a2 + 8) != 106) {
    return 1LL;
  }
LABEL_8:
  if (v9[1][8] != 232) {
    return 1LL;
  }
  unsigned int v10 = v8 - 1;
  unint64_t v11 = a2;
  if (v10 >= 2) {
    unint64_t v11 = (_DWORD ***)*a2;
  }
  uint64_t ConventionFromString = swift::Demangle::__runtime::ImplFunctionResult<swift::MetadataOrPack>::getConventionFromString( **v11,  (size_t)(*v11)[1]);
  if ((ConventionFromString & 0xFF00000000LL) == 0) {
    return 1LL;
  }
  int v12 = *((unsigned __int8 *)v6 + 18);
  if (v12 != 2)
  {
    if (v12 != 5 || *((_DWORD *)v6 + 2) < 2u)
    {
      uint64_t v13 = 0LL;
      goto LABEL_20;
    }

    int v6 = (_DWORD ***)*v6;
  }

  uint64_t v13 = v6[1];
LABEL_20:
  BOOL v14 = v19 == 1;
  if (v19 == 1
    || (v19 ? (uint64_t v16 = 0LL) : (uint64_t v16 = v18[0]),
        uint64_t v17 = v16,
        __swift::__runtime::llvm::SmallVectorImpl<swift::Demangle::__runtime::ImplFunctionResult<swift::MetadataOrPack>>::emplace_back<swift::MetadataOrPack,swift::Demangle::__runtime::ImplResultConvention &>( a4,  &v17,  (unsigned int *)&ConventionFromString),  v19 == 1))
  {
    ((void (*)(void, uint64_t, void))v18[1])(v18[0], 3LL, 0LL);
  }

  return v14;
}

void anonymous namespace'::DecodedMetadataBuilder::createTupleType( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v7 = a2;
  if (a2)
  {
    if (a2 == 1 && !*(void *)(a3 + 8))
    {
      *(_WORD *)(a5 + 16) = 0;
      uint64_t v25 = *a1;
      *(void *)a5 = *a1;
      if (!v25)
      {
        *(void *)a5 = "unknown error";
        *(void *)(a5 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
        *(_WORD *)(a5 + 16) = 1;
      }
    }

    else
    {
      uint64_t v10 = 8 * a2;
      unint64_t v11 = a1;
      while (*v11 && (*v11 & 1LL) == 0)
      {
        ++v11;
        v10 -= 8LL;
        if (!v10) {
          goto LABEL_11;
        }
      }

      *(_WORD *)(a5 + 16) = 1;
      *(void *)(a5 + 8) = _ZZN5swift15TypeLookupErrorC1IZNS_L19TypeLookupErrorImplIJEEES0_PKcDpT_EUlvE_EERKT_ENUlPvNS0_7CommandESB_E_8__invokeESB_SC_SB_;
      __int16 v20 = operator new(8uLL);
      *__int16 v20 = "Tried to build a tuple type where an element type is a pack";
      *(void *)a5 = v20;
    }

    return;
  }

uint64_t anonymous namespace'::DecodedMetadataBuilder::createPackType@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (a2)
  {
    uint64_t v4 = 8 * a2;
    uint64_t v5 = (void *)a1;
    while (*v5 && (*v5 & 1LL) == 0)
    {
      ++v5;
      v4 -= 8LL;
      if (!v4) {
        goto LABEL_9;
      }
    }

    *(_WORD *)(a3 + 16) = 1;
    *(void *)(a3 + 8) = _ZZN5swift15TypeLookupErrorC1IZNS_L19TypeLookupErrorImplIJEEES0_PKcDpT_EUlvE_EERKT_ENUlPvNS0_7CommandESB_E_8__invokeESB_SC_SB_;
    uint64_t result = (uint64_t)operator new(8uLL);
    *(void *)uint64_t result = "Can't have nested metadata packs";
    *(void *)a3 = result;
  }

  else
  {
LABEL_9:
    uint64_t result = swift_allocateMetadataPack(a1, a2);
    if ((result & 1) == 0) {
      swift::fatalError(0LL, "Cannot have an on-stack pack here\n", v7, v8);
    }
    *(_WORD *)(a3 + 16) = 0;
    *(void *)a3 = result;
    if (!result)
    {
      *(void *)a3 = "unknown error";
      *(void *)(a3 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
      *(_WORD *)(a3 + 16) = 1;
    }
  }

  return result;
}

void anonymous namespace'::DecodedMetadataBuilder::createDependentMemberType( const void *a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  if ((a4 & 1) != 0
    || ((unint64_t v6 = a4 & 0xFFFFFFFFFFFFFFFELL,
         int v7 = (const char *)((a4 & 0xFFFFFFFFFFFFFFFELL) + 20),
         uint64_t v8 = *(int *)v7,
         uint64_t v9 = &v7[v8],
         (_DWORD)v8)
      ? (BOOL v10 = v9 == 0LL)
      : (BOOL v10 = 1),
        v10 || (size_t v14 = strlen(&v7[v8])) == 0))
  {
LABEL_31:
    *(void *)a5 = "unknown error";
    *(void *)(a5 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
    *(_WORD *)(a5 + 16) = 1;
    return;
  }

  size_t v15 = v14;
  int v16 = 0;
  while (1)
  {
    uint64_t v17 = memchr(v9, 32, v15);
    unint64_t v20 = v17 ? v17 - v9 : -1LL;
    unint64_t v21 = v15 >= v20 ? v20 : v15;
    if (v21 == a2 && (!a2 || !memcmp(v9, a1, a2))) {
      break;
    }
    ++v16;
    if (v15 <= v20) {
      v9 += v21;
    }
    else {
      v9 += v21 + 1;
    }
    size_t v15 = (__PAIR128__(v15, v20) - __PAIR128__(v21, v15)) >> 64;
    if (!v15) {
      goto LABEL_31;
    }
  }

  unint64_t v23 = v6 + 16;
  uint64_t v22 = *(unsigned int *)(v6 + 16);
  if (!(_DWORD)v22) {
LABEL_47:
  }
    abort();
  int v24 = 0;
  uint64_t v25 = (_DWORD *)(v6 + 24 + 12LL * *(unsigned int *)(v6 + 12));
  while ((*v25 & 0xF) != 7)
  {
LABEL_23:
    v25 += 2;
    if (!--v22) {
      goto LABEL_47;
    }
  }

  if (v24 != v16)
  {
    ++v24;
    goto LABEL_23;
  }

  if (!a3 || (a3 & 1) != 0)
  {
    if ((a3 & 1) == 0) {
      swift::fatalError(0LL, "Expected a metadata pack but got metadata\n", v18, v19);
    }
    uint64_t v37 = v39;
    uint64_t v38 = 0x400000000LL;
    uint64_t v28 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFFELL);
    uint64_t v29 = *(void *)((a3 & 0xFFFFFFFFFFFFFFFELL) - 8);
    if (v29)
    {
      do
      {
        uint64_t v30 = *v28;
        uint64_t v31 = (const char *)swift_conformsToProtocolCommon(*v28, v6);
        if (v31) {
          unint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v31,  v30,  v23 + 12LL * *(unsigned int *)(v6 + 12),  v25);
        }
        else {
          unint64_t AssociatedTypeWitness = 0LL;
        }
        uint64_t v33 = v38;
        if (v38 >= (unint64_t)HIDWORD(v38))
        {
          __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod( (uint64_t)&v37,  v39,  v38 + 1LL,  8LL);
          uint64_t v33 = v38;
        }

        *((void *)v37 + v33) = AssociatedTypeWitness;
        unint64_t v34 = (v38 + 1);
        LODWORD(v38) = v38 + 1;
        ++v28;
        --v29;
      }

      while (v29);
      unint64_t v35 = v37;
    }

    else
    {
      unint64_t v34 = 0LL;
      unint64_t v35 = v39;
    }

    uint64_t MetadataPack = swift_allocateMetadataPack((uint64_t)v35, v34);
    *(_WORD *)(a5 + 16) = 0;
    *(void *)a5 = MetadataPack;
    if (!MetadataPack)
    {
      *(void *)a5 = "unknown error";
      *(void *)(a5 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
      *(_WORD *)(a5 + 16) = 1;
    }

    if (v37 != v39) {
      free(v37);
    }
  }

  else
  {
    std::string v26 = (const char *)swift_conformsToProtocolCommon(a3, v6);
    if (!v26) {
      goto LABEL_31;
    }
    unint64_t v27 = swift_getAssociatedTypeWitness(255LL, v26, a3, v23 + 12LL * *(unsigned int *)(v6 + 12), v25);
    *(_WORD *)(a5 + 16) = 0;
    *(void *)a5 = v27;
    if (!v27) {
      goto LABEL_31;
    }
  }

uint64_t __swift::__runtime::llvm::SmallVectorImpl<std::pair<unsigned int,unsigned int>>::emplace_back<unsigned long long,unsigned long long>( uint64_t a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12)) {
    return __swift::__runtime::llvm::SmallVectorTemplateBase<std::pair<unsigned int,unsigned int>,true>::growAndEmplaceBack<unsigned long long,unsigned long long>( a1,  a2,  a3);
  }
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = (_DWORD *)(*(void *)a1 + 8 * v3);
  uint64_t v6 = *a3;
  *uint64_t v5 = *(void *)a2;
  v5[1] = v6;
  unsigned int v7 = v3 + 1;
  *(_DWORD *)(a1 + 8) = v7;
  return v4 + 8LL * v7 - 8;
}

uint64_t __swift::__runtime::llvm::SmallVectorImpl<std::pair<swift::MetadataOrPack,swift::MetadataOrPack>>::emplace_back<swift::MetadataOrPack&,swift::MetadataOrPack>( uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12)) {
    return __swift::__runtime::llvm::SmallVectorTemplateBase<std::pair<swift::MetadataOrPack,swift::MetadataOrPack>,true>::growAndEmplaceBack<swift::MetadataOrPack&,swift::MetadataOrPack>( a1,  a2,  a3);
  }
  uint64_t v4 = (uint64_t *)(*(void *)a1 + 16 * v3);
  *uint64_t v4 = *a2;
  v4[1] = *a3;
  unsigned int v5 = v3 + 1;
  *(_DWORD *)(a1 + 8) = v5;
  return *(void *)a1 + 16LL * v5 - 16;
}

uint64_t __swift::__runtime::llvm::SmallVectorImpl<anonymous namespace'::DecodedMetadataBuilder::BuiltSILBoxField>::emplace_back<swift::MetadataOrPack,BOOL &>( uint64_t a1, uint64_t *a2, unsigned __int8 *a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12)) {
  uint64_t v4 = *(void *)a1 + 16 * v3;
  }
  unsigned __int8 v5 = *a3;
  *(void *)uint64_t v4 = *a2;
  *(_BYTE *)(v4 + 8) = v5;
  *(_DWORD *)(a1 + 8) = v3 + 1;
  return a1;
}

void std::vector<unsigned int>::push_back[abi:nn180100](uint64_t a1, _DWORD *a2)
{
  unsigned __int8 v5 = *(char **)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  uint64_t v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v8 = *(char **)a1;
    uint64_t v9 = (uint64_t)&v5[-*(void *)a1];
    uint64_t v10 = v9 >> 2;
    unint64_t v11 = (v9 >> 2) + 1;
    if (v11 >> 62) {
      abort();
    }
    uint64_t v12 = v4 - (void)v8;
    if (v12 >> 1 > v11) {
      unint64_t v11 = v12 >> 1;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      if (v13 >> 62) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      size_t v14 = operator new(4 * v13);
    }

    else
    {
      size_t v14 = 0LL;
    }

    size_t v15 = &v14[4 * v10];
    *size_t v15 = *a2;
    unsigned int v7 = v15 + 1;
    if (v5 != v8)
    {
      unint64_t v16 = v5 - v8 - 4;
      if (v16 < 0x2C) {
        goto LABEL_27;
      }
      uint64_t v17 = (v16 >> 2) + 1;
      uint64_t v18 = 4 * (v17 & 0x7FFFFFFFFFFFFFF8LL);
      uint64_t v6 = &v5[-v18];
      size_t v15 = (_DWORD *)((char *)v15 - v18);
      std::string::size_type v19 = &v14[4 * v10 - 16];
      unint64_t v20 = v5 - 16;
      uint64_t v21 = v17 & 0x7FFFFFFFFFFFFFF8LL;
      do
      {
        __int128 v22 = *(_OWORD *)v20;
        *(v19 - 1) = *((_OWORD *)v20 - 1);
        _OWORD *v19 = v22;
        v19 -= 2;
        v20 -= 32;
        v21 -= 8LL;
      }

      while (v21);
      if (v17 != (v17 & 0x7FFFFFFFFFFFFFF8LL))
      {
LABEL_27:
        do
        {
          int v23 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *--size_t v15 = v23;
        }

        while (v6 != v8);
      }
    }

    *(void *)a1 = v15;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = &v14[4 * v13];
    if (v8) {
      operator delete(v8);
    }
  }

  else
  {
    *(_DWORD *)unsigned __int8 v5 = *a2;
    unsigned int v7 = v5 + 4;
  }

  *(void *)(a1 + 8) = v7;
}

void *std::vector<__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>>::emplace_back<swift::MetadataOrPack*,unsigned int>( uint64_t a1, void *a2, unsigned int *a3)
{
  unsigned int v7 = *(void **)(a1 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = *(void **)a1;
    uint64_t v11 = ((uint64_t)v7 - *(void *)a1) >> 4;
    unint64_t v12 = v11 + 1;
    uint64_t v13 = v6 - (void)v10;
    if (v13 >> 3 > v12) {
      unint64_t v12 = v13 >> 3;
    }
    BOOL v14 = (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0LL;
    unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14) {
      unint64_t v15 = v12;
    }
    if (v15 >> 60) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (char *)operator new(16 * v15);
    uint64_t v18 = *a3;
    std::string::size_type v19 = &v17[16 * v11];
    *(void *)std::string::size_type v19 = *a2;
    *((void *)v19 + 1) = v18;
    uint64_t v9 = v19 + 16;
    if (v7 == v10)
    {
      unint64_t v20 = &v17[16 * v11];
    }

    else
    {
      do
      {
        unint64_t v20 = v19 - 16;
        *((_OWORD *)v19 - 1) = *((_OWORD *)v7 - 1);
        v7 -= 2;
        v19 -= 16;
      }

      while (v7 != v10);
    }

    *(void *)a1 = v20;
    *(void *)(a1 + 8) = v9;
    *(void *)(a1 + 16) = &v17[v16];
    if (v10) {
      operator delete(v10);
    }
  }

  else
  {
    uint64_t v8 = *a3;
    *unsigned int v7 = *a2;
    v7[1] = v8;
    uint64_t v9 = v7 + 2;
  }

  *(void *)(a1 + 8) = v9;
  return v9 - 2;
}

void anonymous namespace'::DecodedMetadataBuilder::resolveOpaqueType( uint64_t *a1@<X0>, unsigned int **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned int a5@<W4>, uint64_t a6@<X8>)
{
  if (*((_WORD *)a2 + 8) != 301)
  {
LABEL_23:
    *(void *)a6 = "unknown error";
    *(void *)(a6 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
    *(_WORD *)(a6 + 16) = 1;
    return;
  }

  uint64_t v11 = *a2;
  if (qword_18C486E30 != -1) {
  if (qword_18C486DF0 != -1)
  }
    dispatch_once_f( &qword_18C486DF0,  &DynamicReplacementLock,  (dispatch_function_t)swift::Lazy<swift::Mutex>::defaultInitCallback);
  os_unfair_lock_lock((os_unfair_lock_t)&DynamicReplacementLock);
  if (dword_18C486E28)
  {
    LODWORD(v12) = (dword_18C486E28 - 1) & ((v11 >> 4) ^ (v11 >> 9));
    uint64_t v13 = (unsigned int **)(opaqueTypeMappings + 16LL * v12);
    BOOL v14 = *v13;
    if (*v13 == v11) {
      goto LABEL_13;
    }
    int v15 = 1;
    while (v14 != (unsigned int *)-4096LL)
    {
      int v16 = v12 + v15++;
      uint64_t v12 = v16 & (dword_18C486E28 - 1);
      BOOL v14 = *(unsigned int **)(opaqueTypeMappings + 16LL * v12);
      if (v14 == v11)
      {
        uint64_t v13 = (unsigned int **)(opaqueTypeMappings + 16 * v12);
        goto LABEL_13;
      }
    }
  }

  uint64_t v13 = (unsigned int **)(opaqueTypeMappings + 16LL * dword_18C486E28);
LABEL_13:
  else {
    uint64_t v17 = v13[1];
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&DynamicReplacementLock);
  if (v17) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = v11;
  }
  if (!v18) {
    goto LABEL_23;
  }
  uint64_t v19 = (int)v18[1];
  if ((_DWORD)v19)
  {
    unint64_t v20 = (unsigned int *)((char *)v18 + (v19 & 0xFFFFFFFFFFFFFFFELL) + 4);
    if ((v19 & 1) != 0) {
      unint64_t v20 = *(unsigned int **)v20;
    }
  }

  else
  {
    unint64_t v20 = 0LL;
  }

  unint64_t v65 = v67;
  uint64_t v66 = 0x800000000LL;
  if (a4)
  {
    LODWORD(v21) = 0;
    uint64_t v22 = a3 + 16 * a4;
    do
    {
      int v23 = *(const void **)a3;
      uint64_t v24 = *(void *)(a3 + 8);
      if (v24 + (unint64_t)v21 > HIDWORD(v66))
      {
        __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod( (uint64_t)&v65,  v67,  v24 + v21,  8LL);
        LODWORD(v21) = v66;
      }

      if (v24)
      {
        memcpy(&v65[8 * v21], v23, 8 * v24);
        LODWORD(v21) = v66;
      }

      uint64_t v21 = (v21 + v24);
      LODWORD(v66) = v21;
      a3 += 16LL;
    }

    while (a3 != v22);
    uint64_t v25 = v65;
  }

  else
  {
    uint64_t v21 = 0LL;
    uint64_t v25 = v67;
  }

  v63[0] = v64;
  v63[1] = (void *)0x800000000LL;
  v61[0] = v62;
  v61[1] = (void *)0x800000000LL;
  _gatherGenericParameters(v20, v25, v21, 0LL, (uint64_t)v63, (uint64_t)v61, *a1, (uint64_t)&v55);
  if (!(_BYTE)v57)
  {
    uint64_t v29 = v18 + 2;
    unint64_t v30 = *v18;
    if ((v30 & 0x80) != 0)
    {
      __int16 v34 = *((_WORD *)v18 + 7);
      unint64_t v35 = &v33[2 * (v34 & 1)];
      if ((v34 & 1) != 0) {
        v35 += 4 * *v33;
      }
      unint64_t v32 = (unint64_t)v35 + (v34 & 2);
      if ((v34 & 2) != 0
        && (uint8x8_t v36 = (uint8x8_t)vcnt_s8((int8x8_t)*v35), v36.i16[0] = vaddlv_u8(v36), v32 += 2LL * v36.u32[0], *v35))
      {
        unsigned int v31 = *(unsigned __int16 *)((char *)&v35[v36.u32[0] - 1] + (v34 & 2));
      }

      else
      {
        unsigned int v31 = 0;
      }
    }

    else
    {
      unsigned int v31 = 0;
      unint64_t v32 = ((unint64_t)&v29[2 * ((v30 >> 7) & 1)] + 3) & 0xFFFFFFFFFFFFFFFCLL;
    }

    uint64_t v37 = (int *)(((v32 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 12LL * v31 + 4LL * a5);
    uint64_t v38 = *v37;
    __int128 v39 = (char *)v37 + v38;
    if ((_DWORD)v38) {
      int v40 = v39;
    }
    else {
      int v40 = 0LL;
    }
    SymbolicMangledNameStringRef = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef(v40, v26);
    LODWORD(v55) = 0;
    uint64_t v56 = v18;
    uint64_t v57 = v61[0];
    int v58 = v60;
    uint64_t v59 = 0x800000000LL;
    v60[32] = 0LL;
    v51[0] = off_189B8DAB8;
    v51[1] = &v55;
    uint64_t v52 = v51;
    v49[0] = off_189B8DB00;
    v49[1] = &v55;
    unint64_t v50 = v49;
    swift_getTypeByMangledName(v53, 0LL, SymbolicMangledNameStringRef, v42, v61[0], v51, v49);
    int v43 = v54;
    if (v54)
    {
      *(void *)a6 = "unknown error";
      *(void *)(a6 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
      *(_WORD *)(a6 + 16) = 1;
      if (v43 == 1) {
        ((void (*)(void, uint64_t, void))v53[1])(v53[0], 3LL, 0LL);
      }
    }

    else
    {
      uint64_t v44 = v53[0];
      *(_WORD *)(a6 + 16) = 0;
      *(void *)a6 = v44;
      if (!v44)
      {
        *(void *)a6 = "unknown error";
        *(void *)(a6 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
        *(_WORD *)(a6 + 16) = 1;
      }
    }

    uint64_t v45 = v50;
    if (v50 == v49)
    {
      uint64_t v46 = 4LL;
      uint64_t v45 = v49;
    }

    else
    {
      if (!v50) {
        goto LABEL_57;
      }
      uint64_t v46 = 5LL;
    }

    (*(void (**)(void))(*v45 + 8 * v46))();
LABEL_57:
    uint64_t v47 = v52;
    if (v52 == v51)
    {
      uint64_t v48 = 4LL;
      uint64_t v47 = v51;
    }

    else
    {
      if (!v52) {
        goto LABEL_62;
      }
      uint64_t v48 = 5LL;
    }

    (*(void (**)(void))(*v47 + 8 * v48))();
LABEL_62:
    if (v58 != v60) {
      free(v58);
    }
    goto LABEL_64;
  }

  *(_WORD *)(a6 + 16) = 1;
  uint64_t v27 = v55;
  uint64_t v28 = (uint64_t (*)(uint64_t, uint64_t, void))v56;
  *(void *)(a6 + 8) = v56;
  *(void *)a6 = v28(v27, 2LL, 0LL);
  v28(v27, 3LL, 0LL);
LABEL_64:
  if (v61[0] != v62) {
    free(v61[0]);
  }
  if (v63[0] != v64) {
    free(v63[0]);
  }
  if (v65 != v67) {
    free(v65);
  }
}

void swift::TypeLookupError::TypeLookupError<swift::TypeLookupError swift::TypeLookupErrorImpl<int,unsigned int,int,char const*,char const*>(char const*,int,unsigned int,int,char const*,char const*)::{lambda(void)#1}>(swift::TypeLookupError swift::TypeLookupErrorImpl<int,unsigned int,int,char const*,char const*>(char const*,int,unsigned int,int,char const*,char const*)::{lambda(void)#1} const&)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke( uint64_t a1, int a2)
{
  __asm { BR              X10 }

uint64_t sub_181784CB0()
{
  return *(void *)(v1 - 24);
}

void swift_asprintf(char **a1, const char *__format, ...)
{
  int v4 = vsnprintf(0LL, 0LL, __format, va);
  *a1 = 0LL;
  if ((v4 & 0x80000000) == 0)
  {
    size_t v5 = (v4 + 1);
    unint64_t v6 = (char *)malloc(v5);
    if (v6)
    {
      unsigned int v7 = v6;
      else {
        *a1 = v7;
      }
    }
  }

void swift::TypeLookupError::TypeLookupError<swift::TypeLookupError swift::TypeLookupErrorImpl<int,unsigned int,int,char const*,unsigned long>(char const*,int,unsigned int,int,char const*,unsigned long)::{lambda(void)#1}>(swift::TypeLookupError swift::TypeLookupErrorImpl<int,unsigned int,int,char const*,unsigned long>(char const*,int,unsigned int,int,char const*,unsigned long)::{lambda(void)#1} const&)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke( uint64_t a1, int a2)
{
  __asm { BR              X10 }

uint64_t sub_181784DE4()
{
  return *(void *)(v1 - 24);
}

void _ZZN5swift15TypeLookupErrorC1IZNS_L19TypeLookupErrorImplIJEEES0_PKcDpT_EUlvE_EERKT_ENUlPvNS0_7CommandESB_E_8__invokeESB_SC_SB_( uint64_t a1, int a2)
{
  __asm { BR              X10 }

char *sub_181784E88( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return v16;
}

void swift::TypeLookupError::TypeLookupError<swift::TypeLookupError swift::TypeLookupErrorImpl<int,unsigned int,int,char const*,swift::Demangle::__runtime::ManglingError::Code,unsigned int>(char const*,int,unsigned int,int,char const*,swift::Demangle::__runtime::ManglingError::Code,unsigned int)::{lambda(void)#1}>(swift::TypeLookupError swift::TypeLookupErrorImpl<int,unsigned int,int,char const*,swift::Demangle::__runtime::ManglingError::Code,unsigned int>(char const*,int,unsigned int,int,char const*,swift::Demangle::__runtime::ManglingError::Code,unsigned int)::{lambda(void)#1} const&)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke( uint64_t a1, int a2)
{
  __asm { BR              X10 }

uint64_t sub_181784F0C()
{
  return *(void *)(v1 - 24);
}

__n128 std::__function::__func<anonymous namespace'::DecodedMetadataBuilder::createSymbolicExtendedExistentialType(swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>)::{lambda(unsigned int,unsigned int)#1},std::allocator<anonymous namespace'::DecodedMetadataBuilder::createSymbolicExtendedExistentialType(swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>)::{lambda(unsigned int,unsigned int)#1}>,void const* ()(unsigned int,unsigned int)>::__clone( uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_189B8D9E0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<anonymous namespace'::DecodedMetadataBuilder::createSymbolicExtendedExistentialType(swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>)::{lambda(unsigned int,unsigned int)#1},std::allocator<anonymous namespace'::DecodedMetadataBuilder::createSymbolicExtendedExistentialType(swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>)::{lambda(unsigned int,unsigned int)#1}>,void const* ()(unsigned int,unsigned int)>::__clone( uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_189B8D9E0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<anonymous namespace'::DecodedMetadataBuilder::createSymbolicExtendedExistentialType(swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>)::{lambda(unsigned int,unsigned int)#1},std::allocator<anonymous namespace'::DecodedMetadataBuilder::createSymbolicExtendedExistentialType(swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>)::{lambda(unsigned int,unsigned int)#1}>,void const* ()(unsigned int,unsigned int)>::operator()( uint64_t a1, _DWORD *a2, const char *a3, char *a4)
{
  if (*a2) {
    return 0LL;
  }
  unint64_t v4 = *(unsigned int *)a3;
  if (*(void *)(a1 + 16) <= v4) {
    return 0LL;
  }
  uint64_t result = *(void *)(*(void *)(a1 + 8) + 8 * v4);
  if (result) {
    BOOL v6 = (result & 1) == 0;
  }
  else {
    BOOL v6 = 0;
  }
  if (!v6) {
    swift::fatalError(0LL, "Expected metadata but got a metadata pack\n", a3, a4);
  }
  return result;
}

__n128 std::__function::__func<anonymous namespace'::DecodedMetadataBuilder::createSymbolicExtendedExistentialType(swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>)::{lambda(unsigned int,unsigned int)#2},std::allocator<anonymous namespace'::DecodedMetadataBuilder::createSymbolicExtendedExistentialType(swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>)::{lambda(unsigned int,unsigned int)#2}>,void const* ()(unsigned int,unsigned int)>::__clone( uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_189B8DA28;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<anonymous namespace'::DecodedMetadataBuilder::createSymbolicExtendedExistentialType(swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>)::{lambda(unsigned int,unsigned int)#2},std::allocator<anonymous namespace'::DecodedMetadataBuilder::createSymbolicExtendedExistentialType(swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>)::{lambda(unsigned int,unsigned int)#2}>,void const* ()(unsigned int,unsigned int)>::__clone( uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_189B8DA28;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<anonymous namespace'::DecodedMetadataBuilder::createSymbolicExtendedExistentialType(swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>)::{lambda(unsigned int,unsigned int)#2},std::allocator<anonymous namespace'::DecodedMetadataBuilder::createSymbolicExtendedExistentialType(swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>)::{lambda(unsigned int,unsigned int)#2}>,void const* ()(unsigned int,unsigned int)>::operator()( uint64_t a1, unsigned int *a2, const char *a3, char *a4)
{
  unint64_t v4 = *a2;
  if (*(void *)(a1 + 16) <= v4) {
    return 0LL;
  }
  uint64_t result = *(void *)(*(void *)(a1 + 8) + 8 * v4);
  if (result) {
    BOOL v6 = (result & 1) == 0;
  }
  else {
    BOOL v6 = 0;
  }
  if (!v6) {
    swift::fatalError(0LL, "Expected metadata but got a metadata pack\n", a3, a4);
  }
  return result;
}

void *std::__function::__func<anonymous namespace'::DecodedMetadataBuilder::createSymbolicExtendedExistentialType(swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>)::{lambda(swift::TargetMetadata<swift::InProcess> const*,unsigned int)#1},std::allocator<anonymous namespace'::DecodedMetadataBuilder::createSymbolicExtendedExistentialType(swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>)::{lambda(swift::TargetMetadata<swift::InProcess> const*,unsigned int)#1}>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_189B8DA70;
  return result;
}

void std::__function::__func<anonymous namespace'::DecodedMetadataBuilder::createSymbolicExtendedExistentialType(swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>)::{lambda(swift::TargetMetadata<swift::InProcess> const*,unsigned int)#1},std::allocator<anonymous namespace'::DecodedMetadataBuilder::createSymbolicExtendedExistentialType(swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>)::{lambda(swift::TargetMetadata<swift::InProcess> const*,unsigned int)#1}>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone( uint64_t a1, void *a2)
{
  *a2 = &unk_189B8DA70;
}

void std::__function::__func<anonymous namespace'::DecodedMetadataBuilder::createSymbolicExtendedExistentialType(swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>)::{lambda(swift::TargetMetadata<swift::InProcess> const*,unsigned int)#1},std::allocator<anonymous namespace'::DecodedMetadataBuilder::createSymbolicExtendedExistentialType(swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>)::{lambda(swift::TargetMetadata<swift::InProcess> const*,unsigned int)#1}>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::operator()()
{
}

void swift::ConcurrentReadableHashMap<anonymous namespace'::ProtocolDescriptorCacheEntry,swift::LazyMutex>::find<std::string>( unint64_t a1, char a2)
{
  uint64_t v3 = *(unsigned __int8 *)(a1 + 23);
  uint64_t v4 = *(void *)(a1 + 8);
  if ((v3 & 0x80u) != 0LL)
  {
    a1 = *(void *)a1;
    uint64_t v3 = v4;
  }

  __swift::__runtime::llvm::hashing::detail::hash_combine_range_impl<std::__wrap_iter<char const*>>( a1,  (_OWORD *)(a1 + v3));
  __asm { BR              X8 }

uint64_t sub_1817851F0()
{
  uint64_t v6 = (v3 >> (4 * v5)) & 0xF;
  if (!(_DWORD)v6) {
    return 0LL;
  }
  unint64_t v7 = (v6 - 1);
  if (v7 >= v2
    || ((uint64_t v8 = v1 + v7 * (unint64_t)v0, v9 = *((char *)v4 + 23), v9 >= 0) ? (v10 = v4) : (v10 = *v4),
        v9 >= 0 ? (size_t v11 = *((unsigned __int8 *)v4 + 23)) : (size_t v11 = (size_t)v4[1]),
        v11 != *(void *)(v8 + 8) || v11 && memcmp(v10, *(const void **)v8, v11)))
  {
    JUMPOUT(0x1817851D0LL);
  }

  return v8;
}

unint64_t __swift::__runtime::llvm::hashing::detail::hash_combine_range_impl<std::__wrap_iter<char const*>>( unint64_t a1, _OWORD *a2)
{
  if ((v4 & 1) == 0
  {
    unint64_t v96 = __swift::__runtime::llvm::hashing::detail::fixed_seed_override;
    if (!__swift::__runtime::llvm::hashing::detail::fixed_seed_override) {
      unint64_t v96 = 0xFF51AFD7ED558CCDLL;
    }
    __swift::__runtime::llvm::hashing::detail::get_execution_seed(void)::seed = v96;
  }

  unint64_t v5 = __swift::__runtime::llvm::hashing::detail::get_execution_seed(void)::seed;
  if ((_OWORD *)a1 == a2)
  {
    unint64_t v6 = 0LL;
    unint64_t v11 = a1;
    goto LABEL_17;
  }

  unint64_t v6 = 0LL;
  unint64_t v7 = 63LL;
  if (v7 < 0x1F)
  {
    p_src = &__src;
LABEL_13:
    unint64_t v11 = a1;
    unint64_t v13 = v6;
    do
    {
      unint64_t v6 = v13 + 1;
      char v14 = *(_BYTE *)v11++;
      *(_BYTE *)p_src = v14;
      if ((_OWORD *)v11 == a2) {
        break;
      }
      p_src = (__int128 *)((char *)&__src + v6);
      BOOL v15 = v13++ >= 0x3F;
    }

    while (!v15);
    goto LABEL_17;
  }

  p_src = &__src;
  unint64_t v9 = v7 + 1;
  unint64_t v6 = v9 & 0x60;
  __int128 v10 = *(_OWORD *)(a1 + 16);
  p_src = (__int128 *)((char *)&__src + v6);
  unint64_t v11 = a1 + v6;
  __int128 __src = *(_OWORD *)a1;
  __int128 v104 = v10;
  if (v6 != 32)
  {
    __int128 v12 = *(_OWORD *)(a1 + 48);
    __int128 v105 = *(_OWORD *)(a1 + 32);
    __int128 v106 = v12;
  }

  a1 += v9 & 0x60;
  if (v9 != v6) {
    goto LABEL_13;
  }
LABEL_17:
  if ((_OWORD *)v11 != a2)
  {
    unint64_t v16 = 0x9DDFEA08EB382D69LL
        * ((0x9DDFEA08EB382D69LL * (v5 ^ 0xB492B66FBE98F273LL)) ^ ((0x9DDFEA08EB382D69LL * (v5 ^ 0xB492B66FBE98F273LL)) >> 47) ^ 0xB492B66FBE98F273LL);
    uint64_t v17 = __ROR8__(v5 ^ 0xB492B66FBE98F273LL, 49);
    unint64_t v18 = v5 ^ (v5 >> 47);
    unint64_t v19 = v5 ^ (((0x9DDFEA08EB382D69LL * (v18 ^ (0xB492B66FBE98F273LL * v5))) ^ v5) >> 47) ^ (0x9DDFEA08EB382D69LL
                                                                                            * (v18 ^ (0xB492B66FBE98F273LL * v5)));
    unint64_t v20 = v17 + v5 + *((void *)&__src + 1);
    unint64_t v21 = *((void *)&v105 + 1) + v17 - 0x4B6D499041670D8DLL * __ROR8__(v106 + v5 - 0x4B6D499041670D8DLL * v5, 42);
    unint64_t v22 = v18 - 0x622015F714C7D297LL * (v16 ^ (v16 >> 47));
    uint64_t v23 = __src - 0x6D8ED9027DD26057LL * v5;
    unint64_t v24 = 0x9DDFEA08EB382D69LL * ((0x9DDFEA08EB382D69LL * v19) ^ ((0x9DDFEA08EB382D69LL * v19) >> 47));
    unint64_t v25 = (0xB492B66FBE98F273LL * __ROR8__(v20, 37)) ^ v24;
    unint64_t v26 = 0xB492B66FBE98F273LL * __ROR8__(v22, 33);
    uint64_t v27 = __ROR8__(v23 + *((void *)&__src + 1) + v104, 44)
        + v23
        + __ROR8__(v25 + v18 + v23 + *((void *)&v104 + 1), 21);
    uint64_t v28 = v23 + *((void *)&__src + 1) + v104 + *((void *)&v104 + 1);
    unint64_t v29 = v24 + v105 + v26;
    unint64_t v30 = __ROR8__(v21 + v104 + *((void *)&v106 + 1) + v29, 21)
        + v29
        + __ROR8__(*((void *)&v105 + 1) + v106 + v29, 44);
    unint64_t v31 = *((void *)&v105 + 1) + v106 + v29 + *((void *)&v106 + 1);
    unint64_t v32 = 64LL;
    while (1)
    {
      unint64_t v40 = 0LL;
      unint64_t v41 = v11;
      unint64_t v42 = (unint64_t)a2 + ~v11;
      if (v42 >= 0x3F) {
        unint64_t v42 = 63LL;
      }
      if (v42 < 0x1F) {
        break;
      }
      int v43 = (char *)&__src;
      unint64_t v44 = v42 + 1;
      unint64_t v40 = v44 & 0x60;
      __int128 v45 = *(_OWORD *)(v11 + 16);
      __int128 __src = *(_OWORD *)v11;
      __int128 v104 = v45;
      if (v40 == 32)
      {
        uint64_t v46 = 31LL;
      }

      else
      {
        __int128 v47 = *(_OWORD *)(v11 + 48);
        __int128 v105 = *(_OWORD *)(v11 + 32);
        __int128 v106 = v47;
        uint64_t v46 = 63LL;
      }

      int v43 = (char *)&__src + v40;
      v11 += v40;
      BOOL v48 = v41 + v46 + 1 == (void)a2;
      if (v44 != v40) {
        goto LABEL_31;
      }
LABEL_35:
      unint64_t v51 = v40 - 1;
      if ((v40 & 0x7FFFFFFFFFFFFFBFLL) == 0) {
        goto LABEL_21;
      }
      unint64_t v99 = v26;
      unint64_t v100 = v31;
      unint64_t v101 = v25;
      uint64_t v102 = v28;
      unint64_t v52 = v32;
      unint64_t v53 = v30;
      if (v40 == 63)
      {
        char v97 = HIBYTE(v106);
        memmove((char *)&__src + 1, &__src, 0x3FuLL);
        LOBYTE(__src) = v97;
LABEL_20:
        unint64_t v30 = v53;
        unint64_t v32 = v52;
        unint64_t v25 = v101;
        uint64_t v28 = v102;
        unint64_t v26 = v99;
        unint64_t v31 = v100;
        goto LABEL_21;
      }

      if (v40 == 1)
      {
        char v98 = __src;
        memmove(&__src, v43, 0x3FuLL);
        HIBYTE(v106) = v98;
        goto LABEL_20;
      }

      uint64_t v54 = 64 - v40;
      uint64_t v55 = v40;
      if (v40 != 64 - v40)
      {
        do
        {
          uint64_t v66 = v55;
          uint64_t v55 = v54;
          uint64_t v54 = v66 % v54;
        }

        while (v54);
        unint64_t v25 = v101;
        unint64_t v26 = v99;
        if (v55)
        {
          uint64_t v67 = (__int128 *)((char *)&__src + v55);
          do
          {
            unint64_t v68 = (__int128 *)((char *)v67 + v51);
            char v70 = *((_BYTE *)v67 - 1);
            uint64_t v67 = (__int128 *)((char *)v67 - 1);
            char v69 = v70;
            unsigned int v71 = v67;
            do
            {
              size_t v72 = v71;
              unsigned int v71 = v68;
              *(_BYTE *)size_t v72 = *(_BYTE *)v68;
              unint64_t v73 = (char *)((char *)&v107 - (char *)v68);
              BOOL v74 = __OFSUB__(v40, v73);
              uint64_t v76 = v40 - (void)v73;
              char v75 = (v76 < 0) ^ v74;
              unint64_t v68 = (__int128 *)((char *)&__src + v76);
              if (v75) {
                unint64_t v68 = (__int128 *)((char *)v71 + v40);
              }
            }

            while (v68 != v67);
            *(_BYTE *)unsigned int v71 = v69;
          }

          while (v67 != &__src);
        }

        goto LABEL_21;
      }

      unint64_t v56 = (unint64_t)a2 + ~v41;
      if (v56 >= 0x3F) {
        uint64_t v57 = 63LL;
      }
      else {
        uint64_t v57 = v56;
      }
      unint64_t v58 = 62 - v57;
      if (v56 < v58) {
        unint64_t v58 = v56;
      }
      if (v58 >= 0x3F) {
        unint64_t v59 = 63LL;
      }
      else {
        unint64_t v59 = v58;
      }
      unint64_t v60 = (char *)&__src;
      unint64_t v61 = v40;
      unint64_t v25 = v101;
      unint64_t v26 = v99;
      if (v59 < 7) {
        goto LABEL_78;
      }
      if (v56 >= 0x3F) {
        uint64_t v62 = 63LL;
      }
      else {
        uint64_t v62 = v56;
      }
      unint64_t v63 = 62 - v62;
      if (v56 >= v63) {
        unint64_t v56 = v63;
      }
      if (v56 >= 0x3F) {
        unint64_t v56 = 63LL;
      }
      if (&__src < (__int128 *)((char *)&__src + v51 + v56 + 2))
      {
        unint64_t v61 = v40;
      }

      unint64_t v64 = v59 + 1;
      if (v59 >= 0x1F)
      {
        unint64_t v65 = v64 & 0x60;
        __int128 v77 = (__int128 *)((char *)&__src + v40);
        __int128 v78 = __src;
        __int128 v79 = v104;
        __int128 v80 = *(__int128 *)((char *)&__src + v40 + 16);
        __int128 __src = *(__int128 *)((char *)&__src + v40);
        __int128 v104 = v80;
        _OWORD *v77 = v78;
        v77[1] = v79;
        if (v65 != 32)
        {
          unint64_t v81 = (__int128 *)((char *)&v105 + v40);
          __int128 v82 = v105;
          __int128 v83 = v106;
          __int128 v84 = *(__int128 *)((char *)&v105 + v40 + 16);
          __int128 v105 = *(__int128 *)((char *)&v105 + v40);
          __int128 v106 = v84;
          _OWORD *v81 = v82;
          v81[1] = v83;
        }

        if (v64 == v65) {
          goto LABEL_21;
        }
        if ((v64 & 0x18) == 0)
        {
          unint64_t v60 = (char *)&__src + v65;
          unint64_t v61 = v40 + v65;
LABEL_78:
          int v88 = v60 + 1;
          do
          {
            char v89 = *(v88 - 1);
            *(v88 - 1) = *((_BYTE *)&__src + v61);
            *((_BYTE *)&__src + v61) = v89;
            if (v88 == v43) {
              break;
            }
            ++v88;
          }

          while (v61++ != 63);
          goto LABEL_21;
        }
      }

      else
      {
        unint64_t v65 = 0LL;
      }

      unint64_t v61 = v40 + (v64 & 0x78);
      unint64_t v60 = (char *)&__src + (v64 & 0x78);
      uint64_t v85 = (uint64_t *)((char *)&__src + v65);
      unint64_t v86 = v65 - (v64 & 0x78);
      do
      {
        uint64_t v87 = *v85;
        uint64_t *v85 = *(uint64_t *)((char *)v85 + v40);
        *(uint64_t *)((char *)v85++ + v40) = v87;
        v86 += 8LL;
      }

      while (v86);
      if (v64 != (v64 & 0x78)) {
        goto LABEL_78;
      }
LABEL_21:
      unint64_t v33 = v21 + v28 + v26 + *((void *)&__src + 1);
      unint64_t v21 = *((void *)&v105 + 1) + v28 - 0x4B6D499041670D8DLL * __ROR8__(v21 + v27 + v106, 42);
      uint64_t v34 = __src - 0x4B6D499041670D8DLL * v27;
      uint64_t v35 = v34 + *((void *)&__src + 1) + v104;
      unint64_t v36 = 0xB492B66FBE98F273LL * __ROR8__(v33, 37);
      uint64_t v37 = __ROR8__(v25 + v31, 33);
      unint64_t v38 = v36 ^ v30;
      uint64_t v27 = __ROR8__(v35, 44) + v34 + __ROR8__(v38 + v31 + v34 + *((void *)&v104 + 1), 21);
      unint64_t v26 = 0xB492B66FBE98F273LL * v37;
      unint64_t v39 = 0xB492B66FBE98F273LL * v37 + v30 + v105;
      uint64_t v28 = v35 + *((void *)&v104 + 1);
      unint64_t v30 = __ROR8__(v21 + v104 + v39 + *((void *)&v106 + 1), 21)
          + v39
          + __ROR8__(*((void *)&v105 + 1) + v106 + v39, 44);
      unint64_t v31 = *((void *)&v105 + 1) + v106 + v39 + *((void *)&v106 + 1);
      v32 += v40;
      unint64_t v25 = v38;
      if (v48)
      {
        unint64_t v91 = 0x9DDFEA08EB382D69LL
            * (v31 ^ ((0x9DDFEA08EB382D69LL * (v28 ^ v31)) >> 47) ^ (0x9DDFEA08EB382D69LL * (v28 ^ v31)));
        uint64_t v92 = v38 - 0x4B6D499041670D8DLL * (v21 ^ (v21 >> 47)) - 0x622015F714C7D297LL * (v91 ^ (v91 >> 47));
        unint64_t v93 = 0x9DDFEA08EB382D69LL
            * (v30 ^ ((0x9DDFEA08EB382D69LL * (v27 ^ v30)) >> 47) ^ (0x9DDFEA08EB382D69LL * (v27 ^ v30)));
        unint64_t v94 = 0x9DDFEA08EB382D69LL * (v93 ^ (v93 >> 47)) - 0x4B6D499041670D8DLL * ((v32 ^ (v32 >> 47)) + v37);
        return 0x9DDFEA08EB382D69LL
             * ((0x9DDFEA08EB382D69LL
               * (v94 ^ ((0x9DDFEA08EB382D69LL * (v92 ^ v94)) >> 47) ^ (0x9DDFEA08EB382D69LL * (v92 ^ v94)))) ^ ((0x9DDFEA08EB382D69LL * (v94 ^ ((0x9DDFEA08EB382D69LL * (v92 ^ v94)) >> 47) ^ (0x9DDFEA08EB382D69LL * (v92 ^ v94)))) >> 47));
      }
    }

    int v43 = (char *)&__src;
LABEL_31:
    unint64_t v49 = v40;
    do
    {
      unint64_t v40 = v49 + 1;
      char v50 = *(_BYTE *)v11++;
      *int v43 = v50;
      int v43 = (char *)&__src + v49 + 1;
      BOOL v48 = v11 == (void)a2;
      if ((_OWORD *)v11 == a2) {
        break;
      }
      BOOL v15 = v49++ >= 0x3F;
    }

    while (!v15);
    goto LABEL_35;
  }

  return __swift::__runtime::llvm::hashing::detail::hash_short( (__swift::__runtime::llvm::hashing::detail *)&__src,  v6,  v5);
}

uint64_t swift::TargetPackPointer<swift::InProcess,swift::TargetMetadata>::getNumElements( void *a1, uint64_t a2, const char *a3, char *a4)
{
  if ((*a1 & 1) == 0) {
    swift::fatalError(0LL, "Cannot get length of on-stack pack", a3, a4);
  }
  return *(void *)((*a1 & 0xFFFFFFFFFFFFFFFELL) - 8);
}

void swift::TypeLookupError::TypeLookupError<swift::TypeLookupError swift::TypeLookupErrorImpl<int,unsigned int,int,char const*,unsigned long,unsigned int>(char const*,int,unsigned int,int,char const*,unsigned long,unsigned int)::{lambda(void)#1}>(swift::TypeLookupError swift::TypeLookupErrorImpl<int,unsigned int,int,char const*,unsigned long,unsigned int>(char const*,int,unsigned int,int,char const*,unsigned long,unsigned int)::{lambda(void)#1} const&)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke( uint64_t a1, int a2)
{
  __asm { BR              X10 }

uint64_t sub_181785A20()
{
  return *(void *)(v1 - 24);
}

void *swift::Demangle::__runtime::TypeDecoder<anonymous namespace'::DecodedMetadataBuilder>::decodeMangledFunctionInputType(swift::Demangle::__runtime::Node *,unsigned int,__swift::__runtime::llvm::SmallVectorImpl<swift::Demangle::__runtime::FunctionParam<swift::MetadataOrPack>> &,BOOL &)::{lambda(swift::Demangle::__runtime::Node *,swift::Demangle::__runtime::FunctionParam<swift::MetadataOrPack>&)#1}::operator()@<X0>( uint64_t a1@<X0>, const char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v4 = a3;
  unint64_t v6 = *(void ***)(a1 + 24);
  while (1)
  {
    unsigned int v7 = *((unsigned __int16 *)a2 + 8);
    if (v7 <= 0xCF) {
      break;
    }
    switch(v7)
    {
      case 0xD0u:
        unsigned int v8 = *(_DWORD *)(a3 + 24) & 0xFFFFFF80 | 2;
        break;
      case 0xD1u:
        unsigned int v8 = *(_DWORD *)(a3 + 24) & 0xFFFFFF80 | 3;
        break;
      case 0x146u:
        unsigned int v8 = *(_DWORD *)(a3 + 24) | 0x200;
        break;
      default:
        goto LABEL_31;
    }

uint64_t anonymous namespace'::DecodedMetadataBuilder::beginPackExpansion( void *a1, uint64_t a2, const char *a3, char *a4)
{
  if ((a2 & 1) == 0) {
    swift::fatalError(0LL, "Pack expansion count type should be a pack\n", a3, a4);
  }
  unsigned int v7 = (char *)a1[11];
  unint64_t v6 = a1[12];
  if ((unint64_t)v7 >= v6)
  {
    int v9 = (char *)a1[10];
    uint64_t v10 = (v7 - v9) >> 4;
    unint64_t v11 = v10 + 1;
    uint64_t v12 = v6 - (void)v9;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    BOOL v13 = (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0LL;
    unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
    if (!v13) {
      unint64_t v14 = v11;
    }
    if (v14 >> 60) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v15 = 16 * v14;
    unint64_t v16 = (char *)operator new(16 * v14);
    int v17 = &v16[16 * v10];
    uint64_t v18 = &v16[v15];
    *(void *)int v17 = a2;
    *((void *)v17 + 1) = 0LL;
    unsigned int v8 = v17 + 16;
    if (v7 == v9)
    {
      unint64_t v19 = &v16[16 * v10];
    }

    else
    {
      do
      {
        unint64_t v19 = v17 - 16;
        *((_OWORD *)v17 - 1) = *((_OWORD *)v7 - 1);
        v7 -= 16;
        v17 -= 16;
      }

      while (v7 != v9);
    }

    a1[10] = v19;
    a1[11] = v8;
    a1[12] = v18;
    if (v9) {
      operator delete(v9);
    }
  }

  else
  {
    *(void *)unsigned int v7 = a2;
    *((void *)v7 + 1) = 0LL;
    unsigned int v8 = v7 + 16;
  }

  a1[11] = v8;
  return *(void *)((a2 & 0xFFFFFFFFFFFFFFFELL) - 8);
}

uint64_t swift::Demangle::__runtime::ImplFunctionParam<swift::MetadataOrPack>::getConventionFromString( char *__s1, size_t __n)
{
  switch(__n)
  {
    case 3uLL:
      if (*(_WORD *)__s1 != 26944 || __s1[2] != 110) {
        goto LABEL_26;
      }
      uint64_t v5 = 0LL;
      uint64_t v6 = 0x100000000LL;
      break;
    case 6uLL:
      if (!memcmp(__s1, "@inout", __n))
      {
        uint64_t v6 = 0x100000000LL;
        uint64_t v5 = 3LL;
      }

      else
      {
        if (memcmp(__s1, "@owned", __n)) {
          goto LABEL_26;
        }
        uint64_t v6 = 0x100000000LL;
        uint64_t v5 = 5LL;
      }

      break;
    case 8uLL:
      if (memcmp(__s1, "@unowned", __n)) {
        goto LABEL_26;
      }
      uint64_t v6 = 0x100000000LL;
      uint64_t v5 = 6LL;
      break;
    case 0xBuLL:
      if (!memcmp(__s1, "@guaranteed", __n))
      {
        uint64_t v6 = 0x100000000LL;
        uint64_t v5 = 7LL;
      }

      else if (*(void *)__s1 == 0x776F5F6B63617040LL && *(void *)(__s1 + 3) == 0x64656E776F5F6B63LL)
      {
        uint64_t v6 = 0x100000000LL;
        uint64_t v5 = 8LL;
      }

      else
      {
        if (memcmp(__s1, "@pack_inout", __n)) {
          goto LABEL_26;
        }
        uint64_t v6 = 0x100000000LL;
        uint64_t v5 = 10LL;
      }

      break;
    case 0xCuLL:
      if (memcmp(__s1, "@in_constant", __n)) {
        goto LABEL_26;
      }
      uint64_t v6 = 0x100000000LL;
      uint64_t v5 = 1LL;
      break;
    case 0xEuLL:
      if (memcmp(__s1, "@in_guaranteed", __n)) {
        goto LABEL_26;
      }
      uint64_t v6 = 0x100000000LL;
      uint64_t v5 = 2LL;
      break;
    case 0x10uLL:
      if (!memcmp(__s1, "@inout_aliasable", __n))
      {
        uint64_t v6 = 0x100000000LL;
        uint64_t v5 = 4LL;
      }

      else
      {
        if (memcmp(__s1, "@pack_guaranteed", __n)) {
          goto LABEL_26;
        }
        uint64_t v6 = 0x100000000LL;
        uint64_t v5 = 9LL;
      }

      break;
    default:
LABEL_26:
      uint64_t v6 = 0LL;
      uint64_t v5 = 0LL;
      break;
  }

  return v5 | v6;
}

uint64_t swift::Demangle::__runtime::ImplFunctionParam<swift::MetadataOrPack>::getDifferentiabilityFromString( void *a1, uint64_t a2)
{
  if (!a2) {
    return 256LL;
  }
  return 0LL;
}

uint64_t __swift::__runtime::llvm::SmallVectorImpl<swift::Demangle::__runtime::ImplFunctionParam<swift::MetadataOrPack>>::emplace_back<swift::MetadataOrPack,swift::Demangle::__runtime::ImplParameterConvention &,swift::optionset::OptionSet<swift::Demangle::__runtime::ImplParameterInfoFlags,unsigned char> &>( uint64_t a1, uint64_t *a2, unsigned int *a3, unsigned __int8 *a4)
{
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  if (v4 >= *(_DWORD *)(a1 + 12)) {
    return __swift::__runtime::llvm::SmallVectorTemplateBase<swift::Demangle::__runtime::ImplFunctionParam<swift::MetadataOrPack>,true>::growAndEmplaceBack<swift::MetadataOrPack,swift::Demangle::__runtime::ImplParameterConvention &,swift::optionset::OptionSet<swift::Demangle::__runtime::ImplParameterInfoFlags,unsigned char> &>( a1,  a2,  a3,  a4);
  }
  uint64_t v5 = *(void *)a1 + 16 * v4;
  unsigned int v6 = *a3;
  unsigned __int8 v7 = *a4;
  *(void *)uint64_t v5 = *a2;
  *(_DWORD *)(v5 + 8) = v6;
  *(_BYTE *)(v5 + 12) = v7;
  LODWORD(__swift::__runtime::llvm::hash_value(v4, v5) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v5;
  return *(void *)a1 + 16LL * v5 - 16;
}

uint64_t __swift::__runtime::llvm::SmallVectorTemplateBase<swift::Demangle::__runtime::ImplFunctionParam<swift::MetadataOrPack>,true>::growAndEmplaceBack<swift::MetadataOrPack,swift::Demangle::__runtime::ImplParameterConvention &,swift::optionset::OptionSet<swift::Demangle::__runtime::ImplParameterInfoFlags,unsigned char> &>( uint64_t a1, uint64_t *a2, unsigned int *a3, unsigned __int8 *a4)
{
  uint64_t v5 = *a2;
  uint64_t v6 = *a3;
  uint64_t v7 = *a4;
  uint64_t v8 = *(unsigned int *)(a1 + 8);
  if (v8 >= *(_DWORD *)(a1 + 12))
  {
    __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (const void *)(a1 + 16), v8 + 1, 16LL);
    LODWORD(v8) = *(_DWORD *)(a1 + 8);
  }

  int v9 = (void *)(*(void *)a1 + 16LL * v8);
  *int v9 = v5;
  v9[1] = v6 | (v7 << 32);
  LODWORD(v9) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = (_DWORD)v9;
  return *(void *)a1 + 16LL * v9 - 16;
}

uint64_t swift::Demangle::__runtime::ImplFunctionResult<swift::MetadataOrPack>::getConventionFromString( _DWORD *a1, size_t __n)
{
  switch(__n)
  {
    case 4uLL:
      if (*a1 != 1953853248) {
        goto LABEL_13;
      }
      uint64_t v2 = 0LL;
      uint64_t v3 = 0x100000000LL;
      break;
    case 6uLL:
      if (memcmp(a1, "@owned", __n)) {
        goto LABEL_13;
      }
      uint64_t v3 = 0x100000000LL;
      uint64_t v2 = 1LL;
      break;
    case 8uLL:
      if (memcmp(a1, "@unowned", __n)) {
        goto LABEL_13;
      }
      uint64_t v3 = 0x100000000LL;
      uint64_t v2 = 2LL;
      break;
    case 9uLL:
      if (memcmp(a1, "@pack_out", __n)) {
        goto LABEL_13;
      }
      uint64_t v3 = 0x100000000LL;
      uint64_t v2 = 5LL;
      break;
    case 0xDuLL:
      if (memcmp(a1, "@autoreleased", __n)) {
        goto LABEL_13;
      }
      uint64_t v3 = 0x100000000LL;
      uint64_t v2 = 4LL;
      break;
    case 0x16uLL:
      uint64_t v3 = 0x100000000LL;
      uint64_t v2 = 3LL;
      break;
    default:
LABEL_13:
      uint64_t v3 = 0LL;
      uint64_t v2 = 0LL;
      break;
  }

  return v2 | v3;
}

uint64_t __swift::__runtime::llvm::SmallVectorImpl<swift::Demangle::__runtime::ImplFunctionResult<swift::MetadataOrPack>>::emplace_back<swift::MetadataOrPack,swift::Demangle::__runtime::ImplResultConvention &>( uint64_t a1, uint64_t *a2, unsigned int *a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12)) {
    return __swift::__runtime::llvm::SmallVectorTemplateBase<swift::Demangle::__runtime::ImplFunctionResult<swift::MetadataOrPack>,true>::growAndEmplaceBack<swift::MetadataOrPack,swift::Demangle::__runtime::ImplResultConvention &>( a1,  a2,  a3);
  }
  uint64_t v4 = *(void *)a1 + 16 * v3;
  unsigned int v5 = *a3;
  *(void *)uint64_t v4 = *a2;
  *(_DWORD *)(v4 + 8) = v5;
  *(_BYTE *)(v4 + 12) = 0;
  LODWORD(v4) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v4;
  return *(void *)a1 + 16LL * v4 - 16;
}

uint64_t __swift::__runtime::llvm::SmallVectorTemplateBase<swift::Demangle::__runtime::ImplFunctionResult<swift::MetadataOrPack>,true>::growAndEmplaceBack<swift::MetadataOrPack,swift::Demangle::__runtime::ImplResultConvention &>( uint64_t a1, uint64_t *a2, unsigned int *a3)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  uint64_t v6 = *(unsigned int *)(a1 + 8);
  if (v6 >= *(_DWORD *)(a1 + 12))
  {
    __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (const void *)(a1 + 16), v6 + 1, 16LL);
    LODWORD(v6) = *(_DWORD *)(a1 + 8);
  }

  uint64_t v7 = (void *)(*(void *)a1 + 16LL * v6);
  *uint64_t v7 = v4;
  v7[1] = v5;
  LODWORD(v7) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = (_DWORD)v7;
  return *(void *)a1 + 16LL * v7 - 16;
}

uint64_t *swift::Demangle::__runtime::TypeDecoder<anonymous namespace'::DecodedMetadataBuilder>::decodeMangledType(swift::Demangle::__runtime::Node *,unsigned int,BOOL)::{lambda(swift::MetadataOrPack)#1}::operator()( uint64_t *result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *result;
  uint64_t v5 = *(unsigned int *)(*result + 8);
  if (v5 >= *(_DWORD *)(*result + 12))
  {
    uint64_t result = (uint64_t *)__swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod( *result,  (const void *)(v4 + 16),  v5 + 1,  8LL);
    LODWORD(__swift::__runtime::llvm::hash_value(v4, v5) = *(_DWORD *)(v4 + 8);
  }

  *(void *)(*(void *)v4 + 8LL * __swift::__runtime::llvm::hash_value(v4, v5) = a2;
  ++*(_DWORD *)(v4 + 8);
  uint64_t v6 = v3[1];
  __int128 v7 = *(_OWORD *)v3[2];
  uint64_t v8 = *(unsigned int *)(v6 + 8);
  if (v8 >= *(_DWORD *)(v6 + 12))
  {
    __int128 v9 = *(_OWORD *)v3[2];
    uint64_t result = (uint64_t *)__swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod( v3[1],  (const void *)(v6 + 16),  v8 + 1,  16LL);
    __int128 v7 = v9;
    LODWORD(v8) = *(_DWORD *)(v6 + 8);
  }

  *(_OWORD *)(*(void *)v6 + 16LL * v8) = v7;
  ++*(_DWORD *)(v6 + 8);
  return result;
}

uint64_t __swift::__runtime::llvm::SmallVectorTemplateBase<std::pair<unsigned int,unsigned int>,true>::growAndEmplaceBack<unsigned long long,unsigned long long>( uint64_t a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  uint64_t v6 = *(unsigned int *)(a1 + 8);
  if (v6 >= *(_DWORD *)(a1 + 12))
  {
    __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (const void *)(a1 + 16), v6 + 1, 8LL);
    LODWORD(v6) = *(_DWORD *)(a1 + 8);
  }

  *(void *)(*(void *)a1 + 8LL * v6) = v4 | (v5 << 32);
  unsigned int v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  return *(void *)a1 + 8LL * v7 - 8;
}

uint64_t __swift::__runtime::llvm::SmallVectorTemplateBase<std::pair<swift::MetadataOrPack,swift::MetadataOrPack>,true>::growAndEmplaceBack<swift::MetadataOrPack&,swift::MetadataOrPack>( uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  uint64_t v6 = *(unsigned int *)(a1 + 8);
  if (v6 >= *(_DWORD *)(a1 + 12))
  {
    __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (const void *)(a1 + 16), v6 + 1, 16LL);
    LODWORD(v6) = *(_DWORD *)(a1 + 8);
  }

  unsigned int v7 = (void *)(*(void *)a1 + 16LL * v6);
  *unsigned int v7 = v4;
  v7[1] = v5;
  LODWORD(v7) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = (_DWORD)v7;
  return *(void *)a1 + 16LL * v7 - 16;
}

uint64_t __swift::__runtime::llvm::SmallVectorTemplateBase<anonymous namespace'::DecodedMetadataBuilder::BuiltSILBoxField,true>::growAndEmplaceBack<swift::MetadataOrPack,BOOL &>( uint64_t a1, uint64_t *a2, unsigned __int8 *a3)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  uint64_t v6 = *(unsigned int *)(a1 + 8);
  if (v6 >= *(_DWORD *)(a1 + 12))
  {
    __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (const void *)(a1 + 16), v6 + 1, 16LL);
    LODWORD(v6) = *(_DWORD *)(a1 + 8);
  }

  unsigned int v7 = (void *)(*(void *)a1 + 16LL * v6);
  *unsigned int v7 = v4;
  v7[1] = v5;
  LODWORD(v7) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = (_DWORD)v7;
  return *(void *)a1 + 16LL * v7 - 16;
}

void *swift::Lazy<anonymous namespace'::OpaqueTypeMappings>::defaultInitCallback(void *result)
{
  *uint64_t result = 0LL;
  result[1] = 0LL;
  result[2] = 0LL;
  return result;
}

void *std::__function::__func<anonymous namespace'::DecodedMetadataBuilder::resolveOpaqueType(swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::ArrayRef<__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>>,unsigned int)::{lambda(unsigned int,unsigned int)#1},std::allocator<anonymous namespace'::DecodedMetadataBuilder::resolveOpaqueType(swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::ArrayRef<__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>>,unsigned int)::{lambda(unsigned int,unsigned int)#1}>,void const* ()(unsigned int,unsigned int)>::__clone( uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_189B8DAB8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<anonymous namespace'::DecodedMetadataBuilder::resolveOpaqueType(swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::ArrayRef<__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>>,unsigned int)::{lambda(unsigned int,unsigned int)#1},std::allocator<anonymous namespace'::DecodedMetadataBuilder::resolveOpaqueType(swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::ArrayRef<__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>>,unsigned int)::{lambda(unsigned int,unsigned int)#1}>,void const* ()(unsigned int,unsigned int)>::__clone( uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_189B8DAB8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<anonymous namespace'::DecodedMetadataBuilder::resolveOpaqueType(swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::ArrayRef<__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>>,unsigned int)::{lambda(unsigned int,unsigned int)#1},std::allocator<anonymous namespace'::DecodedMetadataBuilder::resolveOpaqueType(swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::ArrayRef<__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>>,unsigned int)::{lambda(unsigned int,unsigned int)#1}>,void const* ()(unsigned int,unsigned int)>::operator()( uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!*(void *)(v3 + 16)) {
    return 0LL;
  }
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  swift::SubstGenericParametersFromMetadata::setup(*(unsigned int ***)(a1 + 8));
  uint64_t v6 = *(void *)(v3 + 24) + 32 * v4;
  unsigned int v7 = *(_DWORD *)(v3 + 300) + *(_DWORD *)(v6 + 20);
  if (*(_BYTE *)(v6 + 28))
  {
    uint64_t v8 = *(uint8x16_t **)v6;
    __int128 v9 = (uint8x16_t *)(*(void *)v6 + v5);
    if ((v9->i8[0] & 0x80000000) == 0) {
      return 0LL;
    }
    if ((_DWORD)v5)
    {
      if (v5 < 8)
      {
        unint64_t v11 = v8;
        goto LABEL_22;
      }

      if (v5 >= 0x20)
      {
        uint64_t v12 = v5 & 0xFFFFFFE0;
        int32x4_t v13 = 0uLL;
        int32x4_t v14 = (int32x4_t)v7;
        uint64_t v15 = v8 + 1;
        uint64_t v16 = v12;
        int32x4_t v17 = 0uLL;
        int32x4_t v18 = 0uLL;
        int32x4_t v19 = 0uLL;
        int32x4_t v20 = 0uLL;
        int32x4_t v21 = 0uLL;
        int32x4_t v22 = 0uLL;
        do
        {
          uint8x16_t v23 = vshrq_n_u8(v15[-1], 7uLL);
          uint8x16_t v24 = vshrq_n_u8(*v15, 7uLL);
          uint16x8_t v25 = vmovl_u8(*(uint8x8_t *)v23.i8);
          uint16x8_t v26 = vmovl_high_u8(v23);
          uint16x8_t v27 = vmovl_u8(*(uint8x8_t *)v24.i8);
          uint16x8_t v28 = vmovl_high_u8(v24);
          int32x4_t v18 = (int32x4_t)vaddw_high_u16((uint32x4_t)v18, v26);
          int32x4_t v17 = (int32x4_t)vaddw_u16((uint32x4_t)v17, *(uint16x4_t *)v26.i8);
          int32x4_t v13 = (int32x4_t)vaddw_high_u16((uint32x4_t)v13, v25);
          int32x4_t v14 = (int32x4_t)vaddw_u16((uint32x4_t)v14, *(uint16x4_t *)v25.i8);
          int32x4_t v22 = (int32x4_t)vaddw_high_u16((uint32x4_t)v22, v28);
          int32x4_t v21 = (int32x4_t)vaddw_u16((uint32x4_t)v21, *(uint16x4_t *)v28.i8);
          int32x4_t v20 = (int32x4_t)vaddw_high_u16((uint32x4_t)v20, v27);
          int32x4_t v19 = (int32x4_t)vaddw_u16((uint32x4_t)v19, *(uint16x4_t *)v27.i8);
          v15 += 2;
          v16 -= 32LL;
        }

        while (v16);
        unsigned int v7 = vaddvq_s32( vaddq_s32( vaddq_s32(vaddq_s32(v19, v14), vaddq_s32(v21, v17)),  vaddq_s32(vaddq_s32(v20, v13), vaddq_s32(v22, v18))));
        if (v12 == v5) {
          return *(void *)(*(void *)(v3 + 16) + 8LL * v7);
        }
        if ((v5 & 0x18) == 0)
        {
          unint64_t v11 = (uint8x16_t *)((char *)v8 + v12);
          do
          {
LABEL_22:
            unsigned int v35 = v11->u8[0];
            unint64_t v11 = (uint8x16_t *)((char *)v11 + 1);
            v7 += v35 >> 7;
          }

          while (v11 != v9);
          return *(void *)(*(void *)(v3 + 16) + 8LL * v7);
        }
      }

      else
      {
        uint64_t v12 = 0LL;
      }

      unint64_t v11 = (uint8x16_t *)((char *)v8 + (v5 & 0xFFFFFFF8));
      int32x4_t v29 = 0uLL;
      int32x4_t v30 = (int32x4_t)v7;
      unint64_t v31 = (uint8x8_t *)&v8->i8[v12];
      uint64_t v32 = v12 - (v5 & 0xFFFFFFF8);
      do
      {
        uint8x8_t v33 = *v31++;
        uint16x8_t v34 = vmovl_u8(vshr_n_u8(v33, 7uLL));
        int32x4_t v29 = (int32x4_t)vaddw_high_u16((uint32x4_t)v29, v34);
        int32x4_t v30 = (int32x4_t)vaddw_u16((uint32x4_t)v30, *(uint16x4_t *)v34.i8);
        v32 += 8LL;
      }

      while (v32);
      unsigned int v7 = vaddvq_s32(vaddq_s32(v30, v29));
      if ((v5 & 0xFFFFFFF8) == v5) {
        return *(void *)(*(void *)(v3 + 16) + 8LL * v7);
      }
      goto LABEL_22;
    }
  }

  else
  {
    v7 += v5;
  }

  return *(void *)(*(void *)(v3 + 16) + 8LL * v7);
}

void *std::__function::__func<anonymous namespace'::DecodedMetadataBuilder::resolveOpaqueType(swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::ArrayRef<__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>>,unsigned int)::{lambda(swift::TargetMetadata<swift::InProcess> const*,unsigned int)#1},std::allocator<anonymous namespace'::DecodedMetadataBuilder::resolveOpaqueType(swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::ArrayRef<__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>>,unsigned int)::{lambda(swift::TargetMetadata<swift::InProcess> const*,unsigned int)#1}>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone( uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_189B8DB00;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<anonymous namespace'::DecodedMetadataBuilder::resolveOpaqueType(swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::ArrayRef<__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>>,unsigned int)::{lambda(swift::TargetMetadata<swift::InProcess> const*,unsigned int)#1},std::allocator<anonymous namespace'::DecodedMetadataBuilder::resolveOpaqueType(swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::ArrayRef<__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>>,unsigned int)::{lambda(swift::TargetMetadata<swift::InProcess> const*,unsigned int)#1}>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone( uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_189B8DB00;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<anonymous namespace'::DecodedMetadataBuilder::resolveOpaqueType(swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::ArrayRef<__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>>,unsigned int)::{lambda(swift::TargetMetadata<swift::InProcess> const*,unsigned int)#1},std::allocator<anonymous namespace'::DecodedMetadataBuilder::resolveOpaqueType(swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::ArrayRef<__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>>,unsigned int)::{lambda(swift::TargetMetadata<swift::InProcess> const*,unsigned int)#1}>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::operator()( uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!*(void *)(v3 + 16)) {
    return 0LL;
  }
  int v4 = *a3;
  swift::SubstGenericParametersFromMetadata::setup(*(unsigned int ***)(a1 + 8));
  return *(void *)(*(void *)(v3 + 16) + 8LL * (*(_DWORD *)(v3 + 296) + v4 + *(_DWORD *)(v3 + 300)));
}

void *std::__function::__func<swift_getOpaqueTypeMetadataImpl(swift::MetadataRequest,void const* const*,swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*,unsigned int)::$_0,std::allocator<swift_getOpaqueTypeMetadataImpl(swift::MetadataRequest,void const* const*,swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*,unsigned int)::$_0>,void const* ()(unsigned int,unsigned int)>::__clone( uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_189B8DB48;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift_getOpaqueTypeMetadataImpl(swift::MetadataRequest,void const* const*,swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*,unsigned int)::$_0,std::allocator<swift_getOpaqueTypeMetadataImpl(swift::MetadataRequest,void const* const*,swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*,unsigned int)::$_0>,void const* ()(unsigned int,unsigned int)>::__clone( uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_189B8DB48;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<swift_getOpaqueTypeMetadataImpl(swift::MetadataRequest,void const* const*,swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*,unsigned int)::$_0,std::allocator<swift_getOpaqueTypeMetadataImpl(swift::MetadataRequest,void const* const*,swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*,unsigned int)::$_0>,void const* ()(unsigned int,unsigned int)>::operator()( uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!*(void *)(v3 + 16)) {
    return 0LL;
  }
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  swift::SubstGenericParametersFromMetadata::setup(*(unsigned int ***)(a1 + 8));
  uint64_t v6 = *(void *)(v3 + 24) + 32 * v4;
  unsigned int v7 = *(_DWORD *)(v3 + 300) + *(_DWORD *)(v6 + 20);
  if (*(_BYTE *)(v6 + 28))
  {
    uint64_t v8 = *(uint8x16_t **)v6;
    __int128 v9 = (uint8x16_t *)(*(void *)v6 + v5);
    if ((v9->i8[0] & 0x80000000) == 0) {
      return 0LL;
    }
    if ((_DWORD)v5)
    {
      if (v5 < 8)
      {
        unint64_t v11 = v8;
        goto LABEL_22;
      }

      if (v5 >= 0x20)
      {
        uint64_t v12 = v5 & 0xFFFFFFE0;
        int32x4_t v13 = 0uLL;
        int32x4_t v14 = (int32x4_t)v7;
        uint64_t v15 = v8 + 1;
        uint64_t v16 = v12;
        int32x4_t v17 = 0uLL;
        int32x4_t v18 = 0uLL;
        int32x4_t v19 = 0uLL;
        int32x4_t v20 = 0uLL;
        int32x4_t v21 = 0uLL;
        int32x4_t v22 = 0uLL;
        do
        {
          uint8x16_t v23 = vshrq_n_u8(v15[-1], 7uLL);
          uint8x16_t v24 = vshrq_n_u8(*v15, 7uLL);
          uint16x8_t v25 = vmovl_u8(*(uint8x8_t *)v23.i8);
          uint16x8_t v26 = vmovl_high_u8(v23);
          uint16x8_t v27 = vmovl_u8(*(uint8x8_t *)v24.i8);
          uint16x8_t v28 = vmovl_high_u8(v24);
          int32x4_t v18 = (int32x4_t)vaddw_high_u16((uint32x4_t)v18, v26);
          int32x4_t v17 = (int32x4_t)vaddw_u16((uint32x4_t)v17, *(uint16x4_t *)v26.i8);
          int32x4_t v13 = (int32x4_t)vaddw_high_u16((uint32x4_t)v13, v25);
          int32x4_t v14 = (int32x4_t)vaddw_u16((uint32x4_t)v14, *(uint16x4_t *)v25.i8);
          int32x4_t v22 = (int32x4_t)vaddw_high_u16((uint32x4_t)v22, v28);
          int32x4_t v21 = (int32x4_t)vaddw_u16((uint32x4_t)v21, *(uint16x4_t *)v28.i8);
          int32x4_t v20 = (int32x4_t)vaddw_high_u16((uint32x4_t)v20, v27);
          int32x4_t v19 = (int32x4_t)vaddw_u16((uint32x4_t)v19, *(uint16x4_t *)v27.i8);
          v15 += 2;
          v16 -= 32LL;
        }

        while (v16);
        unsigned int v7 = vaddvq_s32( vaddq_s32( vaddq_s32(vaddq_s32(v19, v14), vaddq_s32(v21, v17)),  vaddq_s32(vaddq_s32(v20, v13), vaddq_s32(v22, v18))));
        if (v12 == v5) {
          return *(void *)(*(void *)(v3 + 16) + 8LL * v7);
        }
        if ((v5 & 0x18) == 0)
        {
          unint64_t v11 = (uint8x16_t *)((char *)v8 + v12);
          do
          {
LABEL_22:
            unsigned int v35 = v11->u8[0];
            unint64_t v11 = (uint8x16_t *)((char *)v11 + 1);
            v7 += v35 >> 7;
          }

          while (v11 != v9);
          return *(void *)(*(void *)(v3 + 16) + 8LL * v7);
        }
      }

      else
      {
        uint64_t v12 = 0LL;
      }

      unint64_t v11 = (uint8x16_t *)((char *)v8 + (v5 & 0xFFFFFFF8));
      int32x4_t v29 = 0uLL;
      int32x4_t v30 = (int32x4_t)v7;
      unint64_t v31 = (uint8x8_t *)&v8->i8[v12];
      uint64_t v32 = v12 - (v5 & 0xFFFFFFF8);
      do
      {
        uint8x8_t v33 = *v31++;
        uint16x8_t v34 = vmovl_u8(vshr_n_u8(v33, 7uLL));
        int32x4_t v29 = (int32x4_t)vaddw_high_u16((uint32x4_t)v29, v34);
        int32x4_t v30 = (int32x4_t)vaddw_u16((uint32x4_t)v30, *(uint16x4_t *)v34.i8);
        v32 += 8LL;
      }

      while (v32);
      unsigned int v7 = vaddvq_s32(vaddq_s32(v30, v29));
      if ((v5 & 0xFFFFFFF8) == v5) {
        return *(void *)(*(void *)(v3 + 16) + 8LL * v7);
      }
      goto LABEL_22;
    }
  }

  else
  {
    v7 += v5;
  }

  return *(void *)(*(void *)(v3 + 16) + 8LL * v7);
}

void *std::__function::__func<swift_getOpaqueTypeMetadataImpl(swift::MetadataRequest,void const* const*,swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*,unsigned int)::$_1,std::allocator<swift_getOpaqueTypeMetadataImpl(swift::MetadataRequest,void const* const*,swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*,unsigned int)::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone( uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_189B8DB90;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift_getOpaqueTypeMetadataImpl(swift::MetadataRequest,void const* const*,swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*,unsigned int)::$_1,std::allocator<swift_getOpaqueTypeMetadataImpl(swift::MetadataRequest,void const* const*,swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*,unsigned int)::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone( uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_189B8DB90;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<swift_getOpaqueTypeMetadataImpl(swift::MetadataRequest,void const* const*,swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*,unsigned int)::$_1,std::allocator<swift_getOpaqueTypeMetadataImpl(swift::MetadataRequest,void const* const*,swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*,unsigned int)::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::operator()( uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!*(void *)(v3 + 16)) {
    return 0LL;
  }
  int v4 = *a3;
  swift::SubstGenericParametersFromMetadata::setup(*(unsigned int ***)(a1 + 8));
  return *(void *)(*(void *)(v3 + 16) + 8LL * (*(_DWORD *)(v3 + 296) + v4 + *(_DWORD *)(v3 + 300)));
}

uint64_t getLocalGenericParams(_DWORD *a1)
{
  if ((*a1 & 0x80) != 0) {
    return ((uint64_t (*)(void))((char *)&loc_181786DFC + 4 * byte_18180C976[(*a1 & 0x1F) - 1]))();
  }
  else {
    return 0LL;
  }
}

uint64_t __swift::__runtime::llvm::SmallVectorImpl<swift::MetadataOrPack>::insert<swift::MetadataOrPack const*,void>( uint64_t a1, uint64_t a2, char *__src, char *a4)
{
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = (a2 - *(void *)a1) >> 3;
  uint64_t v10 = *(unsigned int *)(a1 + 8);
  unint64_t v9 = *(unsigned int *)(a1 + 12);
  unsigned int v11 = *(_DWORD *)(a1 + 8);
  size_t v12 = a4 - __src;
  unint64_t v13 = (a4 - __src) >> 3;
  unint64_t v14 = v13 + v10;
  if (*(void *)a1 + 8LL * v10 != a2)
  {
    if (v14 > v9)
    {
      __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (const void *)(a1 + 16), v14, 8LL);
      uint64_t v7 = *(void *)a1;
      uint64_t v10 = *(unsigned int *)(a1 + 8);
      unsigned int v11 = *(_DWORD *)(a1 + 8);
    }

    uint64_t v15 = (char *)(v7 + 8 * v10);
    __srca = (char *)(v7 + 8 * v8);
    size_t v16 = v15 - __srca;
    unint64_t v17 = (v15 - __srca) >> 3;
    if (v17 < v13)
    {
      unsigned int v18 = v11 + (v12 >> 3);
      *(_DWORD *)(a1 + 8) = v18;
      if (v8 == v10)
      {
        int32x4_t v19 = __src;
        uint64_t v21 = v7 + 8 * v8;
        int32x4_t v20 = a4;
        goto LABEL_34;
      }

      uint64_t v21 = v7 + 8 * v8;
      memcpy((void *)(v7 + 8LL * v18 - 8 * v17), __srca, v16);
      if (v16 < 0x20 || (unint64_t)(__srca - __src) < 0x20)
      {
        uint16x8_t v28 = (char *)(v7 + 8 * v8);
        uint64_t v29 = (v15 - __srca) >> 3;
        int32x4_t v19 = __src;
        int32x4_t v20 = a4;
      }

      else
      {
        unint64_t v27 = 8 * (v17 & 0xFFFFFFFFFFFFFFFCLL);
        uint16x8_t v28 = &__srca[v27];
        uint64_t v29 = (v16 >> 3) & 3;
        int32x4_t v19 = &__src[v27];
        int32x4_t v30 = (__int128 *)(__src + 16);
        unint64_t v31 = (_OWORD *)(v7 + 8 * v8 + 16);
        unint64_t v32 = v17 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          __int128 v33 = *v30;
          *(v31 - 1) = *(v30 - 1);
          *unint64_t v31 = v33;
          v30 += 2;
          v31 += 2;
          v32 -= 4LL;
        }

        while (v32);
        int32x4_t v20 = a4;
        if (v17 == (v17 & 0xFFFFFFFFFFFFFFFCLL))
        {
LABEL_34:
          if (v19 != v20) {
            memcpy(v15, v19, v20 - v19);
          }
          return v21;
        }
      }

      do
      {
        uint64_t v42 = *(void *)v19;
        v19 += 8;
        *(void *)uint16x8_t v28 = v42;
        v28 += 8;
        --v29;
      }

      while (v29);
      goto LABEL_34;
    }

    uint64_t v22 = 8 * v13;
    uint64_t v23 = v10;
    if (v13 + v10 > *(unsigned int *)(a1 + 12))
    {
      __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (const void *)(a1 + 16), v13 + v10, 8LL);
      uint64_t v23 = *(unsigned int *)(a1 + 8);
      unsigned int v11 = *(_DWORD *)(a1 + 8);
    }

    uint8x16_t v24 = &v15[-v22];
    if (a4 == __src) {
      goto LABEL_28;
    }
    uint16x8_t v25 = (void *)(*(void *)a1 + 8 * v23);
    if (v12 - 8 >= 0x78)
    {
      uint64_t v34 = 8 * v23 + *(void *)a1;
      uint16x8_t v26 = &v15[-v22];
      if ((v12 & 0xFFFFFFFFFFFFFFF8LL) - v7 - 8 * v10 + v34 >= 0x20)
      {
        unint64_t v35 = ((v12 - 8) >> 3) + 1;
        uint64_t v36 = 8 * (v35 & 0x3FFFFFFFFFFFFFFCLL);
        uint16x8_t v25 = (void *)((char *)v25 + v36);
        uint16x8_t v26 = &v24[v36];
        uint64_t v37 = (__int128 *)(8 * v10 - 8 * v13 + v7 + 16);
        uint64_t v38 = (_OWORD *)(v34 + 16);
        uint64_t v39 = v35 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          __int128 v40 = *v37;
          *(v38 - 1) = *(v37 - 1);
          *uint64_t v38 = v40;
          v37 += 2;
          v38 += 2;
          v39 -= 4LL;
        }

        while (v39);
        if (v35 == (v35 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_28;
        }
      }
    }

    else
    {
      uint16x8_t v26 = &v15[-v22];
    }

    do
    {
      uint64_t v41 = *(void *)v26;
      v26 += 8;
      *v25++ = v41;
    }

    while (v26 != v15);
LABEL_28:
    *(_DWORD *)(a1 + 8) = v11 + v13;
    uint64_t v21 = v7 + 8 * v8;
    if (v24 != __srca) {
      memmove(&__srca[v22], __srca, &v15[-v22] - __srca);
    }
    if (a4 != __src) {
      memmove(__srca, __src, v12);
    }
    return v21;
  }

  if (v14 > v9)
  {
    __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (const void *)(a1 + 16), v14, 8LL);
    unsigned int v11 = *(_DWORD *)(a1 + 8);
    uint64_t v7 = *(void *)a1;
  }

  if (__src != a4)
  {
    memcpy((void *)(v7 + 8LL * v11), __src, v12);
    unsigned int v11 = *(_DWORD *)(a1 + 8);
    uint64_t v7 = *(void *)a1;
  }

  *(_DWORD *)(a1 + 8) = v11 + (v12 >> 3);
  return v7 + 8 * v8;
}

void swift::TypeLookupError::TypeLookupError<_gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_0>(_gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_0 const&)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke( uint64_t a1, int a2)
{
  __asm { BR              X10 }

char *sub_1817871A4( __int128 a1, uint64_t a2, uint64_t a3, std::string *a4, std::string *a5, std::string *a6, std::string *a7, std::string *a8, uint64_t a9, std::string *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33)
{
  unint64_t v35 = std::string::append(&v64, "incorrect number of generic args (");
  std::string::size_type cap = v35->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v65.__r_.__value_.__l.__data_ = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  v65.__r_.__value_.__l.__cap_ = cap;
  v35->__r_.__value_.__l.__size_ = 0LL;
  v35->__r_.__value_.__l.__cap_ = 0LL;
  v35->__r_.__value_.__r.__words[0] = 0LL;
  std::to_string(&v63, *(void *)(v33 + 32));
  if ((v63.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v37 = &v63;
  }
  else {
    uint64_t v37 = (std::string *)v63.__r_.__value_.__r.__words[0];
  }
  if ((v63.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = v63.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = v63.__r_.__value_.__l.__size_;
  }
  uint64_t v39 = std::string::append(&v65, (const std::string::value_type *)v37, size);
  std::string::size_type v40 = v39->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v66.__r_.__value_.__l.__data_ = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  v66.__r_.__value_.__l.__cap_ = v40;
  v39->__r_.__value_.__l.__size_ = 0LL;
  v39->__r_.__value_.__l.__cap_ = 0LL;
  v39->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v41 = std::string::append(&v66, "), ");
  std::string::size_type v42 = v41->__r_.__value_.__l.__cap_;
  *(_OWORD *)(v34 - 160) = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
  *(void *)(v34 - 144) = v42;
  v41->__r_.__value_.__l.__size_ = 0LL;
  v41->__r_.__value_.__l.__cap_ = 0LL;
  v41->__r_.__value_.__r.__words[0] = 0LL;
  unint64_t LocalGenericParams = getLocalGenericParams(*(_DWORD **)(v33 + 40));
  std::to_string(&v62, LocalGenericParams);
  if ((v62.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    unint64_t v44 = &v62;
  }
  else {
    unint64_t v44 = (std::string *)v62.__r_.__value_.__r.__words[0];
  }
  if ((v62.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v45 = v62.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v45 = v62.__r_.__value_.__l.__size_;
  }
  uint64_t v46 = std::string::append((std::string *)(v34 - 160), (const std::string::value_type *)v44, v45);
  std::string::size_type v47 = v46->__r_.__value_.__l.__cap_;
  *(_OWORD *)(v34 - 128) = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
  *(void *)(v34 - 112) = v47;
  v46->__r_.__value_.__l.__size_ = 0LL;
  v46->__r_.__value_.__l.__cap_ = 0LL;
  v46->__r_.__value_.__r.__words[0] = 0LL;
  unint64_t v48 = std::string::append((std::string *)(v34 - 128), " local params, ");
  std::string::size_type v49 = v48->__r_.__value_.__l.__cap_;
  *(_OWORD *)(v34 - 96) = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
  *(void *)(v34 - 80) = v49;
  v48->__r_.__value_.__l.__size_ = 0LL;
  v48->__r_.__value_.__l.__cap_ = 0LL;
  v48->__r_.__value_.__r.__words[0] = 0LL;
  std::to_string(&v61, *(_DWORD *)(v33 + 48));
  if ((v61.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    unint64_t v50 = &v61;
  }
  else {
    unint64_t v50 = (std::string *)v61.__r_.__value_.__r.__words[0];
  }
  if ((v61.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v51 = v61.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v51 = v61.__r_.__value_.__l.__size_;
  }
  unint64_t v52 = std::string::append((std::string *)(v34 - 96), (const std::string::value_type *)v50, v51);
  std::string::size_type v53 = v52->__r_.__value_.__l.__cap_;
  *(_OWORD *)(v34 - 64) = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
  *(void *)(v34 - 48) = v53;
  v52->__r_.__value_.__l.__size_ = 0LL;
  v52->__r_.__value_.__l.__cap_ = 0LL;
  v52->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v54 = std::string::append((std::string *)(v34 - 64), " total params");
  std::string v60 = *v54;
  v54->__r_.__value_.__r.__words[0] = 0LL;
  v54->__r_.__value_.__l.__size_ = 0LL;
  v54->__r_.__value_.__l.__cap_ = 0LL;
  if (*(char *)(v34 - 41) < 0)
  {
    operator delete(*(void **)(v34 - 64));
    if (((char)v61.__r_.__value_.__s.__size_ & 0x80000000) == 0)
    {
LABEL_21:
      goto LABEL_37;
    }
  }

  else if (((char)v61.__r_.__value_.__s.__size_ & 0x80000000) == 0)
  {
    goto LABEL_21;
  }

  operator delete(v61.__r_.__value_.__l.__data_);
  if ((*(char *)(v34 - 73) & 0x80000000) == 0)
  {
LABEL_22:
    goto LABEL_38;
  }

std::string *_gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_10::operator() const(void)::{lambda(void)#1}::operator()@<X0>( const void **a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  std::string::append(a2, "_gatherGenericParameters: context: ");
  swift::SymbolInfo::lookup((swift::SymbolInfo *)*a1, (uint64_t)&__p);
  if (v21)
  {
    int v4 = (const std::string::value_type *)_ContiguousArrayBuffer.mutableCount.getter((uint64_t)&__p);
    std::string::append(a2, v4);
    std::string::append(a2, " ");
  }

  swift_asprintf(&__s, "%p", *a1);
  uint64_t v5 = __s;
  std::string::append(a2, __s);
  free(v5);
  std::string::append(a2, " <");
  uint64_t v6 = a1[2];
  if (v6)
  {
    uint64_t v7 = (std::string **)a1[1];
    unsigned int v18 = *v7;
    swift::MetadataOrPack::nameForMetadata(&v18, &__p);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type size = __p.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::string::append(a2, (const std::string::value_type *)p_p, size);
    if ((char)__p.__r_.__value_.__s.__size_ < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
    }

    else if (v6 == (const void *)1)
    {
      goto LABEL_14;
    }

    unint64_t v14 = v7 + 1;
    uint64_t v15 = 8LL * (void)v6 - 8;
    do
    {
      unsigned int v18 = *v14;
      std::string::append(a2, ", ");
      swift::MetadataOrPack::nameForMetadata(&v18, &__p);
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        size_t v16 = &__p;
      }
      else {
        size_t v16 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v17 = __p.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v17 = __p.__r_.__value_.__l.__size_;
      }
      std::string::append(a2, (const std::string::value_type *)v16, v17);
      ++v14;
      v15 -= 8LL;
    }

    while (v15);
  }

void swift::TypeLookupError::TypeLookupError<_gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_1>(_gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_1 const&)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke( uint64_t a1, int a2)
{
  __asm { BR              X10 }

char *sub_18178770C( __int128 a1, uint64_t a2, std::string *a3, std::string *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  std::string::size_type v12 = std::string::append(&v21, "failed to get parent context's written");
  std::string::size_type cap = v12->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__l.__cap_ = cap;
  v12->__r_.__value_.__l.__size_ = 0LL;
  v12->__r_.__value_.__l.__cap_ = 0LL;
  v12->__r_.__value_.__r.__words[0] = 0LL;
  unint64_t v14 = std::string::append(&v22, " generic arguments");
  std::string v20 = *v14;
  v14->__r_.__value_.__r.__words[0] = 0LL;
  v14->__r_.__value_.__l.__size_ = 0LL;
  v14->__r_.__value_.__l.__cap_ = 0LL;
  if ((char)v22.__r_.__value_.__s.__size_ < 0)
  {
    operator delete(v22.__r_.__value_.__l.__data_);
  }

  else if (((char)v21.__r_.__value_.__s.__size_ & 0x80000000) == 0)
  {
    goto LABEL_3;
  }

  operator delete(v21.__r_.__value_.__l.__data_);
LABEL_3:
  int size = (char)v20.__r_.__value_.__s.__size_;
  size_t v16 = (void *)v20.__r_.__value_.__r.__words[0];
  if ((v20.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v17 = &v20;
  }
  else {
    std::string::size_type v17 = (std::string *)v20.__r_.__value_.__r.__words[0];
  }
  unsigned int v18 = strdup((const char *)v17);
  if (size < 0) {
    operator delete(v16);
  }
  return v18;
}

void swift::TypeLookupError::TypeLookupError<_gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_2>(_gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_2 const&)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke( uint64_t a1, int a2)
{
  __asm { BR              X10 }

char *sub_181787840( __int128 a1, uint64_t a2, std::string *a3, std::string *a4, std::string *a5, std::string *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21)
{
  uint64_t v23 = std::string::append(&v42, "have ");
  std::string::size_type cap = v23->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__l.__cap_ = cap;
  v23->__r_.__value_.__l.__size_ = 0LL;
  v23->__r_.__value_.__l.__cap_ = 0LL;
  v23->__r_.__value_.__r.__words[0] = 0LL;
  std::to_string(&v41, *(void *)(v21 + 32));
  if ((v41.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint16x8_t v25 = &v41;
  }
  else {
    uint16x8_t v25 = (std::string *)v41.__r_.__value_.__r.__words[0];
  }
  if ((v41.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = v41.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = v41.__r_.__value_.__l.__size_;
  }
  unint64_t v27 = std::string::append(&v43, (const std::string::value_type *)v25, size);
  std::string::size_type v28 = v27->__r_.__value_.__l.__cap_;
  *(_OWORD *)(v22 - 96) = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  *(void *)(v22 - 80) = v28;
  v27->__r_.__value_.__l.__size_ = 0LL;
  v27->__r_.__value_.__l.__cap_ = 0LL;
  v27->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v29 = std::string::append((std::string *)(v22 - 96), "generic args, expected ");
  std::string::size_type v30 = v29->__r_.__value_.__l.__cap_;
  *(_OWORD *)(v22 - 64) = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  *(void *)(v22 - 48) = v30;
  v29->__r_.__value_.__l.__size_ = 0LL;
  v29->__r_.__value_.__l.__cap_ = 0LL;
  v29->__r_.__value_.__r.__words[0] = 0LL;
  std::to_string(&v40, *(_DWORD *)(v21 + 40));
  if ((v40.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    unint64_t v31 = &v40;
  }
  else {
    unint64_t v31 = (std::string *)v40.__r_.__value_.__r.__words[0];
  }
  if ((v40.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v32 = v40.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v32 = v40.__r_.__value_.__l.__size_;
  }
  uint64_t v33 = std::string::append((std::string *)(v22 - 64), (const std::string::value_type *)v31, v32);
  std::string v39 = *v33;
  v33->__r_.__value_.__r.__words[0] = 0LL;
  v33->__r_.__value_.__l.__size_ = 0LL;
  v33->__r_.__value_.__l.__cap_ = 0LL;
  if ((char)v40.__r_.__value_.__s.__size_ < 0)
  {
    operator delete(v40.__r_.__value_.__l.__data_);
    if ((*(char *)(v22 - 41) & 0x80000000) == 0)
    {
LABEL_15:
      goto LABEL_27;
    }
  }

  else if ((*(char *)(v22 - 41) & 0x80000000) == 0)
  {
    goto LABEL_15;
  }

  operator delete(*(void **)(v22 - 64));
  if ((*(char *)(v22 - 73) & 0x80000000) == 0)
  {
LABEL_16:
    goto LABEL_28;
  }

void swift::TypeLookupError::TypeLookupError<_gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_3>(_gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_3 const&)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke( uint64_t a1, int a2)
{
  __asm { BR              X10 }

char *sub_181787A6C( __int128 a1, uint64_t a2, uint64_t a3, std::string *a4, std::string *a5, std::string *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  int32x4_t v19 = std::string::append(&v33, "param ");
  std::string::size_type cap = v19->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__l.__cap_ = cap;
  v19->__r_.__value_.__l.__size_ = 0LL;
  v19->__r_.__value_.__l.__cap_ = 0LL;
  v19->__r_.__value_.__r.__words[0] = 0LL;
  std::to_string(&v32, *(_DWORD *)(v17 + 32));
  if ((v32.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v21 = &v32;
  }
  else {
    uint64_t v21 = (std::string *)v32.__r_.__value_.__r.__words[0];
  }
  if ((v32.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = v32.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = v32.__r_.__value_.__l.__size_;
  }
  uint64_t v23 = std::string::append(&v34, (const std::string::value_type *)v21, size);
  std::string::size_type v24 = v23->__r_.__value_.__l.__cap_;
  *(_OWORD *)(v18 - 64) = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  *(void *)(v18 - 48) = v24;
  v23->__r_.__value_.__l.__size_ = 0LL;
  v23->__r_.__value_.__l.__cap_ = 0LL;
  v23->__r_.__value_.__r.__words[0] = 0LL;
  uint16x8_t v25 = std::string::append((std::string *)(v18 - 64), " expected metadata but got a metadata pack");
  std::string v31 = *v25;
  v25->__r_.__value_.__r.__words[0] = 0LL;
  v25->__r_.__value_.__l.__size_ = 0LL;
  v25->__r_.__value_.__l.__cap_ = 0LL;
  if (*(char *)(v18 - 41) < 0)
  {
    operator delete(*(void **)(v18 - 64));
    if (((char)v32.__r_.__value_.__s.__size_ & 0x80000000) == 0)
    {
LABEL_9:
LABEL_19:
      operator delete(v34.__r_.__value_.__l.__data_);
      goto LABEL_20;
    }
  }

  else if (((char)v32.__r_.__value_.__s.__size_ & 0x80000000) == 0)
  {
    goto LABEL_9;
  }

  operator delete(v32.__r_.__value_.__l.__data_);
LABEL_10:
LABEL_20:
  operator delete(v33.__r_.__value_.__l.__data_);
LABEL_11:
  int v26 = (char)v31.__r_.__value_.__s.__size_;
  unint64_t v27 = (void *)v31.__r_.__value_.__r.__words[0];
  if ((v31.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v28 = &v31;
  }
  else {
    std::string::size_type v28 = (std::string *)v31.__r_.__value_.__r.__words[0];
  }
  uint64_t v29 = strdup((const char *)v28);
  if (v26 < 0) {
    operator delete(v27);
  }
  return v29;
}

void swift::TypeLookupError::TypeLookupError<_gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_4>(_gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_4 const&)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke( uint64_t a1, int a2)
{
  __asm { BR              X10 }

char *sub_181787C20( __int128 a1, uint64_t a2, uint64_t a3, std::string *a4, std::string *a5, std::string *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  int32x4_t v19 = std::string::append(&v33, "param ");
  std::string::size_type cap = v19->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__l.__cap_ = cap;
  v19->__r_.__value_.__l.__size_ = 0LL;
  v19->__r_.__value_.__l.__cap_ = 0LL;
  v19->__r_.__value_.__r.__words[0] = 0LL;
  std::to_string(&v32, *(_DWORD *)(v17 + 32));
  if ((v32.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v21 = &v32;
  }
  else {
    uint64_t v21 = (std::string *)v32.__r_.__value_.__r.__words[0];
  }
  if ((v32.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = v32.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = v32.__r_.__value_.__l.__size_;
  }
  uint64_t v23 = std::string::append(&v34, (const std::string::value_type *)v21, size);
  std::string::size_type v24 = v23->__r_.__value_.__l.__cap_;
  *(_OWORD *)(v18 - 64) = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  *(void *)(v18 - 48) = v24;
  v23->__r_.__value_.__l.__size_ = 0LL;
  v23->__r_.__value_.__l.__cap_ = 0LL;
  v23->__r_.__value_.__r.__words[0] = 0LL;
  uint16x8_t v25 = std::string::append((std::string *)(v18 - 64), " expected a metadata pack but got metadata");
  std::string v31 = *v25;
  v25->__r_.__value_.__r.__words[0] = 0LL;
  v25->__r_.__value_.__l.__size_ = 0LL;
  v25->__r_.__value_.__l.__cap_ = 0LL;
  if (*(char *)(v18 - 41) < 0)
  {
    operator delete(*(void **)(v18 - 64));
    if (((char)v32.__r_.__value_.__s.__size_ & 0x80000000) == 0)
    {
LABEL_9:
LABEL_19:
      operator delete(v34.__r_.__value_.__l.__data_);
      goto LABEL_20;
    }
  }

  else if (((char)v32.__r_.__value_.__s.__size_ & 0x80000000) == 0)
  {
    goto LABEL_9;
  }

  operator delete(v32.__r_.__value_.__l.__data_);
LABEL_10:
LABEL_20:
  operator delete(v33.__r_.__value_.__l.__data_);
LABEL_11:
  int v26 = (char)v31.__r_.__value_.__s.__size_;
  unint64_t v27 = (void *)v31.__r_.__value_.__r.__words[0];
  if ((v31.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v28 = &v31;
  }
  else {
    std::string::size_type v28 = (std::string *)v31.__r_.__value_.__r.__words[0];
  }
  uint64_t v29 = strdup((const char *)v28);
  if (v26 < 0) {
    operator delete(v27);
  }
  return v29;
}

void swift::TypeLookupError::TypeLookupError<_gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_5>(_gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_5 const&)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke( uint64_t a1, int a2)
{
  __asm { BR              X10 }

char *sub_181787DD4( __int128 a1, uint64_t a2, std::string *a3, std::string *a4, std::string *a5, std::string *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21)
{
  uint64_t v23 = std::string::append(&v42, "param ");
  std::string::size_type cap = v23->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__l.__cap_ = cap;
  v23->__r_.__value_.__l.__size_ = 0LL;
  v23->__r_.__value_.__l.__cap_ = 0LL;
  v23->__r_.__value_.__r.__words[0] = 0LL;
  std::to_string(&v41, *(_DWORD *)(v21 + 32));
  if ((v41.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint16x8_t v25 = &v41;
  }
  else {
    uint16x8_t v25 = (std::string *)v41.__r_.__value_.__r.__words[0];
  }
  if ((v41.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = v41.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = v41.__r_.__value_.__l.__size_;
  }
  unint64_t v27 = std::string::append(&v43, (const std::string::value_type *)v25, size);
  std::string::size_type v28 = v27->__r_.__value_.__l.__cap_;
  *(_OWORD *)(v22 - 96) = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  *(void *)(v22 - 80) = v28;
  v27->__r_.__value_.__l.__size_ = 0LL;
  v27->__r_.__value_.__l.__cap_ = 0LL;
  v27->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v29 = std::string::append((std::string *)(v22 - 96), " has unexpected kind ");
  std::string::size_type v30 = v29->__r_.__value_.__l.__cap_;
  *(_OWORD *)(v22 - 64) = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  *(void *)(v22 - 48) = v30;
  v29->__r_.__value_.__l.__size_ = 0LL;
  v29->__r_.__value_.__l.__cap_ = 0LL;
  v29->__r_.__value_.__r.__words[0] = 0LL;
  std::to_string(&v40, *(_BYTE *)(v21 + 36) & 0x3F);
  if ((v40.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string v31 = &v40;
  }
  else {
    std::string v31 = (std::string *)v40.__r_.__value_.__r.__words[0];
  }
  if ((v40.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v32 = v40.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v32 = v40.__r_.__value_.__l.__size_;
  }
  std::string v33 = std::string::append((std::string *)(v22 - 64), (const std::string::value_type *)v31, v32);
  std::string v39 = *v33;
  v33->__r_.__value_.__r.__words[0] = 0LL;
  v33->__r_.__value_.__l.__size_ = 0LL;
  v33->__r_.__value_.__l.__cap_ = 0LL;
  if ((char)v40.__r_.__value_.__s.__size_ < 0)
  {
    operator delete(v40.__r_.__value_.__l.__data_);
    if ((*(char *)(v22 - 41) & 0x80000000) == 0)
    {
LABEL_15:
      goto LABEL_27;
    }
  }

  else if ((*(char *)(v22 - 41) & 0x80000000) == 0)
  {
    goto LABEL_15;
  }

  operator delete(*(void **)(v22 - 64));
  if ((*(char *)(v22 - 73) & 0x80000000) == 0)
  {
LABEL_16:
    goto LABEL_28;
  }

void *std::__function::__func<_gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_6,std::allocator<_gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_6>,void const* ()(unsigned int,unsigned int)>::__clone( uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_189B8DBD8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<_gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_6,std::allocator<_gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_6>,void const* ()(unsigned int,unsigned int)>::__clone( uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_189B8DBD8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<_gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_6,std::allocator<_gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_6>,void const* ()(unsigned int,unsigned int)>::operator()( uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  uint64_t v3 = *a2;
  int v4 = *(uint64_t **)(a1 + 8);
  uint64_t v5 = (uint64_t *)v4[1];
  uint64_t v6 = *v5;
  int v7 = (_DWORD)v3 ? *(_DWORD *)(v6 + 4LL * (v3 - 1)) : 0;
  unsigned int v8 = v7 + *a3;
  if (v8 >= *(_DWORD *)(v6 + 4 * v3)) {
    return 0LL;
  }
  uint64_t v9 = *v4;
  if (*(_DWORD *)(v9 + 8) <= v8) {
    return 0LL;
  }
  else {
    return *(void *)(*(void *)v9 + 8LL * v8);
  }
}

void *std::__function::__func<_gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_7,std::allocator<_gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_7>,void const* ()(unsigned int,unsigned int)>::__clone( uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_189B8DC20;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<_gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_7,std::allocator<_gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_7>,void const* ()(unsigned int,unsigned int)>::__clone( uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_189B8DC20;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<_gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_7,std::allocator<_gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_7>,void const* ()(unsigned int,unsigned int)>::operator()( uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = **(void **)(a1 + 8);
  else {
    return *(void *)(*(void *)v3 + 8 * v2);
  }
}

void *std::__function::__func<_gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_8,std::allocator<_gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_8>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone( uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_189B8DC68;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<_gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_8,std::allocator<_gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_8>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone( uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_189B8DC68;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<_gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_8,std::allocator<_gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_8>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::operator()()
{
  return 0LL;
}

void swift::TypeLookupError::TypeLookupError<_gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_9>(_gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_9 const&)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke( uint64_t a1, int a2)
{
  __asm { BR              X10 }

char *sub_1817881A8( __int128 a1, uint64_t a2, std::string *a3, std::string *a4, std::string *a5, std::string *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21)
{
  uint64_t v23 = std::string::append(&v42, "generic argument count mismatch, expected ");
  std::string::size_type cap = v23->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__l.__cap_ = cap;
  v23->__r_.__value_.__l.__size_ = 0LL;
  v23->__r_.__value_.__l.__cap_ = 0LL;
  v23->__r_.__value_.__r.__words[0] = 0LL;
  std::to_string(&v41, *(unsigned __int16 *)(*(void *)(v21 + 32) + 8LL));
  if ((v41.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint16x8_t v25 = &v41;
  }
  else {
    uint16x8_t v25 = (std::string *)v41.__r_.__value_.__r.__words[0];
  }
  if ((v41.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = v41.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = v41.__r_.__value_.__l.__size_;
  }
  unint64_t v27 = std::string::append(&v43, (const std::string::value_type *)v25, size);
  std::string::size_type v28 = v27->__r_.__value_.__l.__cap_;
  *(_OWORD *)(v22 - 96) = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  *(void *)(v22 - 80) = v28;
  v27->__r_.__value_.__l.__size_ = 0LL;
  v27->__r_.__value_.__l.__cap_ = 0LL;
  v27->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v29 = std::string::append((std::string *)(v22 - 96), ", have ");
  std::string::size_type v30 = v29->__r_.__value_.__l.__cap_;
  *(_OWORD *)(v22 - 64) = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  *(void *)(v22 - 48) = v30;
  v29->__r_.__value_.__l.__size_ = 0LL;
  v29->__r_.__value_.__l.__cap_ = 0LL;
  v29->__r_.__value_.__r.__words[0] = 0LL;
  std::to_string(&v40, *(void *)(v21 + 40));
  if ((v40.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string v31 = &v40;
  }
  else {
    std::string v31 = (std::string *)v40.__r_.__value_.__r.__words[0];
  }
  if ((v40.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v32 = v40.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v32 = v40.__r_.__value_.__l.__size_;
  }
  std::string v33 = std::string::append((std::string *)(v22 - 64), (const std::string::value_type *)v31, v32);
  std::string v39 = *v33;
  v33->__r_.__value_.__r.__words[0] = 0LL;
  v33->__r_.__value_.__l.__size_ = 0LL;
  v33->__r_.__value_.__l.__cap_ = 0LL;
  if ((char)v40.__r_.__value_.__s.__size_ < 0)
  {
    operator delete(v40.__r_.__value_.__l.__data_);
    if ((*(char *)(v22 - 41) & 0x80000000) == 0)
    {
LABEL_15:
      goto LABEL_27;
    }
  }

  else if ((*(char *)(v22 - 41) & 0x80000000) == 0)
  {
    goto LABEL_15;
  }

  operator delete(*(void **)(v22 - 64));
  if ((*(char *)(v22 - 73) & 0x80000000) == 0)
  {
LABEL_16:
    goto LABEL_28;
  }

void *std::__function::__func<getObjCClassByMangledName(char const*,objc_class **)::$_0,std::allocator<getObjCClassByMangledName(char const*,objc_class **)::$_0>,void const* ()(unsigned int,unsigned int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_189B8DCB0;
  return result;
}

void std::__function::__func<getObjCClassByMangledName(char const*,objc_class **)::$_0,std::allocator<getObjCClassByMangledName(char const*,objc_class **)::$_0>,void const* ()(unsigned int,unsigned int)>::__clone( uint64_t a1, void *a2)
{
  *a2 = off_189B8DCB0;
}

uint64_t std::__function::__func<getObjCClassByMangledName(char const*,objc_class **)::$_0,std::allocator<getObjCClassByMangledName(char const*,objc_class **)::$_0>,void const* ()(unsigned int,unsigned int)>::operator()()
{
  return 0LL;
}

void *std::__function::__func<getObjCClassByMangledName(char const*,objc_class **)::$_1,std::allocator<getObjCClassByMangledName(char const*,objc_class **)::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_189B8DCF8;
  return result;
}

void std::__function::__func<getObjCClassByMangledName(char const*,objc_class **)::$_1,std::allocator<getObjCClassByMangledName(char const*,objc_class **)::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone( uint64_t a1, void *a2)
{
  *a2 = off_189B8DCF8;
}

uint64_t std::__function::__func<getObjCClassByMangledName(char const*,objc_class **)::$_1,std::allocator<getObjCClassByMangledName(char const*,objc_class **)::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::operator()()
{
  return 0LL;
}

void *swift_getTypeByMangledNode::$_0::__invoke(swift_getTypeByMangledNode::$_0 *this, void *a2)
{
  uint64_t result = (void *)swift::getOverride_getTypeByMangledNode(this);
  swift_getTypeByMangledNode::Override = result;
  return result;
}

void *swift_getTypeByMangledName::$_0::__invoke(swift_getTypeByMangledName::$_0 *this, void *a2)
{
  uint64_t result = (void *)swift::getOverride_getTypeByMangledName(this);
  swift_getTypeByMangledName::Override = result;
  return result;
}

void *std::__function::__func<swift_getTypeByMangledNameInEnvironment::$_0,std::allocator<swift_getTypeByMangledNameInEnvironment::$_0>,void const* ()(unsigned int,unsigned int)>::__clone( uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_189B8DD40;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift_getTypeByMangledNameInEnvironment::$_0,std::allocator<swift_getTypeByMangledNameInEnvironment::$_0>,void const* ()(unsigned int,unsigned int)>::__clone( uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_189B8DD40;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<swift_getTypeByMangledNameInEnvironment::$_0,std::allocator<swift_getTypeByMangledNameInEnvironment::$_0>,void const* ()(unsigned int,unsigned int)>::operator()( uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!*(void *)(v3 + 16)) {
    return 0LL;
  }
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  swift::SubstGenericParametersFromMetadata::setup(*(unsigned int ***)(a1 + 8));
  uint64_t v6 = *(void *)(v3 + 24) + 32 * v4;
  unsigned int v7 = *(_DWORD *)(v3 + 300) + *(_DWORD *)(v6 + 20);
  if (*(_BYTE *)(v6 + 28))
  {
    unsigned int v8 = *(uint8x16_t **)v6;
    uint64_t v9 = (uint8x16_t *)(*(void *)v6 + v5);
    if ((v9->i8[0] & 0x80000000) == 0) {
      return 0LL;
    }
    if ((_DWORD)v5)
    {
      if (v5 < 8)
      {
        unsigned int v11 = v8;
        goto LABEL_22;
      }

      if (v5 >= 0x20)
      {
        uint64_t v12 = v5 & 0xFFFFFFE0;
        int32x4_t v13 = 0uLL;
        int32x4_t v14 = (int32x4_t)v7;
        uint64_t v15 = v8 + 1;
        uint64_t v16 = v12;
        int32x4_t v17 = 0uLL;
        int32x4_t v18 = 0uLL;
        int32x4_t v19 = 0uLL;
        int32x4_t v20 = 0uLL;
        int32x4_t v21 = 0uLL;
        int32x4_t v22 = 0uLL;
        do
        {
          uint8x16_t v23 = vshrq_n_u8(v15[-1], 7uLL);
          uint8x16_t v24 = vshrq_n_u8(*v15, 7uLL);
          uint16x8_t v25 = vmovl_u8(*(uint8x8_t *)v23.i8);
          uint16x8_t v26 = vmovl_high_u8(v23);
          uint16x8_t v27 = vmovl_u8(*(uint8x8_t *)v24.i8);
          uint16x8_t v28 = vmovl_high_u8(v24);
          int32x4_t v18 = (int32x4_t)vaddw_high_u16((uint32x4_t)v18, v26);
          int32x4_t v17 = (int32x4_t)vaddw_u16((uint32x4_t)v17, *(uint16x4_t *)v26.i8);
          int32x4_t v13 = (int32x4_t)vaddw_high_u16((uint32x4_t)v13, v25);
          int32x4_t v14 = (int32x4_t)vaddw_u16((uint32x4_t)v14, *(uint16x4_t *)v25.i8);
          int32x4_t v22 = (int32x4_t)vaddw_high_u16((uint32x4_t)v22, v28);
          int32x4_t v21 = (int32x4_t)vaddw_u16((uint32x4_t)v21, *(uint16x4_t *)v28.i8);
          int32x4_t v20 = (int32x4_t)vaddw_high_u16((uint32x4_t)v20, v27);
          int32x4_t v19 = (int32x4_t)vaddw_u16((uint32x4_t)v19, *(uint16x4_t *)v27.i8);
          v15 += 2;
          v16 -= 32LL;
        }

        while (v16);
        unsigned int v7 = vaddvq_s32( vaddq_s32( vaddq_s32(vaddq_s32(v19, v14), vaddq_s32(v21, v17)),  vaddq_s32(vaddq_s32(v20, v13), vaddq_s32(v22, v18))));
        if (v12 == v5) {
          return *(void *)(*(void *)(v3 + 16) + 8LL * v7);
        }
        if ((v5 & 0x18) == 0)
        {
          unsigned int v11 = (uint8x16_t *)((char *)v8 + v12);
          do
          {
LABEL_22:
            unsigned int v35 = v11->u8[0];
            unsigned int v11 = (uint8x16_t *)((char *)v11 + 1);
            v7 += v35 >> 7;
          }

          while (v11 != v9);
          return *(void *)(*(void *)(v3 + 16) + 8LL * v7);
        }
      }

      else
      {
        uint64_t v12 = 0LL;
      }

      unsigned int v11 = (uint8x16_t *)((char *)v8 + (v5 & 0xFFFFFFF8));
      int32x4_t v29 = 0uLL;
      int32x4_t v30 = (int32x4_t)v7;
      std::string v31 = (uint8x8_t *)&v8->i8[v12];
      uint64_t v32 = v12 - (v5 & 0xFFFFFFF8);
      do
      {
        uint8x8_t v33 = *v31++;
        uint16x8_t v34 = vmovl_u8(vshr_n_u8(v33, 7uLL));
        int32x4_t v29 = (int32x4_t)vaddw_high_u16((uint32x4_t)v29, v34);
        int32x4_t v30 = (int32x4_t)vaddw_u16((uint32x4_t)v30, *(uint16x4_t *)v34.i8);
        v32 += 8LL;
      }

      while (v32);
      unsigned int v7 = vaddvq_s32(vaddq_s32(v30, v29));
      if ((v5 & 0xFFFFFFF8) == v5) {
        return *(void *)(*(void *)(v3 + 16) + 8LL * v7);
      }
      goto LABEL_22;
    }
  }

  else
  {
    v7 += v5;
  }

  return *(void *)(*(void *)(v3 + 16) + 8LL * v7);
}

void *std::__function::__func<swift_getTypeByMangledNameInEnvironment::$_1,std::allocator<swift_getTypeByMangledNameInEnvironment::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone( uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_189B8DD88;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift_getTypeByMangledNameInEnvironment::$_1,std::allocator<swift_getTypeByMangledNameInEnvironment::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone( uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_189B8DD88;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<swift_getTypeByMangledNameInEnvironment::$_1,std::allocator<swift_getTypeByMangledNameInEnvironment::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::operator()( uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!*(void *)(v3 + 16)) {
    return 0LL;
  }
  int v4 = *a3;
  swift::SubstGenericParametersFromMetadata::setup(*(unsigned int ***)(a1 + 8));
  return *(void *)(*(void *)(v3 + 16) + 8LL * (*(_DWORD *)(v3 + 296) + v4 + *(_DWORD *)(v3 + 300)));
}

void *std::__function::__func<swift_getTypeByMangledNameInEnvironmentInMetadataState::$_0,std::allocator<swift_getTypeByMangledNameInEnvironmentInMetadataState::$_0>,void const* ()(unsigned int,unsigned int)>::__clone( uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_189B8DDD0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift_getTypeByMangledNameInEnvironmentInMetadataState::$_0,std::allocator<swift_getTypeByMangledNameInEnvironmentInMetadataState::$_0>,void const* ()(unsigned int,unsigned int)>::__clone( uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_189B8DDD0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<swift_getTypeByMangledNameInEnvironmentInMetadataState::$_0,std::allocator<swift_getTypeByMangledNameInEnvironmentInMetadataState::$_0>,void const* ()(unsigned int,unsigned int)>::operator()( uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!*(void *)(v3 + 16)) {
    return 0LL;
  }
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  swift::SubstGenericParametersFromMetadata::setup(*(unsigned int ***)(a1 + 8));
  uint64_t v6 = *(void *)(v3 + 24) + 32 * v4;
  unsigned int v7 = *(_DWORD *)(v3 + 300) + *(_DWORD *)(v6 + 20);
  if (*(_BYTE *)(v6 + 28))
  {
    unsigned int v8 = *(uint8x16_t **)v6;
    uint64_t v9 = (uint8x16_t *)(*(void *)v6 + v5);
    if ((v9->i8[0] & 0x80000000) == 0) {
      return 0LL;
    }
    if ((_DWORD)v5)
    {
      if (v5 < 8)
      {
        unsigned int v11 = v8;
        goto LABEL_22;
      }

      if (v5 >= 0x20)
      {
        uint64_t v12 = v5 & 0xFFFFFFE0;
        int32x4_t v13 = 0uLL;
        int32x4_t v14 = (int32x4_t)v7;
        uint64_t v15 = v8 + 1;
        uint64_t v16 = v12;
        int32x4_t v17 = 0uLL;
        int32x4_t v18 = 0uLL;
        int32x4_t v19 = 0uLL;
        int32x4_t v20 = 0uLL;
        int32x4_t v21 = 0uLL;
        int32x4_t v22 = 0uLL;
        do
        {
          uint8x16_t v23 = vshrq_n_u8(v15[-1], 7uLL);
          uint8x16_t v24 = vshrq_n_u8(*v15, 7uLL);
          uint16x8_t v25 = vmovl_u8(*(uint8x8_t *)v23.i8);
          uint16x8_t v26 = vmovl_high_u8(v23);
          uint16x8_t v27 = vmovl_u8(*(uint8x8_t *)v24.i8);
          uint16x8_t v28 = vmovl_high_u8(v24);
          int32x4_t v18 = (int32x4_t)vaddw_high_u16((uint32x4_t)v18, v26);
          int32x4_t v17 = (int32x4_t)vaddw_u16((uint32x4_t)v17, *(uint16x4_t *)v26.i8);
          int32x4_t v13 = (int32x4_t)vaddw_high_u16((uint32x4_t)v13, v25);
          int32x4_t v14 = (int32x4_t)vaddw_u16((uint32x4_t)v14, *(uint16x4_t *)v25.i8);
          int32x4_t v22 = (int32x4_t)vaddw_high_u16((uint32x4_t)v22, v28);
          int32x4_t v21 = (int32x4_t)vaddw_u16((uint32x4_t)v21, *(uint16x4_t *)v28.i8);
          int32x4_t v20 = (int32x4_t)vaddw_high_u16((uint32x4_t)v20, v27);
          int32x4_t v19 = (int32x4_t)vaddw_u16((uint32x4_t)v19, *(uint16x4_t *)v27.i8);
          v15 += 2;
          v16 -= 32LL;
        }

        while (v16);
        unsigned int v7 = vaddvq_s32( vaddq_s32( vaddq_s32(vaddq_s32(v19, v14), vaddq_s32(v21, v17)),  vaddq_s32(vaddq_s32(v20, v13), vaddq_s32(v22, v18))));
        if (v12 == v5) {
          return *(void *)(*(void *)(v3 + 16) + 8LL * v7);
        }
        if ((v5 & 0x18) == 0)
        {
          unsigned int v11 = (uint8x16_t *)((char *)v8 + v12);
          do
          {
LABEL_22:
            unsigned int v35 = v11->u8[0];
            unsigned int v11 = (uint8x16_t *)((char *)v11 + 1);
            v7 += v35 >> 7;
          }

          while (v11 != v9);
          return *(void *)(*(void *)(v3 + 16) + 8LL * v7);
        }
      }

      else
      {
        uint64_t v12 = 0LL;
      }

      unsigned int v11 = (uint8x16_t *)((char *)v8 + (v5 & 0xFFFFFFF8));
      int32x4_t v29 = 0uLL;
      int32x4_t v30 = (int32x4_t)v7;
      std::string v31 = (uint8x8_t *)&v8->i8[v12];
      uint64_t v32 = v12 - (v5 & 0xFFFFFFF8);
      do
      {
        uint8x8_t v33 = *v31++;
        uint16x8_t v34 = vmovl_u8(vshr_n_u8(v33, 7uLL));
        int32x4_t v29 = (int32x4_t)vaddw_high_u16((uint32x4_t)v29, v34);
        int32x4_t v30 = (int32x4_t)vaddw_u16((uint32x4_t)v30, *(uint16x4_t *)v34.i8);
        v32 += 8LL;
      }

      while (v32);
      unsigned int v7 = vaddvq_s32(vaddq_s32(v30, v29));
      if ((v5 & 0xFFFFFFF8) == v5) {
        return *(void *)(*(void *)(v3 + 16) + 8LL * v7);
      }
      goto LABEL_22;
    }
  }

  else
  {
    v7 += v5;
  }

  return *(void *)(*(void *)(v3 + 16) + 8LL * v7);
}

void *std::__function::__func<swift_getTypeByMangledNameInEnvironmentInMetadataState::$_1,std::allocator<swift_getTypeByMangledNameInEnvironmentInMetadataState::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone( uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_189B8DE18;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift_getTypeByMangledNameInEnvironmentInMetadataState::$_1,std::allocator<swift_getTypeByMangledNameInEnvironmentInMetadataState::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone( uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_189B8DE18;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<swift_getTypeByMangledNameInEnvironmentInMetadataState::$_1,std::allocator<swift_getTypeByMangledNameInEnvironmentInMetadataState::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::operator()( uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!*(void *)(v3 + 16)) {
    return 0LL;
  }
  int v4 = *a3;
  swift::SubstGenericParametersFromMetadata::setup(*(unsigned int ***)(a1 + 8));
  return *(void *)(*(void *)(v3 + 16) + 8LL * (*(_DWORD *)(v3 + 296) + v4 + *(_DWORD *)(v3 + 300)));
}

void *std::__function::__func<swift_func_getReturnTypeInfo::$_0,std::allocator<swift_func_getReturnTypeInfo::$_0>,void const* ()(unsigned int,unsigned int)>::__clone( uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_189B8DE60;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift_func_getReturnTypeInfo::$_0,std::allocator<swift_func_getReturnTypeInfo::$_0>,void const* ()(unsigned int,unsigned int)>::__clone( uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_189B8DE60;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<swift_func_getReturnTypeInfo::$_0,std::allocator<swift_func_getReturnTypeInfo::$_0>,void const* ()(unsigned int,unsigned int)>::operator()( uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!*(void *)(v3 + 16)) {
    return 0LL;
  }
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  swift::SubstGenericParametersFromMetadata::setup(*(unsigned int ***)(a1 + 8));
  uint64_t v6 = *(void *)(v3 + 24) + 32 * v4;
  unsigned int v7 = *(_DWORD *)(v3 + 300) + *(_DWORD *)(v6 + 20);
  if (*(_BYTE *)(v6 + 28))
  {
    unsigned int v8 = *(uint8x16_t **)v6;
    uint64_t v9 = (uint8x16_t *)(*(void *)v6 + v5);
    if ((v9->i8[0] & 0x80000000) == 0) {
      return 0LL;
    }
    if ((_DWORD)v5)
    {
      if (v5 < 8)
      {
        unsigned int v11 = v8;
        goto LABEL_22;
      }

      if (v5 >= 0x20)
      {
        uint64_t v12 = v5 & 0xFFFFFFE0;
        int32x4_t v13 = 0uLL;
        int32x4_t v14 = (int32x4_t)v7;
        uint64_t v15 = v8 + 1;
        uint64_t v16 = v12;
        int32x4_t v17 = 0uLL;
        int32x4_t v18 = 0uLL;
        int32x4_t v19 = 0uLL;
        int32x4_t v20 = 0uLL;
        int32x4_t v21 = 0uLL;
        int32x4_t v22 = 0uLL;
        do
        {
          uint8x16_t v23 = vshrq_n_u8(v15[-1], 7uLL);
          uint8x16_t v24 = vshrq_n_u8(*v15, 7uLL);
          uint16x8_t v25 = vmovl_u8(*(uint8x8_t *)v23.i8);
          uint16x8_t v26 = vmovl_high_u8(v23);
          uint16x8_t v27 = vmovl_u8(*(uint8x8_t *)v24.i8);
          uint16x8_t v28 = vmovl_high_u8(v24);
          int32x4_t v18 = (int32x4_t)vaddw_high_u16((uint32x4_t)v18, v26);
          int32x4_t v17 = (int32x4_t)vaddw_u16((uint32x4_t)v17, *(uint16x4_t *)v26.i8);
          int32x4_t v13 = (int32x4_t)vaddw_high_u16((uint32x4_t)v13, v25);
          int32x4_t v14 = (int32x4_t)vaddw_u16((uint32x4_t)v14, *(uint16x4_t *)v25.i8);
          int32x4_t v22 = (int32x4_t)vaddw_high_u16((uint32x4_t)v22, v28);
          int32x4_t v21 = (int32x4_t)vaddw_u16((uint32x4_t)v21, *(uint16x4_t *)v28.i8);
          int32x4_t v20 = (int32x4_t)vaddw_high_u16((uint32x4_t)v20, v27);
          int32x4_t v19 = (int32x4_t)vaddw_u16((uint32x4_t)v19, *(uint16x4_t *)v27.i8);
          v15 += 2;
          v16 -= 32LL;
        }

        while (v16);
        unsigned int v7 = vaddvq_s32( vaddq_s32( vaddq_s32(vaddq_s32(v19, v14), vaddq_s32(v21, v17)),  vaddq_s32(vaddq_s32(v20, v13), vaddq_s32(v22, v18))));
        if (v12 == v5) {
          return *(void *)(*(void *)(v3 + 16) + 8LL * v7);
        }
        if ((v5 & 0x18) == 0)
        {
          unsigned int v11 = (uint8x16_t *)((char *)v8 + v12);
          do
          {
LABEL_22:
            unsigned int v35 = v11->u8[0];
            unsigned int v11 = (uint8x16_t *)((char *)v11 + 1);
            v7 += v35 >> 7;
          }

          while (v11 != v9);
          return *(void *)(*(void *)(v3 + 16) + 8LL * v7);
        }
      }

      else
      {
        uint64_t v12 = 0LL;
      }

      unsigned int v11 = (uint8x16_t *)((char *)v8 + (v5 & 0xFFFFFFF8));
      int32x4_t v29 = 0uLL;
      int32x4_t v30 = (int32x4_t)v7;
      std::string v31 = (uint8x8_t *)&v8->i8[v12];
      uint64_t v32 = v12 - (v5 & 0xFFFFFFF8);
      do
      {
        uint8x8_t v33 = *v31++;
        uint16x8_t v34 = vmovl_u8(vshr_n_u8(v33, 7uLL));
        int32x4_t v29 = (int32x4_t)vaddw_high_u16((uint32x4_t)v29, v34);
        int32x4_t v30 = (int32x4_t)vaddw_u16((uint32x4_t)v30, *(uint16x4_t *)v34.i8);
        v32 += 8LL;
      }

      while (v32);
      unsigned int v7 = vaddvq_s32(vaddq_s32(v30, v29));
      if ((v5 & 0xFFFFFFF8) == v5) {
        return *(void *)(*(void *)(v3 + 16) + 8LL * v7);
      }
      goto LABEL_22;
    }
  }

  else
  {
    v7 += v5;
  }

  return *(void *)(*(void *)(v3 + 16) + 8LL * v7);
}

void *std::__function::__func<swift_func_getReturnTypeInfo::$_1,std::allocator<swift_func_getReturnTypeInfo::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone( uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_189B8DEA8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift_func_getReturnTypeInfo::$_1,std::allocator<swift_func_getReturnTypeInfo::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone( uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_189B8DEA8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<swift_func_getReturnTypeInfo::$_1,std::allocator<swift_func_getReturnTypeInfo::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::operator()( uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!*(void *)(v3 + 16)) {
    return 0LL;
  }
  int v4 = *a3;
  swift::SubstGenericParametersFromMetadata::setup(*(unsigned int ***)(a1 + 8));
  return *(void *)(*(void *)(v3 + 16) + 8LL * (*(_DWORD *)(v3 + 296) + v4 + *(_DWORD *)(v3 + 300)));
}

void *std::__function::__func<swift_func_getParameterTypeInfo::$_0,std::allocator<swift_func_getParameterTypeInfo::$_0>,void const* ()(unsigned int,unsigned int)>::__clone( uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_189B8DEF0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift_func_getParameterTypeInfo::$_0,std::allocator<swift_func_getParameterTypeInfo::$_0>,void const* ()(unsigned int,unsigned int)>::__clone( uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_189B8DEF0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<swift_func_getParameterTypeInfo::$_0,std::allocator<swift_func_getParameterTypeInfo::$_0>,void const* ()(unsigned int,unsigned int)>::operator()( uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!*(void *)(v3 + 16)) {
    return 0LL;
  }
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  swift::SubstGenericParametersFromMetadata::setup(*(unsigned int ***)(a1 + 8));
  uint64_t v6 = *(void *)(v3 + 24) + 32 * v4;
  unsigned int v7 = *(_DWORD *)(v3 + 300) + *(_DWORD *)(v6 + 20);
  if (*(_BYTE *)(v6 + 28))
  {
    unsigned int v8 = *(uint8x16_t **)v6;
    uint64_t v9 = (uint8x16_t *)(*(void *)v6 + v5);
    if ((v9->i8[0] & 0x80000000) == 0) {
      return 0LL;
    }
    if ((_DWORD)v5)
    {
      if (v5 < 8)
      {
        unsigned int v11 = v8;
        goto LABEL_22;
      }

      if (v5 >= 0x20)
      {
        uint64_t v12 = v5 & 0xFFFFFFE0;
        int32x4_t v13 = 0uLL;
        int32x4_t v14 = (int32x4_t)v7;
        uint64_t v15 = v8 + 1;
        uint64_t v16 = v12;
        int32x4_t v17 = 0uLL;
        int32x4_t v18 = 0uLL;
        int32x4_t v19 = 0uLL;
        int32x4_t v20 = 0uLL;
        int32x4_t v21 = 0uLL;
        int32x4_t v22 = 0uLL;
        do
        {
          uint8x16_t v23 = vshrq_n_u8(v15[-1], 7uLL);
          uint8x16_t v24 = vshrq_n_u8(*v15, 7uLL);
          uint16x8_t v25 = vmovl_u8(*(uint8x8_t *)v23.i8);
          uint16x8_t v26 = vmovl_high_u8(v23);
          uint16x8_t v27 = vmovl_u8(*(uint8x8_t *)v24.i8);
          uint16x8_t v28 = vmovl_high_u8(v24);
          int32x4_t v18 = (int32x4_t)vaddw_high_u16((uint32x4_t)v18, v26);
          int32x4_t v17 = (int32x4_t)vaddw_u16((uint32x4_t)v17, *(uint16x4_t *)v26.i8);
          int32x4_t v13 = (int32x4_t)vaddw_high_u16((uint32x4_t)v13, v25);
          int32x4_t v14 = (int32x4_t)vaddw_u16((uint32x4_t)v14, *(uint16x4_t *)v25.i8);
          int32x4_t v22 = (int32x4_t)vaddw_high_u16((uint32x4_t)v22, v28);
          int32x4_t v21 = (int32x4_t)vaddw_u16((uint32x4_t)v21, *(uint16x4_t *)v28.i8);
          int32x4_t v20 = (int32x4_t)vaddw_high_u16((uint32x4_t)v20, v27);
          int32x4_t v19 = (int32x4_t)vaddw_u16((uint32x4_t)v19, *(uint16x4_t *)v27.i8);
          v15 += 2;
          v16 -= 32LL;
        }

        while (v16);
        unsigned int v7 = vaddvq_s32( vaddq_s32( vaddq_s32(vaddq_s32(v19, v14), vaddq_s32(v21, v17)),  vaddq_s32(vaddq_s32(v20, v13), vaddq_s32(v22, v18))));
        if (v12 == v5) {
          return *(void *)(*(void *)(v3 + 16) + 8LL * v7);
        }
        if ((v5 & 0x18) == 0)
        {
          unsigned int v11 = (uint8x16_t *)((char *)v8 + v12);
          do
          {
LABEL_22:
            unsigned int v35 = v11->u8[0];
            unsigned int v11 = (uint8x16_t *)((char *)v11 + 1);
            v7 += v35 >> 7;
          }

          while (v11 != v9);
          return *(void *)(*(void *)(v3 + 16) + 8LL * v7);
        }
      }

      else
      {
        uint64_t v12 = 0LL;
      }

      unsigned int v11 = (uint8x16_t *)((char *)v8 + (v5 & 0xFFFFFFF8));
      int32x4_t v29 = 0uLL;
      int32x4_t v30 = (int32x4_t)v7;
      std::string v31 = (uint8x8_t *)&v8->i8[v12];
      uint64_t v32 = v12 - (v5 & 0xFFFFFFF8);
      do
      {
        uint8x8_t v33 = *v31++;
        uint16x8_t v34 = vmovl_u8(vshr_n_u8(v33, 7uLL));
        int32x4_t v29 = (int32x4_t)vaddw_high_u16((uint32x4_t)v29, v34);
        int32x4_t v30 = (int32x4_t)vaddw_u16((uint32x4_t)v30, *(uint16x4_t *)v34.i8);
        v32 += 8LL;
      }

      while (v32);
      unsigned int v7 = vaddvq_s32(vaddq_s32(v30, v29));
      if ((v5 & 0xFFFFFFF8) == v5) {
        return *(void *)(*(void *)(v3 + 16) + 8LL * v7);
      }
      goto LABEL_22;
    }
  }

  else
  {
    v7 += v5;
  }

  return *(void *)(*(void *)(v3 + 16) + 8LL * v7);
}

void *std::__function::__func<swift_func_getParameterTypeInfo::$_1,std::allocator<swift_func_getParameterTypeInfo::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone( uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_189B8DF38;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift_func_getParameterTypeInfo::$_1,std::allocator<swift_func_getParameterTypeInfo::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone( uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_189B8DF38;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<swift_func_getParameterTypeInfo::$_1,std::allocator<swift_func_getParameterTypeInfo::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::operator()( uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!*(void *)(v3 + 16)) {
    return 0LL;
  }
  int v4 = *a3;
  swift::SubstGenericParametersFromMetadata::setup(*(unsigned int ***)(a1 + 8));
  return *(void *)(*(void *)(v3 + 16) + 8LL * (*(_DWORD *)(v3 + 296) + v4 + *(_DWORD *)(v3 + 300)));
}

void *std::__function::__func<swift_distributed_getWitnessTables::$_0,std::allocator<swift_distributed_getWitnessTables::$_0>,void const* ()(unsigned int,unsigned int)>::__clone( uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_189B8DF80;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift_distributed_getWitnessTables::$_0,std::allocator<swift_distributed_getWitnessTables::$_0>,void const* ()(unsigned int,unsigned int)>::__clone( uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_189B8DF80;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<swift_distributed_getWitnessTables::$_0,std::allocator<swift_distributed_getWitnessTables::$_0>,void const* ()(unsigned int,unsigned int)>::operator()( uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!*(void *)(v3 + 16)) {
    return 0LL;
  }
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  swift::SubstGenericParametersFromMetadata::setup(*(unsigned int ***)(a1 + 8));
  uint64_t v6 = *(void *)(v3 + 24) + 32 * v4;
  unsigned int v7 = *(_DWORD *)(v3 + 300) + *(_DWORD *)(v6 + 20);
  if (*(_BYTE *)(v6 + 28))
  {
    unsigned int v8 = *(uint8x16_t **)v6;
    uint64_t v9 = (uint8x16_t *)(*(void *)v6 + v5);
    if ((v9->i8[0] & 0x80000000) == 0) {
      return 0LL;
    }
    if ((_DWORD)v5)
    {
      if (v5 < 8)
      {
        unsigned int v11 = v8;
        goto LABEL_22;
      }

      if (v5 >= 0x20)
      {
        uint64_t v12 = v5 & 0xFFFFFFE0;
        int32x4_t v13 = 0uLL;
        int32x4_t v14 = (int32x4_t)v7;
        uint64_t v15 = v8 + 1;
        uint64_t v16 = v12;
        int32x4_t v17 = 0uLL;
        int32x4_t v18 = 0uLL;
        int32x4_t v19 = 0uLL;
        int32x4_t v20 = 0uLL;
        int32x4_t v21 = 0uLL;
        int32x4_t v22 = 0uLL;
        do
        {
          uint8x16_t v23 = vshrq_n_u8(v15[-1], 7uLL);
          uint8x16_t v24 = vshrq_n_u8(*v15, 7uLL);
          uint16x8_t v25 = vmovl_u8(*(uint8x8_t *)v23.i8);
          uint16x8_t v26 = vmovl_high_u8(v23);
          uint16x8_t v27 = vmovl_u8(*(uint8x8_t *)v24.i8);
          uint16x8_t v28 = vmovl_high_u8(v24);
          int32x4_t v18 = (int32x4_t)vaddw_high_u16((uint32x4_t)v18, v26);
          int32x4_t v17 = (int32x4_t)vaddw_u16((uint32x4_t)v17, *(uint16x4_t *)v26.i8);
          int32x4_t v13 = (int32x4_t)vaddw_high_u16((uint32x4_t)v13, v25);
          int32x4_t v14 = (int32x4_t)vaddw_u16((uint32x4_t)v14, *(uint16x4_t *)v25.i8);
          int32x4_t v22 = (int32x4_t)vaddw_high_u16((uint32x4_t)v22, v28);
          int32x4_t v21 = (int32x4_t)vaddw_u16((uint32x4_t)v21, *(uint16x4_t *)v28.i8);
          int32x4_t v20 = (int32x4_t)vaddw_high_u16((uint32x4_t)v20, v27);
          int32x4_t v19 = (int32x4_t)vaddw_u16((uint32x4_t)v19, *(uint16x4_t *)v27.i8);
          v15 += 2;
          v16 -= 32LL;
        }

        while (v16);
        unsigned int v7 = vaddvq_s32( vaddq_s32( vaddq_s32(vaddq_s32(v19, v14), vaddq_s32(v21, v17)),  vaddq_s32(vaddq_s32(v20, v13), vaddq_s32(v22, v18))));
        if (v12 == v5) {
          return *(void *)(*(void *)(v3 + 16) + 8LL * v7);
        }
        if ((v5 & 0x18) == 0)
        {
          unsigned int v11 = (uint8x16_t *)((char *)v8 + v12);
          do
          {
LABEL_22:
            unsigned int v35 = v11->u8[0];
            unsigned int v11 = (uint8x16_t *)((char *)v11 + 1);
            v7 += v35 >> 7;
          }

          while (v11 != v9);
          return *(void *)(*(void *)(v3 + 16) + 8LL * v7);
        }
      }

      else
      {
        uint64_t v12 = 0LL;
      }

      unsigned int v11 = (uint8x16_t *)((char *)v8 + (v5 & 0xFFFFFFF8));
      int32x4_t v29 = 0uLL;
      int32x4_t v30 = (int32x4_t)v7;
      std::string v31 = (uint8x8_t *)&v8->i8[v12];
      uint64_t v32 = v12 - (v5 & 0xFFFFFFF8);
      do
      {
        uint8x8_t v33 = *v31++;
        uint16x8_t v34 = vmovl_u8(vshr_n_u8(v33, 7uLL));
        int32x4_t v29 = (int32x4_t)vaddw_high_u16((uint32x4_t)v29, v34);
        int32x4_t v30 = (int32x4_t)vaddw_u16((uint32x4_t)v30, *(uint16x4_t *)v34.i8);
        v32 += 8LL;
      }

      while (v32);
      unsigned int v7 = vaddvq_s32(vaddq_s32(v30, v29));
      if ((v5 & 0xFFFFFFF8) == v5) {
        return *(void *)(*(void *)(v3 + 16) + 8LL * v7);
      }
      goto LABEL_22;
    }
  }

  else
  {
    v7 += v5;
  }

  return *(void *)(*(void *)(v3 + 16) + 8LL * v7);
}

void *std::__function::__func<swift_distributed_getWitnessTables::$_1,std::allocator<swift_distributed_getWitnessTables::$_1>,void const* ()(unsigned int,unsigned int)>::__clone( uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_189B8DFC8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift_distributed_getWitnessTables::$_1,std::allocator<swift_distributed_getWitnessTables::$_1>,void const* ()(unsigned int,unsigned int)>::__clone( uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_189B8DFC8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<swift_distributed_getWitnessTables::$_1,std::allocator<swift_distributed_getWitnessTables::$_1>,void const* ()(unsigned int,unsigned int)>::operator()( uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!*(void *)(v3 + 16)) {
    return 0LL;
  }
  int v4 = *a3;
  swift::SubstGenericParametersFromMetadata::setup(*(unsigned int ***)(a1 + 8));
  return *(void *)(*(void *)(v3 + 16) + 8LL * (*(_DWORD *)(v3 + 300) + v4));
}

void *std::__function::__func<swift_distributed_getWitnessTables::$_2,std::allocator<swift_distributed_getWitnessTables::$_2>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone( uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_189B8E010;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift_distributed_getWitnessTables::$_2,std::allocator<swift_distributed_getWitnessTables::$_2>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone( uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_189B8E010;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<swift_distributed_getWitnessTables::$_2,std::allocator<swift_distributed_getWitnessTables::$_2>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::operator()( uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!*(void *)(v3 + 16)) {
    return 0LL;
  }
  int v4 = *a3;
  swift::SubstGenericParametersFromMetadata::setup(*(unsigned int ***)(a1 + 8));
  return *(void *)(*(void *)(v3 + 16) + 8LL * (*(_DWORD *)(v3 + 296) + v4 + *(_DWORD *)(v3 + 300)));
}

void *std::__function::__func<swift::_gatherWrittenGenericParameters(swift::TargetTypeContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<void const*>,__swift::__runtime::llvm::SmallVectorImpl<swift::MetadataOrPack> &,swift::Demangle::__runtime::Demangler &)::$_0,std::allocator<swift::_gatherWrittenGenericParameters(swift::TargetTypeContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<void const*>,__swift::__runtime::llvm::SmallVectorImpl<swift::MetadataOrPack> &,swift::Demangle::__runtime::Demangler &)::$_0>,void const* ()(unsigned int,unsigned int)>::__clone( uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_189B8E058;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift::_gatherWrittenGenericParameters(swift::TargetTypeContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<void const*>,__swift::__runtime::llvm::SmallVectorImpl<swift::MetadataOrPack> &,swift::Demangle::__runtime::Demangler &)::$_0,std::allocator<swift::_gatherWrittenGenericParameters(swift::TargetTypeContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<void const*>,__swift::__runtime::llvm::SmallVectorImpl<swift::MetadataOrPack> &,swift::Demangle::__runtime::Demangler &)::$_0>,void const* ()(unsigned int,unsigned int)>::__clone( uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_189B8E058;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<swift::_gatherWrittenGenericParameters(swift::TargetTypeContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<void const*>,__swift::__runtime::llvm::SmallVectorImpl<swift::MetadataOrPack> &,swift::Demangle::__runtime::Demangler &)::$_0,std::allocator<swift::_gatherWrittenGenericParameters(swift::TargetTypeContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<void const*>,__swift::__runtime::llvm::SmallVectorImpl<swift::MetadataOrPack> &,swift::Demangle::__runtime::Demangler &)::$_0>,void const* ()(unsigned int,unsigned int)>::operator()( uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  uint64_t v3 = *a2;
  int v4 = *(uint64_t **)(a1 + 8);
  uint64_t v5 = (uint64_t *)v4[1];
  uint64_t v6 = *v5;
  int v7 = (_DWORD)v3 ? *(_DWORD *)(v6 + 4LL * (v3 - 1)) : 0;
  unsigned int v8 = v7 + *a3;
  if (v8 >= *(_DWORD *)(v6 + 4 * v3)) {
    return 0LL;
  }
  uint64_t v9 = *v4;
  if (*(_DWORD *)(v9 + 8) <= v8) {
    return 0LL;
  }
  else {
    return *(void *)(*(void *)v9 + 8LL * v8);
  }
}

void *std::__function::__func<swift::_gatherWrittenGenericParameters(swift::TargetTypeContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<void const*>,__swift::__runtime::llvm::SmallVectorImpl<swift::MetadataOrPack> &,swift::Demangle::__runtime::Demangler &)::$_1,std::allocator<swift::_gatherWrittenGenericParameters(swift::TargetTypeContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<void const*>,__swift::__runtime::llvm::SmallVectorImpl<swift::MetadataOrPack> &,swift::Demangle::__runtime::Demangler &)::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone( uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_189B8E0A0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift::_gatherWrittenGenericParameters(swift::TargetTypeContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<void const*>,__swift::__runtime::llvm::SmallVectorImpl<swift::MetadataOrPack> &,swift::Demangle::__runtime::Demangler &)::$_1,std::allocator<swift::_gatherWrittenGenericParameters(swift::TargetTypeContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<void const*>,__swift::__runtime::llvm::SmallVectorImpl<swift::MetadataOrPack> &,swift::Demangle::__runtime::Demangler &)::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone( uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_189B8E0A0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<swift::_gatherWrittenGenericParameters(swift::TargetTypeContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<void const*>,__swift::__runtime::llvm::SmallVectorImpl<swift::MetadataOrPack> &,swift::Demangle::__runtime::Demangler &)::$_1,std::allocator<swift::_gatherWrittenGenericParameters(swift::TargetTypeContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<void const*>,__swift::__runtime::llvm::SmallVectorImpl<swift::MetadataOrPack> &,swift::Demangle::__runtime::Demangler &)::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::operator()()
{
  return 0LL;
}

uint64_t *__swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*,swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::DenseMapInfo<swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*>,__swift::__runtime::llvm::detail::DenseMapPair<swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*,swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*>>,swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*,swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::DenseMapInfo<swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*>,__swift::__runtime::llvm::detail::DenseMapPair<swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*,swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*>>::InsertIntoBucket<swift::TargetOpaqueTypeDescriptor<swift::InProcess> const* const&>( uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }

  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
LABEL_3:
    uint64_t v8 = *a2;
    goto LABEL_4;
  }

  __swift::__runtime::llvm::DenseMap<swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*,swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::DenseMapInfo<swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*>,__swift::__runtime::llvm::detail::DenseMapPair<swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*,swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*>>::grow( a1,  v7);
  uint64_t v8 = *a3;
  int v10 = *(_DWORD *)(a1 + 16) - 1;
  unsigned int v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a2 = (uint64_t *)(*(void *)a1 + 16LL * v11);
  uint64_t v12 = *a2;
  if (*a3 != *a2)
  {
    int32x4_t v13 = 0LL;
    int v14 = 1;
    while (v12 != -4096)
    {
      if (v13) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v12 == -8192;
      }
      if (v15) {
        int32x4_t v13 = a2;
      }
      unsigned int v16 = v11 + v14++;
      unsigned int v11 = v16 & v10;
      a2 = (uint64_t *)(*(void *)a1 + 16LL * (v16 & v10));
      uint64_t v12 = *a2;
      if (v8 == *a2) {
        goto LABEL_4;
      }
    }

    if (v13) {
      a2 = v13;
    }
    goto LABEL_3;
  }

void *__swift::__runtime::llvm::DenseMap<swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*,swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::DenseMapInfo<swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*>,__swift::__runtime::llvm::detail::DenseMapPair<swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*,swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*>>::grow( uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(__swift::__runtime::llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = __swift::__runtime::llvm::allocate_buffer(16LL * v8, (std::align_val_t)8uLL);
  int v10 = result;
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0LL;
    uint64_t v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      if (((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0) {
        goto LABEL_39;
      }
      uint64_t v12 = ((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
      int v10 = &result[2 * (v12 & 0x1FFFFFFFFFFFFFFELL)];
      int32x4_t v13 = result + 2;
      uint64_t v14 = v12 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *(v13 - 2) = -4096LL;
        *int32x4_t v13 = -4096LL;
        v13 += 4;
        v14 -= 2LL;
      }

      while (v14);
      if (v12 != (v12 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_39:
        do
        {
          *int v10 = -4096LL;
          v10 += 2;
        }

        while (v10 != &result[2 * v11]);
      }
    }

    if ((_DWORD)v3)
    {
      int v15 = 0;
      int v16 = v11 - 1;
      int32x4_t v17 = v4;
      do
      {
        uint64_t v24 = *(void *)v17;
        if ((*(void *)v17 | 0x1000LL) != 0xFFFFFFFFFFFFF000LL)
        {
          unsigned int v25 = ((v24 >> 4) ^ (v24 >> 9)) & v16;
          uint8x16_t v23 = (void *)(*(void *)a1 + 16LL * v25);
          uint64_t v26 = *v23;
          if (v24 != *v23)
          {
            uint16x8_t v27 = 0LL;
            int v28 = 1;
            while (v26 != -4096)
            {
              if (v27) {
                BOOL v29 = 0;
              }
              else {
                BOOL v29 = v26 == -8192;
              }
              if (v29) {
                uint16x8_t v27 = v23;
              }
              unsigned int v30 = v25 + v28++;
              unsigned int v25 = v30 & v16;
              uint8x16_t v23 = (void *)(*(void *)a1 + 16LL * (v30 & v16));
              uint64_t v26 = *v23;
              if (v24 == *v23) {
                goto LABEL_23;
              }
            }

            if (v27) {
              uint8x16_t v23 = v27;
            }
          }

float swift_intToFloat32(uint64_t *a1, unint64_t a2)
{
  unint64_t v2 = ((unint64_t)(a2 >> 8) + 63) >> 6;
  uint64_t v3 = *a1;
  unint64_t v4 = v2 - 1;
  if (v2 == 1) {
    return (float)v3;
  }
  float v6 = (float)(unint64_t)v3;
  if (v2 == 2)
  {
    float v7 = 1.8447e19;
  }

  else
  {
    unint64_t v8 = 2 - v2;
    uint64_t v9 = (unint64_t *)(a1 + 1);
    float v7 = 1.8447e19;
    do
    {
      unint64_t v10 = *v9++;
      float v6 = v6 + (float)((float)v10 * v7);
      float v7 = v7 * 1.8447e19;
    }

    while (!__CFADD__(v8++, 1LL));
  }

  return v6 + (float)((float)a1[v4] * v7);
}

double swift_intToFloat64(uint64_t *a1, unint64_t a2)
{
  unint64_t v2 = ((unint64_t)(a2 >> 8) + 63) >> 6;
  uint64_t v3 = *a1;
  unint64_t v4 = v2 - 1;
  if (v2 == 1) {
    return (double)v3;
  }
  double v6 = (double)(unint64_t)v3;
  if (v2 == 2)
  {
    double v7 = 1.84467441e19;
  }

  else
  {
    unint64_t v8 = 2 - v2;
    uint64_t v9 = (unint64_t *)(a1 + 1);
    double v7 = 1.84467441e19;
    do
    {
      unint64_t v10 = *v9++;
      double v6 = v6 + (double)v10 * v7;
      double v7 = v7 * 1.84467441e19;
    }

    while (!__CFADD__(v8++, 1LL));
  }

  return v6 + (double)a1[v4] * v7;
}

void swift_once(dispatch_once_t *a1, dispatch_function_t function, void *context)
{
  if (*a1 != -1) {
    dispatch_once_f(a1, context, function);
  }
}

uint64_t swift_getRuntimeLibraryPath()
{
}

uint64_t anonymous namespace'::_swift_initRuntimePath(_anonymous_namespace_ *this, void *a2)
{
  uint64_t result = dyld_image_path_containing_address();
  return result;
}

uint64_t swift_getRootPath()
{
}

void anonymous namespace'::_swift_initRootPath(_anonymous_namespace_ *this, void *a2)
{
  if (swift::runtime::environment::initializeToken != -1) {
    dispatch_once_f( &swift::runtime::environment::initializeToken,  0LL,  (dispatch_function_t)swift::runtime::environment::initialize);
  }
  unint64_t v2 = (char *)swift::runtime::environment::SWIFT_ROOT_variable;
  if (!swift::runtime::environment::SWIFT_ROOT_variable || !*swift::runtime::environment::SWIFT_ROOT_variable)
  {
    {
      unint64_t v2 = 0LL;
      goto LABEL_43;
    }

    do
    {
        break;
      int v9 = *(unsigned __int8 *)--v8;
    }

    while (v9 != 47);
      && *(_BYTE *)(v8 - 10) == 47
      && !strncmp((const char *)(v8 - 9), "lib", 3uLL)
      && *(_BYTE *)(v8 - 6) == 47
      && !strncmp((const char *)(v8 - 5), "swift", 5uLL))
    {
      v8 -= 10LL;
    }

    else
    {
      size_t v11 = v8;
      do
      {
        int v12 = *(unsigned __int8 *)--v11;
      }

      while (v12 != 47);
      if ((uint64_t)(v11 - (void)v7) >= 10
        && *(_BYTE *)(v11 - 10) == 47
        && !strncmp((const char *)(v11 - 9), "lib", 3uLL)
        && *(_BYTE *)(v11 - 6) == 47
        && !strncmp((const char *)(v11 - 5), "swift", 5uLL))
      {
        goto LABEL_44;
      }

      do
      {
        int v13 = *(unsigned __int8 *)--v11;
      }

      while (v13 != 47);
      if ((uint64_t)(v11 - (void)v7) >= 10
        && *(_BYTE *)(v11 - 10) == 47
        && !strncmp((const char *)(v11 - 9), "lib", 3uLL)
        && *(_BYTE *)(v11 - 6) == 47
        && !strncmp((const char *)(v11 - 5), "swift", 5uLL))
      {
LABEL_44:
        size_t v8 = v11 - 10;
      }

      else if (v10 > 4 && *(_BYTE *)(v8 - 4) == 47)
      {
        int v14 = strncmp((const char *)(v8 - 3), "bin", 3uLL);
        uint64_t v15 = -4LL;
        if (v14) {
          uint64_t v15 = 0LL;
        }
        v8 += v15;
      }
    }

    size_t v16 = v8 - (void)v7;
    if ((const void *)v8 == v7)
    {
      unint64_t v2 = "./";
      goto LABEL_43;
    }

    size_t v17 = v16 + 1;
    unint64_t v2 = (char *)malloc(v16 + 2);
    memcpy(v2, v7, v17);
    double v6 = &v2[v17];
    goto LABEL_40;
  }

  size_t v3 = strlen(swift::runtime::environment::SWIFT_ROOT_variable);
  if (*(_BYTE *)(v3 + swift::runtime::environment::SWIFT_ROOT_variable - 1) != 47)
  {
    size_t v4 = v3;
    unint64_t v5 = (char *)malloc(v3 + 2);
    memcpy(v5, v2, v4);
    v5[v4] = 47;
    double v6 = &v5[v4 + 1];
    unint64_t v2 = v5;
LABEL_40:
    *double v6 = 0;
  }

_BYTE *swift_copyAuxiliaryExecutablePath(_anonymous_namespace_ *this, uint64_t a2, char *a3)
{
    return 0LL;
  if (!result)
  {
    if (!result)
    {
      if (!result)
      {
        if (!result)
        {
          if (!result)
          {
            if (!result) {
          }
            }
        }
      }
    }
  }

  return result;
}

_BYTE *anonymous namespace'::_swift_tryAuxExePath( _anonymous_namespace_ *this, _anonymous_namespace_ *a2, char *a3, ...)
{
  if (stat(v4, &v9)) {
    goto LABEL_4;
  }
  if (stat(v7, &v9))
  {
    free(v7);
LABEL_4:
    double v7 = 0LL;
  }

  free(v4);
  return v7;
}

_BYTE *anonymous namespace'::_swift_joinPathsV(_anonymous_namespace_ *this, char *a2, char *a3)
{
  uint64_t v21 = a2;
  size_t v4 = strlen((const char *)this);
  do
  {
    size_t v5 = v4;
    if (!v4) {
      break;
    }
    --v4;
  }

  while (*((_BYTE *)this + v5 - 1) == 47);
  if (v5 <= 1) {
    uint64_t v6 = 1LL;
  }
  else {
    uint64_t v6 = v5;
  }
LABEL_7:
  while (1)
  {
    double v7 = (const char **)v21;
    v21 += 8;
    size_t v8 = *v7;
    if (!*v7) {
      break;
    }
    size_t v9 = strlen(*v7);
    while (v9)
    {
      size_t v10 = v9 - 1;
      int v11 = v8[--v9];
      if (v11 != 47)
      {
        v6 += v10 + 2;
        goto LABEL_7;
      }
    }
  }

  int v12 = malloc(v6 + 1);
  int v13 = v12;
  if (v5)
  {
    memcpy(v12, this, v5);
    int v14 = &v13[v5];
  }

  else
  {
    *int v12 = 47;
    int v14 = v12 + 1;
  }

  uint64_t v15 = (const char **)a2;
  uint8x16_t v23 = a2 + 8;
  size_t v16 = *v15;
  if (*v15)
  {
    do
    {
      size_t v18 = strlen(v16) - 1;
      while (v18 != -1LL)
      {
        int v19 = v16[v18--];
        if (v19 != 47)
        {
          *int v14 = 47;
          memcpy(v14 + 1, v16, v18 + 2);
          v14 += v18 + 3;
          break;
        }
      }

      size_t v17 = (const char **)v23;
      v23 += 8;
      size_t v16 = *v17;
    }

    while (*v17);
  }

  v13[v6] = 0;
  return v13;
}

_BYTE *anonymous namespace'::_swift_joinPaths(_anonymous_namespace_ *this, const char *a2, char *a3, ...)
{
}

size_t _swift_strlcpy(char *a1, const char *__s, size_t a3)
{
  size_t v6 = strlen(__s);
  size_t v7 = v6;
  if (v6 >= a3)
  {
    if (a3)
    {
      size_t v8 = a3 - 1;
      memmove(a1, __s, v8);
      a1[v8] = 0;
    }
  }

  else
  {
    memmove(a1, __s, v6 + 1);
  }

  return v7;
}

uint64_t (***swift::TargetProtocolConformanceDescriptor<swift::InProcess>::getCanonicalTypeMetadata( uint64_t a1))()
{
  unsigned int v1 = (*(_DWORD *)(a1 + 12) >> 3) & 7;
  if (v1 < 2)
  {
    size_t v4 = (int *)(a1 + 4);
    if (v1 == 1)
    {
      uint64_t result = *(uint64_t (****)())((char *)v4 + *v4);
      if (!result) {
        return result;
      }
    }

    else
    {
      uint64_t v5 = *v4;
      if (!(_DWORD)v5) {
        return 0LL;
      }
      uint64_t result = (uint64_t (***)())((char *)v4 + v5);
    }

    if ((*(_DWORD *)result & 0x10) != 0)
    {
      if ((*(_DWORD *)result & 0x80) == 0)
      {
        uint64_t v9 = *((int *)result + 3);
        size_t v10 = (uint64_t (*)(uint64_t))((char *)result + v9 + 12);
        if ((_DWORD)v9 && v10 != 0LL) {
          return (uint64_t (***)())v10(255LL);
        }
      }
    }

    else if ((*(_DWORD *)result & 0x1F) == 3)
    {
      return swift::_getSimpleProtocolTypeMetadata(result);
    }

    return 0LL;
  }

  if (v1 - 2 > 1) {
    goto LABEL_28;
  }
  unint64_t v2 = (int *)(a1 + 4);
  if (v1 != 2)
  {
    if (v1 == 3)
    {
      uint64_t result = *(uint64_t (****)())((char *)v2 + *v2);
      if (!result) {
        return result;
      }
      return (uint64_t (***)())swift_getObjCClassMetadata((unint64_t)result);
    }

uint64_t swift::TargetProtocolConformanceDescriptor<swift::InProcess>::getWitnessTable( uint64_t a1, uint64_t a2, const char *a3, char *a4)
{
  uint64_t v6 = 0LL;
  v38[0] = v39;
  v38[1] = (void *)0x800000000LL;
  uint64_t v7 = *(void *)a2;
  if (*(void *)a2 > 0x7FFuLL) {
    LODWORD(v7) = 0;
  }
  if ((int)v7 <= 514)
  {
    if ((v7 - 512) >= 3)
    {
      uint64_t v8 = 0LL;
      if ((_DWORD)v7) {
        goto LABEL_19;
      }
      if ((*(_BYTE *)(a2 + 32) & 2) == 0) {
        goto LABEL_18;
      }
      uint64_t v9 = *(unsigned __int16 **)(a2 + 64);
      if (!v9) {
        goto LABEL_18;
      }
      goto LABEL_12;
    }

void swift::_checkGenericRequirements( uint64_t a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X5>, uint64_t a7@<X6>, void *a8@<X7>, uint64_t a9@<X8>)
{
  int v240 = (int)a2;
  int v253 = &v255;
  __int128 v254 = xmmword_18180CC10;
  if (!a4) {
    goto LABEL_396;
  }
  uint64_t v12 = a5;
  uint64_t v13 = a3;
  uint64_t v244 = a3 + 12 * a4;
  v235 = (const void *)(a5 + 16);
  while (2)
  {
    unint64_t v14 = (void *)a6[3];
    if ((*(_BYTE *)v13 & 0x20) == 0)
    {
      if (v14)
      {
        if (v14 != a6)
        {
          uint64_t v248 = (void *)(*(uint64_t (**)(void *))(*v14 + 16LL))(v14);
          uint64_t v15 = (void *)a8[3];
          if (v15) {
            goto LABEL_7;
          }
LABEL_15:
          uint64_t v246 = 0LL;
LABEL_21:
          if ((*(_DWORD *)v13 & 0x1Fu) >= 6 && (*(_DWORD *)v13 & 0x1F) != 31)
          {
            *(void *)a9 = "unknown kind";
            *(void *)(a9 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
            *(_BYTE *)(a9 + 16) = 1;
            goto LABEL_352;
          }

          uint64_t v18 = (int *)(v13 + 4);
          SymbolicMangledNameStringRef = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef( (_BYTE *)(*(int *)(v13 + 4) + v13 + 4),  a2);
          uint64_t v21 = v20;
          uint64_t v22 = *(void *)v12;
          if (v248)
          {
            if (v248 != v247)
            {
              v274 = (void *)(*(uint64_t (**)(void))(*v248 + 16LL))();
              uint8x16_t v23 = v246;
              if (v246) {
                goto LABEL_29;
              }
LABEL_32:
              v272 = 0LL;
              goto LABEL_51;
            }

            v274 = v273;
            (*(void (**)(void *, void *))(v247[0] + 24LL))(v247, v273);
            uint8x16_t v23 = v246;
            if (!v246) {
              goto LABEL_32;
            }
          }

          else
          {
            v274 = 0LL;
            uint8x16_t v23 = v246;
            if (!v246) {
              goto LABEL_32;
            }
          }

LABEL_348:
              uint64_t v12 = a5;
              *(_BYTE *)(a9 + 16) = v133;
              goto LABEL_349;
            case 3:
              *(_BYTE *)a9 = 0;
              *(_BYTE *)(a9 + 16) = 0;
              goto LABEL_182;
            case 4:
              __int128 v78 = operator new(8uLL);
              *(void *)__int128 v78 = "can't have same-shape requirement where subject type is not a pack";
              __int128 v79 = _ZZN5swift15TypeLookupErrorC1IZNS_L19TypeLookupErrorImplIJEEES0_PKcDpT_EUlvE_EERKT_ENUlPvNS0_7CommandESB_E_8__invokeESB_SC_SB__0;
              goto LABEL_134;
            case 5:
              unint64_t v80 = *(unsigned __int16 *)(v13 + 8);
              if (v80 != 0xFFFF)
              {
                uint64_t v81 = v254;
                uint64_t v12 = a5;
                if ((unint64_t)v254 <= v80)
                {
                  uint64_t v82 = v80 + 1 - v254;
                  if (v80 + 1 != (void)v254)
                  {
                    if (*((void *)&v254 + 1) <= v80)
                    {
                      __swift::__runtime::llvm::SmallVectorBase<unsigned long long>::grow_pod( (uint64_t)&v253,  &v255,  v80 + 1,  2LL);
                      uint64_t v81 = v254;
                    }

                    bzero((char *)v253 + 2 * v81, 2 * v82);
                    *(void *)&__int128 v254 = v81 + v82;
                  }
                }

                *((_WORD *)v253 + v80) |= *(_WORD *)(v13 + 10);
                goto LABEL_252;
              }

              checkInvertibleRequirements((uint64_t)v37, *(unsigned __int16 *)(v13 + 10), a9);
LABEL_182:
              uint64_t v12 = a5;
              goto LABEL_350;
            case 31:
              satisfiesLayoutConstraint(v13, (uint64_t)v37, a9);
              goto LABEL_182;
            default:
              __int128 v78 = operator new(0x10uLL);
              *(void *)__int128 v78 = "unknown generic requirement kind %u";
              v78[2] = v38;
              __int128 v79 = swift::TypeLookupError::TypeLookupError<swift::TypeLookupError swift::TypeLookupErrorImpl<unsigned int>(char const*,unsigned int)::{lambda(void)#1}>(swift::TypeLookupError swift::TypeLookupErrorImpl<unsigned int>(char const*,unsigned int)::{lambda(void)#1} const&)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
LABEL_134:
              *(void *)a9 = v78;
              *(void *)(a9 + 8) = v79;
              *(_BYTE *)(a9 + 16) = 1;
              goto LABEL_182;
          }
        }

        uint64_t v248 = v247;
        (*(void (**)(void *, void *))(*a6 + 24LL))(a6, v247);
        uint64_t v15 = (void *)a8[3];
        if (!v15) {
          goto LABEL_15;
        }
      }

      else
      {
        uint64_t v248 = 0LL;
        uint64_t v15 = (void *)a8[3];
        if (!v15) {
          goto LABEL_15;
        }
      }

LABEL_377:
            v205 = "<null>";
LABEL_378:
            swift::Demangle::__runtime::makeSymbolicMangledNameStringRef((_BYTE *)v25 + *v25, a2);
            int v217 = (int)v216;
            v218 = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef((_BYTE *)v25 + *v25, v216);
            uint64_t v219 = operator new(0x28uLL);
            *(void *)uint64_t v219 = "subject type %.*s does not conform to protocol %s at pack index %zu";
            v219[2] = v217;
            *((void *)v219 + 2) = v218;
            *((void *)v219 + 3) = v205;
            *((void *)v219 + 4) = v55;
            *(void *)a9 = v219;
            *(void *)(a9 + 8) = swift::TypeLookupError::TypeLookupError<swift::TypeLookupError swift::TypeLookupErrorImpl<int,char const*,char const*,unsigned long>(char const*,int,char const*,char const*,unsigned long)::{lambda(void)#1}>(swift::TypeLookupError swift::TypeLookupErrorImpl<int,char const*,char const*,unsigned long>(char const*,int,char const*,char const*,unsigned long)::{lambda(void)#1} const&)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
            *(_BYTE *)(a9 + 16) = 1;
            goto LABEL_379;
          }

          if ((v64 & 2) == 0)
          {
            if ((v64 & 0xFFFFFFFD) == 0) {
              goto LABEL_95;
            }
            std::string v65 = (void *)((char *)v56 + (v64 & 0xFFFFFFFFFFFFFFFCLL));
            if ((v64 & 1) != 0) {
              std::string v65 = (void *)*v65;
            }
            if ((v65 & 1) == 0)
            {
LABEL_95:
              uint64_t v57 = (uint64_t)v268;
              uint64_t v58 = v257;
              if (v257 >= (unint64_t)HIDWORD(v257))
              {
                __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod( (uint64_t)&v256,  &v258,  v257 + 1LL,  8LL);
                uint64_t v58 = v257;
              }

              *((void *)v256 + v58) = v57;
              LODWORD(v257) = v257 + 1;
              uint64_t v12 = a5;
            }
          }

          ++v55;
        }

        while (v54 != v55);
LABEL_165:
        uint64_t v104 = *(int *)(v13 + 8);
        if ((v104 & 2) == 0)
        {
          if ((v104 & 0xFFFFFFFD) == 0) {
            goto LABEL_170;
          }
          unint64_t v105 = (v104 & 0xFFFFFFFFFFFFFFFCLL) + v13 + 8;
          if ((v104 & 1) != 0) {
            unint64_t v105 = *(void *)v105;
          }
          if ((v105 & 1) == 0)
          {
LABEL_170:
            uint64_t WitnessTablePack = swift_allocateWitnessTablePack((uint64_t)v256, v257);
            unint64_t v107 = *(unsigned int *)(v12 + 8);
            if (v107 >= *(unsigned int *)(v12 + 12))
            {
              __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(v12, v235, v107 + 1, 8LL);
              unint64_t v107 = *(unsigned int *)(v12 + 8);
            }

            *(void *)(*(void *)v12 + 8 * v107) = WitnessTablePack;
            ++*(_DWORD *)(v12 + 8);
          }
        }

        *(_BYTE *)a9 = 0;
        *(_BYTE *)(a9 + 16) = 0;
LABEL_379:
        if (v256 != &v258) {
          free(v256);
        }
LABEL_381:
        if (v262 == 1) {
          v261(v260, 3LL, 0LL);
        }
LABEL_383:
        v220 = v250;
        if (v250 == v249)
        {
          v220 = v249;
          uint64_t v221 = 4LL;
LABEL_387:
          (*(void (**)(void))(*v220 + 8 * v221))();
        }

        else if (v250)
        {
          uint64_t v221 = 5LL;
          goto LABEL_387;
        }

        __int128 v194 = v252;
        if (v252 == v251)
        {
          __int128 v194 = v251;
          goto LABEL_392;
        }

LABEL_389:
        if (v194)
        {
          uint64_t v222 = 5LL;
          goto LABEL_393;
        }

LABEL_394:
        if (*(_BYTE *)(a9 + 16)) {
          goto LABEL_423;
        }
        v13 += 12LL;
        if (v13 != v244) {
          continue;
        }
LABEL_396:
        uint64_t v223 = a1;
        if (!v240)
        {
LABEL_422:
          *(_BYTE *)a9 = 0;
          *(_BYTE *)(a9 + 16) = 0;
          goto LABEL_423;
        }

        unint64_t v224 = 0LL;
        int v225 = 0;
        while (2)
        {
          else {
            int v226 = *((unsigned __int16 *)v253 + v224);
          }
          LODWORD(v256) = v224;
          LODWORD(v273[0]) = v225;
          uint64_t v227 = *(void *)(a7 + 24);
          if (!v227)
          {
            std::__throw_bad_function_call[abi:nn180100]();
            goto LABEL_430;
          }

          uint64_t v228 = (*(uint64_t (**)(uint64_t, void **, void *))(*(void *)v227 + 48LL))(v227, &v256, v273);
          if ((*(_BYTE *)(v223 + v224) & 0x3F) != 1)
          {
            if ((*(_BYTE *)(v223 + v224) & 0x3F) != 0)
            {
              int v233 = operator new(0x10uLL);
              uint64_t v234 = "unknown generic parameter kind %u";
              goto LABEL_428;
            }

            if (v228) {
              BOOL v229 = (v228 & 1) == 0;
            }
            else {
              BOOL v229 = 0;
            }
            if (!v229)
            {
              int v233 = operator new(0x10uLL);
              uint64_t v234 = "unexpected pack for generic parameter %u";
LABEL_428:
              *(void *)int v233 = v234;
              v233[2] = v224;
              *(void *)a9 = v233;
              *(void *)(a9 + 8) = swift::TypeLookupError::TypeLookupError<swift::TypeLookupError swift::TypeLookupErrorImpl<unsigned int>(char const*,unsigned int)::{lambda(void)#1}>(swift::TypeLookupError swift::TypeLookupErrorImpl<unsigned int>(char const*,unsigned int)::{lambda(void)#1} const&)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
              *(_BYTE *)(a9 + 16) = 1;
              goto LABEL_423;
            }

            checkInvertibleRequirements(v228, v226, a9);
            if (*(_BYTE *)(a9 + 16)) {
              goto LABEL_423;
            }
LABEL_398:
            ++v225;
            uint64_t v223 = a1;
LABEL_399:
            if (++v224 == v240) {
              goto LABEL_422;
            }
            continue;
          }

          break;
        }

        if (!v228) {
          goto LABEL_398;
        }
        if ((v228 & 1) == 0)
        {
          int v233 = operator new(0x10uLL);
          uint64_t v234 = "unexpected metadata for generic pack parameter %u";
          goto LABEL_428;
        }

        v230 = (uint64_t *)(v228 & 0xFFFFFFFFFFFFFFFELL);
        if ((v228 & 0xFFFFFFFFFFFFFFFELL) == 0) {
          goto LABEL_398;
        }
        uint64_t v231 = *(v230 - 1);
        if (!v231) {
          goto LABEL_398;
        }
        uint64_t v232 = 8 * v231;
        while (1)
        {
          checkInvertibleRequirements(*v230, v226, a9);
          if (*(_BYTE *)(a9 + 16)) {
            break;
          }
          ++v230;
          v232 -= 8LL;
          if (!v232) {
            goto LABEL_398;
          }
        }

LABEL_423:
        if (v253 != &v255) {
          free(v253);
        }
        return;
      case 1:
        uint64_t v238 = (int *)(v13 + 8);
        __int128 v83 = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef((_BYTE *)(*(int *)(v13 + 8) + v13 + 8), a2);
        uint64_t v85 = v84;
        if (v252)
        {
          if (v252 != v251)
          {
            int v259 = (void **)(*(uint64_t (**)(void))(*v252 + 16LL))();
            unint64_t v86 = v250;
            if (v250) {
              goto LABEL_139;
            }
LABEL_184:
            v270 = 0LL;
            goto LABEL_266;
          }

          int v259 = &v256;
          (*(void (**)(void *, void **))(v251[0] + 24LL))(v251, &v256);
          unint64_t v86 = v250;
          if (!v250) {
            goto LABEL_184;
          }
        }

        else
        {
          int v259 = 0LL;
          unint64_t v86 = v250;
          if (!v250) {
            goto LABEL_184;
          }
        }

LABEL_430:
          swift::fatalError(0LL, "Cannot get length of on-stack pack", v42, v43, v235);
        }

        goto LABEL_332;
      case 2:
        uint64_t v239 = (int *)(v13 + 8);
        uint64_t v87 = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef((_BYTE *)(*(int *)(v13 + 8) + v13 + 8), a2);
        int v88 = (uint64_t *)v12;
        char v89 = v87;
        uint64_t v91 = v90;
        uint64_t v92 = *v88;
        if (v252)
        {
          if (v252 != v251)
          {
            v270 = (uint64_t *)(*(uint64_t (**)(void))(*v252 + 16LL))();
            unint64_t v93 = v250;
            if (v250) {
              goto LABEL_144;
            }
LABEL_186:
            int v267 = 0LL;
            goto LABEL_291;
          }

          v270 = (uint64_t *)&v268;
          (*(void (**)(void *, uint64_t **))(v251[0] + 24LL))(v251, &v268);
          unint64_t v93 = v250;
          if (!v250) {
            goto LABEL_186;
          }
        }

        else
        {
          v270 = 0LL;
          unint64_t v93 = v250;
          if (!v250) {
            goto LABEL_186;
          }
        }

LABEL_321:
        swift::getTypePackByMangledName((uint64_t)v94, v96, &v256, &v268, (uint64_t)&v264);
        __int128 v175 = v270;
        if (v270 == (uint64_t *)&v268)
        {
          __int128 v175 = (uint64_t *)&v268;
          uint64_t v176 = 4LL;
        }

        else
        {
          if (!v270) {
            goto LABEL_326;
          }
          uint64_t v176 = 5LL;
        }

        (*(void (**)(void))(*v175 + 8 * v176))();
LABEL_326:
        uint64_t v177 = v259;
        if (v259 == &v256)
        {
          uint64_t v177 = &v256;
          uint64_t v178 = 4LL;
        }

        else
        {
          if (!v259) {
            goto LABEL_331;
          }
          uint64_t v178 = 5LL;
        }

        (*((void (**)(void))*v177 + v178))();
LABEL_331:
        if (v266 != 1)
        {
          if (v266) {
            uint64_t v181 = 0LL;
          }
          else {
            uint64_t v181 = v264;
          }
          if ((v51 & 1) != 0 && (v181 & 1) != 0)
          {
            uint64_t v182 = *(void *)((v51 & 0xFFFFFFFFFFFFFFFELL) - 8);
            uint64_t v183 = *(void *)((v181 & 0xFFFFFFFFFFFFFFFELL) - 8);
            if (v182 == v183)
            {
LABEL_339:
              *(_BYTE *)a9 = 0;
              *(_BYTE *)(a9 + 16) = 0;
              goto LABEL_381;
            }

            unint64_t v50 = operator new(0x18uLL);
            *unint64_t v50 = "same-shape requirement unsatisfied; %zu != %zu";
            v50[1] = v182;
            uint64_t v50[2] = v183;
            unint64_t v101 = swift::TypeLookupError::TypeLookupError<swift::TypeLookupError swift::TypeLookupErrorImpl<unsigned long,unsigned long>(char const*,unsigned long,unsigned long)::{lambda(void)#1}>(swift::TypeLookupError swift::TypeLookupErrorImpl<unsigned long,unsigned long>(char const*,unsigned long,unsigned long)::{lambda(void)#1} const&)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
LABEL_159:
            *(void *)(a9 + 8) = v101;
            goto LABEL_87;
          }

          goto LABEL_430;
        }

LABEL_332:
        uint64_t v179 = v264;
        int v180 = (uint64_t (*)(uint64_t, uint64_t, void))v265;
        *(void *)(a9 + 8) = v265;
        *(void *)a9 = v180(v179, 2LL, 0LL);
        char v154 = 1;
        goto LABEL_374;
      case 5:
        unint64_t v98 = *(unsigned __int16 *)(v13 + 8);
        if (v98 == 0xFFFF)
        {
          if ((v51 & 1) == 0) {
            goto LABEL_430;
          }
          int v109 = (uint64_t *)(v51 & 0xFFFFFFFFFFFFFFFELL);
          for (uint64_t i = *(void *)((v51 & 0xFFFFFFFFFFFFFFFELL) - 8); i; --i)
          {
            checkInvertibleRequirements(*v109, *(unsigned __int16 *)(v13 + 10), a9);
            if (*(_BYTE *)(a9 + 16)) {
              goto LABEL_381;
            }
            ++v109;
          }
        }

        else
        {
          uint64_t v99 = v254;
          if ((unint64_t)v254 <= v98)
          {
            uint64_t v100 = v98 + 1 - v254;
            if (v98 + 1 != (void)v254)
            {
              if (*((void *)&v254 + 1) <= v98)
              {
                __swift::__runtime::llvm::SmallVectorBase<unsigned long long>::grow_pod( (uint64_t)&v253,  &v255,  v98 + 1,  2LL);
                uint64_t v99 = v254;
              }

              bzero((char *)v253 + 2 * v99, 2 * v100);
              *(void *)&__int128 v254 = v99 + v100;
            }
          }

          *((_WORD *)v253 + v98) |= *(_WORD *)(v13 + 10);
        }

        goto LABEL_339;
      case 31:
        if ((v51 & 1) == 0) {
          goto LABEL_430;
        }
        uint64_t v102 = (uint64_t *)(v51 & 0xFFFFFFFFFFFFFFFELL);
        uint64_t v103 = *(void *)((v51 & 0xFFFFFFFFFFFFFFFELL) - 8);
        if (!v103) {
          goto LABEL_339;
        }
        do
        {
          satisfiesLayoutConstraint(v13, *v102, a9);
          if (*(_BYTE *)(a9 + 16)) {
            goto LABEL_381;
          }
          ++v102;
          --v103;
        }

        while (v103);
        goto LABEL_339;
      default:
        unint64_t v50 = operator new(0x10uLL);
        *unint64_t v50 = "unknown generic requirement kind %u";
        *((_DWORD *)v50 + 2) = v52;
        unint64_t v101 = swift::TypeLookupError::TypeLookupError<swift::TypeLookupError swift::TypeLookupErrorImpl<unsigned int>(char const*,unsigned int)::{lambda(void)#1}>(swift::TypeLookupError swift::TypeLookupErrorImpl<unsigned int>(char const*,unsigned int)::{lambda(void)#1} const&)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
        goto LABEL_159;
    }
  }

            uint64_t v75 = 0LL;
          }

          v249 = 345;
          return (unsigned int *)swift::Demangle::__runtime::Demangler::createWithChild( this,  v249,  (swift::Demangle::__runtime::Node *)v75,  (uint64_t)v75,  a5);
        case 'h':
          uint64_t v219 = *((_DWORD *)this + 24);
          if (!v219) {
            goto LABEL_333;
          }
          v220 = v219 - 1;
          uint64_t v221 = *((void *)this + 11);
          uint64_t v75 = *(unsigned __int16 **)(v221 + 8LL * (v219 - 1));
          uint64_t v222 = v75[8];
          if (v222 == 232)
          {
            *((_DWORD *)this + 24) = v220;
          }

          else
          {
            if (v222 == 43)
            {
              *((_DWORD *)this + 24) = v220;
              else {
                *((_DWORD *)this + 24) = v223;
              }
              v250 = 286;
              return (unsigned int *)swift::Demangle::__runtime::Demangler::createWithChildren( this,  v250,  (swift::Demangle::__runtime::Node *)v78,  (swift::Demangle::__runtime::Node *)v75,  a5);
            }

void swift::addImageProtocolConformanceBlockCallbackUnsafe(swift *this, unint64_t a2, char *a3)
{
  if ((dyld_shared_cache_some_image_overridden() & 1) == 0
    && (qword_18C486EB0 <= a2 ? (BOOL v5 = unk_18C486EB8 > a2) : (BOOL v5 = 0),
        v5 || MEMORY[0x1895F8C50] && _dyld_has_preoptimized_swift_protocol_conformances()))
  {
    if (byte_18C486EC1)
    {
      *(void *)&__int128 v6 = a2;
      *((void *)&v6 + 1) = &a3[a2];
    }
  }

  else
  {
    _registerProtocolConformances((uint64_t)&Conformances, a2, (uint64_t)&a3[a2]);
  }

void swift::ConcurrentReadableArray<anonymous namespace'::ConformanceSection>::push_back( uint64_t a1, _OWORD *a2)
{
  size_t v4 = (os_unfair_lock_s *)(a1 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 24));
  BOOL v5 = *(unint64_t **)(a1 + 16);
  if (v5) {
    unint64_t v6 = *v5;
  }
  else {
    unint64_t v6 = 0LL;
  }
  uint64_t v7 = *(unint64_t **)(a1 + 16);
  if (v6 >= *(void *)a1)
  {
    if (2 * v6 <= 0x10) {
      unint64_t v8 = 16LL;
    }
    else {
      unint64_t v8 = 2 * v6;
    }
    uint64_t v9 = (unint64_t *)malloc((32 * (v8 >> 1)) | 8);
    if (!v9) {
      swift::hashable_support::findHashableBaseTypeOfHashableType();
    }
    uint64_t v7 = v9;
    *uint64_t v9 = 0LL;
    if (v5)
    {
      if (v6)
      {
        unint64_t v10 = v9 + 1;
        int v11 = (__int128 *)(v5 + 1);
        unint64_t v12 = v6;
        do
        {
          __int128 v13 = *v11++;
          *v10++ = v13;
          --v12;
        }

        while (v12);
      }

      atomic_store(v6, v9);
      unint64_t v14 = malloc(0x10uLL);
      *unint64_t v14 = *(void *)(a1 + 32);
      v14[1] = v5;
      *(void *)(a1 + 32) = v14;
    }

    *(void *)a1 = v8;
    atomic_store((unint64_t)v7, (unint64_t *)(a1 + 16));
  }

  *(_OWORD *)&v7[2 * v6 + 1] = *a2;
  atomic_store(v6 + 1, v7);
  __dmb(0xBu);
  if (!*(void *)(a1 + 8))
  {
    uint64_t v15 = *(void **)(a1 + 32);
    if (v15)
    {
      do
      {
        size_t v17 = (void *)*v15;
        uint64_t v16 = (unint64_t *)v15[1];
        unint64_t v18 = -1LL;
        do
        {
          unint64_t v19 = atomic_load(v16);
          ++v18;
        }

        while (v18 < v19);
        free(v16);
        free(v15);
        uint64_t v15 = v17;
      }

      while (v17);
    }

    *(void *)(a1 + 32) = 0LL;
  }

  os_unfair_lock_unlock(v4);
}

void _registerProtocolConformances(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)&__int128 v12 = a2;
  *((void *)&v12 + 1) = a3;
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 24));
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 16) = 0LL;
  *(_DWORD *)(a1 + 4) = 0;
  *(void *)(a1 + 8) = 0LL;
  unint64_t v6 = v4 & 0xFFFFFFFFFFFFFFFCLL;
  if ((v4 & 3) == 0 || v6 == 0)
  {
    unint64_t v8 = *(void **)(a1 + 32);
  }

  else
  {
    unint64_t v8 = malloc(0x10uLL);
    *unint64_t v8 = *(void *)(a1 + 32);
    v8[1] = v6;
  }

  uint64_t v9 = malloc(0x10uLL);
  *uint64_t v9 = v8;
  v9[1] = v5;
  *(void *)(a1 + 32) = v9;
  __dmb(0xBu);
  if (!*(_DWORD *)a1)
  {
    unint64_t v10 = *(void ***)(a1 + 32);
    if (v10)
    {
      do
      {
        int v11 = (void **)*v10;
        free(v10[1]);
        free(v10);
        unint64_t v10 = v11;
      }

      while (v11);
    }

    *(void *)(a1 + 32) = 0LL;
  }

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 24));
}

void swift_registerProtocolConformances(uint64_t a1, uint64_t a2)
{
  if (qword_18C486EF0 != -1) {
    dispatch_once_f( &qword_18C486EF0,  &Conformances,  (dispatch_function_t)swift::Lazy<ConformanceState>::defaultInitCallback);
  }
  _registerProtocolConformances((uint64_t)&Conformances, a1, a2);
}

const char *swift::_searchConformancesByMangledTypeName(swift *this, swift::Demangle::__runtime::Node *a2)
{
  if (swift::runtime::trace::LogsToken != -1) {
    dispatch_once_f(&swift::runtime::trace::LogsToken, 0LL, (dispatch_function_t)swift::runtime::trace::setupLogs);
  }
  if (swift::runtime::trace::TracingEnabled)
  {
    os_signpost_id_t v3 = os_signpost_id_generate((os_log_t)swift::runtime::trace::ScanLog);
    if (v3 - 1 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_17;
    }
    uint64_t v4 = (os_log_s *)swift::runtime::trace::ScanLog;
    if (!os_signpost_enabled((os_log_t)swift::runtime::trace::ScanLog)) {
      goto LABEL_17;
    }
    if (this)
    {
      v25[0] = 0;
      *(void *)&v25[1] = 0x101010101010101LL;
      v25[9] = 1;
      *(void *)&v25[10] = 0x101010100000000LL;
      char v26 = 1;
      __int16 v27 = 256;
      char v28 = 1;
      uint64_t v29 = 0LL;
      uint64_t v30 = 0LL;
      v31[0] = &unk_189B8B0E8;
      v31[1] = swift::Demangle::__runtime::genericParameterName;
      int v32 = v31;
      swift::Demangle::__runtime::nodeToString(this, (__int128 *)v25, &__p);
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)buf = 136315138;
      unsigned int v35 = (const char *)p_p;
      _os_signpost_emit_with_name_impl( &swift_runtimeSupportsNoncopyableTypes,  v4,  OS_SIGNPOST_INTERVAL_BEGIN,  v3,  "section_scan",  "protocol conformance scan for %s",  buf,  0xCu);
      unint64_t v6 = v32;
      if (v32 == v31)
      {
        uint64_t v7 = 4LL;
        unint64_t v6 = v31;
        goto LABEL_46;
      }

      if (v32)
      {
        uint64_t v7 = 5LL;
LABEL_46:
        (*(void (**)(void))(*v6 + 8 * v7))();
      }
    }

    else
    {
      *(_DWORD *)buf = 136315138;
      unsigned int v35 = "<null>";
      _os_signpost_emit_with_name_impl( &swift_runtimeSupportsNoncopyableTypes,  v4,  OS_SIGNPOST_INTERVAL_BEGIN,  v3,  "section_scan",  "protocol conformance scan for %s",  buf,  0xCu);
    }
  }

  else
  {
LABEL_16:
    os_signpost_id_t v3 = 0LL;
  }

uint64_t _swift_class_isSubclass(uint64_t a1, uint64_t *a2)
{
  return isSubclass(a1, a2);
}

uint64_t isSubclass(uint64_t SuperclassForMaybeIncompleteMetadata, uint64_t *a2)
{
  unint64_t v2 = a2;
  unint64_t v3 = *a2;
  if (*(void *)SuperclassForMaybeIncompleteMetadata > 0x7FFuLL
    || *(void *)SuperclassForMaybeIncompleteMetadata == 0LL)
  {
    if (v3 != 515)
    {
      if (v3 == 773)
      {
        unint64_t v2 = (uint64_t *)a2[1];
        while (1)
        {
          SuperclassForMaybeIncompleteMetadata = getSuperclassForMaybeIncompleteMetadata( SuperclassForMaybeIncompleteMetadata,  0LL,  0,  1);
          BOOL v5 = v2 == (uint64_t *)SuperclassForMaybeIncompleteMetadata;
          BOOL v7 = *(void *)SuperclassForMaybeIncompleteMetadata > 0x7FFuLL
            || *(void *)SuperclassForMaybeIncompleteMetadata == 0LL;
          if (!v7 || (*(_BYTE *)(SuperclassForMaybeIncompleteMetadata + 32) & 2) == 0) {
            return swift_dynamicCastMetatype((uint64_t *)SuperclassForMaybeIncompleteMetadata, v2) != 0LL;
          }
        }
      }

      else
      {
        while (1)
        {
          SuperclassForMaybeIncompleteMetadata = getSuperclassForMaybeIncompleteMetadata( SuperclassForMaybeIncompleteMetadata,  0LL,  0,  1);
          BOOL v5 = SuperclassForMaybeIncompleteMetadata == (void)v2;
          BOOL v8 = *(void *)SuperclassForMaybeIncompleteMetadata > 0x7FFuLL
            || *(void *)SuperclassForMaybeIncompleteMetadata == 0LL;
          if (!v8 || (*(_BYTE *)(SuperclassForMaybeIncompleteMetadata + 32) & 2) == 0) {
            return 0LL;
          }
        }
      }

      return v5;
    }
  }

  else if (v3 <= 0x7FF && *a2 != 0LL)
  {
    return swift_dynamicCastMetatype((uint64_t *)SuperclassForMaybeIncompleteMetadata, v2) != 0LL;
  }

  return 0LL;
}

void checkInvertibleRequirements(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)a1;
  if (*(void *)a1 > 0x7FFuLL) {
    LODWORD(v6) = 0;
  }
  if ((int)v6 > 514)
  {
    if ((_DWORD)v6 != 515 && (_DWORD)v6 != 516)
    {
LABEL_18:
      if ((int)v6 > 767)
      {
        switch((int)v6)
        {
          case 769:
            uint64_t v14 = *(unsigned int *)(a1 + 8);
            if (!*(_DWORD *)(a1 + 8)) {
              goto LABEL_24;
            }
            uint64_t v15 = (unsigned __int16)a2;
            uint64_t v16 = (void *)(a1 + 24);
            while (1)
            {
              checkInvertibleRequirements(*v16, v15);
              if (*(_BYTE *)(a3 + 16)) {
                return;
              }
              v16 += 2;
              if (!--v14) {
                goto LABEL_24;
              }
            }

          case 770:
            uint64_t v19 = *(void *)(a1 + 8);
            if ((v19 & 0x80000000) != 0)
            {
              unsigned int v20 = swift::TargetFunctionTypeMetadata<swift::InProcess>::getExtendedFlags(a1) >> 16;
              uint64_t v19 = *(void *)(a1 + 8);
            }

            else
            {
              unsigned int v20 = 0;
            }

            if ((v19 & 0x4FF0000) != 0) {
              int v25 = v20;
            }
            else {
              int v25 = v20 | 2;
            }
            __int16 v26 = v25 & ~(_WORD)a2;
            if ((v25 & ~a2) == 0) {
              goto LABEL_24;
            }
            size_t v17 = operator new(0x10uLL);
            __int16 v27 = "function type missing invertible protocols %x";
            goto LABEL_47;
          case 775:
            uint64_t v21 = *(unsigned int **)(a1 + 8);
            unint64_t v23 = (unsigned __int16 *)(v21 + 4);
            unint64_t v22 = *v21;
            if ((*v21 & 0x800) != 0) {
              uint64_t v24 = 0LL;
            }
            else {
              uint64_t v24 = *((unsigned __int16 *)v21 + 4);
            }
            if ((*v21 & 0x1100) == 0x100) {
              uint64_t v28 = *v23;
            }
            else {
              uint64_t v28 = 0LL;
            }
            uint64_t v29 = *((unsigned __int16 *)v21 + 5);
            if (!v29) {
              goto LABEL_24;
            }
            unint64_t v30 = ((((unint64_t)&v23[4 * ((v22 >> 8) & 1) + 1] + 1) & 0xFFFFFFFFFFFFFFFCLL)
                 + 4 * ((v22 >> 9) & 1)
                 + 4LL * ((v22 >> 10) & 1)
                 + v28
                 + v24
                 + 3) & 0xFFFFFFFFFFFFFFFCLL;
            int v31 = (unsigned __int16)~(_WORD)a2;
            uint64_t v32 = 12 * v29;
            break;
          default:
            goto LABEL_24;
        }

        while (1)
        {
          if ((*(_DWORD *)v30 & 0x1F) == 5)
          {
            int v33 = *(unsigned __int16 *)(v30 + 10);
            __int16 v26 = v33 & v31;
            if ((v33 & v31) != 0) {
              break;
            }
          }

          v30 += 12LL;
          v32 -= 12LL;
          if (!v32) {
            goto LABEL_24;
          }
        }

        size_t v17 = operator new(0x10uLL);
        __int16 v27 = "existential type missing invertible protocols %x";
LABEL_47:
        *(void *)size_t v17 = v27;
        v17[4] = v26;
        goto LABEL_52;
      }

uint64_t (***swift::findConformingSuperclass(uint64_t a1, uint64_t a2))()
{
  uint64_t v2 = a1;
  unint64_t v3 = (int *)(a2 + 4);
  int v4 = (*(_DWORD *)(a2 + 12) >> 3) & 7;
  if (v4 == 1)
  {
    CanonicalTypeMetadata = *(uint64_t (****)())((char *)v3 + *v3);
    if (!CanonicalTypeMetadata) {
      goto LABEL_5;
    }
LABEL_9:
    char v7 = 1;
    if (!a1) {
      return 0LL;
    }
LABEL_10:
    if ((v7 & 1) == 0)
    {
      if (CanonicalTypeMetadata != (uint64_t (***)())v2)
      {
        char v8 = 0;
        goto LABEL_17;
      }

      return (uint64_t (***)())v2;
    }

uint64_t swift_conformsToProtocol(uint64_t a1, uint64_t a2)
{
  if (swift_conformsToProtocol::Override) {
    return swift_conformsToProtocol::Override(a1, a2, swift_conformsToProtocolImpl);
  }
  uint64_t result = swift_conformsToProtocolMaybeInstantiateSuperclasses(a1, a2, 0LL, 0LL);
  if (!result)
  {
    if (v5) {
      return swift_conformsToProtocolMaybeInstantiateSuperclasses(a1, a2, (const char *)1, v6);
    }
  }

  return result;
}

uint64_t swift_conformsToProtocolImpl(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t result = swift_conformsToProtocolMaybeInstantiateSuperclasses(a1, a2, 0LL, a4);
  if (!result)
  {
    if (v7) {
      return swift_conformsToProtocolMaybeInstantiateSuperclasses(a1, a2, (const char *)1, v8);
    }
  }

  return result;
}

uint64_t swift_conformsToProtocol2(uint64_t a1, uint64_t a2)
{
  if (swift_conformsToProtocol2::Override) {
    return swift_conformsToProtocol2::Override(a1, a2, swift_conformsToProtocol2Impl);
  }
  uint64_t result = swift_conformsToProtocolMaybeInstantiateSuperclasses(a1, a2, 0LL, 0LL);
  if (!result)
  {
    if (v5) {
      return swift_conformsToProtocolMaybeInstantiateSuperclasses(a1, a2, (const char *)1, v6);
    }
  }

  return result;
}

uint64_t swift_conformsToProtocol2Impl(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t result = swift_conformsToProtocolMaybeInstantiateSuperclasses(a1, a2, 0LL, a4);
  if (!result)
  {
    if (v7) {
      return swift_conformsToProtocolMaybeInstantiateSuperclasses(a1, a2, (const char *)1, v8);
    }
  }

  return result;
}

uint64_t swift_conformsToProtocolCommon(uint64_t a1, uint64_t a2)
{
  if (swift_conformsToProtocolCommon::Override) {
    return swift_conformsToProtocolCommon::Override(a1, a2, swift_conformsToProtocolCommonImpl);
  }
  uint64_t result = swift_conformsToProtocolMaybeInstantiateSuperclasses(a1, a2, 0LL, 0LL);
  if (!result)
  {
    if (v5) {
      return swift_conformsToProtocolMaybeInstantiateSuperclasses(a1, a2, (const char *)1, v6);
    }
  }

  return result;
}

uint64_t swift_conformsToProtocolCommonImpl(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t result = swift_conformsToProtocolMaybeInstantiateSuperclasses(a1, a2, 0LL, a4);
  if (!result)
  {
    if (v7) {
      return swift_conformsToProtocolMaybeInstantiateSuperclasses(a1, a2, (const char *)1, v8);
    }
  }

  return result;
}

uint64_t getSuperclassForMaybeIncompleteMetadata(uint64_t a1, uint64_t a2, char a3, int a4)
{
  if ((*(_BYTE *)(a1 + 32) & 2) == 0 || !*(void *)(a1 + 64)) {
    return *(void *)(a1 + 8);
  }
  if (a3)
  {
    if (a2 != 1) {
      goto LABEL_10;
    }
LABEL_16:
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata(*(void *)(a1 + 8));
    swift_checkMetadataState((const char *)0x100, ObjCClassMetadata);
    return ObjCClassMetadata;
  }

  swift_checkMetadataState((const char *)0x100, a1);
  if (a2 == 1) {
    goto LABEL_16;
  }
LABEL_10:
  if (!a2) {
    return swift_getObjCClassMetadata(*(void *)(a1 + 8));
  }
  if (a4) {
    return getSuperclassMetadata(511LL, (uint64_t *)a1);
  }
  else {
    return 0LL;
  }
}

void *satisfiesLayoutConstraint@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4 = *(_DWORD *)(a1 + 8);
  if (v4)
  {
    uint64_t result = operator new(0x10uLL);
    *(void *)uint64_t result = "unknown layout kind %u";
    *((_DWORD *)result + 2) = v4;
    uint64_t v6 = swift::TypeLookupError::TypeLookupError<swift::TypeLookupError swift::TypeLookupErrorImpl<unsigned int>(char const*,unsigned int)::{lambda(void)#1}>(swift::TypeLookupError swift::TypeLookupErrorImpl<unsigned int>(char const*,unsigned int)::{lambda(void)#1} const&)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
LABEL_6:
    *(void *)a3 = result;
    *(void *)(a3 + 8) = v6;
    char v9 = 1;
    goto LABEL_7;
  }

  uint64_t result = (void *)swift::TargetMetadata<swift::InProcess>::satisfiesClassConstraint(a2);
  if ((result & 1) == 0)
  {
    uint64_t v11 = *(int *)(a1 + 4);
    uint64_t v10 = (int *)(a1 + 4);
    swift::Demangle::__runtime::makeSymbolicMangledNameStringRef((_BYTE *)v10 + v11, v8);
    int v13 = (int)v12;
    SymbolicMangledNameStringRef = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef( (_BYTE *)v10 + *v10,  v12);
    uint64_t result = operator new(0x18uLL);
    *(void *)uint64_t result = "subject type %.*s does not satisfy class constraint";
    *((_DWORD *)result + 2) = v13;
    *((void *)result + 2) = SymbolicMangledNameStringRef;
    uint64_t v6 = swift::TypeLookupError::TypeLookupError<swift::TypeLookupError swift::TypeLookupErrorImpl<int,char const*>(char const*,int,char const*)::{lambda(void)#1}>(swift::TypeLookupError swift::TypeLookupErrorImpl<int,char const*>(char const*,int,char const*)::{lambda(void)#1} const&)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
    goto LABEL_6;
  }

  char v9 = 0;
  *(_BYTE *)a3 = 0;
LABEL_7:
  *(_BYTE *)(a3 + 16) = v9;
  return result;
}

void swift::TypeLookupError::TypeLookupError<swift::TypeLookupError swift::TypeLookupErrorImpl<int,char const*,char const*,unsigned long>(char const*,int,char const*,char const*,unsigned long)::{lambda(void)#1}>(swift::TypeLookupError swift::TypeLookupErrorImpl<int,char const*,char const*,unsigned long>(char const*,int,char const*,char const*,unsigned long)::{lambda(void)#1} const&)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke( uint64_t a1, int a2)
{
  __asm { BR              X10 }

uint64_t sub_18178D118()
{
  return *(void *)(v1 - 24);
}

void swift::TypeLookupError::TypeLookupError<swift::TypeLookupError swift::TypeLookupErrorImpl<int,char const*,unsigned long,unsigned long>(char const*,int,char const*,unsigned long,unsigned long)::{lambda(void)#1}>(swift::TypeLookupError swift::TypeLookupErrorImpl<int,char const*,unsigned long,unsigned long>(char const*,int,char const*,unsigned long,unsigned long)::{lambda(void)#1} const&)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke( uint64_t a1, int a2)
{
  __asm { BR              X10 }

uint64_t sub_18178D1BC()
{
  return *(void *)(v1 - 24);
}

void swift::TypeLookupError::TypeLookupError<swift::TypeLookupError swift::TypeLookupErrorImpl<int,char const*,int,char const*,unsigned long>(char const*,int,char const*,int,char const*,unsigned long)::{lambda(void)#1}>(swift::TypeLookupError swift::TypeLookupErrorImpl<int,char const*,int,char const*,unsigned long>(char const*,int,char const*,int,char const*,unsigned long)::{lambda(void)#1} const&)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke( uint64_t a1, int a2)
{
  __asm { BR              X10 }

uint64_t sub_18178D260()
{
  return *(void *)(v1 - 24);
}

void swift::TypeLookupError::TypeLookupError<swift::TypeLookupError swift::TypeLookupErrorImpl<int,char const*>(char const*,int,char const*)::{lambda(void)#1}>(swift::TypeLookupError swift::TypeLookupErrorImpl<int,char const*>(char const*,int,char const*)::{lambda(void)#1} const&)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke( uint64_t a1, int a2)
{
  __asm { BR              X10 }

char *sub_18178D308( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  return v18;
}

void swift::TypeLookupError::TypeLookupError<swift::TypeLookupError swift::TypeLookupErrorImpl<unsigned long,unsigned long>(char const*,unsigned long,unsigned long)::{lambda(void)#1}>(swift::TypeLookupError swift::TypeLookupErrorImpl<unsigned long,unsigned long>(char const*,unsigned long,unsigned long)::{lambda(void)#1} const&)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke( uint64_t a1, int a2)
{
  __asm { BR              X10 }

char *sub_18178D3A0( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  return v18;
}

void swift::TypeLookupError::TypeLookupError<swift::TypeLookupError swift::TypeLookupErrorImpl<int,char const*,char const*>(char const*,int,char const*,char const*)::{lambda(void)#1}>(swift::TypeLookupError swift::TypeLookupErrorImpl<int,char const*,char const*>(char const*,int,char const*,char const*)::{lambda(void)#1} const&)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke( uint64_t a1, int a2)
{
  __asm { BR              X10 }

char *sub_18178D434( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  return v18;
}

void swift::TypeLookupError::TypeLookupError<swift::TypeLookupError swift::TypeLookupErrorImpl<int,char const*,int,char const*>(char const*,int,char const*,int,char const*)::{lambda(void)#1}>(swift::TypeLookupError swift::TypeLookupErrorImpl<int,char const*,int,char const*>(char const*,int,char const*,int,char const*)::{lambda(void)#1} const&)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke( uint64_t a1, int a2)
{
  __asm { BR              X10 }

uint64_t sub_18178D4C8()
{
  return *(void *)(v1 - 24);
}

void _ZZN5swift15TypeLookupErrorC1IZNS_L19TypeLookupErrorImplIJEEES0_PKcDpT_EUlvE_EERKT_ENUlPvNS0_7CommandESB_E_8__invokeESB_SC_SB__0( uint64_t a1, int a2)
{
  __asm { BR              X10 }

char *sub_18178D56C( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return v16;
}

unint64_t swift::TargetContextDescriptor<swift::InProcess>::getInvertedProtocols(unsigned int *a1)
{
  unint64_t v1 = *a1;
  if ((v1 & 0x20) == 0) {
    return 0LL;
  }
  unint64_t result = 0LL;
  switch(v1 & 0x1F)
  {
    case 4uLL:
      int v4 = a1 + 2;
      if ((v1 & 0x80) != 0)
      {
        __int16 v11 = *((_WORD *)a1 + 7);
        uint64_t v12 = &v10[2 * (v11 & 1)];
        if ((v11 & 1) != 0) {
          v12 += 4 * *v10;
        }
        unint64_t v6 = (unint64_t)v12 + (v11 & 2);
        if ((v11 & 2) != 0
          && (uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)*v12), v13.i16[0] = vaddlv_u8(v13), v6 += 2LL * v13.u32[0], *v12))
        {
          unsigned int v5 = *(unsigned __int16 *)((char *)&v12[v13.u32[0] - 1] + (v11 & 2));
        }

        else
        {
          unsigned int v5 = 0;
        }
      }

      else
      {
        unsigned int v5 = 0;
        unint64_t v6 = ((unint64_t)&v4[2 * ((v1 >> 7) & 1)] + 3) & 0xFFFFFFFFFFFFFFFCLL;
      }

      return ((v6 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 12LL * v5 + 4LL * WORD1(v1);
    case 0x10uLL:
      uint64_t TrailingObjectsImpl = swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetClassDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetClassDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl((unsigned __int16 *)a1);
      unsigned int v8 = *a1;
      if ((*a1 & 0x80000) == 0)
      {
        uint64_t v9 = 0LL;
        return TrailingObjectsImpl + 4 * v9 + 4LL * ((v8 >> 19) & 1);
      }

      unint64_t v14 = swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetClassDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetClassDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl((unsigned __int16 *)a1);
      unint64_t v15 = *a1;
      if ((v15 & 0x40000000) != 0)
      {
        unsigned int v16 = *(_DWORD *)swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetClassDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetClassDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl((unsigned __int16 *)a1);
        unsigned int v8 = *a1;
        if ((*a1 & 0x20000000) != 0) {
          goto LABEL_16;
        }
      }

      else
      {
        unsigned int v16 = 0;
        unsigned int v8 = *a1;
        if ((v15 & 0x20000000) != 0)
        {
LABEL_16:
          uint64_t v17 = a1[7] & 1;
          goto LABEL_21;
        }
      }

      uint64_t v17 = 0LL;
LABEL_21:
      uint64_t v9 = *(unsigned int *)(v14 + 4 * ((v15 >> 30) & 1) + 12LL * v16 + 4 * v17);
      return TrailingObjectsImpl + 4 * v9 + 4LL * ((v8 >> 19) & 1);
    case 0x11uLL:
    case 0x12uLL:
    default:
      return result;
  }

void swift::TypeLookupError::TypeLookupError<swift::TypeLookupError swift::TypeLookupErrorImpl<unsigned short>(char const*,unsigned short)::{lambda(void)#1}>(swift::TypeLookupError swift::TypeLookupErrorImpl<unsigned short>(char const*,unsigned short)::{lambda(void)#1} const&)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke( uint64_t a1, int a2)
{
  __asm { BR              X10 }

char *sub_18178D7AC( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return v16;
}

void *std::__function::__func<checkInvertibleRequirements(swift::TargetMetadata<swift::InProcess> const*,swift::InvertibleProtocolSet)::$_0,std::allocator<checkInvertibleRequirements(swift::TargetMetadata<swift::InProcess> const*,swift::InvertibleProtocolSet)::$_0>,void const* ()(unsigned int,unsigned int)>::__clone( uint64_t a1)
{
  unint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *unint64_t result = off_189B8E0F0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<checkInvertibleRequirements(swift::TargetMetadata<swift::InProcess> const*,swift::InvertibleProtocolSet)::$_0,std::allocator<checkInvertibleRequirements(swift::TargetMetadata<swift::InProcess> const*,swift::InvertibleProtocolSet)::$_0>,void const* ()(unsigned int,unsigned int)>::__clone( uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_189B8E0F0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<checkInvertibleRequirements(swift::TargetMetadata<swift::InProcess> const*,swift::InvertibleProtocolSet)::$_0,std::allocator<checkInvertibleRequirements(swift::TargetMetadata<swift::InProcess> const*,swift::InvertibleProtocolSet)::$_0>,void const* ()(unsigned int,unsigned int)>::operator()( uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  return swift::SubstGenericParametersFromMetadata::getMetadata( *(swift::SubstGenericParametersFromMetadata **)(a1 + 8),  *a2,  *a3);
}

void *std::__function::__func<checkInvertibleRequirements(swift::TargetMetadata<swift::InProcess> const*,swift::InvertibleProtocolSet)::$_1,std::allocator<checkInvertibleRequirements(swift::TargetMetadata<swift::InProcess> const*,swift::InvertibleProtocolSet)::$_1>,void const* ()(unsigned int,unsigned int)>::__clone( uint64_t a1)
{
  unint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *unint64_t result = off_189B8E138;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<checkInvertibleRequirements(swift::TargetMetadata<swift::InProcess> const*,swift::InvertibleProtocolSet)::$_1,std::allocator<checkInvertibleRequirements(swift::TargetMetadata<swift::InProcess> const*,swift::InvertibleProtocolSet)::$_1>,void const* ()(unsigned int,unsigned int)>::__clone( uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_189B8E138;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<checkInvertibleRequirements(swift::TargetMetadata<swift::InProcess> const*,swift::InvertibleProtocolSet)::$_1,std::allocator<checkInvertibleRequirements(swift::TargetMetadata<swift::InProcess> const*,swift::InvertibleProtocolSet)::$_1>,void const* ()(unsigned int,unsigned int)>::operator()( uint64_t a1, uint64_t a2, int *a3)
{
  return swift::SubstGenericParametersFromMetadata::getMetadataKeyArgOrdinal( *(swift::SubstGenericParametersFromMetadata **)(a1 + 8),  *a3);
}

void *std::__function::__func<checkInvertibleRequirements(swift::TargetMetadata<swift::InProcess> const*,swift::InvertibleProtocolSet)::$_2,std::allocator<checkInvertibleRequirements(swift::TargetMetadata<swift::InProcess> const*,swift::InvertibleProtocolSet)::$_2>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone( uint64_t a1)
{
  unint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *unint64_t result = off_189B8E180;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<checkInvertibleRequirements(swift::TargetMetadata<swift::InProcess> const*,swift::InvertibleProtocolSet)::$_2,std::allocator<checkInvertibleRequirements(swift::TargetMetadata<swift::InProcess> const*,swift::InvertibleProtocolSet)::$_2>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone( uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_189B8E180;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<checkInvertibleRequirements(swift::TargetMetadata<swift::InProcess> const*,swift::InvertibleProtocolSet)::$_2,std::allocator<checkInvertibleRequirements(swift::TargetMetadata<swift::InProcess> const*,swift::InvertibleProtocolSet)::$_2>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::operator()( uint64_t a1, uint64_t *a2, int *a3)
{
  return swift::SubstGenericParametersFromMetadata::getWitnessTable(*(void *)(a1 + 8), *a2, *a3);
}

size_t getContextDescriptor@<X0>(size_t result@<X0>, uint64_t a2@<X8>)
{
  if (*(void *)result <= 0x7FFuLL) {
    int v3 = *(void *)result;
  }
  else {
    int v3 = 0;
  }
  if (v3 > 514)
  {
    if (v3 != 515 && v3 != 516) {
      goto LABEL_15;
    }
  }

  else if ((v3 - 512) >= 3)
  {
    if (v3) {
      goto LABEL_15;
    }
    if ((*(_BYTE *)(result + 32) & 2) == 0) {
      goto LABEL_15;
    }
    int v4 = *(_DWORD **)(result + 64);
    if (!v4) {
      goto LABEL_15;
    }
LABEL_13:
    if ((*v4 & 0x30000) == 0x20000)
    {
      unint64_t result = swift::ParsedTypeIdentity::parse((uint64_t)v4, (uint64_t)v8);
      *(_OWORD *)(a2 + 8) = v9;
    }

    else
    {
      *(void *)(a2 + 8) = 0LL;
      *(void *)(a2 + 16) = 0LL;
    }

    *(void *)a2 = v4;
    return result;
  }

  int v4 = *(_DWORD **)(result + 8);
  if (v4) {
    goto LABEL_13;
  }
LABEL_15:
  if (*(void *)result != 771LL
    || *(_DWORD *)(result + 12) != 1
    || (unsigned int v5 = (void *)(result + 16), v6 = *(unsigned int *)(result + 8), (v6 & 0x40000000) != 0) && *v5
    || (uint64_t v7 = v5[(v6 >> 30) & 1], (v7 & 1) != 0))
  {
    *(void *)a2 = 0LL;
    *(void *)(a2 + 8) = 0LL;
    *(void *)(a2 + 16) = 0LL;
  }

  else
  {
    *(void *)(a2 + 8) = 0LL;
    *(void *)(a2 + 16) = 0LL;
    *(void *)a2 = v7 & 0xFFFFFFFFFFFFFFFELL;
  }

  return result;
}

void *swift_conformsToProtocol::$_0::__invoke(swift_conformsToProtocol::$_0 *this, void *a2)
{
  unint64_t result = (void *)swift::getOverride_conformsToProtocol(this);
  swift_conformsToProtocol::Override = result;
  return result;
}

void *swift_conformsToProtocol2::$_0::__invoke(swift_conformsToProtocol2::$_0 *this, void *a2)
{
  unint64_t result = (void *)swift::getOverride_conformsToProtocol2(this);
  swift_conformsToProtocol2::Override = result;
  return result;
}

void *swift_conformsToProtocolCommon::$_0::__invoke(swift_conformsToProtocolCommon::$_0 *this, void *a2)
{
  unint64_t result = (void *)swift::getOverride_conformsToProtocolCommon(this);
  swift_conformsToProtocolCommon::Override = result;
  return result;
}

uint64_t swift_conformsToProtocolMaybeInstantiateSuperclasses( uint64_t a1, uint64_t a2, const char *a3, char *a4)
{
  int v4 = (void *)a1;
  uint64_t v172 = (int *)a2;
  uint64_t v173 = (uint64_t (***)())a1;
  spid = (__swift::__runtime::llvm *)a2;
  BOOL v167 = (int)a3;
  unsigned __int8 v171 = a3;
  unsigned int v5 = &unk_18C486000;
  if (qword_18C486EF0 != -1)
  {
    dispatch_once_f( &qword_18C486EF0,  &Conformances,  (dispatch_function_t)swift::Lazy<ConformanceState>::defaultInitCallback);
    unsigned int v5 = &unk_18C486000;
  }

  char v170 = 0;
  __int128 v169 = &v170;
  if (!qword_18C486EB0)
  {
    uint64_t WitnessTable = 0LL;
    uint64_t v9 = 0LL;
LABEL_153:
    uint64_t v162 = v9;
    do
      unsigned int v66 = __ldaxr(&Conformances);
    while (__stxr(v66 + 1, &Conformances));
    uint64_t v160 = WitnessTable;
    do
    {
      unint64_t v67 = atomic_load((unint64_t *)&dword_18C486E5C[1]);
      unint64_t v68 = atomic_load((unint64_t *)&dword_18C486E5C[3]);
      unsigned int v69 = atomic_load(dword_18C486E5C);
      unint64_t v70 = atomic_load((unint64_t *)&dword_18C486E5C[1]);
    }

    while (v67 != v70);
    if (v4)
    {
      char v71 = 0;
      uint64_t v72 = 0LL;
      if (v68) {
        BOOL v73 = v69 == 0;
      }
      else {
        BOOL v73 = 1;
      }
      char v75 = v73 || v67 == 0;
      char v163 = v75;
      uint64_t SuperclassForMaybeIncompleteMetadata = v4;
      do
      {
        __int128 v175 = SuperclassForMaybeIncompleteMetadata;
        uint64_t v176 = spid;
        if ((v163 & 1) == 0)
        {
          __swift::__runtime::llvm::hash_combine<__swift::__runtime::llvm::hash_code,swift::TargetMetadata<swift::InProcess> const*>( &v175,  (uint64_t *)&v176);
          __asm { BR              X10 }
        }

        uint64_t SuperclassForMaybeIncompleteMetadata = (void *)getSuperclassForMaybeIncompleteMetadata( (uint64_t)SuperclassForMaybeIncompleteMetadata,  v72,  v71,  v167);
        uint64_t v72 = v77;
        char v71 = 1;
      }

      while (SuperclassForMaybeIncompleteMetadata);
    }

    uint64_t v78 = v162;
    do
      unsigned int v79 = __ldxr(&Conformances);
    while (__stlxr(v79 - 1, &Conformances));
    if (v162)
    {
      uint64_t v80 = (int *)(v162 + 4);
      int v81 = (*(_DWORD *)(v162 + 12) >> 3) & 7;
      if (v81 == 1)
      {
        CanonicalTypeMetadata = *(uint64_t (****)())((char *)v80 + *v80);
        if (!CanonicalTypeMetadata)
        {
LABEL_178:
          CanonicalTypeMetadata = swift::TargetProtocolConformanceDescriptor<swift::InProcess>::getCanonicalTypeMetadata(v162);
          if (!CanonicalTypeMetadata)
          {
            uint64_t v105 = (uint64_t)v173;
            BOOL v106 = v171 != 0;
            if (!v173) {
              goto LABEL_225;
            }
            goto LABEL_211;
          }

          char v84 = 0;
LABEL_205:
          uint64_t v105 = (uint64_t)v173;
          BOOL v106 = v171 != 0;
          if (!v173)
          {
            CanonicalTypeMetadata = 0LL;
            goto LABEL_225;
          }

          if ((v84 & 1) == 0)
          {
            if (CanonicalTypeMetadata != v173)
            {
              char v107 = 0;
LABEL_215:
              uint64_t v108 = getSuperclassForMaybeIncompleteMetadata(v105, 0LL, 0, v106);
              if (v108)
              {
                uint64_t v110 = v108;
                uint64_t v111 = v109;
                do
                {
                  if ((v107 & 1) != 0)
                  {
                    getContextDescriptor(v110, (uint64_t)&v175);
                    if (v175
                      && (swift::equalContexts((const char *)v175, (const char *)CanonicalTypeMetadata) & 1) != 0)
                    {
                      CanonicalTypeMetadata = (uint64_t (***)())v110;
                      goto LABEL_224;
                    }
                  }

                  else if (CanonicalTypeMetadata == (uint64_t (***)())v110)
                  {
                    goto LABEL_224;
                  }

                  uint64_t v110 = getSuperclassForMaybeIncompleteMetadata(v110, v111, 1, v106);
                  uint64_t v111 = v112;
                }

                while (v110);
              }

              CanonicalTypeMetadata = 0LL;
LABEL_224:
              uint64_t v78 = v162;
              goto LABEL_225;
            }

            goto LABEL_225;
          }

void ConformanceState::cacheResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a2;
  uint64_t v6 = a3;
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 24));
  uint64_t v4 = *(void *)(a1 + 16);
  __swift::__runtime::llvm::hash_combine<__swift::__runtime::llvm::hash_code,swift::TargetMetadata<swift::InProcess> const*>( &v5,  &v6);
  __asm { BR              X12 }

void sub_18178EBB8( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__src, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20, int a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39)
{
  uint64_t v52 = (v41 >> (4 * v39)) & 0xF;
  if ((_DWORD)v52)
  {
    unsigned int v53 = v52 - 1;
    if (v53 >= v44
      || (unint64_t v54 = (void *)(v42 + v53 * (unint64_t)v40), *v54 != *(void *)(v51 - 96))
      || v54[1] != *(void *)(v51 - 88))
    {
      JUMPOUT(0x18178EB98LL);
    }

    __dmb(0xBu);
    if (!*(_DWORD *)v45)
    {
      uint64_t v57 = *(void ***)(v45 + 32);
      uint64_t v56 = (void *)(v45 + 32);
      unint64_t v55 = v57;
      if (v57)
      {
        do
        {
          uint64_t v58 = (void **)*v55;
          free(v55[1]);
          free(v55);
          unint64_t v55 = v58;
        }

        while (v58);
      }

void validateDyldResults(ConformanceState &,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolDescriptor<swift::InProcess> const*,swift::TargetWitnessTable<swift::InProcess> const*,swift::TargetProtocolConformanceDescriptor<swift::InProcess> const*,BOOL)::$_0::operator()( unint64_t ***a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__s.__size_ = 0;
  a2->__r_.__value_.__s.__data_[0] = 0;
  int v3 = *a1;
  uint64_t v4 = *((unsigned int *)*a1 + 2);
  if ((_DWORD)v4)
  {
    uint64_t v5 = *v3;
    uint64_t v6 = (uint64_t)&(*v3)[v4];
    uint64_t v7 = "0x";
    do
    {
      unint64_t v8 = *v5;
      std::string::size_type size = a2->__r_.__value_.__s.__size_;
      if ((size & 0x80u) != 0LL) {
        std::string::size_type size = a2->__r_.__value_.__l.__size_;
      }
      if (size) {
        std::string::append(a2, ", ");
      }
      std::string::append(a2, v7);
      if (v8)
      {
        uint64_t v10 = 16LL;
        do
        {
          if ((v8 & 0xF) >= 0xA) {
            char v11 = (v8 & 0xF) + 55;
          }
          else {
            char v11 = v8 & 0xF | 0x30;
          }
          v25[v10--] = v11;
          BOOL v12 = v8 > 0xF;
          v8 >>= 4;
        }

        while (v12);
        uint64_t v13 = v10 + 1;
      }

      else
      {
        v25[16] = 48;
        uint64_t v13 = 16LL;
      }

      uint64_t v14 = 17 - v13;
      if ((unint64_t)(17 - v13) > 0x16)
      {
        uint64_t v16 = (v14 & 0xFFFFFFFFFFFFFFF8LL) + 8;
        if ((v14 | 7) != 0x17) {
          uint64_t v16 = v14 | 7;
        }
        uint64_t v17 = v7;
        uint64_t v18 = v16 + 1;
        p_p = operator new(v16 + 1);
        unint64_t v19 = v18 | 0x8000000000000000LL;
        uint64_t v7 = v17;
        std::string::size_type v23 = 17 - v13;
        int64_t v24 = v19;
        std::string __p = p_p;
        if (v13 == 17) {
          goto LABEL_23;
        }
      }

      else
      {
        HIBYTE(v24) = 17 - v13;
        p_p = &__p;
        if (v13 == 17) {
          goto LABEL_23;
        }
      }

      memcpy(p_p, &v25[v13], 17 - v13);
      p_p += v14;
LABEL_23:
      _BYTE *p_p = 0;
      if (v24 >= 0) {
        uint64_t v20 = (const std::string::value_type *)&__p;
      }
      else {
        uint64_t v20 = (const std::string::value_type *)__p;
      }
      if (v24 >= 0) {
        std::string::size_type v21 = HIBYTE(v24);
      }
      else {
        std::string::size_type v21 = v23;
      }
      std::string::append(a2, v20, v21);
      if (SHIBYTE(v24) < 0) {
        operator delete(__p);
      }
      ++v5;
    }

    while (v5 != (unint64_t *)v6);
  }

uint64_t swift_conformsToProtocolMaybeInstantiateSuperclasses(swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolDescriptor<swift::InProcess> const*,BOOL)::$_1::operator() const(anonymous namespace'::ConformanceSection const&)::{lambda(swift::TargetProtocolConformanceDescriptor<swift::InProcess> const&)#1}::operator()( uint64_t result, int *a2, const char *a3, char *a4)
{
  uint64_t v5 = result;
  uint64_t v6 = *a2;
  if ((_DWORD)v6)
  {
    uint64_t v7 = (void *)((char *)a2 + (v6 & 0xFFFFFFFFFFFFFFFELL));
    if ((v6 & 1) != 0) {
      uint64_t v7 = (void *)*v7;
    }
  }

  else
  {
    uint64_t v7 = 0LL;
  }

  if (v7 != **(void ***)result) {
    return result;
  }
  unint64_t v8 = a2 + 1;
  int v9 = (a2[3] >> 3) & 7;
  if (v9 == 1)
  {
    char v11 = *(const char **)((char *)v8 + *v8);
    if (v11) {
      goto LABEL_14;
    }
  }

  else if (!v9)
  {
    uint64_t v10 = *v8;
    if ((_DWORD)v10)
    {
      char v11 = (char *)v8 + v10;
    }
  }

  unint64_t result = (uint64_t)swift::TargetProtocolConformanceDescriptor<swift::InProcess>::getCanonicalTypeMetadata((uint64_t)a2);
  char v11 = (const char *)result;
  if (result)
  {
    int v12 = 1;
    goto LABEL_15;
  }

void *__swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::SmallDenseMap<swift::TargetMetadata<swift::InProcess> const*,swift::TargetWitnessTable<swift::InProcess> const*,4u,__swift::__runtime::llvm::DenseMapInfo<swift::TargetMetadata<swift::InProcess> const*>,__swift::__runtime::llvm::detail::DenseMapPair<swift::TargetMetadata<swift::InProcess> const*,swift::TargetWitnessTable<swift::InProcess> const*>>,swift::TargetMetadata<swift::InProcess> const*,swift::TargetWitnessTable<swift::InProcess> const*,__swift::__runtime::llvm::DenseMapInfo<swift::TargetMetadata<swift::InProcess> const*>,__swift::__runtime::llvm::detail::DenseMapPair<swift::TargetMetadata<swift::InProcess> const*,swift::TargetWitnessTable<swift::InProcess> const*>>::InsertIntoBucket<swift::TargetMetadata<swift::InProcess> const*,swift::TargetWitnessTable<swift::InProcess> const*>( uint64_t a1, void *a2, void *a3, void *a4)
{
  int v8 = *(_DWORD *)a1;
  int v9 = *(_DWORD *)a1 >> 1;
  if ((*(_DWORD *)a1 & 1) != 0) {
    unsigned int v10 = 4;
  }
  else {
    unsigned int v10 = *(_DWORD *)(a1 + 16);
  }
  if (4 * v9 + 4 >= 3 * v10)
  {
    v10 *= 2;
  }

  else if (v10 + ~v9 - *(_DWORD *)(a1 + 4) > v10 >> 3)
  {
    int v11 = *(_DWORD *)a1 & 1;
    goto LABEL_7;
  }

  __swift::__runtime::llvm::SmallDenseMap<swift::TargetMetadata<swift::InProcess> const*,swift::TargetWitnessTable<swift::InProcess> const*,4u,__swift::__runtime::llvm::DenseMapInfo<swift::TargetMetadata<swift::InProcess> const*>,__swift::__runtime::llvm::detail::DenseMapPair<swift::TargetMetadata<swift::InProcess> const*,swift::TargetWitnessTable<swift::InProcess> const*>>::grow( a1,  v10);
  uint64_t v13 = a1 + 8;
  int v8 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    int v14 = 4;
  }

  else
  {
    int v14 = *(_DWORD *)(a1 + 16);
    if (!v14)
    {
      int v11 = 0;
      a2 = 0LL;
      goto LABEL_7;
    }

    uint64_t v13 = *(void *)(a1 + 8);
  }

  int v11 = *(_DWORD *)a1 & 1;
  int v15 = v14 - 1;
  unsigned int v16 = ((*a3 >> 4) ^ (*a3 >> 9)) & (v14 - 1);
  a2 = (void *)(v13 + 16LL * v16);
  uint64_t v17 = *a2;
  if (*a3 != *a2)
  {
    size_t v18 = 0LL;
    int v19 = 1;
    while (v17 != -4096)
    {
      if (v18) {
        BOOL v20 = 0;
      }
      else {
        BOOL v20 = v17 == -8192;
      }
      if (v20) {
        size_t v18 = a2;
      }
      unsigned int v21 = v16 + v19++;
      unsigned int v16 = v21 & v15;
      a2 = (void *)(v13 + 16LL * (v21 & v15));
      uint64_t v17 = *a2;
      if (*a3 == *a2) {
        goto LABEL_7;
      }
    }

    if (v18) {
      a2 = v18;
    }
  }

int *__swift::__runtime::llvm::SmallDenseMap<swift::TargetMetadata<swift::InProcess> const*,swift::TargetWitnessTable<swift::InProcess> const*,4u,__swift::__runtime::llvm::DenseMapInfo<swift::TargetMetadata<swift::InProcess> const*>,__swift::__runtime::llvm::detail::DenseMapPair<swift::TargetMetadata<swift::InProcess> const*,swift::TargetWitnessTable<swift::InProcess> const*>>::grow( uint64_t a1, unsigned int a2)
{
  if (a2 >= 5)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    else {
      a2 = 64;
    }
  }

  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v6 = *(uint64_t **)(a1 + 8);
    uint64_t v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      uint64_t v16 = a2;
      *(void *)(a1 + 8) = __swift::__runtime::llvm::allocate_buffer(16LL * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v16;
    }

    else
    {
      *(_DWORD *)a1 |= 1u;
    }

    uint64_t v17 = (char *)(16 * v7);
    __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::SmallDenseMap<swift::TargetMetadata<swift::InProcess> const*,swift::TargetWitnessTable<swift::InProcess> const*,4u,__swift::__runtime::llvm::DenseMapInfo<swift::TargetMetadata<swift::InProcess> const*>,__swift::__runtime::llvm::detail::DenseMapPair<swift::TargetMetadata<swift::InProcess> const*,swift::TargetWitnessTable<swift::InProcess> const*>>,swift::TargetMetadata<swift::InProcess> const*,swift::TargetWitnessTable<swift::InProcess> const*,__swift::__runtime::llvm::DenseMapInfo<swift::TargetMetadata<swift::InProcess> const*>,__swift::__runtime::llvm::detail::DenseMapPair<swift::TargetMetadata<swift::InProcess> const*,swift::TargetWitnessTable<swift::InProcess> const*>>::moveFromOldBuckets( (int *)a1,  v6,  (uint64_t *)&v17[(void)v6]);
    __swift::__runtime::llvm::deallocate_buffer((__swift::__runtime::llvm *)v6, v17);
  }

  int v8 = v18;
  if ((*(void *)(a1 + 8) | 0x1000LL) != 0xFFFFFFFFFFFFF000LL)
  {
    uint64_t v9 = *(void *)(a1 + 16);
    v18[0] = *(void *)(a1 + 8);
    v18[1] = v9;
    int v8 = &v19;
  }

  uint64_t v10 = *(void *)(a1 + 24);
  if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000LL)
  {
    uint64_t v11 = *(void *)(a1 + 32);
    *int v8 = v10;
    v8[1] = v11;
    v8 += 2;
  }

  uint64_t v12 = *(void *)(a1 + 40);
  if ((v12 | 0x1000) != 0xFFFFFFFFFFFFF000LL)
  {
    *int v8 = v12;
    v8[1] = *(void *)(a1 + 48);
    v8 += 2;
  }

  uint64_t v13 = *(void *)(a1 + 56);
  if ((v13 | 0x1000) != 0xFFFFFFFFFFFFF000LL)
  {
    *int v8 = v13;
    v8[1] = *(void *)(a1 + 64);
    v8 += 2;
    if (a2 < 5) {
      return __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::SmallDenseMap<swift::TargetMetadata<swift::InProcess> const*,swift::TargetWitnessTable<swift::InProcess> const*,4u,__swift::__runtime::llvm::DenseMapInfo<swift::TargetMetadata<swift::InProcess> const*>,__swift::__runtime::llvm::detail::DenseMapPair<swift::TargetMetadata<swift::InProcess> const*,swift::TargetWitnessTable<swift::InProcess> const*>>,swift::TargetMetadata<swift::InProcess> const*,swift::TargetWitnessTable<swift::InProcess> const*,__swift::__runtime::llvm::DenseMapInfo<swift::TargetMetadata<swift::InProcess> const*>,__swift::__runtime::llvm::detail::DenseMapPair<swift::TargetMetadata<swift::InProcess> const*,swift::TargetWitnessTable<swift::InProcess> const*>>::moveFromOldBuckets( (int *)a1,  v18,  v8);
    }
    goto LABEL_16;
  }

  if (a2 >= 5)
  {
LABEL_16:
    *(_DWORD *)a1 &= ~1u;
    uint64_t v14 = a2;
    *(void *)(a1 + 8) = __swift::__runtime::llvm::allocate_buffer(16LL * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v14;
  }

  return __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::SmallDenseMap<swift::TargetMetadata<swift::InProcess> const*,swift::TargetWitnessTable<swift::InProcess> const*,4u,__swift::__runtime::llvm::DenseMapInfo<swift::TargetMetadata<swift::InProcess> const*>,__swift::__runtime::llvm::detail::DenseMapPair<swift::TargetMetadata<swift::InProcess> const*,swift::TargetWitnessTable<swift::InProcess> const*>>,swift::TargetMetadata<swift::InProcess> const*,swift::TargetWitnessTable<swift::InProcess> const*,__swift::__runtime::llvm::DenseMapInfo<swift::TargetMetadata<swift::InProcess> const*>,__swift::__runtime::llvm::detail::DenseMapPair<swift::TargetMetadata<swift::InProcess> const*,swift::TargetWitnessTable<swift::InProcess> const*>>::moveFromOldBuckets( (int *)a1,  v18,  v8);
}

int *__swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::SmallDenseMap<swift::TargetMetadata<swift::InProcess> const*,swift::TargetWitnessTable<swift::InProcess> const*,4u,__swift::__runtime::llvm::DenseMapInfo<swift::TargetMetadata<swift::InProcess> const*>,__swift::__runtime::llvm::detail::DenseMapPair<swift::TargetMetadata<swift::InProcess> const*,swift::TargetWitnessTable<swift::InProcess> const*>>,swift::TargetMetadata<swift::InProcess> const*,swift::TargetWitnessTable<swift::InProcess> const*,__swift::__runtime::llvm::DenseMapInfo<swift::TargetMetadata<swift::InProcess> const*>,__swift::__runtime::llvm::detail::DenseMapPair<swift::TargetMetadata<swift::InProcess> const*,swift::TargetWitnessTable<swift::InProcess> const*>>::moveFromOldBuckets( int *result, uint64_t *a2, uint64_t *a3)
{
  int v3 = *result;
  *result &= 1u;
  result[1] = 0;
  if ((v3 & 1) != 0)
  {
    uint64_t v6 = (char *)(result + 18);
    int v5 = result + 2;
  }

  else
  {
    uint64_t v4 = result[4];
    if (!(_DWORD)v4) {
      goto LABEL_11;
    }
    int v5 = (void *)*((void *)result + 1);
    uint64_t v6 = (char *)&v5[2 * v4];
  }

  unint64_t v7 = v6 - (char *)v5 - 16;
  if (v7 < 0x10)
  {
    int v8 = (char *)v5;
    do
    {
LABEL_10:
      *(void *)int v8 = -4096LL;
      v8 += 16;
    }

    while (v8 != v6);
    goto LABEL_11;
  }

  uint64_t v9 = (v7 >> 4) + 1;
  int v8 = (char *)&v5[2 * (v9 & 0x1FFFFFFFFFFFFFFELL)];
  uint64_t v10 = v5 + 2;
  uint64_t v11 = v9 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    *(v10 - 2) = -4096LL;
    *uint64_t v10 = -4096LL;
    v10 += 4;
    v11 -= 2LL;
  }

  while (v11);
  if (v9 != (v9 & 0x1FFFFFFFFFFFFFFELL)) {
    goto LABEL_10;
  }
LABEL_11:
  while (a2 != a3)
  {
    uint64_t v18 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000LL)
    {
      if ((*(_BYTE *)result & 1) != 0)
      {
        int v13 = 4;
        uint64_t v12 = result + 2;
      }

      else
      {
        uint64_t v12 = (int *)*((void *)result + 1);
        int v13 = result[4];
      }

      int v14 = v13 - 1;
      unsigned int v15 = (v13 - 1) & ((v18 >> 4) ^ (v18 >> 9));
      uint64_t v16 = &v12[4 * v15];
      uint64_t v17 = *(void *)v16;
      if (v18 != *(void *)v16)
      {
        uint64_t v19 = 0LL;
        int v20 = 1;
        while (v17 != -4096)
        {
          if (v19) {
            BOOL v21 = 0;
          }
          else {
            BOOL v21 = v17 == -8192;
          }
          if (v21) {
            uint64_t v19 = v16;
          }
          unsigned int v22 = v15 + v20++;
          unsigned int v15 = v22 & v14;
          uint64_t v16 = &v12[4 * (v22 & v14)];
          uint64_t v17 = *(void *)v16;
          if (v18 == *(void *)v16) {
            goto LABEL_15;
          }
        }

        if (v19) {
          uint64_t v16 = v19;
        }
      }

void *std::__function::__func<swift::TargetProtocolConformanceDescriptor<swift::InProcess>::getWitnessTable(swift::TargetMetadata<swift::InProcess> const*)::$_0,std::allocator<swift::TargetProtocolConformanceDescriptor<swift::InProcess>::getWitnessTable(swift::TargetMetadata<swift::InProcess> const*)::$_0>,void const* ()(unsigned int,unsigned int)>::__clone( uint64_t a1)
{
  unint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *unint64_t result = off_189B8E1C8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift::TargetProtocolConformanceDescriptor<swift::InProcess>::getWitnessTable(swift::TargetMetadata<swift::InProcess> const*)::$_0,std::allocator<swift::TargetProtocolConformanceDescriptor<swift::InProcess>::getWitnessTable(swift::TargetMetadata<swift::InProcess> const*)::$_0>,void const* ()(unsigned int,unsigned int)>::__clone( uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_189B8E1C8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<swift::TargetProtocolConformanceDescriptor<swift::InProcess>::getWitnessTable(swift::TargetMetadata<swift::InProcess> const*)::$_0,std::allocator<swift::TargetProtocolConformanceDescriptor<swift::InProcess>::getWitnessTable(swift::TargetMetadata<swift::InProcess> const*)::$_0>,void const* ()(unsigned int,unsigned int)>::operator()( uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  return swift::SubstGenericParametersFromMetadata::getMetadata( *(swift::SubstGenericParametersFromMetadata **)(a1 + 8),  *a2,  *a3);
}

void *std::__function::__func<swift::TargetProtocolConformanceDescriptor<swift::InProcess>::getWitnessTable(swift::TargetMetadata<swift::InProcess> const*)::$_1,std::allocator<swift::TargetProtocolConformanceDescriptor<swift::InProcess>::getWitnessTable(swift::TargetMetadata<swift::InProcess> const*)::$_1>,void const* ()(unsigned int,unsigned int)>::__clone( uint64_t a1)
{
  unint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *unint64_t result = off_189B8E210;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift::TargetProtocolConformanceDescriptor<swift::InProcess>::getWitnessTable(swift::TargetMetadata<swift::InProcess> const*)::$_1,std::allocator<swift::TargetProtocolConformanceDescriptor<swift::InProcess>::getWitnessTable(swift::TargetMetadata<swift::InProcess> const*)::$_1>,void const* ()(unsigned int,unsigned int)>::__clone( uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_189B8E210;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<swift::TargetProtocolConformanceDescriptor<swift::InProcess>::getWitnessTable(swift::TargetMetadata<swift::InProcess> const*)::$_1,std::allocator<swift::TargetProtocolConformanceDescriptor<swift::InProcess>::getWitnessTable(swift::TargetMetadata<swift::InProcess> const*)::$_1>,void const* ()(unsigned int,unsigned int)>::operator()( uint64_t a1, uint64_t a2, int *a3)
{
  return swift::SubstGenericParametersFromMetadata::getMetadataKeyArgOrdinal( *(swift::SubstGenericParametersFromMetadata **)(a1 + 8),  *a3);
}

void *std::__function::__func<swift::TargetProtocolConformanceDescriptor<swift::InProcess>::getWitnessTable(swift::TargetMetadata<swift::InProcess> const*)::$_2,std::allocator<swift::TargetProtocolConformanceDescriptor<swift::InProcess>::getWitnessTable(swift::TargetMetadata<swift::InProcess> const*)::$_2>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone( uint64_t a1)
{
  unint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *unint64_t result = off_189B8E258;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift::TargetProtocolConformanceDescriptor<swift::InProcess>::getWitnessTable(swift::TargetMetadata<swift::InProcess> const*)::$_2,std::allocator<swift::TargetProtocolConformanceDescriptor<swift::InProcess>::getWitnessTable(swift::TargetMetadata<swift::InProcess> const*)::$_2>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone( uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_189B8E258;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<swift::TargetProtocolConformanceDescriptor<swift::InProcess>::getWitnessTable(swift::TargetMetadata<swift::InProcess> const*)::$_2,std::allocator<swift::TargetProtocolConformanceDescriptor<swift::InProcess>::getWitnessTable(swift::TargetMetadata<swift::InProcess> const*)::$_2>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::operator()( uint64_t a1, uint64_t *a2, int *a3)
{
  return swift::SubstGenericParametersFromMetadata::getWitnessTable(*(void *)(a1 + 8), *a2, *a3);
}

void ConformanceState::ConformanceState(ConformanceState *this)
{
  *(void *)this = 0LL;
  *((void *)this + 1) = 0LL;
  *((_DWORD *)this + 6) = 0;
  *((void *)this + 2) = 0LL;
  *((void *)this + 9) = 0LL;
  *((void *)this + 18) = 0LL;
  *((void *)this + 15) = 0LL;
  *((void *)this + 16) = 0LL;
  *((void *)this + 14) = 0LL;
  *((_DWORD *)this + 34) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_DWORD *)this + 16) = 0;
  shared_cache_range = (swift *)swift::runtime::bincompat::useLegacyProtocolConformanceReverseIteration(this);
  *((_BYTE *)this + 80) = (_BYTE)shared_cache_range;
  if (swift::runtime::environment::initializeToken != -1) {
    dispatch_once_f( &swift::runtime::environment::initializeToken,  0LL,  (dispatch_function_t)swift::runtime::environment::initialize);
  }
  if (swift::runtime::environment::SWIFT_DEBUG_ENABLE_SHARED_CACHE_PROTOCOL_CONFORMANCES_variable
    && MEMORY[0x1895F8CF8])
  {
    shared_cache_range = (swift *)_dyld_swift_optimizations_version();
    if ((_DWORD)shared_cache_range == 1)
    {
      shared_cache_range = (swift *)_dyld_get_shared_cache_range();
      uint64_t v3 = (char *)shared_cache_range + v4;
      if (!shared_cache_range) {
        uint64_t v3 = 0LL;
      }
      *((void *)this + 11) = shared_cache_range;
      *((void *)this + 12) = v3;
      if (swift::runtime::environment::initializeToken != -1) {
        dispatch_once_f( &swift::runtime::environment::initializeToken,  0LL,  (dispatch_function_t)swift::runtime::environment::initialize);
      }
      *((_BYTE *)this + 105) = swift::runtime::environment::SWIFT_DEBUG_VALIDATE_SHARED_CACHE_PROTOCOL_CONFORMANCES_variable;
    }

    else
    {
      *((void *)this + 11) = 0LL;
      *((void *)this + 12) = 0LL;
    }
  }

  swift::initializeProtocolConformanceLookup(shared_cache_range);
}

void swift::TypeLookupError::TypeLookupError<swift::TypeLookupError swift::TypeLookupErrorImpl<unsigned int>(char const*,unsigned int)::{lambda(void)#1}>(swift::TypeLookupError swift::TypeLookupErrorImpl<unsigned int>(char const*,unsigned int)::{lambda(void)#1} const&)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke( uint64_t a1, int a2)
{
  __asm { BR              X10 }

char *sub_18178FC78( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return v16;
}

uint64_t swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::tryIncrementSlow( swift *a1, uint64_t a2, const char *a3, char *a4)
{
  if ((_DWORD)a2 == -1) {
    return 1LL;
  }
  if ((a2 & 0x8000000000000000LL) == 0) {
    swift::swift_abortRetainOverflow(a1, a2, a3, a4);
  }
  int v5 = (unsigned __int128 *)(8 * a2 + 16);
  do
  {
    unsigned __int128 v8 = __ldxp(v5);
    unsigned int v7 = DWORD2(v8);
    uint64_t v6 = v8;
  }

  while (__stxp(v8, v5));
  if ((v8 & 0x100000000LL) != 0) {
    return 0LL;
  }
  uint64_t v9 = HIDWORD(*((void *)&v8 + 1));
  while (v6 + 0x200000000LL >= 0)
  {
    unint64_t v10 = v7;
    unint64_t v11 = v7 | (unint64_t)(v9 << 32);
    do
    {
      while (1)
      {
        unsigned __int128 v12 = __ldxp(v5);
        unsigned int v7 = DWORD2(v12);
        int v13 = (void)v12 != v6;
        if (*((void *)&v12 + 1) != v11) {
          ++v13;
        }
        if (!v13) {
          break;
        }
        if (!__stxp(v12, v5)) {
          goto LABEL_16;
        }
      }
    }

    while (__stxp(__PAIR128__(v10, v6 + 0x200000000LL), v5));
LABEL_16:
    BOOL v14 = (void)v12 == v6 && *((void *)&v12 + 1) == v11;
    uint64_t v4 = v14;
    if (!v14)
    {
      uint64_t v9 = HIDWORD(*((void *)&v12 + 1));
      uint64_t v6 = v12;
      if ((v12 & 0x100000000LL) == 0) {
        continue;
      }
    }

    return v4;
  }

  if ((_DWORD)v6 == -1) {
    return 1LL;
  }
  return swift::RefCounts<swift::SideTableRefCountBits>::tryIncrementSlow( (swift *)v5,  v6,  (const char *)(v7 | (unint64_t)(v9 << 32)),  a4);
}

uint64_t swift::RefCounts<swift::SideTableRefCountBits>::tryIncrementSlow( swift *a1, uint64_t a2, const char *a3, char *a4)
{
  if ((_DWORD)a2 != -1) {
    swift::swift_abortRetainOverflow(a1, a2, a3, a4);
  }
  return 1LL;
}

uint64_t swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::tryIncrementNonAtomicSlow( swift *a1, uint64_t a2, const char *a3, char *a4)
{
  if ((_DWORD)a2 == -1) {
    return 1LL;
  }
  if ((a2 & 0x8000000000000000LL) == 0) {
    swift::swift_abortRetainOverflow(a1, a2, a3, a4);
  }
  uint64_t v4 = (unsigned __int128 *)(8 * a2 + 16);
  do
    unsigned __int128 v5 = __ldxp(v4);
  while (__stxp(v5, v4));
  if ((v5 & 0x100000000LL) != 0) {
    return 0LL;
  }
  if ((uint64_t)v5 + 0x200000000LL >= 0)
  {
    do
      __ldxp(v4);
    while (__stxp(__PAIR128__(DWORD2(v5), (uint64_t)v5 + 0x200000000LL), v4));
    return 1LL;
  }

  if ((_DWORD)v5 == -1) {
    return 1LL;
  }
  return swift::RefCounts<swift::SideTableRefCountBits>::tryIncrementSlow( (swift *)v4,  v5,  *((const char **)&v5 + 1),  a4);
}

unint64_t swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::incrementUnownedSlow( unint64_t *a1, uint64_t a2, const char *a3, char *a4)
{
  int v4 = a2;
  unint64_t v6 = *a1;
  if ((*a1 & 0x8000000000000000LL) == 0 || *a1 == 0xFFFFFFFFLL)
  {
    unint64_t result = (unint64_t)swift_slowAlloc(0x20uLL, 0xFuLL);
    *(void *)unint64_t result = a1 - 1;
    unsigned __int128 v8 = (unsigned __int128 *)(result + 16);
    while (1)
    {
      do
        __ldxp(v8);
      while (__stxp(__PAIR128__(1LL, v6), v8));
      unint64_t v9 = __ldxr(a1);
      if (v9 == v6)
      {
        if (!__stlxr((result >> 3) | 0xC000000000000000LL, a1)) {
          goto LABEL_14;
        }
      }

      else
      {
        __clrex();
      }

      unint64_t v6 = v9;
      if ((v9 & 0x8000000000000000LL) != 0)
      {
        unint64_t v6 = v9;
      }
    }

    swift_slowDealloc((void *)result);
    unint64_t result = 8 * v9;
    if (!(8 * v9)) {
LABEL_41:
    }
      swift::swift_abortUnownedRetainOverflow((swift *)result, a2, a3, a4);
  }

  else
  {
    unint64_t result = 8 * v6;
    if (!(8 * v6)) {
      goto LABEL_41;
    }
  }

unint64_t *swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::incrementSlow( unint64_t *a1, uint64_t a2, uint64_t a3, char *a4)
{
  if ((_DWORD)a2 == -1) {
    return a1 - 1;
  }
  if ((a2 & 0x8000000000000000LL) == 0)
  {
    unint64_t v7 = *a1;
    if ((*a1 & 0x8000000000000000LL) != 0 && *a1 != 0xFFFFFFFFLL)
    {
      unint64_t v8 = 8 * v7;
LABEL_37:
      unint64_t v9 = (unsigned __int128 *)(v8 + 16);
      do
      {
        unsigned __int128 v28 = __ldxp(v9);
        uint64_t v27 = v28;
      }

      while (__stxp(v28, v9));
      if ((_DWORD)a3 == 1 || (v28 & 0x8000000000000000LL) == 0 || v28 != 0xFFFFFFFFLL)
      {
        unsigned int v12 = DWORD2(v28);
        uint64_t v29 = HIDWORD(*((void *)&v28 + 1));
        uint64_t v30 = a3 << 33;
        uint64_t v31 = (a3 << 33) + v28;
        if (v31 >= 0)
        {
          while (1)
          {
            unint64_t v32 = v12;
            unint64_t v33 = v12 | (unint64_t)(v29 << 32);
            do
            {
              while (1)
              {
                unsigned __int128 v34 = __ldxp(v9);
                unsigned int v12 = DWORD2(v34);
                uint64_t v18 = v34;
                int v35 = (void)v34 != v27;
                if (*((void *)&v34 + 1) != v33) {
                  ++v35;
                }
                if (!v35) {
                  break;
                }
                if (!__stxp(v34, v9)) {
                  goto LABEL_48;
                }
              }
            }

            while (__stxp(__PAIR128__(v32, v31), v9));
LABEL_48:
            if ((void)v34 == v27 && *((void *)&v34 + 1) == v33) {
              return a1 - 1;
            }
            uint64_t v37 = HIDWORD(*((void *)&v34 + 1));
            uint64_t v27 = v34;
            uint64_t v29 = HIDWORD(*((void *)&v34 + 1));
            uint64_t v31 = v30 + v34;
          }
        }

        uint64_t v37 = HIDWORD(*((void *)&v28 + 1));
        uint64_t v18 = v28;
LABEL_53:
        uint64_t v22 = v37;
LABEL_54:
        if ((_DWORD)v18 != -1)
        {
LABEL_55:
          swift::RefCounts<swift::SideTableRefCountBits>::incrementSlow( (swift *)v9,  v18,  (const char *)(v12 | (unint64_t)(v22 << 32)),  a4);
          return a1 - 1;
        }
      }

      return a1 - 1;
    }

    unint64_t v8 = (unint64_t)swift_slowAlloc(0x20uLL, 0xFuLL);
    *(void *)unint64_t v8 = a1 - 1;
    BOOL v23 = (unsigned __int128 *)(v8 + 16);
    while (1)
    {
      do
        __ldxp(v23);
      while (__stxp(__PAIR128__(1LL, v7), v23));
      unint64_t v24 = __ldxr(a1);
      if (v24 != v7) {
        break;
      }
      if (__stlxr((v8 >> 3) | 0xC000000000000000LL, a1)) {
        goto LABEL_32;
      }
      char v25 = 1;
LABEL_33:
      if ((v25 & 1) != 0) {
        goto LABEL_37;
      }
      unint64_t v7 = v24;
      if ((v24 & 0x8000000000000000LL) != 0)
      {
        unint64_t v7 = v24;
        if (v24 != 0xFFFFFFFFLL)
        {
          uint64_t v26 = 8 * v24;
          swift_slowDealloc((void *)v8);
          unint64_t v8 = v26;
          goto LABEL_37;
        }
      }
    }

    __clrex();
LABEL_32:
    char v25 = 0;
    goto LABEL_33;
  }

  unint64_t v9 = (unsigned __int128 *)(8 * a2 + 16);
  do
  {
    unsigned __int128 v11 = __ldxp(v9);
    uint64_t v10 = v11;
  }

  while (__stxp(v11, v9));
  unsigned int v12 = DWORD2(v11);
  uint64_t v13 = HIDWORD(*((void *)&v11 + 1));
  uint64_t v14 = a3 << 33;
  uint64_t v15 = (a3 << 33) + v11;
  if (v15 < 0)
  {
    uint64_t v22 = HIDWORD(*((void *)&v11 + 1));
    uint64_t v18 = v11;
    if ((_DWORD)v11 == -1) {
      return a1 - 1;
    }
    goto LABEL_55;
  }

  while (1)
  {
    unint64_t v16 = v12;
    unint64_t v17 = v12 | (unint64_t)(v13 << 32);
    do
    {
      while (1)
      {
        unsigned __int128 v19 = __ldxp(v9);
        unsigned int v12 = DWORD2(v19);
        uint64_t v18 = v19;
        int v20 = (void)v19 != v10;
        if (*((void *)&v19 + 1) != v17) {
          ++v20;
        }
        if (!v20) {
          break;
        }
        if (!__stxp(v19, v9)) {
          goto LABEL_20;
        }
      }
    }

    while (__stxp(__PAIR128__(v16, v15), v9));
LABEL_20:
    if ((void)v19 == v10 && *((void *)&v19 + 1) == v17) {
      return a1 - 1;
    }
    uint64_t v22 = HIDWORD(*((void *)&v19 + 1));
    uint64_t v10 = v19;
    uint64_t v13 = HIDWORD(*((void *)&v19 + 1));
    uint64_t v15 = v14 + v19;
  }

uint64_t swift::RefCounts<swift::SideTableRefCountBits>::incrementSlow( swift *a1, uint64_t a2, const char *a3, char *a4)
{
  if ((_DWORD)a2 != -1) {
    swift::swift_abortRetainOverflow(a1, a2, a3, a4);
  }
  return *((void *)a1 - 2);
}

unsigned __int128 *swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::incrementNonAtomicSlow( unsigned __int128 *result, uint64_t a2, uint64_t a3, char *a4)
{
  if ((_DWORD)a2 == -1) {
    return result;
  }
  if ((a2 & 0x8000000000000000LL) == 0)
  {
    unsigned __int128 v5 = (unint64_t *)result;
    unint64_t v6 = *(void *)result;
    if ((*(void *)result & 0x8000000000000000LL) != 0 && *(void *)result != 0xFFFFFFFFLL)
    {
      unint64_t v7 = 8 * v6;
LABEL_37:
      unint64_t result = (unsigned __int128 *)(v7 + 16);
      do
      {
        unsigned __int128 v26 = __ldxp(result);
        uint64_t v25 = v26;
      }

      while (__stxp(v26, result));
      if ((_DWORD)a3 == 1 || (v26 & 0x8000000000000000LL) == 0 || v26 != 0xFFFFFFFFLL)
      {
        unsigned int v10 = DWORD2(v26);
        uint64_t v27 = HIDWORD(*((void *)&v26 + 1));
        uint64_t v28 = a3 << 33;
        uint64_t v29 = (a3 << 33) + v26;
        if (v29 >= 0)
        {
          while (1)
          {
            unint64_t v30 = v10;
            unint64_t v31 = v10 | (unint64_t)(v27 << 32);
            do
            {
              while (1)
              {
                unsigned __int128 v32 = __ldxp(result);
                unsigned int v10 = DWORD2(v32);
                uint64_t v16 = v32;
                int v33 = (void)v32 != v25;
                if (*((void *)&v32 + 1) != v31) {
                  ++v33;
                }
                if (!v33) {
                  break;
                }
                if (!__stxp(v32, result)) {
                  goto LABEL_48;
                }
              }
            }

            while (__stxp(__PAIR128__(v30, v29), result));
LABEL_48:
            if ((void)v32 == v25 && *((void *)&v32 + 1) == v31) {
              return result;
            }
            uint64_t v35 = HIDWORD(*((void *)&v32 + 1));
            uint64_t v25 = v32;
            uint64_t v27 = HIDWORD(*((void *)&v32 + 1));
            uint64_t v29 = v28 + v32;
          }
        }

        uint64_t v35 = HIDWORD(*((void *)&v26 + 1));
        uint64_t v16 = v26;
LABEL_53:
        uint64_t v20 = v35;
LABEL_54:
        if ((_DWORD)v16 != -1) {
          return (unsigned __int128 *)swift::RefCounts<swift::SideTableRefCountBits>::incrementSlow( (swift *)result,  v16,  (const char *)(v10 | (unint64_t)(v20 << 32)),  a4);
        }
      }

      return result;
    }

    unint64_t v7 = (unint64_t)swift_slowAlloc(0x20uLL, 0xFuLL);
    *(void *)unint64_t v7 = v5 - 1;
    int v21 = (unsigned __int128 *)(v7 + 16);
    while (1)
    {
      do
        __ldxp(v21);
      while (__stxp(__PAIR128__(1LL, v6), v21));
      unint64_t v22 = __ldxr(v5);
      if (v22 != v6) {
        break;
      }
      if (__stlxr((v7 >> 3) | 0xC000000000000000LL, v5)) {
        goto LABEL_32;
      }
      char v23 = 1;
LABEL_33:
      if ((v23 & 1) != 0) {
        goto LABEL_37;
      }
      unint64_t v6 = v22;
      if ((v22 & 0x8000000000000000LL) != 0)
      {
        unint64_t v6 = v22;
        if (v22 != 0xFFFFFFFFLL)
        {
          uint64_t v24 = 8 * v22;
          swift_slowDealloc((void *)v7);
          unint64_t v7 = v24;
          goto LABEL_37;
        }
      }
    }

    __clrex();
LABEL_32:
    char v23 = 0;
    goto LABEL_33;
  }

  unint64_t result = (unsigned __int128 *)(8 * a2 + 16);
  do
  {
    unsigned __int128 v9 = __ldxp(result);
    uint64_t v8 = v9;
  }

  while (__stxp(v9, result));
  unsigned int v10 = DWORD2(v9);
  uint64_t v11 = HIDWORD(*((void *)&v9 + 1));
  uint64_t v12 = a3 << 33;
  uint64_t v13 = (a3 << 33) + v9;
  if (v13 < 0)
  {
    uint64_t v20 = HIDWORD(*((void *)&v9 + 1));
    uint64_t v16 = v9;
    if ((_DWORD)v9 == -1) {
      return result;
    }
    return (unsigned __int128 *)swift::RefCounts<swift::SideTableRefCountBits>::incrementSlow( (swift *)result,  v16,  (const char *)(v10 | (unint64_t)(v20 << 32)),  a4);
  }

  while (1)
  {
    unint64_t v14 = v10;
    unint64_t v15 = v10 | (unint64_t)(v11 << 32);
    do
    {
      while (1)
      {
        unsigned __int128 v17 = __ldxp(result);
        unsigned int v10 = DWORD2(v17);
        uint64_t v16 = v17;
        int v18 = (void)v17 != v8;
        if (*((void *)&v17 + 1) != v15) {
          ++v18;
        }
        if (!v18) {
          break;
        }
        if (!__stxp(v17, result)) {
          goto LABEL_20;
        }
      }
    }

    while (__stxp(__PAIR128__(v14, v13), result));
LABEL_20:
    if ((void)v17 == v8 && *((void *)&v17 + 1) == v15) {
      return result;
    }
    uint64_t v20 = HIDWORD(*((void *)&v17 + 1));
    uint64_t v8 = v17;
    uint64_t v11 = HIDWORD(*((void *)&v17 + 1));
    uint64_t v13 = v12 + v17;
  }

unint64_t swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::formWeakReference( unint64_t *a1, uint64_t a2, const char *a3, char *a4)
{
  unint64_t v5 = *a1;
  if ((*a1 & 0x8000000000000000LL) == 0 || *a1 == 0xFFFFFFFFLL)
  {
    if ((v5 & 0x100000000LL) != 0) {
      return 0LL;
    }
    unint64_t result = (unint64_t)swift_slowAlloc(0x20uLL, 0xFuLL);
    *(void *)(result + 16) = 0LL;
    int v18 = (unsigned __int128 *)(result + 16);
    *(void *)unint64_t result = a1 - 1;
    *(void *)(result + 24) = 0LL;
    while (1)
    {
      if ((v5 & 0x100000000LL) != 0) {
        return 0LL;
      }
      do
        __ldxp(v18);
      while (__stxp(__PAIR128__(1LL, v5), v18));
      unint64_t v19 = __ldxr(a1);
      if (v19 != v5) {
        break;
      }
      if (__stlxr((result >> 3) | 0xC000000000000000LL, a1)) {
        goto LABEL_31;
      }
      char v20 = 1;
LABEL_32:
      if ((v20 & 1) != 0) {
        goto LABEL_4;
      }
      unint64_t v5 = v19;
      if ((v19 & 0x8000000000000000LL) != 0)
      {
        unint64_t v5 = v19;
        if (v19 != 0xFFFFFFFFLL)
        {
          swift_slowDealloc((void *)result);
          unint64_t result = 8 * v19;
          if (8 * v19) {
            goto LABEL_4;
          }
          return result;
        }
      }
    }

    __clrex();
LABEL_31:
    char v20 = 0;
    goto LABEL_32;
  }

  unint64_t result = 8 * v5;
  if (!(8 * v5)) {
    return result;
  }
LABEL_4:
  unint64_t v7 = (unsigned __int128 *)(result + 16);
  do
    unsigned __int128 v8 = __ldxp(v7);
  while (__stxp(v8, v7));
  if ((v8 & 0x100000000LL) != 0) {
    return 0LL;
  }
  do
  {
    unsigned __int128 v10 = __ldxp(v7);
    unint64_t v9 = v10;
  }

  while (__stxp(v10, v7));
  if (DWORD2(v10) == -1) {
LABEL_22:
  }
    swift::swift_abortWeakRetainOverflow((swift *)result, a2, a3, a4);
  unsigned int v11 = DWORD2(v10);
  uint64_t v12 = HIDWORD(*((void *)&v10 + 1));
  while (1)
  {
    unint64_t v13 = v11 + 1;
    unint64_t v14 = v11 | (unint64_t)(v12 << 32);
    do
    {
      while (1)
      {
        unsigned __int128 v15 = __ldxp(v7);
        unsigned int v11 = DWORD2(v15);
        int v16 = (void)v15 != v9;
        if (*((void *)&v15 + 1) != v14) {
          ++v16;
        }
        if (!v16) {
          break;
        }
        if (!__stxp(v15, v7)) {
          goto LABEL_17;
        }
      }
    }

    while (__stxp(__PAIR128__(v13, v9), v7));
LABEL_17:
    if ((void)v15 == v9 && *((void *)&v15 + 1) == v14) {
      return result;
    }
    uint64_t v12 = HIDWORD(*((void *)&v15 + 1));
    unint64_t v9 = v15;
    if (DWORD2(v15) == -1) {
      goto LABEL_22;
    }
  }

void swift::RefCounts<swift::SideTableRefCountBits>::incrementUnownedSlow( swift *a1, uint64_t a2, const char *a3, char *a4)
{
}

uint64_t _swift_stdlib_immortalize(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8);
  if ((~v1 & 0x80000000FFFFFFFFLL) != 0)
  {
    uint64_t v2 = (unint64_t *)(result + 8);
    unint64_t v3 = __ldxr((unint64_t *)(result + 8));
    if (v3 != v1)
    {
      __clrex();
      while (1)
      {
LABEL_10:
        unint64_t v4 = __ldxr(v2);
        if (v4 == v3)
        {
          if (!__stxr(v3 | 0x80000000FFFFFFFFLL, v2)) {
            return result;
          }
        }

        else
        {
          __clrex();
        }

        unint64_t v3 = v4;
      }
    }

    if (__stxr(v1 | 0x80000000FFFFFFFFLL, v2)) {
      goto LABEL_10;
    }
  }

  return result;
}

uint64_t *swift_reflectionMirror_normalizedType(swift::SwiftError **a1, unint64_t *a2, uint64_t *a3)
{
  DynamicType = a3;
  for (unint64_t i = *a3; *DynamicType == 771; unint64_t i = *DynamicType)
  {
    uint64_t v7 = (uint64_t)DynamicType;
    DynamicType = (uint64_t *)swift::TargetExistentialTypeMetadata<swift::InProcess>::getDynamicType( (uint64_t)DynamicType,  (uint64_t)a1);
    a1 = swift::TargetExistentialTypeMetadata<swift::InProcess>::projectValue(v7, a1);
  }

  if (a2)
  {
    unint64_t i = *a2;
    DynamicType = (uint64_t *)a2;
  }

  if (i > 0x7FF) {
    LODWORD(i) = 0;
  }
  if ((int)i <= 767)
  {
    if ((_DWORD)i && (_DWORD)i != 515) {
      return DynamicType;
    }
  }

  else
  {
    if ((int)i <= 772)
    {
      if ((_DWORD)i != 768) {
        return DynamicType;
      }
      unsigned __int128 v8 = (uint64_t (***)())&type metadata for Builtin.UnknownObject;
      if (DynamicType == (uint64_t *)&off_189B8CE78)
      {
        DynamicType = (uint64_t *)&off_189B8CE78;
        if (a2) {
          return DynamicType;
        }
        unint64_t v9 = *a1;
      }

      else
      {
        unsigned __int128 v8 = &type metadata for Builtin.NativeObject;
        if (DynamicType != &qword_189B8CE38) {
          return DynamicType;
        }
        unint64_t v9 = *a1;
        unint64_t v10 = **(void **)*a1;
        BOOL v11 = v10 >= 0x800 || (_DWORD)v10 == 0;
        BOOL v12 = !v11;
        DynamicType = &qword_189B8CE38;
        if (a2 || v12) {
          return DynamicType;
        }
      }

      swift::_swift_getClass((unint64_t)v9, a2);
      return (uint64_t *)(v8 + 1);
    }

    if ((_DWORD)i != 773)
    {
      return DynamicType;
    }
  }

  if (!a2) {
    swift::_swift_getClass((unint64_t)*a1, a2);
  }
  return DynamicType;
}

uint64_t swift_getMetadataKind(void *a1)
{
  if (*a1 <= 0x7FFuLL) {
    return *a1;
  }
  else {
    return 0LL;
  }
}

uint64_t swift_reflectionMirror_count(swift::SwiftError **a1, objc_class *a2, uint64_t *a3)
{
  DynamicType = a3;
  Class j = a2;
  for (unint64_t i = *a3; *DynamicType == 771; unint64_t i = *DynamicType)
  {
    uint64_t v7 = (uint64_t)DynamicType;
    DynamicType = (uint64_t *)swift::TargetExistentialTypeMetadata<swift::InProcess>::getDynamicType( (uint64_t)DynamicType,  (uint64_t)a1);
    a1 = swift::TargetExistentialTypeMetadata<swift::InProcess>::projectValue(v7, a1);
  }

  if (j)
  {
    unint64_t i = (unint64_t)j->isa;
    DynamicType = (uint64_t *)j;
  }

  uint64_t result = 0LL;
  if (i > 0x7FF) {
    LODWORD(i) = 0;
  }
  if ((int)i <= 514)
  {
    if ((i - 513) < 2)
    {
      uint64_t v19 = DynamicType[1];
      uint64_t v20 = *(int *)(v19 + 16);
      uint64_t v21 = -16 - v19;
      if ((_DWORD)v20) {
        BOOL v22 = v20 == v21;
      }
      else {
        BOOL v22 = 1;
      }
      if (!v22 && a1 != 0LL)
      {
        uint64_t v24 = (const char *)(*(uint64_t (**)(swift::SwiftError **, uint64_t *))(*(DynamicType - 1) + 88))( a1,  DynamicType);
        return v26[2] != 0LL;
      }

      return 0LL;
    }

    if ((_DWORD)i)
    {
      if ((_DWORD)i != 512) {
        return result;
      }
      uint64_t v9 = DynamicType[1];
      uint64_t v10 = *(int *)(v9 + 16);
      if ((_DWORD)v10) {
        BOOL v11 = v10 == -16 - v9;
      }
      else {
        BOOL v11 = 1;
      }
      if (!v11) {
        return *(unsigned int *)(v9 + 20);
      }
      return 0LL;
    }

    goto LABEL_42;
  }

  if ((int)i <= 768)
  {
    if ((_DWORD)i != 515)
    {
      if ((_DWORD)i != 768) {
        return result;
      }
      BOOL v12 = (uint64_t (***)())&type metadata for Builtin.UnknownObject;
      if (DynamicType == (uint64_t *)&off_189B8CE78)
      {
        if (!j)
        {
          for (Class j = swift::_swift_getClass((unint64_t)*a1, a2); ((uint64_t)j[4].isa & 2) != 0; Class j = j[1].isa)
          {
            if (j[8].isa) {
              break;
            }
          }
        }

        Class isa = j->isa;
        if (j->isa > (Class)0x7FF) {
          LODWORD(isa) = 0;
        }
        if ((_DWORD)isa)
        {
          if ((_DWORD)isa != 773) {
            return 0LL;
          }
          Class j = j[1].isa;
          if (!j) {
            return 0LL;
          }
        }
      }

      else
      {
        BOOL v12 = &type metadata for Builtin.NativeObject;
        if (DynamicType != &qword_189B8CE38) {
          return 0LL;
        }
        if (!j)
        {
          for (Class j = swift::_swift_getClass((unint64_t)*a1, a2); ((uint64_t)j[4].isa & 2) != 0; Class j = j[1].isa)
          {
            if (j[8].isa) {
              break;
            }
          }
        }

        Class v14 = j->isa;
        if (j->isa > (Class)0x7FF) {
          LODWORD(v14) = 0;
        }
        if ((_DWORD)v14)
        {
          if ((_DWORD)v14 != 773) {
            return 0LL;
          }
          Class j = j[1].isa;
          if (!j) {
            return 0LL;
          }
        }
      }

      int v16 = v12[9];
LABEL_53:
      uint64_t v17 = *((int *)v16 + 4);
      if ((_DWORD)v17) {
        BOOL v18 = v17 == -16LL - (void)v16;
      }
      else {
        BOOL v18 = 1;
      }
      if (!v18) {
        return *((unsigned int *)v16 + 9);
      }
      return 0LL;
    }

uint64_t swift_reflectionMirror_recursiveCount(unint64_t *a1)
{
  unint64_t v2 = *a1;
  if (*a1 == 771)
  {
    unint64_t v3 = 0LL;
    uint64_t v4 = (uint64_t)a1;
    do
    {
      DynamicType = (void *)swift::TargetExistentialTypeMetadata<swift::InProcess>::getDynamicType(v4, (uint64_t)v3);
      unint64_t v3 = swift::TargetExistentialTypeMetadata<swift::InProcess>::projectValue(v4, v3);
      uint64_t v4 = (uint64_t)DynamicType;
    }

    while (*DynamicType == 771LL);
    unint64_t v2 = *a1;
  }

  else
  {
    unint64_t v3 = 0LL;
  }

  uint64_t result = 0LL;
  if (v2 > 0x7FF) {
    LODWORD(v2) = 0;
  }
  if ((int)v2 <= 767)
  {
    if ((v2 - 513) >= 2)
    {
      uint64_t v7 = a1;
      if ((_DWORD)v2)
      {
        if ((_DWORD)v2 != 512) {
          return result;
        }
        unint64_t v8 = a1[1];
        uint64_t v9 = *(int *)(v8 + 16);
        if ((_DWORD)v9) {
          BOOL v10 = v9 == -16LL - v8;
        }
        else {
          BOOL v10 = 1;
        }
        if (!v10) {
          return *(unsigned int *)(v8 + 20);
        }
        return 0LL;
      }

      goto LABEL_31;
    }

    unint64_t v11 = a1[1];
    uint64_t v12 = *(int *)(v11 + 16);
    unint64_t v13 = -16LL - v11;
    if ((_DWORD)v12) {
      BOOL v14 = v12 == v13;
    }
    else {
      BOOL v14 = 1;
    }
    if (!v14 && v3 != 0LL)
    {
      int v16 = (const char *)(*(uint64_t (**)(swift::SwiftError **, unint64_t *))(*(a1 - 1) + 88))(v3, a1);
      return v18 != 0LL;
    }

    return 0LL;
  }

  if ((int)v2 > 772)
  {
    if ((_DWORD)v2 == 773)
    {
      uint64_t v7 = (unint64_t *)a1[1];
      if (v7)
      {
LABEL_31:
        if ((v7[4] & 2) != 0)
        {
          v17[0] = off_189B8E410;
          v17[1] = a1;
          BOOL v18 = v3;
        }
      }

      return 0LL;
    }
  }

  else
  {
    if ((_DWORD)v2 == 768) {
      return 0LL;
    }
    if ((_DWORD)v2 == 769) {
      return a1[1];
    }
  }

  return result;
}

uint64_t swift_reflectionMirror_recursiveChildMetadata(uint64_t *a1, const char *a2, char **a3)
{
  uint64_t v17 = a3;
  BOOL v18 = a2;
  Class v15 = &v18;
  int v16 = &v17;
  char v23 = a1;
  unint64_t v4 = *a1;
  if (*a1 == 771)
  {
    unint64_t v5 = 0LL;
    uint64_t v6 = (uint64_t)a1;
    do
    {
      DynamicType = (void *)swift::TargetExistentialTypeMetadata<swift::InProcess>::getDynamicType(v6, (uint64_t)v5);
      unint64_t v5 = swift::TargetExistentialTypeMetadata<swift::InProcess>::projectValue(v6, v5);
      uint64_t v6 = (uint64_t)DynamicType;
    }

    while (*DynamicType == 771LL);
    unint64_t v4 = *a1;
  }

  else
  {
    unint64_t v5 = 0LL;
  }

  BOOL v22 = a1;
  v20[0] = &v22;
  v20[1] = &v21;
  _OWORD v20[2] = &v15;
  uint64_t v21 = v5;
  v19[0] = (Class *)&v23;
  v19[1] = (Class *)&v21;
  if (v4 > 0x7FF) {
    LODWORD(v4) = 0;
  }
  void v19[2] = (Class *)v20;
  if ((int)v4 <= 767)
  {
    switch((int)v4)
    {
      case 512:
        uint64_t v12 = v17;
        uint64_t result = (uint64_t)v25;
        unsigned int v13 = v26 | (v27 << 16);
        *uint64_t v12 = (char *)v24[0];
        v12[1] = 0LL;
        BOOL v14 = *v16;
        *((_BYTE *)*v16 + 16) = v13 < 0x10000;
        *((_BYTE *)v14 + 17) = (v13 & 0xFF00) != 0;
        return result;
      case 513:
      case 514:
        uint64_t result = 0LL;
        *((_WORD *)v17 + 8) = 1;
        return result;
      case 515:
        return _ZZN12_GLOBAL__N_14callIZ45swift_reflectionMirror_recursiveChildMetadataE3__0EEDTclfp2_LDnEEEPN5swift11OpaqueValueEPKNS3_14TargetMetadataINS3_9InProcessEEESA_RKT_ENKUlvE_clEv( v19,  a2);
      case 516:
        swift_reflectionMirror_recursiveChildMetadata_cold_2();
      default:
        if (!(_DWORD)v4) {
          return _ZZN12_GLOBAL__N_14callIZ45swift_reflectionMirror_recursiveChildMetadataE3__0EEDTclfp2_LDnEEEPN5swift11OpaqueValueEPKNS3_14TargetMetadataINS3_9InProcessEEESA_RKT_ENKUlvE_clEv( v19,  a2);
        }
        goto LABEL_27;
    }
  }

  switch((int)v4)
  {
    case 768:
      if (a1 != (uint64_t *)&off_189B8CE78)
      {
        if (a1 != &qword_189B8CE38) {
          goto LABEL_27;
        }
      }

      return _ZZN12_GLOBAL__N_14callIZ45swift_reflectionMirror_recursiveChildMetadataE3__0EEDTclfp2_LDnEEEPN5swift11OpaqueValueEPKNS3_14TargetMetadataINS3_9InProcessEEESA_RKT_ENKUlvE_clEv( v19,  a2);
    case 769:
      v24[0] = off_189B8E2A0;
      v24[1] = a1;
      uint64_t v25 = v5;
      unint64_t v11 = *v16;
      *((_BYTE *)*v16 + 16) = (*(void *)&v10 & 0xFF0000LL) == 0;
      *((_BYTE *)v11 + 17) = (v10 & 0xFF00) != 0LL;
      return result;
    case 770:
    case 771:
      goto LABEL_27;
    case 772:
    case 774:
      swift_reflectionMirror_recursiveChildMetadata_cold_3();
    case 773:
      return _ZZN12_GLOBAL__N_14callIZ45swift_reflectionMirror_recursiveChildMetadataE3__0EEDTclfp2_LDnEEEPN5swift11OpaqueValueEPKNS3_14TargetMetadataINS3_9InProcessEEESA_RKT_ENKUlvE_clEv( v19,  a2);
    default:
LABEL_27:
      swift_reflectionMirror_recursiveChildMetadata_cold_1();
  }

uint64_t swift_reflectionMirror_recursiveChildOffset(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = *(void *)a1;
  if (*(void *)a1 == 771LL)
  {
    unint64_t v5 = 0LL;
    uint64_t v6 = a1;
    do
    {
      DynamicType = (void *)swift::TargetExistentialTypeMetadata<swift::InProcess>::getDynamicType(v6, (uint64_t)v5);
      unint64_t v5 = swift::TargetExistentialTypeMetadata<swift::InProcess>::projectValue(v6, v5);
      uint64_t v6 = (uint64_t)DynamicType;
    }

    while (*DynamicType == 771LL);
    unint64_t v4 = *(void *)a1;
  }

  else
  {
    unint64_t v5 = 0LL;
  }

  if (v4 > 0x7FF) {
    LODWORD(v4) = 0;
  }
  if ((int)v4 <= 767)
  {
    uint64_t result = 0LL;
    switch((int)v4)
    {
      case 512:
        uint64_t v10 = *(unsigned int *)(v9 + 24);
        if ((_DWORD)v10) {
          uint64_t v11 = a1 + 8 * v10;
        }
        else {
          uint64_t v11 = 0LL;
        }
        return *(unsigned int *)(v11 + 4 * a2);
      case 513:
      case 514:
        return result;
      case 515:
        goto LABEL_34;
      case 516:
        swift_reflectionMirror_recursiveChildOffset_cold_3();
      default:
        uint64_t v13 = a1;
        if ((_DWORD)v4) {
          goto LABEL_38;
        }
        goto LABEL_28;
    }
  }

  switch((int)v4)
  {
    case 768:
      if ((_UNKNOWN **)a1 == &off_189B8CE78) {
        swift_reflectionMirror_recursiveChildOffset_cold_7();
      }
      goto LABEL_38;
    case 769:
      if ((a2 & 0x8000000000000000LL) != 0 || *(void *)(a1 + 8) < a2) {
        swift_reflectionMirror_recursiveChildOffset_cold_2();
      }
      return *(void *)(a1 + 16LL * a2 + 32);
    case 770:
    case 771:
      goto LABEL_38;
    case 772:
    case 774:
      swift_reflectionMirror_recursiveChildMetadata_cold_3();
    case 773:
      uint64_t v13 = *(void *)(a1 + 8);
      if (!v13) {
        goto LABEL_34;
      }
LABEL_28:
      if ((*(_BYTE *)(v13 + 32) & 2) == 0) {
LABEL_34:
      }
        swift_reflectionMirror_recursiveChildOffset_cold_7();
      v14[0] = off_189B8E410;
      v14[1] = a1;
      v14[2] = v5;
    default:
LABEL_38:
      swift_reflectionMirror_recursiveChildMetadata_cold_1();
  }

double swift_reflectionMirror_subscript@<D0>( swift::SwiftError **a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, char **a4@<X3>, void (__cdecl **a5)(void *)@<X4>, uint64_t *a6@<X5>, _OWORD *a7@<X8>)
{
  DynamicType = a6;
  uint64_t v9 = a1;
  unint64_t v30 = (const char **)a4;
  uint64_t v31 = a3;
  v28[0] = &v31;
  v28[1] = &v30;
  v28[2] = &v29;
  uint64_t v29 = (void (**)(const char *))a5;
  uint64_t v37 = a2;
  for (unint64_t i = *a6; *DynamicType == 771; unint64_t i = *DynamicType)
  {
    uint64_t v12 = (uint64_t)DynamicType;
    DynamicType = (uint64_t *)swift::TargetExistentialTypeMetadata<swift::InProcess>::getDynamicType( (uint64_t)DynamicType,  (uint64_t)v9);
    a1 = swift::TargetExistentialTypeMetadata<swift::InProcess>::projectValue(v12, v9);
    uint64_t v9 = a1;
  }

  uint64_t v35 = v9;
  unsigned int v36 = DynamicType;
  if (a2)
  {
    unsigned int v36 = (uint64_t *)a2;
    unint64_t i = *a2;
    DynamicType = (uint64_t *)a2;
  }

  v34[0] = &v36;
  v34[1] = &v35;
  v34[2] = v28;
  v33[0] = (Class *)&v37;
  v33[1] = (Class *)&v35;
  v33[2] = (Class *)v34;
  if (i > 0x7FF) {
    LODWORD(i) = 0;
  }
  if ((int)i <= 767)
  {
    switch((int)i)
    {
      case 512:
        uint64_t v19 = v30;
        unint64_t v18 = v31;
        uint64_t v20 = v29;
        uint64_t v21 = v39;
        int v22 = BYTE10(v39);
        int v23 = WORD4(v39);
        int *v19 = (const char *)v38;
        *uint64_t v20 = 0LL;
        int v25 = v23 | (v22 << 16);
        uint64_t v26 = *(unsigned int *)(v24 + 24);
        if ((_DWORD)v26) {
          unsigned __int8 v27 = &DynamicType[v26];
        }
        else {
          unsigned __int8 v27 = 0LL;
        }
      case 513:
      case 514:
        *(void *)&__int128 v38 = off_189B8E3A0;
        *((void *)&v38 + 1) = DynamicType;
        *(void *)&__int128 v39 = v9;
      case 515:
        return _ZZN12_GLOBAL__N_14callIZ32swift_reflectionMirror_subscriptE3__0EEDTclfp2_LDnEEEPN5swift11OpaqueValueEPKNS3_14TargetMetadataINS3_9InProcessEEESA_RKT_ENKUlvE_clEv( v33,  a2,  a7);
      case 516:
        swift_reflectionMirror_subscript_cold_3(a1);
      default:
        if (!(_DWORD)i) {
          return _ZZN12_GLOBAL__N_14callIZ32swift_reflectionMirror_subscriptE3__0EEDTclfp2_LDnEEEPN5swift11OpaqueValueEPKNS3_14TargetMetadataINS3_9InProcessEEESA_RKT_ENKUlvE_clEv( v33,  a2,  a7);
        }
        goto LABEL_33;
    }
  }

  switch((int)i)
  {
    case 768:
      if (DynamicType != (uint64_t *)&off_189B8CE78)
      {
        if (DynamicType != &qword_189B8CE38) {
          goto LABEL_33;
        }
      }

      return _ZZN12_GLOBAL__N_14callIZ32swift_reflectionMirror_subscriptE3__0EEDTclfp2_LDnEEEPN5swift11OpaqueValueEPKNS3_14TargetMetadataINS3_9InProcessEEESA_RKT_ENKUlvE_clEv( v33,  a2,  a7);
    case 769:
      v32[0] = off_189B8E2A0;
      v32[1] = DynamicType;
      v32[2] = v9;
      uint64_t v15 = DynamicType[2 * v31 + 4];
      int v16 = swift::TargetMetadata<swift::InProcess>::allocateBoxForExistentialIn(*((uint64_t *)&v39 + 1), &v38);
      (*(void (**)(void *, char *))(*(void *)(*((void *)&v39 + 1) - 8LL) + 16LL))( v16,  (char *)v9 + v15);
      double result = *(double *)&v38;
      __int128 v17 = v39;
      *a7 = v38;
      a7[1] = v17;
      return result;
    case 770:
    case 771:
      goto LABEL_33;
    case 772:
    case 774:
      swift_reflectionMirror_recursiveChildMetadata_cold_3();
    case 773:
      return _ZZN12_GLOBAL__N_14callIZ32swift_reflectionMirror_subscriptE3__0EEDTclfp2_LDnEEEPN5swift11OpaqueValueEPKNS3_14TargetMetadataINS3_9InProcessEEESA_RKT_ENKUlvE_clEv( v33,  a2,  a7);
    default:
LABEL_33:
      swift_reflectionMirror_recursiveChildMetadata_cold_1();
  }

uint64_t swift_reflectionMirror_displayStyle(swift::SwiftError **a1, void **a2)
{
  DynamicType = a2;
  for (unint64_t i = *a2; *DynamicType == (void *)771; unint64_t i = *DynamicType)
  {
    uint64_t v5 = (uint64_t)DynamicType;
    DynamicType = (void **)swift::TargetExistentialTypeMetadata<swift::InProcess>::getDynamicType( (uint64_t)DynamicType,  (uint64_t)a1);
    a1 = swift::TargetExistentialTypeMetadata<swift::InProcess>::projectValue(v5, a1);
  }

  if ((int)i > 767)
  {
    uint64_t result = 116LL;
    switch((int)i)
    {
      case 768:
        if (DynamicType == (void **)&qword_189B8CE38)
        {
          uint64_t v7 = *a1;
        }

        goto LABEL_9;
      case 769:
        return result;
      case 770:
      case 771:
      case 772:
      case 774:
        goto LABEL_9;
      case 773:
LABEL_20:
        uint64_t v7 = *a1;
LABEL_21:
        swift::_swift_getClass((unint64_t)v7, a2);
        return 99LL;
      default:
LABEL_9:
        uint64_t result = 0LL;
        break;
    }
  }

  else
  {
    switch((int)i)
    {
      case 512:
        uint64_t result = 115LL;
        break;
      case 513:
      case 514:
        uint64_t result = 101LL;
        break;
      case 515:
        goto LABEL_20;
      case 516:
        uint64_t result = 102LL;
        break;
      default:
        if ((_DWORD)i) {
          goto LABEL_9;
        }
        goto LABEL_20;
    }
  }

  return result;
}

uint64_t swift_EnumCaseName(swift::SwiftError **a1, uint64_t *a2)
{
  DynamicType = a2;
  for (unint64_t i = *a2; *DynamicType == 771; unint64_t i = *DynamicType)
  {
    uint64_t v5 = (uint64_t)DynamicType;
    DynamicType = (uint64_t *)swift::TargetExistentialTypeMetadata<swift::InProcess>::getDynamicType( (uint64_t)DynamicType,  (uint64_t)a1);
    a1 = swift::TargetExistentialTypeMetadata<swift::InProcess>::projectValue(v5, a1);
  }

  uint64_t result = 0LL;
  if (i > 0x7FF) {
    LODWORD(i) = 0;
  }
  if ((int)i <= 514)
  {
    if ((i - 513) < 2)
    {
      uint64_t v9 = DynamicType[1];
      uint64_t v10 = *(int *)(v9 + 16);
      uint64_t v11 = -16 - v9;
      if ((_DWORD)v10) {
        BOOL v12 = v10 == v11;
      }
      else {
        BOOL v12 = 1;
      }
      if (!v12)
      {
        uint64_t v13 = (const char *)(*(uint64_t (**)(swift::SwiftError **, uint64_t *))(*(DynamicType - 1) + 88))( a1,  DynamicType);
        return v14[0];
      }

      return 0LL;
    }

    if ((_DWORD)i) {
      return result;
    }
    goto LABEL_25;
  }

  if ((int)i <= 772)
  {
    if ((_DWORD)i != 515)
    {
      if ((_DWORD)i != 768) {
        return result;
      }
      if (DynamicType != (uint64_t *)&off_189B8CE78)
      {
        if (DynamicType != &qword_189B8CE38) {
          return 0LL;
        }
        uint64_t v7 = *a1;
        goto LABEL_26;
      }
    }

const char *swift_OpaqueSummary(unint64_t *a1)
{
  uint64_t result = 0LL;
  unint64_t v3 = *a1;
  if (v3 > 0x7FF) {
    LODWORD(v3) = 0;
  }
  if ((int)v3 > 767)
  {
    if ((int)v3 <= 1023)
    {
      switch((int)v3)
      {
        case 768:
          uint64_t result = "(Opaque Value)";
          break;
        case 769:
          uint64_t result = "(Tuple)";
          break;
        case 770:
          uint64_t result = "(Function)";
          break;
        case 771:
          uint64_t result = "(Existential)";
          break;
        case 772:
          return result;
        case 773:
          uint64_t result = "(Objective-C Class Wrapper)";
          break;
        case 774:
          uint64_t result = "(Existential Metatype)";
          break;
        case 775:
          uint64_t result = "(Extended Existential)";
          break;
        default:
          return "(Unknown)";
      }

      return result;
    }

    switch((_DWORD)v3)
    {
      case 0x400:
        return "(Heap Local Variable)";
      case 0x500:
        return "(Heap Generic Local Variable)";
      case 0x501:
        return "(ErrorType Object)";
    }

    return "(Unknown)";
  }

  if ((int)v3 > 514)
  {
    if ((_DWORD)v3 == 515) {
      return "(Foreign Class)";
    }
    if ((_DWORD)v3 == 516) {
      return "(Foreign Reference Type)";
    }
    return "(Unknown)";
  }

  return result;
}

id swift_reflectionMirror_quickLookObject(swift::SwiftError **a1, void **a2)
{
  DynamicType = a2;
  for (unint64_t i = *a2; *DynamicType == (void *)771; unint64_t i = *DynamicType)
  {
    uint64_t v5 = (uint64_t)DynamicType;
    DynamicType = (void **)swift::TargetExistentialTypeMetadata<swift::InProcess>::getDynamicType( (uint64_t)DynamicType,  (uint64_t)a1);
    a1 = swift::TargetExistentialTypeMetadata<swift::InProcess>::projectValue(v5, a1);
  }

  if ((int)i <= 767)
  {
    if (!(_DWORD)i || (_DWORD)i == 515) {
      goto LABEL_22;
    }
    return 0LL;
  }

  if ((int)i > 772)
  {
    if ((_DWORD)i != 773)
    {
      return 0LL;
    }

    goto LABEL_22;
  }

  if ((_DWORD)i != 768) {
    return 0LL;
  }
  if (DynamicType == (void **)&off_189B8CE78)
  {
LABEL_22:
    uint64_t v6 = *a1;
    goto LABEL_23;
  }

  uint64_t v6 = *a1;
LABEL_23:
  swift::_swift_getClass((unint64_t)v6, a2);
  return _quickLookObjectForPointer((id *)a1);
}

char *swift_keyPath_copySymbolName(swift::SymbolInfo *a1)
{
  uint64_t v1 = (const char *)_ContiguousArrayBuffer.mutableCount.getter((uint64_t)v3);
  return strdup(v1);
}

char *swift_keyPathSourceString(char *a1)
{
  unint64_t v2 = (const char *)strlen(a1);
  swift::Demangle::__runtime::keyPathSourceString((swift::Demangle::__runtime *)a1, v2, __s1);
  if (v7 < 0)
  {
    if (v6) {
      unint64_t v3 = strdup(*(const char **)__s1);
    }
    else {
      unint64_t v3 = 0LL;
    }
    operator delete(*(void **)__s1);
  }

  else if (v7)
  {
    return strdup(__s1);
  }

  else
  {
    return 0LL;
  }

  return v3;
}

uint64_t anonymous namespace'::TupleImpl::displayStyle(_anonymous_namespace_::TupleImpl *this)
{
  return 116LL;
}

uint64_t anonymous namespace'::TupleImpl::count(_anonymous_namespace_::TupleImpl *this)
{
  return *(void *)(*((void *)this + 1) + 8LL);
}

uint64_t anonymous namespace'::TupleImpl::childOffset( _anonymous_namespace_::TupleImpl *this, unint64_t a2)
{
  if ((a2 & 0x8000000000000000LL) != 0 || (uint64_t v2 = *((void *)this + 1), *(void *)(v2 + 8) < a2)) {
    swift_reflectionMirror_recursiveChildOffset_cold_2();
  }
  return *(void *)(v2 + 16LL * a2 + 32);
}

uint64_t anonymous namespace'::TupleImpl::childMetadata( _anonymous_namespace_::TupleImpl *this, const char *a2, char **a3, void (__cdecl **a4)(void *))
{
  if (((unint64_t)a2 & 0x8000000000000000LL) != 0
    || (uint64_t v5 = *((void *)this + 1), *(void *)(v5 + 8) < (unint64_t)a2))
  {
    swift_reflectionMirror_recursiveChildOffset_cold_2();
  }

  unint64_t v8 = *(char **)(v5 + 16);
  if (!v8) {
    goto LABEL_15;
  }
  uint64_t v9 = strchr(*(const char **)(v5 + 16), 32);
  BOOL v10 = v9 != 0LL;
  if (a2 && v9)
  {
    uint64_t v11 = a2 - 1;
    do
    {
      unint64_t v8 = v9 + 1;
      uint64_t v9 = strchr(v9 + 1, 32);
      BOOL v10 = v9 != 0LL;
      BOOL v12 = v11-- != 0LL;
    }

    while (v12 && v9);
  }

  if (!v10 || v8 == v9)
  {
LABEL_15:
    swift_asprintf(&v17, a2, a2);
    *a3 = v17;
  }

  else
  {
    size_t v14 = v9 - v8;
    uint64_t v15 = malloc(v9 - v8 + 1);
    memcpy(v15, v8, v14);
    *((_BYTE *)v15 + v14) = 0;
    *a3 = (char *)v15;
  }

  return *(void *)(v5 + 16LL * a2 + 24);
}

double anonymous namespace'::TupleImpl::subscript@<D0>( _anonymous_namespace_::TupleImpl *this@<X0>, const char **a2@<X2>, void (**a3)(const char *)@<X3>, uint64_t a4@<X1>, _OWORD *a5@<X8>)
{
  uint64_t v10 = (*(uint64_t (**)(_anonymous_namespace_::TupleImpl *))(*(void *)this + 16LL))(this);
  uint64_t v11 = (*(uint64_t (**)(_anonymous_namespace_::TupleImpl *, uint64_t, const char **, void (**)(const char *)))(*(void *)this + 24LL))( this,  a4,  a2,  a3);
  uint64_t v12 = *((void *)this + 2) + v10;
  *((void *)&v17 + 1) = v11;
  uint64_t v13 = swift::TargetMetadata<swift::InProcess>::allocateBoxForExistentialIn(v11, &v16);
  (*(void (**)(void *, uint64_t))(*(void *)(*((void *)&v17 + 1) - 8LL) + 16LL))(v13, v12);
  double result = *(double *)&v16;
  __int128 v15 = v17;
  *a5 = v16;
  a5[1] = v15;
  return result;
}

uint64_t anonymous namespace'::ReflectionMirrorImpl::enumCaseName( _anonymous_namespace_::ReflectionMirrorImpl *this)
{
  return 0LL;
}

uint64_t anonymous namespace'::ReflectionMirrorImpl::quickLookObject( _anonymous_namespace_::ReflectionMirrorImpl *this)
{
  return 0LL;
}

uint64_t anonymous namespace'::ReflectionMirrorImpl::recursiveCount( _anonymous_namespace_::ReflectionMirrorImpl *this)
{
  return (*(uint64_t (**)(_anonymous_namespace_::ReflectionMirrorImpl *))(*(void *)this + 8LL))(this);
}

uint64_t anonymous namespace'::ReflectionMirrorImpl::recursiveChildOffset( _anonymous_namespace_::ReflectionMirrorImpl *this)
{
  return (*(uint64_t (**)(_anonymous_namespace_::ReflectionMirrorImpl *))(*(void *)this + 16LL))(this);
}

uint64_t anonymous namespace'::ReflectionMirrorImpl::recursiveChildMetadata( _anonymous_namespace_::ReflectionMirrorImpl *this, uint64_t a2, const char **a3, void (**a4)(const char *))
{
  return (*(uint64_t (**)(_anonymous_namespace_::ReflectionMirrorImpl *, uint64_t, const char **, void (**)(const char *)))(*(void *)this + 24LL))( this,  a2,  a3,  a4);
}

void anonymous namespace'::getFieldAt(unint64_t a1@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > 0x7FFuLL) {
    LODWORD(__swift::__runtime::llvm::hash_value(v4, v5) = 0;
  }
  if ((int)v5 > 514)
  {
    if ((_DWORD)v5 != 515 && (_DWORD)v5 != 516) {
      goto LABEL_17;
    }
  }

  else if ((v5 - 512) >= 3)
  {
    if ((_DWORD)v5) {
      goto LABEL_17;
    }
    if ((*(_BYTE *)(a1 + 32) & 2) == 0) {
      goto LABEL_17;
    }
    uint64_t v6 = *(void *)(a1 + 64);
    if (!v6) {
      goto LABEL_17;
    }
    goto LABEL_12;
  }

  uint64_t v6 = *(void *)(a1 + 8);
  if (!v6)
  {
LABEL_17:
    uint64_t TypeName = swift_getTypeName(a1, 1);
    *(void *)a3 = "unknown";
    *(void *)(a3 + 8) = 7LL;
    *(void *)(a3 + 16) = &unk_189B8D178;
    *(_WORD *)(a3 + 24) = 0;
    *(_BYTE *)(a3 + 26) = 0;
    return;
  }

void anonymous namespace'::missing_reflection_metadata_warning( _anonymous_namespace_ *this, const char *a2, uint64_t a3, char *a4, ...)
{
  if (qword_18C575920 != -1) {
}
  }

void *std::__function::__func<anonymous namespace'::getFieldAt(swift::TargetMetadata<swift::InProcess> const*,unsigned int)::$_0,std::allocator<anonymous namespace'::getFieldAt(swift::TargetMetadata<swift::InProcess> const*,unsigned int)::$_0>,void const* ()(unsigned int,unsigned int)>::__clone( uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = off_189B8E310;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<anonymous namespace'::getFieldAt(swift::TargetMetadata<swift::InProcess> const*,unsigned int)::$_0,std::allocator<anonymous namespace'::getFieldAt(swift::TargetMetadata<swift::InProcess> const*,unsigned int)::$_0>,void const* ()(unsigned int,unsigned int)>::__clone( uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_189B8E310;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<anonymous namespace'::getFieldAt(swift::TargetMetadata<swift::InProcess> const*,unsigned int)::$_0,std::allocator<anonymous namespace'::getFieldAt(swift::TargetMetadata<swift::InProcess> const*,unsigned int)::$_0>,void const* ()(unsigned int,unsigned int)>::operator()( uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  return swift::SubstGenericParametersFromMetadata::getMetadata( *(swift::SubstGenericParametersFromMetadata **)(a1 + 8),  *a2,  *a3);
}

void *std::__function::__func<anonymous namespace'::getFieldAt(swift::TargetMetadata<swift::InProcess> const*,unsigned int)::$_1,std::allocator<anonymous namespace'::getFieldAt(swift::TargetMetadata<swift::InProcess> const*,unsigned int)::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone( uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = off_189B8E358;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<anonymous namespace'::getFieldAt(swift::TargetMetadata<swift::InProcess> const*,unsigned int)::$_1,std::allocator<anonymous namespace'::getFieldAt(swift::TargetMetadata<swift::InProcess> const*,unsigned int)::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone( uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_189B8E358;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<anonymous namespace'::getFieldAt(swift::TargetMetadata<swift::InProcess> const*,unsigned int)::$_1,std::allocator<anonymous namespace'::getFieldAt(swift::TargetMetadata<swift::InProcess> const*,unsigned int)::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::operator()( uint64_t a1, uint64_t *a2, int *a3)
{
  return swift::SubstGenericParametersFromMetadata::getWitnessTable(*(void *)(a1 + 8), *a2, *a3);
}

uint64_t anonymous namespace'::missing_reflection_metadata_warning(char const*,...)::$_0::operator() const(void)::{lambda(void *)#1}::__invoke( BOOL *a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t result = (uint64_t)_playgroundPrintHook.getter((uint64_t)a1, a2, a3, a4);
  uint64_t v7 = result;
  if (result) {
    uint64_t result = swift_release(v6);
  }
  *a1 = v7 == 0;
  return result;
}

double anonymous namespace'::copyFieldContents@<D0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, _OWORD *a4@<X8>)
{
  int v7 = BYTE2(a3);
  *((void *)&v17 + 1) = a2;
  uint64_t v8 = swift::TargetMetadata<swift::InProcess>::allocateBoxForExistentialIn(a2, &v16);
  uint64_t v12 = v8;
  switch(v7)
  {
    case 0:
    case 4:
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(a2 - 8) + 16LL))(v8, a1, a2);
      break;
    case 1:
      uint64_t Strong = swift_unknownObjectWeakLoadStrong(a1);
      goto LABEL_5;
    case 2:
      uint64_t Strong = swift_unknownObjectUnownedLoadStrong(a1, v9, v10, v11);
LABEL_5:
      *uint64_t v12 = Strong;
      memcpy(v12 + 1, a1 + 1, *(void *)(*(void *)(a2 - 8) + 64LL) - 8LL);
      break;
    default:
      swift::warning(0LL, "Value with unrecognized reference type is reflected as ()", v10, v11);
      swift::TargetMetadata<swift::InProcess>::deallocateBoxForExistentialIn(a2, (uint64_t *)&v16);
      *((void *)&v17 + 1) = &unk_189B8D178;
      break;
  }

  double result = *(double *)&v16;
  __int128 v15 = v17;
  *a4 = v16;
  a4[1] = v15;
  return result;
}

uint64_t anonymous namespace'::EnumImpl::displayStyle(_anonymous_namespace_::EnumImpl *this)
{
  return 101LL;
}

uint64_t anonymous namespace'::EnumImpl::count(_anonymous_namespace_::EnumImpl *this)
{
  uint64_t v1 = *((void *)this + 1);
  uint64_t v2 = *(void *)(v1 + 8);
  uint64_t v3 = *(int *)(v2 + 16);
  uint64_t v4 = -16 - v2;
  if ((_DWORD)v3) {
    BOOL v5 = v3 == v4;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    return 0LL;
  }
  uint64_t result = *((void *)this + 2);
  if (result)
  {
    uint64_t v8 = (const char *)(*(uint64_t (**)(void))(*(void *)(v1 - 8) + 88LL))();
    return v9[2] != 0LL;
  }

  return result;
}

uint64_t anonymous namespace'::EnumImpl::childOffset(_anonymous_namespace_::EnumImpl *this)
{
  return 0LL;
}

uint64_t anonymous namespace'::EnumImpl::childMetadata( _anonymous_namespace_::EnumImpl *this, uint64_t a2, const char **a3, void (**a4)(const char *))
{
  return 0LL;
}

double anonymous namespace'::EnumImpl::subscript@<D0>( _anonymous_namespace_::EnumImpl *this@<X0>, const char **a2@<X2>, void (**a3)(const char *)@<X3>, _OWORD *a4@<X8>)
{
  int v7 = (const char *)(*(uint64_t (**)(void))(*(void *)(*((void *)this + 1) - 8LL) + 88LL))(*((void *)this + 2));
  uint64_t v8 = (const char *)v22[0];
  uint64_t v9 = v22[2];
  int v10 = v23;
  BoxForExistentialIn = swift::TargetMetadata<swift::InProcess>::allocateBoxForExistentialIn(*((void *)this + 1), v22);
  (*(void (**)(void *, void))(*(void *)(*((void *)this + 1) - 8LL) + 16LL))( BoxForExistentialIn,  *((void *)this + 2));
  if (v10) {
    uint64_t v12 = &qword_189B8CE38;
  }
  else {
    uint64_t v12 = (uint64_t *)v9;
  }
  uint64_t v13 = swift_allocBox((uint64_t)v12);
  __int128 v15 = v14;
  (*(void (**)(void *))(*(void *)(*((void *)this + 1) - 8LL) + 96LL))(BoxForExistentialIn);
  (*(void (**)(uint64_t *, void *, uint64_t *))(*(v12 - 1) + 32))(v15, BoxForExistentialIn, v12);
  swift::TargetMetadata<swift::InProcess>::deallocateBoxForExistentialIn(*((void *)this + 1), v22);
  *((void *)this + 2) = v15;
  if (v10) {
    *((void *)this + 2) = swift_projectBox(*v15);
  }
  *a2 = v8;
  *a3 = 0LL;
  *((void *)&v21 + 1) = v9;
  __int128 v16 = swift::TargetMetadata<swift::InProcess>::allocateBoxForExistentialIn(v9, &v20);
  (*(void (**)(void *, void))(*(void *)(*((void *)&v21 + 1) - 8LL) + 16LL))( v16,  *((void *)this + 2));
  swift_release((uint64_t)v13);
  double result = *(double *)&v20;
  __int128 v18 = v21;
  *a4 = v20;
  a4[1] = v18;
  return result;
}

uint64_t anonymous namespace'::EnumImpl::enumCaseName(_anonymous_namespace_::EnumImpl *this)
{
  uint64_t v1 = *((void *)this + 1);
  uint64_t v2 = *(void *)(v1 + 8);
  uint64_t v3 = *(int *)(v2 + 16);
  uint64_t v4 = -16 - v2;
  if ((_DWORD)v3) {
    BOOL v5 = v3 == v4;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    return 0LL;
  }
  int v7 = (const char *)(*(uint64_t (**)(void))(*(void *)(v1 - 8) + 88LL))(*((void *)this + 2));
  return v9[0];
}

uint64_t anonymous namespace'::ClassImpl::displayStyle(_anonymous_namespace_::ClassImpl *this)
{
  return 99LL;
}

id anonymous namespace'::ClassImpl::quickLookObject(id **this)
{
  return _quickLookObjectForPointer(this[2]);
}

uint64_t anonymous namespace'::ClassImpl::count(_anonymous_namespace_::ClassImpl *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 1) + 64LL);
  uint64_t v2 = *(int *)(v1 + 16);
  if ((_DWORD)v2) {
    BOOL v3 = v2 == -16 - v1;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3) {
    return 0LL;
  }
  else {
    return *(unsigned int *)(v1 + 36);
  }
}

ptrdiff_t anonymous namespace'::ClassImpl::childOffset( _anonymous_namespace_::ClassImpl *this, unint64_t a2)
{
  if ((a2 & 0x8000000000000000LL) != 0
    || (uint64_t v3 = *((void *)this + 1), *(unsigned int *)(*(void *)(v3 + 64) + 36LL) < a2))
  {
    swift_reflectionMirror_recursiveChildOffset_cold_2();
  }

  if (swift::usesNativeSwiftReferenceCounting(*((void *)this + 1)))
  {
    uint64_t v7 = *(void *)(v3 + 64);
    if ((*(_BYTE *)(v7 + 3) & 0x20) != 0)
    {
      swift::getResilientMetadataBounds(*(void *)(v3 + 64), v4, v5, v6);
      unsigned int v8 = *(_DWORD *)(v7 + 40) + (v12 >> 3);
    }

    else
    {
      unsigned int v8 = *(_DWORD *)(v7 + 40);
    }

    if (v8) {
      uint64_t v13 = v3 + 8LL * v8;
    }
    else {
      uint64_t v13 = 0LL;
    }
    return *(void *)(v13 + 8 * a2);
  }

  else
  {
    uint64_t v9 = class_copyIvarList((Class)v3, 0LL);
    ptrdiff_t Offset = ivar_getOffset(v9[a2]);
    free(v9);
    return Offset;
  }

uint64_t anonymous namespace'::ClassImpl::childMetadata( _anonymous_namespace_::ClassImpl *this, const char *a2, const char **a3, void (**a4)(const char *))
{
  uint64_t result = v7[2];
  *a3 = (const char *)v7[0];
  *a4 = 0LL;
  return result;
}

double anonymous namespace'::ClassImpl::subscript@<D0>( _anonymous_namespace_::ClassImpl *this@<X0>, const char **a2@<X2>, void (**a3)(const char *)@<X3>, uint64_t a4@<X1>, _OWORD *a5@<X8>)
{
  uint64_t v8 = (*(uint64_t (**)(_anonymous_namespace_::ClassImpl *, uint64_t, const char **, void (**)(const char *)))(*(void *)this + 24LL))( this,  a4,  a2,  a3);
  int v10 = v9;
  uint64_t v11 = **((void **)this + 2);
  unint64_t v12 = (uint64_t *)(v11
                  + (*(uint64_t (**)(_anonymous_namespace_::ClassImpl *, uint64_t))(*(void *)this + 16LL))( this,  a4));
}

uint64_t anonymous namespace'::ClassImpl::recursiveCount(_anonymous_namespace_::ClassImpl *this)
{
  uint64_t v2 = *((void *)this + 1);
  uint64_t v3 = *(void *)(v2 + 64);
  uint64_t v4 = *(int *)(v3 + 20);
  uint64_t v5 = -20 - v3;
  if ((_DWORD)v4) {
    BOOL v6 = v4 == v5;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6) {
    return (*(uint64_t (**)(_anonymous_namespace_::ClassImpl *))(*(void *)this + 8LL))(this);
  }
  uint64_t v7 = *(void *)(v2 + 8);
  if (!v7 || (*(_BYTE *)(v7 + 32) & 2) == 0) {
    return (*(uint64_t (**)(_anonymous_namespace_::ClassImpl *))(*(void *)this + 8LL))(this);
  }
  v10[0] = off_189B8E410;
  v10[1] = v7;
  v10[2] = 0LL;
  return (*(uint64_t (**)(_anonymous_namespace_::ClassImpl *))(*(void *)this + 8LL))(this) + v9;
}

uint64_t anonymous namespace'::ClassImpl::recursiveChildOffset( _anonymous_namespace_::ClassImpl *this, uint64_t a2)
{
  uint64_t v4 = *((void *)this + 1);
  uint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = *(int *)(v5 + 20);
  uint64_t v7 = -20 - v5;
  if ((_DWORD)v6) {
    BOOL v8 = v6 == v7;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    uint64_t v9 = *(void *)(v4 + 8);
    if (v9)
    {
      if ((*(_BYTE *)(v9 + 32) & 2) != 0)
      {
        v12[0] = off_189B8E410;
        v12[1] = v9;
        v12[2] = 0LL;
        if (a2 < v10) {
        a2 -= v10;
        }
      }
    }
  }

  return (*(uint64_t (**)(_anonymous_namespace_::ClassImpl *, uint64_t))(*(void *)this + 16LL))(this, a2);
}

uint64_t anonymous namespace'::ClassImpl::recursiveChildMetadata( _anonymous_namespace_::ClassImpl *this, uint64_t a2, const char **a3, void (**a4)(const char *))
{
  uint64_t v8 = *((void *)this + 1);
  uint64_t v9 = *(void *)(v8 + 64);
  uint64_t v10 = *(int *)(v9 + 20);
  uint64_t v11 = -20 - v9;
  if ((_DWORD)v10) {
    BOOL v12 = v10 == v11;
  }
  else {
    BOOL v12 = 1;
  }
  if (!v12)
  {
    uint64_t v13 = *(void *)(v8 + 8);
    if (v13)
    {
      if ((*(_BYTE *)(v13 + 32) & 2) != 0)
      {
        v16[0] = off_189B8E410;
        v16[1] = v13;
        v16[2] = 0LL;
        if (a2 < v14) {
        a2 -= v14;
        }
      }
    }
  }

  return (*(uint64_t (**)(_anonymous_namespace_::ClassImpl *, uint64_t, const char **, void (**)(const char *)))(*(void *)this + 24LL))( this,  a2,  a3,  a4);
}

uint64_t _ZZN12_GLOBAL__N_14callIZ45swift_reflectionMirror_recursiveChildMetadataE3__0EEDTclfp2_LDnEEEPN5swift11OpaqueValueEPKNS3_14TargetMetadataINS3_9InProcessEEESA_RKT_ENKUlvE_clEv( Class **a1, const void *a2)
{
  uint64_t v3 = (uint64_t *)**a1;
  if (!v3)
  {
    for (Class i = swift::_swift_getClass((unint64_t)(*a1[1])->isa, a2); ((uint64_t)i[4].isa & 2) != 0; Class i = i[1].isa)
    {
      if (i[8].isa) {
        break;
      }
    }

    **a1 = i;
    uint64_t v3 = (uint64_t *)**a1;
  }

  unint64_t v5 = *v3;
  v11[0] = off_189B8E410;
  uint64_t v6 = (uint64_t *)a1[2];
  v11[1] = *(void *)*v6;
  void v11[2] = *(void *)v6[1];
  uint64_t v7 = v6[2];
  uint64_t v10 = **(void **)(v7 + 8);
  *(_BYTE *)(v10 + 16) = (*(void *)&v9 & 0xFF0000LL) == 0;
  *(_BYTE *)(v10 + 17) = (v9 & 0xFF00) != 0LL;
  return result;
}

double _ZZN12_GLOBAL__N_14callIZ32swift_reflectionMirror_subscriptE3__0EEDTclfp2_LDnEEEPN5swift11OpaqueValueEPKNS3_14TargetMetadataINS3_9InProcessEEESA_RKT_ENKUlvE_clEv@<D0>( Class **a1@<X0>, const void *a2@<X1>, _OWORD *a3@<X8>)
{
  unint64_t v5 = (uint64_t *)**a1;
  if (!v5)
  {
    for (Class i = swift::_swift_getClass((unint64_t)(*a1[1])->isa, a2); ((uint64_t)i[4].isa & 2) != 0; Class i = i[1].isa)
    {
      if (i[8].isa) {
        break;
      }
    }

    **a1 = i;
    unint64_t v5 = (uint64_t *)**a1;
  }

  unint64_t v7 = *v5;
  uint64_t v8 = (uint64_t *)a1[2];
  int v9 = (uint64_t **)v8[1];
  unint64_t v10 = *(void *)*v8;
  v21[0] = off_189B8E410;
  v21[1] = v10;
  uint64_t v22 = *v9;
  uint64_t v11 = v22;
  uint64_t v12 = v8[2];
  uint64_t v13 = **(const char ***)v12;
  uint64_t v14 = **(void ***)(v12 + 8);
  __int128 v15 = **(void ***)(v12 + 16);
  uint64_t v16 = v23[2];
  int v17 = v24 | (v25 << 16);
  *uint64_t v14 = v23[0];
  *__int128 v15 = 0LL;
  uint64_t v18 = *v11;
}

uint64_t swift_dtoa_optimal_binary16_p(_WORD *a1, _BYTE *a2, unint64_t a3)
{
  if (!a3) {
    return 0LL;
  }
  unsigned int v5 = (unsigned __int16)*a1;
  int v6 = (v5 >> 10) & 0x1F;
  if (v6)
  {
    if (v6 == 31)
    {
      if ((v5 & 0x3FF) != 0)
      {
        else {
          snprintf(__str, 0x40uLL, "%s%snan");
        }
        size_t v37 = strlen(__str);
        if (v37 < a3)
        {
          size_t v7 = v37;
          memcpy(a2, __str, v37 + 1);
          return v7;
        }

size_t swift_dtoa_optimal_float(char *__dst, unint64_t a2, float a3)
{
  float v4 = a3;
  return swift_dtoa_optimal_binary32_p((unsigned int *)&v4, __dst, a2);
}

size_t swift_dtoa_optimal_binary32_p(unsigned int *a1, char *__dst, unint64_t a3)
{
  if (a3)
  {
    unsigned int v5 = *a1;
    int v6 = *a1 & 0x7FFFFF;
    if ((*a1 >> 23))
    {
      if ((*a1 >> 23) == 255)
      {
        if (v6)
        {
          if ((v5 & 0x1FFFFF) != 0) {
            snprintf(__str, 0x40uLL, "%s%snan(0x%llx)");
          }
          else {
            snprintf(__str, 0x40uLL, "%s%snan");
          }
          size_t v45 = strlen(__str);
          if (v45 < a3)
          {
            size_t v7 = v45;
            memcpy(__dst, __str, v45 + 1);
            return v7;
          }

size_t swift_dtoa_optimal_binary64_p(uint64_t *a1, char *__dst, unint64_t a3)
{
  if (a3)
  {
    uint64_t v5 = *a1;
    uint64_t v6 = ((unint64_t)*a1 >> 52) & 0x7FF;
    uint64_t v7 = *a1 & 0xFFFFFFFFFFFFFLL;
    if ((_DWORD)v6)
    {
      if ((_DWORD)v6 == 2047)
      {
        if (v7)
        {
          if ((v5 & 0x3FFFFFFFFFFFFLL) != 0) {
            snprintf(__str, 0x40uLL, "%s%snan(0x%llx)");
          }
          else {
            snprintf(__str, 0x40uLL, "%s%snan");
          }
          size_t v94 = strlen(__str);
          if (v94 < a3)
          {
            size_t v8 = v94;
            memcpy(__dst, __str, v94 + 1);
            return v8;
          }

size_t swift_dtoa_optimal_double(char *__dst, unint64_t a2, double a3)
{
  double v4 = a3;
  return swift_dtoa_optimal_binary64_p((uint64_t *)&v4, __dst, a2);
}

void *swift::runtime::SwiftTLSContext::get(swift::runtime::SwiftTLSContext *this)
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t result = *(void **)(StatusReg + 800);
  if (!result)
  {
    uint64_t v4 = 100LL;
    context[0] = &v4;
    context[1] = swift::runtime::SwiftTLSContext::get(void)::$_0::__invoke;
    if (swift::runtime::SwiftTLSContext::get(void)::token != -1) {
      dispatch_once_f( &swift::runtime::SwiftTLSContext::get(void)::token,  context,  (dispatch_function_t)swift::tls_init_once(long &,unsigned long,void (*)(void *))::{lambda(void *)#1}::__invoke);
    }
    uint64_t result = swift_slowAlloc(0x10uLL, 7uLL);
    *uint64_t result = 0LL;
    result[1] = 0LL;
    *(void *)(StatusReg + 800) = result;
  }

  return result;
}

uint64_t swift::tls_init_once(long &,unsigned long,void (*)(void *))::{lambda(void *)#1}::__invoke()
{
  uint64_t result = pthread_key_init_np();
  if ((_DWORD)result) {
    swift::threading::fatal((swift::threading *)"tls_init_once() failed to set destructor", v1, v2, v3);
  }
  return result;
}

void swift::runtime::SwiftTLSContext::get(void)::$_0::__invoke(void *a1)
{
  if (a1) {
    swift_slowDealloc(a1);
  }
}

void swift::threading::fatal(swift::threading *this, const char *a2, uint64_t a3, char *a4, ...)
{
}

os_log_t swift::runtime::trace::setupLogs(swift::runtime::trace *this, void *a2)
{
  uint64_t v2 = (const char *)*MEMORY[0x1895F8960];
  if (!*MEMORY[0x1895F8960]
    || (os_log_t result = (os_log_t)strcmp((const char *)*MEMORY[0x1895F8960], "logd"), (_DWORD)result)
    && (os_log_t result = (os_log_t)strcmp(v2, "diagnosticd"), (_DWORD)result)
    && (os_log_t result = (os_log_t)strcmp(v2, "notifyd"), (_DWORD)result)
    && (os_log_t result = (os_log_t)strcmp(v2, "xpcproxy"), (_DWORD)result)
    && (os_log_t result = (os_log_t)strcmp(v2, "logd_helper"), (_DWORD)result))
  {
    swift::runtime::trace::TracingEnabled = 1;
    os_log_t result = os_log_create("com.apple.swift", "SectionScan");
    swift::runtime::trace::ScanLog = (uint64_t)result;
  }

  else
  {
    swift::runtime::trace::TracingEnabled = 0;
  }

  return result;
}

void swift::addImageAccessibleFunctionsBlockCallbackUnsafe(swift *this, unint64_t a2, char *a3)
{
  uint64_t v5 = qword_18C575960;
  if (qword_18C575960) {
    unint64_t v6 = *(void *)qword_18C575960;
  }
  else {
    unint64_t v6 = 0LL;
  }
  uint64_t v7 = (unint64_t *)qword_18C575960;
  if (v6 >= qword_18C575950)
  {
    if (2 * v6 <= 0x10) {
      unint64_t v8 = 16LL;
    }
    else {
      unint64_t v8 = 2 * v6;
    }
    unint64_t v9 = (unint64_t *)malloc((32 * (v8 >> 1)) | 8);
    if (!v9) {
      swift::hashable_support::findHashableBaseTypeOfHashableType();
    }
    uint64_t v7 = v9;
    *unint64_t v9 = 0LL;
    if (v5)
    {
      if (v6)
      {
        int v10 = v9 + 1;
        uint64_t v11 = (__int128 *)(v5 + 8);
        unint64_t v12 = v6;
        do
        {
          __int128 v13 = *v11++;
          *v10++ = v13;
          --v12;
        }

        while (v12);
      }

      atomic_store(v6, v9);
      unint64_t v14 = malloc(0x10uLL);
      *unint64_t v14 = qword_18C575970;
      v14[1] = v5;
      qword_18C575970 = (uint64_t)v14;
    }

    qword_18C575950 = v8;
    atomic_store((unint64_t)v7, (unint64_t *)&qword_18C575960);
  }

  unint64_t v15 = &v7[2 * v6];
  v15[1] = a2;
  v15[2] = (unint64_t)&a3[a2];
  atomic_store(v6 + 1, v7);
  __dmb(0xBu);
  if (!qword_18C575958)
  {
    unint64_t v16 = (void *)qword_18C575970;
    if (qword_18C575970)
    {
      do
      {
        unsigned int v18 = (void *)*v16;
        unint64_t v17 = (unint64_t *)v16[1];
        unint64_t v19 = -1LL;
        do
        {
          unint64_t v20 = atomic_load(v17);
          ++v19;
        }

        while (v19 < v20);
        free(v17);
        free(v16);
        unint64_t v16 = v18;
      }

      while (v18);
    }

    qword_18C575970 = 0LL;
  }

  os_unfair_lock_unlock((os_unfair_lock_t)&unk_18C575968);
}

uint64_t swift::Lazy<anonymous namespace'::AccessibleFunctionsState>::defaultInitCallback(uint64_t a1)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + 8) = 0LL;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 72) = 0LL;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 64) = 0;
  return swift::initializeAccessibleFunctionsLookup((swift *)a1);
}

int *swift_findAccessibleFunction(const void *a1, size_t a2)
{
  if (qword_18C575978 != -1) {
  unint64_t v62 = a1;
  }
  size_t v63 = a2;
  do
  do
  {
    unint64_t v5 = atomic_load(&qword_18C575930);
    unint64_t v6 = atomic_load((unint64_t *)&qword_18C575938);
    unsigned int v7 = atomic_load((unsigned int *)&dword_18C57592C);
    unint64_t v8 = atomic_load(&qword_18C575930);
  }

  while (v5 != v8);
  if (v5) {
    BOOL v9 = v6 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9 && v7 != 0)
  {
    if (v11)
    {
      unint64_t v12 = *(int **)(v11 + 16);
      do
      return v12;
    }
  }

  do
  unint64_t v15 = v62;
  size_t v16 = v63;
  if (swift::runtime::trace::LogsToken != -1) {
    dispatch_once_f(&swift::runtime::trace::LogsToken, 0LL, (dispatch_function_t)swift::runtime::trace::setupLogs);
  }
  if (swift::runtime::trace::TracingEnabled)
  {
    os_signpost_id_t v18 = os_signpost_id_generate((os_log_t)swift::runtime::trace::ScanLog);
    if (v18 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      unint64_t v19 = (os_log_s *)swift::runtime::trace::ScanLog;
      if (os_signpost_enabled((os_log_t)swift::runtime::trace::ScanLog))
      {
        *(_DWORD *)buf = 68157954;
        *(_DWORD *)&uint8_t buf[4] = v16;
        *(_WORD *)&buf[8] = 2080;
        *(void *)&buf[10] = v15;
        _os_signpost_emit_with_name_impl( &swift_runtimeSupportsNoncopyableTypes,  v19,  OS_SIGNPOST_INTERVAL_BEGIN,  v18,  "section_scan",  "accessible function scan for '%.*s'",  buf,  0x12u);
      }
    }
  }

  else
  {
LABEL_25:
    os_signpost_id_t v18 = 0LL;
  }

  do
    unint64_t v20 = __ldaxr((unint64_t *)&qword_18C575958);
  while (__stxr(v20 + 1, (unint64_t *)&qword_18C575958));
  if (qword_18C575960)
  {
    unint64_t v21 = atomic_load((unint64_t *)qword_18C575960);
    if (v21)
    {
      uint64_t v22 = (int **)(qword_18C575960 + 8);
      uint64_t v23 = qword_18C575960 + 8 + 16 * v21;
      while (1)
      {
        int v25 = *v22;
        BOOL v24 = v22[1];
        if (*v22 != v24) {
          break;
        }
LABEL_30:
        v22 += 2;
      }

      unint64_t v12 = *v22;
      while (1)
      {
        SymbolicMangledNameStringRef = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef( (_BYTE *)v25 + *v12,  v17);
        v12 += 5;
        v25 += 5;
        if (v12 == v24) {
          goto LABEL_30;
        }
      }

      if (v18 - 1 < 0xFFFFFFFFFFFFFFFELL)
      {
        unint64_t v27 = (os_log_s *)swift::runtime::trace::ScanLog;
        if (os_signpost_enabled((os_log_t)swift::runtime::trace::ScanLog))
        {
          *(_DWORD *)buf = 134217984;
          *(void *)&uint8_t buf[4] = v25;
          _os_signpost_emit_with_name_impl( &swift_runtimeSupportsNoncopyableTypes,  v27,  OS_SIGNPOST_INTERVAL_END,  v18,  "section_scan",  "result=%p",  buf,  0xCu);
        }
      }

      do
        unint64_t v28 = __ldxr((unint64_t *)&qword_18C575958);
      while (__stlxr(v28 - 1, (unint64_t *)&qword_18C575958));
      unint64_t v29 = (void *)v62;
      *(void *)buf = v62;
      *(void *)&buf[8] = v63;
      __std::string::size_type size = v63;
      os_unfair_lock_lock((os_unfair_lock_t)&unk_18C575940);
      char v30 = qword_18C575938;
      BOOL v31 = (qword_18C575938 & 3) == 0;
      if ((qword_18C575938 & 0xFFFFFFFFFFFFFFFCLL) == 0) {
        BOOL v31 = 1;
      }
      BOOL v59 = v31;
      unint64_t v60 = qword_18C575938 & 0xFFFFFFFFFFFFFFFCLL;
      if (v31) {
        int v32 = 4;
      }
      else {
        int v32 = *(unsigned __int8 *)(qword_18C575938 & 0xFFFFFFFFFFFFFFFCLL);
      }
      size_t v35 = dword_18C57592C;
      unint64_t v36 = (_DWORD *)qword_18C575930;
      if (v37)
      {
        __dmb(0xBu);
        {
          unint64_t v38 = (void **)qword_18C575948;
          if (qword_18C575948)
          {
            do
            {
              unint64_t v39 = (void **)*v38;
              free(v38[1]);
              free(v38);
              unint64_t v38 = v39;
            }

            while (v39);
          }

          qword_18C575948 = 0LL;
        }

        os_unfair_lock_unlock((os_unfair_lock_t)&unk_18C575940);
        return v12;
      }

      unint64_t v57 = v29;
      unint64_t v58 = v36;
      __int128 __src = v36 + 2;
      unsigned int v56 = v35 + 1;
      if ((1LL << v32) / ((1LL << v32) - (unint64_t)(v35 + 1)) < 4)
      {
        LOBYTE(v44) = v30;
        uint64_t v45 = v58;
        if (v58) {
          goto LABEL_75;
        }
      }

      else
      {
        unsigned int v40 = (v32 + 1);
        if (v40 >= 0x11) {
          unsigned int v41 = 4;
        }
        else {
          unsigned int v41 = 2;
        }
        if (v40 < 9) {
          size_t v42 = 1LL;
        }
        else {
          size_t v42 = v41;
        }
        unint64_t v43 = (unint64_t)calloc(2LL << v32, v42);
        if (!v43) {
          swift::hashable_support::findHashableBaseTypeOfHashableType();
        }
        if ((_DWORD)v42 != 1)
        {
          if ((_DWORD)v42 == 4) {
            size_t v42 = 3LL;
          }
          else {
            size_t v42 = 2LL;
          }
        }

        unint64_t v44 = v42 | v43;
        *(_BYTE *)unint64_t v43 = v32 + 1;
        if (v32) {
          __asm { BR              X8 }
        }

        atomic_store(v44, (unint64_t *)&qword_18C575938);
        if (!v59)
        {
          unint64_t v46 = malloc(0x10uLL);
          *unint64_t v46 = qword_18C575948;
          v46[1] = v60;
          qword_18C575948 = (uint64_t)v46;
        }

        uint64_t v45 = v58;
        if (v58)
        {
LABEL_75:
          unint64_t v47 = (unint64_t)v45;
        }
      }

      unint64_t v48 = v35 + (v35 >> 2);
      size_t v49 = v35;
      if (v48 <= v35 + 1) {
        unint64_t v48 = v35 + 1;
      }
      size_t v35 = malloc_good_size(24 * v48 + 8);
      unint64_t v50 = malloc(v35);
      if (!v50) {
        swift::hashable_support::findHashableBaseTypeOfHashableType();
      }
      unint64_t v47 = (unint64_t)v50;
      *unint64_t v50 = (v35 - 8) / 0x18;
      LODWORD(v35) = v49;
      if (v45)
      {
        memcpy(v50 + 2, __src, 24 * v49);
        uint64_t v51 = malloc(0x10uLL);
        void *v51 = qword_18C575948;
        v51[1] = v45;
        qword_18C575948 = (uint64_t)v51;
      }

      atomic_store(v47, &qword_18C575930);
LABEL_82:
      unint64_t v52 = (void *)(v47 + 24LL * v35);
      void v52[3] = v12;
      unint64_t v53 = malloc(__size);
      memcpy(v53, v57, __size);
      v52[1] = v53;
      v52[2] = __size;
      atomic_store(v56, (unsigned int *)&dword_18C57592C);
      __asm { BR              X11 }
    }
  }

  do
LABEL_45:
    unint64_t v33 = __ldxr((unint64_t *)&qword_18C575958);
  while (__stlxr(v33 - 1, (unint64_t *)&qword_18C575958));
  if (v18 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v34 = (os_log_s *)swift::runtime::trace::ScanLog;
    if (os_signpost_enabled((os_log_t)swift::runtime::trace::ScanLog))
    {
      *(_DWORD *)buf = 134217984;
      *(void *)&uint8_t buf[4] = 0LL;
      _os_signpost_emit_with_name_impl( &swift_runtimeSupportsNoncopyableTypes,  v34,  OS_SIGNPOST_INTERVAL_END,  v18,  "section_scan",  "result=%p",  buf,  0xCu);
    }
  }

  return 0LL;
}

void swift::ConcurrentReadableHashMap<anonymous namespace'::AccessibleFunctionCacheEntry,swift::LazyMutex>::find<__swift::__runtime::llvm::StringRef>( uint64_t a1, char a2)
{
  __asm { BR              X8 }

uint64_t sub_181794BA4()
{
  uint64_t v6 = (v3 >> (4 * v5)) & 0xF;
  if (!(_DWORD)v6) {
    return 0LL;
  }
  unint64_t v7 = (v6 - 1);
  if (v7 >= v2
    || (uint64_t v8 = v1 + v7 * (unint64_t)v0, v9 = *(void *)(v4 + 8), v9 != *(void *)(v8 + 8))
    || v9 && memcmp(*(const void **)v4, *(const void **)v8, v9))
  {
    JUMPOUT(0x181794B84LL);
  }

  return v8;
}

BOOL _swift_backtrace_isThunkFunction(char *a1)
{
  if (a1) {
    size_t v2 = strlen(a1);
  }
  else {
    size_t v2 = 0LL;
  }
  BOOL isThunkSymbol = swift::Demangle::__runtime::Context::isThunkSymbol(&v5, a1, v2);
  swift::Demangle::__runtime::Context::~Context((swift::Demangle::__runtime::Context *)&v5);
  return isThunkSymbol;
}

char *_swift_backtrace_demangle(char *a1, unint64_t a2, void *a3, uint64_t *a4)
{
  uint64_t v5 = a3;
  unint64_t v7 = a1;
  if (a3 && !a4) {
    return 0LL;
  }
  if (!swift::Demangle::__runtime::isSwiftSymbol(a1, a2))
  {
    if (a2 >= 2 && *(_WORD *)v7 == 23135)
    {
      LODWORD(v20) = 0;
      uint64_t v11 = __cxa_demangle(v7, 0LL, (size_t *)outlen, (int *)&v20);
      if (v11)
      {
        unsigned int v13 = v11;
        if (a4)
        {
          uint64_t v14 = *a4;
          *a4 = *(void *)outlen;
          unint64_t v12 = v14 - 1;
        }

        if (!v5) {
          return v11;
        }
        if (*(void *)outlen - 1LL >= v12) {
          size_t v19 = v12;
        }
        else {
          size_t v19 = *(void *)outlen - 1LL;
        }
        memcpy(v5, v11, v19);
        *((_BYTE *)v5 + v19) = 0;
        free(v13);
        return (char *)v5;
      }
    }

    return 0LL;
  }

  char v24 = 1;
  char v26 = 1;
  __int16 v27 = 0;
  char v28 = 1;
  uint64_t v29 = 0LL;
  uint64_t v30 = 0LL;
  v31[0] = &unk_189B8B0E8;
  v31[1] = swift::Demangle::__runtime::genericParameterName;
  int v32 = v31;
  *(_WORD *)outlen = 257;
  *(_DWORD *)&outlen[2] = 0;
  *(_DWORD *)&outlen[5] = 0;
  uint64_t v25 = 0x101000001010101LL;
  swift::Demangle::__runtime::demangleSymbolAsString(v7, a2, (uint64_t)outlen, &v20);
  if (a4)
  {
    uint64_t v8 = *a4;
    size_t v9 = (char *)v22;
    if ((v22 & 0x80u) != 0) {
      size_t v9 = v21;
    }
    *a4 = (uint64_t)(v9 + 1);
    unint64_t v7 = (char *)(v8 - 1);
    size_t v10 = v22;
    if (v5)
    {
LABEL_8:
      if ((v10 & 0x80) != 0) {
        goto LABEL_23;
      }
LABEL_16:
      memcpy(v5, &v20, v10);
      *((_BYTE *)v5 + v10) = 0;
      goto LABEL_26;
    }
  }

  else
  {
    size_t v10 = v22;
    if (v5) {
      goto LABEL_8;
    }
  }

  if ((v10 & 0x80) == 0)
  {
    uint64_t v5 = malloc(v10 + 1);
    unint64_t v7 = (char *)v10;
    goto LABEL_16;
  }

  unint64_t v7 = v21;
  uint64_t v5 = malloc((size_t)(v21 + 1));
LABEL_23:
  unint64_t v15 = v20;
  if (v21 < v7) {
    unint64_t v7 = v21;
  }
  memcpy(v5, v20, (size_t)v7);
  v7[(void)v5] = 0;
  operator delete(v15);
LABEL_26:
  size_t v16 = v32;
  if (v32 == v31)
  {
    uint64_t v17 = 4LL;
    size_t v16 = v31;
    goto LABEL_30;
  }

  if (v32)
  {
    uint64_t v17 = 5LL;
LABEL_30:
    (*(void (**)(void))(*v16 + 8 * v17))();
  }

  return (char *)v5;
}

void anonymous namespace'::_swift_processBacktracingSetting( unsigned __int8 *a1, uint64_t a2, const char *a3, unint64_t *a4)
{
  unsigned __int8 v22 = a1;
  uint64_t v23 = a2;
  *(void *)&__int128 v21 = a3;
  *((void *)&v21 + 1) = a4;
  if (a2 == 6)
  {
    if (!__swift::__runtime::llvm::StringRef::compare_insensitive(&v22, "enable", 6uLL))
    {
      return;
    }

    a2 = v23;
  }

  if (a2 == 8)
  {
    if (!__swift::__runtime::llvm::StringRef::compare_insensitive(&v22, "demangle", 8uLL))
    {
      return;
    }

    a2 = v23;
  }

  if (a2 == 11)
  {
    if (!__swift::__runtime::llvm::StringRef::compare_insensitive(&v22, "interactive", 0xBuLL))
    {
      return;
    }

    a2 = v23;
  }

  if (a2 == 5)
  {
    if (!__swift::__runtime::llvm::StringRef::compare_insensitive(&v22, "color", 5uLL))
    {
      return;
    }

    a2 = v23;
  }

  if (a2 == 7)
  {
    if (__swift::__runtime::llvm::StringRef::compare_insensitive(&v22, "timeout", 7uLL))
    {
      a2 = v23;
      goto LABEL_16;
    }

    __int128 v20 = v21;
    if (*((void *)&v21 + 1) == 4LL
      && !__swift::__runtime::llvm::StringRef::compare_insensitive((unsigned __int8 **)&v21, "none", 4uLL))
    {
      dword_18C471474 = 0;
      return;
    }

    if ((__swift::__runtime::llvm::consumeSignedInteger( (__swift::__runtime::llvm *)&v20,  0LL,  (unint64_t *)&v18,  a4) & 1) != 0 || (int v6 = (int)v18, v18 != (unsigned __int8 *)(int)v18))
    {
      swift::warning(0LL, "swift runtime: bad backtracing timeout '%.*s'\n", v4, v5, *((void *)&v21 + 1), (void)v21);
      return;
    }

    os_signpost_id_t v18 = (unsigned __int8 *)__swift::__runtime::llvm::StringRef::trim(&v20, " \t\n\v\f\r", 6LL);
    uint64_t v19 = v7;
    if (v7)
    {
      if (v7 == 1)
      {
        uint64_t v7 = v19;
      }

      if (v7 != 7) {
        goto LABEL_65;
      }
      if (__swift::__runtime::llvm::StringRef::compare_insensitive(&v18, "seconds", 7uLL))
      {
        uint64_t v7 = v19;
LABEL_65:
        if (v7 == 1)
        {
          uint64_t v7 = v19;
        }

        if (v7 != 7) {
          goto LABEL_71;
        }
        if (__swift::__runtime::llvm::StringRef::compare_insensitive(&v18, "minutes", 7uLL))
        {
          uint64_t v7 = v19;
LABEL_71:
          if (v7 == 1)
          {
            if (!__swift::__runtime::llvm::StringRef::compare_insensitive(&v18, "h", 1uLL))
            {
LABEL_76:
              v6 *= 3600;
              goto LABEL_169;
            }

            uint64_t v7 = v19;
          }

          goto LABEL_76;
        }

uint64_t anonymous namespace'::parseOnOffTty(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v4 = a1;
  uint64_t v5 = a2;
  if (a2 == 2)
  {
    a2 = v5;
  }

  if (a2 == 4)
  {
    a2 = v5;
  }

  if (a2 != 3) {
    goto LABEL_10;
  }
  a2 = v5;
LABEL_10:
  if (a2 == 1)
  {
    uint64_t v2 = 1LL;
    a2 = v5;
    if (v5 == 1)
    {
      uint64_t v2 = 1LL;
      a2 = v5;
      if (v5 == 1)
      {
        uint64_t v2 = 1LL;
        a2 = v5;
      }
    }
  }

  if (a2 == 3)
  {
    a2 = v5;
  }

  if (a2 == 4) {
    return 2
  }
         * (__swift::__runtime::llvm::StringRef::compare_insensitive(&v4, "auto", 4uLL) == 0);
  else {
    return 0LL;
  }
}

BOOL anonymous namespace'::parseBoolean(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v4 = a1;
  uint64_t v5 = a2;
  if (a2 == 2)
  {
    a2 = v5;
  }

  if (a2 == 4)
  {
    a2 = v5;
  }

  if (a2 != 3) {
    goto LABEL_10;
  }
  a2 = v5;
LABEL_10:
  if (a2 != 1) {
    return 0LL;
  }
  uint64_t v2 = 1LL;
  if (__swift::__runtime::llvm::StringRef::compare_insensitive(&v4, "y", 1uLL))
  {
    if (v5 == 1)
    {
      uint64_t v2 = 1LL;
      if (v5 == 1) {
        return __swift::__runtime::llvm::StringRef::compare_insensitive(&v4, "1", 1uLL) == 0;
      }
    }

    return 0LL;
  }

  return v2;
}

uint64_t __swift::__runtime::llvm::StringRef::trim(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t first_not_of = __swift::__runtime::llvm::StringRef::find_first_not_of(a1, a2, a3, 0LL);
  unint64_t v7 = a1[1];
  if (first_not_of >= v7) {
    unint64_t v8 = a1[1];
  }
  else {
    unint64_t v8 = first_not_of;
  }
  v10[0] = *a1 + v8;
  v10[1] = v7 - v8;
  __swift::__runtime::llvm::StringRef::find_last_not_of(v10, a2, a3, 0xFFFFFFFFFFFFFFFFLL);
  return v10[0];
}

uint64_t anonymous namespace'::parseSymbolication(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v4 = a1;
  uint64_t v5 = a2;
  if (a2 != 2)
  {
LABEL_4:
    if (a2 == 4)
    {
      a2 = v5;
    }

    if (a2 == 3)
    {
      a2 = v5;
    }

    if (a2 == 1)
    {
      a2 = v5;
      if (v5 == 1)
      {
        a2 = v5;
        if (v5 == 1)
        {
          a2 = v5;
        }
      }
    }

    if (a2 != 4) {
      return 0LL;
    }
    if (__swift::__runtime::llvm::StringRef::compare_insensitive(&v4, "full", 4uLL))
    {
      if (v5 == 4) {
        return __swift::__runtime::llvm::StringRef::compare_insensitive(&v4, "fast", 4uLL) == 0;
      }
      return 0LL;
    }

    return 2LL;
  }

  uint64_t v2 = 2LL;
  if (__swift::__runtime::llvm::StringRef::compare_insensitive(&v4, "on", 2uLL))
  {
    a2 = v5;
    goto LABEL_4;
  }

  return v2;
}

void _GLOBAL__sub_I_Backtrace_cpp()
{
  if (swift::runtime::environment::initializeToken != -1) {
    dispatch_once_f( &swift::runtime::environment::initializeToken,  0LL,  (dispatch_function_t)swift::runtime::environment::initialize);
  }
  uint64_t v2 = (unsigned __int8 *)swift::runtime::environment::SWIFT_BACKTRACE_variable;
  if (issetugid()) {
    dword_18C471464 = 0;
  }
  if ((_os_feature_enabled_simple_impl() & 1) == 0) {
    dword_18C471464 = 0;
  }
  if (!v2) {
    goto LABEL_25;
  }
  int v5 = *v2;
  if (!*v2) {
    goto LABEL_25;
  }
  int v6 = (const char *)v2;
  while (2)
  {
    char v7 = 1;
LABEL_11:
    for (Class i = v6++; ; ++i)
    {
      int v9 = v5;
      if ((v7 & 1) != 0)
      {
        int v5 = *(unsigned __int8 *)v6;
        if (v9 == 61)
        {
          char v7 = 0;
          uint64_t v1 = v6 - 1;
          unsigned int v0 = v6;
          if (*v6) {
            goto LABEL_11;
          }
          goto LABEL_24;
        }

        if (!*v6) {
          goto LABEL_25;
        }
        goto LABEL_12;
      }

      if (v5 == 44) {
        break;
      }
      int v5 = *(unsigned __int8 *)v6;
      if (!*v6)
      {
        int v6 = v0;
LABEL_24:
        goto LABEL_25;
      }

unint64_t swift::SwiftError::getType(swift::SwiftError *this, const void *a2)
{
  Class Class = swift::_swift_getClass((unint64_t)this, a2);
  if (qword_18C486F48 != -1) {
    dispatch_once_f( &qword_18C486F48,  &getSwiftNativeNSErrorClass(void)::$_0::operator() const(void)::TheLazy,  (dispatch_function_t)getSwiftNativeNSErrorClass(void)::$_0::operator() const(void)::{lambda(void *)#1}::__invoke);
  }
  unint64_t v4 = objc_opt_class();
  return swift_getObjCClassMetadata(v4);
}

uint64_t swift::getNSErrorClass(swift *this)
{
  if (qword_18C486F38 != -1) {
    dispatch_once_f( &qword_18C486F38,  &swift::getNSErrorClass(void)::$_0::operator() const(void)::TheLazy,  (dispatch_function_t)swift::getNSErrorClass(void)::$_0::operator() const(void)::{lambda(void *)#1}::__invoke);
  }
  return swift::getNSErrorClass(void)::$_0::operator() const(void)::TheLazy;
}

BOOL swift::SwiftError::isPureNSError(swift::SwiftError *this, const void *a2)
{
  Class Class = swift::_swift_getClass((unint64_t)this, a2);
  if (qword_18C486F48 != -1) {
    dispatch_once_f( &qword_18C486F48,  &getSwiftNativeNSErrorClass(void)::$_0::operator() const(void)::TheLazy,  (dispatch_function_t)getSwiftNativeNSErrorClass(void)::$_0::operator() const(void)::{lambda(void *)#1}::__invoke);
  }
  return Class != (Class)getSwiftNativeNSErrorClass(void)::$_0::operator() const(void)::TheLazy;
}

unint64_t swift::SwiftError::getHashableBaseType(swift::SwiftError *this, const void *a2)
{
  Class Class = swift::_swift_getClass((unint64_t)this, a2);
  if (qword_18C486F48 != -1) {
    dispatch_once_f( &qword_18C486F48,  &getSwiftNativeNSErrorClass(void)::$_0::operator() const(void)::TheLazy,  (dispatch_function_t)getSwiftNativeNSErrorClass(void)::$_0::operator() const(void)::{lambda(void *)#1}::__invoke);
  }
  if (Class != (Class)getSwiftNativeNSErrorClass(void)::$_0::operator() const(void)::TheLazy)
  {
    unint64_t v4 = &swift::getNSErrorMetadata(void)::$_0::operator() const(void)::TheLazy;
    if (qword_18C575988 != -1) {
      dispatch_once_f( &qword_18C575988,  &swift::getNSErrorMetadata(void)::$_0::operator() const(void)::TheLazy,  (dispatch_function_t)swift::getNSErrorMetadata(void)::$_0::operator() const(void)::{lambda(void *)#1}::__invoke);
    }
    return *v4;
  }

  int v6 = (unint64_t *)((char *)this + 56);
  unint64_t v7 = atomic_load((unint64_t *)this + 7);
  if (v7 == 1) {
    unint64_t result = 0LL;
  }
  else {
    unint64_t result = v7;
  }
  if (!v7)
  {
    uint64_t v8 = *((void *)this + 5);
    unint64_t v4 = (uint64_t *)((char *)this + 40);
    HashableBaseType = swift::hashable_support::findHashableBaseType(v8);
    if (HashableBaseType) {
      unint64_t v10 = (unint64_t)HashableBaseType;
    }
    else {
      unint64_t v10 = 1LL;
    }
    while (!__ldaxr(v6))
    {
      if (!__stlxr(v10, v6)) {
        return *v4;
      }
    }

    __clrex();
    return *v4;
  }

  return result;
}

uint64_t swift::SwiftError::getHashableConformance(swift::SwiftError *this, const void *a2)
{
  Class Class = swift::_swift_getClass((unint64_t)this, a2);
  if (qword_18C486F48 != -1) {
    dispatch_once_f( &qword_18C486F48,  &getSwiftNativeNSErrorClass(void)::$_0::operator() const(void)::TheLazy,  (dispatch_function_t)getSwiftNativeNSErrorClass(void)::$_0::operator() const(void)::{lambda(void *)#1}::__invoke);
  }
  if (Class == (Class)getSwiftNativeNSErrorClass(void)::$_0::operator() const(void)::TheLazy)
  {
    int v9 = (unint64_t *)((char *)this + 64);
    unint64_t v10 = atomic_load((unint64_t *)this + 8);
    if (v10 == 1) {
      uint64_t result = 0LL;
    }
    else {
      uint64_t result = v10;
    }
    if (!v10)
    {
      uint64_t result = swift_conformsToProtocolCommon(*((void *)this + 5), (uint64_t)&protocol descriptor for Hashable);
      if (result) {
        unint64_t v11 = result;
      }
      else {
        unint64_t v11 = 1LL;
      }
      while (!__ldaxr(v9))
      {
        if (!__stlxr(v11, v9)) {
          return result;
        }
      }

      __clrex();
    }
  }

  else
  {
    gotLoadHelper_x19___sSo8NSObjectCSH10ObjectiveCMc(v4);
    int v5 = (int *)*((void *)this + 353);
    CanonicalTypeMetadata = (uint64_t *)swift::TargetProtocolConformanceDescriptor<swift::InProcess>::getCanonicalTypeMetadata((uint64_t)v5);
    return swift::_getWitnessTable(v5, CanonicalTypeMetadata, 0LL, v7);
  }

  return result;
}

uint64_t swift::getNSErrorMetadata(swift *this)
{
  if (qword_18C575988 != -1) {
    dispatch_once_f( &qword_18C575988,  &swift::getNSErrorMetadata(void)::$_0::operator() const(void)::TheLazy,  (dispatch_function_t)swift::getNSErrorMetadata(void)::$_0::operator() const(void)::{lambda(void *)#1}::__invoke);
  }
  return swift::getNSErrorMetadata(void)::$_0::operator() const(void)::TheLazy;
}

uint64_t swift::findErrorWitness(uint64_t a1)
{
  return swift_conformsToProtocolCommon(a1, (uint64_t)&protocol descriptor for Error);
}

unint64_t *swift::dynamicCastValueToNSError(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8 = _getErrorEmbeddedNSErrorIndirect<A>(_:)(a1, a2, a3);
  if (v8)
  {
    int v9 = (unint64_t *)v8;
    if ((a4 & 2) != 0) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8LL))(a1, a2);
    }
  }

  else
  {
    if (qword_18C486F48 != -1) {
      dispatch_once_f( &qword_18C486F48,  &getSwiftNativeNSErrorClass(void)::$_0::operator() const(void)::TheLazy,  (dispatch_function_t)getSwiftNativeNSErrorClass(void)::$_0::operator() const(void)::{lambda(void *)#1}::__invoke);
    }
    uint64_t v10 = *(void *)(a2 - 8);
    uint64_t v11 = *(_DWORD *)(v10 + 80) & 0xB8LL;
    Instance = (unint64_t *)class_createInstance( (Class)getSwiftNativeNSErrorClass(void)::$_0::operator() const(void)::TheLazy,  *(unsigned int *)(v10 + 64) + v11 + 32);
    int v9 = Instance;
    Instance[5] = a2;
    Instance[6] = a3;
    atomic_store(0LL, Instance + 7);
    atomic_store(0LL, Instance + 8);
    if (a1)
    {
      uint64_t v14 = (uint64_t)Instance + v11 + 72;
      uint64_t v15 = 32LL;
      if ((a4 & 2) == 0) {
        uint64_t v15 = 16LL;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + v15))(v14, a1, a2);
    }

    _swift_stdlib_bridgeErrorToNSError(v9, v13);
  }

  return v9;
}

void *swift_allocError(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (qword_18C486F48 != -1) {
    dispatch_once_f( &qword_18C486F48,  &getSwiftNativeNSErrorClass(void)::$_0::operator() const(void)::TheLazy,  (dispatch_function_t)getSwiftNativeNSErrorClass(void)::$_0::operator() const(void)::{lambda(void *)#1}::__invoke);
  }
  uint64_t v8 = *(void *)(a1 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80) & 0xB8LL;
  Instance = class_createInstance( (Class)getSwiftNativeNSErrorClass(void)::$_0::operator() const(void)::TheLazy,  *(unsigned int *)(v8 + 64) + v9 + 32);
  uint64_t v11 = Instance;
  Instance[5] = a1;
  Instance[6] = a2;
  atomic_store(0LL, Instance + 7);
  atomic_store(0LL, Instance + 8);
  if (a3)
  {
    uint64_t v12 = 16LL;
    if ((a4 & 1) != 0) {
      uint64_t v12 = 32LL;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + v12))((uint64_t)Instance + v9 + 72, a3, a1);
  }

  return v11;
}

unint64_t *_swift_stdlib_bridgeErrorToNSError(unint64_t *a1, const void *a2)
{
  char v28 = (swift *)a1;
  if (!atomic_load(a1 + 3))
  {
    double v4 = v28;
    Class Class = swift::_swift_getClass((unint64_t)v28, a2);
    if (qword_18C486F48 != -1) {
      dispatch_once_f( &qword_18C486F48,  &getSwiftNativeNSErrorClass(void)::$_0::operator() const(void)::TheLazy,  (dispatch_function_t)getSwiftNativeNSErrorClass(void)::$_0::operator() const(void)::{lambda(void *)#1}::__invoke);
    }
    if (Class == (Class)getSwiftNativeNSErrorClass(void)::$_0::operator() const(void)::TheLazy)
    {
      uint64_t v8 = *(unsigned __int8 *)(*(void *)(*((void *)v28 + 5) - 8LL) + 80LL);
      uint64_t v7 = ((unint64_t)v28 + v8 + 72) & ~v8;
    }

    else
    {
      uint64_t v7 = (uint64_t)&v28;
    }

    Class v10 = swift::_swift_getClass((unint64_t)v28, v5);
    if (qword_18C486F48 != -1) {
      dispatch_once_f( &qword_18C486F48,  &getSwiftNativeNSErrorClass(void)::$_0::operator() const(void)::TheLazy,  (dispatch_function_t)getSwiftNativeNSErrorClass(void)::$_0::operator() const(void)::{lambda(void *)#1}::__invoke);
    }
    if (v10 == (Class)getSwiftNativeNSErrorClass(void)::$_0::operator() const(void)::TheLazy)
    {
      unint64_t ObjCClassMetadata = *((void *)v4 + 5);
    }

    else
    {
      unint64_t v11 = objc_opt_class();
      unint64_t ObjCClassMetadata = swift_getObjCClassMetadata(v11);
    }

    Class v13 = swift::_swift_getClass((unint64_t)v4, v9);
    if (qword_18C486F48 != -1) {
      dispatch_once_f( &qword_18C486F48,  &getSwiftNativeNSErrorClass(void)::$_0::operator() const(void)::TheLazy,  (dispatch_function_t)getSwiftNativeNSErrorClass(void)::$_0::operator() const(void)::{lambda(void *)#1}::__invoke);
    }
    if (v13 == (Class)getSwiftNativeNSErrorClass(void)::$_0::operator() const(void)::TheLazy)
    {
      uint64_t WitnessTable = *((void *)v4 + 6);
    }

    else
    {
      gotLoadHelper_x21___sSo10CFErrorRefas5Error10FoundationMc(v14);
      uint64_t v15 = (int *)*((void *)v4 + 79);
      CanonicalTypeMetadata = (uint64_t *)swift::TargetProtocolConformanceDescriptor<swift::InProcess>::getCanonicalTypeMetadata((uint64_t)v15);
      uint64_t WitnessTable = swift::_getWitnessTable(v15, CanonicalTypeMetadata, 0LL, v17);
    }

    uint64_t v19 = (void *)_getErrorDomainNSString<A>(_:)(v7, ObjCClassMetadata, WitnessTable);
    uint64_t v20 = _getErrorCode<A>(_:)(v7, ObjCClassMetadata, WitnessTable);
    __int128 v21 = (void *)_getErrorUserInfoNSDictionary<A>(_:)(v7, ObjCClassMetadata, WitnessTable);
    if (!v21)
    {
      if (qword_18C575998 != -1) {
        dispatch_once_f( &qword_18C575998,  &_swift_stdlib_bridgeErrorToNSError::$_0::operator() const(void)::TheLazy,  (dispatch_function_t)_swift_stdlib_bridgeErrorToNSError::$_0::operator() const(void)::{lambda(void *)#1}::__invoke);
      }
      __int128 v21 = (void *)_swift_stdlib_bridgeErrorToNSError::$_0::operator() const(void)::TheLazy;
    }

    unsigned __int8 v22 = v28;
    *((void *)v28 + 2) = v20;
    uint64_t v23 = (unint64_t *)((char *)v22 + 32);
    while (!__ldaxr(v23))
    {
    }

    __clrex();

LABEL_26:
    uint64_t v25 = (unint64_t *)((char *)v28 + 24);
    while (!__ldaxr(v25))
    {
    }

    __clrex();
  }

  return a1;
}

uint64_t swift_getErrorValue(void *a1, void *a2, unint64_t *a3)
{
  Class Class = swift::_swift_getClass((unint64_t)a1, a2);
  if (qword_18C486F48 != -1) {
    dispatch_once_f( &qword_18C486F48,  &getSwiftNativeNSErrorClass(void)::$_0::operator() const(void)::TheLazy,  (dispatch_function_t)getSwiftNativeNSErrorClass(void)::$_0::operator() const(void)::{lambda(void *)#1}::__invoke);
  }
  if (Class == (Class)getSwiftNativeNSErrorClass(void)::$_0::operator() const(void)::TheLazy)
  {
    unint64_t ObjCClassMetadata = a1[5];
  }

  else
  {
    unint64_t v8 = objc_opt_class();
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata(v8);
  }

  a3[1] = ObjCClassMetadata;
  Class v10 = swift::_swift_getClass((unint64_t)a1, v6);
  if (qword_18C486F48 != -1) {
    dispatch_once_f( &qword_18C486F48,  &getSwiftNativeNSErrorClass(void)::$_0::operator() const(void)::TheLazy,  (dispatch_function_t)getSwiftNativeNSErrorClass(void)::$_0::operator() const(void)::{lambda(void *)#1}::__invoke);
  }
  if (v10 == (Class)getSwiftNativeNSErrorClass(void)::$_0::operator() const(void)::TheLazy)
  {
    uint64_t result = a1[6];
    uint64_t v16 = *(unsigned __int8 *)(*(void *)(a1[5] - 8LL) + 80LL);
    *a3 = ((unint64_t)a1 + v16 + 72) & ~v16;
  }

  else
  {
    *a2 = a1;
    *a3 = (unint64_t)a2;
    gotLoadHelper_x20___sSo10CFErrorRefas5Error10FoundationMc(v11);
    uint64_t v12 = (int *)a1[79];
    CanonicalTypeMetadata = (uint64_t *)swift::TargetProtocolConformanceDescriptor<swift::InProcess>::getCanonicalTypeMetadata((uint64_t)v12);
    uint64_t result = swift::_getWitnessTable(v12, CanonicalTypeMetadata, 0LL, v14);
  }

  a3[2] = result;
  return result;
}

uint64_t swift::tryDynamicCastNSErrorObjectToValue(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v18 = a1;
  if (qword_18C486F38 == -1)
  {
    if (a1 < 1) {
      return 0LL;
    }
  }

  else
  {
    dispatch_once_f( &qword_18C486F38,  &swift::getNSErrorClass(void)::$_0::operator() const(void)::TheLazy,  (dispatch_function_t)swift::getNSErrorClass(void)::$_0::operator() const(void)::{lambda(void *)#1}::__invoke);
    if (a1 < 1) {
      return 0LL;
    }
  }

  if (qword_18C486F58 != -1) {
    dispatch_once_f( &qword_18C486F58,  &isKindOfClass(swift::HeapObject *,objc_class *)::$_0::operator() const(void)::TheLazy,  (dispatch_function_t)isKindOfClass(swift::HeapObject *,objc_class *)::$_0::operator() const(void)::{lambda(void *)#1}::__invoke);
  }
  unint64_t v8 = (id (*)(id, SEL, ...))isKindOfClass(swift::HeapObject *,objc_class *)::$_0::operator() const(void)::TheLazy;
  Class Class = object_getClass((id)a1);
  if (class_getMethodImplementation(Class, sel_methodSignatureForSelector_) != v8
    && (objc_opt_isKindOfClass() & 1) != 0)
  {
    Class v11 = swift::_swift_getClass(a1, v10);
    if (qword_18C486F48 != -1) {
      dispatch_once_f( &qword_18C486F48,  &getSwiftNativeNSErrorClass(void)::$_0::operator() const(void)::TheLazy,  (dispatch_function_t)getSwiftNativeNSErrorClass(void)::$_0::operator() const(void)::{lambda(void *)#1}::__invoke);
    }
    if (v11 == (Class)getSwiftNativeNSErrorClass(void)::$_0::operator() const(void)::TheLazy)
    {
      uint64_t v17 = &protocol descriptor for Error;
      ExistentialTypeMetadata = swift_getExistentialTypeMetadata(1, 0LL, 1LL, (uint64_t *)&v17);
      return swift_dynamicCast(a2, &v18, ExistentialTypeMetadata, a3, a4);
    }

    gotLoadHelper_x1___s10Foundation26_ObjectiveCBridgeableErrorMp(v12);
    if (swift_conformsToProtocolCommon((uint64_t)a3, *(void *)(v13 + 2416))
      && (_s10Foundation21_bridgeNSErrorToError_3outSbSo0C0C_SpyxGtAA021_ObjectiveCBridgeableE0RzlF_delayInitStub(v14) & 1) != 0)
    {
      if ((a4 & 2) != 0) {

      }
      return 1LL;
    }

    if (*a3 == 771LL
      && swift::TargetExistentialTypeMetadata<swift::InProcess>::getRepresentation((uint64_t)a3) == 2)
    {
      *a2 = (id)a1;
      return 1LL;
    }
  }

  return 0LL;
}

uint64_t swift::tryDynamicCastNSErrorToValue(void *a1, uint64_t *a2, uint64_t *a3, void *a4, uint64_t a5)
{
  uint64_t v5 = *a3;
  if (!(_DWORD)v5 || (_DWORD)v5 == 773 || (_DWORD)v5 == 515) {
    return swift::tryDynamicCastNSErrorObjectToValue(*a2, a1, a4, a5);
  }
  else {
    return 0LL;
  }
}

Class swift::getNSErrorClass(void)::$_0::operator() const(void)::{lambda(void *)#1}::__invoke(Class *a1)
{
  Class result = objc_lookUpClass("NSError");
  *a1 = result;
  return result;
}

unint64_t swift::getNSErrorMetadata(void)::$_0::operator() const(void)::{lambda(void *)#1}::__invoke( unint64_t *a1)
{
  if (qword_18C486F38 != -1) {
    dispatch_once_f( &qword_18C486F38,  &swift::getNSErrorClass(void)::$_0::operator() const(void)::TheLazy,  (dispatch_function_t)swift::getNSErrorClass(void)::$_0::operator() const(void)::{lambda(void *)#1}::__invoke);
  }
  unint64_t result = swift_getObjCClassMetadata(swift::getNSErrorClass(void)::$_0::operator() const(void)::TheLazy);
  *a1 = result;
  return result;
}

objc_class *getSwiftNativeNSErrorClass(void)::$_0::operator() const(void)::{lambda(void *)#1}::__invoke( objc_class **a1)
{
  if (qword_18C486F38 != -1) {
    dispatch_once_f( &qword_18C486F38,  &swift::getNSErrorClass(void)::$_0::operator() const(void)::TheLazy,  (dispatch_function_t)swift::getNSErrorClass(void)::$_0::operator() const(void)::{lambda(void *)#1}::__invoke);
  }
  uint64_t v2 = (objc_class *)swift::getNSErrorClass(void)::$_0::operator() const(void)::TheLazy;
  unint64_t result = (objc_class *)objc_opt_class();
  double v4 = result;
  if (v2) {
    unint64_t result = class_setSuperclass(result, v2);
  }
  *a1 = v4;
  return result;
}

uint64_t _swift_stdlib_bridgeErrorToNSError::$_0::operator() const(void)::{lambda(void *)#1}::__invoke( uint64_t *a1)
{
  uint64_t result = -[objc_class dictionary](objc_lookUpClass("NSDictionary"), "dictionary");
  *a1 = result;
  return result;
}

IMP isKindOfClass(swift::HeapObject *,objc_class *)::$_0::operator() const(void)::{lambda(void *)#1}::__invoke(IMP *a1)
{
  uint64_t v2 = objc_lookUpClass("NSProxy");
  IMP result = class_getMethodImplementation(v2, sel_methodSignatureForSelector_);
  *a1 = result;
  return result;
}

Class swift::_swift_getClass(unint64_t this, const void *a2)
{
  if ((this & 0x8000000000000000LL) != 0) {
    return object_getClass((id)this);
  }
  else {
    return (Class)(*(void *)this & 0xFFFFFFFF8LL);
  }
}

Class swift_getObjCClassFromObject(unint64_t a1)
{
  if ((a1 & 0x8000000000000000LL) != 0)
  {
    uint64_t Class = (uint64_t)object_getClass((id)a1);
    if (Class) {
      goto LABEL_5;
    }
  }

  else
  {
    for (uint64_t Class = *(void *)a1 & 0xFFFFFFFF8LL; Class; uint64_t Class = *(void *)(Class + 8))
    {
LABEL_5:
      if ((*(_BYTE *)(Class + 32) & 2) == 0) {
        break;
      }
      if (*(void *)(Class + 64)) {
        return (Class)Class;
      }
    }
  }

  uint64_t Class = objc_opt_class();
  unint64_t v3 = object_getClass((id)a1);
  if (class_isMetaClass(v3)) {
    return object_getClass((id)Class);
  }
  else {
    return (Class)Class;
  }
}

unint64_t swift_getObjectType(unint64_t a1)
{
  if ((a1 & 0x8000000000000000LL) != 0)
  {
    unint64_t result = (unint64_t)object_getClass((id)a1);
    if (result) {
      goto LABEL_5;
    }
  }

  else
  {
    for (unint64_t result = *(void *)a1 & 0xFFFFFFFF8LL; result; unint64_t result = *(void *)(result + 8))
    {
LABEL_5:
      if ((*(_BYTE *)(result + 32) & 2) == 0) {
        break;
      }
      if (*(void *)(result + 64)) {
        return result;
      }
    }
  }

  unint64_t v3 = (void *)objc_opt_class();
  uint64_t Class = object_getClass((id)a1);
  if (class_isMetaClass(Class)) {
    unint64_t v3 = object_getClass(v3);
  }
  return swift_getObjCClassMetadata((unint64_t)v3);
}

uint64_t _swift_classOfObjCHeapObject(void *a1)
{
  return *a1 & 0xFFFFFFFF8LL;
}

id swift::getDescription(uint64_t a1, swift *a2)
{
  Description = (void *)swift_stdlib_getDescription(a1, a2);
  (*(void (**)(uint64_t, swift *))(*((void *)a2 - 1) + 8LL))(a1, a2);
  return Description;
}

void sub_181797448(_Unwind_Exception *a1)
{
}

double swift::Lazy<std::unordered_set<objc_class *>>::defaultInitCallback(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  return result;
}

uint64_t swift::usesNativeSwiftReferenceCounting(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 32) & 2) != 0) {
    return (*(unsigned __int8 *)(a1 + 40) >> 1) & 1;
  }
  else {
    return 0LL;
  }
}

uint64_t _swift_objcClassUsesNativeSwiftReferenceCounting(uint64_t a1)
{
  if (*(void *)a1 == 773LL) {
    return 0LL;
  }
  if ((*(_BYTE *)(a1 + 32) & 2) != 0) {
    return (*(unsigned __int8 *)(a1 + 40) >> 1) & 1;
  }
  return 0LL;
}

uint64_t swift_unknownObjectRetain_n(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  if (a1 < 1) {
    return a1;
  }
  int v5 = a2;
  if ((*(_BYTE *)((*(void *)a1 & 0xFFFFFFFF8LL) + 0x20) & 2) == 0
    || (*(_BYTE *)((*(void *)a1 & 0xFFFFFFFF8LL) + 0x28) & 2) == 0)
  {
    if ((int)a2 >= 1)
    {
      do
      {
        id v6 = (id)a1;
        --v5;
      }

      while (v5);
    }

    return a1;
  }

  return swift_retain_n(a1, a2, a3, a4);
}

void swift_unknownObjectRelease_n(uint64_t a1, uint64_t a2)
{
  if (a1 >= 1)
  {
    int v2 = a2;
    if ((*(_BYTE *)((*(void *)a1 & 0xFFFFFFFF8LL) + 0x20) & 2) != 0
      && (*(_BYTE *)((*(void *)a1 & 0xFFFFFFFF8LL) + 0x28) & 2) != 0)
    {
      swift_release_n(a1, a2);
    }

    else if ((int)a2 >= 1)
    {
      do
      {

        --v2;
      }

      while (v2);
    }
  }

id swift_unknownObjectRetain(id result, uint64_t a2, uint64_t a3, char *a4)
{
  if ((uint64_t)result >= 1)
  {
    if ((*(_BYTE *)((*(void *)result & 0xFFFFFFFF8LL) + 0x20) & 2) != 0
      && (*(_BYTE *)((*(void *)result & 0xFFFFFFFF8LL) + 0x28) & 2) != 0)
    {
      return swift_retain((unint64_t *)result, a2, a3, a4);
    }

    else
    {
      return result;
    }
  }

  return result;
}

void swift_unknownObjectRelease(id a1)
{
  if ((uint64_t)a1 >= 1)
  {
    if ((*(_BYTE *)((*(void *)a1 & 0xFFFFFFFF8LL) + 0x20) & 2) != 0
      && (*(_BYTE *)((*(void *)a1 & 0xFFFFFFFF8LL) + 0x28) & 2) != 0)
    {
      swift_release((uint64_t)a1);
    }

    else
    {
    }
  }

uint64_t swift_nonatomic_unknownObjectRetain_n(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  if (a1 < 1) {
    return a1;
  }
  int v5 = a2;
  if ((*(_BYTE *)((*(void *)a1 & 0xFFFFFFFF8LL) + 0x20) & 2) == 0
    || (*(_BYTE *)((*(void *)a1 & 0xFFFFFFFF8LL) + 0x28) & 2) == 0)
  {
    if ((int)a2 >= 1)
    {
      do
      {
        id v6 = (id)a1;
        --v5;
      }

      while (v5);
    }

    return a1;
  }

  return swift_nonatomic_retain_n(a1, a2, a3, a4);
}

void swift_nonatomic_unknownObjectRelease_n(uint64_t a1, uint64_t a2)
{
  if (a1 >= 1)
  {
    int v2 = a2;
    if ((*(_BYTE *)((*(void *)a1 & 0xFFFFFFFF8LL) + 0x20) & 2) != 0
      && (*(_BYTE *)((*(void *)a1 & 0xFFFFFFFF8LL) + 0x28) & 2) != 0)
    {
      swift_nonatomic_release_n(a1, a2);
    }

    else if ((int)a2 >= 1)
    {
      do
      {

        --v2;
      }

      while (v2);
    }
  }

id swift_nonatomic_unknownObjectRetain(id result, uint64_t a2, uint64_t a3, char *a4)
{
  if ((uint64_t)result >= 1)
  {
    if ((*(_BYTE *)((*(void *)result & 0xFFFFFFFF8LL) + 0x20) & 2) != 0
      && (*(_BYTE *)((*(void *)result & 0xFFFFFFFF8LL) + 0x28) & 2) != 0)
    {
      return (id)swift_nonatomic_retain((uint64_t)result, a2, a3, a4);
    }

    else
    {
      return result;
    }
  }

  return result;
}

void swift_nonatomic_unknownObjectRelease(id a1)
{
  if ((uint64_t)a1 >= 1)
  {
    if ((*(_BYTE *)((*(void *)a1 & 0xFFFFFFFF8LL) + 0x20) & 2) != 0
      && (*(_BYTE *)((*(void *)a1 & 0xFFFFFFFF8LL) + 0x28) & 2) != 0)
    {
      swift_release((uint64_t)a1);
    }

    else
    {
    }
  }

unint64_t swift_bridgeObjectRetain(unint64_t result, uint64_t a2, uint64_t a3, char *a4)
{
  if ((result & 0x8000000000000000LL) == 0)
  {
    if ((result & 0x4000000000000000LL) != 0) {
      return objcRetainAndReturn(result);
    }
    else {
      return (unint64_t)swift_retain((unint64_t *)(result & 0x8FFFFFFFFFFFFFF8LL), a2, a3, a4);
    }
  }

  return result;
}

unint64_t objcRetainAndReturn(unint64_t a1)
{
  id v2 = (id)(a1 & 0x8FFFFFFFFFFFFFF8LL);
  return a1;
}

unint64_t *swift_bridgeObjectRetain_x1(int a1, uint64_t a2, uint64_t a3, char *a4)
{
  double result = (unint64_t *)a2;
  if ((a2 & 0x8000000000000000LL) == 0)
  {
    if ((a2 & 0x4000000000000000LL) != 0) {
      return (unint64_t *)objcRetainAndReturn(a2);
    }
    else {
      return swift_retain((unint64_t *)(a2 & 0x8FFFFFFFFFFFFFF8LL), a2, a3, a4);
    }
  }

  return result;
}

unint64_t *swift_bridgeObjectRetain_x2(int a1, uint64_t a2, uint64_t a3, char *a4)
{
  double result = (unint64_t *)a3;
  if ((a3 & 0x8000000000000000LL) == 0)
  {
    if ((a3 & 0x4000000000000000LL) != 0) {
      return (unint64_t *)objcRetainAndReturn(a3);
    }
    else {
      return swift_retain((unint64_t *)(a3 & 0x8FFFFFFFFFFFFFF8LL), a2, a3, a4);
    }
  }

  return result;
}

unint64_t *swift_bridgeObjectRetain_x3(int a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  double result = (unint64_t *)a4;
  if ((a4 & 0x8000000000000000LL) == 0)
  {
    if ((a4 & 0x4000000000000000LL) != 0) {
      return (unint64_t *)objcRetainAndReturn(a4);
    }
    else {
      return swift_retain((unint64_t *)(a4 & 0x8FFFFFFFFFFFFFF8LL), a2, a3, (char *)a4);
    }
  }

  return result;
}

unint64_t *swift_bridgeObjectRetain_x4(int a1, uint64_t a2, uint64_t a3, char *a4, unint64_t a5)
{
  double result = (unint64_t *)a5;
  if ((a5 & 0x8000000000000000LL) == 0)
  {
    if ((a5 & 0x4000000000000000LL) != 0) {
      return (unint64_t *)objcRetainAndReturn(a5);
    }
    else {
      return swift_retain((unint64_t *)(a5 & 0x8FFFFFFFFFFFFFF8LL), a2, a3, a4);
    }
  }

  return result;
}

unint64_t *swift_bridgeObjectRetain_x5( int a1, uint64_t a2, uint64_t a3, char *a4, int a5, unint64_t a6)
{
  double result = (unint64_t *)a6;
  if ((a6 & 0x8000000000000000LL) == 0)
  {
    if ((a6 & 0x4000000000000000LL) != 0) {
      return (unint64_t *)objcRetainAndReturn(a6);
    }
    else {
      return swift_retain((unint64_t *)(a6 & 0x8FFFFFFFFFFFFFF8LL), a2, a3, a4);
    }
  }

  return result;
}

unint64_t *swift_bridgeObjectRetain_x6( int a1, uint64_t a2, uint64_t a3, char *a4, int a5, int a6, unint64_t a7)
{
  double result = (unint64_t *)a7;
  if ((a7 & 0x8000000000000000LL) == 0)
  {
    if ((a7 & 0x4000000000000000LL) != 0) {
      return (unint64_t *)objcRetainAndReturn(a7);
    }
    else {
      return swift_retain((unint64_t *)(a7 & 0x8FFFFFFFFFFFFFF8LL), a2, a3, a4);
    }
  }

  return result;
}

unint64_t *swift_bridgeObjectRetain_x7( int a1, uint64_t a2, uint64_t a3, char *a4, int a5, int a6, int a7, unint64_t a8)
{
  double result = (unint64_t *)a8;
  if ((a8 & 0x8000000000000000LL) == 0)
  {
    if ((a8 & 0x4000000000000000LL) != 0) {
      return (unint64_t *)objcRetainAndReturn(a8);
    }
    else {
      return swift_retain((unint64_t *)(a8 & 0x8FFFFFFFFFFFFFF8LL), a2, a3, a4);
    }
  }

  return result;
}

unint64_t *swift_bridgeObjectRetain_x8@<X0>( uint64_t a1@<X1>, uint64_t a2@<X2>, char *a3@<X3>, unint64_t a4@<X8>)
{
  double result = (unint64_t *)a4;
  if ((a4 & 0x8000000000000000LL) == 0)
  {
    if ((a4 & 0x4000000000000000LL) != 0) {
      return (unint64_t *)objcRetainAndReturn(a4);
    }
    else {
      return swift_retain((unint64_t *)(a4 & 0x8FFFFFFFFFFFFFF8LL), a1, a2, a3);
    }
  }

  return result;
}

unint64_t *swift_bridgeObjectRetain_x9(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  double result = (unint64_t *)v4;
  if ((v4 & 0x8000000000000000LL) == 0)
  {
    if ((v4 & 0x4000000000000000LL) != 0) {
      return (unint64_t *)objcRetainAndReturn(v4);
    }
    else {
      return swift_retain((unint64_t *)(v4 & 0x8FFFFFFFFFFFFFF8LL), a2, a3, a4);
    }
  }

  return result;
}

unint64_t *swift_bridgeObjectRetain_x10(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  double result = (unint64_t *)v4;
  if ((v4 & 0x8000000000000000LL) == 0)
  {
    if ((v4 & 0x4000000000000000LL) != 0) {
      return (unint64_t *)objcRetainAndReturn(v4);
    }
    else {
      return swift_retain((unint64_t *)(v4 & 0x8FFFFFFFFFFFFFF8LL), a2, a3, a4);
    }
  }

  return result;
}

unint64_t *swift_bridgeObjectRetain_x11(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  double result = (unint64_t *)v4;
  if ((v4 & 0x8000000000000000LL) == 0)
  {
    if ((v4 & 0x4000000000000000LL) != 0) {
      return (unint64_t *)objcRetainAndReturn(v4);
    }
    else {
      return swift_retain((unint64_t *)(v4 & 0x8FFFFFFFFFFFFFF8LL), a2, a3, a4);
    }
  }

  return result;
}

unint64_t *swift_bridgeObjectRetain_x12(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  double result = (unint64_t *)v4;
  if ((v4 & 0x8000000000000000LL) == 0)
  {
    if ((v4 & 0x4000000000000000LL) != 0) {
      return (unint64_t *)objcRetainAndReturn(v4);
    }
    else {
      return swift_retain((unint64_t *)(v4 & 0x8FFFFFFFFFFFFFF8LL), a2, a3, a4);
    }
  }

  return result;
}

unint64_t *swift_bridgeObjectRetain_x13(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  double result = (unint64_t *)v4;
  if ((v4 & 0x8000000000000000LL) == 0)
  {
    if ((v4 & 0x4000000000000000LL) != 0) {
      return (unint64_t *)objcRetainAndReturn(v4);
    }
    else {
      return swift_retain((unint64_t *)(v4 & 0x8FFFFFFFFFFFFFF8LL), a2, a3, a4);
    }
  }

  return result;
}

unint64_t *swift_bridgeObjectRetain_x14(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  double result = (unint64_t *)v4;
  if ((v4 & 0x8000000000000000LL) == 0)
  {
    if ((v4 & 0x4000000000000000LL) != 0) {
      return (unint64_t *)objcRetainAndReturn(v4);
    }
    else {
      return swift_retain((unint64_t *)(v4 & 0x8FFFFFFFFFFFFFF8LL), a2, a3, a4);
    }
  }

  return result;
}

unint64_t *swift_bridgeObjectRetain_x15(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  double result = (unint64_t *)v4;
  if ((v4 & 0x8000000000000000LL) == 0)
  {
    if ((v4 & 0x4000000000000000LL) != 0) {
      return (unint64_t *)objcRetainAndReturn(v4);
    }
    else {
      return swift_retain((unint64_t *)(v4 & 0x8FFFFFFFFFFFFFF8LL), a2, a3, a4);
    }
  }

  return result;
}

unint64_t *swift_bridgeObjectRetain_x19(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  double result = (unint64_t *)v4;
  if ((v4 & 0x8000000000000000LL) == 0)
  {
    if ((v4 & 0x4000000000000000LL) != 0) {
      return (unint64_t *)objcRetainAndReturn(v4);
    }
    else {
      return swift_retain((unint64_t *)(v4 & 0x8FFFFFFFFFFFFFF8LL), a2, a3, a4);
    }
  }

  return result;
}

unint64_t *swift_bridgeObjectRetain_x20(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  double result = (unint64_t *)v4;
  if ((v4 & 0x8000000000000000LL) == 0)
  {
    if ((v4 & 0x4000000000000000LL) != 0) {
      return (unint64_t *)objcRetainAndReturn(v4);
    }
    else {
      return swift_retain((unint64_t *)(v4 & 0x8FFFFFFFFFFFFFF8LL), a2, a3, a4);
    }
  }

  return result;
}

unint64_t *swift_bridgeObjectRetain_x21(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  double result = (unint64_t *)v4;
  if ((v4 & 0x8000000000000000LL) == 0)
  {
    if ((v4 & 0x4000000000000000LL) != 0) {
      return (unint64_t *)objcRetainAndReturn(v4);
    }
    else {
      return swift_retain((unint64_t *)(v4 & 0x8FFFFFFFFFFFFFF8LL), a2, a3, a4);
    }
  }

  return result;
}

unint64_t *swift_bridgeObjectRetain_x22(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  double result = (unint64_t *)v4;
  if ((v4 & 0x8000000000000000LL) == 0)
  {
    if ((v4 & 0x4000000000000000LL) != 0) {
      return (unint64_t *)objcRetainAndReturn(v4);
    }
    else {
      return swift_retain((unint64_t *)(v4 & 0x8FFFFFFFFFFFFFF8LL), a2, a3, a4);
    }
  }

  return result;
}

unint64_t *swift_bridgeObjectRetain_x23(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  double result = (unint64_t *)v4;
  if ((v4 & 0x8000000000000000LL) == 0)
  {
    if ((v4 & 0x4000000000000000LL) != 0) {
      return (unint64_t *)objcRetainAndReturn(v4);
    }
    else {
      return swift_retain((unint64_t *)(v4 & 0x8FFFFFFFFFFFFFF8LL), a2, a3, a4);
    }
  }

  return result;
}

unint64_t *swift_bridgeObjectRetain_x24(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  double result = (unint64_t *)v4;
  if ((v4 & 0x8000000000000000LL) == 0)
  {
    if ((v4 & 0x4000000000000000LL) != 0) {
      return (unint64_t *)objcRetainAndReturn(v4);
    }
    else {
      return swift_retain((unint64_t *)(v4 & 0x8FFFFFFFFFFFFFF8LL), a2, a3, a4);
    }
  }

  return result;
}

unint64_t *swift_bridgeObjectRetain_x25(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  double result = (unint64_t *)v4;
  if ((v4 & 0x8000000000000000LL) == 0)
  {
    if ((v4 & 0x4000000000000000LL) != 0) {
      return (unint64_t *)objcRetainAndReturn(v4);
    }
    else {
      return swift_retain((unint64_t *)(v4 & 0x8FFFFFFFFFFFFFF8LL), a2, a3, a4);
    }
  }

  return result;
}

unint64_t *swift_bridgeObjectRetain_x26(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  double result = (unint64_t *)v4;
  if ((v4 & 0x8000000000000000LL) == 0)
  {
    if ((v4 & 0x4000000000000000LL) != 0) {
      return (unint64_t *)objcRetainAndReturn(v4);
    }
    else {
      return swift_retain((unint64_t *)(v4 & 0x8FFFFFFFFFFFFFF8LL), a2, a3, a4);
    }
  }

  return result;
}

unint64_t *swift_bridgeObjectRetain_x27(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  double result = (unint64_t *)v4;
  if ((v4 & 0x8000000000000000LL) == 0)
  {
    if ((v4 & 0x4000000000000000LL) != 0) {
      return (unint64_t *)objcRetainAndReturn(v4);
    }
    else {
      return swift_retain((unint64_t *)(v4 & 0x8FFFFFFFFFFFFFF8LL), a2, a3, a4);
    }
  }

  return result;
}

unint64_t *swift_bridgeObjectRetain_x28(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  double result = (unint64_t *)v4;
  if ((v4 & 0x8000000000000000LL) == 0)
  {
    if ((v4 & 0x4000000000000000LL) != 0) {
      return (unint64_t *)objcRetainAndReturn(v4);
    }
    else {
      return swift_retain((unint64_t *)(v4 & 0x8FFFFFFFFFFFFFF8LL), a2, a3, a4);
    }
  }

  return result;
}

uint64_t swift_nonatomic_bridgeObjectRetain(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  if ((a1 & 0x8000000000000000LL) == 0)
  {
    int v5 = (void *)(a1 & 0x8FFFFFFFFFFFFFF8LL);
    if ((a1 & 0x4000000000000000LL) != 0) {
      id v6 = v5;
    }
    else {
      swift_nonatomic_retain((uint64_t)v5, a2, a3, a4);
    }
  }

  return a1;
}

void swift_bridgeObjectRelease(uint64_t a1)
{
  if ((a1 & 0x8000000000000000LL) == 0)
  {
    if ((a1 & 0x4000000000000000LL) != 0) {

    }
    else {
      swift_release(a1 & 0x8FFFFFFFFFFFFFF8LL);
    }
  }

void swift_bridgeObjectRelease_x1(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0x8000000000000000LL) == 0)
  {
    id v2 = (void *)(a2 & 0x8FFFFFFFFFFFFFF8LL);
    if ((a2 & 0x4000000000000000LL) != 0) {

    }
    else {
      swift_release((uint64_t)v2);
    }
  }

void swift_bridgeObjectRelease_x2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a3 & 0x8000000000000000LL) == 0)
  {
    unint64_t v3 = (void *)(a3 & 0x8FFFFFFFFFFFFFF8LL);
    if ((a3 & 0x4000000000000000LL) != 0) {

    }
    else {
      swift_release((uint64_t)v3);
    }
  }

void swift_bridgeObjectRelease_x3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((a4 & 0x8000000000000000LL) == 0)
  {
    unint64_t v4 = (void *)(a4 & 0x8FFFFFFFFFFFFFF8LL);
    if ((a4 & 0x4000000000000000LL) != 0) {

    }
    else {
      swift_release((uint64_t)v4);
    }
  }

void swift_bridgeObjectRelease_x4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if ((a5 & 0x8000000000000000LL) == 0)
  {
    int v5 = (void *)(a5 & 0x8FFFFFFFFFFFFFF8LL);
    if ((a5 & 0x4000000000000000LL) != 0) {

    }
    else {
      swift_release((uint64_t)v5);
    }
  }

void swift_bridgeObjectRelease_x5(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((a6 & 0x8000000000000000LL) == 0)
  {
    id v6 = (void *)(a6 & 0x8FFFFFFFFFFFFFF8LL);
    if ((a6 & 0x4000000000000000LL) != 0) {

    }
    else {
      swift_release((uint64_t)v6);
    }
  }

void swift_bridgeObjectRelease_x6( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if ((a7 & 0x8000000000000000LL) == 0)
  {
    uint64_t v7 = (void *)(a7 & 0x8FFFFFFFFFFFFFF8LL);
    if ((a7 & 0x4000000000000000LL) != 0) {

    }
    else {
      swift_release((uint64_t)v7);
    }
  }

void swift_bridgeObjectRelease_x7( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((a8 & 0x8000000000000000LL) == 0)
  {
    unint64_t v8 = (void *)(a8 & 0x8FFFFFFFFFFFFFF8LL);
    if ((a8 & 0x4000000000000000LL) != 0) {

    }
    else {
      swift_release((uint64_t)v8);
    }
  }

void swift_bridgeObjectRelease_x8(uint64_t a1@<X8>)
{
  if ((a1 & 0x8000000000000000LL) == 0)
  {
    uint64_t v1 = (void *)(a1 & 0x8FFFFFFFFFFFFFF8LL);
    if ((a1 & 0x4000000000000000LL) != 0) {

    }
    else {
      swift_release((uint64_t)v1);
    }
  }

void swift_bridgeObjectRelease_x9()
{
  if ((v0 & 0x8000000000000000LL) == 0)
  {
    uint64_t v1 = (void *)(v0 & 0x8FFFFFFFFFFFFFF8LL);
    if ((v0 & 0x4000000000000000LL) != 0) {

    }
    else {
      swift_release((uint64_t)v1);
    }
  }

void swift_bridgeObjectRelease_x10()
{
  if ((v0 & 0x8000000000000000LL) == 0)
  {
    uint64_t v1 = (void *)(v0 & 0x8FFFFFFFFFFFFFF8LL);
    if ((v0 & 0x4000000000000000LL) != 0) {

    }
    else {
      swift_release((uint64_t)v1);
    }
  }

void swift_bridgeObjectRelease_x11()
{
  if ((v0 & 0x8000000000000000LL) == 0)
  {
    uint64_t v1 = (void *)(v0 & 0x8FFFFFFFFFFFFFF8LL);
    if ((v0 & 0x4000000000000000LL) != 0) {

    }
    else {
      swift_release((uint64_t)v1);
    }
  }

void swift_bridgeObjectRelease_x12()
{
  if ((v0 & 0x8000000000000000LL) == 0)
  {
    uint64_t v1 = (void *)(v0 & 0x8FFFFFFFFFFFFFF8LL);
    if ((v0 & 0x4000000000000000LL) != 0) {

    }
    else {
      swift_release((uint64_t)v1);
    }
  }

void swift_bridgeObjectRelease_x13()
{
  if ((v0 & 0x8000000000000000LL) == 0)
  {
    uint64_t v1 = (void *)(v0 & 0x8FFFFFFFFFFFFFF8LL);
    if ((v0 & 0x4000000000000000LL) != 0) {

    }
    else {
      swift_release((uint64_t)v1);
    }
  }

void swift_bridgeObjectRelease_x14()
{
  if ((v0 & 0x8000000000000000LL) == 0)
  {
    uint64_t v1 = (void *)(v0 & 0x8FFFFFFFFFFFFFF8LL);
    if ((v0 & 0x4000000000000000LL) != 0) {

    }
    else {
      swift_release((uint64_t)v1);
    }
  }

void swift_bridgeObjectRelease_x15()
{
  if ((v0 & 0x8000000000000000LL) == 0)
  {
    uint64_t v1 = (void *)(v0 & 0x8FFFFFFFFFFFFFF8LL);
    if ((v0 & 0x4000000000000000LL) != 0) {

    }
    else {
      swift_release((uint64_t)v1);
    }
  }

void swift_bridgeObjectRelease_x19()
{
  if ((v0 & 0x8000000000000000LL) == 0)
  {
    uint64_t v1 = (void *)(v0 & 0x8FFFFFFFFFFFFFF8LL);
    if ((v0 & 0x4000000000000000LL) != 0) {

    }
    else {
      swift_release((uint64_t)v1);
    }
  }

void swift_bridgeObjectRelease_x20()
{
  if ((v0 & 0x8000000000000000LL) == 0)
  {
    uint64_t v1 = (void *)(v0 & 0x8FFFFFFFFFFFFFF8LL);
    if ((v0 & 0x4000000000000000LL) != 0) {

    }
    else {
      swift_release((uint64_t)v1);
    }
  }

void swift_bridgeObjectRelease_x21()
{
  if ((v0 & 0x8000000000000000LL) == 0)
  {
    uint64_t v1 = (void *)(v0 & 0x8FFFFFFFFFFFFFF8LL);
    if ((v0 & 0x4000000000000000LL) != 0) {

    }
    else {
      swift_release((uint64_t)v1);
    }
  }

void swift_bridgeObjectRelease_x22()
{
  if ((v0 & 0x8000000000000000LL) == 0)
  {
    uint64_t v1 = (void *)(v0 & 0x8FFFFFFFFFFFFFF8LL);
    if ((v0 & 0x4000000000000000LL) != 0) {

    }
    else {
      swift_release((uint64_t)v1);
    }
  }

void swift_bridgeObjectRelease_x23()
{
  if ((v0 & 0x8000000000000000LL) == 0)
  {
    uint64_t v1 = (void *)(v0 & 0x8FFFFFFFFFFFFFF8LL);
    if ((v0 & 0x4000000000000000LL) != 0) {

    }
    else {
      swift_release((uint64_t)v1);
    }
  }

void swift_bridgeObjectRelease_x24()
{
  if ((v0 & 0x8000000000000000LL) == 0)
  {
    uint64_t v1 = (void *)(v0 & 0x8FFFFFFFFFFFFFF8LL);
    if ((v0 & 0x4000000000000000LL) != 0) {

    }
    else {
      swift_release((uint64_t)v1);
    }
  }

void swift_bridgeObjectRelease_x25()
{
  if ((v0 & 0x8000000000000000LL) == 0)
  {
    uint64_t v1 = (void *)(v0 & 0x8FFFFFFFFFFFFFF8LL);
    if ((v0 & 0x4000000000000000LL) != 0) {

    }
    else {
      swift_release((uint64_t)v1);
    }
  }

void swift_bridgeObjectRelease_x26()
{
  if ((v0 & 0x8000000000000000LL) == 0)
  {
    uint64_t v1 = (void *)(v0 & 0x8FFFFFFFFFFFFFF8LL);
    if ((v0 & 0x4000000000000000LL) != 0) {

    }
    else {
      swift_release((uint64_t)v1);
    }
  }

void swift_bridgeObjectRelease_x27()
{
  if ((v0 & 0x8000000000000000LL) == 0)
  {
    uint64_t v1 = (void *)(v0 & 0x8FFFFFFFFFFFFFF8LL);
    if ((v0 & 0x4000000000000000LL) != 0) {

    }
    else {
      swift_release((uint64_t)v1);
    }
  }

void swift_bridgeObjectRelease_x28()
{
  if ((v0 & 0x8000000000000000LL) == 0)
  {
    uint64_t v1 = (void *)(v0 & 0x8FFFFFFFFFFFFFF8LL);
    if ((v0 & 0x4000000000000000LL) != 0) {

    }
    else {
      swift_release((uint64_t)v1);
    }
  }

void swift_nonatomic_bridgeObjectRelease(uint64_t a1)
{
  if ((a1 & 0x8000000000000000LL) == 0)
  {
    if ((a1 & 0x4000000000000000LL) != 0) {

    }
    else {
      swift_nonatomic_release(a1 & 0x8FFFFFFFFFFFFFF8LL);
    }
  }

uint64_t swift_bridgeObjectRetain_n(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  if ((a1 & 0x8000000000000000LL) == 0)
  {
    int v5 = a2;
    id v6 = (void *)(a1 & 0x8FFFFFFFFFFFFFF8LL);
    if ((a1 & 0x4000000000000000LL) != 0)
    {
      if ((int)a2 >= 1)
      {
        do
        {
          id v7 = v6;
          --v5;
        }

        while (v5);
      }
    }

    else
    {
      swift_retain_n(a1 & 0x8FFFFFFFFFFFFFF8LL, a2, a3, a4);
    }
  }

  return a1;
}

void swift_bridgeObjectRelease_n(uint64_t a1, uint64_t a2)
{
  if ((a1 & 0x8000000000000000LL) == 0)
  {
    int v2 = a2;
    unint64_t v3 = (void *)(a1 & 0x8FFFFFFFFFFFFFF8LL);
    if ((a1 & 0x4000000000000000LL) != 0)
    {
      if ((int)a2 >= 1)
      {
        do
        {

          --v2;
        }

        while (v2);
      }
    }

    else
    {
      swift_release_n(a1 & 0x8FFFFFFFFFFFFFF8LL, a2);
    }
  }

uint64_t swift_nonatomic_bridgeObjectRetain_n(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  if ((a1 & 0x8000000000000000LL) == 0)
  {
    int v5 = a2;
    id v6 = (void *)(a1 & 0x8FFFFFFFFFFFFFF8LL);
    if ((a1 & 0x4000000000000000LL) != 0)
    {
      if ((int)a2 >= 1)
      {
        do
        {
          id v7 = v6;
          --v5;
        }

        while (v5);
      }
    }

    else
    {
      swift_nonatomic_retain_n(a1 & 0x8FFFFFFFFFFFFFF8LL, a2, a3, a4);
    }
  }

  return a1;
}

void swift_nonatomic_bridgeObjectRelease_n(uint64_t a1, uint64_t a2)
{
  if ((a1 & 0x8000000000000000LL) == 0)
  {
    int v2 = a2;
    unint64_t v3 = (void *)(a1 & 0x8FFFFFFFFFFFFFF8LL);
    if ((a1 & 0x4000000000000000LL) != 0)
    {
      if ((int)a2 >= 1)
      {
        do
        {

          --v2;
        }

        while (v2);
      }
    }

    else
    {
      swift_nonatomic_release_n(a1 & 0x8FFFFFFFFFFFFFF8LL, a2);
    }
  }

void *swift_unknownObjectUnownedInit(void *a1, uint64_t a2, const char *a3, char *a4)
{
  if (a2)
  {
    if ((a2 & 0x8000000000000000LL) == 0
      && (*(_BYTE *)((*(void *)a2 & 0xFFFFFFFF8LL) + 0x20) & 2) != 0
      && (*(_BYTE *)((*(void *)a2 & 0xFFFFFFFF8LL) + 0x28) & 2) != 0)
    {
      *a1 = a2;
      swift_unownedRetain(a2, a2, a3, a4);
    }

    else
    {
      id v6 = (id *)malloc(8uLL);
      objc_initWeak(v6, (id)a2);
      *a1 = (unint64_t)v6 | 1;
    }
  }

  else
  {
    *a1 = 0LL;
  }

  return a1;
}

void sub_1817984B0(_Unwind_Exception *a1)
{
}

uint64_t *swift_unknownObjectUnownedAssign(uint64_t *a1, uint64_t obj, const char *a3, char *a4)
{
  if (obj)
  {
    if ((obj & 0x8000000000000000LL) == 0
      && (*(_BYTE *)((*(void *)obj & 0xFFFFFFFF8LL) + 0x20) & 2) != 0
      && (*(_BYTE *)((*(void *)obj & 0xFFFFFFFF8LL) + 0x28) & 2) != 0)
    {
      uint64_t v11 = *a1;
      if ((*a1 & 1) != 0)
      {
        double v12 = (id *)(v11 & 0xFFFFFFFFFFFFFFFELL);
        if (v12)
        {
          objc_destroyWeak(v12);
          free(v12);
        }

        *a1 = obj;
        swift_unownedRetain(obj, obj, a3, a4);
      }

      else if (v11 != obj)
      {
        swift_unownedRetain(obj, obj, a3, a4);
        *a1 = obj;
        swift_unownedRelease(v11);
      }
    }

    else
    {
      uint64_t v6 = *a1;
      if ((*a1 & 1) != 0)
      {
        objc_storeWeak((id *)(v6 & 0xFFFFFFFFFFFFFFFELL), (id)obj);
      }

      else
      {
        swift_unownedRelease(v6);
        id v7 = (id *)malloc(8uLL);
        objc_initWeak(v7, (id)obj);
        *a1 = (unint64_t)v7 | 1;
      }
    }
  }

  else
  {
    uint64_t v8 = *a1;
    if (*a1)
    {
      if ((v8 & 1) != 0)
      {
        uint64_t v9 = (void *)(v8 & 0xFFFFFFFFFFFFFFFELL);
        if ((v8 & 0xFFFFFFFFFFFFFFFELL) != 0)
        {
          objc_destroyWeak((id *)(v8 & 0xFFFFFFFFFFFFFFFELL));
          free(v9);
        }
      }

      else
      {
        swift_unownedRelease(v8);
      }
    }

    *a1 = 0LL;
  }

  return a1;
}

void sub_1817985CC(_Unwind_Exception *a1)
{
}

void swift_unknownObjectUnownedDestroy(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (v1)
  {
    if ((v1 & 1) != 0)
    {
      int v2 = (void *)(v1 & 0xFFFFFFFFFFFFFFFELL);
      if ((v1 & 0xFFFFFFFFFFFFFFFELL) != 0)
      {
        objc_destroyWeak((id *)(v1 & 0xFFFFFFFFFFFFFFFELL));
        free(v2);
      }
    }

    else
    {
      swift_unownedRelease(v1);
    }
  }

uint64_t swift_unknownObjectUnownedLoadStrong(uint64_t *a1, uint64_t a2, const char *a3, char *a4)
{
  uint64_t WeakRetained = *a1;
  if (*a1)
  {
    if ((WeakRetained & 1) != 0)
    {
      uint64_t WeakRetained = (uint64_t)objc_loadWeakRetained((id *)(WeakRetained & 0xFFFFFFFFFFFFFFFELL));
      if (!WeakRetained) {
        swift::swift_abortRetainUnowned(0LL, v5, v6, v7);
      }
    }

    else
    {
      swift_unownedRetainStrong(*a1, a2, a3, a4);
    }
  }

  return WeakRetained;
}

uint64_t swift_unknownObjectUnownedTakeStrong(uint64_t *a1, uint64_t a2, const char *a3, char *a4)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    if ((v4 & 1) != 0)
    {
      int v5 = (id *)(v4 & 0xFFFFFFFFFFFFFFFELL);
      id WeakRetained = objc_loadWeakRetained((id *)(v4 & 0xFFFFFFFFFFFFFFFELL));
      if (!WeakRetained) {
        swift::swift_abortRetainUnowned(0LL, v7, v8, v9);
      }
      uint64_t v4 = (uint64_t)WeakRetained;
      if (v5)
      {
        objc_destroyWeak(v5);
        free(v5);
      }
    }

    else
    {
      swift_unownedRetainStrongAndRelease(*a1, a2, a3, a4);
    }
  }

  return v4;
}

void *swift_unknownObjectUnownedCopyInit(void *a1, uint64_t *a2, const char *a3, char *a4)
{
  uint64_t v5 = *a2;
  if (*a2)
  {
    if ((v5 & 1) != 0)
    {
      uint64_t v6 = (id *)(v5 & 0xFFFFFFFFFFFFFFFELL);
      id v7 = (id *)malloc(8uLL);
      objc_copyWeak(v7, v6);
      *a1 = (unint64_t)v7 | 1;
    }

    else
    {
      *a1 = v5;
      swift_unownedRetain(v5, (uint64_t)a2, a3, a4);
    }
  }

  else
  {
    *a1 = 0LL;
  }

  return a1;
}

void sub_181798740(_Unwind_Exception *a1)
{
}

void *swift_unknownObjectUnownedTakeInit(void *result, void *a2)
{
  *double result = *a2;
  return result;
}

uint64_t *swift_unknownObjectUnownedCopyAssign(uint64_t *a1, uint64_t *a2, const char *a3, char *a4)
{
  if (a1 != a2)
  {
    uint64_t v6 = *a2;
    uint64_t v7 = *a1;
    if ((*a2 & 1) != 0)
    {
      if ((v7 & 1) != 0)
      {
        objc_destroyWeak((id *)(v7 & 0xFFFFFFFFFFFFFFFELL));
        objc_copyWeak((id *)(*a1 & 0xFFFFFFFFFFFFFFFELL), (id *)(*a2 & 0xFFFFFFFFFFFFFFFELL));
      }

      else
      {
        swift_unownedRelease(*a1);
        uint64_t v8 = (id *)(*a2 & 0xFFFFFFFFFFFFFFFELL);
        uint64_t v9 = (id *)malloc(8uLL);
        objc_copyWeak(v9, v8);
        *a1 = (unint64_t)v9 | 1;
      }
    }

    else if ((v7 & 1) != 0)
    {
      Class v10 = (id *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      if (v10)
      {
        objc_destroyWeak(v10);
        free(v10);
        uint64_t v6 = *a2;
      }

      *a1 = v6;
      swift_unownedRetain(v6, (uint64_t)a2, a3, a4);
    }

    else if (v6 != v7)
    {
      *a1 = v6;
      swift_unownedRetain(v6, (uint64_t)a2, a3, a4);
      swift_unownedRelease(v7);
    }
  }

  return a1;
}

void sub_181798838(_Unwind_Exception *a1)
{
}

uint64_t *swift_unknownObjectUnownedTakeAssign(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  if (v4)
  {
    if ((v4 & 1) != 0)
    {
      uint64_t v5 = (void *)(v4 & 0xFFFFFFFFFFFFFFFELL);
      if ((v4 & 0xFFFFFFFFFFFFFFFELL) != 0)
      {
        objc_destroyWeak((id *)(v4 & 0xFFFFFFFFFFFFFFFELL));
        free(v5);
      }
    }

    else
    {
      swift_unownedRelease(v4);
    }
  }

  *a1 = *a2;
  return a1;
}

BOOL swift_unknownObjectUnownedIsEqual(const void **a1, id a2, const char *a3, char *a4)
{
  unint64_t v5 = (unint64_t)*a1;
  if (!*a1) {
    return a2 == 0LL;
  }
  if ((v5 & 1) != 0)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(v5 & 0xFFFFFFFFFFFFFFFELL));
    BOOL v6 = WeakRetained == a2;
  }

  else if ((id)v5 == a2)
  {
    swift_unownedCheck((uint64_t)a2, a2, a3, a4);
    return 1LL;
  }

  else
  {
    return 0LL;
  }

  return v6;
}

id *swift_unknownObjectWeakInit(id *location, unint64_t *a2, const char *a3, char *a4)
{
  if ((uint64_t)a2 <= 0)
  {
    *location = a2;
  }

  else if ((*(_BYTE *)((*a2 & 0xFFFFFFFF8LL) + 0x20) & 2) != 0 && (*(_BYTE *)((*a2 & 0xFFFFFFFF8LL) + 0x28) & 2) != 0)
  {
    unint64_t v5 = swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::formWeakReference( a2 + 1,  (uint64_t)a2,  a3,  a4);
    BOOL v6 = (void *)(v5 | 1);
    if (!v5) {
      BOOL v6 = 0LL;
    }
    *location = v6;
  }

  else
  {
    objc_initWeak(location, a2);
  }

  return location;
}

id *swift_unknownObjectWeakAssign(id *a1, unint64_t *a2, const char *a3, char *a4)
{
  return a1;
}

void swift::WeakReference::unknownAssign(id *location, unint64_t *obj, const char *a3, char *a4)
{
  if ((uint64_t)obj <= 0)
  {
    if (*location) {
      BOOL v9 = ((unint64_t)*location & 0x8000000000000001LL) == 1;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      unint64_t v10 = (unint64_t)*location;
      *location = 0LL;
      uint64_t v11 = (unsigned __int128 *)(v10 & 0x7FFFFFFFFFFFFFFELL);
      if ((v10 & 0x7FFFFFFFFFFFFFFELL) != 0)
      {
        double v12 = v11 + 1;
        do
          unsigned __int128 v13 = __ldxp(v12);
        while (__stxp(v13, v12));
        do
        {
          while (1)
          {
            unsigned __int128 v16 = __ldxp(v12);
            uint64_t v15 = *((void *)&v16 + 1);
            unint64_t v14 = v16;
            int v17 = (void)v16 != (void)v13;
            if (*((void *)&v16 + 1) != *((void *)&v13 + 1)) {
              ++v17;
            }
            if (!v17) {
              break;
            }
            if (!__stxp(v16, v12)) {
              goto LABEL_25;
            }
          }
        }

        while (__stxp(__PAIR128__((DWORD2(v13) - 1), v13), v12));
LABEL_25:
        if ((void)v16 == (void)v13 && *((void *)&v16 + 1) == *((void *)&v13 + 1))
        {
          if (DWORD2(v13) != 1) {
            goto LABEL_55;
          }
        }

        else
        {
          do
          {
            unint64_t v21 = (v15 - 1);
            do
            {
              while (1)
              {
                unsigned __int128 v22 = __ldxp(v12);
                int v23 = (void)v22 != v14;
                if (*((void *)&v22 + 1) != v15) {
                  ++v23;
                }
                if (!v23) {
                  break;
                }
                if (!__stxp(v22, v12)) {
                  goto LABEL_32;
                }
              }
            }

            while (__stxp(__PAIR128__(v21, v14), v12));
LABEL_32:
            uint64_t v19 = *((void *)&v22 + 1) ^ v15;
            uint64_t v20 = v22 ^ v14;
            uint64_t v15 = *((void *)&v22 + 1);
            unint64_t v14 = v22;
          }

          while (v20 | v19);
          if ((_DWORD)v21) {
            goto LABEL_55;
          }
        }

        swift_slowDealloc(v11);
      }
    }

    else
    {
      objc_destroyWeak(location);
    }

id swift::WeakReference::unknownLoadStrong(id *this, uint64_t a2, uint64_t a3, char *a4)
{
  unint64_t v4 = (unint64_t)*this;
  if (*this) {
    BOOL v5 = ((unint64_t)*this & 0x8000000000000001LL) == 1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5) {
    return objc_loadWeakRetained(this);
  }
  uint64_t v6 = v4 & 0x7FFFFFFFFFFFFFFELL;
  if ((v4 & 0x7FFFFFFFFFFFFFFELL) != 0)
  {
    BOOL v7 = (unsigned __int128 *)(v6 + 16);
    do
    {
      unsigned __int128 v10 = __ldxp(v7);
      unsigned int v9 = DWORD2(v10);
      uint64_t v8 = v10;
    }

    while (__stxp(v10, v7));
    if ((v10 & 0x100000000LL) == 0)
    {
      uint64_t v11 = HIDWORD(*((void *)&v10 + 1));
      while (v8 + 0x200000000LL >= 0)
      {
        unint64_t v12 = v9;
        unint64_t v13 = v9 | (unint64_t)(v11 << 32);
        do
        {
          while (1)
          {
            unsigned __int128 v14 = __ldxp(v7);
            unsigned int v9 = DWORD2(v14);
            int v15 = (void)v14 != v8;
            if (*((void *)&v14 + 1) != v13) {
              ++v15;
            }
            if (!v15) {
              break;
            }
            if (!__stxp(v14, v7)) {
              goto LABEL_19;
            }
          }
        }

        while (__stxp(__PAIR128__(v12, v8 + 0x200000000LL), v7));
LABEL_19:
        if ((void)v14 == v8 && *((void *)&v14 + 1) == v13) {
          return *(id *)v6;
        }
        uint64_t v11 = HIDWORD(*((void *)&v14 + 1));
        uint64_t v8 = v14;
        if ((v14 & 0x100000000LL) != 0) {
          return 0LL;
        }
      }

      if ((_DWORD)v8 == -1
        || swift::RefCounts<swift::SideTableRefCountBits>::tryIncrementSlow( (swift *)v7,  v8,  (const char *)(v9 | (unint64_t)(v11 << 32)),  a4))
      {
        return *(id *)v6;
      }
    }
  }

  return 0LL;
}

id swift_unknownObjectWeakTakeStrong(id *location, uint64_t a2, uint64_t a3, char *a4)
{
  id v5 = *location;
  if (*location) {
    BOOL v6 = ((unint64_t)*location & 0x8000000000000001LL) == 1;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    *location = 0LL;
    return (id)swift::WeakReference::nativeTakeStrongFromBits((uint64_t)location, (uint64_t)v5, a3, a4);
  }

  else
  {
    id WeakRetained = objc_loadWeakRetained(location);
    objc_destroyWeak(location);
    return WeakRetained;
  }

void swift_unknownObjectWeakDestroy(id *a1)
{
  if (*a1) {
    BOOL v1 = ((unint64_t)*a1 & 0x8000000000000001LL) == 1;
  }
  else {
    BOOL v1 = 1;
  }
  if (!v1)
  {
    objc_destroyWeak(a1);
    return;
  }

  unint64_t v2 = (unint64_t)*a1;
  *a1 = 0LL;
  unint64_t v3 = (unsigned __int128 *)(v2 & 0x7FFFFFFFFFFFFFFELL);
  if ((v2 & 0x7FFFFFFFFFFFFFFELL) != 0)
  {
    unint64_t v4 = v3 + 1;
    do
      unsigned __int128 v5 = __ldxp(v4);
    while (__stxp(v5, v4));
    do
    {
      while (1)
      {
        unsigned __int128 v8 = __ldxp(v4);
        uint64_t v7 = *((void *)&v8 + 1);
        unint64_t v6 = v8;
        int v9 = (void)v8 != (void)v5;
        if (*((void *)&v8 + 1) != *((void *)&v5 + 1)) {
          ++v9;
        }
        if (!v9) {
          break;
        }
        if (!__stxp(v8, v4)) {
          goto LABEL_15;
        }
      }
    }

    while (__stxp(__PAIR128__((DWORD2(v5) - 1), v5), v4));
LABEL_15:
    if ((void)v8 == (void)v5 && *((void *)&v8 + 1) == *((void *)&v5 + 1))
    {
      if (DWORD2(v5) == 1) {
LABEL_32:
      }
        swift_slowDealloc(v3);
    }

    else
    {
      do
      {
        unint64_t v13 = (v7 - 1);
        do
        {
          while (1)
          {
            unsigned __int128 v14 = __ldxp(v4);
            int v15 = (void)v14 != v6;
            if (*((void *)&v14 + 1) != v7) {
              ++v15;
            }
            if (!v15) {
              break;
            }
            if (!__stxp(v14, v4)) {
              goto LABEL_22;
            }
          }
        }

        while (__stxp(__PAIR128__(v13, v6), v4));
LABEL_22:
        uint64_t v11 = *((void *)&v14 + 1) ^ v7;
        uint64_t v12 = v14 ^ v6;
        uint64_t v7 = v14 >> 64;
        unint64_t v6 = v14;
      }

      while (v12 | v11);
      if (!(_DWORD)v13) {
        goto LABEL_32;
      }
    }
  }

id *swift_unknownObjectWeakCopyInit(id *to, id *a2, const char *a3, char *a4)
{
  if (*a2) {
    BOOL v5 = ((unint64_t)*a2 & 0x8000000000000001LL) == 1;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = (unint64_t)*a2 & 0x7FFFFFFFFFFFFFFELL;
    if (v6)
    {
      uint64_t v7 = (unsigned __int128 *)(v6 + 16);
      do
        unsigned __int128 v8 = __ldxp(v7);
      while (__stxp(v8, v7));
      if ((v8 & 0x100000000LL) != 0)
      {
        uint64_t v6 = 0LL;
      }

      else
      {
        do
        {
          unsigned __int128 v10 = __ldxp(v7);
          unint64_t v9 = v10;
        }

        while (__stxp(v10, v7));
        if (DWORD2(v10) == -1) {
LABEL_25:
        }
          swift::swift_abortWeakRetainOverflow((swift *)to, (uint64_t)a2, a3, a4);
        unsigned int v11 = DWORD2(v10);
        uint64_t v12 = HIDWORD(*((void *)&v10 + 1));
        while (1)
        {
          unint64_t v13 = v11 + 1;
          unint64_t v14 = v11 | (unint64_t)(v12 << 32);
          int v15 = (unsigned __int128 *)(v6 + 16);
          do
          {
            while (1)
            {
              unsigned __int128 v16 = __ldxp(v15);
              unsigned int v11 = DWORD2(v16);
              int v17 = (void)v16 != v9;
              if (*((void *)&v16 + 1) != v14) {
                ++v17;
              }
              if (!v17) {
                break;
              }
              if (!__stxp(v16, v15)) {
                goto LABEL_20;
              }
            }
          }

          while (__stxp(__PAIR128__(v13, v9), v15));
LABEL_20:
          if ((void)v16 == v9 && *((void *)&v16 + 1) == v14) {
            break;
          }
          uint64_t v12 = HIDWORD(*((void *)&v16 + 1));
          unint64_t v9 = v16;
          if (DWORD2(v16) == -1) {
            goto LABEL_25;
          }
        }
      }
    }

    if (v6) {
      uint64_t v19 = (void *)(v6 | 1);
    }
    else {
      uint64_t v19 = 0LL;
    }
    *to = v19;
  }

  else
  {
    objc_copyWeak(to, a2);
  }

  return to;
}

id *swift_unknownObjectWeakTakeInit(id *to, id *a2)
{
  if (*a2) {
    BOOL v3 = ((unint64_t)*a2 & 0x8000000000000001LL) == 1;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    id v4 = *a2;
    *a2 = 0LL;
    *to = v4;
  }

  else
  {
    objc_moveWeak(to, a2);
  }

  return to;
}

id *swift_unknownObjectWeakCopyAssign(id *a1, id *a2, const char *a3, char *a4)
{
  return a1;
}

void swift::WeakReference::unknownCopyAssign(id *location, id *from, const char *a3, char *a4)
{
  if (location == from) {
    return;
  }
  if (*location) {
    BOOL v6 = ((unint64_t)*location & 0x8000000000000001LL) == 1;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    objc_destroyWeak(location);
    goto LABEL_32;
  }

  unint64_t v7 = (unint64_t)*location;
  *location = 0LL;
  uint64_t v20 = (unsigned __int128 *)(v7 & 0x7FFFFFFFFFFFFFFELL);
  if ((v7 & 0x7FFFFFFFFFFFFFFELL) != 0)
  {
    unsigned __int128 v8 = v20 + 1;
    do
      unsigned __int128 v9 = __ldxp(v8);
    while (__stxp(v9, v8));
    do
    {
      while (1)
      {
        unsigned __int128 v12 = __ldxp(v8);
        uint64_t v11 = *((void *)&v12 + 1);
        unint64_t v10 = v12;
        int v13 = (void)v12 != (void)v9;
        if (*((void *)&v12 + 1) != *((void *)&v9 + 1)) {
          ++v13;
        }
        if (!v13) {
          break;
        }
        if (!__stxp(v12, v8)) {
          goto LABEL_16;
        }
      }
    }

    while (__stxp(__PAIR128__((DWORD2(v9) - 1), v9), v8));
LABEL_16:
    if ((void)v12 == (void)v9 && *((void *)&v12 + 1) == *((void *)&v9 + 1))
    {
      if (DWORD2(v9) != 1) {
        goto LABEL_32;
      }
    }

    else
    {
      do
      {
        unint64_t v17 = (v11 - 1);
        do
        {
          while (1)
          {
            unsigned __int128 v18 = __ldxp(v8);
            int v19 = (void)v18 != v10;
            if (*((void *)&v18 + 1) != v11) {
              ++v19;
            }
            if (!v19) {
              break;
            }
            if (!__stxp(v18, v8)) {
              goto LABEL_23;
            }
          }
        }

        while (__stxp(__PAIR128__(v17, v10), v8));
LABEL_23:
        uint64_t v15 = *((void *)&v18 + 1) ^ v11;
        uint64_t v16 = v18 ^ v10;
        uint64_t v11 = v18 >> 64;
        unint64_t v10 = v18;
      }

      while (v16 | v15);
      if ((_DWORD)v17) {
        goto LABEL_32;
      }
    }

    swift_slowDealloc(v20);
  }

id *swift_unknownObjectWeakTakeAssign(id *a1, id *a2)
{
  return a1;
}

void swift::WeakReference::unknownTakeAssign(id *to, id *from)
{
  if (to == from) {
    return;
  }
  if (*to) {
    BOOL v4 = ((unint64_t)*to & 0x8000000000000001LL) == 1;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    unint64_t v5 = (unint64_t)*to;
    *to = 0LL;
    BOOL v6 = (unsigned __int128 *)(v5 & 0x7FFFFFFFFFFFFFFELL);
    if ((v5 & 0x7FFFFFFFFFFFFFFELL) != 0)
    {
      unint64_t v7 = v6 + 1;
      do
        unsigned __int128 v8 = __ldxp(v7);
      while (__stxp(v8, v7));
      do
      {
        while (1)
        {
          unsigned __int128 v11 = __ldxp(v7);
          uint64_t v10 = *((void *)&v11 + 1);
          unint64_t v9 = v11;
          int v12 = (void)v11 != (void)v8;
          if (*((void *)&v11 + 1) != *((void *)&v8 + 1)) {
            ++v12;
          }
          if (!v12) {
            break;
          }
          if (!__stxp(v11, v7)) {
            goto LABEL_16;
          }
        }
      }

      while (__stxp(__PAIR128__((DWORD2(v8) - 1), v8), v7));
LABEL_16:
      if ((void)v11 == (void)v8 && *((void *)&v11 + 1) == *((void *)&v8 + 1))
      {
        if (DWORD2(v8) != 1) {
          goto LABEL_34;
        }
      }

      else
      {
        do
        {
          unint64_t v16 = (v10 - 1);
          do
          {
            while (1)
            {
              unsigned __int128 v17 = __ldxp(v7);
              int v18 = (void)v17 != v9;
              if (*((void *)&v17 + 1) != v10) {
                ++v18;
              }
              if (!v18) {
                break;
              }
              if (!__stxp(v17, v7)) {
                goto LABEL_23;
              }
            }
          }

          while (__stxp(__PAIR128__(v16, v9), v7));
LABEL_23:
          uint64_t v14 = *((void *)&v17 + 1) ^ v10;
          uint64_t v15 = v17 ^ v9;
          uint64_t v10 = v17 >> 64;
          unint64_t v9 = v17;
        }

        while (v15 | v14);
        if ((_DWORD)v16) {
          goto LABEL_34;
        }
      }

      swift_slowDealloc(v6);
    }
  }

  else
  {
    objc_destroyWeak(to);
  }

uint64_t swift::objectConformsToObjCProtocol(void *a1, const char *a2)
{
  return [a1 conformsToProtocol:(unint64_t)a2 & 0xFFFFFFFFFFFFFFFELL];
}

swift *swift_dynamicCastTypeToObjCProtocolUnconditional(swift *cls, uint64_t a2, const char *a3, char *a4)
{
  BOOL v4 = (Protocol **)a3;
  uint64_t v5 = a2;
  Class v7 = *(Class *)cls;
  if (*(void *)cls > 0x7FFuLL) {
    LODWORD(v7) = 0;
  }
  if ((int)v7 > 1279)
  {
    Class v8 = (Class)cls;
    if (((_DWORD)v7 - 1280) < 2)
    {
LABEL_7:
      if (!a2) {
        return cls;
      }
      goto LABEL_8;
    }

void sub_181799514( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *swift_dynamicCastTypeToObjCProtocolConditional(uint64_t *a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a2;
  double result = 0LL;
  uint64_t v7 = *a1;
  if ((int)v7 > 1279)
  {
    Class v8 = a1;
LABEL_9:
    if (a2) {
      goto LABEL_10;
    }
    return a1;
  }

  Class v8 = a1;
  if (!(_DWORD)v7) {
    goto LABEL_9;
  }
  if ((_DWORD)v7 != 773)
  {
    Class v8 = a1;
    if ((_DWORD)v7 != 1024) {
      return result;
    }
    goto LABEL_9;
  }

  Class v8 = (uint64_t *)a1[1];
  if (!a2) {
    return a1;
  }
LABEL_10:
  while (([v8 conformsToProtocol:*a3] & 1) != 0)
  {
    ++a3;
    if (!--v4) {
      return a1;
    }
  }

  return 0LL;
}

void *swift_dynamicCastObjCProtocolUnconditional(void *a1, uint64_t a2, Protocol **a3)
{
  if (a2)
  {
    uint64_t v5 = a2;
    do
    {
      if (([a1 conformsToProtocol:*a3] & 1) == 0)
      {
        uint64_t Class = object_getClass(a1);
        Name = class_getName(Class);
        unint64_t v9 = *a3;
        uint64_t v10 = (char *)protocol_getName(v9);
        swift::swift_dynamicCastFailure((swift *)Class, Name, (const char *)v9, v10, 0LL, v11);
      }

      ++a3;
      --v5;
    }

    while (v5);
  }

  return a1;
}

swift::runtime::bincompat *swift_dynamicCastObjCProtocolConditional( swift::runtime::bincompat *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = a1;
  if ((swift::runtime::bincompat::useLegacyObjCBoxingInCasting(a1) & 1) != 0 || !swift::getAsSwiftValue(v5, v6))
  {
    if (!a2) {
      return v5;
    }
    while ((-[swift::runtime::bincompat conformsToProtocol:](v5, "conformsToProtocol:", *a3) & 1) != 0)
    {
      ++a3;
      if (!--a2) {
        return v5;
      }
    }
  }

  return 0LL;
}

uint64_t swift_instantiateObjCClass(objc_class *a1)
{
  return objc_readClassPair();
}

uint64_t swift_getInitializedObjCClass(uint64_t a1)
{
  return a1;
}

BOOL swift_isUniquelyReferenced_nonNull_native(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if ((v1 & 0x8000000000000000LL) == 0) {
    return HIDWORD(v1) == 0;
  }
  if ((_DWORD)v1 == -1) {
    return 0LL;
  }
  BOOL v3 = (unsigned __int128 *)(8 * v1 + 16);
  do
    unsigned __int128 v4 = __ldxp(v3);
  while (__stxp(v4, v3));
  return (v4 & 0x100000000LL | ((unint64_t)v4 >> 33)) == 0;
}

BOOL swift_isUniquelyReferenced_native(BOOL result)
{
  if (result)
  {
    unint64_t v1 = *(void *)(result + 8);
    if ((v1 & 0x8000000000000000LL) != 0)
    {
      if ((_DWORD)v1 == -1) {
        return 0LL;
      }
      BOOL v3 = (unsigned __int128 *)(8 * v1 + 16);
      do
        unsigned __int128 v4 = __ldxp(v3);
      while (__stxp(v4, v3));
      return (v4 & 0x100000000LL | ((unint64_t)v4 >> 33)) == 0;
    }

    else
    {
      return HIDWORD(v1) == 0;
    }
  }

  return result;
}

BOOL swift_isUniquelyReferencedNonObjC_nonNull(unint64_t a1)
{
  if ((a1 & 0x8000000000000000LL) != 0
    || (*(_BYTE *)((*(void *)a1 & 0xFFFFFFFF8LL) + 0x20) & 2) == 0
    || (*(_BYTE *)((*(void *)a1 & 0xFFFFFFFF8LL) + 0x28) & 2) == 0)
  {
    return 0LL;
  }

  unint64_t v2 = *(void *)(a1 + 8);
  if ((v2 & 0x8000000000000000LL) == 0) {
    return HIDWORD(v2) == 0;
  }
  if ((_DWORD)v2 == -1) {
    return 0LL;
  }
  BOOL v3 = (unsigned __int128 *)(8 * v2 + 16);
  do
    unsigned __int128 v4 = __ldxp(v3);
  while (__stxp(v4, v3));
  return (v4 & 0x100000000LL | ((unint64_t)v4 >> 33)) == 0;
}

uint64_t swift_isUniquelyReferenced_nonNull(unint64_t a1)
{
  if ((a1 & 0x8000000000000000LL) != 0) {
    return 0LL;
  }
  if ((*(_BYTE *)((*(void *)a1 & 0xFFFFFFFF8LL) + 0x20) & 2) == 0
    || (*(_BYTE *)((*(void *)a1 & 0xFFFFFFFF8LL) + 0x28) & 2) == 0)
  {
    return objc_isUniquelyReferenced();
  }

  unint64_t v2 = *(void *)(a1 + 8);
  if ((v2 & 0x8000000000000000LL) == 0) {
    return HIDWORD(v2) == 0;
  }
  if ((_DWORD)v2 == -1) {
    return 0LL;
  }
  BOOL v3 = (unsigned __int128 *)(8 * v2 + 16);
  do
    unsigned __int128 v4 = __ldxp(v3);
  while (__stxp(v4, v3));
  return (v4 & 0x100000000LL | ((unint64_t)v4 >> 33)) == 0;
}

BOOL swift_isUniquelyReferencedNonObjC(uint64_t a1)
{
  if (a1 < 1
    || (*(_BYTE *)((*(void *)a1 & 0xFFFFFFFF8LL) + 0x20) & 2) == 0
    || (*(_BYTE *)((*(void *)a1 & 0xFFFFFFFF8LL) + 0x28) & 2) == 0)
  {
    return 0LL;
  }

  unint64_t v2 = *(void *)(a1 + 8);
  if ((v2 & 0x8000000000000000LL) == 0) {
    return HIDWORD(v2) == 0;
  }
  if ((_DWORD)v2 == -1) {
    return 0LL;
  }
  BOOL v3 = (unsigned __int128 *)(8 * v2 + 16);
  do
    unsigned __int128 v4 = __ldxp(v3);
  while (__stxp(v4, v3));
  return (v4 & 0x100000000LL | ((unint64_t)v4 >> 33)) == 0;
}

uint64_t swift_isUniquelyReferenced(uint64_t a1)
{
  if (a1 < 1) {
    return 0LL;
  }
  if ((*(_BYTE *)((*(void *)a1 & 0xFFFFFFFF8LL) + 0x20) & 2) == 0
    || (*(_BYTE *)((*(void *)a1 & 0xFFFFFFFF8LL) + 0x28) & 2) == 0)
  {
    return objc_isUniquelyReferenced();
  }

  unint64_t v2 = *(void *)(a1 + 8);
  if ((v2 & 0x8000000000000000LL) == 0) {
    return HIDWORD(v2) == 0;
  }
  if ((_DWORD)v2 == -1) {
    return 0LL;
  }
  BOOL v3 = (unsigned __int128 *)(8 * v2 + 16);
  do
    unsigned __int128 v4 = __ldxp(v3);
  while (__stxp(v4, v3));
  return (v4 & 0x100000000LL | ((unint64_t)v4 >> 33)) == 0;
}

BOOL swift_isUniquelyReferencedNonObjC_nonNull_bridgeObject(uint64_t a1)
{
  if (a1 < 0) {
    return 0LL;
  }
  unint64_t v1 = (void *)(a1 & 0x8FFFFFFFFFFFFFF8LL);
  if ((a1 & 0x4000000000000000LL) == 0)
  {
    unint64_t v2 = *(void *)((a1 & 0x8FFFFFFFFFFFFFF8LL) + 8);
    if ((v2 & 0x8000000000000000LL) != 0)
    {
      if ((_DWORD)v2 != -1)
      {
        uint64_t v7 = (unsigned __int128 *)(8 * v2 + 16);
        do
        {
          unsigned __int128 v8 = __ldxp(v7);
          unint64_t v4 = v8;
        }

        while (__stxp(v8, v7));
        return (v4 & 0x100000000LL | (v4 >> 33)) == 0;
      }

      return 0LL;
    }

    return HIDWORD(v2) == 0;
  }

  if ((*(_BYTE *)((*v1 & 0xFFFFFFFF8LL) + 0x20) & 2) == 0 || (*(_BYTE *)((*v1 & 0xFFFFFFFF8LL) + 0x28) & 2) == 0) {
    return 0LL;
  }
  unint64_t v2 = *(void *)((a1 & 0x8FFFFFFFFFFFFFF8LL) + 8);
  if ((v2 & 0x8000000000000000LL) == 0) {
    return HIDWORD(v2) == 0;
  }
  if ((_DWORD)v2 == -1) {
    return 0LL;
  }
  BOOL v3 = (unsigned __int128 *)(8 * v2 + 16);
  do
  {
    unsigned __int128 v5 = __ldxp(v3);
    unint64_t v4 = v5;
  }

  while (__stxp(v5, v3));
  return (v4 & 0x100000000LL | (v4 >> 33)) == 0;
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject(uint64_t a1)
{
  if (a1 < 0) {
    return 0LL;
  }
  unint64_t v2 = (void *)(a1 & 0x8FFFFFFFFFFFFFF8LL);
  if (a1 < 0 || (a1 & 0x4000000000000000LL) == 0)
  {
    unint64_t v4 = v2[1];
    if ((v4 & 0x8000000000000000LL) != 0)
    {
      if ((_DWORD)v4 != -1)
      {
        unsigned __int128 v8 = (unsigned __int128 *)(8 * v4 + 16);
        do
        {
          unsigned __int128 v9 = __ldxp(v8);
          unint64_t v6 = v9;
        }

        while (__stxp(v9, v8));
        return (v6 & 0x100000000LL | (v6 >> 33)) == 0;
      }

      return 0LL;
    }

    return HIDWORD(v4) == 0;
  }

  if ((*(_BYTE *)((*v2 & 0xFFFFFFFF8LL) + 0x20) & 2) == 0 || (*(_BYTE *)((*v2 & 0xFFFFFFFF8LL) + 0x28) & 2) == 0) {
    return objc_isUniquelyReferenced();
  }
  unint64_t v4 = v2[1];
  if ((v4 & 0x8000000000000000LL) == 0) {
    return HIDWORD(v4) == 0;
  }
  if ((_DWORD)v4 == -1) {
    return 0LL;
  }
  unsigned __int128 v5 = (unsigned __int128 *)(8 * v4 + 16);
  do
  {
    unsigned __int128 v7 = __ldxp(v5);
    unint64_t v6 = v7;
  }

  while (__stxp(v7, v5));
  return (v6 & 0x100000000LL | (v6 >> 33)) == 0;
}

uint64_t swift_isEscapingClosureAtFileLocation(uint64_t a1, const char *a2, int a3, int a4, int a5, int a6)
{
  if (!a1) {
    return 0LL;
  }
  unint64_t v6 = *(void *)(a1 + 8);
  if ((v6 & 0x8000000000000000LL) != 0)
  {
    if ((_DWORD)v6 != -1)
    {
      unsigned __int128 v7 = (unsigned __int128 *)(8 * v6 + 16);
      do
        unsigned __int128 v8 = __ldxp(v7);
      while (__stxp(v8, v7));
    }
  }

  else if (!HIDWORD(v6))
  {
    return 0LL;
  }

  uint64_t v10 = "closure argument passed as @noescape to Objective-C has escaped";
  if (!a6) {
    uint64_t v10 = "closure argument was escaped in withoutActuallyEscaping block";
  }
  int v11 = 63;
  if (!a6) {
    int v11 = 61;
  }
  swift_asprintf(&v18, "%.*s: file %.*s, line %u, column %u \n", v11, v10, a3, a2, a4, a5);
  swift::printCurrentBacktrace((swift *)2);
  int shouldReportFatalErrorsToDebugger = _swift_shouldReportFatalErrorsToDebugger();
  std::string::size_type v13 = v18;
  if (shouldReportFatalErrorsToDebugger)
  {
    memset(&v16[2], 0, 48);
    uint64_t v17 = 0LL;
    v16[0] = xmmword_189B8E470;
    v16[1] = *(_OWORD *)&off_189B8E480;
    _swift_reportToDebugger(1LL, v18, v16);
  }

  uint64_t v14 = 1LL;
  swift_reportError(1, v13);
  free(v13);
  return v14;
}

uint64_t _swift_getSwiftClassInstanceExtents(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

uint64_t _swift_getObjCClassInstanceExtents(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 32) & 2) != 0)
  {
    return *(unsigned int *)(a1 + 44);
  }

  else
  {
    class_getInstanceSize((Class)a1);
    return 0LL;
  }

void swift_objc_swift3ImplicitObjCEntrypoint( id a1, const char *a2, const char *a3, unint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 *a7)
{
  do
    unsigned __int8 v13 = __ldaxr(a7);
  while (__stlxr(1u, a7));
  if ((v13 & 1) == 0)
  {
    if (swift::runtime::environment::initializeToken != -1) {
      dispatch_once_f( &swift::runtime::environment::initializeToken,  0LL,  (dispatch_function_t)swift::runtime::environment::initialize);
    }
    unsigned int v14 = swift::runtime::environment::SWIFT_DEBUG_IMPLICIT_OBJC_ENTRYPOINT_variable;
    if (swift::runtime::environment::SWIFT_DEBUG_IMPLICIT_OBJC_ENTRYPOINT_variable)
    {
      BOOL v27 = swift::runtime::environment::SWIFT_DEBUG_IMPLICIT_OBJC_ENTRYPOINT_variable != 1;
      uint64_t Class = object_getClass(a1);
      isMetauint64_t Class = class_isMetaClass(Class);
      BOOL v17 = v14 > 2;
      BOOL v18 = v14 > 2;
      if (v17) {
        std::string::size_type v19 = (void (*)(BOOL, const char *, ...))swift::fatalError;
      }
      else {
        std::string::size_type v19 = (void (*)(BOOL, const char *, ...))swift::warning;
      }
      if (a4 >= 0x7FFFFFFF) {
        int v20 = 0x7FFFFFFF;
      }
      else {
        int v20 = a4;
      }
      BOOL v21 = (objc_class *)objc_opt_class();
      Name = class_getName(v21);
      unsigned __int128 v26 = sel_getName(a2);
      uint64_t v22 = 45LL;
      if (isMetaClass) {
        uint64_t v22 = 43LL;
      }
      swift_asprintf( &v37,  "implicit Objective-C entrypoint %c[%s %s] is deprecated and will be removed in Swift 4",  v22,  Name,  v26);
      swift_asprintf(&v36, "%*s", v20, a3);
      int v23 = v36;
      v35[0] = v36;
      v35[1] = a5;
      v35[2] = a6;
      void v35[3] = a5;
      v35[4] = a6;
      v35[5] = "@objc ";
      v34[0] = "add '@objc' to expose this Swift declaration to Objective-C";
      v34[1] = 1LL;
      v34[2] = v35;
      v28[0] = 2LL;
      v28[1] = "implicit-objc-entrypoint";
      v28[2] = 0LL;
      void v28[3] = 1LL;
      __int128 v29 = 0u;
      __int128 v30 = 0u;
      uint64_t v31 = 0LL;
      uint64_t v32 = 1LL;
      int v33 = v34;
      std::string v24 = v37;
      _swift_reportToDebugger(v18, v37, v28);
      v19( v27,  "*** %s:%zu:%zu: %s; add explicit '@objc' to the declaration to emit the Objective-C entrypoint in Swift 4 and su"
        "ppress this message\n",
        v23,
        a5,
        a6,
        v24);
      free(v24);
      free(v23);
    }
  }

uint64_t swift::getNSObjectMetadata(swift *this)
{
  if (qword_18C575A38 != -1) {
    dispatch_once_f( &qword_18C575A38,  &swift::getNSObjectMetadata(void)::$_0::operator() const(void)::TheLazy,  (dispatch_function_t)swift::getNSObjectMetadata(void)::$_0::operator() const(void)::{lambda(void *)#1}::__invoke);
  }
  return swift::getNSObjectMetadata(void)::$_0::operator() const(void)::TheLazy;
}

uint64_t swift::getNSStringMetadata(swift *this)
{
  if (qword_18C486FA0 != -1) {
    dispatch_once_f( &qword_18C486FA0,  &swift::getNSStringMetadata(void)::$_0::operator() const(void)::TheLazy,  (dispatch_function_t)swift::getNSStringMetadata(void)::$_0::operator() const(void)::{lambda(void *)#1}::__invoke);
  }
  return swift::getNSStringMetadata(void)::$_0::operator() const(void)::TheLazy;
}

uint64_t swift::hashable_support::getNSStringHashableConformance(swift::hashable_support *this)
{
  if (qword_18C486FB0 != -1) {
    dispatch_once_f( &qword_18C486FB0,  &swift::hashable_support::getNSStringHashableConformance(void)::$_0::operator() const(void)::TheLazy,  (dispatch_function_t)swift::hashable_support::getNSStringHashableConformance(void)::$_0::operator() const(void)::{lambda(void *)#1}::__invoke);
  }
  return swift::hashable_support::getNSStringHashableConformance(void)::$_0::operator() const(void)::TheLazy;
}

uint64_t swift::getRootSuperclass(swift *this)
{
  if (qword_18C486F68 != -1) {
    dispatch_once_f( &qword_18C486F68,  &swift::getRootSuperclass(void)::SwiftObjectClass,  (dispatch_function_t)swift::getRootSuperclass(void)::$_0::__invoke);
  }
  return swift::getRootSuperclass(void)::SwiftObjectClass;
}

unint64_t *swift_dynamicCastObjCClass(void *a1, uint64_t a2)
{
  if (swift_dynamicCastObjCClass::Override) {
    return (unint64_t *)swift_dynamicCastObjCClass::Override(a1, a2, swift_dynamicCastObjCClassImpl);
  }
  else {
    return swift_dynamicCastObjCClassImpl(a1, a2);
  }
}

unint64_t *swift_dynamicCastObjCClassImpl(void *a1, uint64_t a2)
{
  unint64_t v2 = a1;
  unsigned __int128 v9 = a1;
  if (a1)
  {
    isKindOfClass Class = objc_opt_isKindOfClass();
    if ((isKindOfClass & 1) == 0)
    {
      if ((swift::getNSErrorClass((swift *)isKindOfClass) == a2 || objc_opt_class() == a2)
        && (Class Class = object_getClass(v2),
            unint64_t ObjCClassMetadata = swift_getObjCClassMetadata((unint64_t)Class),
            (uint64_t ErrorWitness = swift::findErrorWitness(ObjCClassMetadata)) != 0))
      {
        return swift::dynamicCastValueToNSError((uint64_t)&v9, ObjCClassMetadata, ErrorWitness, 2);
      }

      else
      {
        return 0LL;
      }
    }
  }

  return (unint64_t *)v2;
}

unint64_t *swift_dynamicCastObjCClassUnconditional( void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (swift_dynamicCastObjCClassUnconditional::Override) {
    return (unint64_t *)swift_dynamicCastObjCClassUnconditional::Override( a1,  a2,  a3,  a4,  a5,  swift_dynamicCastObjCClassUnconditionalImpl);
  }
  else {
    return swift_dynamicCastObjCClassUnconditionalImpl(a1, a2);
  }
}

unint64_t *swift_dynamicCastObjCClassUnconditionalImpl(void *a1, const char *a2)
{
  unint64_t v2 = a1;
  int v11 = a1;
  if (a1)
  {
    isKindOfClass Class = objc_opt_isKindOfClass();
    if ((isKindOfClass & 1) == 0)
    {
      if ((const char *)swift::getNSErrorClass((swift *)isKindOfClass) != a2 && (const char *)objc_opt_class() != a2
        || (Class v5 = object_getClass(v2),
            unint64_t ObjCClassMetadata = swift_getObjCClassMetadata((unint64_t)v5),
            (uint64_t ErrorWitness = swift::findErrorWitness(ObjCClassMetadata)) == 0))
      {
        Class Class = (swift *)object_getClass(v2);
        swift::swift_dynamicCastFailure(Class, a2, 0LL, v10);
      }

      return swift::dynamicCastValueToNSError((uint64_t)&v11, ObjCClassMetadata, ErrorWitness, 2);
    }
  }

  return (unint64_t *)v2;
}

uint64_t swift_dynamicCastObjCClassMetatype(void *a1, uint64_t a2)
{
  if (swift_dynamicCastObjCClassMetatype::Override) {
    return swift_dynamicCastObjCClassMetatype::Override(a1, a2, swift_dynamicCastObjCClassMetatypeImpl);
  }
  return 0LL;
}

void *swift_dynamicCastObjCClassMetatypeImpl(void *a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

uint64_t swift_dynamicCastObjCClassMetatypeUnconditional( swift *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (swift_dynamicCastObjCClassMetatypeUnconditional::Override) {
    return swift_dynamicCastObjCClassMetatypeUnconditional::Override( a1,  a2,  a3,  a4,  a5,  swift_dynamicCastObjCClassMetatypeUnconditionalImpl);
  }
  if ((-[swift isSubclassOfClass:](a1, "isSubclassOfClass:", a2) & 1) == 0) {
    swift::swift_dynamicCastFailure(a1, a2, 0LL, v11);
  }
  return (uint64_t)a1;
}

swift *swift_dynamicCastObjCClassMetatypeUnconditionalImpl(swift *a1, const char *a2)
{
  return a1;
}

uint64_t swift_dynamicCastForeignClassMetatype(uint64_t a1, uint64_t a2)
{
  if (swift_dynamicCastForeignClassMetatype::Override) {
    return swift_dynamicCastForeignClassMetatype::Override(a1, a2, swift_dynamicCastForeignClassMetatypeImpl);
  }
  else {
    return a1;
  }
}

uint64_t swift_dynamicCastForeignClassMetatypeUnconditional( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (swift_dynamicCastForeignClassMetatypeUnconditional::Override) {
    return swift_dynamicCastForeignClassMetatypeUnconditional::Override( a1,  a2,  a3,  a4,  a5,  swift_dynamicCastForeignClassMetatypeUnconditionalImpl);
  }
  else {
    return a1;
  }
}

uint64_t swift_dynamicCastForeignClass(uint64_t a1, uint64_t a2)
{
  if (swift_dynamicCastForeignClass::Override) {
    return swift_dynamicCastForeignClass::Override(a1, a2, swift_dynamicCastForeignClassImpl);
  }
  else {
    return a1;
  }
}

uint64_t swift_dynamicCastForeignClassUnconditional( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (swift_dynamicCastForeignClassUnconditional::Override) {
    return swift_dynamicCastForeignClassUnconditional::Override( a1,  a2,  a3,  a4,  a5,  swift_dynamicCastForeignClassUnconditionalImpl);
  }
  else {
    return a1;
  }
}

unint64_t swift::getNSObjectMetadata(void)::$_0::operator() const(void)::{lambda(void *)#1}::__invoke( unint64_t *a1)
{
  unint64_t v2 = objc_opt_class();
  unint64_t result = swift_getObjCClassMetadata(v2);
  *a1 = result;
  return result;
}

unint64_t swift::getNSStringMetadata(void)::$_0::operator() const(void)::{lambda(void *)#1}::__invoke( unint64_t *a1)
{
  Class v2 = objc_lookUpClass("NSString");
  unint64_t result = swift_getObjCClassMetadata((unint64_t)v2);
  *a1 = result;
  return result;
}

uint64_t swift::hashable_support::getNSStringHashableConformance(void)::$_0::operator() const(void)::{lambda(void *)#1}::__invoke( uint64_t *a1)
{
  if (qword_18C486FA0 != -1) {
    dispatch_once_f( &qword_18C486FA0,  &swift::getNSStringMetadata(void)::$_0::operator() const(void)::TheLazy,  (dispatch_function_t)swift::getNSStringMetadata(void)::$_0::operator() const(void)::{lambda(void *)#1}::__invoke);
  }
  uint64_t result = swift_conformsToProtocolCommon( swift::getNSStringMetadata(void)::$_0::operator() const(void)::TheLazy,  (uint64_t)&protocol descriptor for Hashable);
  *a1 = result;
  return result;
}

uint64_t swift::getRootSuperclass(void)::$_0::__invoke(uint64_t *a1)
{
  uint64_t result = objc_opt_class();
  *a1 = result;
  return result;
}

void *swift_dynamicCastObjCClass::$_0::__invoke(swift_dynamicCastObjCClass::$_0 *this, void *a2)
{
  uint64_t result = (void *)swift::getOverride_dynamicCastObjCClass(this);
  swift_dynamicCastObjCClass::Override = result;
  return result;
}

void *swift_dynamicCastObjCClassUnconditional::$_0::__invoke( swift_dynamicCastObjCClassUnconditional::$_0 *this, void *a2)
{
  uint64_t result = (void *)swift::getOverride_dynamicCastObjCClassUnconditional(this);
  swift_dynamicCastObjCClassUnconditional::Override = result;
  return result;
}

void *swift_dynamicCastObjCClassMetatype::$_0::__invoke( swift_dynamicCastObjCClassMetatype::$_0 *this, void *a2)
{
  uint64_t result = (void *)swift::getOverride_dynamicCastObjCClassMetatype(this);
  swift_dynamicCastObjCClassMetatype::Override = result;
  return result;
}

void *swift_dynamicCastObjCClassMetatypeUnconditional::$_0::__invoke( swift_dynamicCastObjCClassMetatypeUnconditional::$_0 *this, void *a2)
{
  uint64_t result = (void *)swift::getOverride_dynamicCastObjCClassMetatypeUnconditional(this);
  swift_dynamicCastObjCClassMetatypeUnconditional::Override = result;
  return result;
}

void *swift_dynamicCastForeignClassMetatype::$_0::__invoke( swift_dynamicCastForeignClassMetatype::$_0 *this, void *a2)
{
  uint64_t result = (void *)swift::getOverride_dynamicCastForeignClassMetatype(this);
  swift_dynamicCastForeignClassMetatype::Override = result;
  return result;
}

void *swift_dynamicCastForeignClassMetatypeUnconditional::$_0::__invoke( swift_dynamicCastForeignClassMetatypeUnconditional::$_0 *this, void *a2)
{
  uint64_t result = (void *)swift::getOverride_dynamicCastForeignClassMetatypeUnconditional(this);
  swift_dynamicCastForeignClassMetatypeUnconditional::Override = result;
  return result;
}

void *swift_dynamicCastForeignClass::$_0::__invoke(swift_dynamicCastForeignClass::$_0 *this, void *a2)
{
  uint64_t result = (void *)swift::getOverride_dynamicCastForeignClass(this);
  swift_dynamicCastForeignClass::Override = result;
  return result;
}

void *swift_dynamicCastForeignClassUnconditional::$_0::__invoke( swift_dynamicCastForeignClassUnconditional::$_0 *this, void *a2)
{
  uint64_t result = (void *)swift::getOverride_dynamicCastForeignClassUnconditional(this);
  swift_dynamicCastForeignClassUnconditional::Override = result;
  return result;
}

void *std::__hash_table<objc_class *,std::hash<objc_class *>,std::equal_to<objc_class *>,std::allocator<objc_class *>>::__emplace_unique_key_args<objc_class *,objc_class * const&>( uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = HIDWORD(*a2);
  unint64_t v7 = 0x9DDFEA08EB382D69LL * ((8 * *a2 + 8LL) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69LL
     * ((0x9DDFEA08EB382D69LL * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69LL * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69LL
         * ((0x9DDFEA08EB382D69LL * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69LL * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }

    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }

    int v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (Class i = *v11; i; Class i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2) {
            return i;
          }
        }

        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }

          else
          {
            v13 &= v9 - 1;
          }

          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }

  Class i = operator new(0x18uLL);
  *Class i = 0LL;
  i[1] = v8;
  i[2] = *a3;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1LL;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t prime = v18;
    }
    else {
      size_t prime = v17;
    }
    if (prime == 1)
    {
      size_t prime = 2LL;
    }

    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v9 = *(void *)(a1 + 8);
    }

    if (prime > v9) {
      goto LABEL_30;
    }
    if (prime < v9)
    {
      unint64_t v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (uint8x8_t v21 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        unint64_t v20 = std::__next_prime(v20);
      }

      else
      {
        uint64_t v22 = 1LL << -(char)__clz(v20 - 1);
        if (v20 >= 2) {
          unint64_t v20 = v22;
        }
      }

      if (prime <= v20) {
        size_t prime = v20;
      }
      if (prime < v9) {
LABEL_30:
      }
        std::__hash_table<swift::TargetMetadata<swift::InProcess> const*,std::hash<swift::TargetMetadata<swift::InProcess> const*>,std::equal_to<swift::TargetMetadata<swift::InProcess> const*>,std::allocator<swift::TargetMetadata<swift::InProcess> const*>>::__do_rehash<true>( a1,  prime);
    }

    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }

    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }

  uint64_t v23 = *(void *)a1;
  std::string v24 = *(void **)(*(void *)a1 + 8 * v3);
  if (v24)
  {
    *Class i = *v24;
LABEL_55:
    *std::string v24 = i;
    goto LABEL_56;
  }

  *Class i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v23 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v25 = *(void *)(*i + 8LL);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v25 >= v9) {
        v25 %= v9;
      }
    }

    else
    {
      v25 &= v9 - 1;
    }

    std::string v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_55;
  }

void sub_18179A9E8(_Unwind_Exception *a1)
{
}

unint64_t SwiftValueHeader::getEquatableBaseType(SwiftValueHeader *this)
{
  unint64_t v1 = (unint64_t *)((char *)this + 8);
  unint64_t v2 = atomic_load((unint64_t *)this + 1);
  if (!v2)
  {
    uint64_t v4 = swift_conformsToProtocolCommon(*(void *)this, (uint64_t)&protocol descriptor for Hashable);
    if (v4)
    {
      unint64_t v5 = v4;
      unint64_t HashableBaseType = (unint64_t)swift::hashable_support::findHashableBaseType(*(void *)this);
    }

    else
    {
      uint64_t v7 = swift_conformsToProtocolCommon(*(void *)this, (uint64_t)&protocol descriptor for Equatable);
      unint64_t v5 = v7 | 1;
      if (v7) {
        unint64_t HashableBaseType = (unint64_t)swift::findConformingSuperclass(*(void *)this, *(void *)v7) | 1;
      }
      else {
        unint64_t HashableBaseType = 1LL;
      }
    }

    unint64_t v8 = (unint64_t *)((char *)this + 16);
    do
    {
      if (__ldaxr(v8))
      {
        __clrex();
        break;
      }
    }

    while (__stlxr(v5, v8));
    while (!__ldaxr(v1))
    {
      if (!__stlxr(HashableBaseType, v1)) {
        goto LABEL_16;
      }
    }

    __clrex();
LABEL_16:
    unint64_t v2 = atomic_load(v1);
  }

  return v2 & ((uint64_t)(v2 << 63) >> 63) & 0xFFFFFFFFFFFFFFFELL;
}

uint64_t swift::getValueFromSwiftValue(swift *this, __SwiftValue *a2)
{
  return *((void *)this + 1);
}

char *swift::bridgeAnythingToSwiftValueObject(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = *(void *)(a2 - 8);
  uint64_t v7 = *(_DWORD *)(v6 + 80) & 0xF8;
  uint64_t v8 = (v7 + 39) & ~(v7 | 7);
  unint64_t v9 = swift_slowAlloc(v8 + *(void *)(v6 + 64), v7 | 7);
  if (qword_18C486FC0 != -1) {
    dispatch_once_f( &qword_18C486FC0,  &getSwiftValueClass(void)::$_0::operator() const(void)::TheLazy,  (dispatch_function_t)getSwiftValueClass(void)::$_0::operator() const(void)::{lambda(void *)#1}::__invoke);
  }
  uint8x8_t v10 = (char *)objc_constructInstance((Class)getSwiftValueClass(void)::$_0::operator() const(void)::TheLazy, v9);
  *((void *)v10 + 2) = 0LL;
  *((void *)v10 + 3) = 0LL;
  *((void *)v10 + 1) = a2;
  uint64_t v11 = 16LL;
  if (a3) {
    uint64_t v11 = 32LL;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a2 - 8) + v11))(&v10[v8], a1, a2);
  return v10;
}

swift *swift::getAsSwiftValue(swift *this, objc_object *a2)
{
  Class Class = object_getClass(this);
  if (qword_18C486FC0 != -1) {
    dispatch_once_f( &qword_18C486FC0,  &getSwiftValueClass(void)::$_0::operator() const(void)::TheLazy,  (dispatch_function_t)getSwiftValueClass(void)::$_0::operator() const(void)::{lambda(void *)#1}::__invoke);
  }
  else {
    return 0LL;
  }
}

uint64_t swift::findSwiftValueConformances(uint64_t a1)
{
  unint64_t v1 = *(unsigned int *)(a1 + 8);
  if ((v1 & 0x40000000) != 0 && *(void *)(a1 + 16)) {
    return 0LL;
  }
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    uint64_t v4 = 0LL;
    unint64_t v5 = (uint64_t *)(a1 + 8 * ((v1 >> 30) & 1) + 16);
    uint64_t v6 = 8 * v3;
    while (1)
    {
      uint64_t v7 = *v5;
      if ((*v5 & 1) == 0) {
        break;
      }
      if (!v4) {
        uint64_t v4 = (void *)objc_opt_class();
      }
      if (([v4 conformsToProtocol:v7 & 0xFFFFFFFFFFFFFFFELL] & 1) == 0) {
        break;
      }
      ++v5;
      v6 -= 8LL;
      if (!v6) {
        return 1LL;
      }
    }

    return 0LL;
  }

  return 1LL;
}

void sub_18179B364(_Unwind_Exception *a1)
{
}

double swift::Lazy<std::unordered_set<swift::TargetMetadata<swift::InProcess> const*,std::hash<swift::TargetMetadata<swift::InProcess> const*>,std::equal_to<swift::TargetMetadata<swift::InProcess> const*>,std::allocator<swift::TargetMetadata<swift::InProcess> const*>>>::defaultInitCallback( uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  return result;
}

uint64_t getSwiftValueClass(void)::$_0::operator() const(void)::{lambda(void *)#1}::__invoke(uint64_t *a1)
{
  uint64_t result = objc_opt_class();
  *a1 = result;
  return result;
}

id _quickLookObjectForPointer(id *a1)
{
  id v1 = *a1;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    unint64_t v2 = (void *)[v1 debugQuickLookObject];
    id v3 = v2;

    return v2;
  }

  return v1;
}

void swift::setUpObjCRuntimeGetImageNameFromClass(swift *this)
{
}

uint64_t replacementGetImageNameFromClass(objc_class *a1, const char **a2)
{
  if (a1
    && ((uint64_t)a1[4].isa & 2) != 0
    && a1[8].isa
    && (uint64_t v4 = (const char *)dyld_image_path_containing_address(), (*a2 = v4) != 0LL))
  {
    return 1LL;
  }

  else
  {
    return defaultGetImageNameFromClass(a1, a2);
  }

uint64_t (*__tsan_on_initialize())(void)
{
  _swift_tsan_enabled = 1;
  _swift_tsan_acquire = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "__tsan_acquire");
  _swift_tsan_release = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "__tsan_release");
  uint64_t result = (uint64_t (*)(void))dlsym((void *)0xFFFFFFFFFFFFFFFFLL, "__tsan_on_initialize");
  if (result) {
    return (uint64_t (*)(void))result();
  }
  return result;
}

uint64_t anonymous namespace'::error( _anonymous_namespace_ *this, const char *a2, const char *a3, const char *a4)
{
  if (a3) {
    snprintf(__str, 0x400uLL, "%s%s at %s:%u\n");
  }
  else {
    snprintf(__str, 0x400uLL, "%s%s\n");
  }
  return asl_log(0LL, 0LL, 3, "%s", __str);
}

void __swift::__runtime::llvm::report_bad_alloc_error( __swift::__runtime::llvm *this, const char *a2)
{
}

void __swift::__runtime::llvm::deallocate_buffer(__swift::__runtime::llvm *this, void *a2)
{
}

void *__swift::__runtime::llvm::SmallVectorBase<unsigned int>::mallocForGrow( uint64_t a1, unint64_t a2, uint64_t a3, unint64_t *a4)
{
  if (HIDWORD(a2)) {
    __swift::__runtime::llvm::report_bad_alloc_error( (__swift::__runtime::llvm *)"SmallVector capacity overflow during allocation",  (const char *)1);
  }
  uint64_t v4 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v4 == -1) {
    __swift::__runtime::llvm::report_bad_alloc_error( (__swift::__runtime::llvm *)"SmallVector capacity unable to grow",  (const char *)1);
  }
  unint64_t v5 = (2 * v4) | 1;
  if (v5 <= a2) {
    unint64_t v5 = a2;
  }
  if (v5 >= 0xFFFFFFFF) {
    unint64_t v5 = 0xFFFFFFFFLL;
  }
  *a4 = v5;
  unint64_t v6 = v5 * a3;
  uint64_t result = malloc(v5 * a3);
  if (!result && (v6 || (uint64_t result = malloc(1uLL)) == 0LL)) {
    __swift::__runtime::llvm::report_bad_alloc_error((__swift::__runtime::llvm *)"Allocation failed", (const char *)1);
  }
  return result;
}

void *__swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod( uint64_t a1, const void *a2, unint64_t a3, uint64_t a4)
{
  if (HIDWORD(a3)) {
    __swift::__runtime::llvm::report_bad_alloc_error( (__swift::__runtime::llvm *)"SmallVector capacity overflow during allocation",  (const char *)1);
  }
  uint64_t v5 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v5 == -1) {
    __swift::__runtime::llvm::report_bad_alloc_error( (__swift::__runtime::llvm *)"SmallVector capacity unable to grow",  (const char *)1);
  }
  unint64_t v8 = (2 * v5) | 1;
  if (v8 <= a3) {
    unint64_t v8 = a3;
  }
  if (v8 >= 0xFFFFFFFF) {
    uint64_t v9 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v9 = v8;
  }
  uint8x8_t v10 = *(void **)a1;
  uint64_t v11 = v9 * a4;
  if (*(const void **)a1 == a2)
  {
    unint64_t v13 = malloc(v9 * a4);
    if (!v13 && (v11 || (unint64_t v13 = malloc(1uLL)) == 0LL)) {
LABEL_20:
    }
      __swift::__runtime::llvm::report_bad_alloc_error((__swift::__runtime::llvm *)"Allocation failed", (const char *)1);
    uint64_t result = memcpy(v13, a2, *(unsigned int *)(a1 + 8) * a4);
  }

  else
  {
    uint64_t result = realloc(v10, v9 * a4);
    unint64_t v13 = result;
    if (!result)
    {
      if (v11) {
        goto LABEL_20;
      }
      uint64_t result = malloc(1uLL);
      unint64_t v13 = result;
      if (!result) {
        goto LABEL_20;
      }
    }
  }

  *(void *)a1 = v13;
  *(_DWORD *)(a1 + 12) = v9;
  return result;
}

void *__swift::__runtime::llvm::SmallVectorBase<unsigned long long>::grow_pod( uint64_t a1, const void *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4 == -1) {
    __swift::__runtime::llvm::report_bad_alloc_error( (__swift::__runtime::llvm *)"SmallVector capacity unable to grow",  (const char *)1);
  }
  unint64_t v8 = (2 * v4) | 1;
  if (v8 <= a3) {
    unint64_t v9 = a3;
  }
  else {
    unint64_t v9 = v8;
  }
  uint8x8_t v10 = *(void **)a1;
  unint64_t v11 = v9 * a4;
  if (v10 == a2)
  {
    unint64_t v13 = malloc(v9 * a4);
    if (!v13 && (v11 || (unint64_t v13 = malloc(1uLL)) == 0LL)) {
LABEL_16:
    }
      __swift::__runtime::llvm::report_bad_alloc_error((__swift::__runtime::llvm *)"Allocation failed", (const char *)1);
    uint64_t result = memcpy(v13, a2, *(void *)(a1 + 8) * a4);
  }

  else
  {
    uint64_t result = realloc(v10, v9 * a4);
    unint64_t v13 = result;
    if (!result)
    {
      if (v11) {
        goto LABEL_16;
      }
      uint64_t result = malloc(1uLL);
      unint64_t v13 = result;
      if (!result) {
        goto LABEL_16;
      }
    }
  }

  *(void *)a1 = v13;
  *(void *)(a1 + 16) = v9;
  return result;
}

uint64_t __swift::__runtime::llvm::StringRef::compare_insensitive( unsigned __int8 **a1, unsigned __int8 *a2, unint64_t a3)
{
  unint64_t v3 = (unint64_t)a1[1];
  if (a3 >= v3) {
    unint64_t v4 = (unint64_t)a1[1];
  }
  else {
    unint64_t v4 = a3;
  }
  if (v4)
  {
    uint64_t v5 = *a1;
    while (1)
    {
      int v7 = *v5++;
      unsigned __int8 v6 = v7;
      unsigned __int8 v8 = v7 + 32;
      int v10 = *a2++;
      unsigned __int8 v9 = v10;
      unsigned __int8 v11 = v10 + 32;
      if (v6 != v9) {
        break;
      }
      if (!--v4) {
        goto LABEL_12;
      }
    }

    else {
      return 1LL;
    }
  }

  else
  {
LABEL_12:
    BOOL v12 = v3 == a3;
    if (v3 < a3) {
      unsigned int v13 = -1;
    }
    else {
      unsigned int v13 = 1;
    }
    if (v12) {
      return 0LL;
    }
    else {
      return v13;
    }
  }

uint64_t __swift::__runtime::llvm::StringRef::find_first_not_of( void *a1, unsigned __int8 *a2, uint64_t a3, unint64_t a4)
{
  {
    unsigned int v4 = *a2++;
    *(void *)((char *)&v7 + (((unint64_t)v4 >> 3) & 0x18)) |= 1LL << v4;
  }

  unint64_t v5 = a1[1];
  if (v5 <= a4) {
    return -1LL;
  }
  while (((*(void *)((char *)&v7 + (((unint64_t)*(unsigned __int8 *)(*a1 + a4) >> 3) & 0x18)) >> *(_BYTE *)(*a1 + a4)) & 1) != 0)
  {
    if (v5 == ++a4) {
      return -1LL;
    }
  }

  return a4;
}

uint64_t __swift::__runtime::llvm::StringRef::find_last_not_of( void *a1, unsigned __int8 *a2, uint64_t a3, unint64_t a4)
{
  {
    unsigned int v4 = *a2++;
    *(void *)((char *)&v10 + (((unint64_t)v4 >> 3) & 0x18)) |= 1LL << v4;
  }

  if (a1[1] >= a4) {
    unint64_t v5 = a4;
  }
  else {
    unint64_t v5 = a1[1];
  }
  while (v5)
  {
    unint64_t v6 = v5 - 1;
    unint64_t v7 = *(unsigned __int8 *)(*a1 + v5 - 1);
    uint64_t v8 = *(void *)((char *)&v10 + ((v7 >> 3) & 0x18)) >> v7;
    unint64_t v5 = v6;
    if ((v8 & 1) == 0) {
      return v6;
    }
  }

  return -1LL;
}

uint64_t __swift::__runtime::llvm::consumeUnsignedInteger( __swift::__runtime::llvm *this, __swift::__runtime::llvm::StringRef *a2, unint64_t *a3, unint64_t *a4)
{
  unint64_t v4 = *((void *)this + 1);
  if ((_DWORD)a2)
  {
    if (!v4) {
      return 1LL;
    }
    goto LABEL_3;
  }

  if (v4 < 2)
  {
    LODWORD(a2) = 10;
    if (!v4) {
      return 1LL;
    }
    goto LABEL_3;
  }

  uint64_t v13 = *(void *)this;
  if (**(_WORD **)this == 30768 || *(_WORD *)v13 == 22576)
  {
    v4 -= 2LL;
    LODWORD(a2) = 16;
    *(void *)this = v13 + 2;
    *((void *)this + 1) = v4;
    if (!v4) {
      return 1LL;
    }
  }

  else if (*(_WORD *)v13 == 25136 || *(_WORD *)v13 == 16944)
  {
    LODWORD(a2) = 2;
    v4 -= 2LL;
    *(void *)this = v13 + 2;
    *((void *)this + 1) = v4;
    if (!v4) {
      return 1LL;
    }
  }

  else
  {
    if (*(_WORD *)v13 == 28464)
    {
      uint64_t v14 = v13 + 2;
      v4 -= 2LL;
LABEL_34:
      LODWORD(a2) = 8;
      *(void *)this = v14;
      *((void *)this + 1) = v4;
      if (!v4) {
        return 1LL;
      }
      goto LABEL_3;
    }

    if (*(_BYTE *)v13 == 48)
    {
      int v15 = *(unsigned __int8 *)(v13 + 1);
      uint64_t v14 = v13 + 1;
      if ((v15 - 48) <= 9)
      {
        --v4;
        goto LABEL_34;
      }
    }

    LODWORD(a2) = 10;
  }

uint64_t __swift::__runtime::llvm::consumeSignedInteger( __swift::__runtime::llvm *this, __swift::__runtime::llvm::StringRef *a2, unint64_t *a3, unint64_t *a4)
{
  uint64_t v6 = *((void *)this + 1);
  if (v6 && **(_BYTE **)this == 45)
  {
    *(void *)&__int128 v11 = *(void *)this + 1LL;
    *((void *)&v11 + 1) = v6 - 1;
    LODWORD(result) = __swift::__runtime::llvm::consumeUnsignedInteger((__swift::__runtime::llvm *)&v11, a2, &v12, a4);
    unint64_t v8 = v12;
    if (v12 > 0x8000000000000000LL) {
      uint64_t result = 1LL;
    }
    else {
      uint64_t result = result;
    }
    if ((result & 1) == 0)
    {
      *(_OWORD *)this = v11;
      unint64_t v9 = -(uint64_t)v8;
LABEL_11:
      *a3 = v9;
    }
  }

  else
  {
    char v10 = __swift::__runtime::llvm::consumeUnsignedInteger(this, a2, &v12, a4);
    uint64_t result = 1LL;
    if ((v10 & 1) == 0)
    {
      unint64_t v9 = v12;
      if ((v12 & 0x8000000000000000LL) == 0)
      {
        uint64_t result = 0LL;
        goto LABEL_11;
      }
    }
  }

  return result;
}

BOOL __swift::__runtime::llvm::getAsSignedInteger( _BYTE *a1, uint64_t a2, __swift::__runtime::llvm::StringRef *a3, unint64_t *a4)
{
  *(void *)&__int128 v7 = a1;
  *((void *)&v7 + 1) = a2;
  if (a2 && *a1 == 45)
  {
    *(void *)&__int128 v8 = a1 + 1;
    *((void *)&v8 + 1) = a2 - 1;
    if ((__swift::__runtime::llvm::consumeUnsignedInteger( (__swift::__runtime::llvm *)&v8,  a3,  (unint64_t *)&v9,  a4) & 1) == 0 && (unint64_t)v9 < 0x8000000000000001LL)
    {
      __int128 v7 = v8;
      uint64_t v5 = -v9;
LABEL_8:
      *a4 = v5;
      return *((void *)&v7 + 1) != 0LL;
    }
  }

  else if ((__swift::__runtime::llvm::consumeUnsignedInteger( (__swift::__runtime::llvm *)&v7,  a3,  (unint64_t *)&v9,  a4) & 1) == 0)
  {
    uint64_t v5 = v9;
    if ((v9 & 0x8000000000000000LL) == 0) {
      goto LABEL_8;
    }
  }

  return 1LL;
}

unint64_t __swift::__runtime::llvm::hash_value(void *a1, uint64_t a2)
{
  return __swift::__runtime::llvm::hashing::detail::hash_combine_range_impl<swift::TargetMetadata<swift::InProcess> const* const>( a1,  (uint64_t)a1 + a2);
}

swift::Demangle::__runtime::Context *swift::Demangle::__runtime::Context::Context( swift::Demangle::__runtime::Context *this)
{
  unint64_t v2 = (char *)operator new(0x240uLL);
  *((void *)v2 + 2) = 0LL;
  *((void *)v2 + 3) = 0LL;
  *((void *)v2 + 4) = 2400LL;
  *((void *)v2 + 5) = 0LL;
  v2[48] = 0;
  *(void *)unint64_t v2 = off_189B8E500;
  *((void *)v2 + 1) = 0LL;
  *((void *)v2 + 71) = 0LL;
  *((void *)v2 + 8) = 0LL;
  *((void *)v2 + 9) = 0LL;
  *((void *)v2 + 7) = 0LL;
  v2[80] = 0;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_OWORD *)(v2 + 248) = 0u;
  *((_DWORD *)v2 + 134) = 0;
  *(void *)this = v2;
  *(_OWORD *)(v2 + 88) = 0u;
  v2 += 88;
  *((_OWORD *)v2 + 11) = 0u;
  *((_OWORD *)v2 + 12) = 0u;
  *((_OWORD *)v2 + 13) = 0u;
  *((_OWORD *)v2 + 14) = 0u;
  *((_OWORD *)v2 + 15) = 0u;
  *((_OWORD *)v2 + 16) = 0u;
  *((_OWORD *)v2 + 17) = 0u;
  *((_OWORD *)v2 + 18) = 0u;
  *((_OWORD *)v2 + 19) = 0u;
  *((_OWORD *)v2 + 20) = 0u;
  *((_OWORD *)v2 + 21) = 0u;
  *((_OWORD *)v2 + 22) = 0u;
  *((_OWORD *)v2 + 23) = 0u;
  *((_OWORD *)v2 + 24) = 0u;
  *((_OWORD *)v2 + 25) = 0u;
  *((_OWORD *)v2 + 26) = 0u;
  *((_OWORD *)v2 + 27) = 0u;
  return this;
}

void swift::Demangle::__runtime::Context::~Context(swift::Demangle::__runtime::Context *this)
{
  uint64_t v1 = *(void *)this;
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
}

unsigned int *swift::Demangle::__runtime::Context::demangleSymbolAsNode( swift::Demangle::__runtime::NodeFactory **a1, _WORD *a2, unint64_t a3)
{
  int ManglingPrefixLength = swift::Demangle::__runtime::getManglingPrefixLength((uint64_t)a2, a3);
  __int128 v7 = *a1;
  if (!ManglingPrefixLength) {
    return swift::Demangle::__runtime::demangleOldSymbolAsNode(a2, a3, v7);
  }
  uint64_t v13 = 0LL;
  unint64_t v8 = swift::Demangle::__runtime::Demangler::demangleSymbol((uint64_t)v7, a2, a3, v12);
  uint64_t v9 = v13;
  if (v13 == v12)
  {
    uint64_t v10 = 4LL;
    uint64_t v9 = v12;
    goto LABEL_7;
  }

  if (v13)
  {
    uint64_t v10 = 5LL;
LABEL_7:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }

  return (unsigned int *)v8;
}

void swift::Demangle::__runtime::Context::demangleSymbolAsString( swift::Demangle::__runtime::NodeFactory **a1@<X0>, _WORD *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  int ManglingPrefixLength = swift::Demangle::__runtime::getManglingPrefixLength((uint64_t)a2, a3);
  __int128 v11 = *a1;
  if (!ManglingPrefixLength)
  {
    unint64_t v12 = (unint64_t)swift::Demangle::__runtime::demangleOldSymbolAsNode(a2, a3, v11);
    goto LABEL_6;
  }

  unint64_t v25 = 0LL;
  unint64_t v12 = swift::Demangle::__runtime::Demangler::demangleSymbol((uint64_t)v11, a2, a3, __p);
  uint64_t v13 = v25;
  if (v25 != __p)
  {
    if (v25)
    {
      uint64_t v14 = 5LL;
      goto LABEL_12;
    }

BOOL swift::Demangle::__runtime::Context::isThunkSymbol(uint64_t *a1, char *a2, unint64_t a3)
{
  size_t v3 = a3;
  if (!swift::Demangle::__runtime::getManglingPrefixLength((uint64_t)a2, a3))
  {
    if (v3 < 2) {
      return 0LL;
    }
    if (*(_WORD *)a2 != 21599) {
      return 0LL;
    }
    unint64_t v9 = v3 - 2;
    if (v3 - 2 < 2) {
      return 0LL;
    }
    uint64_t v10 = a2 + 2;
    if (*((_WORD *)a2 + 1) != 28500 && *v10 != 20308)
    {
      if (v9 < 3) {
        return 0LL;
      }
      BOOL v11 = *v10 == 16720 && a2[4] == 95;
      if (!v11 && (v9 < 4 || *(_DWORD *)v10 != 1601126736)) {
        return 0LL;
      }
    }

    return 1LL;
  }

  if (a2[v3 - 1] - 48 > 9)
  {
LABEL_10:
    if (!v3) {
      return 0LL;
    }
    goto LABEL_11;
  }

  if (!v3) {
    return 0LL;
  }
  uint64_t v6 = memchr(a2, 46, v3);
  if (v6)
  {
    size_t v7 = v3 >= v6 - a2 ? v6 - a2 : v3;
    if (v6 - a2 != -1)
    {
      size_t v3 = v7;
      goto LABEL_10;
    }
  }

uint64_t swift::Demangle::__runtime::demangleSymbolAsString@<X0>( _WORD *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  unint64_t v8 = (char *)operator new(0x240uLL);
  *((void *)v8 + 2) = 0LL;
  *((void *)v8 + 3) = 0LL;
  *((void *)v8 + 4) = 2400LL;
  *((void *)v8 + 5) = 0LL;
  v8[48] = 0;
  *(void *)unint64_t v8 = off_189B8E500;
  *((void *)v8 + 1) = 0LL;
  *((void *)v8 + 71) = 0LL;
  *((void *)v8 + 8) = 0LL;
  *((void *)v8 + 9) = 0LL;
  *((void *)v8 + 7) = 0LL;
  v8[80] = 0;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 136) = 0u;
  *(_OWORD *)(v8 + 152) = 0u;
  *(_OWORD *)(v8 + 168) = 0u;
  *(_OWORD *)(v8 + 184) = 0u;
  *(_OWORD *)(v8 + 200) = 0u;
  *(_OWORD *)(v8 + 216) = 0u;
  *(_OWORD *)(v8 + 232) = 0u;
  *(_OWORD *)(v8 + 248) = 0u;
  *((_DWORD *)v8 + 134) = 0;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 264) = 0u;
  *(_OWORD *)(v8 + 280) = 0u;
  *(_OWORD *)(v8 + 296) = 0u;
  *(_OWORD *)(v8 + 312) = 0u;
  *(_OWORD *)(v8 + 328) = 0u;
  *(_OWORD *)(v8 + 344) = 0u;
  *(_OWORD *)(v8 + 360) = 0u;
  *(_OWORD *)(v8 + 376) = 0u;
  *(_OWORD *)(v8 + 392) = 0u;
  *(_OWORD *)(v8 + 408) = 0u;
  *(_OWORD *)(v8 + 424) = 0u;
  *(_OWORD *)(v8 + 440) = 0u;
  *(_OWORD *)(v8 + 456) = 0u;
  *(_OWORD *)(v8 + 472) = 0u;
  *(_OWORD *)(v8 + 488) = 0u;
  *(_OWORD *)(v8 + 504) = 0u;
  *(_OWORD *)(v8 + 520) = 0u;
  uint64_t v10 = (swift::Demangle::__runtime::NodeFactory *)v8;
  swift::Demangle::__runtime::Context::demangleSymbolAsString(&v10, a1, a2, a3, a4);
  return (*(uint64_t (**)(char *))(*(void *)v8 + 8LL))(v8);
}

void swift::Demangle::__runtime::failAssert( swift::Demangle::__runtime *this, const char *a2, swift::Demangle::__runtime *a3, swift::Demangle::__runtime::Node *a4, const char *a5)
{
  double NodeTreeAsString = swift::Demangle::__runtime::getNodeTreeAsString(a3, &v13);
  if ((v13.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    unint64_t v12 = &v13;
  }
  else {
    unint64_t v12 = (std::string *)v13.__r_.__value_.__r.__words[0];
  }
  swift::Demangle::__runtime::fatal( 0LL,  "%s:%u: assertion failed for Node %p: %s\n%s:%u: Node %p is:\n%s\n",  v9,  v10,  NodeTreeAsString,  this,  a2,  a3,  a4,  this,  a2,  a3,  v12);
}

uint64_t swift::Demangle::__runtime::isContext(int a1)
{
  uint64_t result = 1LL;
  switch(a1)
  {
    case 0:
    case 1:
    case 21:
    case 24:
    case 29:
    case 31:
    case 33:
    case 50:
    case 51:
    case 61:
    case 70:
    case 71:
    case 76:
    case 98:
    case 100:
    case 103:
    case 104:
    case 117:
    case 125:
    case 126:
    case 141:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 167:
    case 168:
    case 169:
    case 178:
    case 179:
    case 180:
    case 181:
    case 204:
    case 215:
    case 218:
    case 219:
    case 220:
    case 233:
    case 234:
    case 250:
    case 251:
    case 254:
    case 257:
    case 309:
    case 320:
      return result;
    default:
      uint64_t result = 0LL;
      break;
  }

  return result;
}

uint64_t swift::Demangle::__runtime::isFunctionAttr(int a1)
{
  int v1 = a1 - 53;
  uint64_t result = 1LL;
  switch(v1)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 5:
    case 6:
    case 7:
    case 24:
    case 33:
    case 34:
    case 38:
    case 39:
    case 40:
    case 42:
    case 43:
    case 91:
    case 107:
    case 111:
    case 117:
    case 118:
    case 203:
    case 224:
    case 234:
    case 235:
    case 266:
    case 275:
    case 276:
    case 277:
    case 279:
    case 280:
    case 287:
      return result;
    default:
      uint64_t result = 0LL;
      break;
  }

  return result;
}

_BYTE *swift::Demangle::__runtime::makeSymbolicMangledNameStringRef(_BYTE *this, const char *a2)
{
  if (this)
  {
    unsigned int v2 = *this;
    if (*this)
    {
      size_t v3 = this;
      do
      {
        if (v2 >= 0x18) {
          uint64_t v4 = 8LL * ((v2 & 0xF8) == 24);
        }
        else {
          uint64_t v4 = 4LL;
        }
        uint64_t v5 = &v3[v4];
        unsigned int v6 = v5[1];
        size_t v3 = v5 + 1;
        unsigned int v2 = v6;
      }

      while (v6);
    }
  }

  return this;
}

uint64_t swift::Demangle::__runtime::getManglingPrefixLength(uint64_t a1, unint64_t a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 3)
  {
    if (a2 != 2 || *(_WORD *)a1 != 21284 && *(_WORD *)a1 != 29476) {
      return 0LL;
    }
    return 2LL;
  }

  if (*(_WORD *)a1 == 21599 && *(_BYTE *)(a1 + 2) == 48) {
    return 3LL;
  }
  if (*(_WORD *)a1 == 21284) {
    return 2LL;
  }
  if (*(_WORD *)a1 == 9311 && *(_BYTE *)(a1 + 2) == 83) {
    return 3LL;
  }
  if (*(_WORD *)a1 == 29476) {
    return 2LL;
  }
  if (*(_WORD *)a1 == 9311 && *(_BYTE *)(a1 + 2) == 115) {
    return 3LL;
  }
  if (a2 < 0xE) {
    return 0LL;
  }
  if (*(void *)a1 != 0x74666977735F5F40LL || *(void *)(a1 + 6) != 0x5F6F7263616D7466LL) {
    return 0LL;
  }
  return 14LL;
}

BOOL swift::Demangle::__runtime::isSwiftSymbol(_WORD *a1, unint64_t a2)
{
  return a2 >= 2 && *a1 == 21599
      || swift::Demangle::__runtime::getManglingPrefixLength((uint64_t)a1, a2) != 0;
}

BOOL swift::Demangle::__runtime::isSwiftSymbol(swift::Demangle::__runtime *this, const char *a2)
{
  if (this)
  {
    size_t v3 = strlen((const char *)this);
    if (v3 >= 2 && *(_WORD *)this == 21599) {
      return 1LL;
    }
  }

  else
  {
    size_t v3 = 0LL;
  }

  return swift::Demangle::__runtime::getManglingPrefixLength((uint64_t)this, v3) != 0;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleType( uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  size_t v7 = (void *)a4[3];
  if (v7)
  {
    if (v7 == a4)
    {
      unsigned __int128 v26 = v25;
      (*(void (**)(void *, _BYTE *))(*a4 + 24LL))(a4, v25);
    }

    else
    {
      unsigned __int128 v26 = (_BYTE *)a4[3];
      a4[3] = 0LL;
    }
  }

  else
  {
    unsigned __int128 v26 = 0LL;
  }

  swift::Demangle::__runtime::Demangler::DemangleInitRAII::DemangleInitRAII((uint64_t)&v27, a1, a2, a3, (uint64_t)v25);
  unint64_t v12 = v26;
  if (v26 == v25)
  {
    uint64_t v13 = 4LL;
    unint64_t v12 = v25;
  }

  else
  {
    if (!v26) {
      goto LABEL_11;
    }
    uint64_t v13 = 5LL;
  }

  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_11:
  unint64_t v14 = *(void *)(a1 + 64);
  while (*(void *)(a1 + 72) < v14)
  {
    int v15 = swift::Demangle::__runtime::Demangler::demangleOperator( (swift::Demangle::__runtime::Demangler *)a1,  v8,  v9,  v10,  v11);
    if (!v15) {
      break;
    }
    size_t v35 = v15;
    swift::Demangle::__runtime::Vector<swift::Demangle::__runtime::Node *>::push_back( (const void **)(a1 + 88),  (uint64_t *)&v35,  (void *)a1);
  }

  int v16 = *(_DWORD *)(a1 + 96);
  if (!v16 || (unsigned int v17 = v16 - 1, Node = *(void *)(*(void *)(a1 + 88) + 8LL * v17), *(_DWORD *)(a1 + 96) = v17, !Node)) {
    unint64_t Node = swift::Demangle::__runtime::NodeFactory::createNode( (void *)a1,  221,  *(void **)(a1 + 56),  *(void *)(a1 + 64));
  }
  uint64_t v19 = v27;
  *(_OWORD *)(v27 + 88) = v28;
  *(_OWORD *)(v19 + 104) = v29;
  *(_DWORD *)(v19 + 536) = v30;
  *(_OWORD *)(v19 + 56) = v31;
  *(void *)(v19 + 72) = v32;
  uint64_t v20 = *(void **)(v19 + 568);
  *(void *)(v19 + 568) = 0LL;
  if (v20 == (void *)(v19 + 544))
  {
    uint64_t v21 = 4LL;
    uint64_t v20 = (void *)(v19 + 544);
  }

  else
  {
    if (!v20) {
      goto LABEL_22;
    }
    uint64_t v21 = 5LL;
  }

  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_22:
  if (v34)
  {
    uint64_t v22 = v33;
    if (v34 == v33)
    {
      *(void *)(v19 + 568) = v19 + 544;
      (*(void (**)(void *, uint64_t))(v33[0] + 24LL))(v33, v19 + 544);
      if (v34 == v33)
      {
        uint64_t v23 = 4LL;
      }

      else
      {
        if (!v34) {
          return Node;
        }
        uint64_t v23 = 5LL;
        uint64_t v22 = v34;
      }

      (*(void (**)(void *))(*v22 + 8 * v23))(v22);
      return Node;
    }

    *(void *)(v19 + 568) = v34;
  }

  else
  {
    *(void *)(v19 + 568) = 0LL;
  }

  return Node;
}

void swift::Demangle::__runtime::Demangler::~Demangler(swift::Demangle::__runtime::Demangler *this)
{
  *(void *)this = off_189B8E500;
  unsigned int v2 = (char *)this + 544;
  size_t v3 = (char *)*((void *)this + 71);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    size_t v3 = v2;
  }

  else
  {
    if (!v3) {
      goto LABEL_6;
    }
    uint64_t v4 = 5LL;
  }

  (*(void (**)(void))(*(void *)v3 + 8 * v4))();
LABEL_6:
  *(void *)this = off_189B8E4D8;
  uint64_t v5 = (void *)*((void *)this + 3);
  if (v5)
  {
    do
    {
      unsigned int v6 = (void *)*v5;
      free(v5);
      uint64_t v5 = v6;
    }

    while (v6);
  }

  uint64_t v7 = *((void *)this + 5);
  if (v7) {
    *(_BYTE *)(v7 + 48) = 0;
  }
}

{
  char *v2;
  char *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  *(void *)this = off_189B8E500;
  unsigned int v2 = (char *)this + 544;
  size_t v3 = (char *)*((void *)this + 71);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    size_t v3 = v2;
  }

  else
  {
    if (!v3) {
      goto LABEL_6;
    }
    uint64_t v4 = 5LL;
  }

  (*(void (**)(void))(*(void *)v3 + 8 * v4))();
LABEL_6:
  *(void *)this = off_189B8E4D8;
  uint64_t v5 = (void *)*((void *)this + 3);
  if (v5)
  {
    do
    {
      unsigned int v6 = (void *)*v5;
      free(v5);
      uint64_t v5 = v6;
    }

    while (v6);
  }

  uint64_t v7 = *((void *)this + 5);
  if (v7) {
    *(_BYTE *)(v7 + 48) = 0;
  }
  operator delete(this);
}

unint64_t swift::Demangle::__runtime::NodeFactory::createNode(void *a1, __int16 a2)
{
  unint64_t result = (a1[1] + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
  if (!result || result + 24 > a1[2])
  {
    unint64_t v5 = 2LL * a1[4];
    if (v5 <= 0x20) {
      unint64_t v5 = 32LL;
    }
    a1[4] = v5;
    unint64_t v6 = v5 + 8;
    uint64_t v7 = malloc(v5 + 8);
    *uint64_t v7 = a1[3];
    unint64_t result = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    a1[2] = (char *)v7 + v6;
    a1[3] = v7;
  }

  a1[1] = result + 24;
  *(_WORD *)(result + 16) = a2;
  *(_BYTE *)(result + 18) = 0;
  return result;
}

unint64_t swift::Demangle::__runtime::NodeFactory::createNode( void *a1, __int16 a2, void *__src, size_t __len)
{
  if (__len)
  {
    uint64_t v8 = (char *)a1[1];
    if (v8) {
      BOOL v9 = (unint64_t)&v8[__len] > a1[2];
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      unint64_t v10 = 2LL * a1[4];
      if (v10 <= __len + 1) {
        unint64_t v10 = __len + 1;
      }
      a1[4] = v10;
      unint64_t v11 = v10 + 8;
      unint64_t v12 = malloc(v10 + 8);
      uint64_t v13 = (char *)v12 + v11;
      *unint64_t v12 = a1[3];
      uint64_t v8 = (char *)(v12 + 1);
      a1[2] = v13;
      a1[3] = v12;
    }

    a1[1] = &v8[__len];
    memmove(v8, __src, __len);
  }

  else
  {
    uint64_t v8 = 0LL;
  }

  unint64_t result = (a1[1] + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
  if (!result || result + 24 > a1[2])
  {
    unint64_t v15 = 2LL * a1[4];
    if (v15 <= 0x20) {
      unint64_t v15 = 32LL;
    }
    a1[4] = v15;
    unint64_t v16 = v15 + 8;
    unsigned int v17 = malloc(v15 + 8);
    *unsigned int v17 = a1[3];
    unint64_t result = ((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    a1[2] = (char *)v17 + v16;
    a1[3] = v17;
  }

  a1[1] = result + 24;
  *(_WORD *)(result + 16) = a2;
  *(_BYTE *)(result + 18) = 3;
  *(void *)unint64_t result = v8;
  *(void *)(result + 8) = __len;
  return result;
}

unsigned int *swift::Demangle::__runtime::Node::addChild( unsigned int *this, swift::Demangle::__runtime::Node *a2, swift::Demangle::__runtime::NodeFactory *a3, uint64_t a4, const char *a5)
{
  uint64_t v5 = (uint64_t)this;
  if (!a2) {
    swift::Demangle::__runtime::failAssert( (swift::Demangle::__runtime *)"/Library/Caches/com.apple.xbs/Sources/swiftlang_stdlib_Core/swift/lib/Demangling/Demangler.cpp",  (const char *)0x166,  (swift::Demangle::__runtime *)this,  (swift::Demangle::__runtime::Node *)"Child",  a5);
  }
  switch(*((_BYTE *)this + 18))
  {
    case 0:
      *(void *)this = a2;
      *((void *)this + 1) = 0LL;
      *((_BYTE *)this + 18) = 1;
      return this;
    case 1:
      *((void *)this + 1) = a2;
      *((_BYTE *)this + 18) = 2;
      return this;
    case 2:
      BOOL v9 = *(char **)this;
      uint64_t v8 = *((void *)this + 1);
      *(void *)this = 0LL;
      *((void *)this + 1) = 0LL;
      uint64_t v10 = *((void *)a3 + 1);
      unint64_t v11 = *((void *)a3 + 2);
      if (v10) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v11 >= 0x18;
      }
      if (v12)
      {
        *((void *)a3 + 1) = 24LL;
        uint64_t v13 = *(void **)this;
        int v17 = 3;
      }

      else
      {
        uint64_t v13 = (void *)((v10 + 7) & 0xFFFFFFFFFFFFFFF8LL);
        if (v13) {
          BOOL v14 = (unint64_t)(v13 + 4) > v11;
        }
        else {
          BOOL v14 = 1;
        }
        if (v14)
        {
          unint64_t v15 = 2LL * *((void *)a3 + 4);
          if (v15 <= 0x28) {
            unint64_t v15 = 40LL;
          }
          *((void *)a3 + 4) = v15;
          unint64_t v16 = v15 + 8;
          this = (unsigned int *)malloc(v15 + 8);
          *(void *)this = *((void *)a3 + 3);
          uint64_t v13 = (void *)(((unint64_t)this + 15) & 0xFFFFFFFFFFFFFFF8LL);
          *((void *)a3 + 2) = (char *)this + v16;
          *((void *)a3 + 3) = this;
        }

        *((void *)a3 + 1) = v13 + 4;
        *(void *)uint64_t v5 = v13;
        int v17 = 4;
      }

      *uint64_t v13 = v9;
      *(void *)(*(void *)v5 + 8LL) = v8;
      *(void *)(*(void *)v5 + 16LL) = a2;
      *(_DWORD *)(v5 + 8) = 3;
      *(_DWORD *)(v5 + 12) = v17;
      *(_BYTE *)(v5 + 18) = 5;
      return this;
    case 5:
      unsigned int v18 = this[2];
      uint64_t v19 = this[3];
      uint64_t v20 = *(char **)this;
      uint64_t v21 = &v20[8 * v19];
      uint64_t v22 = (char *)*((void *)a3 + 1);
      if (v21 == v22)
      {
        uint64_t v24 = v21 + 8;
        unint64_t v23 = *((void *)a3 + 2);
        if ((unint64_t)v24 <= v23)
        {
          *((void *)a3 + 1) = v24;
          uint64_t v20 = *(char **)this;
          LODWORD(v25) = 1;
          goto LABEL_35;
        }
      }

      else
      {
        unint64_t v23 = *((void *)a3 + 2);
      }

      else {
        uint64_t v25 = (2 * v19);
      }
      uint64_t v26 = 8 * (v25 + v19);
      uint64_t v20 = (char *)((unint64_t)(v22 + 7) & 0xFFFFFFFFFFFFFFF8LL);
      if (!v20 || (unint64_t)&v20[v26] > v23)
      {
        unint64_t v27 = 2LL * *((void *)a3 + 4);
        if (v27 <= v26 + 8) {
          unint64_t v27 = v26 + 8;
        }
        *((void *)a3 + 4) = v27;
        unint64_t v28 = v27 + 8;
        this = (unsigned int *)malloc(v27 + 8);
        __int128 v29 = (char *)this + v28;
        *(void *)this = *((void *)a3 + 3);
        uint64_t v20 = (char *)(((unint64_t)this + 15) & 0xFFFFFFFFFFFFFFF8LL);
        *((void *)a3 + 2) = v29;
        *((void *)a3 + 3) = this;
      }

      *((void *)a3 + 1) = &v20[v26];
      if ((_DWORD)v19)
      {
        this = (unsigned int *)memcpy(v20, *(const void **)v5, 8 * v19);
        LODWORD(v19) = *(_DWORD *)(v5 + 12);
      }

      *(void *)uint64_t v5 = v20;
LABEL_35:
      *(_DWORD *)(v5 + 12) = v19 + v25;
      unsigned int v18 = *(_DWORD *)(v5 + 8);
LABEL_36:
      *(_DWORD *)(v5 + 8) = v18 + 1;
      *(void *)&v20[8 * v18] = a2;
      return this;
    default:
      return this;
  }

int8x16_t *swift::Demangle::__runtime::Node::reverseChildren(int8x16_t *this, uint64_t a2)
{
  int v2 = this[1].u8[2];
  if (v2 == 5)
  {
    unint64_t v4 = this->i64[0] + 8 * a2;
    uint64_t v5 = this->u32[2];
    unint64_t v6 = (void *)(this->i64[0] + 8 * v5 - 8);
    if (v5 != a2 && (unint64_t)v6 > v4)
    {
      unint64_t v8 = v4 + 8;
      do
      {
        uint64_t v9 = *(void *)(v8 - 8);
        *(void *)(v8 - 8) = *v6;
        *v6-- = v9;
        BOOL v10 = v8 >= (unint64_t)v6;
        v8 += 8LL;
      }

      while (!v10);
    }
  }

  else if (v2 == 2 && a2 == 0)
  {
    *this = vextq_s8(*this, *this, 8uLL);
  }

  return this;
}

uint64_t swift::Demangle::__runtime::Node::findByKind(uint64_t result, uint64_t a2, int a3)
{
  size_t v3 = (void *)(result + 16);
  if (*(unsigned __int16 *)(result + 16) != (_DWORD)a2)
  {
    uint64_t v4 = (a3 - 1);
    if (a3 < 1) {
      return 0LL;
    }
    int v6 = *(unsigned __int8 *)(result + 18);
    uint64_t v7 = (void *)result;
    if ((v6 - 1) >= 2)
    {
      if (v6 == 5)
      {
        unint64_t v8 = *(void **)result;
        uint64_t v7 = *(void **)result;
        goto LABEL_11;
      }

      uint64_t v7 = 0LL;
    }

    switch(v6)
    {
      case 1:
        size_t v3 = (void *)(result + 8);
        if (v7 != (void *)(result + 8)) {
          goto LABEL_12;
        }
        return 0LL;
      case 2:
        goto LABEL_12;
      case 5:
        unint64_t v8 = *(void **)result;
LABEL_11:
        size_t v3 = &v8[*(unsigned int *)(result + 8)];
        if (v7 != v3) {
          goto LABEL_12;
        }
        return 0LL;
    }

    size_t v3 = 0LL;
    if (!v7) {
      return 0LL;
    }
LABEL_12:
    while (1)
    {
      unint64_t result = swift::Demangle::__runtime::Node::findByKind(*v7, a2, v4);
      if (result) {
        break;
      }
      if (++v7 == v3) {
        return 0LL;
      }
    }
  }

  return result;
}

void *swift::Demangle::__runtime::NodeFactory::freeSlabs(void *result)
{
  if (result)
  {
    do
    {
      int v1 = (void *)*result;
      free(result);
      unint64_t result = v1;
    }

    while (v1);
  }

  return result;
}

void *swift::Demangle::__runtime::NodeFactory::clear(void *this)
{
  int v1 = (void **)this[3];
  if (v1)
  {
    int v2 = this;
    this = *v1;
    if (*v1)
    {
      do
      {
        size_t v3 = (void *)*this;
        free(this);
        this = v3;
      }

      while (v3);
      int v1 = (void **)v2[3];
    }

    void *v1 = 0LL;
    v2[1] = v1 + 1;
  }

  return this;
}

unint64_t swift::Demangle::__runtime::NodeFactory::createNode(void *a1, __int16 a2, uint64_t a3)
{
  unint64_t result = (a1[1] + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
  if (!result || result + 24 > a1[2])
  {
    unint64_t v7 = 2LL * a1[4];
    if (v7 <= 0x20) {
      unint64_t v7 = 32LL;
    }
    a1[4] = v7;
    unint64_t v8 = v7 + 8;
    uint64_t v9 = malloc(v7 + 8);
    *uint64_t v9 = a1[3];
    unint64_t result = ((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    a1[2] = (char *)v9 + v8;
    a1[3] = v9;
  }

  a1[1] = result + 24;
  *(_WORD *)(result + 16) = a2;
  *(_BYTE *)(result + 18) = 4;
  *(void *)unint64_t result = a3;
  return result;
}

unint64_t swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText( void *a1, __int16 a2, uint64_t a3, uint64_t a4)
{
  unint64_t result = (a1[1] + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
  if (!result || result + 24 > a1[2])
  {
    unint64_t v9 = 2LL * a1[4];
    if (v9 <= 0x20) {
      unint64_t v9 = 32LL;
    }
    a1[4] = v9;
    unint64_t v10 = v9 + 8;
    unint64_t v11 = malloc(v9 + 8);
    *unint64_t v11 = a1[3];
    unint64_t result = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    a1[2] = (char *)v11 + v10;
    a1[3] = v11;
  }

  a1[1] = result + 24;
  *(_WORD *)(result + 16) = a2;
  *(_BYTE *)(result + 18) = 3;
  *(void *)unint64_t result = a3;
  *(void *)(result + 8) = a4;
  return result;
}

unint64_t swift::Demangle::__runtime::NodeFactory::createNode(void *a1, __int16 a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  uint64_t v6 = *((unsigned int *)a3 + 2);
  unint64_t result = (a1[1] + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
  if (!result || result + 24 > a1[2])
  {
    unint64_t v8 = 2LL * a1[4];
    if (v8 <= 0x20) {
      unint64_t v8 = 32LL;
    }
    a1[4] = v8;
    unint64_t v9 = v8 + 8;
    unint64_t v10 = malloc(v8 + 8);
    *unint64_t v10 = a1[3];
    unint64_t result = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    a1[2] = (char *)v10 + v9;
    a1[3] = v10;
  }

  a1[1] = result + 24;
  *(_WORD *)(result + 16) = a2;
  *(_BYTE *)(result + 18) = 3;
  *(void *)unint64_t result = v5;
  *(void *)(result + 8) = v6;
  return result;
}

unint64_t swift::Demangle::__runtime::NodeFactory::createNode(void *a1, __int16 a2, char *__s)
{
  unint64_t v6 = (a1[1] + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
  if (!v6 || v6 + 24 > a1[2])
  {
    unint64_t v7 = 2LL * a1[4];
    if (v7 <= 0x20) {
      unint64_t v7 = 32LL;
    }
    a1[4] = v7;
    unint64_t v8 = v7 + 8;
    unint64_t v9 = malloc(v7 + 8);
    unint64_t v10 = (char *)v9 + v8;
    *unint64_t v9 = a1[3];
    unint64_t v6 = ((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    a1[2] = v10;
    a1[3] = v9;
  }

  a1[1] = v6 + 24;
  if (__s) {
    size_t v11 = strlen(__s);
  }
  else {
    size_t v11 = 0LL;
  }
  *(_WORD *)(v6 + 16) = a2;
  *(_BYTE *)(v6 + 18) = 3;
  *(void *)unint64_t v6 = __s;
  *(void *)(v6 + 8) = v11;
  return v6;
}

void *swift::Demangle::__runtime::CharVector::append(char **a1, const void *a2, size_t a3, void *a4)
{
  uint64_t v8 = *((unsigned int *)a1 + 2);
  size_t v7 = *((unsigned int *)a1 + 3);
  unint64_t v9 = *a1;
  if (a3 + v8 > v7)
  {
    size_t v11 = (char *)a4[1];
    if (&v9[v7] == v11)
    {
      uint64_t v13 = &v9[v7 + a3];
      unint64_t v12 = a4[2];
      if ((unint64_t)v13 <= v12)
      {
        a4[1] = v13;
        LODWORD(v15) = a3;
LABEL_19:
        *((_DWORD *)a1 + 3) = v7 + v15;
        goto LABEL_20;
      }
    }

    else
    {
      unint64_t v12 = a4[2];
    }

    unint64_t v14 = (2 * v7);
    if (a3 > v14) {
      unint64_t v14 = a3;
    }
    if (v14 <= 4) {
      uint64_t v15 = 4LL;
    }
    else {
      uint64_t v15 = v14;
    }
    size_t v16 = v15 + v7;
    if (!v11 || (unint64_t)&v11[v16] > v12)
    {
      unint64_t v17 = 2LL * a4[4];
      if (v17 <= v16 + 1) {
        unint64_t v17 = v16 + 1;
      }
      a4[4] = v17;
      unint64_t v18 = v17 + 8;
      uint64_t v19 = malloc(v17 + 8);
      uint64_t v20 = (char *)v19 + v18;
      void *v19 = a4[3];
      size_t v11 = (char *)(v19 + 1);
      a4[2] = v20;
      a4[3] = v19;
    }

    a4[1] = &v11[v16];
    if ((_DWORD)v7)
    {
      memcpy(v11, *a1, v7);
      uint64_t v8 = *((unsigned int *)a1 + 2);
      LODWORD(v7) = *((_DWORD *)a1 + 3);
    }

    *a1 = v11;
    unint64_t v9 = v11;
    goto LABEL_19;
  }

unsigned int *swift::Demangle::__runtime::CharVector::append( unsigned int *this, unsigned int a2, swift::Demangle::__runtime::NodeFactory *a3)
{
  uint64_t v4 = (uint64_t)this;
  unsigned int v6 = this[2];
  size_t v5 = this[3];
  size_t v7 = *(char **)this;
  if (v6 + 11 > v5)
  {
    unint64_t v9 = (char *)*((void *)a3 + 1);
    if (&v7[v5] == v9)
    {
      unint64_t v11 = (unint64_t)&v7[v5 + 11];
      unint64_t v10 = *((void *)a3 + 2);
      if (v11 <= v10)
      {
        *((void *)a3 + 1) = v11;
        LODWORD(v12) = 11;
LABEL_17:
        *(_DWORD *)(v4 + 12) = v5 + v12;
        goto LABEL_18;
      }
    }

    else
    {
      unint64_t v10 = *((void *)a3 + 2);
    }

    else {
      uint64_t v12 = (2 * v5);
    }
    size_t v13 = v12 + v5;
    if (!v9 || (unint64_t)&v9[v13] > v10)
    {
      unint64_t v14 = 2LL * *((void *)a3 + 4);
      if (v14 <= v13 + 1) {
        unint64_t v14 = v13 + 1;
      }
      *((void *)a3 + 4) = v14;
      unint64_t v15 = v14 + 8;
      this = (unsigned int *)malloc(v14 + 8);
      size_t v16 = (char *)this + v15;
      *(void *)this = *((void *)a3 + 3);
      unint64_t v9 = (char *)(this + 2);
      *((void *)a3 + 2) = v16;
      *((void *)a3 + 3) = this;
    }

    *((void *)a3 + 1) = &v9[v13];
    if ((_DWORD)v5)
    {
      this = (unsigned int *)memcpy(v9, *(const void **)v4, v5);
      unsigned int v6 = *(_DWORD *)(v4 + 8);
      LODWORD(__swift::__runtime::llvm::hash_value(v4, v5) = *(_DWORD *)(v4 + 12);
    }

    *(void *)uint64_t v4 = v9;
    size_t v7 = v9;
    goto LABEL_17;
  }

unsigned int *swift::Demangle::__runtime::CharVector::append( unsigned int *this, unint64_t a2, swift::Demangle::__runtime::NodeFactory *a3)
{
  uint64_t v4 = (uint64_t)this;
  unsigned int v6 = this[2];
  size_t v5 = this[3];
  size_t v7 = *(char **)this;
  if (v6 + 21 > v5)
  {
    unint64_t v9 = (char *)*((void *)a3 + 1);
    if (&v7[v5] == v9)
    {
      unint64_t v11 = (unint64_t)&v7[v5 + 21];
      unint64_t v10 = *((void *)a3 + 2);
      if (v11 <= v10)
      {
        *((void *)a3 + 1) = v11;
        LODWORD(v12) = 21;
LABEL_17:
        *(_DWORD *)(v4 + 12) = v5 + v12;
        goto LABEL_18;
      }
    }

    else
    {
      unint64_t v10 = *((void *)a3 + 2);
    }

    else {
      uint64_t v12 = (2 * v5);
    }
    size_t v13 = v12 + v5;
    if (!v9 || (unint64_t)&v9[v13] > v10)
    {
      unint64_t v14 = 2LL * *((void *)a3 + 4);
      if (v14 <= v13 + 1) {
        unint64_t v14 = v13 + 1;
      }
      *((void *)a3 + 4) = v14;
      unint64_t v15 = v14 + 8;
      this = (unsigned int *)malloc(v14 + 8);
      size_t v16 = (char *)this + v15;
      *(void *)this = *((void *)a3 + 3);
      unint64_t v9 = (char *)(this + 2);
      *((void *)a3 + 2) = v16;
      *((void *)a3 + 3) = this;
    }

    *((void *)a3 + 1) = &v9[v13];
    if ((_DWORD)v5)
    {
      this = (unsigned int *)memcpy(v9, *(const void **)v4, v5);
      unsigned int v6 = *(_DWORD *)(v4 + 8);
      LODWORD(__swift::__runtime::llvm::hash_value(v4, v5) = *(_DWORD *)(v4 + 12);
    }

    *(void *)uint64_t v4 = v9;
    size_t v7 = v9;
    goto LABEL_17;
  }

void *swift::Demangle::__runtime::Demangler::clear(void *this)
{
  *((_DWORD *)this + 25) = 0;
  *((void *)this + 11) = 0LL;
  *((_DWORD *)this + 29) = 0;
  *((void *)this + 13) = 0LL;
  int v1 = (void **)*((void *)this + 3);
  if (v1)
  {
    int v2 = this;
    this = *v1;
    if (*v1)
    {
      do
      {
        size_t v3 = *(void **)this;
        free(this);
        this = v3;
      }

      while (v3);
      int v1 = (void **)*((void *)v2 + 3);
    }

    void *v1 = 0LL;
    *((void *)v2 + 1) = v1 + 1;
  }

  return this;
}

uint64_t swift::Demangle::__runtime::Demangler::DemangleInitRAII::DemangleInitRAII( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 536);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 72);
  unint64_t v10 = (void *)(a2 + 544);
  unint64_t v11 = *(void **)(a2 + 568);
  if (v11)
  {
    if (v11 == v10)
    {
      *(void *)(a1 + 96) = a1 + 72;
      (*(void (**)(void))(**(void **)(a2 + 568) + 24LL))(*(void *)(a2 + 568));
    }

    else
    {
      *(void *)(a1 + 96) = v11;
      *(void *)(a2 + 568) = 0LL;
    }
  }

  else
  {
    *(void *)(a1 + 96) = 0LL;
  }

  unint64_t v12 = (*(void *)(a2 + 8) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
  if (!v12 || (unint64_t v13 = *(void *)(a2 + 16), v12 + 128 > v13))
  {
    unint64_t v14 = 2LL * *(void *)(a2 + 32);
    if (v14 <= 0x88) {
      unint64_t v14 = 136LL;
    }
    *(void *)(a2 + 32) = v14;
    unint64_t v15 = v14 + 8;
    size_t v16 = malloc(v14 + 8);
    unint64_t v13 = (unint64_t)v16 + v15;
    *size_t v16 = *(void *)(a2 + 24);
    unint64_t v12 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    *(void *)(a2 + 16) = (char *)v16 + v15;
    *(void *)(a2 + 24) = v16;
  }

  *(void *)(a2 + 88) = v12;
  *(void *)(a2 + 96) = 0x1000000000LL;
  unint64_t v17 = (v12 + 135) & 0xFFFFFFFFFFFFFFF8LL;
  if (!v17 || v17 + 128 > v13)
  {
    unint64_t v18 = 2LL * *(void *)(a2 + 32);
    if (v18 <= 0x88) {
      unint64_t v18 = 136LL;
    }
    *(void *)(a2 + 32) = v18;
    unint64_t v19 = v18 + 8;
    uint64_t v20 = malloc(v18 + 8);
    *uint64_t v20 = *(void *)(a2 + 24);
    unint64_t v17 = ((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    *(void *)(a2 + 16) = (char *)v20 + v19;
    *(void *)(a2 + 24) = v20;
  }

  *(void *)(a2 + 8) = v17 + 128;
  *(void *)(a2 + 104) = v17;
  *(void *)(a2 + 112) = 0x1000000000LL;
  *(_DWORD *)(a2 + 536) = 0;
  *(void *)(a2 + 56) = a3;
  *(void *)(a2 + 64) = a4;
  *(void *)(a2 + 72) = 0LL;
  uint64_t v21 = *(void **)(a2 + 568);
  *(void *)(a2 + 568) = 0LL;
  if (v21 == v10)
  {
    uint64_t v22 = 4LL;
    uint64_t v21 = v10;
  }

  else
  {
    if (!v21) {
      goto LABEL_21;
    }
    uint64_t v22 = 5LL;
  }

  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_21:
  uint64_t v23 = *(void *)(a5 + 24);
  if (v23)
  {
    if (v23 == a5)
    {
      *(void *)(a2 + 568) = v10;
      (*(void (**)(void, void *))(**(void **)(a5 + 24) + 24LL))(*(void *)(a5 + 24), v10);
    }

    else
    {
      *(void *)(a2 + 568) = v23;
      *(void *)(a5 + 24) = 0LL;
    }
  }

  else
  {
    *(void *)(a2 + 568) = 0LL;
  }

  return a1;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleSymbol( uint64_t a1, _WORD *a2, unint64_t a3, void *a4)
{
  size_t v7 = (void *)a4[3];
  if (v7)
  {
    if (v7 == a4)
    {
      uint64_t v48 = v47;
      (*(void (**)(void *, _BYTE *))(*a4 + 24LL))(a4, v47);
    }

    else
    {
      uint64_t v48 = (_BYTE *)a4[3];
      a4[3] = 0LL;
    }
  }

  else
  {
    uint64_t v48 = 0LL;
  }

  swift::Demangle::__runtime::Demangler::DemangleInitRAII::DemangleInitRAII( (uint64_t)&v49,  a1,  (uint64_t)a2,  a3,  (uint64_t)v47);
  uint64_t v8 = v48;
  if (v48 == v47)
  {
    uint64_t v9 = 4LL;
    uint64_t v8 = v47;
    goto LABEL_10;
  }

  if (v48)
  {
    uint64_t v9 = 5LL;
LABEL_10:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }

  size_t v10 = *(void *)(a1 + 64);
  size_t v11 = *(void *)(a1 + 72);
  if (v10 >= v11) {
    uint64_t v12 = *(void *)(a1 + 72);
  }
  else {
    uint64_t v12 = *(void *)(a1 + 64);
  }
  if (v10 - v12 >= 3)
  {
    unint64_t v13 = *(_WORD **)(a1 + 56);
    unint64_t v14 = (_WORD *)((char *)v13 + v12);
    int v15 = *v14;
    int v16 = *((unsigned __int8 *)v14 + 2);
    if (v15 == 21599 && v16 == 116)
    {
      *(void *)(a1 + 72) = v11 + 3;
      unint64_t v26 = (unint64_t)swift::Demangle::__runtime::demangleOldSymbolAsNode( v13,  v10,  (swift::Demangle::__runtime::NodeFactory *)a1);
      goto LABEL_42;
    }
  }

  unsigned int ManglingPrefixLength = swift::Demangle::__runtime::getManglingPrefixLength((uint64_t)a2, a3);
  if (!ManglingPrefixLength) {
    goto LABEL_40;
  }
  BOOL v23 = a3 >= 2 && *a2 == 21599;
  *(_BYTE *)(a1 + 80) = v23;
  size_t v24 = v11 + ManglingPrefixLength;
  *(void *)(a1 + 72) = v24;
  while (*(void *)(a1 + 72) < v10)
  {
    unsigned int v25 = swift::Demangle::__runtime::Demangler::demangleOperator( (swift::Demangle::__runtime::Demangler *)a1,  v19,  v20,  v21,  v22);
    if (!v25) {
      goto LABEL_40;
    }
    unint64_t v57 = v25;
    swift::Demangle::__runtime::Vector<swift::Demangle::__runtime::Node *>::push_back( (const void **)(a1 + 88),  (uint64_t *)&v57,  (void *)a1);
  }

  unint64_t v26 = (*(void *)(a1 + 8) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
  if (!v26 || v26 + 24 > *(void *)(a1 + 16))
  {
    unint64_t v27 = 2LL * *(void *)(a1 + 32);
    if (v27 <= 0x20) {
      unint64_t v27 = 32LL;
    }
    *(void *)(a1 + 32) = v27;
    unint64_t v28 = v27 + 8;
    __int128 v29 = malloc(v27 + 8);
    int v30 = (char *)v29 + v28;
    *__int128 v29 = *(void *)(a1 + 24);
    unint64_t v26 = ((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    *(void *)(a1 + 16) = v30;
    *(void *)(a1 + 24) = v29;
  }

  *(void *)(a1 + 8) = v26 + 24;
  *(_WORD *)(v26 + 16) = 99;
  *(_BYTE *)(v26 + 18) = 0;
  unsigned int v31 = *(_DWORD *)(a1 + 96);
  if (!v31)
  {
LABEL_40:
    unint64_t v26 = 0LL;
    goto LABEL_42;
  }

  uint64_t v32 = (unsigned int *)v26;
  do
  {
    int v33 = *(uint64_t ***)(a1 + 88);
    int v34 = (unsigned __int16 *)v33[v31 - 1];
    if (!swift::Demangle::__runtime::isFunctionAttr(v34[8]))
    {
      uint64_t v43 = 8LL * v31;
      while (1)
      {
        unint64_t v44 = *v33;
        if (*((_WORD *)*v33 + 8) == 232)
        {
          int v45 = *((unsigned __int8 *)v44 + 18);
          if ((v45 - 1) >= 2)
          {
            if (v45 != 5 || !*((_DWORD *)v44 + 2))
            {
              unint64_t v44 = 0LL;
              goto LABEL_58;
            }

            unint64_t v44 = (uint64_t *)*v44;
          }

          unint64_t v44 = (uint64_t *)*v44;
        }

int8x16_t *swift::Demangle::__runtime::Demangler::demangleOperator( swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, char *a5)
{
  unint64_t v7 = *((void *)this + 8);
  unint64_t v6 = *((void *)this + 9);
  if (v7 <= v6) {
    unint64_t v8 = *((void *)this + 9);
  }
  else {
    unint64_t v8 = *((void *)this + 8);
  }
  while (2)
  {
    if (v8 == v6)
    {
      unint64_t v6 = v8;
LABEL_8:
      unint64_t v13 = v6 - 1;
LABEL_9:
      *((void *)this + 9) = v13;
      return (int8x16_t *)swift::Demangle::__runtime::Demangler::demangleIdentifier(this);
    }

    else
    {
      uint64_t v9 = v6++;
      *((void *)this + 9) = v6;
      uint64_t v10 = *((void *)this + 7);
      uint64_t v11 = *(unsigned __int8 *)(v10 + v9);
      switch(*(_BYTE *)(v10 + v9))
      {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 0xA:
        case 0xB:
        case 0xC:
          return (int8x16_t *)swift::Demangle::__runtime::Demangler::demangleSymbolicReference(this, v11);
        case 0x2E:
          unint64_t v14 = v6 - 1;
          if (v7 < v14) {
            unint64_t v14 = v7;
          }
          int v15 = (char *)(v10 + v14);
          size_t v16 = v7 - v14;
          *((void *)this + 9) = v7;
          __int16 v17 = 221;
          return (int8x16_t *)swift::Demangle::__runtime::NodeFactory::createNode(this, v17, v15, v16);
        case 0x41:
          return (int8x16_t *)swift::Demangle::__runtime::Demangler::demangleMultiSubstitutions(this);
        case 0x42:
          return (int8x16_t *)swift::Demangle::__runtime::Demangler::demangleBuiltinType(this, v11, a3, a4, a5);
        case 0x43:
          uint64_t v18 = 24LL;
          return (int8x16_t *)swift::Demangle::__runtime::Demangler::demangleAnyGenericType(this, v18, a3, a4, a5);
        case 0x44:
          return (int8x16_t *)swift::Demangle::__runtime::Demangler::demangleTypeMangling(this, v11, a3, a4, a5);
        case 0x45:
          return (int8x16_t *)swift::Demangle::__runtime::Demangler::demangleExtensionContext(this, v11, a3, a4, a5);
        case 0x46:
          return (int8x16_t *)swift::Demangle::__runtime::Demangler::demanglePlainFunction(this, v11, a3, a4, a5);
        case 0x47:
          return (int8x16_t *)swift::Demangle::__runtime::Demangler::demangleBoundGenericType(this, v11, a3, a4, a5);
        case 0x48:
          if (v6 < v7)
          {
            unint64_t v19 = v6 + 1;
            *((void *)this + 9) = v6 + 1;
            switch(*(_BYTE *)(v10 + v6))
            {
              case 'A':
                uint64_t v20 = (char *)swift::Demangle::__runtime::Demangler::demangleDependentConformanceIndex(this);
                unsigned int v25 = (unsigned __int16 *)swift::Demangle::__runtime::Demangler::popDependentAssociatedConformance( this,  v21,  v22,  v23,  v24);
                int v26 = *((_DWORD *)this + 24);
                if (v26
                  && (unsigned int v27 = v26 - 1,
                      unint64_t v28 = *(unsigned __int16 **)(*((void *)this + 11) + 8LL * v27),
                      v28[8] - 47 <= 2))
                {
                  *((_DWORD *)this + 24) = v27;
                }

                else
                {
                  unint64_t v28 = 0LL;
                }

                uint64_t v162 = this;
                __int16 v163 = 49;
                return (int8x16_t *)swift::Demangle::__runtime::Demangler::createWithChildren( v162,  v163,  (swift::Demangle::__runtime::Node *)v28,  (swift::Demangle::__runtime::Node *)v25,  v20);
              case 'C':
                uint64_t v20 = (char *)swift::Demangle::__runtime::Demangler::popAnyProtocolConformanceList( this,  v11,  a3,  a4,  a5);
                int v106 = *((_DWORD *)this + 24);
                if (v106
                  && ((unsigned int v107 = v106 - 1,
                       unsigned int v25 = *(unsigned __int16 **)(*((void *)this + 11) + 8LL * v107),
                       int v108 = v25[8],
                       v108 == 184)
                   || v108 == 183))
                {
                  *((_DWORD *)this + 24) = v107;
                }

                else
                {
                  unsigned int v25 = (unsigned __int16 *)swift::Demangle::__runtime::Demangler::demangleRetroactiveProtocolConformanceRef( this,  v103,  v104,  (uint64_t)v25,  v105);
                  unsigned int v107 = *((_DWORD *)this + 24);
                }

                if (v107
                  && (v164 = v107 - 1, unint64_t v28 = *(unsigned __int16 **)(*((void *)this + 11) + 8LL * v164), v28[8] == 232))
                {
                  *((_DWORD *)this + 24) = v164;
                }

                else
                {
                  unint64_t v28 = 0LL;
                }

                uint64_t v162 = this;
                __int16 v163 = 26;
                return (int8x16_t *)swift::Demangle::__runtime::Demangler::createWithChildren( v162,  v163,  (swift::Demangle::__runtime::Node *)v28,  (swift::Demangle::__runtime::Node *)v25,  v20);
              case 'D':
                uint64_t v20 = (char *)swift::Demangle::__runtime::Demangler::demangleDependentConformanceIndex(this);
                unsigned int v25 = (unsigned __int16 *)swift::Demangle::__runtime::Demangler::popProtocol( this,  v109,  v110,  v111,  v112);
                int v113 = *((_DWORD *)this + 24);
                if (v113
                  && (v114 = v113 - 1, unint64_t v28 = *(unsigned __int16 **)(*((void *)this + 11) + 8LL * v114), v28[8] == 232))
                {
                  *((_DWORD *)this + 24) = v114;
                }

                else
                {
                  unint64_t v28 = 0LL;
                }

                uint64_t v162 = this;
                __int16 v163 = 47;
                return (int8x16_t *)swift::Demangle::__runtime::Demangler::createWithChildren( v162,  v163,  (swift::Demangle::__runtime::Node *)v28,  (swift::Demangle::__runtime::Node *)v25,  v20);
              case 'F':
                unint64_t v29 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
                if (!v29 || v29 + 24 > *((void *)this + 2))
                {
                  unint64_t v115 = 2LL * *((void *)this + 4);
                  if (v115 <= 0x20) {
                    unint64_t v115 = 32LL;
                  }
                  *((void *)this + 4) = v115;
                  unint64_t v116 = v115 + 8;
                  uint64_t v117 = malloc(v115 + 8);
                  char v118 = (char *)v117 + v116;
                  *uint64_t v117 = *((void *)this + 3);
                  unint64_t v29 = ((unint64_t)v117 + 15) & 0xFFFFFFFFFFFFFFF8LL;
                  *((void *)this + 2) = v118;
                  *((void *)this + 3) = v117;
                }

                *((void *)this + 1) = v29 + 24;
                __int16 v34 = 330;
                goto LABEL_135;
              case 'I':
                uint64_t v20 = (char *)swift::Demangle::__runtime::Demangler::demangleDependentConformanceIndex(this);
                unsigned int v25 = (unsigned __int16 *)swift::Demangle::__runtime::Demangler::popProtocol( this,  v119,  v120,  v121,  v122);
                int v123 = *((_DWORD *)this + 24);
                if (v123
                  && (unsigned int v124 = v123 - 1,
                      unint64_t v28 = *(unsigned __int16 **)(*((void *)this + 11) + 8LL * v124),
                      v28[8] - 47 <= 2))
                {
                  *((_DWORD *)this + 24) = v124;
                }

                else
                {
                  unint64_t v28 = 0LL;
                }

                uint64_t v162 = this;
                __int16 v163 = 48;
                return (int8x16_t *)swift::Demangle::__runtime::Demangler::createWithChildren( v162,  v163,  (swift::Demangle::__runtime::Node *)v28,  (swift::Demangle::__runtime::Node *)v25,  v20);
              case 'P':
                unint64_t v125 = swift::Demangle::__runtime::Demangler::popProtocol(this, v11, a3, a4, a5);
                if (!v125) {
                  goto LABEL_226;
                }
                unint64_t v37 = v125;
                unint64_t v29 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
                if (!v29 || v29 + 24 > *((void *)this + 2))
                {
                  unint64_t v126 = 2LL * *((void *)this + 4);
                  if (v126 <= 0x20) {
                    unint64_t v126 = 32LL;
                  }
                  *((void *)this + 4) = v126;
                  unint64_t v127 = v126 + 8;
                  uint64_t v128 = malloc(v126 + 8);
                  uint64_t v129 = (char *)v128 + v127;
                  void *v128 = *((void *)this + 3);
                  unint64_t v29 = ((unint64_t)v128 + 15) & 0xFFFFFFFFFFFFFFF8LL;
                  *((void *)this + 2) = v129;
                  *((void *)this + 3) = v128;
                }

                *((void *)this + 1) = v29 + 24;
                __int16 v42 = 183;
                goto LABEL_156;
              case 'X':
                uint64_t v130 = swift::Demangle::__runtime::Demangler::popAnyProtocolConformanceList(this, v11, a3, a4, a5);
                if (!v130) {
                  goto LABEL_226;
                }
                unint64_t v37 = (unint64_t)v130;
                unint64_t v29 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
                if (!v29 || v29 + 24 > *((void *)this + 2))
                {
                  unint64_t v131 = 2LL * *((void *)this + 4);
                  if (v131 <= 0x20) {
                    unint64_t v131 = 32LL;
                  }
                  *((void *)this + 4) = v131;
                  unint64_t v132 = v131 + 8;
                  uint64_t v133 = malloc(v131 + 8);
                  unint64_t v134 = (char *)v133 + v132;
                  *uint64_t v133 = *((void *)this + 3);
                  unint64_t v29 = ((unint64_t)v133 + 15) & 0xFFFFFFFFFFFFFFF8LL;
                  *((void *)this + 2) = v134;
                  *((void *)this + 3) = v133;
                }

                *((void *)this + 1) = v29 + 24;
                __int16 v42 = 27;
                goto LABEL_156;
              case 'c':
                int v135 = swift::Demangle::__runtime::Demangler::popProtocolConformance(this, v11, a3, a4, a5);
                if (!v135) {
                  goto LABEL_226;
                }
                unint64_t v37 = (unint64_t)v135;
                unint64_t v29 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
                if (!v29 || v29 + 24 > *((void *)this + 2))
                {
                  unint64_t v136 = 2LL * *((void *)this + 4);
                  if (v136 <= 0x20) {
                    unint64_t v136 = 32LL;
                  }
                  *((void *)this + 4) = v136;
                  unint64_t v137 = v136 + 8;
                  uint64_t v138 = malloc(v136 + 8);
                  int v139 = (char *)v138 + v137;
                  *uint64_t v138 = *((void *)this + 3);
                  unint64_t v29 = ((unint64_t)v138 + 15) & 0xFFFFFFFFFFFFFFF8LL;
                  *((void *)this + 2) = v139;
                  *((void *)this + 3) = v138;
                }

                *((void *)this + 1) = v29 + 24;
                __int16 v42 = 189;
                goto LABEL_156;
              case 'n':
                int v140 = *((_DWORD *)this + 24);
                if (!v140) {
                  goto LABEL_226;
                }
                unsigned int v141 = v140 - 1;
                unint64_t v37 = *(void *)(*((void *)this + 11) + 8LL * v141);
                if (*(_WORD *)(v37 + 16) != 232) {
                  goto LABEL_226;
                }
                *((_DWORD *)this + 24) = v141;
                unint64_t v29 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
                if (!v29 || v29 + 24 > *((void *)this + 2))
                {
                  unint64_t v142 = 2LL * *((void *)this + 4);
                  if (v142 <= 0x20) {
                    unint64_t v142 = 32LL;
                  }
                  *((void *)this + 4) = v142;
                  unint64_t v143 = v142 + 8;
                  int v144 = malloc(v142 + 8);
                  BOOL v145 = (char *)v144 + v143;
                  *int v144 = *((void *)this + 3);
                  unint64_t v29 = ((unint64_t)v144 + 15) & 0xFFFFFFFFFFFFFFF8LL;
                  *((void *)this + 2) = v145;
                  *((void *)this + 3) = v144;
                }

                *((void *)this + 1) = v29 + 24;
                __int16 v42 = 159;
                goto LABEL_156;
              case 'o':
                int v146 = *((_DWORD *)this + 24);
                if (!v146) {
                  goto LABEL_226;
                }
                unsigned int v147 = v146 - 1;
                unint64_t v37 = *(void *)(*((void *)this + 11) + 8LL * v147);
                *((_DWORD *)this + 24) = v147;
                if (!v37) {
                  goto LABEL_226;
                }
                unint64_t v29 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
                if (!v29 || v29 + 24 > *((void *)this + 2))
                {
                  unint64_t v148 = 2LL * *((void *)this + 4);
                  if (v148 <= 0x20) {
                    unint64_t v148 = 32LL;
                  }
                  *((void *)this + 4) = v148;
                  unint64_t v149 = v148 + 8;
                  unint64_t v150 = malloc(v148 + 8);
                  uint64_t v151 = (char *)v150 + v149;
                  void *v150 = *((void *)this + 3);
                  unint64_t v29 = ((unint64_t)v150 + 15) & 0xFFFFFFFFFFFFFFF8LL;
                  *((void *)this + 2) = v151;
                  *((void *)this + 3) = v150;
                }

                *((void *)this + 1) = v29 + 24;
                __int16 v42 = 303;
                goto LABEL_156;
              case 'p':
                unint64_t v152 = swift::Demangle::__runtime::Demangler::popProtocol(this, v11, a3, a4, a5);
                if (!v152) {
                  goto LABEL_226;
                }
                unint64_t v37 = v152;
                unint64_t v29 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
                if (!v29 || v29 + 24 > *((void *)this + 2))
                {
                  unint64_t v153 = 2LL * *((void *)this + 4);
                  if (v153 <= 0x20) {
                    unint64_t v153 = 32LL;
                  }
                  *((void *)this + 4) = v153;
                  unint64_t v154 = v153 + 8;
                  uint64_t v155 = malloc(v153 + 8);
                  int v156 = (char *)v155 + v154;
                  void *v155 = *((void *)this + 3);
                  unint64_t v29 = ((unint64_t)v155 + 15) & 0xFFFFFFFFFFFFFFF8LL;
                  *((void *)this + 2) = v156;
                  *((void *)this + 3) = v155;
                }

                *((void *)this + 1) = v29 + 24;
                __int16 v42 = 184;
                goto LABEL_156;
              case 'r':
                unint64_t v157 = swift::Demangle::__runtime::Demangler::popProtocol(this, v11, a3, a4, a5);
                if (!v157) {
                  goto LABEL_226;
                }
                unint64_t v37 = v157;
                unint64_t v29 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
                if (!v29 || v29 + 24 > *((void *)this + 2))
                {
                  unint64_t v158 = 2LL * *((void *)this + 4);
                  if (v158 <= 0x20) {
                    unint64_t v158 = 32LL;
                  }
                  *((void *)this + 4) = v158;
                  unint64_t v159 = v158 + 8;
                  uint64_t v160 = malloc(v158 + 8);
                  uint64_t v161 = (char *)v160 + v159;
                  *uint64_t v160 = *((void *)this + 3);
                  unint64_t v29 = ((unint64_t)v160 + 15) & 0xFFFFFFFFFFFFFFF8LL;
                  *((void *)this + 2) = v161;
                  *((void *)this + 3) = v160;
                }

                *((void *)this + 1) = v29 + 24;
                __int16 v42 = 187;
                goto LABEL_156;
              default:
                goto LABEL_158;
            }
          }

          unint64_t v19 = v6;
LABEL_158:
          unint64_t v13 = v19 - 2;
          goto LABEL_9;
        case 0x49:
          return (int8x16_t *)swift::Demangle::__runtime::Demangler::demangleImplFunctionType(this, v11, a3, a4, a5);
        case 0x4B:
          unint64_t v29 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
          if (!v29 || v29 + 24 > *((void *)this + 2))
          {
            unint64_t v30 = 2LL * *((void *)this + 4);
            if (v30 <= 0x20) {
              unint64_t v30 = 32LL;
            }
            *((void *)this + 4) = v30;
            unint64_t v31 = v30 + 8;
            uint64_t v32 = malloc(v30 + 8);
            int v33 = (char *)v32 + v31;
            *uint64_t v32 = *((void *)this + 3);
            unint64_t v29 = ((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8LL;
            *((void *)this + 2) = v33;
            *((void *)this + 3) = v32;
          }

          *((void *)this + 1) = v29 + 24;
          __int16 v34 = 272;
          goto LABEL_135;
        case 0x4C:
          return (int8x16_t *)swift::Demangle::__runtime::Demangler::demangleLocalIdentifier(this, v11, a3, a4, a5);
        case 0x4D:
          return (int8x16_t *)swift::Demangle::__runtime::Demangler::demangleMetatype(this, v11, a3, a4, a5);
        case 0x4E:
          int v35 = *((_DWORD *)this + 24);
          if (!v35) {
            goto LABEL_226;
          }
          unsigned int v36 = v35 - 1;
          unint64_t v37 = *(void *)(*((void *)this + 11) + 8LL * v36);
          if (*(_WORD *)(v37 + 16) != 232) {
            goto LABEL_226;
          }
          *((_DWORD *)this + 24) = v36;
          unint64_t v29 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
          if (!v29 || v29 + 24 > *((void *)this + 2))
          {
            unint64_t v38 = 2LL * *((void *)this + 4);
            if (v38 <= 0x20) {
              unint64_t v38 = 32LL;
            }
            *((void *)this + 4) = v38;
            unint64_t v39 = v38 + 8;
            uint64_t v40 = malloc(v38 + 8);
            unint64_t v41 = (char *)v40 + v39;
            *uint64_t v40 = *((void *)this + 3);
            unint64_t v29 = ((unint64_t)v40 + 15) & 0xFFFFFFFFFFFFFFF8LL;
            *((void *)this + 2) = v41;
            *((void *)this + 3) = v40;
          }

          *((void *)this + 1) = v29 + 24;
          __int16 v42 = 237;
          goto LABEL_156;
        case 0x4F:
          uint64_t v18 = 61LL;
          return (int8x16_t *)swift::Demangle::__runtime::Demangler::demangleAnyGenericType(this, v18, a3, a4, a5);
        case 0x50:
          uint64_t v18 = 180LL;
          return (int8x16_t *)swift::Demangle::__runtime::Demangler::demangleAnyGenericType(this, v18, a3, a4, a5);
        case 0x51:
          return (int8x16_t *)swift::Demangle::__runtime::Demangler::demangleArchetype(this, v11, a3, a4, a5);
        case 0x52:
          return (int8x16_t *)swift::Demangle::__runtime::Demangler::demangleGenericRequirement(this, v11, a3, a4, a5);
        case 0x53:
          return (int8x16_t *)swift::Demangle::__runtime::Demangler::demangleStandardSubstitution(this);
        case 0x54:
          return swift::Demangle::__runtime::Demangler::demangleThunkOrSpecialization(this, v11, a3, a4, a5);
        case 0x56:
          uint64_t v18 = 219LL;
          return (int8x16_t *)swift::Demangle::__runtime::Demangler::demangleAnyGenericType(this, v18, a3, a4, a5);
        case 0x57:
          return (int8x16_t *)swift::Demangle::__runtime::Demangler::demangleWitness(this, v11, a3, a4, a5);
        case 0x58:
          return swift::Demangle::__runtime::Demangler::demangleSpecialType(this, v11, a3, a4, a5);
        case 0x59:
          return (int8x16_t *)swift::Demangle::__runtime::Demangler::demangleTypeAnnotation(this, v11, a3, a4, a5);
        case 0x5A:
          int v43 = *((_DWORD *)this + 24);
          if (!v43) {
            goto LABEL_226;
          }
          int v44 = v43 - 1;
          unint64_t v37 = *(void *)(*((void *)this + 11) + 8LL * (v43 - 1));
          int v45 = *(unsigned __int16 *)(v37 + 16);
          *((_DWORD *)this + 24) = v44;
          unint64_t v29 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
          if (!v29 || v29 + 24 > *((void *)this + 2))
          {
            unint64_t v46 = 2LL * *((void *)this + 4);
            if (v46 <= 0x20) {
              unint64_t v46 = 32LL;
            }
            *((void *)this + 4) = v46;
            unint64_t v47 = v46 + 8;
            uint64_t v48 = malloc(v46 + 8);
            uint64_t v49 = (char *)v48 + v47;
            *uint64_t v48 = *((void *)this + 3);
            unint64_t v29 = ((unint64_t)v48 + 15) & 0xFFFFFFFFFFFFFFF8LL;
            *((void *)this + 2) = v49;
            *((void *)this + 3) = v48;
          }

          *((void *)this + 1) = v29 + 24;
          __int16 v42 = 218;
          goto LABEL_156;
        case 0x5F:
          unint64_t v29 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
          if (!v29 || v29 + 24 > *((void *)this + 2))
          {
            unint64_t v50 = 2LL * *((void *)this + 4);
            if (v50 <= 0x20) {
              unint64_t v50 = 32LL;
            }
            *((void *)this + 4) = v50;
            unint64_t v51 = v50 + 8;
            int v52 = malloc(v50 + 8);
            __int128 v53 = (char *)v52 + v51;
            *int v52 = *((void *)this + 3);
            unint64_t v29 = ((unint64_t)v52 + 15) & 0xFFFFFFFFFFFFFFF8LL;
            *((void *)this + 2) = v53;
            *((void *)this + 3) = v52;
          }

          *((void *)this + 1) = v29 + 24;
          __int16 v34 = 275;
          goto LABEL_135;
        case 0x61:
          uint64_t v18 = 234LL;
          return (int8x16_t *)swift::Demangle::__runtime::Demangler::demangleAnyGenericType(this, v18, a3, a4, a5);
        case 0x63:
          return (int8x16_t *)swift::Demangle::__runtime::Demangler::popFunctionType(this, 82, 0LL, a4, a5);
        case 0x64:
          unint64_t v29 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
          if (!v29 || v29 + 24 > *((void *)this + 2))
          {
            unint64_t v54 = 2LL * *((void *)this + 4);
            if (v54 <= 0x20) {
              unint64_t v54 = 32LL;
            }
            *((void *)this + 4) = v54;
            unint64_t v55 = v54 + 8;
            int v56 = malloc(v54 + 8);
            unint64_t v57 = (char *)v56 + v55;
            void *v56 = *((void *)this + 3);
            unint64_t v29 = ((unint64_t)v56 + 15) & 0xFFFFFFFFFFFFFFF8LL;
            *((void *)this + 2) = v57;
            *((void *)this + 3) = v56;
          }

          *((void *)this + 1) = v29 + 24;
          __int16 v34 = 276;
          goto LABEL_135;
        case 0x66:
          return (int8x16_t *)swift::Demangle::__runtime::Demangler::demangleFunctionEntity(this, v11, a3, a4, a5);
        case 0x67:
          return (int8x16_t *)swift::Demangle::__runtime::Demangler::demangleRetroactiveConformance(this);
        case 0x68:
          int v58 = *((_DWORD *)this + 24);
          if (!v58) {
            goto LABEL_226;
          }
          int v59 = v58 - 1;
          unint64_t v60 = *(void *)(*((void *)this + 11) + 8LL * (v58 - 1));
          if (*(_WORD *)(v60 + 16) != 232) {
            goto LABEL_226;
          }
          *((_DWORD *)this + 24) = v59;
          int v61 = *(unsigned __int8 *)(v60 + 18);
          if (v61 == 1) {
            goto LABEL_84;
          }
          if (v61 != 5 || *(_DWORD *)(v60 + 8) != 1) {
            goto LABEL_226;
          }
          unint64_t v60 = *(void *)v60;
LABEL_84:
          unint64_t v29 = *(void *)v60;
          if (!*(void *)v60) {
            goto LABEL_227;
          }
          unint64_t v37 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
          if (!v37 || v37 + 24 > *((void *)this + 2))
          {
            unint64_t v62 = 2LL * *((void *)this + 4);
            if (v62 <= 0x20) {
              unint64_t v62 = 32LL;
            }
            *((void *)this + 4) = v62;
            unint64_t v63 = v62 + 8;
            uint64_t v64 = malloc(v62 + 8);
            unint64_t v65 = (char *)v64 + v63;
            void *v64 = *((void *)this + 3);
            unint64_t v37 = ((unint64_t)v64 + 15) & 0xFFFFFFFFFFFFFFF8LL;
            *((void *)this + 2) = v65;
            *((void *)this + 3) = v64;
          }

          *((void *)this + 1) = v37 + 24;
          __int16 v66 = 208;
          goto LABEL_149;
        case 0x69:
          return (int8x16_t *)swift::Demangle::__runtime::Demangler::demangleSubscript(this, v11, a3, a4, a5);
        case 0x6C:
          int v67 = 0;
          return swift::Demangle::__runtime::Demangler::demangleGenericSignature(this, v67, a3, a4, a5);
        case 0x6D:
          int v68 = *((_DWORD *)this + 24);
          if (!v68) {
            goto LABEL_226;
          }
          unsigned int v69 = v68 - 1;
          unint64_t v29 = *(void *)(*((void *)this + 11) + 8LL * v69);
          if (*(_WORD *)(v29 + 16) != 232) {
            goto LABEL_226;
          }
          *((_DWORD *)this + 24) = v69;
          unint64_t v37 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
          if (!v37 || v37 + 24 > *((void *)this + 2))
          {
            unint64_t v70 = 2LL * *((void *)this + 4);
            if (v70 <= 0x20) {
              unint64_t v70 = 32LL;
            }
            *((void *)this + 4) = v70;
            unint64_t v71 = v70 + 8;
            uint64_t v72 = malloc(v70 + 8);
            unint64_t v73 = (char *)v72 + v71;
            void *v72 = *((void *)this + 3);
            unint64_t v37 = ((unint64_t)v72 + 15) & 0xFFFFFFFFFFFFFFF8LL;
            *((void *)this + 2) = v73;
            *((void *)this + 3) = v72;
          }

          *((void *)this + 1) = v37 + 24;
          __int16 v66 = 145;
          goto LABEL_149;
        case 0x6E:
          int v74 = *((_DWORD *)this + 24);
          if (!v74) {
            goto LABEL_226;
          }
          int v75 = v74 - 1;
          unint64_t v76 = *(void *)(*((void *)this + 11) + 8LL * (v74 - 1));
          if (*(_WORD *)(v76 + 16) != 232) {
            goto LABEL_226;
          }
          *((_DWORD *)this + 24) = v75;
          int v77 = *(unsigned __int8 *)(v76 + 18);
          if (v77 == 1) {
            goto LABEL_107;
          }
          if (v77 != 5 || *(_DWORD *)(v76 + 8) != 1) {
            goto LABEL_226;
          }
          unint64_t v76 = *(void *)v76;
LABEL_107:
          unint64_t v29 = *(void *)v76;
          if (!*(void *)v76) {
            goto LABEL_227;
          }
          unint64_t v37 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
          if (!v37 || v37 + 24 > *((void *)this + 2))
          {
            unint64_t v78 = 2LL * *((void *)this + 4);
            if (v78 <= 0x20) {
              unint64_t v78 = 32LL;
            }
            *((void *)this + 4) = v78;
            unint64_t v79 = v78 + 8;
            uint64_t v80 = malloc(v78 + 8);
            unint64_t v81 = (char *)v80 + v79;
            void *v80 = *((void *)this + 3);
            unint64_t v37 = ((unint64_t)v80 + 15) & 0xFFFFFFFFFFFFFFF8LL;
            *((void *)this + 2) = v81;
            *((void *)this + 3) = v80;
          }

          *((void *)this + 1) = v37 + 24;
          __int16 v66 = 209;
          goto LABEL_149;
        case 0x6F:
          return (int8x16_t *)swift::Demangle::__runtime::Demangler::demangleOperatorIdentifier(this);
        case 0x70:
          unint64_t DependentGenericParamType = swift::Demangle::__runtime::Demangler::demangleProtocolList(this, v11, a3, a4, a5);
          if (!DependentGenericParamType) {
            goto LABEL_226;
          }
          goto LABEL_128;
        case 0x71:
          unint64_t DependentGenericParamType = swift::Demangle::__runtime::Demangler::demangleGenericParamIndex( this,  v11,  a3,  a4,  a5);
          if (!DependentGenericParamType) {
            goto LABEL_226;
          }
          goto LABEL_128;
        case 0x72:
          int v67 = 1;
          return swift::Demangle::__runtime::Demangler::demangleGenericSignature(this, v67, a3, a4, a5);
        case 0x73:
          int v15 = "Swift";
          __int16 v17 = 153;
          size_t v16 = 5LL;
          return (int8x16_t *)swift::Demangle::__runtime::NodeFactory::createNode(this, v17, v15, v16);
        case 0x74:
          return (int8x16_t *)swift::Demangle::__runtime::Demangler::popTuple(this, v11, a3, a4, a5);
        case 0x75:
          return (int8x16_t *)swift::Demangle::__runtime::Demangler::demangleGenericType(this, v11, a3, a4, a5);
        case 0x76:
          unint64_t v83 = swift::Demangle::__runtime::Demangler::demangleEntity(this, 254, a3, a4, a5);
          return (int8x16_t *)swift::Demangle::__runtime::Demangler::demangleAccessor(this, v83, v84, v85, v86);
        case 0x77:
          return (int8x16_t *)swift::Demangle::__runtime::Demangler::demangleValueWitness(this, v11, a3, a4, a5);
        case 0x78:
          unint64_t DependentGenericParamType = swift::Demangle::__runtime::Demangler::getDependentGenericParamType( this,  0,  0,  a4,  a5);
          if (!DependentGenericParamType) {
            goto LABEL_226;
          }
LABEL_128:
          unint64_t v37 = DependentGenericParamType;
          goto LABEL_150;
        case 0x79:
          unint64_t v29 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
          if (!v29 || v29 + 24 > *((void *)this + 2))
          {
            unint64_t v87 = 2LL * *((void *)this + 4);
            if (v87 <= 0x20) {
              unint64_t v87 = 32LL;
            }
            *((void *)this + 4) = v87;
            unint64_t v88 = v87 + 8;
            BOOL v89 = malloc(v87 + 8);
            int v90 = (char *)v89 + v88;
            void *v89 = *((void *)this + 3);
            unint64_t v29 = ((unint64_t)v89 + 15) & 0xFFFFFFFFFFFFFFF8LL;
            *((void *)this + 2) = v90;
            *((void *)this + 3) = v89;
          }

          *((void *)this + 1) = v29 + 24;
          __int16 v34 = 274;
LABEL_135:
          *(_WORD *)(v29 + 16) = v34;
          *(_BYTE *)(v29 + 18) = 0;
          goto LABEL_227;
        case 0x7A:
          int v91 = *((_DWORD *)this + 24);
          if (!v91) {
            goto LABEL_226;
          }
          int v92 = v91 - 1;
          unint64_t v93 = *(void *)(*((void *)this + 11) + 8LL * (v91 - 1));
          if (*(_WORD *)(v93 + 16) != 232) {
            goto LABEL_226;
          }
          *((_DWORD *)this + 24) = v92;
          int v94 = *(unsigned __int8 *)(v93 + 18);
          if (v94 == 1) {
            goto LABEL_142;
          }
          if (v94 == 5 && *(_DWORD *)(v93 + 8) == 1)
          {
            unint64_t v93 = *(void *)v93;
LABEL_142:
            unint64_t v29 = *(void *)v93;
            if (*(void *)v93)
            {
              unint64_t v37 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
              if (!v37 || v37 + 24 > *((void *)this + 2))
              {
                unint64_t v95 = 2LL * *((void *)this + 4);
                if (v95 <= 0x20) {
                  unint64_t v95 = 32LL;
                }
                *((void *)this + 4) = v95;
                unint64_t v96 = v95 + 8;
                unint64_t v97 = malloc(v95 + 8);
                unint64_t v98 = (char *)v97 + v96;
                void *v97 = *((void *)this + 3);
                unint64_t v37 = ((unint64_t)v97 + 15) & 0xFFFFFFFFFFFFFFF8LL;
                *((void *)this + 2) = v98;
                *((void *)this + 3) = v97;
              }

              *((void *)this + 1) = v37 + 24;
              __int16 v66 = 123;
LABEL_149:
              *(_WORD *)(v37 + 16) = v66;
              *(_BYTE *)(v37 + 18) = 0;
              swift::Demangle::__runtime::Node::addChild( (unsigned int *)v37,  (swift::Demangle::__runtime::Node *)v29,  this,  a4,  a5);
LABEL_150:
              unint64_t v29 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
              if (!v29 || v29 + 24 > *((void *)this + 2))
              {
                unint64_t v99 = 2LL * *((void *)this + 4);
                if (v99 <= 0x20) {
                  unint64_t v99 = 32LL;
                }
                *((void *)this + 4) = v99;
                unint64_t v100 = v99 + 8;
                BOOL v101 = malloc(v99 + 8);
                size_t v102 = (char *)v101 + v100;
                void *v101 = *((void *)this + 3);
                unint64_t v29 = ((unint64_t)v101 + 15) & 0xFFFFFFFFFFFFFFF8LL;
                *((void *)this + 2) = v102;
                *((void *)this + 3) = v101;
              }

              *((void *)this + 1) = v29 + 24;
              __int16 v42 = 232;
LABEL_156:
              *(_WORD *)(v29 + 16) = v42;
              *(_BYTE *)(v29 + 18) = 0;
              swift::Demangle::__runtime::Node::addChild( (unsigned int *)v29,  (swift::Demangle::__runtime::Node *)v37,  this,  a4,  a5);
            }
          }

          else
          {
LABEL_226:
            unint64_t v29 = 0LL;
          }

unint64_t swift::Demangle::__runtime::Demangler::createWithChild( swift::Demangle::__runtime::NodeFactory *a1, __int16 a2, swift::Demangle::__runtime::Node *a3, uint64_t a4, const char *a5)
{
  if (!a3) {
    return 0LL;
  }
  unint64_t v8 = (*((void *)a1 + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
  if (!v8 || v8 + 24 > *((void *)a1 + 2))
  {
    unint64_t v9 = 2LL * *((void *)a1 + 4);
    if (v9 <= 0x20) {
      unint64_t v9 = 32LL;
    }
    *((void *)a1 + 4) = v9;
    unint64_t v10 = v9 + 8;
    uint64_t v11 = malloc(v9 + 8);
    uint64_t v12 = (char *)v11 + v10;
    *uint64_t v11 = *((void *)a1 + 3);
    unint64_t v8 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    *((void *)a1 + 2) = v12;
    *((void *)a1 + 3) = v11;
  }

  *((void *)a1 + 1) = v8 + 24;
  *(_WORD *)(v8 + 16) = a2;
  *(_BYTE *)(v8 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((unsigned int *)v8, a3, a1, a4, a5);
  return v8;
}

unint64_t swift::Demangle::__runtime::Demangler::createType( swift::Demangle::__runtime::Demangler *this, swift::Demangle::__runtime::Node *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (!a2) {
    return 0LL;
  }
  unint64_t v7 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
  if (!v7 || v7 + 24 > *((void *)this + 2))
  {
    unint64_t v8 = 2LL * *((void *)this + 4);
    if (v8 <= 0x20) {
      unint64_t v8 = 32LL;
    }
    *((void *)this + 4) = v8;
    unint64_t v9 = v8 + 8;
    unint64_t v10 = malloc(v8 + 8);
    uint64_t v11 = (char *)v10 + v9;
    *unint64_t v10 = *((void *)this + 3);
    unint64_t v7 = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    *((void *)this + 2) = v11;
    *((void *)this + 3) = v10;
  }

  *((void *)this + 1) = v7 + 24;
  *(_WORD *)(v7 + 16) = 232;
  *(_BYTE *)(v7 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((unsigned int *)v7, a2, this, a4, a5);
  return v7;
}

unint64_t swift::Demangle::__runtime::Demangler::createWithChildren( swift::Demangle::__runtime::NodeFactory *a1, __int16 a2, swift::Demangle::__runtime::Node *a3, swift::Demangle::__runtime::Node *a4, const char *a5)
{
  unint64_t v5 = 0LL;
  if (a3 && a4)
  {
    unint64_t v5 = (*((void *)a1 + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
    if (!v5 || v5 + 24 > *((void *)a1 + 2))
    {
      unint64_t v10 = 2LL * *((void *)a1 + 4);
      if (v10 <= 0x20) {
        unint64_t v10 = 32LL;
      }
      *((void *)a1 + 4) = v10;
      unint64_t v11 = v10 + 8;
      uint64_t v12 = malloc(v10 + 8);
      unint64_t v13 = (char *)v12 + v11;
      *uint64_t v12 = *((void *)a1 + 3);
      unint64_t v5 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8LL;
      *((void *)a1 + 2) = v13;
      *((void *)a1 + 3) = v12;
    }

    *((void *)a1 + 1) = v5 + 24;
    *(_WORD *)(v5 + 16) = a2;
    *(_BYTE *)(v5 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v5, a3, a1, (uint64_t)a4, a5);
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v5, a4, a1, v14, v15);
  }

  return v5;
}

unint64_t swift::Demangle::__runtime::Demangler::createWithChildren( swift::Demangle::__runtime::NodeFactory *a1, __int16 a2, swift::Demangle::__runtime::Node *a3, swift::Demangle::__runtime::Node *a4, char *a5)
{
  unint64_t v5 = 0LL;
  if (a3 && a4 && a5)
  {
    unint64_t v5 = (*((void *)a1 + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
    if (!v5 || v5 + 24 > *((void *)a1 + 2))
    {
      unint64_t v11 = 2LL * *((void *)a1 + 4);
      if (v11 <= 0x20) {
        unint64_t v11 = 32LL;
      }
      *((void *)a1 + 4) = v11;
      unint64_t v12 = v11 + 8;
      unint64_t v13 = malloc(v11 + 8);
      uint64_t v14 = (char *)v13 + v12;
      *unint64_t v13 = *((void *)a1 + 3);
      unint64_t v5 = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8LL;
      *((void *)a1 + 2) = v14;
      *((void *)a1 + 3) = v13;
    }

    *((void *)a1 + 1) = v5 + 24;
    *(_WORD *)(v5 + 16) = a2;
    *(_BYTE *)(v5 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v5, a3, a1, (uint64_t)a4, a5);
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v5, a4, a1, v15, v16);
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v5, (swift::Demangle::__runtime::Node *)a5, a1, v17, v18);
  }

  return v5;
}

unint64_t swift::Demangle::__runtime::Demangler::createWithChildren( swift::Demangle::__runtime::NodeFactory *a1, __int16 a2, swift::Demangle::__runtime::Node *a3, swift::Demangle::__runtime::Node *a4, char *a5, swift::Demangle::__runtime::Node *a6)
{
  unint64_t v6 = 0LL;
  if (a3 && a4 && a5 && a6)
  {
    unint64_t v6 = (*((void *)a1 + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
    if (!v6 || v6 + 24 > *((void *)a1 + 2))
    {
      unint64_t v13 = 2LL * *((void *)a1 + 4);
      if (v13 <= 0x20) {
        unint64_t v13 = 32LL;
      }
      *((void *)a1 + 4) = v13;
      unint64_t v14 = v13 + 8;
      uint64_t v15 = malloc(v13 + 8);
      size_t v16 = (char *)v15 + v14;
      *uint64_t v15 = *((void *)a1 + 3);
      unint64_t v6 = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8LL;
      *((void *)a1 + 2) = v16;
      *((void *)a1 + 3) = v15;
    }

    *((void *)a1 + 1) = v6 + 24;
    *(_WORD *)(v6 + 16) = a2;
    *(_BYTE *)(v6 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v6, a3, a1, (uint64_t)a4, a5);
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v6, a4, a1, v17, v18);
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v6, (swift::Demangle::__runtime::Node *)a5, a1, v19, v20);
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v6, a6, a1, v21, v22);
  }

  return v6;
}

unint64_t swift::Demangle::__runtime::Demangler::changeKind( swift::Demangle::__runtime::NodeFactory *a1, swift::Demangle::__runtime::Node **a2, __int16 a3, uint64_t a4, const char *a5)
{
  if (!a2) {
    return 0LL;
  }
  int v8 = *((unsigned __int8 *)a2 + 18);
  if (v8 == 4)
  {
    uint64_t v15 = *a2;
    unint64_t v10 = (*((void *)a1 + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
    if (!v10 || v10 + 24 > *((void *)a1 + 2))
    {
      unint64_t v16 = 2LL * *((void *)a1 + 4);
      if (v16 <= 0x20) {
        unint64_t v16 = 32LL;
      }
      *((void *)a1 + 4) = v16;
      unint64_t v17 = v16 + 8;
      uint64_t v18 = malloc(v16 + 8);
      uint64_t v19 = (char *)v18 + v17;
      *uint64_t v18 = *((void *)a1 + 3);
      unint64_t v10 = ((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8LL;
      *((void *)a1 + 2) = v19;
      *((void *)a1 + 3) = v18;
    }

    *((void *)a1 + 1) = v10 + 24;
    *(_WORD *)(v10 + 16) = a3;
    *(_BYTE *)(v10 + 18) = 4;
    *(void *)unint64_t v10 = v15;
  }

  else if (v8 == 3)
  {
    __int128 v9 = *(_OWORD *)a2;
    unint64_t v10 = (*((void *)a1 + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
    if (!v10 || v10 + 24 > *((void *)a1 + 2))
    {
      unint64_t v11 = 2LL * *((void *)a1 + 4);
      if (v11 <= 0x20) {
        unint64_t v11 = 32LL;
      }
      *((void *)a1 + 4) = v11;
      unint64_t v12 = v11 + 8;
      __int128 v30 = v9;
      unint64_t v13 = malloc(v11 + 8);
      __int128 v9 = v30;
      unint64_t v14 = (char *)v13 + v12;
      *unint64_t v13 = *((void *)a1 + 3);
      unint64_t v10 = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8LL;
      *((void *)a1 + 2) = v14;
      *((void *)a1 + 3) = v13;
    }

    *((void *)a1 + 1) = v10 + 24;
    *(_WORD *)(v10 + 16) = a3;
    *(_BYTE *)(v10 + 18) = 3;
    *(_OWORD *)unint64_t v10 = v9;
  }

  else
  {
    unint64_t v10 = (*((void *)a1 + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
    if (!v10 || v10 + 24 > *((void *)a1 + 2))
    {
      unint64_t v20 = 2LL * *((void *)a1 + 4);
      if (v20 <= 0x20) {
        unint64_t v20 = 32LL;
      }
      *((void *)a1 + 4) = v20;
      unint64_t v21 = v20 + 8;
      uint64_t v22 = malloc(v20 + 8);
      uint64_t v23 = (char *)v22 + v21;
      *uint64_t v22 = *((void *)a1 + 3);
      unint64_t v10 = ((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8LL;
      *((void *)a1 + 2) = v23;
      *((void *)a1 + 3) = v22;
    }

    *((void *)a1 + 1) = v10 + 24;
    *(_WORD *)(v10 + 16) = a3;
    *(_BYTE *)(v10 + 18) = 0;
  }

  int v24 = *((unsigned __int8 *)a2 + 18);
  unsigned int v25 = a2;
  if ((v24 - 1) >= 2)
  {
    if (v24 == 5)
    {
      int v26 = *a2;
      unsigned int v25 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_31:
      unsigned int v27 = (swift::Demangle::__runtime::Node **)((char *)v26 + 8 * *((unsigned int *)a2 + 2));
      goto LABEL_36;
    }

    unsigned int v25 = 0LL;
  }

  switch(v24)
  {
    case 1:
      unsigned int v27 = a2 + 1;
      break;
    case 2:
      unsigned int v27 = a2 + 2;
      break;
    case 5:
      int v26 = *a2;
      goto LABEL_31;
    default:
      unsigned int v27 = 0LL;
      break;
  }

unint64_t swift::Demangle::__runtime::Demangler::demangleTypeMangling( swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v6 = *((_DWORD *)this + 24);
  if (v6
    && (unsigned int v7 = v6 - 1,
        int v8 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8LL * v7),
        *((_WORD *)v8 + 8) == 232))
  {
    *((_DWORD *)this + 24) = v7;
  }

  else
  {
    int v8 = 0LL;
  }

  unint64_t v11 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::popFunctionParamLabels( this,  v8,  a3,  a4,  a5);
  unint64_t v12 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
  if (!v12 || v12 + 24 > *((void *)this + 2))
  {
    unint64_t v13 = 2LL * *((void *)this + 4);
    if (v13 <= 0x20) {
      unint64_t v13 = 32LL;
    }
    *((void *)this + 4) = v13;
    unint64_t v14 = v13 + 8;
    uint64_t v15 = malloc(v13 + 8);
    unint64_t v16 = (char *)v15 + v14;
    *uint64_t v15 = *((void *)this + 3);
    unint64_t v12 = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    *((void *)this + 2) = v16;
    *((void *)this + 3) = v15;
  }

  *((void *)this + 1) = v12 + 24;
  *(_WORD *)(v12 + 16) = 236;
  *(_BYTE *)(v12 + 18) = 0;
  if (v11 && v12) {
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v12, v11, this, v9, v10);
  }
  unint64_t result = 0LL;
  if (v8)
  {
    if (v12)
    {
      swift::Demangle::__runtime::Node::addChild((unsigned int *)v12, v8, this, v9, v10);
      return v12;
    }
  }

  return result;
}

unint64_t swift::Demangle::__runtime::Demangler::popFunctionParamLabels( swift::Demangle::__runtime::Demangler *this, swift::Demangle::__runtime::Node *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v6 = *((unsigned __int8 *)this + 80);
  if (!*((_BYTE *)this + 80))
  {
    int v9 = *((_DWORD *)this + 24);
    if (v9)
    {
      unsigned int v10 = v9 - 1;
      if (*(_WORD *)(*(void *)(*((void *)this + 11) + 8LL * v10) + 16LL) == 274)
      {
        *((_DWORD *)this + 24) = v10;
        unint64_t v11 = (int8x16_t *)((*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL);
        if (!v11 || (unint64_t)&v11[1].u64[1] > *((void *)this + 2))
        {
          unint64_t v12 = 2LL * *((void *)this + 4);
          if (v12 <= 0x20) {
            unint64_t v12 = 32LL;
          }
          *((void *)this + 4) = v12;
          unint64_t v13 = v12 + 8;
          unint64_t v14 = malloc(v12 + 8);
          uint64_t v15 = (char *)v14 + v13;
          *unint64_t v14 = *((void *)this + 3);
          unint64_t v11 = (int8x16_t *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8LL);
          *((void *)this + 2) = v15;
          *((void *)this + 3) = v14;
        }

        *((void *)this + 1) = (char *)v11 + 24;
        v11[1].i16[0] = 290;
        v11[1].i8[2] = 0;
        return (unint64_t)v11;
      }
    }
  }

  if (!a2 || *((_WORD *)a2 + 8) != 232) {
    return 0LL;
  }
  int v7 = *((unsigned __int8 *)a2 + 18);
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_8:
    int v8 = *(uint64_t **)a2;
    goto LABEL_18;
  }

  int v8 = 0LL;
LABEL_18:
  if (*((_WORD *)v8 + 8) != 44) {
    goto LABEL_31;
  }
  int v16 = *((unsigned __int8 *)v8 + 18);
  if (v16 != 2)
  {
    if (v16 != 5 || *((_DWORD *)v8 + 2) < 2u)
    {
      unint64_t v17 = 0LL;
      goto LABEL_25;
    }

    int v8 = (uint64_t *)*v8;
  }

  unint64_t v17 = (uint64_t *)v8[1];
LABEL_25:
  int v18 = *((unsigned __int8 *)v17 + 18);
  if ((v18 - 1) >= 2)
  {
    if (v18 != 5 || !*((_DWORD *)v17 + 2))
    {
      int v8 = 0LL;
      goto LABEL_31;
    }

    unint64_t v17 = (uint64_t *)*v17;
  }

  int v8 = (uint64_t *)*v17;
LABEL_31:
  int v19 = *((unsigned __int16 *)v8 + 8);
  if (v19 != 82 && v19 != 65) {
    return 0LL;
  }
  int v20 = *((unsigned __int8 *)v8 + 18);
  unsigned int v21 = v20 - 1;
  uint64_t v22 = v8;
  uint64_t v23 = *(unsigned __int16 *)(*v22 + 16) == 349;
  if (v21 >= 2)
  {
    int v24 = (uint64_t *)*v8;
    if (*(_WORD *)(*(void *)(*v8 + 8 * v23) + 16LL) == 67) {
      uint64_t v23 = (v23 + 1);
    }
    else {
      uint64_t v23 = v23;
    }
  }

  else
  {
    if (*(_WORD *)(v8[v23] + 16) == 67) {
      uint64_t v23 = (v23 + 1);
    }
    else {
      uint64_t v23 = v23;
    }
    int v24 = v8;
  }

  if (*(_WORD *)(v24[v23] + 16) == 129) {
    uint64_t v23 = (v23 + 1);
  }
  else {
    uint64_t v23 = v23;
  }
  if (v20 == 5)
  {
    unsigned int v25 = (uint64_t *)*v8;
    if (*(_WORD *)(*(void *)(*v8 + 8 * v23) + 16LL) == 130) {
      LODWORD(v23) = v23 + 1;
    }
    else {
      uint64_t v23 = v23;
    }
  }

  else
  {
    if (v20 == 2)
    {
      if (*(_WORD *)(v8[v23] + 16) == 130) {
        uint64_t v23 = (v23 + 1);
      }
      else {
        uint64_t v23 = v23;
      }
    }

    else
    {
      uint64_t v23 = *(unsigned __int16 *)(v8[v23] + 16) == 130;
    }

    if (*(_WORD *)(v8[v23] + 16) == 68) {
      uint64_t v23 = (v23 + 1);
    }
    else {
      uint64_t v23 = v23;
    }
    unsigned int v25 = v8;
  }

  if (*(_WORD *)(v25[v23] + 16) == 272) {
    goto LABEL_65;
  }
  int v26 = v8;
  if (v21 >= 2) {
    int v26 = (uint64_t *)*v8;
  }
  if (*(_WORD *)(v26[v23] + 16) == 273) {
LABEL_65:
  }
    uint64_t v23 = (v23 + 1);
  if (v20 == 5)
  {
    unint64_t v28 = *((unsigned int *)v8 + 2);
    unint64_t v29 = (uint64_t *)*v8;
    if (*(_WORD *)(*(void *)(*v8 + 8 * v23) + 16LL) == 66) {
      LODWORD(v23) = v23 + 1;
    }
  }

  else if (v20 == 2)
  {
    if (*(_WORD *)(v8[v23] + 16) == 66) {
      unsigned int v27 = v23 + 1;
    }
    else {
      unsigned int v27 = v23;
    }
    if (*(_WORD *)(v8[v27] + 16) == 271) {
      ++v27;
    }
    if (*(_WORD *)(v8[v27] + 16) == 348) {
      LODWORD(v23) = v27 + 1;
    }
    else {
      LODWORD(v23) = v27;
    }
    unint64_t v28 = 2LL;
  }

  else
  {
    if (*(_WORD *)(v8[v23] + 16) == 66) {
      unsigned int v30 = v23 + 1;
    }
    else {
      unsigned int v30 = v23;
    }
    LODWORD(v23) = *(unsigned __int16 *)(v8[*(_WORD *)(v8[v30] + 16) == 271] + 16) == 348;
    unint64_t v28 = 1LL;
  }

  if (v28 <= v23)
  {
    unint64_t v31 = 0LL;
  }

  else
  {
    if (v21 >= 2) {
      int v8 = (uint64_t *)*v8;
    }
    unint64_t v31 = (uint64_t *)v8[v23];
  }

  int v32 = *((unsigned __int8 *)v31 + 18);
  int v33 = (uint64_t **)v31;
  if (v32 == 5 && *((_DWORD *)v31 + 2))
  {
    int v33 = (uint64_t **)*v31;
LABEL_97:
    __int16 v34 = *v33;
    goto LABEL_99;
  }

  __int16 v34 = 0LL;
LABEL_99:
  int v35 = *((unsigned __int8 *)v34 + 18);
  if ((v35 - 1) < 2)
  {
LABEL_103:
    unsigned int v36 = (uint64_t *)*v34;
    goto LABEL_105;
  }

  if (v35 == 5 && *((_DWORD *)v34 + 2))
  {
    __int16 v34 = (uint64_t *)*v34;
    goto LABEL_103;
  }

  unsigned int v36 = 0LL;
LABEL_105:
  if (*((_WORD *)v36 + 8) == 223)
  {
    int v37 = *((unsigned __int8 *)v36 + 18);
    if (v37 != 1)
    {
      if (v37 == 5)
      {
        int v37 = *((_DWORD *)v36 + 2);
        if (!v37) {
          return 0LL;
        }
      }

      else if (v37 != 2)
      {
        return 0LL;
      }
    }
  }

  else
  {
    int v37 = 1;
  }

  unint64_t v11 = (int8x16_t *)((*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL);
  if (!v11 || (unint64_t)&v11[1].u64[1] > *((void *)this + 2))
  {
    unint64_t v38 = 2LL * *((void *)this + 4);
    if (v38 <= 0x20) {
      unint64_t v38 = 32LL;
    }
    *((void *)this + 4) = v38;
    unint64_t v39 = v38 + 8;
    uint64_t v40 = malloc(v38 + 8);
    unint64_t v41 = (char *)v40 + v39;
    *uint64_t v40 = *((void *)this + 3);
    unint64_t v11 = (int8x16_t *)(((unint64_t)v40 + 15) & 0xFFFFFFFFFFFFFFF8LL);
    *((void *)this + 2) = v41;
    *((void *)this + 3) = v40;
  }

  *((void *)this + 1) = (char *)v11 + 24;
  v11[1].i16[0] = 290;
  v11[1].i8[2] = 0;
  int v42 = *((unsigned __int8 *)v31 + 18);
  if (v42 == 5 && *((_DWORD *)v31 + 2))
  {
    unint64_t v31 = (uint64_t *)*v31;
LABEL_120:
    int v43 = (uint64_t *)*v31;
    goto LABEL_122;
  }

  int v43 = 0LL;
LABEL_122:
  int v44 = *((unsigned __int8 *)v43 + 18);
  if (v44 == 5 && *((_DWORD *)v43 + 2))
  {
    int v43 = (uint64_t *)*v43;
LABEL_126:
    int v45 = (uint64_t *)*v43;
    if (!v6) {
      goto LABEL_131;
    }
LABEL_129:
    if (!v45 || *((_WORD *)v45 + 8) != 223) {
      return (unint64_t)v11;
    }
    goto LABEL_131;
  }

  int v45 = 0LL;
  if (v6) {
    goto LABEL_129;
  }
LABEL_131:
  unint64_t v46 = 0LL;
  char v47 = 0;
  do
  {
    if (!*((_BYTE *)this + 80))
    {
      int v57 = *((_DWORD *)this + 24);
      if (v57)
      {
        unsigned int v58 = v57 - 1;
        unint64_t v52 = *(void *)(*((void *)this + 11) + 8LL * v58);
        *((_DWORD *)this + 24) = v58;
        if (v52)
        {
          int v59 = *(unsigned __int16 *)(v52 + 16);
          if (v59 == 275 || v59 == 101) {
            goto LABEL_136;
          }
        }
      }

      return 0LL;
    }

    unint64_t v53 = *((unsigned __int8 *)v45 + 18);
    unsigned int v54 = v53 - 1;
    if ((_DWORD)v53 == 1) {
      goto LABEL_142;
    }
    if ((_DWORD)v53 != 5)
    {
      if ((_DWORD)v53 != 2) {
        goto LABEL_152;
      }
      unint64_t v53 = 2LL;
LABEL_142:
      if (v53 > v46) {
        goto LABEL_143;
      }
      goto LABEL_152;
    }

    if (*((unsigned int *)v45 + 2) > v46)
    {
LABEL_143:
      unint64_t v55 = v45;
      if (v54 >= 2) {
        unint64_t v55 = (uint64_t *)*v45;
      }
      int v56 = (uint64_t *)v55[v46];
      goto LABEL_153;
    }

uint64_t swift::Demangle::__runtime::Demangler::demangleSymbolicReference( swift::Demangle::__runtime::Demangler *this, int a2)
{
  uint64_t v2 = *((void *)this + 9);
  uint64_t v3 = v2 + 4;
  uint64_t v5 = 0LL;
  int v6 = (_DWORD *)(*((void *)this + 7) + v2);
  int v7 = *v6;
  *((void *)this + 9) = v3;
  int v8 = 0;
  char v9 = 0;
  int v10 = 0;
  int v11 = 1;
  switch(a2)
  {
    case 1:
      goto LABEL_10;
    case 2:
      int v8 = 0;
      char v9 = 0;
      int v10 = 1;
      uint64_t v12 = *((void *)this + 71);
      if (!v12) {
        return 0LL;
      }
      goto LABEL_11;
    case 9:
      int v11 = 0;
      int v8 = 0;
      int v10 = 0;
      char v9 = 1;
      uint64_t v12 = *((void *)this + 71);
      if (!v12) {
        return 0LL;
      }
      goto LABEL_11;
    case 10:
      int v11 = 0;
      int v8 = 0;
      int v10 = 0;
      char v9 = 2;
      uint64_t v12 = *((void *)this + 71);
      if (!v12) {
        return 0LL;
      }
      goto LABEL_11;
    case 11:
      int v11 = 0;
      int v8 = 0;
      int v10 = 0;
      char v9 = 3;
LABEL_10:
      uint64_t v12 = *((void *)this + 71);
      if (v12) {
        goto LABEL_11;
      }
      return 0LL;
    case 12:
      int v11 = 0;
      int v10 = 0;
      char v9 = 4;
      int v8 = 1;
      uint64_t v12 = *((void *)this + 71);
      if (!v12) {
        return 0LL;
      }
LABEL_11:
      char v18 = v9;
      int v16 = v7;
      int v17 = v10;
      int v19 = v6;
      uint64_t v13 = (*(uint64_t (**)(uint64_t, char *, int *, int *, _DWORD **))(*(void *)v12 + 48LL))( v12,  &v18,  &v17,  &v16,  &v19);
      uint64_t v5 = v13;
      if (v13)
      {
        if ((v11 | v8) == 1)
        {
          int v14 = *(unsigned __int16 *)(v13 + 16);
          if (v14 != 301 && v14 != 309)
          {
            int v19 = (_DWORD *)v13;
            swift::Demangle::__runtime::Vector<swift::Demangle::__runtime::Node *>::push_back( (const void **)this + 13,  (uint64_t *)&v19,  this);
          }
        }
      }

      break;
    default:
      return v5;
  }

  return v5;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleTypeAnnotation( swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v6 = *((void *)this + 8);
  unint64_t v5 = *((void *)this + 9);
  if (v5 >= v6) {
    return 0LL;
  }
  unint64_t v8 = 0LL;
  unint64_t v9 = v5 + 1;
  *((void *)this + 9) = v5 + 1;
  uint64_t v10 = *((void *)this + 7);
  switch(*(_BYTE *)(v10 + v5))
  {
    case 'A':
      unint64_t v8 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
      if (!v8 || v8 + 24 > *((void *)this + 2))
      {
        unint64_t v11 = 2LL * *((void *)this + 4);
        if (v11 <= 0x20) {
          unint64_t v11 = 32LL;
        }
        *((void *)this + 4) = v11;
        unint64_t v12 = v11 + 8;
        uint64_t v13 = malloc(v11 + 8);
        int v14 = (char *)v13 + v12;
        *uint64_t v13 = *((void *)this + 3);
        unint64_t v8 = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8LL;
        *((void *)this + 2) = v14;
        *((void *)this + 3) = v13;
      }

      *((void *)this + 1) = v8 + 24;
      __int16 v15 = 129;
      goto LABEL_50;
    case 'K':
      int v16 = *((_DWORD *)this + 24);
      if (!v16) {
        return 0LL;
      }
      int v17 = v16 - 1;
      unint64_t v18 = *(void *)(*((void *)this + 11) + 8LL * (v16 - 1));
      if (*(_WORD *)(v18 + 16) != 232) {
        return 0LL;
      }
      *((_DWORD *)this + 24) = v17;
      int v19 = *(unsigned __int8 *)(v18 + 18);
      if (v19 == 1) {
        goto LABEL_15;
      }
      if (v19 != 5 || *(_DWORD *)(v18 + 8) != 1) {
        return 0LL;
      }
      unint64_t v18 = *(void *)v18;
LABEL_15:
      unint64_t v20 = *(void *)v18;
      if (!*(void *)v18) {
        return 0LL;
      }
      unint64_t v8 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
      if (!v8 || v8 + 24 > *((void *)this + 2))
      {
        unint64_t v21 = 2LL * *((void *)this + 4);
        if (v21 <= 0x20) {
          unint64_t v21 = 32LL;
        }
        *((void *)this + 4) = v21;
        unint64_t v22 = v21 + 8;
        uint64_t v23 = malloc(v21 + 8);
        int v24 = (char *)v23 + v22;
        *uint64_t v23 = *((void *)this + 3);
        unint64_t v8 = ((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8LL;
        *((void *)this + 2) = v24;
        *((void *)this + 3) = v23;
      }

      *((void *)this + 1) = v8 + 24;
      __int16 v25 = 273;
      goto LABEL_124;
    case 'L':
      if (v9 >= v6) {
        return 0LL;
      }
      *((void *)this + 9) = v5 + 2;
      uint64_t v26 = *(char *)(v10 + v9);
      if ((_DWORD)v26 == 115) {
        goto LABEL_26;
      }
      if ((_DWORD)v26 != 105) {
        return 0LL;
      }
      uint64_t v26 = 105LL;
LABEL_26:
      unint64_t v8 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
      if (!v8 || v8 + 24 > *((void *)this + 2))
      {
        unint64_t v27 = 2LL * *((void *)this + 4);
        if (v27 <= 0x20) {
          unint64_t v27 = 32LL;
        }
        *((void *)this + 4) = v27;
        unint64_t v28 = v27 + 8;
        unint64_t v29 = malloc(v27 + 8);
        unsigned int v30 = (char *)v29 + v28;
        *unint64_t v29 = *((void *)this + 3);
        unint64_t v8 = ((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8LL;
        *((void *)this + 2) = v30;
        *((void *)this + 3) = v29;
      }

      *((void *)this + 1) = v8 + 24;
      *(_WORD *)(v8 + 16) = 349;
      *(_BYTE *)(v8 + 18) = 4;
      *(void *)unint64_t v8 = v26;
      return v8;
    case 'T':
      unint64_t v8 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
      if (!v8 || v8 + 24 > *((void *)this + 2))
      {
        unint64_t v31 = 2LL * *((void *)this + 4);
        if (v31 <= 0x20) {
          unint64_t v31 = 32LL;
        }
        *((void *)this + 4) = v31;
        unint64_t v32 = v31 + 8;
        int v33 = malloc(v31 + 8);
        __int16 v34 = (char *)v33 + v32;
        *int v33 = *((void *)this + 3);
        unint64_t v8 = ((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8LL;
        *((void *)this + 2) = v34;
        *((void *)this + 3) = v33;
      }

      *((void *)this + 1) = v8 + 24;
      __int16 v15 = 130;
      goto LABEL_50;
    case 'a':
      unint64_t v8 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
      if (!v8 || v8 + 24 > *((void *)this + 2))
      {
        unint64_t v35 = 2LL * *((void *)this + 4);
        if (v35 <= 0x20) {
          unint64_t v35 = 32LL;
        }
        *((void *)this + 4) = v35;
        unint64_t v36 = v35 + 8;
        int v37 = malloc(v35 + 8);
        unint64_t v38 = (char *)v37 + v36;
        *int v37 = *((void *)this + 3);
        unint64_t v8 = ((unint64_t)v37 + 15) & 0xFFFFFFFFFFFFFFF8LL;
        *((void *)this + 2) = v38;
        *((void *)this + 3) = v37;
      }

      *((void *)this + 1) = v8 + 24;
      __int16 v15 = 271;
      goto LABEL_50;
    case 'b':
      unint64_t v8 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
      if (!v8 || v8 + 24 > *((void *)this + 2))
      {
        unint64_t v39 = 2LL * *((void *)this + 4);
        if (v39 <= 0x20) {
          unint64_t v39 = 32LL;
        }
        *((void *)this + 4) = v39;
        unint64_t v40 = v39 + 8;
        unint64_t v41 = malloc(v39 + 8);
        int v42 = (char *)v41 + v40;
        void *v41 = *((void *)this + 3);
        unint64_t v8 = ((unint64_t)v41 + 15) & 0xFFFFFFFFFFFFFFF8LL;
        *((void *)this + 2) = v42;
        *((void *)this + 3) = v41;
      }

      *((void *)this + 1) = v8 + 24;
      __int16 v15 = 66;
LABEL_50:
      *(_WORD *)(v8 + 16) = v15;
      *(_BYTE *)(v8 + 18) = 0;
      return v8;
    case 'c':
      int v43 = *((_DWORD *)this + 24);
      if (!v43) {
        return 0LL;
      }
      int v44 = v43 - 1;
      unint64_t v45 = *(void *)(*((void *)this + 11) + 8LL * (v43 - 1));
      if (*(_WORD *)(v45 + 16) != 232) {
        return 0LL;
      }
      *((_DWORD *)this + 24) = v44;
      int v46 = *(unsigned __int8 *)(v45 + 18);
      if (v46 == 1) {
        goto LABEL_57;
      }
      if (v46 != 5 || *(_DWORD *)(v45 + 8) != 1) {
        return 0LL;
      }
      unint64_t v45 = *(void *)v45;
LABEL_57:
      unint64_t v20 = *(void *)v45;
      if (!*(void *)v45) {
        return 0LL;
      }
      unint64_t v8 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
      if (!v8 || v8 + 24 > *((void *)this + 2))
      {
        unint64_t v47 = 2LL * *((void *)this + 4);
        if (v47 <= 0x20) {
          unint64_t v47 = 32LL;
        }
        *((void *)this + 4) = v47;
        unint64_t v48 = v47 + 8;
        unint64_t v49 = malloc(v47 + 8);
        unint64_t v50 = (char *)v49 + v48;
        *unint64_t v49 = *((void *)this + 3);
        unint64_t v8 = ((unint64_t)v49 + 15) & 0xFFFFFFFFFFFFFFF8LL;
        *((void *)this + 2) = v50;
        *((void *)this + 3) = v49;
      }

      *((void *)this + 1) = v8 + 24;
      __int16 v25 = 67;
      goto LABEL_124;
    case 'i':
      int v51 = *((_DWORD *)this + 24);
      if (!v51) {
        return 0LL;
      }
      int v52 = v51 - 1;
      unint64_t v53 = *(void *)(*((void *)this + 11) + 8LL * (v51 - 1));
      if (*(_WORD *)(v53 + 16) != 232) {
        return 0LL;
      }
      *((_DWORD *)this + 24) = v52;
      int v54 = *(unsigned __int8 *)(v53 + 18);
      if (v54 == 1) {
        goto LABEL_70;
      }
      if (v54 != 5 || *(_DWORD *)(v53 + 8) != 1) {
        return 0LL;
      }
      unint64_t v53 = *(void *)v53;
LABEL_70:
      unint64_t v8 = *(void *)v53;
      if (!*(void *)v53) {
        return v8;
      }
      unint64_t v20 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
      if (!v20 || v20 + 24 > *((void *)this + 2))
      {
        unint64_t v55 = 2LL * *((void *)this + 4);
        if (v55 <= 0x20) {
          unint64_t v55 = 32LL;
        }
        *((void *)this + 4) = v55;
        unint64_t v56 = v55 + 8;
        int v57 = malloc(v55 + 8);
        unsigned int v58 = (char *)v57 + v56;
        *int v57 = *((void *)this + 3);
        unint64_t v20 = ((unint64_t)v57 + 15) & 0xFFFFFFFFFFFFFFF8LL;
        *((void *)this + 2) = v58;
        *((void *)this + 3) = v57;
      }

      *((void *)this + 1) = v20 + 24;
      __int16 v59 = 127;
      break;
    case 'j':
      return swift::Demangle::__runtime::Demangler::demangleDifferentiableFunctionType(this);
    case 'k':
      int v61 = *((_DWORD *)this + 24);
      if (!v61) {
        return 0LL;
      }
      int v62 = v61 - 1;
      unint64_t v63 = *(void *)(*((void *)this + 11) + 8LL * (v61 - 1));
      if (*(_WORD *)(v63 + 16) != 232) {
        return 0LL;
      }
      *((_DWORD *)this + 24) = v62;
      int v64 = *(unsigned __int8 *)(v63 + 18);
      if (v64 == 1) {
        goto LABEL_84;
      }
      if (v64 != 5 || *(_DWORD *)(v63 + 8) != 1) {
        return 0LL;
      }
      unint64_t v63 = *(void *)v63;
LABEL_84:
      unint64_t v8 = *(void *)v63;
      if (!*(void *)v63) {
        return v8;
      }
      unint64_t v20 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
      if (!v20 || v20 + 24 > *((void *)this + 2))
      {
        unint64_t v65 = 2LL * *((void *)this + 4);
        if (v65 <= 0x20) {
          unint64_t v65 = 32LL;
        }
        *((void *)this + 4) = v65;
        unint64_t v66 = v65 + 8;
        int v67 = malloc(v65 + 8);
        __int128 v68 = (char *)v67 + v66;
        void *v67 = *((void *)this + 3);
        unint64_t v20 = ((unint64_t)v67 + 15) & 0xFFFFFFFFFFFFFFF8LL;
        *((void *)this + 2) = v68;
        *((void *)this + 3) = v67;
      }

      *((void *)this + 1) = v20 + 24;
      __int16 v59 = 326;
      break;
    case 'l':
      return swift::Demangle::__runtime::Demangler::demangleLifetimeDependenceKind(this, 0, a3, a4, a5);
    case 't':
      int v69 = *((_DWORD *)this + 24);
      if (!v69) {
        return 0LL;
      }
      int v70 = v69 - 1;
      unint64_t v71 = *(void *)(*((void *)this + 11) + 8LL * (v69 - 1));
      if (*(_WORD *)(v71 + 16) != 232) {
        return 0LL;
      }
      *((_DWORD *)this + 24) = v70;
      int v72 = *(unsigned __int8 *)(v71 + 18);
      if (v72 == 1) {
        goto LABEL_98;
      }
      if (v72 != 5 || *(_DWORD *)(v71 + 8) != 1) {
        return 0LL;
      }
      unint64_t v71 = *(void *)v71;
LABEL_98:
      unint64_t v8 = *(void *)v71;
      if (!*(void *)v71) {
        return v8;
      }
      unint64_t v20 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
      if (!v20 || v20 + 24 > *((void *)this + 2))
      {
        unint64_t v73 = 2LL * *((void *)this + 4);
        if (v73 <= 0x20) {
          unint64_t v73 = 32LL;
        }
        *((void *)this + 4) = v73;
        unint64_t v74 = v73 + 8;
        int v75 = malloc(v73 + 8);
        unint64_t v76 = (char *)v75 + v74;
        void *v75 = *((void *)this + 3);
        unint64_t v20 = ((unint64_t)v75 + 15) & 0xFFFFFFFFFFFFFFF8LL;
        *((void *)this + 2) = v76;
        *((void *)this + 3) = v75;
      }

      *((void *)this + 1) = v20 + 24;
      __int16 v59 = 331;
      break;
    case 'u':
      int v77 = *((_DWORD *)this + 24);
      if (!v77) {
        return 0LL;
      }
      int v78 = v77 - 1;
      unint64_t v79 = *(void *)(*((void *)this + 11) + 8LL * (v77 - 1));
      if (*(_WORD *)(v79 + 16) != 232) {
        return 0LL;
      }
      *((_DWORD *)this + 24) = v78;
      int v80 = *(unsigned __int8 *)(v79 + 18);
      if (v80 == 1) {
        goto LABEL_111;
      }
      if (v80 != 5 || *(_DWORD *)(v79 + 8) != 1) {
        return 0LL;
      }
      unint64_t v79 = *(void *)v79;
LABEL_111:
      unint64_t v8 = *(void *)v79;
      if (!*(void *)v79) {
        return v8;
      }
      unint64_t v20 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
      if (!v20 || v20 + 24 > *((void *)this + 2))
      {
        unint64_t v81 = 2LL * *((void *)this + 4);
        if (v81 <= 0x20) {
          unint64_t v81 = 32LL;
        }
        *((void *)this + 4) = v81;
        unint64_t v82 = v81 + 8;
        unint64_t v83 = malloc(v81 + 8);
        uint64_t v84 = (char *)v83 + v82;
        void *v83 = *((void *)this + 3);
        unint64_t v20 = ((unint64_t)v83 + 15) & 0xFFFFFFFFFFFFFFF8LL;
        *((void *)this + 2) = v84;
        *((void *)this + 3) = v83;
      }

      *((void *)this + 1) = v20 + 24;
      __int16 v59 = 128;
      break;
    default:
      return v8;
  }

  *(_WORD *)(v20 + 16) = v59;
  *(_BYTE *)(v20 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((unsigned int *)v20, (swift::Demangle::__runtime::Node *)v8, this, a4, a5);
  unint64_t v8 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
  if (!v8 || v8 + 24 > *((void *)this + 2))
  {
    unint64_t v85 = 2LL * *((void *)this + 4);
    if (v85 <= 0x20) {
      unint64_t v85 = 32LL;
    }
    *((void *)this + 4) = v85;
    unint64_t v86 = v85 + 8;
    unint64_t v87 = malloc(v85 + 8);
    unint64_t v88 = (char *)v87 + v86;
    void *v87 = *((void *)this + 3);
    unint64_t v8 = ((unint64_t)v87 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    *((void *)this + 2) = v88;
    *((void *)this + 3) = v87;
  }

  *((void *)this + 1) = v8 + 24;
  __int16 v25 = 232;
LABEL_124:
  *(_WORD *)(v8 + 16) = v25;
  *(_BYTE *)(v8 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((unsigned int *)v8, (swift::Demangle::__runtime::Node *)v20, this, a4, a5);
  return v8;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleDifferentiableFunctionType( swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2 = *((void *)this + 9);
  if (v2 >= *((void *)this + 8))
  {
    int v3 = 0;
  }

  else
  {
    *((void *)this + 9) = v2 + 1;
    int v3 = *(char *)(*((void *)this + 7) + v2);
  }

  HIDWORD(__swift::__runtime::llvm::hash_value(v4, v5) = v3;
  LODWORD(__swift::__runtime::llvm::hash_value(v4, v5) = v3 - 100;
  unsigned int v4 = v5 >> 1;
  if (v4 > 7 || ((0x93u >> v4) & 1) == 0) {
    return 0LL;
  }
  uint64_t v7 = qword_18180DDA0[v4];
  unint64_t result = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
  if (!result || result + 24 > *((void *)this + 2))
  {
    unint64_t v8 = 2LL * *((void *)this + 4);
    if (v8 <= 0x20) {
      unint64_t v8 = 32LL;
    }
    *((void *)this + 4) = v8;
    unint64_t v9 = v8 + 8;
    uint64_t v10 = malloc(v8 + 8);
    *uint64_t v10 = *((void *)this + 3);
    unint64_t result = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    *((void *)this + 2) = (char *)v10 + v9;
    *((void *)this + 3) = v10;
  }

  *((void *)this + 1) = result + 24;
  *(_WORD *)(result + 16) = 68;
  *(_BYTE *)(result + 18) = 4;
  *(void *)unint64_t result = v7;
  return result;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleLifetimeDependenceKind( swift::Demangle::__runtime::Demangler *this, int a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v5 = *((void *)this + 9);
  if (v5 >= *((void *)this + 8)) {
    return 0LL;
  }
  *((void *)this + 9) = v5 + 1;
  uint64_t v7 = *(char *)(*((void *)this + 7) + v5);
  if ((_DWORD)v7 != 115)
  {
    if ((_DWORD)v7 != 105) {
      return 0LL;
    }
    uint64_t v7 = 105LL;
  }

  unint64_t v8 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
  if (a2)
  {
    if (!v8 || v8 + 24 > *((void *)this + 2))
    {
      unint64_t v9 = 2LL * *((void *)this + 4);
      if (v9 <= 0x20) {
        unint64_t v9 = 32LL;
      }
      *((void *)this + 4) = v9;
      unint64_t v10 = v9 + 8;
      unint64_t v11 = malloc(v9 + 8);
      unint64_t v12 = (char *)v11 + v10;
      *unint64_t v11 = *((void *)this + 3);
      unint64_t v8 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8LL;
      *((void *)this + 2) = v12;
      *((void *)this + 3) = v11;
    }

    *((void *)this + 1) = v8 + 24;
    *(_WORD *)(v8 + 16) = 349;
    *(_BYTE *)(v8 + 18) = 4;
    *(void *)unint64_t v8 = v7;
    return v8;
  }

  if (!v8 || v8 + 24 > *((void *)this + 2))
  {
    unint64_t v13 = 2LL * *((void *)this + 4);
    if (v13 <= 0x20) {
      unint64_t v13 = 32LL;
    }
    *((void *)this + 4) = v13;
    unint64_t v14 = v13 + 8;
    __int16 v15 = malloc(v13 + 8);
    int v16 = (char *)v15 + v14;
    *__int16 v15 = *((void *)this + 3);
    unint64_t v8 = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    *((void *)this + 2) = v16;
    *((void *)this + 3) = v15;
  }

  *((void *)this + 1) = v8 + 24;
  *(_WORD *)(v8 + 16) = 102;
  *(_BYTE *)(v8 + 18) = 4;
  *(void *)unint64_t v8 = v7;
  int v17 = *((_DWORD *)this + 24);
  if (!v17) {
    return 0LL;
  }
  int v18 = v17 - 1;
  int v19 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8LL * (v17 - 1));
  if (*((_WORD *)v19 + 8) != 232) {
    return 0LL;
  }
  *((_DWORD *)this + 24) = v18;
  int v20 = *((unsigned __int8 *)v19 + 18);
  if (v20 != 1)
  {
    if (v20 != 5 || *((_DWORD *)v19 + 2) != 1) {
      return 0LL;
    }
    int v19 = *(swift::Demangle::__runtime::Node **)v19;
  }

  unint64_t v21 = *(swift::Demangle::__runtime::Node **)v19;
  if (!*(void *)v19) {
    return 0LL;
  }
  unint64_t v22 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
  if (!v22 || v22 + 24 > *((void *)this + 2))
  {
    unint64_t v23 = 2LL * *((void *)this + 4);
    if (v23 <= 0x20) {
      unint64_t v23 = 32LL;
    }
    *((void *)this + 4) = v23;
    unint64_t v24 = v23 + 8;
    __int16 v25 = malloc(v23 + 8);
    uint64_t v26 = (char *)v25 + v24;
    *__int16 v25 = *((void *)this + 3);
    unint64_t v22 = ((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    *((void *)this + 2) = v26;
    *((void *)this + 3) = v25;
  }

  *((void *)this + 1) = v22 + 24;
  *(_WORD *)(v22 + 16) = 348;
  *(_BYTE *)(v22 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((unsigned int *)v22, (swift::Demangle::__runtime::Node *)v8, this, a4, a5);
  swift::Demangle::__runtime::Node::addChild((unsigned int *)v22, v21, this, v27, v28);
  unint64_t v8 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
  if (!v8 || v8 + 24 > *((void *)this + 2))
  {
    unint64_t v31 = 2LL * *((void *)this + 4);
    if (v31 <= 0x20) {
      unint64_t v31 = 32LL;
    }
    *((void *)this + 4) = v31;
    unint64_t v32 = v31 + 8;
    int v33 = malloc(v31 + 8);
    __int16 v34 = (char *)v33 + v32;
    *int v33 = *((void *)this + 3);
    unint64_t v8 = ((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    *((void *)this + 2) = v34;
    *((void *)this + 3) = v33;
  }

  *((void *)this + 1) = v8 + 24;
  *(_WORD *)(v8 + 16) = 232;
  *(_BYTE *)(v8 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild( (unsigned int *)v8,  (swift::Demangle::__runtime::Node *)v22,  this,  v29,  v30);
  return v8;
}

uint64_t swift::Demangle::__runtime::Demangler::demangleMultiSubstitutions( swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2 = *((void *)this + 8);
  unint64_t v1 = *((void *)this + 9);
  if (v1 < v2)
  {
    unsigned int v4 = (const void **)((char *)this + 88);
    int v5 = -1;
    do
    {
      *((void *)this + 9) = v1 + 1;
      uint64_t v6 = *((void *)this + 7);
      int v7 = *(char *)(v6 + v1);
      if (!*(_BYTE *)(v6 + v1)) {
        break;
      }
      if ((v7 - 97) > 0x19u)
      {
        if ((v7 - 65) <= 0x19u)
        {
          uint64_t v8 = 0LL;
          if (v5 <= 2048 && *((unsigned int *)this + 28) > (unint64_t)(*(char *)(v6 + v1) - 65LL))
          {
            uint64_t v8 = *(void *)(*((void *)this + 13) + 8 * (*(char *)(v6 + v1) - 65LL));
            if (v5 >= 2)
            {
              unsigned int v12 = v5 + 1;
              do
              {
                uint64_t v15 = v8;
                swift::Demangle::__runtime::Vector<swift::Demangle::__runtime::Node *>::push_back(v4, &v15, this);
                --v12;
              }

              while (v12 > 2);
            }
          }

          return v8;
        }

        if (v7 == 95)
        {
          unsigned int v13 = v5 + 27;
          if (*((_DWORD *)this + 28) <= v13) {
            return 0LL;
          }
          return *(void *)(*((void *)this + 13) + 8LL * v13);
        }

        *((void *)this + 9) = v1;
        int v5 = 0;
        while (1)
        {
          int v10 = *(unsigned __int8 *)(v6 + v1);
          int v11 = v10 + 10 * v5 - 48;
          if (v11 < v5) {
            return 0LL;
          }
          *((void *)this + 9) = ++v1;
          int v5 = v11;
          if (v2 == v1)
          {
            unint64_t v1 = v2;
            int v5 = v11;
            break;
          }
        }

        if (v5 < 0) {
          return 0LL;
        }
      }

      else
      {
        uint64_t v8 = 0LL;
        uint64_t v8 = *(void *)(*((void *)this + 13) + 8 * (*(char *)(v6 + v1) - 97LL));
        if (v5 >= 2)
        {
          unsigned int v9 = v5 + 1;
          do
          {
            uint64_t v15 = v8;
            swift::Demangle::__runtime::Vector<swift::Demangle::__runtime::Node *>::push_back(v4, &v15, this);
            --v9;
          }

          while (v9 > 2);
        }

        if (!v8) {
          return v8;
        }
        uint64_t v15 = v8;
        swift::Demangle::__runtime::Vector<swift::Demangle::__runtime::Node *>::push_back(v4, &v15, this);
        unint64_t v2 = *((void *)this + 8);
        unint64_t v1 = *((void *)this + 9);
        int v5 = -1;
      }
    }

    while (v1 < v2);
  }

  return 0LL;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleBuiltinType( swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v5 = *((void *)this + 8);
  unint64_t v6 = *((void *)this + 9);
  if (v6 >= v5) {
    return 0LL;
  }
  unint64_t v8 = 0LL;
  unint64_t v9 = v6 + 1;
  *((void *)this + 9) = v6 + 1;
  uint64_t v10 = *((void *)this + 7);
  switch(*(_BYTE *)(v10 + v6))
  {
    case 'B':
      int v11 = "Builtin.UnsafeValueBuffer";
      size_t v12 = 25LL;
      goto LABEL_45;
    case 'D':
      int v11 = "Builtin.DefaultActorStorage";
      size_t v12 = 27LL;
      goto LABEL_45;
    case 'I':
      int v11 = "Builtin.IntLiteral";
      goto LABEL_38;
    case 'O':
      int v11 = "Builtin.UnknownObject";
      size_t v12 = 21LL;
      goto LABEL_45;
    case 'P':
      int v11 = "Builtin.PackIndex";
      size_t v12 = 17LL;
      goto LABEL_45;
    case 'T':
      unint64_t Node = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
      if (!Node || Node + 24 > *((void *)this + 2))
      {
        unint64_t v14 = 2LL * *((void *)this + 4);
        if (v14 <= 0x20) {
          unint64_t v14 = 32LL;
        }
        *((void *)this + 4) = v14;
        unint64_t v15 = v14 + 8;
        int v16 = malloc(v14 + 8);
        *int v16 = *((void *)this + 3);
        unint64_t Node = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8LL;
        *((void *)this + 2) = (char *)v16 + v15;
        *((void *)this + 3) = v16;
      }

      *((void *)this + 1) = Node + 24;
      *(_WORD *)(Node + 16) = 21;
      *(_BYTE *)(Node + 18) = 0;
      goto LABEL_46;
    case 'b':
      int v11 = "Builtin.BridgeObject";
      goto LABEL_36;
    case 'c':
      int v11 = "Builtin.RawUnsafeContinuation";
      size_t v12 = 29LL;
      goto LABEL_45;
    case 'd':
      int v11 = "Builtin.NonDefaultDistributedActorStorage";
      size_t v12 = 41LL;
      goto LABEL_45;
    case 'e':
      int v11 = "Builtin.Executor";
      goto LABEL_40;
    case 'f':
      if (v9 >= v5) {
        return 0LL;
      }
      int v17 = *(unsigned __int8 *)(v10 + v9);
      if (v17 == 95) {
        goto LABEL_43;
      }
      signed int v18 = 0;
      while (1)
      {
        int v19 = *(unsigned __int8 *)(v10 + v9);
        int v20 = v19 + 10 * v18 - 48;
        if (v20 < v18) {
          return 0LL;
        }
        unint64_t v8 = 0LL;
        *((void *)this + 9) = ++v9;
        signed int v18 = v20;
        if (v5 == v9) {
          return v8;
        }
      }

      unint64_t v8 = 0LL;
      if (v18 < 0 || v9 >= v5 || v19 != 95) {
        return v8;
      }
      *((void *)this + 9) = v9 + 1;
      int v54 = 0LL;
      unint64_t v32 = (char *)*((void *)this + 1);
      if (!v32 || (unint64_t)(v32 + 14) > *((void *)this + 2))
      {
        unint64_t v33 = 2LL * *((void *)this + 4);
        if (v33 <= 0xF) {
          unint64_t v33 = 15LL;
        }
        *((void *)this + 4) = v33;
        unint64_t v34 = v33 + 8;
        unint64_t v35 = malloc(v33 + 8);
        void *v35 = *((void *)this + 3);
        unint64_t v32 = (char *)(v35 + 1);
        *((void *)this + 2) = (char *)v35 + v34;
        *((void *)this + 3) = v35;
      }

      *((void *)this + 1) = v32 + 14;
      int v54 = v32;
      qmemcpy(v32, "Builtin.FPIEEE", 14);
      uint64_t v36 = 0xE0000000ELL;
      goto LABEL_78;
    case 'i':
      if (v9 >= v5) {
        return 0LL;
      }
      int v21 = *(unsigned __int8 *)(v10 + v9);
      if (v21 == 95) {
        goto LABEL_43;
      }
      signed int v18 = 0;
      while (1)
      {
        int v22 = *(unsigned __int8 *)(v10 + v9);
        int v23 = v22 + 10 * v18 - 48;
        if (v23 < v18) {
          return 0LL;
        }
        unint64_t v8 = 0LL;
        *((void *)this + 9) = ++v9;
        signed int v18 = v23;
        if (v5 == v9) {
          return v8;
        }
      }

      unint64_t v8 = 0LL;
      if (v18 < 0 || v9 >= v5 || v22 != 95) {
        return v8;
      }
      *((void *)this + 9) = v9 + 1;
      int v54 = 0LL;
      int v37 = (void *)*((void *)this + 1);
      if (!v37 || (unint64_t)v37 + 11 > *((void *)this + 2))
      {
        unint64_t v38 = 2LL * *((void *)this + 4);
        if (v38 <= 0xC) {
          unint64_t v38 = 12LL;
        }
        *((void *)this + 4) = v38;
        unint64_t v39 = v38 + 8;
        unint64_t v40 = malloc(v38 + 8);
        *unint64_t v40 = *((void *)this + 3);
        int v37 = v40 + 1;
        *((void *)this + 2) = (char *)v40 + v39;
        *((void *)this + 3) = v40;
      }

      *((void *)this + 1) = (char *)v37 + 11;
      int v54 = (char *)v37;
      *(_DWORD *)((char *)v37 + 7) = 1953384750;
      *int v37 = *(void *)"Builtin.Int";
      uint64_t v36 = 0xB0000000BLL;
LABEL_78:
      uint64_t v55 = v36;
      swift::Demangle::__runtime::CharVector::append((unsigned int *)&v54, v18, this);
      unint64_t v41 = v54;
      uint64_t v42 = v55;
      unint64_t Node = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
      if (!Node || Node + 24 > *((void *)this + 2))
      {
        unint64_t v43 = 2LL * *((void *)this + 4);
        if (v43 <= 0x20) {
          unint64_t v43 = 32LL;
        }
        *((void *)this + 4) = v43;
        unint64_t v44 = v43 + 8;
        unint64_t v45 = malloc(v43 + 8);
        *unint64_t v45 = *((void *)this + 3);
        unint64_t Node = ((unint64_t)v45 + 15) & 0xFFFFFFFFFFFFFFF8LL;
        *((void *)this + 2) = (char *)v45 + v44;
        *((void *)this + 3) = v45;
      }

      *((void *)this + 1) = Node + 24;
      *(_WORD *)(Node + 16) = 20;
      *(_BYTE *)(Node + 18) = 3;
      *(void *)unint64_t Node = v41;
      *(void *)(Node + 8) = v42;
      goto LABEL_46;
    case 'j':
      int v11 = "Builtin.Job";
      size_t v12 = 11LL;
      goto LABEL_45;
    case 'o':
      int v11 = "Builtin.NativeObject";
LABEL_36:
      size_t v12 = 20LL;
      goto LABEL_45;
    case 'p':
      int v11 = "Builtin.RawPointer";
LABEL_38:
      size_t v12 = 18LL;
      goto LABEL_45;
    case 't':
      int v11 = "Builtin.SILToken";
LABEL_40:
      size_t v12 = 16LL;
      goto LABEL_45;
    case 'v':
      if (v9 >= v5) {
        return 0LL;
      }
      int v24 = *(unsigned __int8 *)(v10 + v9);
      if (v24 == 95)
      {
LABEL_43:
        unint64_t v8 = 0LL;
        *((void *)this + 9) = v6 + 2;
        return v8;
      }

      signed int v29 = 0;
      break;
    case 'w':
      int v11 = "Builtin.Word";
      size_t v12 = 12LL;
LABEL_45:
      unint64_t Node = swift::Demangle::__runtime::NodeFactory::createNode(this, 20, v11, v12);
      if (Node) {
        goto LABEL_46;
      }
      return 0LL;
    default:
      return v8;
  }

  while (1)
  {
    int v30 = *(unsigned __int8 *)(v10 + v9);
    int v31 = v30 + 10 * v29 - 48;
    if (v31 < v29) {
      return 0LL;
    }
    unint64_t v8 = 0LL;
    *((void *)this + 9) = ++v9;
    signed int v29 = v31;
    if (v5 == v9) {
      return v8;
    }
  }

  unint64_t v8 = 0LL;
  if (v29 < 0 || v9 >= v5 || v30 != 95) {
    return v8;
  }
  *((void *)this + 9) = v9 + 1;
  int v46 = *((_DWORD *)this + 24);
  if (!v46) {
    return 0LL;
  }
  int v47 = v46 - 1;
  unint64_t v48 = *(void *)(*((void *)this + 11) + 8LL * (v46 - 1));
  if (*(_WORD *)(v48 + 16) != 232) {
    return 0LL;
  }
  *((_DWORD *)this + 24) = v47;
  int v49 = *(unsigned __int8 *)(v48 + 18);
  if (v49 == 1) {
    goto LABEL_94;
  }
  if (v49 != 5 || *(_DWORD *)(v48 + 8) != 1) {
    return 0LL;
  }
  unint64_t v48 = *(void *)v48;
LABEL_94:
  unint64_t v8 = *(void *)v48;
  if (*(void *)v48)
  {
    if (*(_WORD *)(v8 + 16) != 20 || *(void *)(v8 + 8) < 8uLL || **(void **)v8 != 0x2E6E69746C697542LL) {
      return 0LL;
    }
    int v54 = 0LL;
    uint64_t v55 = 0LL;
    swift::Demangle::__runtime::CharVector::append(&v54, "Builtin.Vec", 0xBuLL, this);
    swift::Demangle::__runtime::CharVector::append((unsigned int *)&v54, v29, this);
    char v53 = 120;
    swift::Demangle::__runtime::Vector<char>::push_back((unsigned int *)&v54, &v53, this);
    unint64_t v50 = *(void *)(v8 + 8);
    uint64_t v51 = 8LL;
    if (v50 < 8) {
      uint64_t v51 = *(void *)(v8 + 8);
    }
    swift::Demangle::__runtime::CharVector::append(&v54, (const void *)(*(void *)v8 + v51), v50 - v51, this);
    unint64_t Node = swift::Demangle::__runtime::NodeFactory::createNode(this, 20, (uint64_t *)&v54);
    if (!Node) {
      return 0LL;
    }
LABEL_46:
    unint64_t v8 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
    if (!v8 || v8 + 24 > *((void *)this + 2))
    {
      unint64_t v25 = 2LL * *((void *)this + 4);
      if (v25 <= 0x20) {
        unint64_t v25 = 32LL;
      }
      *((void *)this + 4) = v25;
      unint64_t v26 = v25 + 8;
      uint64_t v27 = malloc(v25 + 8);
      unint64_t v28 = (char *)v27 + v26;
      *uint64_t v27 = *((void *)this + 3);
      unint64_t v8 = ((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8LL;
      *((void *)this + 2) = v28;
      *((void *)this + 3) = v27;
    }

    *((void *)this + 1) = v8 + 24;
    *(_WORD *)(v8 + 16) = 232;
    *(_BYTE *)(v8 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild( (unsigned int *)v8,  (swift::Demangle::__runtime::Node *)Node,  this,  a4,  a5);
  }

  return v8;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleAnyGenericType( swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  __int16 v5 = a2;
  int v7 = *((_DWORD *)this + 24);
  if (!v7
    || ((unsigned int v8 = v7 - 1,
         unint64_t v9 = *(unsigned __int16 **)(*((void *)this + 11) + 8LL * v8),
         int v10 = v9[8],
         (v10 - 173) <= 0x3C)
      ? (BOOL v11 = ((1LL << (v10 + 83)) & 0x100000010000010DLL) == 0)
      : (BOOL v11 = 1),
        v11
     && ((v10 - 101) <= 0x24
       ? (BOOL v12 = ((1LL << (v10 - 101)) & 0x1000800001LL) == 0)
       : (BOOL v12 = 1),
         v12 && v10 != 347)))
  {
    unint64_t v9 = 0LL;
  }

  else
  {
    *((_DWORD *)this + 24) = v8;
  }

  unsigned int v13 = swift::Demangle::__runtime::Demangler::popContext(this, a2, a3, a4, a5);
  if (!v9) {
    return 0LL;
  }
  int v16 = v13;
  if (!v13) {
    return 0LL;
  }
  unint64_t v17 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
  if (!v17 || v17 + 24 > *((void *)this + 2))
  {
    unint64_t v18 = 2LL * *((void *)this + 4);
    if (v18 <= 0x20) {
      unint64_t v18 = 32LL;
    }
    *((void *)this + 4) = v18;
    unint64_t v19 = v18 + 8;
    int v20 = malloc(v18 + 8);
    int v21 = (char *)v20 + v19;
    *int v20 = *((void *)this + 3);
    unint64_t v17 = ((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    *((void *)this + 2) = v21;
    *((void *)this + 3) = v20;
  }

  *((void *)this + 1) = v17 + 24;
  *(_WORD *)(v17 + 16) = v5;
  *(_BYTE *)(v17 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((unsigned int *)v17, v16, this, v14, v15);
  swift::Demangle::__runtime::Node::addChild( (unsigned int *)v17,  (swift::Demangle::__runtime::Node *)v9,  this,  v22,  v23);
  unint64_t v26 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
  if (!v26 || v26 + 24 > *((void *)this + 2))
  {
    unint64_t v27 = 2LL * *((void *)this + 4);
    if (v27 <= 0x20) {
      unint64_t v27 = 32LL;
    }
    *((void *)this + 4) = v27;
    unint64_t v28 = v27 + 8;
    signed int v29 = malloc(v27 + 8);
    int v30 = (char *)v29 + v28;
    *signed int v29 = *((void *)this + 3);
    unint64_t v26 = ((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    *((void *)this + 2) = v30;
    *((void *)this + 3) = v29;
  }

  *((void *)this + 1) = v26 + 24;
  *(_WORD *)(v26 + 16) = 232;
  *(_BYTE *)(v26 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild( (unsigned int *)v26,  (swift::Demangle::__runtime::Node *)v17,  this,  v24,  v25);
  unint64_t v32 = v26;
  swift::Demangle::__runtime::Vector<swift::Demangle::__runtime::Node *>::push_back( (const void **)this + 13,  (uint64_t *)&v32,  this);
  return v26;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleExtensionContext( swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v6 = *((_DWORD *)this + 24);
  if (!v6)
  {
    unint64_t v9 = 0LL;
LABEL_10:
    unint64_t v11 = 0LL;
    goto LABEL_12;
  }

  int v7 = v6 - 1;
  uint64_t v8 = *((void *)this + 11);
  unint64_t v9 = *(swift::Demangle::__runtime::Node **)(v8 + 8LL * (v6 - 1));
  if (*((_WORD *)v9 + 8) == 43)
  {
    *((_DWORD *)this + 24) = v7;
    if (v6 == 1) {
      goto LABEL_10;
    }
  }

  else
  {
    unint64_t v9 = 0LL;
    int v7 = *((_DWORD *)this + 24);
  }

  unsigned int v10 = v7 - 1;
  unint64_t v11 = *(void *)(v8 + 8LL * v10);
  int v12 = *(unsigned __int16 *)(v11 + 16);
  if (v12 == 153)
  {
    *((_DWORD *)this + 24) = v10;
    goto LABEL_12;
  }

  if (v12 != 101) {
    goto LABEL_10;
  }
  *((_DWORD *)this + 24) = v10;
  unint64_t v11 = swift::Demangle::__runtime::Demangler::changeKind(this, (swift::Demangle::__runtime::Node **)v11, 153, a4, a5);
LABEL_12:
  AnyGeneric = swift::Demangle::__runtime::Demangler::popTypeAndGetAnyGeneric(this);
  unint64_t v16 = 0LL;
  if (v11)
  {
    unint64_t v17 = (swift::Demangle::__runtime::Node *)AnyGeneric;
    if (AnyGeneric)
    {
      unint64_t v16 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
      if (!v16 || v16 + 24 > *((void *)this + 2))
      {
        unint64_t v18 = 2LL * *((void *)this + 4);
        if (v18 <= 0x20) {
          unint64_t v18 = 32LL;
        }
        *((void *)this + 4) = v18;
        unint64_t v19 = v18 + 8;
        int v20 = malloc(v18 + 8);
        int v21 = (char *)v20 + v19;
        *int v20 = *((void *)this + 3);
        unint64_t v16 = ((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8LL;
        *((void *)this + 2) = v21;
        *((void *)this + 3) = v20;
      }

      *((void *)this + 1) = v16 + 24;
      *(_WORD *)(v16 + 16) = 71;
      *(_BYTE *)(v16 + 18) = 0;
      swift::Demangle::__runtime::Node::addChild( (unsigned int *)v16,  (swift::Demangle::__runtime::Node *)v11,  this,  v14,  v15);
      swift::Demangle::__runtime::Node::addChild((unsigned int *)v16, v17, this, v22, v23);
      if (v9) {
        swift::Demangle::__runtime::Node::addChild((unsigned int *)v16, v9, this, v24, v25);
      }
    }
  }

  return v16;
}

swift::Demangle::__runtime::Node *swift::Demangle::__runtime::Demangler::demanglePlainFunction( swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v6 = *((_DWORD *)this + 24);
  if (v6
    && (unsigned int v7 = v6 - 1,
        uint64_t v8 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8LL * v7),
        *((_WORD *)v8 + 8) == 43))
  {
    *((_DWORD *)this + 24) = v7;
  }

  else
  {
    uint64_t v8 = 0LL;
  }

  unint64_t v9 = swift::Demangle::__runtime::Demangler::popFunctionType(this, 82, 0LL, a4, a5);
  unint64_t v17 = (char *)swift::Demangle::__runtime::Demangler::popFunctionParamLabels( this,  (swift::Demangle::__runtime::Node *)v9,  v10,  v11,  v12);
  if (v8 && v9)
  {
    unint64_t v18 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
    if (!v18 || v18 + 24 > *((void *)this + 2))
    {
      unint64_t v19 = 2LL * *((void *)this + 4);
      if (v19 <= 0x20) {
        unint64_t v19 = 32LL;
      }
      *((void *)this + 4) = v19;
      unint64_t v20 = v19 + 8;
      int v21 = malloc(v19 + 8);
      uint64_t v22 = (char *)v21 + v20;
      *int v21 = *((void *)this + 3);
      unint64_t v18 = ((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8LL;
      *((void *)this + 2) = v22;
      *((void *)this + 3) = v21;
    }

    *((void *)this + 1) = v18 + 24;
    *(_WORD *)(v18 + 16) = 44;
    *(_BYTE *)(v18 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v18, v8, this, v15, v16);
    swift::Demangle::__runtime::Node::addChild( (unsigned int *)v18,  (swift::Demangle::__runtime::Node *)v9,  this,  v23,  v24);
    unint64_t v9 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
    if (!v9 || v9 + 24 > *((void *)this + 2))
    {
      unint64_t v27 = 2LL * *((void *)this + 4);
      if (v27 <= 0x20) {
        unint64_t v27 = 32LL;
      }
      *((void *)this + 4) = v27;
      unint64_t v28 = v27 + 8;
      signed int v29 = malloc(v27 + 8);
      int v30 = (char *)v29 + v28;
      *signed int v29 = *((void *)this + 3);
      unint64_t v9 = ((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8LL;
      *((void *)this + 2) = v30;
      *((void *)this + 3) = v29;
    }

    *((void *)this + 1) = v9 + 24;
    *(_WORD *)(v9 + 16) = 232;
    *(_BYTE *)(v9 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild( (unsigned int *)v9,  (swift::Demangle::__runtime::Node *)v18,  this,  v25,  v26);
  }

  int v31 = *((_DWORD *)this + 24);
  if (!v31
    || ((unsigned int v32 = v31 - 1,
         unint64_t v33 = *(unsigned __int16 **)(*((void *)this + 11) + 8LL * v32),
         int v34 = v33[8],
         (v34 - 173) <= 0x3C)
      ? (BOOL v35 = ((1LL << (v34 + 83)) & 0x100000010000010DLL) == 0)
      : (BOOL v35 = 1),
        v35
     && ((v34 - 101) <= 0x24
       ? (BOOL v36 = ((1LL << (v34 - 101)) & 0x1000800001LL) == 0)
       : (BOOL v36 = 1),
         v36 && v34 != 347)))
  {
    unint64_t v33 = 0LL;
  }

  else
  {
    *((_DWORD *)this + 24) = v32;
  }

  int v37 = swift::Demangle::__runtime::Demangler::popContext(this, v13, v14, v15, v16);
  if (v17) {
    unint64_t v38 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::createWithChildren( this,  76,  v37,  (swift::Demangle::__runtime::Node *)v33,  v17,  (swift::Demangle::__runtime::Node *)v9);
  }
  else {
    unint64_t v38 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::createWithChildren( this,  76,  v37,  (swift::Demangle::__runtime::Node *)v33,  (char *)v9);
  }
  return setParentForOpaqueReturnTypeNodes(this, v38, (swift::Demangle::__runtime::Node *)v9, v39, v40);
}

unint64_t swift::Demangle::__runtime::Demangler::demangleBoundGenericType( swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v6 = (char *)((*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL);
  if (v6) {
    BOOL v7 = (unint64_t)(v6 + 32) > *((void *)this + 2);
  }
  else {
    BOOL v7 = 1;
  }
  if (v7)
  {
    unint64_t v8 = 2LL * *((void *)this + 4);
    if (v8 <= 0x28) {
      unint64_t v8 = 40LL;
    }
    *((void *)this + 4) = v8;
    unint64_t v9 = v8 + 8;
    uint64_t v10 = malloc(v8 + 8);
    *uint64_t v10 = *((void *)this + 3);
    int v6 = (char *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8LL);
    *((void *)this + 2) = (char *)v10 + v9;
    *((void *)this + 3) = v10;
  }

  *((void *)this + 1) = v6 + 32;
  v23[0] = v6;
  v23[1] = (const void *)0x400000000LL;
  if (!swift::Demangle::__runtime::Demangler::demangleBoundGenerics( (uint64_t)this,  v23,  (int8x16_t **)&v24,  a4,  a5)) {
    return 0LL;
  }
  AnyGeneric = swift::Demangle::__runtime::Demangler::popTypeAndGetAnyGeneric(this);
  if (!AnyGeneric) {
    return 0LL;
  }
  uint64_t v13 = (unsigned int *)swift::Demangle::__runtime::Demangler::demangleBoundGenericArgs( this,  (unint64_t)AnyGeneric,  (uint64_t)v23,  0LL,  v12);
  if (!v13) {
    return 0LL;
  }
  unint64_t v16 = (swift::Demangle::__runtime::Node *)v13;
  if (v24) {
    swift::Demangle::__runtime::Node::addChild(v13, v24, this, v14, v15);
  }
  unint64_t v17 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
  if (!v17 || v17 + 24 > *((void *)this + 2))
  {
    unint64_t v18 = 2LL * *((void *)this + 4);
    if (v18 <= 0x20) {
      unint64_t v18 = 32LL;
    }
    *((void *)this + 4) = v18;
    unint64_t v19 = v18 + 8;
    unint64_t v20 = malloc(v18 + 8);
    int v21 = (char *)v20 + v19;
    *unint64_t v20 = *((void *)this + 3);
    unint64_t v17 = ((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    *((void *)this + 2) = v21;
    *((void *)this + 3) = v20;
  }

  *((void *)this + 1) = v17 + 24;
  *(_WORD *)(v17 + 16) = 232;
  *(_BYTE *)(v17 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((unsigned int *)v17, v16, this, v14, v15);
  unint64_t v25 = v17;
  swift::Demangle::__runtime::Vector<swift::Demangle::__runtime::Node *>::push_back( (const void **)this + 13,  (uint64_t *)&v25,  this);
  return v17;
}

unint64_t swift::Demangle::__runtime::Demangler::popProtocol( swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v6 = *((_DWORD *)this + 24);
  if (!v6) {
    goto LABEL_22;
  }
  unsigned int v7 = v6 - 1;
  unint64_t v8 = *(uint64_t **)(*((void *)this + 11) + 8LL * v7);
  int v9 = *((unsigned __int16 *)v8 + 8);
  uint64_t v10 = (v9 - 173);
  if (v10 > 0x3C)
  {
LABEL_14:
    if (v9 == 347)
    {
LABEL_20:
      *((_DWORD *)this + 24) = v7;
      return (unint64_t)v8;
    }

unsigned int *swift::Demangle::__runtime::Demangler::popProtocolConformance( swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v6 = *((_DWORD *)this + 24);
  if (!v6)
  {
    int v9 = 0LL;
LABEL_10:
    unint64_t v11 = 0LL;
    goto LABEL_12;
  }

  int v7 = v6 - 1;
  uint64_t v8 = *((void *)this + 11);
  int v9 = *(swift::Demangle::__runtime::Node **)(v8 + 8LL * (v6 - 1));
  if (*((_WORD *)v9 + 8) == 43)
  {
    *((_DWORD *)this + 24) = v7;
    if (v6 == 1) {
      goto LABEL_10;
    }
  }

  else
  {
    int v9 = 0LL;
    int v7 = *((_DWORD *)this + 24);
  }

  unsigned int v10 = v7 - 1;
  unint64_t v11 = *(void *)(v8 + 8LL * v10);
  int v12 = *(unsigned __int16 *)(v11 + 16);
  if (v12 != 153)
  {
    if (v12 == 101)
    {
      *((_DWORD *)this + 24) = v10;
      unint64_t v11 = swift::Demangle::__runtime::Demangler::changeKind( this,  (swift::Demangle::__runtime::Node **)v11,  153,  a4,  a5);
      goto LABEL_12;
    }

    goto LABEL_10;
  }

  *((_DWORD *)this + 24) = v10;
LABEL_12:
  unint64_t v15 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::popProtocol(this, a2, a3, a4, a5);
  int v16 = *((_DWORD *)this + 24);
  if (v16)
  {
    uint64_t v17 = 0LL;
    int v18 = v16 - 1;
    uint64_t v19 = *((void *)this + 11);
    unint64_t v20 = *(unsigned __int16 **)(v19 + 8LL * (v16 - 1));
    int v21 = v20[8];
    if (v21 == 232) {
      goto LABEL_18;
    }
    if (v21 == 101)
    {
      *((_DWORD *)this + 24) = v18;
      if (v16 == 1)
      {
        unint64_t v22 = 0LL;
        if (!v9) {
          goto LABEL_37;
        }
        goto LABEL_25;
      }

      uint64_t v17 = v20;
      --v16;
    }

    int v18 = v16 - 1;
    unint64_t v20 = *(unsigned __int16 **)(v19 + 8LL * (v16 - 1));
    if (v20[8] == 232)
    {
LABEL_18:
      unint64_t v22 = (unint64_t)v20;
      *((_DWORD *)this + 24) = v18;
      unint64_t v20 = v17;
      if (!v9) {
        goto LABEL_37;
      }
    }

    else
    {
      unint64_t v22 = 0LL;
      unint64_t v20 = v17;
      if (!v9) {
        goto LABEL_37;
      }
    }
  }

  else
  {
    unint64_t v20 = 0LL;
    unint64_t v22 = 0LL;
    if (!v9) {
      goto LABEL_37;
    }
  }

unint64_t swift::Demangle::__runtime::Demangler::demangleIdentifier( swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v1 = *((void *)this + 8);
  unint64_t v2 = *((void *)this + 9);
  if (v2 >= v1) {
    return 0LL;
  }
  uint64_t v4 = *((void *)this + 7);
  int v5 = *(unsigned __int8 *)(v4 + v2);
  if (v5 == 48)
  {
    *((void *)this + 9) = v2 + 1;
    if (v2 + 1 < v1 && *(_BYTE *)(v4 + v2 + 1) == 48)
    {
      char v6 = 0;
      v2 += 2LL;
      *((void *)this + 9) = v2;
      int v81 = 1;
    }

    else
    {
      int v81 = 0;
      char v6 = 1;
      ++v2;
    }
  }

  else
  {
    int v81 = 0;
    char v6 = 0;
  }

  unsigned int v7 = 0;
  unsigned int v8 = 0;
  int v9 = 0LL;
  do
  {
    if ((v6 & 1) == 0)
    {
      char v10 = 0;
      goto LABEL_41;
    }

    do
    {
      unint64_t v2 = *((void *)this + 9);
      if (v2 >= *((void *)this + 8) || (uint64_t v12 = *((void *)this + 7), (*(_BYTE *)(v12 + v2) & 0xDFu) - 65 > 0x19))
      {
        char v10 = 1;
        goto LABEL_41;
      }

      *((void *)this + 9) = v2 + 1;
      int v13 = *(char *)(v12 + v2);
      unsigned __int8 v14 = v13 - 97;
      else {
        int v15 = -97;
      }
      int v16 = v15 + v13;
      if (v16 >= *((_DWORD *)this + 134)) {
        return 0LL;
      }
      uint64_t v17 = (char *)this + 16 * v16;
      uint64_t v19 = (const void *)*((void *)v17 + 15);
      size_t v18 = *((void *)v17 + 16);
      uint64_t v20 = v8;
      size_t v21 = v7;
      if (v18 + v8 > v7)
      {
        unsigned int v85 = v8;
        unsigned int v22 = v7;
        unint64_t v23 = (char *)*((void *)this + 1);
        if (&v9[v21] == v23)
        {
          unint64_t v25 = &v9[v21 + v18];
          unint64_t v24 = *((void *)this + 2);
          if ((unint64_t)v25 <= v24)
          {
            *((void *)this + 1) = v25;
            LODWORD(v27) = v18;
            goto LABEL_38;
          }
        }

        else
        {
          unint64_t v24 = *((void *)this + 2);
        }

        __int128 __src = v9;
        unint64_t v26 = 2 * v22;
        if (v18 > v26) {
          unint64_t v26 = v18;
        }
        if (v26 <= 4) {
          uint64_t v27 = 4LL;
        }
        else {
          uint64_t v27 = v26;
        }
        size_t v28 = v27 + v21;
        if (!v23 || (unint64_t)&v23[v28] > v24)
        {
          unint64_t v29 = 2LL * *((void *)this + 4);
          if (v29 <= v28 + 1) {
            unint64_t v29 = v28 + 1;
          }
          *((void *)this + 4) = v29;
          unint64_t v30 = v29 + 8;
          int v31 = malloc(v29 + 8);
          unint64_t v32 = (char *)v31 + v30;
          *int v31 = *((void *)this + 3);
          unint64_t v23 = (char *)(v31 + 1);
          *((void *)this + 2) = v32;
          *((void *)this + 3) = v31;
        }

        *((void *)this + 1) = &v23[v28];
        if (!v22)
        {
          int v9 = v23;
          unsigned int v11 = 0;
LABEL_13:
          unsigned int v8 = v85;
          unsigned int v7 = v11 + v27;
          goto LABEL_14;
        }

        memcpy(v23, __src, v21);
        int v9 = v23;
LABEL_38:
        unsigned int v11 = v22;
        goto LABEL_13;
      }

unint64_t swift::Demangle::__runtime::Demangler::demangleImplFunctionType( swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v6 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
  if (!v6 || v6 + 24 > *((void *)this + 2))
  {
    unint64_t v7 = 2LL * *((void *)this + 4);
    if (v7 <= 0x20) {
      unint64_t v7 = 32LL;
    }
    *((void *)this + 4) = v7;
    unint64_t v8 = v7 + 8;
    int v9 = malloc(v7 + 8);
    char v10 = (char *)v9 + v8;
    *int v9 = *((void *)this + 3);
    unint64_t v6 = ((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    *((void *)this + 2) = v10;
    *((void *)this + 3) = v9;
  }

  *((void *)this + 1) = v6 + 24;
  *(_WORD *)(v6 + 16) = 115;
  *(_BYTE *)(v6 + 18) = 0;
  unint64_t v12 = *((void *)this + 8);
  unint64_t v11 = *((void *)this + 9);
  if (v11 < v12 && *(_BYTE *)(*((void *)this + 7) + v11) == 115)
  {
    *((void *)this + 9) = v11 + 1;
    uint64_t v173 = 0LL;
    uint64_t v174 = 0LL;
    if (!swift::Demangle::__runtime::Demangler::demangleBoundGenerics( (uint64_t)this,  (const void **)&v173,  (int8x16_t **)&v172,  a4,  a5)) {
      return 0LL;
    }
    int v15 = *((_DWORD *)this + 24);
    if (!v15) {
      return 0LL;
    }
    unsigned int v16 = v15 - 1;
    uint64_t v17 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8LL * v16);
    if (*((_WORD *)v17 + 8) != 43) {
      return 0LL;
    }
    *((_DWORD *)this + 24) = v16;
    unint64_t v18 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
    if (!v18 || v18 + 24 > *((void *)this + 2))
    {
      unint64_t v19 = 2LL * *((void *)this + 4);
      if (v19 <= 0x20) {
        unint64_t v19 = 32LL;
      }
      *((void *)this + 4) = v19;
      unint64_t v20 = v19 + 8;
      size_t v21 = malloc(v19 + 8);
      unsigned int v22 = (char *)v21 + v20;
      *size_t v21 = *((void *)this + 3);
      unint64_t v18 = ((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8LL;
      *((void *)this + 2) = v22;
      *((void *)this + 3) = v21;
    }

    *((void *)this + 1) = v18 + 24;
    *(_WORD *)(v18 + 16) = 119;
    *(_BYTE *)(v18 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v18, v17, this, v13, v14);
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v18, *v173, this, v23, v24);
    if (v172) {
      swift::Demangle::__runtime::Node::addChild((unsigned int *)v18, v172, this, v25, v26);
    }
    swift::Demangle::__runtime::Node::addChild( (unsigned int *)v6,  (swift::Demangle::__runtime::Node *)v18,  this,  v25,  v26);
    unint64_t v12 = *((void *)this + 8);
    unint64_t v11 = *((void *)this + 9);
  }

  if (v11 < v12 && *(_BYTE *)(*((void *)this + 7) + v11) == 73)
  {
    *((void *)this + 9) = v11 + 1;
    uint64_t v173 = 0LL;
    uint64_t v174 = 0LL;
    if (!swift::Demangle::__runtime::Demangler::demangleBoundGenerics( (uint64_t)this,  (const void **)&v173,  (int8x16_t **)&v172,  a4,  a5)) {
      return 0LL;
    }
    unint64_t v29 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
    if (!v29 || v29 + 24 > *((void *)this + 2))
    {
      unint64_t v30 = 2LL * *((void *)this + 4);
      if (v30 <= 0x20) {
        unint64_t v30 = 32LL;
      }
      *((void *)this + 4) = v30;
      unint64_t v31 = v30 + 8;
      unint64_t v32 = malloc(v30 + 8);
      unint64_t v33 = (char *)v32 + v31;
      *unint64_t v32 = *((void *)this + 3);
      unint64_t v29 = ((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8LL;
      *((void *)this + 2) = v33;
      *((void *)this + 3) = v32;
    }

    *((void *)this + 1) = v29 + 24;
    *(_WORD *)(v29 + 16) = 116;
    *(_BYTE *)(v29 + 18) = 0;
    if ((_DWORD)v174 != 1) {
      return 0LL;
    }
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v29, *v173, this, v27, v28);
    if (v172) {
      swift::Demangle::__runtime::Node::addChild((unsigned int *)v29, v172, this, v34, v35);
    }
    swift::Demangle::__runtime::Node::addChild( (unsigned int *)v6,  (swift::Demangle::__runtime::Node *)v29,  this,  v34,  v35);
  }

  int v36 = *((_DWORD *)this + 24);
  if (v36 && (unsigned int v37 = v36 - 1, v38 = *(void *)(*((void *)this + 11) + 8LL * v37), *(_WORD *)(v38 + 16) == 43))
  {
    *((_DWORD *)this + 24) = v37;
    unint64_t v39 = *((void *)this + 9);
    if (v39 < *((void *)this + 8) && *(_BYTE *)(*((void *)this + 7) + v39) == 80)
    {
      *((void *)this + 9) = v39 + 1;
      unint64_t v38 = swift::Demangle::__runtime::Demangler::changeKind( this,  (swift::Demangle::__runtime::Node **)v38,  46,  a4,  a5);
    }
  }

  else
  {
    unint64_t v38 = 0LL;
  }

  unint64_t v41 = *((void *)this + 8);
  unint64_t v40 = *((void *)this + 9);
  if (v40 < v41 && *(_BYTE *)(*((void *)this + 7) + v40) == 101)
  {
    *((void *)this + 9) = v40 + 1;
    unint64_t v42 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
    if (!v42 || v42 + 24 > *((void *)this + 2))
    {
      unint64_t v43 = 2LL * *((void *)this + 4);
      if (v43 <= 0x20) {
        unint64_t v43 = 32LL;
      }
      *((void *)this + 4) = v43;
      unint64_t v44 = v43 + 8;
      unint64_t v45 = malloc(v43 + 8);
      *unint64_t v45 = *((void *)this + 3);
      unint64_t v42 = ((unint64_t)v45 + 15) & 0xFFFFFFFFFFFFFFF8LL;
      *((void *)this + 2) = (char *)v45 + v44;
      *((void *)this + 3) = v45;
    }

    *((void *)this + 1) = v42 + 24;
    *(_WORD *)(v42 + 16) = 105;
    *(_BYTE *)(v42 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild( (unsigned int *)v6,  (swift::Demangle::__runtime::Node *)v42,  this,  a4,  a5);
    unint64_t v41 = *((void *)this + 8);
    unint64_t v40 = *((void *)this + 9);
  }

  if (v40 < v41 && *(_BYTE *)(*((void *)this + 7) + v40) == 65)
  {
    *((void *)this + 9) = v40 + 1;
    unint64_t v46 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
    if (!v46 || v46 + 24 > *((void *)this + 2))
    {
      unint64_t v47 = 2LL * *((void *)this + 4);
      if (v47 <= 0x20) {
        unint64_t v47 = 32LL;
      }
      *((void *)this + 4) = v47;
      unint64_t v48 = v47 + 8;
      size_t v49 = malloc(v47 + 8);
      *size_t v49 = *((void *)this + 3);
      unint64_t v46 = ((unint64_t)v49 + 15) & 0xFFFFFFFFFFFFFFF8LL;
      *((void *)this + 2) = (char *)v49 + v48;
      *((void *)this + 3) = v49;
    }

    *((void *)this + 1) = v46 + 24;
    *(_WORD *)(v46 + 16) = 108;
    *(_BYTE *)(v46 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild( (unsigned int *)v6,  (swift::Demangle::__runtime::Node *)v46,  this,  a4,  a5);
    unint64_t v41 = *((void *)this + 8);
    unint64_t v40 = *((void *)this + 9);
  }

  if (v40 >= v41) {
    int v50 = 0;
  }
  else {
    int v50 = *(unsigned __int8 *)(*((void *)this + 7) + v40);
  }
  HIDWORD(v51) = v50;
  LODWORD(v51) = (v50 << 24) - 1677721600;
  unsigned int v52 = (v51 >> 25);
  if (v52 <= 7 && ((1 << v52) & 0x93) != 0)
  {
    if (v40 >= v41)
    {
      char v53 = 0;
    }

    else
    {
      *((void *)this + 9) = v40 + 1;
      char v53 = *(_BYTE *)(*((void *)this + 7) + v40);
    }

    uint64_t v54 = v53;
    unint64_t v55 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
    if (!v55 || v55 + 24 > *((void *)this + 2))
    {
      unint64_t v56 = 2LL * *((void *)this + 4);
      if (v56 <= 0x20) {
        unint64_t v56 = 32LL;
      }
      *((void *)this + 4) = v56;
      unint64_t v57 = v56 + 8;
      uint64_t v58 = malloc(v56 + 8);
      *uint64_t v58 = *((void *)this + 3);
      unint64_t v55 = ((unint64_t)v58 + 15) & 0xFFFFFFFFFFFFFFF8LL;
      *((void *)this + 2) = (char *)v58 + v57;
      *((void *)this + 3) = v58;
    }

    *((void *)this + 1) = v55 + 24;
    *(_WORD *)(v55 + 16) = 107;
    *(_BYTE *)(v55 + 18) = 4;
    *(void *)unint64_t v55 = v54;
    swift::Demangle::__runtime::Node::addChild( (unsigned int *)v6,  (swift::Demangle::__runtime::Node *)v55,  this,  a4,  a5);
    unint64_t v41 = *((void *)this + 8);
    unint64_t v40 = *((void *)this + 9);
  }

  if (v40 >= v41) {
    return 0LL;
  }
  unint64_t v59 = 0LL;
  *((void *)this + 9) = v40 + 1;
  unint64_t v60 = "@callee_unowned";
  switch(*(_BYTE *)(*((void *)this + 7) + v40))
  {
    case 'g':
      unint64_t v60 = "@callee_guaranteed";
      goto LABEL_72;
    case 't':
      unint64_t v60 = "@convention(thin)";
      goto LABEL_72;
    case 'x':
      unint64_t v60 = "@callee_owned";
      goto LABEL_72;
    case 'y':
LABEL_72:
      unint64_t v61 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
      if (!v61 || v61 + 24 > *((void *)this + 2))
      {
        unint64_t v62 = 2LL * *((void *)this + 4);
        if (v62 <= 0x20) {
          unint64_t v62 = 32LL;
        }
        *((void *)this + 4) = v62;
        unint64_t v63 = v62 + 8;
        int v64 = malloc(v62 + 8);
        uint64_t v65 = (char *)v64 + v63;
        void *v64 = *((void *)this + 3);
        unint64_t v61 = ((unint64_t)v64 + 15) & 0xFFFFFFFFFFFFFFF8LL;
        *((void *)this + 2) = v65;
        *((void *)this + 3) = v64;
      }

      *((void *)this + 1) = v61 + 24;
      size_t v66 = strlen(v60);
      *(_WORD *)(v61 + 16) = 106;
      *(_BYTE *)(v61 + 18) = 3;
      *(void *)unint64_t v61 = v60;
      *(void *)(v61 + 8) = v66;
      swift::Demangle::__runtime::Node::addChild( (unsigned int *)v6,  (swift::Demangle::__runtime::Node *)v61,  this,  v67,  v68);
      unint64_t v71 = *((void *)this + 8);
      unint64_t v72 = *((void *)this + 9);
      if (v72 < v71)
      {
        unint64_t v73 = v72 + 1;
        *((void *)this + 9) = v72 + 1;
        uint64_t v74 = *((void *)this + 7);
        int v75 = 0;
        unint64_t v76 = "block";
        switch(*(_BYTE *)(v74 + v72))
        {
          case 'B':
            goto LABEL_88;
          case 'C':
            int v75 = 0;
            unint64_t v76 = "c";
            goto LABEL_88;
          case 'K':
            int v75 = 0;
            unint64_t v76 = "closure";
            goto LABEL_88;
          case 'M':
            int v75 = 0;
            unint64_t v76 = "method";
            goto LABEL_88;
          case 'O':
            int v75 = 0;
            unint64_t v76 = "objc_method";
            goto LABEL_88;
          case 'W':
            int v75 = 0;
            unint64_t v76 = "witness_method";
            goto LABEL_88;
          case 'z':
            if (v73 >= v71) {
              goto LABEL_219;
            }
            unint64_t v170 = v72 + 2;
            *((void *)this + 9) = v170;
            int v171 = *(char *)(v74 + v73);
            if (v171 == 66)
            {
              int v75 = 1;
            }

            else
            {
              unint64_t v73 = v170;
              if (v171 != 67)
              {
LABEL_219:
                unint64_t v77 = v73 - 2;
                goto LABEL_82;
              }

              unint64_t v76 = "c";
              int v75 = 1;
            }

unint64_t swift::Demangle::__runtime::Demangler::demangleLocalIdentifier( swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v6 = *((void *)this + 9);
  if (v6 >= *((void *)this + 8)) {
    goto LABEL_18;
  }
  uint64_t v7 = *((void *)this + 7);
  unsigned int v8 = *(unsigned __int8 *)(v7 + v6);
  if (v8 == 108)
  {
    *((void *)this + 9) = v6 + 1;
    int v13 = *((_DWORD *)this + 24);
    if (!v13) {
      return 0LL;
    }
    unsigned int v14 = v13 - 1;
    int v15 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8LL * v14);
    if (*((_WORD *)v15 + 8) != 101) {
      return 0LL;
    }
    *((_DWORD *)this + 24) = v14;
    unint64_t v16 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
    if (!v16 || v16 + 24 > *((void *)this + 2))
    {
      unint64_t v17 = 2LL * *((void *)this + 4);
      if (v17 <= 0x20) {
        unint64_t v17 = 32LL;
      }
      *((void *)this + 4) = v17;
      unint64_t v18 = v17 + 8;
      unint64_t v19 = malloc(v17 + 8);
      unint64_t v20 = (char *)v19 + v18;
      void *v19 = *((void *)this + 3);
      unint64_t v16 = ((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8LL;
      *((void *)this + 2) = v20;
      *((void *)this + 3) = v19;
    }

    *((void *)this + 1) = v16 + 24;
    *(_WORD *)(v16 + 16) = 176;
    *(_BYTE *)(v16 + 18) = 0;
    size_t v21 = (unsigned int *)v16;
    unsigned int v22 = v15;
    goto LABEL_38;
  }

  if (v8 == 76)
  {
    *((void *)this + 9) = v6 + 1;
    int v9 = *((_DWORD *)this + 24);
    if (!v9) {
      return 0LL;
    }
    int v10 = v9 - 1;
    uint64_t v11 = *((void *)this + 11);
    unint64_t v12 = *(swift::Demangle::__runtime::Node **)(v11 + 8LL * (v9 - 1));
    if (*((_WORD *)v12 + 8) == 101)
    {
      *((_DWORD *)this + 24) = v10;
      if (v9 == 1) {
        return 0LL;
      }
    }

    else
    {
      unint64_t v12 = 0LL;
      int v10 = *((_DWORD *)this + 24);
    }

    unsigned int v41 = v10 - 1;
    unint64_t v26 = *(unsigned __int16 **)(v11 + 8LL * v41);
    int v42 = v26[8];
    if ((v42 - 173) > 0x3C || ((1LL << (v42 + 83)) & 0x100000010000010DLL) == 0)
    {
      BOOL v44 = (v42 - 101) > 0x24 || ((1LL << (v42 - 101)) & 0x1000800001LL) == 0;
      if (v44 && v42 != 347) {
        return 0LL;
      }
    }

    *((_DWORD *)this + 24) = v41;
    if (!v12) {
      return 0LL;
    }
    unint64_t v16 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
    if (!v16 || v16 + 24 > *((void *)this + 2))
    {
      unint64_t v45 = 2LL * *((void *)this + 4);
      if (v45 <= 0x20) {
        unint64_t v45 = 32LL;
      }
      *((void *)this + 4) = v45;
      unint64_t v46 = v45 + 8;
      unint64_t v47 = malloc(v45 + 8);
      unint64_t v48 = (char *)v47 + v46;
      void *v47 = *((void *)this + 3);
      unint64_t v16 = ((unint64_t)v47 + 15) & 0xFFFFFFFFFFFFFFF8LL;
      *((void *)this + 2) = v48;
      *((void *)this + 3) = v47;
    }

    *((void *)this + 1) = v16 + 24;
    __int16 v34 = 176;
    goto LABEL_37;
  }

  if ((char)v8 < 97)
  {
    if (v8 - 65 > 9) {
      goto LABEL_18;
    }
  }

  else if (v8 >= 0x6B)
  {
LABEL_18:
    unint64_t v23 = swift::Demangle::__runtime::Demangler::demangleIndexAsNode(this);
    int v24 = *((_DWORD *)this + 24);
    if (!v24) {
      return 0LL;
    }
    unint64_t v12 = (swift::Demangle::__runtime::Node *)v23;
    unsigned int v25 = v24 - 1;
    unint64_t v26 = *(unsigned __int16 **)(*((void *)this + 11) + 8LL * v25);
    int v27 = v26[8];
    if ((v27 - 173) > 0x3C || ((1LL << (v27 + 83)) & 0x100000010000010DLL) == 0)
    {
      BOOL v29 = (v27 - 101) > 0x24 || ((1LL << (v27 - 101)) & 0x1000800001LL) == 0;
      if (v29 && v27 != 347) {
        return 0LL;
      }
    }

    *((_DWORD *)this + 24) = v25;
    if (!v23) {
      return 0LL;
    }
    unint64_t v16 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
    if (!v16 || v16 + 24 > *((void *)this + 2))
    {
      unint64_t v30 = 2LL * *((void *)this + 4);
      if (v30 <= 0x20) {
        unint64_t v30 = 32LL;
      }
      *((void *)this + 4) = v30;
      unint64_t v31 = v30 + 8;
      unint64_t v32 = malloc(v30 + 8);
      unint64_t v33 = (char *)v32 + v31;
      *unint64_t v32 = *((void *)this + 3);
      unint64_t v16 = ((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8LL;
      *((void *)this + 2) = v33;
      *((void *)this + 3) = v32;
    }

    *((void *)this + 1) = v16 + 24;
    __int16 v34 = 137;
LABEL_37:
    *(_WORD *)(v16 + 16) = v34;
    *(_BYTE *)(v16 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v16, v12, this, a4, a5);
    size_t v21 = (unsigned int *)v16;
    unsigned int v22 = (swift::Demangle::__runtime::Node *)v26;
LABEL_38:
    swift::Demangle::__runtime::Node::addChild(v21, v22, this, a4, a5);
    return v16;
  }

  *((void *)this + 9) = v6 + 1;
  char __src = *(_BYTE *)(v7 + v6);
  unsigned int v37 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(this, 101, &__src, 1uLL);
  int v38 = *((_DWORD *)this + 24);
  if (v38)
  {
    unsigned int v39 = v38 - 1;
    unint64_t v40 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8LL * v39);
    *((_DWORD *)this + 24) = v39;
  }

  else
  {
    unint64_t v40 = 0LL;
  }

  unint64_t v50 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
  if (!v50 || v50 + 24 > *((void *)this + 2))
  {
    unint64_t v51 = 2LL * *((void *)this + 4);
    if (v51 <= 0x20) {
      unint64_t v51 = 32LL;
    }
    *((void *)this + 4) = v51;
    unint64_t v52 = v51 + 8;
    char v53 = malloc(v51 + 8);
    uint64_t v54 = (char *)v53 + v52;
    *char v53 = *((void *)this + 3);
    unint64_t v50 = ((unint64_t)v53 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    *((void *)this + 2) = v54;
    *((void *)this + 3) = v53;
  }

  *((void *)this + 1) = v50 + 24;
  *(_WORD *)(v50 + 16) = 205;
  *(_BYTE *)(v50 + 18) = 0;
  if (v37 && v50) {
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v50, v37, this, v35, v36);
  }
  unint64_t v16 = 0LL;
  if (v40 && v50)
  {
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v50, v40, this, v35, v36);
    return v50;
  }

  return v16;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleMetatype( swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v5 = *((void *)this + 9);
  if (v5 < *((void *)this + 8))
  {
    unint64_t v7 = 0LL;
    *((void *)this + 9) = v5 + 1;
    switch(*(_BYTE *)(*((void *)this + 7) + v5))
    {
      case 'A':
        unsigned int v8 = swift::Demangle::__runtime::Demangler::popProtocolConformance(this, a2, a3, a4, a5);
        if (!v8) {
          return 0LL;
        }
        int v9 = (swift::Demangle::__runtime::Node *)v8;
        unint64_t v7 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
        if (!v7 || v7 + 24 > *((void *)this + 2))
        {
          unint64_t v10 = 2LL * *((void *)this + 4);
          if (v10 <= 0x20) {
            unint64_t v10 = 32LL;
          }
          *((void *)this + 4) = v10;
          unint64_t v11 = v10 + 8;
          unint64_t v12 = malloc(v10 + 8);
          int v13 = (char *)v12 + v11;
          *unint64_t v12 = *((void *)this + 3);
          unint64_t v7 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8LL;
          *((void *)this + 2) = v13;
          *((void *)this + 3) = v12;
        }

        *((void *)this + 1) = v7 + 24;
        __int16 v14 = 260;
        goto LABEL_291;
      case 'B':
        int v15 = *((_DWORD *)this + 24);
        if (!v15) {
          return 0LL;
        }
        unsigned int v16 = v15 - 1;
        int v9 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8LL * v16);
        if (*((_WORD *)v9 + 8) != 232) {
          return 0LL;
        }
        *((_DWORD *)this + 24) = v16;
        unint64_t v7 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
        if (!v7 || v7 + 24 > *((void *)this + 2))
        {
          unint64_t v17 = 2LL * *((void *)this + 4);
          if (v17 <= 0x20) {
            unint64_t v17 = 32LL;
          }
          *((void *)this + 4) = v17;
          unint64_t v18 = v17 + 8;
          unint64_t v19 = malloc(v17 + 8);
          unint64_t v20 = (char *)v19 + v18;
          void *v19 = *((void *)this + 3);
          unint64_t v7 = ((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8LL;
          *((void *)this + 2) = v20;
          *((void *)this + 3) = v19;
        }

        *((void *)this + 1) = v7 + 24;
        __int16 v14 = 258;
        goto LABEL_291;
      case 'C':
        int v21 = *((_DWORD *)this + 24);
        if (!v21) {
          return 0LL;
        }
        unsigned int v22 = v21 - 1;
        unint64_t v23 = *(uint64_t **)(*((void *)this + 11) + 8LL * v22);
        if (*((_WORD *)v23 + 8) != 232) {
          return 0LL;
        }
        *((_DWORD *)this + 24) = v22;
        int v24 = *((unsigned __int8 *)v23 + 18);
        unsigned int v25 = (swift::Demangle::__runtime::Node *)v23;
        if (v24 == 5 && *((_DWORD *)v23 + 2))
        {
          unint64_t v23 = (uint64_t *)*v23;
LABEL_27:
          size_t v28 = (swift::Demangle::__runtime::Node *)*v23;
        }

        else
        {
          size_t v28 = 0LL;
        }

        return swift::Demangle::__runtime::Demangler::createWithChild(this, 261, v28, v26, v27);
      case 'D':
        int v29 = *((_DWORD *)this + 24);
        if (!v29) {
          return 0LL;
        }
        unsigned int v30 = v29 - 1;
        int v9 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8LL * v30);
        if (*((_WORD *)v9 + 8) != 232) {
          return 0LL;
        }
        *((_DWORD *)this + 24) = v30;
        unint64_t v7 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
        if (!v7 || v7 + 24 > *((void *)this + 2))
        {
          unint64_t v31 = 2LL * *((void *)this + 4);
          if (v31 <= 0x20) {
            unint64_t v31 = 32LL;
          }
          *((void *)this + 4) = v31;
          unint64_t v32 = v31 + 8;
          unint64_t v33 = malloc(v31 + 8);
          __int16 v34 = (char *)v33 + v32;
          *unint64_t v33 = *((void *)this + 3);
          unint64_t v7 = ((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8LL;
          *((void *)this + 2) = v34;
          *((void *)this + 3) = v33;
        }

        *((void *)this + 1) = v7 + 24;
        __int16 v14 = 243;
        goto LABEL_291;
      case 'F':
        int v35 = *((_DWORD *)this + 24);
        if (!v35) {
          return 0LL;
        }
        unsigned int v36 = v35 - 1;
        int v9 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8LL * v36);
        if (*((_WORD *)v9 + 8) != 232) {
          return 0LL;
        }
        *((_DWORD *)this + 24) = v36;
        unint64_t v7 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
        if (!v7 || v7 + 24 > *((void *)this + 2))
        {
          unint64_t v37 = 2LL * *((void *)this + 4);
          if (v37 <= 0x20) {
            unint64_t v37 = 32LL;
          }
          *((void *)this + 4) = v37;
          unint64_t v38 = v37 + 8;
          unsigned int v39 = malloc(v37 + 8);
          unint64_t v40 = (char *)v39 + v38;
          void *v39 = *((void *)this + 3);
          unint64_t v7 = ((unint64_t)v39 + 15) & 0xFFFFFFFFFFFFFFF8LL;
          *((void *)this + 2) = v40;
          *((void *)this + 3) = v39;
        }

        *((void *)this + 1) = v7 + 24;
        __int16 v14 = 259;
        goto LABEL_291;
      case 'I':
        int v41 = *((_DWORD *)this + 24);
        if (!v41) {
          return 0LL;
        }
        unsigned int v42 = v41 - 1;
        int v9 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8LL * v42);
        if (*((_WORD *)v9 + 8) != 232) {
          return 0LL;
        }
        *((_DWORD *)this + 24) = v42;
        unint64_t v7 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
        if (!v7 || v7 + 24 > *((void *)this + 2))
        {
          unint64_t v43 = 2LL * *((void *)this + 4);
          if (v43 <= 0x20) {
            unint64_t v43 = 32LL;
          }
          *((void *)this + 4) = v43;
          unint64_t v44 = v43 + 8;
          unint64_t v45 = malloc(v43 + 8);
          unint64_t v46 = (char *)v45 + v44;
          *unint64_t v45 = *((void *)this + 3);
          unint64_t v7 = ((unint64_t)v45 + 15) & 0xFFFFFFFFFFFFFFF8LL;
          *((void *)this + 2) = v46;
          *((void *)this + 3) = v45;
        }

        *((void *)this + 1) = v7 + 24;
        __int16 v14 = 240;
        goto LABEL_291;
      case 'J':
        int v47 = *((_DWORD *)this + 24);
        if (!v47) {
          return 0LL;
        }
        unsigned int v48 = v47 - 1;
        int v9 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8LL * v48);
        *((_DWORD *)this + 24) = v48;
        if (!v9) {
          return 0LL;
        }
        unint64_t v7 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
        if (!v7 || v7 + 24 > *((void *)this + 2))
        {
          unint64_t v49 = 2LL * *((void *)this + 4);
          if (v49 <= 0x20) {
            unint64_t v49 = 32LL;
          }
          *((void *)this + 4) = v49;
          unint64_t v50 = v49 + 8;
          unint64_t v51 = malloc(v49 + 8);
          unint64_t v52 = (char *)v51 + v50;
          void *v51 = *((void *)this + 3);
          unint64_t v7 = ((unint64_t)v51 + 15) & 0xFFFFFFFFFFFFFFF8LL;
          *((void *)this + 2) = v52;
          *((void *)this + 3) = v51;
        }

        *((void *)this + 1) = v7 + 24;
        __int16 v14 = 314;
        goto LABEL_291;
      case 'K':
        int v53 = *((_DWORD *)this + 24);
        if (!v53) {
          return 0LL;
        }
        unsigned int v54 = v53 - 1;
        int v9 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8LL * v54);
        *((_DWORD *)this + 24) = v54;
        if (!v9) {
          return 0LL;
        }
        unint64_t v7 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
        if (!v7 || v7 + 24 > *((void *)this + 2))
        {
          unint64_t v55 = 2LL * *((void *)this + 4);
          if (v55 <= 0x20) {
            unint64_t v55 = 32LL;
          }
          *((void *)this + 4) = v55;
          unint64_t v56 = v55 + 8;
          unint64_t v57 = malloc(v55 + 8);
          uint64_t v58 = (char *)v57 + v56;
          *unint64_t v57 = *((void *)this + 3);
          unint64_t v7 = ((unint64_t)v57 + 15) & 0xFFFFFFFFFFFFFFF8LL;
          *((void *)this + 2) = v58;
          *((void *)this + 3) = v57;
        }

        *((void *)this + 1) = v7 + 24;
        __int16 v14 = 312;
        goto LABEL_291;
      case 'L':
        int v59 = *((_DWORD *)this + 24);
        if (!v59) {
          return 0LL;
        }
        unsigned int v60 = v59 - 1;
        int v9 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8LL * v60);
        if (*((_WORD *)v9 + 8) != 232) {
          return 0LL;
        }
        *((_DWORD *)this + 24) = v60;
        unint64_t v7 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
        if (!v7 || v7 + 24 > *((void *)this + 2))
        {
          unint64_t v61 = 2LL * *((void *)this + 4);
          if (v61 <= 0x20) {
            unint64_t v61 = 32LL;
          }
          *((void *)this + 4) = v61;
          unint64_t v62 = v61 + 8;
          unint64_t v63 = malloc(v61 + 8);
          int v64 = (char *)v63 + v62;
          void *v63 = *((void *)this + 3);
          unint64_t v7 = ((unint64_t)v63 + 15) & 0xFFFFFFFFFFFFFFF8LL;
          *((void *)this + 2) = v64;
          *((void *)this + 3) = v63;
        }

        *((void *)this + 1) = v7 + 24;
        __int16 v14 = 244;
        goto LABEL_291;
      case 'M':
        int v65 = *((_DWORD *)this + 24);
        if (!v65) {
          return 0LL;
        }
        unsigned int v66 = v65 - 1;
        int v9 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8LL * v66);
        if (*((_WORD *)v9 + 8) != 232) {
          return 0LL;
        }
        *((_DWORD *)this + 24) = v66;
        unint64_t v7 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
        if (!v7 || v7 + 24 > *((void *)this + 2))
        {
          unint64_t v67 = 2LL * *((void *)this + 4);
          if (v67 <= 0x20) {
            unint64_t v67 = 32LL;
          }
          *((void *)this + 4) = v67;
          unint64_t v68 = v67 + 8;
          uint64_t v69 = malloc(v67 + 8);
          int v70 = (char *)v69 + v68;
          void *v69 = *((void *)this + 3);
          unint64_t v7 = ((unint64_t)v69 + 15) & 0xFFFFFFFFFFFFFFF8LL;
          *((void *)this + 2) = v70;
          *((void *)this + 3) = v69;
        }

        *((void *)this + 1) = v7 + 24;
        __int16 v14 = 310;
        goto LABEL_291;
      case 'N':
        int v71 = *((_DWORD *)this + 24);
        if (!v71) {
          return 0LL;
        }
        unsigned int v72 = v71 - 1;
        int v9 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8LL * v72);
        if (*((_WORD *)v9 + 8) != 232) {
          return 0LL;
        }
        *((_DWORD *)this + 24) = v72;
        unint64_t v7 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
        if (!v7 || v7 + 24 > *((void *)this + 2))
        {
          unint64_t v73 = 2LL * *((void *)this + 4);
          if (v73 <= 0x20) {
            unint64_t v73 = 32LL;
          }
          *((void *)this + 4) = v73;
          unint64_t v74 = v73 + 8;
          int v75 = malloc(v73 + 8);
          unint64_t v76 = (char *)v75 + v74;
          void *v75 = *((void *)this + 3);
          unint64_t v7 = ((unint64_t)v75 + 15) & 0xFFFFFFFFFFFFFFF8LL;
          *((void *)this + 2) = v76;
          *((void *)this + 3) = v75;
        }

        *((void *)this + 1) = v7 + 24;
        __int16 v14 = 313;
        goto LABEL_291;
      case 'P':
        int v77 = *((_DWORD *)this + 24);
        if (!v77) {
          return 0LL;
        }
        unsigned int v78 = v77 - 1;
        int v9 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8LL * v78);
        if (*((_WORD *)v9 + 8) != 232) {
          return 0LL;
        }
        *((_DWORD *)this + 24) = v78;
        unint64_t v7 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
        if (!v7 || v7 + 24 > *((void *)this + 2))
        {
          unint64_t v79 = 2LL * *((void *)this + 4);
          if (v79 <= 0x20) {
            unint64_t v79 = 32LL;
          }
          *((void *)this + 4) = v79;
          unint64_t v80 = v79 + 8;
          unint64_t v81 = malloc(v79 + 8);
          unint64_t v82 = (char *)v81 + v80;
          void *v81 = *((void *)this + 3);
          unint64_t v7 = ((unint64_t)v81 + 15) & 0xFFFFFFFFFFFFFFF8LL;
          *((void *)this + 2) = v82;
          *((void *)this + 3) = v81;
        }

        *((void *)this + 1) = v7 + 24;
        __int16 v14 = 97;
        goto LABEL_291;
      case 'Q':
        int v83 = *((_DWORD *)this + 24);
        if (!v83) {
          return 0LL;
        }
        unsigned int v84 = v83 - 1;
        int v9 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8LL * v84);
        *((_DWORD *)this + 24) = v84;
        if (!v9) {
          return 0LL;
        }
        unint64_t v7 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
        if (!v7 || v7 + 24 > *((void *)this + 2))
        {
          unint64_t v85 = 2LL * *((void *)this + 4);
          if (v85 <= 0x20) {
            unint64_t v85 = 32LL;
          }
          *((void *)this + 4) = v85;
          unint64_t v86 = v85 + 8;
          unint64_t v87 = malloc(v85 + 8);
          size_t v88 = (char *)v87 + v86;
          void *v87 = *((void *)this + 3);
          unint64_t v7 = ((unint64_t)v87 + 15) & 0xFFFFFFFFFFFFFFF8LL;
          *((void *)this + 2) = v88;
          *((void *)this + 3) = v87;
        }

        *((void *)this + 1) = v7 + 24;
        __int16 v14 = 302;
        goto LABEL_291;
      case 'S':
        unint64_t v89 = swift::Demangle::__runtime::Demangler::popProtocol(this, a2, a3, a4, a5);
        if (!v89) {
          return 0LL;
        }
        int v9 = (swift::Demangle::__runtime::Node *)v89;
        unint64_t v7 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
        if (!v7 || v7 + 24 > *((void *)this + 2))
        {
          unint64_t v90 = 2LL * *((void *)this + 4);
          if (v90 <= 0x20) {
            unint64_t v90 = 32LL;
          }
          *((void *)this + 4) = v90;
          unint64_t v91 = v90 + 8;
          int v92 = malloc(v90 + 8);
          unint64_t v93 = (char *)v92 + v91;
          void *v92 = *((void *)this + 3);
          unint64_t v7 = ((unint64_t)v92 + 15) & 0xFFFFFFFFFFFFFFF8LL;
          *((void *)this + 2) = v93;
          *((void *)this + 3) = v92;
        }

        *((void *)this + 1) = v7 + 24;
        __int16 v14 = 193;
        goto LABEL_291;
      case 'U':
        int v94 = *((_DWORD *)this + 24);
        if (!v94) {
          return 0LL;
        }
        unsigned int v95 = v94 - 1;
        int v9 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8LL * v95);
        if (*((_WORD *)v9 + 8) != 232) {
          return 0LL;
        }
        *((_DWORD *)this + 24) = v95;
        unint64_t v7 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
        if (!v7 || v7 + 24 > *((void *)this + 2))
        {
          unint64_t v96 = 2LL * *((void *)this + 4);
          if (v96 <= 0x20) {
            unint64_t v96 = 32LL;
          }
          *((void *)this + 4) = v96;
          unint64_t v97 = v96 + 8;
          unint64_t v98 = malloc(v96 + 8);
          unint64_t v99 = (char *)v98 + v97;
          void *v98 = *((void *)this + 3);
          unint64_t v7 = ((unint64_t)v98 + 15) & 0xFFFFFFFFFFFFFFF8LL;
          *((void *)this + 2) = v99;
          *((void *)this + 3) = v98;
        }

        *((void *)this + 1) = v7 + 24;
        __int16 v14 = 149;
        goto LABEL_291;
      case 'V':
        int v100 = *((_DWORD *)this + 24);
        if (!v100) {
          return 0LL;
        }
        int v101 = v100 - 1;
        int v9 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8LL * (v100 - 1));
        int v102 = *((unsigned __int16 *)v9 + 8);
        *((_DWORD *)this + 24) = v101;
        unint64_t v7 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
        if (!v7 || v7 + 24 > *((void *)this + 2))
        {
          unint64_t v103 = 2LL * *((void *)this + 4);
          if (v103 <= 0x20) {
            unint64_t v103 = 32LL;
          }
          *((void *)this + 4) = v103;
          unint64_t v104 = v103 + 8;
          unint64_t v105 = malloc(v103 + 8);
          unint64_t v106 = (char *)v105 + v104;
          void *v105 = *((void *)this + 3);
          unint64_t v7 = ((unint64_t)v105 + 15) & 0xFFFFFFFFFFFFFFF8LL;
          *((void *)this + 2) = v106;
          *((void *)this + 3) = v105;
        }

        *((void *)this + 1) = v7 + 24;
        __int16 v14 = 177;
        goto LABEL_291;
      case 'X':
        return swift::Demangle::__runtime::Demangler::demanglePrivateContextDescriptor(this, a2, a3, a4, a5);
      case 'a':
        int v108 = *((_DWORD *)this + 24);
        if (!v108) {
          return 0LL;
        }
        unsigned int v109 = v108 - 1;
        int v9 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8LL * v109);
        if (*((_WORD *)v9 + 8) != 232) {
          return 0LL;
        }
        *((_DWORD *)this + 24) = v109;
        unint64_t v7 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
        if (!v7 || v7 + 24 > *((void *)this + 2))
        {
          unint64_t v110 = 2LL * *((void *)this + 4);
          if (v110 <= 0x20) {
            unint64_t v110 = 32LL;
          }
          *((void *)this + 4) = v110;
          unint64_t v111 = v110 + 8;
          int v112 = malloc(v110 + 8);
          unint64_t v113 = (char *)v112 + v111;
          *int v112 = *((void *)this + 3);
          unint64_t v7 = ((unint64_t)v112 + 15) & 0xFFFFFFFFFFFFFFF8LL;
          *((void *)this + 2) = v113;
          *((void *)this + 3) = v112;
        }

        *((void *)this + 1) = v7 + 24;
        __int16 v14 = 238;
        goto LABEL_291;
      case 'b':
        int v114 = *((_DWORD *)this + 24);
        if (!v114) {
          return 0LL;
        }
        unsigned int v115 = v114 - 1;
        int v9 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8LL * v115);
        if (*((_WORD *)v9 + 8) != 232) {
          return 0LL;
        }
        *((_DWORD *)this + 24) = v115;
        unint64_t v7 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
        if (!v7 || v7 + 24 > *((void *)this + 2))
        {
          unint64_t v116 = 2LL * *((void *)this + 4);
          if (v116 <= 0x20) {
            unint64_t v116 = 32LL;
          }
          *((void *)this + 4) = v116;
          unint64_t v117 = v116 + 8;
          unint64_t v118 = malloc(v116 + 8);
          unint64_t v119 = (char *)v118 + v117;
          *unint64_t v118 = *((void *)this + 3);
          unint64_t v7 = ((unint64_t)v118 + 15) & 0xFFFFFFFFFFFFFFF8LL;
          *((void *)this + 2) = v119;
          *((void *)this + 3) = v118;
        }

        *((void *)this + 1) = v7 + 24;
        __int16 v14 = 311;
        goto LABEL_291;
      case 'c':
        uint64_t v120 = swift::Demangle::__runtime::Demangler::popProtocolConformance(this, a2, a3, a4, a5);
        if (!v120) {
          return 0LL;
        }
        int v9 = (swift::Demangle::__runtime::Node *)v120;
        unint64_t v7 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
        if (!v7 || v7 + 24 > *((void *)this + 2))
        {
          unint64_t v121 = 2LL * *((void *)this + 4);
          if (v121 <= 0x20) {
            unint64_t v121 = 32LL;
          }
          *((void *)this + 4) = v121;
          unint64_t v122 = v121 + 8;
          unint64_t v123 = malloc(v121 + 8);
          unsigned int v124 = (char *)v123 + v122;
          *unint64_t v123 = *((void *)this + 3);
          unint64_t v7 = ((unint64_t)v123 + 15) & 0xFFFFFFFFFFFFFFF8LL;
          *((void *)this + 2) = v124;
          *((void *)this + 3) = v123;
        }

        *((void *)this + 1) = v7 + 24;
        __int16 v14 = 188;
        goto LABEL_291;
      case 'f':
        int v125 = *((_DWORD *)this + 24);
        if (!v125) {
          return 0LL;
        }
        unsigned int v126 = v125 - 1;
        int v9 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8LL * v126);
        if (*((_WORD *)v9 + 8) != 232) {
          return 0LL;
        }
        *((_DWORD *)this + 24) = v126;
        unint64_t v7 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
        if (!v7 || v7 + 24 > *((void *)this + 2))
        {
          unint64_t v127 = 2LL * *((void *)this + 4);
          if (v127 <= 0x20) {
            unint64_t v127 = 32LL;
          }
          *((void *)this + 4) = v127;
          unint64_t v128 = v127 + 8;
          unint64_t v129 = malloc(v127 + 8);
          unint64_t v130 = (char *)v129 + v128;
          *unint64_t v129 = *((void *)this + 3);
          unint64_t v7 = ((unint64_t)v129 + 15) & 0xFFFFFFFFFFFFFFF8LL;
          *((void *)this + 2) = v130;
          *((void *)this + 3) = v129;
        }

        *((void *)this + 1) = v7 + 24;
        __int16 v14 = 75;
        goto LABEL_291;
      case 'g':
        int v131 = *((_DWORD *)this + 24);
        if (!v131) {
          return 0LL;
        }
        unsigned int v132 = v131 - 1;
        int v9 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8LL * v132);
        *((_DWORD *)this + 24) = v132;
        if (!v9) {
          return 0LL;
        }
        unint64_t v7 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
        if (!v7 || v7 + 24 > *((void *)this + 2))
        {
          unint64_t v133 = 2LL * *((void *)this + 4);
          if (v133 <= 0x20) {
            unint64_t v133 = 32LL;
          }
          *((void *)this + 4) = v133;
          unint64_t v134 = v133 + 8;
          unint64_t v135 = malloc(v133 + 8);
          uint64_t v136 = (char *)v135 + v134;
          void *v135 = *((void *)this + 3);
          unint64_t v7 = ((unint64_t)v135 + 15) & 0xFFFFFFFFFFFFFFF8LL;
          *((void *)this + 2) = v136;
          *((void *)this + 3) = v135;
        }

        *((void *)this + 1) = v7 + 24;
        __int16 v14 = 304;
        goto LABEL_291;
      case 'h':
        int v137 = *((_DWORD *)this + 24);
        if (!v137) {
          return 0LL;
        }
        unsigned int v138 = v137 - 1;
        int v9 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8LL * v138);
        *((_DWORD *)this + 24) = v138;
        if (!v9) {
          return 0LL;
        }
        unint64_t v7 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
        if (!v7 || v7 + 24 > *((void *)this + 2))
        {
          unint64_t v139 = 2LL * *((void *)this + 4);
          if (v139 <= 0x20) {
            unint64_t v139 = 32LL;
          }
          *((void *)this + 4) = v139;
          unint64_t v140 = v139 + 8;
          unsigned int v141 = malloc(v139 + 8);
          unint64_t v142 = (char *)v141 + v140;
          void *v141 = *((void *)this + 3);
          unint64_t v7 = ((unint64_t)v141 + 15) & 0xFFFFFFFFFFFFFFF8LL;
          *((void *)this + 2) = v142;
          *((void *)this + 3) = v141;
        }

        *((void *)this + 1) = v7 + 24;
        __int16 v14 = 305;
        goto LABEL_291;
      case 'i':
        int v143 = *((_DWORD *)this + 24);
        if (!v143) {
          return 0LL;
        }
        unsigned int v144 = v143 - 1;
        int v9 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8LL * v144);
        if (*((_WORD *)v9 + 8) != 232) {
          return 0LL;
        }
        *((_DWORD *)this + 24) = v144;
        unint64_t v7 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
        if (!v7 || v7 + 24 > *((void *)this + 2))
        {
          unint64_t v145 = 2LL * *((void *)this + 4);
          if (v145 <= 0x20) {
            unint64_t v145 = 32LL;
          }
          *((void *)this + 4) = v145;
          unint64_t v146 = v145 + 8;
          unint64_t v147 = malloc(v145 + 8);
          unint64_t v148 = (char *)v147 + v146;
          *unint64_t v147 = *((void *)this + 3);
          unint64_t v7 = ((unint64_t)v147 + 15) & 0xFFFFFFFFFFFFFFF8LL;
          *((void *)this + 2) = v148;
          *((void *)this + 3) = v147;
        }

        *((void *)this + 1) = v7 + 24;
        __int16 v14 = 241;
        goto LABEL_291;
      case 'j':
        int v149 = *((_DWORD *)this + 24);
        if (!v149) {
          return 0LL;
        }
        unsigned int v150 = v149 - 1;
        int v9 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8LL * v150);
        *((_DWORD *)this + 24) = v150;
        if (!v9) {
          return 0LL;
        }
        unint64_t v7 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
        if (!v7 || v7 + 24 > *((void *)this + 2))
        {
          unint64_t v151 = 2LL * *((void *)this + 4);
          if (v151 <= 0x20) {
            unint64_t v151 = 32LL;
          }
          *((void *)this + 4) = v151;
          unint64_t v152 = v151 + 8;
          unint64_t v153 = malloc(v151 + 8);
          unint64_t v154 = (char *)v153 + v152;
          void *v153 = *((void *)this + 3);
          unint64_t v7 = ((unint64_t)v153 + 15) & 0xFFFFFFFFFFFFFFF8LL;
          *((void *)this + 2) = v154;
          *((void *)this + 3) = v153;
        }

        *((void *)this + 1) = v7 + 24;
        __int16 v14 = 306;
        goto LABEL_291;
      case 'k':
        int v155 = *((_DWORD *)this + 24);
        if (!v155) {
          return 0LL;
        }
        unsigned int v156 = v155 - 1;
        int v9 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8LL * v156);
        *((_DWORD *)this + 24) = v156;
        if (!v9) {
          return 0LL;
        }
        unint64_t v7 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
        if (!v7 || v7 + 24 > *((void *)this + 2))
        {
          unint64_t v157 = 2LL * *((void *)this + 4);
          if (v157 <= 0x20) {
            unint64_t v157 = 32LL;
          }
          *((void *)this + 4) = v157;
          unint64_t v158 = v157 + 8;
          unsigned int v159 = malloc(v157 + 8);
          uint64_t v160 = (char *)v159 + v158;
          void *v159 = *((void *)this + 3);
          unint64_t v7 = ((unint64_t)v159 + 15) & 0xFFFFFFFFFFFFFFF8LL;
          *((void *)this + 2) = v160;
          *((void *)this + 3) = v159;
        }

        *((void *)this + 1) = v7 + 24;
        __int16 v14 = 307;
        goto LABEL_291;
      case 'l':
        int v161 = *((_DWORD *)this + 24);
        if (!v161) {
          return 0LL;
        }
        unsigned int v162 = v161 - 1;
        int v9 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8LL * v162);
        if (*((_WORD *)v9 + 8) != 232) {
          return 0LL;
        }
        *((_DWORD *)this + 24) = v162;
        unint64_t v7 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
        if (!v7 || v7 + 24 > *((void *)this + 2))
        {
          unint64_t v163 = 2LL * *((void *)this + 4);
          if (v163 <= 0x20) {
            unint64_t v163 = 32LL;
          }
          *((void *)this + 4) = v163;
          unint64_t v164 = v163 + 8;
          unint64_t v165 = malloc(v163 + 8);
          unint64_t v166 = (char *)v165 + v164;
          void *v165 = *((void *)this + 3);
          unint64_t v7 = ((unint64_t)v165 + 15) & 0xFFFFFFFFFFFFFFF8LL;
          *((void *)this + 2) = v166;
          *((void *)this + 3) = v165;
        }

        *((void *)this + 1) = v7 + 24;
        __int16 v14 = 242;
        goto LABEL_291;
      case 'm':
        int v167 = *((_DWORD *)this + 24);
        if (!v167) {
          return 0LL;
        }
        unsigned int v168 = v167 - 1;
        int v9 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8LL * v168);
        if (*((_WORD *)v9 + 8) != 232) {
          return 0LL;
        }
        *((_DWORD *)this + 24) = v168;
        unint64_t v7 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
        if (!v7 || v7 + 24 > *((void *)this + 2))
        {
          unint64_t v169 = 2LL * *((void *)this + 4);
          if (v169 <= 0x20) {
            unint64_t v169 = 32LL;
          }
          *((void *)this + 4) = v169;
          unint64_t v170 = v169 + 8;
          int v171 = malloc(v169 + 8);
          uint64_t v172 = (char *)v171 + v170;
          *int v171 = *((void *)this + 3);
          unint64_t v7 = ((unint64_t)v171 + 15) & 0xFFFFFFFFFFFFFFF8LL;
          *((void *)this + 2) = v172;
          *((void *)this + 3) = v171;
        }

        *((void *)this + 1) = v7 + 24;
        __int16 v14 = 147;
        goto LABEL_291;
      case 'n':
        int v173 = *((_DWORD *)this + 24);
        if (!v173) {
          return 0LL;
        }
        unsigned int v174 = v173 - 1;
        int v9 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8LL * v174);
        if (*((_WORD *)v9 + 8) != 232) {
          return 0LL;
        }
        *((_DWORD *)this + 24) = v174;
        unint64_t v7 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
        if (!v7 || v7 + 24 > *((void *)this + 2))
        {
          unint64_t v175 = 2LL * *((void *)this + 4);
          if (v175 <= 0x20) {
            unint64_t v175 = 32LL;
          }
          *((void *)this + 4) = v175;
          unint64_t v176 = v175 + 8;
          uint64_t v177 = malloc(v175 + 8);
          uint64_t v178 = (char *)v177 + v176;
          *uint64_t v177 = *((void *)this + 3);
          unint64_t v7 = ((unint64_t)v177 + 15) & 0xFFFFFFFFFFFFFFF8LL;
          *((void *)this + 2) = v178;
          *((void *)this + 3) = v177;
        }

        *((void *)this + 1) = v7 + 24;
        __int16 v14 = 158;
        goto LABEL_291;
      case 'o':
        int v179 = *((_DWORD *)this + 24);
        if (!v179) {
          return 0LL;
        }
        unsigned int v180 = v179 - 1;
        int v9 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8LL * v180);
        if (*((_WORD *)v9 + 8) != 232) {
          return 0LL;
        }
        *((_DWORD *)this + 24) = v180;
        unint64_t v7 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
        if (!v7 || v7 + 24 > *((void *)this + 2))
        {
          unint64_t v181 = 2LL * *((void *)this + 4);
          if (v181 <= 0x20) {
            unint64_t v181 = 32LL;
          }
          *((void *)this + 4) = v181;
          unint64_t v182 = v181 + 8;
          uint64_t v183 = malloc(v181 + 8);
          int v184 = (char *)v183 + v182;
          *uint64_t v183 = *((void *)this + 3);
          unint64_t v7 = ((unint64_t)v183 + 15) & 0xFFFFFFFFFFFFFFF8LL;
          *((void *)this + 2) = v184;
          *((void *)this + 3) = v183;
        }

        *((void *)this + 1) = v7 + 24;
        __int16 v14 = 25;
        goto LABEL_291;
      case 'p':
        unint64_t v185 = swift::Demangle::__runtime::Demangler::popProtocol(this, a2, a3, a4, a5);
        if (!v185) {
          return 0LL;
        }
        int v9 = (swift::Demangle::__runtime::Node *)v185;
        unint64_t v7 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
        if (!v7 || v7 + 24 > *((void *)this + 2))
        {
          unint64_t v186 = 2LL * *((void *)this + 4);
          if (v186 <= 0x20) {
            unint64_t v186 = 32LL;
          }
          *((void *)this + 4) = v186;
          unint64_t v187 = v186 + 8;
          int v188 = malloc(v186 + 8);
          int v189 = (char *)v188 + v187;
          *int v188 = *((void *)this + 3);
          unint64_t v7 = ((unint64_t)v188 + 15) & 0xFFFFFFFFFFFFFFF8LL;
          *((void *)this + 2) = v189;
          *((void *)this + 3) = v188;
        }

        *((void *)this + 1) = v7 + 24;
        __int16 v14 = 186;
        goto LABEL_291;
      case 'q':
        int v190 = *((_DWORD *)this + 24);
        if (!v190) {
          return 0LL;
        }
        unsigned int v191 = v190 - 1;
        int v9 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8LL * v191);
        *((_DWORD *)this + 24) = v191;
        if (!v9) {
          return 0LL;
        }
        unint64_t v7 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
        if (!v7 || v7 + 24 > *((void *)this + 2))
        {
          unint64_t v192 = 2LL * *((void *)this + 4);
          if (v192 <= 0x20) {
            unint64_t v192 = 32LL;
          }
          *((void *)this + 4) = v192;
          unint64_t v193 = v192 + 8;
          __int128 v194 = malloc(v192 + 8);
          __int128 v195 = (char *)v194 + v193;
          *__int128 v194 = *((void *)this + 3);
          unint64_t v7 = ((unint64_t)v194 + 15) & 0xFFFFFFFFFFFFFFF8LL;
          *((void *)this + 2) = v195;
          *((void *)this + 3) = v194;
        }

        *((void *)this + 1) = v7 + 24;
        __int16 v14 = 335;
        goto LABEL_291;
      case 'r':
        int v196 = *((_DWORD *)this + 24);
        if (!v196) {
          return 0LL;
        }
        unsigned int v197 = v196 - 1;
        int v9 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8LL * v197);
        if (*((_WORD *)v9 + 8) != 232) {
          return 0LL;
        }
        *((_DWORD *)this + 24) = v197;
        unint64_t v7 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
        if (!v7 || v7 + 24 > *((void *)this + 2))
        {
          unint64_t v198 = 2LL * *((void *)this + 4);
          if (v198 <= 0x20) {
            unint64_t v198 = 32LL;
          }
          *((void *)this + 4) = v198;
          unint64_t v199 = v198 + 8;
          int v200 = malloc(v198 + 8);
          int v201 = (char *)v200 + v199;
          *int v200 = *((void *)this + 3);
          unint64_t v7 = ((unint64_t)v200 + 15) & 0xFFFFFFFFFFFFFFF8LL;
          *((void *)this + 2) = v201;
          *((void *)this + 3) = v200;
        }

        *((void *)this + 1) = v7 + 24;
        __int16 v14 = 239;
        goto LABEL_291;
      case 's':
        int v202 = *((_DWORD *)this + 24);
        if (!v202) {
          return 0LL;
        }
        unsigned int v203 = v202 - 1;
        int v9 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8LL * v203);
        if (*((_WORD *)v9 + 8) != 232) {
          return 0LL;
        }
        *((_DWORD *)this + 24) = v203;
        unint64_t v7 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
        if (!v7 || v7 + 24 > *((void *)this + 2))
        {
          unint64_t v204 = 2LL * *((void *)this + 4);
          if (v204 <= 0x20) {
            unint64_t v204 = 32LL;
          }
          *((void *)this + 4) = v204;
          unint64_t v205 = v204 + 8;
          v206 = malloc(v204 + 8);
          int v207 = (char *)v206 + v205;
          void *v206 = *((void *)this + 3);
          unint64_t v7 = ((unint64_t)v206 + 15) & 0xFFFFFFFFFFFFFFF8LL;
          *((void *)this + 2) = v207;
          *((void *)this + 3) = v206;
        }

        *((void *)this + 1) = v7 + 24;
        __int16 v14 = 150;
        goto LABEL_291;
      case 't':
        int v208 = *((_DWORD *)this + 24);
        if (!v208) {
          return 0LL;
        }
        unsigned int v209 = v208 - 1;
        int v9 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8LL * v209);
        if (*((_WORD *)v9 + 8) != 232) {
          return 0LL;
        }
        *((_DWORD *)this + 24) = v209;
        unint64_t v7 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
        if (!v7 || v7 + 24 > *((void *)this + 2))
        {
          unint64_t v210 = 2LL * *((void *)this + 4);
          if (v210 <= 0x20) {
            unint64_t v210 = 32LL;
          }
          *((void *)this + 4) = v210;
          unint64_t v211 = v210 + 8;
          uint64_t v212 = malloc(v210 + 8);
          int v213 = (char *)v212 + v211;
          *uint64_t v212 = *((void *)this + 3);
          unint64_t v7 = ((unint64_t)v212 + 15) & 0xFFFFFFFFFFFFFFF8LL;
          *((void *)this + 2) = v213;
          *((void *)this + 3) = v212;
        }

        *((void *)this + 1) = v7 + 24;
        __int16 v14 = 151;
        goto LABEL_291;
      case 'u':
        int v214 = *((_DWORD *)this + 24);
        if (!v214) {
          return 0LL;
        }
        unsigned int v215 = v214 - 1;
        int v9 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8LL * v215);
        if (*((_WORD *)v9 + 8) != 232) {
          return 0LL;
        }
        *((_DWORD *)this + 24) = v215;
        unint64_t v7 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
        if (!v7 || v7 + 24 > *((void *)this + 2))
        {
          unint64_t v216 = 2LL * *((void *)this + 4);
          if (v216 <= 0x20) {
            unint64_t v216 = 32LL;
          }
          *((void *)this + 4) = v216;
          unint64_t v217 = v216 + 8;
          v218 = malloc(v216 + 8);
          uint64_t v219 = (char *)v218 + v217;
          void *v218 = *((void *)this + 3);
          unint64_t v7 = ((unint64_t)v218 + 15) & 0xFFFFFFFFFFFFFFF8LL;
          *((void *)this + 2) = v219;
          *((void *)this + 3) = v218;
        }

        *((void *)this + 1) = v7 + 24;
        __int16 v14 = 148;
        goto LABEL_291;
      case 'z':
        int v220 = *((_DWORD *)this + 24);
        if (!v220) {
          return 0LL;
        }
        unsigned int v221 = v220 - 1;
        int v9 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8LL * v221);
        if (*((_WORD *)v9 + 8) != 232) {
          return 0LL;
        }
        *((_DWORD *)this + 24) = v221;
        unint64_t v7 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
        if (!v7 || v7 + 24 > *((void *)this + 2))
        {
          unint64_t v222 = 2LL * *((void *)this + 4);
          if (v222 <= 0x20) {
            unint64_t v222 = 32LL;
          }
          *((void *)this + 4) = v222;
          unint64_t v223 = v222 + 8;
          unint64_t v224 = malloc(v222 + 8);
          int v225 = (char *)v224 + v223;
          *unint64_t v224 = *((void *)this + 3);
          unint64_t v7 = ((unint64_t)v224 + 15) & 0xFFFFFFFFFFFFFFF8LL;
          *((void *)this + 2) = v225;
          *((void *)this + 3) = v224;
        }

        *((void *)this + 1) = v7 + 24;
        __int16 v14 = 318;
LABEL_291:
        *(_WORD *)(v7 + 16) = v14;
        *(_BYTE *)(v7 + 18) = 0;
        swift::Demangle::__runtime::Node::addChild((unsigned int *)v7, v9, this, a4, a5);
        return v7;
      default:
        return v7;
    }
  }

  return 0LL;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleArchetype( swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v5 = *((void *)this + 8);
  unint64_t v6 = *((void *)this + 9);
  if (v6 >= v5) {
    return 0LL;
  }
  unint64_t v7 = this;
  unint64_t Type = 0LL;
  unint64_t v9 = v6 + 1;
  *((void *)this + 9) = v6 + 1;
  uint64_t v10 = *((void *)this + 7);
  switch(*(_BYTE *)(v10 + v6))
  {
    case 'O':
      unint64_t v11 = swift::Demangle::__runtime::Demangler::popContext(this, a2, a3, a4, a5);
      if (!v11) {
        return 0LL;
      }
      unint64_t v12 = (unint64_t)v11;
      unint64_t Type = (*((void *)v7 + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
      if (!Type || Type + 24 > *((void *)v7 + 2))
      {
        unint64_t v13 = 2LL * *((void *)v7 + 4);
        if (v13 <= 0x20) {
          unint64_t v13 = 32LL;
        }
        *((void *)v7 + 4) = v13;
        unint64_t v14 = v13 + 8;
        int v15 = malloc(v13 + 8);
        unsigned int v16 = (char *)v15 + v14;
        *int v15 = *((void *)v7 + 3);
        unint64_t Type = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8LL;
        *((void *)v7 + 2) = v16;
        *((void *)v7 + 3) = v15;
      }

      *((void *)v7 + 1) = Type + 24;
      __int16 v17 = 309;
      goto LABEL_67;
    case 'P':
      return swift::Demangle::__runtime::Demangler::popPack(this, a2, a3, a4, a5);
    case 'R':
      if (v9 >= v5) {
        return 0LL;
      }
      int v19 = *(unsigned __int8 *)(v10 + v9);
      if (v19 == 95)
      {
        uint64_t v20 = 0LL;
        *((void *)this + 9) = v6 + 2;
      }

      else
      {
        int v100 = 0;
        while (1)
        {
          int v101 = *(unsigned __int8 *)(v10 + v9);
          int v102 = v101 + 10 * v100 - 48;
          if (v102 < v100) {
            return 0LL;
          }
          unint64_t Type = 0LL;
          *((void *)this + 9) = ++v9;
          int v100 = v102;
          if (v5 == v9) {
            return Type;
          }
        }

        unint64_t Type = 0LL;
        if (v100 < 0 || v9 >= v5 || v101 != 95) {
          return Type;
        }
        *((void *)this + 9) = v9 + 1;
        uint64_t v20 = (v100 + 1);
      }

      unint64_t v21 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
      if (!v21 || v21 + 24 > *((void *)this + 2))
      {
        unint64_t v22 = 2LL * *((void *)this + 4);
        if (v22 <= 0x20) {
          unint64_t v22 = 32LL;
        }
        *((void *)this + 4) = v22;
        unint64_t v23 = v22 + 8;
        int v24 = malloc(v22 + 8);
        unsigned int v25 = (char *)v24 + v23;
        *int v24 = *((void *)v7 + 3);
        unint64_t v21 = ((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8LL;
        *((void *)v7 + 2) = v25;
        *((void *)v7 + 3) = v24;
      }

      *((void *)v7 + 1) = v21 + 24;
      *(_WORD *)(v21 + 16) = 341;
      *(_BYTE *)(v21 + 18) = 4;
      *(void *)unint64_t v21 = v20;
      unint64_t v12 = (*((void *)v7 + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
      if (!v12 || v12 + 24 > *((void *)v7 + 2))
      {
        unint64_t v26 = 2LL * *((void *)v7 + 4);
        if (v26 <= 0x20) {
          unint64_t v26 = 32LL;
        }
        *((void *)v7 + 4) = v26;
        unint64_t v27 = v26 + 8;
        size_t v28 = malloc(v26 + 8);
        int v29 = (char *)v28 + v27;
        *size_t v28 = *((void *)v7 + 3);
        unint64_t v12 = ((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8LL;
        *((void *)v7 + 2) = v29;
        *((void *)v7 + 3) = v28;
      }

      *((void *)v7 + 1) = v12 + 24;
      *(_WORD *)(v12 + 16) = 308;
      *(_BYTE *)(v12 + 18) = 0;
      swift::Demangle::__runtime::Node::addChild( (unsigned int *)v12,  (swift::Demangle::__runtime::Node *)v21,  v7,  a4,  a5);
      unint64_t Type = (*((void *)v7 + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
      if (!Type || Type + 24 > *((void *)v7 + 2))
      {
LABEL_63:
        unint64_t v57 = 2LL * *((void *)v7 + 4);
        if (v57 <= 0x20) {
          unint64_t v57 = 32LL;
        }
        *((void *)v7 + 4) = v57;
        unint64_t v58 = v57 + 8;
        int v59 = malloc(v57 + 8);
        unsigned int v60 = (char *)v59 + v58;
        *int v59 = *((void *)v7 + 3);
        unint64_t Type = ((unint64_t)v59 + 15) & 0xFFFFFFFFFFFFFFF8LL;
        *((void *)v7 + 2) = v60;
        *((void *)v7 + 3) = v59;
      }

unint64_t swift::Demangle::__runtime::Demangler::demangleGenericRequirement( swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v6 = *((void *)this + 9);
  if (v6 >= *((void *)this + 8))
  {
    unint64_t v7 = *((void *)this + 9);
LABEL_6:
    unsigned int v8 = 0LL;
    int v10 = 0;
    *((void *)this + 9) = v7 - 1;
LABEL_7:
    uint64_t v12 = swift::Demangle::__runtime::Demangler::demangleGenericParamIndex(this, a2, a3, a4, a5);
    if (v12)
    {
      unint64_t v13 = (swift::Demangle::__runtime::Node *)v12;
      unint64_t v14 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
      if (!v14 || v14 + 24 > *((void *)this + 2))
      {
        unint64_t v15 = 2LL * *((void *)this + 4);
        if (v15 <= 0x20) {
          unint64_t v15 = 32LL;
        }
        *((void *)this + 4) = v15;
        unint64_t v16 = v15 + 8;
        __int16 v17 = malloc(v15 + 8);
        unint64_t v18 = (char *)v17 + v16;
        *__int16 v17 = *((void *)this + 3);
        unint64_t v14 = ((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8LL;
        *((void *)this + 2) = v18;
        *((void *)this + 3) = v17;
      }

      *((void *)this + 1) = v14 + 24;
      *(_WORD *)(v14 + 16) = 232;
      *(_BYTE *)(v14 + 18) = 0;
      swift::Demangle::__runtime::Node::addChild((unsigned int *)v14, v13, this, a4, a5);
    }

    else
    {
      unint64_t v14 = 0LL;
    }

unint64_t swift::Demangle::__runtime::Demangler::demangleStandardSubstitution( swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2 = *((void *)this + 8);
  unint64_t v3 = *((void *)this + 9);
  if (v3 < v2)
  {
    *((void *)this + 9) = v3 + 1;
    int v4 = *(char *)(*((void *)this + 7) + v3);
    if (v4 == 67)
    {
      unint64_t v5 = "__C_Synthesized";
      size_t v6 = 15LL;
      return swift::Demangle::__runtime::NodeFactory::createNode(this, 153, v5, v6);
    }

    if (v4 == 103)
    {
      Swiftunint64_t Type = swift::Demangle::__runtime::Demangler::createSwiftType(this, 61, "Optional");
      int v20 = *((_DWORD *)this + 24);
      if (v20)
      {
        unsigned int v21 = v20 - 1;
        uint64_t v22 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8LL * v21);
        if (*((_WORD *)v22 + 8) == 232)
        {
          uint64_t v23 = (swift::Demangle::__runtime::Node *)SwiftType;
          *((_DWORD *)this + 24) = v21;
          unint64_t v24 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
          if (!v24 || v24 + 24 > *((void *)this + 2))
          {
            unint64_t v25 = 2LL * *((void *)this + 4);
            if (v25 <= 0x20) {
              unint64_t v25 = 32LL;
            }
            *((void *)this + 4) = v25;
            unint64_t v26 = v25 + 8;
            unint64_t v27 = malloc(v25 + 8);
            uint64_t v28 = (char *)v27 + v26;
            *unint64_t v27 = *((void *)this + 3);
            unint64_t v24 = ((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8LL;
            *((void *)this + 2) = v28;
            *((void *)this + 3) = v27;
          }

          *((void *)this + 1) = v24 + 24;
          *(_WORD *)(v24 + 16) = 235;
          *(_BYTE *)(v24 + 18) = 0;
          swift::Demangle::__runtime::Node::addChild((unsigned int *)v24, v22, this, v18, v19);
          if (v23)
          {
            if (v24)
            {
              unint64_t v31 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
              if (!v31 || v31 + 24 > *((void *)this + 2))
              {
                unint64_t v32 = 2LL * *((void *)this + 4);
                if (v32 <= 0x20) {
                  unint64_t v32 = 32LL;
                }
                *((void *)this + 4) = v32;
                unint64_t v33 = v32 + 8;
                unsigned int v34 = malloc(v32 + 8);
                unint64_t v35 = (char *)v34 + v33;
                void *v34 = *((void *)this + 3);
                unint64_t v31 = ((unint64_t)v34 + 15) & 0xFFFFFFFFFFFFFFF8LL;
                *((void *)this + 2) = v35;
                *((void *)this + 3) = v34;
              }

              *((void *)this + 1) = v31 + 24;
              *(_WORD *)(v31 + 16) = 14;
              *(_BYTE *)(v31 + 18) = 0;
              swift::Demangle::__runtime::Node::addChild((unsigned int *)v31, v23, this, v29, v30);
              swift::Demangle::__runtime::Node::addChild( (unsigned int *)v31,  (swift::Demangle::__runtime::Node *)v24,  this,  v36,  v37);
              unint64_t StandardSubstitution = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
              if (!StandardSubstitution || StandardSubstitution + 24 > *((void *)this + 2))
              {
                unint64_t v40 = 2LL * *((void *)this + 4);
                if (v40 <= 0x20) {
                  unint64_t v40 = 32LL;
                }
                *((void *)this + 4) = v40;
                unint64_t v41 = v40 + 8;
                unint64_t v42 = malloc(v40 + 8);
                unint64_t v43 = (char *)v42 + v41;
                void *v42 = *((void *)this + 3);
                unint64_t StandardSubstitution = ((unint64_t)v42 + 15) & 0xFFFFFFFFFFFFFFF8LL;
                *((void *)this + 2) = v43;
                *((void *)this + 3) = v42;
              }

              *((void *)this + 1) = StandardSubstitution + 24;
              *(_WORD *)(StandardSubstitution + 16) = 232;
              *(_BYTE *)(StandardSubstitution + 18) = 0;
              swift::Demangle::__runtime::Node::addChild( (unsigned int *)StandardSubstitution,  (swift::Demangle::__runtime::Node *)v31,  this,  v38,  v39);
              unint64_t v44 = StandardSubstitution;
              swift::Demangle::__runtime::Vector<swift::Demangle::__runtime::Node *>::push_back( (const void **)this + 13,  (uint64_t *)&v44,  this);
              return StandardSubstitution;
            }
          }
        }
      }

      return 0LL;
    }

    ++v3;
    if (v4 == 111)
    {
      unint64_t v5 = "__C";
      size_t v6 = 3LL;
      return swift::Demangle::__runtime::NodeFactory::createNode(this, 153, v5, v6);
    }
  }

  unint64_t v7 = v3 - 1;
  *((void *)this + 9) = v7;
  if (v7 >= v2 || (uint64_t v8 = *((void *)this + 7), *(unsigned __int8 *)(v8 + v7) - 48 > 9))
  {
LABEL_16:
    int v9 = -1000;
    if (v7 >= v2) {
      goto LABEL_20;
    }
    goto LABEL_17;
  }

  int v9 = 0;
  while (1)
  {
    int v10 = *(unsigned __int8 *)(v8 + v7);
    int v11 = v10 + 10 * v9 - 48;
    if (v11 < v9) {
      goto LABEL_16;
    }
    *((void *)this + 9) = ++v7;
    int v9 = v11;
    if (v2 == v7)
    {
      unint64_t v7 = v2;
      int v9 = v11;
      break;
    }
  }

  if (v9 <= 2048)
  {
    if (v7 >= v2) {
      goto LABEL_20;
    }
LABEL_17:
    if (*(_BYTE *)(*((void *)this + 7) + v7) == 99)
    {
      *((void *)this + 9) = ++v7;
      int v12 = 1;
      if (v7 >= v2)
      {
LABEL_19:
        char v13 = 0;
LABEL_22:
        unint64_t StandardSubstitution = swift::Demangle::__runtime::Demangler::createStandardSubstitution(this, v13, v12);
        if (StandardSubstitution && v9 >= 2)
        {
          unsigned int v15 = v9 + 1;
          do
          {
            unint64_t v44 = StandardSubstitution;
            swift::Demangle::__runtime::Vector<swift::Demangle::__runtime::Node *>::push_back( (const void **)this + 11,  (uint64_t *)&v44,  this);
            --v15;
          }

          while (v15 > 2);
        }

        return StandardSubstitution;
      }

int8x16_t *swift::Demangle::__runtime::Demangler::demangleThunkOrSpecialization( swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v6 = *((void *)this + 8);
  unint64_t v5 = *((void *)this + 9);
  if (v5 >= v6) {
    return 0LL;
  }
  unint64_t v7 = this;
  unint64_t Node = 0LL;
  unint64_t v9 = v5 + 1;
  *((void *)this + 9) = v5 + 1;
  uint64_t v10 = *((void *)this + 7);
  int v11 = *(unsigned __int8 *)(v10 + v5);
  switch(*(_BYTE *)(v10 + v5))
  {
    case 'A':
      __int16 v58 = 170;
      return (int8x16_t *)swift::Demangle::__runtime::NodeFactory::createNode(this, v58);
    case 'B':
      __int16 v59 = 93;
      return (int8x16_t *)swift::Demangle::__runtime::Demangler::demangleGenericSpecialization(this, v59, a3, a4, a5);
    case 'C':
      int v60 = *((_DWORD *)this + 24);
      if (v60
        && (unsigned int v61 = v60 - 1,
            unint64_t v62 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8LL * v61),
            *((_WORD *)v62 + 8) == 232))
      {
        *((_DWORD *)this + 24) = v61;
      }

      else
      {
        unint64_t v62 = 0LL;
      }

      __int16 v65 = 30;
      return (int8x16_t *)swift::Demangle::__runtime::Demangler::createWithChild(this, v65, v62, a4, a5);
    case 'D':
      __int16 v58 = 55;
      return (int8x16_t *)swift::Demangle::__runtime::NodeFactory::createNode(this, v58);
    case 'E':
      __int16 v58 = 53;
      return (int8x16_t *)swift::Demangle::__runtime::NodeFactory::createNode(this, v58);
    case 'F':
      __int16 v58 = 54;
      return (int8x16_t *)swift::Demangle::__runtime::NodeFactory::createNode(this, v58);
    case 'G':
      __int16 v59 = 92;
      return (int8x16_t *)swift::Demangle::__runtime::Demangler::demangleGenericSpecialization(this, v59, a3, a4, a5);
    case 'H':
    case 'h':
      if (v11 == 72) {
        __int16 v14 = 133;
      }
      else {
        __int16 v14 = 134;
      }
      if (v9 < v6 && *(_BYTE *)(v10 + v9) == 113)
      {
        *((void *)this + 9) = v5 + 2;
        int v15 = 1;
      }

      else
      {
        int v15 = 0;
      }

      memset(&__p, 0, sizeof(__p));
      int v30 = *((_DWORD *)this + 24);
      if (!v30) {
        goto LABEL_274;
      }
      int v31 = v30 - 1;
      unint64_t v32 = *(unsigned __int16 **)(*((void *)this + 11) + 8LL * (v30 - 1));
      *((_DWORD *)this + 24) = v30 - 1;
      unint64_t v193 = v32;
      if (!v32) {
        goto LABEL_274;
      }
      int v33 = v32[8];
      if (v33 == 43)
      {
        __int16 v190 = v14;
        int v191 = v15;
      }

      else
      {
        if (v33 != 232)
        {
LABEL_274:
          unint64_t Node = 0LL;
          goto LABEL_275;
        }

        __int16 v190 = v14;
        int v191 = v15;
        std::vector<swift::Demangle::__runtime::Node *>::push_back[abi:nn180100]( (void **)&__p.__r_.__value_.__l.__data_,  &v193);
        unint64_t v32 = 0LL;
        int v31 = *((_DWORD *)v7 + 24);
      }

      for (; v31; __p.__r_.__value_.__l.__size_ = v158)
      {
        uint64_t v159 = *(void *)(*((void *)v7 + 11) + 8LL * --v31);
        *((_DWORD *)v7 + 24) = v31;
        if (!v159) {
          break;
        }
        if (*(_WORD *)(v159 + 16) != 232) {
          goto LABEL_274;
        }
        size_t size = (_BYTE *)__p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_ < __p.__r_.__value_.__l.__cap_)
        {
          *(void *)__p.__r_.__value_.__l.__size_ = v159;
          std::string::size_type v158 = (std::string::size_type)(size + 8);
        }

        else
        {
          std::string::size_type v161 = __p.__r_.__value_.__r.__words[0];
          std::string::size_type v162 = __p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0];
          uint64_t v163 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3;
          unint64_t v164 = v163 + 1;
          int64_t v165 = __p.__r_.__value_.__l.__cap_ - __p.__r_.__value_.__r.__words[0];
          else {
            unint64_t v166 = v164;
          }
          if (v166)
          {
            if (v166 >> 61) {
              goto LABEL_303;
            }
            int v167 = operator new(8 * v166);
          }

          else
          {
            int v167 = 0LL;
          }

          unsigned int v168 = &v167[8 * v163];
          void *v168 = v159;
          std::string::size_type v158 = (std::string::size_type)(v168 + 1);
          if (size != (_BYTE *)v161)
          {
            unint64_t v169 = (unint64_t)&size[-v161 - 8];
            if (v169 < 0x58) {
              goto LABEL_306;
            }
            uint64_t v170 = (v169 >> 3) + 1;
            uint64_t v171 = 8 * (v170 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v172 = &size[-v171];
            unsigned int v168 = (void *)((char *)v168 - v171);
            int v173 = &v167[8 * v163 - 16];
            unsigned int v174 = (__int128 *)(size - 16);
            uint64_t v175 = v170 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              __int128 v176 = *v174;
              *(v173 - 1) = *(v174 - 1);
              *int v173 = v176;
              v173 -= 2;
              v174 -= 2;
              v175 -= 4LL;
            }

            while (v175);
            size_t size = v172;
            if (v170 != (v170 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_306:
              do
              {
                uint64_t v177 = *((void *)size - 1);
                size -= 8;
                *--unsigned int v168 = v177;
              }

              while (size != (_BYTE *)v161);
            }

            size_t size = (_BYTE *)__p.__r_.__value_.__r.__words[0];
          }

          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v168;
          __p.__r_.__value_.__l.__size_ = v158;
          __p.__r_.__value_.__l.__cap_ = (std::string::size_type)&v167[8 * v166];
          if (size)
          {
            operator delete(size);
            int v31 = *((_DWORD *)v7 + 24);
          }
        }
      }

      unint64_t Node = swift::Demangle::__runtime::NodeFactory::createNode(v7, v190);
      std::string::size_type v152 = __p.__r_.__value_.__l.__size_;
      std::string::size_type v153 = __p.__r_.__value_.__r.__words[0];
      while (v152 != v153)
      {
        unint64_t v154 = *(swift::Demangle::__runtime::Node **)(v152 - 8);
        v152 -= 8LL;
        swift::Demangle::__runtime::Node::addChild((unsigned int *)Node, v154, v7, v150, v151);
      }

      if (v32) {
        swift::Demangle::__runtime::Node::addChild( (unsigned int *)Node,  (swift::Demangle::__runtime::Node *)v32,  v7,  v150,  v151);
      }
      if (v191)
      {
        int v155 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v7, 217);
        swift::Demangle::__runtime::Node::addChild((unsigned int *)Node, v155, v7, v156, v157);
      }

LABEL_275:
      int v149 = (unint64_t *)__p.__r_.__value_.__r.__words[0];
      if (!__p.__r_.__value_.__r.__words[0]) {
        return (int8x16_t *)Node;
      }
      __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
      goto LABEL_277;
    case 'I':
      __int16 v58 = 58;
      return (int8x16_t *)swift::Demangle::__runtime::NodeFactory::createNode(this, v58);
    case 'J':
      if (v9 >= v6) {
        goto LABEL_211;
      }
      int v63 = *(char *)(v10 + v9);
      if (v63 == 79)
      {
        *((void *)this + 9) = v5 + 2;
        return swift::Demangle::__runtime::Demangler::demangleAutoDiffSelfReorderingReabstractionThunk( this,  a2,  a3,  a4,  a5);
      }

      else
      {
        if (v63 == 86)
        {
          *((void *)this + 9) = v5 + 2;
          __int16 v144 = 324;
        }

        else
        {
          if (v63 == 83)
          {
            *((void *)this + 9) = v5 + 2;
            return (int8x16_t *)swift::Demangle::__runtime::Demangler::demangleAutoDiffSubsetParametersThunk( this,  a2,  a3,  a4,  a5);
          }

LABEL_287:
      uint64_t v184 = 0LL;
LABEL_288:
      unint64_t v142 = v7;
      __int16 v143 = 255;
      unint64_t v97 = (unsigned int *)v184;
LABEL_289:
      uint64_t v94 = (swift::Demangle::__runtime::Node *)v89;
      return (int8x16_t *)swift::Demangle::__runtime::Demangler::createWithChildren( v142,  v143,  (swift::Demangle::__runtime::Node *)v97,  v94,  a5);
    case 'W':
      int v91 = *((_DWORD *)this + 24);
      if (v91
        && ((int v92 = v91 - 1,
             unint64_t v89 = *(unsigned __int16 **)(*((void *)this + 11) + 8LL * (v91 - 1)),
             int v93 = v89[8],
             v93 == 232)
         || swift::Demangle::__runtime::isContext(v93)))
      {
        *((_DWORD *)v7 + 24) = v92;
      }

      else
      {
        unint64_t v89 = 0LL;
      }

      unint64_t v97 = swift::Demangle::__runtime::Demangler::popProtocolConformance(v7, a2, a3, a4, a5);
      unint64_t v142 = v7;
      __int16 v143 = 196;
      goto LABEL_289;
    case 'X':
      __int16 v58 = 60;
      return (int8x16_t *)swift::Demangle::__runtime::NodeFactory::createNode(this, v58);
    case 'Z':
    case 'z':
      unint64_t v25 = (char *)swift::Demangle::__runtime::Demangler::demangleIndexAsNode(this);
      int v26 = *((_DWORD *)v7 + 24);
      if (!v26)
      {
        uint64_t v29 = 0LL;
        int v20 = 0LL;
        goto LABEL_228;
      }

      int v27 = v26 - 1;
      uint64_t v28 = *((void *)v7 + 11);
      int v20 = *(swift::Demangle::__runtime::Node **)(v28 + 8LL * (v26 - 1));
      if (*((_WORD *)v20 + 8) == 43)
      {
        *((_DWORD *)v7 + 24) = v27;
        if (v26 == 1)
        {
          uint64_t v29 = 0LL;
          goto LABEL_228;
        }
      }

      else
      {
        int v20 = 0LL;
        int v27 = *((_DWORD *)v7 + 24);
      }

      uint64_t v29 = *(swift::Demangle::__runtime::Node **)(v28 + 8LL * (v27 - 1));
      if (*((_WORD *)v29 + 8) == 232)
      {
        *((_DWORD *)v7 + 24) = v27 - 1;
        if (v27 == 1) {
          goto LABEL_228;
        }
        --v27;
      }

      else
      {
        uint64_t v29 = 0LL;
      }

      unsigned int v145 = v27 - 1;
      unint64_t v146 = *(swift::Demangle::__runtime::Node **)(v28 + 8LL * v145);
      if (*((_WORD *)v146 + 8) == 232)
      {
        *((_DWORD *)v7 + 24) = v145;
        goto LABEL_229;
      }

LABEL_300:
  if (v38)
  {
    int v149 = v38;
LABEL_277:
    operator delete(v149);
  }

  return (int8x16_t *)Node;
}

unsigned int *swift::Demangle::__runtime::Demangler::demangleWitness( swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, char *a5)
{
  unint64_t v6 = *((void *)this + 8);
  unint64_t v5 = *((void *)this + 9);
  if (v5 >= v6) {
    return 0LL;
  }
  unint64_t v7 = this;
  unint64_t v8 = 0LL;
  unint64_t v9 = v5 + 1;
  *((void *)this + 9) = v5 + 1;
  uint64_t v10 = *((void *)this + 7);
  char v11 = *(_BYTE *)(v10 + v5);
  switch(v11)
  {
    case 'C':
      int v41 = *((_DWORD *)this + 24);
      if (!v41) {
        return 0LL;
      }
      int v42 = v41 - 1;
      unint64_t v43 = *(unsigned __int16 **)(*((void *)this + 11) + 8LL * (v41 - 1));
      int v44 = v43[8];
      *((_DWORD *)v7 + 24) = v42;
      unint64_t v8 = (*((void *)v7 + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
      if (!v8 || v8 + 24 > *((void *)v7 + 2))
      {
        unint64_t v45 = 2LL * *((void *)v7 + 4);
        if (v45 <= 0x20) {
          unint64_t v45 = 32LL;
        }
        *((void *)v7 + 4) = v45;
        unint64_t v46 = v45 + 8;
        unsigned int v47 = malloc(v45 + 8);
        unint64_t v48 = (char *)v47 + v46;
        void *v47 = *((void *)v7 + 3);
        unint64_t v8 = ((unint64_t)v47 + 15) & 0xFFFFFFFFFFFFFFF8LL;
        *((void *)v7 + 2) = v48;
        *((void *)v7 + 3) = v47;
      }

      *((void *)v7 + 1) = v8 + 24;
      __int16 v49 = 62;
      goto LABEL_152;
    case 'G':
      int v50 = swift::Demangle::__runtime::Demangler::popProtocolConformance(this, a2, a3, a4, a5);
      if (!v50) {
        return 0LL;
      }
      unint64_t v43 = (unsigned __int16 *)v50;
      unint64_t v8 = (*((void *)v7 + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
      if (!v8 || v8 + 24 > *((void *)v7 + 2))
      {
        unint64_t v51 = 2LL * *((void *)v7 + 4);
        if (v51 <= 0x20) {
          unint64_t v51 = 32LL;
        }
        *((void *)v7 + 4) = v51;
        unint64_t v52 = v51 + 8;
        uint64_t v53 = malloc(v51 + 8);
        unint64_t v54 = (char *)v53 + v52;
        *uint64_t v53 = *((void *)v7 + 3);
        unint64_t v8 = ((unint64_t)v53 + 15) & 0xFFFFFFFFFFFFFFF8LL;
        *((void *)v7 + 2) = v54;
        *((void *)v7 + 3) = v53;
      }

      *((void *)v7 + 1) = v8 + 24;
      __int16 v49 = 88;
      goto LABEL_152;
    case 'I':
      unint64_t v55 = swift::Demangle::__runtime::Demangler::popProtocolConformance(this, a2, a3, a4, a5);
      if (!v55) {
        return 0LL;
      }
      unint64_t v43 = (unsigned __int16 *)v55;
      unint64_t v8 = (*((void *)v7 + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
      if (!v8 || v8 + 24 > *((void *)v7 + 2))
      {
        unint64_t v56 = 2LL * *((void *)v7 + 4);
        if (v56 <= 0x20) {
          unint64_t v56 = 32LL;
        }
        *((void *)v7 + 4) = v56;
        unint64_t v57 = v56 + 8;
        __int16 v58 = malloc(v56 + 8);
        __int16 v59 = (char *)v58 + v57;
        *__int16 v58 = *((void *)v7 + 3);
        unint64_t v8 = ((unint64_t)v58 + 15) & 0xFFFFFFFFFFFFFFF8LL;
        *((void *)v7 + 2) = v59;
        *((void *)v7 + 3) = v58;
      }

      *((void *)v7 + 1) = v8 + 24;
      __int16 v49 = 89;
      goto LABEL_152;
    case 'J':
      return swift::Demangle::__runtime::Demangler::demangleDifferentiabilityWitness(this, a2, a3, a4, a5);
    case 'L':
      unsigned int v61 = swift::Demangle::__runtime::Demangler::popProtocolConformance(this, a2, a3, a4, a5);
      int v64 = *((_DWORD *)v7 + 24);
      if (!v64) {
        return 0LL;
      }
      unsigned int v65 = v64 - 1;
      unint64_t v66 = *(unsigned int **)(*((void *)v7 + 11) + 8LL * v65);
      if (*((_WORD *)v66 + 8) != 232) {
        return 0LL;
      }
      unint64_t v43 = (unsigned __int16 *)v61;
      *((_DWORD *)v7 + 24) = v65;
      if (!v61) {
        return 0LL;
      }
      unint64_t v8 = (*((void *)v7 + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
      if (!v8 || v8 + 24 > *((void *)v7 + 2))
      {
        unint64_t v67 = 2LL * *((void *)v7 + 4);
        if (v67 <= 0x20) {
          unint64_t v67 = 32LL;
        }
        *((void *)v7 + 4) = v67;
        unint64_t v68 = v67 + 8;
        uint64_t v69 = malloc(v67 + 8);
        unint64_t v70 = (char *)v69 + v68;
        void *v69 = *((void *)v7 + 3);
        unint64_t v8 = ((unint64_t)v69 + 15) & 0xFFFFFFFFFFFFFFF8LL;
        *((void *)v7 + 2) = v70;
        *((void *)v7 + 3) = v69;
      }

      *((void *)v7 + 1) = v8 + 24;
      __int16 v71 = 136;
      goto LABEL_192;
    case 'O':
      if (v9 >= v6) {
        return 0LL;
      }
      unint64_t v8 = 0LL;
      *((void *)this + 9) = v5 + 2;
      switch(*(_BYTE *)(v10 + v9))
      {
        case 'C':
          int v72 = *((_DWORD *)this + 24);
          if (!v72) {
            goto LABEL_323;
          }
          int v73 = v72 - 1;
          uint64_t v74 = *((void *)this + 11);
          __int16 v75 = *(unsigned __int16 **)(v74 + 8LL * (v72 - 1));
          int v76 = v75[8];
          if (v76 == 232)
          {
            *((_DWORD *)this + 24) = v73;
          }

          else
          {
            if (v76 == 43)
            {
              *((_DWORD *)this + 24) = v73;
              else {
                *((_DWORD *)this + 24) = v77;
              }
              __int16 v250 = 350;
              return (unsigned int *)swift::Demangle::__runtime::Demangler::createWithChildren( this,  v250,  (swift::Demangle::__runtime::Node *)v78,  (swift::Demangle::__runtime::Node *)v75,  a5);
            }

LABEL_323:
            __int16 v75 = 0LL;
          }

          __int16 v249 = 350;
          return (unsigned int *)swift::Demangle::__runtime::Demangler::createWithChild( this,  v249,  (swift::Demangle::__runtime::Node *)v75,  (uint64_t)v75,  a5);
        case 'D':
          int v174 = *((_DWORD *)this + 24);
          if (!v174) {
            goto LABEL_324;
          }
          int v175 = v174 - 1;
          uint64_t v176 = *((void *)this + 11);
          __int16 v75 = *(unsigned __int16 **)(v176 + 8LL * (v174 - 1));
          int v177 = v75[8];
          if (v177 == 232)
          {
            *((_DWORD *)this + 24) = v175;
          }

          else
          {
            if (v177 == 43)
            {
              *((_DWORD *)this + 24) = v175;
              else {
                *((_DWORD *)this + 24) = v178;
              }
              __int16 v250 = 351;
              return (unsigned int *)swift::Demangle::__runtime::Demangler::createWithChildren( this,  v250,  (swift::Demangle::__runtime::Node *)v78,  (swift::Demangle::__runtime::Node *)v75,  a5);
            }

LABEL_324:
            __int16 v75 = 0LL;
          }

          __int16 v249 = 351;
          return (unsigned int *)swift::Demangle::__runtime::Demangler::createWithChild( this,  v249,  (swift::Demangle::__runtime::Node *)v75,  (uint64_t)v75,  a5);
        case 'F':
          int v179 = *((_DWORD *)this + 24);
          if (!v179) {
            goto LABEL_325;
          }
          int v180 = v179 - 1;
          uint64_t v181 = *((void *)this + 11);
          __int16 v75 = *(unsigned __int16 **)(v181 + 8LL * (v179 - 1));
          int v182 = v75[8];
          if (v182 == 232)
          {
            *((_DWORD *)this + 24) = v180;
          }

          else
          {
            if (v182 == 43)
            {
              *((_DWORD *)this + 24) = v180;
              else {
                *((_DWORD *)this + 24) = v183;
              }
              __int16 v250 = 352;
              return (unsigned int *)swift::Demangle::__runtime::Demangler::createWithChildren( this,  v250,  (swift::Demangle::__runtime::Node *)v78,  (swift::Demangle::__runtime::Node *)v75,  a5);
            }

LABEL_328:
            __int16 v75 = 0LL;
          }

          __int16 v249 = 283;
          return (unsigned int *)swift::Demangle::__runtime::Demangler::createWithChild( this,  v249,  (swift::Demangle::__runtime::Node *)v75,  (uint64_t)v75,  a5);
        case 'd':
          int v199 = *((_DWORD *)this + 24);
          if (!v199) {
            goto LABEL_329;
          }
          int v200 = v199 - 1;
          uint64_t v201 = *((void *)this + 11);
          __int16 v75 = *(unsigned __int16 **)(v201 + 8LL * (v199 - 1));
          int v202 = v75[8];
          if (v202 == 232)
          {
            *((_DWORD *)this + 24) = v200;
          }

          else
          {
            if (v202 == 43)
            {
              *((_DWORD *)this + 24) = v200;
              else {
                *((_DWORD *)this + 24) = v203;
              }
              __int16 v250 = 284;
              return (unsigned int *)swift::Demangle::__runtime::Demangler::createWithChildren( this,  v250,  (swift::Demangle::__runtime::Node *)v78,  (swift::Demangle::__runtime::Node *)v75,  a5);
            }

LABEL_329:
            __int16 v75 = 0LL;
          }

          __int16 v249 = 284;
          return (unsigned int *)swift::Demangle::__runtime::Demangler::createWithChild( this,  v249,  (swift::Demangle::__runtime::Node *)v75,  (uint64_t)v75,  a5);
        case 'e':
          int v204 = *((_DWORD *)this + 24);
          if (!v204) {
            goto LABEL_330;
          }
          int v205 = v204 - 1;
          uint64_t v206 = *((void *)this + 11);
          __int16 v75 = *(unsigned __int16 **)(v206 + 8LL * (v204 - 1));
          int v207 = v75[8];
          if (v207 == 232)
          {
            *((_DWORD *)this + 24) = v205;
          }

          else
          {
            if (v207 == 43)
            {
              *((_DWORD *)this + 24) = v205;
              else {
                *((_DWORD *)this + 24) = v208;
              }
              __int16 v250 = 279;
              return (unsigned int *)swift::Demangle::__runtime::Demangler::createWithChildren( this,  v250,  (swift::Demangle::__runtime::Node *)v78,  (swift::Demangle::__runtime::Node *)v75,  a5);
            }

LABEL_330:
            __int16 v75 = 0LL;
          }

          __int16 v249 = 279;
          return (unsigned int *)swift::Demangle::__runtime::Demangler::createWithChild( this,  v249,  (swift::Demangle::__runtime::Node *)v75,  (uint64_t)v75,  a5);
        case 'f':
          int v209 = *((_DWORD *)this + 24);
          if (!v209) {
            goto LABEL_331;
          }
          int v210 = v209 - 1;
          uint64_t v211 = *((void *)this + 11);
          __int16 v75 = *(unsigned __int16 **)(v211 + 8LL * (v209 - 1));
          int v212 = v75[8];
          if (v212 == 232)
          {
            *((_DWORD *)this + 24) = v210;
          }

          else
          {
            if (v212 == 43)
            {
              *((_DWORD *)this + 24) = v210;
              else {
                *((_DWORD *)this + 24) = v213;
              }
              __int16 v250 = 285;
              return (unsigned int *)swift::Demangle::__runtime::Demangler::createWithChildren( this,  v250,  (swift::Demangle::__runtime::Node *)v78,  (swift::Demangle::__runtime::Node *)v75,  a5);
            }

LABEL_337:
            __int16 v75 = 0LL;
          }

          __int16 v249 = 281;
          return (unsigned int *)swift::Demangle::__runtime::Demangler::createWithChild( this,  v249,  (swift::Demangle::__runtime::Node *)v75,  (uint64_t)v75,  a5);
        case 'y':
          int v244 = *((_DWORD *)this + 24);
          if (!v244) {
            goto LABEL_338;
          }
          int v245 = v244 - 1;
          uint64_t v246 = *((void *)this + 11);
          __int16 v75 = *(unsigned __int16 **)(v246 + 8LL * (v244 - 1));
          int v247 = v75[8];
          if (v247 == 232)
          {
            *((_DWORD *)this + 24) = v245;
          }

          else
          {
            if (v247 == 43)
            {
              *((_DWORD *)this + 24) = v245;
              else {
                *((_DWORD *)this + 24) = v248;
              }
              __int16 v250 = 278;
              return (unsigned int *)swift::Demangle::__runtime::Demangler::createWithChildren( this,  v250,  (swift::Demangle::__runtime::Node *)v78,  (swift::Demangle::__runtime::Node *)v75,  a5);
            }

int8x16_t *swift::Demangle::__runtime::Demangler::demangleSpecialType( swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v6 = *((void *)this + 8);
  unint64_t v5 = *((void *)this + 9);
  if (v5 < v6)
  {
    unint64_t v8 = 0LL;
    unint64_t v9 = v5 + 1;
    *((void *)this + 9) = v5 + 1;
    uint64_t v10 = *((void *)this + 7);
    int v11 = *(unsigned __int8 *)(v10 + v5);
    switch(*(_BYTE *)(v10 + v5))
    {
      case 'A':
        __int16 v18 = 64;
        goto LABEL_75;
      case 'B':
        __int16 v18 = 165;
        goto LABEL_75;
      case 'C':
        __int16 v18 = 22;
        goto LABEL_75;
      case 'D':
        int v19 = *((_DWORD *)this + 24);
        if (!v19) {
          return 0LL;
        }
        unsigned int v20 = v19 - 1;
        unint64_t v8 = *(void *)(*((void *)this + 11) + 8LL * v20);
        if (*(_WORD *)(v8 + 16) != 232) {
          return 0LL;
        }
        *((_DWORD *)this + 24) = v20;
        unint64_t v21 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
        if (!v21 || v21 + 24 > *((void *)this + 2))
        {
          unint64_t v22 = 2LL * *((void *)this + 4);
          if (v22 <= 0x20) {
            unint64_t v22 = 32LL;
          }
          *((void *)this + 4) = v22;
          unint64_t v23 = v22 + 8;
          unint64_t v24 = malloc(v22 + 8);
          BOOL v25 = (char *)v24 + v23;
          *unint64_t v24 = *((void *)this + 3);
          unint64_t v21 = ((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8LL;
          *((void *)this + 2) = v25;
          *((void *)this + 3) = v24;
        }

        *((void *)this + 1) = v21 + 24;
        __int16 v26 = 57;
        goto LABEL_127;
      case 'E':
        __int16 v18 = 65;
        goto LABEL_75;
      case 'G':
      case 'g':
        return (int8x16_t *)swift::Demangle::__runtime::Demangler::demangleExtendedExistentialShape( this,  (char)v11,  a3,  a4,  a5);
      case 'K':
        __int16 v18 = 11;
        goto LABEL_75;
      case 'L':
        __int16 v18 = 166;
        goto LABEL_75;
      case 'M':
        unint64_t v27 = swift::Demangle::__runtime::Demangler::demangleMetatypeRepresentation(this);
        int v30 = *((_DWORD *)this + 24);
        if (!v30) {
          return 0LL;
        }
        unsigned int v31 = v30 - 1;
        unint64_t v32 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8LL * v31);
        if (*((_WORD *)v32 + 8) != 232) {
          return 0LL;
        }
        unint64_t v8 = v27;
        *((_DWORD *)this + 24) = v31;
        if (!v27) {
          return (int8x16_t *)v8;
        }
        unint64_t v21 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
        if (!v21 || v21 + 24 > *((void *)this + 2))
        {
          unint64_t v33 = 2LL * *((void *)this + 4);
          if (v33 <= 0x20) {
            unint64_t v33 = 32LL;
          }
          *((void *)this + 4) = v33;
          unint64_t v34 = v33 + 8;
          uint64_t v35 = malloc(v33 + 8);
          uint64_t v36 = (char *)v35 + v34;
          void *v35 = *((void *)this + 3);
          unint64_t v21 = ((unint64_t)v35 + 15) & 0xFFFFFFFFFFFFFFF8LL;
          *((void *)this + 2) = v36;
          *((void *)this + 3) = v35;
        }

        *((void *)this + 1) = v21 + 24;
        __int16 v37 = 145;
        goto LABEL_94;
      case 'P':
        uint64_t v38 = swift::Demangle::__runtime::Demangler::demangleConstrainedExistentialRequirementList(this, a2, a3, a4, a5);
        int v41 = *((_DWORD *)this + 24);
        if (!v41) {
          return 0LL;
        }
        unsigned int v42 = v41 - 1;
        unint64_t v43 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8LL * v42);
        if (*((_WORD *)v43 + 8) != 232) {
          return 0LL;
        }
        unint64_t v8 = (unint64_t)v38;
        *((_DWORD *)this + 24) = v42;
        if (!v38) {
          return (int8x16_t *)v8;
        }
        unint64_t v21 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
        if (!v21 || v21 + 24 > *((void *)this + 2))
        {
          unint64_t v44 = 2LL * *((void *)this + 4);
          if (v44 <= 0x20) {
            unint64_t v44 = 32LL;
          }
          *((void *)this + 4) = v44;
          unint64_t v45 = v44 + 8;
          unint64_t v46 = malloc(v44 + 8);
          unsigned int v47 = (char *)v46 + v45;
          *unint64_t v46 = *((void *)this + 3);
          unint64_t v21 = ((unint64_t)v46 + 15) & 0xFFFFFFFFFFFFFFF8LL;
          *((void *)this + 2) = v47;
          *((void *)this + 3) = v46;
        }

        *((void *)this + 1) = v21 + 24;
        *(_WORD *)(v21 + 16) = 83;
        *(_BYTE *)(v21 + 18) = 0;
        swift::Demangle::__runtime::Node::addChild((unsigned int *)v21, v43, this, v39, v40);
        goto LABEL_128;
      case 'S':
        if (v9 >= v6) {
          return 0LL;
        }
        unint64_t v8 = 0LL;
        *((void *)this + 9) = v5 + 2;
        int v48 = *(char *)(v10 + v9);
        if (v48 > 111)
        {
          if (v48 == 112)
          {
            int v186 = *((_DWORD *)this + 24);
            if (v186
              && (unsigned int v187 = v186 - 1,
                  unint64_t v51 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8LL * v187),
                  *((_WORD *)v51 + 8) == 232))
            {
              *((_DWORD *)this + 24) = v187;
            }

            else
            {
              unint64_t v51 = 0LL;
            }

            __int16 v188 = 298;
          }

          else
          {
            if (v48 != 113) {
              return (int8x16_t *)v8;
            }
            int v147 = *((_DWORD *)this + 24);
            if (v147
              && (unsigned int v148 = v147 - 1,
                  unint64_t v51 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8LL * v148),
                  *((_WORD *)v51 + 8) == 232))
            {
              *((_DWORD *)this + 24) = v148;
            }

            else
            {
              unint64_t v51 = 0LL;
            }

            __int16 v188 = 295;
          }

          goto LABEL_249;
        }

        if (v48 != 68)
        {
          if (v48 != 97) {
            return (int8x16_t *)v8;
          }
          int v49 = *((_DWORD *)this + 24);
          if (v49
            && (unsigned int v50 = v49 - 1,
                unint64_t v51 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8LL * v50),
                *((_WORD *)v51 + 8) == 232))
          {
            *((_DWORD *)this + 24) = v50;
          }

          else
          {
            unint64_t v51 = 0LL;
          }

          __int16 v188 = 296;
LABEL_249:
          int v189 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::createWithChild( this,  v188,  v51,  a4,  a5);
          return (int8x16_t *)swift::Demangle::__runtime::Demangler::createType(this, v189, v190, v191, v192);
        }

        int v182 = *((_DWORD *)this + 24);
        if (v182)
        {
          int v183 = v182 - 1;
          uint64_t v184 = *((void *)this + 11);
          int v185 = *(swift::Demangle::__runtime::Node **)(v184 + 8LL * (v182 - 1));
          if (*((_WORD *)v185 + 8) == 232)
          {
            *((_DWORD *)this + 24) = v183;
            if (v182 == 1) {
              goto LABEL_254;
            }
          }

          else
          {
            int v185 = 0LL;
            int v183 = *((_DWORD *)this + 24);
          }

          unsigned int v193 = v183 - 1;
          int v194 = *(swift::Demangle::__runtime::Node **)(v184 + 8LL * v193);
          if (*((_WORD *)v194 + 8) == 232)
          {
            *((_DWORD *)this + 24) = v193;
            goto LABEL_255;
          }
        }

        else
        {
          int v185 = 0LL;
        }

unint64_t swift::Demangle::__runtime::Demangler::popFunctionType( swift::Demangle::__runtime::NodeFactory *a1, __int16 a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5 = a3;
  unint64_t v8 = (*((void *)a1 + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
  if (!v8 || v8 + 24 > *((void *)a1 + 2))
  {
    unint64_t v9 = 2LL * *((void *)a1 + 4);
    if (v9 <= 0x20) {
      unint64_t v9 = 32LL;
    }
    *((void *)a1 + 4) = v9;
    unint64_t v10 = v9 + 8;
    int v11 = malloc(v9 + 8);
    unint64_t v12 = (char *)v11 + v10;
    *int v11 = *((void *)a1 + 3);
    unint64_t v8 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    *((void *)a1 + 2) = v12;
    *((void *)a1 + 3) = v11;
  }

  *((void *)a1 + 1) = v8 + 24;
  *(_WORD *)(v8 + 16) = a2;
  *(_BYTE *)(v8 + 18) = 0;
  if (v5)
  {
    int v13 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleClangType(a1);
    if (v13) {
      swift::Demangle::__runtime::Node::addChild((unsigned int *)v8, v13, a1, a4, a5);
    }
  }

  int v14 = *((_DWORD *)a1 + 24);
  if (v14)
  {
    int v15 = *(swift::Demangle::__runtime::Node **)(*((void *)a1 + 11) + 8LL * (v14 - 1));
    if (*((_WORD *)v15 + 8) != 349
      || (*((_DWORD *)a1 + 24) = v14 - 1,
          swift::Demangle::__runtime::Node::addChild((unsigned int *)v8, v15, a1, a4, a5),
          (int v14 = *((_DWORD *)a1 + 24)) != 0))
    {
      unsigned int v16 = *(swift::Demangle::__runtime::Node **)(*((void *)a1 + 11) + 8LL * (v14 - 1));
      if (*((_WORD *)v16 + 8) != 67
        || (*((_DWORD *)a1 + 24) = v14 - 1,
            swift::Demangle::__runtime::Node::addChild((unsigned int *)v8, v16, a1, a4, a5),
            (int v14 = *((_DWORD *)a1 + 24)) != 0))
      {
        char v17 = *(swift::Demangle::__runtime::Node **)(*((void *)a1 + 11) + 8LL * (v14 - 1));
        if (*((_WORD *)v17 + 8) != 129
          || (*((_DWORD *)a1 + 24) = v14 - 1,
              swift::Demangle::__runtime::Node::addChild((unsigned int *)v8, v17, a1, a4, a5),
              (int v14 = *((_DWORD *)a1 + 24)) != 0))
        {
          __int16 v18 = *(swift::Demangle::__runtime::Node **)(*((void *)a1 + 11) + 8LL * (v14 - 1));
          if (*((_WORD *)v18 + 8) != 130
            || (*((_DWORD *)a1 + 24) = v14 - 1,
                swift::Demangle::__runtime::Node::addChild((unsigned int *)v8, v18, a1, a4, a5),
                (int v14 = *((_DWORD *)a1 + 24)) != 0))
          {
            int v19 = *(swift::Demangle::__runtime::Node **)(*((void *)a1 + 11) + 8LL * (v14 - 1));
            if (*((_WORD *)v19 + 8) != 68
              || (*((_DWORD *)a1 + 24) = v14 - 1,
                  swift::Demangle::__runtime::Node::addChild((unsigned int *)v8, v19, a1, a4, a5),
                  (int v14 = *((_DWORD *)a1 + 24)) != 0))
            {
              unsigned int v20 = *(swift::Demangle::__runtime::Node **)(*((void *)a1 + 11) + 8LL * (v14 - 1));
              if ((*((_WORD *)v20 + 8) & 0xFFFE) != 0x110
                || (*((_DWORD *)a1 + 24) = v14 - 1,
                    swift::Demangle::__runtime::Node::addChild((unsigned int *)v8, v20, a1, a4, a5),
                    (int v14 = *((_DWORD *)a1 + 24)) != 0))
              {
                unint64_t v21 = *(swift::Demangle::__runtime::Node **)(*((void *)a1 + 11) + 8LL * (v14 - 1));
                if (*((_WORD *)v21 + 8) != 66
                  || (*((_DWORD *)a1 + 24) = v14 - 1,
                      swift::Demangle::__runtime::Node::addChild((unsigned int *)v8, v21, a1, a4, a5),
                      (int v14 = *((_DWORD *)a1 + 24)) != 0))
                {
                  unsigned int v22 = v14 - 1;
                  unint64_t v23 = *(swift::Demangle::__runtime::Node **)(*((void *)a1 + 11) + 8LL * v22);
                  if (*((_WORD *)v23 + 8) == 271)
                  {
                    *((_DWORD *)a1 + 24) = v22;
                    swift::Demangle::__runtime::Node::addChild((unsigned int *)v8, v23, a1, a4, a5);
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  unint64_t v24 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::popFunctionParams(a1, 3, a3, a4, a5);
  if (v24) {
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v8, v24, a1, v26, v27);
  }
  else {
    unint64_t v8 = 0LL;
  }
  uint64_t v28 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::popFunctionParams( a1,  207,  v25,  v26,  v27);
  unint64_t v31 = 0LL;
  if (v8 && v28)
  {
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v8, v28, a1, v29, v30);
    unint64_t v31 = (*((void *)a1 + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
    if (!v31 || v31 + 24 > *((void *)a1 + 2))
    {
      unint64_t v34 = 2LL * *((void *)a1 + 4);
      if (v34 <= 0x20) {
        unint64_t v34 = 32LL;
      }
      *((void *)a1 + 4) = v34;
      unint64_t v35 = v34 + 8;
      uint64_t v36 = malloc(v34 + 8);
      __int16 v37 = (char *)v36 + v35;
      *uint64_t v36 = *((void *)a1 + 3);
      unint64_t v31 = ((unint64_t)v36 + 15) & 0xFFFFFFFFFFFFFFF8LL;
      *((void *)a1 + 2) = v37;
      *((void *)a1 + 3) = v36;
    }

    *((void *)a1 + 1) = v31 + 24;
    *(_WORD *)(v31 + 16) = 232;
    *(_BYTE *)(v31 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild( (unsigned int *)v31,  (swift::Demangle::__runtime::Node *)v8,  a1,  v32,  v33);
  }

  return v31;
}

swift::Demangle::__runtime::Node *swift::Demangle::__runtime::Demangler::demangleFunctionEntity( swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v5 = *((void *)this + 9);
  if (v5 < *((void *)this + 8))
  {
    unint64_t v7 = 0LL;
    *((void *)this + 9) = v5 + 1;
    int v8 = *(char *)(*((void *)this + 7) + v5) - 65;
    __int16 v9 = 0;
    int v10 = 0;
    __int16 v11 = 70;
    __int16 v12 = 31;
    int v13 = 0LL;
    int v14 = 0LL;
    switch(v8)
    {
      case 0:
        unint64_t v7 = swift::Demangle::__runtime::Demangler::demangleIndexAsNode(this);
        int v13 = 0LL;
        int v14 = 0LL;
        int v10 = 3;
        __int16 v12 = 33;
        goto LABEL_31;
      case 2:
        goto LABEL_9;
      case 3:
        goto LABEL_31;
      case 4:
        int v10 = 0;
        unint64_t v7 = 0LL;
        int v13 = 0LL;
        int v14 = 0LL;
        __int16 v12 = 104;
        goto LABEL_31;
      case 12:
        return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleMacroExpansion( this,  a2,  a3,  a4,  a5);
      case 15:
        int v10 = 0;
        unint64_t v7 = 0LL;
        int v13 = 0LL;
        int v14 = 0LL;
        __int16 v12 = 178;
        goto LABEL_31;
      case 20:
        goto LABEL_20;
      case 22:
        int v10 = 0;
        unint64_t v7 = 0LL;
        int v13 = 0LL;
        int v14 = 0LL;
        __int16 v12 = 179;
        goto LABEL_31;
      case 34:
        __int16 v9 = 29;
LABEL_9:
        __int16 v12 = v9;
        int v16 = *((_DWORD *)this + 24);
        if (v16)
        {
          int v17 = v16 - 1;
          uint64_t v18 = *((void *)this + 11);
          unint64_t v7 = *(void *)(v18 + 8LL * (v16 - 1));
          if (*(_WORD *)(v7 + 16) == 176)
          {
            *((_DWORD *)this + 24) = v17;
            if (v16 == 1) {
              goto LABEL_29;
            }
          }

          else
          {
            unint64_t v7 = 0LL;
            int v17 = *((_DWORD *)this + 24);
          }

          unsigned int v22 = v17 - 1;
          int v13 = *(swift::Demangle::__runtime::Node **)(v18 + 8LL * v22);
          if (*((_WORD *)v13 + 8) == 232)
          {
            *((_DWORD *)this + 24) = v22;
            goto LABEL_30;
          }
        }

        else
        {
          unint64_t v7 = 0LL;
        }

unint64_t swift::Demangle::__runtime::Demangler::demangleRetroactiveConformance( swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2 = swift::Demangle::__runtime::Demangler::demangleIndexAsNode(this);
  int v5 = *((_DWORD *)this + 24);
  if (!v5) {
    return 0LL;
  }
  unsigned int v6 = v5 - 1;
  unint64_t v7 = *(unsigned __int16 **)(*((void *)this + 11) + 8LL * v6);
  unsigned int v8 = v7[8];
  BOOL v9 = v8 > 0x31;
  uint64_t v10 = (1LL << v8) & 0x380000C000000LL;
  if (v9 || v10 == 0) {
    return 0LL;
  }
  __int16 v12 = (swift::Demangle::__runtime::Node *)v2;
  *((_DWORD *)this + 24) = v6;
  if (!v2) {
    return 0LL;
  }
  unint64_t v13 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
  if (!v13 || v13 + 24 > *((void *)this + 2))
  {
    unint64_t v14 = 2LL * *((void *)this + 4);
    if (v14 <= 0x20) {
      unint64_t v14 = 32LL;
    }
    *((void *)this + 4) = v14;
    unint64_t v15 = v14 + 8;
    int v16 = malloc(v14 + 8);
    int v17 = (char *)v16 + v15;
    *int v16 = *((void *)this + 3);
    unint64_t v13 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    *((void *)this + 2) = v17;
    *((void *)this + 3) = v16;
  }

  *((void *)this + 1) = v13 + 24;
  *(_WORD *)(v13 + 16) = 206;
  *(_BYTE *)(v13 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((unsigned int *)v13, v12, this, v3, v4);
  swift::Demangle::__runtime::Node::addChild( (unsigned int *)v13,  (swift::Demangle::__runtime::Node *)v7,  this,  v18,  v19);
  return v13;
}

swift::Demangle::__runtime::Node *swift::Demangle::__runtime::Demangler::demangleSubscript( swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v6 = *((_DWORD *)this + 24);
  if (v6)
  {
    int v7 = v6 - 1;
    uint64_t v8 = *((void *)this + 11);
    BOOL v9 = *(swift::Demangle::__runtime::Node **)(v8 + 8LL * (v6 - 1));
    if (*((_WORD *)v9 + 8) == 176)
    {
      *((_DWORD *)this + 24) = v7;
      if (v6 == 1) {
        goto LABEL_9;
      }
    }

    else
    {
      BOOL v9 = 0LL;
      int v7 = *((_DWORD *)this + 24);
    }

    unsigned int v10 = v7 - 1;
    __int16 v11 = *(swift::Demangle::__runtime::Node **)(v8 + 8LL * v10);
    if (*((_WORD *)v11 + 8) == 232)
    {
      *((_DWORD *)this + 24) = v10;
      goto LABEL_10;
    }
  }

  else
  {
    BOOL v9 = 0LL;
  }

int8x16_t *swift::Demangle::__runtime::Demangler::demangleGenericSignature( swift::Demangle::__runtime::Demangler *this, int a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v7 = (int8x16_t *)((*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL);
  if (!v7 || (unint64_t v8 = *((void *)this + 2), (unint64_t)&v7[1].u64[1] > v8))
  {
    unint64_t v9 = 2LL * *((void *)this + 4);
    if (v9 <= 0x20) {
      unint64_t v9 = 32LL;
    }
    *((void *)this + 4) = v9;
    unint64_t v10 = v9 + 8;
    __int16 v11 = malloc(v9 + 8);
    unint64_t v8 = (unint64_t)v11 + v10;
    *__int16 v11 = *((void *)this + 3);
    int v7 = (int8x16_t *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8LL);
    *((void *)this + 2) = v8;
    *((void *)this + 3) = v11;
  }

  *((void *)this + 1) = (char *)v7 + 24;
  v7[1].i16[0] = 43;
  v7[1].i8[2] = 0;
  if (!a2)
  {
    unint64_t v25 = ((unint64_t)&v7[1].u64[1] + 7) & 0xFFFFFFFFFFFFFFF8LL;
    if (v25) {
      BOOL v26 = v25 + 24 > v8;
    }
    else {
      BOOL v26 = 1;
    }
    if (v26)
    {
      unint64_t v27 = 2LL * *((void *)this + 4);
      if (v27 <= 0x20) {
        unint64_t v27 = 32LL;
      }
      *((void *)this + 4) = v27;
      unint64_t v28 = v27 + 8;
      unint64_t v29 = malloc(v27 + 8);
      *unint64_t v29 = *((void *)this + 3);
      unint64_t v25 = ((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8LL;
      *((void *)this + 2) = (char *)v29 + v28;
      *((void *)this + 3) = v29;
    }

    *((void *)this + 1) = v25 + 24;
    *(_WORD *)(v25 + 16) = 37;
    *(_BYTE *)(v25 + 18) = 4;
    *(void *)unint64_t v25 = 1LL;
    swift::Demangle::__runtime::Node::addChild( (unsigned int *)v7,  (swift::Demangle::__runtime::Node *)v25,  this,  a4,  a5);
LABEL_39:
    uint64_t v30 = v7[1].u8[2];
    uint64_t v31 = v30;
    if ((_DWORD)v30 != 1)
    {
      if ((_DWORD)v30 != 5)
      {
        if ((_DWORD)v30 == 2)
        {
          uint64_t v31 = 2LL;
          int v32 = *((_DWORD *)this + 24);
          if (!v32) {
            goto LABEL_49;
          }
        }

        else
        {
          uint64_t v31 = 0LL;
          int v32 = *((_DWORD *)this + 24);
          if (!v32) {
            goto LABEL_49;
          }
        }

        goto LABEL_54;
      }

      uint64_t v31 = v7->u32[2];
    }

    int v32 = *((_DWORD *)this + 24);
    if (!v32)
    {
LABEL_49:
      if ((_DWORD)v30 != 5) {
        goto LABEL_50;
      }
      goto LABEL_58;
    }

    do
    {
LABEL_54:
      int v33 = v32 - 1;
      unint64_t v34 = *(unsigned __int16 **)(*((void *)this + 11) + 8LL * (v32 - 1));
      int v35 = v34[8];
      *((_DWORD *)this + 24) = v33;
      swift::Demangle::__runtime::Node::addChild( (unsigned int *)v7,  (swift::Demangle::__runtime::Node *)v34,  this,  a4,  a5);
      int v32 = *((_DWORD *)this + 24);
    }

    while (v32);
    LODWORD(v30) = v7[1].u8[2];
    if ((_DWORD)v30 != 5)
    {
LABEL_50:
      if ((_DWORD)v30 == 2 && !v31) {
        *int v7 = vextq_s8(*v7, *v7, 8uLL);
      }
      return v7;
    }

unint64_t swift::Demangle::__runtime::Demangler::demangleOperatorIdentifier( swift::Demangle::__runtime::Demangler *this)
{
  int v1 = *((_DWORD *)this + 24);
  if (!v1) {
    return 0LL;
  }
  int v3 = v1 - 1;
  int v4 = *(uint64_t **)(*((void *)this + 11) + 8LL * (v1 - 1));
  if (*((_WORD *)v4 + 8) != 101) {
    return 0LL;
  }
  *((_DWORD *)this + 24) = v3;
  uint64_t v5 = v4[1];
  if (!v5)
  {
    uint64_t v21 = 0LL;
    int v7 = 0LL;
    goto LABEL_29;
  }

  uint64_t v6 = 0LL;
  int v7 = 0LL;
  unsigned int v8 = 0;
  uint64_t v9 = *v4;
  uint64_t v41 = *v4;
  do
  {
    uint64_t v10 = *(char *)(v9 + v6);
    if ((v10 & 0x8000000000000000LL) == 0)
    {
      LOBYTE(v10) = swift::Demangle::__runtime::Demangler::demangleOperatorIdentifier(void)::op_char_table[v10 - 97];
    }

    if (v6 >= v8)
    {
      __int16 v11 = &v7[v8];
      unint64_t v12 = (char *)*((void *)this + 1);
      if (v11 == v12)
      {
        uint64_t v14 = v11 + 1;
        unint64_t v13 = *((void *)this + 2);
        if ((unint64_t)v14 <= v13)
        {
          *((void *)this + 1) = v14;
          LODWORD(v15) = 1;
LABEL_6:
          v8 += v15;
          goto LABEL_7;
        }
      }

      else
      {
        unint64_t v13 = *((void *)this + 2);
      }

      if (2 * v8 <= 4) {
        uint64_t v15 = 4LL;
      }
      else {
        uint64_t v15 = 2 * v8;
      }
      uint64_t v16 = v15 + v8;
      if (!v12 || (unint64_t)&v12[v16] > v13)
      {
        unint64_t v17 = 2LL * *((void *)this + 4);
        if (v17 <= v16 + 1) {
          unint64_t v17 = v16 + 1;
        }
        *((void *)this + 4) = v17;
        unint64_t v18 = v17 + 8;
        unsigned int v19 = malloc(v17 + 8);
        int v20 = (char *)v19 + v18;
        void *v19 = *((void *)this + 3);
        unint64_t v12 = (char *)(v19 + 1);
        *((void *)this + 2) = v20;
        *((void *)this + 3) = v19;
      }

      *((void *)this + 1) = &v12[v16];
      if (v8) {
        memcpy(v12, v7, v8);
      }
      int v7 = v12;
      uint64_t v9 = v41;
      goto LABEL_6;
    }

uint64_t swift::Demangle::__runtime::Demangler::demangleGenericParamIndex( swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v6 = *((void *)this + 8);
  unint64_t v7 = *((void *)this + 9);
  if (v7 >= v6)
  {
LABEL_10:
    unsigned int v9 = -999;
  }

  else
  {
    uint64_t v8 = *((void *)this + 7);
    switch(*(_BYTE *)(v8 + v7))
    {
      case '_':
        *((void *)this + 9) = v7 + 1;
        unsigned int v9 = 1;
        goto LABEL_11;
      case 'd':
        unint64_t v15 = v7 + 1;
        *((void *)this + 9) = v7 + 1;
        if (v7 + 1 >= v6) {
          goto LABEL_29;
        }
        int v16 = *(unsigned __int8 *)(v8 + v15);
        if (v16 == 95)
        {
          unint64_t v15 = v7 + 2;
          *((void *)this + 9) = v7 + 2;
          unsigned int v13 = 1;
          goto LABEL_30;
        }

        int v20 = 0;
        while (2)
        {
          int v21 = *(unsigned __int8 *)(v8 + v15);
          if ((v21 - 48) > 9)
          {
            unsigned int v13 = -999;
            if ((v20 & 0x80000000) == 0 && v15 < v6 && v21 == 95)
            {
              *((void *)this + 9) = ++v15;
              unsigned int v13 = v20 + 2;
            }
          }

          else
          {
            int v22 = v21 + 10 * v20 - 48;
            if (v22 >= v20)
            {
              *((void *)this + 9) = ++v15;
              int v20 = v22;
              if (v6 == v15)
              {
                unsigned int v9 = -1000;
                unsigned int v13 = -999;
                return swift::Demangle::__runtime::Demangler::getDependentGenericParamType(this, v13, v9, a4, a5);
              }

              continue;
            }

unint64_t swift::Demangle::__runtime::Demangler::popTuple( swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v6 = (int8x16_t *)((*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL);
  if (!v6 || (unint64_t)&v6[1].u64[1] > *((void *)this + 2))
  {
    unint64_t v7 = 2LL * *((void *)this + 4);
    if (v7 <= 0x20) {
      unint64_t v7 = 32LL;
    }
    *((void *)this + 4) = v7;
    unint64_t v8 = v7 + 8;
    unsigned int v9 = malloc(v7 + 8);
    int v10 = (char *)v9 + v8;
    *unsigned int v9 = *((void *)this + 3);
    unint64_t v6 = (int8x16_t *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8LL);
    *((void *)this + 2) = v10;
    *((void *)this + 3) = v9;
  }

  *((void *)this + 1) = (char *)v6 + 24;
  v6[1].i16[0] = 223;
  v6[1].i8[2] = 0;
  int v11 = *((_DWORD *)this + 24);
  if (v11 && (unsigned int v12 = v11 - 1, *(_WORD *)(*(void *)(*((void *)this + 11) + 8LL * v12) + 16LL) == 274))
  {
    *((_DWORD *)this + 24) = v12;
  }

  else
  {
    do
    {
      int v18 = *((_DWORD *)this + 24);
      if (v18
        && (uint64_t v19 = *(void *)(*((void *)this + 11) + 8LL * (v18 - 1)), *(_WORD *)(v19 + 16) == 275))
      {
        *((_DWORD *)this + 24) = --v18;
      }

      else
      {
        uint64_t v19 = 0LL;
      }

      unint64_t v20 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
      if (!v20 || v20 + 24 > *((void *)this + 2))
      {
        unint64_t v21 = 2LL * *((void *)this + 4);
        if (v21 <= 0x20) {
          unint64_t v21 = 32LL;
        }
        *((void *)this + 4) = v21;
        unint64_t v22 = v21 + 8;
        int v23 = malloc(v21 + 8);
        int v24 = (char *)v23 + v22;
        *int v23 = *((void *)this + 3);
        unint64_t v20 = ((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8LL;
        *((void *)this + 2) = v24;
        *((void *)this + 3) = v23;
      }

      *((void *)this + 1) = v20 + 24;
      *(_WORD *)(v20 + 16) = 224;
      *(_BYTE *)(v20 + 18) = 0;
      if (!v18) {
        return 0LL;
      }
      int v25 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8LL * (v18 - 1));
      if (*((_WORD *)v25 + 8) == 276)
      {
        *((_DWORD *)this + 24) = v18 - 1;
        swift::Demangle::__runtime::Node::addChild((unsigned int *)v20, v25, this, a4, a5);
        int v18 = *((_DWORD *)this + 24);
        if (!v18) {
          return 0LL;
        }
      }

      int v26 = *(__int128 **)(*((void *)this + 11) + 8LL * (v18 - 1));
      if (*((_WORD *)v26 + 8) == 101)
      {
        *((_DWORD *)this + 24) = v18 - 1;
        __int128 v27 = *v26;
        unint64_t v28 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
        if (!v28 || v28 + 24 > *((void *)this + 2))
        {
          unint64_t v29 = 2LL * *((void *)this + 4);
          if (v29 <= 0x20) {
            unint64_t v29 = 32LL;
          }
          *((void *)this + 4) = v29;
          unint64_t v30 = v29 + 8;
          __int128 v42 = v27;
          uint64_t v31 = malloc(v29 + 8);
          __int128 v27 = v42;
          *uint64_t v31 = *((void *)this + 3);
          unint64_t v28 = ((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8LL;
          *((void *)this + 2) = (char *)v31 + v30;
          *((void *)this + 3) = v31;
        }

        *((void *)this + 1) = v28 + 24;
        *(_WORD *)(v28 + 16) = 225;
        *(_BYTE *)(v28 + 18) = 3;
        *(_OWORD *)unint64_t v28 = v27;
        swift::Demangle::__runtime::Node::addChild( (unsigned int *)v20,  (swift::Demangle::__runtime::Node *)v28,  this,  a4,  a5);
        int v18 = *((_DWORD *)this + 24);
        if (!v18) {
          return 0LL;
        }
      }

      __int16 v32 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8LL * (v18 - 1));
      if (*((_WORD *)v32 + 8) != 232) {
        return 0LL;
      }
      *((_DWORD *)this + 24) = v18 - 1;
      swift::Demangle::__runtime::Node::addChild((unsigned int *)v20, v32, this, a4, a5);
      swift::Demangle::__runtime::Node::addChild( (unsigned int *)v6,  (swift::Demangle::__runtime::Node *)v20,  this,  v33,  v34);
    }

    while (!v19);
    int v35 = v6[1].u8[2];
    if (v35 == 5)
    {
      uint64_t v37 = v6->u32[2];
      if ((_DWORD)v37)
      {
        unint64_t v38 = (void *)(v6->i64[0] + 8 * v37 - 8);
        if ((unint64_t)v38 > v6->i64[0])
        {
          unint64_t v39 = v6->i64[0] + 8;
          do
          {
            uint64_t v40 = *(void *)(v39 - 8);
            *(void *)(v39 - 8) = *v38;
            *v38-- = v40;
            BOOL v41 = v39 >= (unint64_t)v38;
            v39 += 8LL;
          }

          while (!v41);
        }
      }
    }

    else if (v35 == 2)
    {
      *unint64_t v6 = vextq_s8(*v6, *v6, 8uLL);
    }
  }

  unint64_t v13 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
  if (!v13 || v13 + 24 > *((void *)this + 2))
  {
    unint64_t v14 = 2LL * *((void *)this + 4);
    if (v14 <= 0x20) {
      unint64_t v14 = 32LL;
    }
    *((void *)this + 4) = v14;
    unint64_t v15 = v14 + 8;
    int v16 = malloc(v14 + 8);
    unint64_t v17 = (char *)v16 + v15;
    *int v16 = *((void *)this + 3);
    unint64_t v13 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    *((void *)this + 2) = v17;
    *((void *)this + 3) = v16;
  }

  *((void *)this + 1) = v13 + 24;
  *(_WORD *)(v13 + 16) = 232;
  *(_BYTE *)(v13 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((unsigned int *)v13, (swift::Demangle::__runtime::Node *)v6, this, a4, a5);
  return v13;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleGenericType( swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5 = *((_DWORD *)this + 24);
  if (!v5) {
    return 0LL;
  }
  int v7 = v5 - 1;
  uint64_t v8 = *((void *)this + 11);
  unsigned int v9 = *(unsigned __int16 **)(v8 + 8LL * (v5 - 1));
  int v10 = v9[8];
  if (v10 == 232)
  {
    unint64_t v22 = 0LL;
    *((_DWORD *)this + 24) = v7;
    return v22;
  }

  if (v10 != 43) {
    return 0LL;
  }
  *((_DWORD *)this + 24) = v7;
  if (v5 == 1) {
    return 0LL;
  }
  unsigned int v11 = v5 - 2;
  unsigned int v12 = *(swift::Demangle::__runtime::Node **)(v8 + 8LL * v11);
  if (*((_WORD *)v12 + 8) != 232) {
    return 0LL;
  }
  *((_DWORD *)this + 24) = v11;
  unint64_t v13 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
  if (!v13 || v13 + 24 > *((void *)this + 2))
  {
    unint64_t v14 = 2LL * *((void *)this + 4);
    if (v14 <= 0x20) {
      unint64_t v14 = 32LL;
    }
    *((void *)this + 4) = v14;
    unint64_t v15 = v14 + 8;
    int v16 = malloc(v14 + 8);
    unint64_t v17 = (char *)v16 + v15;
    *int v16 = *((void *)this + 3);
    unint64_t v13 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    *((void *)this + 2) = v17;
    *((void *)this + 3) = v16;
  }

  *((void *)this + 1) = v13 + 24;
  *(_WORD *)(v13 + 16) = 44;
  *(_BYTE *)(v13 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((unsigned int *)v13, (swift::Demangle::__runtime::Node *)v9, this, a4, a5);
  swift::Demangle::__runtime::Node::addChild((unsigned int *)v13, v12, this, v18, v19);
  unint64_t v22 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
  if (!v22 || v22 + 24 > *((void *)this + 2))
  {
    unint64_t v23 = 2LL * *((void *)this + 4);
    if (v23 <= 0x20) {
      unint64_t v23 = 32LL;
    }
    *((void *)this + 4) = v23;
    unint64_t v24 = v23 + 8;
    int v25 = malloc(v23 + 8);
    int v26 = (char *)v25 + v24;
    *int v25 = *((void *)this + 3);
    unint64_t v22 = ((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    *((void *)this + 2) = v26;
    *((void *)this + 3) = v25;
  }

  *((void *)this + 1) = v22 + 24;
  *(_WORD *)(v22 + 16) = 232;
  *(_BYTE *)(v22 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild( (unsigned int *)v22,  (swift::Demangle::__runtime::Node *)v13,  this,  v20,  v21);
  return v22;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleValueWitness( swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v7 = *((void *)this + 8);
  unint64_t v6 = *((void *)this + 9);
  if (v6 >= v7)
  {
    char v8 = 0;
  }

  else
  {
    *((void *)this + 9) = v6 + 1;
    char v8 = *(_BYTE *)(*((void *)this + 7) + v6++);
  }

  LOBYTE(v27) = v8;
  if (v6 >= v7)
  {
    char v9 = 0;
  }

  else
  {
    *((void *)this + 9) = v6 + 1;
    char v9 = *(_BYTE *)(*((void *)this + 7) + v6);
  }

  HIBYTE(v27) = v9;
  switch(v27)
  {
    case 0x6C61u:
      uint64_t v10 = 0LL;
      break;
    case 0x6163u:
      uint64_t v10 = 1LL;
      break;
    case 0x6174u:
      uint64_t v10 = 2LL;
      break;
    case 0x6564u:
      uint64_t v10 = 3LL;
      break;
    case 0x7878u:
      uint64_t v10 = 4LL;
      break;
    case 0x5858u:
      uint64_t v10 = 5LL;
      break;
    case 0x7858u:
      uint64_t v10 = 6LL;
      break;
    case 0x5043u:
      uint64_t v10 = 7LL;
      break;
    case 0x7043u:
      uint64_t v10 = 8LL;
      break;
    case 0x7063u:
      uint64_t v10 = 9LL;
      break;
    case 0x6B54u:
      uint64_t v10 = 10LL;
      break;
    case 0x6B74u:
      uint64_t v10 = 11LL;
      break;
    case 0x7270u:
      uint64_t v10 = 12LL;
      break;
    case 0x4B54u:
      uint64_t v10 = 13LL;
      break;
    case 0x6343u:
      uint64_t v10 = 14LL;
      break;
    case 0x7454u:
      uint64_t v10 = 15LL;
      break;
    case 0x5474u:
      uint64_t v10 = 16LL;
      break;
    case 0x7378u:
      uint64_t v10 = 17LL;
      break;
    case 0x6778u:
      uint64_t v10 = 18LL;
      break;
    case 0x6775u:
      uint64_t v10 = 19LL;
      break;
    case 0x7075u:
      uint64_t v10 = 20LL;
      break;
    case 0x6975u:
      uint64_t v10 = 21LL;
      break;
    case 0x7465u:
      uint64_t v10 = 22LL;
      break;
    default:
      if (bswap32(v27) >> 16 != 29556) {
        return 0LL;
      }
      uint64_t v10 = 23LL;
      break;
  }

  unint64_t v11 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
  if (!v11 || (unint64_t v12 = *((void *)this + 2), v11 + 24 > v12))
  {
    unint64_t v13 = 2LL * *((void *)this + 4);
    if (v13 <= 0x20) {
      unint64_t v13 = 32LL;
    }
    *((void *)this + 4) = v13;
    unint64_t v14 = v13 + 8;
    unint64_t v15 = malloc(v13 + 8);
    unint64_t v12 = (unint64_t)v15 + v14;
    *unint64_t v15 = *((void *)this + 3);
    unint64_t v11 = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    *((void *)this + 2) = v12;
    *((void *)this + 3) = v15;
  }

  *(_WORD *)(v11 + 16) = 252;
  *(_BYTE *)(v11 + 18) = 0;
  unint64_t v16 = (v11 + 31) & 0xFFFFFFFFFFFFFFF8LL;
  if (v16) {
    BOOL v17 = v16 + 24 > v12;
  }
  else {
    BOOL v17 = 1;
  }
  if (v17)
  {
    unint64_t v18 = 2LL * *((void *)this + 4);
    if (v18 <= 0x20) {
      unint64_t v18 = 32LL;
    }
    *((void *)this + 4) = v18;
    unint64_t v19 = v18 + 8;
    uint64_t v20 = malloc(v18 + 8);
    *uint64_t v20 = *((void *)this + 3);
    unint64_t v16 = ((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    *((void *)this + 2) = (char *)v20 + v19;
    *((void *)this + 3) = v20;
  }

  *((void *)this + 1) = v16 + 24;
  *(_WORD *)(v16 + 16) = 102;
  *(_BYTE *)(v16 + 18) = 4;
  *(void *)unint64_t v16 = v10;
  swift::Demangle::__runtime::Node::addChild((unsigned int *)v11, (swift::Demangle::__runtime::Node *)v16, this, a4, a5);
  int v23 = *((_DWORD *)this + 24);
  if (!v23) {
    return 0LL;
  }
  unsigned int v24 = v23 - 1;
  int v25 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8LL * v24);
  if (*((_WORD *)v25 + 8) != 232) {
    return 0LL;
  }
  *((_DWORD *)this + 24) = v24;
  swift::Demangle::__runtime::Node::addChild((unsigned int *)v11, v25, this, v21, v22);
  return v11;
}

unint64_t swift::Demangle::__runtime::Demangler::getDependentGenericParamType( swift::Demangle::__runtime::Demangler *this, unsigned int a2, unsigned int a3, uint64_t a4, const char *a5)
{
  if (((a3 | a2) & 0x80000000) != 0) {
    return 0LL;
  }
  unint64_t v8 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
  if (!v8 || (unint64_t v9 = *((void *)this + 2), v8 + 24 > v9))
  {
    unint64_t v10 = 2LL * *((void *)this + 4);
    if (v10 <= 0x20) {
      unint64_t v10 = 32LL;
    }
    *((void *)this + 4) = v10;
    unint64_t v11 = v10 + 8;
    unint64_t v12 = malloc(v10 + 8);
    unint64_t v9 = (unint64_t)v12 + v11;
    *unint64_t v12 = *((void *)this + 3);
    unint64_t v8 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    *((void *)this + 2) = v9;
    *((void *)this + 3) = v12;
  }

  *(_WORD *)(v8 + 16) = 38;
  *(_BYTE *)(v8 + 18) = 0;
  uint64_t v13 = a2;
  unint64_t v14 = (v8 + 31) & 0xFFFFFFFFFFFFFFF8LL;
  if (v14) {
    BOOL v15 = v14 + 24 > v9;
  }
  else {
    BOOL v15 = 1;
  }
  if (v15)
  {
    unint64_t v16 = 2LL * *((void *)this + 4);
    if (v16 <= 0x20) {
      unint64_t v16 = 32LL;
    }
    *((void *)this + 4) = v16;
    unint64_t v17 = v16 + 8;
    unint64_t v18 = malloc(v16 + 8);
    *unint64_t v18 = *((void *)this + 3);
    unint64_t v14 = ((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    *((void *)this + 2) = (char *)v18 + v17;
    *((void *)this + 3) = v18;
  }

  *((void *)this + 1) = v14 + 24;
  *(_WORD *)(v14 + 16) = 102;
  *(_BYTE *)(v14 + 18) = 4;
  *(void *)unint64_t v14 = v13;
  swift::Demangle::__runtime::Node::addChild((unsigned int *)v8, (swift::Demangle::__runtime::Node *)v14, this, a4, a5);
  uint64_t v21 = a3;
  unint64_t v22 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
  if (!v22 || v22 + 24 > *((void *)this + 2))
  {
    unint64_t v23 = 2LL * *((void *)this + 4);
    if (v23 <= 0x20) {
      unint64_t v23 = 32LL;
    }
    *((void *)this + 4) = v23;
    unint64_t v24 = v23 + 8;
    int v25 = malloc(v23 + 8);
    *int v25 = *((void *)this + 3);
    unint64_t v22 = ((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    *((void *)this + 2) = (char *)v25 + v24;
    *((void *)this + 3) = v25;
  }

  *((void *)this + 1) = v22 + 24;
  *(_WORD *)(v22 + 16) = 102;
  *(_BYTE *)(v22 + 18) = 4;
  *(void *)unint64_t v22 = v21;
  swift::Demangle::__runtime::Node::addChild( (unsigned int *)v8,  (swift::Demangle::__runtime::Node *)v22,  this,  v19,  v20);
  return v8;
}

uint64_t swift::Demangle::__runtime::Demangler::demangleIndex(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2 = *((void *)this + 8);
  unint64_t v1 = *((void *)this + 9);
  if (v1 < v2)
  {
    uint64_t v3 = *((void *)this + 7);
    int v4 = *(unsigned __int8 *)(v3 + v1);
    if (v4 == 95)
    {
      *((void *)this + 9) = v1 + 1;
      return 0LL;
    }

    if ((v4 - 48) <= 9)
    {
      int v6 = 0;
      while (1)
      {
        int v7 = *(unsigned __int8 *)(v3 + v1);
        int v8 = v7 + 10 * v6 - 48;
        if (v8 < v6) {
          return 4294966296LL;
        }
        *((void *)this + 9) = ++v1;
        int v6 = v8;
        if (v2 == v1)
        {
          unint64_t v1 = v2;
          int v6 = v8;
          break;
        }
      }

      uint64_t v9 = 4294966296LL;
      if (v6 < 0 || v1 >= v2) {
        return v9;
      }
      if (*(_BYTE *)(v3 + v1) == 95)
      {
        *((void *)this + 9) = v1 + 1;
        return (v6 + 1);
      }
    }
  }

  return 4294966296LL;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleIndexAsNode( swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2 = *((void *)this + 8);
  unint64_t v1 = *((void *)this + 9);
  if (v1 >= v2) {
    return 0LL;
  }
  uint64_t v4 = *((void *)this + 7);
  int v5 = *(unsigned __int8 *)(v4 + v1);
  if (v5 == 95)
  {
    uint64_t v6 = 0LL;
    *((void *)this + 9) = v1 + 1;
    goto LABEL_4;
  }

  int v11 = 0;
  while (1)
  {
    int v12 = *(unsigned __int8 *)(v4 + v1);
    int v13 = v12 + 10 * v11 - 48;
    if (v13 >= v11)
    {
      *((void *)this + 9) = ++v1;
      int v11 = v13;
      if (v2 != v1) {
        continue;
      }
    }

    return 0LL;
  }

  unint64_t result = 0LL;
  if ((v11 & 0x80000000) == 0 && v1 < v2 && v12 == 95)
  {
    *((void *)this + 9) = v1 + 1;
    uint64_t v6 = (v11 + 1);
LABEL_4:
    unint64_t result = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
    if (!result || result + 24 > *((void *)this + 2))
    {
      unint64_t v8 = 2LL * *((void *)this + 4);
      if (v8 <= 0x20) {
        unint64_t v8 = 32LL;
      }
      *((void *)this + 4) = v8;
      unint64_t v9 = v8 + 8;
      unint64_t v10 = malloc(v8 + 8);
      *unint64_t v10 = *((void *)this + 3);
      unint64_t result = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8LL;
      *((void *)this + 2) = (char *)v10 + v9;
      *((void *)this + 3) = v10;
    }

    *((void *)this + 1) = result + 24;
    *(_WORD *)(result + 16) = 161;
    *(_BYTE *)(result + 18) = 4;
    *(void *)unint64_t result = v6;
  }

  return result;
}

unint64_t swift::Demangle::__runtime::Demangler::createSwiftType( swift::Demangle::__runtime::NodeFactory *a1, __int16 a2, const char *a3)
{
  unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(a1, 153, "Swift", 5uLL);
  unint64_t v9 = (*((void *)a1 + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
  if (!v9 || v9 + 24 > *((void *)a1 + 2))
  {
    unint64_t v10 = 2LL * *((void *)a1 + 4);
    if (v10 <= 0x20) {
      unint64_t v10 = 32LL;
    }
    *((void *)a1 + 4) = v10;
    unint64_t v11 = v10 + 8;
    int v12 = malloc(v10 + 8);
    int v13 = (char *)v12 + v11;
    *int v12 = *((void *)a1 + 3);
    unint64_t v9 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    *((void *)a1 + 2) = v13;
    *((void *)a1 + 3) = v12;
  }

  *((void *)a1 + 1) = v9 + 24;
  if (a3) {
    size_t v14 = strlen(a3);
  }
  else {
    size_t v14 = 0LL;
  }
  *(_WORD *)(v9 + 16) = 101;
  *(_BYTE *)(v9 + 18) = 3;
  *(void *)unint64_t v9 = a3;
  *(void *)(v9 + 8) = v14;
  if (!Node) {
    return 0LL;
  }
  unint64_t v15 = (*((void *)a1 + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
  if (!v15 || v15 + 24 > *((void *)a1 + 2))
  {
    unint64_t v16 = 2LL * *((void *)a1 + 4);
    if (v16 <= 0x20) {
      unint64_t v16 = 32LL;
    }
    *((void *)a1 + 4) = v16;
    unint64_t v17 = v16 + 8;
    unint64_t v18 = malloc(v16 + 8);
    uint64_t v19 = (char *)v18 + v17;
    *unint64_t v18 = *((void *)a1 + 3);
    unint64_t v15 = ((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    *((void *)a1 + 2) = v19;
    *((void *)a1 + 3) = v18;
  }

  *((void *)a1 + 1) = v15 + 24;
  *(_WORD *)(v15 + 16) = a2;
  *(_BYTE *)(v15 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((unsigned int *)v15, Node, a1, v6, v7);
  swift::Demangle::__runtime::Node::addChild((unsigned int *)v15, (swift::Demangle::__runtime::Node *)v9, a1, v20, v21);
  unint64_t v24 = (*((void *)a1 + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
  if (!v24 || v24 + 24 > *((void *)a1 + 2))
  {
    unint64_t v25 = 2LL * *((void *)a1 + 4);
    if (v25 <= 0x20) {
      unint64_t v25 = 32LL;
    }
    *((void *)a1 + 4) = v25;
    unint64_t v26 = v25 + 8;
    unsigned __int16 v27 = malloc(v25 + 8);
    unint64_t v28 = (char *)v27 + v26;
    *unsigned __int16 v27 = *((void *)a1 + 3);
    unint64_t v24 = ((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    *((void *)a1 + 2) = v28;
    *((void *)a1 + 3) = v27;
  }

  *((void *)a1 + 1) = v24 + 24;
  *(_WORD *)(v24 + 16) = 232;
  *(_BYTE *)(v24 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((unsigned int *)v24, (swift::Demangle::__runtime::Node *)v15, a1, v22, v23);
  return v24;
}

unint64_t swift::Demangle::__runtime::Demangler::createStandardSubstitution( swift::Demangle::__runtime::Demangler *this, int a2, int a3)
{
  if (a2 == 65 && a3 != 1)
  {
    uint64_t v3 = "AutoreleasingUnsafeMutablePointer";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }

  if (a2 == 97 && (a3 & 1) == 0)
  {
    uint64_t v3 = "Array";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }

  if (a2 == 98 && (a3 & 1) == 0)
  {
    uint64_t v3 = "Bool";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }

  if (a2 == 68 && (a3 & 1) == 0)
  {
    uint64_t v3 = "Dictionary";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }

  if (a2 == 100 && (a3 & 1) == 0)
  {
    uint64_t v3 = "Double";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }

  char v6 = a3;
  if (a2 == 102) {
    char v7 = a3;
  }
  else {
    char v7 = 1;
  }
  if ((v7 & 1) == 0)
  {
    uint64_t v3 = "Float";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }

  if (a2 != 104) {
    char v6 = 1;
  }
  if ((v6 & 1) == 0)
  {
    uint64_t v3 = "Set";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }

  char v8 = a3;
  if (a2 == 73) {
    char v9 = a3;
  }
  else {
    char v9 = 1;
  }
  if ((v9 & 1) == 0)
  {
    uint64_t v3 = "DefaultIndices";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }

  if (a2 != 105) {
    char v8 = 1;
  }
  if ((v8 & 1) == 0)
  {
    uint64_t v3 = "Int";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }

  char v10 = a3;
  if (a2 != 74) {
    char v10 = 1;
  }
  if ((v10 & 1) == 0)
  {
    uint64_t v3 = "Character";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }

  if (a2 == 78 && (a3 & 1) == 0)
  {
    uint64_t v3 = "ClosedRange";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }

  if (a2 == 110 && (a3 & 1) == 0)
  {
    uint64_t v3 = "Range";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }

  if (a2 == 79 && (a3 & 1) == 0)
  {
    uint64_t v3 = "ObjectIdentifier";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }

  char v11 = a3;
  if (a2 != 80) {
    char v11 = 1;
  }
  if ((v11 & 1) == 0)
  {
    uint64_t v3 = "UnsafePointer";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }

  if (a2 == 112 && (a3 & 1) == 0)
  {
    uint64_t v3 = "UnsafeMutablePointer";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }

  if (a2 == 82 && (a3 & 1) == 0)
  {
    uint64_t v3 = "UnsafeBufferPointer";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }

  if (a2 == 114 && (a3 & 1) == 0)
  {
    uint64_t v3 = "UnsafeMutableBufferPointer";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }

  char v12 = a3;
  if (a2 == 83) {
    char v13 = a3;
  }
  else {
    char v13 = 1;
  }
  if ((v13 & 1) == 0)
  {
    uint64_t v3 = "String";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }

  if (a2 != 115) {
    char v12 = 1;
  }
  if ((v12 & 1) == 0)
  {
    uint64_t v3 = "Substring";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }

  if (a2 == 117 && (a3 & 1) == 0)
  {
    uint64_t v3 = "UInt";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }

  if (a2 == 86 && (a3 & 1) == 0)
  {
    uint64_t v3 = "UnsafeRawPointer";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }

  if (a2 == 118 && (a3 & 1) == 0)
  {
    uint64_t v3 = "UnsafeMutableRawPointer";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }

  if (a2 == 87 && (a3 & 1) == 0)
  {
    uint64_t v3 = "UnsafeRawBufferPointer";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }

  if (a2 == 119 && (a3 & 1) == 0)
  {
    uint64_t v3 = "UnsafeMutableRawBufferPointer";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }

  if (a2 == 113 && (a3 & 1) == 0)
  {
    uint64_t v3 = "Optional";
    __int16 v4 = 61;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }

  if (a2 == 66 && (a3 & 1) == 0)
  {
    uint64_t v3 = "BinaryFloatingPoint";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }

  char v14 = a3;
  if (a2 == 69) {
    char v15 = a3;
  }
  else {
    char v15 = 1;
  }
  if ((v15 & 1) == 0)
  {
    uint64_t v3 = "Encodable";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }

  if (a2 != 101) {
    char v14 = 1;
  }
  if ((v14 & 1) == 0)
  {
    uint64_t v3 = "Decodable";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }

  char v16 = a3;
  if (a2 == 70) {
    char v17 = a3;
  }
  else {
    char v17 = 1;
  }
  if ((v17 & 1) == 0)
  {
    uint64_t v3 = "FloatingPoint";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }

  if (a2 != 71) {
    char v16 = 1;
  }
  if ((v16 & 1) == 0)
  {
    uint64_t v3 = "RandomNumberGenerator";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }

  if (a2 == 72 && (a3 & 1) == 0)
  {
    uint64_t v3 = "Hashable";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }

  if (a2 == 106 && (a3 & 1) == 0)
  {
    uint64_t v3 = "Numeric";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }

  if (a2 == 75 && (a3 & 1) == 0)
  {
    uint64_t v3 = "BidirectionalCollection";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }

  if (a2 == 107 && (a3 & 1) == 0)
  {
    uint64_t v3 = "RandomAccessCollection";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }

  if (a2 == 76 && (a3 & 1) == 0)
  {
    uint64_t v3 = "Comparable";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }

  if (a2 == 108 && (a3 & 1) == 0)
  {
    uint64_t v3 = "Collection";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }

  char v18 = a3;
  if (a2 != 77) {
    char v18 = 1;
  }
  if ((v18 & 1) == 0)
  {
    uint64_t v3 = "MutableCollection";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }

  if (a2 == 109 && (a3 & 1) == 0)
  {
    uint64_t v3 = "RangeReplaceableCollection";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }

  if (a2 == 81 && (a3 & 1) == 0)
  {
    uint64_t v3 = "Equatable";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }

  char v19 = a3;
  if (a2 == 84) {
    char v20 = a3;
  }
  else {
    char v20 = 1;
  }
  if ((v20 & 1) == 0)
  {
    uint64_t v3 = "Sequence";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }

  if (a2 != 116) {
    char v19 = 1;
  }
  if ((v19 & 1) == 0)
  {
    uint64_t v3 = "IteratorProtocol";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }

  if (a2 == 85 && (a3 & 1) == 0)
  {
    uint64_t v3 = "UnsignedInteger";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }

  if (a2 == 88 && (a3 & 1) == 0)
  {
    uint64_t v3 = "RangeExpression";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }

  if (a2 == 120 && (a3 & 1) == 0)
  {
    uint64_t v3 = "Strideable";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }

  if (a2 == 89 && (a3 & 1) == 0)
  {
    uint64_t v3 = "RawRepresentable";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }

  if (a2 == 121 && (a3 & 1) == 0)
  {
    uint64_t v3 = "StringProtocol";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }

  if (a2 == 90 && (a3 & 1) == 0)
  {
    uint64_t v3 = "SignedInteger";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }

  if (a2 == 122 && (a3 & 1) == 0)
  {
    uint64_t v3 = "BinaryInteger";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }

  if (a2 == 65 && a3)
  {
    uint64_t v3 = "Actor";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }

  if (a2 == 67 && a3)
  {
    uint64_t v3 = "CheckedContinuation";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }

  if (a2 == 99 && a3)
  {
    uint64_t v3 = "UnsafeContinuation";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }

  if (a2 == 69 && a3)
  {
    uint64_t v3 = "CancellationError";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }

  if (a2 == 101 && a3)
  {
    uint64_t v3 = "UnownedSerialExecutor";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }

  if (a2 == 70 && a3)
  {
    uint64_t v3 = "Executor";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }

  if (a2 == 102 && a3)
  {
    uint64_t v3 = "SerialExecutor";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }

  if (a2 == 71 && a3)
  {
    uint64_t v3 = "TaskGroup";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }

  if (a2 == 103 && a3)
  {
    uint64_t v3 = "ThrowingTaskGroup";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }

  if (a2 == 104 && a3)
  {
    uint64_t v3 = "TaskExecutor";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }

  if (a2 == 73 && a3)
  {
    uint64_t v3 = "AsyncIteratorProtocol";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }

  if (a2 == 105 && a3)
  {
    uint64_t v3 = "AsyncSequence";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }

  if (a2 == 74 && a3)
  {
    uint64_t v3 = "UnownedJob";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }

  if (a2 == 77 && a3)
  {
    uint64_t v3 = "MainActor";
    __int16 v4 = 24;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }

  if (a2 == 80 && a3)
  {
    uint64_t v3 = "TaskPriority";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }

  if (a2 == 83 && a3)
  {
    uint64_t v3 = "AsyncStream";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }

  if (a2 == 115 && a3)
  {
    uint64_t v3 = "AsyncThrowingStream";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }

  if (a2 == 84 && a3)
  {
    uint64_t v3 = "Task";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }

  if (a2 == 116 && a3)
  {
    uint64_t v3 = "UnsafeCurrentTask";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }

  return 0LL;
}

unsigned int *swift::Demangle::__runtime::Vector<char>::push_back( unsigned int *result, char *a2, void *a3)
{
  __int16 v4 = (const void **)result;
  unsigned int v6 = result[2];
  size_t v5 = result[3];
  char v7 = *(char **)result;
  if (v6 >= v5)
  {
    char v9 = (char *)a3[1];
    if (&v7[v5] == v9)
    {
      unint64_t v11 = (unint64_t)&v7[v5 + 1];
      unint64_t v10 = a3[2];
      if (v11 <= v10)
      {
        a3[1] = v11;
        LODWORD(v12) = 1;
LABEL_17:
        *((_DWORD *)v4 + 3) = v5 + v12;
        goto LABEL_18;
      }
    }

    else
    {
      unint64_t v10 = a3[2];
    }

    else {
      uint64_t v12 = (2 * v5);
    }
    size_t v13 = v12 + v5;
    if (!v9 || (unint64_t)&v9[v13] > v10)
    {
      unint64_t v14 = 2LL * a3[4];
      if (v14 <= v13 + 1) {
        unint64_t v14 = v13 + 1;
      }
      a3[4] = v14;
      unint64_t v15 = v14 + 8;
      unint64_t result = (unsigned int *)malloc(v14 + 8);
      char v16 = (char *)result + v15;
      *(void *)unint64_t result = a3[3];
      char v9 = (char *)(result + 2);
      a3[2] = v16;
      a3[3] = result;
    }

    a3[1] = &v9[v13];
    if ((_DWORD)v5)
    {
      unint64_t result = (unsigned int *)memcpy(v9, *v4, v5);
      unsigned int v6 = *((_DWORD *)v4 + 2);
      LODWORD(__swift::__runtime::llvm::hash_value(v4, v5) = *((_DWORD *)v4 + 3);
    }

    *__int16 v4 = v9;
    char v7 = v9;
    goto LABEL_17;
  }

swift::Demangle::__runtime::Node *swift::Demangle::__runtime::Demangler::popContext( swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5 = *((_DWORD *)this + 24);
  if (!v5) {
    return 0LL;
  }
  int v7 = v5 - 1;
  char v8 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8LL * (v5 - 1));
  int v9 = *((unsigned __int16 *)v8 + 8);
  if (v9 == 101)
  {
    *((_DWORD *)this + 24) = v7;
    char v8 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::changeKind( this,  (swift::Demangle::__runtime::Node **)v8,  153,  a4,  a5);
    if (v8) {
      return v8;
    }
    int v5 = *((_DWORD *)this + 24);
    if (!v5) {
      return 0LL;
    }
  }

  else if (v9 == 153)
  {
    *((_DWORD *)this + 24) = v7;
    return v8;
  }

  int v10 = v5 - 1;
  char v8 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8LL * (v5 - 1));
  int v11 = *((unsigned __int16 *)v8 + 8);
  if (v11 != 232)
  {
    if (swift::Demangle::__runtime::isContext(v11))
    {
      *((_DWORD *)this + 24) = v10;
      return v8;
    }

    return 0LL;
  }

  *((_DWORD *)this + 24) = v10;
  int v12 = *((unsigned __int8 *)v8 + 18);
  if (v12 == 1) {
    goto LABEL_12;
  }
  if (v12 != 5 || *((_DWORD *)v8 + 2) != 1) {
    return 0LL;
  }
  char v8 = *(swift::Demangle::__runtime::Node **)v8;
LABEL_12:
  char v8 = *(swift::Demangle::__runtime::Node **)v8;
  return v8;
}

uint64_t *swift::Demangle::__runtime::Demangler::popTypeAndGetAnyGeneric( swift::Demangle::__runtime::Demangler *this)
{
  int v1 = *((_DWORD *)this + 24);
  if (!v1) {
    return 0LL;
  }
  int v2 = v1 - 1;
  uint64_t v3 = *(uint64_t **)(*((void *)this + 11) + 8LL * (v1 - 1));
  if (*((_WORD *)v3 + 8) != 232) {
    return 0LL;
  }
  *((_DWORD *)this + 24) = v2;
  int v4 = *((unsigned __int8 *)v3 + 18);
  if (v4 != 1)
  {
    if (v4 != 5 || *((_DWORD *)v3 + 2) != 1) {
      return 0LL;
    }
    uint64_t v3 = (uint64_t *)*v3;
  }

  int v5 = (uint64_t *)*v3;
  if (!v5) {
    return 0LL;
  }
  unint64_t result = 0LL;
  unsigned int v7 = *((unsigned __int16 *)v5 + 8);
  if (v7 > 0xB3)
  {
    BOOL v8 = v7 - 180 > 0x36 || ((1LL << (v7 + 76)) & 0x60008000000003LL) == 0;
    if (v8 && v7 != 347) {
      return result;
    }
    return v5;
  }

  BOOL v9 = v7 > 0x3D || ((1LL << v7) & 0x2000000001200000LL) == 0;
  if (!v9 || v7 == 167) {
    return v5;
  }
  return result;
}

uint64_t anonymous namespace'::isAnyGeneric(int a1)
{
  uint64_t result = 1LL;
  if (a1 <= 179)
  {
  }

  else if (((a1 - 180) > 0x36 || ((1LL << (a1 + 76)) & 0x60008000000003LL) == 0) {
         && a1 != 347)
  }
  {
    return 0LL;
  }

  return result;
}

swift::Demangle::__runtime::Node *setParentForOpaqueReturnTypeNodes( swift::Demangle::__runtime::Demangler *a1, swift::Demangle::__runtime::Node *a2, swift::Demangle::__runtime::Node *a3, uint64_t a4, const char *a5)
{
  uint64_t result = 0LL;
  if (a2 && a3)
  {
    unsigned int v9 = *((unsigned __int16 *)a3 + 8);
    if (v9 <= 0xFD)
    {
      if (v9 != 76 && v9 != 220) {
        goto LABEL_14;
      }
      return a2;
    }

    if (v9 == 254) {
      return a2;
    }
    if (v9 != 308)
    {
LABEL_14:
      uint64_t v14 = *((unsigned __int8 *)a3 + 18);
      switch((_DWORD)v14)
      {
        case 1:
LABEL_31:
          unint64_t v19 = 0LL;
          while (1)
          {
            unint64_t v21 = *((unsigned __int8 *)a3 + 18);
            unsigned int v22 = v21 - 1;
            if ((_DWORD)v21 == 1) {
              goto LABEL_38;
            }
            if ((_DWORD)v21 != 5) {
              break;
            }
            if (*((unsigned int *)a3 + 2) > v19)
            {
LABEL_41:
              unint64_t v23 = a3;
              if (v22 >= 2) {
                unint64_t v23 = *(swift::Demangle::__runtime::Node **)a3;
              }
              char v20 = (swift::Demangle::__runtime::Node *)*((void *)v23 + v19);
              goto LABEL_33;
            }

unint64_t swift::Demangle::__runtime::Demangler::demangleClangType( swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2 = *((void *)this + 8);
  unint64_t v1 = *((void *)this + 9);
  if (v1 >= v2) {
    return 0LL;
  }
  uint64_t v4 = *((void *)this + 7);
  unsigned int v5 = 0;
  while (1)
  {
    int v6 = *(unsigned __int8 *)(v4 + v1);
    int v7 = v6 + 10 * v5 - 48;
    *((void *)this + 9) = ++v1;
    unsigned int v5 = v7;
    if (v2 == v1)
    {
      unint64_t v1 = v2;
      unsigned int v5 = v7;
      break;
    }
  }

  size_t v8 = v5;
  if (v1 + v5 > v2) {
    return 0LL;
  }
  int v10 = (const void *)(v4 + v1);
  uint64_t v11 = (char *)*((void *)this + 1);
  if (v11)
  {
    if (v5 <= 4uLL) {
      uint64_t v12 = 4LL;
    }
    else {
      uint64_t v12 = v5;
    }
    if ((unint64_t)&v11[v12] <= *((void *)this + 2))
    {
LABEL_24:
      unint64_t v17 = &v11[v12];
      goto LABEL_26;
    }

unint64_t swift::Demangle::__runtime::Demangler::popFunctionParams( swift::Demangle::__runtime::NodeFactory *a1, __int16 a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5 = *((_DWORD *)a1 + 24);
  if (!v5) {
    return 0LL;
  }
  unsigned int v8 = v5 - 1;
  unint64_t v9 = *(void *)(*((void *)a1 + 11) + 8LL * v8);
  int v10 = *(unsigned __int16 *)(v9 + 16);
  if (v10 != 232)
  {
    if (v10 == 274)
    {
      *((_DWORD *)a1 + 24) = v8;
      unint64_t v11 = (*((void *)a1 + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
      if (!v11 || (unint64_t v12 = *((void *)a1 + 2), v11 + 24 > v12))
      {
        unint64_t v13 = 2LL * *((void *)a1 + 4);
        if (v13 <= 0x20) {
          unint64_t v13 = 32LL;
        }
        *((void *)a1 + 4) = v13;
        unint64_t v14 = v13 + 8;
        unint64_t v15 = malloc(v13 + 8);
        unint64_t v12 = (unint64_t)v15 + v14;
        *unint64_t v15 = *((void *)a1 + 3);
        unint64_t v11 = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8LL;
        *((void *)a1 + 2) = (char *)v15 + v14;
        *((void *)a1 + 3) = v15;
      }

      *(_WORD *)(v11 + 16) = 223;
      *(_BYTE *)(v11 + 18) = 0;
      unint64_t v9 = (v11 + 31) & 0xFFFFFFFFFFFFFFF8LL;
      if (v9) {
        BOOL v16 = v9 + 24 > v12;
      }
      else {
        BOOL v16 = 1;
      }
      if (v16)
      {
        unint64_t v17 = 2LL * *((void *)a1 + 4);
        if (v17 <= 0x20) {
          unint64_t v17 = 32LL;
        }
        *((void *)a1 + 4) = v17;
        unint64_t v18 = v17 + 8;
        unint64_t v19 = malloc(v17 + 8);
        char v20 = (char *)v19 + v18;
        void *v19 = *((void *)a1 + 3);
        unint64_t v9 = ((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8LL;
        *((void *)a1 + 2) = v20;
        *((void *)a1 + 3) = v19;
      }

      *((void *)a1 + 1) = v9 + 24;
      *(_WORD *)(v9 + 16) = 232;
      *(_BYTE *)(v9 + 18) = 0;
      swift::Demangle::__runtime::Node::addChild( (unsigned int *)v9,  (swift::Demangle::__runtime::Node *)v11,  a1,  a4,  a5);
      goto LABEL_20;
    }

    return 0LL;
  }

  *((_DWORD *)a1 + 24) = v8;
LABEL_20:
  unint64_t v21 = (*((void *)a1 + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
  if (!v21 || v21 + 24 > *((void *)a1 + 2))
  {
    unint64_t v22 = 2LL * *((void *)a1 + 4);
    if (v22 <= 0x20) {
      unint64_t v22 = 32LL;
    }
    *((void *)a1 + 4) = v22;
    unint64_t v23 = v22 + 8;
    unint64_t v24 = malloc(v22 + 8);
    unint64_t v25 = (char *)v24 + v23;
    *unint64_t v24 = *((void *)a1 + 3);
    unint64_t v21 = ((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    *((void *)a1 + 2) = v25;
    *((void *)a1 + 3) = v24;
  }

  *((void *)a1 + 1) = v21 + 24;
  *(_WORD *)(v21 + 16) = a2;
  *(_BYTE *)(v21 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((unsigned int *)v21, (swift::Demangle::__runtime::Node *)v9, a1, a4, a5);
  return v21;
}

unint64_t swift::Demangle::__runtime::Demangler::popPack( swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v6 = (int8x16_t *)((*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL);
  if (!v6 || (unint64_t)&v6[1].u64[1] > *((void *)this + 2))
  {
    unint64_t v7 = 2LL * *((void *)this + 4);
    if (v7 <= 0x20) {
      unint64_t v7 = 32LL;
    }
    *((void *)this + 4) = v7;
    unint64_t v8 = v7 + 8;
    unint64_t v9 = malloc(v7 + 8);
    int v10 = (char *)v9 + v8;
    *unint64_t v9 = *((void *)this + 3);
    int v6 = (int8x16_t *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8LL);
    *((void *)this + 2) = v10;
    *((void *)this + 3) = v9;
  }

  *((void *)this + 1) = (char *)v6 + 24;
  v6[1].i16[0] = 226;
  v6[1].i8[2] = 0;
  int v11 = *((_DWORD *)this + 24);
  if (v11 && (unsigned int v12 = v11 - 1, *(_WORD *)(*(void *)(*((void *)this + 11) + 8LL * v12) + 16LL) == 274))
  {
    *((_DWORD *)this + 24) = v12;
  }

  else
  {
    do
    {
      int v18 = *((_DWORD *)this + 24);
      if (!v18) {
        return 0LL;
      }
      int v19 = v18 - 1;
      uint64_t v20 = *((void *)this + 11);
      int v21 = *(unsigned __int16 *)(*(void *)(v20 + 8LL * (v18 - 1)) + 16LL);
      if (v21 == 275)
      {
        *((_DWORD *)this + 24) = v19;
        --v18;
        if (!v19) {
          return 0LL;
        }
      }

      unsigned int v22 = v18 - 1;
      unint64_t v23 = *(swift::Demangle::__runtime::Node **)(v20 + 8LL * v22);
      if (*((_WORD *)v23 + 8) != 232) {
        return 0LL;
      }
      *((_DWORD *)this + 24) = v22;
      swift::Demangle::__runtime::Node::addChild((unsigned int *)v6, v23, this, a4, a5);
    }

    while (v21 != 275);
    int v24 = v6[1].u8[2];
    if (v24 == 5)
    {
      uint64_t v26 = v6->u32[2];
      if ((_DWORD)v26)
      {
        unsigned __int16 v27 = (void *)(v6->i64[0] + 8 * v26 - 8);
        if ((unint64_t)v27 > v6->i64[0])
        {
          unint64_t v28 = v6->i64[0] + 8;
          do
          {
            uint64_t v29 = *(void *)(v28 - 8);
            *(void *)(v28 - 8) = *v27;
            *v27-- = v29;
            BOOL v30 = v28 >= (unint64_t)v27;
            v28 += 8LL;
          }

          while (!v30);
        }
      }
    }

    else if (v24 == 2)
    {
      *int v6 = vextq_s8(*v6, *v6, 8uLL);
    }
  }

  unint64_t v13 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
  if (!v13 || v13 + 24 > *((void *)this + 2))
  {
    unint64_t v14 = 2LL * *((void *)this + 4);
    if (v14 <= 0x20) {
      unint64_t v14 = 32LL;
    }
    *((void *)this + 4) = v14;
    unint64_t v15 = v14 + 8;
    BOOL v16 = malloc(v14 + 8);
    unint64_t v17 = (char *)v16 + v15;
    *BOOL v16 = *((void *)this + 3);
    unint64_t v13 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    *((void *)this + 2) = v17;
    *((void *)this + 3) = v16;
  }

  *((void *)this + 1) = v13 + 24;
  *(_WORD *)(v13 + 16) = 232;
  *(_BYTE *)(v13 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((unsigned int *)v13, (swift::Demangle::__runtime::Node *)v6, this, a4, a5);
  return v13;
}

unint64_t swift::Demangle::__runtime::Demangler::popSILPack( swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v5 = *((void *)this + 9);
  if (v5 >= *((void *)this + 8)) {
    return 0LL;
  }
  *((void *)this + 9) = v5 + 1;
  int v7 = *(char *)(*((void *)this + 7) + v5);
  if (v7 == 105)
  {
    unint64_t v8 = (int8x16_t *)((*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL);
    if (v8 && (unint64_t)&v8[1].u64[1] <= *((void *)this + 2))
    {
      __int16 v13 = 228;
      goto LABEL_15;
    }

    unint64_t v14 = 2LL * *((void *)this + 4);
    if (v14 <= 0x20) {
      unint64_t v14 = 32LL;
    }
    *((void *)this + 4) = v14;
    unint64_t v15 = v14 + 8;
    int v11 = malloc(v14 + 8);
    *int v11 = *((void *)this + 3);
    *((void *)this + 3) = v11;
    unsigned int v12 = (char *)v11 + v15;
    __int16 v13 = 228;
    goto LABEL_14;
  }

  if (v7 != 100) {
    return 0LL;
  }
  unint64_t v8 = (int8x16_t *)((*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL);
  if (v8 && (unint64_t)&v8[1].u64[1] <= *((void *)this + 2))
  {
    __int16 v13 = 227;
    goto LABEL_15;
  }

  unint64_t v9 = 2LL * *((void *)this + 4);
  if (v9 <= 0x20) {
    unint64_t v9 = 32LL;
  }
  *((void *)this + 4) = v9;
  unint64_t v10 = v9 + 8;
  int v11 = malloc(v9 + 8);
  *int v11 = *((void *)this + 3);
  *((void *)this + 3) = v11;
  unsigned int v12 = (char *)v11 + v10;
  __int16 v13 = 227;
LABEL_14:
  unint64_t v8 = (int8x16_t *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8LL);
  *((void *)this + 2) = v12;
LABEL_15:
  *((void *)this + 1) = (char *)v8 + 24;
  v8[1].i16[0] = v13;
  v8[1].i8[2] = 0;
  int v16 = *((_DWORD *)this + 24);
  if (!v16 || (unsigned int v17 = v16 - 1, *(_WORD *)(*(void *)(*((void *)this + 11) + 8LL * v17) + 16LL) != 274))
  {
    while (1)
    {
      int v23 = *((_DWORD *)this + 24);
      if (!v23) {
        return 0LL;
      }
      int v24 = v23 - 1;
      uint64_t v25 = *((void *)this + 11);
      int v26 = *(unsigned __int16 *)(*(void *)(v25 + 8LL * (v23 - 1)) + 16LL);
      if (v26 == 275)
      {
        *((_DWORD *)this + 24) = v24;
        --v23;
        if (!v24) {
          return 0LL;
        }
      }

      unsigned int v27 = v23 - 1;
      unint64_t v28 = *(swift::Demangle::__runtime::Node **)(v25 + 8LL * v27);
      if (*((_WORD *)v28 + 8) != 232) {
        return 0LL;
      }
      *((_DWORD *)this + 24) = v27;
      swift::Demangle::__runtime::Node::addChild((unsigned int *)v8, v28, this, a4, a5);
      if (v26 == 275)
      {
        int v29 = v8[1].u8[2];
        if (v29 == 5)
        {
          uint64_t v31 = v8->u32[2];
          if ((_DWORD)v31)
          {
            __int16 v32 = (void *)(v8->i64[0] + 8 * v31 - 8);
            if ((unint64_t)v32 > v8->i64[0])
            {
              unint64_t v33 = v8->i64[0] + 8;
              do
              {
                uint64_t v34 = *(void *)(v33 - 8);
                *(void *)(v33 - 8) = *v32;
                *v32-- = v34;
                BOOL v35 = v33 >= (unint64_t)v32;
                v33 += 8LL;
              }

              while (!v35);
            }
          }
        }

        else if (v29 == 2)
        {
          *unint64_t v8 = vextq_s8(*v8, *v8, 8uLL);
        }

        goto LABEL_18;
      }
    }
  }

  *((_DWORD *)this + 24) = v17;
LABEL_18:
  unint64_t v18 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
  if (!v18 || v18 + 24 > *((void *)this + 2))
  {
    unint64_t v19 = 2LL * *((void *)this + 4);
    if (v19 <= 0x20) {
      unint64_t v19 = 32LL;
    }
    *((void *)this + 4) = v19;
    unint64_t v20 = v19 + 8;
    int v21 = malloc(v19 + 8);
    unsigned int v22 = (char *)v21 + v20;
    *int v21 = *((void *)this + 3);
    unint64_t v18 = ((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    *((void *)this + 2) = v22;
    *((void *)this + 3) = v21;
  }

  *((void *)this + 1) = v18 + 24;
  *(_WORD *)(v18 + 16) = 232;
  *(_BYTE *)(v18 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((unsigned int *)v18, (swift::Demangle::__runtime::Node *)v8, this, a4, a5);
  return v18;
}

int8x16_t *swift::Demangle::__runtime::Demangler::popTypeList( swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v6 = (int8x16_t *)((*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL);
  if (!v6 || (unint64_t)&v6[1].u64[1] > *((void *)this + 2))
  {
    unint64_t v7 = 2LL * *((void *)this + 4);
    if (v7 <= 0x20) {
      unint64_t v7 = 32LL;
    }
    *((void *)this + 4) = v7;
    unint64_t v8 = v7 + 8;
    unint64_t v9 = malloc(v7 + 8);
    unint64_t v10 = (char *)v9 + v8;
    *unint64_t v9 = *((void *)this + 3);
    int v6 = (int8x16_t *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8LL);
    *((void *)this + 2) = v10;
    *((void *)this + 3) = v9;
  }

  *((void *)this + 1) = (char *)v6 + 24;
  v6[1].i16[0] = 235;
  v6[1].i8[2] = 0;
  int v11 = *((_DWORD *)this + 24);
  if (v11 && (unsigned int v12 = v11 - 1, *(_WORD *)(*(void *)(*((void *)this + 11) + 8LL * v12) + 16LL) == 274))
  {
    *((_DWORD *)this + 24) = v12;
  }

  else
  {
    do
    {
      int v13 = *((_DWORD *)this + 24);
      if (!v13) {
        return 0LL;
      }
      int v14 = v13 - 1;
      uint64_t v15 = *((void *)this + 11);
      int v16 = *(unsigned __int16 *)(*(void *)(v15 + 8LL * (v13 - 1)) + 16LL);
      if (v16 == 275)
      {
        *((_DWORD *)this + 24) = v14;
        --v13;
        if (!v14) {
          return 0LL;
        }
      }

      unsigned int v17 = v13 - 1;
      unint64_t v18 = *(swift::Demangle::__runtime::Node **)(v15 + 8LL * v17);
      if (*((_WORD *)v18 + 8) != 232) {
        return 0LL;
      }
      *((_DWORD *)this + 24) = v17;
      swift::Demangle::__runtime::Node::addChild((unsigned int *)v6, v18, this, a4, a5);
    }

    while (v16 != 275);
    int v19 = v6[1].u8[2];
    if (v19 == 5)
    {
      uint64_t v21 = v6->u32[2];
      if ((_DWORD)v21)
      {
        unsigned int v22 = (void *)(v6->i64[0] + 8 * v21 - 8);
        if ((unint64_t)v22 > v6->i64[0])
        {
          unint64_t v23 = v6->i64[0] + 8;
          do
          {
            uint64_t v24 = *(void *)(v23 - 8);
            *(void *)(v23 - 8) = *v22;
            *v22-- = v24;
            BOOL v25 = v23 >= (unint64_t)v22;
            v23 += 8LL;
          }

          while (!v25);
        }
      }
    }

    else if (v19 == 2)
    {
      *int v6 = vextq_s8(*v6, *v6, 8uLL);
    }
  }

  return v6;
}

int8x16_t *swift::Demangle::__runtime::Demangler::popAnyProtocolConformanceList( swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v6 = (int8x16_t *)((*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL);
  if (!v6 || (unint64_t)&v6[1].u64[1] > *((void *)this + 2))
  {
    unint64_t v7 = 2LL * *((void *)this + 4);
    if (v7 <= 0x20) {
      unint64_t v7 = 32LL;
    }
    *((void *)this + 4) = v7;
    unint64_t v8 = v7 + 8;
    unint64_t v9 = malloc(v7 + 8);
    unint64_t v10 = (char *)v9 + v8;
    *unint64_t v9 = *((void *)this + 3);
    int v6 = (int8x16_t *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8LL);
    *((void *)this + 2) = v10;
    *((void *)this + 3) = v9;
  }

  *((void *)this + 1) = (char *)v6 + 24;
  v6[1].i16[0] = 2;
  v6[1].i8[2] = 0;
  int v11 = *((_DWORD *)this + 24);
  if (v11 && (unsigned int v12 = v11 - 1, *(_WORD *)(*(void *)(*((void *)this + 11) + 8LL * v12) + 16LL) == 274))
  {
    *((_DWORD *)this + 24) = v12;
  }

  else
  {
    do
    {
      int v13 = *((_DWORD *)this + 24);
      if (!v13) {
        return 0LL;
      }
      int v14 = v13 - 1;
      uint64_t v15 = *((void *)this + 11);
      int v16 = *(unsigned __int16 *)(*(void *)(v15 + 8LL * (v13 - 1)) + 16LL);
      if (v16 == 275)
      {
        *((_DWORD *)this + 24) = v14;
        --v13;
        if (!v14) {
          return 0LL;
        }
      }

      unsigned int v17 = v13 - 1;
      unint64_t v18 = *(unsigned __int16 **)(v15 + 8LL * v17);
      unsigned int v19 = v18[8];
      BOOL v20 = v19 > 0x31;
      uint64_t v21 = (1LL << v19) & 0x380000C000000LL;
      if (v20 || v21 == 0) {
        return 0LL;
      }
      *((_DWORD *)this + 24) = v17;
      swift::Demangle::__runtime::Node::addChild( (unsigned int *)v6,  (swift::Demangle::__runtime::Node *)v18,  this,  a4,  a5);
    }

    while (v16 != 275);
    int v23 = v6[1].u8[2];
    if (v23 == 5)
    {
      uint64_t v25 = v6->u32[2];
      if ((_DWORD)v25)
      {
        int v26 = (void *)(v6->i64[0] + 8 * v25 - 8);
        if ((unint64_t)v26 > v6->i64[0])
        {
          unint64_t v27 = v6->i64[0] + 8;
          do
          {
            uint64_t v28 = *(void *)(v27 - 8);
            *(void *)(v27 - 8) = *v26;
            *v26-- = v28;
            BOOL v29 = v27 >= (unint64_t)v26;
            v27 += 8LL;
          }

          while (!v29);
        }
      }
    }

    else if (v23 == 2)
    {
      *int v6 = vextq_s8(*v6, *v6, 8uLL);
    }
  }

  return v6;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleRetroactiveProtocolConformanceRef( swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v6 = *((_DWORD *)this + 24);
  if (!v6) {
    goto LABEL_5;
  }
  unsigned int v7 = v6 - 1;
  unint64_t v8 = *(void *)(*((void *)this + 11) + 8LL * v7);
  int v9 = *(unsigned __int16 *)(v8 + 16);
  if (v9 == 153)
  {
    *((_DWORD *)this + 24) = v7;
    goto LABEL_7;
  }

  if (v9 == 101)
  {
    *((_DWORD *)this + 24) = v7;
    unint64_t v8 = swift::Demangle::__runtime::Demangler::changeKind(this, (swift::Demangle::__runtime::Node **)v8, 153, a4, a5);
  }

  else
  {
LABEL_5:
    unint64_t v8 = 0LL;
  }

unint64_t swift::Demangle::__runtime::Demangler::demangleDependentConformanceIndex( swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2 = *((void *)this + 8);
  unint64_t v1 = *((void *)this + 9);
  if (v1 >= v2) {
    return 0LL;
  }
  uint64_t v4 = *((void *)this + 7);
  int v5 = *(unsigned __int8 *)(v4 + v1);
  if (v5 == 95)
  {
    unint64_t result = 0LL;
    *((void *)this + 9) = v1 + 1;
    return result;
  }

  int v7 = 0;
  while (1)
  {
    int v8 = *(unsigned __int8 *)(v4 + v1);
    int v9 = v8 + 10 * v7 - 48;
    if (v9 >= v7)
    {
      *((void *)this + 9) = ++v1;
      int v7 = v9;
      if (v2 != v1) {
        continue;
      }
    }

    return 0LL;
  }

  unint64_t result = 0LL;
  if ((v7 & 0x80000000) == 0 && v1 < v2 && v8 == 95)
  {
    *((void *)this + 9) = v1 + 1;
    if (v7)
    {
      uint64_t v10 = (v7 - 1);
      unint64_t result = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
      if (!result || result + 24 > *((void *)this + 2))
      {
        unint64_t v11 = 2LL * *((void *)this + 4);
        if (v11 <= 0x20) {
          unint64_t v11 = 32LL;
        }
        *((void *)this + 4) = v11;
        unint64_t v12 = v11 + 8;
        unint64_t v13 = malloc(v11 + 8);
        *unint64_t v13 = *((void *)this + 3);
        unint64_t result = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8LL;
        *((void *)this + 2) = (char *)v13 + v12;
        *((void *)this + 3) = v13;
      }

      *((void *)this + 1) = result + 24;
      *(_WORD *)(result + 16) = 102;
      *(_BYTE *)(result + 18) = 4;
      *(void *)unint64_t result = v10;
    }

    else
    {
      unint64_t result = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
      if (!result || result + 24 > *((void *)this + 2))
      {
        unint64_t v14 = 2LL * *((void *)this + 4);
        if (v14 <= 0x20) {
          unint64_t v14 = 32LL;
        }
        *((void *)this + 4) = v14;
        unint64_t v15 = v14 + 8;
        unint64_t v16 = malloc(v14 + 8);
        *unint64_t v16 = *((void *)this + 3);
        unint64_t result = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8LL;
        *((void *)this + 2) = (char *)v16 + v15;
        *((void *)this + 3) = v16;
      }

      *((void *)this + 1) = result + 24;
      *(_WORD *)(result + 16) = 246;
      *(_BYTE *)(result + 18) = 0;
    }
  }

  return result;
}

unint64_t swift::Demangle::__runtime::Demangler::popDependentAssociatedConformance( swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v6 = swift::Demangle::__runtime::Demangler::popProtocol(this, a2, a3, a4, a5);
  int v9 = *((_DWORD *)this + 24);
  if (!v9) {
    return 0LL;
  }
  unsigned int v10 = v9 - 1;
  unint64_t v11 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8LL * v10);
  if (*((_WORD *)v11 + 8) != 232) {
    return 0LL;
  }
  unint64_t v12 = (swift::Demangle::__runtime::Node *)v6;
  *((_DWORD *)this + 24) = v10;
  if (!v6) {
    return 0LL;
  }
  unint64_t v13 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
  if (!v13 || v13 + 24 > *((void *)this + 2))
  {
    unint64_t v14 = 2LL * *((void *)this + 4);
    if (v14 <= 0x20) {
      unint64_t v14 = 32LL;
    }
    *((void *)this + 4) = v14;
    unint64_t v15 = v14 + 8;
    unint64_t v16 = malloc(v14 + 8);
    unsigned int v17 = (char *)v16 + v15;
    *unint64_t v16 = *((void *)this + 3);
    unint64_t v13 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    *((void *)this + 2) = v17;
    *((void *)this + 3) = v16;
  }

  *((void *)this + 1) = v13 + 24;
  *(_WORD *)(v13 + 16) = 34;
  *(_BYTE *)(v13 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((unsigned int *)v13, v11, this, v7, v8);
  swift::Demangle::__runtime::Node::addChild((unsigned int *)v13, v12, this, v18, v19);
  return v13;
}

int8x16_t *swift::Demangle::__runtime::Demangler::popRetroactiveConformances( swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5 = *((_DWORD *)this + 24);
  if (!v5) {
    return 0LL;
  }
  uint64_t v7 = 0LL;
  while (1)
  {
    unsigned int v12 = v5 - 1;
    unint64_t v13 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8LL * v12);
    if (*((_WORD *)v13 + 8) != 206) {
      break;
    }
    *((_DWORD *)this + 24) = v12;
    if (!v7)
    {
      uint64_t v7 = (int8x16_t *)((*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL);
      if (!v7 || (unint64_t)&v7[1].u64[1] > *((void *)this + 2))
      {
        unint64_t v8 = 2LL * *((void *)this + 4);
        if (v8 <= 0x20) {
          unint64_t v8 = 32LL;
        }
        *((void *)this + 4) = v8;
        unint64_t v9 = v8 + 8;
        unsigned int v10 = malloc(v8 + 8);
        unint64_t v11 = (char *)v10 + v9;
        *unsigned int v10 = *((void *)this + 3);
        uint64_t v7 = (int8x16_t *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8LL);
        *((void *)this + 2) = v11;
        *((void *)this + 3) = v10;
      }

      *((void *)this + 1) = (char *)v7 + 24;
      v7[1].i16[0] = 235;
      v7[1].i8[2] = 0;
    }

    swift::Demangle::__runtime::Node::addChild((unsigned int *)v7, v13, this, a4, a5);
    int v5 = *((_DWORD *)this + 24);
    if (!v5) {
      goto LABEL_15;
    }
  }

  if (!v7) {
    return v7;
  }
LABEL_15:
  int v14 = v7[1].u8[2];
  if (v14 == 5)
  {
    uint64_t v15 = v7->u32[2];
    if ((_DWORD)v15)
    {
      unint64_t v16 = (void *)(v7->i64[0] + 8 * v15 - 8);
      if ((unint64_t)v16 > v7->i64[0])
      {
        unint64_t v17 = v7->i64[0] + 8;
        do
        {
          uint64_t v18 = *(void *)(v17 - 8);
          *(void *)(v17 - 8) = *v16;
          *v16-- = v18;
          BOOL v19 = v17 >= (unint64_t)v16;
          v17 += 8LL;
        }

        while (!v19);
      }
    }
  }

  else if (v14 == 2)
  {
    *uint64_t v7 = vextq_s8(*v7, *v7, 8uLL);
  }

  return v7;
}

uint64_t swift::Demangle::__runtime::Demangler::demangleBoundGenerics( uint64_t a1, const void **a2, int8x16_t **a3, uint64_t a4, const char *a5)
{
  *a3 = swift::Demangle::__runtime::Demangler::popRetroactiveConformances( (swift::Demangle::__runtime::Demangler *)a1,  (uint64_t)a2,  (uint64_t)a3,  a4,  a5);
  while (1)
  {
    unint64_t v7 = (*(void *)(a1 + 8) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
    if (!v7 || v7 + 24 > *(void *)(a1 + 16))
    {
      unint64_t v8 = 2LL * *(void *)(a1 + 32);
      if (v8 <= 0x20) {
        unint64_t v8 = 32LL;
      }
      *(void *)(a1 + 32) = v8;
      unint64_t v9 = v8 + 8;
      unsigned int v10 = malloc(v8 + 8);
      *unsigned int v10 = *(void *)(a1 + 24);
      unint64_t v7 = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8LL;
      *(void *)(a1 + 16) = (char *)v10 + v9;
      *(void *)(a1 + 24) = v10;
    }

    *(void *)(a1 + 8) = v7 + 24;
    *(_WORD *)(v7 + 16) = 235;
    *(_BYTE *)(v7 + 18) = 0;
    int v26 = (swift::Demangle::__runtime::Node *)v7;
    swift::Demangle::__runtime::Vector<swift::Demangle::__runtime::Node *>::push_back(a2, (uint64_t *)&v26, (void *)a1);
    for (int i = *(_DWORD *)(a1 + 96); i; int i = *(_DWORD *)(a1 + 96))
    {
      int v14 = *(swift::Demangle::__runtime::Node **)(*(void *)(a1 + 88) + 8LL * (i - 1));
      if (*((_WORD *)v14 + 8) != 232) {
        break;
      }
      *(_DWORD *)(a1 + 96) = i - 1;
      swift::Demangle::__runtime::Node::addChild( (unsigned int *)v26,  v14,  (swift::Demangle::__runtime::NodeFactory *)a1,  v11,  v12);
    }

    int v15 = *((unsigned __int8 *)v26 + 18);
    if (v15 == 5)
    {
      unint64_t v16 = *(void *)v26;
      uint64_t v17 = *((unsigned int *)v26 + 2);
      uint64_t v18 = (void *)(*(void *)v26 + 8 * v17 - 8);
      if ((_DWORD)v17 && (unint64_t)v18 > v16)
      {
        unint64_t v20 = v16 + 8;
        do
        {
          uint64_t v21 = *(void *)(v20 - 8);
          *(void *)(v20 - 8) = *v18;
          *v18-- = v21;
          BOOL v22 = v20 >= (unint64_t)v18;
          v20 += 8LL;
        }

        while (!v22);
      }
    }

    else if (v15 == 2)
    {
      *(int8x16_t *)int v26 = vextq_s8(*(int8x16_t *)v26, *(int8x16_t *)v26, 8uLL);
    }

    if (!i) {
      break;
    }
    unsigned int v23 = i - 1;
    int v24 = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 88) + 8LL * v23) + 16LL);
    if (v24 != 275)
    {
      if (v24 == 274)
      {
        *(_DWORD *)(a1 + 96) = v23;
        return 1LL;
      }

      return 0LL;
    }

    *(_DWORD *)(a1 + 96) = v23;
  }

  return 0LL;
}

const void **swift::Demangle::__runtime::Vector<swift::Demangle::__runtime::Node *>::push_back( const void **result, uint64_t *a2, void *a3)
{
  uint64_t v4 = result;
  unsigned int v5 = *((_DWORD *)result + 2);
  uint64_t v6 = *((unsigned int *)result + 3);
  unint64_t v7 = (char *)*result;
  if (v5 >= v6)
  {
    unint64_t v9 = &v7[8 * v6];
    unsigned int v10 = (char *)a3[1];
    if (v9 == v10)
    {
      unsigned int v12 = v9 + 8;
      unint64_t v11 = a3[2];
      if ((unint64_t)v12 <= v11)
      {
        a3[1] = v12;
        LODWORD(v13) = 1;
LABEL_17:
        *((_DWORD *)v4 + 3) = v6 + v13;
        goto LABEL_18;
      }
    }

    else
    {
      unint64_t v11 = a3[2];
    }

    else {
      uint64_t v13 = (2 * v6);
    }
    uint64_t v14 = 8 * (v13 + v6);
    unint64_t v7 = (char *)((unint64_t)(v10 + 7) & 0xFFFFFFFFFFFFFFF8LL);
    if (!v7 || (unint64_t)&v7[v14] > v11)
    {
      unint64_t v15 = 2LL * a3[4];
      if (v15 <= v14 + 8) {
        unint64_t v15 = v14 + 8;
      }
      a3[4] = v15;
      unint64_t v16 = v15 + 8;
      unint64_t result = (const void **)malloc(v15 + 8);
      uint64_t v17 = (char *)result + v16;
      *unint64_t result = (const void *)a3[3];
      unint64_t v7 = (char *)(((unint64_t)result + 15) & 0xFFFFFFFFFFFFFFF8LL);
      a3[2] = v17;
      a3[3] = result;
    }

    a3[1] = &v7[v14];
    if ((_DWORD)v6)
    {
      unint64_t result = (const void **)memcpy(v7, *v4, 8 * v6);
      unsigned int v5 = *((_DWORD *)v4 + 2);
      LODWORD(v6) = *((_DWORD *)v4 + 3);
    }

    *uint64_t v4 = v7;
    goto LABEL_17;
  }

unint64_t swift::Demangle::__runtime::Demangler::demangleBoundGenericArgs( swift::Demangle::__runtime::NodeFactory *a1, unint64_t a2, uint64_t a3, unint64_t a4, const char *a5)
{
  if (!a2) {
    return 0LL;
  }
  unint64_t v5 = a4;
  unint64_t v7 = *(unsigned int *)(a3 + 8);
  if (v7 <= a4) {
    return 0LL;
  }
  unint64_t v8 = a2;
  int v10 = *(unsigned __int16 *)(a2 + 16);
  if (v10 == 233 || v10 == 181)
  {
    unint64_t v11 = (*((void *)a1 + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
    if (!v11 || v11 + 24 > *((void *)a1 + 2))
    {
      unint64_t v12 = 2LL * *((void *)a1 + 4);
      if (v12 <= 0x20) {
        unint64_t v12 = 32LL;
      }
      *((void *)a1 + 4) = v12;
      unint64_t v13 = v12 + 8;
      uint64_t v14 = malloc(v12 + 8);
      unint64_t v15 = (char *)v14 + v13;
      *uint64_t v14 = *((void *)a1 + 3);
      unint64_t v11 = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8LL;
      *((void *)a1 + 2) = v15;
      *((void *)a1 + 3) = v14;
    }

    unint64_t v16 = v11 + 24;
    *((void *)a1 + 1) = v11 + 24;
    *(_WORD *)(v11 + 16) = 235;
    *(_BYTE *)(v11 + 18) = 0;
    unint64_t v17 = (v7 - 1);
    unsigned int v18 = *(_DWORD *)(a3 + 8);
    if (v17 < v5 || v18 <= v17)
    {
LABEL_45:
      unint64_t v30 = (v16 + 7) & 0xFFFFFFFFFFFFFFF8LL;
      if (!v30 || v30 + 24 > *((void *)a1 + 2))
      {
        unint64_t v31 = 2LL * *((void *)a1 + 4);
        if (v31 <= 0x20) {
          unint64_t v31 = 32LL;
        }
        *((void *)a1 + 4) = v31;
        unint64_t v32 = v31 + 8;
        unint64_t v33 = malloc(v31 + 8);
        uint64_t v34 = (char *)v33 + v32;
        *unint64_t v33 = *((void *)a1 + 3);
        unint64_t v30 = ((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8LL;
        *((void *)a1 + 2) = v34;
        *((void *)a1 + 3) = v33;
      }

      *((void *)a1 + 1) = v30 + 24;
      *(_WORD *)(v30 + 16) = 232;
      *(_BYTE *)(v30 + 18) = 0;
      swift::Demangle::__runtime::Node::addChild( (unsigned int *)v30,  (swift::Demangle::__runtime::Node *)v8,  a1,  a4,  a5);
      unint64_t v37 = 0LL;
      if (v11 && v30)
      {
        unint64_t v37 = (*((void *)a1 + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
        if (!v37 || v37 + 24 > *((void *)a1 + 2))
        {
          unint64_t v38 = 2LL * *((void *)a1 + 4);
          if (v38 <= 0x20) {
            unint64_t v38 = 32LL;
          }
          *((void *)a1 + 4) = v38;
          unint64_t v39 = v38 + 8;
          uint64_t v40 = malloc(v38 + 8);
          *uint64_t v40 = *((void *)a1 + 3);
          unint64_t v37 = ((unint64_t)v40 + 15) & 0xFFFFFFFFFFFFFFF8LL;
          *((void *)a1 + 2) = (char *)v40 + v39;
          *((void *)a1 + 3) = v40;
        }

        *((void *)a1 + 1) = v37 + 24;
        *(_WORD *)(v37 + 16) = 17;
        *(_BYTE *)(v37 + 18) = 0;
        swift::Demangle::__runtime::Node::addChild( (unsigned int *)v37,  (swift::Demangle::__runtime::Node *)v30,  a1,  v35,  v36);
        swift::Demangle::__runtime::Node::addChild( (unsigned int *)v37,  (swift::Demangle::__runtime::Node *)v11,  a1,  v41,  v42);
      }

      return v37;
    }

    while (1)
    {
      uint64_t v21 = *(void *)(*(void *)a3 + 8 * v17);
      int v22 = *(unsigned __int8 *)(v21 + 18);
      unsigned int v23 = (swift::Demangle::__runtime::Node **)v21;
      if ((v22 - 1) >= 2)
      {
        if (v22 == 5)
        {
          int v24 = *(swift::Demangle::__runtime::Node **)v21;
          unsigned int v23 = *(swift::Demangle::__runtime::Node ***)v21;
          goto LABEL_28;
        }

        unsigned int v23 = 0LL;
      }

      switch(v22)
      {
        case 1:
          uint64_t v25 = (swift::Demangle::__runtime::Node **)(v21 + 8);
          if (v23 != (swift::Demangle::__runtime::Node **)(v21 + 8)) {
            goto LABEL_35;
          }
          break;
        case 2:
          uint64_t v25 = (swift::Demangle::__runtime::Node **)(v21 + 16);
          if (v23 != (swift::Demangle::__runtime::Node **)(v21 + 16)) {
            goto LABEL_35;
          }
          break;
        case 5:
          int v24 = *(swift::Demangle::__runtime::Node **)v21;
LABEL_28:
          uint64_t v25 = (swift::Demangle::__runtime::Node **)((char *)v24 + 8 * *(unsigned int *)(v21 + 8));
          if (v23 != v25) {
            goto LABEL_35;
          }
          break;
        default:
          uint64_t v25 = 0LL;
          if (v23)
          {
            do
            {
LABEL_35:
              int v26 = *v23++;
              swift::Demangle::__runtime::Node::addChild((unsigned int *)v11, v26, a1, a4, a5);
            }

            while (v23 != v25);
            unsigned int v18 = *(_DWORD *)(a3 + 8);
          }

          break;
      }

      unint64_t v17 = (v17 - 1);
      if (v17 < v5 || v18 <= v17)
      {
        unint64_t v16 = *((void *)a1 + 1);
        goto LABEL_45;
      }
    }
  }

  int v27 = *(unsigned __int8 *)(a2 + 18);
  uint64_t v28 = (swift::Demangle::__runtime::Node **)a2;
  if ((v27 - 1) >= 2)
  {
    if (v27 == 5 && *(_DWORD *)(a2 + 8))
    {
      uint64_t v28 = *(swift::Demangle::__runtime::Node ***)a2;
      goto LABEL_41;
    }

    return 0LL;
  }

uint64_t swift::Demangle::__runtime::nodeConsumesGenericArgs( swift::Demangle::__runtime *this, swift::Demangle::__runtime::Node *a2)
{
  uint64_t result = 0LL;
  int v4 = *((unsigned __int16 *)this + 8);
  if (v4 > 217)
  {
    unsigned int v6 = v4 - 218;
    BOOL v7 = v6 > 0x24;
    uint64_t v8 = (1LL << v6) & 0x1000000005LL;
    if (v7 || v8 == 0) {
      return 1LL;
    }
  }

  else
  {
    BOOL v5 = (v4 - 117) > 0x3E || ((1LL << (v4 - 117)) & 0x6000000000000101LL) == 0;
    if (v5 && v4 != 33 && v4 != 70) {
      return 1LL;
    }
  }

  return result;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleImplParamConvention( swift::Demangle::__runtime::NodeFactory *a1, __int16 a2)
{
  unint64_t v3 = *((void *)a1 + 9);
  if (v3 >= *((void *)a1 + 8))
  {
    unint64_t v4 = *((void *)a1 + 9);
LABEL_16:
    unint64_t v16 = 0LL;
    *((void *)a1 + 9) = v4 - 1;
    return v16;
  }

  unint64_t v4 = v3 + 1;
  *((void *)a1 + 9) = v3 + 1;
  uint64_t v5 = *(char *)(*((void *)a1 + 7) + v3) - 98LL;
  BOOL v7 = off_189B8E518[v5];
  unint64_t v8 = (*((void *)a1 + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
  if (!v8 || v8 + 24 > *((void *)a1 + 2))
  {
    unint64_t v9 = 2LL * *((void *)a1 + 4);
    if (v9 <= 0x20) {
      unint64_t v9 = 32LL;
    }
    *((void *)a1 + 4) = v9;
    unint64_t v10 = v9 + 8;
    unint64_t v11 = malloc(v9 + 8);
    unint64_t v12 = (char *)v11 + v10;
    *unint64_t v11 = *((void *)a1 + 3);
    unint64_t v8 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    *((void *)a1 + 2) = v12;
    *((void *)a1 + 3) = v11;
  }

  *((void *)a1 + 1) = v8 + 24;
  size_t v13 = strlen(v7);
  *(_WORD *)(v8 + 16) = 106;
  *(_BYTE *)(v8 + 18) = 3;
  *(void *)unint64_t v8 = v7;
  *(void *)(v8 + 8) = v13;
  unint64_t v16 = (*((void *)a1 + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
  if (!v16 || v16 + 24 > *((void *)a1 + 2))
  {
    unint64_t v17 = 2LL * *((void *)a1 + 4);
    if (v17 <= 0x20) {
      unint64_t v17 = 32LL;
    }
    *((void *)a1 + 4) = v17;
    unint64_t v18 = v17 + 8;
    BOOL v19 = malloc(v17 + 8);
    unint64_t v20 = (char *)v19 + v18;
    void *v19 = *((void *)a1 + 3);
    unint64_t v16 = ((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    *((void *)a1 + 2) = v20;
    *((void *)a1 + 3) = v19;
  }

  *((void *)a1 + 1) = v16 + 24;
  *(_WORD *)(v16 + 16) = a2;
  *(_BYTE *)(v16 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((unsigned int *)v16, (swift::Demangle::__runtime::Node *)v8, a1, v14, v15);
  return v16;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleImplResultConvention( swift::Demangle::__runtime::NodeFactory *a1, __int16 a2)
{
  unint64_t v3 = *((void *)a1 + 9);
  if (v3 >= *((void *)a1 + 8))
  {
    unint64_t v4 = *((void *)a1 + 9);
LABEL_5:
    unint64_t v7 = 0LL;
    *((void *)a1 + 9) = v4 - 1;
  }

  else
  {
    unint64_t v4 = v3 + 1;
    *((void *)a1 + 9) = v3 + 1;
    unsigned int v6 = "@out";
    switch(*(_BYTE *)(*((void *)a1 + 7) + v3))
    {
      case 'a':
        unsigned int v6 = "@autoreleased";
        break;
      case 'd':
        unsigned int v6 = "@unowned";
        break;
      case 'k':
        unsigned int v6 = "@pack_out";
        break;
      case 'o':
        unsigned int v6 = "@owned";
        break;
      case 'r':
        break;
      case 'u':
        unsigned int v6 = "@unowned_inner_pointer";
        break;
      default:
        goto LABEL_5;
    }

    unint64_t v8 = (*((void *)a1 + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
    if (!v8 || v8 + 24 > *((void *)a1 + 2))
    {
      unint64_t v9 = 2LL * *((void *)a1 + 4);
      if (v9 <= 0x20) {
        unint64_t v9 = 32LL;
      }
      *((void *)a1 + 4) = v9;
      unint64_t v10 = v9 + 8;
      unint64_t v11 = malloc(v9 + 8);
      unint64_t v12 = (char *)v11 + v10;
      *unint64_t v11 = *((void *)a1 + 3);
      unint64_t v8 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8LL;
      *((void *)a1 + 2) = v12;
      *((void *)a1 + 3) = v11;
    }

    *((void *)a1 + 1) = v8 + 24;
    size_t v13 = strlen(v6);
    *(_WORD *)(v8 + 16) = 106;
    *(_BYTE *)(v8 + 18) = 3;
    *(void *)unint64_t v8 = v6;
    *(void *)(v8 + 8) = v13;
    unint64_t v7 = (*((void *)a1 + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
    if (!v7 || v7 + 24 > *((void *)a1 + 2))
    {
      unint64_t v16 = 2LL * *((void *)a1 + 4);
      if (v16 <= 0x20) {
        unint64_t v16 = 32LL;
      }
      *((void *)a1 + 4) = v16;
      unint64_t v17 = v16 + 8;
      unint64_t v18 = malloc(v16 + 8);
      BOOL v19 = (char *)v18 + v17;
      *unint64_t v18 = *((void *)a1 + 3);
      unint64_t v7 = ((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8LL;
      *((void *)a1 + 2) = v19;
      *((void *)a1 + 3) = v18;
    }

    *((void *)a1 + 1) = v7 + 24;
    *(_WORD *)(v7 + 16) = a2;
    *(_BYTE *)(v7 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v7, (swift::Demangle::__runtime::Node *)v8, a1, v14, v15);
  }

  return v7;
}

unint64_t swift::Demangle::__runtime::Demangler::demanglePrivateContextDescriptor( swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v5 = *((void *)this + 9);
  if (v5 >= *((void *)this + 8)) {
    return 0LL;
  }
  unint64_t v7 = 0LL;
  *((void *)this + 9) = v5 + 1;
  switch(*(_BYTE *)(*((void *)this + 7) + v5))
  {
    case 'A':
      unint64_t v8 = swift::Demangle::__runtime::Demangler::popAssocTypePath(this, a2, a3, a4, a5);
      if (!v8) {
        return 0LL;
      }
      int v11 = *((_DWORD *)this + 24);
      if (!v11) {
        return 0LL;
      }
      unsigned int v12 = v11 - 1;
      size_t v13 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8LL * v12);
      if (*((_WORD *)v13 + 8) != 232) {
        return 0LL;
      }
      unint64_t v14 = (unint64_t)v8;
      *((_DWORD *)this + 24) = v12;
      unint64_t v7 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
      if (!v7 || v7 + 24 > *((void *)this + 2))
      {
        unint64_t v15 = 2LL * *((void *)this + 4);
        if (v15 <= 0x20) {
          unint64_t v15 = 32LL;
        }
        *((void *)this + 4) = v15;
        unint64_t v16 = v15 + 8;
        unint64_t v17 = malloc(v15 + 8);
        unint64_t v18 = (char *)v17 + v16;
        *unint64_t v17 = *((void *)this + 3);
        unint64_t v7 = ((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8LL;
        *((void *)this + 2) = v18;
        *((void *)this + 3) = v17;
      }

      *((void *)this + 1) = v7 + 24;
      __int16 v19 = 294;
      goto LABEL_39;
    case 'E':
      unint64_t v20 = swift::Demangle::__runtime::Demangler::popContext(this, a2, a3, a4, a5);
      if (!v20) {
        return 0LL;
      }
      unint64_t v14 = (unint64_t)v20;
      unint64_t v7 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
      if (!v7 || v7 + 24 > *((void *)this + 2))
      {
        unint64_t v21 = 2LL * *((void *)this + 4);
        if (v21 <= 0x20) {
          unint64_t v21 = 32LL;
        }
        *((void *)this + 4) = v21;
        unint64_t v22 = v21 + 8;
        unsigned int v23 = malloc(v21 + 8);
        int v24 = (char *)v23 + v22;
        *unsigned int v23 = *((void *)this + 3);
        unint64_t v7 = ((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8LL;
        *((void *)this + 2) = v24;
        *((void *)this + 3) = v23;
      }

      *((void *)this + 1) = v7 + 24;
      __int16 v25 = 292;
      goto LABEL_47;
    case 'M':
      int v26 = *((_DWORD *)this + 24);
      if (!v26) {
        return 0LL;
      }
      unsigned int v27 = v26 - 1;
      unint64_t v14 = *(void *)(*((void *)this + 11) + 8LL * v27);
      int v28 = *(unsigned __int16 *)(v14 + 16);
      if (v28 == 101)
      {
        *((_DWORD *)this + 24) = v27;
        unint64_t v14 = swift::Demangle::__runtime::Demangler::changeKind( this,  (swift::Demangle::__runtime::Node **)v14,  153,  a4,  a5);
        if (!v14) {
          return 0LL;
        }
      }

      else
      {
        if (v28 != 153) {
          return 0LL;
        }
        *((_DWORD *)this + 24) = v27;
      }

      unint64_t v7 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
      if (!v7 || v7 + 24 > *((void *)this + 2))
      {
        unint64_t v41 = 2LL * *((void *)this + 4);
        if (v41 <= 0x20) {
          unint64_t v41 = 32LL;
        }
        *((void *)this + 4) = v41;
        unint64_t v42 = v41 + 8;
        unsigned int v43 = malloc(v41 + 8);
        uint64_t v44 = (char *)v43 + v42;
        *unsigned int v43 = *((void *)this + 3);
        unint64_t v7 = ((unint64_t)v43 + 15) & 0xFFFFFFFFFFFFFFF8LL;
        *((void *)this + 2) = v44;
        *((void *)this + 3) = v43;
      }

      *((void *)this + 1) = v7 + 24;
      __int16 v25 = 291;
LABEL_47:
      *(_WORD *)(v7 + 16) = v25;
      *(_BYTE *)(v7 + 18) = 0;
LABEL_48:
      swift::Demangle::__runtime::Node::addChild( (unsigned int *)v7,  (swift::Demangle::__runtime::Node *)v14,  this,  a4,  a5);
      break;
    case 'X':
      int v29 = swift::Demangle::__runtime::Demangler::popContext(this, a2, a3, a4, a5);
      if (!v29) {
        return 0LL;
      }
      unint64_t v14 = (unint64_t)v29;
      unint64_t v7 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
      if (!v7 || v7 + 24 > *((void *)this + 2))
      {
        unint64_t v30 = 2LL * *((void *)this + 4);
        if (v30 <= 0x20) {
          unint64_t v30 = 32LL;
        }
        *((void *)this + 4) = v30;
        unint64_t v31 = v30 + 8;
        unint64_t v32 = malloc(v30 + 8);
        unint64_t v33 = (char *)v32 + v31;
        *unint64_t v32 = *((void *)this + 3);
        unint64_t v7 = ((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8LL;
        *((void *)this + 2) = v33;
        *((void *)this + 3) = v32;
      }

      *((void *)this + 1) = v7 + 24;
      __int16 v25 = 293;
      goto LABEL_47;
    case 'Y':
      int v34 = *((_DWORD *)this + 24);
      if (!v34) {
        return 0LL;
      }
      unsigned int v35 = v34 - 1;
      unint64_t v14 = *(void *)(*((void *)this + 11) + 8LL * v35);
      *((_DWORD *)this + 24) = v35;
      if (!v14) {
        return 0LL;
      }
      uint64_t v36 = swift::Demangle::__runtime::Demangler::popContext(this, a2, a3, a4, a5);
      if (!v36) {
        return 0LL;
      }
      size_t v13 = v36;
      unint64_t v7 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
      if (!v7 || v7 + 24 > *((void *)this + 2))
      {
        unint64_t v37 = 2LL * *((void *)this + 4);
        if (v37 <= 0x20) {
          unint64_t v37 = 32LL;
        }
        *((void *)this + 4) = v37;
        unint64_t v38 = v37 + 8;
        unint64_t v39 = malloc(v37 + 8);
        uint64_t v40 = (char *)v39 + v38;
        void *v39 = *((void *)this + 3);
        unint64_t v7 = ((unint64_t)v39 + 15) & 0xFFFFFFFFFFFFFFF8LL;
        *((void *)this + 2) = v40;
        *((void *)this + 3) = v39;
      }

      *((void *)this + 1) = v7 + 24;
      __int16 v19 = 293;
LABEL_39:
      *(_WORD *)(v7 + 16) = v19;
      *(_BYTE *)(v7 + 18) = 0;
      swift::Demangle::__runtime::Node::addChild((unsigned int *)v7, v13, this, v9, v10);
      goto LABEL_48;
    default:
      return v7;
  }

  return v7;
}

int8x16_t *swift::Demangle::__runtime::Demangler::popAssocTypePath( swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unsigned int v6 = (int8x16_t *)((*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL);
  if (!v6 || (unint64_t)&v6[1].u64[1] > *((void *)this + 2))
  {
    unint64_t v7 = 2LL * *((void *)this + 4);
    if (v7 <= 0x20) {
      unint64_t v7 = 32LL;
    }
    *((void *)this + 4) = v7;
    unint64_t v8 = v7 + 8;
    uint64_t v9 = malloc(v7 + 8);
    unint64_t v10 = (char *)v9 + v8;
    *uint64_t v9 = *((void *)this + 3);
    unsigned int v6 = (int8x16_t *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8LL);
    *((void *)this + 2) = v10;
    *((void *)this + 3) = v9;
  }

  *((void *)this + 1) = (char *)v6 + 24;
  v6[1].i16[0] = 289;
  v6[1].i8[2] = 0;
  do
  {
    int v11 = *((_DWORD *)this + 24);
    if (v11 && (unsigned int v12 = v11 - 1, v13 = *(void *)(*((void *)this + 11) + 8LL * v12), *(_WORD *)(v13 + 16) == 275)) {
      *((_DWORD *)this + 24) = v12;
    }
    else {
      uint64_t v13 = 0LL;
    }
    unint64_t v14 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::popAssocTypeName( this,  a2,  a3,  a4,  a5);
    if (!v14) {
      return 0LL;
    }
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v6, v14, this, v15, v16);
  }

  while (!v13);
  int v17 = v6[1].u8[2];
  if (v17 == 5)
  {
    uint64_t v19 = v6->u32[2];
    if ((_DWORD)v19)
    {
      unint64_t v20 = (void *)(v6->i64[0] + 8 * v19 - 8);
      if ((unint64_t)v20 > v6->i64[0])
      {
        unint64_t v21 = v6->i64[0] + 8;
        do
        {
          uint64_t v22 = *(void *)(v21 - 8);
          *(void *)(v21 - 8) = *v20;
          *v20-- = v22;
          BOOL v23 = v21 >= (unint64_t)v20;
          v21 += 8LL;
        }

        while (!v23);
      }
    }
  }

  else if (v17 == 2)
  {
    *unsigned int v6 = vextq_s8(*v6, *v6, 8uLL);
  }

  return v6;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleAssociatedTypeSimple( swift::Demangle::__runtime::Demangler *this, swift::Demangle::__runtime::Node *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v7 = swift::Demangle::__runtime::Demangler::popAssocTypeName(this, (uint64_t)a2, a3, a4, a5);
  unint64_t v10 = v7;
  if (!a2)
  {
    int v29 = *((_DWORD *)this + 24);
    if (!v29) {
      return 0LL;
    }
    unsigned int v30 = v29 - 1;
    unint64_t v11 = *(void *)(*((void *)this + 11) + 8LL * v30);
    if (*(_WORD *)(v11 + 16) != 232) {
      return 0LL;
    }
    *((_DWORD *)this + 24) = v30;
    if (!v7) {
      return v10;
    }
    goto LABEL_8;
  }

  unint64_t v11 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
  if (!v11 || v11 + 24 > *((void *)this + 2))
  {
    unint64_t v12 = 2LL * *((void *)this + 4);
    if (v12 <= 0x20) {
      unint64_t v12 = 32LL;
    }
    *((void *)this + 4) = v12;
    unint64_t v13 = v12 + 8;
    unint64_t v14 = malloc(v12 + 8);
    uint64_t v15 = (char *)v14 + v13;
    *unint64_t v14 = *((void *)this + 3);
    unint64_t v11 = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    *((void *)this + 2) = v15;
    *((void *)this + 3) = v14;
  }

  *((void *)this + 1) = v11 + 24;
  *(_WORD *)(v11 + 16) = 232;
  *(_BYTE *)(v11 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((unsigned int *)v11, a2, this, v8, v9);
  if (v10)
  {
LABEL_8:
    unint64_t v16 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
    if (!v16 || v16 + 24 > *((void *)this + 2))
    {
      unint64_t v17 = 2LL * *((void *)this + 4);
      if (v17 <= 0x20) {
        unint64_t v17 = 32LL;
      }
      *((void *)this + 4) = v17;
      unint64_t v18 = v17 + 8;
      uint64_t v19 = malloc(v17 + 8);
      unint64_t v20 = (char *)v19 + v18;
      void *v19 = *((void *)this + 3);
      unint64_t v16 = ((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8LL;
      *((void *)this + 2) = v20;
      *((void *)this + 3) = v19;
    }

    *((void *)this + 1) = v16 + 24;
    *(_WORD *)(v16 + 16) = 45;
    *(_BYTE *)(v16 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild( (unsigned int *)v16,  (swift::Demangle::__runtime::Node *)v11,  this,  v8,  v9);
    swift::Demangle::__runtime::Node::addChild( (unsigned int *)v16,  (swift::Demangle::__runtime::Node *)v10,  this,  v21,  v22);
    unint64_t v10 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
    if (!v10 || v10 + 24 > *((void *)this + 2))
    {
      unint64_t v25 = 2LL * *((void *)this + 4);
      if (v25 <= 0x20) {
        unint64_t v25 = 32LL;
      }
      *((void *)this + 4) = v25;
      unint64_t v26 = v25 + 8;
      unsigned int v27 = malloc(v25 + 8);
      int v28 = (char *)v27 + v26;
      *unsigned int v27 = *((void *)this + 3);
      unint64_t v10 = ((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8LL;
      *((void *)this + 2) = v28;
      *((void *)this + 3) = v27;
    }

    *((void *)this + 1) = v10 + 24;
    *(_WORD *)(v10 + 16) = 232;
    *(_BYTE *)(v10 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild( (unsigned int *)v10,  (swift::Demangle::__runtime::Node *)v16,  this,  v23,  v24);
  }

  return v10;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleAssociatedTypeCompound( swift::Demangle::__runtime::Demangler *this, swift::Demangle::__runtime::Node *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unsigned int v6 = (char *)((*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL);
  if (v6) {
    BOOL v7 = (unint64_t)(v6 + 32) > *((void *)this + 2);
  }
  else {
    BOOL v7 = 1;
  }
  if (v7)
  {
    unint64_t v8 = 2LL * *((void *)this + 4);
    if (v8 <= 0x28) {
      unint64_t v8 = 40LL;
    }
    *((void *)this + 4) = v8;
    unint64_t v9 = v8 + 8;
    unint64_t v10 = malloc(v8 + 8);
    unint64_t v11 = (char *)v10 + v9;
    *unint64_t v10 = *((void *)this + 3);
    unsigned int v6 = (char *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8LL);
    *((void *)this + 2) = v11;
    *((void *)this + 3) = v10;
  }

  unsigned int v12 = 0;
  *((void *)this + 1) = v6 + 32;
  unsigned int v13 = 4;
  do
  {
    int v15 = *((_DWORD *)this + 24);
    if (v15 && (unsigned int v16 = v15 - 1, v17 = *(void *)(*((void *)this + 11) + 8LL * v16), *(_WORD *)(v17 + 16) == 275)) {
      *((_DWORD *)this + 24) = v16;
    }
    else {
      uint64_t v17 = 0LL;
    }
    unint64_t v18 = swift::Demangle::__runtime::Demangler::popAssocTypeName(this, (uint64_t)a2, a3, a4, a5);
    if (!v18) {
      return 0LL;
    }
    unint64_t v19 = v18;
    if (v12 >= v13)
    {
      unint64_t v20 = &v6[8 * v13];
      uint64_t v21 = (char *)*((void *)this + 1);
      if (v20 == v21)
      {
        uint64_t v23 = v20 + 8;
        unint64_t v22 = *((void *)this + 2);
        if ((unint64_t)v23 <= v22)
        {
          *((void *)this + 1) = v23;
          LODWORD(v24) = 1;
LABEL_11:
          v13 += v24;
          goto LABEL_12;
        }
      }

      else
      {
        unint64_t v22 = *((void *)this + 2);
      }

      if (2 * v13 <= 4) {
        uint64_t v24 = 4LL;
      }
      else {
        uint64_t v24 = 2 * v13;
      }
      uint64_t v25 = 8 * (v24 + v13);
      unint64_t v26 = (char *)((unint64_t)(v21 + 7) & 0xFFFFFFFFFFFFFFF8LL);
      if (!v26 || (unint64_t)&v26[v25] > v22)
      {
        unint64_t v27 = 2LL * *((void *)this + 4);
        if (v27 <= v25 + 8) {
          unint64_t v27 = v25 + 8;
        }
        *((void *)this + 4) = v27;
        unint64_t v28 = v27 + 8;
        int v29 = malloc(v27 + 8);
        unsigned int v30 = (char *)v29 + v28;
        *int v29 = *((void *)this + 3);
        unint64_t v26 = (char *)(((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8LL);
        *((void *)this + 2) = v30;
        *((void *)this + 3) = v29;
      }

      *((void *)this + 1) = &v26[v25];
      if (v13) {
        memcpy(v26, v6, 8LL * v13);
      }
      unsigned int v6 = v26;
      goto LABEL_11;
    }

unint64_t swift::Demangle::__runtime::Demangler::popAssocTypeName( swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5 = *((_DWORD *)this + 24);
  if (!v5) {
    return 0LL;
  }
  int v7 = v5 - 1;
  uint64_t v8 = *((void *)this + 11);
  unint64_t v9 = *(unsigned __int16 **)(v8 + 8LL * (v5 - 1));
  int v10 = v9[8];
  if (v10 == 181)
  {
LABEL_16:
    *((_DWORD *)this + 24) = v7;
    int v5 = v7;
    if (!v7) {
      return 0LL;
    }
    goto LABEL_19;
  }

  if (v10 != 232)
  {
LABEL_15:
    int v7 = v5 - 1;
    unint64_t v9 = *(unsigned __int16 **)(v8 + 8LL * (v5 - 1));
    if (v9[8] != 347)
    {
      unint64_t v9 = 0LL;
      goto LABEL_19;
    }

    goto LABEL_16;
  }

  *((_DWORD *)this + 24) = v7;
  unint64_t v11 = v9;
  while ((unsigned __int16)v10 == 232)
  {
    unint64_t v11 = *(unsigned __int16 **)v11;
    LOWORD(v10) = v11[8];
  }

  if (!v9)
  {
    int v5 = v7;
    if (!v7) {
      return 0LL;
    }
    goto LABEL_15;
  }

  int v5 = v7;
  if (!v7) {
    return 0LL;
  }
LABEL_19:
  unsigned int v12 = *(swift::Demangle::__runtime::Node **)(v8 + 8LL * (v5 - 1));
  if (*((_WORD *)v12 + 8) != 101) {
    return 0LL;
  }
  *((_DWORD *)this + 24) = v5 - 1;
  unint64_t v13 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
  if (!v13 || v13 + 24 > *((void *)this + 2))
  {
    unint64_t v14 = 2LL * *((void *)this + 4);
    if (v14 <= 0x20) {
      unint64_t v14 = 32LL;
    }
    *((void *)this + 4) = v14;
    unint64_t v15 = v14 + 8;
    unsigned int v16 = malloc(v14 + 8);
    uint64_t v17 = (char *)v16 + v15;
    *unsigned int v16 = *((void *)this + 3);
    unint64_t v13 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    *((void *)this + 2) = v17;
    *((void *)this + 3) = v16;
  }

  *((void *)this + 1) = v13 + 24;
  *(_WORD *)(v13 + 16) = 35;
  *(_BYTE *)(v13 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((unsigned int *)v13, v12, this, a4, a5);
  if (v9 && v13) {
    swift::Demangle::__runtime::Node::addChild( (unsigned int *)v13,  (swift::Demangle::__runtime::Node *)v9,  this,  v18,  v19);
  }
  return v13;
}

unsigned int *swift::Demangle::__runtime::Demangler::demangleGenericSpecialization( swift::Demangle::__runtime::NodeFactory *a1, __int16 a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v10 = (unsigned int *)swift::Demangle::__runtime::Demangler::demangleSpecAttributes(a1, a2, a3, a4, a5);
  if (!v10) {
    return v10;
  }
  unint64_t v11 = swift::Demangle::__runtime::Demangler::popTypeList(a1, v6, v7, v8, v9);
  if (!v11) {
    return 0LL;
  }
  int v14 = v11[1].u8[2];
  unint64_t v15 = (swift::Demangle::__runtime::Node **)v11;
  if ((v14 - 1) >= 2)
  {
    if (v14 == 5)
    {
      uint64_t v16 = v11->i64[0];
      unint64_t v15 = (swift::Demangle::__runtime::Node **)v11->i64[0];
LABEL_12:
      uint64_t v17 = (int8x16_t *)(v16 + 8LL * v11->u32[2]);
      if (v15 == (swift::Demangle::__runtime::Node **)v17) {
        return v10;
      }
      goto LABEL_22;
    }

    unint64_t v15 = 0LL;
  }

  switch(v14)
  {
    case 1:
      uint64_t v17 = (int8x16_t *)&v11->u64[1];
      if (v15 == (swift::Demangle::__runtime::Node **)&v11->u64[1]) {
        return v10;
      }
      break;
    case 2:
      uint64_t v17 = v11 + 1;
      if (v15 == (swift::Demangle::__runtime::Node **)&v11[1]) {
        return v10;
      }
      break;
    case 5:
      uint64_t v16 = v11->i64[0];
      goto LABEL_12;
    default:
      uint64_t v17 = 0LL;
      if (!v15) {
        return v10;
      }
      goto LABEL_22;
  }

  do
  {
LABEL_22:
    unint64_t v19 = *v15;
    if (*v15)
    {
      unint64_t v18 = (*((void *)a1 + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
      if (!v18 || v18 + 24 > *((void *)a1 + 2))
      {
        unint64_t v20 = 2LL * *((void *)a1 + 4);
        if (v20 <= 0x20) {
          unint64_t v20 = 32LL;
        }
        *((void *)a1 + 4) = v20;
        unint64_t v21 = v20 + 8;
        unint64_t v22 = malloc(v20 + 8);
        uint64_t v23 = (char *)v22 + v21;
        *unint64_t v22 = *((void *)a1 + 3);
        unint64_t v18 = ((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8LL;
        *((void *)a1 + 2) = v23;
        *((void *)a1 + 3) = v22;
      }

      *((void *)a1 + 1) = v18 + 24;
      *(_WORD *)(v18 + 16) = 94;
      *(_BYTE *)(v18 + 18) = 0;
      swift::Demangle::__runtime::Node::addChild((unsigned int *)v18, v19, a1, v12, v13);
    }

    else
    {
      unint64_t v18 = 0LL;
    }

    swift::Demangle::__runtime::Node::addChild(v10, (swift::Demangle::__runtime::Node *)v18, a1, v12, v13);
    ++v15;
  }

  while (v15 != (swift::Demangle::__runtime::Node **)v17);
  return v10;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleSpecAttributes( swift::Demangle::__runtime::NodeFactory *a1, __int16 a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v8 = *((void *)a1 + 8);
  unint64_t v7 = *((void *)a1 + 9);
  if (v7 < v8 && *(_BYTE *)(*((void *)a1 + 7) + v7) == 109)
  {
    *((void *)a1 + 9) = ++v7;
    int v9 = 1;
    if (v7 >= v8) {
      goto LABEL_9;
    }
  }

  else
  {
    int v9 = 0;
    if (v7 >= v8) {
      goto LABEL_9;
    }
  }

  if (*(_BYTE *)(*((void *)a1 + 7) + v7) == 113)
  {
    *((void *)a1 + 9) = ++v7;
    int v10 = 1;
    if (v7 >= v8) {
      goto LABEL_13;
    }
    goto LABEL_10;
  }

uint64_t swift::Demangle::__runtime::Demangler::demangleFunctionSpecialization( swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v9 = swift::Demangle::__runtime::Demangler::demangleSpecAttributes(this, 77, a3, a4, a5);
  if (v9)
  {
    while (1)
    {
      unint64_t v10 = *((void *)this + 9);
      if (v10 < *((void *)this + 8) && *(_BYTE *)(*((void *)this + 7) + v10) == 95) {
        break;
      }
      int v11 = swift::Demangle::__runtime::Demangler::demangleFuncSpecParam(this, 78, v6, v7, v8);
      if (!v11)
      {
        unint64_t v9 = 0LL;
        goto LABEL_8;
      }

      swift::Demangle::__runtime::Node::addChild((unsigned int *)v9, v11, this, v7, v8);
    }

    *((void *)this + 9) = v10 + 1;
  }

void std::vector<swift::Demangle::__runtime::Node *>::push_back[abi:nn180100](void **a1, void *a2)
{
  int v5 = (char *)a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  uint64_t v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    unint64_t v8 = (char *)*a1;
    uint64_t v9 = v5 - (_BYTE *)*a1;
    uint64_t v10 = v9 >> 3;
    unint64_t v11 = (v9 >> 3) + 1;
    if (v11 >> 61) {
      abort();
    }
    uint64_t v12 = v4 - (void)v8;
    if (v12 >> 2 > v11) {
      unint64_t v11 = v12 >> 2;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      if (v13 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      unint64_t v14 = operator new(8 * v13);
    }

    else
    {
      unint64_t v14 = 0LL;
    }

    uint64_t v15 = &v14[8 * v10];
    *uint64_t v15 = *a2;
    uint64_t v7 = v15 + 1;
    if (v5 != v8)
    {
      unint64_t v16 = v5 - v8 - 8;
      if (v16 < 0x58) {
        goto LABEL_28;
      }
      uint64_t v17 = (v16 >> 3) + 1;
      uint64_t v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v6 = &v5[-v18];
      uint64_t v15 = (void *)((char *)v15 - v18);
      unint64_t v19 = &v14[8 * v10 - 16];
      unsigned int v20 = (__int128 *)(v5 - 16);
      uint64_t v21 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        __int128 v22 = *v20;
        *(v19 - 1) = *(v20 - 1);
        _OWORD *v19 = v22;
        v19 -= 2;
        v20 -= 2;
        v21 -= 4LL;
      }

      while (v21);
      if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_28:
        do
        {
          uint64_t v23 = *((void *)v6 - 1);
          v6 -= 8;
          *--uint64_t v15 = v23;
        }

        while (v6 != v8);
      }

      uint64_t v6 = (char *)*a1;
    }

    *a1 = v15;
    a1[1] = v7;
    a1[2] = &v14[8 * v13];
    if (v6) {
      operator delete(v6);
    }
  }

  else
  {
    *(void *)int v5 = *a2;
    uint64_t v7 = v5 + 8;
  }

  a1[1] = v7;
}

double swift::Demangle::__runtime::Demangler::demangleBridgedMethodParams@<D0>( swift::Demangle::__runtime::Demangler *this@<X0>, std::string *a2@<X8>)
{
  unint64_t v3 = *((void *)this + 9);
  if (v3 >= *((void *)this + 8)) {
    goto LABEL_22;
  }
  if (*(_BYTE *)(*((void *)this + 7) + v3) == 95)
  {
    *((void *)this + 9) = v3 + 1;
    a2->__r_.__value_.__l.__size_ = 0LL;
    a2->__r_.__value_.__l.__cap_ = 0LL;
    a2->__r_.__value_.__r.__words[0] = 0LL;
    return result;
  }

  memset(&v12, 0, sizeof(v12));
  *((void *)this + 9) = v3 + 1;
  int v5 = *(char *)(*((void *)this + 7) + v3);
  if ((v5 - 97) > 0xF || ((1 << (v5 - 97)) & 0xD001) == 0)
  {
LABEL_22:
    a2->__r_.__value_.__r.__words[0] = 0LL;
    a2->__r_.__value_.__l.__size_ = 0LL;
    a2->__r_.__value_.__l.__cap_ = 0LL;
    return result;
  }

  std::string::push_back(&v12, v5);
  do
  {
    unint64_t v8 = *((void *)this + 9);
    if (v8 >= *((void *)this + 8))
    {
      int v10 = 0;
LABEL_17:
      a2->__r_.__value_.__r.__words[0] = 0LL;
      a2->__r_.__value_.__l.__size_ = 0LL;
      a2->__r_.__value_.__l.__cap_ = 0LL;
      continue;
    }

    int v9 = *(unsigned __int8 *)(*((void *)this + 7) + v8);
    *((void *)this + 9) = v8 + 1;
    if (v9 == 95)
    {
      double result = *(double *)&v12.__r_.__value_.__l.__data_;
      *a2 = v12;
      return result;
    }

    int v10 = *(unsigned __int8 *)(*((void *)this + 7) + v8);
    std::string::push_back(&v12, v10);
  }

  while ((v10 - 98) <= 0xC && ((1 << (v10 - 98)) & 0x1021) != 0);
  return result;
}

unsigned int *swift::Demangle::__runtime::Demangler::demangleAutoDiffSubsetParametersThunk( swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v6 = (int8x16_t *)((*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL);
  if (!v6 || (unint64_t)&v6[1].u64[1] > *((void *)this + 2))
  {
    unint64_t v7 = 2LL * *((void *)this + 4);
    if (v7 <= 0x20) {
      unint64_t v7 = 32LL;
    }
    *((void *)this + 4) = v7;
    unint64_t v8 = v7 + 8;
    int v9 = malloc(v7 + 8);
    int v10 = (char *)v9 + v8;
    *int v9 = *((void *)this + 3);
    uint64_t v6 = (int8x16_t *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8LL);
    *((void *)this + 2) = v10;
    *((void *)this + 3) = v9;
  }

  *((void *)this + 1) = (char *)v6 + 24;
  v6[1].i16[0] = 323;
  v6[1].i8[2] = 0;
  int v11 = *((_DWORD *)this + 24);
  if (v11)
  {
    do
    {
      unsigned int v12 = v11 - 1;
      unint64_t v13 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8LL * v12);
      *((_DWORD *)this + 24) = v12;
      if (!v13) {
        break;
      }
      swift::Demangle::__runtime::Node::addChild((unsigned int *)v6, v13, this, a4, a5);
      int v11 = *((_DWORD *)this + 24);
    }

    while (v11);
    int v14 = v6[1].u8[2];
    if (v14 == 5)
    {
      unint64_t v15 = v6->i64[0];
      uint64_t v16 = v6->u32[2];
      uint64_t v17 = (void *)(v6->i64[0] + 8 * v16 - 8);
      if ((_DWORD)v16) {
        BOOL v18 = (unint64_t)v17 > v15;
      }
      else {
        BOOL v18 = 0;
      }
      if (v18)
      {
        unint64_t v19 = v15 + 8;
        do
        {
          uint64_t v20 = *(void *)(v19 - 8);
          *(void *)(v19 - 8) = *v17;
          *v17-- = v20;
          BOOL v21 = v19 >= (unint64_t)v17;
          v19 += 8LL;
        }

        while (!v21);
      }
    }

    else if (v14 == 2)
    {
      *uint64_t v6 = vextq_s8(*v6, *v6, 8uLL);
    }
  }

  unint64_t v22 = *((void *)this + 9);
  if (v22 >= *((void *)this + 8))
  {
    int v23 = 0;
  }

  else
  {
    *((void *)this + 9) = v22 + 1;
    int v23 = *(unsigned __int8 *)(*((void *)this + 7) + v22);
  }

  HIDWORD(v24) = v23;
  LODWORD(v24) = (v23 << 24) - 1677721600;
  unsigned int v25 = (v24 >> 25);
  BOOL v18 = v25 > 7;
  int v26 = (1 << v25) & 0xC3;
  if (v18 || v26 == 0)
  {
    uint64_t v6 = 0LL;
  }

  else
  {
    uint64_t v28 = (char)v23;
    unint64_t v29 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
    if (!v29 || v29 + 24 > *((void *)this + 2))
    {
      unint64_t v30 = 2LL * *((void *)this + 4);
      if (v30 <= 0x20) {
        unint64_t v30 = 32LL;
      }
      *((void *)this + 4) = v30;
      unint64_t v31 = v30 + 8;
      uint64_t v32 = malloc(v30 + 8);
      *uint64_t v32 = *((void *)this + 3);
      unint64_t v29 = ((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8LL;
      *((void *)this + 2) = (char *)v32 + v31;
      *((void *)this + 3) = v32;
    }

    *((void *)this + 1) = v29 + 24;
    *(_WORD *)(v29 + 16) = 321;
    *(_BYTE *)(v29 + 18) = 4;
    *(void *)unint64_t v29 = v28;
    if (v6) {
      swift::Demangle::__runtime::Node::addChild( (unsigned int *)v6,  (swift::Demangle::__runtime::Node *)v29,  this,  a4,  a5);
    }
  }

  unint64_t v33 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleIndexSubset(this);
  unint64_t v36 = 0LL;
  if (v6 && v33)
  {
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v6, v33, this, v34, v35);
    unint64_t v36 = (unsigned int *)v6;
  }

  unint64_t v37 = *((void *)this + 9);
  if (v37 >= *((void *)this + 8) || *(_BYTE *)(*((void *)this + 7) + v37) != 112) {
    return 0LL;
  }
  *((void *)this + 9) = v37 + 1;
  int v38 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleIndexSubset(this);
  unint64_t v41 = 0LL;
  if (v36 && v38)
  {
    swift::Demangle::__runtime::Node::addChild(v36, v38, this, v39, v40);
    unint64_t v41 = v36;
  }

  unint64_t v42 = *((void *)this + 9);
  if (v42 >= *((void *)this + 8) || *(_BYTE *)(*((void *)this + 7) + v42) != 114) {
    return 0LL;
  }
  *((void *)this + 9) = v42 + 1;
  BOOL v43 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleIndexSubset(this);
  double result = 0LL;
  if (v41 && v43)
  {
    swift::Demangle::__runtime::Node::addChild(v41, v43, this, v44, v45);
    double result = v41;
  }

  unint64_t v47 = *((void *)this + 9);
  if (v47 >= *((void *)this + 8) || *(_BYTE *)(*((void *)this + 7) + v47) != 80) {
    return 0LL;
  }
  *((void *)this + 9) = v47 + 1;
  return result;
}

int8x16_t *swift::Demangle::__runtime::Demangler::demangleAutoDiffSelfReorderingReabstractionThunk( swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v6 = (int8x16_t *)((*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL);
  if (!v6 || (unint64_t)&v6[1].u64[1] > *((void *)this + 2))
  {
    unint64_t v7 = 2LL * *((void *)this + 4);
    if (v7 <= 0x20) {
      unint64_t v7 = 32LL;
    }
    *((void *)this + 4) = v7;
    unint64_t v8 = v7 + 8;
    int v9 = malloc(v7 + 8);
    int v10 = (char *)v9 + v8;
    *int v9 = *((void *)this + 3);
    uint64_t v6 = (int8x16_t *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8LL);
    *((void *)this + 2) = v10;
    *((void *)this + 3) = v9;
  }

  *((void *)this + 1) = (char *)v6 + 24;
  v6[1].i16[0] = 322;
  v6[1].i8[2] = 0;
  int v11 = *((_DWORD *)this + 24);
  if (!v11) {
    goto LABEL_18;
  }
  unsigned int v12 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8LL * (v11 - 1));
  if (*((_WORD *)v12 + 8) == 43)
  {
    *((_DWORD *)this + 24) = v11 - 1;
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v6, v12, this, a4, a5);
    int v11 = *((_DWORD *)this + 24);
    if (!v11) {
      goto LABEL_18;
    }
  }

  unint64_t v13 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8LL * (v11 - 1));
  if (*((_WORD *)v13 + 8) == 232)
  {
    *((_DWORD *)this + 24) = v11 - 1;
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v6, v13, this, a4, a5);
    int v11 = *((_DWORD *)this + 24);
    if (!v11) {
      goto LABEL_18;
    }
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  unsigned int v14 = v11 - 1;
  unint64_t v15 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8LL * v14);
  if (*((_WORD *)v15 + 8) != 232)
  {
LABEL_18:
    uint64_t v6 = 0LL;
    goto LABEL_19;
  }

  *((_DWORD *)this + 24) = v14;
  if (v6)
  {
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v6, v15, this, a4, a5);
    int v16 = v6[1].u8[2];
    if (v16 == 5)
    {
      uint64_t v30 = v6->u32[2];
      if ((_DWORD)v30)
      {
        unint64_t v31 = (void *)(v6->i64[0] + 8 * v30 - 8);
        if ((unint64_t)v31 > v6->i64[0])
        {
          unint64_t v32 = v6->i64[0] + 8;
          do
          {
            uint64_t v33 = *(void *)(v32 - 8);
            *(void *)(v32 - 8) = *v31;
            *v31-- = v33;
            BOOL v34 = v32 >= (unint64_t)v31;
            v32 += 8LL;
          }

          while (!v34);
        }
      }
    }

    else if (v16 == 2)
    {
      *uint64_t v6 = vextq_s8(*v6, *v6, 8uLL);
    }
  }

unsigned int *swift::Demangle::__runtime::Demangler::demangleAutoDiffFunctionOrSimpleThunk( swift::Demangle::__runtime::NodeFactory *a1, __int16 a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v7 = (int8x16_t *)((*((void *)a1 + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL);
  if (!v7 || (unint64_t)&v7[1].u64[1] > *((void *)a1 + 2))
  {
    unint64_t v8 = 2LL * *((void *)a1 + 4);
    if (v8 <= 0x20) {
      unint64_t v8 = 32LL;
    }
    *((void *)a1 + 4) = v8;
    unint64_t v9 = v8 + 8;
    int v10 = malloc(v8 + 8);
    int v11 = (char *)v10 + v9;
    *int v10 = *((void *)a1 + 3);
    unint64_t v7 = (int8x16_t *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8LL);
    *((void *)a1 + 2) = v11;
    *((void *)a1 + 3) = v10;
  }

  *((void *)a1 + 1) = (char *)v7 + 24;
  v7[1].i16[0] = a2;
  v7[1].i8[2] = 0;
  int v12 = *((_DWORD *)a1 + 24);
  if (v12)
  {
    do
    {
      unsigned int v13 = v12 - 1;
      unsigned int v14 = *(swift::Demangle::__runtime::Node **)(*((void *)a1 + 11) + 8LL * v13);
      *((_DWORD *)a1 + 24) = v13;
      if (!v14) {
        break;
      }
      swift::Demangle::__runtime::Node::addChild((unsigned int *)v7, v14, a1, a4, a5);
      int v12 = *((_DWORD *)a1 + 24);
    }

    while (v12);
    int v15 = v7[1].u8[2];
    if (v15 == 5)
    {
      unint64_t v16 = v7->i64[0];
      uint64_t v17 = v7->u32[2];
      int v18 = (void *)(v7->i64[0] + 8 * v17 - 8);
      if ((_DWORD)v17) {
        BOOL v19 = (unint64_t)v18 > v16;
      }
      else {
        BOOL v19 = 0;
      }
      if (v19)
      {
        unint64_t v20 = v16 + 8;
        do
        {
          uint64_t v21 = *(void *)(v20 - 8);
          *(void *)(v20 - 8) = *v18;
          *v18-- = v21;
          BOOL v22 = v20 >= (unint64_t)v18;
          v20 += 8LL;
        }

        while (!v22);
      }
    }

    else if (v15 == 2)
    {
      *unint64_t v7 = vextq_s8(*v7, *v7, 8uLL);
    }
  }

  unint64_t v23 = *((void *)a1 + 9);
  if (v23 >= *((void *)a1 + 8))
  {
    int v24 = 0;
  }

  else
  {
    *((void *)a1 + 9) = v23 + 1;
    int v24 = *(unsigned __int8 *)(*((void *)a1 + 7) + v23);
  }

  HIDWORD(v25) = v24;
  LODWORD(v25) = (v24 << 24) - 1677721600;
  unsigned int v26 = (v25 >> 25);
  BOOL v19 = v26 > 7;
  int v27 = (1 << v26) & 0xC3;
  if (v19 || v27 == 0)
  {
    unint64_t v7 = 0LL;
  }

  else
  {
    uint64_t v29 = (char)v24;
    unint64_t v30 = (*((void *)a1 + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
    if (!v30 || v30 + 24 > *((void *)a1 + 2))
    {
      unint64_t v31 = 2LL * *((void *)a1 + 4);
      if (v31 <= 0x20) {
        unint64_t v31 = 32LL;
      }
      *((void *)a1 + 4) = v31;
      unint64_t v32 = v31 + 8;
      uint64_t v33 = malloc(v31 + 8);
      *uint64_t v33 = *((void *)a1 + 3);
      unint64_t v30 = ((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8LL;
      *((void *)a1 + 2) = (char *)v33 + v32;
      *((void *)a1 + 3) = v33;
    }

    *((void *)a1 + 1) = v30 + 24;
    *(_WORD *)(v30 + 16) = 321;
    *(_BYTE *)(v30 + 18) = 4;
    *(void *)unint64_t v30 = v29;
    if (v7) {
      swift::Demangle::__runtime::Node::addChild( (unsigned int *)v7,  (swift::Demangle::__runtime::Node *)v30,  a1,  a4,  a5);
    }
  }

  BOOL v34 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleIndexSubset(a1);
  unint64_t v37 = 0LL;
  if (v7 && v34)
  {
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v7, v34, a1, v35, v36);
    unint64_t v37 = (unsigned int *)v7;
  }

  unint64_t v38 = *((void *)a1 + 9);
  if (v38 >= *((void *)a1 + 8) || *(_BYTE *)(*((void *)a1 + 7) + v38) != 112) {
    return 0LL;
  }
  *((void *)a1 + 9) = v38 + 1;
  uint64_t v39 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleIndexSubset(a1);
  double result = 0LL;
  if (v37 && v39)
  {
    swift::Demangle::__runtime::Node::addChild(v37, v39, a1, v40, v41);
    double result = v37;
  }

  unint64_t v43 = *((void *)a1 + 9);
  if (v43 >= *((void *)a1 + 8) || *(_BYTE *)(*((void *)a1 + 7) + v43) != 114) {
    return 0LL;
  }
  *((void *)a1 + 9) = v43 + 1;
  return result;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleIndexSubset( swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2 = *((void *)this + 9);
  if (v2 >= *((void *)this + 8)) {
    std::string::value_type v3 = 0;
  }
  else {
    std::string::value_type v3 = *(_BYTE *)(*((void *)this + 7) + v2);
  }
  while (v3 == 83 || v3 == 85)
  {
    std::string::push_back(&v10, v3);
    unint64_t v5 = *((void *)this + 8);
    unint64_t v4 = *((void *)this + 9);
    if (v4 < v5) {
      *((void *)this + 9) = ++v4;
    }
    std::string::value_type v3 = 0;
    if (v4 < v5) {
      std::string::value_type v3 = *(_BYTE *)(*((void *)this + 7) + v4);
    }
  }

  if ((v10.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    size_t size = v10.__r_.__value_.__s.__size_;
  }
  else {
    size_t size = v10.__r_.__value_.__l.__size_;
  }
  if (!size)
  {
    unint64_t Node = 0LL;
    if ((v10.__r_.__value_.__s.__size_ & 0x80) == 0) {
      return Node;
    }
    goto LABEL_18;
  }

  if ((v10.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    unint64_t v7 = &v10;
  }
  else {
    unint64_t v7 = (std::string *)v10.__r_.__value_.__r.__words[0];
  }
  unint64_t Node = swift::Demangle::__runtime::NodeFactory::createNode(this, 327, v7, size);
  if ((v10.__r_.__value_.__s.__size_ & 0x80) != 0) {
LABEL_18:
  }
    operator delete(v10.__r_.__value_.__l.__data_);
  return Node;
}

unsigned int *swift::Demangle::__runtime::Demangler::demangleDifferentiabilityWitness( swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v6 = (int8x16_t *)((*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL);
  if (!v6 || (unint64_t)&v6[1].u64[1] > *((void *)this + 2))
  {
    unint64_t v7 = 2LL * *((void *)this + 4);
    if (v7 <= 0x20) {
      unint64_t v7 = 32LL;
    }
    *((void *)this + 4) = v7;
    unint64_t v8 = v7 + 8;
    unint64_t v9 = malloc(v7 + 8);
    *unint64_t v9 = *((void *)this + 3);
    uint64_t v6 = (int8x16_t *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8LL);
    *((void *)this + 2) = (char *)v9 + v8;
    *((void *)this + 3) = v9;
  }

  *((void *)this + 1) = (char *)v6 + 24;
  v6[1].i16[0] = 325;
  v6[1].i8[2] = 0;
  int v10 = *((_DWORD *)this + 24);
  if (v10)
  {
    int v11 = v10 - 1;
    int v12 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8LL * (v10 - 1));
    if (*((_WORD *)v12 + 8) == 43)
    {
      *((_DWORD *)this + 24) = v11;
      if (v10 == 1) {
        goto LABEL_25;
      }
    }

    else
    {
      int v12 = 0LL;
      int v11 = *((_DWORD *)this + 24);
    }

    do
    {
      unsigned int v13 = v11 - 1;
      unsigned int v14 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8LL * v13);
      *((_DWORD *)this + 24) = v13;
      if (!v14) {
        break;
      }
      swift::Demangle::__runtime::Node::addChild((unsigned int *)v6, v14, this, a4, a5);
      int v11 = *((_DWORD *)this + 24);
    }

    while (v11);
    int v15 = v6[1].u8[2];
    if (v15 == 5)
    {
      unint64_t v16 = v6->i64[0];
      uint64_t v17 = v6->u32[2];
      int v18 = (void *)(v6->i64[0] + 8 * v17 - 8);
      if ((_DWORD)v17) {
        BOOL v19 = (unint64_t)v18 > v16;
      }
      else {
        BOOL v19 = 0;
      }
      if (v19)
      {
        unint64_t v20 = v16 + 8;
        do
        {
          uint64_t v21 = *(void *)(v20 - 8);
          *(void *)(v20 - 8) = *v18;
          *v18-- = v21;
          BOOL v22 = v20 >= (unint64_t)v18;
          v20 += 8LL;
        }

        while (!v22);
      }
    }

    else if (v15 == 2)
    {
      *uint64_t v6 = vextq_s8(*v6, *v6, 8uLL);
    }
  }

  else
  {
    int v12 = 0LL;
  }

swift::Demangle::__runtime::Node *swift::Demangle::__runtime::Demangler::demangleFuncSpecParam( swift::Demangle::__runtime::NodeFactory *a1, __int16 a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v7 = (*((void *)a1 + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
  if (!v7 || (unint64_t v8 = *((void *)a1 + 2), v7 + 24 > v8))
  {
    unint64_t v9 = 2LL * *((void *)a1 + 4);
    if (v9 <= 0x20) {
      unint64_t v9 = 32LL;
    }
    *((void *)a1 + 4) = v9;
    unint64_t v10 = v9 + 8;
    int v11 = malloc(v9 + 8);
    unint64_t v8 = (unint64_t)v11 + v10;
    *int v11 = *((void *)a1 + 3);
    unint64_t v7 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    *((void *)a1 + 2) = v8;
    *((void *)a1 + 3) = v11;
  }

  *((void *)a1 + 1) = v7 + 24;
  *(_WORD *)(v7 + 16) = a2;
  *(_BYTE *)(v7 + 18) = 0;
  unint64_t v12 = *((void *)a1 + 8);
  unint64_t v13 = *((void *)a1 + 9);
  if (v13 >= v12) {
    return 0LL;
  }
  unint64_t v14 = v13 + 1;
  *((void *)a1 + 9) = v13 + 1;
  uint64_t v15 = *((void *)a1 + 7);
  double result = (swift::Demangle::__runtime::Node *)v7;
  switch(*(_BYTE *)(v15 + v13))
  {
    case 'c':
      unint64_t v17 = (v7 + 31) & 0xFFFFFFFFFFFFFFF8LL;
      if (v17) {
        BOOL v18 = v17 + 24 > v8;
      }
      else {
        BOOL v18 = 1;
      }
      if (v18)
      {
        unint64_t v19 = 2LL * *((void *)a1 + 4);
        if (v19 <= 0x20) {
          unint64_t v19 = 32LL;
        }
        *((void *)a1 + 4) = v19;
        unint64_t v20 = v19 + 8;
        uint64_t v21 = malloc(v19 + 8);
        *uint64_t v21 = *((void *)a1 + 3);
        unint64_t v17 = ((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8LL;
        *((void *)a1 + 2) = (char *)v21 + v20;
        *((void *)a1 + 3) = v21;
      }

      *((void *)a1 + 1) = v17 + 24;
      *(_WORD *)(v17 + 16) = 80;
      *(_BYTE *)(v17 + 18) = 4;
      *(void *)unint64_t v17 = 5LL;
      break;
    case 'd':
      if (v14 < v12 && *(_BYTE *)(v15 + v14) == 71)
      {
        unint64_t v14 = v13 + 2;
        *((void *)a1 + 9) = v13 + 2;
        unsigned int v22 = 192;
      }

      else
      {
        unsigned int v22 = 64;
      }

      goto LABEL_74;
    case 'e':
      if (v14 < v12 && *(_BYTE *)(v15 + v14) == 68)
      {
        unint64_t v14 = v13 + 2;
        *((void *)a1 + 9) = v13 + 2;
        unsigned int v22 = 1088;
      }

      else
      {
        unsigned int v22 = 1024;
      }

      if (v14 < v12 && *(_BYTE *)(v15 + v14) == 71)
      {
        *((void *)a1 + 9) = ++v14;
        v22 |= 0x80u;
      }

swift::Demangle::__runtime::Node *swift::Demangle::__runtime::Demangler::addFuncSpecParamNumber( swift::Demangle::__runtime::NodeFactory *a1, swift::Demangle::__runtime::Node *this, unsigned int a3, uint64_t a4, const char *a5)
{
  uint64_t v7 = a3;
  unint64_t v8 = (*((void *)a1 + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
  if (!v8 || v8 + 24 > *((void *)a1 + 2))
  {
    unint64_t v9 = 2LL * *((void *)a1 + 4);
    if (v9 <= 0x20) {
      unint64_t v9 = 32LL;
    }
    *((void *)a1 + 4) = v9;
    unint64_t v10 = v9 + 8;
    int v11 = malloc(v9 + 8);
    *int v11 = *((void *)a1 + 3);
    unint64_t v8 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    *((void *)a1 + 2) = (char *)v11 + v10;
    *((void *)a1 + 3) = v11;
  }

  *((void *)a1 + 1) = v8 + 24;
  *(_WORD *)(v8 + 16) = 80;
  *(_BYTE *)(v8 + 18) = 4;
  *(void *)unint64_t v8 = v7;
  swift::Demangle::__runtime::Node::addChild((unsigned int *)this, (swift::Demangle::__runtime::Node *)v8, a1, a4, a5);
  unint64_t v14 = *((void *)a1 + 9);
  if (v14 >= *((void *)a1 + 8)) {
    return 0LL;
  }
  unint64_t v37 = this;
  uint64_t v15 = 0LL;
  unsigned int v16 = 0;
  unsigned int v17 = 0;
  while (1)
  {
    uint64_t v19 = *((void *)a1 + 7);
    *((void *)a1 + 9) = v14 + 1;
    char v20 = *(_BYTE *)(v19 + v14);
    if (v17 < v16) {
      goto LABEL_10;
    }
    uint64_t v21 = &v15[v16];
    unsigned int v22 = (char *)*((void *)a1 + 1);
    if (v21 != v22)
    {
      unint64_t v23 = *((void *)a1 + 2);
LABEL_16:
      if (2 * v16 <= 4) {
        uint64_t v25 = 4LL;
      }
      else {
        uint64_t v25 = 2 * v16;
      }
      uint64_t v26 = v25 + v16;
      if (!v22 || (unint64_t)&v22[v26] > v23)
      {
        unint64_t v27 = 2LL * *((void *)a1 + 4);
        if (v27 <= v26 + 1) {
          unint64_t v27 = v26 + 1;
        }
        *((void *)a1 + 4) = v27;
        unint64_t v28 = v27 + 8;
        unint64_t v29 = malloc(v27 + 8);
        unint64_t v30 = (char *)v29 + v28;
        *unint64_t v29 = *((void *)a1 + 3);
        unsigned int v22 = (char *)(v29 + 1);
        *((void *)a1 + 2) = v30;
        *((void *)a1 + 3) = v29;
      }

      *((void *)a1 + 1) = &v22[v26];
      if (v16) {
        memcpy(v22, v15, v16);
      }
      uint64_t v15 = v22;
      goto LABEL_9;
    }

    BOOL v24 = v21 + 1;
    unint64_t v23 = *((void *)a1 + 2);
    *((void *)a1 + 1) = v24;
    LODWORD(v25) = 1;
LABEL_9:
    v16 += v25;
LABEL_10:
    unsigned int v18 = v17 + 1;
    v15[v17] = v20;
    unint64_t v14 = *((void *)a1 + 9);
    ++v17;
    if (v14 >= *((void *)a1 + 8)) {
      goto LABEL_28;
    }
  }

  unsigned int v18 = v17;
LABEL_28:
  if (!v18) {
    return 0LL;
  }
  unint64_t v31 = (*((void *)a1 + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
  if (!v31 || v31 + 24 > *((void *)a1 + 2))
  {
    unint64_t v32 = 2LL * *((void *)a1 + 4);
    if (v32 <= 0x20) {
      unint64_t v32 = 32LL;
    }
    *((void *)a1 + 4) = v32;
    unint64_t v33 = v32 + 8;
    BOOL v34 = malloc(v32 + 8);
    void *v34 = *((void *)a1 + 3);
    unint64_t v31 = ((unint64_t)v34 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    *((void *)a1 + 2) = (char *)v34 + v33;
    *((void *)a1 + 3) = v34;
  }

  *((void *)a1 + 1) = v31 + 24;
  *(_WORD *)(v31 + 16) = 81;
  *(_BYTE *)(v31 + 18) = 3;
  *(void *)unint64_t v31 = v15;
  *(void *)(v31 + 8) = v18;
  unsigned int v35 = v37;
  if (v37) {
    swift::Demangle::__runtime::Node::addChild( (unsigned int *)v37,  (swift::Demangle::__runtime::Node *)v31,  a1,  v12,  v13);
  }
  return v35;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleExtendedExistentialShape( swift::Demangle::__runtime::Demangler *this, int a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5 = *((_DWORD *)this + 24);
  if (!v5) {
    return 0LL;
  }
  uint64_t v7 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8LL * (v5 - 1));
  if (*((_WORD *)v7 + 8) == 232)
  {
    *((_DWORD *)this + 24) = --v5;
    if (a2 != 71) {
      goto LABEL_15;
    }
  }

  else
  {
    uint64_t v7 = 0LL;
    if (a2 != 71) {
      goto LABEL_15;
    }
  }

  if (v5)
  {
    unsigned int v8 = v5 - 1;
    unint64_t v9 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8LL * v8);
    if (*((_WORD *)v9 + 8) == 43)
    {
      *((_DWORD *)this + 24) = v8;
      if (v7)
      {
        unint64_t v10 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
        if (!v10 || v10 + 24 > *((void *)this + 2))
        {
          unint64_t v11 = 2LL * *((void *)this + 4);
          if (v11 <= 0x20) {
            unint64_t v11 = 32LL;
          }
          *((void *)this + 4) = v11;
          unint64_t v12 = v11 + 8;
          unint64_t v13 = malloc(v11 + 8);
          unint64_t v14 = (char *)v13 + v12;
          *unint64_t v13 = *((void *)this + 3);
          unint64_t v10 = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8LL;
          *((void *)this + 2) = v14;
          *((void *)this + 3) = v13;
        }

        *((void *)this + 1) = v10 + 24;
        *(_WORD *)(v10 + 16) = 334;
        *(_BYTE *)(v10 + 18) = 0;
        swift::Demangle::__runtime::Node::addChild((unsigned int *)v10, v9, this, a4, a5);
        goto LABEL_22;
      }

      return 0LL;
    }
  }

int8x16_t *swift::Demangle::__runtime::Demangler::demangleSymbolicExtendedExistentialType( swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unsigned int v8 = swift::Demangle::__runtime::Demangler::popRetroactiveConformances(this, a2, a3, a4, a5);
  unint64_t v9 = (int8x16_t *)((*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL);
  if (!v9 || (unint64_t)&v9[1].u64[1] > *((void *)this + 2))
  {
    unint64_t v10 = 2LL * *((void *)this + 4);
    if (v10 <= 0x20) {
      unint64_t v10 = 32LL;
    }
    *((void *)this + 4) = v10;
    unint64_t v11 = v10 + 8;
    unint64_t v12 = malloc(v10 + 8);
    unint64_t v13 = (char *)v12 + v11;
    *unint64_t v12 = *((void *)this + 3);
    unint64_t v9 = (int8x16_t *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8LL);
    *((void *)this + 2) = v13;
    *((void *)this + 3) = v12;
  }

  *((void *)this + 1) = (char *)v9 + 24;
  v9[1].i16[0] = 235;
  v9[1].i8[2] = 0;
  int v14 = *((_DWORD *)this + 24);
  if (!v14) {
    return 0LL;
  }
  do
  {
    unint64_t v15 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8LL * (v14 - 1));
    if (*((_WORD *)v15 + 8) != 232) {
      break;
    }
    *((_DWORD *)this + 24) = v14 - 1;
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v9, v15, this, v6, v7);
    int v14 = *((_DWORD *)this + 24);
  }

  while (v14);
  int v16 = v9[1].u8[2];
  if (v16 == 5)
  {
    unint64_t v17 = v9->i64[0];
    uint64_t v18 = v9->u32[2];
    uint64_t v19 = (void *)(v9->i64[0] + 8 * v18 - 8);
    if ((_DWORD)v18) {
      BOOL v20 = (unint64_t)v19 > v17;
    }
    else {
      BOOL v20 = 0;
    }
    if (v20)
    {
      unint64_t v21 = v17 + 8;
      do
      {
        uint64_t v22 = *(void *)(v21 - 8);
        *(void *)(v21 - 8) = *v19;
        *v19-- = v22;
        BOOL v23 = v21 >= (unint64_t)v19;
        v21 += 8LL;
      }

      while (!v23);
    }
  }

  else if (v16 == 2)
  {
    *unint64_t v9 = vextq_s8(*v9, *v9, 8uLL);
  }

  if (!v14) {
    return 0LL;
  }
  unsigned int v24 = v14 - 1;
  uint64_t v25 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8LL * v24);
  *((_DWORD *)this + 24) = v24;
  if (!v25 || (*((_WORD *)v25 + 8) & 0xFFFE) != 0x150) {
    return 0LL;
  }
  if (v8)
  {
    unint64_t v28 = swift::Demangle::__runtime::Demangler::createWithChildren( this,  338,  v25,  (swift::Demangle::__runtime::Node *)v9,  v8->i8);
    if (!v28) {
      return 0LL;
    }
  }

  else
  {
    if (!v9) {
      return v9;
    }
    unint64_t v28 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
    if (!v28 || v28 + 24 > *((void *)this + 2))
    {
      unint64_t v30 = 2LL * *((void *)this + 4);
      if (v30 <= 0x20) {
        unint64_t v30 = 32LL;
      }
      *((void *)this + 4) = v30;
      unint64_t v31 = v30 + 8;
      unint64_t v32 = malloc(v30 + 8);
      unint64_t v33 = (char *)v32 + v31;
      *unint64_t v32 = *((void *)this + 3);
      unint64_t v28 = ((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8LL;
      *((void *)this + 2) = v33;
      *((void *)this + 3) = v32;
    }

    *((void *)this + 1) = v28 + 24;
    *(_WORD *)(v28 + 16) = 338;
    *(_BYTE *)(v28 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v28, v25, this, v6, v7);
    swift::Demangle::__runtime::Node::addChild( (unsigned int *)v28,  (swift::Demangle::__runtime::Node *)v9,  this,  v34,  v35);
  }

  unint64_t v9 = (int8x16_t *)((*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL);
  if (!v9 || (unint64_t)&v9[1].u64[1] > *((void *)this + 2))
  {
    unint64_t v36 = 2LL * *((void *)this + 4);
    if (v36 <= 0x20) {
      unint64_t v36 = 32LL;
    }
    *((void *)this + 4) = v36;
    unint64_t v37 = v36 + 8;
    unint64_t v38 = malloc(v36 + 8);
    uint64_t v39 = (char *)v38 + v37;
    *unint64_t v38 = *((void *)this + 3);
    unint64_t v9 = (int8x16_t *)(((unint64_t)v38 + 15) & 0xFFFFFFFFFFFFFFF8LL);
    *((void *)this + 2) = v39;
    *((void *)this + 3) = v38;
  }

  *((void *)this + 1) = (char *)v9 + 24;
  v9[1].i16[0] = 232;
  v9[1].i8[2] = 0;
  swift::Demangle::__runtime::Node::addChild( (unsigned int *)v9,  (swift::Demangle::__runtime::Node *)v28,  this,  v26,  v27);
  return v9;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleMetatypeRepresentation( swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v1 = *((void *)this + 9);
  if (v1 >= *((void *)this + 8)) {
    return 0LL;
  }
  *((void *)this + 9) = v1 + 1;
  int v3 = *(char *)(*((void *)this + 7) + v1);
  if (v3 == 84)
  {
    unint64_t result = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
    if (!result || result + 24 > *((void *)this + 2))
    {
      unint64_t v9 = 2LL * *((void *)this + 4);
      if (v9 <= 0x20) {
        unint64_t v9 = 32LL;
      }
      *((void *)this + 4) = v9;
      unint64_t v10 = v9 + 8;
      unint64_t v11 = malloc(v9 + 8);
      *unint64_t v11 = *((void *)this + 3);
      unint64_t result = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8LL;
      *((void *)this + 2) = (char *)v11 + v10;
      *((void *)this + 3) = v11;
    }

    *((void *)this + 1) = result + 24;
    *(_WORD *)(result + 16) = 146;
    *(_BYTE *)(result + 18) = 3;
    *(void *)unint64_t result = "@thick";
    uint64_t v8 = 6LL;
    goto LABEL_24;
  }

  if (v3 == 111)
  {
    unint64_t result = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
    if (!result || result + 24 > *((void *)this + 2))
    {
      unint64_t v12 = 2LL * *((void *)this + 4);
      if (v12 <= 0x20) {
        unint64_t v12 = 32LL;
      }
      *((void *)this + 4) = v12;
      unint64_t v13 = v12 + 8;
      int v14 = malloc(v12 + 8);
      *int v14 = *((void *)this + 3);
      unint64_t result = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8LL;
      *((void *)this + 2) = (char *)v14 + v13;
      *((void *)this + 3) = v14;
    }

    *((void *)this + 1) = result + 24;
    *(_WORD *)(result + 16) = 146;
    *(_BYTE *)(result + 18) = 3;
    *(void *)unint64_t result = "@objc_metatype";
    uint64_t v8 = 14LL;
    goto LABEL_24;
  }

  if (v3 != 116) {
    return 0LL;
  }
  unint64_t result = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
  if (!result || result + 24 > *((void *)this + 2))
  {
    unint64_t v5 = 2LL * *((void *)this + 4);
    if (v5 <= 0x20) {
      unint64_t v5 = 32LL;
    }
    *((void *)this + 4) = v5;
    unint64_t v6 = v5 + 8;
    uint64_t v7 = malloc(v5 + 8);
    *uint64_t v7 = *((void *)this + 3);
    unint64_t result = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    *((void *)this + 2) = (char *)v7 + v6;
    *((void *)this + 3) = v7;
  }

  *((void *)this + 1) = result + 24;
  *(_WORD *)(result + 16) = 146;
  *(_BYTE *)(result + 18) = 3;
  *(void *)unint64_t result = "@thin";
  uint64_t v8 = 5LL;
LABEL_24:
  *(void *)(result + 8) = v8;
  return result;
}

int8x16_t *swift::Demangle::__runtime::Demangler::demangleConstrainedExistentialRequirementList( swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v6 = (int8x16_t *)((*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL);
  if (!v6 || (unint64_t)&v6[1].u64[1] > *((void *)this + 2))
  {
    unint64_t v7 = 2LL * *((void *)this + 4);
    if (v7 <= 0x20) {
      unint64_t v7 = 32LL;
    }
    *((void *)this + 4) = v7;
    unint64_t v8 = v7 + 8;
    unint64_t v9 = malloc(v7 + 8);
    unint64_t v10 = (char *)v9 + v8;
    *unint64_t v9 = *((void *)this + 3);
    unint64_t v6 = (int8x16_t *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8LL);
    *((void *)this + 2) = v10;
    *((void *)this + 3) = v9;
  }

  *((void *)this + 1) = (char *)v6 + 24;
  v6[1].i16[0] = 84;
  v6[1].i8[2] = 0;
  do
  {
    int v14 = *((_DWORD *)this + 24);
    if (!v14) {
      return 0LL;
    }
    int v15 = v14 - 1;
    uint64_t v16 = *((void *)this + 11);
    int v17 = *(unsigned __int16 *)(*(void *)(v16 + 8LL * (v14 - 1)) + 16LL);
    if (v17 == 275)
    {
      *((_DWORD *)this + 24) = v15;
      --v14;
      if (!v15) {
        return 0LL;
      }
    }

    unsigned int v11 = v14 - 1;
    unint64_t v12 = *(unsigned __int16 **)(v16 + 8LL * v11);
    int v13 = v12[8];
    *((_DWORD *)this + 24) = v11;
    swift::Demangle::__runtime::Node::addChild( (unsigned int *)v6,  (swift::Demangle::__runtime::Node *)v12,  this,  a4,  a5);
  }

  while (v17 != 275);
  int v19 = v6[1].u8[2];
  if (v19 == 5)
  {
    uint64_t v20 = v6->u32[2];
    if ((_DWORD)v20)
    {
      unint64_t v21 = (void *)(v6->i64[0] + 8 * v20 - 8);
      if ((unint64_t)v21 > v6->i64[0])
      {
        unint64_t v22 = v6->i64[0] + 8;
        do
        {
          uint64_t v23 = *(void *)(v22 - 8);
          *(void *)(v22 - 8) = *v21;
          *v21-- = v23;
          BOOL v24 = v22 >= (unint64_t)v21;
          v22 += 8LL;
        }

        while (!v24);
      }
    }
  }

  else if (v19 == 2)
  {
    *unint64_t v6 = vextq_s8(*v6, *v6, 8uLL);
  }

  return v6;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleProtocolList( swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v6 = (*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
  if (!v6 || (unint64_t v7 = *((void *)this + 2), v6 + 24 > v7))
  {
    unint64_t v8 = 2LL * *((void *)this + 4);
    if (v8 <= 0x20) {
      unint64_t v8 = 32LL;
    }
    *((void *)this + 4) = v8;
    unint64_t v9 = v8 + 8;
    unint64_t v10 = malloc(v8 + 8);
    unint64_t v7 = (unint64_t)v10 + v9;
    *unint64_t v10 = *((void *)this + 3);
    unint64_t v6 = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    *((void *)this + 2) = (char *)v10 + v9;
    *((void *)this + 3) = v10;
  }

  *(_WORD *)(v6 + 16) = 235;
  *(_BYTE *)(v6 + 18) = 0;
  unint64_t v11 = (v6 + 31) & 0xFFFFFFFFFFFFFFF8LL;
  if (v11) {
    BOOL v12 = v11 + 24 > v7;
  }
  else {
    BOOL v12 = 1;
  }
  if (v12)
  {
    unint64_t v13 = 2LL * *((void *)this + 4);
    if (v13 <= 0x20) {
      unint64_t v13 = 32LL;
    }
    *((void *)this + 4) = v13;
    unint64_t v14 = v13 + 8;
    int v15 = malloc(v13 + 8);
    uint64_t v16 = (char *)v15 + v14;
    *int v15 = *((void *)this + 3);
    unint64_t v11 = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    *((void *)this + 2) = v16;
    *((void *)this + 3) = v15;
  }

  *((void *)this + 1) = v11 + 24;
  *(_WORD *)(v11 + 16) = 190;
  *(_BYTE *)(v11 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((unsigned int *)v11, (swift::Demangle::__runtime::Node *)v6, this, a4, a5);
  int v21 = *((_DWORD *)this + 24);
  if (v21 && (unsigned int v22 = v21 - 1, *(_WORD *)(*(void *)(*((void *)this + 11) + 8LL * v22) + 16LL) == 274))
  {
    *((_DWORD *)this + 24) = v22;
  }

  else
  {
    do
    {
      int v23 = *((_DWORD *)this + 24);
      if (v23 && (unsigned int v24 = v23 - 1, v25 = *(void *)(*((void *)this + 11) + 8LL * v24), *(_WORD *)(v25 + 16) == 275)) {
        *((_DWORD *)this + 24) = v24;
      }
      else {
        uint64_t v25 = 0LL;
      }
      uint64_t v26 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::popProtocol( this,  v17,  v18,  v19,  v20);
      if (!v26) {
        return 0LL;
      }
      swift::Demangle::__runtime::Node::addChild((unsigned int *)v6, v26, this, v27, v28);
    }

    while (!v25);
    int v29 = *(unsigned __int8 *)(v6 + 18);
    if (v29 == 5)
    {
      uint64_t v31 = *(unsigned int *)(v6 + 8);
      if ((_DWORD)v31)
      {
        unint64_t v32 = (void *)(*(void *)v6 + 8 * v31 - 8);
        if ((unint64_t)v32 > *(void *)v6)
        {
          unint64_t v33 = *(void *)v6 + 8LL;
          do
          {
            uint64_t v34 = *(void *)(v33 - 8);
            *(void *)(v33 - 8) = *v32;
            *v32-- = v34;
            BOOL v35 = v33 >= (unint64_t)v32;
            v33 += 8LL;
          }

          while (!v35);
        }
      }
    }

    else if (v29 == 2)
    {
      *(int8x16_t *)unint64_t v6 = vextq_s8(*(int8x16_t *)v6, *(int8x16_t *)v6, 8uLL);
    }
  }

  return v11;
}

swift::Demangle::__runtime::Node *swift::Demangle::__runtime::Demangler::demangleAccessor( swift::Demangle::__runtime::Demangler *this, swift::Demangle::__runtime::Node *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v6 = *((void *)this + 8);
  unint64_t v5 = *((void *)this + 9);
  if (v5 >= v6) {
    return 0LL;
  }
  unint64_t v8 = v5 + 1;
  *((void *)this + 9) = v5 + 1;
  uint64_t v9 = *((void *)this + 7);
  __int16 v11 = 141;
  BOOL v12 = a2;
  switch(*(_BYTE *)(v9 + v5))
  {
    case 'G':
      __int16 v11 = 100;
      goto LABEL_17;
    case 'M':
      __int16 v11 = 152;
      goto LABEL_17;
    case 'W':
      __int16 v11 = 51;
      goto LABEL_17;
    case 'a':
      if (v8 >= v6) {
        return 0LL;
      }
      BOOL v12 = 0LL;
      *((void *)this + 9) = v5 + 2;
      __int16 v11 = 169;
      switch(*(_BYTE *)(v9 + v8))
      {
        case 'O':
          goto LABEL_17;
        case 'P':
          __int16 v11 = 157;
          goto LABEL_17;
        case 'o':
          __int16 v11 = 155;
          goto LABEL_17;
        case 'u':
          __int16 v11 = 251;
          goto LABEL_17;
        default:
          return v12;
      }

      return v12;
    case 'g':
      __int16 v11 = 98;
      goto LABEL_17;
    case 'i':
      __int16 v11 = 126;
      goto LABEL_17;
    case 'l':
      if (v8 >= v6) {
        return 0LL;
      }
      BOOL v12 = 0LL;
      *((void *)this + 9) = v5 + 2;
      __int16 v11 = 168;
      switch(*(_BYTE *)(v9 + v8))
      {
        case 'O':
          goto LABEL_17;
        case 'o':
          __int16 v11 = 154;
          goto LABEL_17;
        case 'p':
          __int16 v11 = 156;
          goto LABEL_17;
        case 'u':
          __int16 v11 = 250;
          goto LABEL_17;
        default:
          return v12;
      }

      return v12;
    case 'm':
      goto LABEL_17;
    case 'p':
      return v12;
    case 'r':
      __int16 v11 = 204;
      goto LABEL_17;
    case 's':
      __int16 v11 = 215;
      goto LABEL_17;
    case 'w':
      __int16 v11 = 257;
LABEL_17:
      if (!a2) {
        return 0LL;
      }
      BOOL v12 = (swift::Demangle::__runtime::Node *)((*((void *)this + 1) + 7LL) & 0xFFFFFFFFFFFFFFF8LL);
      if (!v12 || (unint64_t)v12 + 24 > *((void *)this + 2))
      {
        unint64_t v13 = 2LL * *((void *)this + 4);
        if (v13 <= 0x20) {
          unint64_t v13 = 32LL;
        }
        *((void *)this + 4) = v13;
        unint64_t v14 = v13 + 8;
        int v15 = malloc(v13 + 8);
        uint64_t v16 = (char *)v15 + v14;
        *int v15 = *((void *)this + 3);
        BOOL v12 = (swift::Demangle::__runtime::Node *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8LL);
        *((void *)this + 2) = v16;
        *((void *)this + 3) = v15;
      }

      *((void *)this + 1) = (char *)v12 + 24;
      *((_WORD *)v12 + 8) = v11;
      *((_BYTE *)v12 + 18) = 0;
      swift::Demangle::__runtime::Node::addChild((unsigned int *)v12, a2, this, a4, a5);
      break;
    default:
      return 0LL;
  }

  return v12;
}

swift::Demangle::__runtime::Node *swift::Demangle::__runtime::Demangler::demangleEntity( swift::Demangle::__runtime::Demangler *this, __int16 a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v7 = *((_DWORD *)this + 24);
  if (v7
    && (unsigned int v8 = v7 - 1,
        uint64_t v9 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8LL * v8),
        *((_WORD *)v9 + 8) == 232))
  {
    *((_DWORD *)this + 24) = v8;
  }

  else
  {
    uint64_t v9 = 0LL;
  }

  unint64_t v14 = (char *)swift::Demangle::__runtime::Demangler::popFunctionParamLabels(this, v9, a3, a4, a5);
  int v15 = *((_DWORD *)this + 24);
  if (!v15
    || ((unsigned int v16 = v15 - 1,
         uint64_t v17 = *(unsigned __int16 **)(*((void *)this + 11) + 8LL * v16),
         int v18 = v17[8],
         (v18 - 173) <= 0x3C)
      ? (BOOL v19 = ((1LL << (v18 + 83)) & 0x100000010000010DLL) == 0)
      : (BOOL v19 = 1),
        v19
     && ((v18 - 101) <= 0x24
       ? (BOOL v20 = ((1LL << (v18 - 101)) & 0x1000800001LL) == 0)
       : (BOOL v20 = 1),
         v20 && v18 != 347)))
  {
    uint64_t v17 = 0LL;
  }

  else
  {
    *((_DWORD *)this + 24) = v16;
  }

  int v21 = swift::Demangle::__runtime::Demangler::popContext(this, v10, v11, v12, v13);
  if (v14) {
    unsigned int v22 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::createWithChildren( this,  a2,  v21,  (swift::Demangle::__runtime::Node *)v17,  v14,  v9);
  }
  else {
    unsigned int v22 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::createWithChildren( this,  a2,  v21,  (swift::Demangle::__runtime::Node *)v17,  (char *)v9);
  }
  return setParentForOpaqueReturnTypeNodes(this, v22, v9, v23, v24);
}

unint64_t swift::Demangle::__runtime::Demangler::demangleMacroExpansion( swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v5 = *((void *)this + 8);
  unint64_t v6 = *((void *)this + 9);
  if (v6 < v5)
  {
    unsigned int v8 = 0LL;
    unint64_t v9 = v6 + 1;
    *((void *)this + 9) = v6 + 1;
    uint64_t v10 = *((void *)this + 7);
    __int16 v11 = 8;
    int v12 = 1;
    switch(*(_BYTE *)(v10 + v6))
    {
      case 'X':
        if (v9 >= v5) {
          goto LABEL_75;
        }
        int v13 = *(unsigned __int8 *)(v10 + v9);
        if (v13 == 95)
        {
          uint64_t v14 = 0LL;
          unint64_t v9 = v6 + 2;
          *((void *)this + 9) = v6 + 2;
        }

        else if ((v13 - 48) > 9)
        {
LABEL_75:
          uint64_t v14 = -1000LL;
        }

        else
        {
          int v36 = 0;
          while (1)
          {
            int v37 = *(unsigned __int8 *)(v10 + v9);
            int v38 = v37 + 10 * v36 - 48;
            if (v38 < v36) {
              goto LABEL_75;
            }
            *((void *)this + 9) = ++v9;
            int v36 = v38;
            if (v5 == v9)
            {
              uint64_t v14 = -1000LL;
LABEL_84:
              uint64_t v40 = -1000LL;
              goto LABEL_85;
            }
          }

          uint64_t v14 = -1000LL;
          if ((v36 & 0x80000000) == 0 && v9 < v5 && v37 == 95)
          {
            *((void *)this + 9) = ++v9;
            uint64_t v14 = (v36 + 1);
          }
        }

        if (v9 >= v5) {
          goto LABEL_84;
        }
        int v39 = *(unsigned __int8 *)(v10 + v9);
        if (v39 == 95)
        {
          uint64_t v40 = 0LL;
          *((void *)this + 9) = v9 + 1;
          goto LABEL_85;
        }

        int v41 = 0;
        while (1)
        {
          int v42 = *(unsigned __int8 *)(v10 + v9);
          int v43 = v42 + 10 * v41 - 48;
          if (v43 >= v41)
          {
            *((void *)this + 9) = ++v9;
            int v41 = v43;
            if (v5 != v9) {
              continue;
            }
          }

          goto LABEL_84;
        }

        uint64_t v40 = -1000LL;
        if ((v41 & 0x80000000) == 0 && v9 < v5 && v42 == 95)
        {
          *((void *)this + 9) = v9 + 1;
          uint64_t v40 = (v41 + 1);
        }

void swift::Demangle::__runtime::NodeFactory::~NodeFactory(swift::Demangle::__runtime::NodeFactory *this)
{
  *(void *)this = off_189B8E4D8;
  unint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    do
    {
      int v3 = (void *)*v2;
      free(v2);
      unint64_t v2 = v3;
    }

    while (v3);
  }

  uint64_t v4 = *((void *)this + 5);
  if (v4) {
    *(_BYTE *)(v4 + 48) = 0;
  }
}

{
  void *v2;
  void *v3;
  uint64_t v4;
  *(void *)this = off_189B8E4D8;
  unint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    do
    {
      int v3 = (void *)*v2;
      free(v2);
      unint64_t v2 = v3;
    }

    while (v3);
  }

  uint64_t v4 = *((void *)this + 5);
  if (v4) {
    *(_BYTE *)(v4 + 48) = 0;
  }
  operator delete(this);
}

uint64_t swift::Mangle::__runtime::needsPunycodeEncoding(_BYTE *a1, uint64_t a2)
{
  if (!a2) {
    return 0LL;
  }
  while (1)
  {
    if ((*a1 - 48) >= 0xAu && ((*a1 & 0xDF) - 65) >= 0x1Au)
    {
      int v4 = *a1;
      if (v4 != 95 && v4 != 36) {
        break;
      }
    }

    ++a1;
    if (!--a2) {
      return 0LL;
    }
  }

  return 1LL;
}

uint64_t swift::Mangle::__runtime::translateOperatorChar(swift::Mangle::__runtime *this)
{
  int v2 = (_DWORD)this - 33;
  uint64_t result = 97LL;
  switch(v2)
  {
    case 0:
      uint64_t result = 110LL;
      break;
    case 4:
      uint64_t result = 114LL;
      break;
    case 5:
      return result;
    case 9:
      uint64_t result = 109LL;
      break;
    case 10:
      uint64_t result = 112LL;
      break;
    case 12:
      uint64_t result = 115LL;
      break;
    case 13:
      uint64_t result = 122LL;
      break;
    case 14:
      uint64_t result = 100LL;
      break;
    case 27:
      uint64_t result = 108LL;
      break;
    case 28:
      uint64_t result = 101LL;
      break;
    case 29:
      uint64_t result = 103LL;
      break;
    case 30:
      uint64_t result = 113LL;
      break;
    case 31:
      uint64_t result = 99LL;
      break;
    case 61:
      uint64_t result = 120LL;
      break;
    case 91:
      uint64_t result = 111LL;
      break;
    case 93:
      uint64_t result = 116LL;
      break;
    default:
      uint64_t result = (uint64_t)this;
      break;
  }

  return result;
}

void swift::Mangle::__runtime::translateOperator(char *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  a3->__r_.__value_.__r.__words[0] = 0LL;
  a3->__r_.__value_.__l.__size_ = 0LL;
  a3->__r_.__value_.__l.__cap_ = 0LL;
  if (a2)
  {
    uint64_t v3 = a2;
    do
    {
      unsigned int v6 = *a1++;
      std::string::value_type v7 = swift::Mangle::__runtime::translateOperatorChar((swift::Mangle::__runtime *)v6);
      std::string::push_back(a3, v7);
      --v3;
    }

    while (v3);
  }

void *swift::Mangle::__runtime::getStandardTypeSubst@<X0>( void *result@<X0>, size_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v6 = result;
  switch(a2)
  {
    case 3uLL:
      uint64_t result = (void *)memcmp(result, "Set", a2);
      if ((_DWORD)result)
      {
        uint64_t result = (void *)memcmp(v6, "Int", a2);
        if ((_DWORD)result) {
          goto LABEL_97;
        }
        unsigned int v8 = "i";
      }

      else
      {
        unsigned int v8 = "h";
      }

      goto LABEL_167;
    case 4uLL:
      uint64_t result = (void *)memcmp(result, "Bool", a2);
      if ((_DWORD)result)
      {
        uint64_t result = (void *)memcmp(v6, "UInt", a2);
        if ((_DWORD)result) {
          goto LABEL_97;
        }
        unsigned int v8 = "u";
      }

      else
      {
        unsigned int v8 = "b";
      }

      goto LABEL_167;
    case 5uLL:
      uint64_t result = (void *)memcmp(result, "Array", a2);
      if ((_DWORD)result)
      {
        uint64_t result = (void *)memcmp(v6, "Float", a2);
        if ((_DWORD)result)
        {
          uint64_t result = (void *)memcmp(v6, "Range", a2);
          if ((_DWORD)result) {
            goto LABEL_97;
          }
          unsigned int v8 = "n";
        }

        else
        {
          unsigned int v8 = "f";
        }
      }

      else
      {
        unsigned int v8 = "a";
      }

      goto LABEL_167;
    case 6uLL:
      uint64_t result = (void *)memcmp(result, "Double", a2);
      if ((_DWORD)result)
      {
        uint64_t result = (void *)memcmp(v6, "String", a2);
        if ((_DWORD)result) {
          goto LABEL_97;
        }
        unsigned int v8 = "S";
      }

      else
      {
        unsigned int v8 = "d";
      }

      goto LABEL_167;
    case 7uLL:
      uint64_t result = (void *)memcmp(result, "Numeric", a2);
      if ((_DWORD)result) {
        goto LABEL_97;
      }
      unsigned int v8 = "j";
      goto LABEL_167;
    case 8uLL:
      uint64_t result = (void *)memcmp(result, "Optional", a2);
      if ((_DWORD)result)
      {
        uint64_t result = (void *)memcmp(v6, "Hashable", a2);
        if ((_DWORD)result)
        {
          uint64_t result = (void *)memcmp(v6, "Sequence", a2);
          if ((_DWORD)result) {
            goto LABEL_97;
          }
          unsigned int v8 = "T";
        }

        else
        {
          unsigned int v8 = "H";
        }
      }

      else
      {
        unsigned int v8 = "q";
      }

      goto LABEL_167;
    case 9uLL:
      uint64_t result = (void *)memcmp(result, "Character", a2);
      if ((_DWORD)result)
      {
        uint64_t result = (void *)memcmp(v6, "Substring", a2);
        if ((_DWORD)result)
        {
          uint64_t result = (void *)memcmp(v6, "Encodable", a2);
          if ((_DWORD)result)
          {
            if (*v6 == 0x6C6261646F636544LL && *((_BYTE *)v6 + 8) == 101)
            {
              unsigned int v8 = "e";
            }

            else
            {
              uint64_t result = (void *)memcmp(v6, "Equatable", a2);
              if ((_DWORD)result) {
                goto LABEL_97;
              }
              unsigned int v8 = "Q";
            }
          }

          else
          {
            unsigned int v8 = "E";
          }
        }

        else
        {
          unsigned int v8 = "s";
        }
      }

      else
      {
        unsigned int v8 = "J";
      }

      goto LABEL_167;
    case 0xAuLL:
      uint64_t result = (void *)memcmp(result, "Dictionary", a2);
      if ((_DWORD)result)
      {
        uint64_t result = (void *)memcmp(v6, "Comparable", a2);
        if ((_DWORD)result)
        {
          if (*v6 == 0x697463656C6C6F43LL && *((_WORD *)v6 + 4) == 28271)
          {
            unsigned int v8 = "l";
          }

          else
          {
            uint64_t result = (void *)memcmp(v6, "Strideable", a2);
            if ((_DWORD)result) {
              goto LABEL_97;
            }
            unsigned int v8 = "x";
          }
        }

        else
        {
          unsigned int v8 = "L";
        }
      }

      else
      {
        unsigned int v8 = "D";
      }

      goto LABEL_167;
    case 0xBuLL:
      uint64_t result = (void *)memcmp(result, "ClosedRange", a2);
      if ((_DWORD)result) {
        goto LABEL_97;
      }
      unsigned int v8 = "N";
      goto LABEL_167;
    case 0xDuLL:
      uint64_t result = (void *)memcmp(result, "UnsafePointer", a2);
      if (!(_DWORD)result)
      {
        unsigned int v8 = "P";
        goto LABEL_167;
      }

      uint64_t result = (void *)memcmp(v6, "FloatingPoint", a2);
      if (!(_DWORD)result)
      {
        unsigned int v8 = "F";
        goto LABEL_167;
      }

      uint64_t result = (void *)memcmp(v6, "SignedInteger", a2);
      if (!(_DWORD)result)
      {
        unsigned int v8 = "Z";
        goto LABEL_167;
      }

      if (*v6 == 0x6E497972616E6942LL && *(void *)((char *)v6 + 5) == 0x72656765746E4979LL)
      {
        unsigned int v8 = "z";
        goto LABEL_167;
      }

      goto LABEL_97;
    case 0xEuLL:
      uint64_t result = (void *)memcmp(result, "DefaultIndices", a2);
      if ((_DWORD)result)
      {
        uint64_t result = (void *)memcmp(v6, "StringProtocol", a2);
        if ((_DWORD)result) {
          goto LABEL_97;
        }
        unsigned int v8 = "y";
      }

      else
      {
        unsigned int v8 = "I";
      }

      goto LABEL_167;
    case 0xFuLL:
      uint64_t result = (void *)memcmp(result, "UnsignedInteger", a2);
      if (!(_DWORD)result)
      {
        unsigned int v8 = "U";
        goto LABEL_167;
      }

      if (*v6 == 0x70784565676E6152LL && *(void *)((char *)v6 + 7) == 0x6E6F697373657270LL)
      {
        unsigned int v8 = "X";
        goto LABEL_167;
      }

      goto LABEL_97;
    case 0x10uLL:
      uint64_t result = (void *)memcmp(result, "ObjectIdentifier", a2);
      if ((_DWORD)result)
      {
        uint64_t result = (void *)memcmp(v6, "UnsafeRawPointer", a2);
        if ((_DWORD)result)
        {
          uint64_t result = (void *)memcmp(v6, "IteratorProtocol", a2);
          if ((_DWORD)result)
          {
            uint64_t result = (void *)memcmp(v6, "RawRepresentable", a2);
            if ((_DWORD)result) {
              goto LABEL_97;
            }
            unsigned int v8 = "Y";
          }

          else
          {
            unsigned int v8 = "t";
          }
        }

        else
        {
          unsigned int v8 = "V";
        }
      }

      else
      {
        unsigned int v8 = "O";
      }

      goto LABEL_167;
    case 0x11uLL:
      uint64_t result = (void *)memcmp(result, "MutableCollection", a2);
      if ((_DWORD)result) {
        goto LABEL_97;
      }
      unsigned int v8 = "M";
      goto LABEL_167;
    case 0x13uLL:
      uint64_t result = (void *)memcmp(result, "UnsafeBufferPointer", a2);
      if ((_DWORD)result)
      {
        uint64_t result = (void *)memcmp(v6, "BinaryFloatingPoint", a2);
        if ((_DWORD)result) {
          goto LABEL_97;
        }
        unsigned int v8 = "B";
      }

      else
      {
        unsigned int v8 = "R";
      }

      goto LABEL_167;
    case 0x14uLL:
      uint64_t result = (void *)memcmp(result, "UnsafeMutablePointer", a2);
      if ((_DWORD)result) {
        goto LABEL_97;
      }
      unsigned int v8 = "p";
      goto LABEL_167;
    case 0x15uLL:
      uint64_t result = (void *)memcmp(result, "RandomNumberGenerator", a2);
      if ((_DWORD)result) {
        goto LABEL_97;
      }
      unsigned int v8 = "G";
      goto LABEL_167;
    case 0x16uLL:
      uint64_t result = (void *)memcmp(result, "UnsafeRawBufferPointer", a2);
      if ((_DWORD)result)
      {
        uint64_t result = (void *)memcmp(v6, "RandomAccessCollection", a2);
        if ((_DWORD)result) {
          goto LABEL_97;
        }
        unsigned int v8 = "k";
      }

      else
      {
        unsigned int v8 = "W";
      }

      goto LABEL_167;
    case 0x17uLL:
      uint64_t result = (void *)memcmp(result, "UnsafeMutableRawPointer", a2);
      if ((_DWORD)result)
      {
        uint64_t result = (void *)memcmp(v6, "BidirectionalCollection", a2);
        if ((_DWORD)result) {
          goto LABEL_97;
        }
        unsigned int v8 = "K";
      }

      else
      {
        unsigned int v8 = "v";
      }

      goto LABEL_167;
    case 0x1AuLL:
      uint64_t result = (void *)memcmp(result, "UnsafeMutableBufferPointer", a2);
      if (!(_DWORD)result)
      {
        unsigned int v8 = "r";
        goto LABEL_167;
      }

      uint64_t result = (void *)memcmp(v6, "RangeReplaceableCollection", a2);
      if (!(_DWORD)result)
      {
        unsigned int v8 = "m";
LABEL_167:
        *(void *)a4 = v8;
        *(void *)(a4 + 8) = 1LL;
        char v18 = 1;
        goto LABEL_168;
      }

std::string *swift::Demangle::__runtime::DemanglerPrinter::operator<<(std::string *a1, uint64_t a2)
{
  return a1;
}

std::string *swift::Demangle::__runtime::DemanglerPrinter::writeHex(std::string *a1, uint64_t a2)
{
  return a1;
}

double swift::Demangle::__runtime::genericParameterName@<D0>( swift::Demangle::__runtime *this@<X0>, unint64_t a2@<X1>, std::string *a3@<X8>)
{
  do
  {
    std::string::push_back(&v8, a2 % 0x1A + 65);
    BOOL v6 = a2 > 0x19;
    a2 /= 0x1AuLL;
  }

  while (v6);
  if (this)
  {
    snprintf(__str, 0x20uLL, "%llu", this);
    std::string::append(&v8, __str);
  }

  double result = *(double *)&v8.__r_.__value_.__l.__data_;
  *a3 = v8;
  return result;
}

void swift::Demangle::__runtime::keyPathSourceString( swift::Demangle::__runtime *this@<X0>, const char *a2@<X1>, char *a3@<X8>)
{
  char v161 = 3;
  LODWORD(v159) = 2112095;
  BOOL v6 = (swift::Demangle::__runtime::NodeFactory **)swift::Demangle::__runtime::Context::Context((swift::Demangle::__runtime::Context *)v158);
  std::string::value_type v7 = swift::Demangle::__runtime::Context::demangleSymbolAsNode(v6, this, (unint64_t)a2);
  if (!v7) {
    goto LABEL_33;
  }
  int v8 = *((unsigned __int8 *)v7 + 18);
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !v7[2]) {
      goto LABEL_33;
    }
    std::string::value_type v7 = *(unsigned int **)v7;
  }

  unint64_t v9 = *(unsigned int **)v7;
  if (*(_WORD *)(*(void *)v7 + 16LL) != 131) {
    goto LABEL_33;
  }
  int v10 = *((unsigned __int8 *)v9 + 18);
  if (v10 == 5 && v9[2])
  {
    unint64_t v9 = *(unsigned int **)v9;
LABEL_11:
    __int16 v11 = *(unsigned int **)v9;
    goto LABEL_13;
  }

  __int16 v11 = 0LL;
LABEL_13:
  int v12 = *((unsigned __int16 *)v11 + 8);
  if (v12 == 254)
  {
    int v16 = *((unsigned __int8 *)v11 + 18);
    if (v16 != 2)
    {
      if (v16 != 5 || v11[2] < 2) {
        goto LABEL_33;
      }
      __int16 v11 = *(unsigned int **)v11;
    }

    int v17 = (uint64_t *)*((void *)v11 + 1);
    if (v17)
    {
      int v18 = *((unsigned __int16 *)v17 + 8);
      if (v18 == 101) {
        goto LABEL_32;
      }
      if (v18 == 176)
      {
        int v19 = *((unsigned __int8 *)v17 + 18);
        if (v19 != 2)
        {
          if (v19 != 5 || *((_DWORD *)v17 + 2) < 2u) {
            goto LABEL_33;
          }
          int v17 = (uint64_t *)*v17;
        }

        int v17 = (uint64_t *)v17[1];
        if (v17)
        {
          if (*((_WORD *)v17 + 8) == 101)
          {
LABEL_32:
            *(_OWORD *)&v157.__r_.__value_.__l.__data_ = *(_OWORD *)v17;
            std::string::basic_string<__swift::__runtime::llvm::StringRef,0>(a3, (uint64_t)&v157);
            goto LABEL_34;
          }
        }
      }
    }

void swift::Demangle::__runtime::keyPathSourceString(char const*,unsigned long)::$_1::operator()( void *a1@<X0>, char *a2@<X8>)
{
  int v3 = *((unsigned __int16 *)a1 + 8);
  if (v3 != 137)
  {
    if (v3 != 101)
    {
      a2[23] = 9;
      strcpy(a2, "<unknown>");
      return;
    }

    size_t v4 = a1[1];
    if (v4 <= 0x7FFFFFFFFFFFFFF7LL)
    {
      unint64_t v5 = (void *)*a1;
      if (v4 >= 0x17)
      {
        uint64_t v11 = (v4 & 0xFFFFFFFFFFFFFFF8LL) + 8;
        if ((v4 | 7) != 0x17) {
          uint64_t v11 = v4 | 7;
        }
        uint64_t v12 = v11 + 1;
        int v13 = (char *)operator new(v11 + 1);
        *((void *)a2 + 1) = v4;
        *((void *)a2 + 2) = v12 | 0x8000000000000000LL;
        *(void *)a2 = v13;
        a2 = v13;
      }

      else
      {
        a2[23] = v4;
        if (!v4) {
          goto LABEL_18;
        }
      }

      memmove(a2, v5, v4);
LABEL_18:
      a2[v4] = 0;
      return;
    }

__n128 std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>@<Q0>( std::string *this@<X1>, uint64_t a2@<X0>, std::string *a3@<X8>)
{
  int v4 = *(char *)(a2 + 23);
  if (v4 >= 0) {
    unint64_t v5 = (const std::string::value_type *)a2;
  }
  else {
    unint64_t v5 = *(const std::string::value_type **)a2;
  }
  if (v4 >= 0) {
    std::string::size_type v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v6 = *(void *)(a2 + 8);
  }
  std::string::size_type v7 = (__n128 *)std::string::insert(this, 0LL, v5, v6);
  __n128 result = *v7;
  *a3 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0LL;
  v7->n128_u64[1] = 0LL;
  v7[1].n128_u64[0] = 0LL;
  return result;
}

void swift::Demangle::__runtime::keyPathSourceString(char const*,unsigned long)::$_0::operator()( uint64_t **a1@<X0>, unint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v3 = **a1;
  if (0xAAAAAAAAAAAAAAABLL * (((*a1)[1] - v3) >> 3) <= a2)
  {
    a3->__r_.__value_.__s.__size_ = 9;
    strcpy((char *)a3, "<unknown>");
  }

  else
  {
    int v4 = (__int128 *)(v3 + 24 * a2);
    if (*((char *)v4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)v4, *((void *)v4 + 1));
    }

    else
    {
      __int128 v5 = *v4;
      a3->__r_.__value_.__l.__cap_ = *((void *)v4 + 2);
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v5;
    }
  }

void *std::string::basic_string<__swift::__runtime::llvm::StringRef,0>(void *__dst, uint64_t a2)
{
  size_t v2 = *(void *)(a2 + 8);
  if (v2 >= 0x7FFFFFFFFFFFFFF8LL) {
    abort();
  }
  int v4 = *(const void **)a2;
  if (v2 >= 0x17)
  {
    uint64_t v6 = (v2 & 0xFFFFFFFFFFFFFFF8LL) + 8;
    if ((v2 | 7) != 0x17) {
      uint64_t v6 = v2 | 7;
    }
    uint64_t v7 = v6 + 1;
    __int128 v5 = operator new(v6 + 1);
    __dst[1] = v2;
    __dst[2] = v7 | 0x8000000000000000LL;
    *std::string __dst = v5;
  }

  else
  {
    *((_BYTE *)__dst + 23) = v2;
    __int128 v5 = __dst;
    if (!v2) {
      goto LABEL_9;
    }
  }

  memmove(v5, v4, v2);
LABEL_9:
  *((_BYTE *)v5 + v2) = 0;
  return __dst;
}

void swift::Demangle::__runtime::nodeToString( swift::Demangle::__runtime::Node *a1@<X0>, __int128 *a2@<X1>, std::string *a3@<X8>)
{
  if (!a1)
  {
    a3->__r_.__value_.__s.__size_ = 0;
    a3->__r_.__value_.__s.__data_[0] = 0;
    return;
  }

  __int128 v12 = *a2;
  __int128 v13 = a2[1];
  uint64_t v14 = *((void *)a2 + 4);
  __int128 v5 = v15;
  uint64_t v6 = (__int128 *)*((void *)a2 + 8);
  if (v6)
  {
    if (v6 == (__int128 *)((char *)a2 + 40))
    {
      int v16 = v15;
      (*(void (**)(__int128 *, void *))(*(void *)v6 + 24LL))(v6, v15);
      uint64_t v7 = v16;
    }

    else
    {
      uint64_t v7 = (void *)(*(uint64_t (**)(__int128 *))(*(void *)v6 + 16LL))(v6);
      int v16 = v7;
    }

    memset(&__p, 0, sizeof(__p));
    __int128 v18 = v12;
    __int128 v19 = v13;
    uint64_t v20 = v14;
    unint64_t v9 = v21;
    if (v7)
    {
      if (v7 == v15)
      {
        unint64_t v22 = v21;
        (*(void (**)(void *, _BYTE *))(v15[0] + 24LL))(v15, v21);
      }

      else
      {
        unint64_t v22 = (_BYTE *)(*(uint64_t (**)(void *))(*v7 + 16LL))(v7);
      }
    }

    else
    {
      unint64_t v22 = 0LL;
    }
  }

  else
  {
    int v16 = 0LL;
    memset(&__p, 0, sizeof(__p));
    __int128 v8 = a2[1];
    __int128 v18 = *a2;
    __int128 v19 = v8;
    uint64_t v20 = *((void *)a2 + 4);
    unint64_t v9 = v21;
    unint64_t v22 = 0LL;
  }

  __int16 v23 = 256;
  if (HIBYTE(v23))
  {
    *a3 = __p;
    memset(&__p, 0, sizeof(__p));
  }

  else
  {
    a3->__r_.__value_.__s.__size_ = 0;
    a3->__r_.__value_.__s.__data_[0] = 0;
  }

  if (v22 == v21)
  {
    uint64_t v10 = 4LL;
  }

  else
  {
    if (!v22) {
      goto LABEL_21;
    }
    uint64_t v10 = 5LL;
    unint64_t v9 = v22;
  }

  (*(void (**)(void *))(*v9 + 8 * v10))(v9);
LABEL_21:
  if (v16 == v15)
  {
    uint64_t v11 = 4LL;
  }

  else
  {
    if (!v16) {
      return;
    }
    uint64_t v11 = 5LL;
    __int128 v5 = v16;
  }

  (*(void (**)(void *))(*v5 + 8 * v11))(v5);
}

swift::Demangle::__runtime::Node *anonymous namespace'::NodePrinter::print( std::string *this, swift::Demangle::__runtime::Node *a2, unsigned int a3, char a4)
{
  uint64_t v6 = a3 < 0x301;
  if (a3 > 0x300)
  {
LABEL_823:
    std::string::append(this, "<<too complex>>", 0xFuLL);
    uint64_t v11 = 0LL;
    char v9 = v6;
    goto LABEL_827;
  }

  unsigned int v8 = a3;
  char v9 = 0;
  while (2)
  {
    if (!a2)
    {
      uint64_t v276 = "<null node pointer>";
      uint64_t v277 = this;
      std::string::size_type v278 = 19LL;
LABEL_825:
      std::string::append(v277, v276, v278);
      goto LABEL_826;
    }

    int v12 = *((unsigned __int16 *)a2 + 8);
    uint64_t v11 = 0LL;
    switch(*((_WORD *)a2 + 8))
    {
      case 0:
        v407 = a2;
        if (*(_WORD *)(*(void *)v407 + 16LL) == 24) {
          size_t v408 = 17LL;
        }
        else {
          size_t v408 = 4LL;
        }
        if (*(_WORD *)(*(void *)v407 + 16LL) == 24) {
          v283 = "__allocating_init";
        }
        else {
          v283 = "init";
        }
        v633 = "";
        std::string::size_type v634 = 0LL;
        unsigned int v632 = -1;
        int v284 = a4 & 1;
        v285 = (_anonymous_namespace_::NodePrinter *)this;
        v286 = (uint64_t *)a2;
        int v287 = v8;
        int v288 = 2;
        goto LABEL_1328;
      case 1:
        if (!this[1].__r_.__value_.__s.__data_[1] || !this[1].__r_.__value_.__s.__data_[2]) {
          goto LABEL_826;
        }
        int v350 = *((unsigned __int8 *)a2 + 18);
        v351 = a2;
        if (v350 == 2) {
          goto LABEL_941;
        }
        if (v350 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          v351 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_941:
          v352 = (swift::Demangle::__runtime::Node *)*((void *)v351 + 1);
        }

        else
        {
          v352 = 0LL;
        }

        unsigned int v605 = v8 + 1;
        std::string::append(this, ".(unknown context at ", 0x15uLL);
        int v606 = *((unsigned __int8 *)a2 + 18);
        v607 = (swift::Demangle::__runtime::Node **)a2;
        if (v606 == 5 && *((_DWORD *)a2 + 2))
        {
          v607 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_1778:
          v608 = *v607;
        }

        else
        {
          v608 = 0LL;
        }

        std::string::append(this, ")", 1uLL);
        if (*((_BYTE *)a2 + 18) != 5) {
          goto LABEL_826;
        }
        if (*((_DWORD *)a2 + 2) < 3u) {
          goto LABEL_826;
        }
        uint64_t v612 = *(void *)(*(void *)a2 + 16LL);
        int v613 = *(unsigned __int8 *)(v612 + 18);
        std::string::push_back(this, 60);
        if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u) {
          v614 = *(swift::Demangle::__runtime::Node **)(*(void *)a2 + 16LL);
        }
        else {
          v614 = 0LL;
        }
        v594 = this;
        std::string::value_type v595 = 62;
        goto LABEL_1741;
      case 2:
        int v316 = *((unsigned __int8 *)a2 + 18);
        std::string::append(this, "(", 1uLL);
        int v317 = *((unsigned __int8 *)a2 + 18);
        uint64_t v318 = (swift::Demangle::__runtime::Node **)a2;
        if (v317 != 5 || !*((_DWORD *)a2 + 2)) {
          goto LABEL_1497;
        }
        uint64_t v318 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_883:
        unsigned int v319 = v8 + 1;
        unint64_t v320 = 1LL;
        while (2)
        {
          unint64_t v322 = *((unsigned __int8 *)a2 + 18);
          if ((_DWORD)v322 == 2) {
            goto LABEL_889;
          }
          if ((_DWORD)v322 != 5) {
            goto LABEL_1497;
          }
          unint64_t v322 = *((unsigned int *)a2 + 2);
LABEL_889:
          if (v322 <= v320) {
            goto LABEL_1497;
          }
          std::string::append(this, ", ", 2uLL);
          int v323 = *((unsigned __int8 *)a2 + 18);
          if (v323 == 2)
          {
            unint64_t v324 = *((unsigned __int8 *)a2 + 18);
          }

          else
          {
            if (v323 != 5) {
              goto LABEL_884;
            }
            unint64_t v324 = *((unsigned int *)a2 + 2);
          }

          if (v324 > v320)
          {
            unsigned int v325 = v323 - 1;
            v326 = a2;
            if (v325 >= 2) {
              v326 = *(swift::Demangle::__runtime::Node **)a2;
            }
            v321 = (swift::Demangle::__runtime::Node *)*((void *)v326 + v320);
            goto LABEL_885;
          }

LABEL_884:
          v321 = 0LL;
LABEL_885:
          ++v320;
          continue;
        }

      case 3:
        goto LABEL_826;
      case 4:
      case 0x72:
      case 0x122:
      case 0x155:
      case 0x156:
        goto LABEL_827;
      case 5:
        int v492 = *((unsigned __int8 *)a2 + 18);
        unint64_t v493 = (swift::Demangle::__runtime::Node **)a2;
        if (v492 == 5 && *((_DWORD *)a2 + 2))
        {
          unint64_t v493 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_1380:
          unsigned int v494 = *v493;
        }

        else
        {
          unsigned int v494 = 0LL;
        }

        std::string::push_back(this, 46);
        if (*((_BYTE *)a2 + 18) == 5) {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
        }
        uint64_t v570 = *((void *)a2 + 1);
        uint64_t v276 = *(const std::string::value_type **)v570;
        std::string::size_type v278 = *(void *)(v570 + 8);
        uint64_t v277 = this;
        goto LABEL_825;
      case 6:
        std::string::append(this, "associated type metadata accessor for ", 0x26uLL);
        int v47 = *((unsigned __int8 *)a2 + 18);
        unint64_t v48 = a2;
        if (v47 == 2) {
          goto LABEL_91;
        }
        if (v47 != 5) {
          goto LABEL_92;
        }
        goto LABEL_89;
      case 7:
        unint64_t v44 = "default associated type metadata accessor for ";
        unint64_t v45 = this;
        std::string::size_type v46 = 46LL;
        goto LABEL_320;
      case 8:
        if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u) {
          uint64_t v333 = *(void *)(*(void *)a2 + 16LL);
        }
        else {
          uint64_t v333 = 0LL;
        }
        __str.__r_.__value_.__s.__data_[0] = 0;
        *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 1) = 0x101010101010101LL;
        __str.__r_.__value_.__s.__data_[9] = 1;
        *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = 0x101010100000000LL;
        __str.__r_.__value_.__s.__data_[18] = 1;
        *(_WORD *)((char *)&__str.__r_.__value_.__r.__words[2] + 3) = 256;
        __str.__r_.__value_.__s.__data_[21] = 1;
        uint64_t v640 = 0LL;
        uint64_t v641 = 0LL;
        v642 = &unk_189B8B0E8;
        v643 = swift::Demangle::__runtime::genericParameterName;
        v644 = &v642;
        swift::Demangle::__runtime::nodeToString(&v645, v333, &__str);
        uint64_t v497 = "accessor macro @";
        goto LABEL_1406;
      case 9:
        std::string::append(this, "associated type witness table accessor for ", 0x2BuLL);
        int v134 = *((unsigned __int8 *)a2 + 18);
        uint64_t v135 = a2;
        if (v134 == 2) {
          goto LABEL_343;
        }
        if (v134 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          uint64_t v135 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_343:
          unint64_t v136 = (swift::Demangle::__runtime::Node *)*((void *)v135 + 1);
        }

        else
        {
          unint64_t v136 = 0LL;
        }

        std::string::append(this, " : ", 3uLL);
        if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u) {
          unint64_t v53 = *(swift::Demangle::__runtime::Node **)(*(void *)a2 + 16LL);
        }
        else {
          unint64_t v53 = 0LL;
        }
        goto LABEL_470;
      case 0xA:
        std::string::append(this, "base witness table accessor for ", 0x20uLL);
        int v52 = *((unsigned __int8 *)a2 + 18);
        unint64_t v48 = a2;
        if (v52 == 2) {
          goto LABEL_91;
        }
        if (v52 != 5) {
          goto LABEL_92;
        }
LABEL_89:
        if (*((_DWORD *)a2 + 2) < 2u)
        {
LABEL_92:
          unint64_t v53 = 0LL;
        }

        else
        {
          unint64_t v48 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_91:
          unint64_t v53 = (swift::Demangle::__runtime::Node *)*((void *)v48 + 1);
        }

        ++v8;
LABEL_470:
        uint64_t v181 = " in ";
        int v182 = this;
        std::string::size_type v183 = 4LL;
        goto LABEL_471;
      case 0xB:
      case 0x16:
      case 0x40:
      case 0x41:
      case 0x52:
      case 0xA5:
      case 0xA6:
      case 0xDE:
      case 0xF5:
        uint64_t v280 = this;
        int v281 = 0LL;
        int v282 = a2;
        goto LABEL_831;
      case 0xC:
        if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u) {
          uint64_t v489 = *(void *)(*(void *)a2 + 16LL);
        }
        else {
          uint64_t v489 = 0LL;
        }
        __str.__r_.__value_.__s.__data_[0] = 0;
        *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 1) = 0x101010101010101LL;
        __str.__r_.__value_.__s.__data_[9] = 1;
        *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = 0x101010100000000LL;
        __str.__r_.__value_.__s.__data_[18] = 1;
        *(_WORD *)((char *)&__str.__r_.__value_.__r.__words[2] + 3) = 256;
        __str.__r_.__value_.__s.__data_[21] = 1;
        uint64_t v640 = 0LL;
        uint64_t v641 = 0LL;
        v642 = &unk_189B8B0E8;
        v643 = swift::Demangle::__runtime::genericParameterName;
        v644 = &v642;
        swift::Demangle::__runtime::nodeToString(&v645, v489, &__str);
        uint64_t v497 = "body macro @";
        goto LABEL_1406;
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
        goto LABEL_826;
      case 0x13:
      case 0x4C:
        v283 = "";
        v633 = "";
        std::string::size_type v634 = 0LL;
        unsigned int v632 = -1;
        int v284 = a4 & 1;
        v285 = (_anonymous_namespace_::NodePrinter *)this;
        v286 = (uint64_t *)a2;
        int v287 = v8;
        int v288 = 2;
        goto LABEL_1484;
      case 0x14:
      case 0x17:
      case 0x65:
      case 0x6A:
      case 0x70:
      case 0x92:
        goto LABEL_1014;
      case 0x15:
        uint64_t v276 = "Builtin.TheTupleType";
        uint64_t v277 = this;
        std::string::size_type v278 = 20LL;
        goto LABEL_825;
      case 0x18:
      case 0x3D:
      case 0xA7:
      case 0xB4:
      case 0xDB:
      case 0xEA:
      case 0x106:
        v283 = "";
        v633 = "";
        std::string::size_type v634 = 0LL;
        unsigned int v632 = -1;
        int v284 = a4 & 1;
        v285 = (_anonymous_namespace_::NodePrinter *)this;
        v286 = (uint64_t *)a2;
        int v287 = v8;
        int v288 = 0;
        goto LABEL_1484;
      case 0x19:
        unint64_t v44 = "class metadata base offset for ";
        goto LABEL_109;
      case 0x1A:
        std::string::append(this, "concrete protocol conformance ", 0x1EuLL);
        int v145 = *((unsigned __int8 *)a2 + 18);
        if (v145 == 4)
        {
          std::string::append(this, "#", 1uLL);
          unint64_t v146 = swift::Demangle::__runtime::DemanglerPrinter::operator<<(this, *(void *)a2);
          std::string::append(v146, " ", 1uLL);
          int v145 = *((unsigned __int8 *)a2 + 18);
        }

        __int128 v147 = (swift::Demangle::__runtime::Node **)a2;
        if (v145 == 5 && *((_DWORD *)a2 + 2))
        {
          __int128 v147 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_367:
          unsigned int v148 = *v147;
        }

        else
        {
          unsigned int v148 = 0LL;
        }

        std::string::append(this, " to ", 4uLL);
        int v195 = *((unsigned __int8 *)a2 + 18);
        uint64_t v196 = a2;
        if (v195 == 2) {
          goto LABEL_517;
        }
        if (v195 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          uint64_t v196 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_517:
          int v197 = (swift::Demangle::__runtime::Node *)*((void *)v196 + 1);
        }

        else
        {
          int v197 = 0LL;
        }

        if (*((_BYTE *)a2 + 18) != 5) {
          goto LABEL_826;
        }
        if (*((_DWORD *)a2 + 2) < 3u) {
          goto LABEL_826;
        }
        uint64_t v198 = *(void *)(*(void *)a2 + 16LL);
        int v199 = *(unsigned __int8 *)(v198 + 18);
        unsigned int v158 = " with conditional requirements: ";
        uint64_t v159 = this;
        std::string::size_type v160 = 32LL;
        goto LABEL_525;
      case 0x1B:
        __int128 v363 = "pack protocol conformance ";
        uint64_t v364 = this;
        std::string::size_type v365 = 26LL;
        goto LABEL_1515;
      case 0x1C:
        if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u) {
          uint64_t v375 = *(void *)(*(void *)a2 + 16LL);
        }
        else {
          uint64_t v375 = 0LL;
        }
        __str.__r_.__value_.__s.__data_[0] = 0;
        *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 1) = 0x101010101010101LL;
        __str.__r_.__value_.__s.__data_[9] = 1;
        *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = 0x101010100000000LL;
        __str.__r_.__value_.__s.__data_[18] = 1;
        *(_WORD *)((char *)&__str.__r_.__value_.__r.__words[2] + 3) = 256;
        __str.__r_.__value_.__s.__data_[21] = 1;
        uint64_t v640 = 0LL;
        uint64_t v641 = 0LL;
        v642 = &unk_189B8B0E8;
        v643 = swift::Demangle::__runtime::genericParameterName;
        v644 = &v642;
        swift::Demangle::__runtime::nodeToString(&v645, v375, &__str);
        uint64_t v497 = "conformance macro @";
        goto LABEL_1406;
      case 0x1D:
        int v490 = *((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) > 2u;
        goto LABEL_1487;
      case 0x1E:
        BOOL v29 = "coroutine continuation prototype for ";
        goto LABEL_119;
      case 0x1F:
        unsigned int v476 = a2;
        if (*(_WORD *)(*(void *)v476 + 16LL) == 24) {
          size_t v408 = 21LL;
        }
        else {
          size_t v408 = 6LL;
        }
        if (*(_WORD *)(*(void *)v476 + 16LL) == 24) {
          v283 = "__deallocating_deinit";
        }
        else {
          v283 = "deinit";
        }
        v633 = "";
        std::string::size_type v634 = 0LL;
        unsigned int v632 = -1;
        int v284 = a4 & 1;
        v285 = (_anonymous_namespace_::NodePrinter *)this;
        v286 = (uint64_t *)a2;
        int v287 = v8;
        int v288 = 0;
LABEL_1328:
        int v424 = 0;
        goto LABEL_1486;
      case 0x20:
      case 0xE8:
        goto LABEL_313;
      case 0x21:
        v366 = a2;
        if (*((_BYTE *)a2 + 18) == 5) {
          v366 = *(swift::Demangle::__runtime::Node **)a2;
        }
        goto LABEL_1487;
      case 0x22:
        __int128 v363 = "dependent associated conformance ";
        uint64_t v364 = this;
        std::string::size_type v365 = 33LL;
        goto LABEL_1515;
      case 0x23:
        int v107 = *((unsigned __int8 *)a2 + 18);
        unint64_t v108 = a2;
        if (v107 == 2) {
          goto LABEL_253;
        }
        if (v107 != 5) {
          goto LABEL_254;
        }
        unsigned int v109 = *((_DWORD *)a2 + 2);
        if (v109 < 2) {
          goto LABEL_257;
        }
        unint64_t v108 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_253:
        std::string::push_back(this, 46);
        int v107 = *((unsigned __int8 *)a2 + 18);
LABEL_254:
        if (v107 != 5) {
          goto LABEL_498;
        }
        unsigned int v109 = *((_DWORD *)a2 + 2);
LABEL_257:
        if (!v109) {
          goto LABEL_498;
        }
        goto LABEL_300;
      case 0x24:
        int v104 = *((unsigned __int8 *)a2 + 18);
        std::string::size_type v105 = (swift::Demangle::__runtime::Node **)a2;
        if (v104 == 5)
        {
          if (!*((_DWORD *)a2 + 2))
          {
            unsigned int v106 = 0LL;
            goto LABEL_804;
          }

          std::string::size_type v105 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_246:
          unsigned int v106 = *v105;
        }

        else
        {
          unsigned int v106 = 0LL;
        }

        if (v104 == 2) {
          goto LABEL_634;
        }
        if (v104 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_634:
          uint64_t v11 = (swift::Demangle::__runtime::Node *)*((void *)a2 + 1);
          goto LABEL_805;
        }

LABEL_804:
        uint64_t v11 = 0LL;
LABEL_805:
        std::string::append(this, ": ", 2uLL);
        goto LABEL_7;
      case 0x25:
      case 0x2A:
        printer_unreachable("should be printed as a child of a DependentGenericSignature");
      case 0x26:
        if (*((_BYTE *)a2 + 18) == 5) {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
        }
        std::function<std::string ()(unsigned long long,unsigned long long)>::operator()( (uint64_t)&this[2].__r_.__value_.__l.__cap_,  **(unsigned int **)a2,  **((unsigned int **)a2 + 1));
        if ((__str.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          p_str = &__str;
        }
        else {
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        if ((__str.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          std::string::size_type size = __str.__r_.__value_.__s.__size_;
        }
        else {
          std::string::size_type size = __str.__r_.__value_.__l.__size_;
        }
        std::string::append(this, (const std::string::value_type *)p_str, size);
        goto LABEL_826;
      case 0x27:
        int v39 = *((unsigned __int8 *)a2 + 18);
        unint64_t v40 = (swift::Demangle::__runtime::Node **)a2;
        if (v39 == 5)
        {
          if (!*((_DWORD *)a2 + 2))
          {
            unsigned int v41 = 0LL;
            goto LABEL_736;
          }

          unint64_t v40 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_62:
          unsigned int v41 = *v40;
        }

        else
        {
          unsigned int v41 = 0LL;
        }

        if (v39 == 2) {
          goto LABEL_603;
        }
        if (v39 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_603:
          uint64_t v11 = (swift::Demangle::__runtime::Node *)*((void *)a2 + 1);
          goto LABEL_737;
        }

LABEL_736:
        uint64_t v11 = 0LL;
LABEL_737:
        std::string::append(this, " == ", 4uLL);
        goto LABEL_7;
      case 0x28:
        int v356 = *((unsigned __int8 *)a2 + 18);
        uint64_t v357 = (swift::Demangle::__runtime::Node **)a2;
        if (v356 == 5)
        {
          if (!*((_DWORD *)a2 + 2))
          {
            uint64_t v358 = 0LL;
LABEL_1820:
            v573 = 0LL;
LABEL_1821:
            unsigned int v615 = v8 + 1;
            std::string::append(this, ".shape == ", 0xAuLL);
            v550 = ".shape";
            v568 = this;
            std::string::size_type v569 = 6LL;
LABEL_1822:
            std::string::append(v568, v550, v569);
            return 0LL;
          }

          uint64_t v357 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_954:
          uint64_t v358 = *v357;
        }

        else
        {
          uint64_t v358 = 0LL;
        }

        if (v356 == 2)
        {
LABEL_1670:
          v573 = (swift::Demangle::__runtime::Node *)*((void *)a2 + 1);
          goto LABEL_1821;
        }

        if (v356 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
          goto LABEL_1670;
        }

        goto LABEL_1820;
      case 0x29:
        int v486 = *((unsigned __int8 *)a2 + 18);
        unsigned int v487 = (swift::Demangle::__runtime::Node **)a2;
        if (v486 == 5)
        {
          if (!*((_DWORD *)a2 + 2))
          {
            BOOL v488 = 0LL;
LABEL_1824:
            v583 = 0LL;
LABEL_1825:
            unsigned int v616 = v8 + 1;
            std::string::append(this, ": ", 2uLL);
            v617 = "_UnknownLayout";
            std::string::size_type v618 = 14LL;
            switch(**v583)
            {
              case 'C':
                v617 = "AnyObject";
                std::string::size_type v618 = 9LL;
                break;
              case 'D':
                v617 = "_NativeClass";
                std::string::size_type v618 = 12LL;
                break;
              case 'N':
                v617 = "_NativeRefCountedObject";
                std::string::size_type v618 = 23LL;
                break;
              case 'R':
                v617 = "_RefCountedObject";
                std::string::size_type v618 = 17LL;
                break;
              case 'T':
                goto LABEL_1830;
              case 'U':
                break;
              default:
                int v619 = **v583 & 0xDF;
                if (v619 == 77)
                {
                  v617 = "_TrivialAtMost";
                  std::string::size_type v618 = 14LL;
                }

                else if (v619 == 69)
                {
LABEL_1830:
                  v617 = "_Trivial";
                  std::string::size_type v618 = 8LL;
                }

                else
                {
                  std::string::size_type v618 = 0LL;
                  v617 = 0LL;
                }

                break;
            }

            std::string::append(this, v617, v618);
            if (*((_BYTE *)a2 + 18) != 5 || *((_DWORD *)a2 + 2) < 3u) {
              goto LABEL_826;
            }
            std::string::append(this, "(", 1uLL);
            if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u) {
              v631 = *(swift::Demangle::__runtime::Node **)(*(void *)a2 + 16LL);
            }
            else {
              v631 = 0LL;
            }
            if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 4u)
            {
              std::string::append(this, ", ", 2uLL);
              if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 4u) {
                uint64_t v437 = *(swift::Demangle::__runtime::Node **)(*(void *)a2 + 24LL);
              }
              else {
                uint64_t v437 = 0LL;
              }
              int v439 = (_anonymous_namespace_::NodePrinter *)this;
              unsigned int v438 = v616;
LABEL_1198:
            }

            goto LABEL_1497;
          }

          unsigned int v487 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_1361:
          BOOL v488 = *v487;
        }

        else
        {
          BOOL v488 = 0LL;
        }

        v582 = a2;
        if (v486 == 2)
        {
LABEL_1712:
          v583 = (_BYTE **)*((void *)v582 + 1);
          goto LABEL_1825;
        }

        if (v486 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          v582 = *(swift::Demangle::__runtime::Node **)a2;
          goto LABEL_1712;
        }

        goto LABEL_1824;
      case 0x2B:
      case 0x2E:
        goto LABEL_826;
      case 0x2C:
        int v142 = *((unsigned __int8 *)a2 + 18);
        __int128 v143 = (swift::Demangle::__runtime::Node **)a2;
        if (v142 == 5)
        {
          if (!*((_DWORD *)a2 + 2))
          {
            unint64_t v144 = 0LL;
LABEL_807:
            uint64_t v11 = 0LL;
LABEL_808:
            __int128 v271 = v11;
            while (1)
            {
              while (1)
              {
                v272 = v271;
                int v273 = *((unsigned __int16 *)v271 + 8);
                if (v273 != 232)
                {
                  BOOL v275 = (v273 - 44) > 0x26
                      || ((1LL << (v273 - 44)) & 0x4000200001LL) == 0;
                  if (v275 && v273 != 245) {
                    std::string::push_back(this, 32);
                  }
                  goto LABEL_7;
                }

                int v274 = *((unsigned __int8 *)v272 + 18);
LABEL_811:
                __int128 v271 = *(swift::Demangle::__runtime::Node **)v272;
              }

              __int128 v271 = 0LL;
              if (v274 == 5)
              {
                __int128 v271 = 0LL;
                if (*((_DWORD *)v272 + 2))
                {
                  v272 = *(swift::Demangle::__runtime::Node **)v272;
                  goto LABEL_811;
                }
              }
            }
          }

          __int128 v143 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_360:
          unint64_t v144 = *v143;
        }

        else
        {
          unint64_t v144 = 0LL;
        }

        if (v142 == 2)
        {
LABEL_640:
          uint64_t v11 = (swift::Demangle::__runtime::Node *)*((void *)a2 + 1);
          goto LABEL_808;
        }

        if (v142 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
          goto LABEL_640;
        }

        goto LABEL_807;
      case 0x2D:
        int v140 = *((unsigned __int8 *)a2 + 18);
        std::string::size_type v67 = (swift::Demangle::__runtime::Node **)a2;
        if (v140 == 5 && *((_DWORD *)a2 + 2)) {
          goto LABEL_354;
        }
        goto LABEL_405;
      case 0x2F:
        std::string::size_type v95 = "dependent root protocol conformance ";
        unint64_t v96 = this;
        std::string::size_type v97 = 36LL;
        goto LABEL_326;
      case 0x30:
        std::string::size_type v95 = "dependent inherited protocol conformance ";
        unint64_t v96 = this;
        std::string::size_type v97 = 41LL;
        goto LABEL_326;
      case 0x31:
        std::string::size_type v95 = "dependent associated protocol conformance ";
        unint64_t v96 = this;
        std::string::size_type v97 = 42LL;
LABEL_326:
        std::string::append(v96, v95, v97);
        int v127 = *((unsigned __int8 *)a2 + 18);
        if (v127 == 5 && *((_DWORD *)a2 + 2) >= 3u) {
          uint64_t v128 = *(void *)(*(void *)a2 + 16LL);
        }
        else {
          uint64_t v128 = 0LL;
        }
        if (*(_BYTE *)(v128 + 18) == 4)
        {
          std::string::append(this, "#", 1uLL);
          snprintf((char *)&__str, 0x20uLL, "%llu", *(void *)v128);
          std::string::append(this, (const std::string::value_type *)&__str);
          std::string::append(this, " ", 1uLL);
          int v127 = *((unsigned __int8 *)a2 + 18);
        }

        unint64_t v129 = (swift::Demangle::__runtime::Node **)a2;
        if (v127 == 5 && *((_DWORD *)a2 + 2))
        {
          unint64_t v129 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_336:
          int v130 = *v129;
        }

        else
        {
          int v130 = 0LL;
        }

        uint64_t v131 = " to ";
        int v132 = this;
        std::string::size_type v133 = 4LL;
        goto LABEL_506;
      case 0x32:
        goto LABEL_1487;
      case 0x33:
        int v367 = *((unsigned __int8 *)a2 + 18);
        if (v367 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_977:
          uint64_t v328 = *(void *)a2;
        }

        else
        {
          uint64_t v328 = 0LL;
        }

        int v517 = a4 & 1;
        v518 = "didset";
        goto LABEL_1578;
      case 0x34:
        if (*(_DWORD *)a2)
        {
          if (*(_DWORD *)a2 != 1) {
            printer_unreachable("bad directness");
          }
          v313 = "indirect";
          std::string::size_type v314 = 8LL;
        }

        else
        {
          v313 = "direct";
          std::string::size_type v314 = 6LL;
        }

        std::string::append(this, v313, v314);
        uint64_t v276 = " ";
        goto LABEL_1498;
      case 0x35:
        if (this[1].__r_.__value_.__s.__data_[11]) {
          goto LABEL_826;
        }
        uint64_t v276 = "distributed thunk ";
LABEL_1356:
        uint64_t v277 = this;
        std::string::size_type v278 = 18LL;
        goto LABEL_825;
      case 0x36:
        if (this[1].__r_.__value_.__s.__data_[11]) {
          goto LABEL_826;
        }
        uint64_t v276 = "distributed accessor for ";
LABEL_1216:
        uint64_t v277 = this;
        std::string::size_type v278 = 25LL;
        goto LABEL_825;
      case 0x37:
        uint64_t v276 = "dynamic ";
        goto LABEL_1770;
      case 0x38:
        uint64_t v276 = "super ";
        goto LABEL_1278;
      case 0x39:
      case 0x55:
        uint64_t v276 = "Self";
        goto LABEL_1060;
      case 0x3A:
        if (this[1].__r_.__value_.__s.__data_[11]) {
          goto LABEL_826;
        }
        uint64_t v276 = "dynamically replaceable thunk for ";
        uint64_t v277 = this;
        std::string::size_type v278 = 34LL;
        goto LABEL_825;
      case 0x3B:
        if (this[1].__r_.__value_.__s.__data_[11]) {
          goto LABEL_826;
        }
        uint64_t v276 = "dynamically replaceable key for ";
        uint64_t v277 = this;
        std::string::size_type v278 = 32LL;
        goto LABEL_825;
      case 0x3C:
        if (this[1].__r_.__value_.__s.__data_[11]) {
          goto LABEL_826;
        }
        uint64_t v276 = "dynamically replaceable variable for ";
        uint64_t v277 = this;
        std::string::size_type v278 = 37LL;
        goto LABEL_825;
      case 0x3E:
        unint64_t v44 = "enum case for ";
        goto LABEL_210;
      case 0x3F:
        uint64_t v276 = "<ERROR TYPE>";
        goto LABEL_1112;
      case 0x42:
        uint64_t v276 = "@Sendable ";
        goto LABEL_1699;
      case 0x43:
        int v413 = *((unsigned __int8 *)a2 + 18);
        std::string::push_back(this, 64);
        int v414 = *((unsigned __int8 *)a2 + 18);
        if (v414 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1139:
          v415 = *(swift::Demangle::__runtime::Node **)a2;
        }

        else
        {
          v415 = 0LL;
        }

        v594 = this;
        std::string::value_type v595 = 32;
LABEL_1741:
        std::string::push_back(v594, v595);
        return 0LL;
      case 0x44:
        std::string::append(this, "@differentiable", 0xFuLL);
        int v368 = *(unsigned __int8 *)a2;
        switch(v368)
        {
          case 'r':
            v294 = "(reverse)";
            break;
          case 'l':
            v294 = "(_linear)";
            break;
          case 'f':
            v294 = "(_forward)";
            unint64_t v295 = this;
            std::string::size_type v293 = 10LL;
LABEL_1674:
            std::string::append(v295, v294, v293);
LABEL_1675:
            std::string::push_back(this, 32);
            goto LABEL_826;
          default:
            goto LABEL_1675;
        }

        unint64_t v295 = this;
        std::string::size_type v293 = 9LL;
        goto LABEL_1674;
      case 0x45:
        int v345 = *((unsigned __int8 *)a2 + 18);
        uint64_t v346 = (swift::Demangle::__runtime::Node **)a2;
        if (v345 == 2) {
          goto LABEL_934;
        }
        switch(v345)
        {
          case 5:
            unsigned int v347 = *((_DWORD *)a2 + 2);
            if (v347 != 2)
            {
              unint64_t v348 = 0LL;
              goto LABEL_1783;
            }

            uint64_t v346 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_934:
            unint64_t v348 = 1LL;
            std::string::append(this, " ", 1uLL);
            char v349 = 0;
            int v345 = *((unsigned __int8 *)a2 + 18);
            break;
          case 1:
            unint64_t v348 = 0LL;
            v603 = 0LL;
            if ((v349 & 1) == 0) {
              goto LABEL_1787;
            }
            goto LABEL_1785;
          case 2:
LABEL_1785:
            v603 = (swift::Demangle::__runtime::Node *)*((void *)a2 + v348);
            goto LABEL_1787;
          default:
            unint64_t v348 = 0LL;
            char v349 = 1;
            break;
        }

        if (v345 != 5)
        {
LABEL_1786:
          v603 = 0LL;
LABEL_1787:
          v550 = ".Type";
          v568 = this;
          std::string::size_type v569 = 5LL;
          goto LABEL_1822;
        }

        unsigned int v347 = *((_DWORD *)a2 + 2);
LABEL_1783:
        if (v348 < v347)
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
          goto LABEL_1785;
        }

        goto LABEL_1786;
      case 0x46:
        unint64_t v491 = a2;
        if (*((_BYTE *)a2 + 18) == 5) {
          unint64_t v491 = *(swift::Demangle::__runtime::Node **)a2;
        }
        goto LABEL_1487;
      case 0x47:
        if (!this[1].__r_.__value_.__s.__data_[1] || !this[1].__r_.__value_.__s.__data_[2]) {
          goto LABEL_712;
        }
        std::string::append(this, "(extension in ", 0xEuLL);
        int v137 = *((unsigned __int8 *)a2 + 18);
        unint64_t v138 = (swift::Demangle::__runtime::Node **)a2;
        if (v137 == 5 && *((_DWORD *)a2 + 2))
        {
          unint64_t v138 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_350:
          unint64_t v139 = *v138;
        }

        else
        {
          unint64_t v139 = 0LL;
        }

        std::string::append(this, "):", 2uLL);
LABEL_712:
        int v247 = *((unsigned __int8 *)a2 + 18);
        unsigned int v248 = a2;
        if (v247 == 2) {
          goto LABEL_716;
        }
        if (v247 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          unsigned int v248 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_716:
          __int16 v249 = (swift::Demangle::__runtime::Node *)*((void *)v248 + 1);
        }

        else
        {
          __int16 v249 = 0LL;
        }

        if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) == 3 && !this[1].__r_.__value_.__s.__data_[19]) {
          goto LABEL_721;
        }
        goto LABEL_826;
      case 0x48:
        if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u) {
          uint64_t v435 = *(void *)(*(void *)a2 + 16LL);
        }
        else {
          uint64_t v435 = 0LL;
        }
        __str.__r_.__value_.__s.__data_[0] = 0;
        *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 1) = 0x101010101010101LL;
        __str.__r_.__value_.__s.__data_[9] = 1;
        *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = 0x101010100000000LL;
        __str.__r_.__value_.__s.__data_[18] = 1;
        *(_WORD *)((char *)&__str.__r_.__value_.__r.__words[2] + 3) = 256;
        __str.__r_.__value_.__s.__data_[21] = 1;
        uint64_t v640 = 0LL;
        uint64_t v641 = 0LL;
        v642 = &unk_189B8B0E8;
        v643 = swift::Demangle::__runtime::genericParameterName;
        v644 = &v642;
        swift::Demangle::__runtime::nodeToString(&v645, v435, &__str);
        uint64_t v497 = "extension macro @";
        goto LABEL_1406;
      case 0x49:
        int v36 = *((unsigned __int8 *)a2 + 18);
        int v37 = (swift::Demangle::__runtime::Node **)a2;
        if (v36 == 5 && *((_DWORD *)a2 + 2))
        {
          int v37 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_57:
          uint64_t v38 = *v37;
        }

        else
        {
          uint64_t v38 = 0LL;
        }

        uint64_t v131 = "field offset for ";
        goto LABEL_501;
      case 0x4A:
        goto LABEL_1487;
      case 0x4B:
        unint64_t v44 = "full type metadata for ";
        unint64_t v45 = this;
        std::string::size_type v46 = 23LL;
        goto LABEL_320;
      case 0x4D:
        unint64_t v289 = "function signature specialization";
        unint64_t v290 = this;
        int v291 = (uint64_t *)a2;
        std::string::size_type v292 = 33LL;
        goto LABEL_1370;
      case 0x4E:
      case 0x4F:
        printer_unreachable("should be handled in printSpecializationPrefix");
      case 0x50:
        uint64_t v315 = *(void *)a2;
        if ((*(void *)a2 & 0x400) != 0)
        {
          std::string::append(this, "Existential To Protocol Constrained Generic", 0x2BuLL);
          if ((v315 & 0x40) == 0)
          {
            if ((v315 & 0x80) == 0) {
              goto LABEL_1658;
            }
LABEL_1656:
            std::string::append(this, " and ", 5uLL);
LABEL_1657:
            std::string::append(this, "Owned To Guaranteed", 0x13uLL);
            goto LABEL_1658;
          }

          std::string::append(this, " and ", 5uLL);
        }

        else if ((v315 & 0x40) == 0)
        {
          if ((v315 & 0x80) == 0)
          {
            if ((v315 & 0x200) == 0)
            {
              if ((v315 & 0x100) == 0)
              {
                uint64_t v11 = 0LL;
                if ((int)v315 <= 127)
                {
                  switch((int)v315)
                  {
                    case 0:
                      uint64_t v276 = "Constant Propagated Function";
                      uint64_t v277 = this;
                      std::string::size_type v278 = 28LL;
                      goto LABEL_825;
                    case 1:
                      uint64_t v276 = "Constant Propagated Global";
                      goto LABEL_1067;
                    case 2:
                      uint64_t v276 = "Constant Propagated Integer";
                      goto LABEL_1892;
                    case 3:
                      uint64_t v276 = "Constant Propagated Float";
                      goto LABEL_1216;
                    case 4:
                      uint64_t v276 = "Constant Propagated String";
                      goto LABEL_1067;
                    case 5:
                      uint64_t v276 = "Closure Propagated";
                      goto LABEL_1356;
                    case 6:
                      uint64_t v276 = "Value Promoted from Box";
                      goto LABEL_1772;
                    case 7:
                      uint64_t v276 = "Stack Promoted from Box";
                      goto LABEL_1772;
                    case 8:
                      uint64_t v276 = "InOut Converted to Out";
                      goto LABEL_1075;
                    case 9:
                      uint64_t v276 = "Constant Propagated KeyPath";
LABEL_1892:
                      uint64_t v277 = this;
                      std::string::size_type v278 = 27LL;
                      goto LABEL_825;
                    case 64:
                      goto LABEL_1899;
                    default:
                      goto LABEL_827;
                  }
                }

                if ((int)v315 > 511)
                {
                  if ((_DWORD)v315 != 512 && (_DWORD)v315 != 1024) {
                    goto LABEL_827;
                  }
                }

                else if ((_DWORD)v315 != 128 && (_DWORD)v315 != 256)
                {
                  goto LABEL_827;
                }

LABEL_1899:
                printer_unreachable("option sets should have been handled earlier");
              }

              goto LABEL_1664;
            }

            goto LABEL_1662;
          }

          goto LABEL_1657;
        }

        std::string::append(this, "Dead", 4uLL);
        if ((v315 & 0x80) == 0)
        {
LABEL_1658:
          if ((v315 & 0x200) == 0)
          {
            if ((v315 & 0x100) == 0) {
              goto LABEL_826;
            }
LABEL_1663:
            std::string::append(this, " and ", 5uLL);
LABEL_1664:
            uint64_t v276 = "Exploded";
LABEL_1770:
            uint64_t v277 = this;
            std::string::size_type v278 = 8LL;
            goto LABEL_825;
          }

          std::string::append(this, " and ", 5uLL);
LABEL_1662:
          std::string::append(this, "Guaranteed To Owned", 0x13uLL);
          if ((v315 & 0x100) == 0) {
            goto LABEL_826;
          }
          goto LABEL_1663;
        }

        goto LABEL_1656;
      case 0x51:
        uint64_t v478 = *(_WORD **)a2;
        unint64_t v479 = *((void *)a2 + 1);
        __str.__r_.__value_.__s.__data_[0] = 0;
        *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 1) = 0x101010101010101LL;
        __str.__r_.__value_.__s.__data_[9] = 1;
        *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = 0x101010100000000LL;
        __str.__r_.__value_.__s.__data_[18] = 1;
        *(_WORD *)((char *)&__str.__r_.__value_.__r.__words[2] + 3) = 256;
        __str.__r_.__value_.__s.__data_[21] = 1;
        uint64_t v640 = 0LL;
        uint64_t v641 = 0LL;
        v642 = &unk_189B8B0E8;
        v643 = swift::Demangle::__runtime::genericParameterName;
        v644 = &v642;
        swift::Demangle::__runtime::demangleSymbolAsString(v478, v479, (uint64_t)&__str, &v647);
        uint64_t v480 = v644;
        if (v644 == &v642)
        {
          uint64_t v481 = 4LL;
          uint64_t v480 = &v642;
        }

        else
        {
          if (!v644) {
            goto LABEL_1519;
          }
          uint64_t v481 = 5LL;
        }

        (*((void (**)(void))*v480 + v481))();
LABEL_1519:
        if (v648 >= 0) {
          std::string::size_type v538 = HIBYTE(v648);
        }
        else {
          std::string::size_type v538 = *((void *)&v647 + 1);
        }
        if (v538)
        {
          if (v648 >= 0) {
            v539 = (const std::string::value_type *)&v647;
          }
          else {
            v539 = (const std::string::value_type *)v647;
          }
        }

        else
        {
          v539 = *(const std::string::value_type **)a2;
          std::string::size_type v538 = *((void *)a2 + 1);
        }

        std::string::append(this, v539, v538);
        if (SHIBYTE(v648) < 0) {
          operator delete((void *)v647);
        }
        goto LABEL_826;
      case 0x53:
        std::string::append(this, "any ", 4uLL);
        int v482 = *((unsigned __int8 *)a2 + 18);
        uint64_t v483 = (swift::Demangle::__runtime::Node **)a2;
        if (v482 == 5 && *((_DWORD *)a2 + 2))
        {
          uint64_t v483 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_1348:
          uint64_t v484 = *v483;
        }

        else
        {
          uint64_t v484 = 0LL;
        }

        unsigned int v565 = v8 + 1;
        std::string::append(this, "<", 1uLL);
        int v566 = *((unsigned __int8 *)a2 + 18);
        if (v566 == 2) {
          goto LABEL_1623;
        }
        if (v566 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1623:
          v567 = (swift::Demangle::__runtime::Node *)*((void *)a2 + 1);
        }

        else
        {
          v567 = 0LL;
        }

        v550 = ">";
        goto LABEL_1626;
      case 0x54:
        int v412 = ", ";
        goto LABEL_1333;
      case 0x56:
        unint64_t v329 = "generic partial specialization";
        v330 = this;
        v331 = (uint64_t *)a2;
        std::string::size_type v332 = 30LL;
        goto LABEL_1363;
      case 0x57:
        unint64_t v329 = "generic not-reabstracted partial specialization";
        v330 = this;
        v331 = (uint64_t *)a2;
        std::string::size_type v332 = 47LL;
LABEL_1363:
        goto LABEL_826;
      case 0x58:
        unint64_t v44 = "generic protocol witness table for ";
        goto LABEL_319;
      case 0x59:
        unint64_t v44 = "instantiation function for generic protocol witness table for ";
        unint64_t v45 = this;
        std::string::size_type v46 = 62LL;
        goto LABEL_320;
      case 0x5A:
        unint64_t v44 = "resilient protocol witness table for ";
        unint64_t v45 = this;
        std::string::size_type v46 = 37LL;
        goto LABEL_320;
      case 0x5B:
      case 0x5D:
        unint64_t v289 = "generic specialization";
        unint64_t v290 = this;
        int v291 = (uint64_t *)a2;
        std::string::size_type v292 = 22LL;
        goto LABEL_1370;
      case 0x5C:
        unint64_t v289 = "generic not re-abstracted specialization";
        unint64_t v290 = this;
        int v291 = (uint64_t *)a2;
        std::string::size_type v292 = 40LL;
        goto LABEL_1370;
      case 0x5E:
        int v409 = *((unsigned __int8 *)a2 + 18);
        v410 = (swift::Demangle::__runtime::Node **)a2;
        if (v409 == 5 && *((_DWORD *)a2 + 2))
        {
          v410 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_1129:
          __int128 v411 = *v410;
        }

        else
        {
          __int128 v411 = 0LL;
        }

        unsigned int v551 = v8 + 1;
        unsigned int v552 = *((unsigned __int8 *)a2 + 18);
        if (v552 != 2)
        {
          if (v552 != 5) {
            goto LABEL_826;
          }
          unsigned int v552 = *((_DWORD *)a2 + 2);
          if (v552 < 2) {
            goto LABEL_826;
          }
        }

        uint64_t v553 = v552;
        std::string::append(this, " with ", 6uLL);
        int v554 = *((unsigned __int8 *)a2 + 18);
        v555 = a2;
        if (v554 == 2) {
          goto LABEL_1589;
        }
        if (v554 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          v555 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1589:
          v556 = (swift::Demangle::__runtime::Node *)*((void *)v555 + 1);
        }

        else
        {
          v556 = 0LL;
        }

        if ((_DWORD)v553 == 2) {
          goto LABEL_826;
        }
        unint64_t v574 = 2LL;
        while (1)
        {
          std::string::append(this, " and ", 5uLL);
          int v576 = *((unsigned __int8 *)a2 + 18);
          if (v576 == 2)
          {
            unint64_t v577 = *((unsigned __int8 *)a2 + 18);
          }

          else
          {
            if (v576 != 5) {
              goto LABEL_1679;
            }
            unint64_t v577 = *((unsigned int *)a2 + 2);
          }

          if (v577 > v574)
          {
            unsigned int v578 = v576 - 1;
            v579 = a2;
            if (v578 >= 2) {
              v579 = *(swift::Demangle::__runtime::Node **)a2;
            }
            v575 = (swift::Demangle::__runtime::Node *)*((void *)v579 + v574);
            goto LABEL_1680;
          }

LABEL_1679:
          v575 = 0LL;
LABEL_1680:
          if (v553 == ++v574) {
            goto LABEL_826;
          }
        }

      case 0x5F:
        unint64_t v289 = "generic pre-specialization";
        unint64_t v290 = this;
        int v291 = (uint64_t *)a2;
        std::string::size_type v292 = 26LL;
        goto LABEL_1370;
      case 0x60:
        unint64_t v289 = "inlined generic function";
        unint64_t v290 = this;
        int v291 = (uint64_t *)a2;
        std::string::size_type v292 = 24LL;
LABEL_1370:
        goto LABEL_826;
      case 0x61:
        unint64_t v44 = "generic type metadata pattern for ";
        unint64_t v45 = this;
        std::string::size_type v46 = 34LL;
        goto LABEL_320;
      case 0x62:
        int v460 = *((unsigned __int8 *)a2 + 18);
        if (v460 != 5 || !*((_DWORD *)a2 + 2)) {
          goto LABEL_1448;
        }
        goto LABEL_1352;
      case 0x63:
      case 0xEB:
        goto LABEL_1516;
      case 0x64:
        int v485 = *((unsigned __int8 *)a2 + 18);
        if (v485 == 5 && *((_DWORD *)a2 + 2))
        {
LABEL_1352:
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1353:
          uint64_t v328 = *(void *)a2;
        }

        else
        {
LABEL_1448:
          uint64_t v328 = 0LL;
        }

        int v517 = a4 & 1;
        v518 = "getter";
        goto LABEL_1578;
      case 0x66:
      case 0xA1:
      case 0xD8:
        goto LABEL_1168;
      case 0x67:
        v633 = "";
        std::string::size_type v634 = 0LL;
        unsigned int v632 = -1;
        int v284 = a4 & 1;
        v283 = "__ivar_initializer";
        v285 = (_anonymous_namespace_::NodePrinter *)this;
        v286 = (uint64_t *)a2;
        int v287 = v8;
        int v288 = 0;
        goto LABEL_1165;
      case 0x68:
        goto LABEL_1487;
      case 0x69:
        uint64_t v276 = "@escaping";
        goto LABEL_1802;
      case 0x6B:
        std::string::append(this, "@differentiable", 0xFuLL);
        int v452 = *(unsigned __int8 *)a2;
        switch(v452)
        {
          case 'f':
            uint64_t v276 = "(_forward)";
LABEL_1699:
            uint64_t v277 = this;
            std::string::size_type v278 = 10LL;
            goto LABEL_825;
          case 'r':
            uint64_t v276 = "(reverse)";
            break;
          case 'l':
            uint64_t v276 = "(_linear)";
            break;
          default:
            goto LABEL_826;
        }

        goto LABEL_1802;
      case 0x6C:
        uint64_t v276 = "@isolated(any)";
        goto LABEL_1456;
      case 0x6D:
        uint64_t v276 = "sending";
        goto LABEL_1648;
      case 0x6E:
      case 0x6F:
        std::string::size_type v293 = *((void *)a2 + 1);
        if (!v293) {
          goto LABEL_826;
        }
        v294 = *(const std::string::value_type **)a2;
        unint64_t v295 = this;
        goto LABEL_1674;
      case 0x71:
        std::string::append(this, "@convention(", 0xCuLL);
        int v334 = *((unsigned __int8 *)a2 + 18);
        if (v334 == 1) {
          goto LABEL_1706;
        }
        unint64_t v335 = (const std::string::value_type ***)a2;
        if (v334 == 2) {
          goto LABEL_1843;
        }
        if (v334 != 5) {
          goto LABEL_1850;
        }
        int v336 = *((_DWORD *)a2 + 2);
        if (v336 != 2)
        {
          if (v336 == 1) {
            goto LABEL_1705;
          }
          goto LABEL_1850;
        }

        unint64_t v335 = *(const std::string::value_type ****)a2;
LABEL_1843:
        std::string::append(this, **v335, (std::string::size_type)(*v335)[1]);
        std::string::append(this, ", mangledCType: ", 0x11uLL);
        int v621 = *((unsigned __int8 *)a2 + 18);
        if (v621 == 2) {
          goto LABEL_1847;
        }
        if (v621 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1847:
          v622 = (swift::Demangle::__runtime::Node *)*((void *)a2 + 1);
        }

        else
        {
          v622 = 0LL;
        }

        std::string::push_back(this, 34);
        goto LABEL_1850;
      case 0x73:
        goto LABEL_826;
      case 0x74:
        std::string::append(this, "for <", 5uLL);
        int v471 = *((unsigned __int8 *)a2 + 18);
        if (v471 != 5 || !*((_DWORD *)a2 + 2)) {
          goto LABEL_1539;
        }
        a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1307:
        int v472 = *(swift::Demangle::__runtime::Node **)a2;
        goto LABEL_1540;
      case 0x75:
        int v288 = 2 * this[1].__r_.__value_.__s.__data_[15];
        int v423 = a2;
        if (*((_BYTE *)a2 + 18) == 5) {
          int v423 = *(swift::Demangle::__runtime::Node **)a2;
        }
        v633 = "";
        std::string::size_type v634 = 0LL;
        unsigned int v632 = **((_DWORD **)v423 + 1) + 1;
        int v284 = a4 & 1;
        v283 = "implicit closure #";
        v285 = (_anonymous_namespace_::NodePrinter *)this;
        v286 = (uint64_t *)a2;
        int v287 = v8;
LABEL_1165:
        int v424 = 0;
        size_t v408 = 18LL;
        goto LABEL_1486;
      case 0x76:
      case 0x78:
        int v13 = *((unsigned __int8 *)a2 + 18);
        uint64_t v14 = (swift::Demangle::__runtime::Node **)a2;
        if (v13 == 5 && *((_DWORD *)a2 + 2))
        {
          uint64_t v14 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_14:
          uint64_t v15 = *v14;
        }

        else
        {
          uint64_t v15 = 0LL;
        }

        std::string::append(this, " ", 1uLL);
        int v152 = *((unsigned __int8 *)a2 + 18);
        if (v152 != 5) {
          goto LABEL_551;
        }
        uint64_t v153 = *((unsigned int *)a2 + 2);
        if ((_DWORD)v153 != 3) {
          goto LABEL_386;
        }
        int v152 = *((unsigned __int8 *)a2 + 18);
        if (v152 != 5) {
          goto LABEL_551;
        }
        uint64_t v153 = *((unsigned int *)a2 + 2);
LABEL_386:
        if (v153 != 4) {
          goto LABEL_555;
        }
        if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u) {
          unint64_t v154 = *(swift::Demangle::__runtime::Node **)(*(void *)a2 + 16LL);
        }
        else {
          unint64_t v154 = 0LL;
        }
        int v152 = *((unsigned __int8 *)a2 + 18);
LABEL_551:
        switch(v152)
        {
          case 1:
            uint64_t v11 = *(swift::Demangle::__runtime::Node **)a2;
            goto LABEL_7;
          case 2:
            uint64_t v11 = (swift::Demangle::__runtime::Node *)*((void *)a2 + 1);
            goto LABEL_7;
          case 5:
            uint64_t v153 = *((unsigned int *)a2 + 2);
LABEL_555:
            if (v153)
            {
              uint64_t v11 = *(swift::Demangle::__runtime::Node **)(*(void *)a2 + 8 * (v153 - 1));
              goto LABEL_7;
            }

            break;
        }

        goto LABEL_597;
      case 0x77:
        std::string::append(this, "@substituted ", 0xDuLL);
        int v353 = *((unsigned __int8 *)a2 + 18);
        unint64_t v354 = (swift::Demangle::__runtime::Node **)a2;
        if (v353 == 5 && *((_DWORD *)a2 + 2))
        {
          unint64_t v354 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_949:
          v355 = *v354;
        }

        else
        {
          v355 = 0LL;
        }

        std::string::append(this, " for <", 6uLL);
        int v543 = *((unsigned __int8 *)a2 + 18);
        if (v543 == 2) {
          goto LABEL_1538;
        }
        if (v543 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1538:
          int v472 = (swift::Demangle::__runtime::Node *)*((void *)a2 + 1);
        }

        else
        {
LABEL_1539:
          int v472 = 0LL;
        }

LABEL_1540:
        goto LABEL_1541;
      case 0x79:
        v338 = "@yields ";
        v339 = this;
        std::string::size_type v340 = 8LL;
        goto LABEL_1131;
      case 0x7A:
        v338 = "@error ";
        v339 = this;
        std::string::size_type v340 = 7LL;
LABEL_1131:
        std::string::append(v339, v338, v340);
        int v412 = " ";
LABEL_1333:
        v477 = this;
        unint64_t v474 = a2;
        goto LABEL_1334;
      case 0x7B:
        unint64_t v44 = "inout ";
        unint64_t v45 = this;
        std::string::size_type v46 = 6LL;
        goto LABEL_320;
      case 0x7C:
        std::string::append(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
        uint64_t v276 = " infix";
        goto LABEL_1278;
      case 0x7D:
        goto LABEL_1487;
      case 0x7E:
        int v403 = *((unsigned __int8 *)a2 + 18);
        if (v403 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1106:
          uint64_t v328 = *(void *)a2;
        }

        else
        {
          uint64_t v328 = 0LL;
        }

        int v517 = a4 & 1;
        v518 = "init";
        goto LABEL_1616;
      case 0x7F:
        unint64_t v44 = "isolated ";
        goto LABEL_294;
      case 0x80:
        unint64_t v44 = "sending ";
        goto LABEL_292;
      case 0x81:
        uint64_t v276 = "@isolated(any) ";
        uint64_t v277 = this;
        std::string::size_type v278 = 15LL;
        goto LABEL_825;
      case 0x82:
        uint64_t v276 = "sending ";
        goto LABEL_1770;
      case 0x83:
      case 0x84:
        if (v12 == 131) {
          char v296 = "key path getter for ";
        }
        else {
          char v296 = "key path setter for ";
        }
        std::string::append(this, v296, 0x14uLL);
        int v297 = *((unsigned __int8 *)a2 + 18);
        __int128 v298 = (swift::Demangle::__runtime::Node **)a2;
        if (v297 == 5 && *((_DWORD *)a2 + 2))
        {
          __int128 v298 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_846:
          int v299 = *v298;
        }

        else
        {
          int v299 = 0LL;
        }

        unsigned int v511 = v8 + 1;
        std::string::append(this, " : ", 3uLL);
        int v512 = *((unsigned __int8 *)a2 + 18);
        unint64_t v513 = a2;
        if (v512 == 2) {
          goto LABEL_1440;
        }
        if (v512 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          unint64_t v513 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1440:
          unint64_t v514 = (swift::Demangle::__runtime::Node *)*((void *)v513 + 1);
          if (*((_WORD *)v514 + 8) == 217) {
            std::string::append(this, ", ", 2uLL);
          }
          if (*((_BYTE *)a2 + 18) == 5)
          {
            unint64_t v515 = 2LL;
            do
            {
              v516 = *(swift::Demangle::__runtime::Node **)(*(void *)a2 + 8 * v515);
              if (*((_WORD *)v516 + 8) == 217) {
                std::string::append(this, ", ", 2uLL);
              }
              ++v515;
            }

            while (*((_BYTE *)a2 + 18) == 5);
          }
        }

        goto LABEL_826;
      case 0x85:
      case 0x86:
        std::string::append(this, "key path index ", 0xFuLL);
        int v305 = *((unsigned __int16 *)a2 + 8);
        if (v305 == 133) {
          v306 = "equality";
        }
        else {
          v306 = "hash";
        }
        if (v305 == 133) {
          std::string::size_type v307 = 8LL;
        }
        else {
          std::string::size_type v307 = 4LL;
        }
        std::string::append(this, v306, v307);
        std::string::append(this, " operator for ", 0xEuLL);
        int v308 = *((unsigned __int8 *)a2 + 18);
        unsigned int v309 = v308 - 1;
        switch(v308)
        {
          case 1:
            uint64_t v311 = 0LL;
            int v310 = 1;
            __int128 v312 = a2;
            goto LABEL_1461;
          case 5:
            int v310 = *((_DWORD *)a2 + 2);
            if (v310)
            {
              uint64_t v311 = (v310 - 1);
              __int128 v312 = *(swift::Demangle::__runtime::Node **)a2;
              int v308 = *((_DWORD *)a2 + 2);
              goto LABEL_1461;
            }

            break;
          case 2:
            int v310 = 2;
            uint64_t v311 = 1LL;
            int v308 = 2;
            __int128 v312 = a2;
LABEL_1461:
            v519 = (unsigned __int16 *)*((void *)v312 + v311);
            goto LABEL_1463;
        }

        int v308 = 0;
        int v310 = 0;
        v519 = 0LL;
LABEL_1463:
        int v520 = v519[8];
        if (v520 == 217)
        {
          --v308;
          uint64_t v521 = (v310 - 2);
          unsigned int v522 = a2;
          if (v309 >= 2) {
            unsigned int v522 = *(swift::Demangle::__runtime::Node **)a2;
          }
          v519 = (unsigned __int16 *)*((void *)v522 + v521);
          int v520 = v519[8];
        }

        if (v520 == 43)
        {
          --v308;
        }

        std::string::append(this, "(", 1uLL);
        if (!v308) {
          goto LABEL_1497;
        }
        unsigned int v523 = v8 + 1;
        int v524 = *((unsigned __int8 *)a2 + 18);
        uint64_t v525 = (swift::Demangle::__runtime::Node **)a2;
        if (v524 == 5 && *((_DWORD *)a2 + 2))
        {
          uint64_t v525 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_1474:
          v526 = *v525;
        }

        else
        {
          v526 = 0LL;
        }

        if (v308 == 1)
        {
LABEL_1497:
          uint64_t v276 = ")";
LABEL_1498:
          uint64_t v277 = this;
          std::string::size_type v278 = 1LL;
          goto LABEL_825;
        }

        unint64_t v531 = 1LL;
        while (1)
        {
          std::string::append(this, ", ", 2uLL);
          int v533 = *((unsigned __int8 *)a2 + 18);
          if (v533 == 2)
          {
            unint64_t v534 = *((unsigned __int8 *)a2 + 18);
          }

          else
          {
            if (v533 != 5) {
              goto LABEL_1500;
            }
            unint64_t v534 = *((unsigned int *)a2 + 2);
          }

          if (v534 > v531)
          {
            unsigned int v535 = v533 - 1;
            v536 = a2;
            if (v535 >= 2) {
              v536 = *(swift::Demangle::__runtime::Node **)a2;
            }
            uint64_t v532 = (swift::Demangle::__runtime::Node *)*((void *)v536 + v531);
            goto LABEL_1501;
          }

LABEL_1500:
          uint64_t v532 = 0LL;
LABEL_1501:
          if (v308 == ++v531) {
            goto LABEL_1497;
          }
        }

      case 0x87:
        std::string::append(this, "lazy protocol witness table accessor for type ", 0x2EuLL);
        int v42 = *((unsigned __int8 *)a2 + 18);
        int v43 = (swift::Demangle::__runtime::Node **)a2;
        if (v42 != 5 || !*((_DWORD *)a2 + 2)) {
          goto LABEL_390;
        }
        goto LABEL_262;
      case 0x88:
        std::string::append(this, "lazy protocol witness table cache variable for type ", 0x34uLL);
        int v110 = *((unsigned __int8 *)a2 + 18);
        int v43 = (swift::Demangle::__runtime::Node **)a2;
        if (v110 == 5 && *((_DWORD *)a2 + 2))
        {
LABEL_262:
          int v43 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_263:
          std::string::size_type v111 = *v43;
        }

        else
        {
LABEL_390:
          std::string::size_type v111 = 0LL;
        }

        uint64_t v131 = " and conformance ";
LABEL_501:
        int v132 = this;
        std::string::size_type v133 = 17LL;
        goto LABEL_506;
      case 0x89:
        int v453 = *((unsigned __int8 *)a2 + 18);
        uint64_t v454 = a2;
        if (v453 == 2) {
          goto LABEL_1238;
        }
        if (v453 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          uint64_t v454 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1238:
          unint64_t v455 = (swift::Demangle::__runtime::Node *)*((void *)v454 + 1);
        }

        else
        {
          unint64_t v455 = 0LL;
        }

        if (!this[1].__r_.__value_.__s.__data_[9]) {
          goto LABEL_826;
        }
        std::string::append(this, " #", 2uLL);
        uint64_t v425 = **(void **)a2 + 1LL;
        goto LABEL_1169;
      case 0x8A:
        if (*((_BYTE *)a2 + 18) == 5)
        {
          if (*((_DWORD *)a2 + 2) == 3) {
            int v288 = 1;
          }
          else {
            int v288 = 2;
          }
        }

        else
        {
          int v288 = 2;
        }

        v283 = "";
        v633 = "";
        std::string::size_type v634 = 0LL;
        unsigned int v632 = -1;
        int v284 = a4 & 1;
        v285 = (_anonymous_namespace_::NodePrinter *)this;
        v286 = (uint64_t *)a2;
        int v287 = v8;
        goto LABEL_1484;
      case 0x8B:
        int v84 = *((unsigned __int8 *)a2 + 18);
        if (v84 != 5) {
          goto LABEL_561;
        }
        if (!*((_DWORD *)a2 + 2)) {
          goto LABEL_826;
        }
LABEL_184:
        std::string::append(this, "module ", 7uLL);
        int v85 = *((unsigned __int8 *)a2 + 18);
        unint64_t v86 = (swift::Demangle::__runtime::Node **)a2;
        if (v85 == 5 && *((_DWORD *)a2 + 2))
        {
          unint64_t v86 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_188:
          int v87 = *v86;
        }

        else
        {
          int v87 = 0LL;
        }

        int v84 = *((unsigned __int8 *)a2 + 18);
LABEL_561:
        if (v84 == 2) {
          goto LABEL_564;
        }
        if (v84 != 5) {
          goto LABEL_571;
        }
        if (*((_DWORD *)a2 + 2) < 2u) {
          goto LABEL_826;
        }
LABEL_564:
        std::string::append(this, " file ", 6uLL);
        int v208 = *((unsigned __int8 *)a2 + 18);
        int v209 = a2;
        if (v208 == 2) {
          goto LABEL_568;
        }
        if (v208 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          int v209 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_568:
          int v210 = (swift::Demangle::__runtime::Node *)*((void *)v209 + 1);
        }

        else
        {
          int v210 = 0LL;
        }

        int v84 = *((unsigned __int8 *)a2 + 18);
LABEL_571:
        if (v84 != 5 || *((_DWORD *)a2 + 2) < 3u) {
          goto LABEL_826;
        }
        std::string::append(this, " line ", 6uLL);
        if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u) {
          uint64_t v211 = *(swift::Demangle::__runtime::Node **)(*(void *)a2 + 16LL);
        }
        else {
          uint64_t v211 = 0LL;
        }
        if (*((_BYTE *)a2 + 18) != 5 || *((_DWORD *)a2 + 2) < 4u) {
          goto LABEL_826;
        }
        std::string::append(this, " column ", 8uLL);
        if (*((_BYTE *)a2 + 18) != 5 || *((_DWORD *)a2 + 2) < 4u) {
          goto LABEL_597;
        }
        uint64_t v11 = *(swift::Demangle::__runtime::Node **)(*(void *)a2 + 24LL);
        goto LABEL_7;
      case 0x8C:
        goto LABEL_1487;
      case 0x8D:
        int v456 = *((unsigned __int8 *)a2 + 18);
        if (v456 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1243:
          uint64_t v328 = *(void *)a2;
        }

        else
        {
          uint64_t v328 = 0LL;
        }

        int v517 = a4 & 1;
        v518 = "materializeForSet";
        char v540 = (_anonymous_namespace_::NodePrinter *)this;
        int v541 = v8;
        size_t v542 = 17LL;
        goto LABEL_1617;
      case 0x8E:
        if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u) {
          uint64_t v401 = *(void *)(*(void *)a2 + 16LL);
        }
        else {
          uint64_t v401 = 0LL;
        }
        __str.__r_.__value_.__s.__data_[0] = 0;
        *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 1) = 0x101010101010101LL;
        __str.__r_.__value_.__s.__data_[9] = 1;
        *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = 0x101010100000000LL;
        __str.__r_.__value_.__s.__data_[18] = 1;
        *(_WORD *)((char *)&__str.__r_.__value_.__r.__words[2] + 3) = 256;
        __str.__r_.__value_.__s.__data_[21] = 1;
        uint64_t v640 = 0LL;
        uint64_t v641 = 0LL;
        v642 = &unk_189B8B0E8;
        v643 = swift::Demangle::__runtime::genericParameterName;
        v644 = &v642;
        swift::Demangle::__runtime::nodeToString(&v645, v401, &__str);
        uint64_t v497 = "member macro @";
        goto LABEL_1406;
      case 0x8F:
        if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u) {
          uint64_t v387 = *(void *)(*(void *)a2 + 16LL);
        }
        else {
          uint64_t v387 = 0LL;
        }
        __str.__r_.__value_.__s.__data_[0] = 0;
        *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 1) = 0x101010101010101LL;
        __str.__r_.__value_.__s.__data_[9] = 1;
        *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = 0x101010100000000LL;
        __str.__r_.__value_.__s.__data_[18] = 1;
        *(_WORD *)((char *)&__str.__r_.__value_.__r.__words[2] + 3) = 256;
        __str.__r_.__value_.__s.__data_[21] = 1;
        uint64_t v640 = 0LL;
        uint64_t v641 = 0LL;
        v642 = &unk_189B8B0E8;
        v643 = swift::Demangle::__runtime::genericParameterName;
        v644 = &v642;
        swift::Demangle::__runtime::nodeToString(&v645, v387, &__str);
        uint64_t v497 = "memberAttribute macro @";
        goto LABEL_1406;
      case 0x90:
        if (this[1].__r_.__value_.__s.__data_[11]) {
          goto LABEL_826;
        }
        uint64_t v276 = "merged ";
        goto LABEL_1648;
      case 0x91:
        int v392 = *((unsigned __int8 *)a2 + 18);
        v393 = (swift::Demangle::__runtime::Node **)a2;
        if (v392 == 2) {
          goto LABEL_1072;
        }
        switch(v392)
        {
          case 5:
            unsigned int v394 = *((_DWORD *)a2 + 2);
            if (v394 != 2)
            {
              unint64_t v395 = 0LL;
              goto LABEL_1789;
            }

            v393 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_1072:
            unint64_t v395 = 1LL;
            std::string::append(this, " ", 1uLL);
            char v396 = 0;
            int v392 = *((unsigned __int8 *)a2 + 18);
            break;
          case 1:
            unint64_t v395 = 0LL;
            v604 = 0LL;
            if ((v396 & 1) == 0) {
              goto LABEL_1793;
            }
            goto LABEL_1791;
          case 2:
LABEL_1791:
            v604 = (unsigned __int16 *)*((void *)a2 + v395);
            goto LABEL_1793;
          default:
            unint64_t v395 = 0LL;
            char v396 = 1;
            break;
        }

        if (v392 != 5)
        {
LABEL_1792:
          v604 = 0LL;
LABEL_1793:
          int v609 = *((unsigned __int8 *)v604 + 18);
          if ((v609 - 1) >= 2)
          {
            if (v609 != 5 || !*((_DWORD *)v604 + 2))
            {
              v610 = 0LL;
              goto LABEL_1799;
            }

            v604 = *(unsigned __int16 **)v604;
          }

          v610 = *(unsigned __int16 **)v604;
LABEL_1799:
          int v611 = v610[8];
          if ((v611 - 190) < 3 || v611 == 69)
          {
            uint64_t v276 = ".Protocol";
LABEL_1802:
            uint64_t v277 = this;
            std::string::size_type v278 = 9LL;
          }

          else
          {
            uint64_t v276 = ".Type";
LABEL_1108:
            uint64_t v277 = this;
            std::string::size_type v278 = 5LL;
          }

          goto LABEL_825;
        }

        unsigned int v394 = *((_DWORD *)a2 + 2);
LABEL_1789:
        if (v395 < v394)
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
          goto LABEL_1791;
        }

        goto LABEL_1792;
      case 0x93:
        unint64_t v44 = "metaclass for ";
        goto LABEL_210;
      case 0x94:
        int v16 = "method lookup function for ";
        goto LABEL_311;
      case 0x95:
        int v16 = "ObjC metadata update function for ";
        unsigned int v32 = this;
        std::string::size_type v33 = 34LL;
        goto LABEL_312;
      case 0x96:
        int v16 = "ObjC resilient class stub for ";
        unsigned int v32 = this;
        std::string::size_type v33 = 30LL;
        goto LABEL_312;
      case 0x97:
        int v16 = "full ObjC resilient class stub for ";
        unsigned int v32 = this;
        std::string::size_type v33 = 35LL;
        goto LABEL_312;
      case 0x98:
        int v378 = *((unsigned __int8 *)a2 + 18);
        if (v378 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1010:
          uint64_t v328 = *(void *)a2;
        }

        else
        {
          uint64_t v328 = 0LL;
        }

        int v517 = a4 & 1;
        v518 = "modify";
        goto LABEL_1578;
      case 0x99:
        if (!this[1].__r_.__value_.__s.__data_[4]) {
          goto LABEL_826;
        }
        goto LABEL_1014;
      case 0x9A:
        int v344 = *((unsigned __int8 *)a2 + 18);
        if (v344 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_929:
          uint64_t v328 = *(void *)a2;
        }

        else
        {
          uint64_t v328 = 0LL;
        }

        int v517 = a4 & 1;
        v518 = "nativeOwningAddressor";
        char v540 = (_anonymous_namespace_::NodePrinter *)this;
        int v541 = v8;
        size_t v542 = 21LL;
        goto LABEL_1617;
      case 0x9B:
        int v327 = *((unsigned __int8 *)a2 + 18);
        if (v327 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_905:
          uint64_t v328 = *(void *)a2;
        }

        else
        {
          uint64_t v328 = 0LL;
        }

        int v517 = a4 & 1;
        v518 = "nativeOwningMutableAddressor";
        char v540 = (_anonymous_namespace_::NodePrinter *)this;
        int v541 = v8;
        size_t v542 = 28LL;
        goto LABEL_1617;
      case 0x9C:
        int v377 = *((unsigned __int8 *)a2 + 18);
        if (v377 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1005:
          uint64_t v328 = *(void *)a2;
        }

        else
        {
          uint64_t v328 = 0LL;
        }

        int v517 = a4 & 1;
        v518 = "nativePinningAddressor";
        goto LABEL_1554;
      case 0x9D:
        int v418 = *((unsigned __int8 *)a2 + 18);
        if (v418 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1150:
          uint64_t v328 = *(void *)a2;
        }

        else
        {
          uint64_t v328 = 0LL;
        }

        int v517 = a4 & 1;
        v518 = "nativePinningMutableAddressor";
        char v540 = (_anonymous_namespace_::NodePrinter *)this;
        int v541 = v8;
        size_t v542 = 29LL;
        goto LABEL_1617;
      case 0x9E:
        unint64_t v44 = "nominal type descriptor for ";
        unint64_t v45 = this;
        std::string::size_type v46 = 28LL;
        goto LABEL_320;
      case 0x9F:
        unint64_t v44 = "nominal type descriptor runtime record for ";
        unint64_t v45 = this;
        std::string::size_type v46 = 43LL;
        goto LABEL_320;
      case 0xA0:
        uint64_t v276 = "@nonobjc ";
        goto LABEL_1802;
      case 0xA2:
        goto LABEL_958;
      case 0xA3:
        std::string::append(this, "predefined ", 0xBuLL);
LABEL_958:
        std::string::append(this, "@objc completion handler block implementation for ", 0x32uLL);
        int v359 = *((unsigned __int8 *)a2 + 18);
        if (v359 != 5) {
          goto LABEL_961;
        }
        unsigned int v360 = *((_DWORD *)a2 + 2);
        if (v360 < 4) {
          goto LABEL_964;
        }
        int v359 = *((unsigned __int8 *)a2 + 18);
LABEL_961:
        v361 = (swift::Demangle::__runtime::Node **)a2;
        if (v359 != 5) {
          goto LABEL_1423;
        }
        unsigned int v360 = *((_DWORD *)a2 + 2);
LABEL_964:
        if (v360)
        {
          v361 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_966:
          uint64_t v362 = *v361;
        }

        else
        {
LABEL_1423:
          uint64_t v362 = 0LL;
        }

        unsigned int v506 = v8 + 1;
        std::string::append(this, " with result type ", 0x12uLL);
        int v507 = *((unsigned __int8 *)a2 + 18);
        v508 = a2;
        if (v507 == 2) {
          goto LABEL_1428;
        }
        if (v507 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          v508 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1428:
          uint64_t v509 = (swift::Demangle::__runtime::Node *)*((void *)v508 + 1);
        }

        else
        {
          uint64_t v509 = 0LL;
        }

        uint64_t v510 = **(void **)(*(void *)a2 + 16LL);
        switch(v510)
        {
          case 0LL:
            goto LABEL_826;
          case 2LL:
            uint64_t v276 = " zero on error";
LABEL_1456:
            uint64_t v277 = this;
            std::string::size_type v278 = 14LL;
            break;
          case 1LL:
            uint64_t v276 = " nonzero on error";
LABEL_1434:
            uint64_t v277 = this;
            std::string::size_type v278 = 17LL;
            break;
          default:
            uint64_t v276 = " <invalid error flag>";
            uint64_t v277 = this;
            std::string::size_type v278 = 21LL;
            break;
        }

        goto LABEL_825;
      case 0xA4:
        uint64_t v276 = "@objc ";
        goto LABEL_1278;
      case 0xA8:
        int v397 = *((unsigned __int8 *)a2 + 18);
        if (v397 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1080:
          uint64_t v328 = *(void *)a2;
        }

        else
        {
          uint64_t v328 = 0LL;
        }

        int v517 = a4 & 1;
        v518 = "owningAddressor";
        goto LABEL_1575;
      case 0xA9:
        int v371 = *((unsigned __int8 *)a2 + 18);
        if (v371 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_990:
          uint64_t v328 = *(void *)a2;
        }

        else
        {
          uint64_t v328 = 0LL;
        }

        int v517 = a4 & 1;
        v518 = "owningMutableAddressor";
        goto LABEL_1554;
      case 0xAA:
        if (this[1].__r_.__value_.__s.__data_[10]) {
          goto LABEL_1082;
        }
        unint64_t v372 = "partial apply forwarder";
        unint64_t v373 = this;
        std::string::size_type v374 = 23LL;
        goto LABEL_1511;
      case 0xAB:
        if (this[1].__r_.__value_.__s.__data_[10])
        {
LABEL_1082:
          unint64_t v372 = "partial apply";
          unint64_t v373 = this;
          std::string::size_type v374 = 13LL;
        }

        else
        {
          unint64_t v372 = "partial apply ObjC forwarder";
          unint64_t v373 = this;
          std::string::size_type v374 = 28LL;
        }

LABEL_1511:
        std::string::append(v373, v372, v374);
        int v537 = *((unsigned __int8 *)a2 + 18);
        __int128 v363 = " for ";
        uint64_t v364 = this;
        std::string::size_type v365 = 5LL;
        goto LABEL_1515;
      case 0xAC:
        if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u) {
          uint64_t v444 = *(void *)(*(void *)a2 + 16LL);
        }
        else {
          uint64_t v444 = 0LL;
        }
        __str.__r_.__value_.__s.__data_[0] = 0;
        *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 1) = 0x101010101010101LL;
        __str.__r_.__value_.__s.__data_[9] = 1;
        *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = 0x101010100000000LL;
        __str.__r_.__value_.__s.__data_[18] = 1;
        *(_WORD *)((char *)&__str.__r_.__value_.__r.__words[2] + 3) = 256;
        __str.__r_.__value_.__s.__data_[21] = 1;
        uint64_t v640 = 0LL;
        uint64_t v641 = 0LL;
        v642 = &unk_189B8B0E8;
        v643 = swift::Demangle::__runtime::genericParameterName;
        v644 = &v642;
        swift::Demangle::__runtime::nodeToString(&v645, v444, &__str);
        uint64_t v497 = "peer macro @";
        goto LABEL_1406;
      case 0xAD:
        std::string::append(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
        uint64_t v276 = " postfix";
        goto LABEL_1770;
      case 0xAE:
        if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u) {
          uint64_t v402 = *(void *)(*(void *)a2 + 16LL);
        }
        else {
          uint64_t v402 = 0LL;
        }
        __str.__r_.__value_.__s.__data_[0] = 0;
        *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 1) = 0x101010101010101LL;
        __str.__r_.__value_.__s.__data_[9] = 1;
        *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = 0x101010100000000LL;
        __str.__r_.__value_.__s.__data_[18] = 1;
        *(_WORD *)((char *)&__str.__r_.__value_.__r.__words[2] + 3) = 256;
        __str.__r_.__value_.__s.__data_[21] = 1;
        uint64_t v640 = 0LL;
        uint64_t v641 = 0LL;
        v642 = &unk_189B8B0E8;
        v643 = swift::Demangle::__runtime::genericParameterName;
        v644 = &v642;
        swift::Demangle::__runtime::nodeToString(&v645, v402, &__str);
        uint64_t v497 = "preamble macro @";
LABEL_1406:
        v498 = std::string::insert(&v645, 0LL, v497);
        std::string::size_type cap = v498->__r_.__value_.__l.__cap_;
        *(_OWORD *)&v646.__r_.__value_.__l.__data_ = *(_OWORD *)&v498->__r_.__value_.__l.__data_;
        v646.__r_.__value_.__l.__cap_ = cap;
        v498->__r_.__value_.__l.__size_ = 0LL;
        v498->__r_.__value_.__l.__cap_ = 0LL;
        v498->__r_.__value_.__r.__words[0] = 0LL;
        v500 = std::string::append(&v646, " expansion #");
        std::string::size_type v501 = v500->__r_.__value_.__l.__cap_;
        __int128 v647 = *(_OWORD *)&v500->__r_.__value_.__l.__data_;
        int64_t v648 = v501;
        v500->__r_.__value_.__l.__size_ = 0LL;
        v500->__r_.__value_.__l.__cap_ = 0LL;
        v500->__r_.__value_.__r.__words[0] = 0LL;
        if (v648 >= 0) {
          v502 = (const std::string::value_type *)&v647;
        }
        else {
          v502 = (const std::string::value_type *)v647;
        }
        if (v648 >= 0) {
          size_t v503 = HIBYTE(v648);
        }
        else {
          size_t v503 = *((void *)&v647 + 1);
        }
        if (SHIBYTE(v648) < 0)
        {
          operator delete((void *)v647);
          if (((char)v646.__r_.__value_.__s.__size_ & 0x80000000) == 0)
          {
LABEL_1414:
            goto LABEL_1422;
          }
        }

        else if (((char)v646.__r_.__value_.__s.__size_ & 0x80000000) == 0)
        {
          goto LABEL_1414;
        }

        operator delete(v646.__r_.__value_.__l.__data_);
LABEL_1422:
        operator delete(v645.__r_.__value_.__l.__data_);
LABEL_1415:
        v504 = v644;
        if (v644 == &v642)
        {
          uint64_t v505 = 4LL;
          v504 = &v642;
        }

        else
        {
          if (!v644) {
            goto LABEL_827;
          }
          uint64_t v505 = 5LL;
        }

        (*((void (**)(void))*v504 + v505))();
        goto LABEL_827;
      case 0xAF:
        std::string::append(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
        uint64_t v276 = " prefix";
        goto LABEL_1648;
      case 0xB0:
        int v457 = *((unsigned __int8 *)a2 + 18);
        if (v457 != 2 && (v457 != 5 || *((_DWORD *)a2 + 2) < 2u))
        {
          if (!this[1].__r_.__value_.__s.__data_[14]) {
            goto LABEL_826;
          }
          v527 = "(in ";
          goto LABEL_1704;
        }

        if (this[1].__r_.__value_.__s.__data_[14])
        {
          std::string::push_back(this, 40);
          int v457 = *((unsigned __int8 *)a2 + 18);
        }

        int v458 = a2;
        if (v457 == 2) {
          goto LABEL_1253;
        }
        if (v457 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          int v458 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1253:
          uint64_t v459 = (swift::Demangle::__runtime::Node *)*((void *)v458 + 1);
        }

        else
        {
          uint64_t v459 = 0LL;
        }

        if (!this[1].__r_.__value_.__s.__data_[14]) {
          goto LABEL_826;
        }
        v527 = " in ";
LABEL_1704:
        std::string::append(this, v527, 4uLL);
        if (*((unsigned __int8 *)a2 + 18) - 1 >= 2) {
LABEL_1705:
        }
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1706:
        std::string::append(this, **(const std::string::value_type ***)a2, *(void *)(*(void *)a2 + 8LL));
        goto LABEL_1850;
      case 0xB1:
        unint64_t v44 = "property descriptor for ";
        goto LABEL_307;
      case 0xB2:
        goto LABEL_1487;
      case 0xB3:
        goto LABEL_1487;
      case 0xB5:
        v341 = "protocol symbolic reference 0x";
        uint64_t v342 = this;
        std::string::size_type v343 = 30LL;
        goto LABEL_1280;
      case 0xB6:
        int v49 = *((unsigned __int8 *)a2 + 18);
        unsigned int v50 = (swift::Demangle::__runtime::Node **)a2;
        if (v49 == 5)
        {
          if (!*((_DWORD *)a2 + 2))
          {
            uint64_t v11 = 0LL;
            unint64_t v51 = 0LL;
            goto LABEL_739;
          }

          unsigned int v50 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_78:
          unint64_t v51 = *v50;
        }

        else
        {
          unint64_t v51 = 0LL;
        }

        uint64_t v11 = 0LL;
        if (v49 == 1)
        {
          int v219 = 0LL;
          goto LABEL_740;
        }

        int v217 = a2;
        if (v49 == 2) {
          goto LABEL_610;
        }
        if (v49 != 5) {
          goto LABEL_611;
        }
        if (*((_DWORD *)a2 + 2) < 2u)
        {
          uint64_t v11 = 0LL;
        }

        else
        {
          int v217 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_610:
          uint64_t v11 = (swift::Demangle::__runtime::Node *)*((void *)v217 + 1);
LABEL_611:
          if (v49 == 5)
          {
            unsigned int v218 = *((_DWORD *)a2 + 2);
            if (v218 >= 3)
            {
              int v219 = *(swift::Demangle::__runtime::Node **)(*(void *)a2 + 16LL);
              if (v218 == 4)
              {
                std::string::append(this, "property behavior storage of ", 0x1DuLL);
                std::string::append(this, " in ", 4uLL);
                std::string::append(this, " : ", 3uLL);
                goto LABEL_7;
              }

LABEL_740:
              if (this[1].__r_.__value_.__s.__data_[6])
              {
                std::string::append(this, " : ", 3uLL);
                std::string::append(this, " in ", 4uLL);
                uint64_t v11 = v219;
                goto LABEL_7;
              }

              goto LABEL_826;
            }
          }
        }

LABEL_739:
        int v219 = 0LL;
        goto LABEL_740;
      case 0xB7:
        __int128 v363 = "protocol conformance ref (type's module) ";
        uint64_t v364 = this;
        std::string::size_type v365 = 41LL;
        goto LABEL_1515;
      case 0xB8:
        __int128 v363 = "protocol conformance ref (protocol's module) ";
        uint64_t v364 = this;
        std::string::size_type v365 = 45LL;
        goto LABEL_1515;
      case 0xB9:
        __int128 v363 = "protocol conformance ref (retroactive) ";
        uint64_t v364 = this;
        std::string::size_type v365 = 39LL;
        goto LABEL_1515;
      case 0xBA:
        unint64_t v44 = "protocol descriptor for ";
LABEL_307:
        unint64_t v45 = this;
        std::string::size_type v46 = 24LL;
        goto LABEL_320;
      case 0xBB:
        unint64_t v44 = "protocol descriptor runtime record for ";
        unint64_t v45 = this;
        std::string::size_type v46 = 39LL;
        goto LABEL_320;
      case 0xBC:
        unint64_t v44 = "protocol conformance descriptor for ";
        goto LABEL_317;
      case 0xBD:
        unint64_t v44 = "protocol conformance descriptor runtime record for ";
        unint64_t v45 = this;
        std::string::size_type v46 = 51LL;
        goto LABEL_320;
      case 0xBE:
        int v473 = *((unsigned __int8 *)a2 + 18);
        if (v473 != 5 || !*((_DWORD *)a2 + 2)) {
          goto LABEL_826;
        }
        a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1313:
        unint64_t v474 = *(swift::Demangle::__runtime::Node **)a2;
        if (!*(void *)a2) {
          goto LABEL_826;
        }
        int v475 = *((unsigned __int8 *)v474 + 18);
        uint64_t v276 = "Any";
LABEL_1276:
        uint64_t v277 = this;
        std::string::size_type v278 = 3LL;
        goto LABEL_825;
      case 0xBF:
        int v369 = *((unsigned __int8 *)a2 + 18);
        if (v369 == 2)
        {
          unsigned int v370 = a2;
        }

        else
        {
          if (v369 != 5 || *((_DWORD *)a2 + 2) < 2u) {
            goto LABEL_826;
          }
          unsigned int v370 = *(swift::Demangle::__runtime::Node **)a2;
        }

        v571 = *(swift::Demangle::__runtime::Node **)v370;
        std::string::append(this, " & ", 3uLL);
        int v572 = *((unsigned __int8 *)v571 + 18);
        if ((v572 - 1) >= 2)
        {
          if (v572 != 5 || !*((_DWORD *)v571 + 2)) {
            goto LABEL_826;
          }
          v571 = *(swift::Demangle::__runtime::Node **)v571;
        }

        unint64_t v474 = *(swift::Demangle::__runtime::Node **)v571;
LABEL_1642:
        int v412 = " & ";
        v477 = this;
LABEL_1334:
        goto LABEL_826;
      case 0xC0:
        int v466 = *((unsigned __int8 *)a2 + 18);
        if (v466 != 5 || !*((_DWORD *)a2 + 2)) {
          goto LABEL_826;
        }
        a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1291:
        v467 = *(_DWORD **)a2;
        int v468 = *(unsigned __int8 *)(*(void *)a2 + 18LL);
        if (v468 != 5 || !v467[2]) {
          goto LABEL_826;
        }
        v467 = *(_DWORD **)v467;
LABEL_1295:
        v469 = *(swift::Demangle::__runtime::Node **)v467;
        int v470 = *(unsigned __int8 *)(*(void *)v467 + 18LL);
        if ((v470 - 1) < 2 || v470 == 5 && *((_DWORD *)v469 + 2))
        {
          std::string::append(this, " & ", 3uLL);
        }

        if (this[1].__r_.__value_.__s.__data_[1] && this[1].__r_.__value_.__s.__data_[17])
        {
          std::string::append(this, "Swift", 5uLL);
          std::string::append(this, ".", 1uLL);
        }

        uint64_t v276 = "AnyObject";
        goto LABEL_1802;
      case 0xC1:
        unint64_t v44 = "protocol self-conformance descriptor for ";
        goto LABEL_221;
      case 0xC2:
        unint64_t v44 = "protocol self-conformance witness for ";
        goto LABEL_248;
      case 0xC3:
        unint64_t v44 = "protocol self-conformance witness table for ";
        unint64_t v45 = this;
        std::string::size_type v46 = 44LL;
        goto LABEL_320;
      case 0xC4:
        std::string::append(this, "protocol witness for ", 0x15uLL);
        int v98 = *((unsigned __int8 *)a2 + 18);
        uint64_t v99 = a2;
        if (v98 == 2) {
          goto LABEL_227;
        }
        if (v98 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          uint64_t v99 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_227:
          unsigned int v100 = (swift::Demangle::__runtime::Node *)*((void *)v99 + 1);
        }

        else
        {
          unsigned int v100 = 0LL;
        }

        uint64_t v181 = " in conformance ";
        goto LABEL_464;
      case 0xC5:
        unint64_t v44 = "protocol witness table for ";
        goto LABEL_146;
      case 0xC6:
        unint64_t v44 = "protocol witness table accessor for ";
        goto LABEL_317;
      case 0xC7:
        unint64_t v44 = "protocol witness table pattern for ";
LABEL_319:
        unint64_t v45 = this;
        std::string::size_type v46 = 35LL;
        goto LABEL_320;
      case 0xC8:
      case 0xC9:
        if (this[1].__r_.__value_.__s.__data_[11])
        {
          std::string::append(this, "thunk for ", 0xAuLL);
          int v34 = *((unsigned __int8 *)a2 + 18);
          if (v34 == 1)
          {
            uint64_t v35 = 0LL;
          }

          else if (v34 == 5)
          {
            uint64_t v207 = *((unsigned int *)a2 + 2);
            if (!(_DWORD)v207) {
              goto LABEL_546;
            }
            uint64_t v35 = v207 - 1;
            a2 = *(swift::Demangle::__runtime::Node **)a2;
          }

          else
          {
            uint64_t v11 = 0LL;
            if (v34 != 2) {
              goto LABEL_6;
            }
            uint64_t v35 = 1LL;
          }

          uint64_t v11 = (swift::Demangle::__runtime::Node *)*((void *)a2 + v35);
          goto LABEL_6;
        }

        std::string::append(this, "reabstraction thunk ", 0x14uLL);
        if (*((_WORD *)a2 + 8) == 201) {
          std::string::append(this, "helper ", 7uLL);
        }
        if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) == 3)
        {
          unint64_t v75 = 1LL;
          std::string::append(this, " ", 1uLL);
        }

        else
        {
          unint64_t v75 = 0LL;
        }

        std::string::append(this, "from ", 5uLL);
        int v162 = *((unsigned __int8 *)a2 + 18);
        if (v162 == 2)
        {
          unint64_t v163 = *((unsigned __int8 *)a2 + 18);
        }

        else
        {
          if (v162 != 5) {
            goto LABEL_587;
          }
          unint64_t v163 = *((unsigned int *)a2 + 2);
        }

        if (v163 > v75 + 1)
        {
          unsigned int v212 = v162 - 1;
          unsigned int v213 = a2;
          if (v212 >= 2) {
            unsigned int v213 = *(swift::Demangle::__runtime::Node **)a2;
          }
          int v214 = (swift::Demangle::__runtime::Node *)*((void *)v213 + v75 + 1);
          goto LABEL_588;
        }

LABEL_587:
        int v214 = 0LL;
LABEL_588:
        unsigned int v203 = " to ";
        int v204 = this;
        std::string::size_type v205 = 4LL;
        goto LABEL_589;
      case 0xCA:
        std::string::append(this, "reabstraction thunk ", 0x14uLL);
        if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) == 4)
        {
          unint64_t v75 = 1LL;
          std::string::append(this, " ", 1uLL);
        }

        else
        {
          unint64_t v75 = 0LL;
        }

        std::string::append(this, "from ", 5uLL);
        else {
          std::string v149 = 0LL;
        }
        std::string::append(this, " to ", 4uLL);
        int v150 = *((unsigned __int8 *)a2 + 18);
        if (v150 == 2)
        {
          unint64_t v151 = *((unsigned __int8 *)a2 + 18);
        }

        else
        {
          if (v150 != 5) {
            goto LABEL_533;
          }
          unint64_t v151 = *((unsigned int *)a2 + 2);
        }

        if (v151 > v75 + 1)
        {
          unsigned int v200 = v150 - 1;
          uint64_t v201 = a2;
          if (v200 >= 2) {
            uint64_t v201 = *(swift::Demangle::__runtime::Node **)a2;
          }
          int v202 = (swift::Demangle::__runtime::Node *)*((void *)v201 + v75 + 1);
LABEL_534:
          unsigned int v203 = " self ";
          int v204 = this;
          std::string::size_type v205 = 6LL;
LABEL_589:
          std::string::append(v204, v203, v205);
          unint64_t v215 = *((unsigned __int8 *)a2 + 18);
          unsigned int v216 = v215 - 1;
          if ((_DWORD)v215 != 1)
          {
            if ((_DWORD)v215 == 2)
            {
LABEL_596:
              uint64_t v11 = (swift::Demangle::__runtime::Node *)*((void *)a2 + v75);
              goto LABEL_7;
            }

            if ((_DWORD)v215 != 5)
            {
LABEL_597:
              uint64_t v11 = 0LL;
              goto LABEL_7;
            }

            unint64_t v215 = *((unsigned int *)a2 + 2);
          }

          if (v215 > v75)
          {
            if (v216 >= 2) {
              a2 = *(swift::Demangle::__runtime::Node **)a2;
            }
            goto LABEL_596;
          }

          goto LABEL_597;
        }

LABEL_533:
        int v202 = 0LL;
        goto LABEL_534;
      case 0xCB:
        int v122 = *((unsigned __int8 *)a2 + 18);
        unint64_t v123 = (swift::Demangle::__runtime::Node **)a2;
        if (v122 == 5 && *((_DWORD *)a2 + 2))
        {
          unint64_t v123 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_290:
          uint64_t v124 = *v123;
        }

        else
        {
          uint64_t v124 = 0LL;
        }

        uint64_t v131 = " with global actor constraint ";
        int v132 = this;
        std::string::size_type v133 = 30LL;
        goto LABEL_506;
      case 0xCC:
        int v465 = *((unsigned __int8 *)a2 + 18);
        if (v465 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1286:
          uint64_t v328 = *(void *)a2;
        }

        else
        {
          uint64_t v328 = 0LL;
        }

        int v517 = a4 & 1;
        v518 = "read";
LABEL_1616:
        char v540 = (_anonymous_namespace_::NodePrinter *)this;
        int v541 = v8;
        size_t v542 = 4LL;
        goto LABEL_1617;
      case 0xCD:
        std::string::append(this, "related decl '", 0xEuLL);
        uint64_t v55 = (const std::string::value_type ***)a2;
        std::string::append(this, **v55, (std::string::size_type)(*v55)[1]);
        std::string::append(this, "' for ", 6uLL);
        int v56 = *((unsigned __int8 *)a2 + 18);
        if (v56 == 2) {
          goto LABEL_105;
        }
        if (v56 != 5 || *((_DWORD *)a2 + 2) < 2u) {
          goto LABEL_315;
        }
        a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_105:
        uint64_t v11 = (swift::Demangle::__runtime::Node *)*((void *)a2 + 1);
        goto LABEL_6;
      case 0xCE:
        int v112 = *((unsigned __int8 *)a2 + 18);
        if (v112 != 2 && (v112 != 5 || *((_DWORD *)a2 + 2) != 2)) {
          goto LABEL_826;
        }
        std::string::append(this, "retroactive @ ", 0xEuLL);
        int v113 = *((unsigned __int8 *)a2 + 18);
        unint64_t v114 = (swift::Demangle::__runtime::Node **)a2;
        if (v113 == 5 && *((_DWORD *)a2 + 2))
        {
          unint64_t v114 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_272:
          std::string::size_type v115 = *v114;
        }

        else
        {
          std::string::size_type v115 = 0LL;
        }

        goto LABEL_507;
      case 0xCF:
        int v379 = *((unsigned __int8 *)a2 + 18);
LABEL_1014:
        uint64_t v276 = *(const std::string::value_type **)a2;
        std::string::size_type v278 = *((void *)a2 + 1);
        uint64_t v277 = this;
        goto LABEL_825;
      case 0xD0:
        unint64_t v44 = "__shared ";
LABEL_294:
        unint64_t v45 = this;
        std::string::size_type v46 = 9LL;
        goto LABEL_320;
      case 0xD1:
        unint64_t v44 = "__owned ";
LABEL_292:
        unint64_t v45 = this;
        std::string::size_type v46 = 8LL;
        goto LABEL_320;
      case 0xD2:
        BOOL v29 = "@box ";
        unint64_t v30 = this;
        std::string::size_type v31 = 5LL;
        goto LABEL_297;
      case 0xD3:
        int v68 = *((unsigned __int8 *)a2 + 18);
        unint64_t v69 = (swift::Demangle::__runtime::Node **)a2;
        if (v68 == 5)
        {
          if (!*((_DWORD *)a2 + 2))
          {
LABEL_498:
            uint64_t v11 = 0LL;
            goto LABEL_6;
          }

          unint64_t v69 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_152:
          uint64_t v11 = *v69;
        }

        else
        {
          uint64_t v11 = 0LL;
        }

        if (v68 == 5 && *((_DWORD *)a2 + 2) == 3)
        {
          uint64_t v528 = *(void *)(*(void *)a2 + 16LL);
          unsigned int v529 = v8 + 1;
          std::string::push_back(this, 32);
          if (!v528) {
            goto LABEL_826;
          }
          std::string::append(this, " <", 2uLL);
          int v530 = *(unsigned __int8 *)(v528 + 18);
          if (v530 == 5)
          {
            v623 = (unsigned int *)(v528 + 8);
            uint64_t v624 = *(unsigned int *)(v528 + 8);
            if (!(_DWORD)v624
            {
LABEL_1541:
              std::string::push_back(this, 62);
              goto LABEL_826;
            }
          }

          else
          {
            if (v530 != 2)
            {
              if (v530 == 1) {
              goto LABEL_1541;
              }
            }

            v623 = (unsigned int *)(v528 + 8);
            uint64_t v624 = 2LL;
          }

          unint64_t v625 = 1LL;
          while (1)
          {
            std::string::append(this, ", ", 2uLL);
            int v627 = *(unsigned __int8 *)(v528 + 18);
            if (v627 == 2)
            {
              unint64_t v628 = *(unsigned __int8 *)(v528 + 18);
            }

            else
            {
              if (v627 != 5) {
                goto LABEL_1856;
              }
              unint64_t v628 = *v623;
            }

            if (v628 > v625)
            {
              unsigned int v629 = v627 - 1;
              v630 = (swift::Demangle::__runtime::Node **)v528;
              if (v629 >= 2) {
                v630 = *(swift::Demangle::__runtime::Node ***)v528;
              }
              v626 = v630[v625];
              goto LABEL_1857;
            }

LABEL_1856:
            v626 = 0LL;
LABEL_1857:
            if (v624 == ++v625) {
              goto LABEL_1541;
            }
          }
        }

        goto LABEL_6;
      case 0xD4:
        std::string::push_back(this, 123);
        int v447 = *((unsigned __int8 *)a2 + 18);
        unsigned int v448 = v8 + 1;
        std::string::push_back(this, 32);
        int v449 = *((unsigned __int8 *)a2 + 18);
        v450 = (swift::Demangle::__runtime::Node **)a2;
        if (v449 == 5 && *((_DWORD *)a2 + 2))
        {
          v450 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_1224:
          __int128 v451 = *v450;
        }

        else
        {
          __int128 v451 = 0LL;
        }

        unint64_t v596 = 1LL;
        while (2)
        {
          unint64_t v598 = *((unsigned __int8 *)a2 + 18);
          if ((_DWORD)v598 == 2) {
            goto LABEL_1749;
          }
          if ((_DWORD)v598 == 5)
          {
            unint64_t v598 = *((unsigned int *)a2 + 2);
LABEL_1749:
            if (v598 > v596)
            {
              std::string::push_back(this, 44);
              std::string::push_back(this, 32);
              int v599 = *((unsigned __int8 *)a2 + 18);
              if (v599 == 2)
              {
                unint64_t v600 = *((unsigned __int8 *)a2 + 18);
              }

              else
              {
                if (v599 != 5) {
                  goto LABEL_1744;
                }
                unint64_t v600 = *((unsigned int *)a2 + 2);
              }

              if (v600 > v596)
              {
                unsigned int v601 = v599 - 1;
                v602 = a2;
                if (v601 >= 2) {
                  v602 = *(swift::Demangle::__runtime::Node **)a2;
                }
                v597 = (swift::Demangle::__runtime::Node *)*((void *)v602 + v596);
                goto LABEL_1745;
              }

LABEL_1744:
              v597 = 0LL;
LABEL_1745:
              ++v596;
              continue;
            }
          }

          break;
        }

LABEL_1758:
        uint64_t v276 = " }";
LABEL_1759:
        uint64_t v277 = this;
        std::string::size_type v278 = 2LL;
        goto LABEL_825;
      case 0xD5:
      case 0xD6:
        if (v12 == 214) {
          BOOL v29 = "let ";
        }
        else {
          BOOL v29 = "var ";
        }
        unint64_t v30 = this;
        std::string::size_type v31 = 4LL;
        goto LABEL_297;
      case 0xD7:
        int v398 = *((unsigned __int8 *)a2 + 18);
        if (v398 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1087:
          uint64_t v328 = *(void *)a2;
        }

        else
        {
          uint64_t v328 = 0LL;
        }

        int v517 = a4 & 1;
        v518 = "setter";
LABEL_1578:
        char v540 = (_anonymous_namespace_::NodePrinter *)this;
        int v541 = v8;
        size_t v542 = 6LL;
        goto LABEL_1617;
      case 0xD9:
        uint64_t v276 = "serialized";
        goto LABEL_1699;
      case 0xDA:
        BOOL v29 = "static ";
        unint64_t v30 = this;
        std::string::size_type v31 = 7LL;
        goto LABEL_297;
      case 0xDC:
        v633 = "subscript";
        std::string::size_type v634 = 9LL;
        unsigned int v632 = -1;
        int v284 = a4 & 1;
        v283 = "";
        v285 = (_anonymous_namespace_::NodePrinter *)this;
        v286 = (uint64_t *)a2;
        int v287 = v8;
        int v288 = 2;
        int v424 = 0;
        goto LABEL_1485;
      case 0xDD:
        if (this[1].__r_.__value_.__s.__data_[3])
        {
          std::string::append(this, " with unmangled suffix ", 0x17uLL);
          __int128 v647 = *(_OWORD *)a2;
          __swift::__runtime::llvm::StringRef::str((const void **)&v647, (uint64_t)&__p);
          else {
            std::string __str = __p;
          }
        }

        goto LABEL_826;
      case 0xDF:
        std::string::append(this, "(", 1uLL);
        goto LABEL_1497;
      case 0xE0:
        if (ChildIf)
        {
          std::string::append(this, *(const std::string::value_type **)ChildIf, *(void *)(ChildIf + 8));
          std::string::append(this, ": ", 2uLL);
        }

        uint64_t v276 = "...";
        goto LABEL_1276;
      case 0xE1:
        std::string::append(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
        uint64_t v276 = ": ";
        goto LABEL_1759;
      case 0xE2:
        v302 = "Pack{";
        v303 = this;
        std::string::size_type v304 = 5LL;
        goto LABEL_956;
      case 0xE3:
      case 0xE4:
        if (v12 == 227) {
          v300 = "@direct";
        }
        else {
          v300 = "@indirect";
        }
        if (v12 == 227) {
          std::string::size_type v301 = 7LL;
        }
        else {
          std::string::size_type v301 = 9LL;
        }
        std::string::append(this, v300, v301);
        v302 = " Pack{";
        v303 = this;
        std::string::size_type v304 = 6LL;
LABEL_956:
        std::string::append(v303, v302, v304);
        uint64_t v276 = "}";
        goto LABEL_1498;
      case 0xE5:
        unint64_t v44 = "repeat ";
        goto LABEL_206;
      case 0xE6:
        unint64_t v44 = "each ";
        unint64_t v45 = this;
        std::string::size_type v46 = 5LL;
        goto LABEL_320;
      case 0xE7:
        printer_unreachable("should be handled in Node::Kind::PackElement");
      case 0xE9:
        v341 = "type symbolic reference 0x";
        uint64_t v342 = this;
        std::string::size_type v343 = 26LL;
        goto LABEL_1280;
      case 0xEC:
        int v119 = *((unsigned __int8 *)a2 + 18);
        unsigned int v120 = v119 - 1;
        uint64_t v121 = a2;
        if (*(_WORD *)(*(void *)v121 + 16LL) != 290)
        {
          if (v120 >= 2)
          {
LABEL_314:
            if (v119 != 5 || !*((_DWORD *)a2 + 2))
            {
LABEL_315:
              uint64_t v11 = 0LL;
              goto LABEL_6;
            }

LABEL_1834:
        v593 = 0LL;
LABEL_1835:
        int v620 = *((unsigned __int8 *)v593 + 18);
        if ((v620 - 1) >= 2)
        {
          if (v620 != 5 || !*((_DWORD *)v593 + 2))
          {
            int v282 = 0LL;
LABEL_1841:
            uint64_t v280 = this;
LABEL_831:
            goto LABEL_826;
          }

          v593 = *(swift::Demangle::__runtime::Node **)v593;
        }

        int v282 = *(swift::Demangle::__runtime::Node **)v593;
        goto LABEL_1841;
      case 0xED:
        unint64_t v44 = "type metadata for ";
        unint64_t v45 = this;
        std::string::size_type v46 = 18LL;
        goto LABEL_320;
      case 0xEE:
        unint64_t v44 = "type metadata accessor for ";
        goto LABEL_146;
      case 0xEF:
        unint64_t v44 = "type metadata completion function for ";
        goto LABEL_248;
      case 0xF0:
        unint64_t v44 = "type metadata instantiation cache for ";
LABEL_248:
        unint64_t v45 = this;
        std::string::size_type v46 = 38LL;
        goto LABEL_320;
      case 0xF1:
        unint64_t v44 = "type metadata instantiation function for ";
        goto LABEL_221;
      case 0xF2:
        unint64_t v44 = "type metadata singleton initialization cache for ";
        unint64_t v45 = this;
        std::string::size_type v46 = 49LL;
        goto LABEL_320;
      case 0xF3:
        unint64_t v44 = "demangling cache variable for type metadata for ";
        unint64_t v45 = this;
        std::string::size_type v46 = 48LL;
        goto LABEL_320;
      case 0xF4:
        unint64_t v44 = "lazy cache variable for type metadata for ";
        goto LABEL_278;
      case 0xF6:
        uint64_t v276 = "unknown index";
        uint64_t v277 = this;
        std::string::size_type v278 = 13LL;
        goto LABEL_825;
      case 0xF7:
        unint64_t v116 = "weak";
        int v117 = this;
        std::string::size_type v118 = 4LL;
        goto LABEL_280;
      case 0xF8:
        unint64_t v116 = "unowned";
        int v117 = this;
        std::string::size_type v118 = 7LL;
        goto LABEL_280;
      case 0xF9:
        unint64_t v116 = "unowned(unsafe)";
        int v117 = this;
        std::string::size_type v118 = 15LL;
LABEL_280:
        std::string::append(v117, v116, v118);
        unint64_t v44 = " ";
        unint64_t v45 = this;
        std::string::size_type v46 = 1LL;
        goto LABEL_320;
      case 0xFA:
        int v376 = *((unsigned __int8 *)a2 + 18);
        if (v376 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1000:
          uint64_t v328 = *(void *)a2;
        }

        else
        {
          uint64_t v328 = 0LL;
        }

        int v517 = a4 & 1;
        v518 = "unsafeAddressor";
LABEL_1575:
        char v540 = (_anonymous_namespace_::NodePrinter *)this;
        int v541 = v8;
        size_t v542 = 15LL;
        goto LABEL_1617;
      case 0xFB:
        int v380 = *((unsigned __int8 *)a2 + 18);
        if (v380 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1023:
          uint64_t v328 = *(void *)a2;
        }

        else
        {
          uint64_t v328 = 0LL;
        }

        int v517 = a4 & 1;
        v518 = "unsafeMutableAddressor";
LABEL_1554:
        char v540 = (_anonymous_namespace_::NodePrinter *)this;
        int v541 = v8;
        size_t v542 = 22LL;
        goto LABEL_1617;
      case 0xFC:
        unsigned int v70 = a2;
        uint64_t v71 = **(void **)v70;
        std::string::append(this, off_189B8E5D8[(int)v71], qword_18180E3D0[(int)v71]);
        if (this[1].__r_.__value_.__s.__data_[12])
        {
          BOOL v72 = " for ";
          int v73 = this;
          std::string::size_type v74 = 5LL;
        }

        else
        {
          BOOL v72 = " value witness for ";
          int v73 = this;
          std::string::size_type v74 = 19LL;
        }

        std::string::append(v73, v72, v74);
        int v193 = *((unsigned __int8 *)a2 + 18);
        if (v193 == 2) {
          goto LABEL_497;
        }
        if (v193 == 5) {
          goto LABEL_495;
        }
        goto LABEL_498;
      case 0xFD:
        BOOL v29 = "value witness table for ";
        unint64_t v30 = this;
        std::string::size_type v31 = 24LL;
        goto LABEL_297;
      case 0xFE:
        v283 = "";
        v633 = "";
        std::string::size_type v634 = 0LL;
        unsigned int v632 = -1;
        int v284 = a4 & 1;
        v285 = (_anonymous_namespace_::NodePrinter *)this;
        v286 = (uint64_t *)a2;
        int v287 = v8;
        int v288 = 1;
LABEL_1484:
        int v424 = 1;
LABEL_1485:
        size_t v408 = 0LL;
LABEL_1486:
LABEL_1487:
        uint64_t v11 = v337;
        goto LABEL_827;
      case 0xFF:
        std::string::append(this, "vtable thunk for ", 0x11uLL);
        int v61 = *((unsigned __int8 *)a2 + 18);
        int v62 = a2;
        if (v61 == 2) {
          goto LABEL_125;
        }
        if (v61 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          int v62 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_125:
          unint64_t v63 = (swift::Demangle::__runtime::Node *)*((void *)v62 + 1);
        }

        else
        {
          unint64_t v63 = 0LL;
        }

        uint64_t v181 = " dispatching to ";
LABEL_464:
        int v182 = this;
        std::string::size_type v183 = 16LL;
LABEL_471:
        std::string::append(v182, v181, v183);
        int v184 = *((unsigned __int8 *)a2 + 18);
        if (v184 != 5 || !*((_DWORD *)a2 + 2)) {
          goto LABEL_597;
        }
        a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_475:
        uint64_t v11 = *(swift::Demangle::__runtime::Node **)a2;
        goto LABEL_7;
      case 0x100:
        uint64_t v276 = "override ";
        goto LABEL_1802;
      case 0x101:
        int v388 = *((unsigned __int8 *)a2 + 18);
        if (v388 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1046:
          uint64_t v328 = *(void *)a2;
        }

        else
        {
          uint64_t v328 = 0LL;
        }

        int v517 = a4 & 1;
        v518 = "willset";
        char v540 = (_anonymous_namespace_::NodePrinter *)this;
        int v541 = v8;
        size_t v542 = 7LL;
LABEL_1617:
        goto LABEL_827;
      case 0x102:
        BOOL v29 = "reflection metadata builtin descriptor ";
        unint64_t v30 = this;
        std::string::size_type v31 = 39LL;
        goto LABEL_297;
      case 0x103:
        BOOL v29 = "reflection metadata field descriptor ";
LABEL_119:
        unint64_t v30 = this;
        std::string::size_type v31 = 37LL;
        goto LABEL_297;
      case 0x104:
        BOOL v29 = "reflection metadata associated type descriptor ";
        unint64_t v30 = this;
        std::string::size_type v31 = 47LL;
        goto LABEL_297;
      case 0x105:
        BOOL v29 = "reflection metadata superclass descriptor ";
        unint64_t v30 = this;
        std::string::size_type v31 = 42LL;
        goto LABEL_297;
      case 0x107:
        int v16 = "curry thunk of ";
        unsigned int v32 = this;
        std::string::size_type v33 = 15LL;
        goto LABEL_312;
      case 0x108:
        int v16 = "dispatch thunk of ";
        goto LABEL_274;
      case 0x109:
        int v16 = "method descriptor for ";
        unsigned int v32 = this;
        std::string::size_type v33 = 22LL;
        goto LABEL_312;
      case 0x10A:
        unint64_t v44 = "protocol requirements base descriptor for ";
        goto LABEL_278;
      case 0x10B:
        std::string::append(this, "associated conformance descriptor for ", 0x26uLL);
        int v59 = *((unsigned __int8 *)a2 + 18);
        unint64_t v60 = (swift::Demangle::__runtime::Node **)a2;
        if (v59 != 5 || !*((_DWORD *)a2 + 2)) {
          goto LABEL_392;
        }
        goto LABEL_129;
      case 0x10C:
        std::string::append(this, "default associated conformance accessor for ", 0x2CuLL);
        int v64 = *((unsigned __int8 *)a2 + 18);
        unint64_t v60 = (swift::Demangle::__runtime::Node **)a2;
        if (v64 == 5 && *((_DWORD *)a2 + 2))
        {
LABEL_129:
          unint64_t v60 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_130:
          __int128 v65 = *v60;
        }

        else
        {
LABEL_392:
          __int128 v65 = 0LL;
        }

        std::string::append(this, ".", 1uLL);
        int v155 = *((unsigned __int8 *)a2 + 18);
        unint64_t v156 = a2;
        if (v155 == 2) {
          goto LABEL_397;
        }
        if (v155 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          unint64_t v156 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_397:
          std::string v157 = (swift::Demangle::__runtime::Node *)*((void *)v156 + 1);
        }

        else
        {
          std::string v157 = 0LL;
        }

        unsigned int v158 = ": ";
        uint64_t v159 = this;
        std::string::size_type v160 = 2LL;
LABEL_525:
        std::string::append(v159, v158, v160);
        if (*((_BYTE *)a2 + 18) != 5 || *((_DWORD *)a2 + 2) < 3u) {
          goto LABEL_597;
        }
LABEL_721:
        uint64_t v11 = *(swift::Demangle::__runtime::Node **)(*(void *)a2 + 16LL);
        goto LABEL_7;
      case 0x10D:
        std::string::append(this, "base conformance descriptor for ", 0x20uLL);
        int v101 = *((unsigned __int8 *)a2 + 18);
        unint64_t v102 = (swift::Demangle::__runtime::Node **)a2;
        if (v101 == 5 && *((_DWORD *)a2 + 2))
        {
          unint64_t v102 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_233:
          __int128 v103 = *v102;
        }

        else
        {
          __int128 v103 = 0LL;
        }

        uint64_t v131 = ": ";
        int v132 = this;
        std::string::size_type v133 = 2LL;
LABEL_506:
        std::string::append(v132, v131, v133);
        goto LABEL_507;
      case 0x10E:
        unint64_t v44 = "associated type descriptor for ";
LABEL_109:
        unint64_t v45 = this;
        std::string::size_type v46 = 31LL;
        goto LABEL_320;
      case 0x10F:
        uint64_t v276 = " async";
LABEL_1278:
        uint64_t v277 = this;
        std::string::size_type v278 = 6LL;
        goto LABEL_825;
      case 0x110:
        uint64_t v276 = " throws";
        goto LABEL_1648;
      case 0x111:
        std::string::append(this, " throws(", 8uLL);
        int v436 = *((unsigned __int8 *)a2 + 18);
        if (v436 == 1) {
          goto LABEL_1197;
        }
        if (v436 != 5 || *((_DWORD *)a2 + 2) != 1) {
          goto LABEL_1497;
        }
        a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1197:
        uint64_t v437 = *(swift::Demangle::__runtime::Node **)a2;
        unsigned int v438 = v8 + 1;
        int v439 = (_anonymous_namespace_::NodePrinter *)this;
        goto LABEL_1198;
      case 0x112:
        uint64_t v276 = " empty-list ";
LABEL_1112:
        uint64_t v277 = this;
        std::string::size_type v278 = 12LL;
        goto LABEL_825;
      case 0x113:
        uint64_t v276 = " first-element-marker ";
        goto LABEL_1075;
      case 0x114:
        uint64_t v276 = " variadic-marker ";
        goto LABEL_1434;
      case 0x115:
        std::string::append(this, "outlined bridged method (", 0x19uLL);
        std::string::append(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
        uint64_t v276 = ") of ";
        goto LABEL_1108;
      case 0x116:
        std::string::append(this, "outlined copy of ", 0x11uLL);
        int v57 = *((unsigned __int8 *)a2 + 18);
        int v58 = (swift::Demangle::__runtime::Node **)a2;
        if (v57 != 5 || !*((_DWORD *)a2 + 2)) {
          goto LABEL_400;
        }
        goto LABEL_197;
      case 0x117:
        std::string::append(this, "outlined consume of ", 0x14uLL);
        int v89 = *((unsigned __int8 *)a2 + 18);
        int v58 = (swift::Demangle::__runtime::Node **)a2;
        if (v89 == 5 && *((_DWORD *)a2 + 2))
        {
LABEL_197:
          int v58 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_198:
          unint64_t v90 = *v58;
        }

        else
        {
LABEL_400:
          unint64_t v90 = 0LL;
        }

        int v161 = *((unsigned __int8 *)a2 + 18);
        if (v161 == 2) {
          goto LABEL_511;
        }
        if (v161 != 5 || *((_DWORD *)a2 + 2) < 2u) {
          goto LABEL_826;
        }
        goto LABEL_510;
      case 0x118:
        int v16 = "outlined retain of ";
        unsigned int v32 = this;
        std::string::size_type v33 = 19LL;
        goto LABEL_312;
      case 0x119:
        int v16 = "outlined release of ";
        goto LABEL_237;
      case 0x11A:
        int v16 = "outlined init with take of ";
        goto LABEL_311;
      case 0x11B:
      case 0x15E:
        int v16 = "outlined init with copy of ";
        goto LABEL_311;
      case 0x11C:
      case 0x15F:
        int v16 = "outlined assign with take of ";
        goto LABEL_46;
      case 0x11D:
      case 0x160:
        int v16 = "outlined assign with copy of ";
LABEL_46:
        unsigned int v32 = this;
        std::string::size_type v33 = 29LL;
        goto LABEL_312;
      case 0x11E:
      case 0x161:
        int v16 = "outlined destroy of ";
LABEL_237:
        unsigned int v32 = this;
        std::string::size_type v33 = 20LL;
        goto LABEL_312;
      case 0x11F:
        int v404 = "outlined variable #";
        int v405 = this;
        std::string::size_type v406 = 19LL;
        goto LABEL_1188;
      case 0x120:
        int v404 = "outlined read-only object #";
        int v405 = this;
        std::string::size_type v406 = 27LL;
LABEL_1188:
        std::string::append(v405, v404, v406);
        uint64_t v277 = swift::Demangle::__runtime::DemanglerPrinter::operator<<(this, *(void *)a2);
        uint64_t v276 = " of ";
        std::string::size_type v278 = 4LL;
        goto LABEL_825;
      case 0x121:
        int v445 = *((unsigned __int8 *)a2 + 18);
        v446 = (swift::Demangle::__runtime::Node *const *)a2;
        if (v445 == 5)
        {
          v446 = *(swift::Demangle::__runtime::Node *const **)a2;
        }

        else
        {
          v446 = 0LL;
LABEL_1690:
          if (v445 != 5)
          {
            v580 = (swift::Demangle::__runtime::Node *const *)((char *)a2 + 8);
            if (v445 != 1) {
              v580 = 0LL;
            }
            if (v445 == 2) {
              v581 = (swift::Demangle::__runtime::Node *const *)((char *)a2 + 16);
            }
            else {
              v581 = v580;
            }
LABEL_1697:
            goto LABEL_826;
          }
        }

        v581 = (swift::Demangle::__runtime::Node *const *)(*(void *)a2 + 8LL * *((unsigned int *)a2 + 2));
        goto LABEL_1697;
      case 0x123:
        BOOL v29 = "module descriptor ";
        unint64_t v30 = this;
        std::string::size_type v31 = 18LL;
        goto LABEL_297;
      case 0x124:
        BOOL v29 = "extension descriptor ";
        goto LABEL_241;
      case 0x125:
        BOOL v29 = "anonymous descriptor ";
LABEL_241:
        unint64_t v30 = this;
        std::string::size_type v31 = 21LL;
        goto LABEL_297;
      case 0x126:
        __int128 v363 = "generic parameter reference for associated type ";
        uint64_t v364 = this;
        std::string::size_type v365 = 48LL;
LABEL_1515:
        std::string::append(v364, v363, v365);
LABEL_1516:
        goto LABEL_826;
      case 0x127:
        int v419 = *((unsigned __int8 *)a2 + 18);
        if (v419 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1155:
          v420 = *(swift::Demangle::__runtime::Node **)a2;
        }

        else
        {
          v420 = 0LL;
        }

        uint64_t v276 = "?";
        goto LABEL_1498;
      case 0x128:
        std::string::append(this, "[", 1uLL);
        int v416 = *((unsigned __int8 *)a2 + 18);
        if (v416 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1145:
          __int128 v417 = *(swift::Demangle::__runtime::Node **)a2;
        }

        else
        {
          __int128 v417 = 0LL;
        }

        unsigned int v547 = v8 + 1;
        uint64_t v546 = (_anonymous_namespace_::NodePrinter *)this;
        goto LABEL_1592;
      case 0x129:
        std::string::append(this, "[", 1uLL);
        int v381 = *((unsigned __int8 *)a2 + 18);
        uint64_t v382 = (swift::Demangle::__runtime::Node **)a2;
        if (v381 == 5 && *((_DWORD *)a2 + 2))
        {
          uint64_t v382 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_1029:
          v383 = *v382;
        }

        else
        {
          v383 = 0LL;
        }

        unsigned int v544 = v8 + 1;
        std::string::append(this, " : ", 3uLL);
        int v545 = *((unsigned __int8 *)a2 + 18);
        if (v545 == 2) {
          goto LABEL_1560;
        }
        if (v545 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1560:
          __int128 v417 = (swift::Demangle::__runtime::Node *)*((void *)a2 + 1);
        }

        else
        {
          __int128 v417 = 0LL;
        }

        uint64_t v546 = (_anonymous_namespace_::NodePrinter *)this;
        unsigned int v547 = v544;
LABEL_1592:
        v550 = "]";
LABEL_1626:
        v568 = this;
        std::string::size_type v569 = 1LL;
        goto LABEL_1822;
      case 0x12A:
        std::string::append(this, "(", 1uLL);
        int v389 = *((unsigned __int8 *)a2 + 18);
        if (v389 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1055:
          v390 = *(swift::Demangle::__runtime::Node **)a2;
        }

        else
        {
          v390 = 0LL;
        }

        v550 = ")";
        goto LABEL_1626;
      case 0x12B:
        std::string::append(this, "accessor function at ", 0x15uLL);
LABEL_1168:
        uint64_t v425 = *(void *)a2;
LABEL_1169:
        swift::Demangle::__runtime::DemanglerPrinter::operator<<(this, v425);
        goto LABEL_826;
      case 0x12C:
        int v66 = *((unsigned __int8 *)a2 + 18);
        std::string::size_type v67 = (swift::Demangle::__runtime::Node **)a2;
        if (v66 == 5 && *((_DWORD *)a2 + 2))
        {
LABEL_354:
          std::string::size_type v67 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_355:
          unint64_t v141 = *v67;
        }

        else
        {
LABEL_405:
          unint64_t v141 = 0LL;
        }

        std::string::push_back(this, 46);
LABEL_507:
        int v194 = *((unsigned __int8 *)a2 + 18);
        if (v194 == 2) {
          goto LABEL_511;
        }
        if (v194 != 5 || *((_DWORD *)a2 + 2) < 2u) {
          goto LABEL_597;
        }
LABEL_510:
        a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_511:
        uint64_t v11 = (swift::Demangle::__runtime::Node *)*((void *)a2 + 1);
        goto LABEL_7;
      case 0x12D:
        v341 = "opaque type symbolic reference 0x";
        uint64_t v342 = this;
        std::string::size_type v343 = 33LL;
        goto LABEL_1280;
      case 0x12E:
        unint64_t v44 = "opaque type descriptor for ";
LABEL_146:
        unint64_t v45 = this;
        std::string::size_type v46 = 27LL;
        goto LABEL_320;
      case 0x12F:
        unint64_t v44 = "opaque type descriptor runtime record for ";
LABEL_278:
        unint64_t v45 = this;
        std::string::size_type v46 = 42LL;
        goto LABEL_320;
      case 0x130:
        unint64_t v44 = "opaque type descriptor accessor for ";
LABEL_317:
        unint64_t v45 = this;
        std::string::size_type v46 = 36LL;
        goto LABEL_320;
      case 0x131:
        unint64_t v44 = "opaque type descriptor accessor impl for ";
LABEL_221:
        unint64_t v45 = this;
        std::string::size_type v46 = 41LL;
        goto LABEL_320;
      case 0x132:
        std::string::append(this, "opaque type descriptor accessor key for ", 0x28uLL);
        int v88 = *((unsigned __int8 *)a2 + 18);
        if (v88 != 5 || !*((_DWORD *)a2 + 2)) {
          goto LABEL_546;
        }
        goto LABEL_300;
      case 0x133:
        BOOL v29 = "opaque type descriptor accessor var for ";
        unint64_t v30 = this;
        std::string::size_type v31 = 40LL;
        goto LABEL_297;
      case 0x134:
        uint64_t v276 = "some";
LABEL_1060:
        uint64_t v277 = this;
        std::string::size_type v278 = 4LL;
        goto LABEL_825;
      case 0x135:
        std::string::append(this, "<<opaque return type of ", 0x18uLL);
        uint64_t v276 = ">>";
        goto LABEL_1759;
      case 0x136:
        BOOL v29 = "specialized generic metaclass for ";
        unint64_t v30 = this;
        std::string::size_type v31 = 34LL;
        goto LABEL_297;
      case 0x137:
        BOOL v29 = "canonical specialized generic type metadata accessor for ";
        unint64_t v30 = this;
        std::string::size_type v31 = 57LL;
        goto LABEL_297;
      case 0x138:
        BOOL v29 = "metadata instantiation cache for ";
        unint64_t v30 = this;
        std::string::size_type v31 = 33LL;
        goto LABEL_297;
      case 0x139:
        BOOL v29 = "noncanonical specialized generic type metadata for ";
        unint64_t v30 = this;
        std::string::size_type v31 = 51LL;
        goto LABEL_297;
      case 0x13A:
        BOOL v29 = "cache variable for noncanonical specialized generic type metadata for ";
        unint64_t v30 = this;
        std::string::size_type v31 = 70LL;
        goto LABEL_297;
      case 0x13B:
      case 0x13C:
        if (v12 == 316) {
          int v17 = "one-time initialization token for ";
        }
        else {
          int v17 = "one-time initialization function for ";
        }
        if (v12 == 316) {
          std::string::size_type v18 = 34LL;
        }
        else {
          std::string::size_type v18 = 37LL;
        }
        std::string::append(this, v17, v18);
        int v19 = *((unsigned __int8 *)a2 + 18);
        if (v19 == 2) {
          goto LABEL_497;
        }
        if (v19 != 5) {
          goto LABEL_498;
        }
LABEL_495:
        if (*((_DWORD *)a2 + 2) < 2u) {
          goto LABEL_498;
        }
        a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_497:
        uint64_t v11 = (swift::Demangle::__runtime::Node *)*((void *)a2 + 1);
        goto LABEL_6;
      case 0x13D:
        int v76 = *((unsigned __int8 *)a2 + 18);
        if (v76 == 1) {
          goto LABEL_5;
        }
        if (v76 == 5 && *((_DWORD *)a2 + 2) == 1) {
          goto LABEL_4;
        }
        std::string::push_back(this, 40);
        int v495 = *((unsigned __int8 *)a2 + 18);
        if (v495 == 5)
        {
          v584 = (unsigned int *)((char *)a2 + 8);
          uint64_t v585 = *((unsigned int *)a2 + 2);
          if (!(_DWORD)v585
            || (unsigned int v586 = v8 + 1,
          {
LABEL_1850:
            std::string::push_back(this, 41);
            goto LABEL_826;
          }
        }

        else
        {
          if (v495 != 2)
          {
            if (v495 == 1) {
            goto LABEL_1850;
            }
          }

          v584 = (unsigned int *)((char *)a2 + 8);
          unsigned int v586 = v8 + 1;
          uint64_t v585 = 2LL;
        }

        unint64_t v587 = 1LL;
        while (1)
        {
          std::string::append(this, ", ", 2uLL);
          int v589 = *((unsigned __int8 *)a2 + 18);
          if (v589 == 2)
          {
            unint64_t v590 = *((unsigned __int8 *)a2 + 18);
          }

          else
          {
            if (v589 != 5) {
              goto LABEL_1718;
            }
            unint64_t v590 = *v584;
          }

          if (v590 > v587)
          {
            unsigned int v591 = v589 - 1;
            v592 = a2;
            if (v591 >= 2) {
              v592 = *(swift::Demangle::__runtime::Node **)a2;
            }
            v588 = (swift::Demangle::__runtime::Node *)*((void *)v592 + v587);
            goto LABEL_1719;
          }

LABEL_1718:
          v588 = 0LL;
LABEL_1719:
          if (v585 == ++v587) {
            goto LABEL_1850;
          }
        }

      case 0x13E:
        BOOL v29 = "flag for loading of canonical specialized generic type metadata for ";
        unint64_t v30 = this;
        std::string::size_type v31 = 68LL;
        goto LABEL_297;
      case 0x13F:
        uint64_t v276 = "async function pointer to ";
        goto LABEL_1067;
      case 0x140:
      case 0x144:
        unsigned int v636 = v6;
        int v20 = 0;
        unint64_t v21 = 0LL;
        unint64_t v22 = *((unsigned __int8 *)a2 + 18);
        unint64_t v23 = v22;
        unsigned int v24 = v22 - 1;
        int v25 = -1;
        while (2)
        {
          uint64_t v26 = *((unsigned __int8 *)a2 + 18);
          if ((_DWORD)v22 == 1) {
            goto LABEL_30;
          }
          if ((_DWORD)v22 == 5)
          {
            if (v21 == *((_DWORD *)a2 + 2)) {
              break;
            }
            goto LABEL_31;
          }

          uint64_t v26 = 2LL;
          if ((_DWORD)v22 != 2) {
            uint64_t v26 = 0LL;
          }
LABEL_30:
          if (v21 != v26)
          {
LABEL_31:
            unint64_t v27 = a2;
            if (*(_WORD *)(*((void *)v27 + v21) + 16LL) != 321)
            {
              ++v21;
              ++v25;
              ++v20;
              continue;
            }
          }

          break;
        }

        unint64_t v28 = *((unsigned __int8 *)a2 + 18);
        switch((_DWORD)v22)
        {
          case 1:
            break;
          case 5:
            unint64_t v28 = *((unsigned int *)a2 + 2);
            break;
          case 2:
            unint64_t v28 = 2LL;
            break;
          default:
            goto LABEL_416;
        }

        if (v28 > v21)
        {
          __int16 v164 = a2;
          if (v24 >= 2) {
            __int16 v164 = *(swift::Demangle::__runtime::Node **)a2;
          }
          int v165 = (swift::Demangle::__runtime::Node *)*((void *)v164 + v21);
LABEL_417:
          if ((_DWORD)v22 != 1)
          {
            if ((_DWORD)v22 == 5)
            {
              unint64_t v23 = *((unsigned int *)a2 + 2);
            }

            else
            {
              if ((_DWORD)v22 != 2) {
                goto LABEL_426;
              }
              unint64_t v23 = 2LL;
            }
          }

          unint64_t v166 = (v21 + 1);
          if (v23 > v166)
          {
            unint64_t v167 = a2;
            if (v24 >= 2) {
              unint64_t v167 = *(swift::Demangle::__runtime::Node **)a2;
            }
            unint64_t v168 = (swift::Demangle::__runtime::Node *)*((void *)v167 + v166);
LABEL_427:
            if ((_DWORD)v22 != 1)
            {
              if ((_DWORD)v22 == 5)
              {
                unint64_t v22 = *((unsigned int *)a2 + 2);
              }

              else
              {
                if ((_DWORD)v22 != 2) {
                  goto LABEL_436;
                }
                unint64_t v22 = 2LL;
              }
            }

            unint64_t v169 = (v21 + 2);
            if (v22 > v169)
            {
              unint64_t v170 = a2;
              if (v24 >= 2) {
                unint64_t v170 = *(swift::Demangle::__runtime::Node **)a2;
              }
              unint64_t v171 = (swift::Demangle::__runtime::Node *)*((void *)v170 + v169);
              goto LABEL_437;
            }

LABEL_436:
            unint64_t v171 = 0LL;
LABEL_437:
            if (v12 == 324) {
              std::string::append(this, "vtable thunk for ", 0x11uLL);
            }
            std::string::append(this, " of ", 4uLL);
            if (!(_DWORD)v21)
            {
              uint64_t v11 = 0LL;
              uint64_t v6 = v636;
              int v4 = &jpt_1817B4BF4;
              goto LABEL_731;
            }

            v635 = v171;
            unint64_t v172 = v168;
            unint64_t v173 = 0LL;
            unint64_t v174 = (v21 - 1);
            while (1)
            {
              unint64_t v176 = *((unsigned __int8 *)a2 + 18);
              if (v25 == v173)
              {
                if ((v176 - 1) >= 2)
                {
                  char v177 = 0;
                  unint64_t v178 = *(swift::Demangle::__runtime::Node **)a2;
                }

                else
                {
                  char v177 = 1;
                  unint64_t v178 = a2;
                }

                if (*(_WORD *)(*((void *)v178 + v174) + 16LL) == 43)
                {
                  if ((_DWORD)v176 == 1)
                  {
                    uint64_t v6 = v636;
                    int v4 = &jpt_1817B4BF4;
                    unint64_t v168 = v172;
                  }

                  else
                  {
                    uint64_t v6 = v636;
                    int v4 = &jpt_1817B4BF4;
                    unint64_t v168 = v172;
                    if ((_DWORD)v176 != 5)
                    {
                      unint64_t v171 = v635;
                      if ((_DWORD)v176 == 2)
                      {
                        unint64_t v176 = 2LL;
                        goto LABEL_726;
                      }

                      goto LABEL_730;
                    }

                    unint64_t v176 = *((unsigned int *)a2 + 2);
                  }

                  unint64_t v171 = v635;
LABEL_726:
                  if (v176 <= v174)
                  {
LABEL_730:
                    uint64_t v11 = 0LL;
                  }

                  else
                  {
                    if ((v177 & 1) == 0) {
                      a2 = *(swift::Demangle::__runtime::Node **)a2;
                    }
                    uint64_t v11 = (swift::Demangle::__runtime::Node *)*((void *)a2 + v174);
                  }

LABEL_731:
                  if (this[1].__r_.__value_.__s.__data_[11]) {
                    goto LABEL_826;
                  }
                  std::string::append(this, " with respect to parameters ", 0x1CuLL);
                  std::string::append(this, " and results ", 0xDuLL);
                  if (v11)
                  {
                    if (this[1].__r_.__value_.__s.__data_[7])
                    {
LABEL_734:
                      std::string::append(this, " with ", 6uLL);
                      goto LABEL_7;
                    }

                    goto LABEL_826;
                  }

                  goto LABEL_827;
                }
              }

              unsigned int v179 = v176 - 1;
              if ((_DWORD)v176 == 1) {
                goto LABEL_452;
              }
              if ((_DWORD)v176 != 5) {
                break;
              }
              if (*((unsigned int *)a2 + 2) > v173)
              {
LABEL_455:
                int v180 = a2;
                if (v179 >= 2) {
                  int v180 = *(swift::Demangle::__runtime::Node **)a2;
                }
                int v175 = (swift::Demangle::__runtime::Node *)*((void *)v180 + v173);
                goto LABEL_442;
              }

LABEL_441:
              int v175 = 0LL;
LABEL_442:
              if (v20 == ++v173)
              {
                uint64_t v11 = 0LL;
                uint64_t v6 = v636;
                int v4 = &jpt_1817B4BF4;
                unint64_t v168 = v172;
                unint64_t v171 = v635;
                goto LABEL_731;
              }
            }

            if ((_DWORD)v176 != 2) {
              goto LABEL_441;
            }
            unint64_t v176 = 2LL;
LABEL_452:
            if (v176 > v173) {
              goto LABEL_455;
            }
            goto LABEL_441;
          }

LABEL_426:
          unint64_t v168 = 0LL;
          goto LABEL_427;
        }

LABEL_416:
        int v165 = 0LL;
        goto LABEL_417;
      case 0x141:
        uint64_t v11 = 0LL;
        HIDWORD(v429) = *(unsigned __int8 *)a2;
        LODWORD(v429) = (HIDWORD(v429) << 24) - 1677721600;
        switch((v429 >> 25))
        {
          case 0u:
            uint64_t v276 = "differential";
            goto LABEL_1112;
          case 1u:
            uint64_t v276 = "forward-mode derivative";
            goto LABEL_1772;
          case 6u:
            uint64_t v276 = "pullback";
            goto LABEL_1770;
          case 7u:
            uint64_t v276 = "reverse-mode derivative";
LABEL_1772:
            uint64_t v277 = this;
            std::string::size_type v278 = 23LL;
            goto LABEL_825;
          default:
            goto LABEL_827;
        }

      case 0x142:
        std::string::append(this, "autodiff self-reordering reabstraction thunk ", 0x2DuLL);
        uint64_t v11 = *(swift::Demangle::__runtime::Node **)a2;
        if (this[1].__r_.__value_.__s.__data_[11])
        {
          std::string::append(this, "for ", 4uLL);
          goto LABEL_6;
        }

        int v185 = v4;
        unsigned int v187 = (swift::Demangle::__runtime::Node *)*((void *)a2 + 1);
        int v186 = (unsigned __int16 *)*((void *)a2 + 2);
        int v188 = v186[8];
        if (v188 == 43) {
          uint64_t v189 = 24LL;
        }
        else {
          uint64_t v189 = 16LL;
        }
        std::string::append(this, "for ", 4uLL);
        if (v186 && v188 == 43)
        {
          std::string::push_back(this, 32);
        }

        std::string::append(this, " from ", 6uLL);
        std::string::append(this, " to ", 4uLL);
        uint64_t v11 = v187;
        int v4 = v185;
        goto LABEL_7;
      case 0x143:
        std::string::append(this, "autodiff subset parameters thunk for ", 0x25uLL);
        unint64_t v91 = *((unsigned __int8 *)a2 + 18);
        switch((_DWORD)v91)
        {
          case 1:
            uint64_t v94 = 0LL;
            unint64_t v92 = -1LL;
            uint64_t v93 = *((unsigned __int8 *)a2 + 18);
            goto LABEL_622;
          case 5:
            uint64_t v93 = *((unsigned int *)a2 + 2);
            unint64_t v92 = v93 - 2;
            if (!(_DWORD)v93)
            {
              uint64_t v221 = 0LL;
              uint64_t v93 = 0LL;
              unint64_t v223 = 0LL;
              unint64_t v222 = -3LL;
              goto LABEL_743;
            }

            uint64_t v94 = v93 - 1;
            int v220 = *(swift::Demangle::__runtime::Node **)a2;
            goto LABEL_623;
          case 2:
            unint64_t v92 = 0LL;
            uint64_t v93 = 2LL;
            uint64_t v94 = 1LL;
LABEL_622:
            int v220 = a2;
LABEL_623:
            uint64_t v221 = (swift::Demangle::__runtime::Node *)*((void *)v220 + v94);
            goto LABEL_625;
        }

        uint64_t v93 = 0LL;
        uint64_t v221 = 0LL;
        unint64_t v92 = -2LL;
LABEL_625:
        unint64_t v222 = v93 - 3;
        switch((_DWORD)v91)
        {
          case 1:
            unint64_t v223 = *((unsigned __int8 *)a2 + 18);
            break;
          case 2:
            unint64_t v223 = 2LL;
            break;
          case 5:
            unint64_t v223 = *((unsigned int *)a2 + 2);
            break;
          default:
            goto LABEL_747;
        }

LABEL_743:
        if (v223 <= v92)
        {
LABEL_747:
          v637 = 0LL;
          goto LABEL_748;
        }

        __int16 v250 = a2;
        v637 = (swift::Demangle::__runtime::Node *)*((void *)v250 + v92);
LABEL_748:
        switch((_DWORD)v91)
        {
          case 1:
            unint64_t v251 = *((unsigned __int8 *)a2 + 18);
            break;
          case 5:
            unint64_t v251 = *((unsigned int *)a2 + 2);
            break;
          case 2:
            unint64_t v251 = 2LL;
            break;
          default:
            goto LABEL_758;
        }

        if (v251 <= v222)
        {
LABEL_758:
          int v253 = 0LL;
          goto LABEL_759;
        }

        int v252 = a2;
        int v253 = (swift::Demangle::__runtime::Node *)*((void *)v252 + v222);
LABEL_759:
        unsigned int v254 = v91 - 1;
        switch((_DWORD)v91)
        {
          case 1:
            break;
          case 5:
            unint64_t v91 = *((unsigned int *)a2 + 2);
            break;
          case 2:
            unint64_t v91 = 2LL;
            break;
          default:
            goto LABEL_768;
        }

        if (v91 <= v93 - 4)
        {
LABEL_768:
          v256 = v4;
          uint64_t v257 = 0LL;
          goto LABEL_769;
        }

        uint64_t v255 = a2;
        if (v254 >= 2) {
          uint64_t v255 = *(swift::Demangle::__runtime::Node **)a2;
        }
        v256 = v4;
        uint64_t v257 = (swift::Demangle::__runtime::Node *)*((void *)v255 + v93 - 4);
LABEL_769:
        unint64_t v258 = v93 - 5;
        std::string::append(this, " from ", 6uLL);
        if (v258)
        {
          uint64_t v259 = v6;
          unint64_t v260 = 0LL;
          unsigned int v261 = 1;
          while (1)
          {
            unint64_t v263 = *((unsigned __int8 *)a2 + 18);
            unsigned int v264 = v263 - 1;
            if ((_DWORD)v263 == 1) {
              goto LABEL_777;
            }
            if ((_DWORD)v263 != 5) {
              break;
            }
            if (*((unsigned int *)a2 + 2) > v260)
            {
LABEL_780:
              v265 = a2;
              if (v264 >= 2) {
                v265 = *(swift::Demangle::__runtime::Node **)a2;
              }
              __int16 v262 = (swift::Demangle::__runtime::Node *)*((void *)v265 + v260);
              goto LABEL_772;
            }

LABEL_771:
            __int16 v262 = 0LL;
LABEL_772:
            unint64_t v260 = v261++;
            if (v258 <= v260) {
              goto LABEL_790;
            }
          }

          if ((_DWORD)v263 != 2) {
            goto LABEL_771;
          }
          unint64_t v263 = 2LL;
LABEL_777:
          if (v263 > v260) {
            goto LABEL_780;
          }
          goto LABEL_771;
        }

        int v266 = *((unsigned __int8 *)a2 + 18);
        int v267 = (swift::Demangle::__runtime::Node **)a2;
        if (v266 == 5 && *((_DWORD *)a2 + 2))
        {
          int v267 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_787:
          uint64_t v259 = v6;
          v268 = *v267;
        }

        else
        {
          uint64_t v259 = v6;
          v268 = 0LL;
        }

LABEL_790:
        if (this[1].__r_.__value_.__s.__data_[11]) {
          goto LABEL_826;
        }
        std::string::append(this, " with respect to parameters ", 0x1CuLL);
        std::string::append(this, " and results ", 0xDuLL);
        std::string::append(this, " to parameters ", 0xFuLL);
        if (!v258) {
          goto LABEL_826;
        }
        std::string::append(this, " of type ", 9uLL);
        unint64_t v269 = *((unsigned __int8 *)a2 + 18);
        unsigned int v270 = v269 - 1;
        if ((_DWORD)v269 == 1)
        {
          uint64_t v6 = v259;
        }

        else
        {
          uint64_t v6 = v259;
          if ((_DWORD)v269 == 5)
          {
            unint64_t v269 = *((unsigned int *)a2 + 2);
          }

          else
          {
            if ((_DWORD)v269 != 2) {
              goto LABEL_802;
            }
            unint64_t v269 = 2LL;
          }
        }

        if (v269 <= v258)
        {
LABEL_802:
          uint64_t v11 = 0LL;
          int v4 = v256;
          goto LABEL_7;
        }

        if (v270 >= 2) {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
        }
        uint64_t v11 = (swift::Demangle::__runtime::Node *)*((void *)a2 + v258);
        int v4 = v256;
LABEL_7:
        a4 = 0;
        char v9 = 1;
        a2 = v11;
        if (v8 > 0x300) {
          goto LABEL_823;
        }
        continue;
      case 0x145:
        uint64_t v77 = *((unsigned int *)a2 + 2);
        if ((_DWORD)v77) {
          uint64_t v78 = *(void *)(*(void *)a2 + 8 * v77 - 8) + 16LL;
        }
        else {
          uint64_t v78 = 16LL;
        }
        BOOL v275 = *(unsigned __int16 *)v78 == 43;
        uint64_t v190 = -4LL;
        if (!v275) {
          uint64_t v190 = -3LL;
        }
        HIDWORD(v191) = **(unsigned __int8 **)(*(void *)a2 + 8 * (v190 + v77));
        LODWORD(v191) = (HIDWORD(v191) << 24) - 1677721600;
        switch((v191 >> 25))
        {
          case 0u:
            int v192 = "normal";
            goto LABEL_645;
          case 1u:
            int v192 = "forward-mode";
            goto LABEL_648;
          case 4u:
            int v192 = "linear";
LABEL_645:
            int v224 = this;
            std::string::size_type v225 = 6LL;
            goto LABEL_649;
          case 7u:
            int v192 = "reverse-mode";
LABEL_648:
            int v224 = this;
            std::string::size_type v225 = 12LL;
LABEL_649:
            std::string::append(v224, v192, v225);
            break;
          default:
            break;
        }

        std::string::append(this, " differentiability witness for ", 0x1FuLL);
        uint64_t v226 = *((unsigned __int8 *)a2 + 18);
        if ((_DWORD)v226 == 1) {
          goto LABEL_655;
        }
        if ((_DWORD)v226 == 5)
        {
          uint64_t v226 = *((unsigned int *)a2 + 2);
          if ((_DWORD)v226) {
            goto LABEL_655;
          }
LABEL_672:
          LODWORD(v227) = 0;
          goto LABEL_674;
        }

        if ((_DWORD)v226 != 2) {
          goto LABEL_672;
        }
        uint64_t v226 = 2LL;
LABEL_655:
        unint64_t v227 = 0LL;
        while (1)
        {
          unint64_t v229 = *((unsigned __int8 *)a2 + 18);
          if ((v229 - 1) >= 2)
          {
            char v230 = 0;
            uint64_t v231 = *(swift::Demangle::__runtime::Node **)a2;
          }

          else
          {
            char v230 = 1;
            uint64_t v231 = a2;
          }

          if (*(_WORD *)(*((void *)v231 + v227) + 16LL) == 102) {
            break;
          }
          if ((_DWORD)v229 == 1) {
            goto LABEL_666;
          }
          if ((_DWORD)v229 != 5)
          {
            if ((_DWORD)v229 != 2) {
              goto LABEL_656;
            }
            unint64_t v229 = 2LL;
LABEL_666:
            if (v229 > v227) {
              goto LABEL_669;
            }
            goto LABEL_656;
          }

          if (*((unsigned int *)a2 + 2) > v227)
          {
LABEL_669:
            int v232 = a2;
            if ((v230 & 1) == 0) {
              int v232 = *(swift::Demangle::__runtime::Node **)a2;
            }
            unsigned int v228 = (swift::Demangle::__runtime::Node *)*((void *)v232 + v227);
            goto LABEL_657;
          }

LABEL_656:
          unsigned int v228 = 0LL;
LABEL_657:
          if (v226 == ++v227)
          {
            LODWORD(v227) = v226;
            break;
          }
        }

LABEL_674:
        std::string::append(this, " with respect to parameters ", 0x1CuLL);
        unint64_t v233 = *((unsigned __int8 *)a2 + 18);
        unsigned int v234 = v233 - 1;
        if ((_DWORD)v233 == 1) {
          goto LABEL_679;
        }
        if ((_DWORD)v233 != 5)
        {
          if ((_DWORD)v233 == 2)
          {
            unint64_t v233 = 2LL;
            goto LABEL_679;
          }

          goto LABEL_683;
        }

        unint64_t v233 = *((unsigned int *)a2 + 2);
LABEL_679:
        unint64_t v235 = (v227 + 1);
        if (v233 <= v235)
        {
LABEL_683:
          int v237 = 0LL;
        }

        else
        {
          uint64_t v236 = a2;
          if (v234 >= 2) {
            uint64_t v236 = *(swift::Demangle::__runtime::Node **)a2;
          }
          int v237 = (swift::Demangle::__runtime::Node *)*((void *)v236 + v235);
        }

        std::string::append(this, " and results ", 0xDuLL);
        unint64_t v238 = *((unsigned __int8 *)a2 + 18);
        unsigned int v239 = v238 - 1;
        if ((_DWORD)v238 != 1)
        {
          if ((_DWORD)v238 != 5)
          {
            if ((_DWORD)v238 == 2)
            {
              unint64_t v238 = 2LL;
              goto LABEL_689;
            }

LABEL_693:
            int v242 = 0LL;
            goto LABEL_694;
          }

          unint64_t v238 = *((unsigned int *)a2 + 2);
        }

LABEL_689:
        unint64_t v240 = (v227 + 2);
        if (v238 <= v240) {
          goto LABEL_693;
        }
        uint64_t v241 = a2;
        if (v239 >= 2) {
          uint64_t v241 = *(swift::Demangle::__runtime::Node **)a2;
        }
        int v242 = (swift::Demangle::__runtime::Node *)*((void *)v241 + v240);
LABEL_694:
        unint64_t v243 = *((unsigned __int8 *)a2 + 18);
        switch((_DWORD)v243)
        {
          case 1:
            unint64_t v244 = *((unsigned __int8 *)a2 + 18);
            break;
          case 5:
            unint64_t v244 = *((unsigned int *)a2 + 2);
            break;
          case 2:
            unint64_t v244 = 2LL;
            break;
          default:
            goto LABEL_826;
        }

        unint64_t v245 = (v227 + 3);
        if (v244 > v245)
        {
          unsigned int v246 = v243 - 1;
          if ((_DWORD)v243 != 1)
          {
            if ((_DWORD)v243 == 5) {
              unint64_t v243 = *((unsigned int *)a2 + 2);
            }
            else {
              unint64_t v243 = 2LL;
            }
          }

          if (v243 <= v245)
          {
            uint64_t v11 = 0LL;
          }

          else
          {
            if (v246 >= 2) {
              a2 = *(swift::Demangle::__runtime::Node **)a2;
            }
            uint64_t v11 = (swift::Demangle::__runtime::Node *)*((void *)a2 + v245);
          }

          goto LABEL_734;
        }

LABEL_826:
        uint64_t v11 = 0LL;
LABEL_827:
        if ((v9 & 1) != 0) {
          return 0LL;
        }
        else {
          return v11;
        }
      case 0x146:
        unint64_t v44 = "@noDerivative ";
LABEL_210:
        unint64_t v45 = this;
        std::string::size_type v46 = 14LL;
        goto LABEL_320;
      case 0x147:
        std::string::push_back(this, 123);
        uint64_t v440 = *((unsigned int *)a2 + 2);
        if (*((_DWORD *)a2 + 2))
        {
          uint64_t v441 = 0LL;
          char v442 = 0;
          uint64_t v443 = *(void *)a2;
          do
          {
            if (*(_BYTE *)(v443 + v441) == 83)
            {
              if ((v442 & 1) != 0) {
                std::string::append(this, ", ", 2uLL);
              }
              swift::Demangle::__runtime::DemanglerPrinter::operator<<(this, v441);
              char v442 = 1;
            }

            ++v441;
          }

          while (v440 != v441);
        }

        std::string::push_back(this, 125);
        goto LABEL_826;
      case 0x148:
        if (!this[1].__r_.__value_.__s.__data_[20]) {
          goto LABEL_826;
        }
        std::string::append(this, "(", 1uLL);
        int v421 = *((unsigned __int8 *)a2 + 18);
        if (v421 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1161:
          v422 = *(swift::Demangle::__runtime::Node **)a2;
        }

        else
        {
          v422 = 0LL;
        }

        std::string::append(this, ")", 1uLL);
        v550 = " await resume partial function for ";
        v568 = this;
        std::string::size_type v569 = 35LL;
        goto LABEL_1822;
      case 0x149:
        if (!this[1].__r_.__value_.__s.__data_[20]) {
          goto LABEL_826;
        }
        std::string::append(this, "(", 1uLL);
        int v399 = *((unsigned __int8 *)a2 + 18);
        if (v399 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1093:
          unint64_t v400 = *(swift::Demangle::__runtime::Node **)a2;
        }

        else
        {
          unint64_t v400 = 0LL;
        }

        std::string::append(this, ")", 1uLL);
        v550 = " suspend resume partial function for ";
        v568 = this;
        std::string::size_type v569 = 37LL;
        goto LABEL_1822;
      case 0x14A:
        if (this[1].__r_.__value_.__s.__data_[11]) {
          goto LABEL_826;
        }
        uint64_t v276 = "accessible function runtime record for ";
        uint64_t v277 = this;
        std::string::size_type v278 = 39LL;
        goto LABEL_825;
      case 0x14B:
        unint64_t v44 = "_const ";
LABEL_206:
        unint64_t v45 = this;
        std::string::size_type v46 = 7LL;
LABEL_320:
        std::string::append(v45, v44, v46);
        int v126 = *((unsigned __int8 *)a2 + 18);
        if (v126 != 5 || !*((_DWORD *)a2 + 2)) {
          goto LABEL_546;
        }
        a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_324:
        uint64_t v11 = *(swift::Demangle::__runtime::Node **)a2;
        ++v8;
        goto LABEL_7;
      case 0x14C:
        if (this[1].__r_.__value_.__s.__data_[11]) {
          goto LABEL_826;
        }
        uint64_t v276 = "back deployment thunk for ";
LABEL_1067:
        uint64_t v277 = this;
        std::string::size_type v278 = 26LL;
        goto LABEL_825;
      case 0x14D:
        uint64_t v276 = "back deployment fallback for ";
        uint64_t v277 = this;
        std::string::size_type v278 = 29LL;
        goto LABEL_825;
      case 0x14E:
        std::string::value_type v430 = this[1].__r_.__value_.__s.__data_[7];
        this[1].__r_.__value_.__s.__data_[7] = 1;
        int v431 = *((unsigned __int8 *)a2 + 18);
        if (v431 == 2) {
          goto LABEL_1184;
        }
        if (v431 != 5) {
          goto LABEL_1806;
        }
        unsigned int v432 = *((_DWORD *)a2 + 2);
        if (v432 == 2)
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1184:
          uint64_t v433 = (swift::Demangle::__runtime::Node *)*((void *)a2 + 1);
          std::string::append(this, "existential shape for ", 0x16uLL);
          if (v433)
          {
            unsigned int v434 = v8 + 1;
            std::string::append(this, " ", 1uLL);
            uint64_t v433 = 0LL;
            goto LABEL_1809;
          }
        }

        else
        {
          if (v432 < 2) {
LABEL_1806:
          }
            uint64_t v433 = 0LL;
          else {
            uint64_t v433 = *(swift::Demangle::__runtime::Node **)(*(void *)a2 + 8LL);
          }
          std::string::append(this, "existential shape for ", 0x16uLL);
        }

        unsigned int v434 = v8 + 1;
LABEL_1809:
        std::string::append(this, "any ", 4uLL);
        __n128 result = 0LL;
        this[1].__r_.__value_.__s.__data_[7] = v430;
        return result;
      case 0x14F:
        BOOL v29 = "uniquable ";
        unint64_t v30 = this;
        std::string::size_type v31 = 10LL;
LABEL_297:
        std::string::append(v30, v29, v31);
        int v125 = *((unsigned __int8 *)a2 + 18);
        if (v125 != 5 || !*((_DWORD *)a2 + 2)) {
          goto LABEL_498;
        }
LABEL_300:
        a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_301:
        uint64_t v11 = *(swift::Demangle::__runtime::Node **)a2;
        goto LABEL_6;
      case 0x150:
        v341 = "unique existential shape symbolic reference 0x";
        uint64_t v342 = this;
        std::string::size_type v343 = 46LL;
        goto LABEL_1280;
      case 0x151:
        v341 = "non-unique existential shape symbolic reference 0x";
        uint64_t v342 = this;
        std::string::size_type v343 = 50LL;
        goto LABEL_1280;
      case 0x152:
        int v426 = *((unsigned __int8 *)a2 + 18);
        v427 = a2;
        if (v426 == 5 && *((_DWORD *)a2 + 2))
        {
          v427 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1174:
          uint64_t v428 = *(void *)v427;
        }

        else
        {
          uint64_t v428 = 0LL;
        }

        int v557 = *(unsigned __int16 *)(v428 + 16);
        std::string::append(this, "symbolic existential type (", 0x1BuLL);
        if (v557 == 336) {
          v558 = "";
        }
        else {
          v558 = "non-";
        }
        std::string::append(this, v558, 4LL * (v557 != 336));
        std::string::append(this, "unique) 0x", 0xAuLL);
        v559 = swift::Demangle::__runtime::DemanglerPrinter::writeHex(this, *(void *)v428);
        std::string::append(v559, " <", 2uLL);
        int v560 = *((unsigned __int8 *)a2 + 18);
        v561 = a2;
        if (v560 == 2) {
          goto LABEL_1605;
        }
        if (v560 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          v561 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1605:
          v562 = (swift::Demangle::__runtime::Node *)*((void *)v561 + 1);
        }

        else
        {
          v562 = 0LL;
        }

        unsigned int v563 = v8 + 1;
        if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u)
        {
          std::string::append(this, ", ", 2uLL);
          if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u) {
            v564 = *(swift::Demangle::__runtime::Node **)(*(void *)a2 + 16LL);
          }
          else {
            v564 = 0LL;
          }
        }

        uint64_t v276 = ">";
        goto LABEL_1498;
      case 0x153:
        uint64_t v276 = "metatypes-removed";
        goto LABEL_1434;
      case 0x154:
        uint64_t v276 = "#_hasSymbol query for ";
LABEL_1075:
        uint64_t v277 = this;
        std::string::size_type v278 = 22LL;
        goto LABEL_825;
      case 0x157:
        int v16 = "outlined enum tag store of ";
LABEL_311:
        unsigned int v32 = this;
        std::string::size_type v33 = 27LL;
        goto LABEL_312;
      case 0x158:
        int v16 = "outlined enum project data for load of ";
        unsigned int v32 = this;
        std::string::size_type v33 = 39LL;
        goto LABEL_312;
      case 0x159:
        int v16 = "outlined enum get tag of ";
        unsigned int v32 = this;
        std::string::size_type v33 = 25LL;
        goto LABEL_312;
      case 0x15A:
        int v16 = "async demotion of ";
LABEL_274:
        unsigned int v32 = this;
        std::string::size_type v33 = 18LL;
LABEL_312:
        std::string::append(v32, v16, v33);
LABEL_313:
        int v119 = *((unsigned __int8 *)a2 + 18);
        goto LABEL_5;
      case 0x15B:
        v341 = "objective-c protocol symbolic reference 0x";
        uint64_t v342 = this;
        std::string::size_type v343 = 42LL;
LABEL_1280:
        std::string::append(v342, v341, v343);
        swift::Demangle::__runtime::DemanglerPrinter::writeHex(this, *(void *)a2);
        goto LABEL_826;
      case 0x15C:
        std::string::append(this, "lifetime dependence: ", 0x15uLL);
        uint64_t v79 = a2;
        int v80 = **(unsigned __int8 **)v79;
        if (v80 == 115)
        {
          unint64_t v81 = "scope ";
          unint64_t v82 = this;
          std::string::size_type v83 = 6LL;
        }

        else
        {
          if (v80 != 105) {
            goto LABEL_537;
          }
          unint64_t v81 = "inherit ";
          unint64_t v82 = this;
          std::string::size_type v83 = 8LL;
        }

        std::string::append(v82, v81, v83);
LABEL_537:
        int v206 = *((unsigned __int8 *)a2 + 18);
        if (v206 == 2) {
          goto LABEL_541;
        }
        if (v206 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_541:
          uint64_t v11 = (swift::Demangle::__runtime::Node *)*((void *)a2 + 1);
          ++v8;
        }

        else
        {
LABEL_546:
          uint64_t v11 = 0LL;
          ++v8;
        }

        goto LABEL_7;
      case 0x15D:
        std::string::append(this, "(self lifetime dependence: ", 0x1BuLL);
        int v391 = *(unsigned __int8 *)a2;
        if (v391 == 115)
        {
          uint64_t v276 = "scope) ";
LABEL_1648:
          uint64_t v277 = this;
          std::string::size_type v278 = 7LL;
          goto LABEL_825;
        }

        if (v391 != 105) {
          goto LABEL_826;
        }
        uint64_t v276 = "inherit) ";
        goto LABEL_1802;
      case 0x162:
        int v384 = *((unsigned __int8 *)a2 + 18);
        unint64_t v385 = (swift::Demangle::__runtime::Node **)a2;
        if (v384 == 5 && *((_DWORD *)a2 + 2))
        {
          unint64_t v385 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_1034:
          uint64_t v386 = *v385;
        }

        else
        {
          uint64_t v386 = 0LL;
        }

        std::string::append(this, ": ~", 3uLL);
        v548 = a2;
        if (*((_BYTE *)a2 + 18) == 5) {
          v548 = *(swift::Demangle::__runtime::Node **)a2;
        }
        uint64_t v549 = **((void **)v548 + 1);
        if (v549 == 1)
        {
          std::string::append(this, "Swift.", 6uLL);
          uint64_t v276 = "Escapable";
          goto LABEL_1802;
        }

        if (!v549)
        {
          std::string::append(this, "Swift.", 6uLL);
          uint64_t v276 = "Copyable";
          goto LABEL_1770;
        }

        std::string::append(this, "Swift.<bit ", 0xBuLL);
        if (*((_BYTE *)a2 + 18) == 5) {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
        }
        uint64_t v277 = swift::Demangle::__runtime::DemanglerPrinter::operator<<(this, **((void **)a2 + 1));
        uint64_t v276 = ">";
        std::string::size_type v278 = 1LL;
        goto LABEL_825;
      default:
        printer_unreachable("bad node kind!");
    }
  }

swift::Demangle::__runtime::Node *anonymous namespace'::NodePrinter::printEntity( uint64_t a1, uint64_t *a2, int a3, int a4, int a5, int a6, const std::string::value_type *__s, size_t __n, unsigned int a9, std::string::value_type *__sa, std::string::size_type __na)
{
  std::string::size_type v11 = __n;
  int v12 = __s;
  int v17 = a2;
  if (*((_WORD *)a2 + 8) != 19)
  {
    unint64_t v19 = 0LL;
    if (!__n) {
      goto LABEL_22;
    }
    goto LABEL_15;
  }

  unint64_t v19 = 0LL;
  int v20 = *((unsigned __int8 *)a2 + 18);
  if (v20 == 1) {
    goto LABEL_12;
  }
  unint64_t v21 = a2;
  if (v20 != 2)
  {
    if (v20 != 5) {
      goto LABEL_8;
    }
    unsigned int v22 = *((_DWORD *)a2 + 2);
    if (v22 < 2)
    {
      unint64_t v19 = 0LL;
      if (v22) {
        goto LABEL_11;
      }
LABEL_21:
      int v17 = 0LL;
      if (!__n) {
        goto LABEL_22;
      }
      goto LABEL_15;
    }

    unint64_t v21 = (uint64_t *)*a2;
  }

  unint64_t v19 = v21[1];
LABEL_8:
  if (v20 == 2) {
    goto LABEL_12;
  }
  if (v20 != 5 || !*((_DWORD *)a2 + 2)) {
    goto LABEL_21;
  }
LABEL_11:
  int v17 = (uint64_t *)*a2;
LABEL_12:
  int v17 = (uint64_t *)*v17;
  if (!__n)
  {
LABEL_22:
    BOOL v24 = 0;
    if (a6) {
      goto LABEL_23;
    }
LABEL_29:
    int v26 = 0;
    goto LABEL_30;
  }

std::string *anonymous namespace'::NodePrinter::printChildren( std::string *this, swift::Demangle::__runtime::Node *a2, int a3, const char *a4)
{
  if (!a2) {
    return this;
  }
  __int128 v5 = (_anonymous_namespace_::NodePrinter *)this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  uint64_t v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      uint64_t v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_10;
    }

    uint64_t v7 = 0LL;
  }

  switch(v6)
  {
    case 1:
      char v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      goto LABEL_17;
    case 2:
      char v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      goto LABEL_17;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_10:
      char v9 = (swift::Demangle::__runtime::Node *)(v8 + 8LL * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        return this;
      }
      goto LABEL_17;
  }

  char v9 = 0LL;
  if (!v7) {
    return this;
  }
LABEL_17:
  unsigned int v10 = a3 + 1;
  do
  {
    std::string::size_type v11 = *(swift::Demangle::__runtime::Node **)v7;
    uint64_t v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (a4)
    {
      if (v7 != v9)
      {
        std::string::size_type v12 = strlen(a4);
        this = std::string::append((std::string *)v5, a4, v12);
      }
    }
  }

  while (v7 != v9);
  return this;
}

std::string *anonymous namespace'::operator<<(std::string *a1, uint64_t a2)
{
  int v4 = *(char *)(a2 + 23);
  if (v4 >= 0) {
    __int128 v5 = (std::string::value_type *)a2;
  }
  else {
    __int128 v5 = *(std::string::value_type **)a2;
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  if (v6)
  {
    while (2)
    {
      int v9 = *v5;
      switch(*v5)
      {
        case 0:
          uint64_t v7 = a1;
          uint64_t v8 = "\\0";
          goto LABEL_10;
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 11:
        case 12:
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
        case 32:
        case 33:
          goto LABEL_16;
        case 9:
          uint64_t v7 = a1;
          uint64_t v8 = "\\t";
          goto LABEL_10;
        case 10:
          uint64_t v7 = a1;
          uint64_t v8 = "\\n";
          goto LABEL_10;
        case 13:
          uint64_t v7 = a1;
          uint64_t v8 = "\\r";
          goto LABEL_10;
        case 34:
          uint64_t v7 = a1;
          uint64_t v8 = "\\";
          goto LABEL_10;
        default:
          if (v9 == 92)
          {
            uint64_t v7 = a1;
            uint64_t v8 = "\\\\"";
LABEL_10:
            std::string::append(v7, v8, 2uLL);
          }

          else
          {
LABEL_16:
            unint64_t v10 = *v5;
            if ((v9 - 127) > 0xA0u)
            {
              std::string::value_type v11 = *v5;
            }

            else
            {
              std::string::append(a1, "\\x", 2uLL);
            }

            std::string::push_back(a1, v11);
          }

          ++v5;
          if (--v6) {
            continue;
          }
          goto LABEL_23;
      }
    }
  }

void anonymous namespace'::NodePrinter::printFunctionType( std::string *this, swift::Demangle::__runtime::Node *a2, swift::Demangle::__runtime::Node *a3, int a4)
{
  __int128 v5 = a3;
  int v8 = *((unsigned __int8 *)a3 + 18);
  if (v8 != 2 && (v8 != 5 || *((_DWORD *)a3 + 2) <= 1u))
  {
    this[4].__r_.__value_.__s.__data_[1] = 0;
    return;
  }

  v56[0] = this;
  v56[1] = a3;
  int v57 = a4;
  unsigned int v9 = *((unsigned __int16 *)a3 + 8);
  if (v9 <= 0xA4)
  {
    if (v9 == 11)
    {
LABEL_9:
      std::string::append(this, "@autoclosure ", 0xDuLL);
      goto LABEL_18;
    }

    if (v9 != 22)
    {
      if (v9 != 64) {
        goto LABEL_18;
      }
      goto LABEL_9;
    }

    unint64_t v10 = "c";
    goto LABEL_17;
  }

  switch(v9)
  {
    case 0xA5u:
LABEL_16:
      unint64_t v10 = "block";
LABEL_17:
      break;
    case 0xA6u:
      std::string::append(this, "@escaping ", 0xAuLL);
      goto LABEL_16;
    case 0xDEu:
      std::string::append(this, "@convention(thin) ", 0x12uLL);
      break;
  }

void anonymous namespace'::NodePrinter::printFunctionParameters( std::string *this, swift::Demangle::__runtime::Node *a2, swift::Demangle::__runtime::Node *a3, int a4, int a5)
{
  char v27 = a2;
  int v26 = a4;
  unsigned __int8 v25 = a5;
  if (*((_WORD *)a3 + 8) != 3)
  {
    this[4].__r_.__value_.__s.__data_[1] = 0;
    return;
  }

  int v7 = *((unsigned __int8 *)a3 + 18);
  if (v7 == 5 && *((_DWORD *)a3 + 2))
  {
    a3 = *(swift::Demangle::__runtime::Node **)a3;
LABEL_6:
    int v8 = *(uint64_t **)a3;
    goto LABEL_9;
  }

  int v8 = 0LL;
LABEL_9:
  int v9 = *((unsigned __int8 *)v8 + 18);
  if ((v9 - 1) >= 2)
  {
    if (v9 != 5 || !*((_DWORD *)v8 + 2))
    {
      unint64_t v10 = 0LL;
      goto LABEL_15;
    }

    int v8 = (uint64_t *)*v8;
  }

  unint64_t v10 = (swift::Demangle::__runtime::Node **)*v8;
LABEL_15:
  unint64_t v11 = v10 + 2;
  if (*((_WORD *)v10 + 8) != 223)
  {
    if (a5)
    {
      std::string::push_back(this, 40);
      std::string::push_back(this, 41);
    }

    else
    {
      std::string::append(this, "(_:)", 4uLL);
    }

    return;
  }

  char v24 = &v27;
  int v23 = 0;
  if (!a2) {
    goto LABEL_24;
  }
  int v12 = *((unsigned __int8 *)a2 + 18);
  if ((v12 - 1) < 2)
  {
    BOOL v13 = 1;
    goto LABEL_25;
  }

  if (v12 == 5) {
    BOOL v13 = *((_DWORD *)a2 + 2) != 0;
  }
  else {
LABEL_24:
  }
    BOOL v13 = 0;
LABEL_25:
  BOOL v22 = v13;
  std::string::push_back(this, 40);
  int v14 = *((unsigned __int8 *)v10 + 18);
  uint64_t v15 = v10;
  if ((v14 - 1) >= 2)
  {
    if (v14 == 5)
    {
      unsigned int v16 = *v10;
      uint64_t v15 = (swift::Demangle::__runtime::Node **)*v10;
LABEL_33:
      unint64_t v11 = (swift::Demangle::__runtime::Node **)((char *)v16 + 8 * *((unsigned int *)v10 + 2));
      goto LABEL_36;
    }

    uint64_t v15 = 0LL;
  }

  switch(v14)
  {
    case 1:
      unint64_t v11 = v10 + 1;
      break;
    case 2:
      break;
    case 5:
      unsigned int v16 = *v10;
      goto LABEL_33;
    default:
      unint64_t v11 = 0LL;
      break;
  }

uint64_t anonymous namespace'::NodePrinter::getChildIf(uint64_t *a1, int a2)
{
  int v2 = *((unsigned __int8 *)a1 + 18);
  uint64_t v3 = a1;
  if ((v2 - 1) >= 2)
  {
    if (v2 == 5)
    {
      uint64_t v4 = *a1;
      uint64_t v3 = (uint64_t *)*a1;
      goto LABEL_9;
    }

    uint64_t v3 = 0LL;
  }

  switch(v2)
  {
    case 1:
      __int128 v5 = a1 + 1;
      if (v3 != a1 + 1) {
        goto LABEL_16;
      }
      break;
    case 2:
      __int128 v5 = a1 + 2;
      if (v3 != a1 + 2) {
        goto LABEL_16;
      }
      break;
    case 5:
      uint64_t v4 = *a1;
LABEL_9:
      __int128 v5 = (uint64_t *)(v4 + 8LL * *((unsigned int *)a1 + 2));
      if (v3 != v5) {
        goto LABEL_16;
      }
      break;
    default:
      __int128 v5 = 0LL;
      if (v3)
      {
LABEL_16:
        while (*(unsigned __int16 *)(*v3 + 16) != a2)
        {
          if (++v3 == v5)
          {
            uint64_t v3 = v5;
            goto LABEL_19;
          }
        }
      }

      break;
  }

void printer_unreachable(const char *a1)
{
}

std::string *anonymous namespace'::NodePrinter::printSpecializationPrefix( std::string *result, uint64_t *a2, const std::string::value_type *a3, std::string::size_type a4, int a5, const std::string::value_type *a6, std::string::size_type a7)
{
  int v7 = result;
  if (result[1].__r_.__value_.__s.__data_[5])
  {
    std::string::append(result, a3, a4);
    std::string::append(v7, " <", 2uLL);
    int v11 = *((unsigned __int8 *)a2 + 18);
    int v12 = a2;
    if ((v11 - 1) >= 2)
    {
      if (v11 == 5)
      {
        BOOL v13 = (uint64_t *)*a2;
        int v12 = (uint64_t *)*a2;
LABEL_12:
        int v14 = &v13[*((unsigned int *)a2 + 2)];
        if (v12 == v14) {
          return std::string::append(v7, "> of ", 5uLL);
        }
        goto LABEL_19;
      }

      int v12 = 0LL;
    }

    switch(v11)
    {
      case 1:
        int v14 = a2 + 1;
        if (v12 == a2 + 1) {
          return std::string::append(v7, "> of ", 5uLL);
        }
        break;
      case 2:
        int v14 = a2 + 2;
        if (v12 == a2 + 2) {
          return std::string::append(v7, "> of ", 5uLL);
        }
        break;
      case 5:
        BOOL v13 = (uint64_t *)*a2;
        goto LABEL_12;
      default:
        int v14 = 0LL;
        if (!v12) {
          return std::string::append(v7, "> of ", 5uLL);
        }
        break;
    }

std::string *swift::Demangle::__runtime::DemanglerPrinter::operator<<(std::string *a1, unsigned int a2)
{
  return a1;
}

std::string *anonymous namespace'::NodePrinter::printBoundGeneric( std::string *this, swift::Demangle::__runtime::Node *a2, int a3)
{
  uint64_t v4 = a2;
  __int128 v5 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 == 2)
  {
LABEL_6:
    if (this[1].__r_.__value_.__s.__data_[0])
    {
      int v8 = *((unsigned __int16 *)a2 + 8);
      if (v8 != 13)
      {
        if (v8 == 16)
        {
          int v9 = a2;
          if (v6 != 2)
          {
            if (*((_DWORD *)a2 + 2) < 2u) {
              goto LABEL_120;
            }
            int v9 = *(swift::Demangle::__runtime::Node **)a2;
          }

          uint64_t v10 = *((void *)v9 + 1);
          if (!v10)
          {
LABEL_120:
            std::string::append(v5, " as ", 4uLL);
            int v52 = *((unsigned __int8 *)v4 + 18);
            if ((v52 - 1) >= 2)
            {
              if (v52 != 5 || !*((_DWORD *)v4 + 2))
              {
                unint64_t v53 = 0LL;
              }

              uint64_t v4 = *(swift::Demangle::__runtime::Node **)v4;
            }

            unint64_t v53 = *(swift::Demangle::__runtime::Node **)v4;
          }

          int v11 = *(unsigned __int8 *)(v10 + 18);
          int v12 = (swift::Demangle::__runtime::Node **)v10;
          if ((v11 - 1) >= 2)
          {
            if (v11 == 5)
            {
              BOOL v13 = *(swift::Demangle::__runtime::Node **)v10;
              int v12 = *(swift::Demangle::__runtime::Node ***)v10;
LABEL_63:
              unsigned __int8 v28 = (swift::Demangle::__runtime::Node **)((char *)v13 + 8 * *(unsigned int *)(v10 + 8));
              goto LABEL_118;
            }

            int v12 = 0LL;
          }

          switch(v11)
          {
            case 1:
              unsigned __int8 v28 = (swift::Demangle::__runtime::Node **)(v10 + 8);
              break;
            case 2:
              unsigned __int8 v28 = (swift::Demangle::__runtime::Node **)(v10 + 16);
              break;
            case 5:
              BOOL v13 = *(swift::Demangle::__runtime::Node **)v10;
              goto LABEL_63;
            default:
              unsigned __int8 v28 = 0LL;
              break;
          }

std::string *anonymous namespace'::NodePrinter::printWithParens( _anonymous_namespace_::NodePrinter *this, swift::Demangle::__runtime::Node *a2, int a3)
{
  int v6 = a2;
  while (2)
  {
    unsigned int v7 = v6;
    switch(*((_WORD *)v6 + 8))
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 6:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0x16:
      case 0x17:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
      case 0x21:
      case 0x22:
      case 0x23:
      case 0x24:
      case 0x25:
      case 0x27:
      case 0x28:
      case 0x29:
      case 0x2A:
      case 0x2B:
      case 0x2E:
      case 0x2F:
      case 0x30:
      case 0x31:
      case 0x32:
      case 0x33:
      case 0x34:
      case 0x35:
      case 0x36:
      case 0x37:
      case 0x38:
      case 0x3A:
      case 0x3B:
      case 0x3C:
      case 0x3E:
      case 0x40:
      case 0x41:
      case 0x42:
      case 0x43:
      case 0x44:
      case 0x46:
      case 0x47:
      case 0x48:
      case 0x49:
      case 0x4A:
      case 0x4B:
      case 0x4C:
      case 0x4D:
      case 0x4E:
      case 0x4F:
      case 0x50:
      case 0x51:
      case 0x52:
      case 0x53:
      case 0x56:
      case 0x57:
      case 0x58:
      case 0x59:
      case 0x5A:
      case 0x5B:
      case 0x5C:
      case 0x5D:
      case 0x5E:
      case 0x5F:
      case 0x60:
      case 0x61:
      case 0x62:
      case 0x63:
      case 0x64:
      case 0x65:
      case 0x66:
      case 0x67:
      case 0x68:
      case 0x69:
      case 0x6A:
      case 0x6B:
      case 0x6C:
      case 0x6D:
      case 0x6E:
      case 0x6F:
      case 0x70:
      case 0x71:
      case 0x72:
      case 0x73:
      case 0x74:
      case 0x75:
      case 0x76:
      case 0x77:
      case 0x78:
      case 0x79:
      case 0x7A:
      case 0x7B:
      case 0x7C:
      case 0x7D:
      case 0x7E:
      case 0x7F:
      case 0x80:
      case 0x81:
      case 0x82:
      case 0x83:
      case 0x84:
      case 0x85:
      case 0x86:
      case 0x87:
      case 0x88:
      case 0x89:
      case 0x8A:
      case 0x8B:
      case 0x8C:
      case 0x8D:
      case 0x8E:
      case 0x8F:
      case 0x90:
      case 0x93:
      case 0x94:
      case 0x95:
      case 0x96:
      case 0x97:
      case 0x98:
      case 0x9A:
      case 0x9B:
      case 0x9C:
      case 0x9D:
      case 0x9E:
      case 0x9F:
      case 0xA0:
      case 0xA1:
      case 0xA2:
      case 0xA3:
      case 0xA4:
      case 0xA5:
      case 0xA6:
      case 0xA8:
      case 0xA9:
      case 0xAA:
      case 0xAB:
      case 0xAC:
      case 0xAD:
      case 0xAE:
      case 0xAF:
      case 0xB0:
      case 0xB1:
      case 0xB2:
      case 0xB3:
      case 0xB6:
      case 0xB7:
      case 0xB8:
      case 0xB9:
      case 0xBA:
      case 0xBB:
      case 0xBC:
      case 0xBD:
      case 0xBF:
      case 0xC1:
      case 0xC2:
      case 0xC3:
      case 0xC4:
      case 0xC5:
      case 0xC6:
      case 0xC7:
      case 0xC8:
      case 0xC9:
      case 0xCA:
      case 0xCB:
      case 0xCC:
      case 0xCD:
      case 0xCE:
      case 0xD0:
      case 0xD1:
      case 0xD4:
      case 0xD5:
      case 0xD6:
      case 0xD7:
      case 0xD8:
      case 0xD9:
      case 0xDA:
      case 0xDC:
      case 0xDD:
      case 0xDE:
      case 0xE0:
      case 0xE5:
      case 0xE6:
      case 0xE7:
      case 0xEC:
      case 0xED:
      case 0xEE:
      case 0xEF:
      case 0xF0:
      case 0xF1:
      case 0xF2:
      case 0xF3:
      case 0xF4:
      case 0xF5:
      case 0xF6:
      case 0xF7:
      case 0xF8:
      case 0xF9:
      case 0xFA:
      case 0xFB:
      case 0xFC:
      case 0xFD:
      case 0xFE:
      case 0xFF:
      case 0x100:
      case 0x101:
      case 0x102:
      case 0x103:
      case 0x104:
      case 0x105:
      case 0x106:
      case 0x107:
      case 0x108:
      case 0x109:
      case 0x10A:
      case 0x10B:
      case 0x10C:
      case 0x10D:
      case 0x10E:
      case 0x10F:
      case 0x110:
      case 0x111:
      case 0x112:
      case 0x113:
      case 0x114:
      case 0x115:
      case 0x116:
      case 0x117:
      case 0x118:
      case 0x119:
      case 0x11A:
      case 0x11B:
      case 0x11C:
      case 0x11D:
      case 0x11E:
      case 0x11F:
      case 0x120:
      case 0x121:
      case 0x123:
      case 0x124:
      case 0x125:
      case 0x126:
      case 0x12B:
      case 0x12C:
      case 0x12D:
      case 0x12E:
      case 0x12F:
      case 0x130:
      case 0x131:
      case 0x132:
      case 0x133:
      case 0x134:
      case 0x135:
      case 0x136:
      case 0x137:
      case 0x138:
      case 0x139:
      case 0x13A:
      case 0x13B:
      case 0x13C:
      case 0x13D:
      case 0x13E:
      case 0x13F:
      case 0x140:
      case 0x141:
      case 0x142:
      case 0x143:
      case 0x144:
      case 0x145:
      case 0x146:
      case 0x147:
      case 0x148:
      case 0x149:
      case 0x14A:
      case 0x14B:
      case 0x14C:
      case 0x14D:
      case 0x14E:
      case 0x14F:
      case 0x150:
      case 0x151:
      case 0x152:
      case 0x153:
      case 0x154:
      case 0x155:
      case 0x156:
      case 0x157:
      case 0x158:
      case 0x159:
      case 0x15A:
      case 0x15B:
      case 0x15C:
      case 0x15D:
      case 0x15E:
      case 0x15F:
      case 0x160:
      case 0x161:
      case 0x162:
        goto LABEL_33;
      case 4:
      case 5:
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x18:
      case 0x26:
      case 0x2C:
      case 0x2D:
      case 0x39:
      case 0x3D:
      case 0x3F:
      case 0x45:
      case 0x54:
      case 0x55:
      case 0x91:
      case 0x92:
      case 0x99:
      case 0xA7:
      case 0xB4:
      case 0xB5:
      case 0xCF:
      case 0xD2:
      case 0xD3:
      case 0xDB:
      case 0xDF:
      case 0xE1:
      case 0xE2:
      case 0xE3:
      case 0xE4:
      case 0xE9:
      case 0xEA:
      case 0xEB:
      case 0x122:
      case 0x127:
      case 0x128:
      case 0x129:
      case 0x12A:
      case 0xBE:
        int v9 = *((unsigned __int8 *)v6 + 18);
        if (v9 == 5 && *((_DWORD *)v6 + 2))
        {
          unsigned int v7 = *(swift::Demangle::__runtime::Node **)v6;
LABEL_12:
          uint64_t v10 = *(swift::Demangle::__runtime::Node **)v7;
        }

        else
        {
          uint64_t v10 = 0LL;
        }

        int v13 = *((unsigned __int8 *)v10 + 18);
        if (v13 == 2 || v13 == 5 && *((_DWORD *)v10 + 2) >= 2u) {
          goto LABEL_33;
        }
      case 0xC0:
        int v11 = *((unsigned __int8 *)v6 + 18);
        if (v11 == 5 && *((_DWORD *)v6 + 2))
        {
          unsigned int v7 = *(swift::Demangle::__runtime::Node **)v6;
LABEL_17:
          int v12 = *(swift::Demangle::__runtime::Node **)v7;
        }

        else
        {
          int v12 = 0LL;
        }

        int v14 = *((unsigned __int8 *)v12 + 18);
        if (v14 == 5 && *((_DWORD *)v12 + 2))
        {
          int v12 = *(swift::Demangle::__runtime::Node **)v12;
LABEL_28:
          int v15 = *(swift::Demangle::__runtime::Node **)v12;
        }

        else
        {
          int v15 = 0LL;
        }

        int v16 = *((unsigned __int8 *)v15 + 18);
LABEL_33:
        std::string::append((std::string *)this, "(", 1uLL);
        return std::string::append((std::string *)this, ")", 1uLL);
      case 0xE8:
        int v8 = *((unsigned __int8 *)v6 + 18);
        int v6 = 0LL;
        if (v8 == 5)
        {
          int v6 = 0LL;
          if (*((_DWORD *)v7 + 2))
          {
            unsigned int v7 = *(swift::Demangle::__runtime::Node **)v7;
LABEL_7:
            int v6 = *(swift::Demangle::__runtime::Node **)v7;
          }
        }

        continue;
      default:
        printer_unreachable("bad node kind");
    }
  }

swift::Demangle::__runtime::Node *anonymous namespace'::NodePrinter::printAbstractStorage( uint64_t a1, uint64_t a2, int a3, int a4, const std::string::value_type *a5, size_t a6)
{
  int v6 = *(unsigned __int16 *)(a2 + 16);
  if (v6 == 220) {
  if (v6 != 254)
  }
    printer_unreachable("Not an abstract storage node");
}

void anonymous namespace'::NodePrinter::printImplFunctionType( _anonymous_namespace_::NodePrinter *this, swift::Demangle::__runtime::Node *a2, int a3)
{
  int v32 = a3;
  uint64_t v30 = 0LL;
  uint64_t v31 = 0LL;
  int v29 = 0;
  v28[0] = &v29;
  v28[1] = (int *)&v31;
  v28[2] = (int *)this;
  void v28[3] = &v32;
  void v28[4] = (int *)&v30;
  int v4 = *((unsigned __int8 *)a2 + 18);
  __int128 v5 = a2;
  if ((v4 - 1) >= 2)
  {
    if (v4 == 5)
    {
      uint64_t v6 = *(void *)a2;
      __int128 v5 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }

    __int128 v5 = 0LL;
  }

  if (v4 == 1)
  {
    unsigned int v7 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
    goto LABEL_14;
  }

  if (v4 == 2)
  {
    unsigned int v7 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
    goto LABEL_29;
  }

  if (v4 != 5)
  {
    unsigned int v7 = 0LL;
    if (v5) {
      goto LABEL_14;
    }
LABEL_29:
    int v9 = 0LL;
    goto LABEL_30;
  }

  uint64_t v6 = *(void *)a2;
LABEL_9:
  unsigned int v7 = (swift::Demangle::__runtime::Node *)(v6 + 8LL * *((unsigned int *)a2 + 2));
  if (v5 == v7) {
    goto LABEL_29;
  }
LABEL_14:
  int v8 = 0LL;
  do
  {
    int v9 = *(swift::Demangle::__runtime::Node ***)v5;
    switch(*(_WORD *)(*(void *)v5 + 16LL))
    {
      case 'm':
        uint64_t v30 = *(swift::Demangle::__runtime::Node ***)v5;
        break;
      case 't':
        goto LABEL_17;
      case 'v':
        if (v29 == 1) {
          std::string::append((std::string *)this, ", ", 2uLL);
        }
        int v10 = 1;
        goto LABEL_26;
      case 'w':
        uint64_t v31 = *(swift::Demangle::__runtime::Node ***)v5;
        break;
      case 'x':
      case 'y':
      case 'z':
        if (v29 == 2) {
          std::string::append((std::string *)this, ", ", 2uLL);
        }
        int v10 = 2;
LABEL_26:
        break;
      default:
        std::string::push_back((std::string *)this, 32);
        break;
    }

    int v9 = v8;
LABEL_17:
    __int128 v5 = (swift::Demangle::__runtime::Node *)((char *)v5 + 8);
    int v8 = v9;
  }

  while (v5 != v7);
LABEL_30:
  std::string::push_back((std::string *)this, 41);
  if (!v31) {
    goto LABEL_52;
  }
  std::string::append((std::string *)this, " for <", 6uLL);
  int v11 = v31;
  int v12 = *((unsigned __int8 *)v31 + 18);
  if (v12 != 2)
  {
    if (v12 != 5 || *((_DWORD *)v31 + 2) < 2u) {
      goto LABEL_51;
    }
    int v11 = *v31;
  }

  uint64_t v13 = v11[1];
  if (v13)
  {
    int v14 = *(unsigned __int8 *)(v13 + 18);
    int v15 = (swift::Demangle::__runtime::Node **)v13;
    if ((v14 - 1) >= 2)
    {
      if (v14 == 5)
      {
        int v16 = *(swift::Demangle::__runtime::Node **)v13;
        int v15 = *(swift::Demangle::__runtime::Node ***)v13;
LABEL_44:
        int v17 = (swift::Demangle::__runtime::Node **)((char *)v16 + 8 * *(unsigned int *)(v13 + 8));
        goto LABEL_48;
      }

      int v15 = 0LL;
    }

    switch(v14)
    {
      case 1:
        int v17 = (swift::Demangle::__runtime::Node **)(v13 + 8);
        break;
      case 2:
        int v17 = (swift::Demangle::__runtime::Node **)(v13 + 16);
        break;
      case 5:
        int v16 = *(swift::Demangle::__runtime::Node **)v13;
        goto LABEL_44;
      default:
        int v17 = 0LL;
        break;
    }

void anonymous namespace'::NodePrinter::printGenericSignature( std::string *this, swift::Demangle::__runtime::Node *a2, int a3)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  unsigned int v7 = v6 - 1;
  int v47 = a3;
  if (v6 == 1)
  {
    unsigned int v8 = 1;
    goto LABEL_7;
  }

  if (v6 != 5)
  {
    if (v6 != 2) {
      goto LABEL_106;
    }
    unsigned int v8 = 2;
LABEL_7:
    uint64_t v9 = 0LL;
    LODWORD(v10) = v8;
    while (1)
    {
      int v11 = a2;
      if (v7 >= 2) {
        int v11 = *(swift::Demangle::__runtime::Node **)a2;
      }
      if (*(_WORD *)(*((void *)v11 + v9) + 16LL) != 37) {
        goto LABEL_14;
      }
      if (v8 == ++v9)
      {
        unsigned int v48 = v8;
        LODWORD(v9) = v8;
        goto LABEL_35;
      }
    }
  }

  unsigned int v8 = *((_DWORD *)a2 + 2);
  if (v8) {
    goto LABEL_7;
  }
  LODWORD(v9) = 0;
LABEL_14:
  unsigned int v48 = v8;
  if (v9 >= v8)
  {
    LODWORD(v10) = v9;
    if (!(_DWORD)v9) {
      goto LABEL_92;
    }
    goto LABEL_35;
  }

  unint64_t v10 = v9;
  do
  {
    unint64_t v12 = *((unsigned __int8 *)a2 + 18);
    if (v6 == 1) {
      goto LABEL_19;
    }
    if (v6 != 5)
    {
      unint64_t v12 = 2LL;
LABEL_19:
      if (v12 <= v10) {
        goto LABEL_24;
      }
      goto LABEL_20;
    }

    if (*((unsigned int *)a2 + 2) <= v10)
    {
LABEL_24:
      int v14 = 0LL;
      goto LABEL_25;
    }

uint64_t std::function<std::string ()(unsigned long long,unsigned long long)>::operator()( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = a3;
  uint64_t v11 = a2;
  uint64_t v3 = *(void *)(a1 + 24);
  if (v3) {
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v3 + 48LL))(v3, &v11, &v10);
  }
  std::__throw_bad_function_call[abi:nn180100]();
}

std::string *anonymous namespace'::NodePrinter::printChildren( std::string *this, swift::Demangle::__runtime::Node *const *a2, swift::Demangle::__runtime::Node *const *a3, int a4, const char *a5)
{
  if (a2 != a3)
  {
    unsigned int v7 = a2;
    unsigned int v8 = (_anonymous_namespace_::NodePrinter *)this;
    unsigned int v9 = a4 + 1;
    do
    {
      uint64_t v10 = *v7++;
      if (a5)
      {
        if (v7 != a3)
        {
          std::string::size_type v11 = strlen(a5);
          this = std::string::append((std::string *)v8, a5, v11);
        }
      }
    }

    while (v7 != a3);
  }

  return this;
}

void anonymous namespace'::NodePrinter::printEntityType( _anonymous_namespace_::NodePrinter *this, swift::Demangle::__runtime::Node *a2, swift::Demangle::__runtime::Node *a3, unint64_t a4, int a5)
{
  unsigned int v7 = a3;
  int v9 = *((unsigned __int8 *)a2 + 18);
  uint64_t v10 = a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      uint64_t v11 = *(void *)a2;
      uint64_t v10 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }

    uint64_t v10 = 0LL;
  }

  switch(v9)
  {
    case 1:
      unint64_t v12 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      break;
    case 2:
      unint64_t v12 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      break;
    case 5:
      uint64_t v11 = *(void *)a2;
LABEL_9:
      unint64_t v12 = (swift::Demangle::__runtime::Node *)(v11 + 8LL * *((unsigned int *)a2 + 2));
      if (v10 != v12) {
        goto LABEL_16;
      }
      break;
    default:
      unint64_t v12 = 0LL;
      if (v10)
      {
LABEL_16:
        while (*(_WORD *)(*(void *)v10 + 16LL) != 290)
        {
          uint64_t v10 = (swift::Demangle::__runtime::Node *)((char *)v10 + 8);
          if (v10 == v12)
          {
            uint64_t v10 = v12;
            goto LABEL_19;
          }
        }
      }

      break;
  }

std::string *anonymous namespace'::NodePrinter::printFunctionType(swift::Demangle::__runtime::Node *,swift::Demangle::__runtime::Node *,unsigned int)::{lambda(char const*)#1}::operator()( uint64_t a1, const char *a2)
{
  int v4 = *(std::string **)a1;
  std::string::append(*(std::string **)a1, "@convention(", 0xCuLL);
  if (a2) {
    std::string::size_type v5 = strlen(a2);
  }
  else {
    std::string::size_type v5 = 0LL;
  }
  std::string::append(v4, a2, v5);
  int v6 = *(unsigned __int8 **)(a1 + 8);
  if (*(_WORD *)(*(void *)v6 + 16LL) == 23)
  {
    std::string::append(v4, ", mangledCType: ", 0x11uLL);
    unsigned int v7 = *(swift::Demangle::__runtime::Node **)(a1 + 8);
    int v8 = *((unsigned __int8 *)v7 + 18);
    if ((v8 - 1) >= 2)
    {
      if (v8 != 5 || !*((_DWORD *)v7 + 2))
      {
        int v9 = 0LL;
        goto LABEL_13;
      }

      unsigned int v7 = *(swift::Demangle::__runtime::Node **)v7;
    }

    int v9 = *(swift::Demangle::__runtime::Node **)v7;
LABEL_13:
    std::string::push_back(v4, 34);
  }

  return std::string::append(v4, ") ", 2uLL);
}

void anonymous namespace'::NodePrinter::printFunctionParameters(swift::Demangle::__runtime::Node *,swift::Demangle::__runtime::Node *,unsigned int,BOOL)::{lambda(swift::Demangle::__runtime::Node *)#1}::operator()( uint64_t a1, swift::Demangle::__runtime::Node *a2)
{
  int v4 = *(std::string **)(a1 + 8);
  if (!**(_BYTE **)a1)
  {
    if (**(_BYTE **)(a1 + 32)) {
      goto LABEL_63;
    }
    int v10 = *((unsigned __int8 *)a2 + 18);
    uint64_t v11 = a2;
    if ((v10 - 1) >= 2)
    {
      if (v10 == 5)
      {
        uint64_t v12 = *(void *)a2;
        uint64_t v11 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_42:
        BOOL v22 = (swift::Demangle::__runtime::Node *)(v12 + 8LL * *((unsigned int *)a2 + 2));
        goto LABEL_46;
      }

      uint64_t v11 = 0LL;
    }

    switch(v10)
    {
      case 1:
        BOOL v22 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
        break;
      case 2:
        BOOL v22 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
        break;
      case 5:
        uint64_t v12 = *(void *)a2;
        goto LABEL_42;
      default:
        BOOL v22 = 0LL;
        break;
    }

void anonymous namespace'::NodePrinter::printFunctionSigSpecializationParams( std::string *this, swift::Demangle::__runtime::Node *a2, int a3)
{
  unsigned int v6 = *((unsigned __int8 *)a2 + 18);
  switch(v6)
  {
    case 1u:
      goto LABEL_6;
    case 5u:
      unsigned int v6 = *((_DWORD *)a2 + 2);
      if (!v6) {
        return;
      }
LABEL_6:
      LODWORD(v7) = 0;
      unsigned int v8 = a3 + 1;
      int v9 = "[";
      int v10 = " : ";
      unsigned int v92 = a3 + 1;
      while (2)
      {
        unint64_t v12 = *((unsigned __int8 *)a2 + 18);
        if ((v12 - 1) >= 2)
        {
          char v13 = 0;
          size_t v14 = *(swift::Demangle::__runtime::Node **)a2;
        }

        else
        {
          char v13 = 1;
          size_t v14 = a2;
        }

        switch(**((_DWORD **)v14 + v7))
        {
          case 0:
          case 1:
            std::string::append(this, v9, 1uLL);
            unint64_t v17 = *((unsigned __int8 *)a2 + 18);
            unsigned int v18 = v17 - 1;
            switch((_DWORD)v17)
            {
              case 1:
                goto LABEL_27;
              case 5:
                break;
              case 2:
                unint64_t v17 = 2LL;
LABEL_27:
                if (v17 <= v7)
                {
LABEL_69:
                  unint64_t v20 = 0LL;
                  goto LABEL_70;
                }

                break;
              default:
                goto LABEL_69;
            }

            uint64_t v19 = a2;
            if (v18 >= 2) {
              uint64_t v19 = *(swift::Demangle::__runtime::Node **)a2;
            }
            unint64_t v20 = (swift::Demangle::__runtime::Node *)*((void *)v19 + v7);
LABEL_70:
            std::string::append(this, v10, 3uLL);
            unint64_t v37 = a2;
            uint64_t v38 = v3;
            uint64_t v39 = v10;
            uint64_t v40 = v9;
            uint64_t v41 = *((void *)v37 + (v7 + 1));
            unsigned int v42 = *(std::string::value_type **)v41;
            unint64_t v43 = *(void *)(v41 + 8);
            char v93 = 0;
            uint64_t v94 = 0x101010101010101LL;
            char v95 = 1;
            int v96 = 0;
            int v97 = 16843009;
            char v98 = 1;
            __int16 v99 = 256;
            char v100 = 1;
            uint64_t v101 = 0LL;
            uint64_t v102 = 0LL;
            v103[0] = &unk_189B8B0E8;
            v103[1] = swift::Demangle::__runtime::genericParameterName;
            int v104 = v103;
            swift::Demangle::__runtime::demangleSymbolAsString(v42, v43, (uint64_t)&v93, v105);
            unint64_t v44 = v104;
            if (v104 == v103)
            {
              unint64_t v44 = v103;
              uint64_t v45 = 4LL;
LABEL_76:
              (*(void (**)(void))(*v44 + 8 * v45))();
            }

            else if (v104)
            {
              uint64_t v45 = 5LL;
              goto LABEL_76;
            }

            if ((v106 & 0x80u) == 0) {
              std::string::size_type v46 = v106;
            }
            else {
              std::string::size_type v46 = (std::string::size_type)v105[1];
            }
            if (v46)
            {
              if ((v106 & 0x80u) == 0) {
                int v47 = (const std::string::value_type *)v105;
              }
              else {
                int v47 = (const std::string::value_type *)v105[0];
              }
              unsigned int v48 = this;
            }

            else
            {
              unsigned int v48 = this;
              int v47 = v42;
              std::string::size_type v46 = v43;
            }

            std::string::append(v48, v47, v46);
            int v9 = v40;
            int v10 = v39;
            uint64_t v3 = v38;
            unsigned int v8 = v92;
            std::string::append(this, "]", 1uLL);
            LODWORD(v7) = v7 + 2;
            goto LABEL_10;
          case 2:
          case 3:
            std::string::append(this, v9, 1uLL);
            unint64_t v21 = *((unsigned __int8 *)a2 + 18);
            unsigned int v22 = v21 - 1;
            switch((_DWORD)v21)
            {
              case 1:
                goto LABEL_35;
              case 5:
                break;
              case 2:
                unint64_t v21 = 2LL;
LABEL_35:
                if (v21 > v7)
                {
LABEL_36:
                  int v23 = a2;
                  if (v22 >= 2) {
                    int v23 = *(swift::Demangle::__runtime::Node **)a2;
                  }
                  unint64_t v24 = (swift::Demangle::__runtime::Node *)*((void *)v23 + v7);
LABEL_91:
                  std::string::append(this, v10, 3uLL);
                  int v49 = *((unsigned __int8 *)a2 + 18);
                  if (v49 != 2)
                  {
                    if (v49 == 5)
                    {
                      unint64_t v50 = *((unsigned int *)a2 + 2);
                      goto LABEL_95;
                    }

                    goto LABEL_7;
                  }

                  unint64_t v50 = *((unsigned __int8 *)a2 + 18);
LABEL_95:
                  unint64_t v51 = (v7 + 1);
                  if (v50 <= v51)
                  {
LABEL_7:
                    uint64_t v11 = 0LL;
                  }

                  else
                  {
                    unsigned int v52 = v49 - 1;
                    unint64_t v53 = a2;
                    if (v52 >= 2) {
                      unint64_t v53 = *(swift::Demangle::__runtime::Node **)a2;
                    }
                    uint64_t v11 = (swift::Demangle::__runtime::Node *)*((void *)v53 + v51);
                  }

                  LODWORD(v7) = v7 + 2;
                  goto LABEL_9;
                }

                break;
            }

            unint64_t v24 = 0LL;
            goto LABEL_91;
          case 4:
            std::string::append(this, v9, 1uLL);
            unint64_t v25 = *((unsigned __int8 *)a2 + 18);
            unsigned int v26 = v25 - 1;
            switch((_DWORD)v25)
            {
              case 1:
                goto LABEL_48;
              case 5:
                break;
              case 2:
                unint64_t v25 = 2LL;
LABEL_48:
                if (v25 <= v7)
                {
LABEL_100:
                  std::string::size_type v28 = 0LL;
                  goto LABEL_101;
                }

                break;
              default:
                goto LABEL_100;
            }

            char v27 = a2;
            if (v26 >= 2) {
              char v27 = *(swift::Demangle::__runtime::Node **)a2;
            }
            std::string::size_type v28 = (swift::Demangle::__runtime::Node *)*((void *)v27 + v7);
LABEL_101:
            std::string::append(this, v10, 3uLL);
            int v54 = *((unsigned __int8 *)a2 + 18);
            if (v54 == 2)
            {
              unint64_t v55 = *((unsigned __int8 *)a2 + 18);
            }

            else
            {
              if (v54 != 5) {
                goto LABEL_109;
              }
              unint64_t v55 = *((unsigned int *)a2 + 2);
            }

            unint64_t v56 = (v7 + 1);
            if (v55 > v56)
            {
              unsigned int v57 = v54 - 1;
              int v58 = a2;
              if (v57 >= 2) {
                int v58 = *(swift::Demangle::__runtime::Node **)a2;
              }
              int v59 = (swift::Demangle::__runtime::Node *)*((void *)v58 + v56);
LABEL_110:
              std::string::append(this, "'", 1uLL);
              unint64_t v60 = *((unsigned __int8 *)a2 + 18);
              unsigned int v61 = v60 - 1;
              if ((_DWORD)v60 != 1)
              {
                if ((_DWORD)v60 == 5)
                {
                  unint64_t v60 = *((unsigned int *)a2 + 2);
                }

                else
                {
                  if ((_DWORD)v60 != 2) {
                    goto LABEL_150;
                  }
                  unint64_t v60 = 2LL;
                }
              }

              unint64_t v77 = (v7 + 2);
              if (v60 > v77)
              {
                int v78 = a2;
                if (v61 >= 2) {
                  int v78 = *(swift::Demangle::__runtime::Node **)a2;
                }
                int v79 = (swift::Demangle::__runtime::Node *)*((void *)v78 + v77);
                goto LABEL_151;
              }

std::string *anonymous namespace'::NodePrinter::printBoundGenericNoSugar( std::string *this, swift::Demangle::__runtime::Node *a2, int a3)
{
  uint64_t v3 = this;
  int v4 = *((unsigned __int8 *)a2 + 18);
  if (v4 == 2)
  {
LABEL_6:
    uint64_t v5 = *((void *)a2 + 1);
    unsigned int v6 = a3 + 1;
    std::string::append(v3, "<", 1uLL);
    if (v5)
    {
      int v7 = *(unsigned __int8 *)(v5 + 18);
      unsigned int v8 = (swift::Demangle::__runtime::Node **)v5;
      if ((v7 - 1) >= 2)
      {
        if (v7 == 5)
        {
          int v9 = *(swift::Demangle::__runtime::Node **)v5;
          unsigned int v8 = *(swift::Demangle::__runtime::Node ***)v5;
          goto LABEL_15;
        }

        unsigned int v8 = 0LL;
      }

      switch(v7)
      {
        case 1:
          int v10 = (swift::Demangle::__runtime::Node **)(v5 + 8);
          if (v8 == (swift::Demangle::__runtime::Node **)(v5 + 8)) {
            return std::string::append(v3, ">", 1uLL);
          }
          goto LABEL_22;
        case 2:
          int v10 = (swift::Demangle::__runtime::Node **)(v5 + 16);
          if (v8 == (swift::Demangle::__runtime::Node **)(v5 + 16)) {
            return std::string::append(v3, ">", 1uLL);
          }
          goto LABEL_22;
        case 5:
          int v9 = *(swift::Demangle::__runtime::Node **)v5;
LABEL_15:
          int v10 = (swift::Demangle::__runtime::Node **)((char *)v9 + 8 * *(unsigned int *)(v5 + 8));
          if (v8 == v10) {
            return std::string::append(v3, ">", 1uLL);
          }
LABEL_22:
          unint64_t v12 = *v8;
          uint64_t v11 = v8 + 1;
          while (v11 != v10)
          {
            std::string::append(v3, ", ", 2uLL);
            char v13 = *v11++;
          }

          return std::string::append(v3, ">", 1uLL);
      }

      int v10 = 0LL;
      if (v8) {
        goto LABEL_22;
      }
    }

    return std::string::append(v3, ">", 1uLL);
  }

  if (v4 == 5 && *((_DWORD *)a2 + 2) >= 2u)
  {
    a2 = *(swift::Demangle::__runtime::Node **)a2;
    goto LABEL_6;
  }

  return this;
}

void anonymous namespace'::NodePrinter::printImplFunctionType(swift::Demangle::__runtime::Node *,unsigned int)::{lambda(anonymous namespace'::NodePrinter::printImplFunctionType(swift::Demangle::__runtime::Node *,unsigned int)::State)#1}::operator()( int **a1, int a2)
{
  int v2 = **a1;
  if (v2 != a2)
  {
    uint64_t v5 = (std::string *)a1[2];
    while (1)
    {
      if (v2)
      {
        if (v2 != 1)
        {
          if (v2 == 2) {
            printer_unreachable("no state after Results");
          }
          printer_unreachable("bad state");
        }

        std::string::append(v5, ") -> ", 5uLL);
        unsigned int v6 = *(swift::Demangle::__runtime::Node **)a1[4];
        if (v6)
        {
          std::string::append(v5, " ", 1uLL);
        }

        std::string::append(v5, "(", 1uLL);
        goto LABEL_5;
      }

      if (*(void *)a1[1]) {
        break;
      }
LABEL_18:
      std::string::push_back(v5, 40);
LABEL_5:
      int v2 = ++**a1;
      if (v2 == a2) {
        return;
      }
    }

    std::string::append(v5, "@substituted ", 0xDuLL);
    int v7 = *(swift::Demangle::__runtime::Node **)a1[1];
    int v8 = *((unsigned __int8 *)v7 + 18);
    if ((v8 - 1) >= 2)
    {
      if (v8 != 5 || !*((_DWORD *)v7 + 2))
      {
        int v9 = 0LL;
        goto LABEL_17;
      }

      int v7 = *(swift::Demangle::__runtime::Node **)v7;
    }

    int v9 = *(swift::Demangle::__runtime::Node **)v7;
LABEL_17:
    std::string::push_back(v5, 32);
    goto LABEL_18;
  }

char *std::vector<std::string>::__push_back_slow_path<std::string>(void **a1, uint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL) {
    abort();
  }
  if (0x5555555555555556LL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v3) {
    unint64_t v3 = 0x5555555555555556LL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555LL) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v3;
  }
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    int v7 = (char *)operator new(24 * v6);
  }

  else
  {
    int v7 = 0LL;
  }

  int v8 = &v7[24 * v2];
  int v9 = &v7[24 * v6];
  *(_OWORD *)int v8 = *(_OWORD *)a2;
  *((void *)v8 + 2) = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)a2 = 0LL;
  int v10 = v8 + 24;
  uint64_t v11 = (void **)*a1;
  unint64_t v12 = (void **)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
  }

  else
  {
    do
    {
      __int128 v13 = *(_OWORD *)(v12 - 3);
      *((void *)v8 - 1) = *(v12 - 1);
      *(_OWORD *)(v8 - 24) = v13;
      v8 -= 24;
      *(v12 - 2) = 0LL;
      *(v12 - 1) = 0LL;
      *(v12 - 3) = 0LL;
      v12 -= 3;
    }

    while (v12 != v11);
    unint64_t v12 = (void **)*a1;
    size_t v14 = (void **)a1[1];
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    while (v14 != v12)
    {
      v14 -= 3;
    }
  }

  if (v12) {
    operator delete(v12);
  }
  return v10;
}

uint64_t swift::Punycode::__runtime::decodePunycode( unsigned __int8 *a1, unint64_t a2, std::vector<unsigned int> *this)
{
  unint64_t v3 = this;
  unint64_t v4 = a2;
  std::vector<unsigned int>::pointer begin = this->__begin_;
  this->__end_ = this->__begin_;
  if (a2 > this->__end_cap_.__value_ - begin)
  {
    if (a2 >> 62) {
LABEL_71:
    }
      abort();
    uint64_t v7 = a2;
    int v8 = (unsigned int *)operator new(4 * a2);
    v3->__begin_ = v8;
    v3->__end_ = v8;
    v3->__end_cap_.__value_ = &v8[v7];
    if (begin) {
      operator delete(begin);
    }
  }

  std::vector<unsigned int>::value_type __x = 128;
  unint64_t v9 = v4;
  do
  {
    if (!v9) {
      goto LABEL_41;
    }
    unint64_t v10 = v9 - 1;
    int v11 = a1[--v9];
  }

  while (v11 != 95);
  if (v4 >= v10) {
    unint64_t v12 = v10;
  }
  else {
    unint64_t v12 = v4;
  }
  if (v12)
  {
    __int128 v13 = (char *)&a1[v12];
    size_t v14 = a1;
    unint64_t v64 = v3;
    unsigned int v65 = (char *)&a1[v12];
    while (1)
    {
      unsigned int v16 = *v14;
      end = (char *)v3->__end_;
      value = v3->__end_cap_.__value_;
      *(_DWORD *)end = v16;
      int v15 = (unsigned int *)(end + 4);
LABEL_14:
      v3->__end_ = v15;
    }

    uint64_t v19 = a1;
    unint64_t v20 = v4;
    std::vector<unsigned int>::pointer v21 = v3->__begin_;
    uint64_t v22 = end - (char *)v3->__begin_;
    uint64_t v23 = v22 >> 2;
    unint64_t v24 = (v22 >> 2) + 1;
    if (v24 >> 62) {
      goto LABEL_71;
    }
    uint64_t v25 = (char *)value - (char *)v21;
    if (v25 >> 1 > v24) {
      unint64_t v24 = v25 >> 1;
    }
    unint64_t v66 = v24;
    if (v24)
    {
      if (v24 >> 62) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      unsigned int v26 = operator new(4 * v24);
    }

    else
    {
      unsigned int v26 = 0LL;
    }

    char v27 = (unsigned int *)&v26[4 * v23];
    *char v27 = v16;
    int v15 = v27 + 1;
    if (end == (char *)v21)
    {
      unint64_t v4 = v20;
      a1 = v19;
    }

    else
    {
      unint64_t v28 = end - (char *)v21 - 4;
      if (v28 >= 0x2C)
      {
        unint64_t v29 = end - &v26[v22];
        unint64_t v4 = v20;
        a1 = v19;
        if (v29 >= 0x20)
        {
          uint64_t v30 = (v28 >> 2) + 1;
          uint64_t v31 = 4 * (v30 & 0x7FFFFFFFFFFFFFF8LL);
          BOOL v32 = &end[-v31];
          char v27 = (unsigned int *)((char *)v27 - v31);
          unint64_t v33 = &v26[4 * v23 - 16];
          unsigned int v34 = end - 16;
          uint64_t v35 = v30 & 0x7FFFFFFFFFFFFFF8LL;
          do
          {
            __int128 v36 = *(_OWORD *)v34;
            *(v33 - 1) = *((_OWORD *)v34 - 1);
            *unint64_t v33 = v36;
            v33 -= 2;
            v34 -= 32;
            v35 -= 8LL;
          }

          while (v35);
          end = v32;
          if (v30 == (v30 & 0x7FFFFFFFFFFFFFF8LL)) {
            goto LABEL_35;
          }
        }
      }

      else
      {
        unint64_t v4 = v20;
        a1 = v19;
      }

      do
      {
        unsigned int v37 = *((_DWORD *)end - 1);
        end -= 4;
        *--char v27 = v37;
      }

      while (end != (char *)v21);
    }

std::vector<unsigned int>::iterator std::vector<unsigned int>::insert( std::vector<unsigned int> *this, std::vector<unsigned int>::const_iterator __position, std::vector<unsigned int>::const_reference __x)
{
  unint64_t v3 = (unsigned int *)__x;
  std::vector<unsigned int>::pointer begin = this->__begin_;
  std::vector<unsigned int>::pointer end = this->__end_;
  int64_t v7 = (char *)__position.__i_ - (char *)this->__begin_;
  uint64_t v8 = v7 >> 2;
  std::vector<unsigned int>::pointer v9 = (std::vector<unsigned int>::pointer)((char *)this->__begin_ + (v7 & 0xFFFFFFFFFFFFFFFCLL));
  value = this->__end_cap_.__value_;
  if (end < value)
  {
    if (v9 == end)
    {
      *std::vector<unsigned int>::pointer v9 = *__x;
      this->__end_ = v9 + 1;
      return (std::vector<unsigned int>::iterator)v9;
    }

    int64_t v11 = (char *)end - (char *)(v9 + 1);
    uint64_t v12 = v11 >> 2;
    std::vector<unsigned int>::pointer v13 = end - 1;
    if ((unint64_t)end < 4)
    {
      std::vector<unsigned int>::pointer v17 = this->__end_;
    }

    else
    {
      unint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFFCLL) + v11;
      std::vector<unsigned int>::pointer v15 = (unsigned int *)((char *)begin + v14 + 4);
      if (end > v15) {
        std::vector<unsigned int>::pointer v15 = this->__end_;
      }
      unint64_t v16 = (unint64_t)v15 + ~(unint64_t)begin - v14;
      if (v16 >= 0x2C)
      {
        std::vector<unsigned int>::pointer v17 = this->__end_;
        if ((unint64_t)((char *)(v9 + 1) - ((char *)begin + (v7 & 0xFFFFFFFFFFFFFFFCLL))) >= 0x20)
        {
          uint64_t v47 = (v16 >> 2) + 1;
          uint64_t v48 = v47 & 0x7FFFFFFFFFFFFFF8LL;
          std::vector<unsigned int>::pointer v13 = (std::vector<unsigned int>::pointer)((char *)v13 + v48 * 4);
          std::vector<unsigned int>::pointer v17 = &end[v48];
          std::vector<unsigned int>::pointer v49 = end + 4;
          uint64_t v50 = &begin[v12 + 4 + v8];
          uint64_t v51 = v47 & 0x7FFFFFFFFFFFFFF8LL;
          do
          {
            __int128 v52 = *(_OWORD *)v50;
            *(v49 - 1) = *((_OWORD *)v50 - 1);
            *std::vector<unsigned int>::pointer v49 = v52;
            v49 += 2;
            v50 += 8;
            v51 -= 8LL;
          }

          while (v51);
          if (v47 == (v47 & 0x7FFFFFFFFFFFFFF8LL)) {
            goto LABEL_49;
          }
        }
      }

      else
      {
        std::vector<unsigned int>::pointer v17 = this->__end_;
      }

      do
      {
        unsigned int v53 = *v13++;
        *v17++ = v53;
      }

      while (v13 < end);
    }

BOOL swift::Punycode::__runtime::encodePunycode(unsigned int **a1, std::string *this)
{
  if ((char)this->__r_.__value_.__s.__size_ < 0)
  {
    *this->__r_.__value_.__l.__data_ = 0;
    this->__r_.__value_.__l.__size_ = 0LL;
  }

  else
  {
    this->__r_.__value_.__s.__data_[0] = 0;
    this->__r_.__value_.__s.__size_ = 0;
  }

  unint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  if (*a1 == v5)
  {
    unint64_t v6 = 0LL;
  }

  else
  {
    unint64_t v6 = 0LL;
    do
    {
      unsigned int v7 = *v4;
      if (*v4 <= 0x7F)
      {
        ++v6;
        std::string::push_back(this, v7);
      }

      else if (v7 >> 7 >= 0x1B1 && v7 - 57344 >= 0x102000)
      {
        BOOL result = 0LL;
        if ((char)this->__r_.__value_.__s.__size_ < 0)
        {
          *this->__r_.__value_.__l.__data_ = 0;
          this->__r_.__value_.__l.__size_ = 0LL;
        }

        else
        {
          this->__r_.__value_.__s.__data_[0] = 0;
          this->__r_.__value_.__s.__size_ = 0;
        }

        return result;
      }

      ++v4;
    }

    while (v4 != v5);
    if (v6) {
      std::string::push_back(this, 95);
    }
  }

  unint64_t v10 = *a1;
  std::vector<unsigned int>::pointer v9 = a1[1];
  if (v6 >= v9 - *a1) {
    return 1LL;
  }
  uint64_t v35 = a1;
  int v11 = 0;
  int v12 = 72;
  unsigned int v13 = 128;
  unint64_t v14 = v6;
  unint64_t v36 = v6;
  do
  {
    unsigned int v15 = 1114111;
    for (unsigned int i = v10; i != v9; ++i)
    {
      unsigned int v18 = *i;
      unsigned int v17 = v18;
      if (v18 < v15 && v17 >= v13) {
        unsigned int v15 = v17;
      }
    }

    unint64_t v20 = v15 - v13;
    unint64_t v21 = (v11 ^ 0x7FFFFFFFu) / (v14 + 1);
    BOOL result = v21 >= v20;
    if (v21 < v20) {
      break;
    }
    int v22 = v11 + v20 * (v14 + 1);
    if (v10 != v9)
    {
      unsigned int v37 = v9;
      while (1)
      {
        if (*v10 < v15)
        {
          if (v22 == 0x7FFFFFFF) {
            return 0LL;
          }
          ++v22;
        }

        if (*v10 == v15)
        {
          unint64_t v38 = v14;
          int v24 = 36 - v12;
          if (v12 <= 10) {
            int v24 = 26;
          }
          if (v12 >= 36) {
            int v24 = 1;
          }
          int v25 = v22;
          if (v22 >= v24)
          {
            int v26 = 72;
            int v25 = v22;
            do
            {
              int v27 = v25 - v24;
              int v25 = (v25 - v24) / (36 - v24);
              int v28 = v27 - v25 * (36 - v24) + v24;
              if (v28 >= 26) {
                char v29 = 39;
              }
              else {
                char v29 = 97;
              }
              std::string::push_back(this, v29 + v28);
              if (v26 - 26 >= v12) {
                int v24 = 26;
              }
              else {
                int v24 = v26 - v12;
              }
              if (v26 <= v12) {
                int v24 = 1;
              }
              v26 += 36;
            }

            while (v25 >= v24);
          }

          if (v25 >= 26) {
            char v30 = 39;
          }
          else {
            char v30 = 97;
          }
          std::string::push_back(this, v30 + v25);
          if (v38 == v36) {
            int v31 = 700;
          }
          else {
            int v31 = 2;
          }
          signed int v32 = v22 / v31 / ((int)v38 + 1) + v22 / v31;
          if (v32 < 456)
          {
            int v23 = 0;
          }

          else
          {
            int v23 = 0;
            unsigned int v33 = v32;
            do
            {
              signed int v32 = v33 / 0x23;
              v23 += 36;
              unsigned int v34 = v33 >> 3;
              v33 /= 0x23u;
            }

            while (v34 > 0x7CA);
          }

          int v22 = 0;
          int v12 = 36 * v32 / (v32 + 38) + v23;
          unint64_t v14 = v38 + 1;
          std::vector<unsigned int>::pointer v9 = v37;
        }

        if (++v10 == v9)
        {
          unint64_t v10 = *v35;
          std::vector<unsigned int>::pointer v9 = v35[1];
          goto LABEL_19;
        }
      }
    }

    std::vector<unsigned int>::pointer v9 = v10;
LABEL_19:
    int v11 = v22 + 1;
    unsigned int v13 = v15 + 1;
    BOOL result = 1LL;
  }

  while (v14 < v9 - v10);
  return result;
}

uint64_t swift::Punycode::__runtime::decodePunycodeUTF8( unsigned __int8 *a1, unint64_t a2, std::string *a3)
{
  if (swift::Punycode::__runtime::decodePunycode(a1, a2, &v17))
  {
    std::vector<unsigned int>::pointer begin = v17.__begin_;
    std::vector<unsigned int>::pointer end = v17.__end_;
    if (v17.__begin_ == v17.__end_)
    {
      uint64_t v15 = 1LL;
      if (!v17.__begin_) {
        return v15;
      }
      goto LABEL_26;
    }

    while (1)
    {
      unsigned int v7 = *begin;
      unsigned int v8 = *begin >> 7;
      if (v8 >= 0x1B1 && v7 - 57344 >= 0x102000) {
        break;
      }
      if (v8 == 432) {
        v7 -= 55296;
      }
      if (v7 < 0x80)
      {
        std::string::value_type v6 = v7;
      }

      else
      {
        std::string::value_type v6 = v7 & 0x3F | 0x80;
        if (v7 >= 0x800)
        {
          unsigned int v11 = (v7 >> 6) & 0x3F | 0xFFFFFF80;
          if (v7 >= 0x10000)
          {
            unsigned int v14 = (v7 >> 12) & 0x3F | 0xFFFFFF80;
            std::string::push_back(a3, (v7 >> 18) | 0xF0);
            unsigned int v13 = a3;
            LOBYTE(v12) = v14;
          }

          else
          {
            unsigned int v12 = (v7 >> 12) | 0xFFFFFFE0;
            unsigned int v13 = a3;
          }

          std::string::push_back(v13, v12);
          unint64_t v10 = a3;
          LOBYTE(v9) = v11;
        }

        else
        {
          unsigned int v9 = (v7 >> 6) | 0xFFFFFFC0;
          unint64_t v10 = a3;
        }

        std::string::push_back(v10, v9);
      }

      std::string::push_back(a3, v6);
      if (++begin == end)
      {
        uint64_t v15 = 1LL;
        goto LABEL_25;
      }
    }

    uint64_t v15 = 0LL;
    if ((char)a3->__r_.__value_.__s.__size_ < 0)
    {
      *a3->__r_.__value_.__l.__data_ = 0;
      a3->__r_.__value_.__l.__size_ = 0LL;
    }

    else
    {
      a3->__r_.__value_.__s.__data_[0] = 0;
      a3->__r_.__value_.__s.__size_ = 0;
    }
  }

  else
  {
    uint64_t v15 = 0LL;
  }

BOOL swift::Punycode::__runtime::encodePunycodeUTF8(char *a1, unint64_t a2, std::string *a3, char a4)
{
  std::string __p = 0LL;
  int v46 = 0LL;
  uint64_t v47 = 0LL;
  if (!a2)
  {
LABEL_68:
    BOOL v19 = swift::Punycode::__runtime::encodePunycode((unsigned int **)&__p, a3);
LABEL_69:
    size_t v41 = __p;
    if (__p) {
      goto LABEL_70;
    }
    return v19;
  }

  if (a2 >> 62) {
LABEL_74:
  }
    abort();
  unsigned int v7 = (unsigned int *)operator new(4 * a2);
  unsigned int v8 = (char *)&v7[a2];
  std::string __p = v7;
  int v46 = v7;
  unsigned int v9 = (unsigned __int8 *)&a1[a2];
  char v44 = a4 ^ 1;
  uint64_t v47 = v8;
  unint64_t v10 = v7;
  while (1)
  {
    unsigned int v12 = (unsigned __int8 *)(a1 + 1);
    unsigned int v13 = *a1;
    if ((*a1 & 0x80000000) == 0)
    {
      if ((v13 & 0xFFFFFFDF) - 65 < 0x1A) {
        goto LABEL_18;
      }
      BOOL v15 = v13 == 95 || v13 - 48 < 0xA || v13 == 36;
      char v16 = v44;
      if (v15) {
        char v16 = 1;
      }
      if ((v16 & 1) != 0)
      {
LABEL_18:
        ++a1;
        goto LABEL_40;
      }

      v13 |= 0xD800u;
      ++a1;
      goto LABEL_38;
    }

    if (v13 < 0xC0) {
      goto LABEL_72;
    }
    if (v13 <= 0xDF) {
      break;
    }
    uint64_t v18 = v9 - v12;
    if (v13 > 0xEF)
    {
      BOOL v19 = 0LL;
      if (v13 > 0xF7 || v18 < 3) {
        goto LABEL_69;
      }
      unsigned __int8 v23 = a1[1];
      if ((v23 & 0xC0) != 0x80) {
        goto LABEL_69;
      }
      unsigned __int8 v24 = a1[2];
      if ((v24 & 0xC0) != 0x80) {
        goto LABEL_69;
      }
      unsigned __int8 v25 = a1[3];
      if ((v25 & 0xC0) != 0x80) {
        goto LABEL_69;
      }
      a1 += 4;
      unsigned int v13 = ((v13 & 7) << 18) | ((v23 & 0x3F) << 12) | ((v24 & 0x3F) << 6) | v25 & 0x3F;
    }

    else
    {
      if (v18 < 2) {
        goto LABEL_72;
      }
      BOOL v19 = 0LL;
      unsigned __int8 v20 = a1[1];
      if ((v20 & 0xC0) != 0x80) {
        goto LABEL_69;
      }
      unsigned __int8 v21 = a1[2];
      if ((v21 & 0xC0) != 0x80) {
        goto LABEL_69;
      }
      a1 += 3;
      unsigned int v13 = ((v13 & 0xF) << 12) | ((v20 & 0x3F) << 6) | v21 & 0x3F;
    }

BOOL swift::Demangle::__runtime::SubstitutionEntry::identifierEquals( swift::Demangle::__runtime::SubstitutionEntry *this, swift::Demangle::__runtime::Node *a2, swift::Demangle::__runtime::Node *a3)
{
  size_t v3 = *((void *)this + 1);
  uint64_t v4 = *((void *)a2 + 1);
  unint64_t v5 = v3;
  if (*((unsigned __int16 *)this + 8) == *((unsigned __int16 *)a2 + 8))
  {
    if (v3 == v4)
    {
      if (v3) {
        return memcmp(*(const void **)this, *(const void **)a2, v3) == 0;
      }
      return 1;
    }

    return 0;
  }

  uint64_t v10 = 0LL;
  BOOL v8 = 0;
  do
  {
    unsigned int v11 = *((unsigned __int16 *)this + 8) - 124;
    BOOL v12 = v11 > 0x33;
    uint64_t v13 = (1LL << v11) & 0xA000000000001LL;
    if (v12 || v13 == 0) {
      char v15 = *(_BYTE *)(*(void *)this + v10);
    }
    else {
      char v15 = swift::Mangle::__runtime::translateOperatorChar((swift::Mangle::__runtime *)*(char *)(*(void *)this + v10));
    }
    unsigned int v16 = *((unsigned __int16 *)a2 + 8) - 124;
    if (v16 <= 0x33 && ((1LL << v16) & 0xA000000000001LL) != 0) {
      char v17 = swift::Mangle::__runtime::translateOperatorChar((swift::Mangle::__runtime *)*(char *)(*(void *)a2 + v10));
    }
    else {
      char v17 = *(_BYTE *)(*(void *)a2 + v10);
    }
    if (v15 != v17) {
      break;
    }
    BOOL v8 = ++v10 >= v5;
  }

  while (v5 != v10);
  return v8;
}

uint64_t swift::Demangle::__runtime::SubstitutionEntry::deepEquals( swift::Demangle::__runtime::SubstitutionEntry *this, swift::Demangle::__runtime::Node *a2, swift::Demangle::__runtime::Node *a3)
{
  size_t v3 = (char *)a2 + 16;
  uint64_t v4 = a3;
  int v6 = *((unsigned __int8 *)a2 + 18);
  unsigned int v8 = v6 - 1;
  unsigned int v9 = a2;
  switch(*((_BYTE *)a2 + 18))
  {
    case 1:
    case 2:
      if (v8 >= 2) {
        goto LABEL_13;
      }
      goto LABEL_5;
    case 3:
      size_t v10 = *((void *)a2 + 1);
      goto LABEL_12;
    case 4:
      if (*(void *)a2 != *(void *)a3) {
        return 0LL;
      }
      goto LABEL_12;
    case 5:
      if (*((_DWORD *)a2 + 2) != *((_DWORD *)a3 + 2)) {
        return 0LL;
      }
      unsigned int v9 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_23;
    default:
LABEL_12:
      unsigned int v9 = 0LL;
      if (v8 < 2)
      {
LABEL_5:
        if (v6 != 5)
        {
LABEL_15:
          if (v6 != 2)
          {
            size_t v3 = v6 == 1 ? (char *)a2 + 8 : 0LL;
            if (v9 == (swift::Demangle::__runtime::Node *)v3) {
              return 1LL;
            }
          }

          goto LABEL_25;
        }
      }

      else
      {
LABEL_13:
        if (v6 != 5)
        {
          uint64_t v4 = 0LL;
          goto LABEL_15;
        }

uint64_t swift::Demangle::__runtime::RemanglerBase::hashForNode( swift::Demangle::__runtime::RemanglerBase *this, swift::Demangle::__runtime::Node *a2, BOOL a3)
{
  BOOL v3 = a3;
  uint64_t v5 = *((unsigned __int16 *)a2 + 8);
  if (a3)
  {
    if ((v5 - 124) <= 0x33 && ((1LL << (v5 - 124)) & 0xA000000000001LL) != 0)
    {
      uint64_t v7 = *((void *)a2 + 1);
      if (!v7) {
        return 101LL;
      }
      unsigned int v8 = *(char **)a2;
      uint64_t v5 = 101LL;
      do
      {
        unsigned int v9 = *v8++;
        uint64_t v5 = 33 * v5 + swift::Mangle::__runtime::translateOperatorChar((swift::Mangle::__runtime *)v9);
        --v7;
      }

      while (v7);
      return v5;
    }

    uint64_t v5 = 101LL;
  }

  int v10 = *((unsigned __int8 *)a2 + 18);
  if (v10 == 3)
  {
    uint64_t v11 = *((void *)a2 + 1);
    if (!v11) {
      goto LABEL_23;
    }
    BOOL v12 = *(unsigned __int8 **)a2;
    do
    {
      unsigned int v13 = *v12++;
      uint64_t v5 = 33 * v5 + v13;
      --v11;
    }

    while (v11);
  }

  else if (v10 == 4)
  {
    uint64_t v5 = *(void *)a2 + 33 * v5;
    goto LABEL_23;
  }

  if ((v10 - 1) < 2)
  {
    BOOL v14 = (swift::Demangle::__runtime::Node **)a2;
    if (v10 != 1) {
      goto LABEL_24;
    }
LABEL_20:
    char v15 = (swift::Demangle::__runtime::Node **)((char *)a2 + 8);
    goto LABEL_31;
  }

  if (v10 == 5)
  {
    uint64_t v16 = *(void *)a2;
    BOOL v14 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_27:
    char v15 = (swift::Demangle::__runtime::Node **)(v16 + 8LL * *((unsigned int *)a2 + 2));
    goto LABEL_31;
  }

__n128 swift::Demangle::__runtime::RemanglerBase::entryForNode@<Q0>( uint64_t *__return_ptr a1@<X8>, swift::Demangle::__runtime::RemanglerBase *this@<X0>, swift::Demangle::__runtime::Node *a3@<X1>, int a4@<W2>)
{
  char v4 = a4;
  uint64_t v7 = 4LL;
  if (!a4) {
    uint64_t v7 = 0LL;
  }
  unint64_t v8 = v7 + ((unint64_t)(2043LL * (void)a3) >> 12);
  unsigned int v9 = (char *)this + 24 * (v8 & 0x1FF);
  __n128 result = *(__n128 *)(v9 + 8);
  *(__n128 *)a1 = result;
  a1[2] = *((void *)v9 + 3);
  if (!*a1) {
    goto LABEL_30;
  }
  if ((swift::Demangle::__runtime::Node *)*a1 != a3 || *((unsigned __int8 *)a1 + 16) != a4)
  {
    unsigned int v9 = (char *)this + 24 * (((unsigned __int16)v8 + 1) & 0x1FF);
    __n128 result = *(__n128 *)(v9 + 8);
    *(__n128 *)a1 = result;
    a1[2] = *((void *)v9 + 3);
    if (*a1)
    {
      unsigned int v9 = (char *)this + 24 * (((unsigned __int16)v8 + 2) & 0x1FF);
      __n128 result = *(__n128 *)(v9 + 8);
      *(__n128 *)a1 = result;
      a1[2] = *((void *)v9 + 3);
      if (*a1)
      {
        unsigned int v9 = (char *)this + 24 * (((unsigned __int16)v8 + 3) & 0x1FF);
        __n128 result = *(__n128 *)(v9 + 8);
        *(__n128 *)a1 = result;
        a1[2] = *((void *)v9 + 3);
        if (*a1)
        {
          unsigned int v9 = (char *)this + 24 * (((unsigned __int16)v8 + 4) & 0x1FF);
          __n128 result = *(__n128 *)(v9 + 8);
          *(__n128 *)a1 = result;
          a1[2] = *((void *)v9 + 3);
          if (*a1)
          {
            unsigned int v9 = (char *)this + 24 * (((unsigned __int16)v8 + 5) & 0x1FF);
            __n128 result = *(__n128 *)(v9 + 8);
            *(__n128 *)a1 = result;
            a1[2] = *((void *)v9 + 3);
            if (*a1)
            {
              unsigned int v9 = (char *)this + 24 * (((unsigned __int16)v8 + 6) & 0x1FF);
              __n128 result = *(__n128 *)(v9 + 8);
              *(__n128 *)a1 = result;
              a1[2] = *((void *)v9 + 3);
              if (*a1)
              {
                BOOL v12 = (char *)this + 24 * (((unsigned __int16)v8 + 7) & 0x1FF);
                __n128 result = *(__n128 *)(v12 + 8);
                *(__n128 *)a1 = result;
                a1[2] = *((void *)v12 + 3);
                if (*a1)
                {
                  if ((swift::Demangle::__runtime::Node *)*a1 != a3 || *((unsigned __int8 *)a1 + 16) != a4)
                  {
                    uint64_t v13 = swift::Demangle::__runtime::RemanglerBase::hashForNode(this, a3, a4);
                    *((_BYTE *)a1 + 16) = v4;
                    *a1 = (uint64_t)a3;
                    a1[1] = v13;
                  }

                  return result;
                }

                BOOL v14 = v12 + 8;
LABEL_31:
                uint64_t v15 = swift::Demangle::__runtime::RemanglerBase::hashForNode(this, a3, a4);
                *((_BYTE *)a1 + 16) = v4;
                *a1 = (uint64_t)a3;
                a1[1] = v15;
                _BYTE v14[16] = v4;
                __n128 result = *(__n128 *)a1;
                *(_OWORD *)BOOL v14 = *(_OWORD *)a1;
                return result;
              }
            }
          }
        }
      }
    }

unint64_t swift::Demangle::__runtime::RemanglerBase::findSubstitution( swift::Demangle::__runtime::RemanglerBase *this, swift::Demangle::__runtime::Node **a2)
{
  char v4 = (swift::Demangle::__runtime::RemanglerBase *)((char *)this + 12296);
  uint64_t v5 = *((void *)this + 1585);
  if (v5)
  {
    int v6 = (char *)v4 + 24 * v5;
    uint64_t v7 = 24 * v5;
    unint64_t v8 = (swift::Demangle::__runtime::RemanglerBase *)((char *)this + 12296);
    do
    {
      if (*((swift::Demangle::__runtime::Node **)v8 + 1) == a2[1]
        && *((unsigned __int8 *)v8 + 16) == *((unsigned __int8 *)a2 + 16))
      {
        unsigned int v9 = *a2;
        if (*((_BYTE *)v8 + 16))
        {
          if (swift::Demangle::__runtime::SubstitutionEntry::identifierEquals( *(swift::Demangle::__runtime::SubstitutionEntry **)v8,  *a2,  v9))
          {
            goto LABEL_11;
          }
        }

        else if ((swift::Demangle::__runtime::SubstitutionEntry::deepEquals( v8,  *(swift::Demangle::__runtime::Node **)v8,  v9) & 1) != 0)
        {
          goto LABEL_11;
        }
      }

      unint64_t v8 = (swift::Demangle::__runtime::SubstitutionEntry *)((char *)v8 + 24);
      v7 -= 24LL;
    }

    while (v7);
    unint64_t v8 = (swift::Demangle::__runtime::SubstitutionEntry *)v6;
LABEL_11:
    uint64_t v5 = *((void *)this + 1585);
  }

  else
  {
    unint64_t v8 = (swift::Demangle::__runtime::RemanglerBase *)((char *)this + 12296);
  }

  unint64_t result = 0xAAAAAAAAAAAAAAABLL * ((v8 - v4) >> 3);
  if (result == v5)
  {
    uint64_t v11 = std::__hash_table<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>>>::find<swift::Demangle::__runtime::SubstitutionEntry>( (void *)this + 1586,  (uint64_t)a2);
    if (v11) {
      return *((unsigned int *)v11 + 10);
    }
    else {
      return 0xFFFFFFFFLL;
    }
  }

  return result;
}

char *swift::Demangle::__runtime::RemanglerBase::addSubstitution( char *this, const swift::Demangle::__runtime::SubstitutionEntry *a2)
{
  unint64_t v2 = *((void *)this + 1585);
  if (v2 > 0xF)
  {
    int v5 = *((_DWORD *)this + 3178) + 16;
    __int128 v6 = *(_OWORD *)a2;
    uint64_t v7 = *((void *)a2 + 2);
    int v8 = v5;
    return std::__hash_table<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::__runtime::SubstitutionEntry,std::pair<swift::Demangle::__runtime::SubstitutionEntry const,unsigned int>>( (uint64_t)(this + 12688),  (uint64_t)&v6,  &v6);
  }

  else
  {
    *((void *)this + 1585) = v2 + 1;
    uint64_t v3 = (uint64_t)&this[24 * v2 + 12296];
    __int128 v4 = *(_OWORD *)a2;
    *(_BYTE *)(v3 + 16) = *((_BYTE *)a2 + 16);
    *(_OWORD *)uint64_t v3 = v4;
  }

  return this;
}

size_t *swift::Demangle::__runtime::mangleNode( swift::Demangle::__runtime *this, swift::Demangle::__runtime::Node *a2)
{
  return swift::Demangle::__runtime::mangleNode((uint64_t)this);
}

size_t *swift::Demangle::__runtime::mangleNode(uint64_t a1)
{
  unint64_t result = (size_t *)MEMORY[0x1895F8858](a1);
  uint64_t v5 = v4;
  if (!result)
  {
    *(_DWORD *)uint64_t v4 = 0;
    *(void *)(v4 + 8) = 0LL;
    *(_DWORD *)(v4 + 16) = 0;
    *(void *)(v4 + 32) = 0LL;
    *(void *)(v4 + 40) = 0LL;
    *(void *)(v4 + 24) = 0LL;
    return result;
  }

  uint64_t v6 = v3;
  uint64_t v7 = v2;
  int v8 = result;
  v79[0] = off_189B8E4D8;
  uint64_t v82 = 0LL;
  char v83 = 0;
  char v23 = 0;
  v22[1540] = 0LL;
  unsigned __int8 v21 = v79;
  v22[1539] = 0LL;
  char v26 = 0;
  uint64_t v25 = 0LL;
  uint64_t v24 = 0LL;
  char v29 = 0;
  uint64_t v28 = 0LL;
  uint64_t v27 = 0LL;
  char v32 = 0;
  uint64_t v31 = 0LL;
  uint64_t v30 = 0LL;
  char v35 = 0;
  uint64_t v34 = 0LL;
  uint64_t v33 = 0LL;
  char v38 = 0;
  uint64_t v37 = 0LL;
  uint64_t v36 = 0LL;
  char v41 = 0;
  uint64_t v40 = 0LL;
  uint64_t v39 = 0LL;
  char v44 = 0;
  uint64_t v42 = 0LL;
  uint64_t v43 = 0LL;
  char v47 = 0;
  uint64_t v45 = 0LL;
  uint64_t v46 = 0LL;
  char v50 = 0;
  uint64_t v48 = 0LL;
  uint64_t v49 = 0LL;
  char v53 = 0;
  uint64_t v51 = 0LL;
  uint64_t v52 = 0LL;
  char v56 = 0;
  uint64_t v54 = 0LL;
  uint64_t v55 = 0LL;
  char v59 = 0;
  uint64_t v58 = 0LL;
  uint64_t v57 = 0LL;
  char v62 = 0;
  uint64_t v60 = 0LL;
  uint64_t v61 = 0LL;
  char v65 = 0;
  uint64_t v63 = 0LL;
  uint64_t v64 = 0LL;
  __int128 v66 = 0u;
  __int128 v67 = 0u;
  uint64_t v68 = 0LL;
  bzero(v22, 0x3011uLL);
  int v69 = 1065353216;
  unsigned int v72 = v79;
  uint64_t v81 = 4800LL;
  unsigned int v9 = malloc(0x12C8uLL);
  int v80 = v9;
  *unsigned int v9 = 0LL;
  v79[1] = v9 + 5;
  v79[2] = v9 + 601;
  char __src = v9 + 1;
  size_t __len = 0x2000000000LL;
  char v73 = 1;
  __int128 v74 = 0u;
  __int128 v75 = 0u;
  memset(v76, 0, sizeof(v76));
  uint64_t v77 = v7;
  uint64_t v78 = v6;
  if ((_DWORD)v19)
  {
    *(_OWORD *)uint64_t v5 = v19;
    *(void *)(v5 + 16) = v20;
    *(void *)(v5 + 24) = 0LL;
    *(void *)(v5 + 32) = 0LL;
    *(void *)(v5 + 40) = 0LL;
    int v10 = (void *)*((void *)&v67 + 1);
    if (*((void *)&v67 + 1)) {
      goto LABEL_4;
    }
    goto LABEL_5;
  }

  uint64_t v13 = __src;
  if (!__src)
  {
    __int128 v17 = 0uLL;
    uint64_t v18 = 0LL;
    goto LABEL_22;
  }

  size_t v14 = __len;
  if (__len >= 0x17)
  {
    else {
      uint64_t v16 = __len | 7LL;
    }
    uint64_t v15 = (__int128 *)operator new(v16 + 1);
    *((void *)&v17 + 1) = v14;
    uint64_t v18 = v16 - 0x7FFFFFFFFFFFFFFFLL;
    *(void *)&__int128 v17 = v15;
  }

  else
  {
    HIBYTE(v18) = __len;
    uint64_t v15 = &v17;
    if (!(_DWORD)__len) {
      goto LABEL_21;
    }
  }

  memmove(v15, v13, v14);
LABEL_21:
  *((_BYTE *)v15 + v14) = 0;
LABEL_22:
  *(_DWORD *)uint64_t v5 = 0;
  *(void *)(v5 + 8) = 0LL;
  *(_DWORD *)(v5 + 16) = 0;
  *(_OWORD *)(v5 + 24) = v17;
  *(void *)(v5 + 40) = v18;
  int v10 = (void *)*((void *)&v67 + 1);
  if (*((void *)&v67 + 1))
  {
    do
    {
LABEL_4:
      uint64_t v11 = (void *)*v10;
      operator delete(v10);
      int v10 = v11;
    }

    while (v11);
  }

void anonymous namespace'::Remangler::mangle( uint64_t *__return_ptr a1@<X8>, _anonymous_namespace_::Remangler *this@<X0>, size_t *a3@<X1>, unsigned int a4@<W2>)
{
  if (a4 <= 0x400)
  {
    int v6 = a4;
    while (2)
    {
      uint64_t v8 = 0LL;
      switch(*((_WORD *)a3 + 8))
      {
        case 0:
          int v13 = v6 + 1;
          size_t v14 = a1;
          uint64_t v15 = (char **)this;
          char v16 = 67;
          goto LABEL_41;
        case 1:
          return;
        case 2:
          return;
        case 3:
          __int128 v17 = a1;
          uint64_t v18 = (unsigned int *)this;
          int v19 = v6;
          goto LABEL_20;
        case 4:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 733;
          goto LABEL_3;
        case 5:
          return;
        case 6:
          return;
        case 7:
          return;
        case 8:
          return;
        case 9:
          return;
        case 0xA:
          return;
        case 0xB:
          return;
        case 0xC:
          return;
        case 0xD:
        case 0xF:
        case 0x10:
        case 0x11:
        case 0x12:
        case 0x18:
        case 0x3D:
        case 0xA7:
        case 0xDB:
        case 0xEA:
          return;
        case 0xE:
          return;
        case 0x13:
          return;
        case 0x14:
          return;
        case 0x15:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "BT";
          goto LABEL_329;
        case 0x16:
          return;
        case 0x17:
          return;
        case 0x19:
          return;
        case 0x1A:
          return;
        case 0x1B:
          return;
        case 0x1C:
          return;
        case 0x1D:
          size_t v14 = a1;
          uint64_t v15 = (char **)this;
          char v16 = 99;
          int v13 = v6;
LABEL_41:
          return;
        case 0x1E:
          return;
        case 0x1F:
          return;
        case 0x20:
        case 0xE8:
          return;
        case 0x21:
          return;
        case 0x22:
          return;
        case 0x23:
          return;
        case 0x24:
          return;
        case 0x25:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 1138;
          goto LABEL_3;
        case 0x26:
          return;
        case 0x27:
          return;
        case 0x28:
          return;
        case 0x29:
          return;
        case 0x2A:
          return;
        case 0x2B:
          uint64_t v20 = a1;
          unsigned __int8 v21 = (uint64_t *)this;
          int v22 = v6;
          goto LABEL_59;
        case 0x2C:
          return;
        case 0x2D:
          return;
        case 0x2E:
          int v22 = v6 + 1;
          uint64_t v20 = a1;
          unsigned __int8 v21 = (uint64_t *)this;
LABEL_59:
          return;
        case 0x2F:
          return;
        case 0x30:
          return;
        case 0x31:
          return;
        case 0x32:
          return;
        case 0x33:
          return;
        case 0x34:
          return;
        case 0x35:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "TE";
          goto LABEL_329;
        case 0x36:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "TF";
          goto LABEL_329;
        case 0x37:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "TD";
          goto LABEL_329;
        case 0x38:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "Td";
          goto LABEL_329;
        case 0x39:
          return;
        case 0x3A:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "TI";
          goto LABEL_329;
        case 0x3B:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "Tx";
          goto LABEL_329;
        case 0x3C:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "TX";
          goto LABEL_329;
        case 0x3E:
          return;
        case 0x3F:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "Xe";
          goto LABEL_329;
        case 0x40:
          return;
        case 0x41:
          return;
        case 0x42:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "Yb";
          goto LABEL_329;
        case 0x43:
          return;
        case 0x44:
          return;
        case 0x45:
          return;
        case 0x46:
          return;
        case 0x47:
          return;
        case 0x48:
          return;
        case 0x49:
          return;
        case 0x4A:
          return;
        case 0x4B:
          return;
        case 0x4C:
          return;
        case 0x4D:
          return;
        case 0x4E:
        case 0x4F:
          return;
        case 0x50:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 1634;
          goto LABEL_3;
        case 0x51:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 1641;
          goto LABEL_3;
        case 0x52:
        case 0xF5:
          return;
        case 0x53:
          return;
        case 0x54:
          return;
        case 0x55:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "s";
          size_t v10 = 1LL;
          goto LABEL_330;
        case 0x56:
          char v23 = a1;
          uint64_t v24 = (char **)this;
          int v25 = v6;
          goto LABEL_98;
        case 0x57:
          int v25 = v6 + 1;
          char v23 = a1;
          uint64_t v24 = (char **)this;
LABEL_98:
          return;
        case 0x58:
          return;
        case 0x59:
          return;
        case 0x5A:
          return;
        case 0x5B:
          char v26 = "Tg";
          goto LABEL_108;
        case 0x5C:
          char v26 = "TG";
          goto LABEL_108;
        case 0x5D:
          char v26 = "TB";
          goto LABEL_108;
        case 0x5E:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 1749;
          goto LABEL_3;
        case 0x5F:
          char v26 = "Ts";
          goto LABEL_108;
        case 0x60:
          char v26 = "Ti";
LABEL_108:
          return;
        case 0x61:
          return;
        case 0x62:
          return;
        case 0x63:
          return;
        case 0x64:
          return;
        case 0x65:
        case 0xE1:
          return;
        case 0x66:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 1834;
          goto LABEL_3;
        case 0x67:
          return;
        case 0x68:
          return;
        case 0x69:
          return;
        case 0x6A:
          return;
        case 0x6B:
        case 0x141:
          return;
        case 0x6C:
          return;
        case 0x6D:
          return;
        case 0x6E:
          return;
        case 0x6F:
          return;
        case 0x70:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 1919;
          goto LABEL_3;
        case 0x71:
          return;
        case 0x72:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 1949;
          goto LABEL_3;
        case 0x73:
          return;
        case 0x74:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 1960;
          goto LABEL_3;
        case 0x75:
          return;
        case 0x76:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 2165;
          goto LABEL_3;
        case 0x77:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 1966;
          goto LABEL_3;
        case 0x78:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 2170;
          goto LABEL_3;
        case 0x79:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 2175;
          goto LABEL_3;
        case 0x7A:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 2180;
          goto LABEL_3;
        case 0x7B:
          return;
        case 0x7C:
          return;
        case 0x7D:
          return;
        case 0x7E:
          return;
        case 0x7F:
          return;
        case 0x80:
          return;
        case 0x81:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "YA";
          goto LABEL_329;
        case 0x82:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "YT";
          goto LABEL_329;
        case 0x83:
          int v27 = v6 + 1;
          uint64_t v28 = "TK";
          goto LABEL_147;
        case 0x84:
          int v27 = v6 + 1;
          uint64_t v28 = "Tk";
          goto LABEL_147;
        case 0x85:
          int v27 = v6 + 1;
          uint64_t v28 = "TH";
          goto LABEL_147;
        case 0x86:
          int v27 = v6 + 1;
          uint64_t v28 = "Th";
LABEL_147:
          return;
        case 0x87:
          return;
        case 0x88:
          return;
        case 0x89:
          return;
        case 0x8A:
          return;
        case 0x8B:
          return;
        case 0x8C:
          return;
        case 0x8D:
          return;
        case 0x8E:
          return;
        case 0x8F:
          return;
        case 0x90:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "Tm";
          goto LABEL_329;
        case 0x91:
          return;
        case 0x92:
          return;
        case 0x93:
          return;
        case 0x94:
          return;
        case 0x95:
          return;
        case 0x96:
          return;
        case 0x97:
          return;
        case 0x98:
          return;
        case 0x99:
          return;
        case 0x9A:
          return;
        case 0x9B:
          return;
        case 0x9C:
          return;
        case 0x9D:
          return;
        case 0x9E:
          return;
        case 0x9F:
          return;
        case 0xA0:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "TO";
          goto LABEL_329;
        case 0xA1:
        case 0xE7:
          goto LABEL_331;
        case 0xA2:
          return;
        case 0xA3:
          return;
        case 0xA4:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "To";
          goto LABEL_329;
        case 0xA5:
          return;
        case 0xA6:
          return;
        case 0xA8:
          return;
        case 0xA9:
          return;
        case 0xAA:
          return;
        case 0xAB:
          return;
        case 0xAC:
          return;
        case 0xAD:
          return;
        case 0xAE:
          return;
        case 0xAF:
          return;
        case 0xB0:
          return;
        case 0xB1:
          return;
        case 0xB2:
          return;
        case 0xB3:
          return;
        case 0xB4:
          return;
        case 0xB5:
        case 0xE9:
        case 0x12D:
          goto LABEL_7;
        case 0xB6:
          return;
        case 0xB7:
          return;
        case 0xB8:
          return;
        case 0xB9:
          return;
        case 0xBA:
          return;
        case 0xBB:
          return;
        case 0xBC:
          return;
        case 0xBD:
          return;
        case 0xBE:
          return;
        case 0xBF:
          return;
        case 0xC0:
          return;
        case 0xC1:
          return;
        case 0xC2:
          return;
        case 0xC3:
          return;
        case 0xC4:
          return;
        case 0xC5:
          return;
        case 0xC6:
          return;
        case 0xC7:
          return;
        case 0xC8:
          return;
        case 0xC9:
          return;
        case 0xCA:
          return;
        case 0xCB:
          return;
        case 0xCC:
          return;
        case 0xCD:
          return;
        case 0xCE:
          return;
        case 0xCF:
          int v19 = v6 + 1;
          __int128 v17 = a1;
          uint64_t v18 = (unsigned int *)this;
LABEL_20:
          return;
        case 0xD0:
          return;
        case 0xD1:
          return;
        case 0xD2:
          return;
        case 0xD3:
          return;
        case 0xD4:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 3634;
          goto LABEL_3;
        case 0xD5:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 3639;
          goto LABEL_3;
        case 0xD6:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 3645;
          goto LABEL_3;
        case 0xD7:
          return;
        case 0xD8:
          swift::Demangle::__runtime::CharVector::append( (unsigned int *)this + 3182,  *a3,  *((swift::Demangle::__runtime::NodeFactory **)this + 1593));
          goto LABEL_331;
        case 0xD9:
          return;
        case 0xDA:
          return;
        case 0xDC:
        case 0xFE:
          return;
        case 0xDD:
        case 0x147:
          unsigned int v9 = (char **)((char *)this + 12728);
          size_t v10 = a3[1];
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = (const char *)*a3;
          goto LABEL_330;
        case 0xDE:
          return;
        case 0xDF:
          return;
        case 0xE0:
          return;
        case 0xE2:
          return;
        case 0xE3:
          return;
        case 0xE4:
          return;
        case 0xE5:
          return;
        case 0xE6:
          return;
        case 0xEB:
          return;
        case 0xEC:
          return;
        case 0xED:
          return;
        case 0xEE:
          return;
        case 0xEF:
          return;
        case 0xF0:
          return;
        case 0xF1:
          return;
        case 0xF2:
          return;
        case 0xF3:
          return;
        case 0xF4:
          return;
        case 0xF6:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 1839;
          goto LABEL_3;
        case 0xF7:
          return;
        case 0xF8:
          return;
        case 0xF9:
          return;
        case 0xFA:
          return;
        case 0xFB:
          return;
        case 0xFC:
          return;
        case 0xFD:
          return;
        case 0xFF:
          return;
        case 0x100:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 3281;
          goto LABEL_3;
        case 0x101:
          return;
        case 0x102:
          return;
        case 0x103:
          return;
        case 0x104:
          return;
        case 0x105:
          return;
        case 0x106:
          return;
        case 0x107:
          return;
        case 0x108:
          return;
        case 0x109:
          return;
        case 0x10A:
          return;
        case 0x10B:
          return;
        case 0x10C:
          return;
        case 0x10D:
          return;
        case 0x10E:
          return;
        case 0x10F:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "Ya";
          goto LABEL_329;
        case 0x110:
          return;
        case 0x111:
          return;
        case 0x112:
          return;
        case 0x113:
          return;
        case 0x114:
          return;
        case 0x115:
          return;
        case 0x116:
          return;
        case 0x117:
          return;
        case 0x118:
          return;
        case 0x119:
          return;
        case 0x11A:
          return;
        case 0x11B:
          return;
        case 0x11C:
          return;
        case 0x11D:
          return;
        case 0x11E:
          return;
        case 0x11F:
          return;
        case 0x120:
          return;
        case 0x121:
          return;
        case 0x122:
          return;
        case 0x123:
          return;
        case 0x124:
          return;
        case 0x125:
          return;
        case 0x126:
          return;
        case 0x127:
          return;
        case 0x128:
          return;
        case 0x129:
          return;
        case 0x12A:
          return;
        case 0x12B:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 3792;
          goto LABEL_3;
        case 0x12C:
          return;
        case 0x12E:
          return;
        case 0x12F:
          return;
        case 0x130:
          return;
        case 0x131:
          return;
        case 0x132:
          return;
        case 0x133:
          return;
        case 0x134:
          return;
        case 0x135:
          return;
        case 0x136:
          return;
        case 0x137:
          return;
        case 0x138:
          return;
        case 0x139:
          return;
        case 0x13A:
          return;
        case 0x13B:
          return;
        case 0x13C:
          return;
        case 0x13D:
          return;
        case 0x13E:
          return;
        case 0x13F:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "Tu";
          goto LABEL_329;
        case 0x140:
          int v29 = v6 + 1;
          uint64_t v30 = "TJ";
          uint64_t v31 = a1;
          char v32 = this;
          size_t v33 = 2LL;
          goto LABEL_323;
        case 0x142:
          return;
        case 0x143:
          return;
        case 0x144:
          int v29 = v6 + 1;
          uint64_t v30 = "TJV";
          uint64_t v31 = a1;
          char v32 = this;
          size_t v33 = 3LL;
LABEL_323:
          return;
        case 0x145:
          return;
        case 0x146:
          return;
        case 0x148:
          return;
        case 0x149:
          return;
        case 0x14A:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "HF";
LABEL_329:
          size_t v10 = 2LL;
          goto LABEL_330;
        case 0x14B:
          return;
        case 0x14C:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "Twb";
          size_t v10 = 3LL;
          goto LABEL_330;
        case 0x14D:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "TwB";
          size_t v10 = 3LL;
          goto LABEL_330;
        case 0x14E:
          return;
        case 0x14F:
          return;
        case 0x150:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 3931;
          goto LABEL_3;
        case 0x151:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 3937;
          goto LABEL_3;
        case 0x152:
          return;
        case 0x153:
          return;
        case 0x154:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "TwS";
          size_t v10 = 3LL;
LABEL_330:
          swift::Demangle::__runtime::CharVector::append(v9, v12, v10, v11);
LABEL_331:
          *(_DWORD *)a1 = 0;
          goto LABEL_332;
        case 0x155:
        case 0x156:
          *(_DWORD *)a1 = 11;
LABEL_332:
          a1[1] = 0LL;
          *((_DWORD *)a1 + 4) = 0;
          return;
        case 0x157:
          return;
        case 0x158:
          return;
        case 0x159:
          return;
        case 0x15A:
          return;
        case 0x15B:
          uint64_t v8 = 4LL;
LABEL_7:
          a3 = (size_t *)(*((uint64_t (**)(void, uint64_t, size_t))this + 1603))( *((void *)this + 1604),  v8,  *a3);
          if (++v6 == 1025) {
            break;
          }
          continue;
        case 0x15C:
          return;
        case 0x15D:
          return;
        case 0x15E:
          return;
        case 0x15F:
          return;
        case 0x160:
          return;
        case 0x161:
          return;
        case 0x162:
          return;
        default:
          *(_DWORD *)a1 = 4;
          a1[1] = (uint64_t)a3;
          int v5 = 401;
          goto LABEL_3;
      }

      break;
    }
  }

  *(_DWORD *)a1 = 3;
  a1[1] = (uint64_t)a3;
  int v5 = 392;
LABEL_3:
  *((_DWORD *)a1 + 4) = v5;
}

void swift::Demangle::__runtime::mangleNode(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1895F8858](a1);
  uint64_t v6 = v5;
  if (!v1)
  {
    *(void *)(v5 + 24) = 0LL;
    *(void *)(v5 + 32) = 0LL;
    *(_DWORD *)uint64_t v5 = 0;
    *(void *)(v5 + 8) = 0LL;
    *(_DWORD *)(v5 + 16) = 0;
    return;
  }

  uint64_t v7 = v4;
  uint64_t v8 = v3;
  uint64_t v9 = v2;
  size_t v10 = (size_t *)v1;
  char v25 = 0;
  v24[1540] = 0LL;
  char v23 = v4;
  v24[1539] = 0LL;
  char v28 = 0;
  uint64_t v27 = 0LL;
  uint64_t v26 = 0LL;
  char v31 = 0;
  uint64_t v30 = 0LL;
  uint64_t v29 = 0LL;
  char v34 = 0;
  uint64_t v33 = 0LL;
  uint64_t v32 = 0LL;
  char v37 = 0;
  uint64_t v36 = 0LL;
  uint64_t v35 = 0LL;
  char v40 = 0;
  uint64_t v39 = 0LL;
  uint64_t v38 = 0LL;
  char v43 = 0;
  uint64_t v42 = 0LL;
  uint64_t v41 = 0LL;
  char v46 = 0;
  uint64_t v44 = 0LL;
  uint64_t v45 = 0LL;
  char v49 = 0;
  uint64_t v47 = 0LL;
  uint64_t v48 = 0LL;
  char v52 = 0;
  uint64_t v50 = 0LL;
  uint64_t v51 = 0LL;
  char v55 = 0;
  uint64_t v53 = 0LL;
  uint64_t v54 = 0LL;
  char v58 = 0;
  uint64_t v56 = 0LL;
  uint64_t v57 = 0LL;
  char v61 = 0;
  uint64_t v60 = 0LL;
  uint64_t v59 = 0LL;
  char v64 = 0;
  uint64_t v62 = 0LL;
  uint64_t v63 = 0LL;
  char v67 = 0;
  uint64_t v65 = 0LL;
  uint64_t v66 = 0LL;
  __int128 v68 = 0u;
  __int128 v69 = 0u;
  uint64_t v70 = 0LL;
  bzero(v24, 0x3011uLL);
  int v71 = 1065353216;
  __int128 v74 = v7;
  uint64_t v11 = (void *)v7[1];
  if (!v11 || (unint64_t)(v11 + 4) > v7[2])
  {
    unint64_t v12 = 2LL * v7[4];
    if (v12 <= 0x21) {
      unint64_t v12 = 33LL;
    }
    v7[4] = v12;
    unint64_t v13 = v12 + 8;
    size_t v14 = malloc(v12 + 8);
    *size_t v14 = v7[3];
    uint64_t v11 = v14 + 1;
    v7[2] = (char *)v14 + v13;
    void v7[3] = v14;
  }

  v7[1] = v11 + 4;
  unsigned int v72 = v11;
  uint64_t v73 = 0x2000000000LL;
  char v75 = 1;
  __int128 v76 = 0u;
  __int128 v77 = 0u;
  memset(v78, 0, sizeof(v78));
  uint64_t v79 = v9;
  uint64_t v80 = v8;
  if ((_DWORD)v21)
  {
    *(_OWORD *)uint64_t v6 = v21;
    uint64_t v15 = v22;
    *(void *)(v6 + 24) = 0LL;
    *(void *)(v6 + 32) = 0LL;
    *(void *)(v6 + 16) = v15;
    char v16 = (void *)*((void *)&v69 + 1);
    if (*((void *)&v69 + 1)) {
      goto LABEL_9;
    }
  }

  else
  {
    int v19 = v72;
    uint64_t v20 = v73;
    *(_DWORD *)uint64_t v6 = 0;
    *(void *)(v6 + 8) = 0LL;
    *(_DWORD *)(v6 + 16) = 0;
    *(void *)(v6 + 24) = v19;
    *(void *)(v6 + 32) = v20;
    char v16 = (void *)*((void *)&v69 + 1);
    if (*((void *)&v69 + 1))
    {
      do
      {
LABEL_9:
        __int128 v17 = (void *)*v16;
        operator delete(v16);
        char v16 = v17;
      }

      while (v17);
    }
  }

  uint64_t v18 = (void *)*((void *)&v68 + 1);
  *((void *)&v68 + 1) = 0LL;
  if (v18) {
    operator delete(v18);
  }
}

uint64_t swift::Demangle::__runtime::isSpecialized( swift::Demangle::__runtime *this, swift::Demangle::__runtime::Node *a2)
{
  if (this)
  {
    while (2)
    {
      uint64_t v2 = 1LL;
      switch(*((_WORD *)this + 8))
      {
        case 0:
        case 0x18:
        case 0x1D:
        case 0x21:
        case 0x32:
        case 0x33:
        case 0x3D:
        case 0x46:
        case 0x4C:
        case 0x62:
        case 0x75:
        case 0x7D:
        case 0x98:
        case 0xA7:
        case 0xB2:
        case 0xB3:
        case 0xB4:
        case 0xCC:
        case 0xD7:
        case 0xDA:
        case 0xDB:
        case 0xDC:
        case 0xEA:
        case 0xFA:
        case 0xFB:
        case 0xFE:
        case 0x101:
          int v3 = *((unsigned __int8 *)this + 18);
          if (v3 != 5) {
            return 0LL;
          }
          uint64_t v2 = *((unsigned int *)this + 2);
          if (!(_DWORD)v2) {
            return v2;
          }
          this = *(swift::Demangle::__runtime **)this;
LABEL_4:
          this = *(swift::Demangle::__runtime **)this;
          if (this) {
            continue;
          }
          return 0LL;
        case 0xD:
        case 0xE:
        case 0xF:
        case 0x10:
        case 0x11:
        case 0x12:
        case 0x13:
        case 0x53:
          return v2;
        case 0x47:
          int v4 = *((unsigned __int8 *)this + 18);
          if (v4 == 2) {
            goto LABEL_3;
          }
          if (v4 != 5 || *((_DWORD *)this + 2) < 2u) {
            return 0LL;
          }
          this = *(swift::Demangle::__runtime **)this;
LABEL_3:
          this = (swift::Demangle::__runtime *)((char *)this + 8);
          goto LABEL_4;
        default:
          return 0LL;
      }
    }
  }

  return 0LL;
}

uint64_t swift::Demangle::__runtime::getUnspecialized@<X0>( uint64_t this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = this;
  while (2)
  {
    uint64_t v7 = (swift::Demangle::__runtime::Node *)*(unsigned __int16 *)(v5 + 16);
    if (((_DWORD)v7 - 13) < 6)
    {
      int v8 = *(unsigned __int8 *)(v5 + 18);
      if ((v8 - 1) >= 2)
      {
        if (v8 != 5 || !*(_DWORD *)(v5 + 8))
        {
          *(_DWORD *)a3 = 1;
          *(void *)(a3 + 8) = v5;
          int v13 = 4090;
          goto LABEL_71;
        }

        uint64_t v5 = *(void *)v5;
      }

      uint64_t v9 = *(void *)v5;
      if (*(_WORD *)(*(void *)v5 + 16LL) != 232)
      {
        *(_DWORD *)a3 = 1;
        *(void *)(a3 + 8) = v9;
        int v13 = 4092;
        goto LABEL_71;
      }

      int v10 = *(unsigned __int8 *)(v9 + 18);
      if ((v10 - 1) >= 2)
      {
        if (v10 != 5 || !*(_DWORD *)(v9 + 8))
        {
          *(_DWORD *)a3 = 1;
          *(void *)(a3 + 8) = v9;
          int v13 = 4093;
          goto LABEL_71;
        }

        uint64_t v9 = *(void *)v9;
      }

      uint64_t v5 = *(void *)v9;
      goto LABEL_13;
    }

    switch(*(_WORD *)(v5 + 16))
    {
      case 0:
      case 0x1D:
      case 0x21:
      case 0x32:
      case 0x33:
      case 0x46:
      case 0x4C:
      case 0x62:
      case 0x75:
      case 0x7D:
      case 0x98:
      case 0xB2:
      case 0xB3:
      case 0xCC:
      case 0xD7:
      case 0xDA:
      case 0xDC:
      case 0xFA:
      case 0xFB:
      case 0xFE:
      case 0x101:
        unsigned int v14 = *(unsigned __int8 *)(v5 + 18);
        if (v14 != 1)
        {
          if (v14 == 5)
          {
            unsigned int v14 = *(_DWORD *)(v5 + 8);
          }

          else if (v14 != 2)
          {
            unsigned int v14 = 0;
          }
        }

        goto LABEL_30;
      case 0x13:
        int v11 = *(unsigned __int8 *)(v5 + 18);
        if (v11 == 5 && *(_DWORD *)(v5 + 8))
        {
          uint64_t v5 = *(void *)v5;
LABEL_20:
          uint64_t v5 = *(void *)v5;
          int v12 = *(unsigned __int16 *)(v5 + 16);
          if (v12 != 29 && v12 != 76)
          {
            *(_DWORD *)a3 = 1;
            *(void *)(a3 + 8) = v5;
            int v13 = 4113;
            goto LABEL_71;
          }

void *anonymous namespace'::Remangler::mangleAnonymousContext@<X0>( const void **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  uint64_t v9 = a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0LL;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }

    uint64_t v9 = *(swift::Demangle::__runtime::Node **)a2;
  }

  if (*(_DWORD *)a4) {
    return result;
  }
  int v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  int v11 = (swift::Demangle::__runtime::Node **)a2;
  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    int v11 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_12:
    if (*(_DWORD *)a4) {
      return result;
    }
    if (*((_BYTE *)a2 + 18) != 5) {
      goto LABEL_19;
    }
    goto LABEL_16;
  }

  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0LL;
  *(_DWORD *)(a4 + 16) = 0;
  if (v8 != 5) {
    goto LABEL_19;
  }
LABEL_16:
  if (*((_DWORD *)a2 + 2) >= 3u)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    goto LABEL_36;
  }

void *anonymous namespace'::Remangler::mangleAnyProtocolConformanceList@<X0>( void *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = (uint64_t)this;
  BOOL v23 = 1;
  int v6 = *((unsigned __int8 *)a2 + 18);
  unsigned int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      unsigned int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }

    unsigned int v7 = 0LL;
  }

  if (v6 == 1)
  {
    uint64_t v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
    goto LABEL_20;
  }

  if (v6 == 2)
  {
    uint64_t v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
LABEL_20:
    unsigned int v11 = *(_DWORD *)(v4 + 12736);
    size_t v12 = *(unsigned int *)(v4 + 12740);
    size_t v13 = *(char **)(v4 + 12728);
    unsigned int v14 = *(void **)(v4 + 12744);
    uint64_t v15 = (char *)v14[1];
    if (&v13[v12] == v15)
    {
      unint64_t v17 = (unint64_t)&v13[v12 + 1];
      unint64_t v16 = v14[2];
      if (v17 <= v16)
      {
        v14[1] = v17;
        LODWORD(v18) = 1;
LABEL_36:
        *(_DWORD *)(v4 + 12740) = v12 + v18;
LABEL_37:
        *(_DWORD *)(v4 + 12736) = v11 + 1;
        v13[v11] = 121;
LABEL_38:
        *(_DWORD *)a4 = 0;
        *(void *)(a4 + 8) = 0LL;
        *(_DWORD *)(a4 + 16) = 0;
        return this;
      }
    }

    else
    {
      unint64_t v16 = v14[2];
    }

    else {
      uint64_t v18 = (2 * v12);
    }
    size_t v19 = v18 + v12;
    if (!v15 || (unint64_t)&v15[v19] > v16)
    {
      unint64_t v20 = 2LL * v14[4];
      if (v20 <= v19 + 1) {
        unint64_t v20 = v19 + 1;
      }
      uint64_t v14[4] = v20;
      unint64_t v21 = v20 + 8;
      this = malloc(v20 + 8);
      unint64_t v22 = (char *)this + v21;
      *this = v14[3];
      uint64_t v15 = (char *)(this + 1);
      v14[2] = v22;
      void v14[3] = this;
    }

    v14[1] = &v15[v19];
    if ((_DWORD)v12)
    {
      this = memcpy(v15, *(const void **)(v4 + 12728), v12);
      LODWORD(v12) = *(_DWORD *)(v4 + 12740);
      unsigned int v11 = *(_DWORD *)(v4 + 12736);
    }

    *(void *)(v4 + 12728) = v15;
    size_t v13 = v15;
    goto LABEL_36;
  }

  if (v6 != 5)
  {
    uint64_t v9 = 0LL;
    if (!v7) {
      goto LABEL_20;
    }
    goto LABEL_16;
  }

  uint64_t v8 = *(void *)a2;
LABEL_9:
  uint64_t v9 = (swift::Demangle::__runtime::Node *)(v8 + 8LL * *((unsigned int *)a2 + 2));
  if (v7 == v9) {
    goto LABEL_20;
  }
LABEL_16:
  int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return this;
    }
    unsigned int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9)
    {
      if (!v23) {
        goto LABEL_38;
      }
      goto LABEL_20;
    }
  }

unsigned int *anonymous namespace'::Remangler::mangleArgumentTuple@<X0>( unsigned int *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    unsigned int v7 = *a2;
    goto LABEL_7;
  }

  unsigned int v7 = 0LL;
LABEL_7:
  if (*((_WORD *)v7 + 8) == 232)
  {
    int v8 = *((unsigned __int8 *)v7 + 18);
    if ((v8 - 1) >= 2)
    {
      if (v8 != 5 || !*((_DWORD *)v7 + 2))
      {
        unsigned int v7 = 0LL;
        goto LABEL_14;
      }

      unsigned int v7 = *(swift::Demangle::__runtime::Node **)v7;
    }

    unsigned int v7 = *(swift::Demangle::__runtime::Node **)v7;
  }

uint64_t anonymous namespace'::Remangler::mangleAssociatedTypeRef@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  __int128 v17 = 0uLL;
  LOBYTE(v18) = 0;
  if ((result & 1) != 0) {
    goto LABEL_23;
  }
  int v9 = *((unsigned __int8 *)a2 + 18);
  unsigned int v10 = (swift::Demangle::__runtime::Node **)a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      uint64_t v11 = *(void *)a2;
      unsigned int v10 = *(swift::Demangle::__runtime::Node ***)a2;
      goto LABEL_10;
    }

    unsigned int v10 = 0LL;
  }

  if (v9 == 1)
  {
    size_t v12 = (swift::Demangle::__runtime::Node **)((char *)a2 + 8);
    if (v10 != v12) {
      goto LABEL_17;
    }
    goto LABEL_20;
  }

  if (v9 == 2)
  {
    size_t v12 = (swift::Demangle::__runtime::Node **)((char *)a2 + 16);
    if (v10 != v12) {
      goto LABEL_17;
    }
LABEL_20:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t)swift::Demangle::__runtime::CharVector::append(this + 1591, "Qa", 2uLL, this[1593]);
    unint64_t v14 = (unint64_t)this[1585];
    if (v14 > 0xF)
    {
      int v16 = *((_DWORD *)this + 3178) + 16;
      __int128 v19 = v17;
      uint64_t v20 = v18;
      int v21 = v16;
      uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::__runtime::SubstitutionEntry,std::pair<swift::Demangle::__runtime::SubstitutionEntry const,unsigned int>>( (uint64_t)(this + 1586),  (uint64_t)&v19,  &v19);
    }

    else
    {
      this[1585] = (char *)(v14 + 1);
      unint64_t v15 = &this[3 * v14 + 1537];
      *(_OWORD *)unint64_t v15 = v17;
      *((_BYTE *)v15 + 16) = v18;
    }

void *anonymous namespace'::Remangler::mangleAssociatedTypeMetadataAccessor@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  unsigned int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      unsigned int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }

    unsigned int v7 = 0LL;
  }

  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8LL * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }

  int v9 = 0LL;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Wt", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

void *anonymous namespace'::Remangler::mangleDefaultAssociatedTypeMetadataAccessor@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  unsigned int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      unsigned int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }

    unsigned int v7 = 0LL;
  }

  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8LL * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }

  int v9 = 0LL;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "TM", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

void *anonymous namespace'::Remangler::mangleAccessorAttachedMacroExpansion@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  int v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0LL;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }

    int v9 = (swift::Demangle::__runtime::Node **)*a2;
  }

  if (*(_DWORD *)a4) {
    return result;
  }
  int v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  uint64_t v11 = (swift::Demangle::__runtime::Node *)a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0LL;
      *(_DWORD *)(a4 + 16) = 0;
      if (v8 != 5) {
        goto LABEL_19;
      }
      goto LABEL_16;
    }

    uint64_t v11 = *a2;
  }

  if (*(_DWORD *)a4) {
    return result;
  }
  if (*((_BYTE *)a2 + 18) != 5) {
    goto LABEL_19;
  }
LABEL_16:
  if (*((_DWORD *)a2 + 2) > 2u)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    goto LABEL_20;
  }

void *anonymous namespace'::Remangler::mangleAssociatedTypeWitnessTableAccessor@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  unsigned int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      unsigned int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }

    unsigned int v7 = 0LL;
  }

  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8LL * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }

  int v9 = 0LL;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "WT", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

void *anonymous namespace'::Remangler::mangleBaseWitnessTableAccessor@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  unsigned int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      unsigned int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }

    unsigned int v7 = 0LL;
  }

  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8LL * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }

  int v9 = 0LL;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Wb", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

void *anonymous namespace'::Remangler::mangleAutoClosureType@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *((unsigned __int8 *)a2 + 18);
  switch((_DWORD)v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      uint64_t v7 = *((unsigned int *)a2 + 2);
      if ((_DWORD)v7) {
        goto LABEL_6;
      }
      break;
    case 2:
      uint64_t v7 = 2LL;
LABEL_6:
      unsigned int v8 = a3 + 1;
      for (uint64_t i = v7 - 1; i != -1; --i)
      {
        unint64_t v10 = *((unsigned __int8 *)a2 + 18);
        unsigned int v11 = v10 - 1;
        if ((_DWORD)v10 != 1)
        {
          if ((_DWORD)v10 == 5)
          {
            unint64_t v10 = *((unsigned int *)a2 + 2);
          }

          else
          {
            if ((_DWORD)v10 != 2) {
              goto LABEL_7;
            }
            unint64_t v10 = 2LL;
          }
        }

        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(void *)(a4 + 8) = 0LL;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }

        size_t v12 = a2;
        if (v11 >= 2) {
          size_t v12 = *(swift::Demangle::__runtime::Node **)a2;
        }
        if (*(_DWORD *)a4) {
          return result;
        }
      }

      break;
  }

  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0LL;
  *(_DWORD *)(a4 + 16) = 0;
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "XK", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0LL;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

void *anonymous namespace'::Remangler::mangleBodyAttachedMacroExpansion@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  int v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0LL;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }

    int v9 = (swift::Demangle::__runtime::Node **)*a2;
  }

  if (*(_DWORD *)a4) {
    return result;
  }
  int v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  unsigned int v11 = (swift::Demangle::__runtime::Node *)a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0LL;
      *(_DWORD *)(a4 + 16) = 0;
      if (v8 != 5) {
        goto LABEL_19;
      }
      goto LABEL_16;
    }

    unsigned int v11 = *a2;
  }

  if (*(_DWORD *)a4) {
    return result;
  }
  if (*((_BYTE *)a2 + 18) != 5) {
    goto LABEL_19;
  }
LABEL_16:
  if (*((_DWORD *)a2 + 2) > 2u)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    goto LABEL_20;
  }

uint64_t anonymous namespace'::Remangler::mangleBoundGenericEnum@<X0>( uint64_t this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = a2;
  uint64_t v6 = this;
  int v8 = *((unsigned __int8 *)a2 + 18);
  int v9 = a2;
  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    int v9 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_5:
    unint64_t v10 = *(uint64_t **)v9;
    goto LABEL_7;
  }

  unint64_t v10 = 0LL;
LABEL_7:
  int v11 = *((unsigned __int8 *)v10 + 18);
  if ((v11 - 1) < 2)
  {
LABEL_11:
    size_t v12 = (uint64_t *)*v10;
    goto LABEL_13;
  }

  if (v11 == 5 && *((_DWORD *)v10 + 2))
  {
    unint64_t v10 = (uint64_t *)*v10;
    goto LABEL_11;
  }

  size_t v12 = 0LL;
LABEL_13:
  if (*((_WORD *)v12 + 8) != 61)
  {
    *(_DWORD *)a4 = 1;
    *(void *)(a4 + 8) = a2;
    *(_DWORD *)(a4 + 16) = 843;
    return this;
  }

  int v13 = *((unsigned __int8 *)v12 + 18);
  unint64_t v14 = (uint64_t **)v12;
  if ((v13 - 1) >= 2)
  {
    if (v13 != 5)
    {
      unint64_t v15 = 0LL;
      if (v13 == 2)
      {
LABEL_26:
        uint64_t v16 = v12[1];
        goto LABEL_29;
      }

      goto LABEL_23;
    }

    if (!*((_DWORD *)v12 + 2))
    {
      unint64_t v15 = 0LL;
      goto LABEL_28;
    }

    unint64_t v14 = (uint64_t **)*v12;
  }

  unint64_t v15 = *v14;
  if (v13 == 2) {
    goto LABEL_26;
  }
LABEL_23:
  if (v13 == 5 && *((_DWORD *)v12 + 2) >= 2u)
  {
    size_t v12 = (uint64_t *)*v12;
    goto LABEL_26;
  }

void *anonymous namespace'::Remangler::mangleBoundGenericFunction@<X0>( const void **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  __int128 v28 = 0uLL;
  LOBYTE(v29) = 0;
  if ((_DWORD)result) {
    goto LABEL_2;
  }
  uint64_t result = (void *)swift::Demangle::__runtime::getUnspecialized( (uint64_t)a2,  (swift::Demangle::__runtime::Node *)*this,  (uint64_t)&v25);
  if ((_DWORD)v25)
  {
    *(_OWORD *)a4 = v25;
    *(void *)(a4 + 16) = v26;
    return result;
  }

  int v9 = a3 + 1;
  if (!*(_DWORD *)a4)
  {
    char v24 = 121;
    if (!*(_DWORD *)a4)
    {
      unsigned int v10 = *((_DWORD *)this + 3184);
      size_t v11 = *((unsigned int *)this + 3185);
      size_t v12 = (char *)this[1591];
      int v13 = this[1593];
      unint64_t v14 = (char *)v13[1];
      if (&v12[v11] == v14)
      {
        unint64_t v16 = (unint64_t)&v12[v11 + 1];
        unint64_t v15 = v13[2];
        if (v16 <= v15)
        {
          v13[1] = v16;
          LODWORD(v17) = 1;
LABEL_23:
          *((_DWORD *)this + 3185) = v11 + v17;
LABEL_24:
          *((_DWORD *)this + 3184) = v10 + 1;
          v12[v10] = 71;
          unint64_t v21 = (unint64_t)this[1585];
          if (v21 > 0xF)
          {
            int v23 = *((_DWORD *)this + 3178) + 16;
            __int128 v30 = v28;
            uint64_t v31 = v29;
            int v32 = v23;
            uint64_t result = std::__hash_table<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::__runtime::SubstitutionEntry,std::pair<swift::Demangle::__runtime::SubstitutionEntry const,unsigned int>>( (uint64_t)(this + 1586),  (uint64_t)&v30,  &v30);
          }

          else
          {
            this[1585] = (const void *)(v21 + 1);
            unint64_t v22 = &this[3 * v21 + 1537];
            *(_OWORD *)unint64_t v22 = v28;
            *((_BYTE *)v22 + 16) = v29;
          }

uint64_t anonymous namespace'::Remangler::mangleBuiltinTypeName@<X0>( uint64_t this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = a2;
  uint64_t v4 = this;
  uint64_t v6 = (char **)(this + 12728);
  unsigned int v7 = *(_DWORD *)(this + 12736);
  size_t v8 = *(unsigned int *)(this + 12740);
  int v9 = *(char **)(this + 12728);
  uint64_t v10 = this;
  size_t v11 = *(void **)(this + 12744);
  size_t v12 = (char *)v11[1];
  if (&v9[v8] != v12)
  {
    unint64_t v13 = v11[2];
LABEL_5:
    uint64_t v15 = a3;
    unint64_t v16 = (char **)(this + 12728);
    else {
      uint64_t v17 = (2 * v8);
    }
    size_t v18 = v17 + v8;
    if (v12) {
      BOOL v19 = (unint64_t)&v12[v17 + v8] > v13;
    }
    else {
      BOOL v19 = 1;
    }
    int v9 = (char *)v11[1];
    if (v19)
    {
      unint64_t v20 = 2LL * v11[4];
      if (v20 <= v18 + 1) {
        unint64_t v20 = v18 + 1;
      }
      v11[4] = v20;
      unint64_t v21 = v20 + 8;
      this = (uint64_t)malloc(v20 + 8);
      *(void *)this = v11[3];
      int v9 = (char *)(this + 8);
      void v11[2] = this + v21;
      void v11[3] = this;
    }

    v11[1] = &v9[v18];
    if ((_DWORD)v8)
    {
      uint64_t v4 = v10;
      this = (uint64_t)memcpy(v9, *(const void **)(v10 + 12728), v8);
      LODWORD(v8) = *(_DWORD *)(v10 + 12740);
      unsigned int v7 = *(_DWORD *)(v10 + 12736);
      uint64_t v6 = v16;
    }

    else
    {
      uint64_t v6 = v16;
      uint64_t v4 = v10;
    }

    *uint64_t v6 = v9;
    a3 = v15;
    int v3 = a2;
    goto LABEL_20;
  }

  unint64_t v14 = (unint64_t)&v9[v8 + 1];
  unint64_t v13 = v11[2];
  if (v14 > v13) {
    goto LABEL_5;
  }
  v11[1] = v14;
  LODWORD(v17) = 1;
  uint64_t v4 = this;
LABEL_20:
  *(_DWORD *)(v4 + 12740) = v8 + v17;
LABEL_21:
  *(_DWORD *)(v4 + 12736) = v7 + 1;
  v9[v7] = 66;
  int v23 = *(void **)v3;
  unint64_t v22 = *((void *)v3 + 1);
  switch(v22)
  {
    case 0xBuLL:
      __int128 v25 = v6;
      char v26 = 106;
      goto LABEL_214;
    case 0xCuLL:
      this = memcmp(*(const void **)v3, "Builtin.Word", *((void *)v3 + 1));
      if (!(_DWORD)this)
      {
        __int128 v25 = v6;
        char v26 = 119;
        goto LABEL_214;
      }

{
  uint64_t v4;
  char **v6;
  unsigned int v7;
  size_t v8;
  char *v9;
  void *v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  size_t v15;
  BOOL v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v23;
  size_t v24;
  char *v25;
  void *v26;
  char *v27;
  unint64_t v28;
  unsigned int v31;
  size_t v32;
  char *v33;
  void *v34;
  char *v35;
  unint64_t v36;
  unsigned int v37;
  size_t v38;
  char *v39;
  void *v40;
  char *v41;
  unint64_t v42;
  BOOL v44;
  int v46;
  int v47;
  uint64_t v48;
  const void *v49;
  size_t v50;
  char **v51;
  char v52;
  uint64_t v53;
  const void *v54;
  unint64_t v55;
  size_t v56;
  char **v57;
  char v58;
  unsigned int v59;
  size_t v60;
  char *v61;
  void *v62;
  char *v63;
  unint64_t v64;
  unsigned int v65;
  size_t v66;
  char *v67;
  void *v68;
  char *v69;
  unint64_t v70;
  _BYTE *v71;
  char **v72;
  char **v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char **v81;
  unint64_t v82;
  uint64_t v83;
  size_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  size_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  size_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  size_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  size_t v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v4 = this;
  uint64_t v6 = (char **)(this + 12728);
  unsigned int v7 = *(_DWORD *)(this + 12736);
  size_t v8 = *(unsigned int *)(this + 12740);
  int v9 = *(char **)(this + 12728);
  uint64_t v10 = *(void **)(this + 12744);
  size_t v11 = (char *)v10[1];
  if (&v9[v8] != v11)
  {
    size_t v12 = v10[2];
LABEL_5:
    else {
      unint64_t v14 = (2 * v8);
    }
    uint64_t v15 = v14 + v8;
    if (v11) {
      unint64_t v16 = (unint64_t)&v11[v14 + v8] > v12;
    }
    else {
      unint64_t v16 = 1;
    }
    int v9 = (char *)v10[1];
    if (v16)
    {
      uint64_t v17 = 2LL * v10[4];
      if (v17 <= v15 + 1) {
        uint64_t v17 = v15 + 1;
      }
      _OWORD v10[4] = v17;
      size_t v18 = v17 + 8;
      this = (uint64_t)malloc(v17 + 8);
      BOOL v19 = this + v18;
      *(void *)this = v10[3];
      int v9 = (char *)(this + 8);
      void v10[2] = v19;
      void v10[3] = this;
    }

    v10[1] = &v9[v15];
    if ((_DWORD)v8)
    {
      this = (uint64_t)memcpy(v9, *(const void **)(v4 + 12728), v8);
      LODWORD(v8) = *(_DWORD *)(v4 + 12740);
      unsigned int v7 = *(_DWORD *)(v4 + 12736);
    }

    *uint64_t v6 = v9;
    goto LABEL_19;
  }

  unint64_t v13 = (unint64_t)&v9[v8 + 1];
  size_t v12 = v10[2];
  if (v13 > v12) {
    goto LABEL_5;
  }
  v10[1] = v13;
  LODWORD(v14) = 1;
LABEL_19:
  *(_DWORD *)(v4 + 12740) = v8 + v14;
LABEL_20:
  *(_DWORD *)(v4 + 12736) = v7 + 1;
  v9[v7] = 66;
  unint64_t v21 = *(void *)a2;
  unint64_t v20 = *((void *)a2 + 1);
  switch(v20)
  {
    case 0xCuLL:
      this = memcmp(*(const void **)a2, "Builtin.Word", *((void *)a2 + 1));
      if (!(_DWORD)this)
      {
        size_t v57 = v6;
        char v58 = 119;
        goto LABEL_114;
      }

      if (*(void *)v21 == 0x2E6E69746C697542LL && *(void *)(v21 + 3) == 0x746E492E6E69746CLL) {
        goto LABEL_64;
      }
      goto LABEL_59;
    case 0x12uLL:
      this = memcmp(*(const void **)a2, "Builtin.RawPointer", *((void *)a2 + 1));
      if ((_DWORD)this) {
        goto LABEL_50;
      }
      int v23 = *(_DWORD *)(v4 + 12736);
      char v24 = *(unsigned int *)(v4 + 12740);
      __int128 v25 = *(char **)(v4 + 12728);
      char v26 = *(void **)(v4 + 12744);
      uint64_t v27 = (char *)v26[1];
      if (&v25[v24] == v27)
      {
        uint64_t v82 = (unint64_t)&v25[v24 + 1];
        __int128 v28 = v26[2];
        if (v82 <= v28)
        {
          v26[1] = v82;
          LODWORD(v83) = 1;
          goto LABEL_129;
        }
      }

      else
      {
        __int128 v28 = v26[2];
      }

      else {
        char v83 = (2 * v24);
      }
      unint64_t v84 = v83 + v24;
      if (!v27 || (unint64_t)&v27[v84] > v28)
      {
        unint64_t v85 = 2LL * v26[4];
        if (v85 <= v84 + 1) {
          unint64_t v85 = v84 + 1;
        }
        void v26[4] = v85;
        uint64_t v86 = v85 + 8;
        this = (uint64_t)malloc(v85 + 8);
        unint64_t v87 = this + v86;
        *(void *)this = v26[3];
        uint64_t v27 = (char *)(this + 8);
        void v26[2] = v87;
        void v26[3] = this;
      }

      v26[1] = &v27[v84];
      if ((_DWORD)v24)
      {
        this = (uint64_t)memcpy(v27, *(const void **)(v4 + 12728), v24);
        LODWORD(v24) = *(_DWORD *)(v4 + 12740);
        int v23 = *(_DWORD *)(v4 + 12736);
      }

      *uint64_t v6 = v27;
      __int128 v25 = v27;
LABEL_129:
      *(_DWORD *)(v4 + 12740) = v24 + v83;
LABEL_130:
      unsigned int v47 = 0;
      a2 = 0LL;
      char v46 = 0;
      *(_DWORD *)(v4 + 12736) = v23 + 1;
      v25[v23] = 112;
      goto LABEL_115;
    case 0x14uLL:
      if (*(void *)v21 != 0x2E6E69746C697542LL
        || *(void *)(v21 + 8) != 0x624F656764697242LL
        || *(_DWORD *)(v21 + 16) != 1952671082)
      {
        this = memcmp(*(const void **)a2, "Builtin.NativeObject", *((void *)a2 + 1));
        if (!(_DWORD)this)
        {
          uint64_t v31 = *(_DWORD *)(v4 + 12736);
          int v32 = *(unsigned int *)(v4 + 12740);
          uint64_t v33 = *(char **)(v4 + 12728);
          if (v31 < v32)
          {
LABEL_191:
            unsigned int v47 = 0;
            a2 = 0LL;
            char v46 = 0;
            *(_DWORD *)(v4 + 12736) = v31 + 1;
            v33[v31] = 111;
            goto LABEL_115;
          }

          char v34 = *(void **)(v4 + 12744);
          int v35 = (char *)v34[1];
          if (&v33[v32] == v35)
          {
            unsigned __int8 v106 = (unint64_t)&v33[v32 + 1];
            uint64_t v36 = v34[2];
            if (v106 <= v36)
            {
              v34[1] = v106;
              LODWORD(v107) = 1;
LABEL_190:
              *(_DWORD *)(v4 + 12740) = v32 + v107;
              goto LABEL_191;
            }
          }

          else
          {
            uint64_t v36 = v34[2];
          }

          else {
            int v107 = (2 * v32);
          }
          unint64_t v108 = v107 + v32;
          if (!v35 || (unint64_t)&v35[v108] > v36)
          {
            unint64_t v109 = 2LL * v34[4];
            if (v109 <= v108 + 1) {
              unint64_t v109 = v108 + 1;
            }
            void v34[4] = v109;
            unsigned int v110 = v109 + 8;
            this = (uint64_t)malloc(v109 + 8);
            size_t v111 = this + v110;
            *(void *)this = v34[3];
            int v35 = (char *)(this + 8);
            v34[2] = v111;
            void v34[3] = this;
          }

          v34[1] = &v35[v108];
          if ((_DWORD)v32)
          {
            this = (uint64_t)memcpy(v35, *(const void **)(v4 + 12728), v32);
            LODWORD(v32) = *(_DWORD *)(v4 + 12740);
            uint64_t v31 = *(_DWORD *)(v4 + 12736);
          }

          *uint64_t v6 = v35;
          uint64_t v33 = v35;
          goto LABEL_190;
        }

LABEL_290:
      *(_DWORD *)(v4 + 12736) = v39 + 1;
      v41[v39] = 111;
LABEL_215:
      *(_DWORD *)a3 = 0;
      *(void *)(a3 + 8) = 0LL;
      *(_DWORD *)(a3 + 16) = 0;
      return this;
    case 0x15uLL:
      if (*v23 != 0x2E6E69746C697542LL
        || v23[1] != 0x4F6E776F6E6B6E55LL
        || *(void *)((char *)v23 + 13) != 0x7463656A624F6E77LL)
      {
        goto LABEL_154;
      }

      unsigned int v47 = *(_DWORD *)(v4 + 12736);
      size_t v48 = *(unsigned int *)(v4 + 12740);
      char v49 = *(char **)(v4 + 12728);
      uint64_t v50 = *(void **)(v4 + 12744);
      uint64_t v51 = (char *)v50[1];
      if (&v49[v48] == v51)
      {
        unint64_t v116 = (unint64_t)&v49[v48 + 1];
        unint64_t v52 = v50[2];
        if (v116 <= v52)
        {
          v50[1] = v116;
          LODWORD(v118) = 1;
          goto LABEL_261;
        }
      }

      else
      {
        unint64_t v52 = v50[2];
      }

      uint64_t v117 = v4;
      else {
        uint64_t v118 = (2 * v48);
      }
      size_t v119 = v118 + v48;
      if (!v51 || (unint64_t)&v51[v119] > v52)
      {
        unint64_t v120 = 2LL * v50[4];
        if (v120 <= v119 + 1) {
          unint64_t v120 = v119 + 1;
        }
        v50[4] = v120;
        unint64_t v121 = v120 + 8;
        this = (uint64_t)malloc(v120 + 8);
        *(void *)this = v50[3];
        uint64_t v51 = (char *)(this + 8);
        uint64_t v50[2] = this + v121;
        void v50[3] = this;
      }

      v50[1] = &v51[v119];
      uint64_t v4 = v117;
      if ((_DWORD)v48)
      {
        this = (uint64_t)memcpy(v51, *(const void **)(v117 + 12728), v48);
        LODWORD(v48) = *(_DWORD *)(v117 + 12740);
        unsigned int v47 = *(_DWORD *)(v117 + 12736);
      }

      *uint64_t v6 = v51;
      char v49 = v51;
LABEL_261:
      *(_DWORD *)(v4 + 12740) = v48 + v118;
LABEL_262:
      *(_DWORD *)(v4 + 12736) = v47 + 1;
      v49[v47] = 79;
      goto LABEL_215;
    case 0x19uLL:
      if (*v23 != 0x2E6E69746C697542LL
        || v23[1] != 0x6156656661736E55LL
        || v23[2] != 0x656666754265756CLL
        || *((_BYTE *)v23 + 24) != 114)
      {
        goto LABEL_154;
      }

      unsigned int v56 = *(_DWORD *)(v4 + 12736);
      size_t v57 = *(unsigned int *)(v4 + 12740);
      char v58 = *(char **)(v4 + 12728);
      uint64_t v59 = *(void **)(v4 + 12744);
      uint64_t v60 = (char *)v59[1];
      if (&v58[v57] == v60)
      {
        unint64_t v122 = (unint64_t)&v58[v57 + 1];
        unint64_t v61 = v59[2];
        if (v122 <= v61)
        {
          v59[1] = v122;
          LODWORD(v124) = 1;
          goto LABEL_264;
        }
      }

      else
      {
        unint64_t v61 = v59[2];
      }

      uint64_t v123 = v4;
      else {
        uint64_t v124 = (2 * v57);
      }
      size_t v125 = v124 + v57;
      if (!v60 || (unint64_t)&v60[v125] > v61)
      {
        unint64_t v126 = 2LL * v59[4];
        if (v126 <= v125 + 1) {
          unint64_t v126 = v125 + 1;
        }
        v59[4] = v126;
        unint64_t v127 = v126 + 8;
        this = (uint64_t)malloc(v126 + 8);
        *(void *)this = v59[3];
        uint64_t v60 = (char *)(this + 8);
        v59[2] = this + v127;
        v59[3] = this;
      }

      v59[1] = &v60[v125];
      uint64_t v4 = v123;
      if ((_DWORD)v57)
      {
        this = (uint64_t)memcpy(v60, *(const void **)(v123 + 12728), v57);
        LODWORD(v57) = *(_DWORD *)(v123 + 12740);
        unsigned int v56 = *(_DWORD *)(v123 + 12736);
      }

      *uint64_t v6 = v60;
      char v58 = v60;
LABEL_264:
      *(_DWORD *)(v4 + 12740) = v57 + v124;
LABEL_265:
      *(_DWORD *)(v4 + 12736) = v56 + 1;
      v58[v56] = 66;
      goto LABEL_215;
    case 0x1BuLL:
      if (*v23 != 0x2E6E69746C697542LL
        || v23[1] != 0x41746C7561666544LL
        || v23[2] != 0x726F7453726F7463LL
        || *(void *)((char *)v23 + 19) != 0x656761726F745372LL)
      {
        goto LABEL_154;
      }

      __int128 v25 = v6;
      char v26 = 68;
      goto LABEL_214;
    case 0x1DuLL:
      if (*v23 != 0x2E6E69746C697542LL
        || v23[1] != 0x6661736E55776152LL
        || v23[2] != 0x756E69746E6F4365LL
        || *(void *)((char *)v23 + 21) != 0x6E6F697461756E69LL)
      {
        goto LABEL_154;
      }

      __int128 v25 = v6;
      char v26 = 99;
      goto LABEL_214;
    case 0x29uLL:
      if (*v23 != 0x2E6E69746C697542LL
        || v23[1] != 0x75616665446E6F4ELL
        || v23[2] != 0x697274736944746CLL
        || v23[3] != 0x7463416465747562LL
        || v23[4] != 0x6761726F7453726FLL
        || *((_BYTE *)v23 + 40) != 101)
      {
        goto LABEL_154;
      }

      __int128 v25 = v6;
      char v26 = 100;
      goto LABEL_214;
    default:
      if (v22 < 0xB) {
        goto LABEL_167;
      }
      goto LABEL_154;
  }

void *anonymous namespace'::Remangler::mangleCFunctionPointer@<X0>( swift::Demangle::__runtime::NodeFactory **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = a2;
  uint64_t v7 = *((unsigned __int8 *)a2 + 18);
  size_t v8 = a2;
  if ((v7 - 1) >= 2)
  {
    if ((_DWORD)v7 != 5)
    {
LABEL_11:
      switch((_DWORD)v7)
      {
        case 1:
LABEL_16:
          unsigned int v10 = a3 + 1;
          uint64_t v11 = v7 - 1;
          while (1)
          {
            unint64_t v12 = *((unsigned __int8 *)v4 + 18);
            unsigned int v13 = v12 - 1;
            if ((_DWORD)v12 != 1)
            {
              if ((_DWORD)v12 == 5)
              {
                unint64_t v12 = *((unsigned int *)v4 + 2);
              }

              else
              {
                if ((_DWORD)v12 != 2) {
                  goto LABEL_17;
                }
                unint64_t v12 = 2LL;
              }
            }

            if (v12 > v11)
            {
              unint64_t v14 = v4;
              if (v13 >= 2) {
                unint64_t v14 = *(swift::Demangle::__runtime::Node **)v4;
              }
              if (*(_DWORD *)a4) {
                return result;
              }
              goto LABEL_18;
            }

void *anonymous namespace'::Remangler::mangleClangType@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (char **)((char *)this + 12728);
  swift::Demangle::__runtime::CharVector::append( (unsigned int *)this + 3182,  *((void *)a2 + 1),  *((swift::Demangle::__runtime::NodeFactory **)this + 1593));
  uint64_t result = swift::Demangle::__runtime::CharVector::append( v6,  *(const void **)a2,  *((void *)a2 + 1),  *((void **)this + 1593));
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = 0LL;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleClassMetadataBaseOffset@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append( (char **)v4 + 1591,  "Mo",  2uLL,  *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0LL;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleConcreteProtocolConformance@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = this;
  int v8 = *((unsigned __int8 *)a2 + 18);
  BOOL v9 = a2;
  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    BOOL v9 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    unsigned int v10 = *v9;
    goto LABEL_7;
  }

  unsigned int v10 = 0LL;
LABEL_7:
  int v11 = *((unsigned __int8 *)v10 + 18);
  if (v11 != 1)
  {
    if (v11 != 5 || *((_DWORD *)v10 + 2) != 1)
    {
      int v16 = 321;
      int v17 = 10;
LABEL_18:
      *(_DWORD *)a4 = v17;
      *(void *)(a4 + 8) = v10;
      *(_DWORD *)(a4 + 16) = v16;
      return this;
    }

    unsigned int v10 = *(swift::Demangle::__runtime::Node **)v10;
  }

  if (*(_DWORD *)a4) {
    return this;
  }
  unsigned int v12 = a3 + 1;
  int v13 = *((unsigned __int8 *)a2 + 18);
  unint64_t v14 = (swift::Demangle::__runtime::Node *)a2;
  if (v13 == 2) {
    goto LABEL_16;
  }
  if (v13 == 5 && *((_DWORD *)a2 + 2) >= 2u)
  {
    unint64_t v14 = *a2;
LABEL_16:
    uint64_t v15 = (swift::Demangle::__runtime::Node *)*((void *)v14 + 1);
    goto LABEL_21;
  }

  uint64_t v15 = 0LL;
LABEL_21:
  if (!*(_DWORD *)a4)
  {
    if (*((_BYTE *)a2 + 18) != 5 || *((_DWORD *)a2 + 2) < 3u)
    {
      swift::Demangle::__runtime::CharVector::append((char **)v6 + 1591, "y", 1uLL, *((void **)v6 + 1593));
LABEL_27:
      this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append( (char **)v6 + 1591,  "HC",  2uLL,  *((void **)v6 + 1593));
      int v17 = 0;
      unsigned int v10 = 0LL;
      int v16 = 0;
      goto LABEL_18;
    }

    if (!*(_DWORD *)a4) {
      goto LABEL_27;
    }
  }

  return this;
}

void *anonymous namespace'::Remangler::manglePackProtocolConformance@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    int v7 = *a2;
    goto LABEL_7;
  }

  int v7 = 0LL;
LABEL_7:
  if (!*(_DWORD *)a4)
  {
    uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "HX", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
  }

  return result;
}

void *anonymous namespace'::Remangler::mangleConformanceAttachedMacroExpansion@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  BOOL v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0LL;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }

    BOOL v9 = (swift::Demangle::__runtime::Node **)*a2;
  }

  if (*(_DWORD *)a4) {
    return result;
  }
  int v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  int v11 = (swift::Demangle::__runtime::Node *)a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0LL;
      *(_DWORD *)(a4 + 16) = 0;
      if (v8 != 5) {
        goto LABEL_19;
      }
      goto LABEL_16;
    }

    int v11 = *a2;
  }

  if (*(_DWORD *)a4) {
    return result;
  }
  if (*((_BYTE *)a2 + 18) != 5) {
    goto LABEL_19;
  }
LABEL_16:
  if (*((_DWORD *)a2 + 2) > 2u)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    goto LABEL_20;
  }

void *anonymous namespace'::Remangler::mangleCoroutineContinuationPrototype@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  unsigned int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      unsigned int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }

    unsigned int v7 = 0LL;
  }

  switch(v6)
  {
    case 1:
      BOOL v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      goto LABEL_16;
    case 2:
      BOOL v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      BOOL v9 = (swift::Demangle::__runtime::Node *)(v8 + 8LL * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }

  BOOL v9 = 0LL;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "TC", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

void *anonymous namespace'::Remangler::mangleDeallocator@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  unsigned int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      unsigned int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }

    unsigned int v7 = 0LL;
  }

  switch(v6)
  {
    case 1:
      BOOL v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      goto LABEL_16;
    case 2:
      BOOL v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      BOOL v9 = (swift::Demangle::__runtime::Node *)(v8 + 8LL * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }

  BOOL v9 = 0LL;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "fD", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

void *anonymous namespace'::Remangler::mangleDefaultArgumentInitializer@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = a2;
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  BOOL v9 = (swift::Demangle::__runtime::Node **)a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0LL;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }

    BOOL v9 = *(swift::Demangle::__runtime::Node ***)a2;
  }

  if (*(_DWORD *)a4) {
    return result;
  }
LABEL_8:
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "fA", 2uLL, this[1593]);
  int v11 = *((unsigned __int8 *)v4 + 18);
  if (v11 == 2) {
  if (v11 == 5 && *((_DWORD *)v4 + 2) >= 2u)
  }
  {
    uint64_t v4 = *(swift::Demangle::__runtime::Node **)v4;
  }

  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0LL;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t anonymous namespace'::Remangler::mangleDependentAssociatedConformance@<X0>( uint64_t this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = a2;
  int v6 = (_anonymous_namespace_::Remangler *)this;
  int v8 = *((unsigned __int8 *)a2 + 18);
  BOOL v9 = (swift::Demangle::__runtime::Node **)a2;
  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    BOOL v9 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_5:
    unsigned int v10 = *v9;
    goto LABEL_7;
  }

  unsigned int v10 = 0LL;
LABEL_7:
  int v11 = *((unsigned __int8 *)v10 + 18);
  if (v11 != 1)
  {
    if (v11 != 5 || *((_DWORD *)v10 + 2) != 1)
    {
      int v14 = 321;
      int v15 = 10;
LABEL_44:
      *(_DWORD *)a4 = v15;
      *(void *)(a4 + 8) = v10;
      *(_DWORD *)(a4 + 16) = v14;
      return this;
    }

    unsigned int v10 = *(swift::Demangle::__runtime::Node **)v10;
  }

  if (*(_DWORD *)a4) {
    return this;
  }
  int v12 = *((unsigned __int8 *)v5 + 18);
  if (v12 == 2) {
    goto LABEL_16;
  }
  if (v12 == 5 && *((_DWORD *)v5 + 2) >= 2u)
  {
    uint64_t v5 = *(swift::Demangle::__runtime::Node **)v5;
LABEL_16:
    int v13 = (uint64_t *)*((void *)v5 + 1);
    goto LABEL_19;
  }

  int v13 = 0LL;
LABEL_19:
  if (*((_WORD *)v13 + 8) != 232) {
    goto LABEL_26;
  }
  int v16 = *((unsigned __int8 *)v13 + 18);
  if (v16 == 5 && *((_DWORD *)v13 + 2))
  {
    int v13 = (uint64_t *)*v13;
LABEL_24:
    int v13 = (uint64_t *)*v13;
    goto LABEL_26;
  }

  int v13 = 0LL;
LABEL_26:
  if ((this & 1) != 0)
  {
LABEL_43:
    int v15 = 0;
    unsigned int v10 = 0LL;
    int v14 = 0;
    goto LABEL_44;
  }

  int v17 = *((unsigned __int8 *)v13 + 18);
  size_t v18 = (swift::Demangle::__runtime::Node **)v13;
  if ((v17 - 1) >= 2)
  {
    if (v17 == 5)
    {
      size_t v19 = (uint64_t *)*v13;
      size_t v18 = (swift::Demangle::__runtime::Node **)*v13;
LABEL_35:
      unsigned int v20 = (swift::Demangle::__runtime::Node **)&v19[*((unsigned int *)v13 + 2)];
      goto LABEL_39;
    }

    size_t v18 = 0LL;
  }

  switch(v17)
  {
    case 1:
      unsigned int v20 = (swift::Demangle::__runtime::Node **)(v13 + 1);
      break;
    case 2:
      unsigned int v20 = (swift::Demangle::__runtime::Node **)(v13 + 2);
      break;
    case 5:
      size_t v19 = (uint64_t *)*v13;
      goto LABEL_35;
    default:
      unsigned int v20 = 0LL;
      break;
  }

void anonymous namespace'::Remangler::mangleDependentAssociatedTypeRef( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = a2;
  int v8 = *((unsigned __int8 *)a2 + 18);
  BOOL v9 = a2;
  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    BOOL v9 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_5:
    uint64_t v10 = *(void *)v9;
    goto LABEL_7;
  }

  uint64_t v10 = 0LL;
LABEL_7:
  __int128 v15 = 0uLL;
  LOBYTE(v16) = 0;
  {
    unint64_t v11 = *((void *)this + 1585);
    if (v11 > 0xF)
    {
      int v13 = *((_DWORD *)this + 3178) + 16;
      __int128 v17 = v15;
      uint64_t v18 = v16;
      int v19 = v13;
      std::__hash_table<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::__runtime::SubstitutionEntry,std::pair<swift::Demangle::__runtime::SubstitutionEntry const,unsigned int>>( (uint64_t)this + 12688,  (uint64_t)&v17,  &v17);
    }

    else
    {
      *((void *)this + 1585) = v11 + 1;
      int v12 = (char *)this + 24 * v11 + 12296;
      *(_OWORD *)int v12 = v15;
      v12[16] = v16;
    }
  }

  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0LL;
  *(_DWORD *)(a4 + 16) = 0;
  int v14 = *((unsigned __int8 *)v5 + 18);
  if (v14 == 2) {
    goto LABEL_15;
  }
  if (v14 == 5 && *((_DWORD *)v5 + 2) >= 2u)
  {
    uint64_t v5 = *(swift::Demangle::__runtime::Node **)v5;
LABEL_15:
    return;
  }

  *(void *)(a4 + 8) = 0LL;
  *(_DWORD *)(a4 + 16) = 0;
}

uint64_t *anonymous namespace'::Remangler::mangleDependentGenericConformanceRequirement@<X0>( uint64_t *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = this;
  int v7 = *((unsigned __int8 *)a2 + 18);
  int v8 = a2;
  if (v7 != 2)
  {
    if (v7 != 5 || *((_DWORD *)a2 + 2) != 2)
    {
      *(_DWORD *)a4 = 1;
      *(void *)(a4 + 8) = a2;
      *(_DWORD *)(a4 + 16) = 1048;
      return this;
    }

    int v8 = *(swift::Demangle::__runtime::Node **)a2;
  }

  BOOL v9 = (uint64_t *)*((void *)v8 + 1);
  int v10 = *((unsigned __int8 *)v9 + 18);
  unint64_t v11 = v9;
  if ((v10 - 1) >= 2)
  {
    if (v10 != 5 || !*((_DWORD *)v9 + 2))
    {
      *(_DWORD *)a4 = 1;
      *(void *)(a4 + 8) = v9;
      *(_DWORD *)(a4 + 16) = 1050;
      return this;
    }

    unint64_t v11 = (uint64_t *)*v9;
  }

  unsigned int v12 = a3 + 1;
  if (*(_WORD *)(*v11 + 16) != 180)
  {
    if (*(_DWORD *)a4) {
      return this;
    }
    int v13 = *((unsigned __int8 *)a2 + 18);
    int v14 = (swift::Demangle::__runtime::Node **)a2;
    if ((v13 - 1) >= 2)
    {
      if (v13 != 5 || !*((_DWORD *)a2 + 2))
      {
        __int128 v15 = 0LL;
LABEL_30:
        if ((_DWORD)v29)
        {
LABEL_52:
          *(_OWORD *)a4 = v29;
          *(void *)(a4 + 16) = v30;
          return this;
        }

        int v19 = v32;
        if ((v31 & 0x80000000) == 0 && !v32)
        {
          *(_DWORD *)a4 = 1;
          *(void *)(a4 + 8) = a2;
          *(_DWORD *)(a4 + 16) = 1082;
          return this;
        }

        if (v31 == 1)
        {
          uint64_t v27 = "Rc";
        }

        else if (v31)
        {
          if (v31 == -1)
          {
            char v24 = (char **)(v5 + 1591);
            int v25 = (void *)v5[1593];
            char v26 = "RB";
            goto LABEL_65;
          }

          uint64_t v27 = "RC";
        }

        else
        {
          uint64_t v27 = "Rb";
        }

        goto LABEL_72;
      }

      int v14 = *(swift::Demangle::__runtime::Node ***)a2;
    }

    __int128 v15 = *v14;
    goto LABEL_30;
  }

  if (*((_WORD *)v9 + 8) != 232) {
    goto LABEL_25;
  }
  if (v10 == 5 && *((_DWORD *)v9 + 2))
  {
    BOOL v9 = (uint64_t *)*v9;
LABEL_15:
    BOOL v9 = (uint64_t *)*v9;
    goto LABEL_25;
  }

  BOOL v9 = 0LL;
LABEL_25:
  {
    int v16 = *((unsigned __int8 *)v9 + 18);
    __int128 v17 = (swift::Demangle::__runtime::Node **)v9;
    if ((v16 - 1) >= 2)
    {
      if (v16 == 5)
      {
        uint64_t v18 = (uint64_t *)*v9;
        __int128 v17 = (swift::Demangle::__runtime::Node **)*v9;
LABEL_39:
        unsigned int v20 = (swift::Demangle::__runtime::Node **)&v18[*((unsigned int *)v9 + 2)];
        goto LABEL_45;
      }

      __int128 v17 = 0LL;
    }

    switch(v16)
    {
      case 1:
        unsigned int v20 = (swift::Demangle::__runtime::Node **)(v9 + 1);
        goto LABEL_45;
      case 2:
        unsigned int v20 = (swift::Demangle::__runtime::Node **)(v9 + 2);
        goto LABEL_45;
      case 5:
        uint64_t v18 = (uint64_t *)*v9;
        goto LABEL_39;
    }

    unsigned int v20 = 0LL;
LABEL_45:
    while (v17 != v20)
    {
      if (*(_DWORD *)a4) {
        return this;
      }
      ++v17;
    }
  }

  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0LL;
  *(_DWORD *)(a4 + 16) = 0;
  int v21 = *((unsigned __int8 *)a2 + 18);
  unint64_t v22 = (swift::Demangle::__runtime::Node **)a2;
  unsigned int v23 = 0LL;
  if (v21 != 5) {
    goto LABEL_51;
  }
  if (*((_DWORD *)a2 + 2))
  {
    unint64_t v22 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_50:
    unsigned int v23 = *v22;
    goto LABEL_51;
  }

  unsigned int v23 = 0LL;
LABEL_51:
  if ((_DWORD)v29) {
    goto LABEL_52;
  }
  int v19 = v32;
  if ((v31 & 0x80000000) == 0 && !v32)
  {
    *(_DWORD *)a4 = 1;
    *(void *)(a4 + 8) = a2;
    *(_DWORD *)(a4 + 16) = 1058;
    return this;
  }

  if (v31 == 1)
  {
    uint64_t v27 = "Rp";
LABEL_72:
    size_t v28 = 2LL;
    goto LABEL_73;
  }

  if (!v31)
  {
    uint64_t v27 = "R";
    size_t v28 = 1LL;
LABEL_73:
    swift::Demangle::__runtime::CharVector::append((char **)v5 + 1591, v27, v28, (void *)v5[1593]);
    goto LABEL_74;
  }

  if (v31 != -1)
  {
    uint64_t v27 = "RP";
    goto LABEL_72;
  }

  char v24 = (char **)(v5 + 1591);
  int v25 = (void *)v5[1593];
  char v26 = "RQ";
LABEL_65:
  this = (uint64_t *)swift::Demangle::__runtime::CharVector::append(v24, v26, 2uLL, v25);
LABEL_74:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0LL;
  *(_DWORD *)(a4 + 16) = 0;
  return this;
}

unsigned int *anonymous namespace'::Remangler::mangleDependentGenericParamType@<X0>( unsigned int *this@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = (uint64_t)this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = (uint64_t *)a2;
  if (!*(void *)*v7)
  {
    int v8 = a2;
    if (v6 == 5) {
      int v8 = (uint64_t **)*a2;
    }
    if (!*v8[1])
    {
      unsigned int v23 = this[3184];
      size_t v24 = this[3185];
      int v25 = (char *)*((void *)this + 1591);
      if (v23 < v24)
      {
LABEL_46:
        *(_DWORD *)(v4 + 12736) = v23 + 1;
        v25[v23] = 120;
        goto LABEL_27;
      }

      char v26 = (void *)*((void *)this + 1593);
      uint64_t v27 = (char *)v26[1];
      if (&v25[v24] == v27)
      {
        unint64_t v29 = (unint64_t)&v25[v24 + 1];
        unint64_t v28 = v26[2];
        if (v29 <= v28)
        {
          v26[1] = v29;
          LODWORD(v30) = 1;
LABEL_45:
          *(_DWORD *)(v4 + 12740) = v24 + v30;
          goto LABEL_46;
        }
      }

      else
      {
        unint64_t v28 = v26[2];
      }

      else {
        uint64_t v30 = (2 * v24);
      }
      size_t v31 = v30 + v24;
      if (!v27 || (unint64_t)&v27[v31] > v28)
      {
        unint64_t v32 = 2LL * v26[4];
        if (v32 <= v31 + 1) {
          unint64_t v32 = v31 + 1;
        }
        void v26[4] = v32;
        unint64_t v33 = v32 + 8;
        this = (unsigned int *)malloc(v32 + 8);
        char v34 = (char *)this + v33;
        *(void *)this = v26[3];
        uint64_t v27 = (char *)(this + 2);
        void v26[2] = v34;
        void v26[3] = this;
      }

      v26[1] = &v27[v31];
      if ((_DWORD)v24)
      {
        this = (unsigned int *)memcpy(v27, *(const void **)(v4 + 12728), v24);
        LODWORD(v24) = *(_DWORD *)(v4 + 12740);
        unsigned int v23 = *(_DWORD *)(v4 + 12736);
      }

      *(void *)(v4 + 12728) = v27;
      int v25 = v27;
      goto LABEL_45;
    }
  }

  unsigned int v9 = this[3184];
  size_t v10 = this[3185];
  unint64_t v11 = (char *)*((void *)this + 1591);
  if (v9 >= v10)
  {
    unsigned int v12 = (void *)*((void *)this + 1593);
    int v13 = (char *)v12[1];
    if (&v11[v10] == v13)
    {
      unint64_t v15 = (unint64_t)&v11[v10 + 1];
      unint64_t v14 = v12[2];
      if (v15 <= v14)
      {
        v12[1] = v15;
        LODWORD(v16) = 1;
LABEL_25:
        *(_DWORD *)(v4 + 12740) = v10 + v16;
        goto LABEL_26;
      }
    }

    else
    {
      unint64_t v14 = v12[2];
    }

    else {
      uint64_t v16 = (2 * v10);
    }
    size_t v17 = v16 + v10;
    if (v13) {
      BOOL v18 = (unint64_t)&v13[v16 + v10] > v14;
    }
    else {
      BOOL v18 = 1;
    }
    unint64_t v11 = (char *)v12[1];
    if (v18)
    {
      unint64_t v19 = 2LL * v12[4];
      if (v19 <= v17 + 1) {
        unint64_t v19 = v17 + 1;
      }
      _OWORD v12[4] = v19;
      unint64_t v20 = v19 + 8;
      int v21 = malloc(v19 + 8);
      unint64_t v22 = (char *)v21 + v20;
      *int v21 = v12[3];
      unint64_t v11 = (char *)(v21 + 1);
      v12[2] = v22;
      void v12[3] = v21;
    }

    v12[1] = &v11[v17];
    if ((_DWORD)v10)
    {
      memcpy(v11, *(const void **)(v4 + 12728), v10);
      LODWORD(v10) = *(_DWORD *)(v4 + 12740);
      unsigned int v9 = *(_DWORD *)(v4 + 12736);
    }

    *(void *)(v4 + 12728) = v11;
    goto LABEL_25;
  }

uint64_t *anonymous namespace'::Remangler::mangleDependentGenericSameTypeRequirement@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  unsigned int v9 = a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0LL;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }

    unsigned int v9 = *(swift::Demangle::__runtime::Node **)a2;
  }

  if (*(_DWORD *)a4) {
    return result;
  }
  int v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  unint64_t v11 = (swift::Demangle::__runtime::Node **)a2;
  if ((v8 - 1) < 2)
  {
LABEL_12:
    unsigned int v12 = *v11;
    goto LABEL_14;
  }

  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    unint64_t v11 = *(swift::Demangle::__runtime::Node ***)a2;
    goto LABEL_12;
  }

  unsigned int v12 = 0LL;
LABEL_14:
  if ((_DWORD)v15)
  {
    *(_OWORD *)a4 = v15;
    *(void *)(a4 + 16) = v16;
    return result;
  }

  int v13 = v18;
  if ((v17 & 0x80000000) == 0 && !v18)
  {
    *(_DWORD *)a4 = 1;
    *(void *)(a4 + 8) = a2;
    *(_DWORD *)(a4 + 16) = 1162;
    return result;
  }

  if (v17 == 1)
  {
    unint64_t v14 = "Rt";
LABEL_26:
    swift::Demangle::__runtime::CharVector::append(this + 1591, v14, 2uLL, this[1593]);
    goto LABEL_27;
  }

  if (!v17)
  {
    unint64_t v14 = "Rs";
    goto LABEL_26;
  }

  if (v17 != -1)
  {
    unint64_t v14 = "RT";
    goto LABEL_26;
  }

  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "RS", 2uLL, this[1593]);
LABEL_27:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0LL;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleDependentGenericSameShapeRequirement@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  unsigned int v9 = a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0LL;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }

    unsigned int v9 = *(swift::Demangle::__runtime::Node **)a2;
  }

  if (*(_DWORD *)a4) {
    return result;
  }
  int v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  unint64_t v11 = (swift::Demangle::__runtime::Node **)a2;
  if ((v8 - 1) < 2)
  {
LABEL_12:
    unsigned int v12 = *v11;
    goto LABEL_14;
  }

  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    unint64_t v11 = *(swift::Demangle::__runtime::Node ***)a2;
    goto LABEL_12;
  }

  unsigned int v12 = 0LL;
LABEL_14:
  if ((_DWORD)v14)
  {
    *(_OWORD *)a4 = v14;
    *(void *)(a4 + 16) = v15;
  }

  else
  {
    int v13 = v17;
    if (v16 < 0 || v17)
    {
      if (v16)
      {
        *(_DWORD *)a4 = 1;
      }

      else
      {
        swift::Demangle::__runtime::CharVector::append(this + 1591, "Rh", 2uLL, this[1593]);
        *(_DWORD *)a4 = 0;
      }

      *(void *)(a4 + 8) = 0LL;
      *(_DWORD *)(a4 + 16) = 0;
    }

    else
    {
      *(_DWORD *)a4 = 1;
      *(void *)(a4 + 8) = a2;
      *(_DWORD *)(a4 + 16) = 1190;
    }
  }

  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleDependentGenericLayoutRequirement@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  int v7 = *((unsigned __int8 *)a2 + 18);
  int v8 = a2;
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    int v8 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    unsigned int v9 = *v8;
    goto LABEL_7;
  }

  unsigned int v9 = 0LL;
LABEL_7:
  unsigned int v10 = a3 + 1;
  if ((_DWORD)v35)
  {
    *(_OWORD *)a4 = v35;
    a4[2] = v36;
    return result;
  }

  unsigned int v12 = v38;
  if ((v37 & 0x80000000) == 0 && !v38)
  {
    *(_DWORD *)a4 = 1;
    a4[1] = (uint64_t)a2;
    *((_DWORD *)a4 + 4) = 1210;
    return result;
  }

  if (v37 == -1)
  {
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "RL", 2uLL, this[1593]);
  }

  else
  {
    int v13 = "RM";
    if (v37 == 1) {
      int v13 = "Rm";
    }
    if (v37) {
      __int128 v14 = v13;
    }
    else {
      __int128 v14 = "Rl";
    }
    swift::Demangle::__runtime::CharVector::append(this + 1591, v14, 2uLL, this[1593]);
  }

  if (*((_BYTE *)a2 + 18) != 5)
  {
    int v17 = a2[1];
    if (*((_WORD *)v17 + 8) == 101)
    {
      uint64_t v18 = *((void *)v17 + 1);
      uint64_t v15 = (swift::Demangle::__runtime::Node *)a2;
      if (v18 != 1) {
        goto LABEL_23;
      }
      goto LABEL_26;
    }

char *anonymous namespace'::Remangler::mangleDependentGenericParamPackMarker@<X0>( char *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = a2;
  uint64_t v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v10 = 1265;
      int v11 = 1;
      goto LABEL_21;
    }

    int v7 = *(swift::Demangle::__runtime::Node **)a2;
  }

  if (*(_WORD *)(*(void *)v7 + 16LL) == 232)
  {
    swift::Demangle::__runtime::CharVector::append((char **)this + 1591, "Rv", 2uLL, *((void **)this + 1593));
    int v8 = *((unsigned __int8 *)v3 + 18);
    if ((v8 - 1) >= 2)
    {
      if (v8 != 5 || !*((_DWORD *)v3 + 2))
      {
        unsigned int v9 = 0LL;
LABEL_14:
        int v12 = *((unsigned __int8 *)v9 + 18);
        if ((v12 - 1) >= 2)
        {
          if (v12 != 5 || !*((_DWORD *)v9 + 2))
          {
            int v13 = 0LL;
            goto LABEL_20;
          }

          unsigned int v9 = (uint64_t **)*v9;
        }

        int v13 = (uint64_t **)*v9;
LABEL_20:
        int v11 = 0;
        int v3 = 0LL;
        int v10 = 0;
        goto LABEL_21;
      }

      int v3 = *(swift::Demangle::__runtime::Node **)v3;
    }

    unsigned int v9 = *(uint64_t ***)v3;
    goto LABEL_14;
  }

  int v10 = 1266;
  int v11 = 1;
LABEL_21:
  *(_DWORD *)a3 = v11;
  *(void *)(a3 + 8) = v3;
  *(_DWORD *)(a3 + 16) = v10;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleDependentGenericSignature@<X0>( uint64_t *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = (uint64_t)this;
  uint64_t v7 = *((unsigned __int8 *)a2 + 18);
  if ((_DWORD)v7 == 1) {
    goto LABEL_6;
  }
  if ((_DWORD)v7 == 5)
  {
    uint64_t v7 = *((unsigned int *)a2 + 2);
    if ((_DWORD)v7) {
      goto LABEL_6;
    }
LABEL_31:
    uint64_t v8 = 0LL;
    goto LABEL_33;
  }

  if ((_DWORD)v7 != 2) {
    goto LABEL_31;
  }
  uint64_t v7 = 2LL;
LABEL_6:
  uint64_t v8 = 0LL;
  unint64_t v9 = 0LL;
  unsigned int v10 = a3 + 1;
  do
  {
    unint64_t v11 = *((unsigned __int8 *)a2 + 18);
    if ((v11 - 1) >= 2)
    {
      char v12 = 0;
      int v13 = *a2;
    }

    else
    {
      char v12 = 1;
      int v13 = (swift::Demangle::__runtime::Node *)a2;
    }

    if (*(_WORD *)(*((void *)v13 + v9) + 16LL) == 37)
    {
      uint64_t v8 = v9 + 1;
      goto LABEL_8;
    }

    if ((_DWORD)v11 == 1) {
      goto LABEL_17;
    }
    if ((_DWORD)v11 != 5)
    {
      if ((_DWORD)v11 != 2) {
        goto LABEL_23;
      }
      unint64_t v11 = 2LL;
LABEL_17:
      if (v11 <= v9) {
        goto LABEL_23;
      }
      goto LABEL_18;
    }

    if (*((unsigned int *)a2 + 2) <= v9)
    {
LABEL_23:
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0LL;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }

uint64_t *anonymous namespace'::Remangler::mangleDependentGenericType@<X0>( uint64_t *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = (uint64_t)this;
  uint64_t v7 = *((unsigned __int8 *)a2 + 18);
  switch((_DWORD)v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      uint64_t v7 = *((unsigned int *)a2 + 2);
      if ((_DWORD)v7) {
        goto LABEL_6;
      }
      break;
    case 2:
      uint64_t v7 = 2LL;
LABEL_6:
      unsigned int v8 = a3 + 1;
      for (uint64_t i = v7 - 1; i != -1; --i)
      {
        unint64_t v10 = *((unsigned __int8 *)a2 + 18);
        unsigned int v11 = v10 - 1;
        if ((_DWORD)v10 != 1)
        {
          if ((_DWORD)v10 == 5)
          {
            unint64_t v10 = *((unsigned int *)a2 + 2);
          }

          else
          {
            if ((_DWORD)v10 != 2) {
              goto LABEL_7;
            }
            unint64_t v10 = 2LL;
          }
        }

        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(void *)(a4 + 8) = 0LL;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }

        char v12 = a2;
        if (v11 >= 2) {
          char v12 = *(swift::Demangle::__runtime::Node **)a2;
        }
        if (*(_DWORD *)a4) {
          return this;
        }
      }

      break;
  }

  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0LL;
  *(_DWORD *)(a4 + 16) = 0;
  unsigned int v13 = *(_DWORD *)(v5 + 12736);
  size_t v14 = *(unsigned int *)(v5 + 12740);
  uint64_t v15 = *(char **)(v5 + 12728);
  if (v13 >= v14)
  {
    unsigned int v16 = *(void **)(v5 + 12744);
    size_t v17 = (char *)v16[1];
    if (&v15[v14] == v17)
    {
      unint64_t v19 = (unint64_t)&v15[v14 + 1];
      unint64_t v18 = v16[2];
      if (v19 <= v18)
      {
        v16[1] = v19;
        LODWORD(v20) = 1;
LABEL_35:
        *(_DWORD *)(v5 + 12740) = v14 + v20;
        goto LABEL_36;
      }
    }

    else
    {
      unint64_t v18 = v16[2];
    }

    else {
      uint64_t v20 = (2 * v14);
    }
    size_t v21 = v20 + v14;
    if (!v17 || (unint64_t)&v17[v21] > v18)
    {
      unint64_t v22 = 2LL * v16[4];
      if (v22 <= v21 + 1) {
        unint64_t v22 = v21 + 1;
      }
      _OWORD v16[4] = v22;
      unint64_t v23 = v22 + 8;
      this = (uint64_t *)malloc(v22 + 8);
      size_t v24 = (char *)this + v23;
      *this = v16[3];
      size_t v17 = (char *)(this + 1);
      v16[2] = v24;
      void v16[3] = this;
    }

    v16[1] = &v17[v21];
    if ((_DWORD)v14)
    {
      this = (uint64_t *)memcpy(v17, *(const void **)(v5 + 12728), v14);
      LODWORD(v14) = *(_DWORD *)(v5 + 12740);
      unsigned int v13 = *(_DWORD *)(v5 + 12736);
    }

    *(void *)(v5 + 12728) = v17;
    uint64_t v15 = v17;
    goto LABEL_35;
  }

void *anonymous namespace'::Remangler::mangleDependentMemberType@<X0>( const void **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if ((_DWORD)v52)
  {
    *(_OWORD *)a4 = v52;
    *(void *)(a4 + 16) = v53;
    return result;
  }

  if (v54 == -1) {
    goto LABEL_82;
  }
  unsigned int v8 = (uint64_t **)v55;
  if (v54 != 1)
  {
    if (!v54)
    {
      *(_DWORD *)a4 = 12;
      *(void *)(a4 + 8) = a2;
      *(_DWORD *)(a4 + 16) = 1289;
      return result;
    }

    unsigned int v15 = *((_DWORD *)this + 3184);
    size_t v16 = *((unsigned int *)this + 3185);
    size_t v17 = (char *)this[1591];
    if (v15 < v16)
    {
LABEL_44:
      *((_DWORD *)this + 3184) = v15 + 1;
      v17[v15] = 81;
      if (v8)
      {
        goto LABEL_82;
      }

      unsigned int v26 = *((_DWORD *)this + 3184);
      size_t v37 = *((unsigned int *)this + 3185);
      unint64_t v28 = (char *)this[1591];
      unsigned int v38 = this[1593];
      size_t v39 = (char *)v38[1];
      if (&v28[v37] == v39)
      {
        unint64_t v46 = (unint64_t)&v28[v37 + 1];
        unint64_t v40 = v38[2];
        if (v46 <= v40)
        {
          v38[1] = v46;
          LODWORD(v47) = 1;
LABEL_79:
          *((_DWORD *)this + 3185) = v37 + v47;
LABEL_80:
          *((_DWORD *)this + 3184) = v26 + 1;
          char v51 = 88;
          goto LABEL_81;
        }
      }

      else
      {
        unint64_t v40 = v38[2];
      }

      else {
        uint64_t v47 = (2 * v37);
      }
      size_t v48 = v47 + v37;
      if (!v39 || (unint64_t)&v39[v48] > v40)
      {
        unint64_t v49 = 2LL * v38[4];
        if (v49 <= v48 + 1) {
          unint64_t v49 = v48 + 1;
        }
        v38[4] = v49;
        unint64_t v50 = v49 + 8;
        uint64_t result = malloc(v49 + 8);
        *uint64_t result = v38[3];
        size_t v39 = (char *)(result + 1);
        v38[2] = (char *)result + v50;
        void v38[3] = result;
      }

      v38[1] = &v39[v48];
      if ((_DWORD)v37)
      {
        uint64_t result = memcpy(v39, this[1591], v37);
        LODWORD(v37) = *((_DWORD *)this + 3185);
        unsigned int v26 = *((_DWORD *)this + 3184);
      }

      this[1591] = v39;
      unint64_t v28 = v39;
      goto LABEL_79;
    }

    unint64_t v18 = this[1593];
    unint64_t v19 = (char *)v18[1];
    if (&v17[v16] == v19)
    {
      unint64_t v32 = (unint64_t)&v17[v16 + 1];
      unint64_t v20 = v18[2];
      if (v32 <= v20)
      {
        v18[1] = v32;
        LODWORD(v33) = 1;
LABEL_43:
        *((_DWORD *)this + 3185) = v16 + v33;
        goto LABEL_44;
      }
    }

    else
    {
      unint64_t v20 = v18[2];
    }

    else {
      uint64_t v33 = (2 * v16);
    }
    size_t v34 = v33 + v16;
    if (!v19 || (unint64_t)&v19[v34] > v20)
    {
      unint64_t v35 = 2LL * v18[4];
      if (v35 <= v34 + 1) {
        unint64_t v35 = v34 + 1;
      }
      v18[4] = v35;
      unint64_t v36 = v35 + 8;
      uint64_t result = malloc(v35 + 8);
      *uint64_t result = v18[3];
      unint64_t v19 = (char *)(result + 1);
      uint64_t v18[2] = (char *)result + v36;
      void v18[3] = result;
    }

    v18[1] = &v19[v34];
    if ((_DWORD)v16)
    {
      uint64_t result = memcpy(v19, this[1591], v16);
      LODWORD(v16) = *((_DWORD *)this + 3185);
      unsigned int v15 = *((_DWORD *)this + 3184);
    }

    this[1591] = v19;
    size_t v17 = v19;
    goto LABEL_43;
  }

  unsigned int v9 = *((_DWORD *)this + 3184);
  size_t v10 = *((unsigned int *)this + 3185);
  unsigned int v11 = (char *)this[1591];
  if (v9 >= v10)
  {
    char v12 = this[1593];
    unsigned int v13 = (char *)v12[1];
    if (&v11[v10] == v13)
    {
      unint64_t v21 = (unint64_t)&v11[v10 + 1];
      unint64_t v14 = v12[2];
      if (v21 <= v14)
      {
        v12[1] = v21;
        LODWORD(v22) = 1;
LABEL_25:
        *((_DWORD *)this + 3185) = v10 + v22;
        goto LABEL_26;
      }
    }

    else
    {
      unint64_t v14 = v12[2];
    }

    else {
      uint64_t v22 = (2 * v10);
    }
    size_t v23 = v22 + v10;
    if (!v13 || (unint64_t)&v13[v23] > v14)
    {
      unint64_t v24 = 2LL * v12[4];
      if (v24 <= v23 + 1) {
        unint64_t v24 = v23 + 1;
      }
      _OWORD v12[4] = v24;
      unint64_t v25 = v24 + 8;
      uint64_t result = malloc(v24 + 8);
      *uint64_t result = v12[3];
      unsigned int v13 = (char *)(result + 1);
      v12[2] = (char *)result + v25;
      void v12[3] = result;
    }

    v12[1] = &v13[v23];
    if ((_DWORD)v10)
    {
      uint64_t result = memcpy(v13, this[1591], v10);
      LODWORD(v10) = *((_DWORD *)this + 3185);
      unsigned int v9 = *((_DWORD *)this + 3184);
    }

    this[1591] = v13;
    unsigned int v11 = v13;
    goto LABEL_25;
  }

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleDependentProtocolConformanceRoot@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6 = (uint64_t)this;
  int v8 = *((unsigned __int8 *)a2 + 18);
  unsigned int v9 = a2;
  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    unsigned int v9 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    size_t v10 = *v9;
    goto LABEL_7;
  }

  size_t v10 = 0LL;
LABEL_7:
  int v11 = *((unsigned __int8 *)v10 + 18);
  if (v11 != 1)
  {
    if (v11 != 5 || *((_DWORD *)v10 + 2) != 1)
    {
      int v15 = 321;
      int v16 = 10;
LABEL_18:
      *(_DWORD *)a4 = v16;
      *(void *)(a4 + 8) = v10;
      *(_DWORD *)(a4 + 16) = v15;
      return this;
    }

    size_t v10 = *(swift::Demangle::__runtime::Node **)v10;
  }

  if (*(_DWORD *)a4) {
    return this;
  }
  int v12 = *((unsigned __int8 *)a2 + 18);
  unsigned int v13 = (swift::Demangle::__runtime::Node *)a2;
  if (v12 == 2) {
    goto LABEL_16;
  }
  if (v12 == 5 && *((_DWORD *)a2 + 2) >= 2u)
  {
    unsigned int v13 = *a2;
LABEL_16:
    unint64_t v14 = (uint64_t *)*((void *)v13 + 1);
    goto LABEL_21;
  }

  unint64_t v14 = 0LL;
LABEL_21:
  if (*((_WORD *)v14 + 8) != 232) {
    goto LABEL_28;
  }
  int v17 = *((unsigned __int8 *)v14 + 18);
  if (v17 == 5 && *((_DWORD *)v14 + 2))
  {
    unint64_t v14 = (uint64_t *)*v14;
LABEL_26:
    unint64_t v14 = (uint64_t *)*v14;
    goto LABEL_28;
  }

  unint64_t v14 = 0LL;
LABEL_28:
  {
LABEL_45:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append( (char **)(v6 + 12728),  "HD",  2uLL,  *(void **)(v6 + 12744));
    size_t v10 = 0LL;
    if (*((_BYTE *)a2 + 18) == 5)
    {
      if (*((_DWORD *)a2 + 2) < 3u) {
        size_t v10 = 0LL;
      }
      else {
        size_t v10 = (swift::Demangle::__runtime::Node *)*((void *)*a2 + 2);
      }
    }

    int v23 = *((unsigned __int16 *)v10 + 8);
    if (v23 == 246 || v23 == 102)
    {
      int v24 = *((unsigned __int8 *)v10 + 18);
      if ((v23 != 102) == (v24 == 4))
      {
        int v15 = 2713;
        int v16 = 1;
      }

      else
      {
        if (v24 == 4) {
          uint64_t v25 = *(void *)v10 + 2LL;
        }
        else {
          uint64_t v25 = 1LL;
        }
        int v16 = 0;
        size_t v10 = 0LL;
        int v15 = 0;
      }
    }

    else
    {
      int v15 = 2711;
      int v16 = 1;
    }

    goto LABEL_18;
  }

  int v18 = *((unsigned __int8 *)v14 + 18);
  unint64_t v19 = (swift::Demangle::__runtime::Node **)v14;
  if ((v18 - 1) >= 2)
  {
    if (v18 == 5)
    {
      unint64_t v20 = (uint64_t *)*v14;
      unint64_t v19 = (swift::Demangle::__runtime::Node **)*v14;
LABEL_37:
      unint64_t v21 = (swift::Demangle::__runtime::Node **)&v20[*((unsigned int *)v14 + 2)];
      goto LABEL_41;
    }

    unint64_t v19 = 0LL;
  }

  switch(v18)
  {
    case 1:
      unint64_t v21 = (swift::Demangle::__runtime::Node **)(v14 + 1);
      break;
    case 2:
      unint64_t v21 = (swift::Demangle::__runtime::Node **)(v14 + 2);
      break;
    case 5:
      unint64_t v20 = (uint64_t *)*v14;
      goto LABEL_37;
    default:
      unint64_t v21 = 0LL;
      break;
  }

void *anonymous namespace'::Remangler::mangleDependentProtocolConformanceInherited@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7 = *((unsigned __int8 *)a2 + 18);
  int v8 = a2;
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    int v8 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    unsigned int v9 = *v8;
    goto LABEL_7;
  }

  unsigned int v9 = 0LL;
LABEL_7:
  unsigned int v10 = a3 + 1;
  if (*(_DWORD *)a4) {
    return result;
  }
  int v12 = *((unsigned __int8 *)a2 + 18);
  unsigned int v13 = (swift::Demangle::__runtime::Node *)a2;
  if (v12 == 2) {
    goto LABEL_12;
  }
  if (v12 == 5 && *((_DWORD *)a2 + 2) >= 2u)
  {
    unsigned int v13 = *a2;
LABEL_12:
    unint64_t v14 = (swift::Demangle::__runtime::Node *)*((void *)v13 + 1);
    goto LABEL_14;
  }

  unint64_t v14 = 0LL;
LABEL_14:
  if (*((_WORD *)v14 + 8) == 232)
  {
    int v15 = *((unsigned __int8 *)v14 + 18);
    if ((v15 - 1) >= 2)
    {
      if (v15 != 5 || !*((_DWORD *)v14 + 2))
      {
        unint64_t v14 = 0LL;
        goto LABEL_21;
      }

      unint64_t v14 = *(swift::Demangle::__runtime::Node **)v14;
    }

    unint64_t v14 = *(swift::Demangle::__runtime::Node **)v14;
  }

void *anonymous namespace'::Remangler::mangleDependentProtocolConformanceAssociated@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v8 = *((unsigned __int8 *)a2 + 18);
  unsigned int v9 = a2;
  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    unsigned int v9 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    unsigned int v10 = *v9;
    goto LABEL_7;
  }

  unsigned int v10 = 0LL;
LABEL_7:
  if (*(_DWORD *)a4) {
    return result;
  }
  int v12 = *((unsigned __int8 *)a2 + 18);
  unsigned int v13 = (swift::Demangle::__runtime::Node *)a2;
  if (v12 == 2) {
    goto LABEL_12;
  }
  if (v12 == 5 && *((_DWORD *)a2 + 2) >= 2u)
  {
    unsigned int v13 = *a2;
LABEL_12:
    unint64_t v14 = (swift::Demangle::__runtime::Node *)*((void *)v13 + 1);
    goto LABEL_14;
  }

  unint64_t v14 = 0LL;
LABEL_14:
  int v15 = *((unsigned __int8 *)v14 + 18);
  int v16 = (swift::Demangle::__runtime::Node **)v14;
  if ((v15 - 1) < 2)
  {
LABEL_18:
    int v17 = *v16;
    goto LABEL_20;
  }

  if (v15 == 5 && *((_DWORD *)v14 + 2))
  {
    int v16 = *(swift::Demangle::__runtime::Node ***)v14;
    goto LABEL_18;
  }

  int v17 = 0LL;
LABEL_20:
  int v18 = *((unsigned __int8 *)v17 + 18);
  if (v18 != 1)
  {
    if (v18 != 5 || *((_DWORD *)v17 + 2) != 1)
    {
      int v21 = 321;
      int v22 = 10;
LABEL_31:
      *(_DWORD *)a4 = v22;
      *(void *)(a4 + 8) = v17;
      *(_DWORD *)(a4 + 16) = v21;
      return result;
    }

    int v17 = *(swift::Demangle::__runtime::Node **)v17;
  }

  if (*(_DWORD *)a4) {
    return result;
  }
  int v19 = *((unsigned __int8 *)v14 + 18);
  if (v19 == 2) {
    goto LABEL_29;
  }
  if (v19 == 5 && *((_DWORD *)v14 + 2) >= 2u)
  {
    unint64_t v14 = *(swift::Demangle::__runtime::Node **)v14;
LABEL_29:
    uint64_t v20 = (uint64_t *)*((void *)v14 + 1);
    goto LABEL_34;
  }

  uint64_t v20 = 0LL;
LABEL_34:
  if (*((_WORD *)v20 + 8) != 232) {
    goto LABEL_41;
  }
  int v23 = *((unsigned __int8 *)v20 + 18);
  if (v23 == 5 && *((_DWORD *)v20 + 2))
  {
    uint64_t v20 = (uint64_t *)*v20;
LABEL_39:
    uint64_t v20 = (uint64_t *)*v20;
    goto LABEL_41;
  }

  uint64_t v20 = 0LL;
LABEL_41:
  {
LABEL_58:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "HA", 2uLL, this[1593]);
    int v17 = 0LL;
    if (*((_BYTE *)a2 + 18) == 5)
    {
      if (*((_DWORD *)a2 + 2) < 3u) {
        int v17 = 0LL;
      }
      else {
        int v17 = (swift::Demangle::__runtime::Node *)*((void *)*a2 + 2);
      }
    }

    int v29 = *((unsigned __int16 *)v17 + 8);
    if (v29 == 246 || v29 == 102)
    {
      int v30 = *((unsigned __int8 *)v17 + 18);
      if ((v29 != 102) == (v30 == 4))
      {
        int v21 = 2713;
        int v22 = 1;
      }

      else
      {
        if (v30 == 4) {
          uint64_t v31 = *(void *)v17 + 2LL;
        }
        else {
          uint64_t v31 = 1LL;
        }
        int v22 = 0;
        int v17 = 0LL;
        int v21 = 0;
      }
    }

    else
    {
      int v21 = 2711;
      int v22 = 1;
    }

    goto LABEL_31;
  }

  int v24 = *((unsigned __int8 *)v20 + 18);
  int v25 = (swift::Demangle::__runtime::Node **)v20;
  if ((v24 - 1) >= 2)
  {
    if (v24 == 5)
    {
      unsigned int v26 = (uint64_t *)*v20;
      int v25 = (swift::Demangle::__runtime::Node **)*v20;
LABEL_50:
      size_t v27 = (swift::Demangle::__runtime::Node **)&v26[*((unsigned int *)v20 + 2)];
      goto LABEL_54;
    }

    int v25 = 0LL;
  }

  switch(v24)
  {
    case 1:
      size_t v27 = (swift::Demangle::__runtime::Node **)(v20 + 1);
      break;
    case 2:
      size_t v27 = (swift::Demangle::__runtime::Node **)(v20 + 2);
      break;
    case 5:
      unsigned int v26 = (uint64_t *)*v20;
      goto LABEL_50;
    default:
      size_t v27 = 0LL;
      break;
  }

uint64_t *anonymous namespace'::Remangler::mangleDestructor@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }

    int v7 = 0LL;
  }

  switch(v6)
  {
    case 1:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      goto LABEL_16;
    case 2:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8LL * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }

  unsigned int v9 = 0LL;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "fd", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

uint64_t *anonymous namespace'::Remangler::mangleDidSet@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v5 = 0LL;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  uint64_t v5 = *(void *)a2;
}

_DWORD *anonymous namespace'::Remangler::mangleDirectness@<X0>( _DWORD *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = this;
  if (*(void *)a2 == 1LL)
  {
    uint64_t v5 = this + 3184;
    unsigned int v6 = this[3184];
    size_t v10 = this[3185];
    uint64_t v8 = (char *)*((void *)this + 1591);
    if (v6 < v10)
    {
LABEL_42:
      char v9 = 105;
      goto LABEL_43;
    }

    int v11 = (void *)*((void *)this + 1593);
    int v12 = (char *)v11[1];
    if (&v8[v10] == v12)
    {
      unint64_t v24 = (unint64_t)&v8[v10 + 1];
      unint64_t v13 = v11[2];
      if (v24 <= v13)
      {
        v11[1] = v24;
        LODWORD(v25) = 1;
LABEL_41:
        *((_DWORD *)v3 + 3185) = v10 + v25;
        goto LABEL_42;
      }
    }

    else
    {
      unint64_t v13 = v11[2];
    }

    else {
      uint64_t v25 = (2 * v10);
    }
    size_t v26 = v25 + v10;
    if (v12) {
      BOOL v27 = (unint64_t)&v12[v25 + v10] > v13;
    }
    else {
      BOOL v27 = 1;
    }
    uint64_t v8 = (char *)v11[1];
    if (v27)
    {
      unint64_t v28 = 2LL * v11[4];
      if (v28 <= v26 + 1) {
        unint64_t v28 = v26 + 1;
      }
      v11[4] = v28;
      unint64_t v29 = v28 + 8;
      this = malloc(v28 + 8);
      int v30 = (char *)this + v29;
      *(void *)this = v11[3];
      uint64_t v8 = (char *)(this + 2);
      void v11[2] = v30;
      void v11[3] = this;
    }

    v11[1] = &v8[v26];
    if ((_DWORD)v10)
    {
      this = memcpy(v8, *((const void **)v3 + 1591), v10);
      LODWORD(v10) = *((_DWORD *)v3 + 3185);
      unsigned int v6 = *((_DWORD *)v3 + 3184);
    }

    *((void *)v3 + 1591) = v8;
    goto LABEL_41;
  }

  if (!*(void *)a2)
  {
    uint64_t v5 = this + 3184;
    unsigned int v6 = this[3184];
    size_t v7 = this[3185];
    uint64_t v8 = (char *)*((void *)this + 1591);
    if (v6 < v7)
    {
      char v9 = 100;
LABEL_43:
      int v15 = 0;
      a2 = 0LL;
      int v14 = 0;
      *uint64_t v5 = v6 + 1;
      v8[v6] = v9;
      goto LABEL_44;
    }

    int v16 = (void *)*((void *)this + 1593);
    int v17 = (char *)v16[1];
    if (&v8[v7] == v17)
    {
      unint64_t v19 = (unint64_t)&v8[v7 + 1];
      unint64_t v18 = v16[2];
      if (v19 <= v18)
      {
        v16[1] = v19;
        LODWORD(v20) = 1;
LABEL_39:
        *((_DWORD *)v3 + 3185) = v7 + v20;
        char v9 = 100;
        goto LABEL_43;
      }
    }

    else
    {
      unint64_t v18 = v16[2];
    }

    else {
      uint64_t v20 = (2 * v7);
    }
    size_t v21 = v20 + v7;
    if (!v17 || (unint64_t)&v17[v21] > v18)
    {
      unint64_t v22 = 2LL * v16[4];
      if (v22 <= v21 + 1) {
        unint64_t v22 = v21 + 1;
      }
      _OWORD v16[4] = v22;
      unint64_t v23 = v22 + 8;
      this = malloc(v22 + 8);
      *(void *)this = v16[3];
      int v17 = (char *)(this + 2);
      v16[2] = (char *)this + v23;
      void v16[3] = this;
    }

    v16[1] = &v17[v21];
    if ((_DWORD)v7)
    {
      this = memcpy(v17, *((const void **)v3 + 1591), v7);
      LODWORD(v7) = *((_DWORD *)v3 + 3185);
      unsigned int v6 = *((_DWORD *)v3 + 3184);
    }

    *((void *)v3 + 1591) = v17;
    uint64_t v8 = v17;
    goto LABEL_39;
  }

  int v14 = 1335;
  int v15 = 13;
LABEL_44:
  *(_DWORD *)a3 = v15;
  *(void *)(a3 + 8) = a2;
  *(_DWORD *)(a3 + 16) = v14;
  return this;
}

{
  void *v3;
  _DWORD *v5;
  unsigned int v6;
  size_t v7;
  char *v8;
  char v9;
  size_t v10;
  void *v11;
  char *v12;
  unint64_t v13;
  int v14;
  int v15;
  void *v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  size_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  size_t v26;
  BOOL v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  int v3 = this;
  if (*(void *)a2 == 1LL)
  {
    uint64_t v5 = this + 3184;
    unsigned int v6 = this[3184];
    size_t v10 = this[3185];
    uint64_t v8 = (char *)*((void *)this + 1591);
    if (v6 < v10)
    {
LABEL_42:
      char v9 = 105;
      goto LABEL_43;
    }

    int v11 = (void *)*((void *)this + 1593);
    int v12 = (char *)v11[1];
    if (&v8[v10] == v12)
    {
      unint64_t v24 = (unint64_t)&v8[v10 + 1];
      unint64_t v13 = v11[2];
      if (v24 <= v13)
      {
        v11[1] = v24;
        LODWORD(v25) = 1;
LABEL_41:
        *((_DWORD *)v3 + 3185) = v10 + v25;
        goto LABEL_42;
      }
    }

    else
    {
      unint64_t v13 = v11[2];
    }

    else {
      uint64_t v25 = (2 * v10);
    }
    size_t v26 = v25 + v10;
    if (v12) {
      BOOL v27 = (unint64_t)&v12[v25 + v10] > v13;
    }
    else {
      BOOL v27 = 1;
    }
    uint64_t v8 = (char *)v11[1];
    if (v27)
    {
      unint64_t v28 = 2LL * v11[4];
      if (v28 <= v26 + 1) {
        unint64_t v28 = v26 + 1;
      }
      v11[4] = v28;
      unint64_t v29 = v28 + 8;
      this = malloc(v28 + 8);
      int v30 = (char *)this + v29;
      *(void *)this = v11[3];
      uint64_t v8 = (char *)(this + 2);
      void v11[2] = v30;
      void v11[3] = this;
    }

    v11[1] = &v8[v26];
    if ((_DWORD)v10)
    {
      this = memcpy(v8, *((const void **)v3 + 1591), v10);
      LODWORD(v10) = *((_DWORD *)v3 + 3185);
      unsigned int v6 = *((_DWORD *)v3 + 3184);
    }

    *((void *)v3 + 1591) = v8;
    goto LABEL_41;
  }

  if (!*(void *)a2)
  {
    uint64_t v5 = this + 3184;
    unsigned int v6 = this[3184];
    size_t v7 = this[3185];
    uint64_t v8 = (char *)*((void *)this + 1591);
    if (v6 < v7)
    {
      char v9 = 100;
LABEL_43:
      int v15 = 0;
      a2 = 0LL;
      int v14 = 0;
      *uint64_t v5 = v6 + 1;
      v8[v6] = v9;
      goto LABEL_44;
    }

    int v16 = (void *)*((void *)this + 1593);
    int v17 = (char *)v16[1];
    if (&v8[v7] == v17)
    {
      unint64_t v19 = (unint64_t)&v8[v7 + 1];
      unint64_t v18 = v16[2];
      if (v19 <= v18)
      {
        v16[1] = v19;
        LODWORD(v20) = 1;
LABEL_39:
        *((_DWORD *)v3 + 3185) = v7 + v20;
        char v9 = 100;
        goto LABEL_43;
      }
    }

    else
    {
      unint64_t v18 = v16[2];
    }

    else {
      uint64_t v20 = (2 * v7);
    }
    size_t v21 = v20 + v7;
    if (!v17 || (unint64_t)&v17[v21] > v18)
    {
      unint64_t v22 = 2LL * v16[4];
      if (v22 <= v21 + 1) {
        unint64_t v22 = v21 + 1;
      }
      _OWORD v16[4] = v22;
      unint64_t v23 = v22 + 8;
      this = malloc(v22 + 8);
      *(void *)this = v16[3];
      int v17 = (char *)(this + 2);
      v16[2] = (char *)this + v23;
      void v16[3] = this;
    }

    v16[1] = &v17[v21];
    if ((_DWORD)v7)
    {
      this = memcpy(v17, *((const void **)v3 + 1591), v7);
      LODWORD(v7) = *((_DWORD *)v3 + 3185);
      unsigned int v6 = *((_DWORD *)v3 + 3184);
    }

    *((void *)v3 + 1591) = v17;
    uint64_t v8 = v17;
    goto LABEL_39;
  }

  int v14 = 797;
  int v15 = 13;
LABEL_44:
  *(_DWORD *)a3 = v15;
  *(void *)(a3 + 8) = a2;
  *(_DWORD *)(a3 + 16) = v14;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleDynamicSelf@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append( (char **)v4 + 1591,  "XD",  2uLL,  *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0LL;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleEnumCase@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append( (char **)v4 + 1591,  "WC",  2uLL,  *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0LL;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleEscapingAutoClosureType@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *((unsigned __int8 *)a2 + 18);
  switch((_DWORD)v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      uint64_t v7 = *((unsigned int *)a2 + 2);
      if ((_DWORD)v7) {
        goto LABEL_6;
      }
      break;
    case 2:
      uint64_t v7 = 2LL;
LABEL_6:
      unsigned int v8 = a3 + 1;
      for (uint64_t i = v7 - 1; i != -1; --i)
      {
        unint64_t v10 = *((unsigned __int8 *)a2 + 18);
        unsigned int v11 = v10 - 1;
        if ((_DWORD)v10 != 1)
        {
          if ((_DWORD)v10 == 5)
          {
            unint64_t v10 = *((unsigned int *)a2 + 2);
          }

          else
          {
            if ((_DWORD)v10 != 2) {
              goto LABEL_7;
            }
            unint64_t v10 = 2LL;
          }
        }

        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(void *)(a4 + 8) = 0LL;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }

        int v12 = a2;
        if (v11 >= 2) {
          int v12 = *(swift::Demangle::__runtime::Node **)a2;
        }
        if (*(_DWORD *)a4) {
          return result;
        }
      }

      break;
  }

  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0LL;
  *(_DWORD *)(a4 + 16) = 0;
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "XA", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0LL;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleNoEscapeFunctionType@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *((unsigned __int8 *)a2 + 18);
  switch((_DWORD)v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      uint64_t v7 = *((unsigned int *)a2 + 2);
      if ((_DWORD)v7) {
        goto LABEL_6;
      }
      break;
    case 2:
      uint64_t v7 = 2LL;
LABEL_6:
      unsigned int v8 = a3 + 1;
      for (uint64_t i = v7 - 1; i != -1; --i)
      {
        unint64_t v10 = *((unsigned __int8 *)a2 + 18);
        unsigned int v11 = v10 - 1;
        if ((_DWORD)v10 != 1)
        {
          if ((_DWORD)v10 == 5)
          {
            unint64_t v10 = *((unsigned int *)a2 + 2);
          }

          else
          {
            if ((_DWORD)v10 != 2) {
              goto LABEL_7;
            }
            unint64_t v10 = 2LL;
          }
        }

        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(void *)(a4 + 8) = 0LL;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }

        int v12 = a2;
        if (v11 >= 2) {
          int v12 = *(swift::Demangle::__runtime::Node **)a2;
        }
        if (*(_DWORD *)a4) {
          return result;
        }
      }

      break;
  }

  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0LL;
  *(_DWORD *)(a4 + 16) = 0;
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "XE", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0LL;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleGlobalActorFunctionType@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  uint64_t v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      uint64_t v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }

    uint64_t v7 = 0LL;
  }

  switch(v6)
  {
    case 1:
      char v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      goto LABEL_16;
    case 2:
      char v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      char v9 = (swift::Demangle::__runtime::Node *)(v8 + 8LL * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }

  char v9 = 0LL;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Yc", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

void *anonymous namespace'::Remangler::mangleDifferentiableFunctionType@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  int v6 = this + 1591;
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Yj", 2uLL, this[1593]);
  uint64_t v8 = *(void *)a2;
  unsigned int v9 = *((_DWORD *)this + 3184);
  size_t v10 = *((unsigned int *)this + 3185);
  unsigned int v11 = this[1591];
  if (v9 >= v10)
  {
    int v12 = this[1593];
    unint64_t v13 = (char *)*((void *)v12 + 1);
    if (&v11[v10] == v13)
    {
      unint64_t v15 = (unint64_t)&v11[v10 + 1];
      unint64_t v14 = *((void *)v12 + 2);
      if (v15 <= v14)
      {
        *((void *)v12 + 1) = v15;
        LODWORD(v16) = 1;
LABEL_20:
        *((_DWORD *)this + 3185) = v10 + v16;
        goto LABEL_21;
      }
    }

    else
    {
      unint64_t v14 = *((void *)v12 + 2);
    }

    else {
      uint64_t v16 = (2 * v10);
    }
    size_t v17 = v16 + v10;
    if (v13) {
      BOOL v18 = (unint64_t)&v13[v16 + v10] > v14;
    }
    else {
      BOOL v18 = 1;
    }
    unsigned int v11 = (char *)*((void *)v12 + 1);
    if (v18)
    {
      unint64_t v19 = 2LL * *((void *)v12 + 4);
      if (v19 <= v17 + 1) {
        unint64_t v19 = v17 + 1;
      }
      *((void *)v12 + 4) = v19;
      unint64_t v20 = v19 + 8;
      uint64_t result = malloc(v19 + 8);
      size_t v21 = (char *)result + v20;
      *uint64_t result = *((void *)v12 + 3);
      unsigned int v11 = (char *)(result + 1);
      *((void *)v12 + 2) = v21;
      *((void *)v12 + 3) = result;
    }

    *((void *)v12 + 1) = &v11[v17];
    if ((_DWORD)v10)
    {
      uint64_t result = memcpy(v11, this[1591], v10);
      LODWORD(v10) = *((_DWORD *)this + 3185);
      unsigned int v9 = *((_DWORD *)this + 3184);
    }

    *int v6 = v11;
    goto LABEL_20;
  }

uint64_t *anonymous namespace'::Remangler::mangleExistentialMetatype@<X0>( uint64_t *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  uint64_t v5 = this;
  int v7 = *((unsigned __int8 *)a2 + 18);
  uint64_t v8 = a2;
  unsigned int v9 = a3 + 1;
  if (*(_WORD *)(*(void *)v8 + 16LL) == 146)
  {
    size_t v10 = a2;
    if (v7 != 2)
    {
      if (v7 != 5 || *((_DWORD *)a2 + 2) < 2u)
      {
        *(_DWORD *)a4 = 0;
        *(void *)(a4 + 8) = 0LL;
        *(_DWORD *)(a4 + 16) = 0;
LABEL_17:
        this = (uint64_t *)swift::Demangle::__runtime::CharVector::append( (char **)v5 + 1591,  "Xm",  2uLL,  (void *)v5[1593]);
        int v11 = *((unsigned __int8 *)v4 + 18);
        if ((v11 - 1) < 2) {
        if (v11 == 5 && *((_DWORD *)v4 + 2))
        }
        {
          int v4 = *(swift::Demangle::__runtime::Node **)v4;
        }

        goto LABEL_23;
      }

      size_t v10 = *(swift::Demangle::__runtime::Node **)a2;
    }

    if (*(_DWORD *)a4) {
      return this;
    }
    goto LABEL_17;
  }

  if (v7 != 1)
  {
    if (v7 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      *(_DWORD *)a4 = 10;
      *(void *)(a4 + 8) = a2;
      *(_DWORD *)(a4 + 16) = 321;
      return this;
    }

    int v4 = *(swift::Demangle::__runtime::Node **)a2;
  }

  if (*(_DWORD *)a4) {
    return this;
  }
  this = (uint64_t *)swift::Demangle::__runtime::CharVector::append((char **)v5 + 1591, "Xp", 2uLL, (void *)v5[1593]);
LABEL_23:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0LL;
  *(_DWORD *)(a4 + 16) = 0;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleExplicitClosure@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  unsigned int v9 = (swift::Demangle::__runtime::Node **)a2;
  if ((v8 - 1) < 2)
  {
LABEL_5:
    if (*(_DWORD *)a4) {
      return result;
    }
    if (*((_BYTE *)v4 + 18) != 5) {
      goto LABEL_12;
    }
    goto LABEL_9;
  }

  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    unsigned int v9 = *(swift::Demangle::__runtime::Node ***)a2;
    goto LABEL_5;
  }

  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0LL;
  *(_DWORD *)(a4 + 16) = 0;
  if (v8 != 5)
  {
LABEL_12:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    goto LABEL_13;
  }

uint64_t *anonymous namespace'::Remangler::mangleExtension@<X0>( uint64_t *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = this;
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  unsigned int v9 = a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0LL;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }

    unsigned int v9 = *(swift::Demangle::__runtime::Node **)a2;
  }

  if (*(_DWORD *)a4) {
    return this;
  }
  int v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  size_t v10 = (swift::Demangle::__runtime::Node **)a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0LL;
      *(_DWORD *)(a4 + 16) = 0;
      if (v8 != 5) {
        goto LABEL_18;
      }
      goto LABEL_16;
    }

    size_t v10 = *(swift::Demangle::__runtime::Node ***)a2;
  }

  if (*(_DWORD *)a4) {
    return this;
  }
  if (*((_BYTE *)a2 + 18) != 5)
  {
LABEL_18:
    unsigned int v11 = *((_DWORD *)v5 + 3184);
    size_t v12 = *((unsigned int *)v5 + 3185);
    unint64_t v13 = (char *)v5[1591];
    if (v11 < v12)
    {
LABEL_35:
      *((_DWORD *)v5 + 3184) = v11 + 1;
      v13[v11] = 69;
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0LL;
      *(_DWORD *)(a4 + 16) = 0;
      return this;
    }

    unint64_t v14 = (void *)v5[1593];
    unint64_t v15 = (char *)v14[1];
    if (&v13[v12] == v15)
    {
      unint64_t v17 = (unint64_t)&v13[v12 + 1];
      unint64_t v16 = v14[2];
      if (v17 <= v16)
      {
        v14[1] = v17;
        LODWORD(v18) = 1;
LABEL_34:
        *((_DWORD *)v5 + 3185) = v12 + v18;
        goto LABEL_35;
      }
    }

    else
    {
      unint64_t v16 = v14[2];
    }

    else {
      uint64_t v18 = (2 * v12);
    }
    size_t v19 = v18 + v12;
    if (!v15 || (unint64_t)&v15[v19] > v16)
    {
      unint64_t v20 = 2LL * v14[4];
      if (v20 <= v19 + 1) {
        unint64_t v20 = v19 + 1;
      }
      uint64_t v14[4] = v20;
      unint64_t v21 = v20 + 8;
      this = (uint64_t *)malloc(v20 + 8);
      unint64_t v22 = (char *)this + v21;
      *this = v14[3];
      unint64_t v15 = (char *)(this + 1);
      v14[2] = v22;
      void v14[3] = this;
    }

    v14[1] = &v15[v19];
    if ((_DWORD)v12)
    {
      this = (uint64_t *)memcpy(v15, (const void *)v5[1591], v12);
      LODWORD(v12) = *((_DWORD *)v5 + 3185);
      unsigned int v11 = *((_DWORD *)v5 + 3184);
    }

    v5[1591] = (uint64_t)v15;
    unint64_t v13 = v15;
    goto LABEL_34;
  }

uint64_t *anonymous namespace'::Remangler::mangleExtensionAttachedMacroExpansion@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  unsigned int v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0LL;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }

    unsigned int v9 = (swift::Demangle::__runtime::Node **)*a2;
  }

  if (*(_DWORD *)a4) {
    return result;
  }
  int v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  unsigned int v11 = (swift::Demangle::__runtime::Node *)a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0LL;
      *(_DWORD *)(a4 + 16) = 0;
      if (v8 != 5) {
        goto LABEL_19;
      }
      goto LABEL_16;
    }

    unsigned int v11 = *a2;
  }

  if (*(_DWORD *)a4) {
    return result;
  }
  if (*((_BYTE *)a2 + 18) != 5) {
    goto LABEL_19;
  }
LABEL_16:
  if (*((_DWORD *)a2 + 2) > 2u)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    goto LABEL_20;
  }

uint64_t *anonymous namespace'::Remangler::mangleFieldOffset@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  unsigned int v9 = a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0LL;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }

    unsigned int v9 = *(swift::Demangle::__runtime::Node **)a2;
  }

  if (*(_DWORD *)a4) {
    return result;
  }
LABEL_8:
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Wv", 2uLL, this[1593]);
  int v11 = *((unsigned __int8 *)v4 + 18);
  if ((v11 - 1) < 2) {
  if (v11 == 5 && *((_DWORD *)v4 + 2))
  }
  {
    int v4 = *(swift::Demangle::__runtime::Node **)v4;
  }

  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0LL;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleFreestandingMacroExpansion@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  unsigned int v9 = a2;
  if ((v8 - 1) < 2)
  {
LABEL_5:
    if (*(_DWORD *)a4) {
      return result;
    }
    int v8 = *((unsigned __int8 *)a2 + 18);
    if (v8 != 5) {
      goto LABEL_13;
    }
    goto LABEL_9;
  }

  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    unsigned int v9 = (swift::Demangle::__runtime::Node **)*a2;
    goto LABEL_5;
  }

  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0LL;
  *(_DWORD *)(a4 + 16) = 0;
  if (v8 != 5) {
    goto LABEL_13;
  }
LABEL_9:
  if (*((_DWORD *)a2 + 2) < 4u || (int v11 = (swift::Demangle::__runtime::Node *)*((void *)*a2 + 3)) == 0LL)
  {
LABEL_15:
    if (*((_DWORD *)a2 + 2) >= 2u)
    {
      size_t v12 = *a2;
LABEL_17:
      if (*(_DWORD *)a4) {
        return result;
      }
      goto LABEL_20;
    }

    goto LABEL_19;
  }

  if (*(_DWORD *)a4) {
    return result;
  }
  int v8 = *((unsigned __int8 *)a2 + 18);
LABEL_13:
  size_t v12 = (swift::Demangle::__runtime::Node *)a2;
  if (v8 == 2) {
    goto LABEL_17;
  }
  if (v8 == 5) {
    goto LABEL_15;
  }
LABEL_19:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0LL;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_20:
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "fMf", 3uLL, this[1593]);
  if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u) {
  *(_DWORD *)a4 = 0;
  }
  *(void *)(a4 + 8) = 0LL;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleFullTypeMetadata@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append( (char **)v4 + 1591,  "Mf",  2uLL,  *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0LL;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

void *anonymous namespace'::Remangler::mangleFunction@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  unsigned int v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0LL;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }

    unsigned int v9 = (swift::Demangle::__runtime::Node **)*a2;
  }

  if (*(_DWORD *)a4) {
    return result;
  }
  int v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  int v11 = (swift::Demangle::__runtime::Node *)a2;
  if (v8 == 2) {
    goto LABEL_12;
  }
  if (v8 == 5 && *((_DWORD *)a2 + 2) >= 2u)
  {
    int v11 = *a2;
LABEL_12:
    if (*(_DWORD *)a4) {
      return result;
    }
    int v8 = *((unsigned __int8 *)a2 + 18);
    if (v8 != 5) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }

  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0LL;
  *(_DWORD *)(a4 + 16) = 0;
  if (v8 != 5)
  {
LABEL_14:
    size_t v12 = 0LL;
    BOOL v13 = MEMORY[0x10] == 290;
    goto LABEL_21;
  }

void anonymous namespace'::Remangler::mangleFunctionSignatureSpecialization( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = a2;
  int v8 = *((unsigned __int8 *)a2 + 18);
  unsigned int v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 == 5)
    {
      uint64_t v10 = *(void *)a2;
      unsigned int v9 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_9:
      int v11 = (swift::Demangle::__runtime::Node *)(v10 + 8LL * *((unsigned int *)a2 + 2));
      goto LABEL_13;
    }

    unsigned int v9 = 0LL;
  }

  switch(v8)
  {
    case 1:
      int v11 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      break;
    case 2:
      int v11 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      break;
    case 5:
      uint64_t v10 = *(void *)a2;
      goto LABEL_9;
    default:
      int v11 = 0LL;
      break;
  }

uint64_t anonymous namespace'::Remangler::mangleFunctionSignatureSpecializationParam@<X0>( uint64_t this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = a2;
  uint64_t v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  unsigned int v7 = a2;
  if (v6 != 5 || !*((_DWORD *)a2 + 2))
  {
    unsigned int v12 = *(_DWORD *)(this + 12736);
    size_t v13 = *(unsigned int *)(this + 12740);
    int v14 = *(_BYTE **)(this + 12728);
    if (v12 < v13)
    {
LABEL_30:
      int v31 = 0;
      int v3 = 0LL;
      int v32 = 0;
      *(_DWORD *)(v4 + 12736) = v12 + 1;
      v14[v12] = 110;
      goto LABEL_194;
    }

    int v15 = *(void **)(this + 12744);
    unint64_t v16 = (_BYTE *)v15[1];
    if (&v14[v13] == v16)
    {
      unint64_t v24 = (unint64_t)&v14[v13 + 1];
      unint64_t v17 = v15[2];
      if (v24 <= v17)
      {
        v15[1] = v24;
        LODWORD(v25) = 1;
LABEL_29:
        *(_DWORD *)(v4 + 12740) = v13 + v25;
        goto LABEL_30;
      }
    }

    else
    {
      unint64_t v17 = v15[2];
    }

    else {
      uint64_t v25 = (2 * v13);
    }
    size_t v26 = v25 + v13;
    if (v16) {
      BOOL v27 = (unint64_t)&v16[v25 + v13] > v17;
    }
    else {
      BOOL v27 = 1;
    }
    int v14 = (_BYTE *)v15[1];
    if (v27)
    {
      unint64_t v28 = 2LL * v15[4];
      if (v28 <= v26 + 1) {
        unint64_t v28 = v26 + 1;
      }
      v15[4] = v28;
      unint64_t v29 = v28 + 8;
      this = (uint64_t)malloc(v28 + 8);
      uint64_t v30 = this + v29;
      *(void *)this = v15[3];
      int v14 = (_BYTE *)(this + 8);
      v15[2] = v30;
      void v15[3] = this;
    }

    v15[1] = &v14[v26];
    if ((_DWORD)v13)
    {
      this = (uint64_t)memcpy(v14, *(const void **)(v4 + 12728), v13);
      LODWORD(v13) = *(_DWORD *)(v4 + 12740);
      unsigned int v12 = *(_DWORD *)(v4 + 12736);
    }

    *(void *)(v4 + 12728) = v14;
    goto LABEL_29;
  }

  unsigned int v7 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_5:
  int v8 = **(_DWORD **)v7;
  switch(v8)
  {
    case 0:
      unsigned int v9 = (char **)(this + 12728);
      uint64_t v10 = *(void **)(v4 + 12744);
      int v11 = "pf";
      goto LABEL_59;
    case 1:
      unsigned int v9 = (char **)(this + 12728);
      uint64_t v10 = *(void **)(v4 + 12744);
      int v11 = "pg";
      goto LABEL_59;
    case 2:
      uint64_t v33 = (char **)(this + 12728);
      int v34 = *(void **)(this + 12744);
      int v35 = "pi";
      goto LABEL_34;
    case 3:
      uint64_t v33 = (char **)(this + 12728);
      int v34 = *(void **)(this + 12744);
      int v35 = "pd";
LABEL_34:
      swift::Demangle::__runtime::CharVector::append(v33, v35, 2uLL, v34);
      if (*((_BYTE *)v3 + 18) == 5) {
        int v3 = *(swift::Demangle::__runtime::Node **)v3;
      }
      uint64_t v36 = *((void *)v3 + 1);
      int v11 = *(const char **)v36;
      size_t v37 = *(void *)(v36 + 8);
      uint64_t v10 = *(void **)(v4 + 12744);
      unsigned int v9 = v33;
      goto LABEL_60;
    case 4:
      unint64_t v38 = (char **)(this + 12728);
      swift::Demangle::__runtime::CharVector::append((char **)(this + 12728), "ps", 2uLL, *(void **)(this + 12744));
      unsigned int v39 = v3;
      if (*((_BYTE *)v3 + 18) == 5) {
        unsigned int v39 = *(swift::Demangle::__runtime::Node **)v3;
      }
      unint64_t v40 = (uint64_t *)*((void *)v39 + 1);
      this = *v40;
      uint64_t v41 = v40[1];
      if (v41 == 4)
      {
        this = memcmp((const void *)this, "objc", 4uLL);
        if (!(_DWORD)this)
        {
          this = (uint64_t)swift::Demangle::__runtime::RemanglerBuffer::operator<<((char **)(v4 + 12728), 99);
          goto LABEL_61;
        }

        goto LABEL_74;
      }

      if (v41 != 3)
      {
        if (v41 == 2 && *(_WORD *)this == 14453)
        {
          unsigned int v42 = *(_DWORD *)(v4 + 12736);
          size_t v43 = *(unsigned int *)(v4 + 12740);
          unint64_t v44 = *(char **)(v4 + 12728);
          if (v42 < v43)
          {
LABEL_210:
            int v31 = 0;
            int v3 = 0LL;
            int v32 = 0;
            *(_DWORD *)(v4 + 12736) = v42 + 1;
            v44[v42] = 98;
            goto LABEL_194;
          }

          unint64_t v45 = *(void **)(v4 + 12744);
          unint64_t v46 = (char *)v45[1];
          if (&v44[v43] == v46)
          {
            unint64_t v120 = (unint64_t)&v44[v43 + 1];
            unint64_t v47 = v45[2];
            if (v120 <= v47)
            {
              v45[1] = v120;
              LODWORD(v121) = 1;
LABEL_209:
              *(_DWORD *)(v4 + 12740) = v43 + v121;
              goto LABEL_210;
            }
          }

          else
          {
            unint64_t v47 = v45[2];
          }

          else {
            uint64_t v121 = (2 * v43);
          }
          size_t v122 = v121 + v43;
          if (!v46 || (unint64_t)&v46[v122] > v47)
          {
            unint64_t v123 = 2LL * v45[4];
            if (v123 <= v122 + 1) {
              unint64_t v123 = v122 + 1;
            }
            v45[4] = v123;
            unint64_t v124 = v123 + 8;
            this = (uint64_t)malloc(v123 + 8);
            uint64_t v125 = this + v124;
            *(void *)this = v45[3];
            unint64_t v46 = (char *)(this + 8);
            v45[2] = v125;
            void v45[3] = this;
          }

          v45[1] = &v46[v122];
          if ((_DWORD)v43)
          {
            this = (uint64_t)memcpy(v46, *(const void **)(v4 + 12728), v43);
            LODWORD(v43) = *(_DWORD *)(v4 + 12740);
            unsigned int v42 = *(_DWORD *)(v4 + 12736);
          }

          *unint64_t v38 = v46;
          unint64_t v44 = v46;
          goto LABEL_209;
        }

uint64_t *anonymous namespace'::Remangler::mangleFunctionType@<X0>( uint64_t *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = (uint64_t)this;
  uint64_t v7 = *((unsigned __int8 *)a2 + 18);
  switch((_DWORD)v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      uint64_t v7 = *((unsigned int *)a2 + 2);
      if ((_DWORD)v7) {
        goto LABEL_6;
      }
      break;
    case 2:
      uint64_t v7 = 2LL;
LABEL_6:
      unsigned int v8 = a3 + 1;
      for (uint64_t i = v7 - 1; i != -1; --i)
      {
        unint64_t v10 = *((unsigned __int8 *)a2 + 18);
        unsigned int v11 = v10 - 1;
        if ((_DWORD)v10 != 1)
        {
          if ((_DWORD)v10 == 5)
          {
            unint64_t v10 = *((unsigned int *)a2 + 2);
          }

          else
          {
            if ((_DWORD)v10 != 2) {
              goto LABEL_7;
            }
            unint64_t v10 = 2LL;
          }
        }

        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(void *)(a4 + 8) = 0LL;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }

        unsigned int v12 = a2;
        if (v11 >= 2) {
          unsigned int v12 = *(swift::Demangle::__runtime::Node **)a2;
        }
        if (*(_DWORD *)a4) {
          return this;
        }
      }

      break;
  }

  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0LL;
  *(_DWORD *)(a4 + 16) = 0;
  unsigned int v13 = *(_DWORD *)(v5 + 12736);
  size_t v14 = *(unsigned int *)(v5 + 12740);
  int v15 = *(char **)(v5 + 12728);
  if (v13 >= v14)
  {
    unint64_t v16 = *(void **)(v5 + 12744);
    unint64_t v17 = (char *)v16[1];
    if (&v15[v14] == v17)
    {
      unint64_t v19 = (unint64_t)&v15[v14 + 1];
      unint64_t v18 = v16[2];
      if (v19 <= v18)
      {
        v16[1] = v19;
        LODWORD(v20) = 1;
LABEL_35:
        *(_DWORD *)(v5 + 12740) = v14 + v20;
        goto LABEL_36;
      }
    }

    else
    {
      unint64_t v18 = v16[2];
    }

    else {
      uint64_t v20 = (2 * v14);
    }
    size_t v21 = v20 + v14;
    if (!v17 || (unint64_t)&v17[v21] > v18)
    {
      unint64_t v22 = 2LL * v16[4];
      if (v22 <= v21 + 1) {
        unint64_t v22 = v21 + 1;
      }
      _OWORD v16[4] = v22;
      unint64_t v23 = v22 + 8;
      this = (uint64_t *)malloc(v22 + 8);
      unint64_t v24 = (char *)this + v23;
      *this = v16[3];
      unint64_t v17 = (char *)(this + 1);
      v16[2] = v24;
      void v16[3] = this;
    }

    v16[1] = &v17[v21];
    if ((_DWORD)v14)
    {
      this = (uint64_t *)memcpy(v17, *(const void **)(v5 + 12728), v14);
      LODWORD(v14) = *(_DWORD *)(v5 + 12740);
      unsigned int v13 = *(_DWORD *)(v5 + 12736);
    }

    *(void *)(v5 + 12728) = v17;
    int v15 = v17;
    goto LABEL_35;
  }

uint64_t *anonymous namespace'::Remangler::mangleConstrainedExistential@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = a2;
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  unsigned int v9 = (swift::Demangle::__runtime::Node **)a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0LL;
      *(_DWORD *)(a4 + 16) = 0;
      if (v8 == 2) {
        goto LABEL_12;
      }
      goto LABEL_9;
    }

    unsigned int v9 = *(swift::Demangle::__runtime::Node ***)a2;
  }

  if (*(_DWORD *)a4) {
    return result;
  }
  int v8 = *((unsigned __int8 *)v4 + 18);
  if (v8 == 2)
  {
LABEL_12:
    if (*(_DWORD *)a4) {
      return result;
    }
    goto LABEL_15;
  }

unsigned int *anonymous namespace'::Remangler::mangleConstrainedExistentialRequirementList@<X0>( unsigned int *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = (_anonymous_namespace_::Remangler *)this;
  BOOL v13 = 1;
  uint64_t v7 = *((unsigned __int8 *)a2 + 18);
  switch((_DWORD)v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      uint64_t v7 = *((unsigned int *)a2 + 2);
      if ((_DWORD)v7) {
        goto LABEL_6;
      }
      break;
    case 2:
      uint64_t v7 = 2LL;
LABEL_6:
      unint64_t v8 = 0LL;
      unsigned int v9 = a3 + 1;
      while (1)
      {
        unint64_t v10 = *((unsigned __int8 *)a2 + 18);
        unsigned int v11 = v10 - 1;
        if ((_DWORD)v10 == 1) {
          goto LABEL_13;
        }
        if ((_DWORD)v10 != 5) {
          break;
        }
        if (*((unsigned int *)a2 + 2) <= v8)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(void *)(a4 + 8) = 0LL;
          *(_DWORD *)(a4 + 16) = 0;
          goto LABEL_8;
        }

uint64_t *anonymous namespace'::Remangler::mangleGenericPartialSpecialization@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v8 = *((unsigned __int8 *)a2 + 18);
  unsigned int v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 == 5)
    {
      uint64_t v10 = *(void *)a2;
      unsigned int v9 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_9:
      unsigned int v11 = (swift::Demangle::__runtime::Node *)(v10 + 8LL * *((unsigned int *)a2 + 2));
      goto LABEL_15;
    }

    unsigned int v9 = 0LL;
  }

  switch(v8)
  {
    case 1:
      unsigned int v11 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      goto LABEL_15;
    case 2:
      unsigned int v11 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      goto LABEL_15;
    case 5:
      uint64_t v10 = *(void *)a2;
      goto LABEL_9;
  }

  unsigned int v11 = 0LL;
LABEL_15:
  while (v9 != v11)
  {
    unsigned int v12 = *(swift::Demangle::__runtime::Node **)v9;
    if (*(_WORD *)(*(void *)v9 + 16LL) == 94)
    {
      int v19 = *((unsigned __int8 *)v12 + 18);
      if ((v19 - 1) >= 2)
      {
        if (v19 != 5 || !*((_DWORD *)v12 + 2))
        {
          *(_DWORD *)a4 = 0;
          *(void *)(a4 + 8) = 0LL;
          *(_DWORD *)(a4 + 16) = 0;
          break;
        }

        unsigned int v12 = *(swift::Demangle::__runtime::Node **)v12;
      }

      if (*(_DWORD *)a4) {
        return result;
      }
      break;
    }

    unsigned int v9 = (swift::Demangle::__runtime::Node *)((char *)v9 + 8);
  }

  BOOL v13 = (swift::Demangle::__runtime::Node **)((char *)a2 + 16);
  if (*((_WORD *)a2 + 8) == 87) {
    size_t v14 = "TP";
  }
  else {
    size_t v14 = "Tp";
  }
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, v14, 2uLL, this[1593]);
  int v16 = *((unsigned __int8 *)a2 + 18);
  unint64_t v17 = (swift::Demangle::__runtime::Node **)a2;
  if ((v16 - 1) >= 2)
  {
    if (v16 == 5)
    {
      uint64_t v18 = *(void *)a2;
      unint64_t v17 = *(swift::Demangle::__runtime::Node ***)a2;
      goto LABEL_33;
    }

    unint64_t v17 = 0LL;
  }

  if (v16 == 1)
  {
    BOOL v13 = (swift::Demangle::__runtime::Node **)((char *)a2 + 8);
LABEL_36:
    if (v17 != v13) {
      goto LABEL_37;
    }
    goto LABEL_43;
  }

  if (v16 == 2) {
    goto LABEL_36;
  }
  if (v16 != 5)
  {
    BOOL v13 = 0LL;
    if (v17) {
      goto LABEL_37;
    }
LABEL_43:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

  uint64_t v18 = *(void *)a2;
LABEL_33:
  BOOL v13 = (swift::Demangle::__runtime::Node **)(v18 + 8LL * *((unsigned int *)a2 + 2));
  if (v17 == v13) {
    goto LABEL_43;
  }
LABEL_37:
  unsigned int v20 = a3 + 1;
  while (1)
  {
    if (*((_WORD *)*v17 + 8) != 94)
    {
      if (*(_DWORD *)a4) {
        return result;
      }
    }

    if (++v17 == v13) {
      goto LABEL_43;
    }
  }

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleGenericProtocolWitnessTable@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append( (char **)v4 + 1591,  "WG",  2uLL,  *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0LL;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleGenericProtocolWitnessTableInstantiationFunction@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append( (char **)v4 + 1591,  "WI",  2uLL,  *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0LL;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleResilientProtocolWitnessTable@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append( (char **)v4 + 1591,  "Wr",  2uLL,  *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0LL;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleGenericTypeMetadataPattern@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append( (char **)v4 + 1591,  "MP",  2uLL,  *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0LL;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleGetter@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v5 = 0LL;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  uint64_t v5 = *(void *)a2;
}

uint64_t *anonymous namespace'::Remangler::mangleGlobal@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "$s", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  uint64_t v10 = a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      uint64_t v11 = *(void *)a2;
      uint64_t v10 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }

    uint64_t v10 = 0LL;
  }

  switch(v9)
  {
    case 1:
      unsigned int v12 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      goto LABEL_16;
    case 2:
      unsigned int v12 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      goto LABEL_16;
    case 5:
      uint64_t v11 = *(void *)a2;
LABEL_9:
      unsigned int v12 = (swift::Demangle::__runtime::Node *)(v11 + 8LL * *((unsigned int *)a2 + 2));
      if (v10 == v12) {
        goto LABEL_31;
      }
      goto LABEL_16;
  }

  unsigned int v12 = 0LL;
  if (v10)
  {
LABEL_16:
    char v13 = 0;
    unsigned int v14 = a3 + 1;
    do
    {
      char v15 = 1;
      switch(*(_WORD *)(*(void *)v10 + 16LL))
      {
        case 0x35:
        case 0x36:
        case 0x37:
        case 0x38:
        case 0x3A:
        case 0x3B:
        case 0x3C:
        case 0x4D:
        case 0x56:
        case 0x57:
        case 0x5B:
        case 0x5C:
        case 0x5D:
        case 0x5F:
        case 0x60:
        case 0x90:
        case 0xA0:
        case 0xA4:
        case 0x100:
        case 0x115:
        case 0x11F:
        case 0x120:
        case 0x13F:
        case 0x148:
        case 0x149:
        case 0x14A:
        case 0x14C:
        case 0x14D:
        case 0x154:
          goto LABEL_18;
        default:
          if (*(_DWORD *)a4) {
            return result;
          }
          if ((v13 & 1) == 0) {
            goto LABEL_30;
          }
          int v16 = v10;
          break;
      }

      while (1)
      {
        int v17 = *((unsigned __int8 *)a2 + 18);
        uint64_t v18 = a2;
        if (v17 != 5) {
          break;
        }
        uint64_t v18 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_26:
        if (v16 == v18) {
          goto LABEL_30;
        }
LABEL_27:
        int v19 = (swift::Demangle::__runtime::Node *)*((void *)v16 - 1);
        int v16 = (swift::Demangle::__runtime::Node *)((char *)v16 - 8);
        if (*(_DWORD *)a4) {
          return result;
        }
      }

      if (v16) {
        goto LABEL_27;
      }
LABEL_30:
      char v15 = 0;
LABEL_18:
      uint64_t v10 = (swift::Demangle::__runtime::Node *)((char *)v10 + 8);
      char v13 = v15;
    }

    while (v10 != v12);
  }

uint64_t *anonymous namespace'::Remangler::mangleGlobalGetter@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v5 = 0LL;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  uint64_t v5 = *(void *)a2;
}

void anonymous namespace'::Remangler::mangleIdentifier( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v9 = 0uLL;
  LOBYTE(v10) = 0;
  {
    unint64_t v6 = *((void *)this + 1585);
    if (v6 > 0xF)
    {
      int v8 = *((_DWORD *)this + 3178) + 16;
      __int128 v11 = v9;
      uint64_t v12 = v10;
      int v13 = v8;
      std::__hash_table<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::__runtime::SubstitutionEntry,std::pair<swift::Demangle::__runtime::SubstitutionEntry const,unsigned int>>( (uint64_t)this + 12688,  (uint64_t)&v11,  &v11);
    }

    else
    {
      *((void *)this + 1585) = v6 + 1;
      int v7 = (char *)this + 24 * v6 + 12296;
      *(_OWORD *)int v7 = v9;
      v7[16] = v10;
    }
  }

  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = 0LL;
  *(_DWORD *)(a3 + 16) = 0;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleIVarInitializer@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append( (char **)v4 + 1591,  "fe",  2uLL,  *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0LL;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleIVarDestroyer@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append( (char **)v4 + 1591,  "fE",  2uLL,  *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0LL;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

unsigned int *anonymous namespace'::Remangler::mangleImplEscaping@<X0>( unsigned int *this@<X0>, uint64_t a2@<X8>)
{
  int v3 = this;
  unsigned int v5 = this[3184];
  size_t v6 = this[3185];
  int v7 = (char *)*((void *)this + 1591);
  if (v5 >= v6)
  {
    int v8 = (void *)*((void *)this + 1593);
    __int128 v9 = (char *)v8[1];
    if (&v7[v6] == v9)
    {
      unint64_t v11 = (unint64_t)&v7[v6 + 1];
      unint64_t v10 = v8[2];
      if (v11 <= v10)
      {
        v8[1] = v11;
        LODWORD(v12) = 1;
LABEL_20:
        v3[3185] = v6 + v12;
        goto LABEL_21;
      }
    }

    else
    {
      unint64_t v10 = v8[2];
    }

    else {
      uint64_t v12 = (2 * v6);
    }
    size_t v13 = v12 + v6;
    if (v9) {
      BOOL v14 = (unint64_t)&v9[v12 + v6] > v10;
    }
    else {
      BOOL v14 = 1;
    }
    int v7 = (char *)v8[1];
    if (v14)
    {
      unint64_t v15 = 2LL * v8[4];
      if (v15 <= v13 + 1) {
        unint64_t v15 = v13 + 1;
      }
      v8[4] = v15;
      unint64_t v16 = v15 + 8;
      this = (unsigned int *)malloc(v15 + 8);
      int v17 = (char *)this + v16;
      *(void *)this = v8[3];
      int v7 = (char *)(this + 2);
      void v8[2] = v17;
      void v8[3] = this;
    }

    v8[1] = &v7[v13];
    if ((_DWORD)v6)
    {
      this = (unsigned int *)memcpy(v7, *((const void **)v3 + 1591), v6);
      LODWORD(v6) = v3[3185];
      unsigned int v5 = v3[3184];
    }

    *((void *)v3 + 1591) = v7;
    goto LABEL_20;
  }

unsigned int *anonymous namespace'::Remangler::mangleImplConvention@<X0>( unsigned int *this@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = this;
  unsigned int v5 = *a2;
  size_t v6 = a2[1];
  if (v6 == (uint64_t *)13)
  {
    uint64_t v11 = *v5;
    uint64_t v12 = *(uint64_t *)((char *)v5 + 5);
    if (v11 != 0x5F65656C6C616340LL || v12 != 0x64656E776F5F6565LL) {
      goto LABEL_23;
    }
    char v10 = 120;
    goto LABEL_25;
  }

  if (v6 == (uint64_t *)18)
  {
    uint64_t v14 = *v5;
    uint64_t v15 = v5[1];
    int v16 = *((unsigned __int16 *)v5 + 8);
    if (v14 != 0x5F65656C6C616340LL || v15 != 0x65746E6172617567LL || v16 != 25701) {
      goto LABEL_23;
    }
    char v10 = 103;
LABEL_25:
    unsigned int v21 = this[3184];
    size_t v22 = this[3185];
    unint64_t v23 = (char *)*((void *)this + 1591);
    if (v21 < v22)
    {
LABEL_42:
      int v20 = 0;
      a2 = 0LL;
      int v19 = 0;
      v3[3184] = v21 + 1;
      v23[v21] = v10;
      goto LABEL_43;
    }

    unint64_t v24 = (void *)*((void *)this + 1593);
    uint64_t v25 = (char *)v24[1];
    if (&v23[v22] == v25)
    {
      unint64_t v27 = (unint64_t)&v23[v22 + 1];
      unint64_t v26 = v24[2];
      if (v27 <= v26)
      {
        v24[1] = v27;
        LODWORD(v28) = 1;
LABEL_41:
        v3[3185] = v22 + v28;
        goto LABEL_42;
      }
    }

    else
    {
      unint64_t v26 = v24[2];
    }

    else {
      uint64_t v28 = (2 * v22);
    }
    size_t v29 = v28 + v22;
    if (!v25 || (unint64_t)&v25[v29] > v26)
    {
      unint64_t v30 = 2LL * v24[4];
      if (v30 <= v29 + 1) {
        unint64_t v30 = v29 + 1;
      }
      void v24[4] = v30;
      unint64_t v31 = v30 + 8;
      this = (unsigned int *)malloc(v30 + 8);
      int v32 = (char *)this + v31;
      *(void *)this = v24[3];
      uint64_t v25 = (char *)(this + 2);
      void v24[2] = v32;
      void v24[3] = this;
    }

    v24[1] = &v25[v29];
    if ((_DWORD)v22)
    {
      this = (unsigned int *)memcpy(v25, *((const void **)v3 + 1591), v22);
      LODWORD(v22) = v3[3185];
      unsigned int v21 = v3[3184];
    }

    *((void *)v3 + 1591) = v25;
    unint64_t v23 = v25;
    goto LABEL_41;
  }

  if (v6 == (uint64_t *)15)
  {
    uint64_t v7 = *v5;
    uint64_t v8 = *(uint64_t *)((char *)v5 + 7);
    if (v7 == 0x5F65656C6C616340LL && v8 == 0x64656E776F6E755FLL)
    {
      char v10 = 121;
      goto LABEL_25;
    }
  }

unsigned int *anonymous namespace'::Remangler::mangleImplDifferentiabilityKind@<X0>( unsigned int *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = this;
  uint64_t v5 = *(void *)a2;
  unsigned int v6 = this[3184];
  size_t v7 = this[3185];
  uint64_t v8 = (char *)*((void *)this + 1591);
  if (v6 >= v7)
  {
    __int128 v9 = (void *)*((void *)this + 1593);
    char v10 = (char *)v9[1];
    if (&v8[v7] == v10)
    {
      unint64_t v12 = (unint64_t)&v8[v7 + 1];
      unint64_t v11 = v9[2];
      if (v12 <= v11)
      {
        v9[1] = v12;
        LODWORD(v13) = 1;
LABEL_20:
        v3[3185] = v7 + v13;
        goto LABEL_21;
      }
    }

    else
    {
      unint64_t v11 = v9[2];
    }

    else {
      uint64_t v13 = (2 * v7);
    }
    size_t v14 = v13 + v7;
    if (v10) {
      BOOL v15 = (unint64_t)&v10[v13 + v7] > v11;
    }
    else {
      BOOL v15 = 1;
    }
    uint64_t v8 = (char *)v9[1];
    if (v15)
    {
      unint64_t v16 = 2LL * v9[4];
      if (v16 <= v14 + 1) {
        unint64_t v16 = v14 + 1;
      }
      void v9[4] = v16;
      unint64_t v17 = v16 + 8;
      this = (unsigned int *)malloc(v16 + 8);
      uint64_t v18 = (char *)this + v17;
      *(void *)this = v9[3];
      uint64_t v8 = (char *)(this + 2);
      v9[2] = v18;
      v9[3] = this;
    }

    v9[1] = &v8[v14];
    if ((_DWORD)v7)
    {
      this = (unsigned int *)memcpy(v8, *((const void **)v3 + 1591), v7);
      LODWORD(v7) = v3[3185];
      unsigned int v6 = v3[3184];
    }

    *((void *)v3 + 1591) = v8;
    goto LABEL_20;
  }

unsigned int *anonymous namespace'::Remangler::mangleImplErasedIsolation@<X0>( unsigned int *this@<X0>, uint64_t a2@<X8>)
{
  int v3 = this;
  unsigned int v5 = this[3184];
  size_t v6 = this[3185];
  size_t v7 = (char *)*((void *)this + 1591);
  if (v5 >= v6)
  {
    uint64_t v8 = (void *)*((void *)this + 1593);
    __int128 v9 = (char *)v8[1];
    if (&v7[v6] == v9)
    {
      unint64_t v11 = (unint64_t)&v7[v6 + 1];
      unint64_t v10 = v8[2];
      if (v11 <= v10)
      {
        v8[1] = v11;
        LODWORD(v12) = 1;
LABEL_20:
        v3[3185] = v6 + v12;
        goto LABEL_21;
      }
    }

    else
    {
      unint64_t v10 = v8[2];
    }

    else {
      uint64_t v12 = (2 * v6);
    }
    size_t v13 = v12 + v6;
    if (v9) {
      BOOL v14 = (unint64_t)&v9[v12 + v6] > v10;
    }
    else {
      BOOL v14 = 1;
    }
    size_t v7 = (char *)v8[1];
    if (v14)
    {
      unint64_t v15 = 2LL * v8[4];
      if (v15 <= v13 + 1) {
        unint64_t v15 = v13 + 1;
      }
      v8[4] = v15;
      unint64_t v16 = v15 + 8;
      this = (unsigned int *)malloc(v15 + 8);
      unint64_t v17 = (char *)this + v16;
      *(void *)this = v8[3];
      size_t v7 = (char *)(this + 2);
      void v8[2] = v17;
      void v8[3] = this;
    }

    v8[1] = &v7[v13];
    if ((_DWORD)v6)
    {
      this = (unsigned int *)memcpy(v7, *((const void **)v3 + 1591), v6);
      LODWORD(v6) = v3[3185];
      unsigned int v5 = v3[3184];
    }

    *((void *)v3 + 1591) = v7;
    goto LABEL_20;
  }

unsigned int *anonymous namespace'::Remangler::mangleImplSendingResult@<X0>( unsigned int *this@<X0>, uint64_t a2@<X8>)
{
  int v3 = this;
  unsigned int v5 = this[3184];
  size_t v6 = this[3185];
  size_t v7 = (char *)*((void *)this + 1591);
  if (v5 >= v6)
  {
    uint64_t v8 = (void *)*((void *)this + 1593);
    __int128 v9 = (char *)v8[1];
    if (&v7[v6] == v9)
    {
      unint64_t v11 = (unint64_t)&v7[v6 + 1];
      unint64_t v10 = v8[2];
      if (v11 <= v10)
      {
        v8[1] = v11;
        LODWORD(v12) = 1;
LABEL_20:
        v3[3185] = v6 + v12;
        goto LABEL_21;
      }
    }

    else
    {
      unint64_t v10 = v8[2];
    }

    else {
      uint64_t v12 = (2 * v6);
    }
    size_t v13 = v12 + v6;
    if (v9) {
      BOOL v14 = (unint64_t)&v9[v12 + v6] > v10;
    }
    else {
      BOOL v14 = 1;
    }
    size_t v7 = (char *)v8[1];
    if (v14)
    {
      unint64_t v15 = 2LL * v8[4];
      if (v15 <= v13 + 1) {
        unint64_t v15 = v13 + 1;
      }
      v8[4] = v15;
      unint64_t v16 = v15 + 8;
      this = (unsigned int *)malloc(v15 + 8);
      unint64_t v17 = (char *)this + v16;
      *(void *)this = v8[3];
      size_t v7 = (char *)(this + 2);
      void v8[2] = v17;
      void v8[3] = this;
    }

    v8[1] = &v7[v13];
    if ((_DWORD)v6)
    {
      this = (unsigned int *)memcpy(v7, *((const void **)v3 + 1591), v6);
      LODWORD(v6) = v3[3185];
      unsigned int v5 = v3[3184];
    }

    *((void *)v3 + 1591) = v7;
    goto LABEL_20;
  }

unsigned int *anonymous namespace'::Remangler::mangleImplParameterResultDifferentiability@<X0>( unsigned int *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  if (*((_BYTE *)a2 + 18) != 3)
  {
    int v6 = 1890;
    int v7 = 1;
    goto LABEL_29;
  }

  uint64_t v4 = *((void *)a2 + 1);
  if (!v4)
  {
    int v7 = 0;
    a2 = 0LL;
    int v6 = 0;
    goto LABEL_29;
  }

  if (v4 == 13 && **(void **)a2 == 0x76697265446F6E40LL && *(void *)(*(void *)a2 + 5LL) == 0x6576697461766972LL)
  {
    uint64_t v8 = this;
    unsigned int v9 = this[3184];
    size_t v10 = this[3185];
    unint64_t v11 = (char *)*((void *)this + 1591);
    if (v9 < v10)
    {
LABEL_28:
      int v7 = 0;
      a2 = 0LL;
      int v6 = 0;
      v8[3184] = v9 + 1;
      v11[v9] = 119;
      goto LABEL_29;
    }

    uint64_t v12 = (void *)*((void *)this + 1593);
    size_t v13 = (char *)v12[1];
    if (&v11[v10] == v13)
    {
      unint64_t v15 = (unint64_t)&v11[v10 + 1];
      unint64_t v14 = v12[2];
      if (v15 <= v14)
      {
        v12[1] = v15;
        LODWORD(v16) = 1;
LABEL_27:
        v8[3185] = v10 + v16;
        goto LABEL_28;
      }
    }

    else
    {
      unint64_t v14 = v12[2];
    }

    else {
      uint64_t v16 = (2 * v10);
    }
    size_t v17 = v16 + v10;
    if (!v13 || (unint64_t)&v13[v17] > v14)
    {
      unint64_t v18 = 2LL * v12[4];
      if (v18 <= v17 + 1) {
        unint64_t v18 = v17 + 1;
      }
      _OWORD v12[4] = v18;
      unint64_t v19 = v18 + 8;
      this = (unsigned int *)malloc(v18 + 8);
      int v20 = (char *)this + v19;
      *(void *)this = v12[3];
      size_t v13 = (char *)(this + 2);
      v12[2] = v20;
      void v12[3] = this;
    }

    v12[1] = &v13[v17];
    if ((_DWORD)v10)
    {
      this = (unsigned int *)memcpy(v13, *((const void **)v8 + 1591), v10);
      LODWORD(v10) = v8[3185];
      unsigned int v9 = v8[3184];
    }

    *((void *)v8 + 1591) = v13;
    unint64_t v11 = v13;
    goto LABEL_27;
  }

  int v6 = 1898;
  int v7 = 16;
LABEL_29:
  *(_DWORD *)a3 = v7;
  *(void *)(a3 + 8) = a2;
  *(_DWORD *)(a3 + 16) = v6;
  return this;
}

{
  uint64_t v4;
  int v6;
  int v7;
  unsigned int *v8;
  unsigned int v9;
  size_t v10;
  char *v11;
  void *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  if (*((_WORD *)a2 + 8) != 107)
  {
    int v6 = 1798;
    int v7 = 1;
    goto LABEL_29;
  }

  uint64_t v4 = *((void *)a2 + 1);
  if (!v4)
  {
    int v7 = 0;
    a2 = 0LL;
    int v6 = 0;
    goto LABEL_29;
  }

  if (v4 == 13 && **(void **)a2 == 0x76697265446F6E40LL && *(void *)(*(void *)a2 + 5LL) == 0x6576697461766972LL)
  {
    uint64_t v8 = this;
    unsigned int v9 = this[3184];
    size_t v10 = this[3185];
    unint64_t v11 = (char *)*((void *)this + 1591);
    if (v9 < v10)
    {
LABEL_28:
      int v7 = 0;
      a2 = 0LL;
      int v6 = 0;
      v8[3184] = v9 + 1;
      v11[v9] = 119;
      goto LABEL_29;
    }

    uint64_t v12 = (void *)*((void *)this + 1593);
    size_t v13 = (char *)v12[1];
    if (&v11[v10] == v13)
    {
      unint64_t v15 = (unint64_t)&v11[v10 + 1];
      unint64_t v14 = v12[2];
      if (v15 <= v14)
      {
        v12[1] = v15;
        LODWORD(v16) = 1;
LABEL_27:
        v8[3185] = v10 + v16;
        goto LABEL_28;
      }
    }

    else
    {
      unint64_t v14 = v12[2];
    }

    else {
      uint64_t v16 = (2 * v10);
    }
    size_t v17 = v16 + v10;
    if (!v13 || (unint64_t)&v13[v17] > v14)
    {
      unint64_t v18 = 2LL * v12[4];
      if (v18 <= v17 + 1) {
        unint64_t v18 = v17 + 1;
      }
      _OWORD v12[4] = v18;
      unint64_t v19 = v18 + 8;
      this = (unsigned int *)malloc(v18 + 8);
      int v20 = (char *)this + v19;
      *(void *)this = v12[3];
      size_t v13 = (char *)(this + 2);
      v12[2] = v20;
      void v12[3] = this;
    }

    v12[1] = &v13[v17];
    if ((_DWORD)v10)
    {
      this = (unsigned int *)memcpy(v13, *((const void **)v8 + 1591), v10);
      LODWORD(v10) = v8[3185];
      unsigned int v9 = v8[3184];
    }

    *((void *)v8 + 1591) = v13;
    unint64_t v11 = v13;
    goto LABEL_27;
  }

  int v6 = 1807;
  int v7 = 16;
LABEL_29:
  *(_DWORD *)a3 = v7;
  *(void *)(a3 + 8) = a2;
  *(_DWORD *)(a3 + 16) = v6;
  return this;
}

unsigned int *anonymous namespace'::Remangler::mangleImplParameterSending@<X0>( unsigned int *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  if (*((_BYTE *)a2 + 18) != 3)
  {
    int v5 = 1906;
    int v6 = 1;
    goto LABEL_9;
  }

  if (*((void *)a2 + 1) == 7LL && **(_DWORD **)a2 == 1684956531 && *(_DWORD *)(*(void *)a2 + 3LL) == 1735289188)
  {
    int v7 = this;
    unsigned int v8 = this[3184];
    size_t v9 = this[3185];
    size_t v10 = (char *)*((void *)this + 1591);
    if (v8 < v9)
    {
LABEL_27:
      int v6 = 0;
      a2 = 0LL;
      int v5 = 0;
      v7[3184] = v8 + 1;
      v10[v8] = 84;
      goto LABEL_9;
    }

    unint64_t v11 = (void *)*((void *)this + 1593);
    uint64_t v12 = (char *)v11[1];
    if (&v10[v9] == v12)
    {
      unint64_t v14 = (unint64_t)&v10[v9 + 1];
      unint64_t v13 = v11[2];
      if (v14 <= v13)
      {
        v11[1] = v14;
        LODWORD(v15) = 1;
LABEL_26:
        v7[3185] = v9 + v15;
        goto LABEL_27;
      }
    }

    else
    {
      unint64_t v13 = v11[2];
    }

    else {
      uint64_t v15 = (2 * v9);
    }
    size_t v16 = v15 + v9;
    if (!v12 || (unint64_t)&v12[v16] > v13)
    {
      unint64_t v17 = 2LL * v11[4];
      if (v17 <= v16 + 1) {
        unint64_t v17 = v16 + 1;
      }
      v11[4] = v17;
      unint64_t v18 = v17 + 8;
      this = (unsigned int *)malloc(v17 + 8);
      unint64_t v19 = (char *)this + v18;
      *(void *)this = v11[3];
      uint64_t v12 = (char *)(this + 2);
      void v11[2] = v19;
      void v11[3] = this;
    }

    v11[1] = &v12[v16];
    if ((_DWORD)v9)
    {
      this = (unsigned int *)memcpy(v12, *((const void **)v7 + 1591), v9);
      LODWORD(v9) = v7[3185];
      unsigned int v8 = v7[3184];
    }

    *((void *)v7 + 1591) = v12;
    size_t v10 = v12;
    goto LABEL_26;
  }

  int v5 = 1910;
  int v6 = 19;
LABEL_9:
  *(_DWORD *)a3 = v6;
  *(void *)(a3 + 8) = a2;
  *(_DWORD *)(a3 + 16) = v5;
  return this;
}

{
  int v5;
  int v6;
  unsigned int *v7;
  unsigned int v8;
  size_t v9;
  char *v10;
  void *v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  size_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  if (*((void *)a2 + 1) == 7LL && **(_DWORD **)a2 == 1684956531 && *(_DWORD *)(*(void *)a2 + 3LL) == 1735289188)
  {
    int v7 = this;
    unsigned int v8 = this[3184];
    size_t v9 = this[3185];
    size_t v10 = (char *)*((void *)this + 1591);
    if (v8 < v9)
    {
LABEL_25:
      int v6 = 0;
      a2 = 0LL;
      int v5 = 0;
      v7[3184] = v8 + 1;
      v10[v8] = 84;
      goto LABEL_7;
    }

    unint64_t v11 = (void *)*((void *)this + 1593);
    uint64_t v12 = (char *)v11[1];
    if (&v10[v9] == v12)
    {
      unint64_t v14 = (unint64_t)&v10[v9 + 1];
      unint64_t v13 = v11[2];
      if (v14 <= v13)
      {
        v11[1] = v14;
        LODWORD(v15) = 1;
LABEL_24:
        v7[3185] = v9 + v15;
        goto LABEL_25;
      }
    }

    else
    {
      unint64_t v13 = v11[2];
    }

    else {
      uint64_t v15 = (2 * v9);
    }
    size_t v16 = v15 + v9;
    if (!v12 || (unint64_t)&v12[v16] > v13)
    {
      unint64_t v17 = 2LL * v11[4];
      if (v17 <= v16 + 1) {
        unint64_t v17 = v16 + 1;
      }
      v11[4] = v17;
      unint64_t v18 = v17 + 8;
      this = (unsigned int *)malloc(v17 + 8);
      unint64_t v19 = (char *)this + v18;
      *(void *)this = v11[3];
      uint64_t v12 = (char *)(this + 2);
      void v11[2] = v19;
      void v11[3] = this;
    }

    v11[1] = &v12[v16];
    if ((_DWORD)v9)
    {
      this = (unsigned int *)memcpy(v12, *((const void **)v7 + 1591), v9);
      LODWORD(v9) = v7[3185];
      unsigned int v8 = v7[3184];
    }

    *((void *)v7 + 1591) = v12;
    size_t v10 = v12;
    goto LABEL_24;
  }

  int v5 = 1817;
  int v6 = 19;
LABEL_7:
  *(_DWORD *)a3 = v6;
  *(void *)(a3 + 8) = a2;
  *(_DWORD *)(a3 + 16) = v5;
  return this;
}

unsigned int *anonymous namespace'::Remangler::mangleImplFunctionConvention@<X0>( unsigned int *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = a2;
  uint64_t v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 != 5 || !*((_DWORD *)a2 + 2)) {
      goto LABEL_47;
    }
    int v7 = *(swift::Demangle::__runtime::Node **)a2;
  }

  if (*(_BYTE *)(*(void *)v7 + 18LL) != 3)
  {
LABEL_47:
    int v11 = 1936;
    int v12 = 1;
    goto LABEL_48;
  }

  unsigned int v8 = a2;
  size_t v9 = *(uint64_t **)v8;
  uint64_t v10 = *(void *)(*(void *)v8 + 8LL);
  int v11 = 1936;
  int v12 = 1;
  uint64_t v13 = *v9;
  switch(v10)
  {
    case 1LL:
      if (*(_BYTE *)v13 == 99)
      {
        char v14 = 67;
        goto LABEL_17;
      }

      int v11 = 1936;
      break;
    case 5LL:
      if (*(_DWORD *)v13 != 1668246626 || *(_BYTE *)(v13 + 4) != 107) {
        goto LABEL_47;
      }
      char v14 = 66;
LABEL_17:
      size_t v16 = a2;
      if (v6 != 2)
      {
        if (v6 != 5 || *((_DWORD *)a2 + 2) < 2u) {
          goto LABEL_51;
        }
        size_t v16 = *(swift::Demangle::__runtime::Node **)a2;
      }

      if (*(_WORD *)(*((void *)v16 + 1) + 16LL) != 23) {
        goto LABEL_51;
      }
      unint64_t v17 = this + 3182;
      unsigned int v18 = this[3184];
      size_t v19 = this[3185];
      int v20 = (char *)*((void *)this + 1591);
      unsigned int v21 = (void *)*((void *)this + 1593);
      size_t v22 = (char *)v21[1];
      if (&v20[v19] == v22)
      {
        unint64_t v40 = (unint64_t)&v20[v19 + 1];
        unint64_t v23 = v21[2];
        if (v40 <= v23)
        {
          v21[1] = v40;
          LODWORD(v41) = 1;
          goto LABEL_82;
        }
      }

      else
      {
        unint64_t v23 = v21[2];
      }

      unint64_t v62 = this + 3182;
      else {
        uint64_t v41 = (2 * v19);
      }
      size_t v42 = v41 + v19;
      if (!v22 || (unint64_t)&v22[v42] > v23)
      {
        unint64_t v43 = 2LL * v21[4];
        if (v43 <= v42 + 1) {
          unint64_t v43 = v42 + 1;
        }
        v21[4] = v43;
        unint64_t v44 = v43 + 8;
        unint64_t v45 = malloc(v43 + 8);
        unint64_t v46 = (char *)v45 + v44;
        *unint64_t v45 = v21[3];
        size_t v22 = (char *)(v45 + 1);
        void v21[2] = v46;
        void v21[3] = v45;
      }

      v21[1] = &v22[v42];
      if ((_DWORD)v19)
      {
        memcpy(v22, *((const void **)v4 + 1591), v19);
        LODWORD(v19) = v4[3185];
        unsigned int v18 = v4[3184];
      }

      unint64_t v17 = v62;
      *(void *)unint64_t v62 = v22;
      int v20 = v22;
LABEL_82:
      v4[3185] = v19 + v41;
LABEL_83:
      v4[3184] = v18 + 1;
      v20[v18] = 122;
      unsigned int v47 = v4[3184];
      size_t v48 = v4[3185];
      unint64_t v49 = (char *)*((void *)v4 + 1591);
      unint64_t v63 = v17;
      unint64_t v50 = (void *)*((void *)v4 + 1593);
      unint64_t v51 = (char *)v50[1];
      if (&v49[v48] == v51)
      {
        unint64_t v53 = (unint64_t)&v49[v48 + 1];
        unint64_t v52 = v50[2];
        if (v53 <= v52)
        {
          v50[1] = v53;
          LODWORD(v54) = 1;
          goto LABEL_99;
        }
      }

      else
      {
        unint64_t v52 = v50[2];
      }

      else {
        uint64_t v54 = (2 * v48);
      }
      size_t v55 = v54 + v48;
      if (!v51 || (unint64_t)&v51[v55] > v52)
      {
        unint64_t v56 = 2LL * v50[4];
        if (v56 <= v55 + 1) {
          unint64_t v56 = v55 + 1;
        }
        v50[4] = v56;
        unint64_t v57 = v56 + 8;
        uint64_t v58 = malloc(v56 + 8);
        unint64_t v59 = (char *)v58 + v57;
        *uint64_t v58 = v50[3];
        unint64_t v51 = (char *)(v58 + 1);
        uint64_t v50[2] = v59;
        void v50[3] = v58;
      }

      v50[1] = &v51[v55];
      if ((_DWORD)v48)
      {
        memcpy(v51, *((const void **)v4 + 1591), v48);
        LODWORD(v48) = v4[3185];
        unsigned int v47 = v4[3184];
      }

      unint64_t v17 = v63;
      *(void *)unint64_t v63 = v51;
      unint64_t v49 = v51;
LABEL_99:
      v4[3185] = v48 + v54;
LABEL_100:
      v4[3184] = v47 + 1;
      v49[v47] = v14;
      int v60 = *((unsigned __int8 *)v3 + 18);
      if (v60 == 2) {
        goto LABEL_104;
      }
      if (v60 == 5 && *((_DWORD *)v3 + 2) >= 2u)
      {
        int v3 = *(swift::Demangle::__runtime::Node **)v3;
LABEL_104:
        uint64_t v61 = *((void *)v3 + 1);
      }

      else
      {
        uint64_t v61 = 0LL;
      }

      swift::Demangle::__runtime::CharVector::append( v17,  *(void *)(v61 + 8),  *((swift::Demangle::__runtime::NodeFactory **)v4 + 1593));
      this = (unsigned int *)swift::Demangle::__runtime::CharVector::append( (char **)v17,  *(const void **)v61,  *(void *)(v61 + 8),  *((void **)v4 + 1593));
      int v12 = 0;
      int v3 = 0LL;
      int v11 = 0;
      break;
    case 6LL:
      if (*(_DWORD *)v13 != 1752458605 || *(_WORD *)(v13 + 4) != 25711) {
        goto LABEL_47;
      }
      char v14 = 77;
      goto LABEL_51;
    case 7LL:
      if (*(_DWORD *)v13 != 1936682083 || *(_DWORD *)(v13 + 3) != 1701999987) {
        goto LABEL_47;
      }
      char v14 = 75;
      goto LABEL_51;
    case 11LL:
      if (*(void *)v13 != 0x74656D5F636A626FLL || *(void *)(v13 + 3) != 0x646F6874656D5F63LL) {
        goto LABEL_47;
      }
      char v14 = 79;
      goto LABEL_51;
    case 14LL:
      if (*(void *)v13 != 0x5F7373656E746977LL || *(void *)(v13 + 6) != 0x646F6874656D5F73LL) {
        goto LABEL_47;
      }
      char v14 = 87;
LABEL_51:
      unsigned int v28 = this[3184];
      size_t v29 = this[3185];
      unint64_t v30 = (char *)*((void *)this + 1591);
      unint64_t v31 = (void *)*((void *)this + 1593);
      int v32 = (char *)v31[1];
      if (&v30[v29] == v32)
      {
        unint64_t v34 = (unint64_t)&v30[v29 + 1];
        unint64_t v33 = v31[2];
        if (v34 <= v33)
        {
          v31[1] = v34;
          LODWORD(v35) = 1;
          goto LABEL_66;
        }
      }

      else
      {
        unint64_t v33 = v31[2];
      }

      else {
        uint64_t v35 = (2 * v29);
      }
      size_t v36 = v35 + v29;
      if (!v32 || (unint64_t)&v32[v36] > v33)
      {
        unint64_t v37 = 2LL * v31[4];
        if (v37 <= v36 + 1) {
          unint64_t v37 = v36 + 1;
        }
        v31[4] = v37;
        unint64_t v38 = v37 + 8;
        this = (unsigned int *)malloc(v37 + 8);
        unsigned int v39 = (char *)this + v38;
        *(void *)this = v31[3];
        int v32 = (char *)(this + 2);
        v31[2] = v39;
        void v31[3] = this;
      }

      v31[1] = &v32[v36];
      if ((_DWORD)v29)
      {
        this = (unsigned int *)memcpy(v32, *((const void **)v4 + 1591), v29);
        LODWORD(v29) = v4[3185];
        unsigned int v28 = v4[3184];
      }

      *((void *)v4 + 1591) = v32;
      unint64_t v30 = v32;
LABEL_66:
      v4[3185] = v29 + v35;
LABEL_67:
      int v12 = 0;
      int v3 = 0LL;
      int v11 = 0;
      v4[3184] = v28 + 1;
      v30[v28] = v14;
      break;
    default:
      break;
  }

uint64_t *anonymous namespace'::Remangler::mangleImplFunctionType@<X0>( uint64_t *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = a2;
  uint64_t v5 = (uint64_t)this;
  int v7 = *((unsigned __int8 *)a2 + 18);
  unsigned int v8 = a2;
  if ((v7 - 1) >= 2)
  {
    if (v7 == 5)
    {
      uint64_t v9 = *(void *)a2;
      unsigned int v8 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }

    unsigned int v8 = 0LL;
  }

  switch(v7)
  {
    case 1:
      uint64_t v10 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      break;
    case 2:
      uint64_t v10 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      break;
    case 5:
      uint64_t v9 = *(void *)a2;
LABEL_9:
      uint64_t v10 = (swift::Demangle::__runtime::Node *)(v9 + 8LL * *((unsigned int *)a2 + 2));
      if (v8 != v10) {
        break;
      }
LABEL_30:
      unint64_t v26 = "";
      char v27 = 1;
      BOOL v19 = 1;
      goto LABEL_31;
    default:
      uint64_t v10 = 0LL;
      if (!v8) {
        goto LABEL_30;
      }
      break;
  }

  int v11 = 0LL;
  int v12 = 0LL;
  unsigned int v13 = a3 + 1;
  __int128 v312 = "";
  uint64_t v315 = 0LL;
  while (2)
  {
    size_t v16 = v11;
    uint64_t v15 = *(swift::Demangle::__runtime::Node **)v8;
    int v11 = *(swift::Demangle::__runtime::Node **)v8;
    switch(*(_WORD *)(*(void *)v8 + 16LL))
    {
      case '+':
        goto LABEL_13;
      case '.':
        __int128 v312 = "P";
        int v11 = *(swift::Demangle::__runtime::Node **)v8;
        goto LABEL_13;
      case 't':
        int v11 = v16;
        int v12 = *(swift::Demangle::__runtime::Node **)v8;
        goto LABEL_13;
      case 'v':
      case 'x':
      case 'y':
      case 'z':
        int v17 = *((unsigned __int8 *)v15 + 18);
        uint64_t v14 = 1LL;
        if (v17 == 2) {
          goto LABEL_12;
        }
        if (v17 != 5)
        {
          int v48 = 1984;
          goto LABEL_506;
        }

        uint64_t v18 = *((unsigned int *)v15 + 2);
        if ((v18 - 2) > 2)
        {
          int v48 = 1984;
          LODWORD(v14) = 1;
          goto LABEL_506;
        }

        uint64_t v14 = v18 - 1;
        uint64_t v15 = *(swift::Demangle::__runtime::Node **)v15;
LABEL_12:
        int v11 = v16;
        if (*(_DWORD *)a4) {
          return this;
        }
LABEL_13:
        unsigned int v8 = (swift::Demangle::__runtime::Node *)((char *)v8 + 8);
        if (v8 != v10) {
          continue;
        }
        if (v11)
        {
          if (*(_DWORD *)a4) {
            return this;
          }
        }

        BOOL v19 = v12 == 0LL;
        if (!v12) {
          goto LABEL_559;
        }
        unsigned int v20 = *(_DWORD *)(v5 + 12736);
        size_t v21 = *(unsigned int *)(v5 + 12740);
        size_t v22 = *(char **)(v5 + 12728);
        unint64_t v23 = *(void **)(v5 + 12744);
        unint64_t v24 = (char *)v23[1];
        if (&v22[v21] == v24)
        {
          unint64_t v266 = (unint64_t)&v22[v21 + 1];
          unint64_t v25 = v23[2];
          if (v266 <= v25)
          {
            v23[1] = v266;
            int v273 = 1;
            goto LABEL_531;
          }
        }

        else
        {
          unint64_t v25 = v23[2];
        }

        LODWORD(v267) = 2 * v21;
        else {
          uint64_t v267 = v267;
        }
        int v307 = v267;
        size_t v268 = v267 + v21;
        if (!v24 || (unint64_t)&v24[v268] > v25)
        {
          unint64_t v269 = 2LL * v23[4];
          if (v269 <= v268 + 1) {
            unint64_t v269 = v268 + 1;
          }
          void v23[4] = v269;
          unint64_t v270 = v269 + 8;
          __int128 v271 = malloc(v269 + 8);
          v272 = (char *)v271 + v270;
          *__int128 v271 = v23[3];
          unint64_t v24 = (char *)(v271 + 1);
          void v23[2] = v272;
          void v23[3] = v271;
        }

        v23[1] = &v24[v268];
        if ((_DWORD)v21)
        {
          memcpy(v24, *(const void **)(v5 + 12728), v21);
          LODWORD(v21) = *(_DWORD *)(v5 + 12740);
          unsigned int v20 = *(_DWORD *)(v5 + 12736);
        }

        int v273 = v307;
        *(void *)(v5 + 12728) = v24;
        size_t v22 = v24;
LABEL_531:
        *(_DWORD *)(v5 + 12740) = v21 + v273;
        BOOL v19 = v12 == 0LL;
LABEL_532:
        *(_DWORD *)(v5 + 12736) = v20 + 1;
        v22[v20] = 121;
        int v274 = *((unsigned __int8 *)v12 + 18);
        BOOL v275 = v12;
        if (v274 == 5 && *((_DWORD *)v12 + 2))
        {
          BOOL v275 = *(swift::Demangle::__runtime::Node **)v12;
LABEL_536:
          uint64_t v276 = *(void *)v275;
        }

        else
        {
          uint64_t v276 = 0LL;
        }

        int v277 = *(unsigned __int8 *)(v276 + 18);
        std::string::size_type v278 = (swift::Demangle::__runtime::Node **)v276;
        if (v277 == 5)
        {
          uint64_t v279 = *(swift::Demangle::__runtime::Node **)v276;
          std::string::size_type v278 = *(swift::Demangle::__runtime::Node ***)v276;
LABEL_546:
          uint64_t v280 = (swift::Demangle::__runtime::Node **)((char *)v279 + 8 * *(unsigned int *)(v276 + 8));
          goto LABEL_550;
        }

        std::string::size_type v278 = 0LL;
LABEL_542:
        switch(v277)
        {
          case 1:
            uint64_t v280 = (swift::Demangle::__runtime::Node **)(v276 + 8);
            break;
          case 2:
            uint64_t v280 = (swift::Demangle::__runtime::Node **)(v276 + 16);
            break;
          case 5:
            uint64_t v279 = *(swift::Demangle::__runtime::Node **)v276;
            goto LABEL_546;
          default:
            uint64_t v280 = 0LL;
            break;
        }

LABEL_550:
        if (v278 != v280)
        {
          do
          {
            if (*(_DWORD *)a4) {
              return this;
            }
            ++v278;
          }

          while (v278 != v280);
          int v274 = *((unsigned __int8 *)v12 + 18);
        }

        *(_DWORD *)a4 = 0;
        *(void *)(a4 + 8) = 0LL;
        *(_DWORD *)(a4 + 16) = 0;
        if (v274 == 2) {
          goto LABEL_558;
        }
        if (v274 == 5 && *((_DWORD *)v12 + 2) >= 2u)
        {
          int v12 = *(swift::Demangle::__runtime::Node **)v12;
LABEL_558:
          if (*(_DWORD *)a4) {
            return this;
          }
        }

LABEL_559:
        if (!v315)
        {
          char v27 = 1;
LABEL_566:
          unint64_t v26 = v312;
          goto LABEL_31;
        }

        int v281 = *((unsigned __int8 *)v315 + 18);
        int v282 = (swift::Demangle::__runtime::Node **)v315;
        if (v281 == 5 && *((_DWORD *)v315 + 2))
        {
          int v282 = *(swift::Demangle::__runtime::Node ***)v315;
LABEL_564:
          v283 = *v282;
        }

        else
        {
          v283 = 0LL;
        }

        if (*(_DWORD *)a4) {
          return this;
        }
        unsigned int v284 = *(_DWORD *)(v5 + 12736);
        size_t v285 = *(unsigned int *)(v5 + 12740);
        v286 = *(char **)(v5 + 12728);
        if (v284 < v285)
        {
          int v287 = v315;
          goto LABEL_595;
        }

        BOOL v311 = v19;
        int v288 = *(void **)(v5 + 12744);
        unint64_t v289 = (char *)v288[1];
        if (&v286[v285] == v289)
        {
          unint64_t v291 = (unint64_t)&v286[v285 + 1];
          unint64_t v290 = v288[2];
          if (v291 <= v290)
          {
            v288[1] = v291;
            LODWORD(v292) = 1;
            BOOL v19 = v311;
            int v287 = v315;
            goto LABEL_594;
          }
        }

        else
        {
          unint64_t v290 = v288[2];
        }

        else {
          uint64_t v292 = (2 * v285);
        }
        size_t v293 = v292 + v285;
        if (!v289 || (unint64_t)&v289[v293] > v290)
        {
          unint64_t v294 = 2LL * v288[4];
          if (v294 <= v293 + 1) {
            unint64_t v294 = v293 + 1;
          }
          v288[4] = v294;
          unint64_t v295 = v294 + 8;
          char v296 = malloc(v294 + 8);
          int v297 = (char *)v296 + v295;
          *char v296 = v288[3];
          unint64_t v289 = (char *)(v296 + 1);
          v288[2] = v297;
          v288[3] = v296;
        }

        v288[1] = &v289[v293];
        if ((_DWORD)v285)
        {
          memcpy(v289, *(const void **)(v5 + 12728), v285);
          LODWORD(v285) = *(_DWORD *)(v5 + 12740);
          unsigned int v284 = *(_DWORD *)(v5 + 12736);
        }

        int v287 = v315;
        *(void *)(v5 + 12728) = v289;
        v286 = v289;
        BOOL v19 = v311;
LABEL_594:
        *(_DWORD *)(v5 + 12740) = v285 + v292;
LABEL_595:
        *(_DWORD *)(v5 + 12736) = v284 + 1;
        v286[v284] = 121;
        int v298 = *((unsigned __int8 *)v287 + 18);
        int v299 = v287;
        if (v298 == 2) {
          goto LABEL_599;
        }
        if (v298 == 5 && *((_DWORD *)v287 + 2) >= 2u)
        {
          int v299 = *(swift::Demangle::__runtime::Node **)v287;
LABEL_599:
          uint64_t v300 = *((void *)v299 + 1);
        }

        else
        {
          uint64_t v300 = 0LL;
        }

        int v301 = *(unsigned __int8 *)(v300 + 18);
        v302 = (swift::Demangle::__runtime::Node **)v300;
        if (v301 == 5)
        {
          v303 = *(swift::Demangle::__runtime::Node **)v300;
          v302 = *(swift::Demangle::__runtime::Node ***)v300;
LABEL_609:
          std::string::size_type v304 = (swift::Demangle::__runtime::Node **)((char *)v303 + 8 * *(unsigned int *)(v300 + 8));
          goto LABEL_613;
        }

        v302 = 0LL;
LABEL_605:
        switch(v301)
        {
          case 1:
            std::string::size_type v304 = (swift::Demangle::__runtime::Node **)(v300 + 8);
            break;
          case 2:
            std::string::size_type v304 = (swift::Demangle::__runtime::Node **)(v300 + 16);
            break;
          case 5:
            v303 = *(swift::Demangle::__runtime::Node **)v300;
            goto LABEL_609;
          default:
            std::string::size_type v304 = 0LL;
            break;
        }

LABEL_613:
        if (v302 == v304)
        {
          unint64_t v26 = v312;
          int v305 = v315;
        }

        else
        {
          do
          {
            if (*(_DWORD *)a4) {
              return this;
            }
            ++v302;
          }

          while (v302 != v304);
          unint64_t v26 = v312;
          int v305 = v315;
          int v298 = *((unsigned __int8 *)v315 + 18);
        }

        *(_DWORD *)a4 = 0;
        *(void *)(a4 + 8) = 0LL;
        *(_DWORD *)(a4 + 16) = 0;
        if (v298 == 5 && *((_DWORD *)v305 + 2) >= 3u)
        {
          uint64_t v306 = *(void *)(*(void *)v305 + 16LL);
          if (*(_WORD *)(v306 + 16) == 235) {
          else
          }
          if (*(_DWORD *)a4) {
            return this;
          }
          char v27 = 0;
          goto LABEL_566;
        }

        char v27 = 0;
        break;
      case 'w':
        int v11 = v16;
        uint64_t v315 = *(swift::Demangle::__runtime::Node **)v8;
        goto LABEL_13;
      default:
        int v11 = v16;
        goto LABEL_13;
    }

    break;
  }

LABEL_420:
        if (v154 == 8 && v155 != 0)
        {
          if (*this == 0x64656E776F6E7540LL)
          {
            char v152 = 121;
          }

          else if (((v155 ^ 1) & 1) == 0)
          {
            goto LABEL_514;
          }

          goto LABEL_457;
        }

        char v237 = v155 ^ 1;
        if (v154 == 16) {
          char v238 = v155 ^ 1;
        }
        else {
          char v238 = 1;
        }
        if ((v238 & 1) == 0)
        {
LABEL_429:
          this = (uint64_t *)memcmp(this, "@pack_guaranteed", v154);
          if ((_DWORD)this) {
            goto LABEL_514;
          }
          char v152 = 112;
          goto LABEL_457;
        }

        if (v154 != 11) {
          char v237 = 1;
        }
        if ((v237 & 1) == 0)
        {
          if (*this == 0x776F5F6B63617040LL && *(uint64_t *)((char *)this + 3) == 0x64656E776F5F6B63LL)
          {
            char v152 = 118;
            goto LABEL_457;
          }

          goto LABEL_447;
        }

        char v240 = v155 ^ 1;
        if (v154 != 11) {
          char v240 = 1;
        }
        if ((v240 & 1) == 0)
        {
LABEL_447:
          this = (uint64_t *)memcmp(this, "@pack_inout", v154);
          if ((_DWORD)this) {
            goto LABEL_514;
          }
          char v152 = 109;
LABEL_457:
          unsigned int v190 = *(_DWORD *)(v5 + 12736);
          size_t v241 = *(unsigned int *)(v5 + 12740);
          int v192 = *(char **)(v5 + 12728);
          int v242 = *(void **)(v5 + 12744);
          unint64_t v243 = (char *)v242[1];
          if (&v192[v241] != v243)
          {
            unint64_t v244 = v242[2];
LABEL_461:
            else {
              uint64_t v246 = (2 * v241);
            }
            size_t v247 = v246 + v241;
            if (!v243 || (unint64_t)&v243[v247] > v244)
            {
              unint64_t v248 = 2LL * v242[4];
              if (v248 <= v247 + 1) {
                unint64_t v248 = v247 + 1;
              }
              v242[4] = v248;
              unint64_t v249 = v248 + 8;
              this = (uint64_t *)malloc(v248 + 8);
              __int16 v250 = (char *)this + v249;
              *this = v242[3];
              unint64_t v243 = (char *)(this + 1);
              v242[2] = v250;
              v242[3] = this;
            }

            v242[1] = &v243[v247];
            if ((_DWORD)v241)
            {
              this = (uint64_t *)memcpy(v243, *(const void **)(v5 + 12728), v241);
              LODWORD(v241) = *(_DWORD *)(v5 + 12740);
              unsigned int v190 = *(_DWORD *)(v5 + 12736);
            }

            uint64_t v74 = v310;
            a4 = v314;
            uint64_t *v316 = v243;
            int v192 = v243;
            goto LABEL_472;
          }

          unint64_t v245 = (unint64_t)&v192[v241 + 1];
          unint64_t v244 = v242[2];
          if (v245 > v244) {
            goto LABEL_461;
          }
          v242[1] = v245;
          LODWORD(v246) = 1;
          uint64_t v74 = v310;
LABEL_472:
          *(_DWORD *)(v5 + 12740) = v241 + v246;
LABEL_473:
          *(_DWORD *)(v5 + 12736) = v190 + 1;
          v192[v190] = v152;
          if (*((_BYTE *)v4 + 18) == 5)
          {
            int v251 = *((_DWORD *)v4 + 2);
            if (v251 == 4)
            {
              if (*(_DWORD *)a4) {
                return this;
              }
              if (*((_BYTE *)v4 + 18) == 5 && *((_DWORD *)v4 + 2) >= 3u) {
                int v252 = *(swift::Demangle::__runtime::Node **)(*(void *)v4 + 16LL);
              }
              else {
                int v252 = 0LL;
              }
            }

            else
            {
              if (v251 != 3) {
                goto LABEL_110;
              }
            }

LABEL_483:
            if (*(_DWORD *)a4) {
              return this;
            }
          }

uint64_t *anonymous namespace'::Remangler::mangleImplicitClosure@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = a2;
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  uint64_t v9 = (swift::Demangle::__runtime::Node **)a2;
  if ((v8 - 1) < 2)
  {
LABEL_5:
    if (*(_DWORD *)a4) {
      return result;
    }
    if (*((_BYTE *)v4 + 18) != 5) {
      goto LABEL_12;
    }
    goto LABEL_9;
  }

  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    uint64_t v9 = *(swift::Demangle::__runtime::Node ***)a2;
    goto LABEL_5;
  }

  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0LL;
  *(_DWORD *)(a4 + 16) = 0;
  if (v8 != 5)
  {
LABEL_12:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    goto LABEL_13;
  }

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleInOut@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 == 1)
  {
LABEL_5:
    if (*(_DWORD *)a4) {
      return this;
    }
    unsigned int v7 = *((_DWORD *)v4 + 3184);
    size_t v8 = *((unsigned int *)v4 + 3185);
    uint64_t v9 = (_BYTE *)*((void *)v4 + 1591);
    uint64_t v10 = (void *)*((void *)v4 + 1593);
    int v11 = (_BYTE *)v10[1];
    if (&v9[v8] == v11)
    {
      unint64_t v15 = (unint64_t)&v9[v8 + 1];
      unint64_t v12 = v10[2];
      if (v15 <= v12)
      {
        v10[1] = v15;
        LODWORD(v16) = 1;
LABEL_26:
        *((_DWORD *)v4 + 3185) = v8 + v16;
LABEL_27:
        int v14 = 0;
        a2 = 0LL;
        int v13 = 0;
        *((_DWORD *)v4 + 3184) = v7 + 1;
        v9[v7] = 122;
        goto LABEL_28;
      }
    }

    else
    {
      unint64_t v12 = v10[2];
    }

    else {
      uint64_t v16 = (2 * v8);
    }
    size_t v17 = v16 + v8;
    if (v11) {
      BOOL v18 = (unint64_t)&v11[v16 + v8] > v12;
    }
    else {
      BOOL v18 = 1;
    }
    uint64_t v9 = (_BYTE *)v10[1];
    if (v18)
    {
      unint64_t v19 = 2LL * v10[4];
      if (v19 <= v17 + 1) {
        unint64_t v19 = v17 + 1;
      }
      _OWORD v10[4] = v19;
      unint64_t v20 = v19 + 8;
      this = (_anonymous_namespace_::Remangler *)malloc(v19 + 8);
      size_t v21 = (char *)this + v20;
      *(void *)this = v10[3];
      uint64_t v9 = (char *)this + 8;
      void v10[2] = v21;
      void v10[3] = this;
    }

    v10[1] = &v9[v17];
    if ((_DWORD)v8)
    {
      this = (_anonymous_namespace_::Remangler *)memcpy(v9, *((const void **)v4 + 1591), v8);
      LODWORD(v8) = *((_DWORD *)v4 + 3185);
      unsigned int v7 = *((_DWORD *)v4 + 3184);
    }

    *((void *)v4 + 1591) = v9;
    goto LABEL_26;
  }

  if (v6 == 5 && *((_DWORD *)a2 + 2) == 1)
  {
    a2 = *(swift::Demangle::__runtime::Node **)a2;
    goto LABEL_5;
  }

  int v13 = 321;
  int v14 = 10;
LABEL_28:
  *(_DWORD *)a4 = v14;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v13;
  return this;
}

void *anonymous namespace'::Remangler::mangleInfixOperator@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "oi", 2uLL, this[1593]);
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = 0LL;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleInitializer@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  unsigned int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      unsigned int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }

    unsigned int v7 = 0LL;
  }

  switch(v6)
  {
    case 1:
      uint64_t v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      goto LABEL_16;
    case 2:
      uint64_t v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      uint64_t v9 = (swift::Demangle::__runtime::Node *)(v8 + 8LL * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }

  uint64_t v9 = 0LL;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "fi", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

uint64_t *anonymous namespace'::Remangler::mangleInitAccessor@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v5 = 0LL;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  uint64_t v5 = *(void *)a2;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleIsolated@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append( (char **)v4 + 1591,  "Yi",  2uLL,  *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0LL;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleSending@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append( (char **)v4 + 1591,  "Yu",  2uLL,  *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0LL;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleLazyProtocolWitnessTableAccessor@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }

    int v7 = 0LL;
  }

  switch(v6)
  {
    case 1:
      uint64_t v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      goto LABEL_16;
    case 2:
      uint64_t v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      uint64_t v9 = (swift::Demangle::__runtime::Node *)(v8 + 8LL * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }

  uint64_t v9 = 0LL;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Wl", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

uint64_t *anonymous namespace'::Remangler::mangleLazyProtocolWitnessTableCacheVariable@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }

    int v7 = 0LL;
  }

  switch(v6)
  {
    case 1:
      uint64_t v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      goto LABEL_16;
    case 2:
      uint64_t v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      uint64_t v9 = (swift::Demangle::__runtime::Node *)(v8 + 8LL * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }

  uint64_t v9 = 0LL;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "WL", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

uint64_t *anonymous namespace'::Remangler::mangleLocalDeclName@<X0>( uint64_t *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  uint64_t v5 = this;
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  uint64_t v9 = a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0LL;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }

    uint64_t v9 = *(swift::Demangle::__runtime::Node **)a2;
  }

  if (*(_DWORD *)a4) {
    return this;
  }
LABEL_8:
  unsigned int v10 = *((_DWORD *)v5 + 3184);
  size_t v11 = *((unsigned int *)v5 + 3185);
  unint64_t v12 = (char *)v5[1591];
  int v13 = (void *)v5[1593];
  int v14 = (char *)v13[1];
  if (&v12[v11] != v14)
  {
    unint64_t v15 = v13[2];
LABEL_12:
    else {
      uint64_t v17 = (2 * v11);
    }
    size_t v18 = v17 + v11;
    if (v14) {
      BOOL v19 = (unint64_t)&v14[v17 + v11] > v15;
    }
    else {
      BOOL v19 = 1;
    }
    unint64_t v12 = (char *)v13[1];
    if (v19)
    {
      unint64_t v20 = 2LL * v13[4];
      if (v20 <= v18 + 1) {
        unint64_t v20 = v18 + 1;
      }
      _OWORD v13[4] = v20;
      unint64_t v21 = v20 + 8;
      this = (uint64_t *)malloc(v20 + 8);
      size_t v22 = (char *)this + v21;
      *this = v13[3];
      unint64_t v12 = (char *)(this + 1);
      v13[2] = v22;
      void v13[3] = this;
    }

    v13[1] = &v12[v18];
    if ((_DWORD)v11)
    {
      this = (uint64_t *)memcpy(v12, (const void *)v5[1591], v11);
      LODWORD(v11) = *((_DWORD *)v5 + 3185);
      unsigned int v10 = *((_DWORD *)v5 + 3184);
    }

    v5[1591] = (uint64_t)v12;
    goto LABEL_27;
  }

  unint64_t v16 = (unint64_t)&v12[v11 + 1];
  unint64_t v15 = v13[2];
  if (v16 > v15) {
    goto LABEL_12;
  }
  v13[1] = v16;
  LODWORD(v17) = 1;
LABEL_27:
  *((_DWORD *)v5 + 3185) = v11 + v17;
LABEL_28:
  *((_DWORD *)v5 + 3184) = v10 + 1;
  v12[v10] = 76;
  int v23 = *((unsigned __int8 *)v4 + 18);
  if ((v23 - 1) < 2) {
  if (v23 == 5 && *((_DWORD *)v4 + 2))
  }
  {
    int v4 = *(swift::Demangle::__runtime::Node **)v4;
  }

  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0LL;
  *(_DWORD *)(a4 + 16) = 0;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleMacro@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  unsigned int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      unsigned int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }

    unsigned int v7 = 0LL;
  }

  switch(v6)
  {
    case 1:
      uint64_t v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      goto LABEL_16;
    case 2:
      uint64_t v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      uint64_t v9 = (swift::Demangle::__runtime::Node *)(v8 + 8LL * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }

  uint64_t v9 = 0LL;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "fm", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

uint64_t *anonymous namespace'::Remangler::mangleMacroExpansionLoc@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  uint64_t v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0LL;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }

    uint64_t v9 = (swift::Demangle::__runtime::Node **)*a2;
  }

  if (*(_DWORD *)a4) {
    return result;
  }
  int v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  size_t v11 = (swift::Demangle::__runtime::Node *)a2;
  if (v8 == 2) {
    goto LABEL_12;
  }
  if (v8 == 5 && *((_DWORD *)a2 + 2) >= 2u)
  {
    size_t v11 = *a2;
LABEL_12:
    if (*(_DWORD *)a4) {
      return result;
    }
    goto LABEL_15;
  }

  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0LL;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_15:
  unint64_t v12 = (uint64_t *)*((void *)*a2 + 3);
  uint64_t v13 = **((void **)*a2 + 2);
  uint64_t v14 = *v12;
  swift::Demangle::__runtime::CharVector::append(this + 1591, "fMX", 3uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0LL;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleMacroExpansionUniqueName@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  uint64_t v9 = a2;
  if ((v8 - 1) < 2)
  {
LABEL_5:
    if (*(_DWORD *)a4) {
      return result;
    }
    int v8 = *((unsigned __int8 *)a2 + 18);
    if (v8 != 5) {
      goto LABEL_13;
    }
    goto LABEL_9;
  }

  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    uint64_t v9 = (swift::Demangle::__runtime::Node **)*a2;
    goto LABEL_5;
  }

  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0LL;
  *(_DWORD *)(a4 + 16) = 0;
  if (v8 != 5) {
    goto LABEL_13;
  }
LABEL_9:
  if (*((_DWORD *)a2 + 2) < 4u || (size_t v11 = (swift::Demangle::__runtime::Node *)*((void *)*a2 + 3)) == 0LL)
  {
LABEL_15:
    if (*((_DWORD *)a2 + 2) >= 2u)
    {
      unint64_t v12 = *a2;
LABEL_17:
      if (*(_DWORD *)a4) {
        return result;
      }
      goto LABEL_20;
    }

    goto LABEL_19;
  }

  if (*(_DWORD *)a4) {
    return result;
  }
  int v8 = *((unsigned __int8 *)a2 + 18);
LABEL_13:
  unint64_t v12 = (swift::Demangle::__runtime::Node *)a2;
  if (v8 == 2) {
    goto LABEL_17;
  }
  if (v8 == 5) {
    goto LABEL_15;
  }
LABEL_19:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0LL;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_20:
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "fMu", 3uLL, this[1593]);
  if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u) {
  *(_DWORD *)a4 = 0;
  }
  *(void *)(a4 + 8) = 0LL;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleMaterializeForSet@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v5 = 0LL;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  uint64_t v5 = *(void *)a2;
}

uint64_t *anonymous namespace'::Remangler::mangleMemberAttachedMacroExpansion@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  uint64_t v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0LL;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }

    uint64_t v9 = (swift::Demangle::__runtime::Node **)*a2;
  }

  if (*(_DWORD *)a4) {
    return result;
  }
  int v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  size_t v11 = (swift::Demangle::__runtime::Node *)a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0LL;
      *(_DWORD *)(a4 + 16) = 0;
      if (v8 != 5) {
        goto LABEL_19;
      }
      goto LABEL_16;
    }

    size_t v11 = *a2;
  }

  if (*(_DWORD *)a4) {
    return result;
  }
  if (*((_BYTE *)a2 + 18) != 5) {
    goto LABEL_19;
  }
LABEL_16:
  if (*((_DWORD *)a2 + 2) > 2u)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    goto LABEL_20;
  }

uint64_t *anonymous namespace'::Remangler::mangleMemberAttributeAttachedMacroExpansion@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  uint64_t v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0LL;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }

    uint64_t v9 = (swift::Demangle::__runtime::Node **)*a2;
  }

  if (*(_DWORD *)a4) {
    return result;
  }
  int v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  size_t v11 = (swift::Demangle::__runtime::Node *)a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0LL;
      *(_DWORD *)(a4 + 16) = 0;
      if (v8 != 5) {
        goto LABEL_19;
      }
      goto LABEL_16;
    }

    size_t v11 = *a2;
  }

  if (*(_DWORD *)a4) {
    return result;
  }
  if (*((_BYTE *)a2 + 18) != 5) {
    goto LABEL_19;
  }
LABEL_16:
  if (*((_DWORD *)a2 + 2) > 2u)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    goto LABEL_20;
  }

uint64_t *anonymous namespace'::Remangler::mangleMetatype@<X0>( uint64_t *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  uint64_t v5 = this;
  int v7 = *((unsigned __int8 *)a2 + 18);
  int v8 = a2;
  unsigned int v9 = a3 + 1;
  if (*(_WORD *)(*(void *)v8 + 16LL) != 146)
  {
    if (v7 != 1)
    {
      if (v7 != 5 || *((_DWORD *)a2 + 2) != 1)
      {
        int v19 = 321;
        int v18 = 10;
        goto LABEL_41;
      }

      int v4 = *(swift::Demangle::__runtime::Node **)a2;
    }

    if (*(_DWORD *)a4) {
      return this;
    }
    unsigned int v11 = *((_DWORD *)v5 + 3184);
    size_t v12 = *((unsigned int *)v5 + 3185);
    uint64_t v13 = (char *)v5[1591];
    if (v11 < v12)
    {
LABEL_40:
      int v18 = 0;
      int v4 = 0LL;
      int v19 = 0;
      *((_DWORD *)v5 + 3184) = v11 + 1;
      v13[v11] = 109;
      goto LABEL_41;
    }

    uint64_t v14 = (void *)v5[1593];
    unint64_t v15 = (char *)v14[1];
    if (&v13[v12] == v15)
    {
      unint64_t v20 = (unint64_t)&v13[v12 + 1];
      unint64_t v16 = v14[2];
      if (v20 <= v16)
      {
        v14[1] = v20;
        LODWORD(v21) = 1;
LABEL_39:
        *((_DWORD *)v5 + 3185) = v12 + v21;
        goto LABEL_40;
      }
    }

    else
    {
      unint64_t v16 = v14[2];
    }

    else {
      uint64_t v21 = (2 * v12);
    }
    size_t v22 = v21 + v12;
    if (!v15 || (unint64_t)&v15[v22] > v16)
    {
      unint64_t v23 = 2LL * v14[4];
      if (v23 <= v22 + 1) {
        unint64_t v23 = v22 + 1;
      }
      uint64_t v14[4] = v23;
      unint64_t v24 = v23 + 8;
      this = (uint64_t *)malloc(v23 + 8);
      unint64_t v25 = (char *)this + v24;
      *this = v14[3];
      unint64_t v15 = (char *)(this + 1);
      v14[2] = v25;
      void v14[3] = this;
    }

    v14[1] = &v15[v22];
    if ((_DWORD)v12)
    {
      this = (uint64_t *)memcpy(v15, (const void *)v5[1591], v12);
      LODWORD(v12) = *((_DWORD *)v5 + 3185);
      unsigned int v11 = *((_DWORD *)v5 + 3184);
    }

    v5[1591] = (uint64_t)v15;
    uint64_t v13 = v15;
    goto LABEL_39;
  }

  unsigned int v10 = a2;
  if (v7 != 2)
  {
    if (v7 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0LL;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_19;
    }

    unsigned int v10 = *(swift::Demangle::__runtime::Node **)a2;
  }

  if (*(_DWORD *)a4) {
    return this;
  }
LABEL_19:
  this = (uint64_t *)swift::Demangle::__runtime::CharVector::append((char **)v5 + 1591, "XM", 2uLL, (void *)v5[1593]);
  int v17 = *((unsigned __int8 *)v4 + 18);
  if (v17 == 5 && *((_DWORD *)v4 + 2))
  {
    int v4 = *(swift::Demangle::__runtime::Node **)v4;
LABEL_23:
    if (*(_DWORD *)a4) {
      return this;
    }
  }

  int v18 = 0;
  int v4 = 0LL;
  int v19 = 0;
LABEL_41:
  *(_DWORD *)a4 = v18;
  *(void *)(a4 + 8) = v4;
  *(_DWORD *)(a4 + 16) = v19;
  return this;
}

uint64_t anonymous namespace'::Remangler::mangleMetatypeRepresentation@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = a2;
  uint64_t result = *(void *)a2;
  uint64_t v7 = *((void *)a2 + 1);
  if (v7 == 14)
  {
    uint64_t result = memcmp((const void *)result, "@objc_metatype", 0xEuLL);
    if ((_DWORD)result) {
      goto LABEL_17;
    }
    unsigned int v9 = (_DWORD *)((char *)this + 12736);
    unsigned int v10 = *((_DWORD *)this + 3184);
    size_t v16 = *((unsigned int *)this + 3185);
    size_t v12 = (char *)*((void *)this + 1591);
    int v17 = (void *)*((void *)this + 1593);
    int v18 = (char *)v17[1];
    if (&v12[v16] == v18)
    {
      unint64_t v27 = (unint64_t)&v12[v16 + 1];
      unint64_t v19 = v17[2];
      if (v27 <= v19)
      {
        v17[1] = v27;
        LODWORD(v28) = 1;
LABEL_59:
        *((_DWORD *)this + 3185) = v16 + v28;
LABEL_60:
        char v23 = 111;
        goto LABEL_66;
      }
    }

    else
    {
      unint64_t v19 = v17[2];
    }

    else {
      uint64_t v28 = (2 * v16);
    }
    size_t v29 = v28 + v16;
    if (!v18 || (unint64_t)&v18[v29] > v19)
    {
      unint64_t v30 = 2LL * v17[4];
      if (v30 <= v29 + 1) {
        unint64_t v30 = v29 + 1;
      }
      v17[4] = v30;
      unint64_t v31 = v30 + 8;
      uint64_t result = (uint64_t)malloc(v30 + 8);
      uint64_t v32 = result + v31;
      *(void *)uint64_t result = v17[3];
      int v18 = (char *)(result + 8);
      void v17[2] = v32;
      v17[3] = result;
    }

    v17[1] = &v18[v29];
    if ((_DWORD)v16)
    {
      uint64_t result = (uint64_t)memcpy(v18, *((const void **)this + 1591), v16);
      LODWORD(v16) = *((_DWORD *)this + 3185);
      unsigned int v10 = *((_DWORD *)this + 3184);
    }

    *((void *)this + 1591) = v18;
    size_t v12 = v18;
    goto LABEL_59;
  }

  if (v7 != 6)
  {
    if (v7 != 5) {
      goto LABEL_17;
    }
    if (*(_DWORD *)result != 1768453184 || *(_BYTE *)(result + 4) != 110) {
      goto LABEL_17;
    }
    unsigned int v9 = (_DWORD *)((char *)this + 12736);
    unsigned int v10 = *((_DWORD *)this + 3184);
    size_t v11 = *((unsigned int *)this + 3185);
    size_t v12 = (char *)*((void *)this + 1591);
    uint64_t v13 = (void *)*((void *)this + 1593);
    uint64_t v14 = (char *)v13[1];
    if (&v12[v11] == v14)
    {
      unint64_t v39 = (unint64_t)&v12[v11 + 1];
      unint64_t v15 = v13[2];
      if (v39 <= v15)
      {
        v13[1] = v39;
        LODWORD(v40) = 1;
LABEL_64:
        *((_DWORD *)this + 3185) = v11 + v40;
LABEL_65:
        char v23 = 116;
        goto LABEL_66;
      }
    }

    else
    {
      unint64_t v15 = v13[2];
    }

    else {
      uint64_t v40 = (2 * v11);
    }
    size_t v41 = v40 + v11;
    if (!v14 || (unint64_t)&v14[v41] > v15)
    {
      unint64_t v42 = 2LL * v13[4];
      if (v42 <= v41 + 1) {
        unint64_t v42 = v41 + 1;
      }
      _OWORD v13[4] = v42;
      unint64_t v43 = v42 + 8;
      uint64_t result = (uint64_t)malloc(v42 + 8);
      uint64_t v44 = result + v43;
      *(void *)uint64_t result = v13[3];
      uint64_t v14 = (char *)(result + 8);
      v13[2] = v44;
      void v13[3] = result;
    }

    v13[1] = &v14[v41];
    if ((_DWORD)v11)
    {
      uint64_t result = (uint64_t)memcpy(v14, *((const void **)this + 1591), v11);
      LODWORD(v11) = *((_DWORD *)this + 3185);
      unsigned int v10 = *((_DWORD *)this + 3184);
    }

    *((void *)this + 1591) = v14;
    size_t v12 = v14;
    goto LABEL_64;
  }

  uint64_t result = memcmp((const void *)result, "@thick", 6uLL);
  if (!(_DWORD)result)
  {
    unsigned int v9 = (_DWORD *)((char *)this + 12736);
    unsigned int v10 = *((_DWORD *)this + 3184);
    size_t v22 = *((unsigned int *)this + 3185);
    size_t v12 = (char *)*((void *)this + 1591);
    if (v10 < v22)
    {
      char v23 = 84;
LABEL_66:
      int v21 = 0;
      int v3 = 0LL;
      int v20 = 0;
      *unsigned int v9 = v10 + 1;
      v12[v10] = v23;
      goto LABEL_67;
    }

    unint64_t v24 = (void *)*((void *)this + 1593);
    unint64_t v25 = (char *)v24[1];
    if (&v12[v22] == v25)
    {
      unint64_t v33 = (unint64_t)&v12[v22 + 1];
      unint64_t v26 = v24[2];
      if (v33 <= v26)
      {
        v24[1] = v33;
        LODWORD(v34) = 1;
LABEL_62:
        *((_DWORD *)this + 3185) = v22 + v34;
        char v23 = 84;
        goto LABEL_66;
      }
    }

    else
    {
      unint64_t v26 = v24[2];
    }

    else {
      uint64_t v34 = (2 * v22);
    }
    size_t v35 = v34 + v22;
    if (!v25 || (unint64_t)&v25[v35] > v26)
    {
      unint64_t v36 = 2LL * v24[4];
      if (v36 <= v35 + 1) {
        unint64_t v36 = v35 + 1;
      }
      void v24[4] = v36;
      unint64_t v37 = v36 + 8;
      uint64_t result = (uint64_t)malloc(v36 + 8);
      uint64_t v38 = result + v37;
      *(void *)uint64_t result = v24[3];
      unint64_t v25 = (char *)(result + 8);
      void v24[2] = v38;
      void v24[3] = result;
    }

    v24[1] = &v25[v35];
    if ((_DWORD)v22)
    {
      uint64_t result = (uint64_t)memcpy(v25, *((const void **)this + 1591), v22);
      LODWORD(v22) = *((_DWORD *)this + 3185);
      unsigned int v10 = *((_DWORD *)this + 3184);
    }

    *((void *)this + 1591) = v25;
    size_t v12 = v25;
    goto LABEL_62;
  }

{
  swift::Demangle::__runtime::Node *v3;
  uint64_t result;
  uint64_t v7;
  _DWORD *v9;
  unsigned int v10;
  size_t v11;
  char *v12;
  void *v13;
  char *v14;
  unint64_t v15;
  size_t v16;
  void *v17;
  char *v18;
  unint64_t v19;
  int v20;
  int v21;
  size_t v22;
  char v23;
  void *v24;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  size_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  size_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  size_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int v3 = a2;
  uint64_t result = *(void *)a2;
  uint64_t v7 = *((void *)a2 + 1);
  if (v7 == 14)
  {
    uint64_t result = memcmp((const void *)result, "@objc_metatype", 0xEuLL);
    if ((_DWORD)result) {
      goto LABEL_17;
    }
    unsigned int v9 = (_DWORD *)((char *)this + 12736);
    unsigned int v10 = *((_DWORD *)this + 3184);
    size_t v16 = *((unsigned int *)this + 3185);
    size_t v12 = (char *)*((void *)this + 1591);
    int v17 = (void *)*((void *)this + 1593);
    int v18 = (char *)v17[1];
    if (&v12[v16] == v18)
    {
      unint64_t v27 = (unint64_t)&v12[v16 + 1];
      unint64_t v19 = v17[2];
      if (v27 <= v19)
      {
        v17[1] = v27;
        LODWORD(v28) = 1;
LABEL_59:
        *((_DWORD *)this + 3185) = v16 + v28;
LABEL_60:
        char v23 = 111;
        goto LABEL_66;
      }
    }

    else
    {
      unint64_t v19 = v17[2];
    }

    else {
      uint64_t v28 = (2 * v16);
    }
    size_t v29 = v28 + v16;
    if (!v18 || (unint64_t)&v18[v29] > v19)
    {
      unint64_t v30 = 2LL * v17[4];
      if (v30 <= v29 + 1) {
        unint64_t v30 = v29 + 1;
      }
      v17[4] = v30;
      unint64_t v31 = v30 + 8;
      uint64_t result = (uint64_t)malloc(v30 + 8);
      uint64_t v32 = result + v31;
      *(void *)uint64_t result = v17[3];
      int v18 = (char *)(result + 8);
      void v17[2] = v32;
      v17[3] = result;
    }

    v17[1] = &v18[v29];
    if ((_DWORD)v16)
    {
      uint64_t result = (uint64_t)memcpy(v18, *((const void **)this + 1591), v16);
      LODWORD(v16) = *((_DWORD *)this + 3185);
      unsigned int v10 = *((_DWORD *)this + 3184);
    }

    *((void *)this + 1591) = v18;
    size_t v12 = v18;
    goto LABEL_59;
  }

  if (v7 != 6)
  {
    if (v7 != 5) {
      goto LABEL_17;
    }
    if (*(_DWORD *)result != 1768453184 || *(_BYTE *)(result + 4) != 110) {
      goto LABEL_17;
    }
    unsigned int v9 = (_DWORD *)((char *)this + 12736);
    unsigned int v10 = *((_DWORD *)this + 3184);
    size_t v11 = *((unsigned int *)this + 3185);
    size_t v12 = (char *)*((void *)this + 1591);
    uint64_t v13 = (void *)*((void *)this + 1593);
    uint64_t v14 = (char *)v13[1];
    if (&v12[v11] == v14)
    {
      unint64_t v39 = (unint64_t)&v12[v11 + 1];
      unint64_t v15 = v13[2];
      if (v39 <= v15)
      {
        v13[1] = v39;
        LODWORD(v40) = 1;
LABEL_64:
        *((_DWORD *)this + 3185) = v11 + v40;
LABEL_65:
        char v23 = 116;
        goto LABEL_66;
      }
    }

    else
    {
      unint64_t v15 = v13[2];
    }

    else {
      uint64_t v40 = (2 * v11);
    }
    size_t v41 = v40 + v11;
    if (!v14 || (unint64_t)&v14[v41] > v15)
    {
      unint64_t v42 = 2LL * v13[4];
      if (v42 <= v41 + 1) {
        unint64_t v42 = v41 + 1;
      }
      _OWORD v13[4] = v42;
      unint64_t v43 = v42 + 8;
      uint64_t result = (uint64_t)malloc(v42 + 8);
      uint64_t v44 = result + v43;
      *(void *)uint64_t result = v13[3];
      uint64_t v14 = (char *)(result + 8);
      v13[2] = v44;
      void v13[3] = result;
    }

    v13[1] = &v14[v41];
    if ((_DWORD)v11)
    {
      uint64_t result = (uint64_t)memcpy(v14, *((const void **)this + 1591), v11);
      LODWORD(v11) = *((_DWORD *)this + 3185);
      unsigned int v10 = *((_DWORD *)this + 3184);
    }

    *((void *)this + 1591) = v14;
    size_t v12 = v14;
    goto LABEL_64;
  }

  uint64_t result = memcmp((const void *)result, "@thick", 6uLL);
  if (!(_DWORD)result)
  {
    unsigned int v9 = (_DWORD *)((char *)this + 12736);
    unsigned int v10 = *((_DWORD *)this + 3184);
    size_t v22 = *((unsigned int *)this + 3185);
    size_t v12 = (char *)*((void *)this + 1591);
    if (v10 < v22)
    {
      char v23 = 84;
LABEL_66:
      int v21 = 0;
      int v3 = 0LL;
      int v20 = 0;
      *unsigned int v9 = v10 + 1;
      v12[v10] = v23;
      goto LABEL_67;
    }

    unint64_t v24 = (void *)*((void *)this + 1593);
    unint64_t v25 = (char *)v24[1];
    if (&v12[v22] == v25)
    {
      unint64_t v33 = (unint64_t)&v12[v22 + 1];
      unint64_t v26 = v24[2];
      if (v33 <= v26)
      {
        v24[1] = v33;
        LODWORD(v34) = 1;
LABEL_62:
        *((_DWORD *)this + 3185) = v22 + v34;
        char v23 = 84;
        goto LABEL_66;
      }
    }

    else
    {
      unint64_t v26 = v24[2];
    }

    else {
      uint64_t v34 = (2 * v22);
    }
    size_t v35 = v34 + v22;
    if (!v25 || (unint64_t)&v25[v35] > v26)
    {
      unint64_t v36 = 2LL * v24[4];
      if (v36 <= v35 + 1) {
        unint64_t v36 = v35 + 1;
      }
      void v24[4] = v36;
      unint64_t v37 = v36 + 8;
      uint64_t result = (uint64_t)malloc(v36 + 8);
      uint64_t v38 = result + v37;
      *(void *)uint64_t result = v24[3];
      unint64_t v25 = (char *)(result + 8);
      void v24[2] = v38;
      void v24[3] = result;
    }

    v24[1] = &v25[v35];
    if ((_DWORD)v22)
    {
      uint64_t result = (uint64_t)memcpy(v25, *((const void **)this + 1591), v22);
      LODWORD(v22) = *((_DWORD *)this + 3185);
      unsigned int v10 = *((_DWORD *)this + 3184);
    }

    *((void *)this + 1591) = v25;
    size_t v12 = v25;
    goto LABEL_62;
  }

uint64_t *anonymous namespace'::Remangler::mangleMetaclass@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  uint64_t v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      uint64_t v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }

    uint64_t v7 = 0LL;
  }

  switch(v6)
  {
    case 1:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      goto LABEL_16;
    case 2:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8LL * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }

  unsigned int v9 = 0LL;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Mm", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleMethodLookupFunction@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append( (char **)v4 + 1591,  "Mu",  2uLL,  *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0LL;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleObjCMetadataUpdateFunction@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append( (char **)v4 + 1591,  "MU",  2uLL,  *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0LL;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleObjCResilientClassStub@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append( (char **)v4 + 1591,  "Ms",  2uLL,  *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0LL;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleFullObjCResilientClassStub@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append( (char **)v4 + 1591,  "Mt",  2uLL,  *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0LL;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleModifyAccessor@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v5 = 0LL;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  uint64_t v5 = *(void *)a2;
}

void anonymous namespace'::Remangler::mangleModule( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  int v6 = *(unsigned __int16 **)a2;
  uint64_t v7 = *((void *)a2 + 1);
  switch(v7)
  {
    case 3LL:
      int v17 = *v6;
      int v18 = *((unsigned __int8 *)v6 + 2);
      if (v17 != 24415 || v18 != 67) {
        break;
      }
      int v20 = (char **)((char *)this + 12728);
      int v21 = (void *)*((void *)this + 1593);
      size_t v22 = "So";
      goto LABEL_27;
    case 15LL:
      uint64_t v23 = *(void *)v6;
      uint64_t v24 = *(void *)((char *)v6 + 7);
      if (v23 != 0x746E79535F435F5FLL || v24 != 0x64657A6973656874LL) {
        break;
      }
      int v20 = (char **)((char *)this + 12728);
      int v21 = (void *)*((void *)this + 1593);
      size_t v22 = "SC";
LABEL_27:
      swift::Demangle::__runtime::CharVector::append(v20, v22, 2uLL, v21);
      goto LABEL_43;
    case 5LL:
      int v8 = *(_DWORD *)v6;
      int v9 = *((unsigned __int8 *)v6 + 4);
      if (v8 == 1718187859 && v9 == 116)
      {
        unsigned int v11 = *((_DWORD *)this + 3184);
        size_t v12 = *((unsigned int *)this + 3185);
        uint64_t v13 = (char *)*((void *)this + 1591);
        if (v11 < v12)
        {
LABEL_42:
          *((_DWORD *)this + 3184) = v11 + 1;
          v13[v11] = 115;
          goto LABEL_43;
        }

        uint64_t v14 = (void *)*((void *)this + 1593);
        unint64_t v15 = (char *)v14[1];
        if (&v13[v12] == v15)
        {
          unint64_t v29 = (unint64_t)&v13[v12 + 1];
          unint64_t v16 = v14[2];
          if (v29 <= v16)
          {
            v14[1] = v29;
            LODWORD(v30) = 1;
LABEL_41:
            *((_DWORD *)this + 3185) = v12 + v30;
            goto LABEL_42;
          }
        }

        else
        {
          unint64_t v16 = v14[2];
        }

        else {
          uint64_t v30 = (2 * v12);
        }
        size_t v31 = v30 + v12;
        if (!v15 || (unint64_t)&v15[v31] > v16)
        {
          unint64_t v32 = 2LL * v14[4];
          if (v32 <= v31 + 1) {
            unint64_t v32 = v31 + 1;
          }
          uint64_t v14[4] = v32;
          unint64_t v33 = v32 + 8;
          uint64_t v34 = malloc(v32 + 8);
          void *v34 = v14[3];
          unint64_t v15 = (char *)(v34 + 1);
          v14[2] = (char *)v34 + v33;
          void v14[3] = v34;
        }

        v14[1] = &v15[v31];
        if ((_DWORD)v12)
        {
          memcpy(v15, *((const void **)this + 1591), v12);
          LODWORD(v12) = *((_DWORD *)this + 3185);
          unsigned int v11 = *((_DWORD *)this + 3184);
        }

        *((void *)this + 1591) = v15;
        uint64_t v13 = v15;
        goto LABEL_41;
      }

      break;
  }

  __int128 v35 = 0uLL;
  LOBYTE(v36) = 0;
  {
    unint64_t v26 = *((void *)this + 1585);
    if (v26 > 0xF)
    {
      int v28 = *((_DWORD *)this + 3178) + 16;
      __int128 v37 = v35;
      uint64_t v38 = v36;
      int v39 = v28;
      std::__hash_table<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::__runtime::SubstitutionEntry,std::pair<swift::Demangle::__runtime::SubstitutionEntry const,unsigned int>>( (uint64_t)this + 12688,  (uint64_t)&v37,  &v37);
    }

    else
    {
      *((void *)this + 1585) = v26 + 1;
      unint64_t v27 = (char *)this + 24 * v26 + 12296;
      *(_OWORD *)unint64_t v27 = v35;
      v27[16] = v36;
    }
  }

uint64_t *anonymous namespace'::Remangler::mangleNativeOwningAddressor@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v5 = 0LL;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  uint64_t v5 = *(void *)a2;
}

uint64_t *anonymous namespace'::Remangler::mangleNativeOwningMutableAddressor@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v5 = 0LL;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  uint64_t v5 = *(void *)a2;
}

uint64_t *anonymous namespace'::Remangler::mangleNativePinningAddressor@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v5 = 0LL;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  uint64_t v5 = *(void *)a2;
}

uint64_t *anonymous namespace'::Remangler::mangleNativePinningMutableAddressor@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v5 = 0LL;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  uint64_t v5 = *(void *)a2;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleNominalTypeDescriptor@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append( (char **)v4 + 1591,  "Mn",  2uLL,  *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0LL;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleNominalTypeDescriptorRecord@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append( (char **)v4 + 1591,  "Hn",  2uLL,  *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0LL;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleObjCAsyncCompletionHandlerImpl@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  int v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0LL;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }

    int v9 = (swift::Demangle::__runtime::Node **)*a2;
  }

  if (*(_DWORD *)a4) {
    return result;
  }
  int v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  unsigned int v11 = (swift::Demangle::__runtime::Node *)a2;
  if (v8 == 2) {
    goto LABEL_12;
  }
  if (v8 == 5 && *((_DWORD *)a2 + 2) >= 2u)
  {
    unsigned int v11 = *a2;
LABEL_12:
    if (*(_DWORD *)a4) {
      return result;
    }
    if (*((_BYTE *)a2 + 18) != 5) {
      goto LABEL_18;
    }
LABEL_16:
    if (*((_DWORD *)a2 + 2) == 4)
    {
      if (*(_DWORD *)a4) {
        return result;
      }
    }

    goto LABEL_18;
  }

  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0LL;
  *(_DWORD *)(a4 + 16) = 0;
  if (v8 == 5) {
    goto LABEL_16;
  }
LABEL_18:
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Tz", 2uLL, this[1593]);
  if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u) {
  *(_DWORD *)a4 = 0;
  }
  *(void *)(a4 + 8) = 0LL;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::manglePredefinedObjCAsyncCompletionHandlerImpl@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  unsigned int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      unsigned int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }

    unsigned int v7 = 0LL;
  }

  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8LL * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }

  int v9 = 0LL;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "TZ", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

uint64_t *anonymous namespace'::Remangler::mangleObjCBlock@<X0>( swift::Demangle::__runtime::NodeFactory **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  uint64_t v7 = *((unsigned __int8 *)a2 + 18);
  uint64_t v8 = a2;
  if ((v7 - 1) >= 2)
  {
    if ((_DWORD)v7 != 5)
    {
LABEL_11:
      switch((_DWORD)v7)
      {
        case 1:
LABEL_16:
          unsigned int v10 = a3 + 1;
          uint64_t v11 = v7 - 1;
          while (1)
          {
            unint64_t v12 = *((unsigned __int8 *)v4 + 18);
            unsigned int v13 = v12 - 1;
            if ((_DWORD)v12 != 1)
            {
              if ((_DWORD)v12 == 5)
              {
                unint64_t v12 = *((unsigned int *)v4 + 2);
              }

              else
              {
                if ((_DWORD)v12 != 2) {
                  goto LABEL_17;
                }
                unint64_t v12 = 2LL;
              }
            }

            if (v12 > v11)
            {
              uint64_t v14 = v4;
              if (v13 >= 2) {
                uint64_t v14 = *(swift::Demangle::__runtime::Node **)v4;
              }
              if (*(_DWORD *)a4) {
                return result;
              }
              goto LABEL_18;
            }

uint64_t *anonymous namespace'::Remangler::mangleEscapingObjCBlock@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *((unsigned __int8 *)a2 + 18);
  switch((_DWORD)v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      uint64_t v7 = *((unsigned int *)a2 + 2);
      if ((_DWORD)v7) {
        goto LABEL_6;
      }
      break;
    case 2:
      uint64_t v7 = 2LL;
LABEL_6:
      unsigned int v8 = a3 + 1;
      for (uint64_t i = v7 - 1; i != -1; --i)
      {
        unint64_t v10 = *((unsigned __int8 *)a2 + 18);
        unsigned int v11 = v10 - 1;
        if ((_DWORD)v10 != 1)
        {
          if ((_DWORD)v10 == 5)
          {
            unint64_t v10 = *((unsigned int *)a2 + 2);
          }

          else
          {
            if ((_DWORD)v10 != 2) {
              goto LABEL_7;
            }
            unint64_t v10 = 2LL;
          }
        }

        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(void *)(a4 + 8) = 0LL;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }

        unint64_t v12 = a2;
        if (v11 >= 2) {
          unint64_t v12 = *(swift::Demangle::__runtime::Node **)a2;
        }
        if (*(_DWORD *)a4) {
          return result;
        }
      }

      break;
  }

  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0LL;
  *(_DWORD *)(a4 + 16) = 0;
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "XL", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0LL;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleOwningAddressor@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v5 = 0LL;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  uint64_t v5 = *(void *)a2;
}

uint64_t *anonymous namespace'::Remangler::mangleOwningMutableAddressor@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v5 = 0LL;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  uint64_t v5 = *(void *)a2;
}

uint64_t *anonymous namespace'::Remangler::manglePartialApplyForwarder@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *((unsigned __int8 *)a2 + 18);
  switch((_DWORD)v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      uint64_t v7 = *((unsigned int *)a2 + 2);
      if ((_DWORD)v7) {
        goto LABEL_6;
      }
      break;
    case 2:
      uint64_t v7 = 2LL;
LABEL_6:
      unsigned int v8 = a3 + 1;
      for (uint64_t i = v7 - 1; i != -1; --i)
      {
        unint64_t v10 = *((unsigned __int8 *)a2 + 18);
        unsigned int v11 = v10 - 1;
        if ((_DWORD)v10 != 1)
        {
          if ((_DWORD)v10 == 5)
          {
            unint64_t v10 = *((unsigned int *)a2 + 2);
          }

          else
          {
            if ((_DWORD)v10 != 2) {
              goto LABEL_7;
            }
            unint64_t v10 = 2LL;
          }
        }

        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(void *)(a4 + 8) = 0LL;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }

        unint64_t v12 = a2;
        if (v11 >= 2) {
          unint64_t v12 = *(swift::Demangle::__runtime::Node **)a2;
        }
        if (*(_DWORD *)a4) {
          return result;
        }
      }

      break;
  }

  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0LL;
  *(_DWORD *)(a4 + 16) = 0;
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "TA", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0LL;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::manglePartialApplyObjCForwarder@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *((unsigned __int8 *)a2 + 18);
  switch((_DWORD)v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      uint64_t v7 = *((unsigned int *)a2 + 2);
      if ((_DWORD)v7) {
        goto LABEL_6;
      }
      break;
    case 2:
      uint64_t v7 = 2LL;
LABEL_6:
      unsigned int v8 = a3 + 1;
      for (uint64_t i = v7 - 1; i != -1; --i)
      {
        unint64_t v10 = *((unsigned __int8 *)a2 + 18);
        unsigned int v11 = v10 - 1;
        if ((_DWORD)v10 != 1)
        {
          if ((_DWORD)v10 == 5)
          {
            unint64_t v10 = *((unsigned int *)a2 + 2);
          }

          else
          {
            if ((_DWORD)v10 != 2) {
              goto LABEL_7;
            }
            unint64_t v10 = 2LL;
          }
        }

        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(void *)(a4 + 8) = 0LL;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }

        unint64_t v12 = a2;
        if (v11 >= 2) {
          unint64_t v12 = *(swift::Demangle::__runtime::Node **)a2;
        }
        if (*(_DWORD *)a4) {
          return result;
        }
      }

      break;
  }

  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0LL;
  *(_DWORD *)(a4 + 16) = 0;
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Ta", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0LL;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::manglePeerAttachedMacroExpansion@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  BOOL v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0LL;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }

    BOOL v9 = (swift::Demangle::__runtime::Node **)*a2;
  }

  if (*(_DWORD *)a4) {
    return result;
  }
  int v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  unsigned int v11 = (swift::Demangle::__runtime::Node *)a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0LL;
      *(_DWORD *)(a4 + 16) = 0;
      if (v8 != 5) {
        goto LABEL_19;
      }
      goto LABEL_16;
    }

    unsigned int v11 = *a2;
  }

  if (*(_DWORD *)a4) {
    return result;
  }
  if (*((_BYTE *)a2 + 18) != 5) {
    goto LABEL_19;
  }
LABEL_16:
  if (*((_DWORD *)a2 + 2) > 2u)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    goto LABEL_20;
  }

void *anonymous namespace'::Remangler::manglePostfixOperator@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "oP", 2uLL, this[1593]);
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = 0LL;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::manglePreambleAttachedMacroExpansion@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  BOOL v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0LL;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }

    BOOL v9 = (swift::Demangle::__runtime::Node **)*a2;
  }

  if (*(_DWORD *)a4) {
    return result;
  }
  int v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  unsigned int v11 = (swift::Demangle::__runtime::Node *)a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0LL;
      *(_DWORD *)(a4 + 16) = 0;
      if (v8 != 5) {
        goto LABEL_19;
      }
      goto LABEL_16;
    }

    unsigned int v11 = *a2;
  }

  if (*(_DWORD *)a4) {
    return result;
  }
  if (*((_BYTE *)a2 + 18) != 5) {
    goto LABEL_19;
  }
LABEL_16:
  if (*((_DWORD *)a2 + 2) > 2u)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    goto LABEL_20;
  }

void *anonymous namespace'::Remangler::manglePrefixOperator@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "op", 2uLL, this[1593]);
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = 0LL;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::manglePrivateDeclName@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *((unsigned __int8 *)a2 + 18);
  if ((_DWORD)v7 != 1)
  {
    if ((_DWORD)v7 == 5)
    {
      uint64_t v7 = *((unsigned int *)a2 + 2);
      if (!(_DWORD)v7)
      {
        *(_DWORD *)a4 = 0;
        *(void *)(a4 + 8) = 0LL;
        *(_DWORD *)(a4 + 16) = 0;
        uint64_t v14 = (char **)((char *)this + 12728);
        goto LABEL_24;
      }
    }

    else
    {
      if ((_DWORD)v7 != 2) {
        goto LABEL_20;
      }
      uint64_t v7 = 2LL;
    }
  }

  unsigned int v8 = a3 + 1;
  uint64_t v9 = v7 - 1;
  do
  {
    unint64_t v10 = *((unsigned __int8 *)a2 + 18);
    unsigned int v11 = v10 - 1;
    if ((_DWORD)v10 != 1)
    {
      if ((_DWORD)v10 == 5)
      {
        unint64_t v10 = *((unsigned int *)a2 + 2);
      }

      else
      {
        if ((_DWORD)v10 != 2) {
          goto LABEL_7;
        }
        unint64_t v10 = 2LL;
      }
    }

    if (v10 <= v9)
    {
LABEL_7:
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0LL;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }

    unint64_t v12 = a2;
    if (v11 >= 2) {
      unint64_t v12 = *(swift::Demangle::__runtime::Node **)a2;
    }
    if (*(_DWORD *)a4) {
      return result;
    }
LABEL_8:
    --v9;
  }

  while (v9 != -1);
  LODWORD(v7) = *((unsigned __int8 *)a2 + 18);
LABEL_20:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0LL;
  *(_DWORD *)(a4 + 16) = 0;
  uint64_t v14 = (char **)((char *)this + 12728);
  if ((_DWORD)v7 != 1)
  {
    if ((_DWORD)v7 != 5)
    {
LABEL_26:
      unint64_t v15 = "LL";
      goto LABEL_27;
    }

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::manglePropertyDescriptor@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append( (char **)v4 + 1591,  "MV",  2uLL,  *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0LL;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *anonymous namespace'::Remangler::manglePropertyWrapperBackingInitializer@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }

    int v7 = 0LL;
  }

  switch(v6)
  {
    case 1:
      uint64_t v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      goto LABEL_16;
    case 2:
      uint64_t v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      uint64_t v9 = (swift::Demangle::__runtime::Node *)(v8 + 8LL * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }

  uint64_t v9 = 0LL;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "fP", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

uint64_t *anonymous namespace'::Remangler::manglePropertyWrapperInitFromProjectedValue@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }

    int v7 = 0LL;
  }

  switch(v6)
  {
    case 1:
      uint64_t v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      goto LABEL_16;
    case 2:
      uint64_t v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      uint64_t v9 = (swift::Demangle::__runtime::Node *)(v8 + 8LL * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }

  uint64_t v9 = 0LL;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "fW", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

uint64_t *anonymous namespace'::Remangler::mangleProtocolConformance@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7 = *((unsigned __int8 *)a2 + 18);
  uint64_t v8 = a2;
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    uint64_t v8 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_5:
    uint64_t v9 = *(swift::Demangle::__runtime::Node **)v8;
    goto LABEL_7;
  }

  uint64_t v9 = 0LL;
LABEL_7:
  int v10 = *((unsigned __int8 *)v9 + 18);
  if ((v10 - 1) < 2)
  {
LABEL_11:
    unsigned int v11 = *(swift::Demangle::__runtime::Node **)v9;
    goto LABEL_13;
  }

  if (v10 == 5 && *((_DWORD *)v9 + 2))
  {
    uint64_t v9 = *(swift::Demangle::__runtime::Node **)v9;
    goto LABEL_11;
  }

  unsigned int v11 = 0LL;
LABEL_13:
  if (*((_WORD *)v11 + 8) != 44)
  {
LABEL_27:
    uint64_t v14 = 0LL;
    goto LABEL_28;
  }

  int v12 = *((unsigned __int8 *)v11 + 18);
  unsigned int v13 = (swift::Demangle::__runtime::Node **)v11;
  if (v12 != 5)
  {
    uint64_t v14 = 0LL;
    if (v12 == 2)
    {
LABEL_24:
      unsigned int v11 = (swift::Demangle::__runtime::Node *)*((void *)v11 + 1);
      goto LABEL_28;
    }

    goto LABEL_21;
  }

  if (!*((_DWORD *)v11 + 2))
  {
    unsigned int v11 = 0LL;
    goto LABEL_27;
  }

  unsigned int v13 = *(swift::Demangle::__runtime::Node ***)v11;
LABEL_18:
  uint64_t v14 = *v13;
  if (v12 == 2) {
    goto LABEL_24;
  }
LABEL_21:
  if (v12 == 5 && *((_DWORD *)v11 + 2) >= 2u)
  {
    unsigned int v11 = *(swift::Demangle::__runtime::Node **)v11;
    goto LABEL_24;
  }

  unsigned int v11 = 0LL;
LABEL_28:
  unsigned int v15 = a3 + 1;
  if (*(_DWORD *)a4) {
    return result;
  }
  int v17 = *((unsigned __int8 *)a2 + 18);
  if (v17 == 5)
  {
    if (*((_DWORD *)a2 + 2) != 4)
    {
LABEL_36:
      if (*((_DWORD *)a2 + 2) >= 2u)
      {
        int v18 = *(swift::Demangle::__runtime::Node **)a2;
        goto LABEL_38;
      }

      goto LABEL_39;
    }

    if (*(_DWORD *)a4) {
      return result;
    }
    int v17 = *((unsigned __int8 *)a2 + 18);
  }

  int v18 = a2;
  if (v17 == 2)
  {
LABEL_38:
    size_t v19 = (uint64_t *)*((void *)v18 + 1);
    goto LABEL_40;
  }

  if (v17 == 5) {
    goto LABEL_36;
  }
LABEL_39:
  size_t v19 = 0LL;
LABEL_40:
  if (*((_WORD *)v19 + 8) != 232) {
    goto LABEL_47;
  }
  int v20 = *((unsigned __int8 *)v19 + 18);
  if (v20 == 5 && *((_DWORD *)v19 + 2))
  {
    size_t v19 = (uint64_t *)*v19;
LABEL_45:
    size_t v19 = (uint64_t *)*v19;
    goto LABEL_47;
  }

  size_t v19 = 0LL;
LABEL_47:
  if ((result & 1) == 0)
  {
    int v21 = *((unsigned __int8 *)v19 + 18);
    unint64_t v22 = (swift::Demangle::__runtime::Node **)v19;
    if ((v21 - 1) >= 2)
    {
      if (v21 == 5)
      {
        unsigned int v23 = (uint64_t *)*v19;
        unint64_t v22 = (swift::Demangle::__runtime::Node **)*v19;
LABEL_56:
        uint64_t v24 = (swift::Demangle::__runtime::Node **)&v23[*((unsigned int *)v19 + 2)];
        goto LABEL_62;
      }

      unint64_t v22 = 0LL;
    }

    switch(v21)
    {
      case 1:
        uint64_t v24 = (swift::Demangle::__runtime::Node **)(v19 + 1);
        goto LABEL_62;
      case 2:
        uint64_t v24 = (swift::Demangle::__runtime::Node **)(v19 + 2);
        goto LABEL_62;
      case 5:
        unsigned int v23 = (uint64_t *)*v19;
        goto LABEL_56;
    }

    uint64_t v24 = 0LL;
LABEL_62:
    while (v22 != v24)
    {
      if (*(_DWORD *)a4) {
        return result;
      }
      ++v22;
    }
  }

  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0LL;
  *(_DWORD *)(a4 + 16) = 0;
  if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) > 2u)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
  }

  else
  {
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
  }

  {
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
  }

  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleProtocolConformanceRefInTypeModule@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7 = *((unsigned __int8 *)a2 + 18);
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    uint64_t v8 = *a2;
    goto LABEL_7;
  }

  uint64_t v8 = 0LL;
LABEL_7:
  if (*((_WORD *)v8 + 8) != 232) {
    goto LABEL_14;
  }
  int v9 = *((unsigned __int8 *)v8 + 18);
  if (v9 == 5 && *((_DWORD *)v8 + 2))
  {
    uint64_t v8 = *(swift::Demangle::__runtime::Node **)v8;
LABEL_12:
    uint64_t v8 = *(swift::Demangle::__runtime::Node **)v8;
    goto LABEL_14;
  }

  uint64_t v8 = 0LL;
LABEL_14:
    goto LABEL_33;
  int v10 = *((unsigned __int8 *)v8 + 18);
  unsigned int v11 = (swift::Demangle::__runtime::Node **)v8;
  if ((v10 - 1) >= 2)
  {
    if (v10 == 5)
    {
      int v12 = *(swift::Demangle::__runtime::Node **)v8;
      unsigned int v11 = *(swift::Demangle::__runtime::Node ***)v8;
      goto LABEL_23;
    }

    unsigned int v11 = 0LL;
  }

  if (v10 == 1)
  {
    unsigned int v13 = (swift::Demangle::__runtime::Node **)((char *)v8 + 8);
    if (v11 == v13) {
      goto LABEL_33;
    }
    goto LABEL_30;
  }

  if (v10 == 2)
  {
    unsigned int v13 = (swift::Demangle::__runtime::Node **)((char *)v8 + 16);
    if (v11 == v13) {
      goto LABEL_33;
    }
    goto LABEL_30;
  }

  if (v10 != 5)
  {
    unsigned int v13 = 0LL;
    if (v11) {
      goto LABEL_30;
    }
LABEL_33:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "HP", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

  int v12 = *(swift::Demangle::__runtime::Node **)v8;
LABEL_23:
  unsigned int v13 = (swift::Demangle::__runtime::Node **)((char *)v12 + 8 * *((unsigned int *)v8 + 2));
  if (v11 == v13) {
    goto LABEL_33;
  }
LABEL_30:
  unsigned int v14 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    if (++v11 == v13) {
      goto LABEL_33;
    }
  }

uint64_t *anonymous namespace'::Remangler::mangleProtocolConformanceRefInProtocolModule@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7 = *((unsigned __int8 *)a2 + 18);
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    uint64_t v8 = *a2;
    goto LABEL_7;
  }

  uint64_t v8 = 0LL;
LABEL_7:
  if (*((_WORD *)v8 + 8) != 232) {
    goto LABEL_14;
  }
  int v9 = *((unsigned __int8 *)v8 + 18);
  if (v9 == 5 && *((_DWORD *)v8 + 2))
  {
    uint64_t v8 = *(swift::Demangle::__runtime::Node **)v8;
LABEL_12:
    uint64_t v8 = *(swift::Demangle::__runtime::Node **)v8;
    goto LABEL_14;
  }

  uint64_t v8 = 0LL;
LABEL_14:
    goto LABEL_33;
  int v10 = *((unsigned __int8 *)v8 + 18);
  unsigned int v11 = (swift::Demangle::__runtime::Node **)v8;
  if ((v10 - 1) >= 2)
  {
    if (v10 == 5)
    {
      int v12 = *(swift::Demangle::__runtime::Node **)v8;
      unsigned int v11 = *(swift::Demangle::__runtime::Node ***)v8;
      goto LABEL_23;
    }

    unsigned int v11 = 0LL;
  }

  if (v10 == 1)
  {
    unsigned int v13 = (swift::Demangle::__runtime::Node **)((char *)v8 + 8);
    if (v11 == v13) {
      goto LABEL_33;
    }
    goto LABEL_30;
  }

  if (v10 == 2)
  {
    unsigned int v13 = (swift::Demangle::__runtime::Node **)((char *)v8 + 16);
    if (v11 == v13) {
      goto LABEL_33;
    }
    goto LABEL_30;
  }

  if (v10 != 5)
  {
    unsigned int v13 = 0LL;
    if (v11) {
      goto LABEL_30;
    }
LABEL_33:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Hp", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

  int v12 = *(swift::Demangle::__runtime::Node **)v8;
LABEL_23:
  unsigned int v13 = (swift::Demangle::__runtime::Node **)((char *)v12 + 8 * *((unsigned int *)v8 + 2));
  if (v11 == v13) {
    goto LABEL_33;
  }
LABEL_30:
  unsigned int v14 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    if (++v11 == v13) {
      goto LABEL_33;
    }
  }

uint64_t *anonymous namespace'::Remangler::mangleProtocolConformanceRefInOtherModule@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  int v7 = *((unsigned __int8 *)a2 + 18);
  uint64_t v8 = a2;
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    uint64_t v8 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_5:
    int v9 = *(uint64_t **)v8;
    goto LABEL_7;
  }

  int v9 = 0LL;
LABEL_7:
  unsigned int v10 = a3 + 1;
  if (*((_WORD *)v9 + 8) != 232) {
    goto LABEL_14;
  }
  int v11 = *((unsigned __int8 *)v9 + 18);
  if (v11 == 5 && *((_DWORD *)v9 + 2))
  {
    int v9 = (uint64_t *)*v9;
LABEL_12:
    int v9 = (uint64_t *)*v9;
    goto LABEL_14;
  }

  int v9 = 0LL;
LABEL_14:
  if ((result & 1) == 0)
  {
    int v13 = *((unsigned __int8 *)v9 + 18);
    unsigned int v14 = (swift::Demangle::__runtime::Node **)v9;
    if ((v13 - 1) >= 2)
    {
      if (v13 == 5)
      {
        unsigned int v15 = (uint64_t *)*v9;
        unsigned int v14 = (swift::Demangle::__runtime::Node **)*v9;
LABEL_23:
        unint64_t v16 = (swift::Demangle::__runtime::Node **)&v15[*((unsigned int *)v9 + 2)];
        goto LABEL_29;
      }

      unsigned int v14 = 0LL;
    }

    switch(v13)
    {
      case 1:
        unint64_t v16 = (swift::Demangle::__runtime::Node **)(v9 + 1);
        goto LABEL_29;
      case 2:
        unint64_t v16 = (swift::Demangle::__runtime::Node **)(v9 + 2);
        goto LABEL_29;
      case 5:
        unsigned int v15 = (uint64_t *)*v9;
        goto LABEL_23;
    }

    unint64_t v16 = 0LL;
LABEL_29:
    while (v14 != v16)
    {
      if (*(_DWORD *)a4) {
        return result;
      }
      ++v14;
    }
  }

  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0LL;
  *(_DWORD *)(a4 + 16) = 0;
  int v17 = *((unsigned __int8 *)v4 + 18);
  if (v17 == 2) {
  if (v17 == 5 && *((_DWORD *)v4 + 2) >= 2u)
  }
  {
    int v4 = *(swift::Demangle::__runtime::Node **)v4;
  }

  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0LL;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleProtocolDescriptor@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7 = *((unsigned __int8 *)a2 + 18);
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    uint64_t v8 = *a2;
    goto LABEL_7;
  }

  uint64_t v8 = 0LL;
LABEL_7:
  if (*((_WORD *)v8 + 8) != 232) {
    goto LABEL_14;
  }
  int v9 = *((unsigned __int8 *)v8 + 18);
  if (v9 == 5 && *((_DWORD *)v8 + 2))
  {
    uint64_t v8 = *(swift::Demangle::__runtime::Node **)v8;
LABEL_12:
    uint64_t v8 = *(swift::Demangle::__runtime::Node **)v8;
    goto LABEL_14;
  }

  uint64_t v8 = 0LL;
LABEL_14:
    goto LABEL_33;
  int v10 = *((unsigned __int8 *)v8 + 18);
  int v11 = (swift::Demangle::__runtime::Node **)v8;
  if ((v10 - 1) >= 2)
  {
    if (v10 == 5)
    {
      int v12 = *(swift::Demangle::__runtime::Node **)v8;
      int v11 = *(swift::Demangle::__runtime::Node ***)v8;
      goto LABEL_23;
    }

    int v11 = 0LL;
  }

  if (v10 == 1)
  {
    int v13 = (swift::Demangle::__runtime::Node **)((char *)v8 + 8);
    if (v11 == v13) {
      goto LABEL_33;
    }
    goto LABEL_30;
  }

  if (v10 == 2)
  {
    int v13 = (swift::Demangle::__runtime::Node **)((char *)v8 + 16);
    if (v11 == v13) {
      goto LABEL_33;
    }
    goto LABEL_30;
  }

  if (v10 != 5)
  {
    int v13 = 0LL;
    if (v11) {
      goto LABEL_30;
    }
LABEL_33:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Mp", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

  int v12 = *(swift::Demangle::__runtime::Node **)v8;
LABEL_23:
  int v13 = (swift::Demangle::__runtime::Node **)((char *)v12 + 8 * *((unsigned int *)v8 + 2));
  if (v11 == v13) {
    goto LABEL_33;
  }
LABEL_30:
  unsigned int v14 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    if (++v11 == v13) {
      goto LABEL_33;
    }
  }

uint64_t *anonymous namespace'::Remangler::mangleProtocolDescriptorRecord@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7 = *((unsigned __int8 *)a2 + 18);
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    uint64_t v8 = *a2;
    goto LABEL_7;
  }

  uint64_t v8 = 0LL;
LABEL_7:
  if (*((_WORD *)v8 + 8) != 232) {
    goto LABEL_14;
  }
  int v9 = *((unsigned __int8 *)v8 + 18);
  if (v9 == 5 && *((_DWORD *)v8 + 2))
  {
    uint64_t v8 = *(swift::Demangle::__runtime::Node **)v8;
LABEL_12:
    uint64_t v8 = *(swift::Demangle::__runtime::Node **)v8;
    goto LABEL_14;
  }

  uint64_t v8 = 0LL;
LABEL_14:
    goto LABEL_33;
  int v10 = *((unsigned __int8 *)v8 + 18);
  int v11 = (swift::Demangle::__runtime::Node **)v8;
  if ((v10 - 1) >= 2)
  {
    if (v10 == 5)
    {
      int v12 = *(swift::Demangle::__runtime::Node **)v8;
      int v11 = *(swift::Demangle::__runtime::Node ***)v8;
      goto LABEL_23;
    }

    int v11 = 0LL;
  }

  if (v10 == 1)
  {
    int v13 = (swift::Demangle::__runtime::Node **)((char *)v8 + 8);
    if (v11 == v13) {
      goto LABEL_33;
    }
    goto LABEL_30;
  }

  if (v10 == 2)
  {
    int v13 = (swift::Demangle::__runtime::Node **)((char *)v8 + 16);
    if (v11 == v13) {
      goto LABEL_33;
    }
    goto LABEL_30;
  }

  if (v10 != 5)
  {
    int v13 = 0LL;
    if (v11) {
      goto LABEL_30;
    }
LABEL_33:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Hr", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

  int v12 = *(swift::Demangle::__runtime::Node **)v8;
LABEL_23:
  int v13 = (swift::Demangle::__runtime::Node **)((char *)v12 + 8 * *((unsigned int *)v8 + 2));
  if (v11 == v13) {
    goto LABEL_33;
  }
LABEL_30:
  unsigned int v14 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    if (++v11 == v13) {
      goto LABEL_33;
    }
  }

void *anonymous namespace'::Remangler::mangleProtocolConformanceDescriptor@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    int v7 = *a2;
    goto LABEL_7;
  }

  int v7 = 0LL;
LABEL_7:
  if (!*(_DWORD *)a4)
  {
    uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Mc", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
  }

  return result;
}

void *anonymous namespace'::Remangler::mangleProtocolConformanceDescriptorRecord@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    int v7 = *a2;
    goto LABEL_7;
  }

  int v7 = 0LL;
LABEL_7:
  if (!*(_DWORD *)a4)
  {
    uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Hc", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
  }

  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleProtocolListWithClass@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  int v5 = *((unsigned __int8 *)a2 + 18);
  int v6 = (swift::Demangle::__runtime::Node ***)a2;
  if ((v5 - 1) < 2)
  {
LABEL_5:
    int v7 = *v6;
    if (v5 == 2) {
      goto LABEL_11;
    }
LABEL_8:
    if (v5 == 5 && *((_DWORD *)v4 + 2) >= 2u)
    {
      int v4 = *(swift::Demangle::__runtime::Node **)v4;
      goto LABEL_11;
    }

uint64_t *anonymous namespace'::Remangler::mangleProtocolListWithAnyObject@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      int v5 = 0LL;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  int v5 = *(swift::Demangle::__runtime::Node ***)a2;
}

uint64_t *anonymous namespace'::Remangler::mangleProtocolSelfConformanceDescriptor@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7 = *((unsigned __int8 *)a2 + 18);
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    uint64_t v8 = *a2;
    goto LABEL_7;
  }

  uint64_t v8 = 0LL;
LABEL_7:
  if (*((_WORD *)v8 + 8) != 232) {
    goto LABEL_14;
  }
  int v9 = *((unsigned __int8 *)v8 + 18);
  if (v9 == 5 && *((_DWORD *)v8 + 2))
  {
    uint64_t v8 = *(swift::Demangle::__runtime::Node **)v8;
LABEL_12:
    uint64_t v8 = *(swift::Demangle::__runtime::Node **)v8;
    goto LABEL_14;
  }

  uint64_t v8 = 0LL;
LABEL_14:
    goto LABEL_33;
  int v10 = *((unsigned __int8 *)v8 + 18);
  int v11 = (swift::Demangle::__runtime::Node **)v8;
  if ((v10 - 1) >= 2)
  {
    if (v10 == 5)
    {
      int v12 = *(swift::Demangle::__runtime::Node **)v8;
      int v11 = *(swift::Demangle::__runtime::Node ***)v8;
      goto LABEL_23;
    }

    int v11 = 0LL;
  }

  if (v10 == 1)
  {
    int v13 = (swift::Demangle::__runtime::Node **)((char *)v8 + 8);
    if (v11 == v13) {
      goto LABEL_33;
    }
    goto LABEL_30;
  }

  if (v10 == 2)
  {
    int v13 = (swift::Demangle::__runtime::Node **)((char *)v8 + 16);
    if (v11 == v13) {
      goto LABEL_33;
    }
    goto LABEL_30;
  }

  if (v10 != 5)
  {
    int v13 = 0LL;
    if (v11) {
      goto LABEL_30;
    }
LABEL_33:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "MS", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

  int v12 = *(swift::Demangle::__runtime::Node **)v8;
LABEL_23:
  int v13 = (swift::Demangle::__runtime::Node **)((char *)v12 + 8 * *((unsigned int *)v8 + 2));
  if (v11 == v13) {
    goto LABEL_33;
  }
LABEL_30:
  unsigned int v14 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    if (++v11 == v13) {
      goto LABEL_33;
    }
  }

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleProtocolSelfConformanceWitness@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append( (char **)v4 + 1591,  "TS",  2uLL,  *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0LL;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleProtocolSelfConformanceWitnessTable@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7 = *((unsigned __int8 *)a2 + 18);
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    int v8 = *a2;
    goto LABEL_7;
  }

  int v8 = 0LL;
LABEL_7:
  if (*((_WORD *)v8 + 8) != 232) {
    goto LABEL_14;
  }
  int v9 = *((unsigned __int8 *)v8 + 18);
  if (v9 == 5 && *((_DWORD *)v8 + 2))
  {
    int v8 = *(swift::Demangle::__runtime::Node **)v8;
LABEL_12:
    int v8 = *(swift::Demangle::__runtime::Node **)v8;
    goto LABEL_14;
  }

  int v8 = 0LL;
LABEL_14:
    goto LABEL_33;
  int v10 = *((unsigned __int8 *)v8 + 18);
  int v11 = (swift::Demangle::__runtime::Node **)v8;
  if ((v10 - 1) >= 2)
  {
    if (v10 == 5)
    {
      int v12 = *(swift::Demangle::__runtime::Node **)v8;
      int v11 = *(swift::Demangle::__runtime::Node ***)v8;
      goto LABEL_23;
    }

    int v11 = 0LL;
  }

  if (v10 == 1)
  {
    int v13 = (swift::Demangle::__runtime::Node **)((char *)v8 + 8);
    if (v11 == v13) {
      goto LABEL_33;
    }
    goto LABEL_30;
  }

  if (v10 == 2)
  {
    int v13 = (swift::Demangle::__runtime::Node **)((char *)v8 + 16);
    if (v11 == v13) {
      goto LABEL_33;
    }
    goto LABEL_30;
  }

  if (v10 != 5)
  {
    int v13 = 0LL;
    if (v11) {
      goto LABEL_30;
    }
LABEL_33:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "WS", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

  int v12 = *(swift::Demangle::__runtime::Node **)v8;
LABEL_23:
  int v13 = (swift::Demangle::__runtime::Node **)((char *)v12 + 8 * *((unsigned int *)v8 + 2));
  if (v11 == v13) {
    goto LABEL_33;
  }
LABEL_30:
  unsigned int v14 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    if (++v11 == v13) {
      goto LABEL_33;
    }
  }

uint64_t *anonymous namespace'::Remangler::mangleProtocolWitness@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }

    int v7 = 0LL;
  }

  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8LL * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }

  int v9 = 0LL;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "TW", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleProtocolWitnessTable@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append( (char **)v4 + 1591,  "WP",  2uLL,  *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0LL;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleProtocolWitnessTableAccessor@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append( (char **)v4 + 1591,  "Wa",  2uLL,  *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0LL;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleProtocolWitnessTablePattern@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append( (char **)v4 + 1591,  "Wp",  2uLL,  *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0LL;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleReabstractionThunk@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *((unsigned __int8 *)a2 + 18);
  switch((_DWORD)v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      uint64_t v7 = *((unsigned int *)a2 + 2);
      if ((_DWORD)v7) {
        goto LABEL_6;
      }
      break;
    case 2:
      uint64_t v7 = 2LL;
LABEL_6:
      unsigned int v8 = a3 + 1;
      for (uint64_t i = v7 - 1; i != -1; --i)
      {
        unint64_t v10 = *((unsigned __int8 *)a2 + 18);
        unsigned int v11 = v10 - 1;
        if ((_DWORD)v10 != 1)
        {
          if ((_DWORD)v10 == 5)
          {
            unint64_t v10 = *((unsigned int *)a2 + 2);
          }

          else
          {
            if ((_DWORD)v10 != 2) {
              goto LABEL_7;
            }
            unint64_t v10 = 2LL;
          }
        }

        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(void *)(a4 + 8) = 0LL;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }

        int v12 = a2;
        if (v11 >= 2) {
          int v12 = *(swift::Demangle::__runtime::Node **)a2;
        }
        if (*(_DWORD *)a4) {
          return result;
        }
      }

      break;
  }

  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0LL;
  *(_DWORD *)(a4 + 16) = 0;
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Tr", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0LL;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleReabstractionThunkHelper@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *((unsigned __int8 *)a2 + 18);
  switch((_DWORD)v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      uint64_t v7 = *((unsigned int *)a2 + 2);
      if ((_DWORD)v7) {
        goto LABEL_6;
      }
      break;
    case 2:
      uint64_t v7 = 2LL;
LABEL_6:
      unsigned int v8 = a3 + 1;
      for (uint64_t i = v7 - 1; i != -1; --i)
      {
        unint64_t v10 = *((unsigned __int8 *)a2 + 18);
        unsigned int v11 = v10 - 1;
        if ((_DWORD)v10 != 1)
        {
          if ((_DWORD)v10 == 5)
          {
            unint64_t v10 = *((unsigned int *)a2 + 2);
          }

          else
          {
            if ((_DWORD)v10 != 2) {
              goto LABEL_7;
            }
            unint64_t v10 = 2LL;
          }
        }

        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(void *)(a4 + 8) = 0LL;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }

        int v12 = a2;
        if (v11 >= 2) {
          int v12 = *(swift::Demangle::__runtime::Node **)a2;
        }
        if (*(_DWORD *)a4) {
          return result;
        }
      }

      break;
  }

  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0LL;
  *(_DWORD *)(a4 + 16) = 0;
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "TR", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0LL;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleReabstractionThunkHelperWithSelf@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *((unsigned __int8 *)a2 + 18);
  switch((_DWORD)v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      uint64_t v7 = *((unsigned int *)a2 + 2);
      if ((_DWORD)v7) {
        goto LABEL_6;
      }
      break;
    case 2:
      uint64_t v7 = 2LL;
LABEL_6:
      unsigned int v8 = a3 + 1;
      for (uint64_t i = v7 - 1; i != -1; --i)
      {
        unint64_t v10 = *((unsigned __int8 *)a2 + 18);
        unsigned int v11 = v10 - 1;
        if ((_DWORD)v10 != 1)
        {
          if ((_DWORD)v10 == 5)
          {
            unint64_t v10 = *((unsigned int *)a2 + 2);
          }

          else
          {
            if ((_DWORD)v10 != 2) {
              goto LABEL_7;
            }
            unint64_t v10 = 2LL;
          }
        }

        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(void *)(a4 + 8) = 0LL;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }

        int v12 = a2;
        if (v11 >= 2) {
          int v12 = *(swift::Demangle::__runtime::Node **)a2;
        }
        if (*(_DWORD *)a4) {
          return result;
        }
      }

      break;
  }

  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0LL;
  *(_DWORD *)(a4 + 16) = 0;
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Ty", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0LL;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleReabstractionThunkHelperWithGlobalActor@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  uint64_t v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      uint64_t v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }

    uint64_t v7 = 0LL;
  }

  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8LL * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }

  int v9 = 0LL;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "TU", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

uint64_t *anonymous namespace'::Remangler::mangleReadAccessor@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v5 = 0LL;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  uint64_t v5 = *(void *)a2;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleRelatedEntityDeclName@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  uint64_t v5 = this;
  int v7 = *((unsigned __int8 *)a2 + 18);
  uint64_t v8 = a2;
  if (v7 != 2)
  {
    if (v7 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0LL;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }

    uint64_t v8 = *(swift::Demangle::__runtime::Node **)a2;
  }

  if (*(_DWORD *)a4) {
    return this;
  }
  int v7 = *((unsigned __int8 *)v4 + 18);
LABEL_8:
  if ((v7 - 1) >= 2)
  {
    if (v7 != 5 || !*((_DWORD *)v4 + 2))
    {
      int v9 = 0LL;
      goto LABEL_14;
    }

    int v4 = *(swift::Demangle::__runtime::Node **)v4;
  }

  int v9 = *(swift::Demangle::__runtime::Node **)v4;
LABEL_14:
  if (*((void *)v9 + 1) == 1LL)
  {
    swift::Demangle::__runtime::CharVector::append((char **)v5 + 1591, "L", 1uLL, *((void **)v5 + 1593));
    this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append( (char **)v5 + 1591,  *(const void **)v9,  *((void *)v9 + 1),  *((void **)v5 + 1593));
    int v10 = 0;
    int v9 = 0LL;
    int v11 = 0;
  }

  else
  {
    int v11 = 3024;
    int v10 = 21;
  }

  *(_DWORD *)a4 = v10;
  *(void *)(a4 + 8) = v9;
  *(_DWORD *)(a4 + 16) = v11;
  return this;
}

void *anonymous namespace'::Remangler::mangleRetroactiveConformance@<X0>( const void **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = (uint64_t *)a2;
  int v7 = *((unsigned __int8 *)a2 + 18);
  uint64_t v8 = a2;
  if (v7 == 2) {
    goto LABEL_5;
  }
  if (v7 == 5 && *((_DWORD *)a2 + 2) >= 2u)
  {
    uint64_t v8 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_5:
    int v9 = (swift::Demangle::__runtime::Node *)*((void *)v8 + 1);
    goto LABEL_7;
  }

  int v9 = 0LL;
LABEL_7:
  if (*(_DWORD *)a4) {
    return result;
  }
  unsigned int v11 = *((_DWORD *)this + 3184);
  size_t v12 = *((unsigned int *)this + 3185);
  int v13 = (char *)this[1591];
  if (v11 >= v12)
  {
    unsigned int v14 = this[1593];
    unsigned int v15 = (char *)v14[1];
    if (&v13[v12] == v15)
    {
      unint64_t v17 = (unint64_t)&v13[v12 + 1];
      unint64_t v16 = v14[2];
      if (v17 <= v16)
      {
        v14[1] = v17;
        LODWORD(v18) = 1;
LABEL_24:
        *((_DWORD *)this + 3185) = v12 + v18;
        goto LABEL_25;
      }
    }

    else
    {
      unint64_t v16 = v14[2];
    }

    else {
      uint64_t v18 = (2 * v12);
    }
    size_t v19 = v18 + v12;
    if (!v15 || (unint64_t)&v15[v19] > v16)
    {
      unint64_t v20 = 2LL * v14[4];
      if (v20 <= v19 + 1) {
        unint64_t v20 = v19 + 1;
      }
      uint64_t v14[4] = v20;
      unint64_t v21 = v20 + 8;
      unint64_t v22 = malloc(v20 + 8);
      unsigned int v23 = (char *)v22 + v21;
      *unint64_t v22 = v14[3];
      unsigned int v15 = (char *)(v22 + 1);
      v14[2] = v23;
      void v14[3] = v22;
    }

    v14[1] = &v15[v19];
    if ((_DWORD)v12)
    {
      memcpy(v15, this[1591], v12);
      LODWORD(v12) = *((_DWORD *)this + 3185);
      unsigned int v11 = *((_DWORD *)this + 3184);
    }

    this[1591] = v15;
    int v13 = v15;
    goto LABEL_24;
  }

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleShared@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 == 1)
  {
LABEL_5:
    if (*(_DWORD *)a4) {
      return this;
    }
    unsigned int v7 = *((_DWORD *)v4 + 3184);
    size_t v8 = *((unsigned int *)v4 + 3185);
    int v9 = (_BYTE *)*((void *)v4 + 1591);
    int v10 = (void *)*((void *)v4 + 1593);
    unsigned int v11 = (_BYTE *)v10[1];
    if (&v9[v8] == v11)
    {
      unint64_t v15 = (unint64_t)&v9[v8 + 1];
      unint64_t v12 = v10[2];
      if (v15 <= v12)
      {
        v10[1] = v15;
        LODWORD(v16) = 1;
LABEL_26:
        *((_DWORD *)v4 + 3185) = v8 + v16;
LABEL_27:
        int v14 = 0;
        a2 = 0LL;
        int v13 = 0;
        *((_DWORD *)v4 + 3184) = v7 + 1;
        v9[v7] = 104;
        goto LABEL_28;
      }
    }

    else
    {
      unint64_t v12 = v10[2];
    }

    else {
      uint64_t v16 = (2 * v8);
    }
    size_t v17 = v16 + v8;
    if (v11) {
      BOOL v18 = (unint64_t)&v11[v16 + v8] > v12;
    }
    else {
      BOOL v18 = 1;
    }
    int v9 = (_BYTE *)v10[1];
    if (v18)
    {
      unint64_t v19 = 2LL * v10[4];
      if (v19 <= v17 + 1) {
        unint64_t v19 = v17 + 1;
      }
      _OWORD v10[4] = v19;
      unint64_t v20 = v19 + 8;
      this = (_anonymous_namespace_::Remangler *)malloc(v19 + 8);
      unint64_t v21 = (char *)this + v20;
      *(void *)this = v10[3];
      int v9 = (char *)this + 8;
      void v10[2] = v21;
      void v10[3] = this;
    }

    v10[1] = &v9[v17];
    if ((_DWORD)v8)
    {
      this = (_anonymous_namespace_::Remangler *)memcpy(v9, *((const void **)v4 + 1591), v8);
      LODWORD(v8) = *((_DWORD *)v4 + 3185);
      unsigned int v7 = *((_DWORD *)v4 + 3184);
    }

    *((void *)v4 + 1591) = v9;
    goto LABEL_26;
  }

  if (v6 == 5 && *((_DWORD *)a2 + 2) == 1)
  {
    a2 = *(swift::Demangle::__runtime::Node **)a2;
    goto LABEL_5;
  }

  int v13 = 321;
  int v14 = 10;
LABEL_28:
  *(_DWORD *)a4 = v14;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v13;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleOwned@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 == 1)
  {
LABEL_5:
    if (*(_DWORD *)a4) {
      return this;
    }
    unsigned int v7 = *((_DWORD *)v4 + 3184);
    size_t v8 = *((unsigned int *)v4 + 3185);
    int v9 = (_BYTE *)*((void *)v4 + 1591);
    int v10 = (void *)*((void *)v4 + 1593);
    unsigned int v11 = (_BYTE *)v10[1];
    if (&v9[v8] == v11)
    {
      unint64_t v15 = (unint64_t)&v9[v8 + 1];
      unint64_t v12 = v10[2];
      if (v15 <= v12)
      {
        v10[1] = v15;
        LODWORD(v16) = 1;
LABEL_26:
        *((_DWORD *)v4 + 3185) = v8 + v16;
LABEL_27:
        int v14 = 0;
        a2 = 0LL;
        int v13 = 0;
        *((_DWORD *)v4 + 3184) = v7 + 1;
        v9[v7] = 110;
        goto LABEL_28;
      }
    }

    else
    {
      unint64_t v12 = v10[2];
    }

    else {
      uint64_t v16 = (2 * v8);
    }
    size_t v17 = v16 + v8;
    if (v11) {
      BOOL v18 = (unint64_t)&v11[v16 + v8] > v12;
    }
    else {
      BOOL v18 = 1;
    }
    int v9 = (_BYTE *)v10[1];
    if (v18)
    {
      unint64_t v19 = 2LL * v10[4];
      if (v19 <= v17 + 1) {
        unint64_t v19 = v17 + 1;
      }
      _OWORD v10[4] = v19;
      unint64_t v20 = v19 + 8;
      this = (_anonymous_namespace_::Remangler *)malloc(v19 + 8);
      unint64_t v21 = (char *)this + v20;
      *(void *)this = v10[3];
      int v9 = (char *)this + 8;
      void v10[2] = v21;
      void v10[3] = this;
    }

    v10[1] = &v9[v17];
    if ((_DWORD)v8)
    {
      this = (_anonymous_namespace_::Remangler *)memcpy(v9, *((const void **)v4 + 1591), v8);
      LODWORD(v8) = *((_DWORD *)v4 + 3185);
      unsigned int v7 = *((_DWORD *)v4 + 3184);
    }

    *((void *)v4 + 1591) = v9;
    goto LABEL_26;
  }

  if (v6 == 5 && *((_DWORD *)a2 + 2) == 1)
  {
    a2 = *(swift::Demangle::__runtime::Node **)a2;
    goto LABEL_5;
  }

  int v13 = 321;
  int v14 = 10;
LABEL_28:
  *(_DWORD *)a4 = v14;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v13;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleSILBoxType@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append( (char **)v4 + 1591,  "Xb",  2uLL,  *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0LL;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

void **anonymous namespace'::Remangler::mangleSILBoxTypeWithLayout@<X0>( void **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = a2;
  int v6 = this;
  int v8 = *((unsigned __int8 *)a2 + 18);
  int v9 = a2;
  if (v8 != 1)
  {
    if (v8 != 5 || (*((_DWORD *)a2 + 2) | 2) != 3)
    {
      int v12 = 3591;
      goto LABEL_13;
    }

    int v9 = *(swift::Demangle::__runtime::Node **)a2;
  }

  if (*(_WORD *)(*(void *)v9 + 16LL) != 212)
  {
    int v12 = 3593;
    goto LABEL_13;
  }

  int v10 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      unsigned int v11 = 0LL;
      goto LABEL_17;
    }

    int v10 = *(swift::Demangle::__runtime::Node **)a2;
  }

  unsigned int v11 = *(uint64_t **)v10;
LABEL_17:
  this = (void **)swift::Demangle::__runtime::NodeFactory::createNode(*this, 235);
  uint64_t v16 = (swift::Demangle::__runtime::Node *)this;
  unsigned int v17 = *((unsigned __int8 *)v11 + 18);
  if (v17 != 1)
  {
    if (v17 == 5)
    {
      unsigned int v17 = *((_DWORD *)v11 + 2);
      if (!v17) {
        goto LABEL_60;
      }
    }

    else if (v17 != 2)
    {
LABEL_60:
      int v38 = a3 + 1;
      if (*(_DWORD *)a4) {
        return this;
      }
      if (*((_BYTE *)v5 + 18) == 5 && *((_DWORD *)v5 + 2) == 3)
      {
        uint64_t v39 = *(void *)(*(void *)v5 + 8LL);
        if (*(_WORD *)(v39 + 16) != 43)
        {
          int v12 = 3621;
          goto LABEL_13;
        }

        uint64_t v40 = *(swift::Demangle::__runtime::Node **)(*(void *)v5 + 16LL);
        if (*((_WORD *)v40 + 8) != 235)
        {
          int v12 = 3622;
          goto LABEL_13;
        }

        if (*(_DWORD *)a4) {
          return this;
        }
        if (*(_DWORD *)a4) {
          return this;
        }
        size_t v41 = "XX";
      }

      else
      {
        size_t v41 = "Xx";
      }

      this = (void **)swift::Demangle::__runtime::CharVector::append((char **)v6 + 1591, v41, 2uLL, v6[1593]);
      int v13 = 0;
      uint64_t v5 = 0LL;
      int v12 = 0;
      goto LABEL_14;
    }
  }

  unint64_t v18 = 0LL;
  uint64_t v19 = v17;
  while (1)
  {
    unint64_t v24 = *((unsigned __int8 *)v11 + 18);
    if ((v24 - 1) >= 2)
    {
      char v25 = 0;
      unint64_t v26 = (uint64_t *)*v11;
    }

    else
    {
      char v25 = 1;
      unint64_t v26 = v11;
    }

    if (*(_WORD *)(v26[v18] + 16) != 214)
    {
      unint64_t v27 = v11;
      if ((v25 & 1) == 0) {
        unint64_t v27 = (uint64_t *)*v11;
      }
      if (*(_WORD *)(v27[v18] + 16) != 213) {
        break;
      }
    }

    if ((_DWORD)v24 == 1) {
      goto LABEL_39;
    }
    if ((_DWORD)v24 != 5)
    {
      if ((_DWORD)v24 != 2) {
        goto LABEL_44;
      }
      unint64_t v24 = 2LL;
LABEL_39:
      if (v24 <= v18) {
        goto LABEL_44;
      }
      goto LABEL_40;
    }

    if (*((unsigned int *)v11 + 2) <= v18)
    {
LABEL_44:
      unint64_t v29 = 0LL;
      goto LABEL_45;
    }

uint64_t *anonymous namespace'::Remangler::mangleSetter@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v5 = 0LL;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  uint64_t v5 = *(void *)a2;
}

unsigned int *anonymous namespace'::Remangler::mangleIsSerialized@<X0>( unsigned int *this@<X0>, uint64_t a2@<X8>)
{
  int v3 = this;
  unsigned int v5 = this[3184];
  size_t v6 = this[3185];
  int v7 = (char *)*((void *)this + 1591);
  if (v5 >= v6)
  {
    int v8 = (void *)*((void *)this + 1593);
    int v9 = (char *)v8[1];
    if (&v7[v6] == v9)
    {
      unint64_t v11 = (unint64_t)&v7[v6 + 1];
      unint64_t v10 = v8[2];
      if (v11 <= v10)
      {
        v8[1] = v11;
        LODWORD(v12) = 1;
LABEL_20:
        v3[3185] = v6 + v12;
        goto LABEL_21;
      }
    }

    else
    {
      unint64_t v10 = v8[2];
    }

    else {
      uint64_t v12 = (2 * v6);
    }
    size_t v13 = v12 + v6;
    if (v9) {
      BOOL v14 = (unint64_t)&v9[v12 + v6] > v10;
    }
    else {
      BOOL v14 = 1;
    }
    int v7 = (char *)v8[1];
    if (v14)
    {
      unint64_t v15 = 2LL * v8[4];
      if (v15 <= v13 + 1) {
        unint64_t v15 = v13 + 1;
      }
      v8[4] = v15;
      unint64_t v16 = v15 + 8;
      this = (unsigned int *)malloc(v15 + 8);
      unsigned int v17 = (char *)this + v16;
      *(void *)this = v8[3];
      int v7 = (char *)(this + 2);
      void v8[2] = v17;
      void v8[3] = this;
    }

    v8[1] = &v7[v13];
    if ((_DWORD)v6)
    {
      this = (unsigned int *)memcpy(v7, *((const void **)v3 + 1591), v6);
      LODWORD(v6) = v3[3185];
      unsigned int v5 = v3[3184];
    }

    *((void *)v3 + 1591) = v7;
    goto LABEL_20;
  }

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleStatic@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 == 1)
  {
LABEL_5:
    if (*(_DWORD *)a4) {
      return this;
    }
    unsigned int v7 = *((_DWORD *)v4 + 3184);
    size_t v8 = *((unsigned int *)v4 + 3185);
    int v9 = (_BYTE *)*((void *)v4 + 1591);
    unint64_t v10 = (void *)*((void *)v4 + 1593);
    unint64_t v11 = (_BYTE *)v10[1];
    if (&v9[v8] == v11)
    {
      unint64_t v15 = (unint64_t)&v9[v8 + 1];
      unint64_t v12 = v10[2];
      if (v15 <= v12)
      {
        v10[1] = v15;
        LODWORD(v16) = 1;
LABEL_26:
        *((_DWORD *)v4 + 3185) = v8 + v16;
LABEL_27:
        int v14 = 0;
        a2 = 0LL;
        int v13 = 0;
        *((_DWORD *)v4 + 3184) = v7 + 1;
        v9[v7] = 90;
        goto LABEL_28;
      }
    }

    else
    {
      unint64_t v12 = v10[2];
    }

    else {
      uint64_t v16 = (2 * v8);
    }
    size_t v17 = v16 + v8;
    if (v11) {
      BOOL v18 = (unint64_t)&v11[v16 + v8] > v12;
    }
    else {
      BOOL v18 = 1;
    }
    int v9 = (_BYTE *)v10[1];
    if (v18)
    {
      unint64_t v19 = 2LL * v10[4];
      if (v19 <= v17 + 1) {
        unint64_t v19 = v17 + 1;
      }
      _OWORD v10[4] = v19;
      unint64_t v20 = v19 + 8;
      this = (_anonymous_namespace_::Remangler *)malloc(v19 + 8);
      unint64_t v21 = (char *)this + v20;
      *(void *)this = v10[3];
      int v9 = (char *)this + 8;
      void v10[2] = v21;
      void v10[3] = this;
    }

    v10[1] = &v9[v17];
    if ((_DWORD)v8)
    {
      this = (_anonymous_namespace_::Remangler *)memcpy(v9, *((const void **)v4 + 1591), v8);
      LODWORD(v8) = *((_DWORD *)v4 + 3185);
      unsigned int v7 = *((_DWORD *)v4 + 3184);
    }

    *((void *)v4 + 1591) = v9;
    goto LABEL_26;
  }

  if (v6 == 5 && *((_DWORD *)a2 + 2) == 1)
  {
    a2 = *(swift::Demangle::__runtime::Node **)a2;
    goto LABEL_5;
  }

  int v13 = 321;
  int v14 = 10;
LABEL_28:
  *(_DWORD *)a4 = v14;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v13;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleThinFunctionType@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *((unsigned __int8 *)a2 + 18);
  switch((_DWORD)v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      uint64_t v7 = *((unsigned int *)a2 + 2);
      if ((_DWORD)v7) {
        goto LABEL_6;
      }
      break;
    case 2:
      uint64_t v7 = 2LL;
LABEL_6:
      unsigned int v8 = a3 + 1;
      for (uint64_t i = v7 - 1; i != -1; --i)
      {
        unint64_t v10 = *((unsigned __int8 *)a2 + 18);
        unsigned int v11 = v10 - 1;
        if ((_DWORD)v10 != 1)
        {
          if ((_DWORD)v10 == 5)
          {
            unint64_t v10 = *((unsigned int *)a2 + 2);
          }

          else
          {
            if ((_DWORD)v10 != 2) {
              goto LABEL_7;
            }
            unint64_t v10 = 2LL;
          }
        }

        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(void *)(a4 + 8) = 0LL;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }

        unint64_t v12 = a2;
        if (v11 >= 2) {
          unint64_t v12 = *(swift::Demangle::__runtime::Node **)a2;
        }
        if (*(_DWORD *)a4) {
          return result;
        }
      }

      break;
  }

  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0LL;
  *(_DWORD *)(a4 + 16) = 0;
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Xf", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0LL;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

void *anonymous namespace'::Remangler::mangleTuple@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (!*(_DWORD *)a4)
  {
    unsigned int v7 = *((_DWORD *)this + 3184);
    size_t v8 = *((unsigned int *)this + 3185);
    int v9 = (_BYTE *)*((void *)this + 1591);
    if (v7 < v8)
    {
LABEL_22:
      *((_DWORD *)this + 3184) = v7 + 1;
      v9[v7] = 116;
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0LL;
      *(_DWORD *)(a4 + 16) = 0;
      return result;
    }

    unint64_t v10 = (void *)*((void *)this + 1593);
    unsigned int v11 = (_BYTE *)v10[1];
    if (&v9[v8] == v11)
    {
      unint64_t v13 = (unint64_t)&v9[v8 + 1];
      unint64_t v12 = v10[2];
      if (v13 <= v12)
      {
        v10[1] = v13;
        LODWORD(v14) = 1;
LABEL_21:
        *((_DWORD *)this + 3185) = v8 + v14;
        goto LABEL_22;
      }
    }

    else
    {
      unint64_t v12 = v10[2];
    }

    else {
      uint64_t v14 = (2 * v8);
    }
    size_t v15 = v14 + v8;
    if (v11) {
      BOOL v16 = (unint64_t)&v11[v14 + v8] > v12;
    }
    else {
      BOOL v16 = 1;
    }
    int v9 = (_BYTE *)v10[1];
    if (v16)
    {
      unint64_t v17 = 2LL * v10[4];
      if (v17 <= v15 + 1) {
        unint64_t v17 = v15 + 1;
      }
      _OWORD v10[4] = v17;
      unint64_t v18 = v17 + 8;
      uint64_t result = malloc(v17 + 8);
      unint64_t v19 = (char *)result + v18;
      *uint64_t result = v10[3];
      int v9 = result + 1;
      void v10[2] = v19;
      void v10[3] = result;
    }

    v10[1] = &v9[v15];
    if ((_DWORD)v8)
    {
      uint64_t result = memcpy(v9, *((const void **)this + 1591), v8);
      LODWORD(v8) = *((_DWORD *)this + 3185);
      unsigned int v7 = *((_DWORD *)this + 3184);
    }

    *((void *)this + 1591) = v9;
    goto LABEL_21;
  }

  return result;
}

void *anonymous namespace'::Remangler::manglePack@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (!*(_DWORD *)a4)
  {
    uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "QP", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
  }

  return result;
}

void *anonymous namespace'::Remangler::mangleSILPackDirect@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (!*(_DWORD *)a4)
  {
    uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "QSd", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
  }

  return result;
}

void *anonymous namespace'::Remangler::mangleSILPackIndirect@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (!*(_DWORD *)a4)
  {
    uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "QSi", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
  }

  return result;
}

uint64_t *anonymous namespace'::Remangler::manglePackExpansion@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  unsigned int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      unsigned int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }

    unsigned int v7 = 0LL;
  }

  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8LL * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }

  int v9 = 0LL;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Qp", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

uint64_t *anonymous namespace'::Remangler::manglePackElement@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  int v9 = (swift::Demangle::__runtime::Node **)a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0LL;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }

    int v9 = *(swift::Demangle::__runtime::Node ***)a2;
  }

  if (*(_DWORD *)a4) {
    return result;
  }
LABEL_8:
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Qe", 2uLL, this[1593]);
  int v11 = *((unsigned __int8 *)v4 + 18);
  if (v11 == 2) {
    goto LABEL_12;
  }
  if (v11 == 5 && *((_DWORD *)v4 + 2) >= 2u)
  {
    int v4 = *(swift::Demangle::__runtime::Node **)v4;
LABEL_12:
    if (*(_DWORD *)a4) {
      return result;
    }
  }

  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0LL;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

void *anonymous namespace'::Remangler::mangleTypeList@<X0>( void *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = (uint64_t)this;
  BOOL v25 = 1;
  uint64_t v7 = *((unsigned __int8 *)a2 + 18);
  if ((_DWORD)v7 != 1)
  {
    if ((_DWORD)v7 == 5)
    {
      uint64_t v7 = *((unsigned int *)a2 + 2);
      if (!(_DWORD)v7) {
        goto LABEL_21;
      }
    }

    else
    {
      if ((_DWORD)v7 != 2) {
        goto LABEL_21;
      }
      uint64_t v7 = 2LL;
    }
  }

  unint64_t v8 = 0LL;
  unsigned int v9 = a3 + 1;
  do
  {
    unint64_t v10 = *((unsigned __int8 *)a2 + 18);
    unsigned int v11 = v10 - 1;
    if ((_DWORD)v10 == 1) {
      goto LABEL_13;
    }
    if ((_DWORD)v10 != 5)
    {
      if ((_DWORD)v10 != 2) {
        goto LABEL_7;
      }
      unint64_t v10 = 2LL;
LABEL_13:
      if (v10 <= v8) {
        goto LABEL_7;
      }
      goto LABEL_16;
    }

    if (*((unsigned int *)a2 + 2) <= v8)
    {
LABEL_7:
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0LL;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }

{
  uint64_t v4;
  int v6;
  swift::Demangle::__runtime::Node *v7;
  uint64_t v8;
  swift::Demangle::__runtime::Node *v9;
  unsigned int v10;
  unsigned int v11;
  size_t v12;
  _BYTE *v13;
  void *v14;
  _BYTE *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  size_t v19;
  BOOL v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  int v4 = (uint64_t)this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  uint64_t v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      unint64_t v8 = *(void *)a2;
      uint64_t v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }

    uint64_t v7 = 0LL;
  }

  if (v6 == 1)
  {
    unsigned int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
    goto LABEL_19;
  }

  if (v6 == 2)
  {
    unsigned int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    unsigned int v11 = *(_DWORD *)(v4 + 12736);
    unint64_t v12 = *(unsigned int *)(v4 + 12740);
    unsigned int v13 = *(_BYTE **)(v4 + 12728);
    if (v11 < v12)
    {
LABEL_39:
      *(_DWORD *)(v4 + 12736) = v11 + 1;
      v13[v11] = 95;
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0LL;
      *(_DWORD *)(a4 + 16) = 0;
      return this;
    }

    size_t v14 = *(void **)(v4 + 12744);
    size_t v15 = (_BYTE *)v14[1];
    if (&v13[v12] == v15)
    {
      unint64_t v17 = (unint64_t)&v13[v12 + 1];
      BOOL v16 = v14[2];
      if (v17 <= v16)
      {
        v14[1] = v17;
        LODWORD(v18) = 1;
LABEL_38:
        *(_DWORD *)(v4 + 12740) = v12 + v18;
        goto LABEL_39;
      }
    }

    else
    {
      BOOL v16 = v14[2];
    }

    else {
      unint64_t v18 = (2 * v12);
    }
    unint64_t v19 = v18 + v12;
    if (v15) {
      uint64_t v20 = (unint64_t)&v15[v18 + v12] > v16;
    }
    else {
      uint64_t v20 = 1;
    }
    unsigned int v13 = (_BYTE *)v14[1];
    if (v20)
    {
      size_t v21 = 2LL * v14[4];
      if (v21 <= v19 + 1) {
        size_t v21 = v19 + 1;
      }
      uint64_t v14[4] = v21;
      unint64_t v22 = v21 + 8;
      this = malloc(v21 + 8);
      unint64_t v23 = (char *)this + v22;
      *this = v14[3];
      unsigned int v13 = this + 1;
      v14[2] = v23;
      void v14[3] = this;
    }

    v14[1] = &v13[v19];
    if ((_DWORD)v12)
    {
      this = memcpy(v13, *(const void **)(v4 + 12728), v12);
      LODWORD(v12) = *(_DWORD *)(v4 + 12740);
      unsigned int v11 = *(_DWORD *)(v4 + 12736);
    }

    *(void *)(v4 + 12728) = v13;
    goto LABEL_38;
  }

  if (v6 != 5)
  {
    unsigned int v9 = 0LL;
    if (!v7) {
      goto LABEL_19;
    }
    goto LABEL_16;
  }

  unint64_t v8 = *(void *)a2;
LABEL_9:
  unsigned int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8LL * *((unsigned int *)a2 + 2));
  if (v7 == v9) {
    goto LABEL_19;
  }
LABEL_16:
  unint64_t v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return this;
    }
    uint64_t v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }

uint64_t *anonymous namespace'::Remangler::mangleTypeMangling@<X0>( uint64_t *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = (uint64_t)this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  uint64_t v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      uint64_t v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }

    uint64_t v7 = 0LL;
  }

  if (v6 == 1)
  {
    unsigned int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
    goto LABEL_19;
  }

  if (v6 == 2)
  {
    unsigned int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    unsigned int v11 = *(_DWORD *)(v4 + 12736);
    size_t v12 = *(unsigned int *)(v4 + 12740);
    unsigned int v13 = *(_BYTE **)(v4 + 12728);
    if (v11 < v12)
    {
LABEL_39:
      *(_DWORD *)(v4 + 12736) = v11 + 1;
      v13[v11] = 68;
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0LL;
      *(_DWORD *)(a4 + 16) = 0;
      return this;
    }

    size_t v14 = *(void **)(v4 + 12744);
    size_t v15 = (_BYTE *)v14[1];
    if (&v13[v12] == v15)
    {
      unint64_t v17 = (unint64_t)&v13[v12 + 1];
      unint64_t v16 = v14[2];
      if (v17 <= v16)
      {
        v14[1] = v17;
        LODWORD(v18) = 1;
LABEL_38:
        *(_DWORD *)(v4 + 12740) = v12 + v18;
        goto LABEL_39;
      }
    }

    else
    {
      unint64_t v16 = v14[2];
    }

    else {
      uint64_t v18 = (2 * v12);
    }
    size_t v19 = v18 + v12;
    if (v15) {
      BOOL v20 = (unint64_t)&v15[v18 + v12] > v16;
    }
    else {
      BOOL v20 = 1;
    }
    unsigned int v13 = (_BYTE *)v14[1];
    if (v20)
    {
      unint64_t v21 = 2LL * v14[4];
      if (v21 <= v19 + 1) {
        unint64_t v21 = v19 + 1;
      }
      uint64_t v14[4] = v21;
      unint64_t v22 = v21 + 8;
      this = (uint64_t *)malloc(v21 + 8);
      unint64_t v23 = (char *)this + v22;
      *this = v14[3];
      unsigned int v13 = this + 1;
      v14[2] = v23;
      void v14[3] = this;
    }

    v14[1] = &v13[v19];
    if ((_DWORD)v12)
    {
      this = (uint64_t *)memcpy(v13, *(const void **)(v4 + 12728), v12);
      LODWORD(v12) = *(_DWORD *)(v4 + 12740);
      unsigned int v11 = *(_DWORD *)(v4 + 12736);
    }

    *(void *)(v4 + 12728) = v13;
    goto LABEL_38;
  }

  if (v6 != 5)
  {
    unsigned int v9 = 0LL;
    if (!v7) {
      goto LABEL_19;
    }
    goto LABEL_16;
  }

  uint64_t v8 = *(void *)a2;
LABEL_9:
  unsigned int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8LL * *((unsigned int *)a2 + 2));
  if (v7 == v9) {
    goto LABEL_19;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return this;
    }
    uint64_t v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleTypeMetadata@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append( (char **)v4 + 1591,  "N",  1uLL,  *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0LL;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleTypeMetadataAccessFunction@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append( (char **)v4 + 1591,  "Ma",  2uLL,  *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0LL;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleTypeMetadataCompletionFunction@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append( (char **)v4 + 1591,  "Mr",  2uLL,  *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0LL;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleTypeMetadataInstantiationCache@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append( (char **)v4 + 1591,  "MI",  2uLL,  *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0LL;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleTypeMetadataInstantiationFunction@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append( (char **)v4 + 1591,  "Mi",  2uLL,  *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0LL;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleTypeMetadataSingletonInitializationCache@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append( (char **)v4 + 1591,  "Ml",  2uLL,  *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0LL;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleTypeMetadataDemanglingCache@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }

    int v7 = 0LL;
  }

  switch(v6)
  {
    case 1:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      goto LABEL_16;
    case 2:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8LL * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }

  unsigned int v9 = 0LL;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "MD", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

uint64_t *anonymous namespace'::Remangler::mangleTypeMetadataLazyCache@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }

    int v7 = 0LL;
  }

  switch(v6)
  {
    case 1:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      goto LABEL_16;
    case 2:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8LL * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }

  unsigned int v9 = 0LL;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "ML", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleWeak@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append( (char **)v4 + 1591,  "Xw",  2uLL,  *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0LL;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleUnowned@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append( (char **)v4 + 1591,  "Xo",  2uLL,  *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0LL;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleUnmanaged@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append( (char **)v4 + 1591,  "Xu",  2uLL,  *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0LL;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleUnsafeAddressor@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v5 = 0LL;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  uint64_t v5 = *(void *)a2;
}

uint64_t *anonymous namespace'::Remangler::mangleUnsafeMutableAddressor@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v5 = 0LL;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  uint64_t v5 = *(void *)a2;
}

uint64_t *anonymous namespace'::Remangler::mangleValueWitness@<X0>( const void **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  int v7 = *((unsigned __int8 *)a2 + 18);
  int v8 = a2;
  if (v7 != 2)
  {
    if (v7 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0LL;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }

    int v8 = *(swift::Demangle::__runtime::Node **)a2;
  }

  if (*(_DWORD *)a4) {
    return result;
  }
  int v7 = *((unsigned __int8 *)v4 + 18);
LABEL_8:
  switch(**(_DWORD **)v4)
  {
    case 0:
      char v10 = 0;
      unsigned int v11 = "al";
      break;
    case 1:
      char v10 = 0;
      unsigned int v11 = "ca";
      break;
    case 2:
      char v10 = 0;
      unsigned int v11 = "ta";
      break;
    case 3:
      char v10 = 0;
      unsigned int v11 = "de";
      break;
    case 4:
      char v10 = 0;
      unsigned int v11 = "xx";
      break;
    case 5:
      char v10 = 0;
      unsigned int v11 = "XX";
      break;
    case 6:
      char v10 = 0;
      unsigned int v11 = "Xx";
      break;
    case 7:
      char v10 = 0;
      unsigned int v11 = "CP";
      break;
    case 8:
      char v10 = 0;
      unsigned int v11 = "Cp";
      break;
    case 9:
      char v10 = 0;
      unsigned int v11 = "cp";
      break;
    case 0xA:
      char v10 = 0;
      unsigned int v11 = "Tk";
      break;
    case 0xB:
      char v10 = 0;
      unsigned int v11 = "tk";
      break;
    case 0xC:
      char v10 = 0;
      unsigned int v11 = "pr";
      break;
    case 0xD:
      char v10 = 0;
      unsigned int v11 = "TK";
      break;
    case 0xE:
      char v10 = 0;
      unsigned int v11 = "Cc";
      break;
    case 0xF:
      char v10 = 0;
      unsigned int v11 = "Tt";
      break;
    case 0x10:
      char v10 = 0;
      unsigned int v11 = "tT";
      break;
    case 0x11:
      char v10 = 0;
      unsigned int v11 = "xs";
      break;
    case 0x12:
      char v10 = 0;
      unsigned int v11 = "xg";
      break;
    case 0x13:
      char v10 = 0;
      unsigned int v11 = "ug";
      break;
    case 0x14:
      char v10 = 0;
      unsigned int v11 = "up";
      break;
    case 0x15:
      char v10 = 0;
      unsigned int v11 = "ui";
      break;
    case 0x16:
      char v10 = 0;
      unsigned int v11 = "et";
      break;
    case 0x17:
      char v10 = 0;
      unsigned int v11 = "st";
      break;
    default:
      unsigned int v11 = 0LL;
      char v10 = 1;
      break;
  }

  unsigned int v12 = *((_DWORD *)this + 3184);
  size_t v13 = *((unsigned int *)this + 3185);
  size_t v14 = (char *)this[1591];
  size_t v15 = this[1593];
  unint64_t v16 = (char *)v15[1];
  if (&v14[v13] != v16)
  {
    unint64_t v17 = v15[2];
LABEL_40:
    unint64_t v27 = v11;
    char v19 = v10;
    else {
      uint64_t v20 = (2 * v13);
    }
    size_t v21 = v20 + v13;
    if (!v16 || (unint64_t)&v16[v21] > v17)
    {
      unint64_t v22 = 2LL * v15[4];
      if (v22 <= v21 + 1) {
        unint64_t v22 = v21 + 1;
      }
      v15[4] = v22;
      unint64_t v23 = v22 + 8;
      unint64_t v24 = malloc(v22 + 8);
      BOOL v25 = (char *)v24 + v23;
      *unint64_t v24 = v15[3];
      unint64_t v16 = (char *)(v24 + 1);
      v15[2] = v25;
      void v15[3] = v24;
    }

    v15[1] = &v16[v21];
    if ((_DWORD)v13)
    {
      memcpy(v16, this[1591], v13);
      LODWORD(v13) = *((_DWORD *)this + 3185);
      unsigned int v12 = *((_DWORD *)this + 3184);
    }

    char v10 = v19;
    unsigned int v11 = v27;
    this[1591] = v16;
    size_t v14 = v16;
    goto LABEL_51;
  }

  unint64_t v18 = (unint64_t)&v14[v13 + 1];
  unint64_t v17 = v15[2];
  if (v18 > v17) {
    goto LABEL_40;
  }
  v15[1] = v18;
  LODWORD(v20) = 1;
LABEL_51:
  *((_DWORD *)this + 3185) = v13 + v20;
LABEL_52:
  *((_DWORD *)this + 3184) = v12 + 1;
  v14[v12] = 119;
  if ((v10 & 1) != 0) {
    size_t v26 = 0LL;
  }
  else {
    size_t v26 = strlen(v11);
  }
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append((char **)this + 1591, v11, v26, this[1593]);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0LL;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleValueWitnessTable@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append( (char **)v4 + 1591,  "WV",  2uLL,  *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0LL;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleVTableThunk@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }

    int v7 = 0LL;
  }

  switch(v6)
  {
    case 1:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      goto LABEL_16;
    case 2:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8LL * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }

  unsigned int v9 = 0LL;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "TV", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

uint64_t *anonymous namespace'::Remangler::mangleWillSet@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v5 = 0LL;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  uint64_t v5 = *(void *)a2;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleReflectionMetadataBuiltinDescriptor@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append( (char **)v4 + 1591,  "MB",  2uLL,  *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0LL;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleReflectionMetadataFieldDescriptor@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append( (char **)v4 + 1591,  "MF",  2uLL,  *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0LL;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleReflectionMetadataAssocTypeDescriptor@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append( (char **)v4 + 1591,  "MA",  2uLL,  *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0LL;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleReflectionMetadataSuperclassDescriptor@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append( (char **)v4 + 1591,  "MC",  2uLL,  *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0LL;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleGenericTypeParamDecl@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }

    int v7 = 0LL;
  }

  switch(v6)
  {
    case 1:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      goto LABEL_16;
    case 2:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8LL * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }

  unsigned int v9 = 0LL;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "fp", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleCurryThunk@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append( (char **)v4 + 1591,  "Tc",  2uLL,  *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0LL;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleDispatchThunk@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append( (char **)v4 + 1591,  "Tj",  2uLL,  *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0LL;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleMethodDescriptor@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append( (char **)v4 + 1591,  "Tq",  2uLL,  *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0LL;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleProtocolRequirementsBaseDescriptor@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7 = *((unsigned __int8 *)a2 + 18);
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    int v8 = *a2;
    goto LABEL_7;
  }

  int v8 = 0LL;
LABEL_7:
  if (*((_WORD *)v8 + 8) != 232) {
    goto LABEL_14;
  }
  int v9 = *((unsigned __int8 *)v8 + 18);
  if (v9 == 5 && *((_DWORD *)v8 + 2))
  {
    int v8 = *(swift::Demangle::__runtime::Node **)v8;
LABEL_12:
    int v8 = *(swift::Demangle::__runtime::Node **)v8;
    goto LABEL_14;
  }

  int v8 = 0LL;
LABEL_14:
    goto LABEL_33;
  int v10 = *((unsigned __int8 *)v8 + 18);
  unsigned int v11 = (swift::Demangle::__runtime::Node **)v8;
  if ((v10 - 1) >= 2)
  {
    if (v10 == 5)
    {
      unsigned int v12 = *(swift::Demangle::__runtime::Node **)v8;
      unsigned int v11 = *(swift::Demangle::__runtime::Node ***)v8;
      goto LABEL_23;
    }

    unsigned int v11 = 0LL;
  }

  if (v10 == 1)
  {
    size_t v13 = (swift::Demangle::__runtime::Node **)((char *)v8 + 8);
    if (v11 == v13) {
      goto LABEL_33;
    }
    goto LABEL_30;
  }

  if (v10 == 2)
  {
    size_t v13 = (swift::Demangle::__runtime::Node **)((char *)v8 + 16);
    if (v11 == v13) {
      goto LABEL_33;
    }
    goto LABEL_30;
  }

  if (v10 != 5)
  {
    size_t v13 = 0LL;
    if (v11) {
      goto LABEL_30;
    }
LABEL_33:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "TL", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

  unsigned int v12 = *(swift::Demangle::__runtime::Node **)v8;
LABEL_23:
  size_t v13 = (swift::Demangle::__runtime::Node **)((char *)v12 + 8 * *((unsigned int *)v8 + 2));
  if (v11 == v13) {
    goto LABEL_33;
  }
LABEL_30:
  unsigned int v14 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    if (++v11 == v13) {
      goto LABEL_33;
    }
  }

uint64_t *anonymous namespace'::Remangler::mangleAssociatedConformanceDescriptor@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7 = *((unsigned __int8 *)a2 + 18);
  int v8 = a2;
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    int v8 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    int v9 = *v8;
    goto LABEL_7;
  }

  int v9 = 0LL;
LABEL_7:
  unsigned int v10 = a3 + 1;
  if (*(_DWORD *)a4) {
    return result;
  }
  int v12 = *((unsigned __int8 *)a2 + 18);
  size_t v13 = (swift::Demangle::__runtime::Node *)a2;
  if (v12 == 2) {
    goto LABEL_12;
  }
  if (v12 == 5 && *((_DWORD *)a2 + 2) >= 2u)
  {
    size_t v13 = *a2;
LABEL_12:
    unsigned int v14 = (swift::Demangle::__runtime::Node *)*((void *)v13 + 1);
    goto LABEL_14;
  }

  unsigned int v14 = 0LL;
LABEL_14:
  if (*(_DWORD *)a4) {
    return result;
  }
  if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u) {
    size_t v15 = (swift::Demangle::__runtime::Node *)*((void *)*a2 + 2);
  }
  else {
    size_t v15 = 0LL;
  }
  if (*((_WORD *)v15 + 8) == 232)
  {
    int v16 = *((unsigned __int8 *)v15 + 18);
    if ((v16 - 1) >= 2)
    {
      if (v16 != 5 || !*((_DWORD *)v15 + 2))
      {
        size_t v15 = 0LL;
        goto LABEL_26;
      }

      size_t v15 = *(swift::Demangle::__runtime::Node **)v15;
    }

    size_t v15 = *(swift::Demangle::__runtime::Node **)v15;
  }

uint64_t *anonymous namespace'::Remangler::mangleDefaultAssociatedConformanceAccessor@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7 = *((unsigned __int8 *)a2 + 18);
  int v8 = a2;
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    int v8 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    int v9 = *v8;
    goto LABEL_7;
  }

  int v9 = 0LL;
LABEL_7:
  unsigned int v10 = a3 + 1;
  if (*(_DWORD *)a4) {
    return result;
  }
  int v12 = *((unsigned __int8 *)a2 + 18);
  size_t v13 = (swift::Demangle::__runtime::Node *)a2;
  if (v12 == 2) {
    goto LABEL_12;
  }
  if (v12 == 5 && *((_DWORD *)a2 + 2) >= 2u)
  {
    size_t v13 = *a2;
LABEL_12:
    unsigned int v14 = (swift::Demangle::__runtime::Node *)*((void *)v13 + 1);
    goto LABEL_14;
  }

  unsigned int v14 = 0LL;
LABEL_14:
  if (*(_DWORD *)a4) {
    return result;
  }
  if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u) {
    size_t v15 = (swift::Demangle::__runtime::Node *)*((void *)*a2 + 2);
  }
  else {
    size_t v15 = 0LL;
  }
  if (*((_WORD *)v15 + 8) == 232)
  {
    int v16 = *((unsigned __int8 *)v15 + 18);
    if ((v16 - 1) >= 2)
    {
      if (v16 != 5 || !*((_DWORD *)v15 + 2))
      {
        size_t v15 = 0LL;
        goto LABEL_26;
      }

      size_t v15 = *(swift::Demangle::__runtime::Node **)v15;
    }

    size_t v15 = *(swift::Demangle::__runtime::Node **)v15;
  }

uint64_t *anonymous namespace'::Remangler::mangleBaseConformanceDescriptor@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  int v7 = *((unsigned __int8 *)a2 + 18);
  int v8 = (swift::Demangle::__runtime::Node **)a2;
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    int v8 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_5:
    int v9 = *v8;
    goto LABEL_7;
  }

  int v9 = 0LL;
LABEL_7:
  unsigned int v10 = a3 + 1;
  if (*(_DWORD *)a4) {
    return result;
  }
  int v12 = *((unsigned __int8 *)v4 + 18);
  if (v12 == 2) {
    goto LABEL_12;
  }
  if (v12 == 5 && *((_DWORD *)v4 + 2) >= 2u)
  {
    int v4 = *(swift::Demangle::__runtime::Node **)v4;
LABEL_12:
    size_t v13 = (swift::Demangle::__runtime::Node *)*((void *)v4 + 1);
    goto LABEL_14;
  }

  size_t v13 = 0LL;
LABEL_14:
  if (*((_WORD *)v13 + 8) == 232)
  {
    int v14 = *((unsigned __int8 *)v13 + 18);
    if ((v14 - 1) >= 2)
    {
      if (v14 != 5 || !*((_DWORD *)v13 + 2))
      {
        size_t v13 = 0LL;
        goto LABEL_21;
      }

      size_t v13 = *(swift::Demangle::__runtime::Node **)v13;
    }

    size_t v13 = *(swift::Demangle::__runtime::Node **)v13;
  }

uint64_t *anonymous namespace'::Remangler::mangleAssociatedTypeDescriptor@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }

    int v7 = 0LL;
  }

  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8LL * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }

  int v9 = 0LL;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Tl", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

unsigned int *anonymous namespace'::Remangler::mangleThrowsAnnotation@<X0>( unsigned int *this@<X0>, uint64_t a2@<X8>)
{
  int v3 = this;
  unsigned int v5 = this[3184];
  size_t v6 = this[3185];
  int v7 = (char *)*((void *)this + 1591);
  if (v5 >= v6)
  {
    uint64_t v8 = (void *)*((void *)this + 1593);
    int v9 = (char *)v8[1];
    if (&v7[v6] == v9)
    {
      unint64_t v11 = (unint64_t)&v7[v6 + 1];
      unint64_t v10 = v8[2];
      if (v11 <= v10)
      {
        v8[1] = v11;
        LODWORD(v12) = 1;
LABEL_20:
        v3[3185] = v6 + v12;
        goto LABEL_21;
      }
    }

    else
    {
      unint64_t v10 = v8[2];
    }

    else {
      uint64_t v12 = (2 * v6);
    }
    size_t v13 = v12 + v6;
    if (v9) {
      BOOL v14 = (unint64_t)&v9[v12 + v6] > v10;
    }
    else {
      BOOL v14 = 1;
    }
    int v7 = (char *)v8[1];
    if (v14)
    {
      unint64_t v15 = 2LL * v8[4];
      if (v15 <= v13 + 1) {
        unint64_t v15 = v13 + 1;
      }
      v8[4] = v15;
      unint64_t v16 = v15 + 8;
      this = (unsigned int *)malloc(v15 + 8);
      int v17 = (char *)this + v16;
      *(void *)this = v8[3];
      int v7 = (char *)(this + 2);
      void v8[2] = v17;
      void v8[3] = this;
    }

    v8[1] = &v7[v13];
    if ((_DWORD)v6)
    {
      this = (unsigned int *)memcpy(v7, *((const void **)v3 + 1591), v6);
      LODWORD(v6) = v3[3185];
      unsigned int v5 = v3[3184];
    }

    *((void *)v3 + 1591) = v7;
    goto LABEL_20;
  }

uint64_t *anonymous namespace'::Remangler::mangleTypedThrowsAnnotation@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }

    int v7 = 0LL;
  }

  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8LL * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }

  int v9 = 0LL;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "YK", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

unsigned int *anonymous namespace'::Remangler::mangleEmptyList@<X0>( unsigned int *this@<X0>, uint64_t a2@<X8>)
{
  int v3 = this;
  unsigned int v5 = this[3184];
  size_t v6 = this[3185];
  int v7 = (char *)*((void *)this + 1591);
  if (v5 >= v6)
  {
    uint64_t v8 = (void *)*((void *)this + 1593);
    int v9 = (char *)v8[1];
    if (&v7[v6] == v9)
    {
      unint64_t v11 = (unint64_t)&v7[v6 + 1];
      unint64_t v10 = v8[2];
      if (v11 <= v10)
      {
        v8[1] = v11;
        LODWORD(v12) = 1;
LABEL_20:
        v3[3185] = v6 + v12;
        goto LABEL_21;
      }
    }

    else
    {
      unint64_t v10 = v8[2];
    }

    else {
      uint64_t v12 = (2 * v6);
    }
    size_t v13 = v12 + v6;
    if (v9) {
      BOOL v14 = (unint64_t)&v9[v12 + v6] > v10;
    }
    else {
      BOOL v14 = 1;
    }
    int v7 = (char *)v8[1];
    if (v14)
    {
      unint64_t v15 = 2LL * v8[4];
      if (v15 <= v13 + 1) {
        unint64_t v15 = v13 + 1;
      }
      v8[4] = v15;
      unint64_t v16 = v15 + 8;
      this = (unsigned int *)malloc(v15 + 8);
      int v17 = (char *)this + v16;
      *(void *)this = v8[3];
      int v7 = (char *)(this + 2);
      void v8[2] = v17;
      void v8[3] = this;
    }

    v8[1] = &v7[v13];
    if ((_DWORD)v6)
    {
      this = (unsigned int *)memcpy(v7, *((const void **)v3 + 1591), v6);
      LODWORD(v6) = v3[3185];
      unsigned int v5 = v3[3184];
    }

    *((void *)v3 + 1591) = v7;
    goto LABEL_20;
  }

unsigned int *anonymous namespace'::Remangler::mangleFirstElementMarker@<X0>( unsigned int *this@<X0>, uint64_t a2@<X8>)
{
  int v3 = this;
  unsigned int v5 = this[3184];
  size_t v6 = this[3185];
  int v7 = (char *)*((void *)this + 1591);
  if (v5 >= v6)
  {
    uint64_t v8 = (void *)*((void *)this + 1593);
    int v9 = (char *)v8[1];
    if (&v7[v6] == v9)
    {
      unint64_t v11 = (unint64_t)&v7[v6 + 1];
      unint64_t v10 = v8[2];
      if (v11 <= v10)
      {
        v8[1] = v11;
        LODWORD(v12) = 1;
LABEL_20:
        v3[3185] = v6 + v12;
        goto LABEL_21;
      }
    }

    else
    {
      unint64_t v10 = v8[2];
    }

    else {
      uint64_t v12 = (2 * v6);
    }
    size_t v13 = v12 + v6;
    if (v9) {
      BOOL v14 = (unint64_t)&v9[v12 + v6] > v10;
    }
    else {
      BOOL v14 = 1;
    }
    int v7 = (char *)v8[1];
    if (v14)
    {
      unint64_t v15 = 2LL * v8[4];
      if (v15 <= v13 + 1) {
        unint64_t v15 = v13 + 1;
      }
      v8[4] = v15;
      unint64_t v16 = v15 + 8;
      this = (unsigned int *)malloc(v15 + 8);
      int v17 = (char *)this + v16;
      *(void *)this = v8[3];
      int v7 = (char *)(this + 2);
      void v8[2] = v17;
      void v8[3] = this;
    }

    v8[1] = &v7[v13];
    if ((_DWORD)v6)
    {
      this = (unsigned int *)memcpy(v7, *((const void **)v3 + 1591), v6);
      LODWORD(v6) = v3[3185];
      unsigned int v5 = v3[3184];
    }

    *((void *)v3 + 1591) = v7;
    goto LABEL_20;
  }

unsigned int *anonymous namespace'::Remangler::mangleVariadicMarker@<X0>( unsigned int *this@<X0>, uint64_t a2@<X8>)
{
  int v3 = this;
  unsigned int v5 = this[3184];
  size_t v6 = this[3185];
  int v7 = (char *)*((void *)this + 1591);
  if (v5 >= v6)
  {
    uint64_t v8 = (void *)*((void *)this + 1593);
    int v9 = (char *)v8[1];
    if (&v7[v6] == v9)
    {
      unint64_t v11 = (unint64_t)&v7[v6 + 1];
      unint64_t v10 = v8[2];
      if (v11 <= v10)
      {
        v8[1] = v11;
        LODWORD(v12) = 1;
LABEL_20:
        v3[3185] = v6 + v12;
        goto LABEL_21;
      }
    }

    else
    {
      unint64_t v10 = v8[2];
    }

    else {
      uint64_t v12 = (2 * v6);
    }
    size_t v13 = v12 + v6;
    if (v9) {
      BOOL v14 = (unint64_t)&v9[v12 + v6] > v10;
    }
    else {
      BOOL v14 = 1;
    }
    int v7 = (char *)v8[1];
    if (v14)
    {
      unint64_t v15 = 2LL * v8[4];
      if (v15 <= v13 + 1) {
        unint64_t v15 = v13 + 1;
      }
      v8[4] = v15;
      unint64_t v16 = v15 + 8;
      this = (unsigned int *)malloc(v15 + 8);
      int v17 = (char *)this + v16;
      *(void *)this = v8[3];
      int v7 = (char *)(this + 2);
      void v8[2] = v17;
      void v8[3] = this;
    }

    v8[1] = &v7[v13];
    if ((_DWORD)v6)
    {
      this = (unsigned int *)memcpy(v7, *((const void **)v3 + 1591), v6);
      LODWORD(v6) = v3[3185];
      unsigned int v5 = v3[3184];
    }

    *((void *)v3 + 1591) = v7;
    goto LABEL_20;
  }

void *anonymous namespace'::Remangler::mangleOutlinedBridgedMethod@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  size_t v6 = this + 1591;
  swift::Demangle::__runtime::CharVector::append(this + 1591, "Te", 2uLL, this[1593]);
  swift::Demangle::__runtime::CharVector::append(v6, *(const void **)a2, *((void *)a2 + 1), this[1593]);
  uint64_t result = swift::Demangle::__runtime::CharVector::append(v6, "_", 1uLL, this[1593]);
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = 0LL;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleOutlinedCopy@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }

    int v7 = 0LL;
  }

  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8LL * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }

  int v9 = 0LL;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "WOy", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

uint64_t *anonymous namespace'::Remangler::mangleOutlinedConsume@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }

    int v7 = 0LL;
  }

  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8LL * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }

  int v9 = 0LL;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "WOe", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

uint64_t *anonymous namespace'::Remangler::mangleOutlinedRetain@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }

    int v7 = 0LL;
  }

  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8LL * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }

  int v9 = 0LL;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "WOr", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

uint64_t *anonymous namespace'::Remangler::mangleOutlinedRelease@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }

    int v7 = 0LL;
  }

  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8LL * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }

  int v9 = 0LL;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "WOs", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

uint64_t *anonymous namespace'::Remangler::mangleOutlinedInitializeWithTake@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }

    int v7 = 0LL;
  }

  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8LL * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }

  int v9 = 0LL;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "WOb", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

uint64_t *anonymous namespace'::Remangler::mangleOutlinedInitializeWithCopy@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }

    int v7 = 0LL;
  }

  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8LL * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }

  int v9 = 0LL;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "WOc", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

uint64_t *anonymous namespace'::Remangler::mangleOutlinedAssignWithTake@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }

    int v7 = 0LL;
  }

  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8LL * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }

  int v9 = 0LL;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "WOd", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

uint64_t *anonymous namespace'::Remangler::mangleOutlinedAssignWithCopy@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }

    int v7 = 0LL;
  }

  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8LL * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }

  int v9 = 0LL;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "WOf", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

uint64_t *anonymous namespace'::Remangler::mangleOutlinedDestroy@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }

    int v7 = 0LL;
  }

  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8LL * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }

  int v9 = 0LL;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "WOh", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

char *anonymous namespace'::Remangler::mangleOutlinedVariable@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = 0LL;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

void *anonymous namespace'::Remangler::mangleOutlinedReadOnlyObject@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  int v6 = this + 1591;
  swift::Demangle::__runtime::CharVector::append(this + 1591, "Tv", 2uLL, this[1593]);
  unsigned int v8 = *((_DWORD *)this + 3184);
  size_t v9 = *((unsigned int *)this + 3185);
  unsigned int v10 = this[1591];
  if (v8 >= v9)
  {
    unint64_t v11 = this[1593];
    uint64_t v12 = (char *)*((void *)v11 + 1);
    if (&v10[v9] == v12)
    {
      unint64_t v14 = (unint64_t)&v10[v9 + 1];
      unint64_t v13 = *((void *)v11 + 2);
      if (v14 <= v13)
      {
        *((void *)v11 + 1) = v14;
        LODWORD(v15) = 1;
LABEL_20:
        *((_DWORD *)this + 3185) = v9 + v15;
        goto LABEL_21;
      }
    }

    else
    {
      unint64_t v13 = *((void *)v11 + 2);
    }

    else {
      uint64_t v15 = (2 * v9);
    }
    size_t v16 = v15 + v9;
    if (v12) {
      BOOL v17 = (unint64_t)&v12[v15 + v9] > v13;
    }
    else {
      BOOL v17 = 1;
    }
    unsigned int v10 = (char *)*((void *)v11 + 1);
    if (v17)
    {
      unint64_t v18 = 2LL * *((void *)v11 + 4);
      if (v18 <= v16 + 1) {
        unint64_t v18 = v16 + 1;
      }
      *((void *)v11 + 4) = v18;
      unint64_t v19 = v18 + 8;
      uint64_t result = malloc(v18 + 8);
      uint64_t v20 = (char *)result + v19;
      *uint64_t result = *((void *)v11 + 3);
      unsigned int v10 = (char *)(result + 1);
      *((void *)v11 + 2) = v20;
      *((void *)v11 + 3) = result;
    }

    *((void *)v11 + 1) = &v10[v16];
    if ((_DWORD)v9)
    {
      uint64_t result = memcpy(v10, this[1591], v9);
      LODWORD(v9) = *((_DWORD *)this + 3185);
      unsigned int v8 = *((_DWORD *)this + 3184);
    }

    *int v6 = v10;
    goto LABEL_20;
  }

unsigned int *anonymous namespace'::Remangler::mangleAssocTypePath@<X0>( unsigned int *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = (_anonymous_namespace_::Remangler *)this;
  BOOL v11 = 1;
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }

    int v7 = 0LL;
  }

  switch(v6)
  {
    case 1:
      size_t v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      goto LABEL_16;
    case 2:
      size_t v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      size_t v9 = (swift::Demangle::__runtime::Node *)(v8 + 8LL * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }

  size_t v9 = 0LL;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return this;
  }

uint64_t *anonymous namespace'::Remangler::mangleLabelList@<X0>( uint64_t *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  uint64_t v5 = (uint64_t)this;
  uint64_t v7 = *((unsigned __int8 *)a2 + 18);
  switch((_DWORD)v7)
  {
    case 1:
LABEL_10:
      unint64_t v14 = &v4[v7];
      unsigned int v15 = a3 + 1;
      while (1)
      {
        if (*(_DWORD *)a4) {
          return this;
        }
        if (++v4 == v14) {
          goto LABEL_29;
        }
      }

    case 2:
      uint64_t v7 = 2LL;
      goto LABEL_10;
    case 5:
      uint64_t v7 = *((unsigned int *)a2 + 2);
      if ((_DWORD)v7)
      {
        int v4 = (swift::Demangle::__runtime::Node **)*a2;
        goto LABEL_10;
      }

      break;
  }

  unsigned int v8 = *((_DWORD *)this + 3184);
  size_t v9 = *((unsigned int *)this + 3185);
  unsigned int v10 = (char *)this[1591];
  if (v8 >= v9)
  {
    BOOL v11 = (void *)this[1593];
    uint64_t v12 = (char *)v11[1];
    if (&v10[v9] == v12)
    {
      unint64_t v16 = (unint64_t)&v10[v9 + 1];
      unint64_t v13 = v11[2];
      if (v16 <= v13)
      {
        v11[1] = v16;
        LODWORD(v17) = 1;
LABEL_27:
        *(_DWORD *)(v5 + 12740) = v9 + v17;
        goto LABEL_28;
      }
    }

    else
    {
      unint64_t v13 = v11[2];
    }

    else {
      uint64_t v17 = (2 * v9);
    }
    size_t v18 = v17 + v9;
    if (!v12 || (unint64_t)&v12[v18] > v13)
    {
      unint64_t v19 = 2LL * v11[4];
      if (v19 <= v18 + 1) {
        unint64_t v19 = v18 + 1;
      }
      v11[4] = v19;
      unint64_t v20 = v19 + 8;
      this = (uint64_t *)malloc(v19 + 8);
      size_t v21 = (char *)this + v20;
      *this = v11[3];
      uint64_t v12 = (char *)(this + 1);
      void v11[2] = v21;
      void v11[3] = this;
    }

    v11[1] = &v12[v18];
    if ((_DWORD)v9)
    {
      this = (uint64_t *)memcpy(v12, *(const void **)(v5 + 12728), v9);
      LODWORD(v9) = *(_DWORD *)(v5 + 12740);
      unsigned int v8 = *(_DWORD *)(v5 + 12736);
    }

    *(void *)(v5 + 12728) = v12;
    unsigned int v10 = v12;
    goto LABEL_27;
  }

uint64_t *anonymous namespace'::Remangler::mangleModuleDescriptor@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    uint64_t v7 = *a2;
    goto LABEL_7;
  }

  uint64_t v7 = 0LL;
LABEL_7:
  if (!*(_DWORD *)a4)
  {
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "MXM", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
  }

  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleExtensionDescriptor@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    uint64_t v7 = *a2;
    goto LABEL_7;
  }

  uint64_t v7 = 0LL;
LABEL_7:
  if (!*(_DWORD *)a4)
  {
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "MXE", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
  }

  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleAnonymousDescriptor@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  int v7 = *((unsigned __int8 *)a2 + 18);
  unsigned int v8 = (swift::Demangle::__runtime::Node **)a2;
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    unsigned int v8 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_5:
    size_t v9 = *v8;
    goto LABEL_7;
  }

  size_t v9 = 0LL;
LABEL_7:
  if (*(_DWORD *)a4) {
    return result;
  }
  int v11 = *((unsigned __int8 *)v4 + 18);
  if (v11 == 1) {
    goto LABEL_13;
  }
  if (v11 == 2) {
    goto LABEL_16;
  }
  if (v11 != 5 || (int v12 = *((_DWORD *)v4 + 2)) == 0)
  {
    uint64_t v16 = 0LL;
LABEL_17:
    __int128 v20 = 0uLL;
    LOBYTE(v21) = 0;
    {
      unint64_t v17 = *((void *)this + 1585);
      if (v17 > 0xF)
      {
        int v19 = *((_DWORD *)this + 3178) + 16;
        __int128 v22 = v20;
        uint64_t v23 = v21;
        int v24 = v19;
        std::__hash_table<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::__runtime::SubstitutionEntry,std::pair<swift::Demangle::__runtime::SubstitutionEntry const,unsigned int>>( (uint64_t)this + 12688,  (uint64_t)&v22,  &v22);
      }

      else
      {
        *((void *)this + 1585) = v17 + 1;
        size_t v18 = (char *)this + 24 * v17 + 12296;
        *(_OWORD *)size_t v18 = v20;
        v18[16] = v21;
      }
    }

    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    unint64_t v13 = (char **)((char *)this + 12728);
    unint64_t v14 = (void *)*((void *)this + 1593);
    unsigned int v15 = "MXY";
    goto LABEL_22;
  }

  if (v12 != 1)
  {
    int v4 = *(swift::Demangle::__runtime::Node **)v4;
LABEL_16:
    uint64_t v16 = *((void *)v4 + 1);
    goto LABEL_17;
  }

uint64_t *anonymous namespace'::Remangler::mangleAssociatedTypeGenericParamRef@<X0>( uint64_t *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  uint64_t v5 = this;
  int v7 = *((unsigned __int8 *)a2 + 18);
  unsigned int v8 = (swift::Demangle::__runtime::Node **)a2;
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    unsigned int v8 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_5:
    size_t v9 = *v8;
    goto LABEL_7;
  }

  size_t v9 = 0LL;
LABEL_7:
  int v10 = *((unsigned __int8 *)v9 + 18);
  if (v10 == 1) {
    goto LABEL_11;
  }
  if (v10 == 5 && *((_DWORD *)v9 + 2) == 1)
  {
    size_t v9 = *(swift::Demangle::__runtime::Node **)v9;
LABEL_11:
    unsigned int v11 = a3 + 2;
    if (*(_DWORD *)a4) {
      return this;
    }
    int v12 = *((unsigned __int8 *)v4 + 18);
    if (v12 != 2)
    {
      if (v12 != 5 || *((_DWORD *)v4 + 2) < 2u)
      {
        uint64_t v13 = 0LL;
        goto LABEL_19;
      }

      int v4 = *(swift::Demangle::__runtime::Node **)v4;
    }

    uint64_t v13 = *((void *)v4 + 1);
LABEL_19:
    BOOL v20 = 1;
    int v16 = *(unsigned __int8 *)(v13 + 18);
    unint64_t v17 = (swift::Demangle::__runtime::Node **)v13;
    if ((v16 - 1) >= 2)
    {
      if (v16 == 5)
      {
        size_t v18 = *(swift::Demangle::__runtime::Node **)v13;
        unint64_t v17 = *(swift::Demangle::__runtime::Node ***)v13;
LABEL_27:
        int v19 = (swift::Demangle::__runtime::Node **)((char *)v18 + 8 * *(unsigned int *)(v13 + 8));
        goto LABEL_33;
      }

      unint64_t v17 = 0LL;
    }

    switch(v16)
    {
      case 1:
        int v19 = (swift::Demangle::__runtime::Node **)(v13 + 8);
        goto LABEL_33;
      case 2:
        int v19 = (swift::Demangle::__runtime::Node **)(v13 + 16);
        goto LABEL_33;
      case 5:
        size_t v18 = *(swift::Demangle::__runtime::Node **)v13;
        goto LABEL_27;
    }

    int v19 = 0LL;
LABEL_33:
    while (v17 != v19)
    {
      if (*(_DWORD *)a4) {
        return this;
      }
      ++v17;
    }

    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    this = (uint64_t *)swift::Demangle::__runtime::CharVector::append( (char **)v5 + 1591,  "MXA",  3uLL,  (void *)v5[1593]);
    int v15 = 0;
    size_t v9 = 0LL;
    int v14 = 0;
    goto LABEL_35;
  }

  int v14 = 321;
  int v15 = 10;
LABEL_35:
  *(_DWORD *)a4 = v15;
  *(void *)(a4 + 8) = v9;
  *(_DWORD *)(a4 + 16) = v14;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleSugaredOptional@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    int v7 = *a2;
    goto LABEL_7;
  }

  int v7 = 0LL;
LABEL_7:
  int v8 = *((unsigned __int8 *)v7 + 18);
  if (v8 != 1)
  {
    if (v8 != 5 || *((_DWORD *)v7 + 2) != 1)
    {
      int v10 = 321;
      int v9 = 10;
      goto LABEL_14;
    }

    int v7 = *(swift::Demangle::__runtime::Node **)v7;
  }

  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append( (char **)v4 + 1591,  "XSq",  3uLL,  *((void **)v4 + 1593));
  int v9 = 0;
  int v7 = 0LL;
  int v10 = 0;
LABEL_14:
  *(_DWORD *)a4 = v9;
  *(void *)(a4 + 8) = v7;
  *(_DWORD *)(a4 + 16) = v10;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleSugaredArray@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    int v7 = *a2;
    goto LABEL_7;
  }

  int v7 = 0LL;
LABEL_7:
  int v8 = *((unsigned __int8 *)v7 + 18);
  if (v8 != 1)
  {
    if (v8 != 5 || *((_DWORD *)v7 + 2) != 1)
    {
      int v10 = 321;
      int v9 = 10;
      goto LABEL_14;
    }

    int v7 = *(swift::Demangle::__runtime::Node **)v7;
  }

  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append( (char **)v4 + 1591,  "XSa",  3uLL,  *((void **)v4 + 1593));
  int v9 = 0;
  int v7 = 0LL;
  int v10 = 0;
LABEL_14:
  *(_DWORD *)a4 = v9;
  *(void *)(a4 + 8) = v7;
  *(_DWORD *)(a4 + 16) = v10;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleSugaredDictionary@<X0>( uint64_t *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  uint64_t v5 = this;
  int v7 = *((unsigned __int8 *)a2 + 18);
  int v8 = (swift::Demangle::__runtime::Node **)a2;
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    int v8 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_5:
    int v9 = *v8;
    goto LABEL_7;
  }

  int v9 = 0LL;
LABEL_7:
  int v10 = *((unsigned __int8 *)v9 + 18);
  if (v10 != 1)
  {
    if (v10 != 5 || *((_DWORD *)v9 + 2) != 1) {
      goto LABEL_24;
    }
    int v9 = *(swift::Demangle::__runtime::Node **)v9;
  }

  unsigned int v11 = a3 + 2;
  if (*(_DWORD *)a4) {
    return this;
  }
  int v12 = *((unsigned __int8 *)v4 + 18);
  if (v12 == 2) {
    goto LABEL_16;
  }
  if (v12 == 5 && *((_DWORD *)v4 + 2) >= 2u)
  {
    int v4 = *(swift::Demangle::__runtime::Node **)v4;
LABEL_16:
    int v9 = (swift::Demangle::__runtime::Node *)*((void *)v4 + 1);
    goto LABEL_18;
  }

  int v9 = 0LL;
LABEL_18:
  int v13 = *((unsigned __int8 *)v9 + 18);
  if (v13 != 1)
  {
    if (v13 == 5 && *((_DWORD *)v9 + 2) == 1)
    {
      int v9 = *(swift::Demangle::__runtime::Node **)v9;
      goto LABEL_22;
    }

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleSugaredParen@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    int v7 = *a2;
    goto LABEL_7;
  }

  int v7 = 0LL;
LABEL_7:
  int v8 = *((unsigned __int8 *)v7 + 18);
  if (v8 != 1)
  {
    if (v8 != 5 || *((_DWORD *)v7 + 2) != 1)
    {
      int v10 = 321;
      int v9 = 10;
      goto LABEL_14;
    }

    int v7 = *(swift::Demangle::__runtime::Node **)v7;
  }

  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append( (char **)v4 + 1591,  "XSp",  3uLL,  *((void **)v4 + 1593));
  int v9 = 0;
  int v7 = 0LL;
  int v10 = 0;
LABEL_14:
  *(_DWORD *)a4 = v9;
  *(void *)(a4 + 8) = v7;
  *(_DWORD *)(a4 + 16) = v10;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleOpaqueType@<X0>( const void **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = a2;
  __int128 v53 = 0uLL;
  LOBYTE(v54) = 0;
  if ((_DWORD)result) {
    goto LABEL_2;
  }
  if (*((_BYTE *)v5 + 18) != 5 || *((_DWORD *)v5 + 2) <= 2u)
  {
    *(_DWORD *)a4 = 1;
    *(void *)(a4 + 8) = v5;
    *(_DWORD *)(a4 + 16) = 3771;
    return result;
  }

  unsigned int v9 = a3 + 1;
  if (*(_DWORD *)a4) {
    return result;
  }
  if (*((_BYTE *)v5 + 18) == 5 && *((_DWORD *)v5 + 2) >= 3u) {
    int v10 = (uint64_t *)*((void *)*v5 + 2);
  }
  else {
    int v10 = 0LL;
  }
  unint64_t v11 = 0LL;
  int v12 = (char **)(this + 1591);
  unint64_t v50 = v10;
  while (1)
  {
    unint64_t v13 = *((unsigned __int8 *)v10 + 18);
    if ((_DWORD)v13 != 1)
    {
      if ((_DWORD)v13 == 5)
      {
        unint64_t v13 = *((unsigned int *)v10 + 2);
      }

      else
      {
        if ((_DWORD)v13 != 2) {
          break;
        }
        unint64_t v13 = 2LL;
      }
    }

    if (v13 <= v11) {
      break;
    }
    if (v11) {
      char v14 = 95;
    }
    else {
      char v14 = 121;
    }
    unsigned int v15 = *((_DWORD *)this + 3184);
    size_t v16 = *((unsigned int *)this + 3185);
    unint64_t v17 = (char *)this[1591];
    if (v15 >= v16)
    {
      unint64_t v52 = v11;
      size_t v18 = this[1593];
      int v19 = (char *)v18[1];
      if (&v17[v16] != v19)
      {
        unint64_t v20 = v18[2];
        goto LABEL_26;
      }

      unint64_t v21 = (unint64_t)&v17[v16 + 1];
      unint64_t v20 = v18[2];
      if (v21 <= v20)
      {
        v18[1] = v21;
        int v30 = 1;
      }

      else
      {
LABEL_26:
        LODWORD(v22) = 2 * v16;
        else {
          uint64_t v22 = v22;
        }
        int v51 = v22;
        size_t v23 = v22 + v16;
        if (!v19 || (unint64_t)&v19[v23] > v20)
        {
          unint64_t v24 = 2LL * v18[4];
          if (v24 <= v23 + 1) {
            unint64_t v24 = v23 + 1;
          }
          v18[4] = v24;
          unint64_t v49 = v12;
          unint64_t v25 = v24 + 8;
          char v26 = v14;
          unint64_t v27 = malloc(v24 + 8);
          char v14 = v26;
          *unint64_t v27 = v18[3];
          int v19 = (char *)(v27 + 1);
          int v28 = (char *)v27 + v25;
          int v12 = v49;
          uint64_t v18[2] = v28;
          void v18[3] = v27;
        }

        v18[1] = &v19[v23];
        if ((_DWORD)v16)
        {
          char v29 = v14;
          memcpy(v19, this[1591], v16);
          char v14 = v29;
          LODWORD(v16) = *((_DWORD *)this + 3185);
          unsigned int v15 = *((_DWORD *)this + 3184);
        }

        int v10 = v50;
        int v30 = v51;
        *int v12 = v19;
        unint64_t v17 = v19;
      }

      unint64_t v11 = v52;
      *((_DWORD *)this + 3185) = v16 + v30;
    }

    *((_DWORD *)this + 3184) = v15 + 1;
    v17[v15] = v14;
    unint64_t v31 = *((unsigned __int8 *)v10 + 18);
    unsigned int v32 = v31 - 1;
    if ((_DWORD)v31 == 1) {
      goto LABEL_42;
    }
    if ((_DWORD)v31 != 5)
    {
      if ((_DWORD)v31 != 2) {
        goto LABEL_47;
      }
      unint64_t v31 = 2LL;
LABEL_42:
      if (v31 <= v11) {
        goto LABEL_47;
      }
      goto LABEL_43;
    }

    if (*((unsigned int *)v10 + 2) <= v11)
    {
LABEL_47:
      uint64_t v34 = 0LL;
      goto LABEL_48;
    }

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleOpaqueTypeDescriptor@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append( (char **)v4 + 1591,  "MQ",  2uLL,  *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0LL;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleOpaqueTypeDescriptorRecord@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append( (char **)v4 + 1591,  "Ho",  2uLL,  *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0LL;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleOpaqueTypeDescriptorAccessor@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append( (char **)v4 + 1591,  "Mg",  2uLL,  *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0LL;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleOpaqueTypeDescriptorAccessorImpl@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append( (char **)v4 + 1591,  "Mh",  2uLL,  *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0LL;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleOpaqueTypeDescriptorAccessorKey@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append( (char **)v4 + 1591,  "Mj",  2uLL,  *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0LL;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleOpaqueTypeDescriptorAccessorVar@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append( (char **)v4 + 1591,  "Mk",  2uLL,  *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0LL;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

void *anonymous namespace'::Remangler::mangleOpaqueReturnType@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = (uint64_t *)a2;
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 != 5 || !*((_DWORD *)a2 + 2)) {
      goto LABEL_9;
    }
    int v7 = *(swift::Demangle::__runtime::Node **)a2;
  }

  if (*(_WORD *)(*(void *)v7 + 16LL) != 341)
  {
LABEL_9:
    uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Qr", 2uLL, this[1593]);
    goto LABEL_10;
  }

  swift::Demangle::__runtime::CharVector::append(this + 1591, "QR", 2uLL, this[1593]);
LABEL_10:
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = 0LL;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

{
  uint64_t *v3;
  int v6;
  swift::Demangle::__runtime::Node *v7;
  void *result;
  int v3 = (uint64_t *)a2;
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 != 5 || !*((_DWORD *)a2 + 2)) {
      goto LABEL_9;
    }
    int v7 = *(swift::Demangle::__runtime::Node **)a2;
  }

  if (*(_WORD *)(*(void *)v7 + 16LL) != 341)
  {
LABEL_9:
    uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Qu", 2uLL, this[1593]);
    goto LABEL_10;
  }

  swift::Demangle::__runtime::CharVector::append(this + 1591, "QU", 2uLL, this[1593]);
LABEL_10:
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = 0LL;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleOpaqueReturnTypeOf@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    int v7 = *a2;
    goto LABEL_7;
  }

  int v7 = 0LL;
LABEL_7:
  if (!*(_DWORD *)a4)
  {
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "QO", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
  }

  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleCanonicalSpecializedGenericMetaclass@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }

    int v7 = 0LL;
  }

  switch(v6)
  {
    case 1:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      goto LABEL_16;
    case 2:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8LL * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }

  unsigned int v9 = 0LL;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "MM", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleCanonicalSpecializedGenericTypeMetadataAccessFunction@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append( (char **)v4 + 1591,  "Mb",  2uLL,  *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0LL;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 114;
      int v7 = 10;
      goto LABEL_8;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append( (char **)v4 + 1591,  "Mb",  2uLL,  *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0LL;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleMetadataInstantiationCache@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append( (char **)v4 + 1591,  "MK",  2uLL,  *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0LL;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleNoncanonicalSpecializedGenericTypeMetadata@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append( (char **)v4 + 1591,  "MN",  2uLL,  *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0LL;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 114;
      int v7 = 10;
      goto LABEL_8;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append( (char **)v4 + 1591,  "MN",  2uLL,  *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0LL;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleNoncanonicalSpecializedGenericTypeMetadataCache@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append( (char **)v4 + 1591,  "MJ",  2uLL,  *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0LL;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 114;
      int v7 = 10;
      goto LABEL_8;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append( (char **)v4 + 1591,  "MJ",  2uLL,  *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0LL;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleGlobalVariableOnceFunction@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }

    int v7 = 0LL;
  }

  switch(v6)
  {
    case 1:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      goto LABEL_16;
    case 2:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8LL * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }

  unsigned int v9 = 0LL;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "WZ", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

uint64_t *anonymous namespace'::Remangler::mangleGlobalVariableOnceToken@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }

    int v7 = 0LL;
  }

  switch(v6)
  {
    case 1:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      goto LABEL_16;
    case 2:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8LL * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }

  unsigned int v9 = 0LL;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Wz", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

uint64_t *anonymous namespace'::Remangler::mangleGlobalVariableOnceDeclList@<X0>( uint64_t *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  uint64_t v5 = (uint64_t)this;
  unsigned int v7 = *((unsigned __int8 *)a2 + 18);
  if (v7 == 1) {
    goto LABEL_6;
  }
  if (v7 != 5)
  {
    if (v7 != 2) {
      goto LABEL_36;
    }
    goto LABEL_6;
  }

  unsigned int v7 = *((_DWORD *)a2 + 2);
  if (v7)
  {
LABEL_6:
    unint64_t v8 = 0LL;
    uint64_t v9 = (a3 + 1);
    uint64_t v10 = v7;
    uint64_t v29 = a4;
    uint64_t v30 = v7;
    while (1)
    {
      unint64_t v12 = *((unsigned __int8 *)v4 + 18);
      unsigned int v13 = v12 - 1;
      if ((_DWORD)v12 == 1) {
        goto LABEL_14;
      }
      if ((_DWORD)v12 != 5) {
        break;
      }
      if (*((unsigned int *)v4 + 2) <= v8)
      {
LABEL_19:
        unsigned int v15 = 0LL;
        goto LABEL_20;
      }

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleCanonicalPrespecializedGenericTypeCachingOnceToken@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append( (char **)v4 + 1591,  "Mz",  2uLL,  *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0LL;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 114;
      int v7 = 10;
      goto LABEL_8;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append( (char **)v4 + 1591,  "Mz",  2uLL,  *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0LL;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleAutoDiffSelfReorderingReabstractionThunk@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  int v4 = a2;
  int v7 = *((unsigned __int8 *)a2 + 18);
  if ((v7 - 1) >= 2)
  {
    if (v7 == 5) {
      int v4 = *(swift::Demangle::__runtime::Node **)a2;
    }
    else {
      int v4 = 0LL;
    }
  }

  unsigned int v8 = a3 + 1;
  if (!*(_DWORD *)a4)
  {
    if (!*(_DWORD *)a4)
    {
      unint64_t v11 = (swift::Demangle::__runtime::Node **)((char *)v4 + 16);
      uint64_t v10 = *((void *)v4 + 2);
      if (*(_WORD *)(v10 + 16) == 43)
      {
        if (*(_DWORD *)a4) {
          return result;
        }
        unint64_t v11 = (swift::Demangle::__runtime::Node **)((char *)v4 + 24);
      }

      swift::Demangle::__runtime::CharVector::append(this + 1591, "TJO", 3uLL, this[1593]);
    }
  }

  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleAutoDiffSubsetParametersThunk@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7 = *((unsigned __int8 *)a2 + 18);
  unsigned int v8 = a2;
  if ((v7 - 1) >= 2)
  {
    if (v7 == 5) {
      unsigned int v8 = (swift::Demangle::__runtime::Node **)*a2;
    }
    else {
      unsigned int v8 = 0LL;
    }
  }

  unsigned int v9 = a3 + 1;
  while (1)
  {
    int v10 = *((unsigned __int8 *)a2 + 18);
    if (v10 != 5) {
      break;
    }
LABEL_16:
    unsigned int v13 = *v8;
    if (*((_WORD *)*v8 + 8) == 321) {
      goto LABEL_19;
    }
    ++v8;
    if (*(_DWORD *)a4) {
      return result;
    }
  }

  if (v10 == 1) {
    unint64_t v11 = a2 + 1;
  }
  else {
    unint64_t v11 = 0LL;
  }
  if (v10 == 2) {
    unint64_t v12 = a2 + 2;
  }
  else {
    unint64_t v12 = v11;
  }
  if (v8 != v12) {
    goto LABEL_16;
  }
LABEL_19:
  unsigned int v15 = this + 1591;
  swift::Demangle::__runtime::CharVector::append(this + 1591, "TJS", 3uLL, this[1593]);
  if (!*(_DWORD *)a4)
  {
    if (!*(_DWORD *)a4)
    {
      unsigned int v16 = *((_DWORD *)this + 3184);
      size_t v17 = *((unsigned int *)this + 3185);
      size_t v18 = this[1591];
      if (v16 >= v17)
      {
        int v19 = this[1593];
        unint64_t v20 = (char *)*((void *)v19 + 1);
        if (&v18[v17] != v20)
        {
          unint64_t v21 = *((void *)v19 + 2);
          goto LABEL_25;
        }

        unint64_t v22 = (unint64_t)&v18[v17 + 1];
        unint64_t v21 = *((void *)v19 + 2);
        if (v22 <= v21)
        {
          *((void *)v19 + 1) = v22;
          int v29 = 1;
        }

        else
        {
LABEL_25:
          LODWORD(v23) = 2 * v17;
          else {
            uint64_t v23 = v23;
          }
          int v56 = v23;
          size_t v24 = v23 + v17;
          if (!v20 || (unint64_t)&v20[v24] > v21)
          {
            unint64_t v25 = 2LL * *((void *)v19 + 4);
            if (v25 <= v24 + 1) {
              unint64_t v25 = v24 + 1;
            }
            *((void *)v19 + 4) = v25;
            unint64_t v26 = v25 + 8;
            unint64_t v27 = malloc(v25 + 8);
            int v28 = (char *)v27 + v26;
            *unint64_t v27 = *((void *)v19 + 3);
            unint64_t v20 = (char *)(v27 + 1);
            *((void *)v19 + 2) = v28;
            *((void *)v19 + 3) = v27;
          }

          *((void *)v19 + 1) = &v20[v24];
          if ((_DWORD)v17)
          {
            memcpy(v20, this[1591], v17);
            LODWORD(v17) = *((_DWORD *)this + 3185);
            unsigned int v16 = *((_DWORD *)this + 3184);
          }

          int v29 = v56;
          *unsigned int v15 = v20;
          size_t v18 = v20;
        }

        *((_DWORD *)this + 3185) = v17 + v29;
      }

      *((_DWORD *)this + 3184) = v16 + 1;
      v18[v16] = 112;
      if (!*(_DWORD *)a4)
      {
        unsigned int v30 = *((_DWORD *)this + 3184);
        size_t v31 = *((unsigned int *)this + 3185);
        unsigned int v32 = this[1591];
        if (v30 >= v31)
        {
          unint64_t v33 = this[1593];
          uint64_t v34 = (char *)*((void *)v33 + 1);
          if (&v32[v31] != v34)
          {
            unint64_t v35 = *((void *)v33 + 2);
            goto LABEL_43;
          }

          unint64_t v36 = (unint64_t)&v32[v31 + 1];
          unint64_t v35 = *((void *)v33 + 2);
          if (v36 <= v35)
          {
            *((void *)v33 + 1) = v36;
            int v43 = 1;
          }

          else
          {
LABEL_43:
            LODWORD(v37) = 2 * v31;
            else {
              uint64_t v37 = v37;
            }
            int v57 = v37;
            size_t v38 = v37 + v31;
            if (!v34 || (unint64_t)&v34[v38] > v35)
            {
              unint64_t v39 = 2LL * *((void *)v33 + 4);
              if (v39 <= v38 + 1) {
                unint64_t v39 = v38 + 1;
              }
              *((void *)v33 + 4) = v39;
              unint64_t v40 = v39 + 8;
              size_t v41 = malloc(v39 + 8);
              unint64_t v42 = (char *)v41 + v40;
              void *v41 = *((void *)v33 + 3);
              uint64_t v34 = (char *)(v41 + 1);
              *((void *)v33 + 2) = v42;
              *((void *)v33 + 3) = v41;
            }

            *((void *)v33 + 1) = &v34[v38];
            if ((_DWORD)v31)
            {
              memcpy(v34, this[1591], v31);
              LODWORD(v31) = *((_DWORD *)this + 3185);
              unsigned int v30 = *((_DWORD *)this + 3184);
            }

            int v43 = v57;
            *unsigned int v15 = v34;
            unsigned int v32 = v34;
          }

          *((_DWORD *)this + 3185) = v31 + v43;
        }

        *((_DWORD *)this + 3184) = v30 + 1;
        v32[v30] = 114;
        if (!*(_DWORD *)a4)
        {
          unsigned int v44 = *((_DWORD *)this + 3184);
          size_t v45 = *((unsigned int *)this + 3185);
          unint64_t v46 = this[1591];
          if (v44 >= v45)
          {
            unint64_t v47 = this[1593];
            int v48 = (char *)*((void *)v47 + 1);
            if (&v46[v45] != v48)
            {
              unint64_t v49 = *((void *)v47 + 2);
              goto LABEL_61;
            }

            unint64_t v50 = (unint64_t)&v46[v45 + 1];
            unint64_t v49 = *((void *)v47 + 2);
            if (v50 <= v49)
            {
              *((void *)v47 + 1) = v50;
              LODWORD(v51) = 1;
            }

            else
            {
LABEL_61:
              else {
                uint64_t v51 = (2 * v45);
              }
              size_t v52 = v51 + v45;
              if (!v48 || (unint64_t)&v48[v52] > v49)
              {
                unint64_t v53 = 2LL * *((void *)v47 + 4);
                if (v53 <= v52 + 1) {
                  unint64_t v53 = v52 + 1;
                }
                *((void *)v47 + 4) = v53;
                unint64_t v54 = v53 + 8;
                uint64_t result = (uint64_t *)malloc(v53 + 8);
                __int128 v55 = (char *)result + v54;
                *uint64_t result = *((void *)v47 + 3);
                int v48 = (char *)(result + 1);
                *((void *)v47 + 2) = v55;
                *((void *)v47 + 3) = result;
              }

              *((void *)v47 + 1) = &v48[v52];
              if ((_DWORD)v45)
              {
                uint64_t result = (uint64_t *)memcpy(v48, this[1591], v45);
                LODWORD(v45) = *((_DWORD *)this + 3185);
                unsigned int v44 = *((_DWORD *)this + 3184);
              }

              *unsigned int v15 = v48;
              unint64_t v46 = v48;
            }

            *((_DWORD *)this + 3185) = v45 + v51;
          }

          *((_DWORD *)this + 3184) = v44 + 1;
          v46[v44] = 80;
          *(_DWORD *)a4 = 0;
          *(void *)(a4 + 8) = 0LL;
          *(_DWORD *)(a4 + 16) = 0;
        }
      }
    }
  }

  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleDifferentiabilityWitness@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  int v7 = *((unsigned __int8 *)a2 + 18);
  unsigned int v8 = a2;
  if ((v7 - 1) >= 2)
  {
    if (v7 == 5) {
      unsigned int v8 = *(swift::Demangle::__runtime::Node **)a2;
    }
    else {
      unsigned int v8 = 0LL;
    }
  }

  unsigned int v9 = (unsigned int *)((char *)a2 + 8);
  unsigned int v10 = a3 + 1;
  while (1)
  {
    int v11 = *((unsigned __int8 *)v4 + 18);
    if (v11 != 5) {
      break;
    }
LABEL_15:
    unsigned int v13 = *(swift::Demangle::__runtime::Node **)v8;
    if (*(_WORD *)(*(void *)v8 + 16LL) == 102) {
      goto LABEL_18;
    }
    unsigned int v8 = (swift::Demangle::__runtime::Node *)((char *)v8 + 8);
    if (*(_DWORD *)a4) {
      return result;
    }
  }

  if (v11 == 1) {
    unint64_t v12 = (swift::Demangle::__runtime::Node *)((char *)v4 + 8);
  }
  else {
    unint64_t v12 = 0LL;
  }
  if (v11 == 2) {
    unint64_t v12 = (swift::Demangle::__runtime::Node *)((char *)v4 + 16);
  }
  if (v8 != v12) {
    goto LABEL_15;
  }
LABEL_18:
  if (v11 == 1)
  {
    uint64_t v15 = 0LL;
  }

  else
  {
    if (v11 == 5)
    {
      uint64_t v15 = *((unsigned int *)v4 + 2) - 1LL;
      unsigned int v16 = *(swift::Demangle::__runtime::Node **)v4;
      goto LABEL_24;
    }

    uint64_t v15 = 1LL;
  }

  unsigned int v16 = v4;
LABEL_24:
  if (*(_WORD *)(*((void *)v16 + v15) + 16LL) != 43) {
    goto LABEL_34;
  }
  if (v11 == 1)
  {
    uint64_t v18 = 0LL;
    goto LABEL_32;
  }

  if (v11 == 5)
  {
    uint64_t v19 = *v9;
    if (!(_DWORD)v19)
    {
      size_t v17 = 0LL;
      goto LABEL_33;
    }

    uint64_t v18 = v19 - 1;
    int v4 = *(swift::Demangle::__runtime::Node **)v4;
LABEL_32:
    size_t v17 = (swift::Demangle::__runtime::Node *)*((void *)v4 + v18);
    goto LABEL_33;
  }

  size_t v17 = 0LL;
  if (v11 == 2)
  {
    uint64_t v18 = 1LL;
    goto LABEL_32;
  }

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleNoDerivative@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append( (char **)v4 + 1591,  "Yk",  2uLL,  *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0LL;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleAsyncAwaitResumePartialFunction@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "TQ", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if ((v9 - 1) < 2) {
  if (v9 == 5 && *((_DWORD *)a2 + 2))
  }
  {
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0LL;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleAsyncSuspendResumePartialFunction@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "TY", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if ((v9 - 1) < 2) {
  if (v9 == 5 && *((_DWORD *)a2 + 2))
  }
  {
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0LL;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleCompileTimeConst@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append( (char **)v4 + 1591,  "Yt",  2uLL,  *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0LL;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleExtendedExistentialTypeShape@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7 = *((unsigned __int8 *)a2 + 18);
  if (v7 == 1) {
    goto LABEL_7;
  }
  int v8 = (swift::Demangle::__runtime::Node **)a2;
  if (v7 == 2) {
    goto LABEL_11;
  }
  if (v7 == 5)
  {
    int v9 = *((_DWORD *)a2 + 2);
    if (!v9)
    {
      unsigned int v10 = 0LL;
      goto LABEL_16;
    }

    if (v9 == 1)
    {
      a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_7:
      unsigned int v10 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_16:
      unint64_t v12 = "Xg";
      goto LABEL_17;
    }

    int v8 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_11:
    int v11 = *v8;
    if (v7 == 2) {
      goto LABEL_15;
    }
    goto LABEL_12;
  }

  int v11 = 0LL;
LABEL_12:
  if (v7 != 5 || *((_DWORD *)a2 + 2) < 2u)
  {
    unsigned int v10 = 0LL;
    if (!v11) {
      goto LABEL_16;
    }
    goto LABEL_20;
  }

  a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_15:
  unsigned int v10 = (swift::Demangle::__runtime::Node *)*((void *)a2 + 1);
  if (!v11) {
    goto LABEL_16;
  }
LABEL_20:
  if (*(_DWORD *)a4) {
    return result;
  }
  unint64_t v12 = "XG";
LABEL_17:
  if (!*(_DWORD *)a4)
  {
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, v12, 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
  }

  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleUniquable@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    int v7 = *a2;
    goto LABEL_7;
  }

  int v7 = 0LL;
LABEL_7:
  if (!*(_DWORD *)a4)
  {
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Mq", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
  }

  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleSymbolicExtendedExistentialType@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7 = *((unsigned __int8 *)a2 + 18);
  int v8 = a2;
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    int v8 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    int v9 = *v8;
    goto LABEL_7;
  }

  int v9 = 0LL;
LABEL_7:
  unsigned int v10 = a3 + 1;
  if (*(_DWORD *)a4) {
    return result;
  }
  int v12 = *((unsigned __int8 *)a2 + 18);
  unsigned int v13 = (swift::Demangle::__runtime::Node *)a2;
  if (v12 == 2) {
    goto LABEL_12;
  }
  if (v12 == 5 && *((_DWORD *)a2 + 2) >= 2u)
  {
    unsigned int v13 = *a2;
LABEL_12:
    uint64_t v14 = *((void *)v13 + 1);
    goto LABEL_14;
  }

  uint64_t v14 = 0LL;
LABEL_14:
  int v15 = *(unsigned __int8 *)(v14 + 18);
  unsigned int v16 = (swift::Demangle::__runtime::Node **)v14;
  if ((v15 - 1) >= 2)
  {
    if (v15 == 5)
    {
      size_t v17 = *(swift::Demangle::__runtime::Node **)v14;
      unsigned int v16 = *(swift::Demangle::__runtime::Node ***)v14;
      goto LABEL_22;
    }

    unsigned int v16 = 0LL;
  }

  switch(v15)
  {
    case 1:
      uint64_t v18 = (swift::Demangle::__runtime::Node **)(v14 + 8);
      if (v16 != (swift::Demangle::__runtime::Node **)(v14 + 8)) {
        goto LABEL_30;
      }
      goto LABEL_27;
    case 2:
      uint64_t v18 = (swift::Demangle::__runtime::Node **)(v14 + 16);
      if (v16 != (swift::Demangle::__runtime::Node **)(v14 + 16)) {
        goto LABEL_30;
      }
LABEL_27:
      if (v12 == 5) {
        goto LABEL_33;
      }
      goto LABEL_49;
    case 5:
      size_t v17 = *(swift::Demangle::__runtime::Node **)v14;
LABEL_22:
      uint64_t v18 = (swift::Demangle::__runtime::Node **)((char *)v17 + 8 * *(unsigned int *)(v14 + 8));
      if (v16 != v18) {
        goto LABEL_30;
      }
      goto LABEL_27;
  }

  uint64_t v18 = 0LL;
  if (!v16) {
    goto LABEL_27;
  }
  do
  {
LABEL_30:
    if (*(_DWORD *)a4) {
      return result;
    }
    ++v16;
  }

  while (v16 != v18);
  if (*((_BYTE *)a2 + 18) == 5)
  {
LABEL_33:
    if (*((_DWORD *)a2 + 2) >= 3u)
    {
      uint64_t v19 = *((void *)*a2 + 2);
      int v20 = *(unsigned __int8 *)(v19 + 18);
      char v21 = (swift::Demangle::__runtime::Node **)v19;
      if ((v20 - 1) >= 2)
      {
        if (v20 == 5)
        {
          unsigned int v22 = *(swift::Demangle::__runtime::Node **)v19;
          char v21 = *(swift::Demangle::__runtime::Node ***)v19;
LABEL_42:
          size_t v23 = (swift::Demangle::__runtime::Node **)((char *)v22 + 8 * *(unsigned int *)(v19 + 8));
          goto LABEL_48;
        }

        char v21 = 0LL;
      }

      switch(v20)
      {
        case 1:
          size_t v23 = (swift::Demangle::__runtime::Node **)(v19 + 8);
          goto LABEL_48;
        case 2:
          size_t v23 = (swift::Demangle::__runtime::Node **)(v19 + 16);
          goto LABEL_48;
        case 5:
          unsigned int v22 = *(swift::Demangle::__runtime::Node **)v19;
          goto LABEL_42;
      }

      size_t v23 = 0LL;
LABEL_48:
      while (v21 != v23)
      {
        if (*(_DWORD *)a4) {
          return result;
        }
        ++v21;
      }
    }
  }

unsigned int *anonymous namespace'::Remangler::mangleMetatypeParamsRemoved@<X0>( unsigned int *this@<X0>, uint64_t a2@<X8>)
{
  int v3 = this;
  unsigned int v5 = this[3184];
  size_t v6 = this[3185];
  int v7 = (char *)*((void *)this + 1591);
  if (v5 >= v6)
  {
    int v8 = (void *)*((void *)this + 1593);
    int v9 = (char *)v8[1];
    if (&v7[v6] == v9)
    {
      unint64_t v11 = (unint64_t)&v7[v6 + 1];
      unint64_t v10 = v8[2];
      if (v11 <= v10)
      {
        v8[1] = v11;
        LODWORD(v12) = 1;
LABEL_20:
        v3[3185] = v6 + v12;
        goto LABEL_21;
      }
    }

    else
    {
      unint64_t v10 = v8[2];
    }

    else {
      uint64_t v12 = (2 * v6);
    }
    size_t v13 = v12 + v6;
    if (v9) {
      BOOL v14 = (unint64_t)&v9[v12 + v6] > v10;
    }
    else {
      BOOL v14 = 1;
    }
    int v7 = (char *)v8[1];
    if (v14)
    {
      unint64_t v15 = 2LL * v8[4];
      if (v15 <= v13 + 1) {
        unint64_t v15 = v13 + 1;
      }
      v8[4] = v15;
      unint64_t v16 = v15 + 8;
      this = (unsigned int *)malloc(v15 + 8);
      size_t v17 = (char *)this + v16;
      *(void *)this = v8[3];
      int v7 = (char *)(this + 2);
      void v8[2] = v17;
      void v8[3] = this;
    }

    v8[1] = &v7[v13];
    if ((_DWORD)v6)
    {
      this = (unsigned int *)memcpy(v7, *((const void **)v3 + 1591), v6);
      LODWORD(v6) = v3[3185];
      unsigned int v5 = v3[3184];
    }

    *((void *)v3 + 1591) = v7;
    goto LABEL_20;
  }

uint64_t *anonymous namespace'::Remangler::mangleOutlinedEnumTagStore@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  int v7 = *((unsigned __int8 *)a2 + 18);
  int v8 = (swift::Demangle::__runtime::Node **)a2;
  if (v7 != 1)
  {
    int v9 = (swift::Demangle::__runtime::Node **)a2;
    if (v7 == 2)
    {
LABEL_7:
      if (*(_DWORD *)a4) {
        return result;
      }
      swift::Demangle::__runtime::CharVector::append(this + 1591, "WOi", 3uLL, this[1593]);
      if (*((_BYTE *)v4 + 18) == 5) {
        int v4 = *(swift::Demangle::__runtime::Node **)v4;
      }
      uint64_t v12 = (uint64_t **)((char *)v4 + 8);
      goto LABEL_23;
    }

    if (v7 != 5 || (int v10 = *((_DWORD *)a2 + 2)) == 0)
    {
      size_t v13 = 0LL;
      goto LABEL_14;
    }

    if (v10 == 2)
    {
      int v9 = *(swift::Demangle::__runtime::Node ***)a2;
      goto LABEL_7;
    }

    int v8 = *(swift::Demangle::__runtime::Node ***)a2;
  }

  size_t v13 = *v8;
LABEL_14:
  unsigned int v14 = a3 + 1;
  if (*(_DWORD *)a4) {
    return result;
  }
  int v15 = *((unsigned __int8 *)v4 + 18);
  unint64_t v16 = v4;
  if (v15 != 2)
  {
    if (v15 != 5 || *((_DWORD *)v4 + 2) < 2u)
    {
      size_t v17 = 0LL;
      goto LABEL_21;
    }

    unint64_t v16 = *(swift::Demangle::__runtime::Node **)v4;
  }

  size_t v17 = (swift::Demangle::__runtime::Node *)*((void *)v16 + 1);
LABEL_21:
  if (*(_DWORD *)a4) {
    return result;
  }
  swift::Demangle::__runtime::CharVector::append(this + 1591, "WOi", 3uLL, this[1593]);
  uint64_t v12 = (uint64_t **)(*(void *)v4 + 16LL);
LABEL_23:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0LL;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleOutlinedEnumProjectDataForLoad@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  int v7 = *((unsigned __int8 *)a2 + 18);
  int v8 = (swift::Demangle::__runtime::Node **)a2;
  if (v7 != 1)
  {
    int v9 = (swift::Demangle::__runtime::Node **)a2;
    if (v7 == 2)
    {
LABEL_7:
      if (*(_DWORD *)a4) {
        return result;
      }
      swift::Demangle::__runtime::CharVector::append(this + 1591, "WOj", 3uLL, this[1593]);
      if (*((_BYTE *)v4 + 18) == 5) {
        int v4 = *(swift::Demangle::__runtime::Node **)v4;
      }
      uint64_t v12 = (uint64_t **)((char *)v4 + 8);
      goto LABEL_23;
    }

    if (v7 != 5 || (int v10 = *((_DWORD *)a2 + 2)) == 0)
    {
      size_t v13 = 0LL;
      goto LABEL_14;
    }

    if (v10 == 2)
    {
      int v9 = *(swift::Demangle::__runtime::Node ***)a2;
      goto LABEL_7;
    }

    int v8 = *(swift::Demangle::__runtime::Node ***)a2;
  }

  size_t v13 = *v8;
LABEL_14:
  unsigned int v14 = a3 + 1;
  if (*(_DWORD *)a4) {
    return result;
  }
  int v15 = *((unsigned __int8 *)v4 + 18);
  unint64_t v16 = v4;
  if (v15 != 2)
  {
    if (v15 != 5 || *((_DWORD *)v4 + 2) < 2u)
    {
      size_t v17 = 0LL;
      goto LABEL_21;
    }

    unint64_t v16 = *(swift::Demangle::__runtime::Node **)v4;
  }

  size_t v17 = (swift::Demangle::__runtime::Node *)*((void *)v16 + 1);
LABEL_21:
  if (*(_DWORD *)a4) {
    return result;
  }
  swift::Demangle::__runtime::CharVector::append(this + 1591, "WOj", 3uLL, this[1593]);
  uint64_t v12 = (uint64_t **)(*(void *)v4 + 16LL);
LABEL_23:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0LL;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleOutlinedEnumGetTag@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }

    int v7 = 0LL;
  }

  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8LL * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }

  int v9 = 0LL;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "WOg", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

unsigned int *anonymous namespace'::Remangler::mangleAsyncRemoved@<X0>( unsigned int *this@<X0>, uint64_t a2@<X8>)
{
  int v3 = this;
  unsigned int v5 = this[3184];
  size_t v6 = this[3185];
  int v7 = (char *)*((void *)this + 1591);
  if (v5 >= v6)
  {
    uint64_t v8 = (void *)*((void *)this + 1593);
    int v9 = (char *)v8[1];
    if (&v7[v6] == v9)
    {
      unint64_t v11 = (unint64_t)&v7[v6 + 1];
      unint64_t v10 = v8[2];
      if (v11 <= v10)
      {
        v8[1] = v11;
        LODWORD(v12) = 1;
LABEL_20:
        v3[3185] = v6 + v12;
        goto LABEL_21;
      }
    }

    else
    {
      unint64_t v10 = v8[2];
    }

    else {
      uint64_t v12 = (2 * v6);
    }
    size_t v13 = v12 + v6;
    if (v9) {
      BOOL v14 = (unint64_t)&v9[v12 + v6] > v10;
    }
    else {
      BOOL v14 = 1;
    }
    int v7 = (char *)v8[1];
    if (v14)
    {
      unint64_t v15 = 2LL * v8[4];
      if (v15 <= v13 + 1) {
        unint64_t v15 = v13 + 1;
      }
      v8[4] = v15;
      unint64_t v16 = v15 + 8;
      this = (unsigned int *)malloc(v15 + 8);
      size_t v17 = (char *)this + v16;
      *(void *)this = v8[3];
      int v7 = (char *)(this + 2);
      void v8[2] = v17;
      void v8[3] = this;
    }

    v8[1] = &v7[v13];
    if ((_DWORD)v6)
    {
      this = (unsigned int *)memcpy(v7, *((const void **)v3 + 1591), v6);
      LODWORD(v6) = v3[3185];
      unsigned int v5 = v3[3184];
    }

    *((void *)v3 + 1591) = v7;
    goto LABEL_20;
  }

uint64_t *anonymous namespace'::Remangler::mangleParamLifetimeDependence@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  int v7 = *((unsigned __int8 *)a2 + 18);
  uint64_t v8 = a2;
  if (v7 != 2)
  {
    if (v7 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0LL;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }

    uint64_t v8 = *(swift::Demangle::__runtime::Node **)a2;
  }

  if (*(_DWORD *)a4) {
    return result;
  }
LABEL_8:
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Yl", 2uLL, this[1593]);
  char v10 = **(_BYTE **)v4;
  unsigned int v11 = *((_DWORD *)this + 3184);
  size_t v12 = *((unsigned int *)this + 3185);
  size_t v13 = this[1591];
  BOOL v14 = this[1593];
  unint64_t v15 = (char *)*((void *)v14 + 1);
  if (&v13[v12] != v15)
  {
    unint64_t v16 = *((void *)v14 + 2);
LABEL_14:
    else {
      uint64_t v18 = (2 * v12);
    }
    size_t v19 = v18 + v12;
    if (!v15 || (unint64_t)&v15[v19] > v16)
    {
      unint64_t v20 = 2LL * *((void *)v14 + 4);
      if (v20 <= v19 + 1) {
        unint64_t v20 = v19 + 1;
      }
      *((void *)v14 + 4) = v20;
      unint64_t v21 = v20 + 8;
      uint64_t result = (uint64_t *)malloc(v20 + 8);
      unsigned int v22 = (char *)result + v21;
      *uint64_t result = *((void *)v14 + 3);
      unint64_t v15 = (char *)(result + 1);
      *((void *)v14 + 2) = v22;
      *((void *)v14 + 3) = result;
    }

    *((void *)v14 + 1) = &v15[v19];
    if ((_DWORD)v12)
    {
      uint64_t result = (uint64_t *)memcpy(v15, this[1591], v12);
      LODWORD(v12) = *((_DWORD *)this + 3185);
      unsigned int v11 = *((_DWORD *)this + 3184);
    }

    this[1591] = v15;
    size_t v13 = v15;
    goto LABEL_26;
  }

  unint64_t v17 = (unint64_t)&v13[v12 + 1];
  unint64_t v16 = *((void *)v14 + 2);
  if (v17 > v16) {
    goto LABEL_14;
  }
  *((void *)v14 + 1) = v17;
  LODWORD(v18) = 1;
LABEL_26:
  *((_DWORD *)this + 3185) = v12 + v18;
LABEL_27:
  *((_DWORD *)this + 3184) = v11 + 1;
  v13[v11] = v10;
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0LL;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

void *anonymous namespace'::Remangler::mangleSelfLifetimeDependence@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  size_t v6 = this + 1591;
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "YL", 2uLL, this[1593]);
  uint64_t v8 = *(void *)a2;
  unsigned int v9 = *((_DWORD *)this + 3184);
  size_t v10 = *((unsigned int *)this + 3185);
  unsigned int v11 = this[1591];
  if (v9 >= v10)
  {
    size_t v12 = this[1593];
    size_t v13 = (char *)*((void *)v12 + 1);
    if (&v11[v10] == v13)
    {
      unint64_t v15 = (unint64_t)&v11[v10 + 1];
      unint64_t v14 = *((void *)v12 + 2);
      if (v15 <= v14)
      {
        *((void *)v12 + 1) = v15;
        LODWORD(v16) = 1;
LABEL_20:
        *((_DWORD *)this + 3185) = v10 + v16;
        goto LABEL_21;
      }
    }

    else
    {
      unint64_t v14 = *((void *)v12 + 2);
    }

    else {
      uint64_t v16 = (2 * v10);
    }
    size_t v17 = v16 + v10;
    if (v13) {
      BOOL v18 = (unint64_t)&v13[v16 + v10] > v14;
    }
    else {
      BOOL v18 = 1;
    }
    unsigned int v11 = (char *)*((void *)v12 + 1);
    if (v18)
    {
      unint64_t v19 = 2LL * *((void *)v12 + 4);
      if (v19 <= v17 + 1) {
        unint64_t v19 = v17 + 1;
      }
      *((void *)v12 + 4) = v19;
      unint64_t v20 = v19 + 8;
      uint64_t result = malloc(v19 + 8);
      unint64_t v21 = (char *)result + v20;
      *uint64_t result = *((void *)v12 + 3);
      unsigned int v11 = (char *)(result + 1);
      *((void *)v12 + 2) = v21;
      *((void *)v12 + 3) = result;
    }

    *((void *)v12 + 1) = &v11[v17];
    if ((_DWORD)v10)
    {
      uint64_t result = memcpy(v11, this[1591], v10);
      LODWORD(v10) = *((_DWORD *)this + 3185);
      unsigned int v9 = *((_DWORD *)this + 3184);
    }

    *size_t v6 = v11;
    goto LABEL_20;
  }

uint64_t *anonymous namespace'::Remangler::mangleOutlinedInitializeWithCopyNoValueWitness@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }

    int v7 = 0LL;
  }

  switch(v6)
  {
    case 1:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      goto LABEL_16;
    case 2:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8LL * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }

  unsigned int v9 = 0LL;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "WOC", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

uint64_t *anonymous namespace'::Remangler::mangleOutlinedAssignWithTakeNoValueWitness@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }

    int v7 = 0LL;
  }

  switch(v6)
  {
    case 1:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      goto LABEL_16;
    case 2:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8LL * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }

  unsigned int v9 = 0LL;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "WOD", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

uint64_t *anonymous namespace'::Remangler::mangleOutlinedAssignWithCopyNoValueWitness@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }

    int v7 = 0LL;
  }

  switch(v6)
  {
    case 1:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      goto LABEL_16;
    case 2:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8LL * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }

  unsigned int v9 = 0LL;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "WOF", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

uint64_t *anonymous namespace'::Remangler::mangleOutlinedDestroyNoValueWitness@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }

    int v7 = 0LL;
  }

  switch(v6)
  {
    case 1:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      goto LABEL_16;
    case 2:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8LL * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }

  unsigned int v9 = 0LL;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "WOH", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleDependentGenericInverseConformanceRequirement@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  uint64_t v5 = (uint64_t)this;
  int v7 = *((unsigned __int8 *)a2 + 18);
  if (v7 == 2)
  {
    uint64_t v8 = (swift::Demangle::__runtime::Node **)a2;
  }

  else
  {
    if (v7 != 5 || *((_DWORD *)a2 + 2) != 2)
    {
      *(_DWORD *)a4 = 1;
      *(void *)(a4 + 8) = a2;
      *(_DWORD *)(a4 + 16) = 1103;
      return this;
    }

    uint64_t v8 = *(swift::Demangle::__runtime::Node ***)a2;
  }

  if ((_DWORD)v11)
  {
    *(_OWORD *)a4 = v11;
    *(void *)(a4 + 16) = v12;
    return this;
  }

  unsigned int v9 = v14;
  if ((v13 & 0x80000000) == 0 && !v14)
  {
    *(_DWORD *)a4 = 1;
    *(void *)(a4 + 8) = v4;
    *(_DWORD *)(a4 + 16) = 1112;
    return this;
  }

  if (v13 == 1)
  {
    unsigned int v10 = "Rj";
LABEL_21:
    swift::Demangle::__runtime::CharVector::append((char **)(v5 + 12728), v10, 2uLL, *(void **)(v5 + 12744));
    if (*((_BYTE *)v4 + 18) == 5) {
      int v4 = *(swift::Demangle::__runtime::Node **)v4;
    }
    goto LABEL_24;
  }

  if (!v13)
  {
    unsigned int v10 = "Ri";
    goto LABEL_21;
  }

  if (v13 != -1)
  {
    unsigned int v10 = "RJ";
    goto LABEL_21;
  }

  swift::Demangle::__runtime::CharVector::append((char **)(v5 + 12728), "RI", 2uLL, *(void **)(v5 + 12744));
  if (*((_BYTE *)v4 + 18) == 5) {
    int v4 = *(swift::Demangle::__runtime::Node **)v4;
  }
LABEL_24:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0LL;
  *(_DWORD *)(a4 + 16) = 0;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleAnyConstructor@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, char a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v8 = *((unsigned __int8 *)a2 + 18);
  unsigned int v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 == 5)
    {
      uint64_t v10 = *(void *)a2;
      unsigned int v9 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }

    unsigned int v9 = 0LL;
  }

  if (v8 == 1)
  {
    __int128 v11 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
    goto LABEL_19;
  }

  if (v8 == 2)
  {
    __int128 v11 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
LABEL_19:
    *(_DWORD *)a5 = 0;
    *(void *)(a5 + 8) = 0LL;
    *(_DWORD *)(a5 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "f", 1uLL, this[1593]);
    unsigned int v14 = *((_DWORD *)this + 3184);
    size_t v15 = *((unsigned int *)this + 3185);
    uint64_t v16 = this[1591];
    if (v14 < v15)
    {
LABEL_36:
      *((_DWORD *)this + 3184) = v14 + 1;
      v16[v14] = a3;
      *(_DWORD *)a5 = 0;
      *(void *)(a5 + 8) = 0LL;
      *(_DWORD *)(a5 + 16) = 0;
      return result;
    }

    size_t v17 = this[1593];
    BOOL v18 = (char *)*((void *)v17 + 1);
    if (&v16[v15] == v18)
    {
      unint64_t v20 = (unint64_t)&v16[v15 + 1];
      unint64_t v19 = *((void *)v17 + 2);
      if (v20 <= v19)
      {
        *((void *)v17 + 1) = v20;
        LODWORD(v21) = 1;
LABEL_35:
        *((_DWORD *)this + 3185) = v15 + v21;
        goto LABEL_36;
      }
    }

    else
    {
      unint64_t v19 = *((void *)v17 + 2);
    }

    else {
      uint64_t v21 = (2 * v15);
    }
    size_t v22 = v21 + v15;
    if (!v18 || (unint64_t)&v18[v22] > v19)
    {
      unint64_t v23 = 2LL * *((void *)v17 + 4);
      if (v23 <= v22 + 1) {
        unint64_t v23 = v22 + 1;
      }
      *((void *)v17 + 4) = v23;
      unint64_t v24 = v23 + 8;
      uint64_t result = (uint64_t *)malloc(v23 + 8);
      unint64_t v25 = (char *)result + v24;
      *uint64_t result = *((void *)v17 + 3);
      BOOL v18 = (char *)(result + 1);
      *((void *)v17 + 2) = v25;
      *((void *)v17 + 3) = result;
    }

    *((void *)v17 + 1) = &v18[v22];
    if ((_DWORD)v15)
    {
      uint64_t result = (uint64_t *)memcpy(v18, this[1591], v15);
      LODWORD(v15) = *((_DWORD *)this + 3185);
      unsigned int v14 = *((_DWORD *)this + 3184);
    }

    this[1591] = v18;
    uint64_t v16 = v18;
    goto LABEL_35;
  }

  if (v8 != 5)
  {
    __int128 v11 = 0LL;
    if (!v9) {
      goto LABEL_19;
    }
    goto LABEL_16;
  }

  uint64_t v10 = *(void *)a2;
LABEL_9:
  __int128 v11 = (swift::Demangle::__runtime::Node *)(v10 + 8LL * *((unsigned int *)a2 + 2));
  if (v9 == v11) {
    goto LABEL_19;
  }
LABEL_16:
  unsigned int v12 = a4 + 1;
  while (1)
  {
    if (*(_DWORD *)a5) {
      return result;
    }
    unsigned int v9 = (swift::Demangle::__runtime::Node *)((char *)v9 + 8);
    if (v9 == v11) {
      goto LABEL_19;
    }
  }

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleChildNodes@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = this;
  int v7 = *((unsigned __int8 *)a2 + 18);
  int v8 = a2;
  if ((v7 - 1) >= 2)
  {
    if (v7 == 5)
    {
      unsigned int v9 = *a2;
      int v8 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_9:
      uint64_t v10 = (swift::Demangle::__runtime::Node **)((char *)v9 + 8 * *((unsigned int *)a2 + 2));
      goto LABEL_15;
    }

    int v8 = 0LL;
  }

  switch(v7)
  {
    case 1:
      uint64_t v10 = a2 + 1;
      goto LABEL_15;
    case 2:
      uint64_t v10 = a2 + 2;
      goto LABEL_15;
    case 5:
      unsigned int v9 = *a2;
      goto LABEL_9;
  }

  uint64_t v10 = 0LL;
LABEL_15:
  while (v8 != v10)
  {
    if (*(_DWORD *)a4) {
      return this;
    }
    ++v8;
  }

  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0LL;
  *(_DWORD *)(a4 + 16) = 0;
  return this;
}

{
  _anonymous_namespace_::Remangler *v5;
  int v7;
  swift::Demangle::__runtime::Node **v8;
  swift::Demangle::__runtime::Node *v9;
  swift::Demangle::__runtime::Node **v10;
  uint64_t v5 = this;
  int v7 = *((unsigned __int8 *)a2 + 18);
  int v8 = a2;
  if ((v7 - 1) >= 2)
  {
    if (v7 == 5)
    {
      unsigned int v9 = *a2;
      int v8 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_9:
      uint64_t v10 = (swift::Demangle::__runtime::Node **)((char *)v9 + 8 * *((unsigned int *)a2 + 2));
      goto LABEL_15;
    }

    int v8 = 0LL;
  }

  switch(v7)
  {
    case 1:
      uint64_t v10 = a2 + 1;
      goto LABEL_15;
    case 2:
      uint64_t v10 = a2 + 2;
      goto LABEL_15;
    case 5:
      unsigned int v9 = *a2;
      goto LABEL_9;
  }

  uint64_t v10 = 0LL;
LABEL_15:
  while (v8 != v10)
  {
    if (*(_DWORD *)a4) {
      return this;
    }
    ++v8;
  }

  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0LL;
  *(_DWORD *)(a4 + 16) = 0;
  return this;
}

char **swift::Demangle::__runtime::RemanglerBuffer::operator<<(char **a1, char a2)
{
  unsigned int v5 = *((_DWORD *)a1 + 2);
  size_t v4 = *((unsigned int *)a1 + 3);
  int v6 = *a1;
  if (v5 >= v4)
  {
    int v7 = a1[2];
    int v8 = (char *)*((void *)v7 + 1);
    if (&v6[v4] == v8)
    {
      unint64_t v10 = (unint64_t)&v6[v4 + 1];
      unint64_t v9 = *((void *)v7 + 2);
      if (v10 <= v9)
      {
        *((void *)v7 + 1) = v10;
        LODWORD(v11) = 1;
LABEL_20:
        *((_DWORD *)a1 + 3) = v4 + v11;
        goto LABEL_21;
      }
    }

    else
    {
      unint64_t v9 = *((void *)v7 + 2);
    }

    else {
      uint64_t v11 = (2 * v4);
    }
    size_t v12 = v11 + v4;
    if (v8) {
      BOOL v13 = (unint64_t)&v8[v11 + v4] > v9;
    }
    else {
      BOOL v13 = 1;
    }
    int v6 = (char *)*((void *)v7 + 1);
    if (v13)
    {
      unint64_t v14 = 2LL * *((void *)v7 + 4);
      if (v14 <= v12 + 1) {
        unint64_t v14 = v12 + 1;
      }
      *((void *)v7 + 4) = v14;
      unint64_t v15 = v14 + 8;
      uint64_t v16 = malloc(v14 + 8);
      size_t v17 = (char *)v16 + v15;
      *uint64_t v16 = *((void *)v7 + 3);
      int v6 = (char *)(v16 + 1);
      *((void *)v7 + 2) = v17;
      *((void *)v7 + 3) = v16;
    }

    *((void *)v7 + 1) = &v6[v12];
    if ((_DWORD)v4)
    {
      memcpy(v6, *a1, v4);
      unsigned int v5 = *((_DWORD *)a1 + 2);
      LODWORD(v4) = *((_DWORD *)a1 + 3);
    }

    *a1 = v6;
    goto LABEL_20;
  }

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleAnyProtocolConformance@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v5 = this;
  switch(*((_WORD *)a2 + 8))
  {
    case 0x1A:
    case 0x1B:
      int v6 = *((unsigned __int8 *)a2 + 18);
      if (v6 == 5 && *((_DWORD *)a2 + 2))
      {
        a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_7:
        int v7 = *(swift::Demangle::__runtime::Node **)a2;
      }

      else
      {
        int v7 = 0LL;
      }

      if (!*(_DWORD *)a4)
      {
        this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append( (char **)v5 + 1591,  "HX",  2uLL,  *((void **)v5 + 1593));
        goto LABEL_14;
      }

      return this;
    case 0x2F:
    case 0x30:
    case 0x31:
    default:
LABEL_14:
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0LL;
      *(_DWORD *)(a4 + 16) = 0;
      return this;
  }

unsigned int *anonymous namespace'::Remangler::mangleListSeparator(unsigned int *this, BOOL *a2)
{
  if (*a2)
  {
    int v3 = this;
    unsigned int v4 = this[3184];
    size_t v5 = this[3185];
    int v6 = (_BYTE *)*((void *)this + 1591);
    if (v4 < v5)
    {
LABEL_21:
      v3[3184] = v4 + 1;
      v6[v4] = 95;
      *a2 = 0;
      return this;
    }

    int v7 = (void *)*((void *)this + 1593);
    int v8 = (_BYTE *)v7[1];
    if (&v6[v5] == v8)
    {
      unint64_t v10 = (unint64_t)&v6[v5 + 1];
      unint64_t v9 = v7[2];
      if (v10 <= v9)
      {
        v7[1] = v10;
        LODWORD(v11) = 1;
LABEL_20:
        v3[3185] = v5 + v11;
        goto LABEL_21;
      }
    }

    else
    {
      unint64_t v9 = v7[2];
    }

    else {
      uint64_t v11 = (2 * v5);
    }
    size_t v12 = v11 + v5;
    if (v8) {
      BOOL v13 = (unint64_t)&v8[v11 + v5] > v9;
    }
    else {
      BOOL v13 = 1;
    }
    int v6 = (_BYTE *)v7[1];
    if (v13)
    {
      unint64_t v14 = 2LL * v7[4];
      if (v14 <= v12 + 1) {
        unint64_t v14 = v12 + 1;
      }
      v7[4] = v14;
      unint64_t v15 = v14 + 8;
      this = (unsigned int *)malloc(v14 + 8);
      uint64_t v16 = (char *)this + v15;
      *(void *)this = v7[3];
      int v6 = this + 2;
      v7[2] = v16;
      void v7[3] = this;
    }

    v7[1] = &v6[v12];
    if ((_DWORD)v5)
    {
      this = (unsigned int *)memcpy(v6, *((const void **)v3 + 1591), v5);
      LODWORD(__swift::__runtime::llvm::hash_value(v4, v5) = v3[3185];
      unsigned int v4 = v3[3184];
    }

    *((void *)v3 + 1591) = v6;
    goto LABEL_20;
  }

  return this;
}

uint64_t anonymous namespace'::Remangler::trySubstitution( _anonymous_namespace_::Remangler *this, swift::Demangle::__runtime::Node *a2, swift::Demangle::__runtime::SubstitutionEntry *a3, int a4)
{
    return 1LL;
  swift::Demangle::__runtime::RemanglerBase::entryForNode((uint64_t *)&__s2, this, a2, a4);
  *(_OWORD *)a3 = __s2;
  *((_BYTE *)a3 + 16) = v36;
  unsigned int Substitution = swift::Demangle::__runtime::RemanglerBase::findSubstitution( this,  (swift::Demangle::__runtime::Node **)a3);
  if ((Substitution & 0x80000000) != 0) {
    return 0LL;
  }
  uint64_t v9 = Substitution - 26;
  if (Substitution >= 0x1A)
  {
    unsigned int v10 = *((_DWORD *)this + 3184);
    size_t v11 = *((unsigned int *)this + 3185);
    size_t v12 = (char *)*((void *)this + 1591);
    if (v10 < v11)
    {
LABEL_25:
      *((_DWORD *)this + 3184) = v10 + 1;
      v12[v10] = 65;
      return 1LL;
    }

    BOOL v13 = (void *)*((void *)this + 1593);
    unint64_t v14 = (char *)v13[1];
    if (&v12[v11] == v14)
    {
      unint64_t v23 = (unint64_t)&v12[v11 + 1];
      unint64_t v15 = v13[2];
      if (v23 <= v15)
      {
        v13[1] = v23;
        LODWORD(v24) = 1;
LABEL_24:
        *((_DWORD *)this + 3185) = v11 + v24;
        goto LABEL_25;
      }
    }

    else
    {
      unint64_t v15 = v13[2];
    }

    else {
      uint64_t v24 = (2 * v11);
    }
    size_t v25 = v24 + v11;
    if (!v14 || (unint64_t)&v14[v25] > v15)
    {
      unint64_t v26 = 2LL * v13[4];
      if (v26 <= v25 + 1) {
        unint64_t v26 = v25 + 1;
      }
      _OWORD v13[4] = v26;
      unint64_t v27 = v26 + 8;
      unint64_t v28 = malloc(v26 + 8);
      *unint64_t v28 = v13[3];
      unint64_t v14 = (char *)(v28 + 1);
      v13[2] = (char *)v28 + v27;
      void v13[3] = v28;
    }

    v13[1] = &v14[v25];
    if ((_DWORD)v11)
    {
      memcpy(v14, *((const void **)this + 1591), v11);
      LODWORD(v11) = *((_DWORD *)this + 3185);
      unsigned int v10 = *((_DWORD *)this + 3184);
    }

    *((void *)this + 1591) = v14;
    size_t v12 = v14;
    goto LABEL_24;
  }

  LOBYTE(__s2) = Substitution + 65;
  {
    unsigned int v17 = *((_DWORD *)this + 3184);
    size_t v18 = *((unsigned int *)this + 3185);
    unint64_t v19 = (char *)*((void *)this + 1591);
    if (v17 < v18)
    {
LABEL_41:
      *((_DWORD *)this + 3184) = v17 + 1;
      v19[v17] = 65;
      swift::Demangle::__runtime::CharVector::append((char **)this + 1591, &__s2, 1uLL, *((void **)this + 1593));
      return 1LL;
    }

    unint64_t v20 = (void *)*((void *)this + 1593);
    uint64_t v21 = (char *)v20[1];
    if (&v19[v18] == v21)
    {
      unint64_t v29 = (unint64_t)&v19[v18 + 1];
      unint64_t v22 = v20[2];
      if (v29 <= v22)
      {
        v20[1] = v29;
        LODWORD(v30) = 1;
LABEL_40:
        *((_DWORD *)this + 3185) = v18 + v30;
        goto LABEL_41;
      }
    }

    else
    {
      unint64_t v22 = v20[2];
    }

    else {
      uint64_t v30 = (2 * v18);
    }
    size_t v31 = v30 + v18;
    if (!v21 || (unint64_t)&v21[v31] > v22)
    {
      unint64_t v32 = 2LL * v20[4];
      if (v32 <= v31 + 1) {
        unint64_t v32 = v31 + 1;
      }
      v20[4] = v32;
      unint64_t v33 = v32 + 8;
      uint64_t v34 = malloc(v32 + 8);
      void *v34 = v20[3];
      uint64_t v21 = (char *)(v34 + 1);
      _OWORD v20[2] = (char *)v34 + v33;
      void v20[3] = v34;
    }

    v20[1] = &v21[v31];
    if ((_DWORD)v18)
    {
      memcpy(v21, *((const void **)this + 1591), v18);
      LODWORD(v18) = *((_DWORD *)this + 3185);
      unsigned int v17 = *((_DWORD *)this + 3184);
    }

    *((void *)this + 1591) = v21;
    unint64_t v19 = v21;
    goto LABEL_40;
  }

  return 1LL;
}

BOOL anonymous namespace'::Remangler::mangleStandardSubstitution( _anonymous_namespace_::Remangler *this, swift::Demangle::__runtime::Node *a2)
{
  BOOL v3 = 0LL;
  unsigned int v4 = *((unsigned __int16 *)a2 + 8);
  if (v4 <= 0xB3)
  {
    if (v4 != 24 && v4 != 61) {
      return v3;
    }
LABEL_7:
    int v5 = *((unsigned __int8 *)a2 + 18);
    int v6 = a2;
    if ((v5 - 1) >= 2)
    {
      if (v5 != 5 || !*((_DWORD *)a2 + 2))
      {
        int v7 = 0LL;
LABEL_13:
        if (*((_WORD *)v7 + 8) != 153 || v7[1] != 5) {
          return 0LL;
        }
        int v8 = (int *)*v7;
        int v9 = *v8;
        int v10 = *((unsigned __int8 *)v8 + 4);
        if (v9 != 1718187859 || v10 != 116) {
          return 0LL;
        }
        if (v5 == 5)
        {
          if (*(_WORD *)(*(void *)(*(void *)a2 + 8LL) + 16LL) == 101)
          {
            a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_25:
            swift::Mangle::__runtime::getStandardTypeSubst( **((void ***)a2 + 1),  *(void *)(*((void *)a2 + 1) + 8LL),  1,  (uint64_t)&v25);
            BOOL v3 = v27 != 0;
            if (!v27
            {
              return v3;
            }

            unsigned int v13 = *((_DWORD *)this + 3184);
            size_t v14 = *((unsigned int *)this + 3185);
            unint64_t v15 = (char *)*((void *)this + 1591);
            if (v13 < v14)
            {
LABEL_44:
              *((_DWORD *)this + 3184) = v13 + 1;
              v15[v13] = 83;
              swift::Demangle::__runtime::CharVector::append((char **)this + 1591, v25, v26, *((void **)this + 1593));
              return v3;
            }

            uint64_t v16 = (void *)*((void *)this + 1593);
            unsigned int v17 = (char *)v16[1];
            if (&v15[v14] == v17)
            {
              unint64_t v19 = (unint64_t)&v15[v14 + 1];
              unint64_t v18 = v16[2];
              if (v19 <= v18)
              {
                v16[1] = v19;
                LODWORD(v20) = 1;
LABEL_43:
                *((_DWORD *)this + 3185) = v14 + v20;
                goto LABEL_44;
              }
            }

            else
            {
              unint64_t v18 = v16[2];
            }

            else {
              uint64_t v20 = (2 * v14);
            }
            size_t v21 = v20 + v14;
            if (!v17 || (unint64_t)&v17[v21] > v18)
            {
              unint64_t v22 = 2LL * v16[4];
              if (v22 <= v21 + 1) {
                unint64_t v22 = v21 + 1;
              }
              _OWORD v16[4] = v22;
              unint64_t v23 = v22 + 8;
              uint64_t v24 = malloc(v22 + 8);
              *uint64_t v24 = v16[3];
              unsigned int v17 = (char *)(v24 + 1);
              v16[2] = (char *)v24 + v23;
              void v16[3] = v24;
            }

            v16[1] = &v17[v21];
            if ((_DWORD)v14)
            {
              memcpy(v17, *((const void **)this + 1591), v14);
              LODWORD(v14) = *((_DWORD *)this + 3185);
              unsigned int v13 = *((_DWORD *)this + 3184);
            }

            *((void *)this + 1591) = v17;
            unint64_t v15 = v17;
            goto LABEL_43;
          }
        }

        else if (*(_WORD *)(*((void *)a2 + 1) + 16LL) == 101)
        {
          goto LABEL_25;
        }

        return 0LL;
      }

      int v6 = *(swift::Demangle::__runtime::Node **)a2;
    }

    int v7 = *(uint64_t **)v6;
    goto LABEL_13;
  }

  if (v4 == 219 || v4 == 180) {
    goto LABEL_7;
  }
  return v3;
}

char *anonymous namespace'::Remangler::mangleIndex(char *this, uint64_t a2)
{
  uint64_t v2 = (unsigned int *)this;
  BOOL v3 = this + 12728;
  if (a2) {
    this = (char *)swift::Demangle::__runtime::CharVector::append( (unsigned int *)this + 3182,  a2 - 1,  *((swift::Demangle::__runtime::NodeFactory **)this + 1593));
  }
  unsigned int v4 = v2[3184];
  size_t v5 = v2[3185];
  int v6 = (char *)*((void *)v2 + 1591);
  if (v4 >= v5)
  {
    int v7 = (void *)*((void *)v2 + 1593);
    int v8 = (char *)v7[1];
    if (&v6[v5] == v8)
    {
      unint64_t v10 = (unint64_t)&v6[v5 + 1];
      unint64_t v9 = v7[2];
      if (v10 <= v9)
      {
        v7[1] = v10;
        LODWORD(v11) = 1;
LABEL_21:
        v2[3185] = v5 + v11;
        goto LABEL_22;
      }
    }

    else
    {
      unint64_t v9 = v7[2];
    }

    else {
      uint64_t v11 = (2 * v5);
    }
    size_t v12 = v11 + v5;
    if (v8) {
      BOOL v13 = (unint64_t)&v8[v11 + v5] > v9;
    }
    else {
      BOOL v13 = 1;
    }
    int v6 = (char *)v7[1];
    if (v13)
    {
      unint64_t v14 = 2LL * v7[4];
      if (v14 <= v12 + 1) {
        unint64_t v14 = v12 + 1;
      }
      v7[4] = v14;
      unint64_t v15 = v14 + 8;
      this = (char *)malloc(v14 + 8);
      uint64_t v16 = &this[v15];
      *(void *)this = v7[3];
      int v6 = this + 8;
      v7[2] = v16;
      void v7[3] = this;
    }

    v7[1] = &v6[v12];
    if ((_DWORD)v5)
    {
      this = (char *)memcpy(v6, *((const void **)v2 + 1591), v5);
      LODWORD(__swift::__runtime::llvm::hash_value(v4, v5) = v2[3185];
      unsigned int v4 = v2[3184];
    }

    *BOOL v3 = v6;
    goto LABEL_21;
  }

uint64_t swift::Mangle::__runtime::SubstitutionMerging::tryMergeSubst<anonymous namespace'::Remangler>( unint64_t *a1, uint64_t a2, void *__s2, size_t __n, int a5)
{
  char v5 = a5;
  unint64_t v8 = *(unsigned int *)(a2 + 12736);
  unint64_t v9 = a1[2];
  if (v9 - 1 > 0x7FE) {
    goto LABEL_24;
  }
  unint64_t v11 = *a1;
  unint64_t v10 = a1[1];
  unint64_t v14 = (unsigned int *)(a2 + 12728);
  unint64_t v15 = *(char **)(a2 + 12728);
  unint64_t v16 = v8 - v10;
  if (v8 < v8 - v10) {
    unint64_t v16 = *(unsigned int *)(a2 + 12736);
  }
  if (v8 <= v10) {
    unint64_t v16 = 0LL;
  }
  unint64_t v17 = v8 - v16;
  if (v8 == v16)
  {
    if (!__n) {
      goto LABEL_29;
    }
    size_t v22 = 0LL;
    size_t v21 = &v15[v8];
  }

  else
  {
    unint64_t v18 = 0LL;
    unint64_t v19 = &v15[v16];
    while (v19[v18] - 48 <= 9)
    {
      if (v17 == ++v18)
      {
        unint64_t v18 = -1LL;
        break;
      }
    }

    if (v17 >= v18) {
      unint64_t v20 = v18;
    }
    else {
      unint64_t v20 = v17;
    }
    size_t v21 = &v19[v20];
    size_t v22 = v17 - v20;
    if (v17 - v20 == __n)
    {
      if (v17 <= v18) {
        goto LABEL_29;
      }
      size_t v43 = (unsigned int *)(a2 + 12728);
      int v23 = memcmp(v21, __s2, __n);
      if (v23 && (v5 & 1) == 0)
      {
        size_t v22 = __n;
        unint64_t v14 = v43;
        goto LABEL_25;
      }

      unint64_t v14 = v43;
      if (!v23)
      {
LABEL_29:
        a1[2] = v9 + 1;
        *(_DWORD *)(a2 + 12736) = v11;
        size_t v31 = (char **)v14;
        swift::Demangle::__runtime::CharVector::append( v14,  v9 + 1,  *(swift::Demangle::__runtime::NodeFactory **)(a2 + 12744));
        swift::Demangle::__runtime::CharVector::append(v31, __s2, __n, *(void **)(a2 + 12744));
        a1[1] = *(unsigned int *)(a2 + 12736) - *a1;
        return 1LL;
      }

uint64_t *anonymous namespace'::Remangler::mangleChildNodesReversed@<X0>( uint64_t *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = (_anonymous_namespace_::Remangler *)this;
  uint64_t v8 = *((unsigned __int8 *)a2 + 18);
  switch((_DWORD)v8)
  {
    case 1:
      goto LABEL_6;
    case 5:
      uint64_t v8 = *((unsigned int *)a2 + 2);
      if ((_DWORD)v8) {
        goto LABEL_6;
      }
      break;
    case 2:
      uint64_t v8 = 2LL;
LABEL_6:
      for (uint64_t i = v8 - 1; i != -1; --i)
      {
        unint64_t v10 = *((unsigned __int8 *)a2 + 18);
        unsigned int v11 = v10 - 1;
        if ((_DWORD)v10 != 1)
        {
          if ((_DWORD)v10 == 5)
          {
            unint64_t v10 = *((unsigned int *)a2 + 2);
          }

          else
          {
            if ((_DWORD)v10 != 2) {
              goto LABEL_7;
            }
            unint64_t v10 = 2LL;
          }
        }

        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(void *)(a4 + 8) = 0LL;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }

        size_t v12 = a2;
        if (v11 >= 2) {
          size_t v12 = *(swift::Demangle::__runtime::Node **)a2;
        }
        if (*(_DWORD *)a4) {
          return this;
        }
      }

      break;
  }

  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0LL;
  *(_DWORD *)(a4 + 16) = 0;
  return this;
}

uint64_t anonymous namespace'::Remangler::mangleAnyNominalType@<X0>( uint64_t this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  if (a3 >= 0x401)
  {
    *(_DWORD *)a4 = 3;
    *(void *)(a4 + 8) = a2;
    int v6 = 542;
LABEL_3:
    *(_DWORD *)(a4 + 16) = v6;
    return this;
  }

  uint64_t v8 = this;
  this = swift::Demangle::__runtime::isSpecialized(a2, a2);
  if (!(_DWORD)this)
  {
    unsigned int v9 = *((unsigned __int16 *)a2 + 8);
    if (v9 > 0xDA)
    {
      switch(v9)
      {
        case 0xEAu:
          unint64_t v10 = "a";
          break;
        case 0xE9u:
          unint64_t v19 = (swift::Demangle::__runtime::Node *)(*(uint64_t (**)(void, void, void))(v8 + 12824))( *(void *)(v8 + 12832),  0LL,  *(void *)a2);
        case 0xDBu:
          unint64_t v10 = "V";
          break;
        default:
          goto LABEL_33;
      }
    }

    else
    {
      switch(v9)
      {
        case 0x18u:
          unint64_t v10 = "C";
          break;
        case 0x3Du:
          unint64_t v10 = "O";
          break;
        case 0xA7u:
          unint64_t v10 = "XY";
          uint64_t v11 = a4;
          uint64_t v12 = v8;
          BOOL v13 = (swift::Demangle::__runtime::Node **)a2;
          size_t v14 = 2LL;
        default:
LABEL_33:
          *(_DWORD *)a4 = 5;
          *(void *)(a4 + 8) = a2;
          int v6 = 584;
          goto LABEL_3;
      }
    }

    uint64_t v11 = a4;
    uint64_t v12 = v8;
    BOOL v13 = (swift::Demangle::__runtime::Node **)a2;
    size_t v14 = 1LL;
  }

  v28[0] = 0LL;
  v28[1] = 0LL;
  char v29 = 0;
  if ((_DWORD)this)
  {
LABEL_7:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return this;
  }

  this = swift::Demangle::__runtime::getUnspecialized( (uint64_t)a2,  *(swift::Demangle::__runtime::Node **)v8,  (uint64_t)&v25);
  if ((_DWORD)v25)
  {
    *(_OWORD *)a4 = v25;
    *(void *)(a4 + 16) = v26;
    return this;
  }

  unsigned int v15 = a3 + 1;
  if (!*(_DWORD *)a4)
  {
    char v24 = 121;
    if (!*(_DWORD *)a4)
    {
      if (*((_BYTE *)a2 + 18) != 5 || *((_DWORD *)a2 + 2) != 3) {
        goto LABEL_48;
      }
      unint64_t v16 = *(uint64_t **)(*(void *)a2 + 16LL);
      uint64_t v17 = *((unsigned __int8 *)v16 + 18);
      if ((_DWORD)v17 != 1)
      {
        if ((_DWORD)v17 != 5)
        {
          if ((_DWORD)v17 == 2)
          {
            uint64_t v17 = 2LL;
            unint64_t v18 = 0LL;
            goto LABEL_36;
          }

          goto LABEL_48;
        }

        uint64_t v17 = *((unsigned int *)v16 + 2);
        if (!(_DWORD)v17)
        {
LABEL_48:
          swift::Demangle::__runtime::RemanglerBuffer::operator<<((char **)(v8 + 12728), 71);
          this = (uint64_t)swift::Demangle::__runtime::RemanglerBase::addSubstitution( (char *)v8,  (const swift::Demangle::__runtime::SubstitutionEntry *)v28);
          goto LABEL_7;
        }
      }

      unint64_t v18 = 0LL;
      while (1)
      {
LABEL_36:
        unint64_t v20 = *((unsigned __int8 *)v16 + 18);
        unsigned int v21 = v20 - 1;
        if ((_DWORD)v20 != 1)
        {
          if ((_DWORD)v20 == 5)
          {
            unint64_t v20 = *((unsigned int *)v16 + 2);
          }

          else
          {
            if ((_DWORD)v20 != 2) {
              goto LABEL_45;
            }
            unint64_t v20 = 2LL;
          }
        }

        if (v20 > v18)
        {
          size_t v22 = v16;
          if (v21 >= 2) {
            size_t v22 = (uint64_t *)*v16;
          }
          int v23 = (swift::Demangle::__runtime::Node *)v22[v18];
          goto LABEL_46;
        }

unsigned int *anonymous namespace'::Remangler::mangleGenericArgs@<X0>( unsigned int *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, char *a3@<X2>, int a4@<W3>, BOOL a5@<W4>, uint64_t a6@<X8>)
{
  int v7 = 0LL;
  int v8 = 0;
  int v9 = *((unsigned __int16 *)a2 + 8);
  uint64_t v12 = a2;
  uint64_t v13 = (uint64_t)this;
  int v14 = 0;
  switch(*((_WORD *)a2 + 8))
  {
    case 0:
    case 0x1D:
    case 0x21:
    case 0x32:
    case 0x33:
    case 0x46:
    case 0x4C:
    case 0x62:
    case 0x75:
    case 0x7D:
    case 0x98:
    case 0xB2:
    case 0xB3:
    case 0xCC:
    case 0xD7:
    case 0xDA:
    case 0xDC:
    case 0xFA:
    case 0xFB:
    case 0xFE:
    case 0x101:
      if (!a5) {
        goto LABEL_26;
      }
      int v15 = *((unsigned __int8 *)a2 + 18);
      unint64_t v16 = (swift::Demangle::__runtime::Node **)a2;
      if (v15 == 5 && *((_DWORD *)a2 + 2))
      {
        unint64_t v16 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_7:
        uint64_t v17 = *v16;
      }

      else
      {
        uint64_t v17 = 0LL;
      }

      if (!*(_DWORD *)a6)
      {
        this = (unsigned int *)swift::Demangle::__runtime::nodeConsumesGenericArgs(v12, v24);
        if ((_DWORD)this) {
          goto LABEL_38;
        }
        goto LABEL_26;
      }

      return this;
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1E:
    case 0x1F:
    case 0x20:
    case 0x22:
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x26:
    case 0x27:
    case 0x28:
    case 0x29:
    case 0x2A:
    case 0x2B:
    case 0x2C:
    case 0x2D:
    case 0x2E:
    case 0x2F:
    case 0x30:
    case 0x31:
    case 0x34:
    case 0x35:
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
    case 0x3B:
    case 0x3C:
    case 0x3E:
    case 0x3F:
    case 0x40:
    case 0x41:
    case 0x42:
    case 0x43:
    case 0x44:
    case 0x45:
    case 0x48:
    case 0x49:
    case 0x4A:
    case 0x4B:
    case 0x4D:
    case 0x4E:
    case 0x4F:
    case 0x50:
    case 0x51:
    case 0x52:
    case 0x54:
    case 0x55:
    case 0x56:
    case 0x57:
    case 0x58:
    case 0x59:
    case 0x5A:
    case 0x5B:
    case 0x5C:
    case 0x5D:
    case 0x5E:
    case 0x5F:
    case 0x60:
    case 0x61:
    case 0x63:
    case 0x64:
    case 0x65:
    case 0x66:
    case 0x67:
    case 0x68:
    case 0x69:
    case 0x6A:
    case 0x6B:
    case 0x6C:
    case 0x6D:
    case 0x6E:
    case 0x6F:
    case 0x70:
    case 0x71:
    case 0x72:
    case 0x73:
    case 0x74:
    case 0x76:
    case 0x77:
    case 0x78:
    case 0x79:
    case 0x7A:
    case 0x7B:
    case 0x7C:
    case 0x7E:
    case 0x7F:
    case 0x80:
    case 0x81:
    case 0x82:
    case 0x83:
    case 0x84:
    case 0x85:
    case 0x86:
    case 0x87:
    case 0x88:
    case 0x89:
    case 0x8A:
    case 0x8B:
    case 0x8C:
    case 0x8D:
    case 0x8E:
    case 0x8F:
    case 0x90:
    case 0x91:
    case 0x92:
    case 0x93:
    case 0x94:
    case 0x95:
    case 0x96:
    case 0x97:
    case 0x99:
    case 0x9A:
    case 0x9B:
    case 0x9C:
    case 0x9D:
    case 0x9E:
    case 0x9F:
    case 0xA0:
    case 0xA1:
    case 0xA2:
    case 0xA3:
    case 0xA4:
    case 0xA5:
    case 0xA6:
    case 0xA7:
    case 0xA8:
    case 0xA9:
    case 0xAA:
    case 0xAB:
    case 0xAC:
    case 0xAD:
    case 0xAE:
    case 0xAF:
    case 0xB0:
    case 0xB1:
    case 0xB5:
    case 0xB6:
    case 0xB7:
    case 0xB8:
    case 0xB9:
    case 0xBA:
    case 0xBB:
    case 0xBC:
    case 0xBD:
    case 0xBE:
    case 0xBF:
    case 0xC0:
    case 0xC1:
    case 0xC2:
    case 0xC3:
    case 0xC4:
    case 0xC5:
    case 0xC6:
    case 0xC7:
    case 0xC8:
    case 0xC9:
    case 0xCA:
    case 0xCB:
    case 0xCD:
    case 0xCE:
    case 0xCF:
    case 0xD0:
    case 0xD1:
    case 0xD2:
    case 0xD3:
    case 0xD4:
    case 0xD5:
    case 0xD6:
    case 0xD8:
    case 0xD9:
    case 0xDD:
    case 0xDE:
    case 0xDF:
    case 0xE0:
    case 0xE1:
    case 0xE2:
    case 0xE3:
    case 0xE4:
    case 0xE5:
    case 0xE6:
    case 0xE7:
    case 0xE8:
    case 0xE9:
    case 0xEB:
    case 0xEC:
    case 0xED:
    case 0xEE:
    case 0xEF:
    case 0xF0:
    case 0xF1:
    case 0xF2:
    case 0xF3:
    case 0xF4:
    case 0xF5:
    case 0xF6:
    case 0xF7:
    case 0xF8:
    case 0xF9:
    case 0xFC:
    case 0xFD:
    case 0xFF:
    case 0x100:
      goto LABEL_75;
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
      BOOL v18 = v9 == 18 || a5;
      int v19 = *((unsigned __int8 *)a2 + 18);
      unint64_t v20 = a2;
      if (v19 == 5 && *((_DWORD *)a2 + 2))
      {
        unint64_t v20 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_15:
        uint64_t v21 = *(void *)v20;
      }

      else
      {
        uint64_t v21 = 0LL;
      }

      if (*(_WORD *)(v21 + 16) != 232)
      {
        int v14 = 653;
        goto LABEL_35;
      }

      int v25 = *(unsigned __int8 *)(v21 + 18);
      if (v25 == 5 && *(_DWORD *)(v21 + 8))
      {
        uint64_t v21 = *(void *)v21;
LABEL_33:
        uint64_t v26 = *(void *)v21;
      }

      else
      {
        uint64_t v26 = 0LL;
      }

      if (*(_WORD *)(v26 + 16) != 233) {
        goto LABEL_78;
      }
      uint64_t v34 = (*((uint64_t (**)(void, void, void))this + 1603))( *((void *)this + 1604),  0LL,  *(void *)v26);
      int v35 = *(unsigned __int8 *)(v34 + 18);
      if (v35 == 5 && *(_DWORD *)(v34 + 8))
      {
        uint64_t v34 = *(void *)v34;
LABEL_47:
        uint64_t v26 = *(void *)v34;
      }

      else
      {
        uint64_t v26 = 0LL;
      }

uint64_t anonymous namespace'::Remangler::mangleAnyGenericType@<X0>( uint64_t a1@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, const void *a3@<X2>, size_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  __int128 v21 = 0uLL;
  LOBYTE(v22) = 0;
  if ((result & 1) != 0) {
    goto LABEL_23;
  }
  int v13 = *((unsigned __int8 *)a2 + 18);
  int v14 = a2;
  if ((v13 - 1) >= 2)
  {
    if (v13 == 5)
    {
      int v15 = *a2;
      int v14 = (swift::Demangle::__runtime::Node **)*a2;
      goto LABEL_10;
    }

    int v14 = 0LL;
  }

  if (v13 == 1)
  {
    unint64_t v16 = a2 + 1;
    if (v14 != v16) {
      goto LABEL_17;
    }
    goto LABEL_20;
  }

  if (v13 == 2)
  {
    unint64_t v16 = a2 + 2;
    if (v14 != v16) {
      goto LABEL_17;
    }
LABEL_20:
    *(_DWORD *)a6 = 0;
    *(void *)(a6 + 8) = 0LL;
    *(_DWORD *)(a6 + 16) = 0;
    uint64_t result = (uint64_t)swift::Demangle::__runtime::CharVector::append( (char **)(a1 + 12728),  a3,  a4,  *(void **)(a1 + 12744));
    unint64_t v18 = *(void *)(a1 + 12680);
    if (v18 > 0xF)
    {
      int v20 = *(_DWORD *)(a1 + 12712) + 16;
      __int128 v23 = v21;
      uint64_t v24 = v22;
      int v25 = v20;
      uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::__runtime::SubstitutionEntry,std::pair<swift::Demangle::__runtime::SubstitutionEntry const,unsigned int>>( a1 + 12688,  (uint64_t)&v23,  &v23);
    }

    else
    {
      *(void *)(a1 + 12680) = v18 + 1;
      uint64_t v19 = a1 + 24 * v18 + 12296;
      *(_OWORD *)uint64_t v19 = v21;
      *(_BYTE *)(v19 + 16) = v22;
    }

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleSingleChildNode@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = *((unsigned __int8 *)a2 + 18);
  if (v4 == 1) {
  if (v4 == 5 && *((_DWORD *)a2 + 2) == 1)
  }
  {
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  *(_DWORD *)a4 = 10;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = 321;
  return this;
}

{
  int v4;
  int v4 = *((unsigned __int8 *)a2 + 18);
  if (v4 == 1) {
  if (v4 == 5 && *((_DWORD *)a2 + 2) == 1)
  }
  {
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  *(_DWORD *)a4 = 10;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = 114;
  return this;
}

uint64_t __swift::__runtime::llvm::StringRef::consume_front(const void **a1, const void *a2, size_t a3)
{
  size_t v3 = (size_t)a1[1];
  if (v3 < a3) {
    return 0LL;
  }
  int v6 = (char *)*a1;
  if (a3)
  {
    if (memcmp(*a1, a2, a3)) {
      return 0LL;
    }
  }

  if (v3 >= a3) {
    size_t v8 = a3;
  }
  else {
    size_t v8 = v3;
  }
  *a1 = &v6[v8];
  a1[1] = (const void *)(v3 - v8);
  return 1LL;
}

uint64_t anonymous namespace'::Remangler::mangleConstrainedType@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  char v5 = a2;
  int v6 = this;
  if (*((_WORD *)a2 + 8) != 232) {
    goto LABEL_8;
  }
  int v8 = *((unsigned __int8 *)a2 + 18);
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      char v5 = 0LL;
      goto LABEL_8;
    }

    char v5 = *(swift::Demangle::__runtime::Node **)a2;
  }

  char v5 = *(swift::Demangle::__runtime::Node **)v5;
LABEL_8:
  __int128 v45 = 0uLL;
  LOBYTE(v46) = 0;
  if ((result & 1) != 0)
  {
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    *(_DWORD *)(a4 + 24) = -1;
    *(void *)(a4 + 32) = 0LL;
    return result;
  }

  int v41 = a3;
  uint64_t v42 = a4;
  size_t v43 = v6;
  unsigned int v10 = 0;
  unsigned int v11 = 0;
  uint64_t v12 = 0LL;
  while (1)
  {
    int v14 = *((unsigned __int16 *)v5 + 8);
    if (v14 != 45) {
      break;
    }
    int v15 = *((unsigned __int8 *)v5 + 18);
    unint64_t v16 = v5;
    if (v15 != 2)
    {
      if (v15 != 5 || *((_DWORD *)v5 + 2) < 2u)
      {
        uint64_t v17 = 0LL;
        if (v11 < v10) {
          goto LABEL_40;
        }
LABEL_22:
        unint64_t v18 = *(void **)v6;
        uint64_t v19 = &v12[8 * v10];
        int v20 = *(char **)(*(void *)v6 + 8LL);
        if (v19 != v20)
        {
          unint64_t v21 = v18[2];
          goto LABEL_25;
        }

        uint64_t v22 = v19 + 8;
        unint64_t v21 = v18[2];
        if ((unint64_t)v22 <= v21)
        {
          v18[1] = v22;
          LODWORD(v23) = 1;
        }

        else
        {
LABEL_25:
          unsigned int v44 = v11;
          if (2 * v10 <= 4) {
            uint64_t v23 = 4LL;
          }
          else {
            uint64_t v23 = 2 * v10;
          }
          uint64_t v24 = 8 * (v23 + v10);
          int v25 = (char *)((unint64_t)(v20 + 7) & 0xFFFFFFFFFFFFFFF8LL);
          if (v25) {
            BOOL v26 = (unint64_t)&v25[v24] > v21;
          }
          else {
            BOOL v26 = 1;
          }
          if (v26)
          {
            unint64_t v27 = 2LL * v18[4];
            if (v27 <= v24 + 8) {
              unint64_t v27 = v24 + 8;
            }
            v18[4] = v27;
            unint64_t v28 = v27 + 8;
            size_t v29 = v12;
            uint64_t result = (uint64_t)malloc(v27 + 8);
            uint64_t v12 = v29;
            *(void *)uint64_t result = v18[3];
            int v25 = (char *)((result + 15) & 0xFFFFFFFFFFFFFFF8LL);
            uint64_t v30 = result + v28;
            int v6 = v43;
            uint64_t v18[2] = v30;
            void v18[3] = result;
          }

          v18[1] = &v25[v24];
          if (v10)
          {
            uint64_t result = (uint64_t)memcpy(v25, v12, 8LL * v10);
            int v15 = *((unsigned __int8 *)v5 + 18);
          }

          uint64_t v12 = v25;
          unsigned int v11 = v44;
        }

        v10 += v23;
        goto LABEL_40;
      }

      unint64_t v16 = *(swift::Demangle::__runtime::Node **)v5;
    }

    uint64_t v17 = *((void *)v16 + 1);
    if (v11 >= v10) {
      goto LABEL_22;
    }
LABEL_40:
    *(void *)&v12[8 * v11] = v17;
    if ((v15 - 1) >= 2)
    {
      if (v15 != 5 || !*((_DWORD *)v5 + 2))
      {
        int v13 = 0LL;
        goto LABEL_46;
      }

      char v5 = *(swift::Demangle::__runtime::Node **)v5;
    }

    int v13 = *(swift::Demangle::__runtime::Node **)v5;
LABEL_46:
    int v31 = *((unsigned __int8 *)v13 + 18);
    if ((v31 - 1) < 2)
    {
LABEL_13:
      char v5 = *(swift::Demangle::__runtime::Node **)v13;
      ++v11;
    }

    else
    {
      if (v31 == 5 && *((_DWORD *)v13 + 2))
      {
        int v13 = *(swift::Demangle::__runtime::Node **)v13;
        goto LABEL_13;
      }

      char v5 = 0LL;
      ++v11;
    }
  }

  if (v14 == 38 || v14 == 85)
  {
    uint64_t v32 = v42;
    if (v11) {
      goto LABEL_53;
    }
LABEL_69:
    *(_DWORD *)uint64_t v32 = 0;
    *(void *)(v32 + 8) = 0LL;
    *(_DWORD *)(v32 + 16) = 0;
    *(_DWORD *)(v32 + 24) = v11;
    *(void *)(v32 + 32) = v5;
  }

  else
  {
    uint64_t v34 = v12;
    if ((_DWORD)v47)
    {
      *(_OWORD *)uint64_t v42 = v47;
      *(void *)(v42 + 16) = v48;
      *(_DWORD *)(v42 + 24) = 0;
      *(void *)(v42 + 32) = 0LL;
    }

    else
    {
      uint64_t v32 = v42;
      if (v11)
      {
        uint64_t v12 = v34;
        char v5 = 0LL;
LABEL_53:
        unint64_t v33 = v12;
        if (!(_DWORD)v47)
        {
          if (v11 == 1) {
            int v35 = "";
          }
          else {
            int v35 = "_";
          }
          uint64_t result = (uint64_t)swift::Demangle::__runtime::CharVector::append( (char **)v6 + 1591,  v35,  v11 != 1,  *((void **)v6 + 1593));
          if (v11 < 2)
          {
LABEL_64:
            unint64_t v38 = *((void *)v6 + 1585);
            if (v38 > 0xF)
            {
              int v40 = *((_DWORD *)v6 + 3178) + 16;
              __int128 v47 = v45;
              uint64_t v48 = v46;
              int v49 = v40;
              uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::__runtime::SubstitutionEntry,std::pair<swift::Demangle::__runtime::SubstitutionEntry const,unsigned int>>( (uint64_t)v6 + 12688,  (uint64_t)&v47,  &v47);
            }

            else
            {
              *((void *)v6 + 1585) = v38 + 1;
              uint64_t v39 = (uint64_t)v6 + 24 * v38 + 12296;
              *(_OWORD *)uint64_t v39 = v45;
              *(_BYTE *)(v39 + 16) = v46;
            }

            goto LABEL_69;
          }

          unsigned int v36 = v11 - 2;
          unsigned int v37 = 2;
          while (1)
          {
            if ((_DWORD)v47) {
              break;
            }
            uint64_t result = (uint64_t)swift::Demangle::__runtime::CharVector::append( (char **)v6 + 1591,  "",  0LL,  *((void **)v6 + 1593));
            ++v37;
            --v36;
            if (v37 > v11) {
              goto LABEL_64;
            }
          }
        }

        *(_OWORD *)uint64_t v32 = v47;
        *(void *)(v32 + 16) = v48;
        *(_DWORD *)(v32 + 24) = 0;
        *(void *)(v32 + 32) = 0LL;
      }

      else
      {
        *(_DWORD *)uint64_t v42 = 0;
        *(void *)(v42 + 8) = 0LL;
        *(_DWORD *)(v42 + 16) = 0;
        *(_DWORD *)(v42 + 24) = -1;
        *(void *)(v42 + 32) = 0LL;
      }
    }
  }

  return result;
}

char *anonymous namespace'::Remangler::mangleDependentGenericParamIndex( char *this, uint64_t **a2, const char *__s, char a4)
{
  uint64_t v4 = (uint64_t)this;
  if (*((_WORD *)a2 + 8) == 85)
  {
    unsigned int v5 = *((_DWORD *)this + 3184);
    size_t v6 = *((unsigned int *)this + 3185);
    int v7 = (_BYTE *)*((void *)this + 1591);
    if (v5 < v6)
    {
LABEL_37:
      *(_DWORD *)(v4 + 12736) = v5 + 1;
      v7[v5] = 115;
      return this;
    }

    int v8 = (void *)*((void *)this + 1593);
    int v9 = (_BYTE *)v8[1];
    if (&v7[v6] == v9)
    {
      unint64_t v27 = (unint64_t)&v7[v6 + 1];
      unint64_t v10 = v8[2];
      if (v27 <= v10)
      {
        v8[1] = v27;
        LODWORD(v28) = 1;
LABEL_36:
        *(_DWORD *)(v4 + 12740) = v6 + v28;
        goto LABEL_37;
      }
    }

    else
    {
      unint64_t v10 = v8[2];
    }

    else {
      uint64_t v28 = (2 * v6);
    }
    size_t v29 = v28 + v6;
    if (v9) {
      BOOL v30 = (unint64_t)&v9[v28 + v6] > v10;
    }
    else {
      BOOL v30 = 1;
    }
    int v7 = (_BYTE *)v8[1];
    if (v30)
    {
      unint64_t v31 = 2LL * v8[4];
      if (v31 <= v29 + 1) {
        unint64_t v31 = v29 + 1;
      }
      v8[4] = v31;
      unint64_t v32 = v31 + 8;
      this = (char *)malloc(v31 + 8);
      unint64_t v33 = &this[v32];
      *(void *)this = v8[3];
      int v7 = this + 8;
      void v8[2] = v33;
      void v8[3] = this;
    }

    v8[1] = &v7[v29];
    if ((_DWORD)v6)
    {
      this = (char *)memcpy(v7, *(const void **)(v4 + 12728), v6);
      LODWORD(v6) = *(_DWORD *)(v4 + 12740);
      unsigned int v5 = *(_DWORD *)(v4 + 12736);
    }

    *(void *)(v4 + 12728) = v7;
    goto LABEL_36;
  }

  int v13 = *((unsigned __int8 *)a2 + 18);
  if ((v13 - 1) >= 2)
  {
    if (v13 == 5) {
      int v14 = (swift::Demangle::__runtime::Node *)*a2;
    }
    else {
      int v14 = (swift::Demangle::__runtime::Node *)a2;
    }
    a2 = (uint64_t **)*a2;
  }

  else
  {
    int v14 = (swift::Demangle::__runtime::Node *)a2;
  }

  uint64_t v15 = **a2;
  uint64_t v16 = **((void **)v14 + 1);
  if (v15)
  {
    uint64_t v17 = (char **)(this + 12728);
    if (__s) {
      size_t v18 = strlen(__s);
    }
    else {
      size_t v18 = 0LL;
    }
    swift::Demangle::__runtime::CharVector::append(v17, __s, v18, *(void **)(v4 + 12744));
    unsigned int v21 = *(_DWORD *)(v4 + 12736);
    size_t v22 = *(unsigned int *)(v4 + 12740);
    uint64_t v23 = *(char **)(v4 + 12728);
    uint64_t v24 = *(void **)(v4 + 12744);
    int v25 = (char *)v24[1];
    if (&v23[v22] == v25)
    {
      unint64_t v40 = (unint64_t)&v23[v22 + 1];
      unint64_t v26 = v24[2];
      if (v40 <= v26)
      {
        v24[1] = v40;
        LODWORD(v41) = 1;
LABEL_53:
        *(_DWORD *)(v4 + 12740) = v22 + v41;
LABEL_54:
        *(_DWORD *)(v4 + 12736) = v21 + 1;
        v23[v21] = 100;
        __int128 v47 = (char *)v4;
        uint64_t v48 = v16;
      }
    }

    else
    {
      unint64_t v26 = v24[2];
    }

    else {
      uint64_t v41 = (2 * v22);
    }
    size_t v42 = v41 + v22;
    if (!v25 || (unint64_t)&v25[v42] > v26)
    {
      unint64_t v43 = 2LL * v24[4];
      if (v43 <= v42 + 1) {
        unint64_t v43 = v42 + 1;
      }
      void v24[4] = v43;
      unint64_t v44 = v43 + 8;
      __int128 v45 = malloc(v43 + 8);
      uint64_t v46 = (char *)v45 + v44;
      *__int128 v45 = v24[3];
      int v25 = (char *)(v45 + 1);
      void v24[2] = v46;
      void v24[3] = v45;
    }

    v24[1] = &v25[v42];
    if ((_DWORD)v22)
    {
      memcpy(v25, *(const void **)(v4 + 12728), v22);
      LODWORD(v22) = *(_DWORD *)(v4 + 12740);
      unsigned int v21 = *(_DWORD *)(v4 + 12736);
    }

    *uint64_t v17 = v25;
    uint64_t v23 = v25;
    goto LABEL_53;
  }

  uint64_t v19 = (char **)(this + 12728);
  if (v16)
  {
    if (__s) {
      size_t v20 = strlen(__s);
    }
    else {
      size_t v20 = 0LL;
    }
    swift::Demangle::__runtime::CharVector::append(v19, __s, v20, *(void **)(v4 + 12744));
    uint64_t v48 = v16 - 1;
    __int128 v47 = (char *)v4;
  }

  unsigned int v34 = *((_DWORD *)this + 3184);
  size_t v35 = *((unsigned int *)this + 3185);
  unsigned int v36 = (char *)*((void *)this + 1591);
  if (v34 >= v35)
  {
    unsigned int v37 = (void *)*((void *)this + 1593);
    unint64_t v38 = (char *)v37[1];
    if (&v36[v35] == v38)
    {
      unint64_t v49 = (unint64_t)&v36[v35 + 1];
      unint64_t v39 = v37[2];
      if (v49 <= v39)
      {
        v37[1] = v49;
        LODWORD(v50) = 1;
LABEL_73:
        *(_DWORD *)(v4 + 12740) = v35 + v50;
        goto LABEL_74;
      }
    }

    else
    {
      unint64_t v39 = v37[2];
    }

    else {
      uint64_t v50 = (2 * v35);
    }
    size_t v51 = v50 + v35;
    if (!v38 || (unint64_t)&v38[v51] > v39)
    {
      unint64_t v52 = 2LL * v37[4];
      if (v52 <= v51 + 1) {
        unint64_t v52 = v51 + 1;
      }
      v37[4] = v52;
      unint64_t v53 = v52 + 8;
      this = (char *)malloc(v52 + 8);
      int v54 = &this[v53];
      *(void *)this = v37[3];
      unint64_t v38 = this + 8;
      void v37[2] = v54;
      v37[3] = this;
    }

    v37[1] = &v38[v51];
    if ((_DWORD)v35)
    {
      this = (char *)memcpy(v38, *(const void **)(v4 + 12728), v35);
      LODWORD(v35) = *(_DWORD *)(v4 + 12740);
      unsigned int v34 = *(_DWORD *)(v4 + 12736);
    }

    char *v19 = v38;
    unsigned int v36 = v38;
    goto LABEL_73;
  }

uint64_t *anonymous namespace'::Remangler::mangleAbstractStorage@<X0>( uint64_t *result@<X0>, uint64_t a2@<X1>, const void *a3@<X2>, size_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v8 = a2;
  int v9 = result;
  int v11 = *(unsigned __int8 *)(a2 + 18);
  uint64_t v12 = (swift::Demangle::__runtime::Node **)a2;
  if ((v11 - 1) >= 2)
  {
    if (v11 == 5)
    {
      int v13 = *(swift::Demangle::__runtime::Node **)a2;
      uint64_t v12 = *(swift::Demangle::__runtime::Node ***)a2;
      goto LABEL_9;
    }

    uint64_t v12 = 0LL;
  }

  if (v11 == 1)
  {
    int v14 = (swift::Demangle::__runtime::Node **)(a2 + 8);
    if (v12 != (swift::Demangle::__runtime::Node **)(a2 + 8)) {
      goto LABEL_16;
    }
    goto LABEL_19;
  }

  if (v11 == 2)
  {
    int v14 = (swift::Demangle::__runtime::Node **)(a2 + 16);
    if (v12 != (swift::Demangle::__runtime::Node **)(a2 + 16)) {
      goto LABEL_16;
    }
LABEL_19:
    *(_DWORD *)a6 = 0;
    *(void *)(a6 + 8) = 0LL;
    *(_DWORD *)(a6 + 16) = 0;
    int v16 = *(unsigned __int16 *)(v8 + 16);
    if (v16 == 220)
    {
      uint64_t v17 = "i";
    }

    else
    {
      if (v16 != 254)
      {
        int v19 = 712;
        int v18 = 6;
        goto LABEL_25;
      }

      uint64_t v17 = "v";
    }

    swift::Demangle::__runtime::CharVector::append((char **)v9 + 1591, v17, 1uLL, (void *)v9[1593]);
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append((char **)v9 + 1591, a3, a4, (void *)v9[1593]);
    int v18 = 0;
    uint64_t v8 = 0LL;
    int v19 = 0;
LABEL_25:
    *(_DWORD *)a6 = v18;
    *(void *)(a6 + 8) = v8;
    *(_DWORD *)(a6 + 16) = v19;
    return result;
  }

  if (v11 != 5)
  {
    int v14 = 0LL;
    if (!v12) {
      goto LABEL_19;
    }
    goto LABEL_16;
  }

  int v13 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_9:
  int v14 = (swift::Demangle::__runtime::Node **)((char *)v13 + 8 * *(unsigned int *)(a2 + 8));
  if (v12 == v14) {
    goto LABEL_19;
  }
LABEL_16:
  unsigned int v15 = a5 + 1;
  while (1)
  {
    if (*(_DWORD *)a6) {
      return result;
    }
    if (++v12 == v14) {
      goto LABEL_19;
    }
  }

uint64_t *anonymous namespace'::Remangler::mangleGenericSpecializationNode@<X0>( uint64_t *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, const char *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  size_t v6 = a2;
  uint64_t v7 = (uint64_t)this;
  BOOL v23 = 1;
  int v9 = *((unsigned __int8 *)a2 + 18);
  unint64_t v10 = a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      uint64_t v11 = *(void *)a2;
      unint64_t v10 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }

    unint64_t v10 = 0LL;
  }

  switch(v9)
  {
    case 1:
      uint64_t v12 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      break;
    case 2:
      uint64_t v12 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      break;
    case 5:
      uint64_t v11 = *(void *)a2;
LABEL_9:
      uint64_t v12 = (swift::Demangle::__runtime::Node *)(v11 + 8LL * *((unsigned int *)a2 + 2));
      if (v10 == v12)
      {
LABEL_27:
        int v16 = 1706;
        int v17 = 1;
        goto LABEL_28;
      }

      break;
    default:
      uint64_t v12 = 0LL;
      if (!v10) {
        goto LABEL_27;
      }
      break;
  }

  unsigned int v13 = a4 + 1;
  do
  {
    int v14 = *(swift::Demangle::__runtime::Node **)v10;
    if (*(_WORD *)(*(void *)v10 + 16LL) == 94)
    {
      int v15 = *((unsigned __int8 *)v14 + 18);
      if ((v15 - 1) >= 2)
      {
        if (v15 != 5 || !*((_DWORD *)v14 + 2))
        {
          *(_DWORD *)a5 = 0;
          *(void *)(a5 + 8) = 0LL;
          *(_DWORD *)(a5 + 16) = 0;
LABEL_20:
          goto LABEL_21;
        }

        int v14 = *(swift::Demangle::__runtime::Node **)v14;
      }

      if (*(_DWORD *)a5) {
        return this;
      }
      goto LABEL_20;
    }

void anonymous namespace'::Remangler::mangleIdentifierImpl( _anonymous_namespace_::Remangler *this, swift::Demangle::__runtime::Node *a2, int a3)
{
  {
    if (a3)
    {
      swift::Mangle::__runtime::translateOperator(*(char **)a2, *((void *)a2 + 1), &__p);
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        unint64_t size = __p.__r_.__value_.__s.__size_;
      }
      else {
        unint64_t size = __p.__r_.__value_.__l.__size_;
      }
    }

    else
    {
    }

    unint64_t v8 = *((void *)this + 1585);
    if (v8 > 0xF)
    {
      int v10 = *((_DWORD *)this + 3178) + 16;
      std::string __p = v11;
      int v13 = v10;
      std::__hash_table<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::__runtime::SubstitutionEntry,std::pair<swift::Demangle::__runtime::SubstitutionEntry const,unsigned int>>( (uint64_t)this + 12688,  (uint64_t)&__p,  &__p);
    }

    else
    {
      *((void *)this + 1585) = v8 + 1;
      int v9 = (char *)this + 24 * v8 + 12296;
      *(_OWORD *)int v9 = *(_OWORD *)&v11.__r_.__value_.__l.__data_;
      v9[16] = v11.__r_.__value_.__s.__data_[16];
    }
  }

void swift::Mangle::__runtime::mangleIdentifier<anonymous namespace'::Remangler>( uint64_t a1, char *a2, unint64_t a3)
{
  std::string::size_type v3 = a3;
  uint64_t v4 = a2;
  unsigned int v5 = (void **)a1;
  unint64_t v6 = *(unsigned int *)(a1 + 12768);
  if (!*(_BYTE *)(a1 + 12752) || (v7 = swift::Mangle::__runtime::needsPunycodeEncoding(a2, a3), std::string::size_type v3 = a3, !v7))
  {
    std::string::size_type v18 = 0LL;
    uint64_t v130 = v5 + 1595;
    unint64_t v131 = v6;
    unint64_t v128 = (unsigned int *)(v5 + 1591);
    int v129 = v4;
    int v124 = v5 + 1597;
    std::string::size_type v19 = -1LL;
    uint64_t v122 = (16 * v6) | 8;
    while (1)
    {
      if (v18 >= v3)
      {
        int v22 = 0;
        if (v19 == -1LL) {
          goto LABEL_20;
        }
      }

      else
      {
        int v22 = v4[v18];
        if (v19 == -1LL) {
          goto LABEL_20;
        }
      }

      if (!v22
        || v22 == 95
        || (v22 - 65) <= 0x19 && v4[v18 - 1] - 91 <= 0xFFFFFFE5)
      {
        break;
      }

__n128 swift::Demangle::__runtime::Vector<swift::Mangle::__runtime::WordReplacement>::push_back( uint64_t a1, __n128 *a2, void *a3)
{
  unsigned int v5 = *(_DWORD *)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 12);
  int v7 = *(__n128 **)a1;
  if (v5 >= v6)
  {
    int v9 = &v7[v6];
    int v10 = (char *)a3[1];
    if (v9 == (__n128 *)v10)
    {
      unsigned int v12 = (char *)&v9[1];
      unint64_t v11 = a3[2];
      if ((unint64_t)v12 <= v11)
      {
        a3[1] = v12;
        LODWORD(v13) = 1;
LABEL_17:
        *(_DWORD *)(a1 + 12) = v6 + v13;
        goto LABEL_18;
      }
    }

    else
    {
      unint64_t v11 = a3[2];
    }

    else {
      uint64_t v13 = (2 * v6);
    }
    uint64_t v14 = v13 + v6;
    int v7 = (__n128 *)((unint64_t)(v10 + 7) & 0xFFFFFFFFFFFFFFF8LL);
    if (!v7 || (unint64_t)v7[v14].n128_u64 > v11)
    {
      unint64_t v15 = 2LL * a3[4];
      if (v15 <= ((v14 * 16) | 8uLL)) {
        unint64_t v15 = (v14 * 16) | 8;
      }
      a3[4] = v15;
      unint64_t v16 = v15 + 8;
      unint64_t v17 = malloc(v15 + 8);
      std::string::size_type v18 = (char *)v17 + v16;
      *unint64_t v17 = a3[3];
      int v7 = (__n128 *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8LL);
      a3[2] = v18;
      a3[3] = v17;
    }

    a3[1] = &v7[v14];
    if ((_DWORD)v6)
    {
      memcpy(v7, *(const void **)a1, 16 * v6);
      unsigned int v5 = *(_DWORD *)(a1 + 8);
      LODWORD(v6) = *(_DWORD *)(a1 + 12);
    }

    *(void *)a1 = v7;
    goto LABEL_17;
  }

uint64_t *anonymous namespace'::Remangler::mangleKeyPathThunkHelper@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, const void *a3@<X2>, size_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  int v12 = *(unsigned __int8 *)(a2 + 18);
  uint64_t v13 = (swift::Demangle::__runtime::Node **)a2;
  if ((v12 - 1) >= 2)
  {
    if (v12 == 5)
    {
      uint64_t v14 = *(swift::Demangle::__runtime::Node **)a2;
      uint64_t v13 = *(swift::Demangle::__runtime::Node ***)a2;
      goto LABEL_9;
    }

    uint64_t v13 = 0LL;
  }

  if (v12 == 1)
  {
    unint64_t v15 = (swift::Demangle::__runtime::Node **)(a2 + 8);
    if (v13 != (swift::Demangle::__runtime::Node **)(a2 + 8)) {
      goto LABEL_18;
    }
LABEL_21:
    __n128 result = (uint64_t *)swift::Demangle::__runtime::CharVector::append( (char **)(a1 + 12728),  a3,  a4,  *(void **)(a1 + 12744));
    int v17 = *(unsigned __int8 *)(a2 + 18);
    std::string::size_type v18 = (swift::Demangle::__runtime::Node **)a2;
    if ((v17 - 1) >= 2)
    {
      if (v17 == 5)
      {
        std::string::size_type v19 = *(swift::Demangle::__runtime::Node **)a2;
        std::string::size_type v18 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_29:
        size_t v20 = (swift::Demangle::__runtime::Node **)((char *)v19 + 8 * *(unsigned int *)(a2 + 8));
        if (v18 == v20) {
          goto LABEL_41;
        }
        goto LABEL_36;
      }

      std::string::size_type v18 = 0LL;
    }

    switch(v17)
    {
      case 1:
        size_t v20 = (swift::Demangle::__runtime::Node **)(a2 + 8);
        if (v18 == v20) {
          goto LABEL_41;
        }
        break;
      case 2:
        size_t v20 = (swift::Demangle::__runtime::Node **)(a2 + 16);
        if (v18 == v20) {
          goto LABEL_41;
        }
        break;
      case 5:
        std::string::size_type v19 = *(swift::Demangle::__runtime::Node **)a2;
        goto LABEL_29;
      default:
        size_t v20 = 0LL;
        if (!v18)
        {
LABEL_41:
          *(_DWORD *)a6 = 0;
          *(void *)(a6 + 8) = 0LL;
          *(_DWORD *)(a6 + 16) = 0;
          return result;
        }

        break;
    }

uint64_t *anonymous namespace'::Remangler::mangleProtocolList@<X0>( uint64_t *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, swift::Demangle::__runtime::Node *a3@<X2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v9 = (uint64_t)this;
  int v11 = *((unsigned __int8 *)a2 + 18);
  if (v11 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    int v12 = *a2;
    goto LABEL_7;
  }

  int v12 = 0LL;
LABEL_7:
  BOOL v55 = 1;
  int v13 = *((unsigned __int8 *)v12 + 18);
  uint64_t v14 = v12;
  if ((v13 - 1) >= 2)
  {
    if (v13 == 5)
    {
      unint64_t v15 = *(swift::Demangle::__runtime::Node **)v12;
      uint64_t v14 = *(swift::Demangle::__runtime::Node **)v12;
      goto LABEL_15;
    }

    uint64_t v14 = 0LL;
  }

  switch(v13)
  {
    case 1:
      unint64_t v16 = (swift::Demangle::__runtime::Node *)((char *)v12 + 8);
      goto LABEL_49;
    case 2:
      unint64_t v16 = (swift::Demangle::__runtime::Node *)((char *)v12 + 16);
LABEL_49:
      unsigned int v23 = *(_DWORD *)(v9 + 12736);
      size_t v24 = *(unsigned int *)(v9 + 12740);
      size_t v25 = *(char **)(v9 + 12728);
      if (v23 < v24)
      {
LABEL_65:
        *(_DWORD *)(v9 + 12736) = v23 + 1;
        v25[v23] = 121;
        goto LABEL_66;
      }

      size_t v26 = *(void **)(v9 + 12744);
      uint64_t v27 = (char *)v26[1];
      if (&v25[v24] == v27)
      {
        unint64_t v29 = (unint64_t)&v25[v24 + 1];
        unint64_t v28 = v26[2];
        if (v29 <= v28)
        {
          v26[1] = v29;
          LODWORD(v31) = 1;
LABEL_64:
          *(_DWORD *)(v9 + 12740) = v24 + v31;
          goto LABEL_65;
        }
      }

      else
      {
        unint64_t v28 = v26[2];
      }

      int v54 = a5;
      int v30 = a4;
      else {
        uint64_t v31 = (2 * v24);
      }
      size_t v32 = v31 + v24;
      if (!v27 || (unint64_t)&v27[v32] > v28)
      {
        unint64_t v33 = 2LL * v26[4];
        if (v33 <= v32 + 1) {
          unint64_t v33 = v32 + 1;
        }
        void v26[4] = v33;
        unint64_t v34 = v33 + 8;
        this = (uint64_t *)malloc(v33 + 8);
        size_t v35 = (char *)this + v34;
        *this = v26[3];
        uint64_t v27 = (char *)(this + 1);
        void v26[2] = v35;
        void v26[3] = this;
      }

      v26[1] = &v27[v32];
      if ((_DWORD)v24)
      {
        this = (uint64_t *)memcpy(v27, *(const void **)(v9 + 12728), v24);
        LODWORD(v24) = *(_DWORD *)(v9 + 12740);
        unsigned int v23 = *(_DWORD *)(v9 + 12736);
      }

      a4 = v30;
      *(void *)(v9 + 12728) = v27;
      size_t v25 = v27;
      a5 = v54;
      goto LABEL_64;
    case 5:
      unint64_t v15 = *(swift::Demangle::__runtime::Node **)v12;
LABEL_15:
      unint64_t v16 = (swift::Demangle::__runtime::Node *)((char *)v15 + 8 * *((unsigned int *)v12 + 2));
      if (v14 != v16) {
        goto LABEL_24;
      }
      goto LABEL_49;
  }

  unint64_t v16 = 0LL;
  if (!v14) {
    goto LABEL_49;
  }
  do
  {
LABEL_24:
    int v17 = *(swift::Demangle::__runtime::Node **)v14;
    if (*(_WORD *)(*(void *)v14 + 16LL) != 232) {
      goto LABEL_31;
    }
    int v18 = *((unsigned __int8 *)v17 + 18);
    if (v18 == 5 && *((_DWORD *)v17 + 2))
    {
      int v17 = *(swift::Demangle::__runtime::Node **)v17;
LABEL_29:
      int v17 = *(swift::Demangle::__runtime::Node **)v17;
      goto LABEL_31;
    }

    int v17 = 0LL;
LABEL_31:
    {
      int v19 = *((unsigned __int8 *)v17 + 18);
      size_t v20 = (swift::Demangle::__runtime::Node **)v17;
      if ((v19 - 1) >= 2)
      {
        if (v19 == 5)
        {
          unsigned int v21 = *(swift::Demangle::__runtime::Node **)v17;
          size_t v20 = *(swift::Demangle::__runtime::Node ***)v17;
LABEL_40:
          int v22 = (swift::Demangle::__runtime::Node **)((char *)v21 + 8 * *((unsigned int *)v17 + 2));
          goto LABEL_46;
        }

        size_t v20 = 0LL;
      }

      switch(v19)
      {
        case 1:
          int v22 = (swift::Demangle::__runtime::Node **)((char *)v17 + 8);
          goto LABEL_46;
        case 2:
          int v22 = (swift::Demangle::__runtime::Node **)((char *)v17 + 16);
          goto LABEL_46;
        case 5:
          unsigned int v21 = *(swift::Demangle::__runtime::Node **)v17;
          goto LABEL_40;
      }

      int v22 = 0LL;
LABEL_46:
      while (v20 != v22)
      {
        if (*(_DWORD *)a6) {
          return this;
        }
        ++v20;
      }
    }

    *(_DWORD *)a6 = 0;
    *(void *)(a6 + 8) = 0LL;
    *(_DWORD *)(a6 + 16) = 0;
    uint64_t v14 = (swift::Demangle::__runtime::Node *)((char *)v14 + 8);
  }

  while (v14 != v16);
  if (v55) {
    goto LABEL_49;
  }
LABEL_66:
  if (!a3)
  {
    size_t v40 = *(void **)(v9 + 12744);
    if (a4)
    {
      unsigned int v39 = "Xl";
      unint64_t v37 = (char **)(v9 + 12728);
      unint64_t v38 = *(void **)(v9 + 12744);
LABEL_75:
      this = (uint64_t *)swift::Demangle::__runtime::CharVector::append(v37, v39, 2uLL, v38);
      int v41 = 0;
      a3 = 0LL;
      int v42 = 0;
      goto LABEL_96;
    }

    unsigned int v43 = *(_DWORD *)(v9 + 12736);
    size_t v44 = *(unsigned int *)(v9 + 12740);
    unint64_t v45 = *(char **)(v9 + 12728);
    uint64_t v46 = (char *)v40[1];
    if (&v45[v44] == v46)
    {
      unint64_t v48 = (unint64_t)&v45[v44 + 1];
      unint64_t v47 = v40[2];
      if (v48 <= v47)
      {
        v40[1] = v48;
        LODWORD(v49) = 1;
LABEL_94:
        *(_DWORD *)(v9 + 12740) = v44 + v49;
LABEL_95:
        int v41 = 0;
        a3 = 0LL;
        int v42 = 0;
        *(_DWORD *)(v9 + 12736) = v43 + 1;
        v45[v43] = 112;
        goto LABEL_96;
      }
    }

    else
    {
      unint64_t v47 = v40[2];
    }

    else {
      uint64_t v49 = (2 * v44);
    }
    size_t v50 = v49 + v44;
    if (!v46 || (unint64_t)&v46[v50] > v47)
    {
      unint64_t v51 = 2LL * v40[4];
      if (v51 <= v50 + 1) {
        unint64_t v51 = v50 + 1;
      }
      _WORD v40[4] = v51;
      unint64_t v52 = v51 + 8;
      this = (uint64_t *)malloc(v51 + 8);
      int v53 = (char *)this + v52;
      *this = v40[3];
      uint64_t v46 = (char *)(this + 1);
      v40[2] = v53;
      void v40[3] = this;
    }

    v40[1] = &v46[v50];
    if ((_DWORD)v44)
    {
      this = (uint64_t *)memcpy(v46, *(const void **)(v9 + 12728), v44);
      LODWORD(v44) = *(_DWORD *)(v9 + 12740);
      unsigned int v43 = *(_DWORD *)(v9 + 12736);
    }

    *(void *)(v9 + 12728) = v46;
    unint64_t v45 = v46;
    goto LABEL_94;
  }

  int v36 = *((unsigned __int8 *)a3 + 18);
  if (v36 == 1) {
    goto LABEL_71;
  }
  if (v36 != 5 || *((_DWORD *)a3 + 2) != 1)
  {
    int v42 = 321;
    int v41 = 10;
LABEL_96:
    *(_DWORD *)a6 = v41;
    *(void *)(a6 + 8) = a3;
    *(_DWORD *)(a6 + 16) = v42;
    return this;
  }

  a3 = *(swift::Demangle::__runtime::Node **)a3;
LABEL_71:
  if (!*(_DWORD *)a6)
  {
    unint64_t v37 = (char **)(v9 + 12728);
    unint64_t v38 = *(void **)(v9 + 12744);
    unsigned int v39 = "Xc";
    goto LABEL_75;
  }

  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleAutoDiffFunctionOrSimpleThunk@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, const void *a3@<X2>, size_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  int v11 = *(unsigned __int8 *)(a2 + 18);
  int v12 = (swift::Demangle::__runtime::Node **)a2;
  if ((v11 - 1) >= 2)
  {
    if (v11 == 5) {
      int v12 = *(swift::Demangle::__runtime::Node ***)a2;
    }
    else {
      int v12 = 0LL;
    }
  }

  unsigned int v13 = a5 + 1;
  while (1)
  {
    int v14 = *(unsigned __int8 *)(a2 + 18);
    if (v14 != 5) {
      break;
    }
LABEL_16:
    int v17 = *v12;
    if (*((_WORD *)*v12 + 8) == 321) {
      goto LABEL_19;
    }
    ++v12;
    if (*(_DWORD *)a6) {
      return result;
    }
  }

  if (v14 == 1) {
    unint64_t v15 = (swift::Demangle::__runtime::Node **)(a2 + 8);
  }
  else {
    unint64_t v15 = 0LL;
  }
  if (v14 == 2) {
    unint64_t v16 = (swift::Demangle::__runtime::Node **)(a2 + 16);
  }
  else {
    unint64_t v16 = v15;
  }
  if (v12 != v16) {
    goto LABEL_16;
  }
LABEL_19:
  int v19 = (char **)(a1 + 12728);
  swift::Demangle::__runtime::CharVector::append((char **)(a1 + 12728), a3, a4, *(void **)(a1 + 12744));
  if (!*(_DWORD *)a6)
  {
    if (!*(_DWORD *)a6)
    {
      unsigned int v20 = *(_DWORD *)(a1 + 12736);
      size_t v21 = *(unsigned int *)(a1 + 12740);
      int v22 = *(char **)(a1 + 12728);
      if (v20 >= v21)
      {
        unsigned int v23 = *(void **)(a1 + 12744);
        size_t v24 = (char *)v23[1];
        if (&v22[v21] != v24)
        {
          unint64_t v25 = v23[2];
          goto LABEL_25;
        }

        unint64_t v26 = (unint64_t)&v22[v21 + 1];
        unint64_t v25 = v23[2];
        if (v26 <= v25)
        {
          v23[1] = v26;
          int v33 = 1;
        }

        else
        {
LABEL_25:
          LODWORD(v27) = 2 * v21;
          else {
            uint64_t v27 = v27;
          }
          int v46 = v27;
          size_t v28 = v27 + v21;
          if (!v24 || (unint64_t)&v24[v28] > v25)
          {
            unint64_t v29 = 2LL * v23[4];
            if (v29 <= v28 + 1) {
              unint64_t v29 = v28 + 1;
            }
            void v23[4] = v29;
            unint64_t v30 = v29 + 8;
            uint64_t v31 = malloc(v29 + 8);
            size_t v32 = (char *)v31 + v30;
            *uint64_t v31 = v23[3];
            size_t v24 = (char *)(v31 + 1);
            void v23[2] = v32;
            void v23[3] = v31;
          }

          v23[1] = &v24[v28];
          if ((_DWORD)v21)
          {
            memcpy(v24, *(const void **)(a1 + 12728), v21);
            LODWORD(v21) = *(_DWORD *)(a1 + 12740);
            unsigned int v20 = *(_DWORD *)(a1 + 12736);
          }

          int v33 = v46;
          swift::Demangle::__runtime::Node *v19 = v24;
          int v22 = v24;
        }

        *(_DWORD *)(a1 + 12740) = v21 + v33;
      }

      *(_DWORD *)(a1 + 12736) = v20 + 1;
      v22[v20] = 112;
      if (!*(_DWORD *)a6)
      {
        unsigned int v34 = *(_DWORD *)(a1 + 12736);
        size_t v35 = *(unsigned int *)(a1 + 12740);
        int v36 = *(char **)(a1 + 12728);
        if (v34 >= v35)
        {
          unint64_t v37 = *(void **)(a1 + 12744);
          unint64_t v38 = (char *)v37[1];
          if (&v36[v35] != v38)
          {
            unint64_t v39 = v37[2];
            goto LABEL_43;
          }

          unint64_t v40 = (unint64_t)&v36[v35 + 1];
          unint64_t v39 = v37[2];
          if (v40 <= v39)
          {
            v37[1] = v40;
            LODWORD(v41) = 1;
          }

          else
          {
LABEL_43:
            else {
              uint64_t v41 = (2 * v35);
            }
            size_t v42 = v41 + v35;
            if (!v38 || (unint64_t)&v38[v42] > v39)
            {
              unint64_t v43 = 2LL * v37[4];
              if (v43 <= v42 + 1) {
                unint64_t v43 = v42 + 1;
              }
              v37[4] = v43;
              unint64_t v44 = v43 + 8;
              __n128 result = (uint64_t *)malloc(v43 + 8);
              unint64_t v45 = (char *)result + v44;
              *__n128 result = v37[3];
              unint64_t v38 = (char *)(result + 1);
              void v37[2] = v45;
              v37[3] = result;
            }

            v37[1] = &v38[v42];
            if ((_DWORD)v35)
            {
              __n128 result = (uint64_t *)memcpy(v38, *(const void **)(a1 + 12728), v35);
              LODWORD(v35) = *(_DWORD *)(a1 + 12740);
              unsigned int v34 = *(_DWORD *)(a1 + 12736);
            }

            swift::Demangle::__runtime::Node *v19 = v38;
            int v36 = v38;
          }

          *(_DWORD *)(a1 + 12740) = v35 + v41;
        }

        *(_DWORD *)(a1 + 12736) = v34 + 1;
        v36[v34] = 114;
        *(_DWORD *)a6 = 0;
        *(void *)(a6 + 8) = 0LL;
        *(_DWORD *)(a6 + 16) = 0;
      }
    }
  }

  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>>>::find<swift::Demangle::__runtime::SubstitutionEntry>( void *a1, uint64_t a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0LL;
  }
  unint64_t v4 = *(void *)(a2 + 8);
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v2);
  v5.i16[0] = vaddlv_u8(v5);
  unint64_t v6 = v5.u32[0];
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v7 = *(void *)(a2 + 8);
    if (v4 >= *(void *)&v2) {
      unint64_t v7 = v4 % *(void *)&v2;
    }
  }

  else
  {
    unint64_t v7 = (*(void *)&v2 - 1LL) & v4;
  }

  unint64_t v8 = *(uint64_t ***)(*a1 + 8 * v7);
  if (!v8) {
    return 0LL;
  }
  for (uint64_t i = *v8; i; uint64_t i = (uint64_t *)*i)
  {
    unint64_t v10 = i[1];
    if (v10 == v4)
    {
      if (i[3] == *(void *)(a2 + 8) && *((unsigned __int8 *)i + 32) == *(unsigned __int8 *)(a2 + 16))
      {
        int v11 = *(swift::Demangle::__runtime::Node **)a2;
        if (*((_BYTE *)i + 32))
        {
          if (swift::Demangle::__runtime::SubstitutionEntry::identifierEquals( (swift::Demangle::__runtime::SubstitutionEntry *)i[2],  *(swift::Demangle::__runtime::Node **)a2,  v11))
          {
            return i;
          }
        }

        else if ((swift::Demangle::__runtime::SubstitutionEntry::deepEquals( (swift::Demangle::__runtime::SubstitutionEntry *)(i + 2),  (swift::Demangle::__runtime::Node *)i[2],  v11) & 1) != 0)
        {
          return i;
        }
      }
    }

    else
    {
      if (v6 <= 1)
      {
        v10 &= *(void *)&v2 - 1LL;
      }

      else if (v10 >= *(void *)&v2)
      {
        v10 %= *(void *)&v2;
      }

      if (v10 != v7) {
        return 0LL;
      }
    }
  }

  return i;
}

char *std::__hash_table<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::__runtime::SubstitutionEntry,std::pair<swift::Demangle::__runtime::SubstitutionEntry const,unsigned int>>( uint64_t a1, uint64_t a2, _OWORD *a3)
{
  unint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v9.i16[0] = vaddlv_u8(v9);
    unint64_t v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v3 = *(void *)(a2 + 8);
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }

    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }

    int v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      int v12 = (char *)*v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = *((void *)v12 + 1);
          if (v13 == v6)
          {
            if (*((void *)v12 + 3) == *(void *)(a2 + 8) && v12[32] == *(_BYTE *)(a2 + 16))
            {
              int v14 = *(swift::Demangle::__runtime::Node **)a2;
              if (v12[32])
              {
                if (swift::Demangle::__runtime::SubstitutionEntry::identifierEquals( *((swift::Demangle::__runtime::SubstitutionEntry **)v12 + 2),  *(swift::Demangle::__runtime::Node **)a2,  v14))
                {
                  return v12;
                }
              }

              else if ((swift::Demangle::__runtime::SubstitutionEntry::deepEquals( (swift::Demangle::__runtime::SubstitutionEntry *)(v12 + 16),  *((swift::Demangle::__runtime::Node **)v12 + 2),  v14) & 1) != 0)
              {
                return v12;
              }
            }
          }

          else
          {
            if (v10 <= 1)
            {
              v13 &= v7 - 1;
            }

            else if (v13 >= v7)
            {
              v13 %= v7;
            }

            if (v13 != v3) {
              break;
            }
          }

          int v12 = *(char **)v12;
        }

        while (v12);
      }
    }
  }

  int v12 = (char *)operator new(0x30uLL);
  *(void *)int v12 = 0LL;
  *((void *)v12 + 1) = v6;
  __int128 v15 = a3[1];
  *((_OWORD *)v12 + 1) = *a3;
  *((_OWORD *)v12 + 2) = v15;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v17 = *(float *)(a1 + 32);
  if (!v7 || (float)(v17 * (float)v7) < v16)
  {
    BOOL v18 = 1LL;
    if (v7 >= 3) {
      BOOL v18 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v7);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t prime = v20;
    }
    else {
      size_t prime = v19;
    }
    if (prime == 1)
    {
      size_t prime = 2LL;
    }

    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }

    int8x8_t v22 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v22) {
      goto LABEL_36;
    }
    if (prime < *(void *)&v22)
    {
      unint64_t v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v22 < 3uLL || (uint8x8_t v24 = (uint8x8_t)vcnt_s8(v22), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        unint64_t v23 = std::__next_prime(v23);
      }

      else
      {
        uint64_t v25 = 1LL << -(char)__clz(v23 - 1);
        if (v23 >= 2) {
          unint64_t v23 = v25;
        }
      }

      if (prime <= v23) {
        size_t prime = v23;
      }
      if (prime < *(void *)&v22) {
LABEL_36:
      }
        std::__hash_table<swift::TargetMetadata<swift::InProcess> const*,std::hash<swift::TargetMetadata<swift::InProcess> const*>,std::equal_to<swift::TargetMetadata<swift::InProcess> const*>,std::allocator<swift::TargetMetadata<swift::InProcess> const*>>::__do_rehash<true>( a1,  prime);
    }

    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }

    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }

  uint64_t v26 = *(void *)a1;
  uint64_t v27 = *(void **)(*(void *)a1 + 8 * v3);
  if (v27)
  {
    *(void *)int v12 = *v27;
LABEL_60:
    *uint64_t v27 = v12;
    goto LABEL_61;
  }

  *(void *)int v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v26 + 8 * v3) = a1 + 16;
  if (*(void *)v12)
  {
    unint64_t v28 = *(void *)(*(void *)v12 + 8LL);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v28 >= v7) {
        v28 %= v7;
      }
    }

    else
    {
      v28 &= v7 - 1;
    }

    uint64_t v27 = (void *)(*(void *)a1 + 8 * v28);
    goto LABEL_60;
  }

uint64_t __swift::__runtime::llvm::function_ref<swift::Demangle::__runtime::Node * ()(swift::Demangle::__runtime::SymbolicReferenceKind,void const*)>::callback_fn<swift::Demangle::__runtime::mangleNode(swift::Demangle::__runtime::Node *)::$_0>()
{
  return 0LL;
}

const char *swift::Demangle::__runtime::getNodeKindString(unsigned int a1)
{
  if (a1 > 0x162) {
    return "Demangle::Node::Kind::???";
  }
  else {
    return off_189B8E698[(__int16)a1];
  }
}

double swift::Demangle::__runtime::getNodeTreeAsString@<D0>( swift::Demangle::__runtime *this@<X0>, std::string *a2@<X8>)
{
  double result = *(double *)&v5.__r_.__value_.__l.__data_;
  *a2 = v5;
  return result;
}

void printNode(std::string *a1, const swift::Demangle::__runtime::Node *a2, int a3)
{
  for (int i = 2 * a3; i; --i)
    std::string::push_back(a1, 32);
  if (!a2)
  {
    std::string::append(a1, "<<NULL>>", 8uLL);
    return;
  }

  std::string::append(a1, "kind=", 5uLL);
  unint64_t v7 = (char *)a2 + 16;
  NodeKindString = swift::Demangle::__runtime::getNodeKindString(*((unsigned __int16 *)a2 + 8));
  std::string::size_type v9 = strlen(NodeKindString);
  std::string::append(a1, NodeKindString, v9);
  int v10 = *((unsigned __int8 *)a2 + 18);
  if (v10 == 3)
  {
    std::string::append(a1, ", text=", 8uLL);
    std::string::append(a1, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    std::string::push_back(a1, 34);
    int v10 = *((unsigned __int8 *)a2 + 18);
  }

  if (v10 == 4)
  {
    std::string::append(a1, ", index=", 8uLL);
    swift::Demangle::__runtime::DemanglerPrinter::operator<<(a1, *(void *)a2);
  }

  std::string::push_back(a1, 10);
  int v11 = *((unsigned __int8 *)a2 + 18);
  int v12 = (const std::string::value_type *)a2;
  if ((v11 - 1) >= 2)
  {
    if (v11 == 5)
    {
      unint64_t v13 = *(const std::string::value_type **)a2;
      int v12 = *(const std::string::value_type **)a2;
      goto LABEL_17;
    }

    int v12 = 0LL;
  }

  switch(v11)
  {
    case 1:
      unint64_t v7 = (char *)a2 + 8;
LABEL_20:
      if (v12 == v7) {
        return;
      }
      goto LABEL_21;
    case 2:
      goto LABEL_20;
    case 5:
      unint64_t v13 = *(const std::string::value_type **)a2;
LABEL_17:
      unint64_t v7 = &v13[8 * *((unsigned int *)a2 + 2)];
      if (v12 == v7) {
        return;
      }
      goto LABEL_21;
  }

  unint64_t v7 = 0LL;
  if (!v12) {
    return;
  }
LABEL_21:
  unsigned int v14 = a3 + 1;
  do
  {
    __int128 v15 = *(const swift::Demangle::__runtime::Node **)v12;
    v12 += 8;
    printNode((swift::Demangle::__runtime::DemanglerPrinter *)a1, v15, v14);
  }

  while (v12 != v7);
}

void swift::Demangle::__runtime::Node::dump(swift::Demangle::__runtime::Node *this)
{
  std::string __p = v3;
  if ((v3.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)v3.__r_.__value_.__r.__words[0];
  }
  fputs((const char *)p_p, (FILE *)*MEMORY[0x1895F89D0]);
}

void swift::Demangle::__runtime::fatal( swift::Demangle::__runtime *this, char *a2, const char *a3, char *a4, ...)
{
}

void swift::Demangle::__runtime::fatalv( swift::Demangle::__runtime *this, char *__format, va_list a3, char *a4)
{
}

void demangleFatal(char *__format, va_list a2, char *a3)
{
  int v4 = vsnprintf(0LL, 0LL, __format, a2);
  if ((v4 & 0x80000000) == 0)
  {
    size_t v6 = (v4 + 1);
    unint64_t v7 = (char *)malloc(v6);
    if (v7)
    {
      unint64_t v8 = v7;
      if ((vsnprintf(v7, v6, __format, a2) & 0x80000000) == 0)
      {
        reportError(v8, v9);
        abort();
      }

      free(v8);
    }
  }

  reportError("unable to format fatal error message", v5);
  abort();
}

void reportError(const char *a1, const char *a2)
{
  std::string v3 = (FILE **)MEMORY[0x1895F89D0];
  fputs(a1, (FILE *)*MEMORY[0x1895F89D0]);
  fflush(*v3);
  asl_log(0LL, 0LL, 3, "%s", a1);
  std::string v5 = 0LL;
  int v10 = 0LL;
  size_t v6 = (void *)qword_18C565C20[0];
  while (1)
  {
LABEL_2:
    if (v5)
    {
      free(v5);
      int v10 = 0LL;
    }

    if (v6) {
      break;
    }
    std::string::size_type v9 = strdup(a1);
    int v10 = v9;
    while (1)
    {
      size_t v6 = (void *)__ldxr(qword_18C565C20);
      if (v6) {
        break;
      }
    }

    __clrex();
    std::string v5 = v10;
  }

  swift_asprintf(&v10, v4, v6, a1);
  unint64_t v7 = v10;
  do
  {
    unint64_t v8 = __ldxr(qword_18C565C20);
    if ((void *)v8 != v6)
    {
      __clrex();
      size_t v6 = (void *)v8;
      std::string v5 = v10;
      goto LABEL_2;
    }
  }

  while (__stlxr((unint64_t)v7, qword_18C565C20));
  if (malloc_size(v6)) {
    free(v6);
  }
}

unsigned int *swift::Demangle::__runtime::demangleOldSymbolAsNode( _WORD *a1, size_t a2, swift::Demangle::__runtime::NodeFactory *a3)
{
  std::string v3 = 0LL;
  std::string __p = 0LL;
  uint64_t v181 = 0LL;
  uint64_t v182 = 0LL;
  char __src = a1;
  size_t __len = a2;
  uint64_t v185 = a3;
  if (a2 < 2) {
    goto LABEL_4;
  }
  if (*a1 != 21599) {
    goto LABEL_3;
  }
  size_t v6 = a1 + 1;
  unint64_t v7 = a2 - 2;
  char __src = a1 + 1;
  size_t __len = a2 - 2;
  unint64_t Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(a3, 99);
  if (v7 < 2) {
    goto LABEL_228;
  }
  if (*v6 != 21332)
  {
    switch(*v6)
    {
      case 0x6F54:
        char __src = v6 + 1;
        size_t __len = v7 - 2;
        std::string::size_type v9 = a3;
        __int16 v10 = 164;
        break;
      case 0x4F54:
        char __src = v6 + 1;
        size_t __len = v7 - 2;
        std::string::size_type v9 = a3;
        __int16 v10 = 160;
        break;
      case 0x4454:
        char __src = v6 + 1;
        size_t __len = v7 - 2;
        std::string::size_type v9 = a3;
        __int16 v10 = 55;
        break;
      case 0x6454:
        char __src = v6 + 1;
        size_t __len = v7 - 2;
        std::string::size_type v9 = a3;
        __int16 v10 = 56;
        break;
      case 0x5654:
        char __src = v6 + 1;
        size_t __len = v7 - 2;
        std::string::size_type v9 = a3;
        __int16 v10 = 256;
        break;
      default:
        goto LABEL_228;
    }

    int v162 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v9, v10);
    swift::Demangle::__runtime::Node::addChild(Node, v162, a3, v163, v164);
LABEL_228:
    if (!v165) {
      goto LABEL_3;
    }
    swift::Demangle::__runtime::Node::addChild(Node, (swift::Demangle::__runtime::Node *)v165, v185, v166, v167);
    size_t v168 = __len;
    if (__len)
    {
      unint64_t v169 = v185;
      unint64_t v170 = __src;
      char __src = (char *)__src + __len;
      size_t __len = 0LL;
      int v171 = (char *)*((void *)v185 + 1);
      if (!v171 || (unint64_t)&v171[v168] > *((void *)v185 + 2))
      {
        unint64_t v172 = 2LL * *((void *)v185 + 4);
        if (v172 <= v168 + 1) {
          unint64_t v172 = v168 + 1;
        }
        *((void *)v185 + 4) = v172;
        unint64_t v173 = v172 + 8;
        uint64_t v174 = malloc(v172 + 8);
        *uint64_t v174 = *((void *)v169 + 3);
        int v171 = (char *)(v174 + 1);
        *((void *)v169 + 2) = (char *)v174 + v173;
        *((void *)v169 + 3) = v174;
      }

      *((void *)v169 + 1) = &v171[v168];
      memmove(v171, v170, v168);
      NodeWithAllocatedText = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText( v169,  221,  (uint64_t)v171,  v168);
      swift::Demangle::__runtime::Node::addChild(Node, NodeWithAllocatedText, v185, v176, v177);
    }

    std::string v3 = Node;
    goto LABEL_4;
  }

  int v11 = (unsigned __int8 *)(v6 + 1);
  size_t v12 = v7 - 2;
  char __src = v6 + 1;
  size_t __len = v7 - 2;
  if (v7 == 2) {
    goto LABEL_3;
  }
  unint64_t v13 = "u16";
  while (1)
  {
    int v14 = *v11;
    switch(v14)
    {
      case 'f':
        char __src = v11 + 1;
        size_t __len = v12 - 1;
        float v16 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(v185, 77);
        size_t v17 = __len;
        if (__len)
        {
          BOOL v18 = (char *)__src;
          int v19 = *(unsigned __int8 *)__src;
          if (v19 == 113)
          {
            char __src = (char *)__src + 1;
            --__len;
            unint64_t v20 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v185, 217);
            swift::Demangle::__runtime::Node::addChild(v16, v20, v185, v21, v22);
            size_t v17 = __len;
            unint64_t v23 = v185;
            if (!__len)
            {
              uint64_t v44 = 4294967294LL;
              goto LABEL_46;
            }

            BOOL v18 = (char *)__src;
            LOBYTE(v19) = *(_BYTE *)__src;
          }

          else
          {
            unint64_t v23 = v185;
          }

          char __src = v18 + 1;
          size_t __len = v17 - 1;
          uint64_t v44 = ((char)v19 - 48);
        }

        else
        {
          unint64_t v23 = v185;
          uint64_t v44 = 4294967294LL;
        }

unsigned int *anonymous namespace'::OldDemangler::demangleGlobal( _anonymous_namespace_::OldDemangler *this, unsigned int a2)
{
  if (a2 > 0x400) {
    return 0LL;
  }
  unint64_t v3 = *((void *)this + 4);
  if (!v3) {
    return 0LL;
  }
  std::string v5 = (_BYTE *)*((void *)this + 3);
  if (*v5 != 77)
  {
    unint64_t v8 = v3 - 2;
    if (v3 < 2 || *(_WORD *)v5 != 16720)
    {
      switch(*v5)
      {
        case 'T':
          unint64_t v9 = v3 - 1;
          *((void *)this + 3) = v5 + 1;
          *((void *)this + 4) = v9;
          if (!v9) {
            return 0LL;
          }
          int v10 = v5[1];
          switch(v10)
          {
            case 'r':
              *((void *)this + 3) = v5 + 2;
              *((void *)this + 4) = v8;
              int v11 = (void *)*((void *)this + 5);
              __int16 v12 = 200;
              break;
            case 'W':
              *((void *)this + 3) = v5 + 2;
              *((void *)this + 4) = v8;
              unint64_t Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 196);
              unsigned int v41 = a2 + 1;
              if (v42)
              {
                swift::Demangle::__runtime::Node::addChild( Node,  (swift::Demangle::__runtime::Node *)v42,  *((swift::Demangle::__runtime::NodeFactory **)this + 5),  v43,  v44);
                if (v14) {
                  goto LABEL_17;
                }
              }

              return 0LL;
            case 'R':
              *((void *)this + 3) = v5 + 2;
              *((void *)this + 4) = v8;
              int v11 = (void *)*((void *)this + 5);
              __int16 v12 = 201;
              break;
            default:
              return 0LL;
          }

          unint64_t Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(v11, v12);
            return 0LL;
          return Node;
        case 'W':
          unint64_t v23 = v3 - 1;
          *((void *)this + 3) = v5 + 1;
          *((void *)this + 4) = v23;
          unint64_t Node = 0LL;
          if (v23)
          {
            switch(v5[1])
            {
              case 'G':
                *((void *)this + 3) = v5 + 2;
                *((void *)this + 4) = v8;
                size_t v24 = (void *)*((void *)this + 5);
                __int16 v25 = 88;
                goto LABEL_65;
              case 'I':
                *((void *)this + 3) = v5 + 2;
                *((void *)this + 4) = v8;
                size_t v24 = (void *)*((void *)this + 5);
                __int16 v25 = 89;
                goto LABEL_65;
              case 'L':
                *((void *)this + 3) = v5 + 2;
                *((void *)this + 4) = v8;
                uint64_t v45 = (void *)*((void *)this + 5);
                __int16 v46 = 136;
                goto LABEL_68;
              case 'P':
                *((void *)this + 3) = v5 + 2;
                *((void *)this + 4) = v8;
                size_t v24 = (void *)*((void *)this + 5);
                __int16 v25 = 197;
                goto LABEL_65;
              case 'T':
                *((void *)this + 3) = v5 + 2;
                *((void *)this + 4) = v8;
                unint64_t Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 9);
                unsigned int v47 = a2 + 1;
                if (!v48) {
                  return 0LL;
                }
                swift::Demangle::__runtime::Node::addChild( Node,  (swift::Demangle::__runtime::Node *)v48,  *((swift::Demangle::__runtime::NodeFactory **)this + 5),  v49,  v50);
                if (!v51) {
                  return 0LL;
                }
                swift::Demangle::__runtime::Node::addChild( Node,  v51,  *((swift::Demangle::__runtime::NodeFactory **)this + 5),  v52,  v53);
                if (!v14) {
                  return 0LL;
                }
                goto LABEL_17;
              case 'V':
                *((void *)this + 3) = v5 + 2;
                *((void *)this + 4) = v8;
                size_t v6 = (void *)*((void *)this + 5);
                __int16 v7 = 253;
                goto LABEL_16;
              case 'a':
                *((void *)this + 3) = v5 + 2;
                *((void *)this + 4) = v8;
                size_t v24 = (void *)*((void *)this + 5);
                __int16 v25 = 198;
LABEL_65:
                unint64_t Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(v24, v25);
                if (!v14) {
                  return 0LL;
                }
                goto LABEL_17;
              case 'l':
                *((void *)this + 3) = v5 + 2;
                *((void *)this + 4) = v8;
                uint64_t v45 = (void *)*((void *)this + 5);
                __int16 v46 = 135;
LABEL_68:
                unint64_t Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(v45, v46);
                unsigned int v54 = a2 + 1;
                if (!v55) {
                  return 0LL;
                }
                swift::Demangle::__runtime::Node::addChild( Node,  (swift::Demangle::__runtime::Node *)v55,  *((swift::Demangle::__runtime::NodeFactory **)this + 5),  v56,  v57);
                if (!v14) {
                  return 0LL;
                }
                goto LABEL_17;
              case 't':
                *((void *)this + 3) = v5 + 2;
                *((void *)this + 4) = v8;
                unint64_t Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 6);
                if (!v58) {
                  return 0LL;
                }
                swift::Demangle::__runtime::Node::addChild( Node,  (swift::Demangle::__runtime::Node *)v58,  *((swift::Demangle::__runtime::NodeFactory **)this + 5),  v59,  v60);
                if (!v14) {
                  return 0LL;
                }
                goto LABEL_17;
              case 'v':
                *((void *)this + 3) = v5 + 2;
                *((void *)this + 4) = v8;
                unint64_t v61 = swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 73);
                uint64_t v62 = *((void *)this + 4);
                if (!v62) {
                  return 0LL;
                }
                uint64_t v63 = (unsigned int *)v61;
                size_t v64 = (unsigned __int8 *)*((void *)this + 3);
                int v65 = *v64;
                if (v65 == 100)
                {
                  uint64_t v66 = 0LL;
                }

                else
                {
                  unint64_t Node = 0LL;
                  if (v65 != 105) {
                    return Node;
                  }
                  uint64_t v66 = 1LL;
                }

                *((void *)this + 3) = v64 + 1;
                *((void *)this + 4) = v62 - 1;
                unint64_t v67 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode( *((void **)this + 5),  52,  v66);
                swift::Demangle::__runtime::Node::addChild( v63,  v67,  *((swift::Demangle::__runtime::NodeFactory **)this + 5),  v68,  v69);
                if (!v70) {
                  return 0LL;
                }
                swift::Demangle::__runtime::Node::addChild( v63,  (swift::Demangle::__runtime::Node *)v70,  *((swift::Demangle::__runtime::NodeFactory **)this + 5),  v71,  v72);
                unint64_t Node = v63;
                break;
              default:
                return Node;
            }
          }

          return Node;
        case 't':
          *((void *)this + 3) = v5 + 1;
          *((void *)this + 4) = v3 - 1;
          int v26 = (void *)*((void *)this + 5);
          __int16 v27 = 236;
LABEL_41:
          unint64_t Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(v26, v27);
          if (!v36) {
            return 0LL;
          }
          size_t v37 = (swift::Demangle::__runtime::Node *)v36;
          unint64_t v38 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 232);
          swift::Demangle::__runtime::Node::addChild( v38,  v37,  *((swift::Demangle::__runtime::NodeFactory **)this + 5),  v39,  v40);
          if (!v38) {
            return 0LL;
          }
          BOOL v18 = (swift::Demangle::__runtime::NodeFactory *)*((void *)this + 5);
          int v19 = Node;
          size_t v17 = (swift::Demangle::__runtime::Node *)v38;
          goto LABEL_18;
        case 'w':
          *((void *)this + 3) = v5 + 1;
          *((void *)this + 4) = v3 - 1;
          if ((v28 & 0xFF00000000LL) == 0) {
            return 0LL;
          }
          unsigned int v29 = v28;
          unint64_t Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 252);
          unint64_t v30 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode( *((void **)this + 5),  102,  v29);
          swift::Demangle::__runtime::Node::addChild( Node,  v30,  *((swift::Demangle::__runtime::NodeFactory **)this + 5),  v31,  v32);
          if (!v14) {
            return 0LL;
          }
          goto LABEL_17;
        default:
      }
    }

    unint64_t v20 = v5 + 2;
    *((void *)this + 3) = v20;
    *((void *)this + 4) = v3 - 2;
    if (v3 >= 3 && *v20 == 111)
    {
      *((void *)this + 3) = v20 + 1;
      *((void *)this + 4) = v3 - 3;
      __int16 v21 = 171;
    }

    else
    {
      __int16 v21 = 170;
    }

    unint64_t Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), v21);
    unint64_t v33 = *((void *)this + 4);
    if (v33 < 3) {
      return Node;
    }
    uint64_t v34 = *((void *)this + 3);
    if (*(_WORD *)v34 != 24415 || *(_BYTE *)(v34 + 2) != 84) {
      return Node;
    }
    *((void *)this + 3) = v34 + 3;
    *((void *)this + 4) = v33 - 3;
    if (v14) {
      goto LABEL_17;
    }
    return 0LL;
  }

  *((void *)this + 3) = v5 + 1;
  *((void *)this + 4) = v3 - 1;
  if (v3 != 1)
  {
    switch(v5[1])
    {
      case 'L':
        *((void *)this + 3) = v5 + 2;
        *((void *)this + 4) = v3 - 2;
        size_t v6 = (void *)*((void *)this + 5);
        __int16 v7 = 244;
        goto LABEL_16;
      case 'P':
        *((void *)this + 3) = v5 + 2;
        *((void *)this + 4) = v3 - 2;
        int v26 = (void *)*((void *)this + 5);
        __int16 v27 = 97;
        goto LABEL_41;
      case 'a':
        *((void *)this + 3) = v5 + 2;
        *((void *)this + 4) = v3 - 2;
        int v26 = (void *)*((void *)this + 5);
        __int16 v27 = 238;
        goto LABEL_41;
      case 'f':
        *((void *)this + 3) = v5 + 2;
        *((void *)this + 4) = v3 - 2;
        size_t v6 = (void *)*((void *)this + 5);
        __int16 v7 = 75;
        goto LABEL_16;
      case 'm':
        *((void *)this + 3) = v5 + 2;
        *((void *)this + 4) = v3 - 2;
        size_t v6 = (void *)*((void *)this + 5);
        __int16 v7 = 147;
        goto LABEL_16;
      case 'n':
        *((void *)this + 3) = v5 + 2;
        *((void *)this + 4) = v3 - 2;
        size_t v6 = (void *)*((void *)this + 5);
        __int16 v7 = 158;
        goto LABEL_16;
      case 'p':
        *((void *)this + 3) = v5 + 2;
        *((void *)this + 4) = v3 - 2;
        unint64_t Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 186);
        if (!v14) {
          return 0LL;
        }
        goto LABEL_17;
      default:
        break;
    }
  }

  size_t v6 = (void *)*((void *)this + 5);
  __int16 v7 = 237;
LABEL_16:
  unint64_t Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(v6, v7);
  if (!v14) {
    return 0LL;
  }
LABEL_17:
  size_t v17 = (swift::Demangle::__runtime::Node *)v14;
  BOOL v18 = (swift::Demangle::__runtime::NodeFactory *)*((void *)this + 5);
  int v19 = Node;
LABEL_18:
  swift::Demangle::__runtime::Node::addChild(v19, v17, v18, v15, v16);
  return Node;
}

unsigned int *anonymous namespace'::OldDemangler::demangleType( swift::Demangle::__runtime::NodeFactory **this, unsigned int a2)
{
  if (!v3) {
    return 0LL;
  }
  int v4 = (swift::Demangle::__runtime::Node *)v3;
  unint64_t Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(this[5], 232);
  swift::Demangle::__runtime::Node::addChild(Node, v4, this[5], v6, v7);
  return Node;
}

unsigned int *anonymous namespace'::OldDemangler::demangleProtocolConformance( swift::Demangle::__runtime::NodeFactory **this, int a2)
{
  unsigned int v3 = a2 + 1;
  if (!v4) {
    return 0LL;
  }
  std::string v5 = (swift::Demangle::__runtime::Node *)v4;
  unint64_t Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(this[5], 232);
  swift::Demangle::__runtime::Node::addChild(Node, v5, this[5], v7, v8);
  if (!Node) {
    return 0LL;
  }
  if (!v9) {
    return 0LL;
  }
  int v10 = (swift::Demangle::__runtime::Node *)v9;
  int v11 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(this[5], 232);
  swift::Demangle::__runtime::Node::addChild(v11, v10, this[5], v12, v13);
  if (!v11) {
    return 0LL;
  }
  if (!v14) {
    return 0LL;
  }
  uint64_t v15 = (swift::Demangle::__runtime::Node *)v14;
  float v16 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(this[5], 182);
  swift::Demangle::__runtime::Node::addChild(v16, (swift::Demangle::__runtime::Node *)Node, this[5], v17, v18);
  swift::Demangle::__runtime::Node::addChild(v16, (swift::Demangle::__runtime::Node *)v11, this[5], v19, v20);
  swift::Demangle::__runtime::Node::addChild(v16, v15, this[5], v21, v22);
  return v16;
}

unsigned int *anonymous namespace'::OldDemangler::demangleTypeImpl( _anonymous_namespace_::OldDemangler *this, unsigned int a2)
{
  if (a2 > 0x400) {
    return 0LL;
  }
  uint64_t v3 = *((void *)this + 4);
  if (!v3) {
    return 0LL;
  }
  std::string v5 = (char *)*((void *)this + 3);
  int v8 = *v5;
  uint64_t v6 = v5 + 1;
  char v7 = *v5;
  *((void *)this + 3) = v5 + 1;
  *((void *)this + 4) = v3 - 1;
  switch(v8)
  {
    case 'B':
      unint64_t v9 = 0LL;
      if (v3 == 1) {
        return (unsigned int *)v9;
      }
      int v10 = v5[1];
      *((void *)this + 3) = v5 + 2;
      *((void *)this + 4) = v3 - 2;
      switch(v10)
      {
        case 'B':
          int v11 = (void *)*((void *)this + 5);
          uint64_t v12 = "Builtin.UnsafeValueBuffer";
          return (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(v11, 20, v12);
        case 'O':
          int v11 = (void *)*((void *)this + 5);
          uint64_t v12 = "Builtin.UnknownObject";
          return (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(v11, 20, v12);
        case 'b':
          int v11 = (void *)*((void *)this + 5);
          uint64_t v12 = "Builtin.BridgeObject";
          return (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(v11, 20, v12);
        case 'f':
          int v65 = (void *)*((void *)this + 5);
          memset(&v108, 0, sizeof(v108));
          uint64_t v66 = "Builtin.FPIEEE";
          std::string::size_type v67 = 14LL;
          goto LABEL_100;
        case 'i':
          int v65 = (void *)*((void *)this + 5);
          memset(&v108, 0, sizeof(v108));
          uint64_t v66 = "Builtin.Int";
          std::string::size_type v67 = 11LL;
LABEL_100:
          std::string::append(&v108, v66, v67);
          unint64_t v68 = v109;
          unint64_t v69 = &v108;
          goto LABEL_101;
        case 'o':
          int v11 = (void *)*((void *)this + 5);
          uint64_t v12 = "Builtin.NativeObject";
          return (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(v11, 20, v12);
        case 'p':
          int v11 = (void *)*((void *)this + 5);
          uint64_t v12 = "Builtin.RawPointer";
          return (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(v11, 20, v12);
        case 't':
          int v11 = (void *)*((void *)this + 5);
          uint64_t v12 = "Builtin.SILToken";
          return (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(v11, 20, v12);
        case 'v':
          uint64_t v74 = *((void *)this + 4);
          if (!v74) {
            return 0LL;
          }
          unint64_t v75 = (_BYTE *)*((void *)this + 3);
          if (*v75 != 66) {
            return 0LL;
          }
          *((void *)this + 3) = v75 + 1;
          *((void *)this + 4) = v74 - 1;
          if (v74 == 1) {
            return 0LL;
          }
          int v76 = v75[1];
          switch(v76)
          {
            case 'f':
              *((void *)this + 3) = v75 + 2;
              *((void *)this + 4) = v74 - 2;
              int v65 = (void *)*((void *)this + 5);
              memset(&v108, 0, sizeof(v108));
              std::string::append(&v108, "Builtin.Vec", 0xBuLL);
              uint64_t v77 = swift::Demangle::__runtime::DemanglerPrinter::operator<<(&v108, v109);
              int v78 = v77;
              size_t v79 = "xFPIEEE";
              std::string::size_type v80 = 7LL;
              break;
            case 'p':
              *((void *)this + 3) = v75 + 2;
              *((void *)this + 4) = v74 - 2;
              int v65 = (void *)*((void *)this + 5);
              memset(&v108, 0, sizeof(v108));
              std::string::append(&v108, "Builtin.Vec", 0xBuLL);
              uint64_t v104 = swift::Demangle::__runtime::DemanglerPrinter::operator<<(&v108, v109);
              std::string::append(v104, "xRawPointer", 0xBuLL);
              size_t size = v104->__r_.__value_.__s.__size_;
              BOOL v72 = (size & 0x80u) != 0LL;
              std::string::size_type v73 = v104->__r_.__value_.__l.__size_;
              if ((size & 0x80u) == 0LL) {
                uint64_t v21 = v104;
              }
              else {
                uint64_t v21 = (std::string *)v104->__r_.__value_.__r.__words[0];
              }
              goto LABEL_104;
            case 'i':
              *((void *)this + 3) = v75 + 2;
              *((void *)this + 4) = v74 - 2;
              int v65 = (void *)*((void *)this + 5);
              memset(&v108, 0, sizeof(v108));
              std::string::append(&v108, "Builtin.Vec", 0xBuLL);
              uint64_t v77 = swift::Demangle::__runtime::DemanglerPrinter::operator<<(&v108, v109);
              int v78 = v77;
              size_t v79 = "xInt";
              std::string::size_type v80 = 4LL;
              break;
            default:
              return 0LL;
          }

          std::string::append(v77, v79, v80);
          unint64_t v68 = v107;
          unint64_t v69 = v78;
LABEL_101:
          unint64_t v70 = swift::Demangle::__runtime::DemanglerPrinter::operator<<(v69, v68);
          size_t size = v70->__r_.__value_.__s.__size_;
          BOOL v72 = (size & 0x80u) != 0LL;
          std::string::size_type v73 = v70->__r_.__value_.__l.__size_;
          if ((size & 0x80u) == 0LL) {
            uint64_t v21 = v70;
          }
          else {
            uint64_t v21 = (std::string *)v70->__r_.__value_.__r.__words[0];
          }
LABEL_104:
          if (v72) {
            size_t v23 = v73;
          }
          else {
            size_t v23 = size;
          }
          unint64_t v20 = v65;
          __int16 v22 = 20;
          break;
        case 'w':
          int v11 = (void *)*((void *)this + 5);
          uint64_t v12 = "Builtin.Word";
          return (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(v11, 20, v12);
        default:
          return (unsigned int *)v9;
      }

      goto LABEL_108;
    case 'D':
      if (!v9) {
        return (unsigned int *)v9;
      }
      unint64_t Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 232);
      swift::Demangle::__runtime::Node::addChild( Node,  v9,  *((swift::Demangle::__runtime::NodeFactory **)this + 5),  v16,  v17);
      if (!Node) {
        return 0LL;
      }
      BOOL v18 = (void *)*((void *)this + 5);
      __int16 v19 = 57;
      goto LABEL_33;
    case 'E':
      if (v3 == 1) {
        return 0LL;
      }
      if (*v6 != 82) {
        return 0LL;
      }
      *((void *)this + 3) = v5 + 2;
      *((void *)this + 4) = v3 - 2;
      if (v3 == 2 || v5[2] != 82) {
        return 0LL;
      }
      *((void *)this + 3) = v5 + 3;
      *((void *)this + 4) = v3 - 3;
      unint64_t v20 = (void *)*((void *)this + 5);
      memset(&v108, 0, sizeof(v108));
      uint64_t v21 = &v108;
      __int16 v22 = 63;
      size_t v23 = 0LL;
LABEL_108:
      unint64_t v9 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v20, v22, v21, v23);
      return (unsigned int *)v9;
    case 'F':
      int v24 = a2 + 1;
      __int16 v25 = 82;
    case 'G':
      if (!v26) {
        return 0LL;
      }
    case 'K':
      int v24 = a2 + 1;
      __int16 v25 = 11;
    case 'M':
      if (!v28) {
        return 0LL;
      }
      unint64_t Node = (unsigned int *)v28;
      BOOL v18 = (void *)*((void *)this + 5);
      __int16 v19 = 145;
      goto LABEL_33;
    case 'P':
      if (v3 == 1 || *v6 != 77) {
      *((void *)this + 3) = v5 + 2;
      }
      *((void *)this + 4) = v3 - 2;
      if (!v29) {
        return 0LL;
      }
      unint64_t Node = (unsigned int *)v29;
      BOOL v18 = (void *)*((void *)this + 5);
      __int16 v19 = 69;
LABEL_33:
      unint64_t v30 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(v18, v19);
      unint64_t v9 = (swift::Demangle::__runtime::Node *)v30;
      unint64_t v33 = (swift::Demangle::__runtime::NodeFactory *)*((void *)this + 5);
      uint64_t v34 = (swift::Demangle::__runtime::Node *)Node;
      goto LABEL_62;
    case 'Q':
      if (v3 == 1) {
      int v35 = *v6;
      }
      if (v35 != 85)
      {
        if (v35 != 117) {
        *((void *)this + 3) = v5 + 2;
        }
        *((void *)this + 4) = v3 - 2;
        return (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 308);
      }

      *((void *)this + 3) = v5 + 2;
      *((void *)this + 4) = v3 - 2;
      unint64_t v9 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode( *((void **)this + 5),  308);
      unint64_t v42 = swift::Demangle::__runtime::NodeFactory::createNode( *((void **)this + 5),  341,  (uint64_t)v108.__r_.__value_.__l.__data_);
LABEL_55:
      uint64_t v34 = (swift::Demangle::__runtime::Node *)v42;
      unint64_t v33 = (swift::Demangle::__runtime::NodeFactory *)*((void *)this + 5);
      unint64_t v30 = (unsigned int *)v9;
      goto LABEL_62;
    case 'R':
      int v36 = (void *)*((void *)this + 5);
      __int16 v37 = 123;
      goto LABEL_54;
    case 'S':
    case 'T':
      int v38 = a2 + 1;
      int v39 = 0;
    case 'W':
    case 'X':
      unint64_t v9 = 0LL;
      if (v3 == 1) {
        return (unsigned int *)v9;
      }
      switch(*v6)
      {
        case 'B':
          *((void *)this + 3) = v5 + 2;
          *((void *)this + 4) = v3 - 2;
          if (v3 == 2 || v5[2] != 71)
          {
            uint64_t v40 = 0LL;
          }

          else
          {
            *((void *)this + 3) = v5 + 3;
            *((void *)this + 4) = v3 - 3;
            if (!v40) {
              return 0LL;
            }
          }

          unint64_t v81 = swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 212);
          uint64_t v82 = *((void *)this + 4);
          if (!v82) {
            return 0LL;
          }
          unint64_t v83 = (unsigned int *)v81;
          unsigned int v84 = a2 + 1;
          break;
        case 'F':
          *((void *)this + 3) = v5 + 2;
          *((void *)this + 4) = v3 - 2;
        case 'M':
          *((void *)this + 3) = v5 + 2;
          *((void *)this + 4) = v3 - 2;
          if (!v50) {
            return 0LL;
          }
          uint64_t v40 = (unsigned __int16 *)v50;
          if (!v51) {
            return 0LL;
          }
          uint64_t v52 = (swift::Demangle::__runtime::Node *)v51;
          uint64_t v53 = (void *)*((void *)this + 5);
          __int16 v54 = 145;
          goto LABEL_82;
        case 'P':
          *((void *)this + 3) = v5 + 2;
          *((void *)this + 4) = v3 - 2;
          if (v3 == 2 || v5[2] != 77) {
          *((void *)this + 3) = v5 + 3;
          }
          *((void *)this + 4) = v3 - 3;
          if (!v55) {
            return 0LL;
          }
          uint64_t v40 = (unsigned __int16 *)v55;
          if (!v56) {
            return 0LL;
          }
          uint64_t v52 = (swift::Demangle::__runtime::Node *)v56;
          uint64_t v53 = (void *)*((void *)this + 5);
          __int16 v54 = 69;
LABEL_82:
          char v57 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(v53, v54);
          unint64_t v9 = (swift::Demangle::__runtime::Node *)v57;
          unint64_t v60 = (swift::Demangle::__runtime::NodeFactory *)*((void *)this + 5);
          goto LABEL_83;
        case 'b':
          *((void *)this + 3) = v5 + 2;
          *((void *)this + 4) = v3 - 2;
          if (!v61) {
            return 0LL;
          }
          unint64_t Node = (unsigned int *)v61;
          BOOL v18 = (void *)*((void *)this + 5);
          __int16 v19 = 210;
          goto LABEL_33;
        case 'f':
          *((void *)this + 3) = v5 + 2;
          *((void *)this + 4) = v3 - 2;
          int v24 = a2 + 1;
          __int16 v25 = 222;
        case 'o':
          *((void *)this + 3) = v5 + 2;
          *((void *)this + 4) = v3 - 2;
          if (!v62) {
            return 0LL;
          }
          unint64_t Node = (unsigned int *)v62;
          BOOL v18 = (void *)*((void *)this + 5);
          __int16 v19 = 248;
          goto LABEL_33;
        case 'u':
          *((void *)this + 3) = v5 + 2;
          *((void *)this + 4) = v3 - 2;
          if (!v63) {
            return 0LL;
          }
          unint64_t Node = (unsigned int *)v63;
          BOOL v18 = (void *)*((void *)this + 5);
          __int16 v19 = 249;
          goto LABEL_33;
        case 'w':
          *((void *)this + 3) = v5 + 2;
          *((void *)this + 4) = v3 - 2;
          if (!v64) {
            return 0LL;
          }
          unint64_t Node = (unsigned int *)v64;
          BOOL v18 = (void *)*((void *)this + 5);
          __int16 v19 = 247;
          goto LABEL_33;
        default:
          return (unsigned int *)v9;
      }

      break;
    case 'a':
      int v41 = a2 + 1;
      __int16 v14 = 234;
    case 'b':
      int v24 = a2 + 1;
      __int16 v25 = 165;
    case 'c':
      int v24 = a2 + 1;
      __int16 v25 = 22;
    case 'f':
      int v24 = a2 + 1;
      __int16 v25 = 245;
    case 'k':
      int v36 = (void *)*((void *)this + 5);
      __int16 v37 = 326;
LABEL_54:
      unint64_t v9 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v36, v37);
      if (v42) {
        goto LABEL_55;
      }
      return 0LL;
    case 'q':
    case 't':
      int v38 = a2 + 1;
      int v39 = 1;
    case 'u':
      unsigned int v43 = a2 + 1;
      if (!v44) {
        return 0LL;
      }
      uint64_t v45 = (swift::Demangle::__runtime::Node *)v44;
      if (!v46) {
        return 0LL;
      }
      unsigned int v47 = (swift::Demangle::__runtime::Node *)v46;
      unint64_t v9 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode( *((void **)this + 5),  44);
      swift::Demangle::__runtime::Node::addChild( (unsigned int *)v9,  v45,  *((swift::Demangle::__runtime::NodeFactory **)this + 5),  v48,  v49);
      unint64_t v33 = (swift::Demangle::__runtime::NodeFactory *)*((void *)this + 5);
      unint64_t v30 = (unsigned int *)v9;
      uint64_t v34 = v47;
      goto LABEL_62;
    case 'w':
    case 'x':
    default:
      switch(v7)
      {
        case 'C':
          __int16 v14 = 24;
          break;
        case 'O':
          __int16 v14 = 61;
          break;
        case 'V':
          __int16 v14 = 219;
          break;
        default:
          __int16 v14 = 101;
          break;
      }

      int v41 = a2 + 1;
  }

  while (1)
  {
    unint64_t v85 = (unsigned __int8 *)*((void *)this + 3);
    int v86 = *v85;
    if (v86 == 105)
    {
      __int16 v87 = 214;
      goto LABEL_131;
    }

    if (v86 != 109) {
      break;
    }
    __int16 v87 = 213;
LABEL_131:
    *((void *)this + 3) = v85 + 1;
    *((void *)this + 4) = v82 - 1;
    if (!v88) {
      return 0LL;
    }
    size_t v89 = (swift::Demangle::__runtime::Node *)v88;
    char v90 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 232);
    swift::Demangle::__runtime::Node::addChild( v90,  v89,  *((swift::Demangle::__runtime::NodeFactory **)this + 5),  v91,  v92);
    if (!v90) {
      return 0LL;
    }
    int v93 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), v87);
    swift::Demangle::__runtime::Node::addChild( v93,  (swift::Demangle::__runtime::Node *)v90,  *((swift::Demangle::__runtime::NodeFactory **)this + 5),  v94,  v95);
    swift::Demangle::__runtime::Node::addChild( v83,  (swift::Demangle::__runtime::Node *)v93,  *((swift::Demangle::__runtime::NodeFactory **)this + 5),  v96,  v97);
    unint64_t v9 = 0LL;
    uint64_t v82 = *((void *)this + 4);
    if (!v82) {
      return (unsigned int *)v9;
    }
  }

  if (v86 != 95) {
    return 0LL;
  }
  *((void *)this + 3) = v85 + 1;
  *((void *)this + 4) = v82 - 1;
  if (!v40)
  {
    uint64_t v52 = 0LL;
    goto LABEL_152;
  }

  unint64_t v98 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 235);
  uint64_t v99 = *((void *)this + 4);
  if (!v99) {
    goto LABEL_139;
  }
LABEL_138:
  unint64_t v100 = (_BYTE *)*((void *)this + 3);
  if (*v100 == 95)
  {
    uint64_t v52 = (swift::Demangle::__runtime::Node *)v98;
    *((void *)this + 3) = v100 + 1;
    *((void *)this + 4) = v99 - 1;
LABEL_152:
    unint64_t v9 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode( *((void **)this + 5),  211);
    swift::Demangle::__runtime::Node::addChild( (unsigned int *)v9,  (swift::Demangle::__runtime::Node *)v83,  *((swift::Demangle::__runtime::NodeFactory **)this + 5),  v105,  v106);
    if (v40)
    {
      unint64_t v60 = (swift::Demangle::__runtime::NodeFactory *)*((void *)this + 5);
      char v57 = (unsigned int *)v9;
LABEL_83:
      swift::Demangle::__runtime::Node::addChild(v57, (swift::Demangle::__runtime::Node *)v40, v60, v58, v59);
      unint64_t v33 = (swift::Demangle::__runtime::NodeFactory *)*((void *)this + 5);
      unint64_t v30 = (unsigned int *)v9;
      uint64_t v34 = v52;
LABEL_62:
      swift::Demangle::__runtime::Node::addChild(v30, v34, v33, v31, v32);
    }

    return (unsigned int *)v9;
  }

uint64_t anonymous namespace'::OldDemangler::demangleBuiltinSize( _anonymous_namespace_::OldDemangler *this, unint64_t *a2)
{
  uint64_t v2 = *((void *)this + 4);
  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = (unsigned __int8 *)*((void *)this + 3);
  int v4 = v3 + 1;
  int v5 = *v3;
  *((void *)this + 3) = v3 + 1;
  *((void *)this + 4) = v2 - 1;
  uint64_t v6 = (v5 - 48);
  *a2 = v6;
  if (v2 == 1) {
    return 0LL;
  }
  char v7 = v3 + 2;
  uint64_t v8 = v2 - 2;
  while (1)
  {
    int v9 = *v4;
    uint64_t v6 = (v9 - 48) + 10 * v6;
    *a2 = v6;
    ++v4;
    *((void *)this + 3) = v7;
    *((void *)this + 4) = v8;
    ++v7;
    if (--v8 == -1) {
      return 0LL;
    }
  }

  if (v9 != 95) {
    return 0LL;
  }
  *((void *)this + 3) = v7;
  *((void *)this + 4) = v8;
  return 1LL;
}

uint64_t anonymous namespace'::OldDemangler::demangleNatural( _anonymous_namespace_::OldDemangler *this, unint64_t *a2)
{
  uint64_t v2 = *((void *)this + 4);
  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = (unsigned __int8 *)*((void *)this + 3);
  int v4 = v3 + 1;
  int v5 = *v3;
  *((void *)this + 3) = v3 + 1;
  *((void *)this + 4) = v2 - 1;
  uint64_t v6 = (v5 - 48);
  *a2 = v6;
  if (v2 != 1)
  {
    char v7 = v3 + 2;
    uint64_t v8 = v2 - 2;
    do
    {
      int v9 = *v4;
      uint64_t v6 = (v9 - 48) + 10 * v6;
      *a2 = v6;
      ++v4;
      *((void *)this + 3) = v7;
      *((void *)this + 4) = v8;
      ++v7;
      --v8;
    }

    while (v8 != -1);
  }

  return 1LL;
}

unsigned int *anonymous namespace'::OldDemangler::demangleDeclarationName(uint64_t a1, __int16 a2, int a3)
{
  if (!v5) {
    return 0LL;
  }
  uint64_t v6 = (swift::Demangle::__runtime::Node *)v5;
  if (!v7) {
    return 0LL;
  }
  uint64_t v8 = (swift::Demangle::__runtime::Node *)v7;
  unint64_t Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*(void **)(a1 + 40), a2);
  swift::Demangle::__runtime::Node::addChild(Node, v6, *(swift::Demangle::__runtime::NodeFactory **)(a1 + 40), v10, v11);
  swift::Demangle::__runtime::Node::addChild(Node, v8, *(swift::Demangle::__runtime::NodeFactory **)(a1 + 40), v12, v13);
  uint64_t v15 = *(unsigned int ***)(a1 + 8);
  unint64_t v14 = *(void *)(a1 + 16);
  if ((unint64_t)v15 >= v14)
  {
    uint64_t v17 = *(char **)a1;
    uint64_t v18 = (uint64_t)v15 - *(void *)a1;
    uint64_t v19 = v18 >> 3;
    unint64_t v20 = (v18 >> 3) + 1;
    if (v20 >> 61) {
      abort();
    }
    uint64_t v21 = v14 - (void)v17;
    if (v21 >> 2 > v20) {
      unint64_t v20 = v21 >> 2;
    }
    else {
      unint64_t v22 = v20;
    }
    if (v22)
    {
      if (v22 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      size_t v23 = operator new(8 * v22);
    }

    else
    {
      size_t v23 = 0LL;
    }

    int v24 = (unsigned int **)&v23[8 * v19];
    __int16 v25 = &v23[8 * v22];
    *int v24 = Node;
    uint64_t v16 = v24 + 1;
    if (v15 != (unsigned int **)v17)
    {
      unint64_t v26 = (char *)v15 - v17 - 8;
      if (v26 < 0x58) {
        goto LABEL_32;
      }
      uint64_t v27 = (v26 >> 3) + 1;
      uint64_t v28 = 8 * (v27 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v29 = &v15[v28 / 0xFFFFFFFFFFFFFFF8LL];
      int v24 = (unsigned int **)((char *)v24 - v28);
      unint64_t v30 = &v23[8 * v19 - 16];
      uint64_t v31 = v15 - 2;
      uint64_t v32 = v27 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        __int128 v33 = *(_OWORD *)v31;
        *(v30 - 1) = *((_OWORD *)v31 - 1);
        *unint64_t v30 = v33;
        v30 -= 2;
        v31 -= 4;
        v32 -= 4LL;
      }

      while (v32);
      uint64_t v15 = v29;
      if (v27 != (v27 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_32:
        do
        {
          uint64_t v34 = *--v15;
          *--int v24 = v34;
        }

        while (v15 != (unsigned int **)v17);
      }

      uint64_t v15 = *(unsigned int ***)a1;
    }

    *(void *)a1 = v24;
    *(void *)(a1 + 8) = v16;
    *(void *)(a1 + 16) = v25;
    if (v15) {
      operator delete(v15);
    }
  }

  else
  {
    *uint64_t v15 = Node;
    uint64_t v16 = v15 + 1;
  }

  *(void *)(a1 + 8) = v16;
  return Node;
}

unsigned int *anonymous namespace'::OldDemangler::demangleFunctionType( _anonymous_namespace_::OldDemangler *this, __int16 a2, int a3)
{
  uint64_t v6 = *((void *)this + 4);
  if (!v6)
  {
    unint64_t Node = 0LL;
    int v13 = 0;
    BOOL v12 = 0;
    BOOL v10 = 0;
    BOOL v9 = 0;
    goto LABEL_28;
  }

  unint64_t v7 = (unsigned __int8 *)*((void *)this + 3);
  int v8 = *v7;
  BOOL v9 = v8 == 122;
  if (v8 == 122)
  {
    ++v7;
    --v6;
    *((void *)this + 3) = v7;
    *((void *)this + 4) = v6;
    if (!v6)
    {
      unint64_t Node = 0LL;
      int v13 = 0;
      BOOL v12 = 0;
      BOOL v10 = 0;
      BOOL v9 = 1;
      goto LABEL_28;
    }

    int v8 = *v7;
  }

  BOOL v10 = v8 == 121;
  if (v8 == 121)
  {
    ++v7;
    --v6;
    *((void *)this + 3) = v7;
    *((void *)this + 4) = v6;
    if (!v6)
    {
      unint64_t Node = 0LL;
      int v13 = 0;
      BOOL v12 = 0;
      BOOL v10 = 1;
      goto LABEL_28;
    }
  }

  int v11 = *v7;
  BOOL v12 = v11 == 90;
  if (v11 == 90)
  {
    ++v7;
    --v6;
    *((void *)this + 3) = v7;
    *((void *)this + 4) = v6;
    if (!v6)
    {
      unint64_t Node = 0LL;
      int v13 = 0;
      BOOL v12 = 1;
      goto LABEL_28;
    }

    int v11 = *v7;
  }

  if (v11 == 68)
  {
    *((void *)this + 3) = v7 + 1;
    *((void *)this + 4) = v6 - 1;
    if (v6 == 1)
    {
      uint64_t v6 = 0LL;
      int v13 = 46;
      ++v7;
    }

    else
    {
      int v13 = v7[1];
      v7 += 2;
      v6 -= 2LL;
      *((void *)this + 3) = v7;
      *((void *)this + 4) = v6;
    }

    HIDWORD(v15) = v13;
    LODWORD(v15) = (v13 << 24) - 1677721600;
    unsigned int v16 = (v15 >> 25);
    if (v16 <= 7 && ((1 << v16) & 0x93) != 0)
    {
      if (!v6)
      {
LABEL_27:
        unint64_t Node = 0LL;
        goto LABEL_28;
      }
    }

    else
    {
      int v13 = 0;
      if (!v6) {
        goto LABEL_27;
      }
    }
  }

  else
  {
    int v13 = 0;
  }

  if (*v7 != 89) {
    goto LABEL_27;
  }
  *((void *)this + 3) = v7 + 1;
  *((void *)this + 4) = v6 - 1;
  if (!v17) {
    return 0LL;
  }
  uint64_t v18 = (swift::Demangle::__runtime::Node *)v17;
  unint64_t Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 232);
  swift::Demangle::__runtime::Node::addChild( Node,  v18,  *((swift::Demangle::__runtime::NodeFactory **)this + 5),  v19,  v20);
  if (!Node) {
    return 0LL;
  }
LABEL_28:
  unsigned int v21 = a3 + 1;
  if (!v22) {
    return 0LL;
  }
  size_t v23 = (swift::Demangle::__runtime::Node *)v22;
  int v24 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 232);
  swift::Demangle::__runtime::Node::addChild( v24,  v23,  *((swift::Demangle::__runtime::NodeFactory **)this + 5),  v25,  v26);
  if (!v24) {
    return 0LL;
  }
  if (!v27) {
    return 0LL;
  }
  uint64_t v28 = (swift::Demangle::__runtime::Node *)v27;
  uint64_t v29 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 232);
  swift::Demangle::__runtime::Node::addChild( v29,  v28,  *((swift::Demangle::__runtime::NodeFactory **)this + 5),  v30,  v31);
  if (!v29) {
    return 0LL;
  }
  uint64_t v32 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), a2);
  if (v9)
  {
    __int128 v33 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode( *((void **)this + 5),  272);
    swift::Demangle::__runtime::Node::addChild( v32,  v33,  *((swift::Demangle::__runtime::NodeFactory **)this + 5),  v34,  v35);
    if (!v12) {
      goto LABEL_34;
    }
  }

  else if (!v12)
  {
LABEL_34:
    if (v10) {
      goto LABEL_35;
    }
    goto LABEL_41;
  }

  uint64_t v40 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode( *((void **)this + 5),  271);
  swift::Demangle::__runtime::Node::addChild( v32,  v40,  *((swift::Demangle::__runtime::NodeFactory **)this + 5),  v41,  v42);
  if (v10)
  {
LABEL_35:
    int v36 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode( *((void **)this + 5),  66);
    swift::Demangle::__runtime::Node::addChild( v32,  v36,  *((swift::Demangle::__runtime::NodeFactory **)this + 5),  v37,  v38);
    if (!v13) {
      goto LABEL_43;
    }
    goto LABEL_42;
  }

unsigned __int16 *anonymous namespace'::OldDemangler::demangleGenericSignature( _anonymous_namespace_::OldDemangler *this, int a2, int a3)
{
  uint64_t v6 = (void *)*((void *)this + 5);
  if (a3) {
    __int16 v7 = 46;
  }
  else {
    __int16 v7 = 43;
  }
  unint64_t Node = swift::Demangle::__runtime::NodeFactory::createNode(v6, v7);
  uint64_t v9 = *((void *)this + 4);
  if (v9)
  {
    BOOL v10 = (unsigned int *)Node;
    uint64_t v11 = -1LL;
    while (1)
    {
      unint64_t v15 = (unsigned __int8 *)*((void *)this + 3);
      int v16 = *v15;
      if (v16 == 122)
      {
        uint64_t v11 = 0LL;
        *((void *)this + 3) = v15 + 1;
        *((void *)this + 4) = v9 - 1;
        goto LABEL_7;
      }

      if (v16 == 82 || v16 == 114) {
        break;
      }
      uint64_t v17 = v15 + 1;
      *((void *)this + 3) = v15 + 1;
      *((void *)this + 4) = v9 - 1;
      if (v16 == 95)
      {
        uint64_t v18 = 0LL;
      }

      else
      {
        uint64_t v20 = (v16 - 48);
        unsigned int v21 = v15 + 2;
        uint64_t v22 = v9 - 2;
        while (1)
        {
          int v23 = *v17;
          uint64_t v20 = (v23 - 48) + 10 * v20;
          ++v17;
          *((void *)this + 3) = v21;
          *((void *)this + 4) = v22;
          ++v21;
          if (--v22 == -1) {
            return 0LL;
          }
        }

        if (v23 != 95) {
          return 0LL;
        }
        *((void *)this + 3) = v21;
        *((void *)this + 4) = v22;
        uint64_t v18 = v20 + 1;
      }

      uint64_t v11 = v18 + 1;
LABEL_7:
      BOOL v12 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode( *((void **)this + 5),  37,  v11);
      swift::Demangle::__runtime::Node::addChild( v10,  v12,  *((swift::Demangle::__runtime::NodeFactory **)this + 5),  v13,  v14);
      uint64_t v9 = *((void *)this + 4);
      if (!v9) {
        return 0LL;
      }
    }

    if (v11 != -1
      || (v24 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode( *((void **)this + 5),  37,  1LL),  swift::Demangle::__runtime::Node::addChild( v10,  v24,  *((swift::Demangle::__runtime::NodeFactory **)this + 5),  v25,  v26),  (uint64_t v9 = *((void *)this + 4)) != 0))
    {
      uint64_t v27 = (unsigned __int8 *)*((void *)this + 3);
      int v28 = *v27;
      if (v28 == 114)
      {
LABEL_105:
        *((void *)this + 3) = v27 + 1;
        *((void *)this + 4) = v9 - 1;
        return (unsigned __int16 *)v10;
      }

      if (v28 == 82)
      {
        --v9;
        unsigned int v29 = a2 + 2;
        int v30 = a2 + 4;
        *((void *)this + 3) = v27 + 1;
        *((void *)this + 4) = v9;
        if (v9) {
          goto LABEL_29;
        }
LABEL_42:
        if (v33)
        {
          while (1)
          {
            unsigned int v43 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 232);
            swift::Demangle::__runtime::Node::addChild( v43,  v33,  *((swift::Demangle::__runtime::NodeFactory **)this + 5),  v44,  v45);
            if (!v43) {
              return 0LL;
            }
            uint64_t v48 = *((void *)this + 4);
            if (!v48) {
              return 0LL;
            }
            uint64_t v49 = (unsigned __int8 *)*((void *)this + 3);
            unsigned int v50 = *v49;
            if (v50 <= 0x6B) {
              break;
            }
            if (v50 != 108)
            {
              if (v50 == 122)
              {
                *((void *)this + 3) = v49 + 1;
                *((void *)this + 4) = v48 - 1;
                if (!result) {
                  return result;
                }
                uint64_t v56 = (swift::Demangle::__runtime::Node *)result;
                uint64_t v53 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 232);
                swift::Demangle::__runtime::Node::addChild( v53,  v56,  *((swift::Demangle::__runtime::NodeFactory **)this + 5),  v57,  v58);
                if (!v53) {
                  return 0LL;
                }
                uint64_t v59 = (void *)*((void *)this + 5);
                __int16 v60 = 39;
                goto LABEL_67;
              }

unint64_t anonymous namespace'::OldDemangler::demangleMetatypeRepresentation( _anonymous_namespace_::OldDemangler *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = (unsigned __int8 *)*((void *)this + 3);
  int v3 = *v2;
  if (v3 == 116)
  {
    int v4 = "@thin";
    goto LABEL_9;
  }

  if (v3 == 111)
  {
    int v4 = "@objc_metatype";
    goto LABEL_9;
  }

  if (v3 != 84) {
    return 0LL;
  }
  int v4 = "@thick";
LABEL_9:
  *((void *)this + 3) = v2 + 1;
  *((void *)this + 4) = v1 - 1;
  return swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 146, v4);
}

unsigned int *anonymous namespace'::OldDemangler::demangleProtocolList( _anonymous_namespace_::OldDemangler *this, int a2)
{
  unint64_t Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 190);
  int v5 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode( *((void **)this + 5),  235);
  swift::Demangle::__runtime::Node::addChild(Node, v5, *((swift::Demangle::__runtime::NodeFactory **)this + 5), v6, v7);
  unsigned int v8 = a2 + 1;
  uint64_t v9 = *((void *)this + 4);
  if (v9)
  {
LABEL_2:
    BOOL v10 = (_BYTE *)*((void *)this + 3);
    if (*v10 != 95) {
      goto LABEL_3;
    }
    *((void *)this + 3) = v10 + 1;
    *((void *)this + 4) = v9 - 1;
  }

  else
  {
LABEL_3:
    while (1)
    {
      if (!v11) {
        return 0LL;
      }
      BOOL v12 = (swift::Demangle::__runtime::Node *)v11;
      uint64_t v13 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 232);
      swift::Demangle::__runtime::Node::addChild( v13,  v12,  *((swift::Demangle::__runtime::NodeFactory **)this + 5),  v14,  v15);
      if (!v13) {
        return 0LL;
      }
      swift::Demangle::__runtime::Node::addChild( (unsigned int *)v5,  (swift::Demangle::__runtime::Node *)v13,  *((swift::Demangle::__runtime::NodeFactory **)this + 5),  v16,  v17);
      uint64_t v9 = *((void *)this + 4);
      if (v9) {
        goto LABEL_2;
      }
    }
  }

  return Node;
}

uint64_t anonymous namespace'::OldDemangler::demangleIndex( _anonymous_namespace_::OldDemangler *this, unint64_t *a2)
{
  uint64_t v2 = *((void *)this + 4);
  if (v2)
  {
    int v3 = (unsigned __int8 *)*((void *)this + 3);
    int v4 = v3 + 1;
    int v5 = *v3;
    *((void *)this + 3) = v3 + 1;
    *((void *)this + 4) = v2 - 1;
    if (v5 == 95)
    {
      unint64_t v6 = 0LL;
LABEL_4:
      *a2 = v6;
      return 1LL;
    }

    if ((v5 - 48) <= 9)
    {
      uint64_t v8 = (v5 - 48);
      *a2 = v8;
      if (v2 != 1)
      {
        uint64_t v9 = v3 + 2;
        uint64_t v10 = v2 - 2;
        while (1)
        {
          int v11 = *v4;
          uint64_t v8 = (v11 - 48) + 10 * v8;
          *a2 = v8;
          ++v4;
          *((void *)this + 3) = v9;
          *((void *)this + 4) = v10;
          ++v9;
          if (--v10 == -1) {
            return 0LL;
          }
        }

        if (v11 == 95)
        {
          *((void *)this + 3) = v9;
          *((void *)this + 4) = v10;
          unint64_t v6 = v8 + 1;
          goto LABEL_4;
        }
      }
    }
  }

  return 0LL;
}

unsigned int *anonymous namespace'::OldDemangler::demangleArchetypeType( _anonymous_namespace_::OldDemangler *this, int a2)
{
  int v13 = a2;
  v12[0] = this;
  v12[1] = &v13;
  uint64_t v2 = *((void *)this + 4);
  if (!v2) {
    return 0LL;
  }
  int v3 = (unsigned __int8 *)*((void *)this + 3);
  int v4 = *v3;
  if (v4 == 115)
  {
    *((void *)this + 3) = v3 + 1;
    *((void *)this + 4) = v2 - 1;
    unint64_t v6 = (void *)*((void *)this + 5);
    uint64_t v7 = v6[1];
    if (v7) {
      BOOL v8 = (unint64_t)(v7 + 5) > v6[2];
    }
    else {
      BOOL v8 = 1;
    }
    if (v8)
    {
      unint64_t v9 = 2LL * v6[4];
      if (v9 <= 6) {
        unint64_t v9 = 6LL;
      }
      v6[4] = v9;
      unint64_t v10 = v9 + 8;
      int v11 = malloc(v9 + 8);
      *int v11 = v6[3];
      uint64_t v7 = (uint64_t)(v11 + 1);
      void v6[2] = (char *)v11 + v10;
      v6[3] = v11;
    }

    v6[1] = v7 + 5;
    *(_BYTE *)(v7 + 4) = 116;
    *(_DWORD *)uint64_t v7 = 1718187859;
    double result = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v6, 153, v7, 5LL);
  }

  if (v4 != 83)
  {
    if (v4 == 81)
    {
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v2 - 1;
      if (!result) {
        return result;
      }
    }

    return 0LL;
  }

  *((void *)this + 3) = v3 + 1;
  *((void *)this + 4) = v2 - 1;
  if (result) {
  return result;
  }
}

unsigned int *anonymous namespace'::OldDemangler::demangleDependentType( _anonymous_namespace_::OldDemangler *this, int a2)
{
  if (!*((void *)this + 4)) {
    return 0LL;
  }
  int v3 = **((unsigned __int8 **)this + 3);
  int v5 = a2 + 1;
  if (v6
    && (uint64_t v7 = (swift::Demangle::__runtime::Node *)v6,
        unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode( *((void **)this + 5),  232),  swift::Demangle::__runtime::Node::addChild( (unsigned int *)Node,  v7,  *((swift::Demangle::__runtime::NodeFactory **)this + 5),  v9,  v10),  Node))
  {
  }

  else
  {
    return 0LL;
  }

unsigned int *anonymous namespace'::OldDemangler::getDependentGenericParamType( _anonymous_namespace_::OldDemangler *this, swift::Demangle::__runtime *a2, unsigned int a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = a3;
  swift::Demangle::__runtime::genericParameterName((swift::Demangle::__runtime *)a2, a3, &__p);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = __p.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(&v17, (const std::string::value_type *)p_p, size);
  unint64_t Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 38);
  uint64_t v9 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode( *((void **)this + 5),  102,  v4);
  swift::Demangle::__runtime::Node::addChild( Node,  v9,  *((swift::Demangle::__runtime::NodeFactory **)this + 5),  v10,  v11);
  BOOL v12 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode( *((void **)this + 5),  102,  v5);
  swift::Demangle::__runtime::Node::addChild( Node,  v12,  *((swift::Demangle::__runtime::NodeFactory **)this + 5),  v13,  v14);
  return Node;
}

unsigned int *anonymous namespace'::OldDemangler::demangleAssociatedTypeSimple( swift::Demangle::__runtime::NodeFactory **this, int a2)
{
  if (result)
  {
    uint64_t v5 = (swift::Demangle::__runtime::Node *)result;
    unint64_t Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(this[5], 232);
    swift::Demangle::__runtime::Node::addChild(Node, v5, this[5], v7, v8);
  }

  return result;
}

swift::Demangle::__runtime::Node *anonymous namespace'::OldDemangler::demangleAssociatedTypeCompound( swift::Demangle::__runtime::NodeFactory **this, int a2)
{
  if (v4)
  {
    int v5 = a2 + 1;
    while (1)
    {
      uint64_t v9 = this[4];
      if (v9)
      {
        uint64_t v10 = this[3];
        if (*(_BYTE *)v10 == 95) {
          break;
        }
      }

      unint64_t Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(this[5], 232);
      swift::Demangle::__runtime::Node::addChild(Node, v4, this[5], v7, v8);
      if (!v4) {
        return v4;
      }
    }

    this[3] = (swift::Demangle::__runtime::NodeFactory *)((char *)v10 + 1);
    this[4] = (swift::Demangle::__runtime::NodeFactory *)((char *)v9 - 1);
  }

  return v4;
}

unsigned int *anonymous namespace'::OldDemangler::demangleSubstitutionIndex( _anonymous_namespace_::OldDemangler *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (!v1) {
    return 0LL;
  }
  int v3 = (_BYTE *)*((void *)this + 3);
  switch(*v3)
  {
    case 'C':
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v1 - 1;
      uint64_t v4 = (void *)*((void *)this + 5);
      int v5 = (_BYTE *)v4[1];
      if (v5) {
        BOOL v6 = (unint64_t)(v5 + 15) > v4[2];
      }
      else {
        BOOL v6 = 1;
      }
      if (v6)
      {
        unint64_t v7 = 2LL * v4[4];
        if (v7 <= 0x10) {
          unint64_t v7 = 16LL;
        }
        v4[4] = v7;
        unint64_t v8 = v7 + 8;
        uint64_t v9 = malloc(v7 + 8);
        *uint64_t v9 = v4[3];
        int v5 = v9 + 1;
        v4[2] = (char *)v9 + v8;
        void v4[3] = v9;
      }

      v4[1] = v5 + 15;
      qmemcpy(v5, "__C_Synthesized", 15);
      uint64_t v10 = v4;
      uint64_t v11 = 15LL;
      return (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText( v10,  153,  (uint64_t)v5,  v11);
    case 'P':
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v1 - 1;
      BOOL v12 = "UnsafePointer";
      goto LABEL_39;
    case 'Q':
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v1 - 1;
      BOOL v12 = "ImplicitlyUnwrappedOptional";
      __int16 v13 = 61;
      size_t v14 = 27LL;
      goto LABEL_47;
    case 'R':
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v1 - 1;
      BOOL v12 = "UnsafeBufferPointer";
      __int16 v13 = 219;
      size_t v14 = 19LL;
      goto LABEL_47;
    case 'S':
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v1 - 1;
      BOOL v12 = "String";
      goto LABEL_41;
    case 'V':
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v1 - 1;
      BOOL v12 = "UnsafeRawPointer";
      __int16 v13 = 219;
      size_t v14 = 16LL;
      goto LABEL_47;
    case 'a':
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v1 - 1;
      BOOL v12 = "Array";
      goto LABEL_36;
    case 'b':
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v1 - 1;
      BOOL v12 = "Bool";
      goto LABEL_45;
    case 'c':
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v1 - 1;
      BOOL v12 = "UnicodeScalar";
LABEL_39:
      __int16 v13 = 219;
      size_t v14 = 13LL;
      goto LABEL_47;
    case 'd':
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v1 - 1;
      BOOL v12 = "Double";
LABEL_41:
      __int16 v13 = 219;
      size_t v14 = 6LL;
      goto LABEL_47;
    case 'f':
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v1 - 1;
      BOOL v12 = "Float";
LABEL_36:
      __int16 v13 = 219;
      size_t v14 = 5LL;
      goto LABEL_47;
    case 'i':
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v1 - 1;
      BOOL v12 = "Int";
      __int16 v13 = 219;
      size_t v14 = 3LL;
      goto LABEL_47;
    case 'o':
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v1 - 1;
      unint64_t v15 = (void *)*((void *)this + 5);
      int v5 = (_BYTE *)v15[1];
      if (v5) {
        BOOL v16 = (unint64_t)(v5 + 3) > v15[2];
      }
      else {
        BOOL v16 = 1;
      }
      if (v16)
      {
        unint64_t v17 = 2LL * v15[4];
        if (v17 <= 4) {
          unint64_t v17 = 4LL;
        }
        v15[4] = v17;
        unint64_t v18 = v17 + 8;
        uint64_t v19 = malloc(v17 + 8);
        void *v19 = v15[3];
        int v5 = v19 + 1;
        v15[2] = (char *)v19 + v18;
        void v15[3] = v19;
      }

      v15[1] = v5 + 3;
      void v5[2] = 67;
      *(_WORD *)int v5 = 24415;
      uint64_t v10 = v15;
      uint64_t v11 = 3LL;
      return (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText( v10,  153,  (uint64_t)v5,  v11);
    case 'p':
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v1 - 1;
      BOOL v12 = "UnsafeMutablePointer";
      __int16 v13 = 219;
      size_t v14 = 20LL;
      goto LABEL_47;
    case 'q':
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v1 - 1;
      BOOL v12 = "Optional";
      __int16 v13 = 61;
      size_t v14 = 8LL;
      goto LABEL_47;
    case 'r':
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v1 - 1;
      BOOL v12 = "UnsafeMutableBufferPointer";
      __int16 v13 = 219;
      size_t v14 = 26LL;
      goto LABEL_47;
    case 'u':
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v1 - 1;
      BOOL v12 = "UInt";
LABEL_45:
      __int16 v13 = 219;
      size_t v14 = 4LL;
      goto LABEL_47;
    case 'v':
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v1 - 1;
      BOOL v12 = "UnsafeMutableRawPointer";
      __int16 v13 = 219;
      size_t v14 = 23LL;
LABEL_47:
      break;
    default:
        || v21 >= (uint64_t)(*((void *)this + 1) - *(void *)this) >> 3)
      {
        return 0LL;
      }

      double result = *(unsigned int **)(*(void *)this + 8 * v21);
      break;
  }

  return result;
}

unsigned int *anonymous namespace'::OldDemangler::demangleTuple(uint64_t a1, int a2, int a3)
{
  unint64_t Node = swift::Demangle::__runtime::NodeFactory::createNode(*(void **)(a1 + 40), 223);
  uint64_t v8 = *(void *)(a1 + 32);
  if (!v8) {
    return 0LL;
  }
  uint64_t v9 = (unsigned int *)Node;
  uint64_t v10 = *(_BYTE **)(a1 + 24);
  if (*v10 != 95)
  {
    unsigned int v15 = a3 + 1;
    while (1)
    {
      uint64_t v11 = (int8x16_t *)swift::Demangle::__runtime::NodeFactory::createNode(*(void **)(a1 + 40), 224);
      if (!*(void *)(a1 + 32)) {
        break;
      }
      int v16 = **(unsigned __int8 **)(a1 + 24);
      if (v16 != 111) {
        goto LABEL_12;
      }
LABEL_13:
      unint64_t v3 = v3 & 0xFFFFFFFF00000000LL | 0x100E1;
      if (!v17) {
        return 0LL;
      }
      swift::Demangle::__runtime::Node::addChild( (unsigned int *)v11,  v17,  *(swift::Demangle::__runtime::NodeFactory **)(a1 + 40),  v18,  v19);
LABEL_15:
      if (!v20) {
        return 0LL;
      }
      unint64_t v21 = (swift::Demangle::__runtime::Node *)v20;
      uint64_t v22 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*(void **)(a1 + 40), 232);
      swift::Demangle::__runtime::Node::addChild( v22,  v21,  *(swift::Demangle::__runtime::NodeFactory **)(a1 + 40),  v23,  v24);
      if (!v22) {
        return 0LL;
      }
      swift::Demangle::__runtime::Node::addChild( (unsigned int *)v11,  (swift::Demangle::__runtime::Node *)v22,  *(swift::Demangle::__runtime::NodeFactory **)(a1 + 40),  v25,  v26);
      swift::Demangle::__runtime::Node::addChild( v9,  (swift::Demangle::__runtime::Node *)v11,  *(swift::Demangle::__runtime::NodeFactory **)(a1 + 40),  v27,  v28);
      uint64_t v8 = *(void *)(a1 + 32);
      if (!v8) {
        return 0LL;
      }
      uint64_t v10 = *(_BYTE **)(a1 + 24);
      if (*v10 == 95) {
        goto LABEL_4;
      }
    }

    int v16 = 46;
LABEL_12:
    goto LABEL_13;
  }

  uint64_t v11 = 0LL;
LABEL_4:
  *(void *)(a1 + 24) = v10 + 1;
  *(void *)(a1 + 32) = v8 - 1;
  if (a2 == 1 && v11)
  {
    swift::Demangle::__runtime::Node::reverseChildren(v11, 0LL);
    BOOL v12 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode( *(void **)(a1 + 40),  276);
    swift::Demangle::__runtime::Node::addChild( (unsigned int *)v11,  v12,  *(swift::Demangle::__runtime::NodeFactory **)(a1 + 40),  v13,  v14);
    swift::Demangle::__runtime::Node::reverseChildren(v11, 0LL);
  }

  return v9;
}

swift::Demangle::__runtime::Node *anonymous namespace'::OldDemangler::demangleImplFunctionType( _anonymous_namespace_::OldDemangler *this, int a2)
{
  unint64_t Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 115);
  uint64_t v5 = *((void *)this + 4);
  if (v5 && (BOOL v6 = (_BYTE *)*((void *)this + 3), *v6 == 116))
  {
    *((void *)this + 3) = v6 + 1;
    *((void *)this + 4) = v5 - 1;
    unint64_t v7 = "@convention(thin)";
    size_t v8 = 17LL;
  }

  else
  {
    if (!v10) {
      return 0LL;
    }
    unint64_t v7 = v9;
    size_t v8 = v10;
  }

  uint64_t v11 = (void *)*((void *)this + 5);
  BOOL v12 = (char *)v11[1];
  if (v12) {
    BOOL v13 = (unint64_t)&v12[v8] > v11[2];
  }
  else {
    BOOL v13 = 1;
  }
  if (v13)
  {
    unint64_t v14 = 2LL * v11[4];
    if (v14 <= v8 + 1) {
      unint64_t v14 = v8 + 1;
    }
    v11[4] = v14;
    unint64_t v15 = v14 + 8;
    int v16 = malloc(v14 + 8);
    unint64_t v17 = (char *)v16 + v15;
    *int v16 = v11[3];
    BOOL v12 = (char *)(v16 + 1);
    void v11[2] = v17;
    void v11[3] = v16;
  }

  v11[1] = &v12[v8];
  memmove(v12, v7, v8);
  unint64_t NodeWithAllocatedText = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText( v11,  106,  (uint64_t)v12,  v8);
  swift::Demangle::__runtime::Node::addChild( Node,  NodeWithAllocatedText,  *((swift::Demangle::__runtime::NodeFactory **)this + 5),  v19,  v20);
  uint64_t v21 = *((void *)this + 4);
  if (!v21) {
    return 0LL;
  }
  uint64_t v22 = (_BYTE *)*((void *)this + 3);
  if (*v22 == 67)
  {
    *((void *)this + 3) = v22 + 1;
    *((void *)this + 4) = v21 - 1;
    double result = 0LL;
    if (v21 != 1)
    {
      int v24 = "block";
      size_t v25 = 5LL;
      switch(v22[1])
      {
        case 'O':
          int v24 = "objc_method";
          size_t v25 = 11LL;
          goto LABEL_22;
        case 'b':
          goto LABEL_22;
        case 'c':
          int v24 = "c";
          size_t v25 = 1LL;
          goto LABEL_22;
        case 'm':
          int v24 = "method";
          size_t v25 = 6LL;
          goto LABEL_22;
        case 'w':
          int v24 = "witness_method";
          size_t v25 = 14LL;
LABEL_22:
          *((void *)this + 3) = v22 + 2;
          *((void *)this + 4) = v21 - 2;
          unint64_t v26 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 113);
          uint64_t v27 = (void *)*((void *)this + 5);
          int v28 = (char *)v27[1];
          if (!v28 || (unint64_t)&v28[v25] > v27[2])
          {
            unint64_t v29 = 2LL * v27[4];
            if (v29 <= v25 + 1) {
              unint64_t v29 = v25 + 1;
            }
            v27[4] = v29;
            unint64_t v30 = v29 + 8;
            int v31 = malloc(v29 + 8);
            uint64_t v32 = (char *)v31 + v30;
            *int v31 = v27[3];
            int v28 = (char *)(v31 + 1);
            void v27[2] = v32;
            void v27[3] = v31;
          }

          v27[1] = &v28[v25];
          memmove(v28, v24, v25);
          __int128 v33 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText( v27,  114,  (uint64_t)v28,  v25);
          swift::Demangle::__runtime::Node::addChild( v26,  v33,  *((swift::Demangle::__runtime::NodeFactory **)this + 5),  v34,  v35);
          swift::Demangle::__runtime::Node::addChild( Node,  (swift::Demangle::__runtime::Node *)v26,  *((swift::Demangle::__runtime::NodeFactory **)this + 5),  v36,  v37);
          uint64_t v21 = *((void *)this + 4);
          if (v21) {
            goto LABEL_28;
          }
          return 0LL;
        default:
          return result;
      }
    }

    return result;
  }

unsigned int *anonymous namespace'::OldDemangler::demangleContext( _anonymous_namespace_::OldDemangler *this, int a2)
{
  uint64_t v2 = *((void *)this + 4);
  if (v2)
  {
    uint64_t v5 = (_BYTE *)*((void *)this + 3);
    switch(*v5)
    {
      case 'E':
        *((void *)this + 3) = v5 + 1;
        *((void *)this + 4) = v2 - 1;
        unint64_t Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 71);
        unsigned int v7 = a2 + 1;
        if (!v8) {
          return 0LL;
        }
        uint64_t v9 = (swift::Demangle::__runtime::Node *)v8;
        if (!v10) {
          return 0LL;
        }
        BOOL v13 = (swift::Demangle::__runtime::Node *)v10;
        swift::Demangle::__runtime::Node::addChild( Node,  v9,  *((swift::Demangle::__runtime::NodeFactory **)this + 5),  v11,  v12);
        int v16 = (swift::Demangle::__runtime::NodeFactory *)*((void *)this + 5);
        unint64_t v17 = Node;
        uint64_t v18 = v13;
        goto LABEL_18;
      case 'G':
        *((void *)this + 3) = v5 + 1;
        *((void *)this + 4) = v2 - 1;
        if (!v24) {
          return 0LL;
        }
      case 'S':
        *((void *)this + 3) = v5 + 1;
        *((void *)this + 4) = v2 - 1;
      case 'e':
        *((void *)this + 3) = v5 + 1;
        *((void *)this + 4) = v2 - 1;
        unint64_t Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 71);
        unsigned int v25 = a2 + 1;
        if (!v26) {
          return 0LL;
        }
        uint64_t v27 = (swift::Demangle::__runtime::Node *)v26;
        if (!v28) {
          return 0LL;
        }
        unint64_t v29 = v28;
        if (!v30) {
          return 0LL;
        }
        __int128 v33 = (swift::Demangle::__runtime::Node *)v30;
        swift::Demangle::__runtime::Node::addChild( Node,  v27,  *((swift::Demangle::__runtime::NodeFactory **)this + 5),  v31,  v32);
        swift::Demangle::__runtime::Node::addChild( Node,  v33,  *((swift::Demangle::__runtime::NodeFactory **)this + 5),  v34,  v35);
        int v16 = (swift::Demangle::__runtime::NodeFactory *)*((void *)this + 5);
        unint64_t v17 = Node;
        uint64_t v18 = (swift::Demangle::__runtime::Node *)v29;
LABEL_18:
        swift::Demangle::__runtime::Node::addChild(v17, v18, v16, v14, v15);
        return Node;
      case 's':
        *((void *)this + 3) = v5 + 1;
        *((void *)this + 4) = v2 - 1;
        uint64_t v36 = (void *)*((void *)this + 5);
        uint64_t v37 = v36[1];
        if (v37) {
          BOOL v38 = (unint64_t)(v37 + 5) > v36[2];
        }
        else {
          BOOL v38 = 1;
        }
        if (v38)
        {
          unint64_t v39 = 2LL * v36[4];
          if (v39 <= 6) {
            unint64_t v39 = 6LL;
          }
          v36[4] = v39;
          unint64_t v40 = v39 + 8;
          uint64_t v41 = malloc(v39 + 8);
          void *v41 = v36[3];
          uint64_t v37 = (uint64_t)(v41 + 1);
          void v36[2] = (char *)v41 + v40;
          void v36[3] = v41;
        }

        v36[1] = v37 + 5;
        *(_BYTE *)(v37 + 4) = 116;
        *(_DWORD *)uint64_t v37 = 1718187859;
        return (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v36, 153, v37, 5LL);
      default:
        unsigned int v19 = (char)*v5 - 67;
        BOOL v38 = v19 > 0x33;
        uint64_t v20 = (1LL << v19) & 0x9000000883049LL;
        unsigned int v21 = a2 + 1;
        if (v38 || v20 == 0) {
        else
        }
    }
  }

  return 0LL;
}

unint64_t anonymous namespace'::OldDemangler::demangleDeclName( _anonymous_namespace_::OldDemangler *this)
{
  uint64_t v2 = *((void *)this + 4);
  if (!v2) {
  unint64_t v3 = (unsigned __int8 *)*((void *)this + 3);
  }
  int v4 = *v3;
  if (v4 == 80)
  {
    *((void *)this + 3) = v3 + 1;
    *((void *)this + 4) = v2 - 1;
    if (v15)
    {
      uint64_t v9 = (swift::Demangle::__runtime::Node *)v15;
      if (v16)
      {
        uint64_t v11 = (swift::Demangle::__runtime::Node *)v16;
        BOOL v12 = (void *)*((void *)this + 5);
        __int16 v13 = 176;
        goto LABEL_14;
      }
    }

    return 0LL;
  }

  if (v4 != 76) {
  *((void *)this + 3) = v3 + 1;
  }
  *((void *)this + 4) = v2 - 1;
  if (v2 == 1) {
    return 0LL;
  }
  int v5 = v3[1];
  BOOL v6 = v3 + 2;
  *((void *)this + 3) = v3 + 2;
  *((void *)this + 4) = v2 - 2;
  if (v5 == 95)
  {
    uint64_t v7 = 0LL;
  }

  else
  {
    unint64_t v17 = 0LL;
    uint64_t v22 = (v5 - 48);
    uint64_t v23 = v3 + 3;
    uint64_t v24 = v2 - 3;
    while (1)
    {
      int v25 = *v6;
      uint64_t v22 = (v25 - 48) + 10 * v22;
      ++v6;
      *((void *)this + 3) = v23;
      *((void *)this + 4) = v24;
      ++v23;
      if (--v24 == -1) {
        return 0LL;
      }
    }

    if (v25 != 95) {
      return 0LL;
    }
    *((void *)this + 3) = v23;
    *((void *)this + 4) = v24;
    uint64_t v7 = v22 + 1;
  }

  unint64_t Node = swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 161, v7);
  if (!Node) {
    return 0LL;
  }
  uint64_t v9 = (swift::Demangle::__runtime::Node *)Node;
  if (!v10) {
    return 0LL;
  }
  uint64_t v11 = (swift::Demangle::__runtime::Node *)v10;
  BOOL v12 = (void *)*((void *)this + 5);
  __int16 v13 = 137;
LABEL_14:
  unint64_t v17 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(v12, v13);
  swift::Demangle::__runtime::Node::addChild(v17, v9, *((swift::Demangle::__runtime::NodeFactory **)this + 5), v18, v19);
  swift::Demangle::__runtime::Node::addChild( v17,  v11,  *((swift::Demangle::__runtime::NodeFactory **)this + 5),  v20,  v21);
  return (unint64_t)v17;
}

unint64_t anonymous namespace'::OldDemangler::demangleModule( _anonymous_namespace_::OldDemangler *this)
{
  uint64_t v2 = *((void *)this + 4);
  if (!v2) {
    goto LABEL_13;
  }
  unint64_t v3 = (unsigned __int8 *)*((void *)this + 3);
  int v4 = *v3;
  if (v4 == 83)
  {
    *((void *)this + 3) = v3 + 1;
    *((void *)this + 4) = v2 - 1;
    if (!v17) {
      return 0LL;
    }
    if (*((_WORD *)v17 + 8) == 153) {
      return (unint64_t)v17;
    }
    return 0LL;
  }

  if (v4 != 115)
  {
LABEL_13:
    unint64_t v13 = v12;
    if (v12)
    {
      unint64_t v15 = (unint64_t *)*((void *)this + 1);
      unint64_t v14 = *((void *)this + 2);
      if ((unint64_t)v15 >= v14)
      {
        uint64_t v18 = *(unint64_t **)this;
        uint64_t v19 = (uint64_t)v15 - *(void *)this;
        uint64_t v20 = v19 >> 3;
        unint64_t v21 = (v19 >> 3) + 1;
        if (v21 >> 61) {
          abort();
        }
        uint64_t v22 = v14 - (void)v18;
        if (v22 >> 2 > v21) {
          unint64_t v21 = v22 >> 2;
        }
        else {
          unint64_t v23 = v21;
        }
        if (v23)
        {
          if (v23 >> 61) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          uint64_t v24 = operator new(8 * v23);
        }

        else
        {
          uint64_t v24 = 0LL;
        }

        int v25 = (unint64_t *)&v24[8 * v20];
        unint64_t v26 = &v24[8 * v23];
        *int v25 = v13;
        unint64_t v16 = v25 + 1;
        if (v15 != v18)
        {
          unint64_t v27 = (char *)v15 - (char *)v18 - 8;
          if (v27 < 0x58) {
            goto LABEL_47;
          }
          uint64_t v28 = (v27 >> 3) + 1;
          uint64_t v29 = 8 * (v28 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v30 = &v15[v29 / 0xFFFFFFFFFFFFFFF8LL];
          int v25 = (unint64_t *)((char *)v25 - v29);
          uint64_t v31 = &v24[8 * v20 - 16];
          uint64_t v32 = v15 - 2;
          uint64_t v33 = v28 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            __int128 v34 = *(_OWORD *)v32;
            *(v31 - 1) = *((_OWORD *)v32 - 1);
            *uint64_t v31 = v34;
            v31 -= 2;
            v32 -= 4;
            v33 -= 4LL;
          }

          while (v33);
          unint64_t v15 = v30;
          if (v28 != (v28 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_47:
            do
            {
              unint64_t v35 = *--v15;
              *--int v25 = v35;
            }

            while (v15 != v18);
          }

          unint64_t v15 = *(unint64_t **)this;
        }

        *(void *)this = v25;
        *((void *)this + 1) = v16;
        *((void *)this + 2) = v26;
        if (v15) {
          operator delete(v15);
        }
      }

      else
      {
        *unint64_t v15 = v12;
        unint64_t v16 = v15 + 1;
      }

      *((void *)this + 1) = v16;
    }

    return v13;
  }

  *((void *)this + 3) = v3 + 1;
  *((void *)this + 4) = v2 - 1;
  int v5 = (void *)*((void *)this + 5);
  uint64_t v6 = v5[1];
  if (v6) {
    BOOL v7 = (unint64_t)(v6 + 5) > v5[2];
  }
  else {
    BOOL v7 = 1;
  }
  if (v7)
  {
    unint64_t v8 = 2LL * v5[4];
    if (v8 <= 6) {
      unint64_t v8 = 6LL;
    }
    v5[4] = v8;
    unint64_t v9 = v8 + 8;
    unint64_t v10 = malloc(v8 + 8);
    *unint64_t v10 = v5[3];
    uint64_t v6 = (uint64_t)(v10 + 1);
    void v5[2] = (char *)v10 + v9;
    v5[3] = v10;
  }

  v5[1] = v6 + 5;
  *(_BYTE *)(v6 + 4) = 116;
  *(_DWORD *)uint64_t v6 = 1718187859;
  return swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v5, 153, v6, 5LL);
}

unsigned int *anonymous namespace'::OldDemangler::demangleEntity( _anonymous_namespace_::OldDemangler *this, unsigned int a2)
{
  if (a2 > 0x400) {
    return 0LL;
  }
  uint64_t v5 = *((void *)this + 4);
  if (!v5) {
  uint64_t v6 = (_BYTE *)*((void *)this + 3);
  }
  int v7 = *v6;
  if (v7 != 90)
  {
    if (v7 != 70) {
      goto LABEL_8;
    }
LABEL_14:
    int v9 = 0;
    __int16 v10 = 76;
    goto LABEL_17;
  }

  ++v6;
  --v5;
  *((void *)this + 3) = v6;
  *((void *)this + 4) = v5;
  if (!v5) {
  if (*v6 == 70)
  }
    goto LABEL_14;
LABEL_8:
  int v8 = *v6;
  switch(v8)
  {
    case 'I':
      __int16 v10 = 125;
      int v9 = 1;
      goto LABEL_17;
    case 'i':
      int v9 = 0;
      __int16 v10 = 220;
LABEL_17:
      *((void *)this + 3) = v6 + 1;
      *((void *)this + 4) = v5 - 1;
      unsigned int v11 = a2 + 1;
      if (v12)
      {
        unint64_t v13 = (swift::Demangle::__runtime::Node *)v12;
        uint64_t v14 = *((void *)this + 4);
        if (v14)
        {
          unint64_t v15 = (unsigned __int8 *)*((void *)this + 3);
          int v16 = *v15;
          int v17 = 0;
          __int16 v18 = 31;
          switch(*v15)
          {
            case 'C':
              __int16 v18 = 0;
              int v17 = 1;
              goto LABEL_44;
            case 'D':
              goto LABEL_44;
            case 'E':
              int v17 = 0;
              __int16 v18 = 104;
              goto LABEL_44;
            case 'G':
              *((void *)this + 3) = v15 + 1;
              *((void *)this + 4) = v14 - 1;
              if (!v22) {
                return 0LL;
              }
              unint64_t v23 = (_DWORD *)v22;
              __int16 v24 = 100;
              goto LABEL_72;
            case 'M':
              *((void *)this + 3) = v15 + 1;
              *((void *)this + 4) = v14 - 1;
              if (!v25) {
                return 0LL;
              }
              unint64_t v23 = (_DWORD *)v25;
              __int16 v24 = 152;
              goto LABEL_72;
            case 'U':
              *((void *)this + 3) = v15 + 1;
              *((void *)this + 4) = v14 - 1;
              if (!v26) {
                return 0LL;
              }
              uint64_t v20 = (swift::Demangle::__runtime::Node *)v26;
              __int16 v10 = 70;
              int v17 = 1;
              goto LABEL_45;
            case 'W':
              *((void *)this + 3) = v15 + 1;
              *((void *)this + 4) = v14 - 1;
              if (!v27) {
                return 0LL;
              }
              unint64_t v23 = (_DWORD *)v27;
              __int16 v24 = 51;
              goto LABEL_72;
            case 'a':
              *((void *)this + 3) = v15 + 1;
              *((void *)this + 4) = v14 - 1;
              unint64_t Node = 0LL;
              if (v14 != 1)
              {
                __int16 v24 = 169;
                switch(v15[1])
                {
                  case 'O':
                    goto LABEL_71;
                  case 'o':
                    __int16 v24 = 155;
                    goto LABEL_71;
                  case 'p':
                    __int16 v24 = 157;
                    goto LABEL_71;
                  case 'u':
                    __int16 v24 = 251;
                    goto LABEL_71;
                  default:
                    return Node;
                }
              }

              return Node;
            case 'c':
              __int16 v18 = 29;
              int v17 = 1;
              goto LABEL_44;
            case 'd':
              int v17 = 0;
              __int16 v18 = 50;
              goto LABEL_44;
            case 'e':
              int v17 = 0;
              __int16 v18 = 103;
              goto LABEL_44;
            case 'g':
              *((void *)this + 3) = v15 + 1;
              *((void *)this + 4) = v14 - 1;
              if (!v43) {
                return 0LL;
              }
              unint64_t v23 = (_DWORD *)v43;
              __int16 v24 = 98;
              goto LABEL_72;
            case 'l':
              *((void *)this + 3) = v15 + 1;
              *((void *)this + 4) = v14 - 1;
              unint64_t Node = 0LL;
              if (v14 != 1)
              {
                __int16 v24 = 168;
                switch(v15[1])
                {
                  case 'O':
                    goto LABEL_71;
                  case 'o':
                    __int16 v24 = 154;
                    goto LABEL_71;
                  case 'p':
                    __int16 v24 = 156;
                    goto LABEL_71;
                  case 'u':
                    __int16 v24 = 250;
LABEL_71:
                    *((void *)this + 3) = v15 + 2;
                    *((void *)this + 4) = v14 - 2;
                    if (v23) {
                      goto LABEL_72;
                    }
                    return 0LL;
                  default:
                    return Node;
                }
              }

              return Node;
            case 'm':
              *((void *)this + 3) = v15 + 1;
              *((void *)this + 4) = v14 - 1;
              if (!v44) {
                return 0LL;
              }
              unint64_t v23 = (_DWORD *)v44;
              __int16 v24 = 141;
              goto LABEL_72;
            case 'r':
              *((void *)this + 3) = v15 + 1;
              *((void *)this + 4) = v14 - 1;
              if (!v45) {
                return 0LL;
              }
              unint64_t v23 = (_DWORD *)v45;
              __int16 v24 = 204;
              goto LABEL_72;
            case 's':
              *((void *)this + 3) = v15 + 1;
              *((void *)this + 4) = v14 - 1;
              if (!v46) {
                return 0LL;
              }
              unint64_t v23 = (_DWORD *)v46;
              __int16 v24 = 215;
              goto LABEL_72;
            case 'u':
              *((void *)this + 3) = v15 + 1;
              *((void *)this + 4) = v14 - 1;
              if (!v47) {
                return 0LL;
              }
              uint64_t v20 = (swift::Demangle::__runtime::Node *)v47;
              __int16 v10 = 117;
              int v17 = 1;
              goto LABEL_45;
            case 'w':
              *((void *)this + 3) = v15 + 1;
              *((void *)this + 4) = v14 - 1;
              if (!v48) {
                return 0LL;
              }
              unint64_t v23 = (_DWORD *)v48;
              __int16 v24 = 257;
LABEL_72:
              uint64_t v28 = (swift::Demangle::__runtime::NodeFactory **)((char *)this + 40);
              unint64_t Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), v24);
              int v49 = *((unsigned __int16 *)v23 + 8);
              if (v49 != 176)
              {
                if (v49 != 101 || *((void *)v23 + 1) != 9LL) {
                  goto LABEL_90;
                }
                if (**(void **)v23 != 0x7069726373627573LL || *(_BYTE *)(*(void *)v23 + 8LL) != 116) {
                  goto LABEL_90;
                }
                unint64_t v23 = 0LL;
                goto LABEL_107;
              }

              int v51 = *((unsigned __int8 *)v23 + 18);
              int v52 = v23;
              if (v51 != 2)
              {
                if (v51 != 5 || v23[2] < 2u)
                {
LABEL_90:
                  uint64_t v58 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*v28, 254);
                  swift::Demangle::__runtime::Node::addChild(v58, v13, *v28, v59, v60);
                  swift::Demangle::__runtime::Node::addChild( v58,  (swift::Demangle::__runtime::Node *)v23,  *v28,  v61,  v62);
                  char v63 = 0;
                  goto LABEL_91;
                }

                int v52 = *(_DWORD **)v23;
              }

              uint64_t v53 = (uint64_t **)*((void *)v52 + 1);
              uint64_t v54 = *v53;
              uint64_t v55 = *v54;
              int v56 = *((unsigned __int8 *)v54 + 8);
              if (v55 != 0x7069726373627573LL || v56 != 116) {
                goto LABEL_90;
              }
              if (v51 == 2) {
                goto LABEL_104;
              }
              if (v23[2])
              {
                unint64_t v23 = *(_DWORD **)v23;
LABEL_104:
                unint64_t v75 = *(swift::Demangle::__runtime::Node **)v23;
              }

              else
              {
                unint64_t v75 = 0LL;
              }

              unint64_t v23 = (_DWORD *)swift::Demangle::__runtime::NodeFactory::createNode(*v28, 176);
              swift::Demangle::__runtime::Node::addChild(v23, v75, *v28, v76, v77);
LABEL_107:
              uint64_t v58 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*v28, 220);
              swift::Demangle::__runtime::Node::addChild(v58, v13, *v28, v78, v79);
              char v63 = 1;
LABEL_91:
              if (!v64) {
                return 0LL;
              }
              uint64_t v65 = (swift::Demangle::__runtime::Node *)v64;
              uint64_t v66 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*v28, 232);
              swift::Demangle::__runtime::Node::addChild(v66, v65, *v28, v67, v68);
              if (!v66) {
                return 0LL;
              }
              swift::Demangle::__runtime::Node::addChild(v58, (swift::Demangle::__runtime::Node *)v66, *v28, v69, v70);
              char v71 = v63 ^ 1;
              if (!v23) {
                char v71 = 1;
              }
              if ((v71 & 1) == 0) {
                swift::Demangle::__runtime::Node::addChild(v58, (swift::Demangle::__runtime::Node *)v23, *v28, v38, v39);
              }
              unint64_t v40 = *v28;
              uint64_t v41 = Node;
              unint64_t v42 = (swift::Demangle::__runtime::Node *)v58;
              goto LABEL_98;
            default:
              if (!v9) {
                goto LABEL_22;
              }
              if (v16 == 105)
              {
                int v17 = 0;
                __int16 v18 = 125;
LABEL_44:
                uint64_t v20 = 0LL;
                *((void *)this + 3) = v15 + 1;
                *((void *)this + 4) = v14 - 1;
                __int16 v10 = v18;
                goto LABEL_45;
              }

              if (v16 == 65)
              {
                *((void *)this + 3) = v15 + 1;
                *((void *)this + 4) = v14 - 1;
                if (v21)
                {
                  uint64_t v20 = (swift::Demangle::__runtime::Node *)v21;
                  int v17 = 0;
                  __int16 v10 = 33;
                  goto LABEL_45;
                }
              }

              return 0LL;
          }
        }

        if ((v9 & 1) == 0)
        {
LABEL_22:
          if (v19)
          {
            uint64_t v20 = (swift::Demangle::__runtime::Node *)v19;
            int v17 = 1;
LABEL_45:
            uint64_t v28 = (swift::Demangle::__runtime::NodeFactory **)((char *)this + 40);
            unint64_t Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), v10);
            swift::Demangle::__runtime::Node::addChild( Node,  v13,  *((swift::Demangle::__runtime::NodeFactory **)this + 5),  v29,  v30);
            if (v20) {
              swift::Demangle::__runtime::Node::addChild(Node, v20, *v28, v31, v32);
            }
            if (!v17) {
              goto LABEL_99;
            }
            if (v33)
            {
              __int128 v34 = (swift::Demangle::__runtime::Node *)v33;
              unint64_t v35 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*v28, 232);
              swift::Demangle::__runtime::Node::addChild(v35, v34, *v28, v36, v37);
              if (v35)
              {
                unint64_t v40 = *v28;
                uint64_t v41 = Node;
                unint64_t v42 = (swift::Demangle::__runtime::Node *)v35;
LABEL_98:
                swift::Demangle::__runtime::Node::addChild(v41, v42, v40, v38, v39);
LABEL_99:
                if (v7 == 90)
                {
                  BOOL v72 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*v28, 218);
                  swift::Demangle::__runtime::Node::addChild( v72,  (swift::Demangle::__runtime::Node *)Node,  *v28,  v73,  v74);
                  return v72;
                }

                return Node;
              }
            }
          }
        }
      }

      return 0LL;
    case 'v':
      int v9 = 0;
      __int16 v10 = 254;
      goto LABEL_17;
  }
}

unint64_t anonymous namespace'::OldDemangler::demangleIdentifier(void *a1, int a2)
{
  uint64_t v2 = a1[4];
  if (!v2) {
    return 0LL;
  }
  int v4 = (unsigned __int8 *)a1[3];
  int v5 = *v4;
  if (v5 == 88)
  {
    ++v4;
    memset(&__p, 0, sizeof(__p));
    --v2;
    a1[3] = v4;
    a1[4] = v2;
    if (!v2)
    {
LABEL_14:
      char v9 = 0;
      if (BYTE2(a2)) {
        __int16 v8 = a2;
      }
      else {
        __int16 v8 = 101;
      }
      if (!v2) {
        goto LABEL_39;
      }
      goto LABEL_22;
    }
  }

  else
  {
    memset(&__p, 0, sizeof(__p));
  }

  if (*v4 != 111) {
    goto LABEL_14;
  }
  unint64_t NodeWithAllocatedText = 0LL;
  a1[3] = v4 + 1;
  a1[4] = v2 - 1;
  if (!BYTE2(a2) && v2 != 1)
  {
    int v7 = (char)v4[1];
    v4 += 2;
    v2 -= 2LL;
    a1[3] = v4;
    a1[4] = v2;
    switch(v7)
    {
      case 'p':
        __int16 v8 = 175;
        break;
      case 'i':
        __int16 v8 = 124;
        break;
      case 'P':
        __int16 v8 = 173;
        break;
      default:
        goto LABEL_39;
    }

    char v9 = 1;
    if (!v2) {
      goto LABEL_39;
    }
LABEL_22:
    p_p = (std::string *)(v4 + 1);
    int v10 = *v4;
    unint64_t v12 = v2 - 1;
    a1[3] = v4 + 1;
    a1[4] = v12;
    unint64_t size = (v10 - 48);
    if (v12)
    {
      uint64_t v14 = v4 + 2;
      do
      {
        int v15 = p_p->__r_.__value_.__s.__data_[0];
        unint64_t size = (v15 - 48) + 10 * size;
        p_p = (std::string *)((char *)p_p + 1);
        --v12;
        a1[3] = v14;
        a1[4] = v12;
        ++v14;
      }

      while (v12);
    }

    if (v12 < size) {
      goto LABEL_39;
    }
    a1[3] = (char *)p_p + size;
    a1[4] = v12 - size;
    if (v5 != 88)
    {
LABEL_36:
      if (size)
      {
        memset(&v24, 0, sizeof(v24));
        if ((v9 & 1) != 0)
        {
          std::string::reserve(&v24, size);
          do
          {
            uint64_t v17 = p_p->__r_.__value_.__s.__data_[0];
            if ((v17 & 0x8000000000000000LL) == 0)
            {
              if ((v17 - 123) < 0xE6u
                || (uint64_t v17 = (v17 - 97), ((0x17007A2uLL >> v17) & 1) != 0))
              {
                unint64_t NodeWithAllocatedText = 0LL;
                goto LABEL_68;
              }
            }

            std::string::push_back(&v24, v17);
            p_p = (std::string *)((char *)p_p + 1);
            --size;
          }

          while (size);
          if ((v24.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            p_p = &v24;
          }
          else {
            p_p = (std::string *)v24.__r_.__value_.__r.__words[0];
          }
          if ((v24.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            unint64_t size = v24.__r_.__value_.__s.__size_;
          }
          else {
            unint64_t size = v24.__r_.__value_.__l.__size_;
          }
          __int16 v18 = (void *)a1[5];
          if (!size)
          {
            unint64_t v19 = 0LL;
            goto LABEL_67;
          }
        }

        else
        {
          __int16 v18 = (void *)a1[5];
        }

        unint64_t v19 = (char *)v18[1];
        if (v19) {
          BOOL v20 = (unint64_t)&v19[size] > v18[2];
        }
        else {
          BOOL v20 = 1;
        }
        if (v20)
        {
          unint64_t v21 = 2LL * v18[4];
          if (v21 <= size + 1) {
            unint64_t v21 = size + 1;
          }
          v18[4] = v21;
          unint64_t v22 = v21 + 8;
          unint64_t v23 = malloc(v21 + 8);
          *unint64_t v23 = v18[3];
          unint64_t v19 = (char *)(v23 + 1);
          uint64_t v18[2] = (char *)v23 + v22;
          void v18[3] = v23;
        }

        v18[1] = &v19[size];
        memmove(v19, p_p, size);
LABEL_67:
        unint64_t NodeWithAllocatedText = swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText( v18,  v8,  (uint64_t)v19,  size);
        if ((char)v24.__r_.__value_.__s.__size_ < 0) {
LABEL_68:
        }
          operator delete(v24.__r_.__value_.__l.__data_);
        goto LABEL_40;
      }

      goto LABEL_39;
    }

    if (swift::Punycode::__runtime::decodePunycodeUTF8((unsigned __int8 *)p_p, size, &__p))
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        unint64_t size = __p.__r_.__value_.__s.__size_;
      }
      else {
        unint64_t size = __p.__r_.__value_.__l.__size_;
      }
      goto LABEL_36;
    }

unsigned int *anonymous namespace'::OldDemangler::demangleNominalType( _anonymous_namespace_::OldDemangler *this, int a2)
{
  uint64_t v2 = *((void *)this + 4);
  if (!v2) {
    return 0LL;
  }
  unint64_t v3 = (_BYTE *)*((void *)this + 3);
  switch(*v3)
  {
    case 'C':
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v2 - 1;
      uint64_t v4 = (a2 + 1);
      uint64_t v5 = 24LL;
      goto LABEL_4;
    case 'O':
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v2 - 1;
      uint64_t v4 = (a2 + 1);
      uint64_t v5 = 61LL;
      goto LABEL_4;
    case 'P':
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v2 - 1;
      uint64_t v4 = (a2 + 1);
      uint64_t v5 = 180LL;
      goto LABEL_4;
    case 'S':
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v2 - 1;
    case 'V':
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v2 - 1;
      uint64_t v4 = (a2 + 1);
      uint64_t v5 = 219LL;
LABEL_4:
      break;
    default:
      return 0LL;
  }

  return result;
}

unint64_t anonymous namespace'::OldDemangler::demangleIndexAsNode(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    uint64_t v2 = *(unsigned __int8 **)(a1 + 24);
    unint64_t v3 = v2 + 1;
    int v4 = *v2;
    *(void *)(a1 + 24) = v2 + 1;
    *(void *)(a1 + 32) = v1 - 1;
    if (v4 == 95)
    {
      uint64_t v5 = 0LL;
      return swift::Demangle::__runtime::NodeFactory::createNode(*(void **)(a1 + 40), 161, v5);
    }

    if ((v4 - 58) >= 0xFFFFFFF6 && v1 != 1)
    {
      uint64_t v8 = (v4 - 48);
      char v9 = v2 + 2;
      uint64_t v10 = v1 - 2;
      while (1)
      {
        int v11 = *v3;
        uint64_t v8 = (v11 - 48) + 10 * v8;
        ++v3;
        *(void *)(a1 + 24) = v9;
        *(void *)(a1 + 32) = v10;
        ++v9;
        if (--v10 == -1) {
          return 0LL;
        }
      }

      if (v11 == 95)
      {
        *(void *)(a1 + 24) = v9;
        *(void *)(a1 + 32) = v10;
        uint64_t v5 = v8 + 1;
        return swift::Demangle::__runtime::NodeFactory::createNode(*(void **)(a1 + 40), 161, v5);
      }
    }
  }

  return 0LL;
}

swift::Demangle::__runtime::Node *anonymous namespace'::OldDemangler::demangleBoundGenericArgs( swift::Demangle::__runtime::NodeFactory **this, swift::Demangle::__runtime::Node *a2, int a3)
{
  int v4 = a2;
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 != 5 || !*((_DWORD *)a2 + 2)) {
      return 0LL;
    }
    int v7 = *(swift::Demangle::__runtime::Node **)a2;
  }

  uint64_t v8 = *(swift::Demangle::__runtime::Node **)v7;
  int v9 = *(unsigned __int16 *)(*(void *)v7 + 16LL);
  if (v9 == 71 || v9 == 76 || v9 == 153) {
    goto LABEL_30;
  }
  if (!v10) {
    return 0LL;
  }
  int v11 = (swift::Demangle::__runtime::Node *)v10;
  unint64_t Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(this[5], *((_WORD *)v4 + 8));
  swift::Demangle::__runtime::Node::addChild(Node, v11, this[5], v13, v14);
  for (unint64_t i = 1LL; ; ++i)
  {
    unint64_t v19 = *((unsigned __int8 *)v4 + 18);
    if ((_DWORD)v19 == 1)
    {
      if (v19 <= i) {
        goto LABEL_29;
      }
      goto LABEL_20;
    }

    if ((_DWORD)v19 != 5) {
      break;
    }
LABEL_20:
    unsigned int v20 = v19 - 1;
    if ((_DWORD)v19 == 1) {
      goto LABEL_23;
    }
    if ((_DWORD)v19 != 5)
    {
      unint64_t v19 = 2LL;
LABEL_23:
      if (v19 <= i) {
        goto LABEL_10;
      }
      goto LABEL_26;
    }

    if (*((unsigned int *)v4 + 2) <= i)
    {
LABEL_10:
      __int16 v18 = 0LL;
      goto LABEL_11;
    }

unsigned int *anonymous namespace'::OldDemangler::demangleProtocolNameGivenContext( swift::Demangle::__runtime::NodeFactory **this, swift::Demangle::__runtime::Node *a2)
{
  if (!v4) {
    return 0LL;
  }
  uint64_t v5 = (swift::Demangle::__runtime::Node *)v4;
  unint64_t Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(this[5], 180);
  swift::Demangle::__runtime::Node::addChild(Node, a2, this[5], v7, v8);
  swift::Demangle::__runtime::Node::addChild(Node, v5, this[5], v9, v10);
  unint64_t v12 = (char *)this[1];
  int v11 = this[2];
  if (v12 >= (char *)v11)
  {
    uint64_t v14 = *this;
    uint64_t v15 = v12 - (char *)*this;
    uint64_t v16 = v15 >> 3;
    unint64_t v17 = (v15 >> 3) + 1;
    if (v17 >> 61) {
      abort();
    }
    uint64_t v18 = v11 - v14;
    if (v18 >> 2 > v17) {
      unint64_t v17 = v18 >> 2;
    }
    else {
      unint64_t v19 = v17;
    }
    if (v19)
    {
      if (v19 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      unsigned int v20 = operator new(8 * v19);
    }

    else
    {
      unsigned int v20 = 0LL;
    }

    unint64_t v21 = (unsigned int **)&v20[8 * v16];
    unint64_t v22 = (swift::Demangle::__runtime::NodeFactory *)&v20[8 * v19];
    *unint64_t v21 = Node;
    uint64_t v13 = (swift::Demangle::__runtime::NodeFactory *)(v21 + 1);
    if (v12 != (char *)v14)
    {
      unint64_t v23 = v12 - (char *)v14 - 8;
      if (v23 < 0x58) {
        goto LABEL_31;
      }
      uint64_t v24 = (v23 >> 3) + 1;
      uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v26 = &v12[-v25];
      unint64_t v21 = (unsigned int **)((char *)v21 - v25);
      unint64_t v27 = &v20[8 * v16 - 16];
      uint64_t v28 = v12 - 16;
      uint64_t v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        __int128 v30 = *(_OWORD *)v28;
        *(v27 - 1) = *((_OWORD *)v28 - 1);
        *unint64_t v27 = v30;
        v27 -= 2;
        v28 -= 32;
        v29 -= 4LL;
      }

      while (v29);
      unint64_t v12 = v26;
      if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_31:
        do
        {
          uint64_t v31 = (unsigned int *)*((void *)v12 - 1);
          v12 -= 8;
          *--unint64_t v21 = v31;
        }

        while (v12 != (char *)v14);
      }

      unint64_t v12 = (char *)*this;
    }

    *this = (swift::Demangle::__runtime::NodeFactory *)v21;
    this[1] = v13;
    this[2] = v22;
    if (v12) {
      operator delete(v12);
    }
  }

  else
  {
    *(void *)unint64_t v12 = Node;
    uint64_t v13 = (swift::Demangle::__runtime::NodeFactory *)(v12 + 8);
  }

  this[1] = v13;
  return Node;
}

unsigned int *anonymous namespace'::OldDemangler::demangleProtocolName( swift::Demangle::__runtime::NodeFactory **this, unsigned int a2)
{
  if (!v3) {
    return 0LL;
  }
  unint64_t v4 = (swift::Demangle::__runtime::Node *)v3;
  unint64_t Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(this[5], 232);
  swift::Demangle::__runtime::Node::addChild(Node, v4, this[5], v6, v7);
  return Node;
}

unsigned int *anonymous namespace'::OldDemangler::demangleGenericParamIndex( _anonymous_namespace_::OldDemangler *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = (unsigned __int8 *)*((void *)this + 3);
  int v3 = *v2;
  if (v3 == 120)
  {
    uint64_t v8 = 0LL;
    unsigned int v11 = 0;
    *((void *)this + 3) = v2 + 1;
    *((void *)this + 4) = v1 - 1;
  }

  unint64_t v4 = v2 + 1;
  if (v3 == 100)
  {
    *((void *)this + 3) = v4;
    *((void *)this + 4) = v1 - 1;
    if (v1 != 1)
    {
      int v5 = v2[1];
      unint64_t i = v2 + 2;
      uint64_t v7 = v1 - 2;
      *((void *)this + 3) = v2 + 2;
      *((void *)this + 4) = v1 - 2;
      if (v5 == 95)
      {
        uint64_t v8 = 1LL;
        if (v1 == 2) {
          return 0LL;
        }
      }

      else
      {
        int v19 = v5 - 48;
        unsigned int v20 = v2 + 3;
        uint64_t v7 = v1 - 3;
        for (unint64_t i = v20; ; ++i)
        {
          int v21 = *(i - 1);
          int v19 = v21 + 10 * v19 - 48;
          *((void *)this + 3) = v20;
          *((void *)this + 4) = v7;
          ++v20;
          if (--v7 == -1) {
            return 0LL;
          }
        }

        if (v21 != 95) {
          return 0LL;
        }
        *((void *)this + 3) = v20;
        *((void *)this + 4) = v7;
        uint64_t v8 = (v19 + 2);
        if (!v7) {
          return 0LL;
        }
      }

      uint64_t v9 = i + 1;
      int v10 = *i;
      *((void *)this + 3) = i + 1;
      *((void *)this + 4) = v7 - 1;
      if (v10 == 95)
      {
        unsigned int v11 = 0;
      }

      if ((v10 - 58) >= 0xFFFFFFF6 && v7 != 1)
      {
        int v23 = v10 - 48;
        uint64_t v24 = i + 2;
        uint64_t v25 = v7 - 2;
        while (1)
        {
          int v26 = *v9;
          int v23 = v26 + 10 * v23 - 48;
          ++v9;
          *((void *)this + 3) = v24;
          *((void *)this + 4) = v25;
          ++v24;
          if (--v25 == -1) {
            return 0LL;
          }
        }

        if (v26 == 95)
        {
          *((void *)this + 3) = v24;
          *((void *)this + 4) = v25;
          unsigned int v11 = v23 + 1;
        }
      }
    }
  }

  else
  {
    *((void *)this + 3) = v4;
    *((void *)this + 4) = v1 - 1;
    if (v3 == 95)
    {
      uint64_t v8 = 0LL;
      unsigned int v11 = 1;
    }

    if ((v3 - 58) >= 0xFFFFFFF6 && v1 != 1)
    {
      int v14 = v3 - 48;
      uint64_t v15 = v2 + 2;
      uint64_t v16 = v1 - 2;
      while (1)
      {
        int v17 = *v4;
        int v14 = v17 + 10 * v14 - 48;
        ++v4;
        *((void *)this + 3) = v15;
        *((void *)this + 4) = v16;
        ++v15;
        if (--v16 == -1) {
          return 0LL;
        }
      }

      if (v17 == 95)
      {
        uint64_t v8 = 0LL;
        *((void *)this + 3) = v15;
        *((void *)this + 4) = v16;
        unsigned int v11 = v14 + 2;
      }
    }
  }

  return 0LL;
}

unsigned int *anonymous namespace'::OldDemangler::demangleProtocolNameImpl( _anonymous_namespace_::OldDemangler *this, unsigned int a2)
{
  if (a2 > 0x400) {
    return 0LL;
  }
  uint64_t v5 = *((void *)this + 4);
  if (!v5) {
  uint64_t v6 = (unsigned __int8 *)*((void *)this + 3);
  }
  int v7 = *v6;
  if (v7 != 115)
  {
    if (v7 == 83)
    {
      *((void *)this + 3) = v6 + 1;
      *((void *)this + 4) = v5 - 1;
      unint64_t NodeWithAllocatedText = (swift::Demangle::__runtime::Node *)v8;
      if (!v8) {
        return (unsigned int *)NodeWithAllocatedText;
      }
      int v9 = *((unsigned __int16 *)v8 + 8);
      if (v9 == 180) {
        return (unsigned int *)NodeWithAllocatedText;
      }
      if (v9 != 153) {
        return 0LL;
      }
    }
  }

  *((void *)this + 3) = v6 + 1;
  *((void *)this + 4) = v5 - 1;
  int v10 = (void *)*((void *)this + 5);
  uint64_t v11 = v10[1];
  if (v11) {
    BOOL v12 = (unint64_t)(v11 + 5) > v10[2];
  }
  else {
    BOOL v12 = 1;
  }
  if (v12)
  {
    unint64_t v13 = 2LL * v10[4];
    if (v13 <= 6) {
      unint64_t v13 = 6LL;
    }
    _OWORD v10[4] = v13;
    unint64_t v14 = v13 + 8;
    uint64_t v15 = malloc(v13 + 8);
    *uint64_t v15 = v10[3];
    uint64_t v11 = (uint64_t)(v15 + 1);
    void v10[2] = (char *)v15 + v14;
    void v10[3] = v15;
  }

  v10[1] = v11 + 5;
  *(_BYTE *)(v11 + 4) = 116;
  *(_DWORD *)uint64_t v11 = 1718187859;
  unint64_t NodeWithAllocatedText = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText( v10,  153,  v11,  5LL);
}

unsigned int *anonymous namespace'::OldDemangler::demangleArchetypeType(unsigned int)::{lambda(swift::Demangle::__runtime::Node *)#1}::operator()( void **a1, swift::Demangle::__runtime::Node *a2)
{
  uint64_t v3 = (uint64_t)*a1;
  if (!v4) {
    return 0LL;
  }
  uint64_t v5 = (swift::Demangle::__runtime::Node *)v4;
  unint64_t Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*(void **)(v3 + 40), 5);
  swift::Demangle::__runtime::Node::addChild(Node, a2, *(swift::Demangle::__runtime::NodeFactory **)(v3 + 40), v7, v8);
  swift::Demangle::__runtime::Node::addChild(Node, v5, *(swift::Demangle::__runtime::NodeFactory **)(v3 + 40), v9, v10);
  BOOL v12 = *(char **)(v3 + 8);
  unint64_t v11 = *(void *)(v3 + 16);
  if ((unint64_t)v12 >= v11)
  {
    unint64_t v14 = *(char **)v3;
    uint64_t v15 = (uint64_t)&v12[-*(void *)v3];
    uint64_t v16 = v15 >> 3;
    unint64_t v17 = (v15 >> 3) + 1;
    if (v17 >> 61) {
      abort();
    }
    uint64_t v18 = v11 - (void)v14;
    if (v18 >> 2 > v17) {
      unint64_t v17 = v18 >> 2;
    }
    else {
      unint64_t v19 = v17;
    }
    if (v19)
    {
      if (v19 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      unsigned int v20 = operator new(8 * v19);
    }

    else
    {
      unsigned int v20 = 0LL;
    }

    int v21 = (unsigned int **)&v20[8 * v16];
    unint64_t v22 = &v20[8 * v19];
    *int v21 = Node;
    unint64_t v13 = v21 + 1;
    if (v12 != v14)
    {
      unint64_t v23 = v12 - v14 - 8;
      if (v23 < 0x58) {
        goto LABEL_31;
      }
      uint64_t v24 = (v23 >> 3) + 1;
      uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
      int v26 = &v12[-v25];
      int v21 = (unsigned int **)((char *)v21 - v25);
      unint64_t v27 = &v20[8 * v16 - 16];
      uint64_t v28 = v12 - 16;
      uint64_t v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        __int128 v30 = *(_OWORD *)v28;
        *(v27 - 1) = *((_OWORD *)v28 - 1);
        *unint64_t v27 = v30;
        v27 -= 2;
        v28 -= 32;
        v29 -= 4LL;
      }

      while (v29);
      BOOL v12 = v26;
      if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_31:
        do
        {
          uint64_t v31 = (unsigned int *)*((void *)v12 - 1);
          v12 -= 8;
          *--int v21 = v31;
        }

        while (v12 != v14);
      }

      BOOL v12 = *(char **)v3;
    }

    *(void *)uint64_t v3 = v21;
    *(void *)(v3 + 8) = v13;
    *(void *)(v3 + 16) = v22;
    if (v12) {
      operator delete(v12);
    }
  }

  else
  {
    *(void *)BOOL v12 = Node;
    unint64_t v13 = v12 + 8;
  }

  *(void *)(v3 + 8) = v13;
  return Node;
}

swift::Demangle::__runtime::Node *anonymous namespace'::OldDemangler::demangleDependentMemberTypeName( _anonymous_namespace_::OldDemangler *this, swift::Demangle::__runtime::Node *a2, int a3)
{
  uint64_t v5 = *((void *)this + 4);
  if (!v5)
  {
LABEL_7:
    int v10 = 0LL;
LABEL_8:
    if (!v11) {
      return 0LL;
    }
    BOOL v12 = (swift::Demangle::__runtime::Node *)v11;
    unint64_t Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 35);
    if (!Node) {
      return 0LL;
    }
    uint64_t v9 = Node;
    swift::Demangle::__runtime::Node::addChild( Node,  v12,  *((swift::Demangle::__runtime::NodeFactory **)this + 5),  v14,  v15);
    if (v10) {
      swift::Demangle::__runtime::Node::addChild( v9,  v10,  *((swift::Demangle::__runtime::NodeFactory **)this + 5),  v16,  v17);
    }
    unint64_t v19 = (unsigned int **)*((void *)this + 1);
    unint64_t v18 = *((void *)this + 2);
    if ((unint64_t)v19 >= v18)
    {
      uint64_t v25 = *(char **)this;
      uint64_t v26 = (uint64_t)v19 - *(void *)this;
      uint64_t v27 = v26 >> 3;
      unint64_t v28 = (v26 >> 3) + 1;
      if (v28 >> 61) {
        abort();
      }
      uint64_t v29 = v18 - (void)v25;
      if (v29 >> 2 > v28) {
        unint64_t v28 = v29 >> 2;
      }
      else {
        unint64_t v30 = v28;
      }
      if (v30)
      {
        if (v30 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v31 = operator new(8 * v30);
      }

      else
      {
        uint64_t v31 = 0LL;
      }

      uint64_t v32 = (unsigned int **)&v31[8 * v27];
      uint64_t v33 = &v31[8 * v30];
      *uint64_t v32 = v9;
      unsigned int v20 = v32 + 1;
      if (v19 != (unsigned int **)v25)
      {
        unint64_t v34 = (char *)v19 - v25 - 8;
        if (v34 < 0x58) {
          goto LABEL_45;
        }
        uint64_t v35 = (v34 >> 3) + 1;
        uint64_t v36 = 8 * (v35 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v37 = &v19[v36 / 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v32 = (unsigned int **)((char *)v32 - v36);
        int v38 = &v31[8 * v27 - 16];
        __int16 v39 = v19 - 2;
        uint64_t v40 = v35 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          __int128 v41 = *(_OWORD *)v39;
          *(v38 - 1) = *((_OWORD *)v39 - 1);
          *int v38 = v41;
          v38 -= 2;
          v39 -= 4;
          v40 -= 4LL;
        }

        while (v40);
        unint64_t v19 = v37;
        if (v35 != (v35 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_45:
          do
          {
            uint64_t v42 = *--v19;
            *--uint64_t v32 = v42;
          }

          while (v19 != (unsigned int **)v25);
        }

        unint64_t v19 = *(unsigned int ***)this;
      }

      *(void *)this = v32;
      *((void *)this + 1) = v20;
      *((void *)this + 2) = v33;
      if (v19) {
        operator delete(v19);
      }
    }

    else
    {
      char *v19 = v9;
      unsigned int v20 = v19 + 1;
    }

    *((void *)this + 1) = v20;
    goto LABEL_39;
  }

  uint64_t v6 = (unsigned __int8 *)*((void *)this + 3);
  int v7 = *v6;
  if (v7 != 80)
  {
    if (v7 == 83)
    {
      *((void *)this + 3) = v6 + 1;
      *((void *)this + 4) = v5 - 1;
      if (!v8) {
        return 0LL;
      }
      uint64_t v9 = v8;
      if (*((_WORD *)v8 + 8) != 35) {
        return 0LL;
      }
LABEL_39:
      int v10 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode( *((void **)this + 5),  45);
      swift::Demangle::__runtime::Node::addChild( (unsigned int *)v10,  a2,  *((swift::Demangle::__runtime::NodeFactory **)this + 5),  v43,  v44);
      swift::Demangle::__runtime::Node::addChild( (unsigned int *)v10,  (swift::Demangle::__runtime::Node *)v9,  *((swift::Demangle::__runtime::NodeFactory **)this + 5),  v45,  v46);
      return v10;
    }

    goto LABEL_7;
  }

  *((void *)this + 3) = v6 + 1;
  *((void *)this + 4) = v5 - 1;
  if (v21)
  {
    unint64_t v22 = (swift::Demangle::__runtime::Node *)v21;
    int v10 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode( *((void **)this + 5),  232);
    swift::Demangle::__runtime::Node::addChild( (unsigned int *)v10,  v22,  *((swift::Demangle::__runtime::NodeFactory **)this + 5),  v23,  v24);
    if (!v10) {
      return v10;
    }
    goto LABEL_8;
  }

  return 0LL;
}

unsigned int *anonymous namespace'::OldDemangler::createSwiftType( uint64_t a1, __int16 a2, const void *a3, size_t a4)
{
  unint64_t Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*(void **)(a1 + 40), a2);
  uint64_t v8 = *(void **)(a1 + 40);
  uint64_t v9 = v8[1];
  if (v9) {
    BOOL v10 = (unint64_t)(v9 + 5) > v8[2];
  }
  else {
    BOOL v10 = 1;
  }
  if (v10)
  {
    unint64_t v11 = 2LL * v8[4];
    if (v11 <= 6) {
      unint64_t v11 = 6LL;
    }
    v8[4] = v11;
    unint64_t v12 = v11 + 8;
    unint64_t v13 = malloc(v11 + 8);
    *unint64_t v13 = v8[3];
    uint64_t v9 = (uint64_t)(v13 + 1);
    void v8[2] = (char *)v13 + v12;
    void v8[3] = v13;
  }

  v8[1] = v9 + 5;
  *(_BYTE *)(v9 + 4) = 116;
  *(_DWORD *)uint64_t v9 = 1718187859;
  unint64_t NodeWithAllocatedText = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText( v8,  153,  v9,  5LL);
  swift::Demangle::__runtime::Node::addChild( Node,  NodeWithAllocatedText,  *(swift::Demangle::__runtime::NodeFactory **)(a1 + 40),  v15,  v16);
  unint64_t v17 = *(void **)(a1 + 40);
  if (a4)
  {
    unint64_t v18 = (char *)v17[1];
    if (v18) {
      BOOL v19 = (unint64_t)&v18[a4] > v17[2];
    }
    else {
      BOOL v19 = 1;
    }
    if (v19)
    {
      unint64_t v20 = 2LL * v17[4];
      if (v20 <= a4 + 1) {
        unint64_t v20 = a4 + 1;
      }
      v17[4] = v20;
      unint64_t v21 = v20 + 8;
      unint64_t v22 = malloc(v20 + 8);
      uint64_t v23 = (char *)v22 + v21;
      *unint64_t v22 = v17[3];
      unint64_t v18 = (char *)(v22 + 1);
      void v17[2] = v23;
      v17[3] = v22;
    }

    v17[1] = &v18[a4];
    memmove(v18, a3, a4);
  }

  else
  {
    unint64_t v18 = 0LL;
  }

  uint64_t v24 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText( v17,  101,  (uint64_t)v18,  a4);
  swift::Demangle::__runtime::Node::addChild( Node,  v24,  *(swift::Demangle::__runtime::NodeFactory **)(a1 + 40),  v25,  v26);
  return Node;
}

const char *anonymous namespace'::OldDemangler::demangleImplConvention(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!v2) {
    return 0LL;
  }
  double result = 0LL;
  uint64_t v5 = *(_BYTE **)(a1 + 24);
  switch(*v5)
  {
    case 'D':
      *(void *)(a1 + 24) = v5 + 1;
      *(void *)(a1 + 32) = v2 - 1;
      if (a2 == 2) {
        return "@unowned_inner_pointer";
      }
      else {
        return 0LL;
      }
    case 'a':
      *(void *)(a1 + 24) = v5 + 1;
      *(void *)(a1 + 32) = v2 - 1;
      uint64_t v6 = "@autoreleased";
      BOOL v7 = a2 == 2;
      goto LABEL_10;
    case 'd':
      *(void *)(a1 + 24) = v5 + 1;
      *(void *)(a1 + 32) = v2 - 1;
      if (a2 >= 3) {
        return 0LL;
      }
      return off_189B8F1B0[a2];
    case 'e':
      *(void *)(a1 + 24) = v5 + 1;
      *(void *)(a1 + 32) = v2 - 1;
      uint64_t v6 = "@deallocating";
      BOOL v7 = a2 == 1;
LABEL_10:
      if (v7) {
        return v6;
      }
      else {
        return 0LL;
      }
    case 'g':
      *(void *)(a1 + 24) = v5 + 1;
      *(void *)(a1 + 32) = v2 - 1;
      uint64_t v8 = "@guaranteed";
      uint64_t v9 = "@callee_guaranteed";
      if (a2) {
        uint64_t v9 = 0LL;
      }
      BOOL v10 = a2 == 1;
      goto LABEL_25;
    case 'i':
      *(void *)(a1 + 24) = v5 + 1;
      *(void *)(a1 + 32) = v2 - 1;
      uint64_t v8 = "@out";
      uint64_t v9 = "@in";
      if (a2 != 1) {
        uint64_t v9 = 0LL;
      }
      BOOL v10 = a2 == 2;
LABEL_25:
      if (v10) {
        double result = v8;
      }
      else {
        double result = v9;
      }
      break;
    case 'l':
      *(void *)(a1 + 24) = v5 + 1;
      *(void *)(a1 + 32) = v2 - 1;
      if (a2 == 1) {
        double result = "@inout";
      }
      else {
        double result = 0LL;
      }
      break;
    case 'o':
      *(void *)(a1 + 24) = v5 + 1;
      *(void *)(a1 + 32) = v2 - 1;
      if (a2 >= 3) {
        return 0LL;
      }
      double result = off_189B8F1C8[a2];
      break;
    default:
      return result;
  }

  return result;
}

unsigned int *anonymous namespace'::OldDemangler::demangleImplParameterOrResult(uint64_t a1, int a2, int a3)
{
  __int16 v4 = a2;
  uint64_t v6 = *(void *)(a1 + 32);
  if (!v6 || (BOOL v7 = *(_BYTE **)(a1 + 24), *v7 != 122))
  {
    if (a2 == 118)
    {
      unsigned int v8 = 1;
      goto LABEL_9;
    }

    if ((a2 & 0xFFFFFFFD) == 0x78)
    {
      unsigned int v8 = 2;
      goto LABEL_9;
    }

    return 0LL;
  }

  *(void *)(a1 + 24) = v7 + 1;
  *(void *)(a1 + 32) = v6 - 1;
  if (a2 != 120) {
    return 0LL;
  }
  unsigned int v8 = 2;
  __int16 v4 = 122;
LABEL_9:
  if (!v10) {
    return 0LL;
  }
  unint64_t v11 = v9;
  size_t v12 = v10;
  if (!v13) {
    return 0LL;
  }
  uint64_t v14 = (swift::Demangle::__runtime::Node *)v13;
  unint64_t Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*(void **)(a1 + 40), 232);
  swift::Demangle::__runtime::Node::addChild( Node,  v14,  *(swift::Demangle::__runtime::NodeFactory **)(a1 + 40),  v16,  v17);
  if (!Node) {
    return 0LL;
  }
  unint64_t v18 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*(void **)(a1 + 40), v4);
  BOOL v19 = *(void **)(a1 + 40);
  unint64_t v20 = (char *)v19[1];
  if (!v20 || (unint64_t)&v20[v12] > v19[2])
  {
    unint64_t v21 = 2LL * v19[4];
    if (v21 <= v12 + 1) {
      unint64_t v21 = v12 + 1;
    }
    _OWORD v19[4] = v21;
    unint64_t v22 = v21 + 8;
    uint64_t v23 = malloc(v21 + 8);
    uint64_t v24 = (char *)v23 + v22;
    *uint64_t v23 = v19[3];
    unint64_t v20 = (char *)(v23 + 1);
    void v19[2] = v24;
    uint64_t v19[3] = v23;
  }

  v19[1] = &v20[v12];
  memmove(v20, v11, v12);
  unint64_t NodeWithAllocatedText = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText( v19,  106,  (uint64_t)v20,  v12);
  swift::Demangle::__runtime::Node::addChild( v18,  NodeWithAllocatedText,  *(swift::Demangle::__runtime::NodeFactory **)(a1 + 40),  v26,  v27);
  swift::Demangle::__runtime::Node::addChild( v18,  (swift::Demangle::__runtime::Node *)Node,  *(swift::Demangle::__runtime::NodeFactory **)(a1 + 40),  v28,  v29);
  return v18;
}

unint64_t anonymous namespace'::OldDemangler::demangleValueWitnessKind( _anonymous_namespace_::OldDemangler *this)
{
  unint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    uint64_t v2 = (_BYTE *)*((void *)this + 3);
    LOBYTE(v6) = *v2;
    *((void *)this + 3) = v2 + 1;
    *((void *)this + 4) = v1 - 1;
    if (v1 == 1)
    {
      unint64_t v1 = 0LL;
      uint64_t v4 = 0LL;
    }

    else
    {
      char v3 = v2[1];
      *((void *)this + 3) = v2 + 2;
      *((void *)this + 4) = v1 - 2;
      HIBYTE(v6) = v3;
      switch(v6)
      {
        case 27745:
          uint64_t v4 = 0LL;
          unint64_t v1 = 0x100000000LL;
          break;
        case 24931:
          unint64_t v1 = 0x100000000LL;
          uint64_t v4 = 1LL;
          break;
        case 24948:
          unint64_t v1 = 0x100000000LL;
          uint64_t v4 = 2LL;
          break;
        case 25956:
          unint64_t v1 = 0x100000000LL;
          uint64_t v4 = 3LL;
          break;
        case 30840:
          unint64_t v1 = 0x100000000LL;
          uint64_t v4 = 4LL;
          break;
        case 22616:
          unint64_t v1 = 0x100000000LL;
          uint64_t v4 = 5LL;
          break;
        case 30808:
          unint64_t v1 = 0x100000000LL;
          uint64_t v4 = 6LL;
          break;
        case 20547:
          unint64_t v1 = 0x100000000LL;
          uint64_t v4 = 7LL;
          break;
        case 28739:
          unint64_t v1 = 0x100000000LL;
          uint64_t v4 = 8LL;
          break;
        case 28771:
          unint64_t v1 = 0x100000000LL;
          uint64_t v4 = 9LL;
          break;
        case 27476:
          unint64_t v1 = 0x100000000LL;
          uint64_t v4 = 10LL;
          break;
        case 27508:
          unint64_t v1 = 0x100000000LL;
          uint64_t v4 = 11LL;
          break;
        case 29296:
          unint64_t v1 = 0x100000000LL;
          uint64_t v4 = 12LL;
          break;
        case 19284:
          unint64_t v1 = 0x100000000LL;
          uint64_t v4 = 13LL;
          break;
        case 25411:
          unint64_t v1 = 0x100000000LL;
          uint64_t v4 = 14LL;
          break;
        case 29780:
          unint64_t v1 = 0x100000000LL;
          uint64_t v4 = 15LL;
          break;
        case 21620:
          unint64_t v1 = 0x100000000LL;
          uint64_t v4 = 16LL;
          break;
        case 29560:
          unint64_t v1 = 0x100000000LL;
          uint64_t v4 = 17LL;
          break;
        case 26488:
          unint64_t v1 = 0x100000000LL;
          uint64_t v4 = 18LL;
          break;
        case 26485:
          unint64_t v1 = 0x100000000LL;
          uint64_t v4 = 19LL;
          break;
        case 28789:
          unint64_t v1 = 0x100000000LL;
          uint64_t v4 = 20LL;
          break;
        case 26997:
          unint64_t v1 = 0x100000000LL;
          uint64_t v4 = 21LL;
          break;
        case 29797:
          unint64_t v1 = 0x100000000LL;
          uint64_t v4 = 22LL;
          break;
        default:
          unint64_t v1 = (unint64_t)(v6 == 29811) << 32;
          uint64_t v4 = 23LL;
          if (v6 != 29811) {
            uint64_t v4 = 0LL;
          }
          break;
      }
    }
  }

  else
  {
    uint64_t v4 = 0LL;
  }

  return v4 | v1;
}

uint64_t anonymous namespace'::OldDemangler::demangleReabstractSignature( _anonymous_namespace_::OldDemangler *this, swift::Demangle::__runtime::Node *a2, int a3)
{
  uint64_t v6 = *((void *)this + 4);
  if (v6)
  {
    BOOL v7 = (_BYTE *)*((void *)this + 3);
    if (*v7 == 71)
    {
      *((void *)this + 3) = v7 + 1;
      *((void *)this + 4) = v6 - 1;
      if (!result) {
        return result;
      }
      swift::Demangle::__runtime::Node::addChild( (unsigned int *)a2,  (swift::Demangle::__runtime::Node *)result,  *((swift::Demangle::__runtime::NodeFactory **)this + 5),  v9,  v10);
    }
  }

  unsigned int v11 = a3 + 1;
  if (result)
  {
    size_t v12 = (swift::Demangle::__runtime::Node *)result;
    unint64_t Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 232);
    swift::Demangle::__runtime::Node::addChild( Node,  v12,  *((swift::Demangle::__runtime::NodeFactory **)this + 5),  v14,  v15);
    if (!Node) {
      return 0LL;
    }
    swift::Demangle::__runtime::Node::addChild( (unsigned int *)a2,  (swift::Demangle::__runtime::Node *)Node,  *((swift::Demangle::__runtime::NodeFactory **)this + 5),  v16,  v17);
    if (!result) {
      return result;
    }
    unint64_t v18 = (swift::Demangle::__runtime::Node *)result;
    BOOL v19 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 232);
    swift::Demangle::__runtime::Node::addChild( v19,  v18,  *((swift::Demangle::__runtime::NodeFactory **)this + 5),  v20,  v21);
    if (v19)
    {
      swift::Demangle::__runtime::Node::addChild( (unsigned int *)a2,  (swift::Demangle::__runtime::Node *)v19,  *((swift::Demangle::__runtime::NodeFactory **)this + 5),  v22,  v23);
      return 1LL;
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

void anonymous namespace'::Remangler::mangle( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  if (a3 < 0x401)
  {
    switch(*((_WORD *)a2 + 8))
    {
      case 0:
        return;
      case 1:
        return;
      case 2:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 529;
        goto LABEL_3;
      case 3:
      case 0x20:
      case 0xCF:
      case 0xE8:
        return;
      case 4:
        return;
      case 5:
        return;
      case 6:
        return;
      case 7:
        uint64_t v9 = (char **)((char *)this + 12728);
        BOOL v7 = (void *)*((void *)this + 1593);
        unsigned int v8 = "<default-associated-type-metadata-accessor>";
        goto LABEL_256;
      case 8:
        return;
      case 9:
        return;
      case 0xA:
        size_t v10 = (char **)((char *)this + 12728);
        BOOL v7 = (void *)*((void *)this + 1593);
        unsigned int v8 = "<base-witness-table-accessor>";
        goto LABEL_258;
      case 0xB:
      case 0x40:
        return;
      case 0xC:
        return;
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x18:
      case 0x3D:
      case 0xA7:
      case 0xDB:
      case 0xEA:
        return;
      case 0x14:
        return;
      case 0x15:
        *(_DWORD *)a4 = 9;
        *(void *)(a4 + 8) = a2;
        int v5 = 1560;
        goto LABEL_3;
      case 0x16:
        return;
      case 0x17:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 1708;
        goto LABEL_3;
      case 0x19:
        return;
      case 0x1A:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 517;
        goto LABEL_3;
      case 0x1B:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 523;
        goto LABEL_3;
      case 0x1C:
        return;
      case 0x1D:
        return;
      case 0x1E:
        return;
      case 0x1F:
        return;
      case 0x21:
        return;
      case 0x22:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 535;
        goto LABEL_3;
      case 0x23:
        return;
      case 0x24:
        return;
      case 0x25:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2049;
        goto LABEL_3;
      case 0x26:
        return;
      case 0x27:
        return;
      case 0x28:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2079;
        goto LABEL_3;
      case 0x29:
        return;
      case 0x2A:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2006;
        goto LABEL_3;
      case 0x2B:
        goto LABEL_47;
      case 0x2C:
        return;
      case 0x2D:
        return;
      case 0x2E:
        ++a3;
LABEL_47:
        return;
      case 0x2F:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 541;
        goto LABEL_3;
      case 0x30:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 548;
        goto LABEL_3;
      case 0x31:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 555;
        goto LABEL_3;
      case 0x32:
        return;
      case 0x33:
        return;
      case 0x34:
        return;
      case 0x35:
        unsigned int v11 = (char **)((char *)this + 12728);
        BOOL v7 = (void *)*((void *)this + 1593);
        unsigned int v8 = "TE";
        goto LABEL_324;
      case 0x36:
        unsigned int v11 = (char **)((char *)this + 12728);
        BOOL v7 = (void *)*((void *)this + 1593);
        unsigned int v8 = "TF";
        goto LABEL_324;
      case 0x37:
        unsigned int v11 = (char **)((char *)this + 12728);
        BOOL v7 = (void *)*((void *)this + 1593);
        unsigned int v8 = "TD";
        goto LABEL_324;
      case 0x38:
        unsigned int v11 = (char **)((char *)this + 12728);
        BOOL v7 = (void *)*((void *)this + 1593);
        unsigned int v8 = "Td";
        goto LABEL_324;
      case 0x39:
        return;
      case 0x3A:
        unsigned int v11 = (char **)((char *)this + 12728);
        BOOL v7 = (void *)*((void *)this + 1593);
        unsigned int v8 = "TI";
        goto LABEL_324;
      case 0x3B:
        unsigned int v11 = (char **)((char *)this + 12728);
        BOOL v7 = (void *)*((void *)this + 1593);
        unsigned int v8 = "Tx";
        goto LABEL_324;
      case 0x3C:
        unsigned int v11 = (char **)((char *)this + 12728);
        BOOL v7 = (void *)*((void *)this + 1593);
        unsigned int v8 = "TX";
        goto LABEL_324;
      case 0x3E:
        return;
      case 0x3F:
        size_t v12 = (char **)((char *)this + 12728);
        BOOL v7 = (void *)*((void *)this + 1593);
        unsigned int v8 = "ERR";
        goto LABEL_335;
      case 0x41:
      case 0x52:
        return;
      case 0x42:
        uint64_t v6 = (char **)((char *)this + 12728);
        BOOL v7 = (void *)*((void *)this + 1593);
        unsigned int v8 = "y";
        goto LABEL_340;
      case 0x43:
        return;
      case 0x44:
        return;
      case 0x45:
        return;
      case 0x46:
        return;
      case 0x47:
        return;
      case 0x48:
        return;
      case 0x49:
        return;
      case 0x4A:
        return;
      case 0x4B:
        return;
      case 0x4C:
        return;
      case 0x4D:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 436;
        goto LABEL_3;
      case 0x4E:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 468;
        goto LABEL_3;
      case 0x4F:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 462;
        goto LABEL_3;
      case 0x50:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 484;
        goto LABEL_3;
      case 0x51:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 476;
        goto LABEL_3;
      case 0x53:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2908;
        goto LABEL_3;
      case 0x54:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2913;
        goto LABEL_3;
      case 0x55:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2917;
        goto LABEL_3;
      case 0x56:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 420;
        goto LABEL_3;
      case 0x57:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 426;
        goto LABEL_3;
      case 0x58:
        return;
      case 0x59:
        return;
      case 0x5A:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 899;
        goto LABEL_3;
      case 0x5B:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 394;
        goto LABEL_3;
      case 0x5C:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 405;
        goto LABEL_3;
      case 0x5D:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 410;
        goto LABEL_3;
      case 0x5E:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 431;
        goto LABEL_3;
      case 0x5F:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 400;
        goto LABEL_3;
      case 0x60:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 415;
        goto LABEL_3;
      case 0x61:
        return;
      case 0x62:
        return;
      case 0x63:
        return;
      case 0x64:
        return;
      case 0x65:
      case 0xE1:
        return;
      case 0x66:
      case 0xA1:
        goto LABEL_342;
      case 0x67:
        return;
      case 0x68:
        return;
      case 0x69:
      case 0x6C:
      case 0x6D:
      case 0x74:
      case 0x77:
      case 0x114:
        goto LABEL_342;
      case 0x6A:
        return;
      case 0x6B:
        return;
      case 0x6E:
        return;
      case 0x6F:
        return;
      case 0x70:
        return;
      case 0x71:
        return;
      case 0x72:
        return;
      case 0x73:
        return;
      case 0x75:
        return;
      case 0x76:
        return;
      case 0x78:
        return;
      case 0x79:
        return;
      case 0x7A:
        return;
      case 0x7B:
        return;
      case 0x7C:
        unint64_t v13 = *((void *)a2 + 1);
        uint64_t v14 = *(char **)a2;
        int v15 = 3;
        goto LABEL_166;
      case 0x7D:
        return;
      case 0x7E:
        return;
      case 0x7F:
        return;
      case 0x80:
        return;
      case 0x81:
        unsigned int v11 = (char **)((char *)this + 12728);
        BOOL v7 = (void *)*((void *)this + 1593);
        unsigned int v8 = "YA";
        goto LABEL_324;
      case 0x82:
        unsigned int v11 = (char **)((char *)this + 12728);
        BOOL v7 = (void *)*((void *)this + 1593);
        unsigned int v8 = "YT";
        goto LABEL_324;
      case 0x83:
        return;
      case 0x84:
        return;
      case 0x85:
        return;
      case 0x86:
        return;
      case 0x87:
        return;
      case 0x88:
        return;
      case 0x89:
        return;
      case 0x8A:
        return;
      case 0x8B:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 1120;
        goto LABEL_3;
      case 0x8C:
        return;
      case 0x8D:
        return;
      case 0x8E:
        return;
      case 0x8F:
        return;
      case 0x90:
        unsigned int v11 = (char **)((char *)this + 12728);
        BOOL v7 = (void *)*((void *)this + 1593);
        unsigned int v8 = "Tm";
        goto LABEL_324;
      case 0x91:
        return;
      case 0x92:
        return;
      case 0x93:
        return;
      case 0x94:
        uint64_t v16 = (char **)((char *)this + 12728);
        BOOL v7 = (void *)*((void *)this + 1593);
        unsigned int v8 = "<method-lookup-function>";
        goto LABEL_311;
      case 0x95:
        BOOL v7 = (void *)*((void *)this + 1593);
        unsigned int v8 = "<objc-metadata-update-function>";
        unint64_t v17 = (char **)((char *)this + 12728);
        size_t v18 = 31LL;
        goto LABEL_341;
      case 0x96:
        BOOL v19 = (char **)((char *)this + 12728);
        BOOL v7 = (void *)*((void *)this + 1593);
        unsigned int v8 = "<objc-resilient-class-stub>";
        goto LABEL_318;
      case 0x97:
        BOOL v7 = (void *)*((void *)this + 1593);
        unsigned int v8 = "<full-objc-resilient-class-stub>";
        unint64_t v17 = (char **)((char *)this + 12728);
        size_t v18 = 32LL;
        goto LABEL_341;
      case 0x98:
        return;
      case 0x99:
        v26[0] = 0;
        uint64_t v28 = 0LL;
        uint64_t v29 = 0LL;
        uint64_t v27 = 0LL;
        return;
      case 0x9A:
        return;
      case 0x9B:
        return;
      case 0x9C:
        return;
      case 0x9D:
        return;
      case 0x9E:
        return;
      case 0x9F:
        return;
      case 0xA0:
        unsigned int v11 = (char **)((char *)this + 12728);
        BOOL v7 = (void *)*((void *)this + 1593);
        unsigned int v8 = "TO";
        goto LABEL_324;
      case 0xA2:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2904;
        goto LABEL_3;
      case 0xA3:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2900;
        goto LABEL_3;
      case 0xA4:
        unsigned int v11 = (char **)((char *)this + 12728);
        BOOL v7 = (void *)*((void *)this + 1593);
        unsigned int v8 = "To";
        goto LABEL_324;
      case 0xA5:
        return;
      case 0xA6:
        uint64_t v20 = (char **)((char *)this + 12728);
        BOOL v7 = (void *)*((void *)this + 1593);
        unsigned int v8 = "<escaping block type>";
        goto LABEL_192;
      case 0xA8:
        return;
      case 0xA9:
        return;
      case 0xAA:
        return;
      case 0xAB:
        return;
      case 0xAC:
        return;
      case 0xAD:
        unint64_t v13 = *((void *)a2 + 1);
        uint64_t v14 = *(char **)a2;
        int v15 = 2;
        goto LABEL_166;
      case 0xAE:
        return;
      case 0xAF:
        unint64_t v13 = *((void *)a2 + 1);
        uint64_t v14 = *(char **)a2;
        int v15 = 1;
LABEL_166:
        return;
      case 0xB0:
        return;
      case 0xB1:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 666;
        goto LABEL_3;
      case 0xB2:
        return;
      case 0xB3:
        return;
      case 0xB4:
        return;
      case 0xB5:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2803;
        goto LABEL_3;
      case 0xB6:
        return;
      case 0xB7:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 497;
        goto LABEL_3;
      case 0xB8:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 504;
        goto LABEL_3;
      case 0xB9:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 511;
        goto LABEL_3;
      case 0xBA:
        return;
      case 0xBB:
        return;
      case 0xBC:
        return;
      case 0xBD:
        return;
      case 0xBE:
        return;
      case 0xBF:
        return;
      case 0xC0:
        return;
      case 0xC1:
        return;
      case 0xC2:
        return;
      case 0xC3:
        return;
      case 0xC4:
        return;
      case 0xC5:
        return;
      case 0xC6:
        return;
      case 0xC7:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 701;
        goto LABEL_3;
      case 0xC8:
        uint64_t v20 = (char **)((char *)this + 12728);
        BOOL v7 = (void *)*((void *)this + 1593);
        unsigned int v8 = "<reabstraction-thunk>";
LABEL_192:
        unint64_t v17 = v20;
        size_t v18 = 21LL;
        goto LABEL_341;
      case 0xC9:
        unint64_t v21 = (char **)((char *)this + 12728);
        BOOL v7 = (void *)*((void *)this + 1593);
        unsigned int v8 = "<reabstraction-thunk-helper>";
        goto LABEL_260;
      case 0xCA:
        BOOL v7 = (void *)*((void *)this + 1593);
        unsigned int v8 = "<reabstraction-thunk-helper-with-self>";
        unint64_t v17 = (char **)((char *)this + 12728);
        size_t v18 = 38LL;
        goto LABEL_341;
      case 0xCB:
        uint64_t v22 = (char **)((char *)this + 12728);
        BOOL v7 = (void *)*((void *)this + 1593);
        unsigned int v8 = "<reabstraction-thunk-helper-with-global-actor>";
        goto LABEL_313;
      case 0xCC:
        return;
      case 0xCD:
        return;
      case 0xCE:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 490;
        goto LABEL_3;
      case 0xD0:
        return;
      case 0xD1:
        return;
      case 0xD2:
        return;
      case 0xD3:
        return;
      case 0xD4:
        return;
      case 0xD5:
        return;
      case 0xD6:
        return;
      case 0xD7:
        return;
      case 0xD8:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 441;
        goto LABEL_3;
      case 0xD9:
        uint64_t v6 = (char **)((char *)this + 12728);
        BOOL v7 = (void *)*((void *)this + 1593);
        unsigned int v8 = "q";
        goto LABEL_340;
      case 0xDA:
        return;
      case 0xDC:
        return;
      case 0xDD:
        size_t v18 = *((void *)a2 + 1);
        BOOL v7 = (void *)*((void *)this + 1593);
        unint64_t v17 = (char **)((char *)this + 12728);
        unsigned int v8 = *(const char **)a2;
        goto LABEL_341;
      case 0xDE:
        return;
      case 0xDF:
        return;
      case 0xE0:
        return;
      case 0xE2:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 1970;
        goto LABEL_3;
      case 0xE3:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 1974;
        goto LABEL_3;
      case 0xE4:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 1978;
        goto LABEL_3;
      case 0xE5:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 1982;
        goto LABEL_3;
      case 0xE6:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 1986;
        goto LABEL_3;
      case 0xE7:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 1990;
        goto LABEL_3;
      case 0xE9:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2797;
        goto LABEL_3;
      case 0xEB:
        return;
      case 0xEC:
        return;
      case 0xED:
        return;
      case 0xEE:
        return;
      case 0xEF:
        return;
      case 0xF0:
        return;
      case 0xF1:
        return;
      case 0xF2:
        return;
      case 0xF3:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 632;
        goto LABEL_3;
      case 0xF4:
        return;
      case 0xF5:
        return;
      case 0xF6:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2270;
        goto LABEL_3;
      case 0xF7:
        return;
      case 0xF8:
        return;
      case 0xF9:
        return;
      case 0xFA:
        return;
      case 0xFB:
        return;
      case 0xFC:
        return;
      case 0xFD:
        return;
      case 0xFE:
        return;
      case 0xFF:
        return;
      case 0x100:
        unsigned int v11 = (char **)((char *)this + 12728);
        BOOL v7 = (void *)*((void *)this + 1593);
        unsigned int v8 = "TV";
        goto LABEL_324;
      case 0x101:
        return;
      case 0x102:
        size_t v12 = (char **)((char *)this + 12728);
        BOOL v7 = (void *)*((void *)this + 1593);
        unsigned int v8 = "MRb";
        goto LABEL_335;
      case 0x103:
        size_t v12 = (char **)((char *)this + 12728);
        BOOL v7 = (void *)*((void *)this + 1593);
        unsigned int v8 = "MRf";
        goto LABEL_335;
      case 0x104:
        size_t v12 = (char **)((char *)this + 12728);
        BOOL v7 = (void *)*((void *)this + 1593);
        unsigned int v8 = "MRa";
        goto LABEL_335;
      case 0x105:
        size_t v12 = (char **)((char *)this + 12728);
        BOOL v7 = (void *)*((void *)this + 1593);
        unsigned int v8 = "MRc";
        goto LABEL_335;
      case 0x106:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2502;
        goto LABEL_3;
      case 0x107:
        BOOL v7 = (void *)*((void *)this + 1593);
        unsigned int v8 = "<curry-thunk>";
        unint64_t v17 = (char **)((char *)this + 12728);
        size_t v18 = 13LL;
        goto LABEL_341;
      case 0x108:
        BOOL v7 = (void *)*((void *)this + 1593);
        unsigned int v8 = "<dispatch-thunk>";
        unint64_t v17 = (char **)((char *)this + 12728);
        size_t v18 = 16LL;
        goto LABEL_341;
      case 0x109:
        uint64_t v23 = (char **)((char *)this + 12728);
        BOOL v7 = (void *)*((void *)this + 1593);
        unsigned int v8 = "<method-descriptor>";
        goto LABEL_309;
      case 0x10A:
        BOOL v7 = (void *)*((void *)this + 1593);
        unsigned int v8 = "<protocol-requirements-base-descriptor>";
        unint64_t v17 = (char **)((char *)this + 12728);
        size_t v18 = 39LL;
        goto LABEL_341;
      case 0x10B:
        BOOL v7 = (void *)*((void *)this + 1593);
        unsigned int v8 = "<associated-conformance-descriptor>";
        unint64_t v17 = (char **)((char *)this + 12728);
        size_t v18 = 35LL;
        goto LABEL_341;
      case 0x10C:
        uint64_t v9 = (char **)((char *)this + 12728);
        BOOL v7 = (void *)*((void *)this + 1593);
        unsigned int v8 = "<default-associated-conformance-descriptor>";
LABEL_256:
        unint64_t v17 = v9;
        size_t v18 = 43LL;
        goto LABEL_341;
      case 0x10D:
        size_t v10 = (char **)((char *)this + 12728);
        BOOL v7 = (void *)*((void *)this + 1593);
        unsigned int v8 = "<base-conformance-descriptor>";
LABEL_258:
        unint64_t v17 = v10;
        size_t v18 = 29LL;
        goto LABEL_341;
      case 0x10E:
        unint64_t v21 = (char **)((char *)this + 12728);
        BOOL v7 = (void *)*((void *)this + 1593);
        unsigned int v8 = "<associated-type-descriptor>";
LABEL_260:
        unint64_t v17 = v21;
        size_t v18 = 28LL;
        goto LABEL_341;
      case 0x10F:
        uint64_t v6 = (char **)((char *)this + 12728);
        BOOL v7 = (void *)*((void *)this + 1593);
        unsigned int v8 = "Z";
        goto LABEL_340;
      case 0x110:
      case 0x111:
        uint64_t v6 = (char **)((char *)this + 12728);
        BOOL v7 = (void *)*((void *)this + 1593);
        unsigned int v8 = "z";
        goto LABEL_340;
      case 0x112:
        uint64_t v24 = (char **)((char *)this + 12728);
        BOOL v7 = (void *)*((void *)this + 1593);
        unsigned int v8 = "<empty>";
        goto LABEL_264;
      case 0x113:
        uint64_t v24 = (char **)((char *)this + 12728);
        BOOL v7 = (void *)*((void *)this + 1593);
        unsigned int v8 = "<first>";
LABEL_264:
        unint64_t v17 = v24;
        size_t v18 = 7LL;
        goto LABEL_341;
      case 0x115:
        return;
      case 0x116:
        return;
      case 0x117:
        return;
      case 0x118:
        return;
      case 0x119:
        return;
      case 0x11A:
        return;
      case 0x11B:
        return;
      case 0x11C:
        return;
      case 0x11D:
        return;
      case 0x11E:
        return;
      case 0x11F:
        return;
      case 0x120:
        return;
      case 0x121:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2774;
        goto LABEL_3;
      case 0x122:
        return;
      case 0x123:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2778;
        goto LABEL_3;
      case 0x124:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2782;
        goto LABEL_3;
      case 0x125:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2786;
        goto LABEL_3;
      case 0x126:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2791;
        goto LABEL_3;
      case 0x127:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2813;
        goto LABEL_3;
      case 0x128:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2817;
        goto LABEL_3;
      case 0x129:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2821;
        goto LABEL_3;
      case 0x12A:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2825;
        goto LABEL_3;
      case 0x12B:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2879;
        goto LABEL_3;
      case 0x12C:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2851;
        goto LABEL_3;
      case 0x12D:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2809;
        goto LABEL_3;
      case 0x12E:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2855;
        goto LABEL_3;
      case 0x12F:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2859;
        goto LABEL_3;
      case 0x130:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2863;
        goto LABEL_3;
      case 0x131:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2867;
        goto LABEL_3;
      case 0x132:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2871;
        goto LABEL_3;
      case 0x133:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2875;
        goto LABEL_3;
      case 0x134:
        return;
      case 0x135:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2848;
        goto LABEL_3;
      case 0x136:
        return;
      case 0x137:
        return;
      case 0x138:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2883;
        goto LABEL_3;
      case 0x139:
        return;
      case 0x13A:
        return;
      case 0x13B:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2891;
        goto LABEL_3;
      case 0x13C:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2887;
        goto LABEL_3;
      case 0x13D:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2895;
        goto LABEL_3;
      case 0x13E:
        return;
      case 0x13F:
        unsigned int v11 = (char **)((char *)this + 12728);
        BOOL v7 = (void *)*((void *)this + 1593);
        unsigned int v8 = "Tu";
        goto LABEL_324;
      case 0x140:
        uint64_t v23 = (char **)((char *)this + 12728);
        BOOL v7 = (void *)*((void *)this + 1593);
        unsigned int v8 = "<autodiff-function>";
LABEL_309:
        unint64_t v17 = v23;
        size_t v18 = 19LL;
        goto LABEL_341;
      case 0x141:
        uint64_t v16 = (char **)((char *)this + 12728);
        BOOL v7 = (void *)*((void *)this + 1593);
        unsigned int v8 = "<autodiff-function-kind>";
LABEL_311:
        unint64_t v17 = v16;
        size_t v18 = 24LL;
        goto LABEL_341;
      case 0x142:
        uint64_t v22 = (char **)((char *)this + 12728);
        BOOL v7 = (void *)*((void *)this + 1593);
        unsigned int v8 = "<autodiff-self-reordering-reabstraction-thunk>";
LABEL_313:
        unint64_t v17 = v22;
        size_t v18 = 46LL;
        goto LABEL_341;
      case 0x143:
        uint64_t v25 = (char **)((char *)this + 12728);
        BOOL v7 = (void *)*((void *)this + 1593);
        unsigned int v8 = "<autodiff-subset-parameters-thunk>";
        goto LABEL_316;
      case 0x144:
        uint64_t v25 = (char **)((char *)this + 12728);
        BOOL v7 = (void *)*((void *)this + 1593);
        unsigned int v8 = "<autodiff-derivative-vtable-thunk>";
LABEL_316:
        unint64_t v17 = v25;
        size_t v18 = 34LL;
        goto LABEL_341;
      case 0x145:
        BOOL v19 = (char **)((char *)this + 12728);
        BOOL v7 = (void *)*((void *)this + 1593);
        unsigned int v8 = "<differentiability-witness>";
LABEL_318:
        unint64_t v17 = v19;
        size_t v18 = 27LL;
        goto LABEL_341;
      case 0x146:
        return;
      case 0x147:
        BOOL v7 = (void *)*((void *)this + 1593);
        unsigned int v8 = "<index-subset>";
        unint64_t v17 = (char **)((char *)this + 12728);
        size_t v18 = 14LL;
        goto LABEL_341;
      case 0x148:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 781;
        goto LABEL_3;
      case 0x149:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 785;
        goto LABEL_3;
      case 0x14A:
        unsigned int v11 = (char **)((char *)this + 12728);
        BOOL v7 = (void *)*((void *)this + 1593);
        unsigned int v8 = "HF";
LABEL_324:
        unint64_t v17 = v11;
        size_t v18 = 2LL;
        goto LABEL_341;
      case 0x14B:
        return;
      case 0x14C:
        size_t v12 = (char **)((char *)this + 12728);
        BOOL v7 = (void *)*((void *)this + 1593);
        unsigned int v8 = "Twb";
        goto LABEL_335;
      case 0x14D:
        size_t v12 = (char **)((char *)this + 12728);
        BOOL v7 = (void *)*((void *)this + 1593);
        unsigned int v8 = "TwB";
        goto LABEL_335;
      case 0x14E:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2924;
        goto LABEL_3;
      case 0x14F:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2920;
        goto LABEL_3;
      case 0x150:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2933;
        goto LABEL_3;
      case 0x151:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2938;
        goto LABEL_3;
      case 0x152:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2928;
        goto LABEL_3;
      case 0x153:
        uint64_t v6 = (char **)((char *)this + 12728);
        BOOL v7 = (void *)*((void *)this + 1593);
        unsigned int v8 = "m";
        goto LABEL_340;
      case 0x154:
        size_t v12 = (char **)((char *)this + 12728);
        BOOL v7 = (void *)*((void *)this + 1593);
        unsigned int v8 = "TwS";
LABEL_335:
        unint64_t v17 = v12;
        size_t v18 = 3LL;
        goto LABEL_341;
      case 0x155:
      case 0x156:
        *(_DWORD *)a4 = 11;
        goto LABEL_343;
      case 0x157:
        return;
      case 0x158:
        return;
      case 0x159:
        return;
      case 0x15A:
        uint64_t v6 = (char **)((char *)this + 12728);
        BOOL v7 = (void *)*((void *)this + 1593);
        unsigned int v8 = "a";
LABEL_340:
        unint64_t v17 = v6;
        size_t v18 = 1LL;
LABEL_341:
        swift::Demangle::__runtime::CharVector::append(v17, v8, v18, v7);
LABEL_342:
        *(_DWORD *)a4 = 0;
LABEL_343:
        *(void *)(a4 + 8) = 0LL;
        *(_DWORD *)(a4 + 16) = 0;
        break;
      case 0x15B:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2943;
        goto LABEL_3;
      case 0x15C:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 1939;
        goto LABEL_3;
      case 0x15D:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 1944;
        goto LABEL_3;
      case 0x15E:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2612;
        goto LABEL_3;
      case 0x15F:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2617;
        goto LABEL_3;
      case 0x160:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2622;
        goto LABEL_3;
      case 0x161:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2626;
        goto LABEL_3;
      case 0x162:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 3051;
        goto LABEL_3;
      default:
        *(_DWORD *)a4 = 4;
        *(void *)(a4 + 8) = a2;
        int v5 = 83;
        goto LABEL_3;
    }
  }

  else
  {
    *(_DWORD *)a4 = 3;
    *(void *)(a4 + 8) = a2;
    int v5 = 74;
LABEL_3:
    *(_DWORD *)(a4 + 16) = v5;
  }

void swift::Demangle::__runtime::mangleNodeOld( swift::Demangle::__runtime *this, swift::Demangle::__runtime::Node *a2, swift::Demangle::__runtime::NodeFactory *a3)
{
  uint64_t v3 = MEMORY[0x1895F8858](this);
  uint64_t v6 = v5;
  if (!v3)
  {
    *(void *)(v5 + 24) = 0LL;
    *(void *)(v5 + 32) = 0LL;
    *(_DWORD *)uint64_t v5 = 0;
    *(void *)(v5 + 8) = 0LL;
    *(_DWORD *)(v5 + 16) = 0;
    return;
  }

  BOOL v7 = v4;
  unsigned int v8 = (swift::Demangle::__runtime::Node *)v3;
  char v23 = 0;
  v22[1540] = 0LL;
  unint64_t v21 = v4;
  v22[1539] = 0LL;
  char v26 = 0;
  uint64_t v25 = 0LL;
  uint64_t v24 = 0LL;
  char v29 = 0;
  uint64_t v28 = 0LL;
  uint64_t v27 = 0LL;
  char v32 = 0;
  uint64_t v31 = 0LL;
  uint64_t v30 = 0LL;
  char v35 = 0;
  uint64_t v34 = 0LL;
  uint64_t v33 = 0LL;
  char v38 = 0;
  uint64_t v37 = 0LL;
  uint64_t v36 = 0LL;
  char v41 = 0;
  uint64_t v40 = 0LL;
  uint64_t v39 = 0LL;
  char v44 = 0;
  uint64_t v42 = 0LL;
  uint64_t v43 = 0LL;
  char v47 = 0;
  uint64_t v45 = 0LL;
  uint64_t v46 = 0LL;
  char v50 = 0;
  uint64_t v48 = 0LL;
  uint64_t v49 = 0LL;
  char v53 = 0;
  uint64_t v51 = 0LL;
  uint64_t v52 = 0LL;
  char v56 = 0;
  uint64_t v54 = 0LL;
  uint64_t v55 = 0LL;
  char v59 = 0;
  uint64_t v58 = 0LL;
  uint64_t v57 = 0LL;
  char v62 = 0;
  uint64_t v60 = 0LL;
  uint64_t v61 = 0LL;
  char v65 = 0;
  uint64_t v63 = 0LL;
  uint64_t v64 = 0LL;
  __int128 v66 = 0u;
  __int128 v67 = 0u;
  uint64_t v68 = 0LL;
  bzero(v22, 0x3011uLL);
  int v69 = 1065353216;
  BOOL v72 = v7;
  uint64_t v9 = (void *)v7[1];
  if (!v9 || (unint64_t)(v9 + 4) > v7[2])
  {
    unint64_t v10 = 2LL * v7[4];
    if (v10 <= 0x21) {
      unint64_t v10 = 33LL;
    }
    v7[4] = v10;
    unint64_t v11 = v10 + 8;
    size_t v12 = malloc(v10 + 8);
    *size_t v12 = v7[3];
    uint64_t v9 = v12 + 1;
    v7[2] = (char *)v12 + v11;
    void v7[3] = v12;
  }

  v7[1] = v9 + 4;
  unint64_t v70 = v9;
  uint64_t v71 = 0x2000000000LL;
  if ((_DWORD)v19)
  {
    *(_OWORD *)uint64_t v6 = v19;
    uint64_t v13 = v20;
    *(void *)(v6 + 24) = 0LL;
    *(void *)(v6 + 32) = 0LL;
    *(void *)(v6 + 16) = v13;
    uint64_t v14 = (void *)*((void *)&v67 + 1);
    if (*((void *)&v67 + 1)) {
      goto LABEL_9;
    }
  }

  else
  {
    unint64_t v17 = v70;
    uint64_t v18 = v71;
    *(_DWORD *)uint64_t v6 = 0;
    *(void *)(v6 + 8) = 0LL;
    *(_DWORD *)(v6 + 16) = 0;
    *(void *)(v6 + 24) = v17;
    *(void *)(v6 + 32) = v18;
    uint64_t v14 = (void *)*((void *)&v67 + 1);
    if (*((void *)&v67 + 1))
    {
      do
      {
LABEL_9:
        int v15 = (void *)*v14;
        operator delete(v14);
        uint64_t v14 = v15;
      }

      while (v15);
    }
  }

  uint64_t v16 = (void *)*((void *)&v66 + 1);
  *((void *)&v66 + 1) = 0LL;
  if (v16) {
    operator delete(v16);
  }
}

void swift::Demangle::__runtime::mangleNodeAsObjcCString( swift::Demangle::__runtime *this, swift::Demangle::__runtime::Node *a2, swift::Demangle::__runtime::NodeFactory *a3)
{
  uint64_t v3 = MEMORY[0x1895F8858](this);
  uint64_t v6 = v5;
  if (!v3)
  {
    *(_DWORD *)uint64_t v5 = 1;
    *(void *)(v5 + 8) = 0LL;
    *(_DWORD *)(v5 + 16) = 3014;
    return;
  }

  BOOL v7 = v4;
  unsigned int v8 = (swift::Demangle::__runtime::Node *)v3;
  char v21 = 0;
  v20[1540] = 0LL;
  __int128 v19 = v4;
  v20[1539] = 0LL;
  char v24 = 0;
  uint64_t v23 = 0LL;
  uint64_t v22 = 0LL;
  char v27 = 0;
  uint64_t v26 = 0LL;
  uint64_t v25 = 0LL;
  char v30 = 0;
  uint64_t v29 = 0LL;
  uint64_t v28 = 0LL;
  char v33 = 0;
  uint64_t v32 = 0LL;
  uint64_t v31 = 0LL;
  char v36 = 0;
  uint64_t v35 = 0LL;
  uint64_t v34 = 0LL;
  char v39 = 0;
  uint64_t v38 = 0LL;
  uint64_t v37 = 0LL;
  char v42 = 0;
  uint64_t v40 = 0LL;
  uint64_t v41 = 0LL;
  char v45 = 0;
  uint64_t v43 = 0LL;
  uint64_t v44 = 0LL;
  char v48 = 0;
  uint64_t v46 = 0LL;
  uint64_t v47 = 0LL;
  char v51 = 0;
  uint64_t v49 = 0LL;
  uint64_t v50 = 0LL;
  char v54 = 0;
  uint64_t v52 = 0LL;
  uint64_t v53 = 0LL;
  char v57 = 0;
  uint64_t v56 = 0LL;
  uint64_t v55 = 0LL;
  char v60 = 0;
  uint64_t v58 = 0LL;
  uint64_t v59 = 0LL;
  char v63 = 0;
  uint64_t v61 = 0LL;
  uint64_t v62 = 0LL;
  __int128 v64 = 0u;
  __int128 v65 = 0u;
  uint64_t v66 = 0LL;
  bzero(v20, 0x3011uLL);
  int v67 = 1065353216;
  int v69 = v7;
  uint64_t v9 = (char *)v7[1];
  if (!v9 || (unint64_t)(v9 + 32) > v7[2])
  {
    unint64_t v10 = 2LL * v7[4];
    if (v10 <= 0x21) {
      unint64_t v10 = 33LL;
    }
    v7[4] = v10;
    unint64_t v11 = v10 + 8;
    size_t v12 = malloc(v10 + 8);
    *size_t v12 = v7[3];
    uint64_t v9 = (char *)(v12 + 1);
    v7[2] = (char *)v12 + v11;
    void v7[3] = v12;
  }

  v7[1] = v9 + 32;
  v68[0] = v9;
  v68[1] = (char *)0x2000000000LL;
  swift::Demangle::__runtime::CharVector::append(v68, "_Tt", 3uLL, v7);
  if ((_DWORD)v17)
  {
    *(_OWORD *)uint64_t v6 = v17;
    *(void *)(v6 + 16) = v18;
    uint64_t v13 = (void *)*((void *)&v65 + 1);
    if (*((void *)&v65 + 1)) {
      goto LABEL_9;
    }
  }

  else
  {
    swift::Demangle::__runtime::CharVector::append(v68, "_", 2uLL, v69);
    uint64_t v16 = v68[0];
    *(_DWORD *)uint64_t v6 = 0;
    *(void *)(v6 + 8) = 0LL;
    *(_DWORD *)(v6 + 16) = 0;
    *(void *)(v6 + 24) = v16;
    uint64_t v13 = (void *)*((void *)&v65 + 1);
    if (*((void *)&v65 + 1))
    {
      do
      {
LABEL_9:
        uint64_t v14 = (void *)*v13;
        operator delete(v13);
        uint64_t v13 = v14;
      }

      while (v14);
    }
  }

  int v15 = (void *)*((void *)&v64 + 1);
  *((void *)&v64 + 1) = 0LL;
  if (v15) {
    operator delete(v15);
  }
}

void anonymous namespace'::Remangler::mangleAllocator( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v4[0] = 0;
  uint64_t v6 = 0LL;
  uint64_t v7 = 0LL;
  std::string __p = 0LL;
  if (SHIBYTE(v7) < 0) {
    operator delete(__p);
  }
}

void anonymous namespace'::Remangler::mangleAnonymousContext( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v4[0] = 0;
  uint64_t v6 = 0LL;
  uint64_t v7 = 0LL;
  std::string __p = 0LL;
  if (SHIBYTE(v7) < 0) {
    operator delete(__p);
  }
}

void anonymous namespace'::Remangler::mangleAssociatedType( const void **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  switch(v6)
  {
    case 1:
      goto LABEL_7;
    case 2:
      goto LABEL_11;
    case 5:
      int v7 = *((_DWORD *)a2 + 2);
      if (v7)
      {
        if (v7 == 1)
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_7:
          return;
        }

char *anonymous namespace'::Remangler::mangleAssociatedTypeRef@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v15[0] = 0LL;
  v15[1] = 0LL;
  char v16 = 0;
  if ((_DWORD)result)
  {
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    size_t v9 = (_DWORD *)(a4 + 16);
LABEL_22:
    *size_t v9 = 0;
    return result;
  }

  swift::Demangle::__runtime::CharVector::append(this + 1591, "Q", 1uLL, this[1593]);
  int v10 = *((unsigned __int8 *)a2 + 18);
  unint64_t v11 = (swift::Demangle::__runtime::Node **)a2;
  if ((v10 - 1) >= 2)
  {
    if (v10 == 5)
    {
      uint64_t v12 = *(void *)a2;
      unint64_t v11 = *(swift::Demangle::__runtime::Node ***)a2;
      goto LABEL_11;
    }

    unint64_t v11 = 0LL;
  }

  switch(v10)
  {
    case 1:
      unint64_t v13 = (swift::Demangle::__runtime::Node **)((char *)a2 + 8);
      if (v11 == v13) {
        goto LABEL_21;
      }
      goto LABEL_18;
    case 2:
      unint64_t v13 = (swift::Demangle::__runtime::Node **)((char *)a2 + 16);
      if (v11 == v13) {
        goto LABEL_21;
      }
      goto LABEL_18;
    case 5:
      uint64_t v12 = *(void *)a2;
LABEL_11:
      unint64_t v13 = (swift::Demangle::__runtime::Node **)(v12 + 8LL * *((unsigned int *)a2 + 2));
      if (v11 == v13) {
        goto LABEL_21;
      }
      goto LABEL_18;
  }

  unint64_t v13 = 0LL;
  if (!v11)
  {
LABEL_21:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    size_t v9 = (_DWORD *)(a4 + 16);
    uint64_t result = swift::Demangle::__runtime::RemanglerBase::addSubstitution( (char *)this,  (const swift::Demangle::__runtime::SubstitutionEntry *)v15);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    goto LABEL_22;
  }

void *anonymous namespace'::Remangler::mangleAssociatedTypeMetadataAccessor@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Wt", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  int v10 = a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      unint64_t v11 = *a2;
      int v10 = (swift::Demangle::__runtime::Node **)*a2;
      goto LABEL_9;
    }

    int v10 = 0LL;
  }

  switch(v9)
  {
    case 1:
      uint64_t v12 = a2 + 1;
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      uint64_t v12 = a2 + 2;
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      unint64_t v11 = *a2;
LABEL_9:
      uint64_t v12 = (swift::Demangle::__runtime::Node **)((char *)v11 + 8 * *((unsigned int *)a2 + 2));
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }

  uint64_t v12 = 0LL;
  if (!v10)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

char *anonymous namespace'::Remangler::mangleAccessorAttachedMacroExpansion@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0LL;
  *(_DWORD *)(a4 + 16) = 0;
  int v9 = *((unsigned __int8 *)a2 + 18);
  int v10 = (swift::Demangle::__runtime::Node **)a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      uint64_t v11 = *(void *)a2;
      int v10 = *(swift::Demangle::__runtime::Node ***)a2;
      goto LABEL_9;
    }

    int v10 = 0LL;
  }

  switch(v9)
  {
    case 1:
      uint64_t v12 = (swift::Demangle::__runtime::Node **)((char *)a2 + 8);
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      uint64_t v12 = (swift::Demangle::__runtime::Node **)((char *)a2 + 16);
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v11 = *(void *)a2;
LABEL_9:
      uint64_t v12 = (swift::Demangle::__runtime::Node **)(v11 + 8LL * *((unsigned int *)a2 + 2));
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }

  uint64_t v12 = 0LL;
  if (!v10)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

void anonymous namespace'::Remangler::mangleAssociatedTypeWitnessTableAccessor( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (*((_BYTE *)a2 + 18) != 5 || *((_DWORD *)a2 + 2) != 3)
  {
    *(_DWORD *)a4 = 1;
    *(void *)(a4 + 8) = a2;
    int v11 = 970;
LABEL_13:
    *(_DWORD *)(a4 + 16) = v11;
    return;
  }

  unsigned int v8 = a3 + 1;
  if (*(_DWORD *)a4) {
    return;
  }
  int v9 = *((unsigned __int8 *)a2 + 18);
  int v10 = a2;
  if (v9 == 2) {
    goto LABEL_8;
  }
  if (v9 != 5 || *((_DWORD *)a2 + 2) <= 1u)
  {
    *(_DWORD *)a4 = 1;
    *(void *)(a4 + 8) = a2;
    int v11 = 119;
    goto LABEL_13;
  }

  int v10 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_8:
  if (!*(_DWORD *)a4)
  {
  }

unsigned int *anonymous namespace'::Remangler::mangleAutoClosureType@<X0>( unsigned int *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6 = (uint64_t)this;
  unsigned int v8 = this[3184];
  size_t v9 = this[3185];
  int v10 = (char *)*((void *)this + 1591);
  if (v8 >= v9)
  {
    int v11 = (void *)*((void *)this + 1593);
    uint64_t v12 = (char *)v11[1];
    if (&v10[v9] == v12)
    {
      unint64_t v14 = (unint64_t)&v10[v9 + 1];
      unint64_t v13 = v11[2];
      if (v14 <= v13)
      {
        v11[1] = v14;
        LODWORD(v15) = 1;
LABEL_20:
        *(_DWORD *)(v6 + 1274printNode(&v3, this, 0) = v9 + v15;
        goto LABEL_21;
      }
    }

    else
    {
      unint64_t v13 = v11[2];
    }

    else {
      uint64_t v15 = (2 * v9);
    }
    size_t v16 = v15 + v9;
    if (v12) {
      BOOL v17 = (unint64_t)&v12[v15 + v9] > v13;
    }
    else {
      BOOL v17 = 1;
    }
    int v10 = (char *)v11[1];
    if (v17)
    {
      unint64_t v18 = 2LL * v11[4];
      if (v18 <= v16 + 1) {
        unint64_t v18 = v16 + 1;
      }
      v11[4] = v18;
      unint64_t v19 = v18 + 8;
      this = (unsigned int *)malloc(v18 + 8);
      uint64_t v20 = (char *)this + v19;
      *(void *)this = v11[3];
      int v10 = (char *)(this + 2);
      void v11[2] = v20;
      void v11[3] = this;
    }

    v11[1] = &v10[v16];
    if ((_DWORD)v9)
    {
      this = (unsigned int *)memcpy(v10, *(const void **)(v6 + 12728), v9);
      LODWORD(v9) = *(_DWORD *)(v6 + 12740);
      unsigned int v8 = *(_DWORD *)(v6 + 12736);
    }

    *(void *)(v6 + 12728) = v10;
    goto LABEL_20;
  }

char *anonymous namespace'::Remangler::mangleBodyAttachedMacroExpansion@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0LL;
  *(_DWORD *)(a4 + 16) = 0;
  int v9 = *((unsigned __int8 *)a2 + 18);
  int v10 = (swift::Demangle::__runtime::Node **)a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      uint64_t v11 = *(void *)a2;
      int v10 = *(swift::Demangle::__runtime::Node ***)a2;
      goto LABEL_9;
    }

    int v10 = 0LL;
  }

  switch(v9)
  {
    case 1:
      uint64_t v12 = (swift::Demangle::__runtime::Node **)((char *)a2 + 8);
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      uint64_t v12 = (swift::Demangle::__runtime::Node **)((char *)a2 + 16);
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v11 = *(void *)a2;
LABEL_9:
      uint64_t v12 = (swift::Demangle::__runtime::Node **)(v11 + 8LL * *((unsigned int *)a2 + 2));
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }

  uint64_t v12 = 0LL;
  if (!v10)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

void anonymous namespace'::Remangler::mangleBoundGenericClass( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v4[0] = 0;
  uint64_t v6 = 0LL;
  uint64_t v7 = 0LL;
  std::string __p = 0LL;
  if (SHIBYTE(v7) < 0) {
    operator delete(__p);
  }
}

unsigned int *anonymous namespace'::Remangler::mangleCFunctionPointer@<X0>( unsigned int *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6 = (uint64_t)this;
  unsigned int v8 = this[3184];
  size_t v9 = this[3185];
  int v10 = (char *)*((void *)this + 1591);
  if (v8 >= v9)
  {
    uint64_t v11 = (void *)*((void *)this + 1593);
    uint64_t v12 = (char *)v11[1];
    if (&v10[v9] == v12)
    {
      unint64_t v14 = (unint64_t)&v10[v9 + 1];
      unint64_t v13 = v11[2];
      if (v14 <= v13)
      {
        v11[1] = v14;
        LODWORD(v15) = 1;
LABEL_20:
        *(_DWORD *)(v6 + 1274printNode(&v3, this, 0) = v9 + v15;
        goto LABEL_21;
      }
    }

    else
    {
      unint64_t v13 = v11[2];
    }

    else {
      uint64_t v15 = (2 * v9);
    }
    size_t v16 = v15 + v9;
    if (v12) {
      BOOL v17 = (unint64_t)&v12[v15 + v9] > v13;
    }
    else {
      BOOL v17 = 1;
    }
    int v10 = (char *)v11[1];
    if (v17)
    {
      unint64_t v18 = 2LL * v11[4];
      if (v18 <= v16 + 1) {
        unint64_t v18 = v16 + 1;
      }
      v11[4] = v18;
      unint64_t v19 = v18 + 8;
      this = (unsigned int *)malloc(v18 + 8);
      uint64_t v20 = (char *)this + v19;
      *(void *)this = v11[3];
      int v10 = (char *)(this + 2);
      void v11[2] = v20;
      void v11[3] = this;
    }

    v11[1] = &v10[v16];
    if ((_DWORD)v9)
    {
      this = (unsigned int *)memcpy(v10, *(const void **)(v6 + 12728), v9);
      LODWORD(v9) = *(_DWORD *)(v6 + 12740);
      unsigned int v8 = *(_DWORD *)(v6 + 12736);
    }

    *(void *)(v6 + 12728) = v10;
    goto LABEL_20;
  }

void *anonymous namespace'::Remangler::mangleClassMetadataBaseOffset@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Mo", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if (v9 == 1) {
  if (v9 == 5 && *((_DWORD *)a2 + 2) == 1)
  }
  {
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  *(_DWORD *)a4 = 10;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = 114;
  return result;
}

char *anonymous namespace'::Remangler::mangleConformanceAttachedMacroExpansion@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0LL;
  *(_DWORD *)(a4 + 16) = 0;
  int v9 = *((unsigned __int8 *)a2 + 18);
  int v10 = (swift::Demangle::__runtime::Node **)a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      uint64_t v11 = *(void *)a2;
      int v10 = *(swift::Demangle::__runtime::Node ***)a2;
      goto LABEL_9;
    }

    int v10 = 0LL;
  }

  switch(v9)
  {
    case 1:
      uint64_t v12 = (swift::Demangle::__runtime::Node **)((char *)a2 + 8);
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      uint64_t v12 = (swift::Demangle::__runtime::Node **)((char *)a2 + 16);
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v11 = *(void *)a2;
LABEL_9:
      uint64_t v12 = (swift::Demangle::__runtime::Node **)(v11 + 8LL * *((unsigned int *)a2 + 2));
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }

  uint64_t v12 = 0LL;
  if (!v10)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

void anonymous namespace'::Remangler::mangleConstructor( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v4[0] = 0;
  uint64_t v6 = 0LL;
  uint64_t v7 = 0LL;
  std::string __p = 0LL;
  if (SHIBYTE(v7) < 0) {
    operator delete(__p);
  }
}

void *anonymous namespace'::Remangler::mangleCoroutineContinuationPrototype@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "TC", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  int v10 = a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      uint64_t v11 = *a2;
      int v10 = (swift::Demangle::__runtime::Node **)*a2;
      goto LABEL_9;
    }

    int v10 = 0LL;
  }

  switch(v9)
  {
    case 1:
      uint64_t v12 = a2 + 1;
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      uint64_t v12 = a2 + 2;
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v11 = *a2;
LABEL_9:
      uint64_t v12 = (swift::Demangle::__runtime::Node **)((char *)v11 + 8 * *((unsigned int *)a2 + 2));
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }

  uint64_t v12 = 0LL;
  if (!v10)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

void anonymous namespace'::Remangler::mangleDeallocator( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v4[0] = 0;
  uint64_t v6 = 0LL;
  uint64_t v7 = 0LL;
  std::string __p = 0LL;
  if (SHIBYTE(v7) < 0) {
    operator delete(__p);
  }
}

void anonymous namespace'::Remangler::mangleDefaultArgumentInitializer( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v4[0] = 0;
  uint64_t v6 = 0LL;
  uint64_t v7 = 0LL;
  std::string __p = 0LL;
  if (SHIBYTE(v7) < 0) {
    operator delete(__p);
  }
}

void anonymous namespace'::Remangler::mangleDependentAssociatedTypeRef( _anonymous_namespace_::Remangler *this@<X0>, const void **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = a2;
  v30[0] = 0LL;
  v30[1] = 0LL;
  char v31 = 0;
  {
    int v9 = *((unsigned __int8 *)v5 + 18);
    if (v9 != 2)
    {
      if (v9 != 5) {
        goto LABEL_34;
      }
      if (*((_DWORD *)v5 + 2) < 2u) {
        goto LABEL_35;
      }
    }

    unsigned int v10 = *((_DWORD *)this + 3184);
    size_t v11 = *((unsigned int *)this + 3185);
    uint64_t v12 = (_BYTE *)*((void *)this + 1591);
    if (v10 < v11)
    {
LABEL_26:
      *((_DWORD *)this + 3184) = v10 + 1;
      v12[v10] = 80;
      int v23 = *((unsigned __int8 *)v5 + 18);
      char v24 = v5;
      if (v23 != 2)
      {
        if (v23 != 5 || *((_DWORD *)v5 + 2) < 2u)
        {
          unsigned int v25 = 0LL;
          goto LABEL_32;
        }

        char v24 = (const void **)*v5;
      }

      unsigned int v25 = (swift::Demangle::__runtime::Node *)v24[1];
LABEL_32:
      if (*(_DWORD *)a4) {
        return;
      }
      int v9 = *((unsigned __int8 *)v5 + 18);
LABEL_34:
      if ((v9 - 1) < 2)
      {
LABEL_36:
        uint64_t v26 = *v5;
        char v27 = *(const void **)*v5;
        unint64_t v28 = v26[1];
        swift::Demangle::__runtime::CharVector::append( (unsigned int *)this + 3182,  v28,  *((swift::Demangle::__runtime::NodeFactory **)this + 1593));
        swift::Demangle::__runtime::CharVector::append((char **)this + 1591, v27, v28, *((void **)this + 1593));
        *(_DWORD *)a4 = 0;
        *(void *)(a4 + 8) = 0LL;
        *(_DWORD *)(a4 + 16) = 0;
        unsigned int v8 = (_DWORD *)(a4 + 16);
        swift::Demangle::__runtime::RemanglerBase::addSubstitution( (char *)this,  (const swift::Demangle::__runtime::SubstitutionEntry *)v30);
        *(_DWORD *)a4 = 0;
        *(void *)(a4 + 8) = 0LL;
        goto LABEL_37;
      }

void anonymous namespace'::Remangler::mangleDependentGenericConformanceRequirement( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, _DWORD *a4@<X8>)
{
  uint64_t v5 = a2;
  int v8 = *((unsigned __int8 *)a2 + 18);
  int v9 = a2;
  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    int v9 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_5:
    unsigned int v10 = *(swift::Demangle::__runtime::Node **)v9;
    goto LABEL_7;
  }

  unsigned int v10 = 0LL;
LABEL_7:
  int v11 = *((unsigned __int8 *)v10 + 18);
  uint64_t v12 = v10;
  if (*(_WORD *)(*(void *)v12 + 16LL) != 38)
  {
    if (!*a4) {
      goto LABEL_19;
    }
    return;
  }

  if (v11 == 5 && *((_DWORD *)v10 + 2))
  {
    unsigned int v10 = *(swift::Demangle::__runtime::Node **)v10;
LABEL_14:
    unsigned int v13 = *(swift::Demangle::__runtime::Node **)v10;
    goto LABEL_18;
  }

  unsigned int v13 = 0LL;
LABEL_18:
  if (!*a4)
  {
LABEL_19:
    unsigned int v14 = a3 + 1;
    int v15 = *((unsigned __int8 *)v5 + 18);
    unint64_t v16 = v5;
    if (v15 != 2)
    {
      if (v15 != 5) {
        goto LABEL_49;
      }
      unsigned int v17 = *((_DWORD *)v5 + 2);
      if (v17 != 2)
      {
LABEL_46:
        if (v17 >= 2)
        {
          uint64_t v5 = *(swift::Demangle::__runtime::Node **)v5;
          goto LABEL_48;
        }

unsigned int *anonymous namespace'::Remangler::mangleDependentGenericParamType@<X0>( unsigned int *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = (uint64_t)this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  uint64_t v7 = a2;
  if (**(void **)v7) {
    goto LABEL_7;
  }
  int v8 = a2;
  if (v6 == 5) {
    int v8 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (**((void **)v8 + 1))
  {
LABEL_7:
    unsigned int v9 = this[3184];
    size_t v10 = this[3185];
    int v11 = (_BYTE *)*((void *)this + 1591);
    if (v9 < v10)
    {
LABEL_26:
      *(_DWORD *)(v4 + 12736) = v9 + 1;
      v11[v9] = 113;
    }

    uint64_t v12 = (void *)*((void *)this + 1593);
    unsigned int v13 = (_BYTE *)v12[1];
    if (&v11[v10] == v13)
    {
      unint64_t v15 = (unint64_t)&v11[v10 + 1];
      unint64_t v14 = v12[2];
      if (v15 <= v14)
      {
        v12[1] = v15;
        LODWORD(v16) = 1;
LABEL_25:
        *(_DWORD *)(v4 + 1274printNode(&v3, this, 0) = v10 + v16;
        goto LABEL_26;
      }
    }

    else
    {
      unint64_t v14 = v12[2];
    }

    else {
      uint64_t v16 = (2 * v10);
    }
    size_t v17 = v16 + v10;
    if (v13) {
      BOOL v18 = (unint64_t)&v13[v16 + v10] > v14;
    }
    else {
      BOOL v18 = 1;
    }
    int v11 = (_BYTE *)v12[1];
    if (v18)
    {
      unint64_t v19 = 2LL * v12[4];
      if (v19 <= v17 + 1) {
        unint64_t v19 = v17 + 1;
      }
      _OWORD v12[4] = v19;
      unint64_t v20 = v19 + 8;
      int v21 = malloc(v19 + 8);
      uint64_t v22 = (char *)v21 + v20;
      *int v21 = v12[3];
      int v11 = v21 + 1;
      v12[2] = v22;
      void v12[3] = v21;
    }

    v12[1] = &v11[v17];
    if ((_DWORD)v10)
    {
      memcpy(v11, *(const void **)(v4 + 12728), v10);
      LODWORD(v1printNode(&v3, this, 0) = *(_DWORD *)(v4 + 12740);
      unsigned int v9 = *(_DWORD *)(v4 + 12736);
    }

    *(void *)(v4 + 12728) = v11;
    goto LABEL_25;
  }

  unsigned int v23 = this[3184];
  size_t v24 = this[3185];
  int v25 = (char *)*((void *)this + 1591);
  if (v23 >= v24)
  {
    uint64_t v26 = (void *)*((void *)this + 1593);
    char v27 = (char *)v26[1];
    if (&v25[v24] == v27)
    {
      unint64_t v29 = (unint64_t)&v25[v24 + 1];
      unint64_t v28 = v26[2];
      if (v29 <= v28)
      {
        v26[1] = v29;
        LODWORD(v3printNode(&v3, this, 0) = 1;
LABEL_44:
        *(_DWORD *)(v4 + 1274printNode(&v3, this, 0) = v24 + v30;
        goto LABEL_45;
      }
    }

    else
    {
      unint64_t v28 = v26[2];
    }

    else {
      uint64_t v30 = (2 * v24);
    }
    size_t v31 = v30 + v24;
    if (!v27 || (unint64_t)&v27[v31] > v28)
    {
      unint64_t v32 = 2LL * v26[4];
      if (v32 <= v31 + 1) {
        unint64_t v32 = v31 + 1;
      }
      void v26[4] = v32;
      unint64_t v33 = v32 + 8;
      this = (unsigned int *)malloc(v32 + 8);
      uint64_t v34 = (char *)this + v33;
      *(void *)this = v26[3];
      char v27 = (char *)(this + 2);
      void v26[2] = v34;
      void v26[3] = this;
    }

    v26[1] = &v27[v31];
    if ((_DWORD)v24)
    {
      this = (unsigned int *)memcpy(v27, *(const void **)(v4 + 12728), v24);
      LODWORD(v24) = *(_DWORD *)(v4 + 12740);
      unsigned int v23 = *(_DWORD *)(v4 + 12736);
    }

    *(void *)(v4 + 12728) = v27;
    int v25 = v27;
    goto LABEL_44;
  }

unsigned int *anonymous namespace'::Remangler::mangleDependentGenericSameTypeRequirement@<X0>( const void **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, _DWORD *a4@<X8>)
{
  uint64_t v5 = a2;
  int v8 = *((unsigned __int8 *)a2 + 18);
  unsigned int v9 = a2;
  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    unsigned int v9 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_5:
    size_t v10 = *(swift::Demangle::__runtime::Node **)v9;
    goto LABEL_7;
  }

  size_t v10 = 0LL;
LABEL_7:
  int v11 = *((unsigned __int8 *)v10 + 18);
  uint64_t v12 = v10;
  if (*(_WORD *)(*(void *)v12 + 16LL) != 38)
  {
    if (!*a4) {
      goto LABEL_19;
    }
    return result;
  }

  if (v11 == 5 && *((_DWORD *)v10 + 2))
  {
    size_t v10 = *(swift::Demangle::__runtime::Node **)v10;
LABEL_14:
    unsigned int v13 = *(swift::Demangle::__runtime::Node **)v10;
    goto LABEL_18;
  }

  unsigned int v13 = 0LL;
LABEL_18:
  if (!*a4)
  {
LABEL_19:
    unsigned int v15 = a3 + 1;
    unsigned int v16 = *((_DWORD *)this + 3184);
    size_t v17 = *((unsigned int *)this + 3185);
    BOOL v18 = (char *)this[1591];
    unint64_t v19 = this[1593];
    unint64_t v20 = (char *)v19[1];
    if (&v18[v17] == v20)
    {
      unint64_t v22 = (unint64_t)&v18[v17 + 1];
      unint64_t v21 = v19[2];
      if (v22 <= v21)
      {
        v19[1] = v22;
        LODWORD(v23) = 1;
LABEL_35:
        *((_DWORD *)this + 3185) = v17 + v23;
LABEL_36:
        *((_DWORD *)this + 3184) = v16 + 1;
        v18[v16] = 122;
        int v29 = *((unsigned __int8 *)v5 + 18);
        if (v29 != 2)
        {
          if (v29 != 5 || *((_DWORD *)v5 + 2) < 2u)
          {
            uint64_t v30 = 0LL;
          }

          uint64_t v5 = *(swift::Demangle::__runtime::Node **)v5;
        }

        uint64_t v30 = (swift::Demangle::__runtime::Node *)*((void *)v5 + 1);
      }
    }

    else
    {
      unint64_t v21 = v19[2];
    }

    else {
      uint64_t v23 = (2 * v17);
    }
    size_t v24 = v23 + v17;
    if (!v20 || (unint64_t)&v20[v24] > v21)
    {
      unint64_t v25 = 2LL * v19[4];
      if (v25 <= v24 + 1) {
        unint64_t v25 = v24 + 1;
      }
      _OWORD v19[4] = v25;
      unint64_t v26 = v25 + 8;
      char v27 = malloc(v25 + 8);
      unint64_t v28 = (char *)v27 + v26;
      *char v27 = v19[3];
      unint64_t v20 = (char *)(v27 + 1);
      void v19[2] = v28;
      uint64_t v19[3] = v27;
    }

    v19[1] = &v20[v24];
    if ((_DWORD)v17)
    {
      memcpy(v20, this[1591], v17);
      LODWORD(vmemset(&v11, 0, 17) = *((_DWORD *)this + 3185);
      unsigned int v16 = *((_DWORD *)this + 3184);
    }

    this[1591] = v20;
    BOOL v18 = v20;
    goto LABEL_35;
  }

  return result;
}

void *anonymous namespace'::Remangler::mangleDependentGenericLayoutRequirement@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7 = *((unsigned __int8 *)a2 + 18);
  int v8 = a2;
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    int v8 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_5:
    unsigned int v9 = *(swift::Demangle::__runtime::Node **)v8;
    goto LABEL_7;
  }

  unsigned int v9 = 0LL;
LABEL_7:
  int v10 = *((unsigned __int8 *)v9 + 18);
  int v11 = v9;
  if (*(_WORD *)(*(void *)v11 + 16LL) != 38)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    goto LABEL_19;
  }

  if (v10 == 5 && *((_DWORD *)v9 + 2))
  {
    unsigned int v9 = *(swift::Demangle::__runtime::Node **)v9;
LABEL_14:
    uint64_t v12 = *(swift::Demangle::__runtime::Node **)v9;
    goto LABEL_18;
  }

  uint64_t v12 = 0LL;
LABEL_18:
  if (*(_DWORD *)a4) {
    return result;
  }
LABEL_19:
  unsigned int v14 = *((_DWORD *)this + 3184);
  size_t v15 = *((unsigned int *)this + 3185);
  unsigned int v16 = (char *)*((void *)this + 1591);
  size_t v17 = (void *)*((void *)this + 1593);
  BOOL v18 = (char *)v17[1];
  if (&v16[v15] != v18)
  {
    unint64_t v19 = v17[2];
LABEL_23:
    else {
      uint64_t v21 = (2 * v15);
    }
    size_t v22 = v21 + v15;
    if (!v18 || (unint64_t)&v18[v22] > v19)
    {
      unint64_t v23 = 2LL * v17[4];
      if (v23 <= v22 + 1) {
        unint64_t v23 = v22 + 1;
      }
      v17[4] = v23;
      unint64_t v24 = v23 + 8;
      unint64_t v25 = malloc(v23 + 8);
      unint64_t v26 = (char *)v25 + v24;
      *unint64_t v25 = v17[3];
      BOOL v18 = (char *)(v25 + 1);
      void v17[2] = v26;
      v17[3] = v25;
    }

    v17[1] = &v18[v22];
    if ((_DWORD)v15)
    {
      memcpy(v18, *((const void **)this + 1591), v15);
      LODWORD(v15) = *((_DWORD *)this + 3185);
      unsigned int v14 = *((_DWORD *)this + 3184);
    }

    *((void *)this + 1591) = v18;
    unsigned int v16 = v18;
    goto LABEL_35;
  }

  unint64_t v20 = (unint64_t)&v16[v15 + 1];
  unint64_t v19 = v17[2];
  if (v20 > v19) {
    goto LABEL_23;
  }
  v17[1] = v20;
  LODWORD(v21) = 1;
LABEL_35:
  *((_DWORD *)this + 3185) = v15 + v21;
LABEL_36:
  *((_DWORD *)this + 3184) = v14 + 1;
  v16[v14] = 108;
  if (*((_BYTE *)a2 + 18) == 5)
  {
    unsigned int v27 = *((_DWORD *)a2 + 2);
    uint64_t v28 = *(void *)a2;
    uint64_t v29 = *(void *)(*(void *)a2 + 8LL);
    uint64_t v30 = *(const void **)v29;
    size_t v31 = *(void *)(v29 + 8);
    if (v27 > 2)
    {
      unsigned int v32 = **(_DWORD **)(v28 + 16);
      if (v27 == 3) {
        unsigned int v33 = -1;
      }
      else {
        unsigned int v33 = **(_DWORD **)(v28 + 24);
      }
      uint64_t result = swift::Demangle::__runtime::CharVector::append((char **)this + 1591, v30, v31, *((void **)this + 1593));
      if ((v32 & 0x80000000) == 0) {
        uint64_t result = swift::Demangle::__runtime::CharVector::append( (unsigned int *)this + 3182,  v32,  *((swift::Demangle::__runtime::NodeFactory **)this + 1593));
      }
      if ((v33 & 0x80000000) == 0)
      {
        swift::Demangle::__runtime::CharVector::append((char **)this + 1591, "_", 1uLL, *((void **)this + 1593));
        uint64_t result = swift::Demangle::__runtime::CharVector::append( (unsigned int *)this + 3182,  v33,  *((swift::Demangle::__runtime::NodeFactory **)this + 1593));
      }

      goto LABEL_42;
    }
  }

  else
  {
    uint64_t v34 = *((void *)a2 + 1);
    uint64_t v30 = *(const void **)v34;
    size_t v31 = *(void *)(v34 + 8);
  }

  uint64_t result = swift::Demangle::__runtime::CharVector::append((char **)this + 1591, v30, v31, *((void **)this + 1593));
LABEL_42:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0LL;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

void *anonymous namespace'::Remangler::mangleDependentGenericSignature@<X0>( void *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = (uint64_t)this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      int v8 = *a2;
      int v7 = (swift::Demangle::__runtime::Node **)*a2;
      goto LABEL_9;
    }

    int v7 = 0LL;
  }

  if (v6 == 1)
  {
    int v10 = a2 + 1;
LABEL_13:
    int v8 = (swift::Demangle::__runtime::Node *)a2;
    goto LABEL_14;
  }

  if (v6 == 2)
  {
    int v10 = a2 + 2;
    goto LABEL_13;
  }

  if (v6 != 5)
  {
    int v10 = 0LL;
    goto LABEL_29;
  }

  int v8 = *a2;
LABEL_9:
  uint64_t v9 = *((unsigned int *)a2 + 2);
  int v10 = (swift::Demangle::__runtime::Node **)((char *)v8 + 8 * v9);
  if (!(_DWORD)v9) {
    goto LABEL_29;
  }
LABEL_14:
  if (*(_WORD *)(*(void *)v8 + 16LL) == 37)
  {
    int v11 = (swift::Demangle::__runtime::Node *)a2;
    if (**(void **)v11 == 1LL)
    {
      if (v6 != 1)
      {
        if (v6 != 2)
        {
          if (*((_DWORD *)a2 + 2) == 1) {
            goto LABEL_23;
          }
          a2 = (swift::Demangle::__runtime::Node **)*a2;
        }

        if (*((_WORD *)a2[1] + 8) == 37) {
          goto LABEL_29;
        }
      }

unsigned int *anonymous namespace'::Remangler::mangleDependentGenericType@<X0>( unsigned int *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6 = (uint64_t)this;
  unsigned int v8 = this[3184];
  size_t v9 = this[3185];
  int v10 = (char *)*((void *)this + 1591);
  if (v8 >= v9)
  {
    int v11 = (void *)*((void *)this + 1593);
    unsigned int v12 = (char *)v11[1];
    if (&v10[v9] == v12)
    {
      unint64_t v14 = (unint64_t)&v10[v9 + 1];
      unint64_t v13 = v11[2];
      if (v14 <= v13)
      {
        v11[1] = v14;
        LODWORD(v15) = 1;
LABEL_20:
        *(_DWORD *)(v6 + 1274printNode(&v3, this, 0) = v9 + v15;
        goto LABEL_21;
      }
    }

    else
    {
      unint64_t v13 = v11[2];
    }

    else {
      uint64_t v15 = (2 * v9);
    }
    size_t v16 = v15 + v9;
    if (v12) {
      BOOL v17 = (unint64_t)&v12[v15 + v9] > v13;
    }
    else {
      BOOL v17 = 1;
    }
    int v10 = (char *)v11[1];
    if (v17)
    {
      unint64_t v18 = 2LL * v11[4];
      if (v18 <= v16 + 1) {
        unint64_t v18 = v16 + 1;
      }
      v11[4] = v18;
      unint64_t v19 = v18 + 8;
      this = (unsigned int *)malloc(v18 + 8);
      size_t v20 = (char *)this + v19;
      *(void *)this = v11[3];
      int v10 = (char *)(this + 2);
      void v11[2] = v20;
      void v11[3] = this;
    }

    v11[1] = &v10[v16];
    if ((_DWORD)v9)
    {
      this = (unsigned int *)memcpy(v10, *(const void **)(v6 + 12728), v9);
      LODWORD(v9) = *(_DWORD *)(v6 + 12740);
      unsigned int v8 = *(_DWORD *)(v6 + 12736);
    }

    *(void *)(v6 + 12728) = v10;
    goto LABEL_20;
  }

void *anonymous namespace'::Remangler::mangleDependentMemberType@<X0>( void *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, _DWORD *a4@<X8>)
{
  uint64_t v4 = a2;
  uint64_t v5 = (uint64_t)this;
  uint64_t v6 = 0LL;
  unsigned int v7 = 0;
  unsigned int v8 = 0;
  uint64_t v78 = this;
  do
  {
    if (v7 < v8) {
      goto LABEL_25;
    }
    int v11 = *(void **)v5;
    unsigned int v12 = &v6[8 * v8];
    unint64_t v13 = *(char **)(*(void *)v5 + 8LL);
    if (v12 != v13)
    {
      unint64_t v14 = v11[2];
LABEL_10:
      if (2 * v8 <= 4) {
        uint64_t v16 = 4LL;
      }
      else {
        uint64_t v16 = 2 * v8;
      }
      uint64_t v17 = 8 * (v16 + v8);
      unint64_t v18 = (char *)((unint64_t)(v13 + 7) & 0xFFFFFFFFFFFFFFF8LL);
      if (v18) {
        BOOL v19 = (unint64_t)&v18[v17] > v14;
      }
      else {
        BOOL v19 = 1;
      }
      if (v19)
      {
        unint64_t v20 = 2LL * v11[4];
        if (v20 <= v17 + 8) {
          unint64_t v20 = v17 + 8;
        }
        v11[4] = v20;
        unint64_t v21 = v20 + 8;
        this = malloc(v20 + 8);
        size_t v22 = (char *)this + v21;
        *this = v11[3];
        unint64_t v18 = (char *)(((unint64_t)this + 15) & 0xFFFFFFFFFFFFFFF8LL);
        void v11[2] = v22;
        void v11[3] = this;
      }

      v11[1] = &v18[v17];
      if (v8) {
        this = memcpy(v18, v6, 8LL * v8);
      }
      uint64_t v6 = v18;
      uint64_t v5 = (uint64_t)v78;
      goto LABEL_24;
    }

    uint64_t v15 = v12 + 8;
    unint64_t v14 = v11[2];
    v11[1] = v15;
    LODWORD(v16) = 1;
LABEL_24:
    v8 += v16;
LABEL_25:
    *(void *)&v6[8 * v7] = v4;
    int v23 = *((unsigned __int8 *)v4 + 18);
    if (v23 == 5 && *((_DWORD *)v4 + 2))
    {
      uint64_t v4 = *(swift::Demangle::__runtime::Node **)v4;
LABEL_29:
      size_t v9 = *(swift::Demangle::__runtime::Node **)v4;
      goto LABEL_31;
    }

    size_t v9 = 0LL;
LABEL_31:
    int v24 = *((unsigned __int8 *)v9 + 18);
    if (v24 == 5 && *((_DWORD *)v9 + 2))
    {
      size_t v9 = *(swift::Demangle::__runtime::Node **)v9;
LABEL_4:
      uint64_t v4 = *(swift::Demangle::__runtime::Node **)v9;
      goto LABEL_5;
    }

    uint64_t v4 = 0LL;
LABEL_5:
    int v10 = *((unsigned __int16 *)v4 + 8);
    ++v7;
  }

  while (v10 == 45);
  if (v10 != 38)
  {
    int v33 = 2194;
    int v34 = 1;
    uint64_t v35 = v4;
    uint64_t v26 = (uint64_t)a4;
    goto LABEL_111;
  }

  unsigned int v25 = v7 - 1;
  uint64_t v26 = (uint64_t)a4;
  if (!v7)
  {
    int v33 = 2195;
    int v34 = 1;
    uint64_t v35 = a2;
    goto LABEL_111;
  }

  if (v7 == 1)
  {
    unsigned int v27 = *(_DWORD *)(v5 + 12736);
    size_t v28 = *(unsigned int *)(v5 + 12740);
    unint64_t v29 = *(char **)(v5 + 12728);
    if (v27 >= v28)
    {
      unint64_t v30 = *(void **)(v5 + 12744);
      size_t v31 = (char *)v30[1];
      if (&v29[v28] != v31)
      {
        unint64_t v32 = v30[2];
        goto LABEL_47;
      }

      unint64_t v42 = (unint64_t)&v29[v28 + 1];
      unint64_t v32 = v30[2];
      if (v42 <= v32)
      {
        v30[1] = v42;
        LODWORD(v43) = 1;
      }

      else
      {
LABEL_47:
        else {
          uint64_t v43 = (2 * v28);
        }
        size_t v44 = v43 + v28;
        if (!v31 || (unint64_t)&v31[v44] > v32)
        {
          unint64_t v45 = 2LL * v30[4];
          if (v45 <= v44 + 1) {
            unint64_t v45 = v44 + 1;
          }
          v30[4] = v45;
          unint64_t v46 = v45 + 8;
          uint64_t v47 = malloc(v45 + 8);
          size_t v48 = (char *)v47 + v46;
          void *v47 = v30[3];
          size_t v31 = (char *)(v47 + 1);
          void v30[2] = v48;
          void v30[3] = v47;
        }

        v30[1] = &v31[v44];
        uint64_t v5 = (uint64_t)v78;
        if ((_DWORD)v28)
        {
          memcpy(v31, (const void *)v78[1591], v28);
          LODWORD(v28) = *((_DWORD *)v78 + 3185);
          unsigned int v27 = *((_DWORD *)v78 + 3184);
        }

        v78[1591] = v31;
        unint64_t v29 = v31;
      }

      *(_DWORD *)(v5 + 1274printNode(&v3, this, 0) = v28 + v43;
    }

    *(_DWORD *)(v5 + 12736) = v27 + 1;
    v29[v27] = 119;
    if (*a4) {
      return this;
    }
    uint64_t v56 = *(void **)v6;
    int v57 = *(unsigned __int8 *)(*(void *)v6 + 18LL);
    if (v57 == 2)
    {
LABEL_75:
      uint64_t v58 = (swift::Demangle::__runtime::Node *)v56[1];
    }

    else
    {
      if (v57 == 5 && *((_DWORD *)v56 + 2) >= 2u)
      {
        uint64_t v56 = (void *)*v56;
        goto LABEL_75;
      }

      uint64_t v58 = 0LL;
    }

    if (!*a4)
    {
      int v34 = 0;
      uint64_t v35 = 0LL;
      int v33 = 0;
      goto LABEL_111;
    }

    return this;
  }

  unsigned int v36 = *(_DWORD *)(v5 + 12736);
  size_t v37 = *(unsigned int *)(v5 + 12740);
  unint64_t v38 = *(char **)(v5 + 12728);
  if (v36 >= v37)
  {
    uint64_t v39 = *(void **)(v5 + 12744);
    size_t v40 = (char *)v39[1];
    if (&v38[v37] != v40)
    {
      unint64_t v41 = v39[2];
      goto LABEL_58;
    }

    unint64_t v49 = (unint64_t)&v38[v37 + 1];
    unint64_t v41 = v39[2];
    if (v49 <= v41)
    {
      v39[1] = v49;
      LODWORD(v5printNode(&v3, this, 0) = 1;
    }

    else
    {
LABEL_58:
      else {
        uint64_t v50 = (2 * v37);
      }
      size_t v51 = v50 + v37;
      if (!v40 || (unint64_t)&v40[v51] > v41)
      {
        unint64_t v52 = 2LL * v39[4];
        if (v52 <= v51 + 1) {
          unint64_t v52 = v51 + 1;
        }
        v39[4] = v52;
        unint64_t v53 = v52 + 8;
        unsigned int v54 = malloc(v52 + 8);
        size_t v55 = (char *)v54 + v53;
        *unsigned int v54 = v39[3];
        size_t v40 = (char *)(v54 + 1);
        void v39[2] = v55;
        v39[3] = v54;
      }

      v39[1] = &v40[v51];
      uint64_t v5 = (uint64_t)v78;
      if ((_DWORD)v37)
      {
        memcpy(v40, (const void *)v78[1591], v37);
        LODWORD(v37) = *((_DWORD *)v78 + 3185);
        unsigned int v36 = *((_DWORD *)v78 + 3184);
      }

      v78[1591] = v40;
      unint64_t v38 = v40;
    }

    *(_DWORD *)(v5 + 1274printNode(&v3, this, 0) = v37 + v50;
    uint64_t v26 = (uint64_t)a4;
  }

  *(_DWORD *)(v5 + 12736) = v36 + 1;
  v38[v36] = 87;
  if (*(_DWORD *)v26) {
    return this;
  }
  unsigned int v59 = 1;
  while (2)
  {
    unint64_t v60 = *(uint64_t **)&v6[8 * v25];
    int v61 = *((unsigned __int8 *)v60 + 18);
    if (v61 == 2)
    {
LABEL_87:
      size_t v62 = (swift::Demangle::__runtime::Node *)v60[1];
    }

    else
    {
      if (v61 == 5 && *((_DWORD *)v60 + 2) >= 2u)
      {
        unint64_t v60 = (uint64_t *)*v60;
        goto LABEL_87;
      }

      size_t v62 = 0LL;
    }

    if (*(_DWORD *)v26) {
      return this;
    }
    ++v59;
    --v25;
    if (v59 <= v7) {
      continue;
    }
    break;
  }

  unsigned int v63 = *(_DWORD *)(v5 + 12736);
  size_t v64 = *(unsigned int *)(v5 + 12740);
  unint64_t v65 = *(char **)(v5 + 12728);
  if (v63 >= v64)
  {
    uint64_t v66 = *(void **)(v5 + 12744);
    int v67 = (char *)v66[1];
    if (&v65[v64] != v67)
    {
      unint64_t v68 = v66[2];
      goto LABEL_97;
    }

    unint64_t v69 = (unint64_t)&v65[v64 + 1];
    unint64_t v68 = v66[2];
    if (v69 <= v68)
    {
      v66[1] = v69;
      LODWORD(v7printNode(&v3, this, 0) = 1;
    }

    else
    {
LABEL_97:
      else {
        uint64_t v70 = (2 * v64);
      }
      size_t v71 = v70 + v64;
      if (!v67 || (unint64_t)&v67[v71] > v68)
      {
        unint64_t v72 = 2LL * v66[4];
        if (v72 <= v71 + 1) {
          unint64_t v72 = v71 + 1;
        }
        v66[4] = v72;
        unint64_t v73 = v72 + 8;
        this = malloc(v72 + 8);
        uint64_t v74 = (char *)this + v73;
        *this = v66[3];
        int v67 = (char *)(this + 1);
        v66[2] = v74;
        v66[3] = this;
      }

      v66[1] = &v67[v71];
      uint64_t v5 = (uint64_t)v78;
      if ((_DWORD)v64)
      {
        this = memcpy(v67, (const void *)v78[1591], v64);
        LODWORD(v64) = *((_DWORD *)v78 + 3185);
        unsigned int v63 = *((_DWORD *)v78 + 3184);
      }

      v78[1591] = v67;
      unint64_t v65 = v67;
    }

    *(_DWORD *)(v5 + 1274printNode(&v3, this, 0) = v64 + v70;
  }

  int v34 = 0;
  uint64_t v35 = 0LL;
  int v33 = 0;
  *(_DWORD *)(v5 + 12736) = v63 + 1;
  v65[v63] = 95;
LABEL_111:
  *(_DWORD *)uint64_t v26 = v34;
  *(void *)(v26 + 8) = v35;
  *(_DWORD *)(v26 + 16) = v33;
  return this;
}

void anonymous namespace'::Remangler::mangleDestructor( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v4[0] = 0;
  uint64_t v6 = 0LL;
  uint64_t v7 = 0LL;
  std::string __p = 0LL;
  if (SHIBYTE(v7) < 0) {
    operator delete(__p);
  }
}

void anonymous namespace'::Remangler::mangleDidSet( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v6[0] = 0;
  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  std::string __p = 0LL;
  int v4 = *((unsigned __int8 *)a2 + 18);
  uint64_t v5 = 0LL;
  if (v4 != 5) {
    goto LABEL_6;
  }
  if (*((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    uint64_t v5 = *a2;
    goto LABEL_6;
  }

  uint64_t v5 = 0LL;
LABEL_6:
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
}

unsigned int *anonymous namespace'::Remangler::mangleDynamicSelf@<X0>( unsigned int *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6 = (uint64_t)this;
  unsigned int v8 = this[3184];
  size_t v9 = this[3185];
  int v10 = (char *)*((void *)this + 1591);
  if (v8 >= v9)
  {
    int v11 = (void *)*((void *)this + 1593);
    unsigned int v12 = (char *)v11[1];
    if (&v10[v9] == v12)
    {
      unint64_t v14 = (unint64_t)&v10[v9 + 1];
      unint64_t v13 = v11[2];
      if (v14 <= v13)
      {
        v11[1] = v14;
        LODWORD(v15) = 1;
LABEL_20:
        *(_DWORD *)(v6 + 1274printNode(&v3, this, 0) = v9 + v15;
        goto LABEL_21;
      }
    }

    else
    {
      unint64_t v13 = v11[2];
    }

    else {
      uint64_t v15 = (2 * v9);
    }
    size_t v16 = v15 + v9;
    if (v12) {
      BOOL v17 = (unint64_t)&v12[v15 + v9] > v13;
    }
    else {
      BOOL v17 = 1;
    }
    int v10 = (char *)v11[1];
    if (v17)
    {
      unint64_t v18 = 2LL * v11[4];
      if (v18 <= v16 + 1) {
        unint64_t v18 = v16 + 1;
      }
      v11[4] = v18;
      unint64_t v19 = v18 + 8;
      this = (unsigned int *)malloc(v18 + 8);
      unint64_t v20 = (char *)this + v19;
      *(void *)this = v11[3];
      int v10 = (char *)(this + 2);
      void v11[2] = v20;
      void v11[3] = this;
    }

    v11[1] = &v10[v16];
    if ((_DWORD)v9)
    {
      this = (unsigned int *)memcpy(v10, *(const void **)(v6 + 12728), v9);
      LODWORD(v9) = *(_DWORD *)(v6 + 12740);
      unsigned int v8 = *(_DWORD *)(v6 + 12736);
    }

    *(void *)(v6 + 12728) = v10;
    goto LABEL_20;
  }

void *anonymous namespace'::Remangler::mangleEnumCase@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "WC", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if (v9 == 1) {
  if (v9 == 5 && *((_DWORD *)a2 + 2) == 1)
  }
  {
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  *(_DWORD *)a4 = 10;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = 114;
  return result;
}

unsigned int *anonymous namespace'::Remangler::mangleNoEscapeFunctionType@<X0>( unsigned int *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6 = (uint64_t)this;
  unsigned int v8 = this[3184];
  size_t v9 = this[3185];
  int v10 = (char *)*((void *)this + 1591);
  if (v8 >= v9)
  {
    int v11 = (void *)*((void *)this + 1593);
    unsigned int v12 = (char *)v11[1];
    if (&v10[v9] == v12)
    {
      unint64_t v14 = (unint64_t)&v10[v9 + 1];
      unint64_t v13 = v11[2];
      if (v14 <= v13)
      {
        v11[1] = v14;
        LODWORD(v15) = 1;
LABEL_20:
        *(_DWORD *)(v6 + 1274printNode(&v3, this, 0) = v9 + v15;
        goto LABEL_21;
      }
    }

    else
    {
      unint64_t v13 = v11[2];
    }

    else {
      uint64_t v15 = (2 * v9);
    }
    size_t v16 = v15 + v9;
    if (v12) {
      BOOL v17 = (unint64_t)&v12[v15 + v9] > v13;
    }
    else {
      BOOL v17 = 1;
    }
    int v10 = (char *)v11[1];
    if (v17)
    {
      unint64_t v18 = 2LL * v11[4];
      if (v18 <= v16 + 1) {
        unint64_t v18 = v16 + 1;
      }
      v11[4] = v18;
      unint64_t v19 = v18 + 8;
      this = (unsigned int *)malloc(v18 + 8);
      unint64_t v20 = (char *)this + v19;
      *(void *)this = v11[3];
      int v10 = (char *)(this + 2);
      void v11[2] = v20;
      void v11[3] = this;
    }

    v11[1] = &v10[v16];
    if ((_DWORD)v9)
    {
      this = (unsigned int *)memcpy(v10, *(const void **)(v6 + 12728), v9);
      LODWORD(v9) = *(_DWORD *)(v6 + 12740);
      unsigned int v8 = *(_DWORD *)(v6 + 12736);
    }

    *(void *)(v6 + 12728) = v10;
    goto LABEL_20;
  }

void *anonymous namespace'::Remangler::mangleGlobalActorFunctionType@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = this + 1591;
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Y", 1uLL, this[1593]);
  uint64_t v8 = *(void *)a2;
  unsigned int v9 = *((_DWORD *)this + 3184);
  size_t v10 = *((unsigned int *)this + 3185);
  int v11 = this[1591];
  if (v9 >= v10)
  {
    unsigned int v12 = this[1593];
    unint64_t v13 = (char *)*((void *)v12 + 1);
    if (&v11[v10] == v13)
    {
      unint64_t v15 = (unint64_t)&v11[v10 + 1];
      unint64_t v14 = *((void *)v12 + 2);
      if (v15 <= v14)
      {
        *((void *)v12 + 1) = v15;
        LODWORD(v16) = 1;
LABEL_20:
        *((_DWORD *)this + 3185) = v10 + v16;
        goto LABEL_21;
      }
    }

    else
    {
      unint64_t v14 = *((void *)v12 + 2);
    }

    else {
      uint64_t v16 = (2 * v10);
    }
    size_t v17 = v16 + v10;
    if (v13) {
      BOOL v18 = (unint64_t)&v13[v16 + v10] > v14;
    }
    else {
      BOOL v18 = 1;
    }
    int v11 = (char *)*((void *)v12 + 1);
    if (v18)
    {
      unint64_t v19 = 2LL * *((void *)v12 + 4);
      if (v19 <= v17 + 1) {
        unint64_t v19 = v17 + 1;
      }
      *((void *)v12 + 4) = v19;
      unint64_t v20 = v19 + 8;
      uint64_t result = malloc(v19 + 8);
      int v21 = (char *)result + v20;
      *uint64_t result = *((void *)v12 + 3);
      int v11 = (char *)(result + 1);
      *((void *)v12 + 2) = v21;
      *((void *)v12 + 3) = result;
    }

    *((void *)v12 + 1) = &v11[v17];
    if ((_DWORD)v10)
    {
      uint64_t result = memcpy(v11, this[1591], v10);
      LODWORD(v1printNode(&v3, this, 0) = *((_DWORD *)this + 3185);
      unsigned int v9 = *((_DWORD *)this + 3184);
    }

    *uint64_t v6 = v11;
    goto LABEL_20;
  }

void *anonymous namespace'::Remangler::mangleDifferentiableFunctionType@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "D", 1uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  size_t v10 = a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      int v11 = *a2;
      size_t v10 = (swift::Demangle::__runtime::Node **)*a2;
      goto LABEL_9;
    }

    size_t v10 = 0LL;
  }

  switch(v9)
  {
    case 1:
      unsigned int v12 = a2 + 1;
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      unsigned int v12 = a2 + 2;
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      int v11 = *a2;
LABEL_9:
      unsigned int v12 = (swift::Demangle::__runtime::Node **)((char *)v11 + 8 * *((unsigned int *)a2 + 2));
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }

  unsigned int v12 = 0LL;
  if (!v10)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

char **anonymous namespace'::Remangler::mangleExistentialMetatype@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = a2;
  uint64_t v6 = (_anonymous_namespace_::Remangler *)this;
  int v8 = *((unsigned __int8 *)a2 + 18);
  if (v8 == 1) {
    goto LABEL_6;
  }
  if (v8 == 2) {
    goto LABEL_11;
  }
  if (v8 != 5)
  {
LABEL_14:
    *(_DWORD *)a4 = 1;
    *(void *)(a4 + 8) = a2;
    *(_DWORD *)(a4 + 16) = 1851;
    return this;
  }

  int v9 = *((_DWORD *)a2 + 2);
  if (v9 == 2)
  {
LABEL_11:
    this = (char **)swift::Demangle::__runtime::CharVector::append(this + 1591, "XPM", 3uLL, this[1593]);
    int v11 = *((unsigned __int8 *)v5 + 18);
    unsigned int v12 = (swift::Demangle::__runtime::Node **)v5;
    if ((v11 - 1) >= 2)
    {
      if (v11 == 5)
      {
        unsigned int v13 = *(swift::Demangle::__runtime::Node **)v5;
        unsigned int v12 = *(swift::Demangle::__runtime::Node ***)v5;
        goto LABEL_21;
      }

      unsigned int v12 = 0LL;
    }

    if (v11 == 1)
    {
      unint64_t v14 = (swift::Demangle::__runtime::Node **)((char *)v5 + 8);
      if (v12 == v14) {
        goto LABEL_31;
      }
      goto LABEL_28;
    }

    if (v11 == 2)
    {
      unint64_t v14 = (swift::Demangle::__runtime::Node **)((char *)v5 + 16);
      if (v12 == v14) {
        goto LABEL_31;
      }
      goto LABEL_28;
    }

    if (v11 != 5)
    {
      unint64_t v14 = 0LL;
      if (!v12)
      {
LABEL_31:
        *(_DWORD *)a4 = 0;
        *(void *)(a4 + 8) = 0LL;
        *(_DWORD *)(a4 + 16) = 0;
        return this;
      }

void anonymous namespace'::Remangler::mangleExplicitClosure( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v4[0] = 0;
  uint64_t v6 = 0LL;
  uint64_t v7 = 0LL;
  std::string __p = 0LL;
  if (SHIBYTE(v7) < 0) {
    operator delete(__p);
  }
}

void anonymous namespace'::Remangler::mangleExtension( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v4[0] = 0;
  uint64_t v6 = 0LL;
  uint64_t v7 = 0LL;
  std::string __p = 0LL;
  if (SHIBYTE(v7) < 0) {
    operator delete(__p);
  }
}

char *anonymous namespace'::Remangler::mangleExtensionAttachedMacroExpansion@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0LL;
  *(_DWORD *)(a4 + 16) = 0;
  int v9 = *((unsigned __int8 *)a2 + 18);
  int v10 = (swift::Demangle::__runtime::Node **)a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      uint64_t v11 = *(void *)a2;
      int v10 = *(swift::Demangle::__runtime::Node ***)a2;
      goto LABEL_9;
    }

    int v10 = 0LL;
  }

  switch(v9)
  {
    case 1:
      unsigned int v12 = (swift::Demangle::__runtime::Node **)((char *)a2 + 8);
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      unsigned int v12 = (swift::Demangle::__runtime::Node **)((char *)a2 + 16);
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v11 = *(void *)a2;
LABEL_9:
      unsigned int v12 = (swift::Demangle::__runtime::Node **)(v11 + 8LL * *((unsigned int *)a2 + 2));
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }

  unsigned int v12 = 0LL;
  if (!v10)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

void *anonymous namespace'::Remangler::mangleFieldOffset@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Wv", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  int v10 = a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      uint64_t v11 = *a2;
      int v10 = (swift::Demangle::__runtime::Node **)*a2;
      goto LABEL_9;
    }

    int v10 = 0LL;
  }

  switch(v9)
  {
    case 1:
      unsigned int v12 = a2 + 1;
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      unsigned int v12 = a2 + 2;
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v11 = *a2;
LABEL_9:
      unsigned int v12 = (swift::Demangle::__runtime::Node **)((char *)v11 + 8 * *((unsigned int *)a2 + 2));
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }

  unsigned int v12 = 0LL;
  if (!v10)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

char *anonymous namespace'::Remangler::mangleFreestandingMacroExpansion@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0LL;
  *(_DWORD *)(a4 + 16) = 0;
  int v9 = *((unsigned __int8 *)a2 + 18);
  int v10 = (swift::Demangle::__runtime::Node **)a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      uint64_t v11 = *(void *)a2;
      int v10 = *(swift::Demangle::__runtime::Node ***)a2;
      goto LABEL_9;
    }

    int v10 = 0LL;
  }

  switch(v9)
  {
    case 1:
      unsigned int v12 = (swift::Demangle::__runtime::Node **)((char *)a2 + 8);
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      unsigned int v12 = (swift::Demangle::__runtime::Node **)((char *)a2 + 16);
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v11 = *(void *)a2;
LABEL_9:
      unsigned int v12 = (swift::Demangle::__runtime::Node **)(v11 + 8LL * *((unsigned int *)a2 + 2));
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }

  unsigned int v12 = 0LL;
  if (!v10)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

void *anonymous namespace'::Remangler::mangleFullTypeMetadata@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Mf", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  int v10 = a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      uint64_t v11 = *a2;
      int v10 = (swift::Demangle::__runtime::Node **)*a2;
      goto LABEL_9;
    }

    int v10 = 0LL;
  }

  switch(v9)
  {
    case 1:
      unsigned int v12 = a2 + 1;
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      unsigned int v12 = a2 + 2;
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v11 = *a2;
LABEL_9:
      unsigned int v12 = (swift::Demangle::__runtime::Node **)((char *)v11 + 8 * *((unsigned int *)a2 + 2));
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }

  unsigned int v12 = 0LL;
  if (!v10)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

void anonymous namespace'::Remangler::mangleFunction( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v4[0] = 0;
  uint64_t v6 = 0LL;
  uint64_t v7 = 0LL;
  std::string __p = 0LL;
  if (SHIBYTE(v7) < 0) {
    operator delete(__p);
  }
}

void *anonymous namespace'::Remangler::mangleGenericProtocolWitnessTable@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "WG", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if (v9 == 1) {
  if (v9 == 5 && *((_DWORD *)a2 + 2) == 1)
  }
  {
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  *(_DWORD *)a4 = 10;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = 114;
  return result;
}

void *anonymous namespace'::Remangler::mangleGenericProtocolWitnessTableInstantiationFunction@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "WI", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if (v9 == 1) {
  if (v9 == 5 && *((_DWORD *)a2 + 2) == 1)
  }
  {
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  *(_DWORD *)a4 = 10;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = 114;
  return result;
}

void *anonymous namespace'::Remangler::mangleGenericTypeMetadataPattern@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "MP", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if (v9 == 1) {
  if (v9 == 5 && *((_DWORD *)a2 + 2) == 1)
  }
  {
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  *(_DWORD *)a4 = 10;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = 114;
  return result;
}

void anonymous namespace'::Remangler::mangleGetter( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v6[0] = 0;
  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  std::string __p = 0LL;
  int v4 = *((unsigned __int8 *)a2 + 18);
  uint64_t v5 = 0LL;
  if (v4 != 5) {
    goto LABEL_6;
  }
  if (*((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    uint64_t v5 = *a2;
    goto LABEL_6;
  }

  uint64_t v5 = 0LL;
LABEL_6:
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
}

void *anonymous namespace'::Remangler::mangleGlobal@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "_T", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  int v10 = a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      uint64_t v11 = *a2;
      int v10 = (swift::Demangle::__runtime::Node **)*a2;
      goto LABEL_9;
    }

    int v10 = 0LL;
  }

  switch(v9)
  {
    case 1:
      unsigned int v12 = a2 + 1;
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      unsigned int v12 = a2 + 2;
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v11 = *a2;
LABEL_9:
      unsigned int v12 = (swift::Demangle::__runtime::Node **)((char *)v11 + 8 * *((unsigned int *)a2 + 2));
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }

  unsigned int v12 = 0LL;
  if (!v10)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

void anonymous namespace'::Remangler::mangleGlobalGetter( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v6[0] = 0;
  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  std::string __p = 0LL;
  int v4 = *((unsigned __int8 *)a2 + 18);
  uint64_t v5 = 0LL;
  if (v4 != 5) {
    goto LABEL_6;
  }
  if (*((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    uint64_t v5 = *a2;
    goto LABEL_6;
  }

  uint64_t v5 = 0LL;
LABEL_6:
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
}

void *anonymous namespace'::Remangler::mangleIdentifier@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(const void **)a2;
  unint64_t v6 = *((void *)a2 + 1);
  uint64_t v7 = (char **)((char *)this + 12728);
  swift::Demangle::__runtime::CharVector::append( (unsigned int *)this + 3182,  v6,  *((swift::Demangle::__runtime::NodeFactory **)this + 1593));
  uint64_t result = swift::Demangle::__runtime::CharVector::append(v7, v5, v6, *((void **)this + 1593));
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = 0LL;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

void anonymous namespace'::Remangler::mangleIVarInitializer( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v4[0] = 0;
  uint64_t v6 = 0LL;
  uint64_t v7 = 0LL;
  std::string __p = 0LL;
  if (SHIBYTE(v7) < 0) {
    operator delete(__p);
  }
}

void anonymous namespace'::Remangler::mangleIVarDestroyer( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v4[0] = 0;
  uint64_t v6 = 0LL;
  uint64_t v7 = 0LL;
  std::string __p = 0LL;
  if (SHIBYTE(v7) < 0) {
    operator delete(__p);
  }
}

uint64_t anonymous namespace'::Remangler::mangleImplConvention@<X0>( uint64_t this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = (const void **)a2;
  if (*((_WORD *)a2 + 8) != 106)
  {
    int v6 = 1768;
    int v7 = 1;
    goto LABEL_33;
  }

  size_t v5 = *((void *)a2 + 1);
  int v6 = 1789;
  int v7 = 18;
  uint64_t v8 = this;
  uint64_t v9 = *(char **)a2;
  switch(v5)
  {
    case 3uLL:
      int v10 = "@in";
      goto LABEL_6;
    case 4uLL:
      int v10 = "@out";
LABEL_6:
      this = memcmp(*v3, v10, v5);
      if ((_DWORD)this) {
        goto LABEL_30;
      }
      uint64_t v11 = (char **)(v8 + 12728);
      char v12 = 105;
      goto LABEL_32;
    case 6uLL:
      this = memcmp(*(const void **)a2, "@inout", v5);
      if (!(_DWORD)this)
      {
        uint64_t v11 = (char **)(v8 + 12728);
        char v12 = 108;
        goto LABEL_32;
      }

      if (*(_DWORD *)v9 == 1853321024 && *((_WORD *)v9 + 2) == 25701)
      {
        uint64_t v11 = (char **)(v8 + 12728);
        char v12 = 111;
        goto LABEL_32;
      }

      goto LABEL_30;
    case 8uLL:
      this = memcmp(*(const void **)a2, "@unowned", v5);
      if ((_DWORD)this) {
        goto LABEL_30;
      }
      unsigned int v14 = *(_DWORD *)(v8 + 12736);
      size_t v15 = *(unsigned int *)(v8 + 12740);
      uint64_t v16 = *(char **)(v8 + 12728);
      size_t v17 = *(void **)(v8 + 12744);
      BOOL v18 = (char *)v17[1];
      if (&v16[v15] == v18)
      {
        unint64_t v39 = (unint64_t)&v16[v15 + 1];
        unint64_t v19 = v17[2];
        if (v39 <= v19)
        {
          v17[1] = v39;
          LODWORD(v4printNode(&v3, this, 0) = 1;
          goto LABEL_89;
        }
      }

      else
      {
        unint64_t v19 = v17[2];
      }

      else {
        uint64_t v40 = (2 * v15);
      }
      size_t v41 = v40 + v15;
      if (!v18 || (unint64_t)&v18[v41] > v19)
      {
        unint64_t v42 = 2LL * v17[4];
        if (v42 <= v41 + 1) {
          unint64_t v42 = v41 + 1;
        }
        v17[4] = v42;
        unint64_t v43 = v42 + 8;
        this = (uint64_t)malloc(v42 + 8);
        uint64_t v44 = this + v43;
        *(void *)this = v17[3];
        BOOL v18 = (char *)(this + 8);
        void v17[2] = v44;
        v17[3] = this;
      }

      v17[1] = &v18[v41];
      if ((_DWORD)v15)
      {
        this = (uint64_t)memcpy(v18, *(const void **)(v8 + 12728), v15);
        LODWORD(v15) = *(_DWORD *)(v8 + 12740);
        unsigned int v14 = *(_DWORD *)(v8 + 12736);
      }

      *(void *)(v8 + 12728) = v18;
      uint64_t v16 = v18;
LABEL_89:
      *(_DWORD *)(v8 + 1274printNode(&v3, this, 0) = v15 + v40;
LABEL_90:
      int v7 = 0;
      uint64_t v3 = 0LL;
      int v6 = 0;
      *(_DWORD *)(v8 + 12736) = v14 + 1;
      v16[v14] = 100;
      goto LABEL_33;
    case 0xBuLL:
      this = memcmp(*(const void **)a2, "@guaranteed", v5);
      if ((_DWORD)this) {
        goto LABEL_30;
      }
      unsigned int v20 = *(_DWORD *)(v8 + 12736);
      size_t v21 = *(unsigned int *)(v8 + 12740);
      size_t v22 = *(char **)(v8 + 12728);
      int v23 = *(void **)(v8 + 12744);
      int v24 = (char *)v23[1];
      if (&v22[v21] == v24)
      {
        unint64_t v57 = (unint64_t)&v22[v21 + 1];
        unint64_t v25 = v23[2];
        if (v57 <= v25)
        {
          v23[1] = v57;
          LODWORD(v58) = 1;
          goto LABEL_98;
        }
      }

      else
      {
        unint64_t v25 = v23[2];
      }

      else {
        uint64_t v58 = (2 * v21);
      }
      size_t v59 = v58 + v21;
      if (!v24 || (unint64_t)&v24[v59] > v25)
      {
        unint64_t v60 = 2LL * v23[4];
        if (v60 <= v59 + 1) {
          unint64_t v60 = v59 + 1;
        }
        void v23[4] = v60;
        unint64_t v61 = v60 + 8;
        this = (uint64_t)malloc(v60 + 8);
        uint64_t v62 = this + v61;
        *(void *)this = v23[3];
        int v24 = (char *)(this + 8);
        void v23[2] = v62;
        void v23[3] = this;
      }

      v23[1] = &v24[v59];
      if ((_DWORD)v21)
      {
        this = (uint64_t)memcpy(v24, *(const void **)(v8 + 12728), v21);
        LODWORD(v21) = *(_DWORD *)(v8 + 12740);
        unsigned int v20 = *(_DWORD *)(v8 + 12736);
      }

      *(void *)(v8 + 12728) = v24;
      size_t v22 = v24;
LABEL_98:
      *(_DWORD *)(v8 + 1274printNode(&v3, this, 0) = v21 + v58;
LABEL_99:
      int v7 = 0;
      uint64_t v3 = 0LL;
      int v6 = 0;
      *(_DWORD *)(v8 + 12736) = v20 + 1;
      v22[v20] = 103;
      goto LABEL_33;
    case 0xDuLL:
      if (*(void *)v9 == 0x6C65726F74756140LL && *(void *)(v9 + 5) == 0x64657361656C6572LL)
      {
        unsigned int v27 = *(_DWORD *)(this + 12736);
        size_t v28 = *(unsigned int *)(this + 12740);
        unint64_t v29 = *(char **)(this + 12728);
        if (v27 < v28)
        {
LABEL_93:
          int v7 = 0;
          uint64_t v3 = 0LL;
          int v6 = 0;
          *(_DWORD *)(v8 + 12736) = v27 + 1;
          v29[v27] = 97;
          goto LABEL_33;
        }

        unint64_t v30 = *(void **)(this + 12744);
        size_t v31 = (char *)v30[1];
        if (&v29[v28] == v31)
        {
          unint64_t v45 = (unint64_t)&v29[v28 + 1];
          unint64_t v32 = v30[2];
          if (v45 <= v32)
          {
            v30[1] = v45;
            LODWORD(v46) = 1;
LABEL_92:
            *(_DWORD *)(v8 + 1274printNode(&v3, this, 0) = v28 + v46;
            goto LABEL_93;
          }
        }

        else
        {
          unint64_t v32 = v30[2];
        }

        else {
          uint64_t v46 = (2 * v28);
        }
        size_t v47 = v46 + v28;
        if (!v31 || (unint64_t)&v31[v47] > v32)
        {
          unint64_t v48 = 2LL * v30[4];
          if (v48 <= v47 + 1) {
            unint64_t v48 = v47 + 1;
          }
          v30[4] = v48;
          unint64_t v49 = v48 + 8;
          this = (uint64_t)malloc(v48 + 8);
          uint64_t v50 = this + v49;
          *(void *)this = v30[3];
          size_t v31 = (char *)(this + 8);
          void v30[2] = v50;
          void v30[3] = this;
        }

        v30[1] = &v31[v47];
        if ((_DWORD)v28)
        {
          this = (uint64_t)memcpy(v31, *(const void **)(v8 + 12728), v28);
          LODWORD(v28) = *(_DWORD *)(v8 + 12740);
          unsigned int v27 = *(_DWORD *)(v8 + 12736);
        }

        *(void *)(v8 + 12728) = v31;
        unint64_t v29 = v31;
        goto LABEL_92;
      }

      this = memcmp(*(const void **)a2, "@deallocating", v5);
      if ((_DWORD)this)
      {
LABEL_30:
        int v6 = 1789;
        int v7 = 18;
      }

      else
      {
        uint64_t v11 = (char **)(v8 + 12728);
        char v12 = 101;
LABEL_32:
        this = (uint64_t)swift::Demangle::__runtime::RemanglerBuffer::operator<<(v11, v12);
        int v7 = 0;
        uint64_t v3 = 0LL;
        int v6 = 0;
      }

uint64_t anonymous namespace'::Remangler::mangleImplFunctionAttribute@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = a2;
  uint64_t result = *(void *)a2;
  uint64_t v7 = *((void *)a2 + 1);
  switch(v7)
  {
    case 6LL:
      uint64_t result = memcmp((const void *)result, "@async", 6uLL);
      if (!(_DWORD)result)
      {
        int v10 = "H";
        goto LABEL_20;
      }

      break;
    case 9LL:
      uint64_t result = memcmp((const void *)result, "@Sendable", 9uLL);
      if (!(_DWORD)result)
      {
        int v10 = "h";
        goto LABEL_20;
      }

      break;
    case 11LL:
      if (*(void *)result == 0x6F5F646C65697940LL && *(void *)(result + 3) == 0x65636E6F5F646C65LL)
      {
        int v10 = "A";
      }

      else
      {
        if (*(void *)result != 0x6D5F646C65697940LL || *(void *)(result + 3) != 0x796E616D5F646C65LL) {
          break;
        }
        int v10 = "G";
      }

uint64_t anonymous namespace'::Remangler::mangleImplFunctionConvention( _anonymous_namespace_::Remangler *this, swift::Demangle::__runtime::Node *a2, int a3)
{
  int v3 = *((unsigned __int8 *)a2 + 18);
  if ((v3 - 1) >= 2)
  {
    if (v3 != 5 || !*((_DWORD *)a2 + 2))
    {
      int v4 = 0LL;
      unsigned int v5 = a3 + 1;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  int v4 = *(swift::Demangle::__runtime::Node **)a2;
  unsigned int v5 = a3 + 1;
}

uint64_t anonymous namespace'::Remangler::mangleImplFunctionConventionName@<X0>( char **this@<X0>, size_t *a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = (swift::Demangle::__runtime::Node *)a2;
  size_t v5 = a2[1];
  int v6 = 1702;
  int v7 = 15;
  uint64_t result = *a2;
  switch(v5)
  {
    case 1uLL:
      uint64_t result = memcmp((const void *)result, "c", v5);
      if ((_DWORD)result) {
        goto LABEL_15;
      }
      int v10 = "Cc";
      goto LABEL_17;
    case 5uLL:
      if (*(_DWORD *)result != 1668246626 || *(_BYTE *)(result + 4) != 107) {
        goto LABEL_15;
      }
      int v10 = "Cb";
      goto LABEL_17;
    case 6uLL:
      uint64_t result = memcmp((const void *)result, "method", v5);
      if ((_DWORD)result) {
        goto LABEL_15;
      }
      int v10 = "Cm";
      goto LABEL_17;
    case 0xBuLL:
      uint64_t result = memcmp((const void *)result, "objc_method", v5);
      if ((_DWORD)result) {
        goto LABEL_15;
      }
      int v10 = "CO";
      goto LABEL_17;
    case 0xEuLL:
      uint64_t result = memcmp((const void *)result, "witness_method", v5);
      if ((_DWORD)result)
      {
LABEL_15:
        int v6 = 1702;
        int v7 = 15;
      }

      else
      {
        int v10 = "Cw";
LABEL_17:
        uint64_t result = (uint64_t)swift::Demangle::__runtime::CharVector::append(this + 1591, v10, 2uLL, this[1593]);
        int v7 = 0;
        int v3 = 0LL;
        int v6 = 0;
      }

uint64_t anonymous namespace'::Remangler::mangleImplFunctionType@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unint64_t v129 = this + 1591;
  uint64_t result = (uint64_t)swift::Demangle::__runtime::CharVector::append(this + 1591, "XF", 2uLL, this[1593]);
  int v8 = *((unsigned __int8 *)a2 + 18);
  uint64_t v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 == 5)
    {
      uint64_t v10 = *(void *)a2;
      uint64_t v9 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }

    uint64_t v9 = 0LL;
  }

  if (v8 == 1)
  {
    int v11 = (swift::Demangle::__runtime::Node **)((char *)a2 + 8);
    goto LABEL_27;
  }

  if (v8 == 2)
  {
    int v11 = (swift::Demangle::__runtime::Node **)((char *)a2 + 16);
LABEL_27:
    size_t v15 = this + 1592;
    unsigned int v16 = *((_DWORD *)this + 3184);
    size_t v20 = *((unsigned int *)this + 3185);
    BOOL v18 = this[1591];
    if (v16 < v20)
    {
LABEL_43:
      char v19 = 116;
      goto LABEL_44;
    }

    size_t v21 = this[1593];
    size_t v22 = (char *)*((void *)v21 + 1);
    if (&v18[v20] == v22)
    {
      unint64_t v24 = (unint64_t)&v18[v20 + 1];
      unint64_t v23 = *((void *)v21 + 2);
      if (v24 <= v23)
      {
        *((void *)v21 + 1) = v24;
        LODWORD(v25) = 1;
LABEL_42:
        *((_DWORD *)this + 3185) = v20 + v25;
        goto LABEL_43;
      }
    }

    else
    {
      unint64_t v23 = *((void *)v21 + 2);
    }

    else {
      uint64_t v25 = (2 * v20);
    }
    size_t v26 = v25 + v20;
    if (!v22 || (unint64_t)&v22[v26] > v23)
    {
      unint64_t v27 = 2LL * *((void *)v21 + 4);
      if (v27 <= v26 + 1) {
        unint64_t v27 = v26 + 1;
      }
      *((void *)v21 + 4) = v27;
      unint64_t v28 = v27 + 8;
      unsigned int v29 = v16;
      uint64_t result = (uint64_t)malloc(v27 + 8);
      unsigned int v16 = v29;
      uint64_t v30 = result + v28;
      *(void *)uint64_t result = *((void *)v21 + 3);
      size_t v22 = (char *)(result + 8);
      *((void *)v21 + 2) = v30;
      *((void *)v21 + 3) = result;
    }

    *((void *)v21 + 1) = &v22[v26];
    if ((_DWORD)v20)
    {
      uint64_t result = (uint64_t)memcpy(v22, this[1591], v20);
      LODWORD(v2printNode(&v3, this, 0) = *((_DWORD *)this + 3185);
      unsigned int v16 = *((_DWORD *)this + 3184);
    }

    size_t v15 = this + 1592;
    *unint64_t v129 = v22;
    BOOL v18 = v22;
    goto LABEL_42;
  }

  if (v8 != 5)
  {
    int v11 = 0LL;
    if (!v9) {
      goto LABEL_27;
    }
    goto LABEL_16;
  }

  uint64_t v10 = *(void *)a2;
LABEL_9:
  int v11 = (swift::Demangle::__runtime::Node **)(v10 + 8LL * *((unsigned int *)a2 + 2));
  if (v9 == (swift::Demangle::__runtime::Node *)v11) {
    goto LABEL_27;
  }
LABEL_16:
  int v12 = *(uint64_t **)v9;
  if (*(_WORD *)(*(void *)v9 + 16LL) != 106) {
    goto LABEL_27;
  }
  uint64_t result = *v12;
  uint64_t v13 = v12[1];
  uint64_t v9 = (swift::Demangle::__runtime::Node *)((char *)v9 + 8);
  if (v13 == 13)
  {
    uint64_t result = memcmp((const void *)result, "@callee_owned", 0xDuLL);
    if ((_DWORD)result)
    {
LABEL_63:
      unint64_t v42 = *(uint64_t **)v9;
      *(_DWORD *)a4 = 15;
      *(void *)(a4 + 8) = v42;
      *(_DWORD *)(a4 + 16) = 1639;
      return result;
    }

    size_t v15 = this + 1592;
    unsigned int v16 = *((_DWORD *)this + 3184);
    size_t v41 = *((unsigned int *)this + 3185);
    BOOL v18 = this[1591];
    if (v16 < v41)
    {
      char v19 = 111;
      goto LABEL_44;
    }

    uint64_t v97 = this[1593];
    unint64_t v98 = (char *)*((void *)v97 + 1);
    if (&v18[v41] == v98)
    {
      unint64_t v103 = (unint64_t)&v18[v41 + 1];
      unint64_t v99 = *((void *)v97 + 2);
      if (v103 <= v99)
      {
        *((void *)v97 + 1) = v103;
        LODWORD(v104) = 1;
LABEL_200:
        *((_DWORD *)this + 3185) = v41 + v104;
        char v19 = 111;
        goto LABEL_44;
      }
    }

    else
    {
      unint64_t v99 = *((void *)v97 + 2);
    }

    else {
      uint64_t v104 = (2 * v41);
    }
    size_t v105 = v104 + v41;
    if (!v98 || (unint64_t)&v98[v105] > v99)
    {
      unint64_t v106 = 2LL * *((void *)v97 + 4);
      if (v106 <= v105 + 1) {
        unint64_t v106 = v105 + 1;
      }
      *((void *)v97 + 4) = v106;
      unint64_t v107 = v106 + 8;
      int v126 = v104;
      unsigned int v108 = v16;
      uint64_t result = (uint64_t)malloc(v106 + 8);
      unsigned int v16 = v108;
      LODWORD(v104) = v126;
      uint64_t v109 = result + v107;
      *(void *)uint64_t result = *((void *)v97 + 3);
      unint64_t v98 = (char *)(result + 8);
      *((void *)v97 + 2) = v109;
      *((void *)v97 + 3) = result;
    }

    *((void *)v97 + 1) = &v98[v105];
    if ((_DWORD)v41)
    {
      uint64_t result = (uint64_t)memcpy(v98, this[1591], v41);
      LODWORD(v41) = *((_DWORD *)this + 3185);
      unsigned int v16 = *((_DWORD *)this + 3184);
    }

    *unint64_t v129 = v98;
    BOOL v18 = v98;
    goto LABEL_200;
  }

  if (v13 == 18)
  {
    uint64_t result = memcmp((const void *)result, "@callee_guaranteed", 0x12uLL);
    if ((_DWORD)result) {
      goto LABEL_63;
    }
    size_t v15 = this + 1592;
    unsigned int v16 = *((_DWORD *)this + 3184);
    size_t v67 = *((unsigned int *)this + 3185);
    BOOL v18 = this[1591];
    if (v16 < v67)
    {
      char v19 = 103;
      goto LABEL_44;
    }

    unint64_t v100 = this[1593];
    uint64_t v101 = (char *)*((void *)v100 + 1);
    if (&v18[v67] == v101)
    {
      unint64_t v110 = (unint64_t)&v18[v67 + 1];
      unint64_t v102 = *((void *)v100 + 2);
      if (v110 <= v102)
      {
        *((void *)v100 + 1) = v110;
        LODWORD(v111) = 1;
LABEL_202:
        *((_DWORD *)this + 3185) = v67 + v111;
        char v19 = 103;
        goto LABEL_44;
      }
    }

    else
    {
      unint64_t v102 = *((void *)v100 + 2);
    }

    else {
      uint64_t v111 = (2 * v67);
    }
    size_t v112 = v111 + v67;
    if (!v101 || (unint64_t)&v101[v112] > v102)
    {
      unint64_t v113 = 2LL * *((void *)v100 + 4);
      if (v113 <= v112 + 1) {
        unint64_t v113 = v112 + 1;
      }
      *((void *)v100 + 4) = v113;
      unint64_t v114 = v113 + 8;
      int v127 = v111;
      unsigned int v115 = v16;
      uint64_t result = (uint64_t)malloc(v113 + 8);
      unsigned int v16 = v115;
      LODWORD(v111) = v127;
      uint64_t v116 = result + v114;
      *(void *)uint64_t result = *((void *)v100 + 3);
      uint64_t v101 = (char *)(result + 8);
      *((void *)v100 + 2) = v116;
      *((void *)v100 + 3) = result;
    }

    *((void *)v100 + 1) = &v101[v112];
    if ((_DWORD)v67)
    {
      uint64_t result = (uint64_t)memcpy(v101, this[1591], v67);
      LODWORD(v67) = *((_DWORD *)this + 3185);
      unsigned int v16 = *((_DWORD *)this + 3184);
    }

    *unint64_t v129 = v101;
    BOOL v18 = v101;
    goto LABEL_202;
  }

  if (v13 != 15) {
    goto LABEL_63;
  }
  if (*(void *)result != 0x5F65656C6C616340LL || *(void *)(result + 7) != 0x64656E776F6E755FLL) {
    goto LABEL_63;
  }
  size_t v15 = this + 1592;
  unsigned int v16 = *((_DWORD *)this + 3184);
  size_t v17 = *((unsigned int *)this + 3185);
  BOOL v18 = this[1591];
  if (v16 < v17)
  {
    char v19 = 100;
    goto LABEL_44;
  }

  uint64_t v94 = this[1593];
  unint64_t v95 = (char *)*((void *)v94 + 1);
  if (&v18[v17] != v95)
  {
    unint64_t v96 = *((void *)v94 + 2);
LABEL_188:
    else {
      uint64_t v118 = (2 * v17);
    }
    size_t v119 = v118 + v17;
    if (!v95 || (unint64_t)&v95[v119] > v96)
    {
      unint64_t v120 = 2LL * *((void *)v94 + 4);
      if (v120 <= v119 + 1) {
        unint64_t v120 = v119 + 1;
      }
      *((void *)v94 + 4) = v120;
      unint64_t v121 = v120 + 8;
      int v128 = v118;
      unsigned int v122 = v16;
      uint64_t result = (uint64_t)malloc(v120 + 8);
      unsigned int v16 = v122;
      LODWORD(v118) = v128;
      uint64_t v123 = result + v121;
      *(void *)uint64_t result = *((void *)v94 + 3);
      unint64_t v95 = (char *)(result + 8);
      *((void *)v94 + 2) = v123;
      *((void *)v94 + 3) = result;
    }

    *((void *)v94 + 1) = &v95[v119];
    if ((_DWORD)v17)
    {
      uint64_t result = (uint64_t)memcpy(v95, this[1591], v17);
      LODWORD(vmemset(&v11, 0, 17) = *((_DWORD *)this + 3185);
      unsigned int v16 = *((_DWORD *)this + 3184);
    }

    *unint64_t v129 = v95;
    BOOL v18 = v95;
    goto LABEL_204;
  }

  unint64_t v117 = (unint64_t)&v18[v17 + 1];
  unint64_t v96 = *((void *)v94 + 2);
  if (v117 > v96) {
    goto LABEL_188;
  }
  *((void *)v94 + 1) = v117;
  LODWORD(v118) = 1;
LABEL_204:
  *((_DWORD *)this + 3185) = v17 + v118;
  char v19 = 100;
LABEL_44:
  *size_t v15 = v16 + 1;
  v18[v16] = v19;
  size_t v31 = v11;
  if (v9 == (swift::Demangle::__runtime::Node *)v11) {
    goto LABEL_80;
  }
  unsigned int v32 = a3 + 1;
  while (1)
  {
    int v33 = *(unsigned __int16 *)(*(void *)v9 + 16LL);
    if (v33 != 112) {
      break;
    }
    if (*(_DWORD *)a4) {
      return result;
    }
    uint64_t v9 = (swift::Demangle::__runtime::Node *)((char *)v9 + 8);
    if (v9 == (swift::Demangle::__runtime::Node *)v11)
    {
      size_t v31 = v11;
      goto LABEL_80;
    }
  }

  if (v33 != 43 && v33 != 46)
  {
    size_t v31 = (swift::Demangle::__runtime::Node **)v9;
    goto LABEL_80;
  }

  if (v33 == 43) {
    char v34 = 71;
  }
  else {
    char v34 = 103;
  }
  unsigned int v35 = *((_DWORD *)this + 3184);
  size_t v36 = *((unsigned int *)this + 3185);
  size_t v37 = this[1591];
  if (v35 >= v36)
  {
    unint64_t v38 = this[1593];
    unint64_t v39 = (char *)*((void *)v38 + 1);
    if (&v37[v36] == v39)
    {
      unint64_t v43 = (unint64_t)&v37[v36 + 1];
      unint64_t v40 = *((void *)v38 + 2);
      if (v43 <= v40)
      {
        *((void *)v38 + 1) = v43;
        int v50 = 1;
LABEL_77:
        *((_DWORD *)this + 3185) = v36 + v50;
        goto LABEL_78;
      }
    }

    else
    {
      unint64_t v40 = *((void *)v38 + 2);
    }

    char v125 = v34;
    LODWORD(v44) = 2 * v36;
    else {
      uint64_t v44 = v44;
    }
    int v124 = v44;
    size_t v45 = v44 + v36;
    if (!v39 || (unint64_t)&v39[v45] > v40)
    {
      unint64_t v46 = 2LL * *((void *)v38 + 4);
      if (v46 <= v45 + 1) {
        unint64_t v46 = v45 + 1;
      }
      *((void *)v38 + 4) = v46;
      unint64_t v47 = v46 + 8;
      unint64_t v48 = malloc(v46 + 8);
      unint64_t v49 = (char *)v48 + v47;
      *unint64_t v48 = *((void *)v38 + 3);
      unint64_t v39 = (char *)(v48 + 1);
      *((void *)v38 + 2) = v49;
      *((void *)v38 + 3) = v48;
    }

    *((void *)v38 + 1) = &v39[v45];
    if ((_DWORD)v36)
    {
      memcpy(v39, this[1591], v36);
      LODWORD(v36) = *((_DWORD *)this + 3185);
      unsigned int v35 = *((_DWORD *)this + 3184);
    }

    char v34 = v125;
    int v50 = v124;
    *unint64_t v129 = v39;
    size_t v37 = v39;
    goto LABEL_77;
  }

void anonymous namespace'::Remangler::mangleImplicitClosure( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v4[0] = 0;
  uint64_t v6 = 0LL;
  uint64_t v7 = 0LL;
  std::string __p = 0LL;
  if (SHIBYTE(v7) < 0) {
    operator delete(__p);
  }
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleImplParameter@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  size_t v5 = this;
  int v7 = *((unsigned __int8 *)a2 + 18);
  if (v7 == 2)
  {
LABEL_5:
    int v8 = v4 + 2;
    unsigned int v9 = a3 + 1;
    while (1)
    {
      if (*(_DWORD *)a4) {
        return this;
      }
      if (++v4 == v8)
      {
        int v10 = 0;
        int v4 = 0LL;
        int v11 = 0;
        goto LABEL_10;
      }
    }
  }

  if (v7 == 5 && *((_DWORD *)a2 + 2) == 2)
  {
    int v4 = (swift::Demangle::__runtime::Node **)*a2;
    goto LABEL_5;
  }

  int v11 = 1712;
  int v10 = 1;
LABEL_10:
  *(_DWORD *)a4 = v10;
  *(void *)(a4 + 8) = v4;
  *(_DWORD *)(a4 + 16) = v11;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleImplResult@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  size_t v5 = this;
  int v7 = *((unsigned __int8 *)a2 + 18);
  if (v7 == 2)
  {
LABEL_5:
    int v8 = v4 + 2;
    unsigned int v9 = a3 + 1;
    while (1)
    {
      if (*(_DWORD *)a4) {
        return this;
      }
      if (++v4 == v8)
      {
        int v10 = 0;
        int v4 = 0LL;
        int v11 = 0;
        goto LABEL_10;
      }
    }
  }

  if (v7 == 5 && *((_DWORD *)a2 + 2) == 2)
  {
    int v4 = (swift::Demangle::__runtime::Node **)*a2;
    goto LABEL_5;
  }

  int v11 = 1723;
  int v10 = 1;
LABEL_10:
  *(_DWORD *)a4 = v10;
  *(void *)(a4 + 8) = v4;
  *(_DWORD *)(a4 + 16) = v11;
  return this;
}

unsigned int *anonymous namespace'::Remangler::mangleImplYield@<X0>( unsigned int *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  size_t v5 = a2;
  uint64_t v6 = (uint64_t)this;
  int v8 = *((unsigned __int8 *)a2 + 18);
  if (v8 != 2 && (v8 != 5 || *((_DWORD *)a2 + 2) != 2))
  {
    int v15 = 1728;
    int v16 = 1;
LABEL_43:
    *(_DWORD *)a4 = v16;
    *(void *)(a4 + 8) = v5;
    *(_DWORD *)(a4 + 16) = v15;
    return this;
  }

  unsigned int v9 = this[3184];
  size_t v10 = this[3185];
  int v11 = (char *)*((void *)this + 1591);
  if (v9 >= v10)
  {
    int v12 = (void *)*((void *)this + 1593);
    uint64_t v13 = (char *)v12[1];
    if (&v11[v10] == v13)
    {
      unint64_t v17 = (unint64_t)&v11[v10 + 1];
      unint64_t v14 = v12[2];
      if (v17 <= v14)
      {
        v12[1] = v17;
        LODWORD(v18) = 1;
LABEL_24:
        *(_DWORD *)(v6 + 1274printNode(&v3, this, 0) = v10 + v18;
        goto LABEL_25;
      }
    }

    else
    {
      unint64_t v14 = v12[2];
    }

    else {
      uint64_t v18 = (2 * v10);
    }
    size_t v19 = v18 + v10;
    if (v13) {
      BOOL v20 = (unint64_t)&v13[v18 + v10] > v14;
    }
    else {
      BOOL v20 = 1;
    }
    int v11 = (char *)v12[1];
    if (v20)
    {
      unint64_t v21 = 2LL * v12[4];
      if (v21 <= v19 + 1) {
        unint64_t v21 = v19 + 1;
      }
      _OWORD v12[4] = v21;
      unint64_t v22 = v21 + 8;
      this = (unsigned int *)malloc(v21 + 8);
      unint64_t v23 = (char *)this + v22;
      *(void *)this = v12[3];
      int v11 = (char *)(this + 2);
      v12[2] = v23;
      void v12[3] = this;
    }

    v12[1] = &v11[v19];
    if ((_DWORD)v10)
    {
      this = (unsigned int *)memcpy(v11, *(const void **)(v6 + 12728), v10);
      LODWORD(v1printNode(&v3, this, 0) = *(_DWORD *)(v6 + 12740);
      unsigned int v9 = *(_DWORD *)(v6 + 12736);
    }

    *(void *)(v6 + 12728) = v11;
    goto LABEL_24;
  }

unsigned int *anonymous namespace'::Remangler::mangleImplErrorResult@<X0>( unsigned int *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  size_t v5 = a2;
  uint64_t v6 = (uint64_t)this;
  int v8 = *((unsigned __int8 *)a2 + 18);
  if (v8 != 2 && (v8 != 5 || *((_DWORD *)a2 + 2) != 2))
  {
    int v15 = 1717;
    int v16 = 1;
LABEL_43:
    *(_DWORD *)a4 = v16;
    *(void *)(a4 + 8) = v5;
    *(_DWORD *)(a4 + 16) = v15;
    return this;
  }

  unsigned int v9 = this[3184];
  size_t v10 = this[3185];
  int v11 = (char *)*((void *)this + 1591);
  if (v9 >= v10)
  {
    int v12 = (void *)*((void *)this + 1593);
    uint64_t v13 = (char *)v12[1];
    if (&v11[v10] == v13)
    {
      unint64_t v17 = (unint64_t)&v11[v10 + 1];
      unint64_t v14 = v12[2];
      if (v17 <= v14)
      {
        v12[1] = v17;
        LODWORD(v18) = 1;
LABEL_24:
        *(_DWORD *)(v6 + 1274printNode(&v3, this, 0) = v10 + v18;
        goto LABEL_25;
      }
    }

    else
    {
      unint64_t v14 = v12[2];
    }

    else {
      uint64_t v18 = (2 * v10);
    }
    size_t v19 = v18 + v10;
    if (v13) {
      BOOL v20 = (unint64_t)&v13[v18 + v10] > v14;
    }
    else {
      BOOL v20 = 1;
    }
    int v11 = (char *)v12[1];
    if (v20)
    {
      unint64_t v21 = 2LL * v12[4];
      if (v21 <= v19 + 1) {
        unint64_t v21 = v19 + 1;
      }
      _OWORD v12[4] = v21;
      unint64_t v22 = v21 + 8;
      this = (unsigned int *)malloc(v21 + 8);
      unint64_t v23 = (char *)this + v22;
      *(void *)this = v12[3];
      int v11 = (char *)(this + 2);
      v12[2] = v23;
      void v12[3] = this;
    }

    v12[1] = &v11[v19];
    if ((_DWORD)v10)
    {
      this = (unsigned int *)memcpy(v11, *(const void **)(v6 + 12728), v10);
      LODWORD(v1printNode(&v3, this, 0) = *(_DWORD *)(v6 + 12740);
      unsigned int v9 = *(_DWORD *)(v6 + 12736);
    }

    *(void *)(v6 + 12728) = v11;
    goto LABEL_24;
  }

unsigned int *anonymous namespace'::Remangler::mangleInOut@<X0>( unsigned int *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6 = (uint64_t)this;
  unsigned int v8 = this[3184];
  size_t v9 = this[3185];
  size_t v10 = (char *)*((void *)this + 1591);
  if (v8 >= v9)
  {
    int v11 = (void *)*((void *)this + 1593);
    int v12 = (char *)v11[1];
    if (&v10[v9] == v12)
    {
      unint64_t v14 = (unint64_t)&v10[v9 + 1];
      unint64_t v13 = v11[2];
      if (v14 <= v13)
      {
        v11[1] = v14;
        LODWORD(v15) = 1;
LABEL_20:
        *(_DWORD *)(v6 + 1274printNode(&v3, this, 0) = v9 + v15;
        goto LABEL_21;
      }
    }

    else
    {
      unint64_t v13 = v11[2];
    }

    else {
      uint64_t v15 = (2 * v9);
    }
    size_t v16 = v15 + v9;
    if (v12) {
      BOOL v17 = (unint64_t)&v12[v15 + v9] > v13;
    }
    else {
      BOOL v17 = 1;
    }
    size_t v10 = (char *)v11[1];
    if (v17)
    {
      unint64_t v18 = 2LL * v11[4];
      if (v18 <= v16 + 1) {
        unint64_t v18 = v16 + 1;
      }
      v11[4] = v18;
      unint64_t v19 = v18 + 8;
      this = (unsigned int *)malloc(v18 + 8);
      BOOL v20 = (char *)this + v19;
      *(void *)this = v11[3];
      size_t v10 = (char *)(this + 2);
      void v11[2] = v20;
      void v11[3] = this;
    }

    v11[1] = &v10[v16];
    if ((_DWORD)v9)
    {
      this = (unsigned int *)memcpy(v10, *(const void **)(v6 + 12728), v9);
      LODWORD(v9) = *(_DWORD *)(v6 + 12740);
      unsigned int v8 = *(_DWORD *)(v6 + 12736);
    }

    *(void *)(v6 + 12728) = v10;
    goto LABEL_20;
  }

void anonymous namespace'::Remangler::mangleInitializer( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v4[0] = 0;
  uint64_t v6 = 0LL;
  uint64_t v7 = 0LL;
  std::string __p = 0LL;
  if (SHIBYTE(v7) < 0) {
    operator delete(__p);
  }
}

void anonymous namespace'::Remangler::mangleInitAccessor( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v6[0] = 0;
  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  std::string __p = 0LL;
  int v4 = *((unsigned __int8 *)a2 + 18);
  size_t v5 = 0LL;
  if (v4 != 5) {
    goto LABEL_6;
  }
  if (*((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    size_t v5 = *a2;
    goto LABEL_6;
  }

  size_t v5 = 0LL;
LABEL_6:
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
}

void *anonymous namespace'::Remangler::mangleIsolated@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Yi", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if (v9 == 1) {
  if (v9 == 5 && *((_DWORD *)a2 + 2) == 1)
  }
  {
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  *(_DWORD *)a4 = 10;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = 114;
  return result;
}

void *anonymous namespace'::Remangler::mangleSending@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Yu", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if (v9 == 1) {
  if (v9 == 5 && *((_DWORD *)a2 + 2) == 1)
  }
  {
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  *(_DWORD *)a4 = 10;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = 114;
  return result;
}

void *anonymous namespace'::Remangler::mangleKeyPathGetterThunkHelper@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "TK", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  size_t v10 = a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      int v11 = *a2;
      size_t v10 = (swift::Demangle::__runtime::Node **)*a2;
      goto LABEL_9;
    }

    size_t v10 = 0LL;
  }

  switch(v9)
  {
    case 1:
      int v12 = a2 + 1;
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v12 = a2 + 2;
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      int v11 = *a2;
LABEL_9:
      int v12 = (swift::Demangle::__runtime::Node **)((char *)v11 + 8 * *((unsigned int *)a2 + 2));
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }

  int v12 = 0LL;
  if (!v10)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

void *anonymous namespace'::Remangler::mangleKeyPathSetterThunkHelper@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Tk", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  size_t v10 = a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      int v11 = *a2;
      size_t v10 = (swift::Demangle::__runtime::Node **)*a2;
      goto LABEL_9;
    }

    size_t v10 = 0LL;
  }

  switch(v9)
  {
    case 1:
      int v12 = a2 + 1;
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v12 = a2 + 2;
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      int v11 = *a2;
LABEL_9:
      int v12 = (swift::Demangle::__runtime::Node **)((char *)v11 + 8 * *((unsigned int *)a2 + 2));
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }

  int v12 = 0LL;
  if (!v10)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

void *anonymous namespace'::Remangler::mangleKeyPathEqualsThunkHelper@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "TH", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  size_t v10 = a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      int v11 = *a2;
      size_t v10 = (swift::Demangle::__runtime::Node **)*a2;
      goto LABEL_9;
    }

    size_t v10 = 0LL;
  }

  switch(v9)
  {
    case 1:
      int v12 = a2 + 1;
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v12 = a2 + 2;
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      int v11 = *a2;
LABEL_9:
      int v12 = (swift::Demangle::__runtime::Node **)((char *)v11 + 8 * *((unsigned int *)a2 + 2));
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }

  int v12 = 0LL;
  if (!v10)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

void *anonymous namespace'::Remangler::mangleKeyPathHashThunkHelper@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Th", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  size_t v10 = a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      int v11 = *a2;
      size_t v10 = (swift::Demangle::__runtime::Node **)*a2;
      goto LABEL_9;
    }

    size_t v10 = 0LL;
  }

  switch(v9)
  {
    case 1:
      int v12 = a2 + 1;
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v12 = a2 + 2;
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      int v11 = *a2;
LABEL_9:
      int v12 = (swift::Demangle::__runtime::Node **)((char *)v11 + 8 * *((unsigned int *)a2 + 2));
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }

  int v12 = 0LL;
  if (!v10)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

void *anonymous namespace'::Remangler::mangleLazyProtocolWitnessTableAccessor@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Wl", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  size_t v10 = a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      int v11 = *a2;
      size_t v10 = (swift::Demangle::__runtime::Node **)*a2;
      goto LABEL_9;
    }

    size_t v10 = 0LL;
  }

  switch(v9)
  {
    case 1:
      int v12 = a2 + 1;
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v12 = a2 + 2;
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      int v11 = *a2;
LABEL_9:
      int v12 = (swift::Demangle::__runtime::Node **)((char *)v11 + 8 * *((unsigned int *)a2 + 2));
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }

  int v12 = 0LL;
  if (!v10)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

void *anonymous namespace'::Remangler::mangleLazyProtocolWitnessTableCacheVariable@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "WL", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  size_t v10 = a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      int v11 = *a2;
      size_t v10 = (swift::Demangle::__runtime::Node **)*a2;
      goto LABEL_9;
    }

    size_t v10 = 0LL;
  }

  switch(v9)
  {
    case 1:
      int v12 = a2 + 1;
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v12 = a2 + 2;
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      int v11 = *a2;
LABEL_9:
      int v12 = (swift::Demangle::__runtime::Node **)((char *)v11 + 8 * *((unsigned int *)a2 + 2));
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }

  int v12 = 0LL;
  if (!v10)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

unsigned int *anonymous namespace'::Remangler::mangleLocalDeclName@<X0>( unsigned int *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6 = (uint64_t)this;
  unsigned int v8 = this[3184];
  size_t v9 = this[3185];
  size_t v10 = (char *)*((void *)this + 1591);
  if (v8 >= v9)
  {
    int v11 = (void *)*((void *)this + 1593);
    int v12 = (char *)v11[1];
    if (&v10[v9] == v12)
    {
      unint64_t v14 = (unint64_t)&v10[v9 + 1];
      unint64_t v13 = v11[2];
      if (v14 <= v13)
      {
        v11[1] = v14;
        LODWORD(v15) = 1;
LABEL_20:
        *(_DWORD *)(v6 + 1274printNode(&v3, this, 0) = v9 + v15;
        goto LABEL_21;
      }
    }

    else
    {
      unint64_t v13 = v11[2];
    }

    else {
      uint64_t v15 = (2 * v9);
    }
    size_t v16 = v15 + v9;
    if (v12) {
      BOOL v17 = (unint64_t)&v12[v15 + v9] > v13;
    }
    else {
      BOOL v17 = 1;
    }
    size_t v10 = (char *)v11[1];
    if (v17)
    {
      unint64_t v18 = 2LL * v11[4];
      if (v18 <= v16 + 1) {
        unint64_t v18 = v16 + 1;
      }
      v11[4] = v18;
      unint64_t v19 = v18 + 8;
      this = (unsigned int *)malloc(v18 + 8);
      BOOL v20 = (char *)this + v19;
      *(void *)this = v11[3];
      size_t v10 = (char *)(this + 2);
      void v11[2] = v20;
      void v11[3] = this;
    }

    v11[1] = &v10[v16];
    if ((_DWORD)v9)
    {
      this = (unsigned int *)memcpy(v10, *(const void **)(v6 + 12728), v9);
      LODWORD(v9) = *(_DWORD *)(v6 + 12740);
      unsigned int v8 = *(_DWORD *)(v6 + 12736);
    }

    *(void *)(v6 + 12728) = v10;
    goto LABEL_20;
  }

void *anonymous namespace'::Remangler::mangleMacro@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "fm", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  size_t v10 = a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      int v11 = *a2;
      size_t v10 = (swift::Demangle::__runtime::Node **)*a2;
      goto LABEL_9;
    }

    size_t v10 = 0LL;
  }

  switch(v9)
  {
    case 1:
      int v12 = a2 + 1;
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v12 = a2 + 2;
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      int v11 = *a2;
LABEL_9:
      int v12 = (swift::Demangle::__runtime::Node **)((char *)v11 + 8 * *((unsigned int *)a2 + 2));
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }

  int v12 = 0LL;
  if (!v10)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

char *anonymous namespace'::Remangler::mangleMacroExpansionUniqueName@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0LL;
  *(_DWORD *)(a4 + 16) = 0;
  int v9 = *((unsigned __int8 *)a2 + 18);
  size_t v10 = (swift::Demangle::__runtime::Node **)a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      uint64_t v11 = *(void *)a2;
      size_t v10 = *(swift::Demangle::__runtime::Node ***)a2;
      goto LABEL_9;
    }

    size_t v10 = 0LL;
  }

  switch(v9)
  {
    case 1:
      int v12 = (swift::Demangle::__runtime::Node **)((char *)a2 + 8);
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v12 = (swift::Demangle::__runtime::Node **)((char *)a2 + 16);
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v11 = *(void *)a2;
LABEL_9:
      int v12 = (swift::Demangle::__runtime::Node **)(v11 + 8LL * *((unsigned int *)a2 + 2));
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }

  int v12 = 0LL;
  if (!v10)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

void anonymous namespace'::Remangler::mangleMaterializeForSet( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v6[0] = 0;
  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  std::string __p = 0LL;
  int v4 = *((unsigned __int8 *)a2 + 18);
  size_t v5 = 0LL;
  if (v4 != 5) {
    goto LABEL_6;
  }
  if (*((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    size_t v5 = *a2;
    goto LABEL_6;
  }

  size_t v5 = 0LL;
LABEL_6:
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
}

char *anonymous namespace'::Remangler::mangleMemberAttachedMacroExpansion@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0LL;
  *(_DWORD *)(a4 + 16) = 0;
  int v9 = *((unsigned __int8 *)a2 + 18);
  size_t v10 = (swift::Demangle::__runtime::Node **)a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      uint64_t v11 = *(void *)a2;
      size_t v10 = *(swift::Demangle::__runtime::Node ***)a2;
      goto LABEL_9;
    }

    size_t v10 = 0LL;
  }

  switch(v9)
  {
    case 1:
      int v12 = (swift::Demangle::__runtime::Node **)((char *)a2 + 8);
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v12 = (swift::Demangle::__runtime::Node **)((char *)a2 + 16);
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v11 = *(void *)a2;
LABEL_9:
      int v12 = (swift::Demangle::__runtime::Node **)(v11 + 8LL * *((unsigned int *)a2 + 2));
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }

  int v12 = 0LL;
  if (!v10)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

char *anonymous namespace'::Remangler::mangleMemberAttributeAttachedMacroExpansion@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0LL;
  *(_DWORD *)(a4 + 16) = 0;
  int v9 = *((unsigned __int8 *)a2 + 18);
  size_t v10 = (swift::Demangle::__runtime::Node **)a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      uint64_t v11 = *(void *)a2;
      size_t v10 = *(swift::Demangle::__runtime::Node ***)a2;
      goto LABEL_9;
    }

    size_t v10 = 0LL;
  }

  switch(v9)
  {
    case 1:
      int v12 = (swift::Demangle::__runtime::Node **)((char *)a2 + 8);
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v12 = (swift::Demangle::__runtime::Node **)((char *)a2 + 16);
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v11 = *(void *)a2;
LABEL_9:
      int v12 = (swift::Demangle::__runtime::Node **)(v11 + 8LL * *((unsigned int *)a2 + 2));
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }

  int v12 = 0LL;
  if (!v10)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

unsigned int *anonymous namespace'::Remangler::mangleMetatype@<X0>( unsigned int *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  size_t v5 = a2;
  uint64_t v6 = (uint64_t)this;
  int v8 = *((unsigned __int8 *)a2 + 18);
  if (v8 == 1)
  {
LABEL_6:
    unsigned int v10 = this[3184];
    size_t v11 = this[3185];
    int v12 = (_BYTE *)*((void *)this + 1591);
    if (v10 < v11)
    {
LABEL_46:
      *(_DWORD *)(v6 + 12736) = v10 + 1;
      v12[v10] = 77;
      int v29 = *((unsigned __int8 *)v5 + 18);
      if (v29 == 1) {
      if (v29 == 5 && *((_DWORD *)v5 + 2) == 1)
      }
      {
        size_t v5 = *(swift::Demangle::__runtime::Node **)v5;
      }

      *(_DWORD *)a4 = 10;
      *(void *)(a4 + 8) = v5;
      int v19 = 114;
      goto LABEL_52;
    }

    unsigned int v13 = (void *)*((void *)this + 1593);
    unint64_t v14 = (_BYTE *)v13[1];
    if (&v12[v11] == v14)
    {
      unint64_t v22 = (unint64_t)&v12[v11 + 1];
      unint64_t v15 = v13[2];
      if (v22 <= v15)
      {
        v13[1] = v22;
        LODWORD(v23) = 1;
LABEL_45:
        *(_DWORD *)(v6 + 1274printNode(&v3, this, 0) = v11 + v23;
        goto LABEL_46;
      }
    }

    else
    {
      unint64_t v15 = v13[2];
    }

    else {
      uint64_t v23 = (2 * v11);
    }
    size_t v24 = v23 + v11;
    if (v14) {
      BOOL v25 = (unint64_t)&v14[v23 + v11] > v15;
    }
    else {
      BOOL v25 = 1;
    }
    int v12 = (_BYTE *)v13[1];
    if (v25)
    {
      unint64_t v26 = 2LL * v13[4];
      if (v26 <= v24 + 1) {
        unint64_t v26 = v24 + 1;
      }
      _OWORD v13[4] = v26;
      unint64_t v27 = v26 + 8;
      this = (unsigned int *)malloc(v26 + 8);
      unint64_t v28 = (char *)this + v27;
      *(void *)this = v13[3];
      int v12 = this + 2;
      v13[2] = v28;
      void v13[3] = this;
    }

    v13[1] = &v12[v24];
    if ((_DWORD)v11)
    {
      this = (unsigned int *)memcpy(v12, *(const void **)(v6 + 12728), v11);
      LODWORD(v11) = *(_DWORD *)(v6 + 12740);
      unsigned int v10 = *(_DWORD *)(v6 + 12736);
    }

    *(void *)(v6 + 12728) = v12;
    goto LABEL_45;
  }

  if (v8 != 2)
  {
    if (v8 != 5) {
      goto LABEL_12;
    }
    int v9 = *((_DWORD *)a2 + 2);
    if (v9 != 2)
    {
      if (v9 == 1) {
        goto LABEL_6;
      }
LABEL_12:
      *(_DWORD *)a4 = 1;
      *(void *)(a4 + 8) = a2;
      int v19 = 1840;
LABEL_52:
      *(_DWORD *)(a4 + 16) = v19;
      return this;
    }
  }

  this = (unsigned int *)swift::Demangle::__runtime::CharVector::append( (char **)this + 1591,  "XM",  2uLL,  *((void **)this + 1593));
  int v16 = *((unsigned __int8 *)v5 + 18);
  BOOL v17 = v5;
  if ((v16 - 1) >= 2)
  {
    if (v16 == 5)
    {
      unint64_t v18 = *(swift::Demangle::__runtime::Node **)v5;
      BOOL v17 = *(swift::Demangle::__runtime::Node **)v5;
      goto LABEL_18;
    }

    BOOL v17 = 0LL;
  }

  switch(v16)
  {
    case 1:
      BOOL v20 = (swift::Demangle::__runtime::Node *)((char *)v5 + 8);
      if (v17 == v20) {
        goto LABEL_28;
      }
      goto LABEL_25;
    case 2:
      BOOL v20 = (swift::Demangle::__runtime::Node *)((char *)v5 + 16);
      if (v17 == v20) {
        goto LABEL_28;
      }
      goto LABEL_25;
    case 5:
      unint64_t v18 = *(swift::Demangle::__runtime::Node **)v5;
LABEL_18:
      BOOL v20 = (swift::Demangle::__runtime::Node *)((char *)v18 + 8 * *((unsigned int *)v5 + 2));
      if (v17 == v20) {
        goto LABEL_28;
      }
      goto LABEL_25;
  }

  BOOL v20 = 0LL;
  if (!v17)
  {
LABEL_28:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return this;
  }

void *anonymous namespace'::Remangler::mangleMetaclass@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Mm", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if (v9 == 1) {
  if (v9 == 5 && *((_DWORD *)a2 + 2) == 1)
  }
  {
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  *(_DWORD *)a4 = 10;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = 114;
  return result;
}

void anonymous namespace'::Remangler::mangleModifyAccessor( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v6[0] = 0;
  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  std::string __p = 0LL;
  int v4 = *((unsigned __int8 *)a2 + 18);
  size_t v5 = 0LL;
  if (v4 != 5) {
    goto LABEL_6;
  }
  if (*((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    size_t v5 = *a2;
    goto LABEL_6;
  }

  size_t v5 = 0LL;
LABEL_6:
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
}

void anonymous namespace'::Remangler::mangleNativeOwningAddressor( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v6[0] = 0;
  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  std::string __p = 0LL;
  int v4 = *((unsigned __int8 *)a2 + 18);
  size_t v5 = 0LL;
  if (v4 != 5) {
    goto LABEL_6;
  }
  if (*((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    size_t v5 = *a2;
    goto LABEL_6;
  }

  size_t v5 = 0LL;
LABEL_6:
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
}

void anonymous namespace'::Remangler::mangleNativeOwningMutableAddressor( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v6[0] = 0;
  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  std::string __p = 0LL;
  int v4 = *((unsigned __int8 *)a2 + 18);
  size_t v5 = 0LL;
  if (v4 != 5) {
    goto LABEL_6;
  }
  if (*((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    size_t v5 = *a2;
    goto LABEL_6;
  }

  size_t v5 = 0LL;
LABEL_6:
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
}

void anonymous namespace'::Remangler::mangleNativePinningAddressor( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v6[0] = 0;
  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  std::string __p = 0LL;
  int v4 = *((unsigned __int8 *)a2 + 18);
  size_t v5 = 0LL;
  if (v4 != 5) {
    goto LABEL_6;
  }
  if (*((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    size_t v5 = *a2;
    goto LABEL_6;
  }

  size_t v5 = 0LL;
LABEL_6:
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
}

void anonymous namespace'::Remangler::mangleNativePinningMutableAddressor( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v6[0] = 0;
  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  std::string __p = 0LL;
  int v4 = *((unsigned __int8 *)a2 + 18);
  size_t v5 = 0LL;
  if (v4 != 5) {
    goto LABEL_6;
  }
  if (*((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    size_t v5 = *a2;
    goto LABEL_6;
  }

  size_t v5 = 0LL;
LABEL_6:
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
}

void *anonymous namespace'::Remangler::mangleNominalTypeDescriptor@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Mn", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if (v9 == 1) {
  if (v9 == 5 && *((_DWORD *)a2 + 2) == 1)
  }
  {
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  *(_DWORD *)a4 = 10;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = 114;
  return result;
}

void *anonymous namespace'::Remangler::mangleNominalTypeDescriptorRecord@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Hn", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if (v9 == 1) {
  if (v9 == 5 && *((_DWORD *)a2 + 2) == 1)
  }
  {
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  *(_DWORD *)a4 = 10;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = 114;
  return result;
}

unsigned int *anonymous namespace'::Remangler::mangleObjCBlock@<X0>( unsigned int *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6 = (uint64_t)this;
  unsigned int v8 = this[3184];
  size_t v9 = this[3185];
  unsigned int v10 = (char *)*((void *)this + 1591);
  if (v8 >= v9)
  {
    size_t v11 = (void *)*((void *)this + 1593);
    int v12 = (char *)v11[1];
    if (&v10[v9] == v12)
    {
      unint64_t v14 = (unint64_t)&v10[v9 + 1];
      unint64_t v13 = v11[2];
      if (v14 <= v13)
      {
        v11[1] = v14;
        LODWORD(v15) = 1;
LABEL_20:
        *(_DWORD *)(v6 + 1274printNode(&v3, this, 0) = v9 + v15;
        goto LABEL_21;
      }
    }

    else
    {
      unint64_t v13 = v11[2];
    }

    else {
      uint64_t v15 = (2 * v9);
    }
    size_t v16 = v15 + v9;
    if (v12) {
      BOOL v17 = (unint64_t)&v12[v15 + v9] > v13;
    }
    else {
      BOOL v17 = 1;
    }
    unsigned int v10 = (char *)v11[1];
    if (v17)
    {
      unint64_t v18 = 2LL * v11[4];
      if (v18 <= v16 + 1) {
        unint64_t v18 = v16 + 1;
      }
      v11[4] = v18;
      unint64_t v19 = v18 + 8;
      this = (unsigned int *)malloc(v18 + 8);
      BOOL v20 = (char *)this + v19;
      *(void *)this = v11[3];
      unsigned int v10 = (char *)(this + 2);
      void v11[2] = v20;
      void v11[3] = this;
    }

    v11[1] = &v10[v16];
    if ((_DWORD)v9)
    {
      this = (unsigned int *)memcpy(v10, *(const void **)(v6 + 12728), v9);
      LODWORD(v9) = *(_DWORD *)(v6 + 12740);
      unsigned int v8 = *(_DWORD *)(v6 + 12736);
    }

    *(void *)(v6 + 12728) = v10;
    goto LABEL_20;
  }

void anonymous namespace'::Remangler::mangleOwningAddressor( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v6[0] = 0;
  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  std::string __p = 0LL;
  int v4 = *((unsigned __int8 *)a2 + 18);
  size_t v5 = 0LL;
  if (v4 != 5) {
    goto LABEL_6;
  }
  if (*((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    size_t v5 = *a2;
    goto LABEL_6;
  }

  size_t v5 = 0LL;
LABEL_6:
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
}

void anonymous namespace'::Remangler::mangleOwningMutableAddressor( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v6[0] = 0;
  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  std::string __p = 0LL;
  int v4 = *((unsigned __int8 *)a2 + 18);
  size_t v5 = 0LL;
  if (v4 != 5) {
    goto LABEL_6;
  }
  if (*((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    size_t v5 = *a2;
    goto LABEL_6;
  }

  size_t v5 = 0LL;
LABEL_6:
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
}

void *anonymous namespace'::Remangler::manglePartialApplyForwarder@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = this + 1591;
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "PA", 2uLL, this[1593]);
  int v10 = *((unsigned __int8 *)a2 + 18);
  if (v10 == 1 || v10 == 5 && *((_DWORD *)a2 + 2) == 1)
  {
    uint64_t result = swift::Demangle::__runtime::CharVector::append(v8, "__T", 3uLL, this[1593]);
    int v11 = *((unsigned __int8 *)a2 + 18);
    if (v11 != 1)
    {
      if (v11 != 5 || *((_DWORD *)a2 + 2) != 1)
      {
        int v13 = 114;
        int v12 = 10;
        goto LABEL_13;
      }

      a2 = *(swift::Demangle::__runtime::Node **)a2;
    }

    int v12 = *(_DWORD *)a4;
    if (*(_DWORD *)a4) {
      return result;
    }
  }

  else
  {
    int v12 = 0;
  }

  a2 = 0LL;
  int v13 = 0;
LABEL_13:
  *(_DWORD *)a4 = v12;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v13;
  return result;
}

void *anonymous namespace'::Remangler::manglePartialApplyObjCForwarder@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = this + 1591;
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "PAo", 3uLL, this[1593]);
  int v10 = *((unsigned __int8 *)a2 + 18);
  if (v10 == 1 || v10 == 5 && *((_DWORD *)a2 + 2) == 1)
  {
    uint64_t result = swift::Demangle::__runtime::CharVector::append(v8, "__T", 3uLL, this[1593]);
    int v11 = *((unsigned __int8 *)a2 + 18);
    if (v11 != 1)
    {
      if (v11 != 5 || *((_DWORD *)a2 + 2) != 1)
      {
        int v13 = 114;
        int v12 = 10;
        goto LABEL_13;
      }

      a2 = *(swift::Demangle::__runtime::Node **)a2;
    }

    int v12 = *(_DWORD *)a4;
    if (*(_DWORD *)a4) {
      return result;
    }
  }

  else
  {
    int v12 = 0;
  }

  a2 = 0LL;
  int v13 = 0;
LABEL_13:
  *(_DWORD *)a4 = v12;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v13;
  return result;
}

char *anonymous namespace'::Remangler::manglePeerAttachedMacroExpansion@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0LL;
  *(_DWORD *)(a4 + 16) = 0;
  int v9 = *((unsigned __int8 *)a2 + 18);
  int v10 = (swift::Demangle::__runtime::Node **)a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      uint64_t v11 = *(void *)a2;
      int v10 = *(swift::Demangle::__runtime::Node ***)a2;
      goto LABEL_9;
    }

    int v10 = 0LL;
  }

  switch(v9)
  {
    case 1:
      int v12 = (swift::Demangle::__runtime::Node **)((char *)a2 + 8);
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v12 = (swift::Demangle::__runtime::Node **)((char *)a2 + 16);
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v11 = *(void *)a2;
LABEL_9:
      int v12 = (swift::Demangle::__runtime::Node **)(v11 + 8LL * *((unsigned int *)a2 + 2));
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }

  int v12 = 0LL;
  if (!v10)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

char *anonymous namespace'::Remangler::manglePreambleAttachedMacroExpansion@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0LL;
  *(_DWORD *)(a4 + 16) = 0;
  int v9 = *((unsigned __int8 *)a2 + 18);
  int v10 = (swift::Demangle::__runtime::Node **)a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      uint64_t v11 = *(void *)a2;
      int v10 = *(swift::Demangle::__runtime::Node ***)a2;
      goto LABEL_9;
    }

    int v10 = 0LL;
  }

  switch(v9)
  {
    case 1:
      int v12 = (swift::Demangle::__runtime::Node **)((char *)a2 + 8);
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v12 = (swift::Demangle::__runtime::Node **)((char *)a2 + 16);
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v11 = *(void *)a2;
LABEL_9:
      int v12 = (swift::Demangle::__runtime::Node **)(v11 + 8LL * *((unsigned int *)a2 + 2));
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }

  int v12 = 0LL;
  if (!v10)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

unsigned int *anonymous namespace'::Remangler::manglePrivateDeclName@<X0>( unsigned int *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6 = (uint64_t)this;
  unsigned int v8 = this[3184];
  size_t v9 = this[3185];
  int v10 = (char *)*((void *)this + 1591);
  if (v8 >= v9)
  {
    uint64_t v11 = (void *)*((void *)this + 1593);
    int v12 = (char *)v11[1];
    if (&v10[v9] == v12)
    {
      unint64_t v14 = (unint64_t)&v10[v9 + 1];
      unint64_t v13 = v11[2];
      if (v14 <= v13)
      {
        v11[1] = v14;
        LODWORD(v15) = 1;
LABEL_20:
        *(_DWORD *)(v6 + 1274printNode(&v3, this, 0) = v9 + v15;
        goto LABEL_21;
      }
    }

    else
    {
      unint64_t v13 = v11[2];
    }

    else {
      uint64_t v15 = (2 * v9);
    }
    size_t v16 = v15 + v9;
    if (v12) {
      BOOL v17 = (unint64_t)&v12[v15 + v9] > v13;
    }
    else {
      BOOL v17 = 1;
    }
    int v10 = (char *)v11[1];
    if (v17)
    {
      unint64_t v18 = 2LL * v11[4];
      if (v18 <= v16 + 1) {
        unint64_t v18 = v16 + 1;
      }
      v11[4] = v18;
      unint64_t v19 = v18 + 8;
      this = (unsigned int *)malloc(v18 + 8);
      BOOL v20 = (char *)this + v19;
      *(void *)this = v11[3];
      int v10 = (char *)(this + 2);
      void v11[2] = v20;
      void v11[3] = this;
    }

    v11[1] = &v10[v16];
    if ((_DWORD)v9)
    {
      this = (unsigned int *)memcpy(v10, *(const void **)(v6 + 12728), v9);
      LODWORD(v9) = *(_DWORD *)(v6 + 12740);
      unsigned int v8 = *(_DWORD *)(v6 + 12736);
    }

    *(void *)(v6 + 12728) = v10;
    goto LABEL_20;
  }

void anonymous namespace'::Remangler::manglePropertyWrapperBackingInitializer( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v4[0] = 0;
  uint64_t v6 = 0LL;
  uint64_t v7 = 0LL;
  std::string __p = 0LL;
  if (SHIBYTE(v7) < 0) {
    operator delete(__p);
  }
}

void anonymous namespace'::Remangler::manglePropertyWrapperInitFromProjectedValue( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v4[0] = 0;
  uint64_t v6 = 0LL;
  uint64_t v7 = 0LL;
  std::string __p = 0LL;
  if (SHIBYTE(v7) < 0) {
    operator delete(__p);
  }
}

void anonymous namespace'::Remangler::mangleProtocol( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  size_t v5 = (uint64_t *)a2;
  v9[0] = 0;
  uint64_t v11 = 0LL;
  uint64_t v12 = 0LL;
  std::string __p = 0LL;
  v13[0] = 0LL;
  v13[1] = 0LL;
  char v14 = 0;
  if (*((_WORD *)a2 + 8) == 232)
  {
    int v8 = *((unsigned __int8 *)a2 + 18);
    if ((v8 - 1) < 2)
    {
LABEL_6:
      size_t v5 = (uint64_t *)*v5;
      goto LABEL_8;
    }

    if (v8 == 5 && *((_DWORD *)a2 + 2))
    {
      size_t v5 = *(uint64_t **)a2;
      goto LABEL_6;
    }

    size_t v5 = 0LL;
  }

void anonymous namespace'::Remangler::mangleProtocolConformance( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (*((_BYTE *)a2 + 18) != 5 || *((_DWORD *)a2 + 2) != 3)
  {
    *(_DWORD *)a4 = 1;
    *(void *)(a4 + 8) = a2;
    int v9 = 560;
LABEL_11:
    *(_DWORD *)(a4 + 16) = v9;
    return;
  }

  unsigned int v7 = a3 + 1;
  if (!*(_DWORD *)a4)
  {
    int v8 = a2;
    if (!*(_DWORD *)a4)
    {
      if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) > 2u)
      {
        return;
      }

      *(_DWORD *)a4 = 1;
      *(void *)(a4 + 8) = a2;
      int v9 = 119;
      goto LABEL_11;
    }
  }

void anonymous namespace'::Remangler::mangleProtocolDescriptor( char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
}

void anonymous namespace'::Remangler::mangleProtocolDescriptorRecord( char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
}

void anonymous namespace'::Remangler::mangleProtocolConformanceDescriptor( char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
}

void anonymous namespace'::Remangler::mangleProtocolConformanceDescriptorRecord( char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
}

void anonymous namespace'::Remangler::mangleProtocolList( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v8 = *((_DWORD *)this + 3184);
  size_t v9 = *((unsigned int *)this + 3185);
  int v10 = (char *)*((void *)this + 1591);
  if (v8 >= v9)
  {
    uint64_t v11 = (void *)*((void *)this + 1593);
    uint64_t v12 = (char *)v11[1];
    if (&v10[v9] == v12)
    {
      unint64_t v14 = (unint64_t)&v10[v9 + 1];
      unint64_t v13 = v11[2];
      if (v14 <= v13)
      {
        v11[1] = v14;
        LODWORD(v15) = 1;
LABEL_20:
        *((_DWORD *)this + 3185) = v9 + v15;
        goto LABEL_21;
      }
    }

    else
    {
      unint64_t v13 = v11[2];
    }

    else {
      uint64_t v15 = (2 * v9);
    }
    size_t v16 = v15 + v9;
    if (v12) {
      BOOL v17 = (unint64_t)&v12[v15 + v9] > v13;
    }
    else {
      BOOL v17 = 1;
    }
    int v10 = (char *)v11[1];
    if (v17)
    {
      unint64_t v18 = 2LL * v11[4];
      if (v18 <= v16 + 1) {
        unint64_t v18 = v16 + 1;
      }
      v11[4] = v18;
      unint64_t v19 = v18 + 8;
      BOOL v20 = malloc(v18 + 8);
      int v21 = (char *)v20 + v19;
      *BOOL v20 = v11[3];
      int v10 = (char *)(v20 + 1);
      void v11[2] = v21;
      void v11[3] = v20;
    }

    v11[1] = &v10[v16];
    if ((_DWORD)v9)
    {
      memcpy(v10, *((const void **)this + 1591), v9);
      LODWORD(v9) = *((_DWORD *)this + 3185);
      unsigned int v8 = *((_DWORD *)this + 3184);
    }

    *((void *)this + 1591) = v10;
    goto LABEL_20;
  }

void anonymous namespace'::Remangler::mangleProtocolListWithClass( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v8 = *((unsigned __int8 *)a2 + 18);
  size_t v9 = a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) <= 1u)
    {
      *(_DWORD *)a4 = 1;
      *(void *)(a4 + 8) = a2;
      *(_DWORD *)(a4 + 16) = 119;
      return;
    }

    size_t v9 = *(swift::Demangle::__runtime::Node **)a2;
  }

  unsigned int v10 = a3 + 1;
  if (!*(_DWORD *)a4)
  {
    int v11 = *((unsigned __int8 *)a2 + 18);
    if ((v11 - 1) >= 2)
    {
      if (v11 != 5 || !*((_DWORD *)a2 + 2))
      {
        uint64_t v12 = 0LL;
        goto LABEL_14;
      }

      a2 = *(swift::Demangle::__runtime::Node **)a2;
    }

    uint64_t v12 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_14:
  }

void anonymous namespace'::Remangler::mangleProtocolListWithAnyObject( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unint64_t Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*(void **)this, 180);
  size_t v9 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode( *(void **)this,  153,  "Swift");
  swift::Demangle::__runtime::Node::addChild(Node, v9, *(swift::Demangle::__runtime::NodeFactory **)this, v10, v11);
  uint64_t v12 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode( *(void **)this,  101,  "AnyObject");
  swift::Demangle::__runtime::Node::addChild(Node, v12, *(swift::Demangle::__runtime::NodeFactory **)this, v13, v14);
  swift::Demangle::__runtime::CharVector::append((char **)this + 1591, "P", 1uLL, *((void **)this + 1593));
  int v15 = *((unsigned __int8 *)a2 + 18);
  if ((v15 - 1) >= 2)
  {
    if (v15 != 5 || !*((_DWORD *)a2 + 2))
    {
      size_t v16 = 0LL;
      goto LABEL_7;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  size_t v16 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_7:
}

void anonymous namespace'::Remangler::mangleProtocolSelfConformanceDescriptor( char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v8 = (swift::Demangle::__runtime::Node **)*a2;
  v10[0] = 0;
  uint64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  std::string __p = 0LL;
  char v15 = 0;
  v14[0] = 0LL;
  v14[1] = 0LL;
  if (*((_WORD *)v8 + 8) == 232)
  {
    int v9 = *((unsigned __int8 *)v8 + 18);
    if ((v9 - 1) < 2)
    {
LABEL_8:
      int v8 = (swift::Demangle::__runtime::Node **)*v8;
      goto LABEL_10;
    }

    if (v9 == 5 && *((_DWORD *)v8 + 2))
    {
      int v8 = (swift::Demangle::__runtime::Node **)*v8;
      goto LABEL_8;
    }

    int v8 = 0LL;
  }

void *anonymous namespace'::Remangler::mangleProtocolSelfConformanceWitness@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "TS", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if (v9 == 1) {
  if (v9 == 5 && *((_DWORD *)a2 + 2) == 1)
  }
  {
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  *(_DWORD *)a4 = 10;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = 114;
  return result;
}

void *anonymous namespace'::Remangler::mangleProtocolSelfConformanceWitnessTable@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "WS", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if (v9 == 1) {
  if (v9 == 5 && *((_DWORD *)a2 + 2) == 1)
  }
  {
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  *(_DWORD *)a4 = 10;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = 114;
  return result;
}

void *anonymous namespace'::Remangler::mangleProtocolWitness@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "TW", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  uint64_t v10 = a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      int v11 = *a2;
      uint64_t v10 = (swift::Demangle::__runtime::Node **)*a2;
      goto LABEL_9;
    }

    uint64_t v10 = 0LL;
  }

  switch(v9)
  {
    case 1:
      uint64_t v12 = a2 + 1;
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      uint64_t v12 = a2 + 2;
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      int v11 = *a2;
LABEL_9:
      uint64_t v12 = (swift::Demangle::__runtime::Node **)((char *)v11 + 8 * *((unsigned int *)a2 + 2));
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }

  uint64_t v12 = 0LL;
  if (!v10)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

void *anonymous namespace'::Remangler::mangleProtocolWitnessTable@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "WP", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if (v9 == 1) {
  if (v9 == 5 && *((_DWORD *)a2 + 2) == 1)
  }
  {
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  *(_DWORD *)a4 = 10;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = 114;
  return result;
}

void *anonymous namespace'::Remangler::mangleProtocolWitnessTableAccessor@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Wa", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if (v9 == 1) {
  if (v9 == 5 && *((_DWORD *)a2 + 2) == 1)
  }
  {
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  *(_DWORD *)a4 = 10;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = 114;
  return result;
}

void anonymous namespace'::Remangler::mangleReadAccessor( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v6[0] = 0;
  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  std::string __p = 0LL;
  int v4 = *((unsigned __int8 *)a2 + 18);
  size_t v5 = 0LL;
  if (v4 != 5) {
    goto LABEL_6;
  }
  if (*((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    size_t v5 = *a2;
    goto LABEL_6;
  }

  size_t v5 = 0LL;
LABEL_6:
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
}

void *anonymous namespace'::Remangler::mangleRelatedEntityDeclName@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  int v7 = *((unsigned __int8 *)a2 + 18);
  uint64_t v8 = a2;
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    uint64_t v8 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_5:
    uint64_t v9 = *(void *)v8;
    goto LABEL_7;
  }

  uint64_t v9 = 0LL;
LABEL_7:
  uint64_t v10 = (char **)((char *)this + 12728);
  unsigned int v11 = *((_DWORD *)this + 3184);
  size_t v12 = *((unsigned int *)this + 3185);
  unsigned int v13 = (char *)*((void *)this + 1591);
  unint64_t v14 = (void *)*((void *)this + 1593);
  char v15 = (char *)v14[1];
  if (&v13[v12] != v15)
  {
    unint64_t v16 = v14[2];
LABEL_11:
    uint64_t v41 = a4;
    else {
      uint64_t v18 = (2 * v12);
    }
    size_t v19 = v18 + v12;
    if (v15) {
      BOOL v20 = (unint64_t)&v15[v18 + v12] > v16;
    }
    else {
      BOOL v20 = 1;
    }
    unsigned int v13 = (char *)v14[1];
    if (v20)
    {
      unint64_t v21 = 2LL * v14[4];
      if (v21 <= v19 + 1) {
        unint64_t v21 = v19 + 1;
      }
      uint64_t v14[4] = v21;
      unint64_t v22 = v21 + 8;
      uint64_t v23 = malloc(v21 + 8);
      size_t v24 = (char *)v23 + v22;
      *uint64_t v23 = v14[3];
      unsigned int v13 = (char *)(v23 + 1);
      void v14[2] = v24;
      void v14[3] = v23;
    }

    v14[1] = &v13[v19];
    if ((_DWORD)v12)
    {
      memcpy(v13, *((const void **)this + 1591), v12);
      LODWORD(v12) = *((_DWORD *)this + 3185);
      unsigned int v11 = *((_DWORD *)this + 3184);
    }

    a4 = v41;
    *uint64_t v10 = v13;
    goto LABEL_26;
  }

  unint64_t v17 = (unint64_t)&v13[v12 + 1];
  unint64_t v16 = v14[2];
  if (v17 > v16) {
    goto LABEL_11;
  }
  v14[1] = v17;
  LODWORD(v18) = 1;
LABEL_26:
  *((_DWORD *)this + 3185) = v12 + v18;
LABEL_27:
  *((_DWORD *)this + 3184) = v11 + 1;
  v13[v11] = 80;
  swift::Demangle::__runtime::CharVector::append( (unsigned int *)this + 3182,  *(void *)(v9 + 8) + 1LL,  *((swift::Demangle::__runtime::NodeFactory **)this + 1593));
  unsigned int v25 = *((_DWORD *)this + 3184);
  size_t v26 = *((unsigned int *)this + 3185);
  unint64_t v27 = (char *)*((void *)this + 1591);
  unint64_t v28 = (void *)*((void *)this + 1593);
  int v29 = (char *)v28[1];
  if (&v27[v26] != v29)
  {
    unint64_t v30 = v28[2];
LABEL_31:
    uint64_t v42 = a4;
    else {
      uint64_t v32 = (2 * v26);
    }
    size_t v33 = v32 + v26;
    if (!v29 || (unint64_t)&v29[v33] > v30)
    {
      unint64_t v34 = 2LL * v28[4];
      if (v34 <= v33 + 1) {
        unint64_t v34 = v33 + 1;
      }
      void v28[4] = v34;
      unint64_t v35 = v34 + 8;
      size_t v36 = malloc(v34 + 8);
      size_t v37 = (char *)v36 + v35;
      *size_t v36 = v28[3];
      int v29 = (char *)(v36 + 1);
      void v28[2] = v37;
      void v28[3] = v36;
    }

    v28[1] = &v29[v33];
    if ((_DWORD)v26)
    {
      memcpy(v29, *((const void **)this + 1591), v26);
      LODWORD(v26) = *((_DWORD *)this + 3185);
      unsigned int v25 = *((_DWORD *)this + 3184);
    }

    a4 = v42;
    *uint64_t v10 = v29;
    unint64_t v27 = v29;
    goto LABEL_43;
  }

  unint64_t v31 = (unint64_t)&v27[v26 + 1];
  unint64_t v30 = v28[2];
  if (v31 > v30) {
    goto LABEL_31;
  }
  v28[1] = v31;
  LODWORD(v32) = 1;
LABEL_43:
  *((_DWORD *)this + 3185) = v26 + v32;
LABEL_44:
  *((_DWORD *)this + 3184) = v25 + 1;
  v27[v25] = 36;
  uint64_t result = swift::Demangle::__runtime::CharVector::append( (char **)this + 1591,  *(const void **)v9,  *(void *)(v9 + 8),  *((void **)this + 1593));
  int v39 = *((unsigned __int8 *)v4 + 18);
  if (v39 == 2) {
  if (v39 == 5 && *((_DWORD *)v4 + 2) > 1u)
  }
  {
    int v4 = *(swift::Demangle::__runtime::Node **)v4;
  }

  *(_DWORD *)a4 = 1;
  *(void *)(a4 + 8) = v4;
  *(_DWORD *)(a4 + 16) = 119;
  return result;
}

unsigned int *anonymous namespace'::Remangler::mangleShared@<X0>( unsigned int *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6 = (uint64_t)this;
  unsigned int v8 = this[3184];
  size_t v9 = this[3185];
  uint64_t v10 = (char *)*((void *)this + 1591);
  if (v8 >= v9)
  {
    unsigned int v11 = (void *)*((void *)this + 1593);
    size_t v12 = (char *)v11[1];
    if (&v10[v9] == v12)
    {
      unint64_t v14 = (unint64_t)&v10[v9 + 1];
      unint64_t v13 = v11[2];
      if (v14 <= v13)
      {
        v11[1] = v14;
        LODWORD(v15) = 1;
LABEL_20:
        *(_DWORD *)(v6 + 1274printNode(&v3, this, 0) = v9 + v15;
        goto LABEL_21;
      }
    }

    else
    {
      unint64_t v13 = v11[2];
    }

    else {
      uint64_t v15 = (2 * v9);
    }
    size_t v16 = v15 + v9;
    if (v12) {
      BOOL v17 = (unint64_t)&v12[v15 + v9] > v13;
    }
    else {
      BOOL v17 = 1;
    }
    uint64_t v10 = (char *)v11[1];
    if (v17)
    {
      unint64_t v18 = 2LL * v11[4];
      if (v18 <= v16 + 1) {
        unint64_t v18 = v16 + 1;
      }
      v11[4] = v18;
      unint64_t v19 = v18 + 8;
      this = (unsigned int *)malloc(v18 + 8);
      BOOL v20 = (char *)this + v19;
      *(void *)this = v11[3];
      uint64_t v10 = (char *)(this + 2);
      void v11[2] = v20;
      void v11[3] = this;
    }

    v11[1] = &v10[v16];
    if ((_DWORD)v9)
    {
      this = (unsigned int *)memcpy(v10, *(const void **)(v6 + 12728), v9);
      LODWORD(v9) = *(_DWORD *)(v6 + 12740);
      unsigned int v8 = *(_DWORD *)(v6 + 12736);
    }

    *(void *)(v6 + 12728) = v10;
    goto LABEL_20;
  }

unsigned int *anonymous namespace'::Remangler::mangleOwned@<X0>( unsigned int *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6 = (uint64_t)this;
  unsigned int v8 = this[3184];
  size_t v9 = this[3185];
  uint64_t v10 = (char *)*((void *)this + 1591);
  if (v8 >= v9)
  {
    unsigned int v11 = (void *)*((void *)this + 1593);
    size_t v12 = (char *)v11[1];
    if (&v10[v9] == v12)
    {
      unint64_t v14 = (unint64_t)&v10[v9 + 1];
      unint64_t v13 = v11[2];
      if (v14 <= v13)
      {
        v11[1] = v14;
        LODWORD(v15) = 1;
LABEL_20:
        *(_DWORD *)(v6 + 1274printNode(&v3, this, 0) = v9 + v15;
        goto LABEL_21;
      }
    }

    else
    {
      unint64_t v13 = v11[2];
    }

    else {
      uint64_t v15 = (2 * v9);
    }
    size_t v16 = v15 + v9;
    if (v12) {
      BOOL v17 = (unint64_t)&v12[v15 + v9] > v13;
    }
    else {
      BOOL v17 = 1;
    }
    uint64_t v10 = (char *)v11[1];
    if (v17)
    {
      unint64_t v18 = 2LL * v11[4];
      if (v18 <= v16 + 1) {
        unint64_t v18 = v16 + 1;
      }
      v11[4] = v18;
      unint64_t v19 = v18 + 8;
      this = (unsigned int *)malloc(v18 + 8);
      BOOL v20 = (char *)this + v19;
      *(void *)this = v11[3];
      uint64_t v10 = (char *)(this + 2);
      void v11[2] = v20;
      void v11[3] = this;
    }

    v11[1] = &v10[v16];
    if ((_DWORD)v9)
    {
      this = (unsigned int *)memcpy(v10, *(const void **)(v6 + 12728), v9);
      LODWORD(v9) = *(_DWORD *)(v6 + 12740);
      unsigned int v8 = *(_DWORD *)(v6 + 12736);
    }

    *(void *)(v6 + 12728) = v10;
    goto LABEL_20;
  }

unsigned int *anonymous namespace'::Remangler::mangleSILBoxType@<X0>( unsigned int *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6 = (uint64_t)this;
  unsigned int v8 = this[3184];
  size_t v9 = this[3185];
  uint64_t v10 = (char *)*((void *)this + 1591);
  if (v8 >= v9)
  {
    unsigned int v11 = (void *)*((void *)this + 1593);
    size_t v12 = (char *)v11[1];
    if (&v10[v9] == v12)
    {
      unint64_t v14 = (unint64_t)&v10[v9 + 1];
      unint64_t v13 = v11[2];
      if (v14 <= v13)
      {
        v11[1] = v14;
        LODWORD(v15) = 1;
LABEL_20:
        *(_DWORD *)(v6 + 1274printNode(&v3, this, 0) = v9 + v15;
        goto LABEL_21;
      }
    }

    else
    {
      unint64_t v13 = v11[2];
    }

    else {
      uint64_t v15 = (2 * v9);
    }
    size_t v16 = v15 + v9;
    if (v12) {
      BOOL v17 = (unint64_t)&v12[v15 + v9] > v13;
    }
    else {
      BOOL v17 = 1;
    }
    uint64_t v10 = (char *)v11[1];
    if (v17)
    {
      unint64_t v18 = 2LL * v11[4];
      if (v18 <= v16 + 1) {
        unint64_t v18 = v16 + 1;
      }
      v11[4] = v18;
      unint64_t v19 = v18 + 8;
      this = (unsigned int *)malloc(v18 + 8);
      BOOL v20 = (char *)this + v19;
      *(void *)this = v11[3];
      uint64_t v10 = (char *)(this + 2);
      void v11[2] = v20;
      void v11[3] = this;
    }

    v11[1] = &v10[v16];
    if ((_DWORD)v9)
    {
      this = (unsigned int *)memcpy(v10, *(const void **)(v6 + 12728), v9);
      LODWORD(v9) = *(_DWORD *)(v6 + 12740);
      unsigned int v8 = *(_DWORD *)(v6 + 12736);
    }

    *(void *)(v6 + 12728) = v10;
    goto LABEL_20;
  }

char *anonymous namespace'::Remangler::mangleSILBoxTypeWithLayout@<X0>( char *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  if (*((_WORD *)a2 + 8) != 211)
  {
    int v13 = 2711;
    unsigned int v14 = 1;
    goto LABEL_49;
  }

  uint64_t v7 = (uint64_t)this;
  int v8 = *((unsigned __int8 *)a2 + 18);
  if (v8 != 1 && (v8 != 5 || (*((_DWORD *)a2 + 2) | 2) != 3))
  {
    int v13 = 2713;
    unsigned int v14 = 1;
    goto LABEL_49;
  }

  size_t v9 = (char **)(this + 12728);
  this = (char *)swift::Demangle::__runtime::CharVector::append( (char **)this + 1591,  "XB",  2uLL,  *((void **)this + 1593));
  int v10 = *((unsigned __int8 *)v4 + 18);
  unsigned int v11 = v4;
  if (v10 != 5)
  {
    size_t v12 = 0LL;
LABEL_13:
    if (*((_WORD *)v12 + 8) == 212)
    {
      if (v10 != 5) {
        goto LABEL_21;
      }
      goto LABEL_15;
    }

void *anonymous namespace'::Remangler::mangleSILBoxLayout@<X0>( void *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  if (*((_WORD *)a2 + 8) != 212)
  {
    int v15 = 2744;
    int v16 = 1;
    goto LABEL_42;
  }

  uint64_t v6 = (uint64_t)this;
  unsigned int v7 = 0;
  unsigned int v8 = a3 + 1;
  while (1)
  {
    unint64_t v10 = *((unsigned __int8 *)v4 + 18);
    switch((_DWORD)v10)
    {
      case 1:
        unint64_t v11 = *((unsigned __int8 *)v4 + 18);
        break;
      case 5:
        unint64_t v11 = *((unsigned int *)v4 + 2);
        break;
      case 2:
        unint64_t v11 = 2LL;
        break;
      default:
        goto LABEL_23;
    }

    unint64_t v12 = v7;
    if (v11 <= v7) {
      break;
    }
    if (*((unsigned __int16 *)v4 + 8) - 213 > 1)
    {
      int v15 = 2748;
      int v16 = 1;
      goto LABEL_42;
    }

    unsigned int v13 = v10 - 1;
    if ((_DWORD)v10 == 1) {
      goto LABEL_16;
    }
    if ((_DWORD)v10 != 5)
    {
      unint64_t v10 = 2LL;
LABEL_16:
      if (v10 > v12) {
        goto LABEL_19;
      }
      goto LABEL_3;
    }

    if (*((unsigned int *)v4 + 2) > v12)
    {
LABEL_19:
      unsigned int v14 = v4;
      if (v13 >= 2) {
        unsigned int v14 = *(swift::Demangle::__runtime::Node **)v4;
      }
      size_t v9 = (swift::Demangle::__runtime::Node *)*((void *)v14 + v12);
      goto LABEL_4;
    }

unsigned int *anonymous namespace'::Remangler::mangleSILBoxMutableField@<X0>( unsigned int *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6 = (uint64_t)this;
  unsigned int v8 = this[3184];
  size_t v9 = this[3185];
  unint64_t v10 = (char *)*((void *)this + 1591);
  if (v8 >= v9)
  {
    unint64_t v11 = (void *)*((void *)this + 1593);
    unint64_t v12 = (char *)v11[1];
    if (&v10[v9] == v12)
    {
      unint64_t v14 = (unint64_t)&v10[v9 + 1];
      unint64_t v13 = v11[2];
      if (v14 <= v13)
      {
        v11[1] = v14;
        LODWORD(v15) = 1;
LABEL_19:
        *(_DWORD *)(v6 + 1274printNode(&v3, this, 0) = v9 + v15;
        goto LABEL_20;
      }
    }

    else
    {
      unint64_t v13 = v11[2];
    }

    else {
      uint64_t v15 = (2 * v9);
    }
    size_t v16 = v15 + v9;
    if (v12) {
      BOOL v17 = (unint64_t)&v12[v15 + v9] > v13;
    }
    else {
      BOOL v17 = 1;
    }
    unint64_t v10 = (char *)v11[1];
    if (v17)
    {
      unint64_t v18 = 2LL * v11[4];
      if (v18 <= v16 + 1) {
        unint64_t v18 = v16 + 1;
      }
      v11[4] = v18;
      unint64_t v19 = v18 + 8;
      this = (unsigned int *)malloc(v18 + 8);
      BOOL v20 = (char *)this + v19;
      *(void *)this = v11[3];
      unint64_t v10 = (char *)(this + 2);
      void v11[2] = v20;
      void v11[3] = this;
    }

    v11[1] = &v10[v16];
    if ((_DWORD)v9)
    {
      this = (unsigned int *)memcpy(v10, *(const void **)(v6 + 12728), v9);
      LODWORD(v9) = *(_DWORD *)(v6 + 12740);
      unsigned int v8 = *(_DWORD *)(v6 + 12736);
    }

    *(void *)(v6 + 12728) = v10;
    goto LABEL_19;
  }

unsigned int *anonymous namespace'::Remangler::mangleSILBoxImmutableField@<X0>( unsigned int *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6 = (uint64_t)this;
  unsigned int v8 = this[3184];
  size_t v9 = this[3185];
  unint64_t v10 = (char *)*((void *)this + 1591);
  if (v8 >= v9)
  {
    unint64_t v11 = (void *)*((void *)this + 1593);
    unint64_t v12 = (char *)v11[1];
    if (&v10[v9] == v12)
    {
      unint64_t v14 = (unint64_t)&v10[v9 + 1];
      unint64_t v13 = v11[2];
      if (v14 <= v13)
      {
        v11[1] = v14;
        LODWORD(v15) = 1;
LABEL_19:
        *(_DWORD *)(v6 + 1274printNode(&v3, this, 0) = v9 + v15;
        goto LABEL_20;
      }
    }

    else
    {
      unint64_t v13 = v11[2];
    }

    else {
      uint64_t v15 = (2 * v9);
    }
    size_t v16 = v15 + v9;
    if (v12) {
      BOOL v17 = (unint64_t)&v12[v15 + v9] > v13;
    }
    else {
      BOOL v17 = 1;
    }
    unint64_t v10 = (char *)v11[1];
    if (v17)
    {
      unint64_t v18 = 2LL * v11[4];
      if (v18 <= v16 + 1) {
        unint64_t v18 = v16 + 1;
      }
      v11[4] = v18;
      unint64_t v19 = v18 + 8;
      this = (unsigned int *)malloc(v18 + 8);
      BOOL v20 = (char *)this + v19;
      *(void *)this = v11[3];
      unint64_t v10 = (char *)(this + 2);
      void v11[2] = v20;
      void v11[3] = this;
    }

    v11[1] = &v10[v16];
    if ((_DWORD)v9)
    {
      this = (unsigned int *)memcpy(v10, *(const void **)(v6 + 12728), v9);
      LODWORD(v9) = *(_DWORD *)(v6 + 12740);
      unsigned int v8 = *(_DWORD *)(v6 + 12736);
    }

    *(void *)(v6 + 12728) = v10;
    goto LABEL_19;
  }

void anonymous namespace'::Remangler::mangleSetter( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v6[0] = 0;
  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  std::string __p = 0LL;
  int v4 = *((unsigned __int8 *)a2 + 18);
  size_t v5 = 0LL;
  if (v4 != 5) {
    goto LABEL_6;
  }
  if (*((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    size_t v5 = *a2;
    goto LABEL_6;
  }

  size_t v5 = 0LL;
LABEL_6:
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
}

void anonymous namespace'::Remangler::mangleStatic( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a3;
  v26[0] = 0;
  uint64_t v28 = 0LL;
  uint64_t v29 = 0LL;
  std::string __p = 0LL;
  unsigned int v8 = *((_DWORD *)this + 3184);
  size_t v9 = *((unsigned int *)this + 3185);
  unint64_t v10 = (char *)*((void *)this + 1591);
  if (v8 >= v9)
  {
    unint64_t v11 = (void *)*((void *)this + 1593);
    unint64_t v12 = (char *)v11[1];
    if (&v10[v9] == v12)
    {
      unint64_t v14 = (unint64_t)&v10[v9 + 1];
      unint64_t v13 = v11[2];
      if (v14 <= v13)
      {
        v11[1] = v14;
        LODWORD(v15) = 1;
LABEL_20:
        *((_DWORD *)this + 3185) = v9 + v15;
        goto LABEL_21;
      }
    }

    else
    {
      unint64_t v13 = v11[2];
    }

    else {
      uint64_t v15 = (2 * v9);
    }
    size_t v16 = v15 + v9;
    if (v12) {
      BOOL v17 = (unint64_t)&v12[v15 + v9] > v13;
    }
    else {
      BOOL v17 = 1;
    }
    unint64_t v10 = (char *)v11[1];
    if (v17)
    {
      unint64_t v18 = 2LL * v11[4];
      if (v18 <= v16 + 1) {
        unint64_t v18 = v16 + 1;
      }
      v11[4] = v18;
      uint64_t v19 = a4;
      unint64_t v20 = v18 + 8;
      int v21 = malloc(v18 + 8);
      *int v21 = v11[3];
      unint64_t v10 = (char *)(v21 + 1);
      unint64_t v22 = (char *)v21 + v20;
      a4 = v19;
      int v4 = a3;
      void v11[2] = v22;
      void v11[3] = v21;
    }

    v11[1] = &v10[v16];
    if ((_DWORD)v9)
    {
      memcpy(v10, *((const void **)this + 1591), v9);
      LODWORD(v9) = *((_DWORD *)this + 3185);
      unsigned int v8 = *((_DWORD *)this + 3184);
    }

    *((void *)this + 1591) = v10;
    goto LABEL_20;
  }

void anonymous namespace'::Remangler::mangleSubscript( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v4[0] = 0;
  uint64_t v6 = 0LL;
  uint64_t v7 = 0LL;
  std::string __p = 0LL;
  if (SHIBYTE(v7) < 0) {
    operator delete(__p);
  }
}

void *anonymous namespace'::Remangler::mangleThinFunctionType@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Xf", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  unint64_t v10 = a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      unint64_t v11 = *a2;
      unint64_t v10 = (swift::Demangle::__runtime::Node **)*a2;
      goto LABEL_9;
    }

    unint64_t v10 = 0LL;
  }

  switch(v9)
  {
    case 1:
      unint64_t v12 = a2 + 1;
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      unint64_t v12 = a2 + 2;
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      unint64_t v11 = *a2;
LABEL_9:
      unint64_t v12 = (swift::Demangle::__runtime::Node **)((char *)v11 + 8 * *((unsigned int *)a2 + 2));
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }

  unint64_t v12 = 0LL;
  if (!v10)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

_DWORD *anonymous namespace'::Remangler::mangleTuple@<X0>( _DWORD *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = (uint64_t)this;
  int v7 = *((unsigned __int8 *)a2 + 18);
  switch(v7)
  {
    case 1:
      uint64_t v8 = 0LL;
      int v9 = a2;
      break;
    case 5:
      uint64_t v10 = *((unsigned int *)a2 + 2);
      if (!(_DWORD)v10) {
        goto LABEL_13;
      }
      uint64_t v8 = v10 - 1;
      int v9 = *(swift::Demangle::__runtime::Node **)a2;
      break;
    case 2:
      uint64_t v8 = 1LL;
      int v9 = a2;
      break;
    default:
      goto LABEL_13;
  }

  unint64_t v11 = (unsigned __int8 *)*((void *)v9 + v8);
  if (*(_WORD *)(*(void *)v11 + 16LL) != 276)
  {
LABEL_13:
    unint64_t v12 = this + 3184;
    unsigned int v13 = this[3184];
    size_t v17 = this[3185];
    uint64_t v15 = (char *)*((void *)this + 1591);
    if (v13 < v17)
    {
LABEL_31:
      char v16 = 84;
      goto LABEL_32;
    }

    unint64_t v18 = (void *)*((void *)this + 1593);
    uint64_t v19 = (char *)v18[1];
    if (&v15[v17] == v19)
    {
      unint64_t v24 = (unint64_t)&v15[v17 + 1];
      unint64_t v20 = v18[2];
      if (v24 <= v20)
      {
        v18[1] = v24;
        LODWORD(v25) = 1;
LABEL_30:
        *(_DWORD *)(v5 + 1274printNode(&v3, this, 0) = v17 + v25;
        goto LABEL_31;
      }
    }

    else
    {
      unint64_t v20 = v18[2];
    }

    int v54 = a3;
    else {
      uint64_t v25 = (2 * v17);
    }
    size_t v26 = v25 + v17;
    if (!v19 || (unint64_t)&v19[v26] > v20)
    {
      unint64_t v27 = 2LL * v18[4];
      if (v27 <= v26 + 1) {
        unint64_t v27 = v26 + 1;
      }
      v18[4] = v27;
      unint64_t v28 = v27 + 8;
      this = malloc(v27 + 8);
      uint64_t v29 = (char *)this + v28;
      *(void *)this = v18[3];
      uint64_t v19 = (char *)(this + 2);
      uint64_t v18[2] = v29;
      void v18[3] = this;
    }

    v18[1] = &v19[v26];
    if ((_DWORD)v17)
    {
      this = memcpy(v19, *(const void **)(v5 + 12728), v17);
      LODWORD(vmemset(&v11, 0, 17) = *(_DWORD *)(v5 + 12740);
      unsigned int v13 = *(_DWORD *)(v5 + 12736);
    }

    a3 = v54;
    *(void *)(v5 + 12728) = v19;
    uint64_t v15 = v19;
    goto LABEL_30;
  }

  unint64_t v12 = this + 3184;
  unsigned int v13 = this[3184];
  size_t v14 = this[3185];
  uint64_t v15 = (char *)*((void *)this + 1591);
  if (v13 < v14)
  {
    char v16 = 116;
    goto LABEL_32;
  }

  int v21 = (void *)*((void *)this + 1593);
  unint64_t v22 = (char *)v21[1];
  if (&v15[v14] != v22)
  {
    unint64_t v23 = v21[2];
LABEL_74:
    int v55 = a3;
    else {
      uint64_t v49 = (2 * v14);
    }
    size_t v50 = v49 + v14;
    if (!v22 || (unint64_t)&v22[v50] > v23)
    {
      unint64_t v51 = 2LL * v21[4];
      if (v51 <= v50 + 1) {
        unint64_t v51 = v50 + 1;
      }
      v21[4] = v51;
      unint64_t v52 = v51 + 8;
      this = malloc(v51 + 8);
      size_t v53 = (char *)this + v52;
      *(void *)this = v21[3];
      unint64_t v22 = (char *)(this + 2);
      void v21[2] = v53;
      void v21[3] = this;
    }

    v21[1] = &v22[v50];
    if ((_DWORD)v14)
    {
      this = memcpy(v22, *(const void **)(v5 + 12728), v14);
      LODWORD(v14) = *(_DWORD *)(v5 + 12740);
      unsigned int v13 = *(_DWORD *)(v5 + 12736);
    }

    a3 = v55;
    *(void *)(v5 + 12728) = v22;
    uint64_t v15 = v22;
    goto LABEL_85;
  }

  unint64_t v48 = (unint64_t)&v15[v14 + 1];
  unint64_t v23 = v21[2];
  if (v48 > v23) {
    goto LABEL_74;
  }
  v21[1] = v48;
  LODWORD(v49) = 1;
LABEL_85:
  *(_DWORD *)(v5 + 1274printNode(&v3, this, 0) = v14 + v49;
  char v16 = 116;
LABEL_32:
  *unint64_t v12 = v13 + 1;
  v15[v13] = v16;
  int v30 = *((unsigned __int8 *)a2 + 18);
  size_t v31 = (swift::Demangle::__runtime::Node **)a2;
  if ((v30 - 1) >= 2)
  {
    if (v30 == 5)
    {
      uint64_t v32 = *(void *)a2;
      size_t v31 = *(swift::Demangle::__runtime::Node ***)a2;
      goto LABEL_40;
    }

    size_t v31 = 0LL;
  }

  if (v30 == 1)
  {
    size_t v33 = (swift::Demangle::__runtime::Node **)((char *)a2 + 8);
    if (v31 != v33) {
      goto LABEL_47;
    }
    goto LABEL_50;
  }

  if (v30 == 2)
  {
    size_t v33 = (swift::Demangle::__runtime::Node **)((char *)a2 + 16);
    if (v31 != v33) {
      goto LABEL_47;
    }
LABEL_50:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    unsigned int v35 = *(_DWORD *)(v5 + 12736);
    size_t v36 = *(unsigned int *)(v5 + 12740);
    uint64_t v37 = *(_BYTE **)(v5 + 12728);
    if (v35 < v36)
    {
LABEL_69:
      *(_DWORD *)(v5 + 12736) = v35 + 1;
      v37[v35] = 95;
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0LL;
      *(_DWORD *)(a4 + 16) = 0;
      return this;
    }

    size_t v38 = *(void **)(v5 + 12744);
    unint64_t v39 = (_BYTE *)v38[1];
    if (&v37[v36] == v39)
    {
      unint64_t v41 = (unint64_t)&v37[v36 + 1];
      unint64_t v40 = v38[2];
      if (v41 <= v40)
      {
        v38[1] = v41;
        LODWORD(v42) = 1;
LABEL_68:
        *(_DWORD *)(v5 + 1274printNode(&v3, this, 0) = v36 + v42;
        goto LABEL_69;
      }
    }

    else
    {
      unint64_t v40 = v38[2];
    }

    else {
      uint64_t v42 = (2 * v36);
    }
    size_t v43 = v42 + v36;
    if (v39) {
      BOOL v44 = (unint64_t)&v39[v42 + v36] > v40;
    }
    else {
      BOOL v44 = 1;
    }
    uint64_t v37 = (_BYTE *)v38[1];
    if (v44)
    {
      unint64_t v45 = 2LL * v38[4];
      if (v45 <= v43 + 1) {
        unint64_t v45 = v43 + 1;
      }
      v38[4] = v45;
      unint64_t v46 = v45 + 8;
      this = malloc(v45 + 8);
      unint64_t v47 = (char *)this + v46;
      *(void *)this = v38[3];
      uint64_t v37 = this + 2;
      v38[2] = v47;
      void v38[3] = this;
    }

    v38[1] = &v37[v43];
    if ((_DWORD)v36)
    {
      this = memcpy(v37, *(const void **)(v5 + 12728), v36);
      LODWORD(v36) = *(_DWORD *)(v5 + 12740);
      unsigned int v35 = *(_DWORD *)(v5 + 12736);
    }

    *(void *)(v5 + 12728) = v37;
    goto LABEL_68;
  }

  if (v30 != 5)
  {
    size_t v33 = 0LL;
    if (!v31) {
      goto LABEL_50;
    }
    goto LABEL_47;
  }

  uint64_t v32 = *(void *)a2;
LABEL_40:
  size_t v33 = (swift::Demangle::__runtime::Node **)(v32 + 8LL * *((unsigned int *)a2 + 2));
  if (v31 == v33) {
    goto LABEL_50;
  }
LABEL_47:
  unsigned int v34 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return this;
    }
    if (++v31 == v33) {
      goto LABEL_50;
    }
  }

unsigned int *anonymous namespace'::Remangler::mangleTypeMangling@<X0>( unsigned int *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6 = (uint64_t)this;
  unsigned int v8 = this[3184];
  size_t v9 = this[3185];
  uint64_t v10 = (char *)*((void *)this + 1591);
  if (v8 >= v9)
  {
    unint64_t v11 = (void *)*((void *)this + 1593);
    unint64_t v12 = (char *)v11[1];
    if (&v10[v9] == v12)
    {
      unint64_t v14 = (unint64_t)&v10[v9 + 1];
      unint64_t v13 = v11[2];
      if (v14 <= v13)
      {
        v11[1] = v14;
        LODWORD(v15) = 1;
LABEL_20:
        *(_DWORD *)(v6 + 1274printNode(&v3, this, 0) = v9 + v15;
        goto LABEL_21;
      }
    }

    else
    {
      unint64_t v13 = v11[2];
    }

    else {
      uint64_t v15 = (2 * v9);
    }
    size_t v16 = v15 + v9;
    if (v12) {
      BOOL v17 = (unint64_t)&v12[v15 + v9] > v13;
    }
    else {
      BOOL v17 = 1;
    }
    uint64_t v10 = (char *)v11[1];
    if (v17)
    {
      unint64_t v18 = 2LL * v11[4];
      if (v18 <= v16 + 1) {
        unint64_t v18 = v16 + 1;
      }
      v11[4] = v18;
      unint64_t v19 = v18 + 8;
      this = (unsigned int *)malloc(v18 + 8);
      unint64_t v20 = (char *)this + v19;
      *(void *)this = v11[3];
      uint64_t v10 = (char *)(this + 2);
      void v11[2] = v20;
      void v11[3] = this;
    }

    v11[1] = &v10[v16];
    if ((_DWORD)v9)
    {
      this = (unsigned int *)memcpy(v10, *(const void **)(v6 + 12728), v9);
      LODWORD(v9) = *(_DWORD *)(v6 + 12740);
      unsigned int v8 = *(_DWORD *)(v6 + 12736);
    }

    *(void *)(v6 + 12728) = v10;
    goto LABEL_20;
  }

void *anonymous namespace'::Remangler::mangleTypeMetadata@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "M", 1uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if (v9 == 1) {
  if (v9 == 5 && *((_DWORD *)a2 + 2) == 1)
  }
  {
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  *(_DWORD *)a4 = 10;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = 114;
  return result;
}

void *anonymous namespace'::Remangler::mangleTypeMetadataAccessFunction@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Ma", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if (v9 == 1) {
  if (v9 == 5 && *((_DWORD *)a2 + 2) == 1)
  }
  {
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  *(_DWORD *)a4 = 10;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = 114;
  return result;
}

void *anonymous namespace'::Remangler::mangleTypeMetadataCompletionFunction@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Mr", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if (v9 == 1) {
  if (v9 == 5 && *((_DWORD *)a2 + 2) == 1)
  }
  {
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  *(_DWORD *)a4 = 10;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = 114;
  return result;
}

void *anonymous namespace'::Remangler::mangleTypeMetadataInstantiationCache@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "MI", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if (v9 == 1) {
  if (v9 == 5 && *((_DWORD *)a2 + 2) == 1)
  }
  {
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  *(_DWORD *)a4 = 10;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = 114;
  return result;
}

void *anonymous namespace'::Remangler::mangleTypeMetadataInstantiationFunction@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Mi", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if (v9 == 1) {
  if (v9 == 5 && *((_DWORD *)a2 + 2) == 1)
  }
  {
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  *(_DWORD *)a4 = 10;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = 114;
  return result;
}

void *anonymous namespace'::Remangler::mangleTypeMetadataSingletonInitializationCache@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Ml", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if (v9 == 1) {
  if (v9 == 5 && *((_DWORD *)a2 + 2) == 1)
  }
  {
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  *(_DWORD *)a4 = 10;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = 114;
  return result;
}

void *anonymous namespace'::Remangler::mangleTypeMetadataLazyCache@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "ML", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if (v9 == 1) {
  if (v9 == 5 && *((_DWORD *)a2 + 2) == 1)
  }
  {
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  *(_DWORD *)a4 = 10;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = 114;
  return result;
}

unsigned int *anonymous namespace'::Remangler::mangleUncurriedFunctionType@<X0>( unsigned int *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6 = (uint64_t)this;
  unsigned int v8 = this[3184];
  size_t v9 = this[3185];
  uint64_t v10 = (char *)*((void *)this + 1591);
  if (v8 >= v9)
  {
    unint64_t v11 = (void *)*((void *)this + 1593);
    unint64_t v12 = (char *)v11[1];
    if (&v10[v9] == v12)
    {
      unint64_t v14 = (unint64_t)&v10[v9 + 1];
      unint64_t v13 = v11[2];
      if (v14 <= v13)
      {
        v11[1] = v14;
        LODWORD(v15) = 1;
LABEL_20:
        *(_DWORD *)(v6 + 1274printNode(&v3, this, 0) = v9 + v15;
        goto LABEL_21;
      }
    }

    else
    {
      unint64_t v13 = v11[2];
    }

    else {
      uint64_t v15 = (2 * v9);
    }
    size_t v16 = v15 + v9;
    if (v12) {
      BOOL v17 = (unint64_t)&v12[v15 + v9] > v13;
    }
    else {
      BOOL v17 = 1;
    }
    uint64_t v10 = (char *)v11[1];
    if (v17)
    {
      unint64_t v18 = 2LL * v11[4];
      if (v18 <= v16 + 1) {
        unint64_t v18 = v16 + 1;
      }
      v11[4] = v18;
      unint64_t v19 = v18 + 8;
      this = (unsigned int *)malloc(v18 + 8);
      unint64_t v20 = (char *)this + v19;
      *(void *)this = v11[3];
      uint64_t v10 = (char *)(this + 2);
      void v11[2] = v20;
      void v11[3] = this;
    }

    v11[1] = &v10[v16];
    if ((_DWORD)v9)
    {
      this = (unsigned int *)memcpy(v10, *(const void **)(v6 + 12728), v9);
      LODWORD(v9) = *(_DWORD *)(v6 + 12740);
      unsigned int v8 = *(_DWORD *)(v6 + 12736);
    }

    *(void *)(v6 + 12728) = v10;
    goto LABEL_20;
  }

void *anonymous namespace'::Remangler::mangleWeak@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Xw", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if (v9 == 1) {
  if (v9 == 5 && *((_DWORD *)a2 + 2) == 1)
  }
  {
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  *(_DWORD *)a4 = 10;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = 114;
  return result;
}

void *anonymous namespace'::Remangler::mangleUnowned@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Xo", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if (v9 == 1) {
  if (v9 == 5 && *((_DWORD *)a2 + 2) == 1)
  }
  {
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  *(_DWORD *)a4 = 10;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = 114;
  return result;
}

void *anonymous namespace'::Remangler::mangleUnmanaged@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Xu", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if (v9 == 1) {
  if (v9 == 5 && *((_DWORD *)a2 + 2) == 1)
  }
  {
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  *(_DWORD *)a4 = 10;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = 114;
  return result;
}

void anonymous namespace'::Remangler::mangleUnsafeAddressor( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v6[0] = 0;
  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  std::string __p = 0LL;
  int v4 = *((unsigned __int8 *)a2 + 18);
  uint64_t v5 = 0LL;
  if (v4 != 5) {
    goto LABEL_6;
  }
  if (*((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    uint64_t v5 = *a2;
    goto LABEL_6;
  }

  uint64_t v5 = 0LL;
LABEL_6:
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
}

void anonymous namespace'::Remangler::mangleUnsafeMutableAddressor( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v6[0] = 0;
  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  std::string __p = 0LL;
  int v4 = *((unsigned __int8 *)a2 + 18);
  uint64_t v5 = 0LL;
  if (v4 != 5) {
    goto LABEL_6;
  }
  if (*((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    uint64_t v5 = *a2;
    goto LABEL_6;
  }

  uint64_t v5 = 0LL;
LABEL_6:
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
}

char *anonymous namespace'::Remangler::mangleValueWitness@<X0>( char *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a3;
  uint64_t v5 = a2;
  uint64_t v6 = (uint64_t)this;
  uint64_t v8 = a2;
  unint64_t v9 = **(void **)v8;
  if (v9 >= 0x18)
  {
    *(_DWORD *)a4 = 22;
    *(void *)(a4 + 8) = a2;
    int v18 = 811;
    goto LABEL_27;
  }

  uint64_t v10 = off_189B8F1E0[v9];
  unint64_t v11 = (char **)(this + 12728);
  unsigned int v12 = *((_DWORD *)this + 3184);
  size_t v13 = *((unsigned int *)this + 3185);
  unint64_t v14 = (char *)*((void *)this + 1591);
  if (v12 >= v13)
  {
    uint64_t v15 = (void *)*((void *)this + 1593);
    size_t v16 = (char *)v15[1];
    if (&v14[v13] == v16)
    {
      unint64_t v19 = (unint64_t)&v14[v13 + 1];
      unint64_t v17 = v15[2];
      if (v19 <= v17)
      {
        v15[1] = v19;
        LODWORD(v2printNode(&v3, this, 0) = 1;
LABEL_20:
        *(_DWORD *)(v6 + 1274printNode(&v3, this, 0) = v13 + v20;
        goto LABEL_21;
      }
    }

    else
    {
      unint64_t v17 = v15[2];
    }

    else {
      uint64_t v20 = (2 * v13);
    }
    size_t v21 = v20 + v13;
    if (!v16 || (unint64_t)&v16[v21] > v17)
    {
      unint64_t v22 = 2LL * v15[4];
      if (v22 <= v21 + 1) {
        unint64_t v22 = v21 + 1;
      }
      v15[4] = v22;
      unint64_t v23 = v22 + 8;
      int v24 = v20;
      uint64_t v20 = (uint64_t)v10;
      unsigned int v25 = malloc(v22 + 8);
      uint64_t v10 = (char *)v20;
      LODWORD(v2printNode(&v3, this, 0) = v24;
      unint64_t v11 = (char **)(v6 + 12728);
      size_t v26 = (char *)v25 + v23;
      *unsigned int v25 = v15[3];
      size_t v16 = (char *)(v25 + 1);
      void v15[2] = v26;
      void v15[3] = v25;
    }

    v15[1] = &v16[v21];
    if ((_DWORD)v13)
    {
      unint64_t v27 = v10;
      memcpy(v16, *(const void **)(v6 + 12728), v13);
      uint64_t v10 = v27;
      LODWORD(v13) = *(_DWORD *)(v6 + 12740);
      unsigned int v12 = *(_DWORD *)(v6 + 12736);
    }

    int v4 = a3;
    *unint64_t v11 = v16;
    unint64_t v14 = v16;
    goto LABEL_20;
  }

void *anonymous namespace'::Remangler::mangleValueWitnessTable@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "WV", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if (v9 == 1) {
  if (v9 == 5 && *((_DWORD *)a2 + 2) == 1)
  }
  {
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  *(_DWORD *)a4 = 10;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = 114;
  return result;
}

void anonymous namespace'::Remangler::mangleVariable( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v4[0] = 0;
  uint64_t v6 = 0LL;
  uint64_t v7 = 0LL;
  std::string __p = 0LL;
  if (SHIBYTE(v7) < 0) {
    operator delete(__p);
  }
}

void *anonymous namespace'::Remangler::mangleVTableThunk@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "TV", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  uint64_t v10 = a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      unint64_t v11 = *a2;
      uint64_t v10 = (swift::Demangle::__runtime::Node **)*a2;
      goto LABEL_9;
    }

    uint64_t v10 = 0LL;
  }

  switch(v9)
  {
    case 1:
      unsigned int v12 = a2 + 1;
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      unsigned int v12 = a2 + 2;
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      unint64_t v11 = *a2;
LABEL_9:
      unsigned int v12 = (swift::Demangle::__runtime::Node **)((char *)v11 + 8 * *((unsigned int *)a2 + 2));
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }

  unsigned int v12 = 0LL;
  if (!v10)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

void anonymous namespace'::Remangler::mangleWillSet( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v6[0] = 0;
  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  std::string __p = 0LL;
  int v4 = *((unsigned __int8 *)a2 + 18);
  uint64_t v5 = 0LL;
  if (v4 != 5) {
    goto LABEL_6;
  }
  if (*((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    uint64_t v5 = *a2;
    goto LABEL_6;
  }

  uint64_t v5 = 0LL;
LABEL_6:
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
}

void *anonymous namespace'::Remangler::mangleOutlinedBridgedMethod@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = this + 1591;
  swift::Demangle::__runtime::CharVector::append(this + 1591, "Te", 2uLL, this[1593]);
  uint64_t result = swift::Demangle::__runtime::CharVector::append(v8, *(const void **)a2, *((void *)a2 + 1), this[1593]);
  int v10 = *((unsigned __int8 *)a2 + 18);
  if (v10 == 1) {
  if (v10 == 5 && *((_DWORD *)a2 + 2) == 1)
  }
  {
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  *(_DWORD *)a4 = 10;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = 114;
  return result;
}

void *anonymous namespace'::Remangler::mangleOutlinedCopy@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Wy", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  int v10 = a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      unint64_t v11 = *a2;
      int v10 = (swift::Demangle::__runtime::Node **)*a2;
      goto LABEL_9;
    }

    int v10 = 0LL;
  }

  switch(v9)
  {
    case 1:
      unsigned int v12 = a2 + 1;
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      unsigned int v12 = a2 + 2;
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      unint64_t v11 = *a2;
LABEL_9:
      unsigned int v12 = (swift::Demangle::__runtime::Node **)((char *)v11 + 8 * *((unsigned int *)a2 + 2));
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }

  unsigned int v12 = 0LL;
  if (!v10)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

void *anonymous namespace'::Remangler::mangleOutlinedConsume@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "We", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  int v10 = a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      unint64_t v11 = *a2;
      int v10 = (swift::Demangle::__runtime::Node **)*a2;
      goto LABEL_9;
    }

    int v10 = 0LL;
  }

  switch(v9)
  {
    case 1:
      unsigned int v12 = a2 + 1;
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      unsigned int v12 = a2 + 2;
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      unint64_t v11 = *a2;
LABEL_9:
      unsigned int v12 = (swift::Demangle::__runtime::Node **)((char *)v11 + 8 * *((unsigned int *)a2 + 2));
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }

  unsigned int v12 = 0LL;
  if (!v10)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }

void *anonymous namespace'::Remangler::mangleOutlinedRetain@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Wr", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if (v9 == 1) {
  if (v9 == 5 && *((_DWORD *)a2 + 2) == 1)
  }
  {
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  *(_DWORD *)a4 = 10;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = 114;
  return result;
}

void *anonymous namespace'::Remangler::mangleOutlinedRelease@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Ws", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if (v9 == 1) {
  if (v9 == 5 && *((_DWORD *)a2 + 2) == 1)
  }
  {
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  *(_DWORD *)a4 = 10;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = 114;
  return result;
}

void *anonymous namespace'::Remangler::mangleOutlinedInitializeWithTake@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Wb", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if (v9 == 1) {
  if (v9 == 5 && *((_DWORD *)a2 + 2) == 1)
  }
  {
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  *(_DWORD *)a4 = 10;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = 114;
  return result;
}

void *anonymous namespace'::Remangler::mangleOutlinedInitializeWithCopy@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Wc", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if (v9 == 1) {
  if (v9 == 5 && *((_DWORD *)a2 + 2) == 1)
  }
  {
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  *(_DWORD *)a4 = 10;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = 114;
  return result;
}

void *anonymous namespace'::Remangler::mangleOutlinedAssignWithTake@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Wd", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if (v9 == 1) {
  if (v9 == 5 && *((_DWORD *)a2 + 2) == 1)
  }
  {
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  *(_DWORD *)a4 = 10;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = 114;
  return result;
}

void *anonymous namespace'::Remangler::mangleOutlinedAssignWithCopy@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Wf", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if (v9 == 1) {
  if (v9 == 5 && *((_DWORD *)a2 + 2) == 1)
  }
  {
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  *(_DWORD *)a4 = 10;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = 114;
  return result;
}

void *anonymous namespace'::Remangler::mangleOutlinedDestroy@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Wh", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if (v9 == 1) {
  if (v9 == 5 && *((_DWORD *)a2 + 2) == 1)
  }
  {
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  *(_DWORD *)a4 = 10;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = 114;
  return result;
}

unsigned int *anonymous namespace'::Remangler::mangleOutlinedVariable@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (unsigned int *)((char *)this + 12728);
  swift::Demangle::__runtime::CharVector::append((char **)this + 1591, "Tv", 2uLL, *((void **)this + 1593));
  uint64_t result = swift::Demangle::__runtime::CharVector::append( v8,  *(void *)a2,  *((swift::Demangle::__runtime::NodeFactory **)this + 1593));
  int v10 = *((unsigned __int8 *)a2 + 18);
  if (v10 == 1) {
  if (v10 == 5 && *((_DWORD *)a2 + 2) == 1)
  }
  {
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  *(_DWORD *)a4 = 10;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = 114;
  return result;
}

void *anonymous namespace'::Remangler::mangleOutlinedReadOnlyObject@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (unsigned int *)((char *)this + 12728);
  swift::Demangle::__runtime::CharVector::append((char **)this + 1591, "Tv", 2uLL, *((void **)this + 1593));
  uint64_t result = swift::Demangle::__runtime::CharVector::append( v8,  *(void *)a2,  *((swift::Demangle::__runtime::NodeFactory **)this + 1593));
  unsigned int v10 = *((_DWORD *)this + 3184);
  size_t v11 = *((unsigned int *)this + 3185);
  unsigned int v12 = (char *)*((void *)this + 1591);
  if (v10 >= v11)
  {
    unsigned int v13 = (void *)*((void *)this + 1593);
    unint64_t v14 = (char *)v13[1];
    if (&v12[v11] == v14)
    {
      unint64_t v16 = (unint64_t)&v12[v11 + 1];
      unint64_t v15 = v13[2];
      if (v16 <= v15)
      {
        v13[1] = v16;
        LODWORD(vmemset(&v11, 0, 17) = 1;
LABEL_20:
        *((_DWORD *)this + 3185) = v11 + v17;
        goto LABEL_21;
      }
    }

    else
    {
      unint64_t v15 = v13[2];
    }

    int v24 = a3;
    else {
      uint64_t v17 = (2 * v11);
    }
    size_t v18 = v17 + v11;
    if (v14) {
      BOOL v19 = (unint64_t)&v14[v17 + v11] > v15;
    }
    else {
      BOOL v19 = 1;
    }
    unsigned int v12 = (char *)v13[1];
    if (v19)
    {
      unint64_t v20 = 2LL * v13[4];
      if (v20 <= v18 + 1) {
        unint64_t v20 = v18 + 1;
      }
      _OWORD v13[4] = v20;
      unint64_t v21 = v20 + 8;
      uint64_t result = malloc(v20 + 8);
      unint64_t v22 = (char *)result + v21;
      *uint64_t result = v13[3];
      unsigned int v12 = (char *)(result + 1);
      void v13[2] = v22;
      void v13[3] = result;
    }

    v13[1] = &v12[v18];
    if ((_DWORD)v11)
    {
      uint64_t result = memcpy(v12, *((const void **)this + 1591), v11);
      LODWORD(v11) = *((_DWORD *)this + 3185);
      unsigned int v10 = *((_DWORD *)this + 3184);
    }

    a3 = v24;
    *(void *)uint64_t v8 = v12;
    goto LABEL_20;
  }

unsigned int *anonymous namespace'::Remangler::mangleLabelList@<X0>( unsigned int *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  uint64_t v5 = (uint64_t)this;
  uint64_t v7 = *((unsigned __int8 *)a2 + 18);
  switch((_DWORD)v7)
  {
    case 1:
LABEL_10:
      unint64_t v14 = &v4[v7];
      unsigned int v15 = a3 + 1;
      while (1)
      {
        if (*(_DWORD *)a4) {
          return this;
        }
        if (++v4 == v14) {
          goto LABEL_29;
        }
      }

    case 2:
      uint64_t v7 = 2LL;
      goto LABEL_10;
    case 5:
      uint64_t v7 = *((unsigned int *)a2 + 2);
      if ((_DWORD)v7)
      {
        int v4 = (swift::Demangle::__runtime::Node **)*a2;
        goto LABEL_10;
      }

      break;
  }

  unsigned int v8 = this[3184];
  size_t v9 = this[3185];
  unsigned int v10 = (char *)*((void *)this + 1591);
  if (v8 >= v9)
  {
    size_t v11 = (void *)*((void *)this + 1593);
    unsigned int v12 = (char *)v11[1];
    if (&v10[v9] == v12)
    {
      unint64_t v16 = (unint64_t)&v10[v9 + 1];
      unint64_t v13 = v11[2];
      if (v16 <= v13)
      {
        v11[1] = v16;
        LODWORD(vmemset(&v11, 0, 17) = 1;
LABEL_27:
        *(_DWORD *)(v5 + 1274printNode(&v3, this, 0) = v9 + v17;
        goto LABEL_28;
      }
    }

    else
    {
      unint64_t v13 = v11[2];
    }

    else {
      uint64_t v17 = (2 * v9);
    }
    size_t v18 = v17 + v9;
    if (!v12 || (unint64_t)&v12[v18] > v13)
    {
      unint64_t v19 = 2LL * v11[4];
      if (v19 <= v18 + 1) {
        unint64_t v19 = v18 + 1;
      }
      v11[4] = v19;
      unint64_t v20 = v19 + 8;
      this = (unsigned int *)malloc(v19 + 8);
      unint64_t v21 = (char *)this + v20;
      *(void *)this = v11[3];
      unsigned int v12 = (char *)(this + 2);
      void v11[2] = v21;
      void v11[3] = this;
    }

    v11[1] = &v12[v18];
    if ((_DWORD)v9)
    {
      this = (unsigned int *)memcpy(v12, *(const void **)(v5 + 12728), v9);
      LODWORD(v9) = *(_DWORD *)(v5 + 12740);
      unsigned int v8 = *(_DWORD *)(v5 + 12736);
    }

    *(void *)(v5 + 12728) = v12;
    unsigned int v10 = v12;
    goto LABEL_27;
  }

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleCanonicalSpecializedGenericMetaclass@<X0>( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 114;
      int v7 = 10;
      goto LABEL_8;
    }

    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append( (char **)v4 + 1591,  "MM",  2uLL,  *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0LL;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

unsigned int *anonymous namespace'::Remangler::mangleNoDerivative@<X0>( unsigned int *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6 = (uint64_t)this;
  unsigned int v8 = this[3184];
  size_t v9 = this[3185];
  unsigned int v10 = (char *)*((void *)this + 1591);
  if (v8 >= v9)
  {
    size_t v11 = (void *)*((void *)this + 1593);
    unsigned int v12 = (char *)v11[1];
    if (&v10[v9] == v12)
    {
      unint64_t v14 = (unint64_t)&v10[v9 + 1];
      unint64_t v13 = v11[2];
      if (v14 <= v13)
      {
        v11[1] = v14;
        LODWORD(v15) = 1;
LABEL_20:
        *(_DWORD *)(v6 + 1274printNode(&v3, this, 0) = v9 + v15;
        goto LABEL_21;
      }
    }

    else
    {
      unint64_t v13 = v11[2];
    }

    else {
      uint64_t v15 = (2 * v9);
    }
    size_t v16 = v15 + v9;
    if (v12) {
      BOOL v17 = (unint64_t)&v12[v15 + v9] > v13;
    }
    else {
      BOOL v17 = 1;
    }
    unsigned int v10 = (char *)v11[1];
    if (v17)
    {
      unint64_t v18 = 2LL * v11[4];
      if (v18 <= v16 + 1) {
        unint64_t v18 = v16 + 1;
      }
      v11[4] = v18;
      unint64_t v19 = v18 + 8;
      this = (unsigned int *)malloc(v18 + 8);
      unint64_t v20 = (char *)this + v19;
      *(void *)this = v11[3];
      unsigned int v10 = (char *)(this + 2);
      void v11[2] = v20;
      void v11[3] = this;
    }

    v11[1] = &v10[v16];
    if ((_DWORD)v9)
    {
      this = (unsigned int *)memcpy(v10, *(const void **)(v6 + 12728), v9);
      LODWORD(v9) = *(_DWORD *)(v6 + 12740);
      unsigned int v8 = *(_DWORD *)(v6 + 12736);
    }

    *(void *)(v6 + 12728) = v10;
    goto LABEL_20;
  }

void *anonymous namespace'::Remangler::mangleCompileTimeConst@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Yt", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if (v9 == 1) {
  if (v9 == 5 && *((_DWORD *)a2 + 2) == 1)
  }
  {
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  *(_DWORD *)a4 = 10;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = 114;
  return result;
}

void *anonymous namespace'::Remangler::mangleOutlinedEnumTagStore@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Wi", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if (v9 == 1) {
  if (v9 == 5 && *((_DWORD *)a2 + 2) == 1)
  }
  {
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  *(_DWORD *)a4 = 10;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = 114;
  return result;
}

void *anonymous namespace'::Remangler::mangleOutlinedEnumProjectDataForLoad@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Wj", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if (v9 == 1) {
  if (v9 == 5 && *((_DWORD *)a2 + 2) == 1)
  }
  {
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  *(_DWORD *)a4 = 10;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = 114;
  return result;
}

void *anonymous namespace'::Remangler::mangleOutlinedEnumGetTag@<X0>( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Wg", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if (v9 == 1) {
  if (v9 == 5 && *((_DWORD *)a2 + 2) == 1)
  }
  {
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  *(_DWORD *)a4 = 10;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = 114;
  return result;
}

void anonymous namespace'::Remangler::mangleTypedEntity( uint64_t a1@<X0>, uint64_t a2@<X1>, const void *a3@<X2>, size_t a4@<X3>, char *a5@<X4>, int a6@<W5>, uint64_t a7@<X8>)
{
  size_t v9 = a4;
  unsigned int v10 = a3;
  uint64_t v11 = a2;
  int v14 = *(unsigned __int8 *)(a2 + 18);
  if (v14 != 2 && (v14 != 5 || (*(_DWORD *)(a2 + 8) & 0xFFFFFFFE) != 2))
  {
    int v21 = 1377;
    int v22 = 1;
LABEL_8:
    *(_DWORD *)a7 = v22;
    *(void *)(a7 + 8) = v11;
    *(_DWORD *)(a7 + 16) = v21;
    return;
  }

  unint64_t v39 = (char **)(a1 + 12728);
  unsigned int v15 = *(_DWORD *)(a1 + 12736);
  size_t v16 = *(unsigned int *)(a1 + 12740);
  BOOL v17 = *(char **)(a1 + 12728);
  if (v15 >= v16)
  {
    unint64_t v18 = *(void **)(a1 + 12744);
    unint64_t v19 = (char *)v18[1];
    if (&v17[v16] == v19)
    {
      unint64_t v23 = (unint64_t)&v17[v16 + 1];
      unint64_t v20 = v18[2];
      if (v23 <= v20)
      {
        v18[1] = v23;
        int v32 = 1;
        unsigned int v10 = a3;
LABEL_25:
        *(_DWORD *)(a1 + 1274printNode(&v3, this, 0) = v16 + v32;
        goto LABEL_26;
      }
    }

    else
    {
      unint64_t v20 = v18[2];
    }

    LODWORD(v24) = 2 * v16;
    else {
      uint64_t v24 = v24;
    }
    int v36 = v24;
    size_t v25 = v24 + v16;
    unint64_t v26 = (unint64_t)&v19[v24 + v16];
    if (v19) {
      BOOL v27 = v26 > v20;
    }
    else {
      BOOL v27 = 1;
    }
    BOOL v17 = (char *)v18[1];
    if (v27)
    {
      unint64_t v28 = 2LL * v18[4];
      if (v28 <= v25 + 1) {
        unint64_t v28 = v25 + 1;
      }
      v18[4] = v28;
      unint64_t v29 = v28 + 8;
      int v30 = malloc(v28 + 8);
      size_t v31 = (char *)v30 + v29;
      *int v30 = v18[3];
      BOOL v17 = (char *)(v30 + 1);
      uint64_t v18[2] = v31;
      void v18[3] = v30;
    }

    v18[1] = &v17[v25];
    if ((_DWORD)v16)
    {
      memcpy(v17, *(const void **)(a1 + 12728), v16);
      LODWORD(v16) = *(_DWORD *)(a1 + 12740);
      unsigned int v15 = *(_DWORD *)(a1 + 12736);
    }

    size_t v9 = a4;
    unsigned int v10 = a3;
    int v32 = v36;
    _BYTE *v39 = v17;
    goto LABEL_25;
  }

void anonymous namespace'::Remangler::mangleEntityContext( uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  char v7 = *a3;
  *a3 = 1;
  unsigned int v8 = *(unsigned __int16 *)(a2 + 16);
  if (v8 > 0x12 || ((1 << v8) & 0x6E000) == 0)
  {
    switch(*(_WORD *)(a2 + 16))
    {
      case 0:
      case 0x1D:
        break;
      case 1:
        break;
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1E:
      case 0x20:
      case 0x22:
      case 0x23:
      case 0x24:
      case 0x25:
      case 0x26:
      case 0x27:
      case 0x28:
      case 0x29:
      case 0x2A:
      case 0x2B:
      case 0x2C:
      case 0x2D:
      case 0x2E:
      case 0x2F:
      case 0x30:
      case 0x31:
      case 0x34:
      case 0x35:
      case 0x36:
      case 0x37:
      case 0x38:
      case 0x39:
      case 0x3A:
      case 0x3B:
      case 0x3C:
      case 0x3E:
      case 0x3F:
      case 0x40:
      case 0x41:
      case 0x42:
      case 0x43:
      case 0x44:
      case 0x45:
      case 0x48:
      case 0x49:
      case 0x4A:
      case 0x4B:
      case 0x4D:
      case 0x4E:
      case 0x4F:
      case 0x50:
      case 0x51:
      case 0x52:
      case 0x53:
      case 0x54:
      case 0x55:
      case 0x56:
      case 0x57:
      case 0x58:
      case 0x59:
      case 0x5A:
      case 0x5B:
      case 0x5C:
      case 0x5D:
      case 0x5E:
      case 0x5F:
      case 0x60:
      case 0x61:
      case 0x63:
      case 0x65:
      case 0x66:
      case 0x69:
      case 0x6A:
      case 0x6B:
      case 0x6C:
      case 0x6D:
      case 0x6E:
      case 0x6F:
      case 0x70:
      case 0x71:
      case 0x72:
      case 0x73:
      case 0x74:
      case 0x76:
      case 0x77:
      case 0x78:
      case 0x79:
      case 0x7A:
      case 0x7B:
      case 0x7C:
      case 0x7F:
      case 0x80:
      case 0x81:
      case 0x82:
      case 0x83:
      case 0x84:
      case 0x85:
      case 0x86:
      case 0x87:
      case 0x88:
      case 0x89:
      case 0x8A:
      case 0x8B:
      case 0x8C:
      case 0x8E:
      case 0x8F:
      case 0x90:
      case 0x91:
      case 0x92:
      case 0x93:
      case 0x94:
      case 0x95:
      case 0x96:
      case 0x97:
      case 0x9E:
      case 0x9F:
      case 0xA0:
      case 0xA1:
      case 0xA2:
      case 0xA3:
      case 0xA4:
      case 0xA5:
      case 0xA6:
      case 0xAA:
      case 0xAB:
      case 0xAC:
      case 0xAD:
      case 0xAE:
      case 0xAF:
      case 0xB0:
      case 0xB1:
      case 0xB6:
      case 0xB7:
      case 0xB8:
      case 0xB9:
      case 0xBA:
      case 0xBB:
      case 0xBC:
      case 0xBD:
      case 0xBE:
      case 0xBF:
      case 0xC0:
      case 0xC1:
      case 0xC2:
      case 0xC3:
      case 0xC4:
      case 0xC5:
      case 0xC6:
      case 0xC7:
      case 0xC8:
      case 0xC9:
      case 0xCA:
      case 0xCB:
      case 0xCD:
      case 0xCE:
      case 0xCF:
      case 0xD0:
      case 0xD1:
      case 0xD2:
      case 0xD3:
      case 0xD4:
      case 0xD5:
      case 0xD6:
      case 0xD8:
      case 0xD9:
      case 0xDD:
      case 0xDE:
      case 0xDF:
      case 0xE0:
      case 0xE1:
      case 0xE2:
      case 0xE3:
      case 0xE4:
      case 0xE5:
      case 0xE6:
      case 0xE7:
      case 0xE8:
      case 0xEB:
      case 0xEC:
      case 0xED:
      case 0xEE:
      case 0xEF:
      case 0xF0:
      case 0xF1:
      case 0xF2:
      case 0xF3:
      case 0xF4:
      case 0xF5:
      case 0xF6:
      case 0xF7:
      case 0xF8:
      case 0xF9:
      case 0xFC:
      case 0xFD:
      case 0xFF:
      case 0x100:
      case 0x102:
      case 0x103:
      case 0x104:
      case 0x105:
      case 0x106:
      case 0x107:
      case 0x108:
      case 0x109:
      case 0x10A:
      case 0x10B:
      case 0x10C:
      case 0x10D:
      case 0x10E:
      case 0x10F:
      case 0x110:
      case 0x111:
      case 0x112:
      case 0x113:
      case 0x114:
      case 0x115:
      case 0x116:
      case 0x117:
      case 0x118:
      case 0x119:
      case 0x11A:
      case 0x11B:
      case 0x11C:
      case 0x11D:
      case 0x11E:
      case 0x11F:
      case 0x120:
      case 0x121:
      case 0x122:
      case 0x123:
      case 0x124:
      case 0x125:
      case 0x126:
      case 0x127:
      case 0x128:
      case 0x129:
      case 0x12A:
      case 0x12B:
      case 0x12C:
      case 0x12D:
      case 0x12E:
      case 0x12F:
      case 0x130:
      case 0x131:
      case 0x132:
      case 0x133:
      case 0x134:
      case 0x136:
      case 0x137:
      case 0x138:
      case 0x139:
      case 0x13A:
      case 0x13B:
      case 0x13C:
      case 0x13D:
      case 0x13E:
      case 0x13F:
      case 0x141:
      case 0x142:
      case 0x143:
      case 0x144:
      case 0x145:
      case 0x146:
      case 0x147:
      case 0x148:
      case 0x149:
      case 0x14A:
      case 0x14B:
      case 0x14C:
      case 0x14D:
      case 0x14E:
      case 0x14F:
      case 0x150:
      case 0x151:
      case 0x152:
      case 0x153:
      case 0x154:
      case 0x155:
      case 0x156:
      case 0x157:
      case 0x158:
      case 0x159:
      case 0x15A:
      case 0x15B:
      case 0x15C:
      case 0x15D:
      case 0x15E:
      case 0x15F:
      case 0x160:
      case 0x161:
      case 0x162:
        *(_DWORD *)a5 = 23;
        *(void *)(a5 + 8) = a2;
        int v11 = 1438;
        goto LABEL_10;
      case 0x18:
      case 0x3D:
      case 0xA7:
      case 0xDB:
      case 0xEA:
        unsigned int v10 = a4 + 2;
        goto LABEL_6;
      case 0x1F:
        int v12 = a4 + 2;
        unint64_t v13 = "D";
        goto LABEL_26;
      case 0x21:
        break;
      case 0x32:
        int v12 = a4 + 2;
        unint64_t v13 = "d";
        goto LABEL_26;
      case 0x33:
        break;
      case 0x46:
        int v14 = a4 + 2;
        unsigned int v15 = "U";
        goto LABEL_28;
      case 0x47:
        break;
      case 0x4C:
        int v14 = a4 + 2;
        unsigned int v15 = "";
        uint64_t v16 = a5;
        char v17 = 70;
        goto LABEL_54;
      case 0x62:
        break;
      case 0x64:
        break;
      case 0x67:
        int v12 = a4 + 2;
        unint64_t v13 = "e";
        goto LABEL_26;
      case 0x68:
        int v12 = a4 + 2;
        unint64_t v13 = "E";
LABEL_26:
        uint64_t v18 = a5;
        char v19 = 70;
        goto LABEL_43;
      case 0x75:
        int v14 = a4 + 2;
        unsigned int v15 = "u";
LABEL_28:
        uint64_t v16 = a5;
        char v17 = 70;
        size_t v20 = 1LL;
        goto LABEL_55;
      case 0x7D:
        int v12 = a4 + 2;
        unint64_t v13 = "i";
        goto LABEL_42;
      case 0x7E:
        break;
      case 0x8D:
        break;
      case 0x98:
        break;
      case 0x99:
        break;
      case 0x9A:
        break;
      case 0x9B:
        break;
      case 0x9C:
        break;
      case 0x9D:
        break;
      case 0xA8:
        break;
      case 0xA9:
        break;
      case 0xB2:
        int v12 = a4 + 2;
        unint64_t v13 = "P";
        goto LABEL_42;
      case 0xB3:
        int v12 = a4 + 2;
        unint64_t v13 = "W";
LABEL_42:
        uint64_t v18 = a5;
        char v19 = 73;
LABEL_43:
        break;
      case 0xB4:
        break;
      case 0xB5:
        *(_DWORD *)a5 = 7;
        *(void *)(a5 + 8) = a2;
        int v11 = 2803;
        goto LABEL_10;
      case 0xCC:
        break;
      case 0xD7:
        break;
      case 0xDA:
        break;
      case 0xDC:
        break;
      case 0xE9:
        *(_DWORD *)a5 = 7;
        *(void *)(a5 + 8) = a2;
        int v11 = 2797;
        goto LABEL_10;
      case 0xFA:
        break;
      case 0xFB:
        break;
      case 0xFE:
        int v14 = a4 + 2;
        unsigned int v15 = "";
        uint64_t v16 = a5;
        char v17 = 118;
LABEL_54:
        size_t v20 = 0LL;
LABEL_55:
        break;
      case 0x101:
        break;
      case 0x135:
        *(_DWORD *)a5 = 7;
        *(void *)(a5 + 8) = a2;
        int v11 = 2848;
        goto LABEL_10;
      case 0x140:
        swift::Demangle::__runtime::CharVector::append( (char **)(a1 + 12728),  "<autodiff-function>",  0x13uLL,  *(void **)(a1 + 12744));
        *(_DWORD *)a5 = 0;
        *(void *)(a5 + 8) = 0LL;
        *(_DWORD *)(a5 + 16) = 0;
        break;
      default:
        *(_DWORD *)a5 = 4;
        *(void *)(a5 + 8) = a2;
        int v11 = 1447;
LABEL_10:
        *(_DWORD *)(a5 + 16) = v11;
        break;
    }
  }

  else
  {
    unsigned int v10 = a4 + 1;
LABEL_6:
  }

  *a3 = v7;
}

void *anonymous namespace'::Remangler::mangleEntityType@<X0>( void *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  if (*((_WORD *)a2 + 8) != 232)
  {
LABEL_50:
    *(_DWORD *)a4 = 1;
    *(void *)(a4 + 8) = a2;
    int v32 = 1452;
    goto LABEL_51;
  }

  uint64_t v6 = (uint64_t)this;
LABEL_3:
  int v7 = *((unsigned __int8 *)a2 + 18);
  if (v7 != 1)
  {
    if (v7 == 5 && *((_DWORD *)a2 + 2) == 1)
    {
      a2 = (swift::Demangle::__runtime::Node **)*a2;
      goto LABEL_7;
    }

    *(_DWORD *)a4 = 1;
    *(void *)(a4 + 8) = a2;
    int v32 = 1453;
LABEL_51:
    *(_DWORD *)(a4 + 16) = v32;
    return this;
  }

unsigned int *applyParamLabels( swift::Demangle::__runtime::Node *a1, swift::Demangle::__runtime::Node *a2, swift::Demangle::__runtime::NodeFactory *a3)
{
  int v4 = a2;
  int v6 = *((unsigned __int8 *)a1 + 18);
  if ((v6 - 1) < 2 || v6 == 5 && *((_DWORD *)a1 + 2))
  {
    int v7 = (char *)a2 + 16;
    unint64_t Node = swift::Demangle::__runtime::NodeFactory::createNode(a3, *((_WORD *)a2 + 8));
    char v11 = (unsigned int *)Node;
    int v12 = *((unsigned __int8 *)v4 + 18);
    size_t v13 = (char *)v4;
    if ((v12 - 1) >= 2)
    {
      if (v12 == 5)
      {
        int v14 = *(char **)v4;
        size_t v13 = *(char **)v4;
        goto LABEL_12;
      }

      size_t v13 = 0LL;
    }

    switch(v12)
    {
      case 1:
        int v7 = (char *)v4 + 8;
        break;
      case 2:
        break;
      case 5:
        int v14 = *(char **)v4;
LABEL_12:
        int v7 = &v14[8 * *((unsigned int *)v4 + 2)];
        if (v13 == v7) {
          return v11;
        }
LABEL_16:
        unint64_t v52 = v7;
        size_t v53 = (unsigned int *)Node;
        while (1)
        {
          unint64_t v15 = *(void *)v13;
          int v16 = *(unsigned __int16 *)(*(void *)v13 + 16LL);
          if (v16 == 82 || v16 == 65)
          {
            unint64_t v17 = swift::Demangle::__runtime::NodeFactory::createNode(a3, 82);
            unint64_t v18 = (unsigned int *)v17;
            uint64_t v19 = *(unsigned __int8 *)(v15 + 18);
            switch((_DWORD)v19)
            {
              case 1:
                goto LABEL_26;
              case 5:
                uint64_t v19 = *(unsigned int *)(v15 + 8);
                if ((_DWORD)v19) {
                  goto LABEL_26;
                }
                break;
              case 2:
                uint64_t v19 = 2LL;
LABEL_26:
                int v54 = v13;
                unint64_t v20 = 0LL;
                while (2)
                {
                  unint64_t v29 = *(unsigned __int8 *)(v15 + 18);
                  unsigned int v30 = v29 - 1;
                  switch((_DWORD)v29)
                  {
                    case 1:
LABEL_37:
                      if (v29 <= v20) {
                        goto LABEL_42;
                      }
                      break;
                    case 5:
                      break;
                    case 2:
                      unint64_t v29 = 2LL;
                      goto LABEL_37;
                    default:
LABEL_42:
                      unsigned int v28 = 0LL;
LABEL_43:
                      if (*((_WORD *)v28 + 8) != 3) {
                        goto LABEL_32;
                      }
                      int v32 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(a3, 3);
                      int v33 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode( a3,  223);
                      v55[1] = a3;
                      unint64_t v56 = v33;
                      v55[0] = &v56;
                      int v36 = *((unsigned __int8 *)v28 + 18);
                      if (v36 == 5 && v28[2])
                      {
                        unsigned int v28 = *(unsigned int **)v28;
LABEL_48:
                        uint64_t v37 = *(unsigned int **)v28;
                      }

                      else
                      {
                        uint64_t v37 = 0LL;
                      }

                      int v38 = *((unsigned __int8 *)v37 + 18);
                      if ((v38 - 1) < 2)
                      {
LABEL_54:
                        unint64_t v39 = *(unsigned int **)v37;
                      }

                      else
                      {
                        if (v38 == 5 && v37[2])
                        {
                          uint64_t v37 = *(unsigned int **)v37;
                          goto LABEL_54;
                        }

                        unint64_t v39 = 0LL;
                      }

                      if (*((_WORD *)v39 + 8) == 223)
                      {
                        uint64_t v40 = *((unsigned __int8 *)v39 + 18);
                        switch((_DWORD)v40)
                        {
                          case 1:
                            goto LABEL_65;
                          case 5:
                            uint64_t v40 = v39[2];
                            if ((_DWORD)v40) {
                              goto LABEL_65;
                            }
                            break;
                          case 2:
                            uint64_t v40 = 2LL;
LABEL_65:
                            unint64_t v42 = 0LL;
                            while (2)
                            {
                              unint64_t v44 = *((unsigned __int8 *)a1 + 18);
                              unsigned int v45 = v44 - 1;
                              switch((_DWORD)v44)
                              {
                                case 1:
LABEL_72:
                                  if (v44 <= v42) {
                                    goto LABEL_77;
                                  }
                                  break;
                                case 5:
                                  break;
                                case 2:
                                  unint64_t v44 = 2LL;
                                  goto LABEL_72;
                                default:
LABEL_77:
                                  uint64_t v47 = 0LL;
LABEL_78:
                                  unint64_t v48 = *((unsigned __int8 *)v39 + 18);
                                  unsigned int v49 = v48 - 1;
                                  switch((_DWORD)v48)
                                  {
                                    case 1:
LABEL_82:
                                      if (v48 <= v42) {
                                        goto LABEL_66;
                                      }
                                      break;
                                    case 5:
                                      if (v39[2] <= v42) {
                                        goto LABEL_66;
                                      }
                                      break;
                                    case 2:
                                      unint64_t v48 = 2LL;
                                      goto LABEL_82;
                                    default:
LABEL_66:
                                      size_t v43 = 0LL;
LABEL_67:
                                      applyParamLabels(swift::Demangle::__runtime::Node *,swift::Demangle::__runtime::Node *,swift::Demangle::__runtime::NodeFactory &)::$_0::operator() const(swift::Demangle::__runtime::Node *)::{lambda(swift::Demangle::__runtime::Node *,swift::Demangle::__runtime::Node *)#1}::operator()( (uint64_t)v55,  v47,  v43,  v34,  v35);
                                      if (v40 == ++v42) {
                                        goto LABEL_31;
                                      }
                                      continue;
                                  }

                                  size_t v50 = (swift::Demangle::__runtime::Node *)v39;
                                  if (v49 >= 2) {
                                    size_t v50 = *(swift::Demangle::__runtime::Node **)v39;
                                  }
                                  size_t v43 = (swift::Demangle::__runtime::Node **)*((void *)v50 + v42);
                                  goto LABEL_67;
                              }

                              break;
                            }

                            unint64_t v46 = a1;
                            if (v45 >= 2) {
                              unint64_t v46 = *(swift::Demangle::__runtime::Node **)a1;
                            }
                            uint64_t v47 = *((void *)v46 + v42);
                            goto LABEL_78;
                        }

void anonymous namespace'::Remangler::mangleAnyNominalType( uint64_t a1@<X0>, swift::Demangle::__runtime *a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v5 = (uint64_t)a2;
  if (a4 >= 0x401)
  {
    *(_DWORD *)a5 = 3;
    *(void *)(a5 + 8) = a2;
    *(_DWORD *)(a5 + 16) = 2336;
    return;
  }

  if (!swift::Demangle::__runtime::isSpecialized(a2, a2))
  {
    unsigned int v16 = *(unsigned __int16 *)(v5 + 16);
    if (v16 <= 0xDA)
    {
      switch(v16)
      {
        case 0x18u:
          __int128 v35 = 0uLL;
          LOBYTE(v36) = 0;
            goto LABEL_58;
          break;
        case 0x3Du:
          __int128 v35 = 0uLL;
          LOBYTE(v36) = 0;
            goto LABEL_58;
          break;
        case 0xA7u:
          __int128 v35 = 0uLL;
          LOBYTE(v36) = 0;
          {
            int v17 = a4 + 2;
            Dl_info __s = "_UnknownTypeKind";
            std::string::size_type v32 = 16LL;
LABEL_47:
            break;
          }

          goto LABEL_58;
        default:
          goto LABEL_54;
      }

      if (*(_DWORD *)a5) {
        return;
      }
      swift::Demangle::__runtime::RemanglerBase::addSubstitution( (char *)a1,  (const swift::Demangle::__runtime::SubstitutionEntry *)&v35);
      goto LABEL_58;
    }

    if (v16 == 219)
    {
      __int128 v35 = 0uLL;
      LOBYTE(v36) = 0;
      {
        int v17 = a4 + 2;
        Dl_info __s = 0LL;
        std::string::size_type v32 = 0LL;
        goto LABEL_47;
      }

double anonymous namespace'::Remangler::mangleAnonymousContext@<D0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v6 = (const void **)a2;
  int v8 = *(unsigned __int8 *)(a2 + 18);
  uint64_t v9 = (void *)a2;
  if (v8 == 2) {
    goto LABEL_5;
  }
  if (v8 == 5 && *(_DWORD *)(a2 + 8) >= 2u)
  {
    uint64_t v9 = *(void **)a2;
LABEL_5:
    uint64_t v10 = v9[1];
    goto LABEL_7;
  }

  uint64_t v10 = 0LL;
LABEL_7:
  if (*(_DWORD *)a5) {
    return result;
  }
  int v12 = *(const void **)*v6;
  if (v12)
  {
    size_t v13 = *((void *)*v6 + 1);
    if (v13 >= 0x7FFFFFFFFFFFFFF8LL) {
      abort();
    }
    if (v13 >= 0x17)
    {
      uint64_t v15 = (v13 & 0xFFFFFFFFFFFFFFF8LL) + 8;
      if ((v13 | 7) != 0x17) {
        uint64_t v15 = v13 | 7;
      }
      uint64_t v16 = v15 + 1;
      p_dst = (__int128 *)operator new(v15 + 1);
      *((void *)&__dst + 1) = v13;
      unint64_t v19 = v16 | 0x8000000000000000LL;
      *(void *)&__int128 __dst = p_dst;
    }

    else
    {
      HIBYTE(v19) = v13;
      p_dst = &__dst;
      if (!v13) {
        goto LABEL_20;
      }
    }

    memmove(p_dst, v12, v13);
LABEL_20:
    *((_BYTE *)p_dst + v13) = 0;
    goto LABEL_21;
  }

  __int128 __dst = 0uLL;
  unint64_t v19 = 0LL;
LABEL_21:
  int v17 = (void **)(a3 + 8);
  double result = *(double *)&__dst;
  *(_OWORD *)int v17 = __dst;
  *(void *)(a3 + 24) = v19;
  *(_DWORD *)a5 = 0;
  *(void *)(a5 + 8) = 0LL;
  *(_DWORD *)(a5 + 16) = 0;
  return result;
}

void *anonymous namespace'::Remangler::mangleDidSet@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v5 = *((unsigned __int8 *)a2 + 18);
  if ((v5 - 1) >= 2)
  {
    if (v5 != 5 || !*((_DWORD *)a2 + 2))
    {
      int v6 = 0LL;
    }

    a2 = (uint64_t *)*a2;
  }

  int v6 = (uint64_t *)*a2;
}

void *anonymous namespace'::Remangler::mangleExtension@<X0>( void *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v6 = a3;
  int v7 = a2;
  int v8 = result;
  int v10 = *((unsigned __int8 *)a2 + 18);
  if (v10 == 2) {
    goto LABEL_7;
  }
  if (v10 != 5)
  {
LABEL_10:
    *(_DWORD *)a5 = 1;
    *(void *)(a5 + 8) = a2;
    *(_DWORD *)(a5 + 16) = 2131;
    return result;
  }

  int v11 = *((_DWORD *)a2 + 2);
  if (v11 == 2)
  {
LABEL_7:
    int v12 = result + 1592;
    unsigned int v13 = *((_DWORD *)result + 3184);
    size_t v17 = *((unsigned int *)result + 3185);
    uint64_t v15 = (char *)result[1591];
    if (v13 < v17)
    {
LABEL_27:
      char v16 = 69;
      goto LABEL_28;
    }

    int v18 = (void *)result[1593];
    unint64_t v19 = (char *)v18[1];
    if (&v15[v17] == v19)
    {
      unint64_t v21 = (unint64_t)&v15[v17 + 1];
      unint64_t v20 = v18[2];
      if (v21 <= v20)
      {
        v18[1] = v21;
        LODWORD(v22) = 1;
LABEL_26:
        *((_DWORD *)v8 + 3185) = v17 + v22;
        goto LABEL_27;
      }
    }

    else
    {
      unint64_t v20 = v18[2];
    }

    unint64_t v46 = result + 1592;
    else {
      uint64_t v22 = (2 * v17);
    }
    size_t v23 = v22 + v17;
    if (v19) {
      BOOL v24 = (unint64_t)&v19[v22 + v17] > v20;
    }
    else {
      BOOL v24 = 1;
    }
    uint64_t v15 = (char *)v18[1];
    if (v24)
    {
      unint64_t v25 = 2LL * v18[4];
      if (v25 <= v23 + 1) {
        unint64_t v25 = v23 + 1;
      }
      v18[4] = v25;
      unint64_t v26 = v25 + 8;
      unsigned int v27 = malloc(v25 + 8);
      unsigned int v28 = (char *)v27 + v26;
      *unsigned int v27 = v18[3];
      uint64_t v15 = (char *)(v27 + 1);
      uint64_t v18[2] = v28;
      void v18[3] = v27;
    }

    v18[1] = &v15[v23];
    if ((_DWORD)v17)
    {
      memcpy(v15, (const void *)v8[1591], v17);
      LODWORD(vmemset(&v11, 0, 17) = *((_DWORD *)v8 + 3185);
      unsigned int v13 = *((_DWORD *)v8 + 3184);
    }

    uint64_t v6 = a3;
    int v12 = v46;
    v8[1591] = v15;
    goto LABEL_26;
  }

  if (v11 != 3) {
    goto LABEL_10;
  }
  int v12 = result + 1592;
  unsigned int v13 = *((_DWORD *)result + 3184);
  size_t v14 = *((unsigned int *)result + 3185);
  uint64_t v15 = (char *)result[1591];
  if (v13 < v14)
  {
    char v16 = 101;
    goto LABEL_28;
  }

  std::string::size_type v32 = (void *)result[1593];
  uint64_t v33 = (char *)v32[1];
  if (&v15[v14] != v33)
  {
    unint64_t v34 = v32[2];
LABEL_43:
    LODWORD(v36) = 2 * v14;
    else {
      uint64_t v36 = v36;
    }
    int v45 = v36;
    size_t v37 = v36 + v14;
    if (!v33 || (unint64_t)&v33[v37] > v34)
    {
      unint64_t v38 = 2LL * v32[4];
      if (v38 <= v37 + 1) {
        unint64_t v38 = v37 + 1;
      }
      void v32[4] = v38;
      unint64_t v39 = v38 + 8;
      uint64_t v40 = v32;
      int v41 = malloc(v38 + 8);
      std::string::size_type v32 = v40;
      int v12 = v8 + 1592;
      void *v41 = v40[3];
      uint64_t v33 = (char *)(v41 + 1);
      v32[2] = (char *)v41 + v39;
      void v32[3] = v41;
    }

    v32[1] = &v33[v37];
    if ((_DWORD)v14)
    {
      unint64_t v42 = v12;
      memcpy(v33, (const void *)v8[1591], v14);
      int v12 = v42;
      LODWORD(v14) = *((_DWORD *)v8 + 3185);
      unsigned int v13 = *((_DWORD *)v8 + 3184);
    }

    int v43 = v45;
    v8[1591] = v33;
    uint64_t v15 = v33;
    goto LABEL_55;
  }

  unint64_t v35 = (unint64_t)&v15[v14 + 1];
  unint64_t v34 = v32[2];
  if (v35 > v34) {
    goto LABEL_43;
  }
  v32[1] = v35;
  int v43 = 1;
LABEL_55:
  *((_DWORD *)v8 + 3185) = v14 + v43;
  char v16 = 101;
LABEL_28:
  *int v12 = v13 + 1;
  v15[v13] = v16;
  int v29 = v7;
  uint64_t v30 = (a4 + 1);
  if (!*(_DWORD *)a5)
  {
    int v31 = *((unsigned __int8 *)v7 + 18);
    if (v31 == 5)
    {
      if (*((_DWORD *)v7 + 2) != 3) {
        goto LABEL_37;
      }
      if (*(_DWORD *)a5) {
        return result;
      }
      int v31 = *((unsigned __int8 *)v7 + 18);
    }

void *anonymous namespace'::Remangler::mangleGetter@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v5 = *((unsigned __int8 *)a2 + 18);
  if ((v5 - 1) >= 2)
  {
    if (v5 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v6 = 0LL;
    }

    a2 = (uint64_t *)*a2;
  }

  uint64_t v6 = (uint64_t *)*a2;
}

void *anonymous namespace'::Remangler::mangleGlobalGetter@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v5 = *((unsigned __int8 *)a2 + 18);
  if ((v5 - 1) >= 2)
  {
    if (v5 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v6 = 0LL;
    }

    a2 = (uint64_t *)*a2;
  }

  uint64_t v6 = (uint64_t *)*a2;
}

void *anonymous namespace'::Remangler::mangleInitAccessor@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v5 = *((unsigned __int8 *)a2 + 18);
  if ((v5 - 1) >= 2)
  {
    if (v5 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v6 = 0LL;
    }

    a2 = (uint64_t *)*a2;
  }

  uint64_t v6 = (uint64_t *)*a2;
}

void *anonymous namespace'::Remangler::mangleMaterializeForSet@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v5 = *((unsigned __int8 *)a2 + 18);
  if ((v5 - 1) >= 2)
  {
    if (v5 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v6 = 0LL;
    }

    a2 = (uint64_t *)*a2;
  }

  uint64_t v6 = (uint64_t *)*a2;
}

void *anonymous namespace'::Remangler::mangleModifyAccessor@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v5 = *((unsigned __int8 *)a2 + 18);
  if ((v5 - 1) >= 2)
  {
    if (v5 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v6 = 0LL;
    }

    a2 = (uint64_t *)*a2;
  }

  uint64_t v6 = (uint64_t *)*a2;
}

char *anonymous namespace'::Remangler::mangleModule@<X0>( uint64_t a1@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, _BYTE *a3@<X2>, uint64_t a4@<X8>)
{
  v24[0] = 0LL;
  v24[1] = 0LL;
  char v25 = 0;
  if ((result & 1) == 0)
  {
    if (*a3)
    {
LABEL_24:
      size_t v23 = *(const void **)a2;
      unint64_t v22 = *((void *)a2 + 1);
      swift::Demangle::__runtime::CharVector::append( (unsigned int *)(a1 + 12728),  v22,  *(swift::Demangle::__runtime::NodeFactory **)(a1 + 12744));
      swift::Demangle::__runtime::CharVector::append((char **)(a1 + 12728), v23, v22, *(void **)(a1 + 12744));
      double result = swift::Demangle::__runtime::RemanglerBase::addSubstitution( (char *)a1,  (const swift::Demangle::__runtime::SubstitutionEntry *)v24);
      goto LABEL_25;
    }

    unsigned int v9 = *(_DWORD *)(a1 + 12736);
    size_t v10 = *(unsigned int *)(a1 + 12740);
    int v11 = *(_BYTE **)(a1 + 12728);
    if (v9 < v10)
    {
LABEL_23:
      *(_DWORD *)(a1 + 12736) = v9 + 1;
      v11[v9] = 77;
      goto LABEL_24;
    }

    int v12 = *(void **)(a1 + 12744);
    unsigned int v13 = (_BYTE *)v12[1];
    if (&v11[v10] == v13)
    {
      unint64_t v15 = (unint64_t)&v11[v10 + 1];
      unint64_t v14 = v12[2];
      if (v15 <= v14)
      {
        v12[1] = v15;
        LODWORD(v16) = 1;
LABEL_22:
        *(_DWORD *)(a1 + 1274printNode(&v3, this, 0) = v10 + v16;
        goto LABEL_23;
      }
    }

    else
    {
      unint64_t v14 = v12[2];
    }

    else {
      uint64_t v16 = (2 * v10);
    }
    size_t v17 = v16 + v10;
    if (v13) {
      BOOL v18 = (unint64_t)&v13[v16 + v10] > v14;
    }
    else {
      BOOL v18 = 1;
    }
    int v11 = (_BYTE *)v12[1];
    if (v18)
    {
      unint64_t v19 = 2LL * v12[4];
      if (v19 <= v17 + 1) {
        unint64_t v19 = v17 + 1;
      }
      _OWORD v12[4] = v19;
      unint64_t v20 = v19 + 8;
      unint64_t v21 = malloc(v19 + 8);
      *unint64_t v21 = v12[3];
      int v11 = v21 + 1;
      v12[2] = (char *)v21 + v20;
      void v12[3] = v21;
    }

    v12[1] = &v11[v17];
    if ((_DWORD)v10)
    {
      memcpy(v11, *(const void **)(a1 + 12728), v10);
      LODWORD(v1printNode(&v3, this, 0) = *(_DWORD *)(a1 + 12740);
      unsigned int v9 = *(_DWORD *)(a1 + 12736);
    }

    *(void *)(a1 + 12728) = v11;
    goto LABEL_22;
  }

void *anonymous namespace'::Remangler::mangleNativeOwningAddressor@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v5 = *((unsigned __int8 *)a2 + 18);
  if ((v5 - 1) >= 2)
  {
    if (v5 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v6 = 0LL;
    }

    a2 = (uint64_t *)*a2;
  }

  uint64_t v6 = (uint64_t *)*a2;
}

void *anonymous namespace'::Remangler::mangleNativeOwningMutableAddressor@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v5 = *((unsigned __int8 *)a2 + 18);
  if ((v5 - 1) >= 2)
  {
    if (v5 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v6 = 0LL;
    }

    a2 = (uint64_t *)*a2;
  }

  uint64_t v6 = (uint64_t *)*a2;
}

void *anonymous namespace'::Remangler::mangleNativePinningAddressor@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v5 = *((unsigned __int8 *)a2 + 18);
  if ((v5 - 1) >= 2)
  {
    if (v5 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v6 = 0LL;
    }

    a2 = (uint64_t *)*a2;
  }

  uint64_t v6 = (uint64_t *)*a2;
}

void *anonymous namespace'::Remangler::mangleNativePinningMutableAddressor@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v5 = *((unsigned __int8 *)a2 + 18);
  if ((v5 - 1) >= 2)
  {
    if (v5 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v6 = 0LL;
    }

    a2 = (uint64_t *)*a2;
  }

  uint64_t v6 = (uint64_t *)*a2;
}

void *anonymous namespace'::Remangler::mangleOwningAddressor@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v5 = *((unsigned __int8 *)a2 + 18);
  if ((v5 - 1) >= 2)
  {
    if (v5 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v6 = 0LL;
    }

    a2 = (uint64_t *)*a2;
  }

  uint64_t v6 = (uint64_t *)*a2;
}

void *anonymous namespace'::Remangler::mangleOwningMutableAddressor@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v5 = *((unsigned __int8 *)a2 + 18);
  if ((v5 - 1) >= 2)
  {
    if (v5 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v6 = 0LL;
    }

    a2 = (uint64_t *)*a2;
  }

  uint64_t v6 = (uint64_t *)*a2;
}

void *anonymous namespace'::Remangler::mangleReadAccessor@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v5 = *((unsigned __int8 *)a2 + 18);
  if ((v5 - 1) >= 2)
  {
    if (v5 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v6 = 0LL;
    }

    a2 = (uint64_t *)*a2;
  }

  uint64_t v6 = (uint64_t *)*a2;
}

void *anonymous namespace'::Remangler::mangleSetter@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v5 = *((unsigned __int8 *)a2 + 18);
  if ((v5 - 1) >= 2)
  {
    if (v5 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v6 = 0LL;
    }

    a2 = (uint64_t *)*a2;
  }

  uint64_t v6 = (uint64_t *)*a2;
}

uint64_t anonymous namespace'::Remangler::mangleStatic(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  unsigned int v7 = *(_DWORD *)(a1 + 12736);
  size_t v8 = *(unsigned int *)(a1 + 12740);
  unsigned int v9 = *(char **)(a1 + 12728);
  if (v7 >= v8)
  {
    size_t v10 = *(void **)(a1 + 12744);
    int v11 = (char *)v10[1];
    if (&v9[v8] == v11)
    {
      unint64_t v13 = (unint64_t)&v9[v8 + 1];
      unint64_t v12 = v10[2];
      if (v13 <= v12)
      {
        v10[1] = v13;
        LODWORD(v14) = 1;
LABEL_20:
        *(_DWORD *)(a1 + 1274printNode(&v3, this, 0) = v8 + v14;
        goto LABEL_21;
      }
    }

    else
    {
      unint64_t v12 = v10[2];
    }

    uint64_t v24 = a3;
    else {
      uint64_t v14 = (2 * v8);
    }
    size_t v15 = v14 + v8;
    if (v11) {
      BOOL v16 = (unint64_t)&v11[v14 + v8] > v12;
    }
    else {
      BOOL v16 = 1;
    }
    unsigned int v9 = (char *)v10[1];
    if (v16)
    {
      unint64_t v17 = 2LL * v10[4];
      if (v17 <= v15 + 1) {
        unint64_t v17 = v15 + 1;
      }
      _OWORD v10[4] = v17;
      unint64_t v18 = v17 + 8;
      unint64_t v19 = malloc(v17 + 8);
      unint64_t v20 = (char *)v19 + v18;
      void *v19 = v10[3];
      unsigned int v9 = (char *)(v19 + 1);
      void v10[2] = v20;
      void v10[3] = v19;
    }

    v10[1] = &v9[v15];
    if ((_DWORD)v8)
    {
      memcpy(v9, *(const void **)(a1 + 12728), v8);
      LODWORD(v8) = *(_DWORD *)(a1 + 12740);
      unsigned int v7 = *(_DWORD *)(a1 + 12736);
    }

    a3 = v24;
    *(void *)(a1 + 12728) = v9;
    goto LABEL_20;
  }

void *anonymous namespace'::Remangler::mangleSubscript@<X0>( void *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  unsigned int v7 = a2;
  size_t v8 = result;
  int v10 = *((unsigned __int8 *)a2 + 18);
  if (v10 != 2 && (v10 != 5 || *((_DWORD *)a2 + 2) < 2u))
  {
    int v17 = 1071;
    int v18 = 1;
    goto LABEL_8;
  }

  unsigned int v11 = *((_DWORD *)result + 3184);
  size_t v12 = *((unsigned int *)result + 3185);
  unint64_t v13 = (char *)result[1591];
  if (v11 >= v12)
  {
    uint64_t v14 = (void *)result[1593];
    size_t v15 = (char *)v14[1];
    if (&v13[v12] == v15)
    {
      unint64_t v19 = (unint64_t)&v13[v12 + 1];
      unint64_t v16 = v14[2];
      if (v19 <= v16)
      {
        v14[1] = v19;
        int v28 = 1;
LABEL_24:
        *((_DWORD *)v8 + 3185) = v12 + v28;
        goto LABEL_25;
      }
    }

    else
    {
      unint64_t v16 = v14[2];
    }

    LODWORD(v2printNode(&v3, this, 0) = 2 * v12;
    else {
      uint64_t v20 = v20;
    }
    int v41 = v20;
    size_t v21 = v20 + v12;
    unint64_t v22 = (unint64_t)&v15[v20 + v12];
    if (v15) {
      BOOL v23 = v22 > v16;
    }
    else {
      BOOL v23 = 1;
    }
    unint64_t v13 = (char *)v14[1];
    if (v23)
    {
      unint64_t v24 = 2LL * v14[4];
      if (v24 <= v21 + 1) {
        unint64_t v24 = v21 + 1;
      }
      uint64_t v14[4] = v24;
      unint64_t v25 = v24 + 8;
      unint64_t v26 = malloc(v24 + 8);
      unsigned int v27 = (char *)v26 + v25;
      void *v26 = v14[3];
      unint64_t v13 = (char *)(v26 + 1);
      void v14[2] = v27;
      void v14[3] = v26;
    }

    v14[1] = &v13[v21];
    if ((_DWORD)v12)
    {
      memcpy(v13, (const void *)v8[1591], v12);
      LODWORD(v12) = *((_DWORD *)v8 + 3185);
      unsigned int v11 = *((_DWORD *)v8 + 3184);
    }

    int v28 = v41;
    v8[1591] = v13;
    goto LABEL_24;
  }

void *anonymous namespace'::Remangler::mangleUnsafeAddressor@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v5 = *((unsigned __int8 *)a2 + 18);
  if ((v5 - 1) >= 2)
  {
    if (v5 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v6 = 0LL;
    }

    a2 = (uint64_t *)*a2;
  }

  uint64_t v6 = (uint64_t *)*a2;
}

void *anonymous namespace'::Remangler::mangleUnsafeMutableAddressor@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v5 = *((unsigned __int8 *)a2 + 18);
  if ((v5 - 1) >= 2)
  {
    if (v5 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v6 = 0LL;
    }

    a2 = (uint64_t *)*a2;
  }

  uint64_t v6 = (uint64_t *)*a2;
}

void *anonymous namespace'::Remangler::mangleWillSet@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v5 = *((unsigned __int8 *)a2 + 18);
  if ((v5 - 1) >= 2)
  {
    if (v5 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v6 = 0LL;
    }

    a2 = (uint64_t *)*a2;
  }

  uint64_t v6 = (uint64_t *)*a2;
}

void *anonymous namespace'::Remangler::mangleGenericArgs@<X0>( void *result@<X0>, uint64_t *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v5 = a2;
  uint64_t v6 = result;
  size_t v8 = 0LL;
  int v9 = 0;
  int v10 = *((unsigned __int16 *)a2 + 8);
  int v11 = 0;
  switch(*((_WORD *)a2 + 8))
  {
    case 0xD:
    case 0xE:
    case 0xF:
      int v12 = *((unsigned __int8 *)a2 + 18);
      unint64_t v13 = (uint64_t **)a2;
      if (v12 == 5 && *((_DWORD *)a2 + 2))
      {
        unint64_t v13 = (uint64_t **)*a2;
LABEL_6:
        size_t v8 = *v13;
      }

      else
      {
        size_t v8 = 0LL;
      }

      if (*((_WORD *)v8 + 8) != 232)
      {
        int v11 = 2311;
        int v9 = 1;
        goto LABEL_99;
      }

      int v18 = *((unsigned __int8 *)v8 + 18);
      if (v18 == 5 && *((_DWORD *)v8 + 2))
      {
        size_t v8 = (uint64_t *)*v8;
LABEL_25:
        unint64_t v19 = (uint64_t *)*v8;
      }

      else
      {
        unint64_t v19 = 0LL;
      }

      int v27 = *((unsigned __int8 *)v19 + 18);
      if (v27 == 5 && *((_DWORD *)v19 + 2))
      {
        unint64_t v19 = (uint64_t *)*v19;
LABEL_40:
        int v28 = (uint64_t *)*v19;
      }

      else
      {
        int v28 = 0LL;
      }

      if (*(_DWORD *)a4) {
        return result;
      }
      int v29 = *((unsigned __int8 *)v5 + 18);
      if (v29 == 2) {
        goto LABEL_47;
      }
      if (v29 == 5 && *((_DWORD *)v5 + 2) >= 2u)
      {
        int v5 = (uint64_t *)*v5;
LABEL_47:
        uint64_t v30 = v5[1];
      }

      else
      {
        uint64_t v30 = 0LL;
      }

      int v31 = *(unsigned __int8 *)(v30 + 18);
      uint64_t v32 = (swift::Demangle::__runtime::Node **)v30;
      if (v31 == 5)
      {
        uint64_t v33 = *(swift::Demangle::__runtime::Node **)v30;
        uint64_t v32 = *(swift::Demangle::__runtime::Node ***)v30;
LABEL_69:
        uint64_t v40 = (swift::Demangle::__runtime::Node **)((char *)v33 + 8 * *(unsigned int *)(v30 + 8));
        goto LABEL_73;
      }

      uint64_t v32 = 0LL;
LABEL_65:
      switch(v31)
      {
        case 1:
          uint64_t v40 = (swift::Demangle::__runtime::Node **)(v30 + 8);
          break;
        case 2:
          uint64_t v40 = (swift::Demangle::__runtime::Node **)(v30 + 16);
          break;
        case 5:
          uint64_t v33 = *(swift::Demangle::__runtime::Node **)v30;
          goto LABEL_69;
        default:
          uint64_t v40 = 0LL;
          break;
      }

void anonymous namespace'::Remangler::mangleNominalType( char *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, int a5@<W4>, std::string::value_type *a6@<X5>, std::string::size_type a7@<X6>, uint64_t a8@<X8>)
{
  unint64_t v13 = (uint64_t *)a2;
  v17[0] = 0LL;
  v17[1] = 0LL;
  char v18 = 0;
  if (*(_WORD *)(a2 + 16) == 232)
  {
    int v16 = *(unsigned __int8 *)(a2 + 18);
    if ((v16 - 1) < 2)
    {
LABEL_6:
      unint64_t v13 = (uint64_t *)*v13;
      goto LABEL_8;
    }

    if (v16 == 5 && *(_DWORD *)(a2 + 8))
    {
      unint64_t v13 = *(uint64_t **)a2;
      goto LABEL_6;
    }

    unint64_t v13 = 0LL;
  }

uint64_t anonymous namespace'::Remangler::trySubstitution( _anonymous_namespace_::Remangler *this, swift::Demangle::__runtime::Node *a2, swift::Demangle::__runtime::SubstitutionEntry *a3)
{
  *(_OWORD *)a3 = v22;
  *((_BYTE *)a3 + 16) = v23;
  unsigned int Substitution = swift::Demangle::__runtime::RemanglerBase::findSubstitution( this,  (swift::Demangle::__runtime::Node **)a3);
  if ((Substitution & 0x80000000) != 0) {
    return 0LL;
  }
  unsigned int v7 = Substitution;
  unsigned int v8 = *((_DWORD *)this + 3184);
  size_t v9 = *((unsigned int *)this + 3185);
  int v10 = (char *)*((void *)this + 1591);
  if (v8 >= v9)
  {
    int v11 = (void *)*((void *)this + 1593);
    int v12 = (char *)v11[1];
    if (&v10[v9] == v12)
    {
      unint64_t v15 = (unint64_t)&v10[v9 + 1];
      unint64_t v13 = v11[2];
      if (v15 <= v13)
      {
        v11[1] = v15;
        LODWORD(v16) = 1;
LABEL_22:
        *((_DWORD *)this + 3185) = v9 + v16;
        goto LABEL_23;
      }
    }

    else
    {
      unint64_t v13 = v11[2];
    }

    else {
      uint64_t v16 = (2 * v9);
    }
    size_t v17 = v16 + v9;
    if (v12) {
      BOOL v18 = (unint64_t)&v12[v16 + v9] > v13;
    }
    else {
      BOOL v18 = 1;
    }
    int v10 = (char *)v11[1];
    if (v18)
    {
      unint64_t v19 = 2LL * v11[4];
      if (v19 <= v17 + 1) {
        unint64_t v19 = v17 + 1;
      }
      v11[4] = v19;
      unint64_t v20 = v19 + 8;
      unsigned int v21 = malloc(v19 + 8);
      *unsigned int v21 = v11[3];
      int v10 = (char *)(v21 + 1);
      void v11[2] = (char *)v21 + v20;
      void v11[3] = v21;
    }

    v11[1] = &v10[v17];
    if ((_DWORD)v9)
    {
      memcpy(v10, *((const void **)this + 1591), v9);
      LODWORD(v9) = *((_DWORD *)this + 3185);
      unsigned int v8 = *((_DWORD *)this + 3184);
    }

    *((void *)this + 1591) = v10;
    goto LABEL_22;
  }

void anonymous namespace'::Remangler::mangleNamedEntity( uint64_t a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, const void *a4@<X3>, size_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X8>, std::string::value_type *__s, std::string::size_type a10)
{
  size_t v11 = a5;
  int v12 = a4;
  char v13 = a3;
  int v14 = a2;
  int v17 = *((unsigned __int8 *)a2 + 18);
  if (v17 != 2 && (v17 != 5 || *((_DWORD *)a2 + 2) != 2))
  {
    *(_DWORD *)a8 = 1;
    *(void *)(a8 + 8) = a2;
    *(_DWORD *)(a8 + 16) = 1349;
    return;
  }

  if (a3)
  {
    unsigned int v18 = *(_DWORD *)(a1 + 12736);
    size_t v19 = *(unsigned int *)(a1 + 12740);
    unint64_t v20 = *(_BYTE **)(a1 + 12728);
    if (v18 < v19)
    {
LABEL_25:
      *(_DWORD *)(a1 + 12736) = v18 + 1;
      v20[v18] = v13;
      int v17 = *((unsigned __int8 *)v14 + 18);
      int v12 = a4;
      goto LABEL_26;
    }

    unsigned int v21 = *(void **)(a1 + 12744);
    __int128 v22 = (_BYTE *)v21[1];
    if (&v20[v19] == v22)
    {
      unint64_t v24 = (unint64_t)&v20[v19 + 1];
      unint64_t v23 = v21[2];
      if (v24 <= v23)
      {
        v21[1] = v24;
        int v31 = 1;
        size_t v11 = a5;
LABEL_24:
        *(_DWORD *)(a1 + 1274printNode(&v3, this, 0) = v19 + v31;
        goto LABEL_25;
      }
    }

    else
    {
      unint64_t v23 = v21[2];
    }

    int v55 = a7;
    LODWORD(v25) = 2 * v19;
    else {
      uint64_t v25 = v25;
    }
    int v54 = v25;
    size_t v26 = v25 + v19;
    unint64_t v27 = (unint64_t)&v22[v25 + v19];
    if (v22) {
      BOOL v28 = v27 > v23;
    }
    else {
      BOOL v28 = 1;
    }
    unint64_t v20 = (_BYTE *)v21[1];
    if (v28)
    {
      unint64_t v29 = 2LL * v21[4];
      if (v29 <= v26 + 1) {
        unint64_t v29 = v26 + 1;
      }
      v21[4] = v29;
      unint64_t v53 = v29 + 8;
      uint64_t v30 = malloc(v29 + 8);
      *uint64_t v30 = v21[3];
      unint64_t v20 = v30 + 1;
      void v21[2] = (char *)v30 + v53;
      void v21[3] = v30;
    }

    v21[1] = &v20[v26];
    if ((_DWORD)v19)
    {
      memcpy(v20, *(const void **)(a1 + 12728), v19);
      LODWORD(v19) = *(_DWORD *)(a1 + 12740);
      unsigned int v18 = *(_DWORD *)(a1 + 12736);
    }

    size_t v11 = a5;
    a7 = v55;
    int v31 = v54;
    *(void *)(a1 + 12728) = v20;
    goto LABEL_24;
  }

uint64_t anonymous namespace'::Remangler::mangleStandardSubstitution( char **this, swift::Demangle::__runtime::Node *a2)
{
  int v2 = *((unsigned __int16 *)a2 + 8);
  if (v2 == 61)
  {
    int v10 = *((unsigned __int8 *)a2 + 18);
    size_t v11 = a2;
    if ((v10 - 1) >= 2)
    {
      if (v10 != 5 || !*((_DWORD *)a2 + 2))
      {
        int v12 = 0LL;
        goto LABEL_24;
      }

      size_t v11 = *(swift::Demangle::__runtime::Node **)a2;
    }

    int v12 = *(uint64_t **)v11;
LABEL_24:
    if (*((_WORD *)v12 + 8) != 153 || v12[1] != 5) {
      return 0LL;
    }
    uint64_t v16 = (int *)*v12;
    int v17 = *v16;
    int v18 = *((unsigned __int8 *)v16 + 4);
    if (v17 != 1718187859 || v18 != 116) {
      return 0LL;
    }
    if (v10 == 5)
    {
      unint64_t v20 = *(swift::Demangle::__runtime::Node **)a2;
      if (*(_WORD *)(*(void *)(*(void *)a2 + 8LL) + 16LL) != 101) {
        return 0LL;
      }
    }

    else
    {
      unint64_t v20 = a2;
      if (*(_WORD *)(*((void *)a2 + 1) + 16LL) != 101) {
        return 0LL;
      }
    }

    uint64_t v33 = *((void *)v20 + 1);
    if (*(void *)(v33 + 8) == 8LL && **(void **)v33 == 0x6C616E6F6974704FLL)
    {
      unsigned int v8 = "Sq";
    }

    else
    {
      if (v10 == 5) {
        a2 = *(swift::Demangle::__runtime::Node **)a2;
      }
      uint64_t v34 = *((void *)a2 + 1);
      if (*(void *)(v34 + 8) != 27LL) {
        return 0LL;
      }
      uint64_t v35 = *(uint64_t **)v34;
      uint64_t v36 = *v35;
      uint64_t v37 = v35[1];
      uint64_t v38 = v35[2];
      uint64_t v39 = *(uint64_t *)((char *)v35 + 19);
      BOOL v40 = v36 == 0x746963696C706D49LL && v37 == 0x706172776E55796CLL;
      BOOL v41 = v40 && v38 == 0x6F6974704F646570LL;
      if (!v41 || v39 != 0x6C616E6F6974704FLL) {
        return 0LL;
      }
      unsigned int v8 = "SQ";
    }

    goto LABEL_57;
  }

  if (v2 == 219)
  {
    int v13 = *((unsigned __int8 *)a2 + 18);
    int v14 = a2;
    if ((v13 - 1) >= 2)
    {
      if (v13 != 5 || !*((_DWORD *)a2 + 2))
      {
        unint64_t v15 = 0LL;
        goto LABEL_35;
      }

      int v14 = *(swift::Demangle::__runtime::Node **)a2;
    }

    unint64_t v15 = *(uint64_t **)v14;
LABEL_35:
    if (*((_WORD *)v15 + 8) != 153 || v15[1] != 5) {
      return 0LL;
    }
    unsigned int v21 = (int *)*v15;
    int v22 = *v21;
    int v23 = *((unsigned __int8 *)v21 + 4);
    if (v22 != 1718187859 || v23 != 116) {
      return 0LL;
    }
    if (v13 == 5)
    {
      uint64_t v25 = *(swift::Demangle::__runtime::Node **)a2;
      if (*(_WORD *)(*(void *)(*(void *)a2 + 8LL) + 16LL) != 101) {
        return 0LL;
      }
    }

    else
    {
      uint64_t v25 = a2;
      if (*(_WORD *)(*((void *)a2 + 1) + 16LL) != 101) {
        return 0LL;
      }
    }

    int v43 = (int **)*((void *)v25 + 1);
    if (v43[1] == (int *)5
      && ((v44 = *v43, int v45 = *v44, v46 = *((unsigned __int8 *)v44 + 4), v45 == 1634890305)
        ? (BOOL v47 = v46 == 121)
        : (BOOL v47 = 0),
          v47))
    {
      unsigned int v8 = "Sa";
    }

    else
    {
      unint64_t v48 = a2;
      if (v13 == 5) {
        unint64_t v48 = *(swift::Demangle::__runtime::Node **)a2;
      }
      uint64_t v49 = *((void *)v48 + 1);
      if (*(void *)(v49 + 8) == 4LL && **(_DWORD **)v49 == 1819242306)
      {
        unsigned int v8 = "Sb";
      }

      else
      {
        int v50 = a2;
        if (v13 == 5) {
          int v50 = *(swift::Demangle::__runtime::Node **)a2;
        }
        uint64_t v51 = *((void *)v50 + 1);
        if (*(void *)(v51 + 8) == 13LL
          && ((unint64_t v52 = *(uint64_t **)v51, v53 = *v52, v54 = *(uint64_t *)((char *)v52 + 5), v53 == 0x5365646F63696E55LL)
            ? (BOOL v55 = v54 == 0x72616C6163536564LL)
            : (BOOL v55 = 0),
              v55))
        {
          unsigned int v8 = "Sc";
        }

        else
        {
          unint64_t v56 = a2;
          if (v13 == 5) {
            unint64_t v56 = *(swift::Demangle::__runtime::Node **)a2;
          }
          unint64_t v57 = (int **)*((void *)v56 + 1);
          if (v57[1] == (int *)6
            && ((uint64_t v58 = *v57, v59 = *v58, v60 = *((unsigned __int16 *)v58 + 2), v59 == 1651863364)
              ? (BOOL v61 = v60 == 25964)
              : (BOOL v61 = 0),
                v61))
          {
            unsigned int v8 = "Sd";
          }

          else
          {
            uint64_t v62 = a2;
            if (v13 == 5) {
              uint64_t v62 = *(swift::Demangle::__runtime::Node **)a2;
            }
            unsigned int v63 = (int **)*((void *)v62 + 1);
            if (v63[1] == (int *)5
              && ((size_t v64 = *v63, v65 = *v64, v66 = *((unsigned __int8 *)v64 + 4), v65 == 1634692166)
                ? (BOOL v67 = v66 == 116)
                : (BOOL v67 = 0),
                  v67))
            {
              unsigned int v8 = "Sf";
            }

            else
            {
              unsigned int v68 = a2;
              if (v13 == 5) {
                unsigned int v68 = *(swift::Demangle::__runtime::Node **)a2;
              }
              size_t v69 = (unsigned __int16 **)*((void *)v68 + 1);
              if (v69[1] == (unsigned __int16 *)3
                && ((v70 = *v69, int v71 = *v70, v72 = *((unsigned __int8 *)v70 + 2), v71 == 28233)
                  ? (BOOL v73 = v72 == 116)
                  : (BOOL v73 = 0),
                    v73))
              {
                unsigned int v8 = "Si";
              }

              else
              {
                unint64_t v74 = a2;
                if (v13 == 5) {
                  unint64_t v74 = *(swift::Demangle::__runtime::Node **)a2;
                }
                uint64_t v75 = *((void *)v74 + 1);
                if (*(void *)(v75 + 8) == 16LL
                  && ((v76 = *(uint64_t **)v75, v78 = *v76, uint64_t v77 = v76[1], v78 == 0x6152656661736E55LL)
                    ? (BOOL v79 = v77 == 0x7265746E696F5077LL)
                    : (BOOL v79 = 0),
                      v79))
                {
                  unsigned int v8 = "SV";
                }

                else
                {
                  uint64_t v80 = a2;
                  if (v13 == 5) {
                    uint64_t v80 = *(swift::Demangle::__runtime::Node **)a2;
                  }
                  uint64_t v81 = *((void *)v80 + 1);
                  if (*(void *)(v81 + 8) == 23LL
                    && ((size_t v82 = *(uint64_t **)v81,
                         uint64_t v83 = *v82,
                         uint64_t v84 = v82[1],
                         uint64_t v85 = *(uint64_t *)((char *)v82 + 15),
                         v83 == 0x754D656661736E55LL)
                      ? (BOOL v86 = v84 == 0x776152656C626174LL)
                      : (BOOL v86 = 0),
                        v86 ? (BOOL v87 = v85 == 0x7265746E696F5077LL) : (BOOL v87 = 0),
                        v87))
                  {
                    unsigned int v8 = "Sv";
                  }

                  else
                  {
                    uint64_t v88 = a2;
                    if (v13 == 5) {
                      uint64_t v88 = *(swift::Demangle::__runtime::Node **)a2;
                    }
                    uint64_t v89 = *((void *)v88 + 1);
                    if (*(void *)(v89 + 8) == 13LL
                      && ((BOOL v90 = *(uint64_t **)v89,
                           uint64_t v91 = *v90,
                           uint64_t v92 = *(uint64_t *)((char *)v90 + 5),
                           v91 == 0x6F50656661736E55LL)
                        ? (BOOL v93 = v92 == 0x7265746E696F5065LL)
                        : (BOOL v93 = 0),
                          v93))
                    {
                      unsigned int v8 = "SP";
                    }

                    else
                    {
                      uint64_t v94 = a2;
                      if (v13 == 5) {
                        uint64_t v94 = *(swift::Demangle::__runtime::Node **)a2;
                      }
                      unint64_t v95 = (uint64_t **)*((void *)v94 + 1);
                      if (v95[1] == (uint64_t *)20
                        && ((unint64_t v96 = *v95,
                             uint64_t v97 = *v96,
                             uint64_t v98 = v96[1],
                             int v99 = *((_DWORD *)v96 + 4),
                             v97 == 0x754D656661736E55LL)
                          ? (BOOL v100 = v98 == 0x696F50656C626174LL)
                          : (BOOL v100 = 0),
                            v100 ? (BOOL v101 = v99 == 1919251566) : (BOOL v101 = 0),
                            v101))
                      {
                        unsigned int v8 = "Sp";
                      }

                      else
                      {
                        unint64_t v102 = a2;
                        if (v13 == 5) {
                          unint64_t v102 = *(swift::Demangle::__runtime::Node **)a2;
                        }
                        uint64_t v103 = *((void *)v102 + 1);
                        if (*(void *)(v103 + 8) == 19LL
                          && ((uint64_t v104 = *(uint64_t **)v103,
                               uint64_t v105 = *v104,
                               uint64_t v106 = v104[1],
                               uint64_t v107 = *(uint64_t *)((char *)v104 + 11),
                               v105 == 0x7542656661736E55LL)
                            ? (BOOL v108 = v106 == 0x6E696F5072656666LL)
                            : (BOOL v108 = 0),
                              v108 ? (BOOL v109 = v107 == 0x7265746E696F5072LL) : (BOOL v109 = 0),
                              v109))
                        {
                          unsigned int v8 = "SR";
                        }

                        else
                        {
                          unint64_t v110 = a2;
                          if (v13 == 5) {
                            unint64_t v110 = *(swift::Demangle::__runtime::Node **)a2;
                          }
                          uint64_t v111 = (uint64_t **)*((void *)v110 + 1);
                          size_t v112 = *v111;
                          uint64_t v113 = *v112;
                          uint64_t v114 = v112[1];
                          uint64_t v115 = v112[2];
                          int v116 = *((unsigned __int16 *)v112 + 12);
                          BOOL v117 = v113 == 0x754D656661736E55LL && v114 == 0x667542656C626174LL;
                          BOOL v118 = v117 && v115 == 0x746E696F50726566LL;
                          if (v118 && v116 == 29285)
                          {
                            unsigned int v8 = "Sr";
                          }

                          else
                          {
LABEL_172:
                            unint64_t v120 = a2;
                            if (v13 == 5) {
                              unint64_t v120 = *(swift::Demangle::__runtime::Node **)a2;
                            }
                            unint64_t v121 = (int **)*((void *)v120 + 1);
                            if (v121[1] == (int *)6
                              && ((unsigned int v122 = *v121, v123 = *v122,
                                                 int v124 = *((unsigned __int16 *)v122 + 2),
                                                 v123 == 1769108563)
                                ? (BOOL v125 = v124 == 26478)
                                : (BOOL v125 = 0),
                                  v125))
                            {
                              unsigned int v8 = "SS";
                            }

                            else
                            {
                              if (v13 == 5) {
                                a2 = *(swift::Demangle::__runtime::Node **)a2;
                              }
                              uint64_t v126 = *((void *)a2 + 1);
                              if (*(void *)(v126 + 8) != 4LL || **(_DWORD **)v126 != 1953384789) {
                                return 0LL;
                              }
                              unsigned int v8 = "Su";
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

void *anonymous namespace'::Remangler::mangleIdentifier@<X0>( uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  size_t v5 = a3;
  unsigned int v8 = "oi";
  switch(a4)
  {
    case 0:
      swift::Demangle::__runtime::CharVector::append( (unsigned int *)(a1 + 12728),  a3,  *(swift::Demangle::__runtime::NodeFactory **)(a1 + 12744));
      double result = swift::Demangle::__runtime::CharVector::append((char **)(a1 + 12728), a2, v5, *(void **)(a1 + 12744));
      goto LABEL_7;
    case 1:
      unsigned int v8 = "op";
      goto LABEL_5;
    case 2:
      unsigned int v8 = "oP";
      goto LABEL_5;
    case 3:
LABEL_5:
      swift::Demangle::__runtime::CharVector::append((char **)(a1 + 12728), v8, 2uLL, *(void **)(a1 + 12744));
      break;
    default:
      break;
  }

  double result = swift::Demangle::__runtime::CharVector::append( (unsigned int *)(a1 + 12728),  v5,  *(swift::Demangle::__runtime::NodeFactory **)(a1 + 12744));
  if (v5)
  {
    while (1)
    {
      double result = (void *)swift::Mangle::__runtime::translateOperatorChar((swift::Mangle::__runtime *)*a2);
      char v10 = (char)result;
      unsigned int v11 = *(_DWORD *)(a1 + 12736);
      size_t v12 = *(unsigned int *)(a1 + 12740);
      int v13 = *(_BYTE **)(a1 + 12728);
      int v14 = *(void **)(a1 + 12744);
      unint64_t v15 = (_BYTE *)v14[1];
      if (&v13[v12] != v15) {
        break;
      }
      unint64_t v17 = (unint64_t)&v13[v12 + 1];
      unint64_t v16 = v14[2];
      if (v17 > v16) {
        goto LABEL_15;
      }
      v14[1] = v17;
      LODWORD(v18) = 1;
LABEL_9:
      *(_DWORD *)(a1 + 1274printNode(&v3, this, 0) = v12 + v18;
LABEL_10:
      *(_DWORD *)(a1 + 12736) = v11 + 1;
      v13[v11] = v10;
      ++a2;
      if (!--v5) {
        goto LABEL_7;
      }
    }

    unint64_t v16 = v14[2];
LABEL_15:
    else {
      uint64_t v18 = (2 * v12);
    }
    size_t v19 = v18 + v12;
    if (v15) {
      BOOL v20 = (unint64_t)&v15[v18 + v12] > v16;
    }
    else {
      BOOL v20 = 1;
    }
    int v13 = (_BYTE *)v14[1];
    if (v20)
    {
      unint64_t v21 = 2LL * v14[4];
      if (v21 <= v19 + 1) {
        unint64_t v21 = v19 + 1;
      }
      uint64_t v14[4] = v21;
      unint64_t v22 = v21 + 8;
      double result = malloc(v21 + 8);
      int v23 = (char *)result + v22;
      *double result = v14[3];
      int v13 = result + 1;
      void v14[2] = v23;
      void v14[3] = result;
    }

    v14[1] = &v13[v19];
    if ((_DWORD)v12)
    {
      double result = memcpy(v13, *(const void **)(a1 + 12728), v12);
      LODWORD(v12) = *(_DWORD *)(a1 + 12740);
      unsigned int v11 = *(_DWORD *)(a1 + 12736);
    }

    *(void *)(a1 + 12728) = v13;
    goto LABEL_9;
  }

char *anonymous namespace'::Remangler::mangleSimpleEntity@<X0>( char *result@<X0>, uint64_t *a2@<X1>, char a3@<W2>, const void *a4@<X3>, size_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X8>)
{
  size_t v9 = a5;
  char v10 = a4;
  size_t v12 = a2;
  int v13 = result;
  int v15 = *((unsigned __int8 *)a2 + 18);
  if (v15 != 1 && (v15 != 5 || *((_DWORD *)a2 + 2) != 1))
  {
    int v22 = 1338;
    int v23 = 1;
LABEL_29:
    *(_DWORD *)a8 = v23;
    *(void *)(a8 + 8) = v12;
    *(_DWORD *)(a8 + 16) = v22;
    return result;
  }

  uint64_t v38 = (char **)(result + 12728);
  unsigned int v16 = *((_DWORD *)result + 3184);
  size_t v17 = *((unsigned int *)result + 3185);
  uint64_t v18 = (char *)*((void *)result + 1591);
  if (v16 >= v17)
  {
    size_t v19 = (void *)*((void *)result + 1593);
    BOOL v20 = (char *)v19[1];
    if (&v18[v17] == v20)
    {
      unint64_t v24 = (unint64_t)&v18[v17 + 1];
      unint64_t v21 = v19[2];
      if (v24 <= v21)
      {
        v19[1] = v24;
        int v33 = 1;
        char v10 = a4;
LABEL_24:
        *((_DWORD *)v13 + 3185) = v17 + v33;
        goto LABEL_25;
      }
    }

    else
    {
      unint64_t v21 = v19[2];
    }

    uint64_t v35 = a6;
    LODWORD(v25) = 2 * v17;
    else {
      uint64_t v25 = v25;
    }
    int v34 = v25;
    size_t v26 = v25 + v17;
    unint64_t v27 = (unint64_t)&v20[v25 + v17];
    if (v20) {
      BOOL v28 = v27 > v21;
    }
    else {
      BOOL v28 = 1;
    }
    uint64_t v18 = (char *)v19[1];
    if (v28)
    {
      unint64_t v29 = 2LL * v19[4];
      if (v29 <= v26 + 1) {
        unint64_t v29 = v26 + 1;
      }
      _OWORD v19[4] = v29;
      unint64_t v30 = v29 + 8;
      int v31 = malloc(v29 + 8);
      unsigned int v32 = (char *)v31 + v30;
      *int v31 = v19[3];
      uint64_t v18 = (char *)(v31 + 1);
      void v19[2] = v32;
      uint64_t v19[3] = v31;
    }

    v19[1] = &v18[v26];
    if ((_DWORD)v17)
    {
      memcpy(v18, *((const void **)v13 + 1591), v17);
      LODWORD(vmemset(&v11, 0, 17) = *((_DWORD *)v13 + 3185);
      unsigned int v16 = *((_DWORD *)v13 + 3184);
    }

    size_t v9 = a5;
    char v10 = a4;
    int v33 = v34;
    a6 = v35;
    *uint64_t v38 = v18;
    goto LABEL_24;
  }

void *anonymous namespace'::Remangler::mangleAccessor@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X1>, const void *a3@<X2>, size_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X8>)
{
  size_t v9 = a4;
  int v13 = (char **)(a1 + 12728);
  unsigned int v14 = *(_DWORD *)(a1 + 12736);
  size_t v15 = *(unsigned int *)(a1 + 12740);
  unsigned int v16 = *(char **)(a1 + 12728);
  if (v14 >= v15)
  {
    int v50 = (char **)(a1 + 12728);
    size_t v17 = *(void **)(a1 + 12744);
    uint64_t v18 = (char *)v17[1];
    if (&v16[v15] == v18)
    {
      unint64_t v20 = (unint64_t)&v16[v15 + 1];
      unint64_t v19 = v17[2];
      if (v20 <= v19)
      {
        v17[1] = v20;
        LODWORD(v21) = 1;
        int v13 = (char **)(a1 + 12728);
LABEL_19:
        *(_DWORD *)(a1 + 1274printNode(&v3, this, 0) = v15 + v21;
        size_t v9 = a4;
        goto LABEL_20;
      }
    }

    else
    {
      unint64_t v19 = v17[2];
    }

    uint64_t v49 = a7;
    else {
      uint64_t v21 = (2 * v15);
    }
    size_t v22 = v21 + v15;
    if (v18) {
      BOOL v23 = (unint64_t)&v18[v21 + v15] > v19;
    }
    else {
      BOOL v23 = 1;
    }
    unsigned int v16 = (char *)v17[1];
    if (v23)
    {
      unint64_t v24 = 2LL * v17[4];
      if (v24 <= v22 + 1) {
        unint64_t v24 = v22 + 1;
      }
      v17[4] = v24;
      unint64_t v25 = v24 + 8;
      size_t v26 = malloc(v24 + 8);
      unint64_t v27 = (char *)v26 + v25;
      void *v26 = v17[3];
      unsigned int v16 = (char *)(v26 + 1);
      void v17[2] = v27;
      v17[3] = v26;
    }

    v17[1] = &v16[v22];
    if ((_DWORD)v15)
    {
      memcpy(v16, *(const void **)(a1 + 12728), v15);
      LODWORD(v15) = *(_DWORD *)(a1 + 12740);
      unsigned int v14 = *(_DWORD *)(a1 + 12736);
    }

    a7 = v49;
    int v13 = v50;
    *int v50 = v16;
    goto LABEL_19;
  }

char *anonymous namespace'::Remangler::mangleNamedAndTypedEntity@<X0>( char *result@<X0>, uint64_t *a2@<X1>, char a3@<W2>, const void *a4@<X3>, size_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X8>)
{
  unsigned int v8 = a2;
  if (*((_BYTE *)a2 + 18) != 5 || (*((_DWORD *)a2 + 2) - 3) > 1)
  {
    int v21 = 1398;
    goto LABEL_7;
  }

  size_t v11 = a5;
  size_t v12 = a4;
  unsigned int v14 = result;
  int v41 = (char **)(result + 12728);
  unsigned int v15 = *((_DWORD *)result + 3184);
  size_t v16 = *((unsigned int *)result + 3185);
  size_t v17 = (char *)*((void *)result + 1591);
  if (v15 >= v16)
  {
    uint64_t v18 = (void *)*((void *)result + 1593);
    unint64_t v19 = (char *)v18[1];
    if (&v17[v16] == v19)
    {
      unint64_t v23 = (unint64_t)&v17[v16 + 1];
      unint64_t v20 = v18[2];
      if (v23 <= v20)
      {
        v18[1] = v23;
        int v31 = 1;
        size_t v12 = a4;
LABEL_22:
        *((_DWORD *)v14 + 3185) = v16 + v31;
        goto LABEL_23;
      }
    }

    else
    {
      unint64_t v20 = v18[2];
    }

    LODWORD(v24) = 2 * v16;
    else {
      uint64_t v24 = v24;
    }
    int v38 = v24;
    size_t v25 = v24 + v16;
    if (!v19 || (unint64_t)&v19[v25] > v20)
    {
      unint64_t v26 = 2LL * v18[4];
      if (v26 <= v25 + 1) {
        unint64_t v26 = v25 + 1;
      }
      v18[4] = v26;
      unint64_t v27 = v26 + 8;
      uint64_t v37 = a6;
      int v28 = malloc(v26 + 8);
      a6 = v37;
      unint64_t v29 = (char *)v28 + v27;
      *int v28 = v18[3];
      unint64_t v19 = (char *)(v28 + 1);
      uint64_t v18[2] = v29;
      void v18[3] = v28;
    }

    v18[1] = &v19[v25];
    if ((_DWORD)v16)
    {
      uint64_t v30 = a6;
      memcpy(v19, *((const void **)v14 + 1591), v16);
      a6 = v30;
      LODWORD(v16) = *((_DWORD *)v14 + 3185);
      unsigned int v15 = *((_DWORD *)v14 + 3184);
    }

    size_t v11 = a5;
    size_t v12 = a4;
    int v31 = v38;
    char *v41 = v19;
    size_t v17 = v19;
    goto LABEL_22;
  }

unsigned int *applyParamLabels(swift::Demangle::__runtime::Node *,swift::Demangle::__runtime::Node *,swift::Demangle::__runtime::NodeFactory &)::$_0::operator() const(swift::Demangle::__runtime::Node *)::{lambda(swift::Demangle::__runtime::Node *,swift::Demangle::__runtime::Node *)#1}::operator()( uint64_t a1, uint64_t a2, swift::Demangle::__runtime::Node **a3, uint64_t a4, const char *a5)
{
  if (*(_WORD *)(a2 + 16) == 275)
  {
    unsigned int v7 = *(swift::Demangle::__runtime::NodeFactory **)(a1 + 8);
    unsigned int v8 = **(unsigned int ***)a1;
    size_t v9 = (swift::Demangle::__runtime::Node *)a3;
    return swift::Demangle::__runtime::Node::addChild(v8, v9, v7, a4, a5);
  }

  unint64_t Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*(void **)(a1 + 8), 224);
  unint64_t NodeWithAllocatedText = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText( *(void **)(a1 + 8),  225,  *(void *)a2,  *(void *)(a2 + 8));
  swift::Demangle::__runtime::Node::addChild( Node,  NodeWithAllocatedText,  *(swift::Demangle::__runtime::NodeFactory **)(a1 + 8),  v13,  v14);
  int v15 = *((unsigned __int8 *)a3 + 18);
  size_t v16 = a3;
  if ((v15 - 1) >= 2)
  {
    if (v15 == 5)
    {
      size_t v17 = *a3;
      size_t v16 = (swift::Demangle::__runtime::Node **)*a3;
      goto LABEL_11;
    }

    size_t v16 = 0LL;
  }

  if (v15 == 1)
  {
    uint64_t v18 = a3 + 1;
    goto LABEL_16;
  }

  if (v15 == 2)
  {
    uint64_t v18 = a3 + 2;
    goto LABEL_16;
  }

  if (v15 != 5)
  {
    uint64_t v18 = 0LL;
    goto LABEL_16;
  }

  size_t v17 = *a3;
LABEL_11:
  uint64_t v18 = (swift::Demangle::__runtime::Node **)((char *)v17 + 8 * *((unsigned int *)a3 + 2));
LABEL_16:
  while (v16 != v18)
  {
    unint64_t v19 = *v16++;
    swift::Demangle::__runtime::Node::addChild(Node, v19, *(swift::Demangle::__runtime::NodeFactory **)(a1 + 8), a4, a5);
  }

  unsigned int v7 = *(swift::Demangle::__runtime::NodeFactory **)(a1 + 8);
  unsigned int v8 = **(unsigned int ***)a1;
  size_t v9 = (swift::Demangle::__runtime::Node *)Node;
  return swift::Demangle::__runtime::Node::addChild(v8, v9, v7, a4, a5);
}

void anonymous namespace'::Remangler::mangleProtocolListWithoutPrefix( _anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, swift::Demangle::__runtime::Node *a3@<X3>, int a4@<W2>, uint64_t a5@<X8>)
{
  if (*((_WORD *)a2 + 8) != 190)
  {
    int v14 = 1881;
    int v15 = 1;
LABEL_47:
    *(_DWORD *)a5 = v15;
    *(void *)(a5 + 8) = a2;
    *(_DWORD *)(a5 + 16) = v14;
    return;
  }

  int v9 = *((unsigned __int8 *)a2 + 18);
  if (v9 == 1) {
    goto LABEL_6;
  }
  if (v9 != 5 || *((_DWORD *)a2 + 2) != 1)
  {
    int v14 = 1882;
    int v15 = 1;
    goto LABEL_47;
  }

  a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_6:
  a2 = *(swift::Demangle::__runtime::Node **)a2;
  char v10 = (swift::Demangle::__runtime::Node **)((char *)a2 + 16);
  if (*((_WORD *)a2 + 8) != 235)
  {
    int v14 = 1884;
    int v15 = 1;
    goto LABEL_47;
  }

  int v11 = *((unsigned __int8 *)a2 + 18);
  size_t v12 = (swift::Demangle::__runtime::Node **)a2;
  if ((v11 - 1) >= 2)
  {
    if (v11 == 5)
    {
      uint64_t v13 = *(void *)a2;
      size_t v12 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_18:
      char v10 = (swift::Demangle::__runtime::Node **)(v13 + 8LL * *((unsigned int *)a2 + 2));
      goto LABEL_21;
    }

    size_t v12 = 0LL;
  }

  switch(v11)
  {
    case 1:
      char v10 = (swift::Demangle::__runtime::Node **)((char *)a2 + 8);
      break;
    case 2:
      break;
    case 5:
      uint64_t v13 = *(void *)a2;
      goto LABEL_18;
    default:
      char v10 = 0LL;
      break;
  }

void anonymous namespace'::Remangler::mangleProtocolWithoutPrefix( char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  size_t v5 = a2;
  {
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = 0;
    return;
  }

  int v8 = *((unsigned __int16 *)v5 + 8);
  if (v8 == 232)
  {
    int v9 = *((unsigned __int8 *)v5 + 18);
    if (v9 != 1)
    {
      if (v9 != 5 || *((_DWORD *)v5 + 2) != 1)
      {
        *(_DWORD *)a4 = 1;
        *(void *)(a4 + 8) = v5;
        int v10 = 2284;
        goto LABEL_18;
      }

      size_t v5 = *(swift::Demangle::__runtime::Node **)v5;
    }

    size_t v5 = *(swift::Demangle::__runtime::Node **)v5;
    int v8 = *((unsigned __int16 *)v5 + 8);
  }

  if (v8 != 180)
  {
    *(_DWORD *)a4 = 1;
    *(void *)(a4 + 8) = v5;
    int v10 = 2288;
LABEL_18:
    *(_DWORD *)(a4 + 16) = v10;
    return;
  }

  v11[0] = 0;
  uint64_t v13 = 0LL;
  uint64_t v14 = 0LL;
  std::string __p = 0LL;
  v15[0] = 0LL;
  v15[1] = 0LL;
  char v16 = 0;
  {
    if (*(_DWORD *)a4) {
      goto LABEL_14;
    }
    swift::Demangle::__runtime::RemanglerBase::addSubstitution( (char *)this,  (const swift::Demangle::__runtime::SubstitutionEntry *)v15);
  }

  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0LL;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_14:
  if (SHIBYTE(v14) < 0) {
    operator delete(__p);
  }
}

unsigned int *anonymous namespace'::Remangler::mangleDependentGenericParamIndex@<X0>( unsigned int *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = (uint64_t)this;
  int v5 = *((unsigned __int8 *)a2 + 18);
  if ((v5 - 1) >= 2)
  {
    if (v5 == 5) {
      int v6 = *(swift::Demangle::__runtime::Node **)a2;
    }
    else {
      int v6 = a2;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }

  else
  {
    int v6 = a2;
  }

  uint64_t v7 = **(void **)a2;
  uint64_t v8 = **((void **)v6 + 1);
  if (v7)
  {
    unsigned int v9 = this[3184];
    size_t v10 = this[3185];
    int v11 = (_BYTE *)*((void *)this + 1591);
    if (v9 < v10)
    {
LABEL_32:
      *(_DWORD *)(v3 + 12736) = v9 + 1;
      v11[v9] = 100;
      this = (unsigned int *)v3;
      uint64_t v15 = v8;
      goto LABEL_33;
    }

    size_t v12 = (void *)*((void *)this + 1593);
    uint64_t v13 = (_BYTE *)v12[1];
    if (&v11[v10] == v13)
    {
      unint64_t v22 = (unint64_t)&v11[v10 + 1];
      unint64_t v14 = v12[2];
      if (v22 <= v14)
      {
        v12[1] = v22;
        LODWORD(v23) = 1;
LABEL_31:
        *(_DWORD *)(v3 + 1274printNode(&v3, this, 0) = v10 + v23;
        goto LABEL_32;
      }
    }

    else
    {
      unint64_t v14 = v12[2];
    }

    else {
      uint64_t v23 = (2 * v10);
    }
    size_t v24 = v23 + v10;
    if (v13) {
      BOOL v25 = (unint64_t)&v13[v23 + v10] > v14;
    }
    else {
      BOOL v25 = 1;
    }
    int v11 = (_BYTE *)v12[1];
    if (v25)
    {
      unint64_t v26 = 2LL * v12[4];
      if (v26 <= v24 + 1) {
        unint64_t v26 = v24 + 1;
      }
      _OWORD v12[4] = v26;
      unint64_t v27 = v26 + 8;
      int v28 = malloc(v26 + 8);
      unint64_t v29 = (char *)v28 + v27;
      *int v28 = v12[3];
      int v11 = v28 + 1;
      v12[2] = v29;
      void v12[3] = v28;
    }

    v12[1] = &v11[v24];
    if ((_DWORD)v10)
    {
      memcpy(v11, *(const void **)(v3 + 12728), v10);
      LODWORD(v1printNode(&v3, this, 0) = *(_DWORD *)(v3 + 12740);
      unsigned int v9 = *(_DWORD *)(v3 + 12736);
    }

    *(void *)(v3 + 12728) = v11;
    goto LABEL_31;
  }

  if (!v8)
  {
    unsigned int v16 = this[3184];
    size_t v17 = this[3185];
    uint64_t v18 = (_BYTE *)*((void *)this + 1591);
    if (v16 < v17)
    {
LABEL_53:
      *(_DWORD *)(v3 + 12736) = v16 + 1;
      v18[v16] = 120;
      goto LABEL_34;
    }

    unint64_t v19 = (void *)*((void *)this + 1593);
    unint64_t v20 = (_BYTE *)v19[1];
    if (&v18[v17] == v20)
    {
      unint64_t v30 = (unint64_t)&v18[v17 + 1];
      unint64_t v21 = v19[2];
      if (v30 <= v21)
      {
        v19[1] = v30;
        LODWORD(v31) = 1;
LABEL_52:
        *(_DWORD *)(v3 + 1274printNode(&v3, this, 0) = v17 + v31;
        goto LABEL_53;
      }
    }

    else
    {
      unint64_t v21 = v19[2];
    }

    else {
      uint64_t v31 = (2 * v17);
    }
    size_t v32 = v31 + v17;
    if (v20) {
      BOOL v33 = (unint64_t)&v20[v31 + v17] > v21;
    }
    else {
      BOOL v33 = 1;
    }
    uint64_t v18 = (_BYTE *)v19[1];
    if (v33)
    {
      unint64_t v34 = 2LL * v19[4];
      if (v34 <= v32 + 1) {
        unint64_t v34 = v32 + 1;
      }
      _OWORD v19[4] = v34;
      unint64_t v35 = v34 + 8;
      this = (unsigned int *)malloc(v34 + 8);
      uint64_t v36 = (char *)this + v35;
      *(void *)this = v19[3];
      uint64_t v18 = this + 2;
      void v19[2] = v36;
      uint64_t v19[3] = this;
    }

    v19[1] = &v18[v32];
    if ((_DWORD)v17)
    {
      this = (unsigned int *)memcpy(v18, *(const void **)(v3 + 12728), v17);
      LODWORD(vmemset(&v11, 0, 17) = *(_DWORD *)(v3 + 12740);
      unsigned int v16 = *(_DWORD *)(v3 + 12736);
    }

    *(void *)(v3 + 12728) = v18;
    goto LABEL_52;
  }

  uint64_t v15 = v8 - 1;
LABEL_33:
LABEL_34:
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = 0LL;
  *(_DWORD *)(a3 + 16) = 0;
  return this;
}

void _swift_stdlib_reportFatalErrorInFile( const char *a1, int a2, const char *a3, int a4, const char *a5, int a6, int a7, int a8)
{
  size_t v10 = "";
  if (a4 > 0) {
    size_t v10 = ": ";
  }
  swift_asprintf(&v13, "%.*s:%u: %.*s%s%.*s\n", a6, a5, a7, a2, a1, v10, a4, a3);
  int v11 = v13;
  swift_reportError(a8, v13);
  free(v11);
  if (_swift_shouldReportFatalErrorsToDebugger())
  {
    if (a4) {
      swift_asprintf(&v14, "%.*s: %.*s");
    }
    else {
      swift_asprintf(&v14, "%.*s");
    }
    size_t v12 = v14;
    _swift_reportToDebugger(1LL, v14, 0LL);
    free(v12);
  }

void _swift_stdlib_reportFatalError(const char *a1, int a2, const char *a3, int a4, int a5)
{
  uint64_t v7 = v9;
  swift_reportError(a5, v9);
  free(v7);
  if (_swift_shouldReportFatalErrorsToDebugger())
  {
    if (a4) {
      swift_asprintf(&v10, "%.*s: %.*s");
    }
    else {
      swift_asprintf(&v10, "%.*s");
    }
    uint64_t v8 = v10;
    _swift_reportToDebugger(1LL, v10, 0LL);
    free(v8);
  }

void _swift_stdlib_reportUnimplementedInitializerInFile( const char *a1, int a2, const char *a3, int a4, const char *a5, int a6, int a7, uint64_t a8, int a9)
{
  unsigned int v9 = v10;
  swift_reportError(a9, v10);
  free(v9);
}

void _swift_stdlib_reportUnimplementedInitializer(const char *a1, int a2, const char *a3, int a4, int a5)
{
  int v6 = v7;
  swift_reportError(a5, v7);
  free(v6);
}

void *_swift_instantiateInertHeapObject(void *result, uint64_t a2)
{
  *double result = a2;
  result[1] = 3LL;
  return result;
}

void _GLOBAL__sub_I_GlobalObjects_cpp()
{
  if (swift::runtime::environment::initializeToken != -1) {
    dispatch_once_f( &swift::runtime::environment::initializeToken,  0LL,  (dispatch_function_t)swift::runtime::environment::initialize);
  }
  if (swift::runtime::environment::SWIFT_DETERMINISTIC_HASHING_variable)
  {
    _swift_stdlib_Hashing_parameters = 0LL;
    *(void *)algn_18C487058 = 0LL;
    qword_18C487060 = 0LL;
    char v0 = 1;
  }

  else
  {
    uint64_t v1 = 0LL;
    uint64_t __buf = 0LL;
    swift_stdlib_random(&__buf, 8uLL);
    swift_stdlib_random(&v1, 8uLL);
    char v0 = 0;
    _swift_stdlib_Hashing_parameters = __buf;
    *(void *)algn_18C487058 = v1;
  }

  LOBYTE(qword_18C4870std::string::push_back(this, 60) = v0;
}

size_t _swift_stdlib_fwrite_stdout(const void *a1, size_t a2, size_t a3)
{
  return fwrite(a1, a2, a3, (FILE *)*MEMORY[0x1895F89E0]);
}

unint64_t swift_int64ToString( unint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a2 <= 0x1F && a4 > 9 || a2 <= 0x40 && a4 <= 9 || !a4 || a4 >= 37)
  {
    __break(1u);
    return result;
  }

  if (a3 >= 0) {
    unint64_t v5 = a3;
  }
  else {
    unint64_t v5 = -a3;
  }
  if (a3)
  {
    if (a4 == 10)
    {
      int v6 = (char *)result;
      do
      {
        *v6++ = (v5 % 0xA) | 0x30;
        BOOL v7 = v5 >= 0xA;
        v5 /= 0xAuLL;
      }

      while (v7);
    }

    else
    {
      if ((a5 & 1) != 0) {
        char v9 = 55;
      }
      else {
        char v9 = 87;
      }
      int v6 = (char *)result;
      do
      {
        unsigned int v10 = v5 % a4;
        if (v10 >= 0xA) {
          char v11 = v9;
        }
        else {
          char v11 = 48;
        }
        *v6++ = v11 + v10;
        BOOL v14 = a4 > v5;
        v5 /= a4;
      }

      while (!v14);
    }

    if ((a3 & 0x8000000000000000LL) == 0) {
      goto LABEL_28;
    }
    char v8 = 45;
  }

  else
  {
    char v8 = 48;
    int v6 = (char *)result;
  }

  *v6++ = v8;
LABEL_28:
  size_t v12 = v6 - 1;
  uint64_t v13 = &v6[-result];
  if (v13) {
    BOOL v14 = (unint64_t)v12 > result;
  }
  else {
    BOOL v14 = 0;
  }
  if (v14)
  {
    unint64_t v15 = result + 1;
    do
    {
      char v16 = *(_BYTE *)(v15 - 1);
      *(_BYTE *)(v15 - 1) = *v12;
      *v12-- = v16;
      BOOL v7 = v15++ >= (unint64_t)v12;
    }

    while (!v7);
  }

  return (unint64_t)v13;
}

_BYTE *swift_uint64ToString(_BYTE *result, uint64_t a2, unint64_t a3, uint64_t a4, char a5)
{
  if ((a2 > 31 || a4 <= 9) && (a2 > 63 || a4 > 9) && a4 && a4 < 37)
  {
    if (a3)
    {
      if (a4 == 10)
      {
        unint64_t v5 = result;
        do
        {
          *v5++ = (a3 % 0xA) | 0x30;
          BOOL v6 = a3 >= 0xA;
          a3 /= 0xAuLL;
        }

        while (v6);
      }

      else
      {
        if ((a5 & 1) != 0) {
          char v7 = 55;
        }
        else {
          char v7 = 87;
        }
        unint64_t v5 = result;
        do
        {
          unsigned int v8 = a3 % a4;
          if (v8 >= 0xA) {
            char v9 = v7;
          }
          else {
            char v9 = 48;
          }
          *v5++ = v9 + v8;
          BOOL v12 = a4 > a3;
          a3 /= a4;
        }

        while (!v12);
      }
    }

    else
    {
      *double result = 48;
      unint64_t v5 = result + 1;
    }

    unsigned int v10 = v5 - 1;
    uint64_t v11 = v5 - result;
    if (v11) {
      BOOL v12 = v10 > result;
    }
    else {
      BOOL v12 = 0;
    }
    if (v12)
    {
      uint64_t v13 = result + 1;
      do
      {
        char v14 = *(v13 - 1);
        *(v13 - 1) = *v10;
        *v10-- = v14;
        BOOL v6 = v13++ >= v10;
      }

      while (!v6);
    }

    return (_BYTE *)v11;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t swift_float16ToString(_BYTE *a1, unint64_t a2, __n128 a3)
{
  unsigned __int16 v4 = a3.n128_u16[0];
  return swift_dtoa_optimal_binary16_p(&v4, a1, a2);
}

uint64_t swift_stdlib_readLine_stdin(char **__linep)
{
  size_t __linecapp = 0LL;
  int v2 = (FILE **)MEMORY[0x1895F89D8];
  do
    int v3 = getline(__linep, &__linecapp, *v2);
  while (v3 < 0 && *__error() == 4);
  return v3;
}

char *_swift_stdlib_strtold_clocale(char *__s, long double *a2)
{
  int v4 = *__s;
  if (v4 == 45 || (unint64_t v5 = (unsigned __int8 *)__s, v4 == 43))
  {
    unint64_t v5 = (unsigned __int8 *)(__s + 1);
    int v4 = __s[1];
  }

  if ((v4 | 0x20) == 0x73 && (v5[1] | 0x20) == 0x6E && (v5[2] | 0x20) == 0x61 && (v5[3] | 0x20) == 0x6E && !v5[4])
  {
    *a2 = NAN;
    return &__s[strlen(__s)];
  }

  else
  {
    *__error() = 0;
    *a2 = strtold_l(__s, &v7, 0LL);
    return v7;
  }

char *_swift_stdlib_strtod_clocale(char *__s, double *a2)
{
  int v4 = *__s;
  if (v4 == 45 || (unint64_t v5 = (unsigned __int8 *)__s, v4 == 43))
  {
    unint64_t v5 = (unsigned __int8 *)(__s + 1);
    int v4 = __s[1];
  }

  if ((v4 | 0x20) == 0x73 && (v5[1] | 0x20) == 0x6E && (v5[2] | 0x20) == 0x61 && (v5[3] | 0x20) == 0x6E && !v5[4])
  {
    *a2 = NAN;
    return &__s[strlen(__s)];
  }

  else
  {
    *__error() = 0;
    *a2 = strtod_l(__s, &v7, 0LL);
    return v7;
  }

char *_swift_stdlib_strtof_clocale(char *__s, float *a2)
{
  int v4 = *__s;
  if (v4 == 45 || (unint64_t v5 = (unsigned __int8 *)__s, v4 == 43))
  {
    unint64_t v5 = (unsigned __int8 *)(__s + 1);
    int v4 = __s[1];
  }

  if ((v4 | 0x20) == 0x73 && (v5[1] | 0x20) == 0x6E && (v5[2] | 0x20) == 0x61 && (v5[3] | 0x20) == 0x6E && !v5[4])
  {
    *a2 = NAN;
    return &__s[strlen(__s)];
  }

  else
  {
    *__error() = 0;
    *a2 = strtof_l(__s, &v7, 0LL);
    return v7;
  }

__int16 _swift_stdlib_strtof16_clocale@<H0>(char *a1@<X0>, _WORD *a2@<X1>)
{
  _S0 = v9;
  __asm { FCVT            H0, S0 }

  *a2 = result;
  return result;
}

void _swift_stdlib_flockfile_stdout()
{
}

void _swift_stdlib_funlockfile_stdout()
{
}

uint64_t _swift_stdlib_putc_stderr(int a1)
{
  return putc(a1, (FILE *)*MEMORY[0x1895F89D0]);
}

uint64_t _swift_stdlib_getHardwareConcurrency()
{
  return std::thread::hardware_concurrency();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return 0LL;
}

uint64_t _swift_stdlib_getCurrentStackBounds(void *a1, void *a2)
{
  int v4 = pthread_self();
  stackaddr_np = (char *)pthread_get_stackaddr_np(v4);
  *a1 = &stackaddr_np[-pthread_get_stacksize_np(v4)];
  *a2 = stackaddr_np;
  return 1LL;
}

uint64_t _swift_stdlib_getMphIdx(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a2) {
    return 0LL;
  }
  uint64_t v5 = 0LL;
  unsigned int v6 = 461845907 * ((380141568 * a1) | ((-862048943 * a1) >> 17));
  while (1)
  {
    uint64_t v7 = *(void *)(a3 + 8 * v5);
    unsigned int v8 = *(unsigned __int16 *)(a5 + 2 * v5);
    HIDWORD(v9) = v6 ^ v5;
    LODWORD(v9) = v6 ^ v5;
    HIDWORD(v9) = (461845907 * ((380141568 * v8) | ((-862048943 * v8) >> 17))) ^ (5 * (v9 >> 19) - 430675100);
    LODWORD(v9) = HIDWORD(v9);
    unsigned int v10 = -2048144789 * ((5 * (v9 >> 19) - 430675100) ^ ((5 * (v9 >> 19) - 430675100) >> 16) ^ 8);
    unint64_t v11 = ((-1028477387 * (v10 ^ (v10 >> 13))) ^ ((-1028477387 * (v10 ^ (v10 >> 13))) >> 16)) % v8;
    unint64_t v12 = *(void *)(v7 + 8 * (v11 >> 6));
    if (((v12 >> v11) & 1) != 0) {
      break;
    }
    if (a2 == ++v5) {
      return 0LL;
    }
  }

  unsigned __int16 v14 = *(_WORD *)(*(void *)(a4 + 8 * v5) + ((v11 >> 8) & 0xFFFFFE));
  for (uint64_t i = (v11 >> 6) & 0x3F8; i != v11 >> 6; ++i)
    v14 += vaddlv_u8((uint8x8_t)vcnt_s8(*(int8x8_t *)(v7 + 8 * i)));
  unsigned __int16 v16 = v14 + vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v12 << -(v11 & 0x3F))));
  if ((v11 & 0x3F) == 0) {
    return v14;
  }
  return v16;
}

uint64_t _swift_stdlib_getScalarBitArrayIdx(unsigned int a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = a1 / 0x4400uLL;
  uint64_t v4 = *a2;
  if (*a2 - 1 < v3) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  unint64_t v5 = (a1 / 0x110uLL) & 0x3F;
  unint64_t v6 = a2[(v3 + 1)];
  if (((v6 >> v5) & 1) == 0) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  unsigned __int16 v7 = *(_WORD *)(a3 + 2 * v3);
  if ((_DWORD)v5) {
    v7 += vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v6 << -(char)v5)));
  }
  uint64_t v8 = 5LL * v7;
  uint64_t v9 = (uint64_t)&a2[5 * v7 + 1 + v4];
  uint64_t v10 = (a1 % 0x110) >> 6;
  unint64_t v11 = *(void *)(v9 + 8LL * v10);
  if (((v11 >> (a1 % 0x110)) & 1) == 0) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  unsigned int v12 = (a1 % 0x110) & 0x3F;
  unsigned __int16 v13 = *(_WORD *)(a3 + 2 * (v4 + v10 + v8));
  unsigned __int16 v14 = v13 + vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v11 << -(char)v12)));
  if (v12) {
    unsigned __int16 v13 = v14;
  }
  return (*(void *)(v9 + 32) >> 16) + v13;
}

uint64_t _swift_stdlib_getGraphemeBreakProperty(unsigned int a1)
{
  for (int i = 1; i < 638; int i = (2 * i) | 1)
  {
    while (1)
    {
      unsigned int v2 = _swift_stdlib_graphemeBreakProperties[i];
      if ((v2 & 0x1FFFFF) <= a1) {
        break;
      }
      i *= 2;
      if (i >= 638) {
        return 255LL;
      }
    }

    uint64_t v3 = v2 >> 29;
    if ((_DWORD)v3 == 5) {
      __int16 v4 = 511;
    }
    else {
      __int16 v4 = 255;
    }
    if ((*(_DWORD *)&v4 & (v2 >> 21)) + (v2 & 0x1FFFFF) >= a1) {
      return v3;
    }
  }

  return 255LL;
}

BOOL _swift_stdlib_isLinkingConsonant(unsigned int a1)
{
  return _swift_stdlib_getScalarBitArrayIdx( a1,  _swift_stdlib_linkingConsonant,  (uint64_t)&_swift_stdlib_linkingConsonant_ranks) != 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t _swift_stdlib_getNormData(unsigned int a1)
{
  if (a1 < 0xC0) {
    return 0LL;
  }
  uint64_t ScalarBitArrayIdx = _swift_stdlib_getScalarBitArrayIdx( a1,  _swift_stdlib_normData,  (uint64_t)&_swift_stdlib_normData_ranks);
  if (ScalarBitArrayIdx == 0x7FFFFFFFFFFFFFFFLL) {
    return 0LL;
  }
  else {
    return _swift_stdlib_normData_data[_swift_stdlib_normData_data_indices[ScalarBitArrayIdx]];
  }
}

uint64_t _swift_stdlib_getDecompositionEntry(int a1)
{
  return _swift_stdlib_nfd_decomp_indices[_swift_stdlib_getMphIdx( a1,  11LL,  (uint64_t)&_swift_stdlib_nfd_decomp_keys,  (uint64_t)&_swift_stdlib_nfd_decomp_ranks,  (uint64_t)&_swift_stdlib_nfd_decomp_sizes)];
}

uint64_t _swift_stdlib_getComposition(unsigned int a1, int a2)
{
  __int16 v4 = *(&_swift_stdlib_nfc_comp_indices
       + _swift_stdlib_getMphIdx( a2,  3LL,  (uint64_t)&_swift_stdlib_nfc_comp_keys,  (uint64_t)&_swift_stdlib_nfc_comp_ranks,  (uint64_t)L"@@@"));
  if ((*v4 & 0x1FFFFF) != a2) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v5 = (*v4 >> 21) - 1;
  if (*v4 >> 21 == 1) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v6 = 1;
  while (1)
  {
    unsigned int v7 = v6 + ((v5 - v6) >> 1);
    int v8 = v4[v7];
    unsigned int v9 = v8 & 0x1FFFF;
    if ((v8 & 0x1FFFF) == a1) {
      break;
    }
    unsigned int v10 = v7 - 1;
    if (v9 <= a1) {
      unsigned int v10 = v5;
    }
    if (v9 < a1) {
      unsigned int v6 = v7 + 1;
    }
    else {
      unsigned int v5 = v10;
    }
    if (v5 < v6) {
      return 0xFFFFFFFFLL;
    }
  }

  int v12 = (v8 >> 17) & 0x3FFF;
  if (v8 < 0) {
    int v12 = -v12;
  }
  return v12 + a1;
}

uint64_t _swift_stdlib_getBinaryProperties(unsigned int a1)
{
  int v1 = 0;
  int v2 = 4920;
  while (1)
  {
    int v3 = v2 - v1;
    if (v2 < v1) {
      ++v3;
    }
    int v4 = v1 + (v3 >> 1);
    int v5 = v4;
    unsigned int v6 = v4 == 4920 ? 1114111 : (_swift_stdlib_scalar_binProps[v4 + 1] & 0x1FFFFF) - 1;
    unint64_t v7 = _swift_stdlib_scalar_binProps[v4];
    unsigned int v8 = v7 & 0x1FFFFF;
    if ((v7 & 0x1FFFFF) <= a1 && v6 >= a1) {
      break;
    }
    int v10 = v5 - 1;
    if (v8 <= a1) {
      int v10 = v2;
    }
    if (v6 < a1) {
      int v1 = v5 + 1;
    }
    else {
      int v2 = v10;
    }
    if (v2 < v1) {
      return 0LL;
    }
  }

  return *(void *)((char *)&_swift_stdlib_scalar_binProps_data + ((v7 >> 18) & 0x3FF8));
}

uint64_t _swift_stdlib_getNumericType(unsigned int a1)
{
  int v1 = 0;
  int v2 = 235;
  while (1)
  {
    int v3 = v2 - v1;
    if (v2 < v1) {
      ++v3;
    }
    int v4 = v1 + (v3 >> 1);
    unsigned int v5 = _swift_stdlib_numeric_type[v4];
    unsigned int v6 = v5 & 0x1FFFFF;
    unsigned int v7 = (v5 & 0x1FFFFF) + (v5 >> 21);
    if ((v5 & 0x1FFFFF) <= a1 && v7 >= a1) {
      break;
    }
    int v9 = v4 - 1;
    if (v6 <= a1) {
      int v9 = v2;
    }
    if (v7 < a1) {
      int v1 = v4 + 1;
    }
    else {
      int v2 = v9;
    }
    if (v2 < v1) {
      return 255LL;
    }
  }

  return v5 >> 29;
}

double _swift_stdlib_getNumericValue(int a1)
{
  return _swift_stdlib_numeric_values[_swift_stdlib_numeric_values_indices[_swift_stdlib_getMphIdx( a1,  12LL,  (uint64_t)&_swift_stdlib_numeric_values_keys,  (uint64_t)&_swift_stdlib_numeric_values_ranks,  (uint64_t)&_swift_stdlib_numeric_values_sizes)]];
}

char *_swift_stdlib_getNameAlias(unsigned int a1)
{
  uint64_t ScalarBitArrayIdx = _swift_stdlib_getScalarBitArrayIdx( a1,  _swift_stdlib_nameAlias,  (uint64_t)&_swift_stdlib_nameAlias_ranks);
  if (ScalarBitArrayIdx == 0x7FFFFFFFFFFFFFFFLL) {
    return 0LL;
  }
  else {
    return _swift_stdlib_nameAlias_data[ScalarBitArrayIdx];
  }
}

uint64_t _swift_stdlib_getMapping(unsigned int a1, int a2)
{
  uint64_t ScalarBitArrayIdx = _swift_stdlib_getScalarBitArrayIdx( a1,  _swift_stdlib_mappings,  (uint64_t)&_swift_stdlib_mappings_ranks);
  if (ScalarBitArrayIdx == 0x7FFFFFFFFFFFFFFFLL) {
    return 0LL;
  }
  unsigned int v4 = _swift_stdlib_mappings_data_indices[ScalarBitArrayIdx];
  if (a2)
  {
    if (a2 == 2)
    {
      v4 >>= 16;
    }

    else
    {
      if (a2 != 1) {
        return 0LL;
      }
      v4 >>= 8;
    }
  }

  return _swift_stdlib_mappings_data[v4];
}

uint64_t _swift_stdlib_getSpecialMapping(unsigned int a1, int a2, void *a3)
{
  uint64_t ScalarBitArrayIdx = _swift_stdlib_getScalarBitArrayIdx( a1,  _swift_stdlib_special_mappings,  (uint64_t)&_swift_stdlib_special_mappings_ranks);
  if (ScalarBitArrayIdx == 0x7FFFFFFFFFFFFFFFLL) {
    return 0LL;
  }
  unsigned int v6 = (unsigned __int8 *)&_swift_stdlib_special_mappings_data
     + _swift_stdlib_special_mappings_data_indices[ScalarBitArrayIdx];
  unsigned int v9 = *v6;
  uint64_t result = (uint64_t)(v6 + 1);
  uint64_t v8 = v9;
  int v10 = (unsigned __int8 *)(result + v9);
  unsigned int v13 = *v10;
  unint64_t v11 = v10 + 1;
  uint64_t v12 = v13;
  if (a2 == 2)
  {
    uint64_t result = (uint64_t)&v11[v12 + 1];
    uint64_t v8 = v11[v12];
LABEL_7:
    *a3 = v8;
    return result;
  }

  if (a2 != 1)
  {
    if (a2) {
      return 0LL;
    }
    goto LABEL_7;
  }

  *a3 = v12;
  return (uint64_t)v11;
}

uint64_t _swift_stdlib_getScalarName(unsigned int a1, uint64_t a2, uint64_t a3)
{
  int v3 = _swift_stdlib_names_scalar_sets[a1 >> 7];
  if (v3 == 0xFFFF) {
    return 0LL;
  }
  uint64_t v4 = a1 & 0x7F | (v3 << 7);
  int v5 = _swift_stdlib_names_scalars[v4];
  if (a1 != 32 && !v5) {
    return 0LL;
  }
  if ((_DWORD)v4 == 39551)
  {
    int v7 = 218144;
  }

  else
  {
    uint64_t v8 = &_swift_stdlib_names_scalars[v4 + 1];
    do
    {
      int v9 = *v8++;
      int v7 = v9;
    }

    while (!v9);
  }

  unsigned int v10 = v7 - v5;
  if (!v10) {
    return -1LL;
  }
  int v11 = 0;
  for (int i = 0; ; i += 2)
  {
    unint64_t v13 = _swift_stdlib_names[v11 + v5];
    if (v13 == 255)
    {
      uint64_t v14 = _swift_stdlib_names[v5 + 1 + v11];
      v11 += 2;
      unint64_t v13 = v14 | ((unint64_t)_swift_stdlib_names[v11 + v5] << 8);
    }

    uint64_t v15 = _swift_stdlib_word_indices[v13];
    int v16 = _swift_stdlib_words[v15];
    if ((v16 & 0x80000000) == 0) {
      break;
    }
LABEL_21:
    uint64_t result = i;
    if (i >= a3) {
      return result;
    }
    *(_BYTE *)(a2 + i) = v16 & 0x7F;
    if (i + 1LL >= a3) {
      return i + 1LL;
    }
    *(_BYTE *)(a2 + result + 1) = 32;
    if (++v11 >= v10) {
      return (int)result + 1;
    }
  }

  if (a3 <= i) {
    uint64_t result = i;
  }
  else {
    uint64_t result = a3;
  }
  uint64_t v17 = result - i;
  uint64_t v18 = (_BYTE *)(a2 + i);
  unint64_t v19 = &_swift_stdlib_words[v15 + 1];
  while (v17)
  {
    *v18++ = v16;
    int v20 = *v19++;
    LOBYTE(v16) = v20;
    --v17;
    ++i;
    if (v20 < 0) {
      goto LABEL_21;
    }
  }

  return result;
}

uint64_t _swift_stdlib_getAge(unsigned int a1)
{
  int v1 = 0;
  int v2 = 1690;
  while (1)
  {
    int v3 = v2 - v1;
    if (v2 < v1) {
      ++v3;
    }
    int v4 = v1 + (v3 >> 1);
    unint64_t v5 = _swift_stdlib_ages[v4];
    unint64_t v6 = v5 & 0x1FFFFF;
    unint64_t v7 = (v5 & 0x1FFFFF) + HIDWORD(v5);
    if ((v5 & 0x1FFFFF) <= a1 && v7 >= a1) {
      break;
    }
    int v9 = v4 - 1;
    if (v6 <= a1) {
      int v9 = v2;
    }
    if (v7 < a1) {
      int v1 = v4 + 1;
    }
    else {
      int v2 = v9;
    }
    if (v2 < v1) {
      return 0xFFFFLL;
    }
  }

  return _swift_stdlib_ages_data[(v5 >> 21)];
}

uint64_t _swift_stdlib_getGeneralCategory(unsigned int a1)
{
  int v1 = 0;
  int v2 = 4006;
  while (1)
  {
    int v3 = v2 - v1;
    if (v2 < v1) {
      ++v3;
    }
    int v4 = v1 + (v3 >> 1);
    unint64_t v5 = _swift_stdlib_generalCategory[v4];
    unint64_t v6 = v5 & 0x1FFFFF;
    unint64_t v7 = (v5 & 0x1FFFFF) + HIDWORD(v5);
    if ((v5 & 0x1FFFFF) <= a1 && v7 >= a1) {
      break;
    }
    int v9 = v4 - 1;
    if (v6 <= a1) {
      int v9 = v2;
    }
    if (v7 < a1) {
      int v1 = v4 + 1;
    }
    else {
      int v2 = v9;
    }
    if (v2 < v1) {
      return 255LL;
    }
  }

  return (v5 >> 21);
}

uint64_t _swift_stdlib_getScript(unsigned int a1)
{
  int v1 = 0;
  int v2 = 1657;
  while (1)
  {
    int v3 = v2 - v1;
    if (v2 < v1) {
      ++v3;
    }
    int v4 = v1 + (v3 >> 1);
    int v5 = v4;
    unsigned int v6 = v4 == 1657 ? 1114111 : (_swift_stdlib_scripts[v4 + 1] & 0x1FFFFF) - 1;
    unsigned int v7 = _swift_stdlib_scripts[v4];
    if ((v7 & 0x1FFFFF) <= a1 && v6 >= a1) {
      break;
    }
    if ((v7 & 0x1FFFFF) <= a1) {
      int v9 = v2;
    }
    else {
      int v9 = v4 - 1;
    }
    if (v6 < a1) {
      int v1 = v5 + 1;
    }
    else {
      int v2 = v9;
    }
    if (v2 < v1) {
      return 255LL;
    }
  }

  return (v7 >> 21);
}

char *_swift_stdlib_getScriptExtensions(unsigned int a1, _BYTE *a2)
{
  uint64_t ScalarBitArrayIdx = _swift_stdlib_getScalarBitArrayIdx( a1,  _swift_stdlib_script_extensions,  (uint64_t)&_swift_stdlib_script_extensions_ranks);
  if (ScalarBitArrayIdx == 0x7FFFFFFFFFFFFFFFLL) {
    return 0LL;
  }
  unsigned int v5 = _swift_stdlib_script_extensions_data_indices[ScalarBitArrayIdx];
  *a2 = v5 >> 11;
  return (char *)&_swift_stdlib_script_extensions_data + (v5 & 0x7FF);
}

uint64_t _swift_stdlib_getCaseMapping(int a1, int *a2)
{
  int v3 = a1;
  uint64_t result = _swift_stdlib_getMphIdx( a1,  11LL,  (uint64_t)&_swift_stdlib_case_keys,  (uint64_t)&_swift_stdlib_case_ranks,  (uint64_t)&_swift_stdlib_case_sizes);
  unint64_t v5 = _swift_stdlib_case[result];
  if ((_swift_stdlib_case[result] & 0x1FFFFF) != v3) {
    goto LABEL_4;
  }
  if ((v5 & 0x8000000000000000LL) == 0)
  {
    v3 -= v5 >> 21;
LABEL_4:
    *a2 = v3;
    return result;
  }

  uint64_t result = _swift_stdlib_getMphIdx( v3,  5LL,  (uint64_t)&_swift_stdlib_case_full_keys,  (uint64_t)&_swift_stdlib_case_full_ranks,  (uint64_t)L"hF@@@");
  unint64_t v6 = _swift_stdlib_case_full[result];
  unint64_t v7 = v6 >> 62;
  do
  {
    int v8 = (unsigned __int16)v6;
    if ((v6 & 0x10000) == 0) {
      int v8 = -(unsigned __int16)v6;
    }
    v6 >>= 17;
    *a2++ = v8 + v3;
    --v7;
  }

  while (v7);
  return result;
}

uint64_t _swift_stdlib_getWordBreakProperty(unsigned int a1)
{
  int v1 = 1;
  while (1)
  {
    while (1)
    {
      uint64_t v2 = v1;
      unsigned int v3 = _swift_stdlib_words[v1];
      if ((v3 & 0x1FFFFF) <= a1) {
        break;
      }
      int v1 = 2 * v2;
    }

    if ((v3 & 0x1FFFFF) + (v3 >> 21) - 1 >= a1) {
      break;
    }
    int v1 = (2 * v2) | 1;
    if (v1 >= 1123) {
      return 255LL;
    }
  }

  return _swift_stdlib_words_data[v2];
}

void _swift_stdlib_operatingSystemVersion(void *a1@<X8>)
{
  if (qword_18C575A88 != -1) {
    dispatch_once_f( &qword_18C575A88,  &_swift_stdlib_operatingSystemVersion::$_0::operator() const(void)::TheLazy,  (dispatch_function_t)_swift_stdlib_operatingSystemVersion::$_0::operator() const(void)::{lambda(void *)#1}::__invoke);
  }
  uint64_t v2 = dword_18C575A80;
  uint64_t v3 = _swift_stdlib_operatingSystemVersion::$_0::operator() const(void)::TheLazy >> 32;
  *a1 = (int)_swift_stdlib_operatingSystemVersion::$_0::operator() const(void)::TheLazy;
  a1[1] = v3;
  a1[2] = v2;
}

uint64_t _swift_stdlib_operatingSystemVersion::$_0::operator() const(void)::{lambda(void *)#1}::__invoke( uint64_t a1)
{
  uint64_t result = os_system_version_get_current_version();
  *(void *)a1 = 0LL;
  *(_DWORD *)(a1 + 8) = 0;
  return result;
}

BOOL _swift_stdlib_isNSString()
{
  return CFGetTypeID_delayInitStub(v0) == _CFStringTypeID;
}

uint64_t _swift_stdlib_CFStringHashNSString()
{
  return CFStringHashNSString_delayInitStub(v0);
}

uint64_t _swift_stdlib_CFStringHashCString()
{
  return CFStringHashCString_delayInitStub(v0);
}

uint64_t _swift_stdlib_NSStringCStringUsingEncodingTrampoline(void *a1, uint64_t a2)
{
  IMP MethodImplementation = class_getMethodImplementation((Class)[a1 superclass], sel_cStringUsingEncoding_);
  return (uint64_t)MethodImplementation(a1, sel_cStringUsingEncoding_, a2);
}

uint64_t _swift_stdlib_NSStringGetCStringTrampoline(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  IMP MethodImplementation = class_getMethodImplementation( (Class)[a1 superclass],  sel_getCString_maxLength_encoding_);
  return (uint64_t)MethodImplementation(a1, sel_getCString_maxLength_encoding_, a2, a3, a4);
}

uint64_t _swift_stdlib_dyld_is_objc_constant_string()
{
  if (MEMORY[0x1895F8C68]) {
    return _dyld_is_objc_constant();
  }
  else {
    return 0LL;
  }
}

uint64_t _initializeBridgingFunctionsImpl(void *a1, double a2)
{
  uint64_t result = CFStringGetTypeID_delayInitStub(a2);
  _CFStringTypeID = result;
  return result;
}

__SwiftNull *_swift_Foundation_getOptionalNilSentinelObject( uint64_t *a1, uint64_t a2, const char *a3, char *a4)
{
  if (*a1 != 514) {
    goto LABEL_12;
  }
  LODWORD(v4) = 0;
  do
  {
    a1 = (uint64_t *)*swift::TargetMetadata<swift::InProcess>::getGenericArgs(a1, a2, a3, a4);
    unint64_t v4 = (v4 + 1);
  }

  while (*a1 == 514);
  if ((_DWORD)v4)
  {
    if (qword_18C575AB0 != -1) {
    unint64_t v5 = (v4 - 1);
    }
    os_unfair_lock_lock((os_unfair_lock_t)&unk_18C575AA8);
    {
      os_unfair_lock_unlock((os_unfair_lock_t)&unk_18C575AA8);
      os_unfair_lock_lock((os_unfair_lock_t)&unk_18C575AA8);
      if (v8 <= v5)
      {
        if (v4 <= v8)
        {
          if (v4 < v8) {
        }
          }

        else
        {
        }
      }

      unint64_t v6 = *(__SwiftNull **)(v7 + 8 * v5);
      if (!v6)
      {
        unint64_t v6 = objc_alloc_init(&OBJC_CLASS_____SwiftNull);
        v6->depth = v4 + 1;
        *(void *)(v7 + 8 * __swift::__runtime::llvm::hash_value(v4, v5) = v6;
      }
    }

    int v11 = v6;
    os_unfair_lock_unlock((os_unfair_lock_t)&unk_18C575AA8);
    int v9 = v11;
  }

  else
  {
LABEL_12:
    if (qword_18C486FE8 != -1) {
  }
    }

  return v9;
}

void sub_1817FC98C(_Unwind_Exception *a1)
{
}

double swift::Lazy<anonymous namespace'::SwiftNullSentinelCache>::defaultInitCallback(_OWORD *a1)
{
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t anonymous namespace'::getSentinelForDepth(unsigned int)::$_0::operator() const(void)::{lambda(void *)#1}::__invoke( uint64_t *a1)
{
  uint64_t result = -[objc_class null](objc_getClass("NSNull"), "null");
  *a1 = result;
  return result;
}

void std::vector<objc_object *>::__append(void **a1, unint64_t a2)
{
  unint64_t v5 = (char *)a1[1];
  unint64_t v4 = a1[2];
  unint64_t v6 = v5;
  if (a2 <= (v4 - v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      unint64_t v6 = &v5[8 * a2];
    }

    a1[1] = v6;
  }

  else
  {
    uint64_t v7 = (char *)*a1;
    uint64_t v8 = v5 - (_BYTE *)*a1;
    uint64_t v9 = v8 >> 3;
    unint64_t v10 = (v8 >> 3) + a2;
    if (v10 >> 61) {
      abort();
    }
    uint64_t v11 = v4 - v7;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      unint64_t v13 = operator new(8 * v12);
    }

    else
    {
      unint64_t v13 = 0LL;
    }

    uint64_t v14 = &v13[8 * v9];
    size_t v15 = 8 * a2;
    int v16 = &v13[8 * v12];
    bzero(v14, v15);
    uint64_t v17 = &v14[v15];
    if (v5 != v7)
    {
      unint64_t v18 = v5 - v7 - 8;
      if (v18 < 0x58) {
        goto LABEL_30;
      }
      uint64_t v19 = (v18 >> 3) + 1;
      uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      unint64_t v6 = &v5[-v20];
      v14 -= v20;
      unint64_t v21 = &v13[8 * v9 - 16];
      unint64_t v22 = v5 - 16;
      uint64_t v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        __int128 v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *unint64_t v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 4LL;
      }

      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_30:
        do
        {
          uint64_t v25 = *((void *)v6 - 1);
          v6 -= 8;
          *((void *)v14 - 1) = v25;
          v14 -= 8;
        }

        while (v6 != v7);
      }

      unint64_t v6 = (char *)*a1;
    }

    *a1 = v14;
    a1[1] = v17;
    a1[2] = v16;
    if (v6) {
      operator delete(v6);
    }
  }

uint64_t _swift_stdlib_NSObject_isKindOfClass(int a1, char *name)
{
  return objc_opt_isKindOfClass();
}

uint64_t swift_stdlib_NSStringHashValue(void *a1, char a2)
{
  if ((a2 & 1) != 0) {
    return [a1 hash];
  }
  [a1 decomposedStringWithCanonicalMapping];
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v4 = [v3 hash];

  return v4;
}

uint64_t swift_stdlib_NSStringHashValuePointer(void *a1, char a2)
{
  if ((a2 & 1) != 0) {
    return [a1 hash];
  }
  [a1 decomposedStringWithCanonicalMapping];
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v4 = [v3 hash];

  return v4;
}

uint64_t swift_stdlib_NSObject_isEqual(void *a1, void *a2)
{
  if (a1 == a2) {
    return 1LL;
  }
  else {
    return objc_msgSend(a1, "isEqual:", a2, v2, v3);
  }
}

objc_class *swift_stdlib_connectNSBaseClasses()
{
  uint64_t result = objc_lookUpClass("NSArray");
  if (result)
  {
    int v1 = result;
    uint64_t result = objc_lookUpClass("__SwiftNativeNSArrayBase");
    if (result)
    {
      class_setSuperclass(result, v1);
      uint64_t result = objc_lookUpClass("NSMutableArray");
      if (result)
      {
        uint64_t v2 = result;
        uint64_t result = objc_lookUpClass("__SwiftNativeNSMutableArrayBase");
        if (result)
        {
          class_setSuperclass(result, v2);
          uint64_t result = objc_lookUpClass("NSDictionary");
          if (result)
          {
            uint64_t v3 = result;
            uint64_t result = objc_lookUpClass("__SwiftNativeNSDictionaryBase");
            if (result)
            {
              class_setSuperclass(result, v3);
              uint64_t result = objc_lookUpClass("NSSet");
              if (result)
              {
                uint64_t v4 = result;
                uint64_t result = objc_lookUpClass("__SwiftNativeNSSetBase");
                if (result)
                {
                  class_setSuperclass(result, v4);
                  uint64_t result = objc_lookUpClass("NSString");
                  if (result)
                  {
                    unint64_t v5 = result;
                    uint64_t result = objc_lookUpClass("__SwiftNativeNSStringBase");
                    if (result)
                    {
                      class_setSuperclass(result, v5);
                      uint64_t result = objc_lookUpClass("NSEnumerator");
                      if (result)
                      {
                        unint64_t v6 = result;
                        uint64_t result = objc_lookUpClass("__SwiftNativeNSEnumeratorBase");
                        if (result)
                        {
                          class_setSuperclass(result, v6);
                          return (objc_class *)1;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  return result;
}

uint64_t _swift_stdlib_overrideUnsafeArgvArgc(uint64_t result, int a2)
{
  _swift_stdlib_ProcessOverrideUnsafeArgv = result;
  _swift_stdlib_ProcessOverrideUnsafeArgc = a2;
  return result;
}

char **_swift_stdlib_getUnsafeArgvArgc(int *a1)
{
  uint64_t result = (char **)_swift_stdlib_ProcessOverrideUnsafeArgv;
  if (_swift_stdlib_ProcessOverrideUnsafeArgv)
  {
    int v3 = _swift_stdlib_ProcessOverrideUnsafeArgc;
  }

  else
  {
    *a1 = *_NSGetArgc();
    uint64_t result = *_NSGetArgv();
    if (result) {
      return result;
    }
    int v3 = 0;
    uint64_t result = (char **)&_swift_stdlib_getUnsafeArgvArgc::emptyArgv;
  }

  *a1 = v3;
  return result;
}

uint64_t compatibilityInitializeAvailabilityCheck()
{
  return _initializeAvailabilityCheck(1LL);
}

uint64_t __isPlatformVersionAtLeast(uint64_t a1, int a2, int a3, int a4)
{
  if (qword_18C487008 == -1)
  {
    if (qword_18C487010) {
      return _availability_version_check();
    }
  }

  else
  {
    dispatch_once_f(&qword_18C487008, 0LL, (dispatch_function_t)initializeAvailabilityCheck);
    if (qword_18C487010) {
      return _availability_version_check();
    }
  }

  if (qword_18C487000 == -1)
  {
    BOOL v8 = _MergedGlobals < a2;
    if (_MergedGlobals > a2) {
      return 1LL;
    }
  }

  else
  {
    dispatch_once_f(&qword_18C487000, 0LL, (dispatch_function_t)compatibilityInitializeAvailabilityCheck);
    BOOL v8 = _MergedGlobals < a2;
    if (_MergedGlobals > a2) {
      return 1LL;
    }
  }

  if (v8) {
    return 0LL;
  }
  if (dword_18C486FF4 > a3) {
    return 1LL;
  }
  return dword_18C486FF4 >= a3 && dword_18C486FF8 >= a4;
}

uint64_t initializeAvailabilityCheck()
{
  return _initializeAvailabilityCheck(0LL);
}

uint64_t _initializeAvailabilityCheck(uint64_t result)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  int v1 = (uint64_t (*)(void))qword_18C487010;
  if (qword_18C487010) {
    BOOL v2 = (_DWORD)result == 0;
  }
  else {
    BOOL v2 = 0;
  }
  if (!v2)
  {
    if (MEMORY[0x1895F8A70])
    {
      qword_18C487010 = (uint64_t)MEMORY[0x1895F8A70];
      int v1 = MEMORY[0x1895F8A70];
    }

    if (!v1 || (_DWORD)result != 0)
    {
      uint64_t result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "kCFAllocatorNull");
      if (result)
      {
        uint64_t v4 = *(unsigned __int8 **)result;
        uint64_t result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFDataCreateWithBytesNoCopy");
        if (result)
        {
          unint64_t v5 = (uint64_t (*)(void))result;
          unint64_t v6 = (unint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFPropertyListCreateWithData");
          uint64_t result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFPropertyListCreateFromXMLData");
          if (v6 | result)
          {
            uint64_t v7 = (uint64_t (*)(void, uint64_t, void, void))result;
            uint64_t result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFStringCreateWithCStringNoCopy");
            if (result)
            {
              BOOL v8 = (uint64_t (*)(void, const char *, uint64_t, unsigned __int8 *))result;
              uint64_t result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFDictionaryGetValue");
              if (result)
              {
                uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))result;
                uint64_t result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFGetTypeID");
                if (result)
                {
                  unint64_t v10 = (uint64_t (*)(uint64_t))result;
                  uint64_t result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFStringGetTypeID");
                  if (result)
                  {
                    uint64_t v11 = (uint64_t (*)(void))result;
                    uint64_t result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFStringGetCString");
                    int v28 = (unsigned int (*)(uint64_t, char *, uint64_t, uint64_t))result;
                    if (result)
                    {
                      uint64_t result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFRelease");
                      if (result)
                      {
                        unint64_t v12 = (FILE *)result;
                        uint64_t result = (uint64_t)fopen("/System/Library/CoreServices/SystemVersion.plist", "r");
                        if (result)
                        {
                          unint64_t v13 = (FILE *)result;
                          unint64_t v27 = v12;
                          fseek((FILE *)result, 0LL, 2);
                          uint64_t v14 = MEMORY[0x186E0C078](v13);
                          if (v14 < 0)
                          {
                            int v16 = 0LL;
                          }

                          else
                          {
                            size_t v15 = v14;
                            rewind(v13);
                            int v16 = malloc(v15);
                            if (v16)
                            {
                              unint64_t v26 = v16;
                              if (fread(v16, 1uLL, v15, v13) == v15)
                              {
                                uint64_t v17 = v5(0LL);
                                if (v17)
                                {
                                  uint64_t v18 = v17;
                                  uint64_t v19 = v13;
                                  if (v6) {
                                    uint64_t v20 = ((uint64_t (*)(void, uint64_t, void, void, void))v6)( 0LL,  v17,  0LL,  0LL,  0LL);
                                  }
                                  else {
                                    uint64_t v20 = v7(0LL, v17, 0LL, 0LL);
                                  }
                                  uint64_t v21 = v20;
                                  if (v20)
                                  {
                                    uint64_t v22 = v8(0LL, "ProductVersion", 1536LL, v4);
                                    if (v22)
                                    {
                                      uint64_t v23 = v22;
                                      uint64_t v24 = v9(v21, v22);
                                      ((void (*)(uint64_t))v27)(v23);
                                      if (v24)
                                      {
                                        uint64_t v25 = v10(v24);
                                        if (v25 == v11())
                                        {
                                          if (v28(v24, v29, 32LL, 134217984LL)) {
                                            sscanf(v29, "%d.%d.%d", &_MergedGlobals, &dword_18C486FF4, &dword_18C486FF8);
                                          }
                                        }
                                      }
                                    }

                                    ((void (*)(uint64_t))v27)(v21);
                                    uint64_t v19 = v13;
                                  }

                                  ((void (*)(uint64_t))v27)(v18);
                                }

                                else
                                {
                                  uint64_t v19 = v13;
                                }

                                int v16 = v26;
                              }

                              else
                              {
                                int v16 = v26;
                                uint64_t v19 = v13;
                              }

                              goto LABEL_41;
                            }
                          }

                          uint64_t v19 = v13;
LABEL_41:
                          free(v16);
                          return fclose(v19);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  return result;
}

void swift::hashable_support::findHashableBaseTypeOfHashableType()
{
  qword_18C565C20 = (uint64_t)"Could not allocate memory.";
  __break(1u);
}

void _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)()
{
  qword_18C565C20 = (uint64_t)"value type is not bridged to Objective-C";
  __break(1u);
}

void swift_reflectionMirror_normalizedType_cold_1()
{
  qword_18C565C20 = (uint64_t)"Swift mirror lookup failure";
  __break(1u);
}

void swift_reflectionMirror_recursiveChildMetadata_cold_1()
{
  qword_18C565C20 = (uint64_t)"Opaque types have no children.";
  __break(1u);
}

void swift_reflectionMirror_recursiveChildMetadata_cold_2()
{
  qword_18C565C20 = (uint64_t)"FRT has no children.";
  __break(1u);
}

void swift_reflectionMirror_recursiveChildMetadata_cold_3()
{
  qword_18C565C20 = (uint64_t)"Metatypes have no children.";
  __break(1u);
}

void swift_reflectionMirror_recursiveChildOffset_cold_2()
{
  qword_18C565C20 = (uint64_t)"Swift mirror subscript bounds check failure";
  __break(1u);
}

void swift_reflectionMirror_recursiveChildOffset_cold_3()
{
  qword_18C565C20 = (uint64_t)"Cannot find offset of FRT.";
  __break(1u);
}

void swift_reflectionMirror_recursiveChildOffset_cold_7()
{
  qword_18C565C20 = (uint64_t)"Cannot get children of Objective-C objects.";
  __break(1u);
}

void swift_reflectionMirror_subscript_cold_3(const void *aBlock)
{
  qword_18C565C20 = (uint64_t)"FRT has no subscript.";
  __break(1u);
  _Block_copy(aBlock);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1895F8720](aBlock);
}

void _Block_release(const void *aBlock)
{
}

int *_NSGetArgc(void)
{
  return (int *)MEMORY[0x1895F87B8]();
}

char ***_NSGetArgv(void)
{
  return (char ***)MEMORY[0x1895F87C0]();
}

mach_header_64 *_NSGetMachExecuteHeader(void)
{
  return (mach_header_64 *)MEMORY[0x1895F87D8]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x1896142A0](__n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1896142D0](this, __s);
}

std::string *__cdecl std::string::append( std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1896142D8](this, __s, __n);
}

std::string *__cdecl std::string::append(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  return (std::string *)MEMORY[0x1896142E8](this, __n, __c);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1896142F0](this, __s);
}

std::string *__cdecl std::string::insert( std::string *this, std::string::size_type __pos, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x189614308](this, __pos, __s);
}

std::string *__cdecl std::string::insert( std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x189614310](this, __pos, __s, __n);
}

void std::string::reserve(std::string *this, std::string::size_type __requested_capacity)
{
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
}

void std::__libcpp_verbose_abort(const char *__format, ...)
{
}

unsigned int std::thread::hardware_concurrency(void)
{
  return MEMORY[0x1896145E0]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return (std::string *)MEMORY[0x189614650](retstr, *(void *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unsigned int __val)
{
  return (std::string *)MEMORY[0x189614658](retstr, *(void *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return (std::string *)MEMORY[0x189614668](retstr, __val);
}

{
  return (std::string *)MEMORY[0x189614678](retstr, __val);
}

uint64_t std::operator+<char>()
{
  return MEMORY[0x189614680]();
}

void operator delete(void *__p)
{
}

void operator delete(void *__p, std::align_val_t a2)
{
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_189B77AB0(__sz);
}

void *__cdecl operator new(size_t __sz, std::align_val_t a2)
{
  return (void *)off_189B77AB8(__sz, a2);
}

char *__cxa_demangle(const char *lpmangled, char *lpout, size_t *lpoutlen, int *lpstatus)
{
  return (char *)MEMORY[0x1896147C8](lpmangled, lpout, lpoutlen, lpstatus);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1896147F0](a1);
}

void __cxa_guard_release(__guard *a1)
{
}

uint64_t __divti3()
{
  return MEMORY[0x1895F8888]();
}

int *__error(void)
{
  return (int *)MEMORY[0x1895F8898]();
}

uint64_t __modti3()
{
  return MEMORY[0x1895F8950]();
}

uint64_t __udivti3()
{
  return MEMORY[0x1895F8A38]();
}

uint64_t __umodti3()
{
  return MEMORY[0x1895F8A50]();
}

uint64_t _availability_version_check()
{
  return MEMORY[0x1895F8A70]();
}

uint64_t _dyld_find_foreign_type_protocol_conformance()
{
  return MEMORY[0x1895F8BB0]();
}

uint64_t _dyld_find_foreign_type_protocol_conformance_on_disk()
{
  return MEMORY[0x1895F8BB8]();
}

uint64_t _dyld_find_pointer_hash_table_entry()
{
  return MEMORY[0x1895F8BC0]();
}

uint64_t _dyld_find_protocol_conformance()
{
  return MEMORY[0x1895F8BC8]();
}

uint64_t _dyld_find_protocol_conformance_on_disk()
{
  return MEMORY[0x1895F8BD0]();
}

uint64_t _dyld_get_shared_cache_range()
{
  return MEMORY[0x1895F8C38]();
}

uint64_t _dyld_get_swift_prespecialized_data()
{
  return MEMORY[0x1895F8C48]();
}

uint64_t _dyld_has_preoptimized_swift_protocol_conformances()
{
  return MEMORY[0x1895F8C50]();
}

uint64_t _dyld_is_objc_constant()
{
  return MEMORY[0x1895F8C68]();
}

uint64_t _dyld_lookup_section_info()
{
  return MEMORY[0x1895F8C78]();
}

uint64_t _dyld_swift_optimizations_version()
{
  return MEMORY[0x1895F8CF8]();
}

Class _objc_realizeClassFromSwift(Class cls, void *previously)
{
  return (Class)MEMORY[0x1896163D0](cls, previously);
}

uint64_t _objc_rootAutorelease()
{
  return MEMORY[0x1896163F0]();
}

uint64_t _os_feature_enabled_simple_impl()
{
  return MEMORY[0x1895F8D90]();
}

void _os_signpost_emit_with_name_impl( void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _os_trace_lazy_init_completed_4swift()
{
  return MEMORY[0x1895F8E90]();
}

void abort(void)
{
}

void arc4random_buf(void *__buf, size_t __nbytes)
{
}

int asl_log(asl_object_t client, asl_object_t msg, int level, const char *format, ...)
{
  return MEMORY[0x1895F9510](client, msg, *(void *)&level, format);
}

int asprintf(char **a1, const char *a2, ...)
{
  return MEMORY[0x1895F9540](a1, a2);
}

int backtrace(void **a1, int a2)
{
  return MEMORY[0x1895F95D0](a1, *(void *)&a2);
}

void bzero(void *a1, size_t a2)
{
}

void *__cdecl calloc(size_t __count, size_t __size)
{
  return (void *)MEMORY[0x1895F9710](__count, __size);
}

BOOL class_conformsToProtocol(Class cls, Protocol *protocol)
{
  return MEMORY[0x189616470](cls, protocol);
}

Ivar *__cdecl class_copyIvarList(Class cls, unsigned int *outCount)
{
  return (Ivar *)MEMORY[0x189616478](cls, outCount);
}

id class_createInstance(Class cls, size_t extraBytes)
{
  return (id)MEMORY[0x189616498](cls, extraBytes);
}

size_t class_getInstanceSize(Class cls)
{
  return MEMORY[0x1896164B8](cls);
}

IMP class_getMethodImplementation(Class cls, SEL name)
{
  return (IMP)MEMORY[0x1896164C8](cls, name);
}

const char *__cdecl class_getName(Class cls)
{
  return (const char *)MEMORY[0x1896164D0](cls);
}

Class class_getSuperclass(Class cls)
{
  return (Class)MEMORY[0x1896164E0](cls);
}

BOOL class_isMetaClass(Class cls)
{
  return MEMORY[0x1896164F0](cls);
}

BOOL class_respondsToSelector(Class cls, SEL sel)
{
  return MEMORY[0x189616500](cls, sel);
}

Class class_setSuperclass(Class cls, Class newSuper)
{
  return (Class)MEMORY[0x189616508](cls, newSuper);
}

double cos(double a1)
{
  return result;
}

float cosf(float a1)
{
  return result;
}

void dispatch_once_f(dispatch_once_t *predicate, void *context, dispatch_function_t function)
{
}

int dladdr(const void *a1, Dl_info *a2)
{
  return MEMORY[0x1895FAF48](a1, a2);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x1895FAF58]();
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x1895FAF60](__path, *(void *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1895FAF78](__handle, __symbol);
}

uint64_t dyld_image_path_containing_address()
{
  return MEMORY[0x1895FB030]();
}

uint64_t dyld_program_sdk_at_least()
{
  return MEMORY[0x1895FB088]();
}

uint64_t dyld_shared_cache_some_image_overridden()
{
  return MEMORY[0x1895FB0D8]();
}

double exp(double a1)
{
  return result;
}

double exp2(double a1)
{
  return result;
}

float exp2f(float a1)
{
  return result;
}

float expf(float a1)
{
  return result;
}

int fclose(FILE *a1)
{
  return MEMORY[0x1895FB208](a1);
}

int fflush(FILE *a1)
{
  return MEMORY[0x1895FB268](a1);
}

void flockfile(FILE *a1)
{
}

double fmod(double a1, double a2)
{
  return result;
}

float fmodf(float a1, float a2)
{
  return result;
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x1895FB348](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1895FB360](a1, a2);
}

int fputs(const char *a1, FILE *a2)
{
  return MEMORY[0x1895FB378](a1, a2);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1895FB388](__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
}

int fseek(FILE *a1, uint64_t a2, int a3)
{
  return MEMORY[0x1895FB420](a1, a2, *(void *)&a3);
}

uint64_t ftell(FILE *a1)
{
  return MEMORY[0x1895FB470](a1);
}

void funlockfile(FILE *a1)
{
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1895FB4C8](__ptr, __size, __nitems, __stream);
}

ssize_t getline(char **__linep, size_t *__linecapp, FILE *__stream)
{
  return MEMORY[0x1895FB5B8](__linep, __linecapp, __stream);
}

uint8_t *__cdecl getsectiondata( const mach_header_64 *mhp, const char *segname, const char *sectname, unint64_t *size)
{
  return (uint8_t *)MEMORY[0x1895FB6A0](mhp, segname, sectname, size);
}

int issetugid(void)
{
  return MEMORY[0x1895FB870]();
}

ptrdiff_t ivar_getOffset(Ivar v)
{
  return MEMORY[0x189616538](v);
}

double log(double a1)
{
  return result;
}

double log10(double a1)
{
  return result;
}

float log10f(float a1)
{
  return result;
}

double log2(double a1)
{
  return result;
}

float log2f(float a1)
{
  return result;
}

float logf(float a1)
{
  return result;
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x1895FBC88](__size);
}

malloc_zone_t *malloc_default_zone(void)
{
  return (malloc_zone_t *)MEMORY[0x1895FBCA0]();
}

size_t malloc_good_size(size_t size)
{
  return MEMORY[0x1895FBCC0](size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1895FBCE0](ptr);
}

malloc_zone_t *__cdecl malloc_zone_from_ptr(const void *ptr)
{
  return (malloc_zone_t *)MEMORY[0x1895FBD28](ptr);
}

void *__cdecl memchr(const void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x1895FBE00](__s, *(void *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1895FBE08](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1895FBE18](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1895FBE30](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1895FBE48](__b, *(void *)&__c, __len);
}

uint64_t objc_addLoadImageFunc2()
{
  return MEMORY[0x1896165A8]();
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1896165C0]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1896165D8](a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1896165F0](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x189616600]();
}

id objc_constructInstance(Class cls, void *bytes)
{
  return (id)MEMORY[0x189616608](cls, bytes);
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void *__cdecl objc_destructInstance(id obj)
{
  return (void *)MEMORY[0x189616668](obj);
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1896166B8](name);
}

Protocol *__cdecl objc_getProtocol(const char *name)
{
  return (Protocol *)MEMORY[0x1896166D0](name);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1896166D8](location, val);
}

uint64_t objc_isUniquelyReferenced()
{
  return MEMORY[0x1896166F0]();
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x189616700](location);
}

Class objc_lookUpClass(const char *name)
{
  return (Class)MEMORY[0x189616708](name);
}

void objc_moveWeak(id *to, id *from)
{
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x189616718](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x189616728](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x189616730]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x189616738]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x189616740]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x189616748]();
}

uint64_t objc_opt_self()
{
  return MEMORY[0x189616750]();
}

uint64_t objc_readClassPair()
{
  return MEMORY[0x189616758]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x189616818](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x189616830](a1);
}

void objc_setHook_getClass(objc_hook_getClass newValue, objc_hook_getClass *outOldValue)
{
}

void objc_setHook_getImageName(objc_hook_getImageName newValue, objc_hook_getImageName *outOldValue)
{
}

void objc_setHook_lazyClassNamer(objc_hook_lazyClassNamer newValue, objc_hook_lazyClassNamer *oldOutValue)
{
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x189616968](location, obj);
}

id object_dispose(id a1)
{
  return (id)MEMORY[0x1896169A0](a1);
}

Class object_getClass(id a1)
{
  return (Class)MEMORY[0x1896169A8](a1);
}

Class object_setClass(id a1, Class a2)
{
  return (Class)MEMORY[0x1896169D8](a1, a2);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1895FC440](subsystem, category);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x1895FC600](log);
}

os_signpost_id_t os_signpost_id_generate(os_log_t log)
{
  return MEMORY[0x1895FC608](log);
}

uint64_t os_system_version_get_current_version()
{
  return MEMORY[0x1895FC630]();
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

int posix_memalign(void **__memptr, size_t __alignment, size_t __size)
{
  return MEMORY[0x1895FC7D8](__memptr, __alignment, __size);
}

BOOL protocol_conformsToProtocol(Protocol *proto, Protocol *other)
{
  return MEMORY[0x189616A10](proto, other);
}

const char *__cdecl protocol_getName(Protocol *p)
{
  return (const char *)MEMORY[0x189616A40](p);
}

void *__cdecl pthread_get_stackaddr_np(pthread_t a1)
{
  return (void *)MEMORY[0x1895FCA20](a1);
}

size_t pthread_get_stacksize_np(pthread_t a1)
{
  return MEMORY[0x1895FCA28](a1);
}

uint64_t pthread_key_init_np()
{
  return MEMORY[0x1895FCA68]();
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x1895FCB20]();
}

int putc(int a1, FILE *a2)
{
  return MEMORY[0x1895FCB80](*(void *)&a1, a2);
}

void *__cdecl realloc(void *__ptr, size_t __size)
{
  return (void *)MEMORY[0x1895FCC68](__ptr, __size);
}

double remainder(double a1, double a2)
{
  return result;
}

float remainderf(float a1, float a2)
{
  return result;
}

void rewind(FILE *a1)
{
}

const char *__cdecl sel_getName(SEL sel)
{
  return (const char *)MEMORY[0x189616A48](sel);
}

double sin(double a1)
{
  return result;
}

float sinf(float a1)
{
  return result;
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1895FCF90](__str, __size, __format);
}

int sscanf(const char *a1, const char *a2, ...)
{
  return MEMORY[0x1895FCFD0](a1, a2);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x1895FD010](a1, a2);
}

char *__cdecl strchr(const char *__s, int __c)
{
  return (char *)MEMORY[0x1895FD048](__s, *(void *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1895FD050](__s1, __s2);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x1895FD078](__s1);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1895FD0B8](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1895FD0E8](__s1, __s2, __n);
}

char *__cdecl strrchr(const char *__s, int __c)
{
  return (char *)MEMORY[0x1895FD120](__s, *(void *)&__c);
}

double strtod_l(const char *a1, char **a2, locale_t a3)
{
  return result;
}

float strtof_l(const char *a1, char **a2, locale_t a3)
{
  return result;
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1895FD180](__str, __endptr, *(void *)&__base);
}

long double strtold_l(const char *a1, char **a2, locale_t a3)
{
  return result;
}

uint64_t strtoll(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1895FD1A0](__str, __endptr, *(void *)&__base);
}

int vfprintf(FILE *a1, const char *a2, va_list a3)
{
  return MEMORY[0x1895FD528](a1, a2, a3);
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return MEMORY[0x1895FD610](__str, __size, __format, a4);
}

uint64_t _s10Foundation24_getErrorDefaultUserInfoyyXlSgxs0C0RzlF_delayInitStub(double a1)
{
  if (!atomic_load(&dlopenHelperFlag_Foundation)) {
    dlopenHelper_Foundation(a1);
  }
  return MEMORY[0x189606950]();
}

uint64_t _s10Foundation21_bridgeNSErrorToError_3outSbSo0C0C_SpyxGtAA021_ObjectiveCBridgeableE0RzlF_delayInitStub( double a1)
{
  if (!atomic_load(&dlopenHelperFlag_Foundation)) {
    dlopenHelper_Foundation(a1);
  }
  return MEMORY[0x189606920]();
}

uint64_t CFGetTypeID_delayInitStub(double a1)
{
  if (!atomic_load(&dlopenHelperFlag_CoreFoundation)) {
    dlopenHelper_CoreFoundation(a1);
  }
  return MEMORY[0x189602D30]();
}

uint64_t CFStringHashNSString_delayInitStub(double a1)
{
  if (!atomic_load(&dlopenHelperFlag_CoreFoundation)) {
    dlopenHelper_CoreFoundation(a1);
  }
  return MEMORY[0x1896035C8]();
}

uint64_t CFStringHashCString_delayInitStub(double a1)
{
  if (!atomic_load(&dlopenHelperFlag_CoreFoundation)) {
    dlopenHelper_CoreFoundation(a1);
  }
  return MEMORY[0x1896035B0]();
}

uint64_t CFStringGetTypeID_delayInitStub(double a1)
{
  if (!atomic_load(&dlopenHelperFlag_CoreFoundation)) {
    dlopenHelper_CoreFoundation(a1);
  }
  return MEMORY[0x189603590]();
}

double __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> dlopenHelper_CoreFoundation( double a1)
{
  return a1;
}

double __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> dlopenHelper_Foundation( double a1)
{
  return a1;
}

double __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> dlopenHelper_libswiftObjectiveC_dylib( double a1)
{
  return a1;
}

void gotLoadHelper_x19___sSo8NSObjectCSH10ObjectiveCMc(double a1)
{
}

void gotLoadHelper_x21___sSo10CFErrorRefas5Error10FoundationMc(double a1)
{
  if (!atomic_load(&dlopenHelperFlag_Foundation)) {
    dlopenHelper_Foundation(a1);
  }
}

void gotLoadHelper_x20___sSo10CFErrorRefas5Error10FoundationMc(double a1)
{
  if (!atomic_load(&dlopenHelperFlag_Foundation)) {
    dlopenHelper_Foundation(a1);
  }
}

double gotLoadHelper_x1___s10Foundation26_ObjectiveCBridgeableErrorMp(double result)
{
  if (!atomic_load(&dlopenHelperFlag_Foundation)) {
    return dlopenHelper_Foundation(result);
  }
  return result;
}